
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e398  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a8  0800e538  0800e538  0001e538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ede0  0800ede0  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  0800ede0  0800ede0  0001ede0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ede8  0800ede8  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ede8  0800ede8  0001ede8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800edec  0800edec  0001edec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  0800edf0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048a4  20000268  0800f058  00020268  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004b0c  0800f058  00024b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d516  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005b19  00000000  00000000  0004d7ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001407b  00000000  00000000  000532c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001d08  00000000  00000000  00067348  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001d98  00000000  00000000  00069050  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001d0d6  00000000  00000000  0006ade8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001b2a1  00000000  00000000  00087ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0009e2a0  00000000  00000000  000a315f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001413ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067ec  00000000  00000000  0014147c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000268 	.word	0x20000268
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e520 	.word	0x0800e520

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000026c 	.word	0x2000026c
 80001dc:	0800e520 	.word	0x0800e520

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <writeByte>:

//===================================================================================================================
//====== Set of useful function to access acceleration, gyroscope, and temperature data
//===================================================================================================================

void writeByte(uint8_t address_tx, uint8_t subAddress, uint8_t data) {
 8000f98:	b500      	push	{lr}
 8000f9a:	b085      	sub	sp, #20
	uint8_t data_write[2];
	data_write[0] = subAddress;
 8000f9c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_write[1] = data;
 8000fa0:	f88d 200d 	strb.w	r2, [sp, #13]
	//i2c.write(address, data_write, 2, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2302      	movs	r3, #2
 8000faa:	aa03      	add	r2, sp, #12
 8000fac:	4601      	mov	r1, r0
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <writeByte+0x24>)
 8000fb0:	f002 ffa4 	bl	8003efc <HAL_I2C_Master_Transmit>
}
 8000fb4:	b005      	add	sp, #20
 8000fb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fba:	bf00      	nop
 8000fbc:	20004388 	.word	0x20004388

08000fc0 <readByte>:

//NICK - I've changed these to accept a tx address & a rx address as STM32 boards include the R/W bit at the end of 7 bit adress
//so HAL function takes in 8 bit address including R/W bit
char readByte(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress) {
 8000fc0:	b570      	push	{r4, r5, r6, lr}
 8000fc2:	b084      	sub	sp, #16
	uint8_t data[1]; // `data` will store the register data
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8000fc4:	a904      	add	r1, sp, #16
 8000fc6:	f801 2d08 	strb.w	r2, [r1, #-8]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, 1, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8000fca:	4605      	mov	r5, r0
 8000fcc:	4c09      	ldr	r4, [pc, #36]	; (8000ff4 <readByte+0x34>)
 8000fce:	260a      	movs	r6, #10
 8000fd0:	9600      	str	r6, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	460a      	mov	r2, r1
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f002 ff8f 	bl	8003efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 8000fde:	9600      	str	r6, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	aa03      	add	r2, sp, #12
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f003 f842 	bl	8004070 <HAL_I2C_Master_Receive>

	return data[0];
}
 8000fec:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8000ff0:	b004      	add	sp, #16
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
 8000ff4:	20004388 	.word	0x20004388

08000ff8 <imu_init>:
IMU_StatusTypeDef imu_init(I2C_HandleTypeDef* handle) {
 8000ff8:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(handle, 0xD0, 2, 100) == HAL_OK) {
 8000ffa:	2364      	movs	r3, #100	; 0x64
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	21d0      	movs	r1, #208	; 0xd0
 8001000:	f003 f99e 	bl	8004340 <HAL_I2C_IsDeviceReady>
 8001004:	b100      	cbz	r0, 8001008 <imu_init+0x10>
 8001006:	e7fe      	b.n	8001006 <imu_init+0xe>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle LED on if so
 8001008:	2120      	movs	r1, #32
 800100a:	480a      	ldr	r0, [pc, #40]	; (8001034 <imu_init+0x3c>)
 800100c:	f002 fc8a 	bl	8003924 <HAL_GPIO_TogglePin>
	uint8_t whoami = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001010:	2275      	movs	r2, #117	; 0x75
 8001012:	21d1      	movs	r1, #209	; 0xd1
 8001014:	20d0      	movs	r0, #208	; 0xd0
 8001016:	f7ff ffd3 	bl	8000fc0 <readByte>
 800101a:	4604      	mov	r4, r0
	if (whoami == 0x71) {
 800101c:	2871      	cmp	r0, #113	; 0x71
 800101e:	d106      	bne.n	800102e <imu_init+0x36>
		printf("MPU9250 online..\r\n");
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <imu_init+0x40>)
 8001022:	f009 ff13 	bl	800ae4c <puts>
		printf("whoami reg = %d ..\r\n", whoami);
 8001026:	4621      	mov	r1, r4
 8001028:	4804      	ldr	r0, [pc, #16]	; (800103c <imu_init+0x44>)
 800102a:	f009 fe9b 	bl	800ad64 <iprintf>
}
 800102e:	2000      	movs	r0, #0
 8001030:	bd10      	pop	{r4, pc}
 8001032:	bf00      	nop
 8001034:	40020000 	.word	0x40020000
 8001038:	0800e570 	.word	0x0800e570
 800103c:	0800e584 	.word	0x0800e584

08001040 <readBytes>:

void readBytes(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress,
	uint8_t count, uint8_t * dest) {
 8001040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001044:	b088      	sub	sp, #32
 8001046:	4688      	mov	r8, r1
 8001048:	461c      	mov	r4, r3
 800104a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	uint8_t data[14];
	uint8_t data_write[1];
	data_write[0] = subAddress;
 800104c:	a908      	add	r1, sp, #32
 800104e:	f801 2d14 	strb.w	r2, [r1, #-20]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, count, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 8001052:	4e0e      	ldr	r6, [pc, #56]	; (800108c <readBytes+0x4c>)
 8001054:	270a      	movs	r7, #10
 8001056:	9700      	str	r7, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	460a      	mov	r2, r1
 800105c:	4601      	mov	r1, r0
 800105e:	4630      	mov	r0, r6
 8001060:	f002 ff4c 	bl	8003efc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 8001064:	9700      	str	r7, [sp, #0]
 8001066:	4623      	mov	r3, r4
 8001068:	aa04      	add	r2, sp, #16
 800106a:	4641      	mov	r1, r8
 800106c:	4630      	mov	r0, r6
 800106e:	f002 ffff 	bl	8004070 <HAL_I2C_Master_Receive>

	for (int ii = 0; ii < count; ii++) {
 8001072:	2300      	movs	r3, #0
 8001074:	e005      	b.n	8001082 <readBytes+0x42>
		dest[ii] = data[ii];
 8001076:	aa08      	add	r2, sp, #32
 8001078:	441a      	add	r2, r3
 800107a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800107e:	54ea      	strb	r2, [r5, r3]
	for (int ii = 0; ii < count; ii++) {
 8001080:	3301      	adds	r3, #1
 8001082:	429c      	cmp	r4, r3
 8001084:	dcf7      	bgt.n	8001076 <readBytes+0x36>
	}
}
 8001086:	b008      	add	sp, #32
 8001088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800108c:	20004388 	.word	0x20004388

08001090 <getMres>:

void getMres() {

	switch (Mscale) {
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <getMres+0x1c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b113      	cbz	r3, 800109c <getMres+0xc>
 8001096:	2b01      	cmp	r3, #1
 8001098:	d004      	beq.n	80010a4 <getMres+0x14>
 800109a:	4770      	bx	lr
	// Possible magnetometer scales (and their register bit settings) are:
	// 14 bit resolution (0) and 16 bit resolution (1)
	case MFS_14BITS:
		mRes = 10.0 * 4219.0 / 8190.0; // Proper scale to return milliGauss
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <getMres+0x20>)
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <getMres+0x24>)
 80010a0:	601a      	str	r2, [r3, #0]
		break;
 80010a2:	4770      	bx	lr
	case MFS_16BITS:
		mRes = 10.0 * 4219.0 / 32760.0; // Proper scale to return milliGauss
 80010a4:	4b02      	ldr	r3, [pc, #8]	; (80010b0 <getMres+0x20>)
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <getMres+0x28>)
 80010a8:	601a      	str	r2, [r3, #0]
		break;
	}
}
 80010aa:	4770      	bx	lr
 80010ac:	20000001 	.word	0x20000001
 80010b0:	20004420 	.word	0x20004420
 80010b4:	40a4d84e 	.word	0x40a4d84e
 80010b8:	3fa4d84e 	.word	0x3fa4d84e

080010bc <getGres>:

void getGres() {
	switch (Gscale) {
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <getGres+0x30>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d812      	bhi.n	80010ea <getGres+0x2e>
 80010c4:	e8df f003 	tbb	[pc, r3]
 80010c8:	0e0a0602 	.word	0x0e0a0602
	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case GFS_250DPS:
		gRes = 250.0 / 32768.0;
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <getGres+0x34>)
 80010ce:	4a09      	ldr	r2, [pc, #36]	; (80010f4 <getGres+0x38>)
 80010d0:	601a      	str	r2, [r3, #0]
		break;
 80010d2:	4770      	bx	lr
	case GFS_500DPS:
		gRes = 500.0 / 32768.0;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <getGres+0x34>)
 80010d6:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <getGres+0x3c>)
 80010d8:	601a      	str	r2, [r3, #0]
		break;
 80010da:	4770      	bx	lr
	case GFS_1000DPS:
		gRes = 1000.0 / 32768.0;
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <getGres+0x34>)
 80010de:	4a07      	ldr	r2, [pc, #28]	; (80010fc <getGres+0x40>)
 80010e0:	601a      	str	r2, [r3, #0]
		break;
 80010e2:	4770      	bx	lr
	case GFS_2000DPS:
		gRes = 2000.0 / 32768.0;
 80010e4:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <getGres+0x34>)
 80010e6:	4a06      	ldr	r2, [pc, #24]	; (8001100 <getGres+0x44>)
 80010e8:	601a      	str	r2, [r3, #0]
		break;
	}
}
 80010ea:	4770      	bx	lr
 80010ec:	20000285 	.word	0x20000285
 80010f0:	20004404 	.word	0x20004404
 80010f4:	3bfa0000 	.word	0x3bfa0000
 80010f8:	3c7a0000 	.word	0x3c7a0000
 80010fc:	3cfa0000 	.word	0x3cfa0000
 8001100:	3d7a0000 	.word	0x3d7a0000

08001104 <getAres>:

void getAres() {
	switch (Ascale) {
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <getAres+0x38>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b03      	cmp	r3, #3
 800110a:	d816      	bhi.n	800113a <getAres+0x36>
 800110c:	e8df f003 	tbb	[pc, r3]
 8001110:	110c0702 	.word	0x110c0702
	// Possible accelerometer scales (and their register bit settings) are:
	// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case AFS_2G:
		aRes = 2.0 / 32768.0;
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <getAres+0x3c>)
 8001116:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800111a:	601a      	str	r2, [r3, #0]
		break;
 800111c:	4770      	bx	lr
	case AFS_4G:
		aRes = 4.0 / 32768.0;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <getAres+0x3c>)
 8001120:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001124:	601a      	str	r2, [r3, #0]
		break;
 8001126:	4770      	bx	lr
	case AFS_8G:
		aRes = 8.0 / 32768.0;
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <getAres+0x3c>)
 800112a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800112e:	601a      	str	r2, [r3, #0]
		break;
 8001130:	4770      	bx	lr
	case AFS_16G:
		aRes = 16.0 / 32768.0;
 8001132:	4b03      	ldr	r3, [pc, #12]	; (8001140 <getAres+0x3c>)
 8001134:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001138:	601a      	str	r2, [r3, #0]
		break;
	}
}
 800113a:	4770      	bx	lr
 800113c:	20000284 	.word	0x20000284
 8001140:	200043f8 	.word	0x200043f8

08001144 <readAccelData>:

void readAccelData(int16_t * destination) {
 8001144:	b510      	push	{r4, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 800114a:	ab02      	add	r3, sp, #8
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2306      	movs	r3, #6
 8001150:	223b      	movs	r2, #59	; 0x3b
 8001152:	21d1      	movs	r1, #209	; 0xd1
 8001154:	20d0      	movs	r0, #208	; 0xd0
 8001156:	f7ff ff73 	bl	8001040 <readBytes>
			&rawData[0]); // Read the six raw data registers into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800115a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800115e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001162:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001166:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001168:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800116c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001170:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001174:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001176:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800117a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800117e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001182:	80a3      	strh	r3, [r4, #4]
}
 8001184:	b004      	add	sp, #16
 8001186:	bd10      	pop	{r4, pc}

08001188 <readGyroData>:

void readGyroData(int16_t * destination) {
 8001188:	b510      	push	{r4, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 800118e:	ab02      	add	r3, sp, #8
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2306      	movs	r3, #6
 8001194:	2243      	movs	r2, #67	; 0x43
 8001196:	21d1      	movs	r1, #209	; 0xd1
 8001198:	20d0      	movs	r0, #208	; 0xd0
 800119a:	f7ff ff51 	bl	8001040 <readBytes>
			&rawData[0]); // Read the six raw data registers sequentially into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800119e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80011a2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80011a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011aa:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80011ac:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80011b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80011b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011b8:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80011ba:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80011be:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80011c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011c6:	80a3      	strh	r3, [r4, #4]
}
 80011c8:	b004      	add	sp, #16
 80011ca:	bd10      	pop	{r4, pc}

080011cc <readMagData>:

void readMagData(int16_t * destination) {
 80011cc:	b510      	push	{r4, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	4604      	mov	r4, r0
	uint8_t rawData[7]; // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if (readByte(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
 80011d2:	2202      	movs	r2, #2
 80011d4:	2119      	movs	r1, #25
 80011d6:	2018      	movs	r0, #24
 80011d8:	f7ff fef2 	bl	8000fc0 <readByte>
 80011dc:	f010 0f01 	tst.w	r0, #1
 80011e0:	d101      	bne.n	80011e6 <readMagData+0x1a>
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
			destination[2] =
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
		}
	}
}
 80011e2:	b004      	add	sp, #16
 80011e4:	bd10      	pop	{r4, pc}
		readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_XOUT_L, 7, &rawData[0]); // Read the six raw data and ST2 registers sequentially into data array
 80011e6:	ab02      	add	r3, sp, #8
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2307      	movs	r3, #7
 80011ec:	2203      	movs	r2, #3
 80011ee:	2119      	movs	r1, #25
 80011f0:	2018      	movs	r0, #24
 80011f2:	f7ff ff25 	bl	8001040 <readBytes>
		uint8_t c = rawData[6]; // End data read by reading ST2 register
 80011f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
		if (!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
 80011fa:	f013 0f08 	tst.w	r3, #8
 80011fe:	d1f0      	bne.n	80011e2 <readMagData+0x16>
					(int16_t) (((int16_t) rawData[1] << 8) | rawData[0]); // Turn the MSB and LSB into a signed 16-bit value
 8001200:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001204:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001208:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[0] =
 800120c:	8023      	strh	r3, [r4, #0]
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
 800120e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001212:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001216:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[1] =
 800121a:	8063      	strh	r3, [r4, #2]
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
 800121c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001220:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001224:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[2] =
 8001228:	80a3      	strh	r3, [r4, #4]
}
 800122a:	e7da      	b.n	80011e2 <readMagData+0x16>

0800122c <resetMPU9250>:
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, TEMP_OUT_H, 2,
			&rawData[0]); // Read the two raw data registers sequentially into data array
	return (int16_t) (((int16_t) rawData[0]) << 8 | rawData[1]); // Turn the MSB and LSB into a 16-bit value
}

void resetMPU9250() {
 800122c:	b508      	push	{r3, lr}
	// reset device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 800122e:	2280      	movs	r2, #128	; 0x80
 8001230:	216b      	movs	r1, #107	; 0x6b
 8001232:	20d0      	movs	r0, #208	; 0xd0
 8001234:	f7ff feb0 	bl	8000f98 <writeByte>
	HAL_Delay(100);
 8001238:	2064      	movs	r0, #100	; 0x64
 800123a:	f001 ff27 	bl	800308c <HAL_Delay>
}
 800123e:	bd08      	pop	{r3, pc}

08001240 <initAK8963>:

void initAK8963(float * destination) {
 8001240:	b510      	push	{r4, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	4604      	mov	r4, r0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 8001246:	2200      	movs	r2, #0
 8001248:	210a      	movs	r1, #10
 800124a:	2018      	movs	r0, #24
 800124c:	f7ff fea4 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 8001250:	200a      	movs	r0, #10
 8001252:	f001 ff1b 	bl	800308c <HAL_Delay>
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8001256:	220f      	movs	r2, #15
 8001258:	210a      	movs	r1, #10
 800125a:	2018      	movs	r0, #24
 800125c:	f7ff fe9c 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 8001260:	200a      	movs	r0, #10
 8001262:	f001 ff13 	bl	800308c <HAL_Delay>
	readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ASAX, 3,
 8001266:	ab03      	add	r3, sp, #12
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2303      	movs	r3, #3
 800126c:	2210      	movs	r2, #16
 800126e:	2119      	movs	r1, #25
 8001270:	2018      	movs	r0, #24
 8001272:	f7ff fee5 	bl	8001040 <readBytes>
			&rawData[0]);  // Read the x-, y-, and z-axis calibration values
	destination[0] = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 8001276:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800127a:	3b80      	subs	r3, #128	; 0x80
 800127c:	ee07 3a10 	vmov	s14, r3
 8001280:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001284:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80012fc <initAK8963+0xbc>
 8001288:	ee27 7a06 	vmul.f32	s14, s14, s12
 800128c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001290:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001294:	ed84 7a00 	vstr	s14, [r4]
	destination[1] = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8001298:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800129c:	3b80      	subs	r3, #128	; 0x80
 800129e:	ee07 3a10 	vmov	s14, r3
 80012a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80012a6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80012aa:	ee37 7a26 	vadd.f32	s14, s14, s13
 80012ae:	ed84 7a01 	vstr	s14, [r4, #4]
	destination[2] = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 80012b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80012b6:	3b80      	subs	r3, #128	; 0x80
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80012c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80012c8:	edc4 7a02 	vstr	s15, [r4, #8]
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 80012cc:	2200      	movs	r2, #0
 80012ce:	210a      	movs	r1, #10
 80012d0:	2018      	movs	r0, #24
 80012d2:	f7ff fe61 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 80012d6:	200a      	movs	r0, #10
 80012d8:	f001 fed8 	bl	800308c <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <initAK8963+0xc0>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4a08      	ldr	r2, [pc, #32]	; (8001304 <initAK8963+0xc4>)
 80012e2:	7812      	ldrb	r2, [r2, #0]
 80012e4:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	210a      	movs	r1, #10
 80012ec:	2018      	movs	r0, #24
 80012ee:	f7ff fe53 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 80012f2:	200a      	movs	r0, #10
 80012f4:	f001 feca 	bl	800308c <HAL_Delay>
}
 80012f8:	b004      	add	sp, #16
 80012fa:	bd10      	pop	{r4, pc}
 80012fc:	3b800000 	.word	0x3b800000
 8001300:	20000001 	.word	0x20000001
 8001304:	20000000 	.word	0x20000000

08001308 <initMPU9250>:
	    dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
	    dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];

}

void initMPU9250() {
 8001308:	b510      	push	{r4, lr}
	// Initialize MPU9250 device
	// wake up device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 800130a:	2200      	movs	r2, #0
 800130c:	216b      	movs	r1, #107	; 0x6b
 800130e:	20d0      	movs	r0, #208	; 0xd0
 8001310:	f7ff fe42 	bl	8000f98 <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8001314:	2064      	movs	r0, #100	; 0x64
 8001316:	f001 feb9 	bl	800308c <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01); // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 800131a:	2201      	movs	r2, #1
 800131c:	216b      	movs	r1, #107	; 0x6b
 800131e:	20d0      	movs	r0, #208	; 0xd0
 8001320:	f7ff fe3a 	bl	8000f98 <writeByte>

	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	// DLPF_CFG = bits 2:0 = 010 = 0x03; this sets the sample rate at 1 kHz for both
	// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x00);
 8001324:	2200      	movs	r2, #0
 8001326:	211a      	movs	r1, #26
 8001328:	20d0      	movs	r0, #208	; 0xd0
 800132a:	f7ff fe35 	bl	8000f98 <writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Use a 200 Hz rate; the same rate set in CONFIG above
 800132e:	2200      	movs	r2, #0
 8001330:	2119      	movs	r1, #25
 8001332:	20d0      	movs	r0, #208	; 0xd0
 8001334:	f7ff fe30 	bl	8000f98 <writeByte>

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX,
 8001338:	221b      	movs	r2, #27
 800133a:	21d1      	movs	r1, #209	; 0xd1
 800133c:	4608      	mov	r0, r1
 800133e:	f7ff fe3f 	bl	8000fc0 <readByte>
 8001342:	4604      	mov	r4, r0
	GYRO_CONFIG);
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8001344:	f000 021f 	and.w	r2, r0, #31
 8001348:	211b      	movs	r1, #27
 800134a:	20d0      	movs	r0, #208	; 0xd0
 800134c:	f7ff fe24 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001350:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 8001354:	211b      	movs	r1, #27
 8001356:	20d0      	movs	r0, #208	; 0xd0
 8001358:	f7ff fe1e 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro
 800135c:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <initMPU9250+0xd8>)
 800135e:	781a      	ldrb	r2, [r3, #0]
 8001360:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	211b      	movs	r1, #27
 8001368:	20d0      	movs	r0, #208	; 0xd0
 800136a:	f7ff fe15 	bl	8000f98 <writeByte>

	// Set accelerometer configuration
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG);
 800136e:	221c      	movs	r2, #28
 8001370:	21d1      	movs	r1, #209	; 0xd1
 8001372:	4608      	mov	r0, r1
 8001374:	f7ff fe24 	bl	8000fc0 <readByte>
 8001378:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 800137a:	f000 021f 	and.w	r2, r0, #31
 800137e:	211c      	movs	r1, #28
 8001380:	20d0      	movs	r0, #208	; 0xd0
 8001382:	f7ff fe09 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001386:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 800138a:	211c      	movs	r1, #28
 800138c:	20d0      	movs	r0, #208	; 0xd0
 800138e:	f7ff fe03 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <initMPU9250+0xdc>)
 8001394:	781a      	ldrb	r2, [r3, #0]
 8001396:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	211c      	movs	r1, #28
 800139e:	20d0      	movs	r0, #208	; 0xd0
 80013a0:	f7ff fdfa 	bl	8000f98 <writeByte>

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG2);
 80013a4:	221d      	movs	r2, #29
 80013a6:	21d1      	movs	r1, #209	; 0xd1
 80013a8:	4608      	mov	r0, r1
 80013aa:	f7ff fe09 	bl	8000fc0 <readByte>
 80013ae:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80013b0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80013b4:	211d      	movs	r1, #29
 80013b6:	20d0      	movs	r0, #208	; 0xd0
 80013b8:	f7ff fdee 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c | 0x03); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80013bc:	f044 0203 	orr.w	r2, r4, #3
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	211d      	movs	r1, #29
 80013c4:	20d0      	movs	r0, #208	; 0xd0
 80013c6:	f7ff fde7 	bl	8000f98 <writeByte>
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	writeByte(MPU9250_ADDRESS_TX, INT_PIN_CFG, 0x22);
 80013ca:	2222      	movs	r2, #34	; 0x22
 80013cc:	2137      	movs	r1, #55	; 0x37
 80013ce:	20d0      	movs	r0, #208	; 0xd0
 80013d0:	f7ff fde2 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 80013d4:	2201      	movs	r2, #1
 80013d6:	2138      	movs	r1, #56	; 0x38
 80013d8:	20d0      	movs	r0, #208	; 0xd0
 80013da:	f7ff fddd 	bl	8000f98 <writeByte>
}
 80013de:	bd10      	pop	{r4, pc}
 80013e0:	20000285 	.word	0x20000285
 80013e4:	20000284 	.word	0x20000284

080013e8 <MPU9250SelfTest>:
	dest2[2] = (float) accel_bias[2] / (float) accelsensitivity;
}

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
		{
 80013e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ec:	ed2d 8b08 	vpush	{d8-d11}
 80013f0:	b093      	sub	sp, #76	; 0x4c
 80013f2:	4605      	mov	r5, r0
	uint8_t rawData[6] = { 0, 0, 0, 0, 0, 0 };
 80013f4:	2400      	movs	r4, #0
 80013f6:	9410      	str	r4, [sp, #64]	; 0x40
 80013f8:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
	uint8_t selfTest[6];
	int16_t gAvg[3], aAvg[3], aSTAvg[3], gSTAvg[3];
	float factoryTrim[6];
	uint8_t FS = 0;

	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 80013fc:	4622      	mov	r2, r4
 80013fe:	2119      	movs	r1, #25
 8001400:	20d0      	movs	r0, #208	; 0xd0
 8001402:	f7ff fdc9 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8001406:	2202      	movs	r2, #2
 8001408:	211a      	movs	r1, #26
 800140a:	20d0      	movs	r0, #208	; 0xd0
 800140c:	f7ff fdc4 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 1 << FS); // Set full scale range for the gyro to 250 dps
 8001410:	2201      	movs	r2, #1
 8001412:	211b      	movs	r1, #27
 8001414:	20d0      	movs	r0, #208	; 0xd0
 8001416:	f7ff fdbf 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 800141a:	2202      	movs	r2, #2
 800141c:	211d      	movs	r1, #29
 800141e:	20d0      	movs	r0, #208	; 0xd0
 8001420:	f7ff fdba 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 1 << FS); // Set full scale range for the accelerometer to 2 g
 8001424:	2201      	movs	r2, #1
 8001426:	211c      	movs	r1, #28
 8001428:	20d0      	movs	r0, #208	; 0xd0
 800142a:	f7ff fdb5 	bl	8000f98 <writeByte>

	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 800142e:	e051      	b.n	80014d4 <MPU9250SelfTest+0xec>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 8001430:	ae10      	add	r6, sp, #64	; 0x40
 8001432:	9600      	str	r6, [sp, #0]
 8001434:	2306      	movs	r3, #6
 8001436:	223b      	movs	r2, #59	; 0x3b
 8001438:	21d1      	movs	r1, #209	; 0xd1
 800143a:	20d0      	movs	r0, #208	; 0xd0
 800143c:	f7ff fe00 	bl	8001040 <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001440:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001444:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001448:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800144c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8001450:	4413      	add	r3, r2
 8001452:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		aAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001456:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 800145a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800145e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001462:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8001466:	4413      	add	r3, r2
 8001468:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		aAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800146c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001470:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001474:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001478:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800147c:	4413      	add	r3, r2
 800147e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 8001482:	9600      	str	r6, [sp, #0]
 8001484:	2306      	movs	r3, #6
 8001486:	2243      	movs	r2, #67	; 0x43
 8001488:	21d1      	movs	r1, #209	; 0xd1
 800148a:	20d0      	movs	r0, #208	; 0xd0
 800148c:	f7ff fdd8 	bl	8001040 <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001490:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001494:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001498:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800149c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80014a0:	4413      	add	r3, r2
 80014a2:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		gAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80014a6:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80014aa:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80014ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014b2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80014b6:	4413      	add	r3, r2
 80014b8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		gAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80014bc:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80014c0:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 80014c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014c8:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80014cc:	4413      	add	r3, r2
 80014ce:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 80014d2:	3401      	adds	r4, #1
 80014d4:	2cc7      	cmp	r4, #199	; 0xc7
 80014d6:	ddab      	ble.n	8001430 <MPU9250SelfTest+0x48>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 80014d8:	2400      	movs	r4, #0
 80014da:	e016      	b.n	800150a <MPU9250SelfTest+0x122>
		aAvg[ii] /= 200;
 80014dc:	ab12      	add	r3, sp, #72	; 0x48
 80014de:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 80014e2:	f931 2c18 	ldrsh.w	r2, [r1, #-24]
 80014e6:	48c0      	ldr	r0, [pc, #768]	; (80017e8 <MPU9250SelfTest+0x400>)
 80014e8:	fb80 6302 	smull	r6, r3, r0, r2
 80014ec:	17d2      	asrs	r2, r2, #31
 80014ee:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 80014f2:	f821 2c18 	strh.w	r2, [r1, #-24]
		gAvg[ii] /= 200;
 80014f6:	f931 3c10 	ldrsh.w	r3, [r1, #-16]
 80014fa:	fb80 2003 	smull	r2, r0, r0, r3
 80014fe:	17db      	asrs	r3, r3, #31
 8001500:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 8001504:	f821 3c10 	strh.w	r3, [r1, #-16]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8001508:	3401      	adds	r4, #1
 800150a:	2c02      	cmp	r4, #2
 800150c:	dde6      	ble.n	80014dc <MPU9250SelfTest+0xf4>
	}

	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 800150e:	22e0      	movs	r2, #224	; 0xe0
 8001510:	211c      	movs	r1, #28
 8001512:	20d0      	movs	r0, #208	; 0xd0
 8001514:	f7ff fd40 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8001518:	22e0      	movs	r2, #224	; 0xe0
 800151a:	211b      	movs	r1, #27
 800151c:	20d0      	movs	r0, #208	; 0xd0
 800151e:	f7ff fd3b 	bl	8000f98 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 8001522:	2019      	movs	r0, #25
 8001524:	f001 fdb2 	bl	800308c <HAL_Delay>

	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8001528:	2400      	movs	r4, #0
 800152a:	e051      	b.n	80015d0 <MPU9250SelfTest+0x1e8>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 800152c:	ae10      	add	r6, sp, #64	; 0x40
 800152e:	9600      	str	r6, [sp, #0]
 8001530:	2306      	movs	r3, #6
 8001532:	223b      	movs	r2, #59	; 0x3b
 8001534:	21d1      	movs	r1, #209	; 0xd1
 8001536:	20d0      	movs	r0, #208	; 0xd0
 8001538:	f7ff fd82 	bl	8001040 <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800153c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001540:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001544:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001548:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800154c:	4413      	add	r3, r2
 800154e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		aSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001552:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8001556:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800155a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800155e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8001562:	4413      	add	r3, r2
 8001564:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		aSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001568:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800156c:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001570:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001574:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8001578:	4413      	add	r3, r2
 800157a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 800157e:	9600      	str	r6, [sp, #0]
 8001580:	2306      	movs	r3, #6
 8001582:	2243      	movs	r2, #67	; 0x43
 8001584:	21d1      	movs	r1, #209	; 0xd1
 8001586:	20d0      	movs	r0, #208	; 0xd0
 8001588:	f7ff fd5a 	bl	8001040 <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800158c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001590:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001594:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001598:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800159c:	4413      	add	r3, r2
 800159e:	f8ad 3020 	strh.w	r3, [sp, #32]
		gSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80015a2:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80015a6:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80015aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015ae:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80015b2:	4413      	add	r3, r2
 80015b4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		gSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80015b8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80015bc:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 80015c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015c4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80015c8:	4413      	add	r3, r2
 80015ca:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 80015ce:	3401      	adds	r4, #1
 80015d0:	2cc7      	cmp	r4, #199	; 0xc7
 80015d2:	ddab      	ble.n	800152c <MPU9250SelfTest+0x144>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 80015d4:	2400      	movs	r4, #0
 80015d6:	e016      	b.n	8001606 <MPU9250SelfTest+0x21e>
		aSTAvg[ii] /= 200;
 80015d8:	ab12      	add	r3, sp, #72	; 0x48
 80015da:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 80015de:	f931 2c20 	ldrsh.w	r2, [r1, #-32]
 80015e2:	4881      	ldr	r0, [pc, #516]	; (80017e8 <MPU9250SelfTest+0x400>)
 80015e4:	fb80 6302 	smull	r6, r3, r0, r2
 80015e8:	17d2      	asrs	r2, r2, #31
 80015ea:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 80015ee:	f821 2c20 	strh.w	r2, [r1, #-32]
		gSTAvg[ii] /= 200;
 80015f2:	f931 3c28 	ldrsh.w	r3, [r1, #-40]
 80015f6:	fb80 2003 	smull	r2, r0, r0, r3
 80015fa:	17db      	asrs	r3, r3, #31
 80015fc:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 8001600:	f821 3c28 	strh.w	r3, [r1, #-40]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8001604:	3401      	adds	r4, #1
 8001606:	2c02      	cmp	r4, #2
 8001608:	dde6      	ble.n	80015d8 <MPU9250SelfTest+0x1f0>
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00);
 800160a:	2200      	movs	r2, #0
 800160c:	211c      	movs	r1, #28
 800160e:	20d0      	movs	r0, #208	; 0xd0
 8001610:	f7ff fcc2 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00);
 8001614:	2200      	movs	r2, #0
 8001616:	211b      	movs	r1, #27
 8001618:	20d0      	movs	r0, #208	; 0xd0
 800161a:	f7ff fcbd 	bl	8000f98 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 800161e:	2019      	movs	r0, #25
 8001620:	f001 fd34 	bl	800308c <HAL_Delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001624:	220d      	movs	r2, #13
 8001626:	21d1      	movs	r1, #209	; 0xd1
 8001628:	20d0      	movs	r0, #208	; 0xd0
 800162a:	f7ff fcc9 	bl	8000fc0 <readByte>
 800162e:	ee08 0a10 	vmov	s16, r0
	SELF_TEST_X_ACCEL); // X-axis accel self-test results
	selfTest[1] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001632:	220e      	movs	r2, #14
 8001634:	21d1      	movs	r1, #209	; 0xd1
 8001636:	20d0      	movs	r0, #208	; 0xd0
 8001638:	f7ff fcc2 	bl	8000fc0 <readByte>
 800163c:	ee0b 0a10 	vmov	s22, r0
	SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
	selfTest[2] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001640:	220f      	movs	r2, #15
 8001642:	21d1      	movs	r1, #209	; 0xd1
 8001644:	20d0      	movs	r0, #208	; 0xd0
 8001646:	f7ff fcbb 	bl	8000fc0 <readByte>
 800164a:	ee0a 0a90 	vmov	s21, r0
	SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
	selfTest[3] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800164e:	2200      	movs	r2, #0
 8001650:	21d1      	movs	r1, #209	; 0xd1
 8001652:	20d0      	movs	r0, #208	; 0xd0
 8001654:	f7ff fcb4 	bl	8000fc0 <readByte>
 8001658:	ee0a 0a10 	vmov	s20, r0
	SELF_TEST_X_GYRO); // X-axis gyro self-test results
	selfTest[4] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800165c:	2201      	movs	r2, #1
 800165e:	21d1      	movs	r1, #209	; 0xd1
 8001660:	20d0      	movs	r0, #208	; 0xd0
 8001662:	f7ff fcad 	bl	8000fc0 <readByte>
 8001666:	ee09 0a90 	vmov	s19, r0
	SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
	selfTest[5] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800166a:	2202      	movs	r2, #2
 800166c:	21d1      	movs	r1, #209	; 0xd1
 800166e:	20d0      	movs	r0, #208	; 0xd0
 8001670:	f7ff fca6 	bl	8000fc0 <readByte>
 8001674:	ee09 0a10 	vmov	s18, r0
	SELF_TEST_Z_GYRO); // Z-axis gyro self-test results

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 8001678:	eef8 7a48 	vcvt.f32.u32	s15, s16
 800167c:	ee17 0a90 	vmov	r0, s15
 8001680:	f7fe ff6a 	bl	8000558 <__aeabi_f2d>
 8001684:	2200      	movs	r2, #0
 8001686:	4b59      	ldr	r3, [pc, #356]	; (80017ec <MPU9250SelfTest+0x404>)
 8001688:	f7fe fe06 	bl	8000298 <__aeabi_dsub>
 800168c:	ed9f 8b52 	vldr	d8, [pc, #328]	; 80017d8 <MPU9250SelfTest+0x3f0>
 8001690:	ec41 0b11 	vmov	d1, r0, r1
 8001694:	eeb0 0a48 	vmov.f32	s0, s16
 8001698:	eef0 0a68 	vmov.f32	s1, s17
 800169c:	f006 ff90 	bl	80085c0 <pow>
 80016a0:	a34f      	add	r3, pc, #316	; (adr r3, 80017e0 <MPU9250SelfTest+0x3f8>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	ec51 0b10 	vmov	r0, r1, d0
 80016aa:	f7fe ffad 	bl	8000608 <__aeabi_dmul>
 80016ae:	f7ff faa3 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[0] = (float) (2620 / 1 << FS)
 80016b2:	9002      	str	r0, [sp, #8]
	factoryTrim[1] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 80016b4:	eef8 7a4b 	vcvt.f32.u32	s15, s22
 80016b8:	ee17 0a90 	vmov	r0, s15
 80016bc:	f7fe ff4c 	bl	8000558 <__aeabi_f2d>
 80016c0:	2200      	movs	r2, #0
 80016c2:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <MPU9250SelfTest+0x404>)
 80016c4:	f7fe fde8 	bl	8000298 <__aeabi_dsub>
 80016c8:	ec41 0b11 	vmov	d1, r0, r1
 80016cc:	eeb0 0a48 	vmov.f32	s0, s16
 80016d0:	eef0 0a68 	vmov.f32	s1, s17
 80016d4:	f006 ff74 	bl	80085c0 <pow>
 80016d8:	a341      	add	r3, pc, #260	; (adr r3, 80017e0 <MPU9250SelfTest+0x3f8>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	ec51 0b10 	vmov	r0, r1, d0
 80016e2:	f7fe ff91 	bl	8000608 <__aeabi_dmul>
 80016e6:	f7ff fa87 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[1] = (float) (2620 / 1 << FS)
 80016ea:	9003      	str	r0, [sp, #12]
	factoryTrim[2] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 80016ec:	eef8 7a6a 	vcvt.f32.u32	s15, s21
 80016f0:	ee17 0a90 	vmov	r0, s15
 80016f4:	f7fe ff30 	bl	8000558 <__aeabi_f2d>
 80016f8:	2200      	movs	r2, #0
 80016fa:	4b3c      	ldr	r3, [pc, #240]	; (80017ec <MPU9250SelfTest+0x404>)
 80016fc:	f7fe fdcc 	bl	8000298 <__aeabi_dsub>
 8001700:	ec41 0b11 	vmov	d1, r0, r1
 8001704:	eeb0 0a48 	vmov.f32	s0, s16
 8001708:	eef0 0a68 	vmov.f32	s1, s17
 800170c:	f006 ff58 	bl	80085c0 <pow>
 8001710:	a333      	add	r3, pc, #204	; (adr r3, 80017e0 <MPU9250SelfTest+0x3f8>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	ec51 0b10 	vmov	r0, r1, d0
 800171a:	f7fe ff75 	bl	8000608 <__aeabi_dmul>
 800171e:	f7ff fa6b 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[2] = (float) (2620 / 1 << FS)
 8001722:	9004      	str	r0, [sp, #16]
	factoryTrim[3] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 8001724:	eef8 7a4a 	vcvt.f32.u32	s15, s20
 8001728:	ee17 0a90 	vmov	r0, s15
 800172c:	f7fe ff14 	bl	8000558 <__aeabi_f2d>
 8001730:	2200      	movs	r2, #0
 8001732:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <MPU9250SelfTest+0x404>)
 8001734:	f7fe fdb0 	bl	8000298 <__aeabi_dsub>
 8001738:	ec41 0b11 	vmov	d1, r0, r1
 800173c:	eeb0 0a48 	vmov.f32	s0, s16
 8001740:	eef0 0a68 	vmov.f32	s1, s17
 8001744:	f006 ff3c 	bl	80085c0 <pow>
 8001748:	a325      	add	r3, pc, #148	; (adr r3, 80017e0 <MPU9250SelfTest+0x3f8>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	ec51 0b10 	vmov	r0, r1, d0
 8001752:	f7fe ff59 	bl	8000608 <__aeabi_dmul>
 8001756:	f7ff fa4f 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[3] = (float) (2620 / 1 << FS)
 800175a:	9005      	str	r0, [sp, #20]
	factoryTrim[4] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 800175c:	eef8 7a69 	vcvt.f32.u32	s15, s19
 8001760:	ee17 0a90 	vmov	r0, s15
 8001764:	f7fe fef8 	bl	8000558 <__aeabi_f2d>
 8001768:	2200      	movs	r2, #0
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <MPU9250SelfTest+0x404>)
 800176c:	f7fe fd94 	bl	8000298 <__aeabi_dsub>
 8001770:	ec41 0b11 	vmov	d1, r0, r1
 8001774:	eeb0 0a48 	vmov.f32	s0, s16
 8001778:	eef0 0a68 	vmov.f32	s1, s17
 800177c:	f006 ff20 	bl	80085c0 <pow>
 8001780:	a317      	add	r3, pc, #92	; (adr r3, 80017e0 <MPU9250SelfTest+0x3f8>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	ec51 0b10 	vmov	r0, r1, d0
 800178a:	f7fe ff3d 	bl	8000608 <__aeabi_dmul>
 800178e:	f7ff fa33 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[4] = (float) (2620 / 1 << FS)
 8001792:	9006      	str	r0, [sp, #24]
	factoryTrim[5] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 8001794:	eef8 7a49 	vcvt.f32.u32	s15, s18
 8001798:	ee17 0a90 	vmov	r0, s15
 800179c:	f7fe fedc 	bl	8000558 <__aeabi_f2d>
 80017a0:	2200      	movs	r2, #0
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MPU9250SelfTest+0x404>)
 80017a4:	f7fe fd78 	bl	8000298 <__aeabi_dsub>
 80017a8:	ec41 0b11 	vmov	d1, r0, r1
 80017ac:	eeb0 0a48 	vmov.f32	s0, s16
 80017b0:	eef0 0a68 	vmov.f32	s1, s17
 80017b4:	f006 ff04 	bl	80085c0 <pow>
 80017b8:	a309      	add	r3, pc, #36	; (adr r3, 80017e0 <MPU9250SelfTest+0x3f8>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	ec51 0b10 	vmov	r0, r1, d0
 80017c2:	f7fe ff21 	bl	8000608 <__aeabi_dmul>
 80017c6:	f7ff fa17 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[5] = (float) (2620 / 1 << FS)
 80017ca:	9007      	str	r0, [sp, #28]

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 80017cc:	f04f 0800 	mov.w	r8, #0
 80017d0:	e05f      	b.n	8001892 <MPU9250SelfTest+0x4aa>
 80017d2:	bf00      	nop
 80017d4:	f3af 8000 	nop.w
 80017d8:	c28f5c29 	.word	0xc28f5c29
 80017dc:	3ff028f5 	.word	0x3ff028f5
 80017e0:	00000000 	.word	0x00000000
 80017e4:	40a47800 	.word	0x40a47800
 80017e8:	51eb851f 	.word	0x51eb851f
 80017ec:	3ff00000 	.word	0x3ff00000
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 80017f0:	ab12      	add	r3, sp, #72	; 0x48
 80017f2:	eb03 0448 	add.w	r4, r3, r8, lsl #1
 80017f6:	f934 0c20 	ldrsh.w	r0, [r4, #-32]
 80017fa:	f934 3c18 	ldrsh.w	r3, [r4, #-24]
 80017fe:	1ac0      	subs	r0, r0, r3
 8001800:	ee07 0a90 	vmov	s15, r0
 8001804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001808:	ee17 0a90 	vmov	r0, s15
 800180c:	f7fe fea4 	bl	8000558 <__aeabi_f2d>
 8001810:	2200      	movs	r2, #0
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <MPU9250SelfTest+0x4bc>)
 8001814:	f7fe fef8 	bl	8000608 <__aeabi_dmul>
 8001818:	4606      	mov	r6, r0
 800181a:	460f      	mov	r7, r1
				/ factoryTrim[i]; // Report percent differences
 800181c:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8001820:	ab12      	add	r3, sp, #72	; 0x48
 8001822:	444b      	add	r3, r9
 8001824:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001828:	f7fe fe96 	bl	8000558 <__aeabi_f2d>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 800182c:	44a9      	add	r9, r5
				/ factoryTrim[i]; // Report percent differences
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4630      	mov	r0, r6
 8001834:	4639      	mov	r1, r7
 8001836:	f7ff f811 	bl	800085c <__aeabi_ddiv>
 800183a:	f7ff f9dd 	bl	8000bf8 <__aeabi_d2f>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 800183e:	f8c9 0000 	str.w	r0, [r9]
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001842:	f934 0c28 	ldrsh.w	r0, [r4, #-40]
 8001846:	f934 3c10 	ldrsh.w	r3, [r4, #-16]
 800184a:	1ac0      	subs	r0, r0, r3
 800184c:	ee07 0a90 	vmov	s15, r0
 8001850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001854:	ee17 0a90 	vmov	r0, s15
 8001858:	f7fe fe7e 	bl	8000558 <__aeabi_f2d>
 800185c:	2200      	movs	r2, #0
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MPU9250SelfTest+0x4bc>)
 8001860:	f7fe fed2 	bl	8000608 <__aeabi_dmul>
 8001864:	4606      	mov	r6, r0
 8001866:	460f      	mov	r7, r1
				/ factoryTrim[i + 3]; // Report percent differences
 8001868:	f108 0403 	add.w	r4, r8, #3
 800186c:	00a4      	lsls	r4, r4, #2
 800186e:	ab12      	add	r3, sp, #72	; 0x48
 8001870:	4423      	add	r3, r4
 8001872:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001876:	f7fe fe6f 	bl	8000558 <__aeabi_f2d>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 800187a:	442c      	add	r4, r5
				/ factoryTrim[i + 3]; // Report percent differences
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4630      	mov	r0, r6
 8001882:	4639      	mov	r1, r7
 8001884:	f7fe ffea 	bl	800085c <__aeabi_ddiv>
 8001888:	f7ff f9b6 	bl	8000bf8 <__aeabi_d2f>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 800188c:	6020      	str	r0, [r4, #0]
	for (int i = 0; i < 3; i++) {
 800188e:	f108 0801 	add.w	r8, r8, #1
 8001892:	f1b8 0f02 	cmp.w	r8, #2
 8001896:	ddab      	ble.n	80017f0 <MPU9250SelfTest+0x408>
	}

}
 8001898:	b013      	add	sp, #76	; 0x4c
 800189a:	ecbd 8b08 	vpop	{d8-d11}
 800189e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018a2:	bf00      	nop
 80018a4:	40590000 	.word	0x40590000

080018a8 <imu_calibrate>:
IMU_StatusTypeDef imu_calibrate() {
 80018a8:	b508      	push	{r3, lr}
	resetMPU9250();
 80018aa:	f7ff fcbf 	bl	800122c <resetMPU9250>
	MPU9250SelfTest(SelfTest); // Start by performing self test and reporting values
 80018ae:	480e      	ldr	r0, [pc, #56]	; (80018e8 <imu_calibrate+0x40>)
 80018b0:	f7ff fd9a 	bl	80013e8 <MPU9250SelfTest>
	HAL_Delay(500);
 80018b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018b8:	f001 fbe8 	bl	800308c <HAL_Delay>
	HAL_Delay(500);
 80018bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018c0:	f001 fbe4 	bl	800308c <HAL_Delay>
	initMPU9250();
 80018c4:	f7ff fd20 	bl	8001308 <initMPU9250>
	initAK8963(magCalibration);
 80018c8:	4808      	ldr	r0, [pc, #32]	; (80018ec <imu_calibrate+0x44>)
 80018ca:	f7ff fcb9 	bl	8001240 <initAK8963>
	HAL_Delay(500);
 80018ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018d2:	f001 fbdb 	bl	800308c <HAL_Delay>
	getAres(); // Get accelerometer sensitivity
 80018d6:	f7ff fc15 	bl	8001104 <getAres>
	getGres(); // Get gyro sensitivity
 80018da:	f7ff fbef 	bl	80010bc <getGres>
	getMres(); // Get magnetometer sensitivity
 80018de:	f7ff fbd7 	bl	8001090 <getMres>
}
 80018e2:	2000      	movs	r0, #0
 80018e4:	bd08      	pop	{r3, pc}
 80018e6:	bf00      	nop
 80018e8:	20004370 	.word	0x20004370
 80018ec:	2000001c 	.word	0x2000001c

080018f0 <MahonyQuaternionUpdate>:
	float q3q3 = q3 * q3;
	float q3q4 = q3 * q4;
	float q4q4 = q4 * q4;

	// Normalise accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 80018f0:	ee61 7a01 	vmul.f32	s15, s2, s2
		float gz, float mx, float my, float mz) {
 80018f4:	b530      	push	{r4, r5, lr}
	norm = sqrt(ax * ax + ay * ay + az * az);
 80018f6:	eee0 7aa0 	vfma.f32	s15, s1, s1
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 80018fa:	4cb9      	ldr	r4, [pc, #740]	; (8001be0 <MahonyQuaternionUpdate+0x2f0>)
		float gz, float mx, float my, float mz) {
 80018fc:	ed2d 8b10 	vpush	{d8-d15}
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001900:	eee0 7a00 	vfma.f32	s15, s0, s0
		float gz, float mx, float my, float mz) {
 8001904:	b089      	sub	sp, #36	; 0x24
 8001906:	eeb0 aa41 	vmov.f32	s20, s2
	norm = sqrt(ax * ax + ay * ay + az * az);
 800190a:	ee17 0a90 	vmov	r0, s15
		float gz, float mx, float my, float mz) {
 800190e:	eeb0 ca61 	vmov.f32	s24, s3
 8001912:	eeb0 ea42 	vmov.f32	s28, s4
 8001916:	eef0 da62 	vmov.f32	s27, s5
 800191a:	eef0 ba43 	vmov.f32	s23, s6
 800191e:	eeb0 ba63 	vmov.f32	s22, s7
 8001922:	eef0 ca44 	vmov.f32	s25, s8
 8001926:	eef0 8a60 	vmov.f32	s17, s1
 800192a:	eeb0 8a40 	vmov.f32	s16, s0
	norm = sqrt(ax * ax + ay * ay + az * az);
 800192e:	f7fe fe13 	bl	8000558 <__aeabi_f2d>
 8001932:	ec41 0b10 	vmov	d0, r0, r1
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 8001936:	ed94 9a00 	vldr	s18, [r4]
 800193a:	ed94 da01 	vldr	s26, [r4, #4]
 800193e:	edd4 aa02 	vldr	s21, [r4, #8]
 8001942:	edd4 9a03 	vldr	s19, [r4, #12]
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001946:	f006 ffab 	bl	80088a0 <sqrt>
 800194a:	ec51 0b10 	vmov	r0, r1, d0
 800194e:	f7ff f953 	bl	8000bf8 <__aeabi_d2f>
 8001952:	ee0e 0a90 	vmov	s29, r0
	if (norm == 0.0f)
 8001956:	eef5 ea40 	vcmp.f32	s29, #0.0
 800195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195e:	d103      	bne.n	8001968 <MahonyQuaternionUpdate+0x78>
	q[0] = q1 * norm;
	q[1] = q2 * norm;
	q[2] = q3 * norm;
	q[3] = q4 * norm;

}
 8001960:	b009      	add	sp, #36	; 0x24
 8001962:	ecbd 8b10 	vpop	{d8-d15}
 8001966:	bd30      	pop	{r4, r5, pc}
	norm = sqrt(mx * mx + my * my + mz * mz);
 8001968:	ee6c 7aac 	vmul.f32	s15, s25, s25
 800196c:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8001970:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8001974:	ee17 0a90 	vmov	r0, s15
 8001978:	f7fe fdee 	bl	8000558 <__aeabi_f2d>
 800197c:	ec41 0b10 	vmov	d0, r0, r1
 8001980:	f006 ff8e 	bl	80088a0 <sqrt>
 8001984:	ec51 0b10 	vmov	r0, r1, d0
 8001988:	f7ff f936 	bl	8000bf8 <__aeabi_d2f>
 800198c:	ee07 0a90 	vmov	s15, r0
	if (norm == 0.0f)
 8001990:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001998:	d0e2      	beq.n	8001960 <MahonyQuaternionUpdate+0x70>
	norm = 1.0f / norm;        // use reciprocal for division
 800199a:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
	norm = 1.0f / norm;        // use reciprocal for division
 800199e:	ee8f 4a27 	vdiv.f32	s8, s30, s15
 80019a2:	2500      	movs	r5, #0
	float q4q4 = q4 * q4;
 80019a4:	ee29 6aa9 	vmul.f32	s12, s19, s19
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019a8:	ee2d 7a4d 	vnmul.f32	s14, s26, s26
	float q2q3 = q2 * q3;
 80019ac:	ee6d 6a2a 	vmul.f32	s13, s26, s21
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019b0:	ee77 7a46 	vsub.f32	s15, s14, s12
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80019b4:	eef1 5a49 	vneg.f32	s11, s18
 80019b8:	eef0 4a46 	vmov.f32	s9, s12
 80019bc:	eef6 fa00 	vmov.f32	s31, #96	; 0x3f000000  0.5
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019c0:	eef0 3a66 	vmov.f32	s7, s13
	my *= norm;
 80019c4:	ee2b ba04 	vmul.f32	s22, s22, s8
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80019c8:	eee5 6aa9 	vfma.f32	s13, s11, s19
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019cc:	eee9 3a29 	vfma.f32	s7, s18, s19
 80019d0:	ee77 7aaf 	vadd.f32	s15, s15, s31
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80019d4:	eeea 4aaa 	vfma.f32	s9, s21, s21
	float q3q4 = q3 * q4;
 80019d8:	ee2a 5aa9 	vmul.f32	s10, s21, s19
	mx *= norm;
 80019dc:	ee6b ba84 	vmul.f32	s23, s23, s8
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019e0:	ee67 7a8b 	vmul.f32	s15, s15, s22
	norm = 1.0f / norm;        // use reciprocal for division
 80019e4:	ee8f 1a2e 	vdiv.f32	s2, s30, s29
			+ 2.0f * mz * (q3q4 - q1q2);
 80019e8:	eeb0 3a45 	vmov.f32	s6, s10
	mz *= norm;
 80019ec:	ee6c ea84 	vmul.f32	s29, s25, s8
	float q2q4 = q2 * q4;
 80019f0:	ee6d ca29 	vmul.f32	s25, s26, s19
			+ 2.0f * mz * (q3q4 - q1q2);
 80019f4:	eea5 3a8d 	vfma.f32	s6, s11, s26
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80019f8:	ee7f 4ae4 	vsub.f32	s9, s31, s9
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019fc:	eee3 7aab 	vfma.f32	s15, s7, s23
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a00:	ee66 3a8b 	vmul.f32	s7, s13, s22
			+ 2.0f * mz * (q2q4 + q1q3);
 8001a04:	eeb0 4a6c 	vmov.f32	s8, s25
 8001a08:	eea9 4a2a 	vfma.f32	s8, s18, s21
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a0c:	eee4 3aab 	vfma.f32	s7, s9, s23
			+ 2.0f * mz * (q3q4 - q1q2);
 8001a10:	eee3 7a2e 	vfma.f32	s15, s6, s29
			+ 2.0f * mz * (q2q4 + q1q3);
 8001a14:	eee4 3a2e 	vfma.f32	s7, s8, s29
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001a18:	ee77 7aa7 	vadd.f32	s15, s15, s15
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a1c:	ee73 3aa3 	vadd.f32	s7, s7, s7
	bx = sqrt((hx * hx) + (hy * hy));
 8001a20:	ee67 7aa7 	vmul.f32	s15, s15, s15
	ax *= norm;
 8001a24:	ee28 8a01 	vmul.f32	s16, s16, s2
	bx = sqrt((hx * hx) + (hy * hy));
 8001a28:	eee3 7aa3 	vfma.f32	s15, s7, s7
	ay *= norm;
 8001a2c:	ee68 8a81 	vmul.f32	s17, s17, s2
	bx = sqrt((hx * hx) + (hy * hy));
 8001a30:	ee17 0a90 	vmov	r0, s15
	az *= norm;
 8001a34:	ee2a aa01 	vmul.f32	s20, s20, s2
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001a38:	ed8d 7a07 	vstr	s14, [sp, #28]
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a3c:	ed8d 6a06 	vstr	s12, [sp, #24]
			+ 2.0f * mz * (q3q4 - q1q2);
 8001a40:	ed8d 5a05 	vstr	s10, [sp, #20]
 8001a44:	edcd 5a04 	vstr	s11, [sp, #16]
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a48:	edcd 6a03 	vstr	s13, [sp, #12]
 8001a4c:	edcd 4a02 	vstr	s9, [sp, #8]
			+ 2.0f * mz * (q2q4 + q1q3);
 8001a50:	ed8d 4a01 	vstr	s8, [sp, #4]
	bx = sqrt((hx * hx) + (hy * hy));
 8001a54:	f7fe fd80 	bl	8000558 <__aeabi_f2d>
 8001a58:	ec41 0b10 	vmov	d0, r0, r1
 8001a5c:	f006 ff20 	bl	80088a0 <sqrt>
 8001a60:	ec51 0b10 	vmov	r0, r1, d0
 8001a64:	f7ff f8c8 	bl	8000bf8 <__aeabi_d2f>
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001a68:	ed9d 5a05 	vldr	s10, [sp, #20]
 8001a6c:	eddd 5a04 	vldr	s11, [sp, #16]
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001a70:	ed9d 7a07 	vldr	s14, [sp, #28]
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001a74:	ed9d 6a06 	vldr	s12, [sp, #24]
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001a78:	eddd 4a02 	vldr	s9, [sp, #8]
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001a7c:	ed9d 4a01 	vldr	s8, [sp, #4]
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001a80:	eddd 6a03 	vldr	s13, [sp, #12]
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001a84:	4a57      	ldr	r2, [pc, #348]	; (8001be4 <MahonyQuaternionUpdate+0x2f4>)
		eInt[0] = 0.0f;     // prevent integral wind up
 8001a86:	4b58      	ldr	r3, [pc, #352]	; (8001be8 <MahonyQuaternionUpdate+0x2f8>)
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001a88:	eea9 5a0d 	vfma.f32	s10, s18, s26
		eInt[0] = 0.0f;     // prevent integral wind up
 8001a8c:	601d      	str	r5, [r3, #0]
		eInt[1] = 0.0f;
 8001a8e:	605d      	str	r5, [r3, #4]
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001a90:	eee5 caaa 	vfma.f32	s25, s11, s21
		eInt[2] = 0.0f;
 8001a94:	609d      	str	r5, [r3, #8]
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001a96:	eeb1 3a6a 	vneg.f32	s6, s21
 8001a9a:	eef0 5a47 	vmov.f32	s11, s14
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001a9e:	ee65 7a0b 	vmul.f32	s15, s10, s22
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001aa2:	eee3 5a2a 	vfma.f32	s11, s6, s21
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001aa6:	eeec 7aab 	vfma.f32	s15, s25, s23
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001aaa:	ee75 5aaf 	vadd.f32	s11, s11, s31
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001aae:	eea9 7a09 	vfma.f32	s14, s18, s18
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001ab2:	eee5 7aae 	vfma.f32	s15, s11, s29
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001ab6:	eea3 7a2a 	vfma.f32	s14, s6, s21
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001aba:	ee77 7aa7 	vadd.f32	s15, s15, s15
	bx = sqrt((hx * hx) + (hy * hy));
 8001abe:	ee03 0a90 	vmov	s7, r0
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001ac2:	ee37 6a06 	vadd.f32	s12, s14, s12
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001ac6:	ee2c 3aa7 	vmul.f32	s6, s25, s15
	vx = 2.0f * (q2q4 - q1q3);
 8001aca:	ee7c caac 	vadd.f32	s25, s25, s25
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001ace:	eea4 3aa3 	vfma.f32	s6, s9, s7
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001ad2:	ee66 4a48 	vnmul.f32	s9, s12, s16
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001ad6:	ee25 7aa7 	vmul.f32	s14, s11, s15
	vy = 2.0f * (q1q2 + q3q4);
 8001ada:	ee75 5a05 	vadd.f32	s11, s10, s10
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001ade:	eeea 4a2c 	vfma.f32	s9, s20, s25
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001ae2:	eea4 7a23 	vfma.f32	s14, s8, s7
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001ae6:	ee25 1aca 	vnmul.f32	s2, s11, s20
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001aea:	ee65 7a27 	vmul.f32	s15, s10, s15
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001aee:	eea8 1a86 	vfma.f32	s2, s17, s12
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001af2:	ee33 5a03 	vadd.f32	s10, s6, s6
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001af6:	eee6 7aa3 	vfma.f32	s15, s13, s7
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001afa:	eef0 6a64 	vmov.f32	s13, s9
 8001afe:	eeee 6a85 	vfma.f32	s13, s29, s10
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001b02:	ee37 7a07 	vadd.f32	s14, s14, s14
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001b06:	ee6c cae8 	vnmul.f32	s25, s25, s17
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001b0a:	eeab 1a07 	vfma.f32	s2, s22, s14
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001b0e:	eee8 ca25 	vfma.f32	s25, s16, s11
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001b12:	eeeb 6ac7 	vfms.f32	s13, s23, s14
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001b16:	ee77 7aa7 	vadd.f32	s15, s15, s15
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b1a:	eeb0 8a6a 	vmov.f32	s16, s21
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001b1e:	eeae 1ae7 	vfms.f32	s2, s29, s15
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001b22:	eeeb caa7 	vfma.f32	s25, s23, s15
	gx = gx + Kp * ex + Ki * eInt[0];
 8001b26:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	gy = gy + Kp * ey + Ki * eInt[1];
 8001b2a:	eea6 eaa7 	vfma.f32	s28, s13, s15
	gx = gx + Kp * ex + Ki * eInt[0];
 8001b2e:	eea1 ca27 	vfma.f32	s24, s2, s15
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001b32:	eeeb ca45 	vfms.f32	s25, s22, s10
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001b36:	ee6a 6a8e 	vmul.f32	s13, s21, s28
	gz = gz + Kp * ez + Ki * eInt[2];
 8001b3a:	eeec daa7 	vfma.f32	s27, s25, s15
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001b3e:	eeed 6a0c 	vfma.f32	s13, s26, s24
 8001b42:	edd2 7a00 	vldr	s15, [r2]
 8001b46:	eee9 6aad 	vfma.f32	s13, s19, s27
 8001b4a:	ee67 faaf 	vmul.f32	s31, s15, s31
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b4e:	ee29 7a8c 	vmul.f32	s14, s19, s24
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001b52:	eea6 9aef 	vfms.f32	s18, s13, s31
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001b56:	ee6e 7a69 	vnmul.f32	s15, s28, s19
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b5a:	eead 7a6d 	vfms.f32	s14, s26, s27
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001b5e:	eeea 7aad 	vfma.f32	s15, s21, s27
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b62:	eeae 7a09 	vfma.f32	s14, s28, s18
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001b66:	eeec 7a09 	vfma.f32	s15, s24, s18
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b6a:	eea7 8a2f 	vfma.f32	s16, s14, s31
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001b6e:	ee2c ca6a 	vnmul.f32	s24, s24, s21
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001b72:	eef0 8a4d 	vmov.f32	s17, s26
 8001b76:	eee7 8aaf 	vfma.f32	s17, s15, s31
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001b7a:	eead ca0e 	vfma.f32	s24, s26, s28
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001b7e:	ee68 7a08 	vmul.f32	s15, s16, s16
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001b82:	eead ca89 	vfma.f32	s24, s27, s18
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001b86:	eee8 7aa8 	vfma.f32	s15, s17, s17
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001b8a:	eeec 9a2f 	vfma.f32	s19, s24, s31
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001b8e:	eee9 7a09 	vfma.f32	s15, s18, s18
 8001b92:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8001b96:	ee17 0a90 	vmov	r0, s15
 8001b9a:	f7fe fcdd 	bl	8000558 <__aeabi_f2d>
 8001b9e:	ec41 0b10 	vmov	d0, r0, r1
 8001ba2:	f006 fe7d 	bl	80088a0 <sqrt>
 8001ba6:	ec51 0b10 	vmov	r0, r1, d0
 8001baa:	f7ff f825 	bl	8000bf8 <__aeabi_d2f>
	norm = 1.0f / norm;
 8001bae:	ee07 0a90 	vmov	s15, r0
 8001bb2:	eecf 7a27 	vdiv.f32	s15, s30, s15
	q[1] = q2 * norm;
 8001bb6:	ee68 8aa7 	vmul.f32	s17, s17, s15
	q[2] = q3 * norm;
 8001bba:	ee28 8a27 	vmul.f32	s16, s16, s15
	q[3] = q4 * norm;
 8001bbe:	ee69 9aa7 	vmul.f32	s19, s19, s15
	q[0] = q1 * norm;
 8001bc2:	ee29 9a27 	vmul.f32	s18, s18, s15
	q[1] = q2 * norm;
 8001bc6:	edc4 8a01 	vstr	s17, [r4, #4]
	q[2] = q3 * norm;
 8001bca:	ed84 8a02 	vstr	s16, [r4, #8]
	q[3] = q4 * norm;
 8001bce:	edc4 9a03 	vstr	s19, [r4, #12]
	q[0] = q1 * norm;
 8001bd2:	ed84 9a00 	vstr	s18, [r4]
}
 8001bd6:	b009      	add	sp, #36	; 0x24
 8001bd8:	ecbd 8b10 	vpop	{d8-d15}
 8001bdc:	bd30      	pop	{r4, r5, pc}
 8001bde:	bf00      	nop
 8001be0:	20000040 	.word	0x20000040
 8001be4:	2000028c 	.word	0x2000028c
 8001be8:	20000290 	.word	0x20000290
 8001bec:	00000000 	.word	0x00000000

08001bf0 <calc_RollPitchYaw>:
void calc_RollPitchYaw(float *roll, float *pitch, float *yaw) {
 8001bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bf4:	ed2d 8b04 	vpush	{d8-d9}
 8001bf8:	4606      	mov	r6, r0
 8001bfa:	468a      	mov	sl, r1
 8001bfc:	4617      	mov	r7, r2
	if (readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, INT_STATUS) & 0x01) { // On interrupt, check if data ready interrupt
 8001bfe:	223a      	movs	r2, #58	; 0x3a
 8001c00:	21d1      	movs	r1, #209	; 0xd1
 8001c02:	20d0      	movs	r0, #208	; 0xd0
 8001c04:	f7ff f9dc 	bl	8000fc0 <readByte>
 8001c08:	f010 0f01 	tst.w	r0, #1
 8001c0c:	f040 8156 	bne.w	8001ebc <calc_RollPitchYaw+0x2cc>
	Now = htim11.Instance->CNT;
 8001c10:	4b97      	ldr	r3, [pc, #604]	; (8001e70 <calc_RollPitchYaw+0x280>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c1c:	4b95      	ldr	r3, [pc, #596]	; (8001e74 <calc_RollPitchYaw+0x284>)
 8001c1e:	edc3 7a00 	vstr	s15, [r3]
	if(Now - lastUpdate < 0){
 8001c22:	4b95      	ldr	r3, [pc, #596]	; (8001e78 <calc_RollPitchYaw+0x288>)
 8001c24:	edd3 6a00 	vldr	s13, [r3]
 8001c28:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8001c2c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8001c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c34:	f100 81fc 	bmi.w	8002030 <calc_RollPitchYaw+0x440>
	deltat = (float) ((Now - lastUpdate) * (1 / (TIMER_CLK_FREQ / 100.0f))); // set integration time by time elapsed since last filter update
 8001c38:	eddf 6a90 	vldr	s13, [pc, #576]	; 8001e7c <calc_RollPitchYaw+0x28c>
 8001c3c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001c40:	4b8f      	ldr	r3, [pc, #572]	; (8001e80 <calc_RollPitchYaw+0x290>)
 8001c42:	ed83 7a00 	vstr	s14, [r3]
	lastUpdate = Now;
 8001c46:	4b8c      	ldr	r3, [pc, #560]	; (8001e78 <calc_RollPitchYaw+0x288>)
 8001c48:	edc3 7a00 	vstr	s15, [r3]
	sum += deltat;
 8001c4c:	4d8d      	ldr	r5, [pc, #564]	; (8001e84 <calc_RollPitchYaw+0x294>)
 8001c4e:	edd5 7a00 	vldr	s15, [r5]
 8001c52:	4b8b      	ldr	r3, [pc, #556]	; (8001e80 <calc_RollPitchYaw+0x290>)
 8001c54:	ed93 7a00 	vldr	s14, [r3]
 8001c58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c5c:	edc5 7a00 	vstr	s15, [r5]
	sumCount++;
 8001c60:	4c89      	ldr	r4, [pc, #548]	; (8001e88 <calc_RollPitchYaw+0x298>)
 8001c62:	6823      	ldr	r3, [r4, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	6023      	str	r3, [r4, #0]
	MahonyQuaternionUpdate(ax, ay, az, gx * PI / 180.0, gy * PI / 180.0, gz * PI / 180.0, my, mx, mz);
 8001c68:	4b88      	ldr	r3, [pc, #544]	; (8001e8c <calc_RollPitchYaw+0x29c>)
 8001c6a:	edd3 1a00 	vldr	s3, [r3]
 8001c6e:	eddf 7a88 	vldr	s15, [pc, #544]	; 8001e90 <calc_RollPitchYaw+0x2a0>
 8001c72:	ee61 1aa7 	vmul.f32	s3, s3, s15
 8001c76:	4b87      	ldr	r3, [pc, #540]	; (8001e94 <calc_RollPitchYaw+0x2a4>)
 8001c78:	ed93 2a00 	vldr	s4, [r3]
 8001c7c:	ee22 2a27 	vmul.f32	s4, s4, s15
 8001c80:	4b85      	ldr	r3, [pc, #532]	; (8001e98 <calc_RollPitchYaw+0x2a8>)
 8001c82:	edd3 2a00 	vldr	s5, [r3]
 8001c86:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8001c8a:	eddf 7a84 	vldr	s15, [pc, #528]	; 8001e9c <calc_RollPitchYaw+0x2ac>
 8001c8e:	4b84      	ldr	r3, [pc, #528]	; (8001ea0 <calc_RollPitchYaw+0x2b0>)
 8001c90:	ed93 4a00 	vldr	s8, [r3]
 8001c94:	4b83      	ldr	r3, [pc, #524]	; (8001ea4 <calc_RollPitchYaw+0x2b4>)
 8001c96:	edd3 3a00 	vldr	s7, [r3]
 8001c9a:	4b83      	ldr	r3, [pc, #524]	; (8001ea8 <calc_RollPitchYaw+0x2b8>)
 8001c9c:	ed93 3a00 	vldr	s6, [r3]
 8001ca0:	eec2 2aa7 	vdiv.f32	s5, s5, s15
 8001ca4:	ee82 2a27 	vdiv.f32	s4, s4, s15
 8001ca8:	eec1 1aa7 	vdiv.f32	s3, s3, s15
 8001cac:	4b7f      	ldr	r3, [pc, #508]	; (8001eac <calc_RollPitchYaw+0x2bc>)
 8001cae:	ed93 1a00 	vldr	s2, [r3]
 8001cb2:	4b7f      	ldr	r3, [pc, #508]	; (8001eb0 <calc_RollPitchYaw+0x2c0>)
 8001cb4:	edd3 0a00 	vldr	s1, [r3]
 8001cb8:	4b7e      	ldr	r3, [pc, #504]	; (8001eb4 <calc_RollPitchYaw+0x2c4>)
 8001cba:	ed93 0a00 	vldr	s0, [r3]
 8001cbe:	f7ff fe17 	bl	80018f0 <MahonyQuaternionUpdate>
	*yaw = atan2(2.0 * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 8001cc2:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 8001eb8 <calc_RollPitchYaw+0x2c8>
 8001cc6:	eddb 9a01 	vldr	s19, [fp, #4]
 8001cca:	ed9b 9a02 	vldr	s18, [fp, #8]
 8001cce:	ee29 7a89 	vmul.f32	s14, s19, s18
 8001cd2:	ed9b 8a00 	vldr	s16, [fp]
 8001cd6:	eddb 8a03 	vldr	s17, [fp, #12]
 8001cda:	ee68 7a28 	vmul.f32	s15, s16, s17
 8001cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce2:	ee17 0a90 	vmov	r0, s15
 8001ce6:	f7fe fc37 	bl	8000558 <__aeabi_f2d>
 8001cea:	4680      	mov	r8, r0
 8001cec:	4689      	mov	r9, r1
 8001cee:	ee28 8a08 	vmul.f32	s16, s16, s16
 8001cf2:	ee69 9aa9 	vmul.f32	s19, s19, s19
 8001cf6:	ee38 8a29 	vadd.f32	s16, s16, s19
 8001cfa:	ee29 9a09 	vmul.f32	s18, s18, s18
 8001cfe:	ee38 8a49 	vsub.f32	s16, s16, s18
 8001d02:	ee68 8aa8 	vmul.f32	s17, s17, s17
 8001d06:	ee78 7a68 	vsub.f32	s15, s16, s17
 8001d0a:	ee17 0a90 	vmov	r0, s15
 8001d0e:	f7fe fc23 	bl	8000558 <__aeabi_f2d>
 8001d12:	ec41 0b18 	vmov	d8, r0, r1
 8001d16:	4642      	mov	r2, r8
 8001d18:	464b      	mov	r3, r9
 8001d1a:	4640      	mov	r0, r8
 8001d1c:	4649      	mov	r1, r9
 8001d1e:	f7fe fabd 	bl	800029c <__adddf3>
 8001d22:	eeb0 1a48 	vmov.f32	s2, s16
 8001d26:	eef0 1a68 	vmov.f32	s3, s17
 8001d2a:	ec41 0b10 	vmov	d0, r0, r1
 8001d2e:	f006 fc45 	bl	80085bc <atan2>
 8001d32:	ec51 0b10 	vmov	r0, r1, d0
 8001d36:	f7fe ff5f 	bl	8000bf8 <__aeabi_d2f>
 8001d3a:	6038      	str	r0, [r7, #0]
	*pitch = -asin(2.0 * (q[1] * q[3] - q[0] * q[2]));
 8001d3c:	ed9b 7a01 	vldr	s14, [fp, #4]
 8001d40:	eddb 7a03 	vldr	s15, [fp, #12]
 8001d44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d48:	eddb 7a00 	vldr	s15, [fp]
 8001d4c:	eddb 6a02 	vldr	s13, [fp, #8]
 8001d50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d58:	ee17 0a90 	vmov	r0, s15
 8001d5c:	f7fe fbfc 	bl	8000558 <__aeabi_f2d>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	f7fe fa9a 	bl	800029c <__adddf3>
 8001d68:	ec41 0b10 	vmov	d0, r0, r1
 8001d6c:	f006 fbce 	bl	800850c <asin>
 8001d70:	ec51 0b10 	vmov	r0, r1, d0
 8001d74:	f7fe ff40 	bl	8000bf8 <__aeabi_d2f>
 8001d78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8001d7c:	f8ca 0000 	str.w	r0, [sl]
	*roll = atan2(2.0 * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 8001d80:	ed9b 8a00 	vldr	s16, [fp]
 8001d84:	eddb 9a01 	vldr	s19, [fp, #4]
 8001d88:	ee28 7a29 	vmul.f32	s14, s16, s19
 8001d8c:	ed9b 9a02 	vldr	s18, [fp, #8]
 8001d90:	eddb 8a03 	vldr	s17, [fp, #12]
 8001d94:	ee69 7a28 	vmul.f32	s15, s18, s17
 8001d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9c:	ee17 0a90 	vmov	r0, s15
 8001da0:	f7fe fbda 	bl	8000558 <__aeabi_f2d>
 8001da4:	4680      	mov	r8, r0
 8001da6:	4689      	mov	r9, r1
 8001da8:	ee28 8a08 	vmul.f32	s16, s16, s16
 8001dac:	ee69 9aa9 	vmul.f32	s19, s19, s19
 8001db0:	ee38 8a69 	vsub.f32	s16, s16, s19
 8001db4:	ee29 9a09 	vmul.f32	s18, s18, s18
 8001db8:	ee38 8a49 	vsub.f32	s16, s16, s18
 8001dbc:	ee68 8aa8 	vmul.f32	s17, s17, s17
 8001dc0:	ee78 7a28 	vadd.f32	s15, s16, s17
 8001dc4:	ee17 0a90 	vmov	r0, s15
 8001dc8:	f7fe fbc6 	bl	8000558 <__aeabi_f2d>
 8001dcc:	ec41 0b18 	vmov	d8, r0, r1
 8001dd0:	4642      	mov	r2, r8
 8001dd2:	464b      	mov	r3, r9
 8001dd4:	4640      	mov	r0, r8
 8001dd6:	4649      	mov	r1, r9
 8001dd8:	f7fe fa60 	bl	800029c <__adddf3>
 8001ddc:	eeb0 1a48 	vmov.f32	s2, s16
 8001de0:	eef0 1a68 	vmov.f32	s3, s17
 8001de4:	ec41 0b10 	vmov	d0, r0, r1
 8001de8:	f006 fbe8 	bl	80085bc <atan2>
 8001dec:	ec51 0b10 	vmov	r0, r1, d0
 8001df0:	f7fe ff02 	bl	8000bf8 <__aeabi_d2f>
 8001df4:	6030      	str	r0, [r6, #0]
	*pitch *= 180.0 / PI;
 8001df6:	f8da 0000 	ldr.w	r0, [sl]
 8001dfa:	f7fe fbad 	bl	8000558 <__aeabi_f2d>
 8001dfe:	a318      	add	r3, pc, #96	; (adr r3, 8001e60 <calc_RollPitchYaw+0x270>)
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	f7fe fc00 	bl	8000608 <__aeabi_dmul>
 8001e08:	f7fe fef6 	bl	8000bf8 <__aeabi_d2f>
 8001e0c:	f8ca 0000 	str.w	r0, [sl]
	*yaw *= 180.0 / PI;
 8001e10:	6838      	ldr	r0, [r7, #0]
 8001e12:	f7fe fba1 	bl	8000558 <__aeabi_f2d>
 8001e16:	a312      	add	r3, pc, #72	; (adr r3, 8001e60 <calc_RollPitchYaw+0x270>)
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	f7fe fbf4 	bl	8000608 <__aeabi_dmul>
 8001e20:	f7fe feea 	bl	8000bf8 <__aeabi_d2f>
	*yaw -=  -1.1; // CHANGE-> (In Leeds, UK declination = -1.1) ... Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04 (+13.8)
 8001e24:	f7fe fb98 	bl	8000558 <__aeabi_f2d>
 8001e28:	a30f      	add	r3, pc, #60	; (adr r3, 8001e68 <calc_RollPitchYaw+0x278>)
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	f7fe fa35 	bl	800029c <__adddf3>
 8001e32:	f7fe fee1 	bl	8000bf8 <__aeabi_d2f>
 8001e36:	6038      	str	r0, [r7, #0]
	*roll *= 180.0 / PI;
 8001e38:	6830      	ldr	r0, [r6, #0]
 8001e3a:	f7fe fb8d 	bl	8000558 <__aeabi_f2d>
 8001e3e:	a308      	add	r3, pc, #32	; (adr r3, 8001e60 <calc_RollPitchYaw+0x270>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	f7fe fbe0 	bl	8000608 <__aeabi_dmul>
 8001e48:	f7fe fed6 	bl	8000bf8 <__aeabi_d2f>
 8001e4c:	6030      	str	r0, [r6, #0]
	sum = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	602b      	str	r3, [r5, #0]
	sumCount = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	6023      	str	r3, [r4, #0]
}
 8001e56:	ecbd 8b04 	vpop	{d8-d9}
 8001e5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e5e:	bf00      	nop
 8001e60:	0d03cf26 	.word	0x0d03cf26
 8001e64:	404ca5dc 	.word	0x404ca5dc
 8001e68:	9999999a 	.word	0x9999999a
 8001e6c:	3ff19999 	.word	0x3ff19999
 8001e70:	20004a28 	.word	0x20004a28
 8001e74:	20000288 	.word	0x20000288
 8001e78:	2000029c 	.word	0x2000029c
 8001e7c:	358637bd 	.word	0x358637bd
 8001e80:	2000028c 	.word	0x2000028c
 8001e84:	200002a0 	.word	0x200002a0
 8001e88:	200002a4 	.word	0x200002a4
 8001e8c:	20004424 	.word	0x20004424
 8001e90:	40490fdb 	.word	0x40490fdb
 8001e94:	200043dc 	.word	0x200043dc
 8001e98:	20004400 	.word	0x20004400
 8001e9c:	43340000 	.word	0x43340000
 8001ea0:	20004408 	.word	0x20004408
 8001ea4:	2000442c 	.word	0x2000442c
 8001ea8:	200043f0 	.word	0x200043f0
 8001eac:	200043e0 	.word	0x200043e0
 8001eb0:	20004428 	.word	0x20004428
 8001eb4:	200043f4 	.word	0x200043f4
 8001eb8:	20000040 	.word	0x20000040
		readAccelData(accelCount);  // Read the x/y/z adc values
 8001ebc:	4c63      	ldr	r4, [pc, #396]	; (800204c <calc_RollPitchYaw+0x45c>)
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f7ff f940 	bl	8001144 <readAccelData>
		ax = (float) accelCount[0] * aRes - accelBias[0]; // get actual g value, this depends on scale being set
 8001ec4:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001ec8:	ee07 3a10 	vmov	s14, r3
 8001ecc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ed0:	4b5f      	ldr	r3, [pc, #380]	; (8002050 <calc_RollPitchYaw+0x460>)
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eda:	4b5e      	ldr	r3, [pc, #376]	; (8002054 <calc_RollPitchYaw+0x464>)
 8001edc:	edd3 6a00 	vldr	s13, [r3]
 8001ee0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001ee4:	4a5c      	ldr	r2, [pc, #368]	; (8002058 <calc_RollPitchYaw+0x468>)
 8001ee6:	ed82 7a00 	vstr	s14, [r2]
		ay = (float) accelCount[1] * aRes - accelBias[1];
 8001eea:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8001eee:	ee07 2a10 	vmov	s14, r2
 8001ef2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ef6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001efa:	edd3 6a01 	vldr	s13, [r3, #4]
 8001efe:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001f02:	4a56      	ldr	r2, [pc, #344]	; (800205c <calc_RollPitchYaw+0x46c>)
 8001f04:	ed82 7a00 	vstr	s14, [r2]
		az = (float) accelCount[2] * aRes - accelBias[2];
 8001f08:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8001f0c:	ee07 2a10 	vmov	s14, r2
 8001f10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f18:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f20:	4b4f      	ldr	r3, [pc, #316]	; (8002060 <calc_RollPitchYaw+0x470>)
 8001f22:	edc3 7a00 	vstr	s15, [r3]
		readGyroData(gyroCount);  // Read the x/y/z adc values
 8001f26:	4c4f      	ldr	r4, [pc, #316]	; (8002064 <calc_RollPitchYaw+0x474>)
 8001f28:	4620      	mov	r0, r4
 8001f2a:	f7ff f92d 	bl	8001188 <readGyroData>
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 8001f2e:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001f32:	ee07 3a10 	vmov	s14, r3
 8001f36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f3a:	4b4b      	ldr	r3, [pc, #300]	; (8002068 <calc_RollPitchYaw+0x478>)
 8001f3c:	edd3 7a00 	vldr	s15, [r3]
 8001f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f44:	4b49      	ldr	r3, [pc, #292]	; (800206c <calc_RollPitchYaw+0x47c>)
 8001f46:	edd3 6a00 	vldr	s13, [r3]
 8001f4a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001f4e:	4a48      	ldr	r2, [pc, #288]	; (8002070 <calc_RollPitchYaw+0x480>)
 8001f50:	ed82 7a00 	vstr	s14, [r2]
		gy = (float) gyroCount[1] * gRes - gyroBias[1];
 8001f54:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8001f58:	ee07 2a10 	vmov	s14, r2
 8001f5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f64:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f68:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001f6c:	4a41      	ldr	r2, [pc, #260]	; (8002074 <calc_RollPitchYaw+0x484>)
 8001f6e:	ed82 7a00 	vstr	s14, [r2]
		gz = (float) gyroCount[2] * gRes - gyroBias[2];
 8001f72:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8001f76:	ee07 2a10 	vmov	s14, r2
 8001f7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f82:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f8a:	4b3b      	ldr	r3, [pc, #236]	; (8002078 <calc_RollPitchYaw+0x488>)
 8001f8c:	edc3 7a00 	vstr	s15, [r3]
		readMagData(magCount);  // Read the x/y/z adc values
 8001f90:	4c3a      	ldr	r4, [pc, #232]	; (800207c <calc_RollPitchYaw+0x48c>)
 8001f92:	4620      	mov	r0, r4
 8001f94:	f7ff f91a 	bl	80011cc <readMagData>
		mx = (float) magCount[0] * mRes * magCalibration[0] - magbias[0]; // get actual magnetometer value, this depends on scale being set
 8001f98:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001f9c:	ee06 3a90 	vmov	s13, r3
 8001fa0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001fa4:	4b36      	ldr	r3, [pc, #216]	; (8002080 <calc_RollPitchYaw+0x490>)
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fae:	4a35      	ldr	r2, [pc, #212]	; (8002084 <calc_RollPitchYaw+0x494>)
 8001fb0:	ed92 7a00 	vldr	s14, [r2]
 8001fb4:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001fb8:	4b33      	ldr	r3, [pc, #204]	; (8002088 <calc_RollPitchYaw+0x498>)
 8001fba:	ed93 7a00 	vldr	s14, [r3]
 8001fbe:	ee76 6ac7 	vsub.f32	s13, s13, s14
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 8001fc2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8001fc6:	ee07 1a10 	vmov	s14, r1
 8001fca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001fce:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fd2:	ed92 6a01 	vldr	s12, [r2, #4]
 8001fd6:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001fda:	ed93 6a01 	vldr	s12, [r3, #4]
 8001fde:	ee37 7a46 	vsub.f32	s14, s14, s12
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 8001fe2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8001fe6:	ee06 1a10 	vmov	s12, r1
 8001fea:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001fee:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001ff2:	ed92 6a02 	vldr	s12, [r2, #8]
 8001ff6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001ffa:	ed93 6a02 	vldr	s12, [r3, #8]
 8001ffe:	ee77 7ac6 	vsub.f32	s15, s15, s12
		mx *= magscale[0];
 8002002:	4b22      	ldr	r3, [pc, #136]	; (800208c <calc_RollPitchYaw+0x49c>)
 8002004:	ed93 6a00 	vldr	s12, [r3]
 8002008:	ee66 6a86 	vmul.f32	s13, s13, s12
 800200c:	4a20      	ldr	r2, [pc, #128]	; (8002090 <calc_RollPitchYaw+0x4a0>)
 800200e:	edc2 6a00 	vstr	s13, [r2]
		my *= magscale[1];
 8002012:	edd3 6a01 	vldr	s13, [r3, #4]
 8002016:	ee27 7a26 	vmul.f32	s14, s14, s13
 800201a:	4a1e      	ldr	r2, [pc, #120]	; (8002094 <calc_RollPitchYaw+0x4a4>)
 800201c:	ed82 7a00 	vstr	s14, [r2]
		mz *= magscale[2];
 8002020:	ed93 7a02 	vldr	s14, [r3, #8]
 8002024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <calc_RollPitchYaw+0x4a8>)
 800202a:	edc3 7a00 	vstr	s15, [r3]
 800202e:	e5ef      	b.n	8001c10 <calc_RollPitchYaw+0x20>
		deltat = (float) (((65535-lastUpdate)+Now) * (1 / (TIMER_CLK_FREQ / 100.0f)));
 8002030:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800209c <calc_RollPitchYaw+0x4ac>
 8002034:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002038:	ee37 7a87 	vadd.f32	s14, s15, s14
 800203c:	eddf 6a18 	vldr	s13, [pc, #96]	; 80020a0 <calc_RollPitchYaw+0x4b0>
 8002040:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002044:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <calc_RollPitchYaw+0x4b4>)
 8002046:	ed83 7a00 	vstr	s14, [r3]
 800204a:	e5fc      	b.n	8001c46 <calc_RollPitchYaw+0x56>
 800204c:	20004368 	.word	0x20004368
 8002050:	200043f8 	.word	0x200043f8
 8002054:	20000004 	.word	0x20000004
 8002058:	200043f4 	.word	0x200043f4
 800205c:	20004428 	.word	0x20004428
 8002060:	200043e0 	.word	0x200043e0
 8002064:	200043e8 	.word	0x200043e8
 8002068:	20004404 	.word	0x20004404
 800206c:	20000010 	.word	0x20000010
 8002070:	20004424 	.word	0x20004424
 8002074:	200043dc 	.word	0x200043dc
 8002078:	20004400 	.word	0x20004400
 800207c:	20004410 	.word	0x20004410
 8002080:	20004420 	.word	0x20004420
 8002084:	2000001c 	.word	0x2000001c
 8002088:	20000028 	.word	0x20000028
 800208c:	20000034 	.word	0x20000034
 8002090:	2000442c 	.word	0x2000442c
 8002094:	200043f0 	.word	0x200043f0
 8002098:	20004408 	.word	0x20004408
 800209c:	477fff00 	.word	0x477fff00
 80020a0:	358637bd 	.word	0x358637bd
 80020a4:	2000028c 	.word	0x2000028c

080020a8 <NRF24_DelayMicroSeconds>:
bool SPI_RxCplt = 1;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80020a8:	b508      	push	{r3, lr}
	//	uint32_t uSecVar = uSec;
	//	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
	//	while(uSecVar--);
	DWT_Delay(uSec);
 80020aa:	f000 ffad 	bl	8003008 <DWT_Delay>

}
 80020ae:	bd08      	pop	{r3, pc}

080020b0 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80020b0:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80020b2:	b938      	cbnz	r0, 80020c4 <NRF24_csn+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80020b4:	2200      	movs	r2, #0
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <NRF24_csn+0x24>)
 80020b8:	8819      	ldrh	r1, [r3, #0]
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <NRF24_csn+0x28>)
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	f001 fc2b 	bl	8003918 <HAL_GPIO_WritePin>
}
 80020c2:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80020c4:	2201      	movs	r2, #1
 80020c6:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <NRF24_csn+0x24>)
 80020c8:	8819      	ldrh	r1, [r3, #0]
 80020ca:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <NRF24_csn+0x28>)
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	f001 fc23 	bl	8003918 <HAL_GPIO_WritePin>
 80020d2:	e7f6      	b.n	80020c2 <NRF24_csn+0x12>
 80020d4:	200002aa 	.word	0x200002aa
 80020d8:	200002ac 	.word	0x200002ac

080020dc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80020dc:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80020de:	b938      	cbnz	r0, 80020f0 <NRF24_ce+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80020e0:	2200      	movs	r2, #0
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <NRF24_ce+0x24>)
 80020e4:	8819      	ldrh	r1, [r3, #0]
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <NRF24_ce+0x28>)
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	f001 fc15 	bl	8003918 <HAL_GPIO_WritePin>
}
 80020ee:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80020f0:	2201      	movs	r2, #1
 80020f2:	4b03      	ldr	r3, [pc, #12]	; (8002100 <NRF24_ce+0x24>)
 80020f4:	8819      	ldrh	r1, [r3, #0]
 80020f6:	4b03      	ldr	r3, [pc, #12]	; (8002104 <NRF24_ce+0x28>)
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	f001 fc0d 	bl	8003918 <HAL_GPIO_WritePin>
 80020fe:	e7f6      	b.n	80020ee <NRF24_ce+0x12>
 8002100:	200002a8 	.word	0x200002a8
 8002104:	200002ac 	.word	0x200002ac

08002108 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8002108:	b510      	push	{r4, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800210e:	2000      	movs	r0, #0
 8002110:	f7ff ffce 	bl	80020b0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8002114:	f004 041f 	and.w	r4, r4, #31
 8002118:	a902      	add	r1, sp, #8
 800211a:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 800211e:	4c0a      	ldr	r4, [pc, #40]	; (8002148 <NRF24_read_register+0x40>)
 8002120:	2302      	movs	r3, #2
 8002122:	2201      	movs	r2, #1
 8002124:	4620      	mov	r0, r4
 8002126:	f002 fdfd 	bl	8004d24 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Receive data
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1,2);
 800212a:	2302      	movs	r3, #2
 800212c:	2201      	movs	r2, #1
 800212e:	f10d 0105 	add.w	r1, sp, #5
 8002132:	4620      	mov	r0, r4
 8002134:	f002 ffda 	bl	80050ec <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	retData = spiBuf[1];
 8002138:	f89d 4005 	ldrb.w	r4, [sp, #5]
	//Bring CSN high
	NRF24_csn(1);
 800213c:	2001      	movs	r0, #1
 800213e:	f7ff ffb7 	bl	80020b0 <NRF24_csn>
	return retData;
}
 8002142:	4620      	mov	r0, r4
 8002144:	b002      	add	sp, #8
 8002146:	bd10      	pop	{r4, pc}
 8002148:	200002b0 	.word	0x200002b0

0800214c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800214c:	b570      	push	{r4, r5, r6, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	4604      	mov	r4, r0
 8002152:	460d      	mov	r5, r1
 8002154:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8002156:	2000      	movs	r0, #0
 8002158:	f7ff ffaa 	bl	80020b0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800215c:	f004 041f 	and.w	r4, r4, #31
 8002160:	a902      	add	r1, sp, #8
 8002162:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 8002166:	4c08      	ldr	r4, [pc, #32]	; (8002188 <NRF24_read_registerN+0x3c>)
 8002168:	2302      	movs	r3, #2
 800216a:	2201      	movs	r2, #1
 800216c:	4620      	mov	r0, r4
 800216e:	f002 fdd9 	bl	8004d24 <HAL_SPI_Transmit>
	//while(!SPI_TxCplt){
//	}
	//Receive data
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, buf, len,2);
 8002172:	2302      	movs	r3, #2
 8002174:	4632      	mov	r2, r6
 8002176:	4629      	mov	r1, r5
 8002178:	4620      	mov	r0, r4
 800217a:	f002 ffb7 	bl	80050ec <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 800217e:	2001      	movs	r0, #1
 8002180:	f7ff ff96 	bl	80020b0 <NRF24_csn>
}
 8002184:	b002      	add	sp, #8
 8002186:	bd70      	pop	{r4, r5, r6, pc}
 8002188:	200002b0 	.word	0x200002b0

0800218c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800218c:	b530      	push	{r4, r5, lr}
 800218e:	b083      	sub	sp, #12
 8002190:	4604      	mov	r4, r0
 8002192:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8002194:	2000      	movs	r0, #0
 8002196:	f7ff ff8b 	bl	80020b0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800219a:	f044 0420 	orr.w	r4, r4, #32
 800219e:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 80021a2:	f88d 5005 	strb.w	r5, [sp, #5]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2,10);
 80021a6:	230a      	movs	r3, #10
 80021a8:	2202      	movs	r2, #2
 80021aa:	a901      	add	r1, sp, #4
 80021ac:	4803      	ldr	r0, [pc, #12]	; (80021bc <NRF24_write_register+0x30>)
 80021ae:	f002 fdb9 	bl	8004d24 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 80021b2:	2001      	movs	r0, #1
 80021b4:	f7ff ff7c 	bl	80020b0 <NRF24_csn>
}
 80021b8:	b003      	add	sp, #12
 80021ba:	bd30      	pop	{r4, r5, pc}
 80021bc:	200002b0 	.word	0x200002b0

080021c0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80021c0:	b570      	push	{r4, r5, r6, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	4604      	mov	r4, r0
 80021c6:	460d      	mov	r5, r1
 80021c8:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f7ff ff70 	bl	80020b0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80021d0:	f044 0420 	orr.w	r4, r4, #32
 80021d4:	a902      	add	r1, sp, #8
 80021d6:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 80021da:	4c08      	ldr	r4, [pc, #32]	; (80021fc <NRF24_write_registerN+0x3c>)
 80021dc:	2302      	movs	r3, #2
 80021de:	2201      	movs	r2, #1
 80021e0:	4620      	mov	r0, r4
 80021e2:	f002 fd9f 	bl	8004d24 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len,2);
 80021e6:	2302      	movs	r3, #2
 80021e8:	4632      	mov	r2, r6
 80021ea:	4629      	mov	r1, r5
 80021ec:	4620      	mov	r0, r4
 80021ee:	f002 fd99 	bl	8004d24 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 80021f2:	2001      	movs	r0, #1
 80021f4:	f7ff ff5c 	bl	80020b0 <NRF24_csn>
}
 80021f8:	b002      	add	sp, #8
 80021fa:	bd70      	pop	{r4, r5, r6, pc}
 80021fc:	200002b0 	.word	0x200002b0

08002200 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8002200:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8002202:	21ff      	movs	r1, #255	; 0xff
 8002204:	20e1      	movs	r0, #225	; 0xe1
 8002206:	f7ff ffc1 	bl	800218c <NRF24_write_register>
}
 800220a:	bd08      	pop	{r3, pc}

0800220c <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 800220c:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 800220e:	21ff      	movs	r1, #255	; 0xff
 8002210:	20e2      	movs	r0, #226	; 0xe2
 8002212:	f7ff ffbb 	bl	800218c <NRF24_write_register>
}
 8002216:	bd08      	pop	{r3, pc}

08002218 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8002218:	b508      	push	{r3, lr}
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800221a:	2007      	movs	r0, #7
 800221c:	f7ff ff74 	bl	8002108 <NRF24_read_register>
	return statReg;
}
 8002220:	bd08      	pop	{r3, pc}
	...

08002224 <NRF24_startListening>:
	NRF24_powerDown();

}
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8002224:	b508      	push	{r3, lr}
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8002226:	2000      	movs	r0, #0
 8002228:	f7ff ff6e 	bl	8002108 <NRF24_read_register>
 800222c:	f040 0103 	orr.w	r1, r0, #3
 8002230:	b2c9      	uxtb	r1, r1
 8002232:	2000      	movs	r0, #0
 8002234:	f7ff ffaa 	bl	800218c <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8002238:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <NRF24_startListening+0x40>)
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	4313      	orrs	r3, r2
 8002240:	d10a      	bne.n	8002258 <NRF24_startListening+0x34>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);

	//Flush buffers
	NRF24_flush_tx();
 8002242:	f7ff ffdd 	bl	8002200 <NRF24_flush_tx>
	NRF24_flush_rx();
 8002246:	f7ff ffe1 	bl	800220c <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 800224a:	2001      	movs	r0, #1
 800224c:	f7ff ff46 	bl	80020dc <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8002250:	2096      	movs	r0, #150	; 0x96
 8002252:	f7ff ff29 	bl	80020a8 <NRF24_DelayMicroSeconds>
}
 8002256:	bd08      	pop	{r3, pc}
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8002258:	2205      	movs	r2, #5
 800225a:	4902      	ldr	r1, [pc, #8]	; (8002264 <NRF24_startListening+0x40>)
 800225c:	200a      	movs	r0, #10
 800225e:	f7ff ffaf 	bl	80021c0 <NRF24_write_registerN>
 8002262:	e7ee      	b.n	8002242 <NRF24_startListening+0x1e>
 8002264:	20000350 	.word	0x20000350

08002268 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
	NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8002268:	b510      	push	{r4, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	e9cd 2300 	strd	r2, r3, [sp]
	if (number == 0)
 8002270:	4604      	mov	r4, r0
 8002272:	b920      	cbnz	r0, 800227e <NRF24_openReadingPipe+0x16>
		pipe0_reading_address = address;
 8002274:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <NRF24_openReadingPipe+0x60>)
 8002276:	e9dd 0100 	ldrd	r0, r1, [sp]
 800227a:	e9c3 0100 	strd	r0, r1, [r3]

	if(number <= 6)
 800227e:	2c06      	cmp	r4, #6
 8002280:	d818      	bhi.n	80022b4 <NRF24_openReadingPipe+0x4c>
	{
		if(number < 2)
 8002282:	2c01      	cmp	r4, #1
 8002284:	d918      	bls.n	80022b8 <NRF24_openReadingPipe+0x50>
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8002286:	2201      	movs	r2, #1
 8002288:	4669      	mov	r1, sp
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <NRF24_openReadingPipe+0x64>)
 800228c:	5d18      	ldrb	r0, [r3, r4]
 800228e:	f7ff ff97 	bl	80021c0 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <NRF24_openReadingPipe+0x68>)
 8002294:	7819      	ldrb	r1, [r3, #0]
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <NRF24_openReadingPipe+0x6c>)
 8002298:	5d18      	ldrb	r0, [r3, r4]
 800229a:	f7ff ff77 	bl	800218c <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 800229e:	2002      	movs	r0, #2
 80022a0:	f7ff ff32 	bl	8002108 <NRF24_read_register>
 80022a4:	b240      	sxtb	r0, r0
 80022a6:	2101      	movs	r1, #1
 80022a8:	40a1      	lsls	r1, r4
 80022aa:	4301      	orrs	r1, r0
 80022ac:	b2c9      	uxtb	r1, r1
 80022ae:	2002      	movs	r0, #2
 80022b0:	f7ff ff6c 	bl	800218c <NRF24_write_register>
	}

}
 80022b4:	b002      	add	sp, #8
 80022b6:	bd10      	pop	{r4, pc}
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80022b8:	2205      	movs	r2, #5
 80022ba:	4669      	mov	r1, sp
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <NRF24_openReadingPipe+0x64>)
 80022be:	5d18      	ldrb	r0, [r3, r4]
 80022c0:	f7ff ff7e 	bl	80021c0 <NRF24_write_registerN>
 80022c4:	e7e5      	b.n	8002292 <NRF24_openReadingPipe+0x2a>
 80022c6:	bf00      	nop
 80022c8:	20000350 	.word	0x20000350
 80022cc:	0800e59c 	.word	0x0800e59c
 80022d0:	20000348 	.word	0x20000348
 80022d4:	0800e5a4 	.word	0x0800e5a4

080022d8 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80022d8:	b508      	push	{r3, lr}
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80022da:	f001 010f 	and.w	r1, r1, #15
 80022de:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80022e2:	b2c9      	uxtb	r1, r1
 80022e4:	2004      	movs	r0, #4
 80022e6:	f7ff ff51 	bl	800218c <NRF24_write_register>
}
 80022ea:	bd08      	pop	{r3, pc}

080022ec <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80022ec:	b508      	push	{r3, lr}
	const uint8_t max_channel = 127;
	NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80022ee:	4601      	mov	r1, r0
 80022f0:	287f      	cmp	r0, #127	; 0x7f
 80022f2:	bf28      	it	cs
 80022f4:	217f      	movcs	r1, #127	; 0x7f
 80022f6:	2005      	movs	r0, #5
 80022f8:	f7ff ff48 	bl	800218c <NRF24_write_register>
}
 80022fc:	bd08      	pop	{r3, pc}
	...

08002300 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
	const uint8_t max_payload_size = 32;
	payload_size = MIN(size,max_payload_size);
 8002300:	2820      	cmp	r0, #32
 8002302:	bf28      	it	cs
 8002304:	2020      	movcs	r0, #32
 8002306:	4b01      	ldr	r3, [pc, #4]	; (800230c <NRF24_setPayloadSize+0xc>)
 8002308:	7018      	strb	r0, [r3, #0]
}
 800230a:	4770      	bx	lr
 800230c:	20000348 	.word	0x20000348

08002310 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
	return payload_size;
}
 8002310:	4b01      	ldr	r3, [pc, #4]	; (8002318 <NRF24_getPayloadSize+0x8>)
 8002312:	7818      	ldrb	r0, [r3, #0]
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000348 	.word	0x20000348

0800231c <NRF24_read_payload>:
{
 800231c:	b570      	push	{r4, r5, r6, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	4606      	mov	r6, r0
 8002322:	460d      	mov	r5, r1
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8002324:	f7ff fff4 	bl	8002310 <NRF24_getPayloadSize>
 8002328:	4604      	mov	r4, r0
 800232a:	42a8      	cmp	r0, r5
 800232c:	d817      	bhi.n	800235e <NRF24_read_payload+0x42>
	NRF24_csn(0);
 800232e:	2000      	movs	r0, #0
 8002330:	f7ff febe 	bl	80020b0 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8002334:	a902      	add	r1, sp, #8
 8002336:	2361      	movs	r3, #97	; 0x61
 8002338:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1,10);
 800233c:	4d09      	ldr	r5, [pc, #36]	; (8002364 <NRF24_read_payload+0x48>)
 800233e:	230a      	movs	r3, #10
 8002340:	2201      	movs	r2, #1
 8002342:	4628      	mov	r0, r5
 8002344:	f002 fcee 	bl	8004d24 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len,10);
 8002348:	230a      	movs	r3, #10
 800234a:	b2a2      	uxth	r2, r4
 800234c:	4631      	mov	r1, r6
 800234e:	4628      	mov	r0, r5
 8002350:	f002 fecc 	bl	80050ec <HAL_SPI_Receive>
	NRF24_csn(1);
 8002354:	2001      	movs	r0, #1
 8002356:	f7ff feab 	bl	80020b0 <NRF24_csn>
}
 800235a:	b002      	add	sp, #8
 800235c:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800235e:	462c      	mov	r4, r5
 8002360:	e7e5      	b.n	800232e <NRF24_read_payload+0x12>
 8002362:	bf00      	nop
 8002364:	200002b0 	.word	0x200002b0

08002368 <NRF24_read>:
{
 8002368:	b510      	push	{r4, lr}
	NRF24_read_payload( buf, len );
 800236a:	f7ff ffd7 	bl	800231c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800236e:	2017      	movs	r0, #23
 8002370:	f7ff feca 	bl	8002108 <NRF24_read_register>
 8002374:	f000 0401 	and.w	r4, r0, #1
	NRF24_flush_rx();
 8002378:	f7ff ff48 	bl	800220c <NRF24_flush_rx>
}
 800237c:	4620      	mov	r0, r4
 800237e:	bd10      	pop	{r4, pc}

08002380 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8002380:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8002382:	201d      	movs	r0, #29
 8002384:	f7ff fec0 	bl	8002108 <NRF24_read_register>
 8002388:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800238c:	201d      	movs	r0, #29
 800238e:	f7ff fefd 	bl	800218c <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8002392:	2100      	movs	r1, #0
 8002394:	201c      	movs	r0, #28
 8002396:	f7ff fef9 	bl	800218c <NRF24_write_register>
	dynamic_payloads_enabled = false;
}
 800239a:	bd08      	pop	{r3, pc}

0800239c <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 800239c:	b508      	push	{r3, lr}
	if ( enable )
 800239e:	b920      	cbnz	r0, 80023aa <NRF24_setAutoAck+0xe>
		NRF24_write_register(REG_EN_AA, 0x3F);
	else
		NRF24_write_register(REG_EN_AA, 0x00);
 80023a0:	2100      	movs	r1, #0
 80023a2:	2001      	movs	r0, #1
 80023a4:	f7ff fef2 	bl	800218c <NRF24_write_register>
}
 80023a8:	bd08      	pop	{r3, pc}
		NRF24_write_register(REG_EN_AA, 0x3F);
 80023aa:	213f      	movs	r1, #63	; 0x3f
 80023ac:	2001      	movs	r0, #1
 80023ae:	f7ff feed 	bl	800218c <NRF24_write_register>
 80023b2:	e7f9      	b.n	80023a8 <NRF24_setAutoAck+0xc>

080023b4 <NRF24_setPALevel>:
		NRF24_write_register( REG_EN_AA, en_aa ) ;
	}
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80023b4:	b510      	push	{r4, lr}
 80023b6:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80023b8:	2006      	movs	r0, #6
 80023ba:	f7ff fea5 	bl	8002108 <NRF24_read_register>
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80023be:	f000 01f9 	and.w	r1, r0, #249	; 0xf9

	// switch uses RAM (evil!)
	if ( level == RF24_PA_0dB)
 80023c2:	2c03      	cmp	r4, #3
 80023c4:	d009      	beq.n	80023da <NRF24_setPALevel+0x26>
	{
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
	}
	else if ( level == RF24_PA_m6dB )
 80023c6:	2c02      	cmp	r4, #2
 80023c8:	d00d      	beq.n	80023e6 <NRF24_setPALevel+0x32>
	{
		setup |= _BV(RF_PWR_HIGH) ;
	}
	else if ( level == RF24_PA_m12dB )
 80023ca:	2c01      	cmp	r4, #1
 80023cc:	d00e      	beq.n	80023ec <NRF24_setPALevel+0x38>
	{
		setup |= _BV(RF_PWR_LOW);
	}
	else if ( level == RF24_PA_m18dB )
 80023ce:	b134      	cbz	r4, 80023de <NRF24_setPALevel+0x2a>
	{
		// nothing
	}
	else if ( level == RF24_PA_ERROR )
 80023d0:	2c04      	cmp	r4, #4
 80023d2:	d104      	bne.n	80023de <NRF24_setPALevel+0x2a>
	{
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80023d4:	f041 0106 	orr.w	r1, r1, #6
 80023d8:	e001      	b.n	80023de <NRF24_setPALevel+0x2a>
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80023da:	f041 0106 	orr.w	r1, r1, #6
	}

	NRF24_write_register( REG_RF_SETUP, setup ) ;
 80023de:	2006      	movs	r0, #6
 80023e0:	f7ff fed4 	bl	800218c <NRF24_write_register>
}
 80023e4:	bd10      	pop	{r4, pc}
		setup |= _BV(RF_PWR_HIGH) ;
 80023e6:	f041 0104 	orr.w	r1, r1, #4
 80023ea:	e7f8      	b.n	80023de <NRF24_setPALevel+0x2a>
		setup |= _BV(RF_PWR_LOW);
 80023ec:	f041 0102 	orr.w	r1, r1, #2
 80023f0:	e7f5      	b.n	80023de <NRF24_setPALevel+0x2a>

080023f2 <NRF24_setDataRate>:

	return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80023f2:	b538      	push	{r3, r4, r5, lr}
 80023f4:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80023f6:	2006      	movs	r0, #6
 80023f8:	f7ff fe86 	bl	8002108 <NRF24_read_register>

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false ;
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80023fc:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
	if( speed == RF24_250KBPS )
 8002400:	2d02      	cmp	r5, #2
 8002402:	d00c      	beq.n	800241e <NRF24_setDataRate+0x2c>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if ( speed == RF24_2MBPS )
 8002404:	2d01      	cmp	r5, #1
 8002406:	d00d      	beq.n	8002424 <NRF24_setDataRate+0x32>
		{
			// 1Mbs
			wide_band = false ;
		}
	}
	NRF24_write_register(REG_RF_SETUP,setup);
 8002408:	4621      	mov	r1, r4
 800240a:	2006      	movs	r0, #6
 800240c:	f7ff febe 	bl	800218c <NRF24_write_register>

	// Verify our result
	if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8002410:	2006      	movs	r0, #6
 8002412:	f7ff fe79 	bl	8002108 <NRF24_read_register>
 8002416:	42a0      	cmp	r0, r4
 8002418:	d007      	beq.n	800242a <NRF24_setDataRate+0x38>
	bool result = false;
 800241a:	2000      	movs	r0, #0
	{
		wide_band = false;
	}

	return result;
}
 800241c:	bd38      	pop	{r3, r4, r5, pc}
		setup |= _BV( RF_DR_LOW ) ;
 800241e:	f044 0420 	orr.w	r4, r4, #32
 8002422:	e7f1      	b.n	8002408 <NRF24_setDataRate+0x16>
			setup |= _BV(RF_DR_HIGH);
 8002424:	f044 0408 	orr.w	r4, r4, #8
 8002428:	e7ee      	b.n	8002408 <NRF24_setDataRate+0x16>
		result = true;
 800242a:	2001      	movs	r0, #1
 800242c:	e7f6      	b.n	800241c <NRF24_setDataRate+0x2a>

0800242e <NRF24_setCRCLength>:
	}
	return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800242e:	b510      	push	{r4, lr}
 8002430:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8002432:	2000      	movs	r0, #0
 8002434:	f7ff fe68 	bl	8002108 <NRF24_read_register>
 8002438:	f000 01f3 	and.w	r1, r0, #243	; 0xf3

	// switch uses RAM
	if ( length == RF24_CRC_DISABLED )
 800243c:	b11c      	cbz	r4, 8002446 <NRF24_setCRCLength+0x18>
	{
		// Do nothing, we turned it off above.
	}
	else if ( length == RF24_CRC_8 )
 800243e:	2c01      	cmp	r4, #1
 8002440:	d005      	beq.n	800244e <NRF24_setCRCLength+0x20>
		config |= _BV(BIT_EN_CRC);
	}
	else
	{
		config |= _BV(BIT_EN_CRC);
		config |= _BV( BIT_CRCO );
 8002442:	f041 010c 	orr.w	r1, r1, #12
	}
	NRF24_write_register( REG_CONFIG, config );
 8002446:	2000      	movs	r0, #0
 8002448:	f7ff fea0 	bl	800218c <NRF24_write_register>
}
 800244c:	bd10      	pop	{r4, pc}
		config |= _BV(BIT_EN_CRC);
 800244e:	f041 0108 	orr.w	r1, r1, #8
 8002452:	e7f8      	b.n	8002446 <NRF24_setCRCLength+0x18>

08002454 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8002454:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8002456:	2000      	movs	r0, #0
 8002458:	f7ff fe56 	bl	8002108 <NRF24_read_register>
 800245c:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 8002460:	2000      	movs	r0, #0
 8002462:	f7ff fe93 	bl	800218c <NRF24_write_register>
}
 8002466:	bd08      	pop	{r3, pc}

08002468 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8002468:	b570      	push	{r4, r5, r6, lr}
 800246a:	4606      	mov	r6, r0
	uint8_t status = NRF24_get_status();
 800246c:	f7ff fed4 	bl	8002218 <NRF24_get_status>
 8002470:	f000 0340 	and.w	r3, r0, #64	; 0x40

	bool result = ( status & _BV(BIT_RX_DR) );
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf14      	ite	ne
 8002478:	2501      	movne	r5, #1
 800247a:	2500      	moveq	r5, #0

	if (result)
 800247c:	d00b      	beq.n	8002496 <NRF24_availablePipe+0x2e>
 800247e:	4604      	mov	r4, r0
	{
		// If the caller wants the pipe number, include that
		if ( pipe_num )
 8002480:	b116      	cbz	r6, 8002488 <NRF24_availablePipe+0x20>
			*pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8002482:	f3c0 0342 	ubfx	r3, r0, #1, #3
 8002486:	7033      	strb	r3, [r6, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8002488:	2140      	movs	r1, #64	; 0x40
 800248a:	2007      	movs	r0, #7
 800248c:	f7ff fe7e 	bl	800218c <NRF24_write_register>

		// Handle ack payload receipt
		if ( status & _BV(BIT_TX_DS) )
 8002490:	f014 0f20 	tst.w	r4, #32
 8002494:	d101      	bne.n	800249a <NRF24_availablePipe+0x32>
		{
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
		}
	}
	return result;
}
 8002496:	4628      	mov	r0, r5
 8002498:	bd70      	pop	{r4, r5, r6, pc}
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800249a:	2120      	movs	r1, #32
 800249c:	2007      	movs	r0, #7
 800249e:	f7ff fe75 	bl	800218c <NRF24_write_register>
 80024a2:	e7f8      	b.n	8002496 <NRF24_availablePipe+0x2e>

080024a4 <NRF24_available>:
{
 80024a4:	b508      	push	{r3, lr}
	return NRF24_availablePipe(NULL);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7ff ffde 	bl	8002468 <NRF24_availablePipe>
}
 80024ac:	bd08      	pop	{r3, pc}

080024ae <NRF24_writeAckPayload>:
	NRF24_DelayMicroSeconds(15);
	NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 80024ae:	b570      	push	{r4, r5, r6, lr}
 80024b0:	4604      	mov	r4, r0
 80024b2:	460d      	mov	r5, r1
	const uint8_t* current = (uint8_t *)buf;
	const uint8_t max_payload_size = 32;
	uint8_t data_len = MIN(len,max_payload_size);
 80024b4:	2a20      	cmp	r2, #32
 80024b6:	bf28      	it	cs
 80024b8:	2220      	movcs	r2, #32
 80024ba:	4616      	mov	r6, r2

	NRF24_csn(0);
 80024bc:	2000      	movs	r0, #0
 80024be:	f7ff fdf7 	bl	80020b0 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 80024c2:	f004 0007 	and.w	r0, r4, #7
 80024c6:	4632      	mov	r2, r6
 80024c8:	4629      	mov	r1, r5
 80024ca:	f040 00a8 	orr.w	r0, r0, #168	; 0xa8
 80024ce:	f7ff fe77 	bl	80021c0 <NRF24_write_registerN>
	NRF24_csn(1);
 80024d2:	2001      	movs	r0, #1
 80024d4:	f7ff fdec 	bl	80020b0 <NRF24_csn>
}
 80024d8:	bd70      	pop	{r4, r5, r6, pc}

080024da <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80024da:	b508      	push	{r3, lr}
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80024dc:	2170      	movs	r1, #112	; 0x70
 80024de:	2007      	movs	r0, #7
 80024e0:	f7ff fe54 	bl	800218c <NRF24_write_register>
}
 80024e4:	bd08      	pop	{r3, pc}
	...

080024e8 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80024e8:	b500      	push	{lr}
 80024ea:	b083      	sub	sp, #12
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7ff fddf 	bl	80020b0 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80024f2:	2350      	movs	r3, #80	; 0x50
 80024f4:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 80024f8:	2373      	movs	r3, #115	; 0x73
 80024fa:	f88d 3005 	strb.w	r3, [sp, #5]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2,2);
 80024fe:	2302      	movs	r3, #2
 8002500:	461a      	mov	r2, r3
 8002502:	a901      	add	r1, sp, #4
 8002504:	4804      	ldr	r0, [pc, #16]	; (8002518 <NRF24_ACTIVATE_cmd+0x30>)
 8002506:	f002 fc0d 	bl	8004d24 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}

	NRF24_csn(1);
 800250a:	2001      	movs	r0, #1
 800250c:	f7ff fdd0 	bl	80020b0 <NRF24_csn>
}
 8002510:	b003      	add	sp, #12
 8002512:	f85d fb04 	ldr.w	pc, [sp], #4
 8002516:	bf00      	nop
 8002518:	200002b0 	.word	0x200002b0

0800251c <NRF24_enableAckPayload>:
{
 800251c:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800251e:	201d      	movs	r0, #29
 8002520:	f7ff fdf2 	bl	8002108 <NRF24_read_register>
 8002524:	f040 0106 	orr.w	r1, r0, #6
 8002528:	b2c9      	uxtb	r1, r1
 800252a:	201d      	movs	r0, #29
 800252c:	f7ff fe2e 	bl	800218c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8002530:	201d      	movs	r0, #29
 8002532:	f7ff fde9 	bl	8002108 <NRF24_read_register>
 8002536:	b148      	cbz	r0, 800254c <NRF24_enableAckPayload+0x30>
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8002538:	201c      	movs	r0, #28
 800253a:	f7ff fde5 	bl	8002108 <NRF24_read_register>
 800253e:	f040 0103 	orr.w	r1, r0, #3
 8002542:	b2c9      	uxtb	r1, r1
 8002544:	201c      	movs	r0, #28
 8002546:	f7ff fe21 	bl	800218c <NRF24_write_register>
}
 800254a:	bd08      	pop	{r3, pc}
		NRF24_ACTIVATE_cmd();
 800254c:	f7ff ffcc 	bl	80024e8 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8002550:	201d      	movs	r0, #29
 8002552:	f7ff fdd9 	bl	8002108 <NRF24_read_register>
 8002556:	f040 0106 	orr.w	r1, r0, #6
 800255a:	b2c9      	uxtb	r1, r1
 800255c:	201d      	movs	r0, #29
 800255e:	f7ff fe15 	bl	800218c <NRF24_write_register>
 8002562:	e7e9      	b.n	8002538 <NRF24_enableAckPayload+0x1c>

08002564 <NRF24_begin>:
{
 8002564:	b082      	sub	sp, #8
 8002566:	b570      	push	{r4, r5, r6, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	4606      	mov	r6, r0
 800256c:	460d      	mov	r5, r1
 800256e:	4614      	mov	r4, r2
 8002570:	9307      	str	r3, [sp, #28]
	memcpy(&nrf24_hspi, &hspi2, sizeof(hspi2));
 8002572:	2258      	movs	r2, #88	; 0x58
 8002574:	4961      	ldr	r1, [pc, #388]	; (80026fc <NRF24_begin+0x198>)
 8002576:	4862      	ldr	r0, [pc, #392]	; (8002700 <NRF24_begin+0x19c>)
 8002578:	f007 fda3 	bl	800a0c2 <memcpy>
	nrf24_PORT = nrf24PORT;
 800257c:	4b61      	ldr	r3, [pc, #388]	; (8002704 <NRF24_begin+0x1a0>)
 800257e:	601e      	str	r6, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8002580:	4b61      	ldr	r3, [pc, #388]	; (8002708 <NRF24_begin+0x1a4>)
 8002582:	801d      	strh	r5, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8002584:	4b61      	ldr	r3, [pc, #388]	; (800270c <NRF24_begin+0x1a8>)
 8002586:	801c      	strh	r4, [r3, #0]
	NRF24_csn(1);
 8002588:	2001      	movs	r0, #1
 800258a:	f7ff fd91 	bl	80020b0 <NRF24_csn>
	NRF24_ce(0);
 800258e:	2000      	movs	r0, #0
 8002590:	f7ff fda4 	bl	80020dc <NRF24_ce>
	HAL_Delay(5);
 8002594:	2005      	movs	r0, #5
 8002596:	f000 fd79 	bl	800308c <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 800259a:	2108      	movs	r1, #8
 800259c:	2000      	movs	r0, #0
 800259e:	f7ff fdf5 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80025a2:	213f      	movs	r1, #63	; 0x3f
 80025a4:	2001      	movs	r0, #1
 80025a6:	f7ff fdf1 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80025aa:	2103      	movs	r1, #3
 80025ac:	2002      	movs	r0, #2
 80025ae:	f7ff fded 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80025b2:	2103      	movs	r1, #3
 80025b4:	4608      	mov	r0, r1
 80025b6:	f7ff fde9 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80025ba:	2103      	movs	r1, #3
 80025bc:	2004      	movs	r0, #4
 80025be:	f7ff fde5 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80025c2:	2102      	movs	r1, #2
 80025c4:	2005      	movs	r0, #5
 80025c6:	f7ff fde1 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80025ca:	210f      	movs	r1, #15
 80025cc:	2006      	movs	r0, #6
 80025ce:	f7ff fddd 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80025d2:	210e      	movs	r1, #14
 80025d4:	2007      	movs	r0, #7
 80025d6:	f7ff fdd9 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80025da:	2100      	movs	r1, #0
 80025dc:	2008      	movs	r0, #8
 80025de:	f7ff fdd5 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80025e2:	2100      	movs	r1, #0
 80025e4:	2009      	movs	r0, #9
 80025e6:	f7ff fdd1 	bl	800218c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80025ea:	24e7      	movs	r4, #231	; 0xe7
 80025ec:	f88d 4004 	strb.w	r4, [sp, #4]
 80025f0:	f88d 4003 	strb.w	r4, [sp, #3]
 80025f4:	f88d 4002 	strb.w	r4, [sp, #2]
 80025f8:	f88d 4001 	strb.w	r4, [sp, #1]
 80025fc:	ad02      	add	r5, sp, #8
 80025fe:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8002602:	2205      	movs	r2, #5
 8002604:	4629      	mov	r1, r5
 8002606:	200a      	movs	r0, #10
 8002608:	f7ff fdda 	bl	80021c0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800260c:	23c2      	movs	r3, #194	; 0xc2
 800260e:	f88d 3004 	strb.w	r3, [sp, #4]
 8002612:	f88d 3003 	strb.w	r3, [sp, #3]
 8002616:	f88d 3002 	strb.w	r3, [sp, #2]
 800261a:	f88d 3001 	strb.w	r3, [sp, #1]
 800261e:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8002622:	2205      	movs	r2, #5
 8002624:	4629      	mov	r1, r5
 8002626:	200b      	movs	r0, #11
 8002628:	f7ff fdca 	bl	80021c0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800262c:	21c3      	movs	r1, #195	; 0xc3
 800262e:	200c      	movs	r0, #12
 8002630:	f7ff fdac 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8002634:	21c4      	movs	r1, #196	; 0xc4
 8002636:	200d      	movs	r0, #13
 8002638:	f7ff fda8 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800263c:	21c5      	movs	r1, #197	; 0xc5
 800263e:	200e      	movs	r0, #14
 8002640:	f7ff fda4 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8002644:	21c6      	movs	r1, #198	; 0xc6
 8002646:	200f      	movs	r0, #15
 8002648:	f7ff fda0 	bl	800218c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800264c:	f88d 4004 	strb.w	r4, [sp, #4]
 8002650:	f88d 4003 	strb.w	r4, [sp, #3]
 8002654:	f88d 4002 	strb.w	r4, [sp, #2]
 8002658:	f88d 4001 	strb.w	r4, [sp, #1]
 800265c:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8002660:	2205      	movs	r2, #5
 8002662:	4629      	mov	r1, r5
 8002664:	2010      	movs	r0, #16
 8002666:	f7ff fdab 	bl	80021c0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800266a:	2100      	movs	r1, #0
 800266c:	2011      	movs	r0, #17
 800266e:	f7ff fd8d 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8002672:	2100      	movs	r1, #0
 8002674:	2012      	movs	r0, #18
 8002676:	f7ff fd89 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800267a:	2100      	movs	r1, #0
 800267c:	2013      	movs	r0, #19
 800267e:	f7ff fd85 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8002682:	2100      	movs	r1, #0
 8002684:	2014      	movs	r0, #20
 8002686:	f7ff fd81 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800268a:	2100      	movs	r1, #0
 800268c:	2015      	movs	r0, #21
 800268e:	f7ff fd7d 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8002692:	2100      	movs	r1, #0
 8002694:	2016      	movs	r0, #22
 8002696:	f7ff fd79 	bl	800218c <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 800269a:	f7ff ff25 	bl	80024e8 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800269e:	2100      	movs	r1, #0
 80026a0:	201c      	movs	r0, #28
 80026a2:	f7ff fd73 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80026a6:	2100      	movs	r1, #0
 80026a8:	201d      	movs	r0, #29
 80026aa:	f7ff fd6f 	bl	800218c <NRF24_write_register>
	NRF24_setRetries(15, 15);
 80026ae:	210f      	movs	r1, #15
 80026b0:	4608      	mov	r0, r1
 80026b2:	f7ff fe11 	bl	80022d8 <NRF24_setRetries>
	NRF24_setPALevel(RF24_PA_m6dB);
 80026b6:	2002      	movs	r0, #2
 80026b8:	f7ff fe7c 	bl	80023b4 <NRF24_setPALevel>
	NRF24_setDataRate(RF24_1MBPS);
 80026bc:	2000      	movs	r0, #0
 80026be:	f7ff fe98 	bl	80023f2 <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 80026c2:	2002      	movs	r0, #2
 80026c4:	f7ff feb3 	bl	800242e <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 80026c8:	f7ff fe5a 	bl	8002380 <NRF24_disableDynamicPayloads>
	NRF24_setPayloadSize(32);
 80026cc:	2020      	movs	r0, #32
 80026ce:	f7ff fe17 	bl	8002300 <NRF24_setPayloadSize>
	NRF24_setAutoAck(true);
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff fe62 	bl	800239c <NRF24_setAutoAck>
	NRF24_enableAckPayload();
 80026d8:	f7ff ff20 	bl	800251c <NRF24_enableAckPayload>
	NRF24_resetStatus();
 80026dc:	f7ff fefd 	bl	80024da <NRF24_resetStatus>
	NRF24_setChannel(76);
 80026e0:	204c      	movs	r0, #76	; 0x4c
 80026e2:	f7ff fe03 	bl	80022ec <NRF24_setChannel>
	NRF24_flush_tx();
 80026e6:	f7ff fd8b 	bl	8002200 <NRF24_flush_tx>
	NRF24_flush_rx();
 80026ea:	f7ff fd8f 	bl	800220c <NRF24_flush_rx>
	NRF24_powerDown();
 80026ee:	f7ff feb1 	bl	8002454 <NRF24_powerDown>
}
 80026f2:	b002      	add	sp, #8
 80026f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80026f8:	b002      	add	sp, #8
 80026fa:	4770      	bx	lr
 80026fc:	20004950 	.word	0x20004950
 8002700:	200002b0 	.word	0x200002b0
 8002704:	200002ac 	.word	0x200002ac
 8002708:	200002aa 	.word	0x200002aa
 800270c:	200002a8 	.word	0x200002a8

08002710 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8002710:	b570      	push	{r4, r5, r6, lr}
 8002712:	b0a0      	sub	sp, #128	; 0x80
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002714:	ac07      	add	r4, sp, #28
 8002716:	4dc4      	ldr	r5, [pc, #784]	; (8002a28 <printRadioSettings+0x318>)
 8002718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800271a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800271c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800271e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002724:	682b      	ldr	r3, [r5, #0]
 8002726:	f824 3b02 	strh.w	r3, [r4], #2
 800272a:	0c1b      	lsrs	r3, r3, #16
 800272c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800272e:	a807      	add	r0, sp, #28
 8002730:	f7fd fd56 	bl	80001e0 <strlen>
 8002734:	230a      	movs	r3, #10
 8002736:	b282      	uxth	r2, r0
 8002738:	a907      	add	r1, sp, #28
 800273a:	48bc      	ldr	r0, [pc, #752]	; (8002a2c <printRadioSettings+0x31c>)
 800273c:	f003 fb3a 	bl	8005db4 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8002740:	2000      	movs	r0, #0
 8002742:	f7ff fce1 	bl	8002108 <NRF24_read_register>
	if(reg8Val & (1 << 3))
 8002746:	f010 0f08 	tst.w	r0, #8
 800274a:	f000 8261 	beq.w	8002c10 <printRadioSettings+0x500>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800274e:	f010 0f04 	tst.w	r0, #4
 8002752:	f000 8251 	beq.w	8002bf8 <printRadioSettings+0x4e8>
 8002756:	ac07      	add	r4, sp, #28
 8002758:	4db5      	ldr	r5, [pc, #724]	; (8002a30 <printRadioSettings+0x320>)
 800275a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800275e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002762:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002766:	a807      	add	r0, sp, #28
 8002768:	f7fd fd3a 	bl	80001e0 <strlen>
 800276c:	4caf      	ldr	r4, [pc, #700]	; (8002a2c <printRadioSettings+0x31c>)
 800276e:	230a      	movs	r3, #10
 8002770:	b282      	uxth	r2, r0
 8002772:	a907      	add	r1, sp, #28
 8002774:	4620      	mov	r0, r4
 8002776:	f003 fb1d 	bl	8005db4 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800277a:	2001      	movs	r0, #1
 800277c:	f7ff fcc4 	bl	8002108 <NRF24_read_register>
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002780:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8002784:	9303      	str	r3, [sp, #12]
 8002786:	f3c0 1300 	ubfx	r3, r0, #4, #1
 800278a:	9302      	str	r3, [sp, #8]
 800278c:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	f3c0 0340 	ubfx	r3, r0, #1, #1
 800279c:	f000 0201 	and.w	r2, r0, #1
 80027a0:	49a4      	ldr	r1, [pc, #656]	; (8002a34 <printRadioSettings+0x324>)
 80027a2:	a807      	add	r0, sp, #28
 80027a4:	f008 fb60 	bl	800ae68 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80027a8:	a807      	add	r0, sp, #28
 80027aa:	f7fd fd19 	bl	80001e0 <strlen>
 80027ae:	230a      	movs	r3, #10
 80027b0:	b282      	uxth	r2, r0
 80027b2:	a907      	add	r1, sp, #28
 80027b4:	4620      	mov	r0, r4
 80027b6:	f003 fafd 	bl	8005db4 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80027ba:	2002      	movs	r0, #2
 80027bc:	f7ff fca4 	bl	8002108 <NRF24_read_register>
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80027c0:	f3c0 1340 	ubfx	r3, r0, #5, #1
 80027c4:	9303      	str	r3, [sp, #12]
 80027c6:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80027ca:	9302      	str	r3, [sp, #8]
 80027cc:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	f3c0 0340 	ubfx	r3, r0, #1, #1
 80027dc:	f000 0201 	and.w	r2, r0, #1
 80027e0:	4995      	ldr	r1, [pc, #596]	; (8002a38 <printRadioSettings+0x328>)
 80027e2:	a807      	add	r0, sp, #28
 80027e4:	f008 fb40 	bl	800ae68 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80027e8:	a807      	add	r0, sp, #28
 80027ea:	f7fd fcf9 	bl	80001e0 <strlen>
 80027ee:	230a      	movs	r3, #10
 80027f0:	b282      	uxth	r2, r0
 80027f2:	a907      	add	r1, sp, #28
 80027f4:	4620      	mov	r0, r4
 80027f6:	f003 fadd 	bl	8005db4 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80027fa:	2003      	movs	r0, #3
 80027fc:	f7ff fc84 	bl	8002108 <NRF24_read_register>
 8002800:	f000 0203 	and.w	r2, r0, #3
	reg8Val +=2;
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8002804:	3202      	adds	r2, #2
 8002806:	498d      	ldr	r1, [pc, #564]	; (8002a3c <printRadioSettings+0x32c>)
 8002808:	a807      	add	r0, sp, #28
 800280a:	f008 fb2d 	bl	800ae68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800280e:	a807      	add	r0, sp, #28
 8002810:	f7fd fce6 	bl	80001e0 <strlen>
 8002814:	230a      	movs	r3, #10
 8002816:	b282      	uxth	r2, r0
 8002818:	a907      	add	r1, sp, #28
 800281a:	4620      	mov	r0, r4
 800281c:	f003 faca 	bl	8005db4 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8002820:	2005      	movs	r0, #5
 8002822:	f7ff fc71 	bl	8002108 <NRF24_read_register>
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8002826:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800282a:	4985      	ldr	r1, [pc, #532]	; (8002a40 <printRadioSettings+0x330>)
 800282c:	a807      	add	r0, sp, #28
 800282e:	f008 fb1b 	bl	800ae68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002832:	a807      	add	r0, sp, #28
 8002834:	f7fd fcd4 	bl	80001e0 <strlen>
 8002838:	230a      	movs	r3, #10
 800283a:	b282      	uxth	r2, r0
 800283c:	a907      	add	r1, sp, #28
 800283e:	4620      	mov	r0, r4
 8002840:	f003 fab8 	bl	8005db4 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8002844:	2006      	movs	r0, #6
 8002846:	f7ff fc5f 	bl	8002108 <NRF24_read_register>
 800284a:	4604      	mov	r4, r0
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800284c:	f010 0f08 	tst.w	r0, #8
 8002850:	f000 81e5 	beq.w	8002c1e <printRadioSettings+0x50e>
 8002854:	ad07      	add	r5, sp, #28
 8002856:	4e7b      	ldr	r6, [pc, #492]	; (8002a44 <printRadioSettings+0x334>)
 8002858:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800285a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800285c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002860:	f845 0b04 	str.w	r0, [r5], #4
 8002864:	f825 1b02 	strh.w	r1, [r5], #2
 8002868:	0c09      	lsrs	r1, r1, #16
 800286a:	7029      	strb	r1, [r5, #0]
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800286c:	a807      	add	r0, sp, #28
 800286e:	f7fd fcb7 	bl	80001e0 <strlen>
 8002872:	230a      	movs	r3, #10
 8002874:	b282      	uxth	r2, r0
 8002876:	a907      	add	r1, sp, #28
 8002878:	486c      	ldr	r0, [pc, #432]	; (8002a2c <printRadioSettings+0x31c>)
 800287a:	f003 fa9b 	bl	8005db4 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
	reg8Val = (reg8Val>>1);
 800287e:	f3c4 0441 	ubfx	r4, r4, #1, #2
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8002882:	2c00      	cmp	r4, #0
 8002884:	f000 81d8 	beq.w	8002c38 <printRadioSettings+0x528>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8002888:	2c01      	cmp	r4, #1
 800288a:	f000 81dc 	beq.w	8002c46 <printRadioSettings+0x536>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800288e:	2c02      	cmp	r4, #2
 8002890:	f000 81e0 	beq.w	8002c54 <printRadioSettings+0x544>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8002894:	2c03      	cmp	r4, #3
 8002896:	f000 81e7 	beq.w	8002c68 <printRadioSettings+0x558>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800289a:	a807      	add	r0, sp, #28
 800289c:	f7fd fca0 	bl	80001e0 <strlen>
 80028a0:	4c62      	ldr	r4, [pc, #392]	; (8002a2c <printRadioSettings+0x31c>)
 80028a2:	230a      	movs	r3, #10
 80028a4:	b282      	uxth	r2, r0
 80028a6:	a907      	add	r1, sp, #28
 80028a8:	4620      	mov	r0, r4
 80028aa:	f003 fa83 	bl	8005db4 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80028ae:	2205      	movs	r2, #5
 80028b0:	a905      	add	r1, sp, #20
 80028b2:	200a      	movs	r0, #10
 80028b4:	f7ff fc4a 	bl	800214c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80028b8:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80028bc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80028c0:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80028c4:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80028c8:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80028cc:	9502      	str	r5, [sp, #8]
 80028ce:	9001      	str	r0, [sp, #4]
 80028d0:	9100      	str	r1, [sp, #0]
 80028d2:	495d      	ldr	r1, [pc, #372]	; (8002a48 <printRadioSettings+0x338>)
 80028d4:	a807      	add	r0, sp, #28
 80028d6:	f008 fac7 	bl	800ae68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80028da:	a807      	add	r0, sp, #28
 80028dc:	f7fd fc80 	bl	80001e0 <strlen>
 80028e0:	230a      	movs	r3, #10
 80028e2:	b282      	uxth	r2, r0
 80028e4:	a907      	add	r1, sp, #28
 80028e6:	4620      	mov	r0, r4
 80028e8:	f003 fa64 	bl	8005db4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80028ec:	2205      	movs	r2, #5
 80028ee:	a905      	add	r1, sp, #20
 80028f0:	200b      	movs	r0, #11
 80028f2:	f7ff fc2b 	bl	800214c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80028f6:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80028fa:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80028fe:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8002902:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8002906:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800290a:	9502      	str	r5, [sp, #8]
 800290c:	9001      	str	r0, [sp, #4]
 800290e:	9100      	str	r1, [sp, #0]
 8002910:	494e      	ldr	r1, [pc, #312]	; (8002a4c <printRadioSettings+0x33c>)
 8002912:	a807      	add	r0, sp, #28
 8002914:	f008 faa8 	bl	800ae68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002918:	a807      	add	r0, sp, #28
 800291a:	f7fd fc61 	bl	80001e0 <strlen>
 800291e:	230a      	movs	r3, #10
 8002920:	b282      	uxth	r2, r0
 8002922:	a907      	add	r1, sp, #28
 8002924:	4620      	mov	r0, r4
 8002926:	f003 fa45 	bl	8005db4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800292a:	2201      	movs	r2, #1
 800292c:	a905      	add	r1, sp, #20
 800292e:	200c      	movs	r0, #12
 8002930:	f7ff fc0c 	bl	800214c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002934:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002938:	4945      	ldr	r1, [pc, #276]	; (8002a50 <printRadioSettings+0x340>)
 800293a:	a807      	add	r0, sp, #28
 800293c:	f008 fa94 	bl	800ae68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002940:	a807      	add	r0, sp, #28
 8002942:	f7fd fc4d 	bl	80001e0 <strlen>
 8002946:	230a      	movs	r3, #10
 8002948:	b282      	uxth	r2, r0
 800294a:	a907      	add	r1, sp, #28
 800294c:	4620      	mov	r0, r4
 800294e:	f003 fa31 	bl	8005db4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8002952:	2201      	movs	r2, #1
 8002954:	a905      	add	r1, sp, #20
 8002956:	200d      	movs	r0, #13
 8002958:	f7ff fbf8 	bl	800214c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800295c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002960:	493c      	ldr	r1, [pc, #240]	; (8002a54 <printRadioSettings+0x344>)
 8002962:	a807      	add	r0, sp, #28
 8002964:	f008 fa80 	bl	800ae68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002968:	a807      	add	r0, sp, #28
 800296a:	f7fd fc39 	bl	80001e0 <strlen>
 800296e:	230a      	movs	r3, #10
 8002970:	b282      	uxth	r2, r0
 8002972:	a907      	add	r1, sp, #28
 8002974:	4620      	mov	r0, r4
 8002976:	f003 fa1d 	bl	8005db4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800297a:	2201      	movs	r2, #1
 800297c:	a905      	add	r1, sp, #20
 800297e:	200e      	movs	r0, #14
 8002980:	f7ff fbe4 	bl	800214c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002984:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002988:	4933      	ldr	r1, [pc, #204]	; (8002a58 <printRadioSettings+0x348>)
 800298a:	a807      	add	r0, sp, #28
 800298c:	f008 fa6c 	bl	800ae68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002990:	a807      	add	r0, sp, #28
 8002992:	f7fd fc25 	bl	80001e0 <strlen>
 8002996:	230a      	movs	r3, #10
 8002998:	b282      	uxth	r2, r0
 800299a:	a907      	add	r1, sp, #28
 800299c:	4620      	mov	r0, r4
 800299e:	f003 fa09 	bl	8005db4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80029a2:	2201      	movs	r2, #1
 80029a4:	a905      	add	r1, sp, #20
 80029a6:	200f      	movs	r0, #15
 80029a8:	f7ff fbd0 	bl	800214c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80029ac:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80029b0:	492a      	ldr	r1, [pc, #168]	; (8002a5c <printRadioSettings+0x34c>)
 80029b2:	a807      	add	r0, sp, #28
 80029b4:	f008 fa58 	bl	800ae68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80029b8:	a807      	add	r0, sp, #28
 80029ba:	f7fd fc11 	bl	80001e0 <strlen>
 80029be:	230a      	movs	r3, #10
 80029c0:	b282      	uxth	r2, r0
 80029c2:	a907      	add	r1, sp, #28
 80029c4:	4620      	mov	r0, r4
 80029c6:	f003 f9f5 	bl	8005db4 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80029ca:	2205      	movs	r2, #5
 80029cc:	a905      	add	r1, sp, #20
 80029ce:	2010      	movs	r0, #16
 80029d0:	f7ff fbbc 	bl	800214c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80029d4:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80029d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80029dc:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80029e0:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80029e4:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80029e8:	9502      	str	r5, [sp, #8]
 80029ea:	9001      	str	r0, [sp, #4]
 80029ec:	9100      	str	r1, [sp, #0]
 80029ee:	491c      	ldr	r1, [pc, #112]	; (8002a60 <printRadioSettings+0x350>)
 80029f0:	a807      	add	r0, sp, #28
 80029f2:	f008 fa39 	bl	800ae68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80029f6:	a807      	add	r0, sp, #28
 80029f8:	f7fd fbf2 	bl	80001e0 <strlen>
 80029fc:	230a      	movs	r3, #10
 80029fe:	b282      	uxth	r2, r0
 8002a00:	a907      	add	r1, sp, #28
 8002a02:	4620      	mov	r0, r4
 8002a04:	f003 f9d6 	bl	8005db4 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8002a08:	2011      	movs	r0, #17
 8002a0a:	f7ff fb7d 	bl	8002108 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002a0e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002a12:	4914      	ldr	r1, [pc, #80]	; (8002a64 <printRadioSettings+0x354>)
 8002a14:	a807      	add	r0, sp, #28
 8002a16:	f008 fa27 	bl	800ae68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002a1a:	a807      	add	r0, sp, #28
 8002a1c:	f7fd fbe0 	bl	80001e0 <strlen>
 8002a20:	230a      	movs	r3, #10
 8002a22:	b282      	uxth	r2, r0
 8002a24:	e020      	b.n	8002a68 <printRadioSettings+0x358>
 8002a26:	bf00      	nop
 8002a28:	0800e5ac 	.word	0x0800e5ac
 8002a2c:	20000308 	.word	0x20000308
 8002a30:	0800e5e0 	.word	0x0800e5e0
 8002a34:	0800e62c 	.word	0x0800e62c
 8002a38:	0800e670 	.word	0x0800e670
 8002a3c:	0800e6bc 	.word	0x0800e6bc
 8002a40:	0800e6d8 	.word	0x0800e6d8
 8002a44:	0800e6ec 	.word	0x0800e6ec
 8002a48:	0800e76c 	.word	0x0800e76c
 8002a4c:	0800e79c 	.word	0x0800e79c
 8002a50:	0800e7cc 	.word	0x0800e7cc
 8002a54:	0800e7f4 	.word	0x0800e7f4
 8002a58:	0800e81c 	.word	0x0800e81c
 8002a5c:	0800e844 	.word	0x0800e844
 8002a60:	0800e86c 	.word	0x0800e86c
 8002a64:	0800e898 	.word	0x0800e898
 8002a68:	a907      	add	r1, sp, #28
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	f003 f9a2 	bl	8005db4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8002a70:	2012      	movs	r0, #18
 8002a72:	f7ff fb49 	bl	8002108 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002a76:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002a7a:	498a      	ldr	r1, [pc, #552]	; (8002ca4 <printRadioSettings+0x594>)
 8002a7c:	a807      	add	r0, sp, #28
 8002a7e:	f008 f9f3 	bl	800ae68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002a82:	a807      	add	r0, sp, #28
 8002a84:	f7fd fbac 	bl	80001e0 <strlen>
 8002a88:	230a      	movs	r3, #10
 8002a8a:	b282      	uxth	r2, r0
 8002a8c:	a907      	add	r1, sp, #28
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f003 f990 	bl	8005db4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8002a94:	2013      	movs	r0, #19
 8002a96:	f7ff fb37 	bl	8002108 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002a9a:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002a9e:	4982      	ldr	r1, [pc, #520]	; (8002ca8 <printRadioSettings+0x598>)
 8002aa0:	a807      	add	r0, sp, #28
 8002aa2:	f008 f9e1 	bl	800ae68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002aa6:	a807      	add	r0, sp, #28
 8002aa8:	f7fd fb9a 	bl	80001e0 <strlen>
 8002aac:	230a      	movs	r3, #10
 8002aae:	b282      	uxth	r2, r0
 8002ab0:	a907      	add	r1, sp, #28
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f003 f97e 	bl	8005db4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8002ab8:	2014      	movs	r0, #20
 8002aba:	f7ff fb25 	bl	8002108 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002abe:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002ac2:	497a      	ldr	r1, [pc, #488]	; (8002cac <printRadioSettings+0x59c>)
 8002ac4:	a807      	add	r0, sp, #28
 8002ac6:	f008 f9cf 	bl	800ae68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002aca:	a807      	add	r0, sp, #28
 8002acc:	f7fd fb88 	bl	80001e0 <strlen>
 8002ad0:	230a      	movs	r3, #10
 8002ad2:	b282      	uxth	r2, r0
 8002ad4:	a907      	add	r1, sp, #28
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	f003 f96c 	bl	8005db4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8002adc:	2015      	movs	r0, #21
 8002ade:	f7ff fb13 	bl	8002108 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002ae2:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002ae6:	4972      	ldr	r1, [pc, #456]	; (8002cb0 <printRadioSettings+0x5a0>)
 8002ae8:	a807      	add	r0, sp, #28
 8002aea:	f008 f9bd 	bl	800ae68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002aee:	a807      	add	r0, sp, #28
 8002af0:	f7fd fb76 	bl	80001e0 <strlen>
 8002af4:	230a      	movs	r3, #10
 8002af6:	b282      	uxth	r2, r0
 8002af8:	a907      	add	r1, sp, #28
 8002afa:	4620      	mov	r0, r4
 8002afc:	f003 f95a 	bl	8005db4 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8002b00:	2016      	movs	r0, #22
 8002b02:	f7ff fb01 	bl	8002108 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002b06:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002b0a:	496a      	ldr	r1, [pc, #424]	; (8002cb4 <printRadioSettings+0x5a4>)
 8002b0c:	a807      	add	r0, sp, #28
 8002b0e:	f008 f9ab 	bl	800ae68 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002b12:	a807      	add	r0, sp, #28
 8002b14:	f7fd fb64 	bl	80001e0 <strlen>
 8002b18:	230a      	movs	r3, #10
 8002b1a:	b282      	uxth	r2, r0
 8002b1c:	a907      	add	r1, sp, #28
 8002b1e:	4620      	mov	r0, r4
 8002b20:	f003 f948 	bl	8005db4 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8002b24:	201c      	movs	r0, #28
 8002b26:	f7ff faef 	bl	8002108 <NRF24_read_register>
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002b2a:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8002b2e:	9303      	str	r3, [sp, #12]
 8002b30:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8002b34:	9302      	str	r3, [sp, #8]
 8002b36:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8002b46:	f000 0201 	and.w	r2, r0, #1
 8002b4a:	495b      	ldr	r1, [pc, #364]	; (8002cb8 <printRadioSettings+0x5a8>)
 8002b4c:	a807      	add	r0, sp, #28
 8002b4e:	f008 f98b 	bl	800ae68 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002b52:	a807      	add	r0, sp, #28
 8002b54:	f7fd fb44 	bl	80001e0 <strlen>
 8002b58:	230a      	movs	r3, #10
 8002b5a:	b282      	uxth	r2, r0
 8002b5c:	a907      	add	r1, sp, #28
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f003 f928 	bl	8005db4 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8002b64:	201d      	movs	r0, #29
 8002b66:	f7ff facf 	bl	8002108 <NRF24_read_register>
 8002b6a:	4606      	mov	r6, r0
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8002b6c:	f010 0f04 	tst.w	r0, #4
 8002b70:	f000 8081 	beq.w	8002c76 <printRadioSettings+0x566>
 8002b74:	ac07      	add	r4, sp, #28
 8002b76:	4d51      	ldr	r5, [pc, #324]	; (8002cbc <printRadioSettings+0x5ac>)
 8002b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b80:	f844 0b04 	str.w	r0, [r4], #4
 8002b84:	8021      	strh	r1, [r4, #0]
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002b86:	a807      	add	r0, sp, #28
 8002b88:	f7fd fb2a 	bl	80001e0 <strlen>
 8002b8c:	230a      	movs	r3, #10
 8002b8e:	b282      	uxth	r2, r0
 8002b90:	a907      	add	r1, sp, #28
 8002b92:	484b      	ldr	r0, [pc, #300]	; (8002cc0 <printRadioSettings+0x5b0>)
 8002b94:	f003 f90e 	bl	8005db4 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002b98:	f016 0f02 	tst.w	r6, #2
 8002b9c:	d178      	bne.n	8002c90 <printRadioSettings+0x580>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8002b9e:	ac07      	add	r4, sp, #28
 8002ba0:	4d48      	ldr	r5, [pc, #288]	; (8002cc4 <printRadioSettings+0x5b4>)
 8002ba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ba6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002baa:	c403      	stmia	r4!, {r0, r1}
 8002bac:	f824 2b02 	strh.w	r2, [r4], #2
 8002bb0:	0c12      	lsrs	r2, r2, #16
 8002bb2:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002bb4:	a807      	add	r0, sp, #28
 8002bb6:	f7fd fb13 	bl	80001e0 <strlen>
 8002bba:	4e41      	ldr	r6, [pc, #260]	; (8002cc0 <printRadioSettings+0x5b0>)
 8002bbc:	230a      	movs	r3, #10
 8002bbe:	b282      	uxth	r2, r0
 8002bc0:	a907      	add	r1, sp, #28
 8002bc2:	4630      	mov	r0, r6
 8002bc4:	f003 f8f6 	bl	8005db4 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002bc8:	ac07      	add	r4, sp, #28
 8002bca:	4d3f      	ldr	r5, [pc, #252]	; (8002cc8 <printRadioSettings+0x5b8>)
 8002bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bd8:	682b      	ldr	r3, [r5, #0]
 8002bda:	f824 3b02 	strh.w	r3, [r4], #2
 8002bde:	0c1b      	lsrs	r3, r3, #16
 8002be0:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002be2:	a807      	add	r0, sp, #28
 8002be4:	f7fd fafc 	bl	80001e0 <strlen>
 8002be8:	230a      	movs	r3, #10
 8002bea:	b282      	uxth	r2, r0
 8002bec:	a907      	add	r1, sp, #28
 8002bee:	4630      	mov	r0, r6
 8002bf0:	f003 f8e0 	bl	8005db4 <HAL_UART_Transmit>
}
 8002bf4:	b020      	add	sp, #128	; 0x80
 8002bf6:	bd70      	pop	{r4, r5, r6, pc}
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8002bf8:	ac07      	add	r4, sp, #28
 8002bfa:	4d34      	ldr	r5, [pc, #208]	; (8002ccc <printRadioSettings+0x5bc>)
 8002bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c04:	c403      	stmia	r4!, {r0, r1}
 8002c06:	f824 2b02 	strh.w	r2, [r4], #2
 8002c0a:	0c12      	lsrs	r2, r2, #16
 8002c0c:	7022      	strb	r2, [r4, #0]
 8002c0e:	e5aa      	b.n	8002766 <printRadioSettings+0x56>
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8002c10:	ac07      	add	r4, sp, #28
 8002c12:	4d2f      	ldr	r5, [pc, #188]	; (8002cd0 <printRadioSettings+0x5c0>)
 8002c14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c18:	682b      	ldr	r3, [r5, #0]
 8002c1a:	6023      	str	r3, [r4, #0]
 8002c1c:	e5a3      	b.n	8002766 <printRadioSettings+0x56>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8002c1e:	ad07      	add	r5, sp, #28
 8002c20:	4e2c      	ldr	r6, [pc, #176]	; (8002cd4 <printRadioSettings+0x5c4>)
 8002c22:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c26:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002c2a:	f845 0b04 	str.w	r0, [r5], #4
 8002c2e:	f825 1b02 	strh.w	r1, [r5], #2
 8002c32:	0c09      	lsrs	r1, r1, #16
 8002c34:	7029      	strb	r1, [r5, #0]
 8002c36:	e619      	b.n	800286c <printRadioSettings+0x15c>
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8002c38:	ac07      	add	r4, sp, #28
 8002c3a:	4d27      	ldr	r5, [pc, #156]	; (8002cd8 <printRadioSettings+0x5c8>)
 8002c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c40:	682b      	ldr	r3, [r5, #0]
 8002c42:	6023      	str	r3, [r4, #0]
 8002c44:	e629      	b.n	800289a <printRadioSettings+0x18a>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8002c46:	ac07      	add	r4, sp, #28
 8002c48:	4d24      	ldr	r5, [pc, #144]	; (8002cdc <printRadioSettings+0x5cc>)
 8002c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c4e:	682b      	ldr	r3, [r5, #0]
 8002c50:	6023      	str	r3, [r4, #0]
 8002c52:	e622      	b.n	800289a <printRadioSettings+0x18a>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8002c54:	ac07      	add	r4, sp, #28
 8002c56:	4d22      	ldr	r5, [pc, #136]	; (8002ce0 <printRadioSettings+0x5d0>)
 8002c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c5c:	682b      	ldr	r3, [r5, #0]
 8002c5e:	f824 3b02 	strh.w	r3, [r4], #2
 8002c62:	0c1b      	lsrs	r3, r3, #16
 8002c64:	7023      	strb	r3, [r4, #0]
 8002c66:	e618      	b.n	800289a <printRadioSettings+0x18a>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8002c68:	ac07      	add	r4, sp, #28
 8002c6a:	4d1e      	ldr	r5, [pc, #120]	; (8002ce4 <printRadioSettings+0x5d4>)
 8002c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c70:	682b      	ldr	r3, [r5, #0]
 8002c72:	8023      	strh	r3, [r4, #0]
 8002c74:	e611      	b.n	800289a <printRadioSettings+0x18a>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8002c76:	ac07      	add	r4, sp, #28
 8002c78:	4d1b      	ldr	r5, [pc, #108]	; (8002ce8 <printRadioSettings+0x5d8>)
 8002c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c82:	f844 0b04 	str.w	r0, [r4], #4
 8002c86:	f824 1b02 	strh.w	r1, [r4], #2
 8002c8a:	0c09      	lsrs	r1, r1, #16
 8002c8c:	7021      	strb	r1, [r4, #0]
 8002c8e:	e77a      	b.n	8002b86 <printRadioSettings+0x476>
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002c90:	ac07      	add	r4, sp, #28
 8002c92:	4d16      	ldr	r5, [pc, #88]	; (8002cec <printRadioSettings+0x5dc>)
 8002c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c9c:	c403      	stmia	r4!, {r0, r1}
 8002c9e:	8022      	strh	r2, [r4, #0]
 8002ca0:	e788      	b.n	8002bb4 <printRadioSettings+0x4a4>
 8002ca2:	bf00      	nop
 8002ca4:	0800e8b4 	.word	0x0800e8b4
 8002ca8:	0800e8d0 	.word	0x0800e8d0
 8002cac:	0800e8ec 	.word	0x0800e8ec
 8002cb0:	0800e908 	.word	0x0800e908
 8002cb4:	0800e924 	.word	0x0800e924
 8002cb8:	0800e940 	.word	0x0800e940
 8002cbc:	0800e98c 	.word	0x0800e98c
 8002cc0:	20000308 	.word	0x20000308
 8002cc4:	0800e9d8 	.word	0x0800e9d8
 8002cc8:	0800e5ac 	.word	0x0800e5ac
 8002ccc:	0800e5fc 	.word	0x0800e5fc
 8002cd0:	0800e618 	.word	0x0800e618
 8002cd4:	0800e704 	.word	0x0800e704
 8002cd8:	0800e71c 	.word	0x0800e71c
 8002cdc:	0800e730 	.word	0x0800e730
 8002ce0:	0800e744 	.word	0x0800e744
 8002ce4:	0800e758 	.word	0x0800e758
 8002ce8:	0800e9a4 	.word	0x0800e9a4
 8002cec:	0800e9bc 	.word	0x0800e9bc

08002cf0 <pid_calculate_roll>:

/** roll PID Calculation **/
float pid_calculate_roll(float IMU_roll_value, int timer_value, float roll_setpoint) {

	//Calculate error
	roll_error = IMU_roll_value - roll_setpoint;
 8002cf0:	ee70 0a60 	vsub.f32	s1, s0, s1
 8002cf4:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <pid_calculate_roll+0xac>)
 8002cf6:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	roll_p = roll_p_gain * roll_error;
 8002cfa:	4b29      	ldr	r3, [pc, #164]	; (8002da0 <pid_calculate_roll+0xb0>)
 8002cfc:	edd3 6a00 	vldr	s13, [r3]
 8002d00:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8002d04:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <pid_calculate_roll+0xb4>)
 8002d06:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	roll_i += (roll_i_gain * roll_error * delta_t);
 8002d0a:	4b27      	ldr	r3, [pc, #156]	; (8002da8 <pid_calculate_roll+0xb8>)
 8002d0c:	edd3 7a00 	vldr	s15, [r3]
 8002d10:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8002d14:	eddf 5a25 	vldr	s11, [pc, #148]	; 8002dac <pid_calculate_roll+0xbc>
 8002d18:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002d1c:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <pid_calculate_roll+0xc0>)
 8002d1e:	ed93 7a00 	vldr	s14, [r3]
 8002d22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d26:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / delta_t);
 8002d2a:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <pid_calculate_roll+0xc4>)
 8002d2c:	ed93 6a00 	vldr	s12, [r3]
 8002d30:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8002d34:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8002d38:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <pid_calculate_roll+0xc8>)
 8002d3a:	ed92 6a00 	vldr	s12, [r2]
 8002d3e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002d42:	4a1e      	ldr	r2, [pc, #120]	; (8002dbc <pid_calculate_roll+0xcc>)
 8002d44:	ed82 7a00 	vstr	s14, [r2]
	roll_last_d_error = roll_error;
 8002d48:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	roll_output = roll_p + roll_i + roll_d;
 8002d4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d54:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <pid_calculate_roll+0xd0>)
 8002d56:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (roll_output < -roll_pid_clip) {
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <pid_calculate_roll+0xd4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	425a      	negs	r2, r3
 8002d60:	ee07 2a10 	vmov	s14, r2
 8002d64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d70:	d40c      	bmi.n	8002d8c <pid_calculate_roll+0x9c>
		roll_output = -roll_pid_clip;
	} else if (roll_output > roll_pid_clip) {
 8002d72:	ee07 3a10 	vmov	s14, r3
 8002d76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d82:	dd06      	ble.n	8002d92 <pid_calculate_roll+0xa2>
		roll_output = roll_pid_clip;
 8002d84:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <pid_calculate_roll+0xd0>)
 8002d86:	ed83 7a00 	vstr	s14, [r3]
 8002d8a:	e002      	b.n	8002d92 <pid_calculate_roll+0xa2>
		roll_output = -roll_pid_clip;
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <pid_calculate_roll+0xd0>)
 8002d8e:	ed83 7a00 	vstr	s14, [r3]
	}

	return roll_output;
}
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <pid_calculate_roll+0xd0>)
 8002d94:	ed93 0a00 	vldr	s0, [r3]
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20000364 	.word	0x20000364
 8002da0:	20000068 	.word	0x20000068
 8002da4:	20004444 	.word	0x20004444
 8002da8:	20000064 	.word	0x20000064
 8002dac:	3b012912 	.word	0x3b012912
 8002db0:	20004450 	.word	0x20004450
 8002db4:	20000368 	.word	0x20000368
 8002db8:	20000060 	.word	0x20000060
 8002dbc:	20004430 	.word	0x20004430
 8002dc0:	2000036c 	.word	0x2000036c
 8002dc4:	2000006c 	.word	0x2000006c

08002dc8 <reset_pid_roll>:

void reset_pid_roll(){

	roll_p = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <reset_pid_roll+0x14>)
 8002dcc:	6013      	str	r3, [r2, #0]
	roll_i = 0;
 8002dce:	4a04      	ldr	r2, [pc, #16]	; (8002de0 <reset_pid_roll+0x18>)
 8002dd0:	6013      	str	r3, [r2, #0]
	roll_d = 0;
 8002dd2:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <reset_pid_roll+0x1c>)
 8002dd4:	6013      	str	r3, [r2, #0]
	roll_output = 0;
 8002dd6:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <reset_pid_roll+0x20>)
 8002dd8:	6013      	str	r3, [r2, #0]

}
 8002dda:	4770      	bx	lr
 8002ddc:	20004444 	.word	0x20004444
 8002de0:	20004450 	.word	0x20004450
 8002de4:	20004430 	.word	0x20004430
 8002de8:	2000036c 	.word	0x2000036c

08002dec <pid_calculate_pitch>:

/** Pitch PID Calculation **/
float pid_calculate_pitch(float IMU_pitch_value, int timer_value, float pitch_setpoint) {

	//Calculate error
	pitch_error = IMU_pitch_value - pitch_setpoint;
 8002dec:	ee70 0a60 	vsub.f32	s1, s0, s1
 8002df0:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <pid_calculate_pitch+0xac>)
 8002df2:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 8002df6:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <pid_calculate_pitch+0xb0>)
 8002df8:	edd3 6a00 	vldr	s13, [r3]
 8002dfc:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8002e00:	4b27      	ldr	r3, [pc, #156]	; (8002ea0 <pid_calculate_pitch+0xb4>)
 8002e02:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	pitch_i += (pitch_i_gain * pitch_error * delta_t);
 8002e06:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <pid_calculate_pitch+0xb8>)
 8002e08:	edd3 7a00 	vldr	s15, [r3]
 8002e0c:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8002e10:	eddf 5a25 	vldr	s11, [pc, #148]	; 8002ea8 <pid_calculate_pitch+0xbc>
 8002e14:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002e18:	4b24      	ldr	r3, [pc, #144]	; (8002eac <pid_calculate_pitch+0xc0>)
 8002e1a:	ed93 7a00 	vldr	s14, [r3]
 8002e1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e22:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	pitch_d = pitch_d_gain * ( (pitch_error - pitch_last_d_error) / delta_t);
 8002e26:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <pid_calculate_pitch+0xc4>)
 8002e28:	ed93 6a00 	vldr	s12, [r3]
 8002e2c:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8002e30:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8002e34:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <pid_calculate_pitch+0xc8>)
 8002e36:	ed92 6a00 	vldr	s12, [r2]
 8002e3a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002e3e:	4a1e      	ldr	r2, [pc, #120]	; (8002eb8 <pid_calculate_pitch+0xcc>)
 8002e40:	ed82 7a00 	vstr	s14, [r2]
	pitch_last_d_error = pitch_error;
 8002e44:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 8002e48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e50:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <pid_calculate_pitch+0xd0>)
 8002e52:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (pitch_output < -pitch_pid_clip) {
 8002e56:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <pid_calculate_pitch+0xd4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	425a      	negs	r2, r3
 8002e5c:	ee07 2a10 	vmov	s14, r2
 8002e60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6c:	d40c      	bmi.n	8002e88 <pid_calculate_pitch+0x9c>
		pitch_output = -pitch_pid_clip;
	} else if (pitch_output > pitch_pid_clip) {
 8002e6e:	ee07 3a10 	vmov	s14, r3
 8002e72:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7e:	dd06      	ble.n	8002e8e <pid_calculate_pitch+0xa2>
		pitch_output = pitch_pid_clip;
 8002e80:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <pid_calculate_pitch+0xd0>)
 8002e82:	ed83 7a00 	vstr	s14, [r3]
 8002e86:	e002      	b.n	8002e8e <pid_calculate_pitch+0xa2>
		pitch_output = -pitch_pid_clip;
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <pid_calculate_pitch+0xd0>)
 8002e8a:	ed83 7a00 	vstr	s14, [r3]
	}

	return pitch_output;
}
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <pid_calculate_pitch+0xd0>)
 8002e90:	ed93 0a00 	vldr	s0, [r3]
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20000358 	.word	0x20000358
 8002e9c:	20000058 	.word	0x20000058
 8002ea0:	2000443c 	.word	0x2000443c
 8002ea4:	20000054 	.word	0x20000054
 8002ea8:	3b012912 	.word	0x3b012912
 8002eac:	20004440 	.word	0x20004440
 8002eb0:	2000035c 	.word	0x2000035c
 8002eb4:	20000050 	.word	0x20000050
 8002eb8:	20004434 	.word	0x20004434
 8002ebc:	20000360 	.word	0x20000360
 8002ec0:	2000005c 	.word	0x2000005c

08002ec4 <reset_pid_pitch>:

void reset_pid_pitch(){

	pitch_p = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <reset_pid_pitch+0x14>)
 8002ec8:	6013      	str	r3, [r2, #0]
	pitch_i = 0;
 8002eca:	4a04      	ldr	r2, [pc, #16]	; (8002edc <reset_pid_pitch+0x18>)
 8002ecc:	6013      	str	r3, [r2, #0]
	pitch_d = 0;
 8002ece:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <reset_pid_pitch+0x1c>)
 8002ed0:	6013      	str	r3, [r2, #0]
	pitch_output = 0;
 8002ed2:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <reset_pid_pitch+0x20>)
 8002ed4:	6013      	str	r3, [r2, #0]

}
 8002ed6:	4770      	bx	lr
 8002ed8:	2000443c 	.word	0x2000443c
 8002edc:	20004440 	.word	0x20004440
 8002ee0:	20004434 	.word	0x20004434
 8002ee4:	20000360 	.word	0x20000360

08002ee8 <pid_calculate_yaw>:

/** yaw PID Calculation **/
float pid_calculate_yaw(float IMU_yaw_value, int timer_value, float yaw_setpoint) {

	//Calculate error
	yaw_error = IMU_yaw_value - yaw_setpoint;
 8002ee8:	ee70 0a60 	vsub.f32	s1, s0, s1
 8002eec:	4b29      	ldr	r3, [pc, #164]	; (8002f94 <pid_calculate_yaw+0xac>)
 8002eee:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	yaw_p = yaw_p_gain * yaw_error;
 8002ef2:	4b29      	ldr	r3, [pc, #164]	; (8002f98 <pid_calculate_yaw+0xb0>)
 8002ef4:	edd3 6a00 	vldr	s13, [r3]
 8002ef8:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8002efc:	4b27      	ldr	r3, [pc, #156]	; (8002f9c <pid_calculate_yaw+0xb4>)
 8002efe:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	yaw_i += (yaw_i_gain * yaw_error * delta_t);
 8002f02:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <pid_calculate_yaw+0xb8>)
 8002f04:	edd3 7a00 	vldr	s15, [r3]
 8002f08:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8002f0c:	eddf 5a25 	vldr	s11, [pc, #148]	; 8002fa4 <pid_calculate_yaw+0xbc>
 8002f10:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002f14:	4b24      	ldr	r3, [pc, #144]	; (8002fa8 <pid_calculate_yaw+0xc0>)
 8002f16:	ed93 7a00 	vldr	s14, [r3]
 8002f1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f1e:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	yaw_d = yaw_d_gain * ( (yaw_error - yaw_last_d_error) / delta_t);
 8002f22:	4b22      	ldr	r3, [pc, #136]	; (8002fac <pid_calculate_yaw+0xc4>)
 8002f24:	ed93 6a00 	vldr	s12, [r3]
 8002f28:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8002f2c:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8002f30:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <pid_calculate_yaw+0xc8>)
 8002f32:	ed92 6a00 	vldr	s12, [r2]
 8002f36:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002f3a:	4a1e      	ldr	r2, [pc, #120]	; (8002fb4 <pid_calculate_yaw+0xcc>)
 8002f3c:	ed82 7a00 	vstr	s14, [r2]
	yaw_last_d_error = yaw_error;
 8002f40:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	yaw_output = yaw_p + yaw_i + yaw_d;
 8002f44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f4c:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <pid_calculate_yaw+0xd0>)
 8002f4e:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (yaw_output < -yaw_pid_clip) {
 8002f52:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <pid_calculate_yaw+0xd4>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	425a      	negs	r2, r3
 8002f58:	ee07 2a10 	vmov	s14, r2
 8002f5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002f60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f68:	d40c      	bmi.n	8002f84 <pid_calculate_yaw+0x9c>
		yaw_output = -yaw_pid_clip;
	} else if (yaw_output > yaw_pid_clip) {
 8002f6a:	ee07 3a10 	vmov	s14, r3
 8002f6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7a:	dd06      	ble.n	8002f8a <pid_calculate_yaw+0xa2>
		yaw_output = yaw_pid_clip;
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <pid_calculate_yaw+0xd0>)
 8002f7e:	ed83 7a00 	vstr	s14, [r3]
 8002f82:	e002      	b.n	8002f8a <pid_calculate_yaw+0xa2>
		yaw_output = -yaw_pid_clip;
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <pid_calculate_yaw+0xd0>)
 8002f86:	ed83 7a00 	vstr	s14, [r3]
	}

	return yaw_output;
}
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <pid_calculate_yaw+0xd0>)
 8002f8c:	ed93 0a00 	vldr	s0, [r3]
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20000370 	.word	0x20000370
 8002f98:	20000078 	.word	0x20000078
 8002f9c:	2000444c 	.word	0x2000444c
 8002fa0:	20000074 	.word	0x20000074
 8002fa4:	3b012912 	.word	0x3b012912
 8002fa8:	20004448 	.word	0x20004448
 8002fac:	20000374 	.word	0x20000374
 8002fb0:	20000070 	.word	0x20000070
 8002fb4:	20004438 	.word	0x20004438
 8002fb8:	20000378 	.word	0x20000378
 8002fbc:	2000007c 	.word	0x2000007c

08002fc0 <reset_pid_yaw>:

void reset_pid_yaw(){

	yaw_p = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	4a04      	ldr	r2, [pc, #16]	; (8002fd4 <reset_pid_yaw+0x14>)
 8002fc4:	6013      	str	r3, [r2, #0]
	yaw_i = 0;
 8002fc6:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <reset_pid_yaw+0x18>)
 8002fc8:	6013      	str	r3, [r2, #0]
	yaw_d = 0;
 8002fca:	4a04      	ldr	r2, [pc, #16]	; (8002fdc <reset_pid_yaw+0x1c>)
 8002fcc:	6013      	str	r3, [r2, #0]
	yaw_output = 0;
 8002fce:	4a04      	ldr	r2, [pc, #16]	; (8002fe0 <reset_pid_yaw+0x20>)
 8002fd0:	6013      	str	r3, [r2, #0]

}
 8002fd2:	4770      	bx	lr
 8002fd4:	2000444c 	.word	0x2000444c
 8002fd8:	20004448 	.word	0x20004448
 8002fdc:	20004438 	.word	0x20004438
 8002fe0:	20000378 	.word	0x20000378

08002fe4 <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002fe4:	4a06      	ldr	r2, [pc, #24]	; (8003000 <DWT_Init+0x1c>)
 8002fe6:	68d3      	ldr	r3, [r2, #12]
 8002fe8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fec:	60d3      	str	r3, [r2, #12]
        //DWT->LAR = 0xC5ACCE55;
        DWT->CYCCNT = 0;
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <DWT_Init+0x20>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]

}
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	e000edf0 	.word	0xe000edf0
 8003004:	e0001000 	.word	0xe0001000

08003008 <DWT_Delay>:
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT, delayTicks = us * (SystemCoreClock/1000000);
 8003008:	4b07      	ldr	r3, [pc, #28]	; (8003028 <DWT_Delay+0x20>)
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	4b07      	ldr	r3, [pc, #28]	; (800302c <DWT_Delay+0x24>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4907      	ldr	r1, [pc, #28]	; (8003030 <DWT_Delay+0x28>)
 8003012:	fba1 1303 	umull	r1, r3, r1, r3
 8003016:	0c9b      	lsrs	r3, r3, #18
 8003018:	fb00 f003 	mul.w	r0, r0, r3

    while (DWT->CYCCNT - startTick < delayTicks);
 800301c:	4b02      	ldr	r3, [pc, #8]	; (8003028 <DWT_Delay+0x20>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	4283      	cmp	r3, r0
 8003024:	d3fa      	bcc.n	800301c <DWT_Delay+0x14>
}
 8003026:	4770      	bx	lr
 8003028:	e0001000 	.word	0xe0001000
 800302c:	20000090 	.word	0x20000090
 8003030:	431bde83 	.word	0x431bde83

08003034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003034:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_Init+0x30>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003046:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800304e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003050:	2003      	movs	r0, #3
 8003052:	f000 f82f 	bl	80030b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003056:	2000      	movs	r0, #0
 8003058:	f004 ffb8 	bl	8007fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800305c:	f004 ff84 	bl	8007f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003060:	2000      	movs	r0, #0
 8003062:	bd08      	pop	{r3, pc}
 8003064:	40023c00 	.word	0x40023c00

08003068 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003068:	4a03      	ldr	r2, [pc, #12]	; (8003078 <HAL_IncTick+0x10>)
 800306a:	6811      	ldr	r1, [r2, #0]
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <HAL_IncTick+0x14>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	440b      	add	r3, r1
 8003072:	6013      	str	r3, [r2, #0]
}
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20004454 	.word	0x20004454
 800307c:	20000080 	.word	0x20000080

08003080 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003080:	4b01      	ldr	r3, [pc, #4]	; (8003088 <HAL_GetTick+0x8>)
 8003082:	6818      	ldr	r0, [r3, #0]
}
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20004454 	.word	0x20004454

0800308c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003090:	f7ff fff6 	bl	8003080 <HAL_GetTick>
 8003094:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003096:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800309a:	d002      	beq.n	80030a2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <HAL_Delay+0x24>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030a2:	f7ff ffed 	bl	8003080 <HAL_GetTick>
 80030a6:	1b40      	subs	r0, r0, r5
 80030a8:	42a0      	cmp	r0, r4
 80030aa:	d3fa      	bcc.n	80030a2 <HAL_Delay+0x16>
  {
  }
}
 80030ac:	bd38      	pop	{r3, r4, r5, pc}
 80030ae:	bf00      	nop
 80030b0:	20000080 	.word	0x20000080

080030b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b4:	4a07      	ldr	r2, [pc, #28]	; (80030d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80030b6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80030bc:	041b      	lsls	r3, r3, #16
 80030be:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c0:	0200      	lsls	r0, r0, #8
 80030c2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80030c8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80030cc:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80030d0:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80030d2:	4770      	bx	lr
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030d8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030da:	4b17      	ldr	r3, [pc, #92]	; (8003138 <HAL_NVIC_SetPriority+0x60>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e2:	f1c3 0407 	rsb	r4, r3, #7
 80030e6:	2c04      	cmp	r4, #4
 80030e8:	bf28      	it	cs
 80030ea:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ec:	1d1d      	adds	r5, r3, #4
 80030ee:	2d06      	cmp	r5, #6
 80030f0:	d918      	bls.n	8003124 <HAL_NVIC_SetPriority+0x4c>
 80030f2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80030f8:	fa05 f404 	lsl.w	r4, r5, r4
 80030fc:	ea21 0104 	bic.w	r1, r1, r4
 8003100:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003102:	fa05 f303 	lsl.w	r3, r5, r3
 8003106:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800310a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800310c:	2800      	cmp	r0, #0
 800310e:	db0b      	blt.n	8003128 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003110:	0109      	lsls	r1, r1, #4
 8003112:	b2c9      	uxtb	r1, r1
 8003114:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003118:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800311c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003120:	bc30      	pop	{r4, r5}
 8003122:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003124:	2300      	movs	r3, #0
 8003126:	e7e5      	b.n	80030f4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003128:	f000 000f 	and.w	r0, r0, #15
 800312c:	0109      	lsls	r1, r1, #4
 800312e:	b2c9      	uxtb	r1, r1
 8003130:	4b02      	ldr	r3, [pc, #8]	; (800313c <HAL_NVIC_SetPriority+0x64>)
 8003132:	5419      	strb	r1, [r3, r0]
 8003134:	e7f4      	b.n	8003120 <HAL_NVIC_SetPriority+0x48>
 8003136:	bf00      	nop
 8003138:	e000ed00 	.word	0xe000ed00
 800313c:	e000ed14 	.word	0xe000ed14

08003140 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003140:	2800      	cmp	r0, #0
 8003142:	db07      	blt.n	8003154 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003144:	f000 021f 	and.w	r2, r0, #31
 8003148:	0940      	lsrs	r0, r0, #5
 800314a:	2301      	movs	r3, #1
 800314c:	4093      	lsls	r3, r2
 800314e:	4a02      	ldr	r2, [pc, #8]	; (8003158 <HAL_NVIC_EnableIRQ+0x18>)
 8003150:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	e000e100 	.word	0xe000e100

0800315c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800315c:	b168      	cbz	r0, 800317a <HAL_CRC_Init+0x1e>
{
 800315e:	b510      	push	{r4, lr}
 8003160:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003162:	7943      	ldrb	r3, [r0, #5]
 8003164:	b12b      	cbz	r3, 8003172 <HAL_CRC_Init+0x16>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003166:	2302      	movs	r3, #2
 8003168:	7163      	strb	r3, [r4, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800316a:	2301      	movs	r3, #1
 800316c:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800316e:	2000      	movs	r0, #0
}
 8003170:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8003172:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8003174:	f004 fc16 	bl	80079a4 <HAL_CRC_MspInit>
 8003178:	e7f5      	b.n	8003166 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 800317a:	2001      	movs	r0, #1
}
 800317c:	4770      	bx	lr
	...

08003180 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003180:	6802      	ldr	r2, [r0, #0]
 8003182:	b2d3      	uxtb	r3, r2
 8003184:	3b10      	subs	r3, #16
 8003186:	490b      	ldr	r1, [pc, #44]	; (80031b4 <DMA_CalcBaseAndBitshift+0x34>)
 8003188:	fba1 1303 	umull	r1, r3, r1, r3
 800318c:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800318e:	490a      	ldr	r1, [pc, #40]	; (80031b8 <DMA_CalcBaseAndBitshift+0x38>)
 8003190:	5cc9      	ldrb	r1, [r1, r3]
 8003192:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003194:	2b03      	cmp	r3, #3
 8003196:	d806      	bhi.n	80031a6 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003198:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 800319c:	f022 0203 	bic.w	r2, r2, #3
 80031a0:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80031a2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80031a4:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031a6:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80031aa:	f022 0203 	bic.w	r2, r2, #3
 80031ae:	3204      	adds	r2, #4
 80031b0:	6582      	str	r2, [r0, #88]	; 0x58
 80031b2:	e7f6      	b.n	80031a2 <DMA_CalcBaseAndBitshift+0x22>
 80031b4:	aaaaaaab 	.word	0xaaaaaaab
 80031b8:	0800e9f4 	.word	0x0800e9f4

080031bc <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031be:	6982      	ldr	r2, [r0, #24]
 80031c0:	b992      	cbnz	r2, 80031e8 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d00a      	beq.n	80031dc <DMA_CheckFifoParam+0x20>
 80031c6:	b11b      	cbz	r3, 80031d0 <DMA_CheckFifoParam+0x14>
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d001      	beq.n	80031d0 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 80031cc:	2000      	movs	r0, #0
 80031ce:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80031d2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80031d6:	d12c      	bne.n	8003232 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 80031d8:	2000      	movs	r0, #0
 80031da:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80031de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031e2:	d028      	beq.n	8003236 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 80031e4:	2000      	movs	r0, #0
 80031e6:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031e8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80031ec:	d005      	beq.n	80031fa <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d929      	bls.n	8003246 <DMA_CheckFifoParam+0x8a>
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d015      	beq.n	8003222 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 80031f6:	2000      	movs	r0, #0
 80031f8:	4770      	bx	lr
    switch (tmp)
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d803      	bhi.n	8003206 <DMA_CheckFifoParam+0x4a>
 80031fe:	e8df f003 	tbb	[pc, r3]
 8003202:	041c      	.short	0x041c
 8003204:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8003206:	2000      	movs	r0, #0
 8003208:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800320a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800320c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003210:	d115      	bne.n	800323e <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8003212:	2000      	movs	r0, #0
 8003214:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003216:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003218:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800321c:	d011      	beq.n	8003242 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 800321e:	2000      	movs	r0, #0
 8003220:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003222:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003224:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003228:	d001      	beq.n	800322e <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 800322a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 800322c:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800322e:	2000      	movs	r0, #0
 8003230:	4770      	bx	lr
        status = HAL_ERROR;
 8003232:	2001      	movs	r0, #1
 8003234:	4770      	bx	lr
        status = HAL_ERROR;
 8003236:	2001      	movs	r0, #1
 8003238:	4770      	bx	lr
      status = HAL_ERROR;
 800323a:	2001      	movs	r0, #1
 800323c:	4770      	bx	lr
        status = HAL_ERROR;
 800323e:	2001      	movs	r0, #1
 8003240:	4770      	bx	lr
        status = HAL_ERROR;
 8003242:	2001      	movs	r0, #1
 8003244:	4770      	bx	lr
      status = HAL_ERROR;
 8003246:	2001      	movs	r0, #1
 8003248:	4770      	bx	lr
	...

0800324c <HAL_DMA_Init>:
{
 800324c:	b570      	push	{r4, r5, r6, lr}
 800324e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003250:	f7ff ff16 	bl	8003080 <HAL_GetTick>
  if(hdma == NULL)
 8003254:	2c00      	cmp	r4, #0
 8003256:	d05b      	beq.n	8003310 <HAL_DMA_Init+0xc4>
 8003258:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 800325a:	2300      	movs	r3, #0
 800325c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8003260:	2302      	movs	r3, #2
 8003262:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8003266:	6822      	ldr	r2, [r4, #0]
 8003268:	6813      	ldr	r3, [r2, #0]
 800326a:	f023 0301 	bic.w	r3, r3, #1
 800326e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003270:	6823      	ldr	r3, [r4, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	f012 0f01 	tst.w	r2, #1
 8003278:	d00a      	beq.n	8003290 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800327a:	f7ff ff01 	bl	8003080 <HAL_GetTick>
 800327e:	1b40      	subs	r0, r0, r5
 8003280:	2805      	cmp	r0, #5
 8003282:	d9f5      	bls.n	8003270 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003284:	2320      	movs	r3, #32
 8003286:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003288:	2003      	movs	r0, #3
 800328a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800328e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8003290:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003292:	4820      	ldr	r0, [pc, #128]	; (8003314 <HAL_DMA_Init+0xc8>)
 8003294:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003296:	6861      	ldr	r1, [r4, #4]
 8003298:	68a2      	ldr	r2, [r4, #8]
 800329a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800329c:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800329e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a0:	6921      	ldr	r1, [r4, #16]
 80032a2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a4:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a8:	69a1      	ldr	r1, [r4, #24]
 80032aa:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ac:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ae:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80032b0:	6a21      	ldr	r1, [r4, #32]
 80032b2:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032b4:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80032b8:	2904      	cmp	r1, #4
 80032ba:	d01e      	beq.n	80032fa <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80032bc:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80032be:	6826      	ldr	r6, [r4, #0]
 80032c0:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032c2:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80032c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032c8:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d107      	bne.n	80032de <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80032ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80032d0:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80032d4:	b11b      	cbz	r3, 80032de <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032d6:	4620      	mov	r0, r4
 80032d8:	f7ff ff70 	bl	80031bc <DMA_CheckFifoParam>
 80032dc:	b990      	cbnz	r0, 8003304 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80032de:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032e0:	4620      	mov	r0, r4
 80032e2:	f7ff ff4d 	bl	8003180 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032e6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80032e8:	233f      	movs	r3, #63	; 0x3f
 80032ea:	4093      	lsls	r3, r2
 80032ec:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ee:	2000      	movs	r0, #0
 80032f0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80032f8:	e7c9      	b.n	800328e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80032fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80032fe:	4301      	orrs	r1, r0
 8003300:	430a      	orrs	r2, r1
 8003302:	e7db      	b.n	80032bc <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003304:	2340      	movs	r3, #64	; 0x40
 8003306:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003308:	2001      	movs	r0, #1
 800330a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800330e:	e7be      	b.n	800328e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8003310:	2001      	movs	r0, #1
 8003312:	e7bc      	b.n	800328e <HAL_DMA_Init+0x42>
 8003314:	f010803f 	.word	0xf010803f

08003318 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003318:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d003      	beq.n	800332a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003322:	2380      	movs	r3, #128	; 0x80
 8003324:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8003326:	2001      	movs	r0, #1
 8003328:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800332a:	2305      	movs	r3, #5
 800332c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8003330:	6802      	ldr	r2, [r0, #0]
 8003332:	6813      	ldr	r3, [r2, #0]
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800333a:	2000      	movs	r0, #0
}
 800333c:	4770      	bx	lr
	...

08003340 <HAL_DMA_IRQHandler>:
{
 8003340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003342:	b083      	sub	sp, #12
 8003344:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800334a:	4b72      	ldr	r3, [pc, #456]	; (8003514 <HAL_DMA_IRQHandler+0x1d4>)
 800334c:	681d      	ldr	r5, [r3, #0]
 800334e:	4b72      	ldr	r3, [pc, #456]	; (8003518 <HAL_DMA_IRQHandler+0x1d8>)
 8003350:	fba3 3505 	umull	r3, r5, r3, r5
 8003354:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003356:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8003358:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800335a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800335c:	2308      	movs	r3, #8
 800335e:	4093      	lsls	r3, r2
 8003360:	4233      	tst	r3, r6
 8003362:	d010      	beq.n	8003386 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003364:	6803      	ldr	r3, [r0, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	f012 0f04 	tst.w	r2, #4
 800336c:	d00b      	beq.n	8003386 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	f022 0204 	bic.w	r2, r2, #4
 8003374:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003376:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003378:	2308      	movs	r3, #8
 800337a:	4093      	lsls	r3, r2
 800337c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800337e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003386:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003388:	2301      	movs	r3, #1
 800338a:	4093      	lsls	r3, r2
 800338c:	4233      	tst	r3, r6
 800338e:	d009      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003390:	6822      	ldr	r2, [r4, #0]
 8003392:	6952      	ldr	r2, [r2, #20]
 8003394:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003398:	d004      	beq.n	80033a4 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800339a:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800339c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800339e:	f043 0302 	orr.w	r3, r3, #2
 80033a2:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033a4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80033a6:	2304      	movs	r3, #4
 80033a8:	4093      	lsls	r3, r2
 80033aa:	4233      	tst	r3, r6
 80033ac:	d009      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033ae:	6822      	ldr	r2, [r4, #0]
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	f012 0f02 	tst.w	r2, #2
 80033b6:	d004      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033b8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033bc:	f043 0304 	orr.w	r3, r3, #4
 80033c0:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80033c4:	2310      	movs	r3, #16
 80033c6:	4093      	lsls	r3, r2
 80033c8:	4233      	tst	r3, r6
 80033ca:	d024      	beq.n	8003416 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033cc:	6822      	ldr	r2, [r4, #0]
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	f012 0f08 	tst.w	r2, #8
 80033d4:	d01f      	beq.n	8003416 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033d6:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80033e0:	d00d      	beq.n	80033fe <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80033e8:	d104      	bne.n	80033f4 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80033ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033ec:	b19b      	cbz	r3, 8003416 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80033ee:	4620      	mov	r0, r4
 80033f0:	4798      	blx	r3
 80033f2:	e010      	b.n	8003416 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80033f6:	b173      	cbz	r3, 8003416 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80033f8:	4620      	mov	r0, r4
 80033fa:	4798      	blx	r3
 80033fc:	e00b      	b.n	8003416 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003404:	d103      	bne.n	800340e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	f022 0208 	bic.w	r2, r2, #8
 800340c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800340e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003410:	b10b      	cbz	r3, 8003416 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8003412:	4620      	mov	r0, r4
 8003414:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003416:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003418:	2320      	movs	r3, #32
 800341a:	4093      	lsls	r3, r2
 800341c:	4233      	tst	r3, r6
 800341e:	d055      	beq.n	80034cc <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003420:	6822      	ldr	r2, [r4, #0]
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	f012 0f10 	tst.w	r2, #16
 8003428:	d050      	beq.n	80034cc <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800342a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800342c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b05      	cmp	r3, #5
 8003434:	d00e      	beq.n	8003454 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800343e:	d033      	beq.n	80034a8 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003446:	d12a      	bne.n	800349e <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8003448:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800344a:	2b00      	cmp	r3, #0
 800344c:	d03e      	beq.n	80034cc <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 800344e:	4620      	mov	r0, r4
 8003450:	4798      	blx	r3
 8003452:	e03b      	b.n	80034cc <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003454:	6822      	ldr	r2, [r4, #0]
 8003456:	6813      	ldr	r3, [r2, #0]
 8003458:	f023 0316 	bic.w	r3, r3, #22
 800345c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800345e:	6822      	ldr	r2, [r4, #0]
 8003460:	6953      	ldr	r3, [r2, #20]
 8003462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003466:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800346a:	b1a3      	cbz	r3, 8003496 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800346c:	6822      	ldr	r2, [r4, #0]
 800346e:	6813      	ldr	r3, [r2, #0]
 8003470:	f023 0308 	bic.w	r3, r3, #8
 8003474:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003476:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003478:	233f      	movs	r3, #63	; 0x3f
 800347a:	4093      	lsls	r3, r2
 800347c:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800347e:	2300      	movs	r3, #0
 8003480:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8003484:	2301      	movs	r3, #1
 8003486:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800348a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800348c:	2b00      	cmp	r3, #0
 800348e:	d03f      	beq.n	8003510 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8003490:	4620      	mov	r0, r4
 8003492:	4798      	blx	r3
 8003494:	e03c      	b.n	8003510 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003496:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1e7      	bne.n	800346c <HAL_DMA_IRQHandler+0x12c>
 800349c:	e7eb      	b.n	8003476 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 800349e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80034a0:	b1a3      	cbz	r3, 80034cc <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80034a2:	4620      	mov	r0, r4
 80034a4:	4798      	blx	r3
 80034a6:	e011      	b.n	80034cc <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	f412 7f80 	tst.w	r2, #256	; 0x100
 80034ae:	d109      	bne.n	80034c4 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	f022 0210 	bic.w	r2, r2, #16
 80034b6:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80034b8:	2300      	movs	r3, #0
 80034ba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80034be:	2301      	movs	r3, #1
 80034c0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80034c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80034c6:	b10b      	cbz	r3, 80034cc <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80034c8:	4620      	mov	r0, r4
 80034ca:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80034ce:	b1fb      	cbz	r3, 8003510 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80034d2:	f013 0f01 	tst.w	r3, #1
 80034d6:	d017      	beq.n	8003508 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80034d8:	2305      	movs	r3, #5
 80034da:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80034de:	6822      	ldr	r2, [r4, #0]
 80034e0:	6813      	ldr	r3, [r2, #0]
 80034e2:	f023 0301 	bic.w	r3, r3, #1
 80034e6:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80034e8:	9b01      	ldr	r3, [sp, #4]
 80034ea:	3301      	adds	r3, #1
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	42ab      	cmp	r3, r5
 80034f0:	d804      	bhi.n	80034fc <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f013 0f01 	tst.w	r3, #1
 80034fa:	d1f5      	bne.n	80034e8 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 80034fc:	2300      	movs	r3, #0
 80034fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003502:	2301      	movs	r3, #1
 8003504:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8003508:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800350a:	b10b      	cbz	r3, 8003510 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 800350c:	4620      	mov	r0, r4
 800350e:	4798      	blx	r3
}
 8003510:	b003      	add	sp, #12
 8003512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003514:	20000090 	.word	0x20000090
 8003518:	1b4e81b5 	.word	0x1b4e81b5

0800351c <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800351c:	4b27      	ldr	r3, [pc, #156]	; (80035bc <FLASH_SetErrorCode+0xa0>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f013 0f10 	tst.w	r3, #16
 8003524:	d007      	beq.n	8003536 <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003526:	4a26      	ldr	r2, [pc, #152]	; (80035c0 <FLASH_SetErrorCode+0xa4>)
 8003528:	69d3      	ldr	r3, [r2, #28]
 800352a:	f043 0310 	orr.w	r3, r3, #16
 800352e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003530:	4b22      	ldr	r3, [pc, #136]	; (80035bc <FLASH_SetErrorCode+0xa0>)
 8003532:	2210      	movs	r2, #16
 8003534:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003536:	4b21      	ldr	r3, [pc, #132]	; (80035bc <FLASH_SetErrorCode+0xa0>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f013 0f20 	tst.w	r3, #32
 800353e:	d007      	beq.n	8003550 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003540:	4a1f      	ldr	r2, [pc, #124]	; (80035c0 <FLASH_SetErrorCode+0xa4>)
 8003542:	69d3      	ldr	r3, [r2, #28]
 8003544:	f043 0308 	orr.w	r3, r3, #8
 8003548:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800354a:	4b1c      	ldr	r3, [pc, #112]	; (80035bc <FLASH_SetErrorCode+0xa0>)
 800354c:	2220      	movs	r2, #32
 800354e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003550:	4b1a      	ldr	r3, [pc, #104]	; (80035bc <FLASH_SetErrorCode+0xa0>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003558:	d007      	beq.n	800356a <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800355a:	4a19      	ldr	r2, [pc, #100]	; (80035c0 <FLASH_SetErrorCode+0xa4>)
 800355c:	69d3      	ldr	r3, [r2, #28]
 800355e:	f043 0304 	orr.w	r3, r3, #4
 8003562:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003564:	4b15      	ldr	r3, [pc, #84]	; (80035bc <FLASH_SetErrorCode+0xa0>)
 8003566:	2240      	movs	r2, #64	; 0x40
 8003568:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800356a:	4b14      	ldr	r3, [pc, #80]	; (80035bc <FLASH_SetErrorCode+0xa0>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003572:	d007      	beq.n	8003584 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003574:	4a12      	ldr	r2, [pc, #72]	; (80035c0 <FLASH_SetErrorCode+0xa4>)
 8003576:	69d3      	ldr	r3, [r2, #28]
 8003578:	f043 0302 	orr.w	r3, r3, #2
 800357c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800357e:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <FLASH_SetErrorCode+0xa0>)
 8003580:	2280      	movs	r2, #128	; 0x80
 8003582:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003584:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <FLASH_SetErrorCode+0xa0>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f413 7f80 	tst.w	r3, #256	; 0x100
 800358c:	d008      	beq.n	80035a0 <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800358e:	4a0c      	ldr	r2, [pc, #48]	; (80035c0 <FLASH_SetErrorCode+0xa4>)
 8003590:	69d3      	ldr	r3, [r2, #28]
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003598:	4b08      	ldr	r3, [pc, #32]	; (80035bc <FLASH_SetErrorCode+0xa0>)
 800359a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800359e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <FLASH_SetErrorCode+0xa0>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f013 0f02 	tst.w	r3, #2
 80035a8:	d007      	beq.n	80035ba <FLASH_SetErrorCode+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80035aa:	4a05      	ldr	r2, [pc, #20]	; (80035c0 <FLASH_SetErrorCode+0xa4>)
 80035ac:	69d3      	ldr	r3, [r2, #28]
 80035ae:	f043 0320 	orr.w	r3, r3, #32
 80035b2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80035b4:	4b01      	ldr	r3, [pc, #4]	; (80035bc <FLASH_SetErrorCode+0xa0>)
 80035b6:	2202      	movs	r2, #2
 80035b8:	60da      	str	r2, [r3, #12]
  }
}
 80035ba:	4770      	bx	lr
 80035bc:	40023c00 	.word	0x40023c00
 80035c0:	20004458 	.word	0x20004458

080035c4 <HAL_FLASH_EndOfOperationCallback>:
}
 80035c4:	4770      	bx	lr

080035c6 <HAL_FLASH_OperationErrorCallback>:
}
 80035c6:	4770      	bx	lr

080035c8 <HAL_FLASH_IRQHandler>:
{
 80035c8:	b510      	push	{r4, lr}
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80035ca:	4b3a      	ldr	r3, [pc, #232]	; (80036b4 <HAL_FLASH_IRQHandler+0xec>)
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 80035d2:	d013      	beq.n	80035fc <HAL_FLASH_IRQHandler+0x34>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80035d4:	4b38      	ldr	r3, [pc, #224]	; (80036b8 <HAL_FLASH_IRQHandler+0xf0>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d03b      	beq.n	8003656 <HAL_FLASH_IRQHandler+0x8e>
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80035de:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <HAL_FLASH_IRQHandler+0xf0>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d03c      	beq.n	8003662 <HAL_FLASH_IRQHandler+0x9a>
      addresstmp = pFlash.Address;
 80035e8:	4b33      	ldr	r3, [pc, #204]	; (80036b8 <HAL_FLASH_IRQHandler+0xf0>)
 80035ea:	695c      	ldr	r4, [r3, #20]
    FLASH_SetErrorCode();
 80035ec:	f7ff ff96 	bl	800351c <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80035f0:	4620      	mov	r0, r4
 80035f2:	f7ff ffe8 	bl	80035c6 <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80035f6:	4b30      	ldr	r3, [pc, #192]	; (80036b8 <HAL_FLASH_IRQHandler+0xf0>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80035fc:	4b2d      	ldr	r3, [pc, #180]	; (80036b4 <HAL_FLASH_IRQHandler+0xec>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f013 0f01 	tst.w	r3, #1
 8003604:	d013      	beq.n	800362e <HAL_FLASH_IRQHandler+0x66>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003606:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <HAL_FLASH_IRQHandler+0xec>)
 8003608:	2201      	movs	r2, #1
 800360a:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800360c:	4b2a      	ldr	r3, [pc, #168]	; (80036b8 <HAL_FLASH_IRQHandler+0xf0>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	b2db      	uxtb	r3, r3
 8003612:	4293      	cmp	r3, r2
 8003614:	d028      	beq.n	8003668 <HAL_FLASH_IRQHandler+0xa0>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8003616:	4b28      	ldr	r3, [pc, #160]	; (80036b8 <HAL_FLASH_IRQHandler+0xf0>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d041      	beq.n	80036a4 <HAL_FLASH_IRQHandler+0xdc>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003620:	4b25      	ldr	r3, [pc, #148]	; (80036b8 <HAL_FLASH_IRQHandler+0xf0>)
 8003622:	6958      	ldr	r0, [r3, #20]
 8003624:	f7ff ffce 	bl	80035c4 <HAL_FLASH_EndOfOperationCallback>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003628:	4b23      	ldr	r3, [pc, #140]	; (80036b8 <HAL_FLASH_IRQHandler+0xf0>)
 800362a:	2200      	movs	r2, #0
 800362c:	701a      	strb	r2, [r3, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800362e:	4b22      	ldr	r3, [pc, #136]	; (80036b8 <HAL_FLASH_IRQHandler+0xf0>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	b97b      	cbnz	r3, 8003654 <HAL_FLASH_IRQHandler+0x8c>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8003634:	4b1f      	ldr	r3, [pc, #124]	; (80036b4 <HAL_FLASH_IRQHandler+0xec>)
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800363c:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003644:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800364c:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 800364e:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <HAL_FLASH_IRQHandler+0xf0>)
 8003650:	2200      	movs	r2, #0
 8003652:	761a      	strb	r2, [r3, #24]
}
 8003654:	bd10      	pop	{r4, pc}
      addresstmp = pFlash.Sector;
 8003656:	4b18      	ldr	r3, [pc, #96]	; (80036b8 <HAL_FLASH_IRQHandler+0xf0>)
 8003658:	68dc      	ldr	r4, [r3, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 800365a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800365e:	60da      	str	r2, [r3, #12]
 8003660:	e7c4      	b.n	80035ec <HAL_FLASH_IRQHandler+0x24>
      addresstmp = pFlash.Bank;
 8003662:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <HAL_FLASH_IRQHandler+0xf0>)
 8003664:	691c      	ldr	r4, [r3, #16]
 8003666:	e7c1      	b.n	80035ec <HAL_FLASH_IRQHandler+0x24>
      pFlash.NbSectorsToErase--;
 8003668:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <HAL_FLASH_IRQHandler+0xf0>)
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	3a01      	subs	r2, #1
 800366e:	605a      	str	r2, [r3, #4]
      if(pFlash.NbSectorsToErase != 0U)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	b15b      	cbz	r3, 800368c <HAL_FLASH_IRQHandler+0xc4>
        addresstmp = pFlash.Sector;
 8003674:	4c10      	ldr	r4, [pc, #64]	; (80036b8 <HAL_FLASH_IRQHandler+0xf0>)
 8003676:	68e0      	ldr	r0, [r4, #12]
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8003678:	f7ff ffa4 	bl	80035c4 <HAL_FLASH_EndOfOperationCallback>
        pFlash.Sector++;
 800367c:	68e3      	ldr	r3, [r4, #12]
 800367e:	3301      	adds	r3, #1
 8003680:	60e3      	str	r3, [r4, #12]
        addresstmp = pFlash.Sector;
 8003682:	68e0      	ldr	r0, [r4, #12]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8003684:	7a21      	ldrb	r1, [r4, #8]
 8003686:	f000 f819 	bl	80036bc <FLASH_Erase_Sector>
 800368a:	e7d0      	b.n	800362e <HAL_FLASH_IRQHandler+0x66>
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800368c:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <HAL_FLASH_IRQHandler+0xf0>)
 800368e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003692:	60dc      	str	r4, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
        FLASH_FlushCaches() ;
 8003698:	f000 f83c 	bl	8003714 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800369c:	4620      	mov	r0, r4
 800369e:	f7ff ff91 	bl	80035c4 <HAL_FLASH_EndOfOperationCallback>
 80036a2:	e7c4      	b.n	800362e <HAL_FLASH_IRQHandler+0x66>
        FLASH_FlushCaches() ;
 80036a4:	f000 f836 	bl	8003714 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80036a8:	4b03      	ldr	r3, [pc, #12]	; (80036b8 <HAL_FLASH_IRQHandler+0xf0>)
 80036aa:	6918      	ldr	r0, [r3, #16]
 80036ac:	f7ff ff8a 	bl	80035c4 <HAL_FLASH_EndOfOperationCallback>
 80036b0:	e7ba      	b.n	8003628 <HAL_FLASH_IRQHandler+0x60>
 80036b2:	bf00      	nop
 80036b4:	40023c00 	.word	0x40023c00
 80036b8:	20004458 	.word	0x20004458

080036bc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80036bc:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80036be:	b149      	cbz	r1, 80036d4 <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80036c0:	2901      	cmp	r1, #1
 80036c2:	d021      	beq.n	8003708 <FLASH_Erase_Sector+0x4c>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80036c4:	2902      	cmp	r1, #2
 80036c6:	d002      	beq.n	80036ce <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80036c8:	f44f 7440 	mov.w	r4, #768	; 0x300
 80036cc:	e003      	b.n	80036d6 <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_WORD;
 80036ce:	f44f 7400 	mov.w	r4, #512	; 0x200
 80036d2:	e000      	b.n	80036d6 <FLASH_Erase_Sector+0x1a>
     tmp_psize = FLASH_PSIZE_BYTE;
 80036d4:	2400      	movs	r4, #0
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80036d6:	4b0e      	ldr	r3, [pc, #56]	; (8003710 <FLASH_Erase_Sector+0x54>)
 80036d8:	6919      	ldr	r1, [r3, #16]
 80036da:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80036de:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	4322      	orrs	r2, r4
 80036e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80036ec:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 80036f4:	f040 0002 	orr.w	r0, r0, #2
 80036f8:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003700:	611a      	str	r2, [r3, #16]
}
 8003702:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003706:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003708:	f44f 7480 	mov.w	r4, #256	; 0x100
 800370c:	e7e3      	b.n	80036d6 <FLASH_Erase_Sector+0x1a>
 800370e:	bf00      	nop
 8003710:	40023c00 	.word	0x40023c00

08003714 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8003714:	4b16      	ldr	r3, [pc, #88]	; (8003770 <FLASH_FlushCaches+0x5c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f413 7f00 	tst.w	r3, #512	; 0x200
 800371c:	d010      	beq.n	8003740 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800371e:	4b14      	ldr	r3, [pc, #80]	; (8003770 <FLASH_FlushCaches+0x5c>)
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003726:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003736:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373e:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <FLASH_FlushCaches+0x5c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003748:	d010      	beq.n	800376c <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <FLASH_FlushCaches+0x5c>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003752:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003762:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800376a:	601a      	str	r2, [r3, #0]
  }
}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40023c00 	.word	0x40023c00

08003774 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003774:	2300      	movs	r3, #0
 8003776:	2b0f      	cmp	r3, #15
 8003778:	f200 80c5 	bhi.w	8003906 <HAL_GPIO_Init+0x192>
{
 800377c:	b4f0      	push	{r4, r5, r6, r7}
 800377e:	b082      	sub	sp, #8
 8003780:	e039      	b.n	80037f6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003782:	2204      	movs	r2, #4
 8003784:	e000      	b.n	8003788 <HAL_GPIO_Init+0x14>
 8003786:	2200      	movs	r2, #0
 8003788:	40b2      	lsls	r2, r6
 800378a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800378c:	3402      	adds	r4, #2
 800378e:	4e5e      	ldr	r6, [pc, #376]	; (8003908 <HAL_GPIO_Init+0x194>)
 8003790:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003794:	4a5d      	ldr	r2, [pc, #372]	; (800390c <HAL_GPIO_Init+0x198>)
 8003796:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003798:	43ea      	mvns	r2, r5
 800379a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800379e:	684f      	ldr	r7, [r1, #4]
 80037a0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80037a4:	d001      	beq.n	80037aa <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80037a6:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80037aa:	4c58      	ldr	r4, [pc, #352]	; (800390c <HAL_GPIO_Init+0x198>)
 80037ac:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80037ae:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80037b0:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037b4:	684f      	ldr	r7, [r1, #4]
 80037b6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80037ba:	d001      	beq.n	80037c0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80037bc:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80037c0:	4c52      	ldr	r4, [pc, #328]	; (800390c <HAL_GPIO_Init+0x198>)
 80037c2:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037c4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80037c6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037ca:	684f      	ldr	r7, [r1, #4]
 80037cc:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80037d0:	d001      	beq.n	80037d6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80037d2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80037d6:	4c4d      	ldr	r4, [pc, #308]	; (800390c <HAL_GPIO_Init+0x198>)
 80037d8:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80037da:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80037dc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037de:	684e      	ldr	r6, [r1, #4]
 80037e0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80037e4:	d001      	beq.n	80037ea <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80037e6:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80037ea:	4c48      	ldr	r4, [pc, #288]	; (800390c <HAL_GPIO_Init+0x198>)
 80037ec:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ee:	3301      	adds	r3, #1
 80037f0:	2b0f      	cmp	r3, #15
 80037f2:	f200 8085 	bhi.w	8003900 <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 80037f6:	2201      	movs	r2, #1
 80037f8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037fa:	680c      	ldr	r4, [r1, #0]
 80037fc:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8003800:	42aa      	cmp	r2, r5
 8003802:	d1f4      	bne.n	80037ee <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003804:	684c      	ldr	r4, [r1, #4]
 8003806:	2c02      	cmp	r4, #2
 8003808:	d001      	beq.n	800380e <HAL_GPIO_Init+0x9a>
 800380a:	2c12      	cmp	r4, #18
 800380c:	d110      	bne.n	8003830 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 800380e:	08de      	lsrs	r6, r3, #3
 8003810:	3608      	adds	r6, #8
 8003812:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003816:	f003 0407 	and.w	r4, r3, #7
 800381a:	00a7      	lsls	r7, r4, #2
 800381c:	240f      	movs	r4, #15
 800381e:	40bc      	lsls	r4, r7
 8003820:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003824:	690c      	ldr	r4, [r1, #16]
 8003826:	40bc      	lsls	r4, r7
 8003828:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 800382c:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8003830:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003832:	005f      	lsls	r7, r3, #1
 8003834:	2603      	movs	r6, #3
 8003836:	40be      	lsls	r6, r7
 8003838:	43f6      	mvns	r6, r6
 800383a:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800383e:	684c      	ldr	r4, [r1, #4]
 8003840:	f004 0403 	and.w	r4, r4, #3
 8003844:	40bc      	lsls	r4, r7
 8003846:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800384a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800384c:	684c      	ldr	r4, [r1, #4]
 800384e:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8003852:	f1bc 0f01 	cmp.w	ip, #1
 8003856:	d903      	bls.n	8003860 <HAL_GPIO_Init+0xec>
 8003858:	2c11      	cmp	r4, #17
 800385a:	d001      	beq.n	8003860 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800385c:	2c12      	cmp	r4, #18
 800385e:	d110      	bne.n	8003882 <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8003860:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003862:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003866:	68cc      	ldr	r4, [r1, #12]
 8003868:	40bc      	lsls	r4, r7
 800386a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 800386e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003870:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003872:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003876:	684c      	ldr	r4, [r1, #4]
 8003878:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800387c:	409c      	lsls	r4, r3
 800387e:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8003880:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8003882:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003884:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003886:	688a      	ldr	r2, [r1, #8]
 8003888:	40ba      	lsls	r2, r7
 800388a:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 800388c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800388e:	684a      	ldr	r2, [r1, #4]
 8003890:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8003894:	d0ab      	beq.n	80037ee <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003896:	2200      	movs	r2, #0
 8003898:	9201      	str	r2, [sp, #4]
 800389a:	4a1d      	ldr	r2, [pc, #116]	; (8003910 <HAL_GPIO_Init+0x19c>)
 800389c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800389e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80038a2:	6454      	str	r4, [r2, #68]	; 0x44
 80038a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80038a6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80038aa:	9201      	str	r2, [sp, #4]
 80038ac:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80038ae:	089c      	lsrs	r4, r3, #2
 80038b0:	1ca6      	adds	r6, r4, #2
 80038b2:	4a15      	ldr	r2, [pc, #84]	; (8003908 <HAL_GPIO_Init+0x194>)
 80038b4:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038b8:	f003 0203 	and.w	r2, r3, #3
 80038bc:	0096      	lsls	r6, r2, #2
 80038be:	220f      	movs	r2, #15
 80038c0:	40b2      	lsls	r2, r6
 80038c2:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038c6:	4a13      	ldr	r2, [pc, #76]	; (8003914 <HAL_GPIO_Init+0x1a0>)
 80038c8:	4290      	cmp	r0, r2
 80038ca:	f43f af5c 	beq.w	8003786 <HAL_GPIO_Init+0x12>
 80038ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038d2:	4290      	cmp	r0, r2
 80038d4:	d00e      	beq.n	80038f4 <HAL_GPIO_Init+0x180>
 80038d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038da:	4290      	cmp	r0, r2
 80038dc:	d00c      	beq.n	80038f8 <HAL_GPIO_Init+0x184>
 80038de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038e2:	4290      	cmp	r0, r2
 80038e4:	d00a      	beq.n	80038fc <HAL_GPIO_Init+0x188>
 80038e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038ea:	4290      	cmp	r0, r2
 80038ec:	f43f af49 	beq.w	8003782 <HAL_GPIO_Init+0xe>
 80038f0:	2207      	movs	r2, #7
 80038f2:	e749      	b.n	8003788 <HAL_GPIO_Init+0x14>
 80038f4:	2201      	movs	r2, #1
 80038f6:	e747      	b.n	8003788 <HAL_GPIO_Init+0x14>
 80038f8:	2202      	movs	r2, #2
 80038fa:	e745      	b.n	8003788 <HAL_GPIO_Init+0x14>
 80038fc:	2203      	movs	r2, #3
 80038fe:	e743      	b.n	8003788 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8003900:	b002      	add	sp, #8
 8003902:	bcf0      	pop	{r4, r5, r6, r7}
 8003904:	4770      	bx	lr
 8003906:	4770      	bx	lr
 8003908:	40013800 	.word	0x40013800
 800390c:	40013c00 	.word	0x40013c00
 8003910:	40023800 	.word	0x40023800
 8003914:	40020000 	.word	0x40020000

08003918 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003918:	b912      	cbnz	r2, 8003920 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800391a:	0409      	lsls	r1, r1, #16
 800391c:	6181      	str	r1, [r0, #24]
  }
}
 800391e:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8003920:	6181      	str	r1, [r0, #24]
 8003922:	4770      	bx	lr

08003924 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003924:	6943      	ldr	r3, [r0, #20]
 8003926:	ea31 0303 	bics.w	r3, r1, r3
 800392a:	d001      	beq.n	8003930 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800392c:	6181      	str	r1, [r0, #24]
  }
}
 800392e:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003930:	0409      	lsls	r1, r1, #16
 8003932:	6181      	str	r1, [r0, #24]
 8003934:	4770      	bx	lr

08003936 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003936:	4770      	bx	lr

08003938 <HAL_GPIO_EXTI_IRQHandler>:
{
 8003938:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800393a:	4b05      	ldr	r3, [pc, #20]	; (8003950 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	4203      	tst	r3, r0
 8003940:	d100      	bne.n	8003944 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8003942:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003944:	4b02      	ldr	r3, [pc, #8]	; (8003950 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003946:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003948:	f7ff fff5 	bl	8003936 <HAL_GPIO_EXTI_Callback>
}
 800394c:	e7f9      	b.n	8003942 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800394e:	bf00      	nop
 8003950:	40013c00 	.word	0x40013c00

08003954 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003954:	6803      	ldr	r3, [r0, #0]
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800395c:	d011      	beq.n	8003982 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800395e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003962:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003964:	2300      	movs	r3, #0
 8003966:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003968:	2220      	movs	r2, #32
 800396a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003972:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003974:	f042 0204 	orr.w	r2, r2, #4
 8003978:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 800397e:	2001      	movs	r0, #1
 8003980:	4770      	bx	lr
  }
  return HAL_OK;
 8003982:	2000      	movs	r0, #0
}
 8003984:	4770      	bx	lr

08003986 <I2C_WaitOnFlagUntilTimeout>:
{
 8003986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003988:	4606      	mov	r6, r0
 800398a:	460c      	mov	r4, r1
 800398c:	4617      	mov	r7, r2
 800398e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003990:	e022      	b.n	80039d8 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003992:	f7ff fb75 	bl	8003080 <HAL_GetTick>
 8003996:	9b06      	ldr	r3, [sp, #24]
 8003998:	1ac0      	subs	r0, r0, r3
 800399a:	42a8      	cmp	r0, r5
 800399c:	d800      	bhi.n	80039a0 <I2C_WaitOnFlagUntilTimeout+0x1a>
 800399e:	b9dd      	cbnz	r5, 80039d8 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039a4:	2220      	movs	r2, #32
 80039a6:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039aa:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039ae:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80039b0:	f042 0220 	orr.w	r2, r2, #32
 80039b4:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80039b6:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 80039ba:	2001      	movs	r0, #1
 80039bc:	e01a      	b.n	80039f4 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039be:	6833      	ldr	r3, [r6, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	ea24 0303 	bic.w	r3, r4, r3
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	fab3 f383 	clz	r3, r3
 80039cc:	095b      	lsrs	r3, r3, #5
 80039ce:	429f      	cmp	r7, r3
 80039d0:	d10f      	bne.n	80039f2 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80039d2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80039d6:	d1dc      	bne.n	8003992 <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039d8:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d0ee      	beq.n	80039be <I2C_WaitOnFlagUntilTimeout+0x38>
 80039e0:	6833      	ldr	r3, [r6, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	ea24 0303 	bic.w	r3, r4, r3
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	fab3 f383 	clz	r3, r3
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	e7ed      	b.n	80039ce <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 80039f2:	2000      	movs	r0, #0
}
 80039f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80039f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f8:	4604      	mov	r4, r0
 80039fa:	460d      	mov	r5, r1
 80039fc:	4616      	mov	r6, r2
 80039fe:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a00:	e03c      	b.n	8003a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a08:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a0a:	6823      	ldr	r3, [r4, #0]
 8003a0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a10:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a12:	2300      	movs	r3, #0
 8003a14:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a16:	2220      	movs	r2, #32
 8003a18:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a1c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a20:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a22:	f042 0204 	orr.w	r2, r2, #4
 8003a26:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003a28:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	e033      	b.n	8003a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a30:	f7ff fb26 	bl	8003080 <HAL_GetTick>
 8003a34:	1bc0      	subs	r0, r0, r7
 8003a36:	42b0      	cmp	r0, r6
 8003a38:	d800      	bhi.n	8003a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8003a3a:	b9fe      	cbnz	r6, 8003a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a40:	2220      	movs	r2, #32
 8003a42:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a46:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a4a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a4c:	f042 0220 	orr.w	r2, r2, #32
 8003a50:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003a52:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003a56:	2001      	movs	r0, #1
 8003a58:	e01e      	b.n	8003a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a5a:	6823      	ldr	r3, [r4, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	ea25 0303 	bic.w	r3, r5, r3
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3300      	adds	r3, #0
 8003a66:	bf18      	it	ne
 8003a68:	2301      	movne	r3, #1
 8003a6a:	b1a3      	cbz	r3, 8003a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003a74:	d1c5      	bne.n	8003a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8003a76:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8003a7a:	d1d9      	bne.n	8003a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a7c:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d0ea      	beq.n	8003a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	ea25 0303 	bic.w	r3, r5, r3
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3300      	adds	r3, #0
 8003a90:	bf18      	it	ne
 8003a92:	2301      	movne	r3, #1
 8003a94:	e7e9      	b.n	8003a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8003a96:	2000      	movs	r0, #0
}
 8003a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a9c <I2C_MasterRequestWrite>:
{
 8003a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	460f      	mov	r7, r1
 8003aa4:	4615      	mov	r5, r2
 8003aa6:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003aa8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d00d      	beq.n	8003aca <I2C_MasterRequestWrite+0x2e>
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d00b      	beq.n	8003aca <I2C_MasterRequestWrite+0x2e>
 8003ab2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ab6:	d008      	beq.n	8003aca <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ab8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003aba:	2b12      	cmp	r3, #18
 8003abc:	d10a      	bne.n	8003ad4 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003abe:	6802      	ldr	r2, [r0, #0]
 8003ac0:	6813      	ldr	r3, [r2, #0]
 8003ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	e004      	b.n	8003ad4 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aca:	6822      	ldr	r2, [r4, #0]
 8003acc:	6813      	ldr	r3, [r2, #0]
 8003ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad2:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad4:	9600      	str	r6, [sp, #0]
 8003ad6:	462b      	mov	r3, r5
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f7ff ff51 	bl	8003986 <I2C_WaitOnFlagUntilTimeout>
 8003ae4:	bb18      	cbnz	r0, 8003b2e <I2C_MasterRequestWrite+0x92>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ae6:	6923      	ldr	r3, [r4, #16]
 8003ae8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aec:	d10d      	bne.n	8003b0a <I2C_MasterRequestWrite+0x6e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8003af4:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003af6:	4633      	mov	r3, r6
 8003af8:	462a      	mov	r2, r5
 8003afa:	4910      	ldr	r1, [pc, #64]	; (8003b3c <I2C_MasterRequestWrite+0xa0>)
 8003afc:	4620      	mov	r0, r4
 8003afe:	f7ff ff7a 	bl	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	b1a0      	cbz	r0, 8003b30 <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e012      	b.n	8003b30 <I2C_MasterRequestWrite+0x94>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b0a:	11fb      	asrs	r3, r7, #7
 8003b0c:	6822      	ldr	r2, [r4, #0]
 8003b0e:	f003 0306 	and.w	r3, r3, #6
 8003b12:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003b16:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b18:	4633      	mov	r3, r6
 8003b1a:	462a      	mov	r2, r5
 8003b1c:	4908      	ldr	r1, [pc, #32]	; (8003b40 <I2C_MasterRequestWrite+0xa4>)
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f7ff ff69 	bl	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b24:	b938      	cbnz	r0, 8003b36 <I2C_MasterRequestWrite+0x9a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	b2ff      	uxtb	r7, r7
 8003b2a:	611f      	str	r7, [r3, #16]
 8003b2c:	e7e3      	b.n	8003af6 <I2C_MasterRequestWrite+0x5a>
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	b003      	add	sp, #12
 8003b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e7fa      	b.n	8003b30 <I2C_MasterRequestWrite+0x94>
 8003b3a:	bf00      	nop
 8003b3c:	00010002 	.word	0x00010002
 8003b40:	00010008 	.word	0x00010008

08003b44 <I2C_MasterRequestRead>:
{
 8003b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b48:	b084      	sub	sp, #16
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	460d      	mov	r5, r1
 8003b4e:	4616      	mov	r6, r2
 8003b50:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b52:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b54:	6801      	ldr	r1, [r0, #0]
 8003b56:	680b      	ldr	r3, [r1, #0]
 8003b58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b5c:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b5e:	2a08      	cmp	r2, #8
 8003b60:	d00d      	beq.n	8003b7e <I2C_MasterRequestRead+0x3a>
 8003b62:	2a01      	cmp	r2, #1
 8003b64:	d00b      	beq.n	8003b7e <I2C_MasterRequestRead+0x3a>
 8003b66:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003b6a:	d008      	beq.n	8003b7e <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003b6c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003b6e:	2b11      	cmp	r3, #17
 8003b70:	d10a      	bne.n	8003b88 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b72:	6802      	ldr	r2, [r0, #0]
 8003b74:	6813      	ldr	r3, [r2, #0]
 8003b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	e004      	b.n	8003b88 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b7e:	6822      	ldr	r2, [r4, #0]
 8003b80:	6813      	ldr	r3, [r2, #0]
 8003b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b86:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b88:	9700      	str	r7, [sp, #0]
 8003b8a:	4633      	mov	r3, r6
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b92:	4620      	mov	r0, r4
 8003b94:	f7ff fef7 	bl	8003986 <I2C_WaitOnFlagUntilTimeout>
 8003b98:	2800      	cmp	r0, #0
 8003b9a:	d149      	bne.n	8003c30 <I2C_MasterRequestRead+0xec>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b9c:	6923      	ldr	r3, [r4, #16]
 8003b9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba2:	d10f      	bne.n	8003bc4 <I2C_MasterRequestRead+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	f045 0501 	orr.w	r5, r5, #1
 8003baa:	b2ed      	uxtb	r5, r5
 8003bac:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bae:	463b      	mov	r3, r7
 8003bb0:	4632      	mov	r2, r6
 8003bb2:	4923      	ldr	r1, [pc, #140]	; (8003c40 <I2C_MasterRequestRead+0xfc>)
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f7ff ff1e 	bl	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	d038      	beq.n	8003c32 <I2C_MasterRequestRead+0xee>
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e036      	b.n	8003c32 <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bc4:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8003bc8:	f008 0806 	and.w	r8, r8, #6
 8003bcc:	6823      	ldr	r3, [r4, #0]
 8003bce:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8003bd2:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003bd4:	463b      	mov	r3, r7
 8003bd6:	4632      	mov	r2, r6
 8003bd8:	491a      	ldr	r1, [pc, #104]	; (8003c44 <I2C_MasterRequestRead+0x100>)
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f7ff ff0b 	bl	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003be0:	b108      	cbz	r0, 8003be6 <I2C_MasterRequestRead+0xa2>
      return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e025      	b.n	8003c32 <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	b2ed      	uxtb	r5, r5
 8003bea:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bec:	463b      	mov	r3, r7
 8003bee:	4632      	mov	r2, r6
 8003bf0:	4913      	ldr	r1, [pc, #76]	; (8003c40 <I2C_MasterRequestRead+0xfc>)
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f7ff feff 	bl	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bf8:	b108      	cbz	r0, 8003bfe <I2C_MasterRequestRead+0xba>
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e019      	b.n	8003c32 <I2C_MasterRequestRead+0xee>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfe:	2200      	movs	r2, #0
 8003c00:	9203      	str	r2, [sp, #12]
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	6959      	ldr	r1, [r3, #20]
 8003c06:	9103      	str	r1, [sp, #12]
 8003c08:	6999      	ldr	r1, [r3, #24]
 8003c0a:	9103      	str	r1, [sp, #12]
 8003c0c:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c0e:	6819      	ldr	r1, [r3, #0]
 8003c10:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003c14:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c16:	9700      	str	r7, [sp, #0]
 8003c18:	4633      	mov	r3, r6
 8003c1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f7ff feb1 	bl	8003986 <I2C_WaitOnFlagUntilTimeout>
 8003c24:	b948      	cbnz	r0, 8003c3a <I2C_MasterRequestRead+0xf6>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003c26:	6822      	ldr	r2, [r4, #0]
 8003c28:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8003c2c:	6113      	str	r3, [r2, #16]
 8003c2e:	e7be      	b.n	8003bae <I2C_MasterRequestRead+0x6a>
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	b004      	add	sp, #16
 8003c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e7f9      	b.n	8003c32 <I2C_MasterRequestRead+0xee>
 8003c3e:	bf00      	nop
 8003c40:	00010002 	.word	0x00010002
 8003c44:	00010008 	.word	0x00010008

08003c48 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003c48:	b570      	push	{r4, r5, r6, lr}
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	460d      	mov	r5, r1
 8003c4e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003c58:	d11c      	bne.n	8003c94 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f7ff fe7a 	bl	8003954 <I2C_IsAcknowledgeFailed>
 8003c60:	b9d0      	cbnz	r0, 8003c98 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003c62:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003c66:	d0f3      	beq.n	8003c50 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c68:	f7ff fa0a 	bl	8003080 <HAL_GetTick>
 8003c6c:	1b80      	subs	r0, r0, r6
 8003c6e:	42a8      	cmp	r0, r5
 8003c70:	d801      	bhi.n	8003c76 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003c72:	2d00      	cmp	r5, #0
 8003c74:	d1ec      	bne.n	8003c50 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c76:	2300      	movs	r3, #0
 8003c78:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c80:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c84:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003c86:	f042 0220 	orr.w	r2, r2, #32
 8003c8a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003c8c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003c90:	2001      	movs	r0, #1
 8003c92:	e000      	b.n	8003c96 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8003c94:	2000      	movs	r0, #0
}
 8003c96:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003c98:	2001      	movs	r0, #1
 8003c9a:	e7fc      	b.n	8003c96 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08003c9c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	460d      	mov	r5, r1
 8003ca2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f013 0f04 	tst.w	r3, #4
 8003cac:	d11c      	bne.n	8003ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f7ff fe50 	bl	8003954 <I2C_IsAcknowledgeFailed>
 8003cb4:	b9d0      	cbnz	r0, 8003cec <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003cb6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003cba:	d0f3      	beq.n	8003ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cbc:	f7ff f9e0 	bl	8003080 <HAL_GetTick>
 8003cc0:	1b80      	subs	r0, r0, r6
 8003cc2:	42a8      	cmp	r0, r5
 8003cc4:	d801      	bhi.n	8003cca <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003cc6:	2d00      	cmp	r5, #0
 8003cc8:	d1ec      	bne.n	8003ca4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cd8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003cda:	f042 0220 	orr.w	r2, r2, #32
 8003cde:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003ce0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	e000      	b.n	8003cea <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8003ce8:	2000      	movs	r0, #0
}
 8003cea:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003cec:	2001      	movs	r0, #1
 8003cee:	e7fc      	b.n	8003cea <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08003cf0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003cf0:	b570      	push	{r4, r5, r6, lr}
 8003cf2:	4605      	mov	r5, r0
 8003cf4:	460c      	mov	r4, r1
 8003cf6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cf8:	682b      	ldr	r3, [r5, #0]
 8003cfa:	695a      	ldr	r2, [r3, #20]
 8003cfc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003d00:	d129      	bne.n	8003d56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	f012 0f10 	tst.w	r2, #16
 8003d08:	d115      	bne.n	8003d36 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d0a:	f7ff f9b9 	bl	8003080 <HAL_GetTick>
 8003d0e:	1b80      	subs	r0, r0, r6
 8003d10:	42a0      	cmp	r0, r4
 8003d12:	d801      	bhi.n	8003d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8003d14:	2c00      	cmp	r4, #0
 8003d16:	d1ef      	bne.n	8003cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d22:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d26:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003d28:	f042 0220 	orr.w	r2, r2, #32
 8003d2c:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003d2e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003d32:	2001      	movs	r0, #1
}
 8003d34:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d36:	f06f 0210 	mvn.w	r2, #16
 8003d3a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d40:	2220      	movs	r2, #32
 8003d42:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d46:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d4a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003d4c:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003d4e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003d52:	2001      	movs	r0, #1
 8003d54:	e7ee      	b.n	8003d34 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8003d56:	2000      	movs	r0, #0
 8003d58:	e7ec      	b.n	8003d34 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08003d5c <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	f000 80be 	beq.w	8003ede <HAL_I2C_Init+0x182>
{
 8003d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d64:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d66:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d06b      	beq.n	8003e46 <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d6e:	2324      	movs	r3, #36	; 0x24
 8003d70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003d74:	6822      	ldr	r2, [r4, #0]
 8003d76:	6813      	ldr	r3, [r2, #0]
 8003d78:	f023 0301 	bic.w	r3, r3, #1
 8003d7c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d7e:	f000 fe8b 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d82:	6862      	ldr	r2, [r4, #4]
 8003d84:	4b58      	ldr	r3, [pc, #352]	; (8003ee8 <HAL_I2C_Init+0x18c>)
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d862      	bhi.n	8003e50 <HAL_I2C_Init+0xf4>
 8003d8a:	4b58      	ldr	r3, [pc, #352]	; (8003eec <HAL_I2C_Init+0x190>)
 8003d8c:	4298      	cmp	r0, r3
 8003d8e:	bf8c      	ite	hi
 8003d90:	2300      	movhi	r3, #0
 8003d92:	2301      	movls	r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f040 80a4 	bne.w	8003ee2 <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 8003d9a:	4b55      	ldr	r3, [pc, #340]	; (8003ef0 <HAL_I2C_Init+0x194>)
 8003d9c:	fba3 2300 	umull	r2, r3, r3, r0
 8003da0:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003da2:	6821      	ldr	r1, [r4, #0]
 8003da4:	684a      	ldr	r2, [r1, #4]
 8003da6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003daa:	431a      	orrs	r2, r3
 8003dac:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dae:	6825      	ldr	r5, [r4, #0]
 8003db0:	6a2a      	ldr	r2, [r5, #32]
 8003db2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003db6:	6866      	ldr	r6, [r4, #4]
 8003db8:	494b      	ldr	r1, [pc, #300]	; (8003ee8 <HAL_I2C_Init+0x18c>)
 8003dba:	428e      	cmp	r6, r1
 8003dbc:	d84e      	bhi.n	8003e5c <HAL_I2C_Init+0x100>
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003dc4:	6825      	ldr	r5, [r4, #0]
 8003dc6:	69e9      	ldr	r1, [r5, #28]
 8003dc8:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003dcc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003dd0:	6863      	ldr	r3, [r4, #4]
 8003dd2:	4a45      	ldr	r2, [pc, #276]	; (8003ee8 <HAL_I2C_Init+0x18c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d84b      	bhi.n	8003e70 <HAL_I2C_Init+0x114>
 8003dd8:	3801      	subs	r0, #1
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de0:	3301      	adds	r3, #1
 8003de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	bf38      	it	cc
 8003dea:	2304      	movcc	r3, #4
 8003dec:	430b      	orrs	r3, r1
 8003dee:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003df0:	6821      	ldr	r1, [r4, #0]
 8003df2:	680b      	ldr	r3, [r1, #0]
 8003df4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003df8:	69e2      	ldr	r2, [r4, #28]
 8003dfa:	6a20      	ldr	r0, [r4, #32]
 8003dfc:	4302      	orrs	r2, r0
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e02:	6821      	ldr	r1, [r4, #0]
 8003e04:	688b      	ldr	r3, [r1, #8]
 8003e06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e0e:	6922      	ldr	r2, [r4, #16]
 8003e10:	68e0      	ldr	r0, [r4, #12]
 8003e12:	4302      	orrs	r2, r0
 8003e14:	4313      	orrs	r3, r2
 8003e16:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e18:	6821      	ldr	r1, [r4, #0]
 8003e1a:	68cb      	ldr	r3, [r1, #12]
 8003e1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e20:	6962      	ldr	r2, [r4, #20]
 8003e22:	69a0      	ldr	r0, [r4, #24]
 8003e24:	4302      	orrs	r2, r0
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003e2a:	6822      	ldr	r2, [r4, #0]
 8003e2c:	6813      	ldr	r3, [r2, #0]
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e34:	2000      	movs	r0, #0
 8003e36:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e38:	2320      	movs	r3, #32
 8003e3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e3e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e40:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8003e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003e46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003e4a:	f003 ff57 	bl	8007cfc <HAL_I2C_MspInit>
 8003e4e:	e78e      	b.n	8003d6e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e50:	4b28      	ldr	r3, [pc, #160]	; (8003ef4 <HAL_I2C_Init+0x198>)
 8003e52:	4298      	cmp	r0, r3
 8003e54:	bf8c      	ite	hi
 8003e56:	2300      	movhi	r3, #0
 8003e58:	2301      	movls	r3, #1
 8003e5a:	e79b      	b.n	8003d94 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e5c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	4924      	ldr	r1, [pc, #144]	; (8003ef8 <HAL_I2C_Init+0x19c>)
 8003e66:	fba1 1303 	umull	r1, r3, r1, r3
 8003e6a:	099b      	lsrs	r3, r3, #6
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	e7a7      	b.n	8003dc0 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e70:	68a2      	ldr	r2, [r4, #8]
 8003e72:	b9ba      	cbnz	r2, 8003ea4 <HAL_I2C_Init+0x148>
 8003e74:	1e46      	subs	r6, r0, #1
 8003e76:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8003e7a:	fbb6 f6f7 	udiv	r6, r6, r7
 8003e7e:	3601      	adds	r6, #1
 8003e80:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003e84:	fab6 f686 	clz	r6, r6
 8003e88:	0976      	lsrs	r6, r6, #5
 8003e8a:	bb36      	cbnz	r6, 8003eda <HAL_I2C_Init+0x17e>
 8003e8c:	b9c2      	cbnz	r2, 8003ec0 <HAL_I2C_Init+0x164>
 8003e8e:	3801      	subs	r0, #1
 8003e90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003e94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e98:	3301      	adds	r3, #1
 8003e9a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8003e9e:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8003ea2:	e7a3      	b.n	8003dec <HAL_I2C_Init+0x90>
 8003ea4:	1e46      	subs	r6, r0, #1
 8003ea6:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8003eaa:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8003eae:	fbb6 f6f7 	udiv	r6, r6, r7
 8003eb2:	3601      	adds	r6, #1
 8003eb4:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003eb8:	fab6 f686 	clz	r6, r6
 8003ebc:	0976      	lsrs	r6, r6, #5
 8003ebe:	e7e4      	b.n	8003e8a <HAL_I2C_Init+0x12e>
 8003ec0:	3801      	subs	r0, #1
 8003ec2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003ec6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003eca:	fbb0 f2f3 	udiv	r2, r0, r3
 8003ece:	3201      	adds	r2, #1
 8003ed0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003ed4:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8003ed8:	e788      	b.n	8003dec <HAL_I2C_Init+0x90>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e786      	b.n	8003dec <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8003ede:	2001      	movs	r0, #1
}
 8003ee0:	4770      	bx	lr
    return HAL_ERROR;
 8003ee2:	2001      	movs	r0, #1
 8003ee4:	e7ae      	b.n	8003e44 <HAL_I2C_Init+0xe8>
 8003ee6:	bf00      	nop
 8003ee8:	000186a0 	.word	0x000186a0
 8003eec:	001e847f 	.word	0x001e847f
 8003ef0:	431bde83 	.word	0x431bde83
 8003ef4:	003d08ff 	.word	0x003d08ff
 8003ef8:	10624dd3 	.word	0x10624dd3

08003efc <HAL_I2C_Master_Transmit>:
{
 8003efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	4604      	mov	r4, r0
 8003f04:	460e      	mov	r6, r1
 8003f06:	4690      	mov	r8, r2
 8003f08:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8003f0a:	f7ff f8b9 	bl	8003080 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f0e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b20      	cmp	r3, #32
 8003f16:	d004      	beq.n	8003f22 <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8003f18:	2602      	movs	r6, #2
}
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	b004      	add	sp, #16
 8003f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f22:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f24:	9000      	str	r0, [sp, #0]
 8003f26:	2319      	movs	r3, #25
 8003f28:	2201      	movs	r2, #1
 8003f2a:	494f      	ldr	r1, [pc, #316]	; (8004068 <HAL_I2C_Master_Transmit+0x16c>)
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	f7ff fd2a 	bl	8003986 <I2C_WaitOnFlagUntilTimeout>
 8003f32:	2800      	cmp	r0, #0
 8003f34:	f040 8091 	bne.w	800405a <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 8003f38:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	f000 808e 	beq.w	800405e <HAL_I2C_Master_Transmit+0x162>
 8003f42:	2301      	movs	r3, #1
 8003f44:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	f012 0f01 	tst.w	r2, #1
 8003f50:	d103      	bne.n	8003f5a <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	f042 0201 	orr.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f5a:	6822      	ldr	r2, [r4, #0]
 8003f5c:	6813      	ldr	r3, [r2, #0]
 8003f5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f62:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f64:	2321      	movs	r3, #33	; 0x21
 8003f66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f6a:	2310      	movs	r3, #16
 8003f6c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f70:	2300      	movs	r3, #0
 8003f72:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003f74:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f78:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f7c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f7e:	4b3b      	ldr	r3, [pc, #236]	; (800406c <HAL_I2C_Master_Transmit+0x170>)
 8003f80:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f82:	462b      	mov	r3, r5
 8003f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f86:	4631      	mov	r1, r6
 8003f88:	4620      	mov	r0, r4
 8003f8a:	f7ff fd87 	bl	8003a9c <I2C_MasterRequestWrite>
 8003f8e:	4606      	mov	r6, r0
 8003f90:	2800      	cmp	r0, #0
 8003f92:	d166      	bne.n	8004062 <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f94:	2300      	movs	r3, #0
 8003f96:	9303      	str	r3, [sp, #12]
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	9203      	str	r2, [sp, #12]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	9303      	str	r3, [sp, #12]
 8003fa2:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8003fa4:	e012      	b.n	8003fcc <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d001      	beq.n	8003fb0 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 8003fac:	2601      	movs	r6, #1
 8003fae:	e7b4      	b.n	8003f1a <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb0:	6822      	ldr	r2, [r4, #0]
 8003fb2:	6813      	ldr	r3, [r2, #0]
 8003fb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fb8:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003fba:	2601      	movs	r6, #1
 8003fbc:	e7ad      	b.n	8003f1a <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fbe:	462a      	mov	r2, r5
 8003fc0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	f7ff fe6a 	bl	8003c9c <I2C_WaitOnBTFFlagUntilTimeout>
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	d12c      	bne.n	8004026 <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 8003fcc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d035      	beq.n	800403e <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd2:	462a      	mov	r2, r5
 8003fd4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	f7ff fe36 	bl	8003c48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	d1e2      	bne.n	8003fa6 <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fe0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	7812      	ldrb	r2, [r2, #0]
 8003fe6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003fe8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003fea:	1c4b      	adds	r3, r1, #1
 8003fec:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003fee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003ff6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ffe:	6822      	ldr	r2, [r4, #0]
 8004000:	6950      	ldr	r0, [r2, #20]
 8004002:	f010 0f04 	tst.w	r0, #4
 8004006:	d0da      	beq.n	8003fbe <HAL_I2C_Master_Transmit+0xc2>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0d8      	beq.n	8003fbe <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800400c:	784b      	ldrb	r3, [r1, #1]
 800400e:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8004010:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004012:	3301      	adds	r3, #1
 8004014:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004016:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004018:	3b01      	subs	r3, #1
 800401a:	b29b      	uxth	r3, r3
 800401c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800401e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004020:	3b01      	subs	r3, #1
 8004022:	8523      	strh	r3, [r4, #40]	; 0x28
 8004024:	e7cb      	b.n	8003fbe <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004026:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004028:	2b04      	cmp	r3, #4
 800402a:	d001      	beq.n	8004030 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 800402c:	2601      	movs	r6, #1
 800402e:	e774      	b.n	8003f1a <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	6822      	ldr	r2, [r4, #0]
 8004032:	6813      	ldr	r3, [r2, #0]
 8004034:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004038:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 800403a:	2601      	movs	r6, #1
 800403c:	e76d      	b.n	8003f1a <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403e:	6822      	ldr	r2, [r4, #0]
 8004040:	6813      	ldr	r3, [r2, #0]
 8004042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004046:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004048:	2320      	movs	r3, #32
 800404a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800404e:	2300      	movs	r3, #0
 8004050:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004054:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8004058:	e75f      	b.n	8003f1a <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 800405a:	2602      	movs	r6, #2
 800405c:	e75d      	b.n	8003f1a <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 800405e:	2602      	movs	r6, #2
 8004060:	e75b      	b.n	8003f1a <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8004062:	2601      	movs	r6, #1
 8004064:	e759      	b.n	8003f1a <HAL_I2C_Master_Transmit+0x1e>
 8004066:	bf00      	nop
 8004068:	00100002 	.word	0x00100002
 800406c:	ffff0000 	.word	0xffff0000

08004070 <HAL_I2C_Master_Receive>:
{
 8004070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004074:	b086      	sub	sp, #24
 8004076:	4604      	mov	r4, r0
 8004078:	460e      	mov	r6, r1
 800407a:	4690      	mov	r8, r2
 800407c:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800407e:	f7fe ffff 	bl	8003080 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004082:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b20      	cmp	r3, #32
 800408a:	d004      	beq.n	8004096 <HAL_I2C_Master_Receive+0x26>
    return HAL_BUSY;
 800408c:	2602      	movs	r6, #2
}
 800408e:	4630      	mov	r0, r6
 8004090:	b006      	add	sp, #24
 8004092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004096:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004098:	9000      	str	r0, [sp, #0]
 800409a:	2319      	movs	r3, #25
 800409c:	2201      	movs	r2, #1
 800409e:	499e      	ldr	r1, [pc, #632]	; (8004318 <HAL_I2C_Master_Receive+0x2a8>)
 80040a0:	4620      	mov	r0, r4
 80040a2:	f7ff fc70 	bl	8003986 <I2C_WaitOnFlagUntilTimeout>
 80040a6:	2800      	cmp	r0, #0
 80040a8:	f040 8134 	bne.w	8004314 <HAL_I2C_Master_Receive+0x2a4>
    __HAL_LOCK(hi2c);
 80040ac:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	f000 8137 	beq.w	8004324 <HAL_I2C_Master_Receive+0x2b4>
 80040b6:	2301      	movs	r3, #1
 80040b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040bc:	6823      	ldr	r3, [r4, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	f012 0f01 	tst.w	r2, #1
 80040c4:	d103      	bne.n	80040ce <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	f042 0201 	orr.w	r2, r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ce:	6822      	ldr	r2, [r4, #0]
 80040d0:	6813      	ldr	r3, [r2, #0]
 80040d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040d6:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040d8:	2322      	movs	r3, #34	; 0x22
 80040da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040de:	2310      	movs	r3, #16
 80040e0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040e4:	2300      	movs	r3, #0
 80040e6:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80040e8:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040ec:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040f0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040f2:	4b8a      	ldr	r3, [pc, #552]	; (800431c <HAL_I2C_Master_Receive+0x2ac>)
 80040f4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040f6:	462b      	mov	r3, r5
 80040f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040fa:	4631      	mov	r1, r6
 80040fc:	4620      	mov	r0, r4
 80040fe:	f7ff fd21 	bl	8003b44 <I2C_MasterRequestRead>
 8004102:	4606      	mov	r6, r0
 8004104:	2800      	cmp	r0, #0
 8004106:	f040 810f 	bne.w	8004328 <HAL_I2C_Master_Receive+0x2b8>
    if (hi2c->XferSize == 0U)
 800410a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800410c:	b95b      	cbnz	r3, 8004126 <HAL_I2C_Master_Receive+0xb6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410e:	9302      	str	r3, [sp, #8]
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	695a      	ldr	r2, [r3, #20]
 8004114:	9202      	str	r2, [sp, #8]
 8004116:	699a      	ldr	r2, [r3, #24]
 8004118:	9202      	str	r2, [sp, #8]
 800411a:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	e077      	b.n	8004216 <HAL_I2C_Master_Receive+0x1a6>
    else if (hi2c->XferSize == 1U)
 8004126:	2b01      	cmp	r3, #1
 8004128:	d00f      	beq.n	800414a <HAL_I2C_Master_Receive+0xda>
    else if (hi2c->XferSize == 2U)
 800412a:	2b02      	cmp	r3, #2
 800412c:	d01f      	beq.n	800416e <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800412e:	6822      	ldr	r2, [r4, #0]
 8004130:	6813      	ldr	r3, [r2, #0]
 8004132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004136:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004138:	2300      	movs	r3, #0
 800413a:	9305      	str	r3, [sp, #20]
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	695a      	ldr	r2, [r3, #20]
 8004140:	9205      	str	r2, [sp, #20]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	9305      	str	r3, [sp, #20]
 8004146:	9b05      	ldr	r3, [sp, #20]
 8004148:	e065      	b.n	8004216 <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800414a:	6822      	ldr	r2, [r4, #0]
 800414c:	6813      	ldr	r3, [r2, #0]
 800414e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004152:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004154:	2300      	movs	r3, #0
 8004156:	9303      	str	r3, [sp, #12]
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	695a      	ldr	r2, [r3, #20]
 800415c:	9203      	str	r2, [sp, #12]
 800415e:	699a      	ldr	r2, [r3, #24]
 8004160:	9203      	str	r2, [sp, #12]
 8004162:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	e053      	b.n	8004216 <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416e:	6822      	ldr	r2, [r4, #0]
 8004170:	6813      	ldr	r3, [r2, #0]
 8004172:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004176:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004178:	6822      	ldr	r2, [r4, #0]
 800417a:	6813      	ldr	r3, [r2, #0]
 800417c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004180:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004182:	2300      	movs	r3, #0
 8004184:	9304      	str	r3, [sp, #16]
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	695a      	ldr	r2, [r3, #20]
 800418a:	9204      	str	r2, [sp, #16]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	9304      	str	r3, [sp, #16]
 8004190:	9b04      	ldr	r3, [sp, #16]
 8004192:	e040      	b.n	8004216 <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004194:	462a      	mov	r2, r5
 8004196:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004198:	4620      	mov	r0, r4
 800419a:	f7ff fda9 	bl	8003cf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800419e:	2800      	cmp	r0, #0
 80041a0:	f040 80c4 	bne.w	800432c <HAL_I2C_Master_Receive+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041aa:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80041ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041ae:	3301      	adds	r3, #1
 80041b0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80041b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80041b4:	3b01      	subs	r3, #1
 80041b6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80041b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29b      	uxth	r3, r3
 80041be:	8563      	strh	r3, [r4, #42]	; 0x2a
 80041c0:	e029      	b.n	8004216 <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041c2:	9500      	str	r5, [sp, #0]
 80041c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041c6:	2200      	movs	r2, #0
 80041c8:	4955      	ldr	r1, [pc, #340]	; (8004320 <HAL_I2C_Master_Receive+0x2b0>)
 80041ca:	4620      	mov	r0, r4
 80041cc:	f7ff fbdb 	bl	8003986 <I2C_WaitOnFlagUntilTimeout>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	f040 80ad 	bne.w	8004330 <HAL_I2C_Master_Receive+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d6:	6822      	ldr	r2, [r4, #0]
 80041d8:	6813      	ldr	r3, [r2, #0]
 80041da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041de:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041e6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80041e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80041ea:	1c53      	adds	r3, r2, #1
 80041ec:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80041ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80041f0:	3b01      	subs	r3, #1
 80041f2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80041f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8004202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004204:	3301      	adds	r3, #1
 8004206:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004208:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800420a:	3b01      	subs	r3, #1
 800420c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800420e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004210:	3b01      	subs	r3, #1
 8004212:	b29b      	uxth	r3, r3
 8004214:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004216:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004218:	2b00      	cmp	r3, #0
 800421a:	d072      	beq.n	8004302 <HAL_I2C_Master_Receive+0x292>
      if (hi2c->XferSize <= 3U)
 800421c:	2b03      	cmp	r3, #3
 800421e:	d849      	bhi.n	80042b4 <HAL_I2C_Master_Receive+0x244>
        if (hi2c->XferSize == 1U)
 8004220:	2b01      	cmp	r3, #1
 8004222:	d0b7      	beq.n	8004194 <HAL_I2C_Master_Receive+0x124>
        else if (hi2c->XferSize == 2U)
 8004224:	2b02      	cmp	r3, #2
 8004226:	d0cc      	beq.n	80041c2 <HAL_I2C_Master_Receive+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004228:	9500      	str	r5, [sp, #0]
 800422a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800422c:	2200      	movs	r2, #0
 800422e:	493c      	ldr	r1, [pc, #240]	; (8004320 <HAL_I2C_Master_Receive+0x2b0>)
 8004230:	4620      	mov	r0, r4
 8004232:	f7ff fba8 	bl	8003986 <I2C_WaitOnFlagUntilTimeout>
 8004236:	2800      	cmp	r0, #0
 8004238:	d17c      	bne.n	8004334 <HAL_I2C_Master_Receive+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800423a:	6822      	ldr	r2, [r4, #0]
 800423c:	6813      	ldr	r3, [r2, #0]
 800423e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004242:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800424a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800424c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800424e:	3301      	adds	r3, #1
 8004250:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004252:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004254:	3b01      	subs	r3, #1
 8004256:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004258:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800425a:	3b01      	subs	r3, #1
 800425c:	b29b      	uxth	r3, r3
 800425e:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004260:	9500      	str	r5, [sp, #0]
 8004262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004264:	2200      	movs	r2, #0
 8004266:	492e      	ldr	r1, [pc, #184]	; (8004320 <HAL_I2C_Master_Receive+0x2b0>)
 8004268:	4620      	mov	r0, r4
 800426a:	f7ff fb8c 	bl	8003986 <I2C_WaitOnFlagUntilTimeout>
 800426e:	2800      	cmp	r0, #0
 8004270:	d162      	bne.n	8004338 <HAL_I2C_Master_Receive+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004272:	6822      	ldr	r2, [r4, #0]
 8004274:	6813      	ldr	r3, [r2, #0]
 8004276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800427a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004282:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004284:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004286:	1c53      	adds	r3, r2, #1
 8004288:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800428a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800428c:	3b01      	subs	r3, #1
 800428e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004290:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004292:	3b01      	subs	r3, #1
 8004294:	b29b      	uxth	r3, r3
 8004296:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800429e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042a0:	3301      	adds	r3, #1
 80042a2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80042a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80042a6:	3b01      	subs	r3, #1
 80042a8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80042aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80042b2:	e7b0      	b.n	8004216 <HAL_I2C_Master_Receive+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b4:	462a      	mov	r2, r5
 80042b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042b8:	4620      	mov	r0, r4
 80042ba:	f7ff fd19 	bl	8003cf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042be:	2800      	cmp	r0, #0
 80042c0:	d13c      	bne.n	800433c <HAL_I2C_Master_Receive+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80042ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80042cc:	1c53      	adds	r3, r2, #1
 80042ce:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80042d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80042d2:	3b01      	subs	r3, #1
 80042d4:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80042d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29b      	uxth	r3, r3
 80042dc:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	6959      	ldr	r1, [r3, #20]
 80042e2:	f011 0f04 	tst.w	r1, #4
 80042e6:	d096      	beq.n	8004216 <HAL_I2C_Master_Receive+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80042ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042ee:	3301      	adds	r3, #1
 80042f0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80042f2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80042f4:	3b01      	subs	r3, #1
 80042f6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80042f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004300:	e789      	b.n	8004216 <HAL_I2C_Master_Receive+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004302:	2320      	movs	r3, #32
 8004304:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004308:	2300      	movs	r3, #0
 800430a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800430e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8004312:	e6bc      	b.n	800408e <HAL_I2C_Master_Receive+0x1e>
      return HAL_BUSY;
 8004314:	2602      	movs	r6, #2
 8004316:	e6ba      	b.n	800408e <HAL_I2C_Master_Receive+0x1e>
 8004318:	00100002 	.word	0x00100002
 800431c:	ffff0000 	.word	0xffff0000
 8004320:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 8004324:	2602      	movs	r6, #2
 8004326:	e6b2      	b.n	800408e <HAL_I2C_Master_Receive+0x1e>
      return HAL_ERROR;
 8004328:	2601      	movs	r6, #1
 800432a:	e6b0      	b.n	800408e <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 800432c:	2601      	movs	r6, #1
 800432e:	e6ae      	b.n	800408e <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8004330:	2601      	movs	r6, #1
 8004332:	e6ac      	b.n	800408e <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8004334:	2601      	movs	r6, #1
 8004336:	e6aa      	b.n	800408e <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8004338:	2601      	movs	r6, #1
 800433a:	e6a8      	b.n	800408e <HAL_I2C_Master_Receive+0x1e>
          return HAL_ERROR;
 800433c:	2601      	movs	r6, #1
 800433e:	e6a6      	b.n	800408e <HAL_I2C_Master_Receive+0x1e>

08004340 <HAL_I2C_IsDeviceReady>:
{
 8004340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004344:	b085      	sub	sp, #20
 8004346:	4604      	mov	r4, r0
 8004348:	4688      	mov	r8, r1
 800434a:	4691      	mov	r9, r2
 800434c:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800434e:	f7fe fe97 	bl	8003080 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004352:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b20      	cmp	r3, #32
 800435a:	d004      	beq.n	8004366 <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 800435c:	2302      	movs	r3, #2
}
 800435e:	4618      	mov	r0, r3
 8004360:	b005      	add	sp, #20
 8004362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004366:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004368:	9000      	str	r0, [sp, #0]
 800436a:	2319      	movs	r3, #25
 800436c:	2201      	movs	r2, #1
 800436e:	4954      	ldr	r1, [pc, #336]	; (80044c0 <HAL_I2C_IsDeviceReady+0x180>)
 8004370:	4620      	mov	r0, r4
 8004372:	f7ff fb08 	bl	8003986 <I2C_WaitOnFlagUntilTimeout>
 8004376:	2800      	cmp	r0, #0
 8004378:	f040 8097 	bne.w	80044aa <HAL_I2C_IsDeviceReady+0x16a>
    __HAL_LOCK(hi2c);
 800437c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004380:	2b01      	cmp	r3, #1
 8004382:	f000 8094 	beq.w	80044ae <HAL_I2C_IsDeviceReady+0x16e>
 8004386:	2301      	movs	r3, #1
 8004388:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	f012 0f01 	tst.w	r2, #1
 8004394:	d103      	bne.n	800439e <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	f042 0201 	orr.w	r2, r2, #1
 800439c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800439e:	6822      	ldr	r2, [r4, #0]
 80043a0:	6813      	ldr	r3, [r2, #0]
 80043a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043a6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80043a8:	2324      	movs	r3, #36	; 0x24
 80043aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043ae:	2300      	movs	r3, #0
 80043b0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043b2:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80043b6:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 80043b8:	2701      	movs	r7, #1
 80043ba:	e034      	b.n	8004426 <HAL_I2C_IsDeviceReady+0xe6>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80043bc:	23a0      	movs	r3, #160	; 0xa0
 80043be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	695a      	ldr	r2, [r3, #20]
 80043c6:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043ca:	6959      	ldr	r1, [r3, #20]
 80043cc:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80043d0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2ba0      	cmp	r3, #160	; 0xa0
 80043d8:	d009      	beq.n	80043ee <HAL_I2C_IsDeviceReady+0xae>
 80043da:	b942      	cbnz	r2, 80043ee <HAL_I2C_IsDeviceReady+0xae>
 80043dc:	b939      	cbnz	r1, 80043ee <HAL_I2C_IsDeviceReady+0xae>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043de:	f7fe fe4f 	bl	8003080 <HAL_GetTick>
 80043e2:	1b80      	subs	r0, r0, r6
 80043e4:	42a8      	cmp	r0, r5
 80043e6:	d8e9      	bhi.n	80043bc <HAL_I2C_IsDeviceReady+0x7c>
 80043e8:	2d00      	cmp	r5, #0
 80043ea:	d1ea      	bne.n	80043c2 <HAL_I2C_IsDeviceReady+0x82>
 80043ec:	e7e6      	b.n	80043bc <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->State = HAL_I2C_STATE_READY;
 80043ee:	2320      	movs	r3, #32
 80043f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	695a      	ldr	r2, [r3, #20]
 80043f8:	f012 0f02 	tst.w	r2, #2
 80043fc:	d131      	bne.n	8004462 <HAL_I2C_IsDeviceReady+0x122>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004404:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800440c:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800440e:	9600      	str	r6, [sp, #0]
 8004410:	2319      	movs	r3, #25
 8004412:	2201      	movs	r2, #1
 8004414:	492a      	ldr	r1, [pc, #168]	; (80044c0 <HAL_I2C_IsDeviceReady+0x180>)
 8004416:	4620      	mov	r0, r4
 8004418:	f7ff fab5 	bl	8003986 <I2C_WaitOnFlagUntilTimeout>
 800441c:	2800      	cmp	r0, #0
 800441e:	d14c      	bne.n	80044ba <HAL_I2C_IsDeviceReady+0x17a>
      I2C_Trials++;
 8004420:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8004422:	454f      	cmp	r7, r9
 8004424:	d239      	bcs.n	800449a <HAL_I2C_IsDeviceReady+0x15a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004426:	6822      	ldr	r2, [r4, #0]
 8004428:	6813      	ldr	r3, [r2, #0]
 800442a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442e:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004430:	9600      	str	r6, [sp, #0]
 8004432:	462b      	mov	r3, r5
 8004434:	2200      	movs	r2, #0
 8004436:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800443a:	4620      	mov	r0, r4
 800443c:	f7ff faa3 	bl	8003986 <I2C_WaitOnFlagUntilTimeout>
 8004440:	2800      	cmp	r0, #0
 8004442:	d136      	bne.n	80044b2 <HAL_I2C_IsDeviceReady+0x172>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 800444a:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 800444c:	f7fe fe18 	bl	8003080 <HAL_GetTick>
 8004450:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	695a      	ldr	r2, [r3, #20]
 8004456:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800445a:	6959      	ldr	r1, [r3, #20]
 800445c:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004460:	e7b6      	b.n	80043d0 <HAL_I2C_IsDeviceReady+0x90>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004468:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800446a:	2300      	movs	r3, #0
 800446c:	9303      	str	r3, [sp, #12]
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	9203      	str	r2, [sp, #12]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	9303      	str	r3, [sp, #12]
 8004478:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800447a:	9600      	str	r6, [sp, #0]
 800447c:	2319      	movs	r3, #25
 800447e:	2201      	movs	r2, #1
 8004480:	490f      	ldr	r1, [pc, #60]	; (80044c0 <HAL_I2C_IsDeviceReady+0x180>)
 8004482:	4620      	mov	r0, r4
 8004484:	f7ff fa7f 	bl	8003986 <I2C_WaitOnFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	b9a0      	cbnz	r0, 80044b6 <HAL_I2C_IsDeviceReady+0x176>
        hi2c->State = HAL_I2C_STATE_READY;
 800448c:	2220      	movs	r2, #32
 800448e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8004492:	2200      	movs	r2, #0
 8004494:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 8004498:	e761      	b.n	800435e <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 800449a:	2320      	movs	r3, #32
 800449c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80044a0:	2300      	movs	r3, #0
 80044a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e759      	b.n	800435e <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 80044aa:	2302      	movs	r3, #2
 80044ac:	e757      	b.n	800435e <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 80044ae:	2302      	movs	r3, #2
 80044b0:	e755      	b.n	800435e <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e753      	b.n	800435e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e751      	b.n	800435e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e74f      	b.n	800435e <HAL_I2C_IsDeviceReady+0x1e>
 80044be:	bf00      	nop
 80044c0:	00100002 	.word	0x00100002

080044c4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044c4:	2800      	cmp	r0, #0
 80044c6:	f000 81bb 	beq.w	8004840 <HAL_RCC_OscConfig+0x37c>
{
 80044ca:	b570      	push	{r4, r5, r6, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044d0:	6803      	ldr	r3, [r0, #0]
 80044d2:	f013 0f01 	tst.w	r3, #1
 80044d6:	d03b      	beq.n	8004550 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044d8:	4ba7      	ldr	r3, [pc, #668]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 030c 	and.w	r3, r3, #12
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d02c      	beq.n	800453e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044e4:	4ba4      	ldr	r3, [pc, #656]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d021      	beq.n	8004534 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044f0:	6863      	ldr	r3, [r4, #4]
 80044f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f6:	d04f      	beq.n	8004598 <HAL_RCC_OscConfig+0xd4>
 80044f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044fc:	d052      	beq.n	80045a4 <HAL_RCC_OscConfig+0xe0>
 80044fe:	4b9e      	ldr	r3, [pc, #632]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800450e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004510:	6863      	ldr	r3, [r4, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d050      	beq.n	80045b8 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004516:	f7fe fdb3 	bl	8003080 <HAL_GetTick>
 800451a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451c:	4b96      	ldr	r3, [pc, #600]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004524:	d114      	bne.n	8004550 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004526:	f7fe fdab 	bl	8003080 <HAL_GetTick>
 800452a:	1b40      	subs	r0, r0, r5
 800452c:	2864      	cmp	r0, #100	; 0x64
 800452e:	d9f5      	bls.n	800451c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8004530:	2003      	movs	r0, #3
 8004532:	e18a      	b.n	800484a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004534:	4b90      	ldr	r3, [pc, #576]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800453c:	d0d8      	beq.n	80044f0 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800453e:	4b8e      	ldr	r3, [pc, #568]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004546:	d003      	beq.n	8004550 <HAL_RCC_OscConfig+0x8c>
 8004548:	6863      	ldr	r3, [r4, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 817a 	beq.w	8004844 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	f013 0f02 	tst.w	r3, #2
 8004556:	d055      	beq.n	8004604 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004558:	4b87      	ldr	r3, [pc, #540]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f013 0f0c 	tst.w	r3, #12
 8004560:	d03e      	beq.n	80045e0 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004562:	4b85      	ldr	r3, [pc, #532]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800456a:	2b08      	cmp	r3, #8
 800456c:	d033      	beq.n	80045d6 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800456e:	68e3      	ldr	r3, [r4, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d068      	beq.n	8004646 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004574:	4b81      	ldr	r3, [pc, #516]	; (800477c <HAL_RCC_OscConfig+0x2b8>)
 8004576:	2201      	movs	r2, #1
 8004578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457a:	f7fe fd81 	bl	8003080 <HAL_GetTick>
 800457e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004580:	4b7d      	ldr	r3, [pc, #500]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f013 0f02 	tst.w	r3, #2
 8004588:	d154      	bne.n	8004634 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800458a:	f7fe fd79 	bl	8003080 <HAL_GetTick>
 800458e:	1b40      	subs	r0, r0, r5
 8004590:	2802      	cmp	r0, #2
 8004592:	d9f5      	bls.n	8004580 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8004594:	2003      	movs	r0, #3
 8004596:	e158      	b.n	800484a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004598:	4a77      	ldr	r2, [pc, #476]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 800459a:	6813      	ldr	r3, [r2, #0]
 800459c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	e7b5      	b.n	8004510 <HAL_RCC_OscConfig+0x4c>
 80045a4:	4b74      	ldr	r3, [pc, #464]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	e7ab      	b.n	8004510 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80045b8:	f7fe fd62 	bl	8003080 <HAL_GetTick>
 80045bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045be:	4b6e      	ldr	r3, [pc, #440]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80045c6:	d0c3      	beq.n	8004550 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045c8:	f7fe fd5a 	bl	8003080 <HAL_GetTick>
 80045cc:	1b40      	subs	r0, r0, r5
 80045ce:	2864      	cmp	r0, #100	; 0x64
 80045d0:	d9f5      	bls.n	80045be <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80045d2:	2003      	movs	r0, #3
 80045d4:	e139      	b.n	800484a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045d6:	4b68      	ldr	r3, [pc, #416]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80045de:	d1c6      	bne.n	800456e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045e0:	4b65      	ldr	r3, [pc, #404]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f013 0f02 	tst.w	r3, #2
 80045e8:	d004      	beq.n	80045f4 <HAL_RCC_OscConfig+0x130>
 80045ea:	68e3      	ldr	r3, [r4, #12]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 80045f0:	2001      	movs	r0, #1
 80045f2:	e12a      	b.n	800484a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f4:	4a60      	ldr	r2, [pc, #384]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 80045f6:	6813      	ldr	r3, [r2, #0]
 80045f8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80045fc:	6921      	ldr	r1, [r4, #16]
 80045fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004602:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	f013 0f08 	tst.w	r3, #8
 800460a:	d040      	beq.n	800468e <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800460c:	6963      	ldr	r3, [r4, #20]
 800460e:	b363      	cbz	r3, 800466a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004610:	4b5b      	ldr	r3, [pc, #364]	; (8004780 <HAL_RCC_OscConfig+0x2bc>)
 8004612:	2201      	movs	r2, #1
 8004614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004616:	f7fe fd33 	bl	8003080 <HAL_GetTick>
 800461a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800461c:	4b56      	ldr	r3, [pc, #344]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 800461e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004620:	f013 0f02 	tst.w	r3, #2
 8004624:	d133      	bne.n	800468e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004626:	f7fe fd2b 	bl	8003080 <HAL_GetTick>
 800462a:	1b40      	subs	r0, r0, r5
 800462c:	2802      	cmp	r0, #2
 800462e:	d9f5      	bls.n	800461c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8004630:	2003      	movs	r0, #3
 8004632:	e10a      	b.n	800484a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004634:	4a50      	ldr	r2, [pc, #320]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 8004636:	6813      	ldr	r3, [r2, #0]
 8004638:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800463c:	6921      	ldr	r1, [r4, #16]
 800463e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	e7de      	b.n	8004604 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8004646:	4b4d      	ldr	r3, [pc, #308]	; (800477c <HAL_RCC_OscConfig+0x2b8>)
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800464c:	f7fe fd18 	bl	8003080 <HAL_GetTick>
 8004650:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004652:	4b49      	ldr	r3, [pc, #292]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f013 0f02 	tst.w	r3, #2
 800465a:	d0d3      	beq.n	8004604 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800465c:	f7fe fd10 	bl	8003080 <HAL_GetTick>
 8004660:	1b40      	subs	r0, r0, r5
 8004662:	2802      	cmp	r0, #2
 8004664:	d9f5      	bls.n	8004652 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8004666:	2003      	movs	r0, #3
 8004668:	e0ef      	b.n	800484a <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800466a:	4b45      	ldr	r3, [pc, #276]	; (8004780 <HAL_RCC_OscConfig+0x2bc>)
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004670:	f7fe fd06 	bl	8003080 <HAL_GetTick>
 8004674:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004676:	4b40      	ldr	r3, [pc, #256]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 8004678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800467a:	f013 0f02 	tst.w	r3, #2
 800467e:	d006      	beq.n	800468e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004680:	f7fe fcfe 	bl	8003080 <HAL_GetTick>
 8004684:	1b40      	subs	r0, r0, r5
 8004686:	2802      	cmp	r0, #2
 8004688:	d9f5      	bls.n	8004676 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 800468a:	2003      	movs	r0, #3
 800468c:	e0dd      	b.n	800484a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	f013 0f04 	tst.w	r3, #4
 8004694:	d079      	beq.n	800478a <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004696:	4b38      	ldr	r3, [pc, #224]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800469e:	d133      	bne.n	8004708 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a0:	2300      	movs	r3, #0
 80046a2:	9301      	str	r3, [sp, #4]
 80046a4:	4b34      	ldr	r3, [pc, #208]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 80046a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80046ac:	641a      	str	r2, [r3, #64]	; 0x40
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b4:	9301      	str	r3, [sp, #4]
 80046b6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80046b8:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ba:	4b32      	ldr	r3, [pc, #200]	; (8004784 <HAL_RCC_OscConfig+0x2c0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80046c2:	d023      	beq.n	800470c <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c4:	68a3      	ldr	r3, [r4, #8]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d034      	beq.n	8004734 <HAL_RCC_OscConfig+0x270>
 80046ca:	2b05      	cmp	r3, #5
 80046cc:	d038      	beq.n	8004740 <HAL_RCC_OscConfig+0x27c>
 80046ce:	4b2a      	ldr	r3, [pc, #168]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 80046d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046d2:	f022 0201 	bic.w	r2, r2, #1
 80046d6:	671a      	str	r2, [r3, #112]	; 0x70
 80046d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046da:	f022 0204 	bic.w	r2, r2, #4
 80046de:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046e0:	68a3      	ldr	r3, [r4, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d036      	beq.n	8004754 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e6:	f7fe fccb 	bl	8003080 <HAL_GetTick>
 80046ea:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ec:	4b22      	ldr	r3, [pc, #136]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 80046ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f0:	f013 0f02 	tst.w	r3, #2
 80046f4:	d148      	bne.n	8004788 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f6:	f7fe fcc3 	bl	8003080 <HAL_GetTick>
 80046fa:	1b80      	subs	r0, r0, r6
 80046fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8004700:	4298      	cmp	r0, r3
 8004702:	d9f3      	bls.n	80046ec <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8004704:	2003      	movs	r0, #3
 8004706:	e0a0      	b.n	800484a <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8004708:	2500      	movs	r5, #0
 800470a:	e7d6      	b.n	80046ba <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800470c:	4a1d      	ldr	r2, [pc, #116]	; (8004784 <HAL_RCC_OscConfig+0x2c0>)
 800470e:	6813      	ldr	r3, [r2, #0]
 8004710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004714:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004716:	f7fe fcb3 	bl	8003080 <HAL_GetTick>
 800471a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800471c:	4b19      	ldr	r3, [pc, #100]	; (8004784 <HAL_RCC_OscConfig+0x2c0>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004724:	d1ce      	bne.n	80046c4 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004726:	f7fe fcab 	bl	8003080 <HAL_GetTick>
 800472a:	1b80      	subs	r0, r0, r6
 800472c:	2802      	cmp	r0, #2
 800472e:	d9f5      	bls.n	800471c <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8004730:	2003      	movs	r0, #3
 8004732:	e08a      	b.n	800484a <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004734:	4a10      	ldr	r2, [pc, #64]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 8004736:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	6713      	str	r3, [r2, #112]	; 0x70
 800473e:	e7cf      	b.n	80046e0 <HAL_RCC_OscConfig+0x21c>
 8004740:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 8004742:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004744:	f042 0204 	orr.w	r2, r2, #4
 8004748:	671a      	str	r2, [r3, #112]	; 0x70
 800474a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800474c:	f042 0201 	orr.w	r2, r2, #1
 8004750:	671a      	str	r2, [r3, #112]	; 0x70
 8004752:	e7c5      	b.n	80046e0 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004754:	f7fe fc94 	bl	8003080 <HAL_GetTick>
 8004758:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800475a:	4b07      	ldr	r3, [pc, #28]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	f013 0f02 	tst.w	r3, #2
 8004762:	d011      	beq.n	8004788 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004764:	f7fe fc8c 	bl	8003080 <HAL_GetTick>
 8004768:	1b80      	subs	r0, r0, r6
 800476a:	f241 3388 	movw	r3, #5000	; 0x1388
 800476e:	4298      	cmp	r0, r3
 8004770:	d9f3      	bls.n	800475a <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8004772:	2003      	movs	r0, #3
 8004774:	e069      	b.n	800484a <HAL_RCC_OscConfig+0x386>
 8004776:	bf00      	nop
 8004778:	40023800 	.word	0x40023800
 800477c:	42470000 	.word	0x42470000
 8004780:	42470e80 	.word	0x42470e80
 8004784:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004788:	b9e5      	cbnz	r5, 80047c4 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800478a:	69a3      	ldr	r3, [r4, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d05b      	beq.n	8004848 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004790:	4a30      	ldr	r2, [pc, #192]	; (8004854 <HAL_RCC_OscConfig+0x390>)
 8004792:	6892      	ldr	r2, [r2, #8]
 8004794:	f002 020c 	and.w	r2, r2, #12
 8004798:	2a08      	cmp	r2, #8
 800479a:	d058      	beq.n	800484e <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800479c:	2b02      	cmp	r3, #2
 800479e:	d017      	beq.n	80047d0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a0:	4b2d      	ldr	r3, [pc, #180]	; (8004858 <HAL_RCC_OscConfig+0x394>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a6:	f7fe fc6b 	bl	8003080 <HAL_GetTick>
 80047aa:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ac:	4b29      	ldr	r3, [pc, #164]	; (8004854 <HAL_RCC_OscConfig+0x390>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80047b4:	d042      	beq.n	800483c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b6:	f7fe fc63 	bl	8003080 <HAL_GetTick>
 80047ba:	1b00      	subs	r0, r0, r4
 80047bc:	2802      	cmp	r0, #2
 80047be:	d9f5      	bls.n	80047ac <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80047c0:	2003      	movs	r0, #3
 80047c2:	e042      	b.n	800484a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c4:	4a23      	ldr	r2, [pc, #140]	; (8004854 <HAL_RCC_OscConfig+0x390>)
 80047c6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80047c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047cc:	6413      	str	r3, [r2, #64]	; 0x40
 80047ce:	e7dc      	b.n	800478a <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 80047d0:	4b21      	ldr	r3, [pc, #132]	; (8004858 <HAL_RCC_OscConfig+0x394>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80047d6:	f7fe fc53 	bl	8003080 <HAL_GetTick>
 80047da:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047dc:	4b1d      	ldr	r3, [pc, #116]	; (8004854 <HAL_RCC_OscConfig+0x390>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80047e4:	d006      	beq.n	80047f4 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e6:	f7fe fc4b 	bl	8003080 <HAL_GetTick>
 80047ea:	1b40      	subs	r0, r0, r5
 80047ec:	2802      	cmp	r0, #2
 80047ee:	d9f5      	bls.n	80047dc <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80047f0:	2003      	movs	r0, #3
 80047f2:	e02a      	b.n	800484a <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047f4:	69e3      	ldr	r3, [r4, #28]
 80047f6:	6a22      	ldr	r2, [r4, #32]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80047fc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004800:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004802:	0852      	lsrs	r2, r2, #1
 8004804:	3a01      	subs	r2, #1
 8004806:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800480a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800480c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004810:	4a10      	ldr	r2, [pc, #64]	; (8004854 <HAL_RCC_OscConfig+0x390>)
 8004812:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004814:	4b10      	ldr	r3, [pc, #64]	; (8004858 <HAL_RCC_OscConfig+0x394>)
 8004816:	2201      	movs	r2, #1
 8004818:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800481a:	f7fe fc31 	bl	8003080 <HAL_GetTick>
 800481e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004820:	4b0c      	ldr	r3, [pc, #48]	; (8004854 <HAL_RCC_OscConfig+0x390>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004828:	d106      	bne.n	8004838 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800482a:	f7fe fc29 	bl	8003080 <HAL_GetTick>
 800482e:	1b00      	subs	r0, r0, r4
 8004830:	2802      	cmp	r0, #2
 8004832:	d9f5      	bls.n	8004820 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8004834:	2003      	movs	r0, #3
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004838:	2000      	movs	r0, #0
 800483a:	e006      	b.n	800484a <HAL_RCC_OscConfig+0x386>
 800483c:	2000      	movs	r0, #0
 800483e:	e004      	b.n	800484a <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8004840:	2001      	movs	r0, #1
}
 8004842:	4770      	bx	lr
        return HAL_ERROR;
 8004844:	2001      	movs	r0, #1
 8004846:	e000      	b.n	800484a <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8004848:	2000      	movs	r0, #0
}
 800484a:	b002      	add	sp, #8
 800484c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800484e:	2001      	movs	r0, #1
 8004850:	e7fb      	b.n	800484a <HAL_RCC_OscConfig+0x386>
 8004852:	bf00      	nop
 8004854:	40023800 	.word	0x40023800
 8004858:	42470060 	.word	0x42470060

0800485c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800485c:	4b32      	ldr	r3, [pc, #200]	; (8004928 <HAL_RCC_GetSysClockFreq+0xcc>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 030c 	and.w	r3, r3, #12
 8004864:	2b04      	cmp	r3, #4
 8004866:	d05c      	beq.n	8004922 <HAL_RCC_GetSysClockFreq+0xc6>
 8004868:	2b08      	cmp	r3, #8
 800486a:	d001      	beq.n	8004870 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800486c:	482f      	ldr	r0, [pc, #188]	; (800492c <HAL_RCC_GetSysClockFreq+0xd0>)
 800486e:	4770      	bx	lr
{
 8004870:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004874:	4b2c      	ldr	r3, [pc, #176]	; (8004928 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004882:	d02b      	beq.n	80048dc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004884:	4b28      	ldr	r3, [pc, #160]	; (8004928 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800488c:	461e      	mov	r6, r3
 800488e:	2700      	movs	r7, #0
 8004890:	015c      	lsls	r4, r3, #5
 8004892:	2500      	movs	r5, #0
 8004894:	1ae4      	subs	r4, r4, r3
 8004896:	eb65 0507 	sbc.w	r5, r5, r7
 800489a:	01a9      	lsls	r1, r5, #6
 800489c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80048a0:	01a0      	lsls	r0, r4, #6
 80048a2:	1b00      	subs	r0, r0, r4
 80048a4:	eb61 0105 	sbc.w	r1, r1, r5
 80048a8:	00cb      	lsls	r3, r1, #3
 80048aa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80048ae:	00c4      	lsls	r4, r0, #3
 80048b0:	19a0      	adds	r0, r4, r6
 80048b2:	eb43 0107 	adc.w	r1, r3, r7
 80048b6:	024b      	lsls	r3, r1, #9
 80048b8:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80048bc:	0244      	lsls	r4, r0, #9
 80048be:	4620      	mov	r0, r4
 80048c0:	4619      	mov	r1, r3
 80048c2:	2300      	movs	r3, #0
 80048c4:	f7fc f9e8 	bl	8000c98 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048c8:	4b17      	ldr	r3, [pc, #92]	; (8004928 <HAL_RCC_GetSysClockFreq+0xcc>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80048d0:	3301      	adds	r3, #1
 80048d2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80048d4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80048d8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048dc:	4b12      	ldr	r3, [pc, #72]	; (8004928 <HAL_RCC_GetSysClockFreq+0xcc>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80048e4:	461e      	mov	r6, r3
 80048e6:	2700      	movs	r7, #0
 80048e8:	015c      	lsls	r4, r3, #5
 80048ea:	2500      	movs	r5, #0
 80048ec:	1ae4      	subs	r4, r4, r3
 80048ee:	eb65 0507 	sbc.w	r5, r5, r7
 80048f2:	01a9      	lsls	r1, r5, #6
 80048f4:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80048f8:	01a0      	lsls	r0, r4, #6
 80048fa:	1b00      	subs	r0, r0, r4
 80048fc:	eb61 0105 	sbc.w	r1, r1, r5
 8004900:	00cb      	lsls	r3, r1, #3
 8004902:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004906:	00c4      	lsls	r4, r0, #3
 8004908:	19a0      	adds	r0, r4, r6
 800490a:	eb43 0107 	adc.w	r1, r3, r7
 800490e:	028b      	lsls	r3, r1, #10
 8004910:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8004914:	0284      	lsls	r4, r0, #10
 8004916:	4620      	mov	r0, r4
 8004918:	4619      	mov	r1, r3
 800491a:	2300      	movs	r3, #0
 800491c:	f7fc f9bc 	bl	8000c98 <__aeabi_uldivmod>
 8004920:	e7d2      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8004922:	4803      	ldr	r0, [pc, #12]	; (8004930 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40023800 	.word	0x40023800
 800492c:	00f42400 	.word	0x00f42400
 8004930:	007a1200 	.word	0x007a1200

08004934 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004934:	2800      	cmp	r0, #0
 8004936:	f000 809d 	beq.w	8004a74 <HAL_RCC_ClockConfig+0x140>
{
 800493a:	b570      	push	{r4, r5, r6, lr}
 800493c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800493e:	4b4f      	ldr	r3, [pc, #316]	; (8004a7c <HAL_RCC_ClockConfig+0x148>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	428b      	cmp	r3, r1
 8004948:	d209      	bcs.n	800495e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494a:	b2cb      	uxtb	r3, r1
 800494c:	4a4b      	ldr	r2, [pc, #300]	; (8004a7c <HAL_RCC_ClockConfig+0x148>)
 800494e:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004950:	6813      	ldr	r3, [r2, #0]
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	428b      	cmp	r3, r1
 8004958:	d001      	beq.n	800495e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 800495a:	2001      	movs	r0, #1
}
 800495c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	f013 0f02 	tst.w	r3, #2
 8004964:	d017      	beq.n	8004996 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004966:	f013 0f04 	tst.w	r3, #4
 800496a:	d004      	beq.n	8004976 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800496c:	4a44      	ldr	r2, [pc, #272]	; (8004a80 <HAL_RCC_ClockConfig+0x14c>)
 800496e:	6893      	ldr	r3, [r2, #8]
 8004970:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004974:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	f013 0f08 	tst.w	r3, #8
 800497c:	d004      	beq.n	8004988 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800497e:	4a40      	ldr	r2, [pc, #256]	; (8004a80 <HAL_RCC_ClockConfig+0x14c>)
 8004980:	6893      	ldr	r3, [r2, #8]
 8004982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004986:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004988:	4a3d      	ldr	r2, [pc, #244]	; (8004a80 <HAL_RCC_ClockConfig+0x14c>)
 800498a:	6893      	ldr	r3, [r2, #8]
 800498c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004990:	68a0      	ldr	r0, [r4, #8]
 8004992:	4303      	orrs	r3, r0
 8004994:	6093      	str	r3, [r2, #8]
 8004996:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	f013 0f01 	tst.w	r3, #1
 800499e:	d032      	beq.n	8004a06 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a0:	6863      	ldr	r3, [r4, #4]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d021      	beq.n	80049ea <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049a6:	1e9a      	subs	r2, r3, #2
 80049a8:	2a01      	cmp	r2, #1
 80049aa:	d925      	bls.n	80049f8 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ac:	4a34      	ldr	r2, [pc, #208]	; (8004a80 <HAL_RCC_ClockConfig+0x14c>)
 80049ae:	6812      	ldr	r2, [r2, #0]
 80049b0:	f012 0f02 	tst.w	r2, #2
 80049b4:	d060      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049b6:	4932      	ldr	r1, [pc, #200]	; (8004a80 <HAL_RCC_ClockConfig+0x14c>)
 80049b8:	688a      	ldr	r2, [r1, #8]
 80049ba:	f022 0203 	bic.w	r2, r2, #3
 80049be:	4313      	orrs	r3, r2
 80049c0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80049c2:	f7fe fb5d 	bl	8003080 <HAL_GetTick>
 80049c6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c8:	4b2d      	ldr	r3, [pc, #180]	; (8004a80 <HAL_RCC_ClockConfig+0x14c>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 030c 	and.w	r3, r3, #12
 80049d0:	6862      	ldr	r2, [r4, #4]
 80049d2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80049d6:	d016      	beq.n	8004a06 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d8:	f7fe fb52 	bl	8003080 <HAL_GetTick>
 80049dc:	1b80      	subs	r0, r0, r6
 80049de:	f241 3388 	movw	r3, #5000	; 0x1388
 80049e2:	4298      	cmp	r0, r3
 80049e4:	d9f0      	bls.n	80049c8 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 80049e6:	2003      	movs	r0, #3
 80049e8:	e7b8      	b.n	800495c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ea:	4a25      	ldr	r2, [pc, #148]	; (8004a80 <HAL_RCC_ClockConfig+0x14c>)
 80049ec:	6812      	ldr	r2, [r2, #0]
 80049ee:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80049f2:	d1e0      	bne.n	80049b6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80049f4:	2001      	movs	r0, #1
 80049f6:	e7b1      	b.n	800495c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f8:	4a21      	ldr	r2, [pc, #132]	; (8004a80 <HAL_RCC_ClockConfig+0x14c>)
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004a00:	d1d9      	bne.n	80049b6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8004a02:	2001      	movs	r0, #1
 8004a04:	e7aa      	b.n	800495c <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a06:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <HAL_RCC_ClockConfig+0x148>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	42ab      	cmp	r3, r5
 8004a10:	d909      	bls.n	8004a26 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a12:	b2ea      	uxtb	r2, r5
 8004a14:	4b19      	ldr	r3, [pc, #100]	; (8004a7c <HAL_RCC_ClockConfig+0x148>)
 8004a16:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	42ab      	cmp	r3, r5
 8004a20:	d001      	beq.n	8004a26 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8004a22:	2001      	movs	r0, #1
 8004a24:	e79a      	b.n	800495c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	f013 0f04 	tst.w	r3, #4
 8004a2c:	d006      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a2e:	4a14      	ldr	r2, [pc, #80]	; (8004a80 <HAL_RCC_ClockConfig+0x14c>)
 8004a30:	6893      	ldr	r3, [r2, #8]
 8004a32:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004a36:	68e1      	ldr	r1, [r4, #12]
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	f013 0f08 	tst.w	r3, #8
 8004a42:	d007      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a44:	4a0e      	ldr	r2, [pc, #56]	; (8004a80 <HAL_RCC_ClockConfig+0x14c>)
 8004a46:	6893      	ldr	r3, [r2, #8]
 8004a48:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004a4c:	6921      	ldr	r1, [r4, #16]
 8004a4e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004a52:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a54:	f7ff ff02 	bl	800485c <HAL_RCC_GetSysClockFreq>
 8004a58:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <HAL_RCC_ClockConfig+0x14c>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004a60:	4a08      	ldr	r2, [pc, #32]	; (8004a84 <HAL_RCC_ClockConfig+0x150>)
 8004a62:	5cd3      	ldrb	r3, [r2, r3]
 8004a64:	40d8      	lsrs	r0, r3
 8004a66:	4b08      	ldr	r3, [pc, #32]	; (8004a88 <HAL_RCC_ClockConfig+0x154>)
 8004a68:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f003 faae 	bl	8007fcc <HAL_InitTick>
  return HAL_OK;
 8004a70:	2000      	movs	r0, #0
 8004a72:	e773      	b.n	800495c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004a74:	2001      	movs	r0, #1
}
 8004a76:	4770      	bx	lr
        return HAL_ERROR;
 8004a78:	2001      	movs	r0, #1
 8004a7a:	e76f      	b.n	800495c <HAL_RCC_ClockConfig+0x28>
 8004a7c:	40023c00 	.word	0x40023c00
 8004a80:	40023800 	.word	0x40023800
 8004a84:	0800ea1c 	.word	0x0800ea1c
 8004a88:	20000090 	.word	0x20000090

08004a8c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004a8c:	4b01      	ldr	r3, [pc, #4]	; (8004a94 <HAL_RCC_GetHCLKFreq+0x8>)
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	20000090 	.word	0x20000090

08004a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a98:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a9a:	f7ff fff7 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8004a9e:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004aa6:	4a03      	ldr	r2, [pc, #12]	; (8004ab4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004aa8:	5cd3      	ldrb	r3, [r2, r3]
}
 8004aaa:	40d8      	lsrs	r0, r3
 8004aac:	bd08      	pop	{r3, pc}
 8004aae:	bf00      	nop
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	0800ea2c 	.word	0x0800ea2c

08004ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004aba:	f7ff ffe7 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8004abe:	4b04      	ldr	r3, [pc, #16]	; (8004ad0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004ac6:	4a03      	ldr	r2, [pc, #12]	; (8004ad4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004ac8:	5cd3      	ldrb	r3, [r2, r3]
}
 8004aca:	40d8      	lsrs	r0, r3
 8004acc:	bd08      	pop	{r3, pc}
 8004ace:	bf00      	nop
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	0800ea2c 	.word	0x0800ea2c

08004ad8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ad8:	230f      	movs	r3, #15
 8004ada:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004adc:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <HAL_RCC_GetClockConfig+0x34>)
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	f002 0203 	and.w	r2, r2, #3
 8004ae4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004aec:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8004af4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	08db      	lsrs	r3, r3, #3
 8004afa:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004afe:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b00:	4b03      	ldr	r3, [pc, #12]	; (8004b10 <HAL_RCC_GetClockConfig+0x38>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	600b      	str	r3, [r1, #0]
}
 8004b0a:	4770      	bx	lr
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	40023c00 	.word	0x40023c00

08004b14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b16:	4605      	mov	r5, r0
 8004b18:	460f      	mov	r7, r1
 8004b1a:	4616      	mov	r6, r2
 8004b1c:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b1e:	682b      	ldr	r3, [r5, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	ea37 0303 	bics.w	r3, r7, r3
 8004b26:	bf0c      	ite	eq
 8004b28:	2301      	moveq	r3, #1
 8004b2a:	2300      	movne	r3, #0
 8004b2c:	42b3      	cmp	r3, r6
 8004b2e:	d037      	beq.n	8004ba0 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b30:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004b34:	d0f3      	beq.n	8004b1e <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004b36:	f7fe faa3 	bl	8003080 <HAL_GetTick>
 8004b3a:	9b06      	ldr	r3, [sp, #24]
 8004b3c:	1ac0      	subs	r0, r0, r3
 8004b3e:	42a0      	cmp	r0, r4
 8004b40:	d201      	bcs.n	8004b46 <SPI_WaitFlagStateUntilTimeout+0x32>
 8004b42:	2c00      	cmp	r4, #0
 8004b44:	d1eb      	bne.n	8004b1e <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b46:	682a      	ldr	r2, [r5, #0]
 8004b48:	6853      	ldr	r3, [r2, #4]
 8004b4a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004b4e:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b50:	686b      	ldr	r3, [r5, #4]
 8004b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b56:	d00b      	beq.n	8004b70 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b58:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b5e:	d014      	beq.n	8004b8a <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b60:	2301      	movs	r3, #1
 8004b62:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b66:	2300      	movs	r3, #0
 8004b68:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b6c:	2003      	movs	r0, #3
 8004b6e:	e018      	b.n	8004ba2 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b70:	68ab      	ldr	r3, [r5, #8]
 8004b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b76:	d002      	beq.n	8004b7e <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b7c:	d1ec      	bne.n	8004b58 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8004b7e:	682a      	ldr	r2, [r5, #0]
 8004b80:	6813      	ldr	r3, [r2, #0]
 8004b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	e7e6      	b.n	8004b58 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8004b8a:	682a      	ldr	r2, [r5, #0]
 8004b8c:	6813      	ldr	r3, [r2, #0]
 8004b8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	682a      	ldr	r2, [r5, #0]
 8004b96:	6813      	ldr	r3, [r2, #0]
 8004b98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	e7df      	b.n	8004b60 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8004ba0:	2000      	movs	r0, #0
}
 8004ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004ba4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba4:	b530      	push	{r4, r5, lr}
 8004ba6:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ba8:	4c16      	ldr	r4, [pc, #88]	; (8004c04 <SPI_EndRxTxTransaction+0x60>)
 8004baa:	6824      	ldr	r4, [r4, #0]
 8004bac:	4d16      	ldr	r5, [pc, #88]	; (8004c08 <SPI_EndRxTxTransaction+0x64>)
 8004bae:	fba5 3404 	umull	r3, r4, r5, r4
 8004bb2:	0d64      	lsrs	r4, r4, #21
 8004bb4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8004bb8:	fb05 f404 	mul.w	r4, r5, r4
 8004bbc:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bbe:	6844      	ldr	r4, [r0, #4]
 8004bc0:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8004bc4:	d00b      	beq.n	8004bde <SPI_EndRxTxTransaction+0x3a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004bc6:	9b03      	ldr	r3, [sp, #12]
 8004bc8:	b1c3      	cbz	r3, 8004bfc <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8004bca:	9b03      	ldr	r3, [sp, #12]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004bd0:	6803      	ldr	r3, [r0, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004bd8:	d1f5      	bne.n	8004bc6 <SPI_EndRxTxTransaction+0x22>
  }

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	e00f      	b.n	8004bfe <SPI_EndRxTxTransaction+0x5a>
 8004bde:	460b      	mov	r3, r1
 8004be0:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004be2:	9200      	str	r2, [sp, #0]
 8004be4:	2200      	movs	r2, #0
 8004be6:	2180      	movs	r1, #128	; 0x80
 8004be8:	f7ff ff94 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	b130      	cbz	r0, 8004bfe <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bf0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004bf2:	f043 0320 	orr.w	r3, r3, #32
 8004bf6:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e000      	b.n	8004bfe <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	b005      	add	sp, #20
 8004c02:	bd30      	pop	{r4, r5, pc}
 8004c04:	20000090 	.word	0x20000090
 8004c08:	165e9f81 	.word	0x165e9f81

08004c0c <SPI_EndRxTransaction>:
{
 8004c0c:	b510      	push	{r4, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c12:	6840      	ldr	r0, [r0, #4]
 8004c14:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8004c18:	d016      	beq.n	8004c48 <SPI_EndRxTransaction+0x3c>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c1a:	6860      	ldr	r0, [r4, #4]
 8004c1c:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8004c20:	d12e      	bne.n	8004c80 <SPI_EndRxTransaction+0x74>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004c22:	68a3      	ldr	r3, [r4, #8]
 8004c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c28:	d01b      	beq.n	8004c62 <SPI_EndRxTransaction+0x56>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c2a:	9200      	str	r2, [sp, #0]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	2200      	movs	r2, #0
 8004c30:	2180      	movs	r1, #128	; 0x80
 8004c32:	4620      	mov	r0, r4
 8004c34:	f7ff ff6e 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	b350      	cbz	r0, 8004c92 <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004c3e:	f043 0320 	orr.w	r3, r3, #32
 8004c42:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e024      	b.n	8004c92 <SPI_EndRxTransaction+0x86>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c48:	68a3      	ldr	r3, [r4, #8]
 8004c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c4e:	d002      	beq.n	8004c56 <SPI_EndRxTransaction+0x4a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c54:	d1e1      	bne.n	8004c1a <SPI_EndRxTransaction+0xe>
    __HAL_SPI_DISABLE(hspi);
 8004c56:	6820      	ldr	r0, [r4, #0]
 8004c58:	6803      	ldr	r3, [r0, #0]
 8004c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c5e:	6003      	str	r3, [r0, #0]
 8004c60:	e7db      	b.n	8004c1a <SPI_EndRxTransaction+0xe>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c62:	9200      	str	r2, [sp, #0]
 8004c64:	460b      	mov	r3, r1
 8004c66:	2200      	movs	r2, #0
 8004c68:	2101      	movs	r1, #1
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f7ff ff52 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	b170      	cbz	r0, 8004c92 <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c74:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004c76:	f043 0320 	orr.w	r3, r3, #32
 8004c7a:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e008      	b.n	8004c92 <SPI_EndRxTransaction+0x86>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004c80:	9200      	str	r2, [sp, #0]
 8004c82:	460b      	mov	r3, r1
 8004c84:	2200      	movs	r2, #0
 8004c86:	2101      	movs	r1, #1
 8004c88:	4620      	mov	r0, r4
 8004c8a:	f7ff ff43 	bl	8004b14 <SPI_WaitFlagStateUntilTimeout>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	b910      	cbnz	r0, 8004c98 <SPI_EndRxTransaction+0x8c>
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	b002      	add	sp, #8
 8004c96:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004c9a:	f043 0320 	orr.w	r3, r3, #32
 8004c9e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e7f6      	b.n	8004c92 <SPI_EndRxTransaction+0x86>

08004ca4 <HAL_SPI_Init>:
  if (hspi == NULL)
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	d03b      	beq.n	8004d20 <HAL_SPI_Init+0x7c>
{
 8004ca8:	b510      	push	{r4, lr}
 8004caa:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cac:	2300      	movs	r3, #0
 8004cae:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cb0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d02e      	beq.n	8004d16 <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004cb8:	2302      	movs	r3, #2
 8004cba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004cbe:	6822      	ldr	r2, [r4, #0]
 8004cc0:	6813      	ldr	r3, [r2, #0]
 8004cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004cc8:	6863      	ldr	r3, [r4, #4]
 8004cca:	68a2      	ldr	r2, [r4, #8]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	68e2      	ldr	r2, [r4, #12]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	6922      	ldr	r2, [r4, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	6962      	ldr	r2, [r4, #20]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	69a2      	ldr	r2, [r4, #24]
 8004cdc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	69e2      	ldr	r2, [r4, #28]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	6a22      	ldr	r2, [r4, #32]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004cec:	6822      	ldr	r2, [r4, #0]
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004cf2:	8b63      	ldrh	r3, [r4, #26]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004cfa:	6822      	ldr	r2, [r4, #0]
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d00:	6822      	ldr	r2, [r4, #0]
 8004d02:	69d3      	ldr	r3, [r2, #28]
 8004d04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d08:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004d14:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004d16:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004d1a:	f003 f8cf 	bl	8007ebc <HAL_SPI_MspInit>
 8004d1e:	e7cb      	b.n	8004cb8 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8004d20:	2001      	movs	r0, #1
}
 8004d22:	4770      	bx	lr

08004d24 <HAL_SPI_Transmit>:
{
 8004d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d28:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8004d2a:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8004d2e:	2c01      	cmp	r4, #1
 8004d30:	f000 80c3 	beq.w	8004eba <HAL_SPI_Transmit+0x196>
 8004d34:	461d      	mov	r5, r3
 8004d36:	4617      	mov	r7, r2
 8004d38:	4688      	mov	r8, r1
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004d42:	f7fe f99d 	bl	8003080 <HAL_GetTick>
 8004d46:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004d48:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d009      	beq.n	8004d66 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8004d52:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004d54:	2301      	movs	r3, #1
 8004d56:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004d60:	b002      	add	sp, #8
 8004d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8004d66:	f1b8 0f00 	cmp.w	r8, #0
 8004d6a:	f000 8098 	beq.w	8004e9e <HAL_SPI_Transmit+0x17a>
 8004d6e:	2f00      	cmp	r7, #0
 8004d70:	f000 8097 	beq.w	8004ea2 <HAL_SPI_Transmit+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d74:	2303      	movs	r3, #3
 8004d76:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d7e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d82:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d84:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d86:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d88:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d8a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004d8c:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004d8e:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d90:	68a3      	ldr	r3, [r4, #8]
 8004d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d96:	d01c      	beq.n	8004dd2 <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004da0:	d103      	bne.n	8004daa <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004da8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004daa:	68e3      	ldr	r3, [r4, #12]
 8004dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db0:	d015      	beq.n	8004dde <HAL_SPI_Transmit+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004db2:	6863      	ldr	r3, [r4, #4]
 8004db4:	b10b      	cbz	r3, 8004dba <HAL_SPI_Transmit+0x96>
 8004db6:	2f01      	cmp	r7, #1
 8004db8:	d149      	bne.n	8004e4e <HAL_SPI_Transmit+0x12a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	7812      	ldrb	r2, [r2, #0]
 8004dc0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004dc8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004dd0:	e03d      	b.n	8004e4e <HAL_SPI_Transmit+0x12a>
    SPI_1LINE_TX(hspi);
 8004dd2:	6822      	ldr	r2, [r4, #0]
 8004dd4:	6813      	ldr	r3, [r2, #0]
 8004dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	e7dc      	b.n	8004d98 <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dde:	6863      	ldr	r3, [r4, #4]
 8004de0:	b10b      	cbz	r3, 8004de6 <HAL_SPI_Transmit+0xc2>
 8004de2:	2f01      	cmp	r7, #1
 8004de4:	d115      	bne.n	8004e12 <HAL_SPI_Transmit+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004de6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	8812      	ldrh	r2, [r2, #0]
 8004dec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004df0:	3302      	adds	r3, #2
 8004df2:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004df4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004dfc:	e009      	b.n	8004e12 <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dfe:	f7fe f93f 	bl	8003080 <HAL_GetTick>
 8004e02:	1b80      	subs	r0, r0, r6
 8004e04:	42a8      	cmp	r0, r5
 8004e06:	d302      	bcc.n	8004e0e <HAL_SPI_Transmit+0xea>
 8004e08:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004e0c:	d14b      	bne.n	8004ea6 <HAL_SPI_Transmit+0x182>
 8004e0e:	2d00      	cmp	r5, #0
 8004e10:	d04b      	beq.n	8004eaa <HAL_SPI_Transmit+0x186>
    while (hspi->TxXferCount > 0U)
 8004e12:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d02c      	beq.n	8004e74 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e1a:	6823      	ldr	r3, [r4, #0]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	f012 0f02 	tst.w	r2, #2
 8004e22:	d0ec      	beq.n	8004dfe <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e24:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004e26:	8812      	ldrh	r2, [r2, #0]
 8004e28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e2c:	3302      	adds	r3, #2
 8004e2e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004e30:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004e38:	e7eb      	b.n	8004e12 <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e3a:	f7fe f921 	bl	8003080 <HAL_GetTick>
 8004e3e:	1b80      	subs	r0, r0, r6
 8004e40:	42a8      	cmp	r0, r5
 8004e42:	d302      	bcc.n	8004e4a <HAL_SPI_Transmit+0x126>
 8004e44:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004e48:	d131      	bne.n	8004eae <HAL_SPI_Transmit+0x18a>
 8004e4a:	2d00      	cmp	r5, #0
 8004e4c:	d031      	beq.n	8004eb2 <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 8004e4e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	b17b      	cbz	r3, 8004e74 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	f012 0f02 	tst.w	r2, #2
 8004e5c:	d0ed      	beq.n	8004e3a <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004e60:	7812      	ldrb	r2, [r2, #0]
 8004e62:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e66:	3301      	adds	r3, #1
 8004e68:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004e6a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004e72:	e7ec      	b.n	8004e4e <HAL_SPI_Transmit+0x12a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e74:	4632      	mov	r2, r6
 8004e76:	4629      	mov	r1, r5
 8004e78:	4620      	mov	r0, r4
 8004e7a:	f7ff fe93 	bl	8004ba4 <SPI_EndRxTxTransaction>
 8004e7e:	b108      	cbz	r0, 8004e84 <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e80:	2320      	movs	r3, #32
 8004e82:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e84:	68a3      	ldr	r3, [r4, #8]
 8004e86:	b933      	cbnz	r3, 8004e96 <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e88:	9301      	str	r3, [sp, #4]
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	9201      	str	r2, [sp, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	9301      	str	r3, [sp, #4]
 8004e94:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e96:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e98:	b96b      	cbnz	r3, 8004eb6 <HAL_SPI_Transmit+0x192>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	e75a      	b.n	8004d54 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8004e9e:	2001      	movs	r0, #1
 8004ea0:	e758      	b.n	8004d54 <HAL_SPI_Transmit+0x30>
 8004ea2:	2001      	movs	r0, #1
 8004ea4:	e756      	b.n	8004d54 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8004ea6:	2003      	movs	r0, #3
 8004ea8:	e754      	b.n	8004d54 <HAL_SPI_Transmit+0x30>
 8004eaa:	2003      	movs	r0, #3
 8004eac:	e752      	b.n	8004d54 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8004eae:	2003      	movs	r0, #3
 8004eb0:	e750      	b.n	8004d54 <HAL_SPI_Transmit+0x30>
 8004eb2:	2003      	movs	r0, #3
 8004eb4:	e74e      	b.n	8004d54 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8004eb6:	2001      	movs	r0, #1
 8004eb8:	e74c      	b.n	8004d54 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8004eba:	2002      	movs	r0, #2
 8004ebc:	e750      	b.n	8004d60 <HAL_SPI_Transmit+0x3c>

08004ebe <HAL_SPI_TransmitReceive>:
{
 8004ebe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8004ec8:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8004ecc:	2c01      	cmp	r4, #1
 8004ece:	f000 810b 	beq.w	80050e8 <HAL_SPI_TransmitReceive+0x22a>
 8004ed2:	461d      	mov	r5, r3
 8004ed4:	4617      	mov	r7, r2
 8004ed6:	460e      	mov	r6, r1
 8004ed8:	4604      	mov	r4, r0
 8004eda:	2301      	movs	r3, #1
 8004edc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004ee0:	f7fe f8ce 	bl	8003080 <HAL_GetTick>
 8004ee4:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8004ee6:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8004eea:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8004eec:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004eee:	2801      	cmp	r0, #1
 8004ef0:	d015      	beq.n	8004f1e <HAL_SPI_TransmitReceive+0x60>
 8004ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ef6:	d00a      	beq.n	8004f0e <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 8004ef8:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004efa:	2201      	movs	r2, #1
 8004efc:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f00:	2200      	movs	r2, #0
 8004f02:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	b003      	add	sp, #12
 8004f0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f0e:	68a3      	ldr	r3, [r4, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f040 80db 	bne.w	80050cc <HAL_SPI_TransmitReceive+0x20e>
 8004f16:	2804      	cmp	r0, #4
 8004f18:	d001      	beq.n	8004f1e <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	e7ed      	b.n	8004efa <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f1e:	2e00      	cmp	r6, #0
 8004f20:	f000 80d6 	beq.w	80050d0 <HAL_SPI_TransmitReceive+0x212>
 8004f24:	2f00      	cmp	r7, #0
 8004f26:	f000 80d5 	beq.w	80050d4 <HAL_SPI_TransmitReceive+0x216>
 8004f2a:	2d00      	cmp	r5, #0
 8004f2c:	f000 80d4 	beq.w	80050d8 <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f30:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d002      	beq.n	8004f40 <HAL_SPI_TransmitReceive+0x82>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f3a:	2305      	movs	r3, #5
 8004f3c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f40:	2300      	movs	r3, #0
 8004f42:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f44:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f46:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f48:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f4a:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f4c:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f4e:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8004f50:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f52:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f54:	6823      	ldr	r3, [r4, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004f5c:	d103      	bne.n	8004f66 <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f64:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f66:	68e3      	ldr	r3, [r4, #12]
 8004f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f6c:	d010      	beq.n	8004f90 <HAL_SPI_TransmitReceive+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f6e:	6863      	ldr	r3, [r4, #4]
 8004f70:	b10b      	cbz	r3, 8004f76 <HAL_SPI_TransmitReceive+0xb8>
 8004f72:	2d01      	cmp	r5, #1
 8004f74:	d10a      	bne.n	8004f8c <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	7812      	ldrb	r2, [r2, #0]
 8004f7c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f80:	3301      	adds	r3, #1
 8004f82:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004f84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004f8c:	2501      	movs	r5, #1
 8004f8e:	e069      	b.n	8005064 <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f90:	6863      	ldr	r3, [r4, #4]
 8004f92:	b10b      	cbz	r3, 8004f98 <HAL_SPI_TransmitReceive+0xda>
 8004f94:	2d01      	cmp	r5, #1
 8004f96:	d10a      	bne.n	8004fae <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f98:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	8812      	ldrh	r2, [r2, #0]
 8004f9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fa0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fa2:	3302      	adds	r3, #2
 8004fa4:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004fa6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004fae:	2501      	movs	r5, #1
 8004fb0:	e01b      	b.n	8004fea <HAL_SPI_TransmitReceive+0x12c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fb2:	6823      	ldr	r3, [r4, #0]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	f012 0f01 	tst.w	r2, #1
 8004fba:	d00d      	beq.n	8004fd8 <HAL_SPI_TransmitReceive+0x11a>
 8004fbc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004fbe:	b292      	uxth	r2, r2
 8004fc0:	b152      	cbz	r2, 8004fd8 <HAL_SPI_TransmitReceive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fca:	3302      	adds	r3, #2
 8004fcc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004fce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004fd6:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004fd8:	f7fe f852 	bl	8003080 <HAL_GetTick>
 8004fdc:	eba0 0009 	sub.w	r0, r0, r9
 8004fe0:	4540      	cmp	r0, r8
 8004fe2:	d302      	bcc.n	8004fea <HAL_SPI_TransmitReceive+0x12c>
 8004fe4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004fe8:	d178      	bne.n	80050dc <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	b91b      	cbnz	r3, 8004ff8 <HAL_SPI_TransmitReceive+0x13a>
 8004ff0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d052      	beq.n	800509e <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	f012 0f02 	tst.w	r2, #2
 8005000:	d0d7      	beq.n	8004fb2 <HAL_SPI_TransmitReceive+0xf4>
 8005002:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005004:	b292      	uxth	r2, r2
 8005006:	2a00      	cmp	r2, #0
 8005008:	d0d3      	beq.n	8004fb2 <HAL_SPI_TransmitReceive+0xf4>
 800500a:	2d00      	cmp	r5, #0
 800500c:	d0d1      	beq.n	8004fb2 <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800500e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005010:	8812      	ldrh	r2, [r2, #0]
 8005012:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005014:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005016:	3302      	adds	r3, #2
 8005018:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800501a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800501c:	3b01      	subs	r3, #1
 800501e:	b29b      	uxth	r3, r3
 8005020:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8005022:	2500      	movs	r5, #0
 8005024:	e7c5      	b.n	8004fb2 <HAL_SPI_TransmitReceive+0xf4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	f012 0f01 	tst.w	r2, #1
 800502e:	d00d      	beq.n	800504c <HAL_SPI_TransmitReceive+0x18e>
 8005030:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005032:	b292      	uxth	r2, r2
 8005034:	b152      	cbz	r2, 800504c <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005036:	68da      	ldr	r2, [r3, #12]
 8005038:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800503a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800503c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800503e:	3301      	adds	r3, #1
 8005040:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005042:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005044:	3b01      	subs	r3, #1
 8005046:	b29b      	uxth	r3, r3
 8005048:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800504a:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800504c:	f7fe f818 	bl	8003080 <HAL_GetTick>
 8005050:	eba0 0009 	sub.w	r0, r0, r9
 8005054:	4540      	cmp	r0, r8
 8005056:	d302      	bcc.n	800505e <HAL_SPI_TransmitReceive+0x1a0>
 8005058:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800505c:	d140      	bne.n	80050e0 <HAL_SPI_TransmitReceive+0x222>
 800505e:	f1b8 0f00 	cmp.w	r8, #0
 8005062:	d03f      	beq.n	80050e4 <HAL_SPI_TransmitReceive+0x226>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005064:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005066:	b29b      	uxth	r3, r3
 8005068:	b913      	cbnz	r3, 8005070 <HAL_SPI_TransmitReceive+0x1b2>
 800506a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800506c:	b29b      	uxth	r3, r3
 800506e:	b1b3      	cbz	r3, 800509e <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	f012 0f02 	tst.w	r2, #2
 8005078:	d0d5      	beq.n	8005026 <HAL_SPI_TransmitReceive+0x168>
 800507a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800507c:	b292      	uxth	r2, r2
 800507e:	2a00      	cmp	r2, #0
 8005080:	d0d1      	beq.n	8005026 <HAL_SPI_TransmitReceive+0x168>
 8005082:	2d00      	cmp	r5, #0
 8005084:	d0cf      	beq.n	8005026 <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005086:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005088:	7812      	ldrb	r2, [r2, #0]
 800508a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800508c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800508e:	3301      	adds	r3, #1
 8005090:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005092:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005094:	3b01      	subs	r3, #1
 8005096:	b29b      	uxth	r3, r3
 8005098:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800509a:	2500      	movs	r5, #0
 800509c:	e7c3      	b.n	8005026 <HAL_SPI_TransmitReceive+0x168>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800509e:	464a      	mov	r2, r9
 80050a0:	4641      	mov	r1, r8
 80050a2:	4620      	mov	r0, r4
 80050a4:	f7ff fd7e 	bl	8004ba4 <SPI_EndRxTxTransaction>
 80050a8:	4603      	mov	r3, r0
 80050aa:	b118      	cbz	r0, 80050b4 <HAL_SPI_TransmitReceive+0x1f6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050ac:	2320      	movs	r3, #32
 80050ae:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
    goto error;
 80050b2:	e722      	b.n	8004efa <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050b4:	68a2      	ldr	r2, [r4, #8]
 80050b6:	2a00      	cmp	r2, #0
 80050b8:	f47f af1f 	bne.w	8004efa <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050bc:	9201      	str	r2, [sp, #4]
 80050be:	6822      	ldr	r2, [r4, #0]
 80050c0:	68d1      	ldr	r1, [r2, #12]
 80050c2:	9101      	str	r1, [sp, #4]
 80050c4:	6892      	ldr	r2, [r2, #8]
 80050c6:	9201      	str	r2, [sp, #4]
 80050c8:	9a01      	ldr	r2, [sp, #4]
 80050ca:	e716      	b.n	8004efa <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 80050cc:	2302      	movs	r3, #2
 80050ce:	e714      	b.n	8004efa <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e712      	b.n	8004efa <HAL_SPI_TransmitReceive+0x3c>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e710      	b.n	8004efa <HAL_SPI_TransmitReceive+0x3c>
 80050d8:	2301      	movs	r3, #1
 80050da:	e70e      	b.n	8004efa <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e70c      	b.n	8004efa <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e70a      	b.n	8004efa <HAL_SPI_TransmitReceive+0x3c>
 80050e4:	2303      	movs	r3, #3
 80050e6:	e708      	b.n	8004efa <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 80050e8:	2302      	movs	r3, #2
 80050ea:	e70c      	b.n	8004f06 <HAL_SPI_TransmitReceive+0x48>

080050ec <HAL_SPI_Receive>:
{
 80050ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	4604      	mov	r4, r0
 80050f4:	460f      	mov	r7, r1
 80050f6:	4690      	mov	r8, r2
 80050f8:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80050fa:	6843      	ldr	r3, [r0, #4]
 80050fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005100:	d019      	beq.n	8005136 <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 8005102:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8005106:	2b01      	cmp	r3, #1
 8005108:	f000 809f 	beq.w	800524a <HAL_SPI_Receive+0x15e>
 800510c:	2301      	movs	r3, #1
 800510e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005112:	f7fd ffb5 	bl	8003080 <HAL_GetTick>
 8005116:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005118:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b01      	cmp	r3, #1
 8005120:	d015      	beq.n	800514e <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 8005122:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8005124:	2301      	movs	r3, #1
 8005126:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800512a:	2300      	movs	r3, #0
 800512c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005130:	b002      	add	sp, #8
 8005132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005136:	6883      	ldr	r3, [r0, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e2      	bne.n	8005102 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800513c:	2304      	movs	r3, #4
 800513e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005142:	9500      	str	r5, [sp, #0]
 8005144:	4613      	mov	r3, r2
 8005146:	460a      	mov	r2, r1
 8005148:	f7ff feb9 	bl	8004ebe <HAL_SPI_TransmitReceive>
 800514c:	e7f0      	b.n	8005130 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 800514e:	2f00      	cmp	r7, #0
 8005150:	d06d      	beq.n	800522e <HAL_SPI_Receive+0x142>
 8005152:	f1b8 0f00 	cmp.w	r8, #0
 8005156:	d06c      	beq.n	8005232 <HAL_SPI_Receive+0x146>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005158:	2304      	movs	r3, #4
 800515a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800515e:	2300      	movs	r3, #0
 8005160:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005162:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005164:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005168:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800516c:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800516e:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005170:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005172:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005174:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005176:	68a3      	ldr	r3, [r4, #8]
 8005178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800517c:	d00b      	beq.n	8005196 <HAL_SPI_Receive+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005186:	d103      	bne.n	8005190 <HAL_SPI_Receive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800518e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005190:	68e3      	ldr	r3, [r4, #12]
 8005192:	b183      	cbz	r3, 80051b6 <HAL_SPI_Receive+0xca>
 8005194:	e02c      	b.n	80051f0 <HAL_SPI_Receive+0x104>
    SPI_1LINE_RX(hspi);
 8005196:	6822      	ldr	r2, [r4, #0]
 8005198:	6813      	ldr	r3, [r2, #0]
 800519a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	e7ed      	b.n	800517e <HAL_SPI_Receive+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051a2:	f7fd ff6d 	bl	8003080 <HAL_GetTick>
 80051a6:	1b80      	subs	r0, r0, r6
 80051a8:	42a8      	cmp	r0, r5
 80051aa:	d302      	bcc.n	80051b2 <HAL_SPI_Receive+0xc6>
 80051ac:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80051b0:	d141      	bne.n	8005236 <HAL_SPI_Receive+0x14a>
 80051b2:	2d00      	cmp	r5, #0
 80051b4:	d041      	beq.n	800523a <HAL_SPI_Receive+0x14e>
    while (hspi->RxXferCount > 0U)
 80051b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d02b      	beq.n	8005216 <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	f012 0f01 	tst.w	r2, #1
 80051c6:	d0ec      	beq.n	80051a2 <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80051ca:	7b1b      	ldrb	r3, [r3, #12]
 80051cc:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80051ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051d0:	3301      	adds	r3, #1
 80051d2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80051d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29b      	uxth	r3, r3
 80051da:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80051dc:	e7eb      	b.n	80051b6 <HAL_SPI_Receive+0xca>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051de:	f7fd ff4f 	bl	8003080 <HAL_GetTick>
 80051e2:	1b80      	subs	r0, r0, r6
 80051e4:	42a8      	cmp	r0, r5
 80051e6:	d302      	bcc.n	80051ee <HAL_SPI_Receive+0x102>
 80051e8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80051ec:	d127      	bne.n	800523e <HAL_SPI_Receive+0x152>
 80051ee:	b345      	cbz	r5, 8005242 <HAL_SPI_Receive+0x156>
    while (hspi->RxXferCount > 0U)
 80051f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	b17b      	cbz	r3, 8005216 <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	f012 0f01 	tst.w	r2, #1
 80051fe:	d0ee      	beq.n	80051de <HAL_SPI_Receive+0xf2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005204:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005206:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005208:	3302      	adds	r3, #2
 800520a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800520c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800520e:	3b01      	subs	r3, #1
 8005210:	b29b      	uxth	r3, r3
 8005212:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005214:	e7ec      	b.n	80051f0 <HAL_SPI_Receive+0x104>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005216:	4632      	mov	r2, r6
 8005218:	4629      	mov	r1, r5
 800521a:	4620      	mov	r0, r4
 800521c:	f7ff fcf6 	bl	8004c0c <SPI_EndRxTransaction>
 8005220:	b108      	cbz	r0, 8005226 <HAL_SPI_Receive+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005222:	2320      	movs	r3, #32
 8005224:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005226:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005228:	b96b      	cbnz	r3, 8005246 <HAL_SPI_Receive+0x15a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800522a:	2000      	movs	r0, #0
 800522c:	e77a      	b.n	8005124 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 800522e:	2001      	movs	r0, #1
 8005230:	e778      	b.n	8005124 <HAL_SPI_Receive+0x38>
 8005232:	2001      	movs	r0, #1
 8005234:	e776      	b.n	8005124 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8005236:	2003      	movs	r0, #3
 8005238:	e774      	b.n	8005124 <HAL_SPI_Receive+0x38>
 800523a:	2003      	movs	r0, #3
 800523c:	e772      	b.n	8005124 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 800523e:	2003      	movs	r0, #3
 8005240:	e770      	b.n	8005124 <HAL_SPI_Receive+0x38>
 8005242:	2003      	movs	r0, #3
 8005244:	e76e      	b.n	8005124 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8005246:	2001      	movs	r0, #1
 8005248:	e76c      	b.n	8005124 <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 800524a:	2002      	movs	r0, #2
 800524c:	e770      	b.n	8005130 <HAL_SPI_Receive+0x44>

0800524e <HAL_SPI_ErrorCallback>:
}
 800524e:	4770      	bx	lr

08005250 <HAL_SPI_IRQHandler>:
{
 8005250:	b530      	push	{r4, r5, lr}
 8005252:	b085      	sub	sp, #20
 8005254:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8005256:	6802      	ldr	r2, [r0, #0]
 8005258:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800525a:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800525c:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8005260:	b949      	cbnz	r1, 8005276 <HAL_SPI_IRQHandler+0x26>
 8005262:	f013 0f01 	tst.w	r3, #1
 8005266:	d006      	beq.n	8005276 <HAL_SPI_IRQHandler+0x26>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005268:	f010 0f40 	tst.w	r0, #64	; 0x40
 800526c:	d003      	beq.n	8005276 <HAL_SPI_IRQHandler+0x26>
    hspi->RxISR(hspi);
 800526e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005270:	4620      	mov	r0, r4
 8005272:	4798      	blx	r3
    return;
 8005274:	e008      	b.n	8005288 <HAL_SPI_IRQHandler+0x38>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005276:	f013 0f02 	tst.w	r3, #2
 800527a:	d007      	beq.n	800528c <HAL_SPI_IRQHandler+0x3c>
 800527c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005280:	d004      	beq.n	800528c <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 8005282:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005284:	4620      	mov	r0, r4
 8005286:	4798      	blx	r3
}
 8005288:	b005      	add	sp, #20
 800528a:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800528c:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8005290:	b91d      	cbnz	r5, 800529a <HAL_SPI_IRQHandler+0x4a>
 8005292:	b911      	cbnz	r1, 800529a <HAL_SPI_IRQHandler+0x4a>
 8005294:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005298:	d0f6      	beq.n	8005288 <HAL_SPI_IRQHandler+0x38>
 800529a:	f010 0f20 	tst.w	r0, #32
 800529e:	d0f3      	beq.n	8005288 <HAL_SPI_IRQHandler+0x38>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80052a0:	b179      	cbz	r1, 80052c2 <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80052a2:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 80052a6:	b2c9      	uxtb	r1, r1
 80052a8:	2903      	cmp	r1, #3
 80052aa:	d053      	beq.n	8005354 <HAL_SPI_IRQHandler+0x104>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80052ac:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80052ae:	f041 0104 	orr.w	r1, r1, #4
 80052b2:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052b4:	2100      	movs	r1, #0
 80052b6:	9100      	str	r1, [sp, #0]
 80052b8:	68d1      	ldr	r1, [r2, #12]
 80052ba:	9100      	str	r1, [sp, #0]
 80052bc:	6891      	ldr	r1, [r2, #8]
 80052be:	9100      	str	r1, [sp, #0]
 80052c0:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80052c2:	b165      	cbz	r5, 80052de <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80052c4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80052c6:	f041 0101 	orr.w	r1, r1, #1
 80052ca:	6561      	str	r1, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80052cc:	2100      	movs	r1, #0
 80052ce:	9102      	str	r1, [sp, #8]
 80052d0:	6891      	ldr	r1, [r2, #8]
 80052d2:	9102      	str	r1, [sp, #8]
 80052d4:	6811      	ldr	r1, [r2, #0]
 80052d6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80052da:	6011      	str	r1, [r2, #0]
 80052dc:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80052de:	f413 7f80 	tst.w	r3, #256	; 0x100
 80052e2:	d009      	beq.n	80052f8 <HAL_SPI_IRQHandler+0xa8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80052e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052e6:	f043 0308 	orr.w	r3, r3, #8
 80052ea:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80052ec:	2300      	movs	r3, #0
 80052ee:	9303      	str	r3, [sp, #12]
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	9303      	str	r3, [sp, #12]
 80052f6:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0c4      	beq.n	8005288 <HAL_SPI_IRQHandler+0x38>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80052fe:	6822      	ldr	r2, [r4, #0]
 8005300:	6853      	ldr	r3, [r2, #4]
 8005302:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005306:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8005308:	2301      	movs	r3, #1
 800530a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800530e:	f010 0f03 	tst.w	r0, #3
 8005312:	d027      	beq.n	8005364 <HAL_SPI_IRQHandler+0x114>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005314:	6822      	ldr	r2, [r4, #0]
 8005316:	6853      	ldr	r3, [r2, #4]
 8005318:	f023 0303 	bic.w	r3, r3, #3
 800531c:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800531e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005320:	b14b      	cbz	r3, 8005336 <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005322:	4a12      	ldr	r2, [pc, #72]	; (800536c <HAL_SPI_IRQHandler+0x11c>)
 8005324:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005326:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005328:	f7fd fff6 	bl	8003318 <HAL_DMA_Abort_IT>
 800532c:	b118      	cbz	r0, 8005336 <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800532e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005334:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005336:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0a5      	beq.n	8005288 <HAL_SPI_IRQHandler+0x38>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800533c:	4a0b      	ldr	r2, [pc, #44]	; (800536c <HAL_SPI_IRQHandler+0x11c>)
 800533e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005340:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005342:	f7fd ffe9 	bl	8003318 <HAL_DMA_Abort_IT>
 8005346:	2800      	cmp	r0, #0
 8005348:	d09e      	beq.n	8005288 <HAL_SPI_IRQHandler+0x38>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800534a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800534c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005350:	6563      	str	r3, [r4, #84]	; 0x54
 8005352:	e799      	b.n	8005288 <HAL_SPI_IRQHandler+0x38>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005354:	2300      	movs	r3, #0
 8005356:	9301      	str	r3, [sp, #4]
 8005358:	68d3      	ldr	r3, [r2, #12]
 800535a:	9301      	str	r3, [sp, #4]
 800535c:	6893      	ldr	r3, [r2, #8]
 800535e:	9301      	str	r3, [sp, #4]
 8005360:	9b01      	ldr	r3, [sp, #4]
        return;
 8005362:	e791      	b.n	8005288 <HAL_SPI_IRQHandler+0x38>
        HAL_SPI_ErrorCallback(hspi);
 8005364:	4620      	mov	r0, r4
 8005366:	f7ff ff72 	bl	800524e <HAL_SPI_ErrorCallback>
 800536a:	e78d      	b.n	8005288 <HAL_SPI_IRQHandler+0x38>
 800536c:	08005371 	.word	0x08005371

08005370 <SPI_DMAAbortOnError>:
{
 8005370:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005372:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005378:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 800537a:	f7ff ff68 	bl	800524e <HAL_SPI_ErrorCallback>
}
 800537e:	bd08      	pop	{r3, pc}

08005380 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005380:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005382:	6a03      	ldr	r3, [r0, #32]
 8005384:	f023 0301 	bic.w	r3, r3, #1
 8005388:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800538c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800538e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005390:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005394:	680d      	ldr	r5, [r1, #0]
 8005396:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800539a:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800539e:	688b      	ldr	r3, [r1, #8]
 80053a0:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053a2:	4d0d      	ldr	r5, [pc, #52]	; (80053d8 <TIM_OC1_SetConfig+0x58>)
 80053a4:	42a8      	cmp	r0, r5
 80053a6:	d009      	beq.n	80053bc <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a8:	4d0b      	ldr	r5, [pc, #44]	; (80053d8 <TIM_OC1_SetConfig+0x58>)
 80053aa:	42a8      	cmp	r0, r5
 80053ac:	d00d      	beq.n	80053ca <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ae:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053b0:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053b2:	684a      	ldr	r2, [r1, #4]
 80053b4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b6:	6203      	str	r3, [r0, #32]
}
 80053b8:	bc70      	pop	{r4, r5, r6}
 80053ba:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80053bc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80053c0:	68cc      	ldr	r4, [r1, #12]
 80053c2:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 80053c4:	f023 0304 	bic.w	r3, r3, #4
 80053c8:	e7ee      	b.n	80053a8 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80053ce:	694c      	ldr	r4, [r1, #20]
 80053d0:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 80053d2:	698a      	ldr	r2, [r1, #24]
 80053d4:	4322      	orrs	r2, r4
 80053d6:	e7ea      	b.n	80053ae <TIM_OC1_SetConfig+0x2e>
 80053d8:	40010000 	.word	0x40010000

080053dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053dc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053de:	6a03      	ldr	r3, [r0, #32]
 80053e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053e4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053e6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ea:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053ec:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053f0:	680d      	ldr	r5, [r1, #0]
 80053f2:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053f8:	688d      	ldr	r5, [r1, #8]
 80053fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053fe:	4d0f      	ldr	r5, [pc, #60]	; (800543c <TIM_OC3_SetConfig+0x60>)
 8005400:	42a8      	cmp	r0, r5
 8005402:	d009      	beq.n	8005418 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005404:	4d0d      	ldr	r5, [pc, #52]	; (800543c <TIM_OC3_SetConfig+0x60>)
 8005406:	42a8      	cmp	r0, r5
 8005408:	d00e      	beq.n	8005428 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800540a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800540c:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800540e:	684a      	ldr	r2, [r1, #4]
 8005410:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005412:	6203      	str	r3, [r0, #32]
}
 8005414:	bc30      	pop	{r4, r5}
 8005416:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8005418:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800541c:	68cd      	ldr	r5, [r1, #12]
 800541e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005422:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005426:	e7ed      	b.n	8005404 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005428:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800542c:	694d      	ldr	r5, [r1, #20]
 800542e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005432:	698d      	ldr	r5, [r1, #24]
 8005434:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8005438:	e7e7      	b.n	800540a <TIM_OC3_SetConfig+0x2e>
 800543a:	bf00      	nop
 800543c:	40010000 	.word	0x40010000

08005440 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005440:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005442:	6a03      	ldr	r3, [r0, #32]
 8005444:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005448:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800544c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800544e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005450:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005454:	680d      	ldr	r5, [r1, #0]
 8005456:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800545a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800545e:	688d      	ldr	r5, [r1, #8]
 8005460:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005464:	4d07      	ldr	r5, [pc, #28]	; (8005484 <TIM_OC4_SetConfig+0x44>)
 8005466:	42a8      	cmp	r0, r5
 8005468:	d006      	beq.n	8005478 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800546a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800546c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800546e:	684a      	ldr	r2, [r1, #4]
 8005470:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005472:	6203      	str	r3, [r0, #32]
}
 8005474:	bc30      	pop	{r4, r5}
 8005476:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005478:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800547c:	694d      	ldr	r5, [r1, #20]
 800547e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8005482:	e7f2      	b.n	800546a <TIM_OC4_SetConfig+0x2a>
 8005484:	40010000 	.word	0x40010000

08005488 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8005488:	2302      	movs	r3, #2
 800548a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800548e:	6802      	ldr	r2, [r0, #0]
 8005490:	6893      	ldr	r3, [r2, #8]
 8005492:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005496:	2b06      	cmp	r3, #6
 8005498:	d003      	beq.n	80054a2 <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 800549a:	6813      	ldr	r3, [r2, #0]
 800549c:	f043 0301 	orr.w	r3, r3, #1
 80054a0:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 80054a2:	2301      	movs	r3, #1
 80054a4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80054a8:	2000      	movs	r0, #0
 80054aa:	4770      	bx	lr

080054ac <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054ac:	6802      	ldr	r2, [r0, #0]
 80054ae:	68d3      	ldr	r3, [r2, #12]
 80054b0:	f043 0301 	orr.w	r3, r3, #1
 80054b4:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b6:	6802      	ldr	r2, [r0, #0]
 80054b8:	6893      	ldr	r3, [r2, #8]
 80054ba:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054be:	2b06      	cmp	r3, #6
 80054c0:	d003      	beq.n	80054ca <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 80054c2:	6813      	ldr	r3, [r2, #0]
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	6013      	str	r3, [r2, #0]
}
 80054ca:	2000      	movs	r0, #0
 80054cc:	4770      	bx	lr

080054ce <HAL_TIM_OC_DelayElapsedCallback>:
}
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIM_IC_CaptureCallback>:
}
 80054d0:	4770      	bx	lr

080054d2 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80054d2:	4770      	bx	lr

080054d4 <HAL_TIM_TriggerCallback>:
}
 80054d4:	4770      	bx	lr

080054d6 <HAL_TIM_IRQHandler>:
{
 80054d6:	b510      	push	{r4, lr}
 80054d8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054da:	6803      	ldr	r3, [r0, #0]
 80054dc:	691a      	ldr	r2, [r3, #16]
 80054de:	f012 0f02 	tst.w	r2, #2
 80054e2:	d011      	beq.n	8005508 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	f012 0f02 	tst.w	r2, #2
 80054ea:	d00d      	beq.n	8005508 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054ec:	f06f 0202 	mvn.w	r2, #2
 80054f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054f2:	2301      	movs	r3, #1
 80054f4:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054f6:	6803      	ldr	r3, [r0, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	f013 0f03 	tst.w	r3, #3
 80054fe:	d070      	beq.n	80055e2 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8005500:	f7ff ffe6 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005504:	2300      	movs	r3, #0
 8005506:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	f012 0f04 	tst.w	r2, #4
 8005510:	d012      	beq.n	8005538 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	f012 0f04 	tst.w	r2, #4
 8005518:	d00e      	beq.n	8005538 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800551a:	f06f 0204 	mvn.w	r2, #4
 800551e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005520:	2302      	movs	r3, #2
 8005522:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f413 7f40 	tst.w	r3, #768	; 0x300
 800552c:	d05f      	beq.n	80055ee <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800552e:	4620      	mov	r0, r4
 8005530:	f7ff ffce 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005534:	2300      	movs	r3, #0
 8005536:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	f012 0f08 	tst.w	r2, #8
 8005540:	d012      	beq.n	8005568 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005542:	68da      	ldr	r2, [r3, #12]
 8005544:	f012 0f08 	tst.w	r2, #8
 8005548:	d00e      	beq.n	8005568 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800554a:	f06f 0208 	mvn.w	r2, #8
 800554e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005550:	2304      	movs	r3, #4
 8005552:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	f013 0f03 	tst.w	r3, #3
 800555c:	d04e      	beq.n	80055fc <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800555e:	4620      	mov	r0, r4
 8005560:	f7ff ffb6 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005564:	2300      	movs	r3, #0
 8005566:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	f012 0f10 	tst.w	r2, #16
 8005570:	d012      	beq.n	8005598 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	f012 0f10 	tst.w	r2, #16
 8005578:	d00e      	beq.n	8005598 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800557a:	f06f 0210 	mvn.w	r2, #16
 800557e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005580:	2308      	movs	r3, #8
 8005582:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	f413 7f40 	tst.w	r3, #768	; 0x300
 800558c:	d03d      	beq.n	800560a <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800558e:	4620      	mov	r0, r4
 8005590:	f7ff ff9e 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005594:	2300      	movs	r3, #0
 8005596:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	691a      	ldr	r2, [r3, #16]
 800559c:	f012 0f01 	tst.w	r2, #1
 80055a0:	d003      	beq.n	80055aa <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	f012 0f01 	tst.w	r2, #1
 80055a8:	d136      	bne.n	8005618 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	691a      	ldr	r2, [r3, #16]
 80055ae:	f012 0f80 	tst.w	r2, #128	; 0x80
 80055b2:	d003      	beq.n	80055bc <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80055ba:	d134      	bne.n	8005626 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	691a      	ldr	r2, [r3, #16]
 80055c0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80055c4:	d003      	beq.n	80055ce <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80055cc:	d132      	bne.n	8005634 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	f012 0f20 	tst.w	r2, #32
 80055d6:	d003      	beq.n	80055e0 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	f012 0f20 	tst.w	r2, #32
 80055de:	d130      	bne.n	8005642 <HAL_TIM_IRQHandler+0x16c>
}
 80055e0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e2:	f7ff ff74 	bl	80054ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e6:	4620      	mov	r0, r4
 80055e8:	f7ff ff73 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedCallback>
 80055ec:	e78a      	b.n	8005504 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ee:	4620      	mov	r0, r4
 80055f0:	f7ff ff6d 	bl	80054ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f4:	4620      	mov	r0, r4
 80055f6:	f7ff ff6c 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedCallback>
 80055fa:	e79b      	b.n	8005534 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fc:	4620      	mov	r0, r4
 80055fe:	f7ff ff66 	bl	80054ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005602:	4620      	mov	r0, r4
 8005604:	f7ff ff65 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedCallback>
 8005608:	e7ac      	b.n	8005564 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560a:	4620      	mov	r0, r4
 800560c:	f7ff ff5f 	bl	80054ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005610:	4620      	mov	r0, r4
 8005612:	f7ff ff5e 	bl	80054d2 <HAL_TIM_PWM_PulseFinishedCallback>
 8005616:	e7bd      	b.n	8005594 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005618:	f06f 0201 	mvn.w	r2, #1
 800561c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800561e:	4620      	mov	r0, r4
 8005620:	f002 fc1c 	bl	8007e5c <HAL_TIM_PeriodElapsedCallback>
 8005624:	e7c1      	b.n	80055aa <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005626:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800562a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800562c:	4620      	mov	r0, r4
 800562e:	f000 f983 	bl	8005938 <HAL_TIMEx_BreakCallback>
 8005632:	e7c3      	b.n	80055bc <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005634:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005638:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800563a:	4620      	mov	r0, r4
 800563c:	f7ff ff4a 	bl	80054d4 <HAL_TIM_TriggerCallback>
 8005640:	e7c5      	b.n	80055ce <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005642:	f06f 0220 	mvn.w	r2, #32
 8005646:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005648:	4620      	mov	r0, r4
 800564a:	f000 f974 	bl	8005936 <HAL_TIMEx_CommutCallback>
}
 800564e:	e7c7      	b.n	80055e0 <HAL_TIM_IRQHandler+0x10a>

08005650 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005650:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005652:	4a25      	ldr	r2, [pc, #148]	; (80056e8 <TIM_Base_SetConfig+0x98>)
 8005654:	4290      	cmp	r0, r2
 8005656:	d00e      	beq.n	8005676 <TIM_Base_SetConfig+0x26>
 8005658:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800565c:	d00b      	beq.n	8005676 <TIM_Base_SetConfig+0x26>
 800565e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005662:	4290      	cmp	r0, r2
 8005664:	d007      	beq.n	8005676 <TIM_Base_SetConfig+0x26>
 8005666:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800566a:	4290      	cmp	r0, r2
 800566c:	d003      	beq.n	8005676 <TIM_Base_SetConfig+0x26>
 800566e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005672:	4290      	cmp	r0, r2
 8005674:	d103      	bne.n	800567e <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800567a:	684a      	ldr	r2, [r1, #4]
 800567c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800567e:	4a1a      	ldr	r2, [pc, #104]	; (80056e8 <TIM_Base_SetConfig+0x98>)
 8005680:	4290      	cmp	r0, r2
 8005682:	d01a      	beq.n	80056ba <TIM_Base_SetConfig+0x6a>
 8005684:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005688:	d017      	beq.n	80056ba <TIM_Base_SetConfig+0x6a>
 800568a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800568e:	4290      	cmp	r0, r2
 8005690:	d013      	beq.n	80056ba <TIM_Base_SetConfig+0x6a>
 8005692:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005696:	4290      	cmp	r0, r2
 8005698:	d00f      	beq.n	80056ba <TIM_Base_SetConfig+0x6a>
 800569a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800569e:	4290      	cmp	r0, r2
 80056a0:	d00b      	beq.n	80056ba <TIM_Base_SetConfig+0x6a>
 80056a2:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80056a6:	4290      	cmp	r0, r2
 80056a8:	d007      	beq.n	80056ba <TIM_Base_SetConfig+0x6a>
 80056aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056ae:	4290      	cmp	r0, r2
 80056b0:	d003      	beq.n	80056ba <TIM_Base_SetConfig+0x6a>
 80056b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80056b6:	4290      	cmp	r0, r2
 80056b8:	d103      	bne.n	80056c2 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056be:	68ca      	ldr	r2, [r1, #12]
 80056c0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056c6:	694a      	ldr	r2, [r1, #20]
 80056c8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80056ca:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056cc:	688b      	ldr	r3, [r1, #8]
 80056ce:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80056d0:	680b      	ldr	r3, [r1, #0]
 80056d2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056d4:	4b04      	ldr	r3, [pc, #16]	; (80056e8 <TIM_Base_SetConfig+0x98>)
 80056d6:	4298      	cmp	r0, r3
 80056d8:	d002      	beq.n	80056e0 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 80056da:	2301      	movs	r3, #1
 80056dc:	6143      	str	r3, [r0, #20]
}
 80056de:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80056e0:	690b      	ldr	r3, [r1, #16]
 80056e2:	6303      	str	r3, [r0, #48]	; 0x30
 80056e4:	e7f9      	b.n	80056da <TIM_Base_SetConfig+0x8a>
 80056e6:	bf00      	nop
 80056e8:	40010000 	.word	0x40010000

080056ec <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80056ec:	b1a8      	cbz	r0, 800571a <HAL_TIM_Base_Init+0x2e>
{
 80056ee:	b510      	push	{r4, lr}
 80056f0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80056f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80056f6:	b15b      	cbz	r3, 8005710 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80056f8:	2302      	movs	r3, #2
 80056fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056fe:	1d21      	adds	r1, r4, #4
 8005700:	6820      	ldr	r0, [r4, #0]
 8005702:	f7ff ffa5 	bl	8005650 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005706:	2301      	movs	r3, #1
 8005708:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800570c:	2000      	movs	r0, #0
}
 800570e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005710:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005714:	f002 fd64 	bl	80081e0 <HAL_TIM_Base_MspInit>
 8005718:	e7ee      	b.n	80056f8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800571a:	2001      	movs	r0, #1
}
 800571c:	4770      	bx	lr

0800571e <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800571e:	b1a8      	cbz	r0, 800574c <HAL_TIM_PWM_Init+0x2e>
{
 8005720:	b510      	push	{r4, lr}
 8005722:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005724:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005728:	b15b      	cbz	r3, 8005742 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800572a:	2302      	movs	r3, #2
 800572c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005730:	1d21      	adds	r1, r4, #4
 8005732:	6820      	ldr	r0, [r4, #0]
 8005734:	f7ff ff8c 	bl	8005650 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005738:	2301      	movs	r3, #1
 800573a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800573e:	2000      	movs	r0, #0
}
 8005740:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005742:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005746:	f002 fd33 	bl	80081b0 <HAL_TIM_PWM_MspInit>
 800574a:	e7ee      	b.n	800572a <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800574c:	2001      	movs	r0, #1
}
 800574e:	4770      	bx	lr

08005750 <TIM_OC2_SetConfig>:
{
 8005750:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005752:	6a03      	ldr	r3, [r0, #32]
 8005754:	f023 0310 	bic.w	r3, r3, #16
 8005758:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800575a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800575c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800575e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005760:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005764:	680d      	ldr	r5, [r1, #0]
 8005766:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800576a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800576e:	688d      	ldr	r5, [r1, #8]
 8005770:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005774:	4d0e      	ldr	r5, [pc, #56]	; (80057b0 <TIM_OC2_SetConfig+0x60>)
 8005776:	42a8      	cmp	r0, r5
 8005778:	d009      	beq.n	800578e <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800577a:	4d0d      	ldr	r5, [pc, #52]	; (80057b0 <TIM_OC2_SetConfig+0x60>)
 800577c:	42a8      	cmp	r0, r5
 800577e:	d00e      	beq.n	800579e <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8005780:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005782:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005784:	684a      	ldr	r2, [r1, #4]
 8005786:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005788:	6203      	str	r3, [r0, #32]
}
 800578a:	bc30      	pop	{r4, r5}
 800578c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800578e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005792:	68cd      	ldr	r5, [r1, #12]
 8005794:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800579c:	e7ed      	b.n	800577a <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800579e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057a2:	694d      	ldr	r5, [r1, #20]
 80057a4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057a8:	698d      	ldr	r5, [r1, #24]
 80057aa:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80057ae:	e7e7      	b.n	8005780 <TIM_OC2_SetConfig+0x30>
 80057b0:	40010000 	.word	0x40010000

080057b4 <HAL_TIM_PWM_ConfigChannel>:
{
 80057b4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80057b6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d066      	beq.n	800588c <HAL_TIM_PWM_ConfigChannel+0xd8>
 80057be:	460d      	mov	r5, r1
 80057c0:	4604      	mov	r4, r0
 80057c2:	2301      	movs	r3, #1
 80057c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80057c8:	2302      	movs	r3, #2
 80057ca:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80057ce:	2a0c      	cmp	r2, #12
 80057d0:	d81a      	bhi.n	8005808 <HAL_TIM_PWM_ConfigChannel+0x54>
 80057d2:	e8df f002 	tbb	[pc, r2]
 80057d6:	1907      	.short	0x1907
 80057d8:	19201919 	.word	0x19201919
 80057dc:	19341919 	.word	0x19341919
 80057e0:	1919      	.short	0x1919
 80057e2:	47          	.byte	0x47
 80057e3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057e4:	6800      	ldr	r0, [r0, #0]
 80057e6:	f7ff fdcb 	bl	8005380 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057ea:	6822      	ldr	r2, [r4, #0]
 80057ec:	6993      	ldr	r3, [r2, #24]
 80057ee:	f043 0308 	orr.w	r3, r3, #8
 80057f2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057f4:	6822      	ldr	r2, [r4, #0]
 80057f6:	6993      	ldr	r3, [r2, #24]
 80057f8:	f023 0304 	bic.w	r3, r3, #4
 80057fc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057fe:	6822      	ldr	r2, [r4, #0]
 8005800:	6993      	ldr	r3, [r2, #24]
 8005802:	6929      	ldr	r1, [r5, #16]
 8005804:	430b      	orrs	r3, r1
 8005806:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8005808:	2301      	movs	r3, #1
 800580a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800580e:	2000      	movs	r0, #0
 8005810:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005814:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005816:	6800      	ldr	r0, [r0, #0]
 8005818:	f7ff ff9a 	bl	8005750 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800581c:	6822      	ldr	r2, [r4, #0]
 800581e:	6993      	ldr	r3, [r2, #24]
 8005820:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005824:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005826:	6822      	ldr	r2, [r4, #0]
 8005828:	6993      	ldr	r3, [r2, #24]
 800582a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800582e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005830:	6822      	ldr	r2, [r4, #0]
 8005832:	6993      	ldr	r3, [r2, #24]
 8005834:	6929      	ldr	r1, [r5, #16]
 8005836:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800583a:	6193      	str	r3, [r2, #24]
      break;
 800583c:	e7e4      	b.n	8005808 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800583e:	6800      	ldr	r0, [r0, #0]
 8005840:	f7ff fdcc 	bl	80053dc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005844:	6822      	ldr	r2, [r4, #0]
 8005846:	69d3      	ldr	r3, [r2, #28]
 8005848:	f043 0308 	orr.w	r3, r3, #8
 800584c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800584e:	6822      	ldr	r2, [r4, #0]
 8005850:	69d3      	ldr	r3, [r2, #28]
 8005852:	f023 0304 	bic.w	r3, r3, #4
 8005856:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005858:	6822      	ldr	r2, [r4, #0]
 800585a:	69d3      	ldr	r3, [r2, #28]
 800585c:	6929      	ldr	r1, [r5, #16]
 800585e:	430b      	orrs	r3, r1
 8005860:	61d3      	str	r3, [r2, #28]
      break;
 8005862:	e7d1      	b.n	8005808 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005864:	6800      	ldr	r0, [r0, #0]
 8005866:	f7ff fdeb 	bl	8005440 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800586a:	6822      	ldr	r2, [r4, #0]
 800586c:	69d3      	ldr	r3, [r2, #28]
 800586e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005872:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005874:	6822      	ldr	r2, [r4, #0]
 8005876:	69d3      	ldr	r3, [r2, #28]
 8005878:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800587c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800587e:	6822      	ldr	r2, [r4, #0]
 8005880:	69d3      	ldr	r3, [r2, #28]
 8005882:	6929      	ldr	r1, [r5, #16]
 8005884:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005888:	61d3      	str	r3, [r2, #28]
      break;
 800588a:	e7bd      	b.n	8005808 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 800588c:	2002      	movs	r0, #2
 800588e:	e7c1      	b.n	8005814 <HAL_TIM_PWM_ConfigChannel+0x60>

08005890 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005890:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005892:	f001 011f 	and.w	r1, r1, #31
 8005896:	2301      	movs	r3, #1
 8005898:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800589c:	6a03      	ldr	r3, [r0, #32]
 800589e:	ea23 0304 	bic.w	r3, r3, r4
 80058a2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058a4:	6a03      	ldr	r3, [r0, #32]
 80058a6:	408a      	lsls	r2, r1
 80058a8:	4313      	orrs	r3, r2
 80058aa:	6203      	str	r3, [r0, #32]
}
 80058ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058b0:	4770      	bx	lr
	...

080058b4 <HAL_TIM_PWM_Start>:
{
 80058b4:	b510      	push	{r4, lr}
 80058b6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058b8:	2201      	movs	r2, #1
 80058ba:	6800      	ldr	r0, [r0, #0]
 80058bc:	f7ff ffe8 	bl	8005890 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	4a0a      	ldr	r2, [pc, #40]	; (80058ec <HAL_TIM_PWM_Start+0x38>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00b      	beq.n	80058e0 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058c8:	6822      	ldr	r2, [r4, #0]
 80058ca:	6893      	ldr	r3, [r2, #8]
 80058cc:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d0:	2b06      	cmp	r3, #6
 80058d2:	d003      	beq.n	80058dc <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 80058d4:	6813      	ldr	r3, [r2, #0]
 80058d6:	f043 0301 	orr.w	r3, r3, #1
 80058da:	6013      	str	r3, [r2, #0]
}
 80058dc:	2000      	movs	r0, #0
 80058de:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 80058e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058e6:	645a      	str	r2, [r3, #68]	; 0x44
 80058e8:	e7ee      	b.n	80058c8 <HAL_TIM_PWM_Start+0x14>
 80058ea:	bf00      	nop
 80058ec:	40010000 	.word	0x40010000

080058f0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d01c      	beq.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 80058f8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80058fa:	2601      	movs	r6, #1
 80058fc:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005900:	2302      	movs	r3, #2
 8005902:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005906:	6802      	ldr	r2, [r0, #0]
 8005908:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800590a:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800590c:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005910:	680c      	ldr	r4, [r1, #0]
 8005912:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005914:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005918:	684b      	ldr	r3, [r1, #4]
 800591a:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800591c:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800591e:	6802      	ldr	r2, [r0, #0]
 8005920:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005922:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005926:	2300      	movs	r3, #0
 8005928:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800592c:	4618      	mov	r0, r3
}
 800592e:	bc70      	pop	{r4, r5, r6}
 8005930:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005932:	2002      	movs	r0, #2
}
 8005934:	4770      	bx	lr

08005936 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005936:	4770      	bx	lr

08005938 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005938:	4770      	bx	lr

0800593a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800593a:	6802      	ldr	r2, [r0, #0]
 800593c:	68d3      	ldr	r3, [r2, #12]
 800593e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005942:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005944:	6802      	ldr	r2, [r0, #0]
 8005946:	6953      	ldr	r3, [r2, #20]
 8005948:	f023 0301 	bic.w	r3, r3, #1
 800594c:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800594e:	2320      	movs	r3, #32
 8005950:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8005954:	4770      	bx	lr

08005956 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005956:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b21      	cmp	r3, #33	; 0x21
 800595e:	d12a      	bne.n	80059b6 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005960:	6883      	ldr	r3, [r0, #8]
 8005962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005966:	d016      	beq.n	8005996 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005968:	6a03      	ldr	r3, [r0, #32]
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	6202      	str	r2, [r0, #32]
 800596e:	781a      	ldrb	r2, [r3, #0]
 8005970:	6803      	ldr	r3, [r0, #0]
 8005972:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005974:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8005976:	3b01      	subs	r3, #1
 8005978:	b29b      	uxth	r3, r3
 800597a:	84c3      	strh	r3, [r0, #38]	; 0x26
 800597c:	b9eb      	cbnz	r3, 80059ba <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800597e:	6802      	ldr	r2, [r0, #0]
 8005980:	68d3      	ldr	r3, [r2, #12]
 8005982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005986:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005988:	6802      	ldr	r2, [r0, #0]
 800598a:	68d3      	ldr	r3, [r2, #12]
 800598c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005990:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8005992:	2000      	movs	r0, #0
 8005994:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005996:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	6802      	ldr	r2, [r0, #0]
 800599c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a0:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80059a2:	6903      	ldr	r3, [r0, #16]
 80059a4:	b91b      	cbnz	r3, 80059ae <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 80059a6:	6a03      	ldr	r3, [r0, #32]
 80059a8:	3302      	adds	r3, #2
 80059aa:	6203      	str	r3, [r0, #32]
 80059ac:	e7e2      	b.n	8005974 <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 80059ae:	6a03      	ldr	r3, [r0, #32]
 80059b0:	3301      	adds	r3, #1
 80059b2:	6203      	str	r3, [r0, #32]
 80059b4:	e7de      	b.n	8005974 <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 80059b6:	2002      	movs	r0, #2
 80059b8:	4770      	bx	lr
    return HAL_OK;
 80059ba:	2000      	movs	r0, #0
  }
}
 80059bc:	4770      	bx	lr
	...

080059c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059c4:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059c6:	6802      	ldr	r2, [r0, #0]
 80059c8:	6913      	ldr	r3, [r2, #16]
 80059ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80059ce:	68c1      	ldr	r1, [r0, #12]
 80059d0:	430b      	orrs	r3, r1
 80059d2:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059d4:	6883      	ldr	r3, [r0, #8]
 80059d6:	6902      	ldr	r2, [r0, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	6942      	ldr	r2, [r0, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	69c2      	ldr	r2, [r0, #28]
 80059e0:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80059e2:	6801      	ldr	r1, [r0, #0]
 80059e4:	68cb      	ldr	r3, [r1, #12]
 80059e6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80059ea:	f023 030c 	bic.w	r3, r3, #12
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059f2:	6802      	ldr	r2, [r0, #0]
 80059f4:	6953      	ldr	r3, [r2, #20]
 80059f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059fa:	6981      	ldr	r1, [r0, #24]
 80059fc:	430b      	orrs	r3, r1
 80059fe:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a00:	69c3      	ldr	r3, [r0, #28]
 8005a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a06:	d060      	beq.n	8005aca <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a08:	6803      	ldr	r3, [r0, #0]
 8005a0a:	4ab8      	ldr	r2, [pc, #736]	; (8005cec <UART_SetConfig+0x32c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	f000 8114 	beq.w	8005c3a <UART_SetConfig+0x27a>
 8005a12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a16:	4293      	cmp	r3, r2
 8005a18:	f000 810f 	beq.w	8005c3a <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005a1c:	f7ff f83c 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 8005a20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a28:	6865      	ldr	r5, [r4, #4]
 8005a2a:	00ad      	lsls	r5, r5, #2
 8005a2c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005a30:	4faf      	ldr	r7, [pc, #700]	; (8005cf0 <UART_SetConfig+0x330>)
 8005a32:	fba7 3505 	umull	r3, r5, r7, r5
 8005a36:	096d      	lsrs	r5, r5, #5
 8005a38:	012e      	lsls	r6, r5, #4
 8005a3a:	f7ff f82d 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 8005a3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a46:	6865      	ldr	r5, [r4, #4]
 8005a48:	00ad      	lsls	r5, r5, #2
 8005a4a:	fbb0 f9f5 	udiv	r9, r0, r5
 8005a4e:	f7ff f823 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 8005a52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a5a:	6865      	ldr	r5, [r4, #4]
 8005a5c:	00ad      	lsls	r5, r5, #2
 8005a5e:	fbb0 f5f5 	udiv	r5, r0, r5
 8005a62:	fba7 3505 	umull	r3, r5, r7, r5
 8005a66:	096d      	lsrs	r5, r5, #5
 8005a68:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005a6c:	fb08 9515 	mls	r5, r8, r5, r9
 8005a70:	012d      	lsls	r5, r5, #4
 8005a72:	3532      	adds	r5, #50	; 0x32
 8005a74:	fba7 3505 	umull	r3, r5, r7, r5
 8005a78:	096d      	lsrs	r5, r5, #5
 8005a7a:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8005a7e:	4435      	add	r5, r6
 8005a80:	f7ff f80a 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 8005a84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a8c:	6866      	ldr	r6, [r4, #4]
 8005a8e:	00b6      	lsls	r6, r6, #2
 8005a90:	fbb0 f6f6 	udiv	r6, r0, r6
 8005a94:	f7ff f800 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 8005a98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005aa0:	6863      	ldr	r3, [r4, #4]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	fbb0 f0f3 	udiv	r0, r0, r3
 8005aa8:	fba7 3000 	umull	r3, r0, r7, r0
 8005aac:	0940      	lsrs	r0, r0, #5
 8005aae:	fb08 6810 	mls	r8, r8, r0, r6
 8005ab2:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8005ab6:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005aba:	fba7 3708 	umull	r3, r7, r7, r8
 8005abe:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	442f      	add	r7, r5
 8005ac6:	609f      	str	r7, [r3, #8]
    }
  }
}
 8005ac8:	e10d      	b.n	8005ce6 <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005aca:	6803      	ldr	r3, [r0, #0]
 8005acc:	4a87      	ldr	r2, [pc, #540]	; (8005cec <UART_SetConfig+0x32c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d05b      	beq.n	8005b8a <UART_SetConfig+0x1ca>
 8005ad2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d057      	beq.n	8005b8a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005ada:	f7fe ffdd 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 8005ade:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ae2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ae6:	6865      	ldr	r5, [r4, #4]
 8005ae8:	006d      	lsls	r5, r5, #1
 8005aea:	fbb0 f5f5 	udiv	r5, r0, r5
 8005aee:	4f80      	ldr	r7, [pc, #512]	; (8005cf0 <UART_SetConfig+0x330>)
 8005af0:	fba7 3505 	umull	r3, r5, r7, r5
 8005af4:	096d      	lsrs	r5, r5, #5
 8005af6:	012e      	lsls	r6, r5, #4
 8005af8:	f7fe ffce 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 8005afc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b04:	6865      	ldr	r5, [r4, #4]
 8005b06:	006d      	lsls	r5, r5, #1
 8005b08:	fbb0 f9f5 	udiv	r9, r0, r5
 8005b0c:	f7fe ffc4 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 8005b10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b18:	6865      	ldr	r5, [r4, #4]
 8005b1a:	006d      	lsls	r5, r5, #1
 8005b1c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005b20:	fba7 3505 	umull	r3, r5, r7, r5
 8005b24:	096d      	lsrs	r5, r5, #5
 8005b26:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005b2a:	fb08 9515 	mls	r5, r8, r5, r9
 8005b2e:	00ed      	lsls	r5, r5, #3
 8005b30:	3532      	adds	r5, #50	; 0x32
 8005b32:	fba7 3505 	umull	r3, r5, r7, r5
 8005b36:	096d      	lsrs	r5, r5, #5
 8005b38:	006d      	lsls	r5, r5, #1
 8005b3a:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8005b3e:	4435      	add	r5, r6
 8005b40:	f7fe ffaa 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 8005b44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b4c:	6866      	ldr	r6, [r4, #4]
 8005b4e:	0076      	lsls	r6, r6, #1
 8005b50:	fbb0 f6f6 	udiv	r6, r0, r6
 8005b54:	f7fe ffa0 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 8005b58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b60:	6863      	ldr	r3, [r4, #4]
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b68:	fba7 2303 	umull	r2, r3, r7, r3
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	fb08 6813 	mls	r8, r8, r3, r6
 8005b72:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8005b76:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005b7a:	fba7 3708 	umull	r3, r7, r7, r8
 8005b7e:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	442f      	add	r7, r5
 8005b86:	609f      	str	r7, [r3, #8]
 8005b88:	e0ad      	b.n	8005ce6 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005b8a:	f7fe ff95 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8005b8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b96:	6865      	ldr	r5, [r4, #4]
 8005b98:	006d      	lsls	r5, r5, #1
 8005b9a:	fbb0 f5f5 	udiv	r5, r0, r5
 8005b9e:	4f54      	ldr	r7, [pc, #336]	; (8005cf0 <UART_SetConfig+0x330>)
 8005ba0:	fba7 3505 	umull	r3, r5, r7, r5
 8005ba4:	096d      	lsrs	r5, r5, #5
 8005ba6:	012e      	lsls	r6, r5, #4
 8005ba8:	f7fe ff86 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8005bac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bb4:	6865      	ldr	r5, [r4, #4]
 8005bb6:	006d      	lsls	r5, r5, #1
 8005bb8:	fbb0 f9f5 	udiv	r9, r0, r5
 8005bbc:	f7fe ff7c 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8005bc0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bc8:	6865      	ldr	r5, [r4, #4]
 8005bca:	006d      	lsls	r5, r5, #1
 8005bcc:	fbb0 f5f5 	udiv	r5, r0, r5
 8005bd0:	fba7 3505 	umull	r3, r5, r7, r5
 8005bd4:	096d      	lsrs	r5, r5, #5
 8005bd6:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005bda:	fb08 9515 	mls	r5, r8, r5, r9
 8005bde:	00ed      	lsls	r5, r5, #3
 8005be0:	3532      	adds	r5, #50	; 0x32
 8005be2:	fba7 3505 	umull	r3, r5, r7, r5
 8005be6:	096d      	lsrs	r5, r5, #5
 8005be8:	006d      	lsls	r5, r5, #1
 8005bea:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8005bee:	4435      	add	r5, r6
 8005bf0:	f7fe ff62 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8005bf4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bf8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bfc:	6866      	ldr	r6, [r4, #4]
 8005bfe:	0076      	lsls	r6, r6, #1
 8005c00:	fbb0 f6f6 	udiv	r6, r0, r6
 8005c04:	f7fe ff58 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8005c08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c10:	6863      	ldr	r3, [r4, #4]
 8005c12:	005b      	lsls	r3, r3, #1
 8005c14:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c18:	fba7 2303 	umull	r2, r3, r7, r3
 8005c1c:	095b      	lsrs	r3, r3, #5
 8005c1e:	fb08 6813 	mls	r8, r8, r3, r6
 8005c22:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8005c26:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005c2a:	fba7 3708 	umull	r3, r7, r7, r8
 8005c2e:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	442f      	add	r7, r5
 8005c36:	609f      	str	r7, [r3, #8]
 8005c38:	e055      	b.n	8005ce6 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005c3a:	f7fe ff3d 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8005c3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c46:	6865      	ldr	r5, [r4, #4]
 8005c48:	00ad      	lsls	r5, r5, #2
 8005c4a:	fbb0 f5f5 	udiv	r5, r0, r5
 8005c4e:	4f28      	ldr	r7, [pc, #160]	; (8005cf0 <UART_SetConfig+0x330>)
 8005c50:	fba7 3505 	umull	r3, r5, r7, r5
 8005c54:	096d      	lsrs	r5, r5, #5
 8005c56:	012e      	lsls	r6, r5, #4
 8005c58:	f7fe ff2e 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8005c5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c64:	6865      	ldr	r5, [r4, #4]
 8005c66:	00ad      	lsls	r5, r5, #2
 8005c68:	fbb0 f9f5 	udiv	r9, r0, r5
 8005c6c:	f7fe ff24 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8005c70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c78:	6865      	ldr	r5, [r4, #4]
 8005c7a:	00ad      	lsls	r5, r5, #2
 8005c7c:	fbb0 f5f5 	udiv	r5, r0, r5
 8005c80:	fba7 3505 	umull	r3, r5, r7, r5
 8005c84:	096d      	lsrs	r5, r5, #5
 8005c86:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005c8a:	fb08 9515 	mls	r5, r8, r5, r9
 8005c8e:	012d      	lsls	r5, r5, #4
 8005c90:	3532      	adds	r5, #50	; 0x32
 8005c92:	fba7 3505 	umull	r3, r5, r7, r5
 8005c96:	096d      	lsrs	r5, r5, #5
 8005c98:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8005c9c:	4435      	add	r5, r6
 8005c9e:	f7fe ff0b 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8005ca2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ca6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005caa:	6866      	ldr	r6, [r4, #4]
 8005cac:	00b6      	lsls	r6, r6, #2
 8005cae:	fbb0 f6f6 	udiv	r6, r0, r6
 8005cb2:	f7fe ff01 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8005cb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005cba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005cbe:	6863      	ldr	r3, [r4, #4]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	fbb0 f0f3 	udiv	r0, r0, r3
 8005cc6:	fba7 3000 	umull	r3, r0, r7, r0
 8005cca:	0940      	lsrs	r0, r0, #5
 8005ccc:	fb08 6810 	mls	r8, r8, r0, r6
 8005cd0:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8005cd4:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005cd8:	fba7 3708 	umull	r3, r7, r7, r8
 8005cdc:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	442f      	add	r7, r5
 8005ce4:	609f      	str	r7, [r3, #8]
}
 8005ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cea:	bf00      	nop
 8005cec:	40011000 	.word	0x40011000
 8005cf0:	51eb851f 	.word	0x51eb851f

08005cf4 <UART_WaitOnFlagUntilTimeout>:
{
 8005cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf8:	4605      	mov	r5, r0
 8005cfa:	460f      	mov	r7, r1
 8005cfc:	4616      	mov	r6, r2
 8005cfe:	4698      	mov	r8, r3
 8005d00:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d02:	682b      	ldr	r3, [r5, #0]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	ea37 0303 	bics.w	r3, r7, r3
 8005d0a:	bf0c      	ite	eq
 8005d0c:	2301      	moveq	r3, #1
 8005d0e:	2300      	movne	r3, #0
 8005d10:	42b3      	cmp	r3, r6
 8005d12:	d11d      	bne.n	8005d50 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8005d14:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8005d18:	d0f3      	beq.n	8005d02 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d1a:	b12c      	cbz	r4, 8005d28 <UART_WaitOnFlagUntilTimeout+0x34>
 8005d1c:	f7fd f9b0 	bl	8003080 <HAL_GetTick>
 8005d20:	eba0 0008 	sub.w	r0, r0, r8
 8005d24:	42a0      	cmp	r0, r4
 8005d26:	d9ec      	bls.n	8005d02 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d28:	682a      	ldr	r2, [r5, #0]
 8005d2a:	68d3      	ldr	r3, [r2, #12]
 8005d2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d30:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d32:	682a      	ldr	r2, [r5, #0]
 8005d34:	6953      	ldr	r3, [r2, #20]
 8005d36:	f023 0301 	bic.w	r3, r3, #1
 8005d3a:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8005d3c:	2320      	movs	r3, #32
 8005d3e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005d42:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8005d46:	2300      	movs	r3, #0
 8005d48:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8005d4c:	2003      	movs	r0, #3
 8005d4e:	e000      	b.n	8005d52 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8005d50:	2000      	movs	r0, #0
}
 8005d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d56 <HAL_UART_Init>:
  if (huart == NULL)
 8005d56:	b358      	cbz	r0, 8005db0 <HAL_UART_Init+0x5a>
{
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005d5c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005d60:	b30b      	cbz	r3, 8005da6 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005d62:	2324      	movs	r3, #36	; 0x24
 8005d64:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005d68:	6822      	ldr	r2, [r4, #0]
 8005d6a:	68d3      	ldr	r3, [r2, #12]
 8005d6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d70:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005d72:	4620      	mov	r0, r4
 8005d74:	f7ff fe24 	bl	80059c0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d78:	6822      	ldr	r2, [r4, #0]
 8005d7a:	6913      	ldr	r3, [r2, #16]
 8005d7c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005d80:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d82:	6822      	ldr	r2, [r4, #0]
 8005d84:	6953      	ldr	r3, [r2, #20]
 8005d86:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005d8a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8005d8c:	6822      	ldr	r2, [r4, #0]
 8005d8e:	68d3      	ldr	r3, [r2, #12]
 8005d90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d94:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d96:	2000      	movs	r0, #0
 8005d98:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005d9a:	2320      	movs	r3, #32
 8005d9c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005da0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8005da4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005da6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8005daa:	f002 fad5 	bl	8008358 <HAL_UART_MspInit>
 8005dae:	e7d8      	b.n	8005d62 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8005db0:	2001      	movs	r0, #1
}
 8005db2:	4770      	bx	lr

08005db4 <HAL_UART_Transmit>:
{
 8005db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005db8:	b082      	sub	sp, #8
 8005dba:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005dbc:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b20      	cmp	r3, #32
 8005dc4:	d155      	bne.n	8005e72 <HAL_UART_Transmit+0xbe>
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	460d      	mov	r5, r1
 8005dca:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8005dcc:	2900      	cmp	r1, #0
 8005dce:	d055      	beq.n	8005e7c <HAL_UART_Transmit+0xc8>
 8005dd0:	2a00      	cmp	r2, #0
 8005dd2:	d055      	beq.n	8005e80 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8005dd4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d053      	beq.n	8005e84 <HAL_UART_Transmit+0xd0>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de2:	2300      	movs	r3, #0
 8005de4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005de6:	2321      	movs	r3, #33	; 0x21
 8005de8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8005dec:	f7fd f948 	bl	8003080 <HAL_GetTick>
 8005df0:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8005df2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8005df6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005dfa:	e010      	b.n	8005e1e <HAL_UART_Transmit+0x6a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dfc:	9600      	str	r6, [sp, #0]
 8005dfe:	463b      	mov	r3, r7
 8005e00:	2200      	movs	r2, #0
 8005e02:	2180      	movs	r1, #128	; 0x80
 8005e04:	4620      	mov	r0, r4
 8005e06:	f7ff ff75 	bl	8005cf4 <UART_WaitOnFlagUntilTimeout>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d13c      	bne.n	8005e88 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005e0e:	882b      	ldrh	r3, [r5, #0]
 8005e10:	6822      	ldr	r2, [r4, #0]
 8005e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e16:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005e18:	6923      	ldr	r3, [r4, #16]
 8005e1a:	b9c3      	cbnz	r3, 8005e4e <HAL_UART_Transmit+0x9a>
          pData += 2U;
 8005e1c:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8005e1e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	b1b3      	cbz	r3, 8005e52 <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 8005e24:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005e26:	3b01      	subs	r3, #1
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005e2c:	68a3      	ldr	r3, [r4, #8]
 8005e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e32:	d0e3      	beq.n	8005dfc <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e34:	9600      	str	r6, [sp, #0]
 8005e36:	463b      	mov	r3, r7
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2180      	movs	r1, #128	; 0x80
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f7ff ff59 	bl	8005cf4 <UART_WaitOnFlagUntilTimeout>
 8005e42:	bb18      	cbnz	r0, 8005e8c <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005e44:	782a      	ldrb	r2, [r5, #0]
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	605a      	str	r2, [r3, #4]
 8005e4a:	3501      	adds	r5, #1
 8005e4c:	e7e7      	b.n	8005e1e <HAL_UART_Transmit+0x6a>
          pData += 1U;
 8005e4e:	3501      	adds	r5, #1
 8005e50:	e7e5      	b.n	8005e1e <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e52:	9600      	str	r6, [sp, #0]
 8005e54:	463b      	mov	r3, r7
 8005e56:	2200      	movs	r2, #0
 8005e58:	2140      	movs	r1, #64	; 0x40
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	f7ff ff4a 	bl	8005cf4 <UART_WaitOnFlagUntilTimeout>
 8005e60:	4603      	mov	r3, r0
 8005e62:	b9a8      	cbnz	r0, 8005e90 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8005e64:	2220      	movs	r2, #32
 8005e66:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8005e70:	e000      	b.n	8005e74 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8005e72:	2302      	movs	r3, #2
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	b002      	add	sp, #8
 8005e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e7f9      	b.n	8005e74 <HAL_UART_Transmit+0xc0>
 8005e80:	2301      	movs	r3, #1
 8005e82:	e7f7      	b.n	8005e74 <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8005e84:	2302      	movs	r3, #2
 8005e86:	e7f5      	b.n	8005e74 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e7f3      	b.n	8005e74 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e7f1      	b.n	8005e74 <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e7ef      	b.n	8005e74 <HAL_UART_Transmit+0xc0>

08005e94 <HAL_UART_TxCpltCallback>:
}
 8005e94:	4770      	bx	lr

08005e96 <UART_EndTransmit_IT>:
{
 8005e96:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e98:	6801      	ldr	r1, [r0, #0]
 8005e9a:	68cb      	ldr	r3, [r1, #12]
 8005e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea0:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005ea2:	2320      	movs	r3, #32
 8005ea4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8005ea8:	f7ff fff4 	bl	8005e94 <HAL_UART_TxCpltCallback>
}
 8005eac:	2000      	movs	r0, #0
 8005eae:	bd08      	pop	{r3, pc}

08005eb0 <HAL_UART_RxCpltCallback>:
}
 8005eb0:	4770      	bx	lr

08005eb2 <UART_Receive_IT>:
{
 8005eb2:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005eb4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b22      	cmp	r3, #34	; 0x22
 8005ebc:	d145      	bne.n	8005f4a <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005ebe:	6883      	ldr	r3, [r0, #8]
 8005ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec4:	d00e      	beq.n	8005ee4 <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005ec6:	6903      	ldr	r3, [r0, #16]
 8005ec8:	bb03      	cbnz	r3, 8005f0c <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005eca:	6803      	ldr	r3, [r0, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005ed0:	1c59      	adds	r1, r3, #1
 8005ed2:	6281      	str	r1, [r0, #40]	; 0x28
 8005ed4:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8005ed6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8005ede:	b1f3      	cbz	r3, 8005f1e <UART_Receive_IT+0x6c>
    return HAL_OK;
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	e033      	b.n	8005f4c <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005ee4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005ee6:	6903      	ldr	r3, [r0, #16]
 8005ee8:	b943      	cbnz	r3, 8005efc <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005eea:	6803      	ldr	r3, [r0, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef2:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8005ef4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005ef6:	3302      	adds	r3, #2
 8005ef8:	6283      	str	r3, [r0, #40]	; 0x28
 8005efa:	e7ec      	b.n	8005ed6 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005efc:	6803      	ldr	r3, [r0, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8005f04:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005f06:	3301      	adds	r3, #1
 8005f08:	6283      	str	r3, [r0, #40]	; 0x28
 8005f0a:	e7e4      	b.n	8005ed6 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f0c:	6803      	ldr	r3, [r0, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005f12:	1c51      	adds	r1, r2, #1
 8005f14:	6281      	str	r1, [r0, #40]	; 0x28
 8005f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f1a:	7013      	strb	r3, [r2, #0]
 8005f1c:	e7db      	b.n	8005ed6 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f1e:	6802      	ldr	r2, [r0, #0]
 8005f20:	68d3      	ldr	r3, [r2, #12]
 8005f22:	f023 0320 	bic.w	r3, r3, #32
 8005f26:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f28:	6802      	ldr	r2, [r0, #0]
 8005f2a:	68d3      	ldr	r3, [r2, #12]
 8005f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f30:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f32:	6802      	ldr	r2, [r0, #0]
 8005f34:	6953      	ldr	r3, [r2, #20]
 8005f36:	f023 0301 	bic.w	r3, r3, #1
 8005f3a:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005f3c:	2320      	movs	r3, #32
 8005f3e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8005f42:	f7ff ffb5 	bl	8005eb0 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8005f46:	2000      	movs	r0, #0
 8005f48:	e000      	b.n	8005f4c <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8005f4a:	2002      	movs	r0, #2
}
 8005f4c:	bd08      	pop	{r3, pc}

08005f4e <HAL_UART_ErrorCallback>:
}
 8005f4e:	4770      	bx	lr

08005f50 <HAL_UART_IRQHandler>:
{
 8005f50:	b510      	push	{r4, lr}
 8005f52:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f54:	6802      	ldr	r2, [r0, #0]
 8005f56:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f58:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f5a:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8005f5c:	f013 000f 	ands.w	r0, r3, #15
 8005f60:	d105      	bne.n	8005f6e <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f62:	f013 0f20 	tst.w	r3, #32
 8005f66:	d002      	beq.n	8005f6e <HAL_UART_IRQHandler+0x1e>
 8005f68:	f011 0f20 	tst.w	r1, #32
 8005f6c:	d153      	bne.n	8006016 <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	d067      	beq.n	8006042 <HAL_UART_IRQHandler+0xf2>
 8005f72:	f012 0201 	ands.w	r2, r2, #1
 8005f76:	d102      	bne.n	8005f7e <HAL_UART_IRQHandler+0x2e>
 8005f78:	f411 7f90 	tst.w	r1, #288	; 0x120
 8005f7c:	d061      	beq.n	8006042 <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f7e:	f013 0f01 	tst.w	r3, #1
 8005f82:	d006      	beq.n	8005f92 <HAL_UART_IRQHandler+0x42>
 8005f84:	f411 7f80 	tst.w	r1, #256	; 0x100
 8005f88:	d003      	beq.n	8005f92 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f8a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005f8c:	f040 0001 	orr.w	r0, r0, #1
 8005f90:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f92:	f013 0f04 	tst.w	r3, #4
 8005f96:	d004      	beq.n	8005fa2 <HAL_UART_IRQHandler+0x52>
 8005f98:	b11a      	cbz	r2, 8005fa2 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f9a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005f9c:	f040 0002 	orr.w	r0, r0, #2
 8005fa0:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fa2:	f013 0f02 	tst.w	r3, #2
 8005fa6:	d004      	beq.n	8005fb2 <HAL_UART_IRQHandler+0x62>
 8005fa8:	b11a      	cbz	r2, 8005fb2 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005faa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005fac:	f040 0004 	orr.w	r0, r0, #4
 8005fb0:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fb2:	f013 0f08 	tst.w	r3, #8
 8005fb6:	d004      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x72>
 8005fb8:	b11a      	cbz	r2, 8005fc2 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005fbc:	f042 0208 	orr.w	r2, r2, #8
 8005fc0:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fc2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005fc4:	2a00      	cmp	r2, #0
 8005fc6:	d048      	beq.n	800605a <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fc8:	f013 0f20 	tst.w	r3, #32
 8005fcc:	d002      	beq.n	8005fd4 <HAL_UART_IRQHandler+0x84>
 8005fce:	f011 0f20 	tst.w	r1, #32
 8005fd2:	d124      	bne.n	800601e <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fdc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005fde:	f012 0f08 	tst.w	r2, #8
 8005fe2:	d100      	bne.n	8005fe6 <HAL_UART_IRQHandler+0x96>
 8005fe4:	b33b      	cbz	r3, 8006036 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f7ff fca7 	bl	800593a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	695a      	ldr	r2, [r3, #20]
 8005ff0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005ff4:	d01b      	beq.n	800602e <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ff6:	695a      	ldr	r2, [r3, #20]
 8005ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ffc:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8005ffe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006000:	b18b      	cbz	r3, 8006026 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006002:	4a1a      	ldr	r2, [pc, #104]	; (800606c <HAL_UART_IRQHandler+0x11c>)
 8006004:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006006:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006008:	f7fd f986 	bl	8003318 <HAL_DMA_Abort_IT>
 800600c:	b328      	cbz	r0, 800605a <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800600e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006010:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006012:	4798      	blx	r3
 8006014:	e021      	b.n	800605a <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 8006016:	4620      	mov	r0, r4
 8006018:	f7ff ff4b 	bl	8005eb2 <UART_Receive_IT>
      return;
 800601c:	e01d      	b.n	800605a <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 800601e:	4620      	mov	r0, r4
 8006020:	f7ff ff47 	bl	8005eb2 <UART_Receive_IT>
 8006024:	e7d6      	b.n	8005fd4 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8006026:	4620      	mov	r0, r4
 8006028:	f7ff ff91 	bl	8005f4e <HAL_UART_ErrorCallback>
 800602c:	e015      	b.n	800605a <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 800602e:	4620      	mov	r0, r4
 8006030:	f7ff ff8d 	bl	8005f4e <HAL_UART_ErrorCallback>
 8006034:	e011      	b.n	800605a <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8006036:	4620      	mov	r0, r4
 8006038:	f7ff ff89 	bl	8005f4e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800603c:	2300      	movs	r3, #0
 800603e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8006040:	e00b      	b.n	800605a <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006042:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006046:	d002      	beq.n	800604e <HAL_UART_IRQHandler+0xfe>
 8006048:	f011 0f80 	tst.w	r1, #128	; 0x80
 800604c:	d106      	bne.n	800605c <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800604e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006052:	d002      	beq.n	800605a <HAL_UART_IRQHandler+0x10a>
 8006054:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006058:	d104      	bne.n	8006064 <HAL_UART_IRQHandler+0x114>
}
 800605a:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 800605c:	4620      	mov	r0, r4
 800605e:	f7ff fc7a 	bl	8005956 <UART_Transmit_IT>
    return;
 8006062:	e7fa      	b.n	800605a <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 8006064:	4620      	mov	r0, r4
 8006066:	f7ff ff16 	bl	8005e96 <UART_EndTransmit_IT>
    return;
 800606a:	e7f6      	b.n	800605a <HAL_UART_IRQHandler+0x10a>
 800606c:	08006071 	.word	0x08006071

08006070 <UART_DMAAbortOnError>:
{
 8006070:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006072:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8006074:	2300      	movs	r3, #0
 8006076:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006078:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800607a:	f7ff ff68 	bl	8005f4e <HAL_UART_ErrorCallback>
}
 800607e:	bd08      	pop	{r3, pc}

08006080 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8006080:	2884      	cmp	r0, #132	; 0x84
 8006082:	d001      	beq.n	8006088 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8006084:	3003      	adds	r0, #3
 8006086:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006088:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 800608a:	4770      	bx	lr

0800608c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800608c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800608e:	f000 fca5 	bl	80069dc <vTaskStartScheduler>
  
  return osOK;
}
 8006092:	2000      	movs	r0, #0
 8006094:	bd08      	pop	{r3, pc}

08006096 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006096:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800609a:	b087      	sub	sp, #28
 800609c:	4604      	mov	r4, r0
 800609e:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80060a0:	6945      	ldr	r5, [r0, #20]
 80060a2:	b1a5      	cbz	r5, 80060ce <osThreadCreate+0x38>
 80060a4:	6986      	ldr	r6, [r0, #24]
 80060a6:	b196      	cbz	r6, 80060ce <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060a8:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80060ac:	f8d0 9000 	ldr.w	r9, [r0]
 80060b0:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80060b4:	f7ff ffe4 	bl	8006080 <makeFreeRtosPriority>
 80060b8:	6922      	ldr	r2, [r4, #16]
 80060ba:	9602      	str	r6, [sp, #8]
 80060bc:	9501      	str	r5, [sp, #4]
 80060be:	9000      	str	r0, [sp, #0]
 80060c0:	463b      	mov	r3, r7
 80060c2:	4649      	mov	r1, r9
 80060c4:	4640      	mov	r0, r8
 80060c6:	f000 fc1d 	bl	8006904 <xTaskCreateStatic>
 80060ca:	9005      	str	r0, [sp, #20]
 80060cc:	e013      	b.n	80060f6 <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060ce:	6865      	ldr	r5, [r4, #4]
 80060d0:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80060d2:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80060d6:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80060da:	f7ff ffd1 	bl	8006080 <makeFreeRtosPriority>
 80060de:	ab05      	add	r3, sp, #20
 80060e0:	9301      	str	r3, [sp, #4]
 80060e2:	9000      	str	r0, [sp, #0]
 80060e4:	463b      	mov	r3, r7
 80060e6:	fa1f f288 	uxth.w	r2, r8
 80060ea:	4631      	mov	r1, r6
 80060ec:	4628      	mov	r0, r5
 80060ee:	f000 fc42 	bl	8006976 <xTaskCreate>
 80060f2:	2801      	cmp	r0, #1
 80060f4:	d103      	bne.n	80060fe <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80060f6:	9805      	ldr	r0, [sp, #20]
}
 80060f8:	b007      	add	sp, #28
 80060fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 80060fe:	2000      	movs	r0, #0
 8006100:	e7fa      	b.n	80060f8 <osThreadCreate+0x62>

08006102 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006102:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006104:	4603      	mov	r3, r0
 8006106:	b900      	cbnz	r0, 800610a <osDelay+0x8>
 8006108:	2301      	movs	r3, #1
 800610a:	4618      	mov	r0, r3
 800610c:	f000 fdaa 	bl	8006c64 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006110:	2000      	movs	r0, #0
 8006112:	bd08      	pop	{r3, pc}

08006114 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006114:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006116:	6841      	ldr	r1, [r0, #4]
 8006118:	b119      	cbz	r1, 8006122 <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800611a:	2001      	movs	r0, #1
 800611c:	f000 fa63 	bl	80065e6 <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006120:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 8006122:	2001      	movs	r0, #1
 8006124:	f000 fa54 	bl	80065d0 <xQueueCreateMutex>
 8006128:	e7fa      	b.n	8006120 <osMutexCreate+0xc>

0800612a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800612a:	f100 0308 	add.w	r3, r0, #8
 800612e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006134:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006136:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006138:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800613e:	4770      	bx	lr

08006140 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006140:	2300      	movs	r3, #0
 8006142:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006144:	4770      	bx	lr

08006146 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006146:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006148:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800614e:	689a      	ldr	r2, [r3, #8]
 8006150:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006152:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006154:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006156:	6803      	ldr	r3, [r0, #0]
 8006158:	3301      	adds	r3, #1
 800615a:	6003      	str	r3, [r0, #0]
}
 800615c:	4770      	bx	lr

0800615e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800615e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006160:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006162:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8006166:	d002      	beq.n	800616e <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006168:	f100 0208 	add.w	r2, r0, #8
 800616c:	e002      	b.n	8006174 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 800616e:	6902      	ldr	r2, [r0, #16]
 8006170:	e004      	b.n	800617c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006172:	461a      	mov	r2, r3
 8006174:	6853      	ldr	r3, [r2, #4]
 8006176:	681c      	ldr	r4, [r3, #0]
 8006178:	42ac      	cmp	r4, r5
 800617a:	d9fa      	bls.n	8006172 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800617c:	6853      	ldr	r3, [r2, #4]
 800617e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006180:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006182:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006184:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006186:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006188:	6803      	ldr	r3, [r0, #0]
 800618a:	3301      	adds	r3, #1
 800618c:	6003      	str	r3, [r0, #0]
}
 800618e:	bc30      	pop	{r4, r5}
 8006190:	4770      	bx	lr

08006192 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006192:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006194:	6842      	ldr	r2, [r0, #4]
 8006196:	6881      	ldr	r1, [r0, #8]
 8006198:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800619a:	6882      	ldr	r2, [r0, #8]
 800619c:	6841      	ldr	r1, [r0, #4]
 800619e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	4282      	cmp	r2, r0
 80061a4:	d006      	beq.n	80061b4 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80061a6:	2200      	movs	r2, #0
 80061a8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	3a01      	subs	r2, #1
 80061ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061b0:	6818      	ldr	r0, [r3, #0]
}
 80061b2:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061b4:	6882      	ldr	r2, [r0, #8]
 80061b6:	605a      	str	r2, [r3, #4]
 80061b8:	e7f5      	b.n	80061a6 <uxListRemove+0x14>

080061ba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061ba:	b510      	push	{r4, lr}
 80061bc:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061be:	f000 ff41 	bl	8007044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80061c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d004      	beq.n	80061d4 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80061ca:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80061cc:	f000 ff5c 	bl	8007088 <vPortExitCritical>

	return xReturn;
}
 80061d0:	4620      	mov	r0, r4
 80061d2:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80061d4:	2401      	movs	r4, #1
 80061d6:	e7f9      	b.n	80061cc <prvIsQueueFull+0x12>

080061d8 <prvCopyDataToQueue>:
{
 80061d8:	b570      	push	{r4, r5, r6, lr}
 80061da:	4604      	mov	r4, r0
 80061dc:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061de:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80061e0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80061e2:	b95a      	cbnz	r2, 80061fc <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061e4:	6803      	ldr	r3, [r0, #0]
 80061e6:	b11b      	cbz	r3, 80061f0 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80061e8:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061ea:	3501      	adds	r5, #1
 80061ec:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80061ee:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80061f0:	6840      	ldr	r0, [r0, #4]
 80061f2:	f000 fe69 	bl	8006ec8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	6063      	str	r3, [r4, #4]
 80061fa:	e7f6      	b.n	80061ea <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80061fc:	b96e      	cbnz	r6, 800621a <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80061fe:	6880      	ldr	r0, [r0, #8]
 8006200:	f003 ff5f 	bl	800a0c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006204:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006206:	68a3      	ldr	r3, [r4, #8]
 8006208:	4413      	add	r3, r2
 800620a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800620c:	6862      	ldr	r2, [r4, #4]
 800620e:	4293      	cmp	r3, r2
 8006210:	d319      	bcc.n	8006246 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8006216:	2000      	movs	r0, #0
 8006218:	e7e7      	b.n	80061ea <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800621a:	68c0      	ldr	r0, [r0, #12]
 800621c:	f003 ff51 	bl	800a0c2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006220:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006222:	4252      	negs	r2, r2
 8006224:	68e3      	ldr	r3, [r4, #12]
 8006226:	4413      	add	r3, r2
 8006228:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800622a:	6821      	ldr	r1, [r4, #0]
 800622c:	428b      	cmp	r3, r1
 800622e:	d202      	bcs.n	8006236 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006230:	6863      	ldr	r3, [r4, #4]
 8006232:	441a      	add	r2, r3
 8006234:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8006236:	2e02      	cmp	r6, #2
 8006238:	d001      	beq.n	800623e <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800623a:	2000      	movs	r0, #0
 800623c:	e7d5      	b.n	80061ea <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800623e:	b125      	cbz	r5, 800624a <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8006240:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8006242:	2000      	movs	r0, #0
 8006244:	e7d1      	b.n	80061ea <prvCopyDataToQueue+0x12>
 8006246:	2000      	movs	r0, #0
 8006248:	e7cf      	b.n	80061ea <prvCopyDataToQueue+0x12>
 800624a:	2000      	movs	r0, #0
 800624c:	e7cd      	b.n	80061ea <prvCopyDataToQueue+0x12>

0800624e <prvUnlockQueue>:
{
 800624e:	b538      	push	{r3, r4, r5, lr}
 8006250:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8006252:	f000 fef7 	bl	8007044 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8006256:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800625a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800625c:	e003      	b.n	8006266 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800625e:	f000 fe1d 	bl	8006e9c <vTaskMissedYield>
			--cTxLock;
 8006262:	3c01      	subs	r4, #1
 8006264:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006266:	2c00      	cmp	r4, #0
 8006268:	dd08      	ble.n	800627c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800626a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800626c:	b133      	cbz	r3, 800627c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800626e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8006272:	f000 fd81 	bl	8006d78 <xTaskRemoveFromEventList>
 8006276:	2800      	cmp	r0, #0
 8006278:	d0f3      	beq.n	8006262 <prvUnlockQueue+0x14>
 800627a:	e7f0      	b.n	800625e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800627c:	23ff      	movs	r3, #255	; 0xff
 800627e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8006282:	f000 ff01 	bl	8007088 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006286:	f000 fedd 	bl	8007044 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800628a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800628e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006290:	e003      	b.n	800629a <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8006292:	f000 fe03 	bl	8006e9c <vTaskMissedYield>
				--cRxLock;
 8006296:	3c01      	subs	r4, #1
 8006298:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800629a:	2c00      	cmp	r4, #0
 800629c:	dd08      	ble.n	80062b0 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800629e:	692b      	ldr	r3, [r5, #16]
 80062a0:	b133      	cbz	r3, 80062b0 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062a2:	f105 0010 	add.w	r0, r5, #16
 80062a6:	f000 fd67 	bl	8006d78 <xTaskRemoveFromEventList>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d0f3      	beq.n	8006296 <prvUnlockQueue+0x48>
 80062ae:	e7f0      	b.n	8006292 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80062b0:	23ff      	movs	r3, #255	; 0xff
 80062b2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80062b6:	f000 fee7 	bl	8007088 <vPortExitCritical>
}
 80062ba:	bd38      	pop	{r3, r4, r5, pc}

080062bc <xQueueGenericReset>:
{
 80062bc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80062be:	b940      	cbnz	r0, 80062d2 <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	e7fe      	b.n	80062d0 <xQueueGenericReset+0x14>
 80062d2:	4604      	mov	r4, r0
 80062d4:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80062d6:	f000 feb5 	bl	8007044 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80062da:	6821      	ldr	r1, [r4, #0]
 80062dc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80062de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062e0:	fb03 1002 	mla	r0, r3, r2, r1
 80062e4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80062e6:	2000      	movs	r0, #0
 80062e8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80062ea:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80062ec:	3a01      	subs	r2, #1
 80062ee:	fb02 1303 	mla	r3, r2, r3, r1
 80062f2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80062f4:	23ff      	movs	r3, #255	; 0xff
 80062f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80062fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80062fe:	b9a5      	cbnz	r5, 800632a <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006300:	6923      	ldr	r3, [r4, #16]
 8006302:	b91b      	cbnz	r3, 800630c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8006304:	f000 fec0 	bl	8007088 <vPortExitCritical>
}
 8006308:	2001      	movs	r0, #1
 800630a:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800630c:	f104 0010 	add.w	r0, r4, #16
 8006310:	f000 fd32 	bl	8006d78 <xTaskRemoveFromEventList>
 8006314:	2800      	cmp	r0, #0
 8006316:	d0f5      	beq.n	8006304 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8006318:	4b08      	ldr	r3, [pc, #32]	; (800633c <xQueueGenericReset+0x80>)
 800631a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	e7ec      	b.n	8006304 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800632a:	f104 0010 	add.w	r0, r4, #16
 800632e:	f7ff fefc 	bl	800612a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006332:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006336:	f7ff fef8 	bl	800612a <vListInitialise>
 800633a:	e7e3      	b.n	8006304 <xQueueGenericReset+0x48>
 800633c:	e000ed04 	.word	0xe000ed04

08006340 <prvInitialiseNewQueue>:
{
 8006340:	b510      	push	{r4, lr}
 8006342:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006344:	460c      	mov	r4, r1
 8006346:	b139      	cbz	r1, 8006358 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006348:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800634a:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800634c:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800634e:	2101      	movs	r1, #1
 8006350:	4618      	mov	r0, r3
 8006352:	f7ff ffb3 	bl	80062bc <xQueueGenericReset>
}
 8006356:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006358:	601b      	str	r3, [r3, #0]
 800635a:	e7f6      	b.n	800634a <prvInitialiseNewQueue+0xa>

0800635c <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800635c:	b940      	cbnz	r0, 8006370 <xQueueGenericCreateStatic+0x14>
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	e7fe      	b.n	800636e <xQueueGenericCreateStatic+0x12>
	{
 8006370:	b510      	push	{r4, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8006376:	b153      	cbz	r3, 800638e <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006378:	b192      	cbz	r2, 80063a0 <xQueueGenericCreateStatic+0x44>
 800637a:	b989      	cbnz	r1, 80063a0 <xQueueGenericCreateStatic+0x44>
 800637c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006380:	f383 8811 	msr	BASEPRI, r3
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	e7fe      	b.n	800638c <xQueueGenericCreateStatic+0x30>
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	e7fe      	b.n	800639e <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80063a0:	b94a      	cbnz	r2, 80063b6 <xQueueGenericCreateStatic+0x5a>
 80063a2:	b141      	cbz	r1, 80063b6 <xQueueGenericCreateStatic+0x5a>
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	e7fe      	b.n	80063b4 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80063b6:	2048      	movs	r0, #72	; 0x48
 80063b8:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80063ba:	9803      	ldr	r0, [sp, #12]
 80063bc:	2848      	cmp	r0, #72	; 0x48
 80063be:	d008      	beq.n	80063d2 <xQueueGenericCreateStatic+0x76>
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	e7fe      	b.n	80063d0 <xQueueGenericCreateStatic+0x74>
 80063d2:	4620      	mov	r0, r4
 80063d4:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80063d6:	2301      	movs	r3, #1
 80063d8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063dc:	9400      	str	r4, [sp, #0]
 80063de:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80063e2:	f7ff ffad 	bl	8006340 <prvInitialiseNewQueue>
	}
 80063e6:	4620      	mov	r0, r4
 80063e8:	b004      	add	sp, #16
 80063ea:	bd10      	pop	{r4, pc}

080063ec <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063ec:	b940      	cbnz	r0, 8006400 <xQueueGenericCreate+0x14>
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	e7fe      	b.n	80063fe <xQueueGenericCreate+0x12>
	{
 8006400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006402:	b083      	sub	sp, #12
 8006404:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8006406:	b111      	cbz	r1, 800640e <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006408:	fb01 f000 	mul.w	r0, r1, r0
 800640c:	e000      	b.n	8006410 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 800640e:	2000      	movs	r0, #0
 8006410:	4617      	mov	r7, r2
 8006412:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006414:	3048      	adds	r0, #72	; 0x48
 8006416:	f000 ff9d 	bl	8007354 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800641a:	4605      	mov	r5, r0
 800641c:	b150      	cbz	r0, 8006434 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800641e:	2300      	movs	r3, #0
 8006420:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006424:	9000      	str	r0, [sp, #0]
 8006426:	463b      	mov	r3, r7
 8006428:	f100 0248 	add.w	r2, r0, #72	; 0x48
 800642c:	4621      	mov	r1, r4
 800642e:	4630      	mov	r0, r6
 8006430:	f7ff ff86 	bl	8006340 <prvInitialiseNewQueue>
	}
 8006434:	4628      	mov	r0, r5
 8006436:	b003      	add	sp, #12
 8006438:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800643c <xQueueGenericSend>:
{
 800643c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800643e:	b085      	sub	sp, #20
 8006440:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8006442:	b160      	cbz	r0, 800645e <xQueueGenericSend+0x22>
 8006444:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006446:	b999      	cbnz	r1, 8006470 <xQueueGenericSend+0x34>
 8006448:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800644a:	b18a      	cbz	r2, 8006470 <xQueueGenericSend+0x34>
 800644c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	e7fe      	b.n	800645c <xQueueGenericSend+0x20>
 800645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	e7fe      	b.n	800646e <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006470:	2b02      	cmp	r3, #2
 8006472:	d10b      	bne.n	800648c <xQueueGenericSend+0x50>
 8006474:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006476:	2a01      	cmp	r2, #1
 8006478:	d008      	beq.n	800648c <xQueueGenericSend+0x50>
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	e7fe      	b.n	800648a <xQueueGenericSend+0x4e>
 800648c:	461e      	mov	r6, r3
 800648e:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006490:	f000 fd0a 	bl	8006ea8 <xTaskGetSchedulerState>
 8006494:	b950      	cbnz	r0, 80064ac <xQueueGenericSend+0x70>
 8006496:	9b01      	ldr	r3, [sp, #4]
 8006498:	b153      	cbz	r3, 80064b0 <xQueueGenericSend+0x74>
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	e7fe      	b.n	80064aa <xQueueGenericSend+0x6e>
 80064ac:	2500      	movs	r5, #0
 80064ae:	e03a      	b.n	8006526 <xQueueGenericSend+0xea>
 80064b0:	2500      	movs	r5, #0
 80064b2:	e038      	b.n	8006526 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064b4:	4632      	mov	r2, r6
 80064b6:	4639      	mov	r1, r7
 80064b8:	4620      	mov	r0, r4
 80064ba:	f7ff fe8d 	bl	80061d8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064c0:	b94b      	cbnz	r3, 80064d6 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 80064c2:	b1a8      	cbz	r0, 80064f0 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 80064c4:	4b3b      	ldr	r3, [pc, #236]	; (80065b4 <xQueueGenericSend+0x178>)
 80064c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	e00c      	b.n	80064f0 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064d6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80064da:	f000 fc4d 	bl	8006d78 <xTaskRemoveFromEventList>
 80064de:	b138      	cbz	r0, 80064f0 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 80064e0:	4b34      	ldr	r3, [pc, #208]	; (80065b4 <xQueueGenericSend+0x178>)
 80064e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80064f0:	f000 fdca 	bl	8007088 <vPortExitCritical>
				return pdPASS;
 80064f4:	2001      	movs	r0, #1
}
 80064f6:	b005      	add	sp, #20
 80064f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 80064fa:	f000 fdc5 	bl	8007088 <vPortExitCritical>
					return errQUEUE_FULL;
 80064fe:	2000      	movs	r0, #0
 8006500:	e7f9      	b.n	80064f6 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006502:	a802      	add	r0, sp, #8
 8006504:	f000 fc7e 	bl	8006e04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006508:	2501      	movs	r5, #1
 800650a:	e019      	b.n	8006540 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 800650c:	2300      	movs	r3, #0
 800650e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006512:	e021      	b.n	8006558 <xQueueGenericSend+0x11c>
 8006514:	2300      	movs	r3, #0
 8006516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800651a:	e023      	b.n	8006564 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 800651c:	4620      	mov	r0, r4
 800651e:	f7ff fe96 	bl	800624e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006522:	f000 fb25 	bl	8006b70 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8006526:	f000 fd8d 	bl	8007044 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800652a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800652c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800652e:	429a      	cmp	r2, r3
 8006530:	d3c0      	bcc.n	80064b4 <xQueueGenericSend+0x78>
 8006532:	2e02      	cmp	r6, #2
 8006534:	d0be      	beq.n	80064b4 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006536:	9b01      	ldr	r3, [sp, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0de      	beq.n	80064fa <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 800653c:	2d00      	cmp	r5, #0
 800653e:	d0e0      	beq.n	8006502 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 8006540:	f000 fda2 	bl	8007088 <vPortExitCritical>
		vTaskSuspendAll();
 8006544:	f000 fa80 	bl	8006a48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006548:	f000 fd7c 	bl	8007044 <vPortEnterCritical>
 800654c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006550:	b25b      	sxtb	r3, r3
 8006552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006556:	d0d9      	beq.n	800650c <xQueueGenericSend+0xd0>
 8006558:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800655c:	b25b      	sxtb	r3, r3
 800655e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006562:	d0d7      	beq.n	8006514 <xQueueGenericSend+0xd8>
 8006564:	f000 fd90 	bl	8007088 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006568:	a901      	add	r1, sp, #4
 800656a:	a802      	add	r0, sp, #8
 800656c:	f000 fc56 	bl	8006e1c <xTaskCheckForTimeOut>
 8006570:	b9c8      	cbnz	r0, 80065a6 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006572:	4620      	mov	r0, r4
 8006574:	f7ff fe21 	bl	80061ba <prvIsQueueFull>
 8006578:	2800      	cmp	r0, #0
 800657a:	d0cf      	beq.n	800651c <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800657c:	9901      	ldr	r1, [sp, #4]
 800657e:	f104 0010 	add.w	r0, r4, #16
 8006582:	f000 fbe1 	bl	8006d48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006586:	4620      	mov	r0, r4
 8006588:	f7ff fe61 	bl	800624e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800658c:	f000 faf0 	bl	8006b70 <xTaskResumeAll>
 8006590:	2800      	cmp	r0, #0
 8006592:	d1c8      	bne.n	8006526 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8006594:	4b07      	ldr	r3, [pc, #28]	; (80065b4 <xQueueGenericSend+0x178>)
 8006596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	e7bf      	b.n	8006526 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 80065a6:	4620      	mov	r0, r4
 80065a8:	f7ff fe51 	bl	800624e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065ac:	f000 fae0 	bl	8006b70 <xTaskResumeAll>
			return errQUEUE_FULL;
 80065b0:	2000      	movs	r0, #0
 80065b2:	e7a0      	b.n	80064f6 <xQueueGenericSend+0xba>
 80065b4:	e000ed04 	.word	0xe000ed04

080065b8 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80065b8:	b148      	cbz	r0, 80065ce <prvInitialiseMutex+0x16>
	{
 80065ba:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 80065bc:	2100      	movs	r1, #0
 80065be:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80065c0:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80065c2:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80065c4:	460b      	mov	r3, r1
 80065c6:	460a      	mov	r2, r1
 80065c8:	f7ff ff38 	bl	800643c <xQueueGenericSend>
	}
 80065cc:	bd08      	pop	{r3, pc}
 80065ce:	4770      	bx	lr

080065d0 <xQueueCreateMutex>:
	{
 80065d0:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80065d2:	4602      	mov	r2, r0
 80065d4:	2100      	movs	r1, #0
 80065d6:	2001      	movs	r0, #1
 80065d8:	f7ff ff08 	bl	80063ec <xQueueGenericCreate>
 80065dc:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80065de:	f7ff ffeb 	bl	80065b8 <prvInitialiseMutex>
	}
 80065e2:	4620      	mov	r0, r4
 80065e4:	bd10      	pop	{r4, pc}

080065e6 <xQueueCreateMutexStatic>:
	{
 80065e6:	b510      	push	{r4, lr}
 80065e8:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80065ea:	9000      	str	r0, [sp, #0]
 80065ec:	460b      	mov	r3, r1
 80065ee:	2200      	movs	r2, #0
 80065f0:	4611      	mov	r1, r2
 80065f2:	2001      	movs	r0, #1
 80065f4:	f7ff feb2 	bl	800635c <xQueueGenericCreateStatic>
 80065f8:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 80065fa:	f7ff ffdd 	bl	80065b8 <prvInitialiseMutex>
	}
 80065fe:	4620      	mov	r0, r4
 8006600:	b002      	add	sp, #8
 8006602:	bd10      	pop	{r4, pc}

08006604 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006604:	4b08      	ldr	r3, [pc, #32]	; (8006628 <prvResetNextTaskUnblockTime+0x24>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	b13b      	cbz	r3, 800661c <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800660c:	4b06      	ldr	r3, [pc, #24]	; (8006628 <prvResetNextTaskUnblockTime+0x24>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	4b05      	ldr	r3, [pc, #20]	; (800662c <prvResetNextTaskUnblockTime+0x28>)
 8006618:	601a      	str	r2, [r3, #0]
	}
}
 800661a:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800661c:	4b03      	ldr	r3, [pc, #12]	; (800662c <prvResetNextTaskUnblockTime+0x28>)
 800661e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	20000380 	.word	0x20000380
 800662c:	20000454 	.word	0x20000454

08006630 <prvInitialiseNewTask>:
{
 8006630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006634:	4680      	mov	r8, r0
 8006636:	4699      	mov	r9, r3
 8006638:	9d08      	ldr	r5, [sp, #32]
 800663a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800663c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800663e:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8006640:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006644:	3a01      	subs	r2, #1
 8006646:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800664a:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800664e:	2300      	movs	r3, #0
 8006650:	2b0f      	cmp	r3, #15
 8006652:	d807      	bhi.n	8006664 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006654:	5cc8      	ldrb	r0, [r1, r3]
 8006656:	18e2      	adds	r2, r4, r3
 8006658:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 800665c:	5cca      	ldrb	r2, [r1, r3]
 800665e:	b10a      	cbz	r2, 8006664 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006660:	3301      	adds	r3, #1
 8006662:	e7f5      	b.n	8006650 <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006664:	2300      	movs	r3, #0
 8006666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800666a:	2d06      	cmp	r5, #6
 800666c:	d900      	bls.n	8006670 <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800666e:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8006670:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006672:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006674:	f04f 0a00 	mov.w	sl, #0
 8006678:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800667c:	1d20      	adds	r0, r4, #4
 800667e:	f7ff fd5f 	bl	8006140 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006682:	f104 0018 	add.w	r0, r4, #24
 8006686:	f7ff fd5b 	bl	8006140 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800668a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800668c:	f1c5 0507 	rsb	r5, r5, #7
 8006690:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006692:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8006694:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006698:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800669c:	464a      	mov	r2, r9
 800669e:	4641      	mov	r1, r8
 80066a0:	4630      	mov	r0, r6
 80066a2:	f000 fca7 	bl	8006ff4 <pxPortInitialiseStack>
 80066a6:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80066a8:	b107      	cbz	r7, 80066ac <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80066aa:	603c      	str	r4, [r7, #0]
}
 80066ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080066b0 <prvInitialiseTaskLists>:
{
 80066b0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066b2:	2400      	movs	r4, #0
 80066b4:	e007      	b.n	80066c6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066b6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80066ba:	0093      	lsls	r3, r2, #2
 80066bc:	480e      	ldr	r0, [pc, #56]	; (80066f8 <prvInitialiseTaskLists+0x48>)
 80066be:	4418      	add	r0, r3
 80066c0:	f7ff fd33 	bl	800612a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066c4:	3401      	adds	r4, #1
 80066c6:	2c06      	cmp	r4, #6
 80066c8:	d9f5      	bls.n	80066b6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80066ca:	4d0c      	ldr	r5, [pc, #48]	; (80066fc <prvInitialiseTaskLists+0x4c>)
 80066cc:	4628      	mov	r0, r5
 80066ce:	f7ff fd2c 	bl	800612a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066d2:	4c0b      	ldr	r4, [pc, #44]	; (8006700 <prvInitialiseTaskLists+0x50>)
 80066d4:	4620      	mov	r0, r4
 80066d6:	f7ff fd28 	bl	800612a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066da:	480a      	ldr	r0, [pc, #40]	; (8006704 <prvInitialiseTaskLists+0x54>)
 80066dc:	f7ff fd25 	bl	800612a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80066e0:	4809      	ldr	r0, [pc, #36]	; (8006708 <prvInitialiseTaskLists+0x58>)
 80066e2:	f7ff fd22 	bl	800612a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80066e6:	4809      	ldr	r0, [pc, #36]	; (800670c <prvInitialiseTaskLists+0x5c>)
 80066e8:	f7ff fd1f 	bl	800612a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80066ec:	4b08      	ldr	r3, [pc, #32]	; (8006710 <prvInitialiseTaskLists+0x60>)
 80066ee:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066f0:	4b08      	ldr	r3, [pc, #32]	; (8006714 <prvInitialiseTaskLists+0x64>)
 80066f2:	601c      	str	r4, [r3, #0]
}
 80066f4:	bd38      	pop	{r3, r4, r5, pc}
 80066f6:	bf00      	nop
 80066f8:	20000388 	.word	0x20000388
 80066fc:	2000042c 	.word	0x2000042c
 8006700:	20000440 	.word	0x20000440
 8006704:	2000045c 	.word	0x2000045c
 8006708:	20000488 	.word	0x20000488
 800670c:	20000474 	.word	0x20000474
 8006710:	20000380 	.word	0x20000380
 8006714:	20000384 	.word	0x20000384

08006718 <prvAddNewTaskToReadyList>:
{
 8006718:	b510      	push	{r4, lr}
 800671a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800671c:	f000 fc92 	bl	8007044 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006720:	4a20      	ldr	r2, [pc, #128]	; (80067a4 <prvAddNewTaskToReadyList+0x8c>)
 8006722:	6813      	ldr	r3, [r2, #0]
 8006724:	3301      	adds	r3, #1
 8006726:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006728:	4b1f      	ldr	r3, [pc, #124]	; (80067a8 <prvAddNewTaskToReadyList+0x90>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	b15b      	cbz	r3, 8006746 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800672e:	4b1f      	ldr	r3, [pc, #124]	; (80067ac <prvAddNewTaskToReadyList+0x94>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	b96b      	cbnz	r3, 8006750 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006734:	4b1c      	ldr	r3, [pc, #112]	; (80067a8 <prvAddNewTaskToReadyList+0x90>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800673c:	429a      	cmp	r2, r3
 800673e:	d807      	bhi.n	8006750 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8006740:	4b19      	ldr	r3, [pc, #100]	; (80067a8 <prvAddNewTaskToReadyList+0x90>)
 8006742:	601c      	str	r4, [r3, #0]
 8006744:	e004      	b.n	8006750 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8006746:	4b18      	ldr	r3, [pc, #96]	; (80067a8 <prvAddNewTaskToReadyList+0x90>)
 8006748:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800674a:	6813      	ldr	r3, [r2, #0]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d026      	beq.n	800679e <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 8006750:	4a17      	ldr	r2, [pc, #92]	; (80067b0 <prvAddNewTaskToReadyList+0x98>)
 8006752:	6813      	ldr	r3, [r2, #0]
 8006754:	3301      	adds	r3, #1
 8006756:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006758:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800675a:	2201      	movs	r2, #1
 800675c:	409a      	lsls	r2, r3
 800675e:	4915      	ldr	r1, [pc, #84]	; (80067b4 <prvAddNewTaskToReadyList+0x9c>)
 8006760:	6808      	ldr	r0, [r1, #0]
 8006762:	4302      	orrs	r2, r0
 8006764:	600a      	str	r2, [r1, #0]
 8006766:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800676a:	009a      	lsls	r2, r3, #2
 800676c:	1d21      	adds	r1, r4, #4
 800676e:	4812      	ldr	r0, [pc, #72]	; (80067b8 <prvAddNewTaskToReadyList+0xa0>)
 8006770:	4410      	add	r0, r2
 8006772:	f7ff fce8 	bl	8006146 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006776:	f000 fc87 	bl	8007088 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800677a:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <prvAddNewTaskToReadyList+0x94>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	b16b      	cbz	r3, 800679c <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006780:	4b09      	ldr	r3, [pc, #36]	; (80067a8 <prvAddNewTaskToReadyList+0x90>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006786:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006788:	429a      	cmp	r2, r3
 800678a:	d207      	bcs.n	800679c <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 800678c:	4b0b      	ldr	r3, [pc, #44]	; (80067bc <prvAddNewTaskToReadyList+0xa4>)
 800678e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	f3bf 8f6f 	isb	sy
}
 800679c:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800679e:	f7ff ff87 	bl	80066b0 <prvInitialiseTaskLists>
 80067a2:	e7d5      	b.n	8006750 <prvAddNewTaskToReadyList+0x38>
 80067a4:	20000414 	.word	0x20000414
 80067a8:	2000037c 	.word	0x2000037c
 80067ac:	20000470 	.word	0x20000470
 80067b0:	20000424 	.word	0x20000424
 80067b4:	20000428 	.word	0x20000428
 80067b8:	20000388 	.word	0x20000388
 80067bc:	e000ed04 	.word	0xe000ed04

080067c0 <prvDeleteTCB>:
	{
 80067c0:	b510      	push	{r4, lr}
 80067c2:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067c4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80067c8:	b933      	cbnz	r3, 80067d8 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 80067ca:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80067cc:	f000 fe46 	bl	800745c <vPortFree>
				vPortFree( pxTCB );
 80067d0:	4620      	mov	r0, r4
 80067d2:	f000 fe43 	bl	800745c <vPortFree>
	}
 80067d6:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d00a      	beq.n	80067f2 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d0fa      	beq.n	80067d6 <prvDeleteTCB+0x16>
 80067e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	e7fe      	b.n	80067f0 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 80067f2:	f000 fe33 	bl	800745c <vPortFree>
 80067f6:	e7ee      	b.n	80067d6 <prvDeleteTCB+0x16>

080067f8 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067f8:	4b0f      	ldr	r3, [pc, #60]	; (8006838 <prvCheckTasksWaitingTermination+0x40>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	b1d3      	cbz	r3, 8006834 <prvCheckTasksWaitingTermination+0x3c>
{
 80067fe:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8006800:	f000 fc20 	bl	8007044 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006804:	4b0d      	ldr	r3, [pc, #52]	; (800683c <prvCheckTasksWaitingTermination+0x44>)
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800680a:	1d20      	adds	r0, r4, #4
 800680c:	f7ff fcc1 	bl	8006192 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006810:	4a0b      	ldr	r2, [pc, #44]	; (8006840 <prvCheckTasksWaitingTermination+0x48>)
 8006812:	6813      	ldr	r3, [r2, #0]
 8006814:	3b01      	subs	r3, #1
 8006816:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006818:	4a07      	ldr	r2, [pc, #28]	; (8006838 <prvCheckTasksWaitingTermination+0x40>)
 800681a:	6813      	ldr	r3, [r2, #0]
 800681c:	3b01      	subs	r3, #1
 800681e:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8006820:	f000 fc32 	bl	8007088 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8006824:	4620      	mov	r0, r4
 8006826:	f7ff ffcb 	bl	80067c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800682a:	4b03      	ldr	r3, [pc, #12]	; (8006838 <prvCheckTasksWaitingTermination+0x40>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1e6      	bne.n	8006800 <prvCheckTasksWaitingTermination+0x8>
}
 8006832:	bd10      	pop	{r4, pc}
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	20000418 	.word	0x20000418
 800683c:	20000488 	.word	0x20000488
 8006840:	20000414 	.word	0x20000414

08006844 <prvIdleTask>:
{
 8006844:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8006846:	f7ff ffd7 	bl	80067f8 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800684a:	4b06      	ldr	r3, [pc, #24]	; (8006864 <prvIdleTask+0x20>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d9f9      	bls.n	8006846 <prvIdleTask+0x2>
				taskYIELD();
 8006852:	4b05      	ldr	r3, [pc, #20]	; (8006868 <prvIdleTask+0x24>)
 8006854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006858:	601a      	str	r2, [r3, #0]
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	e7f0      	b.n	8006846 <prvIdleTask+0x2>
 8006864:	20000388 	.word	0x20000388
 8006868:	e000ed04 	.word	0xe000ed04

0800686c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800686c:	b570      	push	{r4, r5, r6, lr}
 800686e:	4604      	mov	r4, r0
 8006870:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006872:	4b1d      	ldr	r3, [pc, #116]	; (80068e8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8006874:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006876:	4b1d      	ldr	r3, [pc, #116]	; (80068ec <prvAddCurrentTaskToDelayedList+0x80>)
 8006878:	6818      	ldr	r0, [r3, #0]
 800687a:	3004      	adds	r0, #4
 800687c:	f7ff fc89 	bl	8006192 <uxListRemove>
 8006880:	b950      	cbnz	r0, 8006898 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006882:	4b1a      	ldr	r3, [pc, #104]	; (80068ec <prvAddCurrentTaskToDelayedList+0x80>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006888:	2301      	movs	r3, #1
 800688a:	fa03 f202 	lsl.w	r2, r3, r2
 800688e:	4918      	ldr	r1, [pc, #96]	; (80068f0 <prvAddCurrentTaskToDelayedList+0x84>)
 8006890:	680b      	ldr	r3, [r1, #0]
 8006892:	ea23 0302 	bic.w	r3, r3, r2
 8006896:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006898:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800689c:	d013      	beq.n	80068c6 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800689e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80068a0:	4b12      	ldr	r3, [pc, #72]	; (80068ec <prvAddCurrentTaskToDelayedList+0x80>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80068a6:	42a5      	cmp	r5, r4
 80068a8:	d816      	bhi.n	80068d8 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068aa:	4b12      	ldr	r3, [pc, #72]	; (80068f4 <prvAddCurrentTaskToDelayedList+0x88>)
 80068ac:	6818      	ldr	r0, [r3, #0]
 80068ae:	4b0f      	ldr	r3, [pc, #60]	; (80068ec <prvAddCurrentTaskToDelayedList+0x80>)
 80068b0:	6819      	ldr	r1, [r3, #0]
 80068b2:	3104      	adds	r1, #4
 80068b4:	f7ff fc53 	bl	800615e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80068b8:	4b0f      	ldr	r3, [pc, #60]	; (80068f8 <prvAddCurrentTaskToDelayedList+0x8c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	42a3      	cmp	r3, r4
 80068be:	d912      	bls.n	80068e6 <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80068c0:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <prvAddCurrentTaskToDelayedList+0x8c>)
 80068c2:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80068c4:	e00f      	b.n	80068e6 <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80068c6:	2e00      	cmp	r6, #0
 80068c8:	d0e9      	beq.n	800689e <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068ca:	4b08      	ldr	r3, [pc, #32]	; (80068ec <prvAddCurrentTaskToDelayedList+0x80>)
 80068cc:	6819      	ldr	r1, [r3, #0]
 80068ce:	3104      	adds	r1, #4
 80068d0:	480a      	ldr	r0, [pc, #40]	; (80068fc <prvAddCurrentTaskToDelayedList+0x90>)
 80068d2:	f7ff fc38 	bl	8006146 <vListInsertEnd>
 80068d6:	e006      	b.n	80068e6 <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068d8:	4b09      	ldr	r3, [pc, #36]	; (8006900 <prvAddCurrentTaskToDelayedList+0x94>)
 80068da:	6818      	ldr	r0, [r3, #0]
 80068dc:	4b03      	ldr	r3, [pc, #12]	; (80068ec <prvAddCurrentTaskToDelayedList+0x80>)
 80068de:	6819      	ldr	r1, [r3, #0]
 80068e0:	3104      	adds	r1, #4
 80068e2:	f7ff fc3c 	bl	800615e <vListInsert>
}
 80068e6:	bd70      	pop	{r4, r5, r6, pc}
 80068e8:	2000049c 	.word	0x2000049c
 80068ec:	2000037c 	.word	0x2000037c
 80068f0:	20000428 	.word	0x20000428
 80068f4:	20000380 	.word	0x20000380
 80068f8:	20000454 	.word	0x20000454
 80068fc:	20000474 	.word	0x20000474
 8006900:	20000384 	.word	0x20000384

08006904 <xTaskCreateStatic>:
	{
 8006904:	b570      	push	{r4, r5, r6, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800690a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 800690c:	b945      	cbnz	r5, 8006920 <xTaskCreateStatic+0x1c>
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	e7fe      	b.n	800691e <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8006920:	b944      	cbnz	r4, 8006934 <xTaskCreateStatic+0x30>
 8006922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	e7fe      	b.n	8006932 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006934:	2654      	movs	r6, #84	; 0x54
 8006936:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006938:	9e04      	ldr	r6, [sp, #16]
 800693a:	2e54      	cmp	r6, #84	; 0x54
 800693c:	d008      	beq.n	8006950 <xTaskCreateStatic+0x4c>
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	e7fe      	b.n	800694e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006950:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006952:	2502      	movs	r5, #2
 8006954:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006958:	2500      	movs	r5, #0
 800695a:	9503      	str	r5, [sp, #12]
 800695c:	9402      	str	r4, [sp, #8]
 800695e:	ad05      	add	r5, sp, #20
 8006960:	9501      	str	r5, [sp, #4]
 8006962:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006964:	9500      	str	r5, [sp, #0]
 8006966:	f7ff fe63 	bl	8006630 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800696a:	4620      	mov	r0, r4
 800696c:	f7ff fed4 	bl	8006718 <prvAddNewTaskToReadyList>
	}
 8006970:	9805      	ldr	r0, [sp, #20]
 8006972:	b006      	add	sp, #24
 8006974:	bd70      	pop	{r4, r5, r6, pc}

08006976 <xTaskCreate>:
	{
 8006976:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800697a:	b085      	sub	sp, #20
 800697c:	4607      	mov	r7, r0
 800697e:	4688      	mov	r8, r1
 8006980:	4615      	mov	r5, r2
 8006982:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006984:	0090      	lsls	r0, r2, #2
 8006986:	f000 fce5 	bl	8007354 <pvPortMalloc>
			if( pxStack != NULL )
 800698a:	b308      	cbz	r0, 80069d0 <xTaskCreate+0x5a>
 800698c:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800698e:	2054      	movs	r0, #84	; 0x54
 8006990:	f000 fce0 	bl	8007354 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006994:	4604      	mov	r4, r0
 8006996:	b1b8      	cbz	r0, 80069c8 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 8006998:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800699a:	b1e4      	cbz	r4, 80069d6 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800699c:	2300      	movs	r3, #0
 800699e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069a2:	9303      	str	r3, [sp, #12]
 80069a4:	9402      	str	r4, [sp, #8]
 80069a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069a8:	9301      	str	r3, [sp, #4]
 80069aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	464b      	mov	r3, r9
 80069b0:	462a      	mov	r2, r5
 80069b2:	4641      	mov	r1, r8
 80069b4:	4638      	mov	r0, r7
 80069b6:	f7ff fe3b 	bl	8006630 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069ba:	4620      	mov	r0, r4
 80069bc:	f7ff feac 	bl	8006718 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069c0:	2001      	movs	r0, #1
	}
 80069c2:	b005      	add	sp, #20
 80069c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80069c8:	4630      	mov	r0, r6
 80069ca:	f000 fd47 	bl	800745c <vPortFree>
 80069ce:	e7e4      	b.n	800699a <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069d4:	e7f5      	b.n	80069c2 <xTaskCreate+0x4c>
 80069d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 80069da:	e7f2      	b.n	80069c2 <xTaskCreate+0x4c>

080069dc <vTaskStartScheduler>:
{
 80069dc:	b510      	push	{r4, lr}
 80069de:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80069e0:	2400      	movs	r4, #0
 80069e2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80069e4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80069e6:	aa07      	add	r2, sp, #28
 80069e8:	a906      	add	r1, sp, #24
 80069ea:	a805      	add	r0, sp, #20
 80069ec:	f001 f86a 	bl	8007ac4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80069f0:	9b05      	ldr	r3, [sp, #20]
 80069f2:	9302      	str	r3, [sp, #8]
 80069f4:	9b06      	ldr	r3, [sp, #24]
 80069f6:	9301      	str	r3, [sp, #4]
 80069f8:	9400      	str	r4, [sp, #0]
 80069fa:	4623      	mov	r3, r4
 80069fc:	9a07      	ldr	r2, [sp, #28]
 80069fe:	490d      	ldr	r1, [pc, #52]	; (8006a34 <vTaskStartScheduler+0x58>)
 8006a00:	480d      	ldr	r0, [pc, #52]	; (8006a38 <vTaskStartScheduler+0x5c>)
 8006a02:	f7ff ff7f 	bl	8006904 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006a06:	b908      	cbnz	r0, 8006a0c <vTaskStartScheduler+0x30>
}
 8006a08:	b008      	add	sp, #32
 8006a0a:	bd10      	pop	{r4, pc}
 8006a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a1c:	4b07      	ldr	r3, [pc, #28]	; (8006a3c <vTaskStartScheduler+0x60>)
 8006a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a22:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a24:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <vTaskStartScheduler+0x64>)
 8006a26:	2201      	movs	r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006a2a:	4b06      	ldr	r3, [pc, #24]	; (8006a44 <vTaskStartScheduler+0x68>)
 8006a2c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006a2e:	f000 fbab 	bl	8007188 <xPortStartScheduler>
 8006a32:	e7e9      	b.n	8006a08 <vTaskStartScheduler+0x2c>
 8006a34:	0800e9fc 	.word	0x0800e9fc
 8006a38:	08006845 	.word	0x08006845
 8006a3c:	20000454 	.word	0x20000454
 8006a40:	20000470 	.word	0x20000470
 8006a44:	2000049c 	.word	0x2000049c

08006a48 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006a48:	4a02      	ldr	r2, [pc, #8]	; (8006a54 <vTaskSuspendAll+0xc>)
 8006a4a:	6813      	ldr	r3, [r2, #0]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	6013      	str	r3, [r2, #0]
}
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	20000420 	.word	0x20000420

08006a58 <xTaskIncrementTick>:
{
 8006a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a5a:	4b3a      	ldr	r3, [pc, #232]	; (8006b44 <xTaskIncrementTick+0xec>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d164      	bne.n	8006b2c <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a62:	4b39      	ldr	r3, [pc, #228]	; (8006b48 <xTaskIncrementTick+0xf0>)
 8006a64:	681d      	ldr	r5, [r3, #0]
 8006a66:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8006a68:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a6a:	b9c5      	cbnz	r5, 8006a9e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8006a6c:	4b37      	ldr	r3, [pc, #220]	; (8006b4c <xTaskIncrementTick+0xf4>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	b143      	cbz	r3, 8006a86 <xTaskIncrementTick+0x2e>
 8006a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	e7fe      	b.n	8006a84 <xTaskIncrementTick+0x2c>
 8006a86:	4a31      	ldr	r2, [pc, #196]	; (8006b4c <xTaskIncrementTick+0xf4>)
 8006a88:	6811      	ldr	r1, [r2, #0]
 8006a8a:	4b31      	ldr	r3, [pc, #196]	; (8006b50 <xTaskIncrementTick+0xf8>)
 8006a8c:	6818      	ldr	r0, [r3, #0]
 8006a8e:	6010      	str	r0, [r2, #0]
 8006a90:	6019      	str	r1, [r3, #0]
 8006a92:	4a30      	ldr	r2, [pc, #192]	; (8006b54 <xTaskIncrementTick+0xfc>)
 8006a94:	6813      	ldr	r3, [r2, #0]
 8006a96:	3301      	adds	r3, #1
 8006a98:	6013      	str	r3, [r2, #0]
 8006a9a:	f7ff fdb3 	bl	8006604 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a9e:	4b2e      	ldr	r3, [pc, #184]	; (8006b58 <xTaskIncrementTick+0x100>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	42ab      	cmp	r3, r5
 8006aa4:	d938      	bls.n	8006b18 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8006aa6:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006aa8:	4b2c      	ldr	r3, [pc, #176]	; (8006b5c <xTaskIncrementTick+0x104>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006ab2:	009a      	lsls	r2, r3, #2
 8006ab4:	4b2a      	ldr	r3, [pc, #168]	; (8006b60 <xTaskIncrementTick+0x108>)
 8006ab6:	589b      	ldr	r3, [r3, r2]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d93c      	bls.n	8006b36 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8006abc:	2401      	movs	r4, #1
 8006abe:	e03a      	b.n	8006b36 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8006ac0:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ac2:	4b22      	ldr	r3, [pc, #136]	; (8006b4c <xTaskIncrementTick+0xf4>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	b343      	cbz	r3, 8006b1c <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006aca:	4b20      	ldr	r3, [pc, #128]	; (8006b4c <xTaskIncrementTick+0xf4>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ad2:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8006ad4:	429d      	cmp	r5, r3
 8006ad6:	d326      	bcc.n	8006b26 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ad8:	1d37      	adds	r7, r6, #4
 8006ada:	4638      	mov	r0, r7
 8006adc:	f7ff fb59 	bl	8006192 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ae0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006ae2:	b11b      	cbz	r3, 8006aec <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ae4:	f106 0018 	add.w	r0, r6, #24
 8006ae8:	f7ff fb53 	bl	8006192 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006aec:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8006aee:	2201      	movs	r2, #1
 8006af0:	409a      	lsls	r2, r3
 8006af2:	491c      	ldr	r1, [pc, #112]	; (8006b64 <xTaskIncrementTick+0x10c>)
 8006af4:	6808      	ldr	r0, [r1, #0]
 8006af6:	4302      	orrs	r2, r0
 8006af8:	600a      	str	r2, [r1, #0]
 8006afa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006afe:	009a      	lsls	r2, r3, #2
 8006b00:	4639      	mov	r1, r7
 8006b02:	4817      	ldr	r0, [pc, #92]	; (8006b60 <xTaskIncrementTick+0x108>)
 8006b04:	4410      	add	r0, r2
 8006b06:	f7ff fb1e 	bl	8006146 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b0a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8006b0c:	4b13      	ldr	r3, [pc, #76]	; (8006b5c <xTaskIncrementTick+0x104>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d2d4      	bcs.n	8006ac0 <xTaskIncrementTick+0x68>
 8006b16:	e7d4      	b.n	8006ac2 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8006b18:	2400      	movs	r4, #0
 8006b1a:	e7d2      	b.n	8006ac2 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b1c:	4b0e      	ldr	r3, [pc, #56]	; (8006b58 <xTaskIncrementTick+0x100>)
 8006b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b22:	601a      	str	r2, [r3, #0]
					break;
 8006b24:	e7c0      	b.n	8006aa8 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8006b26:	4a0c      	ldr	r2, [pc, #48]	; (8006b58 <xTaskIncrementTick+0x100>)
 8006b28:	6013      	str	r3, [r2, #0]
						break;
 8006b2a:	e7bd      	b.n	8006aa8 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8006b2c:	4a0e      	ldr	r2, [pc, #56]	; (8006b68 <xTaskIncrementTick+0x110>)
 8006b2e:	6813      	ldr	r3, [r2, #0]
 8006b30:	3301      	adds	r3, #1
 8006b32:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006b34:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8006b36:	4b0d      	ldr	r3, [pc, #52]	; (8006b6c <xTaskIncrementTick+0x114>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	b103      	cbz	r3, 8006b3e <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8006b3c:	2401      	movs	r4, #1
}
 8006b3e:	4620      	mov	r0, r4
 8006b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20000420 	.word	0x20000420
 8006b48:	2000049c 	.word	0x2000049c
 8006b4c:	20000380 	.word	0x20000380
 8006b50:	20000384 	.word	0x20000384
 8006b54:	20000458 	.word	0x20000458
 8006b58:	20000454 	.word	0x20000454
 8006b5c:	2000037c 	.word	0x2000037c
 8006b60:	20000388 	.word	0x20000388
 8006b64:	20000428 	.word	0x20000428
 8006b68:	2000041c 	.word	0x2000041c
 8006b6c:	200004a0 	.word	0x200004a0

08006b70 <xTaskResumeAll>:
{
 8006b70:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8006b72:	4b33      	ldr	r3, [pc, #204]	; (8006c40 <xTaskResumeAll+0xd0>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	b943      	cbnz	r3, 8006b8a <xTaskResumeAll+0x1a>
 8006b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7c:	f383 8811 	msr	BASEPRI, r3
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	e7fe      	b.n	8006b88 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8006b8a:	f000 fa5b 	bl	8007044 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006b8e:	4b2c      	ldr	r3, [pc, #176]	; (8006c40 <xTaskResumeAll+0xd0>)
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	3a01      	subs	r2, #1
 8006b94:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d14d      	bne.n	8006c38 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b9c:	4b29      	ldr	r3, [pc, #164]	; (8006c44 <xTaskResumeAll+0xd4>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	b923      	cbnz	r3, 8006bac <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8006ba2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006ba4:	f000 fa70 	bl	8007088 <vPortExitCritical>
}
 8006ba8:	4620      	mov	r0, r4
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 8006bac:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bae:	4b26      	ldr	r3, [pc, #152]	; (8006c48 <xTaskResumeAll+0xd8>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	b31b      	cbz	r3, 8006bfc <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006bb4:	4b24      	ldr	r3, [pc, #144]	; (8006c48 <xTaskResumeAll+0xd8>)
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bba:	f104 0018 	add.w	r0, r4, #24
 8006bbe:	f7ff fae8 	bl	8006192 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bc2:	1d25      	adds	r5, r4, #4
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	f7ff fae4 	bl	8006192 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006bca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006bcc:	2201      	movs	r2, #1
 8006bce:	409a      	lsls	r2, r3
 8006bd0:	491e      	ldr	r1, [pc, #120]	; (8006c4c <xTaskResumeAll+0xdc>)
 8006bd2:	6808      	ldr	r0, [r1, #0]
 8006bd4:	4302      	orrs	r2, r0
 8006bd6:	600a      	str	r2, [r1, #0]
 8006bd8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006bdc:	009a      	lsls	r2, r3, #2
 8006bde:	4629      	mov	r1, r5
 8006be0:	481b      	ldr	r0, [pc, #108]	; (8006c50 <xTaskResumeAll+0xe0>)
 8006be2:	4410      	add	r0, r2
 8006be4:	f7ff faaf 	bl	8006146 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006be8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006bea:	4b1a      	ldr	r3, [pc, #104]	; (8006c54 <xTaskResumeAll+0xe4>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d3dc      	bcc.n	8006bae <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8006bf4:	4b18      	ldr	r3, [pc, #96]	; (8006c58 <xTaskResumeAll+0xe8>)
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	e7d8      	b.n	8006bae <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8006bfc:	b10c      	cbz	r4, 8006c02 <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8006bfe:	f7ff fd01 	bl	8006604 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006c02:	4b16      	ldr	r3, [pc, #88]	; (8006c5c <xTaskResumeAll+0xec>)
 8006c04:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006c06:	b154      	cbz	r4, 8006c1e <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8006c08:	f7ff ff26 	bl	8006a58 <xTaskIncrementTick>
 8006c0c:	b110      	cbz	r0, 8006c14 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8006c0e:	4b12      	ldr	r3, [pc, #72]	; (8006c58 <xTaskResumeAll+0xe8>)
 8006c10:	2201      	movs	r2, #1
 8006c12:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006c14:	3c01      	subs	r4, #1
 8006c16:	d1f7      	bne.n	8006c08 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 8006c18:	4b10      	ldr	r3, [pc, #64]	; (8006c5c <xTaskResumeAll+0xec>)
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8006c1e:	4b0e      	ldr	r3, [pc, #56]	; (8006c58 <xTaskResumeAll+0xe8>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	b15b      	cbz	r3, 8006c3c <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8006c24:	4b0e      	ldr	r3, [pc, #56]	; (8006c60 <xTaskResumeAll+0xf0>)
 8006c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006c34:	2401      	movs	r4, #1
 8006c36:	e7b5      	b.n	8006ba4 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8006c38:	2400      	movs	r4, #0
 8006c3a:	e7b3      	b.n	8006ba4 <xTaskResumeAll+0x34>
 8006c3c:	2400      	movs	r4, #0
 8006c3e:	e7b1      	b.n	8006ba4 <xTaskResumeAll+0x34>
 8006c40:	20000420 	.word	0x20000420
 8006c44:	20000414 	.word	0x20000414
 8006c48:	2000045c 	.word	0x2000045c
 8006c4c:	20000428 	.word	0x20000428
 8006c50:	20000388 	.word	0x20000388
 8006c54:	2000037c 	.word	0x2000037c
 8006c58:	200004a0 	.word	0x200004a0
 8006c5c:	2000041c 	.word	0x2000041c
 8006c60:	e000ed04 	.word	0xe000ed04

08006c64 <vTaskDelay>:
	{
 8006c64:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c66:	b1a8      	cbz	r0, 8006c94 <vTaskDelay+0x30>
 8006c68:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8006c6a:	4b0f      	ldr	r3, [pc, #60]	; (8006ca8 <vTaskDelay+0x44>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	b143      	cbz	r3, 8006c82 <vTaskDelay+0x1e>
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	e7fe      	b.n	8006c80 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006c82:	f7ff fee1 	bl	8006a48 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c86:	2100      	movs	r1, #0
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f7ff fdef 	bl	800686c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006c8e:	f7ff ff6f 	bl	8006b70 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006c92:	b938      	cbnz	r0, 8006ca4 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8006c94:	4b05      	ldr	r3, [pc, #20]	; (8006cac <vTaskDelay+0x48>)
 8006c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	f3bf 8f6f 	isb	sy
	}
 8006ca4:	bd10      	pop	{r4, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20000420 	.word	0x20000420
 8006cac:	e000ed04 	.word	0xe000ed04

08006cb0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006cb0:	4b20      	ldr	r3, [pc, #128]	; (8006d34 <vTaskSwitchContext+0x84>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	b11b      	cbz	r3, 8006cbe <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006cb6:	4b20      	ldr	r3, [pc, #128]	; (8006d38 <vTaskSwitchContext+0x88>)
 8006cb8:	2201      	movs	r2, #1
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8006cbe:	4b1e      	ldr	r3, [pc, #120]	; (8006d38 <vTaskSwitchContext+0x88>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006cc4:	4b1d      	ldr	r3, [pc, #116]	; (8006d3c <vTaskSwitchContext+0x8c>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006cc8:	fab3 f383 	clz	r3, r3
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	f1c3 031f 	rsb	r3, r3, #31
 8006cd2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006cd6:	008a      	lsls	r2, r1, #2
 8006cd8:	4919      	ldr	r1, [pc, #100]	; (8006d40 <vTaskSwitchContext+0x90>)
 8006cda:	588a      	ldr	r2, [r1, r2]
 8006cdc:	b942      	cbnz	r2, 8006cf0 <vTaskSwitchContext+0x40>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	e7fe      	b.n	8006cee <vTaskSwitchContext+0x3e>
{
 8006cf0:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006cf2:	4813      	ldr	r0, [pc, #76]	; (8006d40 <vTaskSwitchContext+0x90>)
 8006cf4:	009a      	lsls	r2, r3, #2
 8006cf6:	18d4      	adds	r4, r2, r3
 8006cf8:	00a1      	lsls	r1, r4, #2
 8006cfa:	4401      	add	r1, r0
 8006cfc:	684c      	ldr	r4, [r1, #4]
 8006cfe:	6864      	ldr	r4, [r4, #4]
 8006d00:	604c      	str	r4, [r1, #4]
 8006d02:	441a      	add	r2, r3
 8006d04:	0091      	lsls	r1, r2, #2
 8006d06:	3108      	adds	r1, #8
 8006d08:	4408      	add	r0, r1
 8006d0a:	4284      	cmp	r4, r0
 8006d0c:	d00b      	beq.n	8006d26 <vTaskSwitchContext+0x76>
 8006d0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006d12:	009a      	lsls	r2, r3, #2
 8006d14:	4b0a      	ldr	r3, [pc, #40]	; (8006d40 <vTaskSwitchContext+0x90>)
 8006d16:	4413      	add	r3, r2
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	4b09      	ldr	r3, [pc, #36]	; (8006d44 <vTaskSwitchContext+0x94>)
 8006d1e:	601a      	str	r2, [r3, #0]
}
 8006d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d24:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006d26:	6861      	ldr	r1, [r4, #4]
 8006d28:	4805      	ldr	r0, [pc, #20]	; (8006d40 <vTaskSwitchContext+0x90>)
 8006d2a:	2214      	movs	r2, #20
 8006d2c:	fb02 0203 	mla	r2, r2, r3, r0
 8006d30:	6051      	str	r1, [r2, #4]
 8006d32:	e7ec      	b.n	8006d0e <vTaskSwitchContext+0x5e>
 8006d34:	20000420 	.word	0x20000420
 8006d38:	200004a0 	.word	0x200004a0
 8006d3c:	20000428 	.word	0x20000428
 8006d40:	20000388 	.word	0x20000388
 8006d44:	2000037c 	.word	0x2000037c

08006d48 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006d48:	b940      	cbnz	r0, 8006d5c <vTaskPlaceOnEventList+0x14>
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	e7fe      	b.n	8006d5a <vTaskPlaceOnEventList+0x12>
{
 8006d5c:	b510      	push	{r4, lr}
 8006d5e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d60:	4b04      	ldr	r3, [pc, #16]	; (8006d74 <vTaskPlaceOnEventList+0x2c>)
 8006d62:	6819      	ldr	r1, [r3, #0]
 8006d64:	3118      	adds	r1, #24
 8006d66:	f7ff f9fa 	bl	800615e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f7ff fd7d 	bl	800686c <prvAddCurrentTaskToDelayedList>
}
 8006d72:	bd10      	pop	{r4, pc}
 8006d74:	2000037c 	.word	0x2000037c

08006d78 <xTaskRemoveFromEventList>:
{
 8006d78:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006d7a:	68c3      	ldr	r3, [r0, #12]
 8006d7c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006d7e:	b944      	cbnz	r4, 8006d92 <xTaskRemoveFromEventList+0x1a>
 8006d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	e7fe      	b.n	8006d90 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d92:	f104 0518 	add.w	r5, r4, #24
 8006d96:	4628      	mov	r0, r5
 8006d98:	f7ff f9fb 	bl	8006192 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d9c:	4b13      	ldr	r3, [pc, #76]	; (8006dec <xTaskRemoveFromEventList+0x74>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	b9e3      	cbnz	r3, 8006ddc <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006da2:	1d25      	adds	r5, r4, #4
 8006da4:	4628      	mov	r0, r5
 8006da6:	f7ff f9f4 	bl	8006192 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006daa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006dac:	2201      	movs	r2, #1
 8006dae:	409a      	lsls	r2, r3
 8006db0:	490f      	ldr	r1, [pc, #60]	; (8006df0 <xTaskRemoveFromEventList+0x78>)
 8006db2:	6808      	ldr	r0, [r1, #0]
 8006db4:	4302      	orrs	r2, r0
 8006db6:	600a      	str	r2, [r1, #0]
 8006db8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006dbc:	009a      	lsls	r2, r3, #2
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	480c      	ldr	r0, [pc, #48]	; (8006df4 <xTaskRemoveFromEventList+0x7c>)
 8006dc2:	4410      	add	r0, r2
 8006dc4:	f7ff f9bf 	bl	8006146 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006dc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006dca:	4b0b      	ldr	r3, [pc, #44]	; (8006df8 <xTaskRemoveFromEventList+0x80>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d908      	bls.n	8006de6 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8006dd4:	2001      	movs	r0, #1
 8006dd6:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <xTaskRemoveFromEventList+0x84>)
 8006dd8:	6018      	str	r0, [r3, #0]
}
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ddc:	4629      	mov	r1, r5
 8006dde:	4808      	ldr	r0, [pc, #32]	; (8006e00 <xTaskRemoveFromEventList+0x88>)
 8006de0:	f7ff f9b1 	bl	8006146 <vListInsertEnd>
 8006de4:	e7f0      	b.n	8006dc8 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 8006de6:	2000      	movs	r0, #0
	return xReturn;
 8006de8:	e7f7      	b.n	8006dda <xTaskRemoveFromEventList+0x62>
 8006dea:	bf00      	nop
 8006dec:	20000420 	.word	0x20000420
 8006df0:	20000428 	.word	0x20000428
 8006df4:	20000388 	.word	0x20000388
 8006df8:	2000037c 	.word	0x2000037c
 8006dfc:	200004a0 	.word	0x200004a0
 8006e00:	2000045c 	.word	0x2000045c

08006e04 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e04:	4b03      	ldr	r3, [pc, #12]	; (8006e14 <vTaskInternalSetTimeOutState+0x10>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e0a:	4b03      	ldr	r3, [pc, #12]	; (8006e18 <vTaskInternalSetTimeOutState+0x14>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6043      	str	r3, [r0, #4]
}
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	20000458 	.word	0x20000458
 8006e18:	2000049c 	.word	0x2000049c

08006e1c <xTaskCheckForTimeOut>:
{
 8006e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8006e1e:	b150      	cbz	r0, 8006e36 <xTaskCheckForTimeOut+0x1a>
 8006e20:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8006e22:	b989      	cbnz	r1, 8006e48 <xTaskCheckForTimeOut+0x2c>
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	e7fe      	b.n	8006e34 <xTaskCheckForTimeOut+0x18>
 8006e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	e7fe      	b.n	8006e46 <xTaskCheckForTimeOut+0x2a>
 8006e48:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8006e4a:	f000 f8fb 	bl	8007044 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006e4e:	4b11      	ldr	r3, [pc, #68]	; (8006e94 <xTaskCheckForTimeOut+0x78>)
 8006e50:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e52:	6868      	ldr	r0, [r5, #4]
 8006e54:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e5c:	d016      	beq.n	8006e8c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e5e:	682f      	ldr	r7, [r5, #0]
 8006e60:	4e0d      	ldr	r6, [pc, #52]	; (8006e98 <xTaskCheckForTimeOut+0x7c>)
 8006e62:	6836      	ldr	r6, [r6, #0]
 8006e64:	42b7      	cmp	r7, r6
 8006e66:	d001      	beq.n	8006e6c <xTaskCheckForTimeOut+0x50>
 8006e68:	4288      	cmp	r0, r1
 8006e6a:	d911      	bls.n	8006e90 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d803      	bhi.n	8006e78 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8006e70:	2300      	movs	r3, #0
 8006e72:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006e74:	2401      	movs	r4, #1
 8006e76:	e005      	b.n	8006e84 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8006e78:	1a9b      	subs	r3, r3, r2
 8006e7a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	f7ff ffc1 	bl	8006e04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e82:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006e84:	f000 f900 	bl	8007088 <vPortExitCritical>
}
 8006e88:	4620      	mov	r0, r4
 8006e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8006e8c:	2400      	movs	r4, #0
 8006e8e:	e7f9      	b.n	8006e84 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8006e90:	2401      	movs	r4, #1
 8006e92:	e7f7      	b.n	8006e84 <xTaskCheckForTimeOut+0x68>
 8006e94:	2000049c 	.word	0x2000049c
 8006e98:	20000458 	.word	0x20000458

08006e9c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006e9c:	4b01      	ldr	r3, [pc, #4]	; (8006ea4 <vTaskMissedYield+0x8>)
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	601a      	str	r2, [r3, #0]
}
 8006ea2:	4770      	bx	lr
 8006ea4:	200004a0 	.word	0x200004a0

08006ea8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006ea8:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <xTaskGetSchedulerState+0x18>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	b133      	cbz	r3, 8006ebc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eae:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <xTaskGetSchedulerState+0x1c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	b10b      	cbz	r3, 8006eb8 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8006eb4:	2000      	movs	r0, #0
	}
 8006eb6:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8006eb8:	2002      	movs	r0, #2
 8006eba:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ebc:	2001      	movs	r0, #1
 8006ebe:	4770      	bx	lr
 8006ec0:	20000470 	.word	0x20000470
 8006ec4:	20000420 	.word	0x20000420

08006ec8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	d049      	beq.n	8006f60 <xTaskPriorityDisinherit+0x98>
	{
 8006ecc:	b538      	push	{r3, r4, r5, lr}
 8006ece:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8006ed0:	4a26      	ldr	r2, [pc, #152]	; (8006f6c <xTaskPriorityDisinherit+0xa4>)
 8006ed2:	6812      	ldr	r2, [r2, #0]
 8006ed4:	4282      	cmp	r2, r0
 8006ed6:	d008      	beq.n	8006eea <xTaskPriorityDisinherit+0x22>
 8006ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	e7fe      	b.n	8006ee8 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8006eea:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006eec:	b942      	cbnz	r2, 8006f00 <xTaskPriorityDisinherit+0x38>
 8006eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	e7fe      	b.n	8006efe <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8006f00:	3a01      	subs	r2, #1
 8006f02:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f04:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8006f06:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006f08:	4288      	cmp	r0, r1
 8006f0a:	d02b      	beq.n	8006f64 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f0c:	bb62      	cbnz	r2, 8006f68 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f0e:	1d25      	adds	r5, r4, #4
 8006f10:	4628      	mov	r0, r5
 8006f12:	f7ff f93e 	bl	8006192 <uxListRemove>
 8006f16:	b970      	cbnz	r0, 8006f36 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006f18:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006f1a:	2314      	movs	r3, #20
 8006f1c:	fb03 f302 	mul.w	r3, r3, r2
 8006f20:	4913      	ldr	r1, [pc, #76]	; (8006f70 <xTaskPriorityDisinherit+0xa8>)
 8006f22:	58cb      	ldr	r3, [r1, r3]
 8006f24:	b93b      	cbnz	r3, 8006f36 <xTaskPriorityDisinherit+0x6e>
 8006f26:	2301      	movs	r3, #1
 8006f28:	fa03 f202 	lsl.w	r2, r3, r2
 8006f2c:	4911      	ldr	r1, [pc, #68]	; (8006f74 <xTaskPriorityDisinherit+0xac>)
 8006f2e:	680b      	ldr	r3, [r1, #0]
 8006f30:	ea23 0302 	bic.w	r3, r3, r2
 8006f34:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006f38:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f3a:	f1c3 0207 	rsb	r2, r3, #7
 8006f3e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f40:	2401      	movs	r4, #1
 8006f42:	fa04 f203 	lsl.w	r2, r4, r3
 8006f46:	490b      	ldr	r1, [pc, #44]	; (8006f74 <xTaskPriorityDisinherit+0xac>)
 8006f48:	6808      	ldr	r0, [r1, #0]
 8006f4a:	4302      	orrs	r2, r0
 8006f4c:	600a      	str	r2, [r1, #0]
 8006f4e:	4629      	mov	r1, r5
 8006f50:	4a07      	ldr	r2, [pc, #28]	; (8006f70 <xTaskPriorityDisinherit+0xa8>)
 8006f52:	2014      	movs	r0, #20
 8006f54:	fb00 2003 	mla	r0, r0, r3, r2
 8006f58:	f7ff f8f5 	bl	8006146 <vListInsertEnd>
					xReturn = pdTRUE;
 8006f5c:	4620      	mov	r0, r4
	}
 8006f5e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8006f60:	2000      	movs	r0, #0
	}
 8006f62:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8006f64:	2000      	movs	r0, #0
 8006f66:	e7fa      	b.n	8006f5e <xTaskPriorityDisinherit+0x96>
 8006f68:	2000      	movs	r0, #0
		return xReturn;
 8006f6a:	e7f8      	b.n	8006f5e <xTaskPriorityDisinherit+0x96>
 8006f6c:	2000037c 	.word	0x2000037c
 8006f70:	20000388 	.word	0x20000388
 8006f74:	20000428 	.word	0x20000428

08006f78 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f78:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f7e:	4b0d      	ldr	r3, [pc, #52]	; (8006fb4 <prvTaskExitError+0x3c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f86:	d008      	beq.n	8006f9a <prvTaskExitError+0x22>
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	e7fe      	b.n	8006f98 <prvTaskExitError+0x20>
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006faa:	9b01      	ldr	r3, [sp, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d0fc      	beq.n	8006faa <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006fb0:	b002      	add	sp, #8
 8006fb2:	4770      	bx	lr
 8006fb4:	20000084 	.word	0x20000084

08006fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fb8:	4808      	ldr	r0, [pc, #32]	; (8006fdc <prvPortStartFirstTask+0x24>)
 8006fba:	6800      	ldr	r0, [r0, #0]
 8006fbc:	6800      	ldr	r0, [r0, #0]
 8006fbe:	f380 8808 	msr	MSP, r0
 8006fc2:	f04f 0000 	mov.w	r0, #0
 8006fc6:	f380 8814 	msr	CONTROL, r0
 8006fca:	b662      	cpsie	i
 8006fcc:	b661      	cpsie	f
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	df00      	svc	0
 8006fd8:	bf00      	nop
 8006fda:	0000      	.short	0x0000
 8006fdc:	e000ed08 	.word	0xe000ed08

08006fe0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006fe0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ff0 <vPortEnableVFP+0x10>
 8006fe4:	6801      	ldr	r1, [r0, #0]
 8006fe6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006fea:	6001      	str	r1, [r0, #0]
 8006fec:	4770      	bx	lr
 8006fee:	0000      	.short	0x0000
 8006ff0:	e000ed88 	.word	0xe000ed88

08006ff4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ff4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ff8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ffc:	f021 0101 	bic.w	r1, r1, #1
 8007000:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007004:	4b05      	ldr	r3, [pc, #20]	; (800701c <pxPortInitialiseStack+0x28>)
 8007006:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800700a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800700e:	f06f 0302 	mvn.w	r3, #2
 8007012:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8007016:	3844      	subs	r0, #68	; 0x44
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	08006f79 	.word	0x08006f79

08007020 <SVC_Handler>:
	__asm volatile (
 8007020:	4b07      	ldr	r3, [pc, #28]	; (8007040 <pxCurrentTCBConst2>)
 8007022:	6819      	ldr	r1, [r3, #0]
 8007024:	6808      	ldr	r0, [r1, #0]
 8007026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702a:	f380 8809 	msr	PSP, r0
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f04f 0000 	mov.w	r0, #0
 8007036:	f380 8811 	msr	BASEPRI, r0
 800703a:	4770      	bx	lr
 800703c:	f3af 8000 	nop.w

08007040 <pxCurrentTCBConst2>:
 8007040:	2000037c 	.word	0x2000037c

08007044 <vPortEnterCritical>:
 8007044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8007054:	4a0a      	ldr	r2, [pc, #40]	; (8007080 <vPortEnterCritical+0x3c>)
 8007056:	6813      	ldr	r3, [r2, #0]
 8007058:	3301      	adds	r3, #1
 800705a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800705c:	2b01      	cmp	r3, #1
 800705e:	d000      	beq.n	8007062 <vPortEnterCritical+0x1e>
}
 8007060:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007062:	4b08      	ldr	r3, [pc, #32]	; (8007084 <vPortEnterCritical+0x40>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f013 0fff 	tst.w	r3, #255	; 0xff
 800706a:	d0f9      	beq.n	8007060 <vPortEnterCritical+0x1c>
 800706c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	e7fe      	b.n	800707c <vPortEnterCritical+0x38>
 800707e:	bf00      	nop
 8007080:	20000084 	.word	0x20000084
 8007084:	e000ed04 	.word	0xe000ed04

08007088 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007088:	4b09      	ldr	r3, [pc, #36]	; (80070b0 <vPortExitCritical+0x28>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	b943      	cbnz	r3, 80070a0 <vPortExitCritical+0x18>
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	e7fe      	b.n	800709e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80070a0:	3b01      	subs	r3, #1
 80070a2:	4a03      	ldr	r2, [pc, #12]	; (80070b0 <vPortExitCritical+0x28>)
 80070a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070a6:	b90b      	cbnz	r3, 80070ac <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80070a8:	f383 8811 	msr	BASEPRI, r3
}
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	20000084 	.word	0x20000084
	...

080070c0 <PendSV_Handler>:
	__asm volatile
 80070c0:	f3ef 8009 	mrs	r0, PSP
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	4b15      	ldr	r3, [pc, #84]	; (8007120 <pxCurrentTCBConst>)
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	f01e 0f10 	tst.w	lr, #16
 80070d0:	bf08      	it	eq
 80070d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80070d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070da:	6010      	str	r0, [r2, #0]
 80070dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80070e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070e4:	f380 8811 	msr	BASEPRI, r0
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f7ff fdde 	bl	8006cb0 <vTaskSwitchContext>
 80070f4:	f04f 0000 	mov.w	r0, #0
 80070f8:	f380 8811 	msr	BASEPRI, r0
 80070fc:	bc09      	pop	{r0, r3}
 80070fe:	6819      	ldr	r1, [r3, #0]
 8007100:	6808      	ldr	r0, [r1, #0]
 8007102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007106:	f01e 0f10 	tst.w	lr, #16
 800710a:	bf08      	it	eq
 800710c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007110:	f380 8809 	msr	PSP, r0
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	f3af 8000 	nop.w

08007120 <pxCurrentTCBConst>:
 8007120:	2000037c 	.word	0x2000037c

08007124 <SysTick_Handler>:
{
 8007124:	b508      	push	{r3, lr}
	__asm volatile
 8007126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712a:	f383 8811 	msr	BASEPRI, r3
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007136:	f7ff fc8f 	bl	8006a58 <xTaskIncrementTick>
 800713a:	b118      	cbz	r0, 8007144 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800713c:	4b03      	ldr	r3, [pc, #12]	; (800714c <SysTick_Handler+0x28>)
 800713e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007142:	601a      	str	r2, [r3, #0]
	__asm volatile
 8007144:	2300      	movs	r3, #0
 8007146:	f383 8811 	msr	BASEPRI, r3
}
 800714a:	bd08      	pop	{r3, pc}
 800714c:	e000ed04 	.word	0xe000ed04

08007150 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007150:	4a08      	ldr	r2, [pc, #32]	; (8007174 <vPortSetupTimerInterrupt+0x24>)
 8007152:	2300      	movs	r3, #0
 8007154:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007156:	4908      	ldr	r1, [pc, #32]	; (8007178 <vPortSetupTimerInterrupt+0x28>)
 8007158:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800715a:	4b08      	ldr	r3, [pc, #32]	; (800717c <vPortSetupTimerInterrupt+0x2c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4908      	ldr	r1, [pc, #32]	; (8007180 <vPortSetupTimerInterrupt+0x30>)
 8007160:	fba1 1303 	umull	r1, r3, r1, r3
 8007164:	099b      	lsrs	r3, r3, #6
 8007166:	3b01      	subs	r3, #1
 8007168:	4906      	ldr	r1, [pc, #24]	; (8007184 <vPortSetupTimerInterrupt+0x34>)
 800716a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800716c:	2307      	movs	r3, #7
 800716e:	6013      	str	r3, [r2, #0]
}
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	e000e010 	.word	0xe000e010
 8007178:	e000e018 	.word	0xe000e018
 800717c:	20000090 	.word	0x20000090
 8007180:	10624dd3 	.word	0x10624dd3
 8007184:	e000e014 	.word	0xe000e014

08007188 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007188:	4b3a      	ldr	r3, [pc, #232]	; (8007274 <xPortStartScheduler+0xec>)
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	4b3a      	ldr	r3, [pc, #232]	; (8007278 <xPortStartScheduler+0xf0>)
 800718e:	429a      	cmp	r2, r3
 8007190:	d00d      	beq.n	80071ae <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007192:	4b38      	ldr	r3, [pc, #224]	; (8007274 <xPortStartScheduler+0xec>)
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	4b39      	ldr	r3, [pc, #228]	; (800727c <xPortStartScheduler+0xf4>)
 8007198:	429a      	cmp	r2, r3
 800719a:	d111      	bne.n	80071c0 <xPortStartScheduler+0x38>
	__asm volatile
 800719c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	e7fe      	b.n	80071ac <xPortStartScheduler+0x24>
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	e7fe      	b.n	80071be <xPortStartScheduler+0x36>
{
 80071c0:	b510      	push	{r4, lr}
 80071c2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80071c4:	4b2e      	ldr	r3, [pc, #184]	; (8007280 <xPortStartScheduler+0xf8>)
 80071c6:	781a      	ldrb	r2, [r3, #0]
 80071c8:	b2d2      	uxtb	r2, r2
 80071ca:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80071cc:	22ff      	movs	r2, #255	; 0xff
 80071ce:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80071d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80071dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80071e0:	4a28      	ldr	r2, [pc, #160]	; (8007284 <xPortStartScheduler+0xfc>)
 80071e2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80071e4:	4b28      	ldr	r3, [pc, #160]	; (8007288 <xPortStartScheduler+0x100>)
 80071e6:	2207      	movs	r2, #7
 80071e8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071ea:	e009      	b.n	8007200 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 80071ec:	4a26      	ldr	r2, [pc, #152]	; (8007288 <xPortStartScheduler+0x100>)
 80071ee:	6813      	ldr	r3, [r2, #0]
 80071f0:	3b01      	subs	r3, #1
 80071f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007200:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007204:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007208:	d1f0      	bne.n	80071ec <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800720a:	4b1f      	ldr	r3, [pc, #124]	; (8007288 <xPortStartScheduler+0x100>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b03      	cmp	r3, #3
 8007210:	d008      	beq.n	8007224 <xPortStartScheduler+0x9c>
 8007212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	e7fe      	b.n	8007222 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007224:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800722a:	4a17      	ldr	r2, [pc, #92]	; (8007288 <xPortStartScheduler+0x100>)
 800722c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800722e:	9b01      	ldr	r3, [sp, #4]
 8007230:	b2db      	uxtb	r3, r3
 8007232:	4a13      	ldr	r2, [pc, #76]	; (8007280 <xPortStartScheduler+0xf8>)
 8007234:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007236:	4b15      	ldr	r3, [pc, #84]	; (800728c <xPortStartScheduler+0x104>)
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800723e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8007246:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8007248:	f7ff ff82 	bl	8007150 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800724c:	2400      	movs	r4, #0
 800724e:	4b10      	ldr	r3, [pc, #64]	; (8007290 <xPortStartScheduler+0x108>)
 8007250:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8007252:	f7ff fec5 	bl	8006fe0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007256:	4a0f      	ldr	r2, [pc, #60]	; (8007294 <xPortStartScheduler+0x10c>)
 8007258:	6813      	ldr	r3, [r2, #0]
 800725a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800725e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8007260:	f7ff feaa 	bl	8006fb8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007264:	f7ff fd24 	bl	8006cb0 <vTaskSwitchContext>
	prvTaskExitError();
 8007268:	f7ff fe86 	bl	8006f78 <prvTaskExitError>
}
 800726c:	4620      	mov	r0, r4
 800726e:	b002      	add	sp, #8
 8007270:	bd10      	pop	{r4, pc}
 8007272:	bf00      	nop
 8007274:	e000ed00 	.word	0xe000ed00
 8007278:	410fc271 	.word	0x410fc271
 800727c:	410fc270 	.word	0x410fc270
 8007280:	e000e400 	.word	0xe000e400
 8007284:	200004a4 	.word	0x200004a4
 8007288:	200004a8 	.word	0x200004a8
 800728c:	e000ed20 	.word	0xe000ed20
 8007290:	20000084 	.word	0x20000084
 8007294:	e000ef34 	.word	0xe000ef34

08007298 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007298:	4a12      	ldr	r2, [pc, #72]	; (80072e4 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800729a:	f012 0f07 	tst.w	r2, #7
 800729e:	d01e      	beq.n	80072de <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072a0:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072a2:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072a6:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 80072aa:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072ac:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072ae:	480e      	ldr	r0, [pc, #56]	; (80072e8 <prvHeapInit+0x50>)
 80072b0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072b2:	2100      	movs	r1, #0
 80072b4:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072b6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80072b8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072ba:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80072be:	480b      	ldr	r0, [pc, #44]	; (80072ec <prvHeapInit+0x54>)
 80072c0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80072c2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072c4:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072c6:	1a99      	subs	r1, r3, r2
 80072c8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072ca:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072cc:	4b08      	ldr	r3, [pc, #32]	; (80072f0 <prvHeapInit+0x58>)
 80072ce:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072d0:	4b08      	ldr	r3, [pc, #32]	; (80072f4 <prvHeapInit+0x5c>)
 80072d2:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072d4:	4b08      	ldr	r3, [pc, #32]	; (80072f8 <prvHeapInit+0x60>)
 80072d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072da:	601a      	str	r2, [r3, #0]
}
 80072dc:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072de:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80072e2:	e7e4      	b.n	80072ae <prvHeapInit+0x16>
 80072e4:	200004b0 	.word	0x200004b0
 80072e8:	200040bc 	.word	0x200040bc
 80072ec:	200004ac 	.word	0x200004ac
 80072f0:	200040b8 	.word	0x200040b8
 80072f4:	200040b4 	.word	0x200040b4
 80072f8:	200040b0 	.word	0x200040b0

080072fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072fc:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072fe:	4b13      	ldr	r3, [pc, #76]	; (800734c <prvInsertBlockIntoFreeList+0x50>)
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	4282      	cmp	r2, r0
 8007304:	d31b      	bcc.n	800733e <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007306:	6859      	ldr	r1, [r3, #4]
 8007308:	185c      	adds	r4, r3, r1
 800730a:	4284      	cmp	r4, r0
 800730c:	d103      	bne.n	8007316 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800730e:	6840      	ldr	r0, [r0, #4]
 8007310:	4401      	add	r1, r0
 8007312:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007314:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007316:	6841      	ldr	r1, [r0, #4]
 8007318:	1844      	adds	r4, r0, r1
 800731a:	42a2      	cmp	r2, r4
 800731c:	d113      	bne.n	8007346 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800731e:	4c0c      	ldr	r4, [pc, #48]	; (8007350 <prvInsertBlockIntoFreeList+0x54>)
 8007320:	6824      	ldr	r4, [r4, #0]
 8007322:	42a2      	cmp	r2, r4
 8007324:	d00d      	beq.n	8007342 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007326:	6852      	ldr	r2, [r2, #4]
 8007328:	4411      	add	r1, r2
 800732a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	6812      	ldr	r2, [r2, #0]
 8007330:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007332:	4298      	cmp	r0, r3
 8007334:	d000      	beq.n	8007338 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007336:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007338:	f85d 4b04 	ldr.w	r4, [sp], #4
 800733c:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800733e:	4613      	mov	r3, r2
 8007340:	e7de      	b.n	8007300 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007342:	6004      	str	r4, [r0, #0]
 8007344:	e7f5      	b.n	8007332 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007346:	6002      	str	r2, [r0, #0]
 8007348:	e7f3      	b.n	8007332 <prvInsertBlockIntoFreeList+0x36>
 800734a:	bf00      	nop
 800734c:	200040bc 	.word	0x200040bc
 8007350:	200004ac 	.word	0x200004ac

08007354 <pvPortMalloc>:
{
 8007354:	b570      	push	{r4, r5, r6, lr}
 8007356:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007358:	f7ff fb76 	bl	8006a48 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800735c:	4b3a      	ldr	r3, [pc, #232]	; (8007448 <pvPortMalloc+0xf4>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	b1bb      	cbz	r3, 8007392 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007362:	4b3a      	ldr	r3, [pc, #232]	; (800744c <pvPortMalloc+0xf8>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	421c      	tst	r4, r3
 8007368:	d163      	bne.n	8007432 <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 800736a:	b1ac      	cbz	r4, 8007398 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 800736c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800736e:	f014 0f07 	tst.w	r4, #7
 8007372:	d011      	beq.n	8007398 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007374:	f024 0407 	bic.w	r4, r4, #7
 8007378:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800737a:	f004 0307 	and.w	r3, r4, #7
 800737e:	b15b      	cbz	r3, 8007398 <pvPortMalloc+0x44>
 8007380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	e7fe      	b.n	8007390 <pvPortMalloc+0x3c>
			prvHeapInit();
 8007392:	f7ff ff81 	bl	8007298 <prvHeapInit>
 8007396:	e7e4      	b.n	8007362 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007398:	2c00      	cmp	r4, #0
 800739a:	d04c      	beq.n	8007436 <pvPortMalloc+0xe2>
 800739c:	4b2c      	ldr	r3, [pc, #176]	; (8007450 <pvPortMalloc+0xfc>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	42a3      	cmp	r3, r4
 80073a2:	d34a      	bcc.n	800743a <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 80073a4:	4b2b      	ldr	r3, [pc, #172]	; (8007454 <pvPortMalloc+0x100>)
 80073a6:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073a8:	e001      	b.n	80073ae <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 80073aa:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80073ac:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073ae:	686a      	ldr	r2, [r5, #4]
 80073b0:	42a2      	cmp	r2, r4
 80073b2:	d202      	bcs.n	80073ba <pvPortMalloc+0x66>
 80073b4:	682a      	ldr	r2, [r5, #0]
 80073b6:	2a00      	cmp	r2, #0
 80073b8:	d1f7      	bne.n	80073aa <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 80073ba:	4a23      	ldr	r2, [pc, #140]	; (8007448 <pvPortMalloc+0xf4>)
 80073bc:	6812      	ldr	r2, [r2, #0]
 80073be:	42aa      	cmp	r2, r5
 80073c0:	d03d      	beq.n	800743e <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073c2:	681e      	ldr	r6, [r3, #0]
 80073c4:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073c6:	682a      	ldr	r2, [r5, #0]
 80073c8:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073ca:	686b      	ldr	r3, [r5, #4]
 80073cc:	1b1b      	subs	r3, r3, r4
 80073ce:	2b10      	cmp	r3, #16
 80073d0:	d910      	bls.n	80073f4 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073d2:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073d4:	f010 0f07 	tst.w	r0, #7
 80073d8:	d008      	beq.n	80073ec <pvPortMalloc+0x98>
 80073da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	e7fe      	b.n	80073ea <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073ec:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073ee:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073f0:	f7ff ff84 	bl	80072fc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073f4:	686a      	ldr	r2, [r5, #4]
 80073f6:	4916      	ldr	r1, [pc, #88]	; (8007450 <pvPortMalloc+0xfc>)
 80073f8:	680b      	ldr	r3, [r1, #0]
 80073fa:	1a9b      	subs	r3, r3, r2
 80073fc:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073fe:	4916      	ldr	r1, [pc, #88]	; (8007458 <pvPortMalloc+0x104>)
 8007400:	6809      	ldr	r1, [r1, #0]
 8007402:	428b      	cmp	r3, r1
 8007404:	d201      	bcs.n	800740a <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007406:	4914      	ldr	r1, [pc, #80]	; (8007458 <pvPortMalloc+0x104>)
 8007408:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800740a:	4b10      	ldr	r3, [pc, #64]	; (800744c <pvPortMalloc+0xf8>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4313      	orrs	r3, r2
 8007410:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007412:	2300      	movs	r3, #0
 8007414:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8007416:	f7ff fbab 	bl	8006b70 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800741a:	f016 0f07 	tst.w	r6, #7
 800741e:	d010      	beq.n	8007442 <pvPortMalloc+0xee>
 8007420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	e7fe      	b.n	8007430 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8007432:	2600      	movs	r6, #0
 8007434:	e7ef      	b.n	8007416 <pvPortMalloc+0xc2>
 8007436:	2600      	movs	r6, #0
 8007438:	e7ed      	b.n	8007416 <pvPortMalloc+0xc2>
 800743a:	2600      	movs	r6, #0
 800743c:	e7eb      	b.n	8007416 <pvPortMalloc+0xc2>
 800743e:	2600      	movs	r6, #0
 8007440:	e7e9      	b.n	8007416 <pvPortMalloc+0xc2>
}
 8007442:	4630      	mov	r0, r6
 8007444:	bd70      	pop	{r4, r5, r6, pc}
 8007446:	bf00      	nop
 8007448:	200004ac 	.word	0x200004ac
 800744c:	200040b0 	.word	0x200040b0
 8007450:	200040b4 	.word	0x200040b4
 8007454:	200040bc 	.word	0x200040bc
 8007458:	200040b8 	.word	0x200040b8

0800745c <vPortFree>:
	if( pv != NULL )
 800745c:	b380      	cbz	r0, 80074c0 <vPortFree+0x64>
{
 800745e:	b538      	push	{r3, r4, r5, lr}
 8007460:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8007462:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007466:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800746a:	4916      	ldr	r1, [pc, #88]	; (80074c4 <vPortFree+0x68>)
 800746c:	6809      	ldr	r1, [r1, #0]
 800746e:	420a      	tst	r2, r1
 8007470:	d108      	bne.n	8007484 <vPortFree+0x28>
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	e7fe      	b.n	8007482 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007484:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8007488:	b140      	cbz	r0, 800749c <vPortFree+0x40>
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	e7fe      	b.n	800749a <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800749c:	ea22 0201 	bic.w	r2, r2, r1
 80074a0:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 80074a4:	f7ff fad0 	bl	8006a48 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074a8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80074ac:	4a06      	ldr	r2, [pc, #24]	; (80074c8 <vPortFree+0x6c>)
 80074ae:	6813      	ldr	r3, [r2, #0]
 80074b0:	440b      	add	r3, r1
 80074b2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074b4:	4628      	mov	r0, r5
 80074b6:	f7ff ff21 	bl	80072fc <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80074ba:	f7ff fb59 	bl	8006b70 <xTaskResumeAll>
}
 80074be:	bd38      	pop	{r3, r4, r5, pc}
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	200040b0 	.word	0x200040b0
 80074c8:	200040b4 	.word	0x200040b4

080074cc <RF_init>:
//////////////////////////////////// IMU variables /////////////////////////

/////////////////////////////////////////////////////////////////
////////////////////// Init NRF24L01 Module /////////////////////
/////////////////////////////////////////////////////////////////
void RF_init() {
 80074cc:	b510      	push	{r4, lr}
 80074ce:	b096      	sub	sp, #88	; 0x58

#if NRF24
	DWT_Init(); //Enable some of the MCUs special registers so we can get microsecond (us) delays
 80074d0:	f7fb fd88 	bl	8002fe4 <DWT_Init>
	NRF24_begin(GPIOB, nrf_CSN_PIN, nrf_CE_PIN, hspi2);
 80074d4:	4c0f      	ldr	r4, [pc, #60]	; (8007514 <RF_init+0x48>)
 80074d6:	2254      	movs	r2, #84	; 0x54
 80074d8:	1d21      	adds	r1, r4, #4
 80074da:	4668      	mov	r0, sp
 80074dc:	f002 fdf1 	bl	800a0c2 <memcpy>
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80074e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80074ea:	480b      	ldr	r0, [pc, #44]	; (8007518 <RF_init+0x4c>)
 80074ec:	f7fb f83a 	bl	8002564 <NRF24_begin>
	//nrf24_DebugUART_Init(huart6);
	NRF24_enableAckPayload();
 80074f0:	f7fb f814 	bl	800251c <NRF24_enableAckPayload>
	NRF24_setAutoAck(true);
 80074f4:	2001      	movs	r0, #1
 80074f6:	f7fa ff51 	bl	800239c <NRF24_setAutoAck>
	NRF24_openReadingPipe(1, TxpipeAddrs);
 80074fa:	4b08      	ldr	r3, [pc, #32]	; (800751c <RF_init+0x50>)
 80074fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007500:	2001      	movs	r0, #1
 8007502:	f7fa feb1 	bl	8002268 <NRF24_openReadingPipe>
	NRF24_startListening();
 8007506:	f7fa fe8d 	bl	8002224 <NRF24_startListening>

	printRadioSettings();
 800750a:	f7fb f901 	bl	8002710 <printRadioSettings>
#endif

}
 800750e:	b016      	add	sp, #88	; 0x58
 8007510:	bd10      	pop	{r4, pc}
 8007512:	bf00      	nop
 8007514:	20004950 	.word	0x20004950
 8007518:	40020400 	.word	0x40020400
 800751c:	20000088 	.word	0x20000088

08007520 <unpackRxData>:
#endif
}
// Unpack received 32 byte payload from transmitter, see documentation for specification details
void unpackRxData() {

	Rx_Data.L_Joystick_XPos = (RxData[0] & 0xFF) | (RxData[1] << 8);
 8007520:	4b0e      	ldr	r3, [pc, #56]	; (800755c <unpackRxData+0x3c>)
 8007522:	7819      	ldrb	r1, [r3, #0]
 8007524:	785a      	ldrb	r2, [r3, #1]
 8007526:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800752a:	4a0d      	ldr	r2, [pc, #52]	; (8007560 <unpackRxData+0x40>)
 800752c:	8011      	strh	r1, [r2, #0]
	Rx_Data.L_Joystick_YPos = (RxData[2] & 0xFF) | (RxData[3] << 8);
 800752e:	7899      	ldrb	r1, [r3, #2]
 8007530:	78d8      	ldrb	r0, [r3, #3]
 8007532:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8007536:	8051      	strh	r1, [r2, #2]
	Rx_Data.R_Joystick_XPos = (RxData[4] & 0xFF) | (RxData[5] << 8);
 8007538:	7919      	ldrb	r1, [r3, #4]
 800753a:	7958      	ldrb	r0, [r3, #5]
 800753c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8007540:	8091      	strh	r1, [r2, #4]
	Rx_Data.R_Joystick_YPos = (RxData[6] & 0xFF) | (RxData[7] << 8);
 8007542:	7999      	ldrb	r1, [r3, #6]
 8007544:	79d8      	ldrb	r0, [r3, #7]
 8007546:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800754a:	80d1      	strh	r1, [r2, #6]

	Rx_Data.airmode = (RxData[8] >> 0) & 1;
 800754c:	7a1b      	ldrb	r3, [r3, #8]
 800754e:	f003 0101 	and.w	r1, r3, #1
 8007552:	7211      	strb	r1, [r2, #8]

	Rx_Data.kill_rx = (RxData[8] >> 1) & 1;
 8007554:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007558:	7253      	strb	r3, [r2, #9]
	//	//Remap
	//	pitch_p_gain = (float) roll_p_rx / 100;
	//	pitch_i_gain = (float) roll_i_rx / 100;
	//	pitch_d_gain = (float) roll_d_rx / 100;

}
 800755a:	4770      	bx	lr
 800755c:	200044c4 	.word	0x200044c4
 8007560:	200044b8 	.word	0x200044b8

08007564 <packAckPayData_0>:

//	Pack acknowledge payload data 0 - sent every control loop, which will be sent back to controller once drone has successfully
//	received a payload from it
void packAckPayData_0(float roll, float pitch, float yaw) {
 8007564:	b510      	push	{r4, lr}
 8007566:	ed2d 8b04 	vpush	{d8-d9}
 800756a:	eeb0 9a60 	vmov.f32	s18, s1
 800756e:	eef0 8a41 	vmov.f32	s17, s2

	//ID for packet 0
	AckPayload_0[0] = 0x03;
 8007572:	4c21      	ldr	r4, [pc, #132]	; (80075f8 <packAckPayData_0+0x94>)
 8007574:	2303      	movs	r3, #3
 8007576:	7023      	strb	r3, [r4, #0]

	//Next 2 bytes = Battery level
	AckPayload_0[1] = batteryLevel;
 8007578:	4b20      	ldr	r3, [pc, #128]	; (80075fc <packAckPayData_0+0x98>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	7063      	strb	r3, [r4, #1]
	AckPayload_0[2] = batteryLevel >> 8;
 800757e:	0a1b      	lsrs	r3, r3, #8
 8007580:	70a3      	strb	r3, [r4, #2]

	//Next 4 bytes = IMU Roll
	int16_t roll_tx = round(roll * 100);
 8007582:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8007600 <packAckPayData_0+0x9c>
 8007586:	ee60 7a08 	vmul.f32	s15, s0, s16
 800758a:	ee17 0a90 	vmov	r0, s15
 800758e:	f7f8 ffe3 	bl	8000558 <__aeabi_f2d>
 8007592:	ec41 0b10 	vmov	d0, r0, r1
 8007596:	f000 ff6f 	bl	8008478 <round>
 800759a:	ec51 0b10 	vmov	r0, r1, d0
 800759e:	f7f9 fae3 	bl	8000b68 <__aeabi_d2iz>
 80075a2:	b200      	sxth	r0, r0
	AckPayload_0[3] = roll_tx;
 80075a4:	70e0      	strb	r0, [r4, #3]
	AckPayload_0[4] = roll_tx >> 8;
 80075a6:	1200      	asrs	r0, r0, #8
 80075a8:	7120      	strb	r0, [r4, #4]

	//Next  4 bytes = IMU Pitch
	int16_t pitch_tx = round(pitch * 100);
 80075aa:	ee69 7a08 	vmul.f32	s15, s18, s16
 80075ae:	ee17 0a90 	vmov	r0, s15
 80075b2:	f7f8 ffd1 	bl	8000558 <__aeabi_f2d>
 80075b6:	ec41 0b10 	vmov	d0, r0, r1
 80075ba:	f000 ff5d 	bl	8008478 <round>
 80075be:	ec51 0b10 	vmov	r0, r1, d0
 80075c2:	f7f9 fad1 	bl	8000b68 <__aeabi_d2iz>
 80075c6:	b200      	sxth	r0, r0
	AckPayload_0[5] = pitch_tx;
 80075c8:	7160      	strb	r0, [r4, #5]
	AckPayload_0[6] = pitch_tx >> 8;
 80075ca:	1200      	asrs	r0, r0, #8
 80075cc:	71a0      	strb	r0, [r4, #6]

	//Next  4 bytes = IMU Yaw
	int16_t yaw_tx = round(yaw * 100);
 80075ce:	ee68 7a88 	vmul.f32	s15, s17, s16
 80075d2:	ee17 0a90 	vmov	r0, s15
 80075d6:	f7f8 ffbf 	bl	8000558 <__aeabi_f2d>
 80075da:	ec41 0b10 	vmov	d0, r0, r1
 80075de:	f000 ff4b 	bl	8008478 <round>
 80075e2:	ec51 0b10 	vmov	r0, r1, d0
 80075e6:	f7f9 fabf 	bl	8000b68 <__aeabi_d2iz>
 80075ea:	b200      	sxth	r0, r0
	AckPayload_0[7] = yaw_tx;
 80075ec:	71e0      	strb	r0, [r4, #7]
	AckPayload_0[8] = yaw_tx >> 8;
 80075ee:	1200      	asrs	r0, r0, #8
 80075f0:	7220      	strb	r0, [r4, #8]

}
 80075f2:	ecbd 8b04 	vpop	{d8-d9}
 80075f6:	bd10      	pop	{r4, pc}
 80075f8:	20004498 	.word	0x20004498
 80075fc:	200040c4 	.word	0x200040c4
 8007600:	42c80000 	.word	0x42c80000

08007604 <packAckPayData_1>:

//	Pack acknowledge payload data 1 - sent every second, contains GPS data
void packAckPayData_1() {
 8007604:	b508      	push	{r3, lr}

	//ID for packet 1
	AckPayload_1[0] = 0xFF;
 8007606:	4803      	ldr	r0, [pc, #12]	; (8007614 <packAckPayData_1+0x10>)
 8007608:	23ff      	movs	r3, #255	; 0xff
 800760a:	7003      	strb	r3, [r0, #0]

	getGPSData(AckPayload_1);
 800760c:	f000 fa0a 	bl	8007a24 <getGPSData>

}
 8007610:	bd08      	pop	{r3, pc}
 8007612:	bf00      	nop
 8007614:	20004478 	.word	0x20004478

08007618 <map>:


float map(int x, int in_min, int in_max, int out_min, int out_max) {
 8007618:	b410      	push	{r4}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800761a:	1a40      	subs	r0, r0, r1
 800761c:	9c01      	ldr	r4, [sp, #4]
 800761e:	1ae4      	subs	r4, r4, r3
 8007620:	fb04 f000 	mul.w	r0, r4, r0
 8007624:	1a52      	subs	r2, r2, r1
 8007626:	fb90 f0f2 	sdiv	r0, r0, r2
 800762a:	18c3      	adds	r3, r0, r3
 800762c:	ee00 3a10 	vmov	s0, r3
}
 8007630:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8007634:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007638:	4770      	bx	lr
	...

0800763c <RF_TxRx>:
void RF_TxRx(uint16_t *throttle, float *p_setpoint, float *r_setpoint, float *y_setpoint, float roll, float pitch, float yaw) {
 800763c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800763e:	b083      	sub	sp, #12
 8007640:	4604      	mov	r4, r0
 8007642:	460d      	mov	r5, r1
 8007644:	4616      	mov	r6, r2
	packAckPayData_0(roll, pitch, yaw);
 8007646:	f7ff ff8d 	bl	8007564 <packAckPayData_0>
	if (loop_counter == CRTL_LOOP_FREQ - 1) {
 800764a:	4b39      	ldr	r3, [pc, #228]	; (8007730 <RF_TxRx+0xf4>)
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8007652:	4293      	cmp	r3, r2
 8007654:	d00b      	beq.n	800766e <RF_TxRx+0x32>
		loop_counter++;
 8007656:	3301      	adds	r3, #1
 8007658:	4a35      	ldr	r2, [pc, #212]	; (8007730 <RF_TxRx+0xf4>)
 800765a:	8013      	strh	r3, [r2, #0]
	if (NRF24_available()) {
 800765c:	f7fa ff22 	bl	80024a4 <NRF24_available>
 8007660:	b958      	cbnz	r0, 800767a <RF_TxRx+0x3e>
		packetsLostCtr++;
 8007662:	4a34      	ldr	r2, [pc, #208]	; (8007734 <RF_TxRx+0xf8>)
 8007664:	6813      	ldr	r3, [r2, #0]
 8007666:	3301      	adds	r3, #1
 8007668:	6013      	str	r3, [r2, #0]
}
 800766a:	b003      	add	sp, #12
 800766c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		packAckPayData_1();
 800766e:	f7ff ffc9 	bl	8007604 <packAckPayData_1>
		loop_counter = 0;
 8007672:	4b2f      	ldr	r3, [pc, #188]	; (8007730 <RF_TxRx+0xf4>)
 8007674:	2200      	movs	r2, #0
 8007676:	801a      	strh	r2, [r3, #0]
 8007678:	e7f0      	b.n	800765c <RF_TxRx+0x20>
		NRF24_read(RxData, 32);
 800767a:	2120      	movs	r1, #32
 800767c:	482e      	ldr	r0, [pc, #184]	; (8007738 <RF_TxRx+0xfc>)
 800767e:	f7fa fe73 	bl	8002368 <NRF24_read>
		packetsLostCtr = 0;
 8007682:	4b2c      	ldr	r3, [pc, #176]	; (8007734 <RF_TxRx+0xf8>)
 8007684:	2200      	movs	r2, #0
 8007686:	601a      	str	r2, [r3, #0]
		if (loop_counter == CRTL_LOOP_FREQ - 1) {
 8007688:	4b29      	ldr	r3, [pc, #164]	; (8007730 <RF_TxRx+0xf4>)
 800768a:	881a      	ldrh	r2, [r3, #0]
 800768c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8007690:	429a      	cmp	r2, r3
 8007692:	d046      	beq.n	8007722 <RF_TxRx+0xe6>
			NRF24_writeAckPayload(1, AckPayload_0, 32);
 8007694:	2220      	movs	r2, #32
 8007696:	4929      	ldr	r1, [pc, #164]	; (800773c <RF_TxRx+0x100>)
 8007698:	2001      	movs	r0, #1
 800769a:	f7fa ff08 	bl	80024ae <NRF24_writeAckPayload>
		unpackRxData();
 800769e:	f7ff ff3f 	bl	8007520 <unpackRxData>
		*throttle = map(Rx_Data.L_Joystick_YPos, 850, 3300, ESC_MIN, ESC_MAX);
 80076a2:	4b27      	ldr	r3, [pc, #156]	; (8007740 <RF_TxRx+0x104>)
 80076a4:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80076a8:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	f240 43e2 	movw	r3, #1250	; 0x4e2
 80076b2:	f640 42e4 	movw	r2, #3300	; 0xce4
 80076b6:	f240 3152 	movw	r1, #850	; 0x352
 80076ba:	f7ff ffad 	bl	8007618 <map>
 80076be:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80076c2:	ee10 3a10 	vmov	r3, s0
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	8023      	strh	r3, [r4, #0]
		if (*throttle < ESC_MIN + 200) {
 80076ca:	f240 52a9 	movw	r2, #1449	; 0x5a9
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d802      	bhi.n	80076d8 <RF_TxRx+0x9c>
			*throttle = ESC_MIN;
 80076d2:	f240 43e2 	movw	r3, #1250	; 0x4e2
 80076d6:	8023      	strh	r3, [r4, #0]
		if (*throttle > ESC_MAX - 200) {
 80076d8:	8822      	ldrh	r2, [r4, #0]
 80076da:	f640 03fc 	movw	r3, #2300	; 0x8fc
 80076de:	429a      	cmp	r2, r3
 80076e0:	d902      	bls.n	80076e8 <RF_TxRx+0xac>
			*throttle = ESC_MAX;
 80076e2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80076e6:	8023      	strh	r3, [r4, #0]
		*r_setpoint = map(Rx_Data.R_Joystick_XPos, 340, 3960, -MAX_ANGLE, MAX_ANGLE);
 80076e8:	4f15      	ldr	r7, [pc, #84]	; (8007740 <RF_TxRx+0x104>)
 80076ea:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80076ee:	2414      	movs	r4, #20
 80076f0:	9400      	str	r4, [sp, #0]
 80076f2:	f06f 0313 	mvn.w	r3, #19
 80076f6:	f640 7278 	movw	r2, #3960	; 0xf78
 80076fa:	f44f 71aa 	mov.w	r1, #340	; 0x154
 80076fe:	f7ff ff8b 	bl	8007618 <map>
 8007702:	ed86 0a00 	vstr	s0, [r6]
		*p_setpoint = map(Rx_Data.R_Joystick_YPos, 350, 4000, -MAX_ANGLE, MAX_ANGLE);
 8007706:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800770a:	9400      	str	r4, [sp, #0]
 800770c:	f06f 0313 	mvn.w	r3, #19
 8007710:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8007714:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007718:	f7ff ff7e 	bl	8007618 <map>
 800771c:	ed85 0a00 	vstr	s0, [r5]
 8007720:	e7a3      	b.n	800766a <RF_TxRx+0x2e>
			NRF24_writeAckPayload(1, AckPayload_1, 32);
 8007722:	2220      	movs	r2, #32
 8007724:	4907      	ldr	r1, [pc, #28]	; (8007744 <RF_TxRx+0x108>)
 8007726:	2001      	movs	r0, #1
 8007728:	f7fa fec1 	bl	80024ae <NRF24_writeAckPayload>
 800772c:	e7b7      	b.n	800769e <RF_TxRx+0x62>
 800772e:	bf00      	nop
 8007730:	200040c8 	.word	0x200040c8
 8007734:	200040cc 	.word	0x200040cc
 8007738:	200044c4 	.word	0x200044c4
 800773c:	20004498 	.word	0x20004498
 8007740:	200044b8 	.word	0x200044b8
 8007744:	20004478 	.word	0x20004478

08007748 <CL_main>:
 * (1 CW)     (3 CCW)
 *
 * This function gets called by the GPIO_EXTI callback when the PWM_RE_INT_Pin triggers an interrupt,
 * which is on the rising edge of every PWM pulse.
 */
void CL_main() {
 8007748:	b570      	push	{r4, r5, r6, lr}


#if NRF24
	RF_TxRx(&throttle, &pitch_setpoint, &roll_setpoint, &yaw_setpoint, imu_roll, imu_pitch, imu_yaw);
 800774a:	4e57      	ldr	r6, [pc, #348]	; (80078a8 <CL_main+0x160>)
 800774c:	4d57      	ldr	r5, [pc, #348]	; (80078ac <CL_main+0x164>)
 800774e:	4c58      	ldr	r4, [pc, #352]	; (80078b0 <CL_main+0x168>)
 8007750:	ed96 1a00 	vldr	s2, [r6]
 8007754:	edd5 0a00 	vldr	s1, [r5]
 8007758:	ed94 0a00 	vldr	s0, [r4]
 800775c:	4b55      	ldr	r3, [pc, #340]	; (80078b4 <CL_main+0x16c>)
 800775e:	4a56      	ldr	r2, [pc, #344]	; (80078b8 <CL_main+0x170>)
 8007760:	4956      	ldr	r1, [pc, #344]	; (80078bc <CL_main+0x174>)
 8007762:	4857      	ldr	r0, [pc, #348]	; (80078c0 <CL_main+0x178>)
 8007764:	f7ff ff6a 	bl	800763c <RF_TxRx>
#endif


#if IMU

		calc_RollPitchYaw(&imu_roll, &imu_pitch, &imu_yaw);
 8007768:	4632      	mov	r2, r6
 800776a:	4629      	mov	r1, r5
 800776c:	4620      	mov	r0, r4
 800776e:	f7fa fa3f 	bl	8001bf0 <calc_RollPitchYaw>


#endif
		if (Rx_Data.airmode) {
 8007772:	4b54      	ldr	r3, [pc, #336]	; (80078c4 <CL_main+0x17c>)
 8007774:	7a1b      	ldrb	r3, [r3, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	f000 8087 	beq.w	800788a <CL_main+0x142>
			/*******    Pitch PID calculation  ********/
			pid_output_pitch = pid_calculate_pitch(imu_pitch, 0, 0);
 800777c:	eddf 0a52 	vldr	s1, [pc, #328]	; 80078c8 <CL_main+0x180>
 8007780:	2000      	movs	r0, #0
 8007782:	ed95 0a00 	vldr	s0, [r5]
 8007786:	f7fb fb31 	bl	8002dec <pid_calculate_pitch>
 800778a:	4b50      	ldr	r3, [pc, #320]	; (80078cc <CL_main+0x184>)
 800778c:	ed83 0a00 	vstr	s0, [r3]

			/*******    Roll PID calculation  ********/

			pid_output_roll = pid_calculate_roll(imu_roll, 0, roll_setpoint);
 8007790:	4b49      	ldr	r3, [pc, #292]	; (80078b8 <CL_main+0x170>)
 8007792:	edd3 0a00 	vldr	s1, [r3]
 8007796:	2000      	movs	r0, #0
 8007798:	ed94 0a00 	vldr	s0, [r4]
 800779c:	f7fb faa8 	bl	8002cf0 <pid_calculate_roll>
 80077a0:	4b4b      	ldr	r3, [pc, #300]	; (80078d0 <CL_main+0x188>)
 80077a2:	ed83 0a00 	vstr	s0, [r3]

			/*******    Yaw PID calculation  ********/

			pid_output_yaw = pid_calculate_yaw(imu_yaw, 0, yaw_setpoint);
 80077a6:	4b43      	ldr	r3, [pc, #268]	; (80078b4 <CL_main+0x16c>)
 80077a8:	edd3 0a00 	vldr	s1, [r3]
 80077ac:	2000      	movs	r0, #0
 80077ae:	ed96 0a00 	vldr	s0, [r6]
 80077b2:	f7fb fb99 	bl	8002ee8 <pid_calculate_yaw>
 80077b6:	4b47      	ldr	r3, [pc, #284]	; (80078d4 <CL_main+0x18c>)
 80077b8:	ed83 0a00 	vstr	s0, [r3]
			printToPC();
		}
#endif

		//Calculate new pulse width values
		esc1_total = throttle - (int) pid_output_roll - (int) pid_output_pitch;
 80077bc:	4b40      	ldr	r3, [pc, #256]	; (80078c0 <CL_main+0x178>)
 80077be:	8818      	ldrh	r0, [r3, #0]
 80077c0:	4b43      	ldr	r3, [pc, #268]	; (80078d0 <CL_main+0x188>)
 80077c2:	edd3 7a00 	vldr	s15, [r3]
 80077c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077ca:	ee17 1a90 	vmov	r1, s15
 80077ce:	1a42      	subs	r2, r0, r1
 80077d0:	4b3e      	ldr	r3, [pc, #248]	; (80078cc <CL_main+0x184>)
 80077d2:	edd3 7a00 	vldr	s15, [r3]
 80077d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077da:	ee17 3a90 	vmov	r3, s15
 80077de:	1ad4      	subs	r4, r2, r3
 80077e0:	4d3d      	ldr	r5, [pc, #244]	; (80078d8 <CL_main+0x190>)
 80077e2:	602c      	str	r4, [r5, #0]
		esc2_total = throttle - (int) pid_output_roll + (int) pid_output_pitch;
 80077e4:	441a      	add	r2, r3
 80077e6:	4d3d      	ldr	r5, [pc, #244]	; (80078dc <CL_main+0x194>)
 80077e8:	602a      	str	r2, [r5, #0]
		esc3_total = (throttle) + (int) pid_output_roll
 80077ea:	4401      	add	r1, r0
				- (int) pid_output_pitch;
 80077ec:	1ac8      	subs	r0, r1, r3
		esc3_total = (throttle) + (int) pid_output_roll
 80077ee:	4d3c      	ldr	r5, [pc, #240]	; (80078e0 <CL_main+0x198>)
 80077f0:	6028      	str	r0, [r5, #0]
		esc4_total = (throttle) + (int) pid_output_roll
				+ (int) pid_output_pitch;
 80077f2:	440b      	add	r3, r1
		esc4_total = (throttle) + (int) pid_output_roll
 80077f4:	493b      	ldr	r1, [pc, #236]	; (80078e4 <CL_main+0x19c>)
 80077f6:	600b      	str	r3, [r1, #0]

		//Clip PWM values to make sure they don't go outside of range
		if (esc1_total < ESC_MIN) {
 80077f8:	f240 41e1 	movw	r1, #1249	; 0x4e1
 80077fc:	428c      	cmp	r4, r1
 80077fe:	dc03      	bgt.n	8007808 <CL_main+0xc0>
			esc1_total = ESC_MIN;
 8007800:	4935      	ldr	r1, [pc, #212]	; (80078d8 <CL_main+0x190>)
 8007802:	f240 44e2 	movw	r4, #1250	; 0x4e2
 8007806:	600c      	str	r4, [r1, #0]
		}
		if (esc1_total > ESC_MAX) {
 8007808:	4933      	ldr	r1, [pc, #204]	; (80078d8 <CL_main+0x190>)
 800780a:	680c      	ldr	r4, [r1, #0]
 800780c:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8007810:	428c      	cmp	r4, r1
 8007812:	dd03      	ble.n	800781c <CL_main+0xd4>
			esc1_total = ESC_MAX;
 8007814:	4930      	ldr	r1, [pc, #192]	; (80078d8 <CL_main+0x190>)
 8007816:	f640 14c4 	movw	r4, #2500	; 0x9c4
 800781a:	600c      	str	r4, [r1, #0]
		}
		if (esc2_total < ESC_MIN) {
 800781c:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8007820:	428a      	cmp	r2, r1
 8007822:	dc03      	bgt.n	800782c <CL_main+0xe4>
			esc2_total = ESC_MIN;
 8007824:	4a2d      	ldr	r2, [pc, #180]	; (80078dc <CL_main+0x194>)
 8007826:	f240 41e2 	movw	r1, #1250	; 0x4e2
 800782a:	6011      	str	r1, [r2, #0]
		}
		if (esc2_total > ESC_MAX) {
 800782c:	4a2b      	ldr	r2, [pc, #172]	; (80078dc <CL_main+0x194>)
 800782e:	6811      	ldr	r1, [r2, #0]
 8007830:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007834:	4291      	cmp	r1, r2
 8007836:	dd03      	ble.n	8007840 <CL_main+0xf8>
			esc2_total = ESC_MAX;
 8007838:	4a28      	ldr	r2, [pc, #160]	; (80078dc <CL_main+0x194>)
 800783a:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800783e:	6011      	str	r1, [r2, #0]
		}
		if (esc3_total < ESC_MIN) {
 8007840:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8007844:	4290      	cmp	r0, r2
 8007846:	dc03      	bgt.n	8007850 <CL_main+0x108>
			esc3_total = ESC_MIN;
 8007848:	4a25      	ldr	r2, [pc, #148]	; (80078e0 <CL_main+0x198>)
 800784a:	f240 41e2 	movw	r1, #1250	; 0x4e2
 800784e:	6011      	str	r1, [r2, #0]
		}
		if (esc3_total > ESC_MAX) {
 8007850:	4a23      	ldr	r2, [pc, #140]	; (80078e0 <CL_main+0x198>)
 8007852:	6811      	ldr	r1, [r2, #0]
 8007854:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007858:	4291      	cmp	r1, r2
 800785a:	dd03      	ble.n	8007864 <CL_main+0x11c>
			esc3_total = ESC_MAX;
 800785c:	4a20      	ldr	r2, [pc, #128]	; (80078e0 <CL_main+0x198>)
 800785e:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8007862:	6011      	str	r1, [r2, #0]
		}
		if (esc4_total < ESC_MIN) {
 8007864:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8007868:	4293      	cmp	r3, r2
 800786a:	dc03      	bgt.n	8007874 <CL_main+0x12c>
			esc4_total = ESC_MIN;
 800786c:	4b1d      	ldr	r3, [pc, #116]	; (80078e4 <CL_main+0x19c>)
 800786e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8007872:	601a      	str	r2, [r3, #0]
		}
		if (esc4_total > ESC_MAX) {
 8007874:	4b1b      	ldr	r3, [pc, #108]	; (80078e4 <CL_main+0x19c>)
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800787c:	429a      	cmp	r2, r3
 800787e:	dd03      	ble.n	8007888 <CL_main+0x140>
			esc4_total = ESC_MAX;
 8007880:	4b18      	ldr	r3, [pc, #96]	; (80078e4 <CL_main+0x19c>)
 8007882:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007886:	601a      	str	r2, [r3, #0]

#endif



}
 8007888:	bd70      	pop	{r4, r5, r6, pc}
			pid_output_roll = 0;
 800788a:	2300      	movs	r3, #0
 800788c:	4a10      	ldr	r2, [pc, #64]	; (80078d0 <CL_main+0x188>)
 800788e:	6013      	str	r3, [r2, #0]
			pid_output_pitch = 0;
 8007890:	4a0e      	ldr	r2, [pc, #56]	; (80078cc <CL_main+0x184>)
 8007892:	6013      	str	r3, [r2, #0]
			pid_output_yaw = 0;
 8007894:	4a0f      	ldr	r2, [pc, #60]	; (80078d4 <CL_main+0x18c>)
 8007896:	6013      	str	r3, [r2, #0]
			reset_pid_roll();
 8007898:	f7fb fa96 	bl	8002dc8 <reset_pid_roll>
			reset_pid_pitch();
 800789c:	f7fb fb12 	bl	8002ec4 <reset_pid_pitch>
			reset_pid_yaw();
 80078a0:	f7fb fb8e 	bl	8002fc0 <reset_pid_yaw>
 80078a4:	e78a      	b.n	80077bc <CL_main+0x74>
 80078a6:	bf00      	nop
 80078a8:	200040e8 	.word	0x200040e8
 80078ac:	200040e0 	.word	0x200040e0
 80078b0:	200040e4 	.word	0x200040e4
 80078b4:	20004104 	.word	0x20004104
 80078b8:	200040fc 	.word	0x200040fc
 80078bc:	200040f8 	.word	0x200040f8
 80078c0:	20004100 	.word	0x20004100
 80078c4:	200044b8 	.word	0x200044b8
 80078c8:	00000000 	.word	0x00000000
 80078cc:	200040ec 	.word	0x200040ec
 80078d0:	200040f0 	.word	0x200040f0
 80078d4:	200040f4 	.word	0x200040f4
 80078d8:	200040d0 	.word	0x200040d0
 80078dc:	200040d4 	.word	0x200040d4
 80078e0:	200040d8 	.word	0x200040d8
 80078e4:	200040dc 	.word	0x200040dc

080078e8 <PWM1_Set>:
}


//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 80078e8:	4b01      	ldr	r3, [pc, #4]	; (80078f0 <PWM1_Set+0x8>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6358      	str	r0, [r3, #52]	; 0x34
}
 80078ee:	4770      	bx	lr
 80078f0:	200049e8 	.word	0x200049e8

080078f4 <PWM2_Set>:

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 80078f4:	4b01      	ldr	r3, [pc, #4]	; (80078fc <PWM2_Set+0x8>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6398      	str	r0, [r3, #56]	; 0x38

}
 80078fa:	4770      	bx	lr
 80078fc:	200049e8 	.word	0x200049e8

08007900 <PWM3_Set>:

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 8007900:	4b01      	ldr	r3, [pc, #4]	; (8007908 <PWM3_Set+0x8>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8007906:	4770      	bx	lr
 8007908:	200049e8 	.word	0x200049e8

0800790c <PWM4_Set>:

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 800790c:	4b01      	ldr	r3, [pc, #4]	; (8007914 <PWM4_Set+0x8>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6418      	str	r0, [r3, #64]	; 0x40
}
 8007912:	4770      	bx	lr
 8007914:	200049e8 	.word	0x200049e8

08007918 <CL_init>:
void CL_init() {
 8007918:	b510      	push	{r4, lr}
	RF_init();
 800791a:	f7ff fdd7 	bl	80074cc <RF_init>
		HAL_TIM_Base_Start(&htim11);
 800791e:	4816      	ldr	r0, [pc, #88]	; (8007978 <CL_init+0x60>)
 8007920:	f7fd fdb2 	bl	8005488 <HAL_TIM_Base_Start>
		if (imu_init(&hi2c2) == IMU_SUCCESS) {
 8007924:	4815      	ldr	r0, [pc, #84]	; (800797c <CL_init+0x64>)
 8007926:	f7f9 fb67 	bl	8000ff8 <imu_init>
 800792a:	b308      	cbz	r0, 8007970 <CL_init+0x58>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800792c:	4c14      	ldr	r4, [pc, #80]	; (8007980 <CL_init+0x68>)
 800792e:	2100      	movs	r1, #0
 8007930:	4620      	mov	r0, r4
 8007932:	f7fd ffbf 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8007936:	2104      	movs	r1, #4
 8007938:	4620      	mov	r0, r4
 800793a:	f7fd ffbb 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800793e:	2108      	movs	r1, #8
 8007940:	4620      	mov	r0, r4
 8007942:	f7fd ffb7 	bl	80058b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8007946:	210c      	movs	r1, #12
 8007948:	4620      	mov	r0, r4
 800794a:	f7fd ffb3 	bl	80058b4 <HAL_TIM_PWM_Start>
	PWM1_Set(2500);
 800794e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8007952:	f7ff ffc9 	bl	80078e8 <PWM1_Set>
	PWM2_Set(2500);
 8007956:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800795a:	f7ff ffcb 	bl	80078f4 <PWM2_Set>
	PWM3_Set(2500);
 800795e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8007962:	f7ff ffcd 	bl	8007900 <PWM3_Set>
	PWM4_Set(2500);
 8007966:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800796a:	f7ff ffcf 	bl	800790c <PWM4_Set>
}
 800796e:	bd10      	pop	{r4, pc}
			imu_calibrate();
 8007970:	f7f9 ff9a 	bl	80018a8 <imu_calibrate>
 8007974:	e7da      	b.n	800792c <CL_init+0x14>
 8007976:	bf00      	nop
 8007978:	20004a28 	.word	0x20004a28
 800797c:	20004388 	.word	0x20004388
 8007980:	200049e8 	.word	0x200049e8

08007984 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8007984:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 8007986:	4805      	ldr	r0, [pc, #20]	; (800799c <MX_CRC_Init+0x18>)
 8007988:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <MX_CRC_Init+0x1c>)
 800798a:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800798c:	f7fb fbe6 	bl	800315c <HAL_CRC_Init>
 8007990:	b900      	cbnz	r0, 8007994 <MX_CRC_Init+0x10>
  {
    Error_Handler();
  }

}
 8007992:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007994:	f000 fa6e 	bl	8007e74 <Error_Handler>
}
 8007998:	e7fb      	b.n	8007992 <MX_CRC_Init+0xe>
 800799a:	bf00      	nop
 800799c:	200044e8 	.word	0x200044e8
 80079a0:	40023000 	.word	0x40023000

080079a4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 80079a4:	6802      	ldr	r2, [r0, #0]
 80079a6:	4b09      	ldr	r3, [pc, #36]	; (80079cc <HAL_CRC_MspInit+0x28>)
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d000      	beq.n	80079ae <HAL_CRC_MspInit+0xa>
 80079ac:	4770      	bx	lr
{
 80079ae:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80079b0:	2300      	movs	r3, #0
 80079b2:	9301      	str	r3, [sp, #4]
 80079b4:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <HAL_CRC_MspInit+0x2c>)
 80079b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079bc:	631a      	str	r2, [r3, #48]	; 0x30
 80079be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079c4:	9301      	str	r3, [sp, #4]
 80079c6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80079c8:	b002      	add	sp, #8
 80079ca:	4770      	bx	lr
 80079cc:	40023000 	.word	0x40023000
 80079d0:	40023800 	.word	0x40023800

080079d4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80079d4:	b500      	push	{lr}
 80079d6:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80079d8:	2200      	movs	r2, #0
 80079da:	9201      	str	r2, [sp, #4]
 80079dc:	4b09      	ldr	r3, [pc, #36]	; (8007a04 <MX_DMA_Init+0x30>)
 80079de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80079e0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80079e4:	6319      	str	r1, [r3, #48]	; 0x30
 80079e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ec:	9301      	str	r3, [sp, #4]
 80079ee:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 80079f0:	2106      	movs	r1, #6
 80079f2:	2039      	movs	r0, #57	; 0x39
 80079f4:	f7fb fb70 	bl	80030d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80079f8:	2039      	movs	r0, #57	; 0x39
 80079fa:	f7fb fba1 	bl	8003140 <HAL_NVIC_EnableIRQ>

}
 80079fe:	b003      	add	sp, #12
 8007a00:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a04:	40023800 	.word	0x40023800

08007a08 <StartControlLoop>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControlLoop */
void StartControlLoop(void const * argument)
{
 8007a08:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartControlLoop */

	CL_init();
 8007a0a:	f7ff ff85 	bl	8007918 <CL_init>

	/* Infinite loop */
	for (;;) {

		CL_main();
 8007a0e:	f7ff fe9b 	bl	8007748 <CL_main>
		osDelay(2);
 8007a12:	2002      	movs	r0, #2
 8007a14:	f7fe fb75 	bl	8006102 <osDelay>
 8007a18:	e7f9      	b.n	8007a0e <StartControlLoop+0x6>

08007a1a <StartGPSUpdate>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGPSUpdate */
void StartGPSUpdate(void const * argument)
{
 8007a1a:	b508      	push	{r3, lr}



	/* Infinite loop */
	for (;;) {
		osDelay(10);
 8007a1c:	200a      	movs	r0, #10
 8007a1e:	f7fe fb70 	bl	8006102 <osDelay>
 8007a22:	e7fb      	b.n	8007a1c <StartGPSUpdate+0x2>

08007a24 <getGPSData>:
	}
	//}

}

void getGPSData(uint8_t *ack_payload_1) {
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	4604      	mov	r4, r0

	//Goto element [1]
	ack_payload_1++;

	//[1] = no of sattelites tracked
	*ack_payload_1 = GPS.sattelite_no;
 8007a28:	4d24      	ldr	r5, [pc, #144]	; (8007abc <getGPSData+0x98>)
 8007a2a:	7e2b      	ldrb	r3, [r5, #24]
 8007a2c:	7043      	strb	r3, [r0, #1]
	ack_payload_1++;
	//[2] = Fix quality
	*ack_payload_1 = GPS.fix_quality;
 8007a2e:	7e6b      	ldrb	r3, [r5, #25]
 8007a30:	7083      	strb	r3, [r0, #2]
	ack_payload_1++;
	//[3] = Day
	*ack_payload_1 = GPS.Day;
 8007a32:	782b      	ldrb	r3, [r5, #0]
 8007a34:	70c3      	strb	r3, [r0, #3]
	ack_payload_1++;
	//[4] = Month
	*ack_payload_1 = GPS.Month;
 8007a36:	786b      	ldrb	r3, [r5, #1]
 8007a38:	7103      	strb	r3, [r0, #4]
	ack_payload_1++;
	//[5] = Year
	*ack_payload_1 = GPS.Year;
 8007a3a:	78ab      	ldrb	r3, [r5, #2]
 8007a3c:	7143      	strb	r3, [r0, #5]
	ack_payload_1++;
	//[6] = Hour
	*ack_payload_1 = GPS.Hours;
 8007a3e:	78eb      	ldrb	r3, [r5, #3]
 8007a40:	7183      	strb	r3, [r0, #6]
	ack_payload_1++;
	//[7] = Minutes
	*ack_payload_1 = GPS.Minutes;
 8007a42:	792b      	ldrb	r3, [r5, #4]
 8007a44:	71c3      	strb	r3, [r0, #7]
	ack_payload_1++;
	//[8] = Seconds
	*ack_payload_1 = GPS.Seconds;
 8007a46:	796b      	ldrb	r3, [r5, #5]
 8007a48:	7203      	strb	r3, [r0, #8]
	ack_payload_1++;

	//[9] - [10] = GPS speed in KM/H
	int16_t GPS_speed_tx = round(GPS.Speed * 100);
 8007a4a:	ed95 7a04 	vldr	s14, [r5, #16]
 8007a4e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007ac0 <getGPSData+0x9c>
 8007a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a56:	ee17 0a90 	vmov	r0, s15
 8007a5a:	f7f8 fd7d 	bl	8000558 <__aeabi_f2d>
 8007a5e:	ec41 0b10 	vmov	d0, r0, r1
 8007a62:	f000 fd09 	bl	8008478 <round>
 8007a66:	ec51 0b10 	vmov	r0, r1, d0
 8007a6a:	f7f9 f87d 	bl	8000b68 <__aeabi_d2iz>
 8007a6e:	b200      	sxth	r0, r0
	*ack_payload_1 = GPS_speed_tx;
 8007a70:	7260      	strb	r0, [r4, #9]
	ack_payload_1++;
	*ack_payload_1 = GPS_speed_tx >> 8;
 8007a72:	1200      	asrs	r0, r0, #8
 8007a74:	72a0      	strb	r0, [r4, #10]
	ack_payload_1++;

	//[11] - [14] = Longitude
	unsigned char temp[sizeof(float)];
	memcpy(temp, &GPS.Longitude, sizeof(float));
 8007a76:	68ab      	ldr	r3, [r5, #8]

	*ack_payload_1 = temp[0];
 8007a78:	72e3      	strb	r3, [r4, #11]
	ack_payload_1++;
	*ack_payload_1 = temp[1];
 8007a7a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007a7e:	7322      	strb	r2, [r4, #12]
	ack_payload_1++;
	*ack_payload_1 = temp[2];
 8007a80:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007a84:	7362      	strb	r2, [r4, #13]
	ack_payload_1++;
	*ack_payload_1 = temp[3];
 8007a86:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8007a8a:	73a3      	strb	r3, [r4, #14]
	ack_payload_1++;

	//[15] - [18] = Longitude
	memcpy(temp, &GPS.Latitude, sizeof(GPS.Latitude));
 8007a8c:	68eb      	ldr	r3, [r5, #12]

	*ack_payload_1 = temp[0];
 8007a8e:	73e3      	strb	r3, [r4, #15]
	ack_payload_1++;
	*ack_payload_1 = temp[1];
 8007a90:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007a94:	7422      	strb	r2, [r4, #16]
	ack_payload_1++;
	*ack_payload_1 = temp[2];
 8007a96:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007a9a:	7462      	strb	r2, [r4, #17]
	ack_payload_1++;
	*ack_payload_1 = temp[3];
 8007a9c:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8007aa0:	74a3      	strb	r3, [r4, #18]
	ack_payload_1++;

	//[19] - [22] = Longitude
	memcpy(temp, &GPS.Altitude, sizeof(GPS.Altitude));
 8007aa2:	696b      	ldr	r3, [r5, #20]

	*ack_payload_1 = temp[0];
 8007aa4:	74e3      	strb	r3, [r4, #19]
	ack_payload_1++;
	*ack_payload_1 = temp[1];
 8007aa6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007aaa:	7522      	strb	r2, [r4, #20]
	ack_payload_1++;
	*ack_payload_1 = temp[2];
 8007aac:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007ab0:	7562      	strb	r2, [r4, #21]
	ack_payload_1++;
	*ack_payload_1 = temp[3];
 8007ab2:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8007ab6:	75a3      	strb	r3, [r4, #22]
	ack_payload_1++;

}
 8007ab8:	bd38      	pop	{r3, r4, r5, pc}
 8007aba:	bf00      	nop
 8007abc:	20004930 	.word	0x20004930
 8007ac0:	42c80000 	.word	0x42c80000

08007ac4 <vApplicationGetIdleTaskMemory>:
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8007ac4:	4b03      	ldr	r3, [pc, #12]	; (8007ad4 <vApplicationGetIdleTaskMemory+0x10>)
 8007ac6:	6003      	str	r3, [r0, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8007ac8:	4b03      	ldr	r3, [pc, #12]	; (8007ad8 <vApplicationGetIdleTaskMemory+0x14>)
 8007aca:	600b      	str	r3, [r1, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8007acc:	2380      	movs	r3, #128	; 0x80
 8007ace:	6013      	str	r3, [r2, #0]
}
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	20004308 	.word	0x20004308
 8007ad8:	20004108 	.word	0x20004108

08007adc <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8007adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ade:	b091      	sub	sp, #68	; 0x44
  osMutexDef(GPSDataMutex);
 8007ae0:	2700      	movs	r7, #0
 8007ae2:	970e      	str	r7, [sp, #56]	; 0x38
 8007ae4:	970f      	str	r7, [sp, #60]	; 0x3c
  GPSDataMutexHandle = osMutexCreate(osMutex(GPSDataMutex));
 8007ae6:	a80e      	add	r0, sp, #56	; 0x38
 8007ae8:	f7fe fb14 	bl	8006114 <osMutexCreate>
 8007aec:	4b10      	ldr	r3, [pc, #64]	; (8007b30 <MX_FREERTOS_Init+0x54>)
 8007aee:	6018      	str	r0, [r3, #0]
  osThreadDef(ControlLoop, StartControlLoop, osPriorityRealtime, 0, 1024);
 8007af0:	4c10      	ldr	r4, [pc, #64]	; (8007b34 <MX_FREERTOS_Init+0x58>)
 8007af2:	ad07      	add	r5, sp, #28
 8007af4:	4626      	mov	r6, r4
 8007af6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007afa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8007afe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  ControlLoopHandle = osThreadCreate(osThread(ControlLoop), NULL);
 8007b02:	4639      	mov	r1, r7
 8007b04:	a807      	add	r0, sp, #28
 8007b06:	f7fe fac6 	bl	8006096 <osThreadCreate>
 8007b0a:	4b0b      	ldr	r3, [pc, #44]	; (8007b38 <MX_FREERTOS_Init+0x5c>)
 8007b0c:	6018      	str	r0, [r3, #0]
  osThreadDef(GPSUpdate, StartGPSUpdate, osPriorityIdle, 0, 128);
 8007b0e:	466d      	mov	r5, sp
 8007b10:	341c      	adds	r4, #28
 8007b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b16:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007b1a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  GPSUpdateHandle = osThreadCreate(osThread(GPSUpdate), NULL);
 8007b1e:	4639      	mov	r1, r7
 8007b20:	4668      	mov	r0, sp
 8007b22:	f7fe fab8 	bl	8006096 <osThreadCreate>
 8007b26:	4b05      	ldr	r3, [pc, #20]	; (8007b3c <MX_FREERTOS_Init+0x60>)
 8007b28:	6018      	str	r0, [r3, #0]
}
 8007b2a:	b011      	add	sp, #68	; 0x44
 8007b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	2000494c 	.word	0x2000494c
 8007b34:	0800e538 	.word	0x0800e538
 8007b38:	200044f0 	.word	0x200044f0
 8007b3c:	200044f4 	.word	0x200044f4

08007b40 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8007b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b44:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b46:	2400      	movs	r4, #0
 8007b48:	9405      	str	r4, [sp, #20]
 8007b4a:	9406      	str	r4, [sp, #24]
 8007b4c:	9407      	str	r4, [sp, #28]
 8007b4e:	9408      	str	r4, [sp, #32]
 8007b50:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b52:	9400      	str	r4, [sp, #0]
 8007b54:	4b53      	ldr	r3, [pc, #332]	; (8007ca4 <MX_GPIO_Init+0x164>)
 8007b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b58:	f042 0204 	orr.w	r2, r2, #4
 8007b5c:	631a      	str	r2, [r3, #48]	; 0x30
 8007b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b60:	f002 0204 	and.w	r2, r2, #4
 8007b64:	9200      	str	r2, [sp, #0]
 8007b66:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007b68:	9401      	str	r4, [sp, #4]
 8007b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b70:	631a      	str	r2, [r3, #48]	; 0x30
 8007b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b74:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8007b78:	9201      	str	r2, [sp, #4]
 8007b7a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b7c:	9402      	str	r4, [sp, #8]
 8007b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b80:	f042 0201 	orr.w	r2, r2, #1
 8007b84:	631a      	str	r2, [r3, #48]	; 0x30
 8007b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b88:	f002 0201 	and.w	r2, r2, #1
 8007b8c:	9202      	str	r2, [sp, #8]
 8007b8e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b90:	9403      	str	r4, [sp, #12]
 8007b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b94:	f042 0202 	orr.w	r2, r2, #2
 8007b98:	631a      	str	r2, [r3, #48]	; 0x30
 8007b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b9c:	f002 0202 	and.w	r2, r2, #2
 8007ba0:	9203      	str	r2, [sp, #12]
 8007ba2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007ba4:	9404      	str	r4, [sp, #16]
 8007ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ba8:	f042 0208 	orr.w	r2, r2, #8
 8007bac:	631a      	str	r2, [r3, #48]	; 0x30
 8007bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb0:	f003 0308 	and.w	r3, r3, #8
 8007bb4:	9304      	str	r3, [sp, #16]
 8007bb6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8007bb8:	4e3b      	ldr	r6, [pc, #236]	; (8007ca8 <MX_GPIO_Init+0x168>)
 8007bba:	4622      	mov	r2, r4
 8007bbc:	2120      	movs	r1, #32
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	f7fb feaa 	bl	8003918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8007bc4:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8007cbc <MX_GPIO_Init+0x17c>
 8007bc8:	4622      	mov	r2, r4
 8007bca:	2120      	movs	r1, #32
 8007bcc:	4648      	mov	r0, r9
 8007bce:	f7fb fea3 	bl	8003918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8007bd2:	4f36      	ldr	r7, [pc, #216]	; (8007cac <MX_GPIO_Init+0x16c>)
 8007bd4:	4622      	mov	r2, r4
 8007bd6:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8007bda:	4638      	mov	r0, r7
 8007bdc:	f7fb fe9c 	bl	8003918 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC3 PC4 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8007be0:	f64f 731b 	movw	r3, #65307	; 0xff1b
 8007be4:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007be6:	2503      	movs	r5, #3
 8007be8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bea:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007bec:	a905      	add	r1, sp, #20
 8007bee:	4648      	mov	r0, r9
 8007bf0:	f7fb fdc0 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007bf4:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007bf6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bf8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007bfa:	a905      	add	r1, sp, #20
 8007bfc:	482c      	ldr	r0, [pc, #176]	; (8007cb0 <MX_GPIO_Init+0x170>)
 8007bfe:	f7fb fdb9 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA6 PA7 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8007c02:	f649 63df 	movw	r3, #40671	; 0x9edf
 8007c06:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c08:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c0a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c0c:	a905      	add	r1, sp, #20
 8007c0e:	4630      	mov	r0, r6
 8007c10:	f7fb fdb0 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007c14:	f04f 0a20 	mov.w	sl, #32
 8007c18:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c1c:	f04f 0801 	mov.w	r8, #1
 8007c20:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c24:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c26:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c28:	a905      	add	r1, sp, #20
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	f7fb fda2 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007c30:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c34:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c38:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c3a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c3c:	a905      	add	r1, sp, #20
 8007c3e:	4648      	mov	r0, r9
 8007c40:	f7fb fd98 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4 
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 8007c44:	2337      	movs	r3, #55	; 0x37
 8007c46:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c48:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c4a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c4c:	a905      	add	r1, sp, #20
 8007c4e:	4638      	mov	r0, r7
 8007c50:	f7fb fd90 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8007c54:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8007c58:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007c5a:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c5e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c60:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c62:	a905      	add	r1, sp, #20
 8007c64:	4638      	mov	r0, r7
 8007c66:	f7fb fd85 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_INT_Pin;
 8007c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c6e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007c70:	4b10      	ldr	r3, [pc, #64]	; (8007cb4 <MX_GPIO_Init+0x174>)
 8007c72:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c74:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PWM_INT_GPIO_Port, &GPIO_InitStruct);
 8007c76:	a905      	add	r1, sp, #20
 8007c78:	4630      	mov	r0, r6
 8007c7a:	f7fb fd7b 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007c7e:	2304      	movs	r3, #4
 8007c80:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007c82:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c84:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007c86:	a905      	add	r1, sp, #20
 8007c88:	480b      	ldr	r0, [pc, #44]	; (8007cb8 <MX_GPIO_Init+0x178>)
 8007c8a:	f7fb fd73 	bl	8003774 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 8007c8e:	4622      	mov	r2, r4
 8007c90:	2107      	movs	r1, #7
 8007c92:	2017      	movs	r0, #23
 8007c94:	f7fb fa20 	bl	80030d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007c98:	2017      	movs	r0, #23
 8007c9a:	f7fb fa51 	bl	8003140 <HAL_NVIC_EnableIRQ>

}
 8007c9e:	b00a      	add	sp, #40	; 0x28
 8007ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca4:	40023800 	.word	0x40023800
 8007ca8:	40020000 	.word	0x40020000
 8007cac:	40020400 	.word	0x40020400
 8007cb0:	40021c00 	.word	0x40021c00
 8007cb4:	10110000 	.word	0x10110000
 8007cb8:	40020c00 	.word	0x40020c00
 8007cbc:	40020800 	.word	0x40020800

08007cc0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007cc0:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8007cc2:	480b      	ldr	r0, [pc, #44]	; (8007cf0 <MX_I2C2_Init+0x30>)
 8007cc4:	4b0b      	ldr	r3, [pc, #44]	; (8007cf4 <MX_I2C2_Init+0x34>)
 8007cc6:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8007cc8:	4b0b      	ldr	r3, [pc, #44]	; (8007cf8 <MX_I2C2_Init+0x38>)
 8007cca:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8007cd0:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007cd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007cd6:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007cd8:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8007cda:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007cdc:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007cde:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007ce0:	f7fc f83c 	bl	8003d5c <HAL_I2C_Init>
 8007ce4:	b900      	cbnz	r0, 8007ce8 <MX_I2C2_Init+0x28>
  {
    Error_Handler();
  }

}
 8007ce6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007ce8:	f000 f8c4 	bl	8007e74 <Error_Handler>
}
 8007cec:	e7fb      	b.n	8007ce6 <MX_I2C2_Init+0x26>
 8007cee:	bf00      	nop
 8007cf0:	20004388 	.word	0x20004388
 8007cf4:	40005800 	.word	0x40005800
 8007cf8:	00061a80 	.word	0x00061a80

08007cfc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d00:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d02:	2300      	movs	r3, #0
 8007d04:	9303      	str	r3, [sp, #12]
 8007d06:	9304      	str	r3, [sp, #16]
 8007d08:	9305      	str	r3, [sp, #20]
 8007d0a:	9306      	str	r3, [sp, #24]
 8007d0c:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C2)
 8007d0e:	6802      	ldr	r2, [r0, #0]
 8007d10:	4b1e      	ldr	r3, [pc, #120]	; (8007d8c <HAL_I2C_MspInit+0x90>)
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d002      	beq.n	8007d1c <HAL_I2C_MspInit+0x20>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8007d16:	b009      	add	sp, #36	; 0x24
 8007d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d1c:	2500      	movs	r5, #0
 8007d1e:	9501      	str	r5, [sp, #4]
 8007d20:	4c1b      	ldr	r4, [pc, #108]	; (8007d90 <HAL_I2C_MspInit+0x94>)
 8007d22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007d24:	f043 0302 	orr.w	r3, r3, #2
 8007d28:	6323      	str	r3, [r4, #48]	; 0x30
 8007d2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	9301      	str	r3, [sp, #4]
 8007d32:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d38:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d3a:	f04f 0912 	mov.w	r9, #18
 8007d3e:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d42:	f04f 0801 	mov.w	r8, #1
 8007d46:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d4a:	2703      	movs	r7, #3
 8007d4c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007d4e:	2304      	movs	r3, #4
 8007d50:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d52:	4e10      	ldr	r6, [pc, #64]	; (8007d94 <HAL_I2C_MspInit+0x98>)
 8007d54:	a903      	add	r1, sp, #12
 8007d56:	4630      	mov	r0, r6
 8007d58:	f7fb fd0c 	bl	8003774 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007d5c:	2308      	movs	r3, #8
 8007d5e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007d60:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d64:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d68:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8007d6a:	2309      	movs	r3, #9
 8007d6c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d6e:	a903      	add	r1, sp, #12
 8007d70:	4630      	mov	r0, r6
 8007d72:	f7fb fcff 	bl	8003774 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007d76:	9502      	str	r5, [sp, #8]
 8007d78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d7e:	6423      	str	r3, [r4, #64]	; 0x40
 8007d80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d86:	9302      	str	r3, [sp, #8]
 8007d88:	9b02      	ldr	r3, [sp, #8]
}
 8007d8a:	e7c4      	b.n	8007d16 <HAL_I2C_MspInit+0x1a>
 8007d8c:	40005800 	.word	0x40005800
 8007d90:	40023800 	.word	0x40023800
 8007d94:	40020400 	.word	0x40020400

08007d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007d98:	b530      	push	{r4, r5, lr}
 8007d9a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007d9c:	2230      	movs	r2, #48	; 0x30
 8007d9e:	2100      	movs	r1, #0
 8007da0:	a808      	add	r0, sp, #32
 8007da2:	f002 f999 	bl	800a0d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007da6:	2400      	movs	r4, #0
 8007da8:	9403      	str	r4, [sp, #12]
 8007daa:	9404      	str	r4, [sp, #16]
 8007dac:	9405      	str	r4, [sp, #20]
 8007dae:	9406      	str	r4, [sp, #24]
 8007db0:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007db2:	9401      	str	r4, [sp, #4]
 8007db4:	4b1a      	ldr	r3, [pc, #104]	; (8007e20 <SystemClock_Config+0x88>)
 8007db6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007db8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007dbc:	641a      	str	r2, [r3, #64]	; 0x40
 8007dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dc4:	9301      	str	r3, [sp, #4]
 8007dc6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007dc8:	9402      	str	r4, [sp, #8]
 8007dca:	4b16      	ldr	r3, [pc, #88]	; (8007e24 <SystemClock_Config+0x8c>)
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007dda:	9302      	str	r3, [sp, #8]
 8007ddc:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007dde:	2502      	movs	r5, #2
 8007de0:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007de2:	2301      	movs	r3, #1
 8007de4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007de6:	2310      	movs	r3, #16
 8007de8:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007dea:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007dec:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007dee:	2308      	movs	r3, #8
 8007df0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8007df2:	2364      	movs	r3, #100	; 0x64
 8007df4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007df6:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007df8:	2304      	movs	r3, #4
 8007dfa:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007dfc:	a808      	add	r0, sp, #32
 8007dfe:	f7fc fb61 	bl	80044c4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007e02:	230f      	movs	r3, #15
 8007e04:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007e06:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007e08:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e0e:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007e10:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8007e12:	2103      	movs	r1, #3
 8007e14:	a803      	add	r0, sp, #12
 8007e16:	f7fc fd8d 	bl	8004934 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8007e1a:	b015      	add	sp, #84	; 0x54
 8007e1c:	bd30      	pop	{r4, r5, pc}
 8007e1e:	bf00      	nop
 8007e20:	40023800 	.word	0x40023800
 8007e24:	40007000 	.word	0x40007000

08007e28 <main>:
 {
 8007e28:	b508      	push	{r3, lr}
  HAL_Init();
 8007e2a:	f7fb f903 	bl	8003034 <HAL_Init>
  SystemClock_Config();
 8007e2e:	f7ff ffb3 	bl	8007d98 <SystemClock_Config>
  MX_GPIO_Init();
 8007e32:	f7ff fe85 	bl	8007b40 <MX_GPIO_Init>
  MX_DMA_Init();
 8007e36:	f7ff fdcd 	bl	80079d4 <MX_DMA_Init>
  MX_I2C2_Init();
 8007e3a:	f7ff ff41 	bl	8007cc0 <MX_I2C2_Init>
  MX_TIM4_Init();
 8007e3e:	f000 fa13 	bl	8008268 <MX_TIM4_Init>
  MX_SPI2_Init();
 8007e42:	f000 f819 	bl	8007e78 <MX_SPI2_Init>
  MX_CRC_Init();
 8007e46:	f7ff fd9d 	bl	8007984 <MX_CRC_Init>
  MX_TIM11_Init();
 8007e4a:	f000 f999 	bl	8008180 <MX_TIM11_Init>
  MX_USART6_UART_Init();
 8007e4e:	f000 fa69 	bl	8008324 <MX_USART6_UART_Init>
  MX_FREERTOS_Init();
 8007e52:	f7ff fe43 	bl	8007adc <MX_FREERTOS_Init>
  osKernelStart();
 8007e56:	f7fe f919 	bl	800608c <osKernelStart>
 8007e5a:	e7fe      	b.n	8007e5a <main+0x32>

08007e5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8007e5e:	6802      	ldr	r2, [r0, #0]
 8007e60:	4b03      	ldr	r3, [pc, #12]	; (8007e70 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d000      	beq.n	8007e68 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007e66:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8007e68:	f7fb f8fe 	bl	8003068 <HAL_IncTick>
}
 8007e6c:	e7fb      	b.n	8007e66 <HAL_TIM_PeriodElapsedCallback+0xa>
 8007e6e:	bf00      	nop
 8007e70:	40010000 	.word	0x40010000

08007e74 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007e74:	4770      	bx	lr
	...

08007e78 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007e78:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8007e7a:	480e      	ldr	r0, [pc, #56]	; (8007eb4 <MX_SPI2_Init+0x3c>)
 8007e7c:	4b0e      	ldr	r3, [pc, #56]	; (8007eb8 <MX_SPI2_Init+0x40>)
 8007e7e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007e80:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007e84:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007e86:	2300      	movs	r3, #0
 8007e88:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007e8a:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e8c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007e8e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e94:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8007e96:	2220      	movs	r2, #32
 8007e98:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007e9a:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007e9c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e9e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007ea0:	230a      	movs	r3, #10
 8007ea2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007ea4:	f7fc fefe 	bl	8004ca4 <HAL_SPI_Init>
 8007ea8:	b900      	cbnz	r0, 8007eac <MX_SPI2_Init+0x34>
  {
    Error_Handler();
  }

}
 8007eaa:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007eac:	f7ff ffe2 	bl	8007e74 <Error_Handler>
}
 8007eb0:	e7fb      	b.n	8007eaa <MX_SPI2_Init+0x32>
 8007eb2:	bf00      	nop
 8007eb4:	20004950 	.word	0x20004950
 8007eb8:	40003800 	.word	0x40003800

08007ebc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ebe:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	9303      	str	r3, [sp, #12]
 8007ec4:	9304      	str	r3, [sp, #16]
 8007ec6:	9305      	str	r3, [sp, #20]
 8007ec8:	9306      	str	r3, [sp, #24]
 8007eca:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8007ecc:	6802      	ldr	r2, [r0, #0]
 8007ece:	4b23      	ldr	r3, [pc, #140]	; (8007f5c <HAL_SPI_MspInit+0xa0>)
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d001      	beq.n	8007ed8 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007ed4:	b009      	add	sp, #36	; 0x24
 8007ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007ed8:	2400      	movs	r4, #0
 8007eda:	9400      	str	r4, [sp, #0]
 8007edc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8007ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ee2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ee6:	641a      	str	r2, [r3, #64]	; 0x40
 8007ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007eea:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007eee:	9200      	str	r2, [sp, #0]
 8007ef0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ef2:	9401      	str	r4, [sp, #4]
 8007ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ef6:	f042 0204 	orr.w	r2, r2, #4
 8007efa:	631a      	str	r2, [r3, #48]	; 0x30
 8007efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007efe:	f002 0204 	and.w	r2, r2, #4
 8007f02:	9201      	str	r2, [sp, #4]
 8007f04:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f06:	9402      	str	r4, [sp, #8]
 8007f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f0a:	f042 0202 	orr.w	r2, r2, #2
 8007f0e:	631a      	str	r2, [r3, #48]	; 0x30
 8007f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	9302      	str	r3, [sp, #8]
 8007f18:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007f1a:	2304      	movs	r3, #4
 8007f1c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f1e:	2702      	movs	r7, #2
 8007f20:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f22:	2603      	movs	r6, #3
 8007f24:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007f26:	2505      	movs	r5, #5
 8007f28:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f2a:	a903      	add	r1, sp, #12
 8007f2c:	480c      	ldr	r0, [pc, #48]	; (8007f60 <HAL_SPI_MspInit+0xa4>)
 8007f2e:	f7fb fc21 	bl	8003774 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8007f32:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8007f36:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f38:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f3a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f3c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007f3e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f40:	a903      	add	r1, sp, #12
 8007f42:	4808      	ldr	r0, [pc, #32]	; (8007f64 <HAL_SPI_MspInit+0xa8>)
 8007f44:	f7fb fc16 	bl	8003774 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8007f48:	4622      	mov	r2, r4
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	2024      	movs	r0, #36	; 0x24
 8007f4e:	f7fb f8c3 	bl	80030d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007f52:	2024      	movs	r0, #36	; 0x24
 8007f54:	f7fb f8f4 	bl	8003140 <HAL_NVIC_EnableIRQ>
}
 8007f58:	e7bc      	b.n	8007ed4 <HAL_SPI_MspInit+0x18>
 8007f5a:	bf00      	nop
 8007f5c:	40003800 	.word	0x40003800
 8007f60:	40020800 	.word	0x40020800
 8007f64:	40020400 	.word	0x40020400

08007f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007f68:	b510      	push	{r4, lr}
 8007f6a:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f6c:	2400      	movs	r4, #0
 8007f6e:	9400      	str	r4, [sp, #0]
 8007f70:	4b15      	ldr	r3, [pc, #84]	; (8007fc8 <HAL_MspInit+0x60>)
 8007f72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f78:	645a      	str	r2, [r3, #68]	; 0x44
 8007f7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f7c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007f80:	9200      	str	r2, [sp, #0]
 8007f82:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007f84:	9401      	str	r4, [sp, #4]
 8007f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007f8c:	641a      	str	r2, [r3, #64]	; 0x40
 8007f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f94:	9301      	str	r3, [sp, #4]
 8007f96:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007f98:	4622      	mov	r2, r4
 8007f9a:	210f      	movs	r1, #15
 8007f9c:	f06f 0001 	mvn.w	r0, #1
 8007fa0:	f7fb f89a 	bl	80030d8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 11, 0);
 8007fa4:	4622      	mov	r2, r4
 8007fa6:	210b      	movs	r1, #11
 8007fa8:	2004      	movs	r0, #4
 8007faa:	f7fb f895 	bl	80030d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8007fae:	2004      	movs	r0, #4
 8007fb0:	f7fb f8c6 	bl	8003140 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 10, 0);
 8007fb4:	4622      	mov	r2, r4
 8007fb6:	210a      	movs	r1, #10
 8007fb8:	2005      	movs	r0, #5
 8007fba:	f7fb f88d 	bl	80030d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8007fbe:	2005      	movs	r0, #5
 8007fc0:	f7fb f8be 	bl	8003140 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007fc4:	b002      	add	sp, #8
 8007fc6:	bd10      	pop	{r4, pc}
 8007fc8:	40023800 	.word	0x40023800

08007fcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007fcc:	b510      	push	{r4, lr}
 8007fce:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	4601      	mov	r1, r0
 8007fd4:	2019      	movs	r0, #25
 8007fd6:	f7fb f87f 	bl	80030d8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8007fda:	2019      	movs	r0, #25
 8007fdc:	f7fb f8b0 	bl	8003140 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007fe0:	2400      	movs	r4, #0
 8007fe2:	9401      	str	r4, [sp, #4]
 8007fe4:	4b13      	ldr	r3, [pc, #76]	; (8008034 <HAL_InitTick+0x68>)
 8007fe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fe8:	f042 0201 	orr.w	r2, r2, #1
 8007fec:	645a      	str	r2, [r3, #68]	; 0x44
 8007fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	9301      	str	r3, [sp, #4]
 8007ff6:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007ff8:	a902      	add	r1, sp, #8
 8007ffa:	a803      	add	r0, sp, #12
 8007ffc:	f7fc fd6c 	bl	8004ad8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8008000:	f7fc fd5a 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008004:	4b0c      	ldr	r3, [pc, #48]	; (8008038 <HAL_InitTick+0x6c>)
 8008006:	fba3 2300 	umull	r2, r3, r3, r0
 800800a:	0c9b      	lsrs	r3, r3, #18
 800800c:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800800e:	480b      	ldr	r0, [pc, #44]	; (800803c <HAL_InitTick+0x70>)
 8008010:	4a0b      	ldr	r2, [pc, #44]	; (8008040 <HAL_InitTick+0x74>)
 8008012:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8008014:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008018:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800801a:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 800801c:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800801e:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8008020:	f7fd fb64 	bl	80056ec <HAL_TIM_Base_Init>
 8008024:	b110      	cbz	r0, 800802c <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008026:	2001      	movs	r0, #1
}
 8008028:	b008      	add	sp, #32
 800802a:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <HAL_InitTick+0x70>)
 800802e:	f7fd fa3d 	bl	80054ac <HAL_TIM_Base_Start_IT>
 8008032:	e7f9      	b.n	8008028 <HAL_InitTick+0x5c>
 8008034:	40023800 	.word	0x40023800
 8008038:	431bde83 	.word	0x431bde83
 800803c:	200049a8 	.word	0x200049a8
 8008040:	40010000 	.word	0x40010000

08008044 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008044:	4770      	bx	lr

08008046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008046:	e7fe      	b.n	8008046 <HardFault_Handler>

08008048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008048:	e7fe      	b.n	8008048 <MemManage_Handler>

0800804a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800804a:	e7fe      	b.n	800804a <BusFault_Handler>

0800804c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800804c:	e7fe      	b.n	800804c <UsageFault_Handler>

0800804e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800804e:	4770      	bx	lr

08008050 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8008050:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8008052:	f7fb fab9 	bl	80035c8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8008056:	bd08      	pop	{r3, pc}

08008058 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8008058:	4770      	bx	lr

0800805a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800805a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800805c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008060:	f7fb fc6a 	bl	8003938 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008064:	bd08      	pop	{r3, pc}
	...

08008068 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8008068:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800806a:	4802      	ldr	r0, [pc, #8]	; (8008074 <TIM1_UP_TIM10_IRQHandler+0xc>)
 800806c:	f7fd fa33 	bl	80054d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8008070:	bd08      	pop	{r3, pc}
 8008072:	bf00      	nop
 8008074:	200049a8 	.word	0x200049a8

08008078 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008078:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800807a:	4802      	ldr	r0, [pc, #8]	; (8008084 <SPI2_IRQHandler+0xc>)
 800807c:	f7fd f8e8 	bl	8005250 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8008080:	bd08      	pop	{r3, pc}
 8008082:	bf00      	nop
 8008084:	20004950 	.word	0x20004950

08008088 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8008088:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800808a:	4802      	ldr	r0, [pc, #8]	; (8008094 <DMA2_Stream1_IRQHandler+0xc>)
 800808c:	f7fb f958 	bl	8003340 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8008090:	bd08      	pop	{r3, pc}
 8008092:	bf00      	nop
 8008094:	20004a68 	.word	0x20004a68

08008098 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8008098:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800809a:	4802      	ldr	r0, [pc, #8]	; (80080a4 <USART6_IRQHandler+0xc>)
 800809c:	f7fd ff58 	bl	8005f50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
	//UART_timeout();
  /* USER CODE END USART6_IRQn 1 */
}
 80080a0:	bd08      	pop	{r3, pc}
 80080a2:	bf00      	nop
 80080a4:	20004ac8 	.word	0x20004ac8

080080a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80080a8:	b570      	push	{r4, r5, r6, lr}
 80080aa:	460d      	mov	r5, r1
 80080ac:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80080ae:	2400      	movs	r4, #0
 80080b0:	e004      	b.n	80080bc <_read+0x14>
	{
		*ptr++ = __io_getchar();
 80080b2:	f3af 8000 	nop.w
 80080b6:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80080b8:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 80080ba:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80080bc:	42b4      	cmp	r4, r6
 80080be:	dbf8      	blt.n	80080b2 <_read+0xa>
	}

return len;
}
 80080c0:	4630      	mov	r0, r6
 80080c2:	bd70      	pop	{r4, r5, r6, pc}

080080c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80080c4:	b570      	push	{r4, r5, r6, lr}
 80080c6:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80080c8:	2400      	movs	r4, #0
 80080ca:	e005      	b.n	80080d8 <_write+0x14>
	{
		__io_putchar(*ptr++);
 80080cc:	1c4d      	adds	r5, r1, #1
 80080ce:	7808      	ldrb	r0, [r1, #0]
 80080d0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80080d4:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 80080d6:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80080d8:	42b4      	cmp	r4, r6
 80080da:	dbf7      	blt.n	80080cc <_write+0x8>
	}
	return len;
}
 80080dc:	4630      	mov	r0, r6
 80080de:	bd70      	pop	{r4, r5, r6, pc}

080080e0 <_close>:

int _close(int file)
{
	return -1;
}
 80080e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080e4:	4770      	bx	lr

080080e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80080e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080ea:	604b      	str	r3, [r1, #4]
	return 0;
}
 80080ec:	2000      	movs	r0, #0
 80080ee:	4770      	bx	lr

080080f0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80080f0:	2001      	movs	r0, #1
 80080f2:	4770      	bx	lr

080080f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80080f4:	2000      	movs	r0, #0
 80080f6:	4770      	bx	lr

080080f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80080f8:	b508      	push	{r3, lr}
 80080fa:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80080fc:	4a0b      	ldr	r2, [pc, #44]	; (800812c <_sbrk+0x34>)
 80080fe:	6812      	ldr	r2, [r2, #0]
 8008100:	b142      	cbz	r2, 8008114 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8008102:	4a0a      	ldr	r2, [pc, #40]	; (800812c <_sbrk+0x34>)
 8008104:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8008106:	4403      	add	r3, r0
 8008108:	466a      	mov	r2, sp
 800810a:	4293      	cmp	r3, r2
 800810c:	d806      	bhi.n	800811c <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800810e:	4a07      	ldr	r2, [pc, #28]	; (800812c <_sbrk+0x34>)
 8008110:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8008112:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8008114:	4a05      	ldr	r2, [pc, #20]	; (800812c <_sbrk+0x34>)
 8008116:	4906      	ldr	r1, [pc, #24]	; (8008130 <_sbrk+0x38>)
 8008118:	6011      	str	r1, [r2, #0]
 800811a:	e7f2      	b.n	8008102 <_sbrk+0xa>
		errno = ENOMEM;
 800811c:	f001 ff92 	bl	800a044 <__errno>
 8008120:	230c      	movs	r3, #12
 8008122:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8008124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008128:	e7f3      	b.n	8008112 <_sbrk+0x1a>
 800812a:	bf00      	nop
 800812c:	2000435c 	.word	0x2000435c
 8008130:	20004b10 	.word	0x20004b10

08008134 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008134:	490f      	ldr	r1, [pc, #60]	; (8008174 <SystemInit+0x40>)
 8008136:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800813a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800813e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008142:	4b0d      	ldr	r3, [pc, #52]	; (8008178 <SystemInit+0x44>)
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	f042 0201 	orr.w	r2, r2, #1
 800814a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800814c:	2000      	movs	r0, #0
 800814e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8008156:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800815a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800815c:	4a07      	ldr	r2, [pc, #28]	; (800817c <SystemInit+0x48>)
 800815e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008166:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008168:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800816a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800816e:	608b      	str	r3, [r1, #8]
#endif
}
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	e000ed00 	.word	0xe000ed00
 8008178:	40023800 	.word	0x40023800
 800817c:	24003010 	.word	0x24003010

08008180 <MX_TIM11_Init>:
  HAL_TIM_MspPostInit(&htim4);

}
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8008180:	b508      	push	{r3, lr}

  htim11.Instance = TIM11;
 8008182:	4809      	ldr	r0, [pc, #36]	; (80081a8 <MX_TIM11_Init+0x28>)
 8008184:	4b09      	ldr	r3, [pc, #36]	; (80081ac <MX_TIM11_Init+0x2c>)
 8008186:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 100;
 8008188:	2364      	movs	r3, #100	; 0x64
 800818a:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800818c:	2300      	movs	r3, #0
 800818e:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 65535;
 8008190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008194:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008196:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008198:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800819a:	f7fd faa7 	bl	80056ec <HAL_TIM_Base_Init>
 800819e:	b900      	cbnz	r0, 80081a2 <MX_TIM11_Init+0x22>
  {
    Error_Handler();
  }

}
 80081a0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80081a2:	f7ff fe67 	bl	8007e74 <Error_Handler>
}
 80081a6:	e7fb      	b.n	80081a0 <MX_TIM11_Init+0x20>
 80081a8:	20004a28 	.word	0x20004a28
 80081ac:	40014800 	.word	0x40014800

080081b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM4)
 80081b0:	6802      	ldr	r2, [r0, #0]
 80081b2:	4b09      	ldr	r3, [pc, #36]	; (80081d8 <HAL_TIM_PWM_MspInit+0x28>)
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d000      	beq.n	80081ba <HAL_TIM_PWM_MspInit+0xa>
 80081b8:	4770      	bx	lr
{
 80081ba:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80081bc:	2300      	movs	r3, #0
 80081be:	9301      	str	r3, [sp, #4]
 80081c0:	4b06      	ldr	r3, [pc, #24]	; (80081dc <HAL_TIM_PWM_MspInit+0x2c>)
 80081c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081c4:	f042 0204 	orr.w	r2, r2, #4
 80081c8:	641a      	str	r2, [r3, #64]	; 0x40
 80081ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081cc:	f003 0304 	and.w	r3, r3, #4
 80081d0:	9301      	str	r3, [sp, #4]
 80081d2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80081d4:	b002      	add	sp, #8
 80081d6:	4770      	bx	lr
 80081d8:	40000800 	.word	0x40000800
 80081dc:	40023800 	.word	0x40023800

080081e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM11)
 80081e0:	6802      	ldr	r2, [r0, #0]
 80081e2:	4b09      	ldr	r3, [pc, #36]	; (8008208 <HAL_TIM_Base_MspInit+0x28>)
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d000      	beq.n	80081ea <HAL_TIM_Base_MspInit+0xa>
 80081e8:	4770      	bx	lr
{
 80081ea:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80081ec:	2300      	movs	r3, #0
 80081ee:	9301      	str	r3, [sp, #4]
 80081f0:	4b06      	ldr	r3, [pc, #24]	; (800820c <HAL_TIM_Base_MspInit+0x2c>)
 80081f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80081f8:	645a      	str	r2, [r3, #68]	; 0x44
 80081fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008200:	9301      	str	r3, [sp, #4]
 8008202:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8008204:	b002      	add	sp, #8
 8008206:	4770      	bx	lr
 8008208:	40014800 	.word	0x40014800
 800820c:	40023800 	.word	0x40023800

08008210 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008210:	b500      	push	{lr}
 8008212:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008214:	2300      	movs	r3, #0
 8008216:	9301      	str	r3, [sp, #4]
 8008218:	9302      	str	r3, [sp, #8]
 800821a:	9303      	str	r3, [sp, #12]
 800821c:	9304      	str	r3, [sp, #16]
 800821e:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM4)
 8008220:	6802      	ldr	r2, [r0, #0]
 8008222:	4b0e      	ldr	r3, [pc, #56]	; (800825c <HAL_TIM_MspPostInit+0x4c>)
 8008224:	429a      	cmp	r2, r3
 8008226:	d002      	beq.n	800822e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8008228:	b007      	add	sp, #28
 800822a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800822e:	2300      	movs	r3, #0
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	4b0b      	ldr	r3, [pc, #44]	; (8008260 <HAL_TIM_MspPostInit+0x50>)
 8008234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008236:	f042 0202 	orr.w	r2, r2, #2
 800823a:	631a      	str	r2, [r3, #48]	; 0x30
 800823c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823e:	f003 0302 	and.w	r3, r3, #2
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8008246:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800824a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800824c:	2302      	movs	r3, #2
 800824e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008250:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008252:	a901      	add	r1, sp, #4
 8008254:	4803      	ldr	r0, [pc, #12]	; (8008264 <HAL_TIM_MspPostInit+0x54>)
 8008256:	f7fb fa8d 	bl	8003774 <HAL_GPIO_Init>
}
 800825a:	e7e5      	b.n	8008228 <HAL_TIM_MspPostInit+0x18>
 800825c:	40000800 	.word	0x40000800
 8008260:	40023800 	.word	0x40023800
 8008264:	40020400 	.word	0x40020400

08008268 <MX_TIM4_Init>:
{
 8008268:	b500      	push	{lr}
 800826a:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800826c:	2300      	movs	r3, #0
 800826e:	9308      	str	r3, [sp, #32]
 8008270:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008272:	9301      	str	r3, [sp, #4]
 8008274:	9302      	str	r3, [sp, #8]
 8008276:	9303      	str	r3, [sp, #12]
 8008278:	9304      	str	r3, [sp, #16]
 800827a:	9305      	str	r3, [sp, #20]
 800827c:	9306      	str	r3, [sp, #24]
 800827e:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 8008280:	4826      	ldr	r0, [pc, #152]	; (800831c <MX_TIM4_Init+0xb4>)
 8008282:	4a27      	ldr	r2, [pc, #156]	; (8008320 <MX_TIM4_Init+0xb8>)
 8008284:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 9;
 8008286:	2209      	movs	r2, #9
 8008288:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800828a:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 20000;
 800828c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008290:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008292:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008294:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8008296:	f7fd fa42 	bl	800571e <HAL_TIM_PWM_Init>
 800829a:	bb68      	cbnz	r0, 80082f8 <MX_TIM4_Init+0x90>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800829c:	2300      	movs	r3, #0
 800829e:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80082a0:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80082a2:	a908      	add	r1, sp, #32
 80082a4:	481d      	ldr	r0, [pc, #116]	; (800831c <MX_TIM4_Init+0xb4>)
 80082a6:	f7fd fb23 	bl	80058f0 <HAL_TIMEx_MasterConfigSynchronization>
 80082aa:	bb40      	cbnz	r0, 80082fe <MX_TIM4_Init+0x96>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80082ac:	2360      	movs	r3, #96	; 0x60
 80082ae:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80082b0:	2200      	movs	r2, #0
 80082b2:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80082b4:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80082b6:	2304      	movs	r3, #4
 80082b8:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80082ba:	eb0d 0103 	add.w	r1, sp, r3
 80082be:	4817      	ldr	r0, [pc, #92]	; (800831c <MX_TIM4_Init+0xb4>)
 80082c0:	f7fd fa78 	bl	80057b4 <HAL_TIM_PWM_ConfigChannel>
 80082c4:	b9f0      	cbnz	r0, 8008304 <MX_TIM4_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80082c6:	2204      	movs	r2, #4
 80082c8:	eb0d 0102 	add.w	r1, sp, r2
 80082cc:	4813      	ldr	r0, [pc, #76]	; (800831c <MX_TIM4_Init+0xb4>)
 80082ce:	f7fd fa71 	bl	80057b4 <HAL_TIM_PWM_ConfigChannel>
 80082d2:	b9d0      	cbnz	r0, 800830a <MX_TIM4_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80082d4:	2208      	movs	r2, #8
 80082d6:	a901      	add	r1, sp, #4
 80082d8:	4810      	ldr	r0, [pc, #64]	; (800831c <MX_TIM4_Init+0xb4>)
 80082da:	f7fd fa6b 	bl	80057b4 <HAL_TIM_PWM_ConfigChannel>
 80082de:	b9b8      	cbnz	r0, 8008310 <MX_TIM4_Init+0xa8>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80082e0:	220c      	movs	r2, #12
 80082e2:	a901      	add	r1, sp, #4
 80082e4:	480d      	ldr	r0, [pc, #52]	; (800831c <MX_TIM4_Init+0xb4>)
 80082e6:	f7fd fa65 	bl	80057b4 <HAL_TIM_PWM_ConfigChannel>
 80082ea:	b9a0      	cbnz	r0, 8008316 <MX_TIM4_Init+0xae>
  HAL_TIM_MspPostInit(&htim4);
 80082ec:	480b      	ldr	r0, [pc, #44]	; (800831c <MX_TIM4_Init+0xb4>)
 80082ee:	f7ff ff8f 	bl	8008210 <HAL_TIM_MspPostInit>
}
 80082f2:	b00b      	add	sp, #44	; 0x2c
 80082f4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80082f8:	f7ff fdbc 	bl	8007e74 <Error_Handler>
 80082fc:	e7ce      	b.n	800829c <MX_TIM4_Init+0x34>
    Error_Handler();
 80082fe:	f7ff fdb9 	bl	8007e74 <Error_Handler>
 8008302:	e7d3      	b.n	80082ac <MX_TIM4_Init+0x44>
    Error_Handler();
 8008304:	f7ff fdb6 	bl	8007e74 <Error_Handler>
 8008308:	e7dd      	b.n	80082c6 <MX_TIM4_Init+0x5e>
    Error_Handler();
 800830a:	f7ff fdb3 	bl	8007e74 <Error_Handler>
 800830e:	e7e1      	b.n	80082d4 <MX_TIM4_Init+0x6c>
    Error_Handler();
 8008310:	f7ff fdb0 	bl	8007e74 <Error_Handler>
 8008314:	e7e4      	b.n	80082e0 <MX_TIM4_Init+0x78>
    Error_Handler();
 8008316:	f7ff fdad 	bl	8007e74 <Error_Handler>
 800831a:	e7e7      	b.n	80082ec <MX_TIM4_Init+0x84>
 800831c:	200049e8 	.word	0x200049e8
 8008320:	40000800 	.word	0x40000800

08008324 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8008324:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 8008326:	480a      	ldr	r0, [pc, #40]	; (8008350 <MX_USART6_UART_Init+0x2c>)
 8008328:	4b0a      	ldr	r3, [pc, #40]	; (8008354 <MX_USART6_UART_Init+0x30>)
 800832a:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 9600;
 800832c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8008330:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8008332:	2300      	movs	r3, #0
 8008334:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8008336:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8008338:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800833a:	220c      	movs	r2, #12
 800833c:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800833e:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8008340:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8008342:	f7fd fd08 	bl	8005d56 <HAL_UART_Init>
 8008346:	b900      	cbnz	r0, 800834a <MX_USART6_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8008348:	bd08      	pop	{r3, pc}
    Error_Handler();
 800834a:	f7ff fd93 	bl	8007e74 <Error_Handler>
}
 800834e:	e7fb      	b.n	8008348 <MX_USART6_UART_Init+0x24>
 8008350:	20004ac8 	.word	0x20004ac8
 8008354:	40011400 	.word	0x40011400

08008358 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008358:	b530      	push	{r4, r5, lr}
 800835a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800835c:	2300      	movs	r3, #0
 800835e:	9303      	str	r3, [sp, #12]
 8008360:	9304      	str	r3, [sp, #16]
 8008362:	9305      	str	r3, [sp, #20]
 8008364:	9306      	str	r3, [sp, #24]
 8008366:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART6)
 8008368:	6802      	ldr	r2, [r0, #0]
 800836a:	4b2a      	ldr	r3, [pc, #168]	; (8008414 <HAL_UART_MspInit+0xbc>)
 800836c:	429a      	cmp	r2, r3
 800836e:	d001      	beq.n	8008374 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART6_MspInit 1 */
    // Enable RX idle interrupt, which we use to handle variable-length messages
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_IDLE);
  /* USER CODE END USART6_MspInit 1 */
  }
}
 8008370:	b009      	add	sp, #36	; 0x24
 8008372:	bd30      	pop	{r4, r5, pc}
 8008374:	4604      	mov	r4, r0
    __HAL_RCC_USART6_CLK_ENABLE();
 8008376:	2500      	movs	r5, #0
 8008378:	9501      	str	r5, [sp, #4]
 800837a:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 800837e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008380:	f042 0220 	orr.w	r2, r2, #32
 8008384:	645a      	str	r2, [r3, #68]	; 0x44
 8008386:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008388:	f002 0220 	and.w	r2, r2, #32
 800838c:	9201      	str	r2, [sp, #4]
 800838e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008390:	9502      	str	r5, [sp, #8]
 8008392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008394:	f042 0204 	orr.w	r2, r2, #4
 8008398:	631a      	str	r2, [r3, #48]	; 0x30
 800839a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839c:	f003 0304 	and.w	r3, r3, #4
 80083a0:	9302      	str	r3, [sp, #8]
 80083a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80083a4:	23c0      	movs	r3, #192	; 0xc0
 80083a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083a8:	2302      	movs	r3, #2
 80083aa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80083ac:	2301      	movs	r3, #1
 80083ae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083b0:	2303      	movs	r3, #3
 80083b2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80083b4:	2308      	movs	r3, #8
 80083b6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80083b8:	a903      	add	r1, sp, #12
 80083ba:	4817      	ldr	r0, [pc, #92]	; (8008418 <HAL_UART_MspInit+0xc0>)
 80083bc:	f7fb f9da 	bl	8003774 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80083c0:	4816      	ldr	r0, [pc, #88]	; (800841c <HAL_UART_MspInit+0xc4>)
 80083c2:	4b17      	ldr	r3, [pc, #92]	; (8008420 <HAL_UART_MspInit+0xc8>)
 80083c4:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80083c6:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 80083ca:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80083cc:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80083ce:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80083d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083d4:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80083d6:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80083d8:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80083da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083de:	61c3      	str	r3, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80083e0:	6205      	str	r5, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80083e2:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80083e4:	f7fa ff32 	bl	800324c <HAL_DMA_Init>
 80083e8:	b980      	cbnz	r0, 800840c <HAL_UART_MspInit+0xb4>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80083ea:	4b0c      	ldr	r3, [pc, #48]	; (800841c <HAL_UART_MspInit+0xc4>)
 80083ec:	6363      	str	r3, [r4, #52]	; 0x34
 80083ee:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 80083f0:	2200      	movs	r2, #0
 80083f2:	2106      	movs	r1, #6
 80083f4:	2047      	movs	r0, #71	; 0x47
 80083f6:	f7fa fe6f 	bl	80030d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80083fa:	2047      	movs	r0, #71	; 0x47
 80083fc:	f7fa fea0 	bl	8003140 <HAL_NVIC_EnableIRQ>
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_IDLE);
 8008400:	6822      	ldr	r2, [r4, #0]
 8008402:	68d3      	ldr	r3, [r2, #12]
 8008404:	f043 0310 	orr.w	r3, r3, #16
 8008408:	60d3      	str	r3, [r2, #12]
}
 800840a:	e7b1      	b.n	8008370 <HAL_UART_MspInit+0x18>
      Error_Handler();
 800840c:	f7ff fd32 	bl	8007e74 <Error_Handler>
 8008410:	e7eb      	b.n	80083ea <HAL_UART_MspInit+0x92>
 8008412:	bf00      	nop
 8008414:	40011400 	.word	0x40011400
 8008418:	40020800 	.word	0x40020800
 800841c:	20004a68 	.word	0x20004a68
 8008420:	40026428 	.word	0x40026428

08008424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800845c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008428:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800842a:	e003      	b.n	8008434 <LoopCopyDataInit>

0800842c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800842c:	4b0c      	ldr	r3, [pc, #48]	; (8008460 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800842e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008430:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008432:	3104      	adds	r1, #4

08008434 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008434:	480b      	ldr	r0, [pc, #44]	; (8008464 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008436:	4b0c      	ldr	r3, [pc, #48]	; (8008468 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008438:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800843a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800843c:	d3f6      	bcc.n	800842c <CopyDataInit>
  ldr  r2, =_sbss
 800843e:	4a0b      	ldr	r2, [pc, #44]	; (800846c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008440:	e002      	b.n	8008448 <LoopFillZerobss>

08008442 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008442:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008444:	f842 3b04 	str.w	r3, [r2], #4

08008448 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008448:	4b09      	ldr	r3, [pc, #36]	; (8008470 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800844a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800844c:	d3f9      	bcc.n	8008442 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800844e:	f7ff fe71 	bl	8008134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008452:	f001 fdfd 	bl	800a050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008456:	f7ff fce7 	bl	8007e28 <main>
  bx  lr    
 800845a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800845c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008460:	0800edf0 	.word	0x0800edf0
  ldr  r0, =_sdata
 8008464:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008468:	20000268 	.word	0x20000268
  ldr  r2, =_sbss
 800846c:	20000268 	.word	0x20000268
  ldr  r3, = _ebss
 8008470:	20004b0c 	.word	0x20004b0c

08008474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008474:	e7fe      	b.n	8008474 <ADC_IRQHandler>
	...

08008478 <round>:
 8008478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847a:	ec57 6b10 	vmov	r6, r7, d0
 800847e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8008482:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8008486:	2c13      	cmp	r4, #19
 8008488:	463b      	mov	r3, r7
 800848a:	463d      	mov	r5, r7
 800848c:	dc17      	bgt.n	80084be <round+0x46>
 800848e:	2c00      	cmp	r4, #0
 8008490:	da09      	bge.n	80084a6 <round+0x2e>
 8008492:	3401      	adds	r4, #1
 8008494:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8008498:	d103      	bne.n	80084a2 <round+0x2a>
 800849a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800849e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80084a2:	2100      	movs	r1, #0
 80084a4:	e02c      	b.n	8008500 <round+0x88>
 80084a6:	4a18      	ldr	r2, [pc, #96]	; (8008508 <round+0x90>)
 80084a8:	4122      	asrs	r2, r4
 80084aa:	4217      	tst	r7, r2
 80084ac:	d100      	bne.n	80084b0 <round+0x38>
 80084ae:	b19e      	cbz	r6, 80084d8 <round+0x60>
 80084b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80084b4:	4123      	asrs	r3, r4
 80084b6:	442b      	add	r3, r5
 80084b8:	ea23 0302 	bic.w	r3, r3, r2
 80084bc:	e7f1      	b.n	80084a2 <round+0x2a>
 80084be:	2c33      	cmp	r4, #51	; 0x33
 80084c0:	dd0d      	ble.n	80084de <round+0x66>
 80084c2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80084c6:	d107      	bne.n	80084d8 <round+0x60>
 80084c8:	4630      	mov	r0, r6
 80084ca:	4639      	mov	r1, r7
 80084cc:	ee10 2a10 	vmov	r2, s0
 80084d0:	f7f7 fee4 	bl	800029c <__adddf3>
 80084d4:	4606      	mov	r6, r0
 80084d6:	460f      	mov	r7, r1
 80084d8:	ec47 6b10 	vmov	d0, r6, r7
 80084dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084de:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80084e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084e6:	40d0      	lsrs	r0, r2
 80084e8:	4206      	tst	r6, r0
 80084ea:	d0f5      	beq.n	80084d8 <round+0x60>
 80084ec:	2201      	movs	r2, #1
 80084ee:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80084f2:	fa02 f404 	lsl.w	r4, r2, r4
 80084f6:	1931      	adds	r1, r6, r4
 80084f8:	bf28      	it	cs
 80084fa:	189b      	addcs	r3, r3, r2
 80084fc:	ea21 0100 	bic.w	r1, r1, r0
 8008500:	461f      	mov	r7, r3
 8008502:	460e      	mov	r6, r1
 8008504:	e7e8      	b.n	80084d8 <round+0x60>
 8008506:	bf00      	nop
 8008508:	000fffff 	.word	0x000fffff

0800850c <asin>:
 800850c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800850e:	ed2d 8b02 	vpush	{d8}
 8008512:	4e26      	ldr	r6, [pc, #152]	; (80085ac <asin+0xa0>)
 8008514:	b08b      	sub	sp, #44	; 0x2c
 8008516:	ec55 4b10 	vmov	r4, r5, d0
 800851a:	f000 fa1d 	bl	8008958 <__ieee754_asin>
 800851e:	f996 3000 	ldrsb.w	r3, [r6]
 8008522:	eeb0 8a40 	vmov.f32	s16, s0
 8008526:	eef0 8a60 	vmov.f32	s17, s1
 800852a:	3301      	adds	r3, #1
 800852c:	d036      	beq.n	800859c <asin+0x90>
 800852e:	4622      	mov	r2, r4
 8008530:	462b      	mov	r3, r5
 8008532:	4620      	mov	r0, r4
 8008534:	4629      	mov	r1, r5
 8008536:	f7f8 fb01 	bl	8000b3c <__aeabi_dcmpun>
 800853a:	4607      	mov	r7, r0
 800853c:	bb70      	cbnz	r0, 800859c <asin+0x90>
 800853e:	ec45 4b10 	vmov	d0, r4, r5
 8008542:	f001 fc59 	bl	8009df8 <fabs>
 8008546:	2200      	movs	r2, #0
 8008548:	4b19      	ldr	r3, [pc, #100]	; (80085b0 <asin+0xa4>)
 800854a:	ec51 0b10 	vmov	r0, r1, d0
 800854e:	f7f8 faeb 	bl	8000b28 <__aeabi_dcmpgt>
 8008552:	b318      	cbz	r0, 800859c <asin+0x90>
 8008554:	2301      	movs	r3, #1
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	4816      	ldr	r0, [pc, #88]	; (80085b4 <asin+0xa8>)
 800855a:	4b17      	ldr	r3, [pc, #92]	; (80085b8 <asin+0xac>)
 800855c:	9301      	str	r3, [sp, #4]
 800855e:	9708      	str	r7, [sp, #32]
 8008560:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008564:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008568:	f001 fc5a 	bl	8009e20 <nan>
 800856c:	f996 3000 	ldrsb.w	r3, [r6]
 8008570:	2b02      	cmp	r3, #2
 8008572:	ed8d 0b06 	vstr	d0, [sp, #24]
 8008576:	d104      	bne.n	8008582 <asin+0x76>
 8008578:	f001 fd64 	bl	800a044 <__errno>
 800857c:	2321      	movs	r3, #33	; 0x21
 800857e:	6003      	str	r3, [r0, #0]
 8008580:	e004      	b.n	800858c <asin+0x80>
 8008582:	4668      	mov	r0, sp
 8008584:	f001 fc49 	bl	8009e1a <matherr>
 8008588:	2800      	cmp	r0, #0
 800858a:	d0f5      	beq.n	8008578 <asin+0x6c>
 800858c:	9b08      	ldr	r3, [sp, #32]
 800858e:	b11b      	cbz	r3, 8008598 <asin+0x8c>
 8008590:	f001 fd58 	bl	800a044 <__errno>
 8008594:	9b08      	ldr	r3, [sp, #32]
 8008596:	6003      	str	r3, [r0, #0]
 8008598:	ed9d 8b06 	vldr	d8, [sp, #24]
 800859c:	eeb0 0a48 	vmov.f32	s0, s16
 80085a0:	eef0 0a68 	vmov.f32	s1, s17
 80085a4:	b00b      	add	sp, #44	; 0x2c
 80085a6:	ecbd 8b02 	vpop	{d8}
 80085aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085ac:	20000094 	.word	0x20000094
 80085b0:	3ff00000 	.word	0x3ff00000
 80085b4:	0800edd1 	.word	0x0800edd1
 80085b8:	0800ea34 	.word	0x0800ea34

080085bc <atan2>:
 80085bc:	f000 bbdc 	b.w	8008d78 <__ieee754_atan2>

080085c0 <pow>:
 80085c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c4:	ed2d 8b04 	vpush	{d8-d9}
 80085c8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800889c <pow+0x2dc>
 80085cc:	b08d      	sub	sp, #52	; 0x34
 80085ce:	ec57 6b10 	vmov	r6, r7, d0
 80085d2:	ec55 4b11 	vmov	r4, r5, d1
 80085d6:	f000 fcaf 	bl	8008f38 <__ieee754_pow>
 80085da:	f999 3000 	ldrsb.w	r3, [r9]
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	3301      	adds	r3, #1
 80085e2:	eeb0 8a40 	vmov.f32	s16, s0
 80085e6:	eef0 8a60 	vmov.f32	s17, s1
 80085ea:	46c8      	mov	r8, r9
 80085ec:	d05f      	beq.n	80086ae <pow+0xee>
 80085ee:	4622      	mov	r2, r4
 80085f0:	462b      	mov	r3, r5
 80085f2:	4620      	mov	r0, r4
 80085f4:	4629      	mov	r1, r5
 80085f6:	f7f8 faa1 	bl	8000b3c <__aeabi_dcmpun>
 80085fa:	4683      	mov	fp, r0
 80085fc:	2800      	cmp	r0, #0
 80085fe:	d156      	bne.n	80086ae <pow+0xee>
 8008600:	4632      	mov	r2, r6
 8008602:	463b      	mov	r3, r7
 8008604:	4630      	mov	r0, r6
 8008606:	4639      	mov	r1, r7
 8008608:	f7f8 fa98 	bl	8000b3c <__aeabi_dcmpun>
 800860c:	9001      	str	r0, [sp, #4]
 800860e:	b1e8      	cbz	r0, 800864c <pow+0x8c>
 8008610:	2200      	movs	r2, #0
 8008612:	2300      	movs	r3, #0
 8008614:	4620      	mov	r0, r4
 8008616:	4629      	mov	r1, r5
 8008618:	f7f8 fa5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800861c:	2800      	cmp	r0, #0
 800861e:	d046      	beq.n	80086ae <pow+0xee>
 8008620:	2301      	movs	r3, #1
 8008622:	9302      	str	r3, [sp, #8]
 8008624:	4b96      	ldr	r3, [pc, #600]	; (8008880 <pow+0x2c0>)
 8008626:	9303      	str	r3, [sp, #12]
 8008628:	4b96      	ldr	r3, [pc, #600]	; (8008884 <pow+0x2c4>)
 800862a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800862e:	2200      	movs	r2, #0
 8008630:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008634:	9b00      	ldr	r3, [sp, #0]
 8008636:	2b02      	cmp	r3, #2
 8008638:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800863c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008640:	d033      	beq.n	80086aa <pow+0xea>
 8008642:	a802      	add	r0, sp, #8
 8008644:	f001 fbe9 	bl	8009e1a <matherr>
 8008648:	bb48      	cbnz	r0, 800869e <pow+0xde>
 800864a:	e05d      	b.n	8008708 <pow+0x148>
 800864c:	f04f 0a00 	mov.w	sl, #0
 8008650:	f04f 0b00 	mov.w	fp, #0
 8008654:	4652      	mov	r2, sl
 8008656:	465b      	mov	r3, fp
 8008658:	4630      	mov	r0, r6
 800865a:	4639      	mov	r1, r7
 800865c:	f7f8 fa3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008660:	ec4b ab19 	vmov	d9, sl, fp
 8008664:	2800      	cmp	r0, #0
 8008666:	d054      	beq.n	8008712 <pow+0x152>
 8008668:	4652      	mov	r2, sl
 800866a:	465b      	mov	r3, fp
 800866c:	4620      	mov	r0, r4
 800866e:	4629      	mov	r1, r5
 8008670:	f7f8 fa32 	bl	8000ad8 <__aeabi_dcmpeq>
 8008674:	4680      	mov	r8, r0
 8008676:	b318      	cbz	r0, 80086c0 <pow+0x100>
 8008678:	2301      	movs	r3, #1
 800867a:	9302      	str	r3, [sp, #8]
 800867c:	4b80      	ldr	r3, [pc, #512]	; (8008880 <pow+0x2c0>)
 800867e:	9303      	str	r3, [sp, #12]
 8008680:	9b01      	ldr	r3, [sp, #4]
 8008682:	930a      	str	r3, [sp, #40]	; 0x28
 8008684:	9b00      	ldr	r3, [sp, #0]
 8008686:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800868a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800868e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d0d5      	beq.n	8008642 <pow+0x82>
 8008696:	4b7b      	ldr	r3, [pc, #492]	; (8008884 <pow+0x2c4>)
 8008698:	2200      	movs	r2, #0
 800869a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800869e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086a0:	b11b      	cbz	r3, 80086aa <pow+0xea>
 80086a2:	f001 fccf 	bl	800a044 <__errno>
 80086a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086a8:	6003      	str	r3, [r0, #0]
 80086aa:	ed9d 8b08 	vldr	d8, [sp, #32]
 80086ae:	eeb0 0a48 	vmov.f32	s0, s16
 80086b2:	eef0 0a68 	vmov.f32	s1, s17
 80086b6:	b00d      	add	sp, #52	; 0x34
 80086b8:	ecbd 8b04 	vpop	{d8-d9}
 80086bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c0:	ec45 4b10 	vmov	d0, r4, r5
 80086c4:	f001 fba1 	bl	8009e0a <finite>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d0f0      	beq.n	80086ae <pow+0xee>
 80086cc:	4652      	mov	r2, sl
 80086ce:	465b      	mov	r3, fp
 80086d0:	4620      	mov	r0, r4
 80086d2:	4629      	mov	r1, r5
 80086d4:	f7f8 fa0a 	bl	8000aec <__aeabi_dcmplt>
 80086d8:	2800      	cmp	r0, #0
 80086da:	d0e8      	beq.n	80086ae <pow+0xee>
 80086dc:	2301      	movs	r3, #1
 80086de:	9302      	str	r3, [sp, #8]
 80086e0:	4b67      	ldr	r3, [pc, #412]	; (8008880 <pow+0x2c0>)
 80086e2:	9303      	str	r3, [sp, #12]
 80086e4:	f999 3000 	ldrsb.w	r3, [r9]
 80086e8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80086ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80086f0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80086f4:	b913      	cbnz	r3, 80086fc <pow+0x13c>
 80086f6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80086fa:	e7a2      	b.n	8008642 <pow+0x82>
 80086fc:	4962      	ldr	r1, [pc, #392]	; (8008888 <pow+0x2c8>)
 80086fe:	2000      	movs	r0, #0
 8008700:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008704:	2b02      	cmp	r3, #2
 8008706:	d19c      	bne.n	8008642 <pow+0x82>
 8008708:	f001 fc9c 	bl	800a044 <__errno>
 800870c:	2321      	movs	r3, #33	; 0x21
 800870e:	6003      	str	r3, [r0, #0]
 8008710:	e7c5      	b.n	800869e <pow+0xde>
 8008712:	eeb0 0a48 	vmov.f32	s0, s16
 8008716:	eef0 0a68 	vmov.f32	s1, s17
 800871a:	f001 fb76 	bl	8009e0a <finite>
 800871e:	9000      	str	r0, [sp, #0]
 8008720:	2800      	cmp	r0, #0
 8008722:	f040 8081 	bne.w	8008828 <pow+0x268>
 8008726:	ec47 6b10 	vmov	d0, r6, r7
 800872a:	f001 fb6e 	bl	8009e0a <finite>
 800872e:	2800      	cmp	r0, #0
 8008730:	d07a      	beq.n	8008828 <pow+0x268>
 8008732:	ec45 4b10 	vmov	d0, r4, r5
 8008736:	f001 fb68 	bl	8009e0a <finite>
 800873a:	2800      	cmp	r0, #0
 800873c:	d074      	beq.n	8008828 <pow+0x268>
 800873e:	ec53 2b18 	vmov	r2, r3, d8
 8008742:	ee18 0a10 	vmov	r0, s16
 8008746:	4619      	mov	r1, r3
 8008748:	f7f8 f9f8 	bl	8000b3c <__aeabi_dcmpun>
 800874c:	f999 9000 	ldrsb.w	r9, [r9]
 8008750:	4b4b      	ldr	r3, [pc, #300]	; (8008880 <pow+0x2c0>)
 8008752:	b1b0      	cbz	r0, 8008782 <pow+0x1c2>
 8008754:	2201      	movs	r2, #1
 8008756:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800875a:	9b00      	ldr	r3, [sp, #0]
 800875c:	930a      	str	r3, [sp, #40]	; 0x28
 800875e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008762:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008766:	f1b9 0f00 	cmp.w	r9, #0
 800876a:	d0c4      	beq.n	80086f6 <pow+0x136>
 800876c:	4652      	mov	r2, sl
 800876e:	465b      	mov	r3, fp
 8008770:	4650      	mov	r0, sl
 8008772:	4659      	mov	r1, fp
 8008774:	f7f8 f872 	bl	800085c <__aeabi_ddiv>
 8008778:	f1b9 0f02 	cmp.w	r9, #2
 800877c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008780:	e7c1      	b.n	8008706 <pow+0x146>
 8008782:	2203      	movs	r2, #3
 8008784:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008788:	900a      	str	r0, [sp, #40]	; 0x28
 800878a:	4629      	mov	r1, r5
 800878c:	4620      	mov	r0, r4
 800878e:	2200      	movs	r2, #0
 8008790:	4b3e      	ldr	r3, [pc, #248]	; (800888c <pow+0x2cc>)
 8008792:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008796:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800879a:	f7f7 ff35 	bl	8000608 <__aeabi_dmul>
 800879e:	4604      	mov	r4, r0
 80087a0:	460d      	mov	r5, r1
 80087a2:	f1b9 0f00 	cmp.w	r9, #0
 80087a6:	d124      	bne.n	80087f2 <pow+0x232>
 80087a8:	4b39      	ldr	r3, [pc, #228]	; (8008890 <pow+0x2d0>)
 80087aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80087ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80087b2:	4630      	mov	r0, r6
 80087b4:	4652      	mov	r2, sl
 80087b6:	465b      	mov	r3, fp
 80087b8:	4639      	mov	r1, r7
 80087ba:	f7f8 f997 	bl	8000aec <__aeabi_dcmplt>
 80087be:	2800      	cmp	r0, #0
 80087c0:	d056      	beq.n	8008870 <pow+0x2b0>
 80087c2:	ec45 4b10 	vmov	d0, r4, r5
 80087c6:	f001 fb33 	bl	8009e30 <rint>
 80087ca:	4622      	mov	r2, r4
 80087cc:	462b      	mov	r3, r5
 80087ce:	ec51 0b10 	vmov	r0, r1, d0
 80087d2:	f7f8 f981 	bl	8000ad8 <__aeabi_dcmpeq>
 80087d6:	b920      	cbnz	r0, 80087e2 <pow+0x222>
 80087d8:	4b2e      	ldr	r3, [pc, #184]	; (8008894 <pow+0x2d4>)
 80087da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80087de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80087e2:	f998 3000 	ldrsb.w	r3, [r8]
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d142      	bne.n	8008870 <pow+0x2b0>
 80087ea:	f001 fc2b 	bl	800a044 <__errno>
 80087ee:	2322      	movs	r3, #34	; 0x22
 80087f0:	e78d      	b.n	800870e <pow+0x14e>
 80087f2:	4b29      	ldr	r3, [pc, #164]	; (8008898 <pow+0x2d8>)
 80087f4:	2200      	movs	r2, #0
 80087f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80087fa:	4630      	mov	r0, r6
 80087fc:	4652      	mov	r2, sl
 80087fe:	465b      	mov	r3, fp
 8008800:	4639      	mov	r1, r7
 8008802:	f7f8 f973 	bl	8000aec <__aeabi_dcmplt>
 8008806:	2800      	cmp	r0, #0
 8008808:	d0eb      	beq.n	80087e2 <pow+0x222>
 800880a:	ec45 4b10 	vmov	d0, r4, r5
 800880e:	f001 fb0f 	bl	8009e30 <rint>
 8008812:	4622      	mov	r2, r4
 8008814:	462b      	mov	r3, r5
 8008816:	ec51 0b10 	vmov	r0, r1, d0
 800881a:	f7f8 f95d 	bl	8000ad8 <__aeabi_dcmpeq>
 800881e:	2800      	cmp	r0, #0
 8008820:	d1df      	bne.n	80087e2 <pow+0x222>
 8008822:	2200      	movs	r2, #0
 8008824:	4b18      	ldr	r3, [pc, #96]	; (8008888 <pow+0x2c8>)
 8008826:	e7da      	b.n	80087de <pow+0x21e>
 8008828:	2200      	movs	r2, #0
 800882a:	2300      	movs	r3, #0
 800882c:	ec51 0b18 	vmov	r0, r1, d8
 8008830:	f7f8 f952 	bl	8000ad8 <__aeabi_dcmpeq>
 8008834:	2800      	cmp	r0, #0
 8008836:	f43f af3a 	beq.w	80086ae <pow+0xee>
 800883a:	ec47 6b10 	vmov	d0, r6, r7
 800883e:	f001 fae4 	bl	8009e0a <finite>
 8008842:	2800      	cmp	r0, #0
 8008844:	f43f af33 	beq.w	80086ae <pow+0xee>
 8008848:	ec45 4b10 	vmov	d0, r4, r5
 800884c:	f001 fadd 	bl	8009e0a <finite>
 8008850:	2800      	cmp	r0, #0
 8008852:	f43f af2c 	beq.w	80086ae <pow+0xee>
 8008856:	2304      	movs	r3, #4
 8008858:	9302      	str	r3, [sp, #8]
 800885a:	4b09      	ldr	r3, [pc, #36]	; (8008880 <pow+0x2c0>)
 800885c:	9303      	str	r3, [sp, #12]
 800885e:	2300      	movs	r3, #0
 8008860:	930a      	str	r3, [sp, #40]	; 0x28
 8008862:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008866:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800886a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800886e:	e7b8      	b.n	80087e2 <pow+0x222>
 8008870:	a802      	add	r0, sp, #8
 8008872:	f001 fad2 	bl	8009e1a <matherr>
 8008876:	2800      	cmp	r0, #0
 8008878:	f47f af11 	bne.w	800869e <pow+0xde>
 800887c:	e7b5      	b.n	80087ea <pow+0x22a>
 800887e:	bf00      	nop
 8008880:	0800ea39 	.word	0x0800ea39
 8008884:	3ff00000 	.word	0x3ff00000
 8008888:	fff00000 	.word	0xfff00000
 800888c:	3fe00000 	.word	0x3fe00000
 8008890:	47efffff 	.word	0x47efffff
 8008894:	c7efffff 	.word	0xc7efffff
 8008898:	7ff00000 	.word	0x7ff00000
 800889c:	20000094 	.word	0x20000094

080088a0 <sqrt>:
 80088a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088a4:	ed2d 8b02 	vpush	{d8}
 80088a8:	b08b      	sub	sp, #44	; 0x2c
 80088aa:	ec55 4b10 	vmov	r4, r5, d0
 80088ae:	f001 f851 	bl	8009954 <__ieee754_sqrt>
 80088b2:	4b26      	ldr	r3, [pc, #152]	; (800894c <sqrt+0xac>)
 80088b4:	eeb0 8a40 	vmov.f32	s16, s0
 80088b8:	eef0 8a60 	vmov.f32	s17, s1
 80088bc:	f993 6000 	ldrsb.w	r6, [r3]
 80088c0:	1c73      	adds	r3, r6, #1
 80088c2:	d02a      	beq.n	800891a <sqrt+0x7a>
 80088c4:	4622      	mov	r2, r4
 80088c6:	462b      	mov	r3, r5
 80088c8:	4620      	mov	r0, r4
 80088ca:	4629      	mov	r1, r5
 80088cc:	f7f8 f936 	bl	8000b3c <__aeabi_dcmpun>
 80088d0:	4607      	mov	r7, r0
 80088d2:	bb10      	cbnz	r0, 800891a <sqrt+0x7a>
 80088d4:	f04f 0800 	mov.w	r8, #0
 80088d8:	f04f 0900 	mov.w	r9, #0
 80088dc:	4642      	mov	r2, r8
 80088de:	464b      	mov	r3, r9
 80088e0:	4620      	mov	r0, r4
 80088e2:	4629      	mov	r1, r5
 80088e4:	f7f8 f902 	bl	8000aec <__aeabi_dcmplt>
 80088e8:	b1b8      	cbz	r0, 800891a <sqrt+0x7a>
 80088ea:	2301      	movs	r3, #1
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	4b18      	ldr	r3, [pc, #96]	; (8008950 <sqrt+0xb0>)
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	9708      	str	r7, [sp, #32]
 80088f4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80088f8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80088fc:	b9b6      	cbnz	r6, 800892c <sqrt+0x8c>
 80088fe:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008902:	4668      	mov	r0, sp
 8008904:	f001 fa89 	bl	8009e1a <matherr>
 8008908:	b1d0      	cbz	r0, 8008940 <sqrt+0xa0>
 800890a:	9b08      	ldr	r3, [sp, #32]
 800890c:	b11b      	cbz	r3, 8008916 <sqrt+0x76>
 800890e:	f001 fb99 	bl	800a044 <__errno>
 8008912:	9b08      	ldr	r3, [sp, #32]
 8008914:	6003      	str	r3, [r0, #0]
 8008916:	ed9d 8b06 	vldr	d8, [sp, #24]
 800891a:	eeb0 0a48 	vmov.f32	s0, s16
 800891e:	eef0 0a68 	vmov.f32	s1, s17
 8008922:	b00b      	add	sp, #44	; 0x2c
 8008924:	ecbd 8b02 	vpop	{d8}
 8008928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800892c:	4642      	mov	r2, r8
 800892e:	464b      	mov	r3, r9
 8008930:	4640      	mov	r0, r8
 8008932:	4649      	mov	r1, r9
 8008934:	f7f7 ff92 	bl	800085c <__aeabi_ddiv>
 8008938:	2e02      	cmp	r6, #2
 800893a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800893e:	d1e0      	bne.n	8008902 <sqrt+0x62>
 8008940:	f001 fb80 	bl	800a044 <__errno>
 8008944:	2321      	movs	r3, #33	; 0x21
 8008946:	6003      	str	r3, [r0, #0]
 8008948:	e7df      	b.n	800890a <sqrt+0x6a>
 800894a:	bf00      	nop
 800894c:	20000094 	.word	0x20000094
 8008950:	0800ea3d 	.word	0x0800ea3d
 8008954:	00000000 	.word	0x00000000

08008958 <__ieee754_asin>:
 8008958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800895c:	ec55 4b10 	vmov	r4, r5, d0
 8008960:	4bcb      	ldr	r3, [pc, #812]	; (8008c90 <__ieee754_asin+0x338>)
 8008962:	b087      	sub	sp, #28
 8008964:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8008968:	429f      	cmp	r7, r3
 800896a:	9501      	str	r5, [sp, #4]
 800896c:	dd31      	ble.n	80089d2 <__ieee754_asin+0x7a>
 800896e:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8008972:	ee10 3a10 	vmov	r3, s0
 8008976:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800897a:	433b      	orrs	r3, r7
 800897c:	d117      	bne.n	80089ae <__ieee754_asin+0x56>
 800897e:	a3aa      	add	r3, pc, #680	; (adr r3, 8008c28 <__ieee754_asin+0x2d0>)
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	ee10 0a10 	vmov	r0, s0
 8008988:	4629      	mov	r1, r5
 800898a:	f7f7 fe3d 	bl	8000608 <__aeabi_dmul>
 800898e:	a3a8      	add	r3, pc, #672	; (adr r3, 8008c30 <__ieee754_asin+0x2d8>)
 8008990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008994:	4606      	mov	r6, r0
 8008996:	460f      	mov	r7, r1
 8008998:	4620      	mov	r0, r4
 800899a:	4629      	mov	r1, r5
 800899c:	f7f7 fe34 	bl	8000608 <__aeabi_dmul>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4630      	mov	r0, r6
 80089a6:	4639      	mov	r1, r7
 80089a8:	f7f7 fc78 	bl	800029c <__adddf3>
 80089ac:	e00a      	b.n	80089c4 <__ieee754_asin+0x6c>
 80089ae:	ee10 2a10 	vmov	r2, s0
 80089b2:	462b      	mov	r3, r5
 80089b4:	4620      	mov	r0, r4
 80089b6:	4629      	mov	r1, r5
 80089b8:	f7f7 fc6e 	bl	8000298 <__aeabi_dsub>
 80089bc:	4602      	mov	r2, r0
 80089be:	460b      	mov	r3, r1
 80089c0:	f7f7 ff4c 	bl	800085c <__aeabi_ddiv>
 80089c4:	4604      	mov	r4, r0
 80089c6:	460d      	mov	r5, r1
 80089c8:	ec45 4b10 	vmov	d0, r4, r5
 80089cc:	b007      	add	sp, #28
 80089ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d2:	4bb0      	ldr	r3, [pc, #704]	; (8008c94 <__ieee754_asin+0x33c>)
 80089d4:	429f      	cmp	r7, r3
 80089d6:	dc11      	bgt.n	80089fc <__ieee754_asin+0xa4>
 80089d8:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80089dc:	f280 80ae 	bge.w	8008b3c <__ieee754_asin+0x1e4>
 80089e0:	a395      	add	r3, pc, #596	; (adr r3, 8008c38 <__ieee754_asin+0x2e0>)
 80089e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e6:	ee10 0a10 	vmov	r0, s0
 80089ea:	4629      	mov	r1, r5
 80089ec:	f7f7 fc56 	bl	800029c <__adddf3>
 80089f0:	2200      	movs	r2, #0
 80089f2:	4ba9      	ldr	r3, [pc, #676]	; (8008c98 <__ieee754_asin+0x340>)
 80089f4:	f7f8 f898 	bl	8000b28 <__aeabi_dcmpgt>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d1e5      	bne.n	80089c8 <__ieee754_asin+0x70>
 80089fc:	ec45 4b10 	vmov	d0, r4, r5
 8008a00:	f001 f9fa 	bl	8009df8 <fabs>
 8008a04:	2000      	movs	r0, #0
 8008a06:	ec53 2b10 	vmov	r2, r3, d0
 8008a0a:	49a3      	ldr	r1, [pc, #652]	; (8008c98 <__ieee754_asin+0x340>)
 8008a0c:	f7f7 fc44 	bl	8000298 <__aeabi_dsub>
 8008a10:	2200      	movs	r2, #0
 8008a12:	4ba2      	ldr	r3, [pc, #648]	; (8008c9c <__ieee754_asin+0x344>)
 8008a14:	f7f7 fdf8 	bl	8000608 <__aeabi_dmul>
 8008a18:	a389      	add	r3, pc, #548	; (adr r3, 8008c40 <__ieee754_asin+0x2e8>)
 8008a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1e:	4604      	mov	r4, r0
 8008a20:	460d      	mov	r5, r1
 8008a22:	f7f7 fdf1 	bl	8000608 <__aeabi_dmul>
 8008a26:	a388      	add	r3, pc, #544	; (adr r3, 8008c48 <__ieee754_asin+0x2f0>)
 8008a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2c:	f7f7 fc36 	bl	800029c <__adddf3>
 8008a30:	4622      	mov	r2, r4
 8008a32:	462b      	mov	r3, r5
 8008a34:	f7f7 fde8 	bl	8000608 <__aeabi_dmul>
 8008a38:	a385      	add	r3, pc, #532	; (adr r3, 8008c50 <__ieee754_asin+0x2f8>)
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	f7f7 fc2b 	bl	8000298 <__aeabi_dsub>
 8008a42:	4622      	mov	r2, r4
 8008a44:	462b      	mov	r3, r5
 8008a46:	f7f7 fddf 	bl	8000608 <__aeabi_dmul>
 8008a4a:	a383      	add	r3, pc, #524	; (adr r3, 8008c58 <__ieee754_asin+0x300>)
 8008a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a50:	f7f7 fc24 	bl	800029c <__adddf3>
 8008a54:	4622      	mov	r2, r4
 8008a56:	462b      	mov	r3, r5
 8008a58:	f7f7 fdd6 	bl	8000608 <__aeabi_dmul>
 8008a5c:	a380      	add	r3, pc, #512	; (adr r3, 8008c60 <__ieee754_asin+0x308>)
 8008a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a62:	f7f7 fc19 	bl	8000298 <__aeabi_dsub>
 8008a66:	4622      	mov	r2, r4
 8008a68:	462b      	mov	r3, r5
 8008a6a:	f7f7 fdcd 	bl	8000608 <__aeabi_dmul>
 8008a6e:	a37e      	add	r3, pc, #504	; (adr r3, 8008c68 <__ieee754_asin+0x310>)
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	f7f7 fc12 	bl	800029c <__adddf3>
 8008a78:	4622      	mov	r2, r4
 8008a7a:	462b      	mov	r3, r5
 8008a7c:	f7f7 fdc4 	bl	8000608 <__aeabi_dmul>
 8008a80:	a37b      	add	r3, pc, #492	; (adr r3, 8008c70 <__ieee754_asin+0x318>)
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	4680      	mov	r8, r0
 8008a88:	4689      	mov	r9, r1
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	4629      	mov	r1, r5
 8008a8e:	f7f7 fdbb 	bl	8000608 <__aeabi_dmul>
 8008a92:	a379      	add	r3, pc, #484	; (adr r3, 8008c78 <__ieee754_asin+0x320>)
 8008a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a98:	f7f7 fbfe 	bl	8000298 <__aeabi_dsub>
 8008a9c:	4622      	mov	r2, r4
 8008a9e:	462b      	mov	r3, r5
 8008aa0:	f7f7 fdb2 	bl	8000608 <__aeabi_dmul>
 8008aa4:	a376      	add	r3, pc, #472	; (adr r3, 8008c80 <__ieee754_asin+0x328>)
 8008aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aaa:	f7f7 fbf7 	bl	800029c <__adddf3>
 8008aae:	4622      	mov	r2, r4
 8008ab0:	462b      	mov	r3, r5
 8008ab2:	f7f7 fda9 	bl	8000608 <__aeabi_dmul>
 8008ab6:	a374      	add	r3, pc, #464	; (adr r3, 8008c88 <__ieee754_asin+0x330>)
 8008ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abc:	f7f7 fbec 	bl	8000298 <__aeabi_dsub>
 8008ac0:	4622      	mov	r2, r4
 8008ac2:	462b      	mov	r3, r5
 8008ac4:	f7f7 fda0 	bl	8000608 <__aeabi_dmul>
 8008ac8:	4b73      	ldr	r3, [pc, #460]	; (8008c98 <__ieee754_asin+0x340>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	f7f7 fbe6 	bl	800029c <__adddf3>
 8008ad0:	ec45 4b10 	vmov	d0, r4, r5
 8008ad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ad8:	f000 ff3c 	bl	8009954 <__ieee754_sqrt>
 8008adc:	4b70      	ldr	r3, [pc, #448]	; (8008ca0 <__ieee754_asin+0x348>)
 8008ade:	429f      	cmp	r7, r3
 8008ae0:	ec5b ab10 	vmov	sl, fp, d0
 8008ae4:	f340 80de 	ble.w	8008ca4 <__ieee754_asin+0x34c>
 8008ae8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008aec:	4640      	mov	r0, r8
 8008aee:	4649      	mov	r1, r9
 8008af0:	f7f7 feb4 	bl	800085c <__aeabi_ddiv>
 8008af4:	4652      	mov	r2, sl
 8008af6:	465b      	mov	r3, fp
 8008af8:	f7f7 fd86 	bl	8000608 <__aeabi_dmul>
 8008afc:	4652      	mov	r2, sl
 8008afe:	465b      	mov	r3, fp
 8008b00:	f7f7 fbcc 	bl	800029c <__adddf3>
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	f7f7 fbc8 	bl	800029c <__adddf3>
 8008b0c:	a348      	add	r3, pc, #288	; (adr r3, 8008c30 <__ieee754_asin+0x2d8>)
 8008b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b12:	f7f7 fbc1 	bl	8000298 <__aeabi_dsub>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	a143      	add	r1, pc, #268	; (adr r1, 8008c28 <__ieee754_asin+0x2d0>)
 8008b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b20:	f7f7 fbba 	bl	8000298 <__aeabi_dsub>
 8008b24:	9b01      	ldr	r3, [sp, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	bfdc      	itt	le
 8008b2a:	4602      	movle	r2, r0
 8008b2c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8008b30:	4604      	mov	r4, r0
 8008b32:	460d      	mov	r5, r1
 8008b34:	bfdc      	itt	le
 8008b36:	4614      	movle	r4, r2
 8008b38:	461d      	movle	r5, r3
 8008b3a:	e745      	b.n	80089c8 <__ieee754_asin+0x70>
 8008b3c:	ee10 2a10 	vmov	r2, s0
 8008b40:	ee10 0a10 	vmov	r0, s0
 8008b44:	462b      	mov	r3, r5
 8008b46:	4629      	mov	r1, r5
 8008b48:	f7f7 fd5e 	bl	8000608 <__aeabi_dmul>
 8008b4c:	a33c      	add	r3, pc, #240	; (adr r3, 8008c40 <__ieee754_asin+0x2e8>)
 8008b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b52:	4606      	mov	r6, r0
 8008b54:	460f      	mov	r7, r1
 8008b56:	f7f7 fd57 	bl	8000608 <__aeabi_dmul>
 8008b5a:	a33b      	add	r3, pc, #236	; (adr r3, 8008c48 <__ieee754_asin+0x2f0>)
 8008b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b60:	f7f7 fb9c 	bl	800029c <__adddf3>
 8008b64:	4632      	mov	r2, r6
 8008b66:	463b      	mov	r3, r7
 8008b68:	f7f7 fd4e 	bl	8000608 <__aeabi_dmul>
 8008b6c:	a338      	add	r3, pc, #224	; (adr r3, 8008c50 <__ieee754_asin+0x2f8>)
 8008b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b72:	f7f7 fb91 	bl	8000298 <__aeabi_dsub>
 8008b76:	4632      	mov	r2, r6
 8008b78:	463b      	mov	r3, r7
 8008b7a:	f7f7 fd45 	bl	8000608 <__aeabi_dmul>
 8008b7e:	a336      	add	r3, pc, #216	; (adr r3, 8008c58 <__ieee754_asin+0x300>)
 8008b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b84:	f7f7 fb8a 	bl	800029c <__adddf3>
 8008b88:	4632      	mov	r2, r6
 8008b8a:	463b      	mov	r3, r7
 8008b8c:	f7f7 fd3c 	bl	8000608 <__aeabi_dmul>
 8008b90:	a333      	add	r3, pc, #204	; (adr r3, 8008c60 <__ieee754_asin+0x308>)
 8008b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b96:	f7f7 fb7f 	bl	8000298 <__aeabi_dsub>
 8008b9a:	4632      	mov	r2, r6
 8008b9c:	463b      	mov	r3, r7
 8008b9e:	f7f7 fd33 	bl	8000608 <__aeabi_dmul>
 8008ba2:	a331      	add	r3, pc, #196	; (adr r3, 8008c68 <__ieee754_asin+0x310>)
 8008ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba8:	f7f7 fb78 	bl	800029c <__adddf3>
 8008bac:	4632      	mov	r2, r6
 8008bae:	463b      	mov	r3, r7
 8008bb0:	f7f7 fd2a 	bl	8000608 <__aeabi_dmul>
 8008bb4:	a32e      	add	r3, pc, #184	; (adr r3, 8008c70 <__ieee754_asin+0x318>)
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	4680      	mov	r8, r0
 8008bbc:	4689      	mov	r9, r1
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	4639      	mov	r1, r7
 8008bc2:	f7f7 fd21 	bl	8000608 <__aeabi_dmul>
 8008bc6:	a32c      	add	r3, pc, #176	; (adr r3, 8008c78 <__ieee754_asin+0x320>)
 8008bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bcc:	f7f7 fb64 	bl	8000298 <__aeabi_dsub>
 8008bd0:	4632      	mov	r2, r6
 8008bd2:	463b      	mov	r3, r7
 8008bd4:	f7f7 fd18 	bl	8000608 <__aeabi_dmul>
 8008bd8:	a329      	add	r3, pc, #164	; (adr r3, 8008c80 <__ieee754_asin+0x328>)
 8008bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bde:	f7f7 fb5d 	bl	800029c <__adddf3>
 8008be2:	4632      	mov	r2, r6
 8008be4:	463b      	mov	r3, r7
 8008be6:	f7f7 fd0f 	bl	8000608 <__aeabi_dmul>
 8008bea:	a327      	add	r3, pc, #156	; (adr r3, 8008c88 <__ieee754_asin+0x330>)
 8008bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf0:	f7f7 fb52 	bl	8000298 <__aeabi_dsub>
 8008bf4:	4632      	mov	r2, r6
 8008bf6:	463b      	mov	r3, r7
 8008bf8:	f7f7 fd06 	bl	8000608 <__aeabi_dmul>
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	4b26      	ldr	r3, [pc, #152]	; (8008c98 <__ieee754_asin+0x340>)
 8008c00:	f7f7 fb4c 	bl	800029c <__adddf3>
 8008c04:	4602      	mov	r2, r0
 8008c06:	460b      	mov	r3, r1
 8008c08:	4640      	mov	r0, r8
 8008c0a:	4649      	mov	r1, r9
 8008c0c:	f7f7 fe26 	bl	800085c <__aeabi_ddiv>
 8008c10:	4622      	mov	r2, r4
 8008c12:	462b      	mov	r3, r5
 8008c14:	f7f7 fcf8 	bl	8000608 <__aeabi_dmul>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	4629      	mov	r1, r5
 8008c20:	e6c2      	b.n	80089a8 <__ieee754_asin+0x50>
 8008c22:	bf00      	nop
 8008c24:	f3af 8000 	nop.w
 8008c28:	54442d18 	.word	0x54442d18
 8008c2c:	3ff921fb 	.word	0x3ff921fb
 8008c30:	33145c07 	.word	0x33145c07
 8008c34:	3c91a626 	.word	0x3c91a626
 8008c38:	8800759c 	.word	0x8800759c
 8008c3c:	7e37e43c 	.word	0x7e37e43c
 8008c40:	0dfdf709 	.word	0x0dfdf709
 8008c44:	3f023de1 	.word	0x3f023de1
 8008c48:	7501b288 	.word	0x7501b288
 8008c4c:	3f49efe0 	.word	0x3f49efe0
 8008c50:	b5688f3b 	.word	0xb5688f3b
 8008c54:	3fa48228 	.word	0x3fa48228
 8008c58:	0e884455 	.word	0x0e884455
 8008c5c:	3fc9c155 	.word	0x3fc9c155
 8008c60:	03eb6f7d 	.word	0x03eb6f7d
 8008c64:	3fd4d612 	.word	0x3fd4d612
 8008c68:	55555555 	.word	0x55555555
 8008c6c:	3fc55555 	.word	0x3fc55555
 8008c70:	b12e9282 	.word	0xb12e9282
 8008c74:	3fb3b8c5 	.word	0x3fb3b8c5
 8008c78:	1b8d0159 	.word	0x1b8d0159
 8008c7c:	3fe6066c 	.word	0x3fe6066c
 8008c80:	9c598ac8 	.word	0x9c598ac8
 8008c84:	40002ae5 	.word	0x40002ae5
 8008c88:	1c8a2d4b 	.word	0x1c8a2d4b
 8008c8c:	40033a27 	.word	0x40033a27
 8008c90:	3fefffff 	.word	0x3fefffff
 8008c94:	3fdfffff 	.word	0x3fdfffff
 8008c98:	3ff00000 	.word	0x3ff00000
 8008c9c:	3fe00000 	.word	0x3fe00000
 8008ca0:	3fef3332 	.word	0x3fef3332
 8008ca4:	ee10 2a10 	vmov	r2, s0
 8008ca8:	ee10 0a10 	vmov	r0, s0
 8008cac:	465b      	mov	r3, fp
 8008cae:	4659      	mov	r1, fp
 8008cb0:	f7f7 faf4 	bl	800029c <__adddf3>
 8008cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cbc:	4640      	mov	r0, r8
 8008cbe:	4649      	mov	r1, r9
 8008cc0:	f7f7 fdcc 	bl	800085c <__aeabi_ddiv>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ccc:	f7f7 fc9c 	bl	8000608 <__aeabi_dmul>
 8008cd0:	2600      	movs	r6, #0
 8008cd2:	4680      	mov	r8, r0
 8008cd4:	4689      	mov	r9, r1
 8008cd6:	4632      	mov	r2, r6
 8008cd8:	465b      	mov	r3, fp
 8008cda:	4630      	mov	r0, r6
 8008cdc:	4659      	mov	r1, fp
 8008cde:	f7f7 fc93 	bl	8000608 <__aeabi_dmul>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	4629      	mov	r1, r5
 8008cea:	f7f7 fad5 	bl	8000298 <__aeabi_dsub>
 8008cee:	4632      	mov	r2, r6
 8008cf0:	4604      	mov	r4, r0
 8008cf2:	460d      	mov	r5, r1
 8008cf4:	465b      	mov	r3, fp
 8008cf6:	4650      	mov	r0, sl
 8008cf8:	4659      	mov	r1, fp
 8008cfa:	f7f7 facf 	bl	800029c <__adddf3>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	4620      	mov	r0, r4
 8008d04:	4629      	mov	r1, r5
 8008d06:	f7f7 fda9 	bl	800085c <__aeabi_ddiv>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	f7f7 fac5 	bl	800029c <__adddf3>
 8008d12:	4602      	mov	r2, r0
 8008d14:	460b      	mov	r3, r1
 8008d16:	a114      	add	r1, pc, #80	; (adr r1, 8008d68 <__ieee754_asin+0x410>)
 8008d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d1c:	f7f7 fabc 	bl	8000298 <__aeabi_dsub>
 8008d20:	4602      	mov	r2, r0
 8008d22:	460b      	mov	r3, r1
 8008d24:	4640      	mov	r0, r8
 8008d26:	4649      	mov	r1, r9
 8008d28:	f7f7 fab6 	bl	8000298 <__aeabi_dsub>
 8008d2c:	465f      	mov	r7, fp
 8008d2e:	4604      	mov	r4, r0
 8008d30:	460d      	mov	r5, r1
 8008d32:	4632      	mov	r2, r6
 8008d34:	465b      	mov	r3, fp
 8008d36:	4630      	mov	r0, r6
 8008d38:	4639      	mov	r1, r7
 8008d3a:	f7f7 faaf 	bl	800029c <__adddf3>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	a10b      	add	r1, pc, #44	; (adr r1, 8008d70 <__ieee754_asin+0x418>)
 8008d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d48:	f7f7 faa6 	bl	8000298 <__aeabi_dsub>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4620      	mov	r0, r4
 8008d52:	4629      	mov	r1, r5
 8008d54:	f7f7 faa0 	bl	8000298 <__aeabi_dsub>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	a104      	add	r1, pc, #16	; (adr r1, 8008d70 <__ieee754_asin+0x418>)
 8008d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d62:	e6dd      	b.n	8008b20 <__ieee754_asin+0x1c8>
 8008d64:	f3af 8000 	nop.w
 8008d68:	33145c07 	.word	0x33145c07
 8008d6c:	3c91a626 	.word	0x3c91a626
 8008d70:	54442d18 	.word	0x54442d18
 8008d74:	3fe921fb 	.word	0x3fe921fb

08008d78 <__ieee754_atan2>:
 8008d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d7c:	ec57 6b11 	vmov	r6, r7, d1
 8008d80:	4273      	negs	r3, r6
 8008d82:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008d86:	4333      	orrs	r3, r6
 8008d88:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8008f30 <__ieee754_atan2+0x1b8>
 8008d8c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008d90:	4573      	cmp	r3, lr
 8008d92:	ec51 0b10 	vmov	r0, r1, d0
 8008d96:	ee11 8a10 	vmov	r8, s2
 8008d9a:	d80a      	bhi.n	8008db2 <__ieee754_atan2+0x3a>
 8008d9c:	4244      	negs	r4, r0
 8008d9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008da2:	4304      	orrs	r4, r0
 8008da4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008da8:	4574      	cmp	r4, lr
 8008daa:	468c      	mov	ip, r1
 8008dac:	ee10 9a10 	vmov	r9, s0
 8008db0:	d907      	bls.n	8008dc2 <__ieee754_atan2+0x4a>
 8008db2:	4632      	mov	r2, r6
 8008db4:	463b      	mov	r3, r7
 8008db6:	f7f7 fa71 	bl	800029c <__adddf3>
 8008dba:	ec41 0b10 	vmov	d0, r0, r1
 8008dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008dc6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008dca:	4334      	orrs	r4, r6
 8008dcc:	d103      	bne.n	8008dd6 <__ieee754_atan2+0x5e>
 8008dce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dd2:	f000 be71 	b.w	8009ab8 <atan>
 8008dd6:	17bc      	asrs	r4, r7, #30
 8008dd8:	f004 0402 	and.w	r4, r4, #2
 8008ddc:	ea53 0909 	orrs.w	r9, r3, r9
 8008de0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008de4:	d107      	bne.n	8008df6 <__ieee754_atan2+0x7e>
 8008de6:	2c02      	cmp	r4, #2
 8008de8:	d073      	beq.n	8008ed2 <__ieee754_atan2+0x15a>
 8008dea:	2c03      	cmp	r4, #3
 8008dec:	d1e5      	bne.n	8008dba <__ieee754_atan2+0x42>
 8008dee:	a13e      	add	r1, pc, #248	; (adr r1, 8008ee8 <__ieee754_atan2+0x170>)
 8008df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008df4:	e7e1      	b.n	8008dba <__ieee754_atan2+0x42>
 8008df6:	ea52 0808 	orrs.w	r8, r2, r8
 8008dfa:	d106      	bne.n	8008e0a <__ieee754_atan2+0x92>
 8008dfc:	f1bc 0f00 	cmp.w	ip, #0
 8008e00:	da6b      	bge.n	8008eda <__ieee754_atan2+0x162>
 8008e02:	a13b      	add	r1, pc, #236	; (adr r1, 8008ef0 <__ieee754_atan2+0x178>)
 8008e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e08:	e7d7      	b.n	8008dba <__ieee754_atan2+0x42>
 8008e0a:	4572      	cmp	r2, lr
 8008e0c:	d120      	bne.n	8008e50 <__ieee754_atan2+0xd8>
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d111      	bne.n	8008e36 <__ieee754_atan2+0xbe>
 8008e12:	2c02      	cmp	r4, #2
 8008e14:	d007      	beq.n	8008e26 <__ieee754_atan2+0xae>
 8008e16:	2c03      	cmp	r4, #3
 8008e18:	d009      	beq.n	8008e2e <__ieee754_atan2+0xb6>
 8008e1a:	2c01      	cmp	r4, #1
 8008e1c:	d155      	bne.n	8008eca <__ieee754_atan2+0x152>
 8008e1e:	a136      	add	r1, pc, #216	; (adr r1, 8008ef8 <__ieee754_atan2+0x180>)
 8008e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e24:	e7c9      	b.n	8008dba <__ieee754_atan2+0x42>
 8008e26:	a136      	add	r1, pc, #216	; (adr r1, 8008f00 <__ieee754_atan2+0x188>)
 8008e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e2c:	e7c5      	b.n	8008dba <__ieee754_atan2+0x42>
 8008e2e:	a136      	add	r1, pc, #216	; (adr r1, 8008f08 <__ieee754_atan2+0x190>)
 8008e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e34:	e7c1      	b.n	8008dba <__ieee754_atan2+0x42>
 8008e36:	2c02      	cmp	r4, #2
 8008e38:	d04b      	beq.n	8008ed2 <__ieee754_atan2+0x15a>
 8008e3a:	2c03      	cmp	r4, #3
 8008e3c:	d0d7      	beq.n	8008dee <__ieee754_atan2+0x76>
 8008e3e:	2c01      	cmp	r4, #1
 8008e40:	f04f 0000 	mov.w	r0, #0
 8008e44:	d102      	bne.n	8008e4c <__ieee754_atan2+0xd4>
 8008e46:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008e4a:	e7b6      	b.n	8008dba <__ieee754_atan2+0x42>
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	e7b4      	b.n	8008dba <__ieee754_atan2+0x42>
 8008e50:	4573      	cmp	r3, lr
 8008e52:	d0d3      	beq.n	8008dfc <__ieee754_atan2+0x84>
 8008e54:	1a9b      	subs	r3, r3, r2
 8008e56:	151b      	asrs	r3, r3, #20
 8008e58:	2b3c      	cmp	r3, #60	; 0x3c
 8008e5a:	dc1e      	bgt.n	8008e9a <__ieee754_atan2+0x122>
 8008e5c:	2f00      	cmp	r7, #0
 8008e5e:	da01      	bge.n	8008e64 <__ieee754_atan2+0xec>
 8008e60:	333c      	adds	r3, #60	; 0x3c
 8008e62:	db1e      	blt.n	8008ea2 <__ieee754_atan2+0x12a>
 8008e64:	4632      	mov	r2, r6
 8008e66:	463b      	mov	r3, r7
 8008e68:	f7f7 fcf8 	bl	800085c <__aeabi_ddiv>
 8008e6c:	ec41 0b10 	vmov	d0, r0, r1
 8008e70:	f000 ffc2 	bl	8009df8 <fabs>
 8008e74:	f000 fe20 	bl	8009ab8 <atan>
 8008e78:	ec51 0b10 	vmov	r0, r1, d0
 8008e7c:	2c01      	cmp	r4, #1
 8008e7e:	d013      	beq.n	8008ea8 <__ieee754_atan2+0x130>
 8008e80:	2c02      	cmp	r4, #2
 8008e82:	d015      	beq.n	8008eb0 <__ieee754_atan2+0x138>
 8008e84:	2c00      	cmp	r4, #0
 8008e86:	d098      	beq.n	8008dba <__ieee754_atan2+0x42>
 8008e88:	a321      	add	r3, pc, #132	; (adr r3, 8008f10 <__ieee754_atan2+0x198>)
 8008e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8e:	f7f7 fa03 	bl	8000298 <__aeabi_dsub>
 8008e92:	a321      	add	r3, pc, #132	; (adr r3, 8008f18 <__ieee754_atan2+0x1a0>)
 8008e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e98:	e014      	b.n	8008ec4 <__ieee754_atan2+0x14c>
 8008e9a:	a121      	add	r1, pc, #132	; (adr r1, 8008f20 <__ieee754_atan2+0x1a8>)
 8008e9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ea0:	e7ec      	b.n	8008e7c <__ieee754_atan2+0x104>
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	e7e9      	b.n	8008e7c <__ieee754_atan2+0x104>
 8008ea8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008eac:	4619      	mov	r1, r3
 8008eae:	e784      	b.n	8008dba <__ieee754_atan2+0x42>
 8008eb0:	a317      	add	r3, pc, #92	; (adr r3, 8008f10 <__ieee754_atan2+0x198>)
 8008eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb6:	f7f7 f9ef 	bl	8000298 <__aeabi_dsub>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	a116      	add	r1, pc, #88	; (adr r1, 8008f18 <__ieee754_atan2+0x1a0>)
 8008ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ec4:	f7f7 f9e8 	bl	8000298 <__aeabi_dsub>
 8008ec8:	e777      	b.n	8008dba <__ieee754_atan2+0x42>
 8008eca:	a117      	add	r1, pc, #92	; (adr r1, 8008f28 <__ieee754_atan2+0x1b0>)
 8008ecc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ed0:	e773      	b.n	8008dba <__ieee754_atan2+0x42>
 8008ed2:	a111      	add	r1, pc, #68	; (adr r1, 8008f18 <__ieee754_atan2+0x1a0>)
 8008ed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ed8:	e76f      	b.n	8008dba <__ieee754_atan2+0x42>
 8008eda:	a111      	add	r1, pc, #68	; (adr r1, 8008f20 <__ieee754_atan2+0x1a8>)
 8008edc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ee0:	e76b      	b.n	8008dba <__ieee754_atan2+0x42>
 8008ee2:	bf00      	nop
 8008ee4:	f3af 8000 	nop.w
 8008ee8:	54442d18 	.word	0x54442d18
 8008eec:	c00921fb 	.word	0xc00921fb
 8008ef0:	54442d18 	.word	0x54442d18
 8008ef4:	bff921fb 	.word	0xbff921fb
 8008ef8:	54442d18 	.word	0x54442d18
 8008efc:	bfe921fb 	.word	0xbfe921fb
 8008f00:	7f3321d2 	.word	0x7f3321d2
 8008f04:	4002d97c 	.word	0x4002d97c
 8008f08:	7f3321d2 	.word	0x7f3321d2
 8008f0c:	c002d97c 	.word	0xc002d97c
 8008f10:	33145c07 	.word	0x33145c07
 8008f14:	3ca1a626 	.word	0x3ca1a626
 8008f18:	54442d18 	.word	0x54442d18
 8008f1c:	400921fb 	.word	0x400921fb
 8008f20:	54442d18 	.word	0x54442d18
 8008f24:	3ff921fb 	.word	0x3ff921fb
 8008f28:	54442d18 	.word	0x54442d18
 8008f2c:	3fe921fb 	.word	0x3fe921fb
 8008f30:	7ff00000 	.word	0x7ff00000
 8008f34:	00000000 	.word	0x00000000

08008f38 <__ieee754_pow>:
 8008f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f3c:	b091      	sub	sp, #68	; 0x44
 8008f3e:	ed8d 1b00 	vstr	d1, [sp]
 8008f42:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008f46:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008f4a:	ea58 0302 	orrs.w	r3, r8, r2
 8008f4e:	ec57 6b10 	vmov	r6, r7, d0
 8008f52:	f000 84be 	beq.w	80098d2 <__ieee754_pow+0x99a>
 8008f56:	4b7a      	ldr	r3, [pc, #488]	; (8009140 <__ieee754_pow+0x208>)
 8008f58:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008f5c:	429c      	cmp	r4, r3
 8008f5e:	463d      	mov	r5, r7
 8008f60:	ee10 aa10 	vmov	sl, s0
 8008f64:	dc09      	bgt.n	8008f7a <__ieee754_pow+0x42>
 8008f66:	d103      	bne.n	8008f70 <__ieee754_pow+0x38>
 8008f68:	b93e      	cbnz	r6, 8008f7a <__ieee754_pow+0x42>
 8008f6a:	45a0      	cmp	r8, r4
 8008f6c:	dc0d      	bgt.n	8008f8a <__ieee754_pow+0x52>
 8008f6e:	e001      	b.n	8008f74 <__ieee754_pow+0x3c>
 8008f70:	4598      	cmp	r8, r3
 8008f72:	dc02      	bgt.n	8008f7a <__ieee754_pow+0x42>
 8008f74:	4598      	cmp	r8, r3
 8008f76:	d10e      	bne.n	8008f96 <__ieee754_pow+0x5e>
 8008f78:	b16a      	cbz	r2, 8008f96 <__ieee754_pow+0x5e>
 8008f7a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008f7e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008f82:	ea54 030a 	orrs.w	r3, r4, sl
 8008f86:	f000 84a4 	beq.w	80098d2 <__ieee754_pow+0x99a>
 8008f8a:	486e      	ldr	r0, [pc, #440]	; (8009144 <__ieee754_pow+0x20c>)
 8008f8c:	b011      	add	sp, #68	; 0x44
 8008f8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f92:	f000 bf45 	b.w	8009e20 <nan>
 8008f96:	2d00      	cmp	r5, #0
 8008f98:	da53      	bge.n	8009042 <__ieee754_pow+0x10a>
 8008f9a:	4b6b      	ldr	r3, [pc, #428]	; (8009148 <__ieee754_pow+0x210>)
 8008f9c:	4598      	cmp	r8, r3
 8008f9e:	dc4d      	bgt.n	800903c <__ieee754_pow+0x104>
 8008fa0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008fa4:	4598      	cmp	r8, r3
 8008fa6:	dd4c      	ble.n	8009042 <__ieee754_pow+0x10a>
 8008fa8:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008fac:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008fb0:	2b14      	cmp	r3, #20
 8008fb2:	dd26      	ble.n	8009002 <__ieee754_pow+0xca>
 8008fb4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008fb8:	fa22 f103 	lsr.w	r1, r2, r3
 8008fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d13e      	bne.n	8009042 <__ieee754_pow+0x10a>
 8008fc4:	f001 0101 	and.w	r1, r1, #1
 8008fc8:	f1c1 0b02 	rsb	fp, r1, #2
 8008fcc:	2a00      	cmp	r2, #0
 8008fce:	d15b      	bne.n	8009088 <__ieee754_pow+0x150>
 8008fd0:	4b5b      	ldr	r3, [pc, #364]	; (8009140 <__ieee754_pow+0x208>)
 8008fd2:	4598      	cmp	r8, r3
 8008fd4:	d124      	bne.n	8009020 <__ieee754_pow+0xe8>
 8008fd6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008fda:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008fde:	ea53 030a 	orrs.w	r3, r3, sl
 8008fe2:	f000 8476 	beq.w	80098d2 <__ieee754_pow+0x99a>
 8008fe6:	4b59      	ldr	r3, [pc, #356]	; (800914c <__ieee754_pow+0x214>)
 8008fe8:	429c      	cmp	r4, r3
 8008fea:	dd2d      	ble.n	8009048 <__ieee754_pow+0x110>
 8008fec:	f1b9 0f00 	cmp.w	r9, #0
 8008ff0:	f280 8473 	bge.w	80098da <__ieee754_pow+0x9a2>
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	ec41 0b10 	vmov	d0, r0, r1
 8008ffc:	b011      	add	sp, #68	; 0x44
 8008ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009002:	2a00      	cmp	r2, #0
 8009004:	d13e      	bne.n	8009084 <__ieee754_pow+0x14c>
 8009006:	f1c3 0314 	rsb	r3, r3, #20
 800900a:	fa48 f103 	asr.w	r1, r8, r3
 800900e:	fa01 f303 	lsl.w	r3, r1, r3
 8009012:	4543      	cmp	r3, r8
 8009014:	f040 8469 	bne.w	80098ea <__ieee754_pow+0x9b2>
 8009018:	f001 0101 	and.w	r1, r1, #1
 800901c:	f1c1 0b02 	rsb	fp, r1, #2
 8009020:	4b4b      	ldr	r3, [pc, #300]	; (8009150 <__ieee754_pow+0x218>)
 8009022:	4598      	cmp	r8, r3
 8009024:	d118      	bne.n	8009058 <__ieee754_pow+0x120>
 8009026:	f1b9 0f00 	cmp.w	r9, #0
 800902a:	f280 845a 	bge.w	80098e2 <__ieee754_pow+0x9aa>
 800902e:	4948      	ldr	r1, [pc, #288]	; (8009150 <__ieee754_pow+0x218>)
 8009030:	4632      	mov	r2, r6
 8009032:	463b      	mov	r3, r7
 8009034:	2000      	movs	r0, #0
 8009036:	f7f7 fc11 	bl	800085c <__aeabi_ddiv>
 800903a:	e7dd      	b.n	8008ff8 <__ieee754_pow+0xc0>
 800903c:	f04f 0b02 	mov.w	fp, #2
 8009040:	e7c4      	b.n	8008fcc <__ieee754_pow+0x94>
 8009042:	f04f 0b00 	mov.w	fp, #0
 8009046:	e7c1      	b.n	8008fcc <__ieee754_pow+0x94>
 8009048:	f1b9 0f00 	cmp.w	r9, #0
 800904c:	dad2      	bge.n	8008ff4 <__ieee754_pow+0xbc>
 800904e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009052:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009056:	e7cf      	b.n	8008ff8 <__ieee754_pow+0xc0>
 8009058:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800905c:	d106      	bne.n	800906c <__ieee754_pow+0x134>
 800905e:	4632      	mov	r2, r6
 8009060:	463b      	mov	r3, r7
 8009062:	4610      	mov	r0, r2
 8009064:	4619      	mov	r1, r3
 8009066:	f7f7 facf 	bl	8000608 <__aeabi_dmul>
 800906a:	e7c5      	b.n	8008ff8 <__ieee754_pow+0xc0>
 800906c:	4b39      	ldr	r3, [pc, #228]	; (8009154 <__ieee754_pow+0x21c>)
 800906e:	4599      	cmp	r9, r3
 8009070:	d10a      	bne.n	8009088 <__ieee754_pow+0x150>
 8009072:	2d00      	cmp	r5, #0
 8009074:	db08      	blt.n	8009088 <__ieee754_pow+0x150>
 8009076:	ec47 6b10 	vmov	d0, r6, r7
 800907a:	b011      	add	sp, #68	; 0x44
 800907c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009080:	f000 bc68 	b.w	8009954 <__ieee754_sqrt>
 8009084:	f04f 0b00 	mov.w	fp, #0
 8009088:	ec47 6b10 	vmov	d0, r6, r7
 800908c:	f000 feb4 	bl	8009df8 <fabs>
 8009090:	ec51 0b10 	vmov	r0, r1, d0
 8009094:	f1ba 0f00 	cmp.w	sl, #0
 8009098:	d127      	bne.n	80090ea <__ieee754_pow+0x1b2>
 800909a:	b124      	cbz	r4, 80090a6 <__ieee754_pow+0x16e>
 800909c:	4b2c      	ldr	r3, [pc, #176]	; (8009150 <__ieee754_pow+0x218>)
 800909e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d121      	bne.n	80090ea <__ieee754_pow+0x1b2>
 80090a6:	f1b9 0f00 	cmp.w	r9, #0
 80090aa:	da05      	bge.n	80090b8 <__ieee754_pow+0x180>
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	2000      	movs	r0, #0
 80090b2:	4927      	ldr	r1, [pc, #156]	; (8009150 <__ieee754_pow+0x218>)
 80090b4:	f7f7 fbd2 	bl	800085c <__aeabi_ddiv>
 80090b8:	2d00      	cmp	r5, #0
 80090ba:	da9d      	bge.n	8008ff8 <__ieee754_pow+0xc0>
 80090bc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80090c0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80090c4:	ea54 030b 	orrs.w	r3, r4, fp
 80090c8:	d108      	bne.n	80090dc <__ieee754_pow+0x1a4>
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	4610      	mov	r0, r2
 80090d0:	4619      	mov	r1, r3
 80090d2:	f7f7 f8e1 	bl	8000298 <__aeabi_dsub>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	e7ac      	b.n	8009036 <__ieee754_pow+0xfe>
 80090dc:	f1bb 0f01 	cmp.w	fp, #1
 80090e0:	d18a      	bne.n	8008ff8 <__ieee754_pow+0xc0>
 80090e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090e6:	4619      	mov	r1, r3
 80090e8:	e786      	b.n	8008ff8 <__ieee754_pow+0xc0>
 80090ea:	0fed      	lsrs	r5, r5, #31
 80090ec:	1e6b      	subs	r3, r5, #1
 80090ee:	930d      	str	r3, [sp, #52]	; 0x34
 80090f0:	ea5b 0303 	orrs.w	r3, fp, r3
 80090f4:	d102      	bne.n	80090fc <__ieee754_pow+0x1c4>
 80090f6:	4632      	mov	r2, r6
 80090f8:	463b      	mov	r3, r7
 80090fa:	e7e8      	b.n	80090ce <__ieee754_pow+0x196>
 80090fc:	4b16      	ldr	r3, [pc, #88]	; (8009158 <__ieee754_pow+0x220>)
 80090fe:	4598      	cmp	r8, r3
 8009100:	f340 80fe 	ble.w	8009300 <__ieee754_pow+0x3c8>
 8009104:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009108:	4598      	cmp	r8, r3
 800910a:	dd0a      	ble.n	8009122 <__ieee754_pow+0x1ea>
 800910c:	4b0f      	ldr	r3, [pc, #60]	; (800914c <__ieee754_pow+0x214>)
 800910e:	429c      	cmp	r4, r3
 8009110:	dc0d      	bgt.n	800912e <__ieee754_pow+0x1f6>
 8009112:	f1b9 0f00 	cmp.w	r9, #0
 8009116:	f6bf af6d 	bge.w	8008ff4 <__ieee754_pow+0xbc>
 800911a:	a307      	add	r3, pc, #28	; (adr r3, 8009138 <__ieee754_pow+0x200>)
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	e79f      	b.n	8009062 <__ieee754_pow+0x12a>
 8009122:	4b0e      	ldr	r3, [pc, #56]	; (800915c <__ieee754_pow+0x224>)
 8009124:	429c      	cmp	r4, r3
 8009126:	ddf4      	ble.n	8009112 <__ieee754_pow+0x1da>
 8009128:	4b09      	ldr	r3, [pc, #36]	; (8009150 <__ieee754_pow+0x218>)
 800912a:	429c      	cmp	r4, r3
 800912c:	dd18      	ble.n	8009160 <__ieee754_pow+0x228>
 800912e:	f1b9 0f00 	cmp.w	r9, #0
 8009132:	dcf2      	bgt.n	800911a <__ieee754_pow+0x1e2>
 8009134:	e75e      	b.n	8008ff4 <__ieee754_pow+0xbc>
 8009136:	bf00      	nop
 8009138:	8800759c 	.word	0x8800759c
 800913c:	7e37e43c 	.word	0x7e37e43c
 8009140:	7ff00000 	.word	0x7ff00000
 8009144:	0800edd1 	.word	0x0800edd1
 8009148:	433fffff 	.word	0x433fffff
 800914c:	3fefffff 	.word	0x3fefffff
 8009150:	3ff00000 	.word	0x3ff00000
 8009154:	3fe00000 	.word	0x3fe00000
 8009158:	41e00000 	.word	0x41e00000
 800915c:	3feffffe 	.word	0x3feffffe
 8009160:	2200      	movs	r2, #0
 8009162:	4b63      	ldr	r3, [pc, #396]	; (80092f0 <__ieee754_pow+0x3b8>)
 8009164:	f7f7 f898 	bl	8000298 <__aeabi_dsub>
 8009168:	a355      	add	r3, pc, #340	; (adr r3, 80092c0 <__ieee754_pow+0x388>)
 800916a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916e:	4604      	mov	r4, r0
 8009170:	460d      	mov	r5, r1
 8009172:	f7f7 fa49 	bl	8000608 <__aeabi_dmul>
 8009176:	a354      	add	r3, pc, #336	; (adr r3, 80092c8 <__ieee754_pow+0x390>)
 8009178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917c:	4606      	mov	r6, r0
 800917e:	460f      	mov	r7, r1
 8009180:	4620      	mov	r0, r4
 8009182:	4629      	mov	r1, r5
 8009184:	f7f7 fa40 	bl	8000608 <__aeabi_dmul>
 8009188:	2200      	movs	r2, #0
 800918a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800918e:	4b59      	ldr	r3, [pc, #356]	; (80092f4 <__ieee754_pow+0x3bc>)
 8009190:	4620      	mov	r0, r4
 8009192:	4629      	mov	r1, r5
 8009194:	f7f7 fa38 	bl	8000608 <__aeabi_dmul>
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	a14c      	add	r1, pc, #304	; (adr r1, 80092d0 <__ieee754_pow+0x398>)
 800919e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091a2:	f7f7 f879 	bl	8000298 <__aeabi_dsub>
 80091a6:	4622      	mov	r2, r4
 80091a8:	462b      	mov	r3, r5
 80091aa:	f7f7 fa2d 	bl	8000608 <__aeabi_dmul>
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	2000      	movs	r0, #0
 80091b4:	4950      	ldr	r1, [pc, #320]	; (80092f8 <__ieee754_pow+0x3c0>)
 80091b6:	f7f7 f86f 	bl	8000298 <__aeabi_dsub>
 80091ba:	4622      	mov	r2, r4
 80091bc:	462b      	mov	r3, r5
 80091be:	4680      	mov	r8, r0
 80091c0:	4689      	mov	r9, r1
 80091c2:	4620      	mov	r0, r4
 80091c4:	4629      	mov	r1, r5
 80091c6:	f7f7 fa1f 	bl	8000608 <__aeabi_dmul>
 80091ca:	4602      	mov	r2, r0
 80091cc:	460b      	mov	r3, r1
 80091ce:	4640      	mov	r0, r8
 80091d0:	4649      	mov	r1, r9
 80091d2:	f7f7 fa19 	bl	8000608 <__aeabi_dmul>
 80091d6:	a340      	add	r3, pc, #256	; (adr r3, 80092d8 <__ieee754_pow+0x3a0>)
 80091d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091dc:	f7f7 fa14 	bl	8000608 <__aeabi_dmul>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091e8:	f7f7 f856 	bl	8000298 <__aeabi_dsub>
 80091ec:	4602      	mov	r2, r0
 80091ee:	460b      	mov	r3, r1
 80091f0:	4604      	mov	r4, r0
 80091f2:	460d      	mov	r5, r1
 80091f4:	4630      	mov	r0, r6
 80091f6:	4639      	mov	r1, r7
 80091f8:	f7f7 f850 	bl	800029c <__adddf3>
 80091fc:	2000      	movs	r0, #0
 80091fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009202:	4632      	mov	r2, r6
 8009204:	463b      	mov	r3, r7
 8009206:	f7f7 f847 	bl	8000298 <__aeabi_dsub>
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	4620      	mov	r0, r4
 8009210:	4629      	mov	r1, r5
 8009212:	f7f7 f841 	bl	8000298 <__aeabi_dsub>
 8009216:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009218:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800921c:	4313      	orrs	r3, r2
 800921e:	4606      	mov	r6, r0
 8009220:	460f      	mov	r7, r1
 8009222:	f040 81eb 	bne.w	80095fc <__ieee754_pow+0x6c4>
 8009226:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80092e0 <__ieee754_pow+0x3a8>
 800922a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800922e:	2400      	movs	r4, #0
 8009230:	4622      	mov	r2, r4
 8009232:	462b      	mov	r3, r5
 8009234:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009238:	ed8d 7b02 	vstr	d7, [sp, #8]
 800923c:	f7f7 f82c 	bl	8000298 <__aeabi_dsub>
 8009240:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009244:	f7f7 f9e0 	bl	8000608 <__aeabi_dmul>
 8009248:	e9dd 2300 	ldrd	r2, r3, [sp]
 800924c:	4680      	mov	r8, r0
 800924e:	4689      	mov	r9, r1
 8009250:	4630      	mov	r0, r6
 8009252:	4639      	mov	r1, r7
 8009254:	f7f7 f9d8 	bl	8000608 <__aeabi_dmul>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	4640      	mov	r0, r8
 800925e:	4649      	mov	r1, r9
 8009260:	f7f7 f81c 	bl	800029c <__adddf3>
 8009264:	4622      	mov	r2, r4
 8009266:	462b      	mov	r3, r5
 8009268:	4680      	mov	r8, r0
 800926a:	4689      	mov	r9, r1
 800926c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009270:	f7f7 f9ca 	bl	8000608 <__aeabi_dmul>
 8009274:	460b      	mov	r3, r1
 8009276:	4604      	mov	r4, r0
 8009278:	460d      	mov	r5, r1
 800927a:	4602      	mov	r2, r0
 800927c:	4649      	mov	r1, r9
 800927e:	4640      	mov	r0, r8
 8009280:	e9cd 4500 	strd	r4, r5, [sp]
 8009284:	f7f7 f80a 	bl	800029c <__adddf3>
 8009288:	4b1c      	ldr	r3, [pc, #112]	; (80092fc <__ieee754_pow+0x3c4>)
 800928a:	4299      	cmp	r1, r3
 800928c:	4606      	mov	r6, r0
 800928e:	460f      	mov	r7, r1
 8009290:	468b      	mov	fp, r1
 8009292:	f340 82f7 	ble.w	8009884 <__ieee754_pow+0x94c>
 8009296:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800929a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800929e:	4303      	orrs	r3, r0
 80092a0:	f000 81ea 	beq.w	8009678 <__ieee754_pow+0x740>
 80092a4:	a310      	add	r3, pc, #64	; (adr r3, 80092e8 <__ieee754_pow+0x3b0>)
 80092a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092ae:	f7f7 f9ab 	bl	8000608 <__aeabi_dmul>
 80092b2:	a30d      	add	r3, pc, #52	; (adr r3, 80092e8 <__ieee754_pow+0x3b0>)
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	e6d5      	b.n	8009066 <__ieee754_pow+0x12e>
 80092ba:	bf00      	nop
 80092bc:	f3af 8000 	nop.w
 80092c0:	60000000 	.word	0x60000000
 80092c4:	3ff71547 	.word	0x3ff71547
 80092c8:	f85ddf44 	.word	0xf85ddf44
 80092cc:	3e54ae0b 	.word	0x3e54ae0b
 80092d0:	55555555 	.word	0x55555555
 80092d4:	3fd55555 	.word	0x3fd55555
 80092d8:	652b82fe 	.word	0x652b82fe
 80092dc:	3ff71547 	.word	0x3ff71547
 80092e0:	00000000 	.word	0x00000000
 80092e4:	bff00000 	.word	0xbff00000
 80092e8:	8800759c 	.word	0x8800759c
 80092ec:	7e37e43c 	.word	0x7e37e43c
 80092f0:	3ff00000 	.word	0x3ff00000
 80092f4:	3fd00000 	.word	0x3fd00000
 80092f8:	3fe00000 	.word	0x3fe00000
 80092fc:	408fffff 	.word	0x408fffff
 8009300:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009304:	f04f 0200 	mov.w	r2, #0
 8009308:	da05      	bge.n	8009316 <__ieee754_pow+0x3de>
 800930a:	4bd3      	ldr	r3, [pc, #844]	; (8009658 <__ieee754_pow+0x720>)
 800930c:	f7f7 f97c 	bl	8000608 <__aeabi_dmul>
 8009310:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009314:	460c      	mov	r4, r1
 8009316:	1523      	asrs	r3, r4, #20
 8009318:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800931c:	4413      	add	r3, r2
 800931e:	9309      	str	r3, [sp, #36]	; 0x24
 8009320:	4bce      	ldr	r3, [pc, #824]	; (800965c <__ieee754_pow+0x724>)
 8009322:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009326:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800932a:	429c      	cmp	r4, r3
 800932c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009330:	dd08      	ble.n	8009344 <__ieee754_pow+0x40c>
 8009332:	4bcb      	ldr	r3, [pc, #812]	; (8009660 <__ieee754_pow+0x728>)
 8009334:	429c      	cmp	r4, r3
 8009336:	f340 815e 	ble.w	80095f6 <__ieee754_pow+0x6be>
 800933a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800933c:	3301      	adds	r3, #1
 800933e:	9309      	str	r3, [sp, #36]	; 0x24
 8009340:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009344:	f04f 0a00 	mov.w	sl, #0
 8009348:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800934c:	930c      	str	r3, [sp, #48]	; 0x30
 800934e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009350:	4bc4      	ldr	r3, [pc, #784]	; (8009664 <__ieee754_pow+0x72c>)
 8009352:	4413      	add	r3, r2
 8009354:	ed93 7b00 	vldr	d7, [r3]
 8009358:	4629      	mov	r1, r5
 800935a:	ec53 2b17 	vmov	r2, r3, d7
 800935e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009362:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009366:	f7f6 ff97 	bl	8000298 <__aeabi_dsub>
 800936a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800936e:	4606      	mov	r6, r0
 8009370:	460f      	mov	r7, r1
 8009372:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009376:	f7f6 ff91 	bl	800029c <__adddf3>
 800937a:	4602      	mov	r2, r0
 800937c:	460b      	mov	r3, r1
 800937e:	2000      	movs	r0, #0
 8009380:	49b9      	ldr	r1, [pc, #740]	; (8009668 <__ieee754_pow+0x730>)
 8009382:	f7f7 fa6b 	bl	800085c <__aeabi_ddiv>
 8009386:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	4630      	mov	r0, r6
 8009390:	4639      	mov	r1, r7
 8009392:	f7f7 f939 	bl	8000608 <__aeabi_dmul>
 8009396:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800939a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800939e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80093a2:	2300      	movs	r3, #0
 80093a4:	9302      	str	r3, [sp, #8]
 80093a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80093aa:	106d      	asrs	r5, r5, #1
 80093ac:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80093b0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80093b4:	2200      	movs	r2, #0
 80093b6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80093ba:	4640      	mov	r0, r8
 80093bc:	4649      	mov	r1, r9
 80093be:	4614      	mov	r4, r2
 80093c0:	461d      	mov	r5, r3
 80093c2:	f7f7 f921 	bl	8000608 <__aeabi_dmul>
 80093c6:	4602      	mov	r2, r0
 80093c8:	460b      	mov	r3, r1
 80093ca:	4630      	mov	r0, r6
 80093cc:	4639      	mov	r1, r7
 80093ce:	f7f6 ff63 	bl	8000298 <__aeabi_dsub>
 80093d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093d6:	4606      	mov	r6, r0
 80093d8:	460f      	mov	r7, r1
 80093da:	4620      	mov	r0, r4
 80093dc:	4629      	mov	r1, r5
 80093de:	f7f6 ff5b 	bl	8000298 <__aeabi_dsub>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093ea:	f7f6 ff55 	bl	8000298 <__aeabi_dsub>
 80093ee:	4642      	mov	r2, r8
 80093f0:	464b      	mov	r3, r9
 80093f2:	f7f7 f909 	bl	8000608 <__aeabi_dmul>
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	4630      	mov	r0, r6
 80093fc:	4639      	mov	r1, r7
 80093fe:	f7f6 ff4b 	bl	8000298 <__aeabi_dsub>
 8009402:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009406:	f7f7 f8ff 	bl	8000608 <__aeabi_dmul>
 800940a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800940e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009412:	4610      	mov	r0, r2
 8009414:	4619      	mov	r1, r3
 8009416:	f7f7 f8f7 	bl	8000608 <__aeabi_dmul>
 800941a:	a37b      	add	r3, pc, #492	; (adr r3, 8009608 <__ieee754_pow+0x6d0>)
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	4604      	mov	r4, r0
 8009422:	460d      	mov	r5, r1
 8009424:	f7f7 f8f0 	bl	8000608 <__aeabi_dmul>
 8009428:	a379      	add	r3, pc, #484	; (adr r3, 8009610 <__ieee754_pow+0x6d8>)
 800942a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942e:	f7f6 ff35 	bl	800029c <__adddf3>
 8009432:	4622      	mov	r2, r4
 8009434:	462b      	mov	r3, r5
 8009436:	f7f7 f8e7 	bl	8000608 <__aeabi_dmul>
 800943a:	a377      	add	r3, pc, #476	; (adr r3, 8009618 <__ieee754_pow+0x6e0>)
 800943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009440:	f7f6 ff2c 	bl	800029c <__adddf3>
 8009444:	4622      	mov	r2, r4
 8009446:	462b      	mov	r3, r5
 8009448:	f7f7 f8de 	bl	8000608 <__aeabi_dmul>
 800944c:	a374      	add	r3, pc, #464	; (adr r3, 8009620 <__ieee754_pow+0x6e8>)
 800944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009452:	f7f6 ff23 	bl	800029c <__adddf3>
 8009456:	4622      	mov	r2, r4
 8009458:	462b      	mov	r3, r5
 800945a:	f7f7 f8d5 	bl	8000608 <__aeabi_dmul>
 800945e:	a372      	add	r3, pc, #456	; (adr r3, 8009628 <__ieee754_pow+0x6f0>)
 8009460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009464:	f7f6 ff1a 	bl	800029c <__adddf3>
 8009468:	4622      	mov	r2, r4
 800946a:	462b      	mov	r3, r5
 800946c:	f7f7 f8cc 	bl	8000608 <__aeabi_dmul>
 8009470:	a36f      	add	r3, pc, #444	; (adr r3, 8009630 <__ieee754_pow+0x6f8>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f7f6 ff11 	bl	800029c <__adddf3>
 800947a:	4622      	mov	r2, r4
 800947c:	4606      	mov	r6, r0
 800947e:	460f      	mov	r7, r1
 8009480:	462b      	mov	r3, r5
 8009482:	4620      	mov	r0, r4
 8009484:	4629      	mov	r1, r5
 8009486:	f7f7 f8bf 	bl	8000608 <__aeabi_dmul>
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	4630      	mov	r0, r6
 8009490:	4639      	mov	r1, r7
 8009492:	f7f7 f8b9 	bl	8000608 <__aeabi_dmul>
 8009496:	4642      	mov	r2, r8
 8009498:	4604      	mov	r4, r0
 800949a:	460d      	mov	r5, r1
 800949c:	464b      	mov	r3, r9
 800949e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094a2:	f7f6 fefb 	bl	800029c <__adddf3>
 80094a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094aa:	f7f7 f8ad 	bl	8000608 <__aeabi_dmul>
 80094ae:	4622      	mov	r2, r4
 80094b0:	462b      	mov	r3, r5
 80094b2:	f7f6 fef3 	bl	800029c <__adddf3>
 80094b6:	4642      	mov	r2, r8
 80094b8:	4606      	mov	r6, r0
 80094ba:	460f      	mov	r7, r1
 80094bc:	464b      	mov	r3, r9
 80094be:	4640      	mov	r0, r8
 80094c0:	4649      	mov	r1, r9
 80094c2:	f7f7 f8a1 	bl	8000608 <__aeabi_dmul>
 80094c6:	2200      	movs	r2, #0
 80094c8:	4b68      	ldr	r3, [pc, #416]	; (800966c <__ieee754_pow+0x734>)
 80094ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80094ce:	f7f6 fee5 	bl	800029c <__adddf3>
 80094d2:	4632      	mov	r2, r6
 80094d4:	463b      	mov	r3, r7
 80094d6:	f7f6 fee1 	bl	800029c <__adddf3>
 80094da:	9802      	ldr	r0, [sp, #8]
 80094dc:	460d      	mov	r5, r1
 80094de:	4604      	mov	r4, r0
 80094e0:	4602      	mov	r2, r0
 80094e2:	460b      	mov	r3, r1
 80094e4:	4640      	mov	r0, r8
 80094e6:	4649      	mov	r1, r9
 80094e8:	f7f7 f88e 	bl	8000608 <__aeabi_dmul>
 80094ec:	2200      	movs	r2, #0
 80094ee:	4680      	mov	r8, r0
 80094f0:	4689      	mov	r9, r1
 80094f2:	4b5e      	ldr	r3, [pc, #376]	; (800966c <__ieee754_pow+0x734>)
 80094f4:	4620      	mov	r0, r4
 80094f6:	4629      	mov	r1, r5
 80094f8:	f7f6 fece 	bl	8000298 <__aeabi_dsub>
 80094fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009500:	f7f6 feca 	bl	8000298 <__aeabi_dsub>
 8009504:	4602      	mov	r2, r0
 8009506:	460b      	mov	r3, r1
 8009508:	4630      	mov	r0, r6
 800950a:	4639      	mov	r1, r7
 800950c:	f7f6 fec4 	bl	8000298 <__aeabi_dsub>
 8009510:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009514:	f7f7 f878 	bl	8000608 <__aeabi_dmul>
 8009518:	4622      	mov	r2, r4
 800951a:	4606      	mov	r6, r0
 800951c:	460f      	mov	r7, r1
 800951e:	462b      	mov	r3, r5
 8009520:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009524:	f7f7 f870 	bl	8000608 <__aeabi_dmul>
 8009528:	4602      	mov	r2, r0
 800952a:	460b      	mov	r3, r1
 800952c:	4630      	mov	r0, r6
 800952e:	4639      	mov	r1, r7
 8009530:	f7f6 feb4 	bl	800029c <__adddf3>
 8009534:	4606      	mov	r6, r0
 8009536:	460f      	mov	r7, r1
 8009538:	4602      	mov	r2, r0
 800953a:	460b      	mov	r3, r1
 800953c:	4640      	mov	r0, r8
 800953e:	4649      	mov	r1, r9
 8009540:	f7f6 feac 	bl	800029c <__adddf3>
 8009544:	9802      	ldr	r0, [sp, #8]
 8009546:	a33c      	add	r3, pc, #240	; (adr r3, 8009638 <__ieee754_pow+0x700>)
 8009548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954c:	4604      	mov	r4, r0
 800954e:	460d      	mov	r5, r1
 8009550:	f7f7 f85a 	bl	8000608 <__aeabi_dmul>
 8009554:	4642      	mov	r2, r8
 8009556:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800955a:	464b      	mov	r3, r9
 800955c:	4620      	mov	r0, r4
 800955e:	4629      	mov	r1, r5
 8009560:	f7f6 fe9a 	bl	8000298 <__aeabi_dsub>
 8009564:	4602      	mov	r2, r0
 8009566:	460b      	mov	r3, r1
 8009568:	4630      	mov	r0, r6
 800956a:	4639      	mov	r1, r7
 800956c:	f7f6 fe94 	bl	8000298 <__aeabi_dsub>
 8009570:	a333      	add	r3, pc, #204	; (adr r3, 8009640 <__ieee754_pow+0x708>)
 8009572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009576:	f7f7 f847 	bl	8000608 <__aeabi_dmul>
 800957a:	a333      	add	r3, pc, #204	; (adr r3, 8009648 <__ieee754_pow+0x710>)
 800957c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009580:	4606      	mov	r6, r0
 8009582:	460f      	mov	r7, r1
 8009584:	4620      	mov	r0, r4
 8009586:	4629      	mov	r1, r5
 8009588:	f7f7 f83e 	bl	8000608 <__aeabi_dmul>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	4630      	mov	r0, r6
 8009592:	4639      	mov	r1, r7
 8009594:	f7f6 fe82 	bl	800029c <__adddf3>
 8009598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800959a:	4b35      	ldr	r3, [pc, #212]	; (8009670 <__ieee754_pow+0x738>)
 800959c:	4413      	add	r3, r2
 800959e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a2:	f7f6 fe7b 	bl	800029c <__adddf3>
 80095a6:	4604      	mov	r4, r0
 80095a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095aa:	460d      	mov	r5, r1
 80095ac:	f7f6 ffc2 	bl	8000534 <__aeabi_i2d>
 80095b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095b2:	4b30      	ldr	r3, [pc, #192]	; (8009674 <__ieee754_pow+0x73c>)
 80095b4:	4413      	add	r3, r2
 80095b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80095ba:	4606      	mov	r6, r0
 80095bc:	460f      	mov	r7, r1
 80095be:	4622      	mov	r2, r4
 80095c0:	462b      	mov	r3, r5
 80095c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095c6:	f7f6 fe69 	bl	800029c <__adddf3>
 80095ca:	4642      	mov	r2, r8
 80095cc:	464b      	mov	r3, r9
 80095ce:	f7f6 fe65 	bl	800029c <__adddf3>
 80095d2:	4632      	mov	r2, r6
 80095d4:	463b      	mov	r3, r7
 80095d6:	f7f6 fe61 	bl	800029c <__adddf3>
 80095da:	9802      	ldr	r0, [sp, #8]
 80095dc:	4632      	mov	r2, r6
 80095de:	463b      	mov	r3, r7
 80095e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095e4:	f7f6 fe58 	bl	8000298 <__aeabi_dsub>
 80095e8:	4642      	mov	r2, r8
 80095ea:	464b      	mov	r3, r9
 80095ec:	f7f6 fe54 	bl	8000298 <__aeabi_dsub>
 80095f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095f4:	e607      	b.n	8009206 <__ieee754_pow+0x2ce>
 80095f6:	f04f 0a01 	mov.w	sl, #1
 80095fa:	e6a5      	b.n	8009348 <__ieee754_pow+0x410>
 80095fc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009650 <__ieee754_pow+0x718>
 8009600:	e613      	b.n	800922a <__ieee754_pow+0x2f2>
 8009602:	bf00      	nop
 8009604:	f3af 8000 	nop.w
 8009608:	4a454eef 	.word	0x4a454eef
 800960c:	3fca7e28 	.word	0x3fca7e28
 8009610:	93c9db65 	.word	0x93c9db65
 8009614:	3fcd864a 	.word	0x3fcd864a
 8009618:	a91d4101 	.word	0xa91d4101
 800961c:	3fd17460 	.word	0x3fd17460
 8009620:	518f264d 	.word	0x518f264d
 8009624:	3fd55555 	.word	0x3fd55555
 8009628:	db6fabff 	.word	0xdb6fabff
 800962c:	3fdb6db6 	.word	0x3fdb6db6
 8009630:	33333303 	.word	0x33333303
 8009634:	3fe33333 	.word	0x3fe33333
 8009638:	e0000000 	.word	0xe0000000
 800963c:	3feec709 	.word	0x3feec709
 8009640:	dc3a03fd 	.word	0xdc3a03fd
 8009644:	3feec709 	.word	0x3feec709
 8009648:	145b01f5 	.word	0x145b01f5
 800964c:	be3e2fe0 	.word	0xbe3e2fe0
 8009650:	00000000 	.word	0x00000000
 8009654:	3ff00000 	.word	0x3ff00000
 8009658:	43400000 	.word	0x43400000
 800965c:	0003988e 	.word	0x0003988e
 8009660:	000bb679 	.word	0x000bb679
 8009664:	0800ea48 	.word	0x0800ea48
 8009668:	3ff00000 	.word	0x3ff00000
 800966c:	40080000 	.word	0x40080000
 8009670:	0800ea68 	.word	0x0800ea68
 8009674:	0800ea58 	.word	0x0800ea58
 8009678:	a3b4      	add	r3, pc, #720	; (adr r3, 800994c <__ieee754_pow+0xa14>)
 800967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967e:	4640      	mov	r0, r8
 8009680:	4649      	mov	r1, r9
 8009682:	f7f6 fe0b 	bl	800029c <__adddf3>
 8009686:	4622      	mov	r2, r4
 8009688:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800968c:	462b      	mov	r3, r5
 800968e:	4630      	mov	r0, r6
 8009690:	4639      	mov	r1, r7
 8009692:	f7f6 fe01 	bl	8000298 <__aeabi_dsub>
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800969e:	f7f7 fa43 	bl	8000b28 <__aeabi_dcmpgt>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	f47f adfe 	bne.w	80092a4 <__ieee754_pow+0x36c>
 80096a8:	4aa3      	ldr	r2, [pc, #652]	; (8009938 <__ieee754_pow+0xa00>)
 80096aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80096ae:	4293      	cmp	r3, r2
 80096b0:	f340 810a 	ble.w	80098c8 <__ieee754_pow+0x990>
 80096b4:	151b      	asrs	r3, r3, #20
 80096b6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80096ba:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80096be:	fa4a f303 	asr.w	r3, sl, r3
 80096c2:	445b      	add	r3, fp
 80096c4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80096c8:	4e9c      	ldr	r6, [pc, #624]	; (800993c <__ieee754_pow+0xa04>)
 80096ca:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80096ce:	4116      	asrs	r6, r2
 80096d0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80096d4:	2000      	movs	r0, #0
 80096d6:	ea23 0106 	bic.w	r1, r3, r6
 80096da:	f1c2 0214 	rsb	r2, r2, #20
 80096de:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80096e2:	fa4a fa02 	asr.w	sl, sl, r2
 80096e6:	f1bb 0f00 	cmp.w	fp, #0
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	4620      	mov	r0, r4
 80096f0:	4629      	mov	r1, r5
 80096f2:	bfb8      	it	lt
 80096f4:	f1ca 0a00 	rsblt	sl, sl, #0
 80096f8:	f7f6 fdce 	bl	8000298 <__aeabi_dsub>
 80096fc:	e9cd 0100 	strd	r0, r1, [sp]
 8009700:	4642      	mov	r2, r8
 8009702:	464b      	mov	r3, r9
 8009704:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009708:	f7f6 fdc8 	bl	800029c <__adddf3>
 800970c:	2000      	movs	r0, #0
 800970e:	a378      	add	r3, pc, #480	; (adr r3, 80098f0 <__ieee754_pow+0x9b8>)
 8009710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009714:	4604      	mov	r4, r0
 8009716:	460d      	mov	r5, r1
 8009718:	f7f6 ff76 	bl	8000608 <__aeabi_dmul>
 800971c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009720:	4606      	mov	r6, r0
 8009722:	460f      	mov	r7, r1
 8009724:	4620      	mov	r0, r4
 8009726:	4629      	mov	r1, r5
 8009728:	f7f6 fdb6 	bl	8000298 <__aeabi_dsub>
 800972c:	4602      	mov	r2, r0
 800972e:	460b      	mov	r3, r1
 8009730:	4640      	mov	r0, r8
 8009732:	4649      	mov	r1, r9
 8009734:	f7f6 fdb0 	bl	8000298 <__aeabi_dsub>
 8009738:	a36f      	add	r3, pc, #444	; (adr r3, 80098f8 <__ieee754_pow+0x9c0>)
 800973a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973e:	f7f6 ff63 	bl	8000608 <__aeabi_dmul>
 8009742:	a36f      	add	r3, pc, #444	; (adr r3, 8009900 <__ieee754_pow+0x9c8>)
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	4680      	mov	r8, r0
 800974a:	4689      	mov	r9, r1
 800974c:	4620      	mov	r0, r4
 800974e:	4629      	mov	r1, r5
 8009750:	f7f6 ff5a 	bl	8000608 <__aeabi_dmul>
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	4640      	mov	r0, r8
 800975a:	4649      	mov	r1, r9
 800975c:	f7f6 fd9e 	bl	800029c <__adddf3>
 8009760:	4604      	mov	r4, r0
 8009762:	460d      	mov	r5, r1
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	4630      	mov	r0, r6
 800976a:	4639      	mov	r1, r7
 800976c:	f7f6 fd96 	bl	800029c <__adddf3>
 8009770:	4632      	mov	r2, r6
 8009772:	463b      	mov	r3, r7
 8009774:	4680      	mov	r8, r0
 8009776:	4689      	mov	r9, r1
 8009778:	f7f6 fd8e 	bl	8000298 <__aeabi_dsub>
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	4620      	mov	r0, r4
 8009782:	4629      	mov	r1, r5
 8009784:	f7f6 fd88 	bl	8000298 <__aeabi_dsub>
 8009788:	4642      	mov	r2, r8
 800978a:	4606      	mov	r6, r0
 800978c:	460f      	mov	r7, r1
 800978e:	464b      	mov	r3, r9
 8009790:	4640      	mov	r0, r8
 8009792:	4649      	mov	r1, r9
 8009794:	f7f6 ff38 	bl	8000608 <__aeabi_dmul>
 8009798:	a35b      	add	r3, pc, #364	; (adr r3, 8009908 <__ieee754_pow+0x9d0>)
 800979a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979e:	4604      	mov	r4, r0
 80097a0:	460d      	mov	r5, r1
 80097a2:	f7f6 ff31 	bl	8000608 <__aeabi_dmul>
 80097a6:	a35a      	add	r3, pc, #360	; (adr r3, 8009910 <__ieee754_pow+0x9d8>)
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	f7f6 fd74 	bl	8000298 <__aeabi_dsub>
 80097b0:	4622      	mov	r2, r4
 80097b2:	462b      	mov	r3, r5
 80097b4:	f7f6 ff28 	bl	8000608 <__aeabi_dmul>
 80097b8:	a357      	add	r3, pc, #348	; (adr r3, 8009918 <__ieee754_pow+0x9e0>)
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	f7f6 fd6d 	bl	800029c <__adddf3>
 80097c2:	4622      	mov	r2, r4
 80097c4:	462b      	mov	r3, r5
 80097c6:	f7f6 ff1f 	bl	8000608 <__aeabi_dmul>
 80097ca:	a355      	add	r3, pc, #340	; (adr r3, 8009920 <__ieee754_pow+0x9e8>)
 80097cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d0:	f7f6 fd62 	bl	8000298 <__aeabi_dsub>
 80097d4:	4622      	mov	r2, r4
 80097d6:	462b      	mov	r3, r5
 80097d8:	f7f6 ff16 	bl	8000608 <__aeabi_dmul>
 80097dc:	a352      	add	r3, pc, #328	; (adr r3, 8009928 <__ieee754_pow+0x9f0>)
 80097de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e2:	f7f6 fd5b 	bl	800029c <__adddf3>
 80097e6:	4622      	mov	r2, r4
 80097e8:	462b      	mov	r3, r5
 80097ea:	f7f6 ff0d 	bl	8000608 <__aeabi_dmul>
 80097ee:	4602      	mov	r2, r0
 80097f0:	460b      	mov	r3, r1
 80097f2:	4640      	mov	r0, r8
 80097f4:	4649      	mov	r1, r9
 80097f6:	f7f6 fd4f 	bl	8000298 <__aeabi_dsub>
 80097fa:	4604      	mov	r4, r0
 80097fc:	460d      	mov	r5, r1
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	4640      	mov	r0, r8
 8009804:	4649      	mov	r1, r9
 8009806:	f7f6 feff 	bl	8000608 <__aeabi_dmul>
 800980a:	2200      	movs	r2, #0
 800980c:	e9cd 0100 	strd	r0, r1, [sp]
 8009810:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009814:	4620      	mov	r0, r4
 8009816:	4629      	mov	r1, r5
 8009818:	f7f6 fd3e 	bl	8000298 <__aeabi_dsub>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009824:	f7f7 f81a 	bl	800085c <__aeabi_ddiv>
 8009828:	4632      	mov	r2, r6
 800982a:	4604      	mov	r4, r0
 800982c:	460d      	mov	r5, r1
 800982e:	463b      	mov	r3, r7
 8009830:	4640      	mov	r0, r8
 8009832:	4649      	mov	r1, r9
 8009834:	f7f6 fee8 	bl	8000608 <__aeabi_dmul>
 8009838:	4632      	mov	r2, r6
 800983a:	463b      	mov	r3, r7
 800983c:	f7f6 fd2e 	bl	800029c <__adddf3>
 8009840:	4602      	mov	r2, r0
 8009842:	460b      	mov	r3, r1
 8009844:	4620      	mov	r0, r4
 8009846:	4629      	mov	r1, r5
 8009848:	f7f6 fd26 	bl	8000298 <__aeabi_dsub>
 800984c:	4642      	mov	r2, r8
 800984e:	464b      	mov	r3, r9
 8009850:	f7f6 fd22 	bl	8000298 <__aeabi_dsub>
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	2000      	movs	r0, #0
 800985a:	4939      	ldr	r1, [pc, #228]	; (8009940 <__ieee754_pow+0xa08>)
 800985c:	f7f6 fd1c 	bl	8000298 <__aeabi_dsub>
 8009860:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009864:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009868:	4602      	mov	r2, r0
 800986a:	460b      	mov	r3, r1
 800986c:	da2f      	bge.n	80098ce <__ieee754_pow+0x996>
 800986e:	4650      	mov	r0, sl
 8009870:	ec43 2b10 	vmov	d0, r2, r3
 8009874:	f000 fb60 	bl	8009f38 <scalbn>
 8009878:	ec51 0b10 	vmov	r0, r1, d0
 800987c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009880:	f7ff bbf1 	b.w	8009066 <__ieee754_pow+0x12e>
 8009884:	4b2f      	ldr	r3, [pc, #188]	; (8009944 <__ieee754_pow+0xa0c>)
 8009886:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800988a:	429e      	cmp	r6, r3
 800988c:	f77f af0c 	ble.w	80096a8 <__ieee754_pow+0x770>
 8009890:	4b2d      	ldr	r3, [pc, #180]	; (8009948 <__ieee754_pow+0xa10>)
 8009892:	440b      	add	r3, r1
 8009894:	4303      	orrs	r3, r0
 8009896:	d00b      	beq.n	80098b0 <__ieee754_pow+0x978>
 8009898:	a325      	add	r3, pc, #148	; (adr r3, 8009930 <__ieee754_pow+0x9f8>)
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098a2:	f7f6 feb1 	bl	8000608 <__aeabi_dmul>
 80098a6:	a322      	add	r3, pc, #136	; (adr r3, 8009930 <__ieee754_pow+0x9f8>)
 80098a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ac:	f7ff bbdb 	b.w	8009066 <__ieee754_pow+0x12e>
 80098b0:	4622      	mov	r2, r4
 80098b2:	462b      	mov	r3, r5
 80098b4:	f7f6 fcf0 	bl	8000298 <__aeabi_dsub>
 80098b8:	4642      	mov	r2, r8
 80098ba:	464b      	mov	r3, r9
 80098bc:	f7f7 f92a 	bl	8000b14 <__aeabi_dcmpge>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	f43f aef1 	beq.w	80096a8 <__ieee754_pow+0x770>
 80098c6:	e7e7      	b.n	8009898 <__ieee754_pow+0x960>
 80098c8:	f04f 0a00 	mov.w	sl, #0
 80098cc:	e718      	b.n	8009700 <__ieee754_pow+0x7c8>
 80098ce:	4621      	mov	r1, r4
 80098d0:	e7d4      	b.n	800987c <__ieee754_pow+0x944>
 80098d2:	2000      	movs	r0, #0
 80098d4:	491a      	ldr	r1, [pc, #104]	; (8009940 <__ieee754_pow+0xa08>)
 80098d6:	f7ff bb8f 	b.w	8008ff8 <__ieee754_pow+0xc0>
 80098da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098de:	f7ff bb8b 	b.w	8008ff8 <__ieee754_pow+0xc0>
 80098e2:	4630      	mov	r0, r6
 80098e4:	4639      	mov	r1, r7
 80098e6:	f7ff bb87 	b.w	8008ff8 <__ieee754_pow+0xc0>
 80098ea:	4693      	mov	fp, r2
 80098ec:	f7ff bb98 	b.w	8009020 <__ieee754_pow+0xe8>
 80098f0:	00000000 	.word	0x00000000
 80098f4:	3fe62e43 	.word	0x3fe62e43
 80098f8:	fefa39ef 	.word	0xfefa39ef
 80098fc:	3fe62e42 	.word	0x3fe62e42
 8009900:	0ca86c39 	.word	0x0ca86c39
 8009904:	be205c61 	.word	0xbe205c61
 8009908:	72bea4d0 	.word	0x72bea4d0
 800990c:	3e663769 	.word	0x3e663769
 8009910:	c5d26bf1 	.word	0xc5d26bf1
 8009914:	3ebbbd41 	.word	0x3ebbbd41
 8009918:	af25de2c 	.word	0xaf25de2c
 800991c:	3f11566a 	.word	0x3f11566a
 8009920:	16bebd93 	.word	0x16bebd93
 8009924:	3f66c16c 	.word	0x3f66c16c
 8009928:	5555553e 	.word	0x5555553e
 800992c:	3fc55555 	.word	0x3fc55555
 8009930:	c2f8f359 	.word	0xc2f8f359
 8009934:	01a56e1f 	.word	0x01a56e1f
 8009938:	3fe00000 	.word	0x3fe00000
 800993c:	000fffff 	.word	0x000fffff
 8009940:	3ff00000 	.word	0x3ff00000
 8009944:	4090cbff 	.word	0x4090cbff
 8009948:	3f6f3400 	.word	0x3f6f3400
 800994c:	652b82fe 	.word	0x652b82fe
 8009950:	3c971547 	.word	0x3c971547

08009954 <__ieee754_sqrt>:
 8009954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009958:	4955      	ldr	r1, [pc, #340]	; (8009ab0 <__ieee754_sqrt+0x15c>)
 800995a:	ec55 4b10 	vmov	r4, r5, d0
 800995e:	43a9      	bics	r1, r5
 8009960:	462b      	mov	r3, r5
 8009962:	462a      	mov	r2, r5
 8009964:	d112      	bne.n	800998c <__ieee754_sqrt+0x38>
 8009966:	ee10 2a10 	vmov	r2, s0
 800996a:	ee10 0a10 	vmov	r0, s0
 800996e:	4629      	mov	r1, r5
 8009970:	f7f6 fe4a 	bl	8000608 <__aeabi_dmul>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	4620      	mov	r0, r4
 800997a:	4629      	mov	r1, r5
 800997c:	f7f6 fc8e 	bl	800029c <__adddf3>
 8009980:	4604      	mov	r4, r0
 8009982:	460d      	mov	r5, r1
 8009984:	ec45 4b10 	vmov	d0, r4, r5
 8009988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800998c:	2d00      	cmp	r5, #0
 800998e:	ee10 0a10 	vmov	r0, s0
 8009992:	4621      	mov	r1, r4
 8009994:	dc0f      	bgt.n	80099b6 <__ieee754_sqrt+0x62>
 8009996:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800999a:	4330      	orrs	r0, r6
 800999c:	d0f2      	beq.n	8009984 <__ieee754_sqrt+0x30>
 800999e:	b155      	cbz	r5, 80099b6 <__ieee754_sqrt+0x62>
 80099a0:	ee10 2a10 	vmov	r2, s0
 80099a4:	4620      	mov	r0, r4
 80099a6:	4629      	mov	r1, r5
 80099a8:	f7f6 fc76 	bl	8000298 <__aeabi_dsub>
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	f7f6 ff54 	bl	800085c <__aeabi_ddiv>
 80099b4:	e7e4      	b.n	8009980 <__ieee754_sqrt+0x2c>
 80099b6:	151b      	asrs	r3, r3, #20
 80099b8:	d073      	beq.n	8009aa2 <__ieee754_sqrt+0x14e>
 80099ba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80099be:	07dd      	lsls	r5, r3, #31
 80099c0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80099c4:	bf48      	it	mi
 80099c6:	0fc8      	lsrmi	r0, r1, #31
 80099c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80099cc:	bf44      	itt	mi
 80099ce:	0049      	lslmi	r1, r1, #1
 80099d0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80099d4:	2500      	movs	r5, #0
 80099d6:	1058      	asrs	r0, r3, #1
 80099d8:	0fcb      	lsrs	r3, r1, #31
 80099da:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80099de:	0049      	lsls	r1, r1, #1
 80099e0:	2316      	movs	r3, #22
 80099e2:	462c      	mov	r4, r5
 80099e4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80099e8:	19a7      	adds	r7, r4, r6
 80099ea:	4297      	cmp	r7, r2
 80099ec:	bfde      	ittt	le
 80099ee:	19bc      	addle	r4, r7, r6
 80099f0:	1bd2      	suble	r2, r2, r7
 80099f2:	19ad      	addle	r5, r5, r6
 80099f4:	0fcf      	lsrs	r7, r1, #31
 80099f6:	3b01      	subs	r3, #1
 80099f8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80099fc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009a00:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009a04:	d1f0      	bne.n	80099e8 <__ieee754_sqrt+0x94>
 8009a06:	f04f 0c20 	mov.w	ip, #32
 8009a0a:	469e      	mov	lr, r3
 8009a0c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009a10:	42a2      	cmp	r2, r4
 8009a12:	eb06 070e 	add.w	r7, r6, lr
 8009a16:	dc02      	bgt.n	8009a1e <__ieee754_sqrt+0xca>
 8009a18:	d112      	bne.n	8009a40 <__ieee754_sqrt+0xec>
 8009a1a:	428f      	cmp	r7, r1
 8009a1c:	d810      	bhi.n	8009a40 <__ieee754_sqrt+0xec>
 8009a1e:	2f00      	cmp	r7, #0
 8009a20:	eb07 0e06 	add.w	lr, r7, r6
 8009a24:	da42      	bge.n	8009aac <__ieee754_sqrt+0x158>
 8009a26:	f1be 0f00 	cmp.w	lr, #0
 8009a2a:	db3f      	blt.n	8009aac <__ieee754_sqrt+0x158>
 8009a2c:	f104 0801 	add.w	r8, r4, #1
 8009a30:	1b12      	subs	r2, r2, r4
 8009a32:	428f      	cmp	r7, r1
 8009a34:	bf88      	it	hi
 8009a36:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8009a3a:	1bc9      	subs	r1, r1, r7
 8009a3c:	4433      	add	r3, r6
 8009a3e:	4644      	mov	r4, r8
 8009a40:	0052      	lsls	r2, r2, #1
 8009a42:	f1bc 0c01 	subs.w	ip, ip, #1
 8009a46:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009a4a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009a4e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009a52:	d1dd      	bne.n	8009a10 <__ieee754_sqrt+0xbc>
 8009a54:	430a      	orrs	r2, r1
 8009a56:	d006      	beq.n	8009a66 <__ieee754_sqrt+0x112>
 8009a58:	1c5c      	adds	r4, r3, #1
 8009a5a:	bf13      	iteet	ne
 8009a5c:	3301      	addne	r3, #1
 8009a5e:	3501      	addeq	r5, #1
 8009a60:	4663      	moveq	r3, ip
 8009a62:	f023 0301 	bicne.w	r3, r3, #1
 8009a66:	106a      	asrs	r2, r5, #1
 8009a68:	085b      	lsrs	r3, r3, #1
 8009a6a:	07e9      	lsls	r1, r5, #31
 8009a6c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009a70:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009a74:	bf48      	it	mi
 8009a76:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009a7a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009a7e:	461c      	mov	r4, r3
 8009a80:	e780      	b.n	8009984 <__ieee754_sqrt+0x30>
 8009a82:	0aca      	lsrs	r2, r1, #11
 8009a84:	3815      	subs	r0, #21
 8009a86:	0549      	lsls	r1, r1, #21
 8009a88:	2a00      	cmp	r2, #0
 8009a8a:	d0fa      	beq.n	8009a82 <__ieee754_sqrt+0x12e>
 8009a8c:	02d6      	lsls	r6, r2, #11
 8009a8e:	d50a      	bpl.n	8009aa6 <__ieee754_sqrt+0x152>
 8009a90:	f1c3 0420 	rsb	r4, r3, #32
 8009a94:	fa21 f404 	lsr.w	r4, r1, r4
 8009a98:	1e5d      	subs	r5, r3, #1
 8009a9a:	4099      	lsls	r1, r3
 8009a9c:	4322      	orrs	r2, r4
 8009a9e:	1b43      	subs	r3, r0, r5
 8009aa0:	e78b      	b.n	80099ba <__ieee754_sqrt+0x66>
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	e7f0      	b.n	8009a88 <__ieee754_sqrt+0x134>
 8009aa6:	0052      	lsls	r2, r2, #1
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	e7ef      	b.n	8009a8c <__ieee754_sqrt+0x138>
 8009aac:	46a0      	mov	r8, r4
 8009aae:	e7bf      	b.n	8009a30 <__ieee754_sqrt+0xdc>
 8009ab0:	7ff00000 	.word	0x7ff00000
 8009ab4:	00000000 	.word	0x00000000

08009ab8 <atan>:
 8009ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009abc:	ec55 4b10 	vmov	r4, r5, d0
 8009ac0:	4bc3      	ldr	r3, [pc, #780]	; (8009dd0 <atan+0x318>)
 8009ac2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009ac6:	429e      	cmp	r6, r3
 8009ac8:	46ab      	mov	fp, r5
 8009aca:	dd18      	ble.n	8009afe <atan+0x46>
 8009acc:	4bc1      	ldr	r3, [pc, #772]	; (8009dd4 <atan+0x31c>)
 8009ace:	429e      	cmp	r6, r3
 8009ad0:	dc01      	bgt.n	8009ad6 <atan+0x1e>
 8009ad2:	d109      	bne.n	8009ae8 <atan+0x30>
 8009ad4:	b144      	cbz	r4, 8009ae8 <atan+0x30>
 8009ad6:	4622      	mov	r2, r4
 8009ad8:	462b      	mov	r3, r5
 8009ada:	4620      	mov	r0, r4
 8009adc:	4629      	mov	r1, r5
 8009ade:	f7f6 fbdd 	bl	800029c <__adddf3>
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	460d      	mov	r5, r1
 8009ae6:	e006      	b.n	8009af6 <atan+0x3e>
 8009ae8:	f1bb 0f00 	cmp.w	fp, #0
 8009aec:	f340 8131 	ble.w	8009d52 <atan+0x29a>
 8009af0:	a59b      	add	r5, pc, #620	; (adr r5, 8009d60 <atan+0x2a8>)
 8009af2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009af6:	ec45 4b10 	vmov	d0, r4, r5
 8009afa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afe:	4bb6      	ldr	r3, [pc, #728]	; (8009dd8 <atan+0x320>)
 8009b00:	429e      	cmp	r6, r3
 8009b02:	dc14      	bgt.n	8009b2e <atan+0x76>
 8009b04:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009b08:	429e      	cmp	r6, r3
 8009b0a:	dc0d      	bgt.n	8009b28 <atan+0x70>
 8009b0c:	a396      	add	r3, pc, #600	; (adr r3, 8009d68 <atan+0x2b0>)
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	ee10 0a10 	vmov	r0, s0
 8009b16:	4629      	mov	r1, r5
 8009b18:	f7f6 fbc0 	bl	800029c <__adddf3>
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	4baf      	ldr	r3, [pc, #700]	; (8009ddc <atan+0x324>)
 8009b20:	f7f7 f802 	bl	8000b28 <__aeabi_dcmpgt>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	d1e6      	bne.n	8009af6 <atan+0x3e>
 8009b28:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009b2c:	e02b      	b.n	8009b86 <atan+0xce>
 8009b2e:	f000 f963 	bl	8009df8 <fabs>
 8009b32:	4bab      	ldr	r3, [pc, #684]	; (8009de0 <atan+0x328>)
 8009b34:	429e      	cmp	r6, r3
 8009b36:	ec55 4b10 	vmov	r4, r5, d0
 8009b3a:	f300 80bf 	bgt.w	8009cbc <atan+0x204>
 8009b3e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009b42:	429e      	cmp	r6, r3
 8009b44:	f300 80a0 	bgt.w	8009c88 <atan+0x1d0>
 8009b48:	ee10 2a10 	vmov	r2, s0
 8009b4c:	ee10 0a10 	vmov	r0, s0
 8009b50:	462b      	mov	r3, r5
 8009b52:	4629      	mov	r1, r5
 8009b54:	f7f6 fba2 	bl	800029c <__adddf3>
 8009b58:	2200      	movs	r2, #0
 8009b5a:	4ba0      	ldr	r3, [pc, #640]	; (8009ddc <atan+0x324>)
 8009b5c:	f7f6 fb9c 	bl	8000298 <__aeabi_dsub>
 8009b60:	2200      	movs	r2, #0
 8009b62:	4606      	mov	r6, r0
 8009b64:	460f      	mov	r7, r1
 8009b66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	4629      	mov	r1, r5
 8009b6e:	f7f6 fb95 	bl	800029c <__adddf3>
 8009b72:	4602      	mov	r2, r0
 8009b74:	460b      	mov	r3, r1
 8009b76:	4630      	mov	r0, r6
 8009b78:	4639      	mov	r1, r7
 8009b7a:	f7f6 fe6f 	bl	800085c <__aeabi_ddiv>
 8009b7e:	f04f 0a00 	mov.w	sl, #0
 8009b82:	4604      	mov	r4, r0
 8009b84:	460d      	mov	r5, r1
 8009b86:	4622      	mov	r2, r4
 8009b88:	462b      	mov	r3, r5
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	f7f6 fd3b 	bl	8000608 <__aeabi_dmul>
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	4680      	mov	r8, r0
 8009b98:	4689      	mov	r9, r1
 8009b9a:	f7f6 fd35 	bl	8000608 <__aeabi_dmul>
 8009b9e:	a374      	add	r3, pc, #464	; (adr r3, 8009d70 <atan+0x2b8>)
 8009ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba4:	4606      	mov	r6, r0
 8009ba6:	460f      	mov	r7, r1
 8009ba8:	f7f6 fd2e 	bl	8000608 <__aeabi_dmul>
 8009bac:	a372      	add	r3, pc, #456	; (adr r3, 8009d78 <atan+0x2c0>)
 8009bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb2:	f7f6 fb73 	bl	800029c <__adddf3>
 8009bb6:	4632      	mov	r2, r6
 8009bb8:	463b      	mov	r3, r7
 8009bba:	f7f6 fd25 	bl	8000608 <__aeabi_dmul>
 8009bbe:	a370      	add	r3, pc, #448	; (adr r3, 8009d80 <atan+0x2c8>)
 8009bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc4:	f7f6 fb6a 	bl	800029c <__adddf3>
 8009bc8:	4632      	mov	r2, r6
 8009bca:	463b      	mov	r3, r7
 8009bcc:	f7f6 fd1c 	bl	8000608 <__aeabi_dmul>
 8009bd0:	a36d      	add	r3, pc, #436	; (adr r3, 8009d88 <atan+0x2d0>)
 8009bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd6:	f7f6 fb61 	bl	800029c <__adddf3>
 8009bda:	4632      	mov	r2, r6
 8009bdc:	463b      	mov	r3, r7
 8009bde:	f7f6 fd13 	bl	8000608 <__aeabi_dmul>
 8009be2:	a36b      	add	r3, pc, #428	; (adr r3, 8009d90 <atan+0x2d8>)
 8009be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be8:	f7f6 fb58 	bl	800029c <__adddf3>
 8009bec:	4632      	mov	r2, r6
 8009bee:	463b      	mov	r3, r7
 8009bf0:	f7f6 fd0a 	bl	8000608 <__aeabi_dmul>
 8009bf4:	a368      	add	r3, pc, #416	; (adr r3, 8009d98 <atan+0x2e0>)
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	f7f6 fb4f 	bl	800029c <__adddf3>
 8009bfe:	4642      	mov	r2, r8
 8009c00:	464b      	mov	r3, r9
 8009c02:	f7f6 fd01 	bl	8000608 <__aeabi_dmul>
 8009c06:	a366      	add	r3, pc, #408	; (adr r3, 8009da0 <atan+0x2e8>)
 8009c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0c:	4680      	mov	r8, r0
 8009c0e:	4689      	mov	r9, r1
 8009c10:	4630      	mov	r0, r6
 8009c12:	4639      	mov	r1, r7
 8009c14:	f7f6 fcf8 	bl	8000608 <__aeabi_dmul>
 8009c18:	a363      	add	r3, pc, #396	; (adr r3, 8009da8 <atan+0x2f0>)
 8009c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1e:	f7f6 fb3b 	bl	8000298 <__aeabi_dsub>
 8009c22:	4632      	mov	r2, r6
 8009c24:	463b      	mov	r3, r7
 8009c26:	f7f6 fcef 	bl	8000608 <__aeabi_dmul>
 8009c2a:	a361      	add	r3, pc, #388	; (adr r3, 8009db0 <atan+0x2f8>)
 8009c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c30:	f7f6 fb32 	bl	8000298 <__aeabi_dsub>
 8009c34:	4632      	mov	r2, r6
 8009c36:	463b      	mov	r3, r7
 8009c38:	f7f6 fce6 	bl	8000608 <__aeabi_dmul>
 8009c3c:	a35e      	add	r3, pc, #376	; (adr r3, 8009db8 <atan+0x300>)
 8009c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c42:	f7f6 fb29 	bl	8000298 <__aeabi_dsub>
 8009c46:	4632      	mov	r2, r6
 8009c48:	463b      	mov	r3, r7
 8009c4a:	f7f6 fcdd 	bl	8000608 <__aeabi_dmul>
 8009c4e:	a35c      	add	r3, pc, #368	; (adr r3, 8009dc0 <atan+0x308>)
 8009c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c54:	f7f6 fb20 	bl	8000298 <__aeabi_dsub>
 8009c58:	4632      	mov	r2, r6
 8009c5a:	463b      	mov	r3, r7
 8009c5c:	f7f6 fcd4 	bl	8000608 <__aeabi_dmul>
 8009c60:	4602      	mov	r2, r0
 8009c62:	460b      	mov	r3, r1
 8009c64:	4640      	mov	r0, r8
 8009c66:	4649      	mov	r1, r9
 8009c68:	f7f6 fb18 	bl	800029c <__adddf3>
 8009c6c:	4622      	mov	r2, r4
 8009c6e:	462b      	mov	r3, r5
 8009c70:	f7f6 fcca 	bl	8000608 <__aeabi_dmul>
 8009c74:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009c78:	4602      	mov	r2, r0
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	d14b      	bne.n	8009d16 <atan+0x25e>
 8009c7e:	4620      	mov	r0, r4
 8009c80:	4629      	mov	r1, r5
 8009c82:	f7f6 fb09 	bl	8000298 <__aeabi_dsub>
 8009c86:	e72c      	b.n	8009ae2 <atan+0x2a>
 8009c88:	ee10 0a10 	vmov	r0, s0
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	4b53      	ldr	r3, [pc, #332]	; (8009ddc <atan+0x324>)
 8009c90:	4629      	mov	r1, r5
 8009c92:	f7f6 fb01 	bl	8000298 <__aeabi_dsub>
 8009c96:	2200      	movs	r2, #0
 8009c98:	4606      	mov	r6, r0
 8009c9a:	460f      	mov	r7, r1
 8009c9c:	4b4f      	ldr	r3, [pc, #316]	; (8009ddc <atan+0x324>)
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	f7f6 fafb 	bl	800029c <__adddf3>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	460b      	mov	r3, r1
 8009caa:	4630      	mov	r0, r6
 8009cac:	4639      	mov	r1, r7
 8009cae:	f7f6 fdd5 	bl	800085c <__aeabi_ddiv>
 8009cb2:	f04f 0a01 	mov.w	sl, #1
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	460d      	mov	r5, r1
 8009cba:	e764      	b.n	8009b86 <atan+0xce>
 8009cbc:	4b49      	ldr	r3, [pc, #292]	; (8009de4 <atan+0x32c>)
 8009cbe:	429e      	cmp	r6, r3
 8009cc0:	dc1d      	bgt.n	8009cfe <atan+0x246>
 8009cc2:	ee10 0a10 	vmov	r0, s0
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	4b47      	ldr	r3, [pc, #284]	; (8009de8 <atan+0x330>)
 8009cca:	4629      	mov	r1, r5
 8009ccc:	f7f6 fae4 	bl	8000298 <__aeabi_dsub>
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	460f      	mov	r7, r1
 8009cd6:	4b44      	ldr	r3, [pc, #272]	; (8009de8 <atan+0x330>)
 8009cd8:	4620      	mov	r0, r4
 8009cda:	4629      	mov	r1, r5
 8009cdc:	f7f6 fc94 	bl	8000608 <__aeabi_dmul>
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	4b3e      	ldr	r3, [pc, #248]	; (8009ddc <atan+0x324>)
 8009ce4:	f7f6 fada 	bl	800029c <__adddf3>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	460b      	mov	r3, r1
 8009cec:	4630      	mov	r0, r6
 8009cee:	4639      	mov	r1, r7
 8009cf0:	f7f6 fdb4 	bl	800085c <__aeabi_ddiv>
 8009cf4:	f04f 0a02 	mov.w	sl, #2
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	460d      	mov	r5, r1
 8009cfc:	e743      	b.n	8009b86 <atan+0xce>
 8009cfe:	462b      	mov	r3, r5
 8009d00:	ee10 2a10 	vmov	r2, s0
 8009d04:	2000      	movs	r0, #0
 8009d06:	4939      	ldr	r1, [pc, #228]	; (8009dec <atan+0x334>)
 8009d08:	f7f6 fda8 	bl	800085c <__aeabi_ddiv>
 8009d0c:	f04f 0a03 	mov.w	sl, #3
 8009d10:	4604      	mov	r4, r0
 8009d12:	460d      	mov	r5, r1
 8009d14:	e737      	b.n	8009b86 <atan+0xce>
 8009d16:	4b36      	ldr	r3, [pc, #216]	; (8009df0 <atan+0x338>)
 8009d18:	4e36      	ldr	r6, [pc, #216]	; (8009df4 <atan+0x33c>)
 8009d1a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8009d1e:	4456      	add	r6, sl
 8009d20:	449a      	add	sl, r3
 8009d22:	e9da 2300 	ldrd	r2, r3, [sl]
 8009d26:	f7f6 fab7 	bl	8000298 <__aeabi_dsub>
 8009d2a:	4622      	mov	r2, r4
 8009d2c:	462b      	mov	r3, r5
 8009d2e:	f7f6 fab3 	bl	8000298 <__aeabi_dsub>
 8009d32:	4602      	mov	r2, r0
 8009d34:	460b      	mov	r3, r1
 8009d36:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009d3a:	f7f6 faad 	bl	8000298 <__aeabi_dsub>
 8009d3e:	f1bb 0f00 	cmp.w	fp, #0
 8009d42:	4604      	mov	r4, r0
 8009d44:	460d      	mov	r5, r1
 8009d46:	f6bf aed6 	bge.w	8009af6 <atan+0x3e>
 8009d4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d4e:	461d      	mov	r5, r3
 8009d50:	e6d1      	b.n	8009af6 <atan+0x3e>
 8009d52:	a51d      	add	r5, pc, #116	; (adr r5, 8009dc8 <atan+0x310>)
 8009d54:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d58:	e6cd      	b.n	8009af6 <atan+0x3e>
 8009d5a:	bf00      	nop
 8009d5c:	f3af 8000 	nop.w
 8009d60:	54442d18 	.word	0x54442d18
 8009d64:	3ff921fb 	.word	0x3ff921fb
 8009d68:	8800759c 	.word	0x8800759c
 8009d6c:	7e37e43c 	.word	0x7e37e43c
 8009d70:	e322da11 	.word	0xe322da11
 8009d74:	3f90ad3a 	.word	0x3f90ad3a
 8009d78:	24760deb 	.word	0x24760deb
 8009d7c:	3fa97b4b 	.word	0x3fa97b4b
 8009d80:	a0d03d51 	.word	0xa0d03d51
 8009d84:	3fb10d66 	.word	0x3fb10d66
 8009d88:	c54c206e 	.word	0xc54c206e
 8009d8c:	3fb745cd 	.word	0x3fb745cd
 8009d90:	920083ff 	.word	0x920083ff
 8009d94:	3fc24924 	.word	0x3fc24924
 8009d98:	5555550d 	.word	0x5555550d
 8009d9c:	3fd55555 	.word	0x3fd55555
 8009da0:	2c6a6c2f 	.word	0x2c6a6c2f
 8009da4:	bfa2b444 	.word	0xbfa2b444
 8009da8:	52defd9a 	.word	0x52defd9a
 8009dac:	3fadde2d 	.word	0x3fadde2d
 8009db0:	af749a6d 	.word	0xaf749a6d
 8009db4:	3fb3b0f2 	.word	0x3fb3b0f2
 8009db8:	fe231671 	.word	0xfe231671
 8009dbc:	3fbc71c6 	.word	0x3fbc71c6
 8009dc0:	9998ebc4 	.word	0x9998ebc4
 8009dc4:	3fc99999 	.word	0x3fc99999
 8009dc8:	54442d18 	.word	0x54442d18
 8009dcc:	bff921fb 	.word	0xbff921fb
 8009dd0:	440fffff 	.word	0x440fffff
 8009dd4:	7ff00000 	.word	0x7ff00000
 8009dd8:	3fdbffff 	.word	0x3fdbffff
 8009ddc:	3ff00000 	.word	0x3ff00000
 8009de0:	3ff2ffff 	.word	0x3ff2ffff
 8009de4:	40037fff 	.word	0x40037fff
 8009de8:	3ff80000 	.word	0x3ff80000
 8009dec:	bff00000 	.word	0xbff00000
 8009df0:	0800ea98 	.word	0x0800ea98
 8009df4:	0800ea78 	.word	0x0800ea78

08009df8 <fabs>:
 8009df8:	ec51 0b10 	vmov	r0, r1, d0
 8009dfc:	ee10 2a10 	vmov	r2, s0
 8009e00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009e04:	ec43 2b10 	vmov	d0, r2, r3
 8009e08:	4770      	bx	lr

08009e0a <finite>:
 8009e0a:	ee10 3a90 	vmov	r3, s1
 8009e0e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8009e12:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009e16:	0fc0      	lsrs	r0, r0, #31
 8009e18:	4770      	bx	lr

08009e1a <matherr>:
 8009e1a:	2000      	movs	r0, #0
 8009e1c:	4770      	bx	lr
	...

08009e20 <nan>:
 8009e20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009e28 <nan+0x8>
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	00000000 	.word	0x00000000
 8009e2c:	7ff80000 	.word	0x7ff80000

08009e30 <rint>:
 8009e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e32:	ec51 0b10 	vmov	r0, r1, d0
 8009e36:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009e3a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009e3e:	2e13      	cmp	r6, #19
 8009e40:	460b      	mov	r3, r1
 8009e42:	ee10 4a10 	vmov	r4, s0
 8009e46:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009e4a:	dc56      	bgt.n	8009efa <rint+0xca>
 8009e4c:	2e00      	cmp	r6, #0
 8009e4e:	da2b      	bge.n	8009ea8 <rint+0x78>
 8009e50:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009e54:	4302      	orrs	r2, r0
 8009e56:	d023      	beq.n	8009ea0 <rint+0x70>
 8009e58:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009e5c:	4302      	orrs	r2, r0
 8009e5e:	4254      	negs	r4, r2
 8009e60:	4314      	orrs	r4, r2
 8009e62:	0c4b      	lsrs	r3, r1, #17
 8009e64:	0b24      	lsrs	r4, r4, #12
 8009e66:	045b      	lsls	r3, r3, #17
 8009e68:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009e6c:	ea44 0103 	orr.w	r1, r4, r3
 8009e70:	460b      	mov	r3, r1
 8009e72:	492f      	ldr	r1, [pc, #188]	; (8009f30 <rint+0x100>)
 8009e74:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009e78:	e9d1 6700 	ldrd	r6, r7, [r1]
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	4639      	mov	r1, r7
 8009e80:	4630      	mov	r0, r6
 8009e82:	f7f6 fa0b 	bl	800029c <__adddf3>
 8009e86:	e9cd 0100 	strd	r0, r1, [sp]
 8009e8a:	463b      	mov	r3, r7
 8009e8c:	4632      	mov	r2, r6
 8009e8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e92:	f7f6 fa01 	bl	8000298 <__aeabi_dsub>
 8009e96:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009e9a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009e9e:	4639      	mov	r1, r7
 8009ea0:	ec41 0b10 	vmov	d0, r0, r1
 8009ea4:	b003      	add	sp, #12
 8009ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ea8:	4a22      	ldr	r2, [pc, #136]	; (8009f34 <rint+0x104>)
 8009eaa:	4132      	asrs	r2, r6
 8009eac:	ea01 0702 	and.w	r7, r1, r2
 8009eb0:	4307      	orrs	r7, r0
 8009eb2:	d0f5      	beq.n	8009ea0 <rint+0x70>
 8009eb4:	0852      	lsrs	r2, r2, #1
 8009eb6:	4011      	ands	r1, r2
 8009eb8:	430c      	orrs	r4, r1
 8009eba:	d00b      	beq.n	8009ed4 <rint+0xa4>
 8009ebc:	ea23 0202 	bic.w	r2, r3, r2
 8009ec0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009ec4:	2e13      	cmp	r6, #19
 8009ec6:	fa43 f306 	asr.w	r3, r3, r6
 8009eca:	bf0c      	ite	eq
 8009ecc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009ed0:	2400      	movne	r4, #0
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	4916      	ldr	r1, [pc, #88]	; (8009f30 <rint+0x100>)
 8009ed6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009eda:	4622      	mov	r2, r4
 8009edc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	4629      	mov	r1, r5
 8009ee4:	f7f6 f9da 	bl	800029c <__adddf3>
 8009ee8:	e9cd 0100 	strd	r0, r1, [sp]
 8009eec:	4622      	mov	r2, r4
 8009eee:	462b      	mov	r3, r5
 8009ef0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ef4:	f7f6 f9d0 	bl	8000298 <__aeabi_dsub>
 8009ef8:	e7d2      	b.n	8009ea0 <rint+0x70>
 8009efa:	2e33      	cmp	r6, #51	; 0x33
 8009efc:	dd07      	ble.n	8009f0e <rint+0xde>
 8009efe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009f02:	d1cd      	bne.n	8009ea0 <rint+0x70>
 8009f04:	ee10 2a10 	vmov	r2, s0
 8009f08:	f7f6 f9c8 	bl	800029c <__adddf3>
 8009f0c:	e7c8      	b.n	8009ea0 <rint+0x70>
 8009f0e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8009f12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f16:	40f2      	lsrs	r2, r6
 8009f18:	4210      	tst	r0, r2
 8009f1a:	d0c1      	beq.n	8009ea0 <rint+0x70>
 8009f1c:	0852      	lsrs	r2, r2, #1
 8009f1e:	4210      	tst	r0, r2
 8009f20:	bf1f      	itttt	ne
 8009f22:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009f26:	ea20 0202 	bicne.w	r2, r0, r2
 8009f2a:	4134      	asrne	r4, r6
 8009f2c:	4314      	orrne	r4, r2
 8009f2e:	e7d1      	b.n	8009ed4 <rint+0xa4>
 8009f30:	0800eab8 	.word	0x0800eab8
 8009f34:	000fffff 	.word	0x000fffff

08009f38 <scalbn>:
 8009f38:	b570      	push	{r4, r5, r6, lr}
 8009f3a:	ec55 4b10 	vmov	r4, r5, d0
 8009f3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009f42:	4606      	mov	r6, r0
 8009f44:	462b      	mov	r3, r5
 8009f46:	b9aa      	cbnz	r2, 8009f74 <scalbn+0x3c>
 8009f48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009f4c:	4323      	orrs	r3, r4
 8009f4e:	d03b      	beq.n	8009fc8 <scalbn+0x90>
 8009f50:	4b31      	ldr	r3, [pc, #196]	; (800a018 <scalbn+0xe0>)
 8009f52:	4629      	mov	r1, r5
 8009f54:	2200      	movs	r2, #0
 8009f56:	ee10 0a10 	vmov	r0, s0
 8009f5a:	f7f6 fb55 	bl	8000608 <__aeabi_dmul>
 8009f5e:	4b2f      	ldr	r3, [pc, #188]	; (800a01c <scalbn+0xe4>)
 8009f60:	429e      	cmp	r6, r3
 8009f62:	4604      	mov	r4, r0
 8009f64:	460d      	mov	r5, r1
 8009f66:	da12      	bge.n	8009f8e <scalbn+0x56>
 8009f68:	a327      	add	r3, pc, #156	; (adr r3, 800a008 <scalbn+0xd0>)
 8009f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6e:	f7f6 fb4b 	bl	8000608 <__aeabi_dmul>
 8009f72:	e009      	b.n	8009f88 <scalbn+0x50>
 8009f74:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009f78:	428a      	cmp	r2, r1
 8009f7a:	d10c      	bne.n	8009f96 <scalbn+0x5e>
 8009f7c:	ee10 2a10 	vmov	r2, s0
 8009f80:	4620      	mov	r0, r4
 8009f82:	4629      	mov	r1, r5
 8009f84:	f7f6 f98a 	bl	800029c <__adddf3>
 8009f88:	4604      	mov	r4, r0
 8009f8a:	460d      	mov	r5, r1
 8009f8c:	e01c      	b.n	8009fc8 <scalbn+0x90>
 8009f8e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009f92:	460b      	mov	r3, r1
 8009f94:	3a36      	subs	r2, #54	; 0x36
 8009f96:	4432      	add	r2, r6
 8009f98:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009f9c:	428a      	cmp	r2, r1
 8009f9e:	dd0b      	ble.n	8009fb8 <scalbn+0x80>
 8009fa0:	ec45 4b11 	vmov	d1, r4, r5
 8009fa4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a010 <scalbn+0xd8>
 8009fa8:	f000 f83c 	bl	800a024 <copysign>
 8009fac:	a318      	add	r3, pc, #96	; (adr r3, 800a010 <scalbn+0xd8>)
 8009fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb2:	ec51 0b10 	vmov	r0, r1, d0
 8009fb6:	e7da      	b.n	8009f6e <scalbn+0x36>
 8009fb8:	2a00      	cmp	r2, #0
 8009fba:	dd08      	ble.n	8009fce <scalbn+0x96>
 8009fbc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009fc0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009fc4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009fc8:	ec45 4b10 	vmov	d0, r4, r5
 8009fcc:	bd70      	pop	{r4, r5, r6, pc}
 8009fce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009fd2:	da0d      	bge.n	8009ff0 <scalbn+0xb8>
 8009fd4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009fd8:	429e      	cmp	r6, r3
 8009fda:	ec45 4b11 	vmov	d1, r4, r5
 8009fde:	dce1      	bgt.n	8009fa4 <scalbn+0x6c>
 8009fe0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a008 <scalbn+0xd0>
 8009fe4:	f000 f81e 	bl	800a024 <copysign>
 8009fe8:	a307      	add	r3, pc, #28	; (adr r3, 800a008 <scalbn+0xd0>)
 8009fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fee:	e7e0      	b.n	8009fb2 <scalbn+0x7a>
 8009ff0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009ff4:	3236      	adds	r2, #54	; 0x36
 8009ff6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009ffa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009ffe:	4620      	mov	r0, r4
 800a000:	4629      	mov	r1, r5
 800a002:	2200      	movs	r2, #0
 800a004:	4b06      	ldr	r3, [pc, #24]	; (800a020 <scalbn+0xe8>)
 800a006:	e7b2      	b.n	8009f6e <scalbn+0x36>
 800a008:	c2f8f359 	.word	0xc2f8f359
 800a00c:	01a56e1f 	.word	0x01a56e1f
 800a010:	8800759c 	.word	0x8800759c
 800a014:	7e37e43c 	.word	0x7e37e43c
 800a018:	43500000 	.word	0x43500000
 800a01c:	ffff3cb0 	.word	0xffff3cb0
 800a020:	3c900000 	.word	0x3c900000

0800a024 <copysign>:
 800a024:	ec51 0b10 	vmov	r0, r1, d0
 800a028:	ee11 0a90 	vmov	r0, s3
 800a02c:	ee10 2a10 	vmov	r2, s0
 800a030:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a034:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a038:	ea41 0300 	orr.w	r3, r1, r0
 800a03c:	ec43 2b10 	vmov	d0, r2, r3
 800a040:	4770      	bx	lr
	...

0800a044 <__errno>:
 800a044:	4b01      	ldr	r3, [pc, #4]	; (800a04c <__errno+0x8>)
 800a046:	6818      	ldr	r0, [r3, #0]
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	20000098 	.word	0x20000098

0800a050 <__libc_init_array>:
 800a050:	b570      	push	{r4, r5, r6, lr}
 800a052:	4e0d      	ldr	r6, [pc, #52]	; (800a088 <__libc_init_array+0x38>)
 800a054:	4c0d      	ldr	r4, [pc, #52]	; (800a08c <__libc_init_array+0x3c>)
 800a056:	1ba4      	subs	r4, r4, r6
 800a058:	10a4      	asrs	r4, r4, #2
 800a05a:	2500      	movs	r5, #0
 800a05c:	42a5      	cmp	r5, r4
 800a05e:	d109      	bne.n	800a074 <__libc_init_array+0x24>
 800a060:	4e0b      	ldr	r6, [pc, #44]	; (800a090 <__libc_init_array+0x40>)
 800a062:	4c0c      	ldr	r4, [pc, #48]	; (800a094 <__libc_init_array+0x44>)
 800a064:	f004 fa5c 	bl	800e520 <_init>
 800a068:	1ba4      	subs	r4, r4, r6
 800a06a:	10a4      	asrs	r4, r4, #2
 800a06c:	2500      	movs	r5, #0
 800a06e:	42a5      	cmp	r5, r4
 800a070:	d105      	bne.n	800a07e <__libc_init_array+0x2e>
 800a072:	bd70      	pop	{r4, r5, r6, pc}
 800a074:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a078:	4798      	blx	r3
 800a07a:	3501      	adds	r5, #1
 800a07c:	e7ee      	b.n	800a05c <__libc_init_array+0xc>
 800a07e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a082:	4798      	blx	r3
 800a084:	3501      	adds	r5, #1
 800a086:	e7f2      	b.n	800a06e <__libc_init_array+0x1e>
 800a088:	0800ede8 	.word	0x0800ede8
 800a08c:	0800ede8 	.word	0x0800ede8
 800a090:	0800ede8 	.word	0x0800ede8
 800a094:	0800edec 	.word	0x0800edec

0800a098 <__locale_ctype_ptr_l>:
 800a098:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a09c:	4770      	bx	lr

0800a09e <__ascii_mbtowc>:
 800a09e:	b082      	sub	sp, #8
 800a0a0:	b901      	cbnz	r1, 800a0a4 <__ascii_mbtowc+0x6>
 800a0a2:	a901      	add	r1, sp, #4
 800a0a4:	b142      	cbz	r2, 800a0b8 <__ascii_mbtowc+0x1a>
 800a0a6:	b14b      	cbz	r3, 800a0bc <__ascii_mbtowc+0x1e>
 800a0a8:	7813      	ldrb	r3, [r2, #0]
 800a0aa:	600b      	str	r3, [r1, #0]
 800a0ac:	7812      	ldrb	r2, [r2, #0]
 800a0ae:	1c10      	adds	r0, r2, #0
 800a0b0:	bf18      	it	ne
 800a0b2:	2001      	movne	r0, #1
 800a0b4:	b002      	add	sp, #8
 800a0b6:	4770      	bx	lr
 800a0b8:	4610      	mov	r0, r2
 800a0ba:	e7fb      	b.n	800a0b4 <__ascii_mbtowc+0x16>
 800a0bc:	f06f 0001 	mvn.w	r0, #1
 800a0c0:	e7f8      	b.n	800a0b4 <__ascii_mbtowc+0x16>

0800a0c2 <memcpy>:
 800a0c2:	b510      	push	{r4, lr}
 800a0c4:	1e43      	subs	r3, r0, #1
 800a0c6:	440a      	add	r2, r1
 800a0c8:	4291      	cmp	r1, r2
 800a0ca:	d100      	bne.n	800a0ce <memcpy+0xc>
 800a0cc:	bd10      	pop	{r4, pc}
 800a0ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0d6:	e7f7      	b.n	800a0c8 <memcpy+0x6>

0800a0d8 <memset>:
 800a0d8:	4402      	add	r2, r0
 800a0da:	4603      	mov	r3, r0
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d100      	bne.n	800a0e2 <memset+0xa>
 800a0e0:	4770      	bx	lr
 800a0e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a0e6:	e7f9      	b.n	800a0dc <memset+0x4>

0800a0e8 <__cvt>:
 800a0e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ec:	ec55 4b10 	vmov	r4, r5, d0
 800a0f0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a0f2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a0f6:	2d00      	cmp	r5, #0
 800a0f8:	460e      	mov	r6, r1
 800a0fa:	4691      	mov	r9, r2
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	bfb8      	it	lt
 800a100:	4622      	movlt	r2, r4
 800a102:	462b      	mov	r3, r5
 800a104:	f027 0720 	bic.w	r7, r7, #32
 800a108:	bfbb      	ittet	lt
 800a10a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a10e:	461d      	movlt	r5, r3
 800a110:	2300      	movge	r3, #0
 800a112:	232d      	movlt	r3, #45	; 0x2d
 800a114:	bfb8      	it	lt
 800a116:	4614      	movlt	r4, r2
 800a118:	2f46      	cmp	r7, #70	; 0x46
 800a11a:	700b      	strb	r3, [r1, #0]
 800a11c:	d004      	beq.n	800a128 <__cvt+0x40>
 800a11e:	2f45      	cmp	r7, #69	; 0x45
 800a120:	d100      	bne.n	800a124 <__cvt+0x3c>
 800a122:	3601      	adds	r6, #1
 800a124:	2102      	movs	r1, #2
 800a126:	e000      	b.n	800a12a <__cvt+0x42>
 800a128:	2103      	movs	r1, #3
 800a12a:	ab03      	add	r3, sp, #12
 800a12c:	9301      	str	r3, [sp, #4]
 800a12e:	ab02      	add	r3, sp, #8
 800a130:	9300      	str	r3, [sp, #0]
 800a132:	4632      	mov	r2, r6
 800a134:	4653      	mov	r3, sl
 800a136:	ec45 4b10 	vmov	d0, r4, r5
 800a13a:	f001 febd 	bl	800beb8 <_dtoa_r>
 800a13e:	2f47      	cmp	r7, #71	; 0x47
 800a140:	4680      	mov	r8, r0
 800a142:	d102      	bne.n	800a14a <__cvt+0x62>
 800a144:	f019 0f01 	tst.w	r9, #1
 800a148:	d026      	beq.n	800a198 <__cvt+0xb0>
 800a14a:	2f46      	cmp	r7, #70	; 0x46
 800a14c:	eb08 0906 	add.w	r9, r8, r6
 800a150:	d111      	bne.n	800a176 <__cvt+0x8e>
 800a152:	f898 3000 	ldrb.w	r3, [r8]
 800a156:	2b30      	cmp	r3, #48	; 0x30
 800a158:	d10a      	bne.n	800a170 <__cvt+0x88>
 800a15a:	2200      	movs	r2, #0
 800a15c:	2300      	movs	r3, #0
 800a15e:	4620      	mov	r0, r4
 800a160:	4629      	mov	r1, r5
 800a162:	f7f6 fcb9 	bl	8000ad8 <__aeabi_dcmpeq>
 800a166:	b918      	cbnz	r0, 800a170 <__cvt+0x88>
 800a168:	f1c6 0601 	rsb	r6, r6, #1
 800a16c:	f8ca 6000 	str.w	r6, [sl]
 800a170:	f8da 3000 	ldr.w	r3, [sl]
 800a174:	4499      	add	r9, r3
 800a176:	2200      	movs	r2, #0
 800a178:	2300      	movs	r3, #0
 800a17a:	4620      	mov	r0, r4
 800a17c:	4629      	mov	r1, r5
 800a17e:	f7f6 fcab 	bl	8000ad8 <__aeabi_dcmpeq>
 800a182:	b938      	cbnz	r0, 800a194 <__cvt+0xac>
 800a184:	2230      	movs	r2, #48	; 0x30
 800a186:	9b03      	ldr	r3, [sp, #12]
 800a188:	454b      	cmp	r3, r9
 800a18a:	d205      	bcs.n	800a198 <__cvt+0xb0>
 800a18c:	1c59      	adds	r1, r3, #1
 800a18e:	9103      	str	r1, [sp, #12]
 800a190:	701a      	strb	r2, [r3, #0]
 800a192:	e7f8      	b.n	800a186 <__cvt+0x9e>
 800a194:	f8cd 900c 	str.w	r9, [sp, #12]
 800a198:	9b03      	ldr	r3, [sp, #12]
 800a19a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a19c:	eba3 0308 	sub.w	r3, r3, r8
 800a1a0:	4640      	mov	r0, r8
 800a1a2:	6013      	str	r3, [r2, #0]
 800a1a4:	b004      	add	sp, #16
 800a1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a1aa <__exponent>:
 800a1aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1ac:	2900      	cmp	r1, #0
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	bfba      	itte	lt
 800a1b2:	4249      	neglt	r1, r1
 800a1b4:	232d      	movlt	r3, #45	; 0x2d
 800a1b6:	232b      	movge	r3, #43	; 0x2b
 800a1b8:	2909      	cmp	r1, #9
 800a1ba:	f804 2b02 	strb.w	r2, [r4], #2
 800a1be:	7043      	strb	r3, [r0, #1]
 800a1c0:	dd20      	ble.n	800a204 <__exponent+0x5a>
 800a1c2:	f10d 0307 	add.w	r3, sp, #7
 800a1c6:	461f      	mov	r7, r3
 800a1c8:	260a      	movs	r6, #10
 800a1ca:	fb91 f5f6 	sdiv	r5, r1, r6
 800a1ce:	fb06 1115 	mls	r1, r6, r5, r1
 800a1d2:	3130      	adds	r1, #48	; 0x30
 800a1d4:	2d09      	cmp	r5, #9
 800a1d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a1da:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800a1de:	4629      	mov	r1, r5
 800a1e0:	dc09      	bgt.n	800a1f6 <__exponent+0x4c>
 800a1e2:	3130      	adds	r1, #48	; 0x30
 800a1e4:	3b02      	subs	r3, #2
 800a1e6:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a1ea:	42bb      	cmp	r3, r7
 800a1ec:	4622      	mov	r2, r4
 800a1ee:	d304      	bcc.n	800a1fa <__exponent+0x50>
 800a1f0:	1a10      	subs	r0, r2, r0
 800a1f2:	b003      	add	sp, #12
 800a1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	e7e7      	b.n	800a1ca <__exponent+0x20>
 800a1fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1fe:	f804 2b01 	strb.w	r2, [r4], #1
 800a202:	e7f2      	b.n	800a1ea <__exponent+0x40>
 800a204:	2330      	movs	r3, #48	; 0x30
 800a206:	4419      	add	r1, r3
 800a208:	7083      	strb	r3, [r0, #2]
 800a20a:	1d02      	adds	r2, r0, #4
 800a20c:	70c1      	strb	r1, [r0, #3]
 800a20e:	e7ef      	b.n	800a1f0 <__exponent+0x46>

0800a210 <_printf_float>:
 800a210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a214:	b08d      	sub	sp, #52	; 0x34
 800a216:	460c      	mov	r4, r1
 800a218:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a21c:	4616      	mov	r6, r2
 800a21e:	461f      	mov	r7, r3
 800a220:	4605      	mov	r5, r0
 800a222:	f003 f8a3 	bl	800d36c <_localeconv_r>
 800a226:	6803      	ldr	r3, [r0, #0]
 800a228:	9304      	str	r3, [sp, #16]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7f5 ffd8 	bl	80001e0 <strlen>
 800a230:	2300      	movs	r3, #0
 800a232:	930a      	str	r3, [sp, #40]	; 0x28
 800a234:	f8d8 3000 	ldr.w	r3, [r8]
 800a238:	9005      	str	r0, [sp, #20]
 800a23a:	3307      	adds	r3, #7
 800a23c:	f023 0307 	bic.w	r3, r3, #7
 800a240:	f103 0208 	add.w	r2, r3, #8
 800a244:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a248:	f8d4 b000 	ldr.w	fp, [r4]
 800a24c:	f8c8 2000 	str.w	r2, [r8]
 800a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a254:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a258:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a25c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a260:	9307      	str	r3, [sp, #28]
 800a262:	f8cd 8018 	str.w	r8, [sp, #24]
 800a266:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a26a:	4ba7      	ldr	r3, [pc, #668]	; (800a508 <_printf_float+0x2f8>)
 800a26c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a270:	f7f6 fc64 	bl	8000b3c <__aeabi_dcmpun>
 800a274:	bb70      	cbnz	r0, 800a2d4 <_printf_float+0xc4>
 800a276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a27a:	4ba3      	ldr	r3, [pc, #652]	; (800a508 <_printf_float+0x2f8>)
 800a27c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a280:	f7f6 fc3e 	bl	8000b00 <__aeabi_dcmple>
 800a284:	bb30      	cbnz	r0, 800a2d4 <_printf_float+0xc4>
 800a286:	2200      	movs	r2, #0
 800a288:	2300      	movs	r3, #0
 800a28a:	4640      	mov	r0, r8
 800a28c:	4649      	mov	r1, r9
 800a28e:	f7f6 fc2d 	bl	8000aec <__aeabi_dcmplt>
 800a292:	b110      	cbz	r0, 800a29a <_printf_float+0x8a>
 800a294:	232d      	movs	r3, #45	; 0x2d
 800a296:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a29a:	4a9c      	ldr	r2, [pc, #624]	; (800a50c <_printf_float+0x2fc>)
 800a29c:	4b9c      	ldr	r3, [pc, #624]	; (800a510 <_printf_float+0x300>)
 800a29e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a2a2:	bf8c      	ite	hi
 800a2a4:	4690      	movhi	r8, r2
 800a2a6:	4698      	movls	r8, r3
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	f02b 0204 	bic.w	r2, fp, #4
 800a2ae:	6123      	str	r3, [r4, #16]
 800a2b0:	6022      	str	r2, [r4, #0]
 800a2b2:	f04f 0900 	mov.w	r9, #0
 800a2b6:	9700      	str	r7, [sp, #0]
 800a2b8:	4633      	mov	r3, r6
 800a2ba:	aa0b      	add	r2, sp, #44	; 0x2c
 800a2bc:	4621      	mov	r1, r4
 800a2be:	4628      	mov	r0, r5
 800a2c0:	f000 f9e6 	bl	800a690 <_printf_common>
 800a2c4:	3001      	adds	r0, #1
 800a2c6:	f040 808d 	bne.w	800a3e4 <_printf_float+0x1d4>
 800a2ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2ce:	b00d      	add	sp, #52	; 0x34
 800a2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d4:	4642      	mov	r2, r8
 800a2d6:	464b      	mov	r3, r9
 800a2d8:	4640      	mov	r0, r8
 800a2da:	4649      	mov	r1, r9
 800a2dc:	f7f6 fc2e 	bl	8000b3c <__aeabi_dcmpun>
 800a2e0:	b110      	cbz	r0, 800a2e8 <_printf_float+0xd8>
 800a2e2:	4a8c      	ldr	r2, [pc, #560]	; (800a514 <_printf_float+0x304>)
 800a2e4:	4b8c      	ldr	r3, [pc, #560]	; (800a518 <_printf_float+0x308>)
 800a2e6:	e7da      	b.n	800a29e <_printf_float+0x8e>
 800a2e8:	6861      	ldr	r1, [r4, #4]
 800a2ea:	1c4b      	adds	r3, r1, #1
 800a2ec:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a2f0:	a80a      	add	r0, sp, #40	; 0x28
 800a2f2:	d13e      	bne.n	800a372 <_printf_float+0x162>
 800a2f4:	2306      	movs	r3, #6
 800a2f6:	6063      	str	r3, [r4, #4]
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a2fe:	ab09      	add	r3, sp, #36	; 0x24
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	ec49 8b10 	vmov	d0, r8, r9
 800a306:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a30a:	6022      	str	r2, [r4, #0]
 800a30c:	f8cd a004 	str.w	sl, [sp, #4]
 800a310:	6861      	ldr	r1, [r4, #4]
 800a312:	4628      	mov	r0, r5
 800a314:	f7ff fee8 	bl	800a0e8 <__cvt>
 800a318:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a31c:	2b47      	cmp	r3, #71	; 0x47
 800a31e:	4680      	mov	r8, r0
 800a320:	d109      	bne.n	800a336 <_printf_float+0x126>
 800a322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a324:	1cd8      	adds	r0, r3, #3
 800a326:	db02      	blt.n	800a32e <_printf_float+0x11e>
 800a328:	6862      	ldr	r2, [r4, #4]
 800a32a:	4293      	cmp	r3, r2
 800a32c:	dd47      	ble.n	800a3be <_printf_float+0x1ae>
 800a32e:	f1aa 0a02 	sub.w	sl, sl, #2
 800a332:	fa5f fa8a 	uxtb.w	sl, sl
 800a336:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a33a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a33c:	d824      	bhi.n	800a388 <_printf_float+0x178>
 800a33e:	3901      	subs	r1, #1
 800a340:	4652      	mov	r2, sl
 800a342:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a346:	9109      	str	r1, [sp, #36]	; 0x24
 800a348:	f7ff ff2f 	bl	800a1aa <__exponent>
 800a34c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a34e:	1813      	adds	r3, r2, r0
 800a350:	2a01      	cmp	r2, #1
 800a352:	4681      	mov	r9, r0
 800a354:	6123      	str	r3, [r4, #16]
 800a356:	dc02      	bgt.n	800a35e <_printf_float+0x14e>
 800a358:	6822      	ldr	r2, [r4, #0]
 800a35a:	07d1      	lsls	r1, r2, #31
 800a35c:	d501      	bpl.n	800a362 <_printf_float+0x152>
 800a35e:	3301      	adds	r3, #1
 800a360:	6123      	str	r3, [r4, #16]
 800a362:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a366:	2b00      	cmp	r3, #0
 800a368:	d0a5      	beq.n	800a2b6 <_printf_float+0xa6>
 800a36a:	232d      	movs	r3, #45	; 0x2d
 800a36c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a370:	e7a1      	b.n	800a2b6 <_printf_float+0xa6>
 800a372:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a376:	f000 8177 	beq.w	800a668 <_printf_float+0x458>
 800a37a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a37e:	d1bb      	bne.n	800a2f8 <_printf_float+0xe8>
 800a380:	2900      	cmp	r1, #0
 800a382:	d1b9      	bne.n	800a2f8 <_printf_float+0xe8>
 800a384:	2301      	movs	r3, #1
 800a386:	e7b6      	b.n	800a2f6 <_printf_float+0xe6>
 800a388:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a38c:	d119      	bne.n	800a3c2 <_printf_float+0x1b2>
 800a38e:	2900      	cmp	r1, #0
 800a390:	6863      	ldr	r3, [r4, #4]
 800a392:	dd0c      	ble.n	800a3ae <_printf_float+0x19e>
 800a394:	6121      	str	r1, [r4, #16]
 800a396:	b913      	cbnz	r3, 800a39e <_printf_float+0x18e>
 800a398:	6822      	ldr	r2, [r4, #0]
 800a39a:	07d2      	lsls	r2, r2, #31
 800a39c:	d502      	bpl.n	800a3a4 <_printf_float+0x194>
 800a39e:	3301      	adds	r3, #1
 800a3a0:	440b      	add	r3, r1
 800a3a2:	6123      	str	r3, [r4, #16]
 800a3a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a6:	65a3      	str	r3, [r4, #88]	; 0x58
 800a3a8:	f04f 0900 	mov.w	r9, #0
 800a3ac:	e7d9      	b.n	800a362 <_printf_float+0x152>
 800a3ae:	b913      	cbnz	r3, 800a3b6 <_printf_float+0x1a6>
 800a3b0:	6822      	ldr	r2, [r4, #0]
 800a3b2:	07d0      	lsls	r0, r2, #31
 800a3b4:	d501      	bpl.n	800a3ba <_printf_float+0x1aa>
 800a3b6:	3302      	adds	r3, #2
 800a3b8:	e7f3      	b.n	800a3a2 <_printf_float+0x192>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e7f1      	b.n	800a3a2 <_printf_float+0x192>
 800a3be:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a3c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	db05      	blt.n	800a3d6 <_printf_float+0x1c6>
 800a3ca:	6822      	ldr	r2, [r4, #0]
 800a3cc:	6123      	str	r3, [r4, #16]
 800a3ce:	07d1      	lsls	r1, r2, #31
 800a3d0:	d5e8      	bpl.n	800a3a4 <_printf_float+0x194>
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	e7e5      	b.n	800a3a2 <_printf_float+0x192>
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	bfd4      	ite	le
 800a3da:	f1c3 0302 	rsble	r3, r3, #2
 800a3de:	2301      	movgt	r3, #1
 800a3e0:	4413      	add	r3, r2
 800a3e2:	e7de      	b.n	800a3a2 <_printf_float+0x192>
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	055a      	lsls	r2, r3, #21
 800a3e8:	d407      	bmi.n	800a3fa <_printf_float+0x1ea>
 800a3ea:	6923      	ldr	r3, [r4, #16]
 800a3ec:	4642      	mov	r2, r8
 800a3ee:	4631      	mov	r1, r6
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	47b8      	blx	r7
 800a3f4:	3001      	adds	r0, #1
 800a3f6:	d12b      	bne.n	800a450 <_printf_float+0x240>
 800a3f8:	e767      	b.n	800a2ca <_printf_float+0xba>
 800a3fa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a3fe:	f240 80dc 	bls.w	800a5ba <_printf_float+0x3aa>
 800a402:	2200      	movs	r2, #0
 800a404:	2300      	movs	r3, #0
 800a406:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a40a:	f7f6 fb65 	bl	8000ad8 <__aeabi_dcmpeq>
 800a40e:	2800      	cmp	r0, #0
 800a410:	d033      	beq.n	800a47a <_printf_float+0x26a>
 800a412:	2301      	movs	r3, #1
 800a414:	4a41      	ldr	r2, [pc, #260]	; (800a51c <_printf_float+0x30c>)
 800a416:	4631      	mov	r1, r6
 800a418:	4628      	mov	r0, r5
 800a41a:	47b8      	blx	r7
 800a41c:	3001      	adds	r0, #1
 800a41e:	f43f af54 	beq.w	800a2ca <_printf_float+0xba>
 800a422:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a426:	429a      	cmp	r2, r3
 800a428:	db02      	blt.n	800a430 <_printf_float+0x220>
 800a42a:	6823      	ldr	r3, [r4, #0]
 800a42c:	07d8      	lsls	r0, r3, #31
 800a42e:	d50f      	bpl.n	800a450 <_printf_float+0x240>
 800a430:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a434:	4631      	mov	r1, r6
 800a436:	4628      	mov	r0, r5
 800a438:	47b8      	blx	r7
 800a43a:	3001      	adds	r0, #1
 800a43c:	f43f af45 	beq.w	800a2ca <_printf_float+0xba>
 800a440:	f04f 0800 	mov.w	r8, #0
 800a444:	f104 091a 	add.w	r9, r4, #26
 800a448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a44a:	3b01      	subs	r3, #1
 800a44c:	4543      	cmp	r3, r8
 800a44e:	dc09      	bgt.n	800a464 <_printf_float+0x254>
 800a450:	6823      	ldr	r3, [r4, #0]
 800a452:	079b      	lsls	r3, r3, #30
 800a454:	f100 8103 	bmi.w	800a65e <_printf_float+0x44e>
 800a458:	68e0      	ldr	r0, [r4, #12]
 800a45a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a45c:	4298      	cmp	r0, r3
 800a45e:	bfb8      	it	lt
 800a460:	4618      	movlt	r0, r3
 800a462:	e734      	b.n	800a2ce <_printf_float+0xbe>
 800a464:	2301      	movs	r3, #1
 800a466:	464a      	mov	r2, r9
 800a468:	4631      	mov	r1, r6
 800a46a:	4628      	mov	r0, r5
 800a46c:	47b8      	blx	r7
 800a46e:	3001      	adds	r0, #1
 800a470:	f43f af2b 	beq.w	800a2ca <_printf_float+0xba>
 800a474:	f108 0801 	add.w	r8, r8, #1
 800a478:	e7e6      	b.n	800a448 <_printf_float+0x238>
 800a47a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	dc2b      	bgt.n	800a4d8 <_printf_float+0x2c8>
 800a480:	2301      	movs	r3, #1
 800a482:	4a26      	ldr	r2, [pc, #152]	; (800a51c <_printf_float+0x30c>)
 800a484:	4631      	mov	r1, r6
 800a486:	4628      	mov	r0, r5
 800a488:	47b8      	blx	r7
 800a48a:	3001      	adds	r0, #1
 800a48c:	f43f af1d 	beq.w	800a2ca <_printf_float+0xba>
 800a490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a492:	b923      	cbnz	r3, 800a49e <_printf_float+0x28e>
 800a494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a496:	b913      	cbnz	r3, 800a49e <_printf_float+0x28e>
 800a498:	6823      	ldr	r3, [r4, #0]
 800a49a:	07d9      	lsls	r1, r3, #31
 800a49c:	d5d8      	bpl.n	800a450 <_printf_float+0x240>
 800a49e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4a2:	4631      	mov	r1, r6
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	47b8      	blx	r7
 800a4a8:	3001      	adds	r0, #1
 800a4aa:	f43f af0e 	beq.w	800a2ca <_printf_float+0xba>
 800a4ae:	f04f 0900 	mov.w	r9, #0
 800a4b2:	f104 0a1a 	add.w	sl, r4, #26
 800a4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b8:	425b      	negs	r3, r3
 800a4ba:	454b      	cmp	r3, r9
 800a4bc:	dc01      	bgt.n	800a4c2 <_printf_float+0x2b2>
 800a4be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4c0:	e794      	b.n	800a3ec <_printf_float+0x1dc>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	4652      	mov	r2, sl
 800a4c6:	4631      	mov	r1, r6
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	47b8      	blx	r7
 800a4cc:	3001      	adds	r0, #1
 800a4ce:	f43f aefc 	beq.w	800a2ca <_printf_float+0xba>
 800a4d2:	f109 0901 	add.w	r9, r9, #1
 800a4d6:	e7ee      	b.n	800a4b6 <_printf_float+0x2a6>
 800a4d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	bfa8      	it	ge
 800a4e0:	461a      	movge	r2, r3
 800a4e2:	2a00      	cmp	r2, #0
 800a4e4:	4691      	mov	r9, r2
 800a4e6:	dd07      	ble.n	800a4f8 <_printf_float+0x2e8>
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	4631      	mov	r1, r6
 800a4ec:	4642      	mov	r2, r8
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	47b8      	blx	r7
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	f43f aee9 	beq.w	800a2ca <_printf_float+0xba>
 800a4f8:	f104 031a 	add.w	r3, r4, #26
 800a4fc:	f04f 0b00 	mov.w	fp, #0
 800a500:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a504:	9306      	str	r3, [sp, #24]
 800a506:	e015      	b.n	800a534 <_printf_float+0x324>
 800a508:	7fefffff 	.word	0x7fefffff
 800a50c:	0800eada 	.word	0x0800eada
 800a510:	0800ead6 	.word	0x0800ead6
 800a514:	0800eae2 	.word	0x0800eae2
 800a518:	0800eade 	.word	0x0800eade
 800a51c:	0800eae6 	.word	0x0800eae6
 800a520:	2301      	movs	r3, #1
 800a522:	9a06      	ldr	r2, [sp, #24]
 800a524:	4631      	mov	r1, r6
 800a526:	4628      	mov	r0, r5
 800a528:	47b8      	blx	r7
 800a52a:	3001      	adds	r0, #1
 800a52c:	f43f aecd 	beq.w	800a2ca <_printf_float+0xba>
 800a530:	f10b 0b01 	add.w	fp, fp, #1
 800a534:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a538:	ebaa 0309 	sub.w	r3, sl, r9
 800a53c:	455b      	cmp	r3, fp
 800a53e:	dcef      	bgt.n	800a520 <_printf_float+0x310>
 800a540:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a544:	429a      	cmp	r2, r3
 800a546:	44d0      	add	r8, sl
 800a548:	db15      	blt.n	800a576 <_printf_float+0x366>
 800a54a:	6823      	ldr	r3, [r4, #0]
 800a54c:	07da      	lsls	r2, r3, #31
 800a54e:	d412      	bmi.n	800a576 <_printf_float+0x366>
 800a550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a552:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a554:	eba3 020a 	sub.w	r2, r3, sl
 800a558:	eba3 0a01 	sub.w	sl, r3, r1
 800a55c:	4592      	cmp	sl, r2
 800a55e:	bfa8      	it	ge
 800a560:	4692      	movge	sl, r2
 800a562:	f1ba 0f00 	cmp.w	sl, #0
 800a566:	dc0e      	bgt.n	800a586 <_printf_float+0x376>
 800a568:	f04f 0800 	mov.w	r8, #0
 800a56c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a570:	f104 091a 	add.w	r9, r4, #26
 800a574:	e019      	b.n	800a5aa <_printf_float+0x39a>
 800a576:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a57a:	4631      	mov	r1, r6
 800a57c:	4628      	mov	r0, r5
 800a57e:	47b8      	blx	r7
 800a580:	3001      	adds	r0, #1
 800a582:	d1e5      	bne.n	800a550 <_printf_float+0x340>
 800a584:	e6a1      	b.n	800a2ca <_printf_float+0xba>
 800a586:	4653      	mov	r3, sl
 800a588:	4642      	mov	r2, r8
 800a58a:	4631      	mov	r1, r6
 800a58c:	4628      	mov	r0, r5
 800a58e:	47b8      	blx	r7
 800a590:	3001      	adds	r0, #1
 800a592:	d1e9      	bne.n	800a568 <_printf_float+0x358>
 800a594:	e699      	b.n	800a2ca <_printf_float+0xba>
 800a596:	2301      	movs	r3, #1
 800a598:	464a      	mov	r2, r9
 800a59a:	4631      	mov	r1, r6
 800a59c:	4628      	mov	r0, r5
 800a59e:	47b8      	blx	r7
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	f43f ae92 	beq.w	800a2ca <_printf_float+0xba>
 800a5a6:	f108 0801 	add.w	r8, r8, #1
 800a5aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5ae:	1a9b      	subs	r3, r3, r2
 800a5b0:	eba3 030a 	sub.w	r3, r3, sl
 800a5b4:	4543      	cmp	r3, r8
 800a5b6:	dcee      	bgt.n	800a596 <_printf_float+0x386>
 800a5b8:	e74a      	b.n	800a450 <_printf_float+0x240>
 800a5ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5bc:	2a01      	cmp	r2, #1
 800a5be:	dc01      	bgt.n	800a5c4 <_printf_float+0x3b4>
 800a5c0:	07db      	lsls	r3, r3, #31
 800a5c2:	d53a      	bpl.n	800a63a <_printf_float+0x42a>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	4642      	mov	r2, r8
 800a5c8:	4631      	mov	r1, r6
 800a5ca:	4628      	mov	r0, r5
 800a5cc:	47b8      	blx	r7
 800a5ce:	3001      	adds	r0, #1
 800a5d0:	f43f ae7b 	beq.w	800a2ca <_printf_float+0xba>
 800a5d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5d8:	4631      	mov	r1, r6
 800a5da:	4628      	mov	r0, r5
 800a5dc:	47b8      	blx	r7
 800a5de:	3001      	adds	r0, #1
 800a5e0:	f108 0801 	add.w	r8, r8, #1
 800a5e4:	f43f ae71 	beq.w	800a2ca <_printf_float+0xba>
 800a5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800a5f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	f7f6 fa6f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5fa:	b9c8      	cbnz	r0, 800a630 <_printf_float+0x420>
 800a5fc:	4653      	mov	r3, sl
 800a5fe:	4642      	mov	r2, r8
 800a600:	4631      	mov	r1, r6
 800a602:	4628      	mov	r0, r5
 800a604:	47b8      	blx	r7
 800a606:	3001      	adds	r0, #1
 800a608:	d10e      	bne.n	800a628 <_printf_float+0x418>
 800a60a:	e65e      	b.n	800a2ca <_printf_float+0xba>
 800a60c:	2301      	movs	r3, #1
 800a60e:	4652      	mov	r2, sl
 800a610:	4631      	mov	r1, r6
 800a612:	4628      	mov	r0, r5
 800a614:	47b8      	blx	r7
 800a616:	3001      	adds	r0, #1
 800a618:	f43f ae57 	beq.w	800a2ca <_printf_float+0xba>
 800a61c:	f108 0801 	add.w	r8, r8, #1
 800a620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a622:	3b01      	subs	r3, #1
 800a624:	4543      	cmp	r3, r8
 800a626:	dcf1      	bgt.n	800a60c <_printf_float+0x3fc>
 800a628:	464b      	mov	r3, r9
 800a62a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a62e:	e6de      	b.n	800a3ee <_printf_float+0x1de>
 800a630:	f04f 0800 	mov.w	r8, #0
 800a634:	f104 0a1a 	add.w	sl, r4, #26
 800a638:	e7f2      	b.n	800a620 <_printf_float+0x410>
 800a63a:	2301      	movs	r3, #1
 800a63c:	e7df      	b.n	800a5fe <_printf_float+0x3ee>
 800a63e:	2301      	movs	r3, #1
 800a640:	464a      	mov	r2, r9
 800a642:	4631      	mov	r1, r6
 800a644:	4628      	mov	r0, r5
 800a646:	47b8      	blx	r7
 800a648:	3001      	adds	r0, #1
 800a64a:	f43f ae3e 	beq.w	800a2ca <_printf_float+0xba>
 800a64e:	f108 0801 	add.w	r8, r8, #1
 800a652:	68e3      	ldr	r3, [r4, #12]
 800a654:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a656:	1a9b      	subs	r3, r3, r2
 800a658:	4543      	cmp	r3, r8
 800a65a:	dcf0      	bgt.n	800a63e <_printf_float+0x42e>
 800a65c:	e6fc      	b.n	800a458 <_printf_float+0x248>
 800a65e:	f04f 0800 	mov.w	r8, #0
 800a662:	f104 0919 	add.w	r9, r4, #25
 800a666:	e7f4      	b.n	800a652 <_printf_float+0x442>
 800a668:	2900      	cmp	r1, #0
 800a66a:	f43f ae8b 	beq.w	800a384 <_printf_float+0x174>
 800a66e:	2300      	movs	r3, #0
 800a670:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a674:	ab09      	add	r3, sp, #36	; 0x24
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	ec49 8b10 	vmov	d0, r8, r9
 800a67c:	6022      	str	r2, [r4, #0]
 800a67e:	f8cd a004 	str.w	sl, [sp, #4]
 800a682:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a686:	4628      	mov	r0, r5
 800a688:	f7ff fd2e 	bl	800a0e8 <__cvt>
 800a68c:	4680      	mov	r8, r0
 800a68e:	e648      	b.n	800a322 <_printf_float+0x112>

0800a690 <_printf_common>:
 800a690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a694:	4691      	mov	r9, r2
 800a696:	461f      	mov	r7, r3
 800a698:	688a      	ldr	r2, [r1, #8]
 800a69a:	690b      	ldr	r3, [r1, #16]
 800a69c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	bfb8      	it	lt
 800a6a4:	4613      	movlt	r3, r2
 800a6a6:	f8c9 3000 	str.w	r3, [r9]
 800a6aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	460c      	mov	r4, r1
 800a6b2:	b112      	cbz	r2, 800a6ba <_printf_common+0x2a>
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	f8c9 3000 	str.w	r3, [r9]
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	0699      	lsls	r1, r3, #26
 800a6be:	bf42      	ittt	mi
 800a6c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a6c4:	3302      	addmi	r3, #2
 800a6c6:	f8c9 3000 	strmi.w	r3, [r9]
 800a6ca:	6825      	ldr	r5, [r4, #0]
 800a6cc:	f015 0506 	ands.w	r5, r5, #6
 800a6d0:	d107      	bne.n	800a6e2 <_printf_common+0x52>
 800a6d2:	f104 0a19 	add.w	sl, r4, #25
 800a6d6:	68e3      	ldr	r3, [r4, #12]
 800a6d8:	f8d9 2000 	ldr.w	r2, [r9]
 800a6dc:	1a9b      	subs	r3, r3, r2
 800a6de:	42ab      	cmp	r3, r5
 800a6e0:	dc28      	bgt.n	800a734 <_printf_common+0xa4>
 800a6e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a6e6:	6822      	ldr	r2, [r4, #0]
 800a6e8:	3300      	adds	r3, #0
 800a6ea:	bf18      	it	ne
 800a6ec:	2301      	movne	r3, #1
 800a6ee:	0692      	lsls	r2, r2, #26
 800a6f0:	d42d      	bmi.n	800a74e <_printf_common+0xbe>
 800a6f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6f6:	4639      	mov	r1, r7
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	47c0      	blx	r8
 800a6fc:	3001      	adds	r0, #1
 800a6fe:	d020      	beq.n	800a742 <_printf_common+0xb2>
 800a700:	6823      	ldr	r3, [r4, #0]
 800a702:	68e5      	ldr	r5, [r4, #12]
 800a704:	f8d9 2000 	ldr.w	r2, [r9]
 800a708:	f003 0306 	and.w	r3, r3, #6
 800a70c:	2b04      	cmp	r3, #4
 800a70e:	bf08      	it	eq
 800a710:	1aad      	subeq	r5, r5, r2
 800a712:	68a3      	ldr	r3, [r4, #8]
 800a714:	6922      	ldr	r2, [r4, #16]
 800a716:	bf0c      	ite	eq
 800a718:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a71c:	2500      	movne	r5, #0
 800a71e:	4293      	cmp	r3, r2
 800a720:	bfc4      	itt	gt
 800a722:	1a9b      	subgt	r3, r3, r2
 800a724:	18ed      	addgt	r5, r5, r3
 800a726:	f04f 0900 	mov.w	r9, #0
 800a72a:	341a      	adds	r4, #26
 800a72c:	454d      	cmp	r5, r9
 800a72e:	d11a      	bne.n	800a766 <_printf_common+0xd6>
 800a730:	2000      	movs	r0, #0
 800a732:	e008      	b.n	800a746 <_printf_common+0xb6>
 800a734:	2301      	movs	r3, #1
 800a736:	4652      	mov	r2, sl
 800a738:	4639      	mov	r1, r7
 800a73a:	4630      	mov	r0, r6
 800a73c:	47c0      	blx	r8
 800a73e:	3001      	adds	r0, #1
 800a740:	d103      	bne.n	800a74a <_printf_common+0xba>
 800a742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a74a:	3501      	adds	r5, #1
 800a74c:	e7c3      	b.n	800a6d6 <_printf_common+0x46>
 800a74e:	18e1      	adds	r1, r4, r3
 800a750:	1c5a      	adds	r2, r3, #1
 800a752:	2030      	movs	r0, #48	; 0x30
 800a754:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a758:	4422      	add	r2, r4
 800a75a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a75e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a762:	3302      	adds	r3, #2
 800a764:	e7c5      	b.n	800a6f2 <_printf_common+0x62>
 800a766:	2301      	movs	r3, #1
 800a768:	4622      	mov	r2, r4
 800a76a:	4639      	mov	r1, r7
 800a76c:	4630      	mov	r0, r6
 800a76e:	47c0      	blx	r8
 800a770:	3001      	adds	r0, #1
 800a772:	d0e6      	beq.n	800a742 <_printf_common+0xb2>
 800a774:	f109 0901 	add.w	r9, r9, #1
 800a778:	e7d8      	b.n	800a72c <_printf_common+0x9c>
	...

0800a77c <_printf_i>:
 800a77c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a780:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a784:	460c      	mov	r4, r1
 800a786:	7e09      	ldrb	r1, [r1, #24]
 800a788:	b085      	sub	sp, #20
 800a78a:	296e      	cmp	r1, #110	; 0x6e
 800a78c:	4617      	mov	r7, r2
 800a78e:	4606      	mov	r6, r0
 800a790:	4698      	mov	r8, r3
 800a792:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a794:	f000 80b3 	beq.w	800a8fe <_printf_i+0x182>
 800a798:	d822      	bhi.n	800a7e0 <_printf_i+0x64>
 800a79a:	2963      	cmp	r1, #99	; 0x63
 800a79c:	d036      	beq.n	800a80c <_printf_i+0x90>
 800a79e:	d80a      	bhi.n	800a7b6 <_printf_i+0x3a>
 800a7a0:	2900      	cmp	r1, #0
 800a7a2:	f000 80b9 	beq.w	800a918 <_printf_i+0x19c>
 800a7a6:	2958      	cmp	r1, #88	; 0x58
 800a7a8:	f000 8083 	beq.w	800a8b2 <_printf_i+0x136>
 800a7ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a7b4:	e032      	b.n	800a81c <_printf_i+0xa0>
 800a7b6:	2964      	cmp	r1, #100	; 0x64
 800a7b8:	d001      	beq.n	800a7be <_printf_i+0x42>
 800a7ba:	2969      	cmp	r1, #105	; 0x69
 800a7bc:	d1f6      	bne.n	800a7ac <_printf_i+0x30>
 800a7be:	6820      	ldr	r0, [r4, #0]
 800a7c0:	6813      	ldr	r3, [r2, #0]
 800a7c2:	0605      	lsls	r5, r0, #24
 800a7c4:	f103 0104 	add.w	r1, r3, #4
 800a7c8:	d52a      	bpl.n	800a820 <_printf_i+0xa4>
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6011      	str	r1, [r2, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	da03      	bge.n	800a7da <_printf_i+0x5e>
 800a7d2:	222d      	movs	r2, #45	; 0x2d
 800a7d4:	425b      	negs	r3, r3
 800a7d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a7da:	486f      	ldr	r0, [pc, #444]	; (800a998 <_printf_i+0x21c>)
 800a7dc:	220a      	movs	r2, #10
 800a7de:	e039      	b.n	800a854 <_printf_i+0xd8>
 800a7e0:	2973      	cmp	r1, #115	; 0x73
 800a7e2:	f000 809d 	beq.w	800a920 <_printf_i+0x1a4>
 800a7e6:	d808      	bhi.n	800a7fa <_printf_i+0x7e>
 800a7e8:	296f      	cmp	r1, #111	; 0x6f
 800a7ea:	d020      	beq.n	800a82e <_printf_i+0xb2>
 800a7ec:	2970      	cmp	r1, #112	; 0x70
 800a7ee:	d1dd      	bne.n	800a7ac <_printf_i+0x30>
 800a7f0:	6823      	ldr	r3, [r4, #0]
 800a7f2:	f043 0320 	orr.w	r3, r3, #32
 800a7f6:	6023      	str	r3, [r4, #0]
 800a7f8:	e003      	b.n	800a802 <_printf_i+0x86>
 800a7fa:	2975      	cmp	r1, #117	; 0x75
 800a7fc:	d017      	beq.n	800a82e <_printf_i+0xb2>
 800a7fe:	2978      	cmp	r1, #120	; 0x78
 800a800:	d1d4      	bne.n	800a7ac <_printf_i+0x30>
 800a802:	2378      	movs	r3, #120	; 0x78
 800a804:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a808:	4864      	ldr	r0, [pc, #400]	; (800a99c <_printf_i+0x220>)
 800a80a:	e055      	b.n	800a8b8 <_printf_i+0x13c>
 800a80c:	6813      	ldr	r3, [r2, #0]
 800a80e:	1d19      	adds	r1, r3, #4
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	6011      	str	r1, [r2, #0]
 800a814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a81c:	2301      	movs	r3, #1
 800a81e:	e08c      	b.n	800a93a <_printf_i+0x1be>
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	6011      	str	r1, [r2, #0]
 800a824:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a828:	bf18      	it	ne
 800a82a:	b21b      	sxthne	r3, r3
 800a82c:	e7cf      	b.n	800a7ce <_printf_i+0x52>
 800a82e:	6813      	ldr	r3, [r2, #0]
 800a830:	6825      	ldr	r5, [r4, #0]
 800a832:	1d18      	adds	r0, r3, #4
 800a834:	6010      	str	r0, [r2, #0]
 800a836:	0628      	lsls	r0, r5, #24
 800a838:	d501      	bpl.n	800a83e <_printf_i+0xc2>
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	e002      	b.n	800a844 <_printf_i+0xc8>
 800a83e:	0668      	lsls	r0, r5, #25
 800a840:	d5fb      	bpl.n	800a83a <_printf_i+0xbe>
 800a842:	881b      	ldrh	r3, [r3, #0]
 800a844:	4854      	ldr	r0, [pc, #336]	; (800a998 <_printf_i+0x21c>)
 800a846:	296f      	cmp	r1, #111	; 0x6f
 800a848:	bf14      	ite	ne
 800a84a:	220a      	movne	r2, #10
 800a84c:	2208      	moveq	r2, #8
 800a84e:	2100      	movs	r1, #0
 800a850:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a854:	6865      	ldr	r5, [r4, #4]
 800a856:	60a5      	str	r5, [r4, #8]
 800a858:	2d00      	cmp	r5, #0
 800a85a:	f2c0 8095 	blt.w	800a988 <_printf_i+0x20c>
 800a85e:	6821      	ldr	r1, [r4, #0]
 800a860:	f021 0104 	bic.w	r1, r1, #4
 800a864:	6021      	str	r1, [r4, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d13d      	bne.n	800a8e6 <_printf_i+0x16a>
 800a86a:	2d00      	cmp	r5, #0
 800a86c:	f040 808e 	bne.w	800a98c <_printf_i+0x210>
 800a870:	4665      	mov	r5, ip
 800a872:	2a08      	cmp	r2, #8
 800a874:	d10b      	bne.n	800a88e <_printf_i+0x112>
 800a876:	6823      	ldr	r3, [r4, #0]
 800a878:	07db      	lsls	r3, r3, #31
 800a87a:	d508      	bpl.n	800a88e <_printf_i+0x112>
 800a87c:	6923      	ldr	r3, [r4, #16]
 800a87e:	6862      	ldr	r2, [r4, #4]
 800a880:	429a      	cmp	r2, r3
 800a882:	bfde      	ittt	le
 800a884:	2330      	movle	r3, #48	; 0x30
 800a886:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a88a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a88e:	ebac 0305 	sub.w	r3, ip, r5
 800a892:	6123      	str	r3, [r4, #16]
 800a894:	f8cd 8000 	str.w	r8, [sp]
 800a898:	463b      	mov	r3, r7
 800a89a:	aa03      	add	r2, sp, #12
 800a89c:	4621      	mov	r1, r4
 800a89e:	4630      	mov	r0, r6
 800a8a0:	f7ff fef6 	bl	800a690 <_printf_common>
 800a8a4:	3001      	adds	r0, #1
 800a8a6:	d14d      	bne.n	800a944 <_printf_i+0x1c8>
 800a8a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8ac:	b005      	add	sp, #20
 800a8ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8b2:	4839      	ldr	r0, [pc, #228]	; (800a998 <_printf_i+0x21c>)
 800a8b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a8b8:	6813      	ldr	r3, [r2, #0]
 800a8ba:	6821      	ldr	r1, [r4, #0]
 800a8bc:	1d1d      	adds	r5, r3, #4
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6015      	str	r5, [r2, #0]
 800a8c2:	060a      	lsls	r2, r1, #24
 800a8c4:	d50b      	bpl.n	800a8de <_printf_i+0x162>
 800a8c6:	07ca      	lsls	r2, r1, #31
 800a8c8:	bf44      	itt	mi
 800a8ca:	f041 0120 	orrmi.w	r1, r1, #32
 800a8ce:	6021      	strmi	r1, [r4, #0]
 800a8d0:	b91b      	cbnz	r3, 800a8da <_printf_i+0x15e>
 800a8d2:	6822      	ldr	r2, [r4, #0]
 800a8d4:	f022 0220 	bic.w	r2, r2, #32
 800a8d8:	6022      	str	r2, [r4, #0]
 800a8da:	2210      	movs	r2, #16
 800a8dc:	e7b7      	b.n	800a84e <_printf_i+0xd2>
 800a8de:	064d      	lsls	r5, r1, #25
 800a8e0:	bf48      	it	mi
 800a8e2:	b29b      	uxthmi	r3, r3
 800a8e4:	e7ef      	b.n	800a8c6 <_printf_i+0x14a>
 800a8e6:	4665      	mov	r5, ip
 800a8e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8ec:	fb02 3311 	mls	r3, r2, r1, r3
 800a8f0:	5cc3      	ldrb	r3, [r0, r3]
 800a8f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	2900      	cmp	r1, #0
 800a8fa:	d1f5      	bne.n	800a8e8 <_printf_i+0x16c>
 800a8fc:	e7b9      	b.n	800a872 <_printf_i+0xf6>
 800a8fe:	6813      	ldr	r3, [r2, #0]
 800a900:	6825      	ldr	r5, [r4, #0]
 800a902:	6961      	ldr	r1, [r4, #20]
 800a904:	1d18      	adds	r0, r3, #4
 800a906:	6010      	str	r0, [r2, #0]
 800a908:	0628      	lsls	r0, r5, #24
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	d501      	bpl.n	800a912 <_printf_i+0x196>
 800a90e:	6019      	str	r1, [r3, #0]
 800a910:	e002      	b.n	800a918 <_printf_i+0x19c>
 800a912:	066a      	lsls	r2, r5, #25
 800a914:	d5fb      	bpl.n	800a90e <_printf_i+0x192>
 800a916:	8019      	strh	r1, [r3, #0]
 800a918:	2300      	movs	r3, #0
 800a91a:	6123      	str	r3, [r4, #16]
 800a91c:	4665      	mov	r5, ip
 800a91e:	e7b9      	b.n	800a894 <_printf_i+0x118>
 800a920:	6813      	ldr	r3, [r2, #0]
 800a922:	1d19      	adds	r1, r3, #4
 800a924:	6011      	str	r1, [r2, #0]
 800a926:	681d      	ldr	r5, [r3, #0]
 800a928:	6862      	ldr	r2, [r4, #4]
 800a92a:	2100      	movs	r1, #0
 800a92c:	4628      	mov	r0, r5
 800a92e:	f7f5 fc5f 	bl	80001f0 <memchr>
 800a932:	b108      	cbz	r0, 800a938 <_printf_i+0x1bc>
 800a934:	1b40      	subs	r0, r0, r5
 800a936:	6060      	str	r0, [r4, #4]
 800a938:	6863      	ldr	r3, [r4, #4]
 800a93a:	6123      	str	r3, [r4, #16]
 800a93c:	2300      	movs	r3, #0
 800a93e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a942:	e7a7      	b.n	800a894 <_printf_i+0x118>
 800a944:	6923      	ldr	r3, [r4, #16]
 800a946:	462a      	mov	r2, r5
 800a948:	4639      	mov	r1, r7
 800a94a:	4630      	mov	r0, r6
 800a94c:	47c0      	blx	r8
 800a94e:	3001      	adds	r0, #1
 800a950:	d0aa      	beq.n	800a8a8 <_printf_i+0x12c>
 800a952:	6823      	ldr	r3, [r4, #0]
 800a954:	079b      	lsls	r3, r3, #30
 800a956:	d413      	bmi.n	800a980 <_printf_i+0x204>
 800a958:	68e0      	ldr	r0, [r4, #12]
 800a95a:	9b03      	ldr	r3, [sp, #12]
 800a95c:	4298      	cmp	r0, r3
 800a95e:	bfb8      	it	lt
 800a960:	4618      	movlt	r0, r3
 800a962:	e7a3      	b.n	800a8ac <_printf_i+0x130>
 800a964:	2301      	movs	r3, #1
 800a966:	464a      	mov	r2, r9
 800a968:	4639      	mov	r1, r7
 800a96a:	4630      	mov	r0, r6
 800a96c:	47c0      	blx	r8
 800a96e:	3001      	adds	r0, #1
 800a970:	d09a      	beq.n	800a8a8 <_printf_i+0x12c>
 800a972:	3501      	adds	r5, #1
 800a974:	68e3      	ldr	r3, [r4, #12]
 800a976:	9a03      	ldr	r2, [sp, #12]
 800a978:	1a9b      	subs	r3, r3, r2
 800a97a:	42ab      	cmp	r3, r5
 800a97c:	dcf2      	bgt.n	800a964 <_printf_i+0x1e8>
 800a97e:	e7eb      	b.n	800a958 <_printf_i+0x1dc>
 800a980:	2500      	movs	r5, #0
 800a982:	f104 0919 	add.w	r9, r4, #25
 800a986:	e7f5      	b.n	800a974 <_printf_i+0x1f8>
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d1ac      	bne.n	800a8e6 <_printf_i+0x16a>
 800a98c:	7803      	ldrb	r3, [r0, #0]
 800a98e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a992:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a996:	e76c      	b.n	800a872 <_printf_i+0xf6>
 800a998:	0800eae8 	.word	0x0800eae8
 800a99c:	0800eaf9 	.word	0x0800eaf9

0800a9a0 <_scanf_float>:
 800a9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a4:	469a      	mov	sl, r3
 800a9a6:	688b      	ldr	r3, [r1, #8]
 800a9a8:	4616      	mov	r6, r2
 800a9aa:	1e5a      	subs	r2, r3, #1
 800a9ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a9b0:	b087      	sub	sp, #28
 800a9b2:	bf83      	ittte	hi
 800a9b4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800a9b8:	189b      	addhi	r3, r3, r2
 800a9ba:	9301      	strhi	r3, [sp, #4]
 800a9bc:	2300      	movls	r3, #0
 800a9be:	bf86      	itte	hi
 800a9c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a9c4:	608b      	strhi	r3, [r1, #8]
 800a9c6:	9301      	strls	r3, [sp, #4]
 800a9c8:	680b      	ldr	r3, [r1, #0]
 800a9ca:	4688      	mov	r8, r1
 800a9cc:	f04f 0b00 	mov.w	fp, #0
 800a9d0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a9d4:	f848 3b1c 	str.w	r3, [r8], #28
 800a9d8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800a9dc:	4607      	mov	r7, r0
 800a9de:	460c      	mov	r4, r1
 800a9e0:	4645      	mov	r5, r8
 800a9e2:	465a      	mov	r2, fp
 800a9e4:	46d9      	mov	r9, fp
 800a9e6:	f8cd b008 	str.w	fp, [sp, #8]
 800a9ea:	68a1      	ldr	r1, [r4, #8]
 800a9ec:	b181      	cbz	r1, 800aa10 <_scanf_float+0x70>
 800a9ee:	6833      	ldr	r3, [r6, #0]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	2b49      	cmp	r3, #73	; 0x49
 800a9f4:	d071      	beq.n	800aada <_scanf_float+0x13a>
 800a9f6:	d84d      	bhi.n	800aa94 <_scanf_float+0xf4>
 800a9f8:	2b39      	cmp	r3, #57	; 0x39
 800a9fa:	d840      	bhi.n	800aa7e <_scanf_float+0xde>
 800a9fc:	2b31      	cmp	r3, #49	; 0x31
 800a9fe:	f080 8088 	bcs.w	800ab12 <_scanf_float+0x172>
 800aa02:	2b2d      	cmp	r3, #45	; 0x2d
 800aa04:	f000 8090 	beq.w	800ab28 <_scanf_float+0x188>
 800aa08:	d815      	bhi.n	800aa36 <_scanf_float+0x96>
 800aa0a:	2b2b      	cmp	r3, #43	; 0x2b
 800aa0c:	f000 808c 	beq.w	800ab28 <_scanf_float+0x188>
 800aa10:	f1b9 0f00 	cmp.w	r9, #0
 800aa14:	d003      	beq.n	800aa1e <_scanf_float+0x7e>
 800aa16:	6823      	ldr	r3, [r4, #0]
 800aa18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	3a01      	subs	r2, #1
 800aa20:	2a01      	cmp	r2, #1
 800aa22:	f200 80ea 	bhi.w	800abfa <_scanf_float+0x25a>
 800aa26:	4545      	cmp	r5, r8
 800aa28:	f200 80dc 	bhi.w	800abe4 <_scanf_float+0x244>
 800aa2c:	2601      	movs	r6, #1
 800aa2e:	4630      	mov	r0, r6
 800aa30:	b007      	add	sp, #28
 800aa32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa36:	2b2e      	cmp	r3, #46	; 0x2e
 800aa38:	f000 809f 	beq.w	800ab7a <_scanf_float+0x1da>
 800aa3c:	2b30      	cmp	r3, #48	; 0x30
 800aa3e:	d1e7      	bne.n	800aa10 <_scanf_float+0x70>
 800aa40:	6820      	ldr	r0, [r4, #0]
 800aa42:	f410 7f80 	tst.w	r0, #256	; 0x100
 800aa46:	d064      	beq.n	800ab12 <_scanf_float+0x172>
 800aa48:	9b01      	ldr	r3, [sp, #4]
 800aa4a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800aa4e:	6020      	str	r0, [r4, #0]
 800aa50:	f109 0901 	add.w	r9, r9, #1
 800aa54:	b11b      	cbz	r3, 800aa5e <_scanf_float+0xbe>
 800aa56:	3b01      	subs	r3, #1
 800aa58:	3101      	adds	r1, #1
 800aa5a:	9301      	str	r3, [sp, #4]
 800aa5c:	60a1      	str	r1, [r4, #8]
 800aa5e:	68a3      	ldr	r3, [r4, #8]
 800aa60:	3b01      	subs	r3, #1
 800aa62:	60a3      	str	r3, [r4, #8]
 800aa64:	6923      	ldr	r3, [r4, #16]
 800aa66:	3301      	adds	r3, #1
 800aa68:	6123      	str	r3, [r4, #16]
 800aa6a:	6873      	ldr	r3, [r6, #4]
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	6073      	str	r3, [r6, #4]
 800aa72:	f340 80ac 	ble.w	800abce <_scanf_float+0x22e>
 800aa76:	6833      	ldr	r3, [r6, #0]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	6033      	str	r3, [r6, #0]
 800aa7c:	e7b5      	b.n	800a9ea <_scanf_float+0x4a>
 800aa7e:	2b45      	cmp	r3, #69	; 0x45
 800aa80:	f000 8085 	beq.w	800ab8e <_scanf_float+0x1ee>
 800aa84:	2b46      	cmp	r3, #70	; 0x46
 800aa86:	d06a      	beq.n	800ab5e <_scanf_float+0x1be>
 800aa88:	2b41      	cmp	r3, #65	; 0x41
 800aa8a:	d1c1      	bne.n	800aa10 <_scanf_float+0x70>
 800aa8c:	2a01      	cmp	r2, #1
 800aa8e:	d1bf      	bne.n	800aa10 <_scanf_float+0x70>
 800aa90:	2202      	movs	r2, #2
 800aa92:	e046      	b.n	800ab22 <_scanf_float+0x182>
 800aa94:	2b65      	cmp	r3, #101	; 0x65
 800aa96:	d07a      	beq.n	800ab8e <_scanf_float+0x1ee>
 800aa98:	d818      	bhi.n	800aacc <_scanf_float+0x12c>
 800aa9a:	2b54      	cmp	r3, #84	; 0x54
 800aa9c:	d066      	beq.n	800ab6c <_scanf_float+0x1cc>
 800aa9e:	d811      	bhi.n	800aac4 <_scanf_float+0x124>
 800aaa0:	2b4e      	cmp	r3, #78	; 0x4e
 800aaa2:	d1b5      	bne.n	800aa10 <_scanf_float+0x70>
 800aaa4:	2a00      	cmp	r2, #0
 800aaa6:	d146      	bne.n	800ab36 <_scanf_float+0x196>
 800aaa8:	f1b9 0f00 	cmp.w	r9, #0
 800aaac:	d145      	bne.n	800ab3a <_scanf_float+0x19a>
 800aaae:	6821      	ldr	r1, [r4, #0]
 800aab0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800aab4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800aab8:	d13f      	bne.n	800ab3a <_scanf_float+0x19a>
 800aaba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800aabe:	6021      	str	r1, [r4, #0]
 800aac0:	2201      	movs	r2, #1
 800aac2:	e02e      	b.n	800ab22 <_scanf_float+0x182>
 800aac4:	2b59      	cmp	r3, #89	; 0x59
 800aac6:	d01e      	beq.n	800ab06 <_scanf_float+0x166>
 800aac8:	2b61      	cmp	r3, #97	; 0x61
 800aaca:	e7de      	b.n	800aa8a <_scanf_float+0xea>
 800aacc:	2b6e      	cmp	r3, #110	; 0x6e
 800aace:	d0e9      	beq.n	800aaa4 <_scanf_float+0x104>
 800aad0:	d815      	bhi.n	800aafe <_scanf_float+0x15e>
 800aad2:	2b66      	cmp	r3, #102	; 0x66
 800aad4:	d043      	beq.n	800ab5e <_scanf_float+0x1be>
 800aad6:	2b69      	cmp	r3, #105	; 0x69
 800aad8:	d19a      	bne.n	800aa10 <_scanf_float+0x70>
 800aada:	f1bb 0f00 	cmp.w	fp, #0
 800aade:	d138      	bne.n	800ab52 <_scanf_float+0x1b2>
 800aae0:	f1b9 0f00 	cmp.w	r9, #0
 800aae4:	d197      	bne.n	800aa16 <_scanf_float+0x76>
 800aae6:	6821      	ldr	r1, [r4, #0]
 800aae8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800aaec:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800aaf0:	d195      	bne.n	800aa1e <_scanf_float+0x7e>
 800aaf2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800aaf6:	6021      	str	r1, [r4, #0]
 800aaf8:	f04f 0b01 	mov.w	fp, #1
 800aafc:	e011      	b.n	800ab22 <_scanf_float+0x182>
 800aafe:	2b74      	cmp	r3, #116	; 0x74
 800ab00:	d034      	beq.n	800ab6c <_scanf_float+0x1cc>
 800ab02:	2b79      	cmp	r3, #121	; 0x79
 800ab04:	d184      	bne.n	800aa10 <_scanf_float+0x70>
 800ab06:	f1bb 0f07 	cmp.w	fp, #7
 800ab0a:	d181      	bne.n	800aa10 <_scanf_float+0x70>
 800ab0c:	f04f 0b08 	mov.w	fp, #8
 800ab10:	e007      	b.n	800ab22 <_scanf_float+0x182>
 800ab12:	eb12 0f0b 	cmn.w	r2, fp
 800ab16:	f47f af7b 	bne.w	800aa10 <_scanf_float+0x70>
 800ab1a:	6821      	ldr	r1, [r4, #0]
 800ab1c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800ab20:	6021      	str	r1, [r4, #0]
 800ab22:	702b      	strb	r3, [r5, #0]
 800ab24:	3501      	adds	r5, #1
 800ab26:	e79a      	b.n	800aa5e <_scanf_float+0xbe>
 800ab28:	6821      	ldr	r1, [r4, #0]
 800ab2a:	0608      	lsls	r0, r1, #24
 800ab2c:	f57f af70 	bpl.w	800aa10 <_scanf_float+0x70>
 800ab30:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ab34:	e7f4      	b.n	800ab20 <_scanf_float+0x180>
 800ab36:	2a02      	cmp	r2, #2
 800ab38:	d047      	beq.n	800abca <_scanf_float+0x22a>
 800ab3a:	f1bb 0f01 	cmp.w	fp, #1
 800ab3e:	d003      	beq.n	800ab48 <_scanf_float+0x1a8>
 800ab40:	f1bb 0f04 	cmp.w	fp, #4
 800ab44:	f47f af64 	bne.w	800aa10 <_scanf_float+0x70>
 800ab48:	f10b 0b01 	add.w	fp, fp, #1
 800ab4c:	fa5f fb8b 	uxtb.w	fp, fp
 800ab50:	e7e7      	b.n	800ab22 <_scanf_float+0x182>
 800ab52:	f1bb 0f03 	cmp.w	fp, #3
 800ab56:	d0f7      	beq.n	800ab48 <_scanf_float+0x1a8>
 800ab58:	f1bb 0f05 	cmp.w	fp, #5
 800ab5c:	e7f2      	b.n	800ab44 <_scanf_float+0x1a4>
 800ab5e:	f1bb 0f02 	cmp.w	fp, #2
 800ab62:	f47f af55 	bne.w	800aa10 <_scanf_float+0x70>
 800ab66:	f04f 0b03 	mov.w	fp, #3
 800ab6a:	e7da      	b.n	800ab22 <_scanf_float+0x182>
 800ab6c:	f1bb 0f06 	cmp.w	fp, #6
 800ab70:	f47f af4e 	bne.w	800aa10 <_scanf_float+0x70>
 800ab74:	f04f 0b07 	mov.w	fp, #7
 800ab78:	e7d3      	b.n	800ab22 <_scanf_float+0x182>
 800ab7a:	6821      	ldr	r1, [r4, #0]
 800ab7c:	0588      	lsls	r0, r1, #22
 800ab7e:	f57f af47 	bpl.w	800aa10 <_scanf_float+0x70>
 800ab82:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800ab86:	6021      	str	r1, [r4, #0]
 800ab88:	f8cd 9008 	str.w	r9, [sp, #8]
 800ab8c:	e7c9      	b.n	800ab22 <_scanf_float+0x182>
 800ab8e:	6821      	ldr	r1, [r4, #0]
 800ab90:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800ab94:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ab98:	d006      	beq.n	800aba8 <_scanf_float+0x208>
 800ab9a:	0548      	lsls	r0, r1, #21
 800ab9c:	f57f af38 	bpl.w	800aa10 <_scanf_float+0x70>
 800aba0:	f1b9 0f00 	cmp.w	r9, #0
 800aba4:	f43f af3b 	beq.w	800aa1e <_scanf_float+0x7e>
 800aba8:	0588      	lsls	r0, r1, #22
 800abaa:	bf58      	it	pl
 800abac:	9802      	ldrpl	r0, [sp, #8]
 800abae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800abb2:	bf58      	it	pl
 800abb4:	eba9 0000 	subpl.w	r0, r9, r0
 800abb8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800abbc:	bf58      	it	pl
 800abbe:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800abc2:	6021      	str	r1, [r4, #0]
 800abc4:	f04f 0900 	mov.w	r9, #0
 800abc8:	e7ab      	b.n	800ab22 <_scanf_float+0x182>
 800abca:	2203      	movs	r2, #3
 800abcc:	e7a9      	b.n	800ab22 <_scanf_float+0x182>
 800abce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800abd2:	9205      	str	r2, [sp, #20]
 800abd4:	4631      	mov	r1, r6
 800abd6:	4638      	mov	r0, r7
 800abd8:	4798      	blx	r3
 800abda:	9a05      	ldr	r2, [sp, #20]
 800abdc:	2800      	cmp	r0, #0
 800abde:	f43f af04 	beq.w	800a9ea <_scanf_float+0x4a>
 800abe2:	e715      	b.n	800aa10 <_scanf_float+0x70>
 800abe4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800abe8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800abec:	4632      	mov	r2, r6
 800abee:	4638      	mov	r0, r7
 800abf0:	4798      	blx	r3
 800abf2:	6923      	ldr	r3, [r4, #16]
 800abf4:	3b01      	subs	r3, #1
 800abf6:	6123      	str	r3, [r4, #16]
 800abf8:	e715      	b.n	800aa26 <_scanf_float+0x86>
 800abfa:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800abfe:	2b06      	cmp	r3, #6
 800ac00:	d80a      	bhi.n	800ac18 <_scanf_float+0x278>
 800ac02:	f1bb 0f02 	cmp.w	fp, #2
 800ac06:	d968      	bls.n	800acda <_scanf_float+0x33a>
 800ac08:	f1ab 0b03 	sub.w	fp, fp, #3
 800ac0c:	fa5f fb8b 	uxtb.w	fp, fp
 800ac10:	eba5 0b0b 	sub.w	fp, r5, fp
 800ac14:	455d      	cmp	r5, fp
 800ac16:	d14b      	bne.n	800acb0 <_scanf_float+0x310>
 800ac18:	6823      	ldr	r3, [r4, #0]
 800ac1a:	05da      	lsls	r2, r3, #23
 800ac1c:	d51f      	bpl.n	800ac5e <_scanf_float+0x2be>
 800ac1e:	055b      	lsls	r3, r3, #21
 800ac20:	d468      	bmi.n	800acf4 <_scanf_float+0x354>
 800ac22:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ac26:	6923      	ldr	r3, [r4, #16]
 800ac28:	2965      	cmp	r1, #101	; 0x65
 800ac2a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ac2e:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800ac32:	6123      	str	r3, [r4, #16]
 800ac34:	d00d      	beq.n	800ac52 <_scanf_float+0x2b2>
 800ac36:	2945      	cmp	r1, #69	; 0x45
 800ac38:	d00b      	beq.n	800ac52 <_scanf_float+0x2b2>
 800ac3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac3e:	4632      	mov	r2, r6
 800ac40:	4638      	mov	r0, r7
 800ac42:	4798      	blx	r3
 800ac44:	6923      	ldr	r3, [r4, #16]
 800ac46:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	f1a5 0b02 	sub.w	fp, r5, #2
 800ac50:	6123      	str	r3, [r4, #16]
 800ac52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac56:	4632      	mov	r2, r6
 800ac58:	4638      	mov	r0, r7
 800ac5a:	4798      	blx	r3
 800ac5c:	465d      	mov	r5, fp
 800ac5e:	6826      	ldr	r6, [r4, #0]
 800ac60:	f016 0610 	ands.w	r6, r6, #16
 800ac64:	d17a      	bne.n	800ad5c <_scanf_float+0x3bc>
 800ac66:	702e      	strb	r6, [r5, #0]
 800ac68:	6823      	ldr	r3, [r4, #0]
 800ac6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ac6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac72:	d142      	bne.n	800acfa <_scanf_float+0x35a>
 800ac74:	9b02      	ldr	r3, [sp, #8]
 800ac76:	eba9 0303 	sub.w	r3, r9, r3
 800ac7a:	425a      	negs	r2, r3
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d149      	bne.n	800ad14 <_scanf_float+0x374>
 800ac80:	2200      	movs	r2, #0
 800ac82:	4641      	mov	r1, r8
 800ac84:	4638      	mov	r0, r7
 800ac86:	f000 ff1f 	bl	800bac8 <_strtod_r>
 800ac8a:	6825      	ldr	r5, [r4, #0]
 800ac8c:	f8da 3000 	ldr.w	r3, [sl]
 800ac90:	f015 0f02 	tst.w	r5, #2
 800ac94:	f103 0204 	add.w	r2, r3, #4
 800ac98:	ec59 8b10 	vmov	r8, r9, d0
 800ac9c:	f8ca 2000 	str.w	r2, [sl]
 800aca0:	d043      	beq.n	800ad2a <_scanf_float+0x38a>
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	e9c3 8900 	strd	r8, r9, [r3]
 800aca8:	68e3      	ldr	r3, [r4, #12]
 800acaa:	3301      	adds	r3, #1
 800acac:	60e3      	str	r3, [r4, #12]
 800acae:	e6be      	b.n	800aa2e <_scanf_float+0x8e>
 800acb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acb4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800acb8:	4632      	mov	r2, r6
 800acba:	4638      	mov	r0, r7
 800acbc:	4798      	blx	r3
 800acbe:	6923      	ldr	r3, [r4, #16]
 800acc0:	3b01      	subs	r3, #1
 800acc2:	6123      	str	r3, [r4, #16]
 800acc4:	e7a6      	b.n	800ac14 <_scanf_float+0x274>
 800acc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acca:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800acce:	4632      	mov	r2, r6
 800acd0:	4638      	mov	r0, r7
 800acd2:	4798      	blx	r3
 800acd4:	6923      	ldr	r3, [r4, #16]
 800acd6:	3b01      	subs	r3, #1
 800acd8:	6123      	str	r3, [r4, #16]
 800acda:	4545      	cmp	r5, r8
 800acdc:	d8f3      	bhi.n	800acc6 <_scanf_float+0x326>
 800acde:	e6a5      	b.n	800aa2c <_scanf_float+0x8c>
 800ace0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ace4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ace8:	4632      	mov	r2, r6
 800acea:	4638      	mov	r0, r7
 800acec:	4798      	blx	r3
 800acee:	6923      	ldr	r3, [r4, #16]
 800acf0:	3b01      	subs	r3, #1
 800acf2:	6123      	str	r3, [r4, #16]
 800acf4:	4545      	cmp	r5, r8
 800acf6:	d8f3      	bhi.n	800ace0 <_scanf_float+0x340>
 800acf8:	e698      	b.n	800aa2c <_scanf_float+0x8c>
 800acfa:	9b03      	ldr	r3, [sp, #12]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d0bf      	beq.n	800ac80 <_scanf_float+0x2e0>
 800ad00:	9904      	ldr	r1, [sp, #16]
 800ad02:	230a      	movs	r3, #10
 800ad04:	4632      	mov	r2, r6
 800ad06:	3101      	adds	r1, #1
 800ad08:	4638      	mov	r0, r7
 800ad0a:	f000 ff69 	bl	800bbe0 <_strtol_r>
 800ad0e:	9b03      	ldr	r3, [sp, #12]
 800ad10:	9d04      	ldr	r5, [sp, #16]
 800ad12:	1ac2      	subs	r2, r0, r3
 800ad14:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ad18:	429d      	cmp	r5, r3
 800ad1a:	bf28      	it	cs
 800ad1c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800ad20:	490f      	ldr	r1, [pc, #60]	; (800ad60 <_scanf_float+0x3c0>)
 800ad22:	4628      	mov	r0, r5
 800ad24:	f000 f8a0 	bl	800ae68 <siprintf>
 800ad28:	e7aa      	b.n	800ac80 <_scanf_float+0x2e0>
 800ad2a:	f015 0504 	ands.w	r5, r5, #4
 800ad2e:	d1b8      	bne.n	800aca2 <_scanf_float+0x302>
 800ad30:	681f      	ldr	r7, [r3, #0]
 800ad32:	ee10 2a10 	vmov	r2, s0
 800ad36:	464b      	mov	r3, r9
 800ad38:	ee10 0a10 	vmov	r0, s0
 800ad3c:	4649      	mov	r1, r9
 800ad3e:	f7f5 fefd 	bl	8000b3c <__aeabi_dcmpun>
 800ad42:	b128      	cbz	r0, 800ad50 <_scanf_float+0x3b0>
 800ad44:	4628      	mov	r0, r5
 800ad46:	f000 f889 	bl	800ae5c <nanf>
 800ad4a:	ed87 0a00 	vstr	s0, [r7]
 800ad4e:	e7ab      	b.n	800aca8 <_scanf_float+0x308>
 800ad50:	4640      	mov	r0, r8
 800ad52:	4649      	mov	r1, r9
 800ad54:	f7f5 ff50 	bl	8000bf8 <__aeabi_d2f>
 800ad58:	6038      	str	r0, [r7, #0]
 800ad5a:	e7a5      	b.n	800aca8 <_scanf_float+0x308>
 800ad5c:	2600      	movs	r6, #0
 800ad5e:	e666      	b.n	800aa2e <_scanf_float+0x8e>
 800ad60:	0800eb0a 	.word	0x0800eb0a

0800ad64 <iprintf>:
 800ad64:	b40f      	push	{r0, r1, r2, r3}
 800ad66:	4b0a      	ldr	r3, [pc, #40]	; (800ad90 <iprintf+0x2c>)
 800ad68:	b513      	push	{r0, r1, r4, lr}
 800ad6a:	681c      	ldr	r4, [r3, #0]
 800ad6c:	b124      	cbz	r4, 800ad78 <iprintf+0x14>
 800ad6e:	69a3      	ldr	r3, [r4, #24]
 800ad70:	b913      	cbnz	r3, 800ad78 <iprintf+0x14>
 800ad72:	4620      	mov	r0, r4
 800ad74:	f001 ff48 	bl	800cc08 <__sinit>
 800ad78:	ab05      	add	r3, sp, #20
 800ad7a:	9a04      	ldr	r2, [sp, #16]
 800ad7c:	68a1      	ldr	r1, [r4, #8]
 800ad7e:	9301      	str	r3, [sp, #4]
 800ad80:	4620      	mov	r0, r4
 800ad82:	f003 f99f 	bl	800e0c4 <_vfiprintf_r>
 800ad86:	b002      	add	sp, #8
 800ad88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad8c:	b004      	add	sp, #16
 800ad8e:	4770      	bx	lr
 800ad90:	20000098 	.word	0x20000098

0800ad94 <_puts_r>:
 800ad94:	b570      	push	{r4, r5, r6, lr}
 800ad96:	460e      	mov	r6, r1
 800ad98:	4605      	mov	r5, r0
 800ad9a:	b118      	cbz	r0, 800ada4 <_puts_r+0x10>
 800ad9c:	6983      	ldr	r3, [r0, #24]
 800ad9e:	b90b      	cbnz	r3, 800ada4 <_puts_r+0x10>
 800ada0:	f001 ff32 	bl	800cc08 <__sinit>
 800ada4:	69ab      	ldr	r3, [r5, #24]
 800ada6:	68ac      	ldr	r4, [r5, #8]
 800ada8:	b913      	cbnz	r3, 800adb0 <_puts_r+0x1c>
 800adaa:	4628      	mov	r0, r5
 800adac:	f001 ff2c 	bl	800cc08 <__sinit>
 800adb0:	4b23      	ldr	r3, [pc, #140]	; (800ae40 <_puts_r+0xac>)
 800adb2:	429c      	cmp	r4, r3
 800adb4:	d117      	bne.n	800ade6 <_puts_r+0x52>
 800adb6:	686c      	ldr	r4, [r5, #4]
 800adb8:	89a3      	ldrh	r3, [r4, #12]
 800adba:	071b      	lsls	r3, r3, #28
 800adbc:	d51d      	bpl.n	800adfa <_puts_r+0x66>
 800adbe:	6923      	ldr	r3, [r4, #16]
 800adc0:	b1db      	cbz	r3, 800adfa <_puts_r+0x66>
 800adc2:	3e01      	subs	r6, #1
 800adc4:	68a3      	ldr	r3, [r4, #8]
 800adc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800adca:	3b01      	subs	r3, #1
 800adcc:	60a3      	str	r3, [r4, #8]
 800adce:	b9e9      	cbnz	r1, 800ae0c <_puts_r+0x78>
 800add0:	2b00      	cmp	r3, #0
 800add2:	da2e      	bge.n	800ae32 <_puts_r+0x9e>
 800add4:	4622      	mov	r2, r4
 800add6:	210a      	movs	r1, #10
 800add8:	4628      	mov	r0, r5
 800adda:	f000 ff13 	bl	800bc04 <__swbuf_r>
 800adde:	3001      	adds	r0, #1
 800ade0:	d011      	beq.n	800ae06 <_puts_r+0x72>
 800ade2:	200a      	movs	r0, #10
 800ade4:	e011      	b.n	800ae0a <_puts_r+0x76>
 800ade6:	4b17      	ldr	r3, [pc, #92]	; (800ae44 <_puts_r+0xb0>)
 800ade8:	429c      	cmp	r4, r3
 800adea:	d101      	bne.n	800adf0 <_puts_r+0x5c>
 800adec:	68ac      	ldr	r4, [r5, #8]
 800adee:	e7e3      	b.n	800adb8 <_puts_r+0x24>
 800adf0:	4b15      	ldr	r3, [pc, #84]	; (800ae48 <_puts_r+0xb4>)
 800adf2:	429c      	cmp	r4, r3
 800adf4:	bf08      	it	eq
 800adf6:	68ec      	ldreq	r4, [r5, #12]
 800adf8:	e7de      	b.n	800adb8 <_puts_r+0x24>
 800adfa:	4621      	mov	r1, r4
 800adfc:	4628      	mov	r0, r5
 800adfe:	f000 ff61 	bl	800bcc4 <__swsetup_r>
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d0dd      	beq.n	800adc2 <_puts_r+0x2e>
 800ae06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae0a:	bd70      	pop	{r4, r5, r6, pc}
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	da04      	bge.n	800ae1a <_puts_r+0x86>
 800ae10:	69a2      	ldr	r2, [r4, #24]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	dc06      	bgt.n	800ae24 <_puts_r+0x90>
 800ae16:	290a      	cmp	r1, #10
 800ae18:	d004      	beq.n	800ae24 <_puts_r+0x90>
 800ae1a:	6823      	ldr	r3, [r4, #0]
 800ae1c:	1c5a      	adds	r2, r3, #1
 800ae1e:	6022      	str	r2, [r4, #0]
 800ae20:	7019      	strb	r1, [r3, #0]
 800ae22:	e7cf      	b.n	800adc4 <_puts_r+0x30>
 800ae24:	4622      	mov	r2, r4
 800ae26:	4628      	mov	r0, r5
 800ae28:	f000 feec 	bl	800bc04 <__swbuf_r>
 800ae2c:	3001      	adds	r0, #1
 800ae2e:	d1c9      	bne.n	800adc4 <_puts_r+0x30>
 800ae30:	e7e9      	b.n	800ae06 <_puts_r+0x72>
 800ae32:	6823      	ldr	r3, [r4, #0]
 800ae34:	200a      	movs	r0, #10
 800ae36:	1c5a      	adds	r2, r3, #1
 800ae38:	6022      	str	r2, [r4, #0]
 800ae3a:	7018      	strb	r0, [r3, #0]
 800ae3c:	e7e5      	b.n	800ae0a <_puts_r+0x76>
 800ae3e:	bf00      	nop
 800ae40:	0800ec90 	.word	0x0800ec90
 800ae44:	0800ecb0 	.word	0x0800ecb0
 800ae48:	0800ec70 	.word	0x0800ec70

0800ae4c <puts>:
 800ae4c:	4b02      	ldr	r3, [pc, #8]	; (800ae58 <puts+0xc>)
 800ae4e:	4601      	mov	r1, r0
 800ae50:	6818      	ldr	r0, [r3, #0]
 800ae52:	f7ff bf9f 	b.w	800ad94 <_puts_r>
 800ae56:	bf00      	nop
 800ae58:	20000098 	.word	0x20000098

0800ae5c <nanf>:
 800ae5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ae64 <nanf+0x8>
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	7fc00000 	.word	0x7fc00000

0800ae68 <siprintf>:
 800ae68:	b40e      	push	{r1, r2, r3}
 800ae6a:	b500      	push	{lr}
 800ae6c:	b09c      	sub	sp, #112	; 0x70
 800ae6e:	ab1d      	add	r3, sp, #116	; 0x74
 800ae70:	9002      	str	r0, [sp, #8]
 800ae72:	9006      	str	r0, [sp, #24]
 800ae74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae78:	4809      	ldr	r0, [pc, #36]	; (800aea0 <siprintf+0x38>)
 800ae7a:	9107      	str	r1, [sp, #28]
 800ae7c:	9104      	str	r1, [sp, #16]
 800ae7e:	4909      	ldr	r1, [pc, #36]	; (800aea4 <siprintf+0x3c>)
 800ae80:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae84:	9105      	str	r1, [sp, #20]
 800ae86:	6800      	ldr	r0, [r0, #0]
 800ae88:	9301      	str	r3, [sp, #4]
 800ae8a:	a902      	add	r1, sp, #8
 800ae8c:	f002 fff8 	bl	800de80 <_svfiprintf_r>
 800ae90:	9b02      	ldr	r3, [sp, #8]
 800ae92:	2200      	movs	r2, #0
 800ae94:	701a      	strb	r2, [r3, #0]
 800ae96:	b01c      	add	sp, #112	; 0x70
 800ae98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae9c:	b003      	add	sp, #12
 800ae9e:	4770      	bx	lr
 800aea0:	20000098 	.word	0x20000098
 800aea4:	ffff0208 	.word	0xffff0208

0800aea8 <sulp>:
 800aea8:	b570      	push	{r4, r5, r6, lr}
 800aeaa:	4604      	mov	r4, r0
 800aeac:	460d      	mov	r5, r1
 800aeae:	ec45 4b10 	vmov	d0, r4, r5
 800aeb2:	4616      	mov	r6, r2
 800aeb4:	f002 fda0 	bl	800d9f8 <__ulp>
 800aeb8:	ec51 0b10 	vmov	r0, r1, d0
 800aebc:	b17e      	cbz	r6, 800aede <sulp+0x36>
 800aebe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aec2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	dd09      	ble.n	800aede <sulp+0x36>
 800aeca:	051b      	lsls	r3, r3, #20
 800aecc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aed0:	2400      	movs	r4, #0
 800aed2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aed6:	4622      	mov	r2, r4
 800aed8:	462b      	mov	r3, r5
 800aeda:	f7f5 fb95 	bl	8000608 <__aeabi_dmul>
 800aede:	bd70      	pop	{r4, r5, r6, pc}

0800aee0 <_strtod_l>:
 800aee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee4:	461f      	mov	r7, r3
 800aee6:	b0a1      	sub	sp, #132	; 0x84
 800aee8:	2300      	movs	r3, #0
 800aeea:	4681      	mov	r9, r0
 800aeec:	4638      	mov	r0, r7
 800aeee:	460e      	mov	r6, r1
 800aef0:	9217      	str	r2, [sp, #92]	; 0x5c
 800aef2:	931c      	str	r3, [sp, #112]	; 0x70
 800aef4:	f002 fa38 	bl	800d368 <__localeconv_l>
 800aef8:	4680      	mov	r8, r0
 800aefa:	6800      	ldr	r0, [r0, #0]
 800aefc:	f7f5 f970 	bl	80001e0 <strlen>
 800af00:	f04f 0a00 	mov.w	sl, #0
 800af04:	4604      	mov	r4, r0
 800af06:	f04f 0b00 	mov.w	fp, #0
 800af0a:	961b      	str	r6, [sp, #108]	; 0x6c
 800af0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af0e:	781a      	ldrb	r2, [r3, #0]
 800af10:	2a0d      	cmp	r2, #13
 800af12:	d832      	bhi.n	800af7a <_strtod_l+0x9a>
 800af14:	2a09      	cmp	r2, #9
 800af16:	d236      	bcs.n	800af86 <_strtod_l+0xa6>
 800af18:	2a00      	cmp	r2, #0
 800af1a:	d03e      	beq.n	800af9a <_strtod_l+0xba>
 800af1c:	2300      	movs	r3, #0
 800af1e:	930d      	str	r3, [sp, #52]	; 0x34
 800af20:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800af22:	782b      	ldrb	r3, [r5, #0]
 800af24:	2b30      	cmp	r3, #48	; 0x30
 800af26:	f040 80ac 	bne.w	800b082 <_strtod_l+0x1a2>
 800af2a:	786b      	ldrb	r3, [r5, #1]
 800af2c:	2b58      	cmp	r3, #88	; 0x58
 800af2e:	d001      	beq.n	800af34 <_strtod_l+0x54>
 800af30:	2b78      	cmp	r3, #120	; 0x78
 800af32:	d167      	bne.n	800b004 <_strtod_l+0x124>
 800af34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af36:	9301      	str	r3, [sp, #4]
 800af38:	ab1c      	add	r3, sp, #112	; 0x70
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	9702      	str	r7, [sp, #8]
 800af3e:	ab1d      	add	r3, sp, #116	; 0x74
 800af40:	4a88      	ldr	r2, [pc, #544]	; (800b164 <_strtod_l+0x284>)
 800af42:	a91b      	add	r1, sp, #108	; 0x6c
 800af44:	4648      	mov	r0, r9
 800af46:	f001 ff38 	bl	800cdba <__gethex>
 800af4a:	f010 0407 	ands.w	r4, r0, #7
 800af4e:	4606      	mov	r6, r0
 800af50:	d005      	beq.n	800af5e <_strtod_l+0x7e>
 800af52:	2c06      	cmp	r4, #6
 800af54:	d12b      	bne.n	800afae <_strtod_l+0xce>
 800af56:	3501      	adds	r5, #1
 800af58:	2300      	movs	r3, #0
 800af5a:	951b      	str	r5, [sp, #108]	; 0x6c
 800af5c:	930d      	str	r3, [sp, #52]	; 0x34
 800af5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af60:	2b00      	cmp	r3, #0
 800af62:	f040 859a 	bne.w	800ba9a <_strtod_l+0xbba>
 800af66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af68:	b1e3      	cbz	r3, 800afa4 <_strtod_l+0xc4>
 800af6a:	4652      	mov	r2, sl
 800af6c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800af70:	ec43 2b10 	vmov	d0, r2, r3
 800af74:	b021      	add	sp, #132	; 0x84
 800af76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7a:	2a2b      	cmp	r2, #43	; 0x2b
 800af7c:	d015      	beq.n	800afaa <_strtod_l+0xca>
 800af7e:	2a2d      	cmp	r2, #45	; 0x2d
 800af80:	d004      	beq.n	800af8c <_strtod_l+0xac>
 800af82:	2a20      	cmp	r2, #32
 800af84:	d1ca      	bne.n	800af1c <_strtod_l+0x3c>
 800af86:	3301      	adds	r3, #1
 800af88:	931b      	str	r3, [sp, #108]	; 0x6c
 800af8a:	e7bf      	b.n	800af0c <_strtod_l+0x2c>
 800af8c:	2201      	movs	r2, #1
 800af8e:	920d      	str	r2, [sp, #52]	; 0x34
 800af90:	1c5a      	adds	r2, r3, #1
 800af92:	921b      	str	r2, [sp, #108]	; 0x6c
 800af94:	785b      	ldrb	r3, [r3, #1]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1c2      	bne.n	800af20 <_strtod_l+0x40>
 800af9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af9c:	961b      	str	r6, [sp, #108]	; 0x6c
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f040 8579 	bne.w	800ba96 <_strtod_l+0xbb6>
 800afa4:	4652      	mov	r2, sl
 800afa6:	465b      	mov	r3, fp
 800afa8:	e7e2      	b.n	800af70 <_strtod_l+0x90>
 800afaa:	2200      	movs	r2, #0
 800afac:	e7ef      	b.n	800af8e <_strtod_l+0xae>
 800afae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800afb0:	b13a      	cbz	r2, 800afc2 <_strtod_l+0xe2>
 800afb2:	2135      	movs	r1, #53	; 0x35
 800afb4:	a81e      	add	r0, sp, #120	; 0x78
 800afb6:	f002 fe17 	bl	800dbe8 <__copybits>
 800afba:	991c      	ldr	r1, [sp, #112]	; 0x70
 800afbc:	4648      	mov	r0, r9
 800afbe:	f002 fa83 	bl	800d4c8 <_Bfree>
 800afc2:	3c01      	subs	r4, #1
 800afc4:	2c04      	cmp	r4, #4
 800afc6:	d806      	bhi.n	800afd6 <_strtod_l+0xf6>
 800afc8:	e8df f004 	tbb	[pc, r4]
 800afcc:	1714030a 	.word	0x1714030a
 800afd0:	0a          	.byte	0x0a
 800afd1:	00          	.byte	0x00
 800afd2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800afd6:	0730      	lsls	r0, r6, #28
 800afd8:	d5c1      	bpl.n	800af5e <_strtod_l+0x7e>
 800afda:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800afde:	e7be      	b.n	800af5e <_strtod_l+0x7e>
 800afe0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800afe4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800afe6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800afea:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800afee:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aff2:	e7f0      	b.n	800afd6 <_strtod_l+0xf6>
 800aff4:	f8df b170 	ldr.w	fp, [pc, #368]	; 800b168 <_strtod_l+0x288>
 800aff8:	e7ed      	b.n	800afd6 <_strtod_l+0xf6>
 800affa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800affe:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b002:	e7e8      	b.n	800afd6 <_strtod_l+0xf6>
 800b004:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b006:	1c5a      	adds	r2, r3, #1
 800b008:	921b      	str	r2, [sp, #108]	; 0x6c
 800b00a:	785b      	ldrb	r3, [r3, #1]
 800b00c:	2b30      	cmp	r3, #48	; 0x30
 800b00e:	d0f9      	beq.n	800b004 <_strtod_l+0x124>
 800b010:	2b00      	cmp	r3, #0
 800b012:	d0a4      	beq.n	800af5e <_strtod_l+0x7e>
 800b014:	2301      	movs	r3, #1
 800b016:	2500      	movs	r5, #0
 800b018:	9306      	str	r3, [sp, #24]
 800b01a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b01c:	9308      	str	r3, [sp, #32]
 800b01e:	9507      	str	r5, [sp, #28]
 800b020:	9505      	str	r5, [sp, #20]
 800b022:	220a      	movs	r2, #10
 800b024:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b026:	7807      	ldrb	r7, [r0, #0]
 800b028:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b02c:	b2d9      	uxtb	r1, r3
 800b02e:	2909      	cmp	r1, #9
 800b030:	d929      	bls.n	800b086 <_strtod_l+0x1a6>
 800b032:	4622      	mov	r2, r4
 800b034:	f8d8 1000 	ldr.w	r1, [r8]
 800b038:	f003 f9ad 	bl	800e396 <strncmp>
 800b03c:	2800      	cmp	r0, #0
 800b03e:	d031      	beq.n	800b0a4 <_strtod_l+0x1c4>
 800b040:	2000      	movs	r0, #0
 800b042:	9c05      	ldr	r4, [sp, #20]
 800b044:	9004      	str	r0, [sp, #16]
 800b046:	463b      	mov	r3, r7
 800b048:	4602      	mov	r2, r0
 800b04a:	2b65      	cmp	r3, #101	; 0x65
 800b04c:	d001      	beq.n	800b052 <_strtod_l+0x172>
 800b04e:	2b45      	cmp	r3, #69	; 0x45
 800b050:	d114      	bne.n	800b07c <_strtod_l+0x19c>
 800b052:	b924      	cbnz	r4, 800b05e <_strtod_l+0x17e>
 800b054:	b910      	cbnz	r0, 800b05c <_strtod_l+0x17c>
 800b056:	9b06      	ldr	r3, [sp, #24]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d09e      	beq.n	800af9a <_strtod_l+0xba>
 800b05c:	2400      	movs	r4, #0
 800b05e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b060:	1c73      	adds	r3, r6, #1
 800b062:	931b      	str	r3, [sp, #108]	; 0x6c
 800b064:	7873      	ldrb	r3, [r6, #1]
 800b066:	2b2b      	cmp	r3, #43	; 0x2b
 800b068:	d078      	beq.n	800b15c <_strtod_l+0x27c>
 800b06a:	2b2d      	cmp	r3, #45	; 0x2d
 800b06c:	d070      	beq.n	800b150 <_strtod_l+0x270>
 800b06e:	f04f 0c00 	mov.w	ip, #0
 800b072:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800b076:	2f09      	cmp	r7, #9
 800b078:	d97c      	bls.n	800b174 <_strtod_l+0x294>
 800b07a:	961b      	str	r6, [sp, #108]	; 0x6c
 800b07c:	f04f 0e00 	mov.w	lr, #0
 800b080:	e09a      	b.n	800b1b8 <_strtod_l+0x2d8>
 800b082:	2300      	movs	r3, #0
 800b084:	e7c7      	b.n	800b016 <_strtod_l+0x136>
 800b086:	9905      	ldr	r1, [sp, #20]
 800b088:	2908      	cmp	r1, #8
 800b08a:	bfdd      	ittte	le
 800b08c:	9907      	ldrle	r1, [sp, #28]
 800b08e:	fb02 3301 	mlale	r3, r2, r1, r3
 800b092:	9307      	strle	r3, [sp, #28]
 800b094:	fb02 3505 	mlagt	r5, r2, r5, r3
 800b098:	9b05      	ldr	r3, [sp, #20]
 800b09a:	3001      	adds	r0, #1
 800b09c:	3301      	adds	r3, #1
 800b09e:	9305      	str	r3, [sp, #20]
 800b0a0:	901b      	str	r0, [sp, #108]	; 0x6c
 800b0a2:	e7bf      	b.n	800b024 <_strtod_l+0x144>
 800b0a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0a6:	191a      	adds	r2, r3, r4
 800b0a8:	921b      	str	r2, [sp, #108]	; 0x6c
 800b0aa:	9a05      	ldr	r2, [sp, #20]
 800b0ac:	5d1b      	ldrb	r3, [r3, r4]
 800b0ae:	2a00      	cmp	r2, #0
 800b0b0:	d037      	beq.n	800b122 <_strtod_l+0x242>
 800b0b2:	9c05      	ldr	r4, [sp, #20]
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b0ba:	2909      	cmp	r1, #9
 800b0bc:	d913      	bls.n	800b0e6 <_strtod_l+0x206>
 800b0be:	2101      	movs	r1, #1
 800b0c0:	9104      	str	r1, [sp, #16]
 800b0c2:	e7c2      	b.n	800b04a <_strtod_l+0x16a>
 800b0c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0c6:	1c5a      	adds	r2, r3, #1
 800b0c8:	921b      	str	r2, [sp, #108]	; 0x6c
 800b0ca:	785b      	ldrb	r3, [r3, #1]
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	2b30      	cmp	r3, #48	; 0x30
 800b0d0:	d0f8      	beq.n	800b0c4 <_strtod_l+0x1e4>
 800b0d2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b0d6:	2a08      	cmp	r2, #8
 800b0d8:	f200 84e4 	bhi.w	800baa4 <_strtod_l+0xbc4>
 800b0dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b0de:	9208      	str	r2, [sp, #32]
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800b0ea:	f100 0101 	add.w	r1, r0, #1
 800b0ee:	d012      	beq.n	800b116 <_strtod_l+0x236>
 800b0f0:	440a      	add	r2, r1
 800b0f2:	eb00 0c04 	add.w	ip, r0, r4
 800b0f6:	4621      	mov	r1, r4
 800b0f8:	270a      	movs	r7, #10
 800b0fa:	458c      	cmp	ip, r1
 800b0fc:	d113      	bne.n	800b126 <_strtod_l+0x246>
 800b0fe:	1821      	adds	r1, r4, r0
 800b100:	2908      	cmp	r1, #8
 800b102:	f104 0401 	add.w	r4, r4, #1
 800b106:	4404      	add	r4, r0
 800b108:	dc19      	bgt.n	800b13e <_strtod_l+0x25e>
 800b10a:	9b07      	ldr	r3, [sp, #28]
 800b10c:	210a      	movs	r1, #10
 800b10e:	fb01 e303 	mla	r3, r1, r3, lr
 800b112:	9307      	str	r3, [sp, #28]
 800b114:	2100      	movs	r1, #0
 800b116:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b118:	1c58      	adds	r0, r3, #1
 800b11a:	901b      	str	r0, [sp, #108]	; 0x6c
 800b11c:	785b      	ldrb	r3, [r3, #1]
 800b11e:	4608      	mov	r0, r1
 800b120:	e7c9      	b.n	800b0b6 <_strtod_l+0x1d6>
 800b122:	9805      	ldr	r0, [sp, #20]
 800b124:	e7d3      	b.n	800b0ce <_strtod_l+0x1ee>
 800b126:	2908      	cmp	r1, #8
 800b128:	f101 0101 	add.w	r1, r1, #1
 800b12c:	dc03      	bgt.n	800b136 <_strtod_l+0x256>
 800b12e:	9b07      	ldr	r3, [sp, #28]
 800b130:	437b      	muls	r3, r7
 800b132:	9307      	str	r3, [sp, #28]
 800b134:	e7e1      	b.n	800b0fa <_strtod_l+0x21a>
 800b136:	2910      	cmp	r1, #16
 800b138:	bfd8      	it	le
 800b13a:	437d      	mulle	r5, r7
 800b13c:	e7dd      	b.n	800b0fa <_strtod_l+0x21a>
 800b13e:	2c10      	cmp	r4, #16
 800b140:	bfdc      	itt	le
 800b142:	210a      	movle	r1, #10
 800b144:	fb01 e505 	mlale	r5, r1, r5, lr
 800b148:	e7e4      	b.n	800b114 <_strtod_l+0x234>
 800b14a:	2301      	movs	r3, #1
 800b14c:	9304      	str	r3, [sp, #16]
 800b14e:	e781      	b.n	800b054 <_strtod_l+0x174>
 800b150:	f04f 0c01 	mov.w	ip, #1
 800b154:	1cb3      	adds	r3, r6, #2
 800b156:	931b      	str	r3, [sp, #108]	; 0x6c
 800b158:	78b3      	ldrb	r3, [r6, #2]
 800b15a:	e78a      	b.n	800b072 <_strtod_l+0x192>
 800b15c:	f04f 0c00 	mov.w	ip, #0
 800b160:	e7f8      	b.n	800b154 <_strtod_l+0x274>
 800b162:	bf00      	nop
 800b164:	0800eb10 	.word	0x0800eb10
 800b168:	7ff00000 	.word	0x7ff00000
 800b16c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b16e:	1c5f      	adds	r7, r3, #1
 800b170:	971b      	str	r7, [sp, #108]	; 0x6c
 800b172:	785b      	ldrb	r3, [r3, #1]
 800b174:	2b30      	cmp	r3, #48	; 0x30
 800b176:	d0f9      	beq.n	800b16c <_strtod_l+0x28c>
 800b178:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800b17c:	2f08      	cmp	r7, #8
 800b17e:	f63f af7d 	bhi.w	800b07c <_strtod_l+0x19c>
 800b182:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b186:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b188:	930a      	str	r3, [sp, #40]	; 0x28
 800b18a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b18c:	1c5f      	adds	r7, r3, #1
 800b18e:	971b      	str	r7, [sp, #108]	; 0x6c
 800b190:	785b      	ldrb	r3, [r3, #1]
 800b192:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800b196:	f1b8 0f09 	cmp.w	r8, #9
 800b19a:	d937      	bls.n	800b20c <_strtod_l+0x32c>
 800b19c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b19e:	1a7f      	subs	r7, r7, r1
 800b1a0:	2f08      	cmp	r7, #8
 800b1a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b1a6:	dc37      	bgt.n	800b218 <_strtod_l+0x338>
 800b1a8:	45be      	cmp	lr, r7
 800b1aa:	bfa8      	it	ge
 800b1ac:	46be      	movge	lr, r7
 800b1ae:	f1bc 0f00 	cmp.w	ip, #0
 800b1b2:	d001      	beq.n	800b1b8 <_strtod_l+0x2d8>
 800b1b4:	f1ce 0e00 	rsb	lr, lr, #0
 800b1b8:	2c00      	cmp	r4, #0
 800b1ba:	d151      	bne.n	800b260 <_strtod_l+0x380>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	f47f aece 	bne.w	800af5e <_strtod_l+0x7e>
 800b1c2:	9a06      	ldr	r2, [sp, #24]
 800b1c4:	2a00      	cmp	r2, #0
 800b1c6:	f47f aeca 	bne.w	800af5e <_strtod_l+0x7e>
 800b1ca:	9a04      	ldr	r2, [sp, #16]
 800b1cc:	2a00      	cmp	r2, #0
 800b1ce:	f47f aee4 	bne.w	800af9a <_strtod_l+0xba>
 800b1d2:	2b4e      	cmp	r3, #78	; 0x4e
 800b1d4:	d027      	beq.n	800b226 <_strtod_l+0x346>
 800b1d6:	dc21      	bgt.n	800b21c <_strtod_l+0x33c>
 800b1d8:	2b49      	cmp	r3, #73	; 0x49
 800b1da:	f47f aede 	bne.w	800af9a <_strtod_l+0xba>
 800b1de:	49a0      	ldr	r1, [pc, #640]	; (800b460 <_strtod_l+0x580>)
 800b1e0:	a81b      	add	r0, sp, #108	; 0x6c
 800b1e2:	f002 f81d 	bl	800d220 <__match>
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	f43f aed7 	beq.w	800af9a <_strtod_l+0xba>
 800b1ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1ee:	499d      	ldr	r1, [pc, #628]	; (800b464 <_strtod_l+0x584>)
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	a81b      	add	r0, sp, #108	; 0x6c
 800b1f4:	931b      	str	r3, [sp, #108]	; 0x6c
 800b1f6:	f002 f813 	bl	800d220 <__match>
 800b1fa:	b910      	cbnz	r0, 800b202 <_strtod_l+0x322>
 800b1fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1fe:	3301      	adds	r3, #1
 800b200:	931b      	str	r3, [sp, #108]	; 0x6c
 800b202:	f8df b274 	ldr.w	fp, [pc, #628]	; 800b478 <_strtod_l+0x598>
 800b206:	f04f 0a00 	mov.w	sl, #0
 800b20a:	e6a8      	b.n	800af5e <_strtod_l+0x7e>
 800b20c:	210a      	movs	r1, #10
 800b20e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b212:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b216:	e7b8      	b.n	800b18a <_strtod_l+0x2aa>
 800b218:	46be      	mov	lr, r7
 800b21a:	e7c8      	b.n	800b1ae <_strtod_l+0x2ce>
 800b21c:	2b69      	cmp	r3, #105	; 0x69
 800b21e:	d0de      	beq.n	800b1de <_strtod_l+0x2fe>
 800b220:	2b6e      	cmp	r3, #110	; 0x6e
 800b222:	f47f aeba 	bne.w	800af9a <_strtod_l+0xba>
 800b226:	4990      	ldr	r1, [pc, #576]	; (800b468 <_strtod_l+0x588>)
 800b228:	a81b      	add	r0, sp, #108	; 0x6c
 800b22a:	f001 fff9 	bl	800d220 <__match>
 800b22e:	2800      	cmp	r0, #0
 800b230:	f43f aeb3 	beq.w	800af9a <_strtod_l+0xba>
 800b234:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	2b28      	cmp	r3, #40	; 0x28
 800b23a:	d10e      	bne.n	800b25a <_strtod_l+0x37a>
 800b23c:	aa1e      	add	r2, sp, #120	; 0x78
 800b23e:	498b      	ldr	r1, [pc, #556]	; (800b46c <_strtod_l+0x58c>)
 800b240:	a81b      	add	r0, sp, #108	; 0x6c
 800b242:	f002 f801 	bl	800d248 <__hexnan>
 800b246:	2805      	cmp	r0, #5
 800b248:	d107      	bne.n	800b25a <_strtod_l+0x37a>
 800b24a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b24c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800b250:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b254:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b258:	e681      	b.n	800af5e <_strtod_l+0x7e>
 800b25a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800b480 <_strtod_l+0x5a0>
 800b25e:	e7d2      	b.n	800b206 <_strtod_l+0x326>
 800b260:	ebae 0302 	sub.w	r3, lr, r2
 800b264:	9306      	str	r3, [sp, #24]
 800b266:	9b05      	ldr	r3, [sp, #20]
 800b268:	9807      	ldr	r0, [sp, #28]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	bf08      	it	eq
 800b26e:	4623      	moveq	r3, r4
 800b270:	2c10      	cmp	r4, #16
 800b272:	9305      	str	r3, [sp, #20]
 800b274:	46a0      	mov	r8, r4
 800b276:	bfa8      	it	ge
 800b278:	f04f 0810 	movge.w	r8, #16
 800b27c:	f7f5 f94a 	bl	8000514 <__aeabi_ui2d>
 800b280:	2c09      	cmp	r4, #9
 800b282:	4682      	mov	sl, r0
 800b284:	468b      	mov	fp, r1
 800b286:	dc13      	bgt.n	800b2b0 <_strtod_l+0x3d0>
 800b288:	9b06      	ldr	r3, [sp, #24]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f43f ae67 	beq.w	800af5e <_strtod_l+0x7e>
 800b290:	9b06      	ldr	r3, [sp, #24]
 800b292:	dd7a      	ble.n	800b38a <_strtod_l+0x4aa>
 800b294:	2b16      	cmp	r3, #22
 800b296:	dc61      	bgt.n	800b35c <_strtod_l+0x47c>
 800b298:	4a75      	ldr	r2, [pc, #468]	; (800b470 <_strtod_l+0x590>)
 800b29a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800b29e:	e9de 0100 	ldrd	r0, r1, [lr]
 800b2a2:	4652      	mov	r2, sl
 800b2a4:	465b      	mov	r3, fp
 800b2a6:	f7f5 f9af 	bl	8000608 <__aeabi_dmul>
 800b2aa:	4682      	mov	sl, r0
 800b2ac:	468b      	mov	fp, r1
 800b2ae:	e656      	b.n	800af5e <_strtod_l+0x7e>
 800b2b0:	4b6f      	ldr	r3, [pc, #444]	; (800b470 <_strtod_l+0x590>)
 800b2b2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b2b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b2ba:	f7f5 f9a5 	bl	8000608 <__aeabi_dmul>
 800b2be:	4606      	mov	r6, r0
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	460f      	mov	r7, r1
 800b2c4:	f7f5 f926 	bl	8000514 <__aeabi_ui2d>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	4639      	mov	r1, r7
 800b2d0:	f7f4 ffe4 	bl	800029c <__adddf3>
 800b2d4:	2c0f      	cmp	r4, #15
 800b2d6:	4682      	mov	sl, r0
 800b2d8:	468b      	mov	fp, r1
 800b2da:	ddd5      	ble.n	800b288 <_strtod_l+0x3a8>
 800b2dc:	9b06      	ldr	r3, [sp, #24]
 800b2de:	eba4 0808 	sub.w	r8, r4, r8
 800b2e2:	4498      	add	r8, r3
 800b2e4:	f1b8 0f00 	cmp.w	r8, #0
 800b2e8:	f340 8096 	ble.w	800b418 <_strtod_l+0x538>
 800b2ec:	f018 030f 	ands.w	r3, r8, #15
 800b2f0:	d00a      	beq.n	800b308 <_strtod_l+0x428>
 800b2f2:	495f      	ldr	r1, [pc, #380]	; (800b470 <_strtod_l+0x590>)
 800b2f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2f8:	4652      	mov	r2, sl
 800b2fa:	465b      	mov	r3, fp
 800b2fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b300:	f7f5 f982 	bl	8000608 <__aeabi_dmul>
 800b304:	4682      	mov	sl, r0
 800b306:	468b      	mov	fp, r1
 800b308:	f038 080f 	bics.w	r8, r8, #15
 800b30c:	d073      	beq.n	800b3f6 <_strtod_l+0x516>
 800b30e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b312:	dd47      	ble.n	800b3a4 <_strtod_l+0x4c4>
 800b314:	2400      	movs	r4, #0
 800b316:	46a0      	mov	r8, r4
 800b318:	9407      	str	r4, [sp, #28]
 800b31a:	9405      	str	r4, [sp, #20]
 800b31c:	2322      	movs	r3, #34	; 0x22
 800b31e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800b478 <_strtod_l+0x598>
 800b322:	f8c9 3000 	str.w	r3, [r9]
 800b326:	f04f 0a00 	mov.w	sl, #0
 800b32a:	9b07      	ldr	r3, [sp, #28]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	f43f ae16 	beq.w	800af5e <_strtod_l+0x7e>
 800b332:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b334:	4648      	mov	r0, r9
 800b336:	f002 f8c7 	bl	800d4c8 <_Bfree>
 800b33a:	9905      	ldr	r1, [sp, #20]
 800b33c:	4648      	mov	r0, r9
 800b33e:	f002 f8c3 	bl	800d4c8 <_Bfree>
 800b342:	4641      	mov	r1, r8
 800b344:	4648      	mov	r0, r9
 800b346:	f002 f8bf 	bl	800d4c8 <_Bfree>
 800b34a:	9907      	ldr	r1, [sp, #28]
 800b34c:	4648      	mov	r0, r9
 800b34e:	f002 f8bb 	bl	800d4c8 <_Bfree>
 800b352:	4621      	mov	r1, r4
 800b354:	4648      	mov	r0, r9
 800b356:	f002 f8b7 	bl	800d4c8 <_Bfree>
 800b35a:	e600      	b.n	800af5e <_strtod_l+0x7e>
 800b35c:	9a06      	ldr	r2, [sp, #24]
 800b35e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b362:	4293      	cmp	r3, r2
 800b364:	dbba      	blt.n	800b2dc <_strtod_l+0x3fc>
 800b366:	4d42      	ldr	r5, [pc, #264]	; (800b470 <_strtod_l+0x590>)
 800b368:	f1c4 040f 	rsb	r4, r4, #15
 800b36c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b370:	4652      	mov	r2, sl
 800b372:	465b      	mov	r3, fp
 800b374:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b378:	f7f5 f946 	bl	8000608 <__aeabi_dmul>
 800b37c:	9b06      	ldr	r3, [sp, #24]
 800b37e:	1b1c      	subs	r4, r3, r4
 800b380:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b384:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b388:	e78d      	b.n	800b2a6 <_strtod_l+0x3c6>
 800b38a:	f113 0f16 	cmn.w	r3, #22
 800b38e:	dba5      	blt.n	800b2dc <_strtod_l+0x3fc>
 800b390:	4a37      	ldr	r2, [pc, #220]	; (800b470 <_strtod_l+0x590>)
 800b392:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800b396:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b39a:	4650      	mov	r0, sl
 800b39c:	4659      	mov	r1, fp
 800b39e:	f7f5 fa5d 	bl	800085c <__aeabi_ddiv>
 800b3a2:	e782      	b.n	800b2aa <_strtod_l+0x3ca>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	4e33      	ldr	r6, [pc, #204]	; (800b474 <_strtod_l+0x594>)
 800b3a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b3ac:	4650      	mov	r0, sl
 800b3ae:	4659      	mov	r1, fp
 800b3b0:	461d      	mov	r5, r3
 800b3b2:	f1b8 0f01 	cmp.w	r8, #1
 800b3b6:	dc21      	bgt.n	800b3fc <_strtod_l+0x51c>
 800b3b8:	b10b      	cbz	r3, 800b3be <_strtod_l+0x4de>
 800b3ba:	4682      	mov	sl, r0
 800b3bc:	468b      	mov	fp, r1
 800b3be:	4b2d      	ldr	r3, [pc, #180]	; (800b474 <_strtod_l+0x594>)
 800b3c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b3c4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b3c8:	4652      	mov	r2, sl
 800b3ca:	465b      	mov	r3, fp
 800b3cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b3d0:	f7f5 f91a 	bl	8000608 <__aeabi_dmul>
 800b3d4:	4b28      	ldr	r3, [pc, #160]	; (800b478 <_strtod_l+0x598>)
 800b3d6:	460a      	mov	r2, r1
 800b3d8:	400b      	ands	r3, r1
 800b3da:	4928      	ldr	r1, [pc, #160]	; (800b47c <_strtod_l+0x59c>)
 800b3dc:	428b      	cmp	r3, r1
 800b3de:	4682      	mov	sl, r0
 800b3e0:	d898      	bhi.n	800b314 <_strtod_l+0x434>
 800b3e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b3e6:	428b      	cmp	r3, r1
 800b3e8:	bf86      	itte	hi
 800b3ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b484 <_strtod_l+0x5a4>
 800b3ee:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800b3f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	9304      	str	r3, [sp, #16]
 800b3fa:	e077      	b.n	800b4ec <_strtod_l+0x60c>
 800b3fc:	f018 0f01 	tst.w	r8, #1
 800b400:	d006      	beq.n	800b410 <_strtod_l+0x530>
 800b402:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800b406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40a:	f7f5 f8fd 	bl	8000608 <__aeabi_dmul>
 800b40e:	2301      	movs	r3, #1
 800b410:	3501      	adds	r5, #1
 800b412:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b416:	e7cc      	b.n	800b3b2 <_strtod_l+0x4d2>
 800b418:	d0ed      	beq.n	800b3f6 <_strtod_l+0x516>
 800b41a:	f1c8 0800 	rsb	r8, r8, #0
 800b41e:	f018 020f 	ands.w	r2, r8, #15
 800b422:	d00a      	beq.n	800b43a <_strtod_l+0x55a>
 800b424:	4b12      	ldr	r3, [pc, #72]	; (800b470 <_strtod_l+0x590>)
 800b426:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b42a:	4650      	mov	r0, sl
 800b42c:	4659      	mov	r1, fp
 800b42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b432:	f7f5 fa13 	bl	800085c <__aeabi_ddiv>
 800b436:	4682      	mov	sl, r0
 800b438:	468b      	mov	fp, r1
 800b43a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b43e:	d0da      	beq.n	800b3f6 <_strtod_l+0x516>
 800b440:	f1b8 0f1f 	cmp.w	r8, #31
 800b444:	dd20      	ble.n	800b488 <_strtod_l+0x5a8>
 800b446:	2400      	movs	r4, #0
 800b448:	46a0      	mov	r8, r4
 800b44a:	9407      	str	r4, [sp, #28]
 800b44c:	9405      	str	r4, [sp, #20]
 800b44e:	2322      	movs	r3, #34	; 0x22
 800b450:	f04f 0a00 	mov.w	sl, #0
 800b454:	f04f 0b00 	mov.w	fp, #0
 800b458:	f8c9 3000 	str.w	r3, [r9]
 800b45c:	e765      	b.n	800b32a <_strtod_l+0x44a>
 800b45e:	bf00      	nop
 800b460:	0800eadb 	.word	0x0800eadb
 800b464:	0800ec64 	.word	0x0800ec64
 800b468:	0800eae3 	.word	0x0800eae3
 800b46c:	0800eb24 	.word	0x0800eb24
 800b470:	0800ecf8 	.word	0x0800ecf8
 800b474:	0800ecd0 	.word	0x0800ecd0
 800b478:	7ff00000 	.word	0x7ff00000
 800b47c:	7ca00000 	.word	0x7ca00000
 800b480:	fff80000 	.word	0xfff80000
 800b484:	7fefffff 	.word	0x7fefffff
 800b488:	f018 0310 	ands.w	r3, r8, #16
 800b48c:	bf18      	it	ne
 800b48e:	236a      	movne	r3, #106	; 0x6a
 800b490:	4da0      	ldr	r5, [pc, #640]	; (800b714 <_strtod_l+0x834>)
 800b492:	9304      	str	r3, [sp, #16]
 800b494:	4650      	mov	r0, sl
 800b496:	4659      	mov	r1, fp
 800b498:	2300      	movs	r3, #0
 800b49a:	f1b8 0f00 	cmp.w	r8, #0
 800b49e:	f300 810a 	bgt.w	800b6b6 <_strtod_l+0x7d6>
 800b4a2:	b10b      	cbz	r3, 800b4a8 <_strtod_l+0x5c8>
 800b4a4:	4682      	mov	sl, r0
 800b4a6:	468b      	mov	fp, r1
 800b4a8:	9b04      	ldr	r3, [sp, #16]
 800b4aa:	b1bb      	cbz	r3, 800b4dc <_strtod_l+0x5fc>
 800b4ac:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b4b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	4659      	mov	r1, fp
 800b4b8:	dd10      	ble.n	800b4dc <_strtod_l+0x5fc>
 800b4ba:	2b1f      	cmp	r3, #31
 800b4bc:	f340 8107 	ble.w	800b6ce <_strtod_l+0x7ee>
 800b4c0:	2b34      	cmp	r3, #52	; 0x34
 800b4c2:	bfde      	ittt	le
 800b4c4:	3b20      	suble	r3, #32
 800b4c6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800b4ca:	fa02 f303 	lslle.w	r3, r2, r3
 800b4ce:	f04f 0a00 	mov.w	sl, #0
 800b4d2:	bfcc      	ite	gt
 800b4d4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b4d8:	ea03 0b01 	andle.w	fp, r3, r1
 800b4dc:	2200      	movs	r2, #0
 800b4de:	2300      	movs	r3, #0
 800b4e0:	4650      	mov	r0, sl
 800b4e2:	4659      	mov	r1, fp
 800b4e4:	f7f5 faf8 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d1ac      	bne.n	800b446 <_strtod_l+0x566>
 800b4ec:	9b07      	ldr	r3, [sp, #28]
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	9a05      	ldr	r2, [sp, #20]
 800b4f2:	9908      	ldr	r1, [sp, #32]
 800b4f4:	4623      	mov	r3, r4
 800b4f6:	4648      	mov	r0, r9
 800b4f8:	f002 f838 	bl	800d56c <__s2b>
 800b4fc:	9007      	str	r0, [sp, #28]
 800b4fe:	2800      	cmp	r0, #0
 800b500:	f43f af08 	beq.w	800b314 <_strtod_l+0x434>
 800b504:	9a06      	ldr	r2, [sp, #24]
 800b506:	9b06      	ldr	r3, [sp, #24]
 800b508:	2a00      	cmp	r2, #0
 800b50a:	f1c3 0300 	rsb	r3, r3, #0
 800b50e:	bfa8      	it	ge
 800b510:	2300      	movge	r3, #0
 800b512:	930e      	str	r3, [sp, #56]	; 0x38
 800b514:	2400      	movs	r4, #0
 800b516:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b51a:	9316      	str	r3, [sp, #88]	; 0x58
 800b51c:	46a0      	mov	r8, r4
 800b51e:	9b07      	ldr	r3, [sp, #28]
 800b520:	4648      	mov	r0, r9
 800b522:	6859      	ldr	r1, [r3, #4]
 800b524:	f001 ff9c 	bl	800d460 <_Balloc>
 800b528:	9005      	str	r0, [sp, #20]
 800b52a:	2800      	cmp	r0, #0
 800b52c:	f43f aef6 	beq.w	800b31c <_strtod_l+0x43c>
 800b530:	9b07      	ldr	r3, [sp, #28]
 800b532:	691a      	ldr	r2, [r3, #16]
 800b534:	3202      	adds	r2, #2
 800b536:	f103 010c 	add.w	r1, r3, #12
 800b53a:	0092      	lsls	r2, r2, #2
 800b53c:	300c      	adds	r0, #12
 800b53e:	f7fe fdc0 	bl	800a0c2 <memcpy>
 800b542:	aa1e      	add	r2, sp, #120	; 0x78
 800b544:	a91d      	add	r1, sp, #116	; 0x74
 800b546:	ec4b ab10 	vmov	d0, sl, fp
 800b54a:	4648      	mov	r0, r9
 800b54c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b550:	f002 fac8 	bl	800dae4 <__d2b>
 800b554:	901c      	str	r0, [sp, #112]	; 0x70
 800b556:	2800      	cmp	r0, #0
 800b558:	f43f aee0 	beq.w	800b31c <_strtod_l+0x43c>
 800b55c:	2101      	movs	r1, #1
 800b55e:	4648      	mov	r0, r9
 800b560:	f002 f890 	bl	800d684 <__i2b>
 800b564:	4680      	mov	r8, r0
 800b566:	2800      	cmp	r0, #0
 800b568:	f43f aed8 	beq.w	800b31c <_strtod_l+0x43c>
 800b56c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b56e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b570:	2e00      	cmp	r6, #0
 800b572:	bfab      	itete	ge
 800b574:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b576:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b578:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b57a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800b57c:	bfac      	ite	ge
 800b57e:	18f7      	addge	r7, r6, r3
 800b580:	1b9d      	sublt	r5, r3, r6
 800b582:	9b04      	ldr	r3, [sp, #16]
 800b584:	1af6      	subs	r6, r6, r3
 800b586:	4416      	add	r6, r2
 800b588:	4b63      	ldr	r3, [pc, #396]	; (800b718 <_strtod_l+0x838>)
 800b58a:	3e01      	subs	r6, #1
 800b58c:	429e      	cmp	r6, r3
 800b58e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b592:	f280 80af 	bge.w	800b6f4 <_strtod_l+0x814>
 800b596:	1b9b      	subs	r3, r3, r6
 800b598:	2b1f      	cmp	r3, #31
 800b59a:	eba2 0203 	sub.w	r2, r2, r3
 800b59e:	f04f 0101 	mov.w	r1, #1
 800b5a2:	f300 809b 	bgt.w	800b6dc <_strtod_l+0x7fc>
 800b5a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b5aa:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	930a      	str	r3, [sp, #40]	; 0x28
 800b5b0:	18be      	adds	r6, r7, r2
 800b5b2:	9b04      	ldr	r3, [sp, #16]
 800b5b4:	42b7      	cmp	r7, r6
 800b5b6:	4415      	add	r5, r2
 800b5b8:	441d      	add	r5, r3
 800b5ba:	463b      	mov	r3, r7
 800b5bc:	bfa8      	it	ge
 800b5be:	4633      	movge	r3, r6
 800b5c0:	42ab      	cmp	r3, r5
 800b5c2:	bfa8      	it	ge
 800b5c4:	462b      	movge	r3, r5
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	bfc2      	ittt	gt
 800b5ca:	1af6      	subgt	r6, r6, r3
 800b5cc:	1aed      	subgt	r5, r5, r3
 800b5ce:	1aff      	subgt	r7, r7, r3
 800b5d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5d2:	b1bb      	cbz	r3, 800b604 <_strtod_l+0x724>
 800b5d4:	4641      	mov	r1, r8
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	4648      	mov	r0, r9
 800b5da:	f002 f8f3 	bl	800d7c4 <__pow5mult>
 800b5de:	4680      	mov	r8, r0
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	f43f ae9b 	beq.w	800b31c <_strtod_l+0x43c>
 800b5e6:	4601      	mov	r1, r0
 800b5e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b5ea:	4648      	mov	r0, r9
 800b5ec:	f002 f853 	bl	800d696 <__multiply>
 800b5f0:	900c      	str	r0, [sp, #48]	; 0x30
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	f43f ae92 	beq.w	800b31c <_strtod_l+0x43c>
 800b5f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b5fa:	4648      	mov	r0, r9
 800b5fc:	f001 ff64 	bl	800d4c8 <_Bfree>
 800b600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b602:	931c      	str	r3, [sp, #112]	; 0x70
 800b604:	2e00      	cmp	r6, #0
 800b606:	dc7a      	bgt.n	800b6fe <_strtod_l+0x81e>
 800b608:	9b06      	ldr	r3, [sp, #24]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	dd08      	ble.n	800b620 <_strtod_l+0x740>
 800b60e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b610:	9905      	ldr	r1, [sp, #20]
 800b612:	4648      	mov	r0, r9
 800b614:	f002 f8d6 	bl	800d7c4 <__pow5mult>
 800b618:	9005      	str	r0, [sp, #20]
 800b61a:	2800      	cmp	r0, #0
 800b61c:	f43f ae7e 	beq.w	800b31c <_strtod_l+0x43c>
 800b620:	2d00      	cmp	r5, #0
 800b622:	dd08      	ble.n	800b636 <_strtod_l+0x756>
 800b624:	462a      	mov	r2, r5
 800b626:	9905      	ldr	r1, [sp, #20]
 800b628:	4648      	mov	r0, r9
 800b62a:	f002 f919 	bl	800d860 <__lshift>
 800b62e:	9005      	str	r0, [sp, #20]
 800b630:	2800      	cmp	r0, #0
 800b632:	f43f ae73 	beq.w	800b31c <_strtod_l+0x43c>
 800b636:	2f00      	cmp	r7, #0
 800b638:	dd08      	ble.n	800b64c <_strtod_l+0x76c>
 800b63a:	4641      	mov	r1, r8
 800b63c:	463a      	mov	r2, r7
 800b63e:	4648      	mov	r0, r9
 800b640:	f002 f90e 	bl	800d860 <__lshift>
 800b644:	4680      	mov	r8, r0
 800b646:	2800      	cmp	r0, #0
 800b648:	f43f ae68 	beq.w	800b31c <_strtod_l+0x43c>
 800b64c:	9a05      	ldr	r2, [sp, #20]
 800b64e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b650:	4648      	mov	r0, r9
 800b652:	f002 f973 	bl	800d93c <__mdiff>
 800b656:	4604      	mov	r4, r0
 800b658:	2800      	cmp	r0, #0
 800b65a:	f43f ae5f 	beq.w	800b31c <_strtod_l+0x43c>
 800b65e:	68c3      	ldr	r3, [r0, #12]
 800b660:	930c      	str	r3, [sp, #48]	; 0x30
 800b662:	2300      	movs	r3, #0
 800b664:	60c3      	str	r3, [r0, #12]
 800b666:	4641      	mov	r1, r8
 800b668:	f002 f94e 	bl	800d908 <__mcmp>
 800b66c:	2800      	cmp	r0, #0
 800b66e:	da55      	bge.n	800b71c <_strtod_l+0x83c>
 800b670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b672:	b9e3      	cbnz	r3, 800b6ae <_strtod_l+0x7ce>
 800b674:	f1ba 0f00 	cmp.w	sl, #0
 800b678:	d119      	bne.n	800b6ae <_strtod_l+0x7ce>
 800b67a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b67e:	b9b3      	cbnz	r3, 800b6ae <_strtod_l+0x7ce>
 800b680:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b684:	0d1b      	lsrs	r3, r3, #20
 800b686:	051b      	lsls	r3, r3, #20
 800b688:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b68c:	d90f      	bls.n	800b6ae <_strtod_l+0x7ce>
 800b68e:	6963      	ldr	r3, [r4, #20]
 800b690:	b913      	cbnz	r3, 800b698 <_strtod_l+0x7b8>
 800b692:	6923      	ldr	r3, [r4, #16]
 800b694:	2b01      	cmp	r3, #1
 800b696:	dd0a      	ble.n	800b6ae <_strtod_l+0x7ce>
 800b698:	4621      	mov	r1, r4
 800b69a:	2201      	movs	r2, #1
 800b69c:	4648      	mov	r0, r9
 800b69e:	f002 f8df 	bl	800d860 <__lshift>
 800b6a2:	4641      	mov	r1, r8
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	f002 f92f 	bl	800d908 <__mcmp>
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	dc67      	bgt.n	800b77e <_strtod_l+0x89e>
 800b6ae:	9b04      	ldr	r3, [sp, #16]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d171      	bne.n	800b798 <_strtod_l+0x8b8>
 800b6b4:	e63d      	b.n	800b332 <_strtod_l+0x452>
 800b6b6:	f018 0f01 	tst.w	r8, #1
 800b6ba:	d004      	beq.n	800b6c6 <_strtod_l+0x7e6>
 800b6bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6c0:	f7f4 ffa2 	bl	8000608 <__aeabi_dmul>
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b6ca:	3508      	adds	r5, #8
 800b6cc:	e6e5      	b.n	800b49a <_strtod_l+0x5ba>
 800b6ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b6d6:	ea03 0a0a 	and.w	sl, r3, sl
 800b6da:	e6ff      	b.n	800b4dc <_strtod_l+0x5fc>
 800b6dc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b6e0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b6e4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b6e8:	36e2      	adds	r6, #226	; 0xe2
 800b6ea:	fa01 f306 	lsl.w	r3, r1, r6
 800b6ee:	930a      	str	r3, [sp, #40]	; 0x28
 800b6f0:	910f      	str	r1, [sp, #60]	; 0x3c
 800b6f2:	e75d      	b.n	800b5b0 <_strtod_l+0x6d0>
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6fc:	e758      	b.n	800b5b0 <_strtod_l+0x6d0>
 800b6fe:	4632      	mov	r2, r6
 800b700:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b702:	4648      	mov	r0, r9
 800b704:	f002 f8ac 	bl	800d860 <__lshift>
 800b708:	901c      	str	r0, [sp, #112]	; 0x70
 800b70a:	2800      	cmp	r0, #0
 800b70c:	f47f af7c 	bne.w	800b608 <_strtod_l+0x728>
 800b710:	e604      	b.n	800b31c <_strtod_l+0x43c>
 800b712:	bf00      	nop
 800b714:	0800eb38 	.word	0x0800eb38
 800b718:	fffffc02 	.word	0xfffffc02
 800b71c:	465d      	mov	r5, fp
 800b71e:	f040 8086 	bne.w	800b82e <_strtod_l+0x94e>
 800b722:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b724:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b728:	b32a      	cbz	r2, 800b776 <_strtod_l+0x896>
 800b72a:	4aaf      	ldr	r2, [pc, #700]	; (800b9e8 <_strtod_l+0xb08>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d153      	bne.n	800b7d8 <_strtod_l+0x8f8>
 800b730:	9b04      	ldr	r3, [sp, #16]
 800b732:	4650      	mov	r0, sl
 800b734:	b1d3      	cbz	r3, 800b76c <_strtod_l+0x88c>
 800b736:	4aad      	ldr	r2, [pc, #692]	; (800b9ec <_strtod_l+0xb0c>)
 800b738:	402a      	ands	r2, r5
 800b73a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b73e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b742:	d816      	bhi.n	800b772 <_strtod_l+0x892>
 800b744:	0d12      	lsrs	r2, r2, #20
 800b746:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b74a:	fa01 f303 	lsl.w	r3, r1, r3
 800b74e:	4298      	cmp	r0, r3
 800b750:	d142      	bne.n	800b7d8 <_strtod_l+0x8f8>
 800b752:	4ba7      	ldr	r3, [pc, #668]	; (800b9f0 <_strtod_l+0xb10>)
 800b754:	429d      	cmp	r5, r3
 800b756:	d102      	bne.n	800b75e <_strtod_l+0x87e>
 800b758:	3001      	adds	r0, #1
 800b75a:	f43f addf 	beq.w	800b31c <_strtod_l+0x43c>
 800b75e:	4ba3      	ldr	r3, [pc, #652]	; (800b9ec <_strtod_l+0xb0c>)
 800b760:	402b      	ands	r3, r5
 800b762:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b766:	f04f 0a00 	mov.w	sl, #0
 800b76a:	e7a0      	b.n	800b6ae <_strtod_l+0x7ce>
 800b76c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b770:	e7ed      	b.n	800b74e <_strtod_l+0x86e>
 800b772:	460b      	mov	r3, r1
 800b774:	e7eb      	b.n	800b74e <_strtod_l+0x86e>
 800b776:	bb7b      	cbnz	r3, 800b7d8 <_strtod_l+0x8f8>
 800b778:	f1ba 0f00 	cmp.w	sl, #0
 800b77c:	d12c      	bne.n	800b7d8 <_strtod_l+0x8f8>
 800b77e:	9904      	ldr	r1, [sp, #16]
 800b780:	4a9a      	ldr	r2, [pc, #616]	; (800b9ec <_strtod_l+0xb0c>)
 800b782:	465b      	mov	r3, fp
 800b784:	b1f1      	cbz	r1, 800b7c4 <_strtod_l+0x8e4>
 800b786:	ea02 010b 	and.w	r1, r2, fp
 800b78a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b78e:	dc19      	bgt.n	800b7c4 <_strtod_l+0x8e4>
 800b790:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b794:	f77f ae5b 	ble.w	800b44e <_strtod_l+0x56e>
 800b798:	4a96      	ldr	r2, [pc, #600]	; (800b9f4 <_strtod_l+0xb14>)
 800b79a:	2300      	movs	r3, #0
 800b79c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b7a0:	4650      	mov	r0, sl
 800b7a2:	4659      	mov	r1, fp
 800b7a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b7a8:	f7f4 ff2e 	bl	8000608 <__aeabi_dmul>
 800b7ac:	4682      	mov	sl, r0
 800b7ae:	468b      	mov	fp, r1
 800b7b0:	2900      	cmp	r1, #0
 800b7b2:	f47f adbe 	bne.w	800b332 <_strtod_l+0x452>
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	f47f adbb 	bne.w	800b332 <_strtod_l+0x452>
 800b7bc:	2322      	movs	r3, #34	; 0x22
 800b7be:	f8c9 3000 	str.w	r3, [r9]
 800b7c2:	e5b6      	b.n	800b332 <_strtod_l+0x452>
 800b7c4:	4013      	ands	r3, r2
 800b7c6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b7ca:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b7ce:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b7d2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b7d6:	e76a      	b.n	800b6ae <_strtod_l+0x7ce>
 800b7d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7da:	b193      	cbz	r3, 800b802 <_strtod_l+0x922>
 800b7dc:	422b      	tst	r3, r5
 800b7de:	f43f af66 	beq.w	800b6ae <_strtod_l+0x7ce>
 800b7e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7e4:	9a04      	ldr	r2, [sp, #16]
 800b7e6:	4650      	mov	r0, sl
 800b7e8:	4659      	mov	r1, fp
 800b7ea:	b173      	cbz	r3, 800b80a <_strtod_l+0x92a>
 800b7ec:	f7ff fb5c 	bl	800aea8 <sulp>
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b7f8:	f7f4 fd50 	bl	800029c <__adddf3>
 800b7fc:	4682      	mov	sl, r0
 800b7fe:	468b      	mov	fp, r1
 800b800:	e755      	b.n	800b6ae <_strtod_l+0x7ce>
 800b802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b804:	ea13 0f0a 	tst.w	r3, sl
 800b808:	e7e9      	b.n	800b7de <_strtod_l+0x8fe>
 800b80a:	f7ff fb4d 	bl	800aea8 <sulp>
 800b80e:	4602      	mov	r2, r0
 800b810:	460b      	mov	r3, r1
 800b812:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b816:	f7f4 fd3f 	bl	8000298 <__aeabi_dsub>
 800b81a:	2200      	movs	r2, #0
 800b81c:	2300      	movs	r3, #0
 800b81e:	4682      	mov	sl, r0
 800b820:	468b      	mov	fp, r1
 800b822:	f7f5 f959 	bl	8000ad8 <__aeabi_dcmpeq>
 800b826:	2800      	cmp	r0, #0
 800b828:	f47f ae11 	bne.w	800b44e <_strtod_l+0x56e>
 800b82c:	e73f      	b.n	800b6ae <_strtod_l+0x7ce>
 800b82e:	4641      	mov	r1, r8
 800b830:	4620      	mov	r0, r4
 800b832:	f002 f9a6 	bl	800db82 <__ratio>
 800b836:	ec57 6b10 	vmov	r6, r7, d0
 800b83a:	2200      	movs	r2, #0
 800b83c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b840:	ee10 0a10 	vmov	r0, s0
 800b844:	4639      	mov	r1, r7
 800b846:	f7f5 f95b 	bl	8000b00 <__aeabi_dcmple>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	d077      	beq.n	800b93e <_strtod_l+0xa5e>
 800b84e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b850:	2b00      	cmp	r3, #0
 800b852:	d04a      	beq.n	800b8ea <_strtod_l+0xa0a>
 800b854:	4b68      	ldr	r3, [pc, #416]	; (800b9f8 <_strtod_l+0xb18>)
 800b856:	2200      	movs	r2, #0
 800b858:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b85c:	4f66      	ldr	r7, [pc, #408]	; (800b9f8 <_strtod_l+0xb18>)
 800b85e:	2600      	movs	r6, #0
 800b860:	4b62      	ldr	r3, [pc, #392]	; (800b9ec <_strtod_l+0xb0c>)
 800b862:	402b      	ands	r3, r5
 800b864:	930f      	str	r3, [sp, #60]	; 0x3c
 800b866:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b868:	4b64      	ldr	r3, [pc, #400]	; (800b9fc <_strtod_l+0xb1c>)
 800b86a:	429a      	cmp	r2, r3
 800b86c:	f040 80ce 	bne.w	800ba0c <_strtod_l+0xb2c>
 800b870:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b874:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b878:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800b87c:	ec4b ab10 	vmov	d0, sl, fp
 800b880:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b884:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b888:	f002 f8b6 	bl	800d9f8 <__ulp>
 800b88c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b890:	ec53 2b10 	vmov	r2, r3, d0
 800b894:	f7f4 feb8 	bl	8000608 <__aeabi_dmul>
 800b898:	4652      	mov	r2, sl
 800b89a:	465b      	mov	r3, fp
 800b89c:	f7f4 fcfe 	bl	800029c <__adddf3>
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	4952      	ldr	r1, [pc, #328]	; (800b9ec <_strtod_l+0xb0c>)
 800b8a4:	4a56      	ldr	r2, [pc, #344]	; (800ba00 <_strtod_l+0xb20>)
 800b8a6:	4019      	ands	r1, r3
 800b8a8:	4291      	cmp	r1, r2
 800b8aa:	4682      	mov	sl, r0
 800b8ac:	d95b      	bls.n	800b966 <_strtod_l+0xa86>
 800b8ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d103      	bne.n	800b8c0 <_strtod_l+0x9e0>
 800b8b8:	9b08      	ldr	r3, [sp, #32]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	f43f ad2e 	beq.w	800b31c <_strtod_l+0x43c>
 800b8c0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800b9f0 <_strtod_l+0xb10>
 800b8c4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b8c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b8ca:	4648      	mov	r0, r9
 800b8cc:	f001 fdfc 	bl	800d4c8 <_Bfree>
 800b8d0:	9905      	ldr	r1, [sp, #20]
 800b8d2:	4648      	mov	r0, r9
 800b8d4:	f001 fdf8 	bl	800d4c8 <_Bfree>
 800b8d8:	4641      	mov	r1, r8
 800b8da:	4648      	mov	r0, r9
 800b8dc:	f001 fdf4 	bl	800d4c8 <_Bfree>
 800b8e0:	4621      	mov	r1, r4
 800b8e2:	4648      	mov	r0, r9
 800b8e4:	f001 fdf0 	bl	800d4c8 <_Bfree>
 800b8e8:	e619      	b.n	800b51e <_strtod_l+0x63e>
 800b8ea:	f1ba 0f00 	cmp.w	sl, #0
 800b8ee:	d11a      	bne.n	800b926 <_strtod_l+0xa46>
 800b8f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8f4:	b9eb      	cbnz	r3, 800b932 <_strtod_l+0xa52>
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	4b3f      	ldr	r3, [pc, #252]	; (800b9f8 <_strtod_l+0xb18>)
 800b8fa:	4630      	mov	r0, r6
 800b8fc:	4639      	mov	r1, r7
 800b8fe:	f7f5 f8f5 	bl	8000aec <__aeabi_dcmplt>
 800b902:	b9c8      	cbnz	r0, 800b938 <_strtod_l+0xa58>
 800b904:	4630      	mov	r0, r6
 800b906:	4639      	mov	r1, r7
 800b908:	2200      	movs	r2, #0
 800b90a:	4b3e      	ldr	r3, [pc, #248]	; (800ba04 <_strtod_l+0xb24>)
 800b90c:	f7f4 fe7c 	bl	8000608 <__aeabi_dmul>
 800b910:	4606      	mov	r6, r0
 800b912:	460f      	mov	r7, r1
 800b914:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b918:	9618      	str	r6, [sp, #96]	; 0x60
 800b91a:	9319      	str	r3, [sp, #100]	; 0x64
 800b91c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b920:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b924:	e79c      	b.n	800b860 <_strtod_l+0x980>
 800b926:	f1ba 0f01 	cmp.w	sl, #1
 800b92a:	d102      	bne.n	800b932 <_strtod_l+0xa52>
 800b92c:	2d00      	cmp	r5, #0
 800b92e:	f43f ad8e 	beq.w	800b44e <_strtod_l+0x56e>
 800b932:	2200      	movs	r2, #0
 800b934:	4b34      	ldr	r3, [pc, #208]	; (800ba08 <_strtod_l+0xb28>)
 800b936:	e78f      	b.n	800b858 <_strtod_l+0x978>
 800b938:	2600      	movs	r6, #0
 800b93a:	4f32      	ldr	r7, [pc, #200]	; (800ba04 <_strtod_l+0xb24>)
 800b93c:	e7ea      	b.n	800b914 <_strtod_l+0xa34>
 800b93e:	4b31      	ldr	r3, [pc, #196]	; (800ba04 <_strtod_l+0xb24>)
 800b940:	4630      	mov	r0, r6
 800b942:	4639      	mov	r1, r7
 800b944:	2200      	movs	r2, #0
 800b946:	f7f4 fe5f 	bl	8000608 <__aeabi_dmul>
 800b94a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b94c:	4606      	mov	r6, r0
 800b94e:	460f      	mov	r7, r1
 800b950:	b933      	cbnz	r3, 800b960 <_strtod_l+0xa80>
 800b952:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b956:	9010      	str	r0, [sp, #64]	; 0x40
 800b958:	9311      	str	r3, [sp, #68]	; 0x44
 800b95a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b95e:	e7df      	b.n	800b920 <_strtod_l+0xa40>
 800b960:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b964:	e7f9      	b.n	800b95a <_strtod_l+0xa7a>
 800b966:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b96a:	9b04      	ldr	r3, [sp, #16]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d1ab      	bne.n	800b8c8 <_strtod_l+0x9e8>
 800b970:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b974:	0d1b      	lsrs	r3, r3, #20
 800b976:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b978:	051b      	lsls	r3, r3, #20
 800b97a:	429a      	cmp	r2, r3
 800b97c:	465d      	mov	r5, fp
 800b97e:	d1a3      	bne.n	800b8c8 <_strtod_l+0x9e8>
 800b980:	4639      	mov	r1, r7
 800b982:	4630      	mov	r0, r6
 800b984:	f7f5 f8f0 	bl	8000b68 <__aeabi_d2iz>
 800b988:	f7f4 fdd4 	bl	8000534 <__aeabi_i2d>
 800b98c:	460b      	mov	r3, r1
 800b98e:	4602      	mov	r2, r0
 800b990:	4639      	mov	r1, r7
 800b992:	4630      	mov	r0, r6
 800b994:	f7f4 fc80 	bl	8000298 <__aeabi_dsub>
 800b998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b99a:	4606      	mov	r6, r0
 800b99c:	460f      	mov	r7, r1
 800b99e:	b933      	cbnz	r3, 800b9ae <_strtod_l+0xace>
 800b9a0:	f1ba 0f00 	cmp.w	sl, #0
 800b9a4:	d103      	bne.n	800b9ae <_strtod_l+0xace>
 800b9a6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800b9aa:	2d00      	cmp	r5, #0
 800b9ac:	d06d      	beq.n	800ba8a <_strtod_l+0xbaa>
 800b9ae:	a30a      	add	r3, pc, #40	; (adr r3, 800b9d8 <_strtod_l+0xaf8>)
 800b9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	4639      	mov	r1, r7
 800b9b8:	f7f5 f898 	bl	8000aec <__aeabi_dcmplt>
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	f47f acb8 	bne.w	800b332 <_strtod_l+0x452>
 800b9c2:	a307      	add	r3, pc, #28	; (adr r3, 800b9e0 <_strtod_l+0xb00>)
 800b9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	4639      	mov	r1, r7
 800b9cc:	f7f5 f8ac 	bl	8000b28 <__aeabi_dcmpgt>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	f43f af79 	beq.w	800b8c8 <_strtod_l+0x9e8>
 800b9d6:	e4ac      	b.n	800b332 <_strtod_l+0x452>
 800b9d8:	94a03595 	.word	0x94a03595
 800b9dc:	3fdfffff 	.word	0x3fdfffff
 800b9e0:	35afe535 	.word	0x35afe535
 800b9e4:	3fe00000 	.word	0x3fe00000
 800b9e8:	000fffff 	.word	0x000fffff
 800b9ec:	7ff00000 	.word	0x7ff00000
 800b9f0:	7fefffff 	.word	0x7fefffff
 800b9f4:	39500000 	.word	0x39500000
 800b9f8:	3ff00000 	.word	0x3ff00000
 800b9fc:	7fe00000 	.word	0x7fe00000
 800ba00:	7c9fffff 	.word	0x7c9fffff
 800ba04:	3fe00000 	.word	0x3fe00000
 800ba08:	bff00000 	.word	0xbff00000
 800ba0c:	9b04      	ldr	r3, [sp, #16]
 800ba0e:	b333      	cbz	r3, 800ba5e <_strtod_l+0xb7e>
 800ba10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba12:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ba16:	d822      	bhi.n	800ba5e <_strtod_l+0xb7e>
 800ba18:	a327      	add	r3, pc, #156	; (adr r3, 800bab8 <_strtod_l+0xbd8>)
 800ba1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1e:	4630      	mov	r0, r6
 800ba20:	4639      	mov	r1, r7
 800ba22:	f7f5 f86d 	bl	8000b00 <__aeabi_dcmple>
 800ba26:	b1a0      	cbz	r0, 800ba52 <_strtod_l+0xb72>
 800ba28:	4639      	mov	r1, r7
 800ba2a:	4630      	mov	r0, r6
 800ba2c:	f7f5 f8c4 	bl	8000bb8 <__aeabi_d2uiz>
 800ba30:	2800      	cmp	r0, #0
 800ba32:	bf08      	it	eq
 800ba34:	2001      	moveq	r0, #1
 800ba36:	f7f4 fd6d 	bl	8000514 <__aeabi_ui2d>
 800ba3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba3c:	4606      	mov	r6, r0
 800ba3e:	460f      	mov	r7, r1
 800ba40:	bb03      	cbnz	r3, 800ba84 <_strtod_l+0xba4>
 800ba42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba46:	9012      	str	r0, [sp, #72]	; 0x48
 800ba48:	9313      	str	r3, [sp, #76]	; 0x4c
 800ba4a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ba4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ba52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba56:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ba5a:	1a9b      	subs	r3, r3, r2
 800ba5c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba5e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800ba62:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800ba66:	f001 ffc7 	bl	800d9f8 <__ulp>
 800ba6a:	4650      	mov	r0, sl
 800ba6c:	ec53 2b10 	vmov	r2, r3, d0
 800ba70:	4659      	mov	r1, fp
 800ba72:	f7f4 fdc9 	bl	8000608 <__aeabi_dmul>
 800ba76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ba7a:	f7f4 fc0f 	bl	800029c <__adddf3>
 800ba7e:	4682      	mov	sl, r0
 800ba80:	468b      	mov	fp, r1
 800ba82:	e772      	b.n	800b96a <_strtod_l+0xa8a>
 800ba84:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800ba88:	e7df      	b.n	800ba4a <_strtod_l+0xb6a>
 800ba8a:	a30d      	add	r3, pc, #52	; (adr r3, 800bac0 <_strtod_l+0xbe0>)
 800ba8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba90:	f7f5 f82c 	bl	8000aec <__aeabi_dcmplt>
 800ba94:	e79c      	b.n	800b9d0 <_strtod_l+0xaf0>
 800ba96:	2300      	movs	r3, #0
 800ba98:	930d      	str	r3, [sp, #52]	; 0x34
 800ba9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ba9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba9e:	6013      	str	r3, [r2, #0]
 800baa0:	f7ff ba61 	b.w	800af66 <_strtod_l+0x86>
 800baa4:	2b65      	cmp	r3, #101	; 0x65
 800baa6:	f04f 0200 	mov.w	r2, #0
 800baaa:	f43f ab4e 	beq.w	800b14a <_strtod_l+0x26a>
 800baae:	2101      	movs	r1, #1
 800bab0:	4614      	mov	r4, r2
 800bab2:	9104      	str	r1, [sp, #16]
 800bab4:	f7ff bacb 	b.w	800b04e <_strtod_l+0x16e>
 800bab8:	ffc00000 	.word	0xffc00000
 800babc:	41dfffff 	.word	0x41dfffff
 800bac0:	94a03595 	.word	0x94a03595
 800bac4:	3fcfffff 	.word	0x3fcfffff

0800bac8 <_strtod_r>:
 800bac8:	4b05      	ldr	r3, [pc, #20]	; (800bae0 <_strtod_r+0x18>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	b410      	push	{r4}
 800bace:	6a1b      	ldr	r3, [r3, #32]
 800bad0:	4c04      	ldr	r4, [pc, #16]	; (800bae4 <_strtod_r+0x1c>)
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	bf08      	it	eq
 800bad6:	4623      	moveq	r3, r4
 800bad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800badc:	f7ff ba00 	b.w	800aee0 <_strtod_l>
 800bae0:	20000098 	.word	0x20000098
 800bae4:	200000fc 	.word	0x200000fc

0800bae8 <_strtol_l.isra.0>:
 800bae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baec:	4680      	mov	r8, r0
 800baee:	4689      	mov	r9, r1
 800baf0:	4692      	mov	sl, r2
 800baf2:	461e      	mov	r6, r3
 800baf4:	460f      	mov	r7, r1
 800baf6:	463d      	mov	r5, r7
 800baf8:	9808      	ldr	r0, [sp, #32]
 800bafa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bafe:	f7fe facb 	bl	800a098 <__locale_ctype_ptr_l>
 800bb02:	4420      	add	r0, r4
 800bb04:	7843      	ldrb	r3, [r0, #1]
 800bb06:	f013 0308 	ands.w	r3, r3, #8
 800bb0a:	d132      	bne.n	800bb72 <_strtol_l.isra.0+0x8a>
 800bb0c:	2c2d      	cmp	r4, #45	; 0x2d
 800bb0e:	d132      	bne.n	800bb76 <_strtol_l.isra.0+0x8e>
 800bb10:	787c      	ldrb	r4, [r7, #1]
 800bb12:	1cbd      	adds	r5, r7, #2
 800bb14:	2201      	movs	r2, #1
 800bb16:	2e00      	cmp	r6, #0
 800bb18:	d05d      	beq.n	800bbd6 <_strtol_l.isra.0+0xee>
 800bb1a:	2e10      	cmp	r6, #16
 800bb1c:	d109      	bne.n	800bb32 <_strtol_l.isra.0+0x4a>
 800bb1e:	2c30      	cmp	r4, #48	; 0x30
 800bb20:	d107      	bne.n	800bb32 <_strtol_l.isra.0+0x4a>
 800bb22:	782b      	ldrb	r3, [r5, #0]
 800bb24:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bb28:	2b58      	cmp	r3, #88	; 0x58
 800bb2a:	d14f      	bne.n	800bbcc <_strtol_l.isra.0+0xe4>
 800bb2c:	786c      	ldrb	r4, [r5, #1]
 800bb2e:	2610      	movs	r6, #16
 800bb30:	3502      	adds	r5, #2
 800bb32:	2a00      	cmp	r2, #0
 800bb34:	bf14      	ite	ne
 800bb36:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800bb3a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800bb3e:	2700      	movs	r7, #0
 800bb40:	fbb1 fcf6 	udiv	ip, r1, r6
 800bb44:	4638      	mov	r0, r7
 800bb46:	fb06 1e1c 	mls	lr, r6, ip, r1
 800bb4a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800bb4e:	2b09      	cmp	r3, #9
 800bb50:	d817      	bhi.n	800bb82 <_strtol_l.isra.0+0x9a>
 800bb52:	461c      	mov	r4, r3
 800bb54:	42a6      	cmp	r6, r4
 800bb56:	dd23      	ble.n	800bba0 <_strtol_l.isra.0+0xb8>
 800bb58:	1c7b      	adds	r3, r7, #1
 800bb5a:	d007      	beq.n	800bb6c <_strtol_l.isra.0+0x84>
 800bb5c:	4584      	cmp	ip, r0
 800bb5e:	d31c      	bcc.n	800bb9a <_strtol_l.isra.0+0xb2>
 800bb60:	d101      	bne.n	800bb66 <_strtol_l.isra.0+0x7e>
 800bb62:	45a6      	cmp	lr, r4
 800bb64:	db19      	blt.n	800bb9a <_strtol_l.isra.0+0xb2>
 800bb66:	fb00 4006 	mla	r0, r0, r6, r4
 800bb6a:	2701      	movs	r7, #1
 800bb6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb70:	e7eb      	b.n	800bb4a <_strtol_l.isra.0+0x62>
 800bb72:	462f      	mov	r7, r5
 800bb74:	e7bf      	b.n	800baf6 <_strtol_l.isra.0+0xe>
 800bb76:	2c2b      	cmp	r4, #43	; 0x2b
 800bb78:	bf04      	itt	eq
 800bb7a:	1cbd      	addeq	r5, r7, #2
 800bb7c:	787c      	ldrbeq	r4, [r7, #1]
 800bb7e:	461a      	mov	r2, r3
 800bb80:	e7c9      	b.n	800bb16 <_strtol_l.isra.0+0x2e>
 800bb82:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800bb86:	2b19      	cmp	r3, #25
 800bb88:	d801      	bhi.n	800bb8e <_strtol_l.isra.0+0xa6>
 800bb8a:	3c37      	subs	r4, #55	; 0x37
 800bb8c:	e7e2      	b.n	800bb54 <_strtol_l.isra.0+0x6c>
 800bb8e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800bb92:	2b19      	cmp	r3, #25
 800bb94:	d804      	bhi.n	800bba0 <_strtol_l.isra.0+0xb8>
 800bb96:	3c57      	subs	r4, #87	; 0x57
 800bb98:	e7dc      	b.n	800bb54 <_strtol_l.isra.0+0x6c>
 800bb9a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bb9e:	e7e5      	b.n	800bb6c <_strtol_l.isra.0+0x84>
 800bba0:	1c7b      	adds	r3, r7, #1
 800bba2:	d108      	bne.n	800bbb6 <_strtol_l.isra.0+0xce>
 800bba4:	2322      	movs	r3, #34	; 0x22
 800bba6:	f8c8 3000 	str.w	r3, [r8]
 800bbaa:	4608      	mov	r0, r1
 800bbac:	f1ba 0f00 	cmp.w	sl, #0
 800bbb0:	d107      	bne.n	800bbc2 <_strtol_l.isra.0+0xda>
 800bbb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbb6:	b102      	cbz	r2, 800bbba <_strtol_l.isra.0+0xd2>
 800bbb8:	4240      	negs	r0, r0
 800bbba:	f1ba 0f00 	cmp.w	sl, #0
 800bbbe:	d0f8      	beq.n	800bbb2 <_strtol_l.isra.0+0xca>
 800bbc0:	b10f      	cbz	r7, 800bbc6 <_strtol_l.isra.0+0xde>
 800bbc2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800bbc6:	f8ca 9000 	str.w	r9, [sl]
 800bbca:	e7f2      	b.n	800bbb2 <_strtol_l.isra.0+0xca>
 800bbcc:	2430      	movs	r4, #48	; 0x30
 800bbce:	2e00      	cmp	r6, #0
 800bbd0:	d1af      	bne.n	800bb32 <_strtol_l.isra.0+0x4a>
 800bbd2:	2608      	movs	r6, #8
 800bbd4:	e7ad      	b.n	800bb32 <_strtol_l.isra.0+0x4a>
 800bbd6:	2c30      	cmp	r4, #48	; 0x30
 800bbd8:	d0a3      	beq.n	800bb22 <_strtol_l.isra.0+0x3a>
 800bbda:	260a      	movs	r6, #10
 800bbdc:	e7a9      	b.n	800bb32 <_strtol_l.isra.0+0x4a>
	...

0800bbe0 <_strtol_r>:
 800bbe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbe2:	4c06      	ldr	r4, [pc, #24]	; (800bbfc <_strtol_r+0x1c>)
 800bbe4:	4d06      	ldr	r5, [pc, #24]	; (800bc00 <_strtol_r+0x20>)
 800bbe6:	6824      	ldr	r4, [r4, #0]
 800bbe8:	6a24      	ldr	r4, [r4, #32]
 800bbea:	2c00      	cmp	r4, #0
 800bbec:	bf08      	it	eq
 800bbee:	462c      	moveq	r4, r5
 800bbf0:	9400      	str	r4, [sp, #0]
 800bbf2:	f7ff ff79 	bl	800bae8 <_strtol_l.isra.0>
 800bbf6:	b003      	add	sp, #12
 800bbf8:	bd30      	pop	{r4, r5, pc}
 800bbfa:	bf00      	nop
 800bbfc:	20000098 	.word	0x20000098
 800bc00:	200000fc 	.word	0x200000fc

0800bc04 <__swbuf_r>:
 800bc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc06:	460e      	mov	r6, r1
 800bc08:	4614      	mov	r4, r2
 800bc0a:	4605      	mov	r5, r0
 800bc0c:	b118      	cbz	r0, 800bc16 <__swbuf_r+0x12>
 800bc0e:	6983      	ldr	r3, [r0, #24]
 800bc10:	b90b      	cbnz	r3, 800bc16 <__swbuf_r+0x12>
 800bc12:	f000 fff9 	bl	800cc08 <__sinit>
 800bc16:	4b21      	ldr	r3, [pc, #132]	; (800bc9c <__swbuf_r+0x98>)
 800bc18:	429c      	cmp	r4, r3
 800bc1a:	d12a      	bne.n	800bc72 <__swbuf_r+0x6e>
 800bc1c:	686c      	ldr	r4, [r5, #4]
 800bc1e:	69a3      	ldr	r3, [r4, #24]
 800bc20:	60a3      	str	r3, [r4, #8]
 800bc22:	89a3      	ldrh	r3, [r4, #12]
 800bc24:	071a      	lsls	r2, r3, #28
 800bc26:	d52e      	bpl.n	800bc86 <__swbuf_r+0x82>
 800bc28:	6923      	ldr	r3, [r4, #16]
 800bc2a:	b363      	cbz	r3, 800bc86 <__swbuf_r+0x82>
 800bc2c:	6923      	ldr	r3, [r4, #16]
 800bc2e:	6820      	ldr	r0, [r4, #0]
 800bc30:	1ac0      	subs	r0, r0, r3
 800bc32:	6963      	ldr	r3, [r4, #20]
 800bc34:	b2f6      	uxtb	r6, r6
 800bc36:	4283      	cmp	r3, r0
 800bc38:	4637      	mov	r7, r6
 800bc3a:	dc04      	bgt.n	800bc46 <__swbuf_r+0x42>
 800bc3c:	4621      	mov	r1, r4
 800bc3e:	4628      	mov	r0, r5
 800bc40:	f000 ff78 	bl	800cb34 <_fflush_r>
 800bc44:	bb28      	cbnz	r0, 800bc92 <__swbuf_r+0x8e>
 800bc46:	68a3      	ldr	r3, [r4, #8]
 800bc48:	3b01      	subs	r3, #1
 800bc4a:	60a3      	str	r3, [r4, #8]
 800bc4c:	6823      	ldr	r3, [r4, #0]
 800bc4e:	1c5a      	adds	r2, r3, #1
 800bc50:	6022      	str	r2, [r4, #0]
 800bc52:	701e      	strb	r6, [r3, #0]
 800bc54:	6963      	ldr	r3, [r4, #20]
 800bc56:	3001      	adds	r0, #1
 800bc58:	4283      	cmp	r3, r0
 800bc5a:	d004      	beq.n	800bc66 <__swbuf_r+0x62>
 800bc5c:	89a3      	ldrh	r3, [r4, #12]
 800bc5e:	07db      	lsls	r3, r3, #31
 800bc60:	d519      	bpl.n	800bc96 <__swbuf_r+0x92>
 800bc62:	2e0a      	cmp	r6, #10
 800bc64:	d117      	bne.n	800bc96 <__swbuf_r+0x92>
 800bc66:	4621      	mov	r1, r4
 800bc68:	4628      	mov	r0, r5
 800bc6a:	f000 ff63 	bl	800cb34 <_fflush_r>
 800bc6e:	b190      	cbz	r0, 800bc96 <__swbuf_r+0x92>
 800bc70:	e00f      	b.n	800bc92 <__swbuf_r+0x8e>
 800bc72:	4b0b      	ldr	r3, [pc, #44]	; (800bca0 <__swbuf_r+0x9c>)
 800bc74:	429c      	cmp	r4, r3
 800bc76:	d101      	bne.n	800bc7c <__swbuf_r+0x78>
 800bc78:	68ac      	ldr	r4, [r5, #8]
 800bc7a:	e7d0      	b.n	800bc1e <__swbuf_r+0x1a>
 800bc7c:	4b09      	ldr	r3, [pc, #36]	; (800bca4 <__swbuf_r+0xa0>)
 800bc7e:	429c      	cmp	r4, r3
 800bc80:	bf08      	it	eq
 800bc82:	68ec      	ldreq	r4, [r5, #12]
 800bc84:	e7cb      	b.n	800bc1e <__swbuf_r+0x1a>
 800bc86:	4621      	mov	r1, r4
 800bc88:	4628      	mov	r0, r5
 800bc8a:	f000 f81b 	bl	800bcc4 <__swsetup_r>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d0cc      	beq.n	800bc2c <__swbuf_r+0x28>
 800bc92:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bc96:	4638      	mov	r0, r7
 800bc98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	0800ec90 	.word	0x0800ec90
 800bca0:	0800ecb0 	.word	0x0800ecb0
 800bca4:	0800ec70 	.word	0x0800ec70

0800bca8 <__ascii_wctomb>:
 800bca8:	b149      	cbz	r1, 800bcbe <__ascii_wctomb+0x16>
 800bcaa:	2aff      	cmp	r2, #255	; 0xff
 800bcac:	bf85      	ittet	hi
 800bcae:	238a      	movhi	r3, #138	; 0x8a
 800bcb0:	6003      	strhi	r3, [r0, #0]
 800bcb2:	700a      	strbls	r2, [r1, #0]
 800bcb4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bcb8:	bf98      	it	ls
 800bcba:	2001      	movls	r0, #1
 800bcbc:	4770      	bx	lr
 800bcbe:	4608      	mov	r0, r1
 800bcc0:	4770      	bx	lr
	...

0800bcc4 <__swsetup_r>:
 800bcc4:	4b32      	ldr	r3, [pc, #200]	; (800bd90 <__swsetup_r+0xcc>)
 800bcc6:	b570      	push	{r4, r5, r6, lr}
 800bcc8:	681d      	ldr	r5, [r3, #0]
 800bcca:	4606      	mov	r6, r0
 800bccc:	460c      	mov	r4, r1
 800bcce:	b125      	cbz	r5, 800bcda <__swsetup_r+0x16>
 800bcd0:	69ab      	ldr	r3, [r5, #24]
 800bcd2:	b913      	cbnz	r3, 800bcda <__swsetup_r+0x16>
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	f000 ff97 	bl	800cc08 <__sinit>
 800bcda:	4b2e      	ldr	r3, [pc, #184]	; (800bd94 <__swsetup_r+0xd0>)
 800bcdc:	429c      	cmp	r4, r3
 800bcde:	d10f      	bne.n	800bd00 <__swsetup_r+0x3c>
 800bce0:	686c      	ldr	r4, [r5, #4]
 800bce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	0715      	lsls	r5, r2, #28
 800bcea:	d42c      	bmi.n	800bd46 <__swsetup_r+0x82>
 800bcec:	06d0      	lsls	r0, r2, #27
 800bcee:	d411      	bmi.n	800bd14 <__swsetup_r+0x50>
 800bcf0:	2209      	movs	r2, #9
 800bcf2:	6032      	str	r2, [r6, #0]
 800bcf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcf8:	81a3      	strh	r3, [r4, #12]
 800bcfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcfe:	e03e      	b.n	800bd7e <__swsetup_r+0xba>
 800bd00:	4b25      	ldr	r3, [pc, #148]	; (800bd98 <__swsetup_r+0xd4>)
 800bd02:	429c      	cmp	r4, r3
 800bd04:	d101      	bne.n	800bd0a <__swsetup_r+0x46>
 800bd06:	68ac      	ldr	r4, [r5, #8]
 800bd08:	e7eb      	b.n	800bce2 <__swsetup_r+0x1e>
 800bd0a:	4b24      	ldr	r3, [pc, #144]	; (800bd9c <__swsetup_r+0xd8>)
 800bd0c:	429c      	cmp	r4, r3
 800bd0e:	bf08      	it	eq
 800bd10:	68ec      	ldreq	r4, [r5, #12]
 800bd12:	e7e6      	b.n	800bce2 <__swsetup_r+0x1e>
 800bd14:	0751      	lsls	r1, r2, #29
 800bd16:	d512      	bpl.n	800bd3e <__swsetup_r+0x7a>
 800bd18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd1a:	b141      	cbz	r1, 800bd2e <__swsetup_r+0x6a>
 800bd1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd20:	4299      	cmp	r1, r3
 800bd22:	d002      	beq.n	800bd2a <__swsetup_r+0x66>
 800bd24:	4630      	mov	r0, r6
 800bd26:	f001 ffa9 	bl	800dc7c <_free_r>
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	6363      	str	r3, [r4, #52]	; 0x34
 800bd2e:	89a3      	ldrh	r3, [r4, #12]
 800bd30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd34:	81a3      	strh	r3, [r4, #12]
 800bd36:	2300      	movs	r3, #0
 800bd38:	6063      	str	r3, [r4, #4]
 800bd3a:	6923      	ldr	r3, [r4, #16]
 800bd3c:	6023      	str	r3, [r4, #0]
 800bd3e:	89a3      	ldrh	r3, [r4, #12]
 800bd40:	f043 0308 	orr.w	r3, r3, #8
 800bd44:	81a3      	strh	r3, [r4, #12]
 800bd46:	6923      	ldr	r3, [r4, #16]
 800bd48:	b94b      	cbnz	r3, 800bd5e <__swsetup_r+0x9a>
 800bd4a:	89a3      	ldrh	r3, [r4, #12]
 800bd4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd54:	d003      	beq.n	800bd5e <__swsetup_r+0x9a>
 800bd56:	4621      	mov	r1, r4
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f001 fb39 	bl	800d3d0 <__smakebuf_r>
 800bd5e:	89a2      	ldrh	r2, [r4, #12]
 800bd60:	f012 0301 	ands.w	r3, r2, #1
 800bd64:	d00c      	beq.n	800bd80 <__swsetup_r+0xbc>
 800bd66:	2300      	movs	r3, #0
 800bd68:	60a3      	str	r3, [r4, #8]
 800bd6a:	6963      	ldr	r3, [r4, #20]
 800bd6c:	425b      	negs	r3, r3
 800bd6e:	61a3      	str	r3, [r4, #24]
 800bd70:	6923      	ldr	r3, [r4, #16]
 800bd72:	b953      	cbnz	r3, 800bd8a <__swsetup_r+0xc6>
 800bd74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd78:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800bd7c:	d1ba      	bne.n	800bcf4 <__swsetup_r+0x30>
 800bd7e:	bd70      	pop	{r4, r5, r6, pc}
 800bd80:	0792      	lsls	r2, r2, #30
 800bd82:	bf58      	it	pl
 800bd84:	6963      	ldrpl	r3, [r4, #20]
 800bd86:	60a3      	str	r3, [r4, #8]
 800bd88:	e7f2      	b.n	800bd70 <__swsetup_r+0xac>
 800bd8a:	2000      	movs	r0, #0
 800bd8c:	e7f7      	b.n	800bd7e <__swsetup_r+0xba>
 800bd8e:	bf00      	nop
 800bd90:	20000098 	.word	0x20000098
 800bd94:	0800ec90 	.word	0x0800ec90
 800bd98:	0800ecb0 	.word	0x0800ecb0
 800bd9c:	0800ec70 	.word	0x0800ec70

0800bda0 <quorem>:
 800bda0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda4:	6903      	ldr	r3, [r0, #16]
 800bda6:	690c      	ldr	r4, [r1, #16]
 800bda8:	42a3      	cmp	r3, r4
 800bdaa:	4680      	mov	r8, r0
 800bdac:	f2c0 8082 	blt.w	800beb4 <quorem+0x114>
 800bdb0:	3c01      	subs	r4, #1
 800bdb2:	f101 0714 	add.w	r7, r1, #20
 800bdb6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800bdba:	f100 0614 	add.w	r6, r0, #20
 800bdbe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800bdc2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800bdc6:	eb06 030c 	add.w	r3, r6, ip
 800bdca:	3501      	adds	r5, #1
 800bdcc:	eb07 090c 	add.w	r9, r7, ip
 800bdd0:	9301      	str	r3, [sp, #4]
 800bdd2:	fbb0 f5f5 	udiv	r5, r0, r5
 800bdd6:	b395      	cbz	r5, 800be3e <quorem+0x9e>
 800bdd8:	f04f 0a00 	mov.w	sl, #0
 800bddc:	4638      	mov	r0, r7
 800bdde:	46b6      	mov	lr, r6
 800bde0:	46d3      	mov	fp, sl
 800bde2:	f850 2b04 	ldr.w	r2, [r0], #4
 800bde6:	b293      	uxth	r3, r2
 800bde8:	fb05 a303 	mla	r3, r5, r3, sl
 800bdec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	ebab 0303 	sub.w	r3, fp, r3
 800bdf6:	0c12      	lsrs	r2, r2, #16
 800bdf8:	f8de b000 	ldr.w	fp, [lr]
 800bdfc:	fb05 a202 	mla	r2, r5, r2, sl
 800be00:	fa13 f38b 	uxtah	r3, r3, fp
 800be04:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800be08:	fa1f fb82 	uxth.w	fp, r2
 800be0c:	f8de 2000 	ldr.w	r2, [lr]
 800be10:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800be14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be18:	b29b      	uxth	r3, r3
 800be1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be1e:	4581      	cmp	r9, r0
 800be20:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800be24:	f84e 3b04 	str.w	r3, [lr], #4
 800be28:	d2db      	bcs.n	800bde2 <quorem+0x42>
 800be2a:	f856 300c 	ldr.w	r3, [r6, ip]
 800be2e:	b933      	cbnz	r3, 800be3e <quorem+0x9e>
 800be30:	9b01      	ldr	r3, [sp, #4]
 800be32:	3b04      	subs	r3, #4
 800be34:	429e      	cmp	r6, r3
 800be36:	461a      	mov	r2, r3
 800be38:	d330      	bcc.n	800be9c <quorem+0xfc>
 800be3a:	f8c8 4010 	str.w	r4, [r8, #16]
 800be3e:	4640      	mov	r0, r8
 800be40:	f001 fd62 	bl	800d908 <__mcmp>
 800be44:	2800      	cmp	r0, #0
 800be46:	db25      	blt.n	800be94 <quorem+0xf4>
 800be48:	3501      	adds	r5, #1
 800be4a:	4630      	mov	r0, r6
 800be4c:	f04f 0c00 	mov.w	ip, #0
 800be50:	f857 2b04 	ldr.w	r2, [r7], #4
 800be54:	f8d0 e000 	ldr.w	lr, [r0]
 800be58:	b293      	uxth	r3, r2
 800be5a:	ebac 0303 	sub.w	r3, ip, r3
 800be5e:	0c12      	lsrs	r2, r2, #16
 800be60:	fa13 f38e 	uxtah	r3, r3, lr
 800be64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800be68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be72:	45b9      	cmp	r9, r7
 800be74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800be78:	f840 3b04 	str.w	r3, [r0], #4
 800be7c:	d2e8      	bcs.n	800be50 <quorem+0xb0>
 800be7e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800be82:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800be86:	b92a      	cbnz	r2, 800be94 <quorem+0xf4>
 800be88:	3b04      	subs	r3, #4
 800be8a:	429e      	cmp	r6, r3
 800be8c:	461a      	mov	r2, r3
 800be8e:	d30b      	bcc.n	800bea8 <quorem+0x108>
 800be90:	f8c8 4010 	str.w	r4, [r8, #16]
 800be94:	4628      	mov	r0, r5
 800be96:	b003      	add	sp, #12
 800be98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be9c:	6812      	ldr	r2, [r2, #0]
 800be9e:	3b04      	subs	r3, #4
 800bea0:	2a00      	cmp	r2, #0
 800bea2:	d1ca      	bne.n	800be3a <quorem+0x9a>
 800bea4:	3c01      	subs	r4, #1
 800bea6:	e7c5      	b.n	800be34 <quorem+0x94>
 800bea8:	6812      	ldr	r2, [r2, #0]
 800beaa:	3b04      	subs	r3, #4
 800beac:	2a00      	cmp	r2, #0
 800beae:	d1ef      	bne.n	800be90 <quorem+0xf0>
 800beb0:	3c01      	subs	r4, #1
 800beb2:	e7ea      	b.n	800be8a <quorem+0xea>
 800beb4:	2000      	movs	r0, #0
 800beb6:	e7ee      	b.n	800be96 <quorem+0xf6>

0800beb8 <_dtoa_r>:
 800beb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bebc:	ec57 6b10 	vmov	r6, r7, d0
 800bec0:	b097      	sub	sp, #92	; 0x5c
 800bec2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bec4:	9106      	str	r1, [sp, #24]
 800bec6:	4604      	mov	r4, r0
 800bec8:	920b      	str	r2, [sp, #44]	; 0x2c
 800beca:	9312      	str	r3, [sp, #72]	; 0x48
 800becc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bed0:	e9cd 6700 	strd	r6, r7, [sp]
 800bed4:	b93d      	cbnz	r5, 800bee6 <_dtoa_r+0x2e>
 800bed6:	2010      	movs	r0, #16
 800bed8:	f001 faba 	bl	800d450 <malloc>
 800bedc:	6260      	str	r0, [r4, #36]	; 0x24
 800bede:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bee2:	6005      	str	r5, [r0, #0]
 800bee4:	60c5      	str	r5, [r0, #12]
 800bee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bee8:	6819      	ldr	r1, [r3, #0]
 800beea:	b151      	cbz	r1, 800bf02 <_dtoa_r+0x4a>
 800beec:	685a      	ldr	r2, [r3, #4]
 800beee:	604a      	str	r2, [r1, #4]
 800bef0:	2301      	movs	r3, #1
 800bef2:	4093      	lsls	r3, r2
 800bef4:	608b      	str	r3, [r1, #8]
 800bef6:	4620      	mov	r0, r4
 800bef8:	f001 fae6 	bl	800d4c8 <_Bfree>
 800befc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800befe:	2200      	movs	r2, #0
 800bf00:	601a      	str	r2, [r3, #0]
 800bf02:	1e3b      	subs	r3, r7, #0
 800bf04:	bfbb      	ittet	lt
 800bf06:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bf0a:	9301      	strlt	r3, [sp, #4]
 800bf0c:	2300      	movge	r3, #0
 800bf0e:	2201      	movlt	r2, #1
 800bf10:	bfac      	ite	ge
 800bf12:	f8c8 3000 	strge.w	r3, [r8]
 800bf16:	f8c8 2000 	strlt.w	r2, [r8]
 800bf1a:	4baf      	ldr	r3, [pc, #700]	; (800c1d8 <_dtoa_r+0x320>)
 800bf1c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bf20:	ea33 0308 	bics.w	r3, r3, r8
 800bf24:	d114      	bne.n	800bf50 <_dtoa_r+0x98>
 800bf26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf28:	f242 730f 	movw	r3, #9999	; 0x270f
 800bf2c:	6013      	str	r3, [r2, #0]
 800bf2e:	9b00      	ldr	r3, [sp, #0]
 800bf30:	b923      	cbnz	r3, 800bf3c <_dtoa_r+0x84>
 800bf32:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800bf36:	2800      	cmp	r0, #0
 800bf38:	f000 8542 	beq.w	800c9c0 <_dtoa_r+0xb08>
 800bf3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf3e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c1ec <_dtoa_r+0x334>
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f000 8544 	beq.w	800c9d0 <_dtoa_r+0xb18>
 800bf48:	f10b 0303 	add.w	r3, fp, #3
 800bf4c:	f000 bd3e 	b.w	800c9cc <_dtoa_r+0xb14>
 800bf50:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bf54:	2200      	movs	r2, #0
 800bf56:	2300      	movs	r3, #0
 800bf58:	4630      	mov	r0, r6
 800bf5a:	4639      	mov	r1, r7
 800bf5c:	f7f4 fdbc 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf60:	4681      	mov	r9, r0
 800bf62:	b168      	cbz	r0, 800bf80 <_dtoa_r+0xc8>
 800bf64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf66:	2301      	movs	r3, #1
 800bf68:	6013      	str	r3, [r2, #0]
 800bf6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f000 8524 	beq.w	800c9ba <_dtoa_r+0xb02>
 800bf72:	4b9a      	ldr	r3, [pc, #616]	; (800c1dc <_dtoa_r+0x324>)
 800bf74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bf76:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800bf7a:	6013      	str	r3, [r2, #0]
 800bf7c:	f000 bd28 	b.w	800c9d0 <_dtoa_r+0xb18>
 800bf80:	aa14      	add	r2, sp, #80	; 0x50
 800bf82:	a915      	add	r1, sp, #84	; 0x54
 800bf84:	ec47 6b10 	vmov	d0, r6, r7
 800bf88:	4620      	mov	r0, r4
 800bf8a:	f001 fdab 	bl	800dae4 <__d2b>
 800bf8e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bf92:	9004      	str	r0, [sp, #16]
 800bf94:	2d00      	cmp	r5, #0
 800bf96:	d07c      	beq.n	800c092 <_dtoa_r+0x1da>
 800bf98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bf9c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800bfa0:	46b2      	mov	sl, r6
 800bfa2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800bfa6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bfaa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800bfae:	2200      	movs	r2, #0
 800bfb0:	4b8b      	ldr	r3, [pc, #556]	; (800c1e0 <_dtoa_r+0x328>)
 800bfb2:	4650      	mov	r0, sl
 800bfb4:	4659      	mov	r1, fp
 800bfb6:	f7f4 f96f 	bl	8000298 <__aeabi_dsub>
 800bfba:	a381      	add	r3, pc, #516	; (adr r3, 800c1c0 <_dtoa_r+0x308>)
 800bfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc0:	f7f4 fb22 	bl	8000608 <__aeabi_dmul>
 800bfc4:	a380      	add	r3, pc, #512	; (adr r3, 800c1c8 <_dtoa_r+0x310>)
 800bfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfca:	f7f4 f967 	bl	800029c <__adddf3>
 800bfce:	4606      	mov	r6, r0
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	460f      	mov	r7, r1
 800bfd4:	f7f4 faae 	bl	8000534 <__aeabi_i2d>
 800bfd8:	a37d      	add	r3, pc, #500	; (adr r3, 800c1d0 <_dtoa_r+0x318>)
 800bfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfde:	f7f4 fb13 	bl	8000608 <__aeabi_dmul>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	4639      	mov	r1, r7
 800bfea:	f7f4 f957 	bl	800029c <__adddf3>
 800bfee:	4606      	mov	r6, r0
 800bff0:	460f      	mov	r7, r1
 800bff2:	f7f4 fdb9 	bl	8000b68 <__aeabi_d2iz>
 800bff6:	2200      	movs	r2, #0
 800bff8:	4682      	mov	sl, r0
 800bffa:	2300      	movs	r3, #0
 800bffc:	4630      	mov	r0, r6
 800bffe:	4639      	mov	r1, r7
 800c000:	f7f4 fd74 	bl	8000aec <__aeabi_dcmplt>
 800c004:	b148      	cbz	r0, 800c01a <_dtoa_r+0x162>
 800c006:	4650      	mov	r0, sl
 800c008:	f7f4 fa94 	bl	8000534 <__aeabi_i2d>
 800c00c:	4632      	mov	r2, r6
 800c00e:	463b      	mov	r3, r7
 800c010:	f7f4 fd62 	bl	8000ad8 <__aeabi_dcmpeq>
 800c014:	b908      	cbnz	r0, 800c01a <_dtoa_r+0x162>
 800c016:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c01a:	f1ba 0f16 	cmp.w	sl, #22
 800c01e:	d859      	bhi.n	800c0d4 <_dtoa_r+0x21c>
 800c020:	4970      	ldr	r1, [pc, #448]	; (800c1e4 <_dtoa_r+0x32c>)
 800c022:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c026:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c02a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c02e:	f7f4 fd7b 	bl	8000b28 <__aeabi_dcmpgt>
 800c032:	2800      	cmp	r0, #0
 800c034:	d050      	beq.n	800c0d8 <_dtoa_r+0x220>
 800c036:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c03a:	2300      	movs	r3, #0
 800c03c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c03e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c040:	1b5d      	subs	r5, r3, r5
 800c042:	f1b5 0801 	subs.w	r8, r5, #1
 800c046:	bf49      	itett	mi
 800c048:	f1c5 0301 	rsbmi	r3, r5, #1
 800c04c:	2300      	movpl	r3, #0
 800c04e:	9305      	strmi	r3, [sp, #20]
 800c050:	f04f 0800 	movmi.w	r8, #0
 800c054:	bf58      	it	pl
 800c056:	9305      	strpl	r3, [sp, #20]
 800c058:	f1ba 0f00 	cmp.w	sl, #0
 800c05c:	db3e      	blt.n	800c0dc <_dtoa_r+0x224>
 800c05e:	2300      	movs	r3, #0
 800c060:	44d0      	add	r8, sl
 800c062:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c066:	9307      	str	r3, [sp, #28]
 800c068:	9b06      	ldr	r3, [sp, #24]
 800c06a:	2b09      	cmp	r3, #9
 800c06c:	f200 8090 	bhi.w	800c190 <_dtoa_r+0x2d8>
 800c070:	2b05      	cmp	r3, #5
 800c072:	bfc4      	itt	gt
 800c074:	3b04      	subgt	r3, #4
 800c076:	9306      	strgt	r3, [sp, #24]
 800c078:	9b06      	ldr	r3, [sp, #24]
 800c07a:	f1a3 0302 	sub.w	r3, r3, #2
 800c07e:	bfcc      	ite	gt
 800c080:	2500      	movgt	r5, #0
 800c082:	2501      	movle	r5, #1
 800c084:	2b03      	cmp	r3, #3
 800c086:	f200 808f 	bhi.w	800c1a8 <_dtoa_r+0x2f0>
 800c08a:	e8df f003 	tbb	[pc, r3]
 800c08e:	7f7d      	.short	0x7f7d
 800c090:	7131      	.short	0x7131
 800c092:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c096:	441d      	add	r5, r3
 800c098:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c09c:	2820      	cmp	r0, #32
 800c09e:	dd13      	ble.n	800c0c8 <_dtoa_r+0x210>
 800c0a0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c0a4:	9b00      	ldr	r3, [sp, #0]
 800c0a6:	fa08 f800 	lsl.w	r8, r8, r0
 800c0aa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c0ae:	fa23 f000 	lsr.w	r0, r3, r0
 800c0b2:	ea48 0000 	orr.w	r0, r8, r0
 800c0b6:	f7f4 fa2d 	bl	8000514 <__aeabi_ui2d>
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	4682      	mov	sl, r0
 800c0be:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c0c2:	3d01      	subs	r5, #1
 800c0c4:	9313      	str	r3, [sp, #76]	; 0x4c
 800c0c6:	e772      	b.n	800bfae <_dtoa_r+0xf6>
 800c0c8:	9b00      	ldr	r3, [sp, #0]
 800c0ca:	f1c0 0020 	rsb	r0, r0, #32
 800c0ce:	fa03 f000 	lsl.w	r0, r3, r0
 800c0d2:	e7f0      	b.n	800c0b6 <_dtoa_r+0x1fe>
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	e7b1      	b.n	800c03c <_dtoa_r+0x184>
 800c0d8:	900f      	str	r0, [sp, #60]	; 0x3c
 800c0da:	e7b0      	b.n	800c03e <_dtoa_r+0x186>
 800c0dc:	9b05      	ldr	r3, [sp, #20]
 800c0de:	eba3 030a 	sub.w	r3, r3, sl
 800c0e2:	9305      	str	r3, [sp, #20]
 800c0e4:	f1ca 0300 	rsb	r3, sl, #0
 800c0e8:	9307      	str	r3, [sp, #28]
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	930e      	str	r3, [sp, #56]	; 0x38
 800c0ee:	e7bb      	b.n	800c068 <_dtoa_r+0x1b0>
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	930a      	str	r3, [sp, #40]	; 0x28
 800c0f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	dd59      	ble.n	800c1ae <_dtoa_r+0x2f6>
 800c0fa:	9302      	str	r3, [sp, #8]
 800c0fc:	4699      	mov	r9, r3
 800c0fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c100:	2200      	movs	r2, #0
 800c102:	6072      	str	r2, [r6, #4]
 800c104:	2204      	movs	r2, #4
 800c106:	f102 0014 	add.w	r0, r2, #20
 800c10a:	4298      	cmp	r0, r3
 800c10c:	6871      	ldr	r1, [r6, #4]
 800c10e:	d953      	bls.n	800c1b8 <_dtoa_r+0x300>
 800c110:	4620      	mov	r0, r4
 800c112:	f001 f9a5 	bl	800d460 <_Balloc>
 800c116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c118:	6030      	str	r0, [r6, #0]
 800c11a:	f1b9 0f0e 	cmp.w	r9, #14
 800c11e:	f8d3 b000 	ldr.w	fp, [r3]
 800c122:	f200 80e6 	bhi.w	800c2f2 <_dtoa_r+0x43a>
 800c126:	2d00      	cmp	r5, #0
 800c128:	f000 80e3 	beq.w	800c2f2 <_dtoa_r+0x43a>
 800c12c:	ed9d 7b00 	vldr	d7, [sp]
 800c130:	f1ba 0f00 	cmp.w	sl, #0
 800c134:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c138:	dd74      	ble.n	800c224 <_dtoa_r+0x36c>
 800c13a:	4a2a      	ldr	r2, [pc, #168]	; (800c1e4 <_dtoa_r+0x32c>)
 800c13c:	f00a 030f 	and.w	r3, sl, #15
 800c140:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c144:	ed93 7b00 	vldr	d7, [r3]
 800c148:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c14c:	06f0      	lsls	r0, r6, #27
 800c14e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c152:	d565      	bpl.n	800c220 <_dtoa_r+0x368>
 800c154:	4b24      	ldr	r3, [pc, #144]	; (800c1e8 <_dtoa_r+0x330>)
 800c156:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c15a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c15e:	f7f4 fb7d 	bl	800085c <__aeabi_ddiv>
 800c162:	e9cd 0100 	strd	r0, r1, [sp]
 800c166:	f006 060f 	and.w	r6, r6, #15
 800c16a:	2503      	movs	r5, #3
 800c16c:	4f1e      	ldr	r7, [pc, #120]	; (800c1e8 <_dtoa_r+0x330>)
 800c16e:	e04c      	b.n	800c20a <_dtoa_r+0x352>
 800c170:	2301      	movs	r3, #1
 800c172:	930a      	str	r3, [sp, #40]	; 0x28
 800c174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c176:	4453      	add	r3, sl
 800c178:	f103 0901 	add.w	r9, r3, #1
 800c17c:	9302      	str	r3, [sp, #8]
 800c17e:	464b      	mov	r3, r9
 800c180:	2b01      	cmp	r3, #1
 800c182:	bfb8      	it	lt
 800c184:	2301      	movlt	r3, #1
 800c186:	e7ba      	b.n	800c0fe <_dtoa_r+0x246>
 800c188:	2300      	movs	r3, #0
 800c18a:	e7b2      	b.n	800c0f2 <_dtoa_r+0x23a>
 800c18c:	2300      	movs	r3, #0
 800c18e:	e7f0      	b.n	800c172 <_dtoa_r+0x2ba>
 800c190:	2501      	movs	r5, #1
 800c192:	2300      	movs	r3, #0
 800c194:	9306      	str	r3, [sp, #24]
 800c196:	950a      	str	r5, [sp, #40]	; 0x28
 800c198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c19c:	9302      	str	r3, [sp, #8]
 800c19e:	4699      	mov	r9, r3
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	2312      	movs	r3, #18
 800c1a4:	920b      	str	r2, [sp, #44]	; 0x2c
 800c1a6:	e7aa      	b.n	800c0fe <_dtoa_r+0x246>
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	930a      	str	r3, [sp, #40]	; 0x28
 800c1ac:	e7f4      	b.n	800c198 <_dtoa_r+0x2e0>
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	9302      	str	r3, [sp, #8]
 800c1b2:	4699      	mov	r9, r3
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	e7f5      	b.n	800c1a4 <_dtoa_r+0x2ec>
 800c1b8:	3101      	adds	r1, #1
 800c1ba:	6071      	str	r1, [r6, #4]
 800c1bc:	0052      	lsls	r2, r2, #1
 800c1be:	e7a2      	b.n	800c106 <_dtoa_r+0x24e>
 800c1c0:	636f4361 	.word	0x636f4361
 800c1c4:	3fd287a7 	.word	0x3fd287a7
 800c1c8:	8b60c8b3 	.word	0x8b60c8b3
 800c1cc:	3fc68a28 	.word	0x3fc68a28
 800c1d0:	509f79fb 	.word	0x509f79fb
 800c1d4:	3fd34413 	.word	0x3fd34413
 800c1d8:	7ff00000 	.word	0x7ff00000
 800c1dc:	0800eae7 	.word	0x0800eae7
 800c1e0:	3ff80000 	.word	0x3ff80000
 800c1e4:	0800ecf8 	.word	0x0800ecf8
 800c1e8:	0800ecd0 	.word	0x0800ecd0
 800c1ec:	0800ec6a 	.word	0x0800ec6a
 800c1f0:	07f1      	lsls	r1, r6, #31
 800c1f2:	d508      	bpl.n	800c206 <_dtoa_r+0x34e>
 800c1f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c1f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1fc:	f7f4 fa04 	bl	8000608 <__aeabi_dmul>
 800c200:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c204:	3501      	adds	r5, #1
 800c206:	1076      	asrs	r6, r6, #1
 800c208:	3708      	adds	r7, #8
 800c20a:	2e00      	cmp	r6, #0
 800c20c:	d1f0      	bne.n	800c1f0 <_dtoa_r+0x338>
 800c20e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c212:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c216:	f7f4 fb21 	bl	800085c <__aeabi_ddiv>
 800c21a:	e9cd 0100 	strd	r0, r1, [sp]
 800c21e:	e01a      	b.n	800c256 <_dtoa_r+0x39e>
 800c220:	2502      	movs	r5, #2
 800c222:	e7a3      	b.n	800c16c <_dtoa_r+0x2b4>
 800c224:	f000 80a0 	beq.w	800c368 <_dtoa_r+0x4b0>
 800c228:	f1ca 0600 	rsb	r6, sl, #0
 800c22c:	4b9f      	ldr	r3, [pc, #636]	; (800c4ac <_dtoa_r+0x5f4>)
 800c22e:	4fa0      	ldr	r7, [pc, #640]	; (800c4b0 <_dtoa_r+0x5f8>)
 800c230:	f006 020f 	and.w	r2, r6, #15
 800c234:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c240:	f7f4 f9e2 	bl	8000608 <__aeabi_dmul>
 800c244:	e9cd 0100 	strd	r0, r1, [sp]
 800c248:	1136      	asrs	r6, r6, #4
 800c24a:	2300      	movs	r3, #0
 800c24c:	2502      	movs	r5, #2
 800c24e:	2e00      	cmp	r6, #0
 800c250:	d17f      	bne.n	800c352 <_dtoa_r+0x49a>
 800c252:	2b00      	cmp	r3, #0
 800c254:	d1e1      	bne.n	800c21a <_dtoa_r+0x362>
 800c256:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c258:	2b00      	cmp	r3, #0
 800c25a:	f000 8087 	beq.w	800c36c <_dtoa_r+0x4b4>
 800c25e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c262:	2200      	movs	r2, #0
 800c264:	4b93      	ldr	r3, [pc, #588]	; (800c4b4 <_dtoa_r+0x5fc>)
 800c266:	4630      	mov	r0, r6
 800c268:	4639      	mov	r1, r7
 800c26a:	f7f4 fc3f 	bl	8000aec <__aeabi_dcmplt>
 800c26e:	2800      	cmp	r0, #0
 800c270:	d07c      	beq.n	800c36c <_dtoa_r+0x4b4>
 800c272:	f1b9 0f00 	cmp.w	r9, #0
 800c276:	d079      	beq.n	800c36c <_dtoa_r+0x4b4>
 800c278:	9b02      	ldr	r3, [sp, #8]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	dd35      	ble.n	800c2ea <_dtoa_r+0x432>
 800c27e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800c282:	9308      	str	r3, [sp, #32]
 800c284:	4639      	mov	r1, r7
 800c286:	2200      	movs	r2, #0
 800c288:	4b8b      	ldr	r3, [pc, #556]	; (800c4b8 <_dtoa_r+0x600>)
 800c28a:	4630      	mov	r0, r6
 800c28c:	f7f4 f9bc 	bl	8000608 <__aeabi_dmul>
 800c290:	e9cd 0100 	strd	r0, r1, [sp]
 800c294:	9f02      	ldr	r7, [sp, #8]
 800c296:	3501      	adds	r5, #1
 800c298:	4628      	mov	r0, r5
 800c29a:	f7f4 f94b 	bl	8000534 <__aeabi_i2d>
 800c29e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2a2:	f7f4 f9b1 	bl	8000608 <__aeabi_dmul>
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	4b84      	ldr	r3, [pc, #528]	; (800c4bc <_dtoa_r+0x604>)
 800c2aa:	f7f3 fff7 	bl	800029c <__adddf3>
 800c2ae:	4605      	mov	r5, r0
 800c2b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c2b4:	2f00      	cmp	r7, #0
 800c2b6:	d15d      	bne.n	800c374 <_dtoa_r+0x4bc>
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	4b81      	ldr	r3, [pc, #516]	; (800c4c0 <_dtoa_r+0x608>)
 800c2bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2c0:	f7f3 ffea 	bl	8000298 <__aeabi_dsub>
 800c2c4:	462a      	mov	r2, r5
 800c2c6:	4633      	mov	r3, r6
 800c2c8:	e9cd 0100 	strd	r0, r1, [sp]
 800c2cc:	f7f4 fc2c 	bl	8000b28 <__aeabi_dcmpgt>
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	f040 8288 	bne.w	800c7e6 <_dtoa_r+0x92e>
 800c2d6:	462a      	mov	r2, r5
 800c2d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c2dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2e0:	f7f4 fc04 	bl	8000aec <__aeabi_dcmplt>
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	f040 827c 	bne.w	800c7e2 <_dtoa_r+0x92a>
 800c2ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c2ee:	e9cd 2300 	strd	r2, r3, [sp]
 800c2f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	f2c0 8150 	blt.w	800c59a <_dtoa_r+0x6e2>
 800c2fa:	f1ba 0f0e 	cmp.w	sl, #14
 800c2fe:	f300 814c 	bgt.w	800c59a <_dtoa_r+0x6e2>
 800c302:	4b6a      	ldr	r3, [pc, #424]	; (800c4ac <_dtoa_r+0x5f4>)
 800c304:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c308:	ed93 7b00 	vldr	d7, [r3]
 800c30c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c30e:	2b00      	cmp	r3, #0
 800c310:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c314:	f280 80d8 	bge.w	800c4c8 <_dtoa_r+0x610>
 800c318:	f1b9 0f00 	cmp.w	r9, #0
 800c31c:	f300 80d4 	bgt.w	800c4c8 <_dtoa_r+0x610>
 800c320:	f040 825e 	bne.w	800c7e0 <_dtoa_r+0x928>
 800c324:	2200      	movs	r2, #0
 800c326:	4b66      	ldr	r3, [pc, #408]	; (800c4c0 <_dtoa_r+0x608>)
 800c328:	ec51 0b17 	vmov	r0, r1, d7
 800c32c:	f7f4 f96c 	bl	8000608 <__aeabi_dmul>
 800c330:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c334:	f7f4 fbee 	bl	8000b14 <__aeabi_dcmpge>
 800c338:	464f      	mov	r7, r9
 800c33a:	464e      	mov	r6, r9
 800c33c:	2800      	cmp	r0, #0
 800c33e:	f040 8234 	bne.w	800c7aa <_dtoa_r+0x8f2>
 800c342:	2331      	movs	r3, #49	; 0x31
 800c344:	f10b 0501 	add.w	r5, fp, #1
 800c348:	f88b 3000 	strb.w	r3, [fp]
 800c34c:	f10a 0a01 	add.w	sl, sl, #1
 800c350:	e22f      	b.n	800c7b2 <_dtoa_r+0x8fa>
 800c352:	07f2      	lsls	r2, r6, #31
 800c354:	d505      	bpl.n	800c362 <_dtoa_r+0x4aa>
 800c356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c35a:	f7f4 f955 	bl	8000608 <__aeabi_dmul>
 800c35e:	3501      	adds	r5, #1
 800c360:	2301      	movs	r3, #1
 800c362:	1076      	asrs	r6, r6, #1
 800c364:	3708      	adds	r7, #8
 800c366:	e772      	b.n	800c24e <_dtoa_r+0x396>
 800c368:	2502      	movs	r5, #2
 800c36a:	e774      	b.n	800c256 <_dtoa_r+0x39e>
 800c36c:	f8cd a020 	str.w	sl, [sp, #32]
 800c370:	464f      	mov	r7, r9
 800c372:	e791      	b.n	800c298 <_dtoa_r+0x3e0>
 800c374:	4b4d      	ldr	r3, [pc, #308]	; (800c4ac <_dtoa_r+0x5f4>)
 800c376:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c37a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c37e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c380:	2b00      	cmp	r3, #0
 800c382:	d047      	beq.n	800c414 <_dtoa_r+0x55c>
 800c384:	4602      	mov	r2, r0
 800c386:	460b      	mov	r3, r1
 800c388:	2000      	movs	r0, #0
 800c38a:	494e      	ldr	r1, [pc, #312]	; (800c4c4 <_dtoa_r+0x60c>)
 800c38c:	f7f4 fa66 	bl	800085c <__aeabi_ddiv>
 800c390:	462a      	mov	r2, r5
 800c392:	4633      	mov	r3, r6
 800c394:	f7f3 ff80 	bl	8000298 <__aeabi_dsub>
 800c398:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c39c:	465d      	mov	r5, fp
 800c39e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3a2:	f7f4 fbe1 	bl	8000b68 <__aeabi_d2iz>
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	f7f4 f8c4 	bl	8000534 <__aeabi_i2d>
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	460b      	mov	r3, r1
 800c3b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3b4:	f7f3 ff70 	bl	8000298 <__aeabi_dsub>
 800c3b8:	3630      	adds	r6, #48	; 0x30
 800c3ba:	f805 6b01 	strb.w	r6, [r5], #1
 800c3be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c3c2:	e9cd 0100 	strd	r0, r1, [sp]
 800c3c6:	f7f4 fb91 	bl	8000aec <__aeabi_dcmplt>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	d163      	bne.n	800c496 <_dtoa_r+0x5de>
 800c3ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3d2:	2000      	movs	r0, #0
 800c3d4:	4937      	ldr	r1, [pc, #220]	; (800c4b4 <_dtoa_r+0x5fc>)
 800c3d6:	f7f3 ff5f 	bl	8000298 <__aeabi_dsub>
 800c3da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c3de:	f7f4 fb85 	bl	8000aec <__aeabi_dcmplt>
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	f040 80b7 	bne.w	800c556 <_dtoa_r+0x69e>
 800c3e8:	eba5 030b 	sub.w	r3, r5, fp
 800c3ec:	429f      	cmp	r7, r3
 800c3ee:	f77f af7c 	ble.w	800c2ea <_dtoa_r+0x432>
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	4b30      	ldr	r3, [pc, #192]	; (800c4b8 <_dtoa_r+0x600>)
 800c3f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c3fa:	f7f4 f905 	bl	8000608 <__aeabi_dmul>
 800c3fe:	2200      	movs	r2, #0
 800c400:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c404:	4b2c      	ldr	r3, [pc, #176]	; (800c4b8 <_dtoa_r+0x600>)
 800c406:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c40a:	f7f4 f8fd 	bl	8000608 <__aeabi_dmul>
 800c40e:	e9cd 0100 	strd	r0, r1, [sp]
 800c412:	e7c4      	b.n	800c39e <_dtoa_r+0x4e6>
 800c414:	462a      	mov	r2, r5
 800c416:	4633      	mov	r3, r6
 800c418:	f7f4 f8f6 	bl	8000608 <__aeabi_dmul>
 800c41c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c420:	eb0b 0507 	add.w	r5, fp, r7
 800c424:	465e      	mov	r6, fp
 800c426:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c42a:	f7f4 fb9d 	bl	8000b68 <__aeabi_d2iz>
 800c42e:	4607      	mov	r7, r0
 800c430:	f7f4 f880 	bl	8000534 <__aeabi_i2d>
 800c434:	3730      	adds	r7, #48	; 0x30
 800c436:	4602      	mov	r2, r0
 800c438:	460b      	mov	r3, r1
 800c43a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c43e:	f7f3 ff2b 	bl	8000298 <__aeabi_dsub>
 800c442:	f806 7b01 	strb.w	r7, [r6], #1
 800c446:	42ae      	cmp	r6, r5
 800c448:	e9cd 0100 	strd	r0, r1, [sp]
 800c44c:	f04f 0200 	mov.w	r2, #0
 800c450:	d126      	bne.n	800c4a0 <_dtoa_r+0x5e8>
 800c452:	4b1c      	ldr	r3, [pc, #112]	; (800c4c4 <_dtoa_r+0x60c>)
 800c454:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c458:	f7f3 ff20 	bl	800029c <__adddf3>
 800c45c:	4602      	mov	r2, r0
 800c45e:	460b      	mov	r3, r1
 800c460:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c464:	f7f4 fb60 	bl	8000b28 <__aeabi_dcmpgt>
 800c468:	2800      	cmp	r0, #0
 800c46a:	d174      	bne.n	800c556 <_dtoa_r+0x69e>
 800c46c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c470:	2000      	movs	r0, #0
 800c472:	4914      	ldr	r1, [pc, #80]	; (800c4c4 <_dtoa_r+0x60c>)
 800c474:	f7f3 ff10 	bl	8000298 <__aeabi_dsub>
 800c478:	4602      	mov	r2, r0
 800c47a:	460b      	mov	r3, r1
 800c47c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c480:	f7f4 fb34 	bl	8000aec <__aeabi_dcmplt>
 800c484:	2800      	cmp	r0, #0
 800c486:	f43f af30 	beq.w	800c2ea <_dtoa_r+0x432>
 800c48a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c48e:	2b30      	cmp	r3, #48	; 0x30
 800c490:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c494:	d002      	beq.n	800c49c <_dtoa_r+0x5e4>
 800c496:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c49a:	e04a      	b.n	800c532 <_dtoa_r+0x67a>
 800c49c:	4615      	mov	r5, r2
 800c49e:	e7f4      	b.n	800c48a <_dtoa_r+0x5d2>
 800c4a0:	4b05      	ldr	r3, [pc, #20]	; (800c4b8 <_dtoa_r+0x600>)
 800c4a2:	f7f4 f8b1 	bl	8000608 <__aeabi_dmul>
 800c4a6:	e9cd 0100 	strd	r0, r1, [sp]
 800c4aa:	e7bc      	b.n	800c426 <_dtoa_r+0x56e>
 800c4ac:	0800ecf8 	.word	0x0800ecf8
 800c4b0:	0800ecd0 	.word	0x0800ecd0
 800c4b4:	3ff00000 	.word	0x3ff00000
 800c4b8:	40240000 	.word	0x40240000
 800c4bc:	401c0000 	.word	0x401c0000
 800c4c0:	40140000 	.word	0x40140000
 800c4c4:	3fe00000 	.word	0x3fe00000
 800c4c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c4cc:	465d      	mov	r5, fp
 800c4ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	4639      	mov	r1, r7
 800c4d6:	f7f4 f9c1 	bl	800085c <__aeabi_ddiv>
 800c4da:	f7f4 fb45 	bl	8000b68 <__aeabi_d2iz>
 800c4de:	4680      	mov	r8, r0
 800c4e0:	f7f4 f828 	bl	8000534 <__aeabi_i2d>
 800c4e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4e8:	f7f4 f88e 	bl	8000608 <__aeabi_dmul>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	4639      	mov	r1, r7
 800c4f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c4f8:	f7f3 fece 	bl	8000298 <__aeabi_dsub>
 800c4fc:	f805 6b01 	strb.w	r6, [r5], #1
 800c500:	eba5 060b 	sub.w	r6, r5, fp
 800c504:	45b1      	cmp	r9, r6
 800c506:	4602      	mov	r2, r0
 800c508:	460b      	mov	r3, r1
 800c50a:	d139      	bne.n	800c580 <_dtoa_r+0x6c8>
 800c50c:	f7f3 fec6 	bl	800029c <__adddf3>
 800c510:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c514:	4606      	mov	r6, r0
 800c516:	460f      	mov	r7, r1
 800c518:	f7f4 fb06 	bl	8000b28 <__aeabi_dcmpgt>
 800c51c:	b9c8      	cbnz	r0, 800c552 <_dtoa_r+0x69a>
 800c51e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c522:	4630      	mov	r0, r6
 800c524:	4639      	mov	r1, r7
 800c526:	f7f4 fad7 	bl	8000ad8 <__aeabi_dcmpeq>
 800c52a:	b110      	cbz	r0, 800c532 <_dtoa_r+0x67a>
 800c52c:	f018 0f01 	tst.w	r8, #1
 800c530:	d10f      	bne.n	800c552 <_dtoa_r+0x69a>
 800c532:	9904      	ldr	r1, [sp, #16]
 800c534:	4620      	mov	r0, r4
 800c536:	f000 ffc7 	bl	800d4c8 <_Bfree>
 800c53a:	2300      	movs	r3, #0
 800c53c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c53e:	702b      	strb	r3, [r5, #0]
 800c540:	f10a 0301 	add.w	r3, sl, #1
 800c544:	6013      	str	r3, [r2, #0]
 800c546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c548:	2b00      	cmp	r3, #0
 800c54a:	f000 8241 	beq.w	800c9d0 <_dtoa_r+0xb18>
 800c54e:	601d      	str	r5, [r3, #0]
 800c550:	e23e      	b.n	800c9d0 <_dtoa_r+0xb18>
 800c552:	f8cd a020 	str.w	sl, [sp, #32]
 800c556:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c55a:	2a39      	cmp	r2, #57	; 0x39
 800c55c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800c560:	d108      	bne.n	800c574 <_dtoa_r+0x6bc>
 800c562:	459b      	cmp	fp, r3
 800c564:	d10a      	bne.n	800c57c <_dtoa_r+0x6c4>
 800c566:	9b08      	ldr	r3, [sp, #32]
 800c568:	3301      	adds	r3, #1
 800c56a:	9308      	str	r3, [sp, #32]
 800c56c:	2330      	movs	r3, #48	; 0x30
 800c56e:	f88b 3000 	strb.w	r3, [fp]
 800c572:	465b      	mov	r3, fp
 800c574:	781a      	ldrb	r2, [r3, #0]
 800c576:	3201      	adds	r2, #1
 800c578:	701a      	strb	r2, [r3, #0]
 800c57a:	e78c      	b.n	800c496 <_dtoa_r+0x5de>
 800c57c:	461d      	mov	r5, r3
 800c57e:	e7ea      	b.n	800c556 <_dtoa_r+0x69e>
 800c580:	2200      	movs	r2, #0
 800c582:	4b9b      	ldr	r3, [pc, #620]	; (800c7f0 <_dtoa_r+0x938>)
 800c584:	f7f4 f840 	bl	8000608 <__aeabi_dmul>
 800c588:	2200      	movs	r2, #0
 800c58a:	2300      	movs	r3, #0
 800c58c:	4606      	mov	r6, r0
 800c58e:	460f      	mov	r7, r1
 800c590:	f7f4 faa2 	bl	8000ad8 <__aeabi_dcmpeq>
 800c594:	2800      	cmp	r0, #0
 800c596:	d09a      	beq.n	800c4ce <_dtoa_r+0x616>
 800c598:	e7cb      	b.n	800c532 <_dtoa_r+0x67a>
 800c59a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c59c:	2a00      	cmp	r2, #0
 800c59e:	f000 808b 	beq.w	800c6b8 <_dtoa_r+0x800>
 800c5a2:	9a06      	ldr	r2, [sp, #24]
 800c5a4:	2a01      	cmp	r2, #1
 800c5a6:	dc6e      	bgt.n	800c686 <_dtoa_r+0x7ce>
 800c5a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c5aa:	2a00      	cmp	r2, #0
 800c5ac:	d067      	beq.n	800c67e <_dtoa_r+0x7c6>
 800c5ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c5b2:	9f07      	ldr	r7, [sp, #28]
 800c5b4:	9d05      	ldr	r5, [sp, #20]
 800c5b6:	9a05      	ldr	r2, [sp, #20]
 800c5b8:	2101      	movs	r1, #1
 800c5ba:	441a      	add	r2, r3
 800c5bc:	4620      	mov	r0, r4
 800c5be:	9205      	str	r2, [sp, #20]
 800c5c0:	4498      	add	r8, r3
 800c5c2:	f001 f85f 	bl	800d684 <__i2b>
 800c5c6:	4606      	mov	r6, r0
 800c5c8:	2d00      	cmp	r5, #0
 800c5ca:	dd0c      	ble.n	800c5e6 <_dtoa_r+0x72e>
 800c5cc:	f1b8 0f00 	cmp.w	r8, #0
 800c5d0:	dd09      	ble.n	800c5e6 <_dtoa_r+0x72e>
 800c5d2:	4545      	cmp	r5, r8
 800c5d4:	9a05      	ldr	r2, [sp, #20]
 800c5d6:	462b      	mov	r3, r5
 800c5d8:	bfa8      	it	ge
 800c5da:	4643      	movge	r3, r8
 800c5dc:	1ad2      	subs	r2, r2, r3
 800c5de:	9205      	str	r2, [sp, #20]
 800c5e0:	1aed      	subs	r5, r5, r3
 800c5e2:	eba8 0803 	sub.w	r8, r8, r3
 800c5e6:	9b07      	ldr	r3, [sp, #28]
 800c5e8:	b1eb      	cbz	r3, 800c626 <_dtoa_r+0x76e>
 800c5ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d067      	beq.n	800c6c0 <_dtoa_r+0x808>
 800c5f0:	b18f      	cbz	r7, 800c616 <_dtoa_r+0x75e>
 800c5f2:	4631      	mov	r1, r6
 800c5f4:	463a      	mov	r2, r7
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f001 f8e4 	bl	800d7c4 <__pow5mult>
 800c5fc:	9a04      	ldr	r2, [sp, #16]
 800c5fe:	4601      	mov	r1, r0
 800c600:	4606      	mov	r6, r0
 800c602:	4620      	mov	r0, r4
 800c604:	f001 f847 	bl	800d696 <__multiply>
 800c608:	9904      	ldr	r1, [sp, #16]
 800c60a:	9008      	str	r0, [sp, #32]
 800c60c:	4620      	mov	r0, r4
 800c60e:	f000 ff5b 	bl	800d4c8 <_Bfree>
 800c612:	9b08      	ldr	r3, [sp, #32]
 800c614:	9304      	str	r3, [sp, #16]
 800c616:	9b07      	ldr	r3, [sp, #28]
 800c618:	1bda      	subs	r2, r3, r7
 800c61a:	d004      	beq.n	800c626 <_dtoa_r+0x76e>
 800c61c:	9904      	ldr	r1, [sp, #16]
 800c61e:	4620      	mov	r0, r4
 800c620:	f001 f8d0 	bl	800d7c4 <__pow5mult>
 800c624:	9004      	str	r0, [sp, #16]
 800c626:	2101      	movs	r1, #1
 800c628:	4620      	mov	r0, r4
 800c62a:	f001 f82b 	bl	800d684 <__i2b>
 800c62e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c630:	4607      	mov	r7, r0
 800c632:	2b00      	cmp	r3, #0
 800c634:	f000 81d0 	beq.w	800c9d8 <_dtoa_r+0xb20>
 800c638:	461a      	mov	r2, r3
 800c63a:	4601      	mov	r1, r0
 800c63c:	4620      	mov	r0, r4
 800c63e:	f001 f8c1 	bl	800d7c4 <__pow5mult>
 800c642:	9b06      	ldr	r3, [sp, #24]
 800c644:	2b01      	cmp	r3, #1
 800c646:	4607      	mov	r7, r0
 800c648:	dc40      	bgt.n	800c6cc <_dtoa_r+0x814>
 800c64a:	9b00      	ldr	r3, [sp, #0]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d139      	bne.n	800c6c4 <_dtoa_r+0x80c>
 800c650:	9b01      	ldr	r3, [sp, #4]
 800c652:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c656:	2b00      	cmp	r3, #0
 800c658:	d136      	bne.n	800c6c8 <_dtoa_r+0x810>
 800c65a:	9b01      	ldr	r3, [sp, #4]
 800c65c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c660:	0d1b      	lsrs	r3, r3, #20
 800c662:	051b      	lsls	r3, r3, #20
 800c664:	b12b      	cbz	r3, 800c672 <_dtoa_r+0x7ba>
 800c666:	9b05      	ldr	r3, [sp, #20]
 800c668:	3301      	adds	r3, #1
 800c66a:	9305      	str	r3, [sp, #20]
 800c66c:	f108 0801 	add.w	r8, r8, #1
 800c670:	2301      	movs	r3, #1
 800c672:	9307      	str	r3, [sp, #28]
 800c674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c676:	2b00      	cmp	r3, #0
 800c678:	d12a      	bne.n	800c6d0 <_dtoa_r+0x818>
 800c67a:	2001      	movs	r0, #1
 800c67c:	e030      	b.n	800c6e0 <_dtoa_r+0x828>
 800c67e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c680:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c684:	e795      	b.n	800c5b2 <_dtoa_r+0x6fa>
 800c686:	9b07      	ldr	r3, [sp, #28]
 800c688:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800c68c:	42bb      	cmp	r3, r7
 800c68e:	bfbf      	itttt	lt
 800c690:	9b07      	ldrlt	r3, [sp, #28]
 800c692:	9707      	strlt	r7, [sp, #28]
 800c694:	1afa      	sublt	r2, r7, r3
 800c696:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c698:	bfbb      	ittet	lt
 800c69a:	189b      	addlt	r3, r3, r2
 800c69c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c69e:	1bdf      	subge	r7, r3, r7
 800c6a0:	2700      	movlt	r7, #0
 800c6a2:	f1b9 0f00 	cmp.w	r9, #0
 800c6a6:	bfb5      	itete	lt
 800c6a8:	9b05      	ldrlt	r3, [sp, #20]
 800c6aa:	9d05      	ldrge	r5, [sp, #20]
 800c6ac:	eba3 0509 	sublt.w	r5, r3, r9
 800c6b0:	464b      	movge	r3, r9
 800c6b2:	bfb8      	it	lt
 800c6b4:	2300      	movlt	r3, #0
 800c6b6:	e77e      	b.n	800c5b6 <_dtoa_r+0x6fe>
 800c6b8:	9f07      	ldr	r7, [sp, #28]
 800c6ba:	9d05      	ldr	r5, [sp, #20]
 800c6bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c6be:	e783      	b.n	800c5c8 <_dtoa_r+0x710>
 800c6c0:	9a07      	ldr	r2, [sp, #28]
 800c6c2:	e7ab      	b.n	800c61c <_dtoa_r+0x764>
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	e7d4      	b.n	800c672 <_dtoa_r+0x7ba>
 800c6c8:	9b00      	ldr	r3, [sp, #0]
 800c6ca:	e7d2      	b.n	800c672 <_dtoa_r+0x7ba>
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	9307      	str	r3, [sp, #28]
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c6d6:	6918      	ldr	r0, [r3, #16]
 800c6d8:	f000 ff86 	bl	800d5e8 <__hi0bits>
 800c6dc:	f1c0 0020 	rsb	r0, r0, #32
 800c6e0:	4440      	add	r0, r8
 800c6e2:	f010 001f 	ands.w	r0, r0, #31
 800c6e6:	d047      	beq.n	800c778 <_dtoa_r+0x8c0>
 800c6e8:	f1c0 0320 	rsb	r3, r0, #32
 800c6ec:	2b04      	cmp	r3, #4
 800c6ee:	dd3b      	ble.n	800c768 <_dtoa_r+0x8b0>
 800c6f0:	9b05      	ldr	r3, [sp, #20]
 800c6f2:	f1c0 001c 	rsb	r0, r0, #28
 800c6f6:	4403      	add	r3, r0
 800c6f8:	9305      	str	r3, [sp, #20]
 800c6fa:	4405      	add	r5, r0
 800c6fc:	4480      	add	r8, r0
 800c6fe:	9b05      	ldr	r3, [sp, #20]
 800c700:	2b00      	cmp	r3, #0
 800c702:	dd05      	ble.n	800c710 <_dtoa_r+0x858>
 800c704:	461a      	mov	r2, r3
 800c706:	9904      	ldr	r1, [sp, #16]
 800c708:	4620      	mov	r0, r4
 800c70a:	f001 f8a9 	bl	800d860 <__lshift>
 800c70e:	9004      	str	r0, [sp, #16]
 800c710:	f1b8 0f00 	cmp.w	r8, #0
 800c714:	dd05      	ble.n	800c722 <_dtoa_r+0x86a>
 800c716:	4639      	mov	r1, r7
 800c718:	4642      	mov	r2, r8
 800c71a:	4620      	mov	r0, r4
 800c71c:	f001 f8a0 	bl	800d860 <__lshift>
 800c720:	4607      	mov	r7, r0
 800c722:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c724:	b353      	cbz	r3, 800c77c <_dtoa_r+0x8c4>
 800c726:	4639      	mov	r1, r7
 800c728:	9804      	ldr	r0, [sp, #16]
 800c72a:	f001 f8ed 	bl	800d908 <__mcmp>
 800c72e:	2800      	cmp	r0, #0
 800c730:	da24      	bge.n	800c77c <_dtoa_r+0x8c4>
 800c732:	2300      	movs	r3, #0
 800c734:	220a      	movs	r2, #10
 800c736:	9904      	ldr	r1, [sp, #16]
 800c738:	4620      	mov	r0, r4
 800c73a:	f000 fedc 	bl	800d4f6 <__multadd>
 800c73e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c740:	9004      	str	r0, [sp, #16]
 800c742:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c746:	2b00      	cmp	r3, #0
 800c748:	f000 814d 	beq.w	800c9e6 <_dtoa_r+0xb2e>
 800c74c:	2300      	movs	r3, #0
 800c74e:	4631      	mov	r1, r6
 800c750:	220a      	movs	r2, #10
 800c752:	4620      	mov	r0, r4
 800c754:	f000 fecf 	bl	800d4f6 <__multadd>
 800c758:	9b02      	ldr	r3, [sp, #8]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	4606      	mov	r6, r0
 800c75e:	dc4f      	bgt.n	800c800 <_dtoa_r+0x948>
 800c760:	9b06      	ldr	r3, [sp, #24]
 800c762:	2b02      	cmp	r3, #2
 800c764:	dd4c      	ble.n	800c800 <_dtoa_r+0x948>
 800c766:	e011      	b.n	800c78c <_dtoa_r+0x8d4>
 800c768:	d0c9      	beq.n	800c6fe <_dtoa_r+0x846>
 800c76a:	9a05      	ldr	r2, [sp, #20]
 800c76c:	331c      	adds	r3, #28
 800c76e:	441a      	add	r2, r3
 800c770:	9205      	str	r2, [sp, #20]
 800c772:	441d      	add	r5, r3
 800c774:	4498      	add	r8, r3
 800c776:	e7c2      	b.n	800c6fe <_dtoa_r+0x846>
 800c778:	4603      	mov	r3, r0
 800c77a:	e7f6      	b.n	800c76a <_dtoa_r+0x8b2>
 800c77c:	f1b9 0f00 	cmp.w	r9, #0
 800c780:	dc38      	bgt.n	800c7f4 <_dtoa_r+0x93c>
 800c782:	9b06      	ldr	r3, [sp, #24]
 800c784:	2b02      	cmp	r3, #2
 800c786:	dd35      	ble.n	800c7f4 <_dtoa_r+0x93c>
 800c788:	f8cd 9008 	str.w	r9, [sp, #8]
 800c78c:	9b02      	ldr	r3, [sp, #8]
 800c78e:	b963      	cbnz	r3, 800c7aa <_dtoa_r+0x8f2>
 800c790:	4639      	mov	r1, r7
 800c792:	2205      	movs	r2, #5
 800c794:	4620      	mov	r0, r4
 800c796:	f000 feae 	bl	800d4f6 <__multadd>
 800c79a:	4601      	mov	r1, r0
 800c79c:	4607      	mov	r7, r0
 800c79e:	9804      	ldr	r0, [sp, #16]
 800c7a0:	f001 f8b2 	bl	800d908 <__mcmp>
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	f73f adcc 	bgt.w	800c342 <_dtoa_r+0x48a>
 800c7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7ac:	465d      	mov	r5, fp
 800c7ae:	ea6f 0a03 	mvn.w	sl, r3
 800c7b2:	f04f 0900 	mov.w	r9, #0
 800c7b6:	4639      	mov	r1, r7
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	f000 fe85 	bl	800d4c8 <_Bfree>
 800c7be:	2e00      	cmp	r6, #0
 800c7c0:	f43f aeb7 	beq.w	800c532 <_dtoa_r+0x67a>
 800c7c4:	f1b9 0f00 	cmp.w	r9, #0
 800c7c8:	d005      	beq.n	800c7d6 <_dtoa_r+0x91e>
 800c7ca:	45b1      	cmp	r9, r6
 800c7cc:	d003      	beq.n	800c7d6 <_dtoa_r+0x91e>
 800c7ce:	4649      	mov	r1, r9
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	f000 fe79 	bl	800d4c8 <_Bfree>
 800c7d6:	4631      	mov	r1, r6
 800c7d8:	4620      	mov	r0, r4
 800c7da:	f000 fe75 	bl	800d4c8 <_Bfree>
 800c7de:	e6a8      	b.n	800c532 <_dtoa_r+0x67a>
 800c7e0:	2700      	movs	r7, #0
 800c7e2:	463e      	mov	r6, r7
 800c7e4:	e7e1      	b.n	800c7aa <_dtoa_r+0x8f2>
 800c7e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c7ea:	463e      	mov	r6, r7
 800c7ec:	e5a9      	b.n	800c342 <_dtoa_r+0x48a>
 800c7ee:	bf00      	nop
 800c7f0:	40240000 	.word	0x40240000
 800c7f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7f6:	f8cd 9008 	str.w	r9, [sp, #8]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f000 80fa 	beq.w	800c9f4 <_dtoa_r+0xb3c>
 800c800:	2d00      	cmp	r5, #0
 800c802:	dd05      	ble.n	800c810 <_dtoa_r+0x958>
 800c804:	4631      	mov	r1, r6
 800c806:	462a      	mov	r2, r5
 800c808:	4620      	mov	r0, r4
 800c80a:	f001 f829 	bl	800d860 <__lshift>
 800c80e:	4606      	mov	r6, r0
 800c810:	9b07      	ldr	r3, [sp, #28]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d04c      	beq.n	800c8b0 <_dtoa_r+0x9f8>
 800c816:	6871      	ldr	r1, [r6, #4]
 800c818:	4620      	mov	r0, r4
 800c81a:	f000 fe21 	bl	800d460 <_Balloc>
 800c81e:	6932      	ldr	r2, [r6, #16]
 800c820:	3202      	adds	r2, #2
 800c822:	4605      	mov	r5, r0
 800c824:	0092      	lsls	r2, r2, #2
 800c826:	f106 010c 	add.w	r1, r6, #12
 800c82a:	300c      	adds	r0, #12
 800c82c:	f7fd fc49 	bl	800a0c2 <memcpy>
 800c830:	2201      	movs	r2, #1
 800c832:	4629      	mov	r1, r5
 800c834:	4620      	mov	r0, r4
 800c836:	f001 f813 	bl	800d860 <__lshift>
 800c83a:	9b00      	ldr	r3, [sp, #0]
 800c83c:	f8cd b014 	str.w	fp, [sp, #20]
 800c840:	f003 0301 	and.w	r3, r3, #1
 800c844:	46b1      	mov	r9, r6
 800c846:	9307      	str	r3, [sp, #28]
 800c848:	4606      	mov	r6, r0
 800c84a:	4639      	mov	r1, r7
 800c84c:	9804      	ldr	r0, [sp, #16]
 800c84e:	f7ff faa7 	bl	800bda0 <quorem>
 800c852:	4649      	mov	r1, r9
 800c854:	4605      	mov	r5, r0
 800c856:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c85a:	9804      	ldr	r0, [sp, #16]
 800c85c:	f001 f854 	bl	800d908 <__mcmp>
 800c860:	4632      	mov	r2, r6
 800c862:	9000      	str	r0, [sp, #0]
 800c864:	4639      	mov	r1, r7
 800c866:	4620      	mov	r0, r4
 800c868:	f001 f868 	bl	800d93c <__mdiff>
 800c86c:	68c3      	ldr	r3, [r0, #12]
 800c86e:	4602      	mov	r2, r0
 800c870:	bb03      	cbnz	r3, 800c8b4 <_dtoa_r+0x9fc>
 800c872:	4601      	mov	r1, r0
 800c874:	9008      	str	r0, [sp, #32]
 800c876:	9804      	ldr	r0, [sp, #16]
 800c878:	f001 f846 	bl	800d908 <__mcmp>
 800c87c:	9a08      	ldr	r2, [sp, #32]
 800c87e:	4603      	mov	r3, r0
 800c880:	4611      	mov	r1, r2
 800c882:	4620      	mov	r0, r4
 800c884:	9308      	str	r3, [sp, #32]
 800c886:	f000 fe1f 	bl	800d4c8 <_Bfree>
 800c88a:	9b08      	ldr	r3, [sp, #32]
 800c88c:	b9a3      	cbnz	r3, 800c8b8 <_dtoa_r+0xa00>
 800c88e:	9a06      	ldr	r2, [sp, #24]
 800c890:	b992      	cbnz	r2, 800c8b8 <_dtoa_r+0xa00>
 800c892:	9a07      	ldr	r2, [sp, #28]
 800c894:	b982      	cbnz	r2, 800c8b8 <_dtoa_r+0xa00>
 800c896:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c89a:	d029      	beq.n	800c8f0 <_dtoa_r+0xa38>
 800c89c:	9b00      	ldr	r3, [sp, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	dd01      	ble.n	800c8a6 <_dtoa_r+0x9ee>
 800c8a2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c8a6:	9b05      	ldr	r3, [sp, #20]
 800c8a8:	1c5d      	adds	r5, r3, #1
 800c8aa:	f883 8000 	strb.w	r8, [r3]
 800c8ae:	e782      	b.n	800c7b6 <_dtoa_r+0x8fe>
 800c8b0:	4630      	mov	r0, r6
 800c8b2:	e7c2      	b.n	800c83a <_dtoa_r+0x982>
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	e7e3      	b.n	800c880 <_dtoa_r+0x9c8>
 800c8b8:	9a00      	ldr	r2, [sp, #0]
 800c8ba:	2a00      	cmp	r2, #0
 800c8bc:	db04      	blt.n	800c8c8 <_dtoa_r+0xa10>
 800c8be:	d125      	bne.n	800c90c <_dtoa_r+0xa54>
 800c8c0:	9a06      	ldr	r2, [sp, #24]
 800c8c2:	bb1a      	cbnz	r2, 800c90c <_dtoa_r+0xa54>
 800c8c4:	9a07      	ldr	r2, [sp, #28]
 800c8c6:	bb0a      	cbnz	r2, 800c90c <_dtoa_r+0xa54>
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	ddec      	ble.n	800c8a6 <_dtoa_r+0x9ee>
 800c8cc:	2201      	movs	r2, #1
 800c8ce:	9904      	ldr	r1, [sp, #16]
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	f000 ffc5 	bl	800d860 <__lshift>
 800c8d6:	4639      	mov	r1, r7
 800c8d8:	9004      	str	r0, [sp, #16]
 800c8da:	f001 f815 	bl	800d908 <__mcmp>
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	dc03      	bgt.n	800c8ea <_dtoa_r+0xa32>
 800c8e2:	d1e0      	bne.n	800c8a6 <_dtoa_r+0x9ee>
 800c8e4:	f018 0f01 	tst.w	r8, #1
 800c8e8:	d0dd      	beq.n	800c8a6 <_dtoa_r+0x9ee>
 800c8ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c8ee:	d1d8      	bne.n	800c8a2 <_dtoa_r+0x9ea>
 800c8f0:	9b05      	ldr	r3, [sp, #20]
 800c8f2:	9a05      	ldr	r2, [sp, #20]
 800c8f4:	1c5d      	adds	r5, r3, #1
 800c8f6:	2339      	movs	r3, #57	; 0x39
 800c8f8:	7013      	strb	r3, [r2, #0]
 800c8fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c8fe:	2b39      	cmp	r3, #57	; 0x39
 800c900:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c904:	d04f      	beq.n	800c9a6 <_dtoa_r+0xaee>
 800c906:	3301      	adds	r3, #1
 800c908:	7013      	strb	r3, [r2, #0]
 800c90a:	e754      	b.n	800c7b6 <_dtoa_r+0x8fe>
 800c90c:	9a05      	ldr	r2, [sp, #20]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	f102 0501 	add.w	r5, r2, #1
 800c914:	dd06      	ble.n	800c924 <_dtoa_r+0xa6c>
 800c916:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c91a:	d0e9      	beq.n	800c8f0 <_dtoa_r+0xa38>
 800c91c:	f108 0801 	add.w	r8, r8, #1
 800c920:	9b05      	ldr	r3, [sp, #20]
 800c922:	e7c2      	b.n	800c8aa <_dtoa_r+0x9f2>
 800c924:	9a02      	ldr	r2, [sp, #8]
 800c926:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c92a:	eba5 030b 	sub.w	r3, r5, fp
 800c92e:	4293      	cmp	r3, r2
 800c930:	d021      	beq.n	800c976 <_dtoa_r+0xabe>
 800c932:	2300      	movs	r3, #0
 800c934:	220a      	movs	r2, #10
 800c936:	9904      	ldr	r1, [sp, #16]
 800c938:	4620      	mov	r0, r4
 800c93a:	f000 fddc 	bl	800d4f6 <__multadd>
 800c93e:	45b1      	cmp	r9, r6
 800c940:	9004      	str	r0, [sp, #16]
 800c942:	f04f 0300 	mov.w	r3, #0
 800c946:	f04f 020a 	mov.w	r2, #10
 800c94a:	4649      	mov	r1, r9
 800c94c:	4620      	mov	r0, r4
 800c94e:	d105      	bne.n	800c95c <_dtoa_r+0xaa4>
 800c950:	f000 fdd1 	bl	800d4f6 <__multadd>
 800c954:	4681      	mov	r9, r0
 800c956:	4606      	mov	r6, r0
 800c958:	9505      	str	r5, [sp, #20]
 800c95a:	e776      	b.n	800c84a <_dtoa_r+0x992>
 800c95c:	f000 fdcb 	bl	800d4f6 <__multadd>
 800c960:	4631      	mov	r1, r6
 800c962:	4681      	mov	r9, r0
 800c964:	2300      	movs	r3, #0
 800c966:	220a      	movs	r2, #10
 800c968:	4620      	mov	r0, r4
 800c96a:	f000 fdc4 	bl	800d4f6 <__multadd>
 800c96e:	4606      	mov	r6, r0
 800c970:	e7f2      	b.n	800c958 <_dtoa_r+0xaa0>
 800c972:	f04f 0900 	mov.w	r9, #0
 800c976:	2201      	movs	r2, #1
 800c978:	9904      	ldr	r1, [sp, #16]
 800c97a:	4620      	mov	r0, r4
 800c97c:	f000 ff70 	bl	800d860 <__lshift>
 800c980:	4639      	mov	r1, r7
 800c982:	9004      	str	r0, [sp, #16]
 800c984:	f000 ffc0 	bl	800d908 <__mcmp>
 800c988:	2800      	cmp	r0, #0
 800c98a:	dcb6      	bgt.n	800c8fa <_dtoa_r+0xa42>
 800c98c:	d102      	bne.n	800c994 <_dtoa_r+0xadc>
 800c98e:	f018 0f01 	tst.w	r8, #1
 800c992:	d1b2      	bne.n	800c8fa <_dtoa_r+0xa42>
 800c994:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c998:	2b30      	cmp	r3, #48	; 0x30
 800c99a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c99e:	f47f af0a 	bne.w	800c7b6 <_dtoa_r+0x8fe>
 800c9a2:	4615      	mov	r5, r2
 800c9a4:	e7f6      	b.n	800c994 <_dtoa_r+0xadc>
 800c9a6:	4593      	cmp	fp, r2
 800c9a8:	d105      	bne.n	800c9b6 <_dtoa_r+0xafe>
 800c9aa:	2331      	movs	r3, #49	; 0x31
 800c9ac:	f10a 0a01 	add.w	sl, sl, #1
 800c9b0:	f88b 3000 	strb.w	r3, [fp]
 800c9b4:	e6ff      	b.n	800c7b6 <_dtoa_r+0x8fe>
 800c9b6:	4615      	mov	r5, r2
 800c9b8:	e79f      	b.n	800c8fa <_dtoa_r+0xa42>
 800c9ba:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ca20 <_dtoa_r+0xb68>
 800c9be:	e007      	b.n	800c9d0 <_dtoa_r+0xb18>
 800c9c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9c2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ca24 <_dtoa_r+0xb6c>
 800c9c6:	b11b      	cbz	r3, 800c9d0 <_dtoa_r+0xb18>
 800c9c8:	f10b 0308 	add.w	r3, fp, #8
 800c9cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c9ce:	6013      	str	r3, [r2, #0]
 800c9d0:	4658      	mov	r0, fp
 800c9d2:	b017      	add	sp, #92	; 0x5c
 800c9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d8:	9b06      	ldr	r3, [sp, #24]
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	f77f ae35 	ble.w	800c64a <_dtoa_r+0x792>
 800c9e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9e2:	9307      	str	r3, [sp, #28]
 800c9e4:	e649      	b.n	800c67a <_dtoa_r+0x7c2>
 800c9e6:	9b02      	ldr	r3, [sp, #8]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	dc03      	bgt.n	800c9f4 <_dtoa_r+0xb3c>
 800c9ec:	9b06      	ldr	r3, [sp, #24]
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	f73f aecc 	bgt.w	800c78c <_dtoa_r+0x8d4>
 800c9f4:	465d      	mov	r5, fp
 800c9f6:	4639      	mov	r1, r7
 800c9f8:	9804      	ldr	r0, [sp, #16]
 800c9fa:	f7ff f9d1 	bl	800bda0 <quorem>
 800c9fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ca02:	f805 8b01 	strb.w	r8, [r5], #1
 800ca06:	9a02      	ldr	r2, [sp, #8]
 800ca08:	eba5 030b 	sub.w	r3, r5, fp
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	ddb0      	ble.n	800c972 <_dtoa_r+0xaba>
 800ca10:	2300      	movs	r3, #0
 800ca12:	220a      	movs	r2, #10
 800ca14:	9904      	ldr	r1, [sp, #16]
 800ca16:	4620      	mov	r0, r4
 800ca18:	f000 fd6d 	bl	800d4f6 <__multadd>
 800ca1c:	9004      	str	r0, [sp, #16]
 800ca1e:	e7ea      	b.n	800c9f6 <_dtoa_r+0xb3e>
 800ca20:	0800eae6 	.word	0x0800eae6
 800ca24:	0800ec61 	.word	0x0800ec61

0800ca28 <__sflush_r>:
 800ca28:	898a      	ldrh	r2, [r1, #12]
 800ca2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca2e:	4605      	mov	r5, r0
 800ca30:	0710      	lsls	r0, r2, #28
 800ca32:	460c      	mov	r4, r1
 800ca34:	d458      	bmi.n	800cae8 <__sflush_r+0xc0>
 800ca36:	684b      	ldr	r3, [r1, #4]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	dc05      	bgt.n	800ca48 <__sflush_r+0x20>
 800ca3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	dc02      	bgt.n	800ca48 <__sflush_r+0x20>
 800ca42:	2000      	movs	r0, #0
 800ca44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca4a:	2e00      	cmp	r6, #0
 800ca4c:	d0f9      	beq.n	800ca42 <__sflush_r+0x1a>
 800ca4e:	2300      	movs	r3, #0
 800ca50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ca54:	682f      	ldr	r7, [r5, #0]
 800ca56:	6a21      	ldr	r1, [r4, #32]
 800ca58:	602b      	str	r3, [r5, #0]
 800ca5a:	d032      	beq.n	800cac2 <__sflush_r+0x9a>
 800ca5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ca5e:	89a3      	ldrh	r3, [r4, #12]
 800ca60:	075a      	lsls	r2, r3, #29
 800ca62:	d505      	bpl.n	800ca70 <__sflush_r+0x48>
 800ca64:	6863      	ldr	r3, [r4, #4]
 800ca66:	1ac0      	subs	r0, r0, r3
 800ca68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca6a:	b10b      	cbz	r3, 800ca70 <__sflush_r+0x48>
 800ca6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca6e:	1ac0      	subs	r0, r0, r3
 800ca70:	2300      	movs	r3, #0
 800ca72:	4602      	mov	r2, r0
 800ca74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca76:	6a21      	ldr	r1, [r4, #32]
 800ca78:	4628      	mov	r0, r5
 800ca7a:	47b0      	blx	r6
 800ca7c:	1c43      	adds	r3, r0, #1
 800ca7e:	89a3      	ldrh	r3, [r4, #12]
 800ca80:	d106      	bne.n	800ca90 <__sflush_r+0x68>
 800ca82:	6829      	ldr	r1, [r5, #0]
 800ca84:	291d      	cmp	r1, #29
 800ca86:	d848      	bhi.n	800cb1a <__sflush_r+0xf2>
 800ca88:	4a29      	ldr	r2, [pc, #164]	; (800cb30 <__sflush_r+0x108>)
 800ca8a:	40ca      	lsrs	r2, r1
 800ca8c:	07d6      	lsls	r6, r2, #31
 800ca8e:	d544      	bpl.n	800cb1a <__sflush_r+0xf2>
 800ca90:	2200      	movs	r2, #0
 800ca92:	6062      	str	r2, [r4, #4]
 800ca94:	04d9      	lsls	r1, r3, #19
 800ca96:	6922      	ldr	r2, [r4, #16]
 800ca98:	6022      	str	r2, [r4, #0]
 800ca9a:	d504      	bpl.n	800caa6 <__sflush_r+0x7e>
 800ca9c:	1c42      	adds	r2, r0, #1
 800ca9e:	d101      	bne.n	800caa4 <__sflush_r+0x7c>
 800caa0:	682b      	ldr	r3, [r5, #0]
 800caa2:	b903      	cbnz	r3, 800caa6 <__sflush_r+0x7e>
 800caa4:	6560      	str	r0, [r4, #84]	; 0x54
 800caa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800caa8:	602f      	str	r7, [r5, #0]
 800caaa:	2900      	cmp	r1, #0
 800caac:	d0c9      	beq.n	800ca42 <__sflush_r+0x1a>
 800caae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cab2:	4299      	cmp	r1, r3
 800cab4:	d002      	beq.n	800cabc <__sflush_r+0x94>
 800cab6:	4628      	mov	r0, r5
 800cab8:	f001 f8e0 	bl	800dc7c <_free_r>
 800cabc:	2000      	movs	r0, #0
 800cabe:	6360      	str	r0, [r4, #52]	; 0x34
 800cac0:	e7c0      	b.n	800ca44 <__sflush_r+0x1c>
 800cac2:	2301      	movs	r3, #1
 800cac4:	4628      	mov	r0, r5
 800cac6:	47b0      	blx	r6
 800cac8:	1c41      	adds	r1, r0, #1
 800caca:	d1c8      	bne.n	800ca5e <__sflush_r+0x36>
 800cacc:	682b      	ldr	r3, [r5, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d0c5      	beq.n	800ca5e <__sflush_r+0x36>
 800cad2:	2b1d      	cmp	r3, #29
 800cad4:	d001      	beq.n	800cada <__sflush_r+0xb2>
 800cad6:	2b16      	cmp	r3, #22
 800cad8:	d101      	bne.n	800cade <__sflush_r+0xb6>
 800cada:	602f      	str	r7, [r5, #0]
 800cadc:	e7b1      	b.n	800ca42 <__sflush_r+0x1a>
 800cade:	89a3      	ldrh	r3, [r4, #12]
 800cae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cae4:	81a3      	strh	r3, [r4, #12]
 800cae6:	e7ad      	b.n	800ca44 <__sflush_r+0x1c>
 800cae8:	690f      	ldr	r7, [r1, #16]
 800caea:	2f00      	cmp	r7, #0
 800caec:	d0a9      	beq.n	800ca42 <__sflush_r+0x1a>
 800caee:	0793      	lsls	r3, r2, #30
 800caf0:	680e      	ldr	r6, [r1, #0]
 800caf2:	bf08      	it	eq
 800caf4:	694b      	ldreq	r3, [r1, #20]
 800caf6:	600f      	str	r7, [r1, #0]
 800caf8:	bf18      	it	ne
 800cafa:	2300      	movne	r3, #0
 800cafc:	eba6 0807 	sub.w	r8, r6, r7
 800cb00:	608b      	str	r3, [r1, #8]
 800cb02:	f1b8 0f00 	cmp.w	r8, #0
 800cb06:	dd9c      	ble.n	800ca42 <__sflush_r+0x1a>
 800cb08:	4643      	mov	r3, r8
 800cb0a:	463a      	mov	r2, r7
 800cb0c:	6a21      	ldr	r1, [r4, #32]
 800cb0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb10:	4628      	mov	r0, r5
 800cb12:	47b0      	blx	r6
 800cb14:	2800      	cmp	r0, #0
 800cb16:	dc06      	bgt.n	800cb26 <__sflush_r+0xfe>
 800cb18:	89a3      	ldrh	r3, [r4, #12]
 800cb1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb1e:	81a3      	strh	r3, [r4, #12]
 800cb20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb24:	e78e      	b.n	800ca44 <__sflush_r+0x1c>
 800cb26:	4407      	add	r7, r0
 800cb28:	eba8 0800 	sub.w	r8, r8, r0
 800cb2c:	e7e9      	b.n	800cb02 <__sflush_r+0xda>
 800cb2e:	bf00      	nop
 800cb30:	20400001 	.word	0x20400001

0800cb34 <_fflush_r>:
 800cb34:	b538      	push	{r3, r4, r5, lr}
 800cb36:	690b      	ldr	r3, [r1, #16]
 800cb38:	4605      	mov	r5, r0
 800cb3a:	460c      	mov	r4, r1
 800cb3c:	b1db      	cbz	r3, 800cb76 <_fflush_r+0x42>
 800cb3e:	b118      	cbz	r0, 800cb48 <_fflush_r+0x14>
 800cb40:	6983      	ldr	r3, [r0, #24]
 800cb42:	b90b      	cbnz	r3, 800cb48 <_fflush_r+0x14>
 800cb44:	f000 f860 	bl	800cc08 <__sinit>
 800cb48:	4b0c      	ldr	r3, [pc, #48]	; (800cb7c <_fflush_r+0x48>)
 800cb4a:	429c      	cmp	r4, r3
 800cb4c:	d109      	bne.n	800cb62 <_fflush_r+0x2e>
 800cb4e:	686c      	ldr	r4, [r5, #4]
 800cb50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb54:	b17b      	cbz	r3, 800cb76 <_fflush_r+0x42>
 800cb56:	4621      	mov	r1, r4
 800cb58:	4628      	mov	r0, r5
 800cb5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb5e:	f7ff bf63 	b.w	800ca28 <__sflush_r>
 800cb62:	4b07      	ldr	r3, [pc, #28]	; (800cb80 <_fflush_r+0x4c>)
 800cb64:	429c      	cmp	r4, r3
 800cb66:	d101      	bne.n	800cb6c <_fflush_r+0x38>
 800cb68:	68ac      	ldr	r4, [r5, #8]
 800cb6a:	e7f1      	b.n	800cb50 <_fflush_r+0x1c>
 800cb6c:	4b05      	ldr	r3, [pc, #20]	; (800cb84 <_fflush_r+0x50>)
 800cb6e:	429c      	cmp	r4, r3
 800cb70:	bf08      	it	eq
 800cb72:	68ec      	ldreq	r4, [r5, #12]
 800cb74:	e7ec      	b.n	800cb50 <_fflush_r+0x1c>
 800cb76:	2000      	movs	r0, #0
 800cb78:	bd38      	pop	{r3, r4, r5, pc}
 800cb7a:	bf00      	nop
 800cb7c:	0800ec90 	.word	0x0800ec90
 800cb80:	0800ecb0 	.word	0x0800ecb0
 800cb84:	0800ec70 	.word	0x0800ec70

0800cb88 <std>:
 800cb88:	2300      	movs	r3, #0
 800cb8a:	b510      	push	{r4, lr}
 800cb8c:	4604      	mov	r4, r0
 800cb8e:	e9c0 3300 	strd	r3, r3, [r0]
 800cb92:	6083      	str	r3, [r0, #8]
 800cb94:	8181      	strh	r1, [r0, #12]
 800cb96:	6643      	str	r3, [r0, #100]	; 0x64
 800cb98:	81c2      	strh	r2, [r0, #14]
 800cb9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb9e:	6183      	str	r3, [r0, #24]
 800cba0:	4619      	mov	r1, r3
 800cba2:	2208      	movs	r2, #8
 800cba4:	305c      	adds	r0, #92	; 0x5c
 800cba6:	f7fd fa97 	bl	800a0d8 <memset>
 800cbaa:	4b05      	ldr	r3, [pc, #20]	; (800cbc0 <std+0x38>)
 800cbac:	6263      	str	r3, [r4, #36]	; 0x24
 800cbae:	4b05      	ldr	r3, [pc, #20]	; (800cbc4 <std+0x3c>)
 800cbb0:	62a3      	str	r3, [r4, #40]	; 0x28
 800cbb2:	4b05      	ldr	r3, [pc, #20]	; (800cbc8 <std+0x40>)
 800cbb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cbb6:	4b05      	ldr	r3, [pc, #20]	; (800cbcc <std+0x44>)
 800cbb8:	6224      	str	r4, [r4, #32]
 800cbba:	6323      	str	r3, [r4, #48]	; 0x30
 800cbbc:	bd10      	pop	{r4, pc}
 800cbbe:	bf00      	nop
 800cbc0:	0800e311 	.word	0x0800e311
 800cbc4:	0800e333 	.word	0x0800e333
 800cbc8:	0800e36b 	.word	0x0800e36b
 800cbcc:	0800e38f 	.word	0x0800e38f

0800cbd0 <_cleanup_r>:
 800cbd0:	4901      	ldr	r1, [pc, #4]	; (800cbd8 <_cleanup_r+0x8>)
 800cbd2:	f000 b885 	b.w	800cce0 <_fwalk_reent>
 800cbd6:	bf00      	nop
 800cbd8:	0800cb35 	.word	0x0800cb35

0800cbdc <__sfmoreglue>:
 800cbdc:	b570      	push	{r4, r5, r6, lr}
 800cbde:	1e4a      	subs	r2, r1, #1
 800cbe0:	2568      	movs	r5, #104	; 0x68
 800cbe2:	4355      	muls	r5, r2
 800cbe4:	460e      	mov	r6, r1
 800cbe6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cbea:	f001 f895 	bl	800dd18 <_malloc_r>
 800cbee:	4604      	mov	r4, r0
 800cbf0:	b140      	cbz	r0, 800cc04 <__sfmoreglue+0x28>
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	e9c0 1600 	strd	r1, r6, [r0]
 800cbf8:	300c      	adds	r0, #12
 800cbfa:	60a0      	str	r0, [r4, #8]
 800cbfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cc00:	f7fd fa6a 	bl	800a0d8 <memset>
 800cc04:	4620      	mov	r0, r4
 800cc06:	bd70      	pop	{r4, r5, r6, pc}

0800cc08 <__sinit>:
 800cc08:	6983      	ldr	r3, [r0, #24]
 800cc0a:	b510      	push	{r4, lr}
 800cc0c:	4604      	mov	r4, r0
 800cc0e:	bb33      	cbnz	r3, 800cc5e <__sinit+0x56>
 800cc10:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cc14:	6503      	str	r3, [r0, #80]	; 0x50
 800cc16:	4b12      	ldr	r3, [pc, #72]	; (800cc60 <__sinit+0x58>)
 800cc18:	4a12      	ldr	r2, [pc, #72]	; (800cc64 <__sinit+0x5c>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	6282      	str	r2, [r0, #40]	; 0x28
 800cc1e:	4298      	cmp	r0, r3
 800cc20:	bf04      	itt	eq
 800cc22:	2301      	moveq	r3, #1
 800cc24:	6183      	streq	r3, [r0, #24]
 800cc26:	f000 f81f 	bl	800cc68 <__sfp>
 800cc2a:	6060      	str	r0, [r4, #4]
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	f000 f81b 	bl	800cc68 <__sfp>
 800cc32:	60a0      	str	r0, [r4, #8]
 800cc34:	4620      	mov	r0, r4
 800cc36:	f000 f817 	bl	800cc68 <__sfp>
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	60e0      	str	r0, [r4, #12]
 800cc3e:	2104      	movs	r1, #4
 800cc40:	6860      	ldr	r0, [r4, #4]
 800cc42:	f7ff ffa1 	bl	800cb88 <std>
 800cc46:	2201      	movs	r2, #1
 800cc48:	2109      	movs	r1, #9
 800cc4a:	68a0      	ldr	r0, [r4, #8]
 800cc4c:	f7ff ff9c 	bl	800cb88 <std>
 800cc50:	2202      	movs	r2, #2
 800cc52:	2112      	movs	r1, #18
 800cc54:	68e0      	ldr	r0, [r4, #12]
 800cc56:	f7ff ff97 	bl	800cb88 <std>
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	61a3      	str	r3, [r4, #24]
 800cc5e:	bd10      	pop	{r4, pc}
 800cc60:	0800eac8 	.word	0x0800eac8
 800cc64:	0800cbd1 	.word	0x0800cbd1

0800cc68 <__sfp>:
 800cc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc6a:	4b1b      	ldr	r3, [pc, #108]	; (800ccd8 <__sfp+0x70>)
 800cc6c:	681e      	ldr	r6, [r3, #0]
 800cc6e:	69b3      	ldr	r3, [r6, #24]
 800cc70:	4607      	mov	r7, r0
 800cc72:	b913      	cbnz	r3, 800cc7a <__sfp+0x12>
 800cc74:	4630      	mov	r0, r6
 800cc76:	f7ff ffc7 	bl	800cc08 <__sinit>
 800cc7a:	3648      	adds	r6, #72	; 0x48
 800cc7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc80:	3b01      	subs	r3, #1
 800cc82:	d503      	bpl.n	800cc8c <__sfp+0x24>
 800cc84:	6833      	ldr	r3, [r6, #0]
 800cc86:	b133      	cbz	r3, 800cc96 <__sfp+0x2e>
 800cc88:	6836      	ldr	r6, [r6, #0]
 800cc8a:	e7f7      	b.n	800cc7c <__sfp+0x14>
 800cc8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc90:	b16d      	cbz	r5, 800ccae <__sfp+0x46>
 800cc92:	3468      	adds	r4, #104	; 0x68
 800cc94:	e7f4      	b.n	800cc80 <__sfp+0x18>
 800cc96:	2104      	movs	r1, #4
 800cc98:	4638      	mov	r0, r7
 800cc9a:	f7ff ff9f 	bl	800cbdc <__sfmoreglue>
 800cc9e:	6030      	str	r0, [r6, #0]
 800cca0:	2800      	cmp	r0, #0
 800cca2:	d1f1      	bne.n	800cc88 <__sfp+0x20>
 800cca4:	230c      	movs	r3, #12
 800cca6:	603b      	str	r3, [r7, #0]
 800cca8:	4604      	mov	r4, r0
 800ccaa:	4620      	mov	r0, r4
 800ccac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccae:	4b0b      	ldr	r3, [pc, #44]	; (800ccdc <__sfp+0x74>)
 800ccb0:	6665      	str	r5, [r4, #100]	; 0x64
 800ccb2:	e9c4 5500 	strd	r5, r5, [r4]
 800ccb6:	60a5      	str	r5, [r4, #8]
 800ccb8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ccbc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ccc0:	2208      	movs	r2, #8
 800ccc2:	4629      	mov	r1, r5
 800ccc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ccc8:	f7fd fa06 	bl	800a0d8 <memset>
 800cccc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ccd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ccd4:	e7e9      	b.n	800ccaa <__sfp+0x42>
 800ccd6:	bf00      	nop
 800ccd8:	0800eac8 	.word	0x0800eac8
 800ccdc:	ffff0001 	.word	0xffff0001

0800cce0 <_fwalk_reent>:
 800cce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cce4:	4680      	mov	r8, r0
 800cce6:	4689      	mov	r9, r1
 800cce8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ccec:	2600      	movs	r6, #0
 800ccee:	b914      	cbnz	r4, 800ccf6 <_fwalk_reent+0x16>
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccf6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ccfa:	3f01      	subs	r7, #1
 800ccfc:	d501      	bpl.n	800cd02 <_fwalk_reent+0x22>
 800ccfe:	6824      	ldr	r4, [r4, #0]
 800cd00:	e7f5      	b.n	800ccee <_fwalk_reent+0xe>
 800cd02:	89ab      	ldrh	r3, [r5, #12]
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d907      	bls.n	800cd18 <_fwalk_reent+0x38>
 800cd08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	d003      	beq.n	800cd18 <_fwalk_reent+0x38>
 800cd10:	4629      	mov	r1, r5
 800cd12:	4640      	mov	r0, r8
 800cd14:	47c8      	blx	r9
 800cd16:	4306      	orrs	r6, r0
 800cd18:	3568      	adds	r5, #104	; 0x68
 800cd1a:	e7ee      	b.n	800ccfa <_fwalk_reent+0x1a>

0800cd1c <rshift>:
 800cd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd1e:	6906      	ldr	r6, [r0, #16]
 800cd20:	114b      	asrs	r3, r1, #5
 800cd22:	429e      	cmp	r6, r3
 800cd24:	f100 0414 	add.w	r4, r0, #20
 800cd28:	dd30      	ble.n	800cd8c <rshift+0x70>
 800cd2a:	f011 011f 	ands.w	r1, r1, #31
 800cd2e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800cd32:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800cd36:	d108      	bne.n	800cd4a <rshift+0x2e>
 800cd38:	4621      	mov	r1, r4
 800cd3a:	42b2      	cmp	r2, r6
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	d211      	bcs.n	800cd64 <rshift+0x48>
 800cd40:	f852 3b04 	ldr.w	r3, [r2], #4
 800cd44:	f841 3b04 	str.w	r3, [r1], #4
 800cd48:	e7f7      	b.n	800cd3a <rshift+0x1e>
 800cd4a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800cd4e:	f1c1 0c20 	rsb	ip, r1, #32
 800cd52:	40cd      	lsrs	r5, r1
 800cd54:	3204      	adds	r2, #4
 800cd56:	4623      	mov	r3, r4
 800cd58:	42b2      	cmp	r2, r6
 800cd5a:	4617      	mov	r7, r2
 800cd5c:	d30c      	bcc.n	800cd78 <rshift+0x5c>
 800cd5e:	601d      	str	r5, [r3, #0]
 800cd60:	b105      	cbz	r5, 800cd64 <rshift+0x48>
 800cd62:	3304      	adds	r3, #4
 800cd64:	1b1a      	subs	r2, r3, r4
 800cd66:	42a3      	cmp	r3, r4
 800cd68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cd6c:	bf08      	it	eq
 800cd6e:	2300      	moveq	r3, #0
 800cd70:	6102      	str	r2, [r0, #16]
 800cd72:	bf08      	it	eq
 800cd74:	6143      	streq	r3, [r0, #20]
 800cd76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd78:	683f      	ldr	r7, [r7, #0]
 800cd7a:	fa07 f70c 	lsl.w	r7, r7, ip
 800cd7e:	433d      	orrs	r5, r7
 800cd80:	f843 5b04 	str.w	r5, [r3], #4
 800cd84:	f852 5b04 	ldr.w	r5, [r2], #4
 800cd88:	40cd      	lsrs	r5, r1
 800cd8a:	e7e5      	b.n	800cd58 <rshift+0x3c>
 800cd8c:	4623      	mov	r3, r4
 800cd8e:	e7e9      	b.n	800cd64 <rshift+0x48>

0800cd90 <__hexdig_fun>:
 800cd90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cd94:	2b09      	cmp	r3, #9
 800cd96:	d802      	bhi.n	800cd9e <__hexdig_fun+0xe>
 800cd98:	3820      	subs	r0, #32
 800cd9a:	b2c0      	uxtb	r0, r0
 800cd9c:	4770      	bx	lr
 800cd9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cda2:	2b05      	cmp	r3, #5
 800cda4:	d801      	bhi.n	800cdaa <__hexdig_fun+0x1a>
 800cda6:	3847      	subs	r0, #71	; 0x47
 800cda8:	e7f7      	b.n	800cd9a <__hexdig_fun+0xa>
 800cdaa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cdae:	2b05      	cmp	r3, #5
 800cdb0:	d801      	bhi.n	800cdb6 <__hexdig_fun+0x26>
 800cdb2:	3827      	subs	r0, #39	; 0x27
 800cdb4:	e7f1      	b.n	800cd9a <__hexdig_fun+0xa>
 800cdb6:	2000      	movs	r0, #0
 800cdb8:	4770      	bx	lr

0800cdba <__gethex>:
 800cdba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdbe:	b08b      	sub	sp, #44	; 0x2c
 800cdc0:	468a      	mov	sl, r1
 800cdc2:	9002      	str	r0, [sp, #8]
 800cdc4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800cdc6:	9306      	str	r3, [sp, #24]
 800cdc8:	4690      	mov	r8, r2
 800cdca:	f000 facd 	bl	800d368 <__localeconv_l>
 800cdce:	6803      	ldr	r3, [r0, #0]
 800cdd0:	9303      	str	r3, [sp, #12]
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7f3 fa04 	bl	80001e0 <strlen>
 800cdd8:	9b03      	ldr	r3, [sp, #12]
 800cdda:	9001      	str	r0, [sp, #4]
 800cddc:	4403      	add	r3, r0
 800cdde:	f04f 0b00 	mov.w	fp, #0
 800cde2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cde6:	9307      	str	r3, [sp, #28]
 800cde8:	f8da 3000 	ldr.w	r3, [sl]
 800cdec:	3302      	adds	r3, #2
 800cdee:	461f      	mov	r7, r3
 800cdf0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cdf4:	2830      	cmp	r0, #48	; 0x30
 800cdf6:	d06c      	beq.n	800ced2 <__gethex+0x118>
 800cdf8:	f7ff ffca 	bl	800cd90 <__hexdig_fun>
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	2800      	cmp	r0, #0
 800ce00:	d16a      	bne.n	800ced8 <__gethex+0x11e>
 800ce02:	9a01      	ldr	r2, [sp, #4]
 800ce04:	9903      	ldr	r1, [sp, #12]
 800ce06:	4638      	mov	r0, r7
 800ce08:	f001 fac5 	bl	800e396 <strncmp>
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	d166      	bne.n	800cede <__gethex+0x124>
 800ce10:	9b01      	ldr	r3, [sp, #4]
 800ce12:	5cf8      	ldrb	r0, [r7, r3]
 800ce14:	18fe      	adds	r6, r7, r3
 800ce16:	f7ff ffbb 	bl	800cd90 <__hexdig_fun>
 800ce1a:	2800      	cmp	r0, #0
 800ce1c:	d062      	beq.n	800cee4 <__gethex+0x12a>
 800ce1e:	4633      	mov	r3, r6
 800ce20:	7818      	ldrb	r0, [r3, #0]
 800ce22:	2830      	cmp	r0, #48	; 0x30
 800ce24:	461f      	mov	r7, r3
 800ce26:	f103 0301 	add.w	r3, r3, #1
 800ce2a:	d0f9      	beq.n	800ce20 <__gethex+0x66>
 800ce2c:	f7ff ffb0 	bl	800cd90 <__hexdig_fun>
 800ce30:	fab0 f580 	clz	r5, r0
 800ce34:	096d      	lsrs	r5, r5, #5
 800ce36:	4634      	mov	r4, r6
 800ce38:	f04f 0b01 	mov.w	fp, #1
 800ce3c:	463a      	mov	r2, r7
 800ce3e:	4616      	mov	r6, r2
 800ce40:	3201      	adds	r2, #1
 800ce42:	7830      	ldrb	r0, [r6, #0]
 800ce44:	f7ff ffa4 	bl	800cd90 <__hexdig_fun>
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	d1f8      	bne.n	800ce3e <__gethex+0x84>
 800ce4c:	9a01      	ldr	r2, [sp, #4]
 800ce4e:	9903      	ldr	r1, [sp, #12]
 800ce50:	4630      	mov	r0, r6
 800ce52:	f001 faa0 	bl	800e396 <strncmp>
 800ce56:	b950      	cbnz	r0, 800ce6e <__gethex+0xb4>
 800ce58:	b954      	cbnz	r4, 800ce70 <__gethex+0xb6>
 800ce5a:	9b01      	ldr	r3, [sp, #4]
 800ce5c:	18f4      	adds	r4, r6, r3
 800ce5e:	4622      	mov	r2, r4
 800ce60:	4616      	mov	r6, r2
 800ce62:	3201      	adds	r2, #1
 800ce64:	7830      	ldrb	r0, [r6, #0]
 800ce66:	f7ff ff93 	bl	800cd90 <__hexdig_fun>
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	d1f8      	bne.n	800ce60 <__gethex+0xa6>
 800ce6e:	b10c      	cbz	r4, 800ce74 <__gethex+0xba>
 800ce70:	1ba4      	subs	r4, r4, r6
 800ce72:	00a4      	lsls	r4, r4, #2
 800ce74:	7833      	ldrb	r3, [r6, #0]
 800ce76:	2b50      	cmp	r3, #80	; 0x50
 800ce78:	d001      	beq.n	800ce7e <__gethex+0xc4>
 800ce7a:	2b70      	cmp	r3, #112	; 0x70
 800ce7c:	d140      	bne.n	800cf00 <__gethex+0x146>
 800ce7e:	7873      	ldrb	r3, [r6, #1]
 800ce80:	2b2b      	cmp	r3, #43	; 0x2b
 800ce82:	d031      	beq.n	800cee8 <__gethex+0x12e>
 800ce84:	2b2d      	cmp	r3, #45	; 0x2d
 800ce86:	d033      	beq.n	800cef0 <__gethex+0x136>
 800ce88:	1c71      	adds	r1, r6, #1
 800ce8a:	f04f 0900 	mov.w	r9, #0
 800ce8e:	7808      	ldrb	r0, [r1, #0]
 800ce90:	f7ff ff7e 	bl	800cd90 <__hexdig_fun>
 800ce94:	1e43      	subs	r3, r0, #1
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	2b18      	cmp	r3, #24
 800ce9a:	d831      	bhi.n	800cf00 <__gethex+0x146>
 800ce9c:	f1a0 0210 	sub.w	r2, r0, #16
 800cea0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cea4:	f7ff ff74 	bl	800cd90 <__hexdig_fun>
 800cea8:	1e43      	subs	r3, r0, #1
 800ceaa:	b2db      	uxtb	r3, r3
 800ceac:	2b18      	cmp	r3, #24
 800ceae:	d922      	bls.n	800cef6 <__gethex+0x13c>
 800ceb0:	f1b9 0f00 	cmp.w	r9, #0
 800ceb4:	d000      	beq.n	800ceb8 <__gethex+0xfe>
 800ceb6:	4252      	negs	r2, r2
 800ceb8:	4414      	add	r4, r2
 800ceba:	f8ca 1000 	str.w	r1, [sl]
 800cebe:	b30d      	cbz	r5, 800cf04 <__gethex+0x14a>
 800cec0:	f1bb 0f00 	cmp.w	fp, #0
 800cec4:	bf0c      	ite	eq
 800cec6:	2706      	moveq	r7, #6
 800cec8:	2700      	movne	r7, #0
 800ceca:	4638      	mov	r0, r7
 800cecc:	b00b      	add	sp, #44	; 0x2c
 800cece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ced2:	f10b 0b01 	add.w	fp, fp, #1
 800ced6:	e78a      	b.n	800cdee <__gethex+0x34>
 800ced8:	2500      	movs	r5, #0
 800ceda:	462c      	mov	r4, r5
 800cedc:	e7ae      	b.n	800ce3c <__gethex+0x82>
 800cede:	463e      	mov	r6, r7
 800cee0:	2501      	movs	r5, #1
 800cee2:	e7c7      	b.n	800ce74 <__gethex+0xba>
 800cee4:	4604      	mov	r4, r0
 800cee6:	e7fb      	b.n	800cee0 <__gethex+0x126>
 800cee8:	f04f 0900 	mov.w	r9, #0
 800ceec:	1cb1      	adds	r1, r6, #2
 800ceee:	e7ce      	b.n	800ce8e <__gethex+0xd4>
 800cef0:	f04f 0901 	mov.w	r9, #1
 800cef4:	e7fa      	b.n	800ceec <__gethex+0x132>
 800cef6:	230a      	movs	r3, #10
 800cef8:	fb03 0202 	mla	r2, r3, r2, r0
 800cefc:	3a10      	subs	r2, #16
 800cefe:	e7cf      	b.n	800cea0 <__gethex+0xe6>
 800cf00:	4631      	mov	r1, r6
 800cf02:	e7da      	b.n	800ceba <__gethex+0x100>
 800cf04:	1bf3      	subs	r3, r6, r7
 800cf06:	3b01      	subs	r3, #1
 800cf08:	4629      	mov	r1, r5
 800cf0a:	2b07      	cmp	r3, #7
 800cf0c:	dc49      	bgt.n	800cfa2 <__gethex+0x1e8>
 800cf0e:	9802      	ldr	r0, [sp, #8]
 800cf10:	f000 faa6 	bl	800d460 <_Balloc>
 800cf14:	9b01      	ldr	r3, [sp, #4]
 800cf16:	f100 0914 	add.w	r9, r0, #20
 800cf1a:	f04f 0b00 	mov.w	fp, #0
 800cf1e:	f1c3 0301 	rsb	r3, r3, #1
 800cf22:	4605      	mov	r5, r0
 800cf24:	f8cd 9010 	str.w	r9, [sp, #16]
 800cf28:	46da      	mov	sl, fp
 800cf2a:	9308      	str	r3, [sp, #32]
 800cf2c:	42b7      	cmp	r7, r6
 800cf2e:	d33b      	bcc.n	800cfa8 <__gethex+0x1ee>
 800cf30:	9804      	ldr	r0, [sp, #16]
 800cf32:	f840 ab04 	str.w	sl, [r0], #4
 800cf36:	eba0 0009 	sub.w	r0, r0, r9
 800cf3a:	1080      	asrs	r0, r0, #2
 800cf3c:	6128      	str	r0, [r5, #16]
 800cf3e:	0147      	lsls	r7, r0, #5
 800cf40:	4650      	mov	r0, sl
 800cf42:	f000 fb51 	bl	800d5e8 <__hi0bits>
 800cf46:	f8d8 6000 	ldr.w	r6, [r8]
 800cf4a:	1a3f      	subs	r7, r7, r0
 800cf4c:	42b7      	cmp	r7, r6
 800cf4e:	dd64      	ble.n	800d01a <__gethex+0x260>
 800cf50:	1bbf      	subs	r7, r7, r6
 800cf52:	4639      	mov	r1, r7
 800cf54:	4628      	mov	r0, r5
 800cf56:	f000 fe61 	bl	800dc1c <__any_on>
 800cf5a:	4682      	mov	sl, r0
 800cf5c:	b178      	cbz	r0, 800cf7e <__gethex+0x1c4>
 800cf5e:	1e7b      	subs	r3, r7, #1
 800cf60:	1159      	asrs	r1, r3, #5
 800cf62:	f003 021f 	and.w	r2, r3, #31
 800cf66:	f04f 0a01 	mov.w	sl, #1
 800cf6a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cf6e:	fa0a f202 	lsl.w	r2, sl, r2
 800cf72:	420a      	tst	r2, r1
 800cf74:	d003      	beq.n	800cf7e <__gethex+0x1c4>
 800cf76:	4553      	cmp	r3, sl
 800cf78:	dc46      	bgt.n	800d008 <__gethex+0x24e>
 800cf7a:	f04f 0a02 	mov.w	sl, #2
 800cf7e:	4639      	mov	r1, r7
 800cf80:	4628      	mov	r0, r5
 800cf82:	f7ff fecb 	bl	800cd1c <rshift>
 800cf86:	443c      	add	r4, r7
 800cf88:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf8c:	42a3      	cmp	r3, r4
 800cf8e:	da52      	bge.n	800d036 <__gethex+0x27c>
 800cf90:	4629      	mov	r1, r5
 800cf92:	9802      	ldr	r0, [sp, #8]
 800cf94:	f000 fa98 	bl	800d4c8 <_Bfree>
 800cf98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	6013      	str	r3, [r2, #0]
 800cf9e:	27a3      	movs	r7, #163	; 0xa3
 800cfa0:	e793      	b.n	800ceca <__gethex+0x110>
 800cfa2:	3101      	adds	r1, #1
 800cfa4:	105b      	asrs	r3, r3, #1
 800cfa6:	e7b0      	b.n	800cf0a <__gethex+0x150>
 800cfa8:	1e73      	subs	r3, r6, #1
 800cfaa:	9305      	str	r3, [sp, #20]
 800cfac:	9a07      	ldr	r2, [sp, #28]
 800cfae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d018      	beq.n	800cfe8 <__gethex+0x22e>
 800cfb6:	f1bb 0f20 	cmp.w	fp, #32
 800cfba:	d107      	bne.n	800cfcc <__gethex+0x212>
 800cfbc:	9b04      	ldr	r3, [sp, #16]
 800cfbe:	f8c3 a000 	str.w	sl, [r3]
 800cfc2:	3304      	adds	r3, #4
 800cfc4:	f04f 0a00 	mov.w	sl, #0
 800cfc8:	9304      	str	r3, [sp, #16]
 800cfca:	46d3      	mov	fp, sl
 800cfcc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cfd0:	f7ff fede 	bl	800cd90 <__hexdig_fun>
 800cfd4:	f000 000f 	and.w	r0, r0, #15
 800cfd8:	fa00 f00b 	lsl.w	r0, r0, fp
 800cfdc:	ea4a 0a00 	orr.w	sl, sl, r0
 800cfe0:	f10b 0b04 	add.w	fp, fp, #4
 800cfe4:	9b05      	ldr	r3, [sp, #20]
 800cfe6:	e00d      	b.n	800d004 <__gethex+0x24a>
 800cfe8:	9b05      	ldr	r3, [sp, #20]
 800cfea:	9a08      	ldr	r2, [sp, #32]
 800cfec:	4413      	add	r3, r2
 800cfee:	42bb      	cmp	r3, r7
 800cff0:	d3e1      	bcc.n	800cfb6 <__gethex+0x1fc>
 800cff2:	4618      	mov	r0, r3
 800cff4:	9a01      	ldr	r2, [sp, #4]
 800cff6:	9903      	ldr	r1, [sp, #12]
 800cff8:	9309      	str	r3, [sp, #36]	; 0x24
 800cffa:	f001 f9cc 	bl	800e396 <strncmp>
 800cffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d000:	2800      	cmp	r0, #0
 800d002:	d1d8      	bne.n	800cfb6 <__gethex+0x1fc>
 800d004:	461e      	mov	r6, r3
 800d006:	e791      	b.n	800cf2c <__gethex+0x172>
 800d008:	1eb9      	subs	r1, r7, #2
 800d00a:	4628      	mov	r0, r5
 800d00c:	f000 fe06 	bl	800dc1c <__any_on>
 800d010:	2800      	cmp	r0, #0
 800d012:	d0b2      	beq.n	800cf7a <__gethex+0x1c0>
 800d014:	f04f 0a03 	mov.w	sl, #3
 800d018:	e7b1      	b.n	800cf7e <__gethex+0x1c4>
 800d01a:	da09      	bge.n	800d030 <__gethex+0x276>
 800d01c:	1bf7      	subs	r7, r6, r7
 800d01e:	4629      	mov	r1, r5
 800d020:	463a      	mov	r2, r7
 800d022:	9802      	ldr	r0, [sp, #8]
 800d024:	f000 fc1c 	bl	800d860 <__lshift>
 800d028:	1be4      	subs	r4, r4, r7
 800d02a:	4605      	mov	r5, r0
 800d02c:	f100 0914 	add.w	r9, r0, #20
 800d030:	f04f 0a00 	mov.w	sl, #0
 800d034:	e7a8      	b.n	800cf88 <__gethex+0x1ce>
 800d036:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d03a:	42a0      	cmp	r0, r4
 800d03c:	dd6a      	ble.n	800d114 <__gethex+0x35a>
 800d03e:	1b04      	subs	r4, r0, r4
 800d040:	42a6      	cmp	r6, r4
 800d042:	dc2e      	bgt.n	800d0a2 <__gethex+0x2e8>
 800d044:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d048:	2b02      	cmp	r3, #2
 800d04a:	d022      	beq.n	800d092 <__gethex+0x2d8>
 800d04c:	2b03      	cmp	r3, #3
 800d04e:	d024      	beq.n	800d09a <__gethex+0x2e0>
 800d050:	2b01      	cmp	r3, #1
 800d052:	d115      	bne.n	800d080 <__gethex+0x2c6>
 800d054:	42a6      	cmp	r6, r4
 800d056:	d113      	bne.n	800d080 <__gethex+0x2c6>
 800d058:	2e01      	cmp	r6, #1
 800d05a:	dc0b      	bgt.n	800d074 <__gethex+0x2ba>
 800d05c:	9a06      	ldr	r2, [sp, #24]
 800d05e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d062:	6013      	str	r3, [r2, #0]
 800d064:	2301      	movs	r3, #1
 800d066:	612b      	str	r3, [r5, #16]
 800d068:	f8c9 3000 	str.w	r3, [r9]
 800d06c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d06e:	2762      	movs	r7, #98	; 0x62
 800d070:	601d      	str	r5, [r3, #0]
 800d072:	e72a      	b.n	800ceca <__gethex+0x110>
 800d074:	1e71      	subs	r1, r6, #1
 800d076:	4628      	mov	r0, r5
 800d078:	f000 fdd0 	bl	800dc1c <__any_on>
 800d07c:	2800      	cmp	r0, #0
 800d07e:	d1ed      	bne.n	800d05c <__gethex+0x2a2>
 800d080:	4629      	mov	r1, r5
 800d082:	9802      	ldr	r0, [sp, #8]
 800d084:	f000 fa20 	bl	800d4c8 <_Bfree>
 800d088:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d08a:	2300      	movs	r3, #0
 800d08c:	6013      	str	r3, [r2, #0]
 800d08e:	2750      	movs	r7, #80	; 0x50
 800d090:	e71b      	b.n	800ceca <__gethex+0x110>
 800d092:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d094:	2b00      	cmp	r3, #0
 800d096:	d0e1      	beq.n	800d05c <__gethex+0x2a2>
 800d098:	e7f2      	b.n	800d080 <__gethex+0x2c6>
 800d09a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d1dd      	bne.n	800d05c <__gethex+0x2a2>
 800d0a0:	e7ee      	b.n	800d080 <__gethex+0x2c6>
 800d0a2:	1e67      	subs	r7, r4, #1
 800d0a4:	f1ba 0f00 	cmp.w	sl, #0
 800d0a8:	d131      	bne.n	800d10e <__gethex+0x354>
 800d0aa:	b127      	cbz	r7, 800d0b6 <__gethex+0x2fc>
 800d0ac:	4639      	mov	r1, r7
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	f000 fdb4 	bl	800dc1c <__any_on>
 800d0b4:	4682      	mov	sl, r0
 800d0b6:	117a      	asrs	r2, r7, #5
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	f007 071f 	and.w	r7, r7, #31
 800d0be:	fa03 f707 	lsl.w	r7, r3, r7
 800d0c2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800d0c6:	4621      	mov	r1, r4
 800d0c8:	421f      	tst	r7, r3
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	bf18      	it	ne
 800d0ce:	f04a 0a02 	orrne.w	sl, sl, #2
 800d0d2:	1b36      	subs	r6, r6, r4
 800d0d4:	f7ff fe22 	bl	800cd1c <rshift>
 800d0d8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800d0dc:	2702      	movs	r7, #2
 800d0de:	f1ba 0f00 	cmp.w	sl, #0
 800d0e2:	d048      	beq.n	800d176 <__gethex+0x3bc>
 800d0e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d0e8:	2b02      	cmp	r3, #2
 800d0ea:	d015      	beq.n	800d118 <__gethex+0x35e>
 800d0ec:	2b03      	cmp	r3, #3
 800d0ee:	d017      	beq.n	800d120 <__gethex+0x366>
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d109      	bne.n	800d108 <__gethex+0x34e>
 800d0f4:	f01a 0f02 	tst.w	sl, #2
 800d0f8:	d006      	beq.n	800d108 <__gethex+0x34e>
 800d0fa:	f8d9 3000 	ldr.w	r3, [r9]
 800d0fe:	ea4a 0a03 	orr.w	sl, sl, r3
 800d102:	f01a 0f01 	tst.w	sl, #1
 800d106:	d10e      	bne.n	800d126 <__gethex+0x36c>
 800d108:	f047 0710 	orr.w	r7, r7, #16
 800d10c:	e033      	b.n	800d176 <__gethex+0x3bc>
 800d10e:	f04f 0a01 	mov.w	sl, #1
 800d112:	e7d0      	b.n	800d0b6 <__gethex+0x2fc>
 800d114:	2701      	movs	r7, #1
 800d116:	e7e2      	b.n	800d0de <__gethex+0x324>
 800d118:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d11a:	f1c3 0301 	rsb	r3, r3, #1
 800d11e:	9315      	str	r3, [sp, #84]	; 0x54
 800d120:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d122:	2b00      	cmp	r3, #0
 800d124:	d0f0      	beq.n	800d108 <__gethex+0x34e>
 800d126:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800d12a:	f105 0314 	add.w	r3, r5, #20
 800d12e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800d132:	eb03 010a 	add.w	r1, r3, sl
 800d136:	f04f 0c00 	mov.w	ip, #0
 800d13a:	4618      	mov	r0, r3
 800d13c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d140:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800d144:	d01c      	beq.n	800d180 <__gethex+0x3c6>
 800d146:	3201      	adds	r2, #1
 800d148:	6002      	str	r2, [r0, #0]
 800d14a:	2f02      	cmp	r7, #2
 800d14c:	f105 0314 	add.w	r3, r5, #20
 800d150:	d138      	bne.n	800d1c4 <__gethex+0x40a>
 800d152:	f8d8 2000 	ldr.w	r2, [r8]
 800d156:	3a01      	subs	r2, #1
 800d158:	42b2      	cmp	r2, r6
 800d15a:	d10a      	bne.n	800d172 <__gethex+0x3b8>
 800d15c:	1171      	asrs	r1, r6, #5
 800d15e:	2201      	movs	r2, #1
 800d160:	f006 061f 	and.w	r6, r6, #31
 800d164:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d168:	fa02 f606 	lsl.w	r6, r2, r6
 800d16c:	421e      	tst	r6, r3
 800d16e:	bf18      	it	ne
 800d170:	4617      	movne	r7, r2
 800d172:	f047 0720 	orr.w	r7, r7, #32
 800d176:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d178:	601d      	str	r5, [r3, #0]
 800d17a:	9b06      	ldr	r3, [sp, #24]
 800d17c:	601c      	str	r4, [r3, #0]
 800d17e:	e6a4      	b.n	800ceca <__gethex+0x110>
 800d180:	4299      	cmp	r1, r3
 800d182:	f843 cc04 	str.w	ip, [r3, #-4]
 800d186:	d8d8      	bhi.n	800d13a <__gethex+0x380>
 800d188:	68ab      	ldr	r3, [r5, #8]
 800d18a:	4599      	cmp	r9, r3
 800d18c:	db12      	blt.n	800d1b4 <__gethex+0x3fa>
 800d18e:	6869      	ldr	r1, [r5, #4]
 800d190:	9802      	ldr	r0, [sp, #8]
 800d192:	3101      	adds	r1, #1
 800d194:	f000 f964 	bl	800d460 <_Balloc>
 800d198:	692a      	ldr	r2, [r5, #16]
 800d19a:	3202      	adds	r2, #2
 800d19c:	f105 010c 	add.w	r1, r5, #12
 800d1a0:	4683      	mov	fp, r0
 800d1a2:	0092      	lsls	r2, r2, #2
 800d1a4:	300c      	adds	r0, #12
 800d1a6:	f7fc ff8c 	bl	800a0c2 <memcpy>
 800d1aa:	4629      	mov	r1, r5
 800d1ac:	9802      	ldr	r0, [sp, #8]
 800d1ae:	f000 f98b 	bl	800d4c8 <_Bfree>
 800d1b2:	465d      	mov	r5, fp
 800d1b4:	692b      	ldr	r3, [r5, #16]
 800d1b6:	1c5a      	adds	r2, r3, #1
 800d1b8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d1bc:	612a      	str	r2, [r5, #16]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	615a      	str	r2, [r3, #20]
 800d1c2:	e7c2      	b.n	800d14a <__gethex+0x390>
 800d1c4:	692a      	ldr	r2, [r5, #16]
 800d1c6:	454a      	cmp	r2, r9
 800d1c8:	dd0b      	ble.n	800d1e2 <__gethex+0x428>
 800d1ca:	2101      	movs	r1, #1
 800d1cc:	4628      	mov	r0, r5
 800d1ce:	f7ff fda5 	bl	800cd1c <rshift>
 800d1d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d1d6:	3401      	adds	r4, #1
 800d1d8:	42a3      	cmp	r3, r4
 800d1da:	f6ff aed9 	blt.w	800cf90 <__gethex+0x1d6>
 800d1de:	2701      	movs	r7, #1
 800d1e0:	e7c7      	b.n	800d172 <__gethex+0x3b8>
 800d1e2:	f016 061f 	ands.w	r6, r6, #31
 800d1e6:	d0fa      	beq.n	800d1de <__gethex+0x424>
 800d1e8:	449a      	add	sl, r3
 800d1ea:	f1c6 0620 	rsb	r6, r6, #32
 800d1ee:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d1f2:	f000 f9f9 	bl	800d5e8 <__hi0bits>
 800d1f6:	42b0      	cmp	r0, r6
 800d1f8:	dbe7      	blt.n	800d1ca <__gethex+0x410>
 800d1fa:	e7f0      	b.n	800d1de <__gethex+0x424>

0800d1fc <L_shift>:
 800d1fc:	f1c2 0208 	rsb	r2, r2, #8
 800d200:	0092      	lsls	r2, r2, #2
 800d202:	b570      	push	{r4, r5, r6, lr}
 800d204:	f1c2 0620 	rsb	r6, r2, #32
 800d208:	6843      	ldr	r3, [r0, #4]
 800d20a:	6804      	ldr	r4, [r0, #0]
 800d20c:	fa03 f506 	lsl.w	r5, r3, r6
 800d210:	432c      	orrs	r4, r5
 800d212:	40d3      	lsrs	r3, r2
 800d214:	6004      	str	r4, [r0, #0]
 800d216:	f840 3f04 	str.w	r3, [r0, #4]!
 800d21a:	4288      	cmp	r0, r1
 800d21c:	d3f4      	bcc.n	800d208 <L_shift+0xc>
 800d21e:	bd70      	pop	{r4, r5, r6, pc}

0800d220 <__match>:
 800d220:	b530      	push	{r4, r5, lr}
 800d222:	6803      	ldr	r3, [r0, #0]
 800d224:	3301      	adds	r3, #1
 800d226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d22a:	b914      	cbnz	r4, 800d232 <__match+0x12>
 800d22c:	6003      	str	r3, [r0, #0]
 800d22e:	2001      	movs	r0, #1
 800d230:	bd30      	pop	{r4, r5, pc}
 800d232:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d236:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d23a:	2d19      	cmp	r5, #25
 800d23c:	bf98      	it	ls
 800d23e:	3220      	addls	r2, #32
 800d240:	42a2      	cmp	r2, r4
 800d242:	d0f0      	beq.n	800d226 <__match+0x6>
 800d244:	2000      	movs	r0, #0
 800d246:	e7f3      	b.n	800d230 <__match+0x10>

0800d248 <__hexnan>:
 800d248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d24c:	680b      	ldr	r3, [r1, #0]
 800d24e:	6801      	ldr	r1, [r0, #0]
 800d250:	115f      	asrs	r7, r3, #5
 800d252:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800d256:	f013 031f 	ands.w	r3, r3, #31
 800d25a:	b087      	sub	sp, #28
 800d25c:	bf18      	it	ne
 800d25e:	3704      	addne	r7, #4
 800d260:	2500      	movs	r5, #0
 800d262:	1f3e      	subs	r6, r7, #4
 800d264:	4682      	mov	sl, r0
 800d266:	4690      	mov	r8, r2
 800d268:	9301      	str	r3, [sp, #4]
 800d26a:	f847 5c04 	str.w	r5, [r7, #-4]
 800d26e:	46b1      	mov	r9, r6
 800d270:	4634      	mov	r4, r6
 800d272:	9502      	str	r5, [sp, #8]
 800d274:	46ab      	mov	fp, r5
 800d276:	784a      	ldrb	r2, [r1, #1]
 800d278:	1c4b      	adds	r3, r1, #1
 800d27a:	9303      	str	r3, [sp, #12]
 800d27c:	b342      	cbz	r2, 800d2d0 <__hexnan+0x88>
 800d27e:	4610      	mov	r0, r2
 800d280:	9105      	str	r1, [sp, #20]
 800d282:	9204      	str	r2, [sp, #16]
 800d284:	f7ff fd84 	bl	800cd90 <__hexdig_fun>
 800d288:	2800      	cmp	r0, #0
 800d28a:	d143      	bne.n	800d314 <__hexnan+0xcc>
 800d28c:	9a04      	ldr	r2, [sp, #16]
 800d28e:	9905      	ldr	r1, [sp, #20]
 800d290:	2a20      	cmp	r2, #32
 800d292:	d818      	bhi.n	800d2c6 <__hexnan+0x7e>
 800d294:	9b02      	ldr	r3, [sp, #8]
 800d296:	459b      	cmp	fp, r3
 800d298:	dd13      	ble.n	800d2c2 <__hexnan+0x7a>
 800d29a:	454c      	cmp	r4, r9
 800d29c:	d206      	bcs.n	800d2ac <__hexnan+0x64>
 800d29e:	2d07      	cmp	r5, #7
 800d2a0:	dc04      	bgt.n	800d2ac <__hexnan+0x64>
 800d2a2:	462a      	mov	r2, r5
 800d2a4:	4649      	mov	r1, r9
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	f7ff ffa8 	bl	800d1fc <L_shift>
 800d2ac:	4544      	cmp	r4, r8
 800d2ae:	d944      	bls.n	800d33a <__hexnan+0xf2>
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	f1a4 0904 	sub.w	r9, r4, #4
 800d2b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800d2ba:	f8cd b008 	str.w	fp, [sp, #8]
 800d2be:	464c      	mov	r4, r9
 800d2c0:	461d      	mov	r5, r3
 800d2c2:	9903      	ldr	r1, [sp, #12]
 800d2c4:	e7d7      	b.n	800d276 <__hexnan+0x2e>
 800d2c6:	2a29      	cmp	r2, #41	; 0x29
 800d2c8:	d14a      	bne.n	800d360 <__hexnan+0x118>
 800d2ca:	3102      	adds	r1, #2
 800d2cc:	f8ca 1000 	str.w	r1, [sl]
 800d2d0:	f1bb 0f00 	cmp.w	fp, #0
 800d2d4:	d044      	beq.n	800d360 <__hexnan+0x118>
 800d2d6:	454c      	cmp	r4, r9
 800d2d8:	d206      	bcs.n	800d2e8 <__hexnan+0xa0>
 800d2da:	2d07      	cmp	r5, #7
 800d2dc:	dc04      	bgt.n	800d2e8 <__hexnan+0xa0>
 800d2de:	462a      	mov	r2, r5
 800d2e0:	4649      	mov	r1, r9
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	f7ff ff8a 	bl	800d1fc <L_shift>
 800d2e8:	4544      	cmp	r4, r8
 800d2ea:	d928      	bls.n	800d33e <__hexnan+0xf6>
 800d2ec:	4643      	mov	r3, r8
 800d2ee:	f854 2b04 	ldr.w	r2, [r4], #4
 800d2f2:	f843 2b04 	str.w	r2, [r3], #4
 800d2f6:	42a6      	cmp	r6, r4
 800d2f8:	d2f9      	bcs.n	800d2ee <__hexnan+0xa6>
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f843 2b04 	str.w	r2, [r3], #4
 800d300:	429e      	cmp	r6, r3
 800d302:	d2fb      	bcs.n	800d2fc <__hexnan+0xb4>
 800d304:	6833      	ldr	r3, [r6, #0]
 800d306:	b91b      	cbnz	r3, 800d310 <__hexnan+0xc8>
 800d308:	4546      	cmp	r6, r8
 800d30a:	d127      	bne.n	800d35c <__hexnan+0x114>
 800d30c:	2301      	movs	r3, #1
 800d30e:	6033      	str	r3, [r6, #0]
 800d310:	2005      	movs	r0, #5
 800d312:	e026      	b.n	800d362 <__hexnan+0x11a>
 800d314:	3501      	adds	r5, #1
 800d316:	2d08      	cmp	r5, #8
 800d318:	f10b 0b01 	add.w	fp, fp, #1
 800d31c:	dd06      	ble.n	800d32c <__hexnan+0xe4>
 800d31e:	4544      	cmp	r4, r8
 800d320:	d9cf      	bls.n	800d2c2 <__hexnan+0x7a>
 800d322:	2300      	movs	r3, #0
 800d324:	f844 3c04 	str.w	r3, [r4, #-4]
 800d328:	2501      	movs	r5, #1
 800d32a:	3c04      	subs	r4, #4
 800d32c:	6822      	ldr	r2, [r4, #0]
 800d32e:	f000 000f 	and.w	r0, r0, #15
 800d332:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d336:	6020      	str	r0, [r4, #0]
 800d338:	e7c3      	b.n	800d2c2 <__hexnan+0x7a>
 800d33a:	2508      	movs	r5, #8
 800d33c:	e7c1      	b.n	800d2c2 <__hexnan+0x7a>
 800d33e:	9b01      	ldr	r3, [sp, #4]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d0df      	beq.n	800d304 <__hexnan+0xbc>
 800d344:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d348:	f1c3 0320 	rsb	r3, r3, #32
 800d34c:	fa22 f303 	lsr.w	r3, r2, r3
 800d350:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800d354:	401a      	ands	r2, r3
 800d356:	f847 2c04 	str.w	r2, [r7, #-4]
 800d35a:	e7d3      	b.n	800d304 <__hexnan+0xbc>
 800d35c:	3e04      	subs	r6, #4
 800d35e:	e7d1      	b.n	800d304 <__hexnan+0xbc>
 800d360:	2004      	movs	r0, #4
 800d362:	b007      	add	sp, #28
 800d364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d368 <__localeconv_l>:
 800d368:	30f0      	adds	r0, #240	; 0xf0
 800d36a:	4770      	bx	lr

0800d36c <_localeconv_r>:
 800d36c:	4b04      	ldr	r3, [pc, #16]	; (800d380 <_localeconv_r+0x14>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	6a18      	ldr	r0, [r3, #32]
 800d372:	4b04      	ldr	r3, [pc, #16]	; (800d384 <_localeconv_r+0x18>)
 800d374:	2800      	cmp	r0, #0
 800d376:	bf08      	it	eq
 800d378:	4618      	moveq	r0, r3
 800d37a:	30f0      	adds	r0, #240	; 0xf0
 800d37c:	4770      	bx	lr
 800d37e:	bf00      	nop
 800d380:	20000098 	.word	0x20000098
 800d384:	200000fc 	.word	0x200000fc

0800d388 <__swhatbuf_r>:
 800d388:	b570      	push	{r4, r5, r6, lr}
 800d38a:	460e      	mov	r6, r1
 800d38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d390:	2900      	cmp	r1, #0
 800d392:	b096      	sub	sp, #88	; 0x58
 800d394:	4614      	mov	r4, r2
 800d396:	461d      	mov	r5, r3
 800d398:	da07      	bge.n	800d3aa <__swhatbuf_r+0x22>
 800d39a:	2300      	movs	r3, #0
 800d39c:	602b      	str	r3, [r5, #0]
 800d39e:	89b3      	ldrh	r3, [r6, #12]
 800d3a0:	061a      	lsls	r2, r3, #24
 800d3a2:	d410      	bmi.n	800d3c6 <__swhatbuf_r+0x3e>
 800d3a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3a8:	e00e      	b.n	800d3c8 <__swhatbuf_r+0x40>
 800d3aa:	466a      	mov	r2, sp
 800d3ac:	f001 f828 	bl	800e400 <_fstat_r>
 800d3b0:	2800      	cmp	r0, #0
 800d3b2:	dbf2      	blt.n	800d39a <__swhatbuf_r+0x12>
 800d3b4:	9a01      	ldr	r2, [sp, #4]
 800d3b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d3ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d3be:	425a      	negs	r2, r3
 800d3c0:	415a      	adcs	r2, r3
 800d3c2:	602a      	str	r2, [r5, #0]
 800d3c4:	e7ee      	b.n	800d3a4 <__swhatbuf_r+0x1c>
 800d3c6:	2340      	movs	r3, #64	; 0x40
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	6023      	str	r3, [r4, #0]
 800d3cc:	b016      	add	sp, #88	; 0x58
 800d3ce:	bd70      	pop	{r4, r5, r6, pc}

0800d3d0 <__smakebuf_r>:
 800d3d0:	898b      	ldrh	r3, [r1, #12]
 800d3d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3d4:	079d      	lsls	r5, r3, #30
 800d3d6:	4606      	mov	r6, r0
 800d3d8:	460c      	mov	r4, r1
 800d3da:	d507      	bpl.n	800d3ec <__smakebuf_r+0x1c>
 800d3dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d3e0:	6023      	str	r3, [r4, #0]
 800d3e2:	6123      	str	r3, [r4, #16]
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	6163      	str	r3, [r4, #20]
 800d3e8:	b002      	add	sp, #8
 800d3ea:	bd70      	pop	{r4, r5, r6, pc}
 800d3ec:	ab01      	add	r3, sp, #4
 800d3ee:	466a      	mov	r2, sp
 800d3f0:	f7ff ffca 	bl	800d388 <__swhatbuf_r>
 800d3f4:	9900      	ldr	r1, [sp, #0]
 800d3f6:	4605      	mov	r5, r0
 800d3f8:	4630      	mov	r0, r6
 800d3fa:	f000 fc8d 	bl	800dd18 <_malloc_r>
 800d3fe:	b948      	cbnz	r0, 800d414 <__smakebuf_r+0x44>
 800d400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d404:	059a      	lsls	r2, r3, #22
 800d406:	d4ef      	bmi.n	800d3e8 <__smakebuf_r+0x18>
 800d408:	f023 0303 	bic.w	r3, r3, #3
 800d40c:	f043 0302 	orr.w	r3, r3, #2
 800d410:	81a3      	strh	r3, [r4, #12]
 800d412:	e7e3      	b.n	800d3dc <__smakebuf_r+0xc>
 800d414:	4b0d      	ldr	r3, [pc, #52]	; (800d44c <__smakebuf_r+0x7c>)
 800d416:	62b3      	str	r3, [r6, #40]	; 0x28
 800d418:	89a3      	ldrh	r3, [r4, #12]
 800d41a:	6020      	str	r0, [r4, #0]
 800d41c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d420:	81a3      	strh	r3, [r4, #12]
 800d422:	9b00      	ldr	r3, [sp, #0]
 800d424:	6163      	str	r3, [r4, #20]
 800d426:	9b01      	ldr	r3, [sp, #4]
 800d428:	6120      	str	r0, [r4, #16]
 800d42a:	b15b      	cbz	r3, 800d444 <__smakebuf_r+0x74>
 800d42c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d430:	4630      	mov	r0, r6
 800d432:	f000 fff7 	bl	800e424 <_isatty_r>
 800d436:	b128      	cbz	r0, 800d444 <__smakebuf_r+0x74>
 800d438:	89a3      	ldrh	r3, [r4, #12]
 800d43a:	f023 0303 	bic.w	r3, r3, #3
 800d43e:	f043 0301 	orr.w	r3, r3, #1
 800d442:	81a3      	strh	r3, [r4, #12]
 800d444:	89a3      	ldrh	r3, [r4, #12]
 800d446:	431d      	orrs	r5, r3
 800d448:	81a5      	strh	r5, [r4, #12]
 800d44a:	e7cd      	b.n	800d3e8 <__smakebuf_r+0x18>
 800d44c:	0800cbd1 	.word	0x0800cbd1

0800d450 <malloc>:
 800d450:	4b02      	ldr	r3, [pc, #8]	; (800d45c <malloc+0xc>)
 800d452:	4601      	mov	r1, r0
 800d454:	6818      	ldr	r0, [r3, #0]
 800d456:	f000 bc5f 	b.w	800dd18 <_malloc_r>
 800d45a:	bf00      	nop
 800d45c:	20000098 	.word	0x20000098

0800d460 <_Balloc>:
 800d460:	b570      	push	{r4, r5, r6, lr}
 800d462:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d464:	4604      	mov	r4, r0
 800d466:	460e      	mov	r6, r1
 800d468:	b93d      	cbnz	r5, 800d47a <_Balloc+0x1a>
 800d46a:	2010      	movs	r0, #16
 800d46c:	f7ff fff0 	bl	800d450 <malloc>
 800d470:	6260      	str	r0, [r4, #36]	; 0x24
 800d472:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d476:	6005      	str	r5, [r0, #0]
 800d478:	60c5      	str	r5, [r0, #12]
 800d47a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d47c:	68eb      	ldr	r3, [r5, #12]
 800d47e:	b183      	cbz	r3, 800d4a2 <_Balloc+0x42>
 800d480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d482:	68db      	ldr	r3, [r3, #12]
 800d484:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d488:	b9b8      	cbnz	r0, 800d4ba <_Balloc+0x5a>
 800d48a:	2101      	movs	r1, #1
 800d48c:	fa01 f506 	lsl.w	r5, r1, r6
 800d490:	1d6a      	adds	r2, r5, #5
 800d492:	0092      	lsls	r2, r2, #2
 800d494:	4620      	mov	r0, r4
 800d496:	f000 fbe2 	bl	800dc5e <_calloc_r>
 800d49a:	b160      	cbz	r0, 800d4b6 <_Balloc+0x56>
 800d49c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d4a0:	e00e      	b.n	800d4c0 <_Balloc+0x60>
 800d4a2:	2221      	movs	r2, #33	; 0x21
 800d4a4:	2104      	movs	r1, #4
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f000 fbd9 	bl	800dc5e <_calloc_r>
 800d4ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4ae:	60e8      	str	r0, [r5, #12]
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d1e4      	bne.n	800d480 <_Balloc+0x20>
 800d4b6:	2000      	movs	r0, #0
 800d4b8:	bd70      	pop	{r4, r5, r6, pc}
 800d4ba:	6802      	ldr	r2, [r0, #0]
 800d4bc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4c6:	e7f7      	b.n	800d4b8 <_Balloc+0x58>

0800d4c8 <_Bfree>:
 800d4c8:	b570      	push	{r4, r5, r6, lr}
 800d4ca:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d4cc:	4606      	mov	r6, r0
 800d4ce:	460d      	mov	r5, r1
 800d4d0:	b93c      	cbnz	r4, 800d4e2 <_Bfree+0x1a>
 800d4d2:	2010      	movs	r0, #16
 800d4d4:	f7ff ffbc 	bl	800d450 <malloc>
 800d4d8:	6270      	str	r0, [r6, #36]	; 0x24
 800d4da:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4de:	6004      	str	r4, [r0, #0]
 800d4e0:	60c4      	str	r4, [r0, #12]
 800d4e2:	b13d      	cbz	r5, 800d4f4 <_Bfree+0x2c>
 800d4e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d4e6:	686a      	ldr	r2, [r5, #4]
 800d4e8:	68db      	ldr	r3, [r3, #12]
 800d4ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d4ee:	6029      	str	r1, [r5, #0]
 800d4f0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d4f4:	bd70      	pop	{r4, r5, r6, pc}

0800d4f6 <__multadd>:
 800d4f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4fa:	690d      	ldr	r5, [r1, #16]
 800d4fc:	461f      	mov	r7, r3
 800d4fe:	4606      	mov	r6, r0
 800d500:	460c      	mov	r4, r1
 800d502:	f101 0c14 	add.w	ip, r1, #20
 800d506:	2300      	movs	r3, #0
 800d508:	f8dc 0000 	ldr.w	r0, [ip]
 800d50c:	b281      	uxth	r1, r0
 800d50e:	fb02 7101 	mla	r1, r2, r1, r7
 800d512:	0c0f      	lsrs	r7, r1, #16
 800d514:	0c00      	lsrs	r0, r0, #16
 800d516:	fb02 7000 	mla	r0, r2, r0, r7
 800d51a:	b289      	uxth	r1, r1
 800d51c:	3301      	adds	r3, #1
 800d51e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d522:	429d      	cmp	r5, r3
 800d524:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d528:	f84c 1b04 	str.w	r1, [ip], #4
 800d52c:	dcec      	bgt.n	800d508 <__multadd+0x12>
 800d52e:	b1d7      	cbz	r7, 800d566 <__multadd+0x70>
 800d530:	68a3      	ldr	r3, [r4, #8]
 800d532:	42ab      	cmp	r3, r5
 800d534:	dc12      	bgt.n	800d55c <__multadd+0x66>
 800d536:	6861      	ldr	r1, [r4, #4]
 800d538:	4630      	mov	r0, r6
 800d53a:	3101      	adds	r1, #1
 800d53c:	f7ff ff90 	bl	800d460 <_Balloc>
 800d540:	6922      	ldr	r2, [r4, #16]
 800d542:	3202      	adds	r2, #2
 800d544:	f104 010c 	add.w	r1, r4, #12
 800d548:	4680      	mov	r8, r0
 800d54a:	0092      	lsls	r2, r2, #2
 800d54c:	300c      	adds	r0, #12
 800d54e:	f7fc fdb8 	bl	800a0c2 <memcpy>
 800d552:	4621      	mov	r1, r4
 800d554:	4630      	mov	r0, r6
 800d556:	f7ff ffb7 	bl	800d4c8 <_Bfree>
 800d55a:	4644      	mov	r4, r8
 800d55c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d560:	3501      	adds	r5, #1
 800d562:	615f      	str	r7, [r3, #20]
 800d564:	6125      	str	r5, [r4, #16]
 800d566:	4620      	mov	r0, r4
 800d568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d56c <__s2b>:
 800d56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d570:	460c      	mov	r4, r1
 800d572:	4615      	mov	r5, r2
 800d574:	461f      	mov	r7, r3
 800d576:	2209      	movs	r2, #9
 800d578:	3308      	adds	r3, #8
 800d57a:	4606      	mov	r6, r0
 800d57c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d580:	2100      	movs	r1, #0
 800d582:	2201      	movs	r2, #1
 800d584:	429a      	cmp	r2, r3
 800d586:	db20      	blt.n	800d5ca <__s2b+0x5e>
 800d588:	4630      	mov	r0, r6
 800d58a:	f7ff ff69 	bl	800d460 <_Balloc>
 800d58e:	9b08      	ldr	r3, [sp, #32]
 800d590:	6143      	str	r3, [r0, #20]
 800d592:	2d09      	cmp	r5, #9
 800d594:	f04f 0301 	mov.w	r3, #1
 800d598:	6103      	str	r3, [r0, #16]
 800d59a:	dd19      	ble.n	800d5d0 <__s2b+0x64>
 800d59c:	f104 0809 	add.w	r8, r4, #9
 800d5a0:	46c1      	mov	r9, r8
 800d5a2:	442c      	add	r4, r5
 800d5a4:	f819 3b01 	ldrb.w	r3, [r9], #1
 800d5a8:	4601      	mov	r1, r0
 800d5aa:	3b30      	subs	r3, #48	; 0x30
 800d5ac:	220a      	movs	r2, #10
 800d5ae:	4630      	mov	r0, r6
 800d5b0:	f7ff ffa1 	bl	800d4f6 <__multadd>
 800d5b4:	45a1      	cmp	r9, r4
 800d5b6:	d1f5      	bne.n	800d5a4 <__s2b+0x38>
 800d5b8:	eb08 0405 	add.w	r4, r8, r5
 800d5bc:	3c08      	subs	r4, #8
 800d5be:	1b2d      	subs	r5, r5, r4
 800d5c0:	1963      	adds	r3, r4, r5
 800d5c2:	42bb      	cmp	r3, r7
 800d5c4:	db07      	blt.n	800d5d6 <__s2b+0x6a>
 800d5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ca:	0052      	lsls	r2, r2, #1
 800d5cc:	3101      	adds	r1, #1
 800d5ce:	e7d9      	b.n	800d584 <__s2b+0x18>
 800d5d0:	340a      	adds	r4, #10
 800d5d2:	2509      	movs	r5, #9
 800d5d4:	e7f3      	b.n	800d5be <__s2b+0x52>
 800d5d6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d5da:	4601      	mov	r1, r0
 800d5dc:	3b30      	subs	r3, #48	; 0x30
 800d5de:	220a      	movs	r2, #10
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	f7ff ff88 	bl	800d4f6 <__multadd>
 800d5e6:	e7eb      	b.n	800d5c0 <__s2b+0x54>

0800d5e8 <__hi0bits>:
 800d5e8:	0c02      	lsrs	r2, r0, #16
 800d5ea:	0412      	lsls	r2, r2, #16
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	b9b2      	cbnz	r2, 800d61e <__hi0bits+0x36>
 800d5f0:	0403      	lsls	r3, r0, #16
 800d5f2:	2010      	movs	r0, #16
 800d5f4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d5f8:	bf04      	itt	eq
 800d5fa:	021b      	lsleq	r3, r3, #8
 800d5fc:	3008      	addeq	r0, #8
 800d5fe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d602:	bf04      	itt	eq
 800d604:	011b      	lsleq	r3, r3, #4
 800d606:	3004      	addeq	r0, #4
 800d608:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d60c:	bf04      	itt	eq
 800d60e:	009b      	lsleq	r3, r3, #2
 800d610:	3002      	addeq	r0, #2
 800d612:	2b00      	cmp	r3, #0
 800d614:	db06      	blt.n	800d624 <__hi0bits+0x3c>
 800d616:	005b      	lsls	r3, r3, #1
 800d618:	d503      	bpl.n	800d622 <__hi0bits+0x3a>
 800d61a:	3001      	adds	r0, #1
 800d61c:	4770      	bx	lr
 800d61e:	2000      	movs	r0, #0
 800d620:	e7e8      	b.n	800d5f4 <__hi0bits+0xc>
 800d622:	2020      	movs	r0, #32
 800d624:	4770      	bx	lr

0800d626 <__lo0bits>:
 800d626:	6803      	ldr	r3, [r0, #0]
 800d628:	f013 0207 	ands.w	r2, r3, #7
 800d62c:	4601      	mov	r1, r0
 800d62e:	d00b      	beq.n	800d648 <__lo0bits+0x22>
 800d630:	07da      	lsls	r2, r3, #31
 800d632:	d423      	bmi.n	800d67c <__lo0bits+0x56>
 800d634:	0798      	lsls	r0, r3, #30
 800d636:	bf49      	itett	mi
 800d638:	085b      	lsrmi	r3, r3, #1
 800d63a:	089b      	lsrpl	r3, r3, #2
 800d63c:	2001      	movmi	r0, #1
 800d63e:	600b      	strmi	r3, [r1, #0]
 800d640:	bf5c      	itt	pl
 800d642:	600b      	strpl	r3, [r1, #0]
 800d644:	2002      	movpl	r0, #2
 800d646:	4770      	bx	lr
 800d648:	b298      	uxth	r0, r3
 800d64a:	b9a8      	cbnz	r0, 800d678 <__lo0bits+0x52>
 800d64c:	0c1b      	lsrs	r3, r3, #16
 800d64e:	2010      	movs	r0, #16
 800d650:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d654:	bf04      	itt	eq
 800d656:	0a1b      	lsreq	r3, r3, #8
 800d658:	3008      	addeq	r0, #8
 800d65a:	071a      	lsls	r2, r3, #28
 800d65c:	bf04      	itt	eq
 800d65e:	091b      	lsreq	r3, r3, #4
 800d660:	3004      	addeq	r0, #4
 800d662:	079a      	lsls	r2, r3, #30
 800d664:	bf04      	itt	eq
 800d666:	089b      	lsreq	r3, r3, #2
 800d668:	3002      	addeq	r0, #2
 800d66a:	07da      	lsls	r2, r3, #31
 800d66c:	d402      	bmi.n	800d674 <__lo0bits+0x4e>
 800d66e:	085b      	lsrs	r3, r3, #1
 800d670:	d006      	beq.n	800d680 <__lo0bits+0x5a>
 800d672:	3001      	adds	r0, #1
 800d674:	600b      	str	r3, [r1, #0]
 800d676:	4770      	bx	lr
 800d678:	4610      	mov	r0, r2
 800d67a:	e7e9      	b.n	800d650 <__lo0bits+0x2a>
 800d67c:	2000      	movs	r0, #0
 800d67e:	4770      	bx	lr
 800d680:	2020      	movs	r0, #32
 800d682:	4770      	bx	lr

0800d684 <__i2b>:
 800d684:	b510      	push	{r4, lr}
 800d686:	460c      	mov	r4, r1
 800d688:	2101      	movs	r1, #1
 800d68a:	f7ff fee9 	bl	800d460 <_Balloc>
 800d68e:	2201      	movs	r2, #1
 800d690:	6144      	str	r4, [r0, #20]
 800d692:	6102      	str	r2, [r0, #16]
 800d694:	bd10      	pop	{r4, pc}

0800d696 <__multiply>:
 800d696:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d69a:	4614      	mov	r4, r2
 800d69c:	690a      	ldr	r2, [r1, #16]
 800d69e:	6923      	ldr	r3, [r4, #16]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	bfb8      	it	lt
 800d6a4:	460b      	movlt	r3, r1
 800d6a6:	4688      	mov	r8, r1
 800d6a8:	bfbc      	itt	lt
 800d6aa:	46a0      	movlt	r8, r4
 800d6ac:	461c      	movlt	r4, r3
 800d6ae:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d6b2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d6b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d6ba:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d6be:	eb07 0609 	add.w	r6, r7, r9
 800d6c2:	42b3      	cmp	r3, r6
 800d6c4:	bfb8      	it	lt
 800d6c6:	3101      	addlt	r1, #1
 800d6c8:	f7ff feca 	bl	800d460 <_Balloc>
 800d6cc:	f100 0514 	add.w	r5, r0, #20
 800d6d0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d6d4:	462b      	mov	r3, r5
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	4573      	cmp	r3, lr
 800d6da:	d316      	bcc.n	800d70a <__multiply+0x74>
 800d6dc:	f104 0214 	add.w	r2, r4, #20
 800d6e0:	f108 0114 	add.w	r1, r8, #20
 800d6e4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d6e8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d6ec:	9300      	str	r3, [sp, #0]
 800d6ee:	9b00      	ldr	r3, [sp, #0]
 800d6f0:	9201      	str	r2, [sp, #4]
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d80c      	bhi.n	800d710 <__multiply+0x7a>
 800d6f6:	2e00      	cmp	r6, #0
 800d6f8:	dd03      	ble.n	800d702 <__multiply+0x6c>
 800d6fa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d05d      	beq.n	800d7be <__multiply+0x128>
 800d702:	6106      	str	r6, [r0, #16]
 800d704:	b003      	add	sp, #12
 800d706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d70a:	f843 2b04 	str.w	r2, [r3], #4
 800d70e:	e7e3      	b.n	800d6d8 <__multiply+0x42>
 800d710:	f8b2 b000 	ldrh.w	fp, [r2]
 800d714:	f1bb 0f00 	cmp.w	fp, #0
 800d718:	d023      	beq.n	800d762 <__multiply+0xcc>
 800d71a:	4689      	mov	r9, r1
 800d71c:	46ac      	mov	ip, r5
 800d71e:	f04f 0800 	mov.w	r8, #0
 800d722:	f859 4b04 	ldr.w	r4, [r9], #4
 800d726:	f8dc a000 	ldr.w	sl, [ip]
 800d72a:	b2a3      	uxth	r3, r4
 800d72c:	fa1f fa8a 	uxth.w	sl, sl
 800d730:	fb0b a303 	mla	r3, fp, r3, sl
 800d734:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d738:	f8dc 4000 	ldr.w	r4, [ip]
 800d73c:	4443      	add	r3, r8
 800d73e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d742:	fb0b 840a 	mla	r4, fp, sl, r8
 800d746:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d74a:	46e2      	mov	sl, ip
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d752:	454f      	cmp	r7, r9
 800d754:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d758:	f84a 3b04 	str.w	r3, [sl], #4
 800d75c:	d82b      	bhi.n	800d7b6 <__multiply+0x120>
 800d75e:	f8cc 8004 	str.w	r8, [ip, #4]
 800d762:	9b01      	ldr	r3, [sp, #4]
 800d764:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d768:	3204      	adds	r2, #4
 800d76a:	f1ba 0f00 	cmp.w	sl, #0
 800d76e:	d020      	beq.n	800d7b2 <__multiply+0x11c>
 800d770:	682b      	ldr	r3, [r5, #0]
 800d772:	4689      	mov	r9, r1
 800d774:	46a8      	mov	r8, r5
 800d776:	f04f 0b00 	mov.w	fp, #0
 800d77a:	f8b9 c000 	ldrh.w	ip, [r9]
 800d77e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d782:	fb0a 440c 	mla	r4, sl, ip, r4
 800d786:	445c      	add	r4, fp
 800d788:	46c4      	mov	ip, r8
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d790:	f84c 3b04 	str.w	r3, [ip], #4
 800d794:	f859 3b04 	ldr.w	r3, [r9], #4
 800d798:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d79c:	0c1b      	lsrs	r3, r3, #16
 800d79e:	fb0a b303 	mla	r3, sl, r3, fp
 800d7a2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d7a6:	454f      	cmp	r7, r9
 800d7a8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d7ac:	d805      	bhi.n	800d7ba <__multiply+0x124>
 800d7ae:	f8c8 3004 	str.w	r3, [r8, #4]
 800d7b2:	3504      	adds	r5, #4
 800d7b4:	e79b      	b.n	800d6ee <__multiply+0x58>
 800d7b6:	46d4      	mov	ip, sl
 800d7b8:	e7b3      	b.n	800d722 <__multiply+0x8c>
 800d7ba:	46e0      	mov	r8, ip
 800d7bc:	e7dd      	b.n	800d77a <__multiply+0xe4>
 800d7be:	3e01      	subs	r6, #1
 800d7c0:	e799      	b.n	800d6f6 <__multiply+0x60>
	...

0800d7c4 <__pow5mult>:
 800d7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7c8:	4615      	mov	r5, r2
 800d7ca:	f012 0203 	ands.w	r2, r2, #3
 800d7ce:	4606      	mov	r6, r0
 800d7d0:	460f      	mov	r7, r1
 800d7d2:	d007      	beq.n	800d7e4 <__pow5mult+0x20>
 800d7d4:	3a01      	subs	r2, #1
 800d7d6:	4c21      	ldr	r4, [pc, #132]	; (800d85c <__pow5mult+0x98>)
 800d7d8:	2300      	movs	r3, #0
 800d7da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d7de:	f7ff fe8a 	bl	800d4f6 <__multadd>
 800d7e2:	4607      	mov	r7, r0
 800d7e4:	10ad      	asrs	r5, r5, #2
 800d7e6:	d035      	beq.n	800d854 <__pow5mult+0x90>
 800d7e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d7ea:	b93c      	cbnz	r4, 800d7fc <__pow5mult+0x38>
 800d7ec:	2010      	movs	r0, #16
 800d7ee:	f7ff fe2f 	bl	800d450 <malloc>
 800d7f2:	6270      	str	r0, [r6, #36]	; 0x24
 800d7f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7f8:	6004      	str	r4, [r0, #0]
 800d7fa:	60c4      	str	r4, [r0, #12]
 800d7fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d800:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d804:	b94c      	cbnz	r4, 800d81a <__pow5mult+0x56>
 800d806:	f240 2171 	movw	r1, #625	; 0x271
 800d80a:	4630      	mov	r0, r6
 800d80c:	f7ff ff3a 	bl	800d684 <__i2b>
 800d810:	2300      	movs	r3, #0
 800d812:	f8c8 0008 	str.w	r0, [r8, #8]
 800d816:	4604      	mov	r4, r0
 800d818:	6003      	str	r3, [r0, #0]
 800d81a:	f04f 0800 	mov.w	r8, #0
 800d81e:	07eb      	lsls	r3, r5, #31
 800d820:	d50a      	bpl.n	800d838 <__pow5mult+0x74>
 800d822:	4639      	mov	r1, r7
 800d824:	4622      	mov	r2, r4
 800d826:	4630      	mov	r0, r6
 800d828:	f7ff ff35 	bl	800d696 <__multiply>
 800d82c:	4639      	mov	r1, r7
 800d82e:	4681      	mov	r9, r0
 800d830:	4630      	mov	r0, r6
 800d832:	f7ff fe49 	bl	800d4c8 <_Bfree>
 800d836:	464f      	mov	r7, r9
 800d838:	106d      	asrs	r5, r5, #1
 800d83a:	d00b      	beq.n	800d854 <__pow5mult+0x90>
 800d83c:	6820      	ldr	r0, [r4, #0]
 800d83e:	b938      	cbnz	r0, 800d850 <__pow5mult+0x8c>
 800d840:	4622      	mov	r2, r4
 800d842:	4621      	mov	r1, r4
 800d844:	4630      	mov	r0, r6
 800d846:	f7ff ff26 	bl	800d696 <__multiply>
 800d84a:	6020      	str	r0, [r4, #0]
 800d84c:	f8c0 8000 	str.w	r8, [r0]
 800d850:	4604      	mov	r4, r0
 800d852:	e7e4      	b.n	800d81e <__pow5mult+0x5a>
 800d854:	4638      	mov	r0, r7
 800d856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d85a:	bf00      	nop
 800d85c:	0800edc0 	.word	0x0800edc0

0800d860 <__lshift>:
 800d860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d864:	460c      	mov	r4, r1
 800d866:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d86a:	6923      	ldr	r3, [r4, #16]
 800d86c:	6849      	ldr	r1, [r1, #4]
 800d86e:	eb0a 0903 	add.w	r9, sl, r3
 800d872:	68a3      	ldr	r3, [r4, #8]
 800d874:	4607      	mov	r7, r0
 800d876:	4616      	mov	r6, r2
 800d878:	f109 0501 	add.w	r5, r9, #1
 800d87c:	42ab      	cmp	r3, r5
 800d87e:	db32      	blt.n	800d8e6 <__lshift+0x86>
 800d880:	4638      	mov	r0, r7
 800d882:	f7ff fded 	bl	800d460 <_Balloc>
 800d886:	2300      	movs	r3, #0
 800d888:	4680      	mov	r8, r0
 800d88a:	f100 0114 	add.w	r1, r0, #20
 800d88e:	461a      	mov	r2, r3
 800d890:	4553      	cmp	r3, sl
 800d892:	db2b      	blt.n	800d8ec <__lshift+0x8c>
 800d894:	6920      	ldr	r0, [r4, #16]
 800d896:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d89a:	f104 0314 	add.w	r3, r4, #20
 800d89e:	f016 021f 	ands.w	r2, r6, #31
 800d8a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d8a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d8aa:	d025      	beq.n	800d8f8 <__lshift+0x98>
 800d8ac:	f1c2 0e20 	rsb	lr, r2, #32
 800d8b0:	2000      	movs	r0, #0
 800d8b2:	681e      	ldr	r6, [r3, #0]
 800d8b4:	468a      	mov	sl, r1
 800d8b6:	4096      	lsls	r6, r2
 800d8b8:	4330      	orrs	r0, r6
 800d8ba:	f84a 0b04 	str.w	r0, [sl], #4
 800d8be:	f853 0b04 	ldr.w	r0, [r3], #4
 800d8c2:	459c      	cmp	ip, r3
 800d8c4:	fa20 f00e 	lsr.w	r0, r0, lr
 800d8c8:	d814      	bhi.n	800d8f4 <__lshift+0x94>
 800d8ca:	6048      	str	r0, [r1, #4]
 800d8cc:	b108      	cbz	r0, 800d8d2 <__lshift+0x72>
 800d8ce:	f109 0502 	add.w	r5, r9, #2
 800d8d2:	3d01      	subs	r5, #1
 800d8d4:	4638      	mov	r0, r7
 800d8d6:	f8c8 5010 	str.w	r5, [r8, #16]
 800d8da:	4621      	mov	r1, r4
 800d8dc:	f7ff fdf4 	bl	800d4c8 <_Bfree>
 800d8e0:	4640      	mov	r0, r8
 800d8e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8e6:	3101      	adds	r1, #1
 800d8e8:	005b      	lsls	r3, r3, #1
 800d8ea:	e7c7      	b.n	800d87c <__lshift+0x1c>
 800d8ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	e7cd      	b.n	800d890 <__lshift+0x30>
 800d8f4:	4651      	mov	r1, sl
 800d8f6:	e7dc      	b.n	800d8b2 <__lshift+0x52>
 800d8f8:	3904      	subs	r1, #4
 800d8fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8fe:	f841 2f04 	str.w	r2, [r1, #4]!
 800d902:	459c      	cmp	ip, r3
 800d904:	d8f9      	bhi.n	800d8fa <__lshift+0x9a>
 800d906:	e7e4      	b.n	800d8d2 <__lshift+0x72>

0800d908 <__mcmp>:
 800d908:	6903      	ldr	r3, [r0, #16]
 800d90a:	690a      	ldr	r2, [r1, #16]
 800d90c:	1a9b      	subs	r3, r3, r2
 800d90e:	b530      	push	{r4, r5, lr}
 800d910:	d10c      	bne.n	800d92c <__mcmp+0x24>
 800d912:	0092      	lsls	r2, r2, #2
 800d914:	3014      	adds	r0, #20
 800d916:	3114      	adds	r1, #20
 800d918:	1884      	adds	r4, r0, r2
 800d91a:	4411      	add	r1, r2
 800d91c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d920:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d924:	4295      	cmp	r5, r2
 800d926:	d003      	beq.n	800d930 <__mcmp+0x28>
 800d928:	d305      	bcc.n	800d936 <__mcmp+0x2e>
 800d92a:	2301      	movs	r3, #1
 800d92c:	4618      	mov	r0, r3
 800d92e:	bd30      	pop	{r4, r5, pc}
 800d930:	42a0      	cmp	r0, r4
 800d932:	d3f3      	bcc.n	800d91c <__mcmp+0x14>
 800d934:	e7fa      	b.n	800d92c <__mcmp+0x24>
 800d936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d93a:	e7f7      	b.n	800d92c <__mcmp+0x24>

0800d93c <__mdiff>:
 800d93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d940:	460d      	mov	r5, r1
 800d942:	4607      	mov	r7, r0
 800d944:	4611      	mov	r1, r2
 800d946:	4628      	mov	r0, r5
 800d948:	4614      	mov	r4, r2
 800d94a:	f7ff ffdd 	bl	800d908 <__mcmp>
 800d94e:	1e06      	subs	r6, r0, #0
 800d950:	d108      	bne.n	800d964 <__mdiff+0x28>
 800d952:	4631      	mov	r1, r6
 800d954:	4638      	mov	r0, r7
 800d956:	f7ff fd83 	bl	800d460 <_Balloc>
 800d95a:	2301      	movs	r3, #1
 800d95c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d964:	bfa4      	itt	ge
 800d966:	4623      	movge	r3, r4
 800d968:	462c      	movge	r4, r5
 800d96a:	4638      	mov	r0, r7
 800d96c:	6861      	ldr	r1, [r4, #4]
 800d96e:	bfa6      	itte	ge
 800d970:	461d      	movge	r5, r3
 800d972:	2600      	movge	r6, #0
 800d974:	2601      	movlt	r6, #1
 800d976:	f7ff fd73 	bl	800d460 <_Balloc>
 800d97a:	692b      	ldr	r3, [r5, #16]
 800d97c:	60c6      	str	r6, [r0, #12]
 800d97e:	6926      	ldr	r6, [r4, #16]
 800d980:	f105 0914 	add.w	r9, r5, #20
 800d984:	f104 0214 	add.w	r2, r4, #20
 800d988:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d98c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d990:	f100 0514 	add.w	r5, r0, #20
 800d994:	f04f 0e00 	mov.w	lr, #0
 800d998:	f852 ab04 	ldr.w	sl, [r2], #4
 800d99c:	f859 4b04 	ldr.w	r4, [r9], #4
 800d9a0:	fa1e f18a 	uxtah	r1, lr, sl
 800d9a4:	b2a3      	uxth	r3, r4
 800d9a6:	1ac9      	subs	r1, r1, r3
 800d9a8:	0c23      	lsrs	r3, r4, #16
 800d9aa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d9ae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d9b2:	b289      	uxth	r1, r1
 800d9b4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d9b8:	45c8      	cmp	r8, r9
 800d9ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d9be:	4694      	mov	ip, r2
 800d9c0:	f845 3b04 	str.w	r3, [r5], #4
 800d9c4:	d8e8      	bhi.n	800d998 <__mdiff+0x5c>
 800d9c6:	45bc      	cmp	ip, r7
 800d9c8:	d304      	bcc.n	800d9d4 <__mdiff+0x98>
 800d9ca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d9ce:	b183      	cbz	r3, 800d9f2 <__mdiff+0xb6>
 800d9d0:	6106      	str	r6, [r0, #16]
 800d9d2:	e7c5      	b.n	800d960 <__mdiff+0x24>
 800d9d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d9d8:	fa1e f381 	uxtah	r3, lr, r1
 800d9dc:	141a      	asrs	r2, r3, #16
 800d9de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d9e2:	b29b      	uxth	r3, r3
 800d9e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9e8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d9ec:	f845 3b04 	str.w	r3, [r5], #4
 800d9f0:	e7e9      	b.n	800d9c6 <__mdiff+0x8a>
 800d9f2:	3e01      	subs	r6, #1
 800d9f4:	e7e9      	b.n	800d9ca <__mdiff+0x8e>
	...

0800d9f8 <__ulp>:
 800d9f8:	4b12      	ldr	r3, [pc, #72]	; (800da44 <__ulp+0x4c>)
 800d9fa:	ee10 2a90 	vmov	r2, s1
 800d9fe:	401a      	ands	r2, r3
 800da00:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800da04:	2b00      	cmp	r3, #0
 800da06:	dd04      	ble.n	800da12 <__ulp+0x1a>
 800da08:	2000      	movs	r0, #0
 800da0a:	4619      	mov	r1, r3
 800da0c:	ec41 0b10 	vmov	d0, r0, r1
 800da10:	4770      	bx	lr
 800da12:	425b      	negs	r3, r3
 800da14:	151b      	asrs	r3, r3, #20
 800da16:	2b13      	cmp	r3, #19
 800da18:	f04f 0000 	mov.w	r0, #0
 800da1c:	f04f 0100 	mov.w	r1, #0
 800da20:	dc04      	bgt.n	800da2c <__ulp+0x34>
 800da22:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800da26:	fa42 f103 	asr.w	r1, r2, r3
 800da2a:	e7ef      	b.n	800da0c <__ulp+0x14>
 800da2c:	3b14      	subs	r3, #20
 800da2e:	2b1e      	cmp	r3, #30
 800da30:	f04f 0201 	mov.w	r2, #1
 800da34:	bfda      	itte	le
 800da36:	f1c3 031f 	rsble	r3, r3, #31
 800da3a:	fa02 f303 	lslle.w	r3, r2, r3
 800da3e:	4613      	movgt	r3, r2
 800da40:	4618      	mov	r0, r3
 800da42:	e7e3      	b.n	800da0c <__ulp+0x14>
 800da44:	7ff00000 	.word	0x7ff00000

0800da48 <__b2d>:
 800da48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da4a:	6905      	ldr	r5, [r0, #16]
 800da4c:	f100 0714 	add.w	r7, r0, #20
 800da50:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800da54:	1f2e      	subs	r6, r5, #4
 800da56:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800da5a:	4620      	mov	r0, r4
 800da5c:	f7ff fdc4 	bl	800d5e8 <__hi0bits>
 800da60:	f1c0 0320 	rsb	r3, r0, #32
 800da64:	280a      	cmp	r0, #10
 800da66:	600b      	str	r3, [r1, #0]
 800da68:	f8df c074 	ldr.w	ip, [pc, #116]	; 800dae0 <__b2d+0x98>
 800da6c:	dc14      	bgt.n	800da98 <__b2d+0x50>
 800da6e:	f1c0 0e0b 	rsb	lr, r0, #11
 800da72:	fa24 f10e 	lsr.w	r1, r4, lr
 800da76:	42b7      	cmp	r7, r6
 800da78:	ea41 030c 	orr.w	r3, r1, ip
 800da7c:	bf34      	ite	cc
 800da7e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800da82:	2100      	movcs	r1, #0
 800da84:	3015      	adds	r0, #21
 800da86:	fa04 f000 	lsl.w	r0, r4, r0
 800da8a:	fa21 f10e 	lsr.w	r1, r1, lr
 800da8e:	ea40 0201 	orr.w	r2, r0, r1
 800da92:	ec43 2b10 	vmov	d0, r2, r3
 800da96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da98:	42b7      	cmp	r7, r6
 800da9a:	bf3a      	itte	cc
 800da9c:	f1a5 0608 	subcc.w	r6, r5, #8
 800daa0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800daa4:	2100      	movcs	r1, #0
 800daa6:	380b      	subs	r0, #11
 800daa8:	d015      	beq.n	800dad6 <__b2d+0x8e>
 800daaa:	4084      	lsls	r4, r0
 800daac:	f1c0 0520 	rsb	r5, r0, #32
 800dab0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800dab4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800dab8:	42be      	cmp	r6, r7
 800daba:	fa21 fc05 	lsr.w	ip, r1, r5
 800dabe:	ea44 030c 	orr.w	r3, r4, ip
 800dac2:	bf8c      	ite	hi
 800dac4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dac8:	2400      	movls	r4, #0
 800daca:	fa01 f000 	lsl.w	r0, r1, r0
 800dace:	40ec      	lsrs	r4, r5
 800dad0:	ea40 0204 	orr.w	r2, r0, r4
 800dad4:	e7dd      	b.n	800da92 <__b2d+0x4a>
 800dad6:	ea44 030c 	orr.w	r3, r4, ip
 800dada:	460a      	mov	r2, r1
 800dadc:	e7d9      	b.n	800da92 <__b2d+0x4a>
 800dade:	bf00      	nop
 800dae0:	3ff00000 	.word	0x3ff00000

0800dae4 <__d2b>:
 800dae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dae8:	460e      	mov	r6, r1
 800daea:	2101      	movs	r1, #1
 800daec:	ec59 8b10 	vmov	r8, r9, d0
 800daf0:	4615      	mov	r5, r2
 800daf2:	f7ff fcb5 	bl	800d460 <_Balloc>
 800daf6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800dafa:	4607      	mov	r7, r0
 800dafc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db00:	bb34      	cbnz	r4, 800db50 <__d2b+0x6c>
 800db02:	9301      	str	r3, [sp, #4]
 800db04:	f1b8 0300 	subs.w	r3, r8, #0
 800db08:	d027      	beq.n	800db5a <__d2b+0x76>
 800db0a:	a802      	add	r0, sp, #8
 800db0c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800db10:	f7ff fd89 	bl	800d626 <__lo0bits>
 800db14:	9900      	ldr	r1, [sp, #0]
 800db16:	b1f0      	cbz	r0, 800db56 <__d2b+0x72>
 800db18:	9a01      	ldr	r2, [sp, #4]
 800db1a:	f1c0 0320 	rsb	r3, r0, #32
 800db1e:	fa02 f303 	lsl.w	r3, r2, r3
 800db22:	430b      	orrs	r3, r1
 800db24:	40c2      	lsrs	r2, r0
 800db26:	617b      	str	r3, [r7, #20]
 800db28:	9201      	str	r2, [sp, #4]
 800db2a:	9b01      	ldr	r3, [sp, #4]
 800db2c:	61bb      	str	r3, [r7, #24]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	bf14      	ite	ne
 800db32:	2102      	movne	r1, #2
 800db34:	2101      	moveq	r1, #1
 800db36:	6139      	str	r1, [r7, #16]
 800db38:	b1c4      	cbz	r4, 800db6c <__d2b+0x88>
 800db3a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800db3e:	4404      	add	r4, r0
 800db40:	6034      	str	r4, [r6, #0]
 800db42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800db46:	6028      	str	r0, [r5, #0]
 800db48:	4638      	mov	r0, r7
 800db4a:	b003      	add	sp, #12
 800db4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db54:	e7d5      	b.n	800db02 <__d2b+0x1e>
 800db56:	6179      	str	r1, [r7, #20]
 800db58:	e7e7      	b.n	800db2a <__d2b+0x46>
 800db5a:	a801      	add	r0, sp, #4
 800db5c:	f7ff fd63 	bl	800d626 <__lo0bits>
 800db60:	9b01      	ldr	r3, [sp, #4]
 800db62:	617b      	str	r3, [r7, #20]
 800db64:	2101      	movs	r1, #1
 800db66:	6139      	str	r1, [r7, #16]
 800db68:	3020      	adds	r0, #32
 800db6a:	e7e5      	b.n	800db38 <__d2b+0x54>
 800db6c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800db70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800db74:	6030      	str	r0, [r6, #0]
 800db76:	6918      	ldr	r0, [r3, #16]
 800db78:	f7ff fd36 	bl	800d5e8 <__hi0bits>
 800db7c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800db80:	e7e1      	b.n	800db46 <__d2b+0x62>

0800db82 <__ratio>:
 800db82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db86:	4688      	mov	r8, r1
 800db88:	4669      	mov	r1, sp
 800db8a:	4681      	mov	r9, r0
 800db8c:	f7ff ff5c 	bl	800da48 <__b2d>
 800db90:	a901      	add	r1, sp, #4
 800db92:	4640      	mov	r0, r8
 800db94:	ec57 6b10 	vmov	r6, r7, d0
 800db98:	f7ff ff56 	bl	800da48 <__b2d>
 800db9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dba0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dba4:	eba3 0c02 	sub.w	ip, r3, r2
 800dba8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dbac:	1a9b      	subs	r3, r3, r2
 800dbae:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dbb2:	ec5b ab10 	vmov	sl, fp, d0
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	bfce      	itee	gt
 800dbba:	463a      	movgt	r2, r7
 800dbbc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dbc0:	465a      	movle	r2, fp
 800dbc2:	4659      	mov	r1, fp
 800dbc4:	463d      	mov	r5, r7
 800dbc6:	bfd4      	ite	le
 800dbc8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800dbcc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800dbd0:	4630      	mov	r0, r6
 800dbd2:	ee10 2a10 	vmov	r2, s0
 800dbd6:	460b      	mov	r3, r1
 800dbd8:	4629      	mov	r1, r5
 800dbda:	f7f2 fe3f 	bl	800085c <__aeabi_ddiv>
 800dbde:	ec41 0b10 	vmov	d0, r0, r1
 800dbe2:	b003      	add	sp, #12
 800dbe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dbe8 <__copybits>:
 800dbe8:	3901      	subs	r1, #1
 800dbea:	b510      	push	{r4, lr}
 800dbec:	1149      	asrs	r1, r1, #5
 800dbee:	6914      	ldr	r4, [r2, #16]
 800dbf0:	3101      	adds	r1, #1
 800dbf2:	f102 0314 	add.w	r3, r2, #20
 800dbf6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dbfa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dbfe:	42a3      	cmp	r3, r4
 800dc00:	4602      	mov	r2, r0
 800dc02:	d303      	bcc.n	800dc0c <__copybits+0x24>
 800dc04:	2300      	movs	r3, #0
 800dc06:	428a      	cmp	r2, r1
 800dc08:	d305      	bcc.n	800dc16 <__copybits+0x2e>
 800dc0a:	bd10      	pop	{r4, pc}
 800dc0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc10:	f840 2b04 	str.w	r2, [r0], #4
 800dc14:	e7f3      	b.n	800dbfe <__copybits+0x16>
 800dc16:	f842 3b04 	str.w	r3, [r2], #4
 800dc1a:	e7f4      	b.n	800dc06 <__copybits+0x1e>

0800dc1c <__any_on>:
 800dc1c:	f100 0214 	add.w	r2, r0, #20
 800dc20:	6900      	ldr	r0, [r0, #16]
 800dc22:	114b      	asrs	r3, r1, #5
 800dc24:	4298      	cmp	r0, r3
 800dc26:	b510      	push	{r4, lr}
 800dc28:	db11      	blt.n	800dc4e <__any_on+0x32>
 800dc2a:	dd0a      	ble.n	800dc42 <__any_on+0x26>
 800dc2c:	f011 011f 	ands.w	r1, r1, #31
 800dc30:	d007      	beq.n	800dc42 <__any_on+0x26>
 800dc32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dc36:	fa24 f001 	lsr.w	r0, r4, r1
 800dc3a:	fa00 f101 	lsl.w	r1, r0, r1
 800dc3e:	428c      	cmp	r4, r1
 800dc40:	d10b      	bne.n	800dc5a <__any_on+0x3e>
 800dc42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d803      	bhi.n	800dc52 <__any_on+0x36>
 800dc4a:	2000      	movs	r0, #0
 800dc4c:	bd10      	pop	{r4, pc}
 800dc4e:	4603      	mov	r3, r0
 800dc50:	e7f7      	b.n	800dc42 <__any_on+0x26>
 800dc52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc56:	2900      	cmp	r1, #0
 800dc58:	d0f5      	beq.n	800dc46 <__any_on+0x2a>
 800dc5a:	2001      	movs	r0, #1
 800dc5c:	e7f6      	b.n	800dc4c <__any_on+0x30>

0800dc5e <_calloc_r>:
 800dc5e:	b538      	push	{r3, r4, r5, lr}
 800dc60:	fb02 f401 	mul.w	r4, r2, r1
 800dc64:	4621      	mov	r1, r4
 800dc66:	f000 f857 	bl	800dd18 <_malloc_r>
 800dc6a:	4605      	mov	r5, r0
 800dc6c:	b118      	cbz	r0, 800dc76 <_calloc_r+0x18>
 800dc6e:	4622      	mov	r2, r4
 800dc70:	2100      	movs	r1, #0
 800dc72:	f7fc fa31 	bl	800a0d8 <memset>
 800dc76:	4628      	mov	r0, r5
 800dc78:	bd38      	pop	{r3, r4, r5, pc}
	...

0800dc7c <_free_r>:
 800dc7c:	b538      	push	{r3, r4, r5, lr}
 800dc7e:	4605      	mov	r5, r0
 800dc80:	2900      	cmp	r1, #0
 800dc82:	d045      	beq.n	800dd10 <_free_r+0x94>
 800dc84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc88:	1f0c      	subs	r4, r1, #4
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	bfb8      	it	lt
 800dc8e:	18e4      	addlt	r4, r4, r3
 800dc90:	f000 fc03 	bl	800e49a <__malloc_lock>
 800dc94:	4a1f      	ldr	r2, [pc, #124]	; (800dd14 <_free_r+0x98>)
 800dc96:	6813      	ldr	r3, [r2, #0]
 800dc98:	4610      	mov	r0, r2
 800dc9a:	b933      	cbnz	r3, 800dcaa <_free_r+0x2e>
 800dc9c:	6063      	str	r3, [r4, #4]
 800dc9e:	6014      	str	r4, [r2, #0]
 800dca0:	4628      	mov	r0, r5
 800dca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dca6:	f000 bbf9 	b.w	800e49c <__malloc_unlock>
 800dcaa:	42a3      	cmp	r3, r4
 800dcac:	d90c      	bls.n	800dcc8 <_free_r+0x4c>
 800dcae:	6821      	ldr	r1, [r4, #0]
 800dcb0:	1862      	adds	r2, r4, r1
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	bf04      	itt	eq
 800dcb6:	681a      	ldreq	r2, [r3, #0]
 800dcb8:	685b      	ldreq	r3, [r3, #4]
 800dcba:	6063      	str	r3, [r4, #4]
 800dcbc:	bf04      	itt	eq
 800dcbe:	1852      	addeq	r2, r2, r1
 800dcc0:	6022      	streq	r2, [r4, #0]
 800dcc2:	6004      	str	r4, [r0, #0]
 800dcc4:	e7ec      	b.n	800dca0 <_free_r+0x24>
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	685a      	ldr	r2, [r3, #4]
 800dcca:	b10a      	cbz	r2, 800dcd0 <_free_r+0x54>
 800dccc:	42a2      	cmp	r2, r4
 800dcce:	d9fa      	bls.n	800dcc6 <_free_r+0x4a>
 800dcd0:	6819      	ldr	r1, [r3, #0]
 800dcd2:	1858      	adds	r0, r3, r1
 800dcd4:	42a0      	cmp	r0, r4
 800dcd6:	d10b      	bne.n	800dcf0 <_free_r+0x74>
 800dcd8:	6820      	ldr	r0, [r4, #0]
 800dcda:	4401      	add	r1, r0
 800dcdc:	1858      	adds	r0, r3, r1
 800dcde:	4282      	cmp	r2, r0
 800dce0:	6019      	str	r1, [r3, #0]
 800dce2:	d1dd      	bne.n	800dca0 <_free_r+0x24>
 800dce4:	6810      	ldr	r0, [r2, #0]
 800dce6:	6852      	ldr	r2, [r2, #4]
 800dce8:	605a      	str	r2, [r3, #4]
 800dcea:	4401      	add	r1, r0
 800dcec:	6019      	str	r1, [r3, #0]
 800dcee:	e7d7      	b.n	800dca0 <_free_r+0x24>
 800dcf0:	d902      	bls.n	800dcf8 <_free_r+0x7c>
 800dcf2:	230c      	movs	r3, #12
 800dcf4:	602b      	str	r3, [r5, #0]
 800dcf6:	e7d3      	b.n	800dca0 <_free_r+0x24>
 800dcf8:	6820      	ldr	r0, [r4, #0]
 800dcfa:	1821      	adds	r1, r4, r0
 800dcfc:	428a      	cmp	r2, r1
 800dcfe:	bf04      	itt	eq
 800dd00:	6811      	ldreq	r1, [r2, #0]
 800dd02:	6852      	ldreq	r2, [r2, #4]
 800dd04:	6062      	str	r2, [r4, #4]
 800dd06:	bf04      	itt	eq
 800dd08:	1809      	addeq	r1, r1, r0
 800dd0a:	6021      	streq	r1, [r4, #0]
 800dd0c:	605c      	str	r4, [r3, #4]
 800dd0e:	e7c7      	b.n	800dca0 <_free_r+0x24>
 800dd10:	bd38      	pop	{r3, r4, r5, pc}
 800dd12:	bf00      	nop
 800dd14:	20004360 	.word	0x20004360

0800dd18 <_malloc_r>:
 800dd18:	b570      	push	{r4, r5, r6, lr}
 800dd1a:	1ccd      	adds	r5, r1, #3
 800dd1c:	f025 0503 	bic.w	r5, r5, #3
 800dd20:	3508      	adds	r5, #8
 800dd22:	2d0c      	cmp	r5, #12
 800dd24:	bf38      	it	cc
 800dd26:	250c      	movcc	r5, #12
 800dd28:	2d00      	cmp	r5, #0
 800dd2a:	4606      	mov	r6, r0
 800dd2c:	db01      	blt.n	800dd32 <_malloc_r+0x1a>
 800dd2e:	42a9      	cmp	r1, r5
 800dd30:	d903      	bls.n	800dd3a <_malloc_r+0x22>
 800dd32:	230c      	movs	r3, #12
 800dd34:	6033      	str	r3, [r6, #0]
 800dd36:	2000      	movs	r0, #0
 800dd38:	bd70      	pop	{r4, r5, r6, pc}
 800dd3a:	f000 fbae 	bl	800e49a <__malloc_lock>
 800dd3e:	4a21      	ldr	r2, [pc, #132]	; (800ddc4 <_malloc_r+0xac>)
 800dd40:	6814      	ldr	r4, [r2, #0]
 800dd42:	4621      	mov	r1, r4
 800dd44:	b991      	cbnz	r1, 800dd6c <_malloc_r+0x54>
 800dd46:	4c20      	ldr	r4, [pc, #128]	; (800ddc8 <_malloc_r+0xb0>)
 800dd48:	6823      	ldr	r3, [r4, #0]
 800dd4a:	b91b      	cbnz	r3, 800dd54 <_malloc_r+0x3c>
 800dd4c:	4630      	mov	r0, r6
 800dd4e:	f000 facf 	bl	800e2f0 <_sbrk_r>
 800dd52:	6020      	str	r0, [r4, #0]
 800dd54:	4629      	mov	r1, r5
 800dd56:	4630      	mov	r0, r6
 800dd58:	f000 faca 	bl	800e2f0 <_sbrk_r>
 800dd5c:	1c43      	adds	r3, r0, #1
 800dd5e:	d124      	bne.n	800ddaa <_malloc_r+0x92>
 800dd60:	230c      	movs	r3, #12
 800dd62:	6033      	str	r3, [r6, #0]
 800dd64:	4630      	mov	r0, r6
 800dd66:	f000 fb99 	bl	800e49c <__malloc_unlock>
 800dd6a:	e7e4      	b.n	800dd36 <_malloc_r+0x1e>
 800dd6c:	680b      	ldr	r3, [r1, #0]
 800dd6e:	1b5b      	subs	r3, r3, r5
 800dd70:	d418      	bmi.n	800dda4 <_malloc_r+0x8c>
 800dd72:	2b0b      	cmp	r3, #11
 800dd74:	d90f      	bls.n	800dd96 <_malloc_r+0x7e>
 800dd76:	600b      	str	r3, [r1, #0]
 800dd78:	50cd      	str	r5, [r1, r3]
 800dd7a:	18cc      	adds	r4, r1, r3
 800dd7c:	4630      	mov	r0, r6
 800dd7e:	f000 fb8d 	bl	800e49c <__malloc_unlock>
 800dd82:	f104 000b 	add.w	r0, r4, #11
 800dd86:	1d23      	adds	r3, r4, #4
 800dd88:	f020 0007 	bic.w	r0, r0, #7
 800dd8c:	1ac3      	subs	r3, r0, r3
 800dd8e:	d0d3      	beq.n	800dd38 <_malloc_r+0x20>
 800dd90:	425a      	negs	r2, r3
 800dd92:	50e2      	str	r2, [r4, r3]
 800dd94:	e7d0      	b.n	800dd38 <_malloc_r+0x20>
 800dd96:	428c      	cmp	r4, r1
 800dd98:	684b      	ldr	r3, [r1, #4]
 800dd9a:	bf16      	itet	ne
 800dd9c:	6063      	strne	r3, [r4, #4]
 800dd9e:	6013      	streq	r3, [r2, #0]
 800dda0:	460c      	movne	r4, r1
 800dda2:	e7eb      	b.n	800dd7c <_malloc_r+0x64>
 800dda4:	460c      	mov	r4, r1
 800dda6:	6849      	ldr	r1, [r1, #4]
 800dda8:	e7cc      	b.n	800dd44 <_malloc_r+0x2c>
 800ddaa:	1cc4      	adds	r4, r0, #3
 800ddac:	f024 0403 	bic.w	r4, r4, #3
 800ddb0:	42a0      	cmp	r0, r4
 800ddb2:	d005      	beq.n	800ddc0 <_malloc_r+0xa8>
 800ddb4:	1a21      	subs	r1, r4, r0
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	f000 fa9a 	bl	800e2f0 <_sbrk_r>
 800ddbc:	3001      	adds	r0, #1
 800ddbe:	d0cf      	beq.n	800dd60 <_malloc_r+0x48>
 800ddc0:	6025      	str	r5, [r4, #0]
 800ddc2:	e7db      	b.n	800dd7c <_malloc_r+0x64>
 800ddc4:	20004360 	.word	0x20004360
 800ddc8:	20004364 	.word	0x20004364

0800ddcc <__ssputs_r>:
 800ddcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddd0:	688e      	ldr	r6, [r1, #8]
 800ddd2:	429e      	cmp	r6, r3
 800ddd4:	4682      	mov	sl, r0
 800ddd6:	460c      	mov	r4, r1
 800ddd8:	4690      	mov	r8, r2
 800ddda:	4699      	mov	r9, r3
 800dddc:	d837      	bhi.n	800de4e <__ssputs_r+0x82>
 800ddde:	898a      	ldrh	r2, [r1, #12]
 800dde0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dde4:	d031      	beq.n	800de4a <__ssputs_r+0x7e>
 800dde6:	6825      	ldr	r5, [r4, #0]
 800dde8:	6909      	ldr	r1, [r1, #16]
 800ddea:	1a6f      	subs	r7, r5, r1
 800ddec:	6965      	ldr	r5, [r4, #20]
 800ddee:	2302      	movs	r3, #2
 800ddf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ddf4:	fb95 f5f3 	sdiv	r5, r5, r3
 800ddf8:	f109 0301 	add.w	r3, r9, #1
 800ddfc:	443b      	add	r3, r7
 800ddfe:	429d      	cmp	r5, r3
 800de00:	bf38      	it	cc
 800de02:	461d      	movcc	r5, r3
 800de04:	0553      	lsls	r3, r2, #21
 800de06:	d530      	bpl.n	800de6a <__ssputs_r+0x9e>
 800de08:	4629      	mov	r1, r5
 800de0a:	f7ff ff85 	bl	800dd18 <_malloc_r>
 800de0e:	4606      	mov	r6, r0
 800de10:	b950      	cbnz	r0, 800de28 <__ssputs_r+0x5c>
 800de12:	230c      	movs	r3, #12
 800de14:	f8ca 3000 	str.w	r3, [sl]
 800de18:	89a3      	ldrh	r3, [r4, #12]
 800de1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de1e:	81a3      	strh	r3, [r4, #12]
 800de20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de28:	463a      	mov	r2, r7
 800de2a:	6921      	ldr	r1, [r4, #16]
 800de2c:	f7fc f949 	bl	800a0c2 <memcpy>
 800de30:	89a3      	ldrh	r3, [r4, #12]
 800de32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800de36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de3a:	81a3      	strh	r3, [r4, #12]
 800de3c:	6126      	str	r6, [r4, #16]
 800de3e:	6165      	str	r5, [r4, #20]
 800de40:	443e      	add	r6, r7
 800de42:	1bed      	subs	r5, r5, r7
 800de44:	6026      	str	r6, [r4, #0]
 800de46:	60a5      	str	r5, [r4, #8]
 800de48:	464e      	mov	r6, r9
 800de4a:	454e      	cmp	r6, r9
 800de4c:	d900      	bls.n	800de50 <__ssputs_r+0x84>
 800de4e:	464e      	mov	r6, r9
 800de50:	4632      	mov	r2, r6
 800de52:	4641      	mov	r1, r8
 800de54:	6820      	ldr	r0, [r4, #0]
 800de56:	f000 fb07 	bl	800e468 <memmove>
 800de5a:	68a3      	ldr	r3, [r4, #8]
 800de5c:	1b9b      	subs	r3, r3, r6
 800de5e:	60a3      	str	r3, [r4, #8]
 800de60:	6823      	ldr	r3, [r4, #0]
 800de62:	441e      	add	r6, r3
 800de64:	6026      	str	r6, [r4, #0]
 800de66:	2000      	movs	r0, #0
 800de68:	e7dc      	b.n	800de24 <__ssputs_r+0x58>
 800de6a:	462a      	mov	r2, r5
 800de6c:	f000 fb17 	bl	800e49e <_realloc_r>
 800de70:	4606      	mov	r6, r0
 800de72:	2800      	cmp	r0, #0
 800de74:	d1e2      	bne.n	800de3c <__ssputs_r+0x70>
 800de76:	6921      	ldr	r1, [r4, #16]
 800de78:	4650      	mov	r0, sl
 800de7a:	f7ff feff 	bl	800dc7c <_free_r>
 800de7e:	e7c8      	b.n	800de12 <__ssputs_r+0x46>

0800de80 <_svfiprintf_r>:
 800de80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de84:	461d      	mov	r5, r3
 800de86:	898b      	ldrh	r3, [r1, #12]
 800de88:	061f      	lsls	r7, r3, #24
 800de8a:	b09d      	sub	sp, #116	; 0x74
 800de8c:	4680      	mov	r8, r0
 800de8e:	460c      	mov	r4, r1
 800de90:	4616      	mov	r6, r2
 800de92:	d50f      	bpl.n	800deb4 <_svfiprintf_r+0x34>
 800de94:	690b      	ldr	r3, [r1, #16]
 800de96:	b96b      	cbnz	r3, 800deb4 <_svfiprintf_r+0x34>
 800de98:	2140      	movs	r1, #64	; 0x40
 800de9a:	f7ff ff3d 	bl	800dd18 <_malloc_r>
 800de9e:	6020      	str	r0, [r4, #0]
 800dea0:	6120      	str	r0, [r4, #16]
 800dea2:	b928      	cbnz	r0, 800deb0 <_svfiprintf_r+0x30>
 800dea4:	230c      	movs	r3, #12
 800dea6:	f8c8 3000 	str.w	r3, [r8]
 800deaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800deae:	e0c8      	b.n	800e042 <_svfiprintf_r+0x1c2>
 800deb0:	2340      	movs	r3, #64	; 0x40
 800deb2:	6163      	str	r3, [r4, #20]
 800deb4:	2300      	movs	r3, #0
 800deb6:	9309      	str	r3, [sp, #36]	; 0x24
 800deb8:	2320      	movs	r3, #32
 800deba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800debe:	2330      	movs	r3, #48	; 0x30
 800dec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dec4:	9503      	str	r5, [sp, #12]
 800dec6:	f04f 0b01 	mov.w	fp, #1
 800deca:	4637      	mov	r7, r6
 800decc:	463d      	mov	r5, r7
 800dece:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ded2:	b10b      	cbz	r3, 800ded8 <_svfiprintf_r+0x58>
 800ded4:	2b25      	cmp	r3, #37	; 0x25
 800ded6:	d13e      	bne.n	800df56 <_svfiprintf_r+0xd6>
 800ded8:	ebb7 0a06 	subs.w	sl, r7, r6
 800dedc:	d00b      	beq.n	800def6 <_svfiprintf_r+0x76>
 800dede:	4653      	mov	r3, sl
 800dee0:	4632      	mov	r2, r6
 800dee2:	4621      	mov	r1, r4
 800dee4:	4640      	mov	r0, r8
 800dee6:	f7ff ff71 	bl	800ddcc <__ssputs_r>
 800deea:	3001      	adds	r0, #1
 800deec:	f000 80a4 	beq.w	800e038 <_svfiprintf_r+0x1b8>
 800def0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800def2:	4453      	add	r3, sl
 800def4:	9309      	str	r3, [sp, #36]	; 0x24
 800def6:	783b      	ldrb	r3, [r7, #0]
 800def8:	2b00      	cmp	r3, #0
 800defa:	f000 809d 	beq.w	800e038 <_svfiprintf_r+0x1b8>
 800defe:	2300      	movs	r3, #0
 800df00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df08:	9304      	str	r3, [sp, #16]
 800df0a:	9307      	str	r3, [sp, #28]
 800df0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df10:	931a      	str	r3, [sp, #104]	; 0x68
 800df12:	462f      	mov	r7, r5
 800df14:	2205      	movs	r2, #5
 800df16:	f817 1b01 	ldrb.w	r1, [r7], #1
 800df1a:	4850      	ldr	r0, [pc, #320]	; (800e05c <_svfiprintf_r+0x1dc>)
 800df1c:	f7f2 f968 	bl	80001f0 <memchr>
 800df20:	9b04      	ldr	r3, [sp, #16]
 800df22:	b9d0      	cbnz	r0, 800df5a <_svfiprintf_r+0xda>
 800df24:	06d9      	lsls	r1, r3, #27
 800df26:	bf44      	itt	mi
 800df28:	2220      	movmi	r2, #32
 800df2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800df2e:	071a      	lsls	r2, r3, #28
 800df30:	bf44      	itt	mi
 800df32:	222b      	movmi	r2, #43	; 0x2b
 800df34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800df38:	782a      	ldrb	r2, [r5, #0]
 800df3a:	2a2a      	cmp	r2, #42	; 0x2a
 800df3c:	d015      	beq.n	800df6a <_svfiprintf_r+0xea>
 800df3e:	9a07      	ldr	r2, [sp, #28]
 800df40:	462f      	mov	r7, r5
 800df42:	2000      	movs	r0, #0
 800df44:	250a      	movs	r5, #10
 800df46:	4639      	mov	r1, r7
 800df48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df4c:	3b30      	subs	r3, #48	; 0x30
 800df4e:	2b09      	cmp	r3, #9
 800df50:	d94d      	bls.n	800dfee <_svfiprintf_r+0x16e>
 800df52:	b1b8      	cbz	r0, 800df84 <_svfiprintf_r+0x104>
 800df54:	e00f      	b.n	800df76 <_svfiprintf_r+0xf6>
 800df56:	462f      	mov	r7, r5
 800df58:	e7b8      	b.n	800decc <_svfiprintf_r+0x4c>
 800df5a:	4a40      	ldr	r2, [pc, #256]	; (800e05c <_svfiprintf_r+0x1dc>)
 800df5c:	1a80      	subs	r0, r0, r2
 800df5e:	fa0b f000 	lsl.w	r0, fp, r0
 800df62:	4318      	orrs	r0, r3
 800df64:	9004      	str	r0, [sp, #16]
 800df66:	463d      	mov	r5, r7
 800df68:	e7d3      	b.n	800df12 <_svfiprintf_r+0x92>
 800df6a:	9a03      	ldr	r2, [sp, #12]
 800df6c:	1d11      	adds	r1, r2, #4
 800df6e:	6812      	ldr	r2, [r2, #0]
 800df70:	9103      	str	r1, [sp, #12]
 800df72:	2a00      	cmp	r2, #0
 800df74:	db01      	blt.n	800df7a <_svfiprintf_r+0xfa>
 800df76:	9207      	str	r2, [sp, #28]
 800df78:	e004      	b.n	800df84 <_svfiprintf_r+0x104>
 800df7a:	4252      	negs	r2, r2
 800df7c:	f043 0302 	orr.w	r3, r3, #2
 800df80:	9207      	str	r2, [sp, #28]
 800df82:	9304      	str	r3, [sp, #16]
 800df84:	783b      	ldrb	r3, [r7, #0]
 800df86:	2b2e      	cmp	r3, #46	; 0x2e
 800df88:	d10c      	bne.n	800dfa4 <_svfiprintf_r+0x124>
 800df8a:	787b      	ldrb	r3, [r7, #1]
 800df8c:	2b2a      	cmp	r3, #42	; 0x2a
 800df8e:	d133      	bne.n	800dff8 <_svfiprintf_r+0x178>
 800df90:	9b03      	ldr	r3, [sp, #12]
 800df92:	1d1a      	adds	r2, r3, #4
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	9203      	str	r2, [sp, #12]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	bfb8      	it	lt
 800df9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dfa0:	3702      	adds	r7, #2
 800dfa2:	9305      	str	r3, [sp, #20]
 800dfa4:	4d2e      	ldr	r5, [pc, #184]	; (800e060 <_svfiprintf_r+0x1e0>)
 800dfa6:	7839      	ldrb	r1, [r7, #0]
 800dfa8:	2203      	movs	r2, #3
 800dfaa:	4628      	mov	r0, r5
 800dfac:	f7f2 f920 	bl	80001f0 <memchr>
 800dfb0:	b138      	cbz	r0, 800dfc2 <_svfiprintf_r+0x142>
 800dfb2:	2340      	movs	r3, #64	; 0x40
 800dfb4:	1b40      	subs	r0, r0, r5
 800dfb6:	fa03 f000 	lsl.w	r0, r3, r0
 800dfba:	9b04      	ldr	r3, [sp, #16]
 800dfbc:	4303      	orrs	r3, r0
 800dfbe:	3701      	adds	r7, #1
 800dfc0:	9304      	str	r3, [sp, #16]
 800dfc2:	7839      	ldrb	r1, [r7, #0]
 800dfc4:	4827      	ldr	r0, [pc, #156]	; (800e064 <_svfiprintf_r+0x1e4>)
 800dfc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dfca:	2206      	movs	r2, #6
 800dfcc:	1c7e      	adds	r6, r7, #1
 800dfce:	f7f2 f90f 	bl	80001f0 <memchr>
 800dfd2:	2800      	cmp	r0, #0
 800dfd4:	d038      	beq.n	800e048 <_svfiprintf_r+0x1c8>
 800dfd6:	4b24      	ldr	r3, [pc, #144]	; (800e068 <_svfiprintf_r+0x1e8>)
 800dfd8:	bb13      	cbnz	r3, 800e020 <_svfiprintf_r+0x1a0>
 800dfda:	9b03      	ldr	r3, [sp, #12]
 800dfdc:	3307      	adds	r3, #7
 800dfde:	f023 0307 	bic.w	r3, r3, #7
 800dfe2:	3308      	adds	r3, #8
 800dfe4:	9303      	str	r3, [sp, #12]
 800dfe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfe8:	444b      	add	r3, r9
 800dfea:	9309      	str	r3, [sp, #36]	; 0x24
 800dfec:	e76d      	b.n	800deca <_svfiprintf_r+0x4a>
 800dfee:	fb05 3202 	mla	r2, r5, r2, r3
 800dff2:	2001      	movs	r0, #1
 800dff4:	460f      	mov	r7, r1
 800dff6:	e7a6      	b.n	800df46 <_svfiprintf_r+0xc6>
 800dff8:	2300      	movs	r3, #0
 800dffa:	3701      	adds	r7, #1
 800dffc:	9305      	str	r3, [sp, #20]
 800dffe:	4619      	mov	r1, r3
 800e000:	250a      	movs	r5, #10
 800e002:	4638      	mov	r0, r7
 800e004:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e008:	3a30      	subs	r2, #48	; 0x30
 800e00a:	2a09      	cmp	r2, #9
 800e00c:	d903      	bls.n	800e016 <_svfiprintf_r+0x196>
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d0c8      	beq.n	800dfa4 <_svfiprintf_r+0x124>
 800e012:	9105      	str	r1, [sp, #20]
 800e014:	e7c6      	b.n	800dfa4 <_svfiprintf_r+0x124>
 800e016:	fb05 2101 	mla	r1, r5, r1, r2
 800e01a:	2301      	movs	r3, #1
 800e01c:	4607      	mov	r7, r0
 800e01e:	e7f0      	b.n	800e002 <_svfiprintf_r+0x182>
 800e020:	ab03      	add	r3, sp, #12
 800e022:	9300      	str	r3, [sp, #0]
 800e024:	4622      	mov	r2, r4
 800e026:	4b11      	ldr	r3, [pc, #68]	; (800e06c <_svfiprintf_r+0x1ec>)
 800e028:	a904      	add	r1, sp, #16
 800e02a:	4640      	mov	r0, r8
 800e02c:	f7fc f8f0 	bl	800a210 <_printf_float>
 800e030:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e034:	4681      	mov	r9, r0
 800e036:	d1d6      	bne.n	800dfe6 <_svfiprintf_r+0x166>
 800e038:	89a3      	ldrh	r3, [r4, #12]
 800e03a:	065b      	lsls	r3, r3, #25
 800e03c:	f53f af35 	bmi.w	800deaa <_svfiprintf_r+0x2a>
 800e040:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e042:	b01d      	add	sp, #116	; 0x74
 800e044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e048:	ab03      	add	r3, sp, #12
 800e04a:	9300      	str	r3, [sp, #0]
 800e04c:	4622      	mov	r2, r4
 800e04e:	4b07      	ldr	r3, [pc, #28]	; (800e06c <_svfiprintf_r+0x1ec>)
 800e050:	a904      	add	r1, sp, #16
 800e052:	4640      	mov	r0, r8
 800e054:	f7fc fb92 	bl	800a77c <_printf_i>
 800e058:	e7ea      	b.n	800e030 <_svfiprintf_r+0x1b0>
 800e05a:	bf00      	nop
 800e05c:	0800edcc 	.word	0x0800edcc
 800e060:	0800edd2 	.word	0x0800edd2
 800e064:	0800edd6 	.word	0x0800edd6
 800e068:	0800a211 	.word	0x0800a211
 800e06c:	0800ddcd 	.word	0x0800ddcd

0800e070 <__sfputc_r>:
 800e070:	6893      	ldr	r3, [r2, #8]
 800e072:	3b01      	subs	r3, #1
 800e074:	2b00      	cmp	r3, #0
 800e076:	b410      	push	{r4}
 800e078:	6093      	str	r3, [r2, #8]
 800e07a:	da08      	bge.n	800e08e <__sfputc_r+0x1e>
 800e07c:	6994      	ldr	r4, [r2, #24]
 800e07e:	42a3      	cmp	r3, r4
 800e080:	db01      	blt.n	800e086 <__sfputc_r+0x16>
 800e082:	290a      	cmp	r1, #10
 800e084:	d103      	bne.n	800e08e <__sfputc_r+0x1e>
 800e086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e08a:	f7fd bdbb 	b.w	800bc04 <__swbuf_r>
 800e08e:	6813      	ldr	r3, [r2, #0]
 800e090:	1c58      	adds	r0, r3, #1
 800e092:	6010      	str	r0, [r2, #0]
 800e094:	7019      	strb	r1, [r3, #0]
 800e096:	4608      	mov	r0, r1
 800e098:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e09c:	4770      	bx	lr

0800e09e <__sfputs_r>:
 800e09e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0a0:	4606      	mov	r6, r0
 800e0a2:	460f      	mov	r7, r1
 800e0a4:	4614      	mov	r4, r2
 800e0a6:	18d5      	adds	r5, r2, r3
 800e0a8:	42ac      	cmp	r4, r5
 800e0aa:	d101      	bne.n	800e0b0 <__sfputs_r+0x12>
 800e0ac:	2000      	movs	r0, #0
 800e0ae:	e007      	b.n	800e0c0 <__sfputs_r+0x22>
 800e0b0:	463a      	mov	r2, r7
 800e0b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0b6:	4630      	mov	r0, r6
 800e0b8:	f7ff ffda 	bl	800e070 <__sfputc_r>
 800e0bc:	1c43      	adds	r3, r0, #1
 800e0be:	d1f3      	bne.n	800e0a8 <__sfputs_r+0xa>
 800e0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e0c4 <_vfiprintf_r>:
 800e0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0c8:	460c      	mov	r4, r1
 800e0ca:	b09d      	sub	sp, #116	; 0x74
 800e0cc:	4617      	mov	r7, r2
 800e0ce:	461d      	mov	r5, r3
 800e0d0:	4606      	mov	r6, r0
 800e0d2:	b118      	cbz	r0, 800e0dc <_vfiprintf_r+0x18>
 800e0d4:	6983      	ldr	r3, [r0, #24]
 800e0d6:	b90b      	cbnz	r3, 800e0dc <_vfiprintf_r+0x18>
 800e0d8:	f7fe fd96 	bl	800cc08 <__sinit>
 800e0dc:	4b7c      	ldr	r3, [pc, #496]	; (800e2d0 <_vfiprintf_r+0x20c>)
 800e0de:	429c      	cmp	r4, r3
 800e0e0:	d158      	bne.n	800e194 <_vfiprintf_r+0xd0>
 800e0e2:	6874      	ldr	r4, [r6, #4]
 800e0e4:	89a3      	ldrh	r3, [r4, #12]
 800e0e6:	0718      	lsls	r0, r3, #28
 800e0e8:	d55e      	bpl.n	800e1a8 <_vfiprintf_r+0xe4>
 800e0ea:	6923      	ldr	r3, [r4, #16]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d05b      	beq.n	800e1a8 <_vfiprintf_r+0xe4>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	9309      	str	r3, [sp, #36]	; 0x24
 800e0f4:	2320      	movs	r3, #32
 800e0f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0fa:	2330      	movs	r3, #48	; 0x30
 800e0fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e100:	9503      	str	r5, [sp, #12]
 800e102:	f04f 0b01 	mov.w	fp, #1
 800e106:	46b8      	mov	r8, r7
 800e108:	4645      	mov	r5, r8
 800e10a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e10e:	b10b      	cbz	r3, 800e114 <_vfiprintf_r+0x50>
 800e110:	2b25      	cmp	r3, #37	; 0x25
 800e112:	d154      	bne.n	800e1be <_vfiprintf_r+0xfa>
 800e114:	ebb8 0a07 	subs.w	sl, r8, r7
 800e118:	d00b      	beq.n	800e132 <_vfiprintf_r+0x6e>
 800e11a:	4653      	mov	r3, sl
 800e11c:	463a      	mov	r2, r7
 800e11e:	4621      	mov	r1, r4
 800e120:	4630      	mov	r0, r6
 800e122:	f7ff ffbc 	bl	800e09e <__sfputs_r>
 800e126:	3001      	adds	r0, #1
 800e128:	f000 80c2 	beq.w	800e2b0 <_vfiprintf_r+0x1ec>
 800e12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e12e:	4453      	add	r3, sl
 800e130:	9309      	str	r3, [sp, #36]	; 0x24
 800e132:	f898 3000 	ldrb.w	r3, [r8]
 800e136:	2b00      	cmp	r3, #0
 800e138:	f000 80ba 	beq.w	800e2b0 <_vfiprintf_r+0x1ec>
 800e13c:	2300      	movs	r3, #0
 800e13e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e142:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e146:	9304      	str	r3, [sp, #16]
 800e148:	9307      	str	r3, [sp, #28]
 800e14a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e14e:	931a      	str	r3, [sp, #104]	; 0x68
 800e150:	46a8      	mov	r8, r5
 800e152:	2205      	movs	r2, #5
 800e154:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e158:	485e      	ldr	r0, [pc, #376]	; (800e2d4 <_vfiprintf_r+0x210>)
 800e15a:	f7f2 f849 	bl	80001f0 <memchr>
 800e15e:	9b04      	ldr	r3, [sp, #16]
 800e160:	bb78      	cbnz	r0, 800e1c2 <_vfiprintf_r+0xfe>
 800e162:	06d9      	lsls	r1, r3, #27
 800e164:	bf44      	itt	mi
 800e166:	2220      	movmi	r2, #32
 800e168:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e16c:	071a      	lsls	r2, r3, #28
 800e16e:	bf44      	itt	mi
 800e170:	222b      	movmi	r2, #43	; 0x2b
 800e172:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e176:	782a      	ldrb	r2, [r5, #0]
 800e178:	2a2a      	cmp	r2, #42	; 0x2a
 800e17a:	d02a      	beq.n	800e1d2 <_vfiprintf_r+0x10e>
 800e17c:	9a07      	ldr	r2, [sp, #28]
 800e17e:	46a8      	mov	r8, r5
 800e180:	2000      	movs	r0, #0
 800e182:	250a      	movs	r5, #10
 800e184:	4641      	mov	r1, r8
 800e186:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e18a:	3b30      	subs	r3, #48	; 0x30
 800e18c:	2b09      	cmp	r3, #9
 800e18e:	d969      	bls.n	800e264 <_vfiprintf_r+0x1a0>
 800e190:	b360      	cbz	r0, 800e1ec <_vfiprintf_r+0x128>
 800e192:	e024      	b.n	800e1de <_vfiprintf_r+0x11a>
 800e194:	4b50      	ldr	r3, [pc, #320]	; (800e2d8 <_vfiprintf_r+0x214>)
 800e196:	429c      	cmp	r4, r3
 800e198:	d101      	bne.n	800e19e <_vfiprintf_r+0xda>
 800e19a:	68b4      	ldr	r4, [r6, #8]
 800e19c:	e7a2      	b.n	800e0e4 <_vfiprintf_r+0x20>
 800e19e:	4b4f      	ldr	r3, [pc, #316]	; (800e2dc <_vfiprintf_r+0x218>)
 800e1a0:	429c      	cmp	r4, r3
 800e1a2:	bf08      	it	eq
 800e1a4:	68f4      	ldreq	r4, [r6, #12]
 800e1a6:	e79d      	b.n	800e0e4 <_vfiprintf_r+0x20>
 800e1a8:	4621      	mov	r1, r4
 800e1aa:	4630      	mov	r0, r6
 800e1ac:	f7fd fd8a 	bl	800bcc4 <__swsetup_r>
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	d09d      	beq.n	800e0f0 <_vfiprintf_r+0x2c>
 800e1b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1b8:	b01d      	add	sp, #116	; 0x74
 800e1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1be:	46a8      	mov	r8, r5
 800e1c0:	e7a2      	b.n	800e108 <_vfiprintf_r+0x44>
 800e1c2:	4a44      	ldr	r2, [pc, #272]	; (800e2d4 <_vfiprintf_r+0x210>)
 800e1c4:	1a80      	subs	r0, r0, r2
 800e1c6:	fa0b f000 	lsl.w	r0, fp, r0
 800e1ca:	4318      	orrs	r0, r3
 800e1cc:	9004      	str	r0, [sp, #16]
 800e1ce:	4645      	mov	r5, r8
 800e1d0:	e7be      	b.n	800e150 <_vfiprintf_r+0x8c>
 800e1d2:	9a03      	ldr	r2, [sp, #12]
 800e1d4:	1d11      	adds	r1, r2, #4
 800e1d6:	6812      	ldr	r2, [r2, #0]
 800e1d8:	9103      	str	r1, [sp, #12]
 800e1da:	2a00      	cmp	r2, #0
 800e1dc:	db01      	blt.n	800e1e2 <_vfiprintf_r+0x11e>
 800e1de:	9207      	str	r2, [sp, #28]
 800e1e0:	e004      	b.n	800e1ec <_vfiprintf_r+0x128>
 800e1e2:	4252      	negs	r2, r2
 800e1e4:	f043 0302 	orr.w	r3, r3, #2
 800e1e8:	9207      	str	r2, [sp, #28]
 800e1ea:	9304      	str	r3, [sp, #16]
 800e1ec:	f898 3000 	ldrb.w	r3, [r8]
 800e1f0:	2b2e      	cmp	r3, #46	; 0x2e
 800e1f2:	d10e      	bne.n	800e212 <_vfiprintf_r+0x14e>
 800e1f4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e1f8:	2b2a      	cmp	r3, #42	; 0x2a
 800e1fa:	d138      	bne.n	800e26e <_vfiprintf_r+0x1aa>
 800e1fc:	9b03      	ldr	r3, [sp, #12]
 800e1fe:	1d1a      	adds	r2, r3, #4
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	9203      	str	r2, [sp, #12]
 800e204:	2b00      	cmp	r3, #0
 800e206:	bfb8      	it	lt
 800e208:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e20c:	f108 0802 	add.w	r8, r8, #2
 800e210:	9305      	str	r3, [sp, #20]
 800e212:	4d33      	ldr	r5, [pc, #204]	; (800e2e0 <_vfiprintf_r+0x21c>)
 800e214:	f898 1000 	ldrb.w	r1, [r8]
 800e218:	2203      	movs	r2, #3
 800e21a:	4628      	mov	r0, r5
 800e21c:	f7f1 ffe8 	bl	80001f0 <memchr>
 800e220:	b140      	cbz	r0, 800e234 <_vfiprintf_r+0x170>
 800e222:	2340      	movs	r3, #64	; 0x40
 800e224:	1b40      	subs	r0, r0, r5
 800e226:	fa03 f000 	lsl.w	r0, r3, r0
 800e22a:	9b04      	ldr	r3, [sp, #16]
 800e22c:	4303      	orrs	r3, r0
 800e22e:	f108 0801 	add.w	r8, r8, #1
 800e232:	9304      	str	r3, [sp, #16]
 800e234:	f898 1000 	ldrb.w	r1, [r8]
 800e238:	482a      	ldr	r0, [pc, #168]	; (800e2e4 <_vfiprintf_r+0x220>)
 800e23a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e23e:	2206      	movs	r2, #6
 800e240:	f108 0701 	add.w	r7, r8, #1
 800e244:	f7f1 ffd4 	bl	80001f0 <memchr>
 800e248:	2800      	cmp	r0, #0
 800e24a:	d037      	beq.n	800e2bc <_vfiprintf_r+0x1f8>
 800e24c:	4b26      	ldr	r3, [pc, #152]	; (800e2e8 <_vfiprintf_r+0x224>)
 800e24e:	bb1b      	cbnz	r3, 800e298 <_vfiprintf_r+0x1d4>
 800e250:	9b03      	ldr	r3, [sp, #12]
 800e252:	3307      	adds	r3, #7
 800e254:	f023 0307 	bic.w	r3, r3, #7
 800e258:	3308      	adds	r3, #8
 800e25a:	9303      	str	r3, [sp, #12]
 800e25c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e25e:	444b      	add	r3, r9
 800e260:	9309      	str	r3, [sp, #36]	; 0x24
 800e262:	e750      	b.n	800e106 <_vfiprintf_r+0x42>
 800e264:	fb05 3202 	mla	r2, r5, r2, r3
 800e268:	2001      	movs	r0, #1
 800e26a:	4688      	mov	r8, r1
 800e26c:	e78a      	b.n	800e184 <_vfiprintf_r+0xc0>
 800e26e:	2300      	movs	r3, #0
 800e270:	f108 0801 	add.w	r8, r8, #1
 800e274:	9305      	str	r3, [sp, #20]
 800e276:	4619      	mov	r1, r3
 800e278:	250a      	movs	r5, #10
 800e27a:	4640      	mov	r0, r8
 800e27c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e280:	3a30      	subs	r2, #48	; 0x30
 800e282:	2a09      	cmp	r2, #9
 800e284:	d903      	bls.n	800e28e <_vfiprintf_r+0x1ca>
 800e286:	2b00      	cmp	r3, #0
 800e288:	d0c3      	beq.n	800e212 <_vfiprintf_r+0x14e>
 800e28a:	9105      	str	r1, [sp, #20]
 800e28c:	e7c1      	b.n	800e212 <_vfiprintf_r+0x14e>
 800e28e:	fb05 2101 	mla	r1, r5, r1, r2
 800e292:	2301      	movs	r3, #1
 800e294:	4680      	mov	r8, r0
 800e296:	e7f0      	b.n	800e27a <_vfiprintf_r+0x1b6>
 800e298:	ab03      	add	r3, sp, #12
 800e29a:	9300      	str	r3, [sp, #0]
 800e29c:	4622      	mov	r2, r4
 800e29e:	4b13      	ldr	r3, [pc, #76]	; (800e2ec <_vfiprintf_r+0x228>)
 800e2a0:	a904      	add	r1, sp, #16
 800e2a2:	4630      	mov	r0, r6
 800e2a4:	f7fb ffb4 	bl	800a210 <_printf_float>
 800e2a8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e2ac:	4681      	mov	r9, r0
 800e2ae:	d1d5      	bne.n	800e25c <_vfiprintf_r+0x198>
 800e2b0:	89a3      	ldrh	r3, [r4, #12]
 800e2b2:	065b      	lsls	r3, r3, #25
 800e2b4:	f53f af7e 	bmi.w	800e1b4 <_vfiprintf_r+0xf0>
 800e2b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2ba:	e77d      	b.n	800e1b8 <_vfiprintf_r+0xf4>
 800e2bc:	ab03      	add	r3, sp, #12
 800e2be:	9300      	str	r3, [sp, #0]
 800e2c0:	4622      	mov	r2, r4
 800e2c2:	4b0a      	ldr	r3, [pc, #40]	; (800e2ec <_vfiprintf_r+0x228>)
 800e2c4:	a904      	add	r1, sp, #16
 800e2c6:	4630      	mov	r0, r6
 800e2c8:	f7fc fa58 	bl	800a77c <_printf_i>
 800e2cc:	e7ec      	b.n	800e2a8 <_vfiprintf_r+0x1e4>
 800e2ce:	bf00      	nop
 800e2d0:	0800ec90 	.word	0x0800ec90
 800e2d4:	0800edcc 	.word	0x0800edcc
 800e2d8:	0800ecb0 	.word	0x0800ecb0
 800e2dc:	0800ec70 	.word	0x0800ec70
 800e2e0:	0800edd2 	.word	0x0800edd2
 800e2e4:	0800edd6 	.word	0x0800edd6
 800e2e8:	0800a211 	.word	0x0800a211
 800e2ec:	0800e09f 	.word	0x0800e09f

0800e2f0 <_sbrk_r>:
 800e2f0:	b538      	push	{r3, r4, r5, lr}
 800e2f2:	4c06      	ldr	r4, [pc, #24]	; (800e30c <_sbrk_r+0x1c>)
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	4605      	mov	r5, r0
 800e2f8:	4608      	mov	r0, r1
 800e2fa:	6023      	str	r3, [r4, #0]
 800e2fc:	f7f9 fefc 	bl	80080f8 <_sbrk>
 800e300:	1c43      	adds	r3, r0, #1
 800e302:	d102      	bne.n	800e30a <_sbrk_r+0x1a>
 800e304:	6823      	ldr	r3, [r4, #0]
 800e306:	b103      	cbz	r3, 800e30a <_sbrk_r+0x1a>
 800e308:	602b      	str	r3, [r5, #0]
 800e30a:	bd38      	pop	{r3, r4, r5, pc}
 800e30c:	20004b08 	.word	0x20004b08

0800e310 <__sread>:
 800e310:	b510      	push	{r4, lr}
 800e312:	460c      	mov	r4, r1
 800e314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e318:	f000 f8e8 	bl	800e4ec <_read_r>
 800e31c:	2800      	cmp	r0, #0
 800e31e:	bfab      	itete	ge
 800e320:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e322:	89a3      	ldrhlt	r3, [r4, #12]
 800e324:	181b      	addge	r3, r3, r0
 800e326:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e32a:	bfac      	ite	ge
 800e32c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e32e:	81a3      	strhlt	r3, [r4, #12]
 800e330:	bd10      	pop	{r4, pc}

0800e332 <__swrite>:
 800e332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e336:	461f      	mov	r7, r3
 800e338:	898b      	ldrh	r3, [r1, #12]
 800e33a:	05db      	lsls	r3, r3, #23
 800e33c:	4605      	mov	r5, r0
 800e33e:	460c      	mov	r4, r1
 800e340:	4616      	mov	r6, r2
 800e342:	d505      	bpl.n	800e350 <__swrite+0x1e>
 800e344:	2302      	movs	r3, #2
 800e346:	2200      	movs	r2, #0
 800e348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e34c:	f000 f87a 	bl	800e444 <_lseek_r>
 800e350:	89a3      	ldrh	r3, [r4, #12]
 800e352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e356:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e35a:	81a3      	strh	r3, [r4, #12]
 800e35c:	4632      	mov	r2, r6
 800e35e:	463b      	mov	r3, r7
 800e360:	4628      	mov	r0, r5
 800e362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e366:	f000 b829 	b.w	800e3bc <_write_r>

0800e36a <__sseek>:
 800e36a:	b510      	push	{r4, lr}
 800e36c:	460c      	mov	r4, r1
 800e36e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e372:	f000 f867 	bl	800e444 <_lseek_r>
 800e376:	1c43      	adds	r3, r0, #1
 800e378:	89a3      	ldrh	r3, [r4, #12]
 800e37a:	bf15      	itete	ne
 800e37c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e37e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e382:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e386:	81a3      	strheq	r3, [r4, #12]
 800e388:	bf18      	it	ne
 800e38a:	81a3      	strhne	r3, [r4, #12]
 800e38c:	bd10      	pop	{r4, pc}

0800e38e <__sclose>:
 800e38e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e392:	f000 b825 	b.w	800e3e0 <_close_r>

0800e396 <strncmp>:
 800e396:	b510      	push	{r4, lr}
 800e398:	b16a      	cbz	r2, 800e3b6 <strncmp+0x20>
 800e39a:	3901      	subs	r1, #1
 800e39c:	1884      	adds	r4, r0, r2
 800e39e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e3a2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d103      	bne.n	800e3b2 <strncmp+0x1c>
 800e3aa:	42a0      	cmp	r0, r4
 800e3ac:	d001      	beq.n	800e3b2 <strncmp+0x1c>
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d1f5      	bne.n	800e39e <strncmp+0x8>
 800e3b2:	1a98      	subs	r0, r3, r2
 800e3b4:	bd10      	pop	{r4, pc}
 800e3b6:	4610      	mov	r0, r2
 800e3b8:	e7fc      	b.n	800e3b4 <strncmp+0x1e>
	...

0800e3bc <_write_r>:
 800e3bc:	b538      	push	{r3, r4, r5, lr}
 800e3be:	4c07      	ldr	r4, [pc, #28]	; (800e3dc <_write_r+0x20>)
 800e3c0:	4605      	mov	r5, r0
 800e3c2:	4608      	mov	r0, r1
 800e3c4:	4611      	mov	r1, r2
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	6022      	str	r2, [r4, #0]
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	f7f9 fe7a 	bl	80080c4 <_write>
 800e3d0:	1c43      	adds	r3, r0, #1
 800e3d2:	d102      	bne.n	800e3da <_write_r+0x1e>
 800e3d4:	6823      	ldr	r3, [r4, #0]
 800e3d6:	b103      	cbz	r3, 800e3da <_write_r+0x1e>
 800e3d8:	602b      	str	r3, [r5, #0]
 800e3da:	bd38      	pop	{r3, r4, r5, pc}
 800e3dc:	20004b08 	.word	0x20004b08

0800e3e0 <_close_r>:
 800e3e0:	b538      	push	{r3, r4, r5, lr}
 800e3e2:	4c06      	ldr	r4, [pc, #24]	; (800e3fc <_close_r+0x1c>)
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	4605      	mov	r5, r0
 800e3e8:	4608      	mov	r0, r1
 800e3ea:	6023      	str	r3, [r4, #0]
 800e3ec:	f7f9 fe78 	bl	80080e0 <_close>
 800e3f0:	1c43      	adds	r3, r0, #1
 800e3f2:	d102      	bne.n	800e3fa <_close_r+0x1a>
 800e3f4:	6823      	ldr	r3, [r4, #0]
 800e3f6:	b103      	cbz	r3, 800e3fa <_close_r+0x1a>
 800e3f8:	602b      	str	r3, [r5, #0]
 800e3fa:	bd38      	pop	{r3, r4, r5, pc}
 800e3fc:	20004b08 	.word	0x20004b08

0800e400 <_fstat_r>:
 800e400:	b538      	push	{r3, r4, r5, lr}
 800e402:	4c07      	ldr	r4, [pc, #28]	; (800e420 <_fstat_r+0x20>)
 800e404:	2300      	movs	r3, #0
 800e406:	4605      	mov	r5, r0
 800e408:	4608      	mov	r0, r1
 800e40a:	4611      	mov	r1, r2
 800e40c:	6023      	str	r3, [r4, #0]
 800e40e:	f7f9 fe6a 	bl	80080e6 <_fstat>
 800e412:	1c43      	adds	r3, r0, #1
 800e414:	d102      	bne.n	800e41c <_fstat_r+0x1c>
 800e416:	6823      	ldr	r3, [r4, #0]
 800e418:	b103      	cbz	r3, 800e41c <_fstat_r+0x1c>
 800e41a:	602b      	str	r3, [r5, #0]
 800e41c:	bd38      	pop	{r3, r4, r5, pc}
 800e41e:	bf00      	nop
 800e420:	20004b08 	.word	0x20004b08

0800e424 <_isatty_r>:
 800e424:	b538      	push	{r3, r4, r5, lr}
 800e426:	4c06      	ldr	r4, [pc, #24]	; (800e440 <_isatty_r+0x1c>)
 800e428:	2300      	movs	r3, #0
 800e42a:	4605      	mov	r5, r0
 800e42c:	4608      	mov	r0, r1
 800e42e:	6023      	str	r3, [r4, #0]
 800e430:	f7f9 fe5e 	bl	80080f0 <_isatty>
 800e434:	1c43      	adds	r3, r0, #1
 800e436:	d102      	bne.n	800e43e <_isatty_r+0x1a>
 800e438:	6823      	ldr	r3, [r4, #0]
 800e43a:	b103      	cbz	r3, 800e43e <_isatty_r+0x1a>
 800e43c:	602b      	str	r3, [r5, #0]
 800e43e:	bd38      	pop	{r3, r4, r5, pc}
 800e440:	20004b08 	.word	0x20004b08

0800e444 <_lseek_r>:
 800e444:	b538      	push	{r3, r4, r5, lr}
 800e446:	4c07      	ldr	r4, [pc, #28]	; (800e464 <_lseek_r+0x20>)
 800e448:	4605      	mov	r5, r0
 800e44a:	4608      	mov	r0, r1
 800e44c:	4611      	mov	r1, r2
 800e44e:	2200      	movs	r2, #0
 800e450:	6022      	str	r2, [r4, #0]
 800e452:	461a      	mov	r2, r3
 800e454:	f7f9 fe4e 	bl	80080f4 <_lseek>
 800e458:	1c43      	adds	r3, r0, #1
 800e45a:	d102      	bne.n	800e462 <_lseek_r+0x1e>
 800e45c:	6823      	ldr	r3, [r4, #0]
 800e45e:	b103      	cbz	r3, 800e462 <_lseek_r+0x1e>
 800e460:	602b      	str	r3, [r5, #0]
 800e462:	bd38      	pop	{r3, r4, r5, pc}
 800e464:	20004b08 	.word	0x20004b08

0800e468 <memmove>:
 800e468:	4288      	cmp	r0, r1
 800e46a:	b510      	push	{r4, lr}
 800e46c:	eb01 0302 	add.w	r3, r1, r2
 800e470:	d807      	bhi.n	800e482 <memmove+0x1a>
 800e472:	1e42      	subs	r2, r0, #1
 800e474:	4299      	cmp	r1, r3
 800e476:	d00a      	beq.n	800e48e <memmove+0x26>
 800e478:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e47c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e480:	e7f8      	b.n	800e474 <memmove+0xc>
 800e482:	4283      	cmp	r3, r0
 800e484:	d9f5      	bls.n	800e472 <memmove+0xa>
 800e486:	1881      	adds	r1, r0, r2
 800e488:	1ad2      	subs	r2, r2, r3
 800e48a:	42d3      	cmn	r3, r2
 800e48c:	d100      	bne.n	800e490 <memmove+0x28>
 800e48e:	bd10      	pop	{r4, pc}
 800e490:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e494:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e498:	e7f7      	b.n	800e48a <memmove+0x22>

0800e49a <__malloc_lock>:
 800e49a:	4770      	bx	lr

0800e49c <__malloc_unlock>:
 800e49c:	4770      	bx	lr

0800e49e <_realloc_r>:
 800e49e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4a0:	4607      	mov	r7, r0
 800e4a2:	4614      	mov	r4, r2
 800e4a4:	460e      	mov	r6, r1
 800e4a6:	b921      	cbnz	r1, 800e4b2 <_realloc_r+0x14>
 800e4a8:	4611      	mov	r1, r2
 800e4aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e4ae:	f7ff bc33 	b.w	800dd18 <_malloc_r>
 800e4b2:	b922      	cbnz	r2, 800e4be <_realloc_r+0x20>
 800e4b4:	f7ff fbe2 	bl	800dc7c <_free_r>
 800e4b8:	4625      	mov	r5, r4
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4be:	f000 f827 	bl	800e510 <_malloc_usable_size_r>
 800e4c2:	42a0      	cmp	r0, r4
 800e4c4:	d20f      	bcs.n	800e4e6 <_realloc_r+0x48>
 800e4c6:	4621      	mov	r1, r4
 800e4c8:	4638      	mov	r0, r7
 800e4ca:	f7ff fc25 	bl	800dd18 <_malloc_r>
 800e4ce:	4605      	mov	r5, r0
 800e4d0:	2800      	cmp	r0, #0
 800e4d2:	d0f2      	beq.n	800e4ba <_realloc_r+0x1c>
 800e4d4:	4631      	mov	r1, r6
 800e4d6:	4622      	mov	r2, r4
 800e4d8:	f7fb fdf3 	bl	800a0c2 <memcpy>
 800e4dc:	4631      	mov	r1, r6
 800e4de:	4638      	mov	r0, r7
 800e4e0:	f7ff fbcc 	bl	800dc7c <_free_r>
 800e4e4:	e7e9      	b.n	800e4ba <_realloc_r+0x1c>
 800e4e6:	4635      	mov	r5, r6
 800e4e8:	e7e7      	b.n	800e4ba <_realloc_r+0x1c>
	...

0800e4ec <_read_r>:
 800e4ec:	b538      	push	{r3, r4, r5, lr}
 800e4ee:	4c07      	ldr	r4, [pc, #28]	; (800e50c <_read_r+0x20>)
 800e4f0:	4605      	mov	r5, r0
 800e4f2:	4608      	mov	r0, r1
 800e4f4:	4611      	mov	r1, r2
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	6022      	str	r2, [r4, #0]
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	f7f9 fdd4 	bl	80080a8 <_read>
 800e500:	1c43      	adds	r3, r0, #1
 800e502:	d102      	bne.n	800e50a <_read_r+0x1e>
 800e504:	6823      	ldr	r3, [r4, #0]
 800e506:	b103      	cbz	r3, 800e50a <_read_r+0x1e>
 800e508:	602b      	str	r3, [r5, #0]
 800e50a:	bd38      	pop	{r3, r4, r5, pc}
 800e50c:	20004b08 	.word	0x20004b08

0800e510 <_malloc_usable_size_r>:
 800e510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e514:	1f18      	subs	r0, r3, #4
 800e516:	2b00      	cmp	r3, #0
 800e518:	bfbc      	itt	lt
 800e51a:	580b      	ldrlt	r3, [r1, r0]
 800e51c:	18c0      	addlt	r0, r0, r3
 800e51e:	4770      	bx	lr

0800e520 <_init>:
 800e520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e522:	bf00      	nop
 800e524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e526:	bc08      	pop	{r3}
 800e528:	469e      	mov	lr, r3
 800e52a:	4770      	bx	lr

0800e52c <_fini>:
 800e52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e52e:	bf00      	nop
 800e530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e532:	bc08      	pop	{r3}
 800e534:	469e      	mov	lr, r3
 800e536:	4770      	bx	lr
