
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  08009648  08009648  00019648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c48  08009c48  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  08009c48  08009c48  00019c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c50  08009c50  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c50  08009c50  00019c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c54  08009c54  00019c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08009c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000220  08009e78  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08009e78  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171f5  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002be8  00000000  00000000  00037445  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000ccf2  00000000  00000000  0003a02d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001040  00000000  00000000  00046d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000f88  00000000  00000000  00047d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00018a45  00000000  00000000  00048ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000ccb8  00000000  00000000  0006172d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00091ade  00000000  00000000  0006e3e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000ffec3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003be0  00000000  00000000  000fff40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000220 	.word	0x20000220
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800962c 	.word	0x0800962c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000224 	.word	0x20000224
 80001dc:	0800962c 	.word	0x0800962c

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2f>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000984:	bf24      	itt	cs
 8000986:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800098a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800098e:	d90d      	bls.n	80009ac <__aeabi_d2f+0x30>
 8000990:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000994:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000998:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800099c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a4:	bf08      	it	eq
 80009a6:	f020 0001 	biceq.w	r0, r0, #1
 80009aa:	4770      	bx	lr
 80009ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b0:	d121      	bne.n	80009f6 <__aeabi_d2f+0x7a>
 80009b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009b6:	bfbc      	itt	lt
 80009b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	4770      	bxlt	lr
 80009be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c6:	f1c2 0218 	rsb	r2, r2, #24
 80009ca:	f1c2 0c20 	rsb	ip, r2, #32
 80009ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80009d2:	fa20 f002 	lsr.w	r0, r0, r2
 80009d6:	bf18      	it	ne
 80009d8:	f040 0001 	orrne.w	r0, r0, #1
 80009dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e8:	ea40 000c 	orr.w	r0, r0, ip
 80009ec:	fa23 f302 	lsr.w	r3, r3, r2
 80009f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f4:	e7cc      	b.n	8000990 <__aeabi_d2f+0x14>
 80009f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009fa:	d107      	bne.n	8000a0c <__aeabi_d2f+0x90>
 80009fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a00:	bf1e      	ittt	ne
 8000a02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a0a:	4770      	bxne	lr
 8000a0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_uldivmod>:
 8000a1c:	b953      	cbnz	r3, 8000a34 <__aeabi_uldivmod+0x18>
 8000a1e:	b94a      	cbnz	r2, 8000a34 <__aeabi_uldivmod+0x18>
 8000a20:	2900      	cmp	r1, #0
 8000a22:	bf08      	it	eq
 8000a24:	2800      	cmpeq	r0, #0
 8000a26:	bf1c      	itt	ne
 8000a28:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a2c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a30:	f000 b972 	b.w	8000d18 <__aeabi_idiv0>
 8000a34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3c:	f000 f806 	bl	8000a4c <__udivmoddi4>
 8000a40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr

08000a4c <__udivmoddi4>:
 8000a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a50:	9e08      	ldr	r6, [sp, #32]
 8000a52:	4604      	mov	r4, r0
 8000a54:	4688      	mov	r8, r1
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d14b      	bne.n	8000af2 <__udivmoddi4+0xa6>
 8000a5a:	428a      	cmp	r2, r1
 8000a5c:	4615      	mov	r5, r2
 8000a5e:	d967      	bls.n	8000b30 <__udivmoddi4+0xe4>
 8000a60:	fab2 f282 	clz	r2, r2
 8000a64:	b14a      	cbz	r2, 8000a7a <__udivmoddi4+0x2e>
 8000a66:	f1c2 0720 	rsb	r7, r2, #32
 8000a6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a6e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a72:	4095      	lsls	r5, r2
 8000a74:	ea47 0803 	orr.w	r8, r7, r3
 8000a78:	4094      	lsls	r4, r2
 8000a7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a7e:	0c23      	lsrs	r3, r4, #16
 8000a80:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a84:	fa1f fc85 	uxth.w	ip, r5
 8000a88:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a90:	fb07 f10c 	mul.w	r1, r7, ip
 8000a94:	4299      	cmp	r1, r3
 8000a96:	d909      	bls.n	8000aac <__udivmoddi4+0x60>
 8000a98:	18eb      	adds	r3, r5, r3
 8000a9a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000a9e:	f080 811b 	bcs.w	8000cd8 <__udivmoddi4+0x28c>
 8000aa2:	4299      	cmp	r1, r3
 8000aa4:	f240 8118 	bls.w	8000cd8 <__udivmoddi4+0x28c>
 8000aa8:	3f02      	subs	r7, #2
 8000aaa:	442b      	add	r3, r5
 8000aac:	1a5b      	subs	r3, r3, r1
 8000aae:	b2a4      	uxth	r4, r4
 8000ab0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ab4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ab8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000abc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ac0:	45a4      	cmp	ip, r4
 8000ac2:	d909      	bls.n	8000ad8 <__udivmoddi4+0x8c>
 8000ac4:	192c      	adds	r4, r5, r4
 8000ac6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000aca:	f080 8107 	bcs.w	8000cdc <__udivmoddi4+0x290>
 8000ace:	45a4      	cmp	ip, r4
 8000ad0:	f240 8104 	bls.w	8000cdc <__udivmoddi4+0x290>
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	442c      	add	r4, r5
 8000ad8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000adc:	eba4 040c 	sub.w	r4, r4, ip
 8000ae0:	2700      	movs	r7, #0
 8000ae2:	b11e      	cbz	r6, 8000aec <__udivmoddi4+0xa0>
 8000ae4:	40d4      	lsrs	r4, r2
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e9c6 4300 	strd	r4, r3, [r6]
 8000aec:	4639      	mov	r1, r7
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0xbe>
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	f000 80eb 	beq.w	8000cd2 <__udivmoddi4+0x286>
 8000afc:	2700      	movs	r7, #0
 8000afe:	e9c6 0100 	strd	r0, r1, [r6]
 8000b02:	4638      	mov	r0, r7
 8000b04:	4639      	mov	r1, r7
 8000b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0a:	fab3 f783 	clz	r7, r3
 8000b0e:	2f00      	cmp	r7, #0
 8000b10:	d147      	bne.n	8000ba2 <__udivmoddi4+0x156>
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d302      	bcc.n	8000b1c <__udivmoddi4+0xd0>
 8000b16:	4282      	cmp	r2, r0
 8000b18:	f200 80fa 	bhi.w	8000d10 <__udivmoddi4+0x2c4>
 8000b1c:	1a84      	subs	r4, r0, r2
 8000b1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b22:	2001      	movs	r0, #1
 8000b24:	4698      	mov	r8, r3
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	d0e0      	beq.n	8000aec <__udivmoddi4+0xa0>
 8000b2a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b2e:	e7dd      	b.n	8000aec <__udivmoddi4+0xa0>
 8000b30:	b902      	cbnz	r2, 8000b34 <__udivmoddi4+0xe8>
 8000b32:	deff      	udf	#255	; 0xff
 8000b34:	fab2 f282 	clz	r2, r2
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	f040 808f 	bne.w	8000c5c <__udivmoddi4+0x210>
 8000b3e:	1b49      	subs	r1, r1, r5
 8000b40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b44:	fa1f f885 	uxth.w	r8, r5
 8000b48:	2701      	movs	r7, #1
 8000b4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b58:	fb08 f10c 	mul.w	r1, r8, ip
 8000b5c:	4299      	cmp	r1, r3
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0x124>
 8000b60:	18eb      	adds	r3, r5, r3
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x122>
 8000b68:	4299      	cmp	r1, r3
 8000b6a:	f200 80cd 	bhi.w	8000d08 <__udivmoddi4+0x2bc>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1a59      	subs	r1, r3, r1
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x14c>
 8000b88:	192c      	adds	r4, r5, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x14a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80b6 	bhi.w	8000d02 <__udivmoddi4+0x2b6>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e79f      	b.n	8000ae2 <__udivmoddi4+0x96>
 8000ba2:	f1c7 0c20 	rsb	ip, r7, #32
 8000ba6:	40bb      	lsls	r3, r7
 8000ba8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bac:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bb0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bb4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bb8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bbc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bc0:	4325      	orrs	r5, r4
 8000bc2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bc6:	0c2c      	lsrs	r4, r5, #16
 8000bc8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bcc:	fa1f fa8e 	uxth.w	sl, lr
 8000bd0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bd4:	fb09 f40a 	mul.w	r4, r9, sl
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	fa02 f207 	lsl.w	r2, r2, r7
 8000bde:	fa00 f107 	lsl.w	r1, r0, r7
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b0>
 8000be4:	eb1e 0303 	adds.w	r3, lr, r3
 8000be8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bec:	f080 8087 	bcs.w	8000cfe <__udivmoddi4+0x2b2>
 8000bf0:	429c      	cmp	r4, r3
 8000bf2:	f240 8084 	bls.w	8000cfe <__udivmoddi4+0x2b2>
 8000bf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bfa:	4473      	add	r3, lr
 8000bfc:	1b1b      	subs	r3, r3, r4
 8000bfe:	b2ad      	uxth	r5, r5
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c0c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c10:	45a2      	cmp	sl, r4
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1da>
 8000c14:	eb1e 0404 	adds.w	r4, lr, r4
 8000c18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c1c:	d26b      	bcs.n	8000cf6 <__udivmoddi4+0x2aa>
 8000c1e:	45a2      	cmp	sl, r4
 8000c20:	d969      	bls.n	8000cf6 <__udivmoddi4+0x2aa>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4474      	add	r4, lr
 8000c26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c2e:	eba4 040a 	sub.w	r4, r4, sl
 8000c32:	454c      	cmp	r4, r9
 8000c34:	46c2      	mov	sl, r8
 8000c36:	464b      	mov	r3, r9
 8000c38:	d354      	bcc.n	8000ce4 <__udivmoddi4+0x298>
 8000c3a:	d051      	beq.n	8000ce0 <__udivmoddi4+0x294>
 8000c3c:	2e00      	cmp	r6, #0
 8000c3e:	d069      	beq.n	8000d14 <__udivmoddi4+0x2c8>
 8000c40:	ebb1 050a 	subs.w	r5, r1, sl
 8000c44:	eb64 0403 	sbc.w	r4, r4, r3
 8000c48:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c4c:	40fd      	lsrs	r5, r7
 8000c4e:	40fc      	lsrs	r4, r7
 8000c50:	ea4c 0505 	orr.w	r5, ip, r5
 8000c54:	e9c6 5400 	strd	r5, r4, [r6]
 8000c58:	2700      	movs	r7, #0
 8000c5a:	e747      	b.n	8000aec <__udivmoddi4+0xa0>
 8000c5c:	f1c2 0320 	rsb	r3, r2, #32
 8000c60:	fa20 f703 	lsr.w	r7, r0, r3
 8000c64:	4095      	lsls	r5, r2
 8000c66:	fa01 f002 	lsl.w	r0, r1, r2
 8000c6a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c72:	4338      	orrs	r0, r7
 8000c74:	0c01      	lsrs	r1, r0, #16
 8000c76:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c7a:	fa1f f885 	uxth.w	r8, r5
 8000c7e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c86:	fb07 f308 	mul.w	r3, r7, r8
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d907      	bls.n	8000ca2 <__udivmoddi4+0x256>
 8000c92:	1869      	adds	r1, r5, r1
 8000c94:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000c98:	d22f      	bcs.n	8000cfa <__udivmoddi4+0x2ae>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d92d      	bls.n	8000cfa <__udivmoddi4+0x2ae>
 8000c9e:	3f02      	subs	r7, #2
 8000ca0:	4429      	add	r1, r5
 8000ca2:	1acb      	subs	r3, r1, r3
 8000ca4:	b281      	uxth	r1, r0
 8000ca6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000caa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb2:	fb00 f308 	mul.w	r3, r0, r8
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d907      	bls.n	8000cca <__udivmoddi4+0x27e>
 8000cba:	1869      	adds	r1, r5, r1
 8000cbc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cc0:	d217      	bcs.n	8000cf2 <__udivmoddi4+0x2a6>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d915      	bls.n	8000cf2 <__udivmoddi4+0x2a6>
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	4429      	add	r1, r5
 8000cca:	1ac9      	subs	r1, r1, r3
 8000ccc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cd0:	e73b      	b.n	8000b4a <__udivmoddi4+0xfe>
 8000cd2:	4637      	mov	r7, r6
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	e709      	b.n	8000aec <__udivmoddi4+0xa0>
 8000cd8:	4607      	mov	r7, r0
 8000cda:	e6e7      	b.n	8000aac <__udivmoddi4+0x60>
 8000cdc:	4618      	mov	r0, r3
 8000cde:	e6fb      	b.n	8000ad8 <__udivmoddi4+0x8c>
 8000ce0:	4541      	cmp	r1, r8
 8000ce2:	d2ab      	bcs.n	8000c3c <__udivmoddi4+0x1f0>
 8000ce4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ce8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cec:	3801      	subs	r0, #1
 8000cee:	4613      	mov	r3, r2
 8000cf0:	e7a4      	b.n	8000c3c <__udivmoddi4+0x1f0>
 8000cf2:	4660      	mov	r0, ip
 8000cf4:	e7e9      	b.n	8000cca <__udivmoddi4+0x27e>
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	e795      	b.n	8000c26 <__udivmoddi4+0x1da>
 8000cfa:	4667      	mov	r7, ip
 8000cfc:	e7d1      	b.n	8000ca2 <__udivmoddi4+0x256>
 8000cfe:	4681      	mov	r9, r0
 8000d00:	e77c      	b.n	8000bfc <__udivmoddi4+0x1b0>
 8000d02:	3802      	subs	r0, #2
 8000d04:	442c      	add	r4, r5
 8000d06:	e747      	b.n	8000b98 <__udivmoddi4+0x14c>
 8000d08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d0c:	442b      	add	r3, r5
 8000d0e:	e72f      	b.n	8000b70 <__udivmoddi4+0x124>
 8000d10:	4638      	mov	r0, r7
 8000d12:	e708      	b.n	8000b26 <__udivmoddi4+0xda>
 8000d14:	4637      	mov	r7, r6
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0xa0>

08000d18 <__aeabi_idiv0>:
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <strlen>:
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d22:	2a00      	cmp	r2, #0
 8000d24:	d1fb      	bne.n	8000d1e <strlen+0x2>
 8000d26:	1a18      	subs	r0, r3, r0
 8000d28:	3801      	subs	r0, #1
 8000d2a:	4770      	bx	lr
 8000d2c:	0000      	movs	r0, r0
	...

08000d30 <memchr>:
 8000d30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000d34:	2a10      	cmp	r2, #16
 8000d36:	db2b      	blt.n	8000d90 <memchr+0x60>
 8000d38:	f010 0f07 	tst.w	r0, #7
 8000d3c:	d008      	beq.n	8000d50 <memchr+0x20>
 8000d3e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000d42:	3a01      	subs	r2, #1
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d02d      	beq.n	8000da4 <memchr+0x74>
 8000d48:	f010 0f07 	tst.w	r0, #7
 8000d4c:	b342      	cbz	r2, 8000da0 <memchr+0x70>
 8000d4e:	d1f6      	bne.n	8000d3e <memchr+0xe>
 8000d50:	b4f0      	push	{r4, r5, r6, r7}
 8000d52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000d56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000d5a:	f022 0407 	bic.w	r4, r2, #7
 8000d5e:	f07f 0700 	mvns.w	r7, #0
 8000d62:	2300      	movs	r3, #0
 8000d64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000d68:	3c08      	subs	r4, #8
 8000d6a:	ea85 0501 	eor.w	r5, r5, r1
 8000d6e:	ea86 0601 	eor.w	r6, r6, r1
 8000d72:	fa85 f547 	uadd8	r5, r5, r7
 8000d76:	faa3 f587 	sel	r5, r3, r7
 8000d7a:	fa86 f647 	uadd8	r6, r6, r7
 8000d7e:	faa5 f687 	sel	r6, r5, r7
 8000d82:	b98e      	cbnz	r6, 8000da8 <memchr+0x78>
 8000d84:	d1ee      	bne.n	8000d64 <memchr+0x34>
 8000d86:	bcf0      	pop	{r4, r5, r6, r7}
 8000d88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000d8c:	f002 0207 	and.w	r2, r2, #7
 8000d90:	b132      	cbz	r2, 8000da0 <memchr+0x70>
 8000d92:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000d96:	3a01      	subs	r2, #1
 8000d98:	ea83 0301 	eor.w	r3, r3, r1
 8000d9c:	b113      	cbz	r3, 8000da4 <memchr+0x74>
 8000d9e:	d1f8      	bne.n	8000d92 <memchr+0x62>
 8000da0:	2000      	movs	r0, #0
 8000da2:	4770      	bx	lr
 8000da4:	3801      	subs	r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	bf06      	itte	eq
 8000dac:	4635      	moveq	r5, r6
 8000dae:	3803      	subeq	r0, #3
 8000db0:	3807      	subne	r0, #7
 8000db2:	f015 0f01 	tst.w	r5, #1
 8000db6:	d107      	bne.n	8000dc8 <memchr+0x98>
 8000db8:	3001      	adds	r0, #1
 8000dba:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000dbe:	bf02      	ittt	eq
 8000dc0:	3001      	addeq	r0, #1
 8000dc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000dc6:	3001      	addeq	r0, #1
 8000dc8:	bcf0      	pop	{r4, r5, r6, r7}
 8000dca:	3801      	subs	r0, #1
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <__gedf2>:
 8000dd0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000dd4:	e006      	b.n	8000de4 <__cmpdf2+0x4>
 8000dd6:	bf00      	nop

08000dd8 <__ledf2>:
 8000dd8:	f04f 0c01 	mov.w	ip, #1
 8000ddc:	e002      	b.n	8000de4 <__cmpdf2+0x4>
 8000dde:	bf00      	nop

08000de0 <__cmpdf2>:
 8000de0:	f04f 0c01 	mov.w	ip, #1
 8000de4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000de8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000dec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000df0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000df4:	bf18      	it	ne
 8000df6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000dfa:	d01b      	beq.n	8000e34 <__cmpdf2+0x54>
 8000dfc:	b001      	add	sp, #4
 8000dfe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000e02:	bf0c      	ite	eq
 8000e04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000e08:	ea91 0f03 	teqne	r1, r3
 8000e0c:	bf02      	ittt	eq
 8000e0e:	ea90 0f02 	teqeq	r0, r2
 8000e12:	2000      	moveq	r0, #0
 8000e14:	4770      	bxeq	lr
 8000e16:	f110 0f00 	cmn.w	r0, #0
 8000e1a:	ea91 0f03 	teq	r1, r3
 8000e1e:	bf58      	it	pl
 8000e20:	4299      	cmppl	r1, r3
 8000e22:	bf08      	it	eq
 8000e24:	4290      	cmpeq	r0, r2
 8000e26:	bf2c      	ite	cs
 8000e28:	17d8      	asrcs	r0, r3, #31
 8000e2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000e2e:	f040 0001 	orr.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e3c:	d102      	bne.n	8000e44 <__cmpdf2+0x64>
 8000e3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e42:	d107      	bne.n	8000e54 <__cmpdf2+0x74>
 8000e44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e4c:	d1d6      	bne.n	8000dfc <__cmpdf2+0x1c>
 8000e4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000e52:	d0d3      	beq.n	8000dfc <__cmpdf2+0x1c>
 8000e54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <__aeabi_cdrcmple>:
 8000e5c:	4684      	mov	ip, r0
 8000e5e:	4610      	mov	r0, r2
 8000e60:	4662      	mov	r2, ip
 8000e62:	468c      	mov	ip, r1
 8000e64:	4619      	mov	r1, r3
 8000e66:	4663      	mov	r3, ip
 8000e68:	e000      	b.n	8000e6c <__aeabi_cdcmpeq>
 8000e6a:	bf00      	nop

08000e6c <__aeabi_cdcmpeq>:
 8000e6c:	b501      	push	{r0, lr}
 8000e6e:	f7ff ffb7 	bl	8000de0 <__cmpdf2>
 8000e72:	2800      	cmp	r0, #0
 8000e74:	bf48      	it	mi
 8000e76:	f110 0f00 	cmnmi.w	r0, #0
 8000e7a:	bd01      	pop	{r0, pc}

08000e7c <__aeabi_dcmpeq>:
 8000e7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e80:	f7ff fff4 	bl	8000e6c <__aeabi_cdcmpeq>
 8000e84:	bf0c      	ite	eq
 8000e86:	2001      	moveq	r0, #1
 8000e88:	2000      	movne	r0, #0
 8000e8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e8e:	bf00      	nop

08000e90 <__aeabi_dcmplt>:
 8000e90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e94:	f7ff ffea 	bl	8000e6c <__aeabi_cdcmpeq>
 8000e98:	bf34      	ite	cc
 8000e9a:	2001      	movcc	r0, #1
 8000e9c:	2000      	movcs	r0, #0
 8000e9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_dcmple>:
 8000ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea8:	f7ff ffe0 	bl	8000e6c <__aeabi_cdcmpeq>
 8000eac:	bf94      	ite	ls
 8000eae:	2001      	movls	r0, #1
 8000eb0:	2000      	movhi	r0, #0
 8000eb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_dcmpge>:
 8000eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ebc:	f7ff ffce 	bl	8000e5c <__aeabi_cdrcmple>
 8000ec0:	bf94      	ite	ls
 8000ec2:	2001      	movls	r0, #1
 8000ec4:	2000      	movhi	r0, #0
 8000ec6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eca:	bf00      	nop

08000ecc <__aeabi_dcmpgt>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff ffc4 	bl	8000e5c <__aeabi_cdrcmple>
 8000ed4:	bf34      	ite	cc
 8000ed6:	2001      	movcc	r0, #1
 8000ed8:	2000      	movcs	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_dcmpun>:
 8000ee0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ee4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ee8:	d102      	bne.n	8000ef0 <__aeabi_dcmpun+0x10>
 8000eea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000eee:	d10a      	bne.n	8000f06 <__aeabi_dcmpun+0x26>
 8000ef0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ef4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ef8:	d102      	bne.n	8000f00 <__aeabi_dcmpun+0x20>
 8000efa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000efe:	d102      	bne.n	8000f06 <__aeabi_dcmpun+0x26>
 8000f00:	f04f 0000 	mov.w	r0, #0
 8000f04:	4770      	bx	lr
 8000f06:	f04f 0001 	mov.w	r0, #1
 8000f0a:	4770      	bx	lr

08000f0c <__aeabi_d2iz>:
 8000f0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000f10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f14:	d215      	bcs.n	8000f42 <__aeabi_d2iz+0x36>
 8000f16:	d511      	bpl.n	8000f3c <__aeabi_d2iz+0x30>
 8000f18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f20:	d912      	bls.n	8000f48 <__aeabi_d2iz+0x3c>
 8000f22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000f32:	fa23 f002 	lsr.w	r0, r3, r2
 8000f36:	bf18      	it	ne
 8000f38:	4240      	negne	r0, r0
 8000f3a:	4770      	bx	lr
 8000f3c:	f04f 0000 	mov.w	r0, #0
 8000f40:	4770      	bx	lr
 8000f42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f46:	d105      	bne.n	8000f54 <__aeabi_d2iz+0x48>
 8000f48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000f4c:	bf08      	it	eq
 8000f4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f52:	4770      	bx	lr
 8000f54:	f04f 0000 	mov.w	r0, #0
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <get_pitch>:
}

float get_pitch(){

	return pitch;
}
 8000f5c:	4b01      	ldr	r3, [pc, #4]	; (8000f64 <get_pitch+0x8>)
 8000f5e:	ed93 0a00 	vldr	s0, [r3]
 8000f62:	4770      	bx	lr
 8000f64:	20000378 	.word	0x20000378

08000f68 <writeByte>:

//===================================================================================================================
//====== Set of useful function to access acceleration, gyroscope, and temperature data
//===================================================================================================================

void writeByte(uint8_t address_tx, uint8_t subAddress, uint8_t data) {
 8000f68:	b500      	push	{lr}
 8000f6a:	b085      	sub	sp, #20
	uint8_t data_write[2];
	data_write[0] = subAddress;
 8000f6c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_write[1] = data;
 8000f70:	f88d 200d 	strb.w	r2, [sp, #13]
	//i2c.write(address, data_write, 2, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8000f74:	230a      	movs	r3, #10
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2302      	movs	r3, #2
 8000f7a:	aa03      	add	r2, sp, #12
 8000f7c:	4601      	mov	r1, r0
 8000f7e:	4803      	ldr	r0, [pc, #12]	; (8000f8c <writeByte+0x24>)
 8000f80:	f002 f8e0 	bl	8003144 <HAL_I2C_Master_Transmit>
}
 8000f84:	b005      	add	sp, #20
 8000f86:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f8a:	bf00      	nop
 8000f8c:	200002e8 	.word	0x200002e8

08000f90 <readByte>:

//NICK - I've changed these to accept a tx address & a rx address as STM32 boards include the R/W bit at the end of 7 bit adress
//so HAL function takes in 8 bit address including R/W bit
char readByte(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress) {
 8000f90:	b570      	push	{r4, r5, r6, lr}
 8000f92:	b084      	sub	sp, #16
	uint8_t data[1]; // `data` will store the register data
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8000f94:	a904      	add	r1, sp, #16
 8000f96:	f801 2d08 	strb.w	r2, [r1, #-8]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, 1, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8000f9a:	4605      	mov	r5, r0
 8000f9c:	4c09      	ldr	r4, [pc, #36]	; (8000fc4 <readByte+0x34>)
 8000f9e:	260a      	movs	r6, #10
 8000fa0:	9600      	str	r6, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	460a      	mov	r2, r1
 8000fa6:	4601      	mov	r1, r0
 8000fa8:	4620      	mov	r0, r4
 8000faa:	f002 f8cb 	bl	8003144 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 8000fae:	9600      	str	r6, [sp, #0]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	aa03      	add	r2, sp, #12
 8000fb4:	4629      	mov	r1, r5
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f002 f97e 	bl	80032b8 <HAL_I2C_Master_Receive>

	return data[0];
}
 8000fbc:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8000fc0:	b004      	add	sp, #16
 8000fc2:	bd70      	pop	{r4, r5, r6, pc}
 8000fc4:	200002e8 	.word	0x200002e8

08000fc8 <imu_init>:
IMU_StatusTypeDef imu_init(I2C_HandleTypeDef* handle) {
 8000fc8:	b510      	push	{r4, lr}
 8000fca:	4604      	mov	r4, r0
	printf("STM32 Online..\r\n");
 8000fcc:	480f      	ldr	r0, [pc, #60]	; (800100c <imu_init+0x44>)
 8000fce:	f004 fed7 	bl	8005d80 <puts>
	if (HAL_I2C_IsDeviceReady(handle, 0xD0, 2, 100) == HAL_OK) {
 8000fd2:	2364      	movs	r3, #100	; 0x64
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	21d0      	movs	r1, #208	; 0xd0
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f002 fad5 	bl	8003588 <HAL_I2C_IsDeviceReady>
 8000fde:	b100      	cbz	r0, 8000fe2 <imu_init+0x1a>
 8000fe0:	e7fe      	b.n	8000fe0 <imu_init+0x18>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle LED on if so
 8000fe2:	2120      	movs	r1, #32
 8000fe4:	480a      	ldr	r0, [pc, #40]	; (8001010 <imu_init+0x48>)
 8000fe6:	f001 fdc1 	bl	8002b6c <HAL_GPIO_TogglePin>
	uint8_t whoami = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8000fea:	2275      	movs	r2, #117	; 0x75
 8000fec:	21d1      	movs	r1, #209	; 0xd1
 8000fee:	20d0      	movs	r0, #208	; 0xd0
 8000ff0:	f7ff ffce 	bl	8000f90 <readByte>
 8000ff4:	4604      	mov	r4, r0
	if (whoami == 0x71) {
 8000ff6:	2871      	cmp	r0, #113	; 0x71
 8000ff8:	d106      	bne.n	8001008 <imu_init+0x40>
		printf("MPU9250 online..\r\n");
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <imu_init+0x4c>)
 8000ffc:	f004 fec0 	bl	8005d80 <puts>
		printf("whoami reg = %d ..\r\n", whoami);
 8001000:	4621      	mov	r1, r4
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <imu_init+0x50>)
 8001004:	f004 fe48 	bl	8005c98 <iprintf>
}
 8001008:	2000      	movs	r0, #0
 800100a:	bd10      	pop	{r4, pc}
 800100c:	080098a4 	.word	0x080098a4
 8001010:	40020000 	.word	0x40020000
 8001014:	080098b4 	.word	0x080098b4
 8001018:	080098c8 	.word	0x080098c8

0800101c <readBytes>:

void readBytes(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress,
	uint8_t count, uint8_t * dest) {
 800101c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001020:	b088      	sub	sp, #32
 8001022:	4688      	mov	r8, r1
 8001024:	461c      	mov	r4, r3
 8001026:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	uint8_t data[14];
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8001028:	a908      	add	r1, sp, #32
 800102a:	f801 2d14 	strb.w	r2, [r1, #-20]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, count, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 800102e:	4e0e      	ldr	r6, [pc, #56]	; (8001068 <readBytes+0x4c>)
 8001030:	270a      	movs	r7, #10
 8001032:	9700      	str	r7, [sp, #0]
 8001034:	2301      	movs	r3, #1
 8001036:	460a      	mov	r2, r1
 8001038:	4601      	mov	r1, r0
 800103a:	4630      	mov	r0, r6
 800103c:	f002 f882 	bl	8003144 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 8001040:	9700      	str	r7, [sp, #0]
 8001042:	4623      	mov	r3, r4
 8001044:	aa04      	add	r2, sp, #16
 8001046:	4641      	mov	r1, r8
 8001048:	4630      	mov	r0, r6
 800104a:	f002 f935 	bl	80032b8 <HAL_I2C_Master_Receive>

	for (int ii = 0; ii < count; ii++) {
 800104e:	2300      	movs	r3, #0
 8001050:	e005      	b.n	800105e <readBytes+0x42>
		dest[ii] = data[ii];
 8001052:	aa08      	add	r2, sp, #32
 8001054:	441a      	add	r2, r3
 8001056:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800105a:	54ea      	strb	r2, [r5, r3]
	for (int ii = 0; ii < count; ii++) {
 800105c:	3301      	adds	r3, #1
 800105e:	429c      	cmp	r4, r3
 8001060:	dcf7      	bgt.n	8001052 <readBytes+0x36>
	}
}
 8001062:	b008      	add	sp, #32
 8001064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001068:	200002e8 	.word	0x200002e8

0800106c <getMres>:

void getMres() {

	switch (Mscale) {
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <getMres+0x1c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b113      	cbz	r3, 8001078 <getMres+0xc>
 8001072:	2b01      	cmp	r3, #1
 8001074:	d004      	beq.n	8001080 <getMres+0x14>
 8001076:	4770      	bx	lr
	// Possible magnetometer scales (and their register bit settings) are:
	// 14 bit resolution (0) and 16 bit resolution (1)
	case MFS_14BITS:
		mRes = 10.0 * 4219.0 / 8190.0; // Proper scale to return milliGauss
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <getMres+0x20>)
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <getMres+0x24>)
 800107c:	601a      	str	r2, [r3, #0]
		break;
 800107e:	4770      	bx	lr
	case MFS_16BITS:
		mRes = 10.0 * 4219.0 / 32760.0; // Proper scale to return milliGauss
 8001080:	4b02      	ldr	r3, [pc, #8]	; (800108c <getMres+0x20>)
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <getMres+0x28>)
 8001084:	601a      	str	r2, [r3, #0]
		break;
	}
}
 8001086:	4770      	bx	lr
 8001088:	20000001 	.word	0x20000001
 800108c:	20000380 	.word	0x20000380
 8001090:	40a4d84e 	.word	0x40a4d84e
 8001094:	3fa4d84e 	.word	0x3fa4d84e

08001098 <getGres>:

void getGres() {
	switch (Gscale) {
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <getGres+0x30>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b03      	cmp	r3, #3
 800109e:	d812      	bhi.n	80010c6 <getGres+0x2e>
 80010a0:	e8df f003 	tbb	[pc, r3]
 80010a4:	0e0a0602 	.word	0x0e0a0602
	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case GFS_250DPS:
		gRes = 250.0 / 32768.0;
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <getGres+0x34>)
 80010aa:	4a09      	ldr	r2, [pc, #36]	; (80010d0 <getGres+0x38>)
 80010ac:	601a      	str	r2, [r3, #0]
		break;
 80010ae:	4770      	bx	lr
	case GFS_500DPS:
		gRes = 500.0 / 32768.0;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <getGres+0x34>)
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <getGres+0x3c>)
 80010b4:	601a      	str	r2, [r3, #0]
		break;
 80010b6:	4770      	bx	lr
	case GFS_1000DPS:
		gRes = 1000.0 / 32768.0;
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <getGres+0x34>)
 80010ba:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <getGres+0x40>)
 80010bc:	601a      	str	r2, [r3, #0]
		break;
 80010be:	4770      	bx	lr
	case GFS_2000DPS:
		gRes = 2000.0 / 32768.0;
 80010c0:	4b02      	ldr	r3, [pc, #8]	; (80010cc <getGres+0x34>)
 80010c2:	4a06      	ldr	r2, [pc, #24]	; (80010dc <getGres+0x44>)
 80010c4:	601a      	str	r2, [r3, #0]
		break;
	}
}
 80010c6:	4770      	bx	lr
 80010c8:	2000023d 	.word	0x2000023d
 80010cc:	20000364 	.word	0x20000364
 80010d0:	3bfa0000 	.word	0x3bfa0000
 80010d4:	3c7a0000 	.word	0x3c7a0000
 80010d8:	3cfa0000 	.word	0x3cfa0000
 80010dc:	3d7a0000 	.word	0x3d7a0000

080010e0 <getAres>:

void getAres() {
	switch (Ascale) {
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <getAres+0x38>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d816      	bhi.n	8001116 <getAres+0x36>
 80010e8:	e8df f003 	tbb	[pc, r3]
 80010ec:	110c0702 	.word	0x110c0702
	// Possible accelerometer scales (and their register bit settings) are:
	// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case AFS_2G:
		aRes = 2.0 / 32768.0;
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <getAres+0x3c>)
 80010f2:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80010f6:	601a      	str	r2, [r3, #0]
		break;
 80010f8:	4770      	bx	lr
	case AFS_4G:
		aRes = 4.0 / 32768.0;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <getAres+0x3c>)
 80010fc:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001100:	601a      	str	r2, [r3, #0]
		break;
 8001102:	4770      	bx	lr
	case AFS_8G:
		aRes = 8.0 / 32768.0;
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <getAres+0x3c>)
 8001106:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800110a:	601a      	str	r2, [r3, #0]
		break;
 800110c:	4770      	bx	lr
	case AFS_16G:
		aRes = 16.0 / 32768.0;
 800110e:	4b03      	ldr	r3, [pc, #12]	; (800111c <getAres+0x3c>)
 8001110:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001114:	601a      	str	r2, [r3, #0]
		break;
	}
}
 8001116:	4770      	bx	lr
 8001118:	2000023c 	.word	0x2000023c
 800111c:	20000358 	.word	0x20000358

08001120 <readAccelData>:

void readAccelData(int16_t * destination) {
 8001120:	b510      	push	{r4, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 8001126:	ab02      	add	r3, sp, #8
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2306      	movs	r3, #6
 800112c:	223b      	movs	r2, #59	; 0x3b
 800112e:	21d1      	movs	r1, #209	; 0xd1
 8001130:	20d0      	movs	r0, #208	; 0xd0
 8001132:	f7ff ff73 	bl	800101c <readBytes>
			&rawData[0]); // Read the six raw data registers into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001136:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800113a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800113e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001142:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001144:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8001148:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800114c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001150:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001152:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8001156:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800115a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800115e:	80a3      	strh	r3, [r4, #4]
}
 8001160:	b004      	add	sp, #16
 8001162:	bd10      	pop	{r4, pc}

08001164 <readGyroData>:

void readGyroData(int16_t * destination) {
 8001164:	b510      	push	{r4, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 800116a:	ab02      	add	r3, sp, #8
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2306      	movs	r3, #6
 8001170:	2243      	movs	r2, #67	; 0x43
 8001172:	21d1      	movs	r1, #209	; 0xd1
 8001174:	20d0      	movs	r0, #208	; 0xd0
 8001176:	f7ff ff51 	bl	800101c <readBytes>
			&rawData[0]); // Read the six raw data registers sequentially into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800117a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800117e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001182:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001186:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001188:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800118c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001190:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001194:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001196:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800119a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800119e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011a2:	80a3      	strh	r3, [r4, #4]
}
 80011a4:	b004      	add	sp, #16
 80011a6:	bd10      	pop	{r4, pc}

080011a8 <readMagData>:

void readMagData(int16_t * destination) {
 80011a8:	b510      	push	{r4, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	4604      	mov	r4, r0
	uint8_t rawData[7]; // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if (readByte(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
 80011ae:	2202      	movs	r2, #2
 80011b0:	2119      	movs	r1, #25
 80011b2:	2018      	movs	r0, #24
 80011b4:	f7ff feec 	bl	8000f90 <readByte>
 80011b8:	f010 0f01 	tst.w	r0, #1
 80011bc:	d101      	bne.n	80011c2 <readMagData+0x1a>
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
			destination[2] =
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
		}
	}
}
 80011be:	b004      	add	sp, #16
 80011c0:	bd10      	pop	{r4, pc}
		readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_XOUT_L, 7,
 80011c2:	ab02      	add	r3, sp, #8
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2307      	movs	r3, #7
 80011c8:	2203      	movs	r2, #3
 80011ca:	2119      	movs	r1, #25
 80011cc:	2018      	movs	r0, #24
 80011ce:	f7ff ff25 	bl	800101c <readBytes>
		uint8_t c = rawData[6]; // End data read by reading ST2 register
 80011d2:	f89d 300e 	ldrb.w	r3, [sp, #14]
		if (!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
 80011d6:	f013 0f08 	tst.w	r3, #8
 80011da:	d1f0      	bne.n	80011be <readMagData+0x16>
					(int16_t) (((int16_t) rawData[1] << 8) | rawData[0]); // Turn the MSB and LSB into a signed 16-bit value
 80011dc:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80011e0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80011e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[0] =
 80011e8:	8023      	strh	r3, [r4, #0]
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
 80011ea:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80011ee:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80011f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[1] =
 80011f6:	8063      	strh	r3, [r4, #2]
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
 80011f8:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80011fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001200:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[2] =
 8001204:	80a3      	strh	r3, [r4, #4]
}
 8001206:	e7da      	b.n	80011be <readMagData+0x16>

08001208 <resetMPU9250>:
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, TEMP_OUT_H, 2,
			&rawData[0]); // Read the two raw data registers sequentially into data array
	return (int16_t) (((int16_t) rawData[0]) << 8 | rawData[1]); // Turn the MSB and LSB into a 16-bit value
}

void resetMPU9250() {
 8001208:	b508      	push	{r3, lr}
	// reset device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	216b      	movs	r1, #107	; 0x6b
 800120e:	20d0      	movs	r0, #208	; 0xd0
 8001210:	f7ff feaa 	bl	8000f68 <writeByte>
	HAL_Delay(100);
 8001214:	2064      	movs	r0, #100	; 0x64
 8001216:	f001 fb53 	bl	80028c0 <HAL_Delay>
}
 800121a:	bd08      	pop	{r3, pc}

0800121c <initAK8963>:

void initAK8963(float * destination) {
 800121c:	b510      	push	{r4, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	4604      	mov	r4, r0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 8001222:	2200      	movs	r2, #0
 8001224:	210a      	movs	r1, #10
 8001226:	2018      	movs	r0, #24
 8001228:	f7ff fe9e 	bl	8000f68 <writeByte>
	HAL_Delay(10);
 800122c:	200a      	movs	r0, #10
 800122e:	f001 fb47 	bl	80028c0 <HAL_Delay>
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8001232:	220f      	movs	r2, #15
 8001234:	210a      	movs	r1, #10
 8001236:	2018      	movs	r0, #24
 8001238:	f7ff fe96 	bl	8000f68 <writeByte>
	HAL_Delay(10);
 800123c:	200a      	movs	r0, #10
 800123e:	f001 fb3f 	bl	80028c0 <HAL_Delay>
	readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ASAX, 3,
 8001242:	ab03      	add	r3, sp, #12
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2303      	movs	r3, #3
 8001248:	2210      	movs	r2, #16
 800124a:	2119      	movs	r1, #25
 800124c:	2018      	movs	r0, #24
 800124e:	f7ff fee5 	bl	800101c <readBytes>
			&rawData[0]);  // Read the x-, y-, and z-axis calibration values
	destination[0] = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 8001252:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001256:	3b80      	subs	r3, #128	; 0x80
 8001258:	ee07 3a10 	vmov	s14, r3
 800125c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001260:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80012d8 <initAK8963+0xbc>
 8001264:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001268:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800126c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001270:	ed84 7a00 	vstr	s14, [r4]
	destination[1] = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8001274:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001278:	3b80      	subs	r3, #128	; 0x80
 800127a:	ee07 3a10 	vmov	s14, r3
 800127e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001282:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001286:	ee37 7a26 	vadd.f32	s14, s14, s13
 800128a:	ed84 7a01 	vstr	s14, [r4, #4]
	destination[2] = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 800128e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001292:	3b80      	subs	r3, #128	; 0x80
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129c:	ee67 7a86 	vmul.f32	s15, s15, s12
 80012a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80012a4:	edc4 7a02 	vstr	s15, [r4, #8]
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 80012a8:	2200      	movs	r2, #0
 80012aa:	210a      	movs	r1, #10
 80012ac:	2018      	movs	r0, #24
 80012ae:	f7ff fe5b 	bl	8000f68 <writeByte>
	HAL_Delay(10);
 80012b2:	200a      	movs	r0, #10
 80012b4:	f001 fb04 	bl	80028c0 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <initAK8963+0xc0>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <initAK8963+0xc4>)
 80012be:	7812      	ldrb	r2, [r2, #0]
 80012c0:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	210a      	movs	r1, #10
 80012c8:	2018      	movs	r0, #24
 80012ca:	f7ff fe4d 	bl	8000f68 <writeByte>
	HAL_Delay(10);
 80012ce:	200a      	movs	r0, #10
 80012d0:	f001 faf6 	bl	80028c0 <HAL_Delay>
}
 80012d4:	b004      	add	sp, #16
 80012d6:	bd10      	pop	{r4, pc}
 80012d8:	3b800000 	.word	0x3b800000
 80012dc:	20000001 	.word	0x20000001
 80012e0:	20000000 	.word	0x20000000

080012e4 <initMPU9250>:

void initMPU9250() {
 80012e4:	b510      	push	{r4, lr}
	// Initialize MPU9250 device
	// wake up device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80012e6:	2200      	movs	r2, #0
 80012e8:	216b      	movs	r1, #107	; 0x6b
 80012ea:	20d0      	movs	r0, #208	; 0xd0
 80012ec:	f7ff fe3c 	bl	8000f68 <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 80012f0:	2064      	movs	r0, #100	; 0x64
 80012f2:	f001 fae5 	bl	80028c0 <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01); // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 80012f6:	2201      	movs	r2, #1
 80012f8:	216b      	movs	r1, #107	; 0x6b
 80012fa:	20d0      	movs	r0, #208	; 0xd0
 80012fc:	f7ff fe34 	bl	8000f68 <writeByte>

	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	// DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
	// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x03);
 8001300:	2203      	movs	r2, #3
 8001302:	211a      	movs	r1, #26
 8001304:	20d0      	movs	r0, #208	; 0xd0
 8001306:	f7ff fe2f 	bl	8000f68 <writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x04); // Use a 200 Hz rate; the same rate set in CONFIG above
 800130a:	2204      	movs	r2, #4
 800130c:	2119      	movs	r1, #25
 800130e:	20d0      	movs	r0, #208	; 0xd0
 8001310:	f7ff fe2a 	bl	8000f68 <writeByte>

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX,
 8001314:	221b      	movs	r2, #27
 8001316:	21d1      	movs	r1, #209	; 0xd1
 8001318:	4608      	mov	r0, r1
 800131a:	f7ff fe39 	bl	8000f90 <readByte>
 800131e:	4604      	mov	r4, r0
	GYRO_CONFIG);
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8001320:	f000 021f 	and.w	r2, r0, #31
 8001324:	211b      	movs	r1, #27
 8001326:	20d0      	movs	r0, #208	; 0xd0
 8001328:	f7ff fe1e 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 800132c:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 8001330:	211b      	movs	r1, #27
 8001332:	20d0      	movs	r0, #208	; 0xd0
 8001334:	f7ff fe18 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro
 8001338:	4b20      	ldr	r3, [pc, #128]	; (80013bc <initMPU9250+0xd8>)
 800133a:	781a      	ldrb	r2, [r3, #0]
 800133c:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	211b      	movs	r1, #27
 8001344:	20d0      	movs	r0, #208	; 0xd0
 8001346:	f7ff fe0f 	bl	8000f68 <writeByte>

	// Set accelerometer configuration
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG);
 800134a:	221c      	movs	r2, #28
 800134c:	21d1      	movs	r1, #209	; 0xd1
 800134e:	4608      	mov	r0, r1
 8001350:	f7ff fe1e 	bl	8000f90 <readByte>
 8001354:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8001356:	f000 021f 	and.w	r2, r0, #31
 800135a:	211c      	movs	r1, #28
 800135c:	20d0      	movs	r0, #208	; 0xd0
 800135e:	f7ff fe03 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001362:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 8001366:	211c      	movs	r1, #28
 8001368:	20d0      	movs	r0, #208	; 0xd0
 800136a:	f7ff fdfd 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 800136e:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <initMPU9250+0xdc>)
 8001370:	781a      	ldrb	r2, [r3, #0]
 8001372:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	211c      	movs	r1, #28
 800137a:	20d0      	movs	r0, #208	; 0xd0
 800137c:	f7ff fdf4 	bl	8000f68 <writeByte>

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG2);
 8001380:	221d      	movs	r2, #29
 8001382:	21d1      	movs	r1, #209	; 0xd1
 8001384:	4608      	mov	r0, r1
 8001386:	f7ff fe03 	bl	8000f90 <readByte>
 800138a:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 800138c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001390:	211d      	movs	r1, #29
 8001392:	20d0      	movs	r0, #208	; 0xd0
 8001394:	f7ff fde8 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c | 0x03); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001398:	f044 0203 	orr.w	r2, r4, #3
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	211d      	movs	r1, #29
 80013a0:	20d0      	movs	r0, #208	; 0xd0
 80013a2:	f7ff fde1 	bl	8000f68 <writeByte>
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	writeByte(MPU9250_ADDRESS_TX, INT_PIN_CFG, 0x22);
 80013a6:	2222      	movs	r2, #34	; 0x22
 80013a8:	2137      	movs	r1, #55	; 0x37
 80013aa:	20d0      	movs	r0, #208	; 0xd0
 80013ac:	f7ff fddc 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 80013b0:	2201      	movs	r2, #1
 80013b2:	2138      	movs	r1, #56	; 0x38
 80013b4:	20d0      	movs	r0, #208	; 0xd0
 80013b6:	f7ff fdd7 	bl	8000f68 <writeByte>
}
 80013ba:	bd10      	pop	{r4, pc}
 80013bc:	2000023d 	.word	0x2000023d
 80013c0:	2000023c 	.word	0x2000023c

080013c4 <calibrateMPU9250>:

// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(float * dest1, float * dest2) {
 80013c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c8:	b08c      	sub	sp, #48	; 0x30
 80013ca:	4607      	mov	r7, r0
 80013cc:	460e      	mov	r6, r1
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = { 0, 0, 0 }, accel_bias[3] = { 0, 0, 0 };
 80013ce:	2400      	movs	r4, #0
 80013d0:	9406      	str	r4, [sp, #24]
 80013d2:	9407      	str	r4, [sp, #28]
 80013d4:	9408      	str	r4, [sp, #32]
 80013d6:	9403      	str	r4, [sp, #12]
 80013d8:	9404      	str	r4, [sp, #16]
 80013da:	9405      	str	r4, [sp, #20]

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80013dc:	2280      	movs	r2, #128	; 0x80
 80013de:	216b      	movs	r1, #107	; 0x6b
 80013e0:	20d0      	movs	r0, #208	; 0xd0
 80013e2:	f7ff fdc1 	bl	8000f68 <writeByte>
	HAL_Delay(100);
 80013e6:	2064      	movs	r0, #100	; 0x64
 80013e8:	f001 fa6a 	bl	80028c0 <HAL_Delay>

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01);
 80013ec:	2201      	movs	r2, #1
 80013ee:	216b      	movs	r1, #107	; 0x6b
 80013f0:	20d0      	movs	r0, #208	; 0xd0
 80013f2:	f7ff fdb9 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_2, 0x00);
 80013f6:	4622      	mov	r2, r4
 80013f8:	216c      	movs	r1, #108	; 0x6c
 80013fa:	20d0      	movs	r0, #208	; 0xd0
 80013fc:	f7ff fdb4 	bl	8000f68 <writeByte>
	HAL_Delay(200);
 8001400:	20c8      	movs	r0, #200	; 0xc8
 8001402:	f001 fa5d 	bl	80028c0 <HAL_Delay>

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x00); // Disable all interrupts
 8001406:	4622      	mov	r2, r4
 8001408:	2138      	movs	r1, #56	; 0x38
 800140a:	20d0      	movs	r0, #208	; 0xd0
 800140c:	f7ff fdac 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x00);      // Disable FIFO
 8001410:	4622      	mov	r2, r4
 8001412:	2123      	movs	r1, #35	; 0x23
 8001414:	20d0      	movs	r0, #208	; 0xd0
 8001416:	f7ff fda7 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Turn on internal clock source
 800141a:	4622      	mov	r2, r4
 800141c:	216b      	movs	r1, #107	; 0x6b
 800141e:	20d0      	movs	r0, #208	; 0xd0
 8001420:	f7ff fda2 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, I2C_MST_CTRL, 0x00); // Disable I2C master
 8001424:	4622      	mov	r2, r4
 8001426:	2124      	movs	r1, #36	; 0x24
 8001428:	20d0      	movs	r0, #208	; 0xd0
 800142a:	f7ff fd9d 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x00); // Disable FIFO and I2C master modes
 800142e:	4622      	mov	r2, r4
 8001430:	216a      	movs	r1, #106	; 0x6a
 8001432:	20d0      	movs	r0, #208	; 0xd0
 8001434:	f7ff fd98 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8001438:	220c      	movs	r2, #12
 800143a:	216a      	movs	r1, #106	; 0x6a
 800143c:	20d0      	movs	r0, #208	; 0xd0
 800143e:	f7ff fd93 	bl	8000f68 <writeByte>
	HAL_Delay(15);
 8001442:	200f      	movs	r0, #15
 8001444:	f001 fa3c 	bl	80028c0 <HAL_Delay>

	// Configure MPU9250 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x01); // Set low-pass filter to 188 Hz
 8001448:	2201      	movs	r2, #1
 800144a:	211a      	movs	r1, #26
 800144c:	20d0      	movs	r0, #208	; 0xd0
 800144e:	f7ff fd8b 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Set sample rate to 1 kHz
 8001452:	4622      	mov	r2, r4
 8001454:	2119      	movs	r1, #25
 8001456:	20d0      	movs	r0, #208	; 0xd0
 8001458:	f7ff fd86 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00); // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 800145c:	4622      	mov	r2, r4
 800145e:	211b      	movs	r1, #27
 8001460:	20d0      	movs	r0, #208	; 0xd0
 8001462:	f7ff fd81 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001466:	4622      	mov	r2, r4
 8001468:	211c      	movs	r1, #28
 800146a:	20d0      	movs	r0, #208	; 0xd0
 800146c:	f7ff fd7c 	bl	8000f68 <writeByte>

	uint16_t gyrosensitivity = 131;   // = 131 LSB/degrees/sec
	uint16_t accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x40);   // Enable FIFO
 8001470:	2240      	movs	r2, #64	; 0x40
 8001472:	216a      	movs	r1, #106	; 0x6a
 8001474:	20d0      	movs	r0, #208	; 0xd0
 8001476:	f7ff fd77 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x78); // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 800147a:	2278      	movs	r2, #120	; 0x78
 800147c:	2123      	movs	r1, #35	; 0x23
 800147e:	20d0      	movs	r0, #208	; 0xd0
 8001480:	f7ff fd72 	bl	8000f68 <writeByte>
	HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8001484:	2028      	movs	r0, #40	; 0x28
 8001486:	f001 fa1b 	bl	80028c0 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x00); // Disable gyro and accelerometer sensors for FIFO
 800148a:	4622      	mov	r2, r4
 800148c:	2123      	movs	r1, #35	; 0x23
 800148e:	20d0      	movs	r0, #208	; 0xd0
 8001490:	f7ff fd6a 	bl	8000f68 <writeByte>
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8001494:	ab09      	add	r3, sp, #36	; 0x24
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2302      	movs	r3, #2
 800149a:	2272      	movs	r2, #114	; 0x72
 800149c:	21d1      	movs	r1, #209	; 0xd1
 800149e:	20d0      	movs	r0, #208	; 0xd0
 80014a0:	f7ff fdbc 	bl	800101c <readBytes>
	fifo_count = ((uint16_t) data[0] << 8) | data[1];
 80014a4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80014a8:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 80014ac:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	packet_count = fifo_count / 12; // How many sets of full gyro and accelerometer data for averaging
 80014b0:	4b6d      	ldr	r3, [pc, #436]	; (8001668 <calibrateMPU9250+0x2a4>)
 80014b2:	fba3 3505 	umull	r3, r5, r3, r5
 80014b6:	08ed      	lsrs	r5, r5, #3

	for (ii = 0; ii < packet_count; ii++) {
 80014b8:	e045      	b.n	8001546 <calibrateMPU9250+0x182>
		int16_t accel_temp[3] = { 0, 0, 0 }, gyro_temp[3] = { 0, 0, 0 };
		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, FIFO_R_W, 12,
 80014ba:	ab09      	add	r3, sp, #36	; 0x24
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	230c      	movs	r3, #12
 80014c0:	2274      	movs	r2, #116	; 0x74
 80014c2:	21d1      	movs	r1, #209	; 0xd1
 80014c4:	20d0      	movs	r0, #208	; 0xd0
 80014c6:	f7ff fda9 	bl	800101c <readBytes>
				&data[0]); // read data for averaging
		accel_temp[0] = (int16_t) (((int16_t) data[0] << 8) | data[1]); // Form signed 16-bit integer for each sample in FIFO
 80014ca:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 80014ce:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
 80014d2:	ea40 2808 	orr.w	r8, r0, r8, lsl #8
		accel_temp[1] = (int16_t) (((int16_t) data[2] << 8) | data[3]);
 80014d6:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
 80014da:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 80014de:	ea40 2e0e 	orr.w	lr, r0, lr, lsl #8
		accel_temp[2] = (int16_t) (((int16_t) data[4] << 8) | data[5]);
 80014e2:	f89d c028 	ldrb.w	ip, [sp, #40]	; 0x28
 80014e6:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 80014ea:	ea40 2c0c 	orr.w	ip, r0, ip, lsl #8
		gyro_temp[0] = (int16_t) (((int16_t) data[6] << 8) | data[7]);
 80014ee:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 80014f2:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
 80014f6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
		gyro_temp[1] = (int16_t) (((int16_t) data[8] << 8) | data[9]);
 80014fa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80014fe:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8001502:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		gyro_temp[2] = (int16_t) (((int16_t) data[10] << 8) | data[11]);
 8001506:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 800150a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800150e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001512:	9803      	ldr	r0, [sp, #12]
 8001514:	fa00 f088 	sxtah	r0, r0, r8
 8001518:	9003      	str	r0, [sp, #12]
		accel_bias[1] += (int32_t) accel_temp[1];
 800151a:	9804      	ldr	r0, [sp, #16]
 800151c:	fa00 f08e 	sxtah	r0, r0, lr
 8001520:	9004      	str	r0, [sp, #16]
		accel_bias[2] += (int32_t) accel_temp[2];
 8001522:	9805      	ldr	r0, [sp, #20]
 8001524:	fa00 f08c 	sxtah	r0, r0, ip
 8001528:	9005      	str	r0, [sp, #20]
		gyro_bias[0] += (int32_t) gyro_temp[0];
 800152a:	9806      	ldr	r0, [sp, #24]
 800152c:	fa00 f181 	sxtah	r1, r0, r1
 8001530:	9106      	str	r1, [sp, #24]
		gyro_bias[1] += (int32_t) gyro_temp[1];
 8001532:	9907      	ldr	r1, [sp, #28]
 8001534:	fa01 f282 	sxtah	r2, r1, r2
 8001538:	9207      	str	r2, [sp, #28]
		gyro_bias[2] += (int32_t) gyro_temp[2];
 800153a:	9a08      	ldr	r2, [sp, #32]
 800153c:	fa02 f383 	sxtah	r3, r2, r3
 8001540:	9308      	str	r3, [sp, #32]
	for (ii = 0; ii < packet_count; ii++) {
 8001542:	3401      	adds	r4, #1
 8001544:	b2a4      	uxth	r4, r4
 8001546:	42ac      	cmp	r4, r5
 8001548:	d3b7      	bcc.n	80014ba <calibrateMPU9250+0xf6>

	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 800154a:	9b03      	ldr	r3, [sp, #12]
 800154c:	fb93 f8f5 	sdiv	r8, r3, r5
	accel_bias[1] /= (int32_t) packet_count;
 8001550:	9b04      	ldr	r3, [sp, #16]
 8001552:	fb93 f4f5 	sdiv	r4, r3, r5
	accel_bias[2] /= (int32_t) packet_count;
 8001556:	9805      	ldr	r0, [sp, #20]
 8001558:	fb90 f0f5 	sdiv	r0, r0, r5
	gyro_bias[0] /= (int32_t) packet_count;
 800155c:	9906      	ldr	r1, [sp, #24]
 800155e:	fb91 f1f5 	sdiv	r1, r1, r5
	gyro_bias[1] /= (int32_t) packet_count;
 8001562:	9a07      	ldr	r2, [sp, #28]
 8001564:	fb92 f2f5 	sdiv	r2, r2, r5
	gyro_bias[2] /= (int32_t) packet_count;
 8001568:	9b08      	ldr	r3, [sp, #32]
 800156a:	fb93 f5f5 	sdiv	r5, r3, r5

	if (accel_bias[2] > 0L) {
 800156e:	2800      	cmp	r0, #0
 8001570:	dd4f      	ble.n	8001612 <calibrateMPU9250+0x24e>
		accel_bias[2] -= (int32_t) accelsensitivity;
 8001572:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 8001576:	9005      	str	r0, [sp, #20]
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
	}

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001578:	424b      	negs	r3, r1
 800157a:	2b00      	cmp	r3, #0
 800157c:	db4d      	blt.n	800161a <calibrateMPU9250+0x256>
 800157e:	1098      	asrs	r0, r3, #2
 8001580:	129b      	asrs	r3, r3, #10
 8001582:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data[1] = (-gyro_bias[0] / 4) & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8001586:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
	data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 800158a:	4253      	negs	r3, r2
 800158c:	2b00      	cmp	r3, #0
 800158e:	db46      	blt.n	800161e <calibrateMPU9250+0x25a>
 8001590:	1098      	asrs	r0, r3, #2
 8001592:	129b      	asrs	r3, r3, #10
 8001594:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	data[3] = (-gyro_bias[1] / 4) & 0xFF;
 8001598:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
	data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 800159c:	426b      	negs	r3, r5
 800159e:	2b00      	cmp	r3, #0
 80015a0:	db3f      	blt.n	8001622 <calibrateMPU9250+0x25e>
 80015a2:	1098      	asrs	r0, r3, #2
 80015a4:	129b      	asrs	r3, r3, #10
 80015a6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	data[5] = (-gyro_bias[2] / 4) & 0xFF;
 80015aa:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
	 writeByte(MPU9250_ADDRESS_TX, YG_OFFSET_H, data[2]);
	 writeByte(MPU9250_ADDRESS_TX, YG_OFFSET_L, data[3]);
	 writeByte(MPU9250_ADDRESS_TX, ZG_OFFSET_H, data[4]);
	 writeByte(MPU9250_ADDRESS_TX, ZG_OFFSET_L, data[5]);
	 */
	dest1[0] = (float) gyro_bias[0] / (float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 80015ae:	ee07 1a90 	vmov	s15, r1
 80015b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800166c <calibrateMPU9250+0x2a8>
 80015ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015be:	edc7 6a00 	vstr	s13, [r7]
	dest1[1] = (float) gyro_bias[1] / (float) gyrosensitivity;
 80015c2:	ee07 2a90 	vmov	s15, r2
 80015c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015ce:	edc7 6a01 	vstr	s13, [r7, #4]
	dest1[2] = (float) gyro_bias[2] / (float) gyrosensitivity;
 80015d2:	ee07 5a90 	vmov	s15, r5
 80015d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015de:	edc7 6a02 	vstr	s13, [r7, #8]
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = { 0, 0, 0 }; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 80015e2:	ad09      	add	r5, sp, #36	; 0x24
 80015e4:	9500      	str	r5, [sp, #0]
 80015e6:	2302      	movs	r3, #2
 80015e8:	2277      	movs	r2, #119	; 0x77
 80015ea:	21d1      	movs	r1, #209	; 0xd1
 80015ec:	20d0      	movs	r0, #208	; 0xd0
 80015ee:	f7ff fd15 	bl	800101c <readBytes>
	accel_bias_reg[0] = (int16_t) ((int16_t) data[0] << 8) | data[1];
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, YA_OFFSET_H, 2, &data[0]);
 80015f2:	9500      	str	r5, [sp, #0]
 80015f4:	2302      	movs	r3, #2
 80015f6:	227a      	movs	r2, #122	; 0x7a
 80015f8:	21d1      	movs	r1, #209	; 0xd1
 80015fa:	20d0      	movs	r0, #208	; 0xd0
 80015fc:	f7ff fd0e 	bl	800101c <readBytes>
	accel_bias_reg[1] = (int16_t) ((int16_t) data[0] << 8) | data[1];
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ZA_OFFSET_H, 2, &data[0]);
 8001600:	9500      	str	r5, [sp, #0]
 8001602:	2302      	movs	r3, #2
 8001604:	227d      	movs	r2, #125	; 0x7d
 8001606:	21d1      	movs	r1, #209	; 0xd1
 8001608:	20d0      	movs	r0, #208	; 0xd0
 800160a:	f7ff fd07 	bl	800101c <readBytes>
	accel_bias_reg[2] = (int16_t) ((int16_t) data[0] << 8) | data[1];

	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = { 0, 0, 0 }; // Define array to hold mask bit for each accelerometer bias axis

	for (ii = 0; ii < 3; ii++) {
 800160e:	2300      	movs	r3, #0
 8001610:	e00b      	b.n	800162a <calibrateMPU9250+0x266>
		accel_bias[2] += (int32_t) accelsensitivity;
 8001612:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8001616:	9005      	str	r0, [sp, #20]
 8001618:	e7ae      	b.n	8001578 <calibrateMPU9250+0x1b4>
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 800161a:	3303      	adds	r3, #3
 800161c:	e7af      	b.n	800157e <calibrateMPU9250+0x1ba>
	data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 800161e:	3303      	adds	r3, #3
 8001620:	e7b6      	b.n	8001590 <calibrateMPU9250+0x1cc>
	data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 8001622:	3303      	adds	r3, #3
 8001624:	e7bd      	b.n	80015a2 <calibrateMPU9250+0x1de>
	for (ii = 0; ii < 3; ii++) {
 8001626:	3301      	adds	r3, #1
 8001628:	b29b      	uxth	r3, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d9fb      	bls.n	8001626 <calibrateMPU9250+0x262>
	 writeByte(MPU9250_ADDRESS_TX, YA_OFFSET_L, data[3]);
	 writeByte(MPU9250_ADDRESS_TX, ZA_OFFSET_H, data[4]);
	 writeByte(MPU9250_ADDRESS_TX, ZA_OFFSET_L, data[5]);
	 */
	// Output scaled accelerometer biases for manual subtraction in the main program
	dest2[0] = (float) accel_bias[0] / (float) accelsensitivity;
 800162e:	ee07 8a90 	vmov	s15, r8
 8001632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001636:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001670 <calibrateMPU9250+0x2ac>
 800163a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800163e:	edc6 7a00 	vstr	s15, [r6]
	dest2[1] = (float) accel_bias[1] / (float) accelsensitivity;
 8001642:	ee07 4a90 	vmov	s15, r4
 8001646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800164e:	edc6 7a01 	vstr	s15, [r6, #4]
	dest2[2] = (float) accel_bias[2] / (float) accelsensitivity;
 8001652:	eddd 7a05 	vldr	s15, [sp, #20]
 8001656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800165a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800165e:	edc6 7a02 	vstr	s15, [r6, #8]
}
 8001662:	b00c      	add	sp, #48	; 0x30
 8001664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001668:	aaaaaaab 	.word	0xaaaaaaab
 800166c:	43030000 	.word	0x43030000
 8001670:	38800000 	.word	0x38800000
 8001674:	00000000 	.word	0x00000000

08001678 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
		{
 8001678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800167c:	ed2d 8b08 	vpush	{d8-d11}
 8001680:	b093      	sub	sp, #76	; 0x4c
 8001682:	4605      	mov	r5, r0
	uint8_t rawData[6] = { 0, 0, 0, 0, 0, 0 };
 8001684:	2400      	movs	r4, #0
 8001686:	9410      	str	r4, [sp, #64]	; 0x40
 8001688:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
	uint8_t selfTest[6];
	int16_t gAvg[3], aAvg[3], aSTAvg[3], gSTAvg[3];
	float factoryTrim[6];
	uint8_t FS = 0;

	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 800168c:	4622      	mov	r2, r4
 800168e:	2119      	movs	r1, #25
 8001690:	20d0      	movs	r0, #208	; 0xd0
 8001692:	f7ff fc69 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8001696:	2202      	movs	r2, #2
 8001698:	211a      	movs	r1, #26
 800169a:	20d0      	movs	r0, #208	; 0xd0
 800169c:	f7ff fc64 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 1 << FS); // Set full scale range for the gyro to 250 dps
 80016a0:	2201      	movs	r2, #1
 80016a2:	211b      	movs	r1, #27
 80016a4:	20d0      	movs	r0, #208	; 0xd0
 80016a6:	f7ff fc5f 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80016aa:	2202      	movs	r2, #2
 80016ac:	211d      	movs	r1, #29
 80016ae:	20d0      	movs	r0, #208	; 0xd0
 80016b0:	f7ff fc5a 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 1 << FS); // Set full scale range for the accelerometer to 2 g
 80016b4:	2201      	movs	r2, #1
 80016b6:	211c      	movs	r1, #28
 80016b8:	20d0      	movs	r0, #208	; 0xd0
 80016ba:	f7ff fc55 	bl	8000f68 <writeByte>

	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 80016be:	e051      	b.n	8001764 <MPU9250SelfTest+0xec>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 80016c0:	ae10      	add	r6, sp, #64	; 0x40
 80016c2:	9600      	str	r6, [sp, #0]
 80016c4:	2306      	movs	r3, #6
 80016c6:	223b      	movs	r2, #59	; 0x3b
 80016c8:	21d1      	movs	r1, #209	; 0xd1
 80016ca:	20d0      	movs	r0, #208	; 0xd0
 80016cc:	f7ff fca6 	bl	800101c <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80016d0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80016d4:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80016d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016dc:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80016e0:	4413      	add	r3, r2
 80016e2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		aAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80016e6:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80016ea:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80016ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016f2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80016f6:	4413      	add	r3, r2
 80016f8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		aAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80016fc:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001700:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001704:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001708:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800170c:	4413      	add	r3, r2
 800170e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 8001712:	9600      	str	r6, [sp, #0]
 8001714:	2306      	movs	r3, #6
 8001716:	2243      	movs	r2, #67	; 0x43
 8001718:	21d1      	movs	r1, #209	; 0xd1
 800171a:	20d0      	movs	r0, #208	; 0xd0
 800171c:	f7ff fc7e 	bl	800101c <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001720:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001724:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001728:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800172c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8001730:	4413      	add	r3, r2
 8001732:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		gAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001736:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 800173a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800173e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001742:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8001746:	4413      	add	r3, r2
 8001748:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		gAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800174c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001750:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001754:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001758:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800175c:	4413      	add	r3, r2
 800175e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 8001762:	3401      	adds	r4, #1
 8001764:	2cc7      	cmp	r4, #199	; 0xc7
 8001766:	ddab      	ble.n	80016c0 <MPU9250SelfTest+0x48>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8001768:	2400      	movs	r4, #0
 800176a:	e016      	b.n	800179a <MPU9250SelfTest+0x122>
		aAvg[ii] /= 200;
 800176c:	ab12      	add	r3, sp, #72	; 0x48
 800176e:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 8001772:	f931 2c18 	ldrsh.w	r2, [r1, #-24]
 8001776:	48c0      	ldr	r0, [pc, #768]	; (8001a78 <MPU9250SelfTest+0x400>)
 8001778:	fb80 6302 	smull	r6, r3, r0, r2
 800177c:	17d2      	asrs	r2, r2, #31
 800177e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8001782:	f821 2c18 	strh.w	r2, [r1, #-24]
		gAvg[ii] /= 200;
 8001786:	f931 3c10 	ldrsh.w	r3, [r1, #-16]
 800178a:	fb80 2003 	smull	r2, r0, r0, r3
 800178e:	17db      	asrs	r3, r3, #31
 8001790:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 8001794:	f821 3c10 	strh.w	r3, [r1, #-16]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8001798:	3401      	adds	r4, #1
 800179a:	2c02      	cmp	r4, #2
 800179c:	dde6      	ble.n	800176c <MPU9250SelfTest+0xf4>
	}

	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 800179e:	22e0      	movs	r2, #224	; 0xe0
 80017a0:	211c      	movs	r1, #28
 80017a2:	20d0      	movs	r0, #208	; 0xd0
 80017a4:	f7ff fbe0 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80017a8:	22e0      	movs	r2, #224	; 0xe0
 80017aa:	211b      	movs	r1, #27
 80017ac:	20d0      	movs	r0, #208	; 0xd0
 80017ae:	f7ff fbdb 	bl	8000f68 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 80017b2:	2019      	movs	r0, #25
 80017b4:	f001 f884 	bl	80028c0 <HAL_Delay>

	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 80017b8:	2400      	movs	r4, #0
 80017ba:	e051      	b.n	8001860 <MPU9250SelfTest+0x1e8>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 80017bc:	ae10      	add	r6, sp, #64	; 0x40
 80017be:	9600      	str	r6, [sp, #0]
 80017c0:	2306      	movs	r3, #6
 80017c2:	223b      	movs	r2, #59	; 0x3b
 80017c4:	21d1      	movs	r1, #209	; 0xd1
 80017c6:	20d0      	movs	r0, #208	; 0xd0
 80017c8:	f7ff fc28 	bl	800101c <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80017cc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80017d0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80017d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017d8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80017dc:	4413      	add	r3, r2
 80017de:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		aSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80017e2:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80017e6:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80017ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017ee:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80017f2:	4413      	add	r3, r2
 80017f4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		aSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80017f8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80017fc:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001800:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001804:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8001808:	4413      	add	r3, r2
 800180a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 800180e:	9600      	str	r6, [sp, #0]
 8001810:	2306      	movs	r3, #6
 8001812:	2243      	movs	r2, #67	; 0x43
 8001814:	21d1      	movs	r1, #209	; 0xd1
 8001816:	20d0      	movs	r0, #208	; 0xd0
 8001818:	f7ff fc00 	bl	800101c <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800181c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001820:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001824:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001828:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800182c:	4413      	add	r3, r2
 800182e:	f8ad 3020 	strh.w	r3, [sp, #32]
		gSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001832:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8001836:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800183a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800183e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8001842:	4413      	add	r3, r2
 8001844:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		gSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001848:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800184c:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001850:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001854:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8001858:	4413      	add	r3, r2
 800185a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 800185e:	3401      	adds	r4, #1
 8001860:	2cc7      	cmp	r4, #199	; 0xc7
 8001862:	ddab      	ble.n	80017bc <MPU9250SelfTest+0x144>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8001864:	2400      	movs	r4, #0
 8001866:	e016      	b.n	8001896 <MPU9250SelfTest+0x21e>
		aSTAvg[ii] /= 200;
 8001868:	ab12      	add	r3, sp, #72	; 0x48
 800186a:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 800186e:	f931 2c20 	ldrsh.w	r2, [r1, #-32]
 8001872:	4881      	ldr	r0, [pc, #516]	; (8001a78 <MPU9250SelfTest+0x400>)
 8001874:	fb80 6302 	smull	r6, r3, r0, r2
 8001878:	17d2      	asrs	r2, r2, #31
 800187a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 800187e:	f821 2c20 	strh.w	r2, [r1, #-32]
		gSTAvg[ii] /= 200;
 8001882:	f931 3c28 	ldrsh.w	r3, [r1, #-40]
 8001886:	fb80 2003 	smull	r2, r0, r0, r3
 800188a:	17db      	asrs	r3, r3, #31
 800188c:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 8001890:	f821 3c28 	strh.w	r3, [r1, #-40]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8001894:	3401      	adds	r4, #1
 8001896:	2c02      	cmp	r4, #2
 8001898:	dde6      	ble.n	8001868 <MPU9250SelfTest+0x1f0>
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00);
 800189a:	2200      	movs	r2, #0
 800189c:	211c      	movs	r1, #28
 800189e:	20d0      	movs	r0, #208	; 0xd0
 80018a0:	f7ff fb62 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00);
 80018a4:	2200      	movs	r2, #0
 80018a6:	211b      	movs	r1, #27
 80018a8:	20d0      	movs	r0, #208	; 0xd0
 80018aa:	f7ff fb5d 	bl	8000f68 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 80018ae:	2019      	movs	r0, #25
 80018b0:	f001 f806 	bl	80028c0 <HAL_Delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018b4:	220d      	movs	r2, #13
 80018b6:	21d1      	movs	r1, #209	; 0xd1
 80018b8:	20d0      	movs	r0, #208	; 0xd0
 80018ba:	f7ff fb69 	bl	8000f90 <readByte>
 80018be:	ee08 0a10 	vmov	s16, r0
	SELF_TEST_X_ACCEL); // X-axis accel self-test results
	selfTest[1] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018c2:	220e      	movs	r2, #14
 80018c4:	21d1      	movs	r1, #209	; 0xd1
 80018c6:	20d0      	movs	r0, #208	; 0xd0
 80018c8:	f7ff fb62 	bl	8000f90 <readByte>
 80018cc:	ee0b 0a10 	vmov	s22, r0
	SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
	selfTest[2] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018d0:	220f      	movs	r2, #15
 80018d2:	21d1      	movs	r1, #209	; 0xd1
 80018d4:	20d0      	movs	r0, #208	; 0xd0
 80018d6:	f7ff fb5b 	bl	8000f90 <readByte>
 80018da:	ee0a 0a90 	vmov	s21, r0
	SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
	selfTest[3] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018de:	2200      	movs	r2, #0
 80018e0:	21d1      	movs	r1, #209	; 0xd1
 80018e2:	20d0      	movs	r0, #208	; 0xd0
 80018e4:	f7ff fb54 	bl	8000f90 <readByte>
 80018e8:	ee0a 0a10 	vmov	s20, r0
	SELF_TEST_X_GYRO); // X-axis gyro self-test results
	selfTest[4] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018ec:	2201      	movs	r2, #1
 80018ee:	21d1      	movs	r1, #209	; 0xd1
 80018f0:	20d0      	movs	r0, #208	; 0xd0
 80018f2:	f7ff fb4d 	bl	8000f90 <readByte>
 80018f6:	ee09 0a90 	vmov	s19, r0
	SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
	selfTest[5] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018fa:	2202      	movs	r2, #2
 80018fc:	21d1      	movs	r1, #209	; 0xd1
 80018fe:	20d0      	movs	r0, #208	; 0xd0
 8001900:	f7ff fb46 	bl	8000f90 <readByte>
 8001904:	ee09 0a10 	vmov	s18, r0
	SELF_TEST_Z_GYRO); // Z-axis gyro self-test results

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 8001908:	eef8 7a48 	vcvt.f32.u32	s15, s16
 800190c:	ee17 0a90 	vmov	r0, s15
 8001910:	f7fe fdca 	bl	80004a8 <__aeabi_f2d>
 8001914:	2200      	movs	r2, #0
 8001916:	4b59      	ldr	r3, [pc, #356]	; (8001a7c <MPU9250SelfTest+0x404>)
 8001918:	f7fe fc66 	bl	80001e8 <__aeabi_dsub>
 800191c:	ed9f 8b52 	vldr	d8, [pc, #328]	; 8001a68 <MPU9250SelfTest+0x3f0>
 8001920:	ec41 0b11 	vmov	d1, r0, r1
 8001924:	eeb0 0a48 	vmov.f32	s0, s16
 8001928:	eef0 0a68 	vmov.f32	s1, s17
 800192c:	f006 f93c 	bl	8007ba8 <pow>
 8001930:	a34f      	add	r3, pc, #316	; (adr r3, 8001a70 <MPU9250SelfTest+0x3f8>)
 8001932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001936:	ec51 0b10 	vmov	r0, r1, d0
 800193a:	f7fe fe0d 	bl	8000558 <__aeabi_dmul>
 800193e:	f7ff f81d 	bl	800097c <__aeabi_d2f>
	factoryTrim[0] = (float) (2620 / 1 << FS)
 8001942:	9002      	str	r0, [sp, #8]
	factoryTrim[1] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 8001944:	eef8 7a4b 	vcvt.f32.u32	s15, s22
 8001948:	ee17 0a90 	vmov	r0, s15
 800194c:	f7fe fdac 	bl	80004a8 <__aeabi_f2d>
 8001950:	2200      	movs	r2, #0
 8001952:	4b4a      	ldr	r3, [pc, #296]	; (8001a7c <MPU9250SelfTest+0x404>)
 8001954:	f7fe fc48 	bl	80001e8 <__aeabi_dsub>
 8001958:	ec41 0b11 	vmov	d1, r0, r1
 800195c:	eeb0 0a48 	vmov.f32	s0, s16
 8001960:	eef0 0a68 	vmov.f32	s1, s17
 8001964:	f006 f920 	bl	8007ba8 <pow>
 8001968:	a341      	add	r3, pc, #260	; (adr r3, 8001a70 <MPU9250SelfTest+0x3f8>)
 800196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196e:	ec51 0b10 	vmov	r0, r1, d0
 8001972:	f7fe fdf1 	bl	8000558 <__aeabi_dmul>
 8001976:	f7ff f801 	bl	800097c <__aeabi_d2f>
	factoryTrim[1] = (float) (2620 / 1 << FS)
 800197a:	9003      	str	r0, [sp, #12]
	factoryTrim[2] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 800197c:	eef8 7a6a 	vcvt.f32.u32	s15, s21
 8001980:	ee17 0a90 	vmov	r0, s15
 8001984:	f7fe fd90 	bl	80004a8 <__aeabi_f2d>
 8001988:	2200      	movs	r2, #0
 800198a:	4b3c      	ldr	r3, [pc, #240]	; (8001a7c <MPU9250SelfTest+0x404>)
 800198c:	f7fe fc2c 	bl	80001e8 <__aeabi_dsub>
 8001990:	ec41 0b11 	vmov	d1, r0, r1
 8001994:	eeb0 0a48 	vmov.f32	s0, s16
 8001998:	eef0 0a68 	vmov.f32	s1, s17
 800199c:	f006 f904 	bl	8007ba8 <pow>
 80019a0:	a333      	add	r3, pc, #204	; (adr r3, 8001a70 <MPU9250SelfTest+0x3f8>)
 80019a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a6:	ec51 0b10 	vmov	r0, r1, d0
 80019aa:	f7fe fdd5 	bl	8000558 <__aeabi_dmul>
 80019ae:	f7fe ffe5 	bl	800097c <__aeabi_d2f>
	factoryTrim[2] = (float) (2620 / 1 << FS)
 80019b2:	9004      	str	r0, [sp, #16]
	factoryTrim[3] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 80019b4:	eef8 7a4a 	vcvt.f32.u32	s15, s20
 80019b8:	ee17 0a90 	vmov	r0, s15
 80019bc:	f7fe fd74 	bl	80004a8 <__aeabi_f2d>
 80019c0:	2200      	movs	r2, #0
 80019c2:	4b2e      	ldr	r3, [pc, #184]	; (8001a7c <MPU9250SelfTest+0x404>)
 80019c4:	f7fe fc10 	bl	80001e8 <__aeabi_dsub>
 80019c8:	ec41 0b11 	vmov	d1, r0, r1
 80019cc:	eeb0 0a48 	vmov.f32	s0, s16
 80019d0:	eef0 0a68 	vmov.f32	s1, s17
 80019d4:	f006 f8e8 	bl	8007ba8 <pow>
 80019d8:	a325      	add	r3, pc, #148	; (adr r3, 8001a70 <MPU9250SelfTest+0x3f8>)
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	ec51 0b10 	vmov	r0, r1, d0
 80019e2:	f7fe fdb9 	bl	8000558 <__aeabi_dmul>
 80019e6:	f7fe ffc9 	bl	800097c <__aeabi_d2f>
	factoryTrim[3] = (float) (2620 / 1 << FS)
 80019ea:	9005      	str	r0, [sp, #20]
	factoryTrim[4] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 80019ec:	eef8 7a69 	vcvt.f32.u32	s15, s19
 80019f0:	ee17 0a90 	vmov	r0, s15
 80019f4:	f7fe fd58 	bl	80004a8 <__aeabi_f2d>
 80019f8:	2200      	movs	r2, #0
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <MPU9250SelfTest+0x404>)
 80019fc:	f7fe fbf4 	bl	80001e8 <__aeabi_dsub>
 8001a00:	ec41 0b11 	vmov	d1, r0, r1
 8001a04:	eeb0 0a48 	vmov.f32	s0, s16
 8001a08:	eef0 0a68 	vmov.f32	s1, s17
 8001a0c:	f006 f8cc 	bl	8007ba8 <pow>
 8001a10:	a317      	add	r3, pc, #92	; (adr r3, 8001a70 <MPU9250SelfTest+0x3f8>)
 8001a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a16:	ec51 0b10 	vmov	r0, r1, d0
 8001a1a:	f7fe fd9d 	bl	8000558 <__aeabi_dmul>
 8001a1e:	f7fe ffad 	bl	800097c <__aeabi_d2f>
	factoryTrim[4] = (float) (2620 / 1 << FS)
 8001a22:	9006      	str	r0, [sp, #24]
	factoryTrim[5] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 8001a24:	eef8 7a49 	vcvt.f32.u32	s15, s18
 8001a28:	ee17 0a90 	vmov	r0, s15
 8001a2c:	f7fe fd3c 	bl	80004a8 <__aeabi_f2d>
 8001a30:	2200      	movs	r2, #0
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <MPU9250SelfTest+0x404>)
 8001a34:	f7fe fbd8 	bl	80001e8 <__aeabi_dsub>
 8001a38:	ec41 0b11 	vmov	d1, r0, r1
 8001a3c:	eeb0 0a48 	vmov.f32	s0, s16
 8001a40:	eef0 0a68 	vmov.f32	s1, s17
 8001a44:	f006 f8b0 	bl	8007ba8 <pow>
 8001a48:	a309      	add	r3, pc, #36	; (adr r3, 8001a70 <MPU9250SelfTest+0x3f8>)
 8001a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4e:	ec51 0b10 	vmov	r0, r1, d0
 8001a52:	f7fe fd81 	bl	8000558 <__aeabi_dmul>
 8001a56:	f7fe ff91 	bl	800097c <__aeabi_d2f>
	factoryTrim[5] = (float) (2620 / 1 << FS)
 8001a5a:	9007      	str	r0, [sp, #28]

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 8001a5c:	f04f 0800 	mov.w	r8, #0
 8001a60:	e05f      	b.n	8001b22 <MPU9250SelfTest+0x4aa>
 8001a62:	bf00      	nop
 8001a64:	f3af 8000 	nop.w
 8001a68:	c28f5c29 	.word	0xc28f5c29
 8001a6c:	3ff028f5 	.word	0x3ff028f5
 8001a70:	00000000 	.word	0x00000000
 8001a74:	40a47800 	.word	0x40a47800
 8001a78:	51eb851f 	.word	0x51eb851f
 8001a7c:	3ff00000 	.word	0x3ff00000
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001a80:	ab12      	add	r3, sp, #72	; 0x48
 8001a82:	eb03 0448 	add.w	r4, r3, r8, lsl #1
 8001a86:	f934 0c20 	ldrsh.w	r0, [r4, #-32]
 8001a8a:	f934 3c18 	ldrsh.w	r3, [r4, #-24]
 8001a8e:	1ac0      	subs	r0, r0, r3
 8001a90:	ee07 0a90 	vmov	s15, r0
 8001a94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a98:	ee17 0a90 	vmov	r0, s15
 8001a9c:	f7fe fd04 	bl	80004a8 <__aeabi_f2d>
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <MPU9250SelfTest+0x4bc>)
 8001aa4:	f7fe fd58 	bl	8000558 <__aeabi_dmul>
 8001aa8:	4606      	mov	r6, r0
 8001aaa:	460f      	mov	r7, r1
				/ factoryTrim[i]; // Report percent differences
 8001aac:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8001ab0:	ab12      	add	r3, sp, #72	; 0x48
 8001ab2:	444b      	add	r3, r9
 8001ab4:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001ab8:	f7fe fcf6 	bl	80004a8 <__aeabi_f2d>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001abc:	44a9      	add	r9, r5
				/ factoryTrim[i]; // Report percent differences
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4630      	mov	r0, r6
 8001ac4:	4639      	mov	r1, r7
 8001ac6:	f7fe fe71 	bl	80007ac <__aeabi_ddiv>
 8001aca:	f7fe ff57 	bl	800097c <__aeabi_d2f>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001ace:	f8c9 0000 	str.w	r0, [r9]
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001ad2:	f934 0c28 	ldrsh.w	r0, [r4, #-40]
 8001ad6:	f934 3c10 	ldrsh.w	r3, [r4, #-16]
 8001ada:	1ac0      	subs	r0, r0, r3
 8001adc:	ee07 0a90 	vmov	s15, r0
 8001ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae4:	ee17 0a90 	vmov	r0, s15
 8001ae8:	f7fe fcde 	bl	80004a8 <__aeabi_f2d>
 8001aec:	2200      	movs	r2, #0
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MPU9250SelfTest+0x4bc>)
 8001af0:	f7fe fd32 	bl	8000558 <__aeabi_dmul>
 8001af4:	4606      	mov	r6, r0
 8001af6:	460f      	mov	r7, r1
				/ factoryTrim[i + 3]; // Report percent differences
 8001af8:	f108 0403 	add.w	r4, r8, #3
 8001afc:	00a4      	lsls	r4, r4, #2
 8001afe:	ab12      	add	r3, sp, #72	; 0x48
 8001b00:	4423      	add	r3, r4
 8001b02:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001b06:	f7fe fccf 	bl	80004a8 <__aeabi_f2d>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001b0a:	442c      	add	r4, r5
				/ factoryTrim[i + 3]; // Report percent differences
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4630      	mov	r0, r6
 8001b12:	4639      	mov	r1, r7
 8001b14:	f7fe fe4a 	bl	80007ac <__aeabi_ddiv>
 8001b18:	f7fe ff30 	bl	800097c <__aeabi_d2f>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001b1c:	6020      	str	r0, [r4, #0]
	for (int i = 0; i < 3; i++) {
 8001b1e:	f108 0801 	add.w	r8, r8, #1
 8001b22:	f1b8 0f02 	cmp.w	r8, #2
 8001b26:	ddab      	ble.n	8001a80 <MPU9250SelfTest+0x408>
	}

}
 8001b28:	b013      	add	sp, #76	; 0x4c
 8001b2a:	ecbd 8b08 	vpop	{d8-d11}
 8001b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b32:	bf00      	nop
 8001b34:	40590000 	.word	0x40590000

08001b38 <imu_calibrate>:
IMU_StatusTypeDef imu_calibrate() {
 8001b38:	b538      	push	{r3, r4, r5, lr}
	resetMPU9250();
 8001b3a:	f7ff fb65 	bl	8001208 <resetMPU9250>
	MPU9250SelfTest(SelfTest); // Start by performing self test and reporting values
 8001b3e:	4c53      	ldr	r4, [pc, #332]	; (8001c8c <imu_calibrate+0x154>)
 8001b40:	4620      	mov	r0, r4
 8001b42:	f7ff fd99 	bl	8001678 <MPU9250SelfTest>
	printf(	"x-axis self test: acceleration trim within : %f of factory value\n\r", SelfTest[0]);
 8001b46:	6820      	ldr	r0, [r4, #0]
 8001b48:	f7fe fcae 	bl	80004a8 <__aeabi_f2d>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	484f      	ldr	r0, [pc, #316]	; (8001c90 <imu_calibrate+0x158>)
 8001b52:	f004 f8a1 	bl	8005c98 <iprintf>
	printf(
 8001b56:	6860      	ldr	r0, [r4, #4]
 8001b58:	f7fe fca6 	bl	80004a8 <__aeabi_f2d>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	484c      	ldr	r0, [pc, #304]	; (8001c94 <imu_calibrate+0x15c>)
 8001b62:	f004 f899 	bl	8005c98 <iprintf>
	printf(
 8001b66:	68a0      	ldr	r0, [r4, #8]
 8001b68:	f7fe fc9e 	bl	80004a8 <__aeabi_f2d>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4849      	ldr	r0, [pc, #292]	; (8001c98 <imu_calibrate+0x160>)
 8001b72:	f004 f891 	bl	8005c98 <iprintf>
	printf("x-axis self test: gyration trim within : %f  of factory value\n\r",
 8001b76:	68e0      	ldr	r0, [r4, #12]
 8001b78:	f7fe fc96 	bl	80004a8 <__aeabi_f2d>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4846      	ldr	r0, [pc, #280]	; (8001c9c <imu_calibrate+0x164>)
 8001b82:	f004 f889 	bl	8005c98 <iprintf>
	printf("y-axis self test: gyration trim within : %f  of factory value\n\r",
 8001b86:	6920      	ldr	r0, [r4, #16]
 8001b88:	f7fe fc8e 	bl	80004a8 <__aeabi_f2d>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4843      	ldr	r0, [pc, #268]	; (8001ca0 <imu_calibrate+0x168>)
 8001b92:	f004 f881 	bl	8005c98 <iprintf>
	printf("z-axis self test: gyration trim within : %f  of factory value\n\r",
 8001b96:	6960      	ldr	r0, [r4, #20]
 8001b98:	f7fe fc86 	bl	80004a8 <__aeabi_f2d>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4840      	ldr	r0, [pc, #256]	; (8001ca4 <imu_calibrate+0x16c>)
 8001ba2:	f004 f879 	bl	8005c98 <iprintf>
	calibrateMPU9250(gyroBias, accelBias); // Calibrate gyro and accelerometers, load biases in bias registers
 8001ba6:	4c40      	ldr	r4, [pc, #256]	; (8001ca8 <imu_calibrate+0x170>)
 8001ba8:	4d40      	ldr	r5, [pc, #256]	; (8001cac <imu_calibrate+0x174>)
 8001baa:	4621      	mov	r1, r4
 8001bac:	4628      	mov	r0, r5
 8001bae:	f7ff fc09 	bl	80013c4 <calibrateMPU9250>
	printf("x gyro bias = %f\n\r", gyroBias[0]);
 8001bb2:	6828      	ldr	r0, [r5, #0]
 8001bb4:	f7fe fc78 	bl	80004a8 <__aeabi_f2d>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	483c      	ldr	r0, [pc, #240]	; (8001cb0 <imu_calibrate+0x178>)
 8001bbe:	f004 f86b 	bl	8005c98 <iprintf>
	printf("y gyro bias = %f\n\r", gyroBias[1]);
 8001bc2:	6868      	ldr	r0, [r5, #4]
 8001bc4:	f7fe fc70 	bl	80004a8 <__aeabi_f2d>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4839      	ldr	r0, [pc, #228]	; (8001cb4 <imu_calibrate+0x17c>)
 8001bce:	f004 f863 	bl	8005c98 <iprintf>
	printf("z gyro bias = %f\n\r", gyroBias[2]);
 8001bd2:	68a8      	ldr	r0, [r5, #8]
 8001bd4:	f7fe fc68 	bl	80004a8 <__aeabi_f2d>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4836      	ldr	r0, [pc, #216]	; (8001cb8 <imu_calibrate+0x180>)
 8001bde:	f004 f85b 	bl	8005c98 <iprintf>
	printf("x accel bias = %f\n\r", accelBias[0]);
 8001be2:	6820      	ldr	r0, [r4, #0]
 8001be4:	f7fe fc60 	bl	80004a8 <__aeabi_f2d>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4833      	ldr	r0, [pc, #204]	; (8001cbc <imu_calibrate+0x184>)
 8001bee:	f004 f853 	bl	8005c98 <iprintf>
	printf("y accel bias = %f\n\r", accelBias[1]);
 8001bf2:	6860      	ldr	r0, [r4, #4]
 8001bf4:	f7fe fc58 	bl	80004a8 <__aeabi_f2d>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4830      	ldr	r0, [pc, #192]	; (8001cc0 <imu_calibrate+0x188>)
 8001bfe:	f004 f84b 	bl	8005c98 <iprintf>
	printf("z accel bias = %f\n\r", accelBias[2]);
 8001c02:	68a0      	ldr	r0, [r4, #8]
 8001c04:	f7fe fc50 	bl	80004a8 <__aeabi_f2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	482d      	ldr	r0, [pc, #180]	; (8001cc4 <imu_calibrate+0x18c>)
 8001c0e:	f004 f843 	bl	8005c98 <iprintf>
	initMPU9250();
 8001c12:	f7ff fb67 	bl	80012e4 <initMPU9250>
	initAK8963(magCalibration);
 8001c16:	482c      	ldr	r0, [pc, #176]	; (8001cc8 <imu_calibrate+0x190>)
 8001c18:	f7ff fb00 	bl	800121c <initAK8963>
	printf("Accelerometer full-scale range = %f  g\n\r", 2.0f*(float)(1<<Ascale));
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <imu_calibrate+0x194>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2401      	movs	r4, #1
 8001c22:	fa04 f303 	lsl.w	r3, r4, r3
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c32:	ee17 0a90 	vmov	r0, s15
 8001c36:	f7fe fc37 	bl	80004a8 <__aeabi_f2d>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4824      	ldr	r0, [pc, #144]	; (8001cd0 <imu_calibrate+0x198>)
 8001c40:	f004 f82a 	bl	8005c98 <iprintf>
	printf("Gyroscope full-scale range = %f  deg/s\n\r", 250.0f*(float)(1<<Gscale));
 8001c44:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <imu_calibrate+0x19c>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	409c      	lsls	r4, r3
 8001c4a:	ee07 4a90 	vmov	s15, r4
 8001c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c52:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001cd8 <imu_calibrate+0x1a0>
 8001c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c5a:	ee17 0a90 	vmov	r0, s15
 8001c5e:	f7fe fc23 	bl	80004a8 <__aeabi_f2d>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	481d      	ldr	r0, [pc, #116]	; (8001cdc <imu_calibrate+0x1a4>)
 8001c68:	f004 f816 	bl	8005c98 <iprintf>
	getAres(); // Get accelerometer sensitivity
 8001c6c:	f7ff fa38 	bl	80010e0 <getAres>
	getGres(); // Get gyro sensitivity
 8001c70:	f7ff fa12 	bl	8001098 <getGres>
	getMres(); // Get magnetometer sensitivity
 8001c74:	f7ff f9fa 	bl	800106c <getMres>
	magbias[0] = +470.; // User environmental x-axis correction in milliGauss, should be automatically calculated
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <imu_calibrate+0x1a8>)
 8001c7a:	4a1a      	ldr	r2, [pc, #104]	; (8001ce4 <imu_calibrate+0x1ac>)
 8001c7c:	601a      	str	r2, [r3, #0]
	magbias[1] = +120.; // User environmental x-axis correction in milliGauss
 8001c7e:	4a1a      	ldr	r2, [pc, #104]	; (8001ce8 <imu_calibrate+0x1b0>)
 8001c80:	605a      	str	r2, [r3, #4]
	magbias[2] = +125.; // User environmental x-axis correction in milliGauss
 8001c82:	4a1a      	ldr	r2, [pc, #104]	; (8001cec <imu_calibrate+0x1b4>)
 8001c84:	609a      	str	r2, [r3, #8]
}
 8001c86:	2000      	movs	r0, #0
 8001c88:	bd38      	pop	{r3, r4, r5, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200002d0 	.word	0x200002d0
 8001c90:	08009648 	.word	0x08009648
 8001c94:	0800968c 	.word	0x0800968c
 8001c98:	080096d0 	.word	0x080096d0
 8001c9c:	08009714 	.word	0x08009714
 8001ca0:	08009754 	.word	0x08009754
 8001ca4:	08009794 	.word	0x08009794
 8001ca8:	20000004 	.word	0x20000004
 8001cac:	20000010 	.word	0x20000010
 8001cb0:	080097d4 	.word	0x080097d4
 8001cb4:	080097e8 	.word	0x080097e8
 8001cb8:	080097fc 	.word	0x080097fc
 8001cbc:	08009810 	.word	0x08009810
 8001cc0:	08009824 	.word	0x08009824
 8001cc4:	08009838 	.word	0x08009838
 8001cc8:	20000258 	.word	0x20000258
 8001ccc:	2000023c 	.word	0x2000023c
 8001cd0:	0800984c 	.word	0x0800984c
 8001cd4:	2000023d 	.word	0x2000023d
 8001cd8:	437a0000 	.word	0x437a0000
 8001cdc:	08009878 	.word	0x08009878
 8001ce0:	20000264 	.word	0x20000264
 8001ce4:	43eb0000 	.word	0x43eb0000
 8001ce8:	42f00000 	.word	0x42f00000
 8001cec:	42fa0000 	.word	0x42fa0000

08001cf0 <MahonyQuaternionUpdate>:
}

// Similar to Madgwick scheme but uses proportional and integral filtering on the error between estimated reference vectors and
// measured ones.
void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy,
		float gz, float mx, float my, float mz) {
 8001cf0:	b500      	push	{lr}
 8001cf2:	ed2d 8b10 	vpush	{d8-d15}
 8001cf6:	b08d      	sub	sp, #52	; 0x34
 8001cf8:	eeb0 ba40 	vmov.f32	s22, s0
 8001cfc:	eef0 aa60 	vmov.f32	s21, s1
 8001d00:	eeb0 aa41 	vmov.f32	s20, s2
 8001d04:	edcd 1a04 	vstr	s3, [sp, #16]
 8001d08:	ed8d 2a05 	vstr	s4, [sp, #20]
 8001d0c:	edcd 2a06 	vstr	s5, [sp, #24]
 8001d10:	eef0 da43 	vmov.f32	s27, s6
 8001d14:	eeb0 da63 	vmov.f32	s26, s7
 8001d18:	eef0 ca44 	vmov.f32	s25, s8

	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 8001d1c:	4be4      	ldr	r3, [pc, #912]	; (80020b0 <MahonyQuaternionUpdate+0x3c0>)
 8001d1e:	edd3 9a00 	vldr	s19, [r3]
 8001d22:	ed93 9a01 	vldr	s18, [r3, #4]
 8001d26:	edd3 8a02 	vldr	s17, [r3, #8]
 8001d2a:	ed93 8a03 	vldr	s16, [r3, #12]
	float vx, vy, vz, wx, wy, wz;
	float ex, ey, ez;
	float pa, pb, pc;

	// Auxiliary variables to avoid repeated arithmetic
	float q1q1 = q1 * q1;
 8001d2e:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8001d32:	edcd 7a03 	vstr	s15, [sp, #12]
	float q1q2 = q1 * q2;
 8001d36:	ee69 7a89 	vmul.f32	s15, s19, s18
 8001d3a:	edcd 7a00 	vstr	s15, [sp]
	float q1q3 = q1 * q3;
 8001d3e:	ee29 faa8 	vmul.f32	s30, s19, s17
	float q1q4 = q1 * q4;
 8001d42:	ee69 ba88 	vmul.f32	s23, s19, s16
	float q2q2 = q2 * q2;
 8001d46:	ee69 7a09 	vmul.f32	s15, s18, s18
 8001d4a:	edcd 7a01 	vstr	s15, [sp, #4]
	float q2q3 = q2 * q3;
 8001d4e:	ee69 fa28 	vmul.f32	s31, s18, s17
	float q2q4 = q2 * q4;
 8001d52:	ee29 ca08 	vmul.f32	s24, s18, s16
	float q3q3 = q3 * q3;
 8001d56:	ee68 eaa8 	vmul.f32	s29, s17, s17
	float q3q4 = q3 * q4;
 8001d5a:	ee68 7a88 	vmul.f32	s15, s17, s16
 8001d5e:	edcd 7a02 	vstr	s15, [sp, #8]
	float q4q4 = q4 * q4;
 8001d62:	ee28 ea08 	vmul.f32	s28, s16, s16

	// Normalise accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001d66:	ee60 7a00 	vmul.f32	s15, s0, s0
 8001d6a:	ee20 7aa0 	vmul.f32	s14, s1, s1
 8001d6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d72:	ee21 7a01 	vmul.f32	s14, s2, s2
 8001d76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d7a:	ee17 0a90 	vmov	r0, s15
 8001d7e:	f7fe fb93 	bl	80004a8 <__aeabi_f2d>
 8001d82:	ec41 0b10 	vmov	d0, r0, r1
 8001d86:	f006 f87f 	bl	8007e88 <sqrt>
 8001d8a:	ec51 0b10 	vmov	r0, r1, d0
 8001d8e:	f7fe fdf5 	bl	800097c <__aeabi_d2f>
 8001d92:	ee07 0a90 	vmov	s15, r0
	if (norm == 0.0f)
 8001d96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9e:	d104      	bne.n	8001daa <MahonyQuaternionUpdate+0xba>
	q[0] = q1 * norm;
	q[1] = q2 * norm;
	q[2] = q3 * norm;
	q[3] = q4 * norm;

}
 8001da0:	b00d      	add	sp, #52	; 0x34
 8001da2:	ecbd 8b10 	vpop	{d8-d15}
 8001da6:	f85d fb04 	ldr.w	pc, [sp], #4
	norm = 1.0f / norm;        // use reciprocal for division
 8001daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	ax *= norm;
 8001db2:	ee2b ba07 	vmul.f32	s22, s22, s14
	ay *= norm;
 8001db6:	ee6a aa87 	vmul.f32	s21, s21, s14
	az *= norm;
 8001dba:	ee2a aa07 	vmul.f32	s20, s20, s14
	norm = sqrt(mx * mx + my * my + mz * mz);
 8001dbe:	ee6d 7aad 	vmul.f32	s15, s27, s27
 8001dc2:	ee2d 7a0d 	vmul.f32	s14, s26, s26
 8001dc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dca:	ee2c 7aac 	vmul.f32	s14, s25, s25
 8001dce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dd2:	ee17 0a90 	vmov	r0, s15
 8001dd6:	f7fe fb67 	bl	80004a8 <__aeabi_f2d>
 8001dda:	ec41 0b10 	vmov	d0, r0, r1
 8001dde:	f006 f853 	bl	8007e88 <sqrt>
 8001de2:	ec51 0b10 	vmov	r0, r1, d0
 8001de6:	f7fe fdc9 	bl	800097c <__aeabi_d2f>
 8001dea:	ee07 0a90 	vmov	s15, r0
	if (norm == 0.0f)
 8001dee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df6:	d0d3      	beq.n	8001da0 <MahonyQuaternionUpdate+0xb0>
	norm = 1.0f / norm;        // use reciprocal for division
 8001df8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dfc:	ee87 7a27 	vdiv.f32	s14, s14, s15
	mx *= norm;
 8001e00:	ee6d da87 	vmul.f32	s27, s27, s14
	my *= norm;
 8001e04:	ee2d da07 	vmul.f32	s26, s26, s14
	mz *= norm;
 8001e08:	ee6c ca87 	vmul.f32	s25, s25, s14
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e0c:	ee7d 6aad 	vadd.f32	s13, s27, s27
 8001e10:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001e14:	ee76 7a6e 	vsub.f32	s15, s12, s29
 8001e18:	ee77 7ace 	vsub.f32	s15, s15, s28
 8001e1c:	edcd 7a08 	vstr	s15, [sp, #32]
 8001e20:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8001e24:	ee7d 5a0d 	vadd.f32	s11, s26, s26
 8001e28:	ee3f 5aeb 	vsub.f32	s10, s31, s23
 8001e2c:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 8001e30:	ee65 7a85 	vmul.f32	s15, s11, s10
 8001e34:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ 2.0f * mz * (q2q4 + q1q3);
 8001e38:	ee7c 4aac 	vadd.f32	s9, s25, s25
 8001e3c:	ee3f 4a0c 	vadd.f32	s8, s30, s24
 8001e40:	ed8d 4a0b 	vstr	s8, [sp, #44]	; 0x2c
 8001e44:	ee64 7a84 	vmul.f32	s15, s9, s8
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e48:	ee37 7a27 	vadd.f32	s14, s14, s15
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e4c:	ee7b 7aaf 	vadd.f32	s15, s23, s31
 8001e50:	edcd 6a07 	vstr	s13, [sp, #28]
 8001e54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e58:	eddd 3a01 	vldr	s7, [sp, #4]
 8001e5c:	ee76 fa63 	vsub.f32	s31, s12, s7
 8001e60:	ee7f bace 	vsub.f32	s23, s31, s28
 8001e64:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8001e68:	ee65 baab 	vmul.f32	s23, s11, s23
 8001e6c:	ee77 7aab 	vadd.f32	s15, s15, s23
			+ 2.0f * mz * (q3q4 - q1q2);
 8001e70:	ed9d 3a02 	vldr	s6, [sp, #8]
 8001e74:	eddd 2a00 	vldr	s5, [sp]
 8001e78:	ee73 6a62 	vsub.f32	s13, s6, s5
 8001e7c:	eef0 ba64 	vmov.f32	s23, s9
 8001e80:	ee64 6aa6 	vmul.f32	s13, s9, s13
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e84:	ee77 7aa6 	vadd.f32	s15, s15, s13
	bx = sqrt((hx * hx) + (hy * hy));
 8001e88:	ee27 7a07 	vmul.f32	s14, s14, s14
 8001e8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e90:	ee37 2a27 	vadd.f32	s4, s14, s15
 8001e94:	ee12 0a10 	vmov	r0, s4
 8001e98:	f7fe fb06 	bl	80004a8 <__aeabi_f2d>
 8001e9c:	ec41 0b10 	vmov	d0, r0, r1
 8001ea0:	f005 fff2 	bl	8007e88 <sqrt>
 8001ea4:	ec51 0b10 	vmov	r0, r1, d0
 8001ea8:	f7fe fd68 	bl	800097c <__aeabi_d2f>
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001eac:	ee3c ca4f 	vsub.f32	s24, s24, s30
 8001eb0:	eddd 6a07 	vldr	s13, [sp, #28]
 8001eb4:	ee26 7a8c 	vmul.f32	s14, s13, s24
 8001eb8:	eddd 4a00 	vldr	s9, [sp]
 8001ebc:	ed9d 3a02 	vldr	s6, [sp, #8]
 8001ec0:	ee34 5a83 	vadd.f32	s10, s9, s6
 8001ec4:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 8001ec8:	ee65 7a85 	vmul.f32	s15, s11, s10
 8001ecc:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001ed0:	ee7f 4aee 	vsub.f32	s9, s31, s29
 8001ed4:	ee6b 7aa4 	vmul.f32	s15, s23, s9
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001ed8:	ee37 7a27 	vadd.f32	s14, s14, s15
	vx = 2.0f * (q2q4 - q1q3);
 8001edc:	ee7c 7a0c 	vadd.f32	s15, s24, s24
	vy = 2.0f * (q1q2 + q3q4);
 8001ee0:	ee35 6a05 	vadd.f32	s12, s10, s10
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001ee4:	eddd 5a03 	vldr	s11, [sp, #12]
 8001ee8:	eddd 3a01 	vldr	s7, [sp, #4]
 8001eec:	ee75 6ae3 	vsub.f32	s13, s11, s7
 8001ef0:	ee76 eaee 	vsub.f32	s29, s13, s29
 8001ef4:	ee3e ea8e 	vadd.f32	s28, s29, s28
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001ef8:	ee05 0a90 	vmov	s11, r0
 8001efc:	ee75 faa5 	vadd.f32	s31, s11, s11
 8001f00:	eddd 6a08 	vldr	s13, [sp, #32]
 8001f04:	ee26 faaf 	vmul.f32	s30, s13, s31
 8001f08:	ee37 7a07 	vadd.f32	s14, s14, s14
 8001f0c:	ee2c ca07 	vmul.f32	s24, s24, s14
 8001f10:	ee3f ca0c 	vadd.f32	s24, s30, s24
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001f14:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
 8001f18:	ee66 5aaf 	vmul.f32	s11, s13, s31
 8001f1c:	ee25 5a07 	vmul.f32	s10, s10, s14
 8001f20:	ee75 5a85 	vadd.f32	s11, s11, s10
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001f24:	ed9d 4a0b 	vldr	s8, [sp, #44]	; 0x2c
 8001f28:	ee64 fa2f 	vmul.f32	s31, s8, s31
 8001f2c:	ee24 7a87 	vmul.f32	s14, s9, s14
 8001f30:	ee7f fa87 	vadd.f32	s31, s31, s14
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001f34:	ee6a 6a8e 	vmul.f32	s13, s21, s28
 8001f38:	ee2a 7a06 	vmul.f32	s14, s20, s12
 8001f3c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8001f40:	ee2d 7a2f 	vmul.f32	s14, s26, s31
 8001f44:	ee2c 5aa5 	vmul.f32	s10, s25, s11
 8001f48:	ee37 7a45 	vsub.f32	s14, s14, s10
 8001f4c:	ee76 6a87 	vadd.f32	s13, s13, s14
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001f50:	ee2a aa27 	vmul.f32	s20, s20, s15
 8001f54:	ee2b 7a0e 	vmul.f32	s14, s22, s28
 8001f58:	ee3a 7a47 	vsub.f32	s14, s20, s14
 8001f5c:	ee6c ca8c 	vmul.f32	s25, s25, s24
 8001f60:	ee6d faaf 	vmul.f32	s31, s27, s31
 8001f64:	ee7c faef 	vsub.f32	s31, s25, s31
 8001f68:	ee37 7a2f 	vadd.f32	s14, s14, s31
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001f6c:	ee2b ba06 	vmul.f32	s22, s22, s12
 8001f70:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8001f74:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8001f78:	ee6d daa5 	vmul.f32	s27, s27, s11
 8001f7c:	ee2d da0c 	vmul.f32	s26, s26, s24
 8001f80:	ee3d dacd 	vsub.f32	s26, s27, s26
 8001f84:	ee77 7a8d 	vadd.f32	s15, s15, s26
		eInt[0] = 0.0f;     // prevent integral wind up
 8001f88:	4b4a      	ldr	r3, [pc, #296]	; (80020b4 <MahonyQuaternionUpdate+0x3c4>)
 8001f8a:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 80020b8 <MahonyQuaternionUpdate+0x3c8>
 8001f8e:	ed83 6a00 	vstr	s12, [r3]
		eInt[1] = 0.0f;
 8001f92:	ed83 6a01 	vstr	s12, [r3, #4]
		eInt[2] = 0.0f;
 8001f96:	ed83 6a02 	vstr	s12, [r3, #8]
	gx = gx + Kp * ex + Ki * eInt[0];
 8001f9a:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 8001f9e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8001fa2:	eddd 4a04 	vldr	s9, [sp, #16]
 8001fa6:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8001faa:	ee76 6a86 	vadd.f32	s13, s13, s12
	gy = gy + Kp * ey + Ki * eInt[1];
 8001fae:	ee27 7a25 	vmul.f32	s14, s14, s11
 8001fb2:	eddd 4a05 	vldr	s9, [sp, #20]
 8001fb6:	ee37 7a24 	vadd.f32	s14, s14, s9
 8001fba:	ee37 7a06 	vadd.f32	s14, s14, s12
	gz = gz + Kp * ez + Ki * eInt[2];
 8001fbe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001fc2:	eddd 5a06 	vldr	s11, [sp, #24]
 8001fc6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001fca:	ee77 7a86 	vadd.f32	s15, s15, s12
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001fce:	ee69 5a66 	vnmul.f32	s11, s18, s13
 8001fd2:	ee28 6a87 	vmul.f32	s12, s17, s14
 8001fd6:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8001fda:	ee28 6a27 	vmul.f32	s12, s16, s15
 8001fde:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8001fe2:	4b36      	ldr	r3, [pc, #216]	; (80020bc <MahonyQuaternionUpdate+0x3cc>)
 8001fe4:	ed93 6a00 	vldr	s12, [r3]
 8001fe8:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8001fec:	ee26 6a05 	vmul.f32	s12, s12, s10
 8001ff0:	ee65 5a86 	vmul.f32	s11, s11, s12
 8001ff4:	ee79 9aa5 	vadd.f32	s19, s19, s11
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001ff8:	ee66 aaa9 	vmul.f32	s21, s13, s19
 8001ffc:	ee68 5aa7 	vmul.f32	s11, s17, s15
 8002000:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8002004:	ee68 5a07 	vmul.f32	s11, s16, s14
 8002008:	ee7a aae5 	vsub.f32	s21, s21, s11
 800200c:	ee66 aa2a 	vmul.f32	s21, s12, s21
 8002010:	ee79 aa2a 	vadd.f32	s21, s18, s21
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8002014:	ee27 aa29 	vmul.f32	s20, s14, s19
 8002018:	ee69 5a27 	vmul.f32	s11, s18, s15
 800201c:	ee3a aa65 	vsub.f32	s20, s20, s11
 8002020:	ee68 5a26 	vmul.f32	s11, s16, s13
 8002024:	ee3a aa25 	vadd.f32	s20, s20, s11
 8002028:	ee26 aa0a 	vmul.f32	s20, s12, s20
 800202c:	ee38 aa8a 	vadd.f32	s20, s17, s20
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8002030:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8002034:	ee29 9a07 	vmul.f32	s18, s18, s14
 8002038:	ee37 9a89 	vadd.f32	s18, s15, s18
 800203c:	ee68 8aa6 	vmul.f32	s17, s17, s13
 8002040:	ee79 8a68 	vsub.f32	s17, s18, s17
 8002044:	ee66 8a28 	vmul.f32	s17, s12, s17
 8002048:	ee38 8a28 	vadd.f32	s16, s16, s17
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 800204c:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8002050:	ee2a 7aaa 	vmul.f32	s14, s21, s21
 8002054:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002058:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 800205c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002060:	ee28 7a08 	vmul.f32	s14, s16, s16
 8002064:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002068:	ee17 0a90 	vmov	r0, s15
 800206c:	f7fe fa1c 	bl	80004a8 <__aeabi_f2d>
 8002070:	ec41 0b10 	vmov	d0, r0, r1
 8002074:	f005 ff08 	bl	8007e88 <sqrt>
 8002078:	ec51 0b10 	vmov	r0, r1, d0
 800207c:	f7fe fc7e 	bl	800097c <__aeabi_d2f>
	norm = 1.0f / norm;
 8002080:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002084:	ee07 0a90 	vmov	s15, r0
 8002088:	eec7 7a27 	vdiv.f32	s15, s14, s15
	q[0] = q1 * norm;
 800208c:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8002090:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <MahonyQuaternionUpdate+0x3c0>)
 8002092:	edc3 9a00 	vstr	s19, [r3]
	q[1] = q2 * norm;
 8002096:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800209a:	edc3 aa01 	vstr	s21, [r3, #4]
	q[2] = q3 * norm;
 800209e:	ee2a aa27 	vmul.f32	s20, s20, s15
 80020a2:	ed83 aa02 	vstr	s20, [r3, #8]
	q[3] = q4 * norm;
 80020a6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80020aa:	ed83 8a03 	vstr	s16, [r3, #12]
 80020ae:	e677      	b.n	8001da0 <MahonyQuaternionUpdate+0xb0>
 80020b0:	2000001c 	.word	0x2000001c
 80020b4:	20000248 	.word	0x20000248
 80020b8:	00000000 	.word	0x00000000
 80020bc:	20000244 	.word	0x20000244

080020c0 <calc_RollPitchYaw>:
void calc_RollPitchYaw(int counter_value) {
 80020c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020c4:	ed2d 8b04 	vpush	{d8-d9}
 80020c8:	b087      	sub	sp, #28
 80020ca:	ee08 0a10 	vmov	s16, r0
	if (readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, INT_STATUS) & 0x01) { // On interrupt, check if data ready interrupt
 80020ce:	223a      	movs	r2, #58	; 0x3a
 80020d0:	21d1      	movs	r1, #209	; 0xd1
 80020d2:	20d0      	movs	r0, #208	; 0xd0
 80020d4:	f7fe ff5c 	bl	8000f90 <readByte>
 80020d8:	f010 0f01 	tst.w	r0, #1
 80020dc:	f040 8170 	bne.w	80023c0 <calc_RollPitchYaw+0x300>
	Now = counter_value;
 80020e0:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 80020e4:	4ba0      	ldr	r3, [pc, #640]	; (8002368 <calc_RollPitchYaw+0x2a8>)
 80020e6:	edc3 7a00 	vstr	s15, [r3]
	if(Now - lastUpdate < 0){
 80020ea:	4ba0      	ldr	r3, [pc, #640]	; (800236c <calc_RollPitchYaw+0x2ac>)
 80020ec:	ed93 7a00 	vldr	s14, [r3]
 80020f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fc:	f100 820d 	bmi.w	800251a <calc_RollPitchYaw+0x45a>
		float32_t result1 = 0;
 8002100:	2500      	movs	r5, #0
 8002102:	ac06      	add	r4, sp, #24
 8002104:	f844 5d0c 	str.w	r5, [r4, #-12]!
		arm_sub_f32(&Now, &lastUpdate, &result1, 1);
 8002108:	2301      	movs	r3, #1
 800210a:	4622      	mov	r2, r4
 800210c:	4997      	ldr	r1, [pc, #604]	; (800236c <calc_RollPitchYaw+0x2ac>)
 800210e:	4896      	ldr	r0, [pc, #600]	; (8002368 <calc_RollPitchYaw+0x2a8>)
 8002110:	f002 fc45 	bl	800499e <arm_sub_f32>
		float32_t result2 = 0;
 8002114:	9504      	str	r5, [sp, #16]
		float32_t prescaler = 2000;
 8002116:	4b96      	ldr	r3, [pc, #600]	; (8002370 <calc_RollPitchYaw+0x2b0>)
 8002118:	9305      	str	r3, [sp, #20]
		arm_mult_f32(&result1, &prescaler,&result2, 1);
 800211a:	2301      	movs	r3, #1
 800211c:	aa04      	add	r2, sp, #16
 800211e:	a905      	add	r1, sp, #20
 8002120:	4620      	mov	r0, r4
 8002122:	f002 fc0f 	bl	8004944 <arm_mult_f32>
		deltat = result2/TIMER_CLK_FREQ;
 8002126:	eddd 6a04 	vldr	s13, [sp, #16]
 800212a:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8002374 <calc_RollPitchYaw+0x2b4>
 800212e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002132:	4b91      	ldr	r3, [pc, #580]	; (8002378 <calc_RollPitchYaw+0x2b8>)
 8002134:	edc3 7a00 	vstr	s15, [r3]
	lastUpdate = Now;
 8002138:	4b8b      	ldr	r3, [pc, #556]	; (8002368 <calc_RollPitchYaw+0x2a8>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b8b      	ldr	r3, [pc, #556]	; (800236c <calc_RollPitchYaw+0x2ac>)
 800213e:	601a      	str	r2, [r3, #0]
	sum += deltat;
 8002140:	4e8e      	ldr	r6, [pc, #568]	; (800237c <calc_RollPitchYaw+0x2bc>)
 8002142:	edd6 7a00 	vldr	s15, [r6]
 8002146:	4b8c      	ldr	r3, [pc, #560]	; (8002378 <calc_RollPitchYaw+0x2b8>)
 8002148:	ed93 7a00 	vldr	s14, [r3]
 800214c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002150:	edc6 7a00 	vstr	s15, [r6]
	sumCount++;
 8002154:	4d8a      	ldr	r5, [pc, #552]	; (8002380 <calc_RollPitchYaw+0x2c0>)
 8002156:	682b      	ldr	r3, [r5, #0]
 8002158:	3301      	adds	r3, #1
 800215a:	602b      	str	r3, [r5, #0]
	MahonyQuaternionUpdate(ax, ay, az, gx * PI / 180.0, gy * PI / 180.0, gz * PI / 180.0, my, mx, mz);
 800215c:	4b89      	ldr	r3, [pc, #548]	; (8002384 <calc_RollPitchYaw+0x2c4>)
 800215e:	edd3 1a00 	vldr	s3, [r3]
 8002162:	eddf 7a89 	vldr	s15, [pc, #548]	; 8002388 <calc_RollPitchYaw+0x2c8>
 8002166:	ee61 1aa7 	vmul.f32	s3, s3, s15
 800216a:	4b88      	ldr	r3, [pc, #544]	; (800238c <calc_RollPitchYaw+0x2cc>)
 800216c:	ed93 2a00 	vldr	s4, [r3]
 8002170:	ee22 2a27 	vmul.f32	s4, s4, s15
 8002174:	4b86      	ldr	r3, [pc, #536]	; (8002390 <calc_RollPitchYaw+0x2d0>)
 8002176:	edd3 2a00 	vldr	s5, [r3]
 800217a:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800217e:	eddf 7a85 	vldr	s15, [pc, #532]	; 8002394 <calc_RollPitchYaw+0x2d4>
 8002182:	4b85      	ldr	r3, [pc, #532]	; (8002398 <calc_RollPitchYaw+0x2d8>)
 8002184:	ed93 4a00 	vldr	s8, [r3]
 8002188:	4b84      	ldr	r3, [pc, #528]	; (800239c <calc_RollPitchYaw+0x2dc>)
 800218a:	edd3 3a00 	vldr	s7, [r3]
 800218e:	4b84      	ldr	r3, [pc, #528]	; (80023a0 <calc_RollPitchYaw+0x2e0>)
 8002190:	ed93 3a00 	vldr	s6, [r3]
 8002194:	eec2 2aa7 	vdiv.f32	s5, s5, s15
 8002198:	ee82 2a27 	vdiv.f32	s4, s4, s15
 800219c:	eec1 1aa7 	vdiv.f32	s3, s3, s15
 80021a0:	4b80      	ldr	r3, [pc, #512]	; (80023a4 <calc_RollPitchYaw+0x2e4>)
 80021a2:	ed93 1a00 	vldr	s2, [r3]
 80021a6:	4b80      	ldr	r3, [pc, #512]	; (80023a8 <calc_RollPitchYaw+0x2e8>)
 80021a8:	edd3 0a00 	vldr	s1, [r3]
 80021ac:	4b7f      	ldr	r3, [pc, #508]	; (80023ac <calc_RollPitchYaw+0x2ec>)
 80021ae:	ed93 0a00 	vldr	s0, [r3]
 80021b2:	f7ff fd9d 	bl	8001cf0 <MahonyQuaternionUpdate>
	yaw = atan2(2.0 * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 80021b6:	4c7e      	ldr	r4, [pc, #504]	; (80023b0 <calc_RollPitchYaw+0x2f0>)
 80021b8:	edd4 9a01 	vldr	s19, [r4, #4]
 80021bc:	ed94 9a02 	vldr	s18, [r4, #8]
 80021c0:	ee29 7a89 	vmul.f32	s14, s19, s18
 80021c4:	ed94 8a00 	vldr	s16, [r4]
 80021c8:	edd4 8a03 	vldr	s17, [r4, #12]
 80021cc:	ee68 7a28 	vmul.f32	s15, s16, s17
 80021d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d4:	ee17 0a90 	vmov	r0, s15
 80021d8:	f7fe f966 	bl	80004a8 <__aeabi_f2d>
 80021dc:	4680      	mov	r8, r0
 80021de:	4689      	mov	r9, r1
 80021e0:	ee28 8a08 	vmul.f32	s16, s16, s16
 80021e4:	ee69 9aa9 	vmul.f32	s19, s19, s19
 80021e8:	ee38 8a29 	vadd.f32	s16, s16, s19
 80021ec:	ee29 9a09 	vmul.f32	s18, s18, s18
 80021f0:	ee38 8a49 	vsub.f32	s16, s16, s18
 80021f4:	ee68 8aa8 	vmul.f32	s17, s17, s17
 80021f8:	ee78 7a68 	vsub.f32	s15, s16, s17
 80021fc:	ee17 0a90 	vmov	r0, s15
 8002200:	f7fe f952 	bl	80004a8 <__aeabi_f2d>
 8002204:	4682      	mov	sl, r0
 8002206:	468b      	mov	fp, r1
 8002208:	4642      	mov	r2, r8
 800220a:	464b      	mov	r3, r9
 800220c:	4640      	mov	r0, r8
 800220e:	4649      	mov	r1, r9
 8002210:	f7fd ffec 	bl	80001ec <__adddf3>
 8002214:	ec4b ab11 	vmov	d1, sl, fp
 8002218:	ec41 0b10 	vmov	d0, r0, r1
 800221c:	f005 fcc2 	bl	8007ba4 <atan2>
 8002220:	ec51 0b10 	vmov	r0, r1, d0
 8002224:	f7fe fbaa 	bl	800097c <__aeabi_d2f>
 8002228:	4f62      	ldr	r7, [pc, #392]	; (80023b4 <calc_RollPitchYaw+0x2f4>)
 800222a:	6038      	str	r0, [r7, #0]
	pitch = -asin(2.0 * (q[1] * q[3] - q[0] * q[2]));
 800222c:	ed94 7a01 	vldr	s14, [r4, #4]
 8002230:	edd4 7a03 	vldr	s15, [r4, #12]
 8002234:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002238:	edd4 7a00 	vldr	s15, [r4]
 800223c:	edd4 6a02 	vldr	s13, [r4, #8]
 8002240:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002244:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002248:	ee17 0a90 	vmov	r0, s15
 800224c:	f7fe f92c 	bl	80004a8 <__aeabi_f2d>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	f7fd ffca 	bl	80001ec <__adddf3>
 8002258:	ec41 0b10 	vmov	d0, r0, r1
 800225c:	f005 fc4a 	bl	8007af4 <asin>
 8002260:	ec51 0b10 	vmov	r0, r1, d0
 8002264:	f7fe fb8a 	bl	800097c <__aeabi_d2f>
 8002268:	f8df a150 	ldr.w	sl, [pc, #336]	; 80023bc <calc_RollPitchYaw+0x2fc>
 800226c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8002270:	f8ca 0000 	str.w	r0, [sl]
	roll = atan2(2.0 * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 8002274:	ed94 8a00 	vldr	s16, [r4]
 8002278:	edd4 9a01 	vldr	s19, [r4, #4]
 800227c:	ee28 7a29 	vmul.f32	s14, s16, s19
 8002280:	ed94 9a02 	vldr	s18, [r4, #8]
 8002284:	edd4 8a03 	vldr	s17, [r4, #12]
 8002288:	ee69 7a28 	vmul.f32	s15, s18, s17
 800228c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002290:	ee17 0a90 	vmov	r0, s15
 8002294:	f7fe f908 	bl	80004a8 <__aeabi_f2d>
 8002298:	4680      	mov	r8, r0
 800229a:	4689      	mov	r9, r1
 800229c:	ee28 8a08 	vmul.f32	s16, s16, s16
 80022a0:	ee69 9aa9 	vmul.f32	s19, s19, s19
 80022a4:	ee38 8a69 	vsub.f32	s16, s16, s19
 80022a8:	ee29 9a09 	vmul.f32	s18, s18, s18
 80022ac:	ee38 8a49 	vsub.f32	s16, s16, s18
 80022b0:	ee68 8aa8 	vmul.f32	s17, s17, s17
 80022b4:	ee78 7a28 	vadd.f32	s15, s16, s17
 80022b8:	ee17 0a90 	vmov	r0, s15
 80022bc:	f7fe f8f4 	bl	80004a8 <__aeabi_f2d>
 80022c0:	ec41 0b18 	vmov	d8, r0, r1
 80022c4:	4642      	mov	r2, r8
 80022c6:	464b      	mov	r3, r9
 80022c8:	4640      	mov	r0, r8
 80022ca:	4649      	mov	r1, r9
 80022cc:	f7fd ff8e 	bl	80001ec <__adddf3>
 80022d0:	eeb0 1a48 	vmov.f32	s2, s16
 80022d4:	eef0 1a68 	vmov.f32	s3, s17
 80022d8:	ec41 0b10 	vmov	d0, r0, r1
 80022dc:	f005 fc62 	bl	8007ba4 <atan2>
 80022e0:	ec51 0b10 	vmov	r0, r1, d0
 80022e4:	f7fe fb4a 	bl	800097c <__aeabi_d2f>
 80022e8:	4604      	mov	r4, r0
	pitch *= 180.0 / PI;
 80022ea:	f8da 0000 	ldr.w	r0, [sl]
 80022ee:	f7fe f8db 	bl	80004a8 <__aeabi_f2d>
 80022f2:	a319      	add	r3, pc, #100	; (adr r3, 8002358 <calc_RollPitchYaw+0x298>)
 80022f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f8:	f7fe f92e 	bl	8000558 <__aeabi_dmul>
 80022fc:	f7fe fb3e 	bl	800097c <__aeabi_d2f>
 8002300:	f8ca 0000 	str.w	r0, [sl]
	yaw *= 180.0 / PI;
 8002304:	6838      	ldr	r0, [r7, #0]
 8002306:	f7fe f8cf 	bl	80004a8 <__aeabi_f2d>
 800230a:	a313      	add	r3, pc, #76	; (adr r3, 8002358 <calc_RollPitchYaw+0x298>)
 800230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002310:	f7fe f922 	bl	8000558 <__aeabi_dmul>
 8002314:	f7fe fb32 	bl	800097c <__aeabi_d2f>
	yaw -=  -1.1; // CHANGE-> (In Leeds, UK declination = -1.1) ... Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04 (+13.8)
 8002318:	f7fe f8c6 	bl	80004a8 <__aeabi_f2d>
 800231c:	a310      	add	r3, pc, #64	; (adr r3, 8002360 <calc_RollPitchYaw+0x2a0>)
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002322:	f7fd ff63 	bl	80001ec <__adddf3>
 8002326:	f7fe fb29 	bl	800097c <__aeabi_d2f>
 800232a:	6038      	str	r0, [r7, #0]
	roll *= 180.0 / PI;
 800232c:	4620      	mov	r0, r4
 800232e:	f7fe f8bb 	bl	80004a8 <__aeabi_f2d>
 8002332:	a309      	add	r3, pc, #36	; (adr r3, 8002358 <calc_RollPitchYaw+0x298>)
 8002334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002338:	f7fe f90e 	bl	8000558 <__aeabi_dmul>
 800233c:	f7fe fb1e 	bl	800097c <__aeabi_d2f>
 8002340:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <calc_RollPitchYaw+0x2f8>)
 8002342:	6018      	str	r0, [r3, #0]
	sum = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	6033      	str	r3, [r6, #0]
	sumCount = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	602b      	str	r3, [r5, #0]
}
 800234c:	b007      	add	sp, #28
 800234e:	ecbd 8b04 	vpop	{d8-d9}
 8002352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002356:	bf00      	nop
 8002358:	0d03cf26 	.word	0x0d03cf26
 800235c:	404ca5dc 	.word	0x404ca5dc
 8002360:	9999999a 	.word	0x9999999a
 8002364:	3ff19999 	.word	0x3ff19999
 8002368:	20000240 	.word	0x20000240
 800236c:	20000254 	.word	0x20000254
 8002370:	44fa0000 	.word	0x44fa0000
 8002374:	4cbebc20 	.word	0x4cbebc20
 8002378:	20000244 	.word	0x20000244
 800237c:	20000270 	.word	0x20000270
 8002380:	20000274 	.word	0x20000274
 8002384:	20000384 	.word	0x20000384
 8002388:	40490fdb 	.word	0x40490fdb
 800238c:	2000033c 	.word	0x2000033c
 8002390:	20000360 	.word	0x20000360
 8002394:	43340000 	.word	0x43340000
 8002398:	20000368 	.word	0x20000368
 800239c:	2000038c 	.word	0x2000038c
 80023a0:	20000350 	.word	0x20000350
 80023a4:	20000340 	.word	0x20000340
 80023a8:	20000388 	.word	0x20000388
 80023ac:	20000354 	.word	0x20000354
 80023b0:	2000001c 	.word	0x2000001c
 80023b4:	2000036c 	.word	0x2000036c
 80023b8:	2000037c 	.word	0x2000037c
 80023bc:	20000378 	.word	0x20000378
		readAccelData(accelCount);  // Read the x/y/z adc values
 80023c0:	4c69      	ldr	r4, [pc, #420]	; (8002568 <calc_RollPitchYaw+0x4a8>)
 80023c2:	4620      	mov	r0, r4
 80023c4:	f7fe feac 	bl	8001120 <readAccelData>
		ax = (float) accelCount[0] * aRes - accelBias[0]; // get actual g value, this depends on scale being set
 80023c8:	f9b4 3000 	ldrsh.w	r3, [r4]
 80023cc:	ee07 3a10 	vmov	s14, r3
 80023d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80023d4:	4b65      	ldr	r3, [pc, #404]	; (800256c <calc_RollPitchYaw+0x4ac>)
 80023d6:	edd3 7a00 	vldr	s15, [r3]
 80023da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023de:	4b64      	ldr	r3, [pc, #400]	; (8002570 <calc_RollPitchYaw+0x4b0>)
 80023e0:	edd3 6a00 	vldr	s13, [r3]
 80023e4:	ee37 7a66 	vsub.f32	s14, s14, s13
 80023e8:	4a62      	ldr	r2, [pc, #392]	; (8002574 <calc_RollPitchYaw+0x4b4>)
 80023ea:	ed82 7a00 	vstr	s14, [r2]
		ay = (float) accelCount[1] * aRes - accelBias[1];
 80023ee:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80023f2:	ee07 2a10 	vmov	s14, r2
 80023f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80023fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023fe:	edd3 6a01 	vldr	s13, [r3, #4]
 8002402:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002406:	4a5c      	ldr	r2, [pc, #368]	; (8002578 <calc_RollPitchYaw+0x4b8>)
 8002408:	ed82 7a00 	vstr	s14, [r2]
		az = (float) accelCount[2] * aRes - accelBias[2];
 800240c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8002410:	ee07 2a10 	vmov	s14, r2
 8002414:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002418:	ee67 7a87 	vmul.f32	s15, s15, s14
 800241c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002420:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002424:	4b55      	ldr	r3, [pc, #340]	; (800257c <calc_RollPitchYaw+0x4bc>)
 8002426:	edc3 7a00 	vstr	s15, [r3]
		readGyroData(gyroCount);  // Read the x/y/z adc values
 800242a:	4c55      	ldr	r4, [pc, #340]	; (8002580 <calc_RollPitchYaw+0x4c0>)
 800242c:	4620      	mov	r0, r4
 800242e:	f7fe fe99 	bl	8001164 <readGyroData>
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 8002432:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002436:	ee07 3a10 	vmov	s14, r3
 800243a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800243e:	4b51      	ldr	r3, [pc, #324]	; (8002584 <calc_RollPitchYaw+0x4c4>)
 8002440:	edd3 7a00 	vldr	s15, [r3]
 8002444:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002448:	4b4f      	ldr	r3, [pc, #316]	; (8002588 <calc_RollPitchYaw+0x4c8>)
 800244a:	edd3 6a00 	vldr	s13, [r3]
 800244e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002452:	4a4e      	ldr	r2, [pc, #312]	; (800258c <calc_RollPitchYaw+0x4cc>)
 8002454:	ed82 7a00 	vstr	s14, [r2]
		gy = (float) gyroCount[1] * gRes - gyroBias[1];
 8002458:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800245c:	ee07 2a10 	vmov	s14, r2
 8002460:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002464:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002468:	edd3 6a01 	vldr	s13, [r3, #4]
 800246c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002470:	4a47      	ldr	r2, [pc, #284]	; (8002590 <calc_RollPitchYaw+0x4d0>)
 8002472:	ed82 7a00 	vstr	s14, [r2]
		gz = (float) gyroCount[2] * gRes - gyroBias[2];
 8002476:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800247a:	ee07 2a10 	vmov	s14, r2
 800247e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002486:	ed93 7a02 	vldr	s14, [r3, #8]
 800248a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800248e:	4b41      	ldr	r3, [pc, #260]	; (8002594 <calc_RollPitchYaw+0x4d4>)
 8002490:	edc3 7a00 	vstr	s15, [r3]
		readMagData(magCount);  // Read the x/y/z adc values
 8002494:	4c40      	ldr	r4, [pc, #256]	; (8002598 <calc_RollPitchYaw+0x4d8>)
 8002496:	4620      	mov	r0, r4
 8002498:	f7fe fe86 	bl	80011a8 <readMagData>
		mx = (float) magCount[0] * mRes * magCalibration[0] - magbias[0]; // get actual magnetometer value, this depends on scale being set
 800249c:	f9b4 3000 	ldrsh.w	r3, [r4]
 80024a0:	ee07 3a10 	vmov	s14, r3
 80024a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024a8:	4b3c      	ldr	r3, [pc, #240]	; (800259c <calc_RollPitchYaw+0x4dc>)
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024b2:	4a3b      	ldr	r2, [pc, #236]	; (80025a0 <calc_RollPitchYaw+0x4e0>)
 80024b4:	edd2 6a00 	vldr	s13, [r2]
 80024b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80024bc:	4b39      	ldr	r3, [pc, #228]	; (80025a4 <calc_RollPitchYaw+0x4e4>)
 80024be:	edd3 6a00 	vldr	s13, [r3]
 80024c2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80024c6:	4938      	ldr	r1, [pc, #224]	; (80025a8 <calc_RollPitchYaw+0x4e8>)
 80024c8:	ed81 7a00 	vstr	s14, [r1]
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 80024cc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80024d0:	ee07 1a10 	vmov	s14, r1
 80024d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024dc:	edd2 6a01 	vldr	s13, [r2, #4]
 80024e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80024e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80024e8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80024ec:	492f      	ldr	r1, [pc, #188]	; (80025ac <calc_RollPitchYaw+0x4ec>)
 80024ee:	ed81 7a00 	vstr	s14, [r1]
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 80024f2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80024f6:	ee07 1a10 	vmov	s14, r1
 80024fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002502:	ed92 7a02 	vldr	s14, [r2, #8]
 8002506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800250a:	ed93 7a02 	vldr	s14, [r3, #8]
 800250e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002512:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <calc_RollPitchYaw+0x4f0>)
 8002514:	edc3 7a00 	vstr	s15, [r3]
 8002518:	e5e2      	b.n	80020e0 <calc_RollPitchYaw+0x20>
		float32_t timer_load = 65535;
 800251a:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <calc_RollPitchYaw+0x4f4>)
 800251c:	9301      	str	r3, [sp, #4]
		float32_t time_difference = 0;
 800251e:	2600      	movs	r6, #0
 8002520:	ad06      	add	r5, sp, #24
 8002522:	f845 6d10 	str.w	r6, [r5, #-16]!
		arm_sub_f32(&timer_load, &lastUpdate, &time_difference, 1);
 8002526:	2301      	movs	r3, #1
 8002528:	462a      	mov	r2, r5
 800252a:	4923      	ldr	r1, [pc, #140]	; (80025b8 <calc_RollPitchYaw+0x4f8>)
 800252c:	a801      	add	r0, sp, #4
 800252e:	f002 fa36 	bl	800499e <arm_sub_f32>
		float32_t time_diff_plus_now = 0;
 8002532:	ac06      	add	r4, sp, #24
 8002534:	f844 6d0c 	str.w	r6, [r4, #-12]!
		arm_add_f32(&time_difference, &Now, &time_diff_plus_now, 1);
 8002538:	2301      	movs	r3, #1
 800253a:	4622      	mov	r2, r4
 800253c:	491f      	ldr	r1, [pc, #124]	; (80025bc <calc_RollPitchYaw+0x4fc>)
 800253e:	4628      	mov	r0, r5
 8002540:	f002 f9f0 	bl	8004924 <arm_add_f32>
		float32_t prescaler = 2000;
 8002544:	4b1e      	ldr	r3, [pc, #120]	; (80025c0 <calc_RollPitchYaw+0x500>)
 8002546:	9305      	str	r3, [sp, #20]
		arm_mult_f32(&prescaler, &time_diff_plus_now, &top, 1);
 8002548:	2301      	movs	r3, #1
 800254a:	aa04      	add	r2, sp, #16
 800254c:	4621      	mov	r1, r4
 800254e:	a805      	add	r0, sp, #20
 8002550:	f002 f9f8 	bl	8004944 <arm_mult_f32>
		deltat = top/TIMER_CLK_FREQ;
 8002554:	eddd 6a04 	vldr	s13, [sp, #16]
 8002558:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80025c4 <calc_RollPitchYaw+0x504>
 800255c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002560:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <calc_RollPitchYaw+0x508>)
 8002562:	edc3 7a00 	vstr	s15, [r3]
 8002566:	e5e7      	b.n	8002138 <calc_RollPitchYaw+0x78>
 8002568:	200002c8 	.word	0x200002c8
 800256c:	20000358 	.word	0x20000358
 8002570:	20000004 	.word	0x20000004
 8002574:	20000354 	.word	0x20000354
 8002578:	20000388 	.word	0x20000388
 800257c:	20000340 	.word	0x20000340
 8002580:	20000348 	.word	0x20000348
 8002584:	20000364 	.word	0x20000364
 8002588:	20000010 	.word	0x20000010
 800258c:	20000384 	.word	0x20000384
 8002590:	2000033c 	.word	0x2000033c
 8002594:	20000360 	.word	0x20000360
 8002598:	20000370 	.word	0x20000370
 800259c:	20000380 	.word	0x20000380
 80025a0:	20000258 	.word	0x20000258
 80025a4:	20000264 	.word	0x20000264
 80025a8:	2000038c 	.word	0x2000038c
 80025ac:	20000350 	.word	0x20000350
 80025b0:	20000368 	.word	0x20000368
 80025b4:	477fff00 	.word	0x477fff00
 80025b8:	20000254 	.word	0x20000254
 80025bc:	20000240 	.word	0x20000240
 80025c0:	44fa0000 	.word	0x44fa0000
 80025c4:	4cbebc20 	.word	0x4cbebc20
 80025c8:	20000244 	.word	0x20000244

080025cc <pid_calculate_pitch>:
float pid_calculate_pitch(float IMU_pitch_value, int timer_value) {

	//pitch calculations

	//Calculate error
	pitch_error = IMU_pitch_value - pitch_setpoint;
 80025cc:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <pid_calculate_pitch+0x124>)
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80025d6:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <pid_calculate_pitch+0x128>)
 80025d8:	ed83 0a00 	vstr	s0, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 80025dc:	4b46      	ldr	r3, [pc, #280]	; (80026f8 <pid_calculate_pitch+0x12c>)
 80025de:	edd3 6a00 	vldr	s13, [r3]
 80025e2:	ee60 6a26 	vmul.f32	s13, s0, s13
 80025e6:	4b45      	ldr	r3, [pc, #276]	; (80026fc <pid_calculate_pitch+0x130>)
 80025e8:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	if(-5 < pitch_error < 5){
	pitch_i += (pitch_i_gain * pitch_error);
 80025ec:	4b44      	ldr	r3, [pc, #272]	; (8002700 <pid_calculate_pitch+0x134>)
 80025ee:	ed93 7a00 	vldr	s14, [r3]
 80025f2:	ee20 7a07 	vmul.f32	s14, s0, s14
 80025f6:	4b43      	ldr	r3, [pc, #268]	; (8002704 <pid_calculate_pitch+0x138>)
 80025f8:	edd3 7a00 	vldr	s15, [r3]
 80025fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002600:	ed83 7a00 	vstr	s14, [r3]
	}
	//Clip i component
	if (pitch_i > pitch_pid_clip)
 8002604:	4b40      	ldr	r3, [pc, #256]	; (8002708 <pid_calculate_pitch+0x13c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	ee07 3a90 	vmov	s15, r3
 800260c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002610:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8002614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002618:	dd46      	ble.n	80026a8 <pid_calculate_pitch+0xdc>
		pitch_i = pitch_pid_clip;
 800261a:	4a3a      	ldr	r2, [pc, #232]	; (8002704 <pid_calculate_pitch+0x138>)
 800261c:	ed82 6a00 	vstr	s12, [r2]
	else if (pitch_i < pitch_pid_clip * -1)
		pitch_i = pitch_pid_clip * -1;

	//Derivative component
	pitch_now = timer_value;
 8002620:	4a3a      	ldr	r2, [pc, #232]	; (800270c <pid_calculate_pitch+0x140>)
 8002622:	6010      	str	r0, [r2, #0]

	//Calculate elapsed time from timer count values
	if (pitch_now - pitch_last_update < 0) {
 8002624:	4a3a      	ldr	r2, [pc, #232]	; (8002710 <pid_calculate_pitch+0x144>)
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	1a81      	subs	r1, r0, r2
 800262a:	d44b      	bmi.n	80026c4 <pid_calculate_pitch+0xf8>
		//Formula for getting timer count into seconds = COUNT * (1/TIMER_CLK)*PRESCALER
		pitch_elapsed_time = (float) (((65535 - pitch_last_update) + pitch_now)* (1 / (100000000.0f / 2000.0f)));

	} else {
		//Otherwise normally the count difference will be positive
		pitch_elapsed_time = (float) ((pitch_now - pitch_last_update) * (1 / (100000000.0f / 2000.0f))); // set integration time by time elapsed since last filter update
 800262c:	ee07 1a90 	vmov	s15, r1
 8002630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002634:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002714 <pid_calculate_pitch+0x148>
 8002638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800263c:	4a36      	ldr	r2, [pc, #216]	; (8002718 <pid_calculate_pitch+0x14c>)
 800263e:	edc2 7a00 	vstr	s15, [r2]
	}

	//Now actually work out d component
	pitch_d = pitch_d_gain
			* ((pitch_error - pitch_last_d_error) / pitch_elapsed_time);
 8002642:	4a36      	ldr	r2, [pc, #216]	; (800271c <pid_calculate_pitch+0x150>)
 8002644:	ed92 7a00 	vldr	s14, [r2]
 8002648:	ee30 7a47 	vsub.f32	s14, s0, s14
 800264c:	4932      	ldr	r1, [pc, #200]	; (8002718 <pid_calculate_pitch+0x14c>)
 800264e:	edd1 5a00 	vldr	s11, [r1]
 8002652:	eec7 7a25 	vdiv.f32	s15, s14, s11
 8002656:	4932      	ldr	r1, [pc, #200]	; (8002720 <pid_calculate_pitch+0x154>)
 8002658:	ed91 7a00 	vldr	s14, [r1]
 800265c:	ee67 7a87 	vmul.f32	s15, s15, s14
	pitch_d = pitch_d_gain
 8002660:	4930      	ldr	r1, [pc, #192]	; (8002724 <pid_calculate_pitch+0x158>)
 8002662:	edc1 7a00 	vstr	s15, [r1]
	pitch_last_update = pitch_now;
 8002666:	492a      	ldr	r1, [pc, #168]	; (8002710 <pid_calculate_pitch+0x144>)
 8002668:	6008      	str	r0, [r1, #0]
	pitch_last_d_error = pitch_error;
 800266a:	ed82 0a00 	vstr	s0, [r2]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 800266e:	4a25      	ldr	r2, [pc, #148]	; (8002704 <pid_calculate_pitch+0x138>)
 8002670:	ed92 7a00 	vldr	s14, [r2]
 8002674:	ee76 6a87 	vadd.f32	s13, s13, s14
 8002678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800267c:	4a2a      	ldr	r2, [pc, #168]	; (8002728 <pid_calculate_pitch+0x15c>)
 800267e:	edc2 7a00 	vstr	s15, [r2]

	//Clip PID output in event of extreme swings
	if (pitch_output < -pitch_pid_clip) {
 8002682:	425b      	negs	r3, r3
 8002684:	ee07 3a10 	vmov	s14, r3
 8002688:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800268c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002694:	d426      	bmi.n	80026e4 <pid_calculate_pitch+0x118>
		pitch_output = -pitch_pid_clip;
	} else if (pitch_output > pitch_pid_clip) {
 8002696:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800269a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269e:	d523      	bpl.n	80026e8 <pid_calculate_pitch+0x11c>
		pitch_output = pitch_pid_clip;
 80026a0:	4b21      	ldr	r3, [pc, #132]	; (8002728 <pid_calculate_pitch+0x15c>)
 80026a2:	ed83 6a00 	vstr	s12, [r3]
 80026a6:	e01f      	b.n	80026e8 <pid_calculate_pitch+0x11c>
	else if (pitch_i < pitch_pid_clip * -1)
 80026a8:	425a      	negs	r2, r3
 80026aa:	ee07 2a90 	vmov	s15, r2
 80026ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ba:	d5b1      	bpl.n	8002620 <pid_calculate_pitch+0x54>
		pitch_i = pitch_pid_clip * -1;
 80026bc:	4a11      	ldr	r2, [pc, #68]	; (8002704 <pid_calculate_pitch+0x138>)
 80026be:	edc2 7a00 	vstr	s15, [r2]
 80026c2:	e7ad      	b.n	8002620 <pid_calculate_pitch+0x54>
		pitch_elapsed_time = (float) (((65535 - pitch_last_update) + pitch_now)* (1 / (100000000.0f / 2000.0f)));
 80026c4:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 80026c8:	32ff      	adds	r2, #255	; 0xff
 80026ca:	4402      	add	r2, r0
 80026cc:	ee07 2a90 	vmov	s15, r2
 80026d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026d4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002714 <pid_calculate_pitch+0x148>
 80026d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026dc:	4a0e      	ldr	r2, [pc, #56]	; (8002718 <pid_calculate_pitch+0x14c>)
 80026de:	edc2 7a00 	vstr	s15, [r2]
 80026e2:	e7ae      	b.n	8002642 <pid_calculate_pitch+0x76>
		pitch_output = -pitch_pid_clip;
 80026e4:	ed82 7a00 	vstr	s14, [r2]
	}

	return pitch_output;
}
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <pid_calculate_pitch+0x15c>)
 80026ea:	ed93 0a00 	vldr	s0, [r3]
 80026ee:	4770      	bx	lr
 80026f0:	2000029c 	.word	0x2000029c
 80026f4:	20000280 	.word	0x20000280
 80026f8:	20000298 	.word	0x20000298
 80026fc:	20000398 	.word	0x20000398
 8002700:	20000284 	.word	0x20000284
 8002704:	2000039c 	.word	0x2000039c
 8002708:	2000002c 	.word	0x2000002c
 800270c:	20000290 	.word	0x20000290
 8002710:	2000028c 	.word	0x2000028c
 8002714:	37a7c5ac 	.word	0x37a7c5ac
 8002718:	2000027c 	.word	0x2000027c
 800271c:	20000288 	.word	0x20000288
 8002720:	20000278 	.word	0x20000278
 8002724:	20000394 	.word	0x20000394
 8002728:	20000294 	.word	0x20000294

0800272c <p_up>:



void p_up(){
	pitch_p_gain += 0.5;
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <p_up+0x14>)
 800272e:	edd3 7a00 	vldr	s15, [r3]
 8002732:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002736:	ee77 7a87 	vadd.f32	s15, s15, s14
 800273a:	edc3 7a00 	vstr	s15, [r3]
}
 800273e:	4770      	bx	lr
 8002740:	20000298 	.word	0x20000298

08002744 <p_down>:
void p_down(){
	pitch_p_gain -= 0.5;
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <p_down+0x14>)
 8002746:	edd3 7a00 	vldr	s15, [r3]
 800274a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800274e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002752:	edc3 7a00 	vstr	s15, [r3]
}
 8002756:	4770      	bx	lr
 8002758:	20000298 	.word	0x20000298
 800275c:	00000000 	.word	0x00000000

08002760 <i_up>:
void i_up(){
 8002760:	b510      	push	{r4, lr}
	pitch_i_gain += 0.2;
 8002762:	4c09      	ldr	r4, [pc, #36]	; (8002788 <i_up+0x28>)
 8002764:	6820      	ldr	r0, [r4, #0]
 8002766:	f7fd fe9f 	bl	80004a8 <__aeabi_f2d>
 800276a:	a305      	add	r3, pc, #20	; (adr r3, 8002780 <i_up+0x20>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	f7fd fd3c 	bl	80001ec <__adddf3>
 8002774:	f7fe f902 	bl	800097c <__aeabi_d2f>
 8002778:	6020      	str	r0, [r4, #0]
}
 800277a:	bd10      	pop	{r4, pc}
 800277c:	f3af 8000 	nop.w
 8002780:	9999999a 	.word	0x9999999a
 8002784:	3fc99999 	.word	0x3fc99999
 8002788:	20000284 	.word	0x20000284
 800278c:	00000000 	.word	0x00000000

08002790 <i_down>:
void i_down(){
 8002790:	b510      	push	{r4, lr}
	pitch_i_gain -= 0.2;
 8002792:	4c09      	ldr	r4, [pc, #36]	; (80027b8 <i_down+0x28>)
 8002794:	6820      	ldr	r0, [r4, #0]
 8002796:	f7fd fe87 	bl	80004a8 <__aeabi_f2d>
 800279a:	a305      	add	r3, pc, #20	; (adr r3, 80027b0 <i_down+0x20>)
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	f7fd fd22 	bl	80001e8 <__aeabi_dsub>
 80027a4:	f7fe f8ea 	bl	800097c <__aeabi_d2f>
 80027a8:	6020      	str	r0, [r4, #0]
}
 80027aa:	bd10      	pop	{r4, pc}
 80027ac:	f3af 8000 	nop.w
 80027b0:	9999999a 	.word	0x9999999a
 80027b4:	3fc99999 	.word	0x3fc99999
 80027b8:	20000284 	.word	0x20000284
 80027bc:	00000000 	.word	0x00000000

080027c0 <d_up>:
void d_up(){
 80027c0:	b510      	push	{r4, lr}
	pitch_d_gain += 0.1;
 80027c2:	4c09      	ldr	r4, [pc, #36]	; (80027e8 <d_up+0x28>)
 80027c4:	6820      	ldr	r0, [r4, #0]
 80027c6:	f7fd fe6f 	bl	80004a8 <__aeabi_f2d>
 80027ca:	a305      	add	r3, pc, #20	; (adr r3, 80027e0 <d_up+0x20>)
 80027cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d0:	f7fd fd0c 	bl	80001ec <__adddf3>
 80027d4:	f7fe f8d2 	bl	800097c <__aeabi_d2f>
 80027d8:	6020      	str	r0, [r4, #0]
}
 80027da:	bd10      	pop	{r4, pc}
 80027dc:	f3af 8000 	nop.w
 80027e0:	9999999a 	.word	0x9999999a
 80027e4:	3fb99999 	.word	0x3fb99999
 80027e8:	20000278 	.word	0x20000278
 80027ec:	00000000 	.word	0x00000000

080027f0 <d_down>:
void d_down(){
 80027f0:	b510      	push	{r4, lr}
	pitch_d_gain -= 0.1;
 80027f2:	4c09      	ldr	r4, [pc, #36]	; (8002818 <d_down+0x28>)
 80027f4:	6820      	ldr	r0, [r4, #0]
 80027f6:	f7fd fe57 	bl	80004a8 <__aeabi_f2d>
 80027fa:	a305      	add	r3, pc, #20	; (adr r3, 8002810 <d_down+0x20>)
 80027fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002800:	f7fd fcf2 	bl	80001e8 <__aeabi_dsub>
 8002804:	f7fe f8ba 	bl	800097c <__aeabi_d2f>
 8002808:	6020      	str	r0, [r4, #0]
}
 800280a:	bd10      	pop	{r4, pc}
 800280c:	f3af 8000 	nop.w
 8002810:	9999999a 	.word	0x9999999a
 8002814:	3fb99999 	.word	0x3fb99999
 8002818:	20000278 	.word	0x20000278

0800281c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800281c:	b510      	push	{r4, lr}
 800281e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002820:	4b0e      	ldr	r3, [pc, #56]	; (800285c <HAL_InitTick+0x40>)
 8002822:	7818      	ldrb	r0, [r3, #0]
 8002824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002828:	fbb3 f3f0 	udiv	r3, r3, r0
 800282c:	4a0c      	ldr	r2, [pc, #48]	; (8002860 <HAL_InitTick+0x44>)
 800282e:	6810      	ldr	r0, [r2, #0]
 8002830:	fbb0 f0f3 	udiv	r0, r0, r3
 8002834:	f000 f8ac 	bl	8002990 <HAL_SYSTICK_Config>
 8002838:	b968      	cbnz	r0, 8002856 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800283a:	2c0f      	cmp	r4, #15
 800283c:	d901      	bls.n	8002842 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800283e:	2001      	movs	r0, #1
 8002840:	e00a      	b.n	8002858 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002842:	2200      	movs	r2, #0
 8002844:	4621      	mov	r1, r4
 8002846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800284a:	f000 f85f 	bl	800290c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_InitTick+0x48>)
 8002850:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002852:	2000      	movs	r0, #0
 8002854:	e000      	b.n	8002858 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002856:	2001      	movs	r0, #1
}
 8002858:	bd10      	pop	{r4, pc}
 800285a:	bf00      	nop
 800285c:	20000030 	.word	0x20000030
 8002860:	20000048 	.word	0x20000048
 8002864:	20000034 	.word	0x20000034

08002868 <HAL_Init>:
{
 8002868:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800286a:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_Init+0x30>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002872:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800287a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002882:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002884:	2003      	movs	r0, #3
 8002886:	f000 f82f 	bl	80028e8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800288a:	2000      	movs	r0, #0
 800288c:	f7ff ffc6 	bl	800281c <HAL_InitTick>
  HAL_MspInit();
 8002890:	f002 fb9e 	bl	8004fd0 <HAL_MspInit>
}
 8002894:	2000      	movs	r0, #0
 8002896:	bd08      	pop	{r3, pc}
 8002898:	40023c00 	.word	0x40023c00

0800289c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800289c:	4a03      	ldr	r2, [pc, #12]	; (80028ac <HAL_IncTick+0x10>)
 800289e:	6811      	ldr	r1, [r2, #0]
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_IncTick+0x14>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	440b      	add	r3, r1
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	200003a8 	.word	0x200003a8
 80028b0:	20000030 	.word	0x20000030

080028b4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80028b4:	4b01      	ldr	r3, [pc, #4]	; (80028bc <HAL_GetTick+0x8>)
 80028b6:	6818      	ldr	r0, [r3, #0]
}
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	200003a8 	.word	0x200003a8

080028c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028c0:	b538      	push	{r3, r4, r5, lr}
 80028c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80028c4:	f7ff fff6 	bl	80028b4 <HAL_GetTick>
 80028c8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ca:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80028ce:	d002      	beq.n	80028d6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80028d0:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <HAL_Delay+0x24>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028d6:	f7ff ffed 	bl	80028b4 <HAL_GetTick>
 80028da:	1b40      	subs	r0, r0, r5
 80028dc:	42a0      	cmp	r0, r4
 80028de:	d3fa      	bcc.n	80028d6 <HAL_Delay+0x16>
  {
  }
}
 80028e0:	bd38      	pop	{r3, r4, r5, pc}
 80028e2:	bf00      	nop
 80028e4:	20000030 	.word	0x20000030

080028e8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e8:	4a07      	ldr	r2, [pc, #28]	; (8002908 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80028ea:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028f0:	041b      	lsls	r3, r3, #16
 80028f2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f4:	0200      	lsls	r0, r0, #8
 80028f6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028fa:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80028fc:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8002900:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002904:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002906:	4770      	bx	lr
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800290c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800290e:	4b17      	ldr	r3, [pc, #92]	; (800296c <HAL_NVIC_SetPriority+0x60>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002916:	f1c3 0407 	rsb	r4, r3, #7
 800291a:	2c04      	cmp	r4, #4
 800291c:	bf28      	it	cs
 800291e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002920:	1d1d      	adds	r5, r3, #4
 8002922:	2d06      	cmp	r5, #6
 8002924:	d918      	bls.n	8002958 <HAL_NVIC_SetPriority+0x4c>
 8002926:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002928:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800292c:	fa05 f404 	lsl.w	r4, r5, r4
 8002930:	ea21 0104 	bic.w	r1, r1, r4
 8002934:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002936:	fa05 f303 	lsl.w	r3, r5, r3
 800293a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800293e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002940:	2800      	cmp	r0, #0
 8002942:	db0b      	blt.n	800295c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002944:	0109      	lsls	r1, r1, #4
 8002946:	b2c9      	uxtb	r1, r1
 8002948:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800294c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002950:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002954:	bc30      	pop	{r4, r5}
 8002956:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002958:	2300      	movs	r3, #0
 800295a:	e7e5      	b.n	8002928 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295c:	f000 000f 	and.w	r0, r0, #15
 8002960:	0109      	lsls	r1, r1, #4
 8002962:	b2c9      	uxtb	r1, r1
 8002964:	4b02      	ldr	r3, [pc, #8]	; (8002970 <HAL_NVIC_SetPriority+0x64>)
 8002966:	5419      	strb	r1, [r3, r0]
 8002968:	e7f4      	b.n	8002954 <HAL_NVIC_SetPriority+0x48>
 800296a:	bf00      	nop
 800296c:	e000ed00 	.word	0xe000ed00
 8002970:	e000ed14 	.word	0xe000ed14

08002974 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002974:	2800      	cmp	r0, #0
 8002976:	db07      	blt.n	8002988 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002978:	f000 021f 	and.w	r2, r0, #31
 800297c:	0940      	lsrs	r0, r0, #5
 800297e:	2301      	movs	r3, #1
 8002980:	4093      	lsls	r3, r2
 8002982:	4a02      	ldr	r2, [pc, #8]	; (800298c <HAL_NVIC_EnableIRQ+0x18>)
 8002984:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	e000e100 	.word	0xe000e100

08002990 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002990:	3801      	subs	r0, #1
 8002992:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002996:	d20a      	bcs.n	80029ae <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002998:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_SYSTICK_Config+0x24>)
 800299a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299c:	4a06      	ldr	r2, [pc, #24]	; (80029b8 <HAL_SYSTICK_Config+0x28>)
 800299e:	21f0      	movs	r1, #240	; 0xf0
 80029a0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029a4:	2000      	movs	r0, #0
 80029a6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029a8:	2207      	movs	r2, #7
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80029ae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000e010 	.word	0xe000e010
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029bc:	2300      	movs	r3, #0
 80029be:	2b0f      	cmp	r3, #15
 80029c0:	f200 80c5 	bhi.w	8002b4e <HAL_GPIO_Init+0x192>
{
 80029c4:	b4f0      	push	{r4, r5, r6, r7}
 80029c6:	b082      	sub	sp, #8
 80029c8:	e039      	b.n	8002a3e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ca:	2204      	movs	r2, #4
 80029cc:	e000      	b.n	80029d0 <HAL_GPIO_Init+0x14>
 80029ce:	2200      	movs	r2, #0
 80029d0:	40b2      	lsls	r2, r6
 80029d2:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029d4:	3402      	adds	r4, #2
 80029d6:	4e5e      	ldr	r6, [pc, #376]	; (8002b50 <HAL_GPIO_Init+0x194>)
 80029d8:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029dc:	4a5d      	ldr	r2, [pc, #372]	; (8002b54 <HAL_GPIO_Init+0x198>)
 80029de:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	43ea      	mvns	r2, r5
 80029e2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029e6:	684f      	ldr	r7, [r1, #4]
 80029e8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80029ec:	d001      	beq.n	80029f2 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80029ee:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80029f2:	4c58      	ldr	r4, [pc, #352]	; (8002b54 <HAL_GPIO_Init+0x198>)
 80029f4:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80029f6:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80029f8:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029fc:	684f      	ldr	r7, [r1, #4]
 80029fe:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002a02:	d001      	beq.n	8002a08 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8002a04:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002a08:	4c52      	ldr	r4, [pc, #328]	; (8002b54 <HAL_GPIO_Init+0x198>)
 8002a0a:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a0c:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002a0e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a12:	684f      	ldr	r7, [r1, #4]
 8002a14:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002a18:	d001      	beq.n	8002a1e <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8002a1a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8002a1e:	4c4d      	ldr	r4, [pc, #308]	; (8002b54 <HAL_GPIO_Init+0x198>)
 8002a20:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002a22:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002a24:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a26:	684e      	ldr	r6, [r1, #4]
 8002a28:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002a2c:	d001      	beq.n	8002a32 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8002a2e:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8002a32:	4c48      	ldr	r4, [pc, #288]	; (8002b54 <HAL_GPIO_Init+0x198>)
 8002a34:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a36:	3301      	adds	r3, #1
 8002a38:	2b0f      	cmp	r3, #15
 8002a3a:	f200 8085 	bhi.w	8002b48 <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 8002a3e:	2201      	movs	r2, #1
 8002a40:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a42:	680c      	ldr	r4, [r1, #0]
 8002a44:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8002a48:	42aa      	cmp	r2, r5
 8002a4a:	d1f4      	bne.n	8002a36 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a4c:	684c      	ldr	r4, [r1, #4]
 8002a4e:	2c02      	cmp	r4, #2
 8002a50:	d001      	beq.n	8002a56 <HAL_GPIO_Init+0x9a>
 8002a52:	2c12      	cmp	r4, #18
 8002a54:	d110      	bne.n	8002a78 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8002a56:	08de      	lsrs	r6, r3, #3
 8002a58:	3608      	adds	r6, #8
 8002a5a:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a5e:	f003 0407 	and.w	r4, r3, #7
 8002a62:	00a7      	lsls	r7, r4, #2
 8002a64:	240f      	movs	r4, #15
 8002a66:	40bc      	lsls	r4, r7
 8002a68:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a6c:	690c      	ldr	r4, [r1, #16]
 8002a6e:	40bc      	lsls	r4, r7
 8002a70:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8002a74:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002a78:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a7a:	005f      	lsls	r7, r3, #1
 8002a7c:	2603      	movs	r6, #3
 8002a7e:	40be      	lsls	r6, r7
 8002a80:	43f6      	mvns	r6, r6
 8002a82:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a86:	684c      	ldr	r4, [r1, #4]
 8002a88:	f004 0403 	and.w	r4, r4, #3
 8002a8c:	40bc      	lsls	r4, r7
 8002a8e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002a92:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a94:	684c      	ldr	r4, [r1, #4]
 8002a96:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8002a9a:	f1bc 0f01 	cmp.w	ip, #1
 8002a9e:	d903      	bls.n	8002aa8 <HAL_GPIO_Init+0xec>
 8002aa0:	2c11      	cmp	r4, #17
 8002aa2:	d001      	beq.n	8002aa8 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aa4:	2c12      	cmp	r4, #18
 8002aa6:	d110      	bne.n	8002aca <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8002aa8:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aaa:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aae:	68cc      	ldr	r4, [r1, #12]
 8002ab0:	40bc      	lsls	r4, r7
 8002ab2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8002ab6:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002ab8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aba:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002abe:	684c      	ldr	r4, [r1, #4]
 8002ac0:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002ac4:	409c      	lsls	r4, r3
 8002ac6:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8002ac8:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8002aca:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002acc:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ace:	688a      	ldr	r2, [r1, #8]
 8002ad0:	40ba      	lsls	r2, r7
 8002ad2:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8002ad4:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ad6:	684a      	ldr	r2, [r1, #4]
 8002ad8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002adc:	d0ab      	beq.n	8002a36 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ade:	2200      	movs	r2, #0
 8002ae0:	9201      	str	r2, [sp, #4]
 8002ae2:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <HAL_GPIO_Init+0x19c>)
 8002ae4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8002ae6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002aea:	6454      	str	r4, [r2, #68]	; 0x44
 8002aec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002aee:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002af2:	9201      	str	r2, [sp, #4]
 8002af4:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002af6:	089c      	lsrs	r4, r3, #2
 8002af8:	1ca6      	adds	r6, r4, #2
 8002afa:	4a15      	ldr	r2, [pc, #84]	; (8002b50 <HAL_GPIO_Init+0x194>)
 8002afc:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b00:	f003 0203 	and.w	r2, r3, #3
 8002b04:	0096      	lsls	r6, r2, #2
 8002b06:	220f      	movs	r2, #15
 8002b08:	40b2      	lsls	r2, r6
 8002b0a:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b0e:	4a13      	ldr	r2, [pc, #76]	; (8002b5c <HAL_GPIO_Init+0x1a0>)
 8002b10:	4290      	cmp	r0, r2
 8002b12:	f43f af5c 	beq.w	80029ce <HAL_GPIO_Init+0x12>
 8002b16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b1a:	4290      	cmp	r0, r2
 8002b1c:	d00e      	beq.n	8002b3c <HAL_GPIO_Init+0x180>
 8002b1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b22:	4290      	cmp	r0, r2
 8002b24:	d00c      	beq.n	8002b40 <HAL_GPIO_Init+0x184>
 8002b26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b2a:	4290      	cmp	r0, r2
 8002b2c:	d00a      	beq.n	8002b44 <HAL_GPIO_Init+0x188>
 8002b2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b32:	4290      	cmp	r0, r2
 8002b34:	f43f af49 	beq.w	80029ca <HAL_GPIO_Init+0xe>
 8002b38:	2207      	movs	r2, #7
 8002b3a:	e749      	b.n	80029d0 <HAL_GPIO_Init+0x14>
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	e747      	b.n	80029d0 <HAL_GPIO_Init+0x14>
 8002b40:	2202      	movs	r2, #2
 8002b42:	e745      	b.n	80029d0 <HAL_GPIO_Init+0x14>
 8002b44:	2203      	movs	r2, #3
 8002b46:	e743      	b.n	80029d0 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8002b48:	b002      	add	sp, #8
 8002b4a:	bcf0      	pop	{r4, r5, r6, r7}
 8002b4c:	4770      	bx	lr
 8002b4e:	4770      	bx	lr
 8002b50:	40013800 	.word	0x40013800
 8002b54:	40013c00 	.word	0x40013c00
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40020000 	.word	0x40020000

08002b60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b60:	b912      	cbnz	r2, 8002b68 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b62:	0409      	lsls	r1, r1, #16
 8002b64:	6181      	str	r1, [r0, #24]
  }
}
 8002b66:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002b68:	6181      	str	r1, [r0, #24]
 8002b6a:	4770      	bx	lr

08002b6c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002b6c:	6943      	ldr	r3, [r0, #20]
 8002b6e:	ea31 0303 	bics.w	r3, r1, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b74:	6181      	str	r1, [r0, #24]
  }
}
 8002b76:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b78:	0409      	lsls	r1, r1, #16
 8002b7a:	6181      	str	r1, [r0, #24]
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b80:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b82:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	4203      	tst	r3, r0
 8002b88:	d100      	bne.n	8002b8c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8002b8a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b8c:	4b02      	ldr	r3, [pc, #8]	; (8002b98 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002b8e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b90:	f002 f9fc 	bl	8004f8c <HAL_GPIO_EXTI_Callback>
}
 8002b94:	e7f9      	b.n	8002b8a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002b96:	bf00      	nop
 8002b98:	40013c00 	.word	0x40013c00

08002b9c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b9c:	6803      	ldr	r3, [r0, #0]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002ba4:	d011      	beq.n	8002bca <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002baa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bb6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bba:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002bbc:	f042 0204 	orr.w	r2, r2, #4
 8002bc0:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	4770      	bx	lr
  }
  return HAL_OK;
 8002bca:	2000      	movs	r0, #0
}
 8002bcc:	4770      	bx	lr

08002bce <I2C_WaitOnFlagUntilTimeout>:
{
 8002bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd0:	4606      	mov	r6, r0
 8002bd2:	460c      	mov	r4, r1
 8002bd4:	4617      	mov	r7, r2
 8002bd6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bd8:	e022      	b.n	8002c20 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bda:	f7ff fe6b 	bl	80028b4 <HAL_GetTick>
 8002bde:	9b06      	ldr	r3, [sp, #24]
 8002be0:	1ac0      	subs	r0, r0, r3
 8002be2:	42a8      	cmp	r0, r5
 8002be4:	d800      	bhi.n	8002be8 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8002be6:	b9dd      	cbnz	r5, 8002c20 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bec:	2220      	movs	r2, #32
 8002bee:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bf2:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bf6:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8002bf8:	f042 0220 	orr.w	r2, r2, #32
 8002bfc:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002bfe:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8002c02:	2001      	movs	r0, #1
 8002c04:	e01a      	b.n	8002c3c <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c06:	6833      	ldr	r3, [r6, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	ea24 0303 	bic.w	r3, r4, r3
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	fab3 f383 	clz	r3, r3
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	429f      	cmp	r7, r3
 8002c18:	d10f      	bne.n	8002c3a <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8002c1a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002c1e:	d1dc      	bne.n	8002bda <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c20:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d0ee      	beq.n	8002c06 <I2C_WaitOnFlagUntilTimeout+0x38>
 8002c28:	6833      	ldr	r3, [r6, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	ea24 0303 	bic.w	r3, r4, r3
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	e7ed      	b.n	8002c16 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8002c3a:	2000      	movs	r0, #0
}
 8002c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c40:	4604      	mov	r4, r0
 8002c42:	460d      	mov	r5, r1
 8002c44:	4616      	mov	r6, r2
 8002c46:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c48:	e03c      	b.n	8002cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c50:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c58:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c64:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c68:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002c6a:	f042 0204 	orr.w	r2, r2, #4
 8002c6e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002c70:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8002c74:	2001      	movs	r0, #1
 8002c76:	e033      	b.n	8002ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c78:	f7ff fe1c 	bl	80028b4 <HAL_GetTick>
 8002c7c:	1bc0      	subs	r0, r0, r7
 8002c7e:	42b0      	cmp	r0, r6
 8002c80:	d800      	bhi.n	8002c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8002c82:	b9fe      	cbnz	r6, 8002cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c84:	2300      	movs	r3, #0
 8002c86:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c92:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002c94:	f042 0220 	orr.w	r2, r2, #32
 8002c98:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002c9a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	e01e      	b.n	8002ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	ea25 0303 	bic.w	r3, r5, r3
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3300      	adds	r3, #0
 8002cae:	bf18      	it	ne
 8002cb0:	2301      	movne	r3, #1
 8002cb2:	b1a3      	cbz	r3, 8002cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	695a      	ldr	r2, [r3, #20]
 8002cb8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002cbc:	d1c5      	bne.n	8002c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8002cc2:	d1d9      	bne.n	8002c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cc4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d0ea      	beq.n	8002ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	ea25 0303 	bic.w	r3, r5, r3
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3300      	adds	r3, #0
 8002cd8:	bf18      	it	ne
 8002cda:	2301      	movne	r3, #1
 8002cdc:	e7e9      	b.n	8002cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8002cde:	2000      	movs	r0, #0
}
 8002ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ce4 <I2C_MasterRequestWrite>:
{
 8002ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	4604      	mov	r4, r0
 8002cea:	460f      	mov	r7, r1
 8002cec:	4615      	mov	r5, r2
 8002cee:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cf0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d00d      	beq.n	8002d12 <I2C_MasterRequestWrite+0x2e>
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d00b      	beq.n	8002d12 <I2C_MasterRequestWrite+0x2e>
 8002cfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cfe:	d008      	beq.n	8002d12 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d00:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002d02:	2b12      	cmp	r3, #18
 8002d04:	d10a      	bne.n	8002d1c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d06:	6802      	ldr	r2, [r0, #0]
 8002d08:	6813      	ldr	r3, [r2, #0]
 8002d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	e004      	b.n	8002d1c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d12:	6822      	ldr	r2, [r4, #0]
 8002d14:	6813      	ldr	r3, [r2, #0]
 8002d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1a:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d1c:	9600      	str	r6, [sp, #0]
 8002d1e:	462b      	mov	r3, r5
 8002d20:	2200      	movs	r2, #0
 8002d22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d26:	4620      	mov	r0, r4
 8002d28:	f7ff ff51 	bl	8002bce <I2C_WaitOnFlagUntilTimeout>
 8002d2c:	bb18      	cbnz	r0, 8002d76 <I2C_MasterRequestWrite+0x92>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d2e:	6923      	ldr	r3, [r4, #16]
 8002d30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d34:	d10d      	bne.n	8002d52 <I2C_MasterRequestWrite+0x6e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d36:	6823      	ldr	r3, [r4, #0]
 8002d38:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8002d3c:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d3e:	4633      	mov	r3, r6
 8002d40:	462a      	mov	r2, r5
 8002d42:	4910      	ldr	r1, [pc, #64]	; (8002d84 <I2C_MasterRequestWrite+0xa0>)
 8002d44:	4620      	mov	r0, r4
 8002d46:	f7ff ff7a 	bl	8002c3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	b1a0      	cbz	r0, 8002d78 <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e012      	b.n	8002d78 <I2C_MasterRequestWrite+0x94>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d52:	11fb      	asrs	r3, r7, #7
 8002d54:	6822      	ldr	r2, [r4, #0]
 8002d56:	f003 0306 	and.w	r3, r3, #6
 8002d5a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002d5e:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d60:	4633      	mov	r3, r6
 8002d62:	462a      	mov	r2, r5
 8002d64:	4908      	ldr	r1, [pc, #32]	; (8002d88 <I2C_MasterRequestWrite+0xa4>)
 8002d66:	4620      	mov	r0, r4
 8002d68:	f7ff ff69 	bl	8002c3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d6c:	b938      	cbnz	r0, 8002d7e <I2C_MasterRequestWrite+0x9a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	b2ff      	uxtb	r7, r7
 8002d72:	611f      	str	r7, [r3, #16]
 8002d74:	e7e3      	b.n	8002d3e <I2C_MasterRequestWrite+0x5a>
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	b003      	add	sp, #12
 8002d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e7fa      	b.n	8002d78 <I2C_MasterRequestWrite+0x94>
 8002d82:	bf00      	nop
 8002d84:	00010002 	.word	0x00010002
 8002d88:	00010008 	.word	0x00010008

08002d8c <I2C_MasterRequestRead>:
{
 8002d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d90:	b084      	sub	sp, #16
 8002d92:	4604      	mov	r4, r0
 8002d94:	460d      	mov	r5, r1
 8002d96:	4616      	mov	r6, r2
 8002d98:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d9a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d9c:	6801      	ldr	r1, [r0, #0]
 8002d9e:	680b      	ldr	r3, [r1, #0]
 8002da0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002da4:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002da6:	2a08      	cmp	r2, #8
 8002da8:	d00d      	beq.n	8002dc6 <I2C_MasterRequestRead+0x3a>
 8002daa:	2a01      	cmp	r2, #1
 8002dac:	d00b      	beq.n	8002dc6 <I2C_MasterRequestRead+0x3a>
 8002dae:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002db2:	d008      	beq.n	8002dc6 <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002db4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002db6:	2b11      	cmp	r3, #17
 8002db8:	d10a      	bne.n	8002dd0 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dba:	6802      	ldr	r2, [r0, #0]
 8002dbc:	6813      	ldr	r3, [r2, #0]
 8002dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	e004      	b.n	8002dd0 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dc6:	6822      	ldr	r2, [r4, #0]
 8002dc8:	6813      	ldr	r3, [r2, #0]
 8002dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dce:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd0:	9700      	str	r7, [sp, #0]
 8002dd2:	4633      	mov	r3, r6
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f7ff fef7 	bl	8002bce <I2C_WaitOnFlagUntilTimeout>
 8002de0:	2800      	cmp	r0, #0
 8002de2:	d149      	bne.n	8002e78 <I2C_MasterRequestRead+0xec>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002de4:	6923      	ldr	r3, [r4, #16]
 8002de6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dea:	d10f      	bne.n	8002e0c <I2C_MasterRequestRead+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	f045 0501 	orr.w	r5, r5, #1
 8002df2:	b2ed      	uxtb	r5, r5
 8002df4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002df6:	463b      	mov	r3, r7
 8002df8:	4632      	mov	r2, r6
 8002dfa:	4923      	ldr	r1, [pc, #140]	; (8002e88 <I2C_MasterRequestRead+0xfc>)
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	f7ff ff1e 	bl	8002c3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2800      	cmp	r0, #0
 8002e06:	d038      	beq.n	8002e7a <I2C_MasterRequestRead+0xee>
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e036      	b.n	8002e7a <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e0c:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8002e10:	f008 0806 	and.w	r8, r8, #6
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8002e1a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e1c:	463b      	mov	r3, r7
 8002e1e:	4632      	mov	r2, r6
 8002e20:	491a      	ldr	r1, [pc, #104]	; (8002e8c <I2C_MasterRequestRead+0x100>)
 8002e22:	4620      	mov	r0, r4
 8002e24:	f7ff ff0b 	bl	8002c3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e28:	b108      	cbz	r0, 8002e2e <I2C_MasterRequestRead+0xa2>
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e025      	b.n	8002e7a <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	b2ed      	uxtb	r5, r5
 8002e32:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e34:	463b      	mov	r3, r7
 8002e36:	4632      	mov	r2, r6
 8002e38:	4913      	ldr	r1, [pc, #76]	; (8002e88 <I2C_MasterRequestRead+0xfc>)
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f7ff feff 	bl	8002c3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e40:	b108      	cbz	r0, 8002e46 <I2C_MasterRequestRead+0xba>
      return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e019      	b.n	8002e7a <I2C_MasterRequestRead+0xee>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e46:	2200      	movs	r2, #0
 8002e48:	9203      	str	r2, [sp, #12]
 8002e4a:	6823      	ldr	r3, [r4, #0]
 8002e4c:	6959      	ldr	r1, [r3, #20]
 8002e4e:	9103      	str	r1, [sp, #12]
 8002e50:	6999      	ldr	r1, [r3, #24]
 8002e52:	9103      	str	r1, [sp, #12]
 8002e54:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e56:	6819      	ldr	r1, [r3, #0]
 8002e58:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002e5c:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e5e:	9700      	str	r7, [sp, #0]
 8002e60:	4633      	mov	r3, r6
 8002e62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e66:	4620      	mov	r0, r4
 8002e68:	f7ff feb1 	bl	8002bce <I2C_WaitOnFlagUntilTimeout>
 8002e6c:	b948      	cbnz	r0, 8002e82 <I2C_MasterRequestRead+0xf6>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e6e:	6822      	ldr	r2, [r4, #0]
 8002e70:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8002e74:	6113      	str	r3, [r2, #16]
 8002e76:	e7be      	b.n	8002df6 <I2C_MasterRequestRead+0x6a>
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	b004      	add	sp, #16
 8002e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e7f9      	b.n	8002e7a <I2C_MasterRequestRead+0xee>
 8002e86:	bf00      	nop
 8002e88:	00010002 	.word	0x00010002
 8002e8c:	00010008 	.word	0x00010008

08002e90 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	4604      	mov	r4, r0
 8002e94:	460d      	mov	r5, r1
 8002e96:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002ea0:	d11c      	bne.n	8002edc <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	f7ff fe7a 	bl	8002b9c <I2C_IsAcknowledgeFailed>
 8002ea8:	b9d0      	cbnz	r0, 8002ee0 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002eaa:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002eae:	d0f3      	beq.n	8002e98 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb0:	f7ff fd00 	bl	80028b4 <HAL_GetTick>
 8002eb4:	1b80      	subs	r0, r0, r6
 8002eb6:	42a8      	cmp	r0, r5
 8002eb8:	d801      	bhi.n	8002ebe <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002eba:	2d00      	cmp	r5, #0
 8002ebc:	d1ec      	bne.n	8002e98 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ecc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ece:	f042 0220 	orr.w	r2, r2, #32
 8002ed2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002ed4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002ed8:	2001      	movs	r0, #1
 8002eda:	e000      	b.n	8002ede <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002edc:	2000      	movs	r0, #0
}
 8002ede:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	e7fc      	b.n	8002ede <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08002ee4 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	4604      	mov	r4, r0
 8002ee8:	460d      	mov	r5, r1
 8002eea:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002eec:	6823      	ldr	r3, [r4, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f013 0f04 	tst.w	r3, #4
 8002ef4:	d11c      	bne.n	8002f30 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f7ff fe50 	bl	8002b9c <I2C_IsAcknowledgeFailed>
 8002efc:	b9d0      	cbnz	r0, 8002f34 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002efe:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002f02:	d0f3      	beq.n	8002eec <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f04:	f7ff fcd6 	bl	80028b4 <HAL_GetTick>
 8002f08:	1b80      	subs	r0, r0, r6
 8002f0a:	42a8      	cmp	r0, r5
 8002f0c:	d801      	bhi.n	8002f12 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002f0e:	2d00      	cmp	r5, #0
 8002f10:	d1ec      	bne.n	8002eec <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f12:	2300      	movs	r3, #0
 8002f14:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f16:	2220      	movs	r2, #32
 8002f18:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f20:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f22:	f042 0220 	orr.w	r2, r2, #32
 8002f26:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002f28:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	e000      	b.n	8002f32 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002f30:	2000      	movs	r0, #0
}
 8002f32:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002f34:	2001      	movs	r0, #1
 8002f36:	e7fc      	b.n	8002f32 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08002f38 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	4605      	mov	r5, r0
 8002f3c:	460c      	mov	r4, r1
 8002f3e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f40:	682b      	ldr	r3, [r5, #0]
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002f48:	d129      	bne.n	8002f9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	f012 0f10 	tst.w	r2, #16
 8002f50:	d115      	bne.n	8002f7e <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f52:	f7ff fcaf 	bl	80028b4 <HAL_GetTick>
 8002f56:	1b80      	subs	r0, r0, r6
 8002f58:	42a0      	cmp	r0, r4
 8002f5a:	d801      	bhi.n	8002f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8002f5c:	2c00      	cmp	r4, #0
 8002f5e:	d1ef      	bne.n	8002f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f60:	2300      	movs	r3, #0
 8002f62:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f64:	2220      	movs	r2, #32
 8002f66:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f6a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f6e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002f70:	f042 0220 	orr.w	r2, r2, #32
 8002f74:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002f76:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002f7a:	2001      	movs	r0, #1
}
 8002f7c:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f7e:	f06f 0210 	mvn.w	r2, #16
 8002f82:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f84:	2300      	movs	r3, #0
 8002f86:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f8e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f92:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002f94:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002f96:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	e7ee      	b.n	8002f7c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	e7ec      	b.n	8002f7c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08002fa4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	f000 80be 	beq.w	8003126 <HAL_I2C_Init+0x182>
{
 8002faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fac:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d06b      	beq.n	800308e <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb6:	2324      	movs	r3, #36	; 0x24
 8002fb8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002fbc:	6822      	ldr	r2, [r4, #0]
 8002fbe:	6813      	ldr	r3, [r2, #0]
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fc6:	f000 fe8b 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fca:	6862      	ldr	r2, [r4, #4]
 8002fcc:	4b58      	ldr	r3, [pc, #352]	; (8003130 <HAL_I2C_Init+0x18c>)
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d862      	bhi.n	8003098 <HAL_I2C_Init+0xf4>
 8002fd2:	4b58      	ldr	r3, [pc, #352]	; (8003134 <HAL_I2C_Init+0x190>)
 8002fd4:	4298      	cmp	r0, r3
 8002fd6:	bf8c      	ite	hi
 8002fd8:	2300      	movhi	r3, #0
 8002fda:	2301      	movls	r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f040 80a4 	bne.w	800312a <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 8002fe2:	4b55      	ldr	r3, [pc, #340]	; (8003138 <HAL_I2C_Init+0x194>)
 8002fe4:	fba3 2300 	umull	r2, r3, r3, r0
 8002fe8:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fea:	6821      	ldr	r1, [r4, #0]
 8002fec:	684a      	ldr	r2, [r1, #4]
 8002fee:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ff6:	6825      	ldr	r5, [r4, #0]
 8002ff8:	6a2a      	ldr	r2, [r5, #32]
 8002ffa:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002ffe:	6866      	ldr	r6, [r4, #4]
 8003000:	494b      	ldr	r1, [pc, #300]	; (8003130 <HAL_I2C_Init+0x18c>)
 8003002:	428e      	cmp	r6, r1
 8003004:	d84e      	bhi.n	80030a4 <HAL_I2C_Init+0x100>
 8003006:	3301      	adds	r3, #1
 8003008:	4313      	orrs	r3, r2
 800300a:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800300c:	6825      	ldr	r5, [r4, #0]
 800300e:	69e9      	ldr	r1, [r5, #28]
 8003010:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003014:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003018:	6863      	ldr	r3, [r4, #4]
 800301a:	4a45      	ldr	r2, [pc, #276]	; (8003130 <HAL_I2C_Init+0x18c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d84b      	bhi.n	80030b8 <HAL_I2C_Init+0x114>
 8003020:	3801      	subs	r0, #1
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	fbb0 f3f3 	udiv	r3, r0, r3
 8003028:	3301      	adds	r3, #1
 800302a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302e:	2b04      	cmp	r3, #4
 8003030:	bf38      	it	cc
 8003032:	2304      	movcc	r3, #4
 8003034:	430b      	orrs	r3, r1
 8003036:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003038:	6821      	ldr	r1, [r4, #0]
 800303a:	680b      	ldr	r3, [r1, #0]
 800303c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003040:	69e2      	ldr	r2, [r4, #28]
 8003042:	6a20      	ldr	r0, [r4, #32]
 8003044:	4302      	orrs	r2, r0
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800304a:	6821      	ldr	r1, [r4, #0]
 800304c:	688b      	ldr	r3, [r1, #8]
 800304e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003052:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003056:	6922      	ldr	r2, [r4, #16]
 8003058:	68e0      	ldr	r0, [r4, #12]
 800305a:	4302      	orrs	r2, r0
 800305c:	4313      	orrs	r3, r2
 800305e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003060:	6821      	ldr	r1, [r4, #0]
 8003062:	68cb      	ldr	r3, [r1, #12]
 8003064:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003068:	6962      	ldr	r2, [r4, #20]
 800306a:	69a0      	ldr	r0, [r4, #24]
 800306c:	4302      	orrs	r2, r0
 800306e:	4313      	orrs	r3, r2
 8003070:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003072:	6822      	ldr	r2, [r4, #0]
 8003074:	6813      	ldr	r3, [r2, #0]
 8003076:	f043 0301 	orr.w	r3, r3, #1
 800307a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800307c:	2000      	movs	r0, #0
 800307e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003080:	2320      	movs	r3, #32
 8003082:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003086:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003088:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 800308c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800308e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003092:	f001 ffbd 	bl	8005010 <HAL_I2C_MspInit>
 8003096:	e78e      	b.n	8002fb6 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003098:	4b28      	ldr	r3, [pc, #160]	; (800313c <HAL_I2C_Init+0x198>)
 800309a:	4298      	cmp	r0, r3
 800309c:	bf8c      	ite	hi
 800309e:	2300      	movhi	r3, #0
 80030a0:	2301      	movls	r3, #1
 80030a2:	e79b      	b.n	8002fdc <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030a4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4924      	ldr	r1, [pc, #144]	; (8003140 <HAL_I2C_Init+0x19c>)
 80030ae:	fba1 1303 	umull	r1, r3, r1, r3
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	3301      	adds	r3, #1
 80030b6:	e7a7      	b.n	8003008 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030b8:	68a2      	ldr	r2, [r4, #8]
 80030ba:	b9ba      	cbnz	r2, 80030ec <HAL_I2C_Init+0x148>
 80030bc:	1e46      	subs	r6, r0, #1
 80030be:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80030c2:	fbb6 f6f7 	udiv	r6, r6, r7
 80030c6:	3601      	adds	r6, #1
 80030c8:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80030cc:	fab6 f686 	clz	r6, r6
 80030d0:	0976      	lsrs	r6, r6, #5
 80030d2:	bb36      	cbnz	r6, 8003122 <HAL_I2C_Init+0x17e>
 80030d4:	b9c2      	cbnz	r2, 8003108 <HAL_I2C_Init+0x164>
 80030d6:	3801      	subs	r0, #1
 80030d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80030dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e0:	3301      	adds	r3, #1
 80030e2:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80030e6:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80030ea:	e7a3      	b.n	8003034 <HAL_I2C_Init+0x90>
 80030ec:	1e46      	subs	r6, r0, #1
 80030ee:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80030f2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80030f6:	fbb6 f6f7 	udiv	r6, r6, r7
 80030fa:	3601      	adds	r6, #1
 80030fc:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003100:	fab6 f686 	clz	r6, r6
 8003104:	0976      	lsrs	r6, r6, #5
 8003106:	e7e4      	b.n	80030d2 <HAL_I2C_Init+0x12e>
 8003108:	3801      	subs	r0, #1
 800310a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800310e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003112:	fbb0 f2f3 	udiv	r2, r0, r3
 8003116:	3201      	adds	r2, #1
 8003118:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800311c:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8003120:	e788      	b.n	8003034 <HAL_I2C_Init+0x90>
 8003122:	2301      	movs	r3, #1
 8003124:	e786      	b.n	8003034 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8003126:	2001      	movs	r0, #1
}
 8003128:	4770      	bx	lr
    return HAL_ERROR;
 800312a:	2001      	movs	r0, #1
 800312c:	e7ae      	b.n	800308c <HAL_I2C_Init+0xe8>
 800312e:	bf00      	nop
 8003130:	000186a0 	.word	0x000186a0
 8003134:	001e847f 	.word	0x001e847f
 8003138:	431bde83 	.word	0x431bde83
 800313c:	003d08ff 	.word	0x003d08ff
 8003140:	10624dd3 	.word	0x10624dd3

08003144 <HAL_I2C_Master_Transmit>:
{
 8003144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	4604      	mov	r4, r0
 800314c:	460e      	mov	r6, r1
 800314e:	4690      	mov	r8, r2
 8003150:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8003152:	f7ff fbaf 	bl	80028b4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003156:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b20      	cmp	r3, #32
 800315e:	d004      	beq.n	800316a <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8003160:	2602      	movs	r6, #2
}
 8003162:	4630      	mov	r0, r6
 8003164:	b004      	add	sp, #16
 8003166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800316a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800316c:	9000      	str	r0, [sp, #0]
 800316e:	2319      	movs	r3, #25
 8003170:	2201      	movs	r2, #1
 8003172:	494f      	ldr	r1, [pc, #316]	; (80032b0 <HAL_I2C_Master_Transmit+0x16c>)
 8003174:	4620      	mov	r0, r4
 8003176:	f7ff fd2a 	bl	8002bce <I2C_WaitOnFlagUntilTimeout>
 800317a:	2800      	cmp	r0, #0
 800317c:	f040 8091 	bne.w	80032a2 <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 8003180:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003184:	2b01      	cmp	r3, #1
 8003186:	f000 808e 	beq.w	80032a6 <HAL_I2C_Master_Transmit+0x162>
 800318a:	2301      	movs	r3, #1
 800318c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	f012 0f01 	tst.w	r2, #1
 8003198:	d103      	bne.n	80031a2 <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	f042 0201 	orr.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031a2:	6822      	ldr	r2, [r4, #0]
 80031a4:	6813      	ldr	r3, [r2, #0]
 80031a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031aa:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031ac:	2321      	movs	r3, #33	; 0x21
 80031ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031b2:	2310      	movs	r3, #16
 80031b4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031b8:	2300      	movs	r3, #0
 80031ba:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80031bc:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031c0:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80031c4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031c6:	4b3b      	ldr	r3, [pc, #236]	; (80032b4 <HAL_I2C_Master_Transmit+0x170>)
 80031c8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031ca:	462b      	mov	r3, r5
 80031cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80031ce:	4631      	mov	r1, r6
 80031d0:	4620      	mov	r0, r4
 80031d2:	f7ff fd87 	bl	8002ce4 <I2C_MasterRequestWrite>
 80031d6:	4606      	mov	r6, r0
 80031d8:	2800      	cmp	r0, #0
 80031da:	d166      	bne.n	80032aa <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031dc:	2300      	movs	r3, #0
 80031de:	9303      	str	r3, [sp, #12]
 80031e0:	6823      	ldr	r3, [r4, #0]
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	9203      	str	r2, [sp, #12]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	9303      	str	r3, [sp, #12]
 80031ea:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80031ec:	e012      	b.n	8003214 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d001      	beq.n	80031f8 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 80031f4:	2601      	movs	r6, #1
 80031f6:	e7b4      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f8:	6822      	ldr	r2, [r4, #0]
 80031fa:	6813      	ldr	r3, [r2, #0]
 80031fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003200:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003202:	2601      	movs	r6, #1
 8003204:	e7ad      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003206:	462a      	mov	r2, r5
 8003208:	990a      	ldr	r1, [sp, #40]	; 0x28
 800320a:	4620      	mov	r0, r4
 800320c:	f7ff fe6a 	bl	8002ee4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003210:	2800      	cmp	r0, #0
 8003212:	d12c      	bne.n	800326e <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 8003214:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003216:	2b00      	cmp	r3, #0
 8003218:	d035      	beq.n	8003286 <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800321a:	462a      	mov	r2, r5
 800321c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800321e:	4620      	mov	r0, r4
 8003220:	f7ff fe36 	bl	8002e90 <I2C_WaitOnTXEFlagUntilTimeout>
 8003224:	2800      	cmp	r0, #0
 8003226:	d1e2      	bne.n	80031ee <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003228:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800322a:	6823      	ldr	r3, [r4, #0]
 800322c:	7812      	ldrb	r2, [r2, #0]
 800322e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003230:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003232:	1c4b      	adds	r3, r1, #1
 8003234:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003236:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003238:	3b01      	subs	r3, #1
 800323a:	b29b      	uxth	r3, r3
 800323c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800323e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003240:	3b01      	subs	r3, #1
 8003242:	b29b      	uxth	r3, r3
 8003244:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003246:	6822      	ldr	r2, [r4, #0]
 8003248:	6950      	ldr	r0, [r2, #20]
 800324a:	f010 0f04 	tst.w	r0, #4
 800324e:	d0da      	beq.n	8003206 <HAL_I2C_Master_Transmit+0xc2>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0d8      	beq.n	8003206 <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003254:	784b      	ldrb	r3, [r1, #1]
 8003256:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8003258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800325a:	3301      	adds	r3, #1
 800325c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800325e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003260:	3b01      	subs	r3, #1
 8003262:	b29b      	uxth	r3, r3
 8003264:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003266:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003268:	3b01      	subs	r3, #1
 800326a:	8523      	strh	r3, [r4, #40]	; 0x28
 800326c:	e7cb      	b.n	8003206 <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800326e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003270:	2b04      	cmp	r3, #4
 8003272:	d001      	beq.n	8003278 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 8003274:	2601      	movs	r6, #1
 8003276:	e774      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003278:	6822      	ldr	r2, [r4, #0]
 800327a:	6813      	ldr	r3, [r2, #0]
 800327c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003280:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003282:	2601      	movs	r6, #1
 8003284:	e76d      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003286:	6822      	ldr	r2, [r4, #0]
 8003288:	6813      	ldr	r3, [r2, #0]
 800328a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800328e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003290:	2320      	movs	r3, #32
 8003292:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003296:	2300      	movs	r3, #0
 8003298:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800329c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80032a0:	e75f      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 80032a2:	2602      	movs	r6, #2
 80032a4:	e75d      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 80032a6:	2602      	movs	r6, #2
 80032a8:	e75b      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 80032aa:	2601      	movs	r6, #1
 80032ac:	e759      	b.n	8003162 <HAL_I2C_Master_Transmit+0x1e>
 80032ae:	bf00      	nop
 80032b0:	00100002 	.word	0x00100002
 80032b4:	ffff0000 	.word	0xffff0000

080032b8 <HAL_I2C_Master_Receive>:
{
 80032b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032bc:	b086      	sub	sp, #24
 80032be:	4604      	mov	r4, r0
 80032c0:	460e      	mov	r6, r1
 80032c2:	4690      	mov	r8, r2
 80032c4:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 80032c6:	f7ff faf5 	bl	80028b4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ca:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d004      	beq.n	80032de <HAL_I2C_Master_Receive+0x26>
    return HAL_BUSY;
 80032d4:	2602      	movs	r6, #2
}
 80032d6:	4630      	mov	r0, r6
 80032d8:	b006      	add	sp, #24
 80032da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032de:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032e0:	9000      	str	r0, [sp, #0]
 80032e2:	2319      	movs	r3, #25
 80032e4:	2201      	movs	r2, #1
 80032e6:	499e      	ldr	r1, [pc, #632]	; (8003560 <HAL_I2C_Master_Receive+0x2a8>)
 80032e8:	4620      	mov	r0, r4
 80032ea:	f7ff fc70 	bl	8002bce <I2C_WaitOnFlagUntilTimeout>
 80032ee:	2800      	cmp	r0, #0
 80032f0:	f040 8134 	bne.w	800355c <HAL_I2C_Master_Receive+0x2a4>
    __HAL_LOCK(hi2c);
 80032f4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	f000 8137 	beq.w	800356c <HAL_I2C_Master_Receive+0x2b4>
 80032fe:	2301      	movs	r3, #1
 8003300:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	f012 0f01 	tst.w	r2, #1
 800330c:	d103      	bne.n	8003316 <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	f042 0201 	orr.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003316:	6822      	ldr	r2, [r4, #0]
 8003318:	6813      	ldr	r3, [r2, #0]
 800331a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800331e:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003320:	2322      	movs	r3, #34	; 0x22
 8003322:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003326:	2310      	movs	r3, #16
 8003328:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800332c:	2300      	movs	r3, #0
 800332e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003330:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003334:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003336:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003338:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800333a:	4b8a      	ldr	r3, [pc, #552]	; (8003564 <HAL_I2C_Master_Receive+0x2ac>)
 800333c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800333e:	462b      	mov	r3, r5
 8003340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003342:	4631      	mov	r1, r6
 8003344:	4620      	mov	r0, r4
 8003346:	f7ff fd21 	bl	8002d8c <I2C_MasterRequestRead>
 800334a:	4606      	mov	r6, r0
 800334c:	2800      	cmp	r0, #0
 800334e:	f040 810f 	bne.w	8003570 <HAL_I2C_Master_Receive+0x2b8>
    if (hi2c->XferSize == 0U)
 8003352:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003354:	b95b      	cbnz	r3, 800336e <HAL_I2C_Master_Receive+0xb6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003356:	9302      	str	r3, [sp, #8]
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	9202      	str	r2, [sp, #8]
 800335e:	699a      	ldr	r2, [r3, #24]
 8003360:	9202      	str	r2, [sp, #8]
 8003362:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	e077      	b.n	800345e <HAL_I2C_Master_Receive+0x1a6>
    else if (hi2c->XferSize == 1U)
 800336e:	2b01      	cmp	r3, #1
 8003370:	d00f      	beq.n	8003392 <HAL_I2C_Master_Receive+0xda>
    else if (hi2c->XferSize == 2U)
 8003372:	2b02      	cmp	r3, #2
 8003374:	d01f      	beq.n	80033b6 <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003376:	6822      	ldr	r2, [r4, #0]
 8003378:	6813      	ldr	r3, [r2, #0]
 800337a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800337e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003380:	2300      	movs	r3, #0
 8003382:	9305      	str	r3, [sp, #20]
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	9205      	str	r2, [sp, #20]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	9305      	str	r3, [sp, #20]
 800338e:	9b05      	ldr	r3, [sp, #20]
 8003390:	e065      	b.n	800345e <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003392:	6822      	ldr	r2, [r4, #0]
 8003394:	6813      	ldr	r3, [r2, #0]
 8003396:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800339a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339c:	2300      	movs	r3, #0
 800339e:	9303      	str	r3, [sp, #12]
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	9203      	str	r2, [sp, #12]
 80033a6:	699a      	ldr	r2, [r3, #24]
 80033a8:	9203      	str	r2, [sp, #12]
 80033aa:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	e053      	b.n	800345e <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b6:	6822      	ldr	r2, [r4, #0]
 80033b8:	6813      	ldr	r3, [r2, #0]
 80033ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033be:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033c0:	6822      	ldr	r2, [r4, #0]
 80033c2:	6813      	ldr	r3, [r2, #0]
 80033c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033c8:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ca:	2300      	movs	r3, #0
 80033cc:	9304      	str	r3, [sp, #16]
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	695a      	ldr	r2, [r3, #20]
 80033d2:	9204      	str	r2, [sp, #16]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	9304      	str	r3, [sp, #16]
 80033d8:	9b04      	ldr	r3, [sp, #16]
 80033da:	e040      	b.n	800345e <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033dc:	462a      	mov	r2, r5
 80033de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80033e0:	4620      	mov	r0, r4
 80033e2:	f7ff fda9 	bl	8002f38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033e6:	2800      	cmp	r0, #0
 80033e8:	f040 80c4 	bne.w	8003574 <HAL_I2C_Master_Receive+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ec:	6823      	ldr	r3, [r4, #0]
 80033ee:	691a      	ldr	r2, [r3, #16]
 80033f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033f2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80033f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033f6:	3301      	adds	r3, #1
 80033f8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80033fa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80033fc:	3b01      	subs	r3, #1
 80033fe:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003400:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003402:	3b01      	subs	r3, #1
 8003404:	b29b      	uxth	r3, r3
 8003406:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003408:	e029      	b.n	800345e <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800340a:	9500      	str	r5, [sp, #0]
 800340c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800340e:	2200      	movs	r2, #0
 8003410:	4955      	ldr	r1, [pc, #340]	; (8003568 <HAL_I2C_Master_Receive+0x2b0>)
 8003412:	4620      	mov	r0, r4
 8003414:	f7ff fbdb 	bl	8002bce <I2C_WaitOnFlagUntilTimeout>
 8003418:	2800      	cmp	r0, #0
 800341a:	f040 80ad 	bne.w	8003578 <HAL_I2C_Master_Receive+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341e:	6822      	ldr	r2, [r4, #0]
 8003420:	6813      	ldr	r3, [r2, #0]
 8003422:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003426:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800342e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003430:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003432:	1c53      	adds	r3, r2, #1
 8003434:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003436:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003438:	3b01      	subs	r3, #1
 800343a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800343c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800343e:	3b01      	subs	r3, #1
 8003440:	b29b      	uxth	r3, r3
 8003442:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003444:	6823      	ldr	r3, [r4, #0]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800344a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800344c:	3301      	adds	r3, #1
 800344e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003450:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003452:	3b01      	subs	r3, #1
 8003454:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003456:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003458:	3b01      	subs	r3, #1
 800345a:	b29b      	uxth	r3, r3
 800345c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800345e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003460:	2b00      	cmp	r3, #0
 8003462:	d072      	beq.n	800354a <HAL_I2C_Master_Receive+0x292>
      if (hi2c->XferSize <= 3U)
 8003464:	2b03      	cmp	r3, #3
 8003466:	d849      	bhi.n	80034fc <HAL_I2C_Master_Receive+0x244>
        if (hi2c->XferSize == 1U)
 8003468:	2b01      	cmp	r3, #1
 800346a:	d0b7      	beq.n	80033dc <HAL_I2C_Master_Receive+0x124>
        else if (hi2c->XferSize == 2U)
 800346c:	2b02      	cmp	r3, #2
 800346e:	d0cc      	beq.n	800340a <HAL_I2C_Master_Receive+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003470:	9500      	str	r5, [sp, #0]
 8003472:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003474:	2200      	movs	r2, #0
 8003476:	493c      	ldr	r1, [pc, #240]	; (8003568 <HAL_I2C_Master_Receive+0x2b0>)
 8003478:	4620      	mov	r0, r4
 800347a:	f7ff fba8 	bl	8002bce <I2C_WaitOnFlagUntilTimeout>
 800347e:	2800      	cmp	r0, #0
 8003480:	d17c      	bne.n	800357c <HAL_I2C_Master_Receive+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003482:	6822      	ldr	r2, [r4, #0]
 8003484:	6813      	ldr	r3, [r2, #0]
 8003486:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800348a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003492:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003494:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003496:	3301      	adds	r3, #1
 8003498:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800349a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800349c:	3b01      	subs	r3, #1
 800349e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80034a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034a8:	9500      	str	r5, [sp, #0]
 80034aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80034ac:	2200      	movs	r2, #0
 80034ae:	492e      	ldr	r1, [pc, #184]	; (8003568 <HAL_I2C_Master_Receive+0x2b0>)
 80034b0:	4620      	mov	r0, r4
 80034b2:	f7ff fb8c 	bl	8002bce <I2C_WaitOnFlagUntilTimeout>
 80034b6:	2800      	cmp	r0, #0
 80034b8:	d162      	bne.n	8003580 <HAL_I2C_Master_Receive+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ba:	6822      	ldr	r2, [r4, #0]
 80034bc:	6813      	ldr	r3, [r2, #0]
 80034be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034c2:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034ca:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80034cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80034ce:	1c53      	adds	r3, r2, #1
 80034d0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80034d2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80034d4:	3b01      	subs	r3, #1
 80034d6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80034d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29b      	uxth	r3, r3
 80034de:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e0:	6823      	ldr	r3, [r4, #0]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80034e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034e8:	3301      	adds	r3, #1
 80034ea:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80034ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80034ee:	3b01      	subs	r3, #1
 80034f0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80034f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80034fa:	e7b0      	b.n	800345e <HAL_I2C_Master_Receive+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034fc:	462a      	mov	r2, r5
 80034fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003500:	4620      	mov	r0, r4
 8003502:	f7ff fd19 	bl	8002f38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003506:	2800      	cmp	r0, #0
 8003508:	d13c      	bne.n	8003584 <HAL_I2C_Master_Receive+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003510:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003512:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003514:	1c53      	adds	r3, r2, #1
 8003516:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003518:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800351a:	3b01      	subs	r3, #1
 800351c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800351e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003520:	3b01      	subs	r3, #1
 8003522:	b29b      	uxth	r3, r3
 8003524:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	6959      	ldr	r1, [r3, #20]
 800352a:	f011 0f04 	tst.w	r1, #4
 800352e:	d096      	beq.n	800345e <HAL_I2C_Master_Receive+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8003534:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003536:	3301      	adds	r3, #1
 8003538:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800353a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800353c:	3b01      	subs	r3, #1
 800353e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003540:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003542:	3b01      	subs	r3, #1
 8003544:	b29b      	uxth	r3, r3
 8003546:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003548:	e789      	b.n	800345e <HAL_I2C_Master_Receive+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800354a:	2320      	movs	r3, #32
 800354c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003550:	2300      	movs	r3, #0
 8003552:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003556:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800355a:	e6bc      	b.n	80032d6 <HAL_I2C_Master_Receive+0x1e>
      return HAL_BUSY;
 800355c:	2602      	movs	r6, #2
 800355e:	e6ba      	b.n	80032d6 <HAL_I2C_Master_Receive+0x1e>
 8003560:	00100002 	.word	0x00100002
 8003564:	ffff0000 	.word	0xffff0000
 8003568:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 800356c:	2602      	movs	r6, #2
 800356e:	e6b2      	b.n	80032d6 <HAL_I2C_Master_Receive+0x1e>
      return HAL_ERROR;
 8003570:	2601      	movs	r6, #1
 8003572:	e6b0      	b.n	80032d6 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8003574:	2601      	movs	r6, #1
 8003576:	e6ae      	b.n	80032d6 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8003578:	2601      	movs	r6, #1
 800357a:	e6ac      	b.n	80032d6 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 800357c:	2601      	movs	r6, #1
 800357e:	e6aa      	b.n	80032d6 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8003580:	2601      	movs	r6, #1
 8003582:	e6a8      	b.n	80032d6 <HAL_I2C_Master_Receive+0x1e>
          return HAL_ERROR;
 8003584:	2601      	movs	r6, #1
 8003586:	e6a6      	b.n	80032d6 <HAL_I2C_Master_Receive+0x1e>

08003588 <HAL_I2C_IsDeviceReady>:
{
 8003588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800358c:	b085      	sub	sp, #20
 800358e:	4604      	mov	r4, r0
 8003590:	4688      	mov	r8, r1
 8003592:	4691      	mov	r9, r2
 8003594:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8003596:	f7ff f98d 	bl	80028b4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800359a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d004      	beq.n	80035ae <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 80035a4:	2302      	movs	r3, #2
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	b005      	add	sp, #20
 80035aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035ae:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035b0:	9000      	str	r0, [sp, #0]
 80035b2:	2319      	movs	r3, #25
 80035b4:	2201      	movs	r2, #1
 80035b6:	4954      	ldr	r1, [pc, #336]	; (8003708 <HAL_I2C_IsDeviceReady+0x180>)
 80035b8:	4620      	mov	r0, r4
 80035ba:	f7ff fb08 	bl	8002bce <I2C_WaitOnFlagUntilTimeout>
 80035be:	2800      	cmp	r0, #0
 80035c0:	f040 8097 	bne.w	80036f2 <HAL_I2C_IsDeviceReady+0x16a>
    __HAL_LOCK(hi2c);
 80035c4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	f000 8094 	beq.w	80036f6 <HAL_I2C_IsDeviceReady+0x16e>
 80035ce:	2301      	movs	r3, #1
 80035d0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	f012 0f01 	tst.w	r2, #1
 80035dc:	d103      	bne.n	80035e6 <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	f042 0201 	orr.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035e6:	6822      	ldr	r2, [r4, #0]
 80035e8:	6813      	ldr	r3, [r2, #0]
 80035ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035ee:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80035f0:	2324      	movs	r3, #36	; 0x24
 80035f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035f6:	2300      	movs	r3, #0
 80035f8:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035fa:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80035fe:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 8003600:	2701      	movs	r7, #1
 8003602:	e034      	b.n	800366e <HAL_I2C_IsDeviceReady+0xe6>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003604:	23a0      	movs	r3, #160	; 0xa0
 8003606:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003612:	6959      	ldr	r1, [r3, #20]
 8003614:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003618:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2ba0      	cmp	r3, #160	; 0xa0
 8003620:	d009      	beq.n	8003636 <HAL_I2C_IsDeviceReady+0xae>
 8003622:	b942      	cbnz	r2, 8003636 <HAL_I2C_IsDeviceReady+0xae>
 8003624:	b939      	cbnz	r1, 8003636 <HAL_I2C_IsDeviceReady+0xae>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003626:	f7ff f945 	bl	80028b4 <HAL_GetTick>
 800362a:	1b80      	subs	r0, r0, r6
 800362c:	42a8      	cmp	r0, r5
 800362e:	d8e9      	bhi.n	8003604 <HAL_I2C_IsDeviceReady+0x7c>
 8003630:	2d00      	cmp	r5, #0
 8003632:	d1ea      	bne.n	800360a <HAL_I2C_IsDeviceReady+0x82>
 8003634:	e7e6      	b.n	8003604 <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->State = HAL_I2C_STATE_READY;
 8003636:	2320      	movs	r3, #32
 8003638:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	695a      	ldr	r2, [r3, #20]
 8003640:	f012 0f02 	tst.w	r2, #2
 8003644:	d131      	bne.n	80036aa <HAL_I2C_IsDeviceReady+0x122>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800364c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003654:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003656:	9600      	str	r6, [sp, #0]
 8003658:	2319      	movs	r3, #25
 800365a:	2201      	movs	r2, #1
 800365c:	492a      	ldr	r1, [pc, #168]	; (8003708 <HAL_I2C_IsDeviceReady+0x180>)
 800365e:	4620      	mov	r0, r4
 8003660:	f7ff fab5 	bl	8002bce <I2C_WaitOnFlagUntilTimeout>
 8003664:	2800      	cmp	r0, #0
 8003666:	d14c      	bne.n	8003702 <HAL_I2C_IsDeviceReady+0x17a>
      I2C_Trials++;
 8003668:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 800366a:	454f      	cmp	r7, r9
 800366c:	d239      	bcs.n	80036e2 <HAL_I2C_IsDeviceReady+0x15a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800366e:	6822      	ldr	r2, [r4, #0]
 8003670:	6813      	ldr	r3, [r2, #0]
 8003672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003676:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003678:	9600      	str	r6, [sp, #0]
 800367a:	462b      	mov	r3, r5
 800367c:	2200      	movs	r2, #0
 800367e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003682:	4620      	mov	r0, r4
 8003684:	f7ff faa3 	bl	8002bce <I2C_WaitOnFlagUntilTimeout>
 8003688:	2800      	cmp	r0, #0
 800368a:	d136      	bne.n	80036fa <HAL_I2C_IsDeviceReady+0x172>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8003692:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8003694:	f7ff f90e 	bl	80028b4 <HAL_GetTick>
 8003698:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80036a2:	6959      	ldr	r1, [r3, #20]
 80036a4:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036a8:	e7b6      	b.n	8003618 <HAL_I2C_IsDeviceReady+0x90>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036b0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b2:	2300      	movs	r3, #0
 80036b4:	9303      	str	r3, [sp, #12]
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	9203      	str	r2, [sp, #12]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	9303      	str	r3, [sp, #12]
 80036c0:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036c2:	9600      	str	r6, [sp, #0]
 80036c4:	2319      	movs	r3, #25
 80036c6:	2201      	movs	r2, #1
 80036c8:	490f      	ldr	r1, [pc, #60]	; (8003708 <HAL_I2C_IsDeviceReady+0x180>)
 80036ca:	4620      	mov	r0, r4
 80036cc:	f7ff fa7f 	bl	8002bce <I2C_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	b9a0      	cbnz	r0, 80036fe <HAL_I2C_IsDeviceReady+0x176>
        hi2c->State = HAL_I2C_STATE_READY;
 80036d4:	2220      	movs	r2, #32
 80036d6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80036da:	2200      	movs	r2, #0
 80036dc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 80036e0:	e761      	b.n	80035a6 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 80036e2:	2320      	movs	r3, #32
 80036e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80036e8:	2300      	movs	r3, #0
 80036ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e759      	b.n	80035a6 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 80036f2:	2302      	movs	r3, #2
 80036f4:	e757      	b.n	80035a6 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 80036f6:	2302      	movs	r3, #2
 80036f8:	e755      	b.n	80035a6 <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e753      	b.n	80035a6 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e751      	b.n	80035a6 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e74f      	b.n	80035a6 <HAL_I2C_IsDeviceReady+0x1e>
 8003706:	bf00      	nop
 8003708:	00100002 	.word	0x00100002

0800370c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800370c:	2800      	cmp	r0, #0
 800370e:	f000 81bb 	beq.w	8003a88 <HAL_RCC_OscConfig+0x37c>
{
 8003712:	b570      	push	{r4, r5, r6, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003718:	6803      	ldr	r3, [r0, #0]
 800371a:	f013 0f01 	tst.w	r3, #1
 800371e:	d03b      	beq.n	8003798 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003720:	4ba7      	ldr	r3, [pc, #668]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 030c 	and.w	r3, r3, #12
 8003728:	2b04      	cmp	r3, #4
 800372a:	d02c      	beq.n	8003786 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800372c:	4ba4      	ldr	r3, [pc, #656]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003734:	2b08      	cmp	r3, #8
 8003736:	d021      	beq.n	800377c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003738:	6863      	ldr	r3, [r4, #4]
 800373a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373e:	d04f      	beq.n	80037e0 <HAL_RCC_OscConfig+0xd4>
 8003740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003744:	d052      	beq.n	80037ec <HAL_RCC_OscConfig+0xe0>
 8003746:	4b9e      	ldr	r3, [pc, #632]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003756:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003758:	6863      	ldr	r3, [r4, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d050      	beq.n	8003800 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7ff f8a9 	bl	80028b4 <HAL_GetTick>
 8003762:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003764:	4b96      	ldr	r3, [pc, #600]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800376c:	d114      	bne.n	8003798 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800376e:	f7ff f8a1 	bl	80028b4 <HAL_GetTick>
 8003772:	1b40      	subs	r0, r0, r5
 8003774:	2864      	cmp	r0, #100	; 0x64
 8003776:	d9f5      	bls.n	8003764 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8003778:	2003      	movs	r0, #3
 800377a:	e18a      	b.n	8003a92 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800377c:	4b90      	ldr	r3, [pc, #576]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003784:	d0d8      	beq.n	8003738 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003786:	4b8e      	ldr	r3, [pc, #568]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800378e:	d003      	beq.n	8003798 <HAL_RCC_OscConfig+0x8c>
 8003790:	6863      	ldr	r3, [r4, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 817a 	beq.w	8003a8c <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	f013 0f02 	tst.w	r3, #2
 800379e:	d055      	beq.n	800384c <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037a0:	4b87      	ldr	r3, [pc, #540]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f013 0f0c 	tst.w	r3, #12
 80037a8:	d03e      	beq.n	8003828 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037aa:	4b85      	ldr	r3, [pc, #532]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d033      	beq.n	800381e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037b6:	68e3      	ldr	r3, [r4, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d068      	beq.n	800388e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037bc:	4b81      	ldr	r3, [pc, #516]	; (80039c4 <HAL_RCC_OscConfig+0x2b8>)
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7ff f877 	bl	80028b4 <HAL_GetTick>
 80037c6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c8:	4b7d      	ldr	r3, [pc, #500]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f013 0f02 	tst.w	r3, #2
 80037d0:	d154      	bne.n	800387c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037d2:	f7ff f86f 	bl	80028b4 <HAL_GetTick>
 80037d6:	1b40      	subs	r0, r0, r5
 80037d8:	2802      	cmp	r0, #2
 80037da:	d9f5      	bls.n	80037c8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80037dc:	2003      	movs	r0, #3
 80037de:	e158      	b.n	8003a92 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e0:	4a77      	ldr	r2, [pc, #476]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 80037e2:	6813      	ldr	r3, [r2, #0]
 80037e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e7b5      	b.n	8003758 <HAL_RCC_OscConfig+0x4c>
 80037ec:	4b74      	ldr	r3, [pc, #464]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	e7ab      	b.n	8003758 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8003800:	f7ff f858 	bl	80028b4 <HAL_GetTick>
 8003804:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003806:	4b6e      	ldr	r3, [pc, #440]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800380e:	d0c3      	beq.n	8003798 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003810:	f7ff f850 	bl	80028b4 <HAL_GetTick>
 8003814:	1b40      	subs	r0, r0, r5
 8003816:	2864      	cmp	r0, #100	; 0x64
 8003818:	d9f5      	bls.n	8003806 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800381a:	2003      	movs	r0, #3
 800381c:	e139      	b.n	8003a92 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800381e:	4b68      	ldr	r3, [pc, #416]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003826:	d1c6      	bne.n	80037b6 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003828:	4b65      	ldr	r3, [pc, #404]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f013 0f02 	tst.w	r3, #2
 8003830:	d004      	beq.n	800383c <HAL_RCC_OscConfig+0x130>
 8003832:	68e3      	ldr	r3, [r4, #12]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d001      	beq.n	800383c <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8003838:	2001      	movs	r0, #1
 800383a:	e12a      	b.n	8003a92 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383c:	4a60      	ldr	r2, [pc, #384]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 800383e:	6813      	ldr	r3, [r2, #0]
 8003840:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003844:	6921      	ldr	r1, [r4, #16]
 8003846:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800384a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	f013 0f08 	tst.w	r3, #8
 8003852:	d040      	beq.n	80038d6 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003854:	6963      	ldr	r3, [r4, #20]
 8003856:	b363      	cbz	r3, 80038b2 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003858:	4b5b      	ldr	r3, [pc, #364]	; (80039c8 <HAL_RCC_OscConfig+0x2bc>)
 800385a:	2201      	movs	r2, #1
 800385c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385e:	f7ff f829 	bl	80028b4 <HAL_GetTick>
 8003862:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003864:	4b56      	ldr	r3, [pc, #344]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 8003866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003868:	f013 0f02 	tst.w	r3, #2
 800386c:	d133      	bne.n	80038d6 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800386e:	f7ff f821 	bl	80028b4 <HAL_GetTick>
 8003872:	1b40      	subs	r0, r0, r5
 8003874:	2802      	cmp	r0, #2
 8003876:	d9f5      	bls.n	8003864 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8003878:	2003      	movs	r0, #3
 800387a:	e10a      	b.n	8003a92 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387c:	4a50      	ldr	r2, [pc, #320]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 800387e:	6813      	ldr	r3, [r2, #0]
 8003880:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003884:	6921      	ldr	r1, [r4, #16]
 8003886:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	e7de      	b.n	800384c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800388e:	4b4d      	ldr	r3, [pc, #308]	; (80039c4 <HAL_RCC_OscConfig+0x2b8>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003894:	f7ff f80e 	bl	80028b4 <HAL_GetTick>
 8003898:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389a:	4b49      	ldr	r3, [pc, #292]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f013 0f02 	tst.w	r3, #2
 80038a2:	d0d3      	beq.n	800384c <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a4:	f7ff f806 	bl	80028b4 <HAL_GetTick>
 80038a8:	1b40      	subs	r0, r0, r5
 80038aa:	2802      	cmp	r0, #2
 80038ac:	d9f5      	bls.n	800389a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80038ae:	2003      	movs	r0, #3
 80038b0:	e0ef      	b.n	8003a92 <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b2:	4b45      	ldr	r3, [pc, #276]	; (80039c8 <HAL_RCC_OscConfig+0x2bc>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b8:	f7fe fffc 	bl	80028b4 <HAL_GetTick>
 80038bc:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038be:	4b40      	ldr	r3, [pc, #256]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 80038c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038c2:	f013 0f02 	tst.w	r3, #2
 80038c6:	d006      	beq.n	80038d6 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c8:	f7fe fff4 	bl	80028b4 <HAL_GetTick>
 80038cc:	1b40      	subs	r0, r0, r5
 80038ce:	2802      	cmp	r0, #2
 80038d0:	d9f5      	bls.n	80038be <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 80038d2:	2003      	movs	r0, #3
 80038d4:	e0dd      	b.n	8003a92 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	f013 0f04 	tst.w	r3, #4
 80038dc:	d079      	beq.n	80039d2 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038de:	4b38      	ldr	r3, [pc, #224]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80038e6:	d133      	bne.n	8003950 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e8:	2300      	movs	r3, #0
 80038ea:	9301      	str	r3, [sp, #4]
 80038ec:	4b34      	ldr	r3, [pc, #208]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 80038ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038f4:	641a      	str	r2, [r3, #64]	; 0x40
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003900:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003902:	4b32      	ldr	r3, [pc, #200]	; (80039cc <HAL_RCC_OscConfig+0x2c0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f413 7f80 	tst.w	r3, #256	; 0x100
 800390a:	d023      	beq.n	8003954 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800390c:	68a3      	ldr	r3, [r4, #8]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d034      	beq.n	800397c <HAL_RCC_OscConfig+0x270>
 8003912:	2b05      	cmp	r3, #5
 8003914:	d038      	beq.n	8003988 <HAL_RCC_OscConfig+0x27c>
 8003916:	4b2a      	ldr	r3, [pc, #168]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 8003918:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	671a      	str	r2, [r3, #112]	; 0x70
 8003920:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003922:	f022 0204 	bic.w	r2, r2, #4
 8003926:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003928:	68a3      	ldr	r3, [r4, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d036      	beq.n	800399c <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392e:	f7fe ffc1 	bl	80028b4 <HAL_GetTick>
 8003932:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003934:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	f013 0f02 	tst.w	r3, #2
 800393c:	d148      	bne.n	80039d0 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800393e:	f7fe ffb9 	bl	80028b4 <HAL_GetTick>
 8003942:	1b80      	subs	r0, r0, r6
 8003944:	f241 3388 	movw	r3, #5000	; 0x1388
 8003948:	4298      	cmp	r0, r3
 800394a:	d9f3      	bls.n	8003934 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 800394c:	2003      	movs	r0, #3
 800394e:	e0a0      	b.n	8003a92 <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8003950:	2500      	movs	r5, #0
 8003952:	e7d6      	b.n	8003902 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003954:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <HAL_RCC_OscConfig+0x2c0>)
 8003956:	6813      	ldr	r3, [r2, #0]
 8003958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800395c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800395e:	f7fe ffa9 	bl	80028b4 <HAL_GetTick>
 8003962:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003964:	4b19      	ldr	r3, [pc, #100]	; (80039cc <HAL_RCC_OscConfig+0x2c0>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f413 7f80 	tst.w	r3, #256	; 0x100
 800396c:	d1ce      	bne.n	800390c <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396e:	f7fe ffa1 	bl	80028b4 <HAL_GetTick>
 8003972:	1b80      	subs	r0, r0, r6
 8003974:	2802      	cmp	r0, #2
 8003976:	d9f5      	bls.n	8003964 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8003978:	2003      	movs	r0, #3
 800397a:	e08a      	b.n	8003a92 <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800397c:	4a10      	ldr	r2, [pc, #64]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 800397e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6713      	str	r3, [r2, #112]	; 0x70
 8003986:	e7cf      	b.n	8003928 <HAL_RCC_OscConfig+0x21c>
 8003988:	4b0d      	ldr	r3, [pc, #52]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 800398a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800398c:	f042 0204 	orr.w	r2, r2, #4
 8003990:	671a      	str	r2, [r3, #112]	; 0x70
 8003992:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003994:	f042 0201 	orr.w	r2, r2, #1
 8003998:	671a      	str	r2, [r3, #112]	; 0x70
 800399a:	e7c5      	b.n	8003928 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399c:	f7fe ff8a 	bl	80028b4 <HAL_GetTick>
 80039a0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a2:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <HAL_RCC_OscConfig+0x2b4>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	f013 0f02 	tst.w	r3, #2
 80039aa:	d011      	beq.n	80039d0 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ac:	f7fe ff82 	bl	80028b4 <HAL_GetTick>
 80039b0:	1b80      	subs	r0, r0, r6
 80039b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80039b6:	4298      	cmp	r0, r3
 80039b8:	d9f3      	bls.n	80039a2 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 80039ba:	2003      	movs	r0, #3
 80039bc:	e069      	b.n	8003a92 <HAL_RCC_OscConfig+0x386>
 80039be:	bf00      	nop
 80039c0:	40023800 	.word	0x40023800
 80039c4:	42470000 	.word	0x42470000
 80039c8:	42470e80 	.word	0x42470e80
 80039cc:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039d0:	b9e5      	cbnz	r5, 8003a0c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039d2:	69a3      	ldr	r3, [r4, #24]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d05b      	beq.n	8003a90 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039d8:	4a30      	ldr	r2, [pc, #192]	; (8003a9c <HAL_RCC_OscConfig+0x390>)
 80039da:	6892      	ldr	r2, [r2, #8]
 80039dc:	f002 020c 	and.w	r2, r2, #12
 80039e0:	2a08      	cmp	r2, #8
 80039e2:	d058      	beq.n	8003a96 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d017      	beq.n	8003a18 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e8:	4b2d      	ldr	r3, [pc, #180]	; (8003aa0 <HAL_RCC_OscConfig+0x394>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ee:	f7fe ff61 	bl	80028b4 <HAL_GetTick>
 80039f2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f4:	4b29      	ldr	r3, [pc, #164]	; (8003a9c <HAL_RCC_OscConfig+0x390>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80039fc:	d042      	beq.n	8003a84 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039fe:	f7fe ff59 	bl	80028b4 <HAL_GetTick>
 8003a02:	1b00      	subs	r0, r0, r4
 8003a04:	2802      	cmp	r0, #2
 8003a06:	d9f5      	bls.n	80039f4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003a08:	2003      	movs	r0, #3
 8003a0a:	e042      	b.n	8003a92 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a0c:	4a23      	ldr	r2, [pc, #140]	; (8003a9c <HAL_RCC_OscConfig+0x390>)
 8003a0e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a14:	6413      	str	r3, [r2, #64]	; 0x40
 8003a16:	e7dc      	b.n	80039d2 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8003a18:	4b21      	ldr	r3, [pc, #132]	; (8003aa0 <HAL_RCC_OscConfig+0x394>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a1e:	f7fe ff49 	bl	80028b4 <HAL_GetTick>
 8003a22:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a24:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <HAL_RCC_OscConfig+0x390>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003a2c:	d006      	beq.n	8003a3c <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a2e:	f7fe ff41 	bl	80028b4 <HAL_GetTick>
 8003a32:	1b40      	subs	r0, r0, r5
 8003a34:	2802      	cmp	r0, #2
 8003a36:	d9f5      	bls.n	8003a24 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8003a38:	2003      	movs	r0, #3
 8003a3a:	e02a      	b.n	8003a92 <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a3c:	69e3      	ldr	r3, [r4, #28]
 8003a3e:	6a22      	ldr	r2, [r4, #32]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a44:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003a48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003a4a:	0852      	lsrs	r2, r2, #1
 8003a4c:	3a01      	subs	r2, #1
 8003a4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a54:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003a58:	4a10      	ldr	r2, [pc, #64]	; (8003a9c <HAL_RCC_OscConfig+0x390>)
 8003a5a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8003a5c:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <HAL_RCC_OscConfig+0x394>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003a62:	f7fe ff27 	bl	80028b4 <HAL_GetTick>
 8003a66:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a68:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <HAL_RCC_OscConfig+0x390>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003a70:	d106      	bne.n	8003a80 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a72:	f7fe ff1f 	bl	80028b4 <HAL_GetTick>
 8003a76:	1b00      	subs	r0, r0, r4
 8003a78:	2802      	cmp	r0, #2
 8003a7a:	d9f5      	bls.n	8003a68 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8003a7c:	2003      	movs	r0, #3
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003a80:	2000      	movs	r0, #0
 8003a82:	e006      	b.n	8003a92 <HAL_RCC_OscConfig+0x386>
 8003a84:	2000      	movs	r0, #0
 8003a86:	e004      	b.n	8003a92 <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8003a88:	2001      	movs	r0, #1
}
 8003a8a:	4770      	bx	lr
        return HAL_ERROR;
 8003a8c:	2001      	movs	r0, #1
 8003a8e:	e000      	b.n	8003a92 <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8003a90:	2000      	movs	r0, #0
}
 8003a92:	b002      	add	sp, #8
 8003a94:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003a96:	2001      	movs	r0, #1
 8003a98:	e7fb      	b.n	8003a92 <HAL_RCC_OscConfig+0x386>
 8003a9a:	bf00      	nop
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	42470060 	.word	0x42470060

08003aa4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aa4:	4b32      	ldr	r3, [pc, #200]	; (8003b70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 030c 	and.w	r3, r3, #12
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d05c      	beq.n	8003b6a <HAL_RCC_GetSysClockFreq+0xc6>
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ab4:	482f      	ldr	r0, [pc, #188]	; (8003b74 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ab6:	4770      	bx	lr
{
 8003ab8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003abc:	4b2c      	ldr	r3, [pc, #176]	; (8003b70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003aca:	d02b      	beq.n	8003b24 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003acc:	4b28      	ldr	r3, [pc, #160]	; (8003b70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003ad4:	461e      	mov	r6, r3
 8003ad6:	2700      	movs	r7, #0
 8003ad8:	015c      	lsls	r4, r3, #5
 8003ada:	2500      	movs	r5, #0
 8003adc:	1ae4      	subs	r4, r4, r3
 8003ade:	eb65 0507 	sbc.w	r5, r5, r7
 8003ae2:	01a9      	lsls	r1, r5, #6
 8003ae4:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8003ae8:	01a0      	lsls	r0, r4, #6
 8003aea:	1b00      	subs	r0, r0, r4
 8003aec:	eb61 0105 	sbc.w	r1, r1, r5
 8003af0:	00cb      	lsls	r3, r1, #3
 8003af2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003af6:	00c4      	lsls	r4, r0, #3
 8003af8:	19a0      	adds	r0, r4, r6
 8003afa:	eb43 0107 	adc.w	r1, r3, r7
 8003afe:	024b      	lsls	r3, r1, #9
 8003b00:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8003b04:	0244      	lsls	r4, r0, #9
 8003b06:	4620      	mov	r0, r4
 8003b08:	4619      	mov	r1, r3
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f7fc ff86 	bl	8000a1c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b10:	4b17      	ldr	r3, [pc, #92]	; (8003b70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003b18:	3301      	adds	r3, #1
 8003b1a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003b1c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003b20:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b24:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003b2c:	461e      	mov	r6, r3
 8003b2e:	2700      	movs	r7, #0
 8003b30:	015c      	lsls	r4, r3, #5
 8003b32:	2500      	movs	r5, #0
 8003b34:	1ae4      	subs	r4, r4, r3
 8003b36:	eb65 0507 	sbc.w	r5, r5, r7
 8003b3a:	01a9      	lsls	r1, r5, #6
 8003b3c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8003b40:	01a0      	lsls	r0, r4, #6
 8003b42:	1b00      	subs	r0, r0, r4
 8003b44:	eb61 0105 	sbc.w	r1, r1, r5
 8003b48:	00cb      	lsls	r3, r1, #3
 8003b4a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003b4e:	00c4      	lsls	r4, r0, #3
 8003b50:	19a0      	adds	r0, r4, r6
 8003b52:	eb43 0107 	adc.w	r1, r3, r7
 8003b56:	028b      	lsls	r3, r1, #10
 8003b58:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8003b5c:	0284      	lsls	r4, r0, #10
 8003b5e:	4620      	mov	r0, r4
 8003b60:	4619      	mov	r1, r3
 8003b62:	2300      	movs	r3, #0
 8003b64:	f7fc ff5a 	bl	8000a1c <__aeabi_uldivmod>
 8003b68:	e7d2      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8003b6a:	4803      	ldr	r0, [pc, #12]	; (8003b78 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40023800 	.word	0x40023800
 8003b74:	00f42400 	.word	0x00f42400
 8003b78:	007a1200 	.word	0x007a1200

08003b7c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003b7c:	2800      	cmp	r0, #0
 8003b7e:	f000 809d 	beq.w	8003cbc <HAL_RCC_ClockConfig+0x140>
{
 8003b82:	b570      	push	{r4, r5, r6, lr}
 8003b84:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b86:	4b4f      	ldr	r3, [pc, #316]	; (8003cc4 <HAL_RCC_ClockConfig+0x148>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	428b      	cmp	r3, r1
 8003b90:	d209      	bcs.n	8003ba6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b92:	b2cb      	uxtb	r3, r1
 8003b94:	4a4b      	ldr	r2, [pc, #300]	; (8003cc4 <HAL_RCC_ClockConfig+0x148>)
 8003b96:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b98:	6813      	ldr	r3, [r2, #0]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	428b      	cmp	r3, r1
 8003ba0:	d001      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8003ba2:	2001      	movs	r0, #1
}
 8003ba4:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	f013 0f02 	tst.w	r3, #2
 8003bac:	d017      	beq.n	8003bde <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bae:	f013 0f04 	tst.w	r3, #4
 8003bb2:	d004      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb4:	4a44      	ldr	r2, [pc, #272]	; (8003cc8 <HAL_RCC_ClockConfig+0x14c>)
 8003bb6:	6893      	ldr	r3, [r2, #8]
 8003bb8:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bbc:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	f013 0f08 	tst.w	r3, #8
 8003bc4:	d004      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bc6:	4a40      	ldr	r2, [pc, #256]	; (8003cc8 <HAL_RCC_ClockConfig+0x14c>)
 8003bc8:	6893      	ldr	r3, [r2, #8]
 8003bca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bce:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd0:	4a3d      	ldr	r2, [pc, #244]	; (8003cc8 <HAL_RCC_ClockConfig+0x14c>)
 8003bd2:	6893      	ldr	r3, [r2, #8]
 8003bd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bd8:	68a0      	ldr	r0, [r4, #8]
 8003bda:	4303      	orrs	r3, r0
 8003bdc:	6093      	str	r3, [r2, #8]
 8003bde:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	f013 0f01 	tst.w	r3, #1
 8003be6:	d032      	beq.n	8003c4e <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003be8:	6863      	ldr	r3, [r4, #4]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d021      	beq.n	8003c32 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bee:	1e9a      	subs	r2, r3, #2
 8003bf0:	2a01      	cmp	r2, #1
 8003bf2:	d925      	bls.n	8003c40 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf4:	4a34      	ldr	r2, [pc, #208]	; (8003cc8 <HAL_RCC_ClockConfig+0x14c>)
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	f012 0f02 	tst.w	r2, #2
 8003bfc:	d060      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bfe:	4932      	ldr	r1, [pc, #200]	; (8003cc8 <HAL_RCC_ClockConfig+0x14c>)
 8003c00:	688a      	ldr	r2, [r1, #8]
 8003c02:	f022 0203 	bic.w	r2, r2, #3
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003c0a:	f7fe fe53 	bl	80028b4 <HAL_GetTick>
 8003c0e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c10:	4b2d      	ldr	r3, [pc, #180]	; (8003cc8 <HAL_RCC_ClockConfig+0x14c>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 030c 	and.w	r3, r3, #12
 8003c18:	6862      	ldr	r2, [r4, #4]
 8003c1a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003c1e:	d016      	beq.n	8003c4e <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c20:	f7fe fe48 	bl	80028b4 <HAL_GetTick>
 8003c24:	1b80      	subs	r0, r0, r6
 8003c26:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c2a:	4298      	cmp	r0, r3
 8003c2c:	d9f0      	bls.n	8003c10 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8003c2e:	2003      	movs	r0, #3
 8003c30:	e7b8      	b.n	8003ba4 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	4a25      	ldr	r2, [pc, #148]	; (8003cc8 <HAL_RCC_ClockConfig+0x14c>)
 8003c34:	6812      	ldr	r2, [r2, #0]
 8003c36:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003c3a:	d1e0      	bne.n	8003bfe <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003c3c:	2001      	movs	r0, #1
 8003c3e:	e7b1      	b.n	8003ba4 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c40:	4a21      	ldr	r2, [pc, #132]	; (8003cc8 <HAL_RCC_ClockConfig+0x14c>)
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003c48:	d1d9      	bne.n	8003bfe <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	e7aa      	b.n	8003ba4 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c4e:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <HAL_RCC_ClockConfig+0x148>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	42ab      	cmp	r3, r5
 8003c58:	d909      	bls.n	8003c6e <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	b2ea      	uxtb	r2, r5
 8003c5c:	4b19      	ldr	r3, [pc, #100]	; (8003cc4 <HAL_RCC_ClockConfig+0x148>)
 8003c5e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	42ab      	cmp	r3, r5
 8003c68:	d001      	beq.n	8003c6e <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8003c6a:	2001      	movs	r0, #1
 8003c6c:	e79a      	b.n	8003ba4 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	f013 0f04 	tst.w	r3, #4
 8003c74:	d006      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c76:	4a14      	ldr	r2, [pc, #80]	; (8003cc8 <HAL_RCC_ClockConfig+0x14c>)
 8003c78:	6893      	ldr	r3, [r2, #8]
 8003c7a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003c7e:	68e1      	ldr	r1, [r4, #12]
 8003c80:	430b      	orrs	r3, r1
 8003c82:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	f013 0f08 	tst.w	r3, #8
 8003c8a:	d007      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c8c:	4a0e      	ldr	r2, [pc, #56]	; (8003cc8 <HAL_RCC_ClockConfig+0x14c>)
 8003c8e:	6893      	ldr	r3, [r2, #8]
 8003c90:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003c94:	6921      	ldr	r1, [r4, #16]
 8003c96:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003c9a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c9c:	f7ff ff02 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8003ca0:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_RCC_ClockConfig+0x14c>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003ca8:	4a08      	ldr	r2, [pc, #32]	; (8003ccc <HAL_RCC_ClockConfig+0x150>)
 8003caa:	5cd3      	ldrb	r3, [r2, r3]
 8003cac:	40d8      	lsrs	r0, r3
 8003cae:	4b08      	ldr	r3, [pc, #32]	; (8003cd0 <HAL_RCC_ClockConfig+0x154>)
 8003cb0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	f7fe fdb2 	bl	800281c <HAL_InitTick>
  return HAL_OK;
 8003cb8:	2000      	movs	r0, #0
 8003cba:	e773      	b.n	8003ba4 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003cbc:	2001      	movs	r0, #1
}
 8003cbe:	4770      	bx	lr
        return HAL_ERROR;
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	e76f      	b.n	8003ba4 <HAL_RCC_ClockConfig+0x28>
 8003cc4:	40023c00 	.word	0x40023c00
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	080098e0 	.word	0x080098e0
 8003cd0:	20000048 	.word	0x20000048

08003cd4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003cd4:	4b01      	ldr	r3, [pc, #4]	; (8003cdc <HAL_RCC_GetHCLKFreq+0x8>)
 8003cd6:	6818      	ldr	r0, [r3, #0]
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20000048 	.word	0x20000048

08003ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ce0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ce2:	f7ff fff7 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003ce6:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003cee:	4a03      	ldr	r2, [pc, #12]	; (8003cfc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003cf0:	5cd3      	ldrb	r3, [r2, r3]
}
 8003cf2:	40d8      	lsrs	r0, r3
 8003cf4:	bd08      	pop	{r3, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	080098f0 	.word	0x080098f0

08003d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d00:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d02:	f7ff ffe7 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003d06:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003d0e:	4a03      	ldr	r2, [pc, #12]	; (8003d1c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003d10:	5cd3      	ldrb	r3, [r2, r3]
}
 8003d12:	40d8      	lsrs	r0, r3
 8003d14:	bd08      	pop	{r3, pc}
 8003d16:	bf00      	nop
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	080098f0 	.word	0x080098f0

08003d20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d20:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d22:	6a03      	ldr	r3, [r0, #32]
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d2c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d2e:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d30:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d34:	680d      	ldr	r5, [r1, #0]
 8003d36:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d3a:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d3e:	688b      	ldr	r3, [r1, #8]
 8003d40:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d42:	4d0d      	ldr	r5, [pc, #52]	; (8003d78 <TIM_OC1_SetConfig+0x58>)
 8003d44:	42a8      	cmp	r0, r5
 8003d46:	d009      	beq.n	8003d5c <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d48:	4d0b      	ldr	r5, [pc, #44]	; (8003d78 <TIM_OC1_SetConfig+0x58>)
 8003d4a:	42a8      	cmp	r0, r5
 8003d4c:	d00d      	beq.n	8003d6a <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d50:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d52:	684a      	ldr	r2, [r1, #4]
 8003d54:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d56:	6203      	str	r3, [r0, #32]
}
 8003d58:	bc70      	pop	{r4, r5, r6}
 8003d5a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d5c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003d60:	68cc      	ldr	r4, [r1, #12]
 8003d62:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d64:	f023 0304 	bic.w	r3, r3, #4
 8003d68:	e7ee      	b.n	8003d48 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d6a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8003d6e:	694c      	ldr	r4, [r1, #20]
 8003d70:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d72:	698a      	ldr	r2, [r1, #24]
 8003d74:	4322      	orrs	r2, r4
 8003d76:	e7ea      	b.n	8003d4e <TIM_OC1_SetConfig+0x2e>
 8003d78:	40010000 	.word	0x40010000

08003d7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d7c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d7e:	6a03      	ldr	r3, [r0, #32]
 8003d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d84:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d86:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d88:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d8a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d8c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d90:	680d      	ldr	r5, [r1, #0]
 8003d92:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d98:	688d      	ldr	r5, [r1, #8]
 8003d9a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d9e:	4d0f      	ldr	r5, [pc, #60]	; (8003ddc <TIM_OC3_SetConfig+0x60>)
 8003da0:	42a8      	cmp	r0, r5
 8003da2:	d009      	beq.n	8003db8 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da4:	4d0d      	ldr	r5, [pc, #52]	; (8003ddc <TIM_OC3_SetConfig+0x60>)
 8003da6:	42a8      	cmp	r0, r5
 8003da8:	d00e      	beq.n	8003dc8 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003daa:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dac:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dae:	684a      	ldr	r2, [r1, #4]
 8003db0:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db2:	6203      	str	r3, [r0, #32]
}
 8003db4:	bc30      	pop	{r4, r5}
 8003db6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003db8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dbc:	68cd      	ldr	r5, [r1, #12]
 8003dbe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dc6:	e7ed      	b.n	8003da4 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dc8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dcc:	694d      	ldr	r5, [r1, #20]
 8003dce:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dd2:	698d      	ldr	r5, [r1, #24]
 8003dd4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003dd8:	e7e7      	b.n	8003daa <TIM_OC3_SetConfig+0x2e>
 8003dda:	bf00      	nop
 8003ddc:	40010000 	.word	0x40010000

08003de0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003de0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003de2:	6a03      	ldr	r3, [r0, #32]
 8003de4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003de8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dee:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003df0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003df4:	680d      	ldr	r5, [r1, #0]
 8003df6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dfe:	688d      	ldr	r5, [r1, #8]
 8003e00:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e04:	4d07      	ldr	r5, [pc, #28]	; (8003e24 <TIM_OC4_SetConfig+0x44>)
 8003e06:	42a8      	cmp	r0, r5
 8003e08:	d006      	beq.n	8003e18 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e0a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e0c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e0e:	684a      	ldr	r2, [r1, #4]
 8003e10:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e12:	6203      	str	r3, [r0, #32]
}
 8003e14:	bc30      	pop	{r4, r5}
 8003e16:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e18:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e1c:	694d      	ldr	r5, [r1, #20]
 8003e1e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003e22:	e7f2      	b.n	8003e0a <TIM_OC4_SetConfig+0x2a>
 8003e24:	40010000 	.word	0x40010000

08003e28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e28:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e2a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e2c:	6a04      	ldr	r4, [r0, #32]
 8003e2e:	f024 0401 	bic.w	r4, r4, #1
 8003e32:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e34:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e36:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e3a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e3e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003e42:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e44:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003e46:	6203      	str	r3, [r0, #32]
}
 8003e48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e4e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e50:	6a03      	ldr	r3, [r0, #32]
 8003e52:	f023 0310 	bic.w	r3, r3, #16
 8003e56:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e58:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003e5a:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e5c:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e60:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e68:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e6c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003e6e:	6203      	str	r3, [r0, #32]
}
 8003e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e76:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e7c:	4319      	orrs	r1, r3
 8003e7e:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e82:	6081      	str	r1, [r0, #8]
}
 8003e84:	4770      	bx	lr

08003e86 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e86:	6802      	ldr	r2, [r0, #0]
 8003e88:	68d3      	ldr	r3, [r2, #12]
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e90:	6802      	ldr	r2, [r0, #0]
 8003e92:	6893      	ldr	r3, [r2, #8]
 8003e94:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e98:	2b06      	cmp	r3, #6
 8003e9a:	d003      	beq.n	8003ea4 <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8003e9c:	6813      	ldr	r3, [r2, #0]
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6013      	str	r3, [r2, #0]
}
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_TIM_PWM_MspInit>:
}
 8003ea8:	4770      	bx	lr

08003eaa <HAL_TIM_PeriodElapsedCallback>:
}
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003eac:	4770      	bx	lr

08003eae <HAL_TIM_IC_CaptureCallback>:
}
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_TIM_TriggerCallback>:
}
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_TIM_IRQHandler>:
{
 8003eb4:	b510      	push	{r4, lr}
 8003eb6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003eb8:	6803      	ldr	r3, [r0, #0]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	f012 0f02 	tst.w	r2, #2
 8003ec0:	d011      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	f012 0f02 	tst.w	r2, #2
 8003ec8:	d00d      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003eca:	f06f 0202 	mvn.w	r2, #2
 8003ece:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ed4:	6803      	ldr	r3, [r0, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	f013 0f03 	tst.w	r3, #3
 8003edc:	d070      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8003ede:	f7ff ffe6 	bl	8003eae <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	f012 0f04 	tst.w	r2, #4
 8003eee:	d012      	beq.n	8003f16 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	f012 0f04 	tst.w	r2, #4
 8003ef6:	d00e      	beq.n	8003f16 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ef8:	f06f 0204 	mvn.w	r2, #4
 8003efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003efe:	2302      	movs	r3, #2
 8003f00:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003f0a:	d05f      	beq.n	8003fcc <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	f7ff ffce 	bl	8003eae <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f12:	2300      	movs	r3, #0
 8003f14:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	f012 0f08 	tst.w	r2, #8
 8003f1e:	d012      	beq.n	8003f46 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	f012 0f08 	tst.w	r2, #8
 8003f26:	d00e      	beq.n	8003f46 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f28:	f06f 0208 	mvn.w	r2, #8
 8003f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f2e:	2304      	movs	r3, #4
 8003f30:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f013 0f03 	tst.w	r3, #3
 8003f3a:	d04e      	beq.n	8003fda <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	f7ff ffb6 	bl	8003eae <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f42:	2300      	movs	r3, #0
 8003f44:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	f012 0f10 	tst.w	r2, #16
 8003f4e:	d012      	beq.n	8003f76 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	f012 0f10 	tst.w	r2, #16
 8003f56:	d00e      	beq.n	8003f76 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f58:	f06f 0210 	mvn.w	r2, #16
 8003f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f5e:	2308      	movs	r3, #8
 8003f60:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003f6a:	d03d      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f7ff ff9e 	bl	8003eae <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	2300      	movs	r3, #0
 8003f74:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	691a      	ldr	r2, [r3, #16]
 8003f7a:	f012 0f01 	tst.w	r2, #1
 8003f7e:	d003      	beq.n	8003f88 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	f012 0f01 	tst.w	r2, #1
 8003f86:	d136      	bne.n	8003ff6 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003f90:	d003      	beq.n	8003f9a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003f98:	d134      	bne.n	8004004 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003fa2:	d003      	beq.n	8003fac <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003faa:	d132      	bne.n	8004012 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fac:	6823      	ldr	r3, [r4, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	f012 0f20 	tst.w	r2, #32
 8003fb4:	d003      	beq.n	8003fbe <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	f012 0f20 	tst.w	r2, #32
 8003fbc:	d130      	bne.n	8004020 <HAL_TIM_IRQHandler+0x16c>
}
 8003fbe:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc0:	f7ff ff74 	bl	8003eac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f7ff ff73 	bl	8003eb0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003fca:	e78a      	b.n	8003ee2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f7ff ff6d 	bl	8003eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f7ff ff6c 	bl	8003eb0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003fd8:	e79b      	b.n	8003f12 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fda:	4620      	mov	r0, r4
 8003fdc:	f7ff ff66 	bl	8003eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	f7ff ff65 	bl	8003eb0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003fe6:	e7ac      	b.n	8003f42 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f7ff ff5f 	bl	8003eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fee:	4620      	mov	r0, r4
 8003ff0:	f7ff ff5e 	bl	8003eb0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003ff4:	e7bd      	b.n	8003f72 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ff6:	f06f 0201 	mvn.w	r2, #1
 8003ffa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f7ff ff54 	bl	8003eaa <HAL_TIM_PeriodElapsedCallback>
 8004002:	e7c1      	b.n	8003f88 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004008:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800400a:	4620      	mov	r0, r4
 800400c:	f000 fa1e 	bl	800444c <HAL_TIMEx_BreakCallback>
 8004010:	e7c3      	b.n	8003f9a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004012:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004016:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004018:	4620      	mov	r0, r4
 800401a:	f7ff ff4a 	bl	8003eb2 <HAL_TIM_TriggerCallback>
 800401e:	e7c5      	b.n	8003fac <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004020:	f06f 0220 	mvn.w	r2, #32
 8004024:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004026:	4620      	mov	r0, r4
 8004028:	f000 fa0f 	bl	800444a <HAL_TIMEx_CommutCallback>
}
 800402c:	e7c7      	b.n	8003fbe <HAL_TIM_IRQHandler+0x10a>
	...

08004030 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004030:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004032:	4a25      	ldr	r2, [pc, #148]	; (80040c8 <TIM_Base_SetConfig+0x98>)
 8004034:	4290      	cmp	r0, r2
 8004036:	d00e      	beq.n	8004056 <TIM_Base_SetConfig+0x26>
 8004038:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800403c:	d00b      	beq.n	8004056 <TIM_Base_SetConfig+0x26>
 800403e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004042:	4290      	cmp	r0, r2
 8004044:	d007      	beq.n	8004056 <TIM_Base_SetConfig+0x26>
 8004046:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800404a:	4290      	cmp	r0, r2
 800404c:	d003      	beq.n	8004056 <TIM_Base_SetConfig+0x26>
 800404e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004052:	4290      	cmp	r0, r2
 8004054:	d103      	bne.n	800405e <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800405a:	684a      	ldr	r2, [r1, #4]
 800405c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800405e:	4a1a      	ldr	r2, [pc, #104]	; (80040c8 <TIM_Base_SetConfig+0x98>)
 8004060:	4290      	cmp	r0, r2
 8004062:	d01a      	beq.n	800409a <TIM_Base_SetConfig+0x6a>
 8004064:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004068:	d017      	beq.n	800409a <TIM_Base_SetConfig+0x6a>
 800406a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800406e:	4290      	cmp	r0, r2
 8004070:	d013      	beq.n	800409a <TIM_Base_SetConfig+0x6a>
 8004072:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004076:	4290      	cmp	r0, r2
 8004078:	d00f      	beq.n	800409a <TIM_Base_SetConfig+0x6a>
 800407a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800407e:	4290      	cmp	r0, r2
 8004080:	d00b      	beq.n	800409a <TIM_Base_SetConfig+0x6a>
 8004082:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8004086:	4290      	cmp	r0, r2
 8004088:	d007      	beq.n	800409a <TIM_Base_SetConfig+0x6a>
 800408a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800408e:	4290      	cmp	r0, r2
 8004090:	d003      	beq.n	800409a <TIM_Base_SetConfig+0x6a>
 8004092:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004096:	4290      	cmp	r0, r2
 8004098:	d103      	bne.n	80040a2 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 800409a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800409e:	68ca      	ldr	r2, [r1, #12]
 80040a0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a6:	694a      	ldr	r2, [r1, #20]
 80040a8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80040aa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040ac:	688b      	ldr	r3, [r1, #8]
 80040ae:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80040b0:	680b      	ldr	r3, [r1, #0]
 80040b2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b4:	4b04      	ldr	r3, [pc, #16]	; (80040c8 <TIM_Base_SetConfig+0x98>)
 80040b6:	4298      	cmp	r0, r3
 80040b8:	d002      	beq.n	80040c0 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 80040ba:	2301      	movs	r3, #1
 80040bc:	6143      	str	r3, [r0, #20]
}
 80040be:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80040c0:	690b      	ldr	r3, [r1, #16]
 80040c2:	6303      	str	r3, [r0, #48]	; 0x30
 80040c4:	e7f9      	b.n	80040ba <TIM_Base_SetConfig+0x8a>
 80040c6:	bf00      	nop
 80040c8:	40010000 	.word	0x40010000

080040cc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80040cc:	b1a8      	cbz	r0, 80040fa <HAL_TIM_Base_Init+0x2e>
{
 80040ce:	b510      	push	{r4, lr}
 80040d0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80040d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80040d6:	b15b      	cbz	r3, 80040f0 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	2302      	movs	r3, #2
 80040da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040de:	1d21      	adds	r1, r4, #4
 80040e0:	6820      	ldr	r0, [r4, #0]
 80040e2:	f7ff ffa5 	bl	8004030 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80040e6:	2301      	movs	r3, #1
 80040e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80040ec:	2000      	movs	r0, #0
}
 80040ee:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80040f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80040f4:	f000 ffda 	bl	80050ac <HAL_TIM_Base_MspInit>
 80040f8:	e7ee      	b.n	80040d8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80040fa:	2001      	movs	r0, #1
}
 80040fc:	4770      	bx	lr

080040fe <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80040fe:	b1a8      	cbz	r0, 800412c <HAL_TIM_PWM_Init+0x2e>
{
 8004100:	b510      	push	{r4, lr}
 8004102:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004104:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004108:	b15b      	cbz	r3, 8004122 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800410a:	2302      	movs	r3, #2
 800410c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004110:	1d21      	adds	r1, r4, #4
 8004112:	6820      	ldr	r0, [r4, #0]
 8004114:	f7ff ff8c 	bl	8004030 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004118:	2301      	movs	r3, #1
 800411a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800411e:	2000      	movs	r0, #0
}
 8004120:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004122:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004126:	f7ff febf 	bl	8003ea8 <HAL_TIM_PWM_MspInit>
 800412a:	e7ee      	b.n	800410a <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800412c:	2001      	movs	r0, #1
}
 800412e:	4770      	bx	lr

08004130 <TIM_OC2_SetConfig>:
{
 8004130:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004132:	6a03      	ldr	r3, [r0, #32]
 8004134:	f023 0310 	bic.w	r3, r3, #16
 8004138:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800413a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800413c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800413e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004140:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004144:	680d      	ldr	r5, [r1, #0]
 8004146:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800414a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800414e:	688d      	ldr	r5, [r1, #8]
 8004150:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004154:	4d0e      	ldr	r5, [pc, #56]	; (8004190 <TIM_OC2_SetConfig+0x60>)
 8004156:	42a8      	cmp	r0, r5
 8004158:	d009      	beq.n	800416e <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800415a:	4d0d      	ldr	r5, [pc, #52]	; (8004190 <TIM_OC2_SetConfig+0x60>)
 800415c:	42a8      	cmp	r0, r5
 800415e:	d00e      	beq.n	800417e <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8004160:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004162:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004164:	684a      	ldr	r2, [r1, #4]
 8004166:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004168:	6203      	str	r3, [r0, #32]
}
 800416a:	bc30      	pop	{r4, r5}
 800416c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800416e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004172:	68cd      	ldr	r5, [r1, #12]
 8004174:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800417c:	e7ed      	b.n	800415a <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800417e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004182:	694d      	ldr	r5, [r1, #20]
 8004184:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004188:	698d      	ldr	r5, [r1, #24]
 800418a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800418e:	e7e7      	b.n	8004160 <TIM_OC2_SetConfig+0x30>
 8004190:	40010000 	.word	0x40010000

08004194 <HAL_TIM_PWM_ConfigChannel>:
{
 8004194:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004196:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800419a:	2b01      	cmp	r3, #1
 800419c:	d066      	beq.n	800426c <HAL_TIM_PWM_ConfigChannel+0xd8>
 800419e:	460d      	mov	r5, r1
 80041a0:	4604      	mov	r4, r0
 80041a2:	2301      	movs	r3, #1
 80041a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80041a8:	2302      	movs	r3, #2
 80041aa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80041ae:	2a0c      	cmp	r2, #12
 80041b0:	d81a      	bhi.n	80041e8 <HAL_TIM_PWM_ConfigChannel+0x54>
 80041b2:	e8df f002 	tbb	[pc, r2]
 80041b6:	1907      	.short	0x1907
 80041b8:	19201919 	.word	0x19201919
 80041bc:	19341919 	.word	0x19341919
 80041c0:	1919      	.short	0x1919
 80041c2:	47          	.byte	0x47
 80041c3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041c4:	6800      	ldr	r0, [r0, #0]
 80041c6:	f7ff fdab 	bl	8003d20 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041ca:	6822      	ldr	r2, [r4, #0]
 80041cc:	6993      	ldr	r3, [r2, #24]
 80041ce:	f043 0308 	orr.w	r3, r3, #8
 80041d2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041d4:	6822      	ldr	r2, [r4, #0]
 80041d6:	6993      	ldr	r3, [r2, #24]
 80041d8:	f023 0304 	bic.w	r3, r3, #4
 80041dc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041de:	6822      	ldr	r2, [r4, #0]
 80041e0:	6993      	ldr	r3, [r2, #24]
 80041e2:	6929      	ldr	r1, [r5, #16]
 80041e4:	430b      	orrs	r3, r1
 80041e6:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80041e8:	2301      	movs	r3, #1
 80041ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80041ee:	2000      	movs	r0, #0
 80041f0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80041f4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041f6:	6800      	ldr	r0, [r0, #0]
 80041f8:	f7ff ff9a 	bl	8004130 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041fc:	6822      	ldr	r2, [r4, #0]
 80041fe:	6993      	ldr	r3, [r2, #24]
 8004200:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004204:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004206:	6822      	ldr	r2, [r4, #0]
 8004208:	6993      	ldr	r3, [r2, #24]
 800420a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800420e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004210:	6822      	ldr	r2, [r4, #0]
 8004212:	6993      	ldr	r3, [r2, #24]
 8004214:	6929      	ldr	r1, [r5, #16]
 8004216:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800421a:	6193      	str	r3, [r2, #24]
      break;
 800421c:	e7e4      	b.n	80041e8 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800421e:	6800      	ldr	r0, [r0, #0]
 8004220:	f7ff fdac 	bl	8003d7c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004224:	6822      	ldr	r2, [r4, #0]
 8004226:	69d3      	ldr	r3, [r2, #28]
 8004228:	f043 0308 	orr.w	r3, r3, #8
 800422c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800422e:	6822      	ldr	r2, [r4, #0]
 8004230:	69d3      	ldr	r3, [r2, #28]
 8004232:	f023 0304 	bic.w	r3, r3, #4
 8004236:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004238:	6822      	ldr	r2, [r4, #0]
 800423a:	69d3      	ldr	r3, [r2, #28]
 800423c:	6929      	ldr	r1, [r5, #16]
 800423e:	430b      	orrs	r3, r1
 8004240:	61d3      	str	r3, [r2, #28]
      break;
 8004242:	e7d1      	b.n	80041e8 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004244:	6800      	ldr	r0, [r0, #0]
 8004246:	f7ff fdcb 	bl	8003de0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800424a:	6822      	ldr	r2, [r4, #0]
 800424c:	69d3      	ldr	r3, [r2, #28]
 800424e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004252:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004254:	6822      	ldr	r2, [r4, #0]
 8004256:	69d3      	ldr	r3, [r2, #28]
 8004258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800425c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800425e:	6822      	ldr	r2, [r4, #0]
 8004260:	69d3      	ldr	r3, [r2, #28]
 8004262:	6929      	ldr	r1, [r5, #16]
 8004264:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004268:	61d3      	str	r3, [r2, #28]
      break;
 800426a:	e7bd      	b.n	80041e8 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 800426c:	2002      	movs	r0, #2
 800426e:	e7c1      	b.n	80041f4 <HAL_TIM_PWM_ConfigChannel+0x60>

08004270 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004270:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004272:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004274:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004278:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800427c:	430b      	orrs	r3, r1
 800427e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004280:	6083      	str	r3, [r0, #8]
}
 8004282:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004288:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800428c:	2b01      	cmp	r3, #1
 800428e:	d066      	beq.n	800435e <HAL_TIM_ConfigClockSource+0xd6>
{
 8004290:	b510      	push	{r4, lr}
 8004292:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004294:	2301      	movs	r3, #1
 8004296:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800429a:	2302      	movs	r3, #2
 800429c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80042a0:	6802      	ldr	r2, [r0, #0]
 80042a2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042a8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80042ac:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80042ae:	680b      	ldr	r3, [r1, #0]
 80042b0:	2b40      	cmp	r3, #64	; 0x40
 80042b2:	d04a      	beq.n	800434a <HAL_TIM_ConfigClockSource+0xc2>
 80042b4:	d913      	bls.n	80042de <HAL_TIM_ConfigClockSource+0x56>
 80042b6:	2b60      	cmp	r3, #96	; 0x60
 80042b8:	d03d      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0xae>
 80042ba:	d91e      	bls.n	80042fa <HAL_TIM_ConfigClockSource+0x72>
 80042bc:	2b70      	cmp	r3, #112	; 0x70
 80042be:	d028      	beq.n	8004312 <HAL_TIM_ConfigClockSource+0x8a>
 80042c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c4:	d130      	bne.n	8004328 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 80042c6:	68cb      	ldr	r3, [r1, #12]
 80042c8:	684a      	ldr	r2, [r1, #4]
 80042ca:	6889      	ldr	r1, [r1, #8]
 80042cc:	6800      	ldr	r0, [r0, #0]
 80042ce:	f7ff ffcf 	bl	8004270 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042d2:	6822      	ldr	r2, [r4, #0]
 80042d4:	6893      	ldr	r3, [r2, #8]
 80042d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042da:	6093      	str	r3, [r2, #8]
      break;
 80042dc:	e024      	b.n	8004328 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 80042de:	2b10      	cmp	r3, #16
 80042e0:	d006      	beq.n	80042f0 <HAL_TIM_ConfigClockSource+0x68>
 80042e2:	d904      	bls.n	80042ee <HAL_TIM_ConfigClockSource+0x66>
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d003      	beq.n	80042f0 <HAL_TIM_ConfigClockSource+0x68>
 80042e8:	2b30      	cmp	r3, #48	; 0x30
 80042ea:	d001      	beq.n	80042f0 <HAL_TIM_ConfigClockSource+0x68>
 80042ec:	e01c      	b.n	8004328 <HAL_TIM_ConfigClockSource+0xa0>
 80042ee:	b9db      	cbnz	r3, 8004328 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042f0:	4619      	mov	r1, r3
 80042f2:	6820      	ldr	r0, [r4, #0]
 80042f4:	f7ff fdbf 	bl	8003e76 <TIM_ITRx_SetConfig>
      break;
 80042f8:	e016      	b.n	8004328 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 80042fa:	2b50      	cmp	r3, #80	; 0x50
 80042fc:	d114      	bne.n	8004328 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042fe:	68ca      	ldr	r2, [r1, #12]
 8004300:	6849      	ldr	r1, [r1, #4]
 8004302:	6800      	ldr	r0, [r0, #0]
 8004304:	f7ff fd90 	bl	8003e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004308:	2150      	movs	r1, #80	; 0x50
 800430a:	6820      	ldr	r0, [r4, #0]
 800430c:	f7ff fdb3 	bl	8003e76 <TIM_ITRx_SetConfig>
      break;
 8004310:	e00a      	b.n	8004328 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8004312:	68cb      	ldr	r3, [r1, #12]
 8004314:	684a      	ldr	r2, [r1, #4]
 8004316:	6889      	ldr	r1, [r1, #8]
 8004318:	6800      	ldr	r0, [r0, #0]
 800431a:	f7ff ffa9 	bl	8004270 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800431e:	6822      	ldr	r2, [r4, #0]
 8004320:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004322:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004326:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004328:	2301      	movs	r3, #1
 800432a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800432e:	2000      	movs	r0, #0
 8004330:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004334:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004336:	68ca      	ldr	r2, [r1, #12]
 8004338:	6849      	ldr	r1, [r1, #4]
 800433a:	6800      	ldr	r0, [r0, #0]
 800433c:	f7ff fd87 	bl	8003e4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004340:	2160      	movs	r1, #96	; 0x60
 8004342:	6820      	ldr	r0, [r4, #0]
 8004344:	f7ff fd97 	bl	8003e76 <TIM_ITRx_SetConfig>
      break;
 8004348:	e7ee      	b.n	8004328 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800434a:	68ca      	ldr	r2, [r1, #12]
 800434c:	6849      	ldr	r1, [r1, #4]
 800434e:	6800      	ldr	r0, [r0, #0]
 8004350:	f7ff fd6a 	bl	8003e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004354:	2140      	movs	r1, #64	; 0x40
 8004356:	6820      	ldr	r0, [r4, #0]
 8004358:	f7ff fd8d 	bl	8003e76 <TIM_ITRx_SetConfig>
      break;
 800435c:	e7e4      	b.n	8004328 <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 800435e:	2002      	movs	r0, #2
}
 8004360:	4770      	bx	lr

08004362 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004362:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004364:	f001 011f 	and.w	r1, r1, #31
 8004368:	2301      	movs	r3, #1
 800436a:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800436e:	6a03      	ldr	r3, [r0, #32]
 8004370:	ea23 0304 	bic.w	r3, r3, r4
 8004374:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004376:	6a03      	ldr	r3, [r0, #32]
 8004378:	408a      	lsls	r2, r1
 800437a:	4313      	orrs	r3, r2
 800437c:	6203      	str	r3, [r0, #32]
}
 800437e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_TIM_PWM_Start_IT>:
{
 8004384:	b510      	push	{r4, lr}
 8004386:	4604      	mov	r4, r0
  switch (Channel)
 8004388:	290c      	cmp	r1, #12
 800438a:	d80d      	bhi.n	80043a8 <HAL_TIM_PWM_Start_IT+0x24>
 800438c:	e8df f001 	tbb	[pc, r1]
 8004390:	0c0c0c07 	.word	0x0c0c0c07
 8004394:	0c0c0c20 	.word	0x0c0c0c20
 8004398:	0c0c0c26 	.word	0x0c0c0c26
 800439c:	2c          	.byte	0x2c
 800439d:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800439e:	6802      	ldr	r2, [r0, #0]
 80043a0:	68d3      	ldr	r3, [r2, #12]
 80043a2:	f043 0302 	orr.w	r3, r3, #2
 80043a6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043a8:	2201      	movs	r2, #1
 80043aa:	6820      	ldr	r0, [r4, #0]
 80043ac:	f7ff ffd9 	bl	8004362 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043b0:	6823      	ldr	r3, [r4, #0]
 80043b2:	4a13      	ldr	r2, [pc, #76]	; (8004400 <HAL_TIM_PWM_Start_IT+0x7c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d01d      	beq.n	80043f4 <HAL_TIM_PWM_Start_IT+0x70>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043b8:	6822      	ldr	r2, [r4, #0]
 80043ba:	6893      	ldr	r3, [r2, #8]
 80043bc:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c0:	2b06      	cmp	r3, #6
 80043c2:	d003      	beq.n	80043cc <HAL_TIM_PWM_Start_IT+0x48>
    __HAL_TIM_ENABLE(htim);
 80043c4:	6813      	ldr	r3, [r2, #0]
 80043c6:	f043 0301 	orr.w	r3, r3, #1
 80043ca:	6013      	str	r3, [r2, #0]
}
 80043cc:	2000      	movs	r0, #0
 80043ce:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043d0:	6802      	ldr	r2, [r0, #0]
 80043d2:	68d3      	ldr	r3, [r2, #12]
 80043d4:	f043 0304 	orr.w	r3, r3, #4
 80043d8:	60d3      	str	r3, [r2, #12]
      break;
 80043da:	e7e5      	b.n	80043a8 <HAL_TIM_PWM_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80043dc:	6802      	ldr	r2, [r0, #0]
 80043de:	68d3      	ldr	r3, [r2, #12]
 80043e0:	f043 0308 	orr.w	r3, r3, #8
 80043e4:	60d3      	str	r3, [r2, #12]
      break;
 80043e6:	e7df      	b.n	80043a8 <HAL_TIM_PWM_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80043e8:	6802      	ldr	r2, [r0, #0]
 80043ea:	68d3      	ldr	r3, [r2, #12]
 80043ec:	f043 0310 	orr.w	r3, r3, #16
 80043f0:	60d3      	str	r3, [r2, #12]
      break;
 80043f2:	e7d9      	b.n	80043a8 <HAL_TIM_PWM_Start_IT+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80043f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043fa:	645a      	str	r2, [r3, #68]	; 0x44
 80043fc:	e7dc      	b.n	80043b8 <HAL_TIM_PWM_Start_IT+0x34>
 80043fe:	bf00      	nop
 8004400:	40010000 	.word	0x40010000

08004404 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004404:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004408:	2b01      	cmp	r3, #1
 800440a:	d01c      	beq.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 800440c:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 800440e:	2601      	movs	r6, #1
 8004410:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004414:	2302      	movs	r3, #2
 8004416:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800441a:	6802      	ldr	r2, [r0, #0]
 800441c:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800441e:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004420:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004424:	680c      	ldr	r4, [r1, #0]
 8004426:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004428:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800442c:	684b      	ldr	r3, [r1, #4]
 800442e:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004430:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004432:	6802      	ldr	r2, [r0, #0]
 8004434:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004436:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800443a:	2300      	movs	r3, #0
 800443c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004440:	4618      	mov	r0, r3
}
 8004442:	bc70      	pop	{r4, r5, r6}
 8004444:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004446:	2002      	movs	r0, #2
}
 8004448:	4770      	bx	lr

0800444a <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800444a:	4770      	bx	lr

0800444c <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800444c:	4770      	bx	lr
	...

08004450 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004454:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004456:	6802      	ldr	r2, [r0, #0]
 8004458:	6913      	ldr	r3, [r2, #16]
 800445a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800445e:	68c1      	ldr	r1, [r0, #12]
 8004460:	430b      	orrs	r3, r1
 8004462:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004464:	6883      	ldr	r3, [r0, #8]
 8004466:	6902      	ldr	r2, [r0, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	6942      	ldr	r2, [r0, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	69c2      	ldr	r2, [r0, #28]
 8004470:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8004472:	6801      	ldr	r1, [r0, #0]
 8004474:	68cb      	ldr	r3, [r1, #12]
 8004476:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800447a:	f023 030c 	bic.w	r3, r3, #12
 800447e:	4313      	orrs	r3, r2
 8004480:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004482:	6802      	ldr	r2, [r0, #0]
 8004484:	6953      	ldr	r3, [r2, #20]
 8004486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800448a:	6981      	ldr	r1, [r0, #24]
 800448c:	430b      	orrs	r3, r1
 800448e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004490:	69c3      	ldr	r3, [r0, #28]
 8004492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004496:	d060      	beq.n	800455a <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004498:	6803      	ldr	r3, [r0, #0]
 800449a:	4ab8      	ldr	r2, [pc, #736]	; (800477c <UART_SetConfig+0x32c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	f000 8114 	beq.w	80046ca <UART_SetConfig+0x27a>
 80044a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80044a6:	4293      	cmp	r3, r2
 80044a8:	f000 810f 	beq.w	80046ca <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80044ac:	f7ff fc18 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 80044b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044b8:	6865      	ldr	r5, [r4, #4]
 80044ba:	00ad      	lsls	r5, r5, #2
 80044bc:	fbb0 f5f5 	udiv	r5, r0, r5
 80044c0:	4faf      	ldr	r7, [pc, #700]	; (8004780 <UART_SetConfig+0x330>)
 80044c2:	fba7 3505 	umull	r3, r5, r7, r5
 80044c6:	096d      	lsrs	r5, r5, #5
 80044c8:	012e      	lsls	r6, r5, #4
 80044ca:	f7ff fc09 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 80044ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044d6:	6865      	ldr	r5, [r4, #4]
 80044d8:	00ad      	lsls	r5, r5, #2
 80044da:	fbb0 f9f5 	udiv	r9, r0, r5
 80044de:	f7ff fbff 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 80044e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80044ea:	6865      	ldr	r5, [r4, #4]
 80044ec:	00ad      	lsls	r5, r5, #2
 80044ee:	fbb0 f5f5 	udiv	r5, r0, r5
 80044f2:	fba7 3505 	umull	r3, r5, r7, r5
 80044f6:	096d      	lsrs	r5, r5, #5
 80044f8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80044fc:	fb08 9515 	mls	r5, r8, r5, r9
 8004500:	012d      	lsls	r5, r5, #4
 8004502:	3532      	adds	r5, #50	; 0x32
 8004504:	fba7 3505 	umull	r3, r5, r7, r5
 8004508:	096d      	lsrs	r5, r5, #5
 800450a:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800450e:	4435      	add	r5, r6
 8004510:	f7ff fbe6 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8004514:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004518:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800451c:	6866      	ldr	r6, [r4, #4]
 800451e:	00b6      	lsls	r6, r6, #2
 8004520:	fbb0 f6f6 	udiv	r6, r0, r6
 8004524:	f7ff fbdc 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8004528:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800452c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004530:	6863      	ldr	r3, [r4, #4]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	fbb0 f0f3 	udiv	r0, r0, r3
 8004538:	fba7 3000 	umull	r3, r0, r7, r0
 800453c:	0940      	lsrs	r0, r0, #5
 800453e:	fb08 6810 	mls	r8, r8, r0, r6
 8004542:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8004546:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800454a:	fba7 3708 	umull	r3, r7, r7, r8
 800454e:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	442f      	add	r7, r5
 8004556:	609f      	str	r7, [r3, #8]
    }
  }
}
 8004558:	e10d      	b.n	8004776 <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800455a:	6803      	ldr	r3, [r0, #0]
 800455c:	4a87      	ldr	r2, [pc, #540]	; (800477c <UART_SetConfig+0x32c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d05b      	beq.n	800461a <UART_SetConfig+0x1ca>
 8004562:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004566:	4293      	cmp	r3, r2
 8004568:	d057      	beq.n	800461a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800456a:	f7ff fbb9 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 800456e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004572:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004576:	6865      	ldr	r5, [r4, #4]
 8004578:	006d      	lsls	r5, r5, #1
 800457a:	fbb0 f5f5 	udiv	r5, r0, r5
 800457e:	4f80      	ldr	r7, [pc, #512]	; (8004780 <UART_SetConfig+0x330>)
 8004580:	fba7 3505 	umull	r3, r5, r7, r5
 8004584:	096d      	lsrs	r5, r5, #5
 8004586:	012e      	lsls	r6, r5, #4
 8004588:	f7ff fbaa 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 800458c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004590:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004594:	6865      	ldr	r5, [r4, #4]
 8004596:	006d      	lsls	r5, r5, #1
 8004598:	fbb0 f9f5 	udiv	r9, r0, r5
 800459c:	f7ff fba0 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 80045a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045a8:	6865      	ldr	r5, [r4, #4]
 80045aa:	006d      	lsls	r5, r5, #1
 80045ac:	fbb0 f5f5 	udiv	r5, r0, r5
 80045b0:	fba7 3505 	umull	r3, r5, r7, r5
 80045b4:	096d      	lsrs	r5, r5, #5
 80045b6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80045ba:	fb08 9515 	mls	r5, r8, r5, r9
 80045be:	00ed      	lsls	r5, r5, #3
 80045c0:	3532      	adds	r5, #50	; 0x32
 80045c2:	fba7 3505 	umull	r3, r5, r7, r5
 80045c6:	096d      	lsrs	r5, r5, #5
 80045c8:	006d      	lsls	r5, r5, #1
 80045ca:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80045ce:	4435      	add	r5, r6
 80045d0:	f7ff fb86 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 80045d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045dc:	6866      	ldr	r6, [r4, #4]
 80045de:	0076      	lsls	r6, r6, #1
 80045e0:	fbb0 f6f6 	udiv	r6, r0, r6
 80045e4:	f7ff fb7c 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 80045e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80045f0:	6863      	ldr	r3, [r4, #4]
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80045f8:	fba7 2303 	umull	r2, r3, r7, r3
 80045fc:	095b      	lsrs	r3, r3, #5
 80045fe:	fb08 6813 	mls	r8, r8, r3, r6
 8004602:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8004606:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800460a:	fba7 3708 	umull	r3, r7, r7, r8
 800460e:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	442f      	add	r7, r5
 8004616:	609f      	str	r7, [r3, #8]
 8004618:	e0ad      	b.n	8004776 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800461a:	f7ff fb71 	bl	8003d00 <HAL_RCC_GetPCLK2Freq>
 800461e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004622:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004626:	6865      	ldr	r5, [r4, #4]
 8004628:	006d      	lsls	r5, r5, #1
 800462a:	fbb0 f5f5 	udiv	r5, r0, r5
 800462e:	4f54      	ldr	r7, [pc, #336]	; (8004780 <UART_SetConfig+0x330>)
 8004630:	fba7 3505 	umull	r3, r5, r7, r5
 8004634:	096d      	lsrs	r5, r5, #5
 8004636:	012e      	lsls	r6, r5, #4
 8004638:	f7ff fb62 	bl	8003d00 <HAL_RCC_GetPCLK2Freq>
 800463c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004640:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004644:	6865      	ldr	r5, [r4, #4]
 8004646:	006d      	lsls	r5, r5, #1
 8004648:	fbb0 f9f5 	udiv	r9, r0, r5
 800464c:	f7ff fb58 	bl	8003d00 <HAL_RCC_GetPCLK2Freq>
 8004650:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004654:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004658:	6865      	ldr	r5, [r4, #4]
 800465a:	006d      	lsls	r5, r5, #1
 800465c:	fbb0 f5f5 	udiv	r5, r0, r5
 8004660:	fba7 3505 	umull	r3, r5, r7, r5
 8004664:	096d      	lsrs	r5, r5, #5
 8004666:	f04f 0864 	mov.w	r8, #100	; 0x64
 800466a:	fb08 9515 	mls	r5, r8, r5, r9
 800466e:	00ed      	lsls	r5, r5, #3
 8004670:	3532      	adds	r5, #50	; 0x32
 8004672:	fba7 3505 	umull	r3, r5, r7, r5
 8004676:	096d      	lsrs	r5, r5, #5
 8004678:	006d      	lsls	r5, r5, #1
 800467a:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800467e:	4435      	add	r5, r6
 8004680:	f7ff fb3e 	bl	8003d00 <HAL_RCC_GetPCLK2Freq>
 8004684:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004688:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800468c:	6866      	ldr	r6, [r4, #4]
 800468e:	0076      	lsls	r6, r6, #1
 8004690:	fbb0 f6f6 	udiv	r6, r0, r6
 8004694:	f7ff fb34 	bl	8003d00 <HAL_RCC_GetPCLK2Freq>
 8004698:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800469c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80046a0:	6863      	ldr	r3, [r4, #4]
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80046a8:	fba7 2303 	umull	r2, r3, r7, r3
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	fb08 6813 	mls	r8, r8, r3, r6
 80046b2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80046b6:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80046ba:	fba7 3708 	umull	r3, r7, r7, r8
 80046be:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	442f      	add	r7, r5
 80046c6:	609f      	str	r7, [r3, #8]
 80046c8:	e055      	b.n	8004776 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80046ca:	f7ff fb19 	bl	8003d00 <HAL_RCC_GetPCLK2Freq>
 80046ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80046d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80046d6:	6865      	ldr	r5, [r4, #4]
 80046d8:	00ad      	lsls	r5, r5, #2
 80046da:	fbb0 f5f5 	udiv	r5, r0, r5
 80046de:	4f28      	ldr	r7, [pc, #160]	; (8004780 <UART_SetConfig+0x330>)
 80046e0:	fba7 3505 	umull	r3, r5, r7, r5
 80046e4:	096d      	lsrs	r5, r5, #5
 80046e6:	012e      	lsls	r6, r5, #4
 80046e8:	f7ff fb0a 	bl	8003d00 <HAL_RCC_GetPCLK2Freq>
 80046ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80046f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80046f4:	6865      	ldr	r5, [r4, #4]
 80046f6:	00ad      	lsls	r5, r5, #2
 80046f8:	fbb0 f9f5 	udiv	r9, r0, r5
 80046fc:	f7ff fb00 	bl	8003d00 <HAL_RCC_GetPCLK2Freq>
 8004700:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004704:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004708:	6865      	ldr	r5, [r4, #4]
 800470a:	00ad      	lsls	r5, r5, #2
 800470c:	fbb0 f5f5 	udiv	r5, r0, r5
 8004710:	fba7 3505 	umull	r3, r5, r7, r5
 8004714:	096d      	lsrs	r5, r5, #5
 8004716:	f04f 0864 	mov.w	r8, #100	; 0x64
 800471a:	fb08 9515 	mls	r5, r8, r5, r9
 800471e:	012d      	lsls	r5, r5, #4
 8004720:	3532      	adds	r5, #50	; 0x32
 8004722:	fba7 3505 	umull	r3, r5, r7, r5
 8004726:	096d      	lsrs	r5, r5, #5
 8004728:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800472c:	4435      	add	r5, r6
 800472e:	f7ff fae7 	bl	8003d00 <HAL_RCC_GetPCLK2Freq>
 8004732:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004736:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800473a:	6866      	ldr	r6, [r4, #4]
 800473c:	00b6      	lsls	r6, r6, #2
 800473e:	fbb0 f6f6 	udiv	r6, r0, r6
 8004742:	f7ff fadd 	bl	8003d00 <HAL_RCC_GetPCLK2Freq>
 8004746:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800474a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800474e:	6863      	ldr	r3, [r4, #4]
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	fbb0 f0f3 	udiv	r0, r0, r3
 8004756:	fba7 3000 	umull	r3, r0, r7, r0
 800475a:	0940      	lsrs	r0, r0, #5
 800475c:	fb08 6810 	mls	r8, r8, r0, r6
 8004760:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8004764:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8004768:	fba7 3708 	umull	r3, r7, r7, r8
 800476c:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	442f      	add	r7, r5
 8004774:	609f      	str	r7, [r3, #8]
}
 8004776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800477a:	bf00      	nop
 800477c:	40011000 	.word	0x40011000
 8004780:	51eb851f 	.word	0x51eb851f

08004784 <UART_WaitOnFlagUntilTimeout>:
{
 8004784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004788:	4605      	mov	r5, r0
 800478a:	460f      	mov	r7, r1
 800478c:	4616      	mov	r6, r2
 800478e:	4698      	mov	r8, r3
 8004790:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004792:	682b      	ldr	r3, [r5, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	ea37 0303 	bics.w	r3, r7, r3
 800479a:	bf0c      	ite	eq
 800479c:	2301      	moveq	r3, #1
 800479e:	2300      	movne	r3, #0
 80047a0:	42b3      	cmp	r3, r6
 80047a2:	d11d      	bne.n	80047e0 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80047a4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80047a8:	d0f3      	beq.n	8004792 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047aa:	b12c      	cbz	r4, 80047b8 <UART_WaitOnFlagUntilTimeout+0x34>
 80047ac:	f7fe f882 	bl	80028b4 <HAL_GetTick>
 80047b0:	eba0 0008 	sub.w	r0, r0, r8
 80047b4:	42a0      	cmp	r0, r4
 80047b6:	d9ec      	bls.n	8004792 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047b8:	682a      	ldr	r2, [r5, #0]
 80047ba:	68d3      	ldr	r3, [r2, #12]
 80047bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047c0:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c2:	682a      	ldr	r2, [r5, #0]
 80047c4:	6953      	ldr	r3, [r2, #20]
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80047cc:	2320      	movs	r3, #32
 80047ce:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80047d2:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80047d6:	2300      	movs	r3, #0
 80047d8:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 80047dc:	2003      	movs	r0, #3
 80047de:	e000      	b.n	80047e2 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 80047e0:	2000      	movs	r0, #0
}
 80047e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080047e6 <HAL_UART_Init>:
  if (huart == NULL)
 80047e6:	b358      	cbz	r0, 8004840 <HAL_UART_Init+0x5a>
{
 80047e8:	b510      	push	{r4, lr}
 80047ea:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80047ec:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80047f0:	b30b      	cbz	r3, 8004836 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80047f2:	2324      	movs	r3, #36	; 0x24
 80047f4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80047f8:	6822      	ldr	r2, [r4, #0]
 80047fa:	68d3      	ldr	r3, [r2, #12]
 80047fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004800:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004802:	4620      	mov	r0, r4
 8004804:	f7ff fe24 	bl	8004450 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004808:	6822      	ldr	r2, [r4, #0]
 800480a:	6913      	ldr	r3, [r2, #16]
 800480c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004810:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004812:	6822      	ldr	r2, [r4, #0]
 8004814:	6953      	ldr	r3, [r2, #20]
 8004816:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800481a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800481c:	6822      	ldr	r2, [r4, #0]
 800481e:	68d3      	ldr	r3, [r2, #12]
 8004820:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004824:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004826:	2000      	movs	r0, #0
 8004828:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800482a:	2320      	movs	r3, #32
 800482c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004830:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8004834:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004836:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800483a:	f000 fc9f 	bl	800517c <HAL_UART_MspInit>
 800483e:	e7d8      	b.n	80047f2 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004840:	2001      	movs	r0, #1
}
 8004842:	4770      	bx	lr

08004844 <HAL_UART_Transmit>:
{
 8004844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800484c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b20      	cmp	r3, #32
 8004854:	d155      	bne.n	8004902 <HAL_UART_Transmit+0xbe>
 8004856:	4604      	mov	r4, r0
 8004858:	460d      	mov	r5, r1
 800485a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800485c:	2900      	cmp	r1, #0
 800485e:	d055      	beq.n	800490c <HAL_UART_Transmit+0xc8>
 8004860:	2a00      	cmp	r2, #0
 8004862:	d055      	beq.n	8004910 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8004864:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004868:	2b01      	cmp	r3, #1
 800486a:	d053      	beq.n	8004914 <HAL_UART_Transmit+0xd0>
 800486c:	2301      	movs	r3, #1
 800486e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004872:	2300      	movs	r3, #0
 8004874:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004876:	2321      	movs	r3, #33	; 0x21
 8004878:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800487c:	f7fe f81a 	bl	80028b4 <HAL_GetTick>
 8004880:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8004882:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8004886:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800488a:	e010      	b.n	80048ae <HAL_UART_Transmit+0x6a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800488c:	9600      	str	r6, [sp, #0]
 800488e:	463b      	mov	r3, r7
 8004890:	2200      	movs	r2, #0
 8004892:	2180      	movs	r1, #128	; 0x80
 8004894:	4620      	mov	r0, r4
 8004896:	f7ff ff75 	bl	8004784 <UART_WaitOnFlagUntilTimeout>
 800489a:	2800      	cmp	r0, #0
 800489c:	d13c      	bne.n	8004918 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800489e:	882b      	ldrh	r3, [r5, #0]
 80048a0:	6822      	ldr	r2, [r4, #0]
 80048a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a6:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80048a8:	6923      	ldr	r3, [r4, #16]
 80048aa:	b9c3      	cbnz	r3, 80048de <HAL_UART_Transmit+0x9a>
          pData += 2U;
 80048ac:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 80048ae:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	b1b3      	cbz	r3, 80048e2 <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 80048b4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048bc:	68a3      	ldr	r3, [r4, #8]
 80048be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c2:	d0e3      	beq.n	800488c <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048c4:	9600      	str	r6, [sp, #0]
 80048c6:	463b      	mov	r3, r7
 80048c8:	2200      	movs	r2, #0
 80048ca:	2180      	movs	r1, #128	; 0x80
 80048cc:	4620      	mov	r0, r4
 80048ce:	f7ff ff59 	bl	8004784 <UART_WaitOnFlagUntilTimeout>
 80048d2:	bb18      	cbnz	r0, 800491c <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80048d4:	782a      	ldrb	r2, [r5, #0]
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	605a      	str	r2, [r3, #4]
 80048da:	3501      	adds	r5, #1
 80048dc:	e7e7      	b.n	80048ae <HAL_UART_Transmit+0x6a>
          pData += 1U;
 80048de:	3501      	adds	r5, #1
 80048e0:	e7e5      	b.n	80048ae <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048e2:	9600      	str	r6, [sp, #0]
 80048e4:	463b      	mov	r3, r7
 80048e6:	2200      	movs	r2, #0
 80048e8:	2140      	movs	r1, #64	; 0x40
 80048ea:	4620      	mov	r0, r4
 80048ec:	f7ff ff4a 	bl	8004784 <UART_WaitOnFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	b9a8      	cbnz	r0, 8004920 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 80048f4:	2220      	movs	r2, #32
 80048f6:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80048fa:	2200      	movs	r2, #0
 80048fc:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8004900:	e000      	b.n	8004904 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8004902:	2302      	movs	r3, #2
}
 8004904:	4618      	mov	r0, r3
 8004906:	b002      	add	sp, #8
 8004908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e7f9      	b.n	8004904 <HAL_UART_Transmit+0xc0>
 8004910:	2301      	movs	r3, #1
 8004912:	e7f7      	b.n	8004904 <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8004914:	2302      	movs	r3, #2
 8004916:	e7f5      	b.n	8004904 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e7f3      	b.n	8004904 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e7f1      	b.n	8004904 <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e7ef      	b.n	8004904 <HAL_UART_Transmit+0xc0>

08004924 <arm_add_f32>:
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8004924:	e00b      	b.n	800493e <arm_add_f32+0x1a>
  {
    /* C = A + B */

    /* Add and store result in destination buffer. */
    *pDst++ = (*pSrcA++) + (*pSrcB++);
 8004926:	edd0 7a00 	vldr	s15, [r0]
 800492a:	ed91 7a00 	vldr	s14, [r1]
 800492e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004932:	edc2 7a00 	vstr	s15, [r2]

    /* Decrement loop counter */
    blkCnt--;
 8004936:	3b01      	subs	r3, #1
    *pDst++ = (*pSrcA++) + (*pSrcB++);
 8004938:	3204      	adds	r2, #4
 800493a:	3104      	adds	r1, #4
 800493c:	3004      	adds	r0, #4
  while (blkCnt > 0U)
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f1      	bne.n	8004926 <arm_add_f32+0x2>
  }

}
 8004942:	4770      	bx	lr

08004944 <arm_mult_f32>:
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8004944:	e00b      	b.n	800495e <arm_mult_f32+0x1a>
  {
    /* C = A * B */

    /* Multiply input and store result in destination buffer. */
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 8004946:	edd0 7a00 	vldr	s15, [r0]
 800494a:	ed91 7a00 	vldr	s14, [r1]
 800494e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004952:	edc2 7a00 	vstr	s15, [r2]

    /* Decrement loop counter */
    blkCnt--;
 8004956:	3b01      	subs	r3, #1
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 8004958:	3204      	adds	r2, #4
 800495a:	3104      	adds	r1, #4
 800495c:	3004      	adds	r0, #4
  while (blkCnt > 0U)
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f1      	bne.n	8004946 <arm_mult_f32+0x2>
  }

}
 8004962:	4770      	bx	lr

08004964 <arm_pid_init_f32>:
void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8004964:	edd0 7a06 	vldr	s15, [r0, #24]
 8004968:	ed90 7a07 	vldr	s14, [r0, #28]
 800496c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004970:	edd0 6a08 	vldr	s13, [r0, #32]
 8004974:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004978:	ed80 7a00 	vstr	s14, [r0]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 800497c:	eef1 7a67 	vneg.f32	s15, s15
 8004980:	ee36 7aa6 	vadd.f32	s14, s13, s13
 8004984:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004988:	edc0 7a01 	vstr	s15, [r0, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800498c:	edc0 6a02 	vstr	s13, [r0, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8004990:	b901      	cbnz	r1, 8004994 <arm_pid_init_f32+0x30>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
  }

}
 8004992:	4770      	bx	lr
    memset(S->state, 0, 3U * sizeof(float32_t));
 8004994:	2300      	movs	r3, #0
 8004996:	60c3      	str	r3, [r0, #12]
 8004998:	6103      	str	r3, [r0, #16]
 800499a:	6143      	str	r3, [r0, #20]
}
 800499c:	e7f9      	b.n	8004992 <arm_pid_init_f32+0x2e>

0800499e <arm_sub_f32>:
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 800499e:	e00b      	b.n	80049b8 <arm_sub_f32+0x1a>
  {
    /* C = A - B */

    /* Subtract and store result in destination buffer. */
    *pDst++ = (*pSrcA++) - (*pSrcB++);
 80049a0:	edd0 7a00 	vldr	s15, [r0]
 80049a4:	ed91 7a00 	vldr	s14, [r1]
 80049a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049ac:	edc2 7a00 	vstr	s15, [r2]

    /* Decrement loop counter */
    blkCnt--;
 80049b0:	3b01      	subs	r3, #1
    *pDst++ = (*pSrcA++) - (*pSrcB++);
 80049b2:	3204      	adds	r2, #4
 80049b4:	3104      	adds	r1, #4
 80049b6:	3004      	adds	r0, #4
  while (blkCnt > 0U)
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1f1      	bne.n	80049a0 <arm_sub_f32+0x2>
  }

}
 80049bc:	4770      	bx	lr
	...

080049c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80049c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049c4:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c6:	2400      	movs	r4, #0
 80049c8:	9405      	str	r4, [sp, #20]
 80049ca:	9406      	str	r4, [sp, #24]
 80049cc:	9407      	str	r4, [sp, #28]
 80049ce:	9408      	str	r4, [sp, #32]
 80049d0:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049d2:	9401      	str	r4, [sp, #4]
 80049d4:	4b3f      	ldr	r3, [pc, #252]	; (8004ad4 <MX_GPIO_Init+0x114>)
 80049d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049d8:	f042 0204 	orr.w	r2, r2, #4
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
 80049de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049e0:	f002 0204 	and.w	r2, r2, #4
 80049e4:	9201      	str	r2, [sp, #4]
 80049e6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049e8:	9402      	str	r4, [sp, #8]
 80049ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049f0:	631a      	str	r2, [r3, #48]	; 0x30
 80049f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049f4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80049f8:	9202      	str	r2, [sp, #8]
 80049fa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049fc:	9403      	str	r4, [sp, #12]
 80049fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a00:	f042 0201 	orr.w	r2, r2, #1
 8004a04:	631a      	str	r2, [r3, #48]	; 0x30
 8004a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a08:	f002 0201 	and.w	r2, r2, #1
 8004a0c:	9203      	str	r2, [sp, #12]
 8004a0e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a10:	9404      	str	r4, [sp, #16]
 8004a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a14:	f042 0202 	orr.w	r2, r2, #2
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	9304      	str	r3, [sp, #16]
 8004a22:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(P37_GPIO_Port, P37_Pin, GPIO_PIN_SET);
 8004a24:	4f2c      	ldr	r7, [pc, #176]	; (8004ad8 <MX_GPIO_Init+0x118>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	2108      	movs	r1, #8
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	f7fe f898 	bl	8002b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P27_Pin P35_Pin */
  GPIO_InitStruct.Pin = P27_Pin|P35_Pin;
 8004a30:	f248 0304 	movw	r3, #32772	; 0x8004
 8004a34:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004a36:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004ae0 <MX_GPIO_Init+0x120>
 8004a3a:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a3e:	2601      	movs	r6, #1
 8004a40:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a42:	a905      	add	r1, sp, #20
 8004a44:	4638      	mov	r0, r7
 8004a46:	f7fd ffb9 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : P37_Pin */
  GPIO_InitStruct.Pin = P37_Pin;
 8004a4a:	2508      	movs	r5, #8
 8004a4c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a4e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a50:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a52:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(P37_GPIO_Port, &GPIO_InitStruct);
 8004a54:	a905      	add	r1, sp, #20
 8004a56:	4638      	mov	r0, r7
 8004a58:	f7fd ffb0 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin D13_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|D13_Pin;
 8004a5c:	2333      	movs	r3, #51	; 0x33
 8004a5e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004a60:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a64:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a66:	a905      	add	r1, sp, #20
 8004a68:	481c      	ldr	r0, [pc, #112]	; (8004adc <MX_GPIO_Init+0x11c>)
 8004a6a:	f7fd ffa7 	bl	80029bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004a6e:	4622      	mov	r2, r4
 8004a70:	4621      	mov	r1, r4
 8004a72:	2006      	movs	r0, #6
 8004a74:	f7fd ff4a 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004a78:	2006      	movs	r0, #6
 8004a7a:	f7fd ff7b 	bl	8002974 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8004a7e:	4622      	mov	r2, r4
 8004a80:	4621      	mov	r1, r4
 8004a82:	2007      	movs	r0, #7
 8004a84:	f7fd ff42 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004a88:	2007      	movs	r0, #7
 8004a8a:	f7fd ff73 	bl	8002974 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004a8e:	4622      	mov	r2, r4
 8004a90:	4621      	mov	r1, r4
 8004a92:	4628      	mov	r0, r5
 8004a94:	f7fd ff3a 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f7fd ff6b 	bl	8002974 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	200a      	movs	r0, #10
 8004aa4:	f7fd ff32 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004aa8:	200a      	movs	r0, #10
 8004aaa:	f7fd ff63 	bl	8002974 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004aae:	4622      	mov	r2, r4
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	2017      	movs	r0, #23
 8004ab4:	f7fd ff2a 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004ab8:	2017      	movs	r0, #23
 8004aba:	f7fd ff5b 	bl	8002974 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004abe:	4622      	mov	r2, r4
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	2028      	movs	r0, #40	; 0x28
 8004ac4:	f7fd ff22 	bl	800290c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004ac8:	2028      	movs	r0, #40	; 0x28
 8004aca:	f7fd ff53 	bl	8002974 <HAL_NVIC_EnableIRQ>

}
 8004ace:	b00a      	add	sp, #40	; 0x28
 8004ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad4:	40023800 	.word	0x40023800
 8004ad8:	40020800 	.word	0x40020800
 8004adc:	40020000 	.word	0x40020000
 8004ae0:	10210000 	.word	0x10210000

08004ae4 <MX_USART2_UART_Init>:
{
 8004ae4:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8004ae6:	4808      	ldr	r0, [pc, #32]	; (8004b08 <MX_USART2_UART_Init+0x24>)
 8004ae8:	4b08      	ldr	r3, [pc, #32]	; (8004b0c <MX_USART2_UART_Init+0x28>)
 8004aea:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8004aec:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004af0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004af2:	2300      	movs	r3, #0
 8004af4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004af6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004af8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004afa:	220c      	movs	r2, #12
 8004afc:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004afe:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b00:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004b02:	f7ff fe70 	bl	80047e6 <HAL_UART_Init>
}
 8004b06:	bd08      	pop	{r3, pc}
 8004b08:	20000480 	.word	0x20000480
 8004b0c:	40004400 	.word	0x40004400

08004b10 <MX_I2C2_Init>:
{
 8004b10:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8004b12:	4809      	ldr	r0, [pc, #36]	; (8004b38 <MX_I2C2_Init+0x28>)
 8004b14:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <MX_I2C2_Init+0x2c>)
 8004b16:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8004b18:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <MX_I2C2_Init+0x30>)
 8004b1a:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004b20:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b26:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b28:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004b2a:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b2c:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b2e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004b30:	f7fe fa38 	bl	8002fa4 <HAL_I2C_Init>
}
 8004b34:	bd08      	pop	{r3, pc}
 8004b36:	bf00      	nop
 8004b38:	200002e8 	.word	0x200002e8
 8004b3c:	40005800 	.word	0x40005800
 8004b40:	00061a80 	.word	0x00061a80

08004b44 <MX_TIM3_Init>:
{
 8004b44:	b530      	push	{r4, r5, lr}
 8004b46:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b48:	2400      	movs	r4, #0
 8004b4a:	9402      	str	r4, [sp, #8]
 8004b4c:	9403      	str	r4, [sp, #12]
 8004b4e:	9404      	str	r4, [sp, #16]
 8004b50:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b52:	9400      	str	r4, [sp, #0]
 8004b54:	9401      	str	r4, [sp, #4]
  htim3.Instance = TIM3;
 8004b56:	4d0f      	ldr	r5, [pc, #60]	; (8004b94 <MX_TIM3_Init+0x50>)
 8004b58:	4b0f      	ldr	r3, [pc, #60]	; (8004b98 <MX_TIM3_Init+0x54>)
 8004b5a:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 2000;
 8004b5c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004b60:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b62:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 65535;
 8004b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b68:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b6a:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b6c:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004b6e:	4628      	mov	r0, r5
 8004b70:	f7ff faac 	bl	80040cc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b78:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004b7a:	a902      	add	r1, sp, #8
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	f7ff fb83 	bl	8004288 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b82:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b84:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b86:	4669      	mov	r1, sp
 8004b88:	4628      	mov	r0, r5
 8004b8a:	f7ff fc3b 	bl	8004404 <HAL_TIMEx_MasterConfigSynchronization>
}
 8004b8e:	b007      	add	sp, #28
 8004b90:	bd30      	pop	{r4, r5, pc}
 8004b92:	bf00      	nop
 8004b94:	200003f0 	.word	0x200003f0
 8004b98:	40000400 	.word	0x40000400

08004b9c <MX_TIM4_Init>:
{
 8004b9c:	b570      	push	{r4, r5, r6, lr}
 8004b9e:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ba0:	2400      	movs	r4, #0
 8004ba2:	940a      	str	r4, [sp, #40]	; 0x28
 8004ba4:	940b      	str	r4, [sp, #44]	; 0x2c
 8004ba6:	940c      	str	r4, [sp, #48]	; 0x30
 8004ba8:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004baa:	9408      	str	r4, [sp, #32]
 8004bac:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bae:	9401      	str	r4, [sp, #4]
 8004bb0:	9402      	str	r4, [sp, #8]
 8004bb2:	9403      	str	r4, [sp, #12]
 8004bb4:	9404      	str	r4, [sp, #16]
 8004bb6:	9405      	str	r4, [sp, #20]
 8004bb8:	9406      	str	r4, [sp, #24]
 8004bba:	9407      	str	r4, [sp, #28]
  htim4.Instance = TIM4;
 8004bbc:	4d20      	ldr	r5, [pc, #128]	; (8004c40 <MX_TIM4_Init+0xa4>)
 8004bbe:	4b21      	ldr	r3, [pc, #132]	; (8004c44 <MX_TIM4_Init+0xa8>)
 8004bc0:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 9;
 8004bc2:	2309      	movs	r3, #9
 8004bc4:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bc6:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 20000;
 8004bc8:	f644 6320 	movw	r3, #20000	; 0x4e20
 8004bcc:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bce:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bd0:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	f7ff fa7a 	bl	80040cc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bdc:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004bde:	a90a      	add	r1, sp, #40	; 0x28
 8004be0:	4628      	mov	r0, r5
 8004be2:	f7ff fb51 	bl	8004288 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004be6:	4628      	mov	r0, r5
 8004be8:	f7ff fa89 	bl	80040fe <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bec:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bee:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004bf0:	a908      	add	r1, sp, #32
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	f7ff fc06 	bl	8004404 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004bf8:	2360      	movs	r3, #96	; 0x60
 8004bfa:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8004bfc:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004bfe:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004c00:	2604      	movs	r6, #4
 8004c02:	9605      	str	r6, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c04:	4622      	mov	r2, r4
 8004c06:	eb0d 0106 	add.w	r1, sp, r6
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f7ff fac2 	bl	8004194 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004c10:	4632      	mov	r2, r6
 8004c12:	eb0d 0106 	add.w	r1, sp, r6
 8004c16:	4628      	mov	r0, r5
 8004c18:	f7ff fabc 	bl	8004194 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c1c:	2208      	movs	r2, #8
 8004c1e:	eb0d 0106 	add.w	r1, sp, r6
 8004c22:	4628      	mov	r0, r5
 8004c24:	f7ff fab6 	bl	8004194 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c28:	220c      	movs	r2, #12
 8004c2a:	eb0d 0106 	add.w	r1, sp, r6
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f7ff fab0 	bl	8004194 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8004c34:	4628      	mov	r0, r5
 8004c36:	f000 fa73 	bl	8005120 <HAL_TIM_MspPostInit>
}
 8004c3a:	b00e      	add	sp, #56	; 0x38
 8004c3c:	bd70      	pop	{r4, r5, r6, pc}
 8004c3e:	bf00      	nop
 8004c40:	200003b0 	.word	0x200003b0
 8004c44:	40000800 	.word	0x40000800

08004c48 <SystemClock_Config>:
{
 8004c48:	b530      	push	{r4, r5, lr}
 8004c4a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c4c:	2230      	movs	r2, #48	; 0x30
 8004c4e:	2100      	movs	r1, #0
 8004c50:	a808      	add	r0, sp, #32
 8004c52:	f000 fbbd 	bl	80053d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c56:	2400      	movs	r4, #0
 8004c58:	9403      	str	r4, [sp, #12]
 8004c5a:	9404      	str	r4, [sp, #16]
 8004c5c:	9405      	str	r4, [sp, #20]
 8004c5e:	9406      	str	r4, [sp, #24]
 8004c60:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c62:	9401      	str	r4, [sp, #4]
 8004c64:	4b1a      	ldr	r3, [pc, #104]	; (8004cd0 <SystemClock_Config+0x88>)
 8004c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c6c:	641a      	str	r2, [r3, #64]	; 0x40
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c74:	9301      	str	r3, [sp, #4]
 8004c76:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c78:	9402      	str	r4, [sp, #8]
 8004c7a:	4b16      	ldr	r3, [pc, #88]	; (8004cd4 <SystemClock_Config+0x8c>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c8a:	9302      	str	r3, [sp, #8]
 8004c8c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004c8e:	2502      	movs	r5, #2
 8004c90:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c92:	2301      	movs	r3, #1
 8004c94:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c96:	2310      	movs	r3, #16
 8004c98:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c9a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004c9c:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004c9e:	2308      	movs	r3, #8
 8004ca0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004ca2:	2364      	movs	r3, #100	; 0x64
 8004ca4:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004ca6:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004ca8:	2304      	movs	r3, #4
 8004caa:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004cac:	a808      	add	r0, sp, #32
 8004cae:	f7fe fd2d 	bl	800370c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004cb2:	230f      	movs	r3, #15
 8004cb4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004cb6:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004cb8:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cbe:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004cc0:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004cc2:	2103      	movs	r1, #3
 8004cc4:	a803      	add	r0, sp, #12
 8004cc6:	f7fe ff59 	bl	8003b7c <HAL_RCC_ClockConfig>
}
 8004cca:	b015      	add	sp, #84	; 0x54
 8004ccc:	bd30      	pop	{r4, r5, pc}
 8004cce:	bf00      	nop
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	40007000 	.word	0x40007000

08004cd8 <PWM1_Set>:

}

//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 8004cd8:	4b01      	ldr	r3, [pc, #4]	; (8004ce0 <PWM1_Set+0x8>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6358      	str	r0, [r3, #52]	; 0x34
}
 8004cde:	4770      	bx	lr
 8004ce0:	200003b0 	.word	0x200003b0

08004ce4 <PWM2_Set>:

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 8004ce4:	4b01      	ldr	r3, [pc, #4]	; (8004cec <PWM2_Set+0x8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6398      	str	r0, [r3, #56]	; 0x38

}
 8004cea:	4770      	bx	lr
 8004cec:	200003b0 	.word	0x200003b0

08004cf0 <PWM3_Set>:

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 8004cf0:	4b01      	ldr	r3, [pc, #4]	; (8004cf8 <PWM3_Set+0x8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8004cf6:	4770      	bx	lr
 8004cf8:	200003b0 	.word	0x200003b0

08004cfc <PWM4_Set>:

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 8004cfc:	4b01      	ldr	r3, [pc, #4]	; (8004d04 <PWM4_Set+0x8>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6418      	str	r0, [r3, #64]	; 0x40
}
 8004d02:	4770      	bx	lr
 8004d04:	200003b0 	.word	0x200003b0

08004d08 <main>:
{
 8004d08:	b508      	push	{r3, lr}
  HAL_Init();
 8004d0a:	f7fd fdad 	bl	8002868 <HAL_Init>
  SystemClock_Config();
 8004d0e:	f7ff ff9b 	bl	8004c48 <SystemClock_Config>
  MX_GPIO_Init();
 8004d12:	f7ff fe55 	bl	80049c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004d16:	f7ff fee5 	bl	8004ae4 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8004d1a:	f7ff fef9 	bl	8004b10 <MX_I2C2_Init>
  MX_TIM3_Init();
 8004d1e:	f7ff ff11 	bl	8004b44 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004d22:	f7ff ff3b 	bl	8004b9c <MX_TIM4_Init>
	if (imu_init(&hi2c2) == IMU_SUCCESS) {
 8004d26:	481c      	ldr	r0, [pc, #112]	; (8004d98 <main+0x90>)
 8004d28:	f7fc f94e 	bl	8000fc8 <imu_init>
 8004d2c:	b380      	cbz	r0, 8004d90 <main+0x88>
	HAL_TIM_Base_Start_IT(&htim3);
 8004d2e:	481b      	ldr	r0, [pc, #108]	; (8004d9c <main+0x94>)
 8004d30:	f7ff f8a9 	bl	8003e86 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 8004d34:	4c1a      	ldr	r4, [pc, #104]	; (8004da0 <main+0x98>)
 8004d36:	2100      	movs	r1, #0
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f7ff fb23 	bl	8004384 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8004d3e:	2104      	movs	r1, #4
 8004d40:	4620      	mov	r0, r4
 8004d42:	f7ff fb1f 	bl	8004384 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_3);
 8004d46:	2108      	movs	r1, #8
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f7ff fb1b 	bl	8004384 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4);
 8004d4e:	210c      	movs	r1, #12
 8004d50:	4620      	mov	r0, r4
 8004d52:	f7ff fb17 	bl	8004384 <HAL_TIM_PWM_Start_IT>
	PWM1_Set(ESC_MIN + 200);
 8004d56:	f240 50aa 	movw	r0, #1450	; 0x5aa
 8004d5a:	f7ff ffbd 	bl	8004cd8 <PWM1_Set>
	PWM2_Set(ESC_MIN + 200);
 8004d5e:	f240 50aa 	movw	r0, #1450	; 0x5aa
 8004d62:	f7ff ffbf 	bl	8004ce4 <PWM2_Set>
	PWM3_Set(ESC_MIN + 200);
 8004d66:	f240 50aa 	movw	r0, #1450	; 0x5aa
 8004d6a:	f7ff ffc1 	bl	8004cf0 <PWM3_Set>
	PWM4_Set(ESC_MIN + 200);
 8004d6e:	f240 50aa 	movw	r0, #1450	; 0x5aa
 8004d72:	f7ff ffc3 	bl	8004cfc <PWM4_Set>
	pid_pitch_gains.Kp = 20;
 8004d76:	480b      	ldr	r0, [pc, #44]	; (8004da4 <main+0x9c>)
 8004d78:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <main+0xa0>)
 8004d7a:	6183      	str	r3, [r0, #24]
	pid_pitch_gains.Ki = 0;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	61c3      	str	r3, [r0, #28]
	pid_pitch_gains.Kd = 0;
 8004d80:	6203      	str	r3, [r0, #32]
	arm_pid_init_f32(&pid_pitch_gains, 0);
 8004d82:	2100      	movs	r1, #0
 8004d84:	f7ff fdee 	bl	8004964 <arm_pid_init_f32>
		main_loop = 1;
 8004d88:	4b08      	ldr	r3, [pc, #32]	; (8004dac <main+0xa4>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	e7fb      	b.n	8004d88 <main+0x80>
		imu_calibrate();
 8004d90:	f7fc fed2 	bl	8001b38 <imu_calibrate>
 8004d94:	e7cb      	b.n	8004d2e <main+0x26>
 8004d96:	bf00      	nop
 8004d98:	200002e8 	.word	0x200002e8
 8004d9c:	200003f0 	.word	0x200003f0
 8004da0:	200003b0 	.word	0x200003b0
 8004da4:	20000430 	.word	0x20000430
 8004da8:	41a00000 	.word	0x41a00000
 8004dac:	200002b0 	.word	0x200002b0

08004db0 <pulse_complete_handler>:

//This is called when each PWM pulse finishes, ie the falling edge of each pulse
void pulse_complete_handler() {
 8004db0:	b538      	push	{r3, r4, r5, lr}

	//Only want this to happen in main loop - not during init sequence
	if (main_loop) {
 8004db2:	4b5a      	ldr	r3, [pc, #360]	; (8004f1c <pulse_complete_handler+0x16c>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b903      	cbnz	r3, 8004dba <pulse_complete_handler+0xa>
		PWM3_Set(esc3_total); //PWM3 = Back right, CCW
		PWM4_Set(esc4_total); //PWM4 = Front right, CW

	}

}
 8004db8:	bd38      	pop	{r3, r4, r5, pc}
		tim3_count = htim3.Instance->CNT; //read TIM3 counter value
 8004dba:	4d59      	ldr	r5, [pc, #356]	; (8004f20 <pulse_complete_handler+0x170>)
 8004dbc:	682b      	ldr	r3, [r5, #0]
 8004dbe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004dc0:	4c58      	ldr	r4, [pc, #352]	; (8004f24 <pulse_complete_handler+0x174>)
 8004dc2:	6020      	str	r0, [r4, #0]
		calc_RollPitchYaw(tim3_count);
 8004dc4:	f7fd f97c 	bl	80020c0 <calc_RollPitchYaw>
		imu_pitch = get_pitch();
 8004dc8:	f7fc f8c8 	bl	8000f5c <get_pitch>
 8004dcc:	4b56      	ldr	r3, [pc, #344]	; (8004f28 <pulse_complete_handler+0x178>)
 8004dce:	ed83 0a00 	vstr	s0, [r3]
		tim3_count = htim3.Instance->CNT;
 8004dd2:	682b      	ldr	r3, [r5, #0]
 8004dd4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004dd6:	6020      	str	r0, [r4, #0]
		pid_output_pitch = pid_calculate_pitch(imu_pitch, tim3_count);
 8004dd8:	f7fd fbf8 	bl	80025cc <pid_calculate_pitch>
 8004ddc:	4b53      	ldr	r3, [pc, #332]	; (8004f2c <pulse_complete_handler+0x17c>)
 8004dde:	ed83 0a00 	vstr	s0, [r3]
		esc1_total = ESC_MIN + esc1_throttle + pid_output_pitch;
 8004de2:	4b53      	ldr	r3, [pc, #332]	; (8004f30 <pulse_complete_handler+0x180>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004df2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dfa:	ee17 0a90 	vmov	r0, s15
 8004dfe:	4b4d      	ldr	r3, [pc, #308]	; (8004f34 <pulse_complete_handler+0x184>)
 8004e00:	edc3 7a00 	vstr	s15, [r3]
		esc2_total = ESC_MIN + esc2_throttle + pid_output_pitch;
 8004e04:	4b4c      	ldr	r3, [pc, #304]	; (8004f38 <pulse_complete_handler+0x188>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
 8004e0c:	ee07 3a90 	vmov	s15, r3
 8004e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e14:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004e18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e1c:	ee17 1a90 	vmov	r1, s15
 8004e20:	4b46      	ldr	r3, [pc, #280]	; (8004f3c <pulse_complete_handler+0x18c>)
 8004e22:	edc3 7a00 	vstr	s15, [r3]
		esc3_total = ESC_MIN + esc3_throttle - pid_output_pitch;
 8004e26:	4b46      	ldr	r3, [pc, #280]	; (8004f40 <pulse_complete_handler+0x190>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
 8004e2e:	ee07 3a90 	vmov	s15, r3
 8004e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e36:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004e3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e3e:	ee17 2a90 	vmov	r2, s15
 8004e42:	4b40      	ldr	r3, [pc, #256]	; (8004f44 <pulse_complete_handler+0x194>)
 8004e44:	edc3 7a00 	vstr	s15, [r3]
		esc4_total = ESC_MIN + esc4_throttle - pid_output_pitch;
 8004e48:	4b3f      	ldr	r3, [pc, #252]	; (8004f48 <pulse_complete_handler+0x198>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
 8004e50:	ee07 3a90 	vmov	s15, r3
 8004e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e58:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8004e5c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004e60:	ee17 3a90 	vmov	r3, s15
 8004e64:	4c39      	ldr	r4, [pc, #228]	; (8004f4c <pulse_complete_handler+0x19c>)
 8004e66:	edc4 7a00 	vstr	s15, [r4]
		if (esc1_total < ESC_MIN) {
 8004e6a:	f240 44e1 	movw	r4, #1249	; 0x4e1
 8004e6e:	42a0      	cmp	r0, r4
 8004e70:	dc03      	bgt.n	8004e7a <pulse_complete_handler+0xca>
			esc1_total = ESC_MIN;
 8004e72:	4830      	ldr	r0, [pc, #192]	; (8004f34 <pulse_complete_handler+0x184>)
 8004e74:	f240 44e2 	movw	r4, #1250	; 0x4e2
 8004e78:	6004      	str	r4, [r0, #0]
		if (esc1_total > ESC_MAX) {
 8004e7a:	482e      	ldr	r0, [pc, #184]	; (8004f34 <pulse_complete_handler+0x184>)
 8004e7c:	6804      	ldr	r4, [r0, #0]
 8004e7e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8004e82:	4284      	cmp	r4, r0
 8004e84:	dd03      	ble.n	8004e8e <pulse_complete_handler+0xde>
			esc1_total = ESC_MAX;
 8004e86:	482b      	ldr	r0, [pc, #172]	; (8004f34 <pulse_complete_handler+0x184>)
 8004e88:	f640 14c4 	movw	r4, #2500	; 0x9c4
 8004e8c:	6004      	str	r4, [r0, #0]
		if (esc2_total < ESC_MIN) {
 8004e8e:	f240 40e1 	movw	r0, #1249	; 0x4e1
 8004e92:	4281      	cmp	r1, r0
 8004e94:	dc03      	bgt.n	8004e9e <pulse_complete_handler+0xee>
			esc2_total = ESC_MIN;
 8004e96:	4929      	ldr	r1, [pc, #164]	; (8004f3c <pulse_complete_handler+0x18c>)
 8004e98:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8004e9c:	6008      	str	r0, [r1, #0]
		if (esc2_total > ESC_MAX) {
 8004e9e:	4927      	ldr	r1, [pc, #156]	; (8004f3c <pulse_complete_handler+0x18c>)
 8004ea0:	6808      	ldr	r0, [r1, #0]
 8004ea2:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8004ea6:	4288      	cmp	r0, r1
 8004ea8:	dd03      	ble.n	8004eb2 <pulse_complete_handler+0x102>
			esc2_total = ESC_MAX;
 8004eaa:	4924      	ldr	r1, [pc, #144]	; (8004f3c <pulse_complete_handler+0x18c>)
 8004eac:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8004eb0:	6008      	str	r0, [r1, #0]
		if (esc3_total < ESC_MIN) {
 8004eb2:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8004eb6:	428a      	cmp	r2, r1
 8004eb8:	dc03      	bgt.n	8004ec2 <pulse_complete_handler+0x112>
			esc3_total = ESC_MIN;
 8004eba:	4a22      	ldr	r2, [pc, #136]	; (8004f44 <pulse_complete_handler+0x194>)
 8004ebc:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8004ec0:	6011      	str	r1, [r2, #0]
		if (esc3_total > ESC_MAX) {
 8004ec2:	4a20      	ldr	r2, [pc, #128]	; (8004f44 <pulse_complete_handler+0x194>)
 8004ec4:	6811      	ldr	r1, [r2, #0]
 8004ec6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004eca:	4291      	cmp	r1, r2
 8004ecc:	dd03      	ble.n	8004ed6 <pulse_complete_handler+0x126>
			esc3_total = ESC_MAX;
 8004ece:	4a1d      	ldr	r2, [pc, #116]	; (8004f44 <pulse_complete_handler+0x194>)
 8004ed0:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8004ed4:	6011      	str	r1, [r2, #0]
		if (esc4_total < ESC_MIN) {
 8004ed6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8004eda:	4293      	cmp	r3, r2
 8004edc:	dc03      	bgt.n	8004ee6 <pulse_complete_handler+0x136>
			esc4_total = ESC_MIN;
 8004ede:	4b1b      	ldr	r3, [pc, #108]	; (8004f4c <pulse_complete_handler+0x19c>)
 8004ee0:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8004ee4:	601a      	str	r2, [r3, #0]
		if (esc4_total > ESC_MAX) {
 8004ee6:	4b19      	ldr	r3, [pc, #100]	; (8004f4c <pulse_complete_handler+0x19c>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	dd03      	ble.n	8004efa <pulse_complete_handler+0x14a>
			esc4_total = ESC_MAX;
 8004ef2:	4b16      	ldr	r3, [pc, #88]	; (8004f4c <pulse_complete_handler+0x19c>)
 8004ef4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004ef8:	601a      	str	r2, [r3, #0]
		PWM1_Set(esc1_total); //PWM1 = Back left, CW
 8004efa:	4b0e      	ldr	r3, [pc, #56]	; (8004f34 <pulse_complete_handler+0x184>)
 8004efc:	8818      	ldrh	r0, [r3, #0]
 8004efe:	f7ff feeb 	bl	8004cd8 <PWM1_Set>
		PWM2_Set(esc2_total); //PWM2 = Front left, CCW
 8004f02:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <pulse_complete_handler+0x18c>)
 8004f04:	8818      	ldrh	r0, [r3, #0]
 8004f06:	f7ff feed 	bl	8004ce4 <PWM2_Set>
		PWM3_Set(esc3_total); //PWM3 = Back right, CCW
 8004f0a:	4b0e      	ldr	r3, [pc, #56]	; (8004f44 <pulse_complete_handler+0x194>)
 8004f0c:	8818      	ldrh	r0, [r3, #0]
 8004f0e:	f7ff feef 	bl	8004cf0 <PWM3_Set>
		PWM4_Set(esc4_total); //PWM4 = Front right, CW
 8004f12:	4b0e      	ldr	r3, [pc, #56]	; (8004f4c <pulse_complete_handler+0x19c>)
 8004f14:	8818      	ldrh	r0, [r3, #0]
 8004f16:	f7ff fef1 	bl	8004cfc <PWM4_Set>
}
 8004f1a:	e74d      	b.n	8004db8 <pulse_complete_handler+0x8>
 8004f1c:	200002b0 	.word	0x200002b0
 8004f20:	200003f0 	.word	0x200003f0
 8004f24:	200002b8 	.word	0x200002b8
 8004f28:	2000047c 	.word	0x2000047c
 8004f2c:	200002b4 	.word	0x200002b4
 8004f30:	20000038 	.word	0x20000038
 8004f34:	200002a0 	.word	0x200002a0
 8004f38:	2000003c 	.word	0x2000003c
 8004f3c:	200002a4 	.word	0x200002a4
 8004f40:	20000040 	.word	0x20000040
 8004f44:	200002a8 	.word	0x200002a8
 8004f48:	20000044 	.word	0x20000044
 8004f4c:	200002ac 	.word	0x200002ac

08004f50 <__io_putchar>:
/*
 *	Some functions to allow the program to use printf,
 *	adapted from http://www.emcu.eu/how-to-implement-printf-for-send-message-via-usb-on-stm32-nucleo-boards-using-atollic/
 *
 */
int __io_putchar(int ch) {
 8004f50:	b510      	push	{r4, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	4604      	mov	r4, r0
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8004f56:	a902      	add	r1, sp, #8
 8004f58:	f801 0d04 	strb.w	r0, [r1, #-4]!

	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 8004f5c:	230a      	movs	r3, #10
 8004f5e:	2201      	movs	r2, #1
 8004f60:	4802      	ldr	r0, [pc, #8]	; (8004f6c <__io_putchar+0x1c>)
 8004f62:	f7ff fc6f 	bl	8004844 <HAL_UART_Transmit>
	return ch;
}
 8004f66:	4620      	mov	r0, r4
 8004f68:	b002      	add	sp, #8
 8004f6a:	bd10      	pop	{r4, pc}
 8004f6c:	20000480 	.word	0x20000480

08004f70 <_write>:

int _write(int file, char *ptr, int len) {
 8004f70:	b570      	push	{r4, r5, r6, lr}
 8004f72:	4616      	mov	r6, r2
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004f74:	2400      	movs	r4, #0
 8004f76:	e005      	b.n	8004f84 <_write+0x14>
		__io_putchar(*ptr++);
 8004f78:	1c4d      	adds	r5, r1, #1
 8004f7a:	7808      	ldrb	r0, [r1, #0]
 8004f7c:	f7ff ffe8 	bl	8004f50 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004f80:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8004f82:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004f84:	42b4      	cmp	r4, r6
 8004f86:	dbf7      	blt.n	8004f78 <_write+0x8>
	}
	return len;
}
 8004f88:	4630      	mov	r0, r6
 8004f8a:	bd70      	pop	{r4, r5, r6, pc}

08004f8c <HAL_GPIO_EXTI_Callback>:
	print_buffer_index = 0;
	/* Set another breakpoint here */
#endif
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004f8c:	b510      	push	{r4, lr}
 8004f8e:	4604      	mov	r4, r0

	if (GPIO_Pin == A0_Pin) {
 8004f90:	2801      	cmp	r0, #1
 8004f92:	d00b      	beq.n	8004fac <HAL_GPIO_EXTI_Callback+0x20>
		p_up();
	}
	if (GPIO_Pin == A1_Pin) {
 8004f94:	2c02      	cmp	r4, #2
 8004f96:	d00c      	beq.n	8004fb2 <HAL_GPIO_EXTI_Callback+0x26>
		p_down();
	}
	if (GPIO_Pin == A2_Pin) {
 8004f98:	2c10      	cmp	r4, #16
 8004f9a:	d00d      	beq.n	8004fb8 <HAL_GPIO_EXTI_Callback+0x2c>
		i_up();
	}
	if (GPIO_Pin == D13_Pin) {
 8004f9c:	2c20      	cmp	r4, #32
 8004f9e:	d00e      	beq.n	8004fbe <HAL_GPIO_EXTI_Callback+0x32>
		i_down();
	}

	if (GPIO_Pin == P35_Pin) {
 8004fa0:	2c04      	cmp	r4, #4
 8004fa2:	d00f      	beq.n	8004fc4 <HAL_GPIO_EXTI_Callback+0x38>
		d_up();
	}
	if (GPIO_Pin == P27_Pin) {
 8004fa4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8004fa8:	d00f      	beq.n	8004fca <HAL_GPIO_EXTI_Callback+0x3e>
		d_down();
	}

}
 8004faa:	bd10      	pop	{r4, pc}
		p_up();
 8004fac:	f7fd fbbe 	bl	800272c <p_up>
 8004fb0:	e7f0      	b.n	8004f94 <HAL_GPIO_EXTI_Callback+0x8>
		p_down();
 8004fb2:	f7fd fbc7 	bl	8002744 <p_down>
 8004fb6:	e7ef      	b.n	8004f98 <HAL_GPIO_EXTI_Callback+0xc>
		i_up();
 8004fb8:	f7fd fbd2 	bl	8002760 <i_up>
 8004fbc:	e7ee      	b.n	8004f9c <HAL_GPIO_EXTI_Callback+0x10>
		i_down();
 8004fbe:	f7fd fbe7 	bl	8002790 <i_down>
 8004fc2:	e7ed      	b.n	8004fa0 <HAL_GPIO_EXTI_Callback+0x14>
		d_up();
 8004fc4:	f7fd fbfc 	bl	80027c0 <d_up>
 8004fc8:	e7ec      	b.n	8004fa4 <HAL_GPIO_EXTI_Callback+0x18>
		d_down();
 8004fca:	f7fd fc11 	bl	80027f0 <d_down>
}
 8004fce:	e7ec      	b.n	8004faa <HAL_GPIO_EXTI_Callback+0x1e>

08004fd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fd0:	b500      	push	{lr}
 8004fd2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	9100      	str	r1, [sp, #0]
 8004fd8:	4b0c      	ldr	r3, [pc, #48]	; (800500c <HAL_MspInit+0x3c>)
 8004fda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fe0:	645a      	str	r2, [r3, #68]	; 0x44
 8004fe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fe4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004fe8:	9200      	str	r2, [sp, #0]
 8004fea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fec:	9101      	str	r1, [sp, #4]
 8004fee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ff0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004ff4:	641a      	str	r2, [r3, #64]	; 0x40
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005000:	2007      	movs	r0, #7
 8005002:	f7fd fc71 	bl	80028e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005006:	b003      	add	sp, #12
 8005008:	f85d fb04 	ldr.w	pc, [sp], #4
 800500c:	40023800 	.word	0x40023800

08005010 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005014:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005016:	2300      	movs	r3, #0
 8005018:	9303      	str	r3, [sp, #12]
 800501a:	9304      	str	r3, [sp, #16]
 800501c:	9305      	str	r3, [sp, #20]
 800501e:	9306      	str	r3, [sp, #24]
 8005020:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 8005022:	6802      	ldr	r2, [r0, #0]
 8005024:	4b1e      	ldr	r3, [pc, #120]	; (80050a0 <HAL_I2C_MspInit+0x90>)
 8005026:	429a      	cmp	r2, r3
 8005028:	d002      	beq.n	8005030 <HAL_I2C_MspInit+0x20>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800502a:	b009      	add	sp, #36	; 0x24
 800502c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005030:	2500      	movs	r5, #0
 8005032:	9501      	str	r5, [sp, #4]
 8005034:	4c1b      	ldr	r4, [pc, #108]	; (80050a4 <HAL_I2C_MspInit+0x94>)
 8005036:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005038:	f043 0302 	orr.w	r3, r3, #2
 800503c:	6323      	str	r3, [r4, #48]	; 0x30
 800503e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	9301      	str	r3, [sp, #4]
 8005046:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800504c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800504e:	f04f 0912 	mov.w	r9, #18
 8005052:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005056:	f04f 0801 	mov.w	r8, #1
 800505a:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800505e:	2703      	movs	r7, #3
 8005060:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005062:	2304      	movs	r3, #4
 8005064:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005066:	4e10      	ldr	r6, [pc, #64]	; (80050a8 <HAL_I2C_MspInit+0x98>)
 8005068:	a903      	add	r1, sp, #12
 800506a:	4630      	mov	r0, r6
 800506c:	f7fd fca6 	bl	80029bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005070:	2308      	movs	r3, #8
 8005072:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005074:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005078:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800507c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800507e:	2309      	movs	r3, #9
 8005080:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005082:	a903      	add	r1, sp, #12
 8005084:	4630      	mov	r0, r6
 8005086:	f7fd fc99 	bl	80029bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800508a:	9502      	str	r5, [sp, #8]
 800508c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800508e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005092:	6423      	str	r3, [r4, #64]	; 0x40
 8005094:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800509a:	9302      	str	r3, [sp, #8]
 800509c:	9b02      	ldr	r3, [sp, #8]
}
 800509e:	e7c4      	b.n	800502a <HAL_I2C_MspInit+0x1a>
 80050a0:	40005800 	.word	0x40005800
 80050a4:	40023800 	.word	0x40023800
 80050a8:	40020400 	.word	0x40020400

080050ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80050ac:	b500      	push	{lr}
 80050ae:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM3)
 80050b0:	6803      	ldr	r3, [r0, #0]
 80050b2:	4a18      	ldr	r2, [pc, #96]	; (8005114 <HAL_TIM_Base_MspInit+0x68>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d005      	beq.n	80050c4 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 80050b8:	4a17      	ldr	r2, [pc, #92]	; (8005118 <HAL_TIM_Base_MspInit+0x6c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d016      	beq.n	80050ec <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80050be:	b003      	add	sp, #12
 80050c0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 80050c4:	2100      	movs	r1, #0
 80050c6:	9100      	str	r1, [sp, #0]
 80050c8:	4b14      	ldr	r3, [pc, #80]	; (800511c <HAL_TIM_Base_MspInit+0x70>)
 80050ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050cc:	f042 0202 	orr.w	r2, r2, #2
 80050d0:	641a      	str	r2, [r3, #64]	; 0x40
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80050dc:	460a      	mov	r2, r1
 80050de:	201d      	movs	r0, #29
 80050e0:	f7fd fc14 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80050e4:	201d      	movs	r0, #29
 80050e6:	f7fd fc45 	bl	8002974 <HAL_NVIC_EnableIRQ>
 80050ea:	e7e8      	b.n	80050be <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80050ec:	2100      	movs	r1, #0
 80050ee:	9101      	str	r1, [sp, #4]
 80050f0:	4b0a      	ldr	r3, [pc, #40]	; (800511c <HAL_TIM_Base_MspInit+0x70>)
 80050f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050f4:	f042 0204 	orr.w	r2, r2, #4
 80050f8:	641a      	str	r2, [r3, #64]	; 0x40
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	9301      	str	r3, [sp, #4]
 8005102:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005104:	460a      	mov	r2, r1
 8005106:	201e      	movs	r0, #30
 8005108:	f7fd fc00 	bl	800290c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800510c:	201e      	movs	r0, #30
 800510e:	f7fd fc31 	bl	8002974 <HAL_NVIC_EnableIRQ>
}
 8005112:	e7d4      	b.n	80050be <HAL_TIM_Base_MspInit+0x12>
 8005114:	40000400 	.word	0x40000400
 8005118:	40000800 	.word	0x40000800
 800511c:	40023800 	.word	0x40023800

08005120 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005120:	b500      	push	{lr}
 8005122:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005124:	2300      	movs	r3, #0
 8005126:	9301      	str	r3, [sp, #4]
 8005128:	9302      	str	r3, [sp, #8]
 800512a:	9303      	str	r3, [sp, #12]
 800512c:	9304      	str	r3, [sp, #16]
 800512e:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 8005130:	6802      	ldr	r2, [r0, #0]
 8005132:	4b0f      	ldr	r3, [pc, #60]	; (8005170 <HAL_TIM_MspPostInit+0x50>)
 8005134:	429a      	cmp	r2, r3
 8005136:	d002      	beq.n	800513e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005138:	b007      	add	sp, #28
 800513a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800513e:	2300      	movs	r3, #0
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	4b0c      	ldr	r3, [pc, #48]	; (8005174 <HAL_TIM_MspPostInit+0x54>)
 8005144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005146:	f042 0202 	orr.w	r2, r2, #2
 800514a:	631a      	str	r2, [r3, #48]	; 0x30
 800514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005156:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800515a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800515c:	2302      	movs	r3, #2
 800515e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005160:	2203      	movs	r2, #3
 8005162:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005164:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005166:	a901      	add	r1, sp, #4
 8005168:	4803      	ldr	r0, [pc, #12]	; (8005178 <HAL_TIM_MspPostInit+0x58>)
 800516a:	f7fd fc27 	bl	80029bc <HAL_GPIO_Init>
}
 800516e:	e7e3      	b.n	8005138 <HAL_TIM_MspPostInit+0x18>
 8005170:	40000800 	.word	0x40000800
 8005174:	40023800 	.word	0x40023800
 8005178:	40020400 	.word	0x40020400

0800517c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800517c:	b500      	push	{lr}
 800517e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005180:	2300      	movs	r3, #0
 8005182:	9303      	str	r3, [sp, #12]
 8005184:	9304      	str	r3, [sp, #16]
 8005186:	9305      	str	r3, [sp, #20]
 8005188:	9306      	str	r3, [sp, #24]
 800518a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 800518c:	6802      	ldr	r2, [r0, #0]
 800518e:	4b16      	ldr	r3, [pc, #88]	; (80051e8 <HAL_UART_MspInit+0x6c>)
 8005190:	429a      	cmp	r2, r3
 8005192:	d002      	beq.n	800519a <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005194:	b009      	add	sp, #36	; 0x24
 8005196:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800519a:	2100      	movs	r1, #0
 800519c:	9101      	str	r1, [sp, #4]
 800519e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80051a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40
 80051aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ac:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80051b0:	9201      	str	r2, [sp, #4]
 80051b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051b4:	9102      	str	r1, [sp, #8]
 80051b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b8:	f042 0201 	orr.w	r2, r2, #1
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	9302      	str	r3, [sp, #8]
 80051c6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80051c8:	230c      	movs	r3, #12
 80051ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051cc:	2302      	movs	r3, #2
 80051ce:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051d0:	2301      	movs	r3, #1
 80051d2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051d4:	2303      	movs	r3, #3
 80051d6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80051d8:	2307      	movs	r3, #7
 80051da:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051dc:	a903      	add	r1, sp, #12
 80051de:	4803      	ldr	r0, [pc, #12]	; (80051ec <HAL_UART_MspInit+0x70>)
 80051e0:	f7fd fbec 	bl	80029bc <HAL_GPIO_Init>
}
 80051e4:	e7d6      	b.n	8005194 <HAL_UART_MspInit+0x18>
 80051e6:	bf00      	nop
 80051e8:	40004400 	.word	0x40004400
 80051ec:	40020000 	.word	0x40020000

080051f0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80051f0:	4770      	bx	lr

080051f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051f2:	e7fe      	b.n	80051f2 <HardFault_Handler>

080051f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051f4:	e7fe      	b.n	80051f4 <MemManage_Handler>

080051f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051f6:	e7fe      	b.n	80051f6 <BusFault_Handler>

080051f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051f8:	e7fe      	b.n	80051f8 <UsageFault_Handler>

080051fa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051fa:	4770      	bx	lr

080051fc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051fc:	4770      	bx	lr

080051fe <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051fe:	4770      	bx	lr

08005200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005200:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005202:	f7fd fb4b 	bl	800289c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005206:	bd08      	pop	{r3, pc}

08005208 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005208:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800520a:	2001      	movs	r0, #1
 800520c:	f7fd fcb8 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005210:	bd08      	pop	{r3, pc}

08005212 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005212:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005214:	2002      	movs	r0, #2
 8005216:	f7fd fcb3 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800521a:	bd08      	pop	{r3, pc}

0800521c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800521c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800521e:	2004      	movs	r0, #4
 8005220:	f7fd fcae 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005224:	bd08      	pop	{r3, pc}

08005226 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005226:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005228:	2010      	movs	r0, #16
 800522a:	f7fd fca9 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800522e:	bd08      	pop	{r3, pc}

08005230 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005230:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005232:	2020      	movs	r0, #32
 8005234:	f7fd fca4 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005238:	bd08      	pop	{r3, pc}
	...

0800523c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800523c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800523e:	4802      	ldr	r0, [pc, #8]	; (8005248 <TIM3_IRQHandler+0xc>)
 8005240:	f7fe fe38 	bl	8003eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005244:	bd08      	pop	{r3, pc}
 8005246:	bf00      	nop
 8005248:	200003f0 	.word	0x200003f0

0800524c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800524c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800524e:	4803      	ldr	r0, [pc, #12]	; (800525c <TIM4_IRQHandler+0x10>)
 8005250:	f7fe fe30 	bl	8003eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  pulse_complete_handler();
 8005254:	f7ff fdac 	bl	8004db0 <pulse_complete_handler>

  /* USER CODE END TIM4_IRQn 1 */
}
 8005258:	bd08      	pop	{r3, pc}
 800525a:	bf00      	nop
 800525c:	200003b0 	.word	0x200003b0

08005260 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005260:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005262:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005266:	f7fd fc8b 	bl	8002b80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800526a:	bd08      	pop	{r3, pc}

0800526c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	460d      	mov	r5, r1
 8005270:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005272:	2400      	movs	r4, #0
 8005274:	e004      	b.n	8005280 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 8005276:	f3af 8000 	nop.w
 800527a:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800527c:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 800527e:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005280:	42b4      	cmp	r4, r6
 8005282:	dbf8      	blt.n	8005276 <_read+0xa>
	}

return len;
}
 8005284:	4630      	mov	r0, r6
 8005286:	bd70      	pop	{r4, r5, r6, pc}

08005288 <_close>:
}

int _close(int file)
{
	return -1;
}
 8005288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800528c:	4770      	bx	lr

0800528e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800528e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005292:	604b      	str	r3, [r1, #4]
	return 0;
}
 8005294:	2000      	movs	r0, #0
 8005296:	4770      	bx	lr

08005298 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005298:	2001      	movs	r0, #1
 800529a:	4770      	bx	lr

0800529c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800529c:	2000      	movs	r0, #0
 800529e:	4770      	bx	lr

080052a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80052a0:	b508      	push	{r3, lr}
 80052a2:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80052a4:	4a0b      	ldr	r2, [pc, #44]	; (80052d4 <_sbrk+0x34>)
 80052a6:	6812      	ldr	r2, [r2, #0]
 80052a8:	b142      	cbz	r2, 80052bc <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80052aa:	4a0a      	ldr	r2, [pc, #40]	; (80052d4 <_sbrk+0x34>)
 80052ac:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80052ae:	4403      	add	r3, r0
 80052b0:	466a      	mov	r2, sp
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d806      	bhi.n	80052c4 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80052b6:	4a07      	ldr	r2, [pc, #28]	; (80052d4 <_sbrk+0x34>)
 80052b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80052ba:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80052bc:	4a05      	ldr	r2, [pc, #20]	; (80052d4 <_sbrk+0x34>)
 80052be:	4906      	ldr	r1, [pc, #24]	; (80052d8 <_sbrk+0x38>)
 80052c0:	6011      	str	r1, [r2, #0]
 80052c2:	e7f2      	b.n	80052aa <_sbrk+0xa>
		errno = ENOMEM;
 80052c4:	f000 f85a 	bl	800537c <__errno>
 80052c8:	230c      	movs	r3, #12
 80052ca:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80052cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052d0:	e7f3      	b.n	80052ba <_sbrk+0x1a>
 80052d2:	bf00      	nop
 80052d4:	200002bc 	.word	0x200002bc
 80052d8:	200004e8 	.word	0x200004e8

080052dc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052dc:	490f      	ldr	r1, [pc, #60]	; (800531c <SystemInit+0x40>)
 80052de:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80052e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80052ea:	4b0d      	ldr	r3, [pc, #52]	; (8005320 <SystemInit+0x44>)
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80052f4:	2000      	movs	r0, #0
 80052f6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80052fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005302:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005304:	4a07      	ldr	r2, [pc, #28]	; (8005324 <SystemInit+0x48>)
 8005306:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800530e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005310:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005312:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005316:	608b      	str	r3, [r1, #8]
#endif
}
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	e000ed00 	.word	0xe000ed00
 8005320:	40023800 	.word	0x40023800
 8005324:	24003010 	.word	0x24003010

08005328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005360 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800532c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800532e:	e003      	b.n	8005338 <LoopCopyDataInit>

08005330 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005330:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005332:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005334:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005336:	3104      	adds	r1, #4

08005338 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005338:	480b      	ldr	r0, [pc, #44]	; (8005368 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800533a:	4b0c      	ldr	r3, [pc, #48]	; (800536c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800533c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800533e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005340:	d3f6      	bcc.n	8005330 <CopyDataInit>
  ldr  r2, =_sbss
 8005342:	4a0b      	ldr	r2, [pc, #44]	; (8005370 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005344:	e002      	b.n	800534c <LoopFillZerobss>

08005346 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005346:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005348:	f842 3b04 	str.w	r3, [r2], #4

0800534c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800534c:	4b09      	ldr	r3, [pc, #36]	; (8005374 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800534e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005350:	d3f9      	bcc.n	8005346 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005352:	f7ff ffc3 	bl	80052dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005356:	f000 f817 	bl	8005388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800535a:	f7ff fcd5 	bl	8004d08 <main>
  bx  lr    
 800535e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005360:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005364:	08009c58 	.word	0x08009c58
  ldr  r0, =_sdata
 8005368:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800536c:	20000220 	.word	0x20000220
  ldr  r2, =_sbss
 8005370:	20000220 	.word	0x20000220
  ldr  r3, = _ebss
 8005374:	200004e8 	.word	0x200004e8

08005378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005378:	e7fe      	b.n	8005378 <ADC_IRQHandler>
	...

0800537c <__errno>:
 800537c:	4b01      	ldr	r3, [pc, #4]	; (8005384 <__errno+0x8>)
 800537e:	6818      	ldr	r0, [r3, #0]
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	2000004c 	.word	0x2000004c

08005388 <__libc_init_array>:
 8005388:	b570      	push	{r4, r5, r6, lr}
 800538a:	4e0d      	ldr	r6, [pc, #52]	; (80053c0 <__libc_init_array+0x38>)
 800538c:	4c0d      	ldr	r4, [pc, #52]	; (80053c4 <__libc_init_array+0x3c>)
 800538e:	1ba4      	subs	r4, r4, r6
 8005390:	10a4      	asrs	r4, r4, #2
 8005392:	2500      	movs	r5, #0
 8005394:	42a5      	cmp	r5, r4
 8005396:	d109      	bne.n	80053ac <__libc_init_array+0x24>
 8005398:	4e0b      	ldr	r6, [pc, #44]	; (80053c8 <__libc_init_array+0x40>)
 800539a:	4c0c      	ldr	r4, [pc, #48]	; (80053cc <__libc_init_array+0x44>)
 800539c:	f004 f946 	bl	800962c <_init>
 80053a0:	1ba4      	subs	r4, r4, r6
 80053a2:	10a4      	asrs	r4, r4, #2
 80053a4:	2500      	movs	r5, #0
 80053a6:	42a5      	cmp	r5, r4
 80053a8:	d105      	bne.n	80053b6 <__libc_init_array+0x2e>
 80053aa:	bd70      	pop	{r4, r5, r6, pc}
 80053ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053b0:	4798      	blx	r3
 80053b2:	3501      	adds	r5, #1
 80053b4:	e7ee      	b.n	8005394 <__libc_init_array+0xc>
 80053b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053ba:	4798      	blx	r3
 80053bc:	3501      	adds	r5, #1
 80053be:	e7f2      	b.n	80053a6 <__libc_init_array+0x1e>
 80053c0:	08009c50 	.word	0x08009c50
 80053c4:	08009c50 	.word	0x08009c50
 80053c8:	08009c50 	.word	0x08009c50
 80053cc:	08009c54 	.word	0x08009c54

080053d0 <memset>:
 80053d0:	4402      	add	r2, r0
 80053d2:	4603      	mov	r3, r0
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d100      	bne.n	80053da <memset+0xa>
 80053d8:	4770      	bx	lr
 80053da:	f803 1b01 	strb.w	r1, [r3], #1
 80053de:	e7f9      	b.n	80053d4 <memset+0x4>

080053e0 <__cvt>:
 80053e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053e4:	ec55 4b10 	vmov	r4, r5, d0
 80053e8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80053ea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80053ee:	2d00      	cmp	r5, #0
 80053f0:	460e      	mov	r6, r1
 80053f2:	4691      	mov	r9, r2
 80053f4:	4619      	mov	r1, r3
 80053f6:	bfb8      	it	lt
 80053f8:	4622      	movlt	r2, r4
 80053fa:	462b      	mov	r3, r5
 80053fc:	f027 0720 	bic.w	r7, r7, #32
 8005400:	bfbb      	ittet	lt
 8005402:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005406:	461d      	movlt	r5, r3
 8005408:	2300      	movge	r3, #0
 800540a:	232d      	movlt	r3, #45	; 0x2d
 800540c:	bfb8      	it	lt
 800540e:	4614      	movlt	r4, r2
 8005410:	2f46      	cmp	r7, #70	; 0x46
 8005412:	700b      	strb	r3, [r1, #0]
 8005414:	d004      	beq.n	8005420 <__cvt+0x40>
 8005416:	2f45      	cmp	r7, #69	; 0x45
 8005418:	d100      	bne.n	800541c <__cvt+0x3c>
 800541a:	3601      	adds	r6, #1
 800541c:	2102      	movs	r1, #2
 800541e:	e000      	b.n	8005422 <__cvt+0x42>
 8005420:	2103      	movs	r1, #3
 8005422:	ab03      	add	r3, sp, #12
 8005424:	9301      	str	r3, [sp, #4]
 8005426:	ab02      	add	r3, sp, #8
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	4632      	mov	r2, r6
 800542c:	4653      	mov	r3, sl
 800542e:	ec45 4b10 	vmov	d0, r4, r5
 8005432:	f000 fdf9 	bl	8006028 <_dtoa_r>
 8005436:	2f47      	cmp	r7, #71	; 0x47
 8005438:	4680      	mov	r8, r0
 800543a:	d102      	bne.n	8005442 <__cvt+0x62>
 800543c:	f019 0f01 	tst.w	r9, #1
 8005440:	d026      	beq.n	8005490 <__cvt+0xb0>
 8005442:	2f46      	cmp	r7, #70	; 0x46
 8005444:	eb08 0906 	add.w	r9, r8, r6
 8005448:	d111      	bne.n	800546e <__cvt+0x8e>
 800544a:	f898 3000 	ldrb.w	r3, [r8]
 800544e:	2b30      	cmp	r3, #48	; 0x30
 8005450:	d10a      	bne.n	8005468 <__cvt+0x88>
 8005452:	2200      	movs	r2, #0
 8005454:	2300      	movs	r3, #0
 8005456:	4620      	mov	r0, r4
 8005458:	4629      	mov	r1, r5
 800545a:	f7fb fd0f 	bl	8000e7c <__aeabi_dcmpeq>
 800545e:	b918      	cbnz	r0, 8005468 <__cvt+0x88>
 8005460:	f1c6 0601 	rsb	r6, r6, #1
 8005464:	f8ca 6000 	str.w	r6, [sl]
 8005468:	f8da 3000 	ldr.w	r3, [sl]
 800546c:	4499      	add	r9, r3
 800546e:	2200      	movs	r2, #0
 8005470:	2300      	movs	r3, #0
 8005472:	4620      	mov	r0, r4
 8005474:	4629      	mov	r1, r5
 8005476:	f7fb fd01 	bl	8000e7c <__aeabi_dcmpeq>
 800547a:	b938      	cbnz	r0, 800548c <__cvt+0xac>
 800547c:	2230      	movs	r2, #48	; 0x30
 800547e:	9b03      	ldr	r3, [sp, #12]
 8005480:	454b      	cmp	r3, r9
 8005482:	d205      	bcs.n	8005490 <__cvt+0xb0>
 8005484:	1c59      	adds	r1, r3, #1
 8005486:	9103      	str	r1, [sp, #12]
 8005488:	701a      	strb	r2, [r3, #0]
 800548a:	e7f8      	b.n	800547e <__cvt+0x9e>
 800548c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005490:	9b03      	ldr	r3, [sp, #12]
 8005492:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005494:	eba3 0308 	sub.w	r3, r3, r8
 8005498:	4640      	mov	r0, r8
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	b004      	add	sp, #16
 800549e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080054a2 <__exponent>:
 80054a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054a4:	2900      	cmp	r1, #0
 80054a6:	4604      	mov	r4, r0
 80054a8:	bfba      	itte	lt
 80054aa:	4249      	neglt	r1, r1
 80054ac:	232d      	movlt	r3, #45	; 0x2d
 80054ae:	232b      	movge	r3, #43	; 0x2b
 80054b0:	2909      	cmp	r1, #9
 80054b2:	f804 2b02 	strb.w	r2, [r4], #2
 80054b6:	7043      	strb	r3, [r0, #1]
 80054b8:	dd20      	ble.n	80054fc <__exponent+0x5a>
 80054ba:	f10d 0307 	add.w	r3, sp, #7
 80054be:	461f      	mov	r7, r3
 80054c0:	260a      	movs	r6, #10
 80054c2:	fb91 f5f6 	sdiv	r5, r1, r6
 80054c6:	fb06 1115 	mls	r1, r6, r5, r1
 80054ca:	3130      	adds	r1, #48	; 0x30
 80054cc:	2d09      	cmp	r5, #9
 80054ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80054d2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80054d6:	4629      	mov	r1, r5
 80054d8:	dc09      	bgt.n	80054ee <__exponent+0x4c>
 80054da:	3130      	adds	r1, #48	; 0x30
 80054dc:	3b02      	subs	r3, #2
 80054de:	f802 1c01 	strb.w	r1, [r2, #-1]
 80054e2:	42bb      	cmp	r3, r7
 80054e4:	4622      	mov	r2, r4
 80054e6:	d304      	bcc.n	80054f2 <__exponent+0x50>
 80054e8:	1a10      	subs	r0, r2, r0
 80054ea:	b003      	add	sp, #12
 80054ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ee:	4613      	mov	r3, r2
 80054f0:	e7e7      	b.n	80054c2 <__exponent+0x20>
 80054f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054f6:	f804 2b01 	strb.w	r2, [r4], #1
 80054fa:	e7f2      	b.n	80054e2 <__exponent+0x40>
 80054fc:	2330      	movs	r3, #48	; 0x30
 80054fe:	4419      	add	r1, r3
 8005500:	7083      	strb	r3, [r0, #2]
 8005502:	1d02      	adds	r2, r0, #4
 8005504:	70c1      	strb	r1, [r0, #3]
 8005506:	e7ef      	b.n	80054e8 <__exponent+0x46>

08005508 <_printf_float>:
 8005508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550c:	b08d      	sub	sp, #52	; 0x34
 800550e:	460c      	mov	r4, r1
 8005510:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005514:	4616      	mov	r6, r2
 8005516:	461f      	mov	r7, r3
 8005518:	4605      	mov	r5, r0
 800551a:	f001 fcb7 	bl	8006e8c <_localeconv_r>
 800551e:	6803      	ldr	r3, [r0, #0]
 8005520:	9304      	str	r3, [sp, #16]
 8005522:	4618      	mov	r0, r3
 8005524:	f7fb fbfa 	bl	8000d1c <strlen>
 8005528:	2300      	movs	r3, #0
 800552a:	930a      	str	r3, [sp, #40]	; 0x28
 800552c:	f8d8 3000 	ldr.w	r3, [r8]
 8005530:	9005      	str	r0, [sp, #20]
 8005532:	3307      	adds	r3, #7
 8005534:	f023 0307 	bic.w	r3, r3, #7
 8005538:	f103 0208 	add.w	r2, r3, #8
 800553c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005540:	f8d4 b000 	ldr.w	fp, [r4]
 8005544:	f8c8 2000 	str.w	r2, [r8]
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005550:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005554:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005558:	9307      	str	r3, [sp, #28]
 800555a:	f8cd 8018 	str.w	r8, [sp, #24]
 800555e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005562:	4ba7      	ldr	r3, [pc, #668]	; (8005800 <_printf_float+0x2f8>)
 8005564:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005568:	f7fb fcba 	bl	8000ee0 <__aeabi_dcmpun>
 800556c:	bb70      	cbnz	r0, 80055cc <_printf_float+0xc4>
 800556e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005572:	4ba3      	ldr	r3, [pc, #652]	; (8005800 <_printf_float+0x2f8>)
 8005574:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005578:	f7fb fc94 	bl	8000ea4 <__aeabi_dcmple>
 800557c:	bb30      	cbnz	r0, 80055cc <_printf_float+0xc4>
 800557e:	2200      	movs	r2, #0
 8005580:	2300      	movs	r3, #0
 8005582:	4640      	mov	r0, r8
 8005584:	4649      	mov	r1, r9
 8005586:	f7fb fc83 	bl	8000e90 <__aeabi_dcmplt>
 800558a:	b110      	cbz	r0, 8005592 <_printf_float+0x8a>
 800558c:	232d      	movs	r3, #45	; 0x2d
 800558e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005592:	4a9c      	ldr	r2, [pc, #624]	; (8005804 <_printf_float+0x2fc>)
 8005594:	4b9c      	ldr	r3, [pc, #624]	; (8005808 <_printf_float+0x300>)
 8005596:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800559a:	bf8c      	ite	hi
 800559c:	4690      	movhi	r8, r2
 800559e:	4698      	movls	r8, r3
 80055a0:	2303      	movs	r3, #3
 80055a2:	f02b 0204 	bic.w	r2, fp, #4
 80055a6:	6123      	str	r3, [r4, #16]
 80055a8:	6022      	str	r2, [r4, #0]
 80055aa:	f04f 0900 	mov.w	r9, #0
 80055ae:	9700      	str	r7, [sp, #0]
 80055b0:	4633      	mov	r3, r6
 80055b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80055b4:	4621      	mov	r1, r4
 80055b6:	4628      	mov	r0, r5
 80055b8:	f000 f9e6 	bl	8005988 <_printf_common>
 80055bc:	3001      	adds	r0, #1
 80055be:	f040 808d 	bne.w	80056dc <_printf_float+0x1d4>
 80055c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055c6:	b00d      	add	sp, #52	; 0x34
 80055c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055cc:	4642      	mov	r2, r8
 80055ce:	464b      	mov	r3, r9
 80055d0:	4640      	mov	r0, r8
 80055d2:	4649      	mov	r1, r9
 80055d4:	f7fb fc84 	bl	8000ee0 <__aeabi_dcmpun>
 80055d8:	b110      	cbz	r0, 80055e0 <_printf_float+0xd8>
 80055da:	4a8c      	ldr	r2, [pc, #560]	; (800580c <_printf_float+0x304>)
 80055dc:	4b8c      	ldr	r3, [pc, #560]	; (8005810 <_printf_float+0x308>)
 80055de:	e7da      	b.n	8005596 <_printf_float+0x8e>
 80055e0:	6861      	ldr	r1, [r4, #4]
 80055e2:	1c4b      	adds	r3, r1, #1
 80055e4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80055e8:	a80a      	add	r0, sp, #40	; 0x28
 80055ea:	d13e      	bne.n	800566a <_printf_float+0x162>
 80055ec:	2306      	movs	r3, #6
 80055ee:	6063      	str	r3, [r4, #4]
 80055f0:	2300      	movs	r3, #0
 80055f2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80055f6:	ab09      	add	r3, sp, #36	; 0x24
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	ec49 8b10 	vmov	d0, r8, r9
 80055fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005602:	6022      	str	r2, [r4, #0]
 8005604:	f8cd a004 	str.w	sl, [sp, #4]
 8005608:	6861      	ldr	r1, [r4, #4]
 800560a:	4628      	mov	r0, r5
 800560c:	f7ff fee8 	bl	80053e0 <__cvt>
 8005610:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005614:	2b47      	cmp	r3, #71	; 0x47
 8005616:	4680      	mov	r8, r0
 8005618:	d109      	bne.n	800562e <_printf_float+0x126>
 800561a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800561c:	1cd8      	adds	r0, r3, #3
 800561e:	db02      	blt.n	8005626 <_printf_float+0x11e>
 8005620:	6862      	ldr	r2, [r4, #4]
 8005622:	4293      	cmp	r3, r2
 8005624:	dd47      	ble.n	80056b6 <_printf_float+0x1ae>
 8005626:	f1aa 0a02 	sub.w	sl, sl, #2
 800562a:	fa5f fa8a 	uxtb.w	sl, sl
 800562e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005632:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005634:	d824      	bhi.n	8005680 <_printf_float+0x178>
 8005636:	3901      	subs	r1, #1
 8005638:	4652      	mov	r2, sl
 800563a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800563e:	9109      	str	r1, [sp, #36]	; 0x24
 8005640:	f7ff ff2f 	bl	80054a2 <__exponent>
 8005644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005646:	1813      	adds	r3, r2, r0
 8005648:	2a01      	cmp	r2, #1
 800564a:	4681      	mov	r9, r0
 800564c:	6123      	str	r3, [r4, #16]
 800564e:	dc02      	bgt.n	8005656 <_printf_float+0x14e>
 8005650:	6822      	ldr	r2, [r4, #0]
 8005652:	07d1      	lsls	r1, r2, #31
 8005654:	d501      	bpl.n	800565a <_printf_float+0x152>
 8005656:	3301      	adds	r3, #1
 8005658:	6123      	str	r3, [r4, #16]
 800565a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0a5      	beq.n	80055ae <_printf_float+0xa6>
 8005662:	232d      	movs	r3, #45	; 0x2d
 8005664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005668:	e7a1      	b.n	80055ae <_printf_float+0xa6>
 800566a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800566e:	f000 8177 	beq.w	8005960 <_printf_float+0x458>
 8005672:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005676:	d1bb      	bne.n	80055f0 <_printf_float+0xe8>
 8005678:	2900      	cmp	r1, #0
 800567a:	d1b9      	bne.n	80055f0 <_printf_float+0xe8>
 800567c:	2301      	movs	r3, #1
 800567e:	e7b6      	b.n	80055ee <_printf_float+0xe6>
 8005680:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005684:	d119      	bne.n	80056ba <_printf_float+0x1b2>
 8005686:	2900      	cmp	r1, #0
 8005688:	6863      	ldr	r3, [r4, #4]
 800568a:	dd0c      	ble.n	80056a6 <_printf_float+0x19e>
 800568c:	6121      	str	r1, [r4, #16]
 800568e:	b913      	cbnz	r3, 8005696 <_printf_float+0x18e>
 8005690:	6822      	ldr	r2, [r4, #0]
 8005692:	07d2      	lsls	r2, r2, #31
 8005694:	d502      	bpl.n	800569c <_printf_float+0x194>
 8005696:	3301      	adds	r3, #1
 8005698:	440b      	add	r3, r1
 800569a:	6123      	str	r3, [r4, #16]
 800569c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800569e:	65a3      	str	r3, [r4, #88]	; 0x58
 80056a0:	f04f 0900 	mov.w	r9, #0
 80056a4:	e7d9      	b.n	800565a <_printf_float+0x152>
 80056a6:	b913      	cbnz	r3, 80056ae <_printf_float+0x1a6>
 80056a8:	6822      	ldr	r2, [r4, #0]
 80056aa:	07d0      	lsls	r0, r2, #31
 80056ac:	d501      	bpl.n	80056b2 <_printf_float+0x1aa>
 80056ae:	3302      	adds	r3, #2
 80056b0:	e7f3      	b.n	800569a <_printf_float+0x192>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e7f1      	b.n	800569a <_printf_float+0x192>
 80056b6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80056ba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80056be:	4293      	cmp	r3, r2
 80056c0:	db05      	blt.n	80056ce <_printf_float+0x1c6>
 80056c2:	6822      	ldr	r2, [r4, #0]
 80056c4:	6123      	str	r3, [r4, #16]
 80056c6:	07d1      	lsls	r1, r2, #31
 80056c8:	d5e8      	bpl.n	800569c <_printf_float+0x194>
 80056ca:	3301      	adds	r3, #1
 80056cc:	e7e5      	b.n	800569a <_printf_float+0x192>
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	bfd4      	ite	le
 80056d2:	f1c3 0302 	rsble	r3, r3, #2
 80056d6:	2301      	movgt	r3, #1
 80056d8:	4413      	add	r3, r2
 80056da:	e7de      	b.n	800569a <_printf_float+0x192>
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	055a      	lsls	r2, r3, #21
 80056e0:	d407      	bmi.n	80056f2 <_printf_float+0x1ea>
 80056e2:	6923      	ldr	r3, [r4, #16]
 80056e4:	4642      	mov	r2, r8
 80056e6:	4631      	mov	r1, r6
 80056e8:	4628      	mov	r0, r5
 80056ea:	47b8      	blx	r7
 80056ec:	3001      	adds	r0, #1
 80056ee:	d12b      	bne.n	8005748 <_printf_float+0x240>
 80056f0:	e767      	b.n	80055c2 <_printf_float+0xba>
 80056f2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80056f6:	f240 80dc 	bls.w	80058b2 <_printf_float+0x3aa>
 80056fa:	2200      	movs	r2, #0
 80056fc:	2300      	movs	r3, #0
 80056fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005702:	f7fb fbbb 	bl	8000e7c <__aeabi_dcmpeq>
 8005706:	2800      	cmp	r0, #0
 8005708:	d033      	beq.n	8005772 <_printf_float+0x26a>
 800570a:	2301      	movs	r3, #1
 800570c:	4a41      	ldr	r2, [pc, #260]	; (8005814 <_printf_float+0x30c>)
 800570e:	4631      	mov	r1, r6
 8005710:	4628      	mov	r0, r5
 8005712:	47b8      	blx	r7
 8005714:	3001      	adds	r0, #1
 8005716:	f43f af54 	beq.w	80055c2 <_printf_float+0xba>
 800571a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800571e:	429a      	cmp	r2, r3
 8005720:	db02      	blt.n	8005728 <_printf_float+0x220>
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	07d8      	lsls	r0, r3, #31
 8005726:	d50f      	bpl.n	8005748 <_printf_float+0x240>
 8005728:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800572c:	4631      	mov	r1, r6
 800572e:	4628      	mov	r0, r5
 8005730:	47b8      	blx	r7
 8005732:	3001      	adds	r0, #1
 8005734:	f43f af45 	beq.w	80055c2 <_printf_float+0xba>
 8005738:	f04f 0800 	mov.w	r8, #0
 800573c:	f104 091a 	add.w	r9, r4, #26
 8005740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005742:	3b01      	subs	r3, #1
 8005744:	4543      	cmp	r3, r8
 8005746:	dc09      	bgt.n	800575c <_printf_float+0x254>
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	079b      	lsls	r3, r3, #30
 800574c:	f100 8103 	bmi.w	8005956 <_printf_float+0x44e>
 8005750:	68e0      	ldr	r0, [r4, #12]
 8005752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005754:	4298      	cmp	r0, r3
 8005756:	bfb8      	it	lt
 8005758:	4618      	movlt	r0, r3
 800575a:	e734      	b.n	80055c6 <_printf_float+0xbe>
 800575c:	2301      	movs	r3, #1
 800575e:	464a      	mov	r2, r9
 8005760:	4631      	mov	r1, r6
 8005762:	4628      	mov	r0, r5
 8005764:	47b8      	blx	r7
 8005766:	3001      	adds	r0, #1
 8005768:	f43f af2b 	beq.w	80055c2 <_printf_float+0xba>
 800576c:	f108 0801 	add.w	r8, r8, #1
 8005770:	e7e6      	b.n	8005740 <_printf_float+0x238>
 8005772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005774:	2b00      	cmp	r3, #0
 8005776:	dc2b      	bgt.n	80057d0 <_printf_float+0x2c8>
 8005778:	2301      	movs	r3, #1
 800577a:	4a26      	ldr	r2, [pc, #152]	; (8005814 <_printf_float+0x30c>)
 800577c:	4631      	mov	r1, r6
 800577e:	4628      	mov	r0, r5
 8005780:	47b8      	blx	r7
 8005782:	3001      	adds	r0, #1
 8005784:	f43f af1d 	beq.w	80055c2 <_printf_float+0xba>
 8005788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800578a:	b923      	cbnz	r3, 8005796 <_printf_float+0x28e>
 800578c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800578e:	b913      	cbnz	r3, 8005796 <_printf_float+0x28e>
 8005790:	6823      	ldr	r3, [r4, #0]
 8005792:	07d9      	lsls	r1, r3, #31
 8005794:	d5d8      	bpl.n	8005748 <_printf_float+0x240>
 8005796:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800579a:	4631      	mov	r1, r6
 800579c:	4628      	mov	r0, r5
 800579e:	47b8      	blx	r7
 80057a0:	3001      	adds	r0, #1
 80057a2:	f43f af0e 	beq.w	80055c2 <_printf_float+0xba>
 80057a6:	f04f 0900 	mov.w	r9, #0
 80057aa:	f104 0a1a 	add.w	sl, r4, #26
 80057ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b0:	425b      	negs	r3, r3
 80057b2:	454b      	cmp	r3, r9
 80057b4:	dc01      	bgt.n	80057ba <_printf_float+0x2b2>
 80057b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057b8:	e794      	b.n	80056e4 <_printf_float+0x1dc>
 80057ba:	2301      	movs	r3, #1
 80057bc:	4652      	mov	r2, sl
 80057be:	4631      	mov	r1, r6
 80057c0:	4628      	mov	r0, r5
 80057c2:	47b8      	blx	r7
 80057c4:	3001      	adds	r0, #1
 80057c6:	f43f aefc 	beq.w	80055c2 <_printf_float+0xba>
 80057ca:	f109 0901 	add.w	r9, r9, #1
 80057ce:	e7ee      	b.n	80057ae <_printf_float+0x2a6>
 80057d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057d4:	429a      	cmp	r2, r3
 80057d6:	bfa8      	it	ge
 80057d8:	461a      	movge	r2, r3
 80057da:	2a00      	cmp	r2, #0
 80057dc:	4691      	mov	r9, r2
 80057de:	dd07      	ble.n	80057f0 <_printf_float+0x2e8>
 80057e0:	4613      	mov	r3, r2
 80057e2:	4631      	mov	r1, r6
 80057e4:	4642      	mov	r2, r8
 80057e6:	4628      	mov	r0, r5
 80057e8:	47b8      	blx	r7
 80057ea:	3001      	adds	r0, #1
 80057ec:	f43f aee9 	beq.w	80055c2 <_printf_float+0xba>
 80057f0:	f104 031a 	add.w	r3, r4, #26
 80057f4:	f04f 0b00 	mov.w	fp, #0
 80057f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057fc:	9306      	str	r3, [sp, #24]
 80057fe:	e015      	b.n	800582c <_printf_float+0x324>
 8005800:	7fefffff 	.word	0x7fefffff
 8005804:	08009900 	.word	0x08009900
 8005808:	080098fc 	.word	0x080098fc
 800580c:	08009908 	.word	0x08009908
 8005810:	08009904 	.word	0x08009904
 8005814:	0800990c 	.word	0x0800990c
 8005818:	2301      	movs	r3, #1
 800581a:	9a06      	ldr	r2, [sp, #24]
 800581c:	4631      	mov	r1, r6
 800581e:	4628      	mov	r0, r5
 8005820:	47b8      	blx	r7
 8005822:	3001      	adds	r0, #1
 8005824:	f43f aecd 	beq.w	80055c2 <_printf_float+0xba>
 8005828:	f10b 0b01 	add.w	fp, fp, #1
 800582c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005830:	ebaa 0309 	sub.w	r3, sl, r9
 8005834:	455b      	cmp	r3, fp
 8005836:	dcef      	bgt.n	8005818 <_printf_float+0x310>
 8005838:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800583c:	429a      	cmp	r2, r3
 800583e:	44d0      	add	r8, sl
 8005840:	db15      	blt.n	800586e <_printf_float+0x366>
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	07da      	lsls	r2, r3, #31
 8005846:	d412      	bmi.n	800586e <_printf_float+0x366>
 8005848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800584a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800584c:	eba3 020a 	sub.w	r2, r3, sl
 8005850:	eba3 0a01 	sub.w	sl, r3, r1
 8005854:	4592      	cmp	sl, r2
 8005856:	bfa8      	it	ge
 8005858:	4692      	movge	sl, r2
 800585a:	f1ba 0f00 	cmp.w	sl, #0
 800585e:	dc0e      	bgt.n	800587e <_printf_float+0x376>
 8005860:	f04f 0800 	mov.w	r8, #0
 8005864:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005868:	f104 091a 	add.w	r9, r4, #26
 800586c:	e019      	b.n	80058a2 <_printf_float+0x39a>
 800586e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005872:	4631      	mov	r1, r6
 8005874:	4628      	mov	r0, r5
 8005876:	47b8      	blx	r7
 8005878:	3001      	adds	r0, #1
 800587a:	d1e5      	bne.n	8005848 <_printf_float+0x340>
 800587c:	e6a1      	b.n	80055c2 <_printf_float+0xba>
 800587e:	4653      	mov	r3, sl
 8005880:	4642      	mov	r2, r8
 8005882:	4631      	mov	r1, r6
 8005884:	4628      	mov	r0, r5
 8005886:	47b8      	blx	r7
 8005888:	3001      	adds	r0, #1
 800588a:	d1e9      	bne.n	8005860 <_printf_float+0x358>
 800588c:	e699      	b.n	80055c2 <_printf_float+0xba>
 800588e:	2301      	movs	r3, #1
 8005890:	464a      	mov	r2, r9
 8005892:	4631      	mov	r1, r6
 8005894:	4628      	mov	r0, r5
 8005896:	47b8      	blx	r7
 8005898:	3001      	adds	r0, #1
 800589a:	f43f ae92 	beq.w	80055c2 <_printf_float+0xba>
 800589e:	f108 0801 	add.w	r8, r8, #1
 80058a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058a6:	1a9b      	subs	r3, r3, r2
 80058a8:	eba3 030a 	sub.w	r3, r3, sl
 80058ac:	4543      	cmp	r3, r8
 80058ae:	dcee      	bgt.n	800588e <_printf_float+0x386>
 80058b0:	e74a      	b.n	8005748 <_printf_float+0x240>
 80058b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058b4:	2a01      	cmp	r2, #1
 80058b6:	dc01      	bgt.n	80058bc <_printf_float+0x3b4>
 80058b8:	07db      	lsls	r3, r3, #31
 80058ba:	d53a      	bpl.n	8005932 <_printf_float+0x42a>
 80058bc:	2301      	movs	r3, #1
 80058be:	4642      	mov	r2, r8
 80058c0:	4631      	mov	r1, r6
 80058c2:	4628      	mov	r0, r5
 80058c4:	47b8      	blx	r7
 80058c6:	3001      	adds	r0, #1
 80058c8:	f43f ae7b 	beq.w	80055c2 <_printf_float+0xba>
 80058cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058d0:	4631      	mov	r1, r6
 80058d2:	4628      	mov	r0, r5
 80058d4:	47b8      	blx	r7
 80058d6:	3001      	adds	r0, #1
 80058d8:	f108 0801 	add.w	r8, r8, #1
 80058dc:	f43f ae71 	beq.w	80055c2 <_printf_float+0xba>
 80058e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e2:	2200      	movs	r2, #0
 80058e4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80058e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058ec:	2300      	movs	r3, #0
 80058ee:	f7fb fac5 	bl	8000e7c <__aeabi_dcmpeq>
 80058f2:	b9c8      	cbnz	r0, 8005928 <_printf_float+0x420>
 80058f4:	4653      	mov	r3, sl
 80058f6:	4642      	mov	r2, r8
 80058f8:	4631      	mov	r1, r6
 80058fa:	4628      	mov	r0, r5
 80058fc:	47b8      	blx	r7
 80058fe:	3001      	adds	r0, #1
 8005900:	d10e      	bne.n	8005920 <_printf_float+0x418>
 8005902:	e65e      	b.n	80055c2 <_printf_float+0xba>
 8005904:	2301      	movs	r3, #1
 8005906:	4652      	mov	r2, sl
 8005908:	4631      	mov	r1, r6
 800590a:	4628      	mov	r0, r5
 800590c:	47b8      	blx	r7
 800590e:	3001      	adds	r0, #1
 8005910:	f43f ae57 	beq.w	80055c2 <_printf_float+0xba>
 8005914:	f108 0801 	add.w	r8, r8, #1
 8005918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800591a:	3b01      	subs	r3, #1
 800591c:	4543      	cmp	r3, r8
 800591e:	dcf1      	bgt.n	8005904 <_printf_float+0x3fc>
 8005920:	464b      	mov	r3, r9
 8005922:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005926:	e6de      	b.n	80056e6 <_printf_float+0x1de>
 8005928:	f04f 0800 	mov.w	r8, #0
 800592c:	f104 0a1a 	add.w	sl, r4, #26
 8005930:	e7f2      	b.n	8005918 <_printf_float+0x410>
 8005932:	2301      	movs	r3, #1
 8005934:	e7df      	b.n	80058f6 <_printf_float+0x3ee>
 8005936:	2301      	movs	r3, #1
 8005938:	464a      	mov	r2, r9
 800593a:	4631      	mov	r1, r6
 800593c:	4628      	mov	r0, r5
 800593e:	47b8      	blx	r7
 8005940:	3001      	adds	r0, #1
 8005942:	f43f ae3e 	beq.w	80055c2 <_printf_float+0xba>
 8005946:	f108 0801 	add.w	r8, r8, #1
 800594a:	68e3      	ldr	r3, [r4, #12]
 800594c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800594e:	1a9b      	subs	r3, r3, r2
 8005950:	4543      	cmp	r3, r8
 8005952:	dcf0      	bgt.n	8005936 <_printf_float+0x42e>
 8005954:	e6fc      	b.n	8005750 <_printf_float+0x248>
 8005956:	f04f 0800 	mov.w	r8, #0
 800595a:	f104 0919 	add.w	r9, r4, #25
 800595e:	e7f4      	b.n	800594a <_printf_float+0x442>
 8005960:	2900      	cmp	r1, #0
 8005962:	f43f ae8b 	beq.w	800567c <_printf_float+0x174>
 8005966:	2300      	movs	r3, #0
 8005968:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800596c:	ab09      	add	r3, sp, #36	; 0x24
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	ec49 8b10 	vmov	d0, r8, r9
 8005974:	6022      	str	r2, [r4, #0]
 8005976:	f8cd a004 	str.w	sl, [sp, #4]
 800597a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800597e:	4628      	mov	r0, r5
 8005980:	f7ff fd2e 	bl	80053e0 <__cvt>
 8005984:	4680      	mov	r8, r0
 8005986:	e648      	b.n	800561a <_printf_float+0x112>

08005988 <_printf_common>:
 8005988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800598c:	4691      	mov	r9, r2
 800598e:	461f      	mov	r7, r3
 8005990:	688a      	ldr	r2, [r1, #8]
 8005992:	690b      	ldr	r3, [r1, #16]
 8005994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005998:	4293      	cmp	r3, r2
 800599a:	bfb8      	it	lt
 800599c:	4613      	movlt	r3, r2
 800599e:	f8c9 3000 	str.w	r3, [r9]
 80059a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059a6:	4606      	mov	r6, r0
 80059a8:	460c      	mov	r4, r1
 80059aa:	b112      	cbz	r2, 80059b2 <_printf_common+0x2a>
 80059ac:	3301      	adds	r3, #1
 80059ae:	f8c9 3000 	str.w	r3, [r9]
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	0699      	lsls	r1, r3, #26
 80059b6:	bf42      	ittt	mi
 80059b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80059bc:	3302      	addmi	r3, #2
 80059be:	f8c9 3000 	strmi.w	r3, [r9]
 80059c2:	6825      	ldr	r5, [r4, #0]
 80059c4:	f015 0506 	ands.w	r5, r5, #6
 80059c8:	d107      	bne.n	80059da <_printf_common+0x52>
 80059ca:	f104 0a19 	add.w	sl, r4, #25
 80059ce:	68e3      	ldr	r3, [r4, #12]
 80059d0:	f8d9 2000 	ldr.w	r2, [r9]
 80059d4:	1a9b      	subs	r3, r3, r2
 80059d6:	42ab      	cmp	r3, r5
 80059d8:	dc28      	bgt.n	8005a2c <_printf_common+0xa4>
 80059da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80059de:	6822      	ldr	r2, [r4, #0]
 80059e0:	3300      	adds	r3, #0
 80059e2:	bf18      	it	ne
 80059e4:	2301      	movne	r3, #1
 80059e6:	0692      	lsls	r2, r2, #26
 80059e8:	d42d      	bmi.n	8005a46 <_printf_common+0xbe>
 80059ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059ee:	4639      	mov	r1, r7
 80059f0:	4630      	mov	r0, r6
 80059f2:	47c0      	blx	r8
 80059f4:	3001      	adds	r0, #1
 80059f6:	d020      	beq.n	8005a3a <_printf_common+0xb2>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	68e5      	ldr	r5, [r4, #12]
 80059fc:	f8d9 2000 	ldr.w	r2, [r9]
 8005a00:	f003 0306 	and.w	r3, r3, #6
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	bf08      	it	eq
 8005a08:	1aad      	subeq	r5, r5, r2
 8005a0a:	68a3      	ldr	r3, [r4, #8]
 8005a0c:	6922      	ldr	r2, [r4, #16]
 8005a0e:	bf0c      	ite	eq
 8005a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a14:	2500      	movne	r5, #0
 8005a16:	4293      	cmp	r3, r2
 8005a18:	bfc4      	itt	gt
 8005a1a:	1a9b      	subgt	r3, r3, r2
 8005a1c:	18ed      	addgt	r5, r5, r3
 8005a1e:	f04f 0900 	mov.w	r9, #0
 8005a22:	341a      	adds	r4, #26
 8005a24:	454d      	cmp	r5, r9
 8005a26:	d11a      	bne.n	8005a5e <_printf_common+0xd6>
 8005a28:	2000      	movs	r0, #0
 8005a2a:	e008      	b.n	8005a3e <_printf_common+0xb6>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	4652      	mov	r2, sl
 8005a30:	4639      	mov	r1, r7
 8005a32:	4630      	mov	r0, r6
 8005a34:	47c0      	blx	r8
 8005a36:	3001      	adds	r0, #1
 8005a38:	d103      	bne.n	8005a42 <_printf_common+0xba>
 8005a3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a42:	3501      	adds	r5, #1
 8005a44:	e7c3      	b.n	80059ce <_printf_common+0x46>
 8005a46:	18e1      	adds	r1, r4, r3
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	2030      	movs	r0, #48	; 0x30
 8005a4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a50:	4422      	add	r2, r4
 8005a52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a5a:	3302      	adds	r3, #2
 8005a5c:	e7c5      	b.n	80059ea <_printf_common+0x62>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	4622      	mov	r2, r4
 8005a62:	4639      	mov	r1, r7
 8005a64:	4630      	mov	r0, r6
 8005a66:	47c0      	blx	r8
 8005a68:	3001      	adds	r0, #1
 8005a6a:	d0e6      	beq.n	8005a3a <_printf_common+0xb2>
 8005a6c:	f109 0901 	add.w	r9, r9, #1
 8005a70:	e7d8      	b.n	8005a24 <_printf_common+0x9c>
	...

08005a74 <_printf_i>:
 8005a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005a7c:	460c      	mov	r4, r1
 8005a7e:	7e09      	ldrb	r1, [r1, #24]
 8005a80:	b085      	sub	sp, #20
 8005a82:	296e      	cmp	r1, #110	; 0x6e
 8005a84:	4617      	mov	r7, r2
 8005a86:	4606      	mov	r6, r0
 8005a88:	4698      	mov	r8, r3
 8005a8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a8c:	f000 80b3 	beq.w	8005bf6 <_printf_i+0x182>
 8005a90:	d822      	bhi.n	8005ad8 <_printf_i+0x64>
 8005a92:	2963      	cmp	r1, #99	; 0x63
 8005a94:	d036      	beq.n	8005b04 <_printf_i+0x90>
 8005a96:	d80a      	bhi.n	8005aae <_printf_i+0x3a>
 8005a98:	2900      	cmp	r1, #0
 8005a9a:	f000 80b9 	beq.w	8005c10 <_printf_i+0x19c>
 8005a9e:	2958      	cmp	r1, #88	; 0x58
 8005aa0:	f000 8083 	beq.w	8005baa <_printf_i+0x136>
 8005aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005aa8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005aac:	e032      	b.n	8005b14 <_printf_i+0xa0>
 8005aae:	2964      	cmp	r1, #100	; 0x64
 8005ab0:	d001      	beq.n	8005ab6 <_printf_i+0x42>
 8005ab2:	2969      	cmp	r1, #105	; 0x69
 8005ab4:	d1f6      	bne.n	8005aa4 <_printf_i+0x30>
 8005ab6:	6820      	ldr	r0, [r4, #0]
 8005ab8:	6813      	ldr	r3, [r2, #0]
 8005aba:	0605      	lsls	r5, r0, #24
 8005abc:	f103 0104 	add.w	r1, r3, #4
 8005ac0:	d52a      	bpl.n	8005b18 <_printf_i+0xa4>
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6011      	str	r1, [r2, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	da03      	bge.n	8005ad2 <_printf_i+0x5e>
 8005aca:	222d      	movs	r2, #45	; 0x2d
 8005acc:	425b      	negs	r3, r3
 8005ace:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005ad2:	486f      	ldr	r0, [pc, #444]	; (8005c90 <_printf_i+0x21c>)
 8005ad4:	220a      	movs	r2, #10
 8005ad6:	e039      	b.n	8005b4c <_printf_i+0xd8>
 8005ad8:	2973      	cmp	r1, #115	; 0x73
 8005ada:	f000 809d 	beq.w	8005c18 <_printf_i+0x1a4>
 8005ade:	d808      	bhi.n	8005af2 <_printf_i+0x7e>
 8005ae0:	296f      	cmp	r1, #111	; 0x6f
 8005ae2:	d020      	beq.n	8005b26 <_printf_i+0xb2>
 8005ae4:	2970      	cmp	r1, #112	; 0x70
 8005ae6:	d1dd      	bne.n	8005aa4 <_printf_i+0x30>
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	f043 0320 	orr.w	r3, r3, #32
 8005aee:	6023      	str	r3, [r4, #0]
 8005af0:	e003      	b.n	8005afa <_printf_i+0x86>
 8005af2:	2975      	cmp	r1, #117	; 0x75
 8005af4:	d017      	beq.n	8005b26 <_printf_i+0xb2>
 8005af6:	2978      	cmp	r1, #120	; 0x78
 8005af8:	d1d4      	bne.n	8005aa4 <_printf_i+0x30>
 8005afa:	2378      	movs	r3, #120	; 0x78
 8005afc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b00:	4864      	ldr	r0, [pc, #400]	; (8005c94 <_printf_i+0x220>)
 8005b02:	e055      	b.n	8005bb0 <_printf_i+0x13c>
 8005b04:	6813      	ldr	r3, [r2, #0]
 8005b06:	1d19      	adds	r1, r3, #4
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6011      	str	r1, [r2, #0]
 8005b0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b14:	2301      	movs	r3, #1
 8005b16:	e08c      	b.n	8005c32 <_printf_i+0x1be>
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6011      	str	r1, [r2, #0]
 8005b1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b20:	bf18      	it	ne
 8005b22:	b21b      	sxthne	r3, r3
 8005b24:	e7cf      	b.n	8005ac6 <_printf_i+0x52>
 8005b26:	6813      	ldr	r3, [r2, #0]
 8005b28:	6825      	ldr	r5, [r4, #0]
 8005b2a:	1d18      	adds	r0, r3, #4
 8005b2c:	6010      	str	r0, [r2, #0]
 8005b2e:	0628      	lsls	r0, r5, #24
 8005b30:	d501      	bpl.n	8005b36 <_printf_i+0xc2>
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	e002      	b.n	8005b3c <_printf_i+0xc8>
 8005b36:	0668      	lsls	r0, r5, #25
 8005b38:	d5fb      	bpl.n	8005b32 <_printf_i+0xbe>
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	4854      	ldr	r0, [pc, #336]	; (8005c90 <_printf_i+0x21c>)
 8005b3e:	296f      	cmp	r1, #111	; 0x6f
 8005b40:	bf14      	ite	ne
 8005b42:	220a      	movne	r2, #10
 8005b44:	2208      	moveq	r2, #8
 8005b46:	2100      	movs	r1, #0
 8005b48:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b4c:	6865      	ldr	r5, [r4, #4]
 8005b4e:	60a5      	str	r5, [r4, #8]
 8005b50:	2d00      	cmp	r5, #0
 8005b52:	f2c0 8095 	blt.w	8005c80 <_printf_i+0x20c>
 8005b56:	6821      	ldr	r1, [r4, #0]
 8005b58:	f021 0104 	bic.w	r1, r1, #4
 8005b5c:	6021      	str	r1, [r4, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d13d      	bne.n	8005bde <_printf_i+0x16a>
 8005b62:	2d00      	cmp	r5, #0
 8005b64:	f040 808e 	bne.w	8005c84 <_printf_i+0x210>
 8005b68:	4665      	mov	r5, ip
 8005b6a:	2a08      	cmp	r2, #8
 8005b6c:	d10b      	bne.n	8005b86 <_printf_i+0x112>
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	07db      	lsls	r3, r3, #31
 8005b72:	d508      	bpl.n	8005b86 <_printf_i+0x112>
 8005b74:	6923      	ldr	r3, [r4, #16]
 8005b76:	6862      	ldr	r2, [r4, #4]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	bfde      	ittt	le
 8005b7c:	2330      	movle	r3, #48	; 0x30
 8005b7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b82:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005b86:	ebac 0305 	sub.w	r3, ip, r5
 8005b8a:	6123      	str	r3, [r4, #16]
 8005b8c:	f8cd 8000 	str.w	r8, [sp]
 8005b90:	463b      	mov	r3, r7
 8005b92:	aa03      	add	r2, sp, #12
 8005b94:	4621      	mov	r1, r4
 8005b96:	4630      	mov	r0, r6
 8005b98:	f7ff fef6 	bl	8005988 <_printf_common>
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	d14d      	bne.n	8005c3c <_printf_i+0x1c8>
 8005ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ba4:	b005      	add	sp, #20
 8005ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005baa:	4839      	ldr	r0, [pc, #228]	; (8005c90 <_printf_i+0x21c>)
 8005bac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005bb0:	6813      	ldr	r3, [r2, #0]
 8005bb2:	6821      	ldr	r1, [r4, #0]
 8005bb4:	1d1d      	adds	r5, r3, #4
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6015      	str	r5, [r2, #0]
 8005bba:	060a      	lsls	r2, r1, #24
 8005bbc:	d50b      	bpl.n	8005bd6 <_printf_i+0x162>
 8005bbe:	07ca      	lsls	r2, r1, #31
 8005bc0:	bf44      	itt	mi
 8005bc2:	f041 0120 	orrmi.w	r1, r1, #32
 8005bc6:	6021      	strmi	r1, [r4, #0]
 8005bc8:	b91b      	cbnz	r3, 8005bd2 <_printf_i+0x15e>
 8005bca:	6822      	ldr	r2, [r4, #0]
 8005bcc:	f022 0220 	bic.w	r2, r2, #32
 8005bd0:	6022      	str	r2, [r4, #0]
 8005bd2:	2210      	movs	r2, #16
 8005bd4:	e7b7      	b.n	8005b46 <_printf_i+0xd2>
 8005bd6:	064d      	lsls	r5, r1, #25
 8005bd8:	bf48      	it	mi
 8005bda:	b29b      	uxthmi	r3, r3
 8005bdc:	e7ef      	b.n	8005bbe <_printf_i+0x14a>
 8005bde:	4665      	mov	r5, ip
 8005be0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005be4:	fb02 3311 	mls	r3, r2, r1, r3
 8005be8:	5cc3      	ldrb	r3, [r0, r3]
 8005bea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005bee:	460b      	mov	r3, r1
 8005bf0:	2900      	cmp	r1, #0
 8005bf2:	d1f5      	bne.n	8005be0 <_printf_i+0x16c>
 8005bf4:	e7b9      	b.n	8005b6a <_printf_i+0xf6>
 8005bf6:	6813      	ldr	r3, [r2, #0]
 8005bf8:	6825      	ldr	r5, [r4, #0]
 8005bfa:	6961      	ldr	r1, [r4, #20]
 8005bfc:	1d18      	adds	r0, r3, #4
 8005bfe:	6010      	str	r0, [r2, #0]
 8005c00:	0628      	lsls	r0, r5, #24
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	d501      	bpl.n	8005c0a <_printf_i+0x196>
 8005c06:	6019      	str	r1, [r3, #0]
 8005c08:	e002      	b.n	8005c10 <_printf_i+0x19c>
 8005c0a:	066a      	lsls	r2, r5, #25
 8005c0c:	d5fb      	bpl.n	8005c06 <_printf_i+0x192>
 8005c0e:	8019      	strh	r1, [r3, #0]
 8005c10:	2300      	movs	r3, #0
 8005c12:	6123      	str	r3, [r4, #16]
 8005c14:	4665      	mov	r5, ip
 8005c16:	e7b9      	b.n	8005b8c <_printf_i+0x118>
 8005c18:	6813      	ldr	r3, [r2, #0]
 8005c1a:	1d19      	adds	r1, r3, #4
 8005c1c:	6011      	str	r1, [r2, #0]
 8005c1e:	681d      	ldr	r5, [r3, #0]
 8005c20:	6862      	ldr	r2, [r4, #4]
 8005c22:	2100      	movs	r1, #0
 8005c24:	4628      	mov	r0, r5
 8005c26:	f7fb f883 	bl	8000d30 <memchr>
 8005c2a:	b108      	cbz	r0, 8005c30 <_printf_i+0x1bc>
 8005c2c:	1b40      	subs	r0, r0, r5
 8005c2e:	6060      	str	r0, [r4, #4]
 8005c30:	6863      	ldr	r3, [r4, #4]
 8005c32:	6123      	str	r3, [r4, #16]
 8005c34:	2300      	movs	r3, #0
 8005c36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c3a:	e7a7      	b.n	8005b8c <_printf_i+0x118>
 8005c3c:	6923      	ldr	r3, [r4, #16]
 8005c3e:	462a      	mov	r2, r5
 8005c40:	4639      	mov	r1, r7
 8005c42:	4630      	mov	r0, r6
 8005c44:	47c0      	blx	r8
 8005c46:	3001      	adds	r0, #1
 8005c48:	d0aa      	beq.n	8005ba0 <_printf_i+0x12c>
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	079b      	lsls	r3, r3, #30
 8005c4e:	d413      	bmi.n	8005c78 <_printf_i+0x204>
 8005c50:	68e0      	ldr	r0, [r4, #12]
 8005c52:	9b03      	ldr	r3, [sp, #12]
 8005c54:	4298      	cmp	r0, r3
 8005c56:	bfb8      	it	lt
 8005c58:	4618      	movlt	r0, r3
 8005c5a:	e7a3      	b.n	8005ba4 <_printf_i+0x130>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	464a      	mov	r2, r9
 8005c60:	4639      	mov	r1, r7
 8005c62:	4630      	mov	r0, r6
 8005c64:	47c0      	blx	r8
 8005c66:	3001      	adds	r0, #1
 8005c68:	d09a      	beq.n	8005ba0 <_printf_i+0x12c>
 8005c6a:	3501      	adds	r5, #1
 8005c6c:	68e3      	ldr	r3, [r4, #12]
 8005c6e:	9a03      	ldr	r2, [sp, #12]
 8005c70:	1a9b      	subs	r3, r3, r2
 8005c72:	42ab      	cmp	r3, r5
 8005c74:	dcf2      	bgt.n	8005c5c <_printf_i+0x1e8>
 8005c76:	e7eb      	b.n	8005c50 <_printf_i+0x1dc>
 8005c78:	2500      	movs	r5, #0
 8005c7a:	f104 0919 	add.w	r9, r4, #25
 8005c7e:	e7f5      	b.n	8005c6c <_printf_i+0x1f8>
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1ac      	bne.n	8005bde <_printf_i+0x16a>
 8005c84:	7803      	ldrb	r3, [r0, #0]
 8005c86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c8a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c8e:	e76c      	b.n	8005b6a <_printf_i+0xf6>
 8005c90:	0800990e 	.word	0x0800990e
 8005c94:	0800991f 	.word	0x0800991f

08005c98 <iprintf>:
 8005c98:	b40f      	push	{r0, r1, r2, r3}
 8005c9a:	4b0a      	ldr	r3, [pc, #40]	; (8005cc4 <iprintf+0x2c>)
 8005c9c:	b513      	push	{r0, r1, r4, lr}
 8005c9e:	681c      	ldr	r4, [r3, #0]
 8005ca0:	b124      	cbz	r4, 8005cac <iprintf+0x14>
 8005ca2:	69a3      	ldr	r3, [r4, #24]
 8005ca4:	b913      	cbnz	r3, 8005cac <iprintf+0x14>
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	f001 f866 	bl	8006d78 <__sinit>
 8005cac:	ab05      	add	r3, sp, #20
 8005cae:	9a04      	ldr	r2, [sp, #16]
 8005cb0:	68a1      	ldr	r1, [r4, #8]
 8005cb2:	9301      	str	r3, [sp, #4]
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f001 fd29 	bl	800770c <_vfiprintf_r>
 8005cba:	b002      	add	sp, #8
 8005cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cc0:	b004      	add	sp, #16
 8005cc2:	4770      	bx	lr
 8005cc4:	2000004c 	.word	0x2000004c

08005cc8 <_puts_r>:
 8005cc8:	b570      	push	{r4, r5, r6, lr}
 8005cca:	460e      	mov	r6, r1
 8005ccc:	4605      	mov	r5, r0
 8005cce:	b118      	cbz	r0, 8005cd8 <_puts_r+0x10>
 8005cd0:	6983      	ldr	r3, [r0, #24]
 8005cd2:	b90b      	cbnz	r3, 8005cd8 <_puts_r+0x10>
 8005cd4:	f001 f850 	bl	8006d78 <__sinit>
 8005cd8:	69ab      	ldr	r3, [r5, #24]
 8005cda:	68ac      	ldr	r4, [r5, #8]
 8005cdc:	b913      	cbnz	r3, 8005ce4 <_puts_r+0x1c>
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f001 f84a 	bl	8006d78 <__sinit>
 8005ce4:	4b23      	ldr	r3, [pc, #140]	; (8005d74 <_puts_r+0xac>)
 8005ce6:	429c      	cmp	r4, r3
 8005ce8:	d117      	bne.n	8005d1a <_puts_r+0x52>
 8005cea:	686c      	ldr	r4, [r5, #4]
 8005cec:	89a3      	ldrh	r3, [r4, #12]
 8005cee:	071b      	lsls	r3, r3, #28
 8005cf0:	d51d      	bpl.n	8005d2e <_puts_r+0x66>
 8005cf2:	6923      	ldr	r3, [r4, #16]
 8005cf4:	b1db      	cbz	r3, 8005d2e <_puts_r+0x66>
 8005cf6:	3e01      	subs	r6, #1
 8005cf8:	68a3      	ldr	r3, [r4, #8]
 8005cfa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	60a3      	str	r3, [r4, #8]
 8005d02:	b9e9      	cbnz	r1, 8005d40 <_puts_r+0x78>
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	da2e      	bge.n	8005d66 <_puts_r+0x9e>
 8005d08:	4622      	mov	r2, r4
 8005d0a:	210a      	movs	r1, #10
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	f000 f83f 	bl	8005d90 <__swbuf_r>
 8005d12:	3001      	adds	r0, #1
 8005d14:	d011      	beq.n	8005d3a <_puts_r+0x72>
 8005d16:	200a      	movs	r0, #10
 8005d18:	e011      	b.n	8005d3e <_puts_r+0x76>
 8005d1a:	4b17      	ldr	r3, [pc, #92]	; (8005d78 <_puts_r+0xb0>)
 8005d1c:	429c      	cmp	r4, r3
 8005d1e:	d101      	bne.n	8005d24 <_puts_r+0x5c>
 8005d20:	68ac      	ldr	r4, [r5, #8]
 8005d22:	e7e3      	b.n	8005cec <_puts_r+0x24>
 8005d24:	4b15      	ldr	r3, [pc, #84]	; (8005d7c <_puts_r+0xb4>)
 8005d26:	429c      	cmp	r4, r3
 8005d28:	bf08      	it	eq
 8005d2a:	68ec      	ldreq	r4, [r5, #12]
 8005d2c:	e7de      	b.n	8005cec <_puts_r+0x24>
 8005d2e:	4621      	mov	r1, r4
 8005d30:	4628      	mov	r0, r5
 8005d32:	f000 f87f 	bl	8005e34 <__swsetup_r>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d0dd      	beq.n	8005cf6 <_puts_r+0x2e>
 8005d3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d3e:	bd70      	pop	{r4, r5, r6, pc}
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	da04      	bge.n	8005d4e <_puts_r+0x86>
 8005d44:	69a2      	ldr	r2, [r4, #24]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	dc06      	bgt.n	8005d58 <_puts_r+0x90>
 8005d4a:	290a      	cmp	r1, #10
 8005d4c:	d004      	beq.n	8005d58 <_puts_r+0x90>
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	6022      	str	r2, [r4, #0]
 8005d54:	7019      	strb	r1, [r3, #0]
 8005d56:	e7cf      	b.n	8005cf8 <_puts_r+0x30>
 8005d58:	4622      	mov	r2, r4
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	f000 f818 	bl	8005d90 <__swbuf_r>
 8005d60:	3001      	adds	r0, #1
 8005d62:	d1c9      	bne.n	8005cf8 <_puts_r+0x30>
 8005d64:	e7e9      	b.n	8005d3a <_puts_r+0x72>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	200a      	movs	r0, #10
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	6022      	str	r2, [r4, #0]
 8005d6e:	7018      	strb	r0, [r3, #0]
 8005d70:	e7e5      	b.n	8005d3e <_puts_r+0x76>
 8005d72:	bf00      	nop
 8005d74:	08009960 	.word	0x08009960
 8005d78:	08009980 	.word	0x08009980
 8005d7c:	08009940 	.word	0x08009940

08005d80 <puts>:
 8005d80:	4b02      	ldr	r3, [pc, #8]	; (8005d8c <puts+0xc>)
 8005d82:	4601      	mov	r1, r0
 8005d84:	6818      	ldr	r0, [r3, #0]
 8005d86:	f7ff bf9f 	b.w	8005cc8 <_puts_r>
 8005d8a:	bf00      	nop
 8005d8c:	2000004c 	.word	0x2000004c

08005d90 <__swbuf_r>:
 8005d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d92:	460e      	mov	r6, r1
 8005d94:	4614      	mov	r4, r2
 8005d96:	4605      	mov	r5, r0
 8005d98:	b118      	cbz	r0, 8005da2 <__swbuf_r+0x12>
 8005d9a:	6983      	ldr	r3, [r0, #24]
 8005d9c:	b90b      	cbnz	r3, 8005da2 <__swbuf_r+0x12>
 8005d9e:	f000 ffeb 	bl	8006d78 <__sinit>
 8005da2:	4b21      	ldr	r3, [pc, #132]	; (8005e28 <__swbuf_r+0x98>)
 8005da4:	429c      	cmp	r4, r3
 8005da6:	d12a      	bne.n	8005dfe <__swbuf_r+0x6e>
 8005da8:	686c      	ldr	r4, [r5, #4]
 8005daa:	69a3      	ldr	r3, [r4, #24]
 8005dac:	60a3      	str	r3, [r4, #8]
 8005dae:	89a3      	ldrh	r3, [r4, #12]
 8005db0:	071a      	lsls	r2, r3, #28
 8005db2:	d52e      	bpl.n	8005e12 <__swbuf_r+0x82>
 8005db4:	6923      	ldr	r3, [r4, #16]
 8005db6:	b363      	cbz	r3, 8005e12 <__swbuf_r+0x82>
 8005db8:	6923      	ldr	r3, [r4, #16]
 8005dba:	6820      	ldr	r0, [r4, #0]
 8005dbc:	1ac0      	subs	r0, r0, r3
 8005dbe:	6963      	ldr	r3, [r4, #20]
 8005dc0:	b2f6      	uxtb	r6, r6
 8005dc2:	4283      	cmp	r3, r0
 8005dc4:	4637      	mov	r7, r6
 8005dc6:	dc04      	bgt.n	8005dd2 <__swbuf_r+0x42>
 8005dc8:	4621      	mov	r1, r4
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f000 ff6a 	bl	8006ca4 <_fflush_r>
 8005dd0:	bb28      	cbnz	r0, 8005e1e <__swbuf_r+0x8e>
 8005dd2:	68a3      	ldr	r3, [r4, #8]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	60a3      	str	r3, [r4, #8]
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	6022      	str	r2, [r4, #0]
 8005dde:	701e      	strb	r6, [r3, #0]
 8005de0:	6963      	ldr	r3, [r4, #20]
 8005de2:	3001      	adds	r0, #1
 8005de4:	4283      	cmp	r3, r0
 8005de6:	d004      	beq.n	8005df2 <__swbuf_r+0x62>
 8005de8:	89a3      	ldrh	r3, [r4, #12]
 8005dea:	07db      	lsls	r3, r3, #31
 8005dec:	d519      	bpl.n	8005e22 <__swbuf_r+0x92>
 8005dee:	2e0a      	cmp	r6, #10
 8005df0:	d117      	bne.n	8005e22 <__swbuf_r+0x92>
 8005df2:	4621      	mov	r1, r4
 8005df4:	4628      	mov	r0, r5
 8005df6:	f000 ff55 	bl	8006ca4 <_fflush_r>
 8005dfa:	b190      	cbz	r0, 8005e22 <__swbuf_r+0x92>
 8005dfc:	e00f      	b.n	8005e1e <__swbuf_r+0x8e>
 8005dfe:	4b0b      	ldr	r3, [pc, #44]	; (8005e2c <__swbuf_r+0x9c>)
 8005e00:	429c      	cmp	r4, r3
 8005e02:	d101      	bne.n	8005e08 <__swbuf_r+0x78>
 8005e04:	68ac      	ldr	r4, [r5, #8]
 8005e06:	e7d0      	b.n	8005daa <__swbuf_r+0x1a>
 8005e08:	4b09      	ldr	r3, [pc, #36]	; (8005e30 <__swbuf_r+0xa0>)
 8005e0a:	429c      	cmp	r4, r3
 8005e0c:	bf08      	it	eq
 8005e0e:	68ec      	ldreq	r4, [r5, #12]
 8005e10:	e7cb      	b.n	8005daa <__swbuf_r+0x1a>
 8005e12:	4621      	mov	r1, r4
 8005e14:	4628      	mov	r0, r5
 8005e16:	f000 f80d 	bl	8005e34 <__swsetup_r>
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	d0cc      	beq.n	8005db8 <__swbuf_r+0x28>
 8005e1e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005e22:	4638      	mov	r0, r7
 8005e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e26:	bf00      	nop
 8005e28:	08009960 	.word	0x08009960
 8005e2c:	08009980 	.word	0x08009980
 8005e30:	08009940 	.word	0x08009940

08005e34 <__swsetup_r>:
 8005e34:	4b32      	ldr	r3, [pc, #200]	; (8005f00 <__swsetup_r+0xcc>)
 8005e36:	b570      	push	{r4, r5, r6, lr}
 8005e38:	681d      	ldr	r5, [r3, #0]
 8005e3a:	4606      	mov	r6, r0
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	b125      	cbz	r5, 8005e4a <__swsetup_r+0x16>
 8005e40:	69ab      	ldr	r3, [r5, #24]
 8005e42:	b913      	cbnz	r3, 8005e4a <__swsetup_r+0x16>
 8005e44:	4628      	mov	r0, r5
 8005e46:	f000 ff97 	bl	8006d78 <__sinit>
 8005e4a:	4b2e      	ldr	r3, [pc, #184]	; (8005f04 <__swsetup_r+0xd0>)
 8005e4c:	429c      	cmp	r4, r3
 8005e4e:	d10f      	bne.n	8005e70 <__swsetup_r+0x3c>
 8005e50:	686c      	ldr	r4, [r5, #4]
 8005e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	0715      	lsls	r5, r2, #28
 8005e5a:	d42c      	bmi.n	8005eb6 <__swsetup_r+0x82>
 8005e5c:	06d0      	lsls	r0, r2, #27
 8005e5e:	d411      	bmi.n	8005e84 <__swsetup_r+0x50>
 8005e60:	2209      	movs	r2, #9
 8005e62:	6032      	str	r2, [r6, #0]
 8005e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e68:	81a3      	strh	r3, [r4, #12]
 8005e6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e6e:	e03e      	b.n	8005eee <__swsetup_r+0xba>
 8005e70:	4b25      	ldr	r3, [pc, #148]	; (8005f08 <__swsetup_r+0xd4>)
 8005e72:	429c      	cmp	r4, r3
 8005e74:	d101      	bne.n	8005e7a <__swsetup_r+0x46>
 8005e76:	68ac      	ldr	r4, [r5, #8]
 8005e78:	e7eb      	b.n	8005e52 <__swsetup_r+0x1e>
 8005e7a:	4b24      	ldr	r3, [pc, #144]	; (8005f0c <__swsetup_r+0xd8>)
 8005e7c:	429c      	cmp	r4, r3
 8005e7e:	bf08      	it	eq
 8005e80:	68ec      	ldreq	r4, [r5, #12]
 8005e82:	e7e6      	b.n	8005e52 <__swsetup_r+0x1e>
 8005e84:	0751      	lsls	r1, r2, #29
 8005e86:	d512      	bpl.n	8005eae <__swsetup_r+0x7a>
 8005e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e8a:	b141      	cbz	r1, 8005e9e <__swsetup_r+0x6a>
 8005e8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e90:	4299      	cmp	r1, r3
 8005e92:	d002      	beq.n	8005e9a <__swsetup_r+0x66>
 8005e94:	4630      	mov	r0, r6
 8005e96:	f001 fb67 	bl	8007568 <_free_r>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	6363      	str	r3, [r4, #52]	; 0x34
 8005e9e:	89a3      	ldrh	r3, [r4, #12]
 8005ea0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ea4:	81a3      	strh	r3, [r4, #12]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	6063      	str	r3, [r4, #4]
 8005eaa:	6923      	ldr	r3, [r4, #16]
 8005eac:	6023      	str	r3, [r4, #0]
 8005eae:	89a3      	ldrh	r3, [r4, #12]
 8005eb0:	f043 0308 	orr.w	r3, r3, #8
 8005eb4:	81a3      	strh	r3, [r4, #12]
 8005eb6:	6923      	ldr	r3, [r4, #16]
 8005eb8:	b94b      	cbnz	r3, 8005ece <__swsetup_r+0x9a>
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ec4:	d003      	beq.n	8005ece <__swsetup_r+0x9a>
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	4630      	mov	r0, r6
 8005eca:	f001 f811 	bl	8006ef0 <__smakebuf_r>
 8005ece:	89a2      	ldrh	r2, [r4, #12]
 8005ed0:	f012 0301 	ands.w	r3, r2, #1
 8005ed4:	d00c      	beq.n	8005ef0 <__swsetup_r+0xbc>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60a3      	str	r3, [r4, #8]
 8005eda:	6963      	ldr	r3, [r4, #20]
 8005edc:	425b      	negs	r3, r3
 8005ede:	61a3      	str	r3, [r4, #24]
 8005ee0:	6923      	ldr	r3, [r4, #16]
 8005ee2:	b953      	cbnz	r3, 8005efa <__swsetup_r+0xc6>
 8005ee4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ee8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005eec:	d1ba      	bne.n	8005e64 <__swsetup_r+0x30>
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	0792      	lsls	r2, r2, #30
 8005ef2:	bf58      	it	pl
 8005ef4:	6963      	ldrpl	r3, [r4, #20]
 8005ef6:	60a3      	str	r3, [r4, #8]
 8005ef8:	e7f2      	b.n	8005ee0 <__swsetup_r+0xac>
 8005efa:	2000      	movs	r0, #0
 8005efc:	e7f7      	b.n	8005eee <__swsetup_r+0xba>
 8005efe:	bf00      	nop
 8005f00:	2000004c 	.word	0x2000004c
 8005f04:	08009960 	.word	0x08009960
 8005f08:	08009980 	.word	0x08009980
 8005f0c:	08009940 	.word	0x08009940

08005f10 <quorem>:
 8005f10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f14:	6903      	ldr	r3, [r0, #16]
 8005f16:	690c      	ldr	r4, [r1, #16]
 8005f18:	42a3      	cmp	r3, r4
 8005f1a:	4680      	mov	r8, r0
 8005f1c:	f2c0 8082 	blt.w	8006024 <quorem+0x114>
 8005f20:	3c01      	subs	r4, #1
 8005f22:	f101 0714 	add.w	r7, r1, #20
 8005f26:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005f2a:	f100 0614 	add.w	r6, r0, #20
 8005f2e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005f32:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005f36:	eb06 030c 	add.w	r3, r6, ip
 8005f3a:	3501      	adds	r5, #1
 8005f3c:	eb07 090c 	add.w	r9, r7, ip
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	fbb0 f5f5 	udiv	r5, r0, r5
 8005f46:	b395      	cbz	r5, 8005fae <quorem+0x9e>
 8005f48:	f04f 0a00 	mov.w	sl, #0
 8005f4c:	4638      	mov	r0, r7
 8005f4e:	46b6      	mov	lr, r6
 8005f50:	46d3      	mov	fp, sl
 8005f52:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f56:	b293      	uxth	r3, r2
 8005f58:	fb05 a303 	mla	r3, r5, r3, sl
 8005f5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	ebab 0303 	sub.w	r3, fp, r3
 8005f66:	0c12      	lsrs	r2, r2, #16
 8005f68:	f8de b000 	ldr.w	fp, [lr]
 8005f6c:	fb05 a202 	mla	r2, r5, r2, sl
 8005f70:	fa13 f38b 	uxtah	r3, r3, fp
 8005f74:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005f78:	fa1f fb82 	uxth.w	fp, r2
 8005f7c:	f8de 2000 	ldr.w	r2, [lr]
 8005f80:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005f84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f8e:	4581      	cmp	r9, r0
 8005f90:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005f94:	f84e 3b04 	str.w	r3, [lr], #4
 8005f98:	d2db      	bcs.n	8005f52 <quorem+0x42>
 8005f9a:	f856 300c 	ldr.w	r3, [r6, ip]
 8005f9e:	b933      	cbnz	r3, 8005fae <quorem+0x9e>
 8005fa0:	9b01      	ldr	r3, [sp, #4]
 8005fa2:	3b04      	subs	r3, #4
 8005fa4:	429e      	cmp	r6, r3
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	d330      	bcc.n	800600c <quorem+0xfc>
 8005faa:	f8c8 4010 	str.w	r4, [r8, #16]
 8005fae:	4640      	mov	r0, r8
 8005fb0:	f001 fa06 	bl	80073c0 <__mcmp>
 8005fb4:	2800      	cmp	r0, #0
 8005fb6:	db25      	blt.n	8006004 <quorem+0xf4>
 8005fb8:	3501      	adds	r5, #1
 8005fba:	4630      	mov	r0, r6
 8005fbc:	f04f 0c00 	mov.w	ip, #0
 8005fc0:	f857 2b04 	ldr.w	r2, [r7], #4
 8005fc4:	f8d0 e000 	ldr.w	lr, [r0]
 8005fc8:	b293      	uxth	r3, r2
 8005fca:	ebac 0303 	sub.w	r3, ip, r3
 8005fce:	0c12      	lsrs	r2, r2, #16
 8005fd0:	fa13 f38e 	uxtah	r3, r3, lr
 8005fd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005fd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fe2:	45b9      	cmp	r9, r7
 8005fe4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005fe8:	f840 3b04 	str.w	r3, [r0], #4
 8005fec:	d2e8      	bcs.n	8005fc0 <quorem+0xb0>
 8005fee:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005ff2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005ff6:	b92a      	cbnz	r2, 8006004 <quorem+0xf4>
 8005ff8:	3b04      	subs	r3, #4
 8005ffa:	429e      	cmp	r6, r3
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	d30b      	bcc.n	8006018 <quorem+0x108>
 8006000:	f8c8 4010 	str.w	r4, [r8, #16]
 8006004:	4628      	mov	r0, r5
 8006006:	b003      	add	sp, #12
 8006008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600c:	6812      	ldr	r2, [r2, #0]
 800600e:	3b04      	subs	r3, #4
 8006010:	2a00      	cmp	r2, #0
 8006012:	d1ca      	bne.n	8005faa <quorem+0x9a>
 8006014:	3c01      	subs	r4, #1
 8006016:	e7c5      	b.n	8005fa4 <quorem+0x94>
 8006018:	6812      	ldr	r2, [r2, #0]
 800601a:	3b04      	subs	r3, #4
 800601c:	2a00      	cmp	r2, #0
 800601e:	d1ef      	bne.n	8006000 <quorem+0xf0>
 8006020:	3c01      	subs	r4, #1
 8006022:	e7ea      	b.n	8005ffa <quorem+0xea>
 8006024:	2000      	movs	r0, #0
 8006026:	e7ee      	b.n	8006006 <quorem+0xf6>

08006028 <_dtoa_r>:
 8006028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800602c:	ec57 6b10 	vmov	r6, r7, d0
 8006030:	b097      	sub	sp, #92	; 0x5c
 8006032:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006034:	9106      	str	r1, [sp, #24]
 8006036:	4604      	mov	r4, r0
 8006038:	920b      	str	r2, [sp, #44]	; 0x2c
 800603a:	9312      	str	r3, [sp, #72]	; 0x48
 800603c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006040:	e9cd 6700 	strd	r6, r7, [sp]
 8006044:	b93d      	cbnz	r5, 8006056 <_dtoa_r+0x2e>
 8006046:	2010      	movs	r0, #16
 8006048:	f000 ff92 	bl	8006f70 <malloc>
 800604c:	6260      	str	r0, [r4, #36]	; 0x24
 800604e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006052:	6005      	str	r5, [r0, #0]
 8006054:	60c5      	str	r5, [r0, #12]
 8006056:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006058:	6819      	ldr	r1, [r3, #0]
 800605a:	b151      	cbz	r1, 8006072 <_dtoa_r+0x4a>
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	604a      	str	r2, [r1, #4]
 8006060:	2301      	movs	r3, #1
 8006062:	4093      	lsls	r3, r2
 8006064:	608b      	str	r3, [r1, #8]
 8006066:	4620      	mov	r0, r4
 8006068:	f000 ffc9 	bl	8006ffe <_Bfree>
 800606c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800606e:	2200      	movs	r2, #0
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	1e3b      	subs	r3, r7, #0
 8006074:	bfbb      	ittet	lt
 8006076:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800607a:	9301      	strlt	r3, [sp, #4]
 800607c:	2300      	movge	r3, #0
 800607e:	2201      	movlt	r2, #1
 8006080:	bfac      	ite	ge
 8006082:	f8c8 3000 	strge.w	r3, [r8]
 8006086:	f8c8 2000 	strlt.w	r2, [r8]
 800608a:	4baf      	ldr	r3, [pc, #700]	; (8006348 <_dtoa_r+0x320>)
 800608c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006090:	ea33 0308 	bics.w	r3, r3, r8
 8006094:	d114      	bne.n	80060c0 <_dtoa_r+0x98>
 8006096:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006098:	f242 730f 	movw	r3, #9999	; 0x270f
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	9b00      	ldr	r3, [sp, #0]
 80060a0:	b923      	cbnz	r3, 80060ac <_dtoa_r+0x84>
 80060a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80060a6:	2800      	cmp	r0, #0
 80060a8:	f000 8542 	beq.w	8006b30 <_dtoa_r+0xb08>
 80060ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060ae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800635c <_dtoa_r+0x334>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 8544 	beq.w	8006b40 <_dtoa_r+0xb18>
 80060b8:	f10b 0303 	add.w	r3, fp, #3
 80060bc:	f000 bd3e 	b.w	8006b3c <_dtoa_r+0xb14>
 80060c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80060c4:	2200      	movs	r2, #0
 80060c6:	2300      	movs	r3, #0
 80060c8:	4630      	mov	r0, r6
 80060ca:	4639      	mov	r1, r7
 80060cc:	f7fa fed6 	bl	8000e7c <__aeabi_dcmpeq>
 80060d0:	4681      	mov	r9, r0
 80060d2:	b168      	cbz	r0, 80060f0 <_dtoa_r+0xc8>
 80060d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060d6:	2301      	movs	r3, #1
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 8524 	beq.w	8006b2a <_dtoa_r+0xb02>
 80060e2:	4b9a      	ldr	r3, [pc, #616]	; (800634c <_dtoa_r+0x324>)
 80060e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060e6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80060ea:	6013      	str	r3, [r2, #0]
 80060ec:	f000 bd28 	b.w	8006b40 <_dtoa_r+0xb18>
 80060f0:	aa14      	add	r2, sp, #80	; 0x50
 80060f2:	a915      	add	r1, sp, #84	; 0x54
 80060f4:	ec47 6b10 	vmov	d0, r6, r7
 80060f8:	4620      	mov	r0, r4
 80060fa:	f001 f9d8 	bl	80074ae <__d2b>
 80060fe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006102:	9004      	str	r0, [sp, #16]
 8006104:	2d00      	cmp	r5, #0
 8006106:	d07c      	beq.n	8006202 <_dtoa_r+0x1da>
 8006108:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800610c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006110:	46b2      	mov	sl, r6
 8006112:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006116:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800611a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800611e:	2200      	movs	r2, #0
 8006120:	4b8b      	ldr	r3, [pc, #556]	; (8006350 <_dtoa_r+0x328>)
 8006122:	4650      	mov	r0, sl
 8006124:	4659      	mov	r1, fp
 8006126:	f7fa f85f 	bl	80001e8 <__aeabi_dsub>
 800612a:	a381      	add	r3, pc, #516	; (adr r3, 8006330 <_dtoa_r+0x308>)
 800612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006130:	f7fa fa12 	bl	8000558 <__aeabi_dmul>
 8006134:	a380      	add	r3, pc, #512	; (adr r3, 8006338 <_dtoa_r+0x310>)
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	f7fa f857 	bl	80001ec <__adddf3>
 800613e:	4606      	mov	r6, r0
 8006140:	4628      	mov	r0, r5
 8006142:	460f      	mov	r7, r1
 8006144:	f7fa f99e 	bl	8000484 <__aeabi_i2d>
 8006148:	a37d      	add	r3, pc, #500	; (adr r3, 8006340 <_dtoa_r+0x318>)
 800614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614e:	f7fa fa03 	bl	8000558 <__aeabi_dmul>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4630      	mov	r0, r6
 8006158:	4639      	mov	r1, r7
 800615a:	f7fa f847 	bl	80001ec <__adddf3>
 800615e:	4606      	mov	r6, r0
 8006160:	460f      	mov	r7, r1
 8006162:	f7fa fed3 	bl	8000f0c <__aeabi_d2iz>
 8006166:	2200      	movs	r2, #0
 8006168:	4682      	mov	sl, r0
 800616a:	2300      	movs	r3, #0
 800616c:	4630      	mov	r0, r6
 800616e:	4639      	mov	r1, r7
 8006170:	f7fa fe8e 	bl	8000e90 <__aeabi_dcmplt>
 8006174:	b148      	cbz	r0, 800618a <_dtoa_r+0x162>
 8006176:	4650      	mov	r0, sl
 8006178:	f7fa f984 	bl	8000484 <__aeabi_i2d>
 800617c:	4632      	mov	r2, r6
 800617e:	463b      	mov	r3, r7
 8006180:	f7fa fe7c 	bl	8000e7c <__aeabi_dcmpeq>
 8006184:	b908      	cbnz	r0, 800618a <_dtoa_r+0x162>
 8006186:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800618a:	f1ba 0f16 	cmp.w	sl, #22
 800618e:	d859      	bhi.n	8006244 <_dtoa_r+0x21c>
 8006190:	4970      	ldr	r1, [pc, #448]	; (8006354 <_dtoa_r+0x32c>)
 8006192:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006196:	e9dd 2300 	ldrd	r2, r3, [sp]
 800619a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800619e:	f7fa fe95 	bl	8000ecc <__aeabi_dcmpgt>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d050      	beq.n	8006248 <_dtoa_r+0x220>
 80061a6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80061aa:	2300      	movs	r3, #0
 80061ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80061ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061b0:	1b5d      	subs	r5, r3, r5
 80061b2:	f1b5 0801 	subs.w	r8, r5, #1
 80061b6:	bf49      	itett	mi
 80061b8:	f1c5 0301 	rsbmi	r3, r5, #1
 80061bc:	2300      	movpl	r3, #0
 80061be:	9305      	strmi	r3, [sp, #20]
 80061c0:	f04f 0800 	movmi.w	r8, #0
 80061c4:	bf58      	it	pl
 80061c6:	9305      	strpl	r3, [sp, #20]
 80061c8:	f1ba 0f00 	cmp.w	sl, #0
 80061cc:	db3e      	blt.n	800624c <_dtoa_r+0x224>
 80061ce:	2300      	movs	r3, #0
 80061d0:	44d0      	add	r8, sl
 80061d2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80061d6:	9307      	str	r3, [sp, #28]
 80061d8:	9b06      	ldr	r3, [sp, #24]
 80061da:	2b09      	cmp	r3, #9
 80061dc:	f200 8090 	bhi.w	8006300 <_dtoa_r+0x2d8>
 80061e0:	2b05      	cmp	r3, #5
 80061e2:	bfc4      	itt	gt
 80061e4:	3b04      	subgt	r3, #4
 80061e6:	9306      	strgt	r3, [sp, #24]
 80061e8:	9b06      	ldr	r3, [sp, #24]
 80061ea:	f1a3 0302 	sub.w	r3, r3, #2
 80061ee:	bfcc      	ite	gt
 80061f0:	2500      	movgt	r5, #0
 80061f2:	2501      	movle	r5, #1
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	f200 808f 	bhi.w	8006318 <_dtoa_r+0x2f0>
 80061fa:	e8df f003 	tbb	[pc, r3]
 80061fe:	7f7d      	.short	0x7f7d
 8006200:	7131      	.short	0x7131
 8006202:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006206:	441d      	add	r5, r3
 8006208:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800620c:	2820      	cmp	r0, #32
 800620e:	dd13      	ble.n	8006238 <_dtoa_r+0x210>
 8006210:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006214:	9b00      	ldr	r3, [sp, #0]
 8006216:	fa08 f800 	lsl.w	r8, r8, r0
 800621a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800621e:	fa23 f000 	lsr.w	r0, r3, r0
 8006222:	ea48 0000 	orr.w	r0, r8, r0
 8006226:	f7fa f91d 	bl	8000464 <__aeabi_ui2d>
 800622a:	2301      	movs	r3, #1
 800622c:	4682      	mov	sl, r0
 800622e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006232:	3d01      	subs	r5, #1
 8006234:	9313      	str	r3, [sp, #76]	; 0x4c
 8006236:	e772      	b.n	800611e <_dtoa_r+0xf6>
 8006238:	9b00      	ldr	r3, [sp, #0]
 800623a:	f1c0 0020 	rsb	r0, r0, #32
 800623e:	fa03 f000 	lsl.w	r0, r3, r0
 8006242:	e7f0      	b.n	8006226 <_dtoa_r+0x1fe>
 8006244:	2301      	movs	r3, #1
 8006246:	e7b1      	b.n	80061ac <_dtoa_r+0x184>
 8006248:	900f      	str	r0, [sp, #60]	; 0x3c
 800624a:	e7b0      	b.n	80061ae <_dtoa_r+0x186>
 800624c:	9b05      	ldr	r3, [sp, #20]
 800624e:	eba3 030a 	sub.w	r3, r3, sl
 8006252:	9305      	str	r3, [sp, #20]
 8006254:	f1ca 0300 	rsb	r3, sl, #0
 8006258:	9307      	str	r3, [sp, #28]
 800625a:	2300      	movs	r3, #0
 800625c:	930e      	str	r3, [sp, #56]	; 0x38
 800625e:	e7bb      	b.n	80061d8 <_dtoa_r+0x1b0>
 8006260:	2301      	movs	r3, #1
 8006262:	930a      	str	r3, [sp, #40]	; 0x28
 8006264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006266:	2b00      	cmp	r3, #0
 8006268:	dd59      	ble.n	800631e <_dtoa_r+0x2f6>
 800626a:	9302      	str	r3, [sp, #8]
 800626c:	4699      	mov	r9, r3
 800626e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006270:	2200      	movs	r2, #0
 8006272:	6072      	str	r2, [r6, #4]
 8006274:	2204      	movs	r2, #4
 8006276:	f102 0014 	add.w	r0, r2, #20
 800627a:	4298      	cmp	r0, r3
 800627c:	6871      	ldr	r1, [r6, #4]
 800627e:	d953      	bls.n	8006328 <_dtoa_r+0x300>
 8006280:	4620      	mov	r0, r4
 8006282:	f000 fe88 	bl	8006f96 <_Balloc>
 8006286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006288:	6030      	str	r0, [r6, #0]
 800628a:	f1b9 0f0e 	cmp.w	r9, #14
 800628e:	f8d3 b000 	ldr.w	fp, [r3]
 8006292:	f200 80e6 	bhi.w	8006462 <_dtoa_r+0x43a>
 8006296:	2d00      	cmp	r5, #0
 8006298:	f000 80e3 	beq.w	8006462 <_dtoa_r+0x43a>
 800629c:	ed9d 7b00 	vldr	d7, [sp]
 80062a0:	f1ba 0f00 	cmp.w	sl, #0
 80062a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80062a8:	dd74      	ble.n	8006394 <_dtoa_r+0x36c>
 80062aa:	4a2a      	ldr	r2, [pc, #168]	; (8006354 <_dtoa_r+0x32c>)
 80062ac:	f00a 030f 	and.w	r3, sl, #15
 80062b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80062b4:	ed93 7b00 	vldr	d7, [r3]
 80062b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80062bc:	06f0      	lsls	r0, r6, #27
 80062be:	ed8d 7b08 	vstr	d7, [sp, #32]
 80062c2:	d565      	bpl.n	8006390 <_dtoa_r+0x368>
 80062c4:	4b24      	ldr	r3, [pc, #144]	; (8006358 <_dtoa_r+0x330>)
 80062c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062ce:	f7fa fa6d 	bl	80007ac <__aeabi_ddiv>
 80062d2:	e9cd 0100 	strd	r0, r1, [sp]
 80062d6:	f006 060f 	and.w	r6, r6, #15
 80062da:	2503      	movs	r5, #3
 80062dc:	4f1e      	ldr	r7, [pc, #120]	; (8006358 <_dtoa_r+0x330>)
 80062de:	e04c      	b.n	800637a <_dtoa_r+0x352>
 80062e0:	2301      	movs	r3, #1
 80062e2:	930a      	str	r3, [sp, #40]	; 0x28
 80062e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062e6:	4453      	add	r3, sl
 80062e8:	f103 0901 	add.w	r9, r3, #1
 80062ec:	9302      	str	r3, [sp, #8]
 80062ee:	464b      	mov	r3, r9
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	bfb8      	it	lt
 80062f4:	2301      	movlt	r3, #1
 80062f6:	e7ba      	b.n	800626e <_dtoa_r+0x246>
 80062f8:	2300      	movs	r3, #0
 80062fa:	e7b2      	b.n	8006262 <_dtoa_r+0x23a>
 80062fc:	2300      	movs	r3, #0
 80062fe:	e7f0      	b.n	80062e2 <_dtoa_r+0x2ba>
 8006300:	2501      	movs	r5, #1
 8006302:	2300      	movs	r3, #0
 8006304:	9306      	str	r3, [sp, #24]
 8006306:	950a      	str	r5, [sp, #40]	; 0x28
 8006308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800630c:	9302      	str	r3, [sp, #8]
 800630e:	4699      	mov	r9, r3
 8006310:	2200      	movs	r2, #0
 8006312:	2312      	movs	r3, #18
 8006314:	920b      	str	r2, [sp, #44]	; 0x2c
 8006316:	e7aa      	b.n	800626e <_dtoa_r+0x246>
 8006318:	2301      	movs	r3, #1
 800631a:	930a      	str	r3, [sp, #40]	; 0x28
 800631c:	e7f4      	b.n	8006308 <_dtoa_r+0x2e0>
 800631e:	2301      	movs	r3, #1
 8006320:	9302      	str	r3, [sp, #8]
 8006322:	4699      	mov	r9, r3
 8006324:	461a      	mov	r2, r3
 8006326:	e7f5      	b.n	8006314 <_dtoa_r+0x2ec>
 8006328:	3101      	adds	r1, #1
 800632a:	6071      	str	r1, [r6, #4]
 800632c:	0052      	lsls	r2, r2, #1
 800632e:	e7a2      	b.n	8006276 <_dtoa_r+0x24e>
 8006330:	636f4361 	.word	0x636f4361
 8006334:	3fd287a7 	.word	0x3fd287a7
 8006338:	8b60c8b3 	.word	0x8b60c8b3
 800633c:	3fc68a28 	.word	0x3fc68a28
 8006340:	509f79fb 	.word	0x509f79fb
 8006344:	3fd34413 	.word	0x3fd34413
 8006348:	7ff00000 	.word	0x7ff00000
 800634c:	0800990d 	.word	0x0800990d
 8006350:	3ff80000 	.word	0x3ff80000
 8006354:	080099c8 	.word	0x080099c8
 8006358:	080099a0 	.word	0x080099a0
 800635c:	08009939 	.word	0x08009939
 8006360:	07f1      	lsls	r1, r6, #31
 8006362:	d508      	bpl.n	8006376 <_dtoa_r+0x34e>
 8006364:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800636c:	f7fa f8f4 	bl	8000558 <__aeabi_dmul>
 8006370:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006374:	3501      	adds	r5, #1
 8006376:	1076      	asrs	r6, r6, #1
 8006378:	3708      	adds	r7, #8
 800637a:	2e00      	cmp	r6, #0
 800637c:	d1f0      	bne.n	8006360 <_dtoa_r+0x338>
 800637e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006382:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006386:	f7fa fa11 	bl	80007ac <__aeabi_ddiv>
 800638a:	e9cd 0100 	strd	r0, r1, [sp]
 800638e:	e01a      	b.n	80063c6 <_dtoa_r+0x39e>
 8006390:	2502      	movs	r5, #2
 8006392:	e7a3      	b.n	80062dc <_dtoa_r+0x2b4>
 8006394:	f000 80a0 	beq.w	80064d8 <_dtoa_r+0x4b0>
 8006398:	f1ca 0600 	rsb	r6, sl, #0
 800639c:	4b9f      	ldr	r3, [pc, #636]	; (800661c <_dtoa_r+0x5f4>)
 800639e:	4fa0      	ldr	r7, [pc, #640]	; (8006620 <_dtoa_r+0x5f8>)
 80063a0:	f006 020f 	and.w	r2, r6, #15
 80063a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063b0:	f7fa f8d2 	bl	8000558 <__aeabi_dmul>
 80063b4:	e9cd 0100 	strd	r0, r1, [sp]
 80063b8:	1136      	asrs	r6, r6, #4
 80063ba:	2300      	movs	r3, #0
 80063bc:	2502      	movs	r5, #2
 80063be:	2e00      	cmp	r6, #0
 80063c0:	d17f      	bne.n	80064c2 <_dtoa_r+0x49a>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e1      	bne.n	800638a <_dtoa_r+0x362>
 80063c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 8087 	beq.w	80064dc <_dtoa_r+0x4b4>
 80063ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80063d2:	2200      	movs	r2, #0
 80063d4:	4b93      	ldr	r3, [pc, #588]	; (8006624 <_dtoa_r+0x5fc>)
 80063d6:	4630      	mov	r0, r6
 80063d8:	4639      	mov	r1, r7
 80063da:	f7fa fd59 	bl	8000e90 <__aeabi_dcmplt>
 80063de:	2800      	cmp	r0, #0
 80063e0:	d07c      	beq.n	80064dc <_dtoa_r+0x4b4>
 80063e2:	f1b9 0f00 	cmp.w	r9, #0
 80063e6:	d079      	beq.n	80064dc <_dtoa_r+0x4b4>
 80063e8:	9b02      	ldr	r3, [sp, #8]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	dd35      	ble.n	800645a <_dtoa_r+0x432>
 80063ee:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80063f2:	9308      	str	r3, [sp, #32]
 80063f4:	4639      	mov	r1, r7
 80063f6:	2200      	movs	r2, #0
 80063f8:	4b8b      	ldr	r3, [pc, #556]	; (8006628 <_dtoa_r+0x600>)
 80063fa:	4630      	mov	r0, r6
 80063fc:	f7fa f8ac 	bl	8000558 <__aeabi_dmul>
 8006400:	e9cd 0100 	strd	r0, r1, [sp]
 8006404:	9f02      	ldr	r7, [sp, #8]
 8006406:	3501      	adds	r5, #1
 8006408:	4628      	mov	r0, r5
 800640a:	f7fa f83b 	bl	8000484 <__aeabi_i2d>
 800640e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006412:	f7fa f8a1 	bl	8000558 <__aeabi_dmul>
 8006416:	2200      	movs	r2, #0
 8006418:	4b84      	ldr	r3, [pc, #528]	; (800662c <_dtoa_r+0x604>)
 800641a:	f7f9 fee7 	bl	80001ec <__adddf3>
 800641e:	4605      	mov	r5, r0
 8006420:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006424:	2f00      	cmp	r7, #0
 8006426:	d15d      	bne.n	80064e4 <_dtoa_r+0x4bc>
 8006428:	2200      	movs	r2, #0
 800642a:	4b81      	ldr	r3, [pc, #516]	; (8006630 <_dtoa_r+0x608>)
 800642c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006430:	f7f9 feda 	bl	80001e8 <__aeabi_dsub>
 8006434:	462a      	mov	r2, r5
 8006436:	4633      	mov	r3, r6
 8006438:	e9cd 0100 	strd	r0, r1, [sp]
 800643c:	f7fa fd46 	bl	8000ecc <__aeabi_dcmpgt>
 8006440:	2800      	cmp	r0, #0
 8006442:	f040 8288 	bne.w	8006956 <_dtoa_r+0x92e>
 8006446:	462a      	mov	r2, r5
 8006448:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800644c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006450:	f7fa fd1e 	bl	8000e90 <__aeabi_dcmplt>
 8006454:	2800      	cmp	r0, #0
 8006456:	f040 827c 	bne.w	8006952 <_dtoa_r+0x92a>
 800645a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800645e:	e9cd 2300 	strd	r2, r3, [sp]
 8006462:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006464:	2b00      	cmp	r3, #0
 8006466:	f2c0 8150 	blt.w	800670a <_dtoa_r+0x6e2>
 800646a:	f1ba 0f0e 	cmp.w	sl, #14
 800646e:	f300 814c 	bgt.w	800670a <_dtoa_r+0x6e2>
 8006472:	4b6a      	ldr	r3, [pc, #424]	; (800661c <_dtoa_r+0x5f4>)
 8006474:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006478:	ed93 7b00 	vldr	d7, [r3]
 800647c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800647e:	2b00      	cmp	r3, #0
 8006480:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006484:	f280 80d8 	bge.w	8006638 <_dtoa_r+0x610>
 8006488:	f1b9 0f00 	cmp.w	r9, #0
 800648c:	f300 80d4 	bgt.w	8006638 <_dtoa_r+0x610>
 8006490:	f040 825e 	bne.w	8006950 <_dtoa_r+0x928>
 8006494:	2200      	movs	r2, #0
 8006496:	4b66      	ldr	r3, [pc, #408]	; (8006630 <_dtoa_r+0x608>)
 8006498:	ec51 0b17 	vmov	r0, r1, d7
 800649c:	f7fa f85c 	bl	8000558 <__aeabi_dmul>
 80064a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064a4:	f7fa fd08 	bl	8000eb8 <__aeabi_dcmpge>
 80064a8:	464f      	mov	r7, r9
 80064aa:	464e      	mov	r6, r9
 80064ac:	2800      	cmp	r0, #0
 80064ae:	f040 8234 	bne.w	800691a <_dtoa_r+0x8f2>
 80064b2:	2331      	movs	r3, #49	; 0x31
 80064b4:	f10b 0501 	add.w	r5, fp, #1
 80064b8:	f88b 3000 	strb.w	r3, [fp]
 80064bc:	f10a 0a01 	add.w	sl, sl, #1
 80064c0:	e22f      	b.n	8006922 <_dtoa_r+0x8fa>
 80064c2:	07f2      	lsls	r2, r6, #31
 80064c4:	d505      	bpl.n	80064d2 <_dtoa_r+0x4aa>
 80064c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064ca:	f7fa f845 	bl	8000558 <__aeabi_dmul>
 80064ce:	3501      	adds	r5, #1
 80064d0:	2301      	movs	r3, #1
 80064d2:	1076      	asrs	r6, r6, #1
 80064d4:	3708      	adds	r7, #8
 80064d6:	e772      	b.n	80063be <_dtoa_r+0x396>
 80064d8:	2502      	movs	r5, #2
 80064da:	e774      	b.n	80063c6 <_dtoa_r+0x39e>
 80064dc:	f8cd a020 	str.w	sl, [sp, #32]
 80064e0:	464f      	mov	r7, r9
 80064e2:	e791      	b.n	8006408 <_dtoa_r+0x3e0>
 80064e4:	4b4d      	ldr	r3, [pc, #308]	; (800661c <_dtoa_r+0x5f4>)
 80064e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80064ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80064ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d047      	beq.n	8006584 <_dtoa_r+0x55c>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	2000      	movs	r0, #0
 80064fa:	494e      	ldr	r1, [pc, #312]	; (8006634 <_dtoa_r+0x60c>)
 80064fc:	f7fa f956 	bl	80007ac <__aeabi_ddiv>
 8006500:	462a      	mov	r2, r5
 8006502:	4633      	mov	r3, r6
 8006504:	f7f9 fe70 	bl	80001e8 <__aeabi_dsub>
 8006508:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800650c:	465d      	mov	r5, fp
 800650e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006512:	f7fa fcfb 	bl	8000f0c <__aeabi_d2iz>
 8006516:	4606      	mov	r6, r0
 8006518:	f7f9 ffb4 	bl	8000484 <__aeabi_i2d>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006524:	f7f9 fe60 	bl	80001e8 <__aeabi_dsub>
 8006528:	3630      	adds	r6, #48	; 0x30
 800652a:	f805 6b01 	strb.w	r6, [r5], #1
 800652e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006532:	e9cd 0100 	strd	r0, r1, [sp]
 8006536:	f7fa fcab 	bl	8000e90 <__aeabi_dcmplt>
 800653a:	2800      	cmp	r0, #0
 800653c:	d163      	bne.n	8006606 <_dtoa_r+0x5de>
 800653e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006542:	2000      	movs	r0, #0
 8006544:	4937      	ldr	r1, [pc, #220]	; (8006624 <_dtoa_r+0x5fc>)
 8006546:	f7f9 fe4f 	bl	80001e8 <__aeabi_dsub>
 800654a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800654e:	f7fa fc9f 	bl	8000e90 <__aeabi_dcmplt>
 8006552:	2800      	cmp	r0, #0
 8006554:	f040 80b7 	bne.w	80066c6 <_dtoa_r+0x69e>
 8006558:	eba5 030b 	sub.w	r3, r5, fp
 800655c:	429f      	cmp	r7, r3
 800655e:	f77f af7c 	ble.w	800645a <_dtoa_r+0x432>
 8006562:	2200      	movs	r2, #0
 8006564:	4b30      	ldr	r3, [pc, #192]	; (8006628 <_dtoa_r+0x600>)
 8006566:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800656a:	f7f9 fff5 	bl	8000558 <__aeabi_dmul>
 800656e:	2200      	movs	r2, #0
 8006570:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006574:	4b2c      	ldr	r3, [pc, #176]	; (8006628 <_dtoa_r+0x600>)
 8006576:	e9dd 0100 	ldrd	r0, r1, [sp]
 800657a:	f7f9 ffed 	bl	8000558 <__aeabi_dmul>
 800657e:	e9cd 0100 	strd	r0, r1, [sp]
 8006582:	e7c4      	b.n	800650e <_dtoa_r+0x4e6>
 8006584:	462a      	mov	r2, r5
 8006586:	4633      	mov	r3, r6
 8006588:	f7f9 ffe6 	bl	8000558 <__aeabi_dmul>
 800658c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006590:	eb0b 0507 	add.w	r5, fp, r7
 8006594:	465e      	mov	r6, fp
 8006596:	e9dd 0100 	ldrd	r0, r1, [sp]
 800659a:	f7fa fcb7 	bl	8000f0c <__aeabi_d2iz>
 800659e:	4607      	mov	r7, r0
 80065a0:	f7f9 ff70 	bl	8000484 <__aeabi_i2d>
 80065a4:	3730      	adds	r7, #48	; 0x30
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065ae:	f7f9 fe1b 	bl	80001e8 <__aeabi_dsub>
 80065b2:	f806 7b01 	strb.w	r7, [r6], #1
 80065b6:	42ae      	cmp	r6, r5
 80065b8:	e9cd 0100 	strd	r0, r1, [sp]
 80065bc:	f04f 0200 	mov.w	r2, #0
 80065c0:	d126      	bne.n	8006610 <_dtoa_r+0x5e8>
 80065c2:	4b1c      	ldr	r3, [pc, #112]	; (8006634 <_dtoa_r+0x60c>)
 80065c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065c8:	f7f9 fe10 	bl	80001ec <__adddf3>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065d4:	f7fa fc7a 	bl	8000ecc <__aeabi_dcmpgt>
 80065d8:	2800      	cmp	r0, #0
 80065da:	d174      	bne.n	80066c6 <_dtoa_r+0x69e>
 80065dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80065e0:	2000      	movs	r0, #0
 80065e2:	4914      	ldr	r1, [pc, #80]	; (8006634 <_dtoa_r+0x60c>)
 80065e4:	f7f9 fe00 	bl	80001e8 <__aeabi_dsub>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065f0:	f7fa fc4e 	bl	8000e90 <__aeabi_dcmplt>
 80065f4:	2800      	cmp	r0, #0
 80065f6:	f43f af30 	beq.w	800645a <_dtoa_r+0x432>
 80065fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065fe:	2b30      	cmp	r3, #48	; 0x30
 8006600:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006604:	d002      	beq.n	800660c <_dtoa_r+0x5e4>
 8006606:	f8dd a020 	ldr.w	sl, [sp, #32]
 800660a:	e04a      	b.n	80066a2 <_dtoa_r+0x67a>
 800660c:	4615      	mov	r5, r2
 800660e:	e7f4      	b.n	80065fa <_dtoa_r+0x5d2>
 8006610:	4b05      	ldr	r3, [pc, #20]	; (8006628 <_dtoa_r+0x600>)
 8006612:	f7f9 ffa1 	bl	8000558 <__aeabi_dmul>
 8006616:	e9cd 0100 	strd	r0, r1, [sp]
 800661a:	e7bc      	b.n	8006596 <_dtoa_r+0x56e>
 800661c:	080099c8 	.word	0x080099c8
 8006620:	080099a0 	.word	0x080099a0
 8006624:	3ff00000 	.word	0x3ff00000
 8006628:	40240000 	.word	0x40240000
 800662c:	401c0000 	.word	0x401c0000
 8006630:	40140000 	.word	0x40140000
 8006634:	3fe00000 	.word	0x3fe00000
 8006638:	e9dd 6700 	ldrd	r6, r7, [sp]
 800663c:	465d      	mov	r5, fp
 800663e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006642:	4630      	mov	r0, r6
 8006644:	4639      	mov	r1, r7
 8006646:	f7fa f8b1 	bl	80007ac <__aeabi_ddiv>
 800664a:	f7fa fc5f 	bl	8000f0c <__aeabi_d2iz>
 800664e:	4680      	mov	r8, r0
 8006650:	f7f9 ff18 	bl	8000484 <__aeabi_i2d>
 8006654:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006658:	f7f9 ff7e 	bl	8000558 <__aeabi_dmul>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	4630      	mov	r0, r6
 8006662:	4639      	mov	r1, r7
 8006664:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006668:	f7f9 fdbe 	bl	80001e8 <__aeabi_dsub>
 800666c:	f805 6b01 	strb.w	r6, [r5], #1
 8006670:	eba5 060b 	sub.w	r6, r5, fp
 8006674:	45b1      	cmp	r9, r6
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	d139      	bne.n	80066f0 <_dtoa_r+0x6c8>
 800667c:	f7f9 fdb6 	bl	80001ec <__adddf3>
 8006680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006684:	4606      	mov	r6, r0
 8006686:	460f      	mov	r7, r1
 8006688:	f7fa fc20 	bl	8000ecc <__aeabi_dcmpgt>
 800668c:	b9c8      	cbnz	r0, 80066c2 <_dtoa_r+0x69a>
 800668e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006692:	4630      	mov	r0, r6
 8006694:	4639      	mov	r1, r7
 8006696:	f7fa fbf1 	bl	8000e7c <__aeabi_dcmpeq>
 800669a:	b110      	cbz	r0, 80066a2 <_dtoa_r+0x67a>
 800669c:	f018 0f01 	tst.w	r8, #1
 80066a0:	d10f      	bne.n	80066c2 <_dtoa_r+0x69a>
 80066a2:	9904      	ldr	r1, [sp, #16]
 80066a4:	4620      	mov	r0, r4
 80066a6:	f000 fcaa 	bl	8006ffe <_Bfree>
 80066aa:	2300      	movs	r3, #0
 80066ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066ae:	702b      	strb	r3, [r5, #0]
 80066b0:	f10a 0301 	add.w	r3, sl, #1
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 8241 	beq.w	8006b40 <_dtoa_r+0xb18>
 80066be:	601d      	str	r5, [r3, #0]
 80066c0:	e23e      	b.n	8006b40 <_dtoa_r+0xb18>
 80066c2:	f8cd a020 	str.w	sl, [sp, #32]
 80066c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80066ca:	2a39      	cmp	r2, #57	; 0x39
 80066cc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80066d0:	d108      	bne.n	80066e4 <_dtoa_r+0x6bc>
 80066d2:	459b      	cmp	fp, r3
 80066d4:	d10a      	bne.n	80066ec <_dtoa_r+0x6c4>
 80066d6:	9b08      	ldr	r3, [sp, #32]
 80066d8:	3301      	adds	r3, #1
 80066da:	9308      	str	r3, [sp, #32]
 80066dc:	2330      	movs	r3, #48	; 0x30
 80066de:	f88b 3000 	strb.w	r3, [fp]
 80066e2:	465b      	mov	r3, fp
 80066e4:	781a      	ldrb	r2, [r3, #0]
 80066e6:	3201      	adds	r2, #1
 80066e8:	701a      	strb	r2, [r3, #0]
 80066ea:	e78c      	b.n	8006606 <_dtoa_r+0x5de>
 80066ec:	461d      	mov	r5, r3
 80066ee:	e7ea      	b.n	80066c6 <_dtoa_r+0x69e>
 80066f0:	2200      	movs	r2, #0
 80066f2:	4b9b      	ldr	r3, [pc, #620]	; (8006960 <_dtoa_r+0x938>)
 80066f4:	f7f9 ff30 	bl	8000558 <__aeabi_dmul>
 80066f8:	2200      	movs	r2, #0
 80066fa:	2300      	movs	r3, #0
 80066fc:	4606      	mov	r6, r0
 80066fe:	460f      	mov	r7, r1
 8006700:	f7fa fbbc 	bl	8000e7c <__aeabi_dcmpeq>
 8006704:	2800      	cmp	r0, #0
 8006706:	d09a      	beq.n	800663e <_dtoa_r+0x616>
 8006708:	e7cb      	b.n	80066a2 <_dtoa_r+0x67a>
 800670a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800670c:	2a00      	cmp	r2, #0
 800670e:	f000 808b 	beq.w	8006828 <_dtoa_r+0x800>
 8006712:	9a06      	ldr	r2, [sp, #24]
 8006714:	2a01      	cmp	r2, #1
 8006716:	dc6e      	bgt.n	80067f6 <_dtoa_r+0x7ce>
 8006718:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800671a:	2a00      	cmp	r2, #0
 800671c:	d067      	beq.n	80067ee <_dtoa_r+0x7c6>
 800671e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006722:	9f07      	ldr	r7, [sp, #28]
 8006724:	9d05      	ldr	r5, [sp, #20]
 8006726:	9a05      	ldr	r2, [sp, #20]
 8006728:	2101      	movs	r1, #1
 800672a:	441a      	add	r2, r3
 800672c:	4620      	mov	r0, r4
 800672e:	9205      	str	r2, [sp, #20]
 8006730:	4498      	add	r8, r3
 8006732:	f000 fd04 	bl	800713e <__i2b>
 8006736:	4606      	mov	r6, r0
 8006738:	2d00      	cmp	r5, #0
 800673a:	dd0c      	ble.n	8006756 <_dtoa_r+0x72e>
 800673c:	f1b8 0f00 	cmp.w	r8, #0
 8006740:	dd09      	ble.n	8006756 <_dtoa_r+0x72e>
 8006742:	4545      	cmp	r5, r8
 8006744:	9a05      	ldr	r2, [sp, #20]
 8006746:	462b      	mov	r3, r5
 8006748:	bfa8      	it	ge
 800674a:	4643      	movge	r3, r8
 800674c:	1ad2      	subs	r2, r2, r3
 800674e:	9205      	str	r2, [sp, #20]
 8006750:	1aed      	subs	r5, r5, r3
 8006752:	eba8 0803 	sub.w	r8, r8, r3
 8006756:	9b07      	ldr	r3, [sp, #28]
 8006758:	b1eb      	cbz	r3, 8006796 <_dtoa_r+0x76e>
 800675a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800675c:	2b00      	cmp	r3, #0
 800675e:	d067      	beq.n	8006830 <_dtoa_r+0x808>
 8006760:	b18f      	cbz	r7, 8006786 <_dtoa_r+0x75e>
 8006762:	4631      	mov	r1, r6
 8006764:	463a      	mov	r2, r7
 8006766:	4620      	mov	r0, r4
 8006768:	f000 fd88 	bl	800727c <__pow5mult>
 800676c:	9a04      	ldr	r2, [sp, #16]
 800676e:	4601      	mov	r1, r0
 8006770:	4606      	mov	r6, r0
 8006772:	4620      	mov	r0, r4
 8006774:	f000 fcec 	bl	8007150 <__multiply>
 8006778:	9904      	ldr	r1, [sp, #16]
 800677a:	9008      	str	r0, [sp, #32]
 800677c:	4620      	mov	r0, r4
 800677e:	f000 fc3e 	bl	8006ffe <_Bfree>
 8006782:	9b08      	ldr	r3, [sp, #32]
 8006784:	9304      	str	r3, [sp, #16]
 8006786:	9b07      	ldr	r3, [sp, #28]
 8006788:	1bda      	subs	r2, r3, r7
 800678a:	d004      	beq.n	8006796 <_dtoa_r+0x76e>
 800678c:	9904      	ldr	r1, [sp, #16]
 800678e:	4620      	mov	r0, r4
 8006790:	f000 fd74 	bl	800727c <__pow5mult>
 8006794:	9004      	str	r0, [sp, #16]
 8006796:	2101      	movs	r1, #1
 8006798:	4620      	mov	r0, r4
 800679a:	f000 fcd0 	bl	800713e <__i2b>
 800679e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067a0:	4607      	mov	r7, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 81d0 	beq.w	8006b48 <_dtoa_r+0xb20>
 80067a8:	461a      	mov	r2, r3
 80067aa:	4601      	mov	r1, r0
 80067ac:	4620      	mov	r0, r4
 80067ae:	f000 fd65 	bl	800727c <__pow5mult>
 80067b2:	9b06      	ldr	r3, [sp, #24]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	4607      	mov	r7, r0
 80067b8:	dc40      	bgt.n	800683c <_dtoa_r+0x814>
 80067ba:	9b00      	ldr	r3, [sp, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d139      	bne.n	8006834 <_dtoa_r+0x80c>
 80067c0:	9b01      	ldr	r3, [sp, #4]
 80067c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d136      	bne.n	8006838 <_dtoa_r+0x810>
 80067ca:	9b01      	ldr	r3, [sp, #4]
 80067cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067d0:	0d1b      	lsrs	r3, r3, #20
 80067d2:	051b      	lsls	r3, r3, #20
 80067d4:	b12b      	cbz	r3, 80067e2 <_dtoa_r+0x7ba>
 80067d6:	9b05      	ldr	r3, [sp, #20]
 80067d8:	3301      	adds	r3, #1
 80067da:	9305      	str	r3, [sp, #20]
 80067dc:	f108 0801 	add.w	r8, r8, #1
 80067e0:	2301      	movs	r3, #1
 80067e2:	9307      	str	r3, [sp, #28]
 80067e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d12a      	bne.n	8006840 <_dtoa_r+0x818>
 80067ea:	2001      	movs	r0, #1
 80067ec:	e030      	b.n	8006850 <_dtoa_r+0x828>
 80067ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80067f4:	e795      	b.n	8006722 <_dtoa_r+0x6fa>
 80067f6:	9b07      	ldr	r3, [sp, #28]
 80067f8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80067fc:	42bb      	cmp	r3, r7
 80067fe:	bfbf      	itttt	lt
 8006800:	9b07      	ldrlt	r3, [sp, #28]
 8006802:	9707      	strlt	r7, [sp, #28]
 8006804:	1afa      	sublt	r2, r7, r3
 8006806:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006808:	bfbb      	ittet	lt
 800680a:	189b      	addlt	r3, r3, r2
 800680c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800680e:	1bdf      	subge	r7, r3, r7
 8006810:	2700      	movlt	r7, #0
 8006812:	f1b9 0f00 	cmp.w	r9, #0
 8006816:	bfb5      	itete	lt
 8006818:	9b05      	ldrlt	r3, [sp, #20]
 800681a:	9d05      	ldrge	r5, [sp, #20]
 800681c:	eba3 0509 	sublt.w	r5, r3, r9
 8006820:	464b      	movge	r3, r9
 8006822:	bfb8      	it	lt
 8006824:	2300      	movlt	r3, #0
 8006826:	e77e      	b.n	8006726 <_dtoa_r+0x6fe>
 8006828:	9f07      	ldr	r7, [sp, #28]
 800682a:	9d05      	ldr	r5, [sp, #20]
 800682c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800682e:	e783      	b.n	8006738 <_dtoa_r+0x710>
 8006830:	9a07      	ldr	r2, [sp, #28]
 8006832:	e7ab      	b.n	800678c <_dtoa_r+0x764>
 8006834:	2300      	movs	r3, #0
 8006836:	e7d4      	b.n	80067e2 <_dtoa_r+0x7ba>
 8006838:	9b00      	ldr	r3, [sp, #0]
 800683a:	e7d2      	b.n	80067e2 <_dtoa_r+0x7ba>
 800683c:	2300      	movs	r3, #0
 800683e:	9307      	str	r3, [sp, #28]
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006846:	6918      	ldr	r0, [r3, #16]
 8006848:	f000 fc2b 	bl	80070a2 <__hi0bits>
 800684c:	f1c0 0020 	rsb	r0, r0, #32
 8006850:	4440      	add	r0, r8
 8006852:	f010 001f 	ands.w	r0, r0, #31
 8006856:	d047      	beq.n	80068e8 <_dtoa_r+0x8c0>
 8006858:	f1c0 0320 	rsb	r3, r0, #32
 800685c:	2b04      	cmp	r3, #4
 800685e:	dd3b      	ble.n	80068d8 <_dtoa_r+0x8b0>
 8006860:	9b05      	ldr	r3, [sp, #20]
 8006862:	f1c0 001c 	rsb	r0, r0, #28
 8006866:	4403      	add	r3, r0
 8006868:	9305      	str	r3, [sp, #20]
 800686a:	4405      	add	r5, r0
 800686c:	4480      	add	r8, r0
 800686e:	9b05      	ldr	r3, [sp, #20]
 8006870:	2b00      	cmp	r3, #0
 8006872:	dd05      	ble.n	8006880 <_dtoa_r+0x858>
 8006874:	461a      	mov	r2, r3
 8006876:	9904      	ldr	r1, [sp, #16]
 8006878:	4620      	mov	r0, r4
 800687a:	f000 fd4d 	bl	8007318 <__lshift>
 800687e:	9004      	str	r0, [sp, #16]
 8006880:	f1b8 0f00 	cmp.w	r8, #0
 8006884:	dd05      	ble.n	8006892 <_dtoa_r+0x86a>
 8006886:	4639      	mov	r1, r7
 8006888:	4642      	mov	r2, r8
 800688a:	4620      	mov	r0, r4
 800688c:	f000 fd44 	bl	8007318 <__lshift>
 8006890:	4607      	mov	r7, r0
 8006892:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006894:	b353      	cbz	r3, 80068ec <_dtoa_r+0x8c4>
 8006896:	4639      	mov	r1, r7
 8006898:	9804      	ldr	r0, [sp, #16]
 800689a:	f000 fd91 	bl	80073c0 <__mcmp>
 800689e:	2800      	cmp	r0, #0
 80068a0:	da24      	bge.n	80068ec <_dtoa_r+0x8c4>
 80068a2:	2300      	movs	r3, #0
 80068a4:	220a      	movs	r2, #10
 80068a6:	9904      	ldr	r1, [sp, #16]
 80068a8:	4620      	mov	r0, r4
 80068aa:	f000 fbbf 	bl	800702c <__multadd>
 80068ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b0:	9004      	str	r0, [sp, #16]
 80068b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 814d 	beq.w	8006b56 <_dtoa_r+0xb2e>
 80068bc:	2300      	movs	r3, #0
 80068be:	4631      	mov	r1, r6
 80068c0:	220a      	movs	r2, #10
 80068c2:	4620      	mov	r0, r4
 80068c4:	f000 fbb2 	bl	800702c <__multadd>
 80068c8:	9b02      	ldr	r3, [sp, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	4606      	mov	r6, r0
 80068ce:	dc4f      	bgt.n	8006970 <_dtoa_r+0x948>
 80068d0:	9b06      	ldr	r3, [sp, #24]
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	dd4c      	ble.n	8006970 <_dtoa_r+0x948>
 80068d6:	e011      	b.n	80068fc <_dtoa_r+0x8d4>
 80068d8:	d0c9      	beq.n	800686e <_dtoa_r+0x846>
 80068da:	9a05      	ldr	r2, [sp, #20]
 80068dc:	331c      	adds	r3, #28
 80068de:	441a      	add	r2, r3
 80068e0:	9205      	str	r2, [sp, #20]
 80068e2:	441d      	add	r5, r3
 80068e4:	4498      	add	r8, r3
 80068e6:	e7c2      	b.n	800686e <_dtoa_r+0x846>
 80068e8:	4603      	mov	r3, r0
 80068ea:	e7f6      	b.n	80068da <_dtoa_r+0x8b2>
 80068ec:	f1b9 0f00 	cmp.w	r9, #0
 80068f0:	dc38      	bgt.n	8006964 <_dtoa_r+0x93c>
 80068f2:	9b06      	ldr	r3, [sp, #24]
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	dd35      	ble.n	8006964 <_dtoa_r+0x93c>
 80068f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80068fc:	9b02      	ldr	r3, [sp, #8]
 80068fe:	b963      	cbnz	r3, 800691a <_dtoa_r+0x8f2>
 8006900:	4639      	mov	r1, r7
 8006902:	2205      	movs	r2, #5
 8006904:	4620      	mov	r0, r4
 8006906:	f000 fb91 	bl	800702c <__multadd>
 800690a:	4601      	mov	r1, r0
 800690c:	4607      	mov	r7, r0
 800690e:	9804      	ldr	r0, [sp, #16]
 8006910:	f000 fd56 	bl	80073c0 <__mcmp>
 8006914:	2800      	cmp	r0, #0
 8006916:	f73f adcc 	bgt.w	80064b2 <_dtoa_r+0x48a>
 800691a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800691c:	465d      	mov	r5, fp
 800691e:	ea6f 0a03 	mvn.w	sl, r3
 8006922:	f04f 0900 	mov.w	r9, #0
 8006926:	4639      	mov	r1, r7
 8006928:	4620      	mov	r0, r4
 800692a:	f000 fb68 	bl	8006ffe <_Bfree>
 800692e:	2e00      	cmp	r6, #0
 8006930:	f43f aeb7 	beq.w	80066a2 <_dtoa_r+0x67a>
 8006934:	f1b9 0f00 	cmp.w	r9, #0
 8006938:	d005      	beq.n	8006946 <_dtoa_r+0x91e>
 800693a:	45b1      	cmp	r9, r6
 800693c:	d003      	beq.n	8006946 <_dtoa_r+0x91e>
 800693e:	4649      	mov	r1, r9
 8006940:	4620      	mov	r0, r4
 8006942:	f000 fb5c 	bl	8006ffe <_Bfree>
 8006946:	4631      	mov	r1, r6
 8006948:	4620      	mov	r0, r4
 800694a:	f000 fb58 	bl	8006ffe <_Bfree>
 800694e:	e6a8      	b.n	80066a2 <_dtoa_r+0x67a>
 8006950:	2700      	movs	r7, #0
 8006952:	463e      	mov	r6, r7
 8006954:	e7e1      	b.n	800691a <_dtoa_r+0x8f2>
 8006956:	f8dd a020 	ldr.w	sl, [sp, #32]
 800695a:	463e      	mov	r6, r7
 800695c:	e5a9      	b.n	80064b2 <_dtoa_r+0x48a>
 800695e:	bf00      	nop
 8006960:	40240000 	.word	0x40240000
 8006964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006966:	f8cd 9008 	str.w	r9, [sp, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 80fa 	beq.w	8006b64 <_dtoa_r+0xb3c>
 8006970:	2d00      	cmp	r5, #0
 8006972:	dd05      	ble.n	8006980 <_dtoa_r+0x958>
 8006974:	4631      	mov	r1, r6
 8006976:	462a      	mov	r2, r5
 8006978:	4620      	mov	r0, r4
 800697a:	f000 fccd 	bl	8007318 <__lshift>
 800697e:	4606      	mov	r6, r0
 8006980:	9b07      	ldr	r3, [sp, #28]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d04c      	beq.n	8006a20 <_dtoa_r+0x9f8>
 8006986:	6871      	ldr	r1, [r6, #4]
 8006988:	4620      	mov	r0, r4
 800698a:	f000 fb04 	bl	8006f96 <_Balloc>
 800698e:	6932      	ldr	r2, [r6, #16]
 8006990:	3202      	adds	r2, #2
 8006992:	4605      	mov	r5, r0
 8006994:	0092      	lsls	r2, r2, #2
 8006996:	f106 010c 	add.w	r1, r6, #12
 800699a:	300c      	adds	r0, #12
 800699c:	f000 faf0 	bl	8006f80 <memcpy>
 80069a0:	2201      	movs	r2, #1
 80069a2:	4629      	mov	r1, r5
 80069a4:	4620      	mov	r0, r4
 80069a6:	f000 fcb7 	bl	8007318 <__lshift>
 80069aa:	9b00      	ldr	r3, [sp, #0]
 80069ac:	f8cd b014 	str.w	fp, [sp, #20]
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	46b1      	mov	r9, r6
 80069b6:	9307      	str	r3, [sp, #28]
 80069b8:	4606      	mov	r6, r0
 80069ba:	4639      	mov	r1, r7
 80069bc:	9804      	ldr	r0, [sp, #16]
 80069be:	f7ff faa7 	bl	8005f10 <quorem>
 80069c2:	4649      	mov	r1, r9
 80069c4:	4605      	mov	r5, r0
 80069c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80069ca:	9804      	ldr	r0, [sp, #16]
 80069cc:	f000 fcf8 	bl	80073c0 <__mcmp>
 80069d0:	4632      	mov	r2, r6
 80069d2:	9000      	str	r0, [sp, #0]
 80069d4:	4639      	mov	r1, r7
 80069d6:	4620      	mov	r0, r4
 80069d8:	f000 fd0c 	bl	80073f4 <__mdiff>
 80069dc:	68c3      	ldr	r3, [r0, #12]
 80069de:	4602      	mov	r2, r0
 80069e0:	bb03      	cbnz	r3, 8006a24 <_dtoa_r+0x9fc>
 80069e2:	4601      	mov	r1, r0
 80069e4:	9008      	str	r0, [sp, #32]
 80069e6:	9804      	ldr	r0, [sp, #16]
 80069e8:	f000 fcea 	bl	80073c0 <__mcmp>
 80069ec:	9a08      	ldr	r2, [sp, #32]
 80069ee:	4603      	mov	r3, r0
 80069f0:	4611      	mov	r1, r2
 80069f2:	4620      	mov	r0, r4
 80069f4:	9308      	str	r3, [sp, #32]
 80069f6:	f000 fb02 	bl	8006ffe <_Bfree>
 80069fa:	9b08      	ldr	r3, [sp, #32]
 80069fc:	b9a3      	cbnz	r3, 8006a28 <_dtoa_r+0xa00>
 80069fe:	9a06      	ldr	r2, [sp, #24]
 8006a00:	b992      	cbnz	r2, 8006a28 <_dtoa_r+0xa00>
 8006a02:	9a07      	ldr	r2, [sp, #28]
 8006a04:	b982      	cbnz	r2, 8006a28 <_dtoa_r+0xa00>
 8006a06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a0a:	d029      	beq.n	8006a60 <_dtoa_r+0xa38>
 8006a0c:	9b00      	ldr	r3, [sp, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	dd01      	ble.n	8006a16 <_dtoa_r+0x9ee>
 8006a12:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006a16:	9b05      	ldr	r3, [sp, #20]
 8006a18:	1c5d      	adds	r5, r3, #1
 8006a1a:	f883 8000 	strb.w	r8, [r3]
 8006a1e:	e782      	b.n	8006926 <_dtoa_r+0x8fe>
 8006a20:	4630      	mov	r0, r6
 8006a22:	e7c2      	b.n	80069aa <_dtoa_r+0x982>
 8006a24:	2301      	movs	r3, #1
 8006a26:	e7e3      	b.n	80069f0 <_dtoa_r+0x9c8>
 8006a28:	9a00      	ldr	r2, [sp, #0]
 8006a2a:	2a00      	cmp	r2, #0
 8006a2c:	db04      	blt.n	8006a38 <_dtoa_r+0xa10>
 8006a2e:	d125      	bne.n	8006a7c <_dtoa_r+0xa54>
 8006a30:	9a06      	ldr	r2, [sp, #24]
 8006a32:	bb1a      	cbnz	r2, 8006a7c <_dtoa_r+0xa54>
 8006a34:	9a07      	ldr	r2, [sp, #28]
 8006a36:	bb0a      	cbnz	r2, 8006a7c <_dtoa_r+0xa54>
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	ddec      	ble.n	8006a16 <_dtoa_r+0x9ee>
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	9904      	ldr	r1, [sp, #16]
 8006a40:	4620      	mov	r0, r4
 8006a42:	f000 fc69 	bl	8007318 <__lshift>
 8006a46:	4639      	mov	r1, r7
 8006a48:	9004      	str	r0, [sp, #16]
 8006a4a:	f000 fcb9 	bl	80073c0 <__mcmp>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	dc03      	bgt.n	8006a5a <_dtoa_r+0xa32>
 8006a52:	d1e0      	bne.n	8006a16 <_dtoa_r+0x9ee>
 8006a54:	f018 0f01 	tst.w	r8, #1
 8006a58:	d0dd      	beq.n	8006a16 <_dtoa_r+0x9ee>
 8006a5a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a5e:	d1d8      	bne.n	8006a12 <_dtoa_r+0x9ea>
 8006a60:	9b05      	ldr	r3, [sp, #20]
 8006a62:	9a05      	ldr	r2, [sp, #20]
 8006a64:	1c5d      	adds	r5, r3, #1
 8006a66:	2339      	movs	r3, #57	; 0x39
 8006a68:	7013      	strb	r3, [r2, #0]
 8006a6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a6e:	2b39      	cmp	r3, #57	; 0x39
 8006a70:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006a74:	d04f      	beq.n	8006b16 <_dtoa_r+0xaee>
 8006a76:	3301      	adds	r3, #1
 8006a78:	7013      	strb	r3, [r2, #0]
 8006a7a:	e754      	b.n	8006926 <_dtoa_r+0x8fe>
 8006a7c:	9a05      	ldr	r2, [sp, #20]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f102 0501 	add.w	r5, r2, #1
 8006a84:	dd06      	ble.n	8006a94 <_dtoa_r+0xa6c>
 8006a86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a8a:	d0e9      	beq.n	8006a60 <_dtoa_r+0xa38>
 8006a8c:	f108 0801 	add.w	r8, r8, #1
 8006a90:	9b05      	ldr	r3, [sp, #20]
 8006a92:	e7c2      	b.n	8006a1a <_dtoa_r+0x9f2>
 8006a94:	9a02      	ldr	r2, [sp, #8]
 8006a96:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006a9a:	eba5 030b 	sub.w	r3, r5, fp
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d021      	beq.n	8006ae6 <_dtoa_r+0xabe>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	220a      	movs	r2, #10
 8006aa6:	9904      	ldr	r1, [sp, #16]
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f000 fabf 	bl	800702c <__multadd>
 8006aae:	45b1      	cmp	r9, r6
 8006ab0:	9004      	str	r0, [sp, #16]
 8006ab2:	f04f 0300 	mov.w	r3, #0
 8006ab6:	f04f 020a 	mov.w	r2, #10
 8006aba:	4649      	mov	r1, r9
 8006abc:	4620      	mov	r0, r4
 8006abe:	d105      	bne.n	8006acc <_dtoa_r+0xaa4>
 8006ac0:	f000 fab4 	bl	800702c <__multadd>
 8006ac4:	4681      	mov	r9, r0
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	9505      	str	r5, [sp, #20]
 8006aca:	e776      	b.n	80069ba <_dtoa_r+0x992>
 8006acc:	f000 faae 	bl	800702c <__multadd>
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	4681      	mov	r9, r0
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	220a      	movs	r2, #10
 8006ad8:	4620      	mov	r0, r4
 8006ada:	f000 faa7 	bl	800702c <__multadd>
 8006ade:	4606      	mov	r6, r0
 8006ae0:	e7f2      	b.n	8006ac8 <_dtoa_r+0xaa0>
 8006ae2:	f04f 0900 	mov.w	r9, #0
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	9904      	ldr	r1, [sp, #16]
 8006aea:	4620      	mov	r0, r4
 8006aec:	f000 fc14 	bl	8007318 <__lshift>
 8006af0:	4639      	mov	r1, r7
 8006af2:	9004      	str	r0, [sp, #16]
 8006af4:	f000 fc64 	bl	80073c0 <__mcmp>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	dcb6      	bgt.n	8006a6a <_dtoa_r+0xa42>
 8006afc:	d102      	bne.n	8006b04 <_dtoa_r+0xadc>
 8006afe:	f018 0f01 	tst.w	r8, #1
 8006b02:	d1b2      	bne.n	8006a6a <_dtoa_r+0xa42>
 8006b04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b08:	2b30      	cmp	r3, #48	; 0x30
 8006b0a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006b0e:	f47f af0a 	bne.w	8006926 <_dtoa_r+0x8fe>
 8006b12:	4615      	mov	r5, r2
 8006b14:	e7f6      	b.n	8006b04 <_dtoa_r+0xadc>
 8006b16:	4593      	cmp	fp, r2
 8006b18:	d105      	bne.n	8006b26 <_dtoa_r+0xafe>
 8006b1a:	2331      	movs	r3, #49	; 0x31
 8006b1c:	f10a 0a01 	add.w	sl, sl, #1
 8006b20:	f88b 3000 	strb.w	r3, [fp]
 8006b24:	e6ff      	b.n	8006926 <_dtoa_r+0x8fe>
 8006b26:	4615      	mov	r5, r2
 8006b28:	e79f      	b.n	8006a6a <_dtoa_r+0xa42>
 8006b2a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006b90 <_dtoa_r+0xb68>
 8006b2e:	e007      	b.n	8006b40 <_dtoa_r+0xb18>
 8006b30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b32:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006b94 <_dtoa_r+0xb6c>
 8006b36:	b11b      	cbz	r3, 8006b40 <_dtoa_r+0xb18>
 8006b38:	f10b 0308 	add.w	r3, fp, #8
 8006b3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b3e:	6013      	str	r3, [r2, #0]
 8006b40:	4658      	mov	r0, fp
 8006b42:	b017      	add	sp, #92	; 0x5c
 8006b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b48:	9b06      	ldr	r3, [sp, #24]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	f77f ae35 	ble.w	80067ba <_dtoa_r+0x792>
 8006b50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b52:	9307      	str	r3, [sp, #28]
 8006b54:	e649      	b.n	80067ea <_dtoa_r+0x7c2>
 8006b56:	9b02      	ldr	r3, [sp, #8]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	dc03      	bgt.n	8006b64 <_dtoa_r+0xb3c>
 8006b5c:	9b06      	ldr	r3, [sp, #24]
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	f73f aecc 	bgt.w	80068fc <_dtoa_r+0x8d4>
 8006b64:	465d      	mov	r5, fp
 8006b66:	4639      	mov	r1, r7
 8006b68:	9804      	ldr	r0, [sp, #16]
 8006b6a:	f7ff f9d1 	bl	8005f10 <quorem>
 8006b6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006b72:	f805 8b01 	strb.w	r8, [r5], #1
 8006b76:	9a02      	ldr	r2, [sp, #8]
 8006b78:	eba5 030b 	sub.w	r3, r5, fp
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	ddb0      	ble.n	8006ae2 <_dtoa_r+0xaba>
 8006b80:	2300      	movs	r3, #0
 8006b82:	220a      	movs	r2, #10
 8006b84:	9904      	ldr	r1, [sp, #16]
 8006b86:	4620      	mov	r0, r4
 8006b88:	f000 fa50 	bl	800702c <__multadd>
 8006b8c:	9004      	str	r0, [sp, #16]
 8006b8e:	e7ea      	b.n	8006b66 <_dtoa_r+0xb3e>
 8006b90:	0800990c 	.word	0x0800990c
 8006b94:	08009930 	.word	0x08009930

08006b98 <__sflush_r>:
 8006b98:	898a      	ldrh	r2, [r1, #12]
 8006b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b9e:	4605      	mov	r5, r0
 8006ba0:	0710      	lsls	r0, r2, #28
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	d458      	bmi.n	8006c58 <__sflush_r+0xc0>
 8006ba6:	684b      	ldr	r3, [r1, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	dc05      	bgt.n	8006bb8 <__sflush_r+0x20>
 8006bac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	dc02      	bgt.n	8006bb8 <__sflush_r+0x20>
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bba:	2e00      	cmp	r6, #0
 8006bbc:	d0f9      	beq.n	8006bb2 <__sflush_r+0x1a>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006bc4:	682f      	ldr	r7, [r5, #0]
 8006bc6:	6a21      	ldr	r1, [r4, #32]
 8006bc8:	602b      	str	r3, [r5, #0]
 8006bca:	d032      	beq.n	8006c32 <__sflush_r+0x9a>
 8006bcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006bce:	89a3      	ldrh	r3, [r4, #12]
 8006bd0:	075a      	lsls	r2, r3, #29
 8006bd2:	d505      	bpl.n	8006be0 <__sflush_r+0x48>
 8006bd4:	6863      	ldr	r3, [r4, #4]
 8006bd6:	1ac0      	subs	r0, r0, r3
 8006bd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bda:	b10b      	cbz	r3, 8006be0 <__sflush_r+0x48>
 8006bdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bde:	1ac0      	subs	r0, r0, r3
 8006be0:	2300      	movs	r3, #0
 8006be2:	4602      	mov	r2, r0
 8006be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006be6:	6a21      	ldr	r1, [r4, #32]
 8006be8:	4628      	mov	r0, r5
 8006bea:	47b0      	blx	r6
 8006bec:	1c43      	adds	r3, r0, #1
 8006bee:	89a3      	ldrh	r3, [r4, #12]
 8006bf0:	d106      	bne.n	8006c00 <__sflush_r+0x68>
 8006bf2:	6829      	ldr	r1, [r5, #0]
 8006bf4:	291d      	cmp	r1, #29
 8006bf6:	d848      	bhi.n	8006c8a <__sflush_r+0xf2>
 8006bf8:	4a29      	ldr	r2, [pc, #164]	; (8006ca0 <__sflush_r+0x108>)
 8006bfa:	40ca      	lsrs	r2, r1
 8006bfc:	07d6      	lsls	r6, r2, #31
 8006bfe:	d544      	bpl.n	8006c8a <__sflush_r+0xf2>
 8006c00:	2200      	movs	r2, #0
 8006c02:	6062      	str	r2, [r4, #4]
 8006c04:	04d9      	lsls	r1, r3, #19
 8006c06:	6922      	ldr	r2, [r4, #16]
 8006c08:	6022      	str	r2, [r4, #0]
 8006c0a:	d504      	bpl.n	8006c16 <__sflush_r+0x7e>
 8006c0c:	1c42      	adds	r2, r0, #1
 8006c0e:	d101      	bne.n	8006c14 <__sflush_r+0x7c>
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	b903      	cbnz	r3, 8006c16 <__sflush_r+0x7e>
 8006c14:	6560      	str	r0, [r4, #84]	; 0x54
 8006c16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c18:	602f      	str	r7, [r5, #0]
 8006c1a:	2900      	cmp	r1, #0
 8006c1c:	d0c9      	beq.n	8006bb2 <__sflush_r+0x1a>
 8006c1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c22:	4299      	cmp	r1, r3
 8006c24:	d002      	beq.n	8006c2c <__sflush_r+0x94>
 8006c26:	4628      	mov	r0, r5
 8006c28:	f000 fc9e 	bl	8007568 <_free_r>
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	6360      	str	r0, [r4, #52]	; 0x34
 8006c30:	e7c0      	b.n	8006bb4 <__sflush_r+0x1c>
 8006c32:	2301      	movs	r3, #1
 8006c34:	4628      	mov	r0, r5
 8006c36:	47b0      	blx	r6
 8006c38:	1c41      	adds	r1, r0, #1
 8006c3a:	d1c8      	bne.n	8006bce <__sflush_r+0x36>
 8006c3c:	682b      	ldr	r3, [r5, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d0c5      	beq.n	8006bce <__sflush_r+0x36>
 8006c42:	2b1d      	cmp	r3, #29
 8006c44:	d001      	beq.n	8006c4a <__sflush_r+0xb2>
 8006c46:	2b16      	cmp	r3, #22
 8006c48:	d101      	bne.n	8006c4e <__sflush_r+0xb6>
 8006c4a:	602f      	str	r7, [r5, #0]
 8006c4c:	e7b1      	b.n	8006bb2 <__sflush_r+0x1a>
 8006c4e:	89a3      	ldrh	r3, [r4, #12]
 8006c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c54:	81a3      	strh	r3, [r4, #12]
 8006c56:	e7ad      	b.n	8006bb4 <__sflush_r+0x1c>
 8006c58:	690f      	ldr	r7, [r1, #16]
 8006c5a:	2f00      	cmp	r7, #0
 8006c5c:	d0a9      	beq.n	8006bb2 <__sflush_r+0x1a>
 8006c5e:	0793      	lsls	r3, r2, #30
 8006c60:	680e      	ldr	r6, [r1, #0]
 8006c62:	bf08      	it	eq
 8006c64:	694b      	ldreq	r3, [r1, #20]
 8006c66:	600f      	str	r7, [r1, #0]
 8006c68:	bf18      	it	ne
 8006c6a:	2300      	movne	r3, #0
 8006c6c:	eba6 0807 	sub.w	r8, r6, r7
 8006c70:	608b      	str	r3, [r1, #8]
 8006c72:	f1b8 0f00 	cmp.w	r8, #0
 8006c76:	dd9c      	ble.n	8006bb2 <__sflush_r+0x1a>
 8006c78:	4643      	mov	r3, r8
 8006c7a:	463a      	mov	r2, r7
 8006c7c:	6a21      	ldr	r1, [r4, #32]
 8006c7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c80:	4628      	mov	r0, r5
 8006c82:	47b0      	blx	r6
 8006c84:	2800      	cmp	r0, #0
 8006c86:	dc06      	bgt.n	8006c96 <__sflush_r+0xfe>
 8006c88:	89a3      	ldrh	r3, [r4, #12]
 8006c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c8e:	81a3      	strh	r3, [r4, #12]
 8006c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c94:	e78e      	b.n	8006bb4 <__sflush_r+0x1c>
 8006c96:	4407      	add	r7, r0
 8006c98:	eba8 0800 	sub.w	r8, r8, r0
 8006c9c:	e7e9      	b.n	8006c72 <__sflush_r+0xda>
 8006c9e:	bf00      	nop
 8006ca0:	20400001 	.word	0x20400001

08006ca4 <_fflush_r>:
 8006ca4:	b538      	push	{r3, r4, r5, lr}
 8006ca6:	690b      	ldr	r3, [r1, #16]
 8006ca8:	4605      	mov	r5, r0
 8006caa:	460c      	mov	r4, r1
 8006cac:	b1db      	cbz	r3, 8006ce6 <_fflush_r+0x42>
 8006cae:	b118      	cbz	r0, 8006cb8 <_fflush_r+0x14>
 8006cb0:	6983      	ldr	r3, [r0, #24]
 8006cb2:	b90b      	cbnz	r3, 8006cb8 <_fflush_r+0x14>
 8006cb4:	f000 f860 	bl	8006d78 <__sinit>
 8006cb8:	4b0c      	ldr	r3, [pc, #48]	; (8006cec <_fflush_r+0x48>)
 8006cba:	429c      	cmp	r4, r3
 8006cbc:	d109      	bne.n	8006cd2 <_fflush_r+0x2e>
 8006cbe:	686c      	ldr	r4, [r5, #4]
 8006cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cc4:	b17b      	cbz	r3, 8006ce6 <_fflush_r+0x42>
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	4628      	mov	r0, r5
 8006cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cce:	f7ff bf63 	b.w	8006b98 <__sflush_r>
 8006cd2:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <_fflush_r+0x4c>)
 8006cd4:	429c      	cmp	r4, r3
 8006cd6:	d101      	bne.n	8006cdc <_fflush_r+0x38>
 8006cd8:	68ac      	ldr	r4, [r5, #8]
 8006cda:	e7f1      	b.n	8006cc0 <_fflush_r+0x1c>
 8006cdc:	4b05      	ldr	r3, [pc, #20]	; (8006cf4 <_fflush_r+0x50>)
 8006cde:	429c      	cmp	r4, r3
 8006ce0:	bf08      	it	eq
 8006ce2:	68ec      	ldreq	r4, [r5, #12]
 8006ce4:	e7ec      	b.n	8006cc0 <_fflush_r+0x1c>
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	bd38      	pop	{r3, r4, r5, pc}
 8006cea:	bf00      	nop
 8006cec:	08009960 	.word	0x08009960
 8006cf0:	08009980 	.word	0x08009980
 8006cf4:	08009940 	.word	0x08009940

08006cf8 <std>:
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	b510      	push	{r4, lr}
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8006d02:	6083      	str	r3, [r0, #8]
 8006d04:	8181      	strh	r1, [r0, #12]
 8006d06:	6643      	str	r3, [r0, #100]	; 0x64
 8006d08:	81c2      	strh	r2, [r0, #14]
 8006d0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d0e:	6183      	str	r3, [r0, #24]
 8006d10:	4619      	mov	r1, r3
 8006d12:	2208      	movs	r2, #8
 8006d14:	305c      	adds	r0, #92	; 0x5c
 8006d16:	f7fe fb5b 	bl	80053d0 <memset>
 8006d1a:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <std+0x38>)
 8006d1c:	6263      	str	r3, [r4, #36]	; 0x24
 8006d1e:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <std+0x3c>)
 8006d20:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d22:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <std+0x40>)
 8006d24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d26:	4b05      	ldr	r3, [pc, #20]	; (8006d3c <std+0x44>)
 8006d28:	6224      	str	r4, [r4, #32]
 8006d2a:	6323      	str	r3, [r4, #48]	; 0x30
 8006d2c:	bd10      	pop	{r4, pc}
 8006d2e:	bf00      	nop
 8006d30:	08007959 	.word	0x08007959
 8006d34:	0800797b 	.word	0x0800797b
 8006d38:	080079b3 	.word	0x080079b3
 8006d3c:	080079d7 	.word	0x080079d7

08006d40 <_cleanup_r>:
 8006d40:	4901      	ldr	r1, [pc, #4]	; (8006d48 <_cleanup_r+0x8>)
 8006d42:	f000 b885 	b.w	8006e50 <_fwalk_reent>
 8006d46:	bf00      	nop
 8006d48:	08006ca5 	.word	0x08006ca5

08006d4c <__sfmoreglue>:
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	1e4a      	subs	r2, r1, #1
 8006d50:	2568      	movs	r5, #104	; 0x68
 8006d52:	4355      	muls	r5, r2
 8006d54:	460e      	mov	r6, r1
 8006d56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d5a:	f000 fc53 	bl	8007604 <_malloc_r>
 8006d5e:	4604      	mov	r4, r0
 8006d60:	b140      	cbz	r0, 8006d74 <__sfmoreglue+0x28>
 8006d62:	2100      	movs	r1, #0
 8006d64:	e9c0 1600 	strd	r1, r6, [r0]
 8006d68:	300c      	adds	r0, #12
 8006d6a:	60a0      	str	r0, [r4, #8]
 8006d6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d70:	f7fe fb2e 	bl	80053d0 <memset>
 8006d74:	4620      	mov	r0, r4
 8006d76:	bd70      	pop	{r4, r5, r6, pc}

08006d78 <__sinit>:
 8006d78:	6983      	ldr	r3, [r0, #24]
 8006d7a:	b510      	push	{r4, lr}
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	bb33      	cbnz	r3, 8006dce <__sinit+0x56>
 8006d80:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006d84:	6503      	str	r3, [r0, #80]	; 0x50
 8006d86:	4b12      	ldr	r3, [pc, #72]	; (8006dd0 <__sinit+0x58>)
 8006d88:	4a12      	ldr	r2, [pc, #72]	; (8006dd4 <__sinit+0x5c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6282      	str	r2, [r0, #40]	; 0x28
 8006d8e:	4298      	cmp	r0, r3
 8006d90:	bf04      	itt	eq
 8006d92:	2301      	moveq	r3, #1
 8006d94:	6183      	streq	r3, [r0, #24]
 8006d96:	f000 f81f 	bl	8006dd8 <__sfp>
 8006d9a:	6060      	str	r0, [r4, #4]
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f000 f81b 	bl	8006dd8 <__sfp>
 8006da2:	60a0      	str	r0, [r4, #8]
 8006da4:	4620      	mov	r0, r4
 8006da6:	f000 f817 	bl	8006dd8 <__sfp>
 8006daa:	2200      	movs	r2, #0
 8006dac:	60e0      	str	r0, [r4, #12]
 8006dae:	2104      	movs	r1, #4
 8006db0:	6860      	ldr	r0, [r4, #4]
 8006db2:	f7ff ffa1 	bl	8006cf8 <std>
 8006db6:	2201      	movs	r2, #1
 8006db8:	2109      	movs	r1, #9
 8006dba:	68a0      	ldr	r0, [r4, #8]
 8006dbc:	f7ff ff9c 	bl	8006cf8 <std>
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	2112      	movs	r1, #18
 8006dc4:	68e0      	ldr	r0, [r4, #12]
 8006dc6:	f7ff ff97 	bl	8006cf8 <std>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	61a3      	str	r3, [r4, #24]
 8006dce:	bd10      	pop	{r4, pc}
 8006dd0:	080098f8 	.word	0x080098f8
 8006dd4:	08006d41 	.word	0x08006d41

08006dd8 <__sfp>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	4b1b      	ldr	r3, [pc, #108]	; (8006e48 <__sfp+0x70>)
 8006ddc:	681e      	ldr	r6, [r3, #0]
 8006dde:	69b3      	ldr	r3, [r6, #24]
 8006de0:	4607      	mov	r7, r0
 8006de2:	b913      	cbnz	r3, 8006dea <__sfp+0x12>
 8006de4:	4630      	mov	r0, r6
 8006de6:	f7ff ffc7 	bl	8006d78 <__sinit>
 8006dea:	3648      	adds	r6, #72	; 0x48
 8006dec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	d503      	bpl.n	8006dfc <__sfp+0x24>
 8006df4:	6833      	ldr	r3, [r6, #0]
 8006df6:	b133      	cbz	r3, 8006e06 <__sfp+0x2e>
 8006df8:	6836      	ldr	r6, [r6, #0]
 8006dfa:	e7f7      	b.n	8006dec <__sfp+0x14>
 8006dfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e00:	b16d      	cbz	r5, 8006e1e <__sfp+0x46>
 8006e02:	3468      	adds	r4, #104	; 0x68
 8006e04:	e7f4      	b.n	8006df0 <__sfp+0x18>
 8006e06:	2104      	movs	r1, #4
 8006e08:	4638      	mov	r0, r7
 8006e0a:	f7ff ff9f 	bl	8006d4c <__sfmoreglue>
 8006e0e:	6030      	str	r0, [r6, #0]
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d1f1      	bne.n	8006df8 <__sfp+0x20>
 8006e14:	230c      	movs	r3, #12
 8006e16:	603b      	str	r3, [r7, #0]
 8006e18:	4604      	mov	r4, r0
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e1e:	4b0b      	ldr	r3, [pc, #44]	; (8006e4c <__sfp+0x74>)
 8006e20:	6665      	str	r5, [r4, #100]	; 0x64
 8006e22:	e9c4 5500 	strd	r5, r5, [r4]
 8006e26:	60a5      	str	r5, [r4, #8]
 8006e28:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006e2c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006e30:	2208      	movs	r2, #8
 8006e32:	4629      	mov	r1, r5
 8006e34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e38:	f7fe faca 	bl	80053d0 <memset>
 8006e3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e44:	e7e9      	b.n	8006e1a <__sfp+0x42>
 8006e46:	bf00      	nop
 8006e48:	080098f8 	.word	0x080098f8
 8006e4c:	ffff0001 	.word	0xffff0001

08006e50 <_fwalk_reent>:
 8006e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e54:	4680      	mov	r8, r0
 8006e56:	4689      	mov	r9, r1
 8006e58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e5c:	2600      	movs	r6, #0
 8006e5e:	b914      	cbnz	r4, 8006e66 <_fwalk_reent+0x16>
 8006e60:	4630      	mov	r0, r6
 8006e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e66:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006e6a:	3f01      	subs	r7, #1
 8006e6c:	d501      	bpl.n	8006e72 <_fwalk_reent+0x22>
 8006e6e:	6824      	ldr	r4, [r4, #0]
 8006e70:	e7f5      	b.n	8006e5e <_fwalk_reent+0xe>
 8006e72:	89ab      	ldrh	r3, [r5, #12]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d907      	bls.n	8006e88 <_fwalk_reent+0x38>
 8006e78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	d003      	beq.n	8006e88 <_fwalk_reent+0x38>
 8006e80:	4629      	mov	r1, r5
 8006e82:	4640      	mov	r0, r8
 8006e84:	47c8      	blx	r9
 8006e86:	4306      	orrs	r6, r0
 8006e88:	3568      	adds	r5, #104	; 0x68
 8006e8a:	e7ee      	b.n	8006e6a <_fwalk_reent+0x1a>

08006e8c <_localeconv_r>:
 8006e8c:	4b04      	ldr	r3, [pc, #16]	; (8006ea0 <_localeconv_r+0x14>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6a18      	ldr	r0, [r3, #32]
 8006e92:	4b04      	ldr	r3, [pc, #16]	; (8006ea4 <_localeconv_r+0x18>)
 8006e94:	2800      	cmp	r0, #0
 8006e96:	bf08      	it	eq
 8006e98:	4618      	moveq	r0, r3
 8006e9a:	30f0      	adds	r0, #240	; 0xf0
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	2000004c 	.word	0x2000004c
 8006ea4:	200000b0 	.word	0x200000b0

08006ea8 <__swhatbuf_r>:
 8006ea8:	b570      	push	{r4, r5, r6, lr}
 8006eaa:	460e      	mov	r6, r1
 8006eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb0:	2900      	cmp	r1, #0
 8006eb2:	b096      	sub	sp, #88	; 0x58
 8006eb4:	4614      	mov	r4, r2
 8006eb6:	461d      	mov	r5, r3
 8006eb8:	da07      	bge.n	8006eca <__swhatbuf_r+0x22>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	602b      	str	r3, [r5, #0]
 8006ebe:	89b3      	ldrh	r3, [r6, #12]
 8006ec0:	061a      	lsls	r2, r3, #24
 8006ec2:	d410      	bmi.n	8006ee6 <__swhatbuf_r+0x3e>
 8006ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ec8:	e00e      	b.n	8006ee8 <__swhatbuf_r+0x40>
 8006eca:	466a      	mov	r2, sp
 8006ecc:	f000 fdaa 	bl	8007a24 <_fstat_r>
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	dbf2      	blt.n	8006eba <__swhatbuf_r+0x12>
 8006ed4:	9a01      	ldr	r2, [sp, #4]
 8006ed6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006eda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ede:	425a      	negs	r2, r3
 8006ee0:	415a      	adcs	r2, r3
 8006ee2:	602a      	str	r2, [r5, #0]
 8006ee4:	e7ee      	b.n	8006ec4 <__swhatbuf_r+0x1c>
 8006ee6:	2340      	movs	r3, #64	; 0x40
 8006ee8:	2000      	movs	r0, #0
 8006eea:	6023      	str	r3, [r4, #0]
 8006eec:	b016      	add	sp, #88	; 0x58
 8006eee:	bd70      	pop	{r4, r5, r6, pc}

08006ef0 <__smakebuf_r>:
 8006ef0:	898b      	ldrh	r3, [r1, #12]
 8006ef2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ef4:	079d      	lsls	r5, r3, #30
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	460c      	mov	r4, r1
 8006efa:	d507      	bpl.n	8006f0c <__smakebuf_r+0x1c>
 8006efc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	6123      	str	r3, [r4, #16]
 8006f04:	2301      	movs	r3, #1
 8006f06:	6163      	str	r3, [r4, #20]
 8006f08:	b002      	add	sp, #8
 8006f0a:	bd70      	pop	{r4, r5, r6, pc}
 8006f0c:	ab01      	add	r3, sp, #4
 8006f0e:	466a      	mov	r2, sp
 8006f10:	f7ff ffca 	bl	8006ea8 <__swhatbuf_r>
 8006f14:	9900      	ldr	r1, [sp, #0]
 8006f16:	4605      	mov	r5, r0
 8006f18:	4630      	mov	r0, r6
 8006f1a:	f000 fb73 	bl	8007604 <_malloc_r>
 8006f1e:	b948      	cbnz	r0, 8006f34 <__smakebuf_r+0x44>
 8006f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f24:	059a      	lsls	r2, r3, #22
 8006f26:	d4ef      	bmi.n	8006f08 <__smakebuf_r+0x18>
 8006f28:	f023 0303 	bic.w	r3, r3, #3
 8006f2c:	f043 0302 	orr.w	r3, r3, #2
 8006f30:	81a3      	strh	r3, [r4, #12]
 8006f32:	e7e3      	b.n	8006efc <__smakebuf_r+0xc>
 8006f34:	4b0d      	ldr	r3, [pc, #52]	; (8006f6c <__smakebuf_r+0x7c>)
 8006f36:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	6020      	str	r0, [r4, #0]
 8006f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f40:	81a3      	strh	r3, [r4, #12]
 8006f42:	9b00      	ldr	r3, [sp, #0]
 8006f44:	6163      	str	r3, [r4, #20]
 8006f46:	9b01      	ldr	r3, [sp, #4]
 8006f48:	6120      	str	r0, [r4, #16]
 8006f4a:	b15b      	cbz	r3, 8006f64 <__smakebuf_r+0x74>
 8006f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f50:	4630      	mov	r0, r6
 8006f52:	f000 fd79 	bl	8007a48 <_isatty_r>
 8006f56:	b128      	cbz	r0, 8006f64 <__smakebuf_r+0x74>
 8006f58:	89a3      	ldrh	r3, [r4, #12]
 8006f5a:	f023 0303 	bic.w	r3, r3, #3
 8006f5e:	f043 0301 	orr.w	r3, r3, #1
 8006f62:	81a3      	strh	r3, [r4, #12]
 8006f64:	89a3      	ldrh	r3, [r4, #12]
 8006f66:	431d      	orrs	r5, r3
 8006f68:	81a5      	strh	r5, [r4, #12]
 8006f6a:	e7cd      	b.n	8006f08 <__smakebuf_r+0x18>
 8006f6c:	08006d41 	.word	0x08006d41

08006f70 <malloc>:
 8006f70:	4b02      	ldr	r3, [pc, #8]	; (8006f7c <malloc+0xc>)
 8006f72:	4601      	mov	r1, r0
 8006f74:	6818      	ldr	r0, [r3, #0]
 8006f76:	f000 bb45 	b.w	8007604 <_malloc_r>
 8006f7a:	bf00      	nop
 8006f7c:	2000004c 	.word	0x2000004c

08006f80 <memcpy>:
 8006f80:	b510      	push	{r4, lr}
 8006f82:	1e43      	subs	r3, r0, #1
 8006f84:	440a      	add	r2, r1
 8006f86:	4291      	cmp	r1, r2
 8006f88:	d100      	bne.n	8006f8c <memcpy+0xc>
 8006f8a:	bd10      	pop	{r4, pc}
 8006f8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f94:	e7f7      	b.n	8006f86 <memcpy+0x6>

08006f96 <_Balloc>:
 8006f96:	b570      	push	{r4, r5, r6, lr}
 8006f98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	460e      	mov	r6, r1
 8006f9e:	b93d      	cbnz	r5, 8006fb0 <_Balloc+0x1a>
 8006fa0:	2010      	movs	r0, #16
 8006fa2:	f7ff ffe5 	bl	8006f70 <malloc>
 8006fa6:	6260      	str	r0, [r4, #36]	; 0x24
 8006fa8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fac:	6005      	str	r5, [r0, #0]
 8006fae:	60c5      	str	r5, [r0, #12]
 8006fb0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006fb2:	68eb      	ldr	r3, [r5, #12]
 8006fb4:	b183      	cbz	r3, 8006fd8 <_Balloc+0x42>
 8006fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006fbe:	b9b8      	cbnz	r0, 8006ff0 <_Balloc+0x5a>
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	fa01 f506 	lsl.w	r5, r1, r6
 8006fc6:	1d6a      	adds	r2, r5, #5
 8006fc8:	0092      	lsls	r2, r2, #2
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f000 fabe 	bl	800754c <_calloc_r>
 8006fd0:	b160      	cbz	r0, 8006fec <_Balloc+0x56>
 8006fd2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006fd6:	e00e      	b.n	8006ff6 <_Balloc+0x60>
 8006fd8:	2221      	movs	r2, #33	; 0x21
 8006fda:	2104      	movs	r1, #4
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f000 fab5 	bl	800754c <_calloc_r>
 8006fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fe4:	60e8      	str	r0, [r5, #12]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1e4      	bne.n	8006fb6 <_Balloc+0x20>
 8006fec:	2000      	movs	r0, #0
 8006fee:	bd70      	pop	{r4, r5, r6, pc}
 8006ff0:	6802      	ldr	r2, [r0, #0]
 8006ff2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ffc:	e7f7      	b.n	8006fee <_Balloc+0x58>

08006ffe <_Bfree>:
 8006ffe:	b570      	push	{r4, r5, r6, lr}
 8007000:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007002:	4606      	mov	r6, r0
 8007004:	460d      	mov	r5, r1
 8007006:	b93c      	cbnz	r4, 8007018 <_Bfree+0x1a>
 8007008:	2010      	movs	r0, #16
 800700a:	f7ff ffb1 	bl	8006f70 <malloc>
 800700e:	6270      	str	r0, [r6, #36]	; 0x24
 8007010:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007014:	6004      	str	r4, [r0, #0]
 8007016:	60c4      	str	r4, [r0, #12]
 8007018:	b13d      	cbz	r5, 800702a <_Bfree+0x2c>
 800701a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800701c:	686a      	ldr	r2, [r5, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007024:	6029      	str	r1, [r5, #0]
 8007026:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800702a:	bd70      	pop	{r4, r5, r6, pc}

0800702c <__multadd>:
 800702c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007030:	690d      	ldr	r5, [r1, #16]
 8007032:	461f      	mov	r7, r3
 8007034:	4606      	mov	r6, r0
 8007036:	460c      	mov	r4, r1
 8007038:	f101 0c14 	add.w	ip, r1, #20
 800703c:	2300      	movs	r3, #0
 800703e:	f8dc 0000 	ldr.w	r0, [ip]
 8007042:	b281      	uxth	r1, r0
 8007044:	fb02 7101 	mla	r1, r2, r1, r7
 8007048:	0c0f      	lsrs	r7, r1, #16
 800704a:	0c00      	lsrs	r0, r0, #16
 800704c:	fb02 7000 	mla	r0, r2, r0, r7
 8007050:	b289      	uxth	r1, r1
 8007052:	3301      	adds	r3, #1
 8007054:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007058:	429d      	cmp	r5, r3
 800705a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800705e:	f84c 1b04 	str.w	r1, [ip], #4
 8007062:	dcec      	bgt.n	800703e <__multadd+0x12>
 8007064:	b1d7      	cbz	r7, 800709c <__multadd+0x70>
 8007066:	68a3      	ldr	r3, [r4, #8]
 8007068:	42ab      	cmp	r3, r5
 800706a:	dc12      	bgt.n	8007092 <__multadd+0x66>
 800706c:	6861      	ldr	r1, [r4, #4]
 800706e:	4630      	mov	r0, r6
 8007070:	3101      	adds	r1, #1
 8007072:	f7ff ff90 	bl	8006f96 <_Balloc>
 8007076:	6922      	ldr	r2, [r4, #16]
 8007078:	3202      	adds	r2, #2
 800707a:	f104 010c 	add.w	r1, r4, #12
 800707e:	4680      	mov	r8, r0
 8007080:	0092      	lsls	r2, r2, #2
 8007082:	300c      	adds	r0, #12
 8007084:	f7ff ff7c 	bl	8006f80 <memcpy>
 8007088:	4621      	mov	r1, r4
 800708a:	4630      	mov	r0, r6
 800708c:	f7ff ffb7 	bl	8006ffe <_Bfree>
 8007090:	4644      	mov	r4, r8
 8007092:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007096:	3501      	adds	r5, #1
 8007098:	615f      	str	r7, [r3, #20]
 800709a:	6125      	str	r5, [r4, #16]
 800709c:	4620      	mov	r0, r4
 800709e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080070a2 <__hi0bits>:
 80070a2:	0c02      	lsrs	r2, r0, #16
 80070a4:	0412      	lsls	r2, r2, #16
 80070a6:	4603      	mov	r3, r0
 80070a8:	b9b2      	cbnz	r2, 80070d8 <__hi0bits+0x36>
 80070aa:	0403      	lsls	r3, r0, #16
 80070ac:	2010      	movs	r0, #16
 80070ae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80070b2:	bf04      	itt	eq
 80070b4:	021b      	lsleq	r3, r3, #8
 80070b6:	3008      	addeq	r0, #8
 80070b8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80070bc:	bf04      	itt	eq
 80070be:	011b      	lsleq	r3, r3, #4
 80070c0:	3004      	addeq	r0, #4
 80070c2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80070c6:	bf04      	itt	eq
 80070c8:	009b      	lsleq	r3, r3, #2
 80070ca:	3002      	addeq	r0, #2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	db06      	blt.n	80070de <__hi0bits+0x3c>
 80070d0:	005b      	lsls	r3, r3, #1
 80070d2:	d503      	bpl.n	80070dc <__hi0bits+0x3a>
 80070d4:	3001      	adds	r0, #1
 80070d6:	4770      	bx	lr
 80070d8:	2000      	movs	r0, #0
 80070da:	e7e8      	b.n	80070ae <__hi0bits+0xc>
 80070dc:	2020      	movs	r0, #32
 80070de:	4770      	bx	lr

080070e0 <__lo0bits>:
 80070e0:	6803      	ldr	r3, [r0, #0]
 80070e2:	f013 0207 	ands.w	r2, r3, #7
 80070e6:	4601      	mov	r1, r0
 80070e8:	d00b      	beq.n	8007102 <__lo0bits+0x22>
 80070ea:	07da      	lsls	r2, r3, #31
 80070ec:	d423      	bmi.n	8007136 <__lo0bits+0x56>
 80070ee:	0798      	lsls	r0, r3, #30
 80070f0:	bf49      	itett	mi
 80070f2:	085b      	lsrmi	r3, r3, #1
 80070f4:	089b      	lsrpl	r3, r3, #2
 80070f6:	2001      	movmi	r0, #1
 80070f8:	600b      	strmi	r3, [r1, #0]
 80070fa:	bf5c      	itt	pl
 80070fc:	600b      	strpl	r3, [r1, #0]
 80070fe:	2002      	movpl	r0, #2
 8007100:	4770      	bx	lr
 8007102:	b298      	uxth	r0, r3
 8007104:	b9a8      	cbnz	r0, 8007132 <__lo0bits+0x52>
 8007106:	0c1b      	lsrs	r3, r3, #16
 8007108:	2010      	movs	r0, #16
 800710a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800710e:	bf04      	itt	eq
 8007110:	0a1b      	lsreq	r3, r3, #8
 8007112:	3008      	addeq	r0, #8
 8007114:	071a      	lsls	r2, r3, #28
 8007116:	bf04      	itt	eq
 8007118:	091b      	lsreq	r3, r3, #4
 800711a:	3004      	addeq	r0, #4
 800711c:	079a      	lsls	r2, r3, #30
 800711e:	bf04      	itt	eq
 8007120:	089b      	lsreq	r3, r3, #2
 8007122:	3002      	addeq	r0, #2
 8007124:	07da      	lsls	r2, r3, #31
 8007126:	d402      	bmi.n	800712e <__lo0bits+0x4e>
 8007128:	085b      	lsrs	r3, r3, #1
 800712a:	d006      	beq.n	800713a <__lo0bits+0x5a>
 800712c:	3001      	adds	r0, #1
 800712e:	600b      	str	r3, [r1, #0]
 8007130:	4770      	bx	lr
 8007132:	4610      	mov	r0, r2
 8007134:	e7e9      	b.n	800710a <__lo0bits+0x2a>
 8007136:	2000      	movs	r0, #0
 8007138:	4770      	bx	lr
 800713a:	2020      	movs	r0, #32
 800713c:	4770      	bx	lr

0800713e <__i2b>:
 800713e:	b510      	push	{r4, lr}
 8007140:	460c      	mov	r4, r1
 8007142:	2101      	movs	r1, #1
 8007144:	f7ff ff27 	bl	8006f96 <_Balloc>
 8007148:	2201      	movs	r2, #1
 800714a:	6144      	str	r4, [r0, #20]
 800714c:	6102      	str	r2, [r0, #16]
 800714e:	bd10      	pop	{r4, pc}

08007150 <__multiply>:
 8007150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007154:	4614      	mov	r4, r2
 8007156:	690a      	ldr	r2, [r1, #16]
 8007158:	6923      	ldr	r3, [r4, #16]
 800715a:	429a      	cmp	r2, r3
 800715c:	bfb8      	it	lt
 800715e:	460b      	movlt	r3, r1
 8007160:	4688      	mov	r8, r1
 8007162:	bfbc      	itt	lt
 8007164:	46a0      	movlt	r8, r4
 8007166:	461c      	movlt	r4, r3
 8007168:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800716c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007170:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007174:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007178:	eb07 0609 	add.w	r6, r7, r9
 800717c:	42b3      	cmp	r3, r6
 800717e:	bfb8      	it	lt
 8007180:	3101      	addlt	r1, #1
 8007182:	f7ff ff08 	bl	8006f96 <_Balloc>
 8007186:	f100 0514 	add.w	r5, r0, #20
 800718a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800718e:	462b      	mov	r3, r5
 8007190:	2200      	movs	r2, #0
 8007192:	4573      	cmp	r3, lr
 8007194:	d316      	bcc.n	80071c4 <__multiply+0x74>
 8007196:	f104 0214 	add.w	r2, r4, #20
 800719a:	f108 0114 	add.w	r1, r8, #20
 800719e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80071a2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	9b00      	ldr	r3, [sp, #0]
 80071aa:	9201      	str	r2, [sp, #4]
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d80c      	bhi.n	80071ca <__multiply+0x7a>
 80071b0:	2e00      	cmp	r6, #0
 80071b2:	dd03      	ble.n	80071bc <__multiply+0x6c>
 80071b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d05d      	beq.n	8007278 <__multiply+0x128>
 80071bc:	6106      	str	r6, [r0, #16]
 80071be:	b003      	add	sp, #12
 80071c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c4:	f843 2b04 	str.w	r2, [r3], #4
 80071c8:	e7e3      	b.n	8007192 <__multiply+0x42>
 80071ca:	f8b2 b000 	ldrh.w	fp, [r2]
 80071ce:	f1bb 0f00 	cmp.w	fp, #0
 80071d2:	d023      	beq.n	800721c <__multiply+0xcc>
 80071d4:	4689      	mov	r9, r1
 80071d6:	46ac      	mov	ip, r5
 80071d8:	f04f 0800 	mov.w	r8, #0
 80071dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80071e0:	f8dc a000 	ldr.w	sl, [ip]
 80071e4:	b2a3      	uxth	r3, r4
 80071e6:	fa1f fa8a 	uxth.w	sl, sl
 80071ea:	fb0b a303 	mla	r3, fp, r3, sl
 80071ee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80071f2:	f8dc 4000 	ldr.w	r4, [ip]
 80071f6:	4443      	add	r3, r8
 80071f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80071fc:	fb0b 840a 	mla	r4, fp, sl, r8
 8007200:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007204:	46e2      	mov	sl, ip
 8007206:	b29b      	uxth	r3, r3
 8007208:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800720c:	454f      	cmp	r7, r9
 800720e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007212:	f84a 3b04 	str.w	r3, [sl], #4
 8007216:	d82b      	bhi.n	8007270 <__multiply+0x120>
 8007218:	f8cc 8004 	str.w	r8, [ip, #4]
 800721c:	9b01      	ldr	r3, [sp, #4]
 800721e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007222:	3204      	adds	r2, #4
 8007224:	f1ba 0f00 	cmp.w	sl, #0
 8007228:	d020      	beq.n	800726c <__multiply+0x11c>
 800722a:	682b      	ldr	r3, [r5, #0]
 800722c:	4689      	mov	r9, r1
 800722e:	46a8      	mov	r8, r5
 8007230:	f04f 0b00 	mov.w	fp, #0
 8007234:	f8b9 c000 	ldrh.w	ip, [r9]
 8007238:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800723c:	fb0a 440c 	mla	r4, sl, ip, r4
 8007240:	445c      	add	r4, fp
 8007242:	46c4      	mov	ip, r8
 8007244:	b29b      	uxth	r3, r3
 8007246:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800724a:	f84c 3b04 	str.w	r3, [ip], #4
 800724e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007252:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007256:	0c1b      	lsrs	r3, r3, #16
 8007258:	fb0a b303 	mla	r3, sl, r3, fp
 800725c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007260:	454f      	cmp	r7, r9
 8007262:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007266:	d805      	bhi.n	8007274 <__multiply+0x124>
 8007268:	f8c8 3004 	str.w	r3, [r8, #4]
 800726c:	3504      	adds	r5, #4
 800726e:	e79b      	b.n	80071a8 <__multiply+0x58>
 8007270:	46d4      	mov	ip, sl
 8007272:	e7b3      	b.n	80071dc <__multiply+0x8c>
 8007274:	46e0      	mov	r8, ip
 8007276:	e7dd      	b.n	8007234 <__multiply+0xe4>
 8007278:	3e01      	subs	r6, #1
 800727a:	e799      	b.n	80071b0 <__multiply+0x60>

0800727c <__pow5mult>:
 800727c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007280:	4615      	mov	r5, r2
 8007282:	f012 0203 	ands.w	r2, r2, #3
 8007286:	4606      	mov	r6, r0
 8007288:	460f      	mov	r7, r1
 800728a:	d007      	beq.n	800729c <__pow5mult+0x20>
 800728c:	3a01      	subs	r2, #1
 800728e:	4c21      	ldr	r4, [pc, #132]	; (8007314 <__pow5mult+0x98>)
 8007290:	2300      	movs	r3, #0
 8007292:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007296:	f7ff fec9 	bl	800702c <__multadd>
 800729a:	4607      	mov	r7, r0
 800729c:	10ad      	asrs	r5, r5, #2
 800729e:	d035      	beq.n	800730c <__pow5mult+0x90>
 80072a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80072a2:	b93c      	cbnz	r4, 80072b4 <__pow5mult+0x38>
 80072a4:	2010      	movs	r0, #16
 80072a6:	f7ff fe63 	bl	8006f70 <malloc>
 80072aa:	6270      	str	r0, [r6, #36]	; 0x24
 80072ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072b0:	6004      	str	r4, [r0, #0]
 80072b2:	60c4      	str	r4, [r0, #12]
 80072b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80072b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072bc:	b94c      	cbnz	r4, 80072d2 <__pow5mult+0x56>
 80072be:	f240 2171 	movw	r1, #625	; 0x271
 80072c2:	4630      	mov	r0, r6
 80072c4:	f7ff ff3b 	bl	800713e <__i2b>
 80072c8:	2300      	movs	r3, #0
 80072ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80072ce:	4604      	mov	r4, r0
 80072d0:	6003      	str	r3, [r0, #0]
 80072d2:	f04f 0800 	mov.w	r8, #0
 80072d6:	07eb      	lsls	r3, r5, #31
 80072d8:	d50a      	bpl.n	80072f0 <__pow5mult+0x74>
 80072da:	4639      	mov	r1, r7
 80072dc:	4622      	mov	r2, r4
 80072de:	4630      	mov	r0, r6
 80072e0:	f7ff ff36 	bl	8007150 <__multiply>
 80072e4:	4639      	mov	r1, r7
 80072e6:	4681      	mov	r9, r0
 80072e8:	4630      	mov	r0, r6
 80072ea:	f7ff fe88 	bl	8006ffe <_Bfree>
 80072ee:	464f      	mov	r7, r9
 80072f0:	106d      	asrs	r5, r5, #1
 80072f2:	d00b      	beq.n	800730c <__pow5mult+0x90>
 80072f4:	6820      	ldr	r0, [r4, #0]
 80072f6:	b938      	cbnz	r0, 8007308 <__pow5mult+0x8c>
 80072f8:	4622      	mov	r2, r4
 80072fa:	4621      	mov	r1, r4
 80072fc:	4630      	mov	r0, r6
 80072fe:	f7ff ff27 	bl	8007150 <__multiply>
 8007302:	6020      	str	r0, [r4, #0]
 8007304:	f8c0 8000 	str.w	r8, [r0]
 8007308:	4604      	mov	r4, r0
 800730a:	e7e4      	b.n	80072d6 <__pow5mult+0x5a>
 800730c:	4638      	mov	r0, r7
 800730e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007312:	bf00      	nop
 8007314:	08009a90 	.word	0x08009a90

08007318 <__lshift>:
 8007318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800731c:	460c      	mov	r4, r1
 800731e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007322:	6923      	ldr	r3, [r4, #16]
 8007324:	6849      	ldr	r1, [r1, #4]
 8007326:	eb0a 0903 	add.w	r9, sl, r3
 800732a:	68a3      	ldr	r3, [r4, #8]
 800732c:	4607      	mov	r7, r0
 800732e:	4616      	mov	r6, r2
 8007330:	f109 0501 	add.w	r5, r9, #1
 8007334:	42ab      	cmp	r3, r5
 8007336:	db32      	blt.n	800739e <__lshift+0x86>
 8007338:	4638      	mov	r0, r7
 800733a:	f7ff fe2c 	bl	8006f96 <_Balloc>
 800733e:	2300      	movs	r3, #0
 8007340:	4680      	mov	r8, r0
 8007342:	f100 0114 	add.w	r1, r0, #20
 8007346:	461a      	mov	r2, r3
 8007348:	4553      	cmp	r3, sl
 800734a:	db2b      	blt.n	80073a4 <__lshift+0x8c>
 800734c:	6920      	ldr	r0, [r4, #16]
 800734e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007352:	f104 0314 	add.w	r3, r4, #20
 8007356:	f016 021f 	ands.w	r2, r6, #31
 800735a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800735e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007362:	d025      	beq.n	80073b0 <__lshift+0x98>
 8007364:	f1c2 0e20 	rsb	lr, r2, #32
 8007368:	2000      	movs	r0, #0
 800736a:	681e      	ldr	r6, [r3, #0]
 800736c:	468a      	mov	sl, r1
 800736e:	4096      	lsls	r6, r2
 8007370:	4330      	orrs	r0, r6
 8007372:	f84a 0b04 	str.w	r0, [sl], #4
 8007376:	f853 0b04 	ldr.w	r0, [r3], #4
 800737a:	459c      	cmp	ip, r3
 800737c:	fa20 f00e 	lsr.w	r0, r0, lr
 8007380:	d814      	bhi.n	80073ac <__lshift+0x94>
 8007382:	6048      	str	r0, [r1, #4]
 8007384:	b108      	cbz	r0, 800738a <__lshift+0x72>
 8007386:	f109 0502 	add.w	r5, r9, #2
 800738a:	3d01      	subs	r5, #1
 800738c:	4638      	mov	r0, r7
 800738e:	f8c8 5010 	str.w	r5, [r8, #16]
 8007392:	4621      	mov	r1, r4
 8007394:	f7ff fe33 	bl	8006ffe <_Bfree>
 8007398:	4640      	mov	r0, r8
 800739a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800739e:	3101      	adds	r1, #1
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	e7c7      	b.n	8007334 <__lshift+0x1c>
 80073a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80073a8:	3301      	adds	r3, #1
 80073aa:	e7cd      	b.n	8007348 <__lshift+0x30>
 80073ac:	4651      	mov	r1, sl
 80073ae:	e7dc      	b.n	800736a <__lshift+0x52>
 80073b0:	3904      	subs	r1, #4
 80073b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80073ba:	459c      	cmp	ip, r3
 80073bc:	d8f9      	bhi.n	80073b2 <__lshift+0x9a>
 80073be:	e7e4      	b.n	800738a <__lshift+0x72>

080073c0 <__mcmp>:
 80073c0:	6903      	ldr	r3, [r0, #16]
 80073c2:	690a      	ldr	r2, [r1, #16]
 80073c4:	1a9b      	subs	r3, r3, r2
 80073c6:	b530      	push	{r4, r5, lr}
 80073c8:	d10c      	bne.n	80073e4 <__mcmp+0x24>
 80073ca:	0092      	lsls	r2, r2, #2
 80073cc:	3014      	adds	r0, #20
 80073ce:	3114      	adds	r1, #20
 80073d0:	1884      	adds	r4, r0, r2
 80073d2:	4411      	add	r1, r2
 80073d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80073d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80073dc:	4295      	cmp	r5, r2
 80073de:	d003      	beq.n	80073e8 <__mcmp+0x28>
 80073e0:	d305      	bcc.n	80073ee <__mcmp+0x2e>
 80073e2:	2301      	movs	r3, #1
 80073e4:	4618      	mov	r0, r3
 80073e6:	bd30      	pop	{r4, r5, pc}
 80073e8:	42a0      	cmp	r0, r4
 80073ea:	d3f3      	bcc.n	80073d4 <__mcmp+0x14>
 80073ec:	e7fa      	b.n	80073e4 <__mcmp+0x24>
 80073ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073f2:	e7f7      	b.n	80073e4 <__mcmp+0x24>

080073f4 <__mdiff>:
 80073f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073f8:	460d      	mov	r5, r1
 80073fa:	4607      	mov	r7, r0
 80073fc:	4611      	mov	r1, r2
 80073fe:	4628      	mov	r0, r5
 8007400:	4614      	mov	r4, r2
 8007402:	f7ff ffdd 	bl	80073c0 <__mcmp>
 8007406:	1e06      	subs	r6, r0, #0
 8007408:	d108      	bne.n	800741c <__mdiff+0x28>
 800740a:	4631      	mov	r1, r6
 800740c:	4638      	mov	r0, r7
 800740e:	f7ff fdc2 	bl	8006f96 <_Balloc>
 8007412:	2301      	movs	r3, #1
 8007414:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800741c:	bfa4      	itt	ge
 800741e:	4623      	movge	r3, r4
 8007420:	462c      	movge	r4, r5
 8007422:	4638      	mov	r0, r7
 8007424:	6861      	ldr	r1, [r4, #4]
 8007426:	bfa6      	itte	ge
 8007428:	461d      	movge	r5, r3
 800742a:	2600      	movge	r6, #0
 800742c:	2601      	movlt	r6, #1
 800742e:	f7ff fdb2 	bl	8006f96 <_Balloc>
 8007432:	692b      	ldr	r3, [r5, #16]
 8007434:	60c6      	str	r6, [r0, #12]
 8007436:	6926      	ldr	r6, [r4, #16]
 8007438:	f105 0914 	add.w	r9, r5, #20
 800743c:	f104 0214 	add.w	r2, r4, #20
 8007440:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007444:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007448:	f100 0514 	add.w	r5, r0, #20
 800744c:	f04f 0e00 	mov.w	lr, #0
 8007450:	f852 ab04 	ldr.w	sl, [r2], #4
 8007454:	f859 4b04 	ldr.w	r4, [r9], #4
 8007458:	fa1e f18a 	uxtah	r1, lr, sl
 800745c:	b2a3      	uxth	r3, r4
 800745e:	1ac9      	subs	r1, r1, r3
 8007460:	0c23      	lsrs	r3, r4, #16
 8007462:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007466:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800746a:	b289      	uxth	r1, r1
 800746c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007470:	45c8      	cmp	r8, r9
 8007472:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007476:	4694      	mov	ip, r2
 8007478:	f845 3b04 	str.w	r3, [r5], #4
 800747c:	d8e8      	bhi.n	8007450 <__mdiff+0x5c>
 800747e:	45bc      	cmp	ip, r7
 8007480:	d304      	bcc.n	800748c <__mdiff+0x98>
 8007482:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007486:	b183      	cbz	r3, 80074aa <__mdiff+0xb6>
 8007488:	6106      	str	r6, [r0, #16]
 800748a:	e7c5      	b.n	8007418 <__mdiff+0x24>
 800748c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007490:	fa1e f381 	uxtah	r3, lr, r1
 8007494:	141a      	asrs	r2, r3, #16
 8007496:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800749a:	b29b      	uxth	r3, r3
 800749c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074a0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80074a4:	f845 3b04 	str.w	r3, [r5], #4
 80074a8:	e7e9      	b.n	800747e <__mdiff+0x8a>
 80074aa:	3e01      	subs	r6, #1
 80074ac:	e7e9      	b.n	8007482 <__mdiff+0x8e>

080074ae <__d2b>:
 80074ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074b2:	460e      	mov	r6, r1
 80074b4:	2101      	movs	r1, #1
 80074b6:	ec59 8b10 	vmov	r8, r9, d0
 80074ba:	4615      	mov	r5, r2
 80074bc:	f7ff fd6b 	bl	8006f96 <_Balloc>
 80074c0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80074c4:	4607      	mov	r7, r0
 80074c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074ca:	bb34      	cbnz	r4, 800751a <__d2b+0x6c>
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	f1b8 0300 	subs.w	r3, r8, #0
 80074d2:	d027      	beq.n	8007524 <__d2b+0x76>
 80074d4:	a802      	add	r0, sp, #8
 80074d6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80074da:	f7ff fe01 	bl	80070e0 <__lo0bits>
 80074de:	9900      	ldr	r1, [sp, #0]
 80074e0:	b1f0      	cbz	r0, 8007520 <__d2b+0x72>
 80074e2:	9a01      	ldr	r2, [sp, #4]
 80074e4:	f1c0 0320 	rsb	r3, r0, #32
 80074e8:	fa02 f303 	lsl.w	r3, r2, r3
 80074ec:	430b      	orrs	r3, r1
 80074ee:	40c2      	lsrs	r2, r0
 80074f0:	617b      	str	r3, [r7, #20]
 80074f2:	9201      	str	r2, [sp, #4]
 80074f4:	9b01      	ldr	r3, [sp, #4]
 80074f6:	61bb      	str	r3, [r7, #24]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	bf14      	ite	ne
 80074fc:	2102      	movne	r1, #2
 80074fe:	2101      	moveq	r1, #1
 8007500:	6139      	str	r1, [r7, #16]
 8007502:	b1c4      	cbz	r4, 8007536 <__d2b+0x88>
 8007504:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007508:	4404      	add	r4, r0
 800750a:	6034      	str	r4, [r6, #0]
 800750c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007510:	6028      	str	r0, [r5, #0]
 8007512:	4638      	mov	r0, r7
 8007514:	b003      	add	sp, #12
 8007516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800751a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800751e:	e7d5      	b.n	80074cc <__d2b+0x1e>
 8007520:	6179      	str	r1, [r7, #20]
 8007522:	e7e7      	b.n	80074f4 <__d2b+0x46>
 8007524:	a801      	add	r0, sp, #4
 8007526:	f7ff fddb 	bl	80070e0 <__lo0bits>
 800752a:	9b01      	ldr	r3, [sp, #4]
 800752c:	617b      	str	r3, [r7, #20]
 800752e:	2101      	movs	r1, #1
 8007530:	6139      	str	r1, [r7, #16]
 8007532:	3020      	adds	r0, #32
 8007534:	e7e5      	b.n	8007502 <__d2b+0x54>
 8007536:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800753a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800753e:	6030      	str	r0, [r6, #0]
 8007540:	6918      	ldr	r0, [r3, #16]
 8007542:	f7ff fdae 	bl	80070a2 <__hi0bits>
 8007546:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800754a:	e7e1      	b.n	8007510 <__d2b+0x62>

0800754c <_calloc_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	fb02 f401 	mul.w	r4, r2, r1
 8007552:	4621      	mov	r1, r4
 8007554:	f000 f856 	bl	8007604 <_malloc_r>
 8007558:	4605      	mov	r5, r0
 800755a:	b118      	cbz	r0, 8007564 <_calloc_r+0x18>
 800755c:	4622      	mov	r2, r4
 800755e:	2100      	movs	r1, #0
 8007560:	f7fd ff36 	bl	80053d0 <memset>
 8007564:	4628      	mov	r0, r5
 8007566:	bd38      	pop	{r3, r4, r5, pc}

08007568 <_free_r>:
 8007568:	b538      	push	{r3, r4, r5, lr}
 800756a:	4605      	mov	r5, r0
 800756c:	2900      	cmp	r1, #0
 800756e:	d045      	beq.n	80075fc <_free_r+0x94>
 8007570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007574:	1f0c      	subs	r4, r1, #4
 8007576:	2b00      	cmp	r3, #0
 8007578:	bfb8      	it	lt
 800757a:	18e4      	addlt	r4, r4, r3
 800757c:	f000 fa98 	bl	8007ab0 <__malloc_lock>
 8007580:	4a1f      	ldr	r2, [pc, #124]	; (8007600 <_free_r+0x98>)
 8007582:	6813      	ldr	r3, [r2, #0]
 8007584:	4610      	mov	r0, r2
 8007586:	b933      	cbnz	r3, 8007596 <_free_r+0x2e>
 8007588:	6063      	str	r3, [r4, #4]
 800758a:	6014      	str	r4, [r2, #0]
 800758c:	4628      	mov	r0, r5
 800758e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007592:	f000 ba8e 	b.w	8007ab2 <__malloc_unlock>
 8007596:	42a3      	cmp	r3, r4
 8007598:	d90c      	bls.n	80075b4 <_free_r+0x4c>
 800759a:	6821      	ldr	r1, [r4, #0]
 800759c:	1862      	adds	r2, r4, r1
 800759e:	4293      	cmp	r3, r2
 80075a0:	bf04      	itt	eq
 80075a2:	681a      	ldreq	r2, [r3, #0]
 80075a4:	685b      	ldreq	r3, [r3, #4]
 80075a6:	6063      	str	r3, [r4, #4]
 80075a8:	bf04      	itt	eq
 80075aa:	1852      	addeq	r2, r2, r1
 80075ac:	6022      	streq	r2, [r4, #0]
 80075ae:	6004      	str	r4, [r0, #0]
 80075b0:	e7ec      	b.n	800758c <_free_r+0x24>
 80075b2:	4613      	mov	r3, r2
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	b10a      	cbz	r2, 80075bc <_free_r+0x54>
 80075b8:	42a2      	cmp	r2, r4
 80075ba:	d9fa      	bls.n	80075b2 <_free_r+0x4a>
 80075bc:	6819      	ldr	r1, [r3, #0]
 80075be:	1858      	adds	r0, r3, r1
 80075c0:	42a0      	cmp	r0, r4
 80075c2:	d10b      	bne.n	80075dc <_free_r+0x74>
 80075c4:	6820      	ldr	r0, [r4, #0]
 80075c6:	4401      	add	r1, r0
 80075c8:	1858      	adds	r0, r3, r1
 80075ca:	4282      	cmp	r2, r0
 80075cc:	6019      	str	r1, [r3, #0]
 80075ce:	d1dd      	bne.n	800758c <_free_r+0x24>
 80075d0:	6810      	ldr	r0, [r2, #0]
 80075d2:	6852      	ldr	r2, [r2, #4]
 80075d4:	605a      	str	r2, [r3, #4]
 80075d6:	4401      	add	r1, r0
 80075d8:	6019      	str	r1, [r3, #0]
 80075da:	e7d7      	b.n	800758c <_free_r+0x24>
 80075dc:	d902      	bls.n	80075e4 <_free_r+0x7c>
 80075de:	230c      	movs	r3, #12
 80075e0:	602b      	str	r3, [r5, #0]
 80075e2:	e7d3      	b.n	800758c <_free_r+0x24>
 80075e4:	6820      	ldr	r0, [r4, #0]
 80075e6:	1821      	adds	r1, r4, r0
 80075e8:	428a      	cmp	r2, r1
 80075ea:	bf04      	itt	eq
 80075ec:	6811      	ldreq	r1, [r2, #0]
 80075ee:	6852      	ldreq	r2, [r2, #4]
 80075f0:	6062      	str	r2, [r4, #4]
 80075f2:	bf04      	itt	eq
 80075f4:	1809      	addeq	r1, r1, r0
 80075f6:	6021      	streq	r1, [r4, #0]
 80075f8:	605c      	str	r4, [r3, #4]
 80075fa:	e7c7      	b.n	800758c <_free_r+0x24>
 80075fc:	bd38      	pop	{r3, r4, r5, pc}
 80075fe:	bf00      	nop
 8007600:	200002c0 	.word	0x200002c0

08007604 <_malloc_r>:
 8007604:	b570      	push	{r4, r5, r6, lr}
 8007606:	1ccd      	adds	r5, r1, #3
 8007608:	f025 0503 	bic.w	r5, r5, #3
 800760c:	3508      	adds	r5, #8
 800760e:	2d0c      	cmp	r5, #12
 8007610:	bf38      	it	cc
 8007612:	250c      	movcc	r5, #12
 8007614:	2d00      	cmp	r5, #0
 8007616:	4606      	mov	r6, r0
 8007618:	db01      	blt.n	800761e <_malloc_r+0x1a>
 800761a:	42a9      	cmp	r1, r5
 800761c:	d903      	bls.n	8007626 <_malloc_r+0x22>
 800761e:	230c      	movs	r3, #12
 8007620:	6033      	str	r3, [r6, #0]
 8007622:	2000      	movs	r0, #0
 8007624:	bd70      	pop	{r4, r5, r6, pc}
 8007626:	f000 fa43 	bl	8007ab0 <__malloc_lock>
 800762a:	4a21      	ldr	r2, [pc, #132]	; (80076b0 <_malloc_r+0xac>)
 800762c:	6814      	ldr	r4, [r2, #0]
 800762e:	4621      	mov	r1, r4
 8007630:	b991      	cbnz	r1, 8007658 <_malloc_r+0x54>
 8007632:	4c20      	ldr	r4, [pc, #128]	; (80076b4 <_malloc_r+0xb0>)
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	b91b      	cbnz	r3, 8007640 <_malloc_r+0x3c>
 8007638:	4630      	mov	r0, r6
 800763a:	f000 f97d 	bl	8007938 <_sbrk_r>
 800763e:	6020      	str	r0, [r4, #0]
 8007640:	4629      	mov	r1, r5
 8007642:	4630      	mov	r0, r6
 8007644:	f000 f978 	bl	8007938 <_sbrk_r>
 8007648:	1c43      	adds	r3, r0, #1
 800764a:	d124      	bne.n	8007696 <_malloc_r+0x92>
 800764c:	230c      	movs	r3, #12
 800764e:	6033      	str	r3, [r6, #0]
 8007650:	4630      	mov	r0, r6
 8007652:	f000 fa2e 	bl	8007ab2 <__malloc_unlock>
 8007656:	e7e4      	b.n	8007622 <_malloc_r+0x1e>
 8007658:	680b      	ldr	r3, [r1, #0]
 800765a:	1b5b      	subs	r3, r3, r5
 800765c:	d418      	bmi.n	8007690 <_malloc_r+0x8c>
 800765e:	2b0b      	cmp	r3, #11
 8007660:	d90f      	bls.n	8007682 <_malloc_r+0x7e>
 8007662:	600b      	str	r3, [r1, #0]
 8007664:	50cd      	str	r5, [r1, r3]
 8007666:	18cc      	adds	r4, r1, r3
 8007668:	4630      	mov	r0, r6
 800766a:	f000 fa22 	bl	8007ab2 <__malloc_unlock>
 800766e:	f104 000b 	add.w	r0, r4, #11
 8007672:	1d23      	adds	r3, r4, #4
 8007674:	f020 0007 	bic.w	r0, r0, #7
 8007678:	1ac3      	subs	r3, r0, r3
 800767a:	d0d3      	beq.n	8007624 <_malloc_r+0x20>
 800767c:	425a      	negs	r2, r3
 800767e:	50e2      	str	r2, [r4, r3]
 8007680:	e7d0      	b.n	8007624 <_malloc_r+0x20>
 8007682:	428c      	cmp	r4, r1
 8007684:	684b      	ldr	r3, [r1, #4]
 8007686:	bf16      	itet	ne
 8007688:	6063      	strne	r3, [r4, #4]
 800768a:	6013      	streq	r3, [r2, #0]
 800768c:	460c      	movne	r4, r1
 800768e:	e7eb      	b.n	8007668 <_malloc_r+0x64>
 8007690:	460c      	mov	r4, r1
 8007692:	6849      	ldr	r1, [r1, #4]
 8007694:	e7cc      	b.n	8007630 <_malloc_r+0x2c>
 8007696:	1cc4      	adds	r4, r0, #3
 8007698:	f024 0403 	bic.w	r4, r4, #3
 800769c:	42a0      	cmp	r0, r4
 800769e:	d005      	beq.n	80076ac <_malloc_r+0xa8>
 80076a0:	1a21      	subs	r1, r4, r0
 80076a2:	4630      	mov	r0, r6
 80076a4:	f000 f948 	bl	8007938 <_sbrk_r>
 80076a8:	3001      	adds	r0, #1
 80076aa:	d0cf      	beq.n	800764c <_malloc_r+0x48>
 80076ac:	6025      	str	r5, [r4, #0]
 80076ae:	e7db      	b.n	8007668 <_malloc_r+0x64>
 80076b0:	200002c0 	.word	0x200002c0
 80076b4:	200002c4 	.word	0x200002c4

080076b8 <__sfputc_r>:
 80076b8:	6893      	ldr	r3, [r2, #8]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	b410      	push	{r4}
 80076c0:	6093      	str	r3, [r2, #8]
 80076c2:	da08      	bge.n	80076d6 <__sfputc_r+0x1e>
 80076c4:	6994      	ldr	r4, [r2, #24]
 80076c6:	42a3      	cmp	r3, r4
 80076c8:	db01      	blt.n	80076ce <__sfputc_r+0x16>
 80076ca:	290a      	cmp	r1, #10
 80076cc:	d103      	bne.n	80076d6 <__sfputc_r+0x1e>
 80076ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076d2:	f7fe bb5d 	b.w	8005d90 <__swbuf_r>
 80076d6:	6813      	ldr	r3, [r2, #0]
 80076d8:	1c58      	adds	r0, r3, #1
 80076da:	6010      	str	r0, [r2, #0]
 80076dc:	7019      	strb	r1, [r3, #0]
 80076de:	4608      	mov	r0, r1
 80076e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <__sfputs_r>:
 80076e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e8:	4606      	mov	r6, r0
 80076ea:	460f      	mov	r7, r1
 80076ec:	4614      	mov	r4, r2
 80076ee:	18d5      	adds	r5, r2, r3
 80076f0:	42ac      	cmp	r4, r5
 80076f2:	d101      	bne.n	80076f8 <__sfputs_r+0x12>
 80076f4:	2000      	movs	r0, #0
 80076f6:	e007      	b.n	8007708 <__sfputs_r+0x22>
 80076f8:	463a      	mov	r2, r7
 80076fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076fe:	4630      	mov	r0, r6
 8007700:	f7ff ffda 	bl	80076b8 <__sfputc_r>
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	d1f3      	bne.n	80076f0 <__sfputs_r+0xa>
 8007708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800770c <_vfiprintf_r>:
 800770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007710:	460c      	mov	r4, r1
 8007712:	b09d      	sub	sp, #116	; 0x74
 8007714:	4617      	mov	r7, r2
 8007716:	461d      	mov	r5, r3
 8007718:	4606      	mov	r6, r0
 800771a:	b118      	cbz	r0, 8007724 <_vfiprintf_r+0x18>
 800771c:	6983      	ldr	r3, [r0, #24]
 800771e:	b90b      	cbnz	r3, 8007724 <_vfiprintf_r+0x18>
 8007720:	f7ff fb2a 	bl	8006d78 <__sinit>
 8007724:	4b7c      	ldr	r3, [pc, #496]	; (8007918 <_vfiprintf_r+0x20c>)
 8007726:	429c      	cmp	r4, r3
 8007728:	d158      	bne.n	80077dc <_vfiprintf_r+0xd0>
 800772a:	6874      	ldr	r4, [r6, #4]
 800772c:	89a3      	ldrh	r3, [r4, #12]
 800772e:	0718      	lsls	r0, r3, #28
 8007730:	d55e      	bpl.n	80077f0 <_vfiprintf_r+0xe4>
 8007732:	6923      	ldr	r3, [r4, #16]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d05b      	beq.n	80077f0 <_vfiprintf_r+0xe4>
 8007738:	2300      	movs	r3, #0
 800773a:	9309      	str	r3, [sp, #36]	; 0x24
 800773c:	2320      	movs	r3, #32
 800773e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007742:	2330      	movs	r3, #48	; 0x30
 8007744:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007748:	9503      	str	r5, [sp, #12]
 800774a:	f04f 0b01 	mov.w	fp, #1
 800774e:	46b8      	mov	r8, r7
 8007750:	4645      	mov	r5, r8
 8007752:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007756:	b10b      	cbz	r3, 800775c <_vfiprintf_r+0x50>
 8007758:	2b25      	cmp	r3, #37	; 0x25
 800775a:	d154      	bne.n	8007806 <_vfiprintf_r+0xfa>
 800775c:	ebb8 0a07 	subs.w	sl, r8, r7
 8007760:	d00b      	beq.n	800777a <_vfiprintf_r+0x6e>
 8007762:	4653      	mov	r3, sl
 8007764:	463a      	mov	r2, r7
 8007766:	4621      	mov	r1, r4
 8007768:	4630      	mov	r0, r6
 800776a:	f7ff ffbc 	bl	80076e6 <__sfputs_r>
 800776e:	3001      	adds	r0, #1
 8007770:	f000 80c2 	beq.w	80078f8 <_vfiprintf_r+0x1ec>
 8007774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007776:	4453      	add	r3, sl
 8007778:	9309      	str	r3, [sp, #36]	; 0x24
 800777a:	f898 3000 	ldrb.w	r3, [r8]
 800777e:	2b00      	cmp	r3, #0
 8007780:	f000 80ba 	beq.w	80078f8 <_vfiprintf_r+0x1ec>
 8007784:	2300      	movs	r3, #0
 8007786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800778a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800778e:	9304      	str	r3, [sp, #16]
 8007790:	9307      	str	r3, [sp, #28]
 8007792:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007796:	931a      	str	r3, [sp, #104]	; 0x68
 8007798:	46a8      	mov	r8, r5
 800779a:	2205      	movs	r2, #5
 800779c:	f818 1b01 	ldrb.w	r1, [r8], #1
 80077a0:	485e      	ldr	r0, [pc, #376]	; (800791c <_vfiprintf_r+0x210>)
 80077a2:	f7f9 fac5 	bl	8000d30 <memchr>
 80077a6:	9b04      	ldr	r3, [sp, #16]
 80077a8:	bb78      	cbnz	r0, 800780a <_vfiprintf_r+0xfe>
 80077aa:	06d9      	lsls	r1, r3, #27
 80077ac:	bf44      	itt	mi
 80077ae:	2220      	movmi	r2, #32
 80077b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80077b4:	071a      	lsls	r2, r3, #28
 80077b6:	bf44      	itt	mi
 80077b8:	222b      	movmi	r2, #43	; 0x2b
 80077ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80077be:	782a      	ldrb	r2, [r5, #0]
 80077c0:	2a2a      	cmp	r2, #42	; 0x2a
 80077c2:	d02a      	beq.n	800781a <_vfiprintf_r+0x10e>
 80077c4:	9a07      	ldr	r2, [sp, #28]
 80077c6:	46a8      	mov	r8, r5
 80077c8:	2000      	movs	r0, #0
 80077ca:	250a      	movs	r5, #10
 80077cc:	4641      	mov	r1, r8
 80077ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077d2:	3b30      	subs	r3, #48	; 0x30
 80077d4:	2b09      	cmp	r3, #9
 80077d6:	d969      	bls.n	80078ac <_vfiprintf_r+0x1a0>
 80077d8:	b360      	cbz	r0, 8007834 <_vfiprintf_r+0x128>
 80077da:	e024      	b.n	8007826 <_vfiprintf_r+0x11a>
 80077dc:	4b50      	ldr	r3, [pc, #320]	; (8007920 <_vfiprintf_r+0x214>)
 80077de:	429c      	cmp	r4, r3
 80077e0:	d101      	bne.n	80077e6 <_vfiprintf_r+0xda>
 80077e2:	68b4      	ldr	r4, [r6, #8]
 80077e4:	e7a2      	b.n	800772c <_vfiprintf_r+0x20>
 80077e6:	4b4f      	ldr	r3, [pc, #316]	; (8007924 <_vfiprintf_r+0x218>)
 80077e8:	429c      	cmp	r4, r3
 80077ea:	bf08      	it	eq
 80077ec:	68f4      	ldreq	r4, [r6, #12]
 80077ee:	e79d      	b.n	800772c <_vfiprintf_r+0x20>
 80077f0:	4621      	mov	r1, r4
 80077f2:	4630      	mov	r0, r6
 80077f4:	f7fe fb1e 	bl	8005e34 <__swsetup_r>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d09d      	beq.n	8007738 <_vfiprintf_r+0x2c>
 80077fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007800:	b01d      	add	sp, #116	; 0x74
 8007802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007806:	46a8      	mov	r8, r5
 8007808:	e7a2      	b.n	8007750 <_vfiprintf_r+0x44>
 800780a:	4a44      	ldr	r2, [pc, #272]	; (800791c <_vfiprintf_r+0x210>)
 800780c:	1a80      	subs	r0, r0, r2
 800780e:	fa0b f000 	lsl.w	r0, fp, r0
 8007812:	4318      	orrs	r0, r3
 8007814:	9004      	str	r0, [sp, #16]
 8007816:	4645      	mov	r5, r8
 8007818:	e7be      	b.n	8007798 <_vfiprintf_r+0x8c>
 800781a:	9a03      	ldr	r2, [sp, #12]
 800781c:	1d11      	adds	r1, r2, #4
 800781e:	6812      	ldr	r2, [r2, #0]
 8007820:	9103      	str	r1, [sp, #12]
 8007822:	2a00      	cmp	r2, #0
 8007824:	db01      	blt.n	800782a <_vfiprintf_r+0x11e>
 8007826:	9207      	str	r2, [sp, #28]
 8007828:	e004      	b.n	8007834 <_vfiprintf_r+0x128>
 800782a:	4252      	negs	r2, r2
 800782c:	f043 0302 	orr.w	r3, r3, #2
 8007830:	9207      	str	r2, [sp, #28]
 8007832:	9304      	str	r3, [sp, #16]
 8007834:	f898 3000 	ldrb.w	r3, [r8]
 8007838:	2b2e      	cmp	r3, #46	; 0x2e
 800783a:	d10e      	bne.n	800785a <_vfiprintf_r+0x14e>
 800783c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007840:	2b2a      	cmp	r3, #42	; 0x2a
 8007842:	d138      	bne.n	80078b6 <_vfiprintf_r+0x1aa>
 8007844:	9b03      	ldr	r3, [sp, #12]
 8007846:	1d1a      	adds	r2, r3, #4
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	9203      	str	r2, [sp, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	bfb8      	it	lt
 8007850:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007854:	f108 0802 	add.w	r8, r8, #2
 8007858:	9305      	str	r3, [sp, #20]
 800785a:	4d33      	ldr	r5, [pc, #204]	; (8007928 <_vfiprintf_r+0x21c>)
 800785c:	f898 1000 	ldrb.w	r1, [r8]
 8007860:	2203      	movs	r2, #3
 8007862:	4628      	mov	r0, r5
 8007864:	f7f9 fa64 	bl	8000d30 <memchr>
 8007868:	b140      	cbz	r0, 800787c <_vfiprintf_r+0x170>
 800786a:	2340      	movs	r3, #64	; 0x40
 800786c:	1b40      	subs	r0, r0, r5
 800786e:	fa03 f000 	lsl.w	r0, r3, r0
 8007872:	9b04      	ldr	r3, [sp, #16]
 8007874:	4303      	orrs	r3, r0
 8007876:	f108 0801 	add.w	r8, r8, #1
 800787a:	9304      	str	r3, [sp, #16]
 800787c:	f898 1000 	ldrb.w	r1, [r8]
 8007880:	482a      	ldr	r0, [pc, #168]	; (800792c <_vfiprintf_r+0x220>)
 8007882:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007886:	2206      	movs	r2, #6
 8007888:	f108 0701 	add.w	r7, r8, #1
 800788c:	f7f9 fa50 	bl	8000d30 <memchr>
 8007890:	2800      	cmp	r0, #0
 8007892:	d037      	beq.n	8007904 <_vfiprintf_r+0x1f8>
 8007894:	4b26      	ldr	r3, [pc, #152]	; (8007930 <_vfiprintf_r+0x224>)
 8007896:	bb1b      	cbnz	r3, 80078e0 <_vfiprintf_r+0x1d4>
 8007898:	9b03      	ldr	r3, [sp, #12]
 800789a:	3307      	adds	r3, #7
 800789c:	f023 0307 	bic.w	r3, r3, #7
 80078a0:	3308      	adds	r3, #8
 80078a2:	9303      	str	r3, [sp, #12]
 80078a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a6:	444b      	add	r3, r9
 80078a8:	9309      	str	r3, [sp, #36]	; 0x24
 80078aa:	e750      	b.n	800774e <_vfiprintf_r+0x42>
 80078ac:	fb05 3202 	mla	r2, r5, r2, r3
 80078b0:	2001      	movs	r0, #1
 80078b2:	4688      	mov	r8, r1
 80078b4:	e78a      	b.n	80077cc <_vfiprintf_r+0xc0>
 80078b6:	2300      	movs	r3, #0
 80078b8:	f108 0801 	add.w	r8, r8, #1
 80078bc:	9305      	str	r3, [sp, #20]
 80078be:	4619      	mov	r1, r3
 80078c0:	250a      	movs	r5, #10
 80078c2:	4640      	mov	r0, r8
 80078c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078c8:	3a30      	subs	r2, #48	; 0x30
 80078ca:	2a09      	cmp	r2, #9
 80078cc:	d903      	bls.n	80078d6 <_vfiprintf_r+0x1ca>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0c3      	beq.n	800785a <_vfiprintf_r+0x14e>
 80078d2:	9105      	str	r1, [sp, #20]
 80078d4:	e7c1      	b.n	800785a <_vfiprintf_r+0x14e>
 80078d6:	fb05 2101 	mla	r1, r5, r1, r2
 80078da:	2301      	movs	r3, #1
 80078dc:	4680      	mov	r8, r0
 80078de:	e7f0      	b.n	80078c2 <_vfiprintf_r+0x1b6>
 80078e0:	ab03      	add	r3, sp, #12
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	4622      	mov	r2, r4
 80078e6:	4b13      	ldr	r3, [pc, #76]	; (8007934 <_vfiprintf_r+0x228>)
 80078e8:	a904      	add	r1, sp, #16
 80078ea:	4630      	mov	r0, r6
 80078ec:	f7fd fe0c 	bl	8005508 <_printf_float>
 80078f0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80078f4:	4681      	mov	r9, r0
 80078f6:	d1d5      	bne.n	80078a4 <_vfiprintf_r+0x198>
 80078f8:	89a3      	ldrh	r3, [r4, #12]
 80078fa:	065b      	lsls	r3, r3, #25
 80078fc:	f53f af7e 	bmi.w	80077fc <_vfiprintf_r+0xf0>
 8007900:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007902:	e77d      	b.n	8007800 <_vfiprintf_r+0xf4>
 8007904:	ab03      	add	r3, sp, #12
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	4622      	mov	r2, r4
 800790a:	4b0a      	ldr	r3, [pc, #40]	; (8007934 <_vfiprintf_r+0x228>)
 800790c:	a904      	add	r1, sp, #16
 800790e:	4630      	mov	r0, r6
 8007910:	f7fe f8b0 	bl	8005a74 <_printf_i>
 8007914:	e7ec      	b.n	80078f0 <_vfiprintf_r+0x1e4>
 8007916:	bf00      	nop
 8007918:	08009960 	.word	0x08009960
 800791c:	08009a9c 	.word	0x08009a9c
 8007920:	08009980 	.word	0x08009980
 8007924:	08009940 	.word	0x08009940
 8007928:	08009aa2 	.word	0x08009aa2
 800792c:	08009aa6 	.word	0x08009aa6
 8007930:	08005509 	.word	0x08005509
 8007934:	080076e7 	.word	0x080076e7

08007938 <_sbrk_r>:
 8007938:	b538      	push	{r3, r4, r5, lr}
 800793a:	4c06      	ldr	r4, [pc, #24]	; (8007954 <_sbrk_r+0x1c>)
 800793c:	2300      	movs	r3, #0
 800793e:	4605      	mov	r5, r0
 8007940:	4608      	mov	r0, r1
 8007942:	6023      	str	r3, [r4, #0]
 8007944:	f7fd fcac 	bl	80052a0 <_sbrk>
 8007948:	1c43      	adds	r3, r0, #1
 800794a:	d102      	bne.n	8007952 <_sbrk_r+0x1a>
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	b103      	cbz	r3, 8007952 <_sbrk_r+0x1a>
 8007950:	602b      	str	r3, [r5, #0]
 8007952:	bd38      	pop	{r3, r4, r5, pc}
 8007954:	200004e4 	.word	0x200004e4

08007958 <__sread>:
 8007958:	b510      	push	{r4, lr}
 800795a:	460c      	mov	r4, r1
 800795c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007960:	f000 f8a8 	bl	8007ab4 <_read_r>
 8007964:	2800      	cmp	r0, #0
 8007966:	bfab      	itete	ge
 8007968:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800796a:	89a3      	ldrhlt	r3, [r4, #12]
 800796c:	181b      	addge	r3, r3, r0
 800796e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007972:	bfac      	ite	ge
 8007974:	6563      	strge	r3, [r4, #84]	; 0x54
 8007976:	81a3      	strhlt	r3, [r4, #12]
 8007978:	bd10      	pop	{r4, pc}

0800797a <__swrite>:
 800797a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800797e:	461f      	mov	r7, r3
 8007980:	898b      	ldrh	r3, [r1, #12]
 8007982:	05db      	lsls	r3, r3, #23
 8007984:	4605      	mov	r5, r0
 8007986:	460c      	mov	r4, r1
 8007988:	4616      	mov	r6, r2
 800798a:	d505      	bpl.n	8007998 <__swrite+0x1e>
 800798c:	2302      	movs	r3, #2
 800798e:	2200      	movs	r2, #0
 8007990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007994:	f000 f868 	bl	8007a68 <_lseek_r>
 8007998:	89a3      	ldrh	r3, [r4, #12]
 800799a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800799e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079a2:	81a3      	strh	r3, [r4, #12]
 80079a4:	4632      	mov	r2, r6
 80079a6:	463b      	mov	r3, r7
 80079a8:	4628      	mov	r0, r5
 80079aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ae:	f000 b817 	b.w	80079e0 <_write_r>

080079b2 <__sseek>:
 80079b2:	b510      	push	{r4, lr}
 80079b4:	460c      	mov	r4, r1
 80079b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ba:	f000 f855 	bl	8007a68 <_lseek_r>
 80079be:	1c43      	adds	r3, r0, #1
 80079c0:	89a3      	ldrh	r3, [r4, #12]
 80079c2:	bf15      	itete	ne
 80079c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80079c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079ce:	81a3      	strheq	r3, [r4, #12]
 80079d0:	bf18      	it	ne
 80079d2:	81a3      	strhne	r3, [r4, #12]
 80079d4:	bd10      	pop	{r4, pc}

080079d6 <__sclose>:
 80079d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079da:	f000 b813 	b.w	8007a04 <_close_r>
	...

080079e0 <_write_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	4c07      	ldr	r4, [pc, #28]	; (8007a00 <_write_r+0x20>)
 80079e4:	4605      	mov	r5, r0
 80079e6:	4608      	mov	r0, r1
 80079e8:	4611      	mov	r1, r2
 80079ea:	2200      	movs	r2, #0
 80079ec:	6022      	str	r2, [r4, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	f7fd fabe 	bl	8004f70 <_write>
 80079f4:	1c43      	adds	r3, r0, #1
 80079f6:	d102      	bne.n	80079fe <_write_r+0x1e>
 80079f8:	6823      	ldr	r3, [r4, #0]
 80079fa:	b103      	cbz	r3, 80079fe <_write_r+0x1e>
 80079fc:	602b      	str	r3, [r5, #0]
 80079fe:	bd38      	pop	{r3, r4, r5, pc}
 8007a00:	200004e4 	.word	0x200004e4

08007a04 <_close_r>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	4c06      	ldr	r4, [pc, #24]	; (8007a20 <_close_r+0x1c>)
 8007a08:	2300      	movs	r3, #0
 8007a0a:	4605      	mov	r5, r0
 8007a0c:	4608      	mov	r0, r1
 8007a0e:	6023      	str	r3, [r4, #0]
 8007a10:	f7fd fc3a 	bl	8005288 <_close>
 8007a14:	1c43      	adds	r3, r0, #1
 8007a16:	d102      	bne.n	8007a1e <_close_r+0x1a>
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	b103      	cbz	r3, 8007a1e <_close_r+0x1a>
 8007a1c:	602b      	str	r3, [r5, #0]
 8007a1e:	bd38      	pop	{r3, r4, r5, pc}
 8007a20:	200004e4 	.word	0x200004e4

08007a24 <_fstat_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	4c07      	ldr	r4, [pc, #28]	; (8007a44 <_fstat_r+0x20>)
 8007a28:	2300      	movs	r3, #0
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	4608      	mov	r0, r1
 8007a2e:	4611      	mov	r1, r2
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	f7fd fc2c 	bl	800528e <_fstat>
 8007a36:	1c43      	adds	r3, r0, #1
 8007a38:	d102      	bne.n	8007a40 <_fstat_r+0x1c>
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	b103      	cbz	r3, 8007a40 <_fstat_r+0x1c>
 8007a3e:	602b      	str	r3, [r5, #0]
 8007a40:	bd38      	pop	{r3, r4, r5, pc}
 8007a42:	bf00      	nop
 8007a44:	200004e4 	.word	0x200004e4

08007a48 <_isatty_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	4c06      	ldr	r4, [pc, #24]	; (8007a64 <_isatty_r+0x1c>)
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	4605      	mov	r5, r0
 8007a50:	4608      	mov	r0, r1
 8007a52:	6023      	str	r3, [r4, #0]
 8007a54:	f7fd fc20 	bl	8005298 <_isatty>
 8007a58:	1c43      	adds	r3, r0, #1
 8007a5a:	d102      	bne.n	8007a62 <_isatty_r+0x1a>
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	b103      	cbz	r3, 8007a62 <_isatty_r+0x1a>
 8007a60:	602b      	str	r3, [r5, #0]
 8007a62:	bd38      	pop	{r3, r4, r5, pc}
 8007a64:	200004e4 	.word	0x200004e4

08007a68 <_lseek_r>:
 8007a68:	b538      	push	{r3, r4, r5, lr}
 8007a6a:	4c07      	ldr	r4, [pc, #28]	; (8007a88 <_lseek_r+0x20>)
 8007a6c:	4605      	mov	r5, r0
 8007a6e:	4608      	mov	r0, r1
 8007a70:	4611      	mov	r1, r2
 8007a72:	2200      	movs	r2, #0
 8007a74:	6022      	str	r2, [r4, #0]
 8007a76:	461a      	mov	r2, r3
 8007a78:	f7fd fc10 	bl	800529c <_lseek>
 8007a7c:	1c43      	adds	r3, r0, #1
 8007a7e:	d102      	bne.n	8007a86 <_lseek_r+0x1e>
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	b103      	cbz	r3, 8007a86 <_lseek_r+0x1e>
 8007a84:	602b      	str	r3, [r5, #0]
 8007a86:	bd38      	pop	{r3, r4, r5, pc}
 8007a88:	200004e4 	.word	0x200004e4

08007a8c <__ascii_mbtowc>:
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	b901      	cbnz	r1, 8007a92 <__ascii_mbtowc+0x6>
 8007a90:	a901      	add	r1, sp, #4
 8007a92:	b142      	cbz	r2, 8007aa6 <__ascii_mbtowc+0x1a>
 8007a94:	b14b      	cbz	r3, 8007aaa <__ascii_mbtowc+0x1e>
 8007a96:	7813      	ldrb	r3, [r2, #0]
 8007a98:	600b      	str	r3, [r1, #0]
 8007a9a:	7812      	ldrb	r2, [r2, #0]
 8007a9c:	1c10      	adds	r0, r2, #0
 8007a9e:	bf18      	it	ne
 8007aa0:	2001      	movne	r0, #1
 8007aa2:	b002      	add	sp, #8
 8007aa4:	4770      	bx	lr
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	e7fb      	b.n	8007aa2 <__ascii_mbtowc+0x16>
 8007aaa:	f06f 0001 	mvn.w	r0, #1
 8007aae:	e7f8      	b.n	8007aa2 <__ascii_mbtowc+0x16>

08007ab0 <__malloc_lock>:
 8007ab0:	4770      	bx	lr

08007ab2 <__malloc_unlock>:
 8007ab2:	4770      	bx	lr

08007ab4 <_read_r>:
 8007ab4:	b538      	push	{r3, r4, r5, lr}
 8007ab6:	4c07      	ldr	r4, [pc, #28]	; (8007ad4 <_read_r+0x20>)
 8007ab8:	4605      	mov	r5, r0
 8007aba:	4608      	mov	r0, r1
 8007abc:	4611      	mov	r1, r2
 8007abe:	2200      	movs	r2, #0
 8007ac0:	6022      	str	r2, [r4, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	f7fd fbd2 	bl	800526c <_read>
 8007ac8:	1c43      	adds	r3, r0, #1
 8007aca:	d102      	bne.n	8007ad2 <_read_r+0x1e>
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	b103      	cbz	r3, 8007ad2 <_read_r+0x1e>
 8007ad0:	602b      	str	r3, [r5, #0]
 8007ad2:	bd38      	pop	{r3, r4, r5, pc}
 8007ad4:	200004e4 	.word	0x200004e4

08007ad8 <__ascii_wctomb>:
 8007ad8:	b149      	cbz	r1, 8007aee <__ascii_wctomb+0x16>
 8007ada:	2aff      	cmp	r2, #255	; 0xff
 8007adc:	bf85      	ittet	hi
 8007ade:	238a      	movhi	r3, #138	; 0x8a
 8007ae0:	6003      	strhi	r3, [r0, #0]
 8007ae2:	700a      	strbls	r2, [r1, #0]
 8007ae4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007ae8:	bf98      	it	ls
 8007aea:	2001      	movls	r0, #1
 8007aec:	4770      	bx	lr
 8007aee:	4608      	mov	r0, r1
 8007af0:	4770      	bx	lr
	...

08007af4 <asin>:
 8007af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007af6:	ed2d 8b02 	vpush	{d8}
 8007afa:	4e26      	ldr	r6, [pc, #152]	; (8007b94 <asin+0xa0>)
 8007afc:	b08b      	sub	sp, #44	; 0x2c
 8007afe:	ec55 4b10 	vmov	r4, r5, d0
 8007b02:	f000 fa1d 	bl	8007f40 <__ieee754_asin>
 8007b06:	f996 3000 	ldrsb.w	r3, [r6]
 8007b0a:	eeb0 8a40 	vmov.f32	s16, s0
 8007b0e:	eef0 8a60 	vmov.f32	s17, s1
 8007b12:	3301      	adds	r3, #1
 8007b14:	d036      	beq.n	8007b84 <asin+0x90>
 8007b16:	4622      	mov	r2, r4
 8007b18:	462b      	mov	r3, r5
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	f7f9 f9df 	bl	8000ee0 <__aeabi_dcmpun>
 8007b22:	4607      	mov	r7, r0
 8007b24:	bb70      	cbnz	r0, 8007b84 <asin+0x90>
 8007b26:	ec45 4b10 	vmov	d0, r4, r5
 8007b2a:	f001 fc59 	bl	80093e0 <fabs>
 8007b2e:	2200      	movs	r2, #0
 8007b30:	4b19      	ldr	r3, [pc, #100]	; (8007b98 <asin+0xa4>)
 8007b32:	ec51 0b10 	vmov	r0, r1, d0
 8007b36:	f7f9 f9c9 	bl	8000ecc <__aeabi_dcmpgt>
 8007b3a:	b318      	cbz	r0, 8007b84 <asin+0x90>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	4816      	ldr	r0, [pc, #88]	; (8007b9c <asin+0xa8>)
 8007b42:	4b17      	ldr	r3, [pc, #92]	; (8007ba0 <asin+0xac>)
 8007b44:	9301      	str	r3, [sp, #4]
 8007b46:	9708      	str	r7, [sp, #32]
 8007b48:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007b4c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007b50:	f001 fc5a 	bl	8009408 <nan>
 8007b54:	f996 3000 	ldrsb.w	r3, [r6]
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	ed8d 0b06 	vstr	d0, [sp, #24]
 8007b5e:	d104      	bne.n	8007b6a <asin+0x76>
 8007b60:	f7fd fc0c 	bl	800537c <__errno>
 8007b64:	2321      	movs	r3, #33	; 0x21
 8007b66:	6003      	str	r3, [r0, #0]
 8007b68:	e004      	b.n	8007b74 <asin+0x80>
 8007b6a:	4668      	mov	r0, sp
 8007b6c:	f001 fc49 	bl	8009402 <matherr>
 8007b70:	2800      	cmp	r0, #0
 8007b72:	d0f5      	beq.n	8007b60 <asin+0x6c>
 8007b74:	9b08      	ldr	r3, [sp, #32]
 8007b76:	b11b      	cbz	r3, 8007b80 <asin+0x8c>
 8007b78:	f7fd fc00 	bl	800537c <__errno>
 8007b7c:	9b08      	ldr	r3, [sp, #32]
 8007b7e:	6003      	str	r3, [r0, #0]
 8007b80:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007b84:	eeb0 0a48 	vmov.f32	s0, s16
 8007b88:	eef0 0a68 	vmov.f32	s1, s17
 8007b8c:	b00b      	add	sp, #44	; 0x2c
 8007b8e:	ecbd 8b02 	vpop	{d8}
 8007b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b94:	2000021c 	.word	0x2000021c
 8007b98:	3ff00000 	.word	0x3ff00000
 8007b9c:	08009aa1 	.word	0x08009aa1
 8007ba0:	08009bb8 	.word	0x08009bb8

08007ba4 <atan2>:
 8007ba4:	f000 bbdc 	b.w	8008360 <__ieee754_atan2>

08007ba8 <pow>:
 8007ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bac:	ed2d 8b04 	vpush	{d8-d9}
 8007bb0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8007e84 <pow+0x2dc>
 8007bb4:	b08d      	sub	sp, #52	; 0x34
 8007bb6:	ec57 6b10 	vmov	r6, r7, d0
 8007bba:	ec55 4b11 	vmov	r4, r5, d1
 8007bbe:	f000 fcaf 	bl	8008520 <__ieee754_pow>
 8007bc2:	f999 3000 	ldrsb.w	r3, [r9]
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	eeb0 8a40 	vmov.f32	s16, s0
 8007bce:	eef0 8a60 	vmov.f32	s17, s1
 8007bd2:	46c8      	mov	r8, r9
 8007bd4:	d05f      	beq.n	8007c96 <pow+0xee>
 8007bd6:	4622      	mov	r2, r4
 8007bd8:	462b      	mov	r3, r5
 8007bda:	4620      	mov	r0, r4
 8007bdc:	4629      	mov	r1, r5
 8007bde:	f7f9 f97f 	bl	8000ee0 <__aeabi_dcmpun>
 8007be2:	4683      	mov	fp, r0
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d156      	bne.n	8007c96 <pow+0xee>
 8007be8:	4632      	mov	r2, r6
 8007bea:	463b      	mov	r3, r7
 8007bec:	4630      	mov	r0, r6
 8007bee:	4639      	mov	r1, r7
 8007bf0:	f7f9 f976 	bl	8000ee0 <__aeabi_dcmpun>
 8007bf4:	9001      	str	r0, [sp, #4]
 8007bf6:	b1e8      	cbz	r0, 8007c34 <pow+0x8c>
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	4629      	mov	r1, r5
 8007c00:	f7f9 f93c 	bl	8000e7c <__aeabi_dcmpeq>
 8007c04:	2800      	cmp	r0, #0
 8007c06:	d046      	beq.n	8007c96 <pow+0xee>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	9302      	str	r3, [sp, #8]
 8007c0c:	4b96      	ldr	r3, [pc, #600]	; (8007e68 <pow+0x2c0>)
 8007c0e:	9303      	str	r3, [sp, #12]
 8007c10:	4b96      	ldr	r3, [pc, #600]	; (8007e6c <pow+0x2c4>)
 8007c12:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007c16:	2200      	movs	r2, #0
 8007c18:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c1c:	9b00      	ldr	r3, [sp, #0]
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007c24:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007c28:	d033      	beq.n	8007c92 <pow+0xea>
 8007c2a:	a802      	add	r0, sp, #8
 8007c2c:	f001 fbe9 	bl	8009402 <matherr>
 8007c30:	bb48      	cbnz	r0, 8007c86 <pow+0xde>
 8007c32:	e05d      	b.n	8007cf0 <pow+0x148>
 8007c34:	f04f 0a00 	mov.w	sl, #0
 8007c38:	f04f 0b00 	mov.w	fp, #0
 8007c3c:	4652      	mov	r2, sl
 8007c3e:	465b      	mov	r3, fp
 8007c40:	4630      	mov	r0, r6
 8007c42:	4639      	mov	r1, r7
 8007c44:	f7f9 f91a 	bl	8000e7c <__aeabi_dcmpeq>
 8007c48:	ec4b ab19 	vmov	d9, sl, fp
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d054      	beq.n	8007cfa <pow+0x152>
 8007c50:	4652      	mov	r2, sl
 8007c52:	465b      	mov	r3, fp
 8007c54:	4620      	mov	r0, r4
 8007c56:	4629      	mov	r1, r5
 8007c58:	f7f9 f910 	bl	8000e7c <__aeabi_dcmpeq>
 8007c5c:	4680      	mov	r8, r0
 8007c5e:	b318      	cbz	r0, 8007ca8 <pow+0x100>
 8007c60:	2301      	movs	r3, #1
 8007c62:	9302      	str	r3, [sp, #8]
 8007c64:	4b80      	ldr	r3, [pc, #512]	; (8007e68 <pow+0x2c0>)
 8007c66:	9303      	str	r3, [sp, #12]
 8007c68:	9b01      	ldr	r3, [sp, #4]
 8007c6a:	930a      	str	r3, [sp, #40]	; 0x28
 8007c6c:	9b00      	ldr	r3, [sp, #0]
 8007c6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007c72:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007c76:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0d5      	beq.n	8007c2a <pow+0x82>
 8007c7e:	4b7b      	ldr	r3, [pc, #492]	; (8007e6c <pow+0x2c4>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c88:	b11b      	cbz	r3, 8007c92 <pow+0xea>
 8007c8a:	f7fd fb77 	bl	800537c <__errno>
 8007c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c90:	6003      	str	r3, [r0, #0]
 8007c92:	ed9d 8b08 	vldr	d8, [sp, #32]
 8007c96:	eeb0 0a48 	vmov.f32	s0, s16
 8007c9a:	eef0 0a68 	vmov.f32	s1, s17
 8007c9e:	b00d      	add	sp, #52	; 0x34
 8007ca0:	ecbd 8b04 	vpop	{d8-d9}
 8007ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ca8:	ec45 4b10 	vmov	d0, r4, r5
 8007cac:	f001 fba1 	bl	80093f2 <finite>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d0f0      	beq.n	8007c96 <pow+0xee>
 8007cb4:	4652      	mov	r2, sl
 8007cb6:	465b      	mov	r3, fp
 8007cb8:	4620      	mov	r0, r4
 8007cba:	4629      	mov	r1, r5
 8007cbc:	f7f9 f8e8 	bl	8000e90 <__aeabi_dcmplt>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d0e8      	beq.n	8007c96 <pow+0xee>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	9302      	str	r3, [sp, #8]
 8007cc8:	4b67      	ldr	r3, [pc, #412]	; (8007e68 <pow+0x2c0>)
 8007cca:	9303      	str	r3, [sp, #12]
 8007ccc:	f999 3000 	ldrsb.w	r3, [r9]
 8007cd0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8007cd4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007cd8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007cdc:	b913      	cbnz	r3, 8007ce4 <pow+0x13c>
 8007cde:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007ce2:	e7a2      	b.n	8007c2a <pow+0x82>
 8007ce4:	4962      	ldr	r1, [pc, #392]	; (8007e70 <pow+0x2c8>)
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d19c      	bne.n	8007c2a <pow+0x82>
 8007cf0:	f7fd fb44 	bl	800537c <__errno>
 8007cf4:	2321      	movs	r3, #33	; 0x21
 8007cf6:	6003      	str	r3, [r0, #0]
 8007cf8:	e7c5      	b.n	8007c86 <pow+0xde>
 8007cfa:	eeb0 0a48 	vmov.f32	s0, s16
 8007cfe:	eef0 0a68 	vmov.f32	s1, s17
 8007d02:	f001 fb76 	bl	80093f2 <finite>
 8007d06:	9000      	str	r0, [sp, #0]
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	f040 8081 	bne.w	8007e10 <pow+0x268>
 8007d0e:	ec47 6b10 	vmov	d0, r6, r7
 8007d12:	f001 fb6e 	bl	80093f2 <finite>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	d07a      	beq.n	8007e10 <pow+0x268>
 8007d1a:	ec45 4b10 	vmov	d0, r4, r5
 8007d1e:	f001 fb68 	bl	80093f2 <finite>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d074      	beq.n	8007e10 <pow+0x268>
 8007d26:	ec53 2b18 	vmov	r2, r3, d8
 8007d2a:	ee18 0a10 	vmov	r0, s16
 8007d2e:	4619      	mov	r1, r3
 8007d30:	f7f9 f8d6 	bl	8000ee0 <__aeabi_dcmpun>
 8007d34:	f999 9000 	ldrsb.w	r9, [r9]
 8007d38:	4b4b      	ldr	r3, [pc, #300]	; (8007e68 <pow+0x2c0>)
 8007d3a:	b1b0      	cbz	r0, 8007d6a <pow+0x1c2>
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d42:	9b00      	ldr	r3, [sp, #0]
 8007d44:	930a      	str	r3, [sp, #40]	; 0x28
 8007d46:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007d4a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007d4e:	f1b9 0f00 	cmp.w	r9, #0
 8007d52:	d0c4      	beq.n	8007cde <pow+0x136>
 8007d54:	4652      	mov	r2, sl
 8007d56:	465b      	mov	r3, fp
 8007d58:	4650      	mov	r0, sl
 8007d5a:	4659      	mov	r1, fp
 8007d5c:	f7f8 fd26 	bl	80007ac <__aeabi_ddiv>
 8007d60:	f1b9 0f02 	cmp.w	r9, #2
 8007d64:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007d68:	e7c1      	b.n	8007cee <pow+0x146>
 8007d6a:	2203      	movs	r2, #3
 8007d6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d70:	900a      	str	r0, [sp, #40]	; 0x28
 8007d72:	4629      	mov	r1, r5
 8007d74:	4620      	mov	r0, r4
 8007d76:	2200      	movs	r2, #0
 8007d78:	4b3e      	ldr	r3, [pc, #248]	; (8007e74 <pow+0x2cc>)
 8007d7a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007d7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007d82:	f7f8 fbe9 	bl	8000558 <__aeabi_dmul>
 8007d86:	4604      	mov	r4, r0
 8007d88:	460d      	mov	r5, r1
 8007d8a:	f1b9 0f00 	cmp.w	r9, #0
 8007d8e:	d124      	bne.n	8007dda <pow+0x232>
 8007d90:	4b39      	ldr	r3, [pc, #228]	; (8007e78 <pow+0x2d0>)
 8007d92:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007d96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	4652      	mov	r2, sl
 8007d9e:	465b      	mov	r3, fp
 8007da0:	4639      	mov	r1, r7
 8007da2:	f7f9 f875 	bl	8000e90 <__aeabi_dcmplt>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	d056      	beq.n	8007e58 <pow+0x2b0>
 8007daa:	ec45 4b10 	vmov	d0, r4, r5
 8007dae:	f001 fb33 	bl	8009418 <rint>
 8007db2:	4622      	mov	r2, r4
 8007db4:	462b      	mov	r3, r5
 8007db6:	ec51 0b10 	vmov	r0, r1, d0
 8007dba:	f7f9 f85f 	bl	8000e7c <__aeabi_dcmpeq>
 8007dbe:	b920      	cbnz	r0, 8007dca <pow+0x222>
 8007dc0:	4b2e      	ldr	r3, [pc, #184]	; (8007e7c <pow+0x2d4>)
 8007dc2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007dc6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007dca:	f998 3000 	ldrsb.w	r3, [r8]
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d142      	bne.n	8007e58 <pow+0x2b0>
 8007dd2:	f7fd fad3 	bl	800537c <__errno>
 8007dd6:	2322      	movs	r3, #34	; 0x22
 8007dd8:	e78d      	b.n	8007cf6 <pow+0x14e>
 8007dda:	4b29      	ldr	r3, [pc, #164]	; (8007e80 <pow+0x2d8>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007de2:	4630      	mov	r0, r6
 8007de4:	4652      	mov	r2, sl
 8007de6:	465b      	mov	r3, fp
 8007de8:	4639      	mov	r1, r7
 8007dea:	f7f9 f851 	bl	8000e90 <__aeabi_dcmplt>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	d0eb      	beq.n	8007dca <pow+0x222>
 8007df2:	ec45 4b10 	vmov	d0, r4, r5
 8007df6:	f001 fb0f 	bl	8009418 <rint>
 8007dfa:	4622      	mov	r2, r4
 8007dfc:	462b      	mov	r3, r5
 8007dfe:	ec51 0b10 	vmov	r0, r1, d0
 8007e02:	f7f9 f83b 	bl	8000e7c <__aeabi_dcmpeq>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	d1df      	bne.n	8007dca <pow+0x222>
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	4b18      	ldr	r3, [pc, #96]	; (8007e70 <pow+0x2c8>)
 8007e0e:	e7da      	b.n	8007dc6 <pow+0x21e>
 8007e10:	2200      	movs	r2, #0
 8007e12:	2300      	movs	r3, #0
 8007e14:	ec51 0b18 	vmov	r0, r1, d8
 8007e18:	f7f9 f830 	bl	8000e7c <__aeabi_dcmpeq>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	f43f af3a 	beq.w	8007c96 <pow+0xee>
 8007e22:	ec47 6b10 	vmov	d0, r6, r7
 8007e26:	f001 fae4 	bl	80093f2 <finite>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	f43f af33 	beq.w	8007c96 <pow+0xee>
 8007e30:	ec45 4b10 	vmov	d0, r4, r5
 8007e34:	f001 fadd 	bl	80093f2 <finite>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	f43f af2c 	beq.w	8007c96 <pow+0xee>
 8007e3e:	2304      	movs	r3, #4
 8007e40:	9302      	str	r3, [sp, #8]
 8007e42:	4b09      	ldr	r3, [pc, #36]	; (8007e68 <pow+0x2c0>)
 8007e44:	9303      	str	r3, [sp, #12]
 8007e46:	2300      	movs	r3, #0
 8007e48:	930a      	str	r3, [sp, #40]	; 0x28
 8007e4a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007e4e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007e52:	ed8d 9b08 	vstr	d9, [sp, #32]
 8007e56:	e7b8      	b.n	8007dca <pow+0x222>
 8007e58:	a802      	add	r0, sp, #8
 8007e5a:	f001 fad2 	bl	8009402 <matherr>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f47f af11 	bne.w	8007c86 <pow+0xde>
 8007e64:	e7b5      	b.n	8007dd2 <pow+0x22a>
 8007e66:	bf00      	nop
 8007e68:	08009bbd 	.word	0x08009bbd
 8007e6c:	3ff00000 	.word	0x3ff00000
 8007e70:	fff00000 	.word	0xfff00000
 8007e74:	3fe00000 	.word	0x3fe00000
 8007e78:	47efffff 	.word	0x47efffff
 8007e7c:	c7efffff 	.word	0xc7efffff
 8007e80:	7ff00000 	.word	0x7ff00000
 8007e84:	2000021c 	.word	0x2000021c

08007e88 <sqrt>:
 8007e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e8c:	ed2d 8b02 	vpush	{d8}
 8007e90:	b08b      	sub	sp, #44	; 0x2c
 8007e92:	ec55 4b10 	vmov	r4, r5, d0
 8007e96:	f001 f851 	bl	8008f3c <__ieee754_sqrt>
 8007e9a:	4b26      	ldr	r3, [pc, #152]	; (8007f34 <sqrt+0xac>)
 8007e9c:	eeb0 8a40 	vmov.f32	s16, s0
 8007ea0:	eef0 8a60 	vmov.f32	s17, s1
 8007ea4:	f993 6000 	ldrsb.w	r6, [r3]
 8007ea8:	1c73      	adds	r3, r6, #1
 8007eaa:	d02a      	beq.n	8007f02 <sqrt+0x7a>
 8007eac:	4622      	mov	r2, r4
 8007eae:	462b      	mov	r3, r5
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	4629      	mov	r1, r5
 8007eb4:	f7f9 f814 	bl	8000ee0 <__aeabi_dcmpun>
 8007eb8:	4607      	mov	r7, r0
 8007eba:	bb10      	cbnz	r0, 8007f02 <sqrt+0x7a>
 8007ebc:	f04f 0800 	mov.w	r8, #0
 8007ec0:	f04f 0900 	mov.w	r9, #0
 8007ec4:	4642      	mov	r2, r8
 8007ec6:	464b      	mov	r3, r9
 8007ec8:	4620      	mov	r0, r4
 8007eca:	4629      	mov	r1, r5
 8007ecc:	f7f8 ffe0 	bl	8000e90 <__aeabi_dcmplt>
 8007ed0:	b1b8      	cbz	r0, 8007f02 <sqrt+0x7a>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	4b18      	ldr	r3, [pc, #96]	; (8007f38 <sqrt+0xb0>)
 8007ed8:	9301      	str	r3, [sp, #4]
 8007eda:	9708      	str	r7, [sp, #32]
 8007edc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007ee0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007ee4:	b9b6      	cbnz	r6, 8007f14 <sqrt+0x8c>
 8007ee6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007eea:	4668      	mov	r0, sp
 8007eec:	f001 fa89 	bl	8009402 <matherr>
 8007ef0:	b1d0      	cbz	r0, 8007f28 <sqrt+0xa0>
 8007ef2:	9b08      	ldr	r3, [sp, #32]
 8007ef4:	b11b      	cbz	r3, 8007efe <sqrt+0x76>
 8007ef6:	f7fd fa41 	bl	800537c <__errno>
 8007efa:	9b08      	ldr	r3, [sp, #32]
 8007efc:	6003      	str	r3, [r0, #0]
 8007efe:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007f02:	eeb0 0a48 	vmov.f32	s0, s16
 8007f06:	eef0 0a68 	vmov.f32	s1, s17
 8007f0a:	b00b      	add	sp, #44	; 0x2c
 8007f0c:	ecbd 8b02 	vpop	{d8}
 8007f10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f14:	4642      	mov	r2, r8
 8007f16:	464b      	mov	r3, r9
 8007f18:	4640      	mov	r0, r8
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	f7f8 fc46 	bl	80007ac <__aeabi_ddiv>
 8007f20:	2e02      	cmp	r6, #2
 8007f22:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007f26:	d1e0      	bne.n	8007eea <sqrt+0x62>
 8007f28:	f7fd fa28 	bl	800537c <__errno>
 8007f2c:	2321      	movs	r3, #33	; 0x21
 8007f2e:	6003      	str	r3, [r0, #0]
 8007f30:	e7df      	b.n	8007ef2 <sqrt+0x6a>
 8007f32:	bf00      	nop
 8007f34:	2000021c 	.word	0x2000021c
 8007f38:	08009bc1 	.word	0x08009bc1
 8007f3c:	00000000 	.word	0x00000000

08007f40 <__ieee754_asin>:
 8007f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f44:	ec55 4b10 	vmov	r4, r5, d0
 8007f48:	4bcb      	ldr	r3, [pc, #812]	; (8008278 <__ieee754_asin+0x338>)
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8007f50:	429f      	cmp	r7, r3
 8007f52:	9501      	str	r5, [sp, #4]
 8007f54:	dd31      	ble.n	8007fba <__ieee754_asin+0x7a>
 8007f56:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8007f5a:	ee10 3a10 	vmov	r3, s0
 8007f5e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8007f62:	433b      	orrs	r3, r7
 8007f64:	d117      	bne.n	8007f96 <__ieee754_asin+0x56>
 8007f66:	a3aa      	add	r3, pc, #680	; (adr r3, 8008210 <__ieee754_asin+0x2d0>)
 8007f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6c:	ee10 0a10 	vmov	r0, s0
 8007f70:	4629      	mov	r1, r5
 8007f72:	f7f8 faf1 	bl	8000558 <__aeabi_dmul>
 8007f76:	a3a8      	add	r3, pc, #672	; (adr r3, 8008218 <__ieee754_asin+0x2d8>)
 8007f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7c:	4606      	mov	r6, r0
 8007f7e:	460f      	mov	r7, r1
 8007f80:	4620      	mov	r0, r4
 8007f82:	4629      	mov	r1, r5
 8007f84:	f7f8 fae8 	bl	8000558 <__aeabi_dmul>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	4639      	mov	r1, r7
 8007f90:	f7f8 f92c 	bl	80001ec <__adddf3>
 8007f94:	e00a      	b.n	8007fac <__ieee754_asin+0x6c>
 8007f96:	ee10 2a10 	vmov	r2, s0
 8007f9a:	462b      	mov	r3, r5
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	f7f8 f922 	bl	80001e8 <__aeabi_dsub>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	f7f8 fc00 	bl	80007ac <__aeabi_ddiv>
 8007fac:	4604      	mov	r4, r0
 8007fae:	460d      	mov	r5, r1
 8007fb0:	ec45 4b10 	vmov	d0, r4, r5
 8007fb4:	b007      	add	sp, #28
 8007fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fba:	4bb0      	ldr	r3, [pc, #704]	; (800827c <__ieee754_asin+0x33c>)
 8007fbc:	429f      	cmp	r7, r3
 8007fbe:	dc11      	bgt.n	8007fe4 <__ieee754_asin+0xa4>
 8007fc0:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8007fc4:	f280 80ae 	bge.w	8008124 <__ieee754_asin+0x1e4>
 8007fc8:	a395      	add	r3, pc, #596	; (adr r3, 8008220 <__ieee754_asin+0x2e0>)
 8007fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fce:	ee10 0a10 	vmov	r0, s0
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	f7f8 f90a 	bl	80001ec <__adddf3>
 8007fd8:	2200      	movs	r2, #0
 8007fda:	4ba9      	ldr	r3, [pc, #676]	; (8008280 <__ieee754_asin+0x340>)
 8007fdc:	f7f8 ff76 	bl	8000ecc <__aeabi_dcmpgt>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	d1e5      	bne.n	8007fb0 <__ieee754_asin+0x70>
 8007fe4:	ec45 4b10 	vmov	d0, r4, r5
 8007fe8:	f001 f9fa 	bl	80093e0 <fabs>
 8007fec:	2000      	movs	r0, #0
 8007fee:	ec53 2b10 	vmov	r2, r3, d0
 8007ff2:	49a3      	ldr	r1, [pc, #652]	; (8008280 <__ieee754_asin+0x340>)
 8007ff4:	f7f8 f8f8 	bl	80001e8 <__aeabi_dsub>
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	4ba2      	ldr	r3, [pc, #648]	; (8008284 <__ieee754_asin+0x344>)
 8007ffc:	f7f8 faac 	bl	8000558 <__aeabi_dmul>
 8008000:	a389      	add	r3, pc, #548	; (adr r3, 8008228 <__ieee754_asin+0x2e8>)
 8008002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008006:	4604      	mov	r4, r0
 8008008:	460d      	mov	r5, r1
 800800a:	f7f8 faa5 	bl	8000558 <__aeabi_dmul>
 800800e:	a388      	add	r3, pc, #544	; (adr r3, 8008230 <__ieee754_asin+0x2f0>)
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	f7f8 f8ea 	bl	80001ec <__adddf3>
 8008018:	4622      	mov	r2, r4
 800801a:	462b      	mov	r3, r5
 800801c:	f7f8 fa9c 	bl	8000558 <__aeabi_dmul>
 8008020:	a385      	add	r3, pc, #532	; (adr r3, 8008238 <__ieee754_asin+0x2f8>)
 8008022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008026:	f7f8 f8df 	bl	80001e8 <__aeabi_dsub>
 800802a:	4622      	mov	r2, r4
 800802c:	462b      	mov	r3, r5
 800802e:	f7f8 fa93 	bl	8000558 <__aeabi_dmul>
 8008032:	a383      	add	r3, pc, #524	; (adr r3, 8008240 <__ieee754_asin+0x300>)
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f7f8 f8d8 	bl	80001ec <__adddf3>
 800803c:	4622      	mov	r2, r4
 800803e:	462b      	mov	r3, r5
 8008040:	f7f8 fa8a 	bl	8000558 <__aeabi_dmul>
 8008044:	a380      	add	r3, pc, #512	; (adr r3, 8008248 <__ieee754_asin+0x308>)
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	f7f8 f8cd 	bl	80001e8 <__aeabi_dsub>
 800804e:	4622      	mov	r2, r4
 8008050:	462b      	mov	r3, r5
 8008052:	f7f8 fa81 	bl	8000558 <__aeabi_dmul>
 8008056:	a37e      	add	r3, pc, #504	; (adr r3, 8008250 <__ieee754_asin+0x310>)
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	f7f8 f8c6 	bl	80001ec <__adddf3>
 8008060:	4622      	mov	r2, r4
 8008062:	462b      	mov	r3, r5
 8008064:	f7f8 fa78 	bl	8000558 <__aeabi_dmul>
 8008068:	a37b      	add	r3, pc, #492	; (adr r3, 8008258 <__ieee754_asin+0x318>)
 800806a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806e:	4680      	mov	r8, r0
 8008070:	4689      	mov	r9, r1
 8008072:	4620      	mov	r0, r4
 8008074:	4629      	mov	r1, r5
 8008076:	f7f8 fa6f 	bl	8000558 <__aeabi_dmul>
 800807a:	a379      	add	r3, pc, #484	; (adr r3, 8008260 <__ieee754_asin+0x320>)
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	f7f8 f8b2 	bl	80001e8 <__aeabi_dsub>
 8008084:	4622      	mov	r2, r4
 8008086:	462b      	mov	r3, r5
 8008088:	f7f8 fa66 	bl	8000558 <__aeabi_dmul>
 800808c:	a376      	add	r3, pc, #472	; (adr r3, 8008268 <__ieee754_asin+0x328>)
 800808e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008092:	f7f8 f8ab 	bl	80001ec <__adddf3>
 8008096:	4622      	mov	r2, r4
 8008098:	462b      	mov	r3, r5
 800809a:	f7f8 fa5d 	bl	8000558 <__aeabi_dmul>
 800809e:	a374      	add	r3, pc, #464	; (adr r3, 8008270 <__ieee754_asin+0x330>)
 80080a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a4:	f7f8 f8a0 	bl	80001e8 <__aeabi_dsub>
 80080a8:	4622      	mov	r2, r4
 80080aa:	462b      	mov	r3, r5
 80080ac:	f7f8 fa54 	bl	8000558 <__aeabi_dmul>
 80080b0:	4b73      	ldr	r3, [pc, #460]	; (8008280 <__ieee754_asin+0x340>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	f7f8 f89a 	bl	80001ec <__adddf3>
 80080b8:	ec45 4b10 	vmov	d0, r4, r5
 80080bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080c0:	f000 ff3c 	bl	8008f3c <__ieee754_sqrt>
 80080c4:	4b70      	ldr	r3, [pc, #448]	; (8008288 <__ieee754_asin+0x348>)
 80080c6:	429f      	cmp	r7, r3
 80080c8:	ec5b ab10 	vmov	sl, fp, d0
 80080cc:	f340 80de 	ble.w	800828c <__ieee754_asin+0x34c>
 80080d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080d4:	4640      	mov	r0, r8
 80080d6:	4649      	mov	r1, r9
 80080d8:	f7f8 fb68 	bl	80007ac <__aeabi_ddiv>
 80080dc:	4652      	mov	r2, sl
 80080de:	465b      	mov	r3, fp
 80080e0:	f7f8 fa3a 	bl	8000558 <__aeabi_dmul>
 80080e4:	4652      	mov	r2, sl
 80080e6:	465b      	mov	r3, fp
 80080e8:	f7f8 f880 	bl	80001ec <__adddf3>
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	f7f8 f87c 	bl	80001ec <__adddf3>
 80080f4:	a348      	add	r3, pc, #288	; (adr r3, 8008218 <__ieee754_asin+0x2d8>)
 80080f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fa:	f7f8 f875 	bl	80001e8 <__aeabi_dsub>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	a143      	add	r1, pc, #268	; (adr r1, 8008210 <__ieee754_asin+0x2d0>)
 8008104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008108:	f7f8 f86e 	bl	80001e8 <__aeabi_dsub>
 800810c:	9b01      	ldr	r3, [sp, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	bfdc      	itt	le
 8008112:	4602      	movle	r2, r0
 8008114:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8008118:	4604      	mov	r4, r0
 800811a:	460d      	mov	r5, r1
 800811c:	bfdc      	itt	le
 800811e:	4614      	movle	r4, r2
 8008120:	461d      	movle	r5, r3
 8008122:	e745      	b.n	8007fb0 <__ieee754_asin+0x70>
 8008124:	ee10 2a10 	vmov	r2, s0
 8008128:	ee10 0a10 	vmov	r0, s0
 800812c:	462b      	mov	r3, r5
 800812e:	4629      	mov	r1, r5
 8008130:	f7f8 fa12 	bl	8000558 <__aeabi_dmul>
 8008134:	a33c      	add	r3, pc, #240	; (adr r3, 8008228 <__ieee754_asin+0x2e8>)
 8008136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813a:	4606      	mov	r6, r0
 800813c:	460f      	mov	r7, r1
 800813e:	f7f8 fa0b 	bl	8000558 <__aeabi_dmul>
 8008142:	a33b      	add	r3, pc, #236	; (adr r3, 8008230 <__ieee754_asin+0x2f0>)
 8008144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008148:	f7f8 f850 	bl	80001ec <__adddf3>
 800814c:	4632      	mov	r2, r6
 800814e:	463b      	mov	r3, r7
 8008150:	f7f8 fa02 	bl	8000558 <__aeabi_dmul>
 8008154:	a338      	add	r3, pc, #224	; (adr r3, 8008238 <__ieee754_asin+0x2f8>)
 8008156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815a:	f7f8 f845 	bl	80001e8 <__aeabi_dsub>
 800815e:	4632      	mov	r2, r6
 8008160:	463b      	mov	r3, r7
 8008162:	f7f8 f9f9 	bl	8000558 <__aeabi_dmul>
 8008166:	a336      	add	r3, pc, #216	; (adr r3, 8008240 <__ieee754_asin+0x300>)
 8008168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816c:	f7f8 f83e 	bl	80001ec <__adddf3>
 8008170:	4632      	mov	r2, r6
 8008172:	463b      	mov	r3, r7
 8008174:	f7f8 f9f0 	bl	8000558 <__aeabi_dmul>
 8008178:	a333      	add	r3, pc, #204	; (adr r3, 8008248 <__ieee754_asin+0x308>)
 800817a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817e:	f7f8 f833 	bl	80001e8 <__aeabi_dsub>
 8008182:	4632      	mov	r2, r6
 8008184:	463b      	mov	r3, r7
 8008186:	f7f8 f9e7 	bl	8000558 <__aeabi_dmul>
 800818a:	a331      	add	r3, pc, #196	; (adr r3, 8008250 <__ieee754_asin+0x310>)
 800818c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008190:	f7f8 f82c 	bl	80001ec <__adddf3>
 8008194:	4632      	mov	r2, r6
 8008196:	463b      	mov	r3, r7
 8008198:	f7f8 f9de 	bl	8000558 <__aeabi_dmul>
 800819c:	a32e      	add	r3, pc, #184	; (adr r3, 8008258 <__ieee754_asin+0x318>)
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	4680      	mov	r8, r0
 80081a4:	4689      	mov	r9, r1
 80081a6:	4630      	mov	r0, r6
 80081a8:	4639      	mov	r1, r7
 80081aa:	f7f8 f9d5 	bl	8000558 <__aeabi_dmul>
 80081ae:	a32c      	add	r3, pc, #176	; (adr r3, 8008260 <__ieee754_asin+0x320>)
 80081b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b4:	f7f8 f818 	bl	80001e8 <__aeabi_dsub>
 80081b8:	4632      	mov	r2, r6
 80081ba:	463b      	mov	r3, r7
 80081bc:	f7f8 f9cc 	bl	8000558 <__aeabi_dmul>
 80081c0:	a329      	add	r3, pc, #164	; (adr r3, 8008268 <__ieee754_asin+0x328>)
 80081c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c6:	f7f8 f811 	bl	80001ec <__adddf3>
 80081ca:	4632      	mov	r2, r6
 80081cc:	463b      	mov	r3, r7
 80081ce:	f7f8 f9c3 	bl	8000558 <__aeabi_dmul>
 80081d2:	a327      	add	r3, pc, #156	; (adr r3, 8008270 <__ieee754_asin+0x330>)
 80081d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d8:	f7f8 f806 	bl	80001e8 <__aeabi_dsub>
 80081dc:	4632      	mov	r2, r6
 80081de:	463b      	mov	r3, r7
 80081e0:	f7f8 f9ba 	bl	8000558 <__aeabi_dmul>
 80081e4:	2200      	movs	r2, #0
 80081e6:	4b26      	ldr	r3, [pc, #152]	; (8008280 <__ieee754_asin+0x340>)
 80081e8:	f7f8 f800 	bl	80001ec <__adddf3>
 80081ec:	4602      	mov	r2, r0
 80081ee:	460b      	mov	r3, r1
 80081f0:	4640      	mov	r0, r8
 80081f2:	4649      	mov	r1, r9
 80081f4:	f7f8 fada 	bl	80007ac <__aeabi_ddiv>
 80081f8:	4622      	mov	r2, r4
 80081fa:	462b      	mov	r3, r5
 80081fc:	f7f8 f9ac 	bl	8000558 <__aeabi_dmul>
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	4620      	mov	r0, r4
 8008206:	4629      	mov	r1, r5
 8008208:	e6c2      	b.n	8007f90 <__ieee754_asin+0x50>
 800820a:	bf00      	nop
 800820c:	f3af 8000 	nop.w
 8008210:	54442d18 	.word	0x54442d18
 8008214:	3ff921fb 	.word	0x3ff921fb
 8008218:	33145c07 	.word	0x33145c07
 800821c:	3c91a626 	.word	0x3c91a626
 8008220:	8800759c 	.word	0x8800759c
 8008224:	7e37e43c 	.word	0x7e37e43c
 8008228:	0dfdf709 	.word	0x0dfdf709
 800822c:	3f023de1 	.word	0x3f023de1
 8008230:	7501b288 	.word	0x7501b288
 8008234:	3f49efe0 	.word	0x3f49efe0
 8008238:	b5688f3b 	.word	0xb5688f3b
 800823c:	3fa48228 	.word	0x3fa48228
 8008240:	0e884455 	.word	0x0e884455
 8008244:	3fc9c155 	.word	0x3fc9c155
 8008248:	03eb6f7d 	.word	0x03eb6f7d
 800824c:	3fd4d612 	.word	0x3fd4d612
 8008250:	55555555 	.word	0x55555555
 8008254:	3fc55555 	.word	0x3fc55555
 8008258:	b12e9282 	.word	0xb12e9282
 800825c:	3fb3b8c5 	.word	0x3fb3b8c5
 8008260:	1b8d0159 	.word	0x1b8d0159
 8008264:	3fe6066c 	.word	0x3fe6066c
 8008268:	9c598ac8 	.word	0x9c598ac8
 800826c:	40002ae5 	.word	0x40002ae5
 8008270:	1c8a2d4b 	.word	0x1c8a2d4b
 8008274:	40033a27 	.word	0x40033a27
 8008278:	3fefffff 	.word	0x3fefffff
 800827c:	3fdfffff 	.word	0x3fdfffff
 8008280:	3ff00000 	.word	0x3ff00000
 8008284:	3fe00000 	.word	0x3fe00000
 8008288:	3fef3332 	.word	0x3fef3332
 800828c:	ee10 2a10 	vmov	r2, s0
 8008290:	ee10 0a10 	vmov	r0, s0
 8008294:	465b      	mov	r3, fp
 8008296:	4659      	mov	r1, fp
 8008298:	f7f7 ffa8 	bl	80001ec <__adddf3>
 800829c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082a4:	4640      	mov	r0, r8
 80082a6:	4649      	mov	r1, r9
 80082a8:	f7f8 fa80 	bl	80007ac <__aeabi_ddiv>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082b4:	f7f8 f950 	bl	8000558 <__aeabi_dmul>
 80082b8:	2600      	movs	r6, #0
 80082ba:	4680      	mov	r8, r0
 80082bc:	4689      	mov	r9, r1
 80082be:	4632      	mov	r2, r6
 80082c0:	465b      	mov	r3, fp
 80082c2:	4630      	mov	r0, r6
 80082c4:	4659      	mov	r1, fp
 80082c6:	f7f8 f947 	bl	8000558 <__aeabi_dmul>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4620      	mov	r0, r4
 80082d0:	4629      	mov	r1, r5
 80082d2:	f7f7 ff89 	bl	80001e8 <__aeabi_dsub>
 80082d6:	4632      	mov	r2, r6
 80082d8:	4604      	mov	r4, r0
 80082da:	460d      	mov	r5, r1
 80082dc:	465b      	mov	r3, fp
 80082de:	4650      	mov	r0, sl
 80082e0:	4659      	mov	r1, fp
 80082e2:	f7f7 ff83 	bl	80001ec <__adddf3>
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	4620      	mov	r0, r4
 80082ec:	4629      	mov	r1, r5
 80082ee:	f7f8 fa5d 	bl	80007ac <__aeabi_ddiv>
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	f7f7 ff79 	bl	80001ec <__adddf3>
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	a114      	add	r1, pc, #80	; (adr r1, 8008350 <__ieee754_asin+0x410>)
 8008300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008304:	f7f7 ff70 	bl	80001e8 <__aeabi_dsub>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4640      	mov	r0, r8
 800830e:	4649      	mov	r1, r9
 8008310:	f7f7 ff6a 	bl	80001e8 <__aeabi_dsub>
 8008314:	465f      	mov	r7, fp
 8008316:	4604      	mov	r4, r0
 8008318:	460d      	mov	r5, r1
 800831a:	4632      	mov	r2, r6
 800831c:	465b      	mov	r3, fp
 800831e:	4630      	mov	r0, r6
 8008320:	4639      	mov	r1, r7
 8008322:	f7f7 ff63 	bl	80001ec <__adddf3>
 8008326:	4602      	mov	r2, r0
 8008328:	460b      	mov	r3, r1
 800832a:	a10b      	add	r1, pc, #44	; (adr r1, 8008358 <__ieee754_asin+0x418>)
 800832c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008330:	f7f7 ff5a 	bl	80001e8 <__aeabi_dsub>
 8008334:	4602      	mov	r2, r0
 8008336:	460b      	mov	r3, r1
 8008338:	4620      	mov	r0, r4
 800833a:	4629      	mov	r1, r5
 800833c:	f7f7 ff54 	bl	80001e8 <__aeabi_dsub>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	a104      	add	r1, pc, #16	; (adr r1, 8008358 <__ieee754_asin+0x418>)
 8008346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800834a:	e6dd      	b.n	8008108 <__ieee754_asin+0x1c8>
 800834c:	f3af 8000 	nop.w
 8008350:	33145c07 	.word	0x33145c07
 8008354:	3c91a626 	.word	0x3c91a626
 8008358:	54442d18 	.word	0x54442d18
 800835c:	3fe921fb 	.word	0x3fe921fb

08008360 <__ieee754_atan2>:
 8008360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008364:	ec57 6b11 	vmov	r6, r7, d1
 8008368:	4273      	negs	r3, r6
 800836a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800836e:	4333      	orrs	r3, r6
 8008370:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8008518 <__ieee754_atan2+0x1b8>
 8008374:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008378:	4573      	cmp	r3, lr
 800837a:	ec51 0b10 	vmov	r0, r1, d0
 800837e:	ee11 8a10 	vmov	r8, s2
 8008382:	d80a      	bhi.n	800839a <__ieee754_atan2+0x3a>
 8008384:	4244      	negs	r4, r0
 8008386:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800838a:	4304      	orrs	r4, r0
 800838c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008390:	4574      	cmp	r4, lr
 8008392:	468c      	mov	ip, r1
 8008394:	ee10 9a10 	vmov	r9, s0
 8008398:	d907      	bls.n	80083aa <__ieee754_atan2+0x4a>
 800839a:	4632      	mov	r2, r6
 800839c:	463b      	mov	r3, r7
 800839e:	f7f7 ff25 	bl	80001ec <__adddf3>
 80083a2:	ec41 0b10 	vmov	d0, r0, r1
 80083a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083aa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80083ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80083b2:	4334      	orrs	r4, r6
 80083b4:	d103      	bne.n	80083be <__ieee754_atan2+0x5e>
 80083b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083ba:	f000 be71 	b.w	80090a0 <atan>
 80083be:	17bc      	asrs	r4, r7, #30
 80083c0:	f004 0402 	and.w	r4, r4, #2
 80083c4:	ea53 0909 	orrs.w	r9, r3, r9
 80083c8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80083cc:	d107      	bne.n	80083de <__ieee754_atan2+0x7e>
 80083ce:	2c02      	cmp	r4, #2
 80083d0:	d073      	beq.n	80084ba <__ieee754_atan2+0x15a>
 80083d2:	2c03      	cmp	r4, #3
 80083d4:	d1e5      	bne.n	80083a2 <__ieee754_atan2+0x42>
 80083d6:	a13e      	add	r1, pc, #248	; (adr r1, 80084d0 <__ieee754_atan2+0x170>)
 80083d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083dc:	e7e1      	b.n	80083a2 <__ieee754_atan2+0x42>
 80083de:	ea52 0808 	orrs.w	r8, r2, r8
 80083e2:	d106      	bne.n	80083f2 <__ieee754_atan2+0x92>
 80083e4:	f1bc 0f00 	cmp.w	ip, #0
 80083e8:	da6b      	bge.n	80084c2 <__ieee754_atan2+0x162>
 80083ea:	a13b      	add	r1, pc, #236	; (adr r1, 80084d8 <__ieee754_atan2+0x178>)
 80083ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083f0:	e7d7      	b.n	80083a2 <__ieee754_atan2+0x42>
 80083f2:	4572      	cmp	r2, lr
 80083f4:	d120      	bne.n	8008438 <__ieee754_atan2+0xd8>
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d111      	bne.n	800841e <__ieee754_atan2+0xbe>
 80083fa:	2c02      	cmp	r4, #2
 80083fc:	d007      	beq.n	800840e <__ieee754_atan2+0xae>
 80083fe:	2c03      	cmp	r4, #3
 8008400:	d009      	beq.n	8008416 <__ieee754_atan2+0xb6>
 8008402:	2c01      	cmp	r4, #1
 8008404:	d155      	bne.n	80084b2 <__ieee754_atan2+0x152>
 8008406:	a136      	add	r1, pc, #216	; (adr r1, 80084e0 <__ieee754_atan2+0x180>)
 8008408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800840c:	e7c9      	b.n	80083a2 <__ieee754_atan2+0x42>
 800840e:	a136      	add	r1, pc, #216	; (adr r1, 80084e8 <__ieee754_atan2+0x188>)
 8008410:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008414:	e7c5      	b.n	80083a2 <__ieee754_atan2+0x42>
 8008416:	a136      	add	r1, pc, #216	; (adr r1, 80084f0 <__ieee754_atan2+0x190>)
 8008418:	e9d1 0100 	ldrd	r0, r1, [r1]
 800841c:	e7c1      	b.n	80083a2 <__ieee754_atan2+0x42>
 800841e:	2c02      	cmp	r4, #2
 8008420:	d04b      	beq.n	80084ba <__ieee754_atan2+0x15a>
 8008422:	2c03      	cmp	r4, #3
 8008424:	d0d7      	beq.n	80083d6 <__ieee754_atan2+0x76>
 8008426:	2c01      	cmp	r4, #1
 8008428:	f04f 0000 	mov.w	r0, #0
 800842c:	d102      	bne.n	8008434 <__ieee754_atan2+0xd4>
 800842e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008432:	e7b6      	b.n	80083a2 <__ieee754_atan2+0x42>
 8008434:	2100      	movs	r1, #0
 8008436:	e7b4      	b.n	80083a2 <__ieee754_atan2+0x42>
 8008438:	4573      	cmp	r3, lr
 800843a:	d0d3      	beq.n	80083e4 <__ieee754_atan2+0x84>
 800843c:	1a9b      	subs	r3, r3, r2
 800843e:	151b      	asrs	r3, r3, #20
 8008440:	2b3c      	cmp	r3, #60	; 0x3c
 8008442:	dc1e      	bgt.n	8008482 <__ieee754_atan2+0x122>
 8008444:	2f00      	cmp	r7, #0
 8008446:	da01      	bge.n	800844c <__ieee754_atan2+0xec>
 8008448:	333c      	adds	r3, #60	; 0x3c
 800844a:	db1e      	blt.n	800848a <__ieee754_atan2+0x12a>
 800844c:	4632      	mov	r2, r6
 800844e:	463b      	mov	r3, r7
 8008450:	f7f8 f9ac 	bl	80007ac <__aeabi_ddiv>
 8008454:	ec41 0b10 	vmov	d0, r0, r1
 8008458:	f000 ffc2 	bl	80093e0 <fabs>
 800845c:	f000 fe20 	bl	80090a0 <atan>
 8008460:	ec51 0b10 	vmov	r0, r1, d0
 8008464:	2c01      	cmp	r4, #1
 8008466:	d013      	beq.n	8008490 <__ieee754_atan2+0x130>
 8008468:	2c02      	cmp	r4, #2
 800846a:	d015      	beq.n	8008498 <__ieee754_atan2+0x138>
 800846c:	2c00      	cmp	r4, #0
 800846e:	d098      	beq.n	80083a2 <__ieee754_atan2+0x42>
 8008470:	a321      	add	r3, pc, #132	; (adr r3, 80084f8 <__ieee754_atan2+0x198>)
 8008472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008476:	f7f7 feb7 	bl	80001e8 <__aeabi_dsub>
 800847a:	a321      	add	r3, pc, #132	; (adr r3, 8008500 <__ieee754_atan2+0x1a0>)
 800847c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008480:	e014      	b.n	80084ac <__ieee754_atan2+0x14c>
 8008482:	a121      	add	r1, pc, #132	; (adr r1, 8008508 <__ieee754_atan2+0x1a8>)
 8008484:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008488:	e7ec      	b.n	8008464 <__ieee754_atan2+0x104>
 800848a:	2000      	movs	r0, #0
 800848c:	2100      	movs	r1, #0
 800848e:	e7e9      	b.n	8008464 <__ieee754_atan2+0x104>
 8008490:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008494:	4619      	mov	r1, r3
 8008496:	e784      	b.n	80083a2 <__ieee754_atan2+0x42>
 8008498:	a317      	add	r3, pc, #92	; (adr r3, 80084f8 <__ieee754_atan2+0x198>)
 800849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849e:	f7f7 fea3 	bl	80001e8 <__aeabi_dsub>
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	a116      	add	r1, pc, #88	; (adr r1, 8008500 <__ieee754_atan2+0x1a0>)
 80084a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084ac:	f7f7 fe9c 	bl	80001e8 <__aeabi_dsub>
 80084b0:	e777      	b.n	80083a2 <__ieee754_atan2+0x42>
 80084b2:	a117      	add	r1, pc, #92	; (adr r1, 8008510 <__ieee754_atan2+0x1b0>)
 80084b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084b8:	e773      	b.n	80083a2 <__ieee754_atan2+0x42>
 80084ba:	a111      	add	r1, pc, #68	; (adr r1, 8008500 <__ieee754_atan2+0x1a0>)
 80084bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084c0:	e76f      	b.n	80083a2 <__ieee754_atan2+0x42>
 80084c2:	a111      	add	r1, pc, #68	; (adr r1, 8008508 <__ieee754_atan2+0x1a8>)
 80084c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084c8:	e76b      	b.n	80083a2 <__ieee754_atan2+0x42>
 80084ca:	bf00      	nop
 80084cc:	f3af 8000 	nop.w
 80084d0:	54442d18 	.word	0x54442d18
 80084d4:	c00921fb 	.word	0xc00921fb
 80084d8:	54442d18 	.word	0x54442d18
 80084dc:	bff921fb 	.word	0xbff921fb
 80084e0:	54442d18 	.word	0x54442d18
 80084e4:	bfe921fb 	.word	0xbfe921fb
 80084e8:	7f3321d2 	.word	0x7f3321d2
 80084ec:	4002d97c 	.word	0x4002d97c
 80084f0:	7f3321d2 	.word	0x7f3321d2
 80084f4:	c002d97c 	.word	0xc002d97c
 80084f8:	33145c07 	.word	0x33145c07
 80084fc:	3ca1a626 	.word	0x3ca1a626
 8008500:	54442d18 	.word	0x54442d18
 8008504:	400921fb 	.word	0x400921fb
 8008508:	54442d18 	.word	0x54442d18
 800850c:	3ff921fb 	.word	0x3ff921fb
 8008510:	54442d18 	.word	0x54442d18
 8008514:	3fe921fb 	.word	0x3fe921fb
 8008518:	7ff00000 	.word	0x7ff00000
 800851c:	00000000 	.word	0x00000000

08008520 <__ieee754_pow>:
 8008520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008524:	b091      	sub	sp, #68	; 0x44
 8008526:	ed8d 1b00 	vstr	d1, [sp]
 800852a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800852e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008532:	ea58 0302 	orrs.w	r3, r8, r2
 8008536:	ec57 6b10 	vmov	r6, r7, d0
 800853a:	f000 84be 	beq.w	8008eba <__ieee754_pow+0x99a>
 800853e:	4b7a      	ldr	r3, [pc, #488]	; (8008728 <__ieee754_pow+0x208>)
 8008540:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008544:	429c      	cmp	r4, r3
 8008546:	463d      	mov	r5, r7
 8008548:	ee10 aa10 	vmov	sl, s0
 800854c:	dc09      	bgt.n	8008562 <__ieee754_pow+0x42>
 800854e:	d103      	bne.n	8008558 <__ieee754_pow+0x38>
 8008550:	b93e      	cbnz	r6, 8008562 <__ieee754_pow+0x42>
 8008552:	45a0      	cmp	r8, r4
 8008554:	dc0d      	bgt.n	8008572 <__ieee754_pow+0x52>
 8008556:	e001      	b.n	800855c <__ieee754_pow+0x3c>
 8008558:	4598      	cmp	r8, r3
 800855a:	dc02      	bgt.n	8008562 <__ieee754_pow+0x42>
 800855c:	4598      	cmp	r8, r3
 800855e:	d10e      	bne.n	800857e <__ieee754_pow+0x5e>
 8008560:	b16a      	cbz	r2, 800857e <__ieee754_pow+0x5e>
 8008562:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008566:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800856a:	ea54 030a 	orrs.w	r3, r4, sl
 800856e:	f000 84a4 	beq.w	8008eba <__ieee754_pow+0x99a>
 8008572:	486e      	ldr	r0, [pc, #440]	; (800872c <__ieee754_pow+0x20c>)
 8008574:	b011      	add	sp, #68	; 0x44
 8008576:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857a:	f000 bf45 	b.w	8009408 <nan>
 800857e:	2d00      	cmp	r5, #0
 8008580:	da53      	bge.n	800862a <__ieee754_pow+0x10a>
 8008582:	4b6b      	ldr	r3, [pc, #428]	; (8008730 <__ieee754_pow+0x210>)
 8008584:	4598      	cmp	r8, r3
 8008586:	dc4d      	bgt.n	8008624 <__ieee754_pow+0x104>
 8008588:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800858c:	4598      	cmp	r8, r3
 800858e:	dd4c      	ble.n	800862a <__ieee754_pow+0x10a>
 8008590:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008594:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008598:	2b14      	cmp	r3, #20
 800859a:	dd26      	ble.n	80085ea <__ieee754_pow+0xca>
 800859c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80085a0:	fa22 f103 	lsr.w	r1, r2, r3
 80085a4:	fa01 f303 	lsl.w	r3, r1, r3
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d13e      	bne.n	800862a <__ieee754_pow+0x10a>
 80085ac:	f001 0101 	and.w	r1, r1, #1
 80085b0:	f1c1 0b02 	rsb	fp, r1, #2
 80085b4:	2a00      	cmp	r2, #0
 80085b6:	d15b      	bne.n	8008670 <__ieee754_pow+0x150>
 80085b8:	4b5b      	ldr	r3, [pc, #364]	; (8008728 <__ieee754_pow+0x208>)
 80085ba:	4598      	cmp	r8, r3
 80085bc:	d124      	bne.n	8008608 <__ieee754_pow+0xe8>
 80085be:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80085c2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80085c6:	ea53 030a 	orrs.w	r3, r3, sl
 80085ca:	f000 8476 	beq.w	8008eba <__ieee754_pow+0x99a>
 80085ce:	4b59      	ldr	r3, [pc, #356]	; (8008734 <__ieee754_pow+0x214>)
 80085d0:	429c      	cmp	r4, r3
 80085d2:	dd2d      	ble.n	8008630 <__ieee754_pow+0x110>
 80085d4:	f1b9 0f00 	cmp.w	r9, #0
 80085d8:	f280 8473 	bge.w	8008ec2 <__ieee754_pow+0x9a2>
 80085dc:	2000      	movs	r0, #0
 80085de:	2100      	movs	r1, #0
 80085e0:	ec41 0b10 	vmov	d0, r0, r1
 80085e4:	b011      	add	sp, #68	; 0x44
 80085e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ea:	2a00      	cmp	r2, #0
 80085ec:	d13e      	bne.n	800866c <__ieee754_pow+0x14c>
 80085ee:	f1c3 0314 	rsb	r3, r3, #20
 80085f2:	fa48 f103 	asr.w	r1, r8, r3
 80085f6:	fa01 f303 	lsl.w	r3, r1, r3
 80085fa:	4543      	cmp	r3, r8
 80085fc:	f040 8469 	bne.w	8008ed2 <__ieee754_pow+0x9b2>
 8008600:	f001 0101 	and.w	r1, r1, #1
 8008604:	f1c1 0b02 	rsb	fp, r1, #2
 8008608:	4b4b      	ldr	r3, [pc, #300]	; (8008738 <__ieee754_pow+0x218>)
 800860a:	4598      	cmp	r8, r3
 800860c:	d118      	bne.n	8008640 <__ieee754_pow+0x120>
 800860e:	f1b9 0f00 	cmp.w	r9, #0
 8008612:	f280 845a 	bge.w	8008eca <__ieee754_pow+0x9aa>
 8008616:	4948      	ldr	r1, [pc, #288]	; (8008738 <__ieee754_pow+0x218>)
 8008618:	4632      	mov	r2, r6
 800861a:	463b      	mov	r3, r7
 800861c:	2000      	movs	r0, #0
 800861e:	f7f8 f8c5 	bl	80007ac <__aeabi_ddiv>
 8008622:	e7dd      	b.n	80085e0 <__ieee754_pow+0xc0>
 8008624:	f04f 0b02 	mov.w	fp, #2
 8008628:	e7c4      	b.n	80085b4 <__ieee754_pow+0x94>
 800862a:	f04f 0b00 	mov.w	fp, #0
 800862e:	e7c1      	b.n	80085b4 <__ieee754_pow+0x94>
 8008630:	f1b9 0f00 	cmp.w	r9, #0
 8008634:	dad2      	bge.n	80085dc <__ieee754_pow+0xbc>
 8008636:	e9dd 0300 	ldrd	r0, r3, [sp]
 800863a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800863e:	e7cf      	b.n	80085e0 <__ieee754_pow+0xc0>
 8008640:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008644:	d106      	bne.n	8008654 <__ieee754_pow+0x134>
 8008646:	4632      	mov	r2, r6
 8008648:	463b      	mov	r3, r7
 800864a:	4610      	mov	r0, r2
 800864c:	4619      	mov	r1, r3
 800864e:	f7f7 ff83 	bl	8000558 <__aeabi_dmul>
 8008652:	e7c5      	b.n	80085e0 <__ieee754_pow+0xc0>
 8008654:	4b39      	ldr	r3, [pc, #228]	; (800873c <__ieee754_pow+0x21c>)
 8008656:	4599      	cmp	r9, r3
 8008658:	d10a      	bne.n	8008670 <__ieee754_pow+0x150>
 800865a:	2d00      	cmp	r5, #0
 800865c:	db08      	blt.n	8008670 <__ieee754_pow+0x150>
 800865e:	ec47 6b10 	vmov	d0, r6, r7
 8008662:	b011      	add	sp, #68	; 0x44
 8008664:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008668:	f000 bc68 	b.w	8008f3c <__ieee754_sqrt>
 800866c:	f04f 0b00 	mov.w	fp, #0
 8008670:	ec47 6b10 	vmov	d0, r6, r7
 8008674:	f000 feb4 	bl	80093e0 <fabs>
 8008678:	ec51 0b10 	vmov	r0, r1, d0
 800867c:	f1ba 0f00 	cmp.w	sl, #0
 8008680:	d127      	bne.n	80086d2 <__ieee754_pow+0x1b2>
 8008682:	b124      	cbz	r4, 800868e <__ieee754_pow+0x16e>
 8008684:	4b2c      	ldr	r3, [pc, #176]	; (8008738 <__ieee754_pow+0x218>)
 8008686:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800868a:	429a      	cmp	r2, r3
 800868c:	d121      	bne.n	80086d2 <__ieee754_pow+0x1b2>
 800868e:	f1b9 0f00 	cmp.w	r9, #0
 8008692:	da05      	bge.n	80086a0 <__ieee754_pow+0x180>
 8008694:	4602      	mov	r2, r0
 8008696:	460b      	mov	r3, r1
 8008698:	2000      	movs	r0, #0
 800869a:	4927      	ldr	r1, [pc, #156]	; (8008738 <__ieee754_pow+0x218>)
 800869c:	f7f8 f886 	bl	80007ac <__aeabi_ddiv>
 80086a0:	2d00      	cmp	r5, #0
 80086a2:	da9d      	bge.n	80085e0 <__ieee754_pow+0xc0>
 80086a4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80086a8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80086ac:	ea54 030b 	orrs.w	r3, r4, fp
 80086b0:	d108      	bne.n	80086c4 <__ieee754_pow+0x1a4>
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	4610      	mov	r0, r2
 80086b8:	4619      	mov	r1, r3
 80086ba:	f7f7 fd95 	bl	80001e8 <__aeabi_dsub>
 80086be:	4602      	mov	r2, r0
 80086c0:	460b      	mov	r3, r1
 80086c2:	e7ac      	b.n	800861e <__ieee754_pow+0xfe>
 80086c4:	f1bb 0f01 	cmp.w	fp, #1
 80086c8:	d18a      	bne.n	80085e0 <__ieee754_pow+0xc0>
 80086ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086ce:	4619      	mov	r1, r3
 80086d0:	e786      	b.n	80085e0 <__ieee754_pow+0xc0>
 80086d2:	0fed      	lsrs	r5, r5, #31
 80086d4:	1e6b      	subs	r3, r5, #1
 80086d6:	930d      	str	r3, [sp, #52]	; 0x34
 80086d8:	ea5b 0303 	orrs.w	r3, fp, r3
 80086dc:	d102      	bne.n	80086e4 <__ieee754_pow+0x1c4>
 80086de:	4632      	mov	r2, r6
 80086e0:	463b      	mov	r3, r7
 80086e2:	e7e8      	b.n	80086b6 <__ieee754_pow+0x196>
 80086e4:	4b16      	ldr	r3, [pc, #88]	; (8008740 <__ieee754_pow+0x220>)
 80086e6:	4598      	cmp	r8, r3
 80086e8:	f340 80fe 	ble.w	80088e8 <__ieee754_pow+0x3c8>
 80086ec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80086f0:	4598      	cmp	r8, r3
 80086f2:	dd0a      	ble.n	800870a <__ieee754_pow+0x1ea>
 80086f4:	4b0f      	ldr	r3, [pc, #60]	; (8008734 <__ieee754_pow+0x214>)
 80086f6:	429c      	cmp	r4, r3
 80086f8:	dc0d      	bgt.n	8008716 <__ieee754_pow+0x1f6>
 80086fa:	f1b9 0f00 	cmp.w	r9, #0
 80086fe:	f6bf af6d 	bge.w	80085dc <__ieee754_pow+0xbc>
 8008702:	a307      	add	r3, pc, #28	; (adr r3, 8008720 <__ieee754_pow+0x200>)
 8008704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008708:	e79f      	b.n	800864a <__ieee754_pow+0x12a>
 800870a:	4b0e      	ldr	r3, [pc, #56]	; (8008744 <__ieee754_pow+0x224>)
 800870c:	429c      	cmp	r4, r3
 800870e:	ddf4      	ble.n	80086fa <__ieee754_pow+0x1da>
 8008710:	4b09      	ldr	r3, [pc, #36]	; (8008738 <__ieee754_pow+0x218>)
 8008712:	429c      	cmp	r4, r3
 8008714:	dd18      	ble.n	8008748 <__ieee754_pow+0x228>
 8008716:	f1b9 0f00 	cmp.w	r9, #0
 800871a:	dcf2      	bgt.n	8008702 <__ieee754_pow+0x1e2>
 800871c:	e75e      	b.n	80085dc <__ieee754_pow+0xbc>
 800871e:	bf00      	nop
 8008720:	8800759c 	.word	0x8800759c
 8008724:	7e37e43c 	.word	0x7e37e43c
 8008728:	7ff00000 	.word	0x7ff00000
 800872c:	08009aa1 	.word	0x08009aa1
 8008730:	433fffff 	.word	0x433fffff
 8008734:	3fefffff 	.word	0x3fefffff
 8008738:	3ff00000 	.word	0x3ff00000
 800873c:	3fe00000 	.word	0x3fe00000
 8008740:	41e00000 	.word	0x41e00000
 8008744:	3feffffe 	.word	0x3feffffe
 8008748:	2200      	movs	r2, #0
 800874a:	4b63      	ldr	r3, [pc, #396]	; (80088d8 <__ieee754_pow+0x3b8>)
 800874c:	f7f7 fd4c 	bl	80001e8 <__aeabi_dsub>
 8008750:	a355      	add	r3, pc, #340	; (adr r3, 80088a8 <__ieee754_pow+0x388>)
 8008752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008756:	4604      	mov	r4, r0
 8008758:	460d      	mov	r5, r1
 800875a:	f7f7 fefd 	bl	8000558 <__aeabi_dmul>
 800875e:	a354      	add	r3, pc, #336	; (adr r3, 80088b0 <__ieee754_pow+0x390>)
 8008760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008764:	4606      	mov	r6, r0
 8008766:	460f      	mov	r7, r1
 8008768:	4620      	mov	r0, r4
 800876a:	4629      	mov	r1, r5
 800876c:	f7f7 fef4 	bl	8000558 <__aeabi_dmul>
 8008770:	2200      	movs	r2, #0
 8008772:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008776:	4b59      	ldr	r3, [pc, #356]	; (80088dc <__ieee754_pow+0x3bc>)
 8008778:	4620      	mov	r0, r4
 800877a:	4629      	mov	r1, r5
 800877c:	f7f7 feec 	bl	8000558 <__aeabi_dmul>
 8008780:	4602      	mov	r2, r0
 8008782:	460b      	mov	r3, r1
 8008784:	a14c      	add	r1, pc, #304	; (adr r1, 80088b8 <__ieee754_pow+0x398>)
 8008786:	e9d1 0100 	ldrd	r0, r1, [r1]
 800878a:	f7f7 fd2d 	bl	80001e8 <__aeabi_dsub>
 800878e:	4622      	mov	r2, r4
 8008790:	462b      	mov	r3, r5
 8008792:	f7f7 fee1 	bl	8000558 <__aeabi_dmul>
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	2000      	movs	r0, #0
 800879c:	4950      	ldr	r1, [pc, #320]	; (80088e0 <__ieee754_pow+0x3c0>)
 800879e:	f7f7 fd23 	bl	80001e8 <__aeabi_dsub>
 80087a2:	4622      	mov	r2, r4
 80087a4:	462b      	mov	r3, r5
 80087a6:	4680      	mov	r8, r0
 80087a8:	4689      	mov	r9, r1
 80087aa:	4620      	mov	r0, r4
 80087ac:	4629      	mov	r1, r5
 80087ae:	f7f7 fed3 	bl	8000558 <__aeabi_dmul>
 80087b2:	4602      	mov	r2, r0
 80087b4:	460b      	mov	r3, r1
 80087b6:	4640      	mov	r0, r8
 80087b8:	4649      	mov	r1, r9
 80087ba:	f7f7 fecd 	bl	8000558 <__aeabi_dmul>
 80087be:	a340      	add	r3, pc, #256	; (adr r3, 80088c0 <__ieee754_pow+0x3a0>)
 80087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c4:	f7f7 fec8 	bl	8000558 <__aeabi_dmul>
 80087c8:	4602      	mov	r2, r0
 80087ca:	460b      	mov	r3, r1
 80087cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087d0:	f7f7 fd0a 	bl	80001e8 <__aeabi_dsub>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	4604      	mov	r4, r0
 80087da:	460d      	mov	r5, r1
 80087dc:	4630      	mov	r0, r6
 80087de:	4639      	mov	r1, r7
 80087e0:	f7f7 fd04 	bl	80001ec <__adddf3>
 80087e4:	2000      	movs	r0, #0
 80087e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087ea:	4632      	mov	r2, r6
 80087ec:	463b      	mov	r3, r7
 80087ee:	f7f7 fcfb 	bl	80001e8 <__aeabi_dsub>
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	4620      	mov	r0, r4
 80087f8:	4629      	mov	r1, r5
 80087fa:	f7f7 fcf5 	bl	80001e8 <__aeabi_dsub>
 80087fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008800:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8008804:	4313      	orrs	r3, r2
 8008806:	4606      	mov	r6, r0
 8008808:	460f      	mov	r7, r1
 800880a:	f040 81eb 	bne.w	8008be4 <__ieee754_pow+0x6c4>
 800880e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80088c8 <__ieee754_pow+0x3a8>
 8008812:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008816:	2400      	movs	r4, #0
 8008818:	4622      	mov	r2, r4
 800881a:	462b      	mov	r3, r5
 800881c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008820:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008824:	f7f7 fce0 	bl	80001e8 <__aeabi_dsub>
 8008828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800882c:	f7f7 fe94 	bl	8000558 <__aeabi_dmul>
 8008830:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008834:	4680      	mov	r8, r0
 8008836:	4689      	mov	r9, r1
 8008838:	4630      	mov	r0, r6
 800883a:	4639      	mov	r1, r7
 800883c:	f7f7 fe8c 	bl	8000558 <__aeabi_dmul>
 8008840:	4602      	mov	r2, r0
 8008842:	460b      	mov	r3, r1
 8008844:	4640      	mov	r0, r8
 8008846:	4649      	mov	r1, r9
 8008848:	f7f7 fcd0 	bl	80001ec <__adddf3>
 800884c:	4622      	mov	r2, r4
 800884e:	462b      	mov	r3, r5
 8008850:	4680      	mov	r8, r0
 8008852:	4689      	mov	r9, r1
 8008854:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008858:	f7f7 fe7e 	bl	8000558 <__aeabi_dmul>
 800885c:	460b      	mov	r3, r1
 800885e:	4604      	mov	r4, r0
 8008860:	460d      	mov	r5, r1
 8008862:	4602      	mov	r2, r0
 8008864:	4649      	mov	r1, r9
 8008866:	4640      	mov	r0, r8
 8008868:	e9cd 4500 	strd	r4, r5, [sp]
 800886c:	f7f7 fcbe 	bl	80001ec <__adddf3>
 8008870:	4b1c      	ldr	r3, [pc, #112]	; (80088e4 <__ieee754_pow+0x3c4>)
 8008872:	4299      	cmp	r1, r3
 8008874:	4606      	mov	r6, r0
 8008876:	460f      	mov	r7, r1
 8008878:	468b      	mov	fp, r1
 800887a:	f340 82f7 	ble.w	8008e6c <__ieee754_pow+0x94c>
 800887e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008882:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008886:	4303      	orrs	r3, r0
 8008888:	f000 81ea 	beq.w	8008c60 <__ieee754_pow+0x740>
 800888c:	a310      	add	r3, pc, #64	; (adr r3, 80088d0 <__ieee754_pow+0x3b0>)
 800888e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008892:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008896:	f7f7 fe5f 	bl	8000558 <__aeabi_dmul>
 800889a:	a30d      	add	r3, pc, #52	; (adr r3, 80088d0 <__ieee754_pow+0x3b0>)
 800889c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a0:	e6d5      	b.n	800864e <__ieee754_pow+0x12e>
 80088a2:	bf00      	nop
 80088a4:	f3af 8000 	nop.w
 80088a8:	60000000 	.word	0x60000000
 80088ac:	3ff71547 	.word	0x3ff71547
 80088b0:	f85ddf44 	.word	0xf85ddf44
 80088b4:	3e54ae0b 	.word	0x3e54ae0b
 80088b8:	55555555 	.word	0x55555555
 80088bc:	3fd55555 	.word	0x3fd55555
 80088c0:	652b82fe 	.word	0x652b82fe
 80088c4:	3ff71547 	.word	0x3ff71547
 80088c8:	00000000 	.word	0x00000000
 80088cc:	bff00000 	.word	0xbff00000
 80088d0:	8800759c 	.word	0x8800759c
 80088d4:	7e37e43c 	.word	0x7e37e43c
 80088d8:	3ff00000 	.word	0x3ff00000
 80088dc:	3fd00000 	.word	0x3fd00000
 80088e0:	3fe00000 	.word	0x3fe00000
 80088e4:	408fffff 	.word	0x408fffff
 80088e8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80088ec:	f04f 0200 	mov.w	r2, #0
 80088f0:	da05      	bge.n	80088fe <__ieee754_pow+0x3de>
 80088f2:	4bd3      	ldr	r3, [pc, #844]	; (8008c40 <__ieee754_pow+0x720>)
 80088f4:	f7f7 fe30 	bl	8000558 <__aeabi_dmul>
 80088f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80088fc:	460c      	mov	r4, r1
 80088fe:	1523      	asrs	r3, r4, #20
 8008900:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008904:	4413      	add	r3, r2
 8008906:	9309      	str	r3, [sp, #36]	; 0x24
 8008908:	4bce      	ldr	r3, [pc, #824]	; (8008c44 <__ieee754_pow+0x724>)
 800890a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800890e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008912:	429c      	cmp	r4, r3
 8008914:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008918:	dd08      	ble.n	800892c <__ieee754_pow+0x40c>
 800891a:	4bcb      	ldr	r3, [pc, #812]	; (8008c48 <__ieee754_pow+0x728>)
 800891c:	429c      	cmp	r4, r3
 800891e:	f340 815e 	ble.w	8008bde <__ieee754_pow+0x6be>
 8008922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008924:	3301      	adds	r3, #1
 8008926:	9309      	str	r3, [sp, #36]	; 0x24
 8008928:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800892c:	f04f 0a00 	mov.w	sl, #0
 8008930:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008934:	930c      	str	r3, [sp, #48]	; 0x30
 8008936:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008938:	4bc4      	ldr	r3, [pc, #784]	; (8008c4c <__ieee754_pow+0x72c>)
 800893a:	4413      	add	r3, r2
 800893c:	ed93 7b00 	vldr	d7, [r3]
 8008940:	4629      	mov	r1, r5
 8008942:	ec53 2b17 	vmov	r2, r3, d7
 8008946:	ed8d 7b06 	vstr	d7, [sp, #24]
 800894a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800894e:	f7f7 fc4b 	bl	80001e8 <__aeabi_dsub>
 8008952:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008956:	4606      	mov	r6, r0
 8008958:	460f      	mov	r7, r1
 800895a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800895e:	f7f7 fc45 	bl	80001ec <__adddf3>
 8008962:	4602      	mov	r2, r0
 8008964:	460b      	mov	r3, r1
 8008966:	2000      	movs	r0, #0
 8008968:	49b9      	ldr	r1, [pc, #740]	; (8008c50 <__ieee754_pow+0x730>)
 800896a:	f7f7 ff1f 	bl	80007ac <__aeabi_ddiv>
 800896e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	4630      	mov	r0, r6
 8008978:	4639      	mov	r1, r7
 800897a:	f7f7 fded 	bl	8000558 <__aeabi_dmul>
 800897e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008982:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008986:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800898a:	2300      	movs	r3, #0
 800898c:	9302      	str	r3, [sp, #8]
 800898e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008992:	106d      	asrs	r5, r5, #1
 8008994:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008998:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800899c:	2200      	movs	r2, #0
 800899e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80089a2:	4640      	mov	r0, r8
 80089a4:	4649      	mov	r1, r9
 80089a6:	4614      	mov	r4, r2
 80089a8:	461d      	mov	r5, r3
 80089aa:	f7f7 fdd5 	bl	8000558 <__aeabi_dmul>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	4630      	mov	r0, r6
 80089b4:	4639      	mov	r1, r7
 80089b6:	f7f7 fc17 	bl	80001e8 <__aeabi_dsub>
 80089ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80089be:	4606      	mov	r6, r0
 80089c0:	460f      	mov	r7, r1
 80089c2:	4620      	mov	r0, r4
 80089c4:	4629      	mov	r1, r5
 80089c6:	f7f7 fc0f 	bl	80001e8 <__aeabi_dsub>
 80089ca:	4602      	mov	r2, r0
 80089cc:	460b      	mov	r3, r1
 80089ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80089d2:	f7f7 fc09 	bl	80001e8 <__aeabi_dsub>
 80089d6:	4642      	mov	r2, r8
 80089d8:	464b      	mov	r3, r9
 80089da:	f7f7 fdbd 	bl	8000558 <__aeabi_dmul>
 80089de:	4602      	mov	r2, r0
 80089e0:	460b      	mov	r3, r1
 80089e2:	4630      	mov	r0, r6
 80089e4:	4639      	mov	r1, r7
 80089e6:	f7f7 fbff 	bl	80001e8 <__aeabi_dsub>
 80089ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80089ee:	f7f7 fdb3 	bl	8000558 <__aeabi_dmul>
 80089f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80089fa:	4610      	mov	r0, r2
 80089fc:	4619      	mov	r1, r3
 80089fe:	f7f7 fdab 	bl	8000558 <__aeabi_dmul>
 8008a02:	a37b      	add	r3, pc, #492	; (adr r3, 8008bf0 <__ieee754_pow+0x6d0>)
 8008a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a08:	4604      	mov	r4, r0
 8008a0a:	460d      	mov	r5, r1
 8008a0c:	f7f7 fda4 	bl	8000558 <__aeabi_dmul>
 8008a10:	a379      	add	r3, pc, #484	; (adr r3, 8008bf8 <__ieee754_pow+0x6d8>)
 8008a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a16:	f7f7 fbe9 	bl	80001ec <__adddf3>
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	462b      	mov	r3, r5
 8008a1e:	f7f7 fd9b 	bl	8000558 <__aeabi_dmul>
 8008a22:	a377      	add	r3, pc, #476	; (adr r3, 8008c00 <__ieee754_pow+0x6e0>)
 8008a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a28:	f7f7 fbe0 	bl	80001ec <__adddf3>
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	462b      	mov	r3, r5
 8008a30:	f7f7 fd92 	bl	8000558 <__aeabi_dmul>
 8008a34:	a374      	add	r3, pc, #464	; (adr r3, 8008c08 <__ieee754_pow+0x6e8>)
 8008a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3a:	f7f7 fbd7 	bl	80001ec <__adddf3>
 8008a3e:	4622      	mov	r2, r4
 8008a40:	462b      	mov	r3, r5
 8008a42:	f7f7 fd89 	bl	8000558 <__aeabi_dmul>
 8008a46:	a372      	add	r3, pc, #456	; (adr r3, 8008c10 <__ieee754_pow+0x6f0>)
 8008a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4c:	f7f7 fbce 	bl	80001ec <__adddf3>
 8008a50:	4622      	mov	r2, r4
 8008a52:	462b      	mov	r3, r5
 8008a54:	f7f7 fd80 	bl	8000558 <__aeabi_dmul>
 8008a58:	a36f      	add	r3, pc, #444	; (adr r3, 8008c18 <__ieee754_pow+0x6f8>)
 8008a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5e:	f7f7 fbc5 	bl	80001ec <__adddf3>
 8008a62:	4622      	mov	r2, r4
 8008a64:	4606      	mov	r6, r0
 8008a66:	460f      	mov	r7, r1
 8008a68:	462b      	mov	r3, r5
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	f7f7 fd73 	bl	8000558 <__aeabi_dmul>
 8008a72:	4602      	mov	r2, r0
 8008a74:	460b      	mov	r3, r1
 8008a76:	4630      	mov	r0, r6
 8008a78:	4639      	mov	r1, r7
 8008a7a:	f7f7 fd6d 	bl	8000558 <__aeabi_dmul>
 8008a7e:	4642      	mov	r2, r8
 8008a80:	4604      	mov	r4, r0
 8008a82:	460d      	mov	r5, r1
 8008a84:	464b      	mov	r3, r9
 8008a86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a8a:	f7f7 fbaf 	bl	80001ec <__adddf3>
 8008a8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a92:	f7f7 fd61 	bl	8000558 <__aeabi_dmul>
 8008a96:	4622      	mov	r2, r4
 8008a98:	462b      	mov	r3, r5
 8008a9a:	f7f7 fba7 	bl	80001ec <__adddf3>
 8008a9e:	4642      	mov	r2, r8
 8008aa0:	4606      	mov	r6, r0
 8008aa2:	460f      	mov	r7, r1
 8008aa4:	464b      	mov	r3, r9
 8008aa6:	4640      	mov	r0, r8
 8008aa8:	4649      	mov	r1, r9
 8008aaa:	f7f7 fd55 	bl	8000558 <__aeabi_dmul>
 8008aae:	2200      	movs	r2, #0
 8008ab0:	4b68      	ldr	r3, [pc, #416]	; (8008c54 <__ieee754_pow+0x734>)
 8008ab2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008ab6:	f7f7 fb99 	bl	80001ec <__adddf3>
 8008aba:	4632      	mov	r2, r6
 8008abc:	463b      	mov	r3, r7
 8008abe:	f7f7 fb95 	bl	80001ec <__adddf3>
 8008ac2:	9802      	ldr	r0, [sp, #8]
 8008ac4:	460d      	mov	r5, r1
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	4602      	mov	r2, r0
 8008aca:	460b      	mov	r3, r1
 8008acc:	4640      	mov	r0, r8
 8008ace:	4649      	mov	r1, r9
 8008ad0:	f7f7 fd42 	bl	8000558 <__aeabi_dmul>
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	4680      	mov	r8, r0
 8008ad8:	4689      	mov	r9, r1
 8008ada:	4b5e      	ldr	r3, [pc, #376]	; (8008c54 <__ieee754_pow+0x734>)
 8008adc:	4620      	mov	r0, r4
 8008ade:	4629      	mov	r1, r5
 8008ae0:	f7f7 fb82 	bl	80001e8 <__aeabi_dsub>
 8008ae4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008ae8:	f7f7 fb7e 	bl	80001e8 <__aeabi_dsub>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4630      	mov	r0, r6
 8008af2:	4639      	mov	r1, r7
 8008af4:	f7f7 fb78 	bl	80001e8 <__aeabi_dsub>
 8008af8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008afc:	f7f7 fd2c 	bl	8000558 <__aeabi_dmul>
 8008b00:	4622      	mov	r2, r4
 8008b02:	4606      	mov	r6, r0
 8008b04:	460f      	mov	r7, r1
 8008b06:	462b      	mov	r3, r5
 8008b08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b0c:	f7f7 fd24 	bl	8000558 <__aeabi_dmul>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	4630      	mov	r0, r6
 8008b16:	4639      	mov	r1, r7
 8008b18:	f7f7 fb68 	bl	80001ec <__adddf3>
 8008b1c:	4606      	mov	r6, r0
 8008b1e:	460f      	mov	r7, r1
 8008b20:	4602      	mov	r2, r0
 8008b22:	460b      	mov	r3, r1
 8008b24:	4640      	mov	r0, r8
 8008b26:	4649      	mov	r1, r9
 8008b28:	f7f7 fb60 	bl	80001ec <__adddf3>
 8008b2c:	9802      	ldr	r0, [sp, #8]
 8008b2e:	a33c      	add	r3, pc, #240	; (adr r3, 8008c20 <__ieee754_pow+0x700>)
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	4604      	mov	r4, r0
 8008b36:	460d      	mov	r5, r1
 8008b38:	f7f7 fd0e 	bl	8000558 <__aeabi_dmul>
 8008b3c:	4642      	mov	r2, r8
 8008b3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008b42:	464b      	mov	r3, r9
 8008b44:	4620      	mov	r0, r4
 8008b46:	4629      	mov	r1, r5
 8008b48:	f7f7 fb4e 	bl	80001e8 <__aeabi_dsub>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	460b      	mov	r3, r1
 8008b50:	4630      	mov	r0, r6
 8008b52:	4639      	mov	r1, r7
 8008b54:	f7f7 fb48 	bl	80001e8 <__aeabi_dsub>
 8008b58:	a333      	add	r3, pc, #204	; (adr r3, 8008c28 <__ieee754_pow+0x708>)
 8008b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5e:	f7f7 fcfb 	bl	8000558 <__aeabi_dmul>
 8008b62:	a333      	add	r3, pc, #204	; (adr r3, 8008c30 <__ieee754_pow+0x710>)
 8008b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b68:	4606      	mov	r6, r0
 8008b6a:	460f      	mov	r7, r1
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	4629      	mov	r1, r5
 8008b70:	f7f7 fcf2 	bl	8000558 <__aeabi_dmul>
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	4630      	mov	r0, r6
 8008b7a:	4639      	mov	r1, r7
 8008b7c:	f7f7 fb36 	bl	80001ec <__adddf3>
 8008b80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b82:	4b35      	ldr	r3, [pc, #212]	; (8008c58 <__ieee754_pow+0x738>)
 8008b84:	4413      	add	r3, r2
 8008b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8a:	f7f7 fb2f 	bl	80001ec <__adddf3>
 8008b8e:	4604      	mov	r4, r0
 8008b90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b92:	460d      	mov	r5, r1
 8008b94:	f7f7 fc76 	bl	8000484 <__aeabi_i2d>
 8008b98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b9a:	4b30      	ldr	r3, [pc, #192]	; (8008c5c <__ieee754_pow+0x73c>)
 8008b9c:	4413      	add	r3, r2
 8008b9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ba2:	4606      	mov	r6, r0
 8008ba4:	460f      	mov	r7, r1
 8008ba6:	4622      	mov	r2, r4
 8008ba8:	462b      	mov	r3, r5
 8008baa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008bae:	f7f7 fb1d 	bl	80001ec <__adddf3>
 8008bb2:	4642      	mov	r2, r8
 8008bb4:	464b      	mov	r3, r9
 8008bb6:	f7f7 fb19 	bl	80001ec <__adddf3>
 8008bba:	4632      	mov	r2, r6
 8008bbc:	463b      	mov	r3, r7
 8008bbe:	f7f7 fb15 	bl	80001ec <__adddf3>
 8008bc2:	9802      	ldr	r0, [sp, #8]
 8008bc4:	4632      	mov	r2, r6
 8008bc6:	463b      	mov	r3, r7
 8008bc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bcc:	f7f7 fb0c 	bl	80001e8 <__aeabi_dsub>
 8008bd0:	4642      	mov	r2, r8
 8008bd2:	464b      	mov	r3, r9
 8008bd4:	f7f7 fb08 	bl	80001e8 <__aeabi_dsub>
 8008bd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bdc:	e607      	b.n	80087ee <__ieee754_pow+0x2ce>
 8008bde:	f04f 0a01 	mov.w	sl, #1
 8008be2:	e6a5      	b.n	8008930 <__ieee754_pow+0x410>
 8008be4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008c38 <__ieee754_pow+0x718>
 8008be8:	e613      	b.n	8008812 <__ieee754_pow+0x2f2>
 8008bea:	bf00      	nop
 8008bec:	f3af 8000 	nop.w
 8008bf0:	4a454eef 	.word	0x4a454eef
 8008bf4:	3fca7e28 	.word	0x3fca7e28
 8008bf8:	93c9db65 	.word	0x93c9db65
 8008bfc:	3fcd864a 	.word	0x3fcd864a
 8008c00:	a91d4101 	.word	0xa91d4101
 8008c04:	3fd17460 	.word	0x3fd17460
 8008c08:	518f264d 	.word	0x518f264d
 8008c0c:	3fd55555 	.word	0x3fd55555
 8008c10:	db6fabff 	.word	0xdb6fabff
 8008c14:	3fdb6db6 	.word	0x3fdb6db6
 8008c18:	33333303 	.word	0x33333303
 8008c1c:	3fe33333 	.word	0x3fe33333
 8008c20:	e0000000 	.word	0xe0000000
 8008c24:	3feec709 	.word	0x3feec709
 8008c28:	dc3a03fd 	.word	0xdc3a03fd
 8008c2c:	3feec709 	.word	0x3feec709
 8008c30:	145b01f5 	.word	0x145b01f5
 8008c34:	be3e2fe0 	.word	0xbe3e2fe0
 8008c38:	00000000 	.word	0x00000000
 8008c3c:	3ff00000 	.word	0x3ff00000
 8008c40:	43400000 	.word	0x43400000
 8008c44:	0003988e 	.word	0x0003988e
 8008c48:	000bb679 	.word	0x000bb679
 8008c4c:	08009bc8 	.word	0x08009bc8
 8008c50:	3ff00000 	.word	0x3ff00000
 8008c54:	40080000 	.word	0x40080000
 8008c58:	08009be8 	.word	0x08009be8
 8008c5c:	08009bd8 	.word	0x08009bd8
 8008c60:	a3b4      	add	r3, pc, #720	; (adr r3, 8008f34 <__ieee754_pow+0xa14>)
 8008c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c66:	4640      	mov	r0, r8
 8008c68:	4649      	mov	r1, r9
 8008c6a:	f7f7 fabf 	bl	80001ec <__adddf3>
 8008c6e:	4622      	mov	r2, r4
 8008c70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c74:	462b      	mov	r3, r5
 8008c76:	4630      	mov	r0, r6
 8008c78:	4639      	mov	r1, r7
 8008c7a:	f7f7 fab5 	bl	80001e8 <__aeabi_dsub>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c86:	f7f8 f921 	bl	8000ecc <__aeabi_dcmpgt>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	f47f adfe 	bne.w	800888c <__ieee754_pow+0x36c>
 8008c90:	4aa3      	ldr	r2, [pc, #652]	; (8008f20 <__ieee754_pow+0xa00>)
 8008c92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c96:	4293      	cmp	r3, r2
 8008c98:	f340 810a 	ble.w	8008eb0 <__ieee754_pow+0x990>
 8008c9c:	151b      	asrs	r3, r3, #20
 8008c9e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008ca2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008ca6:	fa4a f303 	asr.w	r3, sl, r3
 8008caa:	445b      	add	r3, fp
 8008cac:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008cb0:	4e9c      	ldr	r6, [pc, #624]	; (8008f24 <__ieee754_pow+0xa04>)
 8008cb2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008cb6:	4116      	asrs	r6, r2
 8008cb8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	ea23 0106 	bic.w	r1, r3, r6
 8008cc2:	f1c2 0214 	rsb	r2, r2, #20
 8008cc6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008cca:	fa4a fa02 	asr.w	sl, sl, r2
 8008cce:	f1bb 0f00 	cmp.w	fp, #0
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	4629      	mov	r1, r5
 8008cda:	bfb8      	it	lt
 8008cdc:	f1ca 0a00 	rsblt	sl, sl, #0
 8008ce0:	f7f7 fa82 	bl	80001e8 <__aeabi_dsub>
 8008ce4:	e9cd 0100 	strd	r0, r1, [sp]
 8008ce8:	4642      	mov	r2, r8
 8008cea:	464b      	mov	r3, r9
 8008cec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cf0:	f7f7 fa7c 	bl	80001ec <__adddf3>
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	a378      	add	r3, pc, #480	; (adr r3, 8008ed8 <__ieee754_pow+0x9b8>)
 8008cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	460d      	mov	r5, r1
 8008d00:	f7f7 fc2a 	bl	8000558 <__aeabi_dmul>
 8008d04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d08:	4606      	mov	r6, r0
 8008d0a:	460f      	mov	r7, r1
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	4629      	mov	r1, r5
 8008d10:	f7f7 fa6a 	bl	80001e8 <__aeabi_dsub>
 8008d14:	4602      	mov	r2, r0
 8008d16:	460b      	mov	r3, r1
 8008d18:	4640      	mov	r0, r8
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	f7f7 fa64 	bl	80001e8 <__aeabi_dsub>
 8008d20:	a36f      	add	r3, pc, #444	; (adr r3, 8008ee0 <__ieee754_pow+0x9c0>)
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	f7f7 fc17 	bl	8000558 <__aeabi_dmul>
 8008d2a:	a36f      	add	r3, pc, #444	; (adr r3, 8008ee8 <__ieee754_pow+0x9c8>)
 8008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d30:	4680      	mov	r8, r0
 8008d32:	4689      	mov	r9, r1
 8008d34:	4620      	mov	r0, r4
 8008d36:	4629      	mov	r1, r5
 8008d38:	f7f7 fc0e 	bl	8000558 <__aeabi_dmul>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	4640      	mov	r0, r8
 8008d42:	4649      	mov	r1, r9
 8008d44:	f7f7 fa52 	bl	80001ec <__adddf3>
 8008d48:	4604      	mov	r4, r0
 8008d4a:	460d      	mov	r5, r1
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4630      	mov	r0, r6
 8008d52:	4639      	mov	r1, r7
 8008d54:	f7f7 fa4a 	bl	80001ec <__adddf3>
 8008d58:	4632      	mov	r2, r6
 8008d5a:	463b      	mov	r3, r7
 8008d5c:	4680      	mov	r8, r0
 8008d5e:	4689      	mov	r9, r1
 8008d60:	f7f7 fa42 	bl	80001e8 <__aeabi_dsub>
 8008d64:	4602      	mov	r2, r0
 8008d66:	460b      	mov	r3, r1
 8008d68:	4620      	mov	r0, r4
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	f7f7 fa3c 	bl	80001e8 <__aeabi_dsub>
 8008d70:	4642      	mov	r2, r8
 8008d72:	4606      	mov	r6, r0
 8008d74:	460f      	mov	r7, r1
 8008d76:	464b      	mov	r3, r9
 8008d78:	4640      	mov	r0, r8
 8008d7a:	4649      	mov	r1, r9
 8008d7c:	f7f7 fbec 	bl	8000558 <__aeabi_dmul>
 8008d80:	a35b      	add	r3, pc, #364	; (adr r3, 8008ef0 <__ieee754_pow+0x9d0>)
 8008d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d86:	4604      	mov	r4, r0
 8008d88:	460d      	mov	r5, r1
 8008d8a:	f7f7 fbe5 	bl	8000558 <__aeabi_dmul>
 8008d8e:	a35a      	add	r3, pc, #360	; (adr r3, 8008ef8 <__ieee754_pow+0x9d8>)
 8008d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d94:	f7f7 fa28 	bl	80001e8 <__aeabi_dsub>
 8008d98:	4622      	mov	r2, r4
 8008d9a:	462b      	mov	r3, r5
 8008d9c:	f7f7 fbdc 	bl	8000558 <__aeabi_dmul>
 8008da0:	a357      	add	r3, pc, #348	; (adr r3, 8008f00 <__ieee754_pow+0x9e0>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	f7f7 fa21 	bl	80001ec <__adddf3>
 8008daa:	4622      	mov	r2, r4
 8008dac:	462b      	mov	r3, r5
 8008dae:	f7f7 fbd3 	bl	8000558 <__aeabi_dmul>
 8008db2:	a355      	add	r3, pc, #340	; (adr r3, 8008f08 <__ieee754_pow+0x9e8>)
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	f7f7 fa16 	bl	80001e8 <__aeabi_dsub>
 8008dbc:	4622      	mov	r2, r4
 8008dbe:	462b      	mov	r3, r5
 8008dc0:	f7f7 fbca 	bl	8000558 <__aeabi_dmul>
 8008dc4:	a352      	add	r3, pc, #328	; (adr r3, 8008f10 <__ieee754_pow+0x9f0>)
 8008dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dca:	f7f7 fa0f 	bl	80001ec <__adddf3>
 8008dce:	4622      	mov	r2, r4
 8008dd0:	462b      	mov	r3, r5
 8008dd2:	f7f7 fbc1 	bl	8000558 <__aeabi_dmul>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	4640      	mov	r0, r8
 8008ddc:	4649      	mov	r1, r9
 8008dde:	f7f7 fa03 	bl	80001e8 <__aeabi_dsub>
 8008de2:	4604      	mov	r4, r0
 8008de4:	460d      	mov	r5, r1
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	4640      	mov	r0, r8
 8008dec:	4649      	mov	r1, r9
 8008dee:	f7f7 fbb3 	bl	8000558 <__aeabi_dmul>
 8008df2:	2200      	movs	r2, #0
 8008df4:	e9cd 0100 	strd	r0, r1, [sp]
 8008df8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	4629      	mov	r1, r5
 8008e00:	f7f7 f9f2 	bl	80001e8 <__aeabi_dsub>
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e0c:	f7f7 fcce 	bl	80007ac <__aeabi_ddiv>
 8008e10:	4632      	mov	r2, r6
 8008e12:	4604      	mov	r4, r0
 8008e14:	460d      	mov	r5, r1
 8008e16:	463b      	mov	r3, r7
 8008e18:	4640      	mov	r0, r8
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	f7f7 fb9c 	bl	8000558 <__aeabi_dmul>
 8008e20:	4632      	mov	r2, r6
 8008e22:	463b      	mov	r3, r7
 8008e24:	f7f7 f9e2 	bl	80001ec <__adddf3>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	4629      	mov	r1, r5
 8008e30:	f7f7 f9da 	bl	80001e8 <__aeabi_dsub>
 8008e34:	4642      	mov	r2, r8
 8008e36:	464b      	mov	r3, r9
 8008e38:	f7f7 f9d6 	bl	80001e8 <__aeabi_dsub>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	460b      	mov	r3, r1
 8008e40:	2000      	movs	r0, #0
 8008e42:	4939      	ldr	r1, [pc, #228]	; (8008f28 <__ieee754_pow+0xa08>)
 8008e44:	f7f7 f9d0 	bl	80001e8 <__aeabi_dsub>
 8008e48:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008e4c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	da2f      	bge.n	8008eb6 <__ieee754_pow+0x996>
 8008e56:	4650      	mov	r0, sl
 8008e58:	ec43 2b10 	vmov	d0, r2, r3
 8008e5c:	f000 fb60 	bl	8009520 <scalbn>
 8008e60:	ec51 0b10 	vmov	r0, r1, d0
 8008e64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e68:	f7ff bbf1 	b.w	800864e <__ieee754_pow+0x12e>
 8008e6c:	4b2f      	ldr	r3, [pc, #188]	; (8008f2c <__ieee754_pow+0xa0c>)
 8008e6e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008e72:	429e      	cmp	r6, r3
 8008e74:	f77f af0c 	ble.w	8008c90 <__ieee754_pow+0x770>
 8008e78:	4b2d      	ldr	r3, [pc, #180]	; (8008f30 <__ieee754_pow+0xa10>)
 8008e7a:	440b      	add	r3, r1
 8008e7c:	4303      	orrs	r3, r0
 8008e7e:	d00b      	beq.n	8008e98 <__ieee754_pow+0x978>
 8008e80:	a325      	add	r3, pc, #148	; (adr r3, 8008f18 <__ieee754_pow+0x9f8>)
 8008e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e8a:	f7f7 fb65 	bl	8000558 <__aeabi_dmul>
 8008e8e:	a322      	add	r3, pc, #136	; (adr r3, 8008f18 <__ieee754_pow+0x9f8>)
 8008e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e94:	f7ff bbdb 	b.w	800864e <__ieee754_pow+0x12e>
 8008e98:	4622      	mov	r2, r4
 8008e9a:	462b      	mov	r3, r5
 8008e9c:	f7f7 f9a4 	bl	80001e8 <__aeabi_dsub>
 8008ea0:	4642      	mov	r2, r8
 8008ea2:	464b      	mov	r3, r9
 8008ea4:	f7f8 f808 	bl	8000eb8 <__aeabi_dcmpge>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	f43f aef1 	beq.w	8008c90 <__ieee754_pow+0x770>
 8008eae:	e7e7      	b.n	8008e80 <__ieee754_pow+0x960>
 8008eb0:	f04f 0a00 	mov.w	sl, #0
 8008eb4:	e718      	b.n	8008ce8 <__ieee754_pow+0x7c8>
 8008eb6:	4621      	mov	r1, r4
 8008eb8:	e7d4      	b.n	8008e64 <__ieee754_pow+0x944>
 8008eba:	2000      	movs	r0, #0
 8008ebc:	491a      	ldr	r1, [pc, #104]	; (8008f28 <__ieee754_pow+0xa08>)
 8008ebe:	f7ff bb8f 	b.w	80085e0 <__ieee754_pow+0xc0>
 8008ec2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ec6:	f7ff bb8b 	b.w	80085e0 <__ieee754_pow+0xc0>
 8008eca:	4630      	mov	r0, r6
 8008ecc:	4639      	mov	r1, r7
 8008ece:	f7ff bb87 	b.w	80085e0 <__ieee754_pow+0xc0>
 8008ed2:	4693      	mov	fp, r2
 8008ed4:	f7ff bb98 	b.w	8008608 <__ieee754_pow+0xe8>
 8008ed8:	00000000 	.word	0x00000000
 8008edc:	3fe62e43 	.word	0x3fe62e43
 8008ee0:	fefa39ef 	.word	0xfefa39ef
 8008ee4:	3fe62e42 	.word	0x3fe62e42
 8008ee8:	0ca86c39 	.word	0x0ca86c39
 8008eec:	be205c61 	.word	0xbe205c61
 8008ef0:	72bea4d0 	.word	0x72bea4d0
 8008ef4:	3e663769 	.word	0x3e663769
 8008ef8:	c5d26bf1 	.word	0xc5d26bf1
 8008efc:	3ebbbd41 	.word	0x3ebbbd41
 8008f00:	af25de2c 	.word	0xaf25de2c
 8008f04:	3f11566a 	.word	0x3f11566a
 8008f08:	16bebd93 	.word	0x16bebd93
 8008f0c:	3f66c16c 	.word	0x3f66c16c
 8008f10:	5555553e 	.word	0x5555553e
 8008f14:	3fc55555 	.word	0x3fc55555
 8008f18:	c2f8f359 	.word	0xc2f8f359
 8008f1c:	01a56e1f 	.word	0x01a56e1f
 8008f20:	3fe00000 	.word	0x3fe00000
 8008f24:	000fffff 	.word	0x000fffff
 8008f28:	3ff00000 	.word	0x3ff00000
 8008f2c:	4090cbff 	.word	0x4090cbff
 8008f30:	3f6f3400 	.word	0x3f6f3400
 8008f34:	652b82fe 	.word	0x652b82fe
 8008f38:	3c971547 	.word	0x3c971547

08008f3c <__ieee754_sqrt>:
 8008f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f40:	4955      	ldr	r1, [pc, #340]	; (8009098 <__ieee754_sqrt+0x15c>)
 8008f42:	ec55 4b10 	vmov	r4, r5, d0
 8008f46:	43a9      	bics	r1, r5
 8008f48:	462b      	mov	r3, r5
 8008f4a:	462a      	mov	r2, r5
 8008f4c:	d112      	bne.n	8008f74 <__ieee754_sqrt+0x38>
 8008f4e:	ee10 2a10 	vmov	r2, s0
 8008f52:	ee10 0a10 	vmov	r0, s0
 8008f56:	4629      	mov	r1, r5
 8008f58:	f7f7 fafe 	bl	8000558 <__aeabi_dmul>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	460b      	mov	r3, r1
 8008f60:	4620      	mov	r0, r4
 8008f62:	4629      	mov	r1, r5
 8008f64:	f7f7 f942 	bl	80001ec <__adddf3>
 8008f68:	4604      	mov	r4, r0
 8008f6a:	460d      	mov	r5, r1
 8008f6c:	ec45 4b10 	vmov	d0, r4, r5
 8008f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f74:	2d00      	cmp	r5, #0
 8008f76:	ee10 0a10 	vmov	r0, s0
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	dc0f      	bgt.n	8008f9e <__ieee754_sqrt+0x62>
 8008f7e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008f82:	4330      	orrs	r0, r6
 8008f84:	d0f2      	beq.n	8008f6c <__ieee754_sqrt+0x30>
 8008f86:	b155      	cbz	r5, 8008f9e <__ieee754_sqrt+0x62>
 8008f88:	ee10 2a10 	vmov	r2, s0
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	4629      	mov	r1, r5
 8008f90:	f7f7 f92a 	bl	80001e8 <__aeabi_dsub>
 8008f94:	4602      	mov	r2, r0
 8008f96:	460b      	mov	r3, r1
 8008f98:	f7f7 fc08 	bl	80007ac <__aeabi_ddiv>
 8008f9c:	e7e4      	b.n	8008f68 <__ieee754_sqrt+0x2c>
 8008f9e:	151b      	asrs	r3, r3, #20
 8008fa0:	d073      	beq.n	800908a <__ieee754_sqrt+0x14e>
 8008fa2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008fa6:	07dd      	lsls	r5, r3, #31
 8008fa8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008fac:	bf48      	it	mi
 8008fae:	0fc8      	lsrmi	r0, r1, #31
 8008fb0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008fb4:	bf44      	itt	mi
 8008fb6:	0049      	lslmi	r1, r1, #1
 8008fb8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008fbc:	2500      	movs	r5, #0
 8008fbe:	1058      	asrs	r0, r3, #1
 8008fc0:	0fcb      	lsrs	r3, r1, #31
 8008fc2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008fc6:	0049      	lsls	r1, r1, #1
 8008fc8:	2316      	movs	r3, #22
 8008fca:	462c      	mov	r4, r5
 8008fcc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008fd0:	19a7      	adds	r7, r4, r6
 8008fd2:	4297      	cmp	r7, r2
 8008fd4:	bfde      	ittt	le
 8008fd6:	19bc      	addle	r4, r7, r6
 8008fd8:	1bd2      	suble	r2, r2, r7
 8008fda:	19ad      	addle	r5, r5, r6
 8008fdc:	0fcf      	lsrs	r7, r1, #31
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008fe4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008fe8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008fec:	d1f0      	bne.n	8008fd0 <__ieee754_sqrt+0x94>
 8008fee:	f04f 0c20 	mov.w	ip, #32
 8008ff2:	469e      	mov	lr, r3
 8008ff4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008ff8:	42a2      	cmp	r2, r4
 8008ffa:	eb06 070e 	add.w	r7, r6, lr
 8008ffe:	dc02      	bgt.n	8009006 <__ieee754_sqrt+0xca>
 8009000:	d112      	bne.n	8009028 <__ieee754_sqrt+0xec>
 8009002:	428f      	cmp	r7, r1
 8009004:	d810      	bhi.n	8009028 <__ieee754_sqrt+0xec>
 8009006:	2f00      	cmp	r7, #0
 8009008:	eb07 0e06 	add.w	lr, r7, r6
 800900c:	da42      	bge.n	8009094 <__ieee754_sqrt+0x158>
 800900e:	f1be 0f00 	cmp.w	lr, #0
 8009012:	db3f      	blt.n	8009094 <__ieee754_sqrt+0x158>
 8009014:	f104 0801 	add.w	r8, r4, #1
 8009018:	1b12      	subs	r2, r2, r4
 800901a:	428f      	cmp	r7, r1
 800901c:	bf88      	it	hi
 800901e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8009022:	1bc9      	subs	r1, r1, r7
 8009024:	4433      	add	r3, r6
 8009026:	4644      	mov	r4, r8
 8009028:	0052      	lsls	r2, r2, #1
 800902a:	f1bc 0c01 	subs.w	ip, ip, #1
 800902e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009032:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009036:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800903a:	d1dd      	bne.n	8008ff8 <__ieee754_sqrt+0xbc>
 800903c:	430a      	orrs	r2, r1
 800903e:	d006      	beq.n	800904e <__ieee754_sqrt+0x112>
 8009040:	1c5c      	adds	r4, r3, #1
 8009042:	bf13      	iteet	ne
 8009044:	3301      	addne	r3, #1
 8009046:	3501      	addeq	r5, #1
 8009048:	4663      	moveq	r3, ip
 800904a:	f023 0301 	bicne.w	r3, r3, #1
 800904e:	106a      	asrs	r2, r5, #1
 8009050:	085b      	lsrs	r3, r3, #1
 8009052:	07e9      	lsls	r1, r5, #31
 8009054:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009058:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800905c:	bf48      	it	mi
 800905e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009062:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009066:	461c      	mov	r4, r3
 8009068:	e780      	b.n	8008f6c <__ieee754_sqrt+0x30>
 800906a:	0aca      	lsrs	r2, r1, #11
 800906c:	3815      	subs	r0, #21
 800906e:	0549      	lsls	r1, r1, #21
 8009070:	2a00      	cmp	r2, #0
 8009072:	d0fa      	beq.n	800906a <__ieee754_sqrt+0x12e>
 8009074:	02d6      	lsls	r6, r2, #11
 8009076:	d50a      	bpl.n	800908e <__ieee754_sqrt+0x152>
 8009078:	f1c3 0420 	rsb	r4, r3, #32
 800907c:	fa21 f404 	lsr.w	r4, r1, r4
 8009080:	1e5d      	subs	r5, r3, #1
 8009082:	4099      	lsls	r1, r3
 8009084:	4322      	orrs	r2, r4
 8009086:	1b43      	subs	r3, r0, r5
 8009088:	e78b      	b.n	8008fa2 <__ieee754_sqrt+0x66>
 800908a:	4618      	mov	r0, r3
 800908c:	e7f0      	b.n	8009070 <__ieee754_sqrt+0x134>
 800908e:	0052      	lsls	r2, r2, #1
 8009090:	3301      	adds	r3, #1
 8009092:	e7ef      	b.n	8009074 <__ieee754_sqrt+0x138>
 8009094:	46a0      	mov	r8, r4
 8009096:	e7bf      	b.n	8009018 <__ieee754_sqrt+0xdc>
 8009098:	7ff00000 	.word	0x7ff00000
 800909c:	00000000 	.word	0x00000000

080090a0 <atan>:
 80090a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a4:	ec55 4b10 	vmov	r4, r5, d0
 80090a8:	4bc3      	ldr	r3, [pc, #780]	; (80093b8 <atan+0x318>)
 80090aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80090ae:	429e      	cmp	r6, r3
 80090b0:	46ab      	mov	fp, r5
 80090b2:	dd18      	ble.n	80090e6 <atan+0x46>
 80090b4:	4bc1      	ldr	r3, [pc, #772]	; (80093bc <atan+0x31c>)
 80090b6:	429e      	cmp	r6, r3
 80090b8:	dc01      	bgt.n	80090be <atan+0x1e>
 80090ba:	d109      	bne.n	80090d0 <atan+0x30>
 80090bc:	b144      	cbz	r4, 80090d0 <atan+0x30>
 80090be:	4622      	mov	r2, r4
 80090c0:	462b      	mov	r3, r5
 80090c2:	4620      	mov	r0, r4
 80090c4:	4629      	mov	r1, r5
 80090c6:	f7f7 f891 	bl	80001ec <__adddf3>
 80090ca:	4604      	mov	r4, r0
 80090cc:	460d      	mov	r5, r1
 80090ce:	e006      	b.n	80090de <atan+0x3e>
 80090d0:	f1bb 0f00 	cmp.w	fp, #0
 80090d4:	f340 8131 	ble.w	800933a <atan+0x29a>
 80090d8:	a59b      	add	r5, pc, #620	; (adr r5, 8009348 <atan+0x2a8>)
 80090da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80090de:	ec45 4b10 	vmov	d0, r4, r5
 80090e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e6:	4bb6      	ldr	r3, [pc, #728]	; (80093c0 <atan+0x320>)
 80090e8:	429e      	cmp	r6, r3
 80090ea:	dc14      	bgt.n	8009116 <atan+0x76>
 80090ec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80090f0:	429e      	cmp	r6, r3
 80090f2:	dc0d      	bgt.n	8009110 <atan+0x70>
 80090f4:	a396      	add	r3, pc, #600	; (adr r3, 8009350 <atan+0x2b0>)
 80090f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fa:	ee10 0a10 	vmov	r0, s0
 80090fe:	4629      	mov	r1, r5
 8009100:	f7f7 f874 	bl	80001ec <__adddf3>
 8009104:	2200      	movs	r2, #0
 8009106:	4baf      	ldr	r3, [pc, #700]	; (80093c4 <atan+0x324>)
 8009108:	f7f7 fee0 	bl	8000ecc <__aeabi_dcmpgt>
 800910c:	2800      	cmp	r0, #0
 800910e:	d1e6      	bne.n	80090de <atan+0x3e>
 8009110:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009114:	e02b      	b.n	800916e <atan+0xce>
 8009116:	f000 f963 	bl	80093e0 <fabs>
 800911a:	4bab      	ldr	r3, [pc, #684]	; (80093c8 <atan+0x328>)
 800911c:	429e      	cmp	r6, r3
 800911e:	ec55 4b10 	vmov	r4, r5, d0
 8009122:	f300 80bf 	bgt.w	80092a4 <atan+0x204>
 8009126:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800912a:	429e      	cmp	r6, r3
 800912c:	f300 80a0 	bgt.w	8009270 <atan+0x1d0>
 8009130:	ee10 2a10 	vmov	r2, s0
 8009134:	ee10 0a10 	vmov	r0, s0
 8009138:	462b      	mov	r3, r5
 800913a:	4629      	mov	r1, r5
 800913c:	f7f7 f856 	bl	80001ec <__adddf3>
 8009140:	2200      	movs	r2, #0
 8009142:	4ba0      	ldr	r3, [pc, #640]	; (80093c4 <atan+0x324>)
 8009144:	f7f7 f850 	bl	80001e8 <__aeabi_dsub>
 8009148:	2200      	movs	r2, #0
 800914a:	4606      	mov	r6, r0
 800914c:	460f      	mov	r7, r1
 800914e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009152:	4620      	mov	r0, r4
 8009154:	4629      	mov	r1, r5
 8009156:	f7f7 f849 	bl	80001ec <__adddf3>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	4630      	mov	r0, r6
 8009160:	4639      	mov	r1, r7
 8009162:	f7f7 fb23 	bl	80007ac <__aeabi_ddiv>
 8009166:	f04f 0a00 	mov.w	sl, #0
 800916a:	4604      	mov	r4, r0
 800916c:	460d      	mov	r5, r1
 800916e:	4622      	mov	r2, r4
 8009170:	462b      	mov	r3, r5
 8009172:	4620      	mov	r0, r4
 8009174:	4629      	mov	r1, r5
 8009176:	f7f7 f9ef 	bl	8000558 <__aeabi_dmul>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4680      	mov	r8, r0
 8009180:	4689      	mov	r9, r1
 8009182:	f7f7 f9e9 	bl	8000558 <__aeabi_dmul>
 8009186:	a374      	add	r3, pc, #464	; (adr r3, 8009358 <atan+0x2b8>)
 8009188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918c:	4606      	mov	r6, r0
 800918e:	460f      	mov	r7, r1
 8009190:	f7f7 f9e2 	bl	8000558 <__aeabi_dmul>
 8009194:	a372      	add	r3, pc, #456	; (adr r3, 8009360 <atan+0x2c0>)
 8009196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919a:	f7f7 f827 	bl	80001ec <__adddf3>
 800919e:	4632      	mov	r2, r6
 80091a0:	463b      	mov	r3, r7
 80091a2:	f7f7 f9d9 	bl	8000558 <__aeabi_dmul>
 80091a6:	a370      	add	r3, pc, #448	; (adr r3, 8009368 <atan+0x2c8>)
 80091a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ac:	f7f7 f81e 	bl	80001ec <__adddf3>
 80091b0:	4632      	mov	r2, r6
 80091b2:	463b      	mov	r3, r7
 80091b4:	f7f7 f9d0 	bl	8000558 <__aeabi_dmul>
 80091b8:	a36d      	add	r3, pc, #436	; (adr r3, 8009370 <atan+0x2d0>)
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	f7f7 f815 	bl	80001ec <__adddf3>
 80091c2:	4632      	mov	r2, r6
 80091c4:	463b      	mov	r3, r7
 80091c6:	f7f7 f9c7 	bl	8000558 <__aeabi_dmul>
 80091ca:	a36b      	add	r3, pc, #428	; (adr r3, 8009378 <atan+0x2d8>)
 80091cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d0:	f7f7 f80c 	bl	80001ec <__adddf3>
 80091d4:	4632      	mov	r2, r6
 80091d6:	463b      	mov	r3, r7
 80091d8:	f7f7 f9be 	bl	8000558 <__aeabi_dmul>
 80091dc:	a368      	add	r3, pc, #416	; (adr r3, 8009380 <atan+0x2e0>)
 80091de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e2:	f7f7 f803 	bl	80001ec <__adddf3>
 80091e6:	4642      	mov	r2, r8
 80091e8:	464b      	mov	r3, r9
 80091ea:	f7f7 f9b5 	bl	8000558 <__aeabi_dmul>
 80091ee:	a366      	add	r3, pc, #408	; (adr r3, 8009388 <atan+0x2e8>)
 80091f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f4:	4680      	mov	r8, r0
 80091f6:	4689      	mov	r9, r1
 80091f8:	4630      	mov	r0, r6
 80091fa:	4639      	mov	r1, r7
 80091fc:	f7f7 f9ac 	bl	8000558 <__aeabi_dmul>
 8009200:	a363      	add	r3, pc, #396	; (adr r3, 8009390 <atan+0x2f0>)
 8009202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009206:	f7f6 ffef 	bl	80001e8 <__aeabi_dsub>
 800920a:	4632      	mov	r2, r6
 800920c:	463b      	mov	r3, r7
 800920e:	f7f7 f9a3 	bl	8000558 <__aeabi_dmul>
 8009212:	a361      	add	r3, pc, #388	; (adr r3, 8009398 <atan+0x2f8>)
 8009214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009218:	f7f6 ffe6 	bl	80001e8 <__aeabi_dsub>
 800921c:	4632      	mov	r2, r6
 800921e:	463b      	mov	r3, r7
 8009220:	f7f7 f99a 	bl	8000558 <__aeabi_dmul>
 8009224:	a35e      	add	r3, pc, #376	; (adr r3, 80093a0 <atan+0x300>)
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	f7f6 ffdd 	bl	80001e8 <__aeabi_dsub>
 800922e:	4632      	mov	r2, r6
 8009230:	463b      	mov	r3, r7
 8009232:	f7f7 f991 	bl	8000558 <__aeabi_dmul>
 8009236:	a35c      	add	r3, pc, #368	; (adr r3, 80093a8 <atan+0x308>)
 8009238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923c:	f7f6 ffd4 	bl	80001e8 <__aeabi_dsub>
 8009240:	4632      	mov	r2, r6
 8009242:	463b      	mov	r3, r7
 8009244:	f7f7 f988 	bl	8000558 <__aeabi_dmul>
 8009248:	4602      	mov	r2, r0
 800924a:	460b      	mov	r3, r1
 800924c:	4640      	mov	r0, r8
 800924e:	4649      	mov	r1, r9
 8009250:	f7f6 ffcc 	bl	80001ec <__adddf3>
 8009254:	4622      	mov	r2, r4
 8009256:	462b      	mov	r3, r5
 8009258:	f7f7 f97e 	bl	8000558 <__aeabi_dmul>
 800925c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	d14b      	bne.n	80092fe <atan+0x25e>
 8009266:	4620      	mov	r0, r4
 8009268:	4629      	mov	r1, r5
 800926a:	f7f6 ffbd 	bl	80001e8 <__aeabi_dsub>
 800926e:	e72c      	b.n	80090ca <atan+0x2a>
 8009270:	ee10 0a10 	vmov	r0, s0
 8009274:	2200      	movs	r2, #0
 8009276:	4b53      	ldr	r3, [pc, #332]	; (80093c4 <atan+0x324>)
 8009278:	4629      	mov	r1, r5
 800927a:	f7f6 ffb5 	bl	80001e8 <__aeabi_dsub>
 800927e:	2200      	movs	r2, #0
 8009280:	4606      	mov	r6, r0
 8009282:	460f      	mov	r7, r1
 8009284:	4b4f      	ldr	r3, [pc, #316]	; (80093c4 <atan+0x324>)
 8009286:	4620      	mov	r0, r4
 8009288:	4629      	mov	r1, r5
 800928a:	f7f6 ffaf 	bl	80001ec <__adddf3>
 800928e:	4602      	mov	r2, r0
 8009290:	460b      	mov	r3, r1
 8009292:	4630      	mov	r0, r6
 8009294:	4639      	mov	r1, r7
 8009296:	f7f7 fa89 	bl	80007ac <__aeabi_ddiv>
 800929a:	f04f 0a01 	mov.w	sl, #1
 800929e:	4604      	mov	r4, r0
 80092a0:	460d      	mov	r5, r1
 80092a2:	e764      	b.n	800916e <atan+0xce>
 80092a4:	4b49      	ldr	r3, [pc, #292]	; (80093cc <atan+0x32c>)
 80092a6:	429e      	cmp	r6, r3
 80092a8:	dc1d      	bgt.n	80092e6 <atan+0x246>
 80092aa:	ee10 0a10 	vmov	r0, s0
 80092ae:	2200      	movs	r2, #0
 80092b0:	4b47      	ldr	r3, [pc, #284]	; (80093d0 <atan+0x330>)
 80092b2:	4629      	mov	r1, r5
 80092b4:	f7f6 ff98 	bl	80001e8 <__aeabi_dsub>
 80092b8:	2200      	movs	r2, #0
 80092ba:	4606      	mov	r6, r0
 80092bc:	460f      	mov	r7, r1
 80092be:	4b44      	ldr	r3, [pc, #272]	; (80093d0 <atan+0x330>)
 80092c0:	4620      	mov	r0, r4
 80092c2:	4629      	mov	r1, r5
 80092c4:	f7f7 f948 	bl	8000558 <__aeabi_dmul>
 80092c8:	2200      	movs	r2, #0
 80092ca:	4b3e      	ldr	r3, [pc, #248]	; (80093c4 <atan+0x324>)
 80092cc:	f7f6 ff8e 	bl	80001ec <__adddf3>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4630      	mov	r0, r6
 80092d6:	4639      	mov	r1, r7
 80092d8:	f7f7 fa68 	bl	80007ac <__aeabi_ddiv>
 80092dc:	f04f 0a02 	mov.w	sl, #2
 80092e0:	4604      	mov	r4, r0
 80092e2:	460d      	mov	r5, r1
 80092e4:	e743      	b.n	800916e <atan+0xce>
 80092e6:	462b      	mov	r3, r5
 80092e8:	ee10 2a10 	vmov	r2, s0
 80092ec:	2000      	movs	r0, #0
 80092ee:	4939      	ldr	r1, [pc, #228]	; (80093d4 <atan+0x334>)
 80092f0:	f7f7 fa5c 	bl	80007ac <__aeabi_ddiv>
 80092f4:	f04f 0a03 	mov.w	sl, #3
 80092f8:	4604      	mov	r4, r0
 80092fa:	460d      	mov	r5, r1
 80092fc:	e737      	b.n	800916e <atan+0xce>
 80092fe:	4b36      	ldr	r3, [pc, #216]	; (80093d8 <atan+0x338>)
 8009300:	4e36      	ldr	r6, [pc, #216]	; (80093dc <atan+0x33c>)
 8009302:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8009306:	4456      	add	r6, sl
 8009308:	449a      	add	sl, r3
 800930a:	e9da 2300 	ldrd	r2, r3, [sl]
 800930e:	f7f6 ff6b 	bl	80001e8 <__aeabi_dsub>
 8009312:	4622      	mov	r2, r4
 8009314:	462b      	mov	r3, r5
 8009316:	f7f6 ff67 	bl	80001e8 <__aeabi_dsub>
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009322:	f7f6 ff61 	bl	80001e8 <__aeabi_dsub>
 8009326:	f1bb 0f00 	cmp.w	fp, #0
 800932a:	4604      	mov	r4, r0
 800932c:	460d      	mov	r5, r1
 800932e:	f6bf aed6 	bge.w	80090de <atan+0x3e>
 8009332:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009336:	461d      	mov	r5, r3
 8009338:	e6d1      	b.n	80090de <atan+0x3e>
 800933a:	a51d      	add	r5, pc, #116	; (adr r5, 80093b0 <atan+0x310>)
 800933c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009340:	e6cd      	b.n	80090de <atan+0x3e>
 8009342:	bf00      	nop
 8009344:	f3af 8000 	nop.w
 8009348:	54442d18 	.word	0x54442d18
 800934c:	3ff921fb 	.word	0x3ff921fb
 8009350:	8800759c 	.word	0x8800759c
 8009354:	7e37e43c 	.word	0x7e37e43c
 8009358:	e322da11 	.word	0xe322da11
 800935c:	3f90ad3a 	.word	0x3f90ad3a
 8009360:	24760deb 	.word	0x24760deb
 8009364:	3fa97b4b 	.word	0x3fa97b4b
 8009368:	a0d03d51 	.word	0xa0d03d51
 800936c:	3fb10d66 	.word	0x3fb10d66
 8009370:	c54c206e 	.word	0xc54c206e
 8009374:	3fb745cd 	.word	0x3fb745cd
 8009378:	920083ff 	.word	0x920083ff
 800937c:	3fc24924 	.word	0x3fc24924
 8009380:	5555550d 	.word	0x5555550d
 8009384:	3fd55555 	.word	0x3fd55555
 8009388:	2c6a6c2f 	.word	0x2c6a6c2f
 800938c:	bfa2b444 	.word	0xbfa2b444
 8009390:	52defd9a 	.word	0x52defd9a
 8009394:	3fadde2d 	.word	0x3fadde2d
 8009398:	af749a6d 	.word	0xaf749a6d
 800939c:	3fb3b0f2 	.word	0x3fb3b0f2
 80093a0:	fe231671 	.word	0xfe231671
 80093a4:	3fbc71c6 	.word	0x3fbc71c6
 80093a8:	9998ebc4 	.word	0x9998ebc4
 80093ac:	3fc99999 	.word	0x3fc99999
 80093b0:	54442d18 	.word	0x54442d18
 80093b4:	bff921fb 	.word	0xbff921fb
 80093b8:	440fffff 	.word	0x440fffff
 80093bc:	7ff00000 	.word	0x7ff00000
 80093c0:	3fdbffff 	.word	0x3fdbffff
 80093c4:	3ff00000 	.word	0x3ff00000
 80093c8:	3ff2ffff 	.word	0x3ff2ffff
 80093cc:	40037fff 	.word	0x40037fff
 80093d0:	3ff80000 	.word	0x3ff80000
 80093d4:	bff00000 	.word	0xbff00000
 80093d8:	08009c18 	.word	0x08009c18
 80093dc:	08009bf8 	.word	0x08009bf8

080093e0 <fabs>:
 80093e0:	ec51 0b10 	vmov	r0, r1, d0
 80093e4:	ee10 2a10 	vmov	r2, s0
 80093e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80093ec:	ec43 2b10 	vmov	d0, r2, r3
 80093f0:	4770      	bx	lr

080093f2 <finite>:
 80093f2:	ee10 3a90 	vmov	r3, s1
 80093f6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80093fa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80093fe:	0fc0      	lsrs	r0, r0, #31
 8009400:	4770      	bx	lr

08009402 <matherr>:
 8009402:	2000      	movs	r0, #0
 8009404:	4770      	bx	lr
	...

08009408 <nan>:
 8009408:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009410 <nan+0x8>
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop
 8009410:	00000000 	.word	0x00000000
 8009414:	7ff80000 	.word	0x7ff80000

08009418 <rint>:
 8009418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800941a:	ec51 0b10 	vmov	r0, r1, d0
 800941e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009422:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009426:	2e13      	cmp	r6, #19
 8009428:	460b      	mov	r3, r1
 800942a:	ee10 4a10 	vmov	r4, s0
 800942e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009432:	dc56      	bgt.n	80094e2 <rint+0xca>
 8009434:	2e00      	cmp	r6, #0
 8009436:	da2b      	bge.n	8009490 <rint+0x78>
 8009438:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800943c:	4302      	orrs	r2, r0
 800943e:	d023      	beq.n	8009488 <rint+0x70>
 8009440:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009444:	4302      	orrs	r2, r0
 8009446:	4254      	negs	r4, r2
 8009448:	4314      	orrs	r4, r2
 800944a:	0c4b      	lsrs	r3, r1, #17
 800944c:	0b24      	lsrs	r4, r4, #12
 800944e:	045b      	lsls	r3, r3, #17
 8009450:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009454:	ea44 0103 	orr.w	r1, r4, r3
 8009458:	460b      	mov	r3, r1
 800945a:	492f      	ldr	r1, [pc, #188]	; (8009518 <rint+0x100>)
 800945c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009460:	e9d1 6700 	ldrd	r6, r7, [r1]
 8009464:	4602      	mov	r2, r0
 8009466:	4639      	mov	r1, r7
 8009468:	4630      	mov	r0, r6
 800946a:	f7f6 febf 	bl	80001ec <__adddf3>
 800946e:	e9cd 0100 	strd	r0, r1, [sp]
 8009472:	463b      	mov	r3, r7
 8009474:	4632      	mov	r2, r6
 8009476:	e9dd 0100 	ldrd	r0, r1, [sp]
 800947a:	f7f6 feb5 	bl	80001e8 <__aeabi_dsub>
 800947e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009482:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009486:	4639      	mov	r1, r7
 8009488:	ec41 0b10 	vmov	d0, r0, r1
 800948c:	b003      	add	sp, #12
 800948e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009490:	4a22      	ldr	r2, [pc, #136]	; (800951c <rint+0x104>)
 8009492:	4132      	asrs	r2, r6
 8009494:	ea01 0702 	and.w	r7, r1, r2
 8009498:	4307      	orrs	r7, r0
 800949a:	d0f5      	beq.n	8009488 <rint+0x70>
 800949c:	0852      	lsrs	r2, r2, #1
 800949e:	4011      	ands	r1, r2
 80094a0:	430c      	orrs	r4, r1
 80094a2:	d00b      	beq.n	80094bc <rint+0xa4>
 80094a4:	ea23 0202 	bic.w	r2, r3, r2
 80094a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80094ac:	2e13      	cmp	r6, #19
 80094ae:	fa43 f306 	asr.w	r3, r3, r6
 80094b2:	bf0c      	ite	eq
 80094b4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80094b8:	2400      	movne	r4, #0
 80094ba:	4313      	orrs	r3, r2
 80094bc:	4916      	ldr	r1, [pc, #88]	; (8009518 <rint+0x100>)
 80094be:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80094c2:	4622      	mov	r2, r4
 80094c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80094c8:	4620      	mov	r0, r4
 80094ca:	4629      	mov	r1, r5
 80094cc:	f7f6 fe8e 	bl	80001ec <__adddf3>
 80094d0:	e9cd 0100 	strd	r0, r1, [sp]
 80094d4:	4622      	mov	r2, r4
 80094d6:	462b      	mov	r3, r5
 80094d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094dc:	f7f6 fe84 	bl	80001e8 <__aeabi_dsub>
 80094e0:	e7d2      	b.n	8009488 <rint+0x70>
 80094e2:	2e33      	cmp	r6, #51	; 0x33
 80094e4:	dd07      	ble.n	80094f6 <rint+0xde>
 80094e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80094ea:	d1cd      	bne.n	8009488 <rint+0x70>
 80094ec:	ee10 2a10 	vmov	r2, s0
 80094f0:	f7f6 fe7c 	bl	80001ec <__adddf3>
 80094f4:	e7c8      	b.n	8009488 <rint+0x70>
 80094f6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80094fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094fe:	40f2      	lsrs	r2, r6
 8009500:	4210      	tst	r0, r2
 8009502:	d0c1      	beq.n	8009488 <rint+0x70>
 8009504:	0852      	lsrs	r2, r2, #1
 8009506:	4210      	tst	r0, r2
 8009508:	bf1f      	itttt	ne
 800950a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800950e:	ea20 0202 	bicne.w	r2, r0, r2
 8009512:	4134      	asrne	r4, r6
 8009514:	4314      	orrne	r4, r2
 8009516:	e7d1      	b.n	80094bc <rint+0xa4>
 8009518:	08009c38 	.word	0x08009c38
 800951c:	000fffff 	.word	0x000fffff

08009520 <scalbn>:
 8009520:	b570      	push	{r4, r5, r6, lr}
 8009522:	ec55 4b10 	vmov	r4, r5, d0
 8009526:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800952a:	4606      	mov	r6, r0
 800952c:	462b      	mov	r3, r5
 800952e:	b9aa      	cbnz	r2, 800955c <scalbn+0x3c>
 8009530:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009534:	4323      	orrs	r3, r4
 8009536:	d03b      	beq.n	80095b0 <scalbn+0x90>
 8009538:	4b31      	ldr	r3, [pc, #196]	; (8009600 <scalbn+0xe0>)
 800953a:	4629      	mov	r1, r5
 800953c:	2200      	movs	r2, #0
 800953e:	ee10 0a10 	vmov	r0, s0
 8009542:	f7f7 f809 	bl	8000558 <__aeabi_dmul>
 8009546:	4b2f      	ldr	r3, [pc, #188]	; (8009604 <scalbn+0xe4>)
 8009548:	429e      	cmp	r6, r3
 800954a:	4604      	mov	r4, r0
 800954c:	460d      	mov	r5, r1
 800954e:	da12      	bge.n	8009576 <scalbn+0x56>
 8009550:	a327      	add	r3, pc, #156	; (adr r3, 80095f0 <scalbn+0xd0>)
 8009552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009556:	f7f6 ffff 	bl	8000558 <__aeabi_dmul>
 800955a:	e009      	b.n	8009570 <scalbn+0x50>
 800955c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009560:	428a      	cmp	r2, r1
 8009562:	d10c      	bne.n	800957e <scalbn+0x5e>
 8009564:	ee10 2a10 	vmov	r2, s0
 8009568:	4620      	mov	r0, r4
 800956a:	4629      	mov	r1, r5
 800956c:	f7f6 fe3e 	bl	80001ec <__adddf3>
 8009570:	4604      	mov	r4, r0
 8009572:	460d      	mov	r5, r1
 8009574:	e01c      	b.n	80095b0 <scalbn+0x90>
 8009576:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800957a:	460b      	mov	r3, r1
 800957c:	3a36      	subs	r2, #54	; 0x36
 800957e:	4432      	add	r2, r6
 8009580:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009584:	428a      	cmp	r2, r1
 8009586:	dd0b      	ble.n	80095a0 <scalbn+0x80>
 8009588:	ec45 4b11 	vmov	d1, r4, r5
 800958c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80095f8 <scalbn+0xd8>
 8009590:	f000 f83c 	bl	800960c <copysign>
 8009594:	a318      	add	r3, pc, #96	; (adr r3, 80095f8 <scalbn+0xd8>)
 8009596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959a:	ec51 0b10 	vmov	r0, r1, d0
 800959e:	e7da      	b.n	8009556 <scalbn+0x36>
 80095a0:	2a00      	cmp	r2, #0
 80095a2:	dd08      	ble.n	80095b6 <scalbn+0x96>
 80095a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80095a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80095ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80095b0:	ec45 4b10 	vmov	d0, r4, r5
 80095b4:	bd70      	pop	{r4, r5, r6, pc}
 80095b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80095ba:	da0d      	bge.n	80095d8 <scalbn+0xb8>
 80095bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80095c0:	429e      	cmp	r6, r3
 80095c2:	ec45 4b11 	vmov	d1, r4, r5
 80095c6:	dce1      	bgt.n	800958c <scalbn+0x6c>
 80095c8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80095f0 <scalbn+0xd0>
 80095cc:	f000 f81e 	bl	800960c <copysign>
 80095d0:	a307      	add	r3, pc, #28	; (adr r3, 80095f0 <scalbn+0xd0>)
 80095d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d6:	e7e0      	b.n	800959a <scalbn+0x7a>
 80095d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80095dc:	3236      	adds	r2, #54	; 0x36
 80095de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80095e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80095e6:	4620      	mov	r0, r4
 80095e8:	4629      	mov	r1, r5
 80095ea:	2200      	movs	r2, #0
 80095ec:	4b06      	ldr	r3, [pc, #24]	; (8009608 <scalbn+0xe8>)
 80095ee:	e7b2      	b.n	8009556 <scalbn+0x36>
 80095f0:	c2f8f359 	.word	0xc2f8f359
 80095f4:	01a56e1f 	.word	0x01a56e1f
 80095f8:	8800759c 	.word	0x8800759c
 80095fc:	7e37e43c 	.word	0x7e37e43c
 8009600:	43500000 	.word	0x43500000
 8009604:	ffff3cb0 	.word	0xffff3cb0
 8009608:	3c900000 	.word	0x3c900000

0800960c <copysign>:
 800960c:	ec51 0b10 	vmov	r0, r1, d0
 8009610:	ee11 0a90 	vmov	r0, s3
 8009614:	ee10 2a10 	vmov	r2, s0
 8009618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800961c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009620:	ea41 0300 	orr.w	r3, r1, r0
 8009624:	ec43 2b10 	vmov	d0, r2, r3
 8009628:	4770      	bx	lr
	...

0800962c <_init>:
 800962c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962e:	bf00      	nop
 8009630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009632:	bc08      	pop	{r3}
 8009634:	469e      	mov	lr, r3
 8009636:	4770      	bx	lr

08009638 <_fini>:
 8009638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963a:	bf00      	nop
 800963c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800963e:	bc08      	pop	{r3}
 8009640:	469e      	mov	lr, r3
 8009642:	4770      	bx	lr
