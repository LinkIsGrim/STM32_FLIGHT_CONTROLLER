
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbb0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000888  0800bd50  0800bd50  0001bd50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5d8  0800c5d8  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5d8  0800c5d8  0001c5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5e0  0800c5e0  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5e0  0800c5e0  0001c5e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5e4  0800c5e4  0001c5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800c5e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000487c  20000218  0800c7fc  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004a94  0800c7fc  00024a94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f21c  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005ea3  00000000  00000000  0004f460  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00015516  00000000  00000000  00055303  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001db8  00000000  00000000  0006a820  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002060  00000000  00000000  0006c5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001d769  00000000  00000000  0006e638  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001bc73  00000000  00000000  0008bda1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0009eeb5  00000000  00000000  000a7a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001468c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065dc  00000000  00000000  00146944  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bd38 	.word	0x0800bd38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800bd38 	.word	0x0800bd38

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <NRF24_DelayMicroSeconds>:
bool SPI_RxCplt = 1;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000fb8:	b508      	push	{r3, lr}
	//	uint32_t uSecVar = uSec;
	//	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
	//	while(uSecVar--);
	DWT_Delay(uSec);
 8000fba:	f000 ffad 	bl	8001f18 <DWT_Delay>

}
 8000fbe:	bd08      	pop	{r3, pc}

08000fc0 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000fc0:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000fc2:	b938      	cbnz	r0, 8000fd4 <NRF24_csn+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <NRF24_csn+0x24>)
 8000fc8:	8819      	ldrh	r1, [r3, #0]
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <NRF24_csn+0x28>)
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	f001 fcc5 	bl	800295c <HAL_GPIO_WritePin>
}
 8000fd2:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <NRF24_csn+0x24>)
 8000fd8:	8819      	ldrh	r1, [r3, #0]
 8000fda:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <NRF24_csn+0x28>)
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	f001 fcbd 	bl	800295c <HAL_GPIO_WritePin>
 8000fe2:	e7f6      	b.n	8000fd2 <NRF24_csn+0x12>
 8000fe4:	20000236 	.word	0x20000236
 8000fe8:	20000238 	.word	0x20000238

08000fec <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000fec:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000fee:	b938      	cbnz	r0, 8001000 <NRF24_ce+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <NRF24_ce+0x24>)
 8000ff4:	8819      	ldrh	r1, [r3, #0]
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <NRF24_ce+0x28>)
 8000ff8:	6818      	ldr	r0, [r3, #0]
 8000ffa:	f001 fcaf 	bl	800295c <HAL_GPIO_WritePin>
}
 8000ffe:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	4b03      	ldr	r3, [pc, #12]	; (8001010 <NRF24_ce+0x24>)
 8001004:	8819      	ldrh	r1, [r3, #0]
 8001006:	4b03      	ldr	r3, [pc, #12]	; (8001014 <NRF24_ce+0x28>)
 8001008:	6818      	ldr	r0, [r3, #0]
 800100a:	f001 fca7 	bl	800295c <HAL_GPIO_WritePin>
 800100e:	e7f6      	b.n	8000ffe <NRF24_ce+0x12>
 8001010:	20000234 	.word	0x20000234
 8001014:	20000238 	.word	0x20000238

08001018 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8001018:	b510      	push	{r4, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800101e:	2000      	movs	r0, #0
 8001020:	f7ff ffce 	bl	8000fc0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001024:	f004 041f 	and.w	r4, r4, #31
 8001028:	a902      	add	r1, sp, #8
 800102a:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 800102e:	4c0a      	ldr	r4, [pc, #40]	; (8001058 <NRF24_read_register+0x40>)
 8001030:	2302      	movs	r3, #2
 8001032:	2201      	movs	r2, #1
 8001034:	4620      	mov	r0, r4
 8001036:	f002 f9a7 	bl	8003388 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Receive data
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1,2);
 800103a:	2302      	movs	r3, #2
 800103c:	2201      	movs	r2, #1
 800103e:	f10d 0105 	add.w	r1, sp, #5
 8001042:	4620      	mov	r0, r4
 8001044:	f002 fb84 	bl	8003750 <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	retData = spiBuf[1];
 8001048:	f89d 4005 	ldrb.w	r4, [sp, #5]
	//Bring CSN high
	NRF24_csn(1);
 800104c:	2001      	movs	r0, #1
 800104e:	f7ff ffb7 	bl	8000fc0 <NRF24_csn>
	return retData;
}
 8001052:	4620      	mov	r0, r4
 8001054:	b002      	add	sp, #8
 8001056:	bd10      	pop	{r4, pc}
 8001058:	2000023c 	.word	0x2000023c

0800105c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800105c:	b570      	push	{r4, r5, r6, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	4604      	mov	r4, r0
 8001062:	460d      	mov	r5, r1
 8001064:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001066:	2000      	movs	r0, #0
 8001068:	f7ff ffaa 	bl	8000fc0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800106c:	f004 041f 	and.w	r4, r4, #31
 8001070:	a902      	add	r1, sp, #8
 8001072:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 8001076:	4c08      	ldr	r4, [pc, #32]	; (8001098 <NRF24_read_registerN+0x3c>)
 8001078:	2302      	movs	r3, #2
 800107a:	2201      	movs	r2, #1
 800107c:	4620      	mov	r0, r4
 800107e:	f002 f983 	bl	8003388 <HAL_SPI_Transmit>
	//while(!SPI_TxCplt){
//	}
	//Receive data
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, buf, len,2);
 8001082:	2302      	movs	r3, #2
 8001084:	4632      	mov	r2, r6
 8001086:	4629      	mov	r1, r5
 8001088:	4620      	mov	r0, r4
 800108a:	f002 fb61 	bl	8003750 <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff ff96 	bl	8000fc0 <NRF24_csn>
}
 8001094:	b002      	add	sp, #8
 8001096:	bd70      	pop	{r4, r5, r6, pc}
 8001098:	2000023c 	.word	0x2000023c

0800109c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800109c:	b530      	push	{r4, r5, lr}
 800109e:	b083      	sub	sp, #12
 80010a0:	4604      	mov	r4, r0
 80010a2:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80010a4:	2000      	movs	r0, #0
 80010a6:	f7ff ff8b 	bl	8000fc0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80010aa:	f044 0420 	orr.w	r4, r4, #32
 80010ae:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 80010b2:	f88d 5005 	strb.w	r5, [sp, #5]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2,10);
 80010b6:	230a      	movs	r3, #10
 80010b8:	2202      	movs	r2, #2
 80010ba:	a901      	add	r1, sp, #4
 80010bc:	4803      	ldr	r0, [pc, #12]	; (80010cc <NRF24_write_register+0x30>)
 80010be:	f002 f963 	bl	8003388 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f7ff ff7c 	bl	8000fc0 <NRF24_csn>
}
 80010c8:	b003      	add	sp, #12
 80010ca:	bd30      	pop	{r4, r5, pc}
 80010cc:	2000023c 	.word	0x2000023c

080010d0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80010d0:	b570      	push	{r4, r5, r6, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	4604      	mov	r4, r0
 80010d6:	460d      	mov	r5, r1
 80010d8:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80010da:	2000      	movs	r0, #0
 80010dc:	f7ff ff70 	bl	8000fc0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80010e0:	f044 0420 	orr.w	r4, r4, #32
 80010e4:	a902      	add	r1, sp, #8
 80010e6:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 80010ea:	4c08      	ldr	r4, [pc, #32]	; (800110c <NRF24_write_registerN+0x3c>)
 80010ec:	2302      	movs	r3, #2
 80010ee:	2201      	movs	r2, #1
 80010f0:	4620      	mov	r0, r4
 80010f2:	f002 f949 	bl	8003388 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len,2);
 80010f6:	2302      	movs	r3, #2
 80010f8:	4632      	mov	r2, r6
 80010fa:	4629      	mov	r1, r5
 80010fc:	4620      	mov	r0, r4
 80010fe:	f002 f943 	bl	8003388 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 8001102:	2001      	movs	r0, #1
 8001104:	f7ff ff5c 	bl	8000fc0 <NRF24_csn>
}
 8001108:	b002      	add	sp, #8
 800110a:	bd70      	pop	{r4, r5, r6, pc}
 800110c:	2000023c 	.word	0x2000023c

08001110 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8001110:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8001112:	21ff      	movs	r1, #255	; 0xff
 8001114:	20e1      	movs	r0, #225	; 0xe1
 8001116:	f7ff ffc1 	bl	800109c <NRF24_write_register>
}
 800111a:	bd08      	pop	{r3, pc}

0800111c <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 800111c:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 800111e:	21ff      	movs	r1, #255	; 0xff
 8001120:	20e2      	movs	r0, #226	; 0xe2
 8001122:	f7ff ffbb 	bl	800109c <NRF24_write_register>
}
 8001126:	bd08      	pop	{r3, pc}

08001128 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8001128:	b508      	push	{r3, lr}
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800112a:	2007      	movs	r0, #7
 800112c:	f7ff ff74 	bl	8001018 <NRF24_read_register>
	return statReg;
}
 8001130:	bd08      	pop	{r3, pc}
	...

08001134 <NRF24_startListening>:
	NRF24_powerDown();

}
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8001134:	b508      	push	{r3, lr}
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8001136:	2000      	movs	r0, #0
 8001138:	f7ff ff6e 	bl	8001018 <NRF24_read_register>
 800113c:	f040 0103 	orr.w	r1, r0, #3
 8001140:	b2c9      	uxtb	r1, r1
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff ffaa 	bl	800109c <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <NRF24_startListening+0x40>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	4313      	orrs	r3, r2
 8001150:	d10a      	bne.n	8001168 <NRF24_startListening+0x34>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);

	//Flush buffers
	NRF24_flush_tx();
 8001152:	f7ff ffdd 	bl	8001110 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001156:	f7ff ffe1 	bl	800111c <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f7ff ff46 	bl	8000fec <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8001160:	2096      	movs	r0, #150	; 0x96
 8001162:	f7ff ff29 	bl	8000fb8 <NRF24_DelayMicroSeconds>
}
 8001166:	bd08      	pop	{r3, pc}
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8001168:	2205      	movs	r2, #5
 800116a:	4902      	ldr	r1, [pc, #8]	; (8001174 <NRF24_startListening+0x40>)
 800116c:	200a      	movs	r0, #10
 800116e:	f7ff ffaf 	bl	80010d0 <NRF24_write_registerN>
 8001172:	e7ee      	b.n	8001152 <NRF24_startListening+0x1e>
 8001174:	200002d8 	.word	0x200002d8

08001178 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
	NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8001178:	b510      	push	{r4, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	e9cd 2300 	strd	r2, r3, [sp]
	if (number == 0)
 8001180:	4604      	mov	r4, r0
 8001182:	b920      	cbnz	r0, 800118e <NRF24_openReadingPipe+0x16>
		pipe0_reading_address = address;
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <NRF24_openReadingPipe+0x60>)
 8001186:	e9dd 0100 	ldrd	r0, r1, [sp]
 800118a:	e9c3 0100 	strd	r0, r1, [r3]

	if(number <= 6)
 800118e:	2c06      	cmp	r4, #6
 8001190:	d818      	bhi.n	80011c4 <NRF24_openReadingPipe+0x4c>
	{
		if(number < 2)
 8001192:	2c01      	cmp	r4, #1
 8001194:	d918      	bls.n	80011c8 <NRF24_openReadingPipe+0x50>
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8001196:	2201      	movs	r2, #1
 8001198:	4669      	mov	r1, sp
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <NRF24_openReadingPipe+0x64>)
 800119c:	5d18      	ldrb	r0, [r3, r4]
 800119e:	f7ff ff97 	bl	80010d0 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <NRF24_openReadingPipe+0x68>)
 80011a4:	7819      	ldrb	r1, [r3, #0]
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <NRF24_openReadingPipe+0x6c>)
 80011a8:	5d18      	ldrb	r0, [r3, r4]
 80011aa:	f7ff ff77 	bl	800109c <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80011ae:	2002      	movs	r0, #2
 80011b0:	f7ff ff32 	bl	8001018 <NRF24_read_register>
 80011b4:	b240      	sxtb	r0, r0
 80011b6:	2101      	movs	r1, #1
 80011b8:	40a1      	lsls	r1, r4
 80011ba:	4301      	orrs	r1, r0
 80011bc:	b2c9      	uxtb	r1, r1
 80011be:	2002      	movs	r0, #2
 80011c0:	f7ff ff6c 	bl	800109c <NRF24_write_register>
	}

}
 80011c4:	b002      	add	sp, #8
 80011c6:	bd10      	pop	{r4, pc}
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80011c8:	2205      	movs	r2, #5
 80011ca:	4669      	mov	r1, sp
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <NRF24_openReadingPipe+0x64>)
 80011ce:	5d18      	ldrb	r0, [r3, r4]
 80011d0:	f7ff ff7e 	bl	80010d0 <NRF24_write_registerN>
 80011d4:	e7e5      	b.n	80011a2 <NRF24_openReadingPipe+0x2a>
 80011d6:	bf00      	nop
 80011d8:	200002d8 	.word	0x200002d8
 80011dc:	0800bd88 	.word	0x0800bd88
 80011e0:	200002d4 	.word	0x200002d4
 80011e4:	0800bd90 	.word	0x0800bd90

080011e8 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80011e8:	b508      	push	{r3, lr}
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80011ea:	f001 010f 	and.w	r1, r1, #15
 80011ee:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80011f2:	b2c9      	uxtb	r1, r1
 80011f4:	2004      	movs	r0, #4
 80011f6:	f7ff ff51 	bl	800109c <NRF24_write_register>
}
 80011fa:	bd08      	pop	{r3, pc}

080011fc <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80011fc:	b508      	push	{r3, lr}
	const uint8_t max_channel = 127;
	NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80011fe:	4601      	mov	r1, r0
 8001200:	287f      	cmp	r0, #127	; 0x7f
 8001202:	bf28      	it	cs
 8001204:	217f      	movcs	r1, #127	; 0x7f
 8001206:	2005      	movs	r0, #5
 8001208:	f7ff ff48 	bl	800109c <NRF24_write_register>
}
 800120c:	bd08      	pop	{r3, pc}
	...

08001210 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
	const uint8_t max_payload_size = 32;
	payload_size = MIN(size,max_payload_size);
 8001210:	2820      	cmp	r0, #32
 8001212:	bf28      	it	cs
 8001214:	2020      	movcs	r0, #32
 8001216:	4b01      	ldr	r3, [pc, #4]	; (800121c <NRF24_setPayloadSize+0xc>)
 8001218:	7018      	strb	r0, [r3, #0]
}
 800121a:	4770      	bx	lr
 800121c:	200002d4 	.word	0x200002d4

08001220 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
	return payload_size;
}
 8001220:	4b01      	ldr	r3, [pc, #4]	; (8001228 <NRF24_getPayloadSize+0x8>)
 8001222:	7818      	ldrb	r0, [r3, #0]
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	200002d4 	.word	0x200002d4

0800122c <NRF24_read_payload>:
{
 800122c:	b570      	push	{r4, r5, r6, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	4606      	mov	r6, r0
 8001232:	460d      	mov	r5, r1
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8001234:	f7ff fff4 	bl	8001220 <NRF24_getPayloadSize>
 8001238:	4604      	mov	r4, r0
 800123a:	42a8      	cmp	r0, r5
 800123c:	d817      	bhi.n	800126e <NRF24_read_payload+0x42>
	NRF24_csn(0);
 800123e:	2000      	movs	r0, #0
 8001240:	f7ff febe 	bl	8000fc0 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001244:	a902      	add	r1, sp, #8
 8001246:	2361      	movs	r3, #97	; 0x61
 8001248:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1,10);
 800124c:	4d09      	ldr	r5, [pc, #36]	; (8001274 <NRF24_read_payload+0x48>)
 800124e:	230a      	movs	r3, #10
 8001250:	2201      	movs	r2, #1
 8001252:	4628      	mov	r0, r5
 8001254:	f002 f898 	bl	8003388 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len,10);
 8001258:	230a      	movs	r3, #10
 800125a:	b2a2      	uxth	r2, r4
 800125c:	4631      	mov	r1, r6
 800125e:	4628      	mov	r0, r5
 8001260:	f002 fa76 	bl	8003750 <HAL_SPI_Receive>
	NRF24_csn(1);
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff feab 	bl	8000fc0 <NRF24_csn>
}
 800126a:	b002      	add	sp, #8
 800126c:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800126e:	462c      	mov	r4, r5
 8001270:	e7e5      	b.n	800123e <NRF24_read_payload+0x12>
 8001272:	bf00      	nop
 8001274:	2000023c 	.word	0x2000023c

08001278 <NRF24_read>:
{
 8001278:	b510      	push	{r4, lr}
	NRF24_read_payload( buf, len );
 800127a:	f7ff ffd7 	bl	800122c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800127e:	2017      	movs	r0, #23
 8001280:	f7ff feca 	bl	8001018 <NRF24_read_register>
 8001284:	f000 0401 	and.w	r4, r0, #1
	NRF24_flush_rx();
 8001288:	f7ff ff48 	bl	800111c <NRF24_flush_rx>
}
 800128c:	4620      	mov	r0, r4
 800128e:	bd10      	pop	{r4, pc}

08001290 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8001290:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001292:	201d      	movs	r0, #29
 8001294:	f7ff fec0 	bl	8001018 <NRF24_read_register>
 8001298:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800129c:	201d      	movs	r0, #29
 800129e:	f7ff fefd 	bl	800109c <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 80012a2:	2100      	movs	r1, #0
 80012a4:	201c      	movs	r0, #28
 80012a6:	f7ff fef9 	bl	800109c <NRF24_write_register>
	dynamic_payloads_enabled = false;
}
 80012aa:	bd08      	pop	{r3, pc}

080012ac <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80012ac:	b508      	push	{r3, lr}
	if ( enable )
 80012ae:	b920      	cbnz	r0, 80012ba <NRF24_setAutoAck+0xe>
		NRF24_write_register(REG_EN_AA, 0x3F);
	else
		NRF24_write_register(REG_EN_AA, 0x00);
 80012b0:	2100      	movs	r1, #0
 80012b2:	2001      	movs	r0, #1
 80012b4:	f7ff fef2 	bl	800109c <NRF24_write_register>
}
 80012b8:	bd08      	pop	{r3, pc}
		NRF24_write_register(REG_EN_AA, 0x3F);
 80012ba:	213f      	movs	r1, #63	; 0x3f
 80012bc:	2001      	movs	r0, #1
 80012be:	f7ff feed 	bl	800109c <NRF24_write_register>
 80012c2:	e7f9      	b.n	80012b8 <NRF24_setAutoAck+0xc>

080012c4 <NRF24_setPALevel>:
		NRF24_write_register( REG_EN_AA, en_aa ) ;
	}
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80012c4:	b510      	push	{r4, lr}
 80012c6:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80012c8:	2006      	movs	r0, #6
 80012ca:	f7ff fea5 	bl	8001018 <NRF24_read_register>
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80012ce:	f000 01f9 	and.w	r1, r0, #249	; 0xf9

	// switch uses RAM (evil!)
	if ( level == RF24_PA_0dB)
 80012d2:	2c03      	cmp	r4, #3
 80012d4:	d009      	beq.n	80012ea <NRF24_setPALevel+0x26>
	{
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
	}
	else if ( level == RF24_PA_m6dB )
 80012d6:	2c02      	cmp	r4, #2
 80012d8:	d00d      	beq.n	80012f6 <NRF24_setPALevel+0x32>
	{
		setup |= _BV(RF_PWR_HIGH) ;
	}
	else if ( level == RF24_PA_m12dB )
 80012da:	2c01      	cmp	r4, #1
 80012dc:	d00e      	beq.n	80012fc <NRF24_setPALevel+0x38>
	{
		setup |= _BV(RF_PWR_LOW);
	}
	else if ( level == RF24_PA_m18dB )
 80012de:	b134      	cbz	r4, 80012ee <NRF24_setPALevel+0x2a>
	{
		// nothing
	}
	else if ( level == RF24_PA_ERROR )
 80012e0:	2c04      	cmp	r4, #4
 80012e2:	d104      	bne.n	80012ee <NRF24_setPALevel+0x2a>
	{
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80012e4:	f041 0106 	orr.w	r1, r1, #6
 80012e8:	e001      	b.n	80012ee <NRF24_setPALevel+0x2a>
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80012ea:	f041 0106 	orr.w	r1, r1, #6
	}

	NRF24_write_register( REG_RF_SETUP, setup ) ;
 80012ee:	2006      	movs	r0, #6
 80012f0:	f7ff fed4 	bl	800109c <NRF24_write_register>
}
 80012f4:	bd10      	pop	{r4, pc}
		setup |= _BV(RF_PWR_HIGH) ;
 80012f6:	f041 0104 	orr.w	r1, r1, #4
 80012fa:	e7f8      	b.n	80012ee <NRF24_setPALevel+0x2a>
		setup |= _BV(RF_PWR_LOW);
 80012fc:	f041 0102 	orr.w	r1, r1, #2
 8001300:	e7f5      	b.n	80012ee <NRF24_setPALevel+0x2a>

08001302 <NRF24_setDataRate>:

	return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001302:	b538      	push	{r3, r4, r5, lr}
 8001304:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001306:	2006      	movs	r0, #6
 8001308:	f7ff fe86 	bl	8001018 <NRF24_read_register>

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false ;
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800130c:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
	if( speed == RF24_250KBPS )
 8001310:	2d02      	cmp	r5, #2
 8001312:	d00c      	beq.n	800132e <NRF24_setDataRate+0x2c>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if ( speed == RF24_2MBPS )
 8001314:	2d01      	cmp	r5, #1
 8001316:	d00d      	beq.n	8001334 <NRF24_setDataRate+0x32>
		{
			// 1Mbs
			wide_band = false ;
		}
	}
	NRF24_write_register(REG_RF_SETUP,setup);
 8001318:	4621      	mov	r1, r4
 800131a:	2006      	movs	r0, #6
 800131c:	f7ff febe 	bl	800109c <NRF24_write_register>

	// Verify our result
	if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001320:	2006      	movs	r0, #6
 8001322:	f7ff fe79 	bl	8001018 <NRF24_read_register>
 8001326:	42a0      	cmp	r0, r4
 8001328:	d007      	beq.n	800133a <NRF24_setDataRate+0x38>
	bool result = false;
 800132a:	2000      	movs	r0, #0
	{
		wide_band = false;
	}

	return result;
}
 800132c:	bd38      	pop	{r3, r4, r5, pc}
		setup |= _BV( RF_DR_LOW ) ;
 800132e:	f044 0420 	orr.w	r4, r4, #32
 8001332:	e7f1      	b.n	8001318 <NRF24_setDataRate+0x16>
			setup |= _BV(RF_DR_HIGH);
 8001334:	f044 0408 	orr.w	r4, r4, #8
 8001338:	e7ee      	b.n	8001318 <NRF24_setDataRate+0x16>
		result = true;
 800133a:	2001      	movs	r0, #1
 800133c:	e7f6      	b.n	800132c <NRF24_setDataRate+0x2a>

0800133e <NRF24_setCRCLength>:
	}
	return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800133e:	b510      	push	{r4, lr}
 8001340:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001342:	2000      	movs	r0, #0
 8001344:	f7ff fe68 	bl	8001018 <NRF24_read_register>
 8001348:	f000 01f3 	and.w	r1, r0, #243	; 0xf3

	// switch uses RAM
	if ( length == RF24_CRC_DISABLED )
 800134c:	b11c      	cbz	r4, 8001356 <NRF24_setCRCLength+0x18>
	{
		// Do nothing, we turned it off above.
	}
	else if ( length == RF24_CRC_8 )
 800134e:	2c01      	cmp	r4, #1
 8001350:	d005      	beq.n	800135e <NRF24_setCRCLength+0x20>
		config |= _BV(BIT_EN_CRC);
	}
	else
	{
		config |= _BV(BIT_EN_CRC);
		config |= _BV( BIT_CRCO );
 8001352:	f041 010c 	orr.w	r1, r1, #12
	}
	NRF24_write_register( REG_CONFIG, config );
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff fea0 	bl	800109c <NRF24_write_register>
}
 800135c:	bd10      	pop	{r4, pc}
		config |= _BV(BIT_EN_CRC);
 800135e:	f041 0108 	orr.w	r1, r1, #8
 8001362:	e7f8      	b.n	8001356 <NRF24_setCRCLength+0x18>

08001364 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001364:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff fe56 	bl	8001018 <NRF24_read_register>
 800136c:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff fe93 	bl	800109c <NRF24_write_register>
}
 8001376:	bd08      	pop	{r3, pc}

08001378 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001378:	b570      	push	{r4, r5, r6, lr}
 800137a:	4606      	mov	r6, r0
	uint8_t status = NRF24_get_status();
 800137c:	f7ff fed4 	bl	8001128 <NRF24_get_status>
 8001380:	f000 0340 	and.w	r3, r0, #64	; 0x40

	bool result = ( status & _BV(BIT_RX_DR) );
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf14      	ite	ne
 8001388:	2501      	movne	r5, #1
 800138a:	2500      	moveq	r5, #0

	if (result)
 800138c:	d00b      	beq.n	80013a6 <NRF24_availablePipe+0x2e>
 800138e:	4604      	mov	r4, r0
	{
		// If the caller wants the pipe number, include that
		if ( pipe_num )
 8001390:	b116      	cbz	r6, 8001398 <NRF24_availablePipe+0x20>
			*pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001392:	f3c0 0342 	ubfx	r3, r0, #1, #3
 8001396:	7033      	strb	r3, [r6, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001398:	2140      	movs	r1, #64	; 0x40
 800139a:	2007      	movs	r0, #7
 800139c:	f7ff fe7e 	bl	800109c <NRF24_write_register>

		// Handle ack payload receipt
		if ( status & _BV(BIT_TX_DS) )
 80013a0:	f014 0f20 	tst.w	r4, #32
 80013a4:	d101      	bne.n	80013aa <NRF24_availablePipe+0x32>
		{
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
		}
	}
	return result;
}
 80013a6:	4628      	mov	r0, r5
 80013a8:	bd70      	pop	{r4, r5, r6, pc}
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80013aa:	2120      	movs	r1, #32
 80013ac:	2007      	movs	r0, #7
 80013ae:	f7ff fe75 	bl	800109c <NRF24_write_register>
 80013b2:	e7f8      	b.n	80013a6 <NRF24_availablePipe+0x2e>

080013b4 <NRF24_available>:
{
 80013b4:	b508      	push	{r3, lr}
	return NRF24_availablePipe(NULL);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff ffde 	bl	8001378 <NRF24_availablePipe>
}
 80013bc:	bd08      	pop	{r3, pc}

080013be <NRF24_writeAckPayload>:
	NRF24_DelayMicroSeconds(15);
	NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 80013be:	b570      	push	{r4, r5, r6, lr}
 80013c0:	4604      	mov	r4, r0
 80013c2:	460d      	mov	r5, r1
	const uint8_t* current = (uint8_t *)buf;
	const uint8_t max_payload_size = 32;
	uint8_t data_len = MIN(len,max_payload_size);
 80013c4:	2a20      	cmp	r2, #32
 80013c6:	bf28      	it	cs
 80013c8:	2220      	movcs	r2, #32
 80013ca:	4616      	mov	r6, r2

	NRF24_csn(0);
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7ff fdf7 	bl	8000fc0 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 80013d2:	f004 0007 	and.w	r0, r4, #7
 80013d6:	4632      	mov	r2, r6
 80013d8:	4629      	mov	r1, r5
 80013da:	f040 00a8 	orr.w	r0, r0, #168	; 0xa8
 80013de:	f7ff fe77 	bl	80010d0 <NRF24_write_registerN>
	NRF24_csn(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f7ff fdec 	bl	8000fc0 <NRF24_csn>
}
 80013e8:	bd70      	pop	{r4, r5, r6, pc}

080013ea <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80013ea:	b508      	push	{r3, lr}
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80013ec:	2170      	movs	r1, #112	; 0x70
 80013ee:	2007      	movs	r0, #7
 80013f0:	f7ff fe54 	bl	800109c <NRF24_write_register>
}
 80013f4:	bd08      	pop	{r3, pc}
	...

080013f8 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80013f8:	b500      	push	{lr}
 80013fa:	b083      	sub	sp, #12
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff fddf 	bl	8000fc0 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001402:	2350      	movs	r3, #80	; 0x50
 8001404:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 8001408:	2373      	movs	r3, #115	; 0x73
 800140a:	f88d 3005 	strb.w	r3, [sp, #5]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2,2);
 800140e:	2302      	movs	r3, #2
 8001410:	461a      	mov	r2, r3
 8001412:	a901      	add	r1, sp, #4
 8001414:	4804      	ldr	r0, [pc, #16]	; (8001428 <NRF24_ACTIVATE_cmd+0x30>)
 8001416:	f001 ffb7 	bl	8003388 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}

	NRF24_csn(1);
 800141a:	2001      	movs	r0, #1
 800141c:	f7ff fdd0 	bl	8000fc0 <NRF24_csn>
}
 8001420:	b003      	add	sp, #12
 8001422:	f85d fb04 	ldr.w	pc, [sp], #4
 8001426:	bf00      	nop
 8001428:	2000023c 	.word	0x2000023c

0800142c <NRF24_enableAckPayload>:
{
 800142c:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800142e:	201d      	movs	r0, #29
 8001430:	f7ff fdf2 	bl	8001018 <NRF24_read_register>
 8001434:	f040 0106 	orr.w	r1, r0, #6
 8001438:	b2c9      	uxtb	r1, r1
 800143a:	201d      	movs	r0, #29
 800143c:	f7ff fe2e 	bl	800109c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001440:	201d      	movs	r0, #29
 8001442:	f7ff fde9 	bl	8001018 <NRF24_read_register>
 8001446:	b148      	cbz	r0, 800145c <NRF24_enableAckPayload+0x30>
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001448:	201c      	movs	r0, #28
 800144a:	f7ff fde5 	bl	8001018 <NRF24_read_register>
 800144e:	f040 0103 	orr.w	r1, r0, #3
 8001452:	b2c9      	uxtb	r1, r1
 8001454:	201c      	movs	r0, #28
 8001456:	f7ff fe21 	bl	800109c <NRF24_write_register>
}
 800145a:	bd08      	pop	{r3, pc}
		NRF24_ACTIVATE_cmd();
 800145c:	f7ff ffcc 	bl	80013f8 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001460:	201d      	movs	r0, #29
 8001462:	f7ff fdd9 	bl	8001018 <NRF24_read_register>
 8001466:	f040 0106 	orr.w	r1, r0, #6
 800146a:	b2c9      	uxtb	r1, r1
 800146c:	201d      	movs	r0, #29
 800146e:	f7ff fe15 	bl	800109c <NRF24_write_register>
 8001472:	e7e9      	b.n	8001448 <NRF24_enableAckPayload+0x1c>

08001474 <NRF24_begin>:
{
 8001474:	b082      	sub	sp, #8
 8001476:	b570      	push	{r4, r5, r6, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	4606      	mov	r6, r0
 800147c:	460d      	mov	r5, r1
 800147e:	4614      	mov	r4, r2
 8001480:	9307      	str	r3, [sp, #28]
	memcpy(&nrf24_hspi, &hspi2, sizeof(hspi2));
 8001482:	2258      	movs	r2, #88	; 0x58
 8001484:	4961      	ldr	r1, [pc, #388]	; (800160c <NRF24_begin+0x198>)
 8001486:	4862      	ldr	r0, [pc, #392]	; (8001610 <NRF24_begin+0x19c>)
 8001488:	f006 fb66 	bl	8007b58 <memcpy>
	nrf24_PORT = nrf24PORT;
 800148c:	4b61      	ldr	r3, [pc, #388]	; (8001614 <NRF24_begin+0x1a0>)
 800148e:	601e      	str	r6, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001490:	4b61      	ldr	r3, [pc, #388]	; (8001618 <NRF24_begin+0x1a4>)
 8001492:	801d      	strh	r5, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001494:	4b61      	ldr	r3, [pc, #388]	; (800161c <NRF24_begin+0x1a8>)
 8001496:	801c      	strh	r4, [r3, #0]
	NRF24_csn(1);
 8001498:	2001      	movs	r0, #1
 800149a:	f7ff fd91 	bl	8000fc0 <NRF24_csn>
	NRF24_ce(0);
 800149e:	2000      	movs	r0, #0
 80014a0:	f7ff fda4 	bl	8000fec <NRF24_ce>
	HAL_Delay(5);
 80014a4:	2005      	movs	r0, #5
 80014a6:	f000 fd79 	bl	8001f9c <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 80014aa:	2108      	movs	r1, #8
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff fdf5 	bl	800109c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80014b2:	213f      	movs	r1, #63	; 0x3f
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff fdf1 	bl	800109c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80014ba:	2103      	movs	r1, #3
 80014bc:	2002      	movs	r0, #2
 80014be:	f7ff fded 	bl	800109c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80014c2:	2103      	movs	r1, #3
 80014c4:	4608      	mov	r0, r1
 80014c6:	f7ff fde9 	bl	800109c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80014ca:	2103      	movs	r1, #3
 80014cc:	2004      	movs	r0, #4
 80014ce:	f7ff fde5 	bl	800109c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80014d2:	2102      	movs	r1, #2
 80014d4:	2005      	movs	r0, #5
 80014d6:	f7ff fde1 	bl	800109c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80014da:	210f      	movs	r1, #15
 80014dc:	2006      	movs	r0, #6
 80014de:	f7ff fddd 	bl	800109c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80014e2:	210e      	movs	r1, #14
 80014e4:	2007      	movs	r0, #7
 80014e6:	f7ff fdd9 	bl	800109c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80014ea:	2100      	movs	r1, #0
 80014ec:	2008      	movs	r0, #8
 80014ee:	f7ff fdd5 	bl	800109c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80014f2:	2100      	movs	r1, #0
 80014f4:	2009      	movs	r0, #9
 80014f6:	f7ff fdd1 	bl	800109c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80014fa:	24e7      	movs	r4, #231	; 0xe7
 80014fc:	f88d 4004 	strb.w	r4, [sp, #4]
 8001500:	f88d 4003 	strb.w	r4, [sp, #3]
 8001504:	f88d 4002 	strb.w	r4, [sp, #2]
 8001508:	f88d 4001 	strb.w	r4, [sp, #1]
 800150c:	ad02      	add	r5, sp, #8
 800150e:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8001512:	2205      	movs	r2, #5
 8001514:	4629      	mov	r1, r5
 8001516:	200a      	movs	r0, #10
 8001518:	f7ff fdda 	bl	80010d0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800151c:	23c2      	movs	r3, #194	; 0xc2
 800151e:	f88d 3004 	strb.w	r3, [sp, #4]
 8001522:	f88d 3003 	strb.w	r3, [sp, #3]
 8001526:	f88d 3002 	strb.w	r3, [sp, #2]
 800152a:	f88d 3001 	strb.w	r3, [sp, #1]
 800152e:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8001532:	2205      	movs	r2, #5
 8001534:	4629      	mov	r1, r5
 8001536:	200b      	movs	r0, #11
 8001538:	f7ff fdca 	bl	80010d0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800153c:	21c3      	movs	r1, #195	; 0xc3
 800153e:	200c      	movs	r0, #12
 8001540:	f7ff fdac 	bl	800109c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8001544:	21c4      	movs	r1, #196	; 0xc4
 8001546:	200d      	movs	r0, #13
 8001548:	f7ff fda8 	bl	800109c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800154c:	21c5      	movs	r1, #197	; 0xc5
 800154e:	200e      	movs	r0, #14
 8001550:	f7ff fda4 	bl	800109c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8001554:	21c6      	movs	r1, #198	; 0xc6
 8001556:	200f      	movs	r0, #15
 8001558:	f7ff fda0 	bl	800109c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800155c:	f88d 4004 	strb.w	r4, [sp, #4]
 8001560:	f88d 4003 	strb.w	r4, [sp, #3]
 8001564:	f88d 4002 	strb.w	r4, [sp, #2]
 8001568:	f88d 4001 	strb.w	r4, [sp, #1]
 800156c:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8001570:	2205      	movs	r2, #5
 8001572:	4629      	mov	r1, r5
 8001574:	2010      	movs	r0, #16
 8001576:	f7ff fdab 	bl	80010d0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800157a:	2100      	movs	r1, #0
 800157c:	2011      	movs	r0, #17
 800157e:	f7ff fd8d 	bl	800109c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8001582:	2100      	movs	r1, #0
 8001584:	2012      	movs	r0, #18
 8001586:	f7ff fd89 	bl	800109c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800158a:	2100      	movs	r1, #0
 800158c:	2013      	movs	r0, #19
 800158e:	f7ff fd85 	bl	800109c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8001592:	2100      	movs	r1, #0
 8001594:	2014      	movs	r0, #20
 8001596:	f7ff fd81 	bl	800109c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800159a:	2100      	movs	r1, #0
 800159c:	2015      	movs	r0, #21
 800159e:	f7ff fd7d 	bl	800109c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 80015a2:	2100      	movs	r1, #0
 80015a4:	2016      	movs	r0, #22
 80015a6:	f7ff fd79 	bl	800109c <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 80015aa:	f7ff ff25 	bl	80013f8 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80015ae:	2100      	movs	r1, #0
 80015b0:	201c      	movs	r0, #28
 80015b2:	f7ff fd73 	bl	800109c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80015b6:	2100      	movs	r1, #0
 80015b8:	201d      	movs	r0, #29
 80015ba:	f7ff fd6f 	bl	800109c <NRF24_write_register>
	NRF24_setRetries(15, 15);
 80015be:	210f      	movs	r1, #15
 80015c0:	4608      	mov	r0, r1
 80015c2:	f7ff fe11 	bl	80011e8 <NRF24_setRetries>
	NRF24_setPALevel(RF24_PA_m6dB);
 80015c6:	2002      	movs	r0, #2
 80015c8:	f7ff fe7c 	bl	80012c4 <NRF24_setPALevel>
	NRF24_setDataRate(RF24_1MBPS);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff fe98 	bl	8001302 <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 80015d2:	2002      	movs	r0, #2
 80015d4:	f7ff feb3 	bl	800133e <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 80015d8:	f7ff fe5a 	bl	8001290 <NRF24_disableDynamicPayloads>
	NRF24_setPayloadSize(32);
 80015dc:	2020      	movs	r0, #32
 80015de:	f7ff fe17 	bl	8001210 <NRF24_setPayloadSize>
	NRF24_setAutoAck(true);
 80015e2:	2001      	movs	r0, #1
 80015e4:	f7ff fe62 	bl	80012ac <NRF24_setAutoAck>
	NRF24_enableAckPayload();
 80015e8:	f7ff ff20 	bl	800142c <NRF24_enableAckPayload>
	NRF24_resetStatus();
 80015ec:	f7ff fefd 	bl	80013ea <NRF24_resetStatus>
	NRF24_setChannel(76);
 80015f0:	204c      	movs	r0, #76	; 0x4c
 80015f2:	f7ff fe03 	bl	80011fc <NRF24_setChannel>
	NRF24_flush_tx();
 80015f6:	f7ff fd8b 	bl	8001110 <NRF24_flush_tx>
	NRF24_flush_rx();
 80015fa:	f7ff fd8f 	bl	800111c <NRF24_flush_rx>
	NRF24_powerDown();
 80015fe:	f7ff feb1 	bl	8001364 <NRF24_powerDown>
}
 8001602:	b002      	add	sp, #8
 8001604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001608:	b002      	add	sp, #8
 800160a:	4770      	bx	lr
 800160c:	200048d8 	.word	0x200048d8
 8001610:	2000023c 	.word	0x2000023c
 8001614:	20000238 	.word	0x20000238
 8001618:	20000236 	.word	0x20000236
 800161c:	20000234 	.word	0x20000234

08001620 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001620:	b570      	push	{r4, r5, r6, lr}
 8001622:	b0a0      	sub	sp, #128	; 0x80
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001624:	ac07      	add	r4, sp, #28
 8001626:	4dc4      	ldr	r5, [pc, #784]	; (8001938 <printRadioSettings+0x318>)
 8001628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800162a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800162c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800162e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001634:	682b      	ldr	r3, [r5, #0]
 8001636:	f824 3b02 	strh.w	r3, [r4], #2
 800163a:	0c1b      	lsrs	r3, r3, #16
 800163c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800163e:	a807      	add	r0, sp, #28
 8001640:	f7fe fdd8 	bl	80001f4 <strlen>
 8001644:	230a      	movs	r3, #10
 8001646:	b282      	uxth	r2, r0
 8001648:	a907      	add	r1, sp, #28
 800164a:	48bc      	ldr	r0, [pc, #752]	; (800193c <printRadioSettings+0x31c>)
 800164c:	f002 feda 	bl	8004404 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff fce1 	bl	8001018 <NRF24_read_register>
	if(reg8Val & (1 << 3))
 8001656:	f010 0f08 	tst.w	r0, #8
 800165a:	f000 8261 	beq.w	8001b20 <printRadioSettings+0x500>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800165e:	f010 0f04 	tst.w	r0, #4
 8001662:	f000 8251 	beq.w	8001b08 <printRadioSettings+0x4e8>
 8001666:	ac07      	add	r4, sp, #28
 8001668:	4db5      	ldr	r5, [pc, #724]	; (8001940 <printRadioSettings+0x320>)
 800166a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800166c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800166e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001672:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001676:	a807      	add	r0, sp, #28
 8001678:	f7fe fdbc 	bl	80001f4 <strlen>
 800167c:	4caf      	ldr	r4, [pc, #700]	; (800193c <printRadioSettings+0x31c>)
 800167e:	230a      	movs	r3, #10
 8001680:	b282      	uxth	r2, r0
 8001682:	a907      	add	r1, sp, #28
 8001684:	4620      	mov	r0, r4
 8001686:	f002 febd 	bl	8004404 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800168a:	2001      	movs	r0, #1
 800168c:	f7ff fcc4 	bl	8001018 <NRF24_read_register>
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001690:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8001694:	9303      	str	r3, [sp, #12]
 8001696:	f3c0 1300 	ubfx	r3, r0, #4, #1
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	f3c0 0340 	ubfx	r3, r0, #1, #1
 80016ac:	f000 0201 	and.w	r2, r0, #1
 80016b0:	49a4      	ldr	r1, [pc, #656]	; (8001944 <printRadioSettings+0x324>)
 80016b2:	a807      	add	r0, sp, #28
 80016b4:	f007 f90c 	bl	80088d0 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016b8:	a807      	add	r0, sp, #28
 80016ba:	f7fe fd9b 	bl	80001f4 <strlen>
 80016be:	230a      	movs	r3, #10
 80016c0:	b282      	uxth	r2, r0
 80016c2:	a907      	add	r1, sp, #28
 80016c4:	4620      	mov	r0, r4
 80016c6:	f002 fe9d 	bl	8004404 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80016ca:	2002      	movs	r0, #2
 80016cc:	f7ff fca4 	bl	8001018 <NRF24_read_register>
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80016d0:	f3c0 1340 	ubfx	r3, r0, #5, #1
 80016d4:	9303      	str	r3, [sp, #12]
 80016d6:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80016da:	9302      	str	r3, [sp, #8]
 80016dc:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	f3c0 0340 	ubfx	r3, r0, #1, #1
 80016ec:	f000 0201 	and.w	r2, r0, #1
 80016f0:	4995      	ldr	r1, [pc, #596]	; (8001948 <printRadioSettings+0x328>)
 80016f2:	a807      	add	r0, sp, #28
 80016f4:	f007 f8ec 	bl	80088d0 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016f8:	a807      	add	r0, sp, #28
 80016fa:	f7fe fd7b 	bl	80001f4 <strlen>
 80016fe:	230a      	movs	r3, #10
 8001700:	b282      	uxth	r2, r0
 8001702:	a907      	add	r1, sp, #28
 8001704:	4620      	mov	r0, r4
 8001706:	f002 fe7d 	bl	8004404 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800170a:	2003      	movs	r0, #3
 800170c:	f7ff fc84 	bl	8001018 <NRF24_read_register>
 8001710:	f000 0203 	and.w	r2, r0, #3
	reg8Val +=2;
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001714:	3202      	adds	r2, #2
 8001716:	498d      	ldr	r1, [pc, #564]	; (800194c <printRadioSettings+0x32c>)
 8001718:	a807      	add	r0, sp, #28
 800171a:	f007 f8d9 	bl	80088d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800171e:	a807      	add	r0, sp, #28
 8001720:	f7fe fd68 	bl	80001f4 <strlen>
 8001724:	230a      	movs	r3, #10
 8001726:	b282      	uxth	r2, r0
 8001728:	a907      	add	r1, sp, #28
 800172a:	4620      	mov	r0, r4
 800172c:	f002 fe6a 	bl	8004404 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001730:	2005      	movs	r0, #5
 8001732:	f7ff fc71 	bl	8001018 <NRF24_read_register>
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001736:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800173a:	4985      	ldr	r1, [pc, #532]	; (8001950 <printRadioSettings+0x330>)
 800173c:	a807      	add	r0, sp, #28
 800173e:	f007 f8c7 	bl	80088d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001742:	a807      	add	r0, sp, #28
 8001744:	f7fe fd56 	bl	80001f4 <strlen>
 8001748:	230a      	movs	r3, #10
 800174a:	b282      	uxth	r2, r0
 800174c:	a907      	add	r1, sp, #28
 800174e:	4620      	mov	r0, r4
 8001750:	f002 fe58 	bl	8004404 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001754:	2006      	movs	r0, #6
 8001756:	f7ff fc5f 	bl	8001018 <NRF24_read_register>
 800175a:	4604      	mov	r4, r0
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800175c:	f010 0f08 	tst.w	r0, #8
 8001760:	f000 81e5 	beq.w	8001b2e <printRadioSettings+0x50e>
 8001764:	ad07      	add	r5, sp, #28
 8001766:	4e7b      	ldr	r6, [pc, #492]	; (8001954 <printRadioSettings+0x334>)
 8001768:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800176a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001770:	f845 0b04 	str.w	r0, [r5], #4
 8001774:	f825 1b02 	strh.w	r1, [r5], #2
 8001778:	0c09      	lsrs	r1, r1, #16
 800177a:	7029      	strb	r1, [r5, #0]
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800177c:	a807      	add	r0, sp, #28
 800177e:	f7fe fd39 	bl	80001f4 <strlen>
 8001782:	230a      	movs	r3, #10
 8001784:	b282      	uxth	r2, r0
 8001786:	a907      	add	r1, sp, #28
 8001788:	486c      	ldr	r0, [pc, #432]	; (800193c <printRadioSettings+0x31c>)
 800178a:	f002 fe3b 	bl	8004404 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
	reg8Val = (reg8Val>>1);
 800178e:	f3c4 0441 	ubfx	r4, r4, #1, #2
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001792:	2c00      	cmp	r4, #0
 8001794:	f000 81d8 	beq.w	8001b48 <printRadioSettings+0x528>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001798:	2c01      	cmp	r4, #1
 800179a:	f000 81dc 	beq.w	8001b56 <printRadioSettings+0x536>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800179e:	2c02      	cmp	r4, #2
 80017a0:	f000 81e0 	beq.w	8001b64 <printRadioSettings+0x544>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80017a4:	2c03      	cmp	r4, #3
 80017a6:	f000 81e7 	beq.w	8001b78 <printRadioSettings+0x558>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017aa:	a807      	add	r0, sp, #28
 80017ac:	f7fe fd22 	bl	80001f4 <strlen>
 80017b0:	4c62      	ldr	r4, [pc, #392]	; (800193c <printRadioSettings+0x31c>)
 80017b2:	230a      	movs	r3, #10
 80017b4:	b282      	uxth	r2, r0
 80017b6:	a907      	add	r1, sp, #28
 80017b8:	4620      	mov	r0, r4
 80017ba:	f002 fe23 	bl	8004404 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80017be:	2205      	movs	r2, #5
 80017c0:	a905      	add	r1, sp, #20
 80017c2:	200a      	movs	r0, #10
 80017c4:	f7ff fc4a 	bl	800105c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80017c8:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80017cc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80017d0:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80017d4:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80017d8:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80017dc:	9502      	str	r5, [sp, #8]
 80017de:	9001      	str	r0, [sp, #4]
 80017e0:	9100      	str	r1, [sp, #0]
 80017e2:	495d      	ldr	r1, [pc, #372]	; (8001958 <printRadioSettings+0x338>)
 80017e4:	a807      	add	r0, sp, #28
 80017e6:	f007 f873 	bl	80088d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017ea:	a807      	add	r0, sp, #28
 80017ec:	f7fe fd02 	bl	80001f4 <strlen>
 80017f0:	230a      	movs	r3, #10
 80017f2:	b282      	uxth	r2, r0
 80017f4:	a907      	add	r1, sp, #28
 80017f6:	4620      	mov	r0, r4
 80017f8:	f002 fe04 	bl	8004404 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80017fc:	2205      	movs	r2, #5
 80017fe:	a905      	add	r1, sp, #20
 8001800:	200b      	movs	r0, #11
 8001802:	f7ff fc2b 	bl	800105c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001806:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800180a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800180e:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8001812:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8001816:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800181a:	9502      	str	r5, [sp, #8]
 800181c:	9001      	str	r0, [sp, #4]
 800181e:	9100      	str	r1, [sp, #0]
 8001820:	494e      	ldr	r1, [pc, #312]	; (800195c <printRadioSettings+0x33c>)
 8001822:	a807      	add	r0, sp, #28
 8001824:	f007 f854 	bl	80088d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001828:	a807      	add	r0, sp, #28
 800182a:	f7fe fce3 	bl	80001f4 <strlen>
 800182e:	230a      	movs	r3, #10
 8001830:	b282      	uxth	r2, r0
 8001832:	a907      	add	r1, sp, #28
 8001834:	4620      	mov	r0, r4
 8001836:	f002 fde5 	bl	8004404 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800183a:	2201      	movs	r2, #1
 800183c:	a905      	add	r1, sp, #20
 800183e:	200c      	movs	r0, #12
 8001840:	f7ff fc0c 	bl	800105c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001844:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001848:	4945      	ldr	r1, [pc, #276]	; (8001960 <printRadioSettings+0x340>)
 800184a:	a807      	add	r0, sp, #28
 800184c:	f007 f840 	bl	80088d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001850:	a807      	add	r0, sp, #28
 8001852:	f7fe fccf 	bl	80001f4 <strlen>
 8001856:	230a      	movs	r3, #10
 8001858:	b282      	uxth	r2, r0
 800185a:	a907      	add	r1, sp, #28
 800185c:	4620      	mov	r0, r4
 800185e:	f002 fdd1 	bl	8004404 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001862:	2201      	movs	r2, #1
 8001864:	a905      	add	r1, sp, #20
 8001866:	200d      	movs	r0, #13
 8001868:	f7ff fbf8 	bl	800105c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800186c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001870:	493c      	ldr	r1, [pc, #240]	; (8001964 <printRadioSettings+0x344>)
 8001872:	a807      	add	r0, sp, #28
 8001874:	f007 f82c 	bl	80088d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001878:	a807      	add	r0, sp, #28
 800187a:	f7fe fcbb 	bl	80001f4 <strlen>
 800187e:	230a      	movs	r3, #10
 8001880:	b282      	uxth	r2, r0
 8001882:	a907      	add	r1, sp, #28
 8001884:	4620      	mov	r0, r4
 8001886:	f002 fdbd 	bl	8004404 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800188a:	2201      	movs	r2, #1
 800188c:	a905      	add	r1, sp, #20
 800188e:	200e      	movs	r0, #14
 8001890:	f7ff fbe4 	bl	800105c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001894:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001898:	4933      	ldr	r1, [pc, #204]	; (8001968 <printRadioSettings+0x348>)
 800189a:	a807      	add	r0, sp, #28
 800189c:	f007 f818 	bl	80088d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018a0:	a807      	add	r0, sp, #28
 80018a2:	f7fe fca7 	bl	80001f4 <strlen>
 80018a6:	230a      	movs	r3, #10
 80018a8:	b282      	uxth	r2, r0
 80018aa:	a907      	add	r1, sp, #28
 80018ac:	4620      	mov	r0, r4
 80018ae:	f002 fda9 	bl	8004404 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80018b2:	2201      	movs	r2, #1
 80018b4:	a905      	add	r1, sp, #20
 80018b6:	200f      	movs	r0, #15
 80018b8:	f7ff fbd0 	bl	800105c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80018bc:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80018c0:	492a      	ldr	r1, [pc, #168]	; (800196c <printRadioSettings+0x34c>)
 80018c2:	a807      	add	r0, sp, #28
 80018c4:	f007 f804 	bl	80088d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018c8:	a807      	add	r0, sp, #28
 80018ca:	f7fe fc93 	bl	80001f4 <strlen>
 80018ce:	230a      	movs	r3, #10
 80018d0:	b282      	uxth	r2, r0
 80018d2:	a907      	add	r1, sp, #28
 80018d4:	4620      	mov	r0, r4
 80018d6:	f002 fd95 	bl	8004404 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80018da:	2205      	movs	r2, #5
 80018dc:	a905      	add	r1, sp, #20
 80018de:	2010      	movs	r0, #16
 80018e0:	f7ff fbbc 	bl	800105c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80018e4:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80018e8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80018ec:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80018f0:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80018f4:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80018f8:	9502      	str	r5, [sp, #8]
 80018fa:	9001      	str	r0, [sp, #4]
 80018fc:	9100      	str	r1, [sp, #0]
 80018fe:	491c      	ldr	r1, [pc, #112]	; (8001970 <printRadioSettings+0x350>)
 8001900:	a807      	add	r0, sp, #28
 8001902:	f006 ffe5 	bl	80088d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001906:	a807      	add	r0, sp, #28
 8001908:	f7fe fc74 	bl	80001f4 <strlen>
 800190c:	230a      	movs	r3, #10
 800190e:	b282      	uxth	r2, r0
 8001910:	a907      	add	r1, sp, #28
 8001912:	4620      	mov	r0, r4
 8001914:	f002 fd76 	bl	8004404 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001918:	2011      	movs	r0, #17
 800191a:	f7ff fb7d 	bl	8001018 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800191e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001922:	4914      	ldr	r1, [pc, #80]	; (8001974 <printRadioSettings+0x354>)
 8001924:	a807      	add	r0, sp, #28
 8001926:	f006 ffd3 	bl	80088d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800192a:	a807      	add	r0, sp, #28
 800192c:	f7fe fc62 	bl	80001f4 <strlen>
 8001930:	230a      	movs	r3, #10
 8001932:	b282      	uxth	r2, r0
 8001934:	e020      	b.n	8001978 <printRadioSettings+0x358>
 8001936:	bf00      	nop
 8001938:	0800bd98 	.word	0x0800bd98
 800193c:	20000294 	.word	0x20000294
 8001940:	0800bdcc 	.word	0x0800bdcc
 8001944:	0800be18 	.word	0x0800be18
 8001948:	0800be5c 	.word	0x0800be5c
 800194c:	0800bea8 	.word	0x0800bea8
 8001950:	0800bec4 	.word	0x0800bec4
 8001954:	0800bed8 	.word	0x0800bed8
 8001958:	0800bf58 	.word	0x0800bf58
 800195c:	0800bf88 	.word	0x0800bf88
 8001960:	0800bfb8 	.word	0x0800bfb8
 8001964:	0800bfe0 	.word	0x0800bfe0
 8001968:	0800c008 	.word	0x0800c008
 800196c:	0800c030 	.word	0x0800c030
 8001970:	0800c058 	.word	0x0800c058
 8001974:	0800c084 	.word	0x0800c084
 8001978:	a907      	add	r1, sp, #28
 800197a:	4620      	mov	r0, r4
 800197c:	f002 fd42 	bl	8004404 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8001980:	2012      	movs	r0, #18
 8001982:	f7ff fb49 	bl	8001018 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001986:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 800198a:	498a      	ldr	r1, [pc, #552]	; (8001bb4 <printRadioSettings+0x594>)
 800198c:	a807      	add	r0, sp, #28
 800198e:	f006 ff9f 	bl	80088d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001992:	a807      	add	r0, sp, #28
 8001994:	f7fe fc2e 	bl	80001f4 <strlen>
 8001998:	230a      	movs	r3, #10
 800199a:	b282      	uxth	r2, r0
 800199c:	a907      	add	r1, sp, #28
 800199e:	4620      	mov	r0, r4
 80019a0:	f002 fd30 	bl	8004404 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 80019a4:	2013      	movs	r0, #19
 80019a6:	f7ff fb37 	bl	8001018 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80019aa:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80019ae:	4982      	ldr	r1, [pc, #520]	; (8001bb8 <printRadioSettings+0x598>)
 80019b0:	a807      	add	r0, sp, #28
 80019b2:	f006 ff8d 	bl	80088d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019b6:	a807      	add	r0, sp, #28
 80019b8:	f7fe fc1c 	bl	80001f4 <strlen>
 80019bc:	230a      	movs	r3, #10
 80019be:	b282      	uxth	r2, r0
 80019c0:	a907      	add	r1, sp, #28
 80019c2:	4620      	mov	r0, r4
 80019c4:	f002 fd1e 	bl	8004404 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 80019c8:	2014      	movs	r0, #20
 80019ca:	f7ff fb25 	bl	8001018 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80019ce:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80019d2:	497a      	ldr	r1, [pc, #488]	; (8001bbc <printRadioSettings+0x59c>)
 80019d4:	a807      	add	r0, sp, #28
 80019d6:	f006 ff7b 	bl	80088d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019da:	a807      	add	r0, sp, #28
 80019dc:	f7fe fc0a 	bl	80001f4 <strlen>
 80019e0:	230a      	movs	r3, #10
 80019e2:	b282      	uxth	r2, r0
 80019e4:	a907      	add	r1, sp, #28
 80019e6:	4620      	mov	r0, r4
 80019e8:	f002 fd0c 	bl	8004404 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 80019ec:	2015      	movs	r0, #21
 80019ee:	f7ff fb13 	bl	8001018 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80019f2:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80019f6:	4972      	ldr	r1, [pc, #456]	; (8001bc0 <printRadioSettings+0x5a0>)
 80019f8:	a807      	add	r0, sp, #28
 80019fa:	f006 ff69 	bl	80088d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019fe:	a807      	add	r0, sp, #28
 8001a00:	f7fe fbf8 	bl	80001f4 <strlen>
 8001a04:	230a      	movs	r3, #10
 8001a06:	b282      	uxth	r2, r0
 8001a08:	a907      	add	r1, sp, #28
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f002 fcfa 	bl	8004404 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8001a10:	2016      	movs	r0, #22
 8001a12:	f7ff fb01 	bl	8001018 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a16:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001a1a:	496a      	ldr	r1, [pc, #424]	; (8001bc4 <printRadioSettings+0x5a4>)
 8001a1c:	a807      	add	r0, sp, #28
 8001a1e:	f006 ff57 	bl	80088d0 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a22:	a807      	add	r0, sp, #28
 8001a24:	f7fe fbe6 	bl	80001f4 <strlen>
 8001a28:	230a      	movs	r3, #10
 8001a2a:	b282      	uxth	r2, r0
 8001a2c:	a907      	add	r1, sp, #28
 8001a2e:	4620      	mov	r0, r4
 8001a30:	f002 fce8 	bl	8004404 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001a34:	201c      	movs	r0, #28
 8001a36:	f7ff faef 	bl	8001018 <NRF24_read_register>
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a3a:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8001a3e:	9303      	str	r3, [sp, #12]
 8001a40:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8001a44:	9302      	str	r3, [sp, #8]
 8001a46:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8001a56:	f000 0201 	and.w	r2, r0, #1
 8001a5a:	495b      	ldr	r1, [pc, #364]	; (8001bc8 <printRadioSettings+0x5a8>)
 8001a5c:	a807      	add	r0, sp, #28
 8001a5e:	f006 ff37 	bl	80088d0 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a62:	a807      	add	r0, sp, #28
 8001a64:	f7fe fbc6 	bl	80001f4 <strlen>
 8001a68:	230a      	movs	r3, #10
 8001a6a:	b282      	uxth	r2, r0
 8001a6c:	a907      	add	r1, sp, #28
 8001a6e:	4620      	mov	r0, r4
 8001a70:	f002 fcc8 	bl	8004404 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001a74:	201d      	movs	r0, #29
 8001a76:	f7ff facf 	bl	8001018 <NRF24_read_register>
 8001a7a:	4606      	mov	r6, r0
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001a7c:	f010 0f04 	tst.w	r0, #4
 8001a80:	f000 8081 	beq.w	8001b86 <printRadioSettings+0x566>
 8001a84:	ac07      	add	r4, sp, #28
 8001a86:	4d51      	ldr	r5, [pc, #324]	; (8001bcc <printRadioSettings+0x5ac>)
 8001a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001a90:	f844 0b04 	str.w	r0, [r4], #4
 8001a94:	8021      	strh	r1, [r4, #0]
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a96:	a807      	add	r0, sp, #28
 8001a98:	f7fe fbac 	bl	80001f4 <strlen>
 8001a9c:	230a      	movs	r3, #10
 8001a9e:	b282      	uxth	r2, r0
 8001aa0:	a907      	add	r1, sp, #28
 8001aa2:	484b      	ldr	r0, [pc, #300]	; (8001bd0 <printRadioSettings+0x5b0>)
 8001aa4:	f002 fcae 	bl	8004404 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001aa8:	f016 0f02 	tst.w	r6, #2
 8001aac:	d178      	bne.n	8001ba0 <printRadioSettings+0x580>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001aae:	ac07      	add	r4, sp, #28
 8001ab0:	4d48      	ldr	r5, [pc, #288]	; (8001bd4 <printRadioSettings+0x5b4>)
 8001ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001aba:	c403      	stmia	r4!, {r0, r1}
 8001abc:	f824 2b02 	strh.w	r2, [r4], #2
 8001ac0:	0c12      	lsrs	r2, r2, #16
 8001ac2:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ac4:	a807      	add	r0, sp, #28
 8001ac6:	f7fe fb95 	bl	80001f4 <strlen>
 8001aca:	4e41      	ldr	r6, [pc, #260]	; (8001bd0 <printRadioSettings+0x5b0>)
 8001acc:	230a      	movs	r3, #10
 8001ace:	b282      	uxth	r2, r0
 8001ad0:	a907      	add	r1, sp, #28
 8001ad2:	4630      	mov	r0, r6
 8001ad4:	f002 fc96 	bl	8004404 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001ad8:	ac07      	add	r4, sp, #28
 8001ada:	4d3f      	ldr	r5, [pc, #252]	; (8001bd8 <printRadioSettings+0x5b8>)
 8001adc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae8:	682b      	ldr	r3, [r5, #0]
 8001aea:	f824 3b02 	strh.w	r3, [r4], #2
 8001aee:	0c1b      	lsrs	r3, r3, #16
 8001af0:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001af2:	a807      	add	r0, sp, #28
 8001af4:	f7fe fb7e 	bl	80001f4 <strlen>
 8001af8:	230a      	movs	r3, #10
 8001afa:	b282      	uxth	r2, r0
 8001afc:	a907      	add	r1, sp, #28
 8001afe:	4630      	mov	r0, r6
 8001b00:	f002 fc80 	bl	8004404 <HAL_UART_Transmit>
}
 8001b04:	b020      	add	sp, #128	; 0x80
 8001b06:	bd70      	pop	{r4, r5, r6, pc}
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8001b08:	ac07      	add	r4, sp, #28
 8001b0a:	4d34      	ldr	r5, [pc, #208]	; (8001bdc <printRadioSettings+0x5bc>)
 8001b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b14:	c403      	stmia	r4!, {r0, r1}
 8001b16:	f824 2b02 	strh.w	r2, [r4], #2
 8001b1a:	0c12      	lsrs	r2, r2, #16
 8001b1c:	7022      	strb	r2, [r4, #0]
 8001b1e:	e5aa      	b.n	8001676 <printRadioSettings+0x56>
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001b20:	ac07      	add	r4, sp, #28
 8001b22:	4d2f      	ldr	r5, [pc, #188]	; (8001be0 <printRadioSettings+0x5c0>)
 8001b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b28:	682b      	ldr	r3, [r5, #0]
 8001b2a:	6023      	str	r3, [r4, #0]
 8001b2c:	e5a3      	b.n	8001676 <printRadioSettings+0x56>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001b2e:	ad07      	add	r5, sp, #28
 8001b30:	4e2c      	ldr	r6, [pc, #176]	; (8001be4 <printRadioSettings+0x5c4>)
 8001b32:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b36:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001b3a:	f845 0b04 	str.w	r0, [r5], #4
 8001b3e:	f825 1b02 	strh.w	r1, [r5], #2
 8001b42:	0c09      	lsrs	r1, r1, #16
 8001b44:	7029      	strb	r1, [r5, #0]
 8001b46:	e619      	b.n	800177c <printRadioSettings+0x15c>
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001b48:	ac07      	add	r4, sp, #28
 8001b4a:	4d27      	ldr	r5, [pc, #156]	; (8001be8 <printRadioSettings+0x5c8>)
 8001b4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b50:	682b      	ldr	r3, [r5, #0]
 8001b52:	6023      	str	r3, [r4, #0]
 8001b54:	e629      	b.n	80017aa <printRadioSettings+0x18a>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001b56:	ac07      	add	r4, sp, #28
 8001b58:	4d24      	ldr	r5, [pc, #144]	; (8001bec <printRadioSettings+0x5cc>)
 8001b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b5e:	682b      	ldr	r3, [r5, #0]
 8001b60:	6023      	str	r3, [r4, #0]
 8001b62:	e622      	b.n	80017aa <printRadioSettings+0x18a>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001b64:	ac07      	add	r4, sp, #28
 8001b66:	4d22      	ldr	r5, [pc, #136]	; (8001bf0 <printRadioSettings+0x5d0>)
 8001b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b6c:	682b      	ldr	r3, [r5, #0]
 8001b6e:	f824 3b02 	strh.w	r3, [r4], #2
 8001b72:	0c1b      	lsrs	r3, r3, #16
 8001b74:	7023      	strb	r3, [r4, #0]
 8001b76:	e618      	b.n	80017aa <printRadioSettings+0x18a>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001b78:	ac07      	add	r4, sp, #28
 8001b7a:	4d1e      	ldr	r5, [pc, #120]	; (8001bf4 <printRadioSettings+0x5d4>)
 8001b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b80:	682b      	ldr	r3, [r5, #0]
 8001b82:	8023      	strh	r3, [r4, #0]
 8001b84:	e611      	b.n	80017aa <printRadioSettings+0x18a>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001b86:	ac07      	add	r4, sp, #28
 8001b88:	4d1b      	ldr	r5, [pc, #108]	; (8001bf8 <printRadioSettings+0x5d8>)
 8001b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b8e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b92:	f844 0b04 	str.w	r0, [r4], #4
 8001b96:	f824 1b02 	strh.w	r1, [r4], #2
 8001b9a:	0c09      	lsrs	r1, r1, #16
 8001b9c:	7021      	strb	r1, [r4, #0]
 8001b9e:	e77a      	b.n	8001a96 <printRadioSettings+0x476>
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001ba0:	ac07      	add	r4, sp, #28
 8001ba2:	4d16      	ldr	r5, [pc, #88]	; (8001bfc <printRadioSettings+0x5dc>)
 8001ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bac:	c403      	stmia	r4!, {r0, r1}
 8001bae:	8022      	strh	r2, [r4, #0]
 8001bb0:	e788      	b.n	8001ac4 <printRadioSettings+0x4a4>
 8001bb2:	bf00      	nop
 8001bb4:	0800c0a0 	.word	0x0800c0a0
 8001bb8:	0800c0bc 	.word	0x0800c0bc
 8001bbc:	0800c0d8 	.word	0x0800c0d8
 8001bc0:	0800c0f4 	.word	0x0800c0f4
 8001bc4:	0800c110 	.word	0x0800c110
 8001bc8:	0800c12c 	.word	0x0800c12c
 8001bcc:	0800c178 	.word	0x0800c178
 8001bd0:	20000294 	.word	0x20000294
 8001bd4:	0800c1c4 	.word	0x0800c1c4
 8001bd8:	0800bd98 	.word	0x0800bd98
 8001bdc:	0800bde8 	.word	0x0800bde8
 8001be0:	0800be04 	.word	0x0800be04
 8001be4:	0800bef0 	.word	0x0800bef0
 8001be8:	0800bf08 	.word	0x0800bf08
 8001bec:	0800bf1c 	.word	0x0800bf1c
 8001bf0:	0800bf30 	.word	0x0800bf30
 8001bf4:	0800bf44 	.word	0x0800bf44
 8001bf8:	0800c190 	.word	0x0800c190
 8001bfc:	0800c1a8 	.word	0x0800c1a8

08001c00 <pid_calculate_roll>:

/** roll PID Calculation **/
float pid_calculate_roll(float IMU_roll_value, int timer_value, float roll_setpoint) {

	//Calculate error
	roll_error = IMU_roll_value - roll_setpoint;
 8001c00:	ee70 0a60 	vsub.f32	s1, s0, s1
 8001c04:	4b29      	ldr	r3, [pc, #164]	; (8001cac <pid_calculate_roll+0xac>)
 8001c06:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	roll_p = roll_p_gain * roll_error;
 8001c0a:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <pid_calculate_roll+0xb0>)
 8001c0c:	edd3 6a00 	vldr	s13, [r3]
 8001c10:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <pid_calculate_roll+0xb4>)
 8001c16:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	roll_i += (roll_i_gain * roll_error * delta_t);
 8001c1a:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <pid_calculate_roll+0xb8>)
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8001c24:	eddf 5a25 	vldr	s11, [pc, #148]	; 8001cbc <pid_calculate_roll+0xbc>
 8001c28:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001c2c:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <pid_calculate_roll+0xc0>)
 8001c2e:	ed93 7a00 	vldr	s14, [r3]
 8001c32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c36:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / delta_t);
 8001c3a:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <pid_calculate_roll+0xc4>)
 8001c3c:	ed93 6a00 	vldr	s12, [r3]
 8001c40:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8001c44:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8001c48:	4a1f      	ldr	r2, [pc, #124]	; (8001cc8 <pid_calculate_roll+0xc8>)
 8001c4a:	ed92 6a00 	vldr	s12, [r2]
 8001c4e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001c52:	4a1e      	ldr	r2, [pc, #120]	; (8001ccc <pid_calculate_roll+0xcc>)
 8001c54:	ed82 7a00 	vstr	s14, [r2]
	roll_last_d_error = roll_error;
 8001c58:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	roll_output = roll_p + roll_i + roll_d;
 8001c5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c64:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <pid_calculate_roll+0xd0>)
 8001c66:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (roll_output < -roll_pid_clip) {
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <pid_calculate_roll+0xd4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	425a      	negs	r2, r3
 8001c70:	ee07 2a10 	vmov	s14, r2
 8001c74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c80:	d40c      	bmi.n	8001c9c <pid_calculate_roll+0x9c>
		roll_output = -roll_pid_clip;
	} else if (roll_output > roll_pid_clip) {
 8001c82:	ee07 3a10 	vmov	s14, r3
 8001c86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	dd06      	ble.n	8001ca2 <pid_calculate_roll+0xa2>
		roll_output = roll_pid_clip;
 8001c94:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <pid_calculate_roll+0xd0>)
 8001c96:	ed83 7a00 	vstr	s14, [r3]
 8001c9a:	e002      	b.n	8001ca2 <pid_calculate_roll+0xa2>
		roll_output = -roll_pid_clip;
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <pid_calculate_roll+0xd0>)
 8001c9e:	ed83 7a00 	vstr	s14, [r3]
	}

	return roll_output;
}
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <pid_calculate_roll+0xd0>)
 8001ca4:	ed93 0a00 	vldr	s0, [r3]
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	200002ec 	.word	0x200002ec
 8001cb0:	20000018 	.word	0x20000018
 8001cb4:	200043cc 	.word	0x200043cc
 8001cb8:	20000014 	.word	0x20000014
 8001cbc:	3b012912 	.word	0x3b012912
 8001cc0:	200043d8 	.word	0x200043d8
 8001cc4:	200002f0 	.word	0x200002f0
 8001cc8:	20000010 	.word	0x20000010
 8001ccc:	200043b8 	.word	0x200043b8
 8001cd0:	200002f4 	.word	0x200002f4
 8001cd4:	2000001c 	.word	0x2000001c

08001cd8 <reset_pid_roll>:

void reset_pid_roll(){

	roll_p = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	4a04      	ldr	r2, [pc, #16]	; (8001cec <reset_pid_roll+0x14>)
 8001cdc:	6013      	str	r3, [r2, #0]
	roll_i = 0;
 8001cde:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <reset_pid_roll+0x18>)
 8001ce0:	6013      	str	r3, [r2, #0]
	roll_d = 0;
 8001ce2:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <reset_pid_roll+0x1c>)
 8001ce4:	6013      	str	r3, [r2, #0]
	roll_output = 0;
 8001ce6:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <reset_pid_roll+0x20>)
 8001ce8:	6013      	str	r3, [r2, #0]

}
 8001cea:	4770      	bx	lr
 8001cec:	200043cc 	.word	0x200043cc
 8001cf0:	200043d8 	.word	0x200043d8
 8001cf4:	200043b8 	.word	0x200043b8
 8001cf8:	200002f4 	.word	0x200002f4

08001cfc <pid_calculate_pitch>:

/** Pitch PID Calculation **/
float pid_calculate_pitch(float IMU_pitch_value, int timer_value, float pitch_setpoint) {

	//Calculate error
	pitch_error = IMU_pitch_value - pitch_setpoint;
 8001cfc:	ee70 0a60 	vsub.f32	s1, s0, s1
 8001d00:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <pid_calculate_pitch+0xac>)
 8001d02:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 8001d06:	4b29      	ldr	r3, [pc, #164]	; (8001dac <pid_calculate_pitch+0xb0>)
 8001d08:	edd3 6a00 	vldr	s13, [r3]
 8001d0c:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8001d10:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <pid_calculate_pitch+0xb4>)
 8001d12:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	pitch_i += (pitch_i_gain * pitch_error * delta_t);
 8001d16:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <pid_calculate_pitch+0xb8>)
 8001d18:	edd3 7a00 	vldr	s15, [r3]
 8001d1c:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8001d20:	eddf 5a25 	vldr	s11, [pc, #148]	; 8001db8 <pid_calculate_pitch+0xbc>
 8001d24:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001d28:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <pid_calculate_pitch+0xc0>)
 8001d2a:	ed93 7a00 	vldr	s14, [r3]
 8001d2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d32:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	pitch_d = pitch_d_gain * ( (pitch_error - pitch_last_d_error) / delta_t);
 8001d36:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <pid_calculate_pitch+0xc4>)
 8001d38:	ed93 6a00 	vldr	s12, [r3]
 8001d3c:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8001d40:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8001d44:	4a1f      	ldr	r2, [pc, #124]	; (8001dc4 <pid_calculate_pitch+0xc8>)
 8001d46:	ed92 6a00 	vldr	s12, [r2]
 8001d4a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001d4e:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <pid_calculate_pitch+0xcc>)
 8001d50:	ed82 7a00 	vstr	s14, [r2]
	pitch_last_d_error = pitch_error;
 8001d54:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 8001d58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <pid_calculate_pitch+0xd0>)
 8001d62:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (pitch_output < -pitch_pid_clip) {
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <pid_calculate_pitch+0xd4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	425a      	negs	r2, r3
 8001d6c:	ee07 2a10 	vmov	s14, r2
 8001d70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7c:	d40c      	bmi.n	8001d98 <pid_calculate_pitch+0x9c>
		pitch_output = -pitch_pid_clip;
	} else if (pitch_output > pitch_pid_clip) {
 8001d7e:	ee07 3a10 	vmov	s14, r3
 8001d82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8e:	dd06      	ble.n	8001d9e <pid_calculate_pitch+0xa2>
		pitch_output = pitch_pid_clip;
 8001d90:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <pid_calculate_pitch+0xd0>)
 8001d92:	ed83 7a00 	vstr	s14, [r3]
 8001d96:	e002      	b.n	8001d9e <pid_calculate_pitch+0xa2>
		pitch_output = -pitch_pid_clip;
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <pid_calculate_pitch+0xd0>)
 8001d9a:	ed83 7a00 	vstr	s14, [r3]
	}

	return pitch_output;
}
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <pid_calculate_pitch+0xd0>)
 8001da0:	ed93 0a00 	vldr	s0, [r3]
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	200002e0 	.word	0x200002e0
 8001dac:	20000008 	.word	0x20000008
 8001db0:	200043c4 	.word	0x200043c4
 8001db4:	20000004 	.word	0x20000004
 8001db8:	3b012912 	.word	0x3b012912
 8001dbc:	200043c8 	.word	0x200043c8
 8001dc0:	200002e4 	.word	0x200002e4
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	200043bc 	.word	0x200043bc
 8001dcc:	200002e8 	.word	0x200002e8
 8001dd0:	2000000c 	.word	0x2000000c

08001dd4 <reset_pid_pitch>:

void reset_pid_pitch(){

	pitch_p = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <reset_pid_pitch+0x14>)
 8001dd8:	6013      	str	r3, [r2, #0]
	pitch_i = 0;
 8001dda:	4a04      	ldr	r2, [pc, #16]	; (8001dec <reset_pid_pitch+0x18>)
 8001ddc:	6013      	str	r3, [r2, #0]
	pitch_d = 0;
 8001dde:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <reset_pid_pitch+0x1c>)
 8001de0:	6013      	str	r3, [r2, #0]
	pitch_output = 0;
 8001de2:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <reset_pid_pitch+0x20>)
 8001de4:	6013      	str	r3, [r2, #0]

}
 8001de6:	4770      	bx	lr
 8001de8:	200043c4 	.word	0x200043c4
 8001dec:	200043c8 	.word	0x200043c8
 8001df0:	200043bc 	.word	0x200043bc
 8001df4:	200002e8 	.word	0x200002e8

08001df8 <pid_calculate_yaw>:

/** yaw PID Calculation **/
float pid_calculate_yaw(float IMU_yaw_value, int timer_value, float yaw_setpoint) {

	//Calculate error
	yaw_error = IMU_yaw_value - yaw_setpoint;
 8001df8:	ee70 0a60 	vsub.f32	s1, s0, s1
 8001dfc:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <pid_calculate_yaw+0xac>)
 8001dfe:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	yaw_p = yaw_p_gain * yaw_error;
 8001e02:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <pid_calculate_yaw+0xb0>)
 8001e04:	edd3 6a00 	vldr	s13, [r3]
 8001e08:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8001e0c:	4b27      	ldr	r3, [pc, #156]	; (8001eac <pid_calculate_yaw+0xb4>)
 8001e0e:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	yaw_i += (yaw_i_gain * yaw_error * delta_t);
 8001e12:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <pid_calculate_yaw+0xb8>)
 8001e14:	edd3 7a00 	vldr	s15, [r3]
 8001e18:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8001e1c:	eddf 5a25 	vldr	s11, [pc, #148]	; 8001eb4 <pid_calculate_yaw+0xbc>
 8001e20:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001e24:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <pid_calculate_yaw+0xc0>)
 8001e26:	ed93 7a00 	vldr	s14, [r3]
 8001e2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e2e:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	yaw_d = yaw_d_gain * ( (yaw_error - yaw_last_d_error) / delta_t);
 8001e32:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <pid_calculate_yaw+0xc4>)
 8001e34:	ed93 6a00 	vldr	s12, [r3]
 8001e38:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8001e3c:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8001e40:	4a1f      	ldr	r2, [pc, #124]	; (8001ec0 <pid_calculate_yaw+0xc8>)
 8001e42:	ed92 6a00 	vldr	s12, [r2]
 8001e46:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001e4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ec4 <pid_calculate_yaw+0xcc>)
 8001e4c:	ed82 7a00 	vstr	s14, [r2]
	yaw_last_d_error = yaw_error;
 8001e50:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	yaw_output = yaw_p + yaw_i + yaw_d;
 8001e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <pid_calculate_yaw+0xd0>)
 8001e5e:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (yaw_output < -yaw_pid_clip) {
 8001e62:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <pid_calculate_yaw+0xd4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	425a      	negs	r2, r3
 8001e68:	ee07 2a10 	vmov	s14, r2
 8001e6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e78:	d40c      	bmi.n	8001e94 <pid_calculate_yaw+0x9c>
		yaw_output = -yaw_pid_clip;
	} else if (yaw_output > yaw_pid_clip) {
 8001e7a:	ee07 3a10 	vmov	s14, r3
 8001e7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8a:	dd06      	ble.n	8001e9a <pid_calculate_yaw+0xa2>
		yaw_output = yaw_pid_clip;
 8001e8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <pid_calculate_yaw+0xd0>)
 8001e8e:	ed83 7a00 	vstr	s14, [r3]
 8001e92:	e002      	b.n	8001e9a <pid_calculate_yaw+0xa2>
		yaw_output = -yaw_pid_clip;
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <pid_calculate_yaw+0xd0>)
 8001e96:	ed83 7a00 	vstr	s14, [r3]
	}

	return yaw_output;
}
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <pid_calculate_yaw+0xd0>)
 8001e9c:	ed93 0a00 	vldr	s0, [r3]
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	200002f8 	.word	0x200002f8
 8001ea8:	20000028 	.word	0x20000028
 8001eac:	200043d4 	.word	0x200043d4
 8001eb0:	20000024 	.word	0x20000024
 8001eb4:	3b012912 	.word	0x3b012912
 8001eb8:	200043d0 	.word	0x200043d0
 8001ebc:	200002fc 	.word	0x200002fc
 8001ec0:	20000020 	.word	0x20000020
 8001ec4:	200043c0 	.word	0x200043c0
 8001ec8:	20000300 	.word	0x20000300
 8001ecc:	2000002c 	.word	0x2000002c

08001ed0 <reset_pid_yaw>:

void reset_pid_yaw(){

	yaw_p = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <reset_pid_yaw+0x14>)
 8001ed4:	6013      	str	r3, [r2, #0]
	yaw_i = 0;
 8001ed6:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <reset_pid_yaw+0x18>)
 8001ed8:	6013      	str	r3, [r2, #0]
	yaw_d = 0;
 8001eda:	4a04      	ldr	r2, [pc, #16]	; (8001eec <reset_pid_yaw+0x1c>)
 8001edc:	6013      	str	r3, [r2, #0]
	yaw_output = 0;
 8001ede:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <reset_pid_yaw+0x20>)
 8001ee0:	6013      	str	r3, [r2, #0]

}
 8001ee2:	4770      	bx	lr
 8001ee4:	200043d4 	.word	0x200043d4
 8001ee8:	200043d0 	.word	0x200043d0
 8001eec:	200043c0 	.word	0x200043c0
 8001ef0:	20000300 	.word	0x20000300

08001ef4 <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001ef4:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <DWT_Init+0x1c>)
 8001ef6:	68d3      	ldr	r3, [r2, #12]
 8001ef8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001efc:	60d3      	str	r3, [r2, #12]
        //DWT->LAR = 0xC5ACCE55;
        DWT->CYCCNT = 0;
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <DWT_Init+0x20>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000edf0 	.word	0xe000edf0
 8001f14:	e0001000 	.word	0xe0001000

08001f18 <DWT_Delay>:
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT,
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <DWT_Delay+0x20>)
 8001f1a:	685a      	ldr	r2, [r3, #4]
             delayTicks = us * (SystemCoreClock/1000000);
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <DWT_Delay+0x24>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4907      	ldr	r1, [pc, #28]	; (8001f40 <DWT_Delay+0x28>)
 8001f22:	fba1 1303 	umull	r1, r3, r1, r3
 8001f26:	0c9b      	lsrs	r3, r3, #18
 8001f28:	fb00 f003 	mul.w	r0, r0, r3

    while (DWT->CYCCNT - startTick < delayTicks);
 8001f2c:	4b02      	ldr	r3, [pc, #8]	; (8001f38 <DWT_Delay+0x20>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	1a9b      	subs	r3, r3, r2
 8001f32:	4283      	cmp	r3, r0
 8001f34:	d3fa      	bcc.n	8001f2c <DWT_Delay+0x14>
}
 8001f36:	4770      	bx	lr
 8001f38:	e0001000 	.word	0xe0001000
 8001f3c:	20000040 	.word	0x20000040
 8001f40:	431bde83 	.word	0x431bde83

08001f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f44:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_Init+0x30>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f4e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f56:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f5e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f60:	2003      	movs	r0, #3
 8001f62:	f000 f82f 	bl	8001fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f005 faea 	bl	8007540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f6c:	f005 fab6 	bl	80074dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001f70:	2000      	movs	r0, #0
 8001f72:	bd08      	pop	{r3, pc}
 8001f74:	40023c00 	.word	0x40023c00

08001f78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001f78:	4a03      	ldr	r2, [pc, #12]	; (8001f88 <HAL_IncTick+0x10>)
 8001f7a:	6811      	ldr	r1, [r2, #0]
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <HAL_IncTick+0x14>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	440b      	add	r3, r1
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	200043dc 	.word	0x200043dc
 8001f8c:	20000030 	.word	0x20000030

08001f90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f90:	4b01      	ldr	r3, [pc, #4]	; (8001f98 <HAL_GetTick+0x8>)
 8001f92:	6818      	ldr	r0, [r3, #0]
}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	200043dc 	.word	0x200043dc

08001f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f9c:	b538      	push	{r3, r4, r5, lr}
 8001f9e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001fa0:	f7ff fff6 	bl	8001f90 <HAL_GetTick>
 8001fa4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fa6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001faa:	d002      	beq.n	8001fb2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <HAL_Delay+0x24>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fb2:	f7ff ffed 	bl	8001f90 <HAL_GetTick>
 8001fb6:	1b40      	subs	r0, r0, r5
 8001fb8:	42a0      	cmp	r0, r4
 8001fba:	d3fa      	bcc.n	8001fb2 <HAL_Delay+0x16>
  {
  }
}
 8001fbc:	bd38      	pop	{r3, r4, r5, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000030 	.word	0x20000030

08001fc4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc4:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001fc6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fcc:	041b      	lsls	r3, r3, #16
 8001fce:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd0:	0200      	lsls	r0, r0, #8
 8001fd2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd6:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001fd8:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001fdc:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001fe0:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fe8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <HAL_NVIC_SetPriority+0x60>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff2:	f1c3 0407 	rsb	r4, r3, #7
 8001ff6:	2c04      	cmp	r4, #4
 8001ff8:	bf28      	it	cs
 8001ffa:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffc:	1d1d      	adds	r5, r3, #4
 8001ffe:	2d06      	cmp	r5, #6
 8002000:	d918      	bls.n	8002034 <HAL_NVIC_SetPriority+0x4c>
 8002002:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002008:	fa05 f404 	lsl.w	r4, r5, r4
 800200c:	ea21 0104 	bic.w	r1, r1, r4
 8002010:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002012:	fa05 f303 	lsl.w	r3, r5, r3
 8002016:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800201c:	2800      	cmp	r0, #0
 800201e:	db0b      	blt.n	8002038 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002020:	0109      	lsls	r1, r1, #4
 8002022:	b2c9      	uxtb	r1, r1
 8002024:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002028:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800202c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002030:	bc30      	pop	{r4, r5}
 8002032:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002034:	2300      	movs	r3, #0
 8002036:	e7e5      	b.n	8002004 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002038:	f000 000f 	and.w	r0, r0, #15
 800203c:	0109      	lsls	r1, r1, #4
 800203e:	b2c9      	uxtb	r1, r1
 8002040:	4b02      	ldr	r3, [pc, #8]	; (800204c <HAL_NVIC_SetPriority+0x64>)
 8002042:	5419      	strb	r1, [r3, r0]
 8002044:	e7f4      	b.n	8002030 <HAL_NVIC_SetPriority+0x48>
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00
 800204c:	e000ed14 	.word	0xe000ed14

08002050 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002050:	2800      	cmp	r0, #0
 8002052:	db07      	blt.n	8002064 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002054:	f000 021f 	and.w	r2, r0, #31
 8002058:	0940      	lsrs	r0, r0, #5
 800205a:	2301      	movs	r3, #1
 800205c:	4093      	lsls	r3, r2
 800205e:	4a02      	ldr	r2, [pc, #8]	; (8002068 <HAL_NVIC_EnableIRQ+0x18>)
 8002060:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000e100 	.word	0xe000e100

0800206c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800206c:	b168      	cbz	r0, 800208a <HAL_CRC_Init+0x1e>
{
 800206e:	b510      	push	{r4, lr}
 8002070:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002072:	7943      	ldrb	r3, [r0, #5]
 8002074:	b12b      	cbz	r3, 8002082 <HAL_CRC_Init+0x16>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002076:	2302      	movs	r3, #2
 8002078:	7163      	strb	r3, [r4, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800207a:	2301      	movs	r3, #1
 800207c:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800207e:	2000      	movs	r0, #0
}
 8002080:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8002082:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8002084:	f004 fe26 	bl	8006cd4 <HAL_CRC_MspInit>
 8002088:	e7f5      	b.n	8002076 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 800208a:	2001      	movs	r0, #1
}
 800208c:	4770      	bx	lr

0800208e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800208e:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002090:	6805      	ldr	r5, [r0, #0]
 8002092:	682c      	ldr	r4, [r5, #0]
 8002094:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8002098:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800209a:	6804      	ldr	r4, [r0, #0]
 800209c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800209e:	6883      	ldr	r3, [r0, #8]
 80020a0:	2b40      	cmp	r3, #64	; 0x40
 80020a2:	d005      	beq.n	80020b0 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80020a4:	6803      	ldr	r3, [r0, #0]
 80020a6:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80020a8:	6803      	ldr	r3, [r0, #0]
 80020aa:	60da      	str	r2, [r3, #12]
  }
}
 80020ac:	bc30      	pop	{r4, r5}
 80020ae:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80020b0:	6803      	ldr	r3, [r0, #0]
 80020b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80020b4:	6803      	ldr	r3, [r0, #0]
 80020b6:	60d9      	str	r1, [r3, #12]
 80020b8:	e7f8      	b.n	80020ac <DMA_SetConfig+0x1e>
	...

080020bc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020bc:	6802      	ldr	r2, [r0, #0]
 80020be:	b2d3      	uxtb	r3, r2
 80020c0:	3b10      	subs	r3, #16
 80020c2:	490b      	ldr	r1, [pc, #44]	; (80020f0 <DMA_CalcBaseAndBitshift+0x34>)
 80020c4:	fba1 1303 	umull	r1, r3, r1, r3
 80020c8:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020ca:	490a      	ldr	r1, [pc, #40]	; (80020f4 <DMA_CalcBaseAndBitshift+0x38>)
 80020cc:	5cc9      	ldrb	r1, [r1, r3]
 80020ce:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d806      	bhi.n	80020e2 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020d4:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80020d8:	f022 0203 	bic.w	r2, r2, #3
 80020dc:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80020de:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80020e0:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020e2:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80020e6:	f022 0203 	bic.w	r2, r2, #3
 80020ea:	3204      	adds	r2, #4
 80020ec:	6582      	str	r2, [r0, #88]	; 0x58
 80020ee:	e7f6      	b.n	80020de <DMA_CalcBaseAndBitshift+0x22>
 80020f0:	aaaaaaab 	.word	0xaaaaaaab
 80020f4:	0800c1e0 	.word	0x0800c1e0

080020f8 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020fa:	6982      	ldr	r2, [r0, #24]
 80020fc:	b992      	cbnz	r2, 8002124 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d00a      	beq.n	8002118 <DMA_CheckFifoParam+0x20>
 8002102:	b11b      	cbz	r3, 800210c <DMA_CheckFifoParam+0x14>
 8002104:	2b02      	cmp	r3, #2
 8002106:	d001      	beq.n	800210c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8002108:	2000      	movs	r0, #0
 800210a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800210c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800210e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002112:	d12c      	bne.n	800216e <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8002114:	2000      	movs	r0, #0
 8002116:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002118:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800211a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800211e:	d028      	beq.n	8002172 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002120:	2000      	movs	r0, #0
 8002122:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002124:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002128:	d005      	beq.n	8002136 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800212a:	2b02      	cmp	r3, #2
 800212c:	d929      	bls.n	8002182 <DMA_CheckFifoParam+0x8a>
 800212e:	2b03      	cmp	r3, #3
 8002130:	d015      	beq.n	800215e <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8002132:	2000      	movs	r0, #0
 8002134:	4770      	bx	lr
    switch (tmp)
 8002136:	2b03      	cmp	r3, #3
 8002138:	d803      	bhi.n	8002142 <DMA_CheckFifoParam+0x4a>
 800213a:	e8df f003 	tbb	[pc, r3]
 800213e:	041c      	.short	0x041c
 8002140:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8002142:	2000      	movs	r0, #0
 8002144:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002146:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002148:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800214c:	d115      	bne.n	800217a <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800214e:	2000      	movs	r0, #0
 8002150:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002152:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002154:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002158:	d011      	beq.n	800217e <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 800215a:	2000      	movs	r0, #0
 800215c:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800215e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002160:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002164:	d001      	beq.n	800216a <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8002166:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002168:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800216a:	2000      	movs	r0, #0
 800216c:	4770      	bx	lr
        status = HAL_ERROR;
 800216e:	2001      	movs	r0, #1
 8002170:	4770      	bx	lr
        status = HAL_ERROR;
 8002172:	2001      	movs	r0, #1
 8002174:	4770      	bx	lr
      status = HAL_ERROR;
 8002176:	2001      	movs	r0, #1
 8002178:	4770      	bx	lr
        status = HAL_ERROR;
 800217a:	2001      	movs	r0, #1
 800217c:	4770      	bx	lr
        status = HAL_ERROR;
 800217e:	2001      	movs	r0, #1
 8002180:	4770      	bx	lr
      status = HAL_ERROR;
 8002182:	2001      	movs	r0, #1
 8002184:	4770      	bx	lr
	...

08002188 <HAL_DMA_Init>:
{
 8002188:	b570      	push	{r4, r5, r6, lr}
 800218a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800218c:	f7ff ff00 	bl	8001f90 <HAL_GetTick>
  if(hdma == NULL)
 8002190:	2c00      	cmp	r4, #0
 8002192:	d05b      	beq.n	800224c <HAL_DMA_Init+0xc4>
 8002194:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8002196:	2300      	movs	r3, #0
 8002198:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800219c:	2302      	movs	r3, #2
 800219e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80021a2:	6822      	ldr	r2, [r4, #0]
 80021a4:	6813      	ldr	r3, [r2, #0]
 80021a6:	f023 0301 	bic.w	r3, r3, #1
 80021aa:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	f012 0f01 	tst.w	r2, #1
 80021b4:	d00a      	beq.n	80021cc <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021b6:	f7ff feeb 	bl	8001f90 <HAL_GetTick>
 80021ba:	1b40      	subs	r0, r0, r5
 80021bc:	2805      	cmp	r0, #5
 80021be:	d9f5      	bls.n	80021ac <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021c0:	2320      	movs	r3, #32
 80021c2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021c4:	2003      	movs	r0, #3
 80021c6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80021ca:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80021cc:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021ce:	4820      	ldr	r0, [pc, #128]	; (8002250 <HAL_DMA_Init+0xc8>)
 80021d0:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021d2:	6861      	ldr	r1, [r4, #4]
 80021d4:	68a2      	ldr	r2, [r4, #8]
 80021d6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d8:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021da:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021dc:	6921      	ldr	r1, [r4, #16]
 80021de:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e0:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e4:	69a1      	ldr	r1, [r4, #24]
 80021e6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e8:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ea:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ec:	6a21      	ldr	r1, [r4, #32]
 80021ee:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021f0:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80021f4:	2904      	cmp	r1, #4
 80021f6:	d01e      	beq.n	8002236 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80021f8:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80021fa:	6826      	ldr	r6, [r4, #0]
 80021fc:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021fe:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8002202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002204:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002206:	2b04      	cmp	r3, #4
 8002208:	d107      	bne.n	800221a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800220a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800220c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800220e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002210:	b11b      	cbz	r3, 800221a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002212:	4620      	mov	r0, r4
 8002214:	f7ff ff70 	bl	80020f8 <DMA_CheckFifoParam>
 8002218:	b990      	cbnz	r0, 8002240 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800221a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800221c:	4620      	mov	r0, r4
 800221e:	f7ff ff4d 	bl	80020bc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002222:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002224:	233f      	movs	r3, #63	; 0x3f
 8002226:	4093      	lsls	r3, r2
 8002228:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800222a:	2000      	movs	r0, #0
 800222c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800222e:	2301      	movs	r3, #1
 8002230:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002234:	e7c9      	b.n	80021ca <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002236:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002238:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800223a:	4301      	orrs	r1, r0
 800223c:	430a      	orrs	r2, r1
 800223e:	e7db      	b.n	80021f8 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002240:	2340      	movs	r3, #64	; 0x40
 8002242:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002244:	2001      	movs	r0, #1
 8002246:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800224a:	e7be      	b.n	80021ca <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 800224c:	2001      	movs	r0, #1
 800224e:	e7bc      	b.n	80021ca <HAL_DMA_Init+0x42>
 8002250:	f010803f 	.word	0xf010803f

08002254 <HAL_DMA_Start_IT>:
{
 8002254:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002256:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002258:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800225c:	2c01      	cmp	r4, #1
 800225e:	d031      	beq.n	80022c4 <HAL_DMA_Start_IT+0x70>
 8002260:	2401      	movs	r4, #1
 8002262:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002266:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800226a:	b2e4      	uxtb	r4, r4
 800226c:	2c01      	cmp	r4, #1
 800226e:	d004      	beq.n	800227a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8002270:	2300      	movs	r3, #0
 8002272:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8002276:	2002      	movs	r0, #2
}
 8002278:	bd38      	pop	{r3, r4, r5, pc}
 800227a:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 800227c:	2002      	movs	r0, #2
 800227e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002282:	2000      	movs	r0, #0
 8002284:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002286:	4620      	mov	r0, r4
 8002288:	f7ff ff01 	bl	800208e <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800228c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800228e:	233f      	movs	r3, #63	; 0x3f
 8002290:	4093      	lsls	r3, r2
 8002292:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002294:	6822      	ldr	r2, [r4, #0]
 8002296:	6813      	ldr	r3, [r2, #0]
 8002298:	f043 0316 	orr.w	r3, r3, #22
 800229c:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800229e:	6822      	ldr	r2, [r4, #0]
 80022a0:	6953      	ldr	r3, [r2, #20]
 80022a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a6:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80022a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022aa:	b123      	cbz	r3, 80022b6 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 80022ac:	6822      	ldr	r2, [r4, #0]
 80022ae:	6813      	ldr	r3, [r2, #0]
 80022b0:	f043 0308 	orr.w	r3, r3, #8
 80022b4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80022b6:	6822      	ldr	r2, [r4, #0]
 80022b8:	6813      	ldr	r3, [r2, #0]
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022c0:	2000      	movs	r0, #0
 80022c2:	e7d9      	b.n	8002278 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 80022c4:	2002      	movs	r0, #2
 80022c6:	e7d7      	b.n	8002278 <HAL_DMA_Start_IT+0x24>

080022c8 <HAL_DMA_Abort>:
{
 80022c8:	b570      	push	{r4, r5, r6, lr}
 80022ca:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022cc:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80022ce:	f7ff fe5f 	bl	8001f90 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022d2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d006      	beq.n	80022ea <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80022e0:	2300      	movs	r3, #0
 80022e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80022e6:	2001      	movs	r0, #1
}
 80022e8:	bd70      	pop	{r4, r5, r6, pc}
 80022ea:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ec:	6822      	ldr	r2, [r4, #0]
 80022ee:	6813      	ldr	r3, [r2, #0]
 80022f0:	f023 0316 	bic.w	r3, r3, #22
 80022f4:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022f6:	6822      	ldr	r2, [r4, #0]
 80022f8:	6953      	ldr	r3, [r2, #20]
 80022fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022fe:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002300:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002302:	b1e3      	cbz	r3, 800233e <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002304:	6822      	ldr	r2, [r4, #0]
 8002306:	6813      	ldr	r3, [r2, #0]
 8002308:	f023 0308 	bic.w	r3, r3, #8
 800230c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800230e:	6822      	ldr	r2, [r4, #0]
 8002310:	6813      	ldr	r3, [r2, #0]
 8002312:	f023 0301 	bic.w	r3, r3, #1
 8002316:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f013 0f01 	tst.w	r3, #1
 8002320:	d011      	beq.n	8002346 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002322:	f7ff fe35 	bl	8001f90 <HAL_GetTick>
 8002326:	1b40      	subs	r0, r0, r5
 8002328:	2805      	cmp	r0, #5
 800232a:	d9f5      	bls.n	8002318 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800232c:	2320      	movs	r3, #32
 800232e:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8002330:	2300      	movs	r3, #0
 8002332:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002336:	2003      	movs	r0, #3
 8002338:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 800233c:	e7d4      	b.n	80022e8 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800233e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1df      	bne.n	8002304 <HAL_DMA_Abort+0x3c>
 8002344:	e7e3      	b.n	800230e <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002346:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002348:	233f      	movs	r3, #63	; 0x3f
 800234a:	4093      	lsls	r3, r2
 800234c:	60b3      	str	r3, [r6, #8]
    __HAL_UNLOCK(hdma);
 800234e:	2000      	movs	r0, #0
 8002350:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8002354:	2301      	movs	r3, #1
 8002356:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800235a:	e7c5      	b.n	80022e8 <HAL_DMA_Abort+0x20>

0800235c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800235c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d003      	beq.n	800236e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800236a:	2001      	movs	r0, #1
 800236c:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800236e:	2305      	movs	r3, #5
 8002370:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002374:	6802      	ldr	r2, [r0, #0]
 8002376:	6813      	ldr	r3, [r2, #0]
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800237e:	2000      	movs	r0, #0
}
 8002380:	4770      	bx	lr
	...

08002384 <HAL_DMA_IRQHandler>:
{
 8002384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002386:	b083      	sub	sp, #12
 8002388:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800238e:	4b72      	ldr	r3, [pc, #456]	; (8002558 <HAL_DMA_IRQHandler+0x1d4>)
 8002390:	681d      	ldr	r5, [r3, #0]
 8002392:	4b72      	ldr	r3, [pc, #456]	; (800255c <HAL_DMA_IRQHandler+0x1d8>)
 8002394:	fba3 3505 	umull	r3, r5, r3, r5
 8002398:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800239a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 800239c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800239e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80023a0:	2308      	movs	r3, #8
 80023a2:	4093      	lsls	r3, r2
 80023a4:	4233      	tst	r3, r6
 80023a6:	d010      	beq.n	80023ca <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023a8:	6803      	ldr	r3, [r0, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	f012 0f04 	tst.w	r2, #4
 80023b0:	d00b      	beq.n	80023ca <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	f022 0204 	bic.w	r2, r2, #4
 80023b8:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023ba:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80023bc:	2308      	movs	r3, #8
 80023be:	4093      	lsls	r3, r2
 80023c0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023c2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80023cc:	2301      	movs	r3, #1
 80023ce:	4093      	lsls	r3, r2
 80023d0:	4233      	tst	r3, r6
 80023d2:	d009      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023d4:	6822      	ldr	r2, [r4, #0]
 80023d6:	6952      	ldr	r2, [r2, #20]
 80023d8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80023dc:	d004      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023de:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80023e2:	f043 0302 	orr.w	r3, r3, #2
 80023e6:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023e8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80023ea:	2304      	movs	r3, #4
 80023ec:	4093      	lsls	r3, r2
 80023ee:	4233      	tst	r3, r6
 80023f0:	d009      	beq.n	8002406 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023f2:	6822      	ldr	r2, [r4, #0]
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	f012 0f02 	tst.w	r2, #2
 80023fa:	d004      	beq.n	8002406 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023fc:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002400:	f043 0304 	orr.w	r3, r3, #4
 8002404:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002406:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002408:	2310      	movs	r3, #16
 800240a:	4093      	lsls	r3, r2
 800240c:	4233      	tst	r3, r6
 800240e:	d024      	beq.n	800245a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002410:	6822      	ldr	r2, [r4, #0]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	f012 0f08 	tst.w	r2, #8
 8002418:	d01f      	beq.n	800245a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800241a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800241c:	6823      	ldr	r3, [r4, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002424:	d00d      	beq.n	8002442 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800242c:	d104      	bne.n	8002438 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800242e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002430:	b19b      	cbz	r3, 800245a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8002432:	4620      	mov	r0, r4
 8002434:	4798      	blx	r3
 8002436:	e010      	b.n	800245a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002438:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800243a:	b173      	cbz	r3, 800245a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 800243c:	4620      	mov	r0, r4
 800243e:	4798      	blx	r3
 8002440:	e00b      	b.n	800245a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002448:	d103      	bne.n	8002452 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	f022 0208 	bic.w	r2, r2, #8
 8002450:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002452:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002454:	b10b      	cbz	r3, 800245a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8002456:	4620      	mov	r0, r4
 8002458:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800245a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800245c:	2320      	movs	r3, #32
 800245e:	4093      	lsls	r3, r2
 8002460:	4233      	tst	r3, r6
 8002462:	d055      	beq.n	8002510 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002464:	6822      	ldr	r2, [r4, #0]
 8002466:	6812      	ldr	r2, [r2, #0]
 8002468:	f012 0f10 	tst.w	r2, #16
 800246c:	d050      	beq.n	8002510 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800246e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002470:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b05      	cmp	r3, #5
 8002478:	d00e      	beq.n	8002498 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800247a:	6823      	ldr	r3, [r4, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002482:	d033      	beq.n	80024ec <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800248a:	d12a      	bne.n	80024e2 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 800248c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800248e:	2b00      	cmp	r3, #0
 8002490:	d03e      	beq.n	8002510 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8002492:	4620      	mov	r0, r4
 8002494:	4798      	blx	r3
 8002496:	e03b      	b.n	8002510 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002498:	6822      	ldr	r2, [r4, #0]
 800249a:	6813      	ldr	r3, [r2, #0]
 800249c:	f023 0316 	bic.w	r3, r3, #22
 80024a0:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024a2:	6822      	ldr	r2, [r4, #0]
 80024a4:	6953      	ldr	r3, [r2, #20]
 80024a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024aa:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024ae:	b1a3      	cbz	r3, 80024da <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024b0:	6822      	ldr	r2, [r4, #0]
 80024b2:	6813      	ldr	r3, [r2, #0]
 80024b4:	f023 0308 	bic.w	r3, r3, #8
 80024b8:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80024bc:	233f      	movs	r3, #63	; 0x3f
 80024be:	4093      	lsls	r3, r2
 80024c0:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80024c2:	2300      	movs	r3, #0
 80024c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80024c8:	2301      	movs	r3, #1
 80024ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80024ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d03f      	beq.n	8002554 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80024d4:	4620      	mov	r0, r4
 80024d6:	4798      	blx	r3
 80024d8:	e03c      	b.n	8002554 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1e7      	bne.n	80024b0 <HAL_DMA_IRQHandler+0x12c>
 80024e0:	e7eb      	b.n	80024ba <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80024e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80024e4:	b1a3      	cbz	r3, 8002510 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80024e6:	4620      	mov	r0, r4
 80024e8:	4798      	blx	r3
 80024ea:	e011      	b.n	8002510 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	f412 7f80 	tst.w	r2, #256	; 0x100
 80024f2:	d109      	bne.n	8002508 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	f022 0210 	bic.w	r2, r2, #16
 80024fa:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80024fc:	2300      	movs	r3, #0
 80024fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002502:	2301      	movs	r3, #1
 8002504:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002508:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800250a:	b10b      	cbz	r3, 8002510 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 800250c:	4620      	mov	r0, r4
 800250e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002510:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002512:	b1fb      	cbz	r3, 8002554 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002514:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002516:	f013 0f01 	tst.w	r3, #1
 800251a:	d017      	beq.n	800254c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800251c:	2305      	movs	r3, #5
 800251e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002522:	6822      	ldr	r2, [r4, #0]
 8002524:	6813      	ldr	r3, [r2, #0]
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800252c:	9b01      	ldr	r3, [sp, #4]
 800252e:	3301      	adds	r3, #1
 8002530:	9301      	str	r3, [sp, #4]
 8002532:	42ab      	cmp	r3, r5
 8002534:	d804      	bhi.n	8002540 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002536:	6823      	ldr	r3, [r4, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f013 0f01 	tst.w	r3, #1
 800253e:	d1f5      	bne.n	800252c <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8002540:	2300      	movs	r3, #0
 8002542:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002546:	2301      	movs	r3, #1
 8002548:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800254c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800254e:	b10b      	cbz	r3, 8002554 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8002550:	4620      	mov	r0, r4
 8002552:	4798      	blx	r3
}
 8002554:	b003      	add	sp, #12
 8002556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002558:	20000040 	.word	0x20000040
 800255c:	1b4e81b5 	.word	0x1b4e81b5

08002560 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002560:	4b27      	ldr	r3, [pc, #156]	; (8002600 <FLASH_SetErrorCode+0xa0>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f013 0f10 	tst.w	r3, #16
 8002568:	d007      	beq.n	800257a <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800256a:	4a26      	ldr	r2, [pc, #152]	; (8002604 <FLASH_SetErrorCode+0xa4>)
 800256c:	69d3      	ldr	r3, [r2, #28]
 800256e:	f043 0310 	orr.w	r3, r3, #16
 8002572:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002574:	4b22      	ldr	r3, [pc, #136]	; (8002600 <FLASH_SetErrorCode+0xa0>)
 8002576:	2210      	movs	r2, #16
 8002578:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800257a:	4b21      	ldr	r3, [pc, #132]	; (8002600 <FLASH_SetErrorCode+0xa0>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f013 0f20 	tst.w	r3, #32
 8002582:	d007      	beq.n	8002594 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002584:	4a1f      	ldr	r2, [pc, #124]	; (8002604 <FLASH_SetErrorCode+0xa4>)
 8002586:	69d3      	ldr	r3, [r2, #28]
 8002588:	f043 0308 	orr.w	r3, r3, #8
 800258c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800258e:	4b1c      	ldr	r3, [pc, #112]	; (8002600 <FLASH_SetErrorCode+0xa0>)
 8002590:	2220      	movs	r2, #32
 8002592:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002594:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <FLASH_SetErrorCode+0xa0>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f013 0f40 	tst.w	r3, #64	; 0x40
 800259c:	d007      	beq.n	80025ae <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800259e:	4a19      	ldr	r2, [pc, #100]	; (8002604 <FLASH_SetErrorCode+0xa4>)
 80025a0:	69d3      	ldr	r3, [r2, #28]
 80025a2:	f043 0304 	orr.w	r3, r3, #4
 80025a6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80025a8:	4b15      	ldr	r3, [pc, #84]	; (8002600 <FLASH_SetErrorCode+0xa0>)
 80025aa:	2240      	movs	r2, #64	; 0x40
 80025ac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <FLASH_SetErrorCode+0xa0>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80025b6:	d007      	beq.n	80025c8 <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80025b8:	4a12      	ldr	r2, [pc, #72]	; (8002604 <FLASH_SetErrorCode+0xa4>)
 80025ba:	69d3      	ldr	r3, [r2, #28]
 80025bc:	f043 0302 	orr.w	r3, r3, #2
 80025c0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80025c2:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <FLASH_SetErrorCode+0xa0>)
 80025c4:	2280      	movs	r2, #128	; 0x80
 80025c6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80025c8:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <FLASH_SetErrorCode+0xa0>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80025d0:	d008      	beq.n	80025e4 <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80025d2:	4a0c      	ldr	r2, [pc, #48]	; (8002604 <FLASH_SetErrorCode+0xa4>)
 80025d4:	69d3      	ldr	r3, [r2, #28]
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <FLASH_SetErrorCode+0xa0>)
 80025de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80025e4:	4b06      	ldr	r3, [pc, #24]	; (8002600 <FLASH_SetErrorCode+0xa0>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f013 0f02 	tst.w	r3, #2
 80025ec:	d007      	beq.n	80025fe <FLASH_SetErrorCode+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80025ee:	4a05      	ldr	r2, [pc, #20]	; (8002604 <FLASH_SetErrorCode+0xa4>)
 80025f0:	69d3      	ldr	r3, [r2, #28]
 80025f2:	f043 0320 	orr.w	r3, r3, #32
 80025f6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80025f8:	4b01      	ldr	r3, [pc, #4]	; (8002600 <FLASH_SetErrorCode+0xa0>)
 80025fa:	2202      	movs	r2, #2
 80025fc:	60da      	str	r2, [r3, #12]
  }
}
 80025fe:	4770      	bx	lr
 8002600:	40023c00 	.word	0x40023c00
 8002604:	200043e0 	.word	0x200043e0

08002608 <HAL_FLASH_EndOfOperationCallback>:
}
 8002608:	4770      	bx	lr

0800260a <HAL_FLASH_OperationErrorCallback>:
}
 800260a:	4770      	bx	lr

0800260c <HAL_FLASH_IRQHandler>:
{
 800260c:	b510      	push	{r4, lr}
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800260e:	4b3a      	ldr	r3, [pc, #232]	; (80026f8 <HAL_FLASH_IRQHandler+0xec>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 8002616:	d013      	beq.n	8002640 <HAL_FLASH_IRQHandler+0x34>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002618:	4b38      	ldr	r3, [pc, #224]	; (80026fc <HAL_FLASH_IRQHandler+0xf0>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b01      	cmp	r3, #1
 8002620:	d03b      	beq.n	800269a <HAL_FLASH_IRQHandler+0x8e>
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002622:	4b36      	ldr	r3, [pc, #216]	; (80026fc <HAL_FLASH_IRQHandler+0xf0>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d03c      	beq.n	80026a6 <HAL_FLASH_IRQHandler+0x9a>
      addresstmp = pFlash.Address;
 800262c:	4b33      	ldr	r3, [pc, #204]	; (80026fc <HAL_FLASH_IRQHandler+0xf0>)
 800262e:	695c      	ldr	r4, [r3, #20]
    FLASH_SetErrorCode();
 8002630:	f7ff ff96 	bl	8002560 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002634:	4620      	mov	r0, r4
 8002636:	f7ff ffe8 	bl	800260a <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800263a:	4b30      	ldr	r3, [pc, #192]	; (80026fc <HAL_FLASH_IRQHandler+0xf0>)
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002640:	4b2d      	ldr	r3, [pc, #180]	; (80026f8 <HAL_FLASH_IRQHandler+0xec>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f013 0f01 	tst.w	r3, #1
 8002648:	d013      	beq.n	8002672 <HAL_FLASH_IRQHandler+0x66>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800264a:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <HAL_FLASH_IRQHandler+0xec>)
 800264c:	2201      	movs	r2, #1
 800264e:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8002650:	4b2a      	ldr	r3, [pc, #168]	; (80026fc <HAL_FLASH_IRQHandler+0xf0>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	4293      	cmp	r3, r2
 8002658:	d028      	beq.n	80026ac <HAL_FLASH_IRQHandler+0xa0>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800265a:	4b28      	ldr	r3, [pc, #160]	; (80026fc <HAL_FLASH_IRQHandler+0xf0>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d041      	beq.n	80026e8 <HAL_FLASH_IRQHandler+0xdc>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002664:	4b25      	ldr	r3, [pc, #148]	; (80026fc <HAL_FLASH_IRQHandler+0xf0>)
 8002666:	6958      	ldr	r0, [r3, #20]
 8002668:	f7ff ffce 	bl	8002608 <HAL_FLASH_EndOfOperationCallback>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800266c:	4b23      	ldr	r3, [pc, #140]	; (80026fc <HAL_FLASH_IRQHandler+0xf0>)
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002672:	4b22      	ldr	r3, [pc, #136]	; (80026fc <HAL_FLASH_IRQHandler+0xf0>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	b97b      	cbnz	r3, 8002698 <HAL_FLASH_IRQHandler+0x8c>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8002678:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <HAL_FLASH_IRQHandler+0xec>)
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002680:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002688:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002690:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 8002692:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <HAL_FLASH_IRQHandler+0xf0>)
 8002694:	2200      	movs	r2, #0
 8002696:	761a      	strb	r2, [r3, #24]
}
 8002698:	bd10      	pop	{r4, pc}
      addresstmp = pFlash.Sector;
 800269a:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HAL_FLASH_IRQHandler+0xf0>)
 800269c:	68dc      	ldr	r4, [r3, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 800269e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026a2:	60da      	str	r2, [r3, #12]
 80026a4:	e7c4      	b.n	8002630 <HAL_FLASH_IRQHandler+0x24>
      addresstmp = pFlash.Bank;
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <HAL_FLASH_IRQHandler+0xf0>)
 80026a8:	691c      	ldr	r4, [r3, #16]
 80026aa:	e7c1      	b.n	8002630 <HAL_FLASH_IRQHandler+0x24>
      pFlash.NbSectorsToErase--;
 80026ac:	4b13      	ldr	r3, [pc, #76]	; (80026fc <HAL_FLASH_IRQHandler+0xf0>)
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	3a01      	subs	r2, #1
 80026b2:	605a      	str	r2, [r3, #4]
      if(pFlash.NbSectorsToErase != 0U)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	b15b      	cbz	r3, 80026d0 <HAL_FLASH_IRQHandler+0xc4>
        addresstmp = pFlash.Sector;
 80026b8:	4c10      	ldr	r4, [pc, #64]	; (80026fc <HAL_FLASH_IRQHandler+0xf0>)
 80026ba:	68e0      	ldr	r0, [r4, #12]
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80026bc:	f7ff ffa4 	bl	8002608 <HAL_FLASH_EndOfOperationCallback>
        pFlash.Sector++;
 80026c0:	68e3      	ldr	r3, [r4, #12]
 80026c2:	3301      	adds	r3, #1
 80026c4:	60e3      	str	r3, [r4, #12]
        addresstmp = pFlash.Sector;
 80026c6:	68e0      	ldr	r0, [r4, #12]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 80026c8:	7a21      	ldrb	r1, [r4, #8]
 80026ca:	f000 f819 	bl	8002700 <FLASH_Erase_Sector>
 80026ce:	e7d0      	b.n	8002672 <HAL_FLASH_IRQHandler+0x66>
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 80026d0:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <HAL_FLASH_IRQHandler+0xf0>)
 80026d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80026d6:	60dc      	str	r4, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
        FLASH_FlushCaches() ;
 80026dc:	f000 f83c 	bl	8002758 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80026e0:	4620      	mov	r0, r4
 80026e2:	f7ff ff91 	bl	8002608 <HAL_FLASH_EndOfOperationCallback>
 80026e6:	e7c4      	b.n	8002672 <HAL_FLASH_IRQHandler+0x66>
        FLASH_FlushCaches() ;
 80026e8:	f000 f836 	bl	8002758 <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <HAL_FLASH_IRQHandler+0xf0>)
 80026ee:	6918      	ldr	r0, [r3, #16]
 80026f0:	f7ff ff8a 	bl	8002608 <HAL_FLASH_EndOfOperationCallback>
 80026f4:	e7ba      	b.n	800266c <HAL_FLASH_IRQHandler+0x60>
 80026f6:	bf00      	nop
 80026f8:	40023c00 	.word	0x40023c00
 80026fc:	200043e0 	.word	0x200043e0

08002700 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002700:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002702:	b149      	cbz	r1, 8002718 <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002704:	2901      	cmp	r1, #1
 8002706:	d021      	beq.n	800274c <FLASH_Erase_Sector+0x4c>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002708:	2902      	cmp	r1, #2
 800270a:	d002      	beq.n	8002712 <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800270c:	f44f 7440 	mov.w	r4, #768	; 0x300
 8002710:	e003      	b.n	800271a <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_WORD;
 8002712:	f44f 7400 	mov.w	r4, #512	; 0x200
 8002716:	e000      	b.n	800271a <FLASH_Erase_Sector+0x1a>
     tmp_psize = FLASH_PSIZE_BYTE;
 8002718:	2400      	movs	r4, #0
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <FLASH_Erase_Sector+0x54>)
 800271c:	6919      	ldr	r1, [r3, #16]
 800271e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002722:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 8002724:	691a      	ldr	r2, [r3, #16]
 8002726:	4322      	orrs	r2, r4
 8002728:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002730:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8002738:	f040 0002 	orr.w	r0, r0, #2
 800273c:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002744:	611a      	str	r2, [r3, #16]
}
 8002746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800274a:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800274c:	f44f 7480 	mov.w	r4, #256	; 0x100
 8002750:	e7e3      	b.n	800271a <FLASH_Erase_Sector+0x1a>
 8002752:	bf00      	nop
 8002754:	40023c00 	.word	0x40023c00

08002758 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002758:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <FLASH_FlushCaches+0x5c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002760:	d010      	beq.n	8002784 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002762:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <FLASH_FlushCaches+0x5c>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800276a:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800277a:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002782:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <FLASH_FlushCaches+0x5c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800278c:	d010      	beq.n	80027b0 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <FLASH_FlushCaches+0x5c>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002796:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027a6:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027ae:	601a      	str	r2, [r3, #0]
  }
}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40023c00 	.word	0x40023c00

080027b8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027b8:	2300      	movs	r3, #0
 80027ba:	2b0f      	cmp	r3, #15
 80027bc:	f200 80c5 	bhi.w	800294a <HAL_GPIO_Init+0x192>
{
 80027c0:	b4f0      	push	{r4, r5, r6, r7}
 80027c2:	b082      	sub	sp, #8
 80027c4:	e039      	b.n	800283a <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027c6:	2204      	movs	r2, #4
 80027c8:	e000      	b.n	80027cc <HAL_GPIO_Init+0x14>
 80027ca:	2200      	movs	r2, #0
 80027cc:	40b2      	lsls	r2, r6
 80027ce:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d0:	3402      	adds	r4, #2
 80027d2:	4e5e      	ldr	r6, [pc, #376]	; (800294c <HAL_GPIO_Init+0x194>)
 80027d4:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d8:	4a5d      	ldr	r2, [pc, #372]	; (8002950 <HAL_GPIO_Init+0x198>)
 80027da:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80027dc:	43ea      	mvns	r2, r5
 80027de:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027e2:	684f      	ldr	r7, [r1, #4]
 80027e4:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80027e8:	d001      	beq.n	80027ee <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80027ea:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80027ee:	4c58      	ldr	r4, [pc, #352]	; (8002950 <HAL_GPIO_Init+0x198>)
 80027f0:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80027f2:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80027f4:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027f8:	684f      	ldr	r7, [r1, #4]
 80027fa:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80027fe:	d001      	beq.n	8002804 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8002800:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002804:	4c52      	ldr	r4, [pc, #328]	; (8002950 <HAL_GPIO_Init+0x198>)
 8002806:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002808:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800280a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800280e:	684f      	ldr	r7, [r1, #4]
 8002810:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002814:	d001      	beq.n	800281a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8002816:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800281a:	4c4d      	ldr	r4, [pc, #308]	; (8002950 <HAL_GPIO_Init+0x198>)
 800281c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 800281e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002820:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002822:	684e      	ldr	r6, [r1, #4]
 8002824:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8002828:	d001      	beq.n	800282e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800282a:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 800282e:	4c48      	ldr	r4, [pc, #288]	; (8002950 <HAL_GPIO_Init+0x198>)
 8002830:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002832:	3301      	adds	r3, #1
 8002834:	2b0f      	cmp	r3, #15
 8002836:	f200 8085 	bhi.w	8002944 <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 800283a:	2201      	movs	r2, #1
 800283c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800283e:	680c      	ldr	r4, [r1, #0]
 8002840:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8002844:	42aa      	cmp	r2, r5
 8002846:	d1f4      	bne.n	8002832 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002848:	684c      	ldr	r4, [r1, #4]
 800284a:	2c02      	cmp	r4, #2
 800284c:	d001      	beq.n	8002852 <HAL_GPIO_Init+0x9a>
 800284e:	2c12      	cmp	r4, #18
 8002850:	d110      	bne.n	8002874 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8002852:	08de      	lsrs	r6, r3, #3
 8002854:	3608      	adds	r6, #8
 8002856:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800285a:	f003 0407 	and.w	r4, r3, #7
 800285e:	00a7      	lsls	r7, r4, #2
 8002860:	240f      	movs	r4, #15
 8002862:	40bc      	lsls	r4, r7
 8002864:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002868:	690c      	ldr	r4, [r1, #16]
 800286a:	40bc      	lsls	r4, r7
 800286c:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8002870:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002874:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002876:	005f      	lsls	r7, r3, #1
 8002878:	2603      	movs	r6, #3
 800287a:	40be      	lsls	r6, r7
 800287c:	43f6      	mvns	r6, r6
 800287e:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002882:	684c      	ldr	r4, [r1, #4]
 8002884:	f004 0403 	and.w	r4, r4, #3
 8002888:	40bc      	lsls	r4, r7
 800288a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800288e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002890:	684c      	ldr	r4, [r1, #4]
 8002892:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8002896:	f1bc 0f01 	cmp.w	ip, #1
 800289a:	d903      	bls.n	80028a4 <HAL_GPIO_Init+0xec>
 800289c:	2c11      	cmp	r4, #17
 800289e:	d001      	beq.n	80028a4 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028a0:	2c12      	cmp	r4, #18
 80028a2:	d110      	bne.n	80028c6 <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 80028a4:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028a6:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028aa:	68cc      	ldr	r4, [r1, #12]
 80028ac:	40bc      	lsls	r4, r7
 80028ae:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 80028b2:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80028b4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b6:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028ba:	684c      	ldr	r4, [r1, #4]
 80028bc:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80028c0:	409c      	lsls	r4, r3
 80028c2:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 80028c4:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80028c6:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028c8:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028ca:	688a      	ldr	r2, [r1, #8]
 80028cc:	40ba      	lsls	r2, r7
 80028ce:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 80028d0:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028d2:	684a      	ldr	r2, [r1, #4]
 80028d4:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80028d8:	d0ab      	beq.n	8002832 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028da:	2200      	movs	r2, #0
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <HAL_GPIO_Init+0x19c>)
 80028e0:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80028e2:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80028e6:	6454      	str	r4, [r2, #68]	; 0x44
 80028e8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028ea:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80028ee:	9201      	str	r2, [sp, #4]
 80028f0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80028f2:	089c      	lsrs	r4, r3, #2
 80028f4:	1ca6      	adds	r6, r4, #2
 80028f6:	4a15      	ldr	r2, [pc, #84]	; (800294c <HAL_GPIO_Init+0x194>)
 80028f8:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028fc:	f003 0203 	and.w	r2, r3, #3
 8002900:	0096      	lsls	r6, r2, #2
 8002902:	220f      	movs	r2, #15
 8002904:	40b2      	lsls	r2, r6
 8002906:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800290a:	4a13      	ldr	r2, [pc, #76]	; (8002958 <HAL_GPIO_Init+0x1a0>)
 800290c:	4290      	cmp	r0, r2
 800290e:	f43f af5c 	beq.w	80027ca <HAL_GPIO_Init+0x12>
 8002912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002916:	4290      	cmp	r0, r2
 8002918:	d00e      	beq.n	8002938 <HAL_GPIO_Init+0x180>
 800291a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800291e:	4290      	cmp	r0, r2
 8002920:	d00c      	beq.n	800293c <HAL_GPIO_Init+0x184>
 8002922:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002926:	4290      	cmp	r0, r2
 8002928:	d00a      	beq.n	8002940 <HAL_GPIO_Init+0x188>
 800292a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800292e:	4290      	cmp	r0, r2
 8002930:	f43f af49 	beq.w	80027c6 <HAL_GPIO_Init+0xe>
 8002934:	2207      	movs	r2, #7
 8002936:	e749      	b.n	80027cc <HAL_GPIO_Init+0x14>
 8002938:	2201      	movs	r2, #1
 800293a:	e747      	b.n	80027cc <HAL_GPIO_Init+0x14>
 800293c:	2202      	movs	r2, #2
 800293e:	e745      	b.n	80027cc <HAL_GPIO_Init+0x14>
 8002940:	2203      	movs	r2, #3
 8002942:	e743      	b.n	80027cc <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8002944:	b002      	add	sp, #8
 8002946:	bcf0      	pop	{r4, r5, r6, r7}
 8002948:	4770      	bx	lr
 800294a:	4770      	bx	lr
 800294c:	40013800 	.word	0x40013800
 8002950:	40013c00 	.word	0x40013c00
 8002954:	40023800 	.word	0x40023800
 8002958:	40020000 	.word	0x40020000

0800295c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800295c:	b912      	cbnz	r2, 8002964 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800295e:	0409      	lsls	r1, r1, #16
 8002960:	6181      	str	r1, [r0, #24]
  }
}
 8002962:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8002964:	6181      	str	r1, [r0, #24]
 8002966:	4770      	bx	lr

08002968 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002968:	4770      	bx	lr
	...

0800296c <HAL_GPIO_EXTI_IRQHandler>:
{
 800296c:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	4203      	tst	r3, r0
 8002974:	d100      	bne.n	8002978 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8002976:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002978:	4b02      	ldr	r3, [pc, #8]	; (8002984 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800297a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800297c:	f7ff fff4 	bl	8002968 <HAL_GPIO_EXTI_Callback>
}
 8002980:	e7f9      	b.n	8002976 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002982:	bf00      	nop
 8002984:	40013c00 	.word	0x40013c00

08002988 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002988:	2800      	cmp	r0, #0
 800298a:	f000 80be 	beq.w	8002b0a <HAL_I2C_Init+0x182>
{
 800298e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002990:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002992:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002996:	2b00      	cmp	r3, #0
 8002998:	d06b      	beq.n	8002a72 <HAL_I2C_Init+0xea>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800299a:	2324      	movs	r3, #36	; 0x24
 800299c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029a0:	6822      	ldr	r2, [r4, #0]
 80029a2:	6813      	ldr	r3, [r2, #0]
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029aa:	f000 fba7 	bl	80030fc <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029ae:	6862      	ldr	r2, [r4, #4]
 80029b0:	4b58      	ldr	r3, [pc, #352]	; (8002b14 <HAL_I2C_Init+0x18c>)
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d862      	bhi.n	8002a7c <HAL_I2C_Init+0xf4>
 80029b6:	4b58      	ldr	r3, [pc, #352]	; (8002b18 <HAL_I2C_Init+0x190>)
 80029b8:	4298      	cmp	r0, r3
 80029ba:	bf8c      	ite	hi
 80029bc:	2300      	movhi	r3, #0
 80029be:	2301      	movls	r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f040 80a4 	bne.w	8002b0e <HAL_I2C_Init+0x186>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029c6:	4b55      	ldr	r3, [pc, #340]	; (8002b1c <HAL_I2C_Init+0x194>)
 80029c8:	fba3 2300 	umull	r2, r3, r3, r0
 80029cc:	0c9b      	lsrs	r3, r3, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ce:	6821      	ldr	r1, [r4, #0]
 80029d0:	684a      	ldr	r2, [r1, #4]
 80029d2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80029d6:	431a      	orrs	r2, r3
 80029d8:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029da:	6825      	ldr	r5, [r4, #0]
 80029dc:	6a2a      	ldr	r2, [r5, #32]
 80029de:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80029e2:	6866      	ldr	r6, [r4, #4]
 80029e4:	494b      	ldr	r1, [pc, #300]	; (8002b14 <HAL_I2C_Init+0x18c>)
 80029e6:	428e      	cmp	r6, r1
 80029e8:	d84e      	bhi.n	8002a88 <HAL_I2C_Init+0x100>
 80029ea:	3301      	adds	r3, #1
 80029ec:	4313      	orrs	r3, r2
 80029ee:	622b      	str	r3, [r5, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029f0:	6825      	ldr	r5, [r4, #0]
 80029f2:	69e9      	ldr	r1, [r5, #28]
 80029f4:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80029f8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80029fc:	6863      	ldr	r3, [r4, #4]
 80029fe:	4a45      	ldr	r2, [pc, #276]	; (8002b14 <HAL_I2C_Init+0x18c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d84b      	bhi.n	8002a9c <HAL_I2C_Init+0x114>
 8002a04:	3801      	subs	r0, #1
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	bf38      	it	cc
 8002a16:	2304      	movcc	r3, #4
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	61eb      	str	r3, [r5, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a1c:	6821      	ldr	r1, [r4, #0]
 8002a1e:	680b      	ldr	r3, [r1, #0]
 8002a20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a24:	69e2      	ldr	r2, [r4, #28]
 8002a26:	6a20      	ldr	r0, [r4, #32]
 8002a28:	4302      	orrs	r2, r0
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a2e:	6821      	ldr	r1, [r4, #0]
 8002a30:	688b      	ldr	r3, [r1, #8]
 8002a32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a3a:	6922      	ldr	r2, [r4, #16]
 8002a3c:	68e0      	ldr	r0, [r4, #12]
 8002a3e:	4302      	orrs	r2, r0
 8002a40:	4313      	orrs	r3, r2
 8002a42:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a44:	6821      	ldr	r1, [r4, #0]
 8002a46:	68cb      	ldr	r3, [r1, #12]
 8002a48:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a4c:	6962      	ldr	r2, [r4, #20]
 8002a4e:	69a0      	ldr	r0, [r4, #24]
 8002a50:	4302      	orrs	r2, r0
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a56:	6822      	ldr	r2, [r4, #0]
 8002a58:	6813      	ldr	r3, [r2, #0]
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a60:	2000      	movs	r0, #0
 8002a62:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a64:	2320      	movs	r3, #32
 8002a66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a6a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 8002a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002a72:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002a76:	f004 fbfb 	bl	8007270 <HAL_I2C_MspInit>
 8002a7a:	e78e      	b.n	800299a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a7c:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <HAL_I2C_Init+0x198>)
 8002a7e:	4298      	cmp	r0, r3
 8002a80:	bf8c      	ite	hi
 8002a82:	2300      	movhi	r3, #0
 8002a84:	2301      	movls	r3, #1
 8002a86:	e79b      	b.n	80029c0 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a88:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4924      	ldr	r1, [pc, #144]	; (8002b24 <HAL_I2C_Init+0x19c>)
 8002a92:	fba1 1303 	umull	r1, r3, r1, r3
 8002a96:	099b      	lsrs	r3, r3, #6
 8002a98:	3301      	adds	r3, #1
 8002a9a:	e7a7      	b.n	80029ec <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a9c:	68a2      	ldr	r2, [r4, #8]
 8002a9e:	b9ba      	cbnz	r2, 8002ad0 <HAL_I2C_Init+0x148>
 8002aa0:	1e46      	subs	r6, r0, #1
 8002aa2:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8002aa6:	fbb6 f6f7 	udiv	r6, r6, r7
 8002aaa:	3601      	adds	r6, #1
 8002aac:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8002ab0:	fab6 f686 	clz	r6, r6
 8002ab4:	0976      	lsrs	r6, r6, #5
 8002ab6:	bb36      	cbnz	r6, 8002b06 <HAL_I2C_Init+0x17e>
 8002ab8:	b9c2      	cbnz	r2, 8002aec <HAL_I2C_Init+0x164>
 8002aba:	3801      	subs	r0, #1
 8002abc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002ac0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002aca:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8002ace:	e7a3      	b.n	8002a18 <HAL_I2C_Init+0x90>
 8002ad0:	1e46      	subs	r6, r0, #1
 8002ad2:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8002ad6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8002ada:	fbb6 f6f7 	udiv	r6, r6, r7
 8002ade:	3601      	adds	r6, #1
 8002ae0:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8002ae4:	fab6 f686 	clz	r6, r6
 8002ae8:	0976      	lsrs	r6, r6, #5
 8002aea:	e7e4      	b.n	8002ab6 <HAL_I2C_Init+0x12e>
 8002aec:	3801      	subs	r0, #1
 8002aee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002af2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002af6:	fbb0 f2f3 	udiv	r2, r0, r3
 8002afa:	3201      	adds	r2, #1
 8002afc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002b00:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8002b04:	e788      	b.n	8002a18 <HAL_I2C_Init+0x90>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e786      	b.n	8002a18 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002b0a:	2001      	movs	r0, #1
}
 8002b0c:	4770      	bx	lr
    return HAL_ERROR;
 8002b0e:	2001      	movs	r0, #1
 8002b10:	e7ae      	b.n	8002a70 <HAL_I2C_Init+0xe8>
 8002b12:	bf00      	nop
 8002b14:	000186a0 	.word	0x000186a0
 8002b18:	001e847f 	.word	0x001e847f
 8002b1c:	431bde83 	.word	0x431bde83
 8002b20:	003d08ff 	.word	0x003d08ff
 8002b24:	10624dd3 	.word	0x10624dd3

08002b28 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	f000 81bb 	beq.w	8002ea4 <HAL_RCC_OscConfig+0x37c>
{
 8002b2e:	b570      	push	{r4, r5, r6, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b34:	6803      	ldr	r3, [r0, #0]
 8002b36:	f013 0f01 	tst.w	r3, #1
 8002b3a:	d03b      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b3c:	4ba7      	ldr	r3, [pc, #668]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 030c 	and.w	r3, r3, #12
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d02c      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b48:	4ba4      	ldr	r3, [pc, #656]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d021      	beq.n	8002b98 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b54:	6863      	ldr	r3, [r4, #4]
 8002b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5a:	d04f      	beq.n	8002bfc <HAL_RCC_OscConfig+0xd4>
 8002b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b60:	d052      	beq.n	8002c08 <HAL_RCC_OscConfig+0xe0>
 8002b62:	4b9e      	ldr	r3, [pc, #632]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b72:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b74:	6863      	ldr	r3, [r4, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d050      	beq.n	8002c1c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7a:	f7ff fa09 	bl	8001f90 <HAL_GetTick>
 8002b7e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b80:	4b96      	ldr	r3, [pc, #600]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b88:	d114      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b8a:	f7ff fa01 	bl	8001f90 <HAL_GetTick>
 8002b8e:	1b40      	subs	r0, r0, r5
 8002b90:	2864      	cmp	r0, #100	; 0x64
 8002b92:	d9f5      	bls.n	8002b80 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002b94:	2003      	movs	r0, #3
 8002b96:	e18a      	b.n	8002eae <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b98:	4b90      	ldr	r3, [pc, #576]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002ba0:	d0d8      	beq.n	8002b54 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba2:	4b8e      	ldr	r3, [pc, #568]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002baa:	d003      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x8c>
 8002bac:	6863      	ldr	r3, [r4, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 817a 	beq.w	8002ea8 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	f013 0f02 	tst.w	r3, #2
 8002bba:	d055      	beq.n	8002c68 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bbc:	4b87      	ldr	r3, [pc, #540]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f013 0f0c 	tst.w	r3, #12
 8002bc4:	d03e      	beq.n	8002c44 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bc6:	4b85      	ldr	r3, [pc, #532]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d033      	beq.n	8002c3a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bd2:	68e3      	ldr	r3, [r4, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d068      	beq.n	8002caa <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd8:	4b81      	ldr	r3, [pc, #516]	; (8002de0 <HAL_RCC_OscConfig+0x2b8>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bde:	f7ff f9d7 	bl	8001f90 <HAL_GetTick>
 8002be2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be4:	4b7d      	ldr	r3, [pc, #500]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f013 0f02 	tst.w	r3, #2
 8002bec:	d154      	bne.n	8002c98 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bee:	f7ff f9cf 	bl	8001f90 <HAL_GetTick>
 8002bf2:	1b40      	subs	r0, r0, r5
 8002bf4:	2802      	cmp	r0, #2
 8002bf6:	d9f5      	bls.n	8002be4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002bf8:	2003      	movs	r0, #3
 8002bfa:	e158      	b.n	8002eae <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfc:	4a77      	ldr	r2, [pc, #476]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002bfe:	6813      	ldr	r3, [r2, #0]
 8002c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	e7b5      	b.n	8002b74 <HAL_RCC_OscConfig+0x4c>
 8002c08:	4b74      	ldr	r3, [pc, #464]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	e7ab      	b.n	8002b74 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002c1c:	f7ff f9b8 	bl	8001f90 <HAL_GetTick>
 8002c20:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c22:	4b6e      	ldr	r3, [pc, #440]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c2a:	d0c3      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c2c:	f7ff f9b0 	bl	8001f90 <HAL_GetTick>
 8002c30:	1b40      	subs	r0, r0, r5
 8002c32:	2864      	cmp	r0, #100	; 0x64
 8002c34:	d9f5      	bls.n	8002c22 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002c36:	2003      	movs	r0, #3
 8002c38:	e139      	b.n	8002eae <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c3a:	4b68      	ldr	r3, [pc, #416]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002c42:	d1c6      	bne.n	8002bd2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c44:	4b65      	ldr	r3, [pc, #404]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f013 0f02 	tst.w	r3, #2
 8002c4c:	d004      	beq.n	8002c58 <HAL_RCC_OscConfig+0x130>
 8002c4e:	68e3      	ldr	r3, [r4, #12]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8002c54:	2001      	movs	r0, #1
 8002c56:	e12a      	b.n	8002eae <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c58:	4a60      	ldr	r2, [pc, #384]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002c5a:	6813      	ldr	r3, [r2, #0]
 8002c5c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002c60:	6921      	ldr	r1, [r4, #16]
 8002c62:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c66:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	f013 0f08 	tst.w	r3, #8
 8002c6e:	d040      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c70:	6963      	ldr	r3, [r4, #20]
 8002c72:	b363      	cbz	r3, 8002cce <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c74:	4b5b      	ldr	r3, [pc, #364]	; (8002de4 <HAL_RCC_OscConfig+0x2bc>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7a:	f7ff f989 	bl	8001f90 <HAL_GetTick>
 8002c7e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c80:	4b56      	ldr	r3, [pc, #344]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c84:	f013 0f02 	tst.w	r3, #2
 8002c88:	d133      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c8a:	f7ff f981 	bl	8001f90 <HAL_GetTick>
 8002c8e:	1b40      	subs	r0, r0, r5
 8002c90:	2802      	cmp	r0, #2
 8002c92:	d9f5      	bls.n	8002c80 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002c94:	2003      	movs	r0, #3
 8002c96:	e10a      	b.n	8002eae <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c98:	4a50      	ldr	r2, [pc, #320]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002c9a:	6813      	ldr	r3, [r2, #0]
 8002c9c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002ca0:	6921      	ldr	r1, [r4, #16]
 8002ca2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	e7de      	b.n	8002c68 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002caa:	4b4d      	ldr	r3, [pc, #308]	; (8002de0 <HAL_RCC_OscConfig+0x2b8>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002cb0:	f7ff f96e 	bl	8001f90 <HAL_GetTick>
 8002cb4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb6:	4b49      	ldr	r3, [pc, #292]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f013 0f02 	tst.w	r3, #2
 8002cbe:	d0d3      	beq.n	8002c68 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cc0:	f7ff f966 	bl	8001f90 <HAL_GetTick>
 8002cc4:	1b40      	subs	r0, r0, r5
 8002cc6:	2802      	cmp	r0, #2
 8002cc8:	d9f5      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8002cca:	2003      	movs	r0, #3
 8002ccc:	e0ef      	b.n	8002eae <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cce:	4b45      	ldr	r3, [pc, #276]	; (8002de4 <HAL_RCC_OscConfig+0x2bc>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd4:	f7ff f95c 	bl	8001f90 <HAL_GetTick>
 8002cd8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cda:	4b40      	ldr	r3, [pc, #256]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cde:	f013 0f02 	tst.w	r3, #2
 8002ce2:	d006      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ce4:	f7ff f954 	bl	8001f90 <HAL_GetTick>
 8002ce8:	1b40      	subs	r0, r0, r5
 8002cea:	2802      	cmp	r0, #2
 8002cec:	d9f5      	bls.n	8002cda <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8002cee:	2003      	movs	r0, #3
 8002cf0:	e0dd      	b.n	8002eae <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf2:	6823      	ldr	r3, [r4, #0]
 8002cf4:	f013 0f04 	tst.w	r3, #4
 8002cf8:	d079      	beq.n	8002dee <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cfa:	4b38      	ldr	r3, [pc, #224]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002d02:	d133      	bne.n	8002d6c <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d04:	2300      	movs	r3, #0
 8002d06:	9301      	str	r3, [sp, #4]
 8002d08:	4b34      	ldr	r3, [pc, #208]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002d1c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1e:	4b32      	ldr	r3, [pc, #200]	; (8002de8 <HAL_RCC_OscConfig+0x2c0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d26:	d023      	beq.n	8002d70 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d28:	68a3      	ldr	r3, [r4, #8]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d034      	beq.n	8002d98 <HAL_RCC_OscConfig+0x270>
 8002d2e:	2b05      	cmp	r3, #5
 8002d30:	d038      	beq.n	8002da4 <HAL_RCC_OscConfig+0x27c>
 8002d32:	4b2a      	ldr	r3, [pc, #168]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002d34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d36:	f022 0201 	bic.w	r2, r2, #1
 8002d3a:	671a      	str	r2, [r3, #112]	; 0x70
 8002d3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d3e:	f022 0204 	bic.w	r2, r2, #4
 8002d42:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d44:	68a3      	ldr	r3, [r4, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d036      	beq.n	8002db8 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4a:	f7ff f921 	bl	8001f90 <HAL_GetTick>
 8002d4e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d50:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	f013 0f02 	tst.w	r3, #2
 8002d58:	d148      	bne.n	8002dec <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f7ff f919 	bl	8001f90 <HAL_GetTick>
 8002d5e:	1b80      	subs	r0, r0, r6
 8002d60:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d64:	4298      	cmp	r0, r3
 8002d66:	d9f3      	bls.n	8002d50 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8002d68:	2003      	movs	r0, #3
 8002d6a:	e0a0      	b.n	8002eae <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8002d6c:	2500      	movs	r5, #0
 8002d6e:	e7d6      	b.n	8002d1e <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d70:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <HAL_RCC_OscConfig+0x2c0>)
 8002d72:	6813      	ldr	r3, [r2, #0]
 8002d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d78:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002d7a:	f7ff f909 	bl	8001f90 <HAL_GetTick>
 8002d7e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d80:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <HAL_RCC_OscConfig+0x2c0>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d88:	d1ce      	bne.n	8002d28 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8a:	f7ff f901 	bl	8001f90 <HAL_GetTick>
 8002d8e:	1b80      	subs	r0, r0, r6
 8002d90:	2802      	cmp	r0, #2
 8002d92:	d9f5      	bls.n	8002d80 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8002d94:	2003      	movs	r0, #3
 8002d96:	e08a      	b.n	8002eae <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d98:	4a10      	ldr	r2, [pc, #64]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002d9a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6713      	str	r3, [r2, #112]	; 0x70
 8002da2:	e7cf      	b.n	8002d44 <HAL_RCC_OscConfig+0x21c>
 8002da4:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002da6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002da8:	f042 0204 	orr.w	r2, r2, #4
 8002dac:	671a      	str	r2, [r3, #112]	; 0x70
 8002dae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002db0:	f042 0201 	orr.w	r2, r2, #1
 8002db4:	671a      	str	r2, [r3, #112]	; 0x70
 8002db6:	e7c5      	b.n	8002d44 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db8:	f7ff f8ea 	bl	8001f90 <HAL_GetTick>
 8002dbc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dbe:	4b07      	ldr	r3, [pc, #28]	; (8002ddc <HAL_RCC_OscConfig+0x2b4>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc2:	f013 0f02 	tst.w	r3, #2
 8002dc6:	d011      	beq.n	8002dec <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc8:	f7ff f8e2 	bl	8001f90 <HAL_GetTick>
 8002dcc:	1b80      	subs	r0, r0, r6
 8002dce:	f241 3388 	movw	r3, #5000	; 0x1388
 8002dd2:	4298      	cmp	r0, r3
 8002dd4:	d9f3      	bls.n	8002dbe <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8002dd6:	2003      	movs	r0, #3
 8002dd8:	e069      	b.n	8002eae <HAL_RCC_OscConfig+0x386>
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	42470000 	.word	0x42470000
 8002de4:	42470e80 	.word	0x42470e80
 8002de8:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dec:	b9e5      	cbnz	r5, 8002e28 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dee:	69a3      	ldr	r3, [r4, #24]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d05b      	beq.n	8002eac <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002df4:	4a30      	ldr	r2, [pc, #192]	; (8002eb8 <HAL_RCC_OscConfig+0x390>)
 8002df6:	6892      	ldr	r2, [r2, #8]
 8002df8:	f002 020c 	and.w	r2, r2, #12
 8002dfc:	2a08      	cmp	r2, #8
 8002dfe:	d058      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d017      	beq.n	8002e34 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e04:	4b2d      	ldr	r3, [pc, #180]	; (8002ebc <HAL_RCC_OscConfig+0x394>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7ff f8c1 	bl	8001f90 <HAL_GetTick>
 8002e0e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e10:	4b29      	ldr	r3, [pc, #164]	; (8002eb8 <HAL_RCC_OscConfig+0x390>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e18:	d042      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7ff f8b9 	bl	8001f90 <HAL_GetTick>
 8002e1e:	1b00      	subs	r0, r0, r4
 8002e20:	2802      	cmp	r0, #2
 8002e22:	d9f5      	bls.n	8002e10 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002e24:	2003      	movs	r0, #3
 8002e26:	e042      	b.n	8002eae <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e28:	4a23      	ldr	r2, [pc, #140]	; (8002eb8 <HAL_RCC_OscConfig+0x390>)
 8002e2a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e30:	6413      	str	r3, [r2, #64]	; 0x40
 8002e32:	e7dc      	b.n	8002dee <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8002e34:	4b21      	ldr	r3, [pc, #132]	; (8002ebc <HAL_RCC_OscConfig+0x394>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e3a:	f7ff f8a9 	bl	8001f90 <HAL_GetTick>
 8002e3e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e40:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <HAL_RCC_OscConfig+0x390>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e48:	d006      	beq.n	8002e58 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4a:	f7ff f8a1 	bl	8001f90 <HAL_GetTick>
 8002e4e:	1b40      	subs	r0, r0, r5
 8002e50:	2802      	cmp	r0, #2
 8002e52:	d9f5      	bls.n	8002e40 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002e54:	2003      	movs	r0, #3
 8002e56:	e02a      	b.n	8002eae <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e58:	69e3      	ldr	r3, [r4, #28]
 8002e5a:	6a22      	ldr	r2, [r4, #32]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e60:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002e64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002e66:	0852      	lsrs	r2, r2, #1
 8002e68:	3a01      	subs	r2, #1
 8002e6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e70:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e74:	4a10      	ldr	r2, [pc, #64]	; (8002eb8 <HAL_RCC_OscConfig+0x390>)
 8002e76:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002e78:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <HAL_RCC_OscConfig+0x394>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e7e:	f7ff f887 	bl	8001f90 <HAL_GetTick>
 8002e82:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <HAL_RCC_OscConfig+0x390>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e8c:	d106      	bne.n	8002e9c <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e8e:	f7ff f87f 	bl	8001f90 <HAL_GetTick>
 8002e92:	1b00      	subs	r0, r0, r4
 8002e94:	2802      	cmp	r0, #2
 8002e96:	d9f5      	bls.n	8002e84 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002e98:	2003      	movs	r0, #3
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	e006      	b.n	8002eae <HAL_RCC_OscConfig+0x386>
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	e004      	b.n	8002eae <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8002ea4:	2001      	movs	r0, #1
}
 8002ea6:	4770      	bx	lr
        return HAL_ERROR;
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	e000      	b.n	8002eae <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8002eac:	2000      	movs	r0, #0
}
 8002eae:	b002      	add	sp, #8
 8002eb0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	e7fb      	b.n	8002eae <HAL_RCC_OscConfig+0x386>
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	42470060 	.word	0x42470060

08002ec0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec0:	4b32      	ldr	r3, [pc, #200]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 030c 	and.w	r3, r3, #12
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d05c      	beq.n	8002f86 <HAL_RCC_GetSysClockFreq+0xc6>
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ed0:	482f      	ldr	r0, [pc, #188]	; (8002f90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ed2:	4770      	bx	lr
{
 8002ed4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed8:	4b2c      	ldr	r3, [pc, #176]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002ee6:	d02b      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee8:	4b28      	ldr	r3, [pc, #160]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002ef0:	461e      	mov	r6, r3
 8002ef2:	2700      	movs	r7, #0
 8002ef4:	015c      	lsls	r4, r3, #5
 8002ef6:	2500      	movs	r5, #0
 8002ef8:	1ae4      	subs	r4, r4, r3
 8002efa:	eb65 0507 	sbc.w	r5, r5, r7
 8002efe:	01a9      	lsls	r1, r5, #6
 8002f00:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002f04:	01a0      	lsls	r0, r4, #6
 8002f06:	1b00      	subs	r0, r0, r4
 8002f08:	eb61 0105 	sbc.w	r1, r1, r5
 8002f0c:	00cb      	lsls	r3, r1, #3
 8002f0e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002f12:	00c4      	lsls	r4, r0, #3
 8002f14:	19a0      	adds	r0, r4, r6
 8002f16:	eb43 0107 	adc.w	r1, r3, r7
 8002f1a:	024b      	lsls	r3, r1, #9
 8002f1c:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002f20:	0244      	lsls	r4, r0, #9
 8002f22:	4620      	mov	r0, r4
 8002f24:	4619      	mov	r1, r3
 8002f26:	2300      	movs	r3, #0
 8002f28:	f7fd fec6 	bl	8000cb8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f2c:	4b17      	ldr	r3, [pc, #92]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002f34:	3301      	adds	r3, #1
 8002f36:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002f38:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002f3c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002f48:	461e      	mov	r6, r3
 8002f4a:	2700      	movs	r7, #0
 8002f4c:	015c      	lsls	r4, r3, #5
 8002f4e:	2500      	movs	r5, #0
 8002f50:	1ae4      	subs	r4, r4, r3
 8002f52:	eb65 0507 	sbc.w	r5, r5, r7
 8002f56:	01a9      	lsls	r1, r5, #6
 8002f58:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002f5c:	01a0      	lsls	r0, r4, #6
 8002f5e:	1b00      	subs	r0, r0, r4
 8002f60:	eb61 0105 	sbc.w	r1, r1, r5
 8002f64:	00cb      	lsls	r3, r1, #3
 8002f66:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002f6a:	00c4      	lsls	r4, r0, #3
 8002f6c:	19a0      	adds	r0, r4, r6
 8002f6e:	eb43 0107 	adc.w	r1, r3, r7
 8002f72:	028b      	lsls	r3, r1, #10
 8002f74:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002f78:	0284      	lsls	r4, r0, #10
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f7fd fe9a 	bl	8000cb8 <__aeabi_uldivmod>
 8002f84:	e7d2      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8002f86:	4803      	ldr	r0, [pc, #12]	; (8002f94 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	00f42400 	.word	0x00f42400
 8002f94:	007a1200 	.word	0x007a1200

08002f98 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	f000 809d 	beq.w	80030d8 <HAL_RCC_ClockConfig+0x140>
{
 8002f9e:	b570      	push	{r4, r5, r6, lr}
 8002fa0:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa2:	4b4f      	ldr	r3, [pc, #316]	; (80030e0 <HAL_RCC_ClockConfig+0x148>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	428b      	cmp	r3, r1
 8002fac:	d209      	bcs.n	8002fc2 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fae:	b2cb      	uxtb	r3, r1
 8002fb0:	4a4b      	ldr	r2, [pc, #300]	; (80030e0 <HAL_RCC_ClockConfig+0x148>)
 8002fb2:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb4:	6813      	ldr	r3, [r2, #0]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	428b      	cmp	r3, r1
 8002fbc:	d001      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8002fbe:	2001      	movs	r0, #1
}
 8002fc0:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	f013 0f02 	tst.w	r3, #2
 8002fc8:	d017      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fca:	f013 0f04 	tst.w	r3, #4
 8002fce:	d004      	beq.n	8002fda <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd0:	4a44      	ldr	r2, [pc, #272]	; (80030e4 <HAL_RCC_ClockConfig+0x14c>)
 8002fd2:	6893      	ldr	r3, [r2, #8]
 8002fd4:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fd8:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fda:	6823      	ldr	r3, [r4, #0]
 8002fdc:	f013 0f08 	tst.w	r3, #8
 8002fe0:	d004      	beq.n	8002fec <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe2:	4a40      	ldr	r2, [pc, #256]	; (80030e4 <HAL_RCC_ClockConfig+0x14c>)
 8002fe4:	6893      	ldr	r3, [r2, #8]
 8002fe6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fea:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fec:	4a3d      	ldr	r2, [pc, #244]	; (80030e4 <HAL_RCC_ClockConfig+0x14c>)
 8002fee:	6893      	ldr	r3, [r2, #8]
 8002ff0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ff4:	68a0      	ldr	r0, [r4, #8]
 8002ff6:	4303      	orrs	r3, r0
 8002ff8:	6093      	str	r3, [r2, #8]
 8002ffa:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	f013 0f01 	tst.w	r3, #1
 8003002:	d032      	beq.n	800306a <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003004:	6863      	ldr	r3, [r4, #4]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d021      	beq.n	800304e <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800300a:	1e9a      	subs	r2, r3, #2
 800300c:	2a01      	cmp	r2, #1
 800300e:	d925      	bls.n	800305c <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003010:	4a34      	ldr	r2, [pc, #208]	; (80030e4 <HAL_RCC_ClockConfig+0x14c>)
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	f012 0f02 	tst.w	r2, #2
 8003018:	d060      	beq.n	80030dc <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301a:	4932      	ldr	r1, [pc, #200]	; (80030e4 <HAL_RCC_ClockConfig+0x14c>)
 800301c:	688a      	ldr	r2, [r1, #8]
 800301e:	f022 0203 	bic.w	r2, r2, #3
 8003022:	4313      	orrs	r3, r2
 8003024:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003026:	f7fe ffb3 	bl	8001f90 <HAL_GetTick>
 800302a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302c:	4b2d      	ldr	r3, [pc, #180]	; (80030e4 <HAL_RCC_ClockConfig+0x14c>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	6862      	ldr	r2, [r4, #4]
 8003036:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800303a:	d016      	beq.n	800306a <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800303c:	f7fe ffa8 	bl	8001f90 <HAL_GetTick>
 8003040:	1b80      	subs	r0, r0, r6
 8003042:	f241 3388 	movw	r3, #5000	; 0x1388
 8003046:	4298      	cmp	r0, r3
 8003048:	d9f0      	bls.n	800302c <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 800304a:	2003      	movs	r0, #3
 800304c:	e7b8      	b.n	8002fc0 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304e:	4a25      	ldr	r2, [pc, #148]	; (80030e4 <HAL_RCC_ClockConfig+0x14c>)
 8003050:	6812      	ldr	r2, [r2, #0]
 8003052:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003056:	d1e0      	bne.n	800301a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003058:	2001      	movs	r0, #1
 800305a:	e7b1      	b.n	8002fc0 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305c:	4a21      	ldr	r2, [pc, #132]	; (80030e4 <HAL_RCC_ClockConfig+0x14c>)
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003064:	d1d9      	bne.n	800301a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003066:	2001      	movs	r0, #1
 8003068:	e7aa      	b.n	8002fc0 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800306a:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <HAL_RCC_ClockConfig+0x148>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	42ab      	cmp	r3, r5
 8003074:	d909      	bls.n	800308a <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	b2ea      	uxtb	r2, r5
 8003078:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <HAL_RCC_ClockConfig+0x148>)
 800307a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	42ab      	cmp	r3, r5
 8003084:	d001      	beq.n	800308a <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8003086:	2001      	movs	r0, #1
 8003088:	e79a      	b.n	8002fc0 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	f013 0f04 	tst.w	r3, #4
 8003090:	d006      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003092:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <HAL_RCC_ClockConfig+0x14c>)
 8003094:	6893      	ldr	r3, [r2, #8]
 8003096:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800309a:	68e1      	ldr	r1, [r4, #12]
 800309c:	430b      	orrs	r3, r1
 800309e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	f013 0f08 	tst.w	r3, #8
 80030a6:	d007      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030a8:	4a0e      	ldr	r2, [pc, #56]	; (80030e4 <HAL_RCC_ClockConfig+0x14c>)
 80030aa:	6893      	ldr	r3, [r2, #8]
 80030ac:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80030b0:	6921      	ldr	r1, [r4, #16]
 80030b2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80030b6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030b8:	f7ff ff02 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCC_ClockConfig+0x14c>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80030c4:	4a08      	ldr	r2, [pc, #32]	; (80030e8 <HAL_RCC_ClockConfig+0x150>)
 80030c6:	5cd3      	ldrb	r3, [r2, r3]
 80030c8:	40d8      	lsrs	r0, r3
 80030ca:	4b08      	ldr	r3, [pc, #32]	; (80030ec <HAL_RCC_ClockConfig+0x154>)
 80030cc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80030ce:	2000      	movs	r0, #0
 80030d0:	f004 fa36 	bl	8007540 <HAL_InitTick>
  return HAL_OK;
 80030d4:	2000      	movs	r0, #0
 80030d6:	e773      	b.n	8002fc0 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80030d8:	2001      	movs	r0, #1
}
 80030da:	4770      	bx	lr
        return HAL_ERROR;
 80030dc:	2001      	movs	r0, #1
 80030de:	e76f      	b.n	8002fc0 <HAL_RCC_ClockConfig+0x28>
 80030e0:	40023c00 	.word	0x40023c00
 80030e4:	40023800 	.word	0x40023800
 80030e8:	0800c2a4 	.word	0x0800c2a4
 80030ec:	20000040 	.word	0x20000040

080030f0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80030f0:	4b01      	ldr	r3, [pc, #4]	; (80030f8 <HAL_RCC_GetHCLKFreq+0x8>)
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000040 	.word	0x20000040

080030fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030fc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030fe:	f7ff fff7 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 8003102:	4b04      	ldr	r3, [pc, #16]	; (8003114 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800310a:	4a03      	ldr	r2, [pc, #12]	; (8003118 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800310c:	5cd3      	ldrb	r3, [r2, r3]
}
 800310e:	40d8      	lsrs	r0, r3
 8003110:	bd08      	pop	{r3, pc}
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800
 8003118:	0800c2b4 	.word	0x0800c2b4

0800311c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800311c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800311e:	f7ff ffe7 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 8003122:	4b04      	ldr	r3, [pc, #16]	; (8003134 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800312a:	4a03      	ldr	r2, [pc, #12]	; (8003138 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800312c:	5cd3      	ldrb	r3, [r2, r3]
}
 800312e:	40d8      	lsrs	r0, r3
 8003130:	bd08      	pop	{r3, pc}
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800
 8003138:	0800c2b4 	.word	0x0800c2b4

0800313c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800313c:	230f      	movs	r3, #15
 800313e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <HAL_RCC_GetClockConfig+0x34>)
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	f002 0203 	and.w	r2, r2, #3
 8003148:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003150:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003158:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	08db      	lsrs	r3, r3, #3
 800315e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003162:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003164:	4b03      	ldr	r3, [pc, #12]	; (8003174 <HAL_RCC_GetClockConfig+0x38>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	600b      	str	r3, [r1, #0]
}
 800316e:	4770      	bx	lr
 8003170:	40023800 	.word	0x40023800
 8003174:	40023c00 	.word	0x40023c00

08003178 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317a:	4605      	mov	r5, r0
 800317c:	460f      	mov	r7, r1
 800317e:	4616      	mov	r6, r2
 8003180:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003182:	682b      	ldr	r3, [r5, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	ea37 0303 	bics.w	r3, r7, r3
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	42b3      	cmp	r3, r6
 8003192:	d037      	beq.n	8003204 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003194:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003198:	d0f3      	beq.n	8003182 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800319a:	f7fe fef9 	bl	8001f90 <HAL_GetTick>
 800319e:	9b06      	ldr	r3, [sp, #24]
 80031a0:	1ac0      	subs	r0, r0, r3
 80031a2:	42a0      	cmp	r0, r4
 80031a4:	d201      	bcs.n	80031aa <SPI_WaitFlagStateUntilTimeout+0x32>
 80031a6:	2c00      	cmp	r4, #0
 80031a8:	d1eb      	bne.n	8003182 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031aa:	682a      	ldr	r2, [r5, #0]
 80031ac:	6853      	ldr	r3, [r2, #4]
 80031ae:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80031b2:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031b4:	686b      	ldr	r3, [r5, #4]
 80031b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ba:	d00b      	beq.n	80031d4 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80031be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c2:	d014      	beq.n	80031ee <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031c4:	2301      	movs	r3, #1
 80031c6:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ca:	2300      	movs	r3, #0
 80031cc:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 80031d0:	2003      	movs	r0, #3
 80031d2:	e018      	b.n	8003206 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031d4:	68ab      	ldr	r3, [r5, #8]
 80031d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031da:	d002      	beq.n	80031e2 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e0:	d1ec      	bne.n	80031bc <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 80031e2:	682a      	ldr	r2, [r5, #0]
 80031e4:	6813      	ldr	r3, [r2, #0]
 80031e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	e7e6      	b.n	80031bc <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 80031ee:	682a      	ldr	r2, [r5, #0]
 80031f0:	6813      	ldr	r3, [r2, #0]
 80031f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	682a      	ldr	r2, [r5, #0]
 80031fa:	6813      	ldr	r3, [r2, #0]
 80031fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	e7df      	b.n	80031c4 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8003204:	2000      	movs	r0, #0
}
 8003206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003208 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003208:	b530      	push	{r4, r5, lr}
 800320a:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800320c:	4c16      	ldr	r4, [pc, #88]	; (8003268 <SPI_EndRxTxTransaction+0x60>)
 800320e:	6824      	ldr	r4, [r4, #0]
 8003210:	4d16      	ldr	r5, [pc, #88]	; (800326c <SPI_EndRxTxTransaction+0x64>)
 8003212:	fba5 3404 	umull	r3, r4, r5, r4
 8003216:	0d64      	lsrs	r4, r4, #21
 8003218:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800321c:	fb05 f404 	mul.w	r4, r5, r4
 8003220:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003222:	6844      	ldr	r4, [r0, #4]
 8003224:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8003228:	d00b      	beq.n	8003242 <SPI_EndRxTxTransaction+0x3a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800322a:	9b03      	ldr	r3, [sp, #12]
 800322c:	b1c3      	cbz	r3, 8003260 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 800322e:	9b03      	ldr	r3, [sp, #12]
 8003230:	3b01      	subs	r3, #1
 8003232:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003234:	6803      	ldr	r3, [r0, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f013 0f80 	tst.w	r3, #128	; 0x80
 800323c:	d1f5      	bne.n	800322a <SPI_EndRxTxTransaction+0x22>
  }

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	e00f      	b.n	8003262 <SPI_EndRxTxTransaction+0x5a>
 8003242:	460b      	mov	r3, r1
 8003244:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003246:	9200      	str	r2, [sp, #0]
 8003248:	2200      	movs	r2, #0
 800324a:	2180      	movs	r1, #128	; 0x80
 800324c:	f7ff ff94 	bl	8003178 <SPI_WaitFlagStateUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	b130      	cbz	r0, 8003262 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003254:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003256:	f043 0320 	orr.w	r3, r3, #32
 800325a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e000      	b.n	8003262 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	b005      	add	sp, #20
 8003266:	bd30      	pop	{r4, r5, pc}
 8003268:	20000040 	.word	0x20000040
 800326c:	165e9f81 	.word	0x165e9f81

08003270 <SPI_EndRxTransaction>:
{
 8003270:	b510      	push	{r4, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003276:	6840      	ldr	r0, [r0, #4]
 8003278:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 800327c:	d016      	beq.n	80032ac <SPI_EndRxTransaction+0x3c>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800327e:	6860      	ldr	r0, [r4, #4]
 8003280:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8003284:	d12e      	bne.n	80032e4 <SPI_EndRxTransaction+0x74>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003286:	68a3      	ldr	r3, [r4, #8]
 8003288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328c:	d01b      	beq.n	80032c6 <SPI_EndRxTransaction+0x56>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800328e:	9200      	str	r2, [sp, #0]
 8003290:	460b      	mov	r3, r1
 8003292:	2200      	movs	r2, #0
 8003294:	2180      	movs	r1, #128	; 0x80
 8003296:	4620      	mov	r0, r4
 8003298:	f7ff ff6e 	bl	8003178 <SPI_WaitFlagStateUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	b350      	cbz	r0, 80032f6 <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032a2:	f043 0320 	orr.w	r3, r3, #32
 80032a6:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e024      	b.n	80032f6 <SPI_EndRxTransaction+0x86>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032ac:	68a3      	ldr	r3, [r4, #8]
 80032ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b2:	d002      	beq.n	80032ba <SPI_EndRxTransaction+0x4a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b8:	d1e1      	bne.n	800327e <SPI_EndRxTransaction+0xe>
    __HAL_SPI_DISABLE(hspi);
 80032ba:	6820      	ldr	r0, [r4, #0]
 80032bc:	6803      	ldr	r3, [r0, #0]
 80032be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032c2:	6003      	str	r3, [r0, #0]
 80032c4:	e7db      	b.n	800327e <SPI_EndRxTransaction+0xe>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032c6:	9200      	str	r2, [sp, #0]
 80032c8:	460b      	mov	r3, r1
 80032ca:	2200      	movs	r2, #0
 80032cc:	2101      	movs	r1, #1
 80032ce:	4620      	mov	r0, r4
 80032d0:	f7ff ff52 	bl	8003178 <SPI_WaitFlagStateUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	b170      	cbz	r0, 80032f6 <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032da:	f043 0320 	orr.w	r3, r3, #32
 80032de:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e008      	b.n	80032f6 <SPI_EndRxTransaction+0x86>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80032e4:	9200      	str	r2, [sp, #0]
 80032e6:	460b      	mov	r3, r1
 80032e8:	2200      	movs	r2, #0
 80032ea:	2101      	movs	r1, #1
 80032ec:	4620      	mov	r0, r4
 80032ee:	f7ff ff43 	bl	8003178 <SPI_WaitFlagStateUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	b910      	cbnz	r0, 80032fc <SPI_EndRxTransaction+0x8c>
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	b002      	add	sp, #8
 80032fa:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032fe:	f043 0320 	orr.w	r3, r3, #32
 8003302:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e7f6      	b.n	80032f6 <SPI_EndRxTransaction+0x86>

08003308 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003308:	2800      	cmp	r0, #0
 800330a:	d03b      	beq.n	8003384 <HAL_SPI_Init+0x7c>
{
 800330c:	b510      	push	{r4, lr}
 800330e:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003310:	2300      	movs	r3, #0
 8003312:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003314:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003318:	2b00      	cmp	r3, #0
 800331a:	d02e      	beq.n	800337a <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 800331c:	2302      	movs	r3, #2
 800331e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003322:	6822      	ldr	r2, [r4, #0]
 8003324:	6813      	ldr	r3, [r2, #0]
 8003326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800332a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800332c:	6863      	ldr	r3, [r4, #4]
 800332e:	68a2      	ldr	r2, [r4, #8]
 8003330:	4313      	orrs	r3, r2
 8003332:	68e2      	ldr	r2, [r4, #12]
 8003334:	4313      	orrs	r3, r2
 8003336:	6922      	ldr	r2, [r4, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	6962      	ldr	r2, [r4, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	69a2      	ldr	r2, [r4, #24]
 8003340:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003344:	4313      	orrs	r3, r2
 8003346:	69e2      	ldr	r2, [r4, #28]
 8003348:	4313      	orrs	r3, r2
 800334a:	6a22      	ldr	r2, [r4, #32]
 800334c:	4313      	orrs	r3, r2
 800334e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003350:	6822      	ldr	r2, [r4, #0]
 8003352:	430b      	orrs	r3, r1
 8003354:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003356:	8b63      	ldrh	r3, [r4, #26]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800335e:	6822      	ldr	r2, [r4, #0]
 8003360:	430b      	orrs	r3, r1
 8003362:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003364:	6822      	ldr	r2, [r4, #0]
 8003366:	69d3      	ldr	r3, [r2, #28]
 8003368:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800336c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800336e:	2000      	movs	r0, #0
 8003370:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003372:	2301      	movs	r3, #1
 8003374:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8003378:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800337a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800337e:	f004 f857 	bl	8007430 <HAL_SPI_MspInit>
 8003382:	e7cb      	b.n	800331c <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8003384:	2001      	movs	r0, #1
}
 8003386:	4770      	bx	lr

08003388 <HAL_SPI_Transmit>:
{
 8003388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800338c:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800338e:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8003392:	2c01      	cmp	r4, #1
 8003394:	f000 80c3 	beq.w	800351e <HAL_SPI_Transmit+0x196>
 8003398:	461d      	mov	r5, r3
 800339a:	4617      	mov	r7, r2
 800339c:	4688      	mov	r8, r1
 800339e:	4604      	mov	r4, r0
 80033a0:	2301      	movs	r3, #1
 80033a2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80033a6:	f7fe fdf3 	bl	8001f90 <HAL_GetTick>
 80033aa:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80033ac:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d009      	beq.n	80033ca <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 80033b6:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033be:	2300      	movs	r3, #0
 80033c0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80033c4:	b002      	add	sp, #8
 80033c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80033ca:	f1b8 0f00 	cmp.w	r8, #0
 80033ce:	f000 8098 	beq.w	8003502 <HAL_SPI_Transmit+0x17a>
 80033d2:	2f00      	cmp	r7, #0
 80033d4:	f000 8097 	beq.w	8003506 <HAL_SPI_Transmit+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033d8:	2303      	movs	r3, #3
 80033da:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033de:	2300      	movs	r3, #0
 80033e0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80033e2:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80033e6:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 80033e8:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033ea:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80033ec:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80033f0:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80033f2:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033f4:	68a3      	ldr	r3, [r4, #8]
 80033f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033fa:	d01c      	beq.n	8003436 <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003404:	d103      	bne.n	800340e <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800340c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800340e:	68e3      	ldr	r3, [r4, #12]
 8003410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003414:	d015      	beq.n	8003442 <HAL_SPI_Transmit+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003416:	6863      	ldr	r3, [r4, #4]
 8003418:	b10b      	cbz	r3, 800341e <HAL_SPI_Transmit+0x96>
 800341a:	2f01      	cmp	r7, #1
 800341c:	d149      	bne.n	80034b2 <HAL_SPI_Transmit+0x12a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800341e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	7812      	ldrb	r2, [r2, #0]
 8003424:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003426:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003428:	3301      	adds	r3, #1
 800342a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800342c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800342e:	3b01      	subs	r3, #1
 8003430:	b29b      	uxth	r3, r3
 8003432:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003434:	e03d      	b.n	80034b2 <HAL_SPI_Transmit+0x12a>
    SPI_1LINE_TX(hspi);
 8003436:	6822      	ldr	r2, [r4, #0]
 8003438:	6813      	ldr	r3, [r2, #0]
 800343a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	e7dc      	b.n	80033fc <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003442:	6863      	ldr	r3, [r4, #4]
 8003444:	b10b      	cbz	r3, 800344a <HAL_SPI_Transmit+0xc2>
 8003446:	2f01      	cmp	r7, #1
 8003448:	d115      	bne.n	8003476 <HAL_SPI_Transmit+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800344a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	8812      	ldrh	r2, [r2, #0]
 8003450:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003452:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003454:	3302      	adds	r3, #2
 8003456:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003458:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800345a:	3b01      	subs	r3, #1
 800345c:	b29b      	uxth	r3, r3
 800345e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003460:	e009      	b.n	8003476 <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003462:	f7fe fd95 	bl	8001f90 <HAL_GetTick>
 8003466:	1b80      	subs	r0, r0, r6
 8003468:	42a8      	cmp	r0, r5
 800346a:	d302      	bcc.n	8003472 <HAL_SPI_Transmit+0xea>
 800346c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003470:	d14b      	bne.n	800350a <HAL_SPI_Transmit+0x182>
 8003472:	2d00      	cmp	r5, #0
 8003474:	d04b      	beq.n	800350e <HAL_SPI_Transmit+0x186>
    while (hspi->TxXferCount > 0U)
 8003476:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d02c      	beq.n	80034d8 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	f012 0f02 	tst.w	r2, #2
 8003486:	d0ec      	beq.n	8003462 <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003488:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800348a:	8812      	ldrh	r2, [r2, #0]
 800348c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800348e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003490:	3302      	adds	r3, #2
 8003492:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003494:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003496:	3b01      	subs	r3, #1
 8003498:	b29b      	uxth	r3, r3
 800349a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800349c:	e7eb      	b.n	8003476 <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800349e:	f7fe fd77 	bl	8001f90 <HAL_GetTick>
 80034a2:	1b80      	subs	r0, r0, r6
 80034a4:	42a8      	cmp	r0, r5
 80034a6:	d302      	bcc.n	80034ae <HAL_SPI_Transmit+0x126>
 80034a8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80034ac:	d131      	bne.n	8003512 <HAL_SPI_Transmit+0x18a>
 80034ae:	2d00      	cmp	r5, #0
 80034b0:	d031      	beq.n	8003516 <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 80034b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	b17b      	cbz	r3, 80034d8 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	f012 0f02 	tst.w	r2, #2
 80034c0:	d0ed      	beq.n	800349e <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80034c4:	7812      	ldrb	r2, [r2, #0]
 80034c6:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034ca:	3301      	adds	r3, #1
 80034cc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80034ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80034d6:	e7ec      	b.n	80034b2 <HAL_SPI_Transmit+0x12a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034d8:	4632      	mov	r2, r6
 80034da:	4629      	mov	r1, r5
 80034dc:	4620      	mov	r0, r4
 80034de:	f7ff fe93 	bl	8003208 <SPI_EndRxTxTransaction>
 80034e2:	b108      	cbz	r0, 80034e8 <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034e4:	2320      	movs	r3, #32
 80034e6:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034e8:	68a3      	ldr	r3, [r4, #8]
 80034ea:	b933      	cbnz	r3, 80034fa <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	6823      	ldr	r3, [r4, #0]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	9201      	str	r2, [sp, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	9301      	str	r3, [sp, #4]
 80034f8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80034fc:	b96b      	cbnz	r3, 800351a <HAL_SPI_Transmit+0x192>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80034fe:	2000      	movs	r0, #0
 8003500:	e75a      	b.n	80033b8 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8003502:	2001      	movs	r0, #1
 8003504:	e758      	b.n	80033b8 <HAL_SPI_Transmit+0x30>
 8003506:	2001      	movs	r0, #1
 8003508:	e756      	b.n	80033b8 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 800350a:	2003      	movs	r0, #3
 800350c:	e754      	b.n	80033b8 <HAL_SPI_Transmit+0x30>
 800350e:	2003      	movs	r0, #3
 8003510:	e752      	b.n	80033b8 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8003512:	2003      	movs	r0, #3
 8003514:	e750      	b.n	80033b8 <HAL_SPI_Transmit+0x30>
 8003516:	2003      	movs	r0, #3
 8003518:	e74e      	b.n	80033b8 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 800351a:	2001      	movs	r0, #1
 800351c:	e74c      	b.n	80033b8 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 800351e:	2002      	movs	r0, #2
 8003520:	e750      	b.n	80033c4 <HAL_SPI_Transmit+0x3c>

08003522 <HAL_SPI_TransmitReceive>:
{
 8003522:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003526:	b083      	sub	sp, #12
 8003528:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800352c:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8003530:	2c01      	cmp	r4, #1
 8003532:	f000 810b 	beq.w	800374c <HAL_SPI_TransmitReceive+0x22a>
 8003536:	461d      	mov	r5, r3
 8003538:	4617      	mov	r7, r2
 800353a:	460e      	mov	r6, r1
 800353c:	4604      	mov	r4, r0
 800353e:	2301      	movs	r3, #1
 8003540:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003544:	f7fe fd24 	bl	8001f90 <HAL_GetTick>
 8003548:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 800354a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 800354e:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8003550:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003552:	2801      	cmp	r0, #1
 8003554:	d015      	beq.n	8003582 <HAL_SPI_TransmitReceive+0x60>
 8003556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800355a:	d00a      	beq.n	8003572 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 800355c:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 800355e:	2201      	movs	r2, #1
 8003560:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003564:	2200      	movs	r2, #0
 8003566:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 800356a:	4618      	mov	r0, r3
 800356c:	b003      	add	sp, #12
 800356e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003572:	68a3      	ldr	r3, [r4, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	f040 80db 	bne.w	8003730 <HAL_SPI_TransmitReceive+0x20e>
 800357a:	2804      	cmp	r0, #4
 800357c:	d001      	beq.n	8003582 <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 800357e:	2302      	movs	r3, #2
 8003580:	e7ed      	b.n	800355e <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003582:	2e00      	cmp	r6, #0
 8003584:	f000 80d6 	beq.w	8003734 <HAL_SPI_TransmitReceive+0x212>
 8003588:	2f00      	cmp	r7, #0
 800358a:	f000 80d5 	beq.w	8003738 <HAL_SPI_TransmitReceive+0x216>
 800358e:	2d00      	cmp	r5, #0
 8003590:	f000 80d4 	beq.w	800373c <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003594:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b04      	cmp	r3, #4
 800359c:	d002      	beq.n	80035a4 <HAL_SPI_TransmitReceive+0x82>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800359e:	2305      	movs	r3, #5
 80035a0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035a4:	2300      	movs	r3, #0
 80035a6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035a8:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 80035aa:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80035ac:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035ae:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 80035b0:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80035b2:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80035b4:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035b6:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80035c0:	d103      	bne.n	80035ca <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035ca:	68e3      	ldr	r3, [r4, #12]
 80035cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035d0:	d010      	beq.n	80035f4 <HAL_SPI_TransmitReceive+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035d2:	6863      	ldr	r3, [r4, #4]
 80035d4:	b10b      	cbz	r3, 80035da <HAL_SPI_TransmitReceive+0xb8>
 80035d6:	2d01      	cmp	r5, #1
 80035d8:	d10a      	bne.n	80035f0 <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035da:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	7812      	ldrb	r2, [r2, #0]
 80035e0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035e4:	3301      	adds	r3, #1
 80035e6:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80035e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80035f0:	2501      	movs	r5, #1
 80035f2:	e069      	b.n	80036c8 <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035f4:	6863      	ldr	r3, [r4, #4]
 80035f6:	b10b      	cbz	r3, 80035fc <HAL_SPI_TransmitReceive+0xda>
 80035f8:	2d01      	cmp	r5, #1
 80035fa:	d10a      	bne.n	8003612 <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035fc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	8812      	ldrh	r2, [r2, #0]
 8003602:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003604:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003606:	3302      	adds	r3, #2
 8003608:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800360a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800360c:	3b01      	subs	r3, #1
 800360e:	b29b      	uxth	r3, r3
 8003610:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003612:	2501      	movs	r5, #1
 8003614:	e01b      	b.n	800364e <HAL_SPI_TransmitReceive+0x12c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	f012 0f01 	tst.w	r2, #1
 800361e:	d00d      	beq.n	800363c <HAL_SPI_TransmitReceive+0x11a>
 8003620:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003622:	b292      	uxth	r2, r2
 8003624:	b152      	cbz	r2, 800363c <HAL_SPI_TransmitReceive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800362a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800362c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800362e:	3302      	adds	r3, #2
 8003630:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003632:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003634:	3b01      	subs	r3, #1
 8003636:	b29b      	uxth	r3, r3
 8003638:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800363a:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800363c:	f7fe fca8 	bl	8001f90 <HAL_GetTick>
 8003640:	eba0 0009 	sub.w	r0, r0, r9
 8003644:	4540      	cmp	r0, r8
 8003646:	d302      	bcc.n	800364e <HAL_SPI_TransmitReceive+0x12c>
 8003648:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800364c:	d178      	bne.n	8003740 <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800364e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003650:	b29b      	uxth	r3, r3
 8003652:	b91b      	cbnz	r3, 800365c <HAL_SPI_TransmitReceive+0x13a>
 8003654:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d052      	beq.n	8003702 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	f012 0f02 	tst.w	r2, #2
 8003664:	d0d7      	beq.n	8003616 <HAL_SPI_TransmitReceive+0xf4>
 8003666:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8003668:	b292      	uxth	r2, r2
 800366a:	2a00      	cmp	r2, #0
 800366c:	d0d3      	beq.n	8003616 <HAL_SPI_TransmitReceive+0xf4>
 800366e:	2d00      	cmp	r5, #0
 8003670:	d0d1      	beq.n	8003616 <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003672:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003674:	8812      	ldrh	r2, [r2, #0]
 8003676:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003678:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800367a:	3302      	adds	r3, #2
 800367c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800367e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003680:	3b01      	subs	r3, #1
 8003682:	b29b      	uxth	r3, r3
 8003684:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8003686:	2500      	movs	r5, #0
 8003688:	e7c5      	b.n	8003616 <HAL_SPI_TransmitReceive+0xf4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	f012 0f01 	tst.w	r2, #1
 8003692:	d00d      	beq.n	80036b0 <HAL_SPI_TransmitReceive+0x18e>
 8003694:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003696:	b292      	uxth	r2, r2
 8003698:	b152      	cbz	r2, 80036b0 <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800369e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80036a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036a2:	3301      	adds	r3, #1
 80036a4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80036a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80036ae:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036b0:	f7fe fc6e 	bl	8001f90 <HAL_GetTick>
 80036b4:	eba0 0009 	sub.w	r0, r0, r9
 80036b8:	4540      	cmp	r0, r8
 80036ba:	d302      	bcc.n	80036c2 <HAL_SPI_TransmitReceive+0x1a0>
 80036bc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80036c0:	d140      	bne.n	8003744 <HAL_SPI_TransmitReceive+0x222>
 80036c2:	f1b8 0f00 	cmp.w	r8, #0
 80036c6:	d03f      	beq.n	8003748 <HAL_SPI_TransmitReceive+0x226>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	b913      	cbnz	r3, 80036d4 <HAL_SPI_TransmitReceive+0x1b2>
 80036ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	b1b3      	cbz	r3, 8003702 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	f012 0f02 	tst.w	r2, #2
 80036dc:	d0d5      	beq.n	800368a <HAL_SPI_TransmitReceive+0x168>
 80036de:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80036e0:	b292      	uxth	r2, r2
 80036e2:	2a00      	cmp	r2, #0
 80036e4:	d0d1      	beq.n	800368a <HAL_SPI_TransmitReceive+0x168>
 80036e6:	2d00      	cmp	r5, #0
 80036e8:	d0cf      	beq.n	800368a <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036ea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80036ec:	7812      	ldrb	r2, [r2, #0]
 80036ee:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80036f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80036f2:	3301      	adds	r3, #1
 80036f4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80036f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80036fe:	2500      	movs	r5, #0
 8003700:	e7c3      	b.n	800368a <HAL_SPI_TransmitReceive+0x168>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003702:	464a      	mov	r2, r9
 8003704:	4641      	mov	r1, r8
 8003706:	4620      	mov	r0, r4
 8003708:	f7ff fd7e 	bl	8003208 <SPI_EndRxTxTransaction>
 800370c:	4603      	mov	r3, r0
 800370e:	b118      	cbz	r0, 8003718 <HAL_SPI_TransmitReceive+0x1f6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003710:	2320      	movs	r3, #32
 8003712:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
    goto error;
 8003716:	e722      	b.n	800355e <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003718:	68a2      	ldr	r2, [r4, #8]
 800371a:	2a00      	cmp	r2, #0
 800371c:	f47f af1f 	bne.w	800355e <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003720:	9201      	str	r2, [sp, #4]
 8003722:	6822      	ldr	r2, [r4, #0]
 8003724:	68d1      	ldr	r1, [r2, #12]
 8003726:	9101      	str	r1, [sp, #4]
 8003728:	6892      	ldr	r2, [r2, #8]
 800372a:	9201      	str	r2, [sp, #4]
 800372c:	9a01      	ldr	r2, [sp, #4]
 800372e:	e716      	b.n	800355e <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 8003730:	2302      	movs	r3, #2
 8003732:	e714      	b.n	800355e <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e712      	b.n	800355e <HAL_SPI_TransmitReceive+0x3c>
 8003738:	2301      	movs	r3, #1
 800373a:	e710      	b.n	800355e <HAL_SPI_TransmitReceive+0x3c>
 800373c:	2301      	movs	r3, #1
 800373e:	e70e      	b.n	800355e <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e70c      	b.n	800355e <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e70a      	b.n	800355e <HAL_SPI_TransmitReceive+0x3c>
 8003748:	2303      	movs	r3, #3
 800374a:	e708      	b.n	800355e <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 800374c:	2302      	movs	r3, #2
 800374e:	e70c      	b.n	800356a <HAL_SPI_TransmitReceive+0x48>

08003750 <HAL_SPI_Receive>:
{
 8003750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	4604      	mov	r4, r0
 8003758:	460f      	mov	r7, r1
 800375a:	4690      	mov	r8, r2
 800375c:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800375e:	6843      	ldr	r3, [r0, #4]
 8003760:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003764:	d019      	beq.n	800379a <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 8003766:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800376a:	2b01      	cmp	r3, #1
 800376c:	f000 809f 	beq.w	80038ae <HAL_SPI_Receive+0x15e>
 8003770:	2301      	movs	r3, #1
 8003772:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003776:	f7fe fc0b 	bl	8001f90 <HAL_GetTick>
 800377a:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800377c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d015      	beq.n	80037b2 <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 8003786:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003788:	2301      	movs	r3, #1
 800378a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800378e:	2300      	movs	r3, #0
 8003790:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003794:	b002      	add	sp, #8
 8003796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800379a:	6883      	ldr	r3, [r0, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1e2      	bne.n	8003766 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80037a0:	2304      	movs	r3, #4
 80037a2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80037a6:	9500      	str	r5, [sp, #0]
 80037a8:	4613      	mov	r3, r2
 80037aa:	460a      	mov	r2, r1
 80037ac:	f7ff feb9 	bl	8003522 <HAL_SPI_TransmitReceive>
 80037b0:	e7f0      	b.n	8003794 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 80037b2:	2f00      	cmp	r7, #0
 80037b4:	d06d      	beq.n	8003892 <HAL_SPI_Receive+0x142>
 80037b6:	f1b8 0f00 	cmp.w	r8, #0
 80037ba:	d06c      	beq.n	8003896 <HAL_SPI_Receive+0x146>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80037bc:	2304      	movs	r3, #4
 80037be:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037c2:	2300      	movs	r3, #0
 80037c4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80037c6:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80037c8:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80037cc:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80037d0:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80037d2:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80037d4:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 80037d6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80037d8:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037da:	68a3      	ldr	r3, [r4, #8]
 80037dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e0:	d00b      	beq.n	80037fa <HAL_SPI_Receive+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80037ea:	d103      	bne.n	80037f4 <HAL_SPI_Receive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037f2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80037f4:	68e3      	ldr	r3, [r4, #12]
 80037f6:	b183      	cbz	r3, 800381a <HAL_SPI_Receive+0xca>
 80037f8:	e02c      	b.n	8003854 <HAL_SPI_Receive+0x104>
    SPI_1LINE_RX(hspi);
 80037fa:	6822      	ldr	r2, [r4, #0]
 80037fc:	6813      	ldr	r3, [r2, #0]
 80037fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	e7ed      	b.n	80037e2 <HAL_SPI_Receive+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003806:	f7fe fbc3 	bl	8001f90 <HAL_GetTick>
 800380a:	1b80      	subs	r0, r0, r6
 800380c:	42a8      	cmp	r0, r5
 800380e:	d302      	bcc.n	8003816 <HAL_SPI_Receive+0xc6>
 8003810:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003814:	d141      	bne.n	800389a <HAL_SPI_Receive+0x14a>
 8003816:	2d00      	cmp	r5, #0
 8003818:	d041      	beq.n	800389e <HAL_SPI_Receive+0x14e>
    while (hspi->RxXferCount > 0U)
 800381a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d02b      	beq.n	800387a <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	f012 0f01 	tst.w	r2, #1
 800382a:	d0ec      	beq.n	8003806 <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800382c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800382e:	7b1b      	ldrb	r3, [r3, #12]
 8003830:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003832:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003834:	3301      	adds	r3, #1
 8003836:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003838:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800383a:	3b01      	subs	r3, #1
 800383c:	b29b      	uxth	r3, r3
 800383e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003840:	e7eb      	b.n	800381a <HAL_SPI_Receive+0xca>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003842:	f7fe fba5 	bl	8001f90 <HAL_GetTick>
 8003846:	1b80      	subs	r0, r0, r6
 8003848:	42a8      	cmp	r0, r5
 800384a:	d302      	bcc.n	8003852 <HAL_SPI_Receive+0x102>
 800384c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003850:	d127      	bne.n	80038a2 <HAL_SPI_Receive+0x152>
 8003852:	b345      	cbz	r5, 80038a6 <HAL_SPI_Receive+0x156>
    while (hspi->RxXferCount > 0U)
 8003854:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003856:	b29b      	uxth	r3, r3
 8003858:	b17b      	cbz	r3, 800387a <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	f012 0f01 	tst.w	r2, #1
 8003862:	d0ee      	beq.n	8003842 <HAL_SPI_Receive+0xf2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003868:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800386a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800386c:	3302      	adds	r3, #2
 800386e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003870:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003872:	3b01      	subs	r3, #1
 8003874:	b29b      	uxth	r3, r3
 8003876:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003878:	e7ec      	b.n	8003854 <HAL_SPI_Receive+0x104>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800387a:	4632      	mov	r2, r6
 800387c:	4629      	mov	r1, r5
 800387e:	4620      	mov	r0, r4
 8003880:	f7ff fcf6 	bl	8003270 <SPI_EndRxTransaction>
 8003884:	b108      	cbz	r0, 800388a <HAL_SPI_Receive+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003886:	2320      	movs	r3, #32
 8003888:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800388a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800388c:	b96b      	cbnz	r3, 80038aa <HAL_SPI_Receive+0x15a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800388e:	2000      	movs	r0, #0
 8003890:	e77a      	b.n	8003788 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8003892:	2001      	movs	r0, #1
 8003894:	e778      	b.n	8003788 <HAL_SPI_Receive+0x38>
 8003896:	2001      	movs	r0, #1
 8003898:	e776      	b.n	8003788 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 800389a:	2003      	movs	r0, #3
 800389c:	e774      	b.n	8003788 <HAL_SPI_Receive+0x38>
 800389e:	2003      	movs	r0, #3
 80038a0:	e772      	b.n	8003788 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 80038a2:	2003      	movs	r0, #3
 80038a4:	e770      	b.n	8003788 <HAL_SPI_Receive+0x38>
 80038a6:	2003      	movs	r0, #3
 80038a8:	e76e      	b.n	8003788 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 80038aa:	2001      	movs	r0, #1
 80038ac:	e76c      	b.n	8003788 <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 80038ae:	2002      	movs	r0, #2
 80038b0:	e770      	b.n	8003794 <HAL_SPI_Receive+0x44>

080038b2 <HAL_SPI_ErrorCallback>:
}
 80038b2:	4770      	bx	lr

080038b4 <HAL_SPI_IRQHandler>:
{
 80038b4:	b530      	push	{r4, r5, lr}
 80038b6:	b085      	sub	sp, #20
 80038b8:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80038ba:	6802      	ldr	r2, [r0, #0]
 80038bc:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80038be:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038c0:	f3c3 1180 	ubfx	r1, r3, #6, #1
 80038c4:	b949      	cbnz	r1, 80038da <HAL_SPI_IRQHandler+0x26>
 80038c6:	f013 0f01 	tst.w	r3, #1
 80038ca:	d006      	beq.n	80038da <HAL_SPI_IRQHandler+0x26>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038d0:	d003      	beq.n	80038da <HAL_SPI_IRQHandler+0x26>
    hspi->RxISR(hspi);
 80038d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038d4:	4620      	mov	r0, r4
 80038d6:	4798      	blx	r3
    return;
 80038d8:	e008      	b.n	80038ec <HAL_SPI_IRQHandler+0x38>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80038da:	f013 0f02 	tst.w	r3, #2
 80038de:	d007      	beq.n	80038f0 <HAL_SPI_IRQHandler+0x3c>
 80038e0:	f010 0f80 	tst.w	r0, #128	; 0x80
 80038e4:	d004      	beq.n	80038f0 <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 80038e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80038e8:	4620      	mov	r0, r4
 80038ea:	4798      	blx	r3
}
 80038ec:	b005      	add	sp, #20
 80038ee:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80038f0:	f3c3 1540 	ubfx	r5, r3, #5, #1
 80038f4:	b91d      	cbnz	r5, 80038fe <HAL_SPI_IRQHandler+0x4a>
 80038f6:	b911      	cbnz	r1, 80038fe <HAL_SPI_IRQHandler+0x4a>
 80038f8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80038fc:	d0f6      	beq.n	80038ec <HAL_SPI_IRQHandler+0x38>
 80038fe:	f010 0f20 	tst.w	r0, #32
 8003902:	d0f3      	beq.n	80038ec <HAL_SPI_IRQHandler+0x38>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003904:	b179      	cbz	r1, 8003926 <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003906:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 800390a:	b2c9      	uxtb	r1, r1
 800390c:	2903      	cmp	r1, #3
 800390e:	d053      	beq.n	80039b8 <HAL_SPI_IRQHandler+0x104>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003910:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003912:	f041 0104 	orr.w	r1, r1, #4
 8003916:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003918:	2100      	movs	r1, #0
 800391a:	9100      	str	r1, [sp, #0]
 800391c:	68d1      	ldr	r1, [r2, #12]
 800391e:	9100      	str	r1, [sp, #0]
 8003920:	6891      	ldr	r1, [r2, #8]
 8003922:	9100      	str	r1, [sp, #0]
 8003924:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003926:	b165      	cbz	r5, 8003942 <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003928:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800392a:	f041 0101 	orr.w	r1, r1, #1
 800392e:	6561      	str	r1, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003930:	2100      	movs	r1, #0
 8003932:	9102      	str	r1, [sp, #8]
 8003934:	6891      	ldr	r1, [r2, #8]
 8003936:	9102      	str	r1, [sp, #8]
 8003938:	6811      	ldr	r1, [r2, #0]
 800393a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800393e:	6011      	str	r1, [r2, #0]
 8003940:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003942:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003946:	d009      	beq.n	800395c <HAL_SPI_IRQHandler+0xa8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003948:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800394a:	f043 0308 	orr.w	r3, r3, #8
 800394e:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003950:	2300      	movs	r3, #0
 8003952:	9303      	str	r3, [sp, #12]
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	9303      	str	r3, [sp, #12]
 800395a:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800395c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0c4      	beq.n	80038ec <HAL_SPI_IRQHandler+0x38>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003962:	6822      	ldr	r2, [r4, #0]
 8003964:	6853      	ldr	r3, [r2, #4]
 8003966:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800396a:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800396c:	2301      	movs	r3, #1
 800396e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003972:	f010 0f03 	tst.w	r0, #3
 8003976:	d027      	beq.n	80039c8 <HAL_SPI_IRQHandler+0x114>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003978:	6822      	ldr	r2, [r4, #0]
 800397a:	6853      	ldr	r3, [r2, #4]
 800397c:	f023 0303 	bic.w	r3, r3, #3
 8003980:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8003982:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003984:	b14b      	cbz	r3, 800399a <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003986:	4a12      	ldr	r2, [pc, #72]	; (80039d0 <HAL_SPI_IRQHandler+0x11c>)
 8003988:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800398a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800398c:	f7fe fce6 	bl	800235c <HAL_DMA_Abort_IT>
 8003990:	b118      	cbz	r0, 800399a <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003992:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003998:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800399a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0a5      	beq.n	80038ec <HAL_SPI_IRQHandler+0x38>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80039a0:	4a0b      	ldr	r2, [pc, #44]	; (80039d0 <HAL_SPI_IRQHandler+0x11c>)
 80039a2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80039a4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80039a6:	f7fe fcd9 	bl	800235c <HAL_DMA_Abort_IT>
 80039aa:	2800      	cmp	r0, #0
 80039ac:	d09e      	beq.n	80038ec <HAL_SPI_IRQHandler+0x38>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80039ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80039b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b4:	6563      	str	r3, [r4, #84]	; 0x54
 80039b6:	e799      	b.n	80038ec <HAL_SPI_IRQHandler+0x38>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039b8:	2300      	movs	r3, #0
 80039ba:	9301      	str	r3, [sp, #4]
 80039bc:	68d3      	ldr	r3, [r2, #12]
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	6893      	ldr	r3, [r2, #8]
 80039c2:	9301      	str	r3, [sp, #4]
 80039c4:	9b01      	ldr	r3, [sp, #4]
        return;
 80039c6:	e791      	b.n	80038ec <HAL_SPI_IRQHandler+0x38>
        HAL_SPI_ErrorCallback(hspi);
 80039c8:	4620      	mov	r0, r4
 80039ca:	f7ff ff72 	bl	80038b2 <HAL_SPI_ErrorCallback>
 80039ce:	e78d      	b.n	80038ec <HAL_SPI_IRQHandler+0x38>
 80039d0:	080039d5 	.word	0x080039d5

080039d4 <SPI_DMAAbortOnError>:
{
 80039d4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80039dc:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 80039de:	f7ff ff68 	bl	80038b2 <HAL_SPI_ErrorCallback>
}
 80039e2:	bd08      	pop	{r3, pc}

080039e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039e4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039e6:	6a03      	ldr	r3, [r0, #32]
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ee:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039f2:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039f4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f8:	680d      	ldr	r5, [r1, #0]
 80039fa:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039fe:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a02:	688b      	ldr	r3, [r1, #8]
 8003a04:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a06:	4d0d      	ldr	r5, [pc, #52]	; (8003a3c <TIM_OC1_SetConfig+0x58>)
 8003a08:	42a8      	cmp	r0, r5
 8003a0a:	d009      	beq.n	8003a20 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0c:	4d0b      	ldr	r5, [pc, #44]	; (8003a3c <TIM_OC1_SetConfig+0x58>)
 8003a0e:	42a8      	cmp	r0, r5
 8003a10:	d00d      	beq.n	8003a2e <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a12:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a14:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a16:	684a      	ldr	r2, [r1, #4]
 8003a18:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a1a:	6203      	str	r3, [r0, #32]
}
 8003a1c:	bc70      	pop	{r4, r5, r6}
 8003a1e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a20:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003a24:	68cc      	ldr	r4, [r1, #12]
 8003a26:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a28:	f023 0304 	bic.w	r3, r3, #4
 8003a2c:	e7ee      	b.n	8003a0c <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a2e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8003a32:	694c      	ldr	r4, [r1, #20]
 8003a34:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a36:	698a      	ldr	r2, [r1, #24]
 8003a38:	4322      	orrs	r2, r4
 8003a3a:	e7ea      	b.n	8003a12 <TIM_OC1_SetConfig+0x2e>
 8003a3c:	40010000 	.word	0x40010000

08003a40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a40:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a42:	6a03      	ldr	r3, [r0, #32]
 8003a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a48:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a4c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4e:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a50:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a54:	680d      	ldr	r5, [r1, #0]
 8003a56:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a5c:	688d      	ldr	r5, [r1, #8]
 8003a5e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a62:	4d0f      	ldr	r5, [pc, #60]	; (8003aa0 <TIM_OC3_SetConfig+0x60>)
 8003a64:	42a8      	cmp	r0, r5
 8003a66:	d009      	beq.n	8003a7c <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a68:	4d0d      	ldr	r5, [pc, #52]	; (8003aa0 <TIM_OC3_SetConfig+0x60>)
 8003a6a:	42a8      	cmp	r0, r5
 8003a6c:	d00e      	beq.n	8003a8c <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a6e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a70:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a72:	684a      	ldr	r2, [r1, #4]
 8003a74:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a76:	6203      	str	r3, [r0, #32]
}
 8003a78:	bc30      	pop	{r4, r5}
 8003a7a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a80:	68cd      	ldr	r5, [r1, #12]
 8003a82:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a8a:	e7ed      	b.n	8003a68 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a8c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a90:	694d      	ldr	r5, [r1, #20]
 8003a92:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a96:	698d      	ldr	r5, [r1, #24]
 8003a98:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003a9c:	e7e7      	b.n	8003a6e <TIM_OC3_SetConfig+0x2e>
 8003a9e:	bf00      	nop
 8003aa0:	40010000 	.word	0x40010000

08003aa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aa4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003aa6:	6a03      	ldr	r3, [r0, #32]
 8003aa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003aac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ab2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ab4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ab8:	680d      	ldr	r5, [r1, #0]
 8003aba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003abe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ac2:	688d      	ldr	r5, [r1, #8]
 8003ac4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac8:	4d07      	ldr	r5, [pc, #28]	; (8003ae8 <TIM_OC4_SetConfig+0x44>)
 8003aca:	42a8      	cmp	r0, r5
 8003acc:	d006      	beq.n	8003adc <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ace:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ad0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ad2:	684a      	ldr	r2, [r1, #4]
 8003ad4:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ad6:	6203      	str	r3, [r0, #32]
}
 8003ad8:	bc30      	pop	{r4, r5}
 8003ada:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003adc:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ae0:	694d      	ldr	r5, [r1, #20]
 8003ae2:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003ae6:	e7f2      	b.n	8003ace <TIM_OC4_SetConfig+0x2a>
 8003ae8:	40010000 	.word	0x40010000

08003aec <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aec:	6802      	ldr	r2, [r0, #0]
 8003aee:	68d3      	ldr	r3, [r2, #12]
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af6:	6802      	ldr	r2, [r0, #0]
 8003af8:	6893      	ldr	r3, [r2, #8]
 8003afa:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afe:	2b06      	cmp	r3, #6
 8003b00:	d003      	beq.n	8003b0a <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8003b02:	6813      	ldr	r3, [r2, #0]
 8003b04:	f043 0301 	orr.w	r3, r3, #1
 8003b08:	6013      	str	r3, [r2, #0]
}
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	4770      	bx	lr

08003b0e <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003b0e:	4770      	bx	lr

08003b10 <HAL_TIM_IC_CaptureCallback>:
}
 8003b10:	4770      	bx	lr

08003b12 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003b12:	4770      	bx	lr

08003b14 <HAL_TIM_TriggerCallback>:
}
 8003b14:	4770      	bx	lr

08003b16 <HAL_TIM_IRQHandler>:
{
 8003b16:	b510      	push	{r4, lr}
 8003b18:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b1a:	6803      	ldr	r3, [r0, #0]
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	f012 0f02 	tst.w	r2, #2
 8003b22:	d011      	beq.n	8003b48 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	f012 0f02 	tst.w	r2, #2
 8003b2a:	d00d      	beq.n	8003b48 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b2c:	f06f 0202 	mvn.w	r2, #2
 8003b30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b32:	2301      	movs	r3, #1
 8003b34:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b36:	6803      	ldr	r3, [r0, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f013 0f03 	tst.w	r3, #3
 8003b3e:	d070      	beq.n	8003c22 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8003b40:	f7ff ffe6 	bl	8003b10 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b44:	2300      	movs	r3, #0
 8003b46:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b48:	6823      	ldr	r3, [r4, #0]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	f012 0f04 	tst.w	r2, #4
 8003b50:	d012      	beq.n	8003b78 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	f012 0f04 	tst.w	r2, #4
 8003b58:	d00e      	beq.n	8003b78 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b5a:	f06f 0204 	mvn.w	r2, #4
 8003b5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b60:	2302      	movs	r3, #2
 8003b62:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003b6c:	d05f      	beq.n	8003c2e <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6e:	4620      	mov	r0, r4
 8003b70:	f7ff ffce 	bl	8003b10 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b74:	2300      	movs	r3, #0
 8003b76:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	f012 0f08 	tst.w	r2, #8
 8003b80:	d012      	beq.n	8003ba8 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	f012 0f08 	tst.w	r2, #8
 8003b88:	d00e      	beq.n	8003ba8 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b8a:	f06f 0208 	mvn.w	r2, #8
 8003b8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b90:	2304      	movs	r3, #4
 8003b92:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	f013 0f03 	tst.w	r3, #3
 8003b9c:	d04e      	beq.n	8003c3c <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	f7ff ffb6 	bl	8003b10 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	f012 0f10 	tst.w	r2, #16
 8003bb0:	d012      	beq.n	8003bd8 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	f012 0f10 	tst.w	r2, #16
 8003bb8:	d00e      	beq.n	8003bd8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bba:	f06f 0210 	mvn.w	r2, #16
 8003bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bc0:	2308      	movs	r3, #8
 8003bc2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003bcc:	d03d      	beq.n	8003c4a <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8003bce:	4620      	mov	r0, r4
 8003bd0:	f7ff ff9e 	bl	8003b10 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bd8:	6823      	ldr	r3, [r4, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	f012 0f01 	tst.w	r2, #1
 8003be0:	d003      	beq.n	8003bea <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	f012 0f01 	tst.w	r2, #1
 8003be8:	d136      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	691a      	ldr	r2, [r3, #16]
 8003bee:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003bf2:	d003      	beq.n	8003bfc <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003bfa:	d134      	bne.n	8003c66 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bfc:	6823      	ldr	r3, [r4, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003c04:	d003      	beq.n	8003c0e <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003c0c:	d132      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	f012 0f20 	tst.w	r2, #32
 8003c16:	d003      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c18:	68da      	ldr	r2, [r3, #12]
 8003c1a:	f012 0f20 	tst.w	r2, #32
 8003c1e:	d130      	bne.n	8003c82 <HAL_TIM_IRQHandler+0x16c>
}
 8003c20:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c22:	f7ff ff74 	bl	8003b0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c26:	4620      	mov	r0, r4
 8003c28:	f7ff ff73 	bl	8003b12 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c2c:	e78a      	b.n	8003b44 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f7ff ff6d 	bl	8003b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c34:	4620      	mov	r0, r4
 8003c36:	f7ff ff6c 	bl	8003b12 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c3a:	e79b      	b.n	8003b74 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7ff ff66 	bl	8003b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c42:	4620      	mov	r0, r4
 8003c44:	f7ff ff65 	bl	8003b12 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c48:	e7ac      	b.n	8003ba4 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	f7ff ff5f 	bl	8003b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c50:	4620      	mov	r0, r4
 8003c52:	f7ff ff5e 	bl	8003b12 <HAL_TIM_PWM_PulseFinishedCallback>
 8003c56:	e7bd      	b.n	8003bd4 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c58:	f06f 0201 	mvn.w	r2, #1
 8003c5c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c5e:	4620      	mov	r0, r4
 8003c60:	f003 fbb6 	bl	80073d0 <HAL_TIM_PeriodElapsedCallback>
 8003c64:	e7c1      	b.n	8003bea <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c66:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c6a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f000 f983 	bl	8003f78 <HAL_TIMEx_BreakCallback>
 8003c72:	e7c3      	b.n	8003bfc <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c78:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	f7ff ff4a 	bl	8003b14 <HAL_TIM_TriggerCallback>
 8003c80:	e7c5      	b.n	8003c0e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c82:	f06f 0220 	mvn.w	r2, #32
 8003c86:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f000 f974 	bl	8003f76 <HAL_TIMEx_CommutCallback>
}
 8003c8e:	e7c7      	b.n	8003c20 <HAL_TIM_IRQHandler+0x10a>

08003c90 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003c90:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c92:	4a25      	ldr	r2, [pc, #148]	; (8003d28 <TIM_Base_SetConfig+0x98>)
 8003c94:	4290      	cmp	r0, r2
 8003c96:	d00e      	beq.n	8003cb6 <TIM_Base_SetConfig+0x26>
 8003c98:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003c9c:	d00b      	beq.n	8003cb6 <TIM_Base_SetConfig+0x26>
 8003c9e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003ca2:	4290      	cmp	r0, r2
 8003ca4:	d007      	beq.n	8003cb6 <TIM_Base_SetConfig+0x26>
 8003ca6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003caa:	4290      	cmp	r0, r2
 8003cac:	d003      	beq.n	8003cb6 <TIM_Base_SetConfig+0x26>
 8003cae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cb2:	4290      	cmp	r0, r2
 8003cb4:	d103      	bne.n	8003cbe <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003cba:	684a      	ldr	r2, [r1, #4]
 8003cbc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cbe:	4a1a      	ldr	r2, [pc, #104]	; (8003d28 <TIM_Base_SetConfig+0x98>)
 8003cc0:	4290      	cmp	r0, r2
 8003cc2:	d01a      	beq.n	8003cfa <TIM_Base_SetConfig+0x6a>
 8003cc4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003cc8:	d017      	beq.n	8003cfa <TIM_Base_SetConfig+0x6a>
 8003cca:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003cce:	4290      	cmp	r0, r2
 8003cd0:	d013      	beq.n	8003cfa <TIM_Base_SetConfig+0x6a>
 8003cd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cd6:	4290      	cmp	r0, r2
 8003cd8:	d00f      	beq.n	8003cfa <TIM_Base_SetConfig+0x6a>
 8003cda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cde:	4290      	cmp	r0, r2
 8003ce0:	d00b      	beq.n	8003cfa <TIM_Base_SetConfig+0x6a>
 8003ce2:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003ce6:	4290      	cmp	r0, r2
 8003ce8:	d007      	beq.n	8003cfa <TIM_Base_SetConfig+0x6a>
 8003cea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cee:	4290      	cmp	r0, r2
 8003cf0:	d003      	beq.n	8003cfa <TIM_Base_SetConfig+0x6a>
 8003cf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cf6:	4290      	cmp	r0, r2
 8003cf8:	d103      	bne.n	8003d02 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cfe:	68ca      	ldr	r2, [r1, #12]
 8003d00:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d06:	694a      	ldr	r2, [r1, #20]
 8003d08:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003d0a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d0c:	688b      	ldr	r3, [r1, #8]
 8003d0e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d10:	680b      	ldr	r3, [r1, #0]
 8003d12:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d14:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <TIM_Base_SetConfig+0x98>)
 8003d16:	4298      	cmp	r0, r3
 8003d18:	d002      	beq.n	8003d20 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	6143      	str	r3, [r0, #20]
}
 8003d1e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003d20:	690b      	ldr	r3, [r1, #16]
 8003d22:	6303      	str	r3, [r0, #48]	; 0x30
 8003d24:	e7f9      	b.n	8003d1a <TIM_Base_SetConfig+0x8a>
 8003d26:	bf00      	nop
 8003d28:	40010000 	.word	0x40010000

08003d2c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003d2c:	b1a8      	cbz	r0, 8003d5a <HAL_TIM_Base_Init+0x2e>
{
 8003d2e:	b510      	push	{r4, lr}
 8003d30:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d36:	b15b      	cbz	r3, 8003d50 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d3e:	1d21      	adds	r1, r4, #4
 8003d40:	6820      	ldr	r0, [r4, #0]
 8003d42:	f7ff ffa5 	bl	8003c90 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003d4c:	2000      	movs	r0, #0
}
 8003d4e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003d50:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003d54:	f003 fcfe 	bl	8007754 <HAL_TIM_Base_MspInit>
 8003d58:	e7ee      	b.n	8003d38 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003d5a:	2001      	movs	r0, #1
}
 8003d5c:	4770      	bx	lr

08003d5e <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003d5e:	b1a8      	cbz	r0, 8003d8c <HAL_TIM_PWM_Init+0x2e>
{
 8003d60:	b510      	push	{r4, lr}
 8003d62:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d64:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d68:	b15b      	cbz	r3, 8003d82 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d70:	1d21      	adds	r1, r4, #4
 8003d72:	6820      	ldr	r0, [r4, #0]
 8003d74:	f7ff ff8c 	bl	8003c90 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003d7e:	2000      	movs	r0, #0
}
 8003d80:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003d82:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003d86:	f003 fccd 	bl	8007724 <HAL_TIM_PWM_MspInit>
 8003d8a:	e7ee      	b.n	8003d6a <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003d8c:	2001      	movs	r0, #1
}
 8003d8e:	4770      	bx	lr

08003d90 <TIM_OC2_SetConfig>:
{
 8003d90:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d92:	6a03      	ldr	r3, [r0, #32]
 8003d94:	f023 0310 	bic.w	r3, r3, #16
 8003d98:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003d9a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003d9c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003d9e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003da0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da4:	680d      	ldr	r5, [r1, #0]
 8003da6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003daa:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dae:	688d      	ldr	r5, [r1, #8]
 8003db0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003db4:	4d0e      	ldr	r5, [pc, #56]	; (8003df0 <TIM_OC2_SetConfig+0x60>)
 8003db6:	42a8      	cmp	r0, r5
 8003db8:	d009      	beq.n	8003dce <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dba:	4d0d      	ldr	r5, [pc, #52]	; (8003df0 <TIM_OC2_SetConfig+0x60>)
 8003dbc:	42a8      	cmp	r0, r5
 8003dbe:	d00e      	beq.n	8003dde <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8003dc0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003dc2:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003dc4:	684a      	ldr	r2, [r1, #4]
 8003dc6:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003dc8:	6203      	str	r3, [r0, #32]
}
 8003dca:	bc30      	pop	{r4, r5}
 8003dcc:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dd2:	68cd      	ldr	r5, [r1, #12]
 8003dd4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ddc:	e7ed      	b.n	8003dba <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dde:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003de2:	694d      	ldr	r5, [r1, #20]
 8003de4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003de8:	698d      	ldr	r5, [r1, #24]
 8003dea:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8003dee:	e7e7      	b.n	8003dc0 <TIM_OC2_SetConfig+0x30>
 8003df0:	40010000 	.word	0x40010000

08003df4 <HAL_TIM_PWM_ConfigChannel>:
{
 8003df4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003df6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d066      	beq.n	8003ecc <HAL_TIM_PWM_ConfigChannel+0xd8>
 8003dfe:	460d      	mov	r5, r1
 8003e00:	4604      	mov	r4, r0
 8003e02:	2301      	movs	r3, #1
 8003e04:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8003e0e:	2a0c      	cmp	r2, #12
 8003e10:	d81a      	bhi.n	8003e48 <HAL_TIM_PWM_ConfigChannel+0x54>
 8003e12:	e8df f002 	tbb	[pc, r2]
 8003e16:	1907      	.short	0x1907
 8003e18:	19201919 	.word	0x19201919
 8003e1c:	19341919 	.word	0x19341919
 8003e20:	1919      	.short	0x1919
 8003e22:	47          	.byte	0x47
 8003e23:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e24:	6800      	ldr	r0, [r0, #0]
 8003e26:	f7ff fddd 	bl	80039e4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e2a:	6822      	ldr	r2, [r4, #0]
 8003e2c:	6993      	ldr	r3, [r2, #24]
 8003e2e:	f043 0308 	orr.w	r3, r3, #8
 8003e32:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e34:	6822      	ldr	r2, [r4, #0]
 8003e36:	6993      	ldr	r3, [r2, #24]
 8003e38:	f023 0304 	bic.w	r3, r3, #4
 8003e3c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e3e:	6822      	ldr	r2, [r4, #0]
 8003e40:	6993      	ldr	r3, [r2, #24]
 8003e42:	6929      	ldr	r1, [r5, #16]
 8003e44:	430b      	orrs	r3, r1
 8003e46:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003e4e:	2000      	movs	r0, #0
 8003e50:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003e54:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e56:	6800      	ldr	r0, [r0, #0]
 8003e58:	f7ff ff9a 	bl	8003d90 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e5c:	6822      	ldr	r2, [r4, #0]
 8003e5e:	6993      	ldr	r3, [r2, #24]
 8003e60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e64:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e66:	6822      	ldr	r2, [r4, #0]
 8003e68:	6993      	ldr	r3, [r2, #24]
 8003e6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e6e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e70:	6822      	ldr	r2, [r4, #0]
 8003e72:	6993      	ldr	r3, [r2, #24]
 8003e74:	6929      	ldr	r1, [r5, #16]
 8003e76:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003e7a:	6193      	str	r3, [r2, #24]
      break;
 8003e7c:	e7e4      	b.n	8003e48 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e7e:	6800      	ldr	r0, [r0, #0]
 8003e80:	f7ff fdde 	bl	8003a40 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e84:	6822      	ldr	r2, [r4, #0]
 8003e86:	69d3      	ldr	r3, [r2, #28]
 8003e88:	f043 0308 	orr.w	r3, r3, #8
 8003e8c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e8e:	6822      	ldr	r2, [r4, #0]
 8003e90:	69d3      	ldr	r3, [r2, #28]
 8003e92:	f023 0304 	bic.w	r3, r3, #4
 8003e96:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e98:	6822      	ldr	r2, [r4, #0]
 8003e9a:	69d3      	ldr	r3, [r2, #28]
 8003e9c:	6929      	ldr	r1, [r5, #16]
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	61d3      	str	r3, [r2, #28]
      break;
 8003ea2:	e7d1      	b.n	8003e48 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ea4:	6800      	ldr	r0, [r0, #0]
 8003ea6:	f7ff fdfd 	bl	8003aa4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eaa:	6822      	ldr	r2, [r4, #0]
 8003eac:	69d3      	ldr	r3, [r2, #28]
 8003eae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003eb2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eb4:	6822      	ldr	r2, [r4, #0]
 8003eb6:	69d3      	ldr	r3, [r2, #28]
 8003eb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ebc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ebe:	6822      	ldr	r2, [r4, #0]
 8003ec0:	69d3      	ldr	r3, [r2, #28]
 8003ec2:	6929      	ldr	r1, [r5, #16]
 8003ec4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003ec8:	61d3      	str	r3, [r2, #28]
      break;
 8003eca:	e7bd      	b.n	8003e48 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8003ecc:	2002      	movs	r0, #2
 8003ece:	e7c1      	b.n	8003e54 <HAL_TIM_PWM_ConfigChannel+0x60>

08003ed0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ed0:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ed2:	f001 011f 	and.w	r1, r1, #31
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003edc:	6a03      	ldr	r3, [r0, #32]
 8003ede:	ea23 0304 	bic.w	r3, r3, r4
 8003ee2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ee4:	6a03      	ldr	r3, [r0, #32]
 8003ee6:	408a      	lsls	r2, r1
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	6203      	str	r3, [r0, #32]
}
 8003eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ef0:	4770      	bx	lr
	...

08003ef4 <HAL_TIM_PWM_Start>:
{
 8003ef4:	b510      	push	{r4, lr}
 8003ef6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ef8:	2201      	movs	r2, #1
 8003efa:	6800      	ldr	r0, [r0, #0]
 8003efc:	f7ff ffe8 	bl	8003ed0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <HAL_TIM_PWM_Start+0x38>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d00b      	beq.n	8003f20 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f08:	6822      	ldr	r2, [r4, #0]
 8003f0a:	6893      	ldr	r3, [r2, #8]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f10:	2b06      	cmp	r3, #6
 8003f12:	d003      	beq.n	8003f1c <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8003f14:	6813      	ldr	r3, [r2, #0]
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	6013      	str	r3, [r2, #0]
}
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8003f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f26:	645a      	str	r2, [r3, #68]	; 0x44
 8003f28:	e7ee      	b.n	8003f08 <HAL_TIM_PWM_Start+0x14>
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000

08003f30 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f30:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d01c      	beq.n	8003f72 <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8003f38:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8003f3a:	2601      	movs	r6, #1
 8003f3c:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f40:	2302      	movs	r3, #2
 8003f42:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f46:	6802      	ldr	r2, [r0, #0]
 8003f48:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f4a:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f4c:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f50:	680c      	ldr	r4, [r1, #0]
 8003f52:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003f54:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f58:	684b      	ldr	r3, [r1, #4]
 8003f5a:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f5c:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f5e:	6802      	ldr	r2, [r0, #0]
 8003f60:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f62:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f66:	2300      	movs	r3, #0
 8003f68:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003f6c:	4618      	mov	r0, r3
}
 8003f6e:	bc70      	pop	{r4, r5, r6}
 8003f70:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003f72:	2002      	movs	r0, #2
}
 8003f74:	4770      	bx	lr

08003f76 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f78:	4770      	bx	lr

08003f7a <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f7a:	6802      	ldr	r2, [r0, #0]
 8003f7c:	68d3      	ldr	r3, [r2, #12]
 8003f7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003f82:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f84:	2320      	movs	r3, #32
 8003f86:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 8003f8a:	4770      	bx	lr

08003f8c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f8c:	6802      	ldr	r2, [r0, #0]
 8003f8e:	68d3      	ldr	r3, [r2, #12]
 8003f90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f94:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f96:	6802      	ldr	r2, [r0, #0]
 8003f98:	6953      	ldr	r3, [r2, #20]
 8003f9a:	f023 0301 	bic.w	r3, r3, #1
 8003f9e:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fa0:	2320      	movs	r3, #32
 8003fa2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8003fa6:	4770      	bx	lr

08003fa8 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fa8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b21      	cmp	r3, #33	; 0x21
 8003fb0:	d12a      	bne.n	8004008 <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003fb2:	6883      	ldr	r3, [r0, #8]
 8003fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb8:	d016      	beq.n	8003fe8 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fba:	6a03      	ldr	r3, [r0, #32]
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	6202      	str	r2, [r0, #32]
 8003fc0:	781a      	ldrb	r2, [r3, #0]
 8003fc2:	6803      	ldr	r3, [r0, #0]
 8003fc4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fc6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	84c3      	strh	r3, [r0, #38]	; 0x26
 8003fce:	b9eb      	cbnz	r3, 800400c <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fd0:	6802      	ldr	r2, [r0, #0]
 8003fd2:	68d3      	ldr	r3, [r2, #12]
 8003fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fd8:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fda:	6802      	ldr	r2, [r0, #0]
 8003fdc:	68d3      	ldr	r3, [r2, #12]
 8003fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fe2:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003fe8:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	6802      	ldr	r2, [r0, #0]
 8003fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff2:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ff4:	6903      	ldr	r3, [r0, #16]
 8003ff6:	b91b      	cbnz	r3, 8004000 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8003ff8:	6a03      	ldr	r3, [r0, #32]
 8003ffa:	3302      	adds	r3, #2
 8003ffc:	6203      	str	r3, [r0, #32]
 8003ffe:	e7e2      	b.n	8003fc6 <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8004000:	6a03      	ldr	r3, [r0, #32]
 8004002:	3301      	adds	r3, #1
 8004004:	6203      	str	r3, [r0, #32]
 8004006:	e7de      	b.n	8003fc6 <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8004008:	2002      	movs	r0, #2
 800400a:	4770      	bx	lr
    return HAL_OK;
 800400c:	2000      	movs	r0, #0
  }
}
 800400e:	4770      	bx	lr

08004010 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004014:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004016:	6802      	ldr	r2, [r0, #0]
 8004018:	6913      	ldr	r3, [r2, #16]
 800401a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800401e:	68c1      	ldr	r1, [r0, #12]
 8004020:	430b      	orrs	r3, r1
 8004022:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004024:	6883      	ldr	r3, [r0, #8]
 8004026:	6902      	ldr	r2, [r0, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	6942      	ldr	r2, [r0, #20]
 800402c:	4313      	orrs	r3, r2
 800402e:	69c2      	ldr	r2, [r0, #28]
 8004030:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8004032:	6801      	ldr	r1, [r0, #0]
 8004034:	68cb      	ldr	r3, [r1, #12]
 8004036:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800403a:	f023 030c 	bic.w	r3, r3, #12
 800403e:	4313      	orrs	r3, r2
 8004040:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004042:	6802      	ldr	r2, [r0, #0]
 8004044:	6953      	ldr	r3, [r2, #20]
 8004046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404a:	6981      	ldr	r1, [r0, #24]
 800404c:	430b      	orrs	r3, r1
 800404e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004050:	69c3      	ldr	r3, [r0, #28]
 8004052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004056:	d060      	beq.n	800411a <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004058:	6803      	ldr	r3, [r0, #0]
 800405a:	4ab8      	ldr	r2, [pc, #736]	; (800433c <UART_SetConfig+0x32c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	f000 8114 	beq.w	800428a <UART_SetConfig+0x27a>
 8004062:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004066:	4293      	cmp	r3, r2
 8004068:	f000 810f 	beq.w	800428a <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800406c:	f7ff f846 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 8004070:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004074:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004078:	6865      	ldr	r5, [r4, #4]
 800407a:	00ad      	lsls	r5, r5, #2
 800407c:	fbb0 f5f5 	udiv	r5, r0, r5
 8004080:	4faf      	ldr	r7, [pc, #700]	; (8004340 <UART_SetConfig+0x330>)
 8004082:	fba7 3505 	umull	r3, r5, r7, r5
 8004086:	096d      	lsrs	r5, r5, #5
 8004088:	012e      	lsls	r6, r5, #4
 800408a:	f7ff f837 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 800408e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004092:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004096:	6865      	ldr	r5, [r4, #4]
 8004098:	00ad      	lsls	r5, r5, #2
 800409a:	fbb0 f9f5 	udiv	r9, r0, r5
 800409e:	f7ff f82d 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 80040a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040aa:	6865      	ldr	r5, [r4, #4]
 80040ac:	00ad      	lsls	r5, r5, #2
 80040ae:	fbb0 f5f5 	udiv	r5, r0, r5
 80040b2:	fba7 3505 	umull	r3, r5, r7, r5
 80040b6:	096d      	lsrs	r5, r5, #5
 80040b8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80040bc:	fb08 9515 	mls	r5, r8, r5, r9
 80040c0:	012d      	lsls	r5, r5, #4
 80040c2:	3532      	adds	r5, #50	; 0x32
 80040c4:	fba7 3505 	umull	r3, r5, r7, r5
 80040c8:	096d      	lsrs	r5, r5, #5
 80040ca:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80040ce:	4435      	add	r5, r6
 80040d0:	f7ff f814 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 80040d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040dc:	6866      	ldr	r6, [r4, #4]
 80040de:	00b6      	lsls	r6, r6, #2
 80040e0:	fbb0 f6f6 	udiv	r6, r0, r6
 80040e4:	f7ff f80a 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 80040e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040f0:	6863      	ldr	r3, [r4, #4]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80040f8:	fba7 3000 	umull	r3, r0, r7, r0
 80040fc:	0940      	lsrs	r0, r0, #5
 80040fe:	fb08 6810 	mls	r8, r8, r0, r6
 8004102:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8004106:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800410a:	fba7 3708 	umull	r3, r7, r7, r8
 800410e:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	442f      	add	r7, r5
 8004116:	609f      	str	r7, [r3, #8]
    }
  }
}
 8004118:	e10d      	b.n	8004336 <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800411a:	6803      	ldr	r3, [r0, #0]
 800411c:	4a87      	ldr	r2, [pc, #540]	; (800433c <UART_SetConfig+0x32c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d05b      	beq.n	80041da <UART_SetConfig+0x1ca>
 8004122:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004126:	4293      	cmp	r3, r2
 8004128:	d057      	beq.n	80041da <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800412a:	f7fe ffe7 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 800412e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004132:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004136:	6865      	ldr	r5, [r4, #4]
 8004138:	006d      	lsls	r5, r5, #1
 800413a:	fbb0 f5f5 	udiv	r5, r0, r5
 800413e:	4f80      	ldr	r7, [pc, #512]	; (8004340 <UART_SetConfig+0x330>)
 8004140:	fba7 3505 	umull	r3, r5, r7, r5
 8004144:	096d      	lsrs	r5, r5, #5
 8004146:	012e      	lsls	r6, r5, #4
 8004148:	f7fe ffd8 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 800414c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004150:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004154:	6865      	ldr	r5, [r4, #4]
 8004156:	006d      	lsls	r5, r5, #1
 8004158:	fbb0 f9f5 	udiv	r9, r0, r5
 800415c:	f7fe ffce 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 8004160:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004164:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004168:	6865      	ldr	r5, [r4, #4]
 800416a:	006d      	lsls	r5, r5, #1
 800416c:	fbb0 f5f5 	udiv	r5, r0, r5
 8004170:	fba7 3505 	umull	r3, r5, r7, r5
 8004174:	096d      	lsrs	r5, r5, #5
 8004176:	f04f 0864 	mov.w	r8, #100	; 0x64
 800417a:	fb08 9515 	mls	r5, r8, r5, r9
 800417e:	00ed      	lsls	r5, r5, #3
 8004180:	3532      	adds	r5, #50	; 0x32
 8004182:	fba7 3505 	umull	r3, r5, r7, r5
 8004186:	096d      	lsrs	r5, r5, #5
 8004188:	006d      	lsls	r5, r5, #1
 800418a:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800418e:	4435      	add	r5, r6
 8004190:	f7fe ffb4 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 8004194:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004198:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800419c:	6866      	ldr	r6, [r4, #4]
 800419e:	0076      	lsls	r6, r6, #1
 80041a0:	fbb0 f6f6 	udiv	r6, r0, r6
 80041a4:	f7fe ffaa 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 80041a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041b0:	6863      	ldr	r3, [r4, #4]
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b8:	fba7 2303 	umull	r2, r3, r7, r3
 80041bc:	095b      	lsrs	r3, r3, #5
 80041be:	fb08 6813 	mls	r8, r8, r3, r6
 80041c2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80041c6:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80041ca:	fba7 3708 	umull	r3, r7, r7, r8
 80041ce:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	442f      	add	r7, r5
 80041d6:	609f      	str	r7, [r3, #8]
 80041d8:	e0ad      	b.n	8004336 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80041da:	f7fe ff9f 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 80041de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041e6:	6865      	ldr	r5, [r4, #4]
 80041e8:	006d      	lsls	r5, r5, #1
 80041ea:	fbb0 f5f5 	udiv	r5, r0, r5
 80041ee:	4f54      	ldr	r7, [pc, #336]	; (8004340 <UART_SetConfig+0x330>)
 80041f0:	fba7 3505 	umull	r3, r5, r7, r5
 80041f4:	096d      	lsrs	r5, r5, #5
 80041f6:	012e      	lsls	r6, r5, #4
 80041f8:	f7fe ff90 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 80041fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004200:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004204:	6865      	ldr	r5, [r4, #4]
 8004206:	006d      	lsls	r5, r5, #1
 8004208:	fbb0 f9f5 	udiv	r9, r0, r5
 800420c:	f7fe ff86 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 8004210:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004214:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004218:	6865      	ldr	r5, [r4, #4]
 800421a:	006d      	lsls	r5, r5, #1
 800421c:	fbb0 f5f5 	udiv	r5, r0, r5
 8004220:	fba7 3505 	umull	r3, r5, r7, r5
 8004224:	096d      	lsrs	r5, r5, #5
 8004226:	f04f 0864 	mov.w	r8, #100	; 0x64
 800422a:	fb08 9515 	mls	r5, r8, r5, r9
 800422e:	00ed      	lsls	r5, r5, #3
 8004230:	3532      	adds	r5, #50	; 0x32
 8004232:	fba7 3505 	umull	r3, r5, r7, r5
 8004236:	096d      	lsrs	r5, r5, #5
 8004238:	006d      	lsls	r5, r5, #1
 800423a:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800423e:	4435      	add	r5, r6
 8004240:	f7fe ff6c 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 8004244:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004248:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800424c:	6866      	ldr	r6, [r4, #4]
 800424e:	0076      	lsls	r6, r6, #1
 8004250:	fbb0 f6f6 	udiv	r6, r0, r6
 8004254:	f7fe ff62 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 8004258:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800425c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004260:	6863      	ldr	r3, [r4, #4]
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	fbb0 f3f3 	udiv	r3, r0, r3
 8004268:	fba7 2303 	umull	r2, r3, r7, r3
 800426c:	095b      	lsrs	r3, r3, #5
 800426e:	fb08 6813 	mls	r8, r8, r3, r6
 8004272:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8004276:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800427a:	fba7 3708 	umull	r3, r7, r7, r8
 800427e:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	442f      	add	r7, r5
 8004286:	609f      	str	r7, [r3, #8]
 8004288:	e055      	b.n	8004336 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800428a:	f7fe ff47 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 800428e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004292:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004296:	6865      	ldr	r5, [r4, #4]
 8004298:	00ad      	lsls	r5, r5, #2
 800429a:	fbb0 f5f5 	udiv	r5, r0, r5
 800429e:	4f28      	ldr	r7, [pc, #160]	; (8004340 <UART_SetConfig+0x330>)
 80042a0:	fba7 3505 	umull	r3, r5, r7, r5
 80042a4:	096d      	lsrs	r5, r5, #5
 80042a6:	012e      	lsls	r6, r5, #4
 80042a8:	f7fe ff38 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 80042ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80042b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80042b4:	6865      	ldr	r5, [r4, #4]
 80042b6:	00ad      	lsls	r5, r5, #2
 80042b8:	fbb0 f9f5 	udiv	r9, r0, r5
 80042bc:	f7fe ff2e 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 80042c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80042c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80042c8:	6865      	ldr	r5, [r4, #4]
 80042ca:	00ad      	lsls	r5, r5, #2
 80042cc:	fbb0 f5f5 	udiv	r5, r0, r5
 80042d0:	fba7 3505 	umull	r3, r5, r7, r5
 80042d4:	096d      	lsrs	r5, r5, #5
 80042d6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80042da:	fb08 9515 	mls	r5, r8, r5, r9
 80042de:	012d      	lsls	r5, r5, #4
 80042e0:	3532      	adds	r5, #50	; 0x32
 80042e2:	fba7 3505 	umull	r3, r5, r7, r5
 80042e6:	096d      	lsrs	r5, r5, #5
 80042e8:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80042ec:	4435      	add	r5, r6
 80042ee:	f7fe ff15 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 80042f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80042f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80042fa:	6866      	ldr	r6, [r4, #4]
 80042fc:	00b6      	lsls	r6, r6, #2
 80042fe:	fbb0 f6f6 	udiv	r6, r0, r6
 8004302:	f7fe ff0b 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 8004306:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800430a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800430e:	6863      	ldr	r3, [r4, #4]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	fbb0 f0f3 	udiv	r0, r0, r3
 8004316:	fba7 3000 	umull	r3, r0, r7, r0
 800431a:	0940      	lsrs	r0, r0, #5
 800431c:	fb08 6810 	mls	r8, r8, r0, r6
 8004320:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8004324:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8004328:	fba7 3708 	umull	r3, r7, r7, r8
 800432c:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	442f      	add	r7, r5
 8004334:	609f      	str	r7, [r3, #8]
}
 8004336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800433a:	bf00      	nop
 800433c:	40011000 	.word	0x40011000
 8004340:	51eb851f 	.word	0x51eb851f

08004344 <UART_WaitOnFlagUntilTimeout>:
{
 8004344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004348:	4605      	mov	r5, r0
 800434a:	460f      	mov	r7, r1
 800434c:	4616      	mov	r6, r2
 800434e:	4698      	mov	r8, r3
 8004350:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004352:	682b      	ldr	r3, [r5, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	ea37 0303 	bics.w	r3, r7, r3
 800435a:	bf0c      	ite	eq
 800435c:	2301      	moveq	r3, #1
 800435e:	2300      	movne	r3, #0
 8004360:	42b3      	cmp	r3, r6
 8004362:	d11d      	bne.n	80043a0 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8004364:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004368:	d0f3      	beq.n	8004352 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800436a:	b12c      	cbz	r4, 8004378 <UART_WaitOnFlagUntilTimeout+0x34>
 800436c:	f7fd fe10 	bl	8001f90 <HAL_GetTick>
 8004370:	eba0 0008 	sub.w	r0, r0, r8
 8004374:	42a0      	cmp	r0, r4
 8004376:	d9ec      	bls.n	8004352 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004378:	682a      	ldr	r2, [r5, #0]
 800437a:	68d3      	ldr	r3, [r2, #12]
 800437c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004380:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004382:	682a      	ldr	r2, [r5, #0]
 8004384:	6953      	ldr	r3, [r2, #20]
 8004386:	f023 0301 	bic.w	r3, r3, #1
 800438a:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800438c:	2320      	movs	r3, #32
 800438e:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004392:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8004396:	2300      	movs	r3, #0
 8004398:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 800439c:	2003      	movs	r0, #3
 800439e:	e000      	b.n	80043a2 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 80043a0:	2000      	movs	r0, #0
}
 80043a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080043a6 <HAL_UART_Init>:
  if (huart == NULL)
 80043a6:	b358      	cbz	r0, 8004400 <HAL_UART_Init+0x5a>
{
 80043a8:	b510      	push	{r4, lr}
 80043aa:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80043ac:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80043b0:	b30b      	cbz	r3, 80043f6 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80043b2:	2324      	movs	r3, #36	; 0x24
 80043b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80043b8:	6822      	ldr	r2, [r4, #0]
 80043ba:	68d3      	ldr	r3, [r2, #12]
 80043bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043c0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80043c2:	4620      	mov	r0, r4
 80043c4:	f7ff fe24 	bl	8004010 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043c8:	6822      	ldr	r2, [r4, #0]
 80043ca:	6913      	ldr	r3, [r2, #16]
 80043cc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80043d0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043d2:	6822      	ldr	r2, [r4, #0]
 80043d4:	6953      	ldr	r3, [r2, #20]
 80043d6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80043da:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80043dc:	6822      	ldr	r2, [r4, #0]
 80043de:	68d3      	ldr	r3, [r2, #12]
 80043e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043e4:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e6:	2000      	movs	r0, #0
 80043e8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80043ea:	2320      	movs	r3, #32
 80043ec:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80043f0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80043f4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80043f6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80043fa:	f003 fa6d 	bl	80078d8 <HAL_UART_MspInit>
 80043fe:	e7d8      	b.n	80043b2 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004400:	2001      	movs	r0, #1
}
 8004402:	4770      	bx	lr

08004404 <HAL_UART_Transmit>:
{
 8004404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800440c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b20      	cmp	r3, #32
 8004414:	d155      	bne.n	80044c2 <HAL_UART_Transmit+0xbe>
 8004416:	4604      	mov	r4, r0
 8004418:	460d      	mov	r5, r1
 800441a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800441c:	2900      	cmp	r1, #0
 800441e:	d055      	beq.n	80044cc <HAL_UART_Transmit+0xc8>
 8004420:	2a00      	cmp	r2, #0
 8004422:	d055      	beq.n	80044d0 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8004424:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004428:	2b01      	cmp	r3, #1
 800442a:	d053      	beq.n	80044d4 <HAL_UART_Transmit+0xd0>
 800442c:	2301      	movs	r3, #1
 800442e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004432:	2300      	movs	r3, #0
 8004434:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004436:	2321      	movs	r3, #33	; 0x21
 8004438:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800443c:	f7fd fda8 	bl	8001f90 <HAL_GetTick>
 8004440:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8004442:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8004446:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800444a:	e010      	b.n	800446e <HAL_UART_Transmit+0x6a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800444c:	9600      	str	r6, [sp, #0]
 800444e:	463b      	mov	r3, r7
 8004450:	2200      	movs	r2, #0
 8004452:	2180      	movs	r1, #128	; 0x80
 8004454:	4620      	mov	r0, r4
 8004456:	f7ff ff75 	bl	8004344 <UART_WaitOnFlagUntilTimeout>
 800445a:	2800      	cmp	r0, #0
 800445c:	d13c      	bne.n	80044d8 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800445e:	882b      	ldrh	r3, [r5, #0]
 8004460:	6822      	ldr	r2, [r4, #0]
 8004462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004466:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004468:	6923      	ldr	r3, [r4, #16]
 800446a:	b9c3      	cbnz	r3, 800449e <HAL_UART_Transmit+0x9a>
          pData += 2U;
 800446c:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 800446e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004470:	b29b      	uxth	r3, r3
 8004472:	b1b3      	cbz	r3, 80044a2 <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 8004474:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004476:	3b01      	subs	r3, #1
 8004478:	b29b      	uxth	r3, r3
 800447a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800447c:	68a3      	ldr	r3, [r4, #8]
 800447e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004482:	d0e3      	beq.n	800444c <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004484:	9600      	str	r6, [sp, #0]
 8004486:	463b      	mov	r3, r7
 8004488:	2200      	movs	r2, #0
 800448a:	2180      	movs	r1, #128	; 0x80
 800448c:	4620      	mov	r0, r4
 800448e:	f7ff ff59 	bl	8004344 <UART_WaitOnFlagUntilTimeout>
 8004492:	bb18      	cbnz	r0, 80044dc <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004494:	782a      	ldrb	r2, [r5, #0]
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	3501      	adds	r5, #1
 800449c:	e7e7      	b.n	800446e <HAL_UART_Transmit+0x6a>
          pData += 1U;
 800449e:	3501      	adds	r5, #1
 80044a0:	e7e5      	b.n	800446e <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044a2:	9600      	str	r6, [sp, #0]
 80044a4:	463b      	mov	r3, r7
 80044a6:	2200      	movs	r2, #0
 80044a8:	2140      	movs	r1, #64	; 0x40
 80044aa:	4620      	mov	r0, r4
 80044ac:	f7ff ff4a 	bl	8004344 <UART_WaitOnFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	b9a8      	cbnz	r0, 80044e0 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 80044b4:	2220      	movs	r2, #32
 80044b6:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80044ba:	2200      	movs	r2, #0
 80044bc:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 80044c0:	e000      	b.n	80044c4 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 80044c2:	2302      	movs	r3, #2
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	b002      	add	sp, #8
 80044c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e7f9      	b.n	80044c4 <HAL_UART_Transmit+0xc0>
 80044d0:	2301      	movs	r3, #1
 80044d2:	e7f7      	b.n	80044c4 <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 80044d4:	2302      	movs	r3, #2
 80044d6:	e7f5      	b.n	80044c4 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e7f3      	b.n	80044c4 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e7f1      	b.n	80044c4 <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e7ef      	b.n	80044c4 <HAL_UART_Transmit+0xc0>

080044e4 <HAL_UART_Receive_DMA>:
{
 80044e4:	b530      	push	{r4, r5, lr}
 80044e6:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 80044e8:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 80044ec:	b2e4      	uxtb	r4, r4
 80044ee:	2c20      	cmp	r4, #32
 80044f0:	d13d      	bne.n	800456e <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 80044f2:	2900      	cmp	r1, #0
 80044f4:	d03e      	beq.n	8004574 <HAL_UART_Receive_DMA+0x90>
 80044f6:	2a00      	cmp	r2, #0
 80044f8:	d03e      	beq.n	8004578 <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 80044fa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d03c      	beq.n	800457c <HAL_UART_Receive_DMA+0x98>
 8004502:	4613      	mov	r3, r2
 8004504:	460a      	mov	r2, r1
 8004506:	4604      	mov	r4, r0
 8004508:	2101      	movs	r1, #1
 800450a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 800450e:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8004510:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004512:	2500      	movs	r5, #0
 8004514:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004516:	2122      	movs	r1, #34	; 0x22
 8004518:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800451c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800451e:	4818      	ldr	r0, [pc, #96]	; (8004580 <HAL_UART_Receive_DMA+0x9c>)
 8004520:	63c8      	str	r0, [r1, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004522:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004524:	4817      	ldr	r0, [pc, #92]	; (8004584 <HAL_UART_Receive_DMA+0xa0>)
 8004526:	6408      	str	r0, [r1, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800452a:	4817      	ldr	r0, [pc, #92]	; (8004588 <HAL_UART_Receive_DMA+0xa4>)
 800452c:	64c8      	str	r0, [r1, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 800452e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004530:	650d      	str	r5, [r1, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004532:	6821      	ldr	r1, [r4, #0]
 8004534:	3104      	adds	r1, #4
 8004536:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004538:	f7fd fe8c 	bl	8002254 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 800453c:	9501      	str	r5, [sp, #4]
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	9201      	str	r2, [sp, #4]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	9201      	str	r2, [sp, #4]
 8004548:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 800454a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004554:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004556:	6822      	ldr	r2, [r4, #0]
 8004558:	6953      	ldr	r3, [r2, #20]
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004560:	6822      	ldr	r2, [r4, #0]
 8004562:	6953      	ldr	r3, [r2, #20]
 8004564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004568:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 800456a:	4628      	mov	r0, r5
 800456c:	e000      	b.n	8004570 <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 800456e:	2002      	movs	r0, #2
}
 8004570:	b003      	add	sp, #12
 8004572:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8004574:	2001      	movs	r0, #1
 8004576:	e7fb      	b.n	8004570 <HAL_UART_Receive_DMA+0x8c>
 8004578:	2001      	movs	r0, #1
 800457a:	e7f9      	b.n	8004570 <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 800457c:	2002      	movs	r0, #2
 800457e:	e7f7      	b.n	8004570 <HAL_UART_Receive_DMA+0x8c>
 8004580:	080045ab 	.word	0x080045ab
 8004584:	08004687 	.word	0x08004687
 8004588:	08004693 	.word	0x08004693

0800458c <HAL_UART_TxCpltCallback>:
}
 800458c:	4770      	bx	lr

0800458e <UART_EndTransmit_IT>:
{
 800458e:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004590:	6801      	ldr	r1, [r0, #0]
 8004592:	68cb      	ldr	r3, [r1, #12]
 8004594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004598:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800459a:	2320      	movs	r3, #32
 800459c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80045a0:	f7ff fff4 	bl	800458c <HAL_UART_TxCpltCallback>
}
 80045a4:	2000      	movs	r0, #0
 80045a6:	bd08      	pop	{r3, pc}

080045a8 <HAL_UART_RxCpltCallback>:
}
 80045a8:	4770      	bx	lr

080045aa <UART_DMAReceiveCplt>:
{
 80045aa:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80045ae:	6802      	ldr	r2, [r0, #0]
 80045b0:	6812      	ldr	r2, [r2, #0]
 80045b2:	f412 7f80 	tst.w	r2, #256	; 0x100
 80045b6:	d113      	bne.n	80045e0 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 80045b8:	2200      	movs	r2, #0
 80045ba:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045bc:	6819      	ldr	r1, [r3, #0]
 80045be:	68ca      	ldr	r2, [r1, #12]
 80045c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045c4:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c6:	6819      	ldr	r1, [r3, #0]
 80045c8:	694a      	ldr	r2, [r1, #20]
 80045ca:	f022 0201 	bic.w	r2, r2, #1
 80045ce:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045d0:	6819      	ldr	r1, [r3, #0]
 80045d2:	694a      	ldr	r2, [r1, #20]
 80045d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d8:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff ffe1 	bl	80045a8 <HAL_UART_RxCpltCallback>
}
 80045e6:	bd08      	pop	{r3, pc}

080045e8 <UART_Receive_IT>:
{
 80045e8:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045ea:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b22      	cmp	r3, #34	; 0x22
 80045f2:	d145      	bne.n	8004680 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045f4:	6883      	ldr	r3, [r0, #8]
 80045f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045fa:	d00e      	beq.n	800461a <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 80045fc:	6903      	ldr	r3, [r0, #16]
 80045fe:	bb03      	cbnz	r3, 8004642 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004600:	6803      	ldr	r3, [r0, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004606:	1c59      	adds	r1, r3, #1
 8004608:	6281      	str	r1, [r0, #40]	; 0x28
 800460a:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 800460c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800460e:	3b01      	subs	r3, #1
 8004610:	b29b      	uxth	r3, r3
 8004612:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004614:	b1f3      	cbz	r3, 8004654 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8004616:	2000      	movs	r0, #0
 8004618:	e033      	b.n	8004682 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800461a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 800461c:	6903      	ldr	r3, [r0, #16]
 800461e:	b943      	cbnz	r3, 8004632 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004620:	6803      	ldr	r3, [r0, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004628:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 800462a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800462c:	3302      	adds	r3, #2
 800462e:	6283      	str	r3, [r0, #40]	; 0x28
 8004630:	e7ec      	b.n	800460c <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004632:	6803      	ldr	r3, [r0, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 800463a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800463c:	3301      	adds	r3, #1
 800463e:	6283      	str	r3, [r0, #40]	; 0x28
 8004640:	e7e4      	b.n	800460c <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004642:	6803      	ldr	r3, [r0, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004648:	1c51      	adds	r1, r2, #1
 800464a:	6281      	str	r1, [r0, #40]	; 0x28
 800464c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004650:	7013      	strb	r3, [r2, #0]
 8004652:	e7db      	b.n	800460c <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004654:	6802      	ldr	r2, [r0, #0]
 8004656:	68d3      	ldr	r3, [r2, #12]
 8004658:	f023 0320 	bic.w	r3, r3, #32
 800465c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800465e:	6802      	ldr	r2, [r0, #0]
 8004660:	68d3      	ldr	r3, [r2, #12]
 8004662:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004666:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004668:	6802      	ldr	r2, [r0, #0]
 800466a:	6953      	ldr	r3, [r2, #20]
 800466c:	f023 0301 	bic.w	r3, r3, #1
 8004670:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004672:	2320      	movs	r3, #32
 8004674:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8004678:	f7ff ff96 	bl	80045a8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 800467c:	2000      	movs	r0, #0
 800467e:	e000      	b.n	8004682 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8004680:	2002      	movs	r0, #2
}
 8004682:	bd08      	pop	{r3, pc}

08004684 <HAL_UART_RxHalfCpltCallback>:
}
 8004684:	4770      	bx	lr

08004686 <UART_DMARxHalfCplt>:
{
 8004686:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8004688:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800468a:	f7ff fffb 	bl	8004684 <HAL_UART_RxHalfCpltCallback>
}
 800468e:	bd08      	pop	{r3, pc}

08004690 <HAL_UART_ErrorCallback>:
}
 8004690:	4770      	bx	lr

08004692 <UART_DMAError>:
{
 8004692:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004694:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800469a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b21      	cmp	r3, #33	; 0x21
 80046a2:	d010      	beq.n	80046c6 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	695a      	ldr	r2, [r3, #20]
 80046a8:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80046ac:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b22      	cmp	r3, #34	; 0x22
 80046b4:	d011      	beq.n	80046da <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80046b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80046b8:	f043 0310 	orr.w	r3, r3, #16
 80046bc:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80046be:	4620      	mov	r0, r4
 80046c0:	f7ff ffe6 	bl	8004690 <HAL_UART_ErrorCallback>
}
 80046c4:	bd10      	pop	{r4, pc}
 80046c6:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80046ca:	2a00      	cmp	r2, #0
 80046cc:	d0ea      	beq.n	80046a4 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80046d2:	4620      	mov	r0, r4
 80046d4:	f7ff fc51 	bl	8003f7a <UART_EndTxTransfer>
 80046d8:	e7e4      	b.n	80046a4 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80046da:	2a00      	cmp	r2, #0
 80046dc:	d0eb      	beq.n	80046b6 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 80046de:	2300      	movs	r3, #0
 80046e0:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80046e2:	4620      	mov	r0, r4
 80046e4:	f7ff fc52 	bl	8003f8c <UART_EndRxTransfer>
 80046e8:	e7e5      	b.n	80046b6 <UART_DMAError+0x24>

080046ea <UART_DMAAbortOnError>:
{
 80046ea:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046ec:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046f2:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80046f4:	f7ff ffcc 	bl	8004690 <HAL_UART_ErrorCallback>
}
 80046f8:	bd08      	pop	{r3, pc}
	...

080046fc <HAL_UART_IRQHandler>:
{
 80046fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046fe:	b083      	sub	sp, #12
 8004700:	4605      	mov	r5, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004702:	6803      	ldr	r3, [r0, #0]
 8004704:	681c      	ldr	r4, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004706:	68df      	ldr	r7, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004708:	695e      	ldr	r6, [r3, #20]
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 800470a:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE);
 800470c:	68da      	ldr	r2, [r3, #12]
    if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800470e:	f011 0f10 	tst.w	r1, #16
 8004712:	d003      	beq.n	800471c <HAL_UART_IRQHandler+0x20>
 8004714:	f002 0210 	and.w	r2, r2, #16
 8004718:	2a00      	cmp	r2, #0
 800471a:	d15d      	bne.n	80047d8 <HAL_UART_IRQHandler+0xdc>
  if (errorflags == RESET)
 800471c:	f014 030f 	ands.w	r3, r4, #15
 8004720:	d105      	bne.n	800472e <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004722:	f014 0f20 	tst.w	r4, #32
 8004726:	d002      	beq.n	800472e <HAL_UART_IRQHandler+0x32>
 8004728:	f017 0f20 	tst.w	r7, #32
 800472c:	d15e      	bne.n	80047ec <HAL_UART_IRQHandler+0xf0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800472e:	2b00      	cmp	r3, #0
 8004730:	d072      	beq.n	8004818 <HAL_UART_IRQHandler+0x11c>
 8004732:	f016 0601 	ands.w	r6, r6, #1
 8004736:	d102      	bne.n	800473e <HAL_UART_IRQHandler+0x42>
 8004738:	f417 7f90 	tst.w	r7, #288	; 0x120
 800473c:	d06c      	beq.n	8004818 <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800473e:	f014 0f01 	tst.w	r4, #1
 8004742:	d006      	beq.n	8004752 <HAL_UART_IRQHandler+0x56>
 8004744:	f417 7f80 	tst.w	r7, #256	; 0x100
 8004748:	d003      	beq.n	8004752 <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800474a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004752:	f014 0f04 	tst.w	r4, #4
 8004756:	d004      	beq.n	8004762 <HAL_UART_IRQHandler+0x66>
 8004758:	b11e      	cbz	r6, 8004762 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800475a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800475c:	f043 0302 	orr.w	r3, r3, #2
 8004760:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004762:	f014 0f02 	tst.w	r4, #2
 8004766:	d004      	beq.n	8004772 <HAL_UART_IRQHandler+0x76>
 8004768:	b11e      	cbz	r6, 8004772 <HAL_UART_IRQHandler+0x76>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800476a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800476c:	f043 0304 	orr.w	r3, r3, #4
 8004770:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004772:	f014 0f08 	tst.w	r4, #8
 8004776:	d004      	beq.n	8004782 <HAL_UART_IRQHandler+0x86>
 8004778:	b11e      	cbz	r6, 8004782 <HAL_UART_IRQHandler+0x86>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800477a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800477c:	f043 0308 	orr.w	r3, r3, #8
 8004780:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004782:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004784:	2b00      	cmp	r3, #0
 8004786:	d053      	beq.n	8004830 <HAL_UART_IRQHandler+0x134>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004788:	f014 0f20 	tst.w	r4, #32
 800478c:	d002      	beq.n	8004794 <HAL_UART_IRQHandler+0x98>
 800478e:	f017 0f20 	tst.w	r7, #32
 8004792:	d12f      	bne.n	80047f4 <HAL_UART_IRQHandler+0xf8>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004794:	682b      	ldr	r3, [r5, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800479c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800479e:	f012 0f08 	tst.w	r2, #8
 80047a2:	d101      	bne.n	80047a8 <HAL_UART_IRQHandler+0xac>
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d031      	beq.n	800480c <HAL_UART_IRQHandler+0x110>
        UART_EndRxTransfer(huart);
 80047a8:	4628      	mov	r0, r5
 80047aa:	f7ff fbef 	bl	8003f8c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ae:	682b      	ldr	r3, [r5, #0]
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80047b6:	d025      	beq.n	8004804 <HAL_UART_IRQHandler+0x108>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047b8:	695a      	ldr	r2, [r3, #20]
 80047ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047be:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80047c0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80047c2:	b1db      	cbz	r3, 80047fc <HAL_UART_IRQHandler+0x100>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047c4:	4a1f      	ldr	r2, [pc, #124]	; (8004844 <HAL_UART_IRQHandler+0x148>)
 80047c6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047c8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80047ca:	f7fd fdc7 	bl	800235c <HAL_DMA_Abort_IT>
 80047ce:	b378      	cbz	r0, 8004830 <HAL_UART_IRQHandler+0x134>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047d0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80047d2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80047d4:	4798      	blx	r3
 80047d6:	e02b      	b.n	8004830 <HAL_UART_IRQHandler+0x134>
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047d8:	2200      	movs	r2, #0
 80047da:	9201      	str	r2, [sp, #4]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	9201      	str	r2, [sp, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	9301      	str	r3, [sp, #4]
 80047e4:	9b01      	ldr	r3, [sp, #4]
      HAL_UART_RxIdleCallback(huart);
 80047e6:	f003 f8db 	bl	80079a0 <HAL_UART_RxIdleCallback>
 80047ea:	e797      	b.n	800471c <HAL_UART_IRQHandler+0x20>
      UART_Receive_IT(huart);
 80047ec:	4628      	mov	r0, r5
 80047ee:	f7ff fefb 	bl	80045e8 <UART_Receive_IT>
      return;
 80047f2:	e01d      	b.n	8004830 <HAL_UART_IRQHandler+0x134>
        UART_Receive_IT(huart);
 80047f4:	4628      	mov	r0, r5
 80047f6:	f7ff fef7 	bl	80045e8 <UART_Receive_IT>
 80047fa:	e7cb      	b.n	8004794 <HAL_UART_IRQHandler+0x98>
            HAL_UART_ErrorCallback(huart);
 80047fc:	4628      	mov	r0, r5
 80047fe:	f7ff ff47 	bl	8004690 <HAL_UART_ErrorCallback>
 8004802:	e015      	b.n	8004830 <HAL_UART_IRQHandler+0x134>
          HAL_UART_ErrorCallback(huart);
 8004804:	4628      	mov	r0, r5
 8004806:	f7ff ff43 	bl	8004690 <HAL_UART_ErrorCallback>
 800480a:	e011      	b.n	8004830 <HAL_UART_IRQHandler+0x134>
        HAL_UART_ErrorCallback(huart);
 800480c:	4628      	mov	r0, r5
 800480e:	f7ff ff3f 	bl	8004690 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004812:	2300      	movs	r3, #0
 8004814:	63eb      	str	r3, [r5, #60]	; 0x3c
 8004816:	e00b      	b.n	8004830 <HAL_UART_IRQHandler+0x134>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004818:	f014 0f80 	tst.w	r4, #128	; 0x80
 800481c:	d002      	beq.n	8004824 <HAL_UART_IRQHandler+0x128>
 800481e:	f017 0f80 	tst.w	r7, #128	; 0x80
 8004822:	d107      	bne.n	8004834 <HAL_UART_IRQHandler+0x138>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004824:	f014 0f40 	tst.w	r4, #64	; 0x40
 8004828:	d002      	beq.n	8004830 <HAL_UART_IRQHandler+0x134>
 800482a:	f017 0f40 	tst.w	r7, #64	; 0x40
 800482e:	d105      	bne.n	800483c <HAL_UART_IRQHandler+0x140>
}
 8004830:	b003      	add	sp, #12
 8004832:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UART_Transmit_IT(huart);
 8004834:	4628      	mov	r0, r5
 8004836:	f7ff fbb7 	bl	8003fa8 <UART_Transmit_IT>
    return;
 800483a:	e7f9      	b.n	8004830 <HAL_UART_IRQHandler+0x134>
    UART_EndTransmit_IT(huart);
 800483c:	4628      	mov	r0, r5
 800483e:	f7ff fea6 	bl	800458e <UART_EndTransmit_IT>
    return;
 8004842:	e7f5      	b.n	8004830 <HAL_UART_IRQHandler+0x134>
 8004844:	080046eb 	.word	0x080046eb

08004848 <hex2int>:

#define boolstr(s) ((s) ? "true" : "false")

static int hex2int(char c)
{
    if (c >= '0' && c <= '9')
 8004848:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b09      	cmp	r3, #9
 8004850:	d90b      	bls.n	800486a <hex2int+0x22>
        return c - '0';
    if (c >= 'A' && c <= 'F')
 8004852:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b05      	cmp	r3, #5
 800485a:	d908      	bls.n	800486e <hex2int+0x26>
        return c - 'A' + 10;
    if (c >= 'a' && c <= 'f')
 800485c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b05      	cmp	r3, #5
 8004864:	d805      	bhi.n	8004872 <hex2int+0x2a>
        return c - 'a' + 10;
 8004866:	3857      	subs	r0, #87	; 0x57
 8004868:	4770      	bx	lr
        return c - '0';
 800486a:	3830      	subs	r0, #48	; 0x30
 800486c:	4770      	bx	lr
        return c - 'A' + 10;
 800486e:	3837      	subs	r0, #55	; 0x37
 8004870:	4770      	bx	lr
    return -1;
 8004872:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004876:	4770      	bx	lr

08004878 <minmea_check>:

    return checksum;
}

bool minmea_check(const char *sentence, bool strict)
{
 8004878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487a:	4605      	mov	r5, r0
 800487c:	460e      	mov	r6, r1
    uint8_t checksum = 0x00;

    // Sequence length is limited.
    if (strlen(sentence) > MINMEA_MAX_LENGTH + 3)
 800487e:	f7fb fcb9 	bl	80001f4 <strlen>
 8004882:	2853      	cmp	r0, #83	; 0x53
 8004884:	d83d      	bhi.n	8004902 <minmea_check+0x8a>
        return false;

    // A valid sentence starts with "$".
    if (*sentence++ != '$')
 8004886:	1c6c      	adds	r4, r5, #1
 8004888:	782b      	ldrb	r3, [r5, #0]
 800488a:	2b24      	cmp	r3, #36	; 0x24
 800488c:	d001      	beq.n	8004892 <minmea_check+0x1a>
        return false;
 800488e:	2000      	movs	r0, #0
 8004890:	e038      	b.n	8004904 <minmea_check+0x8c>
    uint8_t checksum = 0x00;
 8004892:	2500      	movs	r5, #0
 8004894:	e001      	b.n	800489a <minmea_check+0x22>

    // The optional checksum is an XOR of all bytes between "$" and "*".
    while (*sentence && *sentence != '*' && isprint((unsigned char) *sentence))
        checksum ^= *sentence++;
 8004896:	3401      	adds	r4, #1
 8004898:	405d      	eors	r5, r3
    while (*sentence && *sentence != '*' && isprint((unsigned char) *sentence))
 800489a:	7823      	ldrb	r3, [r4, #0]
 800489c:	b14b      	cbz	r3, 80048b2 <minmea_check+0x3a>
 800489e:	2b2a      	cmp	r3, #42	; 0x2a
 80048a0:	d007      	beq.n	80048b2 <minmea_check+0x3a>
 80048a2:	f003 f939 	bl	8007b18 <__locale_ctype_ptr>
 80048a6:	7823      	ldrb	r3, [r4, #0]
 80048a8:	4418      	add	r0, r3
 80048aa:	7842      	ldrb	r2, [r0, #1]
 80048ac:	f012 0f97 	tst.w	r2, #151	; 0x97
 80048b0:	d1f1      	bne.n	8004896 <minmea_check+0x1e>

    // If checksum is present...
    if (*sentence == '*') {
 80048b2:	7823      	ldrb	r3, [r4, #0]
 80048b4:	2b2a      	cmp	r3, #42	; 0x2a
 80048b6:	d00e      	beq.n	80048d6 <minmea_check+0x5e>
        int expected = upper << 4 | lower;

        // Check for checksum mismatch.
        if (checksum != expected)
            return false;
    } else if (strict) {
 80048b8:	bb4e      	cbnz	r6, 800490e <minmea_check+0x96>
        // Discard non-checksummed frames in strict mode.
        return false;
    }

    // The only stuff allowed at this point is a newline.
    if (*sentence && strcmp(sentence, "\n") && strcmp(sentence, "\r\n"))
 80048ba:	7823      	ldrb	r3, [r4, #0]
 80048bc:	b34b      	cbz	r3, 8004912 <minmea_check+0x9a>
 80048be:	4918      	ldr	r1, [pc, #96]	; (8004920 <minmea_check+0xa8>)
 80048c0:	4620      	mov	r0, r4
 80048c2:	f7fb fc8d 	bl	80001e0 <strcmp>
 80048c6:	b330      	cbz	r0, 8004916 <minmea_check+0x9e>
 80048c8:	4916      	ldr	r1, [pc, #88]	; (8004924 <minmea_check+0xac>)
 80048ca:	4620      	mov	r0, r4
 80048cc:	f7fb fc88 	bl	80001e0 <strcmp>
 80048d0:	bb18      	cbnz	r0, 800491a <minmea_check+0xa2>
        return false;

    return true;
 80048d2:	2001      	movs	r0, #1
 80048d4:	e016      	b.n	8004904 <minmea_check+0x8c>
        int upper = hex2int(*sentence++);
 80048d6:	7860      	ldrb	r0, [r4, #1]
 80048d8:	f7ff ffb6 	bl	8004848 <hex2int>
 80048dc:	4606      	mov	r6, r0
        if (upper == -1)
 80048de:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80048e2:	d010      	beq.n	8004906 <minmea_check+0x8e>
        int lower = hex2int(*sentence++);
 80048e4:	1ce7      	adds	r7, r4, #3
 80048e6:	78a0      	ldrb	r0, [r4, #2]
 80048e8:	f7ff ffae 	bl	8004848 <hex2int>
        if (lower == -1)
 80048ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80048f0:	d00b      	beq.n	800490a <minmea_check+0x92>
        int expected = upper << 4 | lower;
 80048f2:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
        if (checksum != expected)
 80048f6:	4285      	cmp	r5, r0
 80048f8:	d001      	beq.n	80048fe <minmea_check+0x86>
            return false;
 80048fa:	2000      	movs	r0, #0
 80048fc:	e002      	b.n	8004904 <minmea_check+0x8c>
        int lower = hex2int(*sentence++);
 80048fe:	463c      	mov	r4, r7
 8004900:	e7db      	b.n	80048ba <minmea_check+0x42>
        return false;
 8004902:	2000      	movs	r0, #0
}
 8004904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return false;
 8004906:	2000      	movs	r0, #0
 8004908:	e7fc      	b.n	8004904 <minmea_check+0x8c>
            return false;
 800490a:	2000      	movs	r0, #0
 800490c:	e7fa      	b.n	8004904 <minmea_check+0x8c>
        return false;
 800490e:	2000      	movs	r0, #0
 8004910:	e7f8      	b.n	8004904 <minmea_check+0x8c>
    return true;
 8004912:	2001      	movs	r0, #1
 8004914:	e7f6      	b.n	8004904 <minmea_check+0x8c>
 8004916:	2001      	movs	r0, #1
 8004918:	e7f4      	b.n	8004904 <minmea_check+0x8c>
        return false;
 800491a:	2000      	movs	r0, #0
 800491c:	e7f2      	b.n	8004904 <minmea_check+0x8c>
 800491e:	bf00      	nop
 8004920:	0800c080 	.word	0x0800c080
 8004924:	0800bf40 	.word	0x0800bf40

08004928 <minmea_scan>:
static inline bool minmea_isfield(char c) {
    return isprint((unsigned char) c) && c != ',' && c != '*';
}

bool minmea_scan(const char *sentence, const char *format, ...)
{
 8004928:	b40e      	push	{r1, r2, r3}
 800492a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	4604      	mov	r4, r0
 8004932:	ab0f      	add	r3, sp, #60	; 0x3c
 8004934:	f853 6b04 	ldr.w	r6, [r3], #4
    bool result = false;
    bool optional = false;
    va_list ap;
    va_start(ap, format);
 8004938:	9305      	str	r3, [sp, #20]

    const char *field = sentence;
 800493a:	4605      	mov	r5, r0
    bool optional = false;
 800493c:	2700      	movs	r7, #0
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 800493e:	e2b4      	b.n	8004eaa <minmea_scan+0x582>
            // All further fields are optional.
            optional = true;
            continue;
        }

        if (!field && !optional) {
 8004940:	2f00      	cmp	r7, #0
 8004942:	f040 82bb 	bne.w	8004ebc <minmea_scan+0x594>
    bool result = false;
 8004946:	4638      	mov	r0, r7
 8004948:	e328      	b.n	8004f9c <minmea_scan+0x674>

        switch (type) {
            case 'c': { // Single character field (char).
                char value = '\0';

                if (field && minmea_isfield(*field))
 800494a:	b1c5      	cbz	r5, 800497e <minmea_scan+0x56>
 800494c:	f895 8000 	ldrb.w	r8, [r5]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8004950:	f003 f8e2 	bl	8007b18 <__locale_ctype_ptr>
 8004954:	4440      	add	r0, r8
 8004956:	7843      	ldrb	r3, [r0, #1]
 8004958:	f013 0f97 	tst.w	r3, #151	; 0x97
 800495c:	d009      	beq.n	8004972 <minmea_scan+0x4a>
 800495e:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
 8004962:	d00a      	beq.n	800497a <minmea_scan+0x52>
 8004964:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 8004968:	d001      	beq.n	800496e <minmea_scan+0x46>
 800496a:	2301      	movs	r3, #1
 800496c:	e002      	b.n	8004974 <minmea_scan+0x4c>
 800496e:	2300      	movs	r3, #0
 8004970:	e000      	b.n	8004974 <minmea_scan+0x4c>
 8004972:	2300      	movs	r3, #0
                if (field && minmea_isfield(*field))
 8004974:	b153      	cbz	r3, 800498c <minmea_scan+0x64>
                    value = *field;
 8004976:	7829      	ldrb	r1, [r5, #0]
 8004978:	e002      	b.n	8004980 <minmea_scan+0x58>
    return isprint((unsigned char) c) && c != ',' && c != '*';
 800497a:	2300      	movs	r3, #0
 800497c:	e7fa      	b.n	8004974 <minmea_scan+0x4c>
                char value = '\0';
 800497e:	2100      	movs	r1, #0

                *va_arg(ap, char *) = value;
 8004980:	9b05      	ldr	r3, [sp, #20]
 8004982:	1d1a      	adds	r2, r3, #4
 8004984:	9205      	str	r2, [sp, #20]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	7019      	strb	r1, [r3, #0]
            } break;
 800498a:	e27a      	b.n	8004e82 <minmea_scan+0x55a>
                char value = '\0';
 800498c:	2100      	movs	r1, #0
 800498e:	e7f7      	b.n	8004980 <minmea_scan+0x58>

            case 'd': { // Single character direction field (int).
                int value = 0;

                if (field && minmea_isfield(*field)) {
 8004990:	b395      	cbz	r5, 80049f8 <minmea_scan+0xd0>
 8004992:	f895 8000 	ldrb.w	r8, [r5]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8004996:	f003 f8bf 	bl	8007b18 <__locale_ctype_ptr>
 800499a:	4440      	add	r0, r8
 800499c:	7843      	ldrb	r3, [r0, #1]
 800499e:	f013 0f97 	tst.w	r3, #151	; 0x97
 80049a2:	d009      	beq.n	80049b8 <minmea_scan+0x90>
 80049a4:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
 80049a8:	d022      	beq.n	80049f0 <minmea_scan+0xc8>
 80049aa:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 80049ae:	d001      	beq.n	80049b4 <minmea_scan+0x8c>
 80049b0:	2301      	movs	r3, #1
 80049b2:	e002      	b.n	80049ba <minmea_scan+0x92>
 80049b4:	2300      	movs	r3, #0
 80049b6:	e000      	b.n	80049ba <minmea_scan+0x92>
 80049b8:	2300      	movs	r3, #0
                if (field && minmea_isfield(*field)) {
 80049ba:	b1fb      	cbz	r3, 80049fc <minmea_scan+0xd4>
                    switch (*field) {
 80049bc:	782b      	ldrb	r3, [r5, #0]
 80049be:	3b45      	subs	r3, #69	; 0x45
 80049c0:	2b12      	cmp	r3, #18
 80049c2:	f200 82f0 	bhi.w	8004fa6 <minmea_scan+0x67e>
 80049c6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80049ca:	0015      	.short	0x0015
 80049cc:	02ee02ee 	.word	0x02ee02ee
 80049d0:	02ee02ee 	.word	0x02ee02ee
 80049d4:	02ee02ee 	.word	0x02ee02ee
 80049d8:	02ee02ee 	.word	0x02ee02ee
 80049dc:	02ee0015 	.word	0x02ee0015
 80049e0:	02ee02ee 	.word	0x02ee02ee
 80049e4:	002002ee 	.word	0x002002ee
 80049e8:	02ee02ee 	.word	0x02ee02ee
 80049ec:	002002ee 	.word	0x002002ee
    return isprint((unsigned char) c) && c != ',' && c != '*';
 80049f0:	2300      	movs	r3, #0
 80049f2:	e7e2      	b.n	80049ba <minmea_scan+0x92>
                        case 'N':
                        case 'E':
                            value = 1;
 80049f4:	2101      	movs	r1, #1
 80049f6:	e002      	b.n	80049fe <minmea_scan+0xd6>
                int value = 0;
 80049f8:	2100      	movs	r1, #0
 80049fa:	e000      	b.n	80049fe <minmea_scan+0xd6>
 80049fc:	2100      	movs	r1, #0
                        default:
                            goto parse_error;
                    }
                }

                *va_arg(ap, int *) = value;
 80049fe:	9b05      	ldr	r3, [sp, #20]
 8004a00:	1d1a      	adds	r2, r3, #4
 8004a02:	9205      	str	r2, [sp, #20]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6019      	str	r1, [r3, #0]
            } break;
 8004a08:	e23b      	b.n	8004e82 <minmea_scan+0x55a>
                            value = -1;
 8004a0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a0e:	e7f6      	b.n	80049fe <minmea_scan+0xd6>
            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
                int_least32_t value = -1;
                int_least32_t scale = 0;

                if (field) {
 8004a10:	2d00      	cmp	r5, #0
 8004a12:	d154      	bne.n	8004abe <minmea_scan+0x196>
                int_least32_t scale = 0;
 8004a14:	f04f 0900 	mov.w	r9, #0
                int_least32_t value = -1;
 8004a18:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
                int sign = 0;
 8004a1c:	46ca      	mov	sl, r9
                        }
                        field++;
                    }
                }

                if ((sign || scale) && value == -1)
 8004a1e:	f1ba 0f00 	cmp.w	sl, #0
 8004a22:	d102      	bne.n	8004a2a <minmea_scan+0x102>
 8004a24:	f1b9 0f00 	cmp.w	r9, #0
 8004a28:	d003      	beq.n	8004a32 <minmea_scan+0x10a>
 8004a2a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004a2e:	f000 82c4 	beq.w	8004fba <minmea_scan+0x692>
                    goto parse_error;

                if (value == -1) {
 8004a32:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004a36:	d07f      	beq.n	8004b38 <minmea_scan+0x210>
                    /* No digits were scanned. */
                    value = 0;
                    scale = 0;
                } else if (scale == 0) {
 8004a38:	f1b9 0f00 	cmp.w	r9, #0
 8004a3c:	d17f      	bne.n	8004b3e <minmea_scan+0x216>
                    /* No decimal point. */
                    scale = 1;
 8004a3e:	f04f 0901 	mov.w	r9, #1
 8004a42:	e07c      	b.n	8004b3e <minmea_scan+0x216>
                        if (*field == '+' && !sign && value == -1) {
 8004a44:	f1ba 0f00 	cmp.w	sl, #0
 8004a48:	d147      	bne.n	8004ada <minmea_scan+0x1b2>
 8004a4a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004a4e:	d144      	bne.n	8004ada <minmea_scan+0x1b2>
                            sign = 1;
 8004a50:	f04f 0a01 	mov.w	sl, #1
 8004a54:	e018      	b.n	8004a88 <minmea_scan+0x160>
                                value = 0;
 8004a56:	f04f 0800 	mov.w	r8, #0
 8004a5a:	e052      	b.n	8004b02 <minmea_scan+0x1da>
                                if (scale) {
 8004a5c:	f1b9 0f00 	cmp.w	r9, #0
 8004a60:	d1dd      	bne.n	8004a1e <minmea_scan+0xf6>
    bool result = false;
 8004a62:	2000      	movs	r0, #0
 8004a64:	e29a      	b.n	8004f9c <minmea_scan+0x674>
                        } else if (*field == '.' && scale == 0) {
 8004a66:	2b2e      	cmp	r3, #46	; 0x2e
 8004a68:	d020      	beq.n	8004aac <minmea_scan+0x184>
                        } else if (*field == ' ') {
 8004a6a:	2b20      	cmp	r3, #32
 8004a6c:	f040 829d 	bne.w	8004faa <minmea_scan+0x682>
                            if (sign != 0 || value != -1 || scale != 0)
 8004a70:	f1ba 0f00 	cmp.w	sl, #0
 8004a74:	f040 829b 	bne.w	8004fae <minmea_scan+0x686>
 8004a78:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004a7c:	f040 8299 	bne.w	8004fb2 <minmea_scan+0x68a>
 8004a80:	f1b9 0f00 	cmp.w	r9, #0
 8004a84:	f040 8297 	bne.w	8004fb6 <minmea_scan+0x68e>
                        field++;
 8004a88:	3501      	adds	r5, #1
                    while (minmea_isfield(*field)) {
 8004a8a:	f895 b000 	ldrb.w	fp, [r5]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8004a8e:	f003 f843 	bl	8007b18 <__locale_ctype_ptr>
 8004a92:	4458      	add	r0, fp
 8004a94:	7843      	ldrb	r3, [r0, #1]
 8004a96:	f013 0f97 	tst.w	r3, #151	; 0x97
 8004a9a:	d018      	beq.n	8004ace <minmea_scan+0x1a6>
 8004a9c:	f1bb 0f2c 	cmp.w	fp, #44	; 0x2c
 8004aa0:	d048      	beq.n	8004b34 <minmea_scan+0x20c>
 8004aa2:	f1bb 0f2a 	cmp.w	fp, #42	; 0x2a
 8004aa6:	d010      	beq.n	8004aca <minmea_scan+0x1a2>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e011      	b.n	8004ad0 <minmea_scan+0x1a8>
                        } else if (*field == '.' && scale == 0) {
 8004aac:	f1b9 0f00 	cmp.w	r9, #0
 8004ab0:	d1db      	bne.n	8004a6a <minmea_scan+0x142>
                            scale = 1;
 8004ab2:	f04f 0901 	mov.w	r9, #1
 8004ab6:	e7e7      	b.n	8004a88 <minmea_scan+0x160>
                            sign = -1;
 8004ab8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004abc:	e7e4      	b.n	8004a88 <minmea_scan+0x160>
                int_least32_t scale = 0;
 8004abe:	f04f 0900 	mov.w	r9, #0
                int_least32_t value = -1;
 8004ac2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
                int sign = 0;
 8004ac6:	46ca      	mov	sl, r9
 8004ac8:	e7df      	b.n	8004a8a <minmea_scan+0x162>
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8004aca:	2300      	movs	r3, #0
 8004acc:	e000      	b.n	8004ad0 <minmea_scan+0x1a8>
 8004ace:	2300      	movs	r3, #0
                    while (minmea_isfield(*field)) {
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0a4      	beq.n	8004a1e <minmea_scan+0xf6>
                        if (*field == '+' && !sign && value == -1) {
 8004ad4:	782b      	ldrb	r3, [r5, #0]
 8004ad6:	2b2b      	cmp	r3, #43	; 0x2b
 8004ad8:	d0b4      	beq.n	8004a44 <minmea_scan+0x11c>
                        } else if (*field == '-' && !sign && value == -1) {
 8004ada:	2b2d      	cmp	r3, #45	; 0x2d
 8004adc:	d105      	bne.n	8004aea <minmea_scan+0x1c2>
 8004ade:	f1ba 0f00 	cmp.w	sl, #0
 8004ae2:	d102      	bne.n	8004aea <minmea_scan+0x1c2>
 8004ae4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004ae8:	d0e6      	beq.n	8004ab8 <minmea_scan+0x190>
                        } else if (isdigit((unsigned char) *field)) {
 8004aea:	f003 f815 	bl	8007b18 <__locale_ctype_ptr>
 8004aee:	782b      	ldrb	r3, [r5, #0]
 8004af0:	4418      	add	r0, r3
 8004af2:	7842      	ldrb	r2, [r0, #1]
 8004af4:	f012 0f04 	tst.w	r2, #4
 8004af8:	d0b5      	beq.n	8004a66 <minmea_scan+0x13e>
                            int digit = *field - '0';
 8004afa:	3b30      	subs	r3, #48	; 0x30
                            if (value == -1)
 8004afc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004b00:	d0a9      	beq.n	8004a56 <minmea_scan+0x12e>
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 8004b02:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004b06:	1ad2      	subs	r2, r2, r3
 8004b08:	49ac      	ldr	r1, [pc, #688]	; (8004dbc <minmea_scan+0x494>)
 8004b0a:	fb81 0102 	smull	r0, r1, r1, r2
 8004b0e:	17d2      	asrs	r2, r2, #31
 8004b10:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8004b14:	4542      	cmp	r2, r8
 8004b16:	dba1      	blt.n	8004a5c <minmea_scan+0x134>
                            value = (10 * value) + digit;
 8004b18:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 8004b1c:	ea4f 0248 	mov.w	r2, r8, lsl #1
 8004b20:	eb02 0803 	add.w	r8, r2, r3
                            if (scale)
 8004b24:	f1b9 0f00 	cmp.w	r9, #0
 8004b28:	d0ae      	beq.n	8004a88 <minmea_scan+0x160>
                                scale *= 10;
 8004b2a:	eb09 0389 	add.w	r3, r9, r9, lsl #2
 8004b2e:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8004b32:	e7a9      	b.n	8004a88 <minmea_scan+0x160>
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8004b34:	2300      	movs	r3, #0
 8004b36:	e7cb      	b.n	8004ad0 <minmea_scan+0x1a8>
                    scale = 0;
 8004b38:	f04f 0900 	mov.w	r9, #0
                    value = 0;
 8004b3c:	46c8      	mov	r8, r9
                }
                if (sign)
 8004b3e:	f1ba 0f00 	cmp.w	sl, #0
 8004b42:	d001      	beq.n	8004b48 <minmea_scan+0x220>
                    value *= sign;
 8004b44:	fb0a f808 	mul.w	r8, sl, r8

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 8004b48:	9b05      	ldr	r3, [sp, #20]
 8004b4a:	1d1a      	adds	r2, r3, #4
 8004b4c:	9205      	str	r2, [sp, #20]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f8c3 8000 	str.w	r8, [r3]
 8004b54:	f8c3 9004 	str.w	r9, [r3, #4]
            } break;
 8004b58:	e193      	b.n	8004e82 <minmea_scan+0x55a>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;

                if (field) {
 8004b5a:	b32d      	cbz	r5, 8004ba8 <minmea_scan+0x280>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 8004b5c:	220a      	movs	r2, #10
 8004b5e:	a904      	add	r1, sp, #16
 8004b60:	4628      	mov	r0, r5
 8004b62:	f004 fd83 	bl	800966c <strtol>
 8004b66:	4605      	mov	r5, r0
                    if (minmea_isfield(*endptr))
 8004b68:	9b04      	ldr	r3, [sp, #16]
 8004b6a:	f893 8000 	ldrb.w	r8, [r3]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8004b6e:	f002 ffd3 	bl	8007b18 <__locale_ctype_ptr>
 8004b72:	4440      	add	r0, r8
 8004b74:	7843      	ldrb	r3, [r0, #1]
 8004b76:	f013 0f97 	tst.w	r3, #151	; 0x97
 8004b7a:	d009      	beq.n	8004b90 <minmea_scan+0x268>
 8004b7c:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
 8004b80:	d00e      	beq.n	8004ba0 <minmea_scan+0x278>
 8004b82:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 8004b86:	d001      	beq.n	8004b8c <minmea_scan+0x264>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e002      	b.n	8004b92 <minmea_scan+0x26a>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	e000      	b.n	8004b92 <minmea_scan+0x26a>
 8004b90:	2300      	movs	r3, #0
                    if (minmea_isfield(*endptr))
 8004b92:	b93b      	cbnz	r3, 8004ba4 <minmea_scan+0x27c>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 8004b94:	9b05      	ldr	r3, [sp, #20]
 8004b96:	1d1a      	adds	r2, r3, #4
 8004b98:	9205      	str	r2, [sp, #20]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	601d      	str	r5, [r3, #0]
            } break;
 8004b9e:	e170      	b.n	8004e82 <minmea_scan+0x55a>
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	e7f6      	b.n	8004b92 <minmea_scan+0x26a>
    bool result = false;
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	e1f9      	b.n	8004f9c <minmea_scan+0x674>
                int value = 0;
 8004ba8:	2500      	movs	r5, #0
 8004baa:	e7f3      	b.n	8004b94 <minmea_scan+0x26c>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 8004bac:	9b05      	ldr	r3, [sp, #20]
 8004bae:	1d1a      	adds	r2, r3, #4
 8004bb0:	9205      	str	r2, [sp, #20]
 8004bb2:	f8d3 8000 	ldr.w	r8, [r3]

                if (field) {
 8004bb6:	b975      	cbnz	r5, 8004bd6 <minmea_scan+0x2ae>
                    while (minmea_isfield(*field))
                        *buf++ = *field++;
                }

                *buf = '\0';
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f888 3000 	strb.w	r3, [r8]
            } break;
 8004bbe:	e160      	b.n	8004e82 <minmea_scan+0x55a>
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	e000      	b.n	8004bc6 <minmea_scan+0x29e>
 8004bc4:	2300      	movs	r3, #0
                    while (minmea_isfield(*field))
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0f6      	beq.n	8004bb8 <minmea_scan+0x290>
                        *buf++ = *field++;
 8004bca:	782b      	ldrb	r3, [r5, #0]
 8004bcc:	f888 3000 	strb.w	r3, [r8]
 8004bd0:	f108 0801 	add.w	r8, r8, #1
 8004bd4:	3501      	adds	r5, #1
                    while (minmea_isfield(*field))
 8004bd6:	f895 9000 	ldrb.w	r9, [r5]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8004bda:	f002 ff9d 	bl	8007b18 <__locale_ctype_ptr>
 8004bde:	4448      	add	r0, r9
 8004be0:	7843      	ldrb	r3, [r0, #1]
 8004be2:	f013 0f97 	tst.w	r3, #151	; 0x97
 8004be6:	d0ed      	beq.n	8004bc4 <minmea_scan+0x29c>
 8004be8:	f1b9 0f2c 	cmp.w	r9, #44	; 0x2c
 8004bec:	d004      	beq.n	8004bf8 <minmea_scan+0x2d0>
 8004bee:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
 8004bf2:	d0e5      	beq.n	8004bc0 <minmea_scan+0x298>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e7e6      	b.n	8004bc6 <minmea_scan+0x29e>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	e7e4      	b.n	8004bc6 <minmea_scan+0x29e>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 8004bfc:	2d00      	cmp	r5, #0
 8004bfe:	f000 81de 	beq.w	8004fbe <minmea_scan+0x696>
                    goto parse_error;

                if (field[0] != '$')
 8004c02:	782b      	ldrb	r3, [r5, #0]
 8004c04:	2b24      	cmp	r3, #36	; 0x24
 8004c06:	f040 81dc 	bne.w	8004fc2 <minmea_scan+0x69a>
                    goto parse_error;
                for (int f=0; f<5; f++)
 8004c0a:	f04f 0800 	mov.w	r8, #0
 8004c0e:	e006      	b.n	8004c1e <minmea_scan+0x2f6>
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8004c10:	2300      	movs	r3, #0
 8004c12:	e000      	b.n	8004c16 <minmea_scan+0x2ee>
 8004c14:	2300      	movs	r3, #0
                    if (!minmea_isfield(field[1+f]))
 8004c16:	4618      	mov	r0, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 81bf 	beq.w	8004f9c <minmea_scan+0x674>
                for (int f=0; f<5; f++)
 8004c1e:	f1b8 0f04 	cmp.w	r8, #4
 8004c22:	dc14      	bgt.n	8004c4e <minmea_scan+0x326>
                    if (!minmea_isfield(field[1+f]))
 8004c24:	f108 0801 	add.w	r8, r8, #1
 8004c28:	f815 9008 	ldrb.w	r9, [r5, r8]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8004c2c:	f002 ff74 	bl	8007b18 <__locale_ctype_ptr>
 8004c30:	4448      	add	r0, r9
 8004c32:	7843      	ldrb	r3, [r0, #1]
 8004c34:	f013 0f97 	tst.w	r3, #151	; 0x97
 8004c38:	d0ec      	beq.n	8004c14 <minmea_scan+0x2ec>
 8004c3a:	f1b9 0f2c 	cmp.w	r9, #44	; 0x2c
 8004c3e:	d004      	beq.n	8004c4a <minmea_scan+0x322>
 8004c40:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
 8004c44:	d0e4      	beq.n	8004c10 <minmea_scan+0x2e8>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e7e5      	b.n	8004c16 <minmea_scan+0x2ee>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e7e3      	b.n	8004c16 <minmea_scan+0x2ee>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 8004c4e:	9b05      	ldr	r3, [sp, #20]
 8004c50:	1d1a      	adds	r2, r3, #4
 8004c52:	9205      	str	r2, [sp, #20]
 8004c54:	681b      	ldr	r3, [r3, #0]
                memcpy(buf, field+1, 5);
 8004c56:	f855 2f01 	ldr.w	r2, [r5, #1]!
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	792a      	ldrb	r2, [r5, #4]
 8004c5e:	711a      	strb	r2, [r3, #4]
                buf[5] = '\0';
 8004c60:	2200      	movs	r2, #0
 8004c62:	715a      	strb	r2, [r3, #5]
            } break;
 8004c64:	e10d      	b.n	8004e82 <minmea_scan+0x55a>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 8004c66:	9b05      	ldr	r3, [sp, #20]
 8004c68:	1d1a      	adds	r2, r3, #4
 8004c6a:	9205      	str	r2, [sp, #20]
 8004c6c:	f8d3 9000 	ldr.w	r9, [r3]

                int d = -1, m = -1, y = -1;

                if (field && minmea_isfield(*field)) {
 8004c70:	2d00      	cmp	r5, #0
 8004c72:	d060      	beq.n	8004d36 <minmea_scan+0x40e>
 8004c74:	f895 8000 	ldrb.w	r8, [r5]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8004c78:	f002 ff4e 	bl	8007b18 <__locale_ctype_ptr>
 8004c7c:	4440      	add	r0, r8
 8004c7e:	7843      	ldrb	r3, [r0, #1]
 8004c80:	f013 0f97 	tst.w	r3, #151	; 0x97
 8004c84:	d009      	beq.n	8004c9a <minmea_scan+0x372>
 8004c86:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
 8004c8a:	d013      	beq.n	8004cb4 <minmea_scan+0x38c>
 8004c8c:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
 8004c90:	d001      	beq.n	8004c96 <minmea_scan+0x36e>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e002      	b.n	8004c9c <minmea_scan+0x374>
 8004c96:	2300      	movs	r3, #0
 8004c98:	e000      	b.n	8004c9c <minmea_scan+0x374>
 8004c9a:	2300      	movs	r3, #0
                if (field && minmea_isfield(*field)) {
 8004c9c:	b963      	cbnz	r3, 8004cb8 <minmea_scan+0x390>
                int d = -1, m = -1, y = -1;
 8004c9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ca2:	4605      	mov	r5, r0
 8004ca4:	4680      	mov	r8, r0
                    d = strtol(dArr, NULL, 10);
                    m = strtol(mArr, NULL, 10);
                    y = strtol(yArr, NULL, 10);
                }

                date->day = d;
 8004ca6:	f8c9 8000 	str.w	r8, [r9]
                date->month = m;
 8004caa:	f8c9 5004 	str.w	r5, [r9, #4]
                date->year = y;
 8004cae:	f8c9 0008 	str.w	r0, [r9, #8]
            } break;
 8004cb2:	e0e6      	b.n	8004e82 <minmea_scan+0x55a>
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e7f1      	b.n	8004c9c <minmea_scan+0x374>
                    for (int f=0; f<6; f++)
 8004cb8:	f04f 0800 	mov.w	r8, #0
 8004cbc:	f1b8 0f05 	cmp.w	r8, #5
 8004cc0:	dc0b      	bgt.n	8004cda <minmea_scan+0x3b2>
                        if (!isdigit((unsigned char) field[f]))
 8004cc2:	f002 ff29 	bl	8007b18 <__locale_ctype_ptr>
 8004cc6:	f815 3008 	ldrb.w	r3, [r5, r8]
 8004cca:	4418      	add	r0, r3
 8004ccc:	7843      	ldrb	r3, [r0, #1]
 8004cce:	f013 0f04 	tst.w	r3, #4
 8004cd2:	d02e      	beq.n	8004d32 <minmea_scan+0x40a>
                    for (int f=0; f<6; f++)
 8004cd4:	f108 0801 	add.w	r8, r8, #1
 8004cd8:	e7f0      	b.n	8004cbc <minmea_scan+0x394>
                    char dArr[] = {field[0], field[1], '\0'};
 8004cda:	782b      	ldrb	r3, [r5, #0]
 8004cdc:	f88d 3008 	strb.w	r3, [sp, #8]
 8004ce0:	786b      	ldrb	r3, [r5, #1]
 8004ce2:	f88d 3009 	strb.w	r3, [sp, #9]
 8004ce6:	f04f 0a00 	mov.w	sl, #0
 8004cea:	f88d a00a 	strb.w	sl, [sp, #10]
                    char mArr[] = {field[2], field[3], '\0'};
 8004cee:	78ab      	ldrb	r3, [r5, #2]
 8004cf0:	f88d 300c 	strb.w	r3, [sp, #12]
 8004cf4:	78eb      	ldrb	r3, [r5, #3]
 8004cf6:	f88d 300d 	strb.w	r3, [sp, #13]
 8004cfa:	f88d a00e 	strb.w	sl, [sp, #14]
                    char yArr[] = {field[4], field[5], '\0'};
 8004cfe:	792b      	ldrb	r3, [r5, #4]
 8004d00:	f88d 3010 	strb.w	r3, [sp, #16]
 8004d04:	796b      	ldrb	r3, [r5, #5]
 8004d06:	f88d 3011 	strb.w	r3, [sp, #17]
 8004d0a:	f88d a012 	strb.w	sl, [sp, #18]
                    d = strtol(dArr, NULL, 10);
 8004d0e:	220a      	movs	r2, #10
 8004d10:	4651      	mov	r1, sl
 8004d12:	a802      	add	r0, sp, #8
 8004d14:	f004 fcaa 	bl	800966c <strtol>
 8004d18:	4680      	mov	r8, r0
                    m = strtol(mArr, NULL, 10);
 8004d1a:	220a      	movs	r2, #10
 8004d1c:	4651      	mov	r1, sl
 8004d1e:	a803      	add	r0, sp, #12
 8004d20:	f004 fca4 	bl	800966c <strtol>
 8004d24:	4605      	mov	r5, r0
                    y = strtol(yArr, NULL, 10);
 8004d26:	220a      	movs	r2, #10
 8004d28:	4651      	mov	r1, sl
 8004d2a:	a804      	add	r0, sp, #16
 8004d2c:	f004 fc9e 	bl	800966c <strtol>
 8004d30:	e7b9      	b.n	8004ca6 <minmea_scan+0x37e>
    bool result = false;
 8004d32:	2000      	movs	r0, #0
 8004d34:	e132      	b.n	8004f9c <minmea_scan+0x674>
                int d = -1, m = -1, y = -1;
 8004d36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d3a:	4605      	mov	r5, r0
 8004d3c:	4680      	mov	r8, r0
 8004d3e:	e7b2      	b.n	8004ca6 <minmea_scan+0x37e>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time_ = va_arg(ap, struct minmea_time *);
 8004d40:	9b05      	ldr	r3, [sp, #20]
 8004d42:	1d1a      	adds	r2, r3, #4
 8004d44:	9205      	str	r2, [sp, #20]
 8004d46:	f8d3 8000 	ldr.w	r8, [r3]

                int h = -1, i = -1, s = -1, u = -1;

                if (field && minmea_isfield(*field)) {
 8004d4a:	2d00      	cmp	r5, #0
 8004d4c:	f000 808e 	beq.w	8004e6c <minmea_scan+0x544>
 8004d50:	f895 9000 	ldrb.w	r9, [r5]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8004d54:	f002 fee0 	bl	8007b18 <__locale_ctype_ptr>
 8004d58:	4448      	add	r0, r9
 8004d5a:	7843      	ldrb	r3, [r0, #1]
 8004d5c:	f013 0f97 	tst.w	r3, #151	; 0x97
 8004d60:	d009      	beq.n	8004d76 <minmea_scan+0x44e>
 8004d62:	f1b9 0f2c 	cmp.w	r9, #44	; 0x2c
 8004d66:	d016      	beq.n	8004d96 <minmea_scan+0x46e>
 8004d68:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
 8004d6c:	d001      	beq.n	8004d72 <minmea_scan+0x44a>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e002      	b.n	8004d78 <minmea_scan+0x450>
 8004d72:	2300      	movs	r3, #0
 8004d74:	e000      	b.n	8004d78 <minmea_scan+0x450>
 8004d76:	2300      	movs	r3, #0
                if (field && minmea_isfield(*field)) {
 8004d78:	b97b      	cbnz	r3, 8004d9a <minmea_scan+0x472>
                int h = -1, i = -1, s = -1, u = -1;
 8004d7a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004d7e:	46a9      	mov	r9, r5
 8004d80:	46aa      	mov	sl, r5
 8004d82:	46ab      	mov	fp, r5
                    } else {
                        u = 0;
                    }
                }

                time_->hours = h;
 8004d84:	f8c8 b000 	str.w	fp, [r8]
                time_->minutes = i;
 8004d88:	f8c8 a004 	str.w	sl, [r8, #4]
                time_->seconds = s;
 8004d8c:	f8c8 9008 	str.w	r9, [r8, #8]
                time_->microseconds = u;
 8004d90:	f8c8 500c 	str.w	r5, [r8, #12]
            } break;
 8004d94:	e075      	b.n	8004e82 <minmea_scan+0x55a>
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8004d96:	2300      	movs	r3, #0
 8004d98:	e7ee      	b.n	8004d78 <minmea_scan+0x450>
                    for (int f=0; f<6; f++)
 8004d9a:	f04f 0900 	mov.w	r9, #0
 8004d9e:	f1b9 0f05 	cmp.w	r9, #5
 8004da2:	dc0d      	bgt.n	8004dc0 <minmea_scan+0x498>
                        if (!isdigit((unsigned char) field[f]))
 8004da4:	f002 feb8 	bl	8007b18 <__locale_ctype_ptr>
 8004da8:	f815 3009 	ldrb.w	r3, [r5, r9]
 8004dac:	4418      	add	r0, r3
 8004dae:	7843      	ldrb	r3, [r0, #1]
 8004db0:	f013 0f04 	tst.w	r3, #4
 8004db4:	d058      	beq.n	8004e68 <minmea_scan+0x540>
                    for (int f=0; f<6; f++)
 8004db6:	f109 0901 	add.w	r9, r9, #1
 8004dba:	e7f0      	b.n	8004d9e <minmea_scan+0x476>
 8004dbc:	66666667 	.word	0x66666667
                    char hArr[] = {field[0], field[1], '\0'};
 8004dc0:	782b      	ldrb	r3, [r5, #0]
 8004dc2:	f88d 3008 	strb.w	r3, [sp, #8]
 8004dc6:	786b      	ldrb	r3, [r5, #1]
 8004dc8:	f88d 3009 	strb.w	r3, [sp, #9]
 8004dcc:	f04f 0900 	mov.w	r9, #0
 8004dd0:	f88d 900a 	strb.w	r9, [sp, #10]
                    char iArr[] = {field[2], field[3], '\0'};
 8004dd4:	78ab      	ldrb	r3, [r5, #2]
 8004dd6:	f88d 300c 	strb.w	r3, [sp, #12]
 8004dda:	78eb      	ldrb	r3, [r5, #3]
 8004ddc:	f88d 300d 	strb.w	r3, [sp, #13]
 8004de0:	f88d 900e 	strb.w	r9, [sp, #14]
                    char sArr[] = {field[4], field[5], '\0'};
 8004de4:	792b      	ldrb	r3, [r5, #4]
 8004de6:	f88d 3010 	strb.w	r3, [sp, #16]
 8004dea:	796b      	ldrb	r3, [r5, #5]
 8004dec:	f88d 3011 	strb.w	r3, [sp, #17]
 8004df0:	f88d 9012 	strb.w	r9, [sp, #18]
                    h = strtol(hArr, NULL, 10);
 8004df4:	220a      	movs	r2, #10
 8004df6:	4649      	mov	r1, r9
 8004df8:	a802      	add	r0, sp, #8
 8004dfa:	f004 fc37 	bl	800966c <strtol>
 8004dfe:	4683      	mov	fp, r0
                    i = strtol(iArr, NULL, 10);
 8004e00:	220a      	movs	r2, #10
 8004e02:	4649      	mov	r1, r9
 8004e04:	a803      	add	r0, sp, #12
 8004e06:	f004 fc31 	bl	800966c <strtol>
 8004e0a:	4682      	mov	sl, r0
                    s = strtol(sArr, NULL, 10);
 8004e0c:	220a      	movs	r2, #10
 8004e0e:	4649      	mov	r1, r9
 8004e10:	a804      	add	r0, sp, #16
 8004e12:	f004 fc2b 	bl	800966c <strtol>
 8004e16:	4681      	mov	r9, r0
                    if (*field++ == '.') {
 8004e18:	1deb      	adds	r3, r5, #7
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	79ab      	ldrb	r3, [r5, #6]
 8004e1e:	2b2e      	cmp	r3, #46	; 0x2e
 8004e20:	d01e      	beq.n	8004e60 <minmea_scan+0x538>
                        u = 0;
 8004e22:	2500      	movs	r5, #0
 8004e24:	e7ae      	b.n	8004d84 <minmea_scan+0x45c>
                            value = (value * 10) + (*field++ - '0');
 8004e26:	9b01      	ldr	r3, [sp, #4]
 8004e28:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004e2c:	004b      	lsls	r3, r1, #1
 8004e2e:	9900      	ldr	r1, [sp, #0]
 8004e30:	3101      	adds	r1, #1
 8004e32:	9100      	str	r1, [sp, #0]
 8004e34:	4413      	add	r3, r2
 8004e36:	3b30      	subs	r3, #48	; 0x30
 8004e38:	9301      	str	r3, [sp, #4]
                            scale /= 10;
 8004e3a:	4b63      	ldr	r3, [pc, #396]	; (8004fc8 <minmea_scan+0x6a0>)
 8004e3c:	fba3 3505 	umull	r3, r5, r3, r5
 8004e40:	08ed      	lsrs	r5, r5, #3
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8004e42:	f002 fe69 	bl	8007b18 <__locale_ctype_ptr>
 8004e46:	9b00      	ldr	r3, [sp, #0]
 8004e48:	781a      	ldrb	r2, [r3, #0]
 8004e4a:	4410      	add	r0, r2
 8004e4c:	7843      	ldrb	r3, [r0, #1]
 8004e4e:	f013 0f04 	tst.w	r3, #4
 8004e52:	d001      	beq.n	8004e58 <minmea_scan+0x530>
 8004e54:	2d01      	cmp	r5, #1
 8004e56:	d8e6      	bhi.n	8004e26 <minmea_scan+0x4fe>
                        u = value * scale;
 8004e58:	9b01      	ldr	r3, [sp, #4]
 8004e5a:	fb05 f503 	mul.w	r5, r5, r3
 8004e5e:	e791      	b.n	8004d84 <minmea_scan+0x45c>
                        uint32_t scale = 1000000LU;
 8004e60:	4d5a      	ldr	r5, [pc, #360]	; (8004fcc <minmea_scan+0x6a4>)
                        uint32_t value = 0;
 8004e62:	2300      	movs	r3, #0
 8004e64:	9301      	str	r3, [sp, #4]
 8004e66:	e7ec      	b.n	8004e42 <minmea_scan+0x51a>
    bool result = false;
 8004e68:	2000      	movs	r0, #0
 8004e6a:	e097      	b.n	8004f9c <minmea_scan+0x674>
                int h = -1, i = -1, s = -1, u = -1;
 8004e6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004e70:	46a9      	mov	r9, r5
 8004e72:	46aa      	mov	sl, r5
 8004e74:	46ab      	mov	fp, r5
 8004e76:	e785      	b.n	8004d84 <minmea_scan+0x45c>
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8004e78:	2300      	movs	r3, #0
 8004e7a:	e000      	b.n	8004e7e <minmea_scan+0x556>
 8004e7c:	2300      	movs	r3, #0
            default: { // Unknown.
                goto parse_error;
            }
        }

        next_field();
 8004e7e:	b183      	cbz	r3, 8004ea2 <minmea_scan+0x57a>
 8004e80:	3401      	adds	r4, #1
 8004e82:	7825      	ldrb	r5, [r4, #0]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8004e84:	f002 fe48 	bl	8007b18 <__locale_ctype_ptr>
 8004e88:	4428      	add	r0, r5
 8004e8a:	7843      	ldrb	r3, [r0, #1]
 8004e8c:	f013 0f97 	tst.w	r3, #151	; 0x97
 8004e90:	d0f4      	beq.n	8004e7c <minmea_scan+0x554>
 8004e92:	2d2c      	cmp	r5, #44	; 0x2c
 8004e94:	d003      	beq.n	8004e9e <minmea_scan+0x576>
 8004e96:	2d2a      	cmp	r5, #42	; 0x2a
 8004e98:	d0ee      	beq.n	8004e78 <minmea_scan+0x550>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e7ef      	b.n	8004e7e <minmea_scan+0x556>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e7ed      	b.n	8004e7e <minmea_scan+0x556>
        next_field();
 8004ea2:	7823      	ldrb	r3, [r4, #0]
 8004ea4:	2b2c      	cmp	r3, #44	; 0x2c
 8004ea6:	d071      	beq.n	8004f8c <minmea_scan+0x664>
 8004ea8:	2500      	movs	r5, #0
    while (*format) {
 8004eaa:	7833      	ldrb	r3, [r6, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d072      	beq.n	8004f96 <minmea_scan+0x66e>
        char type = *format++;
 8004eb0:	3601      	adds	r6, #1
        if (type == ';') {
 8004eb2:	2b3b      	cmp	r3, #59	; 0x3b
 8004eb4:	d06d      	beq.n	8004f92 <minmea_scan+0x66a>
        if (!field && !optional) {
 8004eb6:	2d00      	cmp	r5, #0
 8004eb8:	f43f ad42 	beq.w	8004940 <minmea_scan+0x18>
        switch (type) {
 8004ebc:	3b44      	subs	r3, #68	; 0x44
 8004ebe:	2b30      	cmp	r3, #48	; 0x30
 8004ec0:	d86b      	bhi.n	8004f9a <minmea_scan+0x672>
 8004ec2:	a201      	add	r2, pc, #4	; (adr r2, 8004ec8 <minmea_scan+0x5a0>)
 8004ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec8:	08004c67 	.word	0x08004c67
 8004ecc:	08004f9b 	.word	0x08004f9b
 8004ed0:	08004f9b 	.word	0x08004f9b
 8004ed4:	08004f9b 	.word	0x08004f9b
 8004ed8:	08004f9b 	.word	0x08004f9b
 8004edc:	08004f9b 	.word	0x08004f9b
 8004ee0:	08004f9b 	.word	0x08004f9b
 8004ee4:	08004f9b 	.word	0x08004f9b
 8004ee8:	08004f9b 	.word	0x08004f9b
 8004eec:	08004f9b 	.word	0x08004f9b
 8004ef0:	08004f9b 	.word	0x08004f9b
 8004ef4:	08004f9b 	.word	0x08004f9b
 8004ef8:	08004f9b 	.word	0x08004f9b
 8004efc:	08004f9b 	.word	0x08004f9b
 8004f00:	08004f9b 	.word	0x08004f9b
 8004f04:	08004f9b 	.word	0x08004f9b
 8004f08:	08004d41 	.word	0x08004d41
 8004f0c:	08004f9b 	.word	0x08004f9b
 8004f10:	08004f9b 	.word	0x08004f9b
 8004f14:	08004f9b 	.word	0x08004f9b
 8004f18:	08004f9b 	.word	0x08004f9b
 8004f1c:	08004f9b 	.word	0x08004f9b
 8004f20:	08004f9b 	.word	0x08004f9b
 8004f24:	08004f9b 	.word	0x08004f9b
 8004f28:	08004f9b 	.word	0x08004f9b
 8004f2c:	08004f9b 	.word	0x08004f9b
 8004f30:	08004f9b 	.word	0x08004f9b
 8004f34:	08004e83 	.word	0x08004e83
 8004f38:	08004f9b 	.word	0x08004f9b
 8004f3c:	08004f9b 	.word	0x08004f9b
 8004f40:	08004f9b 	.word	0x08004f9b
 8004f44:	0800494b 	.word	0x0800494b
 8004f48:	08004991 	.word	0x08004991
 8004f4c:	08004f9b 	.word	0x08004f9b
 8004f50:	08004a11 	.word	0x08004a11
 8004f54:	08004f9b 	.word	0x08004f9b
 8004f58:	08004f9b 	.word	0x08004f9b
 8004f5c:	08004b5b 	.word	0x08004b5b
 8004f60:	08004f9b 	.word	0x08004f9b
 8004f64:	08004f9b 	.word	0x08004f9b
 8004f68:	08004f9b 	.word	0x08004f9b
 8004f6c:	08004f9b 	.word	0x08004f9b
 8004f70:	08004f9b 	.word	0x08004f9b
 8004f74:	08004f9b 	.word	0x08004f9b
 8004f78:	08004f9b 	.word	0x08004f9b
 8004f7c:	08004f9b 	.word	0x08004f9b
 8004f80:	08004f9b 	.word	0x08004f9b
 8004f84:	08004bad 	.word	0x08004bad
 8004f88:	08004bfd 	.word	0x08004bfd
        next_field();
 8004f8c:	3401      	adds	r4, #1
 8004f8e:	4625      	mov	r5, r4
 8004f90:	e78b      	b.n	8004eaa <minmea_scan+0x582>
            optional = true;
 8004f92:	2701      	movs	r7, #1
 8004f94:	e789      	b.n	8004eaa <minmea_scan+0x582>
    }

    result = true;
 8004f96:	2001      	movs	r0, #1
 8004f98:	e000      	b.n	8004f9c <minmea_scan+0x674>
    bool result = false;
 8004f9a:	2000      	movs	r0, #0

parse_error:
    va_end(ap);
    return result;
}
 8004f9c:	b006      	add	sp, #24
 8004f9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa2:	b003      	add	sp, #12
 8004fa4:	4770      	bx	lr
    bool result = false;
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	e7f8      	b.n	8004f9c <minmea_scan+0x674>
 8004faa:	2000      	movs	r0, #0
 8004fac:	e7f6      	b.n	8004f9c <minmea_scan+0x674>
 8004fae:	2000      	movs	r0, #0
 8004fb0:	e7f4      	b.n	8004f9c <minmea_scan+0x674>
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	e7f2      	b.n	8004f9c <minmea_scan+0x674>
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	e7f0      	b.n	8004f9c <minmea_scan+0x674>
 8004fba:	2000      	movs	r0, #0
 8004fbc:	e7ee      	b.n	8004f9c <minmea_scan+0x674>
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	e7ec      	b.n	8004f9c <minmea_scan+0x674>
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	e7ea      	b.n	8004f9c <minmea_scan+0x674>
 8004fc6:	bf00      	nop
 8004fc8:	cccccccd 	.word	0xcccccccd
 8004fcc:	000f4240 	.word	0x000f4240

08004fd0 <minmea_sentence_id>:

    return true;
}

enum minmea_sentence_id minmea_sentence_id(const char *sentence, bool strict)
{
 8004fd0:	b510      	push	{r4, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	4604      	mov	r4, r0
    if (!minmea_check(sentence, strict))
 8004fd6:	f7ff fc4f 	bl	8004878 <minmea_check>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	d039      	beq.n	8005052 <minmea_sentence_id+0x82>
        return MINMEA_INVALID;

    char type[6];
    if (!minmea_scan(sentence, "t", type))
 8004fde:	466a      	mov	r2, sp
 8004fe0:	4926      	ldr	r1, [pc, #152]	; (800507c <minmea_sentence_id+0xac>)
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f7ff fca0 	bl	8004928 <minmea_scan>
 8004fe8:	b3b0      	cbz	r0, 8005058 <minmea_sentence_id+0x88>
        return MINMEA_INVALID;

    if (!strcmp(type+2, "RMC"))
 8004fea:	4925      	ldr	r1, [pc, #148]	; (8005080 <minmea_sentence_id+0xb0>)
 8004fec:	f10d 0002 	add.w	r0, sp, #2
 8004ff0:	f7fb f8f6 	bl	80001e0 <strcmp>
 8004ff4:	b398      	cbz	r0, 800505e <minmea_sentence_id+0x8e>
        return MINMEA_SENTENCE_RMC;
    if (!strcmp(type+2, "GGA"))
 8004ff6:	4923      	ldr	r1, [pc, #140]	; (8005084 <minmea_sentence_id+0xb4>)
 8004ff8:	f10d 0002 	add.w	r0, sp, #2
 8004ffc:	f7fb f8f0 	bl	80001e0 <strcmp>
 8005000:	b380      	cbz	r0, 8005064 <minmea_sentence_id+0x94>
        return MINMEA_SENTENCE_GGA;
    if (!strcmp(type+2, "GSA"))
 8005002:	4921      	ldr	r1, [pc, #132]	; (8005088 <minmea_sentence_id+0xb8>)
 8005004:	f10d 0002 	add.w	r0, sp, #2
 8005008:	f7fb f8ea 	bl	80001e0 <strcmp>
 800500c:	b360      	cbz	r0, 8005068 <minmea_sentence_id+0x98>
        return MINMEA_SENTENCE_GSA;
    if (!strcmp(type+2, "GLL"))
 800500e:	491f      	ldr	r1, [pc, #124]	; (800508c <minmea_sentence_id+0xbc>)
 8005010:	f10d 0002 	add.w	r0, sp, #2
 8005014:	f7fb f8e4 	bl	80001e0 <strcmp>
 8005018:	b340      	cbz	r0, 800506c <minmea_sentence_id+0x9c>
        return MINMEA_SENTENCE_GLL;
    if (!strcmp(type+2, "GST"))
 800501a:	491d      	ldr	r1, [pc, #116]	; (8005090 <minmea_sentence_id+0xc0>)
 800501c:	f10d 0002 	add.w	r0, sp, #2
 8005020:	f7fb f8de 	bl	80001e0 <strcmp>
 8005024:	b320      	cbz	r0, 8005070 <minmea_sentence_id+0xa0>
        return MINMEA_SENTENCE_GST;
    if (!strcmp(type+2, "GSV"))
 8005026:	491b      	ldr	r1, [pc, #108]	; (8005094 <minmea_sentence_id+0xc4>)
 8005028:	f10d 0002 	add.w	r0, sp, #2
 800502c:	f7fb f8d8 	bl	80001e0 <strcmp>
 8005030:	b300      	cbz	r0, 8005074 <minmea_sentence_id+0xa4>
        return MINMEA_SENTENCE_GSV;
    if (!strcmp(type+2, "VTG"))
 8005032:	4919      	ldr	r1, [pc, #100]	; (8005098 <minmea_sentence_id+0xc8>)
 8005034:	f10d 0002 	add.w	r0, sp, #2
 8005038:	f7fb f8d2 	bl	80001e0 <strcmp>
 800503c:	b1e0      	cbz	r0, 8005078 <minmea_sentence_id+0xa8>
        return MINMEA_SENTENCE_VTG;
    if (!strcmp(type+2, "ZDA"))
 800503e:	4917      	ldr	r1, [pc, #92]	; (800509c <minmea_sentence_id+0xcc>)
 8005040:	f10d 0002 	add.w	r0, sp, #2
 8005044:	f7fb f8cc 	bl	80001e0 <strcmp>
 8005048:	b108      	cbz	r0, 800504e <minmea_sentence_id+0x7e>
        return MINMEA_SENTENCE_ZDA;

    return MINMEA_UNKNOWN;
 800504a:	2000      	movs	r0, #0
 800504c:	e008      	b.n	8005060 <minmea_sentence_id+0x90>
        return MINMEA_SENTENCE_ZDA;
 800504e:	2008      	movs	r0, #8
 8005050:	e006      	b.n	8005060 <minmea_sentence_id+0x90>
        return MINMEA_INVALID;
 8005052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005056:	e003      	b.n	8005060 <minmea_sentence_id+0x90>
        return MINMEA_INVALID;
 8005058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800505c:	e000      	b.n	8005060 <minmea_sentence_id+0x90>
        return MINMEA_SENTENCE_RMC;
 800505e:	2001      	movs	r0, #1
}
 8005060:	b002      	add	sp, #8
 8005062:	bd10      	pop	{r4, pc}
        return MINMEA_SENTENCE_GGA;
 8005064:	2002      	movs	r0, #2
 8005066:	e7fb      	b.n	8005060 <minmea_sentence_id+0x90>
        return MINMEA_SENTENCE_GSA;
 8005068:	2003      	movs	r0, #3
 800506a:	e7f9      	b.n	8005060 <minmea_sentence_id+0x90>
        return MINMEA_SENTENCE_GLL;
 800506c:	2004      	movs	r0, #4
 800506e:	e7f7      	b.n	8005060 <minmea_sentence_id+0x90>
        return MINMEA_SENTENCE_GST;
 8005070:	2005      	movs	r0, #5
 8005072:	e7f5      	b.n	8005060 <minmea_sentence_id+0x90>
        return MINMEA_SENTENCE_GSV;
 8005074:	2006      	movs	r0, #6
 8005076:	e7f3      	b.n	8005060 <minmea_sentence_id+0x90>
        return MINMEA_SENTENCE_VTG;
 8005078:	2007      	movs	r0, #7
 800507a:	e7f1      	b.n	8005060 <minmea_sentence_id+0x90>
 800507c:	0800c260 	.word	0x0800c260
 8005080:	0800c240 	.word	0x0800c240
 8005084:	0800c244 	.word	0x0800c244
 8005088:	0800c248 	.word	0x0800c248
 800508c:	0800c24c 	.word	0x0800c24c
 8005090:	0800c250 	.word	0x0800c250
 8005094:	0800c254 	.word	0x0800c254
 8005098:	0800c258 	.word	0x0800c258
 800509c:	0800c25c 	.word	0x0800c25c

080050a0 <minmea_parse_rmc>:

bool minmea_parse_rmc(struct minmea_sentence_rmc *frame, const char *sentence)
{
 80050a0:	b530      	push	{r4, r5, lr}
 80050a2:	b091      	sub	sp, #68	; 0x44
 80050a4:	4604      	mov	r4, r0
 80050a6:	4608      	mov	r0, r1
    char type[6];
    char validity;
    int latitude_direction;
    int longitude_direction;
    int variation_direction;
    if (!minmea_scan(sentence, "tTcfdfdffDfd",
 80050a8:	ab0a      	add	r3, sp, #40	; 0x28
 80050aa:	9309      	str	r3, [sp, #36]	; 0x24
 80050ac:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80050b0:	9308      	str	r3, [sp, #32]
 80050b2:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80050b6:	9307      	str	r3, [sp, #28]
 80050b8:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 80050bc:	9306      	str	r3, [sp, #24]
 80050be:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80050c2:	9305      	str	r3, [sp, #20]
 80050c4:	ab0b      	add	r3, sp, #44	; 0x2c
 80050c6:	9304      	str	r3, [sp, #16]
 80050c8:	f104 031c 	add.w	r3, r4, #28
 80050cc:	9303      	str	r3, [sp, #12]
 80050ce:	ab0c      	add	r3, sp, #48	; 0x30
 80050d0:	9302      	str	r3, [sp, #8]
 80050d2:	f104 0314 	add.w	r3, r4, #20
 80050d6:	9301      	str	r3, [sp, #4]
 80050d8:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	4623      	mov	r3, r4
 80050e0:	aa0e      	add	r2, sp, #56	; 0x38
 80050e2:	4913      	ldr	r1, [pc, #76]	; (8005130 <minmea_parse_rmc+0x90>)
 80050e4:	f7ff fc20 	bl	8004928 <minmea_scan>
 80050e8:	4605      	mov	r5, r0
 80050ea:	b1d8      	cbz	r0, 8005124 <minmea_parse_rmc+0x84>
            &frame->speed,
            &frame->course,
            &frame->date,
            &frame->variation, &variation_direction))
        return false;
    if (strcmp(type+2, "RMC"))
 80050ec:	4911      	ldr	r1, [pc, #68]	; (8005134 <minmea_parse_rmc+0x94>)
 80050ee:	f10d 003a 	add.w	r0, sp, #58	; 0x3a
 80050f2:	f7fb f875 	bl	80001e0 <strcmp>
 80050f6:	b9c0      	cbnz	r0, 800512a <minmea_parse_rmc+0x8a>
        return false;

    frame->valid = (validity == 'A');
 80050f8:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 80050fc:	2b41      	cmp	r3, #65	; 0x41
 80050fe:	bf14      	ite	ne
 8005100:	2300      	movne	r3, #0
 8005102:	2301      	moveq	r3, #1
 8005104:	7423      	strb	r3, [r4, #16]
    frame->latitude.value *= latitude_direction;
 8005106:	6962      	ldr	r2, [r4, #20]
 8005108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800510a:	fb03 f302 	mul.w	r3, r3, r2
 800510e:	6163      	str	r3, [r4, #20]
    frame->longitude.value *= longitude_direction;
 8005110:	69e2      	ldr	r2, [r4, #28]
 8005112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005114:	fb03 f302 	mul.w	r3, r3, r2
 8005118:	61e3      	str	r3, [r4, #28]
    frame->variation.value *= variation_direction;
 800511a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800511c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800511e:	fb03 f302 	mul.w	r3, r3, r2
 8005122:	6423      	str	r3, [r4, #64]	; 0x40

    return true;
}
 8005124:	4628      	mov	r0, r5
 8005126:	b011      	add	sp, #68	; 0x44
 8005128:	bd30      	pop	{r4, r5, pc}
        return false;
 800512a:	2500      	movs	r5, #0
 800512c:	e7fa      	b.n	8005124 <minmea_parse_rmc+0x84>
 800512e:	bf00      	nop
 8005130:	0800c21c 	.word	0x0800c21c
 8005134:	0800c240 	.word	0x0800c240

08005138 <minmea_parse_gga>:

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)
{
 8005138:	b530      	push	{r4, r5, lr}
 800513a:	b091      	sub	sp, #68	; 0x44
 800513c:	4604      	mov	r4, r0
 800513e:	4608      	mov	r0, r1
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfcf_",
 8005140:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8005144:	930b      	str	r3, [sp, #44]	; 0x2c
 8005146:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800514a:	930a      	str	r3, [sp, #40]	; 0x28
 800514c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8005150:	9309      	str	r3, [sp, #36]	; 0x24
 8005152:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8005156:	9308      	str	r3, [sp, #32]
 8005158:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800515c:	9307      	str	r3, [sp, #28]
 800515e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8005162:	9306      	str	r3, [sp, #24]
 8005164:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8005168:	9305      	str	r3, [sp, #20]
 800516a:	f104 0320 	add.w	r3, r4, #32
 800516e:	9304      	str	r3, [sp, #16]
 8005170:	ab0c      	add	r3, sp, #48	; 0x30
 8005172:	9303      	str	r3, [sp, #12]
 8005174:	f104 0318 	add.w	r3, r4, #24
 8005178:	9302      	str	r3, [sp, #8]
 800517a:	ab0d      	add	r3, sp, #52	; 0x34
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	f104 0310 	add.w	r3, r4, #16
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	4623      	mov	r3, r4
 8005186:	aa0e      	add	r2, sp, #56	; 0x38
 8005188:	490c      	ldr	r1, [pc, #48]	; (80051bc <minmea_parse_gga+0x84>)
 800518a:	f7ff fbcd 	bl	8004928 <minmea_scan>
 800518e:	4605      	mov	r5, r0
 8005190:	b178      	cbz	r0, 80051b2 <minmea_parse_gga+0x7a>
            &frame->hdop,
            &frame->altitude, &frame->altitude_units,
            &frame->height, &frame->height_units,
            &frame->dgps_age))
        return false;
    if (strcmp(type+2, "GGA"))
 8005192:	490b      	ldr	r1, [pc, #44]	; (80051c0 <minmea_parse_gga+0x88>)
 8005194:	f10d 003a 	add.w	r0, sp, #58	; 0x3a
 8005198:	f7fb f822 	bl	80001e0 <strcmp>
 800519c:	b960      	cbnz	r0, 80051b8 <minmea_parse_gga+0x80>
        return false;

    frame->latitude.value *= latitude_direction;
 800519e:	6922      	ldr	r2, [r4, #16]
 80051a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051a2:	fb03 f302 	mul.w	r3, r3, r2
 80051a6:	6123      	str	r3, [r4, #16]
    frame->longitude.value *= longitude_direction;
 80051a8:	69a2      	ldr	r2, [r4, #24]
 80051aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051ac:	fb03 f302 	mul.w	r3, r3, r2
 80051b0:	61a3      	str	r3, [r4, #24]

    return true;
}
 80051b2:	4628      	mov	r0, r5
 80051b4:	b011      	add	sp, #68	; 0x44
 80051b6:	bd30      	pop	{r4, r5, pc}
        return false;
 80051b8:	2500      	movs	r5, #0
 80051ba:	e7fa      	b.n	80051b2 <minmea_parse_gga+0x7a>
 80051bc:	0800c1e8 	.word	0x0800c1e8
 80051c0:	0800c244 	.word	0x0800c244

080051c4 <minmea_parse_gst>:

    return true;
}

bool minmea_parse_gst(struct minmea_sentence_gst *frame, const char *sentence)
{
 80051c4:	b510      	push	{r4, lr}
 80051c6:	b08a      	sub	sp, #40	; 0x28
 80051c8:	4603      	mov	r3, r0
 80051ca:	4608      	mov	r0, r1
    // $GPGST,024603.00,3.2,6.6,4.7,47.3,5.8,5.6,22.0*58
    char type[6];

    if (!minmea_scan(sentence, "tTfffffff",
 80051cc:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80051d0:	9206      	str	r2, [sp, #24]
 80051d2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80051d6:	9205      	str	r2, [sp, #20]
 80051d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051dc:	9204      	str	r2, [sp, #16]
 80051de:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80051e2:	9203      	str	r2, [sp, #12]
 80051e4:	f103 0220 	add.w	r2, r3, #32
 80051e8:	9202      	str	r2, [sp, #8]
 80051ea:	f103 0218 	add.w	r2, r3, #24
 80051ee:	9201      	str	r2, [sp, #4]
 80051f0:	f103 0210 	add.w	r2, r3, #16
 80051f4:	9200      	str	r2, [sp, #0]
 80051f6:	aa08      	add	r2, sp, #32
 80051f8:	4907      	ldr	r1, [pc, #28]	; (8005218 <minmea_parse_gst+0x54>)
 80051fa:	f7ff fb95 	bl	8004928 <minmea_scan>
 80051fe:	4604      	mov	r4, r0
 8005200:	b128      	cbz	r0, 800520e <minmea_parse_gst+0x4a>
            &frame->semi_major_orientation,
            &frame->latitude_error_deviation,
            &frame->longitude_error_deviation,
            &frame->altitude_error_deviation))
        return false;
    if (strcmp(type+2, "GST"))
 8005202:	4906      	ldr	r1, [pc, #24]	; (800521c <minmea_parse_gst+0x58>)
 8005204:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8005208:	f7fa ffea 	bl	80001e0 <strcmp>
 800520c:	b910      	cbnz	r0, 8005214 <minmea_parse_gst+0x50>
        return false;

    return true;
}
 800520e:	4620      	mov	r0, r4
 8005210:	b00a      	add	sp, #40	; 0x28
 8005212:	bd10      	pop	{r4, pc}
        return false;
 8005214:	2400      	movs	r4, #0
 8005216:	e7fa      	b.n	800520e <minmea_parse_gst+0x4a>
 8005218:	0800c1f8 	.word	0x0800c1f8
 800521c:	0800c250 	.word	0x0800c250

08005220 <minmea_parse_gsv>:

bool minmea_parse_gsv(struct minmea_sentence_gsv *frame, const char *sentence)
{
 8005220:	b510      	push	{r4, lr}
 8005222:	b094      	sub	sp, #80	; 0x50
 8005224:	4603      	mov	r3, r0
 8005226:	4608      	mov	r0, r1
    // $GPGSV,4,2,11,08,51,203,30,09,45,215,28*75
    // $GPGSV,4,4,13,39,31,170,27*40
    // $GPGSV,4,4,13*7B
    char type[6];

    if (!minmea_scan(sentence, "tiii;iiiiiiiiiiiiiiii",
 8005228:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800522c:	9211      	str	r2, [sp, #68]	; 0x44
 800522e:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8005232:	9210      	str	r2, [sp, #64]	; 0x40
 8005234:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005238:	920f      	str	r2, [sp, #60]	; 0x3c
 800523a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800523e:	920e      	str	r2, [sp, #56]	; 0x38
 8005240:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005244:	920d      	str	r2, [sp, #52]	; 0x34
 8005246:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800524a:	920c      	str	r2, [sp, #48]	; 0x30
 800524c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005250:	920b      	str	r2, [sp, #44]	; 0x2c
 8005252:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8005256:	920a      	str	r2, [sp, #40]	; 0x28
 8005258:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800525c:	9209      	str	r2, [sp, #36]	; 0x24
 800525e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8005262:	9208      	str	r2, [sp, #32]
 8005264:	f103 0220 	add.w	r2, r3, #32
 8005268:	9207      	str	r2, [sp, #28]
 800526a:	f103 021c 	add.w	r2, r3, #28
 800526e:	9206      	str	r2, [sp, #24]
 8005270:	f103 0218 	add.w	r2, r3, #24
 8005274:	9205      	str	r2, [sp, #20]
 8005276:	f103 0214 	add.w	r2, r3, #20
 800527a:	9204      	str	r2, [sp, #16]
 800527c:	f103 0210 	add.w	r2, r3, #16
 8005280:	9203      	str	r2, [sp, #12]
 8005282:	f103 020c 	add.w	r2, r3, #12
 8005286:	9202      	str	r2, [sp, #8]
 8005288:	f103 0208 	add.w	r2, r3, #8
 800528c:	9201      	str	r2, [sp, #4]
 800528e:	1d1a      	adds	r2, r3, #4
 8005290:	9200      	str	r2, [sp, #0]
 8005292:	aa12      	add	r2, sp, #72	; 0x48
 8005294:	4907      	ldr	r1, [pc, #28]	; (80052b4 <minmea_parse_gsv+0x94>)
 8005296:	f7ff fb47 	bl	8004928 <minmea_scan>
 800529a:	4604      	mov	r4, r0
 800529c:	b128      	cbz	r0, 80052aa <minmea_parse_gsv+0x8a>
            &frame->sats[3].azimuth,
            &frame->sats[3].snr
            )) {
        return false;
    }
    if (strcmp(type+2, "GSV"))
 800529e:	4906      	ldr	r1, [pc, #24]	; (80052b8 <minmea_parse_gsv+0x98>)
 80052a0:	f10d 004a 	add.w	r0, sp, #74	; 0x4a
 80052a4:	f7fa ff9c 	bl	80001e0 <strcmp>
 80052a8:	b910      	cbnz	r0, 80052b0 <minmea_parse_gsv+0x90>
        return false;

    return true;
}
 80052aa:	4620      	mov	r0, r4
 80052ac:	b014      	add	sp, #80	; 0x50
 80052ae:	bd10      	pop	{r4, pc}
        return false;
 80052b0:	2400      	movs	r4, #0
 80052b2:	e7fa      	b.n	80052aa <minmea_parse_gsv+0x8a>
 80052b4:	0800c204 	.word	0x0800c204
 80052b8:	0800c254 	.word	0x0800c254

080052bc <minmea_parse_vtg>:

bool minmea_parse_vtg(struct minmea_sentence_vtg *frame, const char *sentence)
{
 80052bc:	b530      	push	{r4, r5, lr}
 80052be:	b08d      	sub	sp, #52	; 0x34
 80052c0:	4604      	mov	r4, r0
 80052c2:	4608      	mov	r0, r1
    // $GPVTG,096.5,T,083.5,M,0.0,N,0.0,K,D*22
    // $GPVTG,188.36,T,,M,0.820,N,1.519,K,A*3F
    char type[6];
    char c_true, c_magnetic, c_knots, c_kph, c_faa_mode;

    if (!minmea_scan(sentence, "tfcfcfcfc;c",
 80052c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80052c8:	9307      	str	r3, [sp, #28]
 80052ca:	ab09      	add	r3, sp, #36	; 0x24
 80052cc:	9306      	str	r3, [sp, #24]
 80052ce:	f104 0318 	add.w	r3, r4, #24
 80052d2:	9305      	str	r3, [sp, #20]
 80052d4:	f10d 0325 	add.w	r3, sp, #37	; 0x25
 80052d8:	9304      	str	r3, [sp, #16]
 80052da:	f104 0310 	add.w	r3, r4, #16
 80052de:	9303      	str	r3, [sp, #12]
 80052e0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80052e4:	9302      	str	r3, [sp, #8]
 80052e6:	f104 0308 	add.w	r3, r4, #8
 80052ea:	9301      	str	r3, [sp, #4]
 80052ec:	f10d 0327 	add.w	r3, sp, #39	; 0x27
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	4623      	mov	r3, r4
 80052f4:	aa0a      	add	r2, sp, #40	; 0x28
 80052f6:	4916      	ldr	r1, [pc, #88]	; (8005350 <minmea_parse_vtg+0x94>)
 80052f8:	f7ff fb16 	bl	8004928 <minmea_scan>
 80052fc:	4605      	mov	r5, r0
 80052fe:	b318      	cbz	r0, 8005348 <minmea_parse_vtg+0x8c>
            &c_knots,
            &frame->speed_kph,
            &c_kph,
            &c_faa_mode))
        return false;
    if (strcmp(type+2, "VTG"))
 8005300:	4914      	ldr	r1, [pc, #80]	; (8005354 <minmea_parse_vtg+0x98>)
 8005302:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 8005306:	f7fa ff6b 	bl	80001e0 <strcmp>
 800530a:	b9e0      	cbnz	r0, 8005346 <minmea_parse_vtg+0x8a>
        return false;
    // check chars
    if (c_true != 'T' ||
 800530c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8005310:	2b54      	cmp	r3, #84	; 0x54
 8005312:	d001      	beq.n	8005318 <minmea_parse_vtg+0x5c>
        c_magnetic != 'M' ||
        c_knots != 'N' ||
        c_kph != 'K')
        return false;
 8005314:	2500      	movs	r5, #0
 8005316:	e017      	b.n	8005348 <minmea_parse_vtg+0x8c>
        c_magnetic != 'M' ||
 8005318:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    if (c_true != 'T' ||
 800531c:	2b4d      	cmp	r3, #77	; 0x4d
 800531e:	d001      	beq.n	8005324 <minmea_parse_vtg+0x68>
        return false;
 8005320:	2500      	movs	r5, #0
 8005322:	e011      	b.n	8005348 <minmea_parse_vtg+0x8c>
        c_knots != 'N' ||
 8005324:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
        c_magnetic != 'M' ||
 8005328:	2b4e      	cmp	r3, #78	; 0x4e
 800532a:	d001      	beq.n	8005330 <minmea_parse_vtg+0x74>
        return false;
 800532c:	2500      	movs	r5, #0
 800532e:	e00b      	b.n	8005348 <minmea_parse_vtg+0x8c>
        c_kph != 'K')
 8005330:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
        c_knots != 'N' ||
 8005334:	2b4b      	cmp	r3, #75	; 0x4b
 8005336:	d001      	beq.n	800533c <minmea_parse_vtg+0x80>
        return false;
 8005338:	2500      	movs	r5, #0
 800533a:	e005      	b.n	8005348 <minmea_parse_vtg+0x8c>
    frame->faa_mode = (enum minmea_faa_mode)c_faa_mode;
 800533c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005340:	f884 3020 	strb.w	r3, [r4, #32]

    return true;
 8005344:	e000      	b.n	8005348 <minmea_parse_vtg+0x8c>
        return false;
 8005346:	2500      	movs	r5, #0
}
 8005348:	4628      	mov	r0, r5
 800534a:	b00d      	add	sp, #52	; 0x34
 800534c:	bd30      	pop	{r4, r5, pc}
 800534e:	bf00      	nop
 8005350:	0800c22c 	.word	0x0800c22c
 8005354:	0800c258 	.word	0x0800c258

08005358 <minmea_parse_zda>:

bool minmea_parse_zda(struct minmea_sentence_zda *frame, const char *sentence)
{
 8005358:	b530      	push	{r4, r5, lr}
 800535a:	b089      	sub	sp, #36	; 0x24
 800535c:	4604      	mov	r4, r0
 800535e:	4608      	mov	r0, r1
  // $GPZDA,201530.00,04,07,2002,00,00*60
  char type[6];

  if(!minmea_scan(sentence, "tTiiiii",
 8005360:	f104 0320 	add.w	r3, r4, #32
 8005364:	9304      	str	r3, [sp, #16]
 8005366:	f104 031c 	add.w	r3, r4, #28
 800536a:	9303      	str	r3, [sp, #12]
 800536c:	f104 0318 	add.w	r3, r4, #24
 8005370:	9302      	str	r3, [sp, #8]
 8005372:	f104 0314 	add.w	r3, r4, #20
 8005376:	9301      	str	r3, [sp, #4]
 8005378:	f104 0310 	add.w	r3, r4, #16
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	4623      	mov	r3, r4
 8005380:	aa06      	add	r2, sp, #24
 8005382:	4910      	ldr	r1, [pc, #64]	; (80053c4 <minmea_parse_zda+0x6c>)
 8005384:	f7ff fad0 	bl	8004928 <minmea_scan>
 8005388:	4605      	mov	r5, r0
 800538a:	b198      	cbz	r0, 80053b4 <minmea_parse_zda+0x5c>
          &frame->date.month,
          &frame->date.year,
          &frame->hour_offset,
          &frame->minute_offset))
      return false;
  if (strcmp(type+2, "ZDA"))
 800538c:	490e      	ldr	r1, [pc, #56]	; (80053c8 <minmea_parse_zda+0x70>)
 800538e:	f10d 001a 	add.w	r0, sp, #26
 8005392:	f7fa ff25 	bl	80001e0 <strcmp>
 8005396:	b960      	cbnz	r0, 80053b2 <minmea_parse_zda+0x5a>
      return false;

  // check offsets
  if (abs(frame->hour_offset) > 13 ||
 8005398:	69e3      	ldr	r3, [r4, #28]
 800539a:	2b00      	cmp	r3, #0
 800539c:	bfb8      	it	lt
 800539e:	425b      	neglt	r3, r3
 80053a0:	2b0d      	cmp	r3, #13
 80053a2:	dc0a      	bgt.n	80053ba <minmea_parse_zda+0x62>
      frame->minute_offset > 59 ||
 80053a4:	6a23      	ldr	r3, [r4, #32]
  if (abs(frame->hour_offset) > 13 ||
 80053a6:	2b3b      	cmp	r3, #59	; 0x3b
 80053a8:	dc09      	bgt.n	80053be <minmea_parse_zda+0x66>
      frame->minute_offset > 59 ||
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	da02      	bge.n	80053b4 <minmea_parse_zda+0x5c>
      frame->minute_offset < 0)
      return false;
 80053ae:	2500      	movs	r5, #0
 80053b0:	e000      	b.n	80053b4 <minmea_parse_zda+0x5c>
      return false;
 80053b2:	2500      	movs	r5, #0

  return true;
}
 80053b4:	4628      	mov	r0, r5
 80053b6:	b009      	add	sp, #36	; 0x24
 80053b8:	bd30      	pop	{r4, r5, pc}
      return false;
 80053ba:	2500      	movs	r5, #0
 80053bc:	e7fa      	b.n	80053b4 <minmea_parse_zda+0x5c>
 80053be:	2500      	movs	r5, #0
 80053c0:	e7f8      	b.n	80053b4 <minmea_parse_zda+0x5c>
 80053c2:	bf00      	nop
 80053c4:	0800c238 	.word	0x0800c238
 80053c8:	0800c25c 	.word	0x0800c25c

080053cc <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80053cc:	2884      	cmp	r0, #132	; 0x84
 80053ce:	d001      	beq.n	80053d4 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 80053d0:	3003      	adds	r0, #3
 80053d2:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80053d4:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 80053d6:	4770      	bx	lr

080053d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80053d8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80053da:	f000 fca5 	bl	8005d28 <vTaskStartScheduler>
  
  return osOK;
}
 80053de:	2000      	movs	r0, #0
 80053e0:	bd08      	pop	{r3, pc}

080053e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80053e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053e6:	b087      	sub	sp, #28
 80053e8:	4604      	mov	r4, r0
 80053ea:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80053ec:	6945      	ldr	r5, [r0, #20]
 80053ee:	b1a5      	cbz	r5, 800541a <osThreadCreate+0x38>
 80053f0:	6986      	ldr	r6, [r0, #24]
 80053f2:	b196      	cbz	r6, 800541a <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053f4:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80053f8:	f8d0 9000 	ldr.w	r9, [r0]
 80053fc:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8005400:	f7ff ffe4 	bl	80053cc <makeFreeRtosPriority>
 8005404:	6922      	ldr	r2, [r4, #16]
 8005406:	9602      	str	r6, [sp, #8]
 8005408:	9501      	str	r5, [sp, #4]
 800540a:	9000      	str	r0, [sp, #0]
 800540c:	463b      	mov	r3, r7
 800540e:	4649      	mov	r1, r9
 8005410:	4640      	mov	r0, r8
 8005412:	f000 fc1d 	bl	8005c50 <xTaskCreateStatic>
 8005416:	9005      	str	r0, [sp, #20]
 8005418:	e013      	b.n	8005442 <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800541a:	6865      	ldr	r5, [r4, #4]
 800541c:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800541e:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005422:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8005426:	f7ff ffd1 	bl	80053cc <makeFreeRtosPriority>
 800542a:	ab05      	add	r3, sp, #20
 800542c:	9301      	str	r3, [sp, #4]
 800542e:	9000      	str	r0, [sp, #0]
 8005430:	463b      	mov	r3, r7
 8005432:	fa1f f288 	uxth.w	r2, r8
 8005436:	4631      	mov	r1, r6
 8005438:	4628      	mov	r0, r5
 800543a:	f000 fc42 	bl	8005cc2 <xTaskCreate>
 800543e:	2801      	cmp	r0, #1
 8005440:	d103      	bne.n	800544a <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005442:	9805      	ldr	r0, [sp, #20]
}
 8005444:	b007      	add	sp, #28
 8005446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 800544a:	2000      	movs	r0, #0
 800544c:	e7fa      	b.n	8005444 <osThreadCreate+0x62>

0800544e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800544e:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005450:	4603      	mov	r3, r0
 8005452:	b900      	cbnz	r0, 8005456 <osDelay+0x8>
 8005454:	2301      	movs	r3, #1
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fdaa 	bl	8005fb0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800545c:	2000      	movs	r0, #0
 800545e:	bd08      	pop	{r3, pc}

08005460 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005460:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005462:	6841      	ldr	r1, [r0, #4]
 8005464:	b119      	cbz	r1, 800546e <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005466:	2001      	movs	r0, #1
 8005468:	f000 fa63 	bl	8005932 <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800546c:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 800546e:	2001      	movs	r0, #1
 8005470:	f000 fa54 	bl	800591c <xQueueCreateMutex>
 8005474:	e7fa      	b.n	800546c <osMutexCreate+0xc>

08005476 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005476:	f100 0308 	add.w	r3, r0, #8
 800547a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800547c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005480:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005482:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005484:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800548a:	4770      	bx	lr

0800548c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800548c:	2300      	movs	r3, #0
 800548e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005490:	4770      	bx	lr

08005492 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005492:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005494:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800549e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80054a0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80054a2:	6803      	ldr	r3, [r0, #0]
 80054a4:	3301      	adds	r3, #1
 80054a6:	6003      	str	r3, [r0, #0]
}
 80054a8:	4770      	bx	lr

080054aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054aa:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054ac:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054ae:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80054b2:	d002      	beq.n	80054ba <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054b4:	f100 0208 	add.w	r2, r0, #8
 80054b8:	e002      	b.n	80054c0 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 80054ba:	6902      	ldr	r2, [r0, #16]
 80054bc:	e004      	b.n	80054c8 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054be:	461a      	mov	r2, r3
 80054c0:	6853      	ldr	r3, [r2, #4]
 80054c2:	681c      	ldr	r4, [r3, #0]
 80054c4:	42ac      	cmp	r4, r5
 80054c6:	d9fa      	bls.n	80054be <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054c8:	6853      	ldr	r3, [r2, #4]
 80054ca:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054cc:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054ce:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80054d0:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80054d2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80054d4:	6803      	ldr	r3, [r0, #0]
 80054d6:	3301      	adds	r3, #1
 80054d8:	6003      	str	r3, [r0, #0]
}
 80054da:	bc30      	pop	{r4, r5}
 80054dc:	4770      	bx	lr

080054de <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80054de:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054e0:	6842      	ldr	r2, [r0, #4]
 80054e2:	6881      	ldr	r1, [r0, #8]
 80054e4:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054e6:	6882      	ldr	r2, [r0, #8]
 80054e8:	6841      	ldr	r1, [r0, #4]
 80054ea:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	4282      	cmp	r2, r0
 80054f0:	d006      	beq.n	8005500 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80054f2:	2200      	movs	r2, #0
 80054f4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	3a01      	subs	r2, #1
 80054fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054fc:	6818      	ldr	r0, [r3, #0]
}
 80054fe:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005500:	6882      	ldr	r2, [r0, #8]
 8005502:	605a      	str	r2, [r3, #4]
 8005504:	e7f5      	b.n	80054f2 <uxListRemove+0x14>

08005506 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005506:	b510      	push	{r4, lr}
 8005508:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800550a:	f000 ff43 	bl	8006394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800550e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005510:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005512:	429a      	cmp	r2, r3
 8005514:	d004      	beq.n	8005520 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8005516:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8005518:	f000 ff5e 	bl	80063d8 <vPortExitCritical>

	return xReturn;
}
 800551c:	4620      	mov	r0, r4
 800551e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8005520:	2401      	movs	r4, #1
 8005522:	e7f9      	b.n	8005518 <prvIsQueueFull+0x12>

08005524 <prvCopyDataToQueue>:
{
 8005524:	b570      	push	{r4, r5, r6, lr}
 8005526:	4604      	mov	r4, r0
 8005528:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800552a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800552c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800552e:	b95a      	cbnz	r2, 8005548 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005530:	6803      	ldr	r3, [r0, #0]
 8005532:	b11b      	cbz	r3, 800553c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8005534:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005536:	3501      	adds	r5, #1
 8005538:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800553a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800553c:	6840      	ldr	r0, [r0, #4]
 800553e:	f000 fe69 	bl	8006214 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8005542:	2300      	movs	r3, #0
 8005544:	6063      	str	r3, [r4, #4]
 8005546:	e7f6      	b.n	8005536 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8005548:	b96e      	cbnz	r6, 8005566 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800554a:	6880      	ldr	r0, [r0, #8]
 800554c:	f002 fb04 	bl	8007b58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005550:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005552:	68a3      	ldr	r3, [r4, #8]
 8005554:	4413      	add	r3, r2
 8005556:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005558:	6862      	ldr	r2, [r4, #4]
 800555a:	4293      	cmp	r3, r2
 800555c:	d319      	bcc.n	8005592 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8005562:	2000      	movs	r0, #0
 8005564:	e7e7      	b.n	8005536 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005566:	68c0      	ldr	r0, [r0, #12]
 8005568:	f002 faf6 	bl	8007b58 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800556c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800556e:	4252      	negs	r2, r2
 8005570:	68e3      	ldr	r3, [r4, #12]
 8005572:	4413      	add	r3, r2
 8005574:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005576:	6821      	ldr	r1, [r4, #0]
 8005578:	428b      	cmp	r3, r1
 800557a:	d202      	bcs.n	8005582 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800557c:	6863      	ldr	r3, [r4, #4]
 800557e:	441a      	add	r2, r3
 8005580:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005582:	2e02      	cmp	r6, #2
 8005584:	d001      	beq.n	800558a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8005586:	2000      	movs	r0, #0
 8005588:	e7d5      	b.n	8005536 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800558a:	b125      	cbz	r5, 8005596 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800558c:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 800558e:	2000      	movs	r0, #0
 8005590:	e7d1      	b.n	8005536 <prvCopyDataToQueue+0x12>
 8005592:	2000      	movs	r0, #0
 8005594:	e7cf      	b.n	8005536 <prvCopyDataToQueue+0x12>
 8005596:	2000      	movs	r0, #0
 8005598:	e7cd      	b.n	8005536 <prvCopyDataToQueue+0x12>

0800559a <prvUnlockQueue>:
{
 800559a:	b538      	push	{r3, r4, r5, lr}
 800559c:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800559e:	f000 fef9 	bl	8006394 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80055a2:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 80055a6:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055a8:	e003      	b.n	80055b2 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80055aa:	f000 fe1d 	bl	80061e8 <vTaskMissedYield>
			--cTxLock;
 80055ae:	3c01      	subs	r4, #1
 80055b0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055b2:	2c00      	cmp	r4, #0
 80055b4:	dd08      	ble.n	80055c8 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80055b8:	b133      	cbz	r3, 80055c8 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055ba:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80055be:	f000 fd81 	bl	80060c4 <xTaskRemoveFromEventList>
 80055c2:	2800      	cmp	r0, #0
 80055c4:	d0f3      	beq.n	80055ae <prvUnlockQueue+0x14>
 80055c6:	e7f0      	b.n	80055aa <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80055c8:	23ff      	movs	r3, #255	; 0xff
 80055ca:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80055ce:	f000 ff03 	bl	80063d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80055d2:	f000 fedf 	bl	8006394 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80055d6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80055da:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055dc:	e003      	b.n	80055e6 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 80055de:	f000 fe03 	bl	80061e8 <vTaskMissedYield>
				--cRxLock;
 80055e2:	3c01      	subs	r4, #1
 80055e4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055e6:	2c00      	cmp	r4, #0
 80055e8:	dd08      	ble.n	80055fc <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055ea:	692b      	ldr	r3, [r5, #16]
 80055ec:	b133      	cbz	r3, 80055fc <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055ee:	f105 0010 	add.w	r0, r5, #16
 80055f2:	f000 fd67 	bl	80060c4 <xTaskRemoveFromEventList>
 80055f6:	2800      	cmp	r0, #0
 80055f8:	d0f3      	beq.n	80055e2 <prvUnlockQueue+0x48>
 80055fa:	e7f0      	b.n	80055de <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80055fc:	23ff      	movs	r3, #255	; 0xff
 80055fe:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8005602:	f000 fee9 	bl	80063d8 <vPortExitCritical>
}
 8005606:	bd38      	pop	{r3, r4, r5, pc}

08005608 <xQueueGenericReset>:
{
 8005608:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800560a:	b940      	cbnz	r0, 800561e <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	e7fe      	b.n	800561c <xQueueGenericReset+0x14>
 800561e:	4604      	mov	r4, r0
 8005620:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8005622:	f000 feb7 	bl	8006394 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005626:	6821      	ldr	r1, [r4, #0]
 8005628:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800562a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800562c:	fb03 1002 	mla	r0, r3, r2, r1
 8005630:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005632:	2000      	movs	r0, #0
 8005634:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005636:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005638:	3a01      	subs	r2, #1
 800563a:	fb02 1303 	mla	r3, r2, r3, r1
 800563e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005640:	23ff      	movs	r3, #255	; 0xff
 8005642:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005646:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800564a:	b9a5      	cbnz	r5, 8005676 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800564c:	6923      	ldr	r3, [r4, #16]
 800564e:	b91b      	cbnz	r3, 8005658 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8005650:	f000 fec2 	bl	80063d8 <vPortExitCritical>
}
 8005654:	2001      	movs	r0, #1
 8005656:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005658:	f104 0010 	add.w	r0, r4, #16
 800565c:	f000 fd32 	bl	80060c4 <xTaskRemoveFromEventList>
 8005660:	2800      	cmp	r0, #0
 8005662:	d0f5      	beq.n	8005650 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8005664:	4b08      	ldr	r3, [pc, #32]	; (8005688 <xQueueGenericReset+0x80>)
 8005666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	e7ec      	b.n	8005650 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005676:	f104 0010 	add.w	r0, r4, #16
 800567a:	f7ff fefc 	bl	8005476 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800567e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005682:	f7ff fef8 	bl	8005476 <vListInitialise>
 8005686:	e7e3      	b.n	8005650 <xQueueGenericReset+0x48>
 8005688:	e000ed04 	.word	0xe000ed04

0800568c <prvInitialiseNewQueue>:
{
 800568c:	b510      	push	{r4, lr}
 800568e:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005690:	460c      	mov	r4, r1
 8005692:	b139      	cbz	r1, 80056a4 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005694:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005696:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005698:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800569a:	2101      	movs	r1, #1
 800569c:	4618      	mov	r0, r3
 800569e:	f7ff ffb3 	bl	8005608 <xQueueGenericReset>
}
 80056a2:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056a4:	601b      	str	r3, [r3, #0]
 80056a6:	e7f6      	b.n	8005696 <prvInitialiseNewQueue+0xa>

080056a8 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056a8:	b940      	cbnz	r0, 80056bc <xQueueGenericCreateStatic+0x14>
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	e7fe      	b.n	80056ba <xQueueGenericCreateStatic+0x12>
	{
 80056bc:	b510      	push	{r4, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 80056c2:	b153      	cbz	r3, 80056da <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056c4:	b192      	cbz	r2, 80056ec <xQueueGenericCreateStatic+0x44>
 80056c6:	b989      	cbnz	r1, 80056ec <xQueueGenericCreateStatic+0x44>
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	e7fe      	b.n	80056d8 <xQueueGenericCreateStatic+0x30>
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	e7fe      	b.n	80056ea <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056ec:	b94a      	cbnz	r2, 8005702 <xQueueGenericCreateStatic+0x5a>
 80056ee:	b141      	cbz	r1, 8005702 <xQueueGenericCreateStatic+0x5a>
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	e7fe      	b.n	8005700 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005702:	2048      	movs	r0, #72	; 0x48
 8005704:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005706:	9803      	ldr	r0, [sp, #12]
 8005708:	2848      	cmp	r0, #72	; 0x48
 800570a:	d008      	beq.n	800571e <xQueueGenericCreateStatic+0x76>
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	e7fe      	b.n	800571c <xQueueGenericCreateStatic+0x74>
 800571e:	4620      	mov	r0, r4
 8005720:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005722:	2301      	movs	r3, #1
 8005724:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005728:	9400      	str	r4, [sp, #0]
 800572a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800572e:	f7ff ffad 	bl	800568c <prvInitialiseNewQueue>
	}
 8005732:	4620      	mov	r0, r4
 8005734:	b004      	add	sp, #16
 8005736:	bd10      	pop	{r4, pc}

08005738 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005738:	b940      	cbnz	r0, 800574c <xQueueGenericCreate+0x14>
 800573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	e7fe      	b.n	800574a <xQueueGenericCreate+0x12>
	{
 800574c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800574e:	b083      	sub	sp, #12
 8005750:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8005752:	b111      	cbz	r1, 800575a <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005754:	fb01 f000 	mul.w	r0, r1, r0
 8005758:	e000      	b.n	800575c <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 800575a:	2000      	movs	r0, #0
 800575c:	4617      	mov	r7, r2
 800575e:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005760:	3048      	adds	r0, #72	; 0x48
 8005762:	f000 ff9f 	bl	80066a4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005766:	4605      	mov	r5, r0
 8005768:	b150      	cbz	r0, 8005780 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800576a:	2300      	movs	r3, #0
 800576c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005770:	9000      	str	r0, [sp, #0]
 8005772:	463b      	mov	r3, r7
 8005774:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8005778:	4621      	mov	r1, r4
 800577a:	4630      	mov	r0, r6
 800577c:	f7ff ff86 	bl	800568c <prvInitialiseNewQueue>
	}
 8005780:	4628      	mov	r0, r5
 8005782:	b003      	add	sp, #12
 8005784:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005788 <xQueueGenericSend>:
{
 8005788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800578a:	b085      	sub	sp, #20
 800578c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800578e:	b160      	cbz	r0, 80057aa <xQueueGenericSend+0x22>
 8005790:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005792:	b999      	cbnz	r1, 80057bc <xQueueGenericSend+0x34>
 8005794:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005796:	b18a      	cbz	r2, 80057bc <xQueueGenericSend+0x34>
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	e7fe      	b.n	80057a8 <xQueueGenericSend+0x20>
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	e7fe      	b.n	80057ba <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d10b      	bne.n	80057d8 <xQueueGenericSend+0x50>
 80057c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80057c2:	2a01      	cmp	r2, #1
 80057c4:	d008      	beq.n	80057d8 <xQueueGenericSend+0x50>
 80057c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	e7fe      	b.n	80057d6 <xQueueGenericSend+0x4e>
 80057d8:	461e      	mov	r6, r3
 80057da:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057dc:	f000 fd0a 	bl	80061f4 <xTaskGetSchedulerState>
 80057e0:	b950      	cbnz	r0, 80057f8 <xQueueGenericSend+0x70>
 80057e2:	9b01      	ldr	r3, [sp, #4]
 80057e4:	b153      	cbz	r3, 80057fc <xQueueGenericSend+0x74>
 80057e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ea:	f383 8811 	msr	BASEPRI, r3
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	e7fe      	b.n	80057f6 <xQueueGenericSend+0x6e>
 80057f8:	2500      	movs	r5, #0
 80057fa:	e03a      	b.n	8005872 <xQueueGenericSend+0xea>
 80057fc:	2500      	movs	r5, #0
 80057fe:	e038      	b.n	8005872 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005800:	4632      	mov	r2, r6
 8005802:	4639      	mov	r1, r7
 8005804:	4620      	mov	r0, r4
 8005806:	f7ff fe8d 	bl	8005524 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800580a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800580c:	b94b      	cbnz	r3, 8005822 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 800580e:	b1a8      	cbz	r0, 800583c <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8005810:	4b3b      	ldr	r3, [pc, #236]	; (8005900 <xQueueGenericSend+0x178>)
 8005812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	e00c      	b.n	800583c <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005822:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005826:	f000 fc4d 	bl	80060c4 <xTaskRemoveFromEventList>
 800582a:	b138      	cbz	r0, 800583c <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 800582c:	4b34      	ldr	r3, [pc, #208]	; (8005900 <xQueueGenericSend+0x178>)
 800582e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800583c:	f000 fdcc 	bl	80063d8 <vPortExitCritical>
				return pdPASS;
 8005840:	2001      	movs	r0, #1
}
 8005842:	b005      	add	sp, #20
 8005844:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8005846:	f000 fdc7 	bl	80063d8 <vPortExitCritical>
					return errQUEUE_FULL;
 800584a:	2000      	movs	r0, #0
 800584c:	e7f9      	b.n	8005842 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800584e:	a802      	add	r0, sp, #8
 8005850:	f000 fc7e 	bl	8006150 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005854:	2501      	movs	r5, #1
 8005856:	e019      	b.n	800588c <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 8005858:	2300      	movs	r3, #0
 800585a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800585e:	e021      	b.n	80058a4 <xQueueGenericSend+0x11c>
 8005860:	2300      	movs	r3, #0
 8005862:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005866:	e023      	b.n	80058b0 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 8005868:	4620      	mov	r0, r4
 800586a:	f7ff fe96 	bl	800559a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800586e:	f000 fb25 	bl	8005ebc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005872:	f000 fd8f 	bl	8006394 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005876:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005878:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800587a:	429a      	cmp	r2, r3
 800587c:	d3c0      	bcc.n	8005800 <xQueueGenericSend+0x78>
 800587e:	2e02      	cmp	r6, #2
 8005880:	d0be      	beq.n	8005800 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005882:	9b01      	ldr	r3, [sp, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0de      	beq.n	8005846 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 8005888:	2d00      	cmp	r5, #0
 800588a:	d0e0      	beq.n	800584e <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 800588c:	f000 fda4 	bl	80063d8 <vPortExitCritical>
		vTaskSuspendAll();
 8005890:	f000 fa80 	bl	8005d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005894:	f000 fd7e 	bl	8006394 <vPortEnterCritical>
 8005898:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800589c:	b25b      	sxtb	r3, r3
 800589e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058a2:	d0d9      	beq.n	8005858 <xQueueGenericSend+0xd0>
 80058a4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80058a8:	b25b      	sxtb	r3, r3
 80058aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058ae:	d0d7      	beq.n	8005860 <xQueueGenericSend+0xd8>
 80058b0:	f000 fd92 	bl	80063d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058b4:	a901      	add	r1, sp, #4
 80058b6:	a802      	add	r0, sp, #8
 80058b8:	f000 fc56 	bl	8006168 <xTaskCheckForTimeOut>
 80058bc:	b9c8      	cbnz	r0, 80058f2 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80058be:	4620      	mov	r0, r4
 80058c0:	f7ff fe21 	bl	8005506 <prvIsQueueFull>
 80058c4:	2800      	cmp	r0, #0
 80058c6:	d0cf      	beq.n	8005868 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80058c8:	9901      	ldr	r1, [sp, #4]
 80058ca:	f104 0010 	add.w	r0, r4, #16
 80058ce:	f000 fbe1 	bl	8006094 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058d2:	4620      	mov	r0, r4
 80058d4:	f7ff fe61 	bl	800559a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058d8:	f000 faf0 	bl	8005ebc <xTaskResumeAll>
 80058dc:	2800      	cmp	r0, #0
 80058de:	d1c8      	bne.n	8005872 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 80058e0:	4b07      	ldr	r3, [pc, #28]	; (8005900 <xQueueGenericSend+0x178>)
 80058e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	e7bf      	b.n	8005872 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 80058f2:	4620      	mov	r0, r4
 80058f4:	f7ff fe51 	bl	800559a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058f8:	f000 fae0 	bl	8005ebc <xTaskResumeAll>
			return errQUEUE_FULL;
 80058fc:	2000      	movs	r0, #0
 80058fe:	e7a0      	b.n	8005842 <xQueueGenericSend+0xba>
 8005900:	e000ed04 	.word	0xe000ed04

08005904 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8005904:	b148      	cbz	r0, 800591a <prvInitialiseMutex+0x16>
	{
 8005906:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8005908:	2100      	movs	r1, #0
 800590a:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800590c:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800590e:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005910:	460b      	mov	r3, r1
 8005912:	460a      	mov	r2, r1
 8005914:	f7ff ff38 	bl	8005788 <xQueueGenericSend>
	}
 8005918:	bd08      	pop	{r3, pc}
 800591a:	4770      	bx	lr

0800591c <xQueueCreateMutex>:
	{
 800591c:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800591e:	4602      	mov	r2, r0
 8005920:	2100      	movs	r1, #0
 8005922:	2001      	movs	r0, #1
 8005924:	f7ff ff08 	bl	8005738 <xQueueGenericCreate>
 8005928:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800592a:	f7ff ffeb 	bl	8005904 <prvInitialiseMutex>
	}
 800592e:	4620      	mov	r0, r4
 8005930:	bd10      	pop	{r4, pc}

08005932 <xQueueCreateMutexStatic>:
	{
 8005932:	b510      	push	{r4, lr}
 8005934:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005936:	9000      	str	r0, [sp, #0]
 8005938:	460b      	mov	r3, r1
 800593a:	2200      	movs	r2, #0
 800593c:	4611      	mov	r1, r2
 800593e:	2001      	movs	r0, #1
 8005940:	f7ff feb2 	bl	80056a8 <xQueueGenericCreateStatic>
 8005944:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8005946:	f7ff ffdd 	bl	8005904 <prvInitialiseMutex>
	}
 800594a:	4620      	mov	r0, r4
 800594c:	b002      	add	sp, #8
 800594e:	bd10      	pop	{r4, pc}

08005950 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005950:	4b08      	ldr	r3, [pc, #32]	; (8005974 <prvResetNextTaskUnblockTime+0x24>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	b13b      	cbz	r3, 8005968 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005958:	4b06      	ldr	r3, [pc, #24]	; (8005974 <prvResetNextTaskUnblockTime+0x24>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	4b05      	ldr	r3, [pc, #20]	; (8005978 <prvResetNextTaskUnblockTime+0x28>)
 8005964:	601a      	str	r2, [r3, #0]
	}
}
 8005966:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8005968:	4b03      	ldr	r3, [pc, #12]	; (8005978 <prvResetNextTaskUnblockTime+0x28>)
 800596a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	20000308 	.word	0x20000308
 8005978:	200003dc 	.word	0x200003dc

0800597c <prvInitialiseNewTask>:
{
 800597c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005980:	4680      	mov	r8, r0
 8005982:	4699      	mov	r9, r3
 8005984:	9d08      	ldr	r5, [sp, #32]
 8005986:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005988:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800598a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800598c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005990:	3a01      	subs	r2, #1
 8005992:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005996:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800599a:	2300      	movs	r3, #0
 800599c:	2b0f      	cmp	r3, #15
 800599e:	d807      	bhi.n	80059b0 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059a0:	5cc8      	ldrb	r0, [r1, r3]
 80059a2:	18e2      	adds	r2, r4, r3
 80059a4:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 80059a8:	5cca      	ldrb	r2, [r1, r3]
 80059aa:	b10a      	cbz	r2, 80059b0 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059ac:	3301      	adds	r3, #1
 80059ae:	e7f5      	b.n	800599c <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059b0:	2300      	movs	r3, #0
 80059b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059b6:	2d06      	cmp	r5, #6
 80059b8:	d900      	bls.n	80059bc <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059ba:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80059bc:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80059be:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80059c0:	f04f 0a00 	mov.w	sl, #0
 80059c4:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059c8:	1d20      	adds	r0, r4, #4
 80059ca:	f7ff fd5f 	bl	800548c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059ce:	f104 0018 	add.w	r0, r4, #24
 80059d2:	f7ff fd5b 	bl	800548c <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059d6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059d8:	f1c5 0507 	rsb	r5, r5, #7
 80059dc:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059de:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80059e0:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059e4:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059e8:	464a      	mov	r2, r9
 80059ea:	4641      	mov	r1, r8
 80059ec:	4630      	mov	r0, r6
 80059ee:	f000 fca7 	bl	8006340 <pxPortInitialiseStack>
 80059f2:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80059f4:	b107      	cbz	r7, 80059f8 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059f6:	603c      	str	r4, [r7, #0]
}
 80059f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080059fc <prvInitialiseTaskLists>:
{
 80059fc:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059fe:	2400      	movs	r4, #0
 8005a00:	e007      	b.n	8005a12 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a02:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005a06:	0093      	lsls	r3, r2, #2
 8005a08:	480e      	ldr	r0, [pc, #56]	; (8005a44 <prvInitialiseTaskLists+0x48>)
 8005a0a:	4418      	add	r0, r3
 8005a0c:	f7ff fd33 	bl	8005476 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a10:	3401      	adds	r4, #1
 8005a12:	2c06      	cmp	r4, #6
 8005a14:	d9f5      	bls.n	8005a02 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8005a16:	4d0c      	ldr	r5, [pc, #48]	; (8005a48 <prvInitialiseTaskLists+0x4c>)
 8005a18:	4628      	mov	r0, r5
 8005a1a:	f7ff fd2c 	bl	8005476 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a1e:	4c0b      	ldr	r4, [pc, #44]	; (8005a4c <prvInitialiseTaskLists+0x50>)
 8005a20:	4620      	mov	r0, r4
 8005a22:	f7ff fd28 	bl	8005476 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a26:	480a      	ldr	r0, [pc, #40]	; (8005a50 <prvInitialiseTaskLists+0x54>)
 8005a28:	f7ff fd25 	bl	8005476 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005a2c:	4809      	ldr	r0, [pc, #36]	; (8005a54 <prvInitialiseTaskLists+0x58>)
 8005a2e:	f7ff fd22 	bl	8005476 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005a32:	4809      	ldr	r0, [pc, #36]	; (8005a58 <prvInitialiseTaskLists+0x5c>)
 8005a34:	f7ff fd1f 	bl	8005476 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a38:	4b08      	ldr	r3, [pc, #32]	; (8005a5c <prvInitialiseTaskLists+0x60>)
 8005a3a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a3c:	4b08      	ldr	r3, [pc, #32]	; (8005a60 <prvInitialiseTaskLists+0x64>)
 8005a3e:	601c      	str	r4, [r3, #0]
}
 8005a40:	bd38      	pop	{r3, r4, r5, pc}
 8005a42:	bf00      	nop
 8005a44:	20000310 	.word	0x20000310
 8005a48:	200003b4 	.word	0x200003b4
 8005a4c:	200003c8 	.word	0x200003c8
 8005a50:	200003e4 	.word	0x200003e4
 8005a54:	20000410 	.word	0x20000410
 8005a58:	200003fc 	.word	0x200003fc
 8005a5c:	20000308 	.word	0x20000308
 8005a60:	2000030c 	.word	0x2000030c

08005a64 <prvAddNewTaskToReadyList>:
{
 8005a64:	b510      	push	{r4, lr}
 8005a66:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005a68:	f000 fc94 	bl	8006394 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005a6c:	4a20      	ldr	r2, [pc, #128]	; (8005af0 <prvAddNewTaskToReadyList+0x8c>)
 8005a6e:	6813      	ldr	r3, [r2, #0]
 8005a70:	3301      	adds	r3, #1
 8005a72:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a74:	4b1f      	ldr	r3, [pc, #124]	; (8005af4 <prvAddNewTaskToReadyList+0x90>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	b15b      	cbz	r3, 8005a92 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8005a7a:	4b1f      	ldr	r3, [pc, #124]	; (8005af8 <prvAddNewTaskToReadyList+0x94>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	b96b      	cbnz	r3, 8005a9c <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a80:	4b1c      	ldr	r3, [pc, #112]	; (8005af4 <prvAddNewTaskToReadyList+0x90>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d807      	bhi.n	8005a9c <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8005a8c:	4b19      	ldr	r3, [pc, #100]	; (8005af4 <prvAddNewTaskToReadyList+0x90>)
 8005a8e:	601c      	str	r4, [r3, #0]
 8005a90:	e004      	b.n	8005a9c <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8005a92:	4b18      	ldr	r3, [pc, #96]	; (8005af4 <prvAddNewTaskToReadyList+0x90>)
 8005a94:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a96:	6813      	ldr	r3, [r2, #0]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d026      	beq.n	8005aea <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 8005a9c:	4a17      	ldr	r2, [pc, #92]	; (8005afc <prvAddNewTaskToReadyList+0x98>)
 8005a9e:	6813      	ldr	r3, [r2, #0]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005aa4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	409a      	lsls	r2, r3
 8005aaa:	4915      	ldr	r1, [pc, #84]	; (8005b00 <prvAddNewTaskToReadyList+0x9c>)
 8005aac:	6808      	ldr	r0, [r1, #0]
 8005aae:	4302      	orrs	r2, r0
 8005ab0:	600a      	str	r2, [r1, #0]
 8005ab2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005ab6:	009a      	lsls	r2, r3, #2
 8005ab8:	1d21      	adds	r1, r4, #4
 8005aba:	4812      	ldr	r0, [pc, #72]	; (8005b04 <prvAddNewTaskToReadyList+0xa0>)
 8005abc:	4410      	add	r0, r2
 8005abe:	f7ff fce8 	bl	8005492 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005ac2:	f000 fc89 	bl	80063d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005ac6:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <prvAddNewTaskToReadyList+0x94>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	b16b      	cbz	r3, 8005ae8 <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005acc:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <prvAddNewTaskToReadyList+0x90>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d207      	bcs.n	8005ae8 <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 8005ad8:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <prvAddNewTaskToReadyList+0xa4>)
 8005ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	f3bf 8f6f 	isb	sy
}
 8005ae8:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8005aea:	f7ff ff87 	bl	80059fc <prvInitialiseTaskLists>
 8005aee:	e7d5      	b.n	8005a9c <prvAddNewTaskToReadyList+0x38>
 8005af0:	2000039c 	.word	0x2000039c
 8005af4:	20000304 	.word	0x20000304
 8005af8:	200003f8 	.word	0x200003f8
 8005afc:	200003ac 	.word	0x200003ac
 8005b00:	200003b0 	.word	0x200003b0
 8005b04:	20000310 	.word	0x20000310
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <prvDeleteTCB>:
	{
 8005b0c:	b510      	push	{r4, lr}
 8005b0e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b10:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8005b14:	b933      	cbnz	r3, 8005b24 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 8005b16:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005b18:	f000 fe48 	bl	80067ac <vPortFree>
				vPortFree( pxTCB );
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f000 fe45 	bl	80067ac <vPortFree>
	}
 8005b22:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d00a      	beq.n	8005b3e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d0fa      	beq.n	8005b22 <prvDeleteTCB+0x16>
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	e7fe      	b.n	8005b3c <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 8005b3e:	f000 fe35 	bl	80067ac <vPortFree>
 8005b42:	e7ee      	b.n	8005b22 <prvDeleteTCB+0x16>

08005b44 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b44:	4b0f      	ldr	r3, [pc, #60]	; (8005b84 <prvCheckTasksWaitingTermination+0x40>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	b1d3      	cbz	r3, 8005b80 <prvCheckTasksWaitingTermination+0x3c>
{
 8005b4a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8005b4c:	f000 fc22 	bl	8006394 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005b50:	4b0d      	ldr	r3, [pc, #52]	; (8005b88 <prvCheckTasksWaitingTermination+0x44>)
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b56:	1d20      	adds	r0, r4, #4
 8005b58:	f7ff fcc1 	bl	80054de <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b5c:	4a0b      	ldr	r2, [pc, #44]	; (8005b8c <prvCheckTasksWaitingTermination+0x48>)
 8005b5e:	6813      	ldr	r3, [r2, #0]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b64:	4a07      	ldr	r2, [pc, #28]	; (8005b84 <prvCheckTasksWaitingTermination+0x40>)
 8005b66:	6813      	ldr	r3, [r2, #0]
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8005b6c:	f000 fc34 	bl	80063d8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005b70:	4620      	mov	r0, r4
 8005b72:	f7ff ffcb 	bl	8005b0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b76:	4b03      	ldr	r3, [pc, #12]	; (8005b84 <prvCheckTasksWaitingTermination+0x40>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1e6      	bne.n	8005b4c <prvCheckTasksWaitingTermination+0x8>
}
 8005b7e:	bd10      	pop	{r4, pc}
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	200003a0 	.word	0x200003a0
 8005b88:	20000410 	.word	0x20000410
 8005b8c:	2000039c 	.word	0x2000039c

08005b90 <prvIdleTask>:
{
 8005b90:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8005b92:	f7ff ffd7 	bl	8005b44 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b96:	4b06      	ldr	r3, [pc, #24]	; (8005bb0 <prvIdleTask+0x20>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d9f9      	bls.n	8005b92 <prvIdleTask+0x2>
				taskYIELD();
 8005b9e:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <prvIdleTask+0x24>)
 8005ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	e7f0      	b.n	8005b92 <prvIdleTask+0x2>
 8005bb0:	20000310 	.word	0x20000310
 8005bb4:	e000ed04 	.word	0xe000ed04

08005bb8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bb8:	b570      	push	{r4, r5, r6, lr}
 8005bba:	4604      	mov	r4, r0
 8005bbc:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005bbe:	4b1d      	ldr	r3, [pc, #116]	; (8005c34 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005bc0:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bc2:	4b1d      	ldr	r3, [pc, #116]	; (8005c38 <prvAddCurrentTaskToDelayedList+0x80>)
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	3004      	adds	r0, #4
 8005bc8:	f7ff fc89 	bl	80054de <uxListRemove>
 8005bcc:	b950      	cbnz	r0, 8005be4 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005bce:	4b1a      	ldr	r3, [pc, #104]	; (8005c38 <prvAddCurrentTaskToDelayedList+0x80>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	fa03 f202 	lsl.w	r2, r3, r2
 8005bda:	4918      	ldr	r1, [pc, #96]	; (8005c3c <prvAddCurrentTaskToDelayedList+0x84>)
 8005bdc:	680b      	ldr	r3, [r1, #0]
 8005bde:	ea23 0302 	bic.w	r3, r3, r2
 8005be2:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005be4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8005be8:	d013      	beq.n	8005c12 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005bea:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005bec:	4b12      	ldr	r3, [pc, #72]	; (8005c38 <prvAddCurrentTaskToDelayedList+0x80>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005bf2:	42a5      	cmp	r5, r4
 8005bf4:	d816      	bhi.n	8005c24 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bf6:	4b12      	ldr	r3, [pc, #72]	; (8005c40 <prvAddCurrentTaskToDelayedList+0x88>)
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <prvAddCurrentTaskToDelayedList+0x80>)
 8005bfc:	6819      	ldr	r1, [r3, #0]
 8005bfe:	3104      	adds	r1, #4
 8005c00:	f7ff fc53 	bl	80054aa <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c04:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <prvAddCurrentTaskToDelayedList+0x8c>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	42a3      	cmp	r3, r4
 8005c0a:	d912      	bls.n	8005c32 <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
 8005c0c:	4b0d      	ldr	r3, [pc, #52]	; (8005c44 <prvAddCurrentTaskToDelayedList+0x8c>)
 8005c0e:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c10:	e00f      	b.n	8005c32 <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c12:	2e00      	cmp	r6, #0
 8005c14:	d0e9      	beq.n	8005bea <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c16:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <prvAddCurrentTaskToDelayedList+0x80>)
 8005c18:	6819      	ldr	r1, [r3, #0]
 8005c1a:	3104      	adds	r1, #4
 8005c1c:	480a      	ldr	r0, [pc, #40]	; (8005c48 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c1e:	f7ff fc38 	bl	8005492 <vListInsertEnd>
 8005c22:	e006      	b.n	8005c32 <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c24:	4b09      	ldr	r3, [pc, #36]	; (8005c4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c26:	6818      	ldr	r0, [r3, #0]
 8005c28:	4b03      	ldr	r3, [pc, #12]	; (8005c38 <prvAddCurrentTaskToDelayedList+0x80>)
 8005c2a:	6819      	ldr	r1, [r3, #0]
 8005c2c:	3104      	adds	r1, #4
 8005c2e:	f7ff fc3c 	bl	80054aa <vListInsert>
}
 8005c32:	bd70      	pop	{r4, r5, r6, pc}
 8005c34:	20000424 	.word	0x20000424
 8005c38:	20000304 	.word	0x20000304
 8005c3c:	200003b0 	.word	0x200003b0
 8005c40:	20000308 	.word	0x20000308
 8005c44:	200003dc 	.word	0x200003dc
 8005c48:	200003fc 	.word	0x200003fc
 8005c4c:	2000030c 	.word	0x2000030c

08005c50 <xTaskCreateStatic>:
	{
 8005c50:	b570      	push	{r4, r5, r6, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005c56:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8005c58:	b945      	cbnz	r5, 8005c6c <xTaskCreateStatic+0x1c>
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	e7fe      	b.n	8005c6a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8005c6c:	b944      	cbnz	r4, 8005c80 <xTaskCreateStatic+0x30>
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	e7fe      	b.n	8005c7e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c80:	2654      	movs	r6, #84	; 0x54
 8005c82:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c84:	9e04      	ldr	r6, [sp, #16]
 8005c86:	2e54      	cmp	r6, #84	; 0x54
 8005c88:	d008      	beq.n	8005c9c <xTaskCreateStatic+0x4c>
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	e7fe      	b.n	8005c9a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c9c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c9e:	2502      	movs	r5, #2
 8005ca0:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ca4:	2500      	movs	r5, #0
 8005ca6:	9503      	str	r5, [sp, #12]
 8005ca8:	9402      	str	r4, [sp, #8]
 8005caa:	ad05      	add	r5, sp, #20
 8005cac:	9501      	str	r5, [sp, #4]
 8005cae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005cb0:	9500      	str	r5, [sp, #0]
 8005cb2:	f7ff fe63 	bl	800597c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f7ff fed4 	bl	8005a64 <prvAddNewTaskToReadyList>
	}
 8005cbc:	9805      	ldr	r0, [sp, #20]
 8005cbe:	b006      	add	sp, #24
 8005cc0:	bd70      	pop	{r4, r5, r6, pc}

08005cc2 <xTaskCreate>:
	{
 8005cc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	4607      	mov	r7, r0
 8005cca:	4688      	mov	r8, r1
 8005ccc:	4615      	mov	r5, r2
 8005cce:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd0:	0090      	lsls	r0, r2, #2
 8005cd2:	f000 fce7 	bl	80066a4 <pvPortMalloc>
			if( pxStack != NULL )
 8005cd6:	b308      	cbz	r0, 8005d1c <xTaskCreate+0x5a>
 8005cd8:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005cda:	2054      	movs	r0, #84	; 0x54
 8005cdc:	f000 fce2 	bl	80066a4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	b1b8      	cbz	r0, 8005d14 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 8005ce4:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8005ce6:	b1e4      	cbz	r4, 8005d22 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005cee:	9303      	str	r3, [sp, #12]
 8005cf0:	9402      	str	r4, [sp, #8]
 8005cf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cf4:	9301      	str	r3, [sp, #4]
 8005cf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	464b      	mov	r3, r9
 8005cfc:	462a      	mov	r2, r5
 8005cfe:	4641      	mov	r1, r8
 8005d00:	4638      	mov	r0, r7
 8005d02:	f7ff fe3b 	bl	800597c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d06:	4620      	mov	r0, r4
 8005d08:	f7ff feac 	bl	8005a64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d0c:	2001      	movs	r0, #1
	}
 8005d0e:	b005      	add	sp, #20
 8005d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8005d14:	4630      	mov	r0, r6
 8005d16:	f000 fd49 	bl	80067ac <vPortFree>
 8005d1a:	e7e4      	b.n	8005ce6 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d20:	e7f5      	b.n	8005d0e <xTaskCreate+0x4c>
 8005d22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8005d26:	e7f2      	b.n	8005d0e <xTaskCreate+0x4c>

08005d28 <vTaskStartScheduler>:
{
 8005d28:	b510      	push	{r4, lr}
 8005d2a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d2c:	2400      	movs	r4, #0
 8005d2e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d30:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d32:	aa07      	add	r2, sp, #28
 8005d34:	a906      	add	r1, sp, #24
 8005d36:	a805      	add	r0, sp, #20
 8005d38:	f001 f980 	bl	800703c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d3c:	9b05      	ldr	r3, [sp, #20]
 8005d3e:	9302      	str	r3, [sp, #8]
 8005d40:	9b06      	ldr	r3, [sp, #24]
 8005d42:	9301      	str	r3, [sp, #4]
 8005d44:	9400      	str	r4, [sp, #0]
 8005d46:	4623      	mov	r3, r4
 8005d48:	9a07      	ldr	r2, [sp, #28]
 8005d4a:	490d      	ldr	r1, [pc, #52]	; (8005d80 <vTaskStartScheduler+0x58>)
 8005d4c:	480d      	ldr	r0, [pc, #52]	; (8005d84 <vTaskStartScheduler+0x5c>)
 8005d4e:	f7ff ff7f 	bl	8005c50 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8005d52:	b908      	cbnz	r0, 8005d58 <vTaskStartScheduler+0x30>
}
 8005d54:	b008      	add	sp, #32
 8005d56:	bd10      	pop	{r4, pc}
 8005d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5c:	f383 8811 	msr	BASEPRI, r3
 8005d60:	f3bf 8f6f 	isb	sy
 8005d64:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d68:	4b07      	ldr	r3, [pc, #28]	; (8005d88 <vTaskStartScheduler+0x60>)
 8005d6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d70:	4b06      	ldr	r3, [pc, #24]	; (8005d8c <vTaskStartScheduler+0x64>)
 8005d72:	2201      	movs	r2, #1
 8005d74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005d76:	4b06      	ldr	r3, [pc, #24]	; (8005d90 <vTaskStartScheduler+0x68>)
 8005d78:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8005d7a:	f000 fbad 	bl	80064d8 <xPortStartScheduler>
 8005d7e:	e7e9      	b.n	8005d54 <vTaskStartScheduler+0x2c>
 8005d80:	0800c264 	.word	0x0800c264
 8005d84:	08005b91 	.word	0x08005b91
 8005d88:	200003dc 	.word	0x200003dc
 8005d8c:	200003f8 	.word	0x200003f8
 8005d90:	20000424 	.word	0x20000424

08005d94 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005d94:	4a02      	ldr	r2, [pc, #8]	; (8005da0 <vTaskSuspendAll+0xc>)
 8005d96:	6813      	ldr	r3, [r2, #0]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	6013      	str	r3, [r2, #0]
}
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	200003a8 	.word	0x200003a8

08005da4 <xTaskIncrementTick>:
{
 8005da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005da6:	4b3a      	ldr	r3, [pc, #232]	; (8005e90 <xTaskIncrementTick+0xec>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d164      	bne.n	8005e78 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005dae:	4b39      	ldr	r3, [pc, #228]	; (8005e94 <xTaskIncrementTick+0xf0>)
 8005db0:	681d      	ldr	r5, [r3, #0]
 8005db2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8005db4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005db6:	b9c5      	cbnz	r5, 8005dea <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8005db8:	4b37      	ldr	r3, [pc, #220]	; (8005e98 <xTaskIncrementTick+0xf4>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	b143      	cbz	r3, 8005dd2 <xTaskIncrementTick+0x2e>
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	e7fe      	b.n	8005dd0 <xTaskIncrementTick+0x2c>
 8005dd2:	4a31      	ldr	r2, [pc, #196]	; (8005e98 <xTaskIncrementTick+0xf4>)
 8005dd4:	6811      	ldr	r1, [r2, #0]
 8005dd6:	4b31      	ldr	r3, [pc, #196]	; (8005e9c <xTaskIncrementTick+0xf8>)
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	6010      	str	r0, [r2, #0]
 8005ddc:	6019      	str	r1, [r3, #0]
 8005dde:	4a30      	ldr	r2, [pc, #192]	; (8005ea0 <xTaskIncrementTick+0xfc>)
 8005de0:	6813      	ldr	r3, [r2, #0]
 8005de2:	3301      	adds	r3, #1
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	f7ff fdb3 	bl	8005950 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005dea:	4b2e      	ldr	r3, [pc, #184]	; (8005ea4 <xTaskIncrementTick+0x100>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	42ab      	cmp	r3, r5
 8005df0:	d938      	bls.n	8005e64 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8005df2:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005df4:	4b2c      	ldr	r3, [pc, #176]	; (8005ea8 <xTaskIncrementTick+0x104>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005dfe:	009a      	lsls	r2, r3, #2
 8005e00:	4b2a      	ldr	r3, [pc, #168]	; (8005eac <xTaskIncrementTick+0x108>)
 8005e02:	589b      	ldr	r3, [r3, r2]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d93c      	bls.n	8005e82 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8005e08:	2401      	movs	r4, #1
 8005e0a:	e03a      	b.n	8005e82 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8005e0c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e0e:	4b22      	ldr	r3, [pc, #136]	; (8005e98 <xTaskIncrementTick+0xf4>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	b343      	cbz	r3, 8005e68 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e16:	4b20      	ldr	r3, [pc, #128]	; (8005e98 <xTaskIncrementTick+0xf4>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e1e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8005e20:	429d      	cmp	r5, r3
 8005e22:	d326      	bcc.n	8005e72 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e24:	1d37      	adds	r7, r6, #4
 8005e26:	4638      	mov	r0, r7
 8005e28:	f7ff fb59 	bl	80054de <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e2c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8005e2e:	b11b      	cbz	r3, 8005e38 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e30:	f106 0018 	add.w	r0, r6, #24
 8005e34:	f7ff fb53 	bl	80054de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e38:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	409a      	lsls	r2, r3
 8005e3e:	491c      	ldr	r1, [pc, #112]	; (8005eb0 <xTaskIncrementTick+0x10c>)
 8005e40:	6808      	ldr	r0, [r1, #0]
 8005e42:	4302      	orrs	r2, r0
 8005e44:	600a      	str	r2, [r1, #0]
 8005e46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e4a:	009a      	lsls	r2, r3, #2
 8005e4c:	4639      	mov	r1, r7
 8005e4e:	4817      	ldr	r0, [pc, #92]	; (8005eac <xTaskIncrementTick+0x108>)
 8005e50:	4410      	add	r0, r2
 8005e52:	f7ff fb1e 	bl	8005492 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e56:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8005e58:	4b13      	ldr	r3, [pc, #76]	; (8005ea8 <xTaskIncrementTick+0x104>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d2d4      	bcs.n	8005e0c <xTaskIncrementTick+0x68>
 8005e62:	e7d4      	b.n	8005e0e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8005e64:	2400      	movs	r4, #0
 8005e66:	e7d2      	b.n	8005e0e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e68:	4b0e      	ldr	r3, [pc, #56]	; (8005ea4 <xTaskIncrementTick+0x100>)
 8005e6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e6e:	601a      	str	r2, [r3, #0]
					break;
 8005e70:	e7c0      	b.n	8005df4 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8005e72:	4a0c      	ldr	r2, [pc, #48]	; (8005ea4 <xTaskIncrementTick+0x100>)
 8005e74:	6013      	str	r3, [r2, #0]
						break;
 8005e76:	e7bd      	b.n	8005df4 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8005e78:	4a0e      	ldr	r2, [pc, #56]	; (8005eb4 <xTaskIncrementTick+0x110>)
 8005e7a:	6813      	ldr	r3, [r2, #0]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8005e80:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8005e82:	4b0d      	ldr	r3, [pc, #52]	; (8005eb8 <xTaskIncrementTick+0x114>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	b103      	cbz	r3, 8005e8a <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8005e88:	2401      	movs	r4, #1
}
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	200003a8 	.word	0x200003a8
 8005e94:	20000424 	.word	0x20000424
 8005e98:	20000308 	.word	0x20000308
 8005e9c:	2000030c 	.word	0x2000030c
 8005ea0:	200003e0 	.word	0x200003e0
 8005ea4:	200003dc 	.word	0x200003dc
 8005ea8:	20000304 	.word	0x20000304
 8005eac:	20000310 	.word	0x20000310
 8005eb0:	200003b0 	.word	0x200003b0
 8005eb4:	200003a4 	.word	0x200003a4
 8005eb8:	20000428 	.word	0x20000428

08005ebc <xTaskResumeAll>:
{
 8005ebc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8005ebe:	4b33      	ldr	r3, [pc, #204]	; (8005f8c <xTaskResumeAll+0xd0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	b943      	cbnz	r3, 8005ed6 <xTaskResumeAll+0x1a>
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	e7fe      	b.n	8005ed4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8005ed6:	f000 fa5d 	bl	8006394 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005eda:	4b2c      	ldr	r3, [pc, #176]	; (8005f8c <xTaskResumeAll+0xd0>)
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	3a01      	subs	r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d14d      	bne.n	8005f84 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ee8:	4b29      	ldr	r3, [pc, #164]	; (8005f90 <xTaskResumeAll+0xd4>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	b923      	cbnz	r3, 8005ef8 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8005eee:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005ef0:	f000 fa72 	bl	80063d8 <vPortExitCritical>
}
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 8005ef8:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005efa:	4b26      	ldr	r3, [pc, #152]	; (8005f94 <xTaskResumeAll+0xd8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	b31b      	cbz	r3, 8005f48 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005f00:	4b24      	ldr	r3, [pc, #144]	; (8005f94 <xTaskResumeAll+0xd8>)
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f06:	f104 0018 	add.w	r0, r4, #24
 8005f0a:	f7ff fae8 	bl	80054de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f0e:	1d25      	adds	r5, r4, #4
 8005f10:	4628      	mov	r0, r5
 8005f12:	f7ff fae4 	bl	80054de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f18:	2201      	movs	r2, #1
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	491e      	ldr	r1, [pc, #120]	; (8005f98 <xTaskResumeAll+0xdc>)
 8005f1e:	6808      	ldr	r0, [r1, #0]
 8005f20:	4302      	orrs	r2, r0
 8005f22:	600a      	str	r2, [r1, #0]
 8005f24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005f28:	009a      	lsls	r2, r3, #2
 8005f2a:	4629      	mov	r1, r5
 8005f2c:	481b      	ldr	r0, [pc, #108]	; (8005f9c <xTaskResumeAll+0xe0>)
 8005f2e:	4410      	add	r0, r2
 8005f30:	f7ff faaf 	bl	8005492 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005f36:	4b1a      	ldr	r3, [pc, #104]	; (8005fa0 <xTaskResumeAll+0xe4>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d3dc      	bcc.n	8005efa <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8005f40:	4b18      	ldr	r3, [pc, #96]	; (8005fa4 <xTaskResumeAll+0xe8>)
 8005f42:	2201      	movs	r2, #1
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	e7d8      	b.n	8005efa <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8005f48:	b10c      	cbz	r4, 8005f4e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8005f4a:	f7ff fd01 	bl	8005950 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005f4e:	4b16      	ldr	r3, [pc, #88]	; (8005fa8 <xTaskResumeAll+0xec>)
 8005f50:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005f52:	b154      	cbz	r4, 8005f6a <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8005f54:	f7ff ff26 	bl	8005da4 <xTaskIncrementTick>
 8005f58:	b110      	cbz	r0, 8005f60 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8005f5a:	4b12      	ldr	r3, [pc, #72]	; (8005fa4 <xTaskResumeAll+0xe8>)
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005f60:	3c01      	subs	r4, #1
 8005f62:	d1f7      	bne.n	8005f54 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 8005f64:	4b10      	ldr	r3, [pc, #64]	; (8005fa8 <xTaskResumeAll+0xec>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8005f6a:	4b0e      	ldr	r3, [pc, #56]	; (8005fa4 <xTaskResumeAll+0xe8>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	b15b      	cbz	r3, 8005f88 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8005f70:	4b0e      	ldr	r3, [pc, #56]	; (8005fac <xTaskResumeAll+0xf0>)
 8005f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005f80:	2401      	movs	r4, #1
 8005f82:	e7b5      	b.n	8005ef0 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8005f84:	2400      	movs	r4, #0
 8005f86:	e7b3      	b.n	8005ef0 <xTaskResumeAll+0x34>
 8005f88:	2400      	movs	r4, #0
 8005f8a:	e7b1      	b.n	8005ef0 <xTaskResumeAll+0x34>
 8005f8c:	200003a8 	.word	0x200003a8
 8005f90:	2000039c 	.word	0x2000039c
 8005f94:	200003e4 	.word	0x200003e4
 8005f98:	200003b0 	.word	0x200003b0
 8005f9c:	20000310 	.word	0x20000310
 8005fa0:	20000304 	.word	0x20000304
 8005fa4:	20000428 	.word	0x20000428
 8005fa8:	200003a4 	.word	0x200003a4
 8005fac:	e000ed04 	.word	0xe000ed04

08005fb0 <vTaskDelay>:
	{
 8005fb0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005fb2:	b1a8      	cbz	r0, 8005fe0 <vTaskDelay+0x30>
 8005fb4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8005fb6:	4b0f      	ldr	r3, [pc, #60]	; (8005ff4 <vTaskDelay+0x44>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	b143      	cbz	r3, 8005fce <vTaskDelay+0x1e>
 8005fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	e7fe      	b.n	8005fcc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005fce:	f7ff fee1 	bl	8005d94 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	f7ff fdef 	bl	8005bb8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005fda:	f7ff ff6f 	bl	8005ebc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005fde:	b938      	cbnz	r0, 8005ff0 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8005fe0:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <vTaskDelay+0x48>)
 8005fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	f3bf 8f6f 	isb	sy
	}
 8005ff0:	bd10      	pop	{r4, pc}
 8005ff2:	bf00      	nop
 8005ff4:	200003a8 	.word	0x200003a8
 8005ff8:	e000ed04 	.word	0xe000ed04

08005ffc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ffc:	4b20      	ldr	r3, [pc, #128]	; (8006080 <vTaskSwitchContext+0x84>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	b11b      	cbz	r3, 800600a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006002:	4b20      	ldr	r3, [pc, #128]	; (8006084 <vTaskSwitchContext+0x88>)
 8006004:	2201      	movs	r2, #1
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800600a:	4b1e      	ldr	r3, [pc, #120]	; (8006084 <vTaskSwitchContext+0x88>)
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006010:	4b1d      	ldr	r3, [pc, #116]	; (8006088 <vTaskSwitchContext+0x8c>)
 8006012:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006014:	fab3 f383 	clz	r3, r3
 8006018:	b2db      	uxtb	r3, r3
 800601a:	f1c3 031f 	rsb	r3, r3, #31
 800601e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006022:	008a      	lsls	r2, r1, #2
 8006024:	4919      	ldr	r1, [pc, #100]	; (800608c <vTaskSwitchContext+0x90>)
 8006026:	588a      	ldr	r2, [r1, r2]
 8006028:	b942      	cbnz	r2, 800603c <vTaskSwitchContext+0x40>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	e7fe      	b.n	800603a <vTaskSwitchContext+0x3e>
{
 800603c:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800603e:	4813      	ldr	r0, [pc, #76]	; (800608c <vTaskSwitchContext+0x90>)
 8006040:	009a      	lsls	r2, r3, #2
 8006042:	18d4      	adds	r4, r2, r3
 8006044:	00a1      	lsls	r1, r4, #2
 8006046:	4401      	add	r1, r0
 8006048:	684c      	ldr	r4, [r1, #4]
 800604a:	6864      	ldr	r4, [r4, #4]
 800604c:	604c      	str	r4, [r1, #4]
 800604e:	441a      	add	r2, r3
 8006050:	0091      	lsls	r1, r2, #2
 8006052:	3108      	adds	r1, #8
 8006054:	4408      	add	r0, r1
 8006056:	4284      	cmp	r4, r0
 8006058:	d00b      	beq.n	8006072 <vTaskSwitchContext+0x76>
 800605a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800605e:	009a      	lsls	r2, r3, #2
 8006060:	4b0a      	ldr	r3, [pc, #40]	; (800608c <vTaskSwitchContext+0x90>)
 8006062:	4413      	add	r3, r2
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	4b09      	ldr	r3, [pc, #36]	; (8006090 <vTaskSwitchContext+0x94>)
 800606a:	601a      	str	r2, [r3, #0]
}
 800606c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006070:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006072:	6861      	ldr	r1, [r4, #4]
 8006074:	4805      	ldr	r0, [pc, #20]	; (800608c <vTaskSwitchContext+0x90>)
 8006076:	2214      	movs	r2, #20
 8006078:	fb02 0203 	mla	r2, r2, r3, r0
 800607c:	6051      	str	r1, [r2, #4]
 800607e:	e7ec      	b.n	800605a <vTaskSwitchContext+0x5e>
 8006080:	200003a8 	.word	0x200003a8
 8006084:	20000428 	.word	0x20000428
 8006088:	200003b0 	.word	0x200003b0
 800608c:	20000310 	.word	0x20000310
 8006090:	20000304 	.word	0x20000304

08006094 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006094:	b940      	cbnz	r0, 80060a8 <vTaskPlaceOnEventList+0x14>
 8006096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	e7fe      	b.n	80060a6 <vTaskPlaceOnEventList+0x12>
{
 80060a8:	b510      	push	{r4, lr}
 80060aa:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060ac:	4b04      	ldr	r3, [pc, #16]	; (80060c0 <vTaskPlaceOnEventList+0x2c>)
 80060ae:	6819      	ldr	r1, [r3, #0]
 80060b0:	3118      	adds	r1, #24
 80060b2:	f7ff f9fa 	bl	80054aa <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060b6:	2101      	movs	r1, #1
 80060b8:	4620      	mov	r0, r4
 80060ba:	f7ff fd7d 	bl	8005bb8 <prvAddCurrentTaskToDelayedList>
}
 80060be:	bd10      	pop	{r4, pc}
 80060c0:	20000304 	.word	0x20000304

080060c4 <xTaskRemoveFromEventList>:
{
 80060c4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80060c6:	68c3      	ldr	r3, [r0, #12]
 80060c8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80060ca:	b944      	cbnz	r4, 80060de <xTaskRemoveFromEventList+0x1a>
 80060cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	e7fe      	b.n	80060dc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060de:	f104 0518 	add.w	r5, r4, #24
 80060e2:	4628      	mov	r0, r5
 80060e4:	f7ff f9fb 	bl	80054de <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060e8:	4b13      	ldr	r3, [pc, #76]	; (8006138 <xTaskRemoveFromEventList+0x74>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	b9e3      	cbnz	r3, 8006128 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060ee:	1d25      	adds	r5, r4, #4
 80060f0:	4628      	mov	r0, r5
 80060f2:	f7ff f9f4 	bl	80054de <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80060f8:	2201      	movs	r2, #1
 80060fa:	409a      	lsls	r2, r3
 80060fc:	490f      	ldr	r1, [pc, #60]	; (800613c <xTaskRemoveFromEventList+0x78>)
 80060fe:	6808      	ldr	r0, [r1, #0]
 8006100:	4302      	orrs	r2, r0
 8006102:	600a      	str	r2, [r1, #0]
 8006104:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006108:	009a      	lsls	r2, r3, #2
 800610a:	4629      	mov	r1, r5
 800610c:	480c      	ldr	r0, [pc, #48]	; (8006140 <xTaskRemoveFromEventList+0x7c>)
 800610e:	4410      	add	r0, r2
 8006110:	f7ff f9bf 	bl	8005492 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006114:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006116:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <xTaskRemoveFromEventList+0x80>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	429a      	cmp	r2, r3
 800611e:	d908      	bls.n	8006132 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8006120:	2001      	movs	r0, #1
 8006122:	4b09      	ldr	r3, [pc, #36]	; (8006148 <xTaskRemoveFromEventList+0x84>)
 8006124:	6018      	str	r0, [r3, #0]
}
 8006126:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006128:	4629      	mov	r1, r5
 800612a:	4808      	ldr	r0, [pc, #32]	; (800614c <xTaskRemoveFromEventList+0x88>)
 800612c:	f7ff f9b1 	bl	8005492 <vListInsertEnd>
 8006130:	e7f0      	b.n	8006114 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 8006132:	2000      	movs	r0, #0
	return xReturn;
 8006134:	e7f7      	b.n	8006126 <xTaskRemoveFromEventList+0x62>
 8006136:	bf00      	nop
 8006138:	200003a8 	.word	0x200003a8
 800613c:	200003b0 	.word	0x200003b0
 8006140:	20000310 	.word	0x20000310
 8006144:	20000304 	.word	0x20000304
 8006148:	20000428 	.word	0x20000428
 800614c:	200003e4 	.word	0x200003e4

08006150 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006150:	4b03      	ldr	r3, [pc, #12]	; (8006160 <vTaskInternalSetTimeOutState+0x10>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006156:	4b03      	ldr	r3, [pc, #12]	; (8006164 <vTaskInternalSetTimeOutState+0x14>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6043      	str	r3, [r0, #4]
}
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	200003e0 	.word	0x200003e0
 8006164:	20000424 	.word	0x20000424

08006168 <xTaskCheckForTimeOut>:
{
 8006168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800616a:	b150      	cbz	r0, 8006182 <xTaskCheckForTimeOut+0x1a>
 800616c:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800616e:	b989      	cbnz	r1, 8006194 <xTaskCheckForTimeOut+0x2c>
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	e7fe      	b.n	8006180 <xTaskCheckForTimeOut+0x18>
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	e7fe      	b.n	8006192 <xTaskCheckForTimeOut+0x2a>
 8006194:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8006196:	f000 f8fd 	bl	8006394 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800619a:	4b11      	ldr	r3, [pc, #68]	; (80061e0 <xTaskCheckForTimeOut+0x78>)
 800619c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800619e:	6868      	ldr	r0, [r5, #4]
 80061a0:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061a8:	d016      	beq.n	80061d8 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061aa:	682f      	ldr	r7, [r5, #0]
 80061ac:	4e0d      	ldr	r6, [pc, #52]	; (80061e4 <xTaskCheckForTimeOut+0x7c>)
 80061ae:	6836      	ldr	r6, [r6, #0]
 80061b0:	42b7      	cmp	r7, r6
 80061b2:	d001      	beq.n	80061b8 <xTaskCheckForTimeOut+0x50>
 80061b4:	4288      	cmp	r0, r1
 80061b6:	d911      	bls.n	80061dc <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d803      	bhi.n	80061c4 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 80061bc:	2300      	movs	r3, #0
 80061be:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80061c0:	2401      	movs	r4, #1
 80061c2:	e005      	b.n	80061d0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 80061c4:	1a9b      	subs	r3, r3, r2
 80061c6:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061c8:	4628      	mov	r0, r5
 80061ca:	f7ff ffc1 	bl	8006150 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061ce:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80061d0:	f000 f902 	bl	80063d8 <vPortExitCritical>
}
 80061d4:	4620      	mov	r0, r4
 80061d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 80061d8:	2400      	movs	r4, #0
 80061da:	e7f9      	b.n	80061d0 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 80061dc:	2401      	movs	r4, #1
 80061de:	e7f7      	b.n	80061d0 <xTaskCheckForTimeOut+0x68>
 80061e0:	20000424 	.word	0x20000424
 80061e4:	200003e0 	.word	0x200003e0

080061e8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80061e8:	4b01      	ldr	r3, [pc, #4]	; (80061f0 <vTaskMissedYield+0x8>)
 80061ea:	2201      	movs	r2, #1
 80061ec:	601a      	str	r2, [r3, #0]
}
 80061ee:	4770      	bx	lr
 80061f0:	20000428 	.word	0x20000428

080061f4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80061f4:	4b05      	ldr	r3, [pc, #20]	; (800620c <xTaskGetSchedulerState+0x18>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	b133      	cbz	r3, 8006208 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061fa:	4b05      	ldr	r3, [pc, #20]	; (8006210 <xTaskGetSchedulerState+0x1c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	b10b      	cbz	r3, 8006204 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8006200:	2000      	movs	r0, #0
	}
 8006202:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8006204:	2002      	movs	r0, #2
 8006206:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006208:	2001      	movs	r0, #1
 800620a:	4770      	bx	lr
 800620c:	200003f8 	.word	0x200003f8
 8006210:	200003a8 	.word	0x200003a8

08006214 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8006214:	2800      	cmp	r0, #0
 8006216:	d049      	beq.n	80062ac <xTaskPriorityDisinherit+0x98>
	{
 8006218:	b538      	push	{r3, r4, r5, lr}
 800621a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800621c:	4a26      	ldr	r2, [pc, #152]	; (80062b8 <xTaskPriorityDisinherit+0xa4>)
 800621e:	6812      	ldr	r2, [r2, #0]
 8006220:	4282      	cmp	r2, r0
 8006222:	d008      	beq.n	8006236 <xTaskPriorityDisinherit+0x22>
 8006224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	e7fe      	b.n	8006234 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8006236:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006238:	b942      	cbnz	r2, 800624c <xTaskPriorityDisinherit+0x38>
 800623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	e7fe      	b.n	800624a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800624c:	3a01      	subs	r2, #1
 800624e:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006250:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8006252:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006254:	4288      	cmp	r0, r1
 8006256:	d02b      	beq.n	80062b0 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006258:	bb62      	cbnz	r2, 80062b4 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800625a:	1d25      	adds	r5, r4, #4
 800625c:	4628      	mov	r0, r5
 800625e:	f7ff f93e 	bl	80054de <uxListRemove>
 8006262:	b970      	cbnz	r0, 8006282 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006264:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006266:	2314      	movs	r3, #20
 8006268:	fb03 f302 	mul.w	r3, r3, r2
 800626c:	4913      	ldr	r1, [pc, #76]	; (80062bc <xTaskPriorityDisinherit+0xa8>)
 800626e:	58cb      	ldr	r3, [r1, r3]
 8006270:	b93b      	cbnz	r3, 8006282 <xTaskPriorityDisinherit+0x6e>
 8006272:	2301      	movs	r3, #1
 8006274:	fa03 f202 	lsl.w	r2, r3, r2
 8006278:	4911      	ldr	r1, [pc, #68]	; (80062c0 <xTaskPriorityDisinherit+0xac>)
 800627a:	680b      	ldr	r3, [r1, #0]
 800627c:	ea23 0302 	bic.w	r3, r3, r2
 8006280:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006282:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006284:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006286:	f1c3 0207 	rsb	r2, r3, #7
 800628a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800628c:	2401      	movs	r4, #1
 800628e:	fa04 f203 	lsl.w	r2, r4, r3
 8006292:	490b      	ldr	r1, [pc, #44]	; (80062c0 <xTaskPriorityDisinherit+0xac>)
 8006294:	6808      	ldr	r0, [r1, #0]
 8006296:	4302      	orrs	r2, r0
 8006298:	600a      	str	r2, [r1, #0]
 800629a:	4629      	mov	r1, r5
 800629c:	4a07      	ldr	r2, [pc, #28]	; (80062bc <xTaskPriorityDisinherit+0xa8>)
 800629e:	2014      	movs	r0, #20
 80062a0:	fb00 2003 	mla	r0, r0, r3, r2
 80062a4:	f7ff f8f5 	bl	8005492 <vListInsertEnd>
					xReturn = pdTRUE;
 80062a8:	4620      	mov	r0, r4
	}
 80062aa:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 80062ac:	2000      	movs	r0, #0
	}
 80062ae:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80062b0:	2000      	movs	r0, #0
 80062b2:	e7fa      	b.n	80062aa <xTaskPriorityDisinherit+0x96>
 80062b4:	2000      	movs	r0, #0
		return xReturn;
 80062b6:	e7f8      	b.n	80062aa <xTaskPriorityDisinherit+0x96>
 80062b8:	20000304 	.word	0x20000304
 80062bc:	20000310 	.word	0x20000310
 80062c0:	200003b0 	.word	0x200003b0

080062c4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062c4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80062c6:	2300      	movs	r3, #0
 80062c8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062ca:	4b0d      	ldr	r3, [pc, #52]	; (8006300 <prvTaskExitError+0x3c>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062d2:	d008      	beq.n	80062e6 <prvTaskExitError+0x22>
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	e7fe      	b.n	80062e4 <prvTaskExitError+0x20>
 80062e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062f6:	9b01      	ldr	r3, [sp, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0fc      	beq.n	80062f6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062fc:	b002      	add	sp, #8
 80062fe:	4770      	bx	lr
 8006300:	20000034 	.word	0x20000034

08006304 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006304:	4808      	ldr	r0, [pc, #32]	; (8006328 <prvPortStartFirstTask+0x24>)
 8006306:	6800      	ldr	r0, [r0, #0]
 8006308:	6800      	ldr	r0, [r0, #0]
 800630a:	f380 8808 	msr	MSP, r0
 800630e:	f04f 0000 	mov.w	r0, #0
 8006312:	f380 8814 	msr	CONTROL, r0
 8006316:	b662      	cpsie	i
 8006318:	b661      	cpsie	f
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	df00      	svc	0
 8006324:	bf00      	nop
 8006326:	0000      	.short	0x0000
 8006328:	e000ed08 	.word	0xe000ed08

0800632c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800632c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800633c <vPortEnableVFP+0x10>
 8006330:	6801      	ldr	r1, [r0, #0]
 8006332:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006336:	6001      	str	r1, [r0, #0]
 8006338:	4770      	bx	lr
 800633a:	0000      	.short	0x0000
 800633c:	e000ed88 	.word	0xe000ed88

08006340 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006344:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006348:	f021 0101 	bic.w	r1, r1, #1
 800634c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006350:	4b05      	ldr	r3, [pc, #20]	; (8006368 <pxPortInitialiseStack+0x28>)
 8006352:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006356:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800635a:	f06f 0302 	mvn.w	r3, #2
 800635e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8006362:	3844      	subs	r0, #68	; 0x44
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	080062c5 	.word	0x080062c5
 800636c:	00000000 	.word	0x00000000

08006370 <SVC_Handler>:
	__asm volatile (
 8006370:	4b07      	ldr	r3, [pc, #28]	; (8006390 <pxCurrentTCBConst2>)
 8006372:	6819      	ldr	r1, [r3, #0]
 8006374:	6808      	ldr	r0, [r1, #0]
 8006376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637a:	f380 8809 	msr	PSP, r0
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f04f 0000 	mov.w	r0, #0
 8006386:	f380 8811 	msr	BASEPRI, r0
 800638a:	4770      	bx	lr
 800638c:	f3af 8000 	nop.w

08006390 <pxCurrentTCBConst2>:
 8006390:	20000304 	.word	0x20000304

08006394 <vPortEnterCritical>:
 8006394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80063a4:	4a0a      	ldr	r2, [pc, #40]	; (80063d0 <vPortEnterCritical+0x3c>)
 80063a6:	6813      	ldr	r3, [r2, #0]
 80063a8:	3301      	adds	r3, #1
 80063aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d000      	beq.n	80063b2 <vPortEnterCritical+0x1e>
}
 80063b0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80063b2:	4b08      	ldr	r3, [pc, #32]	; (80063d4 <vPortEnterCritical+0x40>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80063ba:	d0f9      	beq.n	80063b0 <vPortEnterCritical+0x1c>
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	e7fe      	b.n	80063cc <vPortEnterCritical+0x38>
 80063ce:	bf00      	nop
 80063d0:	20000034 	.word	0x20000034
 80063d4:	e000ed04 	.word	0xe000ed04

080063d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80063d8:	4b09      	ldr	r3, [pc, #36]	; (8006400 <vPortExitCritical+0x28>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	b943      	cbnz	r3, 80063f0 <vPortExitCritical+0x18>
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	e7fe      	b.n	80063ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80063f0:	3b01      	subs	r3, #1
 80063f2:	4a03      	ldr	r2, [pc, #12]	; (8006400 <vPortExitCritical+0x28>)
 80063f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063f6:	b90b      	cbnz	r3, 80063fc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063f8:	f383 8811 	msr	BASEPRI, r3
}
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	20000034 	.word	0x20000034
	...

08006410 <PendSV_Handler>:
	__asm volatile
 8006410:	f3ef 8009 	mrs	r0, PSP
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	4b15      	ldr	r3, [pc, #84]	; (8006470 <pxCurrentTCBConst>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	f01e 0f10 	tst.w	lr, #16
 8006420:	bf08      	it	eq
 8006422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	6010      	str	r0, [r2, #0]
 800642c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006434:	f380 8811 	msr	BASEPRI, r0
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f7ff fddc 	bl	8005ffc <vTaskSwitchContext>
 8006444:	f04f 0000 	mov.w	r0, #0
 8006448:	f380 8811 	msr	BASEPRI, r0
 800644c:	bc09      	pop	{r0, r3}
 800644e:	6819      	ldr	r1, [r3, #0]
 8006450:	6808      	ldr	r0, [r1, #0]
 8006452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006456:	f01e 0f10 	tst.w	lr, #16
 800645a:	bf08      	it	eq
 800645c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006460:	f380 8809 	msr	PSP, r0
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	f3af 8000 	nop.w

08006470 <pxCurrentTCBConst>:
 8006470:	20000304 	.word	0x20000304

08006474 <SysTick_Handler>:
{
 8006474:	b508      	push	{r3, lr}
	__asm volatile
 8006476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006486:	f7ff fc8d 	bl	8005da4 <xTaskIncrementTick>
 800648a:	b118      	cbz	r0, 8006494 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800648c:	4b03      	ldr	r3, [pc, #12]	; (800649c <SysTick_Handler+0x28>)
 800648e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006492:	601a      	str	r2, [r3, #0]
	__asm volatile
 8006494:	2300      	movs	r3, #0
 8006496:	f383 8811 	msr	BASEPRI, r3
}
 800649a:	bd08      	pop	{r3, pc}
 800649c:	e000ed04 	.word	0xe000ed04

080064a0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064a0:	4a08      	ldr	r2, [pc, #32]	; (80064c4 <vPortSetupTimerInterrupt+0x24>)
 80064a2:	2300      	movs	r3, #0
 80064a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064a6:	4908      	ldr	r1, [pc, #32]	; (80064c8 <vPortSetupTimerInterrupt+0x28>)
 80064a8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064aa:	4b08      	ldr	r3, [pc, #32]	; (80064cc <vPortSetupTimerInterrupt+0x2c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4908      	ldr	r1, [pc, #32]	; (80064d0 <vPortSetupTimerInterrupt+0x30>)
 80064b0:	fba1 1303 	umull	r1, r3, r1, r3
 80064b4:	099b      	lsrs	r3, r3, #6
 80064b6:	3b01      	subs	r3, #1
 80064b8:	4906      	ldr	r1, [pc, #24]	; (80064d4 <vPortSetupTimerInterrupt+0x34>)
 80064ba:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064bc:	2307      	movs	r3, #7
 80064be:	6013      	str	r3, [r2, #0]
}
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	e000e010 	.word	0xe000e010
 80064c8:	e000e018 	.word	0xe000e018
 80064cc:	20000040 	.word	0x20000040
 80064d0:	10624dd3 	.word	0x10624dd3
 80064d4:	e000e014 	.word	0xe000e014

080064d8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064d8:	4b3a      	ldr	r3, [pc, #232]	; (80065c4 <xPortStartScheduler+0xec>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	4b3a      	ldr	r3, [pc, #232]	; (80065c8 <xPortStartScheduler+0xf0>)
 80064de:	429a      	cmp	r2, r3
 80064e0:	d00d      	beq.n	80064fe <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064e2:	4b38      	ldr	r3, [pc, #224]	; (80065c4 <xPortStartScheduler+0xec>)
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	4b39      	ldr	r3, [pc, #228]	; (80065cc <xPortStartScheduler+0xf4>)
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d111      	bne.n	8006510 <xPortStartScheduler+0x38>
	__asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	e7fe      	b.n	80064fc <xPortStartScheduler+0x24>
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	e7fe      	b.n	800650e <xPortStartScheduler+0x36>
{
 8006510:	b510      	push	{r4, lr}
 8006512:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006514:	4b2e      	ldr	r3, [pc, #184]	; (80065d0 <xPortStartScheduler+0xf8>)
 8006516:	781a      	ldrb	r2, [r3, #0]
 8006518:	b2d2      	uxtb	r2, r2
 800651a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800651c:	22ff      	movs	r2, #255	; 0xff
 800651e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006528:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800652c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006530:	4a28      	ldr	r2, [pc, #160]	; (80065d4 <xPortStartScheduler+0xfc>)
 8006532:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006534:	4b28      	ldr	r3, [pc, #160]	; (80065d8 <xPortStartScheduler+0x100>)
 8006536:	2207      	movs	r2, #7
 8006538:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800653a:	e009      	b.n	8006550 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 800653c:	4a26      	ldr	r2, [pc, #152]	; (80065d8 <xPortStartScheduler+0x100>)
 800653e:	6813      	ldr	r3, [r2, #0]
 8006540:	3b01      	subs	r3, #1
 8006542:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006544:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006550:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006554:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006558:	d1f0      	bne.n	800653c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800655a:	4b1f      	ldr	r3, [pc, #124]	; (80065d8 <xPortStartScheduler+0x100>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b03      	cmp	r3, #3
 8006560:	d008      	beq.n	8006574 <xPortStartScheduler+0x9c>
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	e7fe      	b.n	8006572 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006574:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800657a:	4a17      	ldr	r2, [pc, #92]	; (80065d8 <xPortStartScheduler+0x100>)
 800657c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800657e:	9b01      	ldr	r3, [sp, #4]
 8006580:	b2db      	uxtb	r3, r3
 8006582:	4a13      	ldr	r2, [pc, #76]	; (80065d0 <xPortStartScheduler+0xf8>)
 8006584:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006586:	4b15      	ldr	r3, [pc, #84]	; (80065dc <xPortStartScheduler+0x104>)
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800658e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8006596:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8006598:	f7ff ff82 	bl	80064a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800659c:	2400      	movs	r4, #0
 800659e:	4b10      	ldr	r3, [pc, #64]	; (80065e0 <xPortStartScheduler+0x108>)
 80065a0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80065a2:	f7ff fec3 	bl	800632c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065a6:	4a0f      	ldr	r2, [pc, #60]	; (80065e4 <xPortStartScheduler+0x10c>)
 80065a8:	6813      	ldr	r3, [r2, #0]
 80065aa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065ae:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80065b0:	f7ff fea8 	bl	8006304 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80065b4:	f7ff fd22 	bl	8005ffc <vTaskSwitchContext>
	prvTaskExitError();
 80065b8:	f7ff fe84 	bl	80062c4 <prvTaskExitError>
}
 80065bc:	4620      	mov	r0, r4
 80065be:	b002      	add	sp, #8
 80065c0:	bd10      	pop	{r4, pc}
 80065c2:	bf00      	nop
 80065c4:	e000ed00 	.word	0xe000ed00
 80065c8:	410fc271 	.word	0x410fc271
 80065cc:	410fc270 	.word	0x410fc270
 80065d0:	e000e400 	.word	0xe000e400
 80065d4:	2000042c 	.word	0x2000042c
 80065d8:	20000430 	.word	0x20000430
 80065dc:	e000ed20 	.word	0xe000ed20
 80065e0:	20000034 	.word	0x20000034
 80065e4:	e000ef34 	.word	0xe000ef34

080065e8 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065e8:	4a12      	ldr	r2, [pc, #72]	; (8006634 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065ea:	f012 0f07 	tst.w	r2, #7
 80065ee:	d01e      	beq.n	800662e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065f0:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065f2:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065f6:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 80065fa:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065fc:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065fe:	480e      	ldr	r0, [pc, #56]	; (8006638 <prvHeapInit+0x50>)
 8006600:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006602:	2100      	movs	r1, #0
 8006604:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006606:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8006608:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800660a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800660e:	480b      	ldr	r0, [pc, #44]	; (800663c <prvHeapInit+0x54>)
 8006610:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8006612:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006614:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006616:	1a99      	subs	r1, r3, r2
 8006618:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800661a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800661c:	4b08      	ldr	r3, [pc, #32]	; (8006640 <prvHeapInit+0x58>)
 800661e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006620:	4b08      	ldr	r3, [pc, #32]	; (8006644 <prvHeapInit+0x5c>)
 8006622:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006624:	4b08      	ldr	r3, [pc, #32]	; (8006648 <prvHeapInit+0x60>)
 8006626:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800662a:	601a      	str	r2, [r3, #0]
}
 800662c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800662e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006632:	e7e4      	b.n	80065fe <prvHeapInit+0x16>
 8006634:	20000438 	.word	0x20000438
 8006638:	20004044 	.word	0x20004044
 800663c:	20000434 	.word	0x20000434
 8006640:	20004040 	.word	0x20004040
 8006644:	2000403c 	.word	0x2000403c
 8006648:	20004038 	.word	0x20004038

0800664c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800664c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800664e:	4b13      	ldr	r3, [pc, #76]	; (800669c <prvInsertBlockIntoFreeList+0x50>)
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	4282      	cmp	r2, r0
 8006654:	d31b      	bcc.n	800668e <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006656:	6859      	ldr	r1, [r3, #4]
 8006658:	185c      	adds	r4, r3, r1
 800665a:	4284      	cmp	r4, r0
 800665c:	d103      	bne.n	8006666 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800665e:	6840      	ldr	r0, [r0, #4]
 8006660:	4401      	add	r1, r0
 8006662:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006664:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006666:	6841      	ldr	r1, [r0, #4]
 8006668:	1844      	adds	r4, r0, r1
 800666a:	42a2      	cmp	r2, r4
 800666c:	d113      	bne.n	8006696 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800666e:	4c0c      	ldr	r4, [pc, #48]	; (80066a0 <prvInsertBlockIntoFreeList+0x54>)
 8006670:	6824      	ldr	r4, [r4, #0]
 8006672:	42a2      	cmp	r2, r4
 8006674:	d00d      	beq.n	8006692 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006676:	6852      	ldr	r2, [r2, #4]
 8006678:	4411      	add	r1, r2
 800667a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	6812      	ldr	r2, [r2, #0]
 8006680:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006682:	4298      	cmp	r0, r3
 8006684:	d000      	beq.n	8006688 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006686:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006688:	f85d 4b04 	ldr.w	r4, [sp], #4
 800668c:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800668e:	4613      	mov	r3, r2
 8006690:	e7de      	b.n	8006650 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006692:	6004      	str	r4, [r0, #0]
 8006694:	e7f5      	b.n	8006682 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006696:	6002      	str	r2, [r0, #0]
 8006698:	e7f3      	b.n	8006682 <prvInsertBlockIntoFreeList+0x36>
 800669a:	bf00      	nop
 800669c:	20004044 	.word	0x20004044
 80066a0:	20000434 	.word	0x20000434

080066a4 <pvPortMalloc>:
{
 80066a4:	b570      	push	{r4, r5, r6, lr}
 80066a6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80066a8:	f7ff fb74 	bl	8005d94 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80066ac:	4b3a      	ldr	r3, [pc, #232]	; (8006798 <pvPortMalloc+0xf4>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	b1bb      	cbz	r3, 80066e2 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066b2:	4b3a      	ldr	r3, [pc, #232]	; (800679c <pvPortMalloc+0xf8>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	421c      	tst	r4, r3
 80066b8:	d163      	bne.n	8006782 <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 80066ba:	b1ac      	cbz	r4, 80066e8 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 80066bc:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066be:	f014 0f07 	tst.w	r4, #7
 80066c2:	d011      	beq.n	80066e8 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066c4:	f024 0407 	bic.w	r4, r4, #7
 80066c8:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066ca:	f004 0307 	and.w	r3, r4, #7
 80066ce:	b15b      	cbz	r3, 80066e8 <pvPortMalloc+0x44>
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	e7fe      	b.n	80066e0 <pvPortMalloc+0x3c>
			prvHeapInit();
 80066e2:	f7ff ff81 	bl	80065e8 <prvHeapInit>
 80066e6:	e7e4      	b.n	80066b2 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066e8:	2c00      	cmp	r4, #0
 80066ea:	d04c      	beq.n	8006786 <pvPortMalloc+0xe2>
 80066ec:	4b2c      	ldr	r3, [pc, #176]	; (80067a0 <pvPortMalloc+0xfc>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	42a3      	cmp	r3, r4
 80066f2:	d34a      	bcc.n	800678a <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 80066f4:	4b2b      	ldr	r3, [pc, #172]	; (80067a4 <pvPortMalloc+0x100>)
 80066f6:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066f8:	e001      	b.n	80066fe <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 80066fa:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80066fc:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066fe:	686a      	ldr	r2, [r5, #4]
 8006700:	42a2      	cmp	r2, r4
 8006702:	d202      	bcs.n	800670a <pvPortMalloc+0x66>
 8006704:	682a      	ldr	r2, [r5, #0]
 8006706:	2a00      	cmp	r2, #0
 8006708:	d1f7      	bne.n	80066fa <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 800670a:	4a23      	ldr	r2, [pc, #140]	; (8006798 <pvPortMalloc+0xf4>)
 800670c:	6812      	ldr	r2, [r2, #0]
 800670e:	42aa      	cmp	r2, r5
 8006710:	d03d      	beq.n	800678e <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006712:	681e      	ldr	r6, [r3, #0]
 8006714:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006716:	682a      	ldr	r2, [r5, #0]
 8006718:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800671a:	686b      	ldr	r3, [r5, #4]
 800671c:	1b1b      	subs	r3, r3, r4
 800671e:	2b10      	cmp	r3, #16
 8006720:	d910      	bls.n	8006744 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006722:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006724:	f010 0f07 	tst.w	r0, #7
 8006728:	d008      	beq.n	800673c <pvPortMalloc+0x98>
 800672a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	e7fe      	b.n	800673a <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800673c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800673e:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006740:	f7ff ff84 	bl	800664c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006744:	686a      	ldr	r2, [r5, #4]
 8006746:	4916      	ldr	r1, [pc, #88]	; (80067a0 <pvPortMalloc+0xfc>)
 8006748:	680b      	ldr	r3, [r1, #0]
 800674a:	1a9b      	subs	r3, r3, r2
 800674c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800674e:	4916      	ldr	r1, [pc, #88]	; (80067a8 <pvPortMalloc+0x104>)
 8006750:	6809      	ldr	r1, [r1, #0]
 8006752:	428b      	cmp	r3, r1
 8006754:	d201      	bcs.n	800675a <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006756:	4914      	ldr	r1, [pc, #80]	; (80067a8 <pvPortMalloc+0x104>)
 8006758:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800675a:	4b10      	ldr	r3, [pc, #64]	; (800679c <pvPortMalloc+0xf8>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4313      	orrs	r3, r2
 8006760:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006762:	2300      	movs	r3, #0
 8006764:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8006766:	f7ff fba9 	bl	8005ebc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800676a:	f016 0f07 	tst.w	r6, #7
 800676e:	d010      	beq.n	8006792 <pvPortMalloc+0xee>
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	e7fe      	b.n	8006780 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8006782:	2600      	movs	r6, #0
 8006784:	e7ef      	b.n	8006766 <pvPortMalloc+0xc2>
 8006786:	2600      	movs	r6, #0
 8006788:	e7ed      	b.n	8006766 <pvPortMalloc+0xc2>
 800678a:	2600      	movs	r6, #0
 800678c:	e7eb      	b.n	8006766 <pvPortMalloc+0xc2>
 800678e:	2600      	movs	r6, #0
 8006790:	e7e9      	b.n	8006766 <pvPortMalloc+0xc2>
}
 8006792:	4630      	mov	r0, r6
 8006794:	bd70      	pop	{r4, r5, r6, pc}
 8006796:	bf00      	nop
 8006798:	20000434 	.word	0x20000434
 800679c:	20004038 	.word	0x20004038
 80067a0:	2000403c 	.word	0x2000403c
 80067a4:	20004044 	.word	0x20004044
 80067a8:	20004040 	.word	0x20004040

080067ac <vPortFree>:
	if( pv != NULL )
 80067ac:	b380      	cbz	r0, 8006810 <vPortFree+0x64>
{
 80067ae:	b538      	push	{r3, r4, r5, lr}
 80067b0:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80067b2:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067b6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80067ba:	4916      	ldr	r1, [pc, #88]	; (8006814 <vPortFree+0x68>)
 80067bc:	6809      	ldr	r1, [r1, #0]
 80067be:	420a      	tst	r2, r1
 80067c0:	d108      	bne.n	80067d4 <vPortFree+0x28>
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	e7fe      	b.n	80067d2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067d4:	f850 0c08 	ldr.w	r0, [r0, #-8]
 80067d8:	b140      	cbz	r0, 80067ec <vPortFree+0x40>
 80067da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	e7fe      	b.n	80067ea <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80067ec:	ea22 0201 	bic.w	r2, r2, r1
 80067f0:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 80067f4:	f7ff face 	bl	8005d94 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80067f8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80067fc:	4a06      	ldr	r2, [pc, #24]	; (8006818 <vPortFree+0x6c>)
 80067fe:	6813      	ldr	r3, [r2, #0]
 8006800:	440b      	add	r3, r1
 8006802:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006804:	4628      	mov	r0, r5
 8006806:	f7ff ff21 	bl	800664c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800680a:	f7ff fb57 	bl	8005ebc <xTaskResumeAll>
}
 800680e:	bd38      	pop	{r3, r4, r5, pc}
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	20004038 	.word	0x20004038
 8006818:	2000403c 	.word	0x2000403c

0800681c <RF_init>:
//////////////////////////////////// IMU variables /////////////////////////

/////////////////////////////////////////////////////////////////
////////////////////// Init NRF24L01 Module /////////////////////
/////////////////////////////////////////////////////////////////
void RF_init() {
 800681c:	b510      	push	{r4, lr}
 800681e:	b096      	sub	sp, #88	; 0x58

#if NRF24
	DWT_Init(); //Enable some of the MCUs special registers so we can get microsecond (us) delays
 8006820:	f7fb fb68 	bl	8001ef4 <DWT_Init>
	NRF24_begin(GPIOB, nrf_CSN_PIN, nrf_CE_PIN, hspi2);
 8006824:	4c0f      	ldr	r4, [pc, #60]	; (8006864 <RF_init+0x48>)
 8006826:	2254      	movs	r2, #84	; 0x54
 8006828:	1d21      	adds	r1, r4, #4
 800682a:	4668      	mov	r0, sp
 800682c:	f001 f994 	bl	8007b58 <memcpy>
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006836:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800683a:	480b      	ldr	r0, [pc, #44]	; (8006868 <RF_init+0x4c>)
 800683c:	f7fa fe1a 	bl	8001474 <NRF24_begin>
	//nrf24_DebugUART_Init(huart6);
	NRF24_enableAckPayload();
 8006840:	f7fa fdf4 	bl	800142c <NRF24_enableAckPayload>
	NRF24_setAutoAck(true);
 8006844:	2001      	movs	r0, #1
 8006846:	f7fa fd31 	bl	80012ac <NRF24_setAutoAck>
	NRF24_openReadingPipe(1, TxpipeAddrs);
 800684a:	4b08      	ldr	r3, [pc, #32]	; (800686c <RF_init+0x50>)
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	2001      	movs	r0, #1
 8006852:	f7fa fc91 	bl	8001178 <NRF24_openReadingPipe>
	NRF24_startListening();
 8006856:	f7fa fc6d 	bl	8001134 <NRF24_startListening>

	printRadioSettings();
 800685a:	f7fa fee1 	bl	8001620 <printRadioSettings>
#endif

}
 800685e:	b016      	add	sp, #88	; 0x58
 8006860:	bd10      	pop	{r4, pc}
 8006862:	bf00      	nop
 8006864:	200048d8 	.word	0x200048d8
 8006868:	40020400 	.word	0x40020400
 800686c:	20000038 	.word	0x20000038

08006870 <unpackRxData>:
#endif
}
// Unpack received 32 byte payload from transmitter, see documentation for specification details
void unpackRxData() {

	Rx_Data.L_Joystick_XPos = (RxData[0] & 0xFF) | (RxData[1] << 8);
 8006870:	4b0e      	ldr	r3, [pc, #56]	; (80068ac <unpackRxData+0x3c>)
 8006872:	7819      	ldrb	r1, [r3, #0]
 8006874:	785a      	ldrb	r2, [r3, #1]
 8006876:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800687a:	4a0d      	ldr	r2, [pc, #52]	; (80068b0 <unpackRxData+0x40>)
 800687c:	8011      	strh	r1, [r2, #0]
	Rx_Data.L_Joystick_YPos = (RxData[2] & 0xFF) | (RxData[3] << 8);
 800687e:	7899      	ldrb	r1, [r3, #2]
 8006880:	78d8      	ldrb	r0, [r3, #3]
 8006882:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8006886:	8051      	strh	r1, [r2, #2]
	Rx_Data.R_Joystick_XPos = (RxData[4] & 0xFF) | (RxData[5] << 8);
 8006888:	7919      	ldrb	r1, [r3, #4]
 800688a:	7958      	ldrb	r0, [r3, #5]
 800688c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8006890:	8091      	strh	r1, [r2, #4]
	Rx_Data.R_Joystick_YPos = (RxData[6] & 0xFF) | (RxData[7] << 8);
 8006892:	7999      	ldrb	r1, [r3, #6]
 8006894:	79d8      	ldrb	r0, [r3, #7]
 8006896:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800689a:	80d1      	strh	r1, [r2, #6]

	Rx_Data.airmode = (RxData[8] >> 0) & 1;
 800689c:	7a1b      	ldrb	r3, [r3, #8]
 800689e:	f003 0101 	and.w	r1, r3, #1
 80068a2:	7211      	strb	r1, [r2, #8]

	Rx_Data.kill_rx = (RxData[8] >> 1) & 1;
 80068a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80068a8:	7253      	strb	r3, [r2, #9]
	//	//Remap
	//	pitch_p_gain = (float) roll_p_rx / 100;
	//	pitch_i_gain = (float) roll_i_rx / 100;
	//	pitch_d_gain = (float) roll_d_rx / 100;

}
 80068aa:	4770      	bx	lr
 80068ac:	2000444c 	.word	0x2000444c
 80068b0:	20004440 	.word	0x20004440

080068b4 <packAckPayData_0>:

//	Pack acknowledge payload data 0 - sent every control loop, which will be sent back to controller once drone has successfully
//	received a payload from it
void packAckPayData_0(float roll, float pitch, float yaw) {
 80068b4:	b510      	push	{r4, lr}
 80068b6:	ed2d 8b04 	vpush	{d8-d9}
 80068ba:	eeb0 9a60 	vmov.f32	s18, s1
 80068be:	eef0 8a41 	vmov.f32	s17, s2

	//ID for packet 0
	AckPayload_0[0] = 0x03;
 80068c2:	4c21      	ldr	r4, [pc, #132]	; (8006948 <packAckPayData_0+0x94>)
 80068c4:	2303      	movs	r3, #3
 80068c6:	7023      	strb	r3, [r4, #0]

	//Next 2 bytes = Battery level
	AckPayload_0[1] = batteryLevel;
 80068c8:	4b20      	ldr	r3, [pc, #128]	; (800694c <packAckPayData_0+0x98>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	7063      	strb	r3, [r4, #1]
	AckPayload_0[2] = batteryLevel >> 8;
 80068ce:	0a1b      	lsrs	r3, r3, #8
 80068d0:	70a3      	strb	r3, [r4, #2]

	//Next 4 bytes = IMU Roll
	int16_t roll_tx = round(roll * 100);
 80068d2:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8006950 <packAckPayData_0+0x9c>
 80068d6:	ee60 7a08 	vmul.f32	s15, s0, s16
 80068da:	ee17 0a90 	vmov	r0, s15
 80068de:	f7f9 fe4b 	bl	8000578 <__aeabi_f2d>
 80068e2:	ec41 0b10 	vmov	d0, r0, r1
 80068e6:	f001 f89f 	bl	8007a28 <round>
 80068ea:	ec51 0b10 	vmov	r0, r1, d0
 80068ee:	f7fa f94b 	bl	8000b88 <__aeabi_d2iz>
 80068f2:	b200      	sxth	r0, r0
	AckPayload_0[3] = roll_tx;
 80068f4:	70e0      	strb	r0, [r4, #3]
	AckPayload_0[4] = roll_tx >> 8;
 80068f6:	1200      	asrs	r0, r0, #8
 80068f8:	7120      	strb	r0, [r4, #4]

	//Next  4 bytes = IMU Pitch
	int16_t pitch_tx = round(pitch * 100);
 80068fa:	ee69 7a08 	vmul.f32	s15, s18, s16
 80068fe:	ee17 0a90 	vmov	r0, s15
 8006902:	f7f9 fe39 	bl	8000578 <__aeabi_f2d>
 8006906:	ec41 0b10 	vmov	d0, r0, r1
 800690a:	f001 f88d 	bl	8007a28 <round>
 800690e:	ec51 0b10 	vmov	r0, r1, d0
 8006912:	f7fa f939 	bl	8000b88 <__aeabi_d2iz>
 8006916:	b200      	sxth	r0, r0
	AckPayload_0[5] = pitch_tx;
 8006918:	7160      	strb	r0, [r4, #5]
	AckPayload_0[6] = pitch_tx >> 8;
 800691a:	1200      	asrs	r0, r0, #8
 800691c:	71a0      	strb	r0, [r4, #6]

	//Next  4 bytes = IMU Yaw
	int16_t yaw_tx = round(yaw * 100);
 800691e:	ee68 7a88 	vmul.f32	s15, s17, s16
 8006922:	ee17 0a90 	vmov	r0, s15
 8006926:	f7f9 fe27 	bl	8000578 <__aeabi_f2d>
 800692a:	ec41 0b10 	vmov	d0, r0, r1
 800692e:	f001 f87b 	bl	8007a28 <round>
 8006932:	ec51 0b10 	vmov	r0, r1, d0
 8006936:	f7fa f927 	bl	8000b88 <__aeabi_d2iz>
 800693a:	b200      	sxth	r0, r0
	AckPayload_0[7] = yaw_tx;
 800693c:	71e0      	strb	r0, [r4, #7]
	AckPayload_0[8] = yaw_tx >> 8;
 800693e:	1200      	asrs	r0, r0, #8
 8006940:	7220      	strb	r0, [r4, #8]

}
 8006942:	ecbd 8b04 	vpop	{d8-d9}
 8006946:	bd10      	pop	{r4, pc}
 8006948:	20004420 	.word	0x20004420
 800694c:	2000404c 	.word	0x2000404c
 8006950:	42c80000 	.word	0x42c80000

08006954 <packAckPayData_1>:

//	Pack acknowledge payload data 1 - sent every second, contains GPS data
void packAckPayData_1() {
 8006954:	b508      	push	{r3, lr}

	//ID for packet 1
	AckPayload_1[0] = 0xFF;
 8006956:	4803      	ldr	r0, [pc, #12]	; (8006964 <packAckPayData_1+0x10>)
 8006958:	23ff      	movs	r3, #255	; 0xff
 800695a:	7003      	strb	r3, [r0, #0]

	getGPSData(AckPayload_1);
 800695c:	f000 fb1e 	bl	8006f9c <getGPSData>

}
 8006960:	bd08      	pop	{r3, pc}
 8006962:	bf00      	nop
 8006964:	20004400 	.word	0x20004400

08006968 <map>:


float map(int x, int in_min, int in_max, int out_min, int out_max) {
 8006968:	b410      	push	{r4}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800696a:	1a40      	subs	r0, r0, r1
 800696c:	9c01      	ldr	r4, [sp, #4]
 800696e:	1ae4      	subs	r4, r4, r3
 8006970:	fb04 f000 	mul.w	r0, r4, r0
 8006974:	1a52      	subs	r2, r2, r1
 8006976:	fb90 f0f2 	sdiv	r0, r0, r2
 800697a:	18c3      	adds	r3, r0, r3
 800697c:	ee00 3a10 	vmov	s0, r3
}
 8006980:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8006984:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006988:	4770      	bx	lr
	...

0800698c <RF_TxRx>:
void RF_TxRx(uint16_t *throttle, float *p_setpoint, float *r_setpoint, float *y_setpoint, float roll, float pitch, float yaw) {
 800698c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800698e:	b083      	sub	sp, #12
 8006990:	4604      	mov	r4, r0
 8006992:	460d      	mov	r5, r1
 8006994:	4616      	mov	r6, r2
	packAckPayData_0(roll, pitch, yaw);
 8006996:	f7ff ff8d 	bl	80068b4 <packAckPayData_0>
	if (loop_counter == CRTL_LOOP_FREQ - 1) {
 800699a:	4b39      	ldr	r3, [pc, #228]	; (8006a80 <RF_TxRx+0xf4>)
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	f240 12f3 	movw	r2, #499	; 0x1f3
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d00b      	beq.n	80069be <RF_TxRx+0x32>
		loop_counter++;
 80069a6:	3301      	adds	r3, #1
 80069a8:	4a35      	ldr	r2, [pc, #212]	; (8006a80 <RF_TxRx+0xf4>)
 80069aa:	8013      	strh	r3, [r2, #0]
	if (NRF24_available()) {
 80069ac:	f7fa fd02 	bl	80013b4 <NRF24_available>
 80069b0:	b958      	cbnz	r0, 80069ca <RF_TxRx+0x3e>
		packetsLostCtr++;
 80069b2:	4a34      	ldr	r2, [pc, #208]	; (8006a84 <RF_TxRx+0xf8>)
 80069b4:	6813      	ldr	r3, [r2, #0]
 80069b6:	3301      	adds	r3, #1
 80069b8:	6013      	str	r3, [r2, #0]
}
 80069ba:	b003      	add	sp, #12
 80069bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		packAckPayData_1();
 80069be:	f7ff ffc9 	bl	8006954 <packAckPayData_1>
		loop_counter = 0;
 80069c2:	4b2f      	ldr	r3, [pc, #188]	; (8006a80 <RF_TxRx+0xf4>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	801a      	strh	r2, [r3, #0]
 80069c8:	e7f0      	b.n	80069ac <RF_TxRx+0x20>
		NRF24_read(RxData, 32);
 80069ca:	2120      	movs	r1, #32
 80069cc:	482e      	ldr	r0, [pc, #184]	; (8006a88 <RF_TxRx+0xfc>)
 80069ce:	f7fa fc53 	bl	8001278 <NRF24_read>
		packetsLostCtr = 0;
 80069d2:	4b2c      	ldr	r3, [pc, #176]	; (8006a84 <RF_TxRx+0xf8>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	601a      	str	r2, [r3, #0]
		if (loop_counter == CRTL_LOOP_FREQ - 1) {
 80069d8:	4b29      	ldr	r3, [pc, #164]	; (8006a80 <RF_TxRx+0xf4>)
 80069da:	881a      	ldrh	r2, [r3, #0]
 80069dc:	f240 13f3 	movw	r3, #499	; 0x1f3
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d046      	beq.n	8006a72 <RF_TxRx+0xe6>
			NRF24_writeAckPayload(1, AckPayload_0, 32);
 80069e4:	2220      	movs	r2, #32
 80069e6:	4929      	ldr	r1, [pc, #164]	; (8006a8c <RF_TxRx+0x100>)
 80069e8:	2001      	movs	r0, #1
 80069ea:	f7fa fce8 	bl	80013be <NRF24_writeAckPayload>
		unpackRxData();
 80069ee:	f7ff ff3f 	bl	8006870 <unpackRxData>
		*throttle = map(Rx_Data.L_Joystick_YPos, 850, 3300, ESC_MIN, ESC_MAX);
 80069f2:	4b27      	ldr	r3, [pc, #156]	; (8006a90 <RF_TxRx+0x104>)
 80069f4:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80069f8:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8006a02:	f640 42e4 	movw	r2, #3300	; 0xce4
 8006a06:	f240 3152 	movw	r1, #850	; 0x352
 8006a0a:	f7ff ffad 	bl	8006968 <map>
 8006a0e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8006a12:	ee10 3a10 	vmov	r3, s0
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	8023      	strh	r3, [r4, #0]
		if (*throttle < ESC_MIN + 200) {
 8006a1a:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d802      	bhi.n	8006a28 <RF_TxRx+0x9c>
			*throttle = ESC_MIN;
 8006a22:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8006a26:	8023      	strh	r3, [r4, #0]
		if (*throttle > ESC_MAX - 200) {
 8006a28:	8822      	ldrh	r2, [r4, #0]
 8006a2a:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d902      	bls.n	8006a38 <RF_TxRx+0xac>
			*throttle = ESC_MAX;
 8006a32:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8006a36:	8023      	strh	r3, [r4, #0]
		*r_setpoint = map(Rx_Data.R_Joystick_XPos, 340, 3960, -MAX_ANGLE, MAX_ANGLE);
 8006a38:	4f15      	ldr	r7, [pc, #84]	; (8006a90 <RF_TxRx+0x104>)
 8006a3a:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8006a3e:	2414      	movs	r4, #20
 8006a40:	9400      	str	r4, [sp, #0]
 8006a42:	f06f 0313 	mvn.w	r3, #19
 8006a46:	f640 7278 	movw	r2, #3960	; 0xf78
 8006a4a:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8006a4e:	f7ff ff8b 	bl	8006968 <map>
 8006a52:	ed86 0a00 	vstr	s0, [r6]
		*p_setpoint = map(Rx_Data.R_Joystick_YPos, 350, 4000, -MAX_ANGLE, MAX_ANGLE);
 8006a56:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006a5a:	9400      	str	r4, [sp, #0]
 8006a5c:	f06f 0313 	mvn.w	r3, #19
 8006a60:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8006a64:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8006a68:	f7ff ff7e 	bl	8006968 <map>
 8006a6c:	ed85 0a00 	vstr	s0, [r5]
 8006a70:	e7a3      	b.n	80069ba <RF_TxRx+0x2e>
			NRF24_writeAckPayload(1, AckPayload_1, 32);
 8006a72:	2220      	movs	r2, #32
 8006a74:	4907      	ldr	r1, [pc, #28]	; (8006a94 <RF_TxRx+0x108>)
 8006a76:	2001      	movs	r0, #1
 8006a78:	f7fa fca1 	bl	80013be <NRF24_writeAckPayload>
 8006a7c:	e7b7      	b.n	80069ee <RF_TxRx+0x62>
 8006a7e:	bf00      	nop
 8006a80:	20004050 	.word	0x20004050
 8006a84:	20004054 	.word	0x20004054
 8006a88:	2000444c 	.word	0x2000444c
 8006a8c:	20004420 	.word	0x20004420
 8006a90:	20004440 	.word	0x20004440
 8006a94:	20004400 	.word	0x20004400

08006a98 <CL_main>:
 * (1 CW)     (3 CCW)
 *
 * This function gets called by the GPIO_EXTI callback when the PWM_RE_INT_Pin triggers an interrupt,
 * which is on the rising edge of every PWM pulse.
 */
void CL_main() {
 8006a98:	b538      	push	{r3, r4, r5, lr}


#if NRF24
	RF_TxRx(&throttle, &pitch_setpoint, &roll_setpoint, &yaw_setpoint, imu_roll, imu_pitch, imu_yaw);
 8006a9a:	4b56      	ldr	r3, [pc, #344]	; (8006bf4 <CL_main+0x15c>)
 8006a9c:	ed93 1a00 	vldr	s2, [r3]
 8006aa0:	4b55      	ldr	r3, [pc, #340]	; (8006bf8 <CL_main+0x160>)
 8006aa2:	edd3 0a00 	vldr	s1, [r3]
 8006aa6:	4b55      	ldr	r3, [pc, #340]	; (8006bfc <CL_main+0x164>)
 8006aa8:	ed93 0a00 	vldr	s0, [r3]
 8006aac:	4b54      	ldr	r3, [pc, #336]	; (8006c00 <CL_main+0x168>)
 8006aae:	4a55      	ldr	r2, [pc, #340]	; (8006c04 <CL_main+0x16c>)
 8006ab0:	4955      	ldr	r1, [pc, #340]	; (8006c08 <CL_main+0x170>)
 8006ab2:	4856      	ldr	r0, [pc, #344]	; (8006c0c <CL_main+0x174>)
 8006ab4:	f7ff ff6a 	bl	800698c <RF_TxRx>

		imu_pitch = get_pitch();
		imu_roll = get_roll();
		imu_yaw = get_yaw();
#endif
		if (Rx_Data.airmode) {
 8006ab8:	4b55      	ldr	r3, [pc, #340]	; (8006c10 <CL_main+0x178>)
 8006aba:	7a1b      	ldrb	r3, [r3, #8]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 808a 	beq.w	8006bd6 <CL_main+0x13e>
			/*******    Pitch PID calculation  ********/
			pid_output_pitch = pid_calculate_pitch(imu_pitch, 0, 0);
 8006ac2:	eddf 0a54 	vldr	s1, [pc, #336]	; 8006c14 <CL_main+0x17c>
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	4b4b      	ldr	r3, [pc, #300]	; (8006bf8 <CL_main+0x160>)
 8006aca:	ed93 0a00 	vldr	s0, [r3]
 8006ace:	f7fb f915 	bl	8001cfc <pid_calculate_pitch>
 8006ad2:	4b51      	ldr	r3, [pc, #324]	; (8006c18 <CL_main+0x180>)
 8006ad4:	ed83 0a00 	vstr	s0, [r3]

			/*******    Roll PID calculation  ********/

			pid_output_roll = pid_calculate_roll(imu_roll, 0, roll_setpoint);
 8006ad8:	4b4a      	ldr	r3, [pc, #296]	; (8006c04 <CL_main+0x16c>)
 8006ada:	edd3 0a00 	vldr	s1, [r3]
 8006ade:	2000      	movs	r0, #0
 8006ae0:	4b46      	ldr	r3, [pc, #280]	; (8006bfc <CL_main+0x164>)
 8006ae2:	ed93 0a00 	vldr	s0, [r3]
 8006ae6:	f7fb f88b 	bl	8001c00 <pid_calculate_roll>
 8006aea:	4b4c      	ldr	r3, [pc, #304]	; (8006c1c <CL_main+0x184>)
 8006aec:	ed83 0a00 	vstr	s0, [r3]

			/*******    Yaw PID calculation  ********/

			pid_output_yaw = pid_calculate_yaw(imu_yaw, 0, yaw_setpoint);
 8006af0:	4b43      	ldr	r3, [pc, #268]	; (8006c00 <CL_main+0x168>)
 8006af2:	edd3 0a00 	vldr	s1, [r3]
 8006af6:	2000      	movs	r0, #0
 8006af8:	4b3e      	ldr	r3, [pc, #248]	; (8006bf4 <CL_main+0x15c>)
 8006afa:	ed93 0a00 	vldr	s0, [r3]
 8006afe:	f7fb f97b 	bl	8001df8 <pid_calculate_yaw>
 8006b02:	4b47      	ldr	r3, [pc, #284]	; (8006c20 <CL_main+0x188>)
 8006b04:	ed83 0a00 	vstr	s0, [r3]
			printToPC();
		}
#endif

		//Calculate new pulse width values
		esc1_total = throttle - (int) pid_output_roll - (int) pid_output_pitch;
 8006b08:	4b40      	ldr	r3, [pc, #256]	; (8006c0c <CL_main+0x174>)
 8006b0a:	8818      	ldrh	r0, [r3, #0]
 8006b0c:	4b43      	ldr	r3, [pc, #268]	; (8006c1c <CL_main+0x184>)
 8006b0e:	edd3 7a00 	vldr	s15, [r3]
 8006b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b16:	ee17 1a90 	vmov	r1, s15
 8006b1a:	1a42      	subs	r2, r0, r1
 8006b1c:	4b3e      	ldr	r3, [pc, #248]	; (8006c18 <CL_main+0x180>)
 8006b1e:	edd3 7a00 	vldr	s15, [r3]
 8006b22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b26:	ee17 3a90 	vmov	r3, s15
 8006b2a:	1ad4      	subs	r4, r2, r3
 8006b2c:	4d3d      	ldr	r5, [pc, #244]	; (8006c24 <CL_main+0x18c>)
 8006b2e:	602c      	str	r4, [r5, #0]
		esc2_total = throttle - (int) pid_output_roll + (int) pid_output_pitch;
 8006b30:	441a      	add	r2, r3
 8006b32:	4d3d      	ldr	r5, [pc, #244]	; (8006c28 <CL_main+0x190>)
 8006b34:	602a      	str	r2, [r5, #0]
		esc3_total = (throttle) + (int) pid_output_roll
 8006b36:	4401      	add	r1, r0
				- (int) pid_output_pitch;
 8006b38:	1ac8      	subs	r0, r1, r3
		esc3_total = (throttle) + (int) pid_output_roll
 8006b3a:	4d3c      	ldr	r5, [pc, #240]	; (8006c2c <CL_main+0x194>)
 8006b3c:	6028      	str	r0, [r5, #0]
		esc4_total = (throttle) + (int) pid_output_roll
				+ (int) pid_output_pitch;
 8006b3e:	440b      	add	r3, r1
		esc4_total = (throttle) + (int) pid_output_roll
 8006b40:	493b      	ldr	r1, [pc, #236]	; (8006c30 <CL_main+0x198>)
 8006b42:	600b      	str	r3, [r1, #0]

		//Clip PWM values to make sure they don't go outside of range
		if (esc1_total < ESC_MIN) {
 8006b44:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8006b48:	428c      	cmp	r4, r1
 8006b4a:	dc03      	bgt.n	8006b54 <CL_main+0xbc>
			esc1_total = ESC_MIN;
 8006b4c:	4935      	ldr	r1, [pc, #212]	; (8006c24 <CL_main+0x18c>)
 8006b4e:	f240 44e2 	movw	r4, #1250	; 0x4e2
 8006b52:	600c      	str	r4, [r1, #0]
		}
		if (esc1_total > ESC_MAX) {
 8006b54:	4933      	ldr	r1, [pc, #204]	; (8006c24 <CL_main+0x18c>)
 8006b56:	680c      	ldr	r4, [r1, #0]
 8006b58:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8006b5c:	428c      	cmp	r4, r1
 8006b5e:	dd03      	ble.n	8006b68 <CL_main+0xd0>
			esc1_total = ESC_MAX;
 8006b60:	4930      	ldr	r1, [pc, #192]	; (8006c24 <CL_main+0x18c>)
 8006b62:	f640 14c4 	movw	r4, #2500	; 0x9c4
 8006b66:	600c      	str	r4, [r1, #0]
		}
		if (esc2_total < ESC_MIN) {
 8006b68:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8006b6c:	428a      	cmp	r2, r1
 8006b6e:	dc03      	bgt.n	8006b78 <CL_main+0xe0>
			esc2_total = ESC_MIN;
 8006b70:	4a2d      	ldr	r2, [pc, #180]	; (8006c28 <CL_main+0x190>)
 8006b72:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8006b76:	6011      	str	r1, [r2, #0]
		}
		if (esc2_total > ESC_MAX) {
 8006b78:	4a2b      	ldr	r2, [pc, #172]	; (8006c28 <CL_main+0x190>)
 8006b7a:	6811      	ldr	r1, [r2, #0]
 8006b7c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006b80:	4291      	cmp	r1, r2
 8006b82:	dd03      	ble.n	8006b8c <CL_main+0xf4>
			esc2_total = ESC_MAX;
 8006b84:	4a28      	ldr	r2, [pc, #160]	; (8006c28 <CL_main+0x190>)
 8006b86:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8006b8a:	6011      	str	r1, [r2, #0]
		}
		if (esc3_total < ESC_MIN) {
 8006b8c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8006b90:	4290      	cmp	r0, r2
 8006b92:	dc03      	bgt.n	8006b9c <CL_main+0x104>
			esc3_total = ESC_MIN;
 8006b94:	4a25      	ldr	r2, [pc, #148]	; (8006c2c <CL_main+0x194>)
 8006b96:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8006b9a:	6011      	str	r1, [r2, #0]
		}
		if (esc3_total > ESC_MAX) {
 8006b9c:	4a23      	ldr	r2, [pc, #140]	; (8006c2c <CL_main+0x194>)
 8006b9e:	6811      	ldr	r1, [r2, #0]
 8006ba0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006ba4:	4291      	cmp	r1, r2
 8006ba6:	dd03      	ble.n	8006bb0 <CL_main+0x118>
			esc3_total = ESC_MAX;
 8006ba8:	4a20      	ldr	r2, [pc, #128]	; (8006c2c <CL_main+0x194>)
 8006baa:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8006bae:	6011      	str	r1, [r2, #0]
		}
		if (esc4_total < ESC_MIN) {
 8006bb0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	dc03      	bgt.n	8006bc0 <CL_main+0x128>
			esc4_total = ESC_MIN;
 8006bb8:	4b1d      	ldr	r3, [pc, #116]	; (8006c30 <CL_main+0x198>)
 8006bba:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006bbe:	601a      	str	r2, [r3, #0]
		}
		if (esc4_total > ESC_MAX) {
 8006bc0:	4b1b      	ldr	r3, [pc, #108]	; (8006c30 <CL_main+0x198>)
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	dd03      	ble.n	8006bd4 <CL_main+0x13c>
			esc4_total = ESC_MAX;
 8006bcc:	4b18      	ldr	r3, [pc, #96]	; (8006c30 <CL_main+0x198>)
 8006bce:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006bd2:	601a      	str	r2, [r3, #0]

#endif



}
 8006bd4:	bd38      	pop	{r3, r4, r5, pc}
			pid_output_roll = 0;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	4a10      	ldr	r2, [pc, #64]	; (8006c1c <CL_main+0x184>)
 8006bda:	6013      	str	r3, [r2, #0]
			pid_output_pitch = 0;
 8006bdc:	4a0e      	ldr	r2, [pc, #56]	; (8006c18 <CL_main+0x180>)
 8006bde:	6013      	str	r3, [r2, #0]
			pid_output_yaw = 0;
 8006be0:	4a0f      	ldr	r2, [pc, #60]	; (8006c20 <CL_main+0x188>)
 8006be2:	6013      	str	r3, [r2, #0]
			reset_pid_roll();
 8006be4:	f7fb f878 	bl	8001cd8 <reset_pid_roll>
			reset_pid_pitch();
 8006be8:	f7fb f8f4 	bl	8001dd4 <reset_pid_pitch>
			reset_pid_yaw();
 8006bec:	f7fb f970 	bl	8001ed0 <reset_pid_yaw>
 8006bf0:	e78a      	b.n	8006b08 <CL_main+0x70>
 8006bf2:	bf00      	nop
 8006bf4:	20004070 	.word	0x20004070
 8006bf8:	20004068 	.word	0x20004068
 8006bfc:	2000406c 	.word	0x2000406c
 8006c00:	2000408c 	.word	0x2000408c
 8006c04:	20004084 	.word	0x20004084
 8006c08:	20004080 	.word	0x20004080
 8006c0c:	20004088 	.word	0x20004088
 8006c10:	20004440 	.word	0x20004440
 8006c14:	00000000 	.word	0x00000000
 8006c18:	20004074 	.word	0x20004074
 8006c1c:	20004078 	.word	0x20004078
 8006c20:	2000407c 	.word	0x2000407c
 8006c24:	20004058 	.word	0x20004058
 8006c28:	2000405c 	.word	0x2000405c
 8006c2c:	20004060 	.word	0x20004060
 8006c30:	20004064 	.word	0x20004064

08006c34 <PWM1_Set>:
}


//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 8006c34:	4b01      	ldr	r3, [pc, #4]	; (8006c3c <PWM1_Set+0x8>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6358      	str	r0, [r3, #52]	; 0x34
}
 8006c3a:	4770      	bx	lr
 8006c3c:	20004970 	.word	0x20004970

08006c40 <PWM2_Set>:

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 8006c40:	4b01      	ldr	r3, [pc, #4]	; (8006c48 <PWM2_Set+0x8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6398      	str	r0, [r3, #56]	; 0x38

}
 8006c46:	4770      	bx	lr
 8006c48:	20004970 	.word	0x20004970

08006c4c <PWM3_Set>:

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 8006c4c:	4b01      	ldr	r3, [pc, #4]	; (8006c54 <PWM3_Set+0x8>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8006c52:	4770      	bx	lr
 8006c54:	20004970 	.word	0x20004970

08006c58 <PWM4_Set>:

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 8006c58:	4b01      	ldr	r3, [pc, #4]	; (8006c60 <PWM4_Set+0x8>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6418      	str	r0, [r3, #64]	; 0x40
}
 8006c5e:	4770      	bx	lr
 8006c60:	20004970 	.word	0x20004970

08006c64 <CL_init>:
void CL_init() {
 8006c64:	b510      	push	{r4, lr}
	RF_init();
 8006c66:	f7ff fdd9 	bl	800681c <RF_init>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8006c6a:	4c11      	ldr	r4, [pc, #68]	; (8006cb0 <CL_init+0x4c>)
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f7fd f940 	bl	8003ef4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8006c74:	2104      	movs	r1, #4
 8006c76:	4620      	mov	r0, r4
 8006c78:	f7fd f93c 	bl	8003ef4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8006c7c:	2108      	movs	r1, #8
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f7fd f938 	bl	8003ef4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8006c84:	210c      	movs	r1, #12
 8006c86:	4620      	mov	r0, r4
 8006c88:	f7fd f934 	bl	8003ef4 <HAL_TIM_PWM_Start>
	PWM1_Set(2500);
 8006c8c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8006c90:	f7ff ffd0 	bl	8006c34 <PWM1_Set>
	PWM2_Set(2500);
 8006c94:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8006c98:	f7ff ffd2 	bl	8006c40 <PWM2_Set>
	PWM3_Set(2500);
 8006c9c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8006ca0:	f7ff ffd4 	bl	8006c4c <PWM3_Set>
	PWM4_Set(2500);
 8006ca4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8006ca8:	f7ff ffd6 	bl	8006c58 <PWM4_Set>
}
 8006cac:	bd10      	pop	{r4, pc}
 8006cae:	bf00      	nop
 8006cb0:	20004970 	.word	0x20004970

08006cb4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8006cb4:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 8006cb6:	4805      	ldr	r0, [pc, #20]	; (8006ccc <MX_CRC_Init+0x18>)
 8006cb8:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <MX_CRC_Init+0x1c>)
 8006cba:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006cbc:	f7fb f9d6 	bl	800206c <HAL_CRC_Init>
 8006cc0:	b900      	cbnz	r0, 8006cc4 <MX_CRC_Init+0x10>
  {
    Error_Handler();
  }

}
 8006cc2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8006cc4:	f000 fb90 	bl	80073e8 <Error_Handler>
}
 8006cc8:	e7fb      	b.n	8006cc2 <MX_CRC_Init+0xe>
 8006cca:	bf00      	nop
 8006ccc:	20004470 	.word	0x20004470
 8006cd0:	40023000 	.word	0x40023000

08006cd4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8006cd4:	6802      	ldr	r2, [r0, #0]
 8006cd6:	4b09      	ldr	r3, [pc, #36]	; (8006cfc <HAL_CRC_MspInit+0x28>)
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d000      	beq.n	8006cde <HAL_CRC_MspInit+0xa>
 8006cdc:	4770      	bx	lr
{
 8006cde:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	9301      	str	r3, [sp, #4]
 8006ce4:	4b06      	ldr	r3, [pc, #24]	; (8006d00 <HAL_CRC_MspInit+0x2c>)
 8006ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ce8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cec:	631a      	str	r2, [r3, #48]	; 0x30
 8006cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cf4:	9301      	str	r3, [sp, #4]
 8006cf6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8006cf8:	b002      	add	sp, #8
 8006cfa:	4770      	bx	lr
 8006cfc:	40023000 	.word	0x40023000
 8006d00:	40023800 	.word	0x40023800

08006d04 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006d04:	b500      	push	{lr}
 8006d06:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006d08:	2200      	movs	r2, #0
 8006d0a:	9201      	str	r2, [sp, #4]
 8006d0c:	4b09      	ldr	r3, [pc, #36]	; (8006d34 <MX_DMA_Init+0x30>)
 8006d0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006d10:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8006d14:	6319      	str	r1, [r3, #48]	; 0x30
 8006d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d1c:	9301      	str	r3, [sp, #4]
 8006d1e:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 4, 0);
 8006d20:	2104      	movs	r1, #4
 8006d22:	2039      	movs	r0, #57	; 0x39
 8006d24:	f7fb f960 	bl	8001fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8006d28:	2039      	movs	r0, #57	; 0x39
 8006d2a:	f7fb f991 	bl	8002050 <HAL_NVIC_EnableIRQ>

}
 8006d2e:	b003      	add	sp, #12
 8006d30:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d34:	40023800 	.word	0x40023800

08006d38 <StartControlLoop>:
 * @brief  Function implementing the ControlLoop thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControlLoop */
void StartControlLoop(void const * argument) {
 8006d38:	b508      	push	{r3, lr}

	/* USER CODE BEGIN StartControlLoop */

	CL_init();
 8006d3a:	f7ff ff93 	bl	8006c64 <CL_init>

	/* Infinite loop */
	for (;;) {

		CL_main();
 8006d3e:	f7ff feab 	bl	8006a98 <CL_main>
		osDelay(5);
 8006d42:	2005      	movs	r0, #5
 8006d44:	f7fe fb83 	bl	800544e <osDelay>
 8006d48:	e7f9      	b.n	8006d3e <StartControlLoop+0x6>
	...

08006d4c <GPS_init>:

};

struct GPS_ GPS;

void GPS_init() {
 8006d4c:	b508      	push	{r3, lr}

	for (int i = 0; i < GPS_BUFFERSIZE; ++i) {
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e003      	b.n	8006d5a <GPS_init+0xe>
		GPS_RX_Buffer[i] = 0;
 8006d52:	4a07      	ldr	r2, [pc, #28]	; (8006d70 <GPS_init+0x24>)
 8006d54:	2100      	movs	r1, #0
 8006d56:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < GPS_BUFFERSIZE; ++i) {
 8006d58:	3301      	adds	r3, #1
 8006d5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d5e:	dbf8      	blt.n	8006d52 <GPS_init+0x6>
	}

	HAL_UART_Receive_DMA(&huart6, GPS_RX_Buffer, GPS_BUFFERSIZE);
 8006d60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d64:	4902      	ldr	r1, [pc, #8]	; (8006d70 <GPS_init+0x24>)
 8006d66:	4803      	ldr	r0, [pc, #12]	; (8006d74 <GPS_init+0x28>)
 8006d68:	f7fd fbbc 	bl	80044e4 <HAL_UART_Receive_DMA>

}
 8006d6c:	bd08      	pop	{r3, pc}
 8006d6e:	bf00      	nop
 8006d70:	200044d0 	.word	0x200044d0
 8006d74:	20004a50 	.word	0x20004a50

08006d78 <StartGPSUpdate>:
 * @brief Function implementing the GPSUpdate thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGPSUpdate */
void StartGPSUpdate(void const * argument) {
 8006d78:	b508      	push	{r3, lr}
	/* USER CODE BEGIN StartGPSUpdate */

#if GPS

	GPS_init();
 8006d7a:	f7ff ffe7 	bl	8006d4c <GPS_init>



	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8006d7e:	2001      	movs	r0, #1
 8006d80:	f7fe fb65 	bl	800544e <osDelay>
 8006d84:	e7fb      	b.n	8006d7e <StartGPSUpdate+0x6>
	...

08006d88 <parse_sentence>:
		i++;
	}
}

//From https://github.com/kosma/minmea
void parse_sentence() {
 8006d88:	b500      	push	{lr}
 8006d8a:	b095      	sub	sp, #84	; 0x54

	//char line[MINMEA_MAX_LENGTH];

	//while (fgets(line, MINMEA_MAX_LENGTH, stdin) != NULL) {
	//printf("%s", line);
	switch (minmea_sentence_id(line, false)) {
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	4859      	ldr	r0, [pc, #356]	; (8006ef4 <parse_sentence+0x16c>)
 8006d90:	f7fe f91e 	bl	8004fd0 <minmea_sentence_id>
 8006d94:	3801      	subs	r0, #1
 8006d96:	2807      	cmp	r0, #7
 8006d98:	f200 8085 	bhi.w	8006ea6 <parse_sentence+0x11e>
 8006d9c:	e8df f000 	tbb	[pc, r0]
 8006da0:	83835c04 	.word	0x83835c04
 8006da4:	a48b867f 	.word	0xa48b867f
	case MINMEA_SENTENCE_RMC: {
		struct minmea_sentence_rmc frame;
		if (minmea_parse_rmc(&frame, line)) {
 8006da8:	4952      	ldr	r1, [pc, #328]	; (8006ef4 <parse_sentence+0x16c>)
 8006daa:	4668      	mov	r0, sp
 8006dac:	f7fe f978 	bl	80050a0 <minmea_parse_rmc>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d04d      	beq.n	8006e50 <parse_sentence+0xc8>
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
    if (f->scale == 0)
 8006db4:	9b08      	ldr	r3, [sp, #32]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d044      	beq.n	8006e44 <parse_sentence+0xbc>
        return NAN;
    int_least32_t degrees = f->value / (f->scale * 100);
 8006dba:	9807      	ldr	r0, [sp, #28]
 8006dbc:	2164      	movs	r1, #100	; 0x64
 8006dbe:	fb01 f103 	mul.w	r1, r1, r3
 8006dc2:	fb90 f2f1 	sdiv	r2, r0, r1
    int_least32_t minutes = f->value % (f->scale * 100);
 8006dc6:	fb01 0112 	mls	r1, r1, r2, r0
    return (float) degrees + (float) minutes / (60 * f->scale);
 8006dca:	ee07 2a90 	vmov	s15, r2
 8006dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dd2:	ee07 1a10 	vmov	s14, r1
 8006dd6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006dda:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8006dde:	009a      	lsls	r2, r3, #2
 8006de0:	ee06 2a90 	vmov	s13, r2
 8006de4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006de8:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8006dec:	ee77 7a86 	vadd.f32	s15, s15, s12

			GPS.Longitude = minmea_tocoord(&frame.longitude);
 8006df0:	4b41      	ldr	r3, [pc, #260]	; (8006ef8 <parse_sentence+0x170>)
 8006df2:	edc3 7a02 	vstr	s15, [r3, #8]
    if (f->scale == 0)
 8006df6:	9b06      	ldr	r3, [sp, #24]
 8006df8:	b33b      	cbz	r3, 8006e4a <parse_sentence+0xc2>
    int_least32_t degrees = f->value / (f->scale * 100);
 8006dfa:	9805      	ldr	r0, [sp, #20]
 8006dfc:	2164      	movs	r1, #100	; 0x64
 8006dfe:	fb01 f103 	mul.w	r1, r1, r3
 8006e02:	fb90 f2f1 	sdiv	r2, r0, r1
    int_least32_t minutes = f->value % (f->scale * 100);
 8006e06:	fb01 0112 	mls	r1, r1, r2, r0
    return (float) degrees + (float) minutes / (60 * f->scale);
 8006e0a:	ee07 2a90 	vmov	s15, r2
 8006e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e12:	ee07 1a10 	vmov	s14, r1
 8006e16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006e1a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8006e1e:	009a      	lsls	r2, r3, #2
 8006e20:	ee06 2a90 	vmov	s13, r2
 8006e24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006e28:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8006e2c:	ee77 7a86 	vadd.f32	s15, s15, s12
			GPS.Latitude = minmea_tocoord(&frame.latitude);
 8006e30:	4b31      	ldr	r3, [pc, #196]	; (8006ef8 <parse_sentence+0x170>)
 8006e32:	edc3 7a03 	vstr	s15, [r3, #12]

			GPS.Day = frame.date.day;
 8006e36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e38:	701a      	strb	r2, [r3, #0]
			GPS.Month = frame.date.month;
 8006e3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e3c:	705a      	strb	r2, [r3, #1]
			GPS.Year = frame.date.year;
 8006e3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e40:	709a      	strb	r2, [r3, #2]
 8006e42:	e030      	b.n	8006ea6 <parse_sentence+0x11e>
        return NAN;
 8006e44:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8006efc <parse_sentence+0x174>
 8006e48:	e7d2      	b.n	8006df0 <parse_sentence+0x68>
 8006e4a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8006efc <parse_sentence+0x174>
 8006e4e:	e7ef      	b.n	8006e30 <parse_sentence+0xa8>

		} else {
			printf(INDENT_SPACES "$xxRMC sentence is not parsed\n");
 8006e50:	482b      	ldr	r0, [pc, #172]	; (8006f00 <parse_sentence+0x178>)
 8006e52:	f001 fd2f 	bl	80088b4 <puts>
		}
	}
		break;
 8006e56:	e026      	b.n	8006ea6 <parse_sentence+0x11e>

	case MINMEA_SENTENCE_GGA: {
		struct minmea_sentence_gga frame;
		if (minmea_parse_gga(&frame, line)) {
 8006e58:	4926      	ldr	r1, [pc, #152]	; (8006ef4 <parse_sentence+0x16c>)
 8006e5a:	4668      	mov	r0, sp
 8006e5c:	f7fe f96c 	bl	8005138 <minmea_parse_gga>
 8006e60:	b308      	cbz	r0, 8006ea6 <parse_sentence+0x11e>

			GPS.Hours = frame.time.hours;
 8006e62:	4b25      	ldr	r3, [pc, #148]	; (8006ef8 <parse_sentence+0x170>)
 8006e64:	9a00      	ldr	r2, [sp, #0]
 8006e66:	70da      	strb	r2, [r3, #3]
			GPS.Minutes = frame.time.minutes;
 8006e68:	9a01      	ldr	r2, [sp, #4]
 8006e6a:	711a      	strb	r2, [r3, #4]
			GPS.Seconds = frame.time.seconds;
 8006e6c:	9a02      	ldr	r2, [sp, #8]
 8006e6e:	715a      	strb	r2, [r3, #5]

			GPS.sattelite_no = frame.satellites_tracked;
 8006e70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e72:	761a      	strb	r2, [r3, #24]
			GPS.fix_quality = frame.fix_quality;
 8006e74:	9a08      	ldr	r2, [sp, #32]
 8006e76:	765a      	strb	r2, [r3, #25]
    if (f->scale == 0)
 8006e78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e7a:	b16b      	cbz	r3, 8006e98 <parse_sentence+0x110>
    return (float) f->value / (float) f->scale;
 8006e7c:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8006e80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006e84:	ee07 3a90 	vmov	s15, r3
 8006e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15

			GPS.Altitude = minmea_tofloat(&frame.altitude);
 8006e90:	4b19      	ldr	r3, [pc, #100]	; (8006ef8 <parse_sentence+0x170>)
 8006e92:	ed83 7a05 	vstr	s14, [r3, #20]

		} else {

		}
	}
		break;
 8006e96:	e006      	b.n	8006ea6 <parse_sentence+0x11e>
        return NAN;
 8006e98:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006efc <parse_sentence+0x174>
 8006e9c:	e7f8      	b.n	8006e90 <parse_sentence+0x108>

	case MINMEA_SENTENCE_GST: {
		struct minmea_sentence_gst frame;
		if (minmea_parse_gst(&frame, line)) {
 8006e9e:	4915      	ldr	r1, [pc, #84]	; (8006ef4 <parse_sentence+0x16c>)
 8006ea0:	4668      	mov	r0, sp
 8006ea2:	f7fe f98f 	bl	80051c4 <minmea_parse_gst>
	}
		break;
	}
	//}

}
 8006ea6:	b015      	add	sp, #84	; 0x54
 8006ea8:	f85d fb04 	ldr.w	pc, [sp], #4
		if (minmea_parse_gsv(&frame, line)) {
 8006eac:	4911      	ldr	r1, [pc, #68]	; (8006ef4 <parse_sentence+0x16c>)
 8006eae:	4668      	mov	r0, sp
 8006eb0:	f7fe f9b6 	bl	8005220 <minmea_parse_gsv>
		break;
 8006eb4:	e7f7      	b.n	8006ea6 <parse_sentence+0x11e>
		if (minmea_parse_vtg(&frame, line)) {
 8006eb6:	490f      	ldr	r1, [pc, #60]	; (8006ef4 <parse_sentence+0x16c>)
 8006eb8:	4668      	mov	r0, sp
 8006eba:	f7fe f9ff 	bl	80052bc <minmea_parse_vtg>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	d0f1      	beq.n	8006ea6 <parse_sentence+0x11e>
    if (f->scale == 0)
 8006ec2:	9b07      	ldr	r3, [sp, #28]
 8006ec4:	b16b      	cbz	r3, 8006ee2 <parse_sentence+0x15a>
    return (float) f->value / (float) f->scale;
 8006ec6:	eddd 7a06 	vldr	s15, [sp, #24]
 8006eca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006ece:	ee07 3a90 	vmov	s15, r3
 8006ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			GPS.Speed = minmea_tofloat(&frame.speed_kph);
 8006eda:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <parse_sentence+0x170>)
 8006edc:	ed83 7a04 	vstr	s14, [r3, #16]
		break;
 8006ee0:	e7e1      	b.n	8006ea6 <parse_sentence+0x11e>
        return NAN;
 8006ee2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006efc <parse_sentence+0x174>
 8006ee6:	e7f8      	b.n	8006eda <parse_sentence+0x152>
		if (minmea_parse_zda(&frame, line)) {
 8006ee8:	4902      	ldr	r1, [pc, #8]	; (8006ef4 <parse_sentence+0x16c>)
 8006eea:	4668      	mov	r0, sp
 8006eec:	f7fe fa34 	bl	8005358 <minmea_parse_zda>
}
 8006ef0:	e7d9      	b.n	8006ea6 <parse_sentence+0x11e>
 8006ef2:	bf00      	nop
 8006ef4:	20004480 	.word	0x20004480
 8006ef8:	200048b8 	.word	0x200048b8
 8006efc:	7fc00000 	.word	0x7fc00000
 8006f00:	0800c26c 	.word	0x0800c26c

08006f04 <GPS_parse>:
void GPS_parse() {
 8006f04:	b538      	push	{r3, r4, r5, lr}
	for (int y = 0; y < 8; y++) {
 8006f06:	2500      	movs	r5, #0
	uint16_t i = 0;
 8006f08:	462c      	mov	r4, r5
	for (int y = 0; y < 8; y++) {
 8006f0a:	e021      	b.n	8006f50 <GPS_parse+0x4c>
			line[z] = 0;
 8006f0c:	4a13      	ldr	r2, [pc, #76]	; (8006f5c <GPS_parse+0x58>)
 8006f0e:	2100      	movs	r1, #0
 8006f10:	54d1      	strb	r1, [r2, r3]
		for (int z = 0; z < MINMEA_MAX_LENGTH; z++) {
 8006f12:	3301      	adds	r3, #1
 8006f14:	2b4f      	cmp	r3, #79	; 0x4f
 8006f16:	ddf9      	ble.n	8006f0c <GPS_parse+0x8>
		if (GPS_RX_Buffer[i] == 0x24) {
 8006f18:	4621      	mov	r1, r4
 8006f1a:	4b11      	ldr	r3, [pc, #68]	; (8006f60 <GPS_parse+0x5c>)
 8006f1c:	5d1b      	ldrb	r3, [r3, r4]
 8006f1e:	2b24      	cmp	r3, #36	; 0x24
 8006f20:	d003      	beq.n	8006f2a <GPS_parse+0x26>
		for (int j = 0; j <= (i - last_i); j++) {
 8006f22:	2300      	movs	r3, #0
 8006f24:	e00c      	b.n	8006f40 <GPS_parse+0x3c>
				i++;
 8006f26:	3401      	adds	r4, #1
 8006f28:	b2a4      	uxth	r4, r4
			while (GPS_RX_Buffer[i] != 0x0A) {
 8006f2a:	4b0d      	ldr	r3, [pc, #52]	; (8006f60 <GPS_parse+0x5c>)
 8006f2c:	5d1b      	ldrb	r3, [r3, r4]
 8006f2e:	2b0a      	cmp	r3, #10
 8006f30:	d1f9      	bne.n	8006f26 <GPS_parse+0x22>
 8006f32:	e7f6      	b.n	8006f22 <GPS_parse+0x1e>
			line[j] = GPS_RX_Buffer[j + last_i];
 8006f34:	18ca      	adds	r2, r1, r3
 8006f36:	480a      	ldr	r0, [pc, #40]	; (8006f60 <GPS_parse+0x5c>)
 8006f38:	5c80      	ldrb	r0, [r0, r2]
 8006f3a:	4a08      	ldr	r2, [pc, #32]	; (8006f5c <GPS_parse+0x58>)
 8006f3c:	54d0      	strb	r0, [r2, r3]
		for (int j = 0; j <= (i - last_i); j++) {
 8006f3e:	3301      	adds	r3, #1
 8006f40:	1a62      	subs	r2, r4, r1
 8006f42:	429a      	cmp	r2, r3
 8006f44:	daf6      	bge.n	8006f34 <GPS_parse+0x30>
		parse_sentence();
 8006f46:	f7ff ff1f 	bl	8006d88 <parse_sentence>
		i++;
 8006f4a:	3401      	adds	r4, #1
 8006f4c:	b2a4      	uxth	r4, r4
	for (int y = 0; y < 8; y++) {
 8006f4e:	3501      	adds	r5, #1
 8006f50:	2d07      	cmp	r5, #7
 8006f52:	dc01      	bgt.n	8006f58 <GPS_parse+0x54>
		for (int z = 0; z < MINMEA_MAX_LENGTH; z++) {
 8006f54:	2300      	movs	r3, #0
 8006f56:	e7dd      	b.n	8006f14 <GPS_parse+0x10>
}
 8006f58:	bd38      	pop	{r3, r4, r5, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20004480 	.word	0x20004480
 8006f60:	200044d0 	.word	0x200044d0

08006f64 <UART_timeout>:
void UART_timeout() {
 8006f64:	b508      	push	{r3, lr}
		if (GPS_RX_Buffer[0] == 0x24) {
 8006f66:	4b0b      	ldr	r3, [pc, #44]	; (8006f94 <UART_timeout+0x30>)
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	2b24      	cmp	r3, #36	; 0x24
 8006f6c:	d001      	beq.n	8006f72 <UART_timeout+0xe>
void UART_timeout() {
 8006f6e:	2300      	movs	r3, #0
 8006f70:	e006      	b.n	8006f80 <UART_timeout+0x1c>
			GPS_parse();
 8006f72:	f7ff ffc7 	bl	8006f04 <GPS_parse>
 8006f76:	e7fa      	b.n	8006f6e <UART_timeout+0xa>
			GPS_RX_Buffer[i] = 0;
 8006f78:	4a06      	ldr	r2, [pc, #24]	; (8006f94 <UART_timeout+0x30>)
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < GPS_BUFFERSIZE; ++i) {
 8006f7e:	3301      	adds	r3, #1
 8006f80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f84:	dbf8      	blt.n	8006f78 <UART_timeout+0x14>
	HAL_UART_Receive_DMA(&huart6, GPS_RX_Buffer, GPS_BUFFERSIZE);
 8006f86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f8a:	4902      	ldr	r1, [pc, #8]	; (8006f94 <UART_timeout+0x30>)
 8006f8c:	4802      	ldr	r0, [pc, #8]	; (8006f98 <UART_timeout+0x34>)
 8006f8e:	f7fd faa9 	bl	80044e4 <HAL_UART_Receive_DMA>
}
 8006f92:	bd08      	pop	{r3, pc}
 8006f94:	200044d0 	.word	0x200044d0
 8006f98:	20004a50 	.word	0x20004a50

08006f9c <getGPSData>:

void getGPSData(uint8_t *ack_payload_1) {
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	4604      	mov	r4, r0

	//Goto element [1]
	ack_payload_1++;

	//[1] = no of sattelites tracked
	*ack_payload_1 = GPS.sattelite_no;
 8006fa0:	4d24      	ldr	r5, [pc, #144]	; (8007034 <getGPSData+0x98>)
 8006fa2:	7e2b      	ldrb	r3, [r5, #24]
 8006fa4:	7043      	strb	r3, [r0, #1]
	ack_payload_1++;
	//[2] = Fix quality
	*ack_payload_1 = GPS.fix_quality;
 8006fa6:	7e6b      	ldrb	r3, [r5, #25]
 8006fa8:	7083      	strb	r3, [r0, #2]
	ack_payload_1++;
	//[3] = Day
	*ack_payload_1 = GPS.Day;
 8006faa:	782b      	ldrb	r3, [r5, #0]
 8006fac:	70c3      	strb	r3, [r0, #3]
	ack_payload_1++;
	//[4] = Month
	*ack_payload_1 = GPS.Month;
 8006fae:	786b      	ldrb	r3, [r5, #1]
 8006fb0:	7103      	strb	r3, [r0, #4]
	ack_payload_1++;
	//[5] = Year
	*ack_payload_1 = GPS.Year;
 8006fb2:	78ab      	ldrb	r3, [r5, #2]
 8006fb4:	7143      	strb	r3, [r0, #5]
	ack_payload_1++;
	//[6] = Hour
	*ack_payload_1 = GPS.Hours;
 8006fb6:	78eb      	ldrb	r3, [r5, #3]
 8006fb8:	7183      	strb	r3, [r0, #6]
	ack_payload_1++;
	//[7] = Minutes
	*ack_payload_1 = GPS.Minutes;
 8006fba:	792b      	ldrb	r3, [r5, #4]
 8006fbc:	71c3      	strb	r3, [r0, #7]
	ack_payload_1++;
	//[8] = Seconds
	*ack_payload_1 = GPS.Seconds;
 8006fbe:	796b      	ldrb	r3, [r5, #5]
 8006fc0:	7203      	strb	r3, [r0, #8]
	ack_payload_1++;

	//[9] - [10] = GPS speed in KM/H
	int16_t GPS_speed_tx = round(GPS.Speed * 100);
 8006fc2:	ed95 7a04 	vldr	s14, [r5, #16]
 8006fc6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007038 <getGPSData+0x9c>
 8006fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fce:	ee17 0a90 	vmov	r0, s15
 8006fd2:	f7f9 fad1 	bl	8000578 <__aeabi_f2d>
 8006fd6:	ec41 0b10 	vmov	d0, r0, r1
 8006fda:	f000 fd25 	bl	8007a28 <round>
 8006fde:	ec51 0b10 	vmov	r0, r1, d0
 8006fe2:	f7f9 fdd1 	bl	8000b88 <__aeabi_d2iz>
 8006fe6:	b200      	sxth	r0, r0
	*ack_payload_1 = GPS_speed_tx;
 8006fe8:	7260      	strb	r0, [r4, #9]
	ack_payload_1++;
	*ack_payload_1 = GPS_speed_tx >> 8;
 8006fea:	1200      	asrs	r0, r0, #8
 8006fec:	72a0      	strb	r0, [r4, #10]
	ack_payload_1++;

	//[11] - [14] = Longitude
	unsigned char temp[sizeof(float)];
	memcpy(temp, &GPS.Longitude, sizeof(float));
 8006fee:	68ab      	ldr	r3, [r5, #8]

	*ack_payload_1 = temp[0];
 8006ff0:	72e3      	strb	r3, [r4, #11]
	ack_payload_1++;
	*ack_payload_1 = temp[1];
 8006ff2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006ff6:	7322      	strb	r2, [r4, #12]
	ack_payload_1++;
	*ack_payload_1 = temp[2];
 8006ff8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8006ffc:	7362      	strb	r2, [r4, #13]
	ack_payload_1++;
	*ack_payload_1 = temp[3];
 8006ffe:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8007002:	73a3      	strb	r3, [r4, #14]
	ack_payload_1++;

	//[15] - [18] = Longitude
	memcpy(temp, &GPS.Latitude, sizeof(GPS.Latitude));
 8007004:	68eb      	ldr	r3, [r5, #12]

	*ack_payload_1 = temp[0];
 8007006:	73e3      	strb	r3, [r4, #15]
	ack_payload_1++;
	*ack_payload_1 = temp[1];
 8007008:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800700c:	7422      	strb	r2, [r4, #16]
	ack_payload_1++;
	*ack_payload_1 = temp[2];
 800700e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007012:	7462      	strb	r2, [r4, #17]
	ack_payload_1++;
	*ack_payload_1 = temp[3];
 8007014:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8007018:	74a3      	strb	r3, [r4, #18]
	ack_payload_1++;

	//[19] - [22] = Longitude
	memcpy(temp, &GPS.Altitude, sizeof(GPS.Altitude));
 800701a:	696b      	ldr	r3, [r5, #20]

	*ack_payload_1 = temp[0];
 800701c:	74e3      	strb	r3, [r4, #19]
	ack_payload_1++;
	*ack_payload_1 = temp[1];
 800701e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007022:	7522      	strb	r2, [r4, #20]
	ack_payload_1++;
	*ack_payload_1 = temp[2];
 8007024:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007028:	7562      	strb	r2, [r4, #21]
	ack_payload_1++;
	*ack_payload_1 = temp[3];
 800702a:	f3c3 6307 	ubfx	r3, r3, #24, #8
 800702e:	75a3      	strb	r3, [r4, #22]
	ack_payload_1++;

}
 8007030:	bd38      	pop	{r3, r4, r5, pc}
 8007032:	bf00      	nop
 8007034:	200048b8 	.word	0x200048b8
 8007038:	42c80000 	.word	0x42c80000

0800703c <vApplicationGetIdleTaskMemory>:
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800703c:	4b03      	ldr	r3, [pc, #12]	; (800704c <vApplicationGetIdleTaskMemory+0x10>)
 800703e:	6003      	str	r3, [r0, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8007040:	4b03      	ldr	r3, [pc, #12]	; (8007050 <vApplicationGetIdleTaskMemory+0x14>)
 8007042:	600b      	str	r3, [r1, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8007044:	2380      	movs	r3, #128	; 0x80
 8007046:	6013      	str	r3, [r2, #0]
}
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	20004290 	.word	0x20004290
 8007050:	20004090 	.word	0x20004090

08007054 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8007054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007056:	b091      	sub	sp, #68	; 0x44
	osMutexDef(GPSDataMutex);
 8007058:	2700      	movs	r7, #0
 800705a:	970e      	str	r7, [sp, #56]	; 0x38
 800705c:	970f      	str	r7, [sp, #60]	; 0x3c
	GPSDataMutexHandle = osMutexCreate(osMutex(GPSDataMutex));
 800705e:	a80e      	add	r0, sp, #56	; 0x38
 8007060:	f7fe f9fe 	bl	8005460 <osMutexCreate>
 8007064:	4b10      	ldr	r3, [pc, #64]	; (80070a8 <MX_FREERTOS_Init+0x54>)
 8007066:	6018      	str	r0, [r3, #0]
	osThreadDef(ControlLoop, StartControlLoop, osPriorityRealtime, 0, 1024);
 8007068:	4c10      	ldr	r4, [pc, #64]	; (80070ac <MX_FREERTOS_Init+0x58>)
 800706a:	ad07      	add	r5, sp, #28
 800706c:	4626      	mov	r6, r4
 800706e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007072:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8007076:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	ControlLoopHandle = osThreadCreate(osThread(ControlLoop), NULL);
 800707a:	4639      	mov	r1, r7
 800707c:	a807      	add	r0, sp, #28
 800707e:	f7fe f9b0 	bl	80053e2 <osThreadCreate>
 8007082:	4b0b      	ldr	r3, [pc, #44]	; (80070b0 <MX_FREERTOS_Init+0x5c>)
 8007084:	6018      	str	r0, [r3, #0]
	osThreadDef(GPSUpdate, StartGPSUpdate, osPriorityIdle, 0, 128);
 8007086:	466d      	mov	r5, sp
 8007088:	341c      	adds	r4, #28
 800708a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800708c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800708e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007092:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	GPSUpdateHandle = osThreadCreate(osThread(GPSUpdate), NULL);
 8007096:	4639      	mov	r1, r7
 8007098:	4668      	mov	r0, sp
 800709a:	f7fe f9a2 	bl	80053e2 <osThreadCreate>
 800709e:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <MX_FREERTOS_Init+0x60>)
 80070a0:	6018      	str	r0, [r3, #0]
}
 80070a2:	b011      	add	sp, #68	; 0x44
 80070a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070a6:	bf00      	nop
 80070a8:	200048d4 	.word	0x200048d4
 80070ac:	0800bd50 	.word	0x0800bd50
 80070b0:	20004478 	.word	0x20004478
 80070b4:	2000447c 	.word	0x2000447c

080070b8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80070b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070bc:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070be:	2400      	movs	r4, #0
 80070c0:	9405      	str	r4, [sp, #20]
 80070c2:	9406      	str	r4, [sp, #24]
 80070c4:	9407      	str	r4, [sp, #28]
 80070c6:	9408      	str	r4, [sp, #32]
 80070c8:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80070ca:	9400      	str	r4, [sp, #0]
 80070cc:	4b52      	ldr	r3, [pc, #328]	; (8007218 <MX_GPIO_Init+0x160>)
 80070ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070d0:	f042 0204 	orr.w	r2, r2, #4
 80070d4:	631a      	str	r2, [r3, #48]	; 0x30
 80070d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070d8:	f002 0204 	and.w	r2, r2, #4
 80070dc:	9200      	str	r2, [sp, #0]
 80070de:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80070e0:	9401      	str	r4, [sp, #4]
 80070e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070e8:	631a      	str	r2, [r3, #48]	; 0x30
 80070ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070ec:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80070f0:	9201      	str	r2, [sp, #4]
 80070f2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80070f4:	9402      	str	r4, [sp, #8]
 80070f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070f8:	f042 0201 	orr.w	r2, r2, #1
 80070fc:	631a      	str	r2, [r3, #48]	; 0x30
 80070fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007100:	f002 0201 	and.w	r2, r2, #1
 8007104:	9202      	str	r2, [sp, #8]
 8007106:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007108:	9403      	str	r4, [sp, #12]
 800710a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800710c:	f042 0202 	orr.w	r2, r2, #2
 8007110:	631a      	str	r2, [r3, #48]	; 0x30
 8007112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007114:	f002 0202 	and.w	r2, r2, #2
 8007118:	9203      	str	r2, [sp, #12]
 800711a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800711c:	9404      	str	r4, [sp, #16]
 800711e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007120:	f042 0208 	orr.w	r2, r2, #8
 8007124:	631a      	str	r2, [r3, #48]	; 0x30
 8007126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007128:	f003 0308 	and.w	r3, r3, #8
 800712c:	9304      	str	r3, [sp, #16]
 800712e:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8007130:	4f3a      	ldr	r7, [pc, #232]	; (800721c <MX_GPIO_Init+0x164>)
 8007132:	4622      	mov	r2, r4
 8007134:	2120      	movs	r1, #32
 8007136:	4638      	mov	r0, r7
 8007138:	f7fb fc10 	bl	800295c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800713c:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 800722c <MX_GPIO_Init+0x174>
 8007140:	4622      	mov	r2, r4
 8007142:	2120      	movs	r1, #32
 8007144:	4648      	mov	r0, r9
 8007146:	f7fb fc09 	bl	800295c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 800714a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8007230 <MX_GPIO_Init+0x178>
 800714e:	4622      	mov	r2, r4
 8007150:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8007154:	4640      	mov	r0, r8
 8007156:	f7fb fc01 	bl	800295c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC3 PC4 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 800715a:	f64f 731b 	movw	r3, #65307	; 0xff1b
 800715e:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007160:	2503      	movs	r5, #3
 8007162:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007164:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007166:	a905      	add	r1, sp, #20
 8007168:	4648      	mov	r0, r9
 800716a:	f7fb fb25 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800716e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007170:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007172:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007174:	a905      	add	r1, sp, #20
 8007176:	482a      	ldr	r0, [pc, #168]	; (8007220 <MX_GPIO_Init+0x168>)
 8007178:	f7fb fb1e 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA6 PA7 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800717c:	f649 63df 	movw	r3, #40671	; 0x9edf
 8007180:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007182:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007184:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007186:	a905      	add	r1, sp, #20
 8007188:	4638      	mov	r0, r7
 800718a:	f7fb fb15 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800718e:	f04f 0a20 	mov.w	sl, #32
 8007192:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007196:	2601      	movs	r6, #1
 8007198:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800719a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800719c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800719e:	a905      	add	r1, sp, #20
 80071a0:	4638      	mov	r0, r7
 80071a2:	f7fb fb09 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80071a6:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80071aa:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ac:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071ae:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071b0:	a905      	add	r1, sp, #20
 80071b2:	4648      	mov	r0, r9
 80071b4:	f7fb fb00 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4 
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 80071b8:	2337      	movs	r3, #55	; 0x37
 80071ba:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80071bc:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071be:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071c0:	a905      	add	r1, sp, #20
 80071c2:	4640      	mov	r0, r8
 80071c4:	f7fb faf8 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80071c8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80071cc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80071ce:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071d0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071d2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071d4:	a905      	add	r1, sp, #20
 80071d6:	4640      	mov	r0, r8
 80071d8:	f7fb faee 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_INT_Pin;
 80071dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071e0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80071e2:	4b10      	ldr	r3, [pc, #64]	; (8007224 <MX_GPIO_Init+0x16c>)
 80071e4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071e6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PWM_INT_GPIO_Port, &GPIO_InitStruct);
 80071e8:	a905      	add	r1, sp, #20
 80071ea:	4638      	mov	r0, r7
 80071ec:	f7fb fae4 	bl	80027b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80071f0:	2304      	movs	r3, #4
 80071f2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80071f4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071f6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80071f8:	a905      	add	r1, sp, #20
 80071fa:	480b      	ldr	r0, [pc, #44]	; (8007228 <MX_GPIO_Init+0x170>)
 80071fc:	f7fb fadc 	bl	80027b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8007200:	4622      	mov	r2, r4
 8007202:	4631      	mov	r1, r6
 8007204:	2017      	movs	r0, #23
 8007206:	f7fa feef 	bl	8001fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800720a:	2017      	movs	r0, #23
 800720c:	f7fa ff20 	bl	8002050 <HAL_NVIC_EnableIRQ>

}
 8007210:	b00a      	add	sp, #40	; 0x28
 8007212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007216:	bf00      	nop
 8007218:	40023800 	.word	0x40023800
 800721c:	40020000 	.word	0x40020000
 8007220:	40021c00 	.word	0x40021c00
 8007224:	10110000 	.word	0x10110000
 8007228:	40020c00 	.word	0x40020c00
 800722c:	40020800 	.word	0x40020800
 8007230:	40020400 	.word	0x40020400

08007234 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007234:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8007236:	480b      	ldr	r0, [pc, #44]	; (8007264 <MX_I2C2_Init+0x30>)
 8007238:	4b0b      	ldr	r3, [pc, #44]	; (8007268 <MX_I2C2_Init+0x34>)
 800723a:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800723c:	4b0b      	ldr	r3, [pc, #44]	; (800726c <MX_I2C2_Init+0x38>)
 800723e:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007240:	2300      	movs	r3, #0
 8007242:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8007244:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007246:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800724a:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800724c:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800724e:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007250:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007252:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007254:	f7fb fb98 	bl	8002988 <HAL_I2C_Init>
 8007258:	b900      	cbnz	r0, 800725c <MX_I2C2_Init+0x28>
  {
    Error_Handler();
  }

}
 800725a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800725c:	f000 f8c4 	bl	80073e8 <Error_Handler>
}
 8007260:	e7fb      	b.n	800725a <MX_I2C2_Init+0x26>
 8007262:	bf00      	nop
 8007264:	20004310 	.word	0x20004310
 8007268:	40005800 	.word	0x40005800
 800726c:	00061a80 	.word	0x00061a80

08007270 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007274:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007276:	2300      	movs	r3, #0
 8007278:	9303      	str	r3, [sp, #12]
 800727a:	9304      	str	r3, [sp, #16]
 800727c:	9305      	str	r3, [sp, #20]
 800727e:	9306      	str	r3, [sp, #24]
 8007280:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C2)
 8007282:	6802      	ldr	r2, [r0, #0]
 8007284:	4b1e      	ldr	r3, [pc, #120]	; (8007300 <HAL_I2C_MspInit+0x90>)
 8007286:	429a      	cmp	r2, r3
 8007288:	d002      	beq.n	8007290 <HAL_I2C_MspInit+0x20>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800728a:	b009      	add	sp, #36	; 0x24
 800728c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007290:	2500      	movs	r5, #0
 8007292:	9501      	str	r5, [sp, #4]
 8007294:	4c1b      	ldr	r4, [pc, #108]	; (8007304 <HAL_I2C_MspInit+0x94>)
 8007296:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007298:	f043 0302 	orr.w	r3, r3, #2
 800729c:	6323      	str	r3, [r4, #48]	; 0x30
 800729e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	9301      	str	r3, [sp, #4]
 80072a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80072a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80072ae:	f04f 0912 	mov.w	r9, #18
 80072b2:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80072b6:	f04f 0801 	mov.w	r8, #1
 80072ba:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072be:	2703      	movs	r7, #3
 80072c0:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80072c2:	2304      	movs	r3, #4
 80072c4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072c6:	4e10      	ldr	r6, [pc, #64]	; (8007308 <HAL_I2C_MspInit+0x98>)
 80072c8:	a903      	add	r1, sp, #12
 80072ca:	4630      	mov	r0, r6
 80072cc:	f7fb fa74 	bl	80027b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80072d0:	2308      	movs	r3, #8
 80072d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80072d4:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80072d8:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072dc:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80072de:	2309      	movs	r3, #9
 80072e0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072e2:	a903      	add	r1, sp, #12
 80072e4:	4630      	mov	r0, r6
 80072e6:	f7fb fa67 	bl	80027b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80072ea:	9502      	str	r5, [sp, #8]
 80072ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80072f2:	6423      	str	r3, [r4, #64]	; 0x40
 80072f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072fa:	9302      	str	r3, [sp, #8]
 80072fc:	9b02      	ldr	r3, [sp, #8]
}
 80072fe:	e7c4      	b.n	800728a <HAL_I2C_MspInit+0x1a>
 8007300:	40005800 	.word	0x40005800
 8007304:	40023800 	.word	0x40023800
 8007308:	40020400 	.word	0x40020400

0800730c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800730c:	b530      	push	{r4, r5, lr}
 800730e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007310:	2230      	movs	r2, #48	; 0x30
 8007312:	2100      	movs	r1, #0
 8007314:	a808      	add	r0, sp, #32
 8007316:	f000 fc2a 	bl	8007b6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800731a:	2400      	movs	r4, #0
 800731c:	9403      	str	r4, [sp, #12]
 800731e:	9404      	str	r4, [sp, #16]
 8007320:	9405      	str	r4, [sp, #20]
 8007322:	9406      	str	r4, [sp, #24]
 8007324:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007326:	9401      	str	r4, [sp, #4]
 8007328:	4b1a      	ldr	r3, [pc, #104]	; (8007394 <SystemClock_Config+0x88>)
 800732a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800732c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007330:	641a      	str	r2, [r3, #64]	; 0x40
 8007332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007338:	9301      	str	r3, [sp, #4]
 800733a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800733c:	9402      	str	r4, [sp, #8]
 800733e:	4b16      	ldr	r3, [pc, #88]	; (8007398 <SystemClock_Config+0x8c>)
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800734e:	9302      	str	r3, [sp, #8]
 8007350:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007352:	2502      	movs	r5, #2
 8007354:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007356:	2301      	movs	r3, #1
 8007358:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800735a:	2310      	movs	r3, #16
 800735c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800735e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007360:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007362:	2308      	movs	r3, #8
 8007364:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8007366:	2364      	movs	r3, #100	; 0x64
 8007368:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800736a:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800736c:	2304      	movs	r3, #4
 800736e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007370:	a808      	add	r0, sp, #32
 8007372:	f7fb fbd9 	bl	8002b28 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007376:	230f      	movs	r3, #15
 8007378:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800737a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800737c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800737e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007382:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007384:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8007386:	2103      	movs	r1, #3
 8007388:	a803      	add	r0, sp, #12
 800738a:	f7fb fe05 	bl	8002f98 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800738e:	b015      	add	sp, #84	; 0x54
 8007390:	bd30      	pop	{r4, r5, pc}
 8007392:	bf00      	nop
 8007394:	40023800 	.word	0x40023800
 8007398:	40007000 	.word	0x40007000

0800739c <main>:
{
 800739c:	b508      	push	{r3, lr}
  HAL_Init();
 800739e:	f7fa fdd1 	bl	8001f44 <HAL_Init>
  SystemClock_Config();
 80073a2:	f7ff ffb3 	bl	800730c <SystemClock_Config>
  MX_GPIO_Init();
 80073a6:	f7ff fe87 	bl	80070b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80073aa:	f7ff fcab 	bl	8006d04 <MX_DMA_Init>
  MX_I2C2_Init();
 80073ae:	f7ff ff41 	bl	8007234 <MX_I2C2_Init>
  MX_TIM4_Init();
 80073b2:	f000 fa13 	bl	80077dc <MX_TIM4_Init>
  MX_SPI2_Init();
 80073b6:	f000 f819 	bl	80073ec <MX_SPI2_Init>
  MX_CRC_Init();
 80073ba:	f7ff fc7b 	bl	8006cb4 <MX_CRC_Init>
  MX_TIM11_Init();
 80073be:	f000 f999 	bl	80076f4 <MX_TIM11_Init>
  MX_USART6_UART_Init();
 80073c2:	f000 fa69 	bl	8007898 <MX_USART6_UART_Init>
  MX_FREERTOS_Init();
 80073c6:	f7ff fe45 	bl	8007054 <MX_FREERTOS_Init>
  osKernelStart();
 80073ca:	f7fe f805 	bl	80053d8 <osKernelStart>
 80073ce:	e7fe      	b.n	80073ce <main+0x32>

080073d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80073d2:	6802      	ldr	r2, [r0, #0]
 80073d4:	4b03      	ldr	r3, [pc, #12]	; (80073e4 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d000      	beq.n	80073dc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80073da:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80073dc:	f7fa fdcc 	bl	8001f78 <HAL_IncTick>
}
 80073e0:	e7fb      	b.n	80073da <HAL_TIM_PeriodElapsedCallback+0xa>
 80073e2:	bf00      	nop
 80073e4:	40010000 	.word	0x40010000

080073e8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80073e8:	4770      	bx	lr
	...

080073ec <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80073ec:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 80073ee:	480e      	ldr	r0, [pc, #56]	; (8007428 <MX_SPI2_Init+0x3c>)
 80073f0:	4b0e      	ldr	r3, [pc, #56]	; (800742c <MX_SPI2_Init+0x40>)
 80073f2:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80073f4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80073f8:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80073fa:	2300      	movs	r3, #0
 80073fc:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80073fe:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007400:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007402:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007408:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800740a:	2220      	movs	r2, #32
 800740c:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800740e:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007410:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007412:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007414:	230a      	movs	r3, #10
 8007416:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007418:	f7fb ff76 	bl	8003308 <HAL_SPI_Init>
 800741c:	b900      	cbnz	r0, 8007420 <MX_SPI2_Init+0x34>
  {
    Error_Handler();
  }

}
 800741e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007420:	f7ff ffe2 	bl	80073e8 <Error_Handler>
}
 8007424:	e7fb      	b.n	800741e <MX_SPI2_Init+0x32>
 8007426:	bf00      	nop
 8007428:	200048d8 	.word	0x200048d8
 800742c:	40003800 	.word	0x40003800

08007430 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007432:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007434:	2300      	movs	r3, #0
 8007436:	9303      	str	r3, [sp, #12]
 8007438:	9304      	str	r3, [sp, #16]
 800743a:	9305      	str	r3, [sp, #20]
 800743c:	9306      	str	r3, [sp, #24]
 800743e:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8007440:	6802      	ldr	r2, [r0, #0]
 8007442:	4b23      	ldr	r3, [pc, #140]	; (80074d0 <HAL_SPI_MspInit+0xa0>)
 8007444:	429a      	cmp	r2, r3
 8007446:	d001      	beq.n	800744c <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007448:	b009      	add	sp, #36	; 0x24
 800744a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800744c:	2400      	movs	r4, #0
 800744e:	9400      	str	r4, [sp, #0]
 8007450:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8007454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800745a:	641a      	str	r2, [r3, #64]	; 0x40
 800745c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800745e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007462:	9200      	str	r2, [sp, #0]
 8007464:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007466:	9401      	str	r4, [sp, #4]
 8007468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800746a:	f042 0204 	orr.w	r2, r2, #4
 800746e:	631a      	str	r2, [r3, #48]	; 0x30
 8007470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007472:	f002 0204 	and.w	r2, r2, #4
 8007476:	9201      	str	r2, [sp, #4]
 8007478:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800747a:	9402      	str	r4, [sp, #8]
 800747c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800747e:	f042 0202 	orr.w	r2, r2, #2
 8007482:	631a      	str	r2, [r3, #48]	; 0x30
 8007484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	9302      	str	r3, [sp, #8]
 800748c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800748e:	2304      	movs	r3, #4
 8007490:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007492:	2702      	movs	r7, #2
 8007494:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007496:	2603      	movs	r6, #3
 8007498:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800749a:	2505      	movs	r5, #5
 800749c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800749e:	a903      	add	r1, sp, #12
 80074a0:	480c      	ldr	r0, [pc, #48]	; (80074d4 <HAL_SPI_MspInit+0xa4>)
 80074a2:	f7fb f989 	bl	80027b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80074a6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80074aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074ac:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ae:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074b0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80074b2:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074b4:	a903      	add	r1, sp, #12
 80074b6:	4808      	ldr	r0, [pc, #32]	; (80074d8 <HAL_SPI_MspInit+0xa8>)
 80074b8:	f7fb f97e 	bl	80027b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80074bc:	4622      	mov	r2, r4
 80074be:	4629      	mov	r1, r5
 80074c0:	2024      	movs	r0, #36	; 0x24
 80074c2:	f7fa fd91 	bl	8001fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80074c6:	2024      	movs	r0, #36	; 0x24
 80074c8:	f7fa fdc2 	bl	8002050 <HAL_NVIC_EnableIRQ>
}
 80074cc:	e7bc      	b.n	8007448 <HAL_SPI_MspInit+0x18>
 80074ce:	bf00      	nop
 80074d0:	40003800 	.word	0x40003800
 80074d4:	40020800 	.word	0x40020800
 80074d8:	40020400 	.word	0x40020400

080074dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80074dc:	b510      	push	{r4, lr}
 80074de:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074e0:	2400      	movs	r4, #0
 80074e2:	9400      	str	r4, [sp, #0]
 80074e4:	4b15      	ldr	r3, [pc, #84]	; (800753c <HAL_MspInit+0x60>)
 80074e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074ec:	645a      	str	r2, [r3, #68]	; 0x44
 80074ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074f0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80074f4:	9200      	str	r2, [sp, #0]
 80074f6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80074f8:	9401      	str	r4, [sp, #4]
 80074fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007500:	641a      	str	r2, [r3, #64]	; 0x40
 8007502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007508:	9301      	str	r3, [sp, #4]
 800750a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800750c:	4622      	mov	r2, r4
 800750e:	210f      	movs	r1, #15
 8007510:	f06f 0001 	mvn.w	r0, #1
 8007514:	f7fa fd68 	bl	8001fe8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 2, 0);
 8007518:	4622      	mov	r2, r4
 800751a:	2102      	movs	r1, #2
 800751c:	2004      	movs	r0, #4
 800751e:	f7fa fd63 	bl	8001fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8007522:	2004      	movs	r0, #4
 8007524:	f7fa fd94 	bl	8002050 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 2, 0);
 8007528:	4622      	mov	r2, r4
 800752a:	2102      	movs	r1, #2
 800752c:	2005      	movs	r0, #5
 800752e:	f7fa fd5b 	bl	8001fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8007532:	2005      	movs	r0, #5
 8007534:	f7fa fd8c 	bl	8002050 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007538:	b002      	add	sp, #8
 800753a:	bd10      	pop	{r4, pc}
 800753c:	40023800 	.word	0x40023800

08007540 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007540:	b510      	push	{r4, lr}
 8007542:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8007544:	2200      	movs	r2, #0
 8007546:	4601      	mov	r1, r0
 8007548:	2019      	movs	r0, #25
 800754a:	f7fa fd4d 	bl	8001fe8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800754e:	2019      	movs	r0, #25
 8007550:	f7fa fd7e 	bl	8002050 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007554:	2400      	movs	r4, #0
 8007556:	9401      	str	r4, [sp, #4]
 8007558:	4b13      	ldr	r3, [pc, #76]	; (80075a8 <HAL_InitTick+0x68>)
 800755a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800755c:	f042 0201 	orr.w	r2, r2, #1
 8007560:	645a      	str	r2, [r3, #68]	; 0x44
 8007562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	9301      	str	r3, [sp, #4]
 800756a:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800756c:	a902      	add	r1, sp, #8
 800756e:	a803      	add	r0, sp, #12
 8007570:	f7fb fde4 	bl	800313c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007574:	f7fb fdd2 	bl	800311c <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8007578:	4b0c      	ldr	r3, [pc, #48]	; (80075ac <HAL_InitTick+0x6c>)
 800757a:	fba3 2300 	umull	r2, r3, r3, r0
 800757e:	0c9b      	lsrs	r3, r3, #18
 8007580:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007582:	480b      	ldr	r0, [pc, #44]	; (80075b0 <HAL_InitTick+0x70>)
 8007584:	4a0b      	ldr	r2, [pc, #44]	; (80075b4 <HAL_InitTick+0x74>)
 8007586:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8007588:	f240 32e7 	movw	r2, #999	; 0x3e7
 800758c:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800758e:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8007590:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007592:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8007594:	f7fc fbca 	bl	8003d2c <HAL_TIM_Base_Init>
 8007598:	b110      	cbz	r0, 80075a0 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800759a:	2001      	movs	r0, #1
}
 800759c:	b008      	add	sp, #32
 800759e:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 80075a0:	4803      	ldr	r0, [pc, #12]	; (80075b0 <HAL_InitTick+0x70>)
 80075a2:	f7fc faa3 	bl	8003aec <HAL_TIM_Base_Start_IT>
 80075a6:	e7f9      	b.n	800759c <HAL_InitTick+0x5c>
 80075a8:	40023800 	.word	0x40023800
 80075ac:	431bde83 	.word	0x431bde83
 80075b0:	20004930 	.word	0x20004930
 80075b4:	40010000 	.word	0x40010000

080075b8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80075b8:	4770      	bx	lr

080075ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80075ba:	e7fe      	b.n	80075ba <HardFault_Handler>

080075bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80075bc:	e7fe      	b.n	80075bc <MemManage_Handler>

080075be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80075be:	e7fe      	b.n	80075be <BusFault_Handler>

080075c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80075c0:	e7fe      	b.n	80075c0 <UsageFault_Handler>

080075c2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80075c2:	4770      	bx	lr

080075c4 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80075c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80075c6:	f7fb f821 	bl	800260c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80075ca:	bd08      	pop	{r3, pc}

080075cc <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80075cc:	4770      	bx	lr

080075ce <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80075ce:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80075d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80075d4:	f7fb f9ca 	bl	800296c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80075d8:	bd08      	pop	{r3, pc}
	...

080075dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80075dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80075de:	4802      	ldr	r0, [pc, #8]	; (80075e8 <TIM1_UP_TIM10_IRQHandler+0xc>)
 80075e0:	f7fc fa99 	bl	8003b16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80075e4:	bd08      	pop	{r3, pc}
 80075e6:	bf00      	nop
 80075e8:	20004930 	.word	0x20004930

080075ec <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80075ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80075ee:	4802      	ldr	r0, [pc, #8]	; (80075f8 <SPI2_IRQHandler+0xc>)
 80075f0:	f7fc f960 	bl	80038b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80075f4:	bd08      	pop	{r3, pc}
 80075f6:	bf00      	nop
 80075f8:	200048d8 	.word	0x200048d8

080075fc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80075fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80075fe:	4802      	ldr	r0, [pc, #8]	; (8007608 <DMA2_Stream1_IRQHandler+0xc>)
 8007600:	f7fa fec0 	bl	8002384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8007604:	bd08      	pop	{r3, pc}
 8007606:	bf00      	nop
 8007608:	200049f0 	.word	0x200049f0

0800760c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800760c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800760e:	4802      	ldr	r0, [pc, #8]	; (8007618 <USART6_IRQHandler+0xc>)
 8007610:	f7fd f874 	bl	80046fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
	//UART_timeout();
  /* USER CODE END USART6_IRQn 1 */
}
 8007614:	bd08      	pop	{r3, pc}
 8007616:	bf00      	nop
 8007618:	20004a50 	.word	0x20004a50

0800761c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	460d      	mov	r5, r1
 8007620:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007622:	2400      	movs	r4, #0
 8007624:	e004      	b.n	8007630 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 8007626:	f3af 8000 	nop.w
 800762a:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800762c:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 800762e:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007630:	42b4      	cmp	r4, r6
 8007632:	dbf8      	blt.n	8007626 <_read+0xa>
	}

return len;
}
 8007634:	4630      	mov	r0, r6
 8007636:	bd70      	pop	{r4, r5, r6, pc}

08007638 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007638:	b570      	push	{r4, r5, r6, lr}
 800763a:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800763c:	2400      	movs	r4, #0
 800763e:	e005      	b.n	800764c <_write+0x14>
	{
		__io_putchar(*ptr++);
 8007640:	1c4d      	adds	r5, r1, #1
 8007642:	7808      	ldrb	r0, [r1, #0]
 8007644:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007648:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 800764a:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800764c:	42b4      	cmp	r4, r6
 800764e:	dbf7      	blt.n	8007640 <_write+0x8>
	}
	return len;
}
 8007650:	4630      	mov	r0, r6
 8007652:	bd70      	pop	{r4, r5, r6, pc}

08007654 <_close>:

int _close(int file)
{
	return -1;
}
 8007654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007658:	4770      	bx	lr

0800765a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800765a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800765e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8007660:	2000      	movs	r0, #0
 8007662:	4770      	bx	lr

08007664 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8007664:	2001      	movs	r0, #1
 8007666:	4770      	bx	lr

08007668 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007668:	2000      	movs	r0, #0
 800766a:	4770      	bx	lr

0800766c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800766c:	b508      	push	{r3, lr}
 800766e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007670:	4a0b      	ldr	r2, [pc, #44]	; (80076a0 <_sbrk+0x34>)
 8007672:	6812      	ldr	r2, [r2, #0]
 8007674:	b142      	cbz	r2, 8007688 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8007676:	4a0a      	ldr	r2, [pc, #40]	; (80076a0 <_sbrk+0x34>)
 8007678:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 800767a:	4403      	add	r3, r0
 800767c:	466a      	mov	r2, sp
 800767e:	4293      	cmp	r3, r2
 8007680:	d806      	bhi.n	8007690 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8007682:	4a07      	ldr	r2, [pc, #28]	; (80076a0 <_sbrk+0x34>)
 8007684:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8007686:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8007688:	4a05      	ldr	r2, [pc, #20]	; (80076a0 <_sbrk+0x34>)
 800768a:	4906      	ldr	r1, [pc, #24]	; (80076a4 <_sbrk+0x38>)
 800768c:	6011      	str	r1, [r2, #0]
 800768e:	e7f2      	b.n	8007676 <_sbrk+0xa>
		errno = ENOMEM;
 8007690:	f000 fa14 	bl	8007abc <__errno>
 8007694:	230c      	movs	r3, #12
 8007696:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800769c:	e7f3      	b.n	8007686 <_sbrk+0x1a>
 800769e:	bf00      	nop
 80076a0:	200042e4 	.word	0x200042e4
 80076a4:	20004a98 	.word	0x20004a98

080076a8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80076a8:	490f      	ldr	r1, [pc, #60]	; (80076e8 <SystemInit+0x40>)
 80076aa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80076ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80076b6:	4b0d      	ldr	r3, [pc, #52]	; (80076ec <SystemInit+0x44>)
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	f042 0201 	orr.w	r2, r2, #1
 80076be:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80076c0:	2000      	movs	r0, #0
 80076c2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80076ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80076ce:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80076d0:	4a07      	ldr	r2, [pc, #28]	; (80076f0 <SystemInit+0x48>)
 80076d2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80076da:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80076dc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80076de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076e2:	608b      	str	r3, [r1, #8]
#endif
}
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	e000ed00 	.word	0xe000ed00
 80076ec:	40023800 	.word	0x40023800
 80076f0:	24003010 	.word	0x24003010

080076f4 <MX_TIM11_Init>:
  HAL_TIM_MspPostInit(&htim4);

}
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80076f4:	b508      	push	{r3, lr}

  htim11.Instance = TIM11;
 80076f6:	4809      	ldr	r0, [pc, #36]	; (800771c <MX_TIM11_Init+0x28>)
 80076f8:	4b09      	ldr	r3, [pc, #36]	; (8007720 <MX_TIM11_Init+0x2c>)
 80076fa:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 100;
 80076fc:	2364      	movs	r3, #100	; 0x64
 80076fe:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007700:	2300      	movs	r3, #0
 8007702:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 65535;
 8007704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007708:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800770a:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800770c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800770e:	f7fc fb0d 	bl	8003d2c <HAL_TIM_Base_Init>
 8007712:	b900      	cbnz	r0, 8007716 <MX_TIM11_Init+0x22>
  {
    Error_Handler();
  }

}
 8007714:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007716:	f7ff fe67 	bl	80073e8 <Error_Handler>
}
 800771a:	e7fb      	b.n	8007714 <MX_TIM11_Init+0x20>
 800771c:	200049b0 	.word	0x200049b0
 8007720:	40014800 	.word	0x40014800

08007724 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM4)
 8007724:	6802      	ldr	r2, [r0, #0]
 8007726:	4b09      	ldr	r3, [pc, #36]	; (800774c <HAL_TIM_PWM_MspInit+0x28>)
 8007728:	429a      	cmp	r2, r3
 800772a:	d000      	beq.n	800772e <HAL_TIM_PWM_MspInit+0xa>
 800772c:	4770      	bx	lr
{
 800772e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007730:	2300      	movs	r3, #0
 8007732:	9301      	str	r3, [sp, #4]
 8007734:	4b06      	ldr	r3, [pc, #24]	; (8007750 <HAL_TIM_PWM_MspInit+0x2c>)
 8007736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007738:	f042 0204 	orr.w	r2, r2, #4
 800773c:	641a      	str	r2, [r3, #64]	; 0x40
 800773e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007740:	f003 0304 	and.w	r3, r3, #4
 8007744:	9301      	str	r3, [sp, #4]
 8007746:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8007748:	b002      	add	sp, #8
 800774a:	4770      	bx	lr
 800774c:	40000800 	.word	0x40000800
 8007750:	40023800 	.word	0x40023800

08007754 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM11)
 8007754:	6802      	ldr	r2, [r0, #0]
 8007756:	4b09      	ldr	r3, [pc, #36]	; (800777c <HAL_TIM_Base_MspInit+0x28>)
 8007758:	429a      	cmp	r2, r3
 800775a:	d000      	beq.n	800775e <HAL_TIM_Base_MspInit+0xa>
 800775c:	4770      	bx	lr
{
 800775e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007760:	2300      	movs	r3, #0
 8007762:	9301      	str	r3, [sp, #4]
 8007764:	4b06      	ldr	r3, [pc, #24]	; (8007780 <HAL_TIM_Base_MspInit+0x2c>)
 8007766:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007768:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800776c:	645a      	str	r2, [r3, #68]	; 0x44
 800776e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007774:	9301      	str	r3, [sp, #4]
 8007776:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8007778:	b002      	add	sp, #8
 800777a:	4770      	bx	lr
 800777c:	40014800 	.word	0x40014800
 8007780:	40023800 	.word	0x40023800

08007784 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007784:	b500      	push	{lr}
 8007786:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007788:	2300      	movs	r3, #0
 800778a:	9301      	str	r3, [sp, #4]
 800778c:	9302      	str	r3, [sp, #8]
 800778e:	9303      	str	r3, [sp, #12]
 8007790:	9304      	str	r3, [sp, #16]
 8007792:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM4)
 8007794:	6802      	ldr	r2, [r0, #0]
 8007796:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <HAL_TIM_MspPostInit+0x4c>)
 8007798:	429a      	cmp	r2, r3
 800779a:	d002      	beq.n	80077a2 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800779c:	b007      	add	sp, #28
 800779e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077a2:	2300      	movs	r3, #0
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	4b0b      	ldr	r3, [pc, #44]	; (80077d4 <HAL_TIM_MspPostInit+0x50>)
 80077a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077aa:	f042 0202 	orr.w	r2, r2, #2
 80077ae:	631a      	str	r2, [r3, #48]	; 0x30
 80077b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80077ba:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80077be:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077c0:	2302      	movs	r3, #2
 80077c2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80077c4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077c6:	a901      	add	r1, sp, #4
 80077c8:	4803      	ldr	r0, [pc, #12]	; (80077d8 <HAL_TIM_MspPostInit+0x54>)
 80077ca:	f7fa fff5 	bl	80027b8 <HAL_GPIO_Init>
}
 80077ce:	e7e5      	b.n	800779c <HAL_TIM_MspPostInit+0x18>
 80077d0:	40000800 	.word	0x40000800
 80077d4:	40023800 	.word	0x40023800
 80077d8:	40020400 	.word	0x40020400

080077dc <MX_TIM4_Init>:
{
 80077dc:	b500      	push	{lr}
 80077de:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077e0:	2300      	movs	r3, #0
 80077e2:	9308      	str	r3, [sp, #32]
 80077e4:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80077e6:	9301      	str	r3, [sp, #4]
 80077e8:	9302      	str	r3, [sp, #8]
 80077ea:	9303      	str	r3, [sp, #12]
 80077ec:	9304      	str	r3, [sp, #16]
 80077ee:	9305      	str	r3, [sp, #20]
 80077f0:	9306      	str	r3, [sp, #24]
 80077f2:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 80077f4:	4826      	ldr	r0, [pc, #152]	; (8007890 <MX_TIM4_Init+0xb4>)
 80077f6:	4a27      	ldr	r2, [pc, #156]	; (8007894 <MX_TIM4_Init+0xb8>)
 80077f8:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 9;
 80077fa:	2209      	movs	r2, #9
 80077fc:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077fe:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 20000;
 8007800:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007804:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007806:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007808:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800780a:	f7fc faa8 	bl	8003d5e <HAL_TIM_PWM_Init>
 800780e:	bb68      	cbnz	r0, 800786c <MX_TIM4_Init+0x90>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007810:	2300      	movs	r3, #0
 8007812:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007814:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007816:	a908      	add	r1, sp, #32
 8007818:	481d      	ldr	r0, [pc, #116]	; (8007890 <MX_TIM4_Init+0xb4>)
 800781a:	f7fc fb89 	bl	8003f30 <HAL_TIMEx_MasterConfigSynchronization>
 800781e:	bb40      	cbnz	r0, 8007872 <MX_TIM4_Init+0x96>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007820:	2360      	movs	r3, #96	; 0x60
 8007822:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8007824:	2200      	movs	r2, #0
 8007826:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007828:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800782a:	2304      	movs	r3, #4
 800782c:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800782e:	eb0d 0103 	add.w	r1, sp, r3
 8007832:	4817      	ldr	r0, [pc, #92]	; (8007890 <MX_TIM4_Init+0xb4>)
 8007834:	f7fc fade 	bl	8003df4 <HAL_TIM_PWM_ConfigChannel>
 8007838:	b9f0      	cbnz	r0, 8007878 <MX_TIM4_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800783a:	2204      	movs	r2, #4
 800783c:	eb0d 0102 	add.w	r1, sp, r2
 8007840:	4813      	ldr	r0, [pc, #76]	; (8007890 <MX_TIM4_Init+0xb4>)
 8007842:	f7fc fad7 	bl	8003df4 <HAL_TIM_PWM_ConfigChannel>
 8007846:	b9d0      	cbnz	r0, 800787e <MX_TIM4_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007848:	2208      	movs	r2, #8
 800784a:	a901      	add	r1, sp, #4
 800784c:	4810      	ldr	r0, [pc, #64]	; (8007890 <MX_TIM4_Init+0xb4>)
 800784e:	f7fc fad1 	bl	8003df4 <HAL_TIM_PWM_ConfigChannel>
 8007852:	b9b8      	cbnz	r0, 8007884 <MX_TIM4_Init+0xa8>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007854:	220c      	movs	r2, #12
 8007856:	a901      	add	r1, sp, #4
 8007858:	480d      	ldr	r0, [pc, #52]	; (8007890 <MX_TIM4_Init+0xb4>)
 800785a:	f7fc facb 	bl	8003df4 <HAL_TIM_PWM_ConfigChannel>
 800785e:	b9a0      	cbnz	r0, 800788a <MX_TIM4_Init+0xae>
  HAL_TIM_MspPostInit(&htim4);
 8007860:	480b      	ldr	r0, [pc, #44]	; (8007890 <MX_TIM4_Init+0xb4>)
 8007862:	f7ff ff8f 	bl	8007784 <HAL_TIM_MspPostInit>
}
 8007866:	b00b      	add	sp, #44	; 0x2c
 8007868:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800786c:	f7ff fdbc 	bl	80073e8 <Error_Handler>
 8007870:	e7ce      	b.n	8007810 <MX_TIM4_Init+0x34>
    Error_Handler();
 8007872:	f7ff fdb9 	bl	80073e8 <Error_Handler>
 8007876:	e7d3      	b.n	8007820 <MX_TIM4_Init+0x44>
    Error_Handler();
 8007878:	f7ff fdb6 	bl	80073e8 <Error_Handler>
 800787c:	e7dd      	b.n	800783a <MX_TIM4_Init+0x5e>
    Error_Handler();
 800787e:	f7ff fdb3 	bl	80073e8 <Error_Handler>
 8007882:	e7e1      	b.n	8007848 <MX_TIM4_Init+0x6c>
    Error_Handler();
 8007884:	f7ff fdb0 	bl	80073e8 <Error_Handler>
 8007888:	e7e4      	b.n	8007854 <MX_TIM4_Init+0x78>
    Error_Handler();
 800788a:	f7ff fdad 	bl	80073e8 <Error_Handler>
 800788e:	e7e7      	b.n	8007860 <MX_TIM4_Init+0x84>
 8007890:	20004970 	.word	0x20004970
 8007894:	40000800 	.word	0x40000800

08007898 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8007898:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 800789a:	480d      	ldr	r0, [pc, #52]	; (80078d0 <MX_USART6_UART_Init+0x38>)
 800789c:	4b0d      	ldr	r3, [pc, #52]	; (80078d4 <MX_USART6_UART_Init+0x3c>)
 800789e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 9600;
 80078a0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80078a4:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80078a6:	2300      	movs	r3, #0
 80078a8:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80078aa:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80078ac:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80078ae:	220c      	movs	r2, #12
 80078b0:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80078b2:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80078b4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80078b6:	f7fc fd76 	bl	80043a6 <HAL_UART_Init>
 80078ba:	b930      	cbnz	r0, 80078ca <MX_USART6_UART_Init+0x32>
  {
    Error_Handler();
  }
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 80078bc:	4b04      	ldr	r3, [pc, #16]	; (80078d0 <MX_USART6_UART_Init+0x38>)
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	68d3      	ldr	r3, [r2, #12]
 80078c2:	f043 0310 	orr.w	r3, r3, #16
 80078c6:	60d3      	str	r3, [r2, #12]
}
 80078c8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80078ca:	f7ff fd8d 	bl	80073e8 <Error_Handler>
 80078ce:	e7f5      	b.n	80078bc <MX_USART6_UART_Init+0x24>
 80078d0:	20004a50 	.word	0x20004a50
 80078d4:	40011400 	.word	0x40011400

080078d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80078d8:	b530      	push	{r4, r5, lr}
 80078da:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078dc:	2300      	movs	r3, #0
 80078de:	9303      	str	r3, [sp, #12]
 80078e0:	9304      	str	r3, [sp, #16]
 80078e2:	9305      	str	r3, [sp, #20]
 80078e4:	9306      	str	r3, [sp, #24]
 80078e6:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART6)
 80078e8:	6802      	ldr	r2, [r0, #0]
 80078ea:	4b29      	ldr	r3, [pc, #164]	; (8007990 <HAL_UART_MspInit+0xb8>)
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d001      	beq.n	80078f4 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART6_MspInit 1 */
    // Enable RX idle interrupt, which we use to handle variable-length messages
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_IDLE);
  /* USER CODE END USART6_MspInit 1 */
  }
}
 80078f0:	b009      	add	sp, #36	; 0x24
 80078f2:	bd30      	pop	{r4, r5, pc}
 80078f4:	4604      	mov	r4, r0
    __HAL_RCC_USART6_CLK_ENABLE();
 80078f6:	2500      	movs	r5, #0
 80078f8:	9501      	str	r5, [sp, #4]
 80078fa:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 80078fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007900:	f042 0220 	orr.w	r2, r2, #32
 8007904:	645a      	str	r2, [r3, #68]	; 0x44
 8007906:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007908:	f002 0220 	and.w	r2, r2, #32
 800790c:	9201      	str	r2, [sp, #4]
 800790e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007910:	9502      	str	r5, [sp, #8]
 8007912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007914:	f042 0204 	orr.w	r2, r2, #4
 8007918:	631a      	str	r2, [r3, #48]	; 0x30
 800791a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	9302      	str	r3, [sp, #8]
 8007922:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007924:	23c0      	movs	r3, #192	; 0xc0
 8007926:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007928:	2302      	movs	r3, #2
 800792a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800792c:	2301      	movs	r3, #1
 800792e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007930:	2303      	movs	r3, #3
 8007932:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007934:	2308      	movs	r3, #8
 8007936:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007938:	a903      	add	r1, sp, #12
 800793a:	4816      	ldr	r0, [pc, #88]	; (8007994 <HAL_UART_MspInit+0xbc>)
 800793c:	f7fa ff3c 	bl	80027b8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8007940:	4815      	ldr	r0, [pc, #84]	; (8007998 <HAL_UART_MspInit+0xc0>)
 8007942:	4b16      	ldr	r3, [pc, #88]	; (800799c <HAL_UART_MspInit+0xc4>)
 8007944:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8007946:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 800794a:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800794c:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800794e:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007954:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007956:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007958:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800795a:	61c5      	str	r5, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800795c:	6205      	str	r5, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800795e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8007960:	f7fa fc12 	bl	8002188 <HAL_DMA_Init>
 8007964:	b980      	cbnz	r0, 8007988 <HAL_UART_MspInit+0xb0>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8007966:	4b0c      	ldr	r3, [pc, #48]	; (8007998 <HAL_UART_MspInit+0xc0>)
 8007968:	6363      	str	r3, [r4, #52]	; 0x34
 800796a:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800796c:	2200      	movs	r2, #0
 800796e:	2105      	movs	r1, #5
 8007970:	2047      	movs	r0, #71	; 0x47
 8007972:	f7fa fb39 	bl	8001fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007976:	2047      	movs	r0, #71	; 0x47
 8007978:	f7fa fb6a 	bl	8002050 <HAL_NVIC_EnableIRQ>
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_IDLE);
 800797c:	6822      	ldr	r2, [r4, #0]
 800797e:	68d3      	ldr	r3, [r2, #12]
 8007980:	f043 0310 	orr.w	r3, r3, #16
 8007984:	60d3      	str	r3, [r2, #12]
}
 8007986:	e7b3      	b.n	80078f0 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8007988:	f7ff fd2e 	bl	80073e8 <Error_Handler>
 800798c:	e7eb      	b.n	8007966 <HAL_UART_MspInit+0x8e>
 800798e:	bf00      	nop
 8007990:	40011400 	.word	0x40011400
 8007994:	40020800 	.word	0x40020800
 8007998:	200049f0 	.word	0x200049f0
 800799c:	40026428 	.word	0x40026428

080079a0 <HAL_UART_RxIdleCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxIdleCallback(UART_HandleTypeDef* huart)
{
 80079a0:	b510      	push	{r4, lr}
 80079a2:	4604      	mov	r4, r0
  uint16_t rxXferCount = 0;
  if(huart->hdmarx != NULL)
 80079a4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80079a6:	b168      	cbz	r0, 80079c4 <HAL_UART_RxIdleCallback+0x24>
  {
    DMA_HandleTypeDef *hdma = huart->hdmarx;

    /* Determine how many items of data have been received */
    rxXferCount = huart->RxXferSize - __HAL_DMA_GET_COUNTER(hdma);
 80079a8:	6803      	ldr	r3, [r0, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]

    HAL_DMA_Abort(huart->hdmarx);
 80079ac:	f7fa fc8c 	bl	80022c8 <HAL_DMA_Abort>

    huart->RxXferCount = 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	85e3      	strh	r3, [r4, #46]	; 0x2e
    /* Check if a transmit process is ongoing or not */
    if(huart->gState == HAL_UART_STATE_BUSY_TX_RX)
 80079b4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b23      	cmp	r3, #35	; 0x23
 80079bc:	d005      	beq.n	80079ca <HAL_UART_RxIdleCallback+0x2a>
    {
      huart->gState = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->gState = HAL_UART_STATE_READY;
 80079be:	2320      	movs	r3, #32
 80079c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    }
  }

  UART_timeout();
 80079c4:	f7ff face 	bl	8006f64 <UART_timeout>

}
 80079c8:	bd10      	pop	{r4, pc}
      huart->gState = HAL_UART_STATE_BUSY_TX;
 80079ca:	2321      	movs	r3, #33	; 0x21
 80079cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80079d0:	e7f8      	b.n	80079c4 <HAL_UART_RxIdleCallback+0x24>
	...

080079d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80079d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007a0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80079d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80079da:	e003      	b.n	80079e4 <LoopCopyDataInit>

080079dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80079dc:	4b0c      	ldr	r3, [pc, #48]	; (8007a10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80079de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80079e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80079e2:	3104      	adds	r1, #4

080079e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80079e4:	480b      	ldr	r0, [pc, #44]	; (8007a14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80079e6:	4b0c      	ldr	r3, [pc, #48]	; (8007a18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80079e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80079ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80079ec:	d3f6      	bcc.n	80079dc <CopyDataInit>
  ldr  r2, =_sbss
 80079ee:	4a0b      	ldr	r2, [pc, #44]	; (8007a1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80079f0:	e002      	b.n	80079f8 <LoopFillZerobss>

080079f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80079f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80079f4:	f842 3b04 	str.w	r3, [r2], #4

080079f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80079f8:	4b09      	ldr	r3, [pc, #36]	; (8007a20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80079fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80079fc:	d3f9      	bcc.n	80079f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80079fe:	f7ff fe53 	bl	80076a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007a02:	f000 f861 	bl	8007ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007a06:	f7ff fcc9 	bl	800739c <main>
  bx  lr    
 8007a0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007a0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007a10:	0800c5e8 	.word	0x0800c5e8
  ldr  r0, =_sdata
 8007a14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007a18:	20000214 	.word	0x20000214
  ldr  r2, =_sbss
 8007a1c:	20000218 	.word	0x20000218
  ldr  r3, = _ebss
 8007a20:	20004a94 	.word	0x20004a94

08007a24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007a24:	e7fe      	b.n	8007a24 <ADC_IRQHandler>
	...

08007a28 <round>:
 8007a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2a:	ec57 6b10 	vmov	r6, r7, d0
 8007a2e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8007a32:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8007a36:	2c13      	cmp	r4, #19
 8007a38:	463b      	mov	r3, r7
 8007a3a:	463d      	mov	r5, r7
 8007a3c:	dc17      	bgt.n	8007a6e <round+0x46>
 8007a3e:	2c00      	cmp	r4, #0
 8007a40:	da09      	bge.n	8007a56 <round+0x2e>
 8007a42:	3401      	adds	r4, #1
 8007a44:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8007a48:	d103      	bne.n	8007a52 <round+0x2a>
 8007a4a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007a4e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007a52:	2100      	movs	r1, #0
 8007a54:	e02c      	b.n	8007ab0 <round+0x88>
 8007a56:	4a18      	ldr	r2, [pc, #96]	; (8007ab8 <round+0x90>)
 8007a58:	4122      	asrs	r2, r4
 8007a5a:	4217      	tst	r7, r2
 8007a5c:	d100      	bne.n	8007a60 <round+0x38>
 8007a5e:	b19e      	cbz	r6, 8007a88 <round+0x60>
 8007a60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a64:	4123      	asrs	r3, r4
 8007a66:	442b      	add	r3, r5
 8007a68:	ea23 0302 	bic.w	r3, r3, r2
 8007a6c:	e7f1      	b.n	8007a52 <round+0x2a>
 8007a6e:	2c33      	cmp	r4, #51	; 0x33
 8007a70:	dd0d      	ble.n	8007a8e <round+0x66>
 8007a72:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007a76:	d107      	bne.n	8007a88 <round+0x60>
 8007a78:	4630      	mov	r0, r6
 8007a7a:	4639      	mov	r1, r7
 8007a7c:	ee10 2a10 	vmov	r2, s0
 8007a80:	f7f8 fc1c 	bl	80002bc <__adddf3>
 8007a84:	4606      	mov	r6, r0
 8007a86:	460f      	mov	r7, r1
 8007a88:	ec47 6b10 	vmov	d0, r6, r7
 8007a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a8e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8007a92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a96:	40d0      	lsrs	r0, r2
 8007a98:	4206      	tst	r6, r0
 8007a9a:	d0f5      	beq.n	8007a88 <round+0x60>
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8007aa2:	fa02 f404 	lsl.w	r4, r2, r4
 8007aa6:	1931      	adds	r1, r6, r4
 8007aa8:	bf28      	it	cs
 8007aaa:	189b      	addcs	r3, r3, r2
 8007aac:	ea21 0100 	bic.w	r1, r1, r0
 8007ab0:	461f      	mov	r7, r3
 8007ab2:	460e      	mov	r6, r1
 8007ab4:	e7e8      	b.n	8007a88 <round+0x60>
 8007ab6:	bf00      	nop
 8007ab8:	000fffff 	.word	0x000fffff

08007abc <__errno>:
 8007abc:	4b01      	ldr	r3, [pc, #4]	; (8007ac4 <__errno+0x8>)
 8007abe:	6818      	ldr	r0, [r3, #0]
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	20000044 	.word	0x20000044

08007ac8 <__libc_init_array>:
 8007ac8:	b570      	push	{r4, r5, r6, lr}
 8007aca:	4e0d      	ldr	r6, [pc, #52]	; (8007b00 <__libc_init_array+0x38>)
 8007acc:	4c0d      	ldr	r4, [pc, #52]	; (8007b04 <__libc_init_array+0x3c>)
 8007ace:	1ba4      	subs	r4, r4, r6
 8007ad0:	10a4      	asrs	r4, r4, #2
 8007ad2:	2500      	movs	r5, #0
 8007ad4:	42a5      	cmp	r5, r4
 8007ad6:	d109      	bne.n	8007aec <__libc_init_array+0x24>
 8007ad8:	4e0b      	ldr	r6, [pc, #44]	; (8007b08 <__libc_init_array+0x40>)
 8007ada:	4c0c      	ldr	r4, [pc, #48]	; (8007b0c <__libc_init_array+0x44>)
 8007adc:	f004 f92c 	bl	800bd38 <_init>
 8007ae0:	1ba4      	subs	r4, r4, r6
 8007ae2:	10a4      	asrs	r4, r4, #2
 8007ae4:	2500      	movs	r5, #0
 8007ae6:	42a5      	cmp	r5, r4
 8007ae8:	d105      	bne.n	8007af6 <__libc_init_array+0x2e>
 8007aea:	bd70      	pop	{r4, r5, r6, pc}
 8007aec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007af0:	4798      	blx	r3
 8007af2:	3501      	adds	r5, #1
 8007af4:	e7ee      	b.n	8007ad4 <__libc_init_array+0xc>
 8007af6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007afa:	4798      	blx	r3
 8007afc:	3501      	adds	r5, #1
 8007afe:	e7f2      	b.n	8007ae6 <__libc_init_array+0x1e>
 8007b00:	0800c5e0 	.word	0x0800c5e0
 8007b04:	0800c5e0 	.word	0x0800c5e0
 8007b08:	0800c5e0 	.word	0x0800c5e0
 8007b0c:	0800c5e4 	.word	0x0800c5e4

08007b10 <__locale_ctype_ptr_l>:
 8007b10:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007b14:	4770      	bx	lr
	...

08007b18 <__locale_ctype_ptr>:
 8007b18:	4b04      	ldr	r3, [pc, #16]	; (8007b2c <__locale_ctype_ptr+0x14>)
 8007b1a:	4a05      	ldr	r2, [pc, #20]	; (8007b30 <__locale_ctype_ptr+0x18>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6a1b      	ldr	r3, [r3, #32]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	bf08      	it	eq
 8007b24:	4613      	moveq	r3, r2
 8007b26:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8007b2a:	4770      	bx	lr
 8007b2c:	20000044 	.word	0x20000044
 8007b30:	200000a8 	.word	0x200000a8

08007b34 <__ascii_mbtowc>:
 8007b34:	b082      	sub	sp, #8
 8007b36:	b901      	cbnz	r1, 8007b3a <__ascii_mbtowc+0x6>
 8007b38:	a901      	add	r1, sp, #4
 8007b3a:	b142      	cbz	r2, 8007b4e <__ascii_mbtowc+0x1a>
 8007b3c:	b14b      	cbz	r3, 8007b52 <__ascii_mbtowc+0x1e>
 8007b3e:	7813      	ldrb	r3, [r2, #0]
 8007b40:	600b      	str	r3, [r1, #0]
 8007b42:	7812      	ldrb	r2, [r2, #0]
 8007b44:	1c10      	adds	r0, r2, #0
 8007b46:	bf18      	it	ne
 8007b48:	2001      	movne	r0, #1
 8007b4a:	b002      	add	sp, #8
 8007b4c:	4770      	bx	lr
 8007b4e:	4610      	mov	r0, r2
 8007b50:	e7fb      	b.n	8007b4a <__ascii_mbtowc+0x16>
 8007b52:	f06f 0001 	mvn.w	r0, #1
 8007b56:	e7f8      	b.n	8007b4a <__ascii_mbtowc+0x16>

08007b58 <memcpy>:
 8007b58:	b510      	push	{r4, lr}
 8007b5a:	1e43      	subs	r3, r0, #1
 8007b5c:	440a      	add	r2, r1
 8007b5e:	4291      	cmp	r1, r2
 8007b60:	d100      	bne.n	8007b64 <memcpy+0xc>
 8007b62:	bd10      	pop	{r4, pc}
 8007b64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b6c:	e7f7      	b.n	8007b5e <memcpy+0x6>

08007b6e <memset>:
 8007b6e:	4402      	add	r2, r0
 8007b70:	4603      	mov	r3, r0
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d100      	bne.n	8007b78 <memset+0xa>
 8007b76:	4770      	bx	lr
 8007b78:	f803 1b01 	strb.w	r1, [r3], #1
 8007b7c:	e7f9      	b.n	8007b72 <memset+0x4>

08007b7e <__cvt>:
 8007b7e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b82:	ec55 4b10 	vmov	r4, r5, d0
 8007b86:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007b88:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b8c:	2d00      	cmp	r5, #0
 8007b8e:	460e      	mov	r6, r1
 8007b90:	4691      	mov	r9, r2
 8007b92:	4619      	mov	r1, r3
 8007b94:	bfb8      	it	lt
 8007b96:	4622      	movlt	r2, r4
 8007b98:	462b      	mov	r3, r5
 8007b9a:	f027 0720 	bic.w	r7, r7, #32
 8007b9e:	bfbb      	ittet	lt
 8007ba0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ba4:	461d      	movlt	r5, r3
 8007ba6:	2300      	movge	r3, #0
 8007ba8:	232d      	movlt	r3, #45	; 0x2d
 8007baa:	bfb8      	it	lt
 8007bac:	4614      	movlt	r4, r2
 8007bae:	2f46      	cmp	r7, #70	; 0x46
 8007bb0:	700b      	strb	r3, [r1, #0]
 8007bb2:	d004      	beq.n	8007bbe <__cvt+0x40>
 8007bb4:	2f45      	cmp	r7, #69	; 0x45
 8007bb6:	d100      	bne.n	8007bba <__cvt+0x3c>
 8007bb8:	3601      	adds	r6, #1
 8007bba:	2102      	movs	r1, #2
 8007bbc:	e000      	b.n	8007bc0 <__cvt+0x42>
 8007bbe:	2103      	movs	r1, #3
 8007bc0:	ab03      	add	r3, sp, #12
 8007bc2:	9301      	str	r3, [sp, #4]
 8007bc4:	ab02      	add	r3, sp, #8
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	4632      	mov	r2, r6
 8007bca:	4653      	mov	r3, sl
 8007bcc:	ec45 4b10 	vmov	d0, r4, r5
 8007bd0:	f001 febe 	bl	8009950 <_dtoa_r>
 8007bd4:	2f47      	cmp	r7, #71	; 0x47
 8007bd6:	4680      	mov	r8, r0
 8007bd8:	d102      	bne.n	8007be0 <__cvt+0x62>
 8007bda:	f019 0f01 	tst.w	r9, #1
 8007bde:	d026      	beq.n	8007c2e <__cvt+0xb0>
 8007be0:	2f46      	cmp	r7, #70	; 0x46
 8007be2:	eb08 0906 	add.w	r9, r8, r6
 8007be6:	d111      	bne.n	8007c0c <__cvt+0x8e>
 8007be8:	f898 3000 	ldrb.w	r3, [r8]
 8007bec:	2b30      	cmp	r3, #48	; 0x30
 8007bee:	d10a      	bne.n	8007c06 <__cvt+0x88>
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	4629      	mov	r1, r5
 8007bf8:	f7f8 ff7e 	bl	8000af8 <__aeabi_dcmpeq>
 8007bfc:	b918      	cbnz	r0, 8007c06 <__cvt+0x88>
 8007bfe:	f1c6 0601 	rsb	r6, r6, #1
 8007c02:	f8ca 6000 	str.w	r6, [sl]
 8007c06:	f8da 3000 	ldr.w	r3, [sl]
 8007c0a:	4499      	add	r9, r3
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2300      	movs	r3, #0
 8007c10:	4620      	mov	r0, r4
 8007c12:	4629      	mov	r1, r5
 8007c14:	f7f8 ff70 	bl	8000af8 <__aeabi_dcmpeq>
 8007c18:	b938      	cbnz	r0, 8007c2a <__cvt+0xac>
 8007c1a:	2230      	movs	r2, #48	; 0x30
 8007c1c:	9b03      	ldr	r3, [sp, #12]
 8007c1e:	454b      	cmp	r3, r9
 8007c20:	d205      	bcs.n	8007c2e <__cvt+0xb0>
 8007c22:	1c59      	adds	r1, r3, #1
 8007c24:	9103      	str	r1, [sp, #12]
 8007c26:	701a      	strb	r2, [r3, #0]
 8007c28:	e7f8      	b.n	8007c1c <__cvt+0x9e>
 8007c2a:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c2e:	9b03      	ldr	r3, [sp, #12]
 8007c30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c32:	eba3 0308 	sub.w	r3, r3, r8
 8007c36:	4640      	mov	r0, r8
 8007c38:	6013      	str	r3, [r2, #0]
 8007c3a:	b004      	add	sp, #16
 8007c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007c40 <__exponent>:
 8007c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c42:	2900      	cmp	r1, #0
 8007c44:	4604      	mov	r4, r0
 8007c46:	bfba      	itte	lt
 8007c48:	4249      	neglt	r1, r1
 8007c4a:	232d      	movlt	r3, #45	; 0x2d
 8007c4c:	232b      	movge	r3, #43	; 0x2b
 8007c4e:	2909      	cmp	r1, #9
 8007c50:	f804 2b02 	strb.w	r2, [r4], #2
 8007c54:	7043      	strb	r3, [r0, #1]
 8007c56:	dd20      	ble.n	8007c9a <__exponent+0x5a>
 8007c58:	f10d 0307 	add.w	r3, sp, #7
 8007c5c:	461f      	mov	r7, r3
 8007c5e:	260a      	movs	r6, #10
 8007c60:	fb91 f5f6 	sdiv	r5, r1, r6
 8007c64:	fb06 1115 	mls	r1, r6, r5, r1
 8007c68:	3130      	adds	r1, #48	; 0x30
 8007c6a:	2d09      	cmp	r5, #9
 8007c6c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007c70:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007c74:	4629      	mov	r1, r5
 8007c76:	dc09      	bgt.n	8007c8c <__exponent+0x4c>
 8007c78:	3130      	adds	r1, #48	; 0x30
 8007c7a:	3b02      	subs	r3, #2
 8007c7c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007c80:	42bb      	cmp	r3, r7
 8007c82:	4622      	mov	r2, r4
 8007c84:	d304      	bcc.n	8007c90 <__exponent+0x50>
 8007c86:	1a10      	subs	r0, r2, r0
 8007c88:	b003      	add	sp, #12
 8007c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	e7e7      	b.n	8007c60 <__exponent+0x20>
 8007c90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c94:	f804 2b01 	strb.w	r2, [r4], #1
 8007c98:	e7f2      	b.n	8007c80 <__exponent+0x40>
 8007c9a:	2330      	movs	r3, #48	; 0x30
 8007c9c:	4419      	add	r1, r3
 8007c9e:	7083      	strb	r3, [r0, #2]
 8007ca0:	1d02      	adds	r2, r0, #4
 8007ca2:	70c1      	strb	r1, [r0, #3]
 8007ca4:	e7ef      	b.n	8007c86 <__exponent+0x46>
	...

08007ca8 <_printf_float>:
 8007ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cac:	b08d      	sub	sp, #52	; 0x34
 8007cae:	460c      	mov	r4, r1
 8007cb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007cb4:	4616      	mov	r6, r2
 8007cb6:	461f      	mov	r7, r3
 8007cb8:	4605      	mov	r5, r0
 8007cba:	f003 f8a3 	bl	800ae04 <_localeconv_r>
 8007cbe:	6803      	ldr	r3, [r0, #0]
 8007cc0:	9304      	str	r3, [sp, #16]
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7f8 fa96 	bl	80001f4 <strlen>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	930a      	str	r3, [sp, #40]	; 0x28
 8007ccc:	f8d8 3000 	ldr.w	r3, [r8]
 8007cd0:	9005      	str	r0, [sp, #20]
 8007cd2:	3307      	adds	r3, #7
 8007cd4:	f023 0307 	bic.w	r3, r3, #7
 8007cd8:	f103 0208 	add.w	r2, r3, #8
 8007cdc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007ce0:	f8d4 b000 	ldr.w	fp, [r4]
 8007ce4:	f8c8 2000 	str.w	r2, [r8]
 8007ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007cf0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007cf4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007cf8:	9307      	str	r3, [sp, #28]
 8007cfa:	f8cd 8018 	str.w	r8, [sp, #24]
 8007cfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d02:	4ba7      	ldr	r3, [pc, #668]	; (8007fa0 <_printf_float+0x2f8>)
 8007d04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d08:	f7f8 ff28 	bl	8000b5c <__aeabi_dcmpun>
 8007d0c:	bb70      	cbnz	r0, 8007d6c <_printf_float+0xc4>
 8007d0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d12:	4ba3      	ldr	r3, [pc, #652]	; (8007fa0 <_printf_float+0x2f8>)
 8007d14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d18:	f7f8 ff02 	bl	8000b20 <__aeabi_dcmple>
 8007d1c:	bb30      	cbnz	r0, 8007d6c <_printf_float+0xc4>
 8007d1e:	2200      	movs	r2, #0
 8007d20:	2300      	movs	r3, #0
 8007d22:	4640      	mov	r0, r8
 8007d24:	4649      	mov	r1, r9
 8007d26:	f7f8 fef1 	bl	8000b0c <__aeabi_dcmplt>
 8007d2a:	b110      	cbz	r0, 8007d32 <_printf_float+0x8a>
 8007d2c:	232d      	movs	r3, #45	; 0x2d
 8007d2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d32:	4a9c      	ldr	r2, [pc, #624]	; (8007fa4 <_printf_float+0x2fc>)
 8007d34:	4b9c      	ldr	r3, [pc, #624]	; (8007fa8 <_printf_float+0x300>)
 8007d36:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007d3a:	bf8c      	ite	hi
 8007d3c:	4690      	movhi	r8, r2
 8007d3e:	4698      	movls	r8, r3
 8007d40:	2303      	movs	r3, #3
 8007d42:	f02b 0204 	bic.w	r2, fp, #4
 8007d46:	6123      	str	r3, [r4, #16]
 8007d48:	6022      	str	r2, [r4, #0]
 8007d4a:	f04f 0900 	mov.w	r9, #0
 8007d4e:	9700      	str	r7, [sp, #0]
 8007d50:	4633      	mov	r3, r6
 8007d52:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d54:	4621      	mov	r1, r4
 8007d56:	4628      	mov	r0, r5
 8007d58:	f000 f9e6 	bl	8008128 <_printf_common>
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	f040 808d 	bne.w	8007e7c <_printf_float+0x1d4>
 8007d62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d66:	b00d      	add	sp, #52	; 0x34
 8007d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6c:	4642      	mov	r2, r8
 8007d6e:	464b      	mov	r3, r9
 8007d70:	4640      	mov	r0, r8
 8007d72:	4649      	mov	r1, r9
 8007d74:	f7f8 fef2 	bl	8000b5c <__aeabi_dcmpun>
 8007d78:	b110      	cbz	r0, 8007d80 <_printf_float+0xd8>
 8007d7a:	4a8c      	ldr	r2, [pc, #560]	; (8007fac <_printf_float+0x304>)
 8007d7c:	4b8c      	ldr	r3, [pc, #560]	; (8007fb0 <_printf_float+0x308>)
 8007d7e:	e7da      	b.n	8007d36 <_printf_float+0x8e>
 8007d80:	6861      	ldr	r1, [r4, #4]
 8007d82:	1c4b      	adds	r3, r1, #1
 8007d84:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007d88:	a80a      	add	r0, sp, #40	; 0x28
 8007d8a:	d13e      	bne.n	8007e0a <_printf_float+0x162>
 8007d8c:	2306      	movs	r3, #6
 8007d8e:	6063      	str	r3, [r4, #4]
 8007d90:	2300      	movs	r3, #0
 8007d92:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007d96:	ab09      	add	r3, sp, #36	; 0x24
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	ec49 8b10 	vmov	d0, r8, r9
 8007d9e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007da2:	6022      	str	r2, [r4, #0]
 8007da4:	f8cd a004 	str.w	sl, [sp, #4]
 8007da8:	6861      	ldr	r1, [r4, #4]
 8007daa:	4628      	mov	r0, r5
 8007dac:	f7ff fee7 	bl	8007b7e <__cvt>
 8007db0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007db4:	2b47      	cmp	r3, #71	; 0x47
 8007db6:	4680      	mov	r8, r0
 8007db8:	d109      	bne.n	8007dce <_printf_float+0x126>
 8007dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dbc:	1cd8      	adds	r0, r3, #3
 8007dbe:	db02      	blt.n	8007dc6 <_printf_float+0x11e>
 8007dc0:	6862      	ldr	r2, [r4, #4]
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	dd47      	ble.n	8007e56 <_printf_float+0x1ae>
 8007dc6:	f1aa 0a02 	sub.w	sl, sl, #2
 8007dca:	fa5f fa8a 	uxtb.w	sl, sl
 8007dce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007dd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007dd4:	d824      	bhi.n	8007e20 <_printf_float+0x178>
 8007dd6:	3901      	subs	r1, #1
 8007dd8:	4652      	mov	r2, sl
 8007dda:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007dde:	9109      	str	r1, [sp, #36]	; 0x24
 8007de0:	f7ff ff2e 	bl	8007c40 <__exponent>
 8007de4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007de6:	1813      	adds	r3, r2, r0
 8007de8:	2a01      	cmp	r2, #1
 8007dea:	4681      	mov	r9, r0
 8007dec:	6123      	str	r3, [r4, #16]
 8007dee:	dc02      	bgt.n	8007df6 <_printf_float+0x14e>
 8007df0:	6822      	ldr	r2, [r4, #0]
 8007df2:	07d1      	lsls	r1, r2, #31
 8007df4:	d501      	bpl.n	8007dfa <_printf_float+0x152>
 8007df6:	3301      	adds	r3, #1
 8007df8:	6123      	str	r3, [r4, #16]
 8007dfa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d0a5      	beq.n	8007d4e <_printf_float+0xa6>
 8007e02:	232d      	movs	r3, #45	; 0x2d
 8007e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e08:	e7a1      	b.n	8007d4e <_printf_float+0xa6>
 8007e0a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007e0e:	f000 8177 	beq.w	8008100 <_printf_float+0x458>
 8007e12:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007e16:	d1bb      	bne.n	8007d90 <_printf_float+0xe8>
 8007e18:	2900      	cmp	r1, #0
 8007e1a:	d1b9      	bne.n	8007d90 <_printf_float+0xe8>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e7b6      	b.n	8007d8e <_printf_float+0xe6>
 8007e20:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007e24:	d119      	bne.n	8007e5a <_printf_float+0x1b2>
 8007e26:	2900      	cmp	r1, #0
 8007e28:	6863      	ldr	r3, [r4, #4]
 8007e2a:	dd0c      	ble.n	8007e46 <_printf_float+0x19e>
 8007e2c:	6121      	str	r1, [r4, #16]
 8007e2e:	b913      	cbnz	r3, 8007e36 <_printf_float+0x18e>
 8007e30:	6822      	ldr	r2, [r4, #0]
 8007e32:	07d2      	lsls	r2, r2, #31
 8007e34:	d502      	bpl.n	8007e3c <_printf_float+0x194>
 8007e36:	3301      	adds	r3, #1
 8007e38:	440b      	add	r3, r1
 8007e3a:	6123      	str	r3, [r4, #16]
 8007e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e3e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007e40:	f04f 0900 	mov.w	r9, #0
 8007e44:	e7d9      	b.n	8007dfa <_printf_float+0x152>
 8007e46:	b913      	cbnz	r3, 8007e4e <_printf_float+0x1a6>
 8007e48:	6822      	ldr	r2, [r4, #0]
 8007e4a:	07d0      	lsls	r0, r2, #31
 8007e4c:	d501      	bpl.n	8007e52 <_printf_float+0x1aa>
 8007e4e:	3302      	adds	r3, #2
 8007e50:	e7f3      	b.n	8007e3a <_printf_float+0x192>
 8007e52:	2301      	movs	r3, #1
 8007e54:	e7f1      	b.n	8007e3a <_printf_float+0x192>
 8007e56:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007e5a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	db05      	blt.n	8007e6e <_printf_float+0x1c6>
 8007e62:	6822      	ldr	r2, [r4, #0]
 8007e64:	6123      	str	r3, [r4, #16]
 8007e66:	07d1      	lsls	r1, r2, #31
 8007e68:	d5e8      	bpl.n	8007e3c <_printf_float+0x194>
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	e7e5      	b.n	8007e3a <_printf_float+0x192>
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	bfd4      	ite	le
 8007e72:	f1c3 0302 	rsble	r3, r3, #2
 8007e76:	2301      	movgt	r3, #1
 8007e78:	4413      	add	r3, r2
 8007e7a:	e7de      	b.n	8007e3a <_printf_float+0x192>
 8007e7c:	6823      	ldr	r3, [r4, #0]
 8007e7e:	055a      	lsls	r2, r3, #21
 8007e80:	d407      	bmi.n	8007e92 <_printf_float+0x1ea>
 8007e82:	6923      	ldr	r3, [r4, #16]
 8007e84:	4642      	mov	r2, r8
 8007e86:	4631      	mov	r1, r6
 8007e88:	4628      	mov	r0, r5
 8007e8a:	47b8      	blx	r7
 8007e8c:	3001      	adds	r0, #1
 8007e8e:	d12b      	bne.n	8007ee8 <_printf_float+0x240>
 8007e90:	e767      	b.n	8007d62 <_printf_float+0xba>
 8007e92:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007e96:	f240 80dc 	bls.w	8008052 <_printf_float+0x3aa>
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ea2:	f7f8 fe29 	bl	8000af8 <__aeabi_dcmpeq>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d033      	beq.n	8007f12 <_printf_float+0x26a>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	4a41      	ldr	r2, [pc, #260]	; (8007fb4 <_printf_float+0x30c>)
 8007eae:	4631      	mov	r1, r6
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	47b8      	blx	r7
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	f43f af54 	beq.w	8007d62 <_printf_float+0xba>
 8007eba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	db02      	blt.n	8007ec8 <_printf_float+0x220>
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	07d8      	lsls	r0, r3, #31
 8007ec6:	d50f      	bpl.n	8007ee8 <_printf_float+0x240>
 8007ec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ecc:	4631      	mov	r1, r6
 8007ece:	4628      	mov	r0, r5
 8007ed0:	47b8      	blx	r7
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	f43f af45 	beq.w	8007d62 <_printf_float+0xba>
 8007ed8:	f04f 0800 	mov.w	r8, #0
 8007edc:	f104 091a 	add.w	r9, r4, #26
 8007ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	4543      	cmp	r3, r8
 8007ee6:	dc09      	bgt.n	8007efc <_printf_float+0x254>
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	079b      	lsls	r3, r3, #30
 8007eec:	f100 8103 	bmi.w	80080f6 <_printf_float+0x44e>
 8007ef0:	68e0      	ldr	r0, [r4, #12]
 8007ef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ef4:	4298      	cmp	r0, r3
 8007ef6:	bfb8      	it	lt
 8007ef8:	4618      	movlt	r0, r3
 8007efa:	e734      	b.n	8007d66 <_printf_float+0xbe>
 8007efc:	2301      	movs	r3, #1
 8007efe:	464a      	mov	r2, r9
 8007f00:	4631      	mov	r1, r6
 8007f02:	4628      	mov	r0, r5
 8007f04:	47b8      	blx	r7
 8007f06:	3001      	adds	r0, #1
 8007f08:	f43f af2b 	beq.w	8007d62 <_printf_float+0xba>
 8007f0c:	f108 0801 	add.w	r8, r8, #1
 8007f10:	e7e6      	b.n	8007ee0 <_printf_float+0x238>
 8007f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	dc2b      	bgt.n	8007f70 <_printf_float+0x2c8>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	4a26      	ldr	r2, [pc, #152]	; (8007fb4 <_printf_float+0x30c>)
 8007f1c:	4631      	mov	r1, r6
 8007f1e:	4628      	mov	r0, r5
 8007f20:	47b8      	blx	r7
 8007f22:	3001      	adds	r0, #1
 8007f24:	f43f af1d 	beq.w	8007d62 <_printf_float+0xba>
 8007f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2a:	b923      	cbnz	r3, 8007f36 <_printf_float+0x28e>
 8007f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f2e:	b913      	cbnz	r3, 8007f36 <_printf_float+0x28e>
 8007f30:	6823      	ldr	r3, [r4, #0]
 8007f32:	07d9      	lsls	r1, r3, #31
 8007f34:	d5d8      	bpl.n	8007ee8 <_printf_float+0x240>
 8007f36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f3a:	4631      	mov	r1, r6
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	47b8      	blx	r7
 8007f40:	3001      	adds	r0, #1
 8007f42:	f43f af0e 	beq.w	8007d62 <_printf_float+0xba>
 8007f46:	f04f 0900 	mov.w	r9, #0
 8007f4a:	f104 0a1a 	add.w	sl, r4, #26
 8007f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f50:	425b      	negs	r3, r3
 8007f52:	454b      	cmp	r3, r9
 8007f54:	dc01      	bgt.n	8007f5a <_printf_float+0x2b2>
 8007f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f58:	e794      	b.n	8007e84 <_printf_float+0x1dc>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	4652      	mov	r2, sl
 8007f5e:	4631      	mov	r1, r6
 8007f60:	4628      	mov	r0, r5
 8007f62:	47b8      	blx	r7
 8007f64:	3001      	adds	r0, #1
 8007f66:	f43f aefc 	beq.w	8007d62 <_printf_float+0xba>
 8007f6a:	f109 0901 	add.w	r9, r9, #1
 8007f6e:	e7ee      	b.n	8007f4e <_printf_float+0x2a6>
 8007f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f74:	429a      	cmp	r2, r3
 8007f76:	bfa8      	it	ge
 8007f78:	461a      	movge	r2, r3
 8007f7a:	2a00      	cmp	r2, #0
 8007f7c:	4691      	mov	r9, r2
 8007f7e:	dd07      	ble.n	8007f90 <_printf_float+0x2e8>
 8007f80:	4613      	mov	r3, r2
 8007f82:	4631      	mov	r1, r6
 8007f84:	4642      	mov	r2, r8
 8007f86:	4628      	mov	r0, r5
 8007f88:	47b8      	blx	r7
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	f43f aee9 	beq.w	8007d62 <_printf_float+0xba>
 8007f90:	f104 031a 	add.w	r3, r4, #26
 8007f94:	f04f 0b00 	mov.w	fp, #0
 8007f98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f9c:	9306      	str	r3, [sp, #24]
 8007f9e:	e015      	b.n	8007fcc <_printf_float+0x324>
 8007fa0:	7fefffff 	.word	0x7fefffff
 8007fa4:	0800c2ce 	.word	0x0800c2ce
 8007fa8:	0800c2ca 	.word	0x0800c2ca
 8007fac:	0800c2d6 	.word	0x0800c2d6
 8007fb0:	0800c2d2 	.word	0x0800c2d2
 8007fb4:	0800c2da 	.word	0x0800c2da
 8007fb8:	2301      	movs	r3, #1
 8007fba:	9a06      	ldr	r2, [sp, #24]
 8007fbc:	4631      	mov	r1, r6
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	47b8      	blx	r7
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	f43f aecd 	beq.w	8007d62 <_printf_float+0xba>
 8007fc8:	f10b 0b01 	add.w	fp, fp, #1
 8007fcc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007fd0:	ebaa 0309 	sub.w	r3, sl, r9
 8007fd4:	455b      	cmp	r3, fp
 8007fd6:	dcef      	bgt.n	8007fb8 <_printf_float+0x310>
 8007fd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	44d0      	add	r8, sl
 8007fe0:	db15      	blt.n	800800e <_printf_float+0x366>
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	07da      	lsls	r2, r3, #31
 8007fe6:	d412      	bmi.n	800800e <_printf_float+0x366>
 8007fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fea:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fec:	eba3 020a 	sub.w	r2, r3, sl
 8007ff0:	eba3 0a01 	sub.w	sl, r3, r1
 8007ff4:	4592      	cmp	sl, r2
 8007ff6:	bfa8      	it	ge
 8007ff8:	4692      	movge	sl, r2
 8007ffa:	f1ba 0f00 	cmp.w	sl, #0
 8007ffe:	dc0e      	bgt.n	800801e <_printf_float+0x376>
 8008000:	f04f 0800 	mov.w	r8, #0
 8008004:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008008:	f104 091a 	add.w	r9, r4, #26
 800800c:	e019      	b.n	8008042 <_printf_float+0x39a>
 800800e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008012:	4631      	mov	r1, r6
 8008014:	4628      	mov	r0, r5
 8008016:	47b8      	blx	r7
 8008018:	3001      	adds	r0, #1
 800801a:	d1e5      	bne.n	8007fe8 <_printf_float+0x340>
 800801c:	e6a1      	b.n	8007d62 <_printf_float+0xba>
 800801e:	4653      	mov	r3, sl
 8008020:	4642      	mov	r2, r8
 8008022:	4631      	mov	r1, r6
 8008024:	4628      	mov	r0, r5
 8008026:	47b8      	blx	r7
 8008028:	3001      	adds	r0, #1
 800802a:	d1e9      	bne.n	8008000 <_printf_float+0x358>
 800802c:	e699      	b.n	8007d62 <_printf_float+0xba>
 800802e:	2301      	movs	r3, #1
 8008030:	464a      	mov	r2, r9
 8008032:	4631      	mov	r1, r6
 8008034:	4628      	mov	r0, r5
 8008036:	47b8      	blx	r7
 8008038:	3001      	adds	r0, #1
 800803a:	f43f ae92 	beq.w	8007d62 <_printf_float+0xba>
 800803e:	f108 0801 	add.w	r8, r8, #1
 8008042:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008046:	1a9b      	subs	r3, r3, r2
 8008048:	eba3 030a 	sub.w	r3, r3, sl
 800804c:	4543      	cmp	r3, r8
 800804e:	dcee      	bgt.n	800802e <_printf_float+0x386>
 8008050:	e74a      	b.n	8007ee8 <_printf_float+0x240>
 8008052:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008054:	2a01      	cmp	r2, #1
 8008056:	dc01      	bgt.n	800805c <_printf_float+0x3b4>
 8008058:	07db      	lsls	r3, r3, #31
 800805a:	d53a      	bpl.n	80080d2 <_printf_float+0x42a>
 800805c:	2301      	movs	r3, #1
 800805e:	4642      	mov	r2, r8
 8008060:	4631      	mov	r1, r6
 8008062:	4628      	mov	r0, r5
 8008064:	47b8      	blx	r7
 8008066:	3001      	adds	r0, #1
 8008068:	f43f ae7b 	beq.w	8007d62 <_printf_float+0xba>
 800806c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008070:	4631      	mov	r1, r6
 8008072:	4628      	mov	r0, r5
 8008074:	47b8      	blx	r7
 8008076:	3001      	adds	r0, #1
 8008078:	f108 0801 	add.w	r8, r8, #1
 800807c:	f43f ae71 	beq.w	8007d62 <_printf_float+0xba>
 8008080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008082:	2200      	movs	r2, #0
 8008084:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8008088:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800808c:	2300      	movs	r3, #0
 800808e:	f7f8 fd33 	bl	8000af8 <__aeabi_dcmpeq>
 8008092:	b9c8      	cbnz	r0, 80080c8 <_printf_float+0x420>
 8008094:	4653      	mov	r3, sl
 8008096:	4642      	mov	r2, r8
 8008098:	4631      	mov	r1, r6
 800809a:	4628      	mov	r0, r5
 800809c:	47b8      	blx	r7
 800809e:	3001      	adds	r0, #1
 80080a0:	d10e      	bne.n	80080c0 <_printf_float+0x418>
 80080a2:	e65e      	b.n	8007d62 <_printf_float+0xba>
 80080a4:	2301      	movs	r3, #1
 80080a6:	4652      	mov	r2, sl
 80080a8:	4631      	mov	r1, r6
 80080aa:	4628      	mov	r0, r5
 80080ac:	47b8      	blx	r7
 80080ae:	3001      	adds	r0, #1
 80080b0:	f43f ae57 	beq.w	8007d62 <_printf_float+0xba>
 80080b4:	f108 0801 	add.w	r8, r8, #1
 80080b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ba:	3b01      	subs	r3, #1
 80080bc:	4543      	cmp	r3, r8
 80080be:	dcf1      	bgt.n	80080a4 <_printf_float+0x3fc>
 80080c0:	464b      	mov	r3, r9
 80080c2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80080c6:	e6de      	b.n	8007e86 <_printf_float+0x1de>
 80080c8:	f04f 0800 	mov.w	r8, #0
 80080cc:	f104 0a1a 	add.w	sl, r4, #26
 80080d0:	e7f2      	b.n	80080b8 <_printf_float+0x410>
 80080d2:	2301      	movs	r3, #1
 80080d4:	e7df      	b.n	8008096 <_printf_float+0x3ee>
 80080d6:	2301      	movs	r3, #1
 80080d8:	464a      	mov	r2, r9
 80080da:	4631      	mov	r1, r6
 80080dc:	4628      	mov	r0, r5
 80080de:	47b8      	blx	r7
 80080e0:	3001      	adds	r0, #1
 80080e2:	f43f ae3e 	beq.w	8007d62 <_printf_float+0xba>
 80080e6:	f108 0801 	add.w	r8, r8, #1
 80080ea:	68e3      	ldr	r3, [r4, #12]
 80080ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080ee:	1a9b      	subs	r3, r3, r2
 80080f0:	4543      	cmp	r3, r8
 80080f2:	dcf0      	bgt.n	80080d6 <_printf_float+0x42e>
 80080f4:	e6fc      	b.n	8007ef0 <_printf_float+0x248>
 80080f6:	f04f 0800 	mov.w	r8, #0
 80080fa:	f104 0919 	add.w	r9, r4, #25
 80080fe:	e7f4      	b.n	80080ea <_printf_float+0x442>
 8008100:	2900      	cmp	r1, #0
 8008102:	f43f ae8b 	beq.w	8007e1c <_printf_float+0x174>
 8008106:	2300      	movs	r3, #0
 8008108:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800810c:	ab09      	add	r3, sp, #36	; 0x24
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	ec49 8b10 	vmov	d0, r8, r9
 8008114:	6022      	str	r2, [r4, #0]
 8008116:	f8cd a004 	str.w	sl, [sp, #4]
 800811a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800811e:	4628      	mov	r0, r5
 8008120:	f7ff fd2d 	bl	8007b7e <__cvt>
 8008124:	4680      	mov	r8, r0
 8008126:	e648      	b.n	8007dba <_printf_float+0x112>

08008128 <_printf_common>:
 8008128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800812c:	4691      	mov	r9, r2
 800812e:	461f      	mov	r7, r3
 8008130:	688a      	ldr	r2, [r1, #8]
 8008132:	690b      	ldr	r3, [r1, #16]
 8008134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008138:	4293      	cmp	r3, r2
 800813a:	bfb8      	it	lt
 800813c:	4613      	movlt	r3, r2
 800813e:	f8c9 3000 	str.w	r3, [r9]
 8008142:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008146:	4606      	mov	r6, r0
 8008148:	460c      	mov	r4, r1
 800814a:	b112      	cbz	r2, 8008152 <_printf_common+0x2a>
 800814c:	3301      	adds	r3, #1
 800814e:	f8c9 3000 	str.w	r3, [r9]
 8008152:	6823      	ldr	r3, [r4, #0]
 8008154:	0699      	lsls	r1, r3, #26
 8008156:	bf42      	ittt	mi
 8008158:	f8d9 3000 	ldrmi.w	r3, [r9]
 800815c:	3302      	addmi	r3, #2
 800815e:	f8c9 3000 	strmi.w	r3, [r9]
 8008162:	6825      	ldr	r5, [r4, #0]
 8008164:	f015 0506 	ands.w	r5, r5, #6
 8008168:	d107      	bne.n	800817a <_printf_common+0x52>
 800816a:	f104 0a19 	add.w	sl, r4, #25
 800816e:	68e3      	ldr	r3, [r4, #12]
 8008170:	f8d9 2000 	ldr.w	r2, [r9]
 8008174:	1a9b      	subs	r3, r3, r2
 8008176:	42ab      	cmp	r3, r5
 8008178:	dc28      	bgt.n	80081cc <_printf_common+0xa4>
 800817a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800817e:	6822      	ldr	r2, [r4, #0]
 8008180:	3300      	adds	r3, #0
 8008182:	bf18      	it	ne
 8008184:	2301      	movne	r3, #1
 8008186:	0692      	lsls	r2, r2, #26
 8008188:	d42d      	bmi.n	80081e6 <_printf_common+0xbe>
 800818a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800818e:	4639      	mov	r1, r7
 8008190:	4630      	mov	r0, r6
 8008192:	47c0      	blx	r8
 8008194:	3001      	adds	r0, #1
 8008196:	d020      	beq.n	80081da <_printf_common+0xb2>
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	68e5      	ldr	r5, [r4, #12]
 800819c:	f8d9 2000 	ldr.w	r2, [r9]
 80081a0:	f003 0306 	and.w	r3, r3, #6
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	bf08      	it	eq
 80081a8:	1aad      	subeq	r5, r5, r2
 80081aa:	68a3      	ldr	r3, [r4, #8]
 80081ac:	6922      	ldr	r2, [r4, #16]
 80081ae:	bf0c      	ite	eq
 80081b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081b4:	2500      	movne	r5, #0
 80081b6:	4293      	cmp	r3, r2
 80081b8:	bfc4      	itt	gt
 80081ba:	1a9b      	subgt	r3, r3, r2
 80081bc:	18ed      	addgt	r5, r5, r3
 80081be:	f04f 0900 	mov.w	r9, #0
 80081c2:	341a      	adds	r4, #26
 80081c4:	454d      	cmp	r5, r9
 80081c6:	d11a      	bne.n	80081fe <_printf_common+0xd6>
 80081c8:	2000      	movs	r0, #0
 80081ca:	e008      	b.n	80081de <_printf_common+0xb6>
 80081cc:	2301      	movs	r3, #1
 80081ce:	4652      	mov	r2, sl
 80081d0:	4639      	mov	r1, r7
 80081d2:	4630      	mov	r0, r6
 80081d4:	47c0      	blx	r8
 80081d6:	3001      	adds	r0, #1
 80081d8:	d103      	bne.n	80081e2 <_printf_common+0xba>
 80081da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081e2:	3501      	adds	r5, #1
 80081e4:	e7c3      	b.n	800816e <_printf_common+0x46>
 80081e6:	18e1      	adds	r1, r4, r3
 80081e8:	1c5a      	adds	r2, r3, #1
 80081ea:	2030      	movs	r0, #48	; 0x30
 80081ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081f0:	4422      	add	r2, r4
 80081f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081fa:	3302      	adds	r3, #2
 80081fc:	e7c5      	b.n	800818a <_printf_common+0x62>
 80081fe:	2301      	movs	r3, #1
 8008200:	4622      	mov	r2, r4
 8008202:	4639      	mov	r1, r7
 8008204:	4630      	mov	r0, r6
 8008206:	47c0      	blx	r8
 8008208:	3001      	adds	r0, #1
 800820a:	d0e6      	beq.n	80081da <_printf_common+0xb2>
 800820c:	f109 0901 	add.w	r9, r9, #1
 8008210:	e7d8      	b.n	80081c4 <_printf_common+0x9c>
	...

08008214 <_printf_i>:
 8008214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008218:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800821c:	460c      	mov	r4, r1
 800821e:	7e09      	ldrb	r1, [r1, #24]
 8008220:	b085      	sub	sp, #20
 8008222:	296e      	cmp	r1, #110	; 0x6e
 8008224:	4617      	mov	r7, r2
 8008226:	4606      	mov	r6, r0
 8008228:	4698      	mov	r8, r3
 800822a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800822c:	f000 80b3 	beq.w	8008396 <_printf_i+0x182>
 8008230:	d822      	bhi.n	8008278 <_printf_i+0x64>
 8008232:	2963      	cmp	r1, #99	; 0x63
 8008234:	d036      	beq.n	80082a4 <_printf_i+0x90>
 8008236:	d80a      	bhi.n	800824e <_printf_i+0x3a>
 8008238:	2900      	cmp	r1, #0
 800823a:	f000 80b9 	beq.w	80083b0 <_printf_i+0x19c>
 800823e:	2958      	cmp	r1, #88	; 0x58
 8008240:	f000 8083 	beq.w	800834a <_printf_i+0x136>
 8008244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008248:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800824c:	e032      	b.n	80082b4 <_printf_i+0xa0>
 800824e:	2964      	cmp	r1, #100	; 0x64
 8008250:	d001      	beq.n	8008256 <_printf_i+0x42>
 8008252:	2969      	cmp	r1, #105	; 0x69
 8008254:	d1f6      	bne.n	8008244 <_printf_i+0x30>
 8008256:	6820      	ldr	r0, [r4, #0]
 8008258:	6813      	ldr	r3, [r2, #0]
 800825a:	0605      	lsls	r5, r0, #24
 800825c:	f103 0104 	add.w	r1, r3, #4
 8008260:	d52a      	bpl.n	80082b8 <_printf_i+0xa4>
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6011      	str	r1, [r2, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	da03      	bge.n	8008272 <_printf_i+0x5e>
 800826a:	222d      	movs	r2, #45	; 0x2d
 800826c:	425b      	negs	r3, r3
 800826e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008272:	486f      	ldr	r0, [pc, #444]	; (8008430 <_printf_i+0x21c>)
 8008274:	220a      	movs	r2, #10
 8008276:	e039      	b.n	80082ec <_printf_i+0xd8>
 8008278:	2973      	cmp	r1, #115	; 0x73
 800827a:	f000 809d 	beq.w	80083b8 <_printf_i+0x1a4>
 800827e:	d808      	bhi.n	8008292 <_printf_i+0x7e>
 8008280:	296f      	cmp	r1, #111	; 0x6f
 8008282:	d020      	beq.n	80082c6 <_printf_i+0xb2>
 8008284:	2970      	cmp	r1, #112	; 0x70
 8008286:	d1dd      	bne.n	8008244 <_printf_i+0x30>
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	f043 0320 	orr.w	r3, r3, #32
 800828e:	6023      	str	r3, [r4, #0]
 8008290:	e003      	b.n	800829a <_printf_i+0x86>
 8008292:	2975      	cmp	r1, #117	; 0x75
 8008294:	d017      	beq.n	80082c6 <_printf_i+0xb2>
 8008296:	2978      	cmp	r1, #120	; 0x78
 8008298:	d1d4      	bne.n	8008244 <_printf_i+0x30>
 800829a:	2378      	movs	r3, #120	; 0x78
 800829c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082a0:	4864      	ldr	r0, [pc, #400]	; (8008434 <_printf_i+0x220>)
 80082a2:	e055      	b.n	8008350 <_printf_i+0x13c>
 80082a4:	6813      	ldr	r3, [r2, #0]
 80082a6:	1d19      	adds	r1, r3, #4
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6011      	str	r1, [r2, #0]
 80082ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082b4:	2301      	movs	r3, #1
 80082b6:	e08c      	b.n	80083d2 <_printf_i+0x1be>
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	6011      	str	r1, [r2, #0]
 80082bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80082c0:	bf18      	it	ne
 80082c2:	b21b      	sxthne	r3, r3
 80082c4:	e7cf      	b.n	8008266 <_printf_i+0x52>
 80082c6:	6813      	ldr	r3, [r2, #0]
 80082c8:	6825      	ldr	r5, [r4, #0]
 80082ca:	1d18      	adds	r0, r3, #4
 80082cc:	6010      	str	r0, [r2, #0]
 80082ce:	0628      	lsls	r0, r5, #24
 80082d0:	d501      	bpl.n	80082d6 <_printf_i+0xc2>
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	e002      	b.n	80082dc <_printf_i+0xc8>
 80082d6:	0668      	lsls	r0, r5, #25
 80082d8:	d5fb      	bpl.n	80082d2 <_printf_i+0xbe>
 80082da:	881b      	ldrh	r3, [r3, #0]
 80082dc:	4854      	ldr	r0, [pc, #336]	; (8008430 <_printf_i+0x21c>)
 80082de:	296f      	cmp	r1, #111	; 0x6f
 80082e0:	bf14      	ite	ne
 80082e2:	220a      	movne	r2, #10
 80082e4:	2208      	moveq	r2, #8
 80082e6:	2100      	movs	r1, #0
 80082e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082ec:	6865      	ldr	r5, [r4, #4]
 80082ee:	60a5      	str	r5, [r4, #8]
 80082f0:	2d00      	cmp	r5, #0
 80082f2:	f2c0 8095 	blt.w	8008420 <_printf_i+0x20c>
 80082f6:	6821      	ldr	r1, [r4, #0]
 80082f8:	f021 0104 	bic.w	r1, r1, #4
 80082fc:	6021      	str	r1, [r4, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d13d      	bne.n	800837e <_printf_i+0x16a>
 8008302:	2d00      	cmp	r5, #0
 8008304:	f040 808e 	bne.w	8008424 <_printf_i+0x210>
 8008308:	4665      	mov	r5, ip
 800830a:	2a08      	cmp	r2, #8
 800830c:	d10b      	bne.n	8008326 <_printf_i+0x112>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	07db      	lsls	r3, r3, #31
 8008312:	d508      	bpl.n	8008326 <_printf_i+0x112>
 8008314:	6923      	ldr	r3, [r4, #16]
 8008316:	6862      	ldr	r2, [r4, #4]
 8008318:	429a      	cmp	r2, r3
 800831a:	bfde      	ittt	le
 800831c:	2330      	movle	r3, #48	; 0x30
 800831e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008322:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008326:	ebac 0305 	sub.w	r3, ip, r5
 800832a:	6123      	str	r3, [r4, #16]
 800832c:	f8cd 8000 	str.w	r8, [sp]
 8008330:	463b      	mov	r3, r7
 8008332:	aa03      	add	r2, sp, #12
 8008334:	4621      	mov	r1, r4
 8008336:	4630      	mov	r0, r6
 8008338:	f7ff fef6 	bl	8008128 <_printf_common>
 800833c:	3001      	adds	r0, #1
 800833e:	d14d      	bne.n	80083dc <_printf_i+0x1c8>
 8008340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008344:	b005      	add	sp, #20
 8008346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800834a:	4839      	ldr	r0, [pc, #228]	; (8008430 <_printf_i+0x21c>)
 800834c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008350:	6813      	ldr	r3, [r2, #0]
 8008352:	6821      	ldr	r1, [r4, #0]
 8008354:	1d1d      	adds	r5, r3, #4
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6015      	str	r5, [r2, #0]
 800835a:	060a      	lsls	r2, r1, #24
 800835c:	d50b      	bpl.n	8008376 <_printf_i+0x162>
 800835e:	07ca      	lsls	r2, r1, #31
 8008360:	bf44      	itt	mi
 8008362:	f041 0120 	orrmi.w	r1, r1, #32
 8008366:	6021      	strmi	r1, [r4, #0]
 8008368:	b91b      	cbnz	r3, 8008372 <_printf_i+0x15e>
 800836a:	6822      	ldr	r2, [r4, #0]
 800836c:	f022 0220 	bic.w	r2, r2, #32
 8008370:	6022      	str	r2, [r4, #0]
 8008372:	2210      	movs	r2, #16
 8008374:	e7b7      	b.n	80082e6 <_printf_i+0xd2>
 8008376:	064d      	lsls	r5, r1, #25
 8008378:	bf48      	it	mi
 800837a:	b29b      	uxthmi	r3, r3
 800837c:	e7ef      	b.n	800835e <_printf_i+0x14a>
 800837e:	4665      	mov	r5, ip
 8008380:	fbb3 f1f2 	udiv	r1, r3, r2
 8008384:	fb02 3311 	mls	r3, r2, r1, r3
 8008388:	5cc3      	ldrb	r3, [r0, r3]
 800838a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800838e:	460b      	mov	r3, r1
 8008390:	2900      	cmp	r1, #0
 8008392:	d1f5      	bne.n	8008380 <_printf_i+0x16c>
 8008394:	e7b9      	b.n	800830a <_printf_i+0xf6>
 8008396:	6813      	ldr	r3, [r2, #0]
 8008398:	6825      	ldr	r5, [r4, #0]
 800839a:	6961      	ldr	r1, [r4, #20]
 800839c:	1d18      	adds	r0, r3, #4
 800839e:	6010      	str	r0, [r2, #0]
 80083a0:	0628      	lsls	r0, r5, #24
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	d501      	bpl.n	80083aa <_printf_i+0x196>
 80083a6:	6019      	str	r1, [r3, #0]
 80083a8:	e002      	b.n	80083b0 <_printf_i+0x19c>
 80083aa:	066a      	lsls	r2, r5, #25
 80083ac:	d5fb      	bpl.n	80083a6 <_printf_i+0x192>
 80083ae:	8019      	strh	r1, [r3, #0]
 80083b0:	2300      	movs	r3, #0
 80083b2:	6123      	str	r3, [r4, #16]
 80083b4:	4665      	mov	r5, ip
 80083b6:	e7b9      	b.n	800832c <_printf_i+0x118>
 80083b8:	6813      	ldr	r3, [r2, #0]
 80083ba:	1d19      	adds	r1, r3, #4
 80083bc:	6011      	str	r1, [r2, #0]
 80083be:	681d      	ldr	r5, [r3, #0]
 80083c0:	6862      	ldr	r2, [r4, #4]
 80083c2:	2100      	movs	r1, #0
 80083c4:	4628      	mov	r0, r5
 80083c6:	f7f7 ff23 	bl	8000210 <memchr>
 80083ca:	b108      	cbz	r0, 80083d0 <_printf_i+0x1bc>
 80083cc:	1b40      	subs	r0, r0, r5
 80083ce:	6060      	str	r0, [r4, #4]
 80083d0:	6863      	ldr	r3, [r4, #4]
 80083d2:	6123      	str	r3, [r4, #16]
 80083d4:	2300      	movs	r3, #0
 80083d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083da:	e7a7      	b.n	800832c <_printf_i+0x118>
 80083dc:	6923      	ldr	r3, [r4, #16]
 80083de:	462a      	mov	r2, r5
 80083e0:	4639      	mov	r1, r7
 80083e2:	4630      	mov	r0, r6
 80083e4:	47c0      	blx	r8
 80083e6:	3001      	adds	r0, #1
 80083e8:	d0aa      	beq.n	8008340 <_printf_i+0x12c>
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	079b      	lsls	r3, r3, #30
 80083ee:	d413      	bmi.n	8008418 <_printf_i+0x204>
 80083f0:	68e0      	ldr	r0, [r4, #12]
 80083f2:	9b03      	ldr	r3, [sp, #12]
 80083f4:	4298      	cmp	r0, r3
 80083f6:	bfb8      	it	lt
 80083f8:	4618      	movlt	r0, r3
 80083fa:	e7a3      	b.n	8008344 <_printf_i+0x130>
 80083fc:	2301      	movs	r3, #1
 80083fe:	464a      	mov	r2, r9
 8008400:	4639      	mov	r1, r7
 8008402:	4630      	mov	r0, r6
 8008404:	47c0      	blx	r8
 8008406:	3001      	adds	r0, #1
 8008408:	d09a      	beq.n	8008340 <_printf_i+0x12c>
 800840a:	3501      	adds	r5, #1
 800840c:	68e3      	ldr	r3, [r4, #12]
 800840e:	9a03      	ldr	r2, [sp, #12]
 8008410:	1a9b      	subs	r3, r3, r2
 8008412:	42ab      	cmp	r3, r5
 8008414:	dcf2      	bgt.n	80083fc <_printf_i+0x1e8>
 8008416:	e7eb      	b.n	80083f0 <_printf_i+0x1dc>
 8008418:	2500      	movs	r5, #0
 800841a:	f104 0919 	add.w	r9, r4, #25
 800841e:	e7f5      	b.n	800840c <_printf_i+0x1f8>
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1ac      	bne.n	800837e <_printf_i+0x16a>
 8008424:	7803      	ldrb	r3, [r0, #0]
 8008426:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800842a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800842e:	e76c      	b.n	800830a <_printf_i+0xf6>
 8008430:	0800c2dc 	.word	0x0800c2dc
 8008434:	0800c2ed 	.word	0x0800c2ed

08008438 <_scanf_float>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	469a      	mov	sl, r3
 800843e:	688b      	ldr	r3, [r1, #8]
 8008440:	4616      	mov	r6, r2
 8008442:	1e5a      	subs	r2, r3, #1
 8008444:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008448:	b087      	sub	sp, #28
 800844a:	bf83      	ittte	hi
 800844c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8008450:	189b      	addhi	r3, r3, r2
 8008452:	9301      	strhi	r3, [sp, #4]
 8008454:	2300      	movls	r3, #0
 8008456:	bf86      	itte	hi
 8008458:	f240 135d 	movwhi	r3, #349	; 0x15d
 800845c:	608b      	strhi	r3, [r1, #8]
 800845e:	9301      	strls	r3, [sp, #4]
 8008460:	680b      	ldr	r3, [r1, #0]
 8008462:	4688      	mov	r8, r1
 8008464:	f04f 0b00 	mov.w	fp, #0
 8008468:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800846c:	f848 3b1c 	str.w	r3, [r8], #28
 8008470:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8008474:	4607      	mov	r7, r0
 8008476:	460c      	mov	r4, r1
 8008478:	4645      	mov	r5, r8
 800847a:	465a      	mov	r2, fp
 800847c:	46d9      	mov	r9, fp
 800847e:	f8cd b008 	str.w	fp, [sp, #8]
 8008482:	68a1      	ldr	r1, [r4, #8]
 8008484:	b181      	cbz	r1, 80084a8 <_scanf_float+0x70>
 8008486:	6833      	ldr	r3, [r6, #0]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	2b49      	cmp	r3, #73	; 0x49
 800848c:	d071      	beq.n	8008572 <_scanf_float+0x13a>
 800848e:	d84d      	bhi.n	800852c <_scanf_float+0xf4>
 8008490:	2b39      	cmp	r3, #57	; 0x39
 8008492:	d840      	bhi.n	8008516 <_scanf_float+0xde>
 8008494:	2b31      	cmp	r3, #49	; 0x31
 8008496:	f080 8088 	bcs.w	80085aa <_scanf_float+0x172>
 800849a:	2b2d      	cmp	r3, #45	; 0x2d
 800849c:	f000 8090 	beq.w	80085c0 <_scanf_float+0x188>
 80084a0:	d815      	bhi.n	80084ce <_scanf_float+0x96>
 80084a2:	2b2b      	cmp	r3, #43	; 0x2b
 80084a4:	f000 808c 	beq.w	80085c0 <_scanf_float+0x188>
 80084a8:	f1b9 0f00 	cmp.w	r9, #0
 80084ac:	d003      	beq.n	80084b6 <_scanf_float+0x7e>
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084b4:	6023      	str	r3, [r4, #0]
 80084b6:	3a01      	subs	r2, #1
 80084b8:	2a01      	cmp	r2, #1
 80084ba:	f200 80ea 	bhi.w	8008692 <_scanf_float+0x25a>
 80084be:	4545      	cmp	r5, r8
 80084c0:	f200 80dc 	bhi.w	800867c <_scanf_float+0x244>
 80084c4:	2601      	movs	r6, #1
 80084c6:	4630      	mov	r0, r6
 80084c8:	b007      	add	sp, #28
 80084ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ce:	2b2e      	cmp	r3, #46	; 0x2e
 80084d0:	f000 809f 	beq.w	8008612 <_scanf_float+0x1da>
 80084d4:	2b30      	cmp	r3, #48	; 0x30
 80084d6:	d1e7      	bne.n	80084a8 <_scanf_float+0x70>
 80084d8:	6820      	ldr	r0, [r4, #0]
 80084da:	f410 7f80 	tst.w	r0, #256	; 0x100
 80084de:	d064      	beq.n	80085aa <_scanf_float+0x172>
 80084e0:	9b01      	ldr	r3, [sp, #4]
 80084e2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80084e6:	6020      	str	r0, [r4, #0]
 80084e8:	f109 0901 	add.w	r9, r9, #1
 80084ec:	b11b      	cbz	r3, 80084f6 <_scanf_float+0xbe>
 80084ee:	3b01      	subs	r3, #1
 80084f0:	3101      	adds	r1, #1
 80084f2:	9301      	str	r3, [sp, #4]
 80084f4:	60a1      	str	r1, [r4, #8]
 80084f6:	68a3      	ldr	r3, [r4, #8]
 80084f8:	3b01      	subs	r3, #1
 80084fa:	60a3      	str	r3, [r4, #8]
 80084fc:	6923      	ldr	r3, [r4, #16]
 80084fe:	3301      	adds	r3, #1
 8008500:	6123      	str	r3, [r4, #16]
 8008502:	6873      	ldr	r3, [r6, #4]
 8008504:	3b01      	subs	r3, #1
 8008506:	2b00      	cmp	r3, #0
 8008508:	6073      	str	r3, [r6, #4]
 800850a:	f340 80ac 	ble.w	8008666 <_scanf_float+0x22e>
 800850e:	6833      	ldr	r3, [r6, #0]
 8008510:	3301      	adds	r3, #1
 8008512:	6033      	str	r3, [r6, #0]
 8008514:	e7b5      	b.n	8008482 <_scanf_float+0x4a>
 8008516:	2b45      	cmp	r3, #69	; 0x45
 8008518:	f000 8085 	beq.w	8008626 <_scanf_float+0x1ee>
 800851c:	2b46      	cmp	r3, #70	; 0x46
 800851e:	d06a      	beq.n	80085f6 <_scanf_float+0x1be>
 8008520:	2b41      	cmp	r3, #65	; 0x41
 8008522:	d1c1      	bne.n	80084a8 <_scanf_float+0x70>
 8008524:	2a01      	cmp	r2, #1
 8008526:	d1bf      	bne.n	80084a8 <_scanf_float+0x70>
 8008528:	2202      	movs	r2, #2
 800852a:	e046      	b.n	80085ba <_scanf_float+0x182>
 800852c:	2b65      	cmp	r3, #101	; 0x65
 800852e:	d07a      	beq.n	8008626 <_scanf_float+0x1ee>
 8008530:	d818      	bhi.n	8008564 <_scanf_float+0x12c>
 8008532:	2b54      	cmp	r3, #84	; 0x54
 8008534:	d066      	beq.n	8008604 <_scanf_float+0x1cc>
 8008536:	d811      	bhi.n	800855c <_scanf_float+0x124>
 8008538:	2b4e      	cmp	r3, #78	; 0x4e
 800853a:	d1b5      	bne.n	80084a8 <_scanf_float+0x70>
 800853c:	2a00      	cmp	r2, #0
 800853e:	d146      	bne.n	80085ce <_scanf_float+0x196>
 8008540:	f1b9 0f00 	cmp.w	r9, #0
 8008544:	d145      	bne.n	80085d2 <_scanf_float+0x19a>
 8008546:	6821      	ldr	r1, [r4, #0]
 8008548:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800854c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008550:	d13f      	bne.n	80085d2 <_scanf_float+0x19a>
 8008552:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008556:	6021      	str	r1, [r4, #0]
 8008558:	2201      	movs	r2, #1
 800855a:	e02e      	b.n	80085ba <_scanf_float+0x182>
 800855c:	2b59      	cmp	r3, #89	; 0x59
 800855e:	d01e      	beq.n	800859e <_scanf_float+0x166>
 8008560:	2b61      	cmp	r3, #97	; 0x61
 8008562:	e7de      	b.n	8008522 <_scanf_float+0xea>
 8008564:	2b6e      	cmp	r3, #110	; 0x6e
 8008566:	d0e9      	beq.n	800853c <_scanf_float+0x104>
 8008568:	d815      	bhi.n	8008596 <_scanf_float+0x15e>
 800856a:	2b66      	cmp	r3, #102	; 0x66
 800856c:	d043      	beq.n	80085f6 <_scanf_float+0x1be>
 800856e:	2b69      	cmp	r3, #105	; 0x69
 8008570:	d19a      	bne.n	80084a8 <_scanf_float+0x70>
 8008572:	f1bb 0f00 	cmp.w	fp, #0
 8008576:	d138      	bne.n	80085ea <_scanf_float+0x1b2>
 8008578:	f1b9 0f00 	cmp.w	r9, #0
 800857c:	d197      	bne.n	80084ae <_scanf_float+0x76>
 800857e:	6821      	ldr	r1, [r4, #0]
 8008580:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008584:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008588:	d195      	bne.n	80084b6 <_scanf_float+0x7e>
 800858a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800858e:	6021      	str	r1, [r4, #0]
 8008590:	f04f 0b01 	mov.w	fp, #1
 8008594:	e011      	b.n	80085ba <_scanf_float+0x182>
 8008596:	2b74      	cmp	r3, #116	; 0x74
 8008598:	d034      	beq.n	8008604 <_scanf_float+0x1cc>
 800859a:	2b79      	cmp	r3, #121	; 0x79
 800859c:	d184      	bne.n	80084a8 <_scanf_float+0x70>
 800859e:	f1bb 0f07 	cmp.w	fp, #7
 80085a2:	d181      	bne.n	80084a8 <_scanf_float+0x70>
 80085a4:	f04f 0b08 	mov.w	fp, #8
 80085a8:	e007      	b.n	80085ba <_scanf_float+0x182>
 80085aa:	eb12 0f0b 	cmn.w	r2, fp
 80085ae:	f47f af7b 	bne.w	80084a8 <_scanf_float+0x70>
 80085b2:	6821      	ldr	r1, [r4, #0]
 80085b4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80085b8:	6021      	str	r1, [r4, #0]
 80085ba:	702b      	strb	r3, [r5, #0]
 80085bc:	3501      	adds	r5, #1
 80085be:	e79a      	b.n	80084f6 <_scanf_float+0xbe>
 80085c0:	6821      	ldr	r1, [r4, #0]
 80085c2:	0608      	lsls	r0, r1, #24
 80085c4:	f57f af70 	bpl.w	80084a8 <_scanf_float+0x70>
 80085c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80085cc:	e7f4      	b.n	80085b8 <_scanf_float+0x180>
 80085ce:	2a02      	cmp	r2, #2
 80085d0:	d047      	beq.n	8008662 <_scanf_float+0x22a>
 80085d2:	f1bb 0f01 	cmp.w	fp, #1
 80085d6:	d003      	beq.n	80085e0 <_scanf_float+0x1a8>
 80085d8:	f1bb 0f04 	cmp.w	fp, #4
 80085dc:	f47f af64 	bne.w	80084a8 <_scanf_float+0x70>
 80085e0:	f10b 0b01 	add.w	fp, fp, #1
 80085e4:	fa5f fb8b 	uxtb.w	fp, fp
 80085e8:	e7e7      	b.n	80085ba <_scanf_float+0x182>
 80085ea:	f1bb 0f03 	cmp.w	fp, #3
 80085ee:	d0f7      	beq.n	80085e0 <_scanf_float+0x1a8>
 80085f0:	f1bb 0f05 	cmp.w	fp, #5
 80085f4:	e7f2      	b.n	80085dc <_scanf_float+0x1a4>
 80085f6:	f1bb 0f02 	cmp.w	fp, #2
 80085fa:	f47f af55 	bne.w	80084a8 <_scanf_float+0x70>
 80085fe:	f04f 0b03 	mov.w	fp, #3
 8008602:	e7da      	b.n	80085ba <_scanf_float+0x182>
 8008604:	f1bb 0f06 	cmp.w	fp, #6
 8008608:	f47f af4e 	bne.w	80084a8 <_scanf_float+0x70>
 800860c:	f04f 0b07 	mov.w	fp, #7
 8008610:	e7d3      	b.n	80085ba <_scanf_float+0x182>
 8008612:	6821      	ldr	r1, [r4, #0]
 8008614:	0588      	lsls	r0, r1, #22
 8008616:	f57f af47 	bpl.w	80084a8 <_scanf_float+0x70>
 800861a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800861e:	6021      	str	r1, [r4, #0]
 8008620:	f8cd 9008 	str.w	r9, [sp, #8]
 8008624:	e7c9      	b.n	80085ba <_scanf_float+0x182>
 8008626:	6821      	ldr	r1, [r4, #0]
 8008628:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800862c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8008630:	d006      	beq.n	8008640 <_scanf_float+0x208>
 8008632:	0548      	lsls	r0, r1, #21
 8008634:	f57f af38 	bpl.w	80084a8 <_scanf_float+0x70>
 8008638:	f1b9 0f00 	cmp.w	r9, #0
 800863c:	f43f af3b 	beq.w	80084b6 <_scanf_float+0x7e>
 8008640:	0588      	lsls	r0, r1, #22
 8008642:	bf58      	it	pl
 8008644:	9802      	ldrpl	r0, [sp, #8]
 8008646:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800864a:	bf58      	it	pl
 800864c:	eba9 0000 	subpl.w	r0, r9, r0
 8008650:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8008654:	bf58      	it	pl
 8008656:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800865a:	6021      	str	r1, [r4, #0]
 800865c:	f04f 0900 	mov.w	r9, #0
 8008660:	e7ab      	b.n	80085ba <_scanf_float+0x182>
 8008662:	2203      	movs	r2, #3
 8008664:	e7a9      	b.n	80085ba <_scanf_float+0x182>
 8008666:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800866a:	9205      	str	r2, [sp, #20]
 800866c:	4631      	mov	r1, r6
 800866e:	4638      	mov	r0, r7
 8008670:	4798      	blx	r3
 8008672:	9a05      	ldr	r2, [sp, #20]
 8008674:	2800      	cmp	r0, #0
 8008676:	f43f af04 	beq.w	8008482 <_scanf_float+0x4a>
 800867a:	e715      	b.n	80084a8 <_scanf_float+0x70>
 800867c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008680:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008684:	4632      	mov	r2, r6
 8008686:	4638      	mov	r0, r7
 8008688:	4798      	blx	r3
 800868a:	6923      	ldr	r3, [r4, #16]
 800868c:	3b01      	subs	r3, #1
 800868e:	6123      	str	r3, [r4, #16]
 8008690:	e715      	b.n	80084be <_scanf_float+0x86>
 8008692:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8008696:	2b06      	cmp	r3, #6
 8008698:	d80a      	bhi.n	80086b0 <_scanf_float+0x278>
 800869a:	f1bb 0f02 	cmp.w	fp, #2
 800869e:	d968      	bls.n	8008772 <_scanf_float+0x33a>
 80086a0:	f1ab 0b03 	sub.w	fp, fp, #3
 80086a4:	fa5f fb8b 	uxtb.w	fp, fp
 80086a8:	eba5 0b0b 	sub.w	fp, r5, fp
 80086ac:	455d      	cmp	r5, fp
 80086ae:	d14b      	bne.n	8008748 <_scanf_float+0x310>
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	05da      	lsls	r2, r3, #23
 80086b4:	d51f      	bpl.n	80086f6 <_scanf_float+0x2be>
 80086b6:	055b      	lsls	r3, r3, #21
 80086b8:	d468      	bmi.n	800878c <_scanf_float+0x354>
 80086ba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80086be:	6923      	ldr	r3, [r4, #16]
 80086c0:	2965      	cmp	r1, #101	; 0x65
 80086c2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80086c6:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 80086ca:	6123      	str	r3, [r4, #16]
 80086cc:	d00d      	beq.n	80086ea <_scanf_float+0x2b2>
 80086ce:	2945      	cmp	r1, #69	; 0x45
 80086d0:	d00b      	beq.n	80086ea <_scanf_float+0x2b2>
 80086d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086d6:	4632      	mov	r2, r6
 80086d8:	4638      	mov	r0, r7
 80086da:	4798      	blx	r3
 80086dc:	6923      	ldr	r3, [r4, #16]
 80086de:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80086e2:	3b01      	subs	r3, #1
 80086e4:	f1a5 0b02 	sub.w	fp, r5, #2
 80086e8:	6123      	str	r3, [r4, #16]
 80086ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80086ee:	4632      	mov	r2, r6
 80086f0:	4638      	mov	r0, r7
 80086f2:	4798      	blx	r3
 80086f4:	465d      	mov	r5, fp
 80086f6:	6826      	ldr	r6, [r4, #0]
 80086f8:	f016 0610 	ands.w	r6, r6, #16
 80086fc:	d17a      	bne.n	80087f4 <_scanf_float+0x3bc>
 80086fe:	702e      	strb	r6, [r5, #0]
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800870a:	d142      	bne.n	8008792 <_scanf_float+0x35a>
 800870c:	9b02      	ldr	r3, [sp, #8]
 800870e:	eba9 0303 	sub.w	r3, r9, r3
 8008712:	425a      	negs	r2, r3
 8008714:	2b00      	cmp	r3, #0
 8008716:	d149      	bne.n	80087ac <_scanf_float+0x374>
 8008718:	2200      	movs	r2, #0
 800871a:	4641      	mov	r1, r8
 800871c:	4638      	mov	r0, r7
 800871e:	f000 ff07 	bl	8009530 <_strtod_r>
 8008722:	6825      	ldr	r5, [r4, #0]
 8008724:	f8da 3000 	ldr.w	r3, [sl]
 8008728:	f015 0f02 	tst.w	r5, #2
 800872c:	f103 0204 	add.w	r2, r3, #4
 8008730:	ec59 8b10 	vmov	r8, r9, d0
 8008734:	f8ca 2000 	str.w	r2, [sl]
 8008738:	d043      	beq.n	80087c2 <_scanf_float+0x38a>
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	e9c3 8900 	strd	r8, r9, [r3]
 8008740:	68e3      	ldr	r3, [r4, #12]
 8008742:	3301      	adds	r3, #1
 8008744:	60e3      	str	r3, [r4, #12]
 8008746:	e6be      	b.n	80084c6 <_scanf_float+0x8e>
 8008748:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800874c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008750:	4632      	mov	r2, r6
 8008752:	4638      	mov	r0, r7
 8008754:	4798      	blx	r3
 8008756:	6923      	ldr	r3, [r4, #16]
 8008758:	3b01      	subs	r3, #1
 800875a:	6123      	str	r3, [r4, #16]
 800875c:	e7a6      	b.n	80086ac <_scanf_float+0x274>
 800875e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008762:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008766:	4632      	mov	r2, r6
 8008768:	4638      	mov	r0, r7
 800876a:	4798      	blx	r3
 800876c:	6923      	ldr	r3, [r4, #16]
 800876e:	3b01      	subs	r3, #1
 8008770:	6123      	str	r3, [r4, #16]
 8008772:	4545      	cmp	r5, r8
 8008774:	d8f3      	bhi.n	800875e <_scanf_float+0x326>
 8008776:	e6a5      	b.n	80084c4 <_scanf_float+0x8c>
 8008778:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800877c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008780:	4632      	mov	r2, r6
 8008782:	4638      	mov	r0, r7
 8008784:	4798      	blx	r3
 8008786:	6923      	ldr	r3, [r4, #16]
 8008788:	3b01      	subs	r3, #1
 800878a:	6123      	str	r3, [r4, #16]
 800878c:	4545      	cmp	r5, r8
 800878e:	d8f3      	bhi.n	8008778 <_scanf_float+0x340>
 8008790:	e698      	b.n	80084c4 <_scanf_float+0x8c>
 8008792:	9b03      	ldr	r3, [sp, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d0bf      	beq.n	8008718 <_scanf_float+0x2e0>
 8008798:	9904      	ldr	r1, [sp, #16]
 800879a:	230a      	movs	r3, #10
 800879c:	4632      	mov	r2, r6
 800879e:	3101      	adds	r1, #1
 80087a0:	4638      	mov	r0, r7
 80087a2:	f000 ff51 	bl	8009648 <_strtol_r>
 80087a6:	9b03      	ldr	r3, [sp, #12]
 80087a8:	9d04      	ldr	r5, [sp, #16]
 80087aa:	1ac2      	subs	r2, r0, r3
 80087ac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80087b0:	429d      	cmp	r5, r3
 80087b2:	bf28      	it	cs
 80087b4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80087b8:	490f      	ldr	r1, [pc, #60]	; (80087f8 <_scanf_float+0x3c0>)
 80087ba:	4628      	mov	r0, r5
 80087bc:	f000 f888 	bl	80088d0 <siprintf>
 80087c0:	e7aa      	b.n	8008718 <_scanf_float+0x2e0>
 80087c2:	f015 0504 	ands.w	r5, r5, #4
 80087c6:	d1b8      	bne.n	800873a <_scanf_float+0x302>
 80087c8:	681f      	ldr	r7, [r3, #0]
 80087ca:	ee10 2a10 	vmov	r2, s0
 80087ce:	464b      	mov	r3, r9
 80087d0:	ee10 0a10 	vmov	r0, s0
 80087d4:	4649      	mov	r1, r9
 80087d6:	f7f8 f9c1 	bl	8000b5c <__aeabi_dcmpun>
 80087da:	b128      	cbz	r0, 80087e8 <_scanf_float+0x3b0>
 80087dc:	4628      	mov	r0, r5
 80087de:	f000 f871 	bl	80088c4 <nanf>
 80087e2:	ed87 0a00 	vstr	s0, [r7]
 80087e6:	e7ab      	b.n	8008740 <_scanf_float+0x308>
 80087e8:	4640      	mov	r0, r8
 80087ea:	4649      	mov	r1, r9
 80087ec:	f7f8 fa14 	bl	8000c18 <__aeabi_d2f>
 80087f0:	6038      	str	r0, [r7, #0]
 80087f2:	e7a5      	b.n	8008740 <_scanf_float+0x308>
 80087f4:	2600      	movs	r6, #0
 80087f6:	e666      	b.n	80084c6 <_scanf_float+0x8e>
 80087f8:	0800c2fe 	.word	0x0800c2fe

080087fc <_puts_r>:
 80087fc:	b570      	push	{r4, r5, r6, lr}
 80087fe:	460e      	mov	r6, r1
 8008800:	4605      	mov	r5, r0
 8008802:	b118      	cbz	r0, 800880c <_puts_r+0x10>
 8008804:	6983      	ldr	r3, [r0, #24]
 8008806:	b90b      	cbnz	r3, 800880c <_puts_r+0x10>
 8008808:	f001 ff4a 	bl	800a6a0 <__sinit>
 800880c:	69ab      	ldr	r3, [r5, #24]
 800880e:	68ac      	ldr	r4, [r5, #8]
 8008810:	b913      	cbnz	r3, 8008818 <_puts_r+0x1c>
 8008812:	4628      	mov	r0, r5
 8008814:	f001 ff44 	bl	800a6a0 <__sinit>
 8008818:	4b23      	ldr	r3, [pc, #140]	; (80088a8 <_puts_r+0xac>)
 800881a:	429c      	cmp	r4, r3
 800881c:	d117      	bne.n	800884e <_puts_r+0x52>
 800881e:	686c      	ldr	r4, [r5, #4]
 8008820:	89a3      	ldrh	r3, [r4, #12]
 8008822:	071b      	lsls	r3, r3, #28
 8008824:	d51d      	bpl.n	8008862 <_puts_r+0x66>
 8008826:	6923      	ldr	r3, [r4, #16]
 8008828:	b1db      	cbz	r3, 8008862 <_puts_r+0x66>
 800882a:	3e01      	subs	r6, #1
 800882c:	68a3      	ldr	r3, [r4, #8]
 800882e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008832:	3b01      	subs	r3, #1
 8008834:	60a3      	str	r3, [r4, #8]
 8008836:	b9e9      	cbnz	r1, 8008874 <_puts_r+0x78>
 8008838:	2b00      	cmp	r3, #0
 800883a:	da2e      	bge.n	800889a <_puts_r+0x9e>
 800883c:	4622      	mov	r2, r4
 800883e:	210a      	movs	r1, #10
 8008840:	4628      	mov	r0, r5
 8008842:	f000 ff29 	bl	8009698 <__swbuf_r>
 8008846:	3001      	adds	r0, #1
 8008848:	d011      	beq.n	800886e <_puts_r+0x72>
 800884a:	200a      	movs	r0, #10
 800884c:	e011      	b.n	8008872 <_puts_r+0x76>
 800884e:	4b17      	ldr	r3, [pc, #92]	; (80088ac <_puts_r+0xb0>)
 8008850:	429c      	cmp	r4, r3
 8008852:	d101      	bne.n	8008858 <_puts_r+0x5c>
 8008854:	68ac      	ldr	r4, [r5, #8]
 8008856:	e7e3      	b.n	8008820 <_puts_r+0x24>
 8008858:	4b15      	ldr	r3, [pc, #84]	; (80088b0 <_puts_r+0xb4>)
 800885a:	429c      	cmp	r4, r3
 800885c:	bf08      	it	eq
 800885e:	68ec      	ldreq	r4, [r5, #12]
 8008860:	e7de      	b.n	8008820 <_puts_r+0x24>
 8008862:	4621      	mov	r1, r4
 8008864:	4628      	mov	r0, r5
 8008866:	f000 ff77 	bl	8009758 <__swsetup_r>
 800886a:	2800      	cmp	r0, #0
 800886c:	d0dd      	beq.n	800882a <_puts_r+0x2e>
 800886e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008872:	bd70      	pop	{r4, r5, r6, pc}
 8008874:	2b00      	cmp	r3, #0
 8008876:	da04      	bge.n	8008882 <_puts_r+0x86>
 8008878:	69a2      	ldr	r2, [r4, #24]
 800887a:	429a      	cmp	r2, r3
 800887c:	dc06      	bgt.n	800888c <_puts_r+0x90>
 800887e:	290a      	cmp	r1, #10
 8008880:	d004      	beq.n	800888c <_puts_r+0x90>
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	1c5a      	adds	r2, r3, #1
 8008886:	6022      	str	r2, [r4, #0]
 8008888:	7019      	strb	r1, [r3, #0]
 800888a:	e7cf      	b.n	800882c <_puts_r+0x30>
 800888c:	4622      	mov	r2, r4
 800888e:	4628      	mov	r0, r5
 8008890:	f000 ff02 	bl	8009698 <__swbuf_r>
 8008894:	3001      	adds	r0, #1
 8008896:	d1c9      	bne.n	800882c <_puts_r+0x30>
 8008898:	e7e9      	b.n	800886e <_puts_r+0x72>
 800889a:	6823      	ldr	r3, [r4, #0]
 800889c:	200a      	movs	r0, #10
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	6022      	str	r2, [r4, #0]
 80088a2:	7018      	strb	r0, [r3, #0]
 80088a4:	e7e5      	b.n	8008872 <_puts_r+0x76>
 80088a6:	bf00      	nop
 80088a8:	0800c488 	.word	0x0800c488
 80088ac:	0800c4a8 	.word	0x0800c4a8
 80088b0:	0800c468 	.word	0x0800c468

080088b4 <puts>:
 80088b4:	4b02      	ldr	r3, [pc, #8]	; (80088c0 <puts+0xc>)
 80088b6:	4601      	mov	r1, r0
 80088b8:	6818      	ldr	r0, [r3, #0]
 80088ba:	f7ff bf9f 	b.w	80087fc <_puts_r>
 80088be:	bf00      	nop
 80088c0:	20000044 	.word	0x20000044

080088c4 <nanf>:
 80088c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80088cc <nanf+0x8>
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	7fc00000 	.word	0x7fc00000

080088d0 <siprintf>:
 80088d0:	b40e      	push	{r1, r2, r3}
 80088d2:	b500      	push	{lr}
 80088d4:	b09c      	sub	sp, #112	; 0x70
 80088d6:	ab1d      	add	r3, sp, #116	; 0x74
 80088d8:	9002      	str	r0, [sp, #8]
 80088da:	9006      	str	r0, [sp, #24]
 80088dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088e0:	4809      	ldr	r0, [pc, #36]	; (8008908 <siprintf+0x38>)
 80088e2:	9107      	str	r1, [sp, #28]
 80088e4:	9104      	str	r1, [sp, #16]
 80088e6:	4909      	ldr	r1, [pc, #36]	; (800890c <siprintf+0x3c>)
 80088e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80088ec:	9105      	str	r1, [sp, #20]
 80088ee:	6800      	ldr	r0, [r0, #0]
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	a902      	add	r1, sp, #8
 80088f4:	f003 f810 	bl	800b918 <_svfiprintf_r>
 80088f8:	9b02      	ldr	r3, [sp, #8]
 80088fa:	2200      	movs	r2, #0
 80088fc:	701a      	strb	r2, [r3, #0]
 80088fe:	b01c      	add	sp, #112	; 0x70
 8008900:	f85d eb04 	ldr.w	lr, [sp], #4
 8008904:	b003      	add	sp, #12
 8008906:	4770      	bx	lr
 8008908:	20000044 	.word	0x20000044
 800890c:	ffff0208 	.word	0xffff0208

08008910 <sulp>:
 8008910:	b570      	push	{r4, r5, r6, lr}
 8008912:	4604      	mov	r4, r0
 8008914:	460d      	mov	r5, r1
 8008916:	ec45 4b10 	vmov	d0, r4, r5
 800891a:	4616      	mov	r6, r2
 800891c:	f002 fdb8 	bl	800b490 <__ulp>
 8008920:	ec51 0b10 	vmov	r0, r1, d0
 8008924:	b17e      	cbz	r6, 8008946 <sulp+0x36>
 8008926:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800892a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800892e:	2b00      	cmp	r3, #0
 8008930:	dd09      	ble.n	8008946 <sulp+0x36>
 8008932:	051b      	lsls	r3, r3, #20
 8008934:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008938:	2400      	movs	r4, #0
 800893a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800893e:	4622      	mov	r2, r4
 8008940:	462b      	mov	r3, r5
 8008942:	f7f7 fe71 	bl	8000628 <__aeabi_dmul>
 8008946:	bd70      	pop	{r4, r5, r6, pc}

08008948 <_strtod_l>:
 8008948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894c:	461f      	mov	r7, r3
 800894e:	b0a1      	sub	sp, #132	; 0x84
 8008950:	2300      	movs	r3, #0
 8008952:	4681      	mov	r9, r0
 8008954:	4638      	mov	r0, r7
 8008956:	460e      	mov	r6, r1
 8008958:	9217      	str	r2, [sp, #92]	; 0x5c
 800895a:	931c      	str	r3, [sp, #112]	; 0x70
 800895c:	f002 fa50 	bl	800ae00 <__localeconv_l>
 8008960:	4680      	mov	r8, r0
 8008962:	6800      	ldr	r0, [r0, #0]
 8008964:	f7f7 fc46 	bl	80001f4 <strlen>
 8008968:	f04f 0a00 	mov.w	sl, #0
 800896c:	4604      	mov	r4, r0
 800896e:	f04f 0b00 	mov.w	fp, #0
 8008972:	961b      	str	r6, [sp, #108]	; 0x6c
 8008974:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008976:	781a      	ldrb	r2, [r3, #0]
 8008978:	2a0d      	cmp	r2, #13
 800897a:	d832      	bhi.n	80089e2 <_strtod_l+0x9a>
 800897c:	2a09      	cmp	r2, #9
 800897e:	d236      	bcs.n	80089ee <_strtod_l+0xa6>
 8008980:	2a00      	cmp	r2, #0
 8008982:	d03e      	beq.n	8008a02 <_strtod_l+0xba>
 8008984:	2300      	movs	r3, #0
 8008986:	930d      	str	r3, [sp, #52]	; 0x34
 8008988:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800898a:	782b      	ldrb	r3, [r5, #0]
 800898c:	2b30      	cmp	r3, #48	; 0x30
 800898e:	f040 80ac 	bne.w	8008aea <_strtod_l+0x1a2>
 8008992:	786b      	ldrb	r3, [r5, #1]
 8008994:	2b58      	cmp	r3, #88	; 0x58
 8008996:	d001      	beq.n	800899c <_strtod_l+0x54>
 8008998:	2b78      	cmp	r3, #120	; 0x78
 800899a:	d167      	bne.n	8008a6c <_strtod_l+0x124>
 800899c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800899e:	9301      	str	r3, [sp, #4]
 80089a0:	ab1c      	add	r3, sp, #112	; 0x70
 80089a2:	9300      	str	r3, [sp, #0]
 80089a4:	9702      	str	r7, [sp, #8]
 80089a6:	ab1d      	add	r3, sp, #116	; 0x74
 80089a8:	4a88      	ldr	r2, [pc, #544]	; (8008bcc <_strtod_l+0x284>)
 80089aa:	a91b      	add	r1, sp, #108	; 0x6c
 80089ac:	4648      	mov	r0, r9
 80089ae:	f001 ff50 	bl	800a852 <__gethex>
 80089b2:	f010 0407 	ands.w	r4, r0, #7
 80089b6:	4606      	mov	r6, r0
 80089b8:	d005      	beq.n	80089c6 <_strtod_l+0x7e>
 80089ba:	2c06      	cmp	r4, #6
 80089bc:	d12b      	bne.n	8008a16 <_strtod_l+0xce>
 80089be:	3501      	adds	r5, #1
 80089c0:	2300      	movs	r3, #0
 80089c2:	951b      	str	r5, [sp, #108]	; 0x6c
 80089c4:	930d      	str	r3, [sp, #52]	; 0x34
 80089c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f040 859a 	bne.w	8009502 <_strtod_l+0xbba>
 80089ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089d0:	b1e3      	cbz	r3, 8008a0c <_strtod_l+0xc4>
 80089d2:	4652      	mov	r2, sl
 80089d4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80089d8:	ec43 2b10 	vmov	d0, r2, r3
 80089dc:	b021      	add	sp, #132	; 0x84
 80089de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e2:	2a2b      	cmp	r2, #43	; 0x2b
 80089e4:	d015      	beq.n	8008a12 <_strtod_l+0xca>
 80089e6:	2a2d      	cmp	r2, #45	; 0x2d
 80089e8:	d004      	beq.n	80089f4 <_strtod_l+0xac>
 80089ea:	2a20      	cmp	r2, #32
 80089ec:	d1ca      	bne.n	8008984 <_strtod_l+0x3c>
 80089ee:	3301      	adds	r3, #1
 80089f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80089f2:	e7bf      	b.n	8008974 <_strtod_l+0x2c>
 80089f4:	2201      	movs	r2, #1
 80089f6:	920d      	str	r2, [sp, #52]	; 0x34
 80089f8:	1c5a      	adds	r2, r3, #1
 80089fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80089fc:	785b      	ldrb	r3, [r3, #1]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1c2      	bne.n	8008988 <_strtod_l+0x40>
 8008a02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a04:	961b      	str	r6, [sp, #108]	; 0x6c
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f040 8579 	bne.w	80094fe <_strtod_l+0xbb6>
 8008a0c:	4652      	mov	r2, sl
 8008a0e:	465b      	mov	r3, fp
 8008a10:	e7e2      	b.n	80089d8 <_strtod_l+0x90>
 8008a12:	2200      	movs	r2, #0
 8008a14:	e7ef      	b.n	80089f6 <_strtod_l+0xae>
 8008a16:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008a18:	b13a      	cbz	r2, 8008a2a <_strtod_l+0xe2>
 8008a1a:	2135      	movs	r1, #53	; 0x35
 8008a1c:	a81e      	add	r0, sp, #120	; 0x78
 8008a1e:	f002 fe2f 	bl	800b680 <__copybits>
 8008a22:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008a24:	4648      	mov	r0, r9
 8008a26:	f002 fa9b 	bl	800af60 <_Bfree>
 8008a2a:	3c01      	subs	r4, #1
 8008a2c:	2c04      	cmp	r4, #4
 8008a2e:	d806      	bhi.n	8008a3e <_strtod_l+0xf6>
 8008a30:	e8df f004 	tbb	[pc, r4]
 8008a34:	1714030a 	.word	0x1714030a
 8008a38:	0a          	.byte	0x0a
 8008a39:	00          	.byte	0x00
 8008a3a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8008a3e:	0730      	lsls	r0, r6, #28
 8008a40:	d5c1      	bpl.n	80089c6 <_strtod_l+0x7e>
 8008a42:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008a46:	e7be      	b.n	80089c6 <_strtod_l+0x7e>
 8008a48:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8008a4c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008a4e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a52:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a56:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a5a:	e7f0      	b.n	8008a3e <_strtod_l+0xf6>
 8008a5c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008bd0 <_strtod_l+0x288>
 8008a60:	e7ed      	b.n	8008a3e <_strtod_l+0xf6>
 8008a62:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008a66:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008a6a:	e7e8      	b.n	8008a3e <_strtod_l+0xf6>
 8008a6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a6e:	1c5a      	adds	r2, r3, #1
 8008a70:	921b      	str	r2, [sp, #108]	; 0x6c
 8008a72:	785b      	ldrb	r3, [r3, #1]
 8008a74:	2b30      	cmp	r3, #48	; 0x30
 8008a76:	d0f9      	beq.n	8008a6c <_strtod_l+0x124>
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d0a4      	beq.n	80089c6 <_strtod_l+0x7e>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	2500      	movs	r5, #0
 8008a80:	9306      	str	r3, [sp, #24]
 8008a82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a84:	9308      	str	r3, [sp, #32]
 8008a86:	9507      	str	r5, [sp, #28]
 8008a88:	9505      	str	r5, [sp, #20]
 8008a8a:	220a      	movs	r2, #10
 8008a8c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008a8e:	7807      	ldrb	r7, [r0, #0]
 8008a90:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008a94:	b2d9      	uxtb	r1, r3
 8008a96:	2909      	cmp	r1, #9
 8008a98:	d929      	bls.n	8008aee <_strtod_l+0x1a6>
 8008a9a:	4622      	mov	r2, r4
 8008a9c:	f8d8 1000 	ldr.w	r1, [r8]
 8008aa0:	f003 f885 	bl	800bbae <strncmp>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d031      	beq.n	8008b0c <_strtod_l+0x1c4>
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	9c05      	ldr	r4, [sp, #20]
 8008aac:	9004      	str	r0, [sp, #16]
 8008aae:	463b      	mov	r3, r7
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	2b65      	cmp	r3, #101	; 0x65
 8008ab4:	d001      	beq.n	8008aba <_strtod_l+0x172>
 8008ab6:	2b45      	cmp	r3, #69	; 0x45
 8008ab8:	d114      	bne.n	8008ae4 <_strtod_l+0x19c>
 8008aba:	b924      	cbnz	r4, 8008ac6 <_strtod_l+0x17e>
 8008abc:	b910      	cbnz	r0, 8008ac4 <_strtod_l+0x17c>
 8008abe:	9b06      	ldr	r3, [sp, #24]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d09e      	beq.n	8008a02 <_strtod_l+0xba>
 8008ac4:	2400      	movs	r4, #0
 8008ac6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008ac8:	1c73      	adds	r3, r6, #1
 8008aca:	931b      	str	r3, [sp, #108]	; 0x6c
 8008acc:	7873      	ldrb	r3, [r6, #1]
 8008ace:	2b2b      	cmp	r3, #43	; 0x2b
 8008ad0:	d078      	beq.n	8008bc4 <_strtod_l+0x27c>
 8008ad2:	2b2d      	cmp	r3, #45	; 0x2d
 8008ad4:	d070      	beq.n	8008bb8 <_strtod_l+0x270>
 8008ad6:	f04f 0c00 	mov.w	ip, #0
 8008ada:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008ade:	2f09      	cmp	r7, #9
 8008ae0:	d97c      	bls.n	8008bdc <_strtod_l+0x294>
 8008ae2:	961b      	str	r6, [sp, #108]	; 0x6c
 8008ae4:	f04f 0e00 	mov.w	lr, #0
 8008ae8:	e09a      	b.n	8008c20 <_strtod_l+0x2d8>
 8008aea:	2300      	movs	r3, #0
 8008aec:	e7c7      	b.n	8008a7e <_strtod_l+0x136>
 8008aee:	9905      	ldr	r1, [sp, #20]
 8008af0:	2908      	cmp	r1, #8
 8008af2:	bfdd      	ittte	le
 8008af4:	9907      	ldrle	r1, [sp, #28]
 8008af6:	fb02 3301 	mlale	r3, r2, r1, r3
 8008afa:	9307      	strle	r3, [sp, #28]
 8008afc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008b00:	9b05      	ldr	r3, [sp, #20]
 8008b02:	3001      	adds	r0, #1
 8008b04:	3301      	adds	r3, #1
 8008b06:	9305      	str	r3, [sp, #20]
 8008b08:	901b      	str	r0, [sp, #108]	; 0x6c
 8008b0a:	e7bf      	b.n	8008a8c <_strtod_l+0x144>
 8008b0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b0e:	191a      	adds	r2, r3, r4
 8008b10:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b12:	9a05      	ldr	r2, [sp, #20]
 8008b14:	5d1b      	ldrb	r3, [r3, r4]
 8008b16:	2a00      	cmp	r2, #0
 8008b18:	d037      	beq.n	8008b8a <_strtod_l+0x242>
 8008b1a:	9c05      	ldr	r4, [sp, #20]
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008b22:	2909      	cmp	r1, #9
 8008b24:	d913      	bls.n	8008b4e <_strtod_l+0x206>
 8008b26:	2101      	movs	r1, #1
 8008b28:	9104      	str	r1, [sp, #16]
 8008b2a:	e7c2      	b.n	8008ab2 <_strtod_l+0x16a>
 8008b2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b2e:	1c5a      	adds	r2, r3, #1
 8008b30:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b32:	785b      	ldrb	r3, [r3, #1]
 8008b34:	3001      	adds	r0, #1
 8008b36:	2b30      	cmp	r3, #48	; 0x30
 8008b38:	d0f8      	beq.n	8008b2c <_strtod_l+0x1e4>
 8008b3a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008b3e:	2a08      	cmp	r2, #8
 8008b40:	f200 84e4 	bhi.w	800950c <_strtod_l+0xbc4>
 8008b44:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008b46:	9208      	str	r2, [sp, #32]
 8008b48:	4602      	mov	r2, r0
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	4604      	mov	r4, r0
 8008b4e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8008b52:	f100 0101 	add.w	r1, r0, #1
 8008b56:	d012      	beq.n	8008b7e <_strtod_l+0x236>
 8008b58:	440a      	add	r2, r1
 8008b5a:	eb00 0c04 	add.w	ip, r0, r4
 8008b5e:	4621      	mov	r1, r4
 8008b60:	270a      	movs	r7, #10
 8008b62:	458c      	cmp	ip, r1
 8008b64:	d113      	bne.n	8008b8e <_strtod_l+0x246>
 8008b66:	1821      	adds	r1, r4, r0
 8008b68:	2908      	cmp	r1, #8
 8008b6a:	f104 0401 	add.w	r4, r4, #1
 8008b6e:	4404      	add	r4, r0
 8008b70:	dc19      	bgt.n	8008ba6 <_strtod_l+0x25e>
 8008b72:	9b07      	ldr	r3, [sp, #28]
 8008b74:	210a      	movs	r1, #10
 8008b76:	fb01 e303 	mla	r3, r1, r3, lr
 8008b7a:	9307      	str	r3, [sp, #28]
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b80:	1c58      	adds	r0, r3, #1
 8008b82:	901b      	str	r0, [sp, #108]	; 0x6c
 8008b84:	785b      	ldrb	r3, [r3, #1]
 8008b86:	4608      	mov	r0, r1
 8008b88:	e7c9      	b.n	8008b1e <_strtod_l+0x1d6>
 8008b8a:	9805      	ldr	r0, [sp, #20]
 8008b8c:	e7d3      	b.n	8008b36 <_strtod_l+0x1ee>
 8008b8e:	2908      	cmp	r1, #8
 8008b90:	f101 0101 	add.w	r1, r1, #1
 8008b94:	dc03      	bgt.n	8008b9e <_strtod_l+0x256>
 8008b96:	9b07      	ldr	r3, [sp, #28]
 8008b98:	437b      	muls	r3, r7
 8008b9a:	9307      	str	r3, [sp, #28]
 8008b9c:	e7e1      	b.n	8008b62 <_strtod_l+0x21a>
 8008b9e:	2910      	cmp	r1, #16
 8008ba0:	bfd8      	it	le
 8008ba2:	437d      	mulle	r5, r7
 8008ba4:	e7dd      	b.n	8008b62 <_strtod_l+0x21a>
 8008ba6:	2c10      	cmp	r4, #16
 8008ba8:	bfdc      	itt	le
 8008baa:	210a      	movle	r1, #10
 8008bac:	fb01 e505 	mlale	r5, r1, r5, lr
 8008bb0:	e7e4      	b.n	8008b7c <_strtod_l+0x234>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	9304      	str	r3, [sp, #16]
 8008bb6:	e781      	b.n	8008abc <_strtod_l+0x174>
 8008bb8:	f04f 0c01 	mov.w	ip, #1
 8008bbc:	1cb3      	adds	r3, r6, #2
 8008bbe:	931b      	str	r3, [sp, #108]	; 0x6c
 8008bc0:	78b3      	ldrb	r3, [r6, #2]
 8008bc2:	e78a      	b.n	8008ada <_strtod_l+0x192>
 8008bc4:	f04f 0c00 	mov.w	ip, #0
 8008bc8:	e7f8      	b.n	8008bbc <_strtod_l+0x274>
 8008bca:	bf00      	nop
 8008bcc:	0800c304 	.word	0x0800c304
 8008bd0:	7ff00000 	.word	0x7ff00000
 8008bd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008bd6:	1c5f      	adds	r7, r3, #1
 8008bd8:	971b      	str	r7, [sp, #108]	; 0x6c
 8008bda:	785b      	ldrb	r3, [r3, #1]
 8008bdc:	2b30      	cmp	r3, #48	; 0x30
 8008bde:	d0f9      	beq.n	8008bd4 <_strtod_l+0x28c>
 8008be0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008be4:	2f08      	cmp	r7, #8
 8008be6:	f63f af7d 	bhi.w	8008ae4 <_strtod_l+0x19c>
 8008bea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008bee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008bf0:	930a      	str	r3, [sp, #40]	; 0x28
 8008bf2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008bf4:	1c5f      	adds	r7, r3, #1
 8008bf6:	971b      	str	r7, [sp, #108]	; 0x6c
 8008bf8:	785b      	ldrb	r3, [r3, #1]
 8008bfa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8008bfe:	f1b8 0f09 	cmp.w	r8, #9
 8008c02:	d937      	bls.n	8008c74 <_strtod_l+0x32c>
 8008c04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c06:	1a7f      	subs	r7, r7, r1
 8008c08:	2f08      	cmp	r7, #8
 8008c0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008c0e:	dc37      	bgt.n	8008c80 <_strtod_l+0x338>
 8008c10:	45be      	cmp	lr, r7
 8008c12:	bfa8      	it	ge
 8008c14:	46be      	movge	lr, r7
 8008c16:	f1bc 0f00 	cmp.w	ip, #0
 8008c1a:	d001      	beq.n	8008c20 <_strtod_l+0x2d8>
 8008c1c:	f1ce 0e00 	rsb	lr, lr, #0
 8008c20:	2c00      	cmp	r4, #0
 8008c22:	d151      	bne.n	8008cc8 <_strtod_l+0x380>
 8008c24:	2800      	cmp	r0, #0
 8008c26:	f47f aece 	bne.w	80089c6 <_strtod_l+0x7e>
 8008c2a:	9a06      	ldr	r2, [sp, #24]
 8008c2c:	2a00      	cmp	r2, #0
 8008c2e:	f47f aeca 	bne.w	80089c6 <_strtod_l+0x7e>
 8008c32:	9a04      	ldr	r2, [sp, #16]
 8008c34:	2a00      	cmp	r2, #0
 8008c36:	f47f aee4 	bne.w	8008a02 <_strtod_l+0xba>
 8008c3a:	2b4e      	cmp	r3, #78	; 0x4e
 8008c3c:	d027      	beq.n	8008c8e <_strtod_l+0x346>
 8008c3e:	dc21      	bgt.n	8008c84 <_strtod_l+0x33c>
 8008c40:	2b49      	cmp	r3, #73	; 0x49
 8008c42:	f47f aede 	bne.w	8008a02 <_strtod_l+0xba>
 8008c46:	49a0      	ldr	r1, [pc, #640]	; (8008ec8 <_strtod_l+0x580>)
 8008c48:	a81b      	add	r0, sp, #108	; 0x6c
 8008c4a:	f002 f835 	bl	800acb8 <__match>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	f43f aed7 	beq.w	8008a02 <_strtod_l+0xba>
 8008c54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c56:	499d      	ldr	r1, [pc, #628]	; (8008ecc <_strtod_l+0x584>)
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	a81b      	add	r0, sp, #108	; 0x6c
 8008c5c:	931b      	str	r3, [sp, #108]	; 0x6c
 8008c5e:	f002 f82b 	bl	800acb8 <__match>
 8008c62:	b910      	cbnz	r0, 8008c6a <_strtod_l+0x322>
 8008c64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c66:	3301      	adds	r3, #1
 8008c68:	931b      	str	r3, [sp, #108]	; 0x6c
 8008c6a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008ee0 <_strtod_l+0x598>
 8008c6e:	f04f 0a00 	mov.w	sl, #0
 8008c72:	e6a8      	b.n	80089c6 <_strtod_l+0x7e>
 8008c74:	210a      	movs	r1, #10
 8008c76:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008c7a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008c7e:	e7b8      	b.n	8008bf2 <_strtod_l+0x2aa>
 8008c80:	46be      	mov	lr, r7
 8008c82:	e7c8      	b.n	8008c16 <_strtod_l+0x2ce>
 8008c84:	2b69      	cmp	r3, #105	; 0x69
 8008c86:	d0de      	beq.n	8008c46 <_strtod_l+0x2fe>
 8008c88:	2b6e      	cmp	r3, #110	; 0x6e
 8008c8a:	f47f aeba 	bne.w	8008a02 <_strtod_l+0xba>
 8008c8e:	4990      	ldr	r1, [pc, #576]	; (8008ed0 <_strtod_l+0x588>)
 8008c90:	a81b      	add	r0, sp, #108	; 0x6c
 8008c92:	f002 f811 	bl	800acb8 <__match>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	f43f aeb3 	beq.w	8008a02 <_strtod_l+0xba>
 8008c9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	2b28      	cmp	r3, #40	; 0x28
 8008ca2:	d10e      	bne.n	8008cc2 <_strtod_l+0x37a>
 8008ca4:	aa1e      	add	r2, sp, #120	; 0x78
 8008ca6:	498b      	ldr	r1, [pc, #556]	; (8008ed4 <_strtod_l+0x58c>)
 8008ca8:	a81b      	add	r0, sp, #108	; 0x6c
 8008caa:	f002 f819 	bl	800ace0 <__hexnan>
 8008cae:	2805      	cmp	r0, #5
 8008cb0:	d107      	bne.n	8008cc2 <_strtod_l+0x37a>
 8008cb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008cb4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008cb8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008cbc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008cc0:	e681      	b.n	80089c6 <_strtod_l+0x7e>
 8008cc2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008ee8 <_strtod_l+0x5a0>
 8008cc6:	e7d2      	b.n	8008c6e <_strtod_l+0x326>
 8008cc8:	ebae 0302 	sub.w	r3, lr, r2
 8008ccc:	9306      	str	r3, [sp, #24]
 8008cce:	9b05      	ldr	r3, [sp, #20]
 8008cd0:	9807      	ldr	r0, [sp, #28]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	bf08      	it	eq
 8008cd6:	4623      	moveq	r3, r4
 8008cd8:	2c10      	cmp	r4, #16
 8008cda:	9305      	str	r3, [sp, #20]
 8008cdc:	46a0      	mov	r8, r4
 8008cde:	bfa8      	it	ge
 8008ce0:	f04f 0810 	movge.w	r8, #16
 8008ce4:	f7f7 fc26 	bl	8000534 <__aeabi_ui2d>
 8008ce8:	2c09      	cmp	r4, #9
 8008cea:	4682      	mov	sl, r0
 8008cec:	468b      	mov	fp, r1
 8008cee:	dc13      	bgt.n	8008d18 <_strtod_l+0x3d0>
 8008cf0:	9b06      	ldr	r3, [sp, #24]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f43f ae67 	beq.w	80089c6 <_strtod_l+0x7e>
 8008cf8:	9b06      	ldr	r3, [sp, #24]
 8008cfa:	dd7a      	ble.n	8008df2 <_strtod_l+0x4aa>
 8008cfc:	2b16      	cmp	r3, #22
 8008cfe:	dc61      	bgt.n	8008dc4 <_strtod_l+0x47c>
 8008d00:	4a75      	ldr	r2, [pc, #468]	; (8008ed8 <_strtod_l+0x590>)
 8008d02:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008d06:	e9de 0100 	ldrd	r0, r1, [lr]
 8008d0a:	4652      	mov	r2, sl
 8008d0c:	465b      	mov	r3, fp
 8008d0e:	f7f7 fc8b 	bl	8000628 <__aeabi_dmul>
 8008d12:	4682      	mov	sl, r0
 8008d14:	468b      	mov	fp, r1
 8008d16:	e656      	b.n	80089c6 <_strtod_l+0x7e>
 8008d18:	4b6f      	ldr	r3, [pc, #444]	; (8008ed8 <_strtod_l+0x590>)
 8008d1a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008d1e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d22:	f7f7 fc81 	bl	8000628 <__aeabi_dmul>
 8008d26:	4606      	mov	r6, r0
 8008d28:	4628      	mov	r0, r5
 8008d2a:	460f      	mov	r7, r1
 8008d2c:	f7f7 fc02 	bl	8000534 <__aeabi_ui2d>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	4630      	mov	r0, r6
 8008d36:	4639      	mov	r1, r7
 8008d38:	f7f7 fac0 	bl	80002bc <__adddf3>
 8008d3c:	2c0f      	cmp	r4, #15
 8008d3e:	4682      	mov	sl, r0
 8008d40:	468b      	mov	fp, r1
 8008d42:	ddd5      	ble.n	8008cf0 <_strtod_l+0x3a8>
 8008d44:	9b06      	ldr	r3, [sp, #24]
 8008d46:	eba4 0808 	sub.w	r8, r4, r8
 8008d4a:	4498      	add	r8, r3
 8008d4c:	f1b8 0f00 	cmp.w	r8, #0
 8008d50:	f340 8096 	ble.w	8008e80 <_strtod_l+0x538>
 8008d54:	f018 030f 	ands.w	r3, r8, #15
 8008d58:	d00a      	beq.n	8008d70 <_strtod_l+0x428>
 8008d5a:	495f      	ldr	r1, [pc, #380]	; (8008ed8 <_strtod_l+0x590>)
 8008d5c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d60:	4652      	mov	r2, sl
 8008d62:	465b      	mov	r3, fp
 8008d64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d68:	f7f7 fc5e 	bl	8000628 <__aeabi_dmul>
 8008d6c:	4682      	mov	sl, r0
 8008d6e:	468b      	mov	fp, r1
 8008d70:	f038 080f 	bics.w	r8, r8, #15
 8008d74:	d073      	beq.n	8008e5e <_strtod_l+0x516>
 8008d76:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008d7a:	dd47      	ble.n	8008e0c <_strtod_l+0x4c4>
 8008d7c:	2400      	movs	r4, #0
 8008d7e:	46a0      	mov	r8, r4
 8008d80:	9407      	str	r4, [sp, #28]
 8008d82:	9405      	str	r4, [sp, #20]
 8008d84:	2322      	movs	r3, #34	; 0x22
 8008d86:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008ee0 <_strtod_l+0x598>
 8008d8a:	f8c9 3000 	str.w	r3, [r9]
 8008d8e:	f04f 0a00 	mov.w	sl, #0
 8008d92:	9b07      	ldr	r3, [sp, #28]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f43f ae16 	beq.w	80089c6 <_strtod_l+0x7e>
 8008d9a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008d9c:	4648      	mov	r0, r9
 8008d9e:	f002 f8df 	bl	800af60 <_Bfree>
 8008da2:	9905      	ldr	r1, [sp, #20]
 8008da4:	4648      	mov	r0, r9
 8008da6:	f002 f8db 	bl	800af60 <_Bfree>
 8008daa:	4641      	mov	r1, r8
 8008dac:	4648      	mov	r0, r9
 8008dae:	f002 f8d7 	bl	800af60 <_Bfree>
 8008db2:	9907      	ldr	r1, [sp, #28]
 8008db4:	4648      	mov	r0, r9
 8008db6:	f002 f8d3 	bl	800af60 <_Bfree>
 8008dba:	4621      	mov	r1, r4
 8008dbc:	4648      	mov	r0, r9
 8008dbe:	f002 f8cf 	bl	800af60 <_Bfree>
 8008dc2:	e600      	b.n	80089c6 <_strtod_l+0x7e>
 8008dc4:	9a06      	ldr	r2, [sp, #24]
 8008dc6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	dbba      	blt.n	8008d44 <_strtod_l+0x3fc>
 8008dce:	4d42      	ldr	r5, [pc, #264]	; (8008ed8 <_strtod_l+0x590>)
 8008dd0:	f1c4 040f 	rsb	r4, r4, #15
 8008dd4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008dd8:	4652      	mov	r2, sl
 8008dda:	465b      	mov	r3, fp
 8008ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008de0:	f7f7 fc22 	bl	8000628 <__aeabi_dmul>
 8008de4:	9b06      	ldr	r3, [sp, #24]
 8008de6:	1b1c      	subs	r4, r3, r4
 8008de8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008dec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008df0:	e78d      	b.n	8008d0e <_strtod_l+0x3c6>
 8008df2:	f113 0f16 	cmn.w	r3, #22
 8008df6:	dba5      	blt.n	8008d44 <_strtod_l+0x3fc>
 8008df8:	4a37      	ldr	r2, [pc, #220]	; (8008ed8 <_strtod_l+0x590>)
 8008dfa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008dfe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008e02:	4650      	mov	r0, sl
 8008e04:	4659      	mov	r1, fp
 8008e06:	f7f7 fd39 	bl	800087c <__aeabi_ddiv>
 8008e0a:	e782      	b.n	8008d12 <_strtod_l+0x3ca>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	4e33      	ldr	r6, [pc, #204]	; (8008edc <_strtod_l+0x594>)
 8008e10:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008e14:	4650      	mov	r0, sl
 8008e16:	4659      	mov	r1, fp
 8008e18:	461d      	mov	r5, r3
 8008e1a:	f1b8 0f01 	cmp.w	r8, #1
 8008e1e:	dc21      	bgt.n	8008e64 <_strtod_l+0x51c>
 8008e20:	b10b      	cbz	r3, 8008e26 <_strtod_l+0x4de>
 8008e22:	4682      	mov	sl, r0
 8008e24:	468b      	mov	fp, r1
 8008e26:	4b2d      	ldr	r3, [pc, #180]	; (8008edc <_strtod_l+0x594>)
 8008e28:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008e2c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008e30:	4652      	mov	r2, sl
 8008e32:	465b      	mov	r3, fp
 8008e34:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008e38:	f7f7 fbf6 	bl	8000628 <__aeabi_dmul>
 8008e3c:	4b28      	ldr	r3, [pc, #160]	; (8008ee0 <_strtod_l+0x598>)
 8008e3e:	460a      	mov	r2, r1
 8008e40:	400b      	ands	r3, r1
 8008e42:	4928      	ldr	r1, [pc, #160]	; (8008ee4 <_strtod_l+0x59c>)
 8008e44:	428b      	cmp	r3, r1
 8008e46:	4682      	mov	sl, r0
 8008e48:	d898      	bhi.n	8008d7c <_strtod_l+0x434>
 8008e4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008e4e:	428b      	cmp	r3, r1
 8008e50:	bf86      	itte	hi
 8008e52:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008eec <_strtod_l+0x5a4>
 8008e56:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8008e5a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008e5e:	2300      	movs	r3, #0
 8008e60:	9304      	str	r3, [sp, #16]
 8008e62:	e077      	b.n	8008f54 <_strtod_l+0x60c>
 8008e64:	f018 0f01 	tst.w	r8, #1
 8008e68:	d006      	beq.n	8008e78 <_strtod_l+0x530>
 8008e6a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e72:	f7f7 fbd9 	bl	8000628 <__aeabi_dmul>
 8008e76:	2301      	movs	r3, #1
 8008e78:	3501      	adds	r5, #1
 8008e7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008e7e:	e7cc      	b.n	8008e1a <_strtod_l+0x4d2>
 8008e80:	d0ed      	beq.n	8008e5e <_strtod_l+0x516>
 8008e82:	f1c8 0800 	rsb	r8, r8, #0
 8008e86:	f018 020f 	ands.w	r2, r8, #15
 8008e8a:	d00a      	beq.n	8008ea2 <_strtod_l+0x55a>
 8008e8c:	4b12      	ldr	r3, [pc, #72]	; (8008ed8 <_strtod_l+0x590>)
 8008e8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e92:	4650      	mov	r0, sl
 8008e94:	4659      	mov	r1, fp
 8008e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9a:	f7f7 fcef 	bl	800087c <__aeabi_ddiv>
 8008e9e:	4682      	mov	sl, r0
 8008ea0:	468b      	mov	fp, r1
 8008ea2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008ea6:	d0da      	beq.n	8008e5e <_strtod_l+0x516>
 8008ea8:	f1b8 0f1f 	cmp.w	r8, #31
 8008eac:	dd20      	ble.n	8008ef0 <_strtod_l+0x5a8>
 8008eae:	2400      	movs	r4, #0
 8008eb0:	46a0      	mov	r8, r4
 8008eb2:	9407      	str	r4, [sp, #28]
 8008eb4:	9405      	str	r4, [sp, #20]
 8008eb6:	2322      	movs	r3, #34	; 0x22
 8008eb8:	f04f 0a00 	mov.w	sl, #0
 8008ebc:	f04f 0b00 	mov.w	fp, #0
 8008ec0:	f8c9 3000 	str.w	r3, [r9]
 8008ec4:	e765      	b.n	8008d92 <_strtod_l+0x44a>
 8008ec6:	bf00      	nop
 8008ec8:	0800c2cf 	.word	0x0800c2cf
 8008ecc:	0800c45c 	.word	0x0800c45c
 8008ed0:	0800c2d7 	.word	0x0800c2d7
 8008ed4:	0800c318 	.word	0x0800c318
 8008ed8:	0800c4f0 	.word	0x0800c4f0
 8008edc:	0800c4c8 	.word	0x0800c4c8
 8008ee0:	7ff00000 	.word	0x7ff00000
 8008ee4:	7ca00000 	.word	0x7ca00000
 8008ee8:	fff80000 	.word	0xfff80000
 8008eec:	7fefffff 	.word	0x7fefffff
 8008ef0:	f018 0310 	ands.w	r3, r8, #16
 8008ef4:	bf18      	it	ne
 8008ef6:	236a      	movne	r3, #106	; 0x6a
 8008ef8:	4da0      	ldr	r5, [pc, #640]	; (800917c <_strtod_l+0x834>)
 8008efa:	9304      	str	r3, [sp, #16]
 8008efc:	4650      	mov	r0, sl
 8008efe:	4659      	mov	r1, fp
 8008f00:	2300      	movs	r3, #0
 8008f02:	f1b8 0f00 	cmp.w	r8, #0
 8008f06:	f300 810a 	bgt.w	800911e <_strtod_l+0x7d6>
 8008f0a:	b10b      	cbz	r3, 8008f10 <_strtod_l+0x5c8>
 8008f0c:	4682      	mov	sl, r0
 8008f0e:	468b      	mov	fp, r1
 8008f10:	9b04      	ldr	r3, [sp, #16]
 8008f12:	b1bb      	cbz	r3, 8008f44 <_strtod_l+0x5fc>
 8008f14:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008f18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	4659      	mov	r1, fp
 8008f20:	dd10      	ble.n	8008f44 <_strtod_l+0x5fc>
 8008f22:	2b1f      	cmp	r3, #31
 8008f24:	f340 8107 	ble.w	8009136 <_strtod_l+0x7ee>
 8008f28:	2b34      	cmp	r3, #52	; 0x34
 8008f2a:	bfde      	ittt	le
 8008f2c:	3b20      	suble	r3, #32
 8008f2e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8008f32:	fa02 f303 	lslle.w	r3, r2, r3
 8008f36:	f04f 0a00 	mov.w	sl, #0
 8008f3a:	bfcc      	ite	gt
 8008f3c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008f40:	ea03 0b01 	andle.w	fp, r3, r1
 8008f44:	2200      	movs	r2, #0
 8008f46:	2300      	movs	r3, #0
 8008f48:	4650      	mov	r0, sl
 8008f4a:	4659      	mov	r1, fp
 8008f4c:	f7f7 fdd4 	bl	8000af8 <__aeabi_dcmpeq>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	d1ac      	bne.n	8008eae <_strtod_l+0x566>
 8008f54:	9b07      	ldr	r3, [sp, #28]
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	9a05      	ldr	r2, [sp, #20]
 8008f5a:	9908      	ldr	r1, [sp, #32]
 8008f5c:	4623      	mov	r3, r4
 8008f5e:	4648      	mov	r0, r9
 8008f60:	f002 f850 	bl	800b004 <__s2b>
 8008f64:	9007      	str	r0, [sp, #28]
 8008f66:	2800      	cmp	r0, #0
 8008f68:	f43f af08 	beq.w	8008d7c <_strtod_l+0x434>
 8008f6c:	9a06      	ldr	r2, [sp, #24]
 8008f6e:	9b06      	ldr	r3, [sp, #24]
 8008f70:	2a00      	cmp	r2, #0
 8008f72:	f1c3 0300 	rsb	r3, r3, #0
 8008f76:	bfa8      	it	ge
 8008f78:	2300      	movge	r3, #0
 8008f7a:	930e      	str	r3, [sp, #56]	; 0x38
 8008f7c:	2400      	movs	r4, #0
 8008f7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f82:	9316      	str	r3, [sp, #88]	; 0x58
 8008f84:	46a0      	mov	r8, r4
 8008f86:	9b07      	ldr	r3, [sp, #28]
 8008f88:	4648      	mov	r0, r9
 8008f8a:	6859      	ldr	r1, [r3, #4]
 8008f8c:	f001 ffb4 	bl	800aef8 <_Balloc>
 8008f90:	9005      	str	r0, [sp, #20]
 8008f92:	2800      	cmp	r0, #0
 8008f94:	f43f aef6 	beq.w	8008d84 <_strtod_l+0x43c>
 8008f98:	9b07      	ldr	r3, [sp, #28]
 8008f9a:	691a      	ldr	r2, [r3, #16]
 8008f9c:	3202      	adds	r2, #2
 8008f9e:	f103 010c 	add.w	r1, r3, #12
 8008fa2:	0092      	lsls	r2, r2, #2
 8008fa4:	300c      	adds	r0, #12
 8008fa6:	f7fe fdd7 	bl	8007b58 <memcpy>
 8008faa:	aa1e      	add	r2, sp, #120	; 0x78
 8008fac:	a91d      	add	r1, sp, #116	; 0x74
 8008fae:	ec4b ab10 	vmov	d0, sl, fp
 8008fb2:	4648      	mov	r0, r9
 8008fb4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008fb8:	f002 fae0 	bl	800b57c <__d2b>
 8008fbc:	901c      	str	r0, [sp, #112]	; 0x70
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	f43f aee0 	beq.w	8008d84 <_strtod_l+0x43c>
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	4648      	mov	r0, r9
 8008fc8:	f002 f8a8 	bl	800b11c <__i2b>
 8008fcc:	4680      	mov	r8, r0
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	f43f aed8 	beq.w	8008d84 <_strtod_l+0x43c>
 8008fd4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008fd6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008fd8:	2e00      	cmp	r6, #0
 8008fda:	bfab      	itete	ge
 8008fdc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008fde:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008fe0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008fe2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8008fe4:	bfac      	ite	ge
 8008fe6:	18f7      	addge	r7, r6, r3
 8008fe8:	1b9d      	sublt	r5, r3, r6
 8008fea:	9b04      	ldr	r3, [sp, #16]
 8008fec:	1af6      	subs	r6, r6, r3
 8008fee:	4416      	add	r6, r2
 8008ff0:	4b63      	ldr	r3, [pc, #396]	; (8009180 <_strtod_l+0x838>)
 8008ff2:	3e01      	subs	r6, #1
 8008ff4:	429e      	cmp	r6, r3
 8008ff6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008ffa:	f280 80af 	bge.w	800915c <_strtod_l+0x814>
 8008ffe:	1b9b      	subs	r3, r3, r6
 8009000:	2b1f      	cmp	r3, #31
 8009002:	eba2 0203 	sub.w	r2, r2, r3
 8009006:	f04f 0101 	mov.w	r1, #1
 800900a:	f300 809b 	bgt.w	8009144 <_strtod_l+0x7fc>
 800900e:	fa01 f303 	lsl.w	r3, r1, r3
 8009012:	930f      	str	r3, [sp, #60]	; 0x3c
 8009014:	2300      	movs	r3, #0
 8009016:	930a      	str	r3, [sp, #40]	; 0x28
 8009018:	18be      	adds	r6, r7, r2
 800901a:	9b04      	ldr	r3, [sp, #16]
 800901c:	42b7      	cmp	r7, r6
 800901e:	4415      	add	r5, r2
 8009020:	441d      	add	r5, r3
 8009022:	463b      	mov	r3, r7
 8009024:	bfa8      	it	ge
 8009026:	4633      	movge	r3, r6
 8009028:	42ab      	cmp	r3, r5
 800902a:	bfa8      	it	ge
 800902c:	462b      	movge	r3, r5
 800902e:	2b00      	cmp	r3, #0
 8009030:	bfc2      	ittt	gt
 8009032:	1af6      	subgt	r6, r6, r3
 8009034:	1aed      	subgt	r5, r5, r3
 8009036:	1aff      	subgt	r7, r7, r3
 8009038:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800903a:	b1bb      	cbz	r3, 800906c <_strtod_l+0x724>
 800903c:	4641      	mov	r1, r8
 800903e:	461a      	mov	r2, r3
 8009040:	4648      	mov	r0, r9
 8009042:	f002 f90b 	bl	800b25c <__pow5mult>
 8009046:	4680      	mov	r8, r0
 8009048:	2800      	cmp	r0, #0
 800904a:	f43f ae9b 	beq.w	8008d84 <_strtod_l+0x43c>
 800904e:	4601      	mov	r1, r0
 8009050:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009052:	4648      	mov	r0, r9
 8009054:	f002 f86b 	bl	800b12e <__multiply>
 8009058:	900c      	str	r0, [sp, #48]	; 0x30
 800905a:	2800      	cmp	r0, #0
 800905c:	f43f ae92 	beq.w	8008d84 <_strtod_l+0x43c>
 8009060:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009062:	4648      	mov	r0, r9
 8009064:	f001 ff7c 	bl	800af60 <_Bfree>
 8009068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800906a:	931c      	str	r3, [sp, #112]	; 0x70
 800906c:	2e00      	cmp	r6, #0
 800906e:	dc7a      	bgt.n	8009166 <_strtod_l+0x81e>
 8009070:	9b06      	ldr	r3, [sp, #24]
 8009072:	2b00      	cmp	r3, #0
 8009074:	dd08      	ble.n	8009088 <_strtod_l+0x740>
 8009076:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009078:	9905      	ldr	r1, [sp, #20]
 800907a:	4648      	mov	r0, r9
 800907c:	f002 f8ee 	bl	800b25c <__pow5mult>
 8009080:	9005      	str	r0, [sp, #20]
 8009082:	2800      	cmp	r0, #0
 8009084:	f43f ae7e 	beq.w	8008d84 <_strtod_l+0x43c>
 8009088:	2d00      	cmp	r5, #0
 800908a:	dd08      	ble.n	800909e <_strtod_l+0x756>
 800908c:	462a      	mov	r2, r5
 800908e:	9905      	ldr	r1, [sp, #20]
 8009090:	4648      	mov	r0, r9
 8009092:	f002 f931 	bl	800b2f8 <__lshift>
 8009096:	9005      	str	r0, [sp, #20]
 8009098:	2800      	cmp	r0, #0
 800909a:	f43f ae73 	beq.w	8008d84 <_strtod_l+0x43c>
 800909e:	2f00      	cmp	r7, #0
 80090a0:	dd08      	ble.n	80090b4 <_strtod_l+0x76c>
 80090a2:	4641      	mov	r1, r8
 80090a4:	463a      	mov	r2, r7
 80090a6:	4648      	mov	r0, r9
 80090a8:	f002 f926 	bl	800b2f8 <__lshift>
 80090ac:	4680      	mov	r8, r0
 80090ae:	2800      	cmp	r0, #0
 80090b0:	f43f ae68 	beq.w	8008d84 <_strtod_l+0x43c>
 80090b4:	9a05      	ldr	r2, [sp, #20]
 80090b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80090b8:	4648      	mov	r0, r9
 80090ba:	f002 f98b 	bl	800b3d4 <__mdiff>
 80090be:	4604      	mov	r4, r0
 80090c0:	2800      	cmp	r0, #0
 80090c2:	f43f ae5f 	beq.w	8008d84 <_strtod_l+0x43c>
 80090c6:	68c3      	ldr	r3, [r0, #12]
 80090c8:	930c      	str	r3, [sp, #48]	; 0x30
 80090ca:	2300      	movs	r3, #0
 80090cc:	60c3      	str	r3, [r0, #12]
 80090ce:	4641      	mov	r1, r8
 80090d0:	f002 f966 	bl	800b3a0 <__mcmp>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	da55      	bge.n	8009184 <_strtod_l+0x83c>
 80090d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090da:	b9e3      	cbnz	r3, 8009116 <_strtod_l+0x7ce>
 80090dc:	f1ba 0f00 	cmp.w	sl, #0
 80090e0:	d119      	bne.n	8009116 <_strtod_l+0x7ce>
 80090e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090e6:	b9b3      	cbnz	r3, 8009116 <_strtod_l+0x7ce>
 80090e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80090ec:	0d1b      	lsrs	r3, r3, #20
 80090ee:	051b      	lsls	r3, r3, #20
 80090f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80090f4:	d90f      	bls.n	8009116 <_strtod_l+0x7ce>
 80090f6:	6963      	ldr	r3, [r4, #20]
 80090f8:	b913      	cbnz	r3, 8009100 <_strtod_l+0x7b8>
 80090fa:	6923      	ldr	r3, [r4, #16]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	dd0a      	ble.n	8009116 <_strtod_l+0x7ce>
 8009100:	4621      	mov	r1, r4
 8009102:	2201      	movs	r2, #1
 8009104:	4648      	mov	r0, r9
 8009106:	f002 f8f7 	bl	800b2f8 <__lshift>
 800910a:	4641      	mov	r1, r8
 800910c:	4604      	mov	r4, r0
 800910e:	f002 f947 	bl	800b3a0 <__mcmp>
 8009112:	2800      	cmp	r0, #0
 8009114:	dc67      	bgt.n	80091e6 <_strtod_l+0x89e>
 8009116:	9b04      	ldr	r3, [sp, #16]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d171      	bne.n	8009200 <_strtod_l+0x8b8>
 800911c:	e63d      	b.n	8008d9a <_strtod_l+0x452>
 800911e:	f018 0f01 	tst.w	r8, #1
 8009122:	d004      	beq.n	800912e <_strtod_l+0x7e6>
 8009124:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009128:	f7f7 fa7e 	bl	8000628 <__aeabi_dmul>
 800912c:	2301      	movs	r3, #1
 800912e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009132:	3508      	adds	r5, #8
 8009134:	e6e5      	b.n	8008f02 <_strtod_l+0x5ba>
 8009136:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800913a:	fa02 f303 	lsl.w	r3, r2, r3
 800913e:	ea03 0a0a 	and.w	sl, r3, sl
 8009142:	e6ff      	b.n	8008f44 <_strtod_l+0x5fc>
 8009144:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009148:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800914c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009150:	36e2      	adds	r6, #226	; 0xe2
 8009152:	fa01 f306 	lsl.w	r3, r1, r6
 8009156:	930a      	str	r3, [sp, #40]	; 0x28
 8009158:	910f      	str	r1, [sp, #60]	; 0x3c
 800915a:	e75d      	b.n	8009018 <_strtod_l+0x6d0>
 800915c:	2300      	movs	r3, #0
 800915e:	930a      	str	r3, [sp, #40]	; 0x28
 8009160:	2301      	movs	r3, #1
 8009162:	930f      	str	r3, [sp, #60]	; 0x3c
 8009164:	e758      	b.n	8009018 <_strtod_l+0x6d0>
 8009166:	4632      	mov	r2, r6
 8009168:	991c      	ldr	r1, [sp, #112]	; 0x70
 800916a:	4648      	mov	r0, r9
 800916c:	f002 f8c4 	bl	800b2f8 <__lshift>
 8009170:	901c      	str	r0, [sp, #112]	; 0x70
 8009172:	2800      	cmp	r0, #0
 8009174:	f47f af7c 	bne.w	8009070 <_strtod_l+0x728>
 8009178:	e604      	b.n	8008d84 <_strtod_l+0x43c>
 800917a:	bf00      	nop
 800917c:	0800c330 	.word	0x0800c330
 8009180:	fffffc02 	.word	0xfffffc02
 8009184:	465d      	mov	r5, fp
 8009186:	f040 8086 	bne.w	8009296 <_strtod_l+0x94e>
 800918a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800918c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009190:	b32a      	cbz	r2, 80091de <_strtod_l+0x896>
 8009192:	4aaf      	ldr	r2, [pc, #700]	; (8009450 <_strtod_l+0xb08>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d153      	bne.n	8009240 <_strtod_l+0x8f8>
 8009198:	9b04      	ldr	r3, [sp, #16]
 800919a:	4650      	mov	r0, sl
 800919c:	b1d3      	cbz	r3, 80091d4 <_strtod_l+0x88c>
 800919e:	4aad      	ldr	r2, [pc, #692]	; (8009454 <_strtod_l+0xb0c>)
 80091a0:	402a      	ands	r2, r5
 80091a2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80091a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80091aa:	d816      	bhi.n	80091da <_strtod_l+0x892>
 80091ac:	0d12      	lsrs	r2, r2, #20
 80091ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80091b2:	fa01 f303 	lsl.w	r3, r1, r3
 80091b6:	4298      	cmp	r0, r3
 80091b8:	d142      	bne.n	8009240 <_strtod_l+0x8f8>
 80091ba:	4ba7      	ldr	r3, [pc, #668]	; (8009458 <_strtod_l+0xb10>)
 80091bc:	429d      	cmp	r5, r3
 80091be:	d102      	bne.n	80091c6 <_strtod_l+0x87e>
 80091c0:	3001      	adds	r0, #1
 80091c2:	f43f addf 	beq.w	8008d84 <_strtod_l+0x43c>
 80091c6:	4ba3      	ldr	r3, [pc, #652]	; (8009454 <_strtod_l+0xb0c>)
 80091c8:	402b      	ands	r3, r5
 80091ca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80091ce:	f04f 0a00 	mov.w	sl, #0
 80091d2:	e7a0      	b.n	8009116 <_strtod_l+0x7ce>
 80091d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091d8:	e7ed      	b.n	80091b6 <_strtod_l+0x86e>
 80091da:	460b      	mov	r3, r1
 80091dc:	e7eb      	b.n	80091b6 <_strtod_l+0x86e>
 80091de:	bb7b      	cbnz	r3, 8009240 <_strtod_l+0x8f8>
 80091e0:	f1ba 0f00 	cmp.w	sl, #0
 80091e4:	d12c      	bne.n	8009240 <_strtod_l+0x8f8>
 80091e6:	9904      	ldr	r1, [sp, #16]
 80091e8:	4a9a      	ldr	r2, [pc, #616]	; (8009454 <_strtod_l+0xb0c>)
 80091ea:	465b      	mov	r3, fp
 80091ec:	b1f1      	cbz	r1, 800922c <_strtod_l+0x8e4>
 80091ee:	ea02 010b 	and.w	r1, r2, fp
 80091f2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80091f6:	dc19      	bgt.n	800922c <_strtod_l+0x8e4>
 80091f8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80091fc:	f77f ae5b 	ble.w	8008eb6 <_strtod_l+0x56e>
 8009200:	4a96      	ldr	r2, [pc, #600]	; (800945c <_strtod_l+0xb14>)
 8009202:	2300      	movs	r3, #0
 8009204:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009208:	4650      	mov	r0, sl
 800920a:	4659      	mov	r1, fp
 800920c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009210:	f7f7 fa0a 	bl	8000628 <__aeabi_dmul>
 8009214:	4682      	mov	sl, r0
 8009216:	468b      	mov	fp, r1
 8009218:	2900      	cmp	r1, #0
 800921a:	f47f adbe 	bne.w	8008d9a <_strtod_l+0x452>
 800921e:	2800      	cmp	r0, #0
 8009220:	f47f adbb 	bne.w	8008d9a <_strtod_l+0x452>
 8009224:	2322      	movs	r3, #34	; 0x22
 8009226:	f8c9 3000 	str.w	r3, [r9]
 800922a:	e5b6      	b.n	8008d9a <_strtod_l+0x452>
 800922c:	4013      	ands	r3, r2
 800922e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009232:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009236:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800923a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800923e:	e76a      	b.n	8009116 <_strtod_l+0x7ce>
 8009240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009242:	b193      	cbz	r3, 800926a <_strtod_l+0x922>
 8009244:	422b      	tst	r3, r5
 8009246:	f43f af66 	beq.w	8009116 <_strtod_l+0x7ce>
 800924a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800924c:	9a04      	ldr	r2, [sp, #16]
 800924e:	4650      	mov	r0, sl
 8009250:	4659      	mov	r1, fp
 8009252:	b173      	cbz	r3, 8009272 <_strtod_l+0x92a>
 8009254:	f7ff fb5c 	bl	8008910 <sulp>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009260:	f7f7 f82c 	bl	80002bc <__adddf3>
 8009264:	4682      	mov	sl, r0
 8009266:	468b      	mov	fp, r1
 8009268:	e755      	b.n	8009116 <_strtod_l+0x7ce>
 800926a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800926c:	ea13 0f0a 	tst.w	r3, sl
 8009270:	e7e9      	b.n	8009246 <_strtod_l+0x8fe>
 8009272:	f7ff fb4d 	bl	8008910 <sulp>
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800927e:	f7f7 f81b 	bl	80002b8 <__aeabi_dsub>
 8009282:	2200      	movs	r2, #0
 8009284:	2300      	movs	r3, #0
 8009286:	4682      	mov	sl, r0
 8009288:	468b      	mov	fp, r1
 800928a:	f7f7 fc35 	bl	8000af8 <__aeabi_dcmpeq>
 800928e:	2800      	cmp	r0, #0
 8009290:	f47f ae11 	bne.w	8008eb6 <_strtod_l+0x56e>
 8009294:	e73f      	b.n	8009116 <_strtod_l+0x7ce>
 8009296:	4641      	mov	r1, r8
 8009298:	4620      	mov	r0, r4
 800929a:	f002 f9be 	bl	800b61a <__ratio>
 800929e:	ec57 6b10 	vmov	r6, r7, d0
 80092a2:	2200      	movs	r2, #0
 80092a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092a8:	ee10 0a10 	vmov	r0, s0
 80092ac:	4639      	mov	r1, r7
 80092ae:	f7f7 fc37 	bl	8000b20 <__aeabi_dcmple>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d077      	beq.n	80093a6 <_strtod_l+0xa5e>
 80092b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d04a      	beq.n	8009352 <_strtod_l+0xa0a>
 80092bc:	4b68      	ldr	r3, [pc, #416]	; (8009460 <_strtod_l+0xb18>)
 80092be:	2200      	movs	r2, #0
 80092c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80092c4:	4f66      	ldr	r7, [pc, #408]	; (8009460 <_strtod_l+0xb18>)
 80092c6:	2600      	movs	r6, #0
 80092c8:	4b62      	ldr	r3, [pc, #392]	; (8009454 <_strtod_l+0xb0c>)
 80092ca:	402b      	ands	r3, r5
 80092cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80092ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80092d0:	4b64      	ldr	r3, [pc, #400]	; (8009464 <_strtod_l+0xb1c>)
 80092d2:	429a      	cmp	r2, r3
 80092d4:	f040 80ce 	bne.w	8009474 <_strtod_l+0xb2c>
 80092d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80092dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092e0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80092e4:	ec4b ab10 	vmov	d0, sl, fp
 80092e8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80092ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80092f0:	f002 f8ce 	bl	800b490 <__ulp>
 80092f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092f8:	ec53 2b10 	vmov	r2, r3, d0
 80092fc:	f7f7 f994 	bl	8000628 <__aeabi_dmul>
 8009300:	4652      	mov	r2, sl
 8009302:	465b      	mov	r3, fp
 8009304:	f7f6 ffda 	bl	80002bc <__adddf3>
 8009308:	460b      	mov	r3, r1
 800930a:	4952      	ldr	r1, [pc, #328]	; (8009454 <_strtod_l+0xb0c>)
 800930c:	4a56      	ldr	r2, [pc, #344]	; (8009468 <_strtod_l+0xb20>)
 800930e:	4019      	ands	r1, r3
 8009310:	4291      	cmp	r1, r2
 8009312:	4682      	mov	sl, r0
 8009314:	d95b      	bls.n	80093ce <_strtod_l+0xa86>
 8009316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009318:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800931c:	4293      	cmp	r3, r2
 800931e:	d103      	bne.n	8009328 <_strtod_l+0x9e0>
 8009320:	9b08      	ldr	r3, [sp, #32]
 8009322:	3301      	adds	r3, #1
 8009324:	f43f ad2e 	beq.w	8008d84 <_strtod_l+0x43c>
 8009328:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009458 <_strtod_l+0xb10>
 800932c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009330:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009332:	4648      	mov	r0, r9
 8009334:	f001 fe14 	bl	800af60 <_Bfree>
 8009338:	9905      	ldr	r1, [sp, #20]
 800933a:	4648      	mov	r0, r9
 800933c:	f001 fe10 	bl	800af60 <_Bfree>
 8009340:	4641      	mov	r1, r8
 8009342:	4648      	mov	r0, r9
 8009344:	f001 fe0c 	bl	800af60 <_Bfree>
 8009348:	4621      	mov	r1, r4
 800934a:	4648      	mov	r0, r9
 800934c:	f001 fe08 	bl	800af60 <_Bfree>
 8009350:	e619      	b.n	8008f86 <_strtod_l+0x63e>
 8009352:	f1ba 0f00 	cmp.w	sl, #0
 8009356:	d11a      	bne.n	800938e <_strtod_l+0xa46>
 8009358:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800935c:	b9eb      	cbnz	r3, 800939a <_strtod_l+0xa52>
 800935e:	2200      	movs	r2, #0
 8009360:	4b3f      	ldr	r3, [pc, #252]	; (8009460 <_strtod_l+0xb18>)
 8009362:	4630      	mov	r0, r6
 8009364:	4639      	mov	r1, r7
 8009366:	f7f7 fbd1 	bl	8000b0c <__aeabi_dcmplt>
 800936a:	b9c8      	cbnz	r0, 80093a0 <_strtod_l+0xa58>
 800936c:	4630      	mov	r0, r6
 800936e:	4639      	mov	r1, r7
 8009370:	2200      	movs	r2, #0
 8009372:	4b3e      	ldr	r3, [pc, #248]	; (800946c <_strtod_l+0xb24>)
 8009374:	f7f7 f958 	bl	8000628 <__aeabi_dmul>
 8009378:	4606      	mov	r6, r0
 800937a:	460f      	mov	r7, r1
 800937c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009380:	9618      	str	r6, [sp, #96]	; 0x60
 8009382:	9319      	str	r3, [sp, #100]	; 0x64
 8009384:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009388:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800938c:	e79c      	b.n	80092c8 <_strtod_l+0x980>
 800938e:	f1ba 0f01 	cmp.w	sl, #1
 8009392:	d102      	bne.n	800939a <_strtod_l+0xa52>
 8009394:	2d00      	cmp	r5, #0
 8009396:	f43f ad8e 	beq.w	8008eb6 <_strtod_l+0x56e>
 800939a:	2200      	movs	r2, #0
 800939c:	4b34      	ldr	r3, [pc, #208]	; (8009470 <_strtod_l+0xb28>)
 800939e:	e78f      	b.n	80092c0 <_strtod_l+0x978>
 80093a0:	2600      	movs	r6, #0
 80093a2:	4f32      	ldr	r7, [pc, #200]	; (800946c <_strtod_l+0xb24>)
 80093a4:	e7ea      	b.n	800937c <_strtod_l+0xa34>
 80093a6:	4b31      	ldr	r3, [pc, #196]	; (800946c <_strtod_l+0xb24>)
 80093a8:	4630      	mov	r0, r6
 80093aa:	4639      	mov	r1, r7
 80093ac:	2200      	movs	r2, #0
 80093ae:	f7f7 f93b 	bl	8000628 <__aeabi_dmul>
 80093b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093b4:	4606      	mov	r6, r0
 80093b6:	460f      	mov	r7, r1
 80093b8:	b933      	cbnz	r3, 80093c8 <_strtod_l+0xa80>
 80093ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093be:	9010      	str	r0, [sp, #64]	; 0x40
 80093c0:	9311      	str	r3, [sp, #68]	; 0x44
 80093c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80093c6:	e7df      	b.n	8009388 <_strtod_l+0xa40>
 80093c8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80093cc:	e7f9      	b.n	80093c2 <_strtod_l+0xa7a>
 80093ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80093d2:	9b04      	ldr	r3, [sp, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1ab      	bne.n	8009330 <_strtod_l+0x9e8>
 80093d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80093dc:	0d1b      	lsrs	r3, r3, #20
 80093de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80093e0:	051b      	lsls	r3, r3, #20
 80093e2:	429a      	cmp	r2, r3
 80093e4:	465d      	mov	r5, fp
 80093e6:	d1a3      	bne.n	8009330 <_strtod_l+0x9e8>
 80093e8:	4639      	mov	r1, r7
 80093ea:	4630      	mov	r0, r6
 80093ec:	f7f7 fbcc 	bl	8000b88 <__aeabi_d2iz>
 80093f0:	f7f7 f8b0 	bl	8000554 <__aeabi_i2d>
 80093f4:	460b      	mov	r3, r1
 80093f6:	4602      	mov	r2, r0
 80093f8:	4639      	mov	r1, r7
 80093fa:	4630      	mov	r0, r6
 80093fc:	f7f6 ff5c 	bl	80002b8 <__aeabi_dsub>
 8009400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009402:	4606      	mov	r6, r0
 8009404:	460f      	mov	r7, r1
 8009406:	b933      	cbnz	r3, 8009416 <_strtod_l+0xace>
 8009408:	f1ba 0f00 	cmp.w	sl, #0
 800940c:	d103      	bne.n	8009416 <_strtod_l+0xace>
 800940e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8009412:	2d00      	cmp	r5, #0
 8009414:	d06d      	beq.n	80094f2 <_strtod_l+0xbaa>
 8009416:	a30a      	add	r3, pc, #40	; (adr r3, 8009440 <_strtod_l+0xaf8>)
 8009418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941c:	4630      	mov	r0, r6
 800941e:	4639      	mov	r1, r7
 8009420:	f7f7 fb74 	bl	8000b0c <__aeabi_dcmplt>
 8009424:	2800      	cmp	r0, #0
 8009426:	f47f acb8 	bne.w	8008d9a <_strtod_l+0x452>
 800942a:	a307      	add	r3, pc, #28	; (adr r3, 8009448 <_strtod_l+0xb00>)
 800942c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009430:	4630      	mov	r0, r6
 8009432:	4639      	mov	r1, r7
 8009434:	f7f7 fb88 	bl	8000b48 <__aeabi_dcmpgt>
 8009438:	2800      	cmp	r0, #0
 800943a:	f43f af79 	beq.w	8009330 <_strtod_l+0x9e8>
 800943e:	e4ac      	b.n	8008d9a <_strtod_l+0x452>
 8009440:	94a03595 	.word	0x94a03595
 8009444:	3fdfffff 	.word	0x3fdfffff
 8009448:	35afe535 	.word	0x35afe535
 800944c:	3fe00000 	.word	0x3fe00000
 8009450:	000fffff 	.word	0x000fffff
 8009454:	7ff00000 	.word	0x7ff00000
 8009458:	7fefffff 	.word	0x7fefffff
 800945c:	39500000 	.word	0x39500000
 8009460:	3ff00000 	.word	0x3ff00000
 8009464:	7fe00000 	.word	0x7fe00000
 8009468:	7c9fffff 	.word	0x7c9fffff
 800946c:	3fe00000 	.word	0x3fe00000
 8009470:	bff00000 	.word	0xbff00000
 8009474:	9b04      	ldr	r3, [sp, #16]
 8009476:	b333      	cbz	r3, 80094c6 <_strtod_l+0xb7e>
 8009478:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800947a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800947e:	d822      	bhi.n	80094c6 <_strtod_l+0xb7e>
 8009480:	a327      	add	r3, pc, #156	; (adr r3, 8009520 <_strtod_l+0xbd8>)
 8009482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009486:	4630      	mov	r0, r6
 8009488:	4639      	mov	r1, r7
 800948a:	f7f7 fb49 	bl	8000b20 <__aeabi_dcmple>
 800948e:	b1a0      	cbz	r0, 80094ba <_strtod_l+0xb72>
 8009490:	4639      	mov	r1, r7
 8009492:	4630      	mov	r0, r6
 8009494:	f7f7 fba0 	bl	8000bd8 <__aeabi_d2uiz>
 8009498:	2800      	cmp	r0, #0
 800949a:	bf08      	it	eq
 800949c:	2001      	moveq	r0, #1
 800949e:	f7f7 f849 	bl	8000534 <__aeabi_ui2d>
 80094a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094a4:	4606      	mov	r6, r0
 80094a6:	460f      	mov	r7, r1
 80094a8:	bb03      	cbnz	r3, 80094ec <_strtod_l+0xba4>
 80094aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094ae:	9012      	str	r0, [sp, #72]	; 0x48
 80094b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80094b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80094b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80094ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80094be:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80094c2:	1a9b      	subs	r3, r3, r2
 80094c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80094c6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80094ca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80094ce:	f001 ffdf 	bl	800b490 <__ulp>
 80094d2:	4650      	mov	r0, sl
 80094d4:	ec53 2b10 	vmov	r2, r3, d0
 80094d8:	4659      	mov	r1, fp
 80094da:	f7f7 f8a5 	bl	8000628 <__aeabi_dmul>
 80094de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80094e2:	f7f6 feeb 	bl	80002bc <__adddf3>
 80094e6:	4682      	mov	sl, r0
 80094e8:	468b      	mov	fp, r1
 80094ea:	e772      	b.n	80093d2 <_strtod_l+0xa8a>
 80094ec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80094f0:	e7df      	b.n	80094b2 <_strtod_l+0xb6a>
 80094f2:	a30d      	add	r3, pc, #52	; (adr r3, 8009528 <_strtod_l+0xbe0>)
 80094f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f8:	f7f7 fb08 	bl	8000b0c <__aeabi_dcmplt>
 80094fc:	e79c      	b.n	8009438 <_strtod_l+0xaf0>
 80094fe:	2300      	movs	r3, #0
 8009500:	930d      	str	r3, [sp, #52]	; 0x34
 8009502:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009504:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009506:	6013      	str	r3, [r2, #0]
 8009508:	f7ff ba61 	b.w	80089ce <_strtod_l+0x86>
 800950c:	2b65      	cmp	r3, #101	; 0x65
 800950e:	f04f 0200 	mov.w	r2, #0
 8009512:	f43f ab4e 	beq.w	8008bb2 <_strtod_l+0x26a>
 8009516:	2101      	movs	r1, #1
 8009518:	4614      	mov	r4, r2
 800951a:	9104      	str	r1, [sp, #16]
 800951c:	f7ff bacb 	b.w	8008ab6 <_strtod_l+0x16e>
 8009520:	ffc00000 	.word	0xffc00000
 8009524:	41dfffff 	.word	0x41dfffff
 8009528:	94a03595 	.word	0x94a03595
 800952c:	3fcfffff 	.word	0x3fcfffff

08009530 <_strtod_r>:
 8009530:	4b05      	ldr	r3, [pc, #20]	; (8009548 <_strtod_r+0x18>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	b410      	push	{r4}
 8009536:	6a1b      	ldr	r3, [r3, #32]
 8009538:	4c04      	ldr	r4, [pc, #16]	; (800954c <_strtod_r+0x1c>)
 800953a:	2b00      	cmp	r3, #0
 800953c:	bf08      	it	eq
 800953e:	4623      	moveq	r3, r4
 8009540:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009544:	f7ff ba00 	b.w	8008948 <_strtod_l>
 8009548:	20000044 	.word	0x20000044
 800954c:	200000a8 	.word	0x200000a8

08009550 <_strtol_l.isra.0>:
 8009550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009554:	4680      	mov	r8, r0
 8009556:	4689      	mov	r9, r1
 8009558:	4692      	mov	sl, r2
 800955a:	461e      	mov	r6, r3
 800955c:	460f      	mov	r7, r1
 800955e:	463d      	mov	r5, r7
 8009560:	9808      	ldr	r0, [sp, #32]
 8009562:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009566:	f7fe fad3 	bl	8007b10 <__locale_ctype_ptr_l>
 800956a:	4420      	add	r0, r4
 800956c:	7843      	ldrb	r3, [r0, #1]
 800956e:	f013 0308 	ands.w	r3, r3, #8
 8009572:	d132      	bne.n	80095da <_strtol_l.isra.0+0x8a>
 8009574:	2c2d      	cmp	r4, #45	; 0x2d
 8009576:	d132      	bne.n	80095de <_strtol_l.isra.0+0x8e>
 8009578:	787c      	ldrb	r4, [r7, #1]
 800957a:	1cbd      	adds	r5, r7, #2
 800957c:	2201      	movs	r2, #1
 800957e:	2e00      	cmp	r6, #0
 8009580:	d05d      	beq.n	800963e <_strtol_l.isra.0+0xee>
 8009582:	2e10      	cmp	r6, #16
 8009584:	d109      	bne.n	800959a <_strtol_l.isra.0+0x4a>
 8009586:	2c30      	cmp	r4, #48	; 0x30
 8009588:	d107      	bne.n	800959a <_strtol_l.isra.0+0x4a>
 800958a:	782b      	ldrb	r3, [r5, #0]
 800958c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009590:	2b58      	cmp	r3, #88	; 0x58
 8009592:	d14f      	bne.n	8009634 <_strtol_l.isra.0+0xe4>
 8009594:	786c      	ldrb	r4, [r5, #1]
 8009596:	2610      	movs	r6, #16
 8009598:	3502      	adds	r5, #2
 800959a:	2a00      	cmp	r2, #0
 800959c:	bf14      	ite	ne
 800959e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80095a2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80095a6:	2700      	movs	r7, #0
 80095a8:	fbb1 fcf6 	udiv	ip, r1, r6
 80095ac:	4638      	mov	r0, r7
 80095ae:	fb06 1e1c 	mls	lr, r6, ip, r1
 80095b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80095b6:	2b09      	cmp	r3, #9
 80095b8:	d817      	bhi.n	80095ea <_strtol_l.isra.0+0x9a>
 80095ba:	461c      	mov	r4, r3
 80095bc:	42a6      	cmp	r6, r4
 80095be:	dd23      	ble.n	8009608 <_strtol_l.isra.0+0xb8>
 80095c0:	1c7b      	adds	r3, r7, #1
 80095c2:	d007      	beq.n	80095d4 <_strtol_l.isra.0+0x84>
 80095c4:	4584      	cmp	ip, r0
 80095c6:	d31c      	bcc.n	8009602 <_strtol_l.isra.0+0xb2>
 80095c8:	d101      	bne.n	80095ce <_strtol_l.isra.0+0x7e>
 80095ca:	45a6      	cmp	lr, r4
 80095cc:	db19      	blt.n	8009602 <_strtol_l.isra.0+0xb2>
 80095ce:	fb00 4006 	mla	r0, r0, r6, r4
 80095d2:	2701      	movs	r7, #1
 80095d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095d8:	e7eb      	b.n	80095b2 <_strtol_l.isra.0+0x62>
 80095da:	462f      	mov	r7, r5
 80095dc:	e7bf      	b.n	800955e <_strtol_l.isra.0+0xe>
 80095de:	2c2b      	cmp	r4, #43	; 0x2b
 80095e0:	bf04      	itt	eq
 80095e2:	1cbd      	addeq	r5, r7, #2
 80095e4:	787c      	ldrbeq	r4, [r7, #1]
 80095e6:	461a      	mov	r2, r3
 80095e8:	e7c9      	b.n	800957e <_strtol_l.isra.0+0x2e>
 80095ea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80095ee:	2b19      	cmp	r3, #25
 80095f0:	d801      	bhi.n	80095f6 <_strtol_l.isra.0+0xa6>
 80095f2:	3c37      	subs	r4, #55	; 0x37
 80095f4:	e7e2      	b.n	80095bc <_strtol_l.isra.0+0x6c>
 80095f6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80095fa:	2b19      	cmp	r3, #25
 80095fc:	d804      	bhi.n	8009608 <_strtol_l.isra.0+0xb8>
 80095fe:	3c57      	subs	r4, #87	; 0x57
 8009600:	e7dc      	b.n	80095bc <_strtol_l.isra.0+0x6c>
 8009602:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009606:	e7e5      	b.n	80095d4 <_strtol_l.isra.0+0x84>
 8009608:	1c7b      	adds	r3, r7, #1
 800960a:	d108      	bne.n	800961e <_strtol_l.isra.0+0xce>
 800960c:	2322      	movs	r3, #34	; 0x22
 800960e:	f8c8 3000 	str.w	r3, [r8]
 8009612:	4608      	mov	r0, r1
 8009614:	f1ba 0f00 	cmp.w	sl, #0
 8009618:	d107      	bne.n	800962a <_strtol_l.isra.0+0xda>
 800961a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800961e:	b102      	cbz	r2, 8009622 <_strtol_l.isra.0+0xd2>
 8009620:	4240      	negs	r0, r0
 8009622:	f1ba 0f00 	cmp.w	sl, #0
 8009626:	d0f8      	beq.n	800961a <_strtol_l.isra.0+0xca>
 8009628:	b10f      	cbz	r7, 800962e <_strtol_l.isra.0+0xde>
 800962a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800962e:	f8ca 9000 	str.w	r9, [sl]
 8009632:	e7f2      	b.n	800961a <_strtol_l.isra.0+0xca>
 8009634:	2430      	movs	r4, #48	; 0x30
 8009636:	2e00      	cmp	r6, #0
 8009638:	d1af      	bne.n	800959a <_strtol_l.isra.0+0x4a>
 800963a:	2608      	movs	r6, #8
 800963c:	e7ad      	b.n	800959a <_strtol_l.isra.0+0x4a>
 800963e:	2c30      	cmp	r4, #48	; 0x30
 8009640:	d0a3      	beq.n	800958a <_strtol_l.isra.0+0x3a>
 8009642:	260a      	movs	r6, #10
 8009644:	e7a9      	b.n	800959a <_strtol_l.isra.0+0x4a>
	...

08009648 <_strtol_r>:
 8009648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800964a:	4c06      	ldr	r4, [pc, #24]	; (8009664 <_strtol_r+0x1c>)
 800964c:	4d06      	ldr	r5, [pc, #24]	; (8009668 <_strtol_r+0x20>)
 800964e:	6824      	ldr	r4, [r4, #0]
 8009650:	6a24      	ldr	r4, [r4, #32]
 8009652:	2c00      	cmp	r4, #0
 8009654:	bf08      	it	eq
 8009656:	462c      	moveq	r4, r5
 8009658:	9400      	str	r4, [sp, #0]
 800965a:	f7ff ff79 	bl	8009550 <_strtol_l.isra.0>
 800965e:	b003      	add	sp, #12
 8009660:	bd30      	pop	{r4, r5, pc}
 8009662:	bf00      	nop
 8009664:	20000044 	.word	0x20000044
 8009668:	200000a8 	.word	0x200000a8

0800966c <strtol>:
 800966c:	4b08      	ldr	r3, [pc, #32]	; (8009690 <strtol+0x24>)
 800966e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009670:	681c      	ldr	r4, [r3, #0]
 8009672:	4d08      	ldr	r5, [pc, #32]	; (8009694 <strtol+0x28>)
 8009674:	6a23      	ldr	r3, [r4, #32]
 8009676:	2b00      	cmp	r3, #0
 8009678:	bf08      	it	eq
 800967a:	462b      	moveq	r3, r5
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	4613      	mov	r3, r2
 8009680:	460a      	mov	r2, r1
 8009682:	4601      	mov	r1, r0
 8009684:	4620      	mov	r0, r4
 8009686:	f7ff ff63 	bl	8009550 <_strtol_l.isra.0>
 800968a:	b003      	add	sp, #12
 800968c:	bd30      	pop	{r4, r5, pc}
 800968e:	bf00      	nop
 8009690:	20000044 	.word	0x20000044
 8009694:	200000a8 	.word	0x200000a8

08009698 <__swbuf_r>:
 8009698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969a:	460e      	mov	r6, r1
 800969c:	4614      	mov	r4, r2
 800969e:	4605      	mov	r5, r0
 80096a0:	b118      	cbz	r0, 80096aa <__swbuf_r+0x12>
 80096a2:	6983      	ldr	r3, [r0, #24]
 80096a4:	b90b      	cbnz	r3, 80096aa <__swbuf_r+0x12>
 80096a6:	f000 fffb 	bl	800a6a0 <__sinit>
 80096aa:	4b21      	ldr	r3, [pc, #132]	; (8009730 <__swbuf_r+0x98>)
 80096ac:	429c      	cmp	r4, r3
 80096ae:	d12a      	bne.n	8009706 <__swbuf_r+0x6e>
 80096b0:	686c      	ldr	r4, [r5, #4]
 80096b2:	69a3      	ldr	r3, [r4, #24]
 80096b4:	60a3      	str	r3, [r4, #8]
 80096b6:	89a3      	ldrh	r3, [r4, #12]
 80096b8:	071a      	lsls	r2, r3, #28
 80096ba:	d52e      	bpl.n	800971a <__swbuf_r+0x82>
 80096bc:	6923      	ldr	r3, [r4, #16]
 80096be:	b363      	cbz	r3, 800971a <__swbuf_r+0x82>
 80096c0:	6923      	ldr	r3, [r4, #16]
 80096c2:	6820      	ldr	r0, [r4, #0]
 80096c4:	1ac0      	subs	r0, r0, r3
 80096c6:	6963      	ldr	r3, [r4, #20]
 80096c8:	b2f6      	uxtb	r6, r6
 80096ca:	4283      	cmp	r3, r0
 80096cc:	4637      	mov	r7, r6
 80096ce:	dc04      	bgt.n	80096da <__swbuf_r+0x42>
 80096d0:	4621      	mov	r1, r4
 80096d2:	4628      	mov	r0, r5
 80096d4:	f000 ff7a 	bl	800a5cc <_fflush_r>
 80096d8:	bb28      	cbnz	r0, 8009726 <__swbuf_r+0x8e>
 80096da:	68a3      	ldr	r3, [r4, #8]
 80096dc:	3b01      	subs	r3, #1
 80096de:	60a3      	str	r3, [r4, #8]
 80096e0:	6823      	ldr	r3, [r4, #0]
 80096e2:	1c5a      	adds	r2, r3, #1
 80096e4:	6022      	str	r2, [r4, #0]
 80096e6:	701e      	strb	r6, [r3, #0]
 80096e8:	6963      	ldr	r3, [r4, #20]
 80096ea:	3001      	adds	r0, #1
 80096ec:	4283      	cmp	r3, r0
 80096ee:	d004      	beq.n	80096fa <__swbuf_r+0x62>
 80096f0:	89a3      	ldrh	r3, [r4, #12]
 80096f2:	07db      	lsls	r3, r3, #31
 80096f4:	d519      	bpl.n	800972a <__swbuf_r+0x92>
 80096f6:	2e0a      	cmp	r6, #10
 80096f8:	d117      	bne.n	800972a <__swbuf_r+0x92>
 80096fa:	4621      	mov	r1, r4
 80096fc:	4628      	mov	r0, r5
 80096fe:	f000 ff65 	bl	800a5cc <_fflush_r>
 8009702:	b190      	cbz	r0, 800972a <__swbuf_r+0x92>
 8009704:	e00f      	b.n	8009726 <__swbuf_r+0x8e>
 8009706:	4b0b      	ldr	r3, [pc, #44]	; (8009734 <__swbuf_r+0x9c>)
 8009708:	429c      	cmp	r4, r3
 800970a:	d101      	bne.n	8009710 <__swbuf_r+0x78>
 800970c:	68ac      	ldr	r4, [r5, #8]
 800970e:	e7d0      	b.n	80096b2 <__swbuf_r+0x1a>
 8009710:	4b09      	ldr	r3, [pc, #36]	; (8009738 <__swbuf_r+0xa0>)
 8009712:	429c      	cmp	r4, r3
 8009714:	bf08      	it	eq
 8009716:	68ec      	ldreq	r4, [r5, #12]
 8009718:	e7cb      	b.n	80096b2 <__swbuf_r+0x1a>
 800971a:	4621      	mov	r1, r4
 800971c:	4628      	mov	r0, r5
 800971e:	f000 f81b 	bl	8009758 <__swsetup_r>
 8009722:	2800      	cmp	r0, #0
 8009724:	d0cc      	beq.n	80096c0 <__swbuf_r+0x28>
 8009726:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800972a:	4638      	mov	r0, r7
 800972c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800972e:	bf00      	nop
 8009730:	0800c488 	.word	0x0800c488
 8009734:	0800c4a8 	.word	0x0800c4a8
 8009738:	0800c468 	.word	0x0800c468

0800973c <__ascii_wctomb>:
 800973c:	b149      	cbz	r1, 8009752 <__ascii_wctomb+0x16>
 800973e:	2aff      	cmp	r2, #255	; 0xff
 8009740:	bf85      	ittet	hi
 8009742:	238a      	movhi	r3, #138	; 0x8a
 8009744:	6003      	strhi	r3, [r0, #0]
 8009746:	700a      	strbls	r2, [r1, #0]
 8009748:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800974c:	bf98      	it	ls
 800974e:	2001      	movls	r0, #1
 8009750:	4770      	bx	lr
 8009752:	4608      	mov	r0, r1
 8009754:	4770      	bx	lr
	...

08009758 <__swsetup_r>:
 8009758:	4b32      	ldr	r3, [pc, #200]	; (8009824 <__swsetup_r+0xcc>)
 800975a:	b570      	push	{r4, r5, r6, lr}
 800975c:	681d      	ldr	r5, [r3, #0]
 800975e:	4606      	mov	r6, r0
 8009760:	460c      	mov	r4, r1
 8009762:	b125      	cbz	r5, 800976e <__swsetup_r+0x16>
 8009764:	69ab      	ldr	r3, [r5, #24]
 8009766:	b913      	cbnz	r3, 800976e <__swsetup_r+0x16>
 8009768:	4628      	mov	r0, r5
 800976a:	f000 ff99 	bl	800a6a0 <__sinit>
 800976e:	4b2e      	ldr	r3, [pc, #184]	; (8009828 <__swsetup_r+0xd0>)
 8009770:	429c      	cmp	r4, r3
 8009772:	d10f      	bne.n	8009794 <__swsetup_r+0x3c>
 8009774:	686c      	ldr	r4, [r5, #4]
 8009776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800977a:	b29a      	uxth	r2, r3
 800977c:	0715      	lsls	r5, r2, #28
 800977e:	d42c      	bmi.n	80097da <__swsetup_r+0x82>
 8009780:	06d0      	lsls	r0, r2, #27
 8009782:	d411      	bmi.n	80097a8 <__swsetup_r+0x50>
 8009784:	2209      	movs	r2, #9
 8009786:	6032      	str	r2, [r6, #0]
 8009788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800978c:	81a3      	strh	r3, [r4, #12]
 800978e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009792:	e03e      	b.n	8009812 <__swsetup_r+0xba>
 8009794:	4b25      	ldr	r3, [pc, #148]	; (800982c <__swsetup_r+0xd4>)
 8009796:	429c      	cmp	r4, r3
 8009798:	d101      	bne.n	800979e <__swsetup_r+0x46>
 800979a:	68ac      	ldr	r4, [r5, #8]
 800979c:	e7eb      	b.n	8009776 <__swsetup_r+0x1e>
 800979e:	4b24      	ldr	r3, [pc, #144]	; (8009830 <__swsetup_r+0xd8>)
 80097a0:	429c      	cmp	r4, r3
 80097a2:	bf08      	it	eq
 80097a4:	68ec      	ldreq	r4, [r5, #12]
 80097a6:	e7e6      	b.n	8009776 <__swsetup_r+0x1e>
 80097a8:	0751      	lsls	r1, r2, #29
 80097aa:	d512      	bpl.n	80097d2 <__swsetup_r+0x7a>
 80097ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097ae:	b141      	cbz	r1, 80097c2 <__swsetup_r+0x6a>
 80097b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097b4:	4299      	cmp	r1, r3
 80097b6:	d002      	beq.n	80097be <__swsetup_r+0x66>
 80097b8:	4630      	mov	r0, r6
 80097ba:	f001 ffab 	bl	800b714 <_free_r>
 80097be:	2300      	movs	r3, #0
 80097c0:	6363      	str	r3, [r4, #52]	; 0x34
 80097c2:	89a3      	ldrh	r3, [r4, #12]
 80097c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097c8:	81a3      	strh	r3, [r4, #12]
 80097ca:	2300      	movs	r3, #0
 80097cc:	6063      	str	r3, [r4, #4]
 80097ce:	6923      	ldr	r3, [r4, #16]
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	89a3      	ldrh	r3, [r4, #12]
 80097d4:	f043 0308 	orr.w	r3, r3, #8
 80097d8:	81a3      	strh	r3, [r4, #12]
 80097da:	6923      	ldr	r3, [r4, #16]
 80097dc:	b94b      	cbnz	r3, 80097f2 <__swsetup_r+0x9a>
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097e8:	d003      	beq.n	80097f2 <__swsetup_r+0x9a>
 80097ea:	4621      	mov	r1, r4
 80097ec:	4630      	mov	r0, r6
 80097ee:	f001 fb3b 	bl	800ae68 <__smakebuf_r>
 80097f2:	89a2      	ldrh	r2, [r4, #12]
 80097f4:	f012 0301 	ands.w	r3, r2, #1
 80097f8:	d00c      	beq.n	8009814 <__swsetup_r+0xbc>
 80097fa:	2300      	movs	r3, #0
 80097fc:	60a3      	str	r3, [r4, #8]
 80097fe:	6963      	ldr	r3, [r4, #20]
 8009800:	425b      	negs	r3, r3
 8009802:	61a3      	str	r3, [r4, #24]
 8009804:	6923      	ldr	r3, [r4, #16]
 8009806:	b953      	cbnz	r3, 800981e <__swsetup_r+0xc6>
 8009808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800980c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009810:	d1ba      	bne.n	8009788 <__swsetup_r+0x30>
 8009812:	bd70      	pop	{r4, r5, r6, pc}
 8009814:	0792      	lsls	r2, r2, #30
 8009816:	bf58      	it	pl
 8009818:	6963      	ldrpl	r3, [r4, #20]
 800981a:	60a3      	str	r3, [r4, #8]
 800981c:	e7f2      	b.n	8009804 <__swsetup_r+0xac>
 800981e:	2000      	movs	r0, #0
 8009820:	e7f7      	b.n	8009812 <__swsetup_r+0xba>
 8009822:	bf00      	nop
 8009824:	20000044 	.word	0x20000044
 8009828:	0800c488 	.word	0x0800c488
 800982c:	0800c4a8 	.word	0x0800c4a8
 8009830:	0800c468 	.word	0x0800c468

08009834 <quorem>:
 8009834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009838:	6903      	ldr	r3, [r0, #16]
 800983a:	690c      	ldr	r4, [r1, #16]
 800983c:	42a3      	cmp	r3, r4
 800983e:	4680      	mov	r8, r0
 8009840:	f2c0 8082 	blt.w	8009948 <quorem+0x114>
 8009844:	3c01      	subs	r4, #1
 8009846:	f101 0714 	add.w	r7, r1, #20
 800984a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800984e:	f100 0614 	add.w	r6, r0, #20
 8009852:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009856:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800985a:	eb06 030c 	add.w	r3, r6, ip
 800985e:	3501      	adds	r5, #1
 8009860:	eb07 090c 	add.w	r9, r7, ip
 8009864:	9301      	str	r3, [sp, #4]
 8009866:	fbb0 f5f5 	udiv	r5, r0, r5
 800986a:	b395      	cbz	r5, 80098d2 <quorem+0x9e>
 800986c:	f04f 0a00 	mov.w	sl, #0
 8009870:	4638      	mov	r0, r7
 8009872:	46b6      	mov	lr, r6
 8009874:	46d3      	mov	fp, sl
 8009876:	f850 2b04 	ldr.w	r2, [r0], #4
 800987a:	b293      	uxth	r3, r2
 800987c:	fb05 a303 	mla	r3, r5, r3, sl
 8009880:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009884:	b29b      	uxth	r3, r3
 8009886:	ebab 0303 	sub.w	r3, fp, r3
 800988a:	0c12      	lsrs	r2, r2, #16
 800988c:	f8de b000 	ldr.w	fp, [lr]
 8009890:	fb05 a202 	mla	r2, r5, r2, sl
 8009894:	fa13 f38b 	uxtah	r3, r3, fp
 8009898:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800989c:	fa1f fb82 	uxth.w	fp, r2
 80098a0:	f8de 2000 	ldr.w	r2, [lr]
 80098a4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80098a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098b2:	4581      	cmp	r9, r0
 80098b4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80098b8:	f84e 3b04 	str.w	r3, [lr], #4
 80098bc:	d2db      	bcs.n	8009876 <quorem+0x42>
 80098be:	f856 300c 	ldr.w	r3, [r6, ip]
 80098c2:	b933      	cbnz	r3, 80098d2 <quorem+0x9e>
 80098c4:	9b01      	ldr	r3, [sp, #4]
 80098c6:	3b04      	subs	r3, #4
 80098c8:	429e      	cmp	r6, r3
 80098ca:	461a      	mov	r2, r3
 80098cc:	d330      	bcc.n	8009930 <quorem+0xfc>
 80098ce:	f8c8 4010 	str.w	r4, [r8, #16]
 80098d2:	4640      	mov	r0, r8
 80098d4:	f001 fd64 	bl	800b3a0 <__mcmp>
 80098d8:	2800      	cmp	r0, #0
 80098da:	db25      	blt.n	8009928 <quorem+0xf4>
 80098dc:	3501      	adds	r5, #1
 80098de:	4630      	mov	r0, r6
 80098e0:	f04f 0c00 	mov.w	ip, #0
 80098e4:	f857 2b04 	ldr.w	r2, [r7], #4
 80098e8:	f8d0 e000 	ldr.w	lr, [r0]
 80098ec:	b293      	uxth	r3, r2
 80098ee:	ebac 0303 	sub.w	r3, ip, r3
 80098f2:	0c12      	lsrs	r2, r2, #16
 80098f4:	fa13 f38e 	uxtah	r3, r3, lr
 80098f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80098fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009900:	b29b      	uxth	r3, r3
 8009902:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009906:	45b9      	cmp	r9, r7
 8009908:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800990c:	f840 3b04 	str.w	r3, [r0], #4
 8009910:	d2e8      	bcs.n	80098e4 <quorem+0xb0>
 8009912:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009916:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800991a:	b92a      	cbnz	r2, 8009928 <quorem+0xf4>
 800991c:	3b04      	subs	r3, #4
 800991e:	429e      	cmp	r6, r3
 8009920:	461a      	mov	r2, r3
 8009922:	d30b      	bcc.n	800993c <quorem+0x108>
 8009924:	f8c8 4010 	str.w	r4, [r8, #16]
 8009928:	4628      	mov	r0, r5
 800992a:	b003      	add	sp, #12
 800992c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009930:	6812      	ldr	r2, [r2, #0]
 8009932:	3b04      	subs	r3, #4
 8009934:	2a00      	cmp	r2, #0
 8009936:	d1ca      	bne.n	80098ce <quorem+0x9a>
 8009938:	3c01      	subs	r4, #1
 800993a:	e7c5      	b.n	80098c8 <quorem+0x94>
 800993c:	6812      	ldr	r2, [r2, #0]
 800993e:	3b04      	subs	r3, #4
 8009940:	2a00      	cmp	r2, #0
 8009942:	d1ef      	bne.n	8009924 <quorem+0xf0>
 8009944:	3c01      	subs	r4, #1
 8009946:	e7ea      	b.n	800991e <quorem+0xea>
 8009948:	2000      	movs	r0, #0
 800994a:	e7ee      	b.n	800992a <quorem+0xf6>
 800994c:	0000      	movs	r0, r0
	...

08009950 <_dtoa_r>:
 8009950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009954:	ec57 6b10 	vmov	r6, r7, d0
 8009958:	b097      	sub	sp, #92	; 0x5c
 800995a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800995c:	9106      	str	r1, [sp, #24]
 800995e:	4604      	mov	r4, r0
 8009960:	920b      	str	r2, [sp, #44]	; 0x2c
 8009962:	9312      	str	r3, [sp, #72]	; 0x48
 8009964:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009968:	e9cd 6700 	strd	r6, r7, [sp]
 800996c:	b93d      	cbnz	r5, 800997e <_dtoa_r+0x2e>
 800996e:	2010      	movs	r0, #16
 8009970:	f001 faba 	bl	800aee8 <malloc>
 8009974:	6260      	str	r0, [r4, #36]	; 0x24
 8009976:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800997a:	6005      	str	r5, [r0, #0]
 800997c:	60c5      	str	r5, [r0, #12]
 800997e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009980:	6819      	ldr	r1, [r3, #0]
 8009982:	b151      	cbz	r1, 800999a <_dtoa_r+0x4a>
 8009984:	685a      	ldr	r2, [r3, #4]
 8009986:	604a      	str	r2, [r1, #4]
 8009988:	2301      	movs	r3, #1
 800998a:	4093      	lsls	r3, r2
 800998c:	608b      	str	r3, [r1, #8]
 800998e:	4620      	mov	r0, r4
 8009990:	f001 fae6 	bl	800af60 <_Bfree>
 8009994:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009996:	2200      	movs	r2, #0
 8009998:	601a      	str	r2, [r3, #0]
 800999a:	1e3b      	subs	r3, r7, #0
 800999c:	bfbb      	ittet	lt
 800999e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80099a2:	9301      	strlt	r3, [sp, #4]
 80099a4:	2300      	movge	r3, #0
 80099a6:	2201      	movlt	r2, #1
 80099a8:	bfac      	ite	ge
 80099aa:	f8c8 3000 	strge.w	r3, [r8]
 80099ae:	f8c8 2000 	strlt.w	r2, [r8]
 80099b2:	4baf      	ldr	r3, [pc, #700]	; (8009c70 <_dtoa_r+0x320>)
 80099b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80099b8:	ea33 0308 	bics.w	r3, r3, r8
 80099bc:	d114      	bne.n	80099e8 <_dtoa_r+0x98>
 80099be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80099c4:	6013      	str	r3, [r2, #0]
 80099c6:	9b00      	ldr	r3, [sp, #0]
 80099c8:	b923      	cbnz	r3, 80099d4 <_dtoa_r+0x84>
 80099ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80099ce:	2800      	cmp	r0, #0
 80099d0:	f000 8542 	beq.w	800a458 <_dtoa_r+0xb08>
 80099d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009c84 <_dtoa_r+0x334>
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f000 8544 	beq.w	800a468 <_dtoa_r+0xb18>
 80099e0:	f10b 0303 	add.w	r3, fp, #3
 80099e4:	f000 bd3e 	b.w	800a464 <_dtoa_r+0xb14>
 80099e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80099ec:	2200      	movs	r2, #0
 80099ee:	2300      	movs	r3, #0
 80099f0:	4630      	mov	r0, r6
 80099f2:	4639      	mov	r1, r7
 80099f4:	f7f7 f880 	bl	8000af8 <__aeabi_dcmpeq>
 80099f8:	4681      	mov	r9, r0
 80099fa:	b168      	cbz	r0, 8009a18 <_dtoa_r+0xc8>
 80099fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099fe:	2301      	movs	r3, #1
 8009a00:	6013      	str	r3, [r2, #0]
 8009a02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f000 8524 	beq.w	800a452 <_dtoa_r+0xb02>
 8009a0a:	4b9a      	ldr	r3, [pc, #616]	; (8009c74 <_dtoa_r+0x324>)
 8009a0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a0e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8009a12:	6013      	str	r3, [r2, #0]
 8009a14:	f000 bd28 	b.w	800a468 <_dtoa_r+0xb18>
 8009a18:	aa14      	add	r2, sp, #80	; 0x50
 8009a1a:	a915      	add	r1, sp, #84	; 0x54
 8009a1c:	ec47 6b10 	vmov	d0, r6, r7
 8009a20:	4620      	mov	r0, r4
 8009a22:	f001 fdab 	bl	800b57c <__d2b>
 8009a26:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009a2a:	9004      	str	r0, [sp, #16]
 8009a2c:	2d00      	cmp	r5, #0
 8009a2e:	d07c      	beq.n	8009b2a <_dtoa_r+0x1da>
 8009a30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a34:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009a38:	46b2      	mov	sl, r6
 8009a3a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009a3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009a42:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009a46:	2200      	movs	r2, #0
 8009a48:	4b8b      	ldr	r3, [pc, #556]	; (8009c78 <_dtoa_r+0x328>)
 8009a4a:	4650      	mov	r0, sl
 8009a4c:	4659      	mov	r1, fp
 8009a4e:	f7f6 fc33 	bl	80002b8 <__aeabi_dsub>
 8009a52:	a381      	add	r3, pc, #516	; (adr r3, 8009c58 <_dtoa_r+0x308>)
 8009a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a58:	f7f6 fde6 	bl	8000628 <__aeabi_dmul>
 8009a5c:	a380      	add	r3, pc, #512	; (adr r3, 8009c60 <_dtoa_r+0x310>)
 8009a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a62:	f7f6 fc2b 	bl	80002bc <__adddf3>
 8009a66:	4606      	mov	r6, r0
 8009a68:	4628      	mov	r0, r5
 8009a6a:	460f      	mov	r7, r1
 8009a6c:	f7f6 fd72 	bl	8000554 <__aeabi_i2d>
 8009a70:	a37d      	add	r3, pc, #500	; (adr r3, 8009c68 <_dtoa_r+0x318>)
 8009a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a76:	f7f6 fdd7 	bl	8000628 <__aeabi_dmul>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	4630      	mov	r0, r6
 8009a80:	4639      	mov	r1, r7
 8009a82:	f7f6 fc1b 	bl	80002bc <__adddf3>
 8009a86:	4606      	mov	r6, r0
 8009a88:	460f      	mov	r7, r1
 8009a8a:	f7f7 f87d 	bl	8000b88 <__aeabi_d2iz>
 8009a8e:	2200      	movs	r2, #0
 8009a90:	4682      	mov	sl, r0
 8009a92:	2300      	movs	r3, #0
 8009a94:	4630      	mov	r0, r6
 8009a96:	4639      	mov	r1, r7
 8009a98:	f7f7 f838 	bl	8000b0c <__aeabi_dcmplt>
 8009a9c:	b148      	cbz	r0, 8009ab2 <_dtoa_r+0x162>
 8009a9e:	4650      	mov	r0, sl
 8009aa0:	f7f6 fd58 	bl	8000554 <__aeabi_i2d>
 8009aa4:	4632      	mov	r2, r6
 8009aa6:	463b      	mov	r3, r7
 8009aa8:	f7f7 f826 	bl	8000af8 <__aeabi_dcmpeq>
 8009aac:	b908      	cbnz	r0, 8009ab2 <_dtoa_r+0x162>
 8009aae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009ab2:	f1ba 0f16 	cmp.w	sl, #22
 8009ab6:	d859      	bhi.n	8009b6c <_dtoa_r+0x21c>
 8009ab8:	4970      	ldr	r1, [pc, #448]	; (8009c7c <_dtoa_r+0x32c>)
 8009aba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009abe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ac2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ac6:	f7f7 f83f 	bl	8000b48 <__aeabi_dcmpgt>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	d050      	beq.n	8009b70 <_dtoa_r+0x220>
 8009ace:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ad6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ad8:	1b5d      	subs	r5, r3, r5
 8009ada:	f1b5 0801 	subs.w	r8, r5, #1
 8009ade:	bf49      	itett	mi
 8009ae0:	f1c5 0301 	rsbmi	r3, r5, #1
 8009ae4:	2300      	movpl	r3, #0
 8009ae6:	9305      	strmi	r3, [sp, #20]
 8009ae8:	f04f 0800 	movmi.w	r8, #0
 8009aec:	bf58      	it	pl
 8009aee:	9305      	strpl	r3, [sp, #20]
 8009af0:	f1ba 0f00 	cmp.w	sl, #0
 8009af4:	db3e      	blt.n	8009b74 <_dtoa_r+0x224>
 8009af6:	2300      	movs	r3, #0
 8009af8:	44d0      	add	r8, sl
 8009afa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009afe:	9307      	str	r3, [sp, #28]
 8009b00:	9b06      	ldr	r3, [sp, #24]
 8009b02:	2b09      	cmp	r3, #9
 8009b04:	f200 8090 	bhi.w	8009c28 <_dtoa_r+0x2d8>
 8009b08:	2b05      	cmp	r3, #5
 8009b0a:	bfc4      	itt	gt
 8009b0c:	3b04      	subgt	r3, #4
 8009b0e:	9306      	strgt	r3, [sp, #24]
 8009b10:	9b06      	ldr	r3, [sp, #24]
 8009b12:	f1a3 0302 	sub.w	r3, r3, #2
 8009b16:	bfcc      	ite	gt
 8009b18:	2500      	movgt	r5, #0
 8009b1a:	2501      	movle	r5, #1
 8009b1c:	2b03      	cmp	r3, #3
 8009b1e:	f200 808f 	bhi.w	8009c40 <_dtoa_r+0x2f0>
 8009b22:	e8df f003 	tbb	[pc, r3]
 8009b26:	7f7d      	.short	0x7f7d
 8009b28:	7131      	.short	0x7131
 8009b2a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009b2e:	441d      	add	r5, r3
 8009b30:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009b34:	2820      	cmp	r0, #32
 8009b36:	dd13      	ble.n	8009b60 <_dtoa_r+0x210>
 8009b38:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009b3c:	9b00      	ldr	r3, [sp, #0]
 8009b3e:	fa08 f800 	lsl.w	r8, r8, r0
 8009b42:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009b46:	fa23 f000 	lsr.w	r0, r3, r0
 8009b4a:	ea48 0000 	orr.w	r0, r8, r0
 8009b4e:	f7f6 fcf1 	bl	8000534 <__aeabi_ui2d>
 8009b52:	2301      	movs	r3, #1
 8009b54:	4682      	mov	sl, r0
 8009b56:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009b5a:	3d01      	subs	r5, #1
 8009b5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009b5e:	e772      	b.n	8009a46 <_dtoa_r+0xf6>
 8009b60:	9b00      	ldr	r3, [sp, #0]
 8009b62:	f1c0 0020 	rsb	r0, r0, #32
 8009b66:	fa03 f000 	lsl.w	r0, r3, r0
 8009b6a:	e7f0      	b.n	8009b4e <_dtoa_r+0x1fe>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e7b1      	b.n	8009ad4 <_dtoa_r+0x184>
 8009b70:	900f      	str	r0, [sp, #60]	; 0x3c
 8009b72:	e7b0      	b.n	8009ad6 <_dtoa_r+0x186>
 8009b74:	9b05      	ldr	r3, [sp, #20]
 8009b76:	eba3 030a 	sub.w	r3, r3, sl
 8009b7a:	9305      	str	r3, [sp, #20]
 8009b7c:	f1ca 0300 	rsb	r3, sl, #0
 8009b80:	9307      	str	r3, [sp, #28]
 8009b82:	2300      	movs	r3, #0
 8009b84:	930e      	str	r3, [sp, #56]	; 0x38
 8009b86:	e7bb      	b.n	8009b00 <_dtoa_r+0x1b0>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	930a      	str	r3, [sp, #40]	; 0x28
 8009b8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	dd59      	ble.n	8009c46 <_dtoa_r+0x2f6>
 8009b92:	9302      	str	r3, [sp, #8]
 8009b94:	4699      	mov	r9, r3
 8009b96:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b98:	2200      	movs	r2, #0
 8009b9a:	6072      	str	r2, [r6, #4]
 8009b9c:	2204      	movs	r2, #4
 8009b9e:	f102 0014 	add.w	r0, r2, #20
 8009ba2:	4298      	cmp	r0, r3
 8009ba4:	6871      	ldr	r1, [r6, #4]
 8009ba6:	d953      	bls.n	8009c50 <_dtoa_r+0x300>
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f001 f9a5 	bl	800aef8 <_Balloc>
 8009bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bb0:	6030      	str	r0, [r6, #0]
 8009bb2:	f1b9 0f0e 	cmp.w	r9, #14
 8009bb6:	f8d3 b000 	ldr.w	fp, [r3]
 8009bba:	f200 80e6 	bhi.w	8009d8a <_dtoa_r+0x43a>
 8009bbe:	2d00      	cmp	r5, #0
 8009bc0:	f000 80e3 	beq.w	8009d8a <_dtoa_r+0x43a>
 8009bc4:	ed9d 7b00 	vldr	d7, [sp]
 8009bc8:	f1ba 0f00 	cmp.w	sl, #0
 8009bcc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009bd0:	dd74      	ble.n	8009cbc <_dtoa_r+0x36c>
 8009bd2:	4a2a      	ldr	r2, [pc, #168]	; (8009c7c <_dtoa_r+0x32c>)
 8009bd4:	f00a 030f 	and.w	r3, sl, #15
 8009bd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009bdc:	ed93 7b00 	vldr	d7, [r3]
 8009be0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009be4:	06f0      	lsls	r0, r6, #27
 8009be6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009bea:	d565      	bpl.n	8009cb8 <_dtoa_r+0x368>
 8009bec:	4b24      	ldr	r3, [pc, #144]	; (8009c80 <_dtoa_r+0x330>)
 8009bee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009bf2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009bf6:	f7f6 fe41 	bl	800087c <__aeabi_ddiv>
 8009bfa:	e9cd 0100 	strd	r0, r1, [sp]
 8009bfe:	f006 060f 	and.w	r6, r6, #15
 8009c02:	2503      	movs	r5, #3
 8009c04:	4f1e      	ldr	r7, [pc, #120]	; (8009c80 <_dtoa_r+0x330>)
 8009c06:	e04c      	b.n	8009ca2 <_dtoa_r+0x352>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	930a      	str	r3, [sp, #40]	; 0x28
 8009c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c0e:	4453      	add	r3, sl
 8009c10:	f103 0901 	add.w	r9, r3, #1
 8009c14:	9302      	str	r3, [sp, #8]
 8009c16:	464b      	mov	r3, r9
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	bfb8      	it	lt
 8009c1c:	2301      	movlt	r3, #1
 8009c1e:	e7ba      	b.n	8009b96 <_dtoa_r+0x246>
 8009c20:	2300      	movs	r3, #0
 8009c22:	e7b2      	b.n	8009b8a <_dtoa_r+0x23a>
 8009c24:	2300      	movs	r3, #0
 8009c26:	e7f0      	b.n	8009c0a <_dtoa_r+0x2ba>
 8009c28:	2501      	movs	r5, #1
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	9306      	str	r3, [sp, #24]
 8009c2e:	950a      	str	r5, [sp, #40]	; 0x28
 8009c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c34:	9302      	str	r3, [sp, #8]
 8009c36:	4699      	mov	r9, r3
 8009c38:	2200      	movs	r2, #0
 8009c3a:	2312      	movs	r3, #18
 8009c3c:	920b      	str	r2, [sp, #44]	; 0x2c
 8009c3e:	e7aa      	b.n	8009b96 <_dtoa_r+0x246>
 8009c40:	2301      	movs	r3, #1
 8009c42:	930a      	str	r3, [sp, #40]	; 0x28
 8009c44:	e7f4      	b.n	8009c30 <_dtoa_r+0x2e0>
 8009c46:	2301      	movs	r3, #1
 8009c48:	9302      	str	r3, [sp, #8]
 8009c4a:	4699      	mov	r9, r3
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	e7f5      	b.n	8009c3c <_dtoa_r+0x2ec>
 8009c50:	3101      	adds	r1, #1
 8009c52:	6071      	str	r1, [r6, #4]
 8009c54:	0052      	lsls	r2, r2, #1
 8009c56:	e7a2      	b.n	8009b9e <_dtoa_r+0x24e>
 8009c58:	636f4361 	.word	0x636f4361
 8009c5c:	3fd287a7 	.word	0x3fd287a7
 8009c60:	8b60c8b3 	.word	0x8b60c8b3
 8009c64:	3fc68a28 	.word	0x3fc68a28
 8009c68:	509f79fb 	.word	0x509f79fb
 8009c6c:	3fd34413 	.word	0x3fd34413
 8009c70:	7ff00000 	.word	0x7ff00000
 8009c74:	0800c2db 	.word	0x0800c2db
 8009c78:	3ff80000 	.word	0x3ff80000
 8009c7c:	0800c4f0 	.word	0x0800c4f0
 8009c80:	0800c4c8 	.word	0x0800c4c8
 8009c84:	0800c462 	.word	0x0800c462
 8009c88:	07f1      	lsls	r1, r6, #31
 8009c8a:	d508      	bpl.n	8009c9e <_dtoa_r+0x34e>
 8009c8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c94:	f7f6 fcc8 	bl	8000628 <__aeabi_dmul>
 8009c98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c9c:	3501      	adds	r5, #1
 8009c9e:	1076      	asrs	r6, r6, #1
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	2e00      	cmp	r6, #0
 8009ca4:	d1f0      	bne.n	8009c88 <_dtoa_r+0x338>
 8009ca6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009caa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cae:	f7f6 fde5 	bl	800087c <__aeabi_ddiv>
 8009cb2:	e9cd 0100 	strd	r0, r1, [sp]
 8009cb6:	e01a      	b.n	8009cee <_dtoa_r+0x39e>
 8009cb8:	2502      	movs	r5, #2
 8009cba:	e7a3      	b.n	8009c04 <_dtoa_r+0x2b4>
 8009cbc:	f000 80a0 	beq.w	8009e00 <_dtoa_r+0x4b0>
 8009cc0:	f1ca 0600 	rsb	r6, sl, #0
 8009cc4:	4b9f      	ldr	r3, [pc, #636]	; (8009f44 <_dtoa_r+0x5f4>)
 8009cc6:	4fa0      	ldr	r7, [pc, #640]	; (8009f48 <_dtoa_r+0x5f8>)
 8009cc8:	f006 020f 	and.w	r2, r6, #15
 8009ccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009cd8:	f7f6 fca6 	bl	8000628 <__aeabi_dmul>
 8009cdc:	e9cd 0100 	strd	r0, r1, [sp]
 8009ce0:	1136      	asrs	r6, r6, #4
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	2502      	movs	r5, #2
 8009ce6:	2e00      	cmp	r6, #0
 8009ce8:	d17f      	bne.n	8009dea <_dtoa_r+0x49a>
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1e1      	bne.n	8009cb2 <_dtoa_r+0x362>
 8009cee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f000 8087 	beq.w	8009e04 <_dtoa_r+0x4b4>
 8009cf6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	4b93      	ldr	r3, [pc, #588]	; (8009f4c <_dtoa_r+0x5fc>)
 8009cfe:	4630      	mov	r0, r6
 8009d00:	4639      	mov	r1, r7
 8009d02:	f7f6 ff03 	bl	8000b0c <__aeabi_dcmplt>
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d07c      	beq.n	8009e04 <_dtoa_r+0x4b4>
 8009d0a:	f1b9 0f00 	cmp.w	r9, #0
 8009d0e:	d079      	beq.n	8009e04 <_dtoa_r+0x4b4>
 8009d10:	9b02      	ldr	r3, [sp, #8]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	dd35      	ble.n	8009d82 <_dtoa_r+0x432>
 8009d16:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009d1a:	9308      	str	r3, [sp, #32]
 8009d1c:	4639      	mov	r1, r7
 8009d1e:	2200      	movs	r2, #0
 8009d20:	4b8b      	ldr	r3, [pc, #556]	; (8009f50 <_dtoa_r+0x600>)
 8009d22:	4630      	mov	r0, r6
 8009d24:	f7f6 fc80 	bl	8000628 <__aeabi_dmul>
 8009d28:	e9cd 0100 	strd	r0, r1, [sp]
 8009d2c:	9f02      	ldr	r7, [sp, #8]
 8009d2e:	3501      	adds	r5, #1
 8009d30:	4628      	mov	r0, r5
 8009d32:	f7f6 fc0f 	bl	8000554 <__aeabi_i2d>
 8009d36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d3a:	f7f6 fc75 	bl	8000628 <__aeabi_dmul>
 8009d3e:	2200      	movs	r2, #0
 8009d40:	4b84      	ldr	r3, [pc, #528]	; (8009f54 <_dtoa_r+0x604>)
 8009d42:	f7f6 fabb 	bl	80002bc <__adddf3>
 8009d46:	4605      	mov	r5, r0
 8009d48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009d4c:	2f00      	cmp	r7, #0
 8009d4e:	d15d      	bne.n	8009e0c <_dtoa_r+0x4bc>
 8009d50:	2200      	movs	r2, #0
 8009d52:	4b81      	ldr	r3, [pc, #516]	; (8009f58 <_dtoa_r+0x608>)
 8009d54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d58:	f7f6 faae 	bl	80002b8 <__aeabi_dsub>
 8009d5c:	462a      	mov	r2, r5
 8009d5e:	4633      	mov	r3, r6
 8009d60:	e9cd 0100 	strd	r0, r1, [sp]
 8009d64:	f7f6 fef0 	bl	8000b48 <__aeabi_dcmpgt>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	f040 8288 	bne.w	800a27e <_dtoa_r+0x92e>
 8009d6e:	462a      	mov	r2, r5
 8009d70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009d74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d78:	f7f6 fec8 	bl	8000b0c <__aeabi_dcmplt>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	f040 827c 	bne.w	800a27a <_dtoa_r+0x92a>
 8009d82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d86:	e9cd 2300 	strd	r2, r3, [sp]
 8009d8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f2c0 8150 	blt.w	800a032 <_dtoa_r+0x6e2>
 8009d92:	f1ba 0f0e 	cmp.w	sl, #14
 8009d96:	f300 814c 	bgt.w	800a032 <_dtoa_r+0x6e2>
 8009d9a:	4b6a      	ldr	r3, [pc, #424]	; (8009f44 <_dtoa_r+0x5f4>)
 8009d9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009da0:	ed93 7b00 	vldr	d7, [r3]
 8009da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009dac:	f280 80d8 	bge.w	8009f60 <_dtoa_r+0x610>
 8009db0:	f1b9 0f00 	cmp.w	r9, #0
 8009db4:	f300 80d4 	bgt.w	8009f60 <_dtoa_r+0x610>
 8009db8:	f040 825e 	bne.w	800a278 <_dtoa_r+0x928>
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	4b66      	ldr	r3, [pc, #408]	; (8009f58 <_dtoa_r+0x608>)
 8009dc0:	ec51 0b17 	vmov	r0, r1, d7
 8009dc4:	f7f6 fc30 	bl	8000628 <__aeabi_dmul>
 8009dc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dcc:	f7f6 feb2 	bl	8000b34 <__aeabi_dcmpge>
 8009dd0:	464f      	mov	r7, r9
 8009dd2:	464e      	mov	r6, r9
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	f040 8234 	bne.w	800a242 <_dtoa_r+0x8f2>
 8009dda:	2331      	movs	r3, #49	; 0x31
 8009ddc:	f10b 0501 	add.w	r5, fp, #1
 8009de0:	f88b 3000 	strb.w	r3, [fp]
 8009de4:	f10a 0a01 	add.w	sl, sl, #1
 8009de8:	e22f      	b.n	800a24a <_dtoa_r+0x8fa>
 8009dea:	07f2      	lsls	r2, r6, #31
 8009dec:	d505      	bpl.n	8009dfa <_dtoa_r+0x4aa>
 8009dee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009df2:	f7f6 fc19 	bl	8000628 <__aeabi_dmul>
 8009df6:	3501      	adds	r5, #1
 8009df8:	2301      	movs	r3, #1
 8009dfa:	1076      	asrs	r6, r6, #1
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	e772      	b.n	8009ce6 <_dtoa_r+0x396>
 8009e00:	2502      	movs	r5, #2
 8009e02:	e774      	b.n	8009cee <_dtoa_r+0x39e>
 8009e04:	f8cd a020 	str.w	sl, [sp, #32]
 8009e08:	464f      	mov	r7, r9
 8009e0a:	e791      	b.n	8009d30 <_dtoa_r+0x3e0>
 8009e0c:	4b4d      	ldr	r3, [pc, #308]	; (8009f44 <_dtoa_r+0x5f4>)
 8009e0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e12:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d047      	beq.n	8009eac <_dtoa_r+0x55c>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	460b      	mov	r3, r1
 8009e20:	2000      	movs	r0, #0
 8009e22:	494e      	ldr	r1, [pc, #312]	; (8009f5c <_dtoa_r+0x60c>)
 8009e24:	f7f6 fd2a 	bl	800087c <__aeabi_ddiv>
 8009e28:	462a      	mov	r2, r5
 8009e2a:	4633      	mov	r3, r6
 8009e2c:	f7f6 fa44 	bl	80002b8 <__aeabi_dsub>
 8009e30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009e34:	465d      	mov	r5, fp
 8009e36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e3a:	f7f6 fea5 	bl	8000b88 <__aeabi_d2iz>
 8009e3e:	4606      	mov	r6, r0
 8009e40:	f7f6 fb88 	bl	8000554 <__aeabi_i2d>
 8009e44:	4602      	mov	r2, r0
 8009e46:	460b      	mov	r3, r1
 8009e48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e4c:	f7f6 fa34 	bl	80002b8 <__aeabi_dsub>
 8009e50:	3630      	adds	r6, #48	; 0x30
 8009e52:	f805 6b01 	strb.w	r6, [r5], #1
 8009e56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009e5a:	e9cd 0100 	strd	r0, r1, [sp]
 8009e5e:	f7f6 fe55 	bl	8000b0c <__aeabi_dcmplt>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	d163      	bne.n	8009f2e <_dtoa_r+0x5de>
 8009e66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	4937      	ldr	r1, [pc, #220]	; (8009f4c <_dtoa_r+0x5fc>)
 8009e6e:	f7f6 fa23 	bl	80002b8 <__aeabi_dsub>
 8009e72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009e76:	f7f6 fe49 	bl	8000b0c <__aeabi_dcmplt>
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	f040 80b7 	bne.w	8009fee <_dtoa_r+0x69e>
 8009e80:	eba5 030b 	sub.w	r3, r5, fp
 8009e84:	429f      	cmp	r7, r3
 8009e86:	f77f af7c 	ble.w	8009d82 <_dtoa_r+0x432>
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	4b30      	ldr	r3, [pc, #192]	; (8009f50 <_dtoa_r+0x600>)
 8009e8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e92:	f7f6 fbc9 	bl	8000628 <__aeabi_dmul>
 8009e96:	2200      	movs	r2, #0
 8009e98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009e9c:	4b2c      	ldr	r3, [pc, #176]	; (8009f50 <_dtoa_r+0x600>)
 8009e9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ea2:	f7f6 fbc1 	bl	8000628 <__aeabi_dmul>
 8009ea6:	e9cd 0100 	strd	r0, r1, [sp]
 8009eaa:	e7c4      	b.n	8009e36 <_dtoa_r+0x4e6>
 8009eac:	462a      	mov	r2, r5
 8009eae:	4633      	mov	r3, r6
 8009eb0:	f7f6 fbba 	bl	8000628 <__aeabi_dmul>
 8009eb4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009eb8:	eb0b 0507 	add.w	r5, fp, r7
 8009ebc:	465e      	mov	r6, fp
 8009ebe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ec2:	f7f6 fe61 	bl	8000b88 <__aeabi_d2iz>
 8009ec6:	4607      	mov	r7, r0
 8009ec8:	f7f6 fb44 	bl	8000554 <__aeabi_i2d>
 8009ecc:	3730      	adds	r7, #48	; 0x30
 8009ece:	4602      	mov	r2, r0
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ed6:	f7f6 f9ef 	bl	80002b8 <__aeabi_dsub>
 8009eda:	f806 7b01 	strb.w	r7, [r6], #1
 8009ede:	42ae      	cmp	r6, r5
 8009ee0:	e9cd 0100 	strd	r0, r1, [sp]
 8009ee4:	f04f 0200 	mov.w	r2, #0
 8009ee8:	d126      	bne.n	8009f38 <_dtoa_r+0x5e8>
 8009eea:	4b1c      	ldr	r3, [pc, #112]	; (8009f5c <_dtoa_r+0x60c>)
 8009eec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ef0:	f7f6 f9e4 	bl	80002bc <__adddf3>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009efc:	f7f6 fe24 	bl	8000b48 <__aeabi_dcmpgt>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d174      	bne.n	8009fee <_dtoa_r+0x69e>
 8009f04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009f08:	2000      	movs	r0, #0
 8009f0a:	4914      	ldr	r1, [pc, #80]	; (8009f5c <_dtoa_r+0x60c>)
 8009f0c:	f7f6 f9d4 	bl	80002b8 <__aeabi_dsub>
 8009f10:	4602      	mov	r2, r0
 8009f12:	460b      	mov	r3, r1
 8009f14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f18:	f7f6 fdf8 	bl	8000b0c <__aeabi_dcmplt>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	f43f af30 	beq.w	8009d82 <_dtoa_r+0x432>
 8009f22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f26:	2b30      	cmp	r3, #48	; 0x30
 8009f28:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009f2c:	d002      	beq.n	8009f34 <_dtoa_r+0x5e4>
 8009f2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009f32:	e04a      	b.n	8009fca <_dtoa_r+0x67a>
 8009f34:	4615      	mov	r5, r2
 8009f36:	e7f4      	b.n	8009f22 <_dtoa_r+0x5d2>
 8009f38:	4b05      	ldr	r3, [pc, #20]	; (8009f50 <_dtoa_r+0x600>)
 8009f3a:	f7f6 fb75 	bl	8000628 <__aeabi_dmul>
 8009f3e:	e9cd 0100 	strd	r0, r1, [sp]
 8009f42:	e7bc      	b.n	8009ebe <_dtoa_r+0x56e>
 8009f44:	0800c4f0 	.word	0x0800c4f0
 8009f48:	0800c4c8 	.word	0x0800c4c8
 8009f4c:	3ff00000 	.word	0x3ff00000
 8009f50:	40240000 	.word	0x40240000
 8009f54:	401c0000 	.word	0x401c0000
 8009f58:	40140000 	.word	0x40140000
 8009f5c:	3fe00000 	.word	0x3fe00000
 8009f60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009f64:	465d      	mov	r5, fp
 8009f66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	4639      	mov	r1, r7
 8009f6e:	f7f6 fc85 	bl	800087c <__aeabi_ddiv>
 8009f72:	f7f6 fe09 	bl	8000b88 <__aeabi_d2iz>
 8009f76:	4680      	mov	r8, r0
 8009f78:	f7f6 faec 	bl	8000554 <__aeabi_i2d>
 8009f7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f80:	f7f6 fb52 	bl	8000628 <__aeabi_dmul>
 8009f84:	4602      	mov	r2, r0
 8009f86:	460b      	mov	r3, r1
 8009f88:	4630      	mov	r0, r6
 8009f8a:	4639      	mov	r1, r7
 8009f8c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009f90:	f7f6 f992 	bl	80002b8 <__aeabi_dsub>
 8009f94:	f805 6b01 	strb.w	r6, [r5], #1
 8009f98:	eba5 060b 	sub.w	r6, r5, fp
 8009f9c:	45b1      	cmp	r9, r6
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	d139      	bne.n	800a018 <_dtoa_r+0x6c8>
 8009fa4:	f7f6 f98a 	bl	80002bc <__adddf3>
 8009fa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fac:	4606      	mov	r6, r0
 8009fae:	460f      	mov	r7, r1
 8009fb0:	f7f6 fdca 	bl	8000b48 <__aeabi_dcmpgt>
 8009fb4:	b9c8      	cbnz	r0, 8009fea <_dtoa_r+0x69a>
 8009fb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fba:	4630      	mov	r0, r6
 8009fbc:	4639      	mov	r1, r7
 8009fbe:	f7f6 fd9b 	bl	8000af8 <__aeabi_dcmpeq>
 8009fc2:	b110      	cbz	r0, 8009fca <_dtoa_r+0x67a>
 8009fc4:	f018 0f01 	tst.w	r8, #1
 8009fc8:	d10f      	bne.n	8009fea <_dtoa_r+0x69a>
 8009fca:	9904      	ldr	r1, [sp, #16]
 8009fcc:	4620      	mov	r0, r4
 8009fce:	f000 ffc7 	bl	800af60 <_Bfree>
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009fd6:	702b      	strb	r3, [r5, #0]
 8009fd8:	f10a 0301 	add.w	r3, sl, #1
 8009fdc:	6013      	str	r3, [r2, #0]
 8009fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f000 8241 	beq.w	800a468 <_dtoa_r+0xb18>
 8009fe6:	601d      	str	r5, [r3, #0]
 8009fe8:	e23e      	b.n	800a468 <_dtoa_r+0xb18>
 8009fea:	f8cd a020 	str.w	sl, [sp, #32]
 8009fee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ff2:	2a39      	cmp	r2, #57	; 0x39
 8009ff4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8009ff8:	d108      	bne.n	800a00c <_dtoa_r+0x6bc>
 8009ffa:	459b      	cmp	fp, r3
 8009ffc:	d10a      	bne.n	800a014 <_dtoa_r+0x6c4>
 8009ffe:	9b08      	ldr	r3, [sp, #32]
 800a000:	3301      	adds	r3, #1
 800a002:	9308      	str	r3, [sp, #32]
 800a004:	2330      	movs	r3, #48	; 0x30
 800a006:	f88b 3000 	strb.w	r3, [fp]
 800a00a:	465b      	mov	r3, fp
 800a00c:	781a      	ldrb	r2, [r3, #0]
 800a00e:	3201      	adds	r2, #1
 800a010:	701a      	strb	r2, [r3, #0]
 800a012:	e78c      	b.n	8009f2e <_dtoa_r+0x5de>
 800a014:	461d      	mov	r5, r3
 800a016:	e7ea      	b.n	8009fee <_dtoa_r+0x69e>
 800a018:	2200      	movs	r2, #0
 800a01a:	4b9b      	ldr	r3, [pc, #620]	; (800a288 <_dtoa_r+0x938>)
 800a01c:	f7f6 fb04 	bl	8000628 <__aeabi_dmul>
 800a020:	2200      	movs	r2, #0
 800a022:	2300      	movs	r3, #0
 800a024:	4606      	mov	r6, r0
 800a026:	460f      	mov	r7, r1
 800a028:	f7f6 fd66 	bl	8000af8 <__aeabi_dcmpeq>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	d09a      	beq.n	8009f66 <_dtoa_r+0x616>
 800a030:	e7cb      	b.n	8009fca <_dtoa_r+0x67a>
 800a032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a034:	2a00      	cmp	r2, #0
 800a036:	f000 808b 	beq.w	800a150 <_dtoa_r+0x800>
 800a03a:	9a06      	ldr	r2, [sp, #24]
 800a03c:	2a01      	cmp	r2, #1
 800a03e:	dc6e      	bgt.n	800a11e <_dtoa_r+0x7ce>
 800a040:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a042:	2a00      	cmp	r2, #0
 800a044:	d067      	beq.n	800a116 <_dtoa_r+0x7c6>
 800a046:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a04a:	9f07      	ldr	r7, [sp, #28]
 800a04c:	9d05      	ldr	r5, [sp, #20]
 800a04e:	9a05      	ldr	r2, [sp, #20]
 800a050:	2101      	movs	r1, #1
 800a052:	441a      	add	r2, r3
 800a054:	4620      	mov	r0, r4
 800a056:	9205      	str	r2, [sp, #20]
 800a058:	4498      	add	r8, r3
 800a05a:	f001 f85f 	bl	800b11c <__i2b>
 800a05e:	4606      	mov	r6, r0
 800a060:	2d00      	cmp	r5, #0
 800a062:	dd0c      	ble.n	800a07e <_dtoa_r+0x72e>
 800a064:	f1b8 0f00 	cmp.w	r8, #0
 800a068:	dd09      	ble.n	800a07e <_dtoa_r+0x72e>
 800a06a:	4545      	cmp	r5, r8
 800a06c:	9a05      	ldr	r2, [sp, #20]
 800a06e:	462b      	mov	r3, r5
 800a070:	bfa8      	it	ge
 800a072:	4643      	movge	r3, r8
 800a074:	1ad2      	subs	r2, r2, r3
 800a076:	9205      	str	r2, [sp, #20]
 800a078:	1aed      	subs	r5, r5, r3
 800a07a:	eba8 0803 	sub.w	r8, r8, r3
 800a07e:	9b07      	ldr	r3, [sp, #28]
 800a080:	b1eb      	cbz	r3, 800a0be <_dtoa_r+0x76e>
 800a082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a084:	2b00      	cmp	r3, #0
 800a086:	d067      	beq.n	800a158 <_dtoa_r+0x808>
 800a088:	b18f      	cbz	r7, 800a0ae <_dtoa_r+0x75e>
 800a08a:	4631      	mov	r1, r6
 800a08c:	463a      	mov	r2, r7
 800a08e:	4620      	mov	r0, r4
 800a090:	f001 f8e4 	bl	800b25c <__pow5mult>
 800a094:	9a04      	ldr	r2, [sp, #16]
 800a096:	4601      	mov	r1, r0
 800a098:	4606      	mov	r6, r0
 800a09a:	4620      	mov	r0, r4
 800a09c:	f001 f847 	bl	800b12e <__multiply>
 800a0a0:	9904      	ldr	r1, [sp, #16]
 800a0a2:	9008      	str	r0, [sp, #32]
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	f000 ff5b 	bl	800af60 <_Bfree>
 800a0aa:	9b08      	ldr	r3, [sp, #32]
 800a0ac:	9304      	str	r3, [sp, #16]
 800a0ae:	9b07      	ldr	r3, [sp, #28]
 800a0b0:	1bda      	subs	r2, r3, r7
 800a0b2:	d004      	beq.n	800a0be <_dtoa_r+0x76e>
 800a0b4:	9904      	ldr	r1, [sp, #16]
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	f001 f8d0 	bl	800b25c <__pow5mult>
 800a0bc:	9004      	str	r0, [sp, #16]
 800a0be:	2101      	movs	r1, #1
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f001 f82b 	bl	800b11c <__i2b>
 800a0c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0c8:	4607      	mov	r7, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f000 81d0 	beq.w	800a470 <_dtoa_r+0xb20>
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	4601      	mov	r1, r0
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	f001 f8c1 	bl	800b25c <__pow5mult>
 800a0da:	9b06      	ldr	r3, [sp, #24]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	4607      	mov	r7, r0
 800a0e0:	dc40      	bgt.n	800a164 <_dtoa_r+0x814>
 800a0e2:	9b00      	ldr	r3, [sp, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d139      	bne.n	800a15c <_dtoa_r+0x80c>
 800a0e8:	9b01      	ldr	r3, [sp, #4]
 800a0ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d136      	bne.n	800a160 <_dtoa_r+0x810>
 800a0f2:	9b01      	ldr	r3, [sp, #4]
 800a0f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0f8:	0d1b      	lsrs	r3, r3, #20
 800a0fa:	051b      	lsls	r3, r3, #20
 800a0fc:	b12b      	cbz	r3, 800a10a <_dtoa_r+0x7ba>
 800a0fe:	9b05      	ldr	r3, [sp, #20]
 800a100:	3301      	adds	r3, #1
 800a102:	9305      	str	r3, [sp, #20]
 800a104:	f108 0801 	add.w	r8, r8, #1
 800a108:	2301      	movs	r3, #1
 800a10a:	9307      	str	r3, [sp, #28]
 800a10c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d12a      	bne.n	800a168 <_dtoa_r+0x818>
 800a112:	2001      	movs	r0, #1
 800a114:	e030      	b.n	800a178 <_dtoa_r+0x828>
 800a116:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a118:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a11c:	e795      	b.n	800a04a <_dtoa_r+0x6fa>
 800a11e:	9b07      	ldr	r3, [sp, #28]
 800a120:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800a124:	42bb      	cmp	r3, r7
 800a126:	bfbf      	itttt	lt
 800a128:	9b07      	ldrlt	r3, [sp, #28]
 800a12a:	9707      	strlt	r7, [sp, #28]
 800a12c:	1afa      	sublt	r2, r7, r3
 800a12e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a130:	bfbb      	ittet	lt
 800a132:	189b      	addlt	r3, r3, r2
 800a134:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a136:	1bdf      	subge	r7, r3, r7
 800a138:	2700      	movlt	r7, #0
 800a13a:	f1b9 0f00 	cmp.w	r9, #0
 800a13e:	bfb5      	itete	lt
 800a140:	9b05      	ldrlt	r3, [sp, #20]
 800a142:	9d05      	ldrge	r5, [sp, #20]
 800a144:	eba3 0509 	sublt.w	r5, r3, r9
 800a148:	464b      	movge	r3, r9
 800a14a:	bfb8      	it	lt
 800a14c:	2300      	movlt	r3, #0
 800a14e:	e77e      	b.n	800a04e <_dtoa_r+0x6fe>
 800a150:	9f07      	ldr	r7, [sp, #28]
 800a152:	9d05      	ldr	r5, [sp, #20]
 800a154:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a156:	e783      	b.n	800a060 <_dtoa_r+0x710>
 800a158:	9a07      	ldr	r2, [sp, #28]
 800a15a:	e7ab      	b.n	800a0b4 <_dtoa_r+0x764>
 800a15c:	2300      	movs	r3, #0
 800a15e:	e7d4      	b.n	800a10a <_dtoa_r+0x7ba>
 800a160:	9b00      	ldr	r3, [sp, #0]
 800a162:	e7d2      	b.n	800a10a <_dtoa_r+0x7ba>
 800a164:	2300      	movs	r3, #0
 800a166:	9307      	str	r3, [sp, #28]
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a16e:	6918      	ldr	r0, [r3, #16]
 800a170:	f000 ff86 	bl	800b080 <__hi0bits>
 800a174:	f1c0 0020 	rsb	r0, r0, #32
 800a178:	4440      	add	r0, r8
 800a17a:	f010 001f 	ands.w	r0, r0, #31
 800a17e:	d047      	beq.n	800a210 <_dtoa_r+0x8c0>
 800a180:	f1c0 0320 	rsb	r3, r0, #32
 800a184:	2b04      	cmp	r3, #4
 800a186:	dd3b      	ble.n	800a200 <_dtoa_r+0x8b0>
 800a188:	9b05      	ldr	r3, [sp, #20]
 800a18a:	f1c0 001c 	rsb	r0, r0, #28
 800a18e:	4403      	add	r3, r0
 800a190:	9305      	str	r3, [sp, #20]
 800a192:	4405      	add	r5, r0
 800a194:	4480      	add	r8, r0
 800a196:	9b05      	ldr	r3, [sp, #20]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	dd05      	ble.n	800a1a8 <_dtoa_r+0x858>
 800a19c:	461a      	mov	r2, r3
 800a19e:	9904      	ldr	r1, [sp, #16]
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f001 f8a9 	bl	800b2f8 <__lshift>
 800a1a6:	9004      	str	r0, [sp, #16]
 800a1a8:	f1b8 0f00 	cmp.w	r8, #0
 800a1ac:	dd05      	ble.n	800a1ba <_dtoa_r+0x86a>
 800a1ae:	4639      	mov	r1, r7
 800a1b0:	4642      	mov	r2, r8
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f001 f8a0 	bl	800b2f8 <__lshift>
 800a1b8:	4607      	mov	r7, r0
 800a1ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1bc:	b353      	cbz	r3, 800a214 <_dtoa_r+0x8c4>
 800a1be:	4639      	mov	r1, r7
 800a1c0:	9804      	ldr	r0, [sp, #16]
 800a1c2:	f001 f8ed 	bl	800b3a0 <__mcmp>
 800a1c6:	2800      	cmp	r0, #0
 800a1c8:	da24      	bge.n	800a214 <_dtoa_r+0x8c4>
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	220a      	movs	r2, #10
 800a1ce:	9904      	ldr	r1, [sp, #16]
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f000 fedc 	bl	800af8e <__multadd>
 800a1d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d8:	9004      	str	r0, [sp, #16]
 800a1da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	f000 814d 	beq.w	800a47e <_dtoa_r+0xb2e>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	4631      	mov	r1, r6
 800a1e8:	220a      	movs	r2, #10
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	f000 fecf 	bl	800af8e <__multadd>
 800a1f0:	9b02      	ldr	r3, [sp, #8]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	dc4f      	bgt.n	800a298 <_dtoa_r+0x948>
 800a1f8:	9b06      	ldr	r3, [sp, #24]
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	dd4c      	ble.n	800a298 <_dtoa_r+0x948>
 800a1fe:	e011      	b.n	800a224 <_dtoa_r+0x8d4>
 800a200:	d0c9      	beq.n	800a196 <_dtoa_r+0x846>
 800a202:	9a05      	ldr	r2, [sp, #20]
 800a204:	331c      	adds	r3, #28
 800a206:	441a      	add	r2, r3
 800a208:	9205      	str	r2, [sp, #20]
 800a20a:	441d      	add	r5, r3
 800a20c:	4498      	add	r8, r3
 800a20e:	e7c2      	b.n	800a196 <_dtoa_r+0x846>
 800a210:	4603      	mov	r3, r0
 800a212:	e7f6      	b.n	800a202 <_dtoa_r+0x8b2>
 800a214:	f1b9 0f00 	cmp.w	r9, #0
 800a218:	dc38      	bgt.n	800a28c <_dtoa_r+0x93c>
 800a21a:	9b06      	ldr	r3, [sp, #24]
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	dd35      	ble.n	800a28c <_dtoa_r+0x93c>
 800a220:	f8cd 9008 	str.w	r9, [sp, #8]
 800a224:	9b02      	ldr	r3, [sp, #8]
 800a226:	b963      	cbnz	r3, 800a242 <_dtoa_r+0x8f2>
 800a228:	4639      	mov	r1, r7
 800a22a:	2205      	movs	r2, #5
 800a22c:	4620      	mov	r0, r4
 800a22e:	f000 feae 	bl	800af8e <__multadd>
 800a232:	4601      	mov	r1, r0
 800a234:	4607      	mov	r7, r0
 800a236:	9804      	ldr	r0, [sp, #16]
 800a238:	f001 f8b2 	bl	800b3a0 <__mcmp>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	f73f adcc 	bgt.w	8009dda <_dtoa_r+0x48a>
 800a242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a244:	465d      	mov	r5, fp
 800a246:	ea6f 0a03 	mvn.w	sl, r3
 800a24a:	f04f 0900 	mov.w	r9, #0
 800a24e:	4639      	mov	r1, r7
 800a250:	4620      	mov	r0, r4
 800a252:	f000 fe85 	bl	800af60 <_Bfree>
 800a256:	2e00      	cmp	r6, #0
 800a258:	f43f aeb7 	beq.w	8009fca <_dtoa_r+0x67a>
 800a25c:	f1b9 0f00 	cmp.w	r9, #0
 800a260:	d005      	beq.n	800a26e <_dtoa_r+0x91e>
 800a262:	45b1      	cmp	r9, r6
 800a264:	d003      	beq.n	800a26e <_dtoa_r+0x91e>
 800a266:	4649      	mov	r1, r9
 800a268:	4620      	mov	r0, r4
 800a26a:	f000 fe79 	bl	800af60 <_Bfree>
 800a26e:	4631      	mov	r1, r6
 800a270:	4620      	mov	r0, r4
 800a272:	f000 fe75 	bl	800af60 <_Bfree>
 800a276:	e6a8      	b.n	8009fca <_dtoa_r+0x67a>
 800a278:	2700      	movs	r7, #0
 800a27a:	463e      	mov	r6, r7
 800a27c:	e7e1      	b.n	800a242 <_dtoa_r+0x8f2>
 800a27e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a282:	463e      	mov	r6, r7
 800a284:	e5a9      	b.n	8009dda <_dtoa_r+0x48a>
 800a286:	bf00      	nop
 800a288:	40240000 	.word	0x40240000
 800a28c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a28e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a292:	2b00      	cmp	r3, #0
 800a294:	f000 80fa 	beq.w	800a48c <_dtoa_r+0xb3c>
 800a298:	2d00      	cmp	r5, #0
 800a29a:	dd05      	ble.n	800a2a8 <_dtoa_r+0x958>
 800a29c:	4631      	mov	r1, r6
 800a29e:	462a      	mov	r2, r5
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f001 f829 	bl	800b2f8 <__lshift>
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	9b07      	ldr	r3, [sp, #28]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d04c      	beq.n	800a348 <_dtoa_r+0x9f8>
 800a2ae:	6871      	ldr	r1, [r6, #4]
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f000 fe21 	bl	800aef8 <_Balloc>
 800a2b6:	6932      	ldr	r2, [r6, #16]
 800a2b8:	3202      	adds	r2, #2
 800a2ba:	4605      	mov	r5, r0
 800a2bc:	0092      	lsls	r2, r2, #2
 800a2be:	f106 010c 	add.w	r1, r6, #12
 800a2c2:	300c      	adds	r0, #12
 800a2c4:	f7fd fc48 	bl	8007b58 <memcpy>
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	4629      	mov	r1, r5
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	f001 f813 	bl	800b2f8 <__lshift>
 800a2d2:	9b00      	ldr	r3, [sp, #0]
 800a2d4:	f8cd b014 	str.w	fp, [sp, #20]
 800a2d8:	f003 0301 	and.w	r3, r3, #1
 800a2dc:	46b1      	mov	r9, r6
 800a2de:	9307      	str	r3, [sp, #28]
 800a2e0:	4606      	mov	r6, r0
 800a2e2:	4639      	mov	r1, r7
 800a2e4:	9804      	ldr	r0, [sp, #16]
 800a2e6:	f7ff faa5 	bl	8009834 <quorem>
 800a2ea:	4649      	mov	r1, r9
 800a2ec:	4605      	mov	r5, r0
 800a2ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a2f2:	9804      	ldr	r0, [sp, #16]
 800a2f4:	f001 f854 	bl	800b3a0 <__mcmp>
 800a2f8:	4632      	mov	r2, r6
 800a2fa:	9000      	str	r0, [sp, #0]
 800a2fc:	4639      	mov	r1, r7
 800a2fe:	4620      	mov	r0, r4
 800a300:	f001 f868 	bl	800b3d4 <__mdiff>
 800a304:	68c3      	ldr	r3, [r0, #12]
 800a306:	4602      	mov	r2, r0
 800a308:	bb03      	cbnz	r3, 800a34c <_dtoa_r+0x9fc>
 800a30a:	4601      	mov	r1, r0
 800a30c:	9008      	str	r0, [sp, #32]
 800a30e:	9804      	ldr	r0, [sp, #16]
 800a310:	f001 f846 	bl	800b3a0 <__mcmp>
 800a314:	9a08      	ldr	r2, [sp, #32]
 800a316:	4603      	mov	r3, r0
 800a318:	4611      	mov	r1, r2
 800a31a:	4620      	mov	r0, r4
 800a31c:	9308      	str	r3, [sp, #32]
 800a31e:	f000 fe1f 	bl	800af60 <_Bfree>
 800a322:	9b08      	ldr	r3, [sp, #32]
 800a324:	b9a3      	cbnz	r3, 800a350 <_dtoa_r+0xa00>
 800a326:	9a06      	ldr	r2, [sp, #24]
 800a328:	b992      	cbnz	r2, 800a350 <_dtoa_r+0xa00>
 800a32a:	9a07      	ldr	r2, [sp, #28]
 800a32c:	b982      	cbnz	r2, 800a350 <_dtoa_r+0xa00>
 800a32e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a332:	d029      	beq.n	800a388 <_dtoa_r+0xa38>
 800a334:	9b00      	ldr	r3, [sp, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	dd01      	ble.n	800a33e <_dtoa_r+0x9ee>
 800a33a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a33e:	9b05      	ldr	r3, [sp, #20]
 800a340:	1c5d      	adds	r5, r3, #1
 800a342:	f883 8000 	strb.w	r8, [r3]
 800a346:	e782      	b.n	800a24e <_dtoa_r+0x8fe>
 800a348:	4630      	mov	r0, r6
 800a34a:	e7c2      	b.n	800a2d2 <_dtoa_r+0x982>
 800a34c:	2301      	movs	r3, #1
 800a34e:	e7e3      	b.n	800a318 <_dtoa_r+0x9c8>
 800a350:	9a00      	ldr	r2, [sp, #0]
 800a352:	2a00      	cmp	r2, #0
 800a354:	db04      	blt.n	800a360 <_dtoa_r+0xa10>
 800a356:	d125      	bne.n	800a3a4 <_dtoa_r+0xa54>
 800a358:	9a06      	ldr	r2, [sp, #24]
 800a35a:	bb1a      	cbnz	r2, 800a3a4 <_dtoa_r+0xa54>
 800a35c:	9a07      	ldr	r2, [sp, #28]
 800a35e:	bb0a      	cbnz	r2, 800a3a4 <_dtoa_r+0xa54>
 800a360:	2b00      	cmp	r3, #0
 800a362:	ddec      	ble.n	800a33e <_dtoa_r+0x9ee>
 800a364:	2201      	movs	r2, #1
 800a366:	9904      	ldr	r1, [sp, #16]
 800a368:	4620      	mov	r0, r4
 800a36a:	f000 ffc5 	bl	800b2f8 <__lshift>
 800a36e:	4639      	mov	r1, r7
 800a370:	9004      	str	r0, [sp, #16]
 800a372:	f001 f815 	bl	800b3a0 <__mcmp>
 800a376:	2800      	cmp	r0, #0
 800a378:	dc03      	bgt.n	800a382 <_dtoa_r+0xa32>
 800a37a:	d1e0      	bne.n	800a33e <_dtoa_r+0x9ee>
 800a37c:	f018 0f01 	tst.w	r8, #1
 800a380:	d0dd      	beq.n	800a33e <_dtoa_r+0x9ee>
 800a382:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a386:	d1d8      	bne.n	800a33a <_dtoa_r+0x9ea>
 800a388:	9b05      	ldr	r3, [sp, #20]
 800a38a:	9a05      	ldr	r2, [sp, #20]
 800a38c:	1c5d      	adds	r5, r3, #1
 800a38e:	2339      	movs	r3, #57	; 0x39
 800a390:	7013      	strb	r3, [r2, #0]
 800a392:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a396:	2b39      	cmp	r3, #57	; 0x39
 800a398:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a39c:	d04f      	beq.n	800a43e <_dtoa_r+0xaee>
 800a39e:	3301      	adds	r3, #1
 800a3a0:	7013      	strb	r3, [r2, #0]
 800a3a2:	e754      	b.n	800a24e <_dtoa_r+0x8fe>
 800a3a4:	9a05      	ldr	r2, [sp, #20]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f102 0501 	add.w	r5, r2, #1
 800a3ac:	dd06      	ble.n	800a3bc <_dtoa_r+0xa6c>
 800a3ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a3b2:	d0e9      	beq.n	800a388 <_dtoa_r+0xa38>
 800a3b4:	f108 0801 	add.w	r8, r8, #1
 800a3b8:	9b05      	ldr	r3, [sp, #20]
 800a3ba:	e7c2      	b.n	800a342 <_dtoa_r+0x9f2>
 800a3bc:	9a02      	ldr	r2, [sp, #8]
 800a3be:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a3c2:	eba5 030b 	sub.w	r3, r5, fp
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d021      	beq.n	800a40e <_dtoa_r+0xabe>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	220a      	movs	r2, #10
 800a3ce:	9904      	ldr	r1, [sp, #16]
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f000 fddc 	bl	800af8e <__multadd>
 800a3d6:	45b1      	cmp	r9, r6
 800a3d8:	9004      	str	r0, [sp, #16]
 800a3da:	f04f 0300 	mov.w	r3, #0
 800a3de:	f04f 020a 	mov.w	r2, #10
 800a3e2:	4649      	mov	r1, r9
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	d105      	bne.n	800a3f4 <_dtoa_r+0xaa4>
 800a3e8:	f000 fdd1 	bl	800af8e <__multadd>
 800a3ec:	4681      	mov	r9, r0
 800a3ee:	4606      	mov	r6, r0
 800a3f0:	9505      	str	r5, [sp, #20]
 800a3f2:	e776      	b.n	800a2e2 <_dtoa_r+0x992>
 800a3f4:	f000 fdcb 	bl	800af8e <__multadd>
 800a3f8:	4631      	mov	r1, r6
 800a3fa:	4681      	mov	r9, r0
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	220a      	movs	r2, #10
 800a400:	4620      	mov	r0, r4
 800a402:	f000 fdc4 	bl	800af8e <__multadd>
 800a406:	4606      	mov	r6, r0
 800a408:	e7f2      	b.n	800a3f0 <_dtoa_r+0xaa0>
 800a40a:	f04f 0900 	mov.w	r9, #0
 800a40e:	2201      	movs	r2, #1
 800a410:	9904      	ldr	r1, [sp, #16]
 800a412:	4620      	mov	r0, r4
 800a414:	f000 ff70 	bl	800b2f8 <__lshift>
 800a418:	4639      	mov	r1, r7
 800a41a:	9004      	str	r0, [sp, #16]
 800a41c:	f000 ffc0 	bl	800b3a0 <__mcmp>
 800a420:	2800      	cmp	r0, #0
 800a422:	dcb6      	bgt.n	800a392 <_dtoa_r+0xa42>
 800a424:	d102      	bne.n	800a42c <_dtoa_r+0xadc>
 800a426:	f018 0f01 	tst.w	r8, #1
 800a42a:	d1b2      	bne.n	800a392 <_dtoa_r+0xa42>
 800a42c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a430:	2b30      	cmp	r3, #48	; 0x30
 800a432:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a436:	f47f af0a 	bne.w	800a24e <_dtoa_r+0x8fe>
 800a43a:	4615      	mov	r5, r2
 800a43c:	e7f6      	b.n	800a42c <_dtoa_r+0xadc>
 800a43e:	4593      	cmp	fp, r2
 800a440:	d105      	bne.n	800a44e <_dtoa_r+0xafe>
 800a442:	2331      	movs	r3, #49	; 0x31
 800a444:	f10a 0a01 	add.w	sl, sl, #1
 800a448:	f88b 3000 	strb.w	r3, [fp]
 800a44c:	e6ff      	b.n	800a24e <_dtoa_r+0x8fe>
 800a44e:	4615      	mov	r5, r2
 800a450:	e79f      	b.n	800a392 <_dtoa_r+0xa42>
 800a452:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a4b8 <_dtoa_r+0xb68>
 800a456:	e007      	b.n	800a468 <_dtoa_r+0xb18>
 800a458:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a45a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a4bc <_dtoa_r+0xb6c>
 800a45e:	b11b      	cbz	r3, 800a468 <_dtoa_r+0xb18>
 800a460:	f10b 0308 	add.w	r3, fp, #8
 800a464:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a466:	6013      	str	r3, [r2, #0]
 800a468:	4658      	mov	r0, fp
 800a46a:	b017      	add	sp, #92	; 0x5c
 800a46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a470:	9b06      	ldr	r3, [sp, #24]
 800a472:	2b01      	cmp	r3, #1
 800a474:	f77f ae35 	ble.w	800a0e2 <_dtoa_r+0x792>
 800a478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a47a:	9307      	str	r3, [sp, #28]
 800a47c:	e649      	b.n	800a112 <_dtoa_r+0x7c2>
 800a47e:	9b02      	ldr	r3, [sp, #8]
 800a480:	2b00      	cmp	r3, #0
 800a482:	dc03      	bgt.n	800a48c <_dtoa_r+0xb3c>
 800a484:	9b06      	ldr	r3, [sp, #24]
 800a486:	2b02      	cmp	r3, #2
 800a488:	f73f aecc 	bgt.w	800a224 <_dtoa_r+0x8d4>
 800a48c:	465d      	mov	r5, fp
 800a48e:	4639      	mov	r1, r7
 800a490:	9804      	ldr	r0, [sp, #16]
 800a492:	f7ff f9cf 	bl	8009834 <quorem>
 800a496:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a49a:	f805 8b01 	strb.w	r8, [r5], #1
 800a49e:	9a02      	ldr	r2, [sp, #8]
 800a4a0:	eba5 030b 	sub.w	r3, r5, fp
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	ddb0      	ble.n	800a40a <_dtoa_r+0xaba>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	220a      	movs	r2, #10
 800a4ac:	9904      	ldr	r1, [sp, #16]
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f000 fd6d 	bl	800af8e <__multadd>
 800a4b4:	9004      	str	r0, [sp, #16]
 800a4b6:	e7ea      	b.n	800a48e <_dtoa_r+0xb3e>
 800a4b8:	0800c2da 	.word	0x0800c2da
 800a4bc:	0800c459 	.word	0x0800c459

0800a4c0 <__sflush_r>:
 800a4c0:	898a      	ldrh	r2, [r1, #12]
 800a4c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c6:	4605      	mov	r5, r0
 800a4c8:	0710      	lsls	r0, r2, #28
 800a4ca:	460c      	mov	r4, r1
 800a4cc:	d458      	bmi.n	800a580 <__sflush_r+0xc0>
 800a4ce:	684b      	ldr	r3, [r1, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	dc05      	bgt.n	800a4e0 <__sflush_r+0x20>
 800a4d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	dc02      	bgt.n	800a4e0 <__sflush_r+0x20>
 800a4da:	2000      	movs	r0, #0
 800a4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4e2:	2e00      	cmp	r6, #0
 800a4e4:	d0f9      	beq.n	800a4da <__sflush_r+0x1a>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4ec:	682f      	ldr	r7, [r5, #0]
 800a4ee:	6a21      	ldr	r1, [r4, #32]
 800a4f0:	602b      	str	r3, [r5, #0]
 800a4f2:	d032      	beq.n	800a55a <__sflush_r+0x9a>
 800a4f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4f6:	89a3      	ldrh	r3, [r4, #12]
 800a4f8:	075a      	lsls	r2, r3, #29
 800a4fa:	d505      	bpl.n	800a508 <__sflush_r+0x48>
 800a4fc:	6863      	ldr	r3, [r4, #4]
 800a4fe:	1ac0      	subs	r0, r0, r3
 800a500:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a502:	b10b      	cbz	r3, 800a508 <__sflush_r+0x48>
 800a504:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a506:	1ac0      	subs	r0, r0, r3
 800a508:	2300      	movs	r3, #0
 800a50a:	4602      	mov	r2, r0
 800a50c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a50e:	6a21      	ldr	r1, [r4, #32]
 800a510:	4628      	mov	r0, r5
 800a512:	47b0      	blx	r6
 800a514:	1c43      	adds	r3, r0, #1
 800a516:	89a3      	ldrh	r3, [r4, #12]
 800a518:	d106      	bne.n	800a528 <__sflush_r+0x68>
 800a51a:	6829      	ldr	r1, [r5, #0]
 800a51c:	291d      	cmp	r1, #29
 800a51e:	d848      	bhi.n	800a5b2 <__sflush_r+0xf2>
 800a520:	4a29      	ldr	r2, [pc, #164]	; (800a5c8 <__sflush_r+0x108>)
 800a522:	40ca      	lsrs	r2, r1
 800a524:	07d6      	lsls	r6, r2, #31
 800a526:	d544      	bpl.n	800a5b2 <__sflush_r+0xf2>
 800a528:	2200      	movs	r2, #0
 800a52a:	6062      	str	r2, [r4, #4]
 800a52c:	04d9      	lsls	r1, r3, #19
 800a52e:	6922      	ldr	r2, [r4, #16]
 800a530:	6022      	str	r2, [r4, #0]
 800a532:	d504      	bpl.n	800a53e <__sflush_r+0x7e>
 800a534:	1c42      	adds	r2, r0, #1
 800a536:	d101      	bne.n	800a53c <__sflush_r+0x7c>
 800a538:	682b      	ldr	r3, [r5, #0]
 800a53a:	b903      	cbnz	r3, 800a53e <__sflush_r+0x7e>
 800a53c:	6560      	str	r0, [r4, #84]	; 0x54
 800a53e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a540:	602f      	str	r7, [r5, #0]
 800a542:	2900      	cmp	r1, #0
 800a544:	d0c9      	beq.n	800a4da <__sflush_r+0x1a>
 800a546:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a54a:	4299      	cmp	r1, r3
 800a54c:	d002      	beq.n	800a554 <__sflush_r+0x94>
 800a54e:	4628      	mov	r0, r5
 800a550:	f001 f8e0 	bl	800b714 <_free_r>
 800a554:	2000      	movs	r0, #0
 800a556:	6360      	str	r0, [r4, #52]	; 0x34
 800a558:	e7c0      	b.n	800a4dc <__sflush_r+0x1c>
 800a55a:	2301      	movs	r3, #1
 800a55c:	4628      	mov	r0, r5
 800a55e:	47b0      	blx	r6
 800a560:	1c41      	adds	r1, r0, #1
 800a562:	d1c8      	bne.n	800a4f6 <__sflush_r+0x36>
 800a564:	682b      	ldr	r3, [r5, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d0c5      	beq.n	800a4f6 <__sflush_r+0x36>
 800a56a:	2b1d      	cmp	r3, #29
 800a56c:	d001      	beq.n	800a572 <__sflush_r+0xb2>
 800a56e:	2b16      	cmp	r3, #22
 800a570:	d101      	bne.n	800a576 <__sflush_r+0xb6>
 800a572:	602f      	str	r7, [r5, #0]
 800a574:	e7b1      	b.n	800a4da <__sflush_r+0x1a>
 800a576:	89a3      	ldrh	r3, [r4, #12]
 800a578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a57c:	81a3      	strh	r3, [r4, #12]
 800a57e:	e7ad      	b.n	800a4dc <__sflush_r+0x1c>
 800a580:	690f      	ldr	r7, [r1, #16]
 800a582:	2f00      	cmp	r7, #0
 800a584:	d0a9      	beq.n	800a4da <__sflush_r+0x1a>
 800a586:	0793      	lsls	r3, r2, #30
 800a588:	680e      	ldr	r6, [r1, #0]
 800a58a:	bf08      	it	eq
 800a58c:	694b      	ldreq	r3, [r1, #20]
 800a58e:	600f      	str	r7, [r1, #0]
 800a590:	bf18      	it	ne
 800a592:	2300      	movne	r3, #0
 800a594:	eba6 0807 	sub.w	r8, r6, r7
 800a598:	608b      	str	r3, [r1, #8]
 800a59a:	f1b8 0f00 	cmp.w	r8, #0
 800a59e:	dd9c      	ble.n	800a4da <__sflush_r+0x1a>
 800a5a0:	4643      	mov	r3, r8
 800a5a2:	463a      	mov	r2, r7
 800a5a4:	6a21      	ldr	r1, [r4, #32]
 800a5a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	47b0      	blx	r6
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	dc06      	bgt.n	800a5be <__sflush_r+0xfe>
 800a5b0:	89a3      	ldrh	r3, [r4, #12]
 800a5b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5b6:	81a3      	strh	r3, [r4, #12]
 800a5b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5bc:	e78e      	b.n	800a4dc <__sflush_r+0x1c>
 800a5be:	4407      	add	r7, r0
 800a5c0:	eba8 0800 	sub.w	r8, r8, r0
 800a5c4:	e7e9      	b.n	800a59a <__sflush_r+0xda>
 800a5c6:	bf00      	nop
 800a5c8:	20400001 	.word	0x20400001

0800a5cc <_fflush_r>:
 800a5cc:	b538      	push	{r3, r4, r5, lr}
 800a5ce:	690b      	ldr	r3, [r1, #16]
 800a5d0:	4605      	mov	r5, r0
 800a5d2:	460c      	mov	r4, r1
 800a5d4:	b1db      	cbz	r3, 800a60e <_fflush_r+0x42>
 800a5d6:	b118      	cbz	r0, 800a5e0 <_fflush_r+0x14>
 800a5d8:	6983      	ldr	r3, [r0, #24]
 800a5da:	b90b      	cbnz	r3, 800a5e0 <_fflush_r+0x14>
 800a5dc:	f000 f860 	bl	800a6a0 <__sinit>
 800a5e0:	4b0c      	ldr	r3, [pc, #48]	; (800a614 <_fflush_r+0x48>)
 800a5e2:	429c      	cmp	r4, r3
 800a5e4:	d109      	bne.n	800a5fa <_fflush_r+0x2e>
 800a5e6:	686c      	ldr	r4, [r5, #4]
 800a5e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5ec:	b17b      	cbz	r3, 800a60e <_fflush_r+0x42>
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5f6:	f7ff bf63 	b.w	800a4c0 <__sflush_r>
 800a5fa:	4b07      	ldr	r3, [pc, #28]	; (800a618 <_fflush_r+0x4c>)
 800a5fc:	429c      	cmp	r4, r3
 800a5fe:	d101      	bne.n	800a604 <_fflush_r+0x38>
 800a600:	68ac      	ldr	r4, [r5, #8]
 800a602:	e7f1      	b.n	800a5e8 <_fflush_r+0x1c>
 800a604:	4b05      	ldr	r3, [pc, #20]	; (800a61c <_fflush_r+0x50>)
 800a606:	429c      	cmp	r4, r3
 800a608:	bf08      	it	eq
 800a60a:	68ec      	ldreq	r4, [r5, #12]
 800a60c:	e7ec      	b.n	800a5e8 <_fflush_r+0x1c>
 800a60e:	2000      	movs	r0, #0
 800a610:	bd38      	pop	{r3, r4, r5, pc}
 800a612:	bf00      	nop
 800a614:	0800c488 	.word	0x0800c488
 800a618:	0800c4a8 	.word	0x0800c4a8
 800a61c:	0800c468 	.word	0x0800c468

0800a620 <std>:
 800a620:	2300      	movs	r3, #0
 800a622:	b510      	push	{r4, lr}
 800a624:	4604      	mov	r4, r0
 800a626:	e9c0 3300 	strd	r3, r3, [r0]
 800a62a:	6083      	str	r3, [r0, #8]
 800a62c:	8181      	strh	r1, [r0, #12]
 800a62e:	6643      	str	r3, [r0, #100]	; 0x64
 800a630:	81c2      	strh	r2, [r0, #14]
 800a632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a636:	6183      	str	r3, [r0, #24]
 800a638:	4619      	mov	r1, r3
 800a63a:	2208      	movs	r2, #8
 800a63c:	305c      	adds	r0, #92	; 0x5c
 800a63e:	f7fd fa96 	bl	8007b6e <memset>
 800a642:	4b05      	ldr	r3, [pc, #20]	; (800a658 <std+0x38>)
 800a644:	6263      	str	r3, [r4, #36]	; 0x24
 800a646:	4b05      	ldr	r3, [pc, #20]	; (800a65c <std+0x3c>)
 800a648:	62a3      	str	r3, [r4, #40]	; 0x28
 800a64a:	4b05      	ldr	r3, [pc, #20]	; (800a660 <std+0x40>)
 800a64c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a64e:	4b05      	ldr	r3, [pc, #20]	; (800a664 <std+0x44>)
 800a650:	6224      	str	r4, [r4, #32]
 800a652:	6323      	str	r3, [r4, #48]	; 0x30
 800a654:	bd10      	pop	{r4, pc}
 800a656:	bf00      	nop
 800a658:	0800bb29 	.word	0x0800bb29
 800a65c:	0800bb4b 	.word	0x0800bb4b
 800a660:	0800bb83 	.word	0x0800bb83
 800a664:	0800bba7 	.word	0x0800bba7

0800a668 <_cleanup_r>:
 800a668:	4901      	ldr	r1, [pc, #4]	; (800a670 <_cleanup_r+0x8>)
 800a66a:	f000 b885 	b.w	800a778 <_fwalk_reent>
 800a66e:	bf00      	nop
 800a670:	0800a5cd 	.word	0x0800a5cd

0800a674 <__sfmoreglue>:
 800a674:	b570      	push	{r4, r5, r6, lr}
 800a676:	1e4a      	subs	r2, r1, #1
 800a678:	2568      	movs	r5, #104	; 0x68
 800a67a:	4355      	muls	r5, r2
 800a67c:	460e      	mov	r6, r1
 800a67e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a682:	f001 f895 	bl	800b7b0 <_malloc_r>
 800a686:	4604      	mov	r4, r0
 800a688:	b140      	cbz	r0, 800a69c <__sfmoreglue+0x28>
 800a68a:	2100      	movs	r1, #0
 800a68c:	e9c0 1600 	strd	r1, r6, [r0]
 800a690:	300c      	adds	r0, #12
 800a692:	60a0      	str	r0, [r4, #8]
 800a694:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a698:	f7fd fa69 	bl	8007b6e <memset>
 800a69c:	4620      	mov	r0, r4
 800a69e:	bd70      	pop	{r4, r5, r6, pc}

0800a6a0 <__sinit>:
 800a6a0:	6983      	ldr	r3, [r0, #24]
 800a6a2:	b510      	push	{r4, lr}
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	bb33      	cbnz	r3, 800a6f6 <__sinit+0x56>
 800a6a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a6ac:	6503      	str	r3, [r0, #80]	; 0x50
 800a6ae:	4b12      	ldr	r3, [pc, #72]	; (800a6f8 <__sinit+0x58>)
 800a6b0:	4a12      	ldr	r2, [pc, #72]	; (800a6fc <__sinit+0x5c>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6282      	str	r2, [r0, #40]	; 0x28
 800a6b6:	4298      	cmp	r0, r3
 800a6b8:	bf04      	itt	eq
 800a6ba:	2301      	moveq	r3, #1
 800a6bc:	6183      	streq	r3, [r0, #24]
 800a6be:	f000 f81f 	bl	800a700 <__sfp>
 800a6c2:	6060      	str	r0, [r4, #4]
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	f000 f81b 	bl	800a700 <__sfp>
 800a6ca:	60a0      	str	r0, [r4, #8]
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	f000 f817 	bl	800a700 <__sfp>
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	60e0      	str	r0, [r4, #12]
 800a6d6:	2104      	movs	r1, #4
 800a6d8:	6860      	ldr	r0, [r4, #4]
 800a6da:	f7ff ffa1 	bl	800a620 <std>
 800a6de:	2201      	movs	r2, #1
 800a6e0:	2109      	movs	r1, #9
 800a6e2:	68a0      	ldr	r0, [r4, #8]
 800a6e4:	f7ff ff9c 	bl	800a620 <std>
 800a6e8:	2202      	movs	r2, #2
 800a6ea:	2112      	movs	r1, #18
 800a6ec:	68e0      	ldr	r0, [r4, #12]
 800a6ee:	f7ff ff97 	bl	800a620 <std>
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	61a3      	str	r3, [r4, #24]
 800a6f6:	bd10      	pop	{r4, pc}
 800a6f8:	0800c2bc 	.word	0x0800c2bc
 800a6fc:	0800a669 	.word	0x0800a669

0800a700 <__sfp>:
 800a700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a702:	4b1b      	ldr	r3, [pc, #108]	; (800a770 <__sfp+0x70>)
 800a704:	681e      	ldr	r6, [r3, #0]
 800a706:	69b3      	ldr	r3, [r6, #24]
 800a708:	4607      	mov	r7, r0
 800a70a:	b913      	cbnz	r3, 800a712 <__sfp+0x12>
 800a70c:	4630      	mov	r0, r6
 800a70e:	f7ff ffc7 	bl	800a6a0 <__sinit>
 800a712:	3648      	adds	r6, #72	; 0x48
 800a714:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a718:	3b01      	subs	r3, #1
 800a71a:	d503      	bpl.n	800a724 <__sfp+0x24>
 800a71c:	6833      	ldr	r3, [r6, #0]
 800a71e:	b133      	cbz	r3, 800a72e <__sfp+0x2e>
 800a720:	6836      	ldr	r6, [r6, #0]
 800a722:	e7f7      	b.n	800a714 <__sfp+0x14>
 800a724:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a728:	b16d      	cbz	r5, 800a746 <__sfp+0x46>
 800a72a:	3468      	adds	r4, #104	; 0x68
 800a72c:	e7f4      	b.n	800a718 <__sfp+0x18>
 800a72e:	2104      	movs	r1, #4
 800a730:	4638      	mov	r0, r7
 800a732:	f7ff ff9f 	bl	800a674 <__sfmoreglue>
 800a736:	6030      	str	r0, [r6, #0]
 800a738:	2800      	cmp	r0, #0
 800a73a:	d1f1      	bne.n	800a720 <__sfp+0x20>
 800a73c:	230c      	movs	r3, #12
 800a73e:	603b      	str	r3, [r7, #0]
 800a740:	4604      	mov	r4, r0
 800a742:	4620      	mov	r0, r4
 800a744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a746:	4b0b      	ldr	r3, [pc, #44]	; (800a774 <__sfp+0x74>)
 800a748:	6665      	str	r5, [r4, #100]	; 0x64
 800a74a:	e9c4 5500 	strd	r5, r5, [r4]
 800a74e:	60a5      	str	r5, [r4, #8]
 800a750:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a754:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a758:	2208      	movs	r2, #8
 800a75a:	4629      	mov	r1, r5
 800a75c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a760:	f7fd fa05 	bl	8007b6e <memset>
 800a764:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a768:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a76c:	e7e9      	b.n	800a742 <__sfp+0x42>
 800a76e:	bf00      	nop
 800a770:	0800c2bc 	.word	0x0800c2bc
 800a774:	ffff0001 	.word	0xffff0001

0800a778 <_fwalk_reent>:
 800a778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a77c:	4680      	mov	r8, r0
 800a77e:	4689      	mov	r9, r1
 800a780:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a784:	2600      	movs	r6, #0
 800a786:	b914      	cbnz	r4, 800a78e <_fwalk_reent+0x16>
 800a788:	4630      	mov	r0, r6
 800a78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a78e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a792:	3f01      	subs	r7, #1
 800a794:	d501      	bpl.n	800a79a <_fwalk_reent+0x22>
 800a796:	6824      	ldr	r4, [r4, #0]
 800a798:	e7f5      	b.n	800a786 <_fwalk_reent+0xe>
 800a79a:	89ab      	ldrh	r3, [r5, #12]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d907      	bls.n	800a7b0 <_fwalk_reent+0x38>
 800a7a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	d003      	beq.n	800a7b0 <_fwalk_reent+0x38>
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	4640      	mov	r0, r8
 800a7ac:	47c8      	blx	r9
 800a7ae:	4306      	orrs	r6, r0
 800a7b0:	3568      	adds	r5, #104	; 0x68
 800a7b2:	e7ee      	b.n	800a792 <_fwalk_reent+0x1a>

0800a7b4 <rshift>:
 800a7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7b6:	6906      	ldr	r6, [r0, #16]
 800a7b8:	114b      	asrs	r3, r1, #5
 800a7ba:	429e      	cmp	r6, r3
 800a7bc:	f100 0414 	add.w	r4, r0, #20
 800a7c0:	dd30      	ble.n	800a824 <rshift+0x70>
 800a7c2:	f011 011f 	ands.w	r1, r1, #31
 800a7c6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a7ca:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a7ce:	d108      	bne.n	800a7e2 <rshift+0x2e>
 800a7d0:	4621      	mov	r1, r4
 800a7d2:	42b2      	cmp	r2, r6
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	d211      	bcs.n	800a7fc <rshift+0x48>
 800a7d8:	f852 3b04 	ldr.w	r3, [r2], #4
 800a7dc:	f841 3b04 	str.w	r3, [r1], #4
 800a7e0:	e7f7      	b.n	800a7d2 <rshift+0x1e>
 800a7e2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a7e6:	f1c1 0c20 	rsb	ip, r1, #32
 800a7ea:	40cd      	lsrs	r5, r1
 800a7ec:	3204      	adds	r2, #4
 800a7ee:	4623      	mov	r3, r4
 800a7f0:	42b2      	cmp	r2, r6
 800a7f2:	4617      	mov	r7, r2
 800a7f4:	d30c      	bcc.n	800a810 <rshift+0x5c>
 800a7f6:	601d      	str	r5, [r3, #0]
 800a7f8:	b105      	cbz	r5, 800a7fc <rshift+0x48>
 800a7fa:	3304      	adds	r3, #4
 800a7fc:	1b1a      	subs	r2, r3, r4
 800a7fe:	42a3      	cmp	r3, r4
 800a800:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a804:	bf08      	it	eq
 800a806:	2300      	moveq	r3, #0
 800a808:	6102      	str	r2, [r0, #16]
 800a80a:	bf08      	it	eq
 800a80c:	6143      	streq	r3, [r0, #20]
 800a80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a810:	683f      	ldr	r7, [r7, #0]
 800a812:	fa07 f70c 	lsl.w	r7, r7, ip
 800a816:	433d      	orrs	r5, r7
 800a818:	f843 5b04 	str.w	r5, [r3], #4
 800a81c:	f852 5b04 	ldr.w	r5, [r2], #4
 800a820:	40cd      	lsrs	r5, r1
 800a822:	e7e5      	b.n	800a7f0 <rshift+0x3c>
 800a824:	4623      	mov	r3, r4
 800a826:	e7e9      	b.n	800a7fc <rshift+0x48>

0800a828 <__hexdig_fun>:
 800a828:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a82c:	2b09      	cmp	r3, #9
 800a82e:	d802      	bhi.n	800a836 <__hexdig_fun+0xe>
 800a830:	3820      	subs	r0, #32
 800a832:	b2c0      	uxtb	r0, r0
 800a834:	4770      	bx	lr
 800a836:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a83a:	2b05      	cmp	r3, #5
 800a83c:	d801      	bhi.n	800a842 <__hexdig_fun+0x1a>
 800a83e:	3847      	subs	r0, #71	; 0x47
 800a840:	e7f7      	b.n	800a832 <__hexdig_fun+0xa>
 800a842:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a846:	2b05      	cmp	r3, #5
 800a848:	d801      	bhi.n	800a84e <__hexdig_fun+0x26>
 800a84a:	3827      	subs	r0, #39	; 0x27
 800a84c:	e7f1      	b.n	800a832 <__hexdig_fun+0xa>
 800a84e:	2000      	movs	r0, #0
 800a850:	4770      	bx	lr

0800a852 <__gethex>:
 800a852:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a856:	b08b      	sub	sp, #44	; 0x2c
 800a858:	468a      	mov	sl, r1
 800a85a:	9002      	str	r0, [sp, #8]
 800a85c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a85e:	9306      	str	r3, [sp, #24]
 800a860:	4690      	mov	r8, r2
 800a862:	f000 facd 	bl	800ae00 <__localeconv_l>
 800a866:	6803      	ldr	r3, [r0, #0]
 800a868:	9303      	str	r3, [sp, #12]
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7f5 fcc2 	bl	80001f4 <strlen>
 800a870:	9b03      	ldr	r3, [sp, #12]
 800a872:	9001      	str	r0, [sp, #4]
 800a874:	4403      	add	r3, r0
 800a876:	f04f 0b00 	mov.w	fp, #0
 800a87a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a87e:	9307      	str	r3, [sp, #28]
 800a880:	f8da 3000 	ldr.w	r3, [sl]
 800a884:	3302      	adds	r3, #2
 800a886:	461f      	mov	r7, r3
 800a888:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a88c:	2830      	cmp	r0, #48	; 0x30
 800a88e:	d06c      	beq.n	800a96a <__gethex+0x118>
 800a890:	f7ff ffca 	bl	800a828 <__hexdig_fun>
 800a894:	4604      	mov	r4, r0
 800a896:	2800      	cmp	r0, #0
 800a898:	d16a      	bne.n	800a970 <__gethex+0x11e>
 800a89a:	9a01      	ldr	r2, [sp, #4]
 800a89c:	9903      	ldr	r1, [sp, #12]
 800a89e:	4638      	mov	r0, r7
 800a8a0:	f001 f985 	bl	800bbae <strncmp>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d166      	bne.n	800a976 <__gethex+0x124>
 800a8a8:	9b01      	ldr	r3, [sp, #4]
 800a8aa:	5cf8      	ldrb	r0, [r7, r3]
 800a8ac:	18fe      	adds	r6, r7, r3
 800a8ae:	f7ff ffbb 	bl	800a828 <__hexdig_fun>
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	d062      	beq.n	800a97c <__gethex+0x12a>
 800a8b6:	4633      	mov	r3, r6
 800a8b8:	7818      	ldrb	r0, [r3, #0]
 800a8ba:	2830      	cmp	r0, #48	; 0x30
 800a8bc:	461f      	mov	r7, r3
 800a8be:	f103 0301 	add.w	r3, r3, #1
 800a8c2:	d0f9      	beq.n	800a8b8 <__gethex+0x66>
 800a8c4:	f7ff ffb0 	bl	800a828 <__hexdig_fun>
 800a8c8:	fab0 f580 	clz	r5, r0
 800a8cc:	096d      	lsrs	r5, r5, #5
 800a8ce:	4634      	mov	r4, r6
 800a8d0:	f04f 0b01 	mov.w	fp, #1
 800a8d4:	463a      	mov	r2, r7
 800a8d6:	4616      	mov	r6, r2
 800a8d8:	3201      	adds	r2, #1
 800a8da:	7830      	ldrb	r0, [r6, #0]
 800a8dc:	f7ff ffa4 	bl	800a828 <__hexdig_fun>
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	d1f8      	bne.n	800a8d6 <__gethex+0x84>
 800a8e4:	9a01      	ldr	r2, [sp, #4]
 800a8e6:	9903      	ldr	r1, [sp, #12]
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	f001 f960 	bl	800bbae <strncmp>
 800a8ee:	b950      	cbnz	r0, 800a906 <__gethex+0xb4>
 800a8f0:	b954      	cbnz	r4, 800a908 <__gethex+0xb6>
 800a8f2:	9b01      	ldr	r3, [sp, #4]
 800a8f4:	18f4      	adds	r4, r6, r3
 800a8f6:	4622      	mov	r2, r4
 800a8f8:	4616      	mov	r6, r2
 800a8fa:	3201      	adds	r2, #1
 800a8fc:	7830      	ldrb	r0, [r6, #0]
 800a8fe:	f7ff ff93 	bl	800a828 <__hexdig_fun>
 800a902:	2800      	cmp	r0, #0
 800a904:	d1f8      	bne.n	800a8f8 <__gethex+0xa6>
 800a906:	b10c      	cbz	r4, 800a90c <__gethex+0xba>
 800a908:	1ba4      	subs	r4, r4, r6
 800a90a:	00a4      	lsls	r4, r4, #2
 800a90c:	7833      	ldrb	r3, [r6, #0]
 800a90e:	2b50      	cmp	r3, #80	; 0x50
 800a910:	d001      	beq.n	800a916 <__gethex+0xc4>
 800a912:	2b70      	cmp	r3, #112	; 0x70
 800a914:	d140      	bne.n	800a998 <__gethex+0x146>
 800a916:	7873      	ldrb	r3, [r6, #1]
 800a918:	2b2b      	cmp	r3, #43	; 0x2b
 800a91a:	d031      	beq.n	800a980 <__gethex+0x12e>
 800a91c:	2b2d      	cmp	r3, #45	; 0x2d
 800a91e:	d033      	beq.n	800a988 <__gethex+0x136>
 800a920:	1c71      	adds	r1, r6, #1
 800a922:	f04f 0900 	mov.w	r9, #0
 800a926:	7808      	ldrb	r0, [r1, #0]
 800a928:	f7ff ff7e 	bl	800a828 <__hexdig_fun>
 800a92c:	1e43      	subs	r3, r0, #1
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	2b18      	cmp	r3, #24
 800a932:	d831      	bhi.n	800a998 <__gethex+0x146>
 800a934:	f1a0 0210 	sub.w	r2, r0, #16
 800a938:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a93c:	f7ff ff74 	bl	800a828 <__hexdig_fun>
 800a940:	1e43      	subs	r3, r0, #1
 800a942:	b2db      	uxtb	r3, r3
 800a944:	2b18      	cmp	r3, #24
 800a946:	d922      	bls.n	800a98e <__gethex+0x13c>
 800a948:	f1b9 0f00 	cmp.w	r9, #0
 800a94c:	d000      	beq.n	800a950 <__gethex+0xfe>
 800a94e:	4252      	negs	r2, r2
 800a950:	4414      	add	r4, r2
 800a952:	f8ca 1000 	str.w	r1, [sl]
 800a956:	b30d      	cbz	r5, 800a99c <__gethex+0x14a>
 800a958:	f1bb 0f00 	cmp.w	fp, #0
 800a95c:	bf0c      	ite	eq
 800a95e:	2706      	moveq	r7, #6
 800a960:	2700      	movne	r7, #0
 800a962:	4638      	mov	r0, r7
 800a964:	b00b      	add	sp, #44	; 0x2c
 800a966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a96a:	f10b 0b01 	add.w	fp, fp, #1
 800a96e:	e78a      	b.n	800a886 <__gethex+0x34>
 800a970:	2500      	movs	r5, #0
 800a972:	462c      	mov	r4, r5
 800a974:	e7ae      	b.n	800a8d4 <__gethex+0x82>
 800a976:	463e      	mov	r6, r7
 800a978:	2501      	movs	r5, #1
 800a97a:	e7c7      	b.n	800a90c <__gethex+0xba>
 800a97c:	4604      	mov	r4, r0
 800a97e:	e7fb      	b.n	800a978 <__gethex+0x126>
 800a980:	f04f 0900 	mov.w	r9, #0
 800a984:	1cb1      	adds	r1, r6, #2
 800a986:	e7ce      	b.n	800a926 <__gethex+0xd4>
 800a988:	f04f 0901 	mov.w	r9, #1
 800a98c:	e7fa      	b.n	800a984 <__gethex+0x132>
 800a98e:	230a      	movs	r3, #10
 800a990:	fb03 0202 	mla	r2, r3, r2, r0
 800a994:	3a10      	subs	r2, #16
 800a996:	e7cf      	b.n	800a938 <__gethex+0xe6>
 800a998:	4631      	mov	r1, r6
 800a99a:	e7da      	b.n	800a952 <__gethex+0x100>
 800a99c:	1bf3      	subs	r3, r6, r7
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	4629      	mov	r1, r5
 800a9a2:	2b07      	cmp	r3, #7
 800a9a4:	dc49      	bgt.n	800aa3a <__gethex+0x1e8>
 800a9a6:	9802      	ldr	r0, [sp, #8]
 800a9a8:	f000 faa6 	bl	800aef8 <_Balloc>
 800a9ac:	9b01      	ldr	r3, [sp, #4]
 800a9ae:	f100 0914 	add.w	r9, r0, #20
 800a9b2:	f04f 0b00 	mov.w	fp, #0
 800a9b6:	f1c3 0301 	rsb	r3, r3, #1
 800a9ba:	4605      	mov	r5, r0
 800a9bc:	f8cd 9010 	str.w	r9, [sp, #16]
 800a9c0:	46da      	mov	sl, fp
 800a9c2:	9308      	str	r3, [sp, #32]
 800a9c4:	42b7      	cmp	r7, r6
 800a9c6:	d33b      	bcc.n	800aa40 <__gethex+0x1ee>
 800a9c8:	9804      	ldr	r0, [sp, #16]
 800a9ca:	f840 ab04 	str.w	sl, [r0], #4
 800a9ce:	eba0 0009 	sub.w	r0, r0, r9
 800a9d2:	1080      	asrs	r0, r0, #2
 800a9d4:	6128      	str	r0, [r5, #16]
 800a9d6:	0147      	lsls	r7, r0, #5
 800a9d8:	4650      	mov	r0, sl
 800a9da:	f000 fb51 	bl	800b080 <__hi0bits>
 800a9de:	f8d8 6000 	ldr.w	r6, [r8]
 800a9e2:	1a3f      	subs	r7, r7, r0
 800a9e4:	42b7      	cmp	r7, r6
 800a9e6:	dd64      	ble.n	800aab2 <__gethex+0x260>
 800a9e8:	1bbf      	subs	r7, r7, r6
 800a9ea:	4639      	mov	r1, r7
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	f000 fe61 	bl	800b6b4 <__any_on>
 800a9f2:	4682      	mov	sl, r0
 800a9f4:	b178      	cbz	r0, 800aa16 <__gethex+0x1c4>
 800a9f6:	1e7b      	subs	r3, r7, #1
 800a9f8:	1159      	asrs	r1, r3, #5
 800a9fa:	f003 021f 	and.w	r2, r3, #31
 800a9fe:	f04f 0a01 	mov.w	sl, #1
 800aa02:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aa06:	fa0a f202 	lsl.w	r2, sl, r2
 800aa0a:	420a      	tst	r2, r1
 800aa0c:	d003      	beq.n	800aa16 <__gethex+0x1c4>
 800aa0e:	4553      	cmp	r3, sl
 800aa10:	dc46      	bgt.n	800aaa0 <__gethex+0x24e>
 800aa12:	f04f 0a02 	mov.w	sl, #2
 800aa16:	4639      	mov	r1, r7
 800aa18:	4628      	mov	r0, r5
 800aa1a:	f7ff fecb 	bl	800a7b4 <rshift>
 800aa1e:	443c      	add	r4, r7
 800aa20:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa24:	42a3      	cmp	r3, r4
 800aa26:	da52      	bge.n	800aace <__gethex+0x27c>
 800aa28:	4629      	mov	r1, r5
 800aa2a:	9802      	ldr	r0, [sp, #8]
 800aa2c:	f000 fa98 	bl	800af60 <_Bfree>
 800aa30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa32:	2300      	movs	r3, #0
 800aa34:	6013      	str	r3, [r2, #0]
 800aa36:	27a3      	movs	r7, #163	; 0xa3
 800aa38:	e793      	b.n	800a962 <__gethex+0x110>
 800aa3a:	3101      	adds	r1, #1
 800aa3c:	105b      	asrs	r3, r3, #1
 800aa3e:	e7b0      	b.n	800a9a2 <__gethex+0x150>
 800aa40:	1e73      	subs	r3, r6, #1
 800aa42:	9305      	str	r3, [sp, #20]
 800aa44:	9a07      	ldr	r2, [sp, #28]
 800aa46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d018      	beq.n	800aa80 <__gethex+0x22e>
 800aa4e:	f1bb 0f20 	cmp.w	fp, #32
 800aa52:	d107      	bne.n	800aa64 <__gethex+0x212>
 800aa54:	9b04      	ldr	r3, [sp, #16]
 800aa56:	f8c3 a000 	str.w	sl, [r3]
 800aa5a:	3304      	adds	r3, #4
 800aa5c:	f04f 0a00 	mov.w	sl, #0
 800aa60:	9304      	str	r3, [sp, #16]
 800aa62:	46d3      	mov	fp, sl
 800aa64:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800aa68:	f7ff fede 	bl	800a828 <__hexdig_fun>
 800aa6c:	f000 000f 	and.w	r0, r0, #15
 800aa70:	fa00 f00b 	lsl.w	r0, r0, fp
 800aa74:	ea4a 0a00 	orr.w	sl, sl, r0
 800aa78:	f10b 0b04 	add.w	fp, fp, #4
 800aa7c:	9b05      	ldr	r3, [sp, #20]
 800aa7e:	e00d      	b.n	800aa9c <__gethex+0x24a>
 800aa80:	9b05      	ldr	r3, [sp, #20]
 800aa82:	9a08      	ldr	r2, [sp, #32]
 800aa84:	4413      	add	r3, r2
 800aa86:	42bb      	cmp	r3, r7
 800aa88:	d3e1      	bcc.n	800aa4e <__gethex+0x1fc>
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	9a01      	ldr	r2, [sp, #4]
 800aa8e:	9903      	ldr	r1, [sp, #12]
 800aa90:	9309      	str	r3, [sp, #36]	; 0x24
 800aa92:	f001 f88c 	bl	800bbae <strncmp>
 800aa96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d1d8      	bne.n	800aa4e <__gethex+0x1fc>
 800aa9c:	461e      	mov	r6, r3
 800aa9e:	e791      	b.n	800a9c4 <__gethex+0x172>
 800aaa0:	1eb9      	subs	r1, r7, #2
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	f000 fe06 	bl	800b6b4 <__any_on>
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	d0b2      	beq.n	800aa12 <__gethex+0x1c0>
 800aaac:	f04f 0a03 	mov.w	sl, #3
 800aab0:	e7b1      	b.n	800aa16 <__gethex+0x1c4>
 800aab2:	da09      	bge.n	800aac8 <__gethex+0x276>
 800aab4:	1bf7      	subs	r7, r6, r7
 800aab6:	4629      	mov	r1, r5
 800aab8:	463a      	mov	r2, r7
 800aaba:	9802      	ldr	r0, [sp, #8]
 800aabc:	f000 fc1c 	bl	800b2f8 <__lshift>
 800aac0:	1be4      	subs	r4, r4, r7
 800aac2:	4605      	mov	r5, r0
 800aac4:	f100 0914 	add.w	r9, r0, #20
 800aac8:	f04f 0a00 	mov.w	sl, #0
 800aacc:	e7a8      	b.n	800aa20 <__gethex+0x1ce>
 800aace:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aad2:	42a0      	cmp	r0, r4
 800aad4:	dd6a      	ble.n	800abac <__gethex+0x35a>
 800aad6:	1b04      	subs	r4, r0, r4
 800aad8:	42a6      	cmp	r6, r4
 800aada:	dc2e      	bgt.n	800ab3a <__gethex+0x2e8>
 800aadc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aae0:	2b02      	cmp	r3, #2
 800aae2:	d022      	beq.n	800ab2a <__gethex+0x2d8>
 800aae4:	2b03      	cmp	r3, #3
 800aae6:	d024      	beq.n	800ab32 <__gethex+0x2e0>
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d115      	bne.n	800ab18 <__gethex+0x2c6>
 800aaec:	42a6      	cmp	r6, r4
 800aaee:	d113      	bne.n	800ab18 <__gethex+0x2c6>
 800aaf0:	2e01      	cmp	r6, #1
 800aaf2:	dc0b      	bgt.n	800ab0c <__gethex+0x2ba>
 800aaf4:	9a06      	ldr	r2, [sp, #24]
 800aaf6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aafa:	6013      	str	r3, [r2, #0]
 800aafc:	2301      	movs	r3, #1
 800aafe:	612b      	str	r3, [r5, #16]
 800ab00:	f8c9 3000 	str.w	r3, [r9]
 800ab04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab06:	2762      	movs	r7, #98	; 0x62
 800ab08:	601d      	str	r5, [r3, #0]
 800ab0a:	e72a      	b.n	800a962 <__gethex+0x110>
 800ab0c:	1e71      	subs	r1, r6, #1
 800ab0e:	4628      	mov	r0, r5
 800ab10:	f000 fdd0 	bl	800b6b4 <__any_on>
 800ab14:	2800      	cmp	r0, #0
 800ab16:	d1ed      	bne.n	800aaf4 <__gethex+0x2a2>
 800ab18:	4629      	mov	r1, r5
 800ab1a:	9802      	ldr	r0, [sp, #8]
 800ab1c:	f000 fa20 	bl	800af60 <_Bfree>
 800ab20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab22:	2300      	movs	r3, #0
 800ab24:	6013      	str	r3, [r2, #0]
 800ab26:	2750      	movs	r7, #80	; 0x50
 800ab28:	e71b      	b.n	800a962 <__gethex+0x110>
 800ab2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d0e1      	beq.n	800aaf4 <__gethex+0x2a2>
 800ab30:	e7f2      	b.n	800ab18 <__gethex+0x2c6>
 800ab32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1dd      	bne.n	800aaf4 <__gethex+0x2a2>
 800ab38:	e7ee      	b.n	800ab18 <__gethex+0x2c6>
 800ab3a:	1e67      	subs	r7, r4, #1
 800ab3c:	f1ba 0f00 	cmp.w	sl, #0
 800ab40:	d131      	bne.n	800aba6 <__gethex+0x354>
 800ab42:	b127      	cbz	r7, 800ab4e <__gethex+0x2fc>
 800ab44:	4639      	mov	r1, r7
 800ab46:	4628      	mov	r0, r5
 800ab48:	f000 fdb4 	bl	800b6b4 <__any_on>
 800ab4c:	4682      	mov	sl, r0
 800ab4e:	117a      	asrs	r2, r7, #5
 800ab50:	2301      	movs	r3, #1
 800ab52:	f007 071f 	and.w	r7, r7, #31
 800ab56:	fa03 f707 	lsl.w	r7, r3, r7
 800ab5a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800ab5e:	4621      	mov	r1, r4
 800ab60:	421f      	tst	r7, r3
 800ab62:	4628      	mov	r0, r5
 800ab64:	bf18      	it	ne
 800ab66:	f04a 0a02 	orrne.w	sl, sl, #2
 800ab6a:	1b36      	subs	r6, r6, r4
 800ab6c:	f7ff fe22 	bl	800a7b4 <rshift>
 800ab70:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ab74:	2702      	movs	r7, #2
 800ab76:	f1ba 0f00 	cmp.w	sl, #0
 800ab7a:	d048      	beq.n	800ac0e <__gethex+0x3bc>
 800ab7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d015      	beq.n	800abb0 <__gethex+0x35e>
 800ab84:	2b03      	cmp	r3, #3
 800ab86:	d017      	beq.n	800abb8 <__gethex+0x366>
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d109      	bne.n	800aba0 <__gethex+0x34e>
 800ab8c:	f01a 0f02 	tst.w	sl, #2
 800ab90:	d006      	beq.n	800aba0 <__gethex+0x34e>
 800ab92:	f8d9 3000 	ldr.w	r3, [r9]
 800ab96:	ea4a 0a03 	orr.w	sl, sl, r3
 800ab9a:	f01a 0f01 	tst.w	sl, #1
 800ab9e:	d10e      	bne.n	800abbe <__gethex+0x36c>
 800aba0:	f047 0710 	orr.w	r7, r7, #16
 800aba4:	e033      	b.n	800ac0e <__gethex+0x3bc>
 800aba6:	f04f 0a01 	mov.w	sl, #1
 800abaa:	e7d0      	b.n	800ab4e <__gethex+0x2fc>
 800abac:	2701      	movs	r7, #1
 800abae:	e7e2      	b.n	800ab76 <__gethex+0x324>
 800abb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abb2:	f1c3 0301 	rsb	r3, r3, #1
 800abb6:	9315      	str	r3, [sp, #84]	; 0x54
 800abb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d0f0      	beq.n	800aba0 <__gethex+0x34e>
 800abbe:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800abc2:	f105 0314 	add.w	r3, r5, #20
 800abc6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800abca:	eb03 010a 	add.w	r1, r3, sl
 800abce:	f04f 0c00 	mov.w	ip, #0
 800abd2:	4618      	mov	r0, r3
 800abd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800abd8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800abdc:	d01c      	beq.n	800ac18 <__gethex+0x3c6>
 800abde:	3201      	adds	r2, #1
 800abe0:	6002      	str	r2, [r0, #0]
 800abe2:	2f02      	cmp	r7, #2
 800abe4:	f105 0314 	add.w	r3, r5, #20
 800abe8:	d138      	bne.n	800ac5c <__gethex+0x40a>
 800abea:	f8d8 2000 	ldr.w	r2, [r8]
 800abee:	3a01      	subs	r2, #1
 800abf0:	42b2      	cmp	r2, r6
 800abf2:	d10a      	bne.n	800ac0a <__gethex+0x3b8>
 800abf4:	1171      	asrs	r1, r6, #5
 800abf6:	2201      	movs	r2, #1
 800abf8:	f006 061f 	and.w	r6, r6, #31
 800abfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac00:	fa02 f606 	lsl.w	r6, r2, r6
 800ac04:	421e      	tst	r6, r3
 800ac06:	bf18      	it	ne
 800ac08:	4617      	movne	r7, r2
 800ac0a:	f047 0720 	orr.w	r7, r7, #32
 800ac0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac10:	601d      	str	r5, [r3, #0]
 800ac12:	9b06      	ldr	r3, [sp, #24]
 800ac14:	601c      	str	r4, [r3, #0]
 800ac16:	e6a4      	b.n	800a962 <__gethex+0x110>
 800ac18:	4299      	cmp	r1, r3
 800ac1a:	f843 cc04 	str.w	ip, [r3, #-4]
 800ac1e:	d8d8      	bhi.n	800abd2 <__gethex+0x380>
 800ac20:	68ab      	ldr	r3, [r5, #8]
 800ac22:	4599      	cmp	r9, r3
 800ac24:	db12      	blt.n	800ac4c <__gethex+0x3fa>
 800ac26:	6869      	ldr	r1, [r5, #4]
 800ac28:	9802      	ldr	r0, [sp, #8]
 800ac2a:	3101      	adds	r1, #1
 800ac2c:	f000 f964 	bl	800aef8 <_Balloc>
 800ac30:	692a      	ldr	r2, [r5, #16]
 800ac32:	3202      	adds	r2, #2
 800ac34:	f105 010c 	add.w	r1, r5, #12
 800ac38:	4683      	mov	fp, r0
 800ac3a:	0092      	lsls	r2, r2, #2
 800ac3c:	300c      	adds	r0, #12
 800ac3e:	f7fc ff8b 	bl	8007b58 <memcpy>
 800ac42:	4629      	mov	r1, r5
 800ac44:	9802      	ldr	r0, [sp, #8]
 800ac46:	f000 f98b 	bl	800af60 <_Bfree>
 800ac4a:	465d      	mov	r5, fp
 800ac4c:	692b      	ldr	r3, [r5, #16]
 800ac4e:	1c5a      	adds	r2, r3, #1
 800ac50:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ac54:	612a      	str	r2, [r5, #16]
 800ac56:	2201      	movs	r2, #1
 800ac58:	615a      	str	r2, [r3, #20]
 800ac5a:	e7c2      	b.n	800abe2 <__gethex+0x390>
 800ac5c:	692a      	ldr	r2, [r5, #16]
 800ac5e:	454a      	cmp	r2, r9
 800ac60:	dd0b      	ble.n	800ac7a <__gethex+0x428>
 800ac62:	2101      	movs	r1, #1
 800ac64:	4628      	mov	r0, r5
 800ac66:	f7ff fda5 	bl	800a7b4 <rshift>
 800ac6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac6e:	3401      	adds	r4, #1
 800ac70:	42a3      	cmp	r3, r4
 800ac72:	f6ff aed9 	blt.w	800aa28 <__gethex+0x1d6>
 800ac76:	2701      	movs	r7, #1
 800ac78:	e7c7      	b.n	800ac0a <__gethex+0x3b8>
 800ac7a:	f016 061f 	ands.w	r6, r6, #31
 800ac7e:	d0fa      	beq.n	800ac76 <__gethex+0x424>
 800ac80:	449a      	add	sl, r3
 800ac82:	f1c6 0620 	rsb	r6, r6, #32
 800ac86:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ac8a:	f000 f9f9 	bl	800b080 <__hi0bits>
 800ac8e:	42b0      	cmp	r0, r6
 800ac90:	dbe7      	blt.n	800ac62 <__gethex+0x410>
 800ac92:	e7f0      	b.n	800ac76 <__gethex+0x424>

0800ac94 <L_shift>:
 800ac94:	f1c2 0208 	rsb	r2, r2, #8
 800ac98:	0092      	lsls	r2, r2, #2
 800ac9a:	b570      	push	{r4, r5, r6, lr}
 800ac9c:	f1c2 0620 	rsb	r6, r2, #32
 800aca0:	6843      	ldr	r3, [r0, #4]
 800aca2:	6804      	ldr	r4, [r0, #0]
 800aca4:	fa03 f506 	lsl.w	r5, r3, r6
 800aca8:	432c      	orrs	r4, r5
 800acaa:	40d3      	lsrs	r3, r2
 800acac:	6004      	str	r4, [r0, #0]
 800acae:	f840 3f04 	str.w	r3, [r0, #4]!
 800acb2:	4288      	cmp	r0, r1
 800acb4:	d3f4      	bcc.n	800aca0 <L_shift+0xc>
 800acb6:	bd70      	pop	{r4, r5, r6, pc}

0800acb8 <__match>:
 800acb8:	b530      	push	{r4, r5, lr}
 800acba:	6803      	ldr	r3, [r0, #0]
 800acbc:	3301      	adds	r3, #1
 800acbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acc2:	b914      	cbnz	r4, 800acca <__match+0x12>
 800acc4:	6003      	str	r3, [r0, #0]
 800acc6:	2001      	movs	r0, #1
 800acc8:	bd30      	pop	{r4, r5, pc}
 800acca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800acd2:	2d19      	cmp	r5, #25
 800acd4:	bf98      	it	ls
 800acd6:	3220      	addls	r2, #32
 800acd8:	42a2      	cmp	r2, r4
 800acda:	d0f0      	beq.n	800acbe <__match+0x6>
 800acdc:	2000      	movs	r0, #0
 800acde:	e7f3      	b.n	800acc8 <__match+0x10>

0800ace0 <__hexnan>:
 800ace0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace4:	680b      	ldr	r3, [r1, #0]
 800ace6:	6801      	ldr	r1, [r0, #0]
 800ace8:	115f      	asrs	r7, r3, #5
 800acea:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800acee:	f013 031f 	ands.w	r3, r3, #31
 800acf2:	b087      	sub	sp, #28
 800acf4:	bf18      	it	ne
 800acf6:	3704      	addne	r7, #4
 800acf8:	2500      	movs	r5, #0
 800acfa:	1f3e      	subs	r6, r7, #4
 800acfc:	4682      	mov	sl, r0
 800acfe:	4690      	mov	r8, r2
 800ad00:	9301      	str	r3, [sp, #4]
 800ad02:	f847 5c04 	str.w	r5, [r7, #-4]
 800ad06:	46b1      	mov	r9, r6
 800ad08:	4634      	mov	r4, r6
 800ad0a:	9502      	str	r5, [sp, #8]
 800ad0c:	46ab      	mov	fp, r5
 800ad0e:	784a      	ldrb	r2, [r1, #1]
 800ad10:	1c4b      	adds	r3, r1, #1
 800ad12:	9303      	str	r3, [sp, #12]
 800ad14:	b342      	cbz	r2, 800ad68 <__hexnan+0x88>
 800ad16:	4610      	mov	r0, r2
 800ad18:	9105      	str	r1, [sp, #20]
 800ad1a:	9204      	str	r2, [sp, #16]
 800ad1c:	f7ff fd84 	bl	800a828 <__hexdig_fun>
 800ad20:	2800      	cmp	r0, #0
 800ad22:	d143      	bne.n	800adac <__hexnan+0xcc>
 800ad24:	9a04      	ldr	r2, [sp, #16]
 800ad26:	9905      	ldr	r1, [sp, #20]
 800ad28:	2a20      	cmp	r2, #32
 800ad2a:	d818      	bhi.n	800ad5e <__hexnan+0x7e>
 800ad2c:	9b02      	ldr	r3, [sp, #8]
 800ad2e:	459b      	cmp	fp, r3
 800ad30:	dd13      	ble.n	800ad5a <__hexnan+0x7a>
 800ad32:	454c      	cmp	r4, r9
 800ad34:	d206      	bcs.n	800ad44 <__hexnan+0x64>
 800ad36:	2d07      	cmp	r5, #7
 800ad38:	dc04      	bgt.n	800ad44 <__hexnan+0x64>
 800ad3a:	462a      	mov	r2, r5
 800ad3c:	4649      	mov	r1, r9
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f7ff ffa8 	bl	800ac94 <L_shift>
 800ad44:	4544      	cmp	r4, r8
 800ad46:	d944      	bls.n	800add2 <__hexnan+0xf2>
 800ad48:	2300      	movs	r3, #0
 800ad4a:	f1a4 0904 	sub.w	r9, r4, #4
 800ad4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad52:	f8cd b008 	str.w	fp, [sp, #8]
 800ad56:	464c      	mov	r4, r9
 800ad58:	461d      	mov	r5, r3
 800ad5a:	9903      	ldr	r1, [sp, #12]
 800ad5c:	e7d7      	b.n	800ad0e <__hexnan+0x2e>
 800ad5e:	2a29      	cmp	r2, #41	; 0x29
 800ad60:	d14a      	bne.n	800adf8 <__hexnan+0x118>
 800ad62:	3102      	adds	r1, #2
 800ad64:	f8ca 1000 	str.w	r1, [sl]
 800ad68:	f1bb 0f00 	cmp.w	fp, #0
 800ad6c:	d044      	beq.n	800adf8 <__hexnan+0x118>
 800ad6e:	454c      	cmp	r4, r9
 800ad70:	d206      	bcs.n	800ad80 <__hexnan+0xa0>
 800ad72:	2d07      	cmp	r5, #7
 800ad74:	dc04      	bgt.n	800ad80 <__hexnan+0xa0>
 800ad76:	462a      	mov	r2, r5
 800ad78:	4649      	mov	r1, r9
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f7ff ff8a 	bl	800ac94 <L_shift>
 800ad80:	4544      	cmp	r4, r8
 800ad82:	d928      	bls.n	800add6 <__hexnan+0xf6>
 800ad84:	4643      	mov	r3, r8
 800ad86:	f854 2b04 	ldr.w	r2, [r4], #4
 800ad8a:	f843 2b04 	str.w	r2, [r3], #4
 800ad8e:	42a6      	cmp	r6, r4
 800ad90:	d2f9      	bcs.n	800ad86 <__hexnan+0xa6>
 800ad92:	2200      	movs	r2, #0
 800ad94:	f843 2b04 	str.w	r2, [r3], #4
 800ad98:	429e      	cmp	r6, r3
 800ad9a:	d2fb      	bcs.n	800ad94 <__hexnan+0xb4>
 800ad9c:	6833      	ldr	r3, [r6, #0]
 800ad9e:	b91b      	cbnz	r3, 800ada8 <__hexnan+0xc8>
 800ada0:	4546      	cmp	r6, r8
 800ada2:	d127      	bne.n	800adf4 <__hexnan+0x114>
 800ada4:	2301      	movs	r3, #1
 800ada6:	6033      	str	r3, [r6, #0]
 800ada8:	2005      	movs	r0, #5
 800adaa:	e026      	b.n	800adfa <__hexnan+0x11a>
 800adac:	3501      	adds	r5, #1
 800adae:	2d08      	cmp	r5, #8
 800adb0:	f10b 0b01 	add.w	fp, fp, #1
 800adb4:	dd06      	ble.n	800adc4 <__hexnan+0xe4>
 800adb6:	4544      	cmp	r4, r8
 800adb8:	d9cf      	bls.n	800ad5a <__hexnan+0x7a>
 800adba:	2300      	movs	r3, #0
 800adbc:	f844 3c04 	str.w	r3, [r4, #-4]
 800adc0:	2501      	movs	r5, #1
 800adc2:	3c04      	subs	r4, #4
 800adc4:	6822      	ldr	r2, [r4, #0]
 800adc6:	f000 000f 	and.w	r0, r0, #15
 800adca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800adce:	6020      	str	r0, [r4, #0]
 800add0:	e7c3      	b.n	800ad5a <__hexnan+0x7a>
 800add2:	2508      	movs	r5, #8
 800add4:	e7c1      	b.n	800ad5a <__hexnan+0x7a>
 800add6:	9b01      	ldr	r3, [sp, #4]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d0df      	beq.n	800ad9c <__hexnan+0xbc>
 800addc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ade0:	f1c3 0320 	rsb	r3, r3, #32
 800ade4:	fa22 f303 	lsr.w	r3, r2, r3
 800ade8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800adec:	401a      	ands	r2, r3
 800adee:	f847 2c04 	str.w	r2, [r7, #-4]
 800adf2:	e7d3      	b.n	800ad9c <__hexnan+0xbc>
 800adf4:	3e04      	subs	r6, #4
 800adf6:	e7d1      	b.n	800ad9c <__hexnan+0xbc>
 800adf8:	2004      	movs	r0, #4
 800adfa:	b007      	add	sp, #28
 800adfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae00 <__localeconv_l>:
 800ae00:	30f0      	adds	r0, #240	; 0xf0
 800ae02:	4770      	bx	lr

0800ae04 <_localeconv_r>:
 800ae04:	4b04      	ldr	r3, [pc, #16]	; (800ae18 <_localeconv_r+0x14>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	6a18      	ldr	r0, [r3, #32]
 800ae0a:	4b04      	ldr	r3, [pc, #16]	; (800ae1c <_localeconv_r+0x18>)
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	bf08      	it	eq
 800ae10:	4618      	moveq	r0, r3
 800ae12:	30f0      	adds	r0, #240	; 0xf0
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	20000044 	.word	0x20000044
 800ae1c:	200000a8 	.word	0x200000a8

0800ae20 <__swhatbuf_r>:
 800ae20:	b570      	push	{r4, r5, r6, lr}
 800ae22:	460e      	mov	r6, r1
 800ae24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae28:	2900      	cmp	r1, #0
 800ae2a:	b096      	sub	sp, #88	; 0x58
 800ae2c:	4614      	mov	r4, r2
 800ae2e:	461d      	mov	r5, r3
 800ae30:	da07      	bge.n	800ae42 <__swhatbuf_r+0x22>
 800ae32:	2300      	movs	r3, #0
 800ae34:	602b      	str	r3, [r5, #0]
 800ae36:	89b3      	ldrh	r3, [r6, #12]
 800ae38:	061a      	lsls	r2, r3, #24
 800ae3a:	d410      	bmi.n	800ae5e <__swhatbuf_r+0x3e>
 800ae3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae40:	e00e      	b.n	800ae60 <__swhatbuf_r+0x40>
 800ae42:	466a      	mov	r2, sp
 800ae44:	f000 fee8 	bl	800bc18 <_fstat_r>
 800ae48:	2800      	cmp	r0, #0
 800ae4a:	dbf2      	blt.n	800ae32 <__swhatbuf_r+0x12>
 800ae4c:	9a01      	ldr	r2, [sp, #4]
 800ae4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae56:	425a      	negs	r2, r3
 800ae58:	415a      	adcs	r2, r3
 800ae5a:	602a      	str	r2, [r5, #0]
 800ae5c:	e7ee      	b.n	800ae3c <__swhatbuf_r+0x1c>
 800ae5e:	2340      	movs	r3, #64	; 0x40
 800ae60:	2000      	movs	r0, #0
 800ae62:	6023      	str	r3, [r4, #0]
 800ae64:	b016      	add	sp, #88	; 0x58
 800ae66:	bd70      	pop	{r4, r5, r6, pc}

0800ae68 <__smakebuf_r>:
 800ae68:	898b      	ldrh	r3, [r1, #12]
 800ae6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae6c:	079d      	lsls	r5, r3, #30
 800ae6e:	4606      	mov	r6, r0
 800ae70:	460c      	mov	r4, r1
 800ae72:	d507      	bpl.n	800ae84 <__smakebuf_r+0x1c>
 800ae74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae78:	6023      	str	r3, [r4, #0]
 800ae7a:	6123      	str	r3, [r4, #16]
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	6163      	str	r3, [r4, #20]
 800ae80:	b002      	add	sp, #8
 800ae82:	bd70      	pop	{r4, r5, r6, pc}
 800ae84:	ab01      	add	r3, sp, #4
 800ae86:	466a      	mov	r2, sp
 800ae88:	f7ff ffca 	bl	800ae20 <__swhatbuf_r>
 800ae8c:	9900      	ldr	r1, [sp, #0]
 800ae8e:	4605      	mov	r5, r0
 800ae90:	4630      	mov	r0, r6
 800ae92:	f000 fc8d 	bl	800b7b0 <_malloc_r>
 800ae96:	b948      	cbnz	r0, 800aeac <__smakebuf_r+0x44>
 800ae98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae9c:	059a      	lsls	r2, r3, #22
 800ae9e:	d4ef      	bmi.n	800ae80 <__smakebuf_r+0x18>
 800aea0:	f023 0303 	bic.w	r3, r3, #3
 800aea4:	f043 0302 	orr.w	r3, r3, #2
 800aea8:	81a3      	strh	r3, [r4, #12]
 800aeaa:	e7e3      	b.n	800ae74 <__smakebuf_r+0xc>
 800aeac:	4b0d      	ldr	r3, [pc, #52]	; (800aee4 <__smakebuf_r+0x7c>)
 800aeae:	62b3      	str	r3, [r6, #40]	; 0x28
 800aeb0:	89a3      	ldrh	r3, [r4, #12]
 800aeb2:	6020      	str	r0, [r4, #0]
 800aeb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeb8:	81a3      	strh	r3, [r4, #12]
 800aeba:	9b00      	ldr	r3, [sp, #0]
 800aebc:	6163      	str	r3, [r4, #20]
 800aebe:	9b01      	ldr	r3, [sp, #4]
 800aec0:	6120      	str	r0, [r4, #16]
 800aec2:	b15b      	cbz	r3, 800aedc <__smakebuf_r+0x74>
 800aec4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aec8:	4630      	mov	r0, r6
 800aeca:	f000 feb7 	bl	800bc3c <_isatty_r>
 800aece:	b128      	cbz	r0, 800aedc <__smakebuf_r+0x74>
 800aed0:	89a3      	ldrh	r3, [r4, #12]
 800aed2:	f023 0303 	bic.w	r3, r3, #3
 800aed6:	f043 0301 	orr.w	r3, r3, #1
 800aeda:	81a3      	strh	r3, [r4, #12]
 800aedc:	89a3      	ldrh	r3, [r4, #12]
 800aede:	431d      	orrs	r5, r3
 800aee0:	81a5      	strh	r5, [r4, #12]
 800aee2:	e7cd      	b.n	800ae80 <__smakebuf_r+0x18>
 800aee4:	0800a669 	.word	0x0800a669

0800aee8 <malloc>:
 800aee8:	4b02      	ldr	r3, [pc, #8]	; (800aef4 <malloc+0xc>)
 800aeea:	4601      	mov	r1, r0
 800aeec:	6818      	ldr	r0, [r3, #0]
 800aeee:	f000 bc5f 	b.w	800b7b0 <_malloc_r>
 800aef2:	bf00      	nop
 800aef4:	20000044 	.word	0x20000044

0800aef8 <_Balloc>:
 800aef8:	b570      	push	{r4, r5, r6, lr}
 800aefa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aefc:	4604      	mov	r4, r0
 800aefe:	460e      	mov	r6, r1
 800af00:	b93d      	cbnz	r5, 800af12 <_Balloc+0x1a>
 800af02:	2010      	movs	r0, #16
 800af04:	f7ff fff0 	bl	800aee8 <malloc>
 800af08:	6260      	str	r0, [r4, #36]	; 0x24
 800af0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af0e:	6005      	str	r5, [r0, #0]
 800af10:	60c5      	str	r5, [r0, #12]
 800af12:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800af14:	68eb      	ldr	r3, [r5, #12]
 800af16:	b183      	cbz	r3, 800af3a <_Balloc+0x42>
 800af18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800af20:	b9b8      	cbnz	r0, 800af52 <_Balloc+0x5a>
 800af22:	2101      	movs	r1, #1
 800af24:	fa01 f506 	lsl.w	r5, r1, r6
 800af28:	1d6a      	adds	r2, r5, #5
 800af2a:	0092      	lsls	r2, r2, #2
 800af2c:	4620      	mov	r0, r4
 800af2e:	f000 fbe2 	bl	800b6f6 <_calloc_r>
 800af32:	b160      	cbz	r0, 800af4e <_Balloc+0x56>
 800af34:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800af38:	e00e      	b.n	800af58 <_Balloc+0x60>
 800af3a:	2221      	movs	r2, #33	; 0x21
 800af3c:	2104      	movs	r1, #4
 800af3e:	4620      	mov	r0, r4
 800af40:	f000 fbd9 	bl	800b6f6 <_calloc_r>
 800af44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af46:	60e8      	str	r0, [r5, #12]
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1e4      	bne.n	800af18 <_Balloc+0x20>
 800af4e:	2000      	movs	r0, #0
 800af50:	bd70      	pop	{r4, r5, r6, pc}
 800af52:	6802      	ldr	r2, [r0, #0]
 800af54:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800af58:	2300      	movs	r3, #0
 800af5a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af5e:	e7f7      	b.n	800af50 <_Balloc+0x58>

0800af60 <_Bfree>:
 800af60:	b570      	push	{r4, r5, r6, lr}
 800af62:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800af64:	4606      	mov	r6, r0
 800af66:	460d      	mov	r5, r1
 800af68:	b93c      	cbnz	r4, 800af7a <_Bfree+0x1a>
 800af6a:	2010      	movs	r0, #16
 800af6c:	f7ff ffbc 	bl	800aee8 <malloc>
 800af70:	6270      	str	r0, [r6, #36]	; 0x24
 800af72:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af76:	6004      	str	r4, [r0, #0]
 800af78:	60c4      	str	r4, [r0, #12]
 800af7a:	b13d      	cbz	r5, 800af8c <_Bfree+0x2c>
 800af7c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800af7e:	686a      	ldr	r2, [r5, #4]
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af86:	6029      	str	r1, [r5, #0]
 800af88:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800af8c:	bd70      	pop	{r4, r5, r6, pc}

0800af8e <__multadd>:
 800af8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af92:	690d      	ldr	r5, [r1, #16]
 800af94:	461f      	mov	r7, r3
 800af96:	4606      	mov	r6, r0
 800af98:	460c      	mov	r4, r1
 800af9a:	f101 0c14 	add.w	ip, r1, #20
 800af9e:	2300      	movs	r3, #0
 800afa0:	f8dc 0000 	ldr.w	r0, [ip]
 800afa4:	b281      	uxth	r1, r0
 800afa6:	fb02 7101 	mla	r1, r2, r1, r7
 800afaa:	0c0f      	lsrs	r7, r1, #16
 800afac:	0c00      	lsrs	r0, r0, #16
 800afae:	fb02 7000 	mla	r0, r2, r0, r7
 800afb2:	b289      	uxth	r1, r1
 800afb4:	3301      	adds	r3, #1
 800afb6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800afba:	429d      	cmp	r5, r3
 800afbc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800afc0:	f84c 1b04 	str.w	r1, [ip], #4
 800afc4:	dcec      	bgt.n	800afa0 <__multadd+0x12>
 800afc6:	b1d7      	cbz	r7, 800affe <__multadd+0x70>
 800afc8:	68a3      	ldr	r3, [r4, #8]
 800afca:	42ab      	cmp	r3, r5
 800afcc:	dc12      	bgt.n	800aff4 <__multadd+0x66>
 800afce:	6861      	ldr	r1, [r4, #4]
 800afd0:	4630      	mov	r0, r6
 800afd2:	3101      	adds	r1, #1
 800afd4:	f7ff ff90 	bl	800aef8 <_Balloc>
 800afd8:	6922      	ldr	r2, [r4, #16]
 800afda:	3202      	adds	r2, #2
 800afdc:	f104 010c 	add.w	r1, r4, #12
 800afe0:	4680      	mov	r8, r0
 800afe2:	0092      	lsls	r2, r2, #2
 800afe4:	300c      	adds	r0, #12
 800afe6:	f7fc fdb7 	bl	8007b58 <memcpy>
 800afea:	4621      	mov	r1, r4
 800afec:	4630      	mov	r0, r6
 800afee:	f7ff ffb7 	bl	800af60 <_Bfree>
 800aff2:	4644      	mov	r4, r8
 800aff4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aff8:	3501      	adds	r5, #1
 800affa:	615f      	str	r7, [r3, #20]
 800affc:	6125      	str	r5, [r4, #16]
 800affe:	4620      	mov	r0, r4
 800b000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b004 <__s2b>:
 800b004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b008:	460c      	mov	r4, r1
 800b00a:	4615      	mov	r5, r2
 800b00c:	461f      	mov	r7, r3
 800b00e:	2209      	movs	r2, #9
 800b010:	3308      	adds	r3, #8
 800b012:	4606      	mov	r6, r0
 800b014:	fb93 f3f2 	sdiv	r3, r3, r2
 800b018:	2100      	movs	r1, #0
 800b01a:	2201      	movs	r2, #1
 800b01c:	429a      	cmp	r2, r3
 800b01e:	db20      	blt.n	800b062 <__s2b+0x5e>
 800b020:	4630      	mov	r0, r6
 800b022:	f7ff ff69 	bl	800aef8 <_Balloc>
 800b026:	9b08      	ldr	r3, [sp, #32]
 800b028:	6143      	str	r3, [r0, #20]
 800b02a:	2d09      	cmp	r5, #9
 800b02c:	f04f 0301 	mov.w	r3, #1
 800b030:	6103      	str	r3, [r0, #16]
 800b032:	dd19      	ble.n	800b068 <__s2b+0x64>
 800b034:	f104 0809 	add.w	r8, r4, #9
 800b038:	46c1      	mov	r9, r8
 800b03a:	442c      	add	r4, r5
 800b03c:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b040:	4601      	mov	r1, r0
 800b042:	3b30      	subs	r3, #48	; 0x30
 800b044:	220a      	movs	r2, #10
 800b046:	4630      	mov	r0, r6
 800b048:	f7ff ffa1 	bl	800af8e <__multadd>
 800b04c:	45a1      	cmp	r9, r4
 800b04e:	d1f5      	bne.n	800b03c <__s2b+0x38>
 800b050:	eb08 0405 	add.w	r4, r8, r5
 800b054:	3c08      	subs	r4, #8
 800b056:	1b2d      	subs	r5, r5, r4
 800b058:	1963      	adds	r3, r4, r5
 800b05a:	42bb      	cmp	r3, r7
 800b05c:	db07      	blt.n	800b06e <__s2b+0x6a>
 800b05e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b062:	0052      	lsls	r2, r2, #1
 800b064:	3101      	adds	r1, #1
 800b066:	e7d9      	b.n	800b01c <__s2b+0x18>
 800b068:	340a      	adds	r4, #10
 800b06a:	2509      	movs	r5, #9
 800b06c:	e7f3      	b.n	800b056 <__s2b+0x52>
 800b06e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b072:	4601      	mov	r1, r0
 800b074:	3b30      	subs	r3, #48	; 0x30
 800b076:	220a      	movs	r2, #10
 800b078:	4630      	mov	r0, r6
 800b07a:	f7ff ff88 	bl	800af8e <__multadd>
 800b07e:	e7eb      	b.n	800b058 <__s2b+0x54>

0800b080 <__hi0bits>:
 800b080:	0c02      	lsrs	r2, r0, #16
 800b082:	0412      	lsls	r2, r2, #16
 800b084:	4603      	mov	r3, r0
 800b086:	b9b2      	cbnz	r2, 800b0b6 <__hi0bits+0x36>
 800b088:	0403      	lsls	r3, r0, #16
 800b08a:	2010      	movs	r0, #16
 800b08c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b090:	bf04      	itt	eq
 800b092:	021b      	lsleq	r3, r3, #8
 800b094:	3008      	addeq	r0, #8
 800b096:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b09a:	bf04      	itt	eq
 800b09c:	011b      	lsleq	r3, r3, #4
 800b09e:	3004      	addeq	r0, #4
 800b0a0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b0a4:	bf04      	itt	eq
 800b0a6:	009b      	lsleq	r3, r3, #2
 800b0a8:	3002      	addeq	r0, #2
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	db06      	blt.n	800b0bc <__hi0bits+0x3c>
 800b0ae:	005b      	lsls	r3, r3, #1
 800b0b0:	d503      	bpl.n	800b0ba <__hi0bits+0x3a>
 800b0b2:	3001      	adds	r0, #1
 800b0b4:	4770      	bx	lr
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	e7e8      	b.n	800b08c <__hi0bits+0xc>
 800b0ba:	2020      	movs	r0, #32
 800b0bc:	4770      	bx	lr

0800b0be <__lo0bits>:
 800b0be:	6803      	ldr	r3, [r0, #0]
 800b0c0:	f013 0207 	ands.w	r2, r3, #7
 800b0c4:	4601      	mov	r1, r0
 800b0c6:	d00b      	beq.n	800b0e0 <__lo0bits+0x22>
 800b0c8:	07da      	lsls	r2, r3, #31
 800b0ca:	d423      	bmi.n	800b114 <__lo0bits+0x56>
 800b0cc:	0798      	lsls	r0, r3, #30
 800b0ce:	bf49      	itett	mi
 800b0d0:	085b      	lsrmi	r3, r3, #1
 800b0d2:	089b      	lsrpl	r3, r3, #2
 800b0d4:	2001      	movmi	r0, #1
 800b0d6:	600b      	strmi	r3, [r1, #0]
 800b0d8:	bf5c      	itt	pl
 800b0da:	600b      	strpl	r3, [r1, #0]
 800b0dc:	2002      	movpl	r0, #2
 800b0de:	4770      	bx	lr
 800b0e0:	b298      	uxth	r0, r3
 800b0e2:	b9a8      	cbnz	r0, 800b110 <__lo0bits+0x52>
 800b0e4:	0c1b      	lsrs	r3, r3, #16
 800b0e6:	2010      	movs	r0, #16
 800b0e8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b0ec:	bf04      	itt	eq
 800b0ee:	0a1b      	lsreq	r3, r3, #8
 800b0f0:	3008      	addeq	r0, #8
 800b0f2:	071a      	lsls	r2, r3, #28
 800b0f4:	bf04      	itt	eq
 800b0f6:	091b      	lsreq	r3, r3, #4
 800b0f8:	3004      	addeq	r0, #4
 800b0fa:	079a      	lsls	r2, r3, #30
 800b0fc:	bf04      	itt	eq
 800b0fe:	089b      	lsreq	r3, r3, #2
 800b100:	3002      	addeq	r0, #2
 800b102:	07da      	lsls	r2, r3, #31
 800b104:	d402      	bmi.n	800b10c <__lo0bits+0x4e>
 800b106:	085b      	lsrs	r3, r3, #1
 800b108:	d006      	beq.n	800b118 <__lo0bits+0x5a>
 800b10a:	3001      	adds	r0, #1
 800b10c:	600b      	str	r3, [r1, #0]
 800b10e:	4770      	bx	lr
 800b110:	4610      	mov	r0, r2
 800b112:	e7e9      	b.n	800b0e8 <__lo0bits+0x2a>
 800b114:	2000      	movs	r0, #0
 800b116:	4770      	bx	lr
 800b118:	2020      	movs	r0, #32
 800b11a:	4770      	bx	lr

0800b11c <__i2b>:
 800b11c:	b510      	push	{r4, lr}
 800b11e:	460c      	mov	r4, r1
 800b120:	2101      	movs	r1, #1
 800b122:	f7ff fee9 	bl	800aef8 <_Balloc>
 800b126:	2201      	movs	r2, #1
 800b128:	6144      	str	r4, [r0, #20]
 800b12a:	6102      	str	r2, [r0, #16]
 800b12c:	bd10      	pop	{r4, pc}

0800b12e <__multiply>:
 800b12e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b132:	4614      	mov	r4, r2
 800b134:	690a      	ldr	r2, [r1, #16]
 800b136:	6923      	ldr	r3, [r4, #16]
 800b138:	429a      	cmp	r2, r3
 800b13a:	bfb8      	it	lt
 800b13c:	460b      	movlt	r3, r1
 800b13e:	4688      	mov	r8, r1
 800b140:	bfbc      	itt	lt
 800b142:	46a0      	movlt	r8, r4
 800b144:	461c      	movlt	r4, r3
 800b146:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b14a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b14e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b152:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b156:	eb07 0609 	add.w	r6, r7, r9
 800b15a:	42b3      	cmp	r3, r6
 800b15c:	bfb8      	it	lt
 800b15e:	3101      	addlt	r1, #1
 800b160:	f7ff feca 	bl	800aef8 <_Balloc>
 800b164:	f100 0514 	add.w	r5, r0, #20
 800b168:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b16c:	462b      	mov	r3, r5
 800b16e:	2200      	movs	r2, #0
 800b170:	4573      	cmp	r3, lr
 800b172:	d316      	bcc.n	800b1a2 <__multiply+0x74>
 800b174:	f104 0214 	add.w	r2, r4, #20
 800b178:	f108 0114 	add.w	r1, r8, #20
 800b17c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b180:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b184:	9300      	str	r3, [sp, #0]
 800b186:	9b00      	ldr	r3, [sp, #0]
 800b188:	9201      	str	r2, [sp, #4]
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d80c      	bhi.n	800b1a8 <__multiply+0x7a>
 800b18e:	2e00      	cmp	r6, #0
 800b190:	dd03      	ble.n	800b19a <__multiply+0x6c>
 800b192:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b196:	2b00      	cmp	r3, #0
 800b198:	d05d      	beq.n	800b256 <__multiply+0x128>
 800b19a:	6106      	str	r6, [r0, #16]
 800b19c:	b003      	add	sp, #12
 800b19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a2:	f843 2b04 	str.w	r2, [r3], #4
 800b1a6:	e7e3      	b.n	800b170 <__multiply+0x42>
 800b1a8:	f8b2 b000 	ldrh.w	fp, [r2]
 800b1ac:	f1bb 0f00 	cmp.w	fp, #0
 800b1b0:	d023      	beq.n	800b1fa <__multiply+0xcc>
 800b1b2:	4689      	mov	r9, r1
 800b1b4:	46ac      	mov	ip, r5
 800b1b6:	f04f 0800 	mov.w	r8, #0
 800b1ba:	f859 4b04 	ldr.w	r4, [r9], #4
 800b1be:	f8dc a000 	ldr.w	sl, [ip]
 800b1c2:	b2a3      	uxth	r3, r4
 800b1c4:	fa1f fa8a 	uxth.w	sl, sl
 800b1c8:	fb0b a303 	mla	r3, fp, r3, sl
 800b1cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b1d0:	f8dc 4000 	ldr.w	r4, [ip]
 800b1d4:	4443      	add	r3, r8
 800b1d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b1da:	fb0b 840a 	mla	r4, fp, sl, r8
 800b1de:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b1e2:	46e2      	mov	sl, ip
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b1ea:	454f      	cmp	r7, r9
 800b1ec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b1f0:	f84a 3b04 	str.w	r3, [sl], #4
 800b1f4:	d82b      	bhi.n	800b24e <__multiply+0x120>
 800b1f6:	f8cc 8004 	str.w	r8, [ip, #4]
 800b1fa:	9b01      	ldr	r3, [sp, #4]
 800b1fc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b200:	3204      	adds	r2, #4
 800b202:	f1ba 0f00 	cmp.w	sl, #0
 800b206:	d020      	beq.n	800b24a <__multiply+0x11c>
 800b208:	682b      	ldr	r3, [r5, #0]
 800b20a:	4689      	mov	r9, r1
 800b20c:	46a8      	mov	r8, r5
 800b20e:	f04f 0b00 	mov.w	fp, #0
 800b212:	f8b9 c000 	ldrh.w	ip, [r9]
 800b216:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b21a:	fb0a 440c 	mla	r4, sl, ip, r4
 800b21e:	445c      	add	r4, fp
 800b220:	46c4      	mov	ip, r8
 800b222:	b29b      	uxth	r3, r3
 800b224:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b228:	f84c 3b04 	str.w	r3, [ip], #4
 800b22c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b230:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b234:	0c1b      	lsrs	r3, r3, #16
 800b236:	fb0a b303 	mla	r3, sl, r3, fp
 800b23a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b23e:	454f      	cmp	r7, r9
 800b240:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b244:	d805      	bhi.n	800b252 <__multiply+0x124>
 800b246:	f8c8 3004 	str.w	r3, [r8, #4]
 800b24a:	3504      	adds	r5, #4
 800b24c:	e79b      	b.n	800b186 <__multiply+0x58>
 800b24e:	46d4      	mov	ip, sl
 800b250:	e7b3      	b.n	800b1ba <__multiply+0x8c>
 800b252:	46e0      	mov	r8, ip
 800b254:	e7dd      	b.n	800b212 <__multiply+0xe4>
 800b256:	3e01      	subs	r6, #1
 800b258:	e799      	b.n	800b18e <__multiply+0x60>
	...

0800b25c <__pow5mult>:
 800b25c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b260:	4615      	mov	r5, r2
 800b262:	f012 0203 	ands.w	r2, r2, #3
 800b266:	4606      	mov	r6, r0
 800b268:	460f      	mov	r7, r1
 800b26a:	d007      	beq.n	800b27c <__pow5mult+0x20>
 800b26c:	3a01      	subs	r2, #1
 800b26e:	4c21      	ldr	r4, [pc, #132]	; (800b2f4 <__pow5mult+0x98>)
 800b270:	2300      	movs	r3, #0
 800b272:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b276:	f7ff fe8a 	bl	800af8e <__multadd>
 800b27a:	4607      	mov	r7, r0
 800b27c:	10ad      	asrs	r5, r5, #2
 800b27e:	d035      	beq.n	800b2ec <__pow5mult+0x90>
 800b280:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b282:	b93c      	cbnz	r4, 800b294 <__pow5mult+0x38>
 800b284:	2010      	movs	r0, #16
 800b286:	f7ff fe2f 	bl	800aee8 <malloc>
 800b28a:	6270      	str	r0, [r6, #36]	; 0x24
 800b28c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b290:	6004      	str	r4, [r0, #0]
 800b292:	60c4      	str	r4, [r0, #12]
 800b294:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b298:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b29c:	b94c      	cbnz	r4, 800b2b2 <__pow5mult+0x56>
 800b29e:	f240 2171 	movw	r1, #625	; 0x271
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	f7ff ff3a 	bl	800b11c <__i2b>
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	6003      	str	r3, [r0, #0]
 800b2b2:	f04f 0800 	mov.w	r8, #0
 800b2b6:	07eb      	lsls	r3, r5, #31
 800b2b8:	d50a      	bpl.n	800b2d0 <__pow5mult+0x74>
 800b2ba:	4639      	mov	r1, r7
 800b2bc:	4622      	mov	r2, r4
 800b2be:	4630      	mov	r0, r6
 800b2c0:	f7ff ff35 	bl	800b12e <__multiply>
 800b2c4:	4639      	mov	r1, r7
 800b2c6:	4681      	mov	r9, r0
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	f7ff fe49 	bl	800af60 <_Bfree>
 800b2ce:	464f      	mov	r7, r9
 800b2d0:	106d      	asrs	r5, r5, #1
 800b2d2:	d00b      	beq.n	800b2ec <__pow5mult+0x90>
 800b2d4:	6820      	ldr	r0, [r4, #0]
 800b2d6:	b938      	cbnz	r0, 800b2e8 <__pow5mult+0x8c>
 800b2d8:	4622      	mov	r2, r4
 800b2da:	4621      	mov	r1, r4
 800b2dc:	4630      	mov	r0, r6
 800b2de:	f7ff ff26 	bl	800b12e <__multiply>
 800b2e2:	6020      	str	r0, [r4, #0]
 800b2e4:	f8c0 8000 	str.w	r8, [r0]
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	e7e4      	b.n	800b2b6 <__pow5mult+0x5a>
 800b2ec:	4638      	mov	r0, r7
 800b2ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2f2:	bf00      	nop
 800b2f4:	0800c5b8 	.word	0x0800c5b8

0800b2f8 <__lshift>:
 800b2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2fc:	460c      	mov	r4, r1
 800b2fe:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b302:	6923      	ldr	r3, [r4, #16]
 800b304:	6849      	ldr	r1, [r1, #4]
 800b306:	eb0a 0903 	add.w	r9, sl, r3
 800b30a:	68a3      	ldr	r3, [r4, #8]
 800b30c:	4607      	mov	r7, r0
 800b30e:	4616      	mov	r6, r2
 800b310:	f109 0501 	add.w	r5, r9, #1
 800b314:	42ab      	cmp	r3, r5
 800b316:	db32      	blt.n	800b37e <__lshift+0x86>
 800b318:	4638      	mov	r0, r7
 800b31a:	f7ff fded 	bl	800aef8 <_Balloc>
 800b31e:	2300      	movs	r3, #0
 800b320:	4680      	mov	r8, r0
 800b322:	f100 0114 	add.w	r1, r0, #20
 800b326:	461a      	mov	r2, r3
 800b328:	4553      	cmp	r3, sl
 800b32a:	db2b      	blt.n	800b384 <__lshift+0x8c>
 800b32c:	6920      	ldr	r0, [r4, #16]
 800b32e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b332:	f104 0314 	add.w	r3, r4, #20
 800b336:	f016 021f 	ands.w	r2, r6, #31
 800b33a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b33e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b342:	d025      	beq.n	800b390 <__lshift+0x98>
 800b344:	f1c2 0e20 	rsb	lr, r2, #32
 800b348:	2000      	movs	r0, #0
 800b34a:	681e      	ldr	r6, [r3, #0]
 800b34c:	468a      	mov	sl, r1
 800b34e:	4096      	lsls	r6, r2
 800b350:	4330      	orrs	r0, r6
 800b352:	f84a 0b04 	str.w	r0, [sl], #4
 800b356:	f853 0b04 	ldr.w	r0, [r3], #4
 800b35a:	459c      	cmp	ip, r3
 800b35c:	fa20 f00e 	lsr.w	r0, r0, lr
 800b360:	d814      	bhi.n	800b38c <__lshift+0x94>
 800b362:	6048      	str	r0, [r1, #4]
 800b364:	b108      	cbz	r0, 800b36a <__lshift+0x72>
 800b366:	f109 0502 	add.w	r5, r9, #2
 800b36a:	3d01      	subs	r5, #1
 800b36c:	4638      	mov	r0, r7
 800b36e:	f8c8 5010 	str.w	r5, [r8, #16]
 800b372:	4621      	mov	r1, r4
 800b374:	f7ff fdf4 	bl	800af60 <_Bfree>
 800b378:	4640      	mov	r0, r8
 800b37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b37e:	3101      	adds	r1, #1
 800b380:	005b      	lsls	r3, r3, #1
 800b382:	e7c7      	b.n	800b314 <__lshift+0x1c>
 800b384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b388:	3301      	adds	r3, #1
 800b38a:	e7cd      	b.n	800b328 <__lshift+0x30>
 800b38c:	4651      	mov	r1, sl
 800b38e:	e7dc      	b.n	800b34a <__lshift+0x52>
 800b390:	3904      	subs	r1, #4
 800b392:	f853 2b04 	ldr.w	r2, [r3], #4
 800b396:	f841 2f04 	str.w	r2, [r1, #4]!
 800b39a:	459c      	cmp	ip, r3
 800b39c:	d8f9      	bhi.n	800b392 <__lshift+0x9a>
 800b39e:	e7e4      	b.n	800b36a <__lshift+0x72>

0800b3a0 <__mcmp>:
 800b3a0:	6903      	ldr	r3, [r0, #16]
 800b3a2:	690a      	ldr	r2, [r1, #16]
 800b3a4:	1a9b      	subs	r3, r3, r2
 800b3a6:	b530      	push	{r4, r5, lr}
 800b3a8:	d10c      	bne.n	800b3c4 <__mcmp+0x24>
 800b3aa:	0092      	lsls	r2, r2, #2
 800b3ac:	3014      	adds	r0, #20
 800b3ae:	3114      	adds	r1, #20
 800b3b0:	1884      	adds	r4, r0, r2
 800b3b2:	4411      	add	r1, r2
 800b3b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b3b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b3bc:	4295      	cmp	r5, r2
 800b3be:	d003      	beq.n	800b3c8 <__mcmp+0x28>
 800b3c0:	d305      	bcc.n	800b3ce <__mcmp+0x2e>
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	bd30      	pop	{r4, r5, pc}
 800b3c8:	42a0      	cmp	r0, r4
 800b3ca:	d3f3      	bcc.n	800b3b4 <__mcmp+0x14>
 800b3cc:	e7fa      	b.n	800b3c4 <__mcmp+0x24>
 800b3ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3d2:	e7f7      	b.n	800b3c4 <__mcmp+0x24>

0800b3d4 <__mdiff>:
 800b3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3d8:	460d      	mov	r5, r1
 800b3da:	4607      	mov	r7, r0
 800b3dc:	4611      	mov	r1, r2
 800b3de:	4628      	mov	r0, r5
 800b3e0:	4614      	mov	r4, r2
 800b3e2:	f7ff ffdd 	bl	800b3a0 <__mcmp>
 800b3e6:	1e06      	subs	r6, r0, #0
 800b3e8:	d108      	bne.n	800b3fc <__mdiff+0x28>
 800b3ea:	4631      	mov	r1, r6
 800b3ec:	4638      	mov	r0, r7
 800b3ee:	f7ff fd83 	bl	800aef8 <_Balloc>
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b3f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3fc:	bfa4      	itt	ge
 800b3fe:	4623      	movge	r3, r4
 800b400:	462c      	movge	r4, r5
 800b402:	4638      	mov	r0, r7
 800b404:	6861      	ldr	r1, [r4, #4]
 800b406:	bfa6      	itte	ge
 800b408:	461d      	movge	r5, r3
 800b40a:	2600      	movge	r6, #0
 800b40c:	2601      	movlt	r6, #1
 800b40e:	f7ff fd73 	bl	800aef8 <_Balloc>
 800b412:	692b      	ldr	r3, [r5, #16]
 800b414:	60c6      	str	r6, [r0, #12]
 800b416:	6926      	ldr	r6, [r4, #16]
 800b418:	f105 0914 	add.w	r9, r5, #20
 800b41c:	f104 0214 	add.w	r2, r4, #20
 800b420:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b424:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b428:	f100 0514 	add.w	r5, r0, #20
 800b42c:	f04f 0e00 	mov.w	lr, #0
 800b430:	f852 ab04 	ldr.w	sl, [r2], #4
 800b434:	f859 4b04 	ldr.w	r4, [r9], #4
 800b438:	fa1e f18a 	uxtah	r1, lr, sl
 800b43c:	b2a3      	uxth	r3, r4
 800b43e:	1ac9      	subs	r1, r1, r3
 800b440:	0c23      	lsrs	r3, r4, #16
 800b442:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b446:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b44a:	b289      	uxth	r1, r1
 800b44c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b450:	45c8      	cmp	r8, r9
 800b452:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b456:	4694      	mov	ip, r2
 800b458:	f845 3b04 	str.w	r3, [r5], #4
 800b45c:	d8e8      	bhi.n	800b430 <__mdiff+0x5c>
 800b45e:	45bc      	cmp	ip, r7
 800b460:	d304      	bcc.n	800b46c <__mdiff+0x98>
 800b462:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b466:	b183      	cbz	r3, 800b48a <__mdiff+0xb6>
 800b468:	6106      	str	r6, [r0, #16]
 800b46a:	e7c5      	b.n	800b3f8 <__mdiff+0x24>
 800b46c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b470:	fa1e f381 	uxtah	r3, lr, r1
 800b474:	141a      	asrs	r2, r3, #16
 800b476:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b480:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b484:	f845 3b04 	str.w	r3, [r5], #4
 800b488:	e7e9      	b.n	800b45e <__mdiff+0x8a>
 800b48a:	3e01      	subs	r6, #1
 800b48c:	e7e9      	b.n	800b462 <__mdiff+0x8e>
	...

0800b490 <__ulp>:
 800b490:	4b12      	ldr	r3, [pc, #72]	; (800b4dc <__ulp+0x4c>)
 800b492:	ee10 2a90 	vmov	r2, s1
 800b496:	401a      	ands	r2, r3
 800b498:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	dd04      	ble.n	800b4aa <__ulp+0x1a>
 800b4a0:	2000      	movs	r0, #0
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	ec41 0b10 	vmov	d0, r0, r1
 800b4a8:	4770      	bx	lr
 800b4aa:	425b      	negs	r3, r3
 800b4ac:	151b      	asrs	r3, r3, #20
 800b4ae:	2b13      	cmp	r3, #19
 800b4b0:	f04f 0000 	mov.w	r0, #0
 800b4b4:	f04f 0100 	mov.w	r1, #0
 800b4b8:	dc04      	bgt.n	800b4c4 <__ulp+0x34>
 800b4ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b4be:	fa42 f103 	asr.w	r1, r2, r3
 800b4c2:	e7ef      	b.n	800b4a4 <__ulp+0x14>
 800b4c4:	3b14      	subs	r3, #20
 800b4c6:	2b1e      	cmp	r3, #30
 800b4c8:	f04f 0201 	mov.w	r2, #1
 800b4cc:	bfda      	itte	le
 800b4ce:	f1c3 031f 	rsble	r3, r3, #31
 800b4d2:	fa02 f303 	lslle.w	r3, r2, r3
 800b4d6:	4613      	movgt	r3, r2
 800b4d8:	4618      	mov	r0, r3
 800b4da:	e7e3      	b.n	800b4a4 <__ulp+0x14>
 800b4dc:	7ff00000 	.word	0x7ff00000

0800b4e0 <__b2d>:
 800b4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4e2:	6905      	ldr	r5, [r0, #16]
 800b4e4:	f100 0714 	add.w	r7, r0, #20
 800b4e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b4ec:	1f2e      	subs	r6, r5, #4
 800b4ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f7ff fdc4 	bl	800b080 <__hi0bits>
 800b4f8:	f1c0 0320 	rsb	r3, r0, #32
 800b4fc:	280a      	cmp	r0, #10
 800b4fe:	600b      	str	r3, [r1, #0]
 800b500:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b578 <__b2d+0x98>
 800b504:	dc14      	bgt.n	800b530 <__b2d+0x50>
 800b506:	f1c0 0e0b 	rsb	lr, r0, #11
 800b50a:	fa24 f10e 	lsr.w	r1, r4, lr
 800b50e:	42b7      	cmp	r7, r6
 800b510:	ea41 030c 	orr.w	r3, r1, ip
 800b514:	bf34      	ite	cc
 800b516:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b51a:	2100      	movcs	r1, #0
 800b51c:	3015      	adds	r0, #21
 800b51e:	fa04 f000 	lsl.w	r0, r4, r0
 800b522:	fa21 f10e 	lsr.w	r1, r1, lr
 800b526:	ea40 0201 	orr.w	r2, r0, r1
 800b52a:	ec43 2b10 	vmov	d0, r2, r3
 800b52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b530:	42b7      	cmp	r7, r6
 800b532:	bf3a      	itte	cc
 800b534:	f1a5 0608 	subcc.w	r6, r5, #8
 800b538:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b53c:	2100      	movcs	r1, #0
 800b53e:	380b      	subs	r0, #11
 800b540:	d015      	beq.n	800b56e <__b2d+0x8e>
 800b542:	4084      	lsls	r4, r0
 800b544:	f1c0 0520 	rsb	r5, r0, #32
 800b548:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b54c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b550:	42be      	cmp	r6, r7
 800b552:	fa21 fc05 	lsr.w	ip, r1, r5
 800b556:	ea44 030c 	orr.w	r3, r4, ip
 800b55a:	bf8c      	ite	hi
 800b55c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b560:	2400      	movls	r4, #0
 800b562:	fa01 f000 	lsl.w	r0, r1, r0
 800b566:	40ec      	lsrs	r4, r5
 800b568:	ea40 0204 	orr.w	r2, r0, r4
 800b56c:	e7dd      	b.n	800b52a <__b2d+0x4a>
 800b56e:	ea44 030c 	orr.w	r3, r4, ip
 800b572:	460a      	mov	r2, r1
 800b574:	e7d9      	b.n	800b52a <__b2d+0x4a>
 800b576:	bf00      	nop
 800b578:	3ff00000 	.word	0x3ff00000

0800b57c <__d2b>:
 800b57c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b580:	460e      	mov	r6, r1
 800b582:	2101      	movs	r1, #1
 800b584:	ec59 8b10 	vmov	r8, r9, d0
 800b588:	4615      	mov	r5, r2
 800b58a:	f7ff fcb5 	bl	800aef8 <_Balloc>
 800b58e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b592:	4607      	mov	r7, r0
 800b594:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b598:	bb34      	cbnz	r4, 800b5e8 <__d2b+0x6c>
 800b59a:	9301      	str	r3, [sp, #4]
 800b59c:	f1b8 0300 	subs.w	r3, r8, #0
 800b5a0:	d027      	beq.n	800b5f2 <__d2b+0x76>
 800b5a2:	a802      	add	r0, sp, #8
 800b5a4:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b5a8:	f7ff fd89 	bl	800b0be <__lo0bits>
 800b5ac:	9900      	ldr	r1, [sp, #0]
 800b5ae:	b1f0      	cbz	r0, 800b5ee <__d2b+0x72>
 800b5b0:	9a01      	ldr	r2, [sp, #4]
 800b5b2:	f1c0 0320 	rsb	r3, r0, #32
 800b5b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ba:	430b      	orrs	r3, r1
 800b5bc:	40c2      	lsrs	r2, r0
 800b5be:	617b      	str	r3, [r7, #20]
 800b5c0:	9201      	str	r2, [sp, #4]
 800b5c2:	9b01      	ldr	r3, [sp, #4]
 800b5c4:	61bb      	str	r3, [r7, #24]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	bf14      	ite	ne
 800b5ca:	2102      	movne	r1, #2
 800b5cc:	2101      	moveq	r1, #1
 800b5ce:	6139      	str	r1, [r7, #16]
 800b5d0:	b1c4      	cbz	r4, 800b604 <__d2b+0x88>
 800b5d2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b5d6:	4404      	add	r4, r0
 800b5d8:	6034      	str	r4, [r6, #0]
 800b5da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5de:	6028      	str	r0, [r5, #0]
 800b5e0:	4638      	mov	r0, r7
 800b5e2:	b003      	add	sp, #12
 800b5e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5ec:	e7d5      	b.n	800b59a <__d2b+0x1e>
 800b5ee:	6179      	str	r1, [r7, #20]
 800b5f0:	e7e7      	b.n	800b5c2 <__d2b+0x46>
 800b5f2:	a801      	add	r0, sp, #4
 800b5f4:	f7ff fd63 	bl	800b0be <__lo0bits>
 800b5f8:	9b01      	ldr	r3, [sp, #4]
 800b5fa:	617b      	str	r3, [r7, #20]
 800b5fc:	2101      	movs	r1, #1
 800b5fe:	6139      	str	r1, [r7, #16]
 800b600:	3020      	adds	r0, #32
 800b602:	e7e5      	b.n	800b5d0 <__d2b+0x54>
 800b604:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b608:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b60c:	6030      	str	r0, [r6, #0]
 800b60e:	6918      	ldr	r0, [r3, #16]
 800b610:	f7ff fd36 	bl	800b080 <__hi0bits>
 800b614:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b618:	e7e1      	b.n	800b5de <__d2b+0x62>

0800b61a <__ratio>:
 800b61a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61e:	4688      	mov	r8, r1
 800b620:	4669      	mov	r1, sp
 800b622:	4681      	mov	r9, r0
 800b624:	f7ff ff5c 	bl	800b4e0 <__b2d>
 800b628:	a901      	add	r1, sp, #4
 800b62a:	4640      	mov	r0, r8
 800b62c:	ec57 6b10 	vmov	r6, r7, d0
 800b630:	f7ff ff56 	bl	800b4e0 <__b2d>
 800b634:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b638:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b63c:	eba3 0c02 	sub.w	ip, r3, r2
 800b640:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b644:	1a9b      	subs	r3, r3, r2
 800b646:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b64a:	ec5b ab10 	vmov	sl, fp, d0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	bfce      	itee	gt
 800b652:	463a      	movgt	r2, r7
 800b654:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b658:	465a      	movle	r2, fp
 800b65a:	4659      	mov	r1, fp
 800b65c:	463d      	mov	r5, r7
 800b65e:	bfd4      	ite	le
 800b660:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b664:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b668:	4630      	mov	r0, r6
 800b66a:	ee10 2a10 	vmov	r2, s0
 800b66e:	460b      	mov	r3, r1
 800b670:	4629      	mov	r1, r5
 800b672:	f7f5 f903 	bl	800087c <__aeabi_ddiv>
 800b676:	ec41 0b10 	vmov	d0, r0, r1
 800b67a:	b003      	add	sp, #12
 800b67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b680 <__copybits>:
 800b680:	3901      	subs	r1, #1
 800b682:	b510      	push	{r4, lr}
 800b684:	1149      	asrs	r1, r1, #5
 800b686:	6914      	ldr	r4, [r2, #16]
 800b688:	3101      	adds	r1, #1
 800b68a:	f102 0314 	add.w	r3, r2, #20
 800b68e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b692:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b696:	42a3      	cmp	r3, r4
 800b698:	4602      	mov	r2, r0
 800b69a:	d303      	bcc.n	800b6a4 <__copybits+0x24>
 800b69c:	2300      	movs	r3, #0
 800b69e:	428a      	cmp	r2, r1
 800b6a0:	d305      	bcc.n	800b6ae <__copybits+0x2e>
 800b6a2:	bd10      	pop	{r4, pc}
 800b6a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6a8:	f840 2b04 	str.w	r2, [r0], #4
 800b6ac:	e7f3      	b.n	800b696 <__copybits+0x16>
 800b6ae:	f842 3b04 	str.w	r3, [r2], #4
 800b6b2:	e7f4      	b.n	800b69e <__copybits+0x1e>

0800b6b4 <__any_on>:
 800b6b4:	f100 0214 	add.w	r2, r0, #20
 800b6b8:	6900      	ldr	r0, [r0, #16]
 800b6ba:	114b      	asrs	r3, r1, #5
 800b6bc:	4298      	cmp	r0, r3
 800b6be:	b510      	push	{r4, lr}
 800b6c0:	db11      	blt.n	800b6e6 <__any_on+0x32>
 800b6c2:	dd0a      	ble.n	800b6da <__any_on+0x26>
 800b6c4:	f011 011f 	ands.w	r1, r1, #31
 800b6c8:	d007      	beq.n	800b6da <__any_on+0x26>
 800b6ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b6ce:	fa24 f001 	lsr.w	r0, r4, r1
 800b6d2:	fa00 f101 	lsl.w	r1, r0, r1
 800b6d6:	428c      	cmp	r4, r1
 800b6d8:	d10b      	bne.n	800b6f2 <__any_on+0x3e>
 800b6da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d803      	bhi.n	800b6ea <__any_on+0x36>
 800b6e2:	2000      	movs	r0, #0
 800b6e4:	bd10      	pop	{r4, pc}
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	e7f7      	b.n	800b6da <__any_on+0x26>
 800b6ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b6ee:	2900      	cmp	r1, #0
 800b6f0:	d0f5      	beq.n	800b6de <__any_on+0x2a>
 800b6f2:	2001      	movs	r0, #1
 800b6f4:	e7f6      	b.n	800b6e4 <__any_on+0x30>

0800b6f6 <_calloc_r>:
 800b6f6:	b538      	push	{r3, r4, r5, lr}
 800b6f8:	fb02 f401 	mul.w	r4, r2, r1
 800b6fc:	4621      	mov	r1, r4
 800b6fe:	f000 f857 	bl	800b7b0 <_malloc_r>
 800b702:	4605      	mov	r5, r0
 800b704:	b118      	cbz	r0, 800b70e <_calloc_r+0x18>
 800b706:	4622      	mov	r2, r4
 800b708:	2100      	movs	r1, #0
 800b70a:	f7fc fa30 	bl	8007b6e <memset>
 800b70e:	4628      	mov	r0, r5
 800b710:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b714 <_free_r>:
 800b714:	b538      	push	{r3, r4, r5, lr}
 800b716:	4605      	mov	r5, r0
 800b718:	2900      	cmp	r1, #0
 800b71a:	d045      	beq.n	800b7a8 <_free_r+0x94>
 800b71c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b720:	1f0c      	subs	r4, r1, #4
 800b722:	2b00      	cmp	r3, #0
 800b724:	bfb8      	it	lt
 800b726:	18e4      	addlt	r4, r4, r3
 800b728:	f000 fac3 	bl	800bcb2 <__malloc_lock>
 800b72c:	4a1f      	ldr	r2, [pc, #124]	; (800b7ac <_free_r+0x98>)
 800b72e:	6813      	ldr	r3, [r2, #0]
 800b730:	4610      	mov	r0, r2
 800b732:	b933      	cbnz	r3, 800b742 <_free_r+0x2e>
 800b734:	6063      	str	r3, [r4, #4]
 800b736:	6014      	str	r4, [r2, #0]
 800b738:	4628      	mov	r0, r5
 800b73a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b73e:	f000 bab9 	b.w	800bcb4 <__malloc_unlock>
 800b742:	42a3      	cmp	r3, r4
 800b744:	d90c      	bls.n	800b760 <_free_r+0x4c>
 800b746:	6821      	ldr	r1, [r4, #0]
 800b748:	1862      	adds	r2, r4, r1
 800b74a:	4293      	cmp	r3, r2
 800b74c:	bf04      	itt	eq
 800b74e:	681a      	ldreq	r2, [r3, #0]
 800b750:	685b      	ldreq	r3, [r3, #4]
 800b752:	6063      	str	r3, [r4, #4]
 800b754:	bf04      	itt	eq
 800b756:	1852      	addeq	r2, r2, r1
 800b758:	6022      	streq	r2, [r4, #0]
 800b75a:	6004      	str	r4, [r0, #0]
 800b75c:	e7ec      	b.n	800b738 <_free_r+0x24>
 800b75e:	4613      	mov	r3, r2
 800b760:	685a      	ldr	r2, [r3, #4]
 800b762:	b10a      	cbz	r2, 800b768 <_free_r+0x54>
 800b764:	42a2      	cmp	r2, r4
 800b766:	d9fa      	bls.n	800b75e <_free_r+0x4a>
 800b768:	6819      	ldr	r1, [r3, #0]
 800b76a:	1858      	adds	r0, r3, r1
 800b76c:	42a0      	cmp	r0, r4
 800b76e:	d10b      	bne.n	800b788 <_free_r+0x74>
 800b770:	6820      	ldr	r0, [r4, #0]
 800b772:	4401      	add	r1, r0
 800b774:	1858      	adds	r0, r3, r1
 800b776:	4282      	cmp	r2, r0
 800b778:	6019      	str	r1, [r3, #0]
 800b77a:	d1dd      	bne.n	800b738 <_free_r+0x24>
 800b77c:	6810      	ldr	r0, [r2, #0]
 800b77e:	6852      	ldr	r2, [r2, #4]
 800b780:	605a      	str	r2, [r3, #4]
 800b782:	4401      	add	r1, r0
 800b784:	6019      	str	r1, [r3, #0]
 800b786:	e7d7      	b.n	800b738 <_free_r+0x24>
 800b788:	d902      	bls.n	800b790 <_free_r+0x7c>
 800b78a:	230c      	movs	r3, #12
 800b78c:	602b      	str	r3, [r5, #0]
 800b78e:	e7d3      	b.n	800b738 <_free_r+0x24>
 800b790:	6820      	ldr	r0, [r4, #0]
 800b792:	1821      	adds	r1, r4, r0
 800b794:	428a      	cmp	r2, r1
 800b796:	bf04      	itt	eq
 800b798:	6811      	ldreq	r1, [r2, #0]
 800b79a:	6852      	ldreq	r2, [r2, #4]
 800b79c:	6062      	str	r2, [r4, #4]
 800b79e:	bf04      	itt	eq
 800b7a0:	1809      	addeq	r1, r1, r0
 800b7a2:	6021      	streq	r1, [r4, #0]
 800b7a4:	605c      	str	r4, [r3, #4]
 800b7a6:	e7c7      	b.n	800b738 <_free_r+0x24>
 800b7a8:	bd38      	pop	{r3, r4, r5, pc}
 800b7aa:	bf00      	nop
 800b7ac:	200042e8 	.word	0x200042e8

0800b7b0 <_malloc_r>:
 800b7b0:	b570      	push	{r4, r5, r6, lr}
 800b7b2:	1ccd      	adds	r5, r1, #3
 800b7b4:	f025 0503 	bic.w	r5, r5, #3
 800b7b8:	3508      	adds	r5, #8
 800b7ba:	2d0c      	cmp	r5, #12
 800b7bc:	bf38      	it	cc
 800b7be:	250c      	movcc	r5, #12
 800b7c0:	2d00      	cmp	r5, #0
 800b7c2:	4606      	mov	r6, r0
 800b7c4:	db01      	blt.n	800b7ca <_malloc_r+0x1a>
 800b7c6:	42a9      	cmp	r1, r5
 800b7c8:	d903      	bls.n	800b7d2 <_malloc_r+0x22>
 800b7ca:	230c      	movs	r3, #12
 800b7cc:	6033      	str	r3, [r6, #0]
 800b7ce:	2000      	movs	r0, #0
 800b7d0:	bd70      	pop	{r4, r5, r6, pc}
 800b7d2:	f000 fa6e 	bl	800bcb2 <__malloc_lock>
 800b7d6:	4a21      	ldr	r2, [pc, #132]	; (800b85c <_malloc_r+0xac>)
 800b7d8:	6814      	ldr	r4, [r2, #0]
 800b7da:	4621      	mov	r1, r4
 800b7dc:	b991      	cbnz	r1, 800b804 <_malloc_r+0x54>
 800b7de:	4c20      	ldr	r4, [pc, #128]	; (800b860 <_malloc_r+0xb0>)
 800b7e0:	6823      	ldr	r3, [r4, #0]
 800b7e2:	b91b      	cbnz	r3, 800b7ec <_malloc_r+0x3c>
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	f000 f98f 	bl	800bb08 <_sbrk_r>
 800b7ea:	6020      	str	r0, [r4, #0]
 800b7ec:	4629      	mov	r1, r5
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	f000 f98a 	bl	800bb08 <_sbrk_r>
 800b7f4:	1c43      	adds	r3, r0, #1
 800b7f6:	d124      	bne.n	800b842 <_malloc_r+0x92>
 800b7f8:	230c      	movs	r3, #12
 800b7fa:	6033      	str	r3, [r6, #0]
 800b7fc:	4630      	mov	r0, r6
 800b7fe:	f000 fa59 	bl	800bcb4 <__malloc_unlock>
 800b802:	e7e4      	b.n	800b7ce <_malloc_r+0x1e>
 800b804:	680b      	ldr	r3, [r1, #0]
 800b806:	1b5b      	subs	r3, r3, r5
 800b808:	d418      	bmi.n	800b83c <_malloc_r+0x8c>
 800b80a:	2b0b      	cmp	r3, #11
 800b80c:	d90f      	bls.n	800b82e <_malloc_r+0x7e>
 800b80e:	600b      	str	r3, [r1, #0]
 800b810:	50cd      	str	r5, [r1, r3]
 800b812:	18cc      	adds	r4, r1, r3
 800b814:	4630      	mov	r0, r6
 800b816:	f000 fa4d 	bl	800bcb4 <__malloc_unlock>
 800b81a:	f104 000b 	add.w	r0, r4, #11
 800b81e:	1d23      	adds	r3, r4, #4
 800b820:	f020 0007 	bic.w	r0, r0, #7
 800b824:	1ac3      	subs	r3, r0, r3
 800b826:	d0d3      	beq.n	800b7d0 <_malloc_r+0x20>
 800b828:	425a      	negs	r2, r3
 800b82a:	50e2      	str	r2, [r4, r3]
 800b82c:	e7d0      	b.n	800b7d0 <_malloc_r+0x20>
 800b82e:	428c      	cmp	r4, r1
 800b830:	684b      	ldr	r3, [r1, #4]
 800b832:	bf16      	itet	ne
 800b834:	6063      	strne	r3, [r4, #4]
 800b836:	6013      	streq	r3, [r2, #0]
 800b838:	460c      	movne	r4, r1
 800b83a:	e7eb      	b.n	800b814 <_malloc_r+0x64>
 800b83c:	460c      	mov	r4, r1
 800b83e:	6849      	ldr	r1, [r1, #4]
 800b840:	e7cc      	b.n	800b7dc <_malloc_r+0x2c>
 800b842:	1cc4      	adds	r4, r0, #3
 800b844:	f024 0403 	bic.w	r4, r4, #3
 800b848:	42a0      	cmp	r0, r4
 800b84a:	d005      	beq.n	800b858 <_malloc_r+0xa8>
 800b84c:	1a21      	subs	r1, r4, r0
 800b84e:	4630      	mov	r0, r6
 800b850:	f000 f95a 	bl	800bb08 <_sbrk_r>
 800b854:	3001      	adds	r0, #1
 800b856:	d0cf      	beq.n	800b7f8 <_malloc_r+0x48>
 800b858:	6025      	str	r5, [r4, #0]
 800b85a:	e7db      	b.n	800b814 <_malloc_r+0x64>
 800b85c:	200042e8 	.word	0x200042e8
 800b860:	200042ec 	.word	0x200042ec

0800b864 <__ssputs_r>:
 800b864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b868:	688e      	ldr	r6, [r1, #8]
 800b86a:	429e      	cmp	r6, r3
 800b86c:	4682      	mov	sl, r0
 800b86e:	460c      	mov	r4, r1
 800b870:	4690      	mov	r8, r2
 800b872:	4699      	mov	r9, r3
 800b874:	d837      	bhi.n	800b8e6 <__ssputs_r+0x82>
 800b876:	898a      	ldrh	r2, [r1, #12]
 800b878:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b87c:	d031      	beq.n	800b8e2 <__ssputs_r+0x7e>
 800b87e:	6825      	ldr	r5, [r4, #0]
 800b880:	6909      	ldr	r1, [r1, #16]
 800b882:	1a6f      	subs	r7, r5, r1
 800b884:	6965      	ldr	r5, [r4, #20]
 800b886:	2302      	movs	r3, #2
 800b888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b88c:	fb95 f5f3 	sdiv	r5, r5, r3
 800b890:	f109 0301 	add.w	r3, r9, #1
 800b894:	443b      	add	r3, r7
 800b896:	429d      	cmp	r5, r3
 800b898:	bf38      	it	cc
 800b89a:	461d      	movcc	r5, r3
 800b89c:	0553      	lsls	r3, r2, #21
 800b89e:	d530      	bpl.n	800b902 <__ssputs_r+0x9e>
 800b8a0:	4629      	mov	r1, r5
 800b8a2:	f7ff ff85 	bl	800b7b0 <_malloc_r>
 800b8a6:	4606      	mov	r6, r0
 800b8a8:	b950      	cbnz	r0, 800b8c0 <__ssputs_r+0x5c>
 800b8aa:	230c      	movs	r3, #12
 800b8ac:	f8ca 3000 	str.w	r3, [sl]
 800b8b0:	89a3      	ldrh	r3, [r4, #12]
 800b8b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8b6:	81a3      	strh	r3, [r4, #12]
 800b8b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8c0:	463a      	mov	r2, r7
 800b8c2:	6921      	ldr	r1, [r4, #16]
 800b8c4:	f7fc f948 	bl	8007b58 <memcpy>
 800b8c8:	89a3      	ldrh	r3, [r4, #12]
 800b8ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8d2:	81a3      	strh	r3, [r4, #12]
 800b8d4:	6126      	str	r6, [r4, #16]
 800b8d6:	6165      	str	r5, [r4, #20]
 800b8d8:	443e      	add	r6, r7
 800b8da:	1bed      	subs	r5, r5, r7
 800b8dc:	6026      	str	r6, [r4, #0]
 800b8de:	60a5      	str	r5, [r4, #8]
 800b8e0:	464e      	mov	r6, r9
 800b8e2:	454e      	cmp	r6, r9
 800b8e4:	d900      	bls.n	800b8e8 <__ssputs_r+0x84>
 800b8e6:	464e      	mov	r6, r9
 800b8e8:	4632      	mov	r2, r6
 800b8ea:	4641      	mov	r1, r8
 800b8ec:	6820      	ldr	r0, [r4, #0]
 800b8ee:	f000 f9c7 	bl	800bc80 <memmove>
 800b8f2:	68a3      	ldr	r3, [r4, #8]
 800b8f4:	1b9b      	subs	r3, r3, r6
 800b8f6:	60a3      	str	r3, [r4, #8]
 800b8f8:	6823      	ldr	r3, [r4, #0]
 800b8fa:	441e      	add	r6, r3
 800b8fc:	6026      	str	r6, [r4, #0]
 800b8fe:	2000      	movs	r0, #0
 800b900:	e7dc      	b.n	800b8bc <__ssputs_r+0x58>
 800b902:	462a      	mov	r2, r5
 800b904:	f000 f9d7 	bl	800bcb6 <_realloc_r>
 800b908:	4606      	mov	r6, r0
 800b90a:	2800      	cmp	r0, #0
 800b90c:	d1e2      	bne.n	800b8d4 <__ssputs_r+0x70>
 800b90e:	6921      	ldr	r1, [r4, #16]
 800b910:	4650      	mov	r0, sl
 800b912:	f7ff feff 	bl	800b714 <_free_r>
 800b916:	e7c8      	b.n	800b8aa <__ssputs_r+0x46>

0800b918 <_svfiprintf_r>:
 800b918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b91c:	461d      	mov	r5, r3
 800b91e:	898b      	ldrh	r3, [r1, #12]
 800b920:	061f      	lsls	r7, r3, #24
 800b922:	b09d      	sub	sp, #116	; 0x74
 800b924:	4680      	mov	r8, r0
 800b926:	460c      	mov	r4, r1
 800b928:	4616      	mov	r6, r2
 800b92a:	d50f      	bpl.n	800b94c <_svfiprintf_r+0x34>
 800b92c:	690b      	ldr	r3, [r1, #16]
 800b92e:	b96b      	cbnz	r3, 800b94c <_svfiprintf_r+0x34>
 800b930:	2140      	movs	r1, #64	; 0x40
 800b932:	f7ff ff3d 	bl	800b7b0 <_malloc_r>
 800b936:	6020      	str	r0, [r4, #0]
 800b938:	6120      	str	r0, [r4, #16]
 800b93a:	b928      	cbnz	r0, 800b948 <_svfiprintf_r+0x30>
 800b93c:	230c      	movs	r3, #12
 800b93e:	f8c8 3000 	str.w	r3, [r8]
 800b942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b946:	e0c8      	b.n	800bada <_svfiprintf_r+0x1c2>
 800b948:	2340      	movs	r3, #64	; 0x40
 800b94a:	6163      	str	r3, [r4, #20]
 800b94c:	2300      	movs	r3, #0
 800b94e:	9309      	str	r3, [sp, #36]	; 0x24
 800b950:	2320      	movs	r3, #32
 800b952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b956:	2330      	movs	r3, #48	; 0x30
 800b958:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b95c:	9503      	str	r5, [sp, #12]
 800b95e:	f04f 0b01 	mov.w	fp, #1
 800b962:	4637      	mov	r7, r6
 800b964:	463d      	mov	r5, r7
 800b966:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b96a:	b10b      	cbz	r3, 800b970 <_svfiprintf_r+0x58>
 800b96c:	2b25      	cmp	r3, #37	; 0x25
 800b96e:	d13e      	bne.n	800b9ee <_svfiprintf_r+0xd6>
 800b970:	ebb7 0a06 	subs.w	sl, r7, r6
 800b974:	d00b      	beq.n	800b98e <_svfiprintf_r+0x76>
 800b976:	4653      	mov	r3, sl
 800b978:	4632      	mov	r2, r6
 800b97a:	4621      	mov	r1, r4
 800b97c:	4640      	mov	r0, r8
 800b97e:	f7ff ff71 	bl	800b864 <__ssputs_r>
 800b982:	3001      	adds	r0, #1
 800b984:	f000 80a4 	beq.w	800bad0 <_svfiprintf_r+0x1b8>
 800b988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b98a:	4453      	add	r3, sl
 800b98c:	9309      	str	r3, [sp, #36]	; 0x24
 800b98e:	783b      	ldrb	r3, [r7, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	f000 809d 	beq.w	800bad0 <_svfiprintf_r+0x1b8>
 800b996:	2300      	movs	r3, #0
 800b998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b99c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9a0:	9304      	str	r3, [sp, #16]
 800b9a2:	9307      	str	r3, [sp, #28]
 800b9a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9a8:	931a      	str	r3, [sp, #104]	; 0x68
 800b9aa:	462f      	mov	r7, r5
 800b9ac:	2205      	movs	r2, #5
 800b9ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b9b2:	4850      	ldr	r0, [pc, #320]	; (800baf4 <_svfiprintf_r+0x1dc>)
 800b9b4:	f7f4 fc2c 	bl	8000210 <memchr>
 800b9b8:	9b04      	ldr	r3, [sp, #16]
 800b9ba:	b9d0      	cbnz	r0, 800b9f2 <_svfiprintf_r+0xda>
 800b9bc:	06d9      	lsls	r1, r3, #27
 800b9be:	bf44      	itt	mi
 800b9c0:	2220      	movmi	r2, #32
 800b9c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b9c6:	071a      	lsls	r2, r3, #28
 800b9c8:	bf44      	itt	mi
 800b9ca:	222b      	movmi	r2, #43	; 0x2b
 800b9cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b9d0:	782a      	ldrb	r2, [r5, #0]
 800b9d2:	2a2a      	cmp	r2, #42	; 0x2a
 800b9d4:	d015      	beq.n	800ba02 <_svfiprintf_r+0xea>
 800b9d6:	9a07      	ldr	r2, [sp, #28]
 800b9d8:	462f      	mov	r7, r5
 800b9da:	2000      	movs	r0, #0
 800b9dc:	250a      	movs	r5, #10
 800b9de:	4639      	mov	r1, r7
 800b9e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9e4:	3b30      	subs	r3, #48	; 0x30
 800b9e6:	2b09      	cmp	r3, #9
 800b9e8:	d94d      	bls.n	800ba86 <_svfiprintf_r+0x16e>
 800b9ea:	b1b8      	cbz	r0, 800ba1c <_svfiprintf_r+0x104>
 800b9ec:	e00f      	b.n	800ba0e <_svfiprintf_r+0xf6>
 800b9ee:	462f      	mov	r7, r5
 800b9f0:	e7b8      	b.n	800b964 <_svfiprintf_r+0x4c>
 800b9f2:	4a40      	ldr	r2, [pc, #256]	; (800baf4 <_svfiprintf_r+0x1dc>)
 800b9f4:	1a80      	subs	r0, r0, r2
 800b9f6:	fa0b f000 	lsl.w	r0, fp, r0
 800b9fa:	4318      	orrs	r0, r3
 800b9fc:	9004      	str	r0, [sp, #16]
 800b9fe:	463d      	mov	r5, r7
 800ba00:	e7d3      	b.n	800b9aa <_svfiprintf_r+0x92>
 800ba02:	9a03      	ldr	r2, [sp, #12]
 800ba04:	1d11      	adds	r1, r2, #4
 800ba06:	6812      	ldr	r2, [r2, #0]
 800ba08:	9103      	str	r1, [sp, #12]
 800ba0a:	2a00      	cmp	r2, #0
 800ba0c:	db01      	blt.n	800ba12 <_svfiprintf_r+0xfa>
 800ba0e:	9207      	str	r2, [sp, #28]
 800ba10:	e004      	b.n	800ba1c <_svfiprintf_r+0x104>
 800ba12:	4252      	negs	r2, r2
 800ba14:	f043 0302 	orr.w	r3, r3, #2
 800ba18:	9207      	str	r2, [sp, #28]
 800ba1a:	9304      	str	r3, [sp, #16]
 800ba1c:	783b      	ldrb	r3, [r7, #0]
 800ba1e:	2b2e      	cmp	r3, #46	; 0x2e
 800ba20:	d10c      	bne.n	800ba3c <_svfiprintf_r+0x124>
 800ba22:	787b      	ldrb	r3, [r7, #1]
 800ba24:	2b2a      	cmp	r3, #42	; 0x2a
 800ba26:	d133      	bne.n	800ba90 <_svfiprintf_r+0x178>
 800ba28:	9b03      	ldr	r3, [sp, #12]
 800ba2a:	1d1a      	adds	r2, r3, #4
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	9203      	str	r2, [sp, #12]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	bfb8      	it	lt
 800ba34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ba38:	3702      	adds	r7, #2
 800ba3a:	9305      	str	r3, [sp, #20]
 800ba3c:	4d2e      	ldr	r5, [pc, #184]	; (800baf8 <_svfiprintf_r+0x1e0>)
 800ba3e:	7839      	ldrb	r1, [r7, #0]
 800ba40:	2203      	movs	r2, #3
 800ba42:	4628      	mov	r0, r5
 800ba44:	f7f4 fbe4 	bl	8000210 <memchr>
 800ba48:	b138      	cbz	r0, 800ba5a <_svfiprintf_r+0x142>
 800ba4a:	2340      	movs	r3, #64	; 0x40
 800ba4c:	1b40      	subs	r0, r0, r5
 800ba4e:	fa03 f000 	lsl.w	r0, r3, r0
 800ba52:	9b04      	ldr	r3, [sp, #16]
 800ba54:	4303      	orrs	r3, r0
 800ba56:	3701      	adds	r7, #1
 800ba58:	9304      	str	r3, [sp, #16]
 800ba5a:	7839      	ldrb	r1, [r7, #0]
 800ba5c:	4827      	ldr	r0, [pc, #156]	; (800bafc <_svfiprintf_r+0x1e4>)
 800ba5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba62:	2206      	movs	r2, #6
 800ba64:	1c7e      	adds	r6, r7, #1
 800ba66:	f7f4 fbd3 	bl	8000210 <memchr>
 800ba6a:	2800      	cmp	r0, #0
 800ba6c:	d038      	beq.n	800bae0 <_svfiprintf_r+0x1c8>
 800ba6e:	4b24      	ldr	r3, [pc, #144]	; (800bb00 <_svfiprintf_r+0x1e8>)
 800ba70:	bb13      	cbnz	r3, 800bab8 <_svfiprintf_r+0x1a0>
 800ba72:	9b03      	ldr	r3, [sp, #12]
 800ba74:	3307      	adds	r3, #7
 800ba76:	f023 0307 	bic.w	r3, r3, #7
 800ba7a:	3308      	adds	r3, #8
 800ba7c:	9303      	str	r3, [sp, #12]
 800ba7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba80:	444b      	add	r3, r9
 800ba82:	9309      	str	r3, [sp, #36]	; 0x24
 800ba84:	e76d      	b.n	800b962 <_svfiprintf_r+0x4a>
 800ba86:	fb05 3202 	mla	r2, r5, r2, r3
 800ba8a:	2001      	movs	r0, #1
 800ba8c:	460f      	mov	r7, r1
 800ba8e:	e7a6      	b.n	800b9de <_svfiprintf_r+0xc6>
 800ba90:	2300      	movs	r3, #0
 800ba92:	3701      	adds	r7, #1
 800ba94:	9305      	str	r3, [sp, #20]
 800ba96:	4619      	mov	r1, r3
 800ba98:	250a      	movs	r5, #10
 800ba9a:	4638      	mov	r0, r7
 800ba9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baa0:	3a30      	subs	r2, #48	; 0x30
 800baa2:	2a09      	cmp	r2, #9
 800baa4:	d903      	bls.n	800baae <_svfiprintf_r+0x196>
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d0c8      	beq.n	800ba3c <_svfiprintf_r+0x124>
 800baaa:	9105      	str	r1, [sp, #20]
 800baac:	e7c6      	b.n	800ba3c <_svfiprintf_r+0x124>
 800baae:	fb05 2101 	mla	r1, r5, r1, r2
 800bab2:	2301      	movs	r3, #1
 800bab4:	4607      	mov	r7, r0
 800bab6:	e7f0      	b.n	800ba9a <_svfiprintf_r+0x182>
 800bab8:	ab03      	add	r3, sp, #12
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	4622      	mov	r2, r4
 800babe:	4b11      	ldr	r3, [pc, #68]	; (800bb04 <_svfiprintf_r+0x1ec>)
 800bac0:	a904      	add	r1, sp, #16
 800bac2:	4640      	mov	r0, r8
 800bac4:	f7fc f8f0 	bl	8007ca8 <_printf_float>
 800bac8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800bacc:	4681      	mov	r9, r0
 800bace:	d1d6      	bne.n	800ba7e <_svfiprintf_r+0x166>
 800bad0:	89a3      	ldrh	r3, [r4, #12]
 800bad2:	065b      	lsls	r3, r3, #25
 800bad4:	f53f af35 	bmi.w	800b942 <_svfiprintf_r+0x2a>
 800bad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bada:	b01d      	add	sp, #116	; 0x74
 800badc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae0:	ab03      	add	r3, sp, #12
 800bae2:	9300      	str	r3, [sp, #0]
 800bae4:	4622      	mov	r2, r4
 800bae6:	4b07      	ldr	r3, [pc, #28]	; (800bb04 <_svfiprintf_r+0x1ec>)
 800bae8:	a904      	add	r1, sp, #16
 800baea:	4640      	mov	r0, r8
 800baec:	f7fc fb92 	bl	8008214 <_printf_i>
 800baf0:	e7ea      	b.n	800bac8 <_svfiprintf_r+0x1b0>
 800baf2:	bf00      	nop
 800baf4:	0800c5c4 	.word	0x0800c5c4
 800baf8:	0800c5ca 	.word	0x0800c5ca
 800bafc:	0800c5ce 	.word	0x0800c5ce
 800bb00:	08007ca9 	.word	0x08007ca9
 800bb04:	0800b865 	.word	0x0800b865

0800bb08 <_sbrk_r>:
 800bb08:	b538      	push	{r3, r4, r5, lr}
 800bb0a:	4c06      	ldr	r4, [pc, #24]	; (800bb24 <_sbrk_r+0x1c>)
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	4605      	mov	r5, r0
 800bb10:	4608      	mov	r0, r1
 800bb12:	6023      	str	r3, [r4, #0]
 800bb14:	f7fb fdaa 	bl	800766c <_sbrk>
 800bb18:	1c43      	adds	r3, r0, #1
 800bb1a:	d102      	bne.n	800bb22 <_sbrk_r+0x1a>
 800bb1c:	6823      	ldr	r3, [r4, #0]
 800bb1e:	b103      	cbz	r3, 800bb22 <_sbrk_r+0x1a>
 800bb20:	602b      	str	r3, [r5, #0]
 800bb22:	bd38      	pop	{r3, r4, r5, pc}
 800bb24:	20004a90 	.word	0x20004a90

0800bb28 <__sread>:
 800bb28:	b510      	push	{r4, lr}
 800bb2a:	460c      	mov	r4, r1
 800bb2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb30:	f000 f8e8 	bl	800bd04 <_read_r>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	bfab      	itete	ge
 800bb38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb3a:	89a3      	ldrhlt	r3, [r4, #12]
 800bb3c:	181b      	addge	r3, r3, r0
 800bb3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb42:	bfac      	ite	ge
 800bb44:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb46:	81a3      	strhlt	r3, [r4, #12]
 800bb48:	bd10      	pop	{r4, pc}

0800bb4a <__swrite>:
 800bb4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb4e:	461f      	mov	r7, r3
 800bb50:	898b      	ldrh	r3, [r1, #12]
 800bb52:	05db      	lsls	r3, r3, #23
 800bb54:	4605      	mov	r5, r0
 800bb56:	460c      	mov	r4, r1
 800bb58:	4616      	mov	r6, r2
 800bb5a:	d505      	bpl.n	800bb68 <__swrite+0x1e>
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb64:	f000 f87a 	bl	800bc5c <_lseek_r>
 800bb68:	89a3      	ldrh	r3, [r4, #12]
 800bb6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb72:	81a3      	strh	r3, [r4, #12]
 800bb74:	4632      	mov	r2, r6
 800bb76:	463b      	mov	r3, r7
 800bb78:	4628      	mov	r0, r5
 800bb7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb7e:	f000 b829 	b.w	800bbd4 <_write_r>

0800bb82 <__sseek>:
 800bb82:	b510      	push	{r4, lr}
 800bb84:	460c      	mov	r4, r1
 800bb86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb8a:	f000 f867 	bl	800bc5c <_lseek_r>
 800bb8e:	1c43      	adds	r3, r0, #1
 800bb90:	89a3      	ldrh	r3, [r4, #12]
 800bb92:	bf15      	itete	ne
 800bb94:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb9e:	81a3      	strheq	r3, [r4, #12]
 800bba0:	bf18      	it	ne
 800bba2:	81a3      	strhne	r3, [r4, #12]
 800bba4:	bd10      	pop	{r4, pc}

0800bba6 <__sclose>:
 800bba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbaa:	f000 b825 	b.w	800bbf8 <_close_r>

0800bbae <strncmp>:
 800bbae:	b510      	push	{r4, lr}
 800bbb0:	b16a      	cbz	r2, 800bbce <strncmp+0x20>
 800bbb2:	3901      	subs	r1, #1
 800bbb4:	1884      	adds	r4, r0, r2
 800bbb6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bbba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d103      	bne.n	800bbca <strncmp+0x1c>
 800bbc2:	42a0      	cmp	r0, r4
 800bbc4:	d001      	beq.n	800bbca <strncmp+0x1c>
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d1f5      	bne.n	800bbb6 <strncmp+0x8>
 800bbca:	1a98      	subs	r0, r3, r2
 800bbcc:	bd10      	pop	{r4, pc}
 800bbce:	4610      	mov	r0, r2
 800bbd0:	e7fc      	b.n	800bbcc <strncmp+0x1e>
	...

0800bbd4 <_write_r>:
 800bbd4:	b538      	push	{r3, r4, r5, lr}
 800bbd6:	4c07      	ldr	r4, [pc, #28]	; (800bbf4 <_write_r+0x20>)
 800bbd8:	4605      	mov	r5, r0
 800bbda:	4608      	mov	r0, r1
 800bbdc:	4611      	mov	r1, r2
 800bbde:	2200      	movs	r2, #0
 800bbe0:	6022      	str	r2, [r4, #0]
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	f7fb fd28 	bl	8007638 <_write>
 800bbe8:	1c43      	adds	r3, r0, #1
 800bbea:	d102      	bne.n	800bbf2 <_write_r+0x1e>
 800bbec:	6823      	ldr	r3, [r4, #0]
 800bbee:	b103      	cbz	r3, 800bbf2 <_write_r+0x1e>
 800bbf0:	602b      	str	r3, [r5, #0]
 800bbf2:	bd38      	pop	{r3, r4, r5, pc}
 800bbf4:	20004a90 	.word	0x20004a90

0800bbf8 <_close_r>:
 800bbf8:	b538      	push	{r3, r4, r5, lr}
 800bbfa:	4c06      	ldr	r4, [pc, #24]	; (800bc14 <_close_r+0x1c>)
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	4605      	mov	r5, r0
 800bc00:	4608      	mov	r0, r1
 800bc02:	6023      	str	r3, [r4, #0]
 800bc04:	f7fb fd26 	bl	8007654 <_close>
 800bc08:	1c43      	adds	r3, r0, #1
 800bc0a:	d102      	bne.n	800bc12 <_close_r+0x1a>
 800bc0c:	6823      	ldr	r3, [r4, #0]
 800bc0e:	b103      	cbz	r3, 800bc12 <_close_r+0x1a>
 800bc10:	602b      	str	r3, [r5, #0]
 800bc12:	bd38      	pop	{r3, r4, r5, pc}
 800bc14:	20004a90 	.word	0x20004a90

0800bc18 <_fstat_r>:
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	4c07      	ldr	r4, [pc, #28]	; (800bc38 <_fstat_r+0x20>)
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	4605      	mov	r5, r0
 800bc20:	4608      	mov	r0, r1
 800bc22:	4611      	mov	r1, r2
 800bc24:	6023      	str	r3, [r4, #0]
 800bc26:	f7fb fd18 	bl	800765a <_fstat>
 800bc2a:	1c43      	adds	r3, r0, #1
 800bc2c:	d102      	bne.n	800bc34 <_fstat_r+0x1c>
 800bc2e:	6823      	ldr	r3, [r4, #0]
 800bc30:	b103      	cbz	r3, 800bc34 <_fstat_r+0x1c>
 800bc32:	602b      	str	r3, [r5, #0]
 800bc34:	bd38      	pop	{r3, r4, r5, pc}
 800bc36:	bf00      	nop
 800bc38:	20004a90 	.word	0x20004a90

0800bc3c <_isatty_r>:
 800bc3c:	b538      	push	{r3, r4, r5, lr}
 800bc3e:	4c06      	ldr	r4, [pc, #24]	; (800bc58 <_isatty_r+0x1c>)
 800bc40:	2300      	movs	r3, #0
 800bc42:	4605      	mov	r5, r0
 800bc44:	4608      	mov	r0, r1
 800bc46:	6023      	str	r3, [r4, #0]
 800bc48:	f7fb fd0c 	bl	8007664 <_isatty>
 800bc4c:	1c43      	adds	r3, r0, #1
 800bc4e:	d102      	bne.n	800bc56 <_isatty_r+0x1a>
 800bc50:	6823      	ldr	r3, [r4, #0]
 800bc52:	b103      	cbz	r3, 800bc56 <_isatty_r+0x1a>
 800bc54:	602b      	str	r3, [r5, #0]
 800bc56:	bd38      	pop	{r3, r4, r5, pc}
 800bc58:	20004a90 	.word	0x20004a90

0800bc5c <_lseek_r>:
 800bc5c:	b538      	push	{r3, r4, r5, lr}
 800bc5e:	4c07      	ldr	r4, [pc, #28]	; (800bc7c <_lseek_r+0x20>)
 800bc60:	4605      	mov	r5, r0
 800bc62:	4608      	mov	r0, r1
 800bc64:	4611      	mov	r1, r2
 800bc66:	2200      	movs	r2, #0
 800bc68:	6022      	str	r2, [r4, #0]
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	f7fb fcfc 	bl	8007668 <_lseek>
 800bc70:	1c43      	adds	r3, r0, #1
 800bc72:	d102      	bne.n	800bc7a <_lseek_r+0x1e>
 800bc74:	6823      	ldr	r3, [r4, #0]
 800bc76:	b103      	cbz	r3, 800bc7a <_lseek_r+0x1e>
 800bc78:	602b      	str	r3, [r5, #0]
 800bc7a:	bd38      	pop	{r3, r4, r5, pc}
 800bc7c:	20004a90 	.word	0x20004a90

0800bc80 <memmove>:
 800bc80:	4288      	cmp	r0, r1
 800bc82:	b510      	push	{r4, lr}
 800bc84:	eb01 0302 	add.w	r3, r1, r2
 800bc88:	d807      	bhi.n	800bc9a <memmove+0x1a>
 800bc8a:	1e42      	subs	r2, r0, #1
 800bc8c:	4299      	cmp	r1, r3
 800bc8e:	d00a      	beq.n	800bca6 <memmove+0x26>
 800bc90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc94:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bc98:	e7f8      	b.n	800bc8c <memmove+0xc>
 800bc9a:	4283      	cmp	r3, r0
 800bc9c:	d9f5      	bls.n	800bc8a <memmove+0xa>
 800bc9e:	1881      	adds	r1, r0, r2
 800bca0:	1ad2      	subs	r2, r2, r3
 800bca2:	42d3      	cmn	r3, r2
 800bca4:	d100      	bne.n	800bca8 <memmove+0x28>
 800bca6:	bd10      	pop	{r4, pc}
 800bca8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bcb0:	e7f7      	b.n	800bca2 <memmove+0x22>

0800bcb2 <__malloc_lock>:
 800bcb2:	4770      	bx	lr

0800bcb4 <__malloc_unlock>:
 800bcb4:	4770      	bx	lr

0800bcb6 <_realloc_r>:
 800bcb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb8:	4607      	mov	r7, r0
 800bcba:	4614      	mov	r4, r2
 800bcbc:	460e      	mov	r6, r1
 800bcbe:	b921      	cbnz	r1, 800bcca <_realloc_r+0x14>
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bcc6:	f7ff bd73 	b.w	800b7b0 <_malloc_r>
 800bcca:	b922      	cbnz	r2, 800bcd6 <_realloc_r+0x20>
 800bccc:	f7ff fd22 	bl	800b714 <_free_r>
 800bcd0:	4625      	mov	r5, r4
 800bcd2:	4628      	mov	r0, r5
 800bcd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcd6:	f000 f827 	bl	800bd28 <_malloc_usable_size_r>
 800bcda:	42a0      	cmp	r0, r4
 800bcdc:	d20f      	bcs.n	800bcfe <_realloc_r+0x48>
 800bcde:	4621      	mov	r1, r4
 800bce0:	4638      	mov	r0, r7
 800bce2:	f7ff fd65 	bl	800b7b0 <_malloc_r>
 800bce6:	4605      	mov	r5, r0
 800bce8:	2800      	cmp	r0, #0
 800bcea:	d0f2      	beq.n	800bcd2 <_realloc_r+0x1c>
 800bcec:	4631      	mov	r1, r6
 800bcee:	4622      	mov	r2, r4
 800bcf0:	f7fb ff32 	bl	8007b58 <memcpy>
 800bcf4:	4631      	mov	r1, r6
 800bcf6:	4638      	mov	r0, r7
 800bcf8:	f7ff fd0c 	bl	800b714 <_free_r>
 800bcfc:	e7e9      	b.n	800bcd2 <_realloc_r+0x1c>
 800bcfe:	4635      	mov	r5, r6
 800bd00:	e7e7      	b.n	800bcd2 <_realloc_r+0x1c>
	...

0800bd04 <_read_r>:
 800bd04:	b538      	push	{r3, r4, r5, lr}
 800bd06:	4c07      	ldr	r4, [pc, #28]	; (800bd24 <_read_r+0x20>)
 800bd08:	4605      	mov	r5, r0
 800bd0a:	4608      	mov	r0, r1
 800bd0c:	4611      	mov	r1, r2
 800bd0e:	2200      	movs	r2, #0
 800bd10:	6022      	str	r2, [r4, #0]
 800bd12:	461a      	mov	r2, r3
 800bd14:	f7fb fc82 	bl	800761c <_read>
 800bd18:	1c43      	adds	r3, r0, #1
 800bd1a:	d102      	bne.n	800bd22 <_read_r+0x1e>
 800bd1c:	6823      	ldr	r3, [r4, #0]
 800bd1e:	b103      	cbz	r3, 800bd22 <_read_r+0x1e>
 800bd20:	602b      	str	r3, [r5, #0]
 800bd22:	bd38      	pop	{r3, r4, r5, pc}
 800bd24:	20004a90 	.word	0x20004a90

0800bd28 <_malloc_usable_size_r>:
 800bd28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd2c:	1f18      	subs	r0, r3, #4
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	bfbc      	itt	lt
 800bd32:	580b      	ldrlt	r3, [r1, r0]
 800bd34:	18c0      	addlt	r0, r0, r3
 800bd36:	4770      	bx	lr

0800bd38 <_init>:
 800bd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd3a:	bf00      	nop
 800bd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd3e:	bc08      	pop	{r3}
 800bd40:	469e      	mov	lr, r3
 800bd42:	4770      	bx	lr

0800bd44 <_fini>:
 800bd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd46:	bf00      	nop
 800bd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd4a:	bc08      	pop	{r3}
 800bd4c:	469e      	mov	lr, r3
 800bd4e:	4770      	bx	lr
