
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008278  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fb0  08008410  08008410  00018410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093c0  080093c0  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  080093c0  080093c0  000193c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093c8  080093c8  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093c8  080093c8  000193c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093cc  080093cc  000193cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  080093d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000238  08009608  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  08009608  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f877  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003394  00000000  00000000  0003fadf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00011cac  00000000  00000000  00042e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001770  00000000  00000000  00054b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001700  00000000  00000000  00056290  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001a139  00000000  00000000  00057990  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00010a13  00000000  00000000  00071ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0009f5f4  00000000  00000000  000824dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00121ad0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005124  00000000  00000000  00121b4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000238 	.word	0x20000238
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080083f8 	.word	0x080083f8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000023c 	.word	0x2000023c
 80001d4:	080083f8 	.word	0x080083f8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b88:	f000 b972 	b.w	8000e70 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9e08      	ldr	r6, [sp, #32]
 8000baa:	4604      	mov	r4, r0
 8000bac:	4688      	mov	r8, r1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d14b      	bne.n	8000c4a <__udivmoddi4+0xa6>
 8000bb2:	428a      	cmp	r2, r1
 8000bb4:	4615      	mov	r5, r2
 8000bb6:	d967      	bls.n	8000c88 <__udivmoddi4+0xe4>
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	b14a      	cbz	r2, 8000bd2 <__udivmoddi4+0x2e>
 8000bbe:	f1c2 0720 	rsb	r7, r2, #32
 8000bc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc6:	fa20 f707 	lsr.w	r7, r0, r7
 8000bca:	4095      	lsls	r5, r2
 8000bcc:	ea47 0803 	orr.w	r8, r7, r3
 8000bd0:	4094      	lsls	r4, r2
 8000bd2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bd6:	0c23      	lsrs	r3, r4, #16
 8000bd8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bdc:	fa1f fc85 	uxth.w	ip, r5
 8000be0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000be4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bec:	4299      	cmp	r1, r3
 8000bee:	d909      	bls.n	8000c04 <__udivmoddi4+0x60>
 8000bf0:	18eb      	adds	r3, r5, r3
 8000bf2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bf6:	f080 811b 	bcs.w	8000e30 <__udivmoddi4+0x28c>
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	f240 8118 	bls.w	8000e30 <__udivmoddi4+0x28c>
 8000c00:	3f02      	subs	r7, #2
 8000c02:	442b      	add	r3, r5
 8000c04:	1a5b      	subs	r3, r3, r1
 8000c06:	b2a4      	uxth	r4, r4
 8000c08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c14:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c18:	45a4      	cmp	ip, r4
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x8c>
 8000c1c:	192c      	adds	r4, r5, r4
 8000c1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c22:	f080 8107 	bcs.w	8000e34 <__udivmoddi4+0x290>
 8000c26:	45a4      	cmp	ip, r4
 8000c28:	f240 8104 	bls.w	8000e34 <__udivmoddi4+0x290>
 8000c2c:	3802      	subs	r0, #2
 8000c2e:	442c      	add	r4, r5
 8000c30:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c34:	eba4 040c 	sub.w	r4, r4, ip
 8000c38:	2700      	movs	r7, #0
 8000c3a:	b11e      	cbz	r6, 8000c44 <__udivmoddi4+0xa0>
 8000c3c:	40d4      	lsrs	r4, r2
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e9c6 4300 	strd	r4, r3, [r6]
 8000c44:	4639      	mov	r1, r7
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d909      	bls.n	8000c62 <__udivmoddi4+0xbe>
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	f000 80eb 	beq.w	8000e2a <__udivmoddi4+0x286>
 8000c54:	2700      	movs	r7, #0
 8000c56:	e9c6 0100 	strd	r0, r1, [r6]
 8000c5a:	4638      	mov	r0, r7
 8000c5c:	4639      	mov	r1, r7
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	fab3 f783 	clz	r7, r3
 8000c66:	2f00      	cmp	r7, #0
 8000c68:	d147      	bne.n	8000cfa <__udivmoddi4+0x156>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0xd0>
 8000c6e:	4282      	cmp	r2, r0
 8000c70:	f200 80fa 	bhi.w	8000e68 <__udivmoddi4+0x2c4>
 8000c74:	1a84      	subs	r4, r0, r2
 8000c76:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	4698      	mov	r8, r3
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d0e0      	beq.n	8000c44 <__udivmoddi4+0xa0>
 8000c82:	e9c6 4800 	strd	r4, r8, [r6]
 8000c86:	e7dd      	b.n	8000c44 <__udivmoddi4+0xa0>
 8000c88:	b902      	cbnz	r2, 8000c8c <__udivmoddi4+0xe8>
 8000c8a:	deff      	udf	#255	; 0xff
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	2a00      	cmp	r2, #0
 8000c92:	f040 808f 	bne.w	8000db4 <__udivmoddi4+0x210>
 8000c96:	1b49      	subs	r1, r1, r5
 8000c98:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9c:	fa1f f885 	uxth.w	r8, r5
 8000ca0:	2701      	movs	r7, #1
 8000ca2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ca6:	0c23      	lsrs	r3, r4, #16
 8000ca8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb0:	fb08 f10c 	mul.w	r1, r8, ip
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	d907      	bls.n	8000cc8 <__udivmoddi4+0x124>
 8000cb8:	18eb      	adds	r3, r5, r3
 8000cba:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x122>
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	f200 80cd 	bhi.w	8000e60 <__udivmoddi4+0x2bc>
 8000cc6:	4684      	mov	ip, r0
 8000cc8:	1a59      	subs	r1, r3, r1
 8000cca:	b2a3      	uxth	r3, r4
 8000ccc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cd4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cd8:	fb08 f800 	mul.w	r8, r8, r0
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	d907      	bls.n	8000cf0 <__udivmoddi4+0x14c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ce6:	d202      	bcs.n	8000cee <__udivmoddi4+0x14a>
 8000ce8:	45a0      	cmp	r8, r4
 8000cea:	f200 80b6 	bhi.w	8000e5a <__udivmoddi4+0x2b6>
 8000cee:	4618      	mov	r0, r3
 8000cf0:	eba4 0408 	sub.w	r4, r4, r8
 8000cf4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cf8:	e79f      	b.n	8000c3a <__udivmoddi4+0x96>
 8000cfa:	f1c7 0c20 	rsb	ip, r7, #32
 8000cfe:	40bb      	lsls	r3, r7
 8000d00:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d04:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d08:	fa01 f407 	lsl.w	r4, r1, r7
 8000d0c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d10:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d14:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d18:	4325      	orrs	r5, r4
 8000d1a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d1e:	0c2c      	lsrs	r4, r5, #16
 8000d20:	fb08 3319 	mls	r3, r8, r9, r3
 8000d24:	fa1f fa8e 	uxth.w	sl, lr
 8000d28:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d2c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d30:	429c      	cmp	r4, r3
 8000d32:	fa02 f207 	lsl.w	r2, r2, r7
 8000d36:	fa00 f107 	lsl.w	r1, r0, r7
 8000d3a:	d90b      	bls.n	8000d54 <__udivmoddi4+0x1b0>
 8000d3c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d40:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d44:	f080 8087 	bcs.w	8000e56 <__udivmoddi4+0x2b2>
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	f240 8084 	bls.w	8000e56 <__udivmoddi4+0x2b2>
 8000d4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d52:	4473      	add	r3, lr
 8000d54:	1b1b      	subs	r3, r3, r4
 8000d56:	b2ad      	uxth	r5, r5
 8000d58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d5c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d60:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d64:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d68:	45a2      	cmp	sl, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x1da>
 8000d6c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d74:	d26b      	bcs.n	8000e4e <__udivmoddi4+0x2aa>
 8000d76:	45a2      	cmp	sl, r4
 8000d78:	d969      	bls.n	8000e4e <__udivmoddi4+0x2aa>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4474      	add	r4, lr
 8000d7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d82:	fba0 8902 	umull	r8, r9, r0, r2
 8000d86:	eba4 040a 	sub.w	r4, r4, sl
 8000d8a:	454c      	cmp	r4, r9
 8000d8c:	46c2      	mov	sl, r8
 8000d8e:	464b      	mov	r3, r9
 8000d90:	d354      	bcc.n	8000e3c <__udivmoddi4+0x298>
 8000d92:	d051      	beq.n	8000e38 <__udivmoddi4+0x294>
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d069      	beq.n	8000e6c <__udivmoddi4+0x2c8>
 8000d98:	ebb1 050a 	subs.w	r5, r1, sl
 8000d9c:	eb64 0403 	sbc.w	r4, r4, r3
 8000da0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000da4:	40fd      	lsrs	r5, r7
 8000da6:	40fc      	lsrs	r4, r7
 8000da8:	ea4c 0505 	orr.w	r5, ip, r5
 8000dac:	e9c6 5400 	strd	r5, r4, [r6]
 8000db0:	2700      	movs	r7, #0
 8000db2:	e747      	b.n	8000c44 <__udivmoddi4+0xa0>
 8000db4:	f1c2 0320 	rsb	r3, r2, #32
 8000db8:	fa20 f703 	lsr.w	r7, r0, r3
 8000dbc:	4095      	lsls	r5, r2
 8000dbe:	fa01 f002 	lsl.w	r0, r1, r2
 8000dc2:	fa21 f303 	lsr.w	r3, r1, r3
 8000dc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dca:	4338      	orrs	r0, r7
 8000dcc:	0c01      	lsrs	r1, r0, #16
 8000dce:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dd2:	fa1f f885 	uxth.w	r8, r5
 8000dd6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dde:	fb07 f308 	mul.w	r3, r7, r8
 8000de2:	428b      	cmp	r3, r1
 8000de4:	fa04 f402 	lsl.w	r4, r4, r2
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x256>
 8000dea:	1869      	adds	r1, r5, r1
 8000dec:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000df0:	d22f      	bcs.n	8000e52 <__udivmoddi4+0x2ae>
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d92d      	bls.n	8000e52 <__udivmoddi4+0x2ae>
 8000df6:	3f02      	subs	r7, #2
 8000df8:	4429      	add	r1, r5
 8000dfa:	1acb      	subs	r3, r1, r3
 8000dfc:	b281      	uxth	r1, r0
 8000dfe:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e02:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0a:	fb00 f308 	mul.w	r3, r0, r8
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x27e>
 8000e12:	1869      	adds	r1, r5, r1
 8000e14:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e18:	d217      	bcs.n	8000e4a <__udivmoddi4+0x2a6>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d915      	bls.n	8000e4a <__udivmoddi4+0x2a6>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4429      	add	r1, r5
 8000e22:	1ac9      	subs	r1, r1, r3
 8000e24:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e28:	e73b      	b.n	8000ca2 <__udivmoddi4+0xfe>
 8000e2a:	4637      	mov	r7, r6
 8000e2c:	4630      	mov	r0, r6
 8000e2e:	e709      	b.n	8000c44 <__udivmoddi4+0xa0>
 8000e30:	4607      	mov	r7, r0
 8000e32:	e6e7      	b.n	8000c04 <__udivmoddi4+0x60>
 8000e34:	4618      	mov	r0, r3
 8000e36:	e6fb      	b.n	8000c30 <__udivmoddi4+0x8c>
 8000e38:	4541      	cmp	r1, r8
 8000e3a:	d2ab      	bcs.n	8000d94 <__udivmoddi4+0x1f0>
 8000e3c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e40:	eb69 020e 	sbc.w	r2, r9, lr
 8000e44:	3801      	subs	r0, #1
 8000e46:	4613      	mov	r3, r2
 8000e48:	e7a4      	b.n	8000d94 <__udivmoddi4+0x1f0>
 8000e4a:	4660      	mov	r0, ip
 8000e4c:	e7e9      	b.n	8000e22 <__udivmoddi4+0x27e>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	e795      	b.n	8000d7e <__udivmoddi4+0x1da>
 8000e52:	4667      	mov	r7, ip
 8000e54:	e7d1      	b.n	8000dfa <__udivmoddi4+0x256>
 8000e56:	4681      	mov	r9, r0
 8000e58:	e77c      	b.n	8000d54 <__udivmoddi4+0x1b0>
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	442c      	add	r4, r5
 8000e5e:	e747      	b.n	8000cf0 <__udivmoddi4+0x14c>
 8000e60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e64:	442b      	add	r3, r5
 8000e66:	e72f      	b.n	8000cc8 <__udivmoddi4+0x124>
 8000e68:	4638      	mov	r0, r7
 8000e6a:	e708      	b.n	8000c7e <__udivmoddi4+0xda>
 8000e6c:	4637      	mov	r7, r6
 8000e6e:	e6e9      	b.n	8000c44 <__udivmoddi4+0xa0>

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <strlen>:
 8000e74:	4603      	mov	r3, r0
 8000e76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e7a:	2a00      	cmp	r2, #0
 8000e7c:	d1fb      	bne.n	8000e76 <strlen+0x2>
 8000e7e:	1a18      	subs	r0, r3, r0
 8000e80:	3801      	subs	r0, #1
 8000e82:	4770      	bx	lr

08000e84 <__aeabi_dcmpun>:
 8000e84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e8c:	d102      	bne.n	8000e94 <__aeabi_dcmpun+0x10>
 8000e8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e92:	d10a      	bne.n	8000eaa <__aeabi_dcmpun+0x26>
 8000e94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e9c:	d102      	bne.n	8000ea4 <__aeabi_dcmpun+0x20>
 8000e9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ea2:	d102      	bne.n	8000eaa <__aeabi_dcmpun+0x26>
 8000ea4:	f04f 0000 	mov.w	r0, #0
 8000ea8:	4770      	bx	lr
 8000eaa:	f04f 0001 	mov.w	r0, #1
 8000eae:	4770      	bx	lr

08000eb0 <imu_get_roll>:

long gyro[3], accel[3];

float imu_get_roll(){
return roll;
}
 8000eb0:	4b01      	ldr	r3, [pc, #4]	; (8000eb8 <imu_get_roll+0x8>)
 8000eb2:	ed93 0a00 	vldr	s0, [r3]
 8000eb6:	4770      	bx	lr
 8000eb8:	20000370 	.word	0x20000370

08000ebc <imu_get_pitch>:
float imu_get_pitch(){
return pitch;
}
 8000ebc:	4b01      	ldr	r3, [pc, #4]	; (8000ec4 <imu_get_pitch+0x8>)
 8000ebe:	ed93 0a00 	vldr	s0, [r3]
 8000ec2:	4770      	bx	lr
 8000ec4:	2000036c 	.word	0x2000036c

08000ec8 <imu_get_yaw>:
float imu_get_yaw(){
return yaw;
}
 8000ec8:	4b01      	ldr	r3, [pc, #4]	; (8000ed0 <imu_get_yaw+0x8>)
 8000eca:	ed93 0a00 	vldr	s0, [r3]
 8000ece:	4770      	bx	lr
 8000ed0:	20000360 	.word	0x20000360

08000ed4 <imu_setLPF>:
	}
	return 0;
}

inv_error_t imu_setLPF(unsigned short lpf)
{
 8000ed4:	b508      	push	{r3, lr}
	return mpu_set_lpf(lpf);
 8000ed6:	f002 fe81 	bl	8003bdc <mpu_set_lpf>
}
 8000eda:	bd08      	pop	{r3, pc}

08000edc <imu_setSampleRate>:
	}
	return 0;
}

inv_error_t imu_setSampleRate(unsigned short rate)
{
 8000edc:	b508      	push	{r3, lr}
    return mpu_set_sample_rate(rate);
 8000ede:	f003 fa67 	bl	80043b0 <mpu_set_sample_rate>
}
 8000ee2:	bd08      	pop	{r3, pc}

08000ee4 <imu_setCompassSampleRate>:
	}
	return 0;
}

inv_error_t imu_setCompassSampleRate(unsigned short rate)
{
 8000ee4:	b508      	push	{r3, lr}
	return mpu_set_compass_sample_rate(rate);
 8000ee6:	f002 fec5 	bl	8003c74 <mpu_set_compass_sample_rate>
}
 8000eea:	bd08      	pop	{r3, pc}

08000eec <imu_getGyroSens>:

	return 0;
}

float imu_getGyroSens(void)
{
 8000eec:	b500      	push	{lr}
 8000eee:	b083      	sub	sp, #12
	float sens;
	if (mpu_get_gyro_sens(&sens) == INV_SUCCESS)
 8000ef0:	a801      	add	r0, sp, #4
 8000ef2:	f002 fef3 	bl	8003cdc <mpu_get_gyro_sens>
 8000ef6:	b920      	cbnz	r0, 8000f02 <imu_getGyroSens+0x16>
	{
		return sens;
 8000ef8:	ed9d 0a01 	vldr	s0, [sp, #4]
	}
	return 0;
}
 8000efc:	b003      	add	sp, #12
 8000efe:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
 8000f02:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8000f08 <imu_getGyroSens+0x1c>
 8000f06:	e7f9      	b.n	8000efc <imu_getGyroSens+0x10>
 8000f08:	00000000 	.word	0x00000000

08000f0c <imu_setGyroFSR>:
{
 8000f0c:	b510      	push	{r4, lr}
	err = mpu_set_gyro_fsr(fsr);
 8000f0e:	f002 fdab 	bl	8003a68 <mpu_set_gyro_fsr>
	if (err == INV_SUCCESS)
 8000f12:	4604      	mov	r4, r0
 8000f14:	b108      	cbz	r0, 8000f1a <imu_setGyroFSR+0xe>
}
 8000f16:	4620      	mov	r0, r4
 8000f18:	bd10      	pop	{r4, pc}
		_gSense = imu_getGyroSens();
 8000f1a:	f7ff ffe7 	bl	8000eec <imu_getGyroSens>
 8000f1e:	4b02      	ldr	r3, [pc, #8]	; (8000f28 <imu_setGyroFSR+0x1c>)
 8000f20:	ed83 0a00 	vstr	s0, [r3]
	return err;
 8000f24:	e7f7      	b.n	8000f16 <imu_setGyroFSR+0xa>
 8000f26:	bf00      	nop
 8000f28:	20000384 	.word	0x20000384

08000f2c <imu_getAccelSens>:

unsigned short imu_getAccelSens(void)
{
 8000f2c:	b500      	push	{lr}
 8000f2e:	b083      	sub	sp, #12
	unsigned short sens;
	if (mpu_get_accel_sens(&sens) == INV_SUCCESS)
 8000f30:	f10d 0006 	add.w	r0, sp, #6
 8000f34:	f002 fef8 	bl	8003d28 <mpu_get_accel_sens>
 8000f38:	b920      	cbnz	r0, 8000f44 <imu_getAccelSens+0x18>
	{
		return sens;
 8000f3a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
	}
	return 0;
}
 8000f3e:	b003      	add	sp, #12
 8000f40:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
 8000f44:	2000      	movs	r0, #0
 8000f46:	e7fa      	b.n	8000f3e <imu_getAccelSens+0x12>

08000f48 <imu_setAccelFSR>:
{
 8000f48:	b510      	push	{r4, lr}
	err = mpu_set_accel_fsr(fsr);
 8000f4a:	f002 fdfb 	bl	8003b44 <mpu_set_accel_fsr>
	if (err == INV_SUCCESS)
 8000f4e:	4604      	mov	r4, r0
 8000f50:	b108      	cbz	r0, 8000f56 <imu_setAccelFSR+0xe>
}
 8000f52:	4620      	mov	r0, r4
 8000f54:	bd10      	pop	{r4, pc}
		_aSense = imu_getAccelSens();
 8000f56:	f7ff ffe9 	bl	8000f2c <imu_getAccelSens>
 8000f5a:	4b01      	ldr	r3, [pc, #4]	; (8000f60 <imu_setAccelFSR+0x18>)
 8000f5c:	8018      	strh	r0, [r3, #0]
	return err;
 8000f5e:	e7f8      	b.n	8000f52 <imu_setAccelFSR+0xa>
 8000f60:	200003b8 	.word	0x200003b8

08000f64 <imu_fifoAvailable>:
{
	return mpu_reset_fifo();
}

unsigned short imu_fifoAvailable(void)
{
 8000f64:	b500      	push	{lr}
 8000f66:	b083      	sub	sp, #12
	unsigned char fifoH, fifoL;

	if (mpu_read_reg(MPU9250_FIFO_COUNTH, &fifoH) != INV_SUCCESS)
 8000f68:	f10d 0107 	add.w	r1, sp, #7
 8000f6c:	2072      	movs	r0, #114	; 0x72
 8000f6e:	f002 fc5f 	bl	8003830 <mpu_read_reg>
 8000f72:	b118      	cbz	r0, 8000f7c <imu_fifoAvailable+0x18>
		return 0;
 8000f74:	2000      	movs	r0, #0
	if (mpu_read_reg(MPU9250_FIFO_COUNTL, &fifoL) != INV_SUCCESS)
		return 0;

	return (fifoH << 8 ) | fifoL;
}
 8000f76:	b003      	add	sp, #12
 8000f78:	f85d fb04 	ldr.w	pc, [sp], #4
	if (mpu_read_reg(MPU9250_FIFO_COUNTL, &fifoL) != INV_SUCCESS)
 8000f7c:	f10d 0106 	add.w	r1, sp, #6
 8000f80:	2073      	movs	r0, #115	; 0x73
 8000f82:	f002 fc55 	bl	8003830 <mpu_read_reg>
 8000f86:	b930      	cbnz	r0, 8000f96 <imu_fifoAvailable+0x32>
	return (fifoH << 8 ) | fifoL;
 8000f88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000f8c:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8000f90:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8000f94:	e7ef      	b.n	8000f76 <imu_fifoAvailable+0x12>
		return 0;
 8000f96:	2000      	movs	r0, #0
 8000f98:	e7ed      	b.n	8000f76 <imu_fifoAvailable+0x12>

08000f9a <imu_setSensors>:

	return INV_SUCCESS;
}

inv_error_t imu_setSensors(unsigned char sensors)
{
 8000f9a:	b508      	push	{r3, lr}
	return mpu_set_sensors(sensors);
 8000f9c:	f003 fa5e 	bl	800445c <mpu_set_sensors>
}
 8000fa0:	bd08      	pop	{r3, pc}
	...

08000fa4 <imu_begin>:
{
 8000fa4:	b510      	push	{r4, lr}
	result = mpu_init(&int_param);
 8000fa6:	4668      	mov	r0, sp
 8000fa8:	f003 fb24 	bl	80045f4 <mpu_init>
	if (result)
 8000fac:	4604      	mov	r4, r0
 8000fae:	b108      	cbz	r0, 8000fb4 <imu_begin+0x10>
}
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	bd10      	pop	{r4, pc}
	mpu_set_bypass(1); // Place all slaves (including compass) on primary bus
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f002 ff6f 	bl	8003e98 <mpu_set_bypass>
	imu_setSensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
 8000fba:	2079      	movs	r0, #121	; 0x79
 8000fbc:	f7ff ffed 	bl	8000f9a <imu_setSensors>
	_gSense = imu_getGyroSens();
 8000fc0:	f7ff ff94 	bl	8000eec <imu_getGyroSens>
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <imu_begin+0x30>)
 8000fc6:	ed83 0a00 	vstr	s0, [r3]
	_aSense = imu_getAccelSens();
 8000fca:	f7ff ffaf 	bl	8000f2c <imu_getAccelSens>
 8000fce:	4b02      	ldr	r3, [pc, #8]	; (8000fd8 <imu_begin+0x34>)
 8000fd0:	8018      	strh	r0, [r3, #0]
	return result;
 8000fd2:	e7ed      	b.n	8000fb0 <imu_begin+0xc>
 8000fd4:	20000384 	.word	0x20000384
 8000fd8:	200003b8 	.word	0x200003b8

08000fdc <imu_updateCompass>:
	gz = data[Z_AXIS];
	return INV_SUCCESS;
}

int imu_updateCompass(void)
{
 8000fdc:	b500      	push	{lr}
 8000fde:	b083      	sub	sp, #12
	short data[3];

	if (mpu_get_compass_reg(data, &time))
 8000fe0:	490a      	ldr	r1, [pc, #40]	; (800100c <imu_updateCompass+0x30>)
 8000fe2:	4668      	mov	r0, sp
 8000fe4:	f003 fcb4 	bl	8004950 <mpu_get_compass_reg>
 8000fe8:	b970      	cbnz	r0, 8001008 <imu_updateCompass+0x2c>
	{
		return INV_ERROR;
	}
	mx = data[X_AXIS];
 8000fea:	f9bd 2000 	ldrsh.w	r2, [sp]
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <imu_updateCompass+0x34>)
 8000ff0:	601a      	str	r2, [r3, #0]
	my = data[Y_AXIS];
 8000ff2:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <imu_updateCompass+0x38>)
 8000ff8:	601a      	str	r2, [r3, #0]
	mz = data[Z_AXIS];
 8000ffa:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <imu_updateCompass+0x3c>)
 8001000:	601a      	str	r2, [r3, #0]
	return INV_SUCCESS;
}
 8001002:	b003      	add	sp, #12
 8001004:	f85d fb04 	ldr.w	pc, [sp], #4
		return INV_ERROR;
 8001008:	2020      	movs	r0, #32
 800100a:	e7fa      	b.n	8001002 <imu_updateCompass+0x26>
 800100c:	200003b0 	.word	0x200003b0
 8001010:	20000380 	.word	0x20000380
 8001014:	20000344 	.word	0x20000344
 8001018:	2000035c 	.word	0x2000035c

0800101c <imu_dmpLoad>:

	return mpu_set_dmp_state(1);
}

inv_error_t imu_dmpLoad(void)
{
 800101c:	b508      	push	{r3, lr}
	return dmp_load_motion_driver_firmware();
 800101e:	f003 fd15 	bl	8004a4c <dmp_load_motion_driver_firmware>
}
 8001022:	bd08      	pop	{r3, pc}

08001024 <imu_dmpSetFifoRate>:

	return 0;
}

inv_error_t imu_dmpSetFifoRate(unsigned short rate)
{
 8001024:	b508      	push	{r3, lr}
	if (rate > MAX_DMP_SAMPLE_RATE) rate = MAX_DMP_SAMPLE_RATE;
 8001026:	28c8      	cmp	r0, #200	; 0xc8
 8001028:	d900      	bls.n	800102c <imu_dmpSetFifoRate+0x8>
 800102a:	20c8      	movs	r0, #200	; 0xc8
	return dmp_set_fifo_rate(rate);
 800102c:	f003 fd1a 	bl	8004a64 <dmp_set_fifo_rate>
}
 8001030:	bd08      	pop	{r3, pc}
	...

08001034 <imu_dmpUpdateFifo>:

inv_error_t imu_dmpUpdateFifo(void)
{
 8001034:	b500      	push	{lr}
 8001036:	b08d      	sub	sp, #52	; 0x34
	long quat[4];
	unsigned long timestamp;
	short sensors;
	unsigned char more;

	if (dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors, &more)
 8001038:	f10d 0309 	add.w	r3, sp, #9
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	f10d 030a 	add.w	r3, sp, #10
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	ab03      	add	r3, sp, #12
 8001046:	aa04      	add	r2, sp, #16
 8001048:	a908      	add	r1, sp, #32
 800104a:	a80a      	add	r0, sp, #40	; 0x28
 800104c:	f004 f84e 	bl	80050ec <dmp_read_fifo>
 8001050:	2800      	cmp	r0, #0
 8001052:	d13b      	bne.n	80010cc <imu_dmpUpdateFifo+0x98>
		   != INV_SUCCESS)
    {
	   return INV_ERROR;
    }

	if (sensors & INV_XYZ_ACCEL)
 8001054:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8001058:	f013 0f08 	tst.w	r3, #8
 800105c:	d00b      	beq.n	8001076 <imu_dmpUpdateFifo+0x42>
	{
		ax = accel[X_AXIS];
 800105e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8001062:	4a1b      	ldr	r2, [pc, #108]	; (80010d0 <imu_dmpUpdateFifo+0x9c>)
 8001064:	6011      	str	r1, [r2, #0]
		ay = accel[Y_AXIS];
 8001066:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 800106a:	4a1a      	ldr	r2, [pc, #104]	; (80010d4 <imu_dmpUpdateFifo+0xa0>)
 800106c:	6011      	str	r1, [r2, #0]
		az = accel[Z_AXIS];
 800106e:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 8001072:	4a19      	ldr	r2, [pc, #100]	; (80010d8 <imu_dmpUpdateFifo+0xa4>)
 8001074:	6011      	str	r1, [r2, #0]
	}
	if (sensors & INV_X_GYRO)
 8001076:	f013 0f40 	tst.w	r3, #64	; 0x40
 800107a:	d003      	beq.n	8001084 <imu_dmpUpdateFifo+0x50>
		gx = gyro[X_AXIS];
 800107c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8001080:	4a16      	ldr	r2, [pc, #88]	; (80010dc <imu_dmpUpdateFifo+0xa8>)
 8001082:	6011      	str	r1, [r2, #0]
	if (sensors & INV_Y_GYRO)
 8001084:	f013 0f20 	tst.w	r3, #32
 8001088:	d003      	beq.n	8001092 <imu_dmpUpdateFifo+0x5e>
		gy = gyro[Y_AXIS];
 800108a:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 800108e:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <imu_dmpUpdateFifo+0xac>)
 8001090:	6011      	str	r1, [r2, #0]
	if (sensors & INV_Z_GYRO)
 8001092:	f013 0f10 	tst.w	r3, #16
 8001096:	d003      	beq.n	80010a0 <imu_dmpUpdateFifo+0x6c>
		gz = gyro[Z_AXIS];
 8001098:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 800109c:	4a11      	ldr	r2, [pc, #68]	; (80010e4 <imu_dmpUpdateFifo+0xb0>)
 800109e:	6011      	str	r1, [r2, #0]
	if (sensors & INV_WXYZ_QUAT)
 80010a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80010a4:	d00b      	beq.n	80010be <imu_dmpUpdateFifo+0x8a>
	{
		qw = quat[0];
 80010a6:	9a04      	ldr	r2, [sp, #16]
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <imu_dmpUpdateFifo+0xb4>)
 80010aa:	601a      	str	r2, [r3, #0]
		qx = quat[1];
 80010ac:	9a05      	ldr	r2, [sp, #20]
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <imu_dmpUpdateFifo+0xb8>)
 80010b0:	601a      	str	r2, [r3, #0]
		qy = quat[2];
 80010b2:	9a06      	ldr	r2, [sp, #24]
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <imu_dmpUpdateFifo+0xbc>)
 80010b6:	601a      	str	r2, [r3, #0]
		qz = quat[3];
 80010b8:	9a07      	ldr	r2, [sp, #28]
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <imu_dmpUpdateFifo+0xc0>)
 80010bc:	601a      	str	r2, [r3, #0]
	}

	time = timestamp;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <imu_dmpUpdateFifo+0xc4>)
 80010c0:	9a03      	ldr	r2, [sp, #12]
 80010c2:	601a      	str	r2, [r3, #0]

	return INV_SUCCESS;
 80010c4:	2000      	movs	r0, #0
}
 80010c6:	b00d      	add	sp, #52	; 0x34
 80010c8:	f85d fb04 	ldr.w	pc, [sp], #4
	   return INV_ERROR;
 80010cc:	2020      	movs	r0, #32
 80010ce:	e7fa      	b.n	80010c6 <imu_dmpUpdateFifo+0x92>
 80010d0:	20000348 	.word	0x20000348
 80010d4:	2000037c 	.word	0x2000037c
 80010d8:	20000334 	.word	0x20000334
 80010dc:	20000378 	.word	0x20000378
 80010e0:	20000330 	.word	0x20000330
 80010e4:	20000354 	.word	0x20000354
 80010e8:	20000388 	.word	0x20000388
 80010ec:	200003ac 	.word	0x200003ac
 80010f0:	200003b4 	.word	0x200003b4
 80010f4:	200003a8 	.word	0x200003a8
 80010f8:	200003b0 	.word	0x200003b0

080010fc <imu_dmpEnableFeatures>:

inv_error_t imu_dmpEnableFeatures(unsigned short mask)
{
 80010fc:	b508      	push	{r3, lr}
	unsigned short enMask = 0;
	enMask |= mask;
	// Combat known issue where fifo sample rate is incorrect
	// unless tap is enabled in the DMP.
	enMask |= DMP_FEATURE_TAP;
	return dmp_enable_feature(enMask);
 80010fe:	f040 0001 	orr.w	r0, r0, #1
 8001102:	f003 fee7 	bl	8004ed4 <dmp_enable_feature>
}
 8001106:	bd08      	pop	{r3, pc}

08001108 <imu_qToFloat>:
{
	return qToFloat(axis, 30);
}

float imu_qToFloat(long number, unsigned char q)
{
 8001108:	b410      	push	{r4}
	unsigned long mask = 0;
	for (int i=0; i<q; i++)
 800110a:	2300      	movs	r3, #0
	unsigned long mask = 0;
 800110c:	461c      	mov	r4, r3
	for (int i=0; i<q; i++)
 800110e:	e003      	b.n	8001118 <imu_qToFloat+0x10>
	{
		mask |= (1<<i);
 8001110:	2201      	movs	r2, #1
 8001112:	409a      	lsls	r2, r3
 8001114:	4314      	orrs	r4, r2
	for (int i=0; i<q; i++)
 8001116:	3301      	adds	r3, #1
 8001118:	4299      	cmp	r1, r3
 800111a:	dcf9      	bgt.n	8001110 <imu_qToFloat+0x8>
	}
	return (number >> q) + ((number & mask) / (float) (2<<(q-1)));
 800111c:	fa40 f301 	asr.w	r3, r0, r1
 8001120:	ee00 3a10 	vmov	s0, r3
 8001124:	4020      	ands	r0, r4
 8001126:	1e4a      	subs	r2, r1, #1
 8001128:	2302      	movs	r3, #2
 800112a:	fa03 f202 	lsl.w	r2, r3, r2
 800112e:	ee07 2a90 	vmov	s15, r2
 8001132:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001136:	ee07 0a90 	vmov	s15, r0
 800113a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800113e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001142:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
 8001146:	ee30 0a26 	vadd.f32	s0, s0, s13
 800114a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800114e:	4770      	bx	lr

08001150 <imu_computeEulerAngles>:

void imu_computeEulerAngles(bool degrees)
{
 8001150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001152:	ed2d 8b06 	vpush	{d8-d10}
 8001156:	4605      	mov	r5, r0
    float dqw = imu_qToFloat(qw, 30);
 8001158:	211e      	movs	r1, #30
 800115a:	4b63      	ldr	r3, [pc, #396]	; (80012e8 <imu_computeEulerAngles+0x198>)
 800115c:	6818      	ldr	r0, [r3, #0]
 800115e:	f7ff ffd3 	bl	8001108 <imu_qToFloat>
 8001162:	eeb0 aa40 	vmov.f32	s20, s0
    float dqx = imu_qToFloat(qx, 30);
 8001166:	211e      	movs	r1, #30
 8001168:	4b60      	ldr	r3, [pc, #384]	; (80012ec <imu_computeEulerAngles+0x19c>)
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	f7ff ffcc 	bl	8001108 <imu_qToFloat>
 8001170:	eeb0 8a40 	vmov.f32	s16, s0
    float dqy = imu_qToFloat(qy, 30);
 8001174:	211e      	movs	r1, #30
 8001176:	4b5e      	ldr	r3, [pc, #376]	; (80012f0 <imu_computeEulerAngles+0x1a0>)
 8001178:	6818      	ldr	r0, [r3, #0]
 800117a:	f7ff ffc5 	bl	8001108 <imu_qToFloat>
 800117e:	eef0 8a40 	vmov.f32	s17, s0
    float dqz = imu_qToFloat(qz, 30);
 8001182:	211e      	movs	r1, #30
 8001184:	4b5b      	ldr	r3, [pc, #364]	; (80012f4 <imu_computeEulerAngles+0x1a4>)
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	f7ff ffbe 	bl	8001108 <imu_qToFloat>

    float ysqr = dqy * dqy;
 800118c:	ee28 6aa8 	vmul.f32	s12, s17, s17
    float t0 = -2.0f * (ysqr + dqz * dqz) + 1.0f;
 8001190:	ee20 9a00 	vmul.f32	s18, s0, s0
 8001194:	ee39 9a06 	vadd.f32	s18, s18, s12
 8001198:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 800119c:	ee29 9a26 	vmul.f32	s18, s18, s13
 80011a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011a4:	ee39 9a07 	vadd.f32	s18, s18, s14
    float t1 = +2.0f * (dqx * dqy - dqw * dqz);
 80011a8:	ee68 9a28 	vmul.f32	s19, s16, s17
 80011ac:	ee6a 7a00 	vmul.f32	s15, s20, s0
 80011b0:	ee79 9ae7 	vsub.f32	s19, s19, s15
 80011b4:	ee79 9aa9 	vadd.f32	s19, s19, s19
    float t2 = -2.0f * (dqx * dqz + dqw * dqy);
 80011b8:	ee68 7a00 	vmul.f32	s15, s16, s0
 80011bc:	ee6a 5a28 	vmul.f32	s11, s20, s17
 80011c0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80011c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
    float t3 = +2.0f * (dqy * dqz - dqw * dqx);
 80011c8:	ee68 8a80 	vmul.f32	s17, s17, s0
 80011cc:	ee2a aa08 	vmul.f32	s20, s20, s16
 80011d0:	ee78 8aca 	vsub.f32	s17, s17, s20
 80011d4:	ee78 8aa8 	vadd.f32	s17, s17, s17
    float t4 = -2.0f * (dqx * dqx + ysqr) + 1.0f;
 80011d8:	ee28 8a08 	vmul.f32	s16, s16, s16
 80011dc:	ee38 8a06 	vadd.f32	s16, s16, s12
 80011e0:	ee28 8a26 	vmul.f32	s16, s16, s13
 80011e4:	ee38 8a07 	vadd.f32	s16, s16, s14

	// Keep t2 within range of asin (-1, 1)
    t2 = t2 > 1.0f ? 1.0f : t2;
 80011e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f0:	dd01      	ble.n	80011f6 <imu_computeEulerAngles+0xa6>
 80011f2:	eef0 7a47 	vmov.f32	s15, s14
    t2 = t2 < -1.0f ? -1.0f : t2;
 80011f6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80011fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001202:	d467      	bmi.n	80012d4 <imu_computeEulerAngles+0x184>

    pitch = asin(t2) * 2;
 8001204:	ee17 0a90 	vmov	r0, s15
 8001208:	f7ff f94a 	bl	80004a0 <__aeabi_f2d>
 800120c:	ec41 0b10 	vmov	d0, r0, r1
 8001210:	f006 fb42 	bl	8007898 <asin>
 8001214:	ec51 0b10 	vmov	r0, r1, d0
 8001218:	ee10 2a10 	vmov	r2, s0
 800121c:	460b      	mov	r3, r1
 800121e:	f7fe ffe1 	bl	80001e4 <__adddf3>
 8001222:	f7ff fc57 	bl	8000ad4 <__aeabi_d2f>
 8001226:	4b34      	ldr	r3, [pc, #208]	; (80012f8 <imu_computeEulerAngles+0x1a8>)
 8001228:	6018      	str	r0, [r3, #0]
    roll = atan2(t3, t4);
 800122a:	ee18 0a10 	vmov	r0, s16
 800122e:	f7ff f937 	bl	80004a0 <__aeabi_f2d>
 8001232:	4606      	mov	r6, r0
 8001234:	460f      	mov	r7, r1
 8001236:	ee18 0a90 	vmov	r0, s17
 800123a:	f7ff f931 	bl	80004a0 <__aeabi_f2d>
 800123e:	ec47 6b11 	vmov	d1, r6, r7
 8001242:	ec41 0b10 	vmov	d0, r0, r1
 8001246:	f006 fb7f 	bl	8007948 <atan2>
 800124a:	ec51 0b10 	vmov	r0, r1, d0
 800124e:	f7ff fc41 	bl	8000ad4 <__aeabi_d2f>
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <imu_computeEulerAngles+0x1ac>)
 8001254:	6018      	str	r0, [r3, #0]
    yaw = atan2(t1, t0);
 8001256:	ee19 0a10 	vmov	r0, s18
 800125a:	f7ff f921 	bl	80004a0 <__aeabi_f2d>
 800125e:	4606      	mov	r6, r0
 8001260:	460f      	mov	r7, r1
 8001262:	ee19 0a90 	vmov	r0, s19
 8001266:	f7ff f91b 	bl	80004a0 <__aeabi_f2d>
 800126a:	ec47 6b11 	vmov	d1, r6, r7
 800126e:	ec41 0b10 	vmov	d0, r0, r1
 8001272:	f006 fb69 	bl	8007948 <atan2>
 8001276:	ec51 0b10 	vmov	r0, r1, d0
 800127a:	f7ff fc2b 	bl	8000ad4 <__aeabi_d2f>
 800127e:	4604      	mov	r4, r0
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <imu_computeEulerAngles+0x1b0>)
 8001282:	6018      	str	r0, [r3, #0]

	if (degrees)
 8001284:	b31d      	cbz	r5, 80012ce <imu_computeEulerAngles+0x17e>
	{
		pitch *= (180.0 / PI);
 8001286:	4d1c      	ldr	r5, [pc, #112]	; (80012f8 <imu_computeEulerAngles+0x1a8>)
 8001288:	6828      	ldr	r0, [r5, #0]
 800128a:	f7ff f909 	bl	80004a0 <__aeabi_f2d>
 800128e:	a314      	add	r3, pc, #80	; (adr r3, 80012e0 <imu_computeEulerAngles+0x190>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	f7ff f95c 	bl	8000550 <__aeabi_dmul>
 8001298:	f7ff fc1c 	bl	8000ad4 <__aeabi_d2f>
 800129c:	6028      	str	r0, [r5, #0]
		roll *= (180.0 / PI);
 800129e:	4d17      	ldr	r5, [pc, #92]	; (80012fc <imu_computeEulerAngles+0x1ac>)
 80012a0:	6828      	ldr	r0, [r5, #0]
 80012a2:	f7ff f8fd 	bl	80004a0 <__aeabi_f2d>
 80012a6:	a30e      	add	r3, pc, #56	; (adr r3, 80012e0 <imu_computeEulerAngles+0x190>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f950 	bl	8000550 <__aeabi_dmul>
 80012b0:	f7ff fc10 	bl	8000ad4 <__aeabi_d2f>
 80012b4:	6028      	str	r0, [r5, #0]
		yaw *= (180.0 / PI);
 80012b6:	4620      	mov	r0, r4
 80012b8:	f7ff f8f2 	bl	80004a0 <__aeabi_f2d>
 80012bc:	a308      	add	r3, pc, #32	; (adr r3, 80012e0 <imu_computeEulerAngles+0x190>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7ff f945 	bl	8000550 <__aeabi_dmul>
 80012c6:	f7ff fc05 	bl	8000ad4 <__aeabi_d2f>
 80012ca:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <imu_computeEulerAngles+0x1b0>)
 80012cc:	6018      	str	r0, [r3, #0]
		//Commented out below as we want angles in ± around 0
//		if (pitch < 0) pitch = 360.0 + pitch;
//		if (roll < 0) roll = 360.0 + roll;
//		if (yaw < 0) yaw = 360.0 + yaw;
	}
}
 80012ce:	ecbd 8b06 	vpop	{d8-d10}
 80012d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    t2 = t2 < -1.0f ? -1.0f : t2;
 80012d4:	eef0 7a47 	vmov.f32	s15, s14
 80012d8:	e794      	b.n	8001204 <imu_computeEulerAngles+0xb4>
 80012da:	bf00      	nop
 80012dc:	f3af 8000 	nop.w
 80012e0:	0d03cf26 	.word	0x0d03cf26
 80012e4:	404ca5dc 	.word	0x404ca5dc
 80012e8:	20000388 	.word	0x20000388
 80012ec:	200003ac 	.word	0x200003ac
 80012f0:	200003b4 	.word	0x200003b4
 80012f4:	200003a8 	.word	0x200003a8
 80012f8:	2000036c 	.word	0x2000036c
 80012fc:	20000370 	.word	0x20000370
 8001300:	20000360 	.word	0x20000360
 8001304:	00000000 	.word	0x00000000

08001308 <imu_computeCompassHeading>:

float imu_computeCompassHeading(void)
{
 8001308:	b538      	push	{r3, r4, r5, lr}
	if (my == 0)
 800130a:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <imu_computeCompassHeading+0xc8>)
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	bb30      	cbnz	r0, 800135e <imu_computeCompassHeading+0x56>
		heading = (mx < 0) ? PI : 0;
 8001310:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <imu_computeCompassHeading+0xcc>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db20      	blt.n	800135a <imu_computeCompassHeading+0x52>
 8001318:	2200      	movs	r2, #0
 800131a:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <imu_computeCompassHeading+0xd0>)
 800131c:	601a      	str	r2, [r3, #0]
	else
		heading = atan2(mx, my);

	if (heading > PI) heading -= (2 * PI);
 800131e:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <imu_computeCompassHeading+0xd0>)
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80013dc <imu_computeCompassHeading+0xd4>
 8001328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001330:	dc2a      	bgt.n	8001388 <imu_computeCompassHeading+0x80>
	else if (heading < -PI) heading += (2 * PI);
 8001332:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80013e0 <imu_computeCompassHeading+0xd8>
 8001336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133e:	d438      	bmi.n	80013b2 <imu_computeCompassHeading+0xaa>
	else if (heading < 0) heading += 2 * PI;
 8001340:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001348:	d524      	bpl.n	8001394 <imu_computeCompassHeading+0x8c>
 800134a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80013e4 <imu_computeCompassHeading+0xdc>
 800134e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001352:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <imu_computeCompassHeading+0xd0>)
 8001354:	edc3 7a00 	vstr	s15, [r3]
 8001358:	e01c      	b.n	8001394 <imu_computeCompassHeading+0x8c>
		heading = (mx < 0) ? PI : 0;
 800135a:	4a23      	ldr	r2, [pc, #140]	; (80013e8 <imu_computeCompassHeading+0xe0>)
 800135c:	e7dd      	b.n	800131a <imu_computeCompassHeading+0x12>
		heading = atan2(mx, my);
 800135e:	f7ff f88d 	bl	800047c <__aeabi_i2d>
 8001362:	4604      	mov	r4, r0
 8001364:	460d      	mov	r5, r1
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <imu_computeCompassHeading+0xcc>)
 8001368:	6818      	ldr	r0, [r3, #0]
 800136a:	f7ff f887 	bl	800047c <__aeabi_i2d>
 800136e:	ec45 4b11 	vmov	d1, r4, r5
 8001372:	ec41 0b10 	vmov	d0, r0, r1
 8001376:	f006 fae7 	bl	8007948 <atan2>
 800137a:	ec51 0b10 	vmov	r0, r1, d0
 800137e:	f7ff fba9 	bl	8000ad4 <__aeabi_d2f>
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <imu_computeCompassHeading+0xd0>)
 8001384:	6018      	str	r0, [r3, #0]
 8001386:	e7ca      	b.n	800131e <imu_computeCompassHeading+0x16>
	if (heading > PI) heading -= (2 * PI);
 8001388:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80013e4 <imu_computeCompassHeading+0xdc>
 800138c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001390:	edc3 7a00 	vstr	s15, [r3]

	heading*= 180.0 / PI;
 8001394:	4c10      	ldr	r4, [pc, #64]	; (80013d8 <imu_computeCompassHeading+0xd0>)
 8001396:	6820      	ldr	r0, [r4, #0]
 8001398:	f7ff f882 	bl	80004a0 <__aeabi_f2d>
 800139c:	a30a      	add	r3, pc, #40	; (adr r3, 80013c8 <imu_computeCompassHeading+0xc0>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7ff f8d5 	bl	8000550 <__aeabi_dmul>
 80013a6:	f7ff fb95 	bl	8000ad4 <__aeabi_d2f>
 80013aa:	6020      	str	r0, [r4, #0]

	return heading;
}
 80013ac:	ee00 0a10 	vmov	s0, r0
 80013b0:	bd38      	pop	{r3, r4, r5, pc}
	else if (heading < -PI) heading += (2 * PI);
 80013b2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80013e4 <imu_computeCompassHeading+0xdc>
 80013b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <imu_computeCompassHeading+0xd0>)
 80013bc:	edc3 7a00 	vstr	s15, [r3]
 80013c0:	e7e8      	b.n	8001394 <imu_computeCompassHeading+0x8c>
 80013c2:	bf00      	nop
 80013c4:	f3af 8000 	nop.w
 80013c8:	0d03cf26 	.word	0x0d03cf26
 80013cc:	404ca5dc 	.word	0x404ca5dc
 80013d0:	20000344 	.word	0x20000344
 80013d4:	20000380 	.word	0x20000380
 80013d8:	200003bc 	.word	0x200003bc
 80013dc:	40490fdb 	.word	0x40490fdb
 80013e0:	c0490fdb 	.word	0xc0490fdb
 80013e4:	40c90fdb 	.word	0x40c90fdb
 80013e8:	40490fdb 	.word	0x40490fdb

080013ec <constrain>:


float constrain(float x, float a, float b){


	if(x >= a && x <= b){
 80013ec:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80013f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f4:	db04      	blt.n	8001400 <constrain+0x14>
 80013f6:	eeb4 0ac1 	vcmpe.f32	s0, s2
 80013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fe:	d90f      	bls.n	8001420 <constrain+0x34>
		return x;
	}

	if(x < a){
 8001400:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8001404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001408:	d405      	bmi.n	8001416 <constrain+0x2a>
		return a;
	}

	if(x > b){
 800140a:	eeb4 0ac1 	vcmpe.f32	s0, s2
 800140e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001412:	dc03      	bgt.n	800141c <constrain+0x30>
		return b;
	}

}
 8001414:	4770      	bx	lr
		return a;
 8001416:	eeb0 0a60 	vmov.f32	s0, s1
 800141a:	4770      	bx	lr
		return b;
 800141c:	eeb0 0a41 	vmov.f32	s0, s2
}
 8001420:	4770      	bx	lr
	...

08001424 <imu_dmpBegin>:
{
 8001424:	b510      	push	{r4, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	4604      	mov	r4, r0
 800142a:	9101      	str	r1, [sp, #4]
	if (imu_dmpLoad() != INV_SUCCESS)
 800142c:	f7ff fdf6 	bl	800101c <imu_dmpLoad>
 8001430:	bb88      	cbnz	r0, 8001496 <imu_dmpBegin+0x72>
	if (feat & DMP_FEATURE_LP_QUAT)
 8001432:	f014 0f04 	tst.w	r4, #4
 8001436:	d11f      	bne.n	8001478 <imu_dmpBegin+0x54>
	else if (feat & DMP_FEATURE_6X_LP_QUAT)
 8001438:	f014 0f10 	tst.w	r4, #16
 800143c:	d123      	bne.n	8001486 <imu_dmpBegin+0x62>
	if (feat & DMP_FEATURE_GYRO_CAL)
 800143e:	f014 0f20 	tst.w	r4, #32
 8001442:	d124      	bne.n	800148e <imu_dmpBegin+0x6a>
	if (imu_dmpEnableFeatures(feat) != INV_SUCCESS)
 8001444:	4620      	mov	r0, r4
 8001446:	f7ff fe59 	bl	80010fc <imu_dmpEnableFeatures>
 800144a:	bb30      	cbnz	r0, 800149a <imu_dmpBegin+0x76>
	rate = constrain(rate, 1, 200);
 800144c:	ed9f 1a15 	vldr	s2, [pc, #84]	; 80014a4 <imu_dmpBegin+0x80>
 8001450:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001454:	eddd 7a01 	vldr	s15, [sp, #4]
 8001458:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 800145c:	f7ff ffc6 	bl	80013ec <constrain>
 8001460:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	if (imu_dmpSetFifoRate(rate) != INV_SUCCESS)
 8001464:	ee10 3a10 	vmov	r3, s0
 8001468:	b298      	uxth	r0, r3
 800146a:	f7ff fddb 	bl	8001024 <imu_dmpSetFifoRate>
 800146e:	b9b8      	cbnz	r0, 80014a0 <imu_dmpBegin+0x7c>
	return mpu_set_dmp_state(1);
 8001470:	2001      	movs	r0, #1
 8001472:	f003 fa25 	bl	80048c0 <mpu_set_dmp_state>
 8001476:	e011      	b.n	800149c <imu_dmpBegin+0x78>
		feat &= ~(DMP_FEATURE_6X_LP_QUAT);
 8001478:	f024 0410 	bic.w	r4, r4, #16
 800147c:	b2a4      	uxth	r4, r4
		dmp_enable_lp_quat(1);
 800147e:	2001      	movs	r0, #1
 8001480:	f003 fcec 	bl	8004e5c <dmp_enable_lp_quat>
 8001484:	e7db      	b.n	800143e <imu_dmpBegin+0x1a>
		dmp_enable_6x_lp_quat(1);
 8001486:	2001      	movs	r0, #1
 8001488:	f003 fd06 	bl	8004e98 <dmp_enable_6x_lp_quat>
 800148c:	e7d7      	b.n	800143e <imu_dmpBegin+0x1a>
		dmp_enable_gyro_cal(1);
 800148e:	2001      	movs	r0, #1
 8001490:	f003 fcc2 	bl	8004e18 <dmp_enable_gyro_cal>
 8001494:	e7d6      	b.n	8001444 <imu_dmpBegin+0x20>
		return INV_ERROR;
 8001496:	2020      	movs	r0, #32
 8001498:	e000      	b.n	800149c <imu_dmpBegin+0x78>
		return INV_ERROR;
 800149a:	2020      	movs	r0, #32
}
 800149c:	b002      	add	sp, #8
 800149e:	bd10      	pop	{r4, pc}
		return INV_ERROR;
 80014a0:	2020      	movs	r0, #32
 80014a2:	e7fb      	b.n	800149c <imu_dmpBegin+0x78>
 80014a4:	43480000 	.word	0x43480000

080014a8 <pid_calculate_roll>:

/** roll PID Calculation **/
float pid_calculate_roll(float IMU_roll_value, int timer_value, float roll_setpoint) {

	//Calculate error
	roll_error = IMU_roll_value - roll_setpoint;
 80014a8:	ee70 0a60 	vsub.f32	s1, s0, s1
 80014ac:	4b29      	ldr	r3, [pc, #164]	; (8001554 <pid_calculate_roll+0xac>)
 80014ae:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	roll_p = roll_p_gain * roll_error;
 80014b2:	4b29      	ldr	r3, [pc, #164]	; (8001558 <pid_calculate_roll+0xb0>)
 80014b4:	edd3 6a00 	vldr	s13, [r3]
 80014b8:	ee60 6aa6 	vmul.f32	s13, s1, s13
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <pid_calculate_roll+0xb4>)
 80014be:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	roll_i += (roll_i_gain * roll_error * delta_t);
 80014c2:	4b27      	ldr	r3, [pc, #156]	; (8001560 <pid_calculate_roll+0xb8>)
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80014cc:	eddf 5a25 	vldr	s11, [pc, #148]	; 8001564 <pid_calculate_roll+0xbc>
 80014d0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80014d4:	4b24      	ldr	r3, [pc, #144]	; (8001568 <pid_calculate_roll+0xc0>)
 80014d6:	ed93 7a00 	vldr	s14, [r3]
 80014da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014de:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / delta_t);
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <pid_calculate_roll+0xc4>)
 80014e4:	ed93 6a00 	vldr	s12, [r3]
 80014e8:	ee30 6ac6 	vsub.f32	s12, s1, s12
 80014ec:	ee86 7a25 	vdiv.f32	s14, s12, s11
 80014f0:	4a1f      	ldr	r2, [pc, #124]	; (8001570 <pid_calculate_roll+0xc8>)
 80014f2:	ed92 6a00 	vldr	s12, [r2]
 80014f6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80014fa:	4a1e      	ldr	r2, [pc, #120]	; (8001574 <pid_calculate_roll+0xcc>)
 80014fc:	ed82 7a00 	vstr	s14, [r2]
	roll_last_d_error = roll_error;
 8001500:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	roll_output = roll_p + roll_i + roll_d;
 8001504:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <pid_calculate_roll+0xd0>)
 800150e:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (roll_output < -roll_pid_clip) {
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <pid_calculate_roll+0xd4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	425a      	negs	r2, r3
 8001518:	ee07 2a10 	vmov	s14, r2
 800151c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001528:	d40c      	bmi.n	8001544 <pid_calculate_roll+0x9c>
		roll_output = -roll_pid_clip;
	} else if (roll_output > roll_pid_clip) {
 800152a:	ee07 3a10 	vmov	s14, r3
 800152e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153a:	dd06      	ble.n	800154a <pid_calculate_roll+0xa2>
		roll_output = roll_pid_clip;
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <pid_calculate_roll+0xd0>)
 800153e:	ed83 7a00 	vstr	s14, [r3]
 8001542:	e002      	b.n	800154a <pid_calculate_roll+0xa2>
		roll_output = -roll_pid_clip;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <pid_calculate_roll+0xd0>)
 8001546:	ed83 7a00 	vstr	s14, [r3]
	}

	return roll_output;
}
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <pid_calculate_roll+0xd0>)
 800154c:	ed93 0a00 	vldr	s0, [r3]
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000260 	.word	0x20000260
 8001558:	20000018 	.word	0x20000018
 800155c:	200003d4 	.word	0x200003d4
 8001560:	20000014 	.word	0x20000014
 8001564:	3b012912 	.word	0x3b012912
 8001568:	200003e0 	.word	0x200003e0
 800156c:	20000264 	.word	0x20000264
 8001570:	20000010 	.word	0x20000010
 8001574:	200003c0 	.word	0x200003c0
 8001578:	20000268 	.word	0x20000268
 800157c:	2000001c 	.word	0x2000001c

08001580 <reset_pid_roll>:

void reset_pid_roll(){

	roll_p = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	4a04      	ldr	r2, [pc, #16]	; (8001594 <reset_pid_roll+0x14>)
 8001584:	6013      	str	r3, [r2, #0]
	roll_i = 0;
 8001586:	4a04      	ldr	r2, [pc, #16]	; (8001598 <reset_pid_roll+0x18>)
 8001588:	6013      	str	r3, [r2, #0]
	roll_d = 0;
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <reset_pid_roll+0x1c>)
 800158c:	6013      	str	r3, [r2, #0]
	roll_output = 0;
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <reset_pid_roll+0x20>)
 8001590:	6013      	str	r3, [r2, #0]

}
 8001592:	4770      	bx	lr
 8001594:	200003d4 	.word	0x200003d4
 8001598:	200003e0 	.word	0x200003e0
 800159c:	200003c0 	.word	0x200003c0
 80015a0:	20000268 	.word	0x20000268

080015a4 <pid_calculate_pitch>:

/** Pitch PID Calculation **/
float pid_calculate_pitch(float IMU_pitch_value, int timer_value, float pitch_setpoint) {

	//Calculate error
	pitch_error = IMU_pitch_value - pitch_setpoint;
 80015a4:	ee70 0a60 	vsub.f32	s1, s0, s1
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <pid_calculate_pitch+0xac>)
 80015aa:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 80015ae:	4b29      	ldr	r3, [pc, #164]	; (8001654 <pid_calculate_pitch+0xb0>)
 80015b0:	edd3 6a00 	vldr	s13, [r3]
 80015b4:	ee60 6aa6 	vmul.f32	s13, s1, s13
 80015b8:	4b27      	ldr	r3, [pc, #156]	; (8001658 <pid_calculate_pitch+0xb4>)
 80015ba:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	pitch_i += (pitch_i_gain * pitch_error * delta_t);
 80015be:	4b27      	ldr	r3, [pc, #156]	; (800165c <pid_calculate_pitch+0xb8>)
 80015c0:	edd3 7a00 	vldr	s15, [r3]
 80015c4:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80015c8:	eddf 5a25 	vldr	s11, [pc, #148]	; 8001660 <pid_calculate_pitch+0xbc>
 80015cc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <pid_calculate_pitch+0xc0>)
 80015d2:	ed93 7a00 	vldr	s14, [r3]
 80015d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015da:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	pitch_d = pitch_d_gain * ( (pitch_error - pitch_last_d_error) / delta_t);
 80015de:	4b22      	ldr	r3, [pc, #136]	; (8001668 <pid_calculate_pitch+0xc4>)
 80015e0:	ed93 6a00 	vldr	s12, [r3]
 80015e4:	ee30 6ac6 	vsub.f32	s12, s1, s12
 80015e8:	ee86 7a25 	vdiv.f32	s14, s12, s11
 80015ec:	4a1f      	ldr	r2, [pc, #124]	; (800166c <pid_calculate_pitch+0xc8>)
 80015ee:	ed92 6a00 	vldr	s12, [r2]
 80015f2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80015f6:	4a1e      	ldr	r2, [pc, #120]	; (8001670 <pid_calculate_pitch+0xcc>)
 80015f8:	ed82 7a00 	vstr	s14, [r2]
	pitch_last_d_error = pitch_error;
 80015fc:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 8001600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001608:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <pid_calculate_pitch+0xd0>)
 800160a:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (pitch_output < -pitch_pid_clip) {
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <pid_calculate_pitch+0xd4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	425a      	negs	r2, r3
 8001614:	ee07 2a10 	vmov	s14, r2
 8001618:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800161c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	d40c      	bmi.n	8001640 <pid_calculate_pitch+0x9c>
		pitch_output = -pitch_pid_clip;
	} else if (pitch_output > pitch_pid_clip) {
 8001626:	ee07 3a10 	vmov	s14, r3
 800162a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800162e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001636:	dd06      	ble.n	8001646 <pid_calculate_pitch+0xa2>
		pitch_output = pitch_pid_clip;
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <pid_calculate_pitch+0xd0>)
 800163a:	ed83 7a00 	vstr	s14, [r3]
 800163e:	e002      	b.n	8001646 <pid_calculate_pitch+0xa2>
		pitch_output = -pitch_pid_clip;
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <pid_calculate_pitch+0xd0>)
 8001642:	ed83 7a00 	vstr	s14, [r3]
	}

	return pitch_output;
}
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <pid_calculate_pitch+0xd0>)
 8001648:	ed93 0a00 	vldr	s0, [r3]
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000254 	.word	0x20000254
 8001654:	20000008 	.word	0x20000008
 8001658:	200003cc 	.word	0x200003cc
 800165c:	20000004 	.word	0x20000004
 8001660:	3b012912 	.word	0x3b012912
 8001664:	200003d0 	.word	0x200003d0
 8001668:	20000258 	.word	0x20000258
 800166c:	20000000 	.word	0x20000000
 8001670:	200003c4 	.word	0x200003c4
 8001674:	2000025c 	.word	0x2000025c
 8001678:	2000000c 	.word	0x2000000c

0800167c <reset_pid_pitch>:

void reset_pid_pitch(){

	pitch_p = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	4a04      	ldr	r2, [pc, #16]	; (8001690 <reset_pid_pitch+0x14>)
 8001680:	6013      	str	r3, [r2, #0]
	pitch_i = 0;
 8001682:	4a04      	ldr	r2, [pc, #16]	; (8001694 <reset_pid_pitch+0x18>)
 8001684:	6013      	str	r3, [r2, #0]
	pitch_d = 0;
 8001686:	4a04      	ldr	r2, [pc, #16]	; (8001698 <reset_pid_pitch+0x1c>)
 8001688:	6013      	str	r3, [r2, #0]
	pitch_output = 0;
 800168a:	4a04      	ldr	r2, [pc, #16]	; (800169c <reset_pid_pitch+0x20>)
 800168c:	6013      	str	r3, [r2, #0]

}
 800168e:	4770      	bx	lr
 8001690:	200003cc 	.word	0x200003cc
 8001694:	200003d0 	.word	0x200003d0
 8001698:	200003c4 	.word	0x200003c4
 800169c:	2000025c 	.word	0x2000025c

080016a0 <reset_pid_yaw>:
	return yaw_output;
}

void reset_pid_yaw(){

	yaw_p = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <reset_pid_yaw+0x14>)
 80016a4:	6013      	str	r3, [r2, #0]
	yaw_i = 0;
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <reset_pid_yaw+0x18>)
 80016a8:	6013      	str	r3, [r2, #0]
	yaw_d = 0;
 80016aa:	4a04      	ldr	r2, [pc, #16]	; (80016bc <reset_pid_yaw+0x1c>)
 80016ac:	6013      	str	r3, [r2, #0]
	yaw_output = 0;
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <reset_pid_yaw+0x20>)
 80016b0:	6013      	str	r3, [r2, #0]

}
 80016b2:	4770      	bx	lr
 80016b4:	200003dc 	.word	0x200003dc
 80016b8:	200003d8 	.word	0x200003d8
 80016bc:	200003c8 	.word	0x200003c8
 80016c0:	2000026c 	.word	0x2000026c

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b510      	push	{r4, lr}
 80016c6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_InitTick+0x40>)
 80016ca:	7818      	ldrb	r0, [r3, #0]
 80016cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d0:	fbb3 f3f0 	udiv	r3, r3, r0
 80016d4:	4a0c      	ldr	r2, [pc, #48]	; (8001708 <HAL_InitTick+0x44>)
 80016d6:	6810      	ldr	r0, [r2, #0]
 80016d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80016dc:	f000 fa44 	bl	8001b68 <HAL_SYSTICK_Config>
 80016e0:	b968      	cbnz	r0, 80016fe <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e2:	2c0f      	cmp	r4, #15
 80016e4:	d901      	bls.n	80016ea <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80016e6:	2001      	movs	r0, #1
 80016e8:	e00a      	b.n	8001700 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ea:	2200      	movs	r2, #0
 80016ec:	4621      	mov	r1, r4
 80016ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016f2:	f000 f9f7 	bl	8001ae4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <HAL_InitTick+0x48>)
 80016f8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016fa:	2000      	movs	r0, #0
 80016fc:	e000      	b.n	8001700 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80016fe:	2001      	movs	r0, #1
}
 8001700:	bd10      	pop	{r4, pc}
 8001702:	bf00      	nop
 8001704:	20000020 	.word	0x20000020
 8001708:	20000060 	.word	0x20000060
 800170c:	20000024 	.word	0x20000024

08001710 <HAL_Init>:
{
 8001710:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_Init+0x30>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800171a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001722:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800172a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800172c:	2003      	movs	r0, #3
 800172e:	f000 f9c7 	bl	8001ac0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001732:	2000      	movs	r0, #0
 8001734:	f7ff ffc6 	bl	80016c4 <HAL_InitTick>
  HAL_MspInit();
 8001738:	f004 f912 	bl	8005960 <HAL_MspInit>
}
 800173c:	2000      	movs	r0, #0
 800173e:	bd08      	pop	{r3, pc}
 8001740:	40023c00 	.word	0x40023c00

08001744 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001744:	4a03      	ldr	r2, [pc, #12]	; (8001754 <HAL_IncTick+0x10>)
 8001746:	6811      	ldr	r1, [r2, #0]
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_IncTick+0x14>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	440b      	add	r3, r1
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	200003e4 	.word	0x200003e4
 8001758:	20000020 	.word	0x20000020

0800175c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800175c:	4b01      	ldr	r3, [pc, #4]	; (8001764 <HAL_GetTick+0x8>)
 800175e:	6818      	ldr	r0, [r3, #0]
}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	200003e4 	.word	0x200003e4

08001768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001768:	b538      	push	{r3, r4, r5, lr}
 800176a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800176c:	f7ff fff6 	bl	800175c <HAL_GetTick>
 8001770:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001772:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001776:	d002      	beq.n	800177e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <HAL_Delay+0x24>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800177e:	f7ff ffed 	bl	800175c <HAL_GetTick>
 8001782:	1b40      	subs	r0, r0, r5
 8001784:	42a0      	cmp	r0, r4
 8001786:	d3fa      	bcc.n	800177e <HAL_Delay+0x16>
  {
  }
}
 8001788:	bd38      	pop	{r3, r4, r5, pc}
 800178a:	bf00      	nop
 800178c:	20000020 	.word	0x20000020

08001790 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001790:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <ADC_Init+0x12c>)
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001798:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	6841      	ldr	r1, [r0, #4]
 800179e:	430a      	orrs	r2, r1
 80017a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017a2:	6802      	ldr	r2, [r0, #0]
 80017a4:	6853      	ldr	r3, [r2, #4]
 80017a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017aa:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017ac:	6802      	ldr	r2, [r0, #0]
 80017ae:	6853      	ldr	r3, [r2, #4]
 80017b0:	6901      	ldr	r1, [r0, #16]
 80017b2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80017b6:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017b8:	6802      	ldr	r2, [r0, #0]
 80017ba:	6853      	ldr	r3, [r2, #4]
 80017bc:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80017c0:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017c2:	6802      	ldr	r2, [r0, #0]
 80017c4:	6853      	ldr	r3, [r2, #4]
 80017c6:	6881      	ldr	r1, [r0, #8]
 80017c8:	430b      	orrs	r3, r1
 80017ca:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017cc:	6802      	ldr	r2, [r0, #0]
 80017ce:	6893      	ldr	r3, [r2, #8]
 80017d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017d4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017d6:	6802      	ldr	r2, [r0, #0]
 80017d8:	6893      	ldr	r3, [r2, #8]
 80017da:	68c1      	ldr	r1, [r0, #12]
 80017dc:	430b      	orrs	r3, r1
 80017de:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017e0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80017e2:	4b37      	ldr	r3, [pc, #220]	; (80018c0 <ADC_Init+0x130>)
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d04b      	beq.n	8001880 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017e8:	6802      	ldr	r2, [r0, #0]
 80017ea:	6893      	ldr	r3, [r2, #8]
 80017ec:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80017f0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017f2:	6802      	ldr	r2, [r0, #0]
 80017f4:	6893      	ldr	r3, [r2, #8]
 80017f6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80017f8:	430b      	orrs	r3, r1
 80017fa:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017fc:	6802      	ldr	r2, [r0, #0]
 80017fe:	6893      	ldr	r3, [r2, #8]
 8001800:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001804:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001806:	6802      	ldr	r2, [r0, #0]
 8001808:	6893      	ldr	r3, [r2, #8]
 800180a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800180c:	430b      	orrs	r3, r1
 800180e:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001810:	6802      	ldr	r2, [r0, #0]
 8001812:	6893      	ldr	r3, [r2, #8]
 8001814:	f023 0302 	bic.w	r3, r3, #2
 8001818:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800181a:	6802      	ldr	r2, [r0, #0]
 800181c:	6893      	ldr	r3, [r2, #8]
 800181e:	7e01      	ldrb	r1, [r0, #24]
 8001820:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001824:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001826:	f890 3020 	ldrb.w	r3, [r0, #32]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d133      	bne.n	8001896 <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800182e:	6802      	ldr	r2, [r0, #0]
 8001830:	6853      	ldr	r3, [r2, #4]
 8001832:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001836:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001838:	6802      	ldr	r2, [r0, #0]
 800183a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800183c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001840:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001842:	6801      	ldr	r1, [r0, #0]
 8001844:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001846:	69c2      	ldr	r2, [r0, #28]
 8001848:	3a01      	subs	r2, #1
 800184a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800184e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001850:	6802      	ldr	r2, [r0, #0]
 8001852:	6893      	ldr	r3, [r2, #8]
 8001854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001858:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800185a:	6802      	ldr	r2, [r0, #0]
 800185c:	6893      	ldr	r3, [r2, #8]
 800185e:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8001862:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001866:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001868:	6802      	ldr	r2, [r0, #0]
 800186a:	6893      	ldr	r3, [r2, #8]
 800186c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001870:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001872:	6802      	ldr	r2, [r0, #0]
 8001874:	6893      	ldr	r3, [r2, #8]
 8001876:	6941      	ldr	r1, [r0, #20]
 8001878:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800187c:	6093      	str	r3, [r2, #8]
}
 800187e:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001880:	6802      	ldr	r2, [r0, #0]
 8001882:	6893      	ldr	r3, [r2, #8]
 8001884:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001888:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800188a:	6802      	ldr	r2, [r0, #0]
 800188c:	6893      	ldr	r3, [r2, #8]
 800188e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001892:	6093      	str	r3, [r2, #8]
 8001894:	e7bc      	b.n	8001810 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001896:	6802      	ldr	r2, [r0, #0]
 8001898:	6853      	ldr	r3, [r2, #4]
 800189a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800189e:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018a0:	6802      	ldr	r2, [r0, #0]
 80018a2:	6853      	ldr	r3, [r2, #4]
 80018a4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80018a8:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018aa:	6801      	ldr	r1, [r0, #0]
 80018ac:	684b      	ldr	r3, [r1, #4]
 80018ae:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80018b0:	3a01      	subs	r2, #1
 80018b2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80018b6:	604b      	str	r3, [r1, #4]
 80018b8:	e7be      	b.n	8001838 <ADC_Init+0xa8>
 80018ba:	bf00      	nop
 80018bc:	40012300 	.word	0x40012300
 80018c0:	0f000001 	.word	0x0f000001

080018c4 <HAL_ADC_Init>:
  if(hadc == NULL)
 80018c4:	b338      	cbz	r0, 8001916 <HAL_ADC_Init+0x52>
{
 80018c6:	b510      	push	{r4, lr}
 80018c8:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018cc:	b143      	cbz	r3, 80018e0 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018d0:	f013 0f10 	tst.w	r3, #16
 80018d4:	d00b      	beq.n	80018ee <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80018d6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80018d8:	2300      	movs	r3, #0
 80018da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80018de:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80018e0:	f004 f85a 	bl	8005998 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80018e4:	2300      	movs	r3, #0
 80018e6:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80018e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80018ec:	e7ef      	b.n	80018ce <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80018ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018f4:	f023 0302 	bic.w	r3, r3, #2
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80018fe:	4620      	mov	r0, r4
 8001900:	f7ff ff46 	bl	8001790 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001904:	2000      	movs	r0, #0
 8001906:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001908:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800190a:	f023 0303 	bic.w	r3, r3, #3
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6423      	str	r3, [r4, #64]	; 0x40
 8001914:	e7e0      	b.n	80018d8 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8001916:	2001      	movs	r0, #1
}
 8001918:	4770      	bx	lr
	...

0800191c <HAL_ADC_ConfigChannel>:
{
 800191c:	b430      	push	{r4, r5}
 800191e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001924:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001928:	2b01      	cmp	r3, #1
 800192a:	f000 80bd 	beq.w	8001aa8 <HAL_ADC_ConfigChannel+0x18c>
 800192e:	2301      	movs	r3, #1
 8001930:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001934:	680b      	ldr	r3, [r1, #0]
 8001936:	2b09      	cmp	r3, #9
 8001938:	d93e      	bls.n	80019b8 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800193a:	6805      	ldr	r5, [r0, #0]
 800193c:	68ea      	ldr	r2, [r5, #12]
 800193e:	b29b      	uxth	r3, r3
 8001940:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001944:	3b1e      	subs	r3, #30
 8001946:	2407      	movs	r4, #7
 8001948:	fa04 f303 	lsl.w	r3, r4, r3
 800194c:	ea22 0303 	bic.w	r3, r2, r3
 8001950:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001952:	6805      	ldr	r5, [r0, #0]
 8001954:	68ea      	ldr	r2, [r5, #12]
 8001956:	688c      	ldr	r4, [r1, #8]
 8001958:	880b      	ldrh	r3, [r1, #0]
 800195a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800195e:	3b1e      	subs	r3, #30
 8001960:	fa04 f303 	lsl.w	r3, r4, r3
 8001964:	4313      	orrs	r3, r2
 8001966:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8001968:	684b      	ldr	r3, [r1, #4]
 800196a:	2b06      	cmp	r3, #6
 800196c:	d83a      	bhi.n	80019e4 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800196e:	6805      	ldr	r5, [r0, #0]
 8001970:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001972:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001976:	3b05      	subs	r3, #5
 8001978:	241f      	movs	r4, #31
 800197a:	fa04 f303 	lsl.w	r3, r4, r3
 800197e:	ea22 0303 	bic.w	r3, r2, r3
 8001982:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001984:	6805      	ldr	r5, [r0, #0]
 8001986:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001988:	684b      	ldr	r3, [r1, #4]
 800198a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800198e:	3b05      	subs	r3, #5
 8001990:	880c      	ldrh	r4, [r1, #0]
 8001992:	fa04 f303 	lsl.w	r3, r4, r3
 8001996:	4313      	orrs	r3, r2
 8001998:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800199a:	6802      	ldr	r2, [r0, #0]
 800199c:	4b43      	ldr	r3, [pc, #268]	; (8001aac <HAL_ADC_ConfigChannel+0x190>)
 800199e:	429a      	cmp	r2, r3
 80019a0:	d050      	beq.n	8001a44 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019a2:	6802      	ldr	r2, [r0, #0]
 80019a4:	4b41      	ldr	r3, [pc, #260]	; (8001aac <HAL_ADC_ConfigChannel+0x190>)
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d059      	beq.n	8001a5e <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 80019aa:	2300      	movs	r3, #0
 80019ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80019b0:	4618      	mov	r0, r3
}
 80019b2:	b002      	add	sp, #8
 80019b4:	bc30      	pop	{r4, r5}
 80019b6:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019b8:	6805      	ldr	r5, [r0, #0]
 80019ba:	692a      	ldr	r2, [r5, #16]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80019c2:	2407      	movs	r4, #7
 80019c4:	fa04 f303 	lsl.w	r3, r4, r3
 80019c8:	ea22 0303 	bic.w	r3, r2, r3
 80019cc:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019ce:	6805      	ldr	r5, [r0, #0]
 80019d0:	692a      	ldr	r2, [r5, #16]
 80019d2:	688c      	ldr	r4, [r1, #8]
 80019d4:	880b      	ldrh	r3, [r1, #0]
 80019d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80019da:	fa04 f303 	lsl.w	r3, r4, r3
 80019de:	4313      	orrs	r3, r2
 80019e0:	612b      	str	r3, [r5, #16]
 80019e2:	e7c1      	b.n	8001968 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 80019e4:	2b0c      	cmp	r3, #12
 80019e6:	d816      	bhi.n	8001a16 <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019e8:	6805      	ldr	r5, [r0, #0]
 80019ea:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80019ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80019f0:	3b23      	subs	r3, #35	; 0x23
 80019f2:	241f      	movs	r4, #31
 80019f4:	fa04 f303 	lsl.w	r3, r4, r3
 80019f8:	ea22 0303 	bic.w	r3, r2, r3
 80019fc:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019fe:	6805      	ldr	r5, [r0, #0]
 8001a00:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001a02:	684b      	ldr	r3, [r1, #4]
 8001a04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a08:	3b23      	subs	r3, #35	; 0x23
 8001a0a:	880c      	ldrh	r4, [r1, #0]
 8001a0c:	fa04 f303 	lsl.w	r3, r4, r3
 8001a10:	4313      	orrs	r3, r2
 8001a12:	632b      	str	r3, [r5, #48]	; 0x30
 8001a14:	e7c1      	b.n	800199a <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a16:	6805      	ldr	r5, [r0, #0]
 8001a18:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001a1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a1e:	3b41      	subs	r3, #65	; 0x41
 8001a20:	241f      	movs	r4, #31
 8001a22:	fa04 f303 	lsl.w	r3, r4, r3
 8001a26:	ea22 0303 	bic.w	r3, r2, r3
 8001a2a:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a2c:	6805      	ldr	r5, [r0, #0]
 8001a2e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001a30:	684b      	ldr	r3, [r1, #4]
 8001a32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a36:	3b41      	subs	r3, #65	; 0x41
 8001a38:	880c      	ldrh	r4, [r1, #0]
 8001a3a:	fa04 f303 	lsl.w	r3, r4, r3
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001a42:	e7aa      	b.n	800199a <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a44:	680b      	ldr	r3, [r1, #0]
 8001a46:	2b12      	cmp	r3, #18
 8001a48:	d1ab      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x86>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_ADC_ConfigChannel+0x194>)
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001a52:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	e7a1      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a5e:	680b      	ldr	r3, [r1, #0]
 8001a60:	4a14      	ldr	r2, [pc, #80]	; (8001ab4 <HAL_ADC_ConfigChannel+0x198>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d001      	beq.n	8001a6a <HAL_ADC_ConfigChannel+0x14e>
 8001a66:	2b11      	cmp	r3, #17
 8001a68:	d19f      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_ADC_ConfigChannel+0x194>)
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001a72:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a7a:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001a7c:	680a      	ldr	r2, [r1, #0]
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <HAL_ADC_ConfigChannel+0x198>)
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d192      	bne.n	80019aa <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <HAL_ADC_ConfigChannel+0x19c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0c      	ldr	r2, [pc, #48]	; (8001abc <HAL_ADC_ConfigChannel+0x1a0>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	0c9b      	lsrs	r3, r3, #18
 8001a90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a94:	005a      	lsls	r2, r3, #1
 8001a96:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8001a98:	e002      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x184>
        counter--;
 8001a9a:	9b01      	ldr	r3, [sp, #4]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001aa0:	9b01      	ldr	r3, [sp, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f9      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x17e>
 8001aa6:	e780      	b.n	80019aa <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8001aa8:	2002      	movs	r0, #2
 8001aaa:	e782      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x96>
 8001aac:	40012000 	.word	0x40012000
 8001ab0:	40012300 	.word	0x40012300
 8001ab4:	10000012 	.word	0x10000012
 8001ab8:	20000060 	.word	0x20000060
 8001abc:	431bde83 	.word	0x431bde83

08001ac0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac0:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001ac2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ac8:	041b      	lsls	r3, r3, #16
 8001aca:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001acc:	0200      	lsls	r0, r0, #8
 8001ace:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001ad4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001ad8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001adc:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <HAL_NVIC_SetPriority+0x60>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aee:	f1c3 0407 	rsb	r4, r3, #7
 8001af2:	2c04      	cmp	r4, #4
 8001af4:	bf28      	it	cs
 8001af6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af8:	1d1d      	adds	r5, r3, #4
 8001afa:	2d06      	cmp	r5, #6
 8001afc:	d918      	bls.n	8001b30 <HAL_NVIC_SetPriority+0x4c>
 8001afe:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001b04:	fa05 f404 	lsl.w	r4, r5, r4
 8001b08:	ea21 0104 	bic.w	r1, r1, r4
 8001b0c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0e:	fa05 f303 	lsl.w	r3, r5, r3
 8001b12:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b16:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001b18:	2800      	cmp	r0, #0
 8001b1a:	db0b      	blt.n	8001b34 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	0109      	lsls	r1, r1, #4
 8001b1e:	b2c9      	uxtb	r1, r1
 8001b20:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001b24:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001b28:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001b2c:	bc30      	pop	{r4, r5}
 8001b2e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b30:	2300      	movs	r3, #0
 8001b32:	e7e5      	b.n	8001b00 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b34:	f000 000f 	and.w	r0, r0, #15
 8001b38:	0109      	lsls	r1, r1, #4
 8001b3a:	b2c9      	uxtb	r1, r1
 8001b3c:	4b02      	ldr	r3, [pc, #8]	; (8001b48 <HAL_NVIC_SetPriority+0x64>)
 8001b3e:	5419      	strb	r1, [r3, r0]
 8001b40:	e7f4      	b.n	8001b2c <HAL_NVIC_SetPriority+0x48>
 8001b42:	bf00      	nop
 8001b44:	e000ed00 	.word	0xe000ed00
 8001b48:	e000ed14 	.word	0xe000ed14

08001b4c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b4c:	2800      	cmp	r0, #0
 8001b4e:	db07      	blt.n	8001b60 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b50:	f000 021f 	and.w	r2, r0, #31
 8001b54:	0940      	lsrs	r0, r0, #5
 8001b56:	2301      	movs	r3, #1
 8001b58:	4093      	lsls	r3, r2
 8001b5a:	4a02      	ldr	r2, [pc, #8]	; (8001b64 <HAL_NVIC_EnableIRQ+0x18>)
 8001b5c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000e100 	.word	0xe000e100

08001b68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	3801      	subs	r0, #1
 8001b6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001b6e:	d20a      	bcs.n	8001b86 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_SYSTICK_Config+0x24>)
 8001b72:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b74:	4a06      	ldr	r2, [pc, #24]	; (8001b90 <HAL_SYSTICK_Config+0x28>)
 8001b76:	21f0      	movs	r1, #240	; 0xf0
 8001b78:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b80:	2207      	movs	r2, #7
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001b86:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000e010 	.word	0xe000e010
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b94:	2300      	movs	r3, #0
 8001b96:	2b0f      	cmp	r3, #15
 8001b98:	f200 80c5 	bhi.w	8001d26 <HAL_GPIO_Init+0x192>
{
 8001b9c:	b4f0      	push	{r4, r5, r6, r7}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	e039      	b.n	8001c16 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	e000      	b.n	8001ba8 <HAL_GPIO_Init+0x14>
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	40b2      	lsls	r2, r6
 8001baa:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bac:	3402      	adds	r4, #2
 8001bae:	4e5e      	ldr	r6, [pc, #376]	; (8001d28 <HAL_GPIO_Init+0x194>)
 8001bb0:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bb4:	4a5d      	ldr	r2, [pc, #372]	; (8001d2c <HAL_GPIO_Init+0x198>)
 8001bb6:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001bb8:	43ea      	mvns	r2, r5
 8001bba:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bbe:	684f      	ldr	r7, [r1, #4]
 8001bc0:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001bc4:	d001      	beq.n	8001bca <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8001bc6:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8001bca:	4c58      	ldr	r4, [pc, #352]	; (8001d2c <HAL_GPIO_Init+0x198>)
 8001bcc:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8001bce:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001bd0:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bd4:	684f      	ldr	r7, [r1, #4]
 8001bd6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001bda:	d001      	beq.n	8001be0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8001bdc:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8001be0:	4c52      	ldr	r4, [pc, #328]	; (8001d2c <HAL_GPIO_Init+0x198>)
 8001be2:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001be4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001be6:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bea:	684f      	ldr	r7, [r1, #4]
 8001bec:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001bf0:	d001      	beq.n	8001bf6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8001bf2:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8001bf6:	4c4d      	ldr	r4, [pc, #308]	; (8001d2c <HAL_GPIO_Init+0x198>)
 8001bf8:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001bfa:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001bfc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bfe:	684e      	ldr	r6, [r1, #4]
 8001c00:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001c04:	d001      	beq.n	8001c0a <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8001c06:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8001c0a:	4c48      	ldr	r4, [pc, #288]	; (8001d2c <HAL_GPIO_Init+0x198>)
 8001c0c:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0e:	3301      	adds	r3, #1
 8001c10:	2b0f      	cmp	r3, #15
 8001c12:	f200 8085 	bhi.w	8001d20 <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 8001c16:	2201      	movs	r2, #1
 8001c18:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1a:	680c      	ldr	r4, [r1, #0]
 8001c1c:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001c20:	42aa      	cmp	r2, r5
 8001c22:	d1f4      	bne.n	8001c0e <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c24:	684c      	ldr	r4, [r1, #4]
 8001c26:	2c02      	cmp	r4, #2
 8001c28:	d001      	beq.n	8001c2e <HAL_GPIO_Init+0x9a>
 8001c2a:	2c12      	cmp	r4, #18
 8001c2c:	d110      	bne.n	8001c50 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8001c2e:	08de      	lsrs	r6, r3, #3
 8001c30:	3608      	adds	r6, #8
 8001c32:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c36:	f003 0407 	and.w	r4, r3, #7
 8001c3a:	00a7      	lsls	r7, r4, #2
 8001c3c:	240f      	movs	r4, #15
 8001c3e:	40bc      	lsls	r4, r7
 8001c40:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c44:	690c      	ldr	r4, [r1, #16]
 8001c46:	40bc      	lsls	r4, r7
 8001c48:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001c4c:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8001c50:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c52:	005f      	lsls	r7, r3, #1
 8001c54:	2603      	movs	r6, #3
 8001c56:	40be      	lsls	r6, r7
 8001c58:	43f6      	mvns	r6, r6
 8001c5a:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c5e:	684c      	ldr	r4, [r1, #4]
 8001c60:	f004 0403 	and.w	r4, r4, #3
 8001c64:	40bc      	lsls	r4, r7
 8001c66:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8001c6a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c6c:	684c      	ldr	r4, [r1, #4]
 8001c6e:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8001c72:	f1bc 0f01 	cmp.w	ip, #1
 8001c76:	d903      	bls.n	8001c80 <HAL_GPIO_Init+0xec>
 8001c78:	2c11      	cmp	r4, #17
 8001c7a:	d001      	beq.n	8001c80 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c7c:	2c12      	cmp	r4, #18
 8001c7e:	d110      	bne.n	8001ca2 <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8001c80:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c82:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c86:	68cc      	ldr	r4, [r1, #12]
 8001c88:	40bc      	lsls	r4, r7
 8001c8a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8001c8e:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001c90:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c92:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c96:	684c      	ldr	r4, [r1, #4]
 8001c98:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8001c9c:	409c      	lsls	r4, r3
 8001c9e:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8001ca0:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8001ca2:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ca4:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ca6:	688a      	ldr	r2, [r1, #8]
 8001ca8:	40ba      	lsls	r2, r7
 8001caa:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8001cac:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cae:	684a      	ldr	r2, [r1, #4]
 8001cb0:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001cb4:	d0ab      	beq.n	8001c0e <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	9201      	str	r2, [sp, #4]
 8001cba:	4a1d      	ldr	r2, [pc, #116]	; (8001d30 <HAL_GPIO_Init+0x19c>)
 8001cbc:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8001cbe:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001cc2:	6454      	str	r4, [r2, #68]	; 0x44
 8001cc4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cc6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001cca:	9201      	str	r2, [sp, #4]
 8001ccc:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001cce:	089c      	lsrs	r4, r3, #2
 8001cd0:	1ca6      	adds	r6, r4, #2
 8001cd2:	4a15      	ldr	r2, [pc, #84]	; (8001d28 <HAL_GPIO_Init+0x194>)
 8001cd4:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd8:	f003 0203 	and.w	r2, r3, #3
 8001cdc:	0096      	lsls	r6, r2, #2
 8001cde:	220f      	movs	r2, #15
 8001ce0:	40b2      	lsls	r2, r6
 8001ce2:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ce6:	4a13      	ldr	r2, [pc, #76]	; (8001d34 <HAL_GPIO_Init+0x1a0>)
 8001ce8:	4290      	cmp	r0, r2
 8001cea:	f43f af5c 	beq.w	8001ba6 <HAL_GPIO_Init+0x12>
 8001cee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cf2:	4290      	cmp	r0, r2
 8001cf4:	d00e      	beq.n	8001d14 <HAL_GPIO_Init+0x180>
 8001cf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cfa:	4290      	cmp	r0, r2
 8001cfc:	d00c      	beq.n	8001d18 <HAL_GPIO_Init+0x184>
 8001cfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d02:	4290      	cmp	r0, r2
 8001d04:	d00a      	beq.n	8001d1c <HAL_GPIO_Init+0x188>
 8001d06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d0a:	4290      	cmp	r0, r2
 8001d0c:	f43f af49 	beq.w	8001ba2 <HAL_GPIO_Init+0xe>
 8001d10:	2207      	movs	r2, #7
 8001d12:	e749      	b.n	8001ba8 <HAL_GPIO_Init+0x14>
 8001d14:	2201      	movs	r2, #1
 8001d16:	e747      	b.n	8001ba8 <HAL_GPIO_Init+0x14>
 8001d18:	2202      	movs	r2, #2
 8001d1a:	e745      	b.n	8001ba8 <HAL_GPIO_Init+0x14>
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	e743      	b.n	8001ba8 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001d20:	b002      	add	sp, #8
 8001d22:	bcf0      	pop	{r4, r5, r6, r7}
 8001d24:	4770      	bx	lr
 8001d26:	4770      	bx	lr
 8001d28:	40013800 	.word	0x40013800
 8001d2c:	40013c00 	.word	0x40013c00
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40020000 	.word	0x40020000

08001d38 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d38:	b912      	cbnz	r2, 8001d40 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d3a:	0409      	lsls	r1, r1, #16
 8001d3c:	6181      	str	r1, [r0, #24]
  }
}
 8001d3e:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001d40:	6181      	str	r1, [r0, #24]
 8001d42:	4770      	bx	lr

08001d44 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001d44:	6943      	ldr	r3, [r0, #20]
 8001d46:	ea31 0303 	bics.w	r3, r1, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d4c:	6181      	str	r1, [r0, #24]
  }
}
 8001d4e:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001d50:	0409      	lsls	r1, r1, #16
 8001d52:	6181      	str	r1, [r0, #24]
 8001d54:	4770      	bx	lr
	...

08001d58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d58:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	4203      	tst	r3, r0
 8001d60:	d100      	bne.n	8001d64 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8001d62:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d64:	4b02      	ldr	r3, [pc, #8]	; (8001d70 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001d66:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d68:	f003 fdec 	bl	8005944 <HAL_GPIO_EXTI_Callback>
}
 8001d6c:	e7f9      	b.n	8001d62 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001d6e:	bf00      	nop
 8001d70:	40013c00 	.word	0x40013c00

08001d74 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d74:	6803      	ldr	r3, [r0, #0]
 8001d76:	695a      	ldr	r2, [r3, #20]
 8001d78:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001d7c:	d011      	beq.n	8001da2 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d82:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d88:	2220      	movs	r2, #32
 8001d8a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d8e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d92:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001d94:	f042 0204 	orr.w	r2, r2, #4
 8001d98:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d9a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8001d9e:	2001      	movs	r0, #1
 8001da0:	4770      	bx	lr
  }
  return HAL_OK;
 8001da2:	2000      	movs	r0, #0
}
 8001da4:	4770      	bx	lr

08001da6 <I2C_WaitOnFlagUntilTimeout>:
{
 8001da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001da8:	4606      	mov	r6, r0
 8001daa:	460c      	mov	r4, r1
 8001dac:	4617      	mov	r7, r2
 8001dae:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001db0:	e022      	b.n	8001df8 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001db2:	f7ff fcd3 	bl	800175c <HAL_GetTick>
 8001db6:	9b06      	ldr	r3, [sp, #24]
 8001db8:	1ac0      	subs	r0, r0, r3
 8001dba:	42a8      	cmp	r0, r5
 8001dbc:	d800      	bhi.n	8001dc0 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8001dbe:	b9dd      	cbnz	r5, 8001df8 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001dca:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001dce:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8001dd0:	f042 0220 	orr.w	r2, r2, #32
 8001dd4:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001dd6:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8001dda:	2001      	movs	r0, #1
 8001ddc:	e01a      	b.n	8001e14 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dde:	6833      	ldr	r3, [r6, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	ea24 0303 	bic.w	r3, r4, r3
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	fab3 f383 	clz	r3, r3
 8001dec:	095b      	lsrs	r3, r3, #5
 8001dee:	429f      	cmp	r7, r3
 8001df0:	d10f      	bne.n	8001e12 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8001df2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8001df6:	d1dc      	bne.n	8001db2 <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001df8:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d0ee      	beq.n	8001dde <I2C_WaitOnFlagUntilTimeout+0x38>
 8001e00:	6833      	ldr	r3, [r6, #0]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	ea24 0303 	bic.w	r3, r4, r3
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	e7ed      	b.n	8001dee <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8001e12:	2000      	movs	r0, #0
}
 8001e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001e16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e18:	4604      	mov	r4, r0
 8001e1a:	460d      	mov	r5, r1
 8001e1c:	4616      	mov	r6, r2
 8001e1e:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e20:	e03c      	b.n	8001e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e28:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e30:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e36:	2220      	movs	r2, #32
 8001e38:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e3c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e40:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001e42:	f042 0204 	orr.w	r2, r2, #4
 8001e46:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001e48:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	e033      	b.n	8001eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e50:	f7ff fc84 	bl	800175c <HAL_GetTick>
 8001e54:	1bc0      	subs	r0, r0, r7
 8001e56:	42b0      	cmp	r0, r6
 8001e58:	d800      	bhi.n	8001e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8001e5a:	b9fe      	cbnz	r6, 8001e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e60:	2220      	movs	r2, #32
 8001e62:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e66:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001e6c:	f042 0220 	orr.w	r2, r2, #32
 8001e70:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001e72:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8001e76:	2001      	movs	r0, #1
 8001e78:	e01e      	b.n	8001eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	ea25 0303 	bic.w	r3, r5, r3
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	3300      	adds	r3, #0
 8001e86:	bf18      	it	ne
 8001e88:	2301      	movne	r3, #1
 8001e8a:	b1a3      	cbz	r3, 8001eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e8c:	6823      	ldr	r3, [r4, #0]
 8001e8e:	695a      	ldr	r2, [r3, #20]
 8001e90:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001e94:	d1c5      	bne.n	8001e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8001e96:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8001e9a:	d1d9      	bne.n	8001e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e9c:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d0ea      	beq.n	8001e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	ea25 0303 	bic.w	r3, r5, r3
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	3300      	adds	r3, #0
 8001eb0:	bf18      	it	ne
 8001eb2:	2301      	movne	r3, #1
 8001eb4:	e7e9      	b.n	8001e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8001eb6:	2000      	movs	r0, #0
}
 8001eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ebc <I2C_MasterRequestWrite>:
{
 8001ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	4604      	mov	r4, r0
 8001ec2:	460f      	mov	r7, r1
 8001ec4:	4615      	mov	r5, r2
 8001ec6:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ec8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d00d      	beq.n	8001eea <I2C_MasterRequestWrite+0x2e>
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d00b      	beq.n	8001eea <I2C_MasterRequestWrite+0x2e>
 8001ed2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ed6:	d008      	beq.n	8001eea <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ed8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001eda:	2b12      	cmp	r3, #18
 8001edc:	d10a      	bne.n	8001ef4 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ede:	6802      	ldr	r2, [r0, #0]
 8001ee0:	6813      	ldr	r3, [r2, #0]
 8001ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	e004      	b.n	8001ef4 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eea:	6822      	ldr	r2, [r4, #0]
 8001eec:	6813      	ldr	r3, [r2, #0]
 8001eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef2:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ef4:	9600      	str	r6, [sp, #0]
 8001ef6:	462b      	mov	r3, r5
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001efe:	4620      	mov	r0, r4
 8001f00:	f7ff ff51 	bl	8001da6 <I2C_WaitOnFlagUntilTimeout>
 8001f04:	bb18      	cbnz	r0, 8001f4e <I2C_MasterRequestWrite+0x92>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f06:	6923      	ldr	r3, [r4, #16]
 8001f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f0c:	d10d      	bne.n	8001f2a <I2C_MasterRequestWrite+0x6e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f0e:	6823      	ldr	r3, [r4, #0]
 8001f10:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8001f14:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f16:	4633      	mov	r3, r6
 8001f18:	462a      	mov	r2, r5
 8001f1a:	4910      	ldr	r1, [pc, #64]	; (8001f5c <I2C_MasterRequestWrite+0xa0>)
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f7ff ff7a 	bl	8001e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f22:	4603      	mov	r3, r0
 8001f24:	b1a0      	cbz	r0, 8001f50 <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e012      	b.n	8001f50 <I2C_MasterRequestWrite+0x94>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f2a:	11fb      	asrs	r3, r7, #7
 8001f2c:	6822      	ldr	r2, [r4, #0]
 8001f2e:	f003 0306 	and.w	r3, r3, #6
 8001f32:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001f36:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f38:	4633      	mov	r3, r6
 8001f3a:	462a      	mov	r2, r5
 8001f3c:	4908      	ldr	r1, [pc, #32]	; (8001f60 <I2C_MasterRequestWrite+0xa4>)
 8001f3e:	4620      	mov	r0, r4
 8001f40:	f7ff ff69 	bl	8001e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f44:	b938      	cbnz	r0, 8001f56 <I2C_MasterRequestWrite+0x9a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	b2ff      	uxtb	r7, r7
 8001f4a:	611f      	str	r7, [r3, #16]
 8001f4c:	e7e3      	b.n	8001f16 <I2C_MasterRequestWrite+0x5a>
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	b003      	add	sp, #12
 8001f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e7fa      	b.n	8001f50 <I2C_MasterRequestWrite+0x94>
 8001f5a:	bf00      	nop
 8001f5c:	00010002 	.word	0x00010002
 8001f60:	00010008 	.word	0x00010008

08001f64 <I2C_MasterRequestRead>:
{
 8001f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	460d      	mov	r5, r1
 8001f6e:	4616      	mov	r6, r2
 8001f70:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f72:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f74:	6801      	ldr	r1, [r0, #0]
 8001f76:	680b      	ldr	r3, [r1, #0]
 8001f78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f7c:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f7e:	2a08      	cmp	r2, #8
 8001f80:	d00d      	beq.n	8001f9e <I2C_MasterRequestRead+0x3a>
 8001f82:	2a01      	cmp	r2, #1
 8001f84:	d00b      	beq.n	8001f9e <I2C_MasterRequestRead+0x3a>
 8001f86:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001f8a:	d008      	beq.n	8001f9e <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001f8c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001f8e:	2b11      	cmp	r3, #17
 8001f90:	d10a      	bne.n	8001fa8 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f92:	6802      	ldr	r2, [r0, #0]
 8001f94:	6813      	ldr	r3, [r2, #0]
 8001f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	e004      	b.n	8001fa8 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f9e:	6822      	ldr	r2, [r4, #0]
 8001fa0:	6813      	ldr	r3, [r2, #0]
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa6:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fa8:	9700      	str	r7, [sp, #0]
 8001faa:	4633      	mov	r3, r6
 8001fac:	2200      	movs	r2, #0
 8001fae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f7ff fef7 	bl	8001da6 <I2C_WaitOnFlagUntilTimeout>
 8001fb8:	2800      	cmp	r0, #0
 8001fba:	d149      	bne.n	8002050 <I2C_MasterRequestRead+0xec>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fbc:	6923      	ldr	r3, [r4, #16]
 8001fbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fc2:	d10f      	bne.n	8001fe4 <I2C_MasterRequestRead+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001fc4:	6823      	ldr	r3, [r4, #0]
 8001fc6:	f045 0501 	orr.w	r5, r5, #1
 8001fca:	b2ed      	uxtb	r5, r5
 8001fcc:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fce:	463b      	mov	r3, r7
 8001fd0:	4632      	mov	r2, r6
 8001fd2:	4923      	ldr	r1, [pc, #140]	; (8002060 <I2C_MasterRequestRead+0xfc>)
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f7ff ff1e 	bl	8001e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2800      	cmp	r0, #0
 8001fde:	d038      	beq.n	8002052 <I2C_MasterRequestRead+0xee>
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e036      	b.n	8002052 <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fe4:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8001fe8:	f008 0806 	and.w	r8, r8, #6
 8001fec:	6823      	ldr	r3, [r4, #0]
 8001fee:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8001ff2:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ff4:	463b      	mov	r3, r7
 8001ff6:	4632      	mov	r2, r6
 8001ff8:	491a      	ldr	r1, [pc, #104]	; (8002064 <I2C_MasterRequestRead+0x100>)
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	f7ff ff0b 	bl	8001e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002000:	b108      	cbz	r0, 8002006 <I2C_MasterRequestRead+0xa2>
      return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e025      	b.n	8002052 <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002006:	6823      	ldr	r3, [r4, #0]
 8002008:	b2ed      	uxtb	r5, r5
 800200a:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800200c:	463b      	mov	r3, r7
 800200e:	4632      	mov	r2, r6
 8002010:	4913      	ldr	r1, [pc, #76]	; (8002060 <I2C_MasterRequestRead+0xfc>)
 8002012:	4620      	mov	r0, r4
 8002014:	f7ff feff 	bl	8001e16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002018:	b108      	cbz	r0, 800201e <I2C_MasterRequestRead+0xba>
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e019      	b.n	8002052 <I2C_MasterRequestRead+0xee>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800201e:	2200      	movs	r2, #0
 8002020:	9203      	str	r2, [sp, #12]
 8002022:	6823      	ldr	r3, [r4, #0]
 8002024:	6959      	ldr	r1, [r3, #20]
 8002026:	9103      	str	r1, [sp, #12]
 8002028:	6999      	ldr	r1, [r3, #24]
 800202a:	9103      	str	r1, [sp, #12]
 800202c:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800202e:	6819      	ldr	r1, [r3, #0]
 8002030:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002034:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002036:	9700      	str	r7, [sp, #0]
 8002038:	4633      	mov	r3, r6
 800203a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800203e:	4620      	mov	r0, r4
 8002040:	f7ff feb1 	bl	8001da6 <I2C_WaitOnFlagUntilTimeout>
 8002044:	b948      	cbnz	r0, 800205a <I2C_MasterRequestRead+0xf6>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002046:	6822      	ldr	r2, [r4, #0]
 8002048:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 800204c:	6113      	str	r3, [r2, #16]
 800204e:	e7be      	b.n	8001fce <I2C_MasterRequestRead+0x6a>
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
}
 8002052:	4618      	mov	r0, r3
 8002054:	b004      	add	sp, #16
 8002056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e7f9      	b.n	8002052 <I2C_MasterRequestRead+0xee>
 800205e:	bf00      	nop
 8002060:	00010002 	.word	0x00010002
 8002064:	00010008 	.word	0x00010008

08002068 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002068:	b570      	push	{r4, r5, r6, lr}
 800206a:	4604      	mov	r4, r0
 800206c:	460d      	mov	r5, r1
 800206e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002070:	6823      	ldr	r3, [r4, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002078:	d11c      	bne.n	80020b4 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800207a:	4620      	mov	r0, r4
 800207c:	f7ff fe7a 	bl	8001d74 <I2C_IsAcknowledgeFailed>
 8002080:	b9d0      	cbnz	r0, 80020b8 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002082:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002086:	d0f3      	beq.n	8002070 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002088:	f7ff fb68 	bl	800175c <HAL_GetTick>
 800208c:	1b80      	subs	r0, r0, r6
 800208e:	42a8      	cmp	r0, r5
 8002090:	d801      	bhi.n	8002096 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002092:	2d00      	cmp	r5, #0
 8002094:	d1ec      	bne.n	8002070 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002096:	2300      	movs	r3, #0
 8002098:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800209a:	2220      	movs	r2, #32
 800209c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020a0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80020a6:	f042 0220 	orr.w	r2, r2, #32
 80020aa:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80020ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80020b0:	2001      	movs	r0, #1
 80020b2:	e000      	b.n	80020b6 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 80020b4:	2000      	movs	r0, #0
}
 80020b6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80020b8:	2001      	movs	r0, #1
 80020ba:	e7fc      	b.n	80020b6 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

080020bc <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80020bc:	b570      	push	{r4, r5, r6, lr}
 80020be:	4604      	mov	r4, r0
 80020c0:	460d      	mov	r5, r1
 80020c2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020c4:	6823      	ldr	r3, [r4, #0]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	f013 0f04 	tst.w	r3, #4
 80020cc:	d11c      	bne.n	8002108 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020ce:	4620      	mov	r0, r4
 80020d0:	f7ff fe50 	bl	8001d74 <I2C_IsAcknowledgeFailed>
 80020d4:	b9d0      	cbnz	r0, 800210c <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80020d6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80020da:	d0f3      	beq.n	80020c4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020dc:	f7ff fb3e 	bl	800175c <HAL_GetTick>
 80020e0:	1b80      	subs	r0, r0, r6
 80020e2:	42a8      	cmp	r0, r5
 80020e4:	d801      	bhi.n	80020ea <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80020e6:	2d00      	cmp	r5, #0
 80020e8:	d1ec      	bne.n	80020c4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020ee:	2220      	movs	r2, #32
 80020f0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80020fa:	f042 0220 	orr.w	r2, r2, #32
 80020fe:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002100:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002104:	2001      	movs	r0, #1
 8002106:	e000      	b.n	800210a <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002108:	2000      	movs	r0, #0
}
 800210a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800210c:	2001      	movs	r0, #1
 800210e:	e7fc      	b.n	800210a <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08002110 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002110:	b570      	push	{r4, r5, r6, lr}
 8002112:	4605      	mov	r5, r0
 8002114:	460c      	mov	r4, r1
 8002116:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002118:	682b      	ldr	r3, [r5, #0]
 800211a:	695a      	ldr	r2, [r3, #20]
 800211c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002120:	d129      	bne.n	8002176 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	f012 0f10 	tst.w	r2, #16
 8002128:	d115      	bne.n	8002156 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800212a:	f7ff fb17 	bl	800175c <HAL_GetTick>
 800212e:	1b80      	subs	r0, r0, r6
 8002130:	42a0      	cmp	r0, r4
 8002132:	d801      	bhi.n	8002138 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8002134:	2c00      	cmp	r4, #0
 8002136:	d1ef      	bne.n	8002118 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002138:	2300      	movs	r3, #0
 800213a:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800213c:	2220      	movs	r2, #32
 800213e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002142:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002146:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002148:	f042 0220 	orr.w	r2, r2, #32
 800214c:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800214e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002152:	2001      	movs	r0, #1
}
 8002154:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002156:	f06f 0210 	mvn.w	r2, #16
 800215a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800215c:	2300      	movs	r3, #0
 800215e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002160:	2220      	movs	r2, #32
 8002162:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002166:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800216a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800216c:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800216e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002172:	2001      	movs	r0, #1
 8002174:	e7ee      	b.n	8002154 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8002176:	2000      	movs	r0, #0
 8002178:	e7ec      	b.n	8002154 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

0800217c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800217c:	2800      	cmp	r0, #0
 800217e:	f000 80be 	beq.w	80022fe <HAL_I2C_Init+0x182>
{
 8002182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002184:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002186:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800218a:	2b00      	cmp	r3, #0
 800218c:	d06b      	beq.n	8002266 <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800218e:	2324      	movs	r3, #36	; 0x24
 8002190:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002194:	6822      	ldr	r2, [r4, #0]
 8002196:	6813      	ldr	r3, [r2, #0]
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800219e:	f000 fe8b 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021a2:	6862      	ldr	r2, [r4, #4]
 80021a4:	4b58      	ldr	r3, [pc, #352]	; (8002308 <HAL_I2C_Init+0x18c>)
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d862      	bhi.n	8002270 <HAL_I2C_Init+0xf4>
 80021aa:	4b58      	ldr	r3, [pc, #352]	; (800230c <HAL_I2C_Init+0x190>)
 80021ac:	4298      	cmp	r0, r3
 80021ae:	bf8c      	ite	hi
 80021b0:	2300      	movhi	r3, #0
 80021b2:	2301      	movls	r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f040 80a4 	bne.w	8002302 <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 80021ba:	4b55      	ldr	r3, [pc, #340]	; (8002310 <HAL_I2C_Init+0x194>)
 80021bc:	fba3 2300 	umull	r2, r3, r3, r0
 80021c0:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021c2:	6821      	ldr	r1, [r4, #0]
 80021c4:	684a      	ldr	r2, [r1, #4]
 80021c6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80021ca:	431a      	orrs	r2, r3
 80021cc:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021ce:	6825      	ldr	r5, [r4, #0]
 80021d0:	6a2a      	ldr	r2, [r5, #32]
 80021d2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80021d6:	6866      	ldr	r6, [r4, #4]
 80021d8:	494b      	ldr	r1, [pc, #300]	; (8002308 <HAL_I2C_Init+0x18c>)
 80021da:	428e      	cmp	r6, r1
 80021dc:	d84e      	bhi.n	800227c <HAL_I2C_Init+0x100>
 80021de:	3301      	adds	r3, #1
 80021e0:	4313      	orrs	r3, r2
 80021e2:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021e4:	6825      	ldr	r5, [r4, #0]
 80021e6:	69e9      	ldr	r1, [r5, #28]
 80021e8:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80021ec:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80021f0:	6863      	ldr	r3, [r4, #4]
 80021f2:	4a45      	ldr	r2, [pc, #276]	; (8002308 <HAL_I2C_Init+0x18c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d84b      	bhi.n	8002290 <HAL_I2C_Init+0x114>
 80021f8:	3801      	subs	r0, #1
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002200:	3301      	adds	r3, #1
 8002202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002206:	2b04      	cmp	r3, #4
 8002208:	bf38      	it	cc
 800220a:	2304      	movcc	r3, #4
 800220c:	430b      	orrs	r3, r1
 800220e:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002210:	6821      	ldr	r1, [r4, #0]
 8002212:	680b      	ldr	r3, [r1, #0]
 8002214:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002218:	69e2      	ldr	r2, [r4, #28]
 800221a:	6a20      	ldr	r0, [r4, #32]
 800221c:	4302      	orrs	r2, r0
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002222:	6821      	ldr	r1, [r4, #0]
 8002224:	688b      	ldr	r3, [r1, #8]
 8002226:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800222a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800222e:	6922      	ldr	r2, [r4, #16]
 8002230:	68e0      	ldr	r0, [r4, #12]
 8002232:	4302      	orrs	r2, r0
 8002234:	4313      	orrs	r3, r2
 8002236:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002238:	6821      	ldr	r1, [r4, #0]
 800223a:	68cb      	ldr	r3, [r1, #12]
 800223c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002240:	6962      	ldr	r2, [r4, #20]
 8002242:	69a0      	ldr	r0, [r4, #24]
 8002244:	4302      	orrs	r2, r0
 8002246:	4313      	orrs	r3, r2
 8002248:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800224a:	6822      	ldr	r2, [r4, #0]
 800224c:	6813      	ldr	r3, [r2, #0]
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002254:	2000      	movs	r0, #0
 8002256:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002258:	2320      	movs	r3, #32
 800225a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800225e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002260:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8002264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002266:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800226a:	f003 fbc9 	bl	8005a00 <HAL_I2C_MspInit>
 800226e:	e78e      	b.n	800218e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002270:	4b28      	ldr	r3, [pc, #160]	; (8002314 <HAL_I2C_Init+0x198>)
 8002272:	4298      	cmp	r0, r3
 8002274:	bf8c      	ite	hi
 8002276:	2300      	movhi	r3, #0
 8002278:	2301      	movls	r3, #1
 800227a:	e79b      	b.n	80021b4 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800227c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	4924      	ldr	r1, [pc, #144]	; (8002318 <HAL_I2C_Init+0x19c>)
 8002286:	fba1 1303 	umull	r1, r3, r1, r3
 800228a:	099b      	lsrs	r3, r3, #6
 800228c:	3301      	adds	r3, #1
 800228e:	e7a7      	b.n	80021e0 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002290:	68a2      	ldr	r2, [r4, #8]
 8002292:	b9ba      	cbnz	r2, 80022c4 <HAL_I2C_Init+0x148>
 8002294:	1e46      	subs	r6, r0, #1
 8002296:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 800229a:	fbb6 f6f7 	udiv	r6, r6, r7
 800229e:	3601      	adds	r6, #1
 80022a0:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80022a4:	fab6 f686 	clz	r6, r6
 80022a8:	0976      	lsrs	r6, r6, #5
 80022aa:	bb36      	cbnz	r6, 80022fa <HAL_I2C_Init+0x17e>
 80022ac:	b9c2      	cbnz	r2, 80022e0 <HAL_I2C_Init+0x164>
 80022ae:	3801      	subs	r0, #1
 80022b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80022b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b8:	3301      	adds	r3, #1
 80022ba:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80022be:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80022c2:	e7a3      	b.n	800220c <HAL_I2C_Init+0x90>
 80022c4:	1e46      	subs	r6, r0, #1
 80022c6:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80022ca:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80022ce:	fbb6 f6f7 	udiv	r6, r6, r7
 80022d2:	3601      	adds	r6, #1
 80022d4:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80022d8:	fab6 f686 	clz	r6, r6
 80022dc:	0976      	lsrs	r6, r6, #5
 80022de:	e7e4      	b.n	80022aa <HAL_I2C_Init+0x12e>
 80022e0:	3801      	subs	r0, #1
 80022e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80022e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80022ea:	fbb0 f2f3 	udiv	r2, r0, r3
 80022ee:	3201      	adds	r2, #1
 80022f0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80022f4:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80022f8:	e788      	b.n	800220c <HAL_I2C_Init+0x90>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e786      	b.n	800220c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80022fe:	2001      	movs	r0, #1
}
 8002300:	4770      	bx	lr
    return HAL_ERROR;
 8002302:	2001      	movs	r0, #1
 8002304:	e7ae      	b.n	8002264 <HAL_I2C_Init+0xe8>
 8002306:	bf00      	nop
 8002308:	000186a0 	.word	0x000186a0
 800230c:	001e847f 	.word	0x001e847f
 8002310:	431bde83 	.word	0x431bde83
 8002314:	003d08ff 	.word	0x003d08ff
 8002318:	10624dd3 	.word	0x10624dd3

0800231c <HAL_I2C_Master_Transmit>:
{
 800231c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	4604      	mov	r4, r0
 8002324:	460e      	mov	r6, r1
 8002326:	4690      	mov	r8, r2
 8002328:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800232a:	f7ff fa17 	bl	800175c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800232e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b20      	cmp	r3, #32
 8002336:	d004      	beq.n	8002342 <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8002338:	2602      	movs	r6, #2
}
 800233a:	4630      	mov	r0, r6
 800233c:	b004      	add	sp, #16
 800233e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002342:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002344:	9000      	str	r0, [sp, #0]
 8002346:	2319      	movs	r3, #25
 8002348:	2201      	movs	r2, #1
 800234a:	494f      	ldr	r1, [pc, #316]	; (8002488 <HAL_I2C_Master_Transmit+0x16c>)
 800234c:	4620      	mov	r0, r4
 800234e:	f7ff fd2a 	bl	8001da6 <I2C_WaitOnFlagUntilTimeout>
 8002352:	2800      	cmp	r0, #0
 8002354:	f040 8091 	bne.w	800247a <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 8002358:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800235c:	2b01      	cmp	r3, #1
 800235e:	f000 808e 	beq.w	800247e <HAL_I2C_Master_Transmit+0x162>
 8002362:	2301      	movs	r3, #1
 8002364:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	f012 0f01 	tst.w	r2, #1
 8002370:	d103      	bne.n	800237a <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	f042 0201 	orr.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800237a:	6822      	ldr	r2, [r4, #0]
 800237c:	6813      	ldr	r3, [r2, #0]
 800237e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002382:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002384:	2321      	movs	r3, #33	; 0x21
 8002386:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800238a:	2310      	movs	r3, #16
 800238c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002390:	2300      	movs	r3, #0
 8002392:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002394:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002398:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800239a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800239c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800239e:	4b3b      	ldr	r3, [pc, #236]	; (800248c <HAL_I2C_Master_Transmit+0x170>)
 80023a0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023a2:	462b      	mov	r3, r5
 80023a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80023a6:	4631      	mov	r1, r6
 80023a8:	4620      	mov	r0, r4
 80023aa:	f7ff fd87 	bl	8001ebc <I2C_MasterRequestWrite>
 80023ae:	4606      	mov	r6, r0
 80023b0:	2800      	cmp	r0, #0
 80023b2:	d166      	bne.n	8002482 <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b4:	2300      	movs	r3, #0
 80023b6:	9303      	str	r3, [sp, #12]
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	9203      	str	r2, [sp, #12]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	9303      	str	r3, [sp, #12]
 80023c2:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80023c4:	e012      	b.n	80023ec <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d001      	beq.n	80023d0 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 80023cc:	2601      	movs	r6, #1
 80023ce:	e7b4      	b.n	800233a <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d0:	6822      	ldr	r2, [r4, #0]
 80023d2:	6813      	ldr	r3, [r2, #0]
 80023d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d8:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80023da:	2601      	movs	r6, #1
 80023dc:	e7ad      	b.n	800233a <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023de:	462a      	mov	r2, r5
 80023e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80023e2:	4620      	mov	r0, r4
 80023e4:	f7ff fe6a 	bl	80020bc <I2C_WaitOnBTFFlagUntilTimeout>
 80023e8:	2800      	cmp	r0, #0
 80023ea:	d12c      	bne.n	8002446 <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 80023ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d035      	beq.n	800245e <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f2:	462a      	mov	r2, r5
 80023f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80023f6:	4620      	mov	r0, r4
 80023f8:	f7ff fe36 	bl	8002068 <I2C_WaitOnTXEFlagUntilTimeout>
 80023fc:	2800      	cmp	r0, #0
 80023fe:	d1e2      	bne.n	80023c6 <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002400:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	7812      	ldrb	r2, [r2, #0]
 8002406:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002408:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800240a:	1c4b      	adds	r3, r1, #1
 800240c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800240e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002410:	3b01      	subs	r3, #1
 8002412:	b29b      	uxth	r3, r3
 8002414:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002416:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002418:	3b01      	subs	r3, #1
 800241a:	b29b      	uxth	r3, r3
 800241c:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800241e:	6822      	ldr	r2, [r4, #0]
 8002420:	6950      	ldr	r0, [r2, #20]
 8002422:	f010 0f04 	tst.w	r0, #4
 8002426:	d0da      	beq.n	80023de <HAL_I2C_Master_Transmit+0xc2>
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0d8      	beq.n	80023de <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800242c:	784b      	ldrb	r3, [r1, #1]
 800242e:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8002430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002432:	3301      	adds	r3, #1
 8002434:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002436:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002438:	3b01      	subs	r3, #1
 800243a:	b29b      	uxth	r3, r3
 800243c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800243e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002440:	3b01      	subs	r3, #1
 8002442:	8523      	strh	r3, [r4, #40]	; 0x28
 8002444:	e7cb      	b.n	80023de <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002446:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002448:	2b04      	cmp	r3, #4
 800244a:	d001      	beq.n	8002450 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 800244c:	2601      	movs	r6, #1
 800244e:	e774      	b.n	800233a <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002450:	6822      	ldr	r2, [r4, #0]
 8002452:	6813      	ldr	r3, [r2, #0]
 8002454:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002458:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 800245a:	2601      	movs	r6, #1
 800245c:	e76d      	b.n	800233a <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245e:	6822      	ldr	r2, [r4, #0]
 8002460:	6813      	ldr	r3, [r2, #0]
 8002462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002466:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002468:	2320      	movs	r3, #32
 800246a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800246e:	2300      	movs	r3, #0
 8002470:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002474:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002478:	e75f      	b.n	800233a <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 800247a:	2602      	movs	r6, #2
 800247c:	e75d      	b.n	800233a <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 800247e:	2602      	movs	r6, #2
 8002480:	e75b      	b.n	800233a <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8002482:	2601      	movs	r6, #1
 8002484:	e759      	b.n	800233a <HAL_I2C_Master_Transmit+0x1e>
 8002486:	bf00      	nop
 8002488:	00100002 	.word	0x00100002
 800248c:	ffff0000 	.word	0xffff0000

08002490 <HAL_I2C_Master_Receive>:
{
 8002490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002494:	b086      	sub	sp, #24
 8002496:	4604      	mov	r4, r0
 8002498:	460e      	mov	r6, r1
 800249a:	4690      	mov	r8, r2
 800249c:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800249e:	f7ff f95d 	bl	800175c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d004      	beq.n	80024b6 <HAL_I2C_Master_Receive+0x26>
    return HAL_BUSY;
 80024ac:	2602      	movs	r6, #2
}
 80024ae:	4630      	mov	r0, r6
 80024b0:	b006      	add	sp, #24
 80024b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024b6:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024b8:	9000      	str	r0, [sp, #0]
 80024ba:	2319      	movs	r3, #25
 80024bc:	2201      	movs	r2, #1
 80024be:	499e      	ldr	r1, [pc, #632]	; (8002738 <HAL_I2C_Master_Receive+0x2a8>)
 80024c0:	4620      	mov	r0, r4
 80024c2:	f7ff fc70 	bl	8001da6 <I2C_WaitOnFlagUntilTimeout>
 80024c6:	2800      	cmp	r0, #0
 80024c8:	f040 8134 	bne.w	8002734 <HAL_I2C_Master_Receive+0x2a4>
    __HAL_LOCK(hi2c);
 80024cc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	f000 8137 	beq.w	8002744 <HAL_I2C_Master_Receive+0x2b4>
 80024d6:	2301      	movs	r3, #1
 80024d8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024dc:	6823      	ldr	r3, [r4, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	f012 0f01 	tst.w	r2, #1
 80024e4:	d103      	bne.n	80024ee <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	f042 0201 	orr.w	r2, r2, #1
 80024ec:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024ee:	6822      	ldr	r2, [r4, #0]
 80024f0:	6813      	ldr	r3, [r2, #0]
 80024f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024f6:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80024f8:	2322      	movs	r3, #34	; 0x22
 80024fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024fe:	2310      	movs	r3, #16
 8002500:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002504:	2300      	movs	r3, #0
 8002506:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002508:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800250c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800250e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002510:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002512:	4b8a      	ldr	r3, [pc, #552]	; (800273c <HAL_I2C_Master_Receive+0x2ac>)
 8002514:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002516:	462b      	mov	r3, r5
 8002518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800251a:	4631      	mov	r1, r6
 800251c:	4620      	mov	r0, r4
 800251e:	f7ff fd21 	bl	8001f64 <I2C_MasterRequestRead>
 8002522:	4606      	mov	r6, r0
 8002524:	2800      	cmp	r0, #0
 8002526:	f040 810f 	bne.w	8002748 <HAL_I2C_Master_Receive+0x2b8>
    if (hi2c->XferSize == 0U)
 800252a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800252c:	b95b      	cbnz	r3, 8002546 <HAL_I2C_Master_Receive+0xb6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252e:	9302      	str	r3, [sp, #8]
 8002530:	6823      	ldr	r3, [r4, #0]
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	9202      	str	r2, [sp, #8]
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	9202      	str	r2, [sp, #8]
 800253a:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	e077      	b.n	8002636 <HAL_I2C_Master_Receive+0x1a6>
    else if (hi2c->XferSize == 1U)
 8002546:	2b01      	cmp	r3, #1
 8002548:	d00f      	beq.n	800256a <HAL_I2C_Master_Receive+0xda>
    else if (hi2c->XferSize == 2U)
 800254a:	2b02      	cmp	r3, #2
 800254c:	d01f      	beq.n	800258e <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800254e:	6822      	ldr	r2, [r4, #0]
 8002550:	6813      	ldr	r3, [r2, #0]
 8002552:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002556:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002558:	2300      	movs	r3, #0
 800255a:	9305      	str	r3, [sp, #20]
 800255c:	6823      	ldr	r3, [r4, #0]
 800255e:	695a      	ldr	r2, [r3, #20]
 8002560:	9205      	str	r2, [sp, #20]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	9305      	str	r3, [sp, #20]
 8002566:	9b05      	ldr	r3, [sp, #20]
 8002568:	e065      	b.n	8002636 <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800256a:	6822      	ldr	r2, [r4, #0]
 800256c:	6813      	ldr	r3, [r2, #0]
 800256e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002572:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002574:	2300      	movs	r3, #0
 8002576:	9303      	str	r3, [sp, #12]
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	9203      	str	r2, [sp, #12]
 800257e:	699a      	ldr	r2, [r3, #24]
 8002580:	9203      	str	r2, [sp, #12]
 8002582:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	e053      	b.n	8002636 <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800258e:	6822      	ldr	r2, [r4, #0]
 8002590:	6813      	ldr	r3, [r2, #0]
 8002592:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002596:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002598:	6822      	ldr	r2, [r4, #0]
 800259a:	6813      	ldr	r3, [r2, #0]
 800259c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025a0:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a2:	2300      	movs	r3, #0
 80025a4:	9304      	str	r3, [sp, #16]
 80025a6:	6823      	ldr	r3, [r4, #0]
 80025a8:	695a      	ldr	r2, [r3, #20]
 80025aa:	9204      	str	r2, [sp, #16]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	9304      	str	r3, [sp, #16]
 80025b0:	9b04      	ldr	r3, [sp, #16]
 80025b2:	e040      	b.n	8002636 <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b4:	462a      	mov	r2, r5
 80025b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80025b8:	4620      	mov	r0, r4
 80025ba:	f7ff fda9 	bl	8002110 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025be:	2800      	cmp	r0, #0
 80025c0:	f040 80c4 	bne.w	800274c <HAL_I2C_Master_Receive+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025ca:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80025cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025ce:	3301      	adds	r3, #1
 80025d0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80025d2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80025d4:	3b01      	subs	r3, #1
 80025d6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80025d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29b      	uxth	r3, r3
 80025de:	8563      	strh	r3, [r4, #42]	; 0x2a
 80025e0:	e029      	b.n	8002636 <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025e2:	9500      	str	r5, [sp, #0]
 80025e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80025e6:	2200      	movs	r2, #0
 80025e8:	4955      	ldr	r1, [pc, #340]	; (8002740 <HAL_I2C_Master_Receive+0x2b0>)
 80025ea:	4620      	mov	r0, r4
 80025ec:	f7ff fbdb 	bl	8001da6 <I2C_WaitOnFlagUntilTimeout>
 80025f0:	2800      	cmp	r0, #0
 80025f2:	f040 80ad 	bne.w	8002750 <HAL_I2C_Master_Receive+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f6:	6822      	ldr	r2, [r4, #0]
 80025f8:	6813      	ldr	r3, [r2, #0]
 80025fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025fe:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002600:	6823      	ldr	r3, [r4, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002606:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002608:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800260a:	1c53      	adds	r3, r2, #1
 800260c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800260e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002610:	3b01      	subs	r3, #1
 8002612:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002614:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002616:	3b01      	subs	r3, #1
 8002618:	b29b      	uxth	r3, r3
 800261a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002624:	3301      	adds	r3, #1
 8002626:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002628:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800262a:	3b01      	subs	r3, #1
 800262c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800262e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002630:	3b01      	subs	r3, #1
 8002632:	b29b      	uxth	r3, r3
 8002634:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002636:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002638:	2b00      	cmp	r3, #0
 800263a:	d072      	beq.n	8002722 <HAL_I2C_Master_Receive+0x292>
      if (hi2c->XferSize <= 3U)
 800263c:	2b03      	cmp	r3, #3
 800263e:	d849      	bhi.n	80026d4 <HAL_I2C_Master_Receive+0x244>
        if (hi2c->XferSize == 1U)
 8002640:	2b01      	cmp	r3, #1
 8002642:	d0b7      	beq.n	80025b4 <HAL_I2C_Master_Receive+0x124>
        else if (hi2c->XferSize == 2U)
 8002644:	2b02      	cmp	r3, #2
 8002646:	d0cc      	beq.n	80025e2 <HAL_I2C_Master_Receive+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002648:	9500      	str	r5, [sp, #0]
 800264a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800264c:	2200      	movs	r2, #0
 800264e:	493c      	ldr	r1, [pc, #240]	; (8002740 <HAL_I2C_Master_Receive+0x2b0>)
 8002650:	4620      	mov	r0, r4
 8002652:	f7ff fba8 	bl	8001da6 <I2C_WaitOnFlagUntilTimeout>
 8002656:	2800      	cmp	r0, #0
 8002658:	d17c      	bne.n	8002754 <HAL_I2C_Master_Receive+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265a:	6822      	ldr	r2, [r4, #0]
 800265c:	6813      	ldr	r3, [r2, #0]
 800265e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002662:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800266a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800266c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800266e:	3301      	adds	r3, #1
 8002670:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002672:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002674:	3b01      	subs	r3, #1
 8002676:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002678:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800267a:	3b01      	subs	r3, #1
 800267c:	b29b      	uxth	r3, r3
 800267e:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002680:	9500      	str	r5, [sp, #0]
 8002682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002684:	2200      	movs	r2, #0
 8002686:	492e      	ldr	r1, [pc, #184]	; (8002740 <HAL_I2C_Master_Receive+0x2b0>)
 8002688:	4620      	mov	r0, r4
 800268a:	f7ff fb8c 	bl	8001da6 <I2C_WaitOnFlagUntilTimeout>
 800268e:	2800      	cmp	r0, #0
 8002690:	d162      	bne.n	8002758 <HAL_I2C_Master_Receive+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002692:	6822      	ldr	r2, [r4, #0]
 8002694:	6813      	ldr	r3, [r2, #0]
 8002696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800269a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026a2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80026a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026a6:	1c53      	adds	r3, r2, #1
 80026a8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80026aa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80026ac:	3b01      	subs	r3, #1
 80026ae:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80026b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b8:	6823      	ldr	r3, [r4, #0]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80026be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026c0:	3301      	adds	r3, #1
 80026c2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80026c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80026c6:	3b01      	subs	r3, #1
 80026c8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80026ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80026d2:	e7b0      	b.n	8002636 <HAL_I2C_Master_Receive+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d4:	462a      	mov	r2, r5
 80026d6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80026d8:	4620      	mov	r0, r4
 80026da:	f7ff fd19 	bl	8002110 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026de:	2800      	cmp	r0, #0
 80026e0:	d13c      	bne.n	800275c <HAL_I2C_Master_Receive+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80026ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026ec:	1c53      	adds	r3, r2, #1
 80026ee:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80026f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80026f2:	3b01      	subs	r3, #1
 80026f4:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80026f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	6959      	ldr	r1, [r3, #20]
 8002702:	f011 0f04 	tst.w	r1, #4
 8002706:	d096      	beq.n	8002636 <HAL_I2C_Master_Receive+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800270c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800270e:	3301      	adds	r3, #1
 8002710:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002712:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002714:	3b01      	subs	r3, #1
 8002716:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002718:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800271a:	3b01      	subs	r3, #1
 800271c:	b29b      	uxth	r3, r3
 800271e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002720:	e789      	b.n	8002636 <HAL_I2C_Master_Receive+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002722:	2320      	movs	r3, #32
 8002724:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002728:	2300      	movs	r3, #0
 800272a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800272e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002732:	e6bc      	b.n	80024ae <HAL_I2C_Master_Receive+0x1e>
      return HAL_BUSY;
 8002734:	2602      	movs	r6, #2
 8002736:	e6ba      	b.n	80024ae <HAL_I2C_Master_Receive+0x1e>
 8002738:	00100002 	.word	0x00100002
 800273c:	ffff0000 	.word	0xffff0000
 8002740:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 8002744:	2602      	movs	r6, #2
 8002746:	e6b2      	b.n	80024ae <HAL_I2C_Master_Receive+0x1e>
      return HAL_ERROR;
 8002748:	2601      	movs	r6, #1
 800274a:	e6b0      	b.n	80024ae <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 800274c:	2601      	movs	r6, #1
 800274e:	e6ae      	b.n	80024ae <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8002750:	2601      	movs	r6, #1
 8002752:	e6ac      	b.n	80024ae <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8002754:	2601      	movs	r6, #1
 8002756:	e6aa      	b.n	80024ae <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8002758:	2601      	movs	r6, #1
 800275a:	e6a8      	b.n	80024ae <HAL_I2C_Master_Receive+0x1e>
          return HAL_ERROR;
 800275c:	2601      	movs	r6, #1
 800275e:	e6a6      	b.n	80024ae <HAL_I2C_Master_Receive+0x1e>

08002760 <HAL_I2C_IsDeviceReady>:
{
 8002760:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002764:	b085      	sub	sp, #20
 8002766:	4604      	mov	r4, r0
 8002768:	4688      	mov	r8, r1
 800276a:	4691      	mov	r9, r2
 800276c:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800276e:	f7fe fff5 	bl	800175c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002772:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b20      	cmp	r3, #32
 800277a:	d004      	beq.n	8002786 <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 800277c:	2302      	movs	r3, #2
}
 800277e:	4618      	mov	r0, r3
 8002780:	b005      	add	sp, #20
 8002782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002786:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002788:	9000      	str	r0, [sp, #0]
 800278a:	2319      	movs	r3, #25
 800278c:	2201      	movs	r2, #1
 800278e:	4954      	ldr	r1, [pc, #336]	; (80028e0 <HAL_I2C_IsDeviceReady+0x180>)
 8002790:	4620      	mov	r0, r4
 8002792:	f7ff fb08 	bl	8001da6 <I2C_WaitOnFlagUntilTimeout>
 8002796:	2800      	cmp	r0, #0
 8002798:	f040 8097 	bne.w	80028ca <HAL_I2C_IsDeviceReady+0x16a>
    __HAL_LOCK(hi2c);
 800279c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	f000 8094 	beq.w	80028ce <HAL_I2C_IsDeviceReady+0x16e>
 80027a6:	2301      	movs	r3, #1
 80027a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	f012 0f01 	tst.w	r2, #1
 80027b4:	d103      	bne.n	80027be <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	f042 0201 	orr.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027be:	6822      	ldr	r2, [r4, #0]
 80027c0:	6813      	ldr	r3, [r2, #0]
 80027c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027c6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80027c8:	2324      	movs	r3, #36	; 0x24
 80027ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027d2:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80027d6:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 80027d8:	2701      	movs	r7, #1
 80027da:	e034      	b.n	8002846 <HAL_I2C_IsDeviceReady+0xe6>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80027dc:	23a0      	movs	r3, #160	; 0xa0
 80027de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027e2:	6823      	ldr	r3, [r4, #0]
 80027e4:	695a      	ldr	r2, [r3, #20]
 80027e6:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027ea:	6959      	ldr	r1, [r3, #20]
 80027ec:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027f0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2ba0      	cmp	r3, #160	; 0xa0
 80027f8:	d009      	beq.n	800280e <HAL_I2C_IsDeviceReady+0xae>
 80027fa:	b942      	cbnz	r2, 800280e <HAL_I2C_IsDeviceReady+0xae>
 80027fc:	b939      	cbnz	r1, 800280e <HAL_I2C_IsDeviceReady+0xae>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027fe:	f7fe ffad 	bl	800175c <HAL_GetTick>
 8002802:	1b80      	subs	r0, r0, r6
 8002804:	42a8      	cmp	r0, r5
 8002806:	d8e9      	bhi.n	80027dc <HAL_I2C_IsDeviceReady+0x7c>
 8002808:	2d00      	cmp	r5, #0
 800280a:	d1ea      	bne.n	80027e2 <HAL_I2C_IsDeviceReady+0x82>
 800280c:	e7e6      	b.n	80027dc <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->State = HAL_I2C_STATE_READY;
 800280e:	2320      	movs	r3, #32
 8002810:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002814:	6823      	ldr	r3, [r4, #0]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	f012 0f02 	tst.w	r2, #2
 800281c:	d131      	bne.n	8002882 <HAL_I2C_IsDeviceReady+0x122>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002824:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002826:	6823      	ldr	r3, [r4, #0]
 8002828:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800282c:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800282e:	9600      	str	r6, [sp, #0]
 8002830:	2319      	movs	r3, #25
 8002832:	2201      	movs	r2, #1
 8002834:	492a      	ldr	r1, [pc, #168]	; (80028e0 <HAL_I2C_IsDeviceReady+0x180>)
 8002836:	4620      	mov	r0, r4
 8002838:	f7ff fab5 	bl	8001da6 <I2C_WaitOnFlagUntilTimeout>
 800283c:	2800      	cmp	r0, #0
 800283e:	d14c      	bne.n	80028da <HAL_I2C_IsDeviceReady+0x17a>
      I2C_Trials++;
 8002840:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8002842:	454f      	cmp	r7, r9
 8002844:	d239      	bcs.n	80028ba <HAL_I2C_IsDeviceReady+0x15a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002846:	6822      	ldr	r2, [r4, #0]
 8002848:	6813      	ldr	r3, [r2, #0]
 800284a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284e:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002850:	9600      	str	r6, [sp, #0]
 8002852:	462b      	mov	r3, r5
 8002854:	2200      	movs	r2, #0
 8002856:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800285a:	4620      	mov	r0, r4
 800285c:	f7ff faa3 	bl	8001da6 <I2C_WaitOnFlagUntilTimeout>
 8002860:	2800      	cmp	r0, #0
 8002862:	d136      	bne.n	80028d2 <HAL_I2C_IsDeviceReady+0x172>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 800286a:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 800286c:	f7fe ff76 	bl	800175c <HAL_GetTick>
 8002870:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002872:	6823      	ldr	r3, [r4, #0]
 8002874:	695a      	ldr	r2, [r3, #20]
 8002876:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800287a:	6959      	ldr	r1, [r3, #20]
 800287c:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002880:	e7b6      	b.n	80027f0 <HAL_I2C_IsDeviceReady+0x90>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002888:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288a:	2300      	movs	r3, #0
 800288c:	9303      	str	r3, [sp, #12]
 800288e:	6823      	ldr	r3, [r4, #0]
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	9203      	str	r2, [sp, #12]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	9303      	str	r3, [sp, #12]
 8002898:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800289a:	9600      	str	r6, [sp, #0]
 800289c:	2319      	movs	r3, #25
 800289e:	2201      	movs	r2, #1
 80028a0:	490f      	ldr	r1, [pc, #60]	; (80028e0 <HAL_I2C_IsDeviceReady+0x180>)
 80028a2:	4620      	mov	r0, r4
 80028a4:	f7ff fa7f 	bl	8001da6 <I2C_WaitOnFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	b9a0      	cbnz	r0, 80028d6 <HAL_I2C_IsDeviceReady+0x176>
        hi2c->State = HAL_I2C_STATE_READY;
 80028ac:	2220      	movs	r2, #32
 80028ae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80028b2:	2200      	movs	r2, #0
 80028b4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 80028b8:	e761      	b.n	800277e <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 80028ba:	2320      	movs	r3, #32
 80028bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80028c0:	2300      	movs	r3, #0
 80028c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e759      	b.n	800277e <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
 80028cc:	e757      	b.n	800277e <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 80028ce:	2302      	movs	r3, #2
 80028d0:	e755      	b.n	800277e <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e753      	b.n	800277e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e751      	b.n	800277e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e74f      	b.n	800277e <HAL_I2C_IsDeviceReady+0x1e>
 80028de:	bf00      	nop
 80028e0:	00100002 	.word	0x00100002

080028e4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028e4:	2800      	cmp	r0, #0
 80028e6:	f000 81bb 	beq.w	8002c60 <HAL_RCC_OscConfig+0x37c>
{
 80028ea:	b570      	push	{r4, r5, r6, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f0:	6803      	ldr	r3, [r0, #0]
 80028f2:	f013 0f01 	tst.w	r3, #1
 80028f6:	d03b      	beq.n	8002970 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028f8:	4ba7      	ldr	r3, [pc, #668]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b04      	cmp	r3, #4
 8002902:	d02c      	beq.n	800295e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002904:	4ba4      	ldr	r3, [pc, #656]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800290c:	2b08      	cmp	r3, #8
 800290e:	d021      	beq.n	8002954 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002910:	6863      	ldr	r3, [r4, #4]
 8002912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002916:	d04f      	beq.n	80029b8 <HAL_RCC_OscConfig+0xd4>
 8002918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800291c:	d052      	beq.n	80029c4 <HAL_RCC_OscConfig+0xe0>
 800291e:	4b9e      	ldr	r3, [pc, #632]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800292e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002930:	6863      	ldr	r3, [r4, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d050      	beq.n	80029d8 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002936:	f7fe ff11 	bl	800175c <HAL_GetTick>
 800293a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293c:	4b96      	ldr	r3, [pc, #600]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002944:	d114      	bne.n	8002970 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002946:	f7fe ff09 	bl	800175c <HAL_GetTick>
 800294a:	1b40      	subs	r0, r0, r5
 800294c:	2864      	cmp	r0, #100	; 0x64
 800294e:	d9f5      	bls.n	800293c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002950:	2003      	movs	r0, #3
 8002952:	e18a      	b.n	8002c6a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002954:	4b90      	ldr	r3, [pc, #576]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800295c:	d0d8      	beq.n	8002910 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295e:	4b8e      	ldr	r3, [pc, #568]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002966:	d003      	beq.n	8002970 <HAL_RCC_OscConfig+0x8c>
 8002968:	6863      	ldr	r3, [r4, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 817a 	beq.w	8002c64 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	f013 0f02 	tst.w	r3, #2
 8002976:	d055      	beq.n	8002a24 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002978:	4b87      	ldr	r3, [pc, #540]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f013 0f0c 	tst.w	r3, #12
 8002980:	d03e      	beq.n	8002a00 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002982:	4b85      	ldr	r3, [pc, #532]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800298a:	2b08      	cmp	r3, #8
 800298c:	d033      	beq.n	80029f6 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800298e:	68e3      	ldr	r3, [r4, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d068      	beq.n	8002a66 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002994:	4b81      	ldr	r3, [pc, #516]	; (8002b9c <HAL_RCC_OscConfig+0x2b8>)
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7fe fedf 	bl	800175c <HAL_GetTick>
 800299e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a0:	4b7d      	ldr	r3, [pc, #500]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f013 0f02 	tst.w	r3, #2
 80029a8:	d154      	bne.n	8002a54 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029aa:	f7fe fed7 	bl	800175c <HAL_GetTick>
 80029ae:	1b40      	subs	r0, r0, r5
 80029b0:	2802      	cmp	r0, #2
 80029b2:	d9f5      	bls.n	80029a0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80029b4:	2003      	movs	r0, #3
 80029b6:	e158      	b.n	8002c6a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b8:	4a77      	ldr	r2, [pc, #476]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 80029ba:	6813      	ldr	r3, [r2, #0]
 80029bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e7b5      	b.n	8002930 <HAL_RCC_OscConfig+0x4c>
 80029c4:	4b74      	ldr	r3, [pc, #464]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	e7ab      	b.n	8002930 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80029d8:	f7fe fec0 	bl	800175c <HAL_GetTick>
 80029dc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029de:	4b6e      	ldr	r3, [pc, #440]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80029e6:	d0c3      	beq.n	8002970 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e8:	f7fe feb8 	bl	800175c <HAL_GetTick>
 80029ec:	1b40      	subs	r0, r0, r5
 80029ee:	2864      	cmp	r0, #100	; 0x64
 80029f0:	d9f5      	bls.n	80029de <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80029f2:	2003      	movs	r0, #3
 80029f4:	e139      	b.n	8002c6a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029f6:	4b68      	ldr	r3, [pc, #416]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80029fe:	d1c6      	bne.n	800298e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a00:	4b65      	ldr	r3, [pc, #404]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f013 0f02 	tst.w	r3, #2
 8002a08:	d004      	beq.n	8002a14 <HAL_RCC_OscConfig+0x130>
 8002a0a:	68e3      	ldr	r3, [r4, #12]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8002a10:	2001      	movs	r0, #1
 8002a12:	e12a      	b.n	8002c6a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a14:	4a60      	ldr	r2, [pc, #384]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 8002a16:	6813      	ldr	r3, [r2, #0]
 8002a18:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002a1c:	6921      	ldr	r1, [r4, #16]
 8002a1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a22:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	f013 0f08 	tst.w	r3, #8
 8002a2a:	d040      	beq.n	8002aae <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a2c:	6963      	ldr	r3, [r4, #20]
 8002a2e:	b363      	cbz	r3, 8002a8a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a30:	4b5b      	ldr	r3, [pc, #364]	; (8002ba0 <HAL_RCC_OscConfig+0x2bc>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a36:	f7fe fe91 	bl	800175c <HAL_GetTick>
 8002a3a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3c:	4b56      	ldr	r3, [pc, #344]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 8002a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a40:	f013 0f02 	tst.w	r3, #2
 8002a44:	d133      	bne.n	8002aae <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a46:	f7fe fe89 	bl	800175c <HAL_GetTick>
 8002a4a:	1b40      	subs	r0, r0, r5
 8002a4c:	2802      	cmp	r0, #2
 8002a4e:	d9f5      	bls.n	8002a3c <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002a50:	2003      	movs	r0, #3
 8002a52:	e10a      	b.n	8002c6a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a54:	4a50      	ldr	r2, [pc, #320]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 8002a56:	6813      	ldr	r3, [r2, #0]
 8002a58:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002a5c:	6921      	ldr	r1, [r4, #16]
 8002a5e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	e7de      	b.n	8002a24 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002a66:	4b4d      	ldr	r3, [pc, #308]	; (8002b9c <HAL_RCC_OscConfig+0x2b8>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fe76 	bl	800175c <HAL_GetTick>
 8002a70:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a72:	4b49      	ldr	r3, [pc, #292]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f013 0f02 	tst.w	r3, #2
 8002a7a:	d0d3      	beq.n	8002a24 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a7c:	f7fe fe6e 	bl	800175c <HAL_GetTick>
 8002a80:	1b40      	subs	r0, r0, r5
 8002a82:	2802      	cmp	r0, #2
 8002a84:	d9f5      	bls.n	8002a72 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8002a86:	2003      	movs	r0, #3
 8002a88:	e0ef      	b.n	8002c6a <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a8a:	4b45      	ldr	r3, [pc, #276]	; (8002ba0 <HAL_RCC_OscConfig+0x2bc>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a90:	f7fe fe64 	bl	800175c <HAL_GetTick>
 8002a94:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a96:	4b40      	ldr	r3, [pc, #256]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 8002a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9a:	f013 0f02 	tst.w	r3, #2
 8002a9e:	d006      	beq.n	8002aae <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa0:	f7fe fe5c 	bl	800175c <HAL_GetTick>
 8002aa4:	1b40      	subs	r0, r0, r5
 8002aa6:	2802      	cmp	r0, #2
 8002aa8:	d9f5      	bls.n	8002a96 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8002aaa:	2003      	movs	r0, #3
 8002aac:	e0dd      	b.n	8002c6a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	f013 0f04 	tst.w	r3, #4
 8002ab4:	d079      	beq.n	8002baa <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab6:	4b38      	ldr	r3, [pc, #224]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002abe:	d133      	bne.n	8002b28 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	4b34      	ldr	r3, [pc, #208]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 8002ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ac8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	9301      	str	r3, [sp, #4]
 8002ad6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ad8:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ada:	4b32      	ldr	r3, [pc, #200]	; (8002ba4 <HAL_RCC_OscConfig+0x2c0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ae2:	d023      	beq.n	8002b2c <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae4:	68a3      	ldr	r3, [r4, #8]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d034      	beq.n	8002b54 <HAL_RCC_OscConfig+0x270>
 8002aea:	2b05      	cmp	r3, #5
 8002aec:	d038      	beq.n	8002b60 <HAL_RCC_OscConfig+0x27c>
 8002aee:	4b2a      	ldr	r3, [pc, #168]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 8002af0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	671a      	str	r2, [r3, #112]	; 0x70
 8002af8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002afa:	f022 0204 	bic.w	r2, r2, #4
 8002afe:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b00:	68a3      	ldr	r3, [r4, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d036      	beq.n	8002b74 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b06:	f7fe fe29 	bl	800175c <HAL_GetTick>
 8002b0a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0c:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	f013 0f02 	tst.w	r3, #2
 8002b14:	d148      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b16:	f7fe fe21 	bl	800175c <HAL_GetTick>
 8002b1a:	1b80      	subs	r0, r0, r6
 8002b1c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b20:	4298      	cmp	r0, r3
 8002b22:	d9f3      	bls.n	8002b0c <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8002b24:	2003      	movs	r0, #3
 8002b26:	e0a0      	b.n	8002c6a <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8002b28:	2500      	movs	r5, #0
 8002b2a:	e7d6      	b.n	8002ada <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ba4 <HAL_RCC_OscConfig+0x2c0>)
 8002b2e:	6813      	ldr	r3, [r2, #0]
 8002b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b34:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002b36:	f7fe fe11 	bl	800175c <HAL_GetTick>
 8002b3a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3c:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <HAL_RCC_OscConfig+0x2c0>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002b44:	d1ce      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b46:	f7fe fe09 	bl	800175c <HAL_GetTick>
 8002b4a:	1b80      	subs	r0, r0, r6
 8002b4c:	2802      	cmp	r0, #2
 8002b4e:	d9f5      	bls.n	8002b3c <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8002b50:	2003      	movs	r0, #3
 8002b52:	e08a      	b.n	8002c6a <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b54:	4a10      	ldr	r2, [pc, #64]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 8002b56:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5e:	e7cf      	b.n	8002b00 <HAL_RCC_OscConfig+0x21c>
 8002b60:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 8002b62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b64:	f042 0204 	orr.w	r2, r2, #4
 8002b68:	671a      	str	r2, [r3, #112]	; 0x70
 8002b6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b6c:	f042 0201 	orr.w	r2, r2, #1
 8002b70:	671a      	str	r2, [r3, #112]	; 0x70
 8002b72:	e7c5      	b.n	8002b00 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b74:	f7fe fdf2 	bl	800175c <HAL_GetTick>
 8002b78:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7a:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <HAL_RCC_OscConfig+0x2b4>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	f013 0f02 	tst.w	r3, #2
 8002b82:	d011      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b84:	f7fe fdea 	bl	800175c <HAL_GetTick>
 8002b88:	1b80      	subs	r0, r0, r6
 8002b8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b8e:	4298      	cmp	r0, r3
 8002b90:	d9f3      	bls.n	8002b7a <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8002b92:	2003      	movs	r0, #3
 8002b94:	e069      	b.n	8002c6a <HAL_RCC_OscConfig+0x386>
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	42470000 	.word	0x42470000
 8002ba0:	42470e80 	.word	0x42470e80
 8002ba4:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ba8:	b9e5      	cbnz	r5, 8002be4 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002baa:	69a3      	ldr	r3, [r4, #24]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d05b      	beq.n	8002c68 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bb0:	4a30      	ldr	r2, [pc, #192]	; (8002c74 <HAL_RCC_OscConfig+0x390>)
 8002bb2:	6892      	ldr	r2, [r2, #8]
 8002bb4:	f002 020c 	and.w	r2, r2, #12
 8002bb8:	2a08      	cmp	r2, #8
 8002bba:	d058      	beq.n	8002c6e <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d017      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc0:	4b2d      	ldr	r3, [pc, #180]	; (8002c78 <HAL_RCC_OscConfig+0x394>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fe fdc9 	bl	800175c <HAL_GetTick>
 8002bca:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bcc:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <HAL_RCC_OscConfig+0x390>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002bd4:	d042      	beq.n	8002c5c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd6:	f7fe fdc1 	bl	800175c <HAL_GetTick>
 8002bda:	1b00      	subs	r0, r0, r4
 8002bdc:	2802      	cmp	r0, #2
 8002bde:	d9f5      	bls.n	8002bcc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002be0:	2003      	movs	r0, #3
 8002be2:	e042      	b.n	8002c6a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be4:	4a23      	ldr	r2, [pc, #140]	; (8002c74 <HAL_RCC_OscConfig+0x390>)
 8002be6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bec:	6413      	str	r3, [r2, #64]	; 0x40
 8002bee:	e7dc      	b.n	8002baa <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8002bf0:	4b21      	ldr	r3, [pc, #132]	; (8002c78 <HAL_RCC_OscConfig+0x394>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002bf6:	f7fe fdb1 	bl	800175c <HAL_GetTick>
 8002bfa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfc:	4b1d      	ldr	r3, [pc, #116]	; (8002c74 <HAL_RCC_OscConfig+0x390>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c04:	d006      	beq.n	8002c14 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c06:	f7fe fda9 	bl	800175c <HAL_GetTick>
 8002c0a:	1b40      	subs	r0, r0, r5
 8002c0c:	2802      	cmp	r0, #2
 8002c0e:	d9f5      	bls.n	8002bfc <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002c10:	2003      	movs	r0, #3
 8002c12:	e02a      	b.n	8002c6a <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c14:	69e3      	ldr	r3, [r4, #28]
 8002c16:	6a22      	ldr	r2, [r4, #32]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c1c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002c20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c22:	0852      	lsrs	r2, r2, #1
 8002c24:	3a01      	subs	r2, #1
 8002c26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c2c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002c30:	4a10      	ldr	r2, [pc, #64]	; (8002c74 <HAL_RCC_OscConfig+0x390>)
 8002c32:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002c34:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <HAL_RCC_OscConfig+0x394>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c3a:	f7fe fd8f 	bl	800175c <HAL_GetTick>
 8002c3e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c40:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <HAL_RCC_OscConfig+0x390>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c48:	d106      	bne.n	8002c58 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4a:	f7fe fd87 	bl	800175c <HAL_GetTick>
 8002c4e:	1b00      	subs	r0, r0, r4
 8002c50:	2802      	cmp	r0, #2
 8002c52:	d9f5      	bls.n	8002c40 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002c54:	2003      	movs	r0, #3
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002c58:	2000      	movs	r0, #0
 8002c5a:	e006      	b.n	8002c6a <HAL_RCC_OscConfig+0x386>
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	e004      	b.n	8002c6a <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8002c60:	2001      	movs	r0, #1
}
 8002c62:	4770      	bx	lr
        return HAL_ERROR;
 8002c64:	2001      	movs	r0, #1
 8002c66:	e000      	b.n	8002c6a <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8002c68:	2000      	movs	r0, #0
}
 8002c6a:	b002      	add	sp, #8
 8002c6c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002c6e:	2001      	movs	r0, #1
 8002c70:	e7fb      	b.n	8002c6a <HAL_RCC_OscConfig+0x386>
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800
 8002c78:	42470060 	.word	0x42470060

08002c7c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c7c:	4b32      	ldr	r3, [pc, #200]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 030c 	and.w	r3, r3, #12
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d05c      	beq.n	8002d42 <HAL_RCC_GetSysClockFreq+0xc6>
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c8c:	482f      	ldr	r0, [pc, #188]	; (8002d4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c8e:	4770      	bx	lr
{
 8002c90:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c94:	4b2c      	ldr	r3, [pc, #176]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002ca2:	d02b      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca4:	4b28      	ldr	r3, [pc, #160]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002cac:	461e      	mov	r6, r3
 8002cae:	2700      	movs	r7, #0
 8002cb0:	015c      	lsls	r4, r3, #5
 8002cb2:	2500      	movs	r5, #0
 8002cb4:	1ae4      	subs	r4, r4, r3
 8002cb6:	eb65 0507 	sbc.w	r5, r5, r7
 8002cba:	01a9      	lsls	r1, r5, #6
 8002cbc:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002cc0:	01a0      	lsls	r0, r4, #6
 8002cc2:	1b00      	subs	r0, r0, r4
 8002cc4:	eb61 0105 	sbc.w	r1, r1, r5
 8002cc8:	00cb      	lsls	r3, r1, #3
 8002cca:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002cce:	00c4      	lsls	r4, r0, #3
 8002cd0:	19a0      	adds	r0, r4, r6
 8002cd2:	eb43 0107 	adc.w	r1, r3, r7
 8002cd6:	024b      	lsls	r3, r1, #9
 8002cd8:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002cdc:	0244      	lsls	r4, r0, #9
 8002cde:	4620      	mov	r0, r4
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f7fd ff46 	bl	8000b74 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ce8:	4b17      	ldr	r3, [pc, #92]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002cf4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002cf8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002d04:	461e      	mov	r6, r3
 8002d06:	2700      	movs	r7, #0
 8002d08:	015c      	lsls	r4, r3, #5
 8002d0a:	2500      	movs	r5, #0
 8002d0c:	1ae4      	subs	r4, r4, r3
 8002d0e:	eb65 0507 	sbc.w	r5, r5, r7
 8002d12:	01a9      	lsls	r1, r5, #6
 8002d14:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002d18:	01a0      	lsls	r0, r4, #6
 8002d1a:	1b00      	subs	r0, r0, r4
 8002d1c:	eb61 0105 	sbc.w	r1, r1, r5
 8002d20:	00cb      	lsls	r3, r1, #3
 8002d22:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002d26:	00c4      	lsls	r4, r0, #3
 8002d28:	19a0      	adds	r0, r4, r6
 8002d2a:	eb43 0107 	adc.w	r1, r3, r7
 8002d2e:	028b      	lsls	r3, r1, #10
 8002d30:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002d34:	0284      	lsls	r4, r0, #10
 8002d36:	4620      	mov	r0, r4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f7fd ff1a 	bl	8000b74 <__aeabi_uldivmod>
 8002d40:	e7d2      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8002d42:	4803      	ldr	r0, [pc, #12]	; (8002d50 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	00f42400 	.word	0x00f42400
 8002d50:	007a1200 	.word	0x007a1200

08002d54 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002d54:	2800      	cmp	r0, #0
 8002d56:	f000 809d 	beq.w	8002e94 <HAL_RCC_ClockConfig+0x140>
{
 8002d5a:	b570      	push	{r4, r5, r6, lr}
 8002d5c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d5e:	4b4f      	ldr	r3, [pc, #316]	; (8002e9c <HAL_RCC_ClockConfig+0x148>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	428b      	cmp	r3, r1
 8002d68:	d209      	bcs.n	8002d7e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	b2cb      	uxtb	r3, r1
 8002d6c:	4a4b      	ldr	r2, [pc, #300]	; (8002e9c <HAL_RCC_ClockConfig+0x148>)
 8002d6e:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d70:	6813      	ldr	r3, [r2, #0]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	428b      	cmp	r3, r1
 8002d78:	d001      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8002d7a:	2001      	movs	r0, #1
}
 8002d7c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7e:	6823      	ldr	r3, [r4, #0]
 8002d80:	f013 0f02 	tst.w	r3, #2
 8002d84:	d017      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d86:	f013 0f04 	tst.w	r3, #4
 8002d8a:	d004      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d8c:	4a44      	ldr	r2, [pc, #272]	; (8002ea0 <HAL_RCC_ClockConfig+0x14c>)
 8002d8e:	6893      	ldr	r3, [r2, #8]
 8002d90:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d94:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	f013 0f08 	tst.w	r3, #8
 8002d9c:	d004      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d9e:	4a40      	ldr	r2, [pc, #256]	; (8002ea0 <HAL_RCC_ClockConfig+0x14c>)
 8002da0:	6893      	ldr	r3, [r2, #8]
 8002da2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002da6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da8:	4a3d      	ldr	r2, [pc, #244]	; (8002ea0 <HAL_RCC_ClockConfig+0x14c>)
 8002daa:	6893      	ldr	r3, [r2, #8]
 8002dac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002db0:	68a0      	ldr	r0, [r4, #8]
 8002db2:	4303      	orrs	r3, r0
 8002db4:	6093      	str	r3, [r2, #8]
 8002db6:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	f013 0f01 	tst.w	r3, #1
 8002dbe:	d032      	beq.n	8002e26 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc0:	6863      	ldr	r3, [r4, #4]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d021      	beq.n	8002e0a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dc6:	1e9a      	subs	r2, r3, #2
 8002dc8:	2a01      	cmp	r2, #1
 8002dca:	d925      	bls.n	8002e18 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dcc:	4a34      	ldr	r2, [pc, #208]	; (8002ea0 <HAL_RCC_ClockConfig+0x14c>)
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	f012 0f02 	tst.w	r2, #2
 8002dd4:	d060      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd6:	4932      	ldr	r1, [pc, #200]	; (8002ea0 <HAL_RCC_ClockConfig+0x14c>)
 8002dd8:	688a      	ldr	r2, [r1, #8]
 8002dda:	f022 0203 	bic.w	r2, r2, #3
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002de2:	f7fe fcbb 	bl	800175c <HAL_GetTick>
 8002de6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de8:	4b2d      	ldr	r3, [pc, #180]	; (8002ea0 <HAL_RCC_ClockConfig+0x14c>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 030c 	and.w	r3, r3, #12
 8002df0:	6862      	ldr	r2, [r4, #4]
 8002df2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002df6:	d016      	beq.n	8002e26 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df8:	f7fe fcb0 	bl	800175c <HAL_GetTick>
 8002dfc:	1b80      	subs	r0, r0, r6
 8002dfe:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e02:	4298      	cmp	r0, r3
 8002e04:	d9f0      	bls.n	8002de8 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8002e06:	2003      	movs	r0, #3
 8002e08:	e7b8      	b.n	8002d7c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	4a25      	ldr	r2, [pc, #148]	; (8002ea0 <HAL_RCC_ClockConfig+0x14c>)
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002e12:	d1e0      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002e14:	2001      	movs	r0, #1
 8002e16:	e7b1      	b.n	8002d7c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e18:	4a21      	ldr	r2, [pc, #132]	; (8002ea0 <HAL_RCC_ClockConfig+0x14c>)
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002e20:	d1d9      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002e22:	2001      	movs	r0, #1
 8002e24:	e7aa      	b.n	8002d7c <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_RCC_ClockConfig+0x148>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	42ab      	cmp	r3, r5
 8002e30:	d909      	bls.n	8002e46 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e32:	b2ea      	uxtb	r2, r5
 8002e34:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_RCC_ClockConfig+0x148>)
 8002e36:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	42ab      	cmp	r3, r5
 8002e40:	d001      	beq.n	8002e46 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8002e42:	2001      	movs	r0, #1
 8002e44:	e79a      	b.n	8002d7c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e46:	6823      	ldr	r3, [r4, #0]
 8002e48:	f013 0f04 	tst.w	r3, #4
 8002e4c:	d006      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e4e:	4a14      	ldr	r2, [pc, #80]	; (8002ea0 <HAL_RCC_ClockConfig+0x14c>)
 8002e50:	6893      	ldr	r3, [r2, #8]
 8002e52:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002e56:	68e1      	ldr	r1, [r4, #12]
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5c:	6823      	ldr	r3, [r4, #0]
 8002e5e:	f013 0f08 	tst.w	r3, #8
 8002e62:	d007      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e64:	4a0e      	ldr	r2, [pc, #56]	; (8002ea0 <HAL_RCC_ClockConfig+0x14c>)
 8002e66:	6893      	ldr	r3, [r2, #8]
 8002e68:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002e6c:	6921      	ldr	r1, [r4, #16]
 8002e6e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e72:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e74:	f7ff ff02 	bl	8002c7c <HAL_RCC_GetSysClockFreq>
 8002e78:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <HAL_RCC_ClockConfig+0x14c>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e80:	4a08      	ldr	r2, [pc, #32]	; (8002ea4 <HAL_RCC_ClockConfig+0x150>)
 8002e82:	5cd3      	ldrb	r3, [r2, r3]
 8002e84:	40d8      	lsrs	r0, r3
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <HAL_RCC_ClockConfig+0x154>)
 8002e88:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f7fe fc1a 	bl	80016c4 <HAL_InitTick>
  return HAL_OK;
 8002e90:	2000      	movs	r0, #0
 8002e92:	e773      	b.n	8002d7c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002e94:	2001      	movs	r0, #1
}
 8002e96:	4770      	bx	lr
        return HAL_ERROR;
 8002e98:	2001      	movs	r0, #1
 8002e9a:	e76f      	b.n	8002d7c <HAL_RCC_ClockConfig+0x28>
 8002e9c:	40023c00 	.word	0x40023c00
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	080090d4 	.word	0x080090d4
 8002ea8:	20000060 	.word	0x20000060

08002eac <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002eac:	4b01      	ldr	r3, [pc, #4]	; (8002eb4 <HAL_RCC_GetHCLKFreq+0x8>)
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	20000060 	.word	0x20000060

08002eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002eba:	f7ff fff7 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002ebe:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002ec6:	4a03      	ldr	r2, [pc, #12]	; (8002ed4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002ec8:	5cd3      	ldrb	r3, [r2, r3]
}
 8002eca:	40d8      	lsrs	r0, r3
 8002ecc:	bd08      	pop	{r3, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	080090e4 	.word	0x080090e4

08002ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002eda:	f7ff ffe7 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002ede:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002ee6:	4a03      	ldr	r2, [pc, #12]	; (8002ef4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002ee8:	5cd3      	ldrb	r3, [r2, r3]
}
 8002eea:	40d8      	lsrs	r0, r3
 8002eec:	bd08      	pop	{r3, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	080090e4 	.word	0x080090e4

08002ef8 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ef8:	2800      	cmp	r0, #0
 8002efa:	d03b      	beq.n	8002f74 <HAL_SPI_Init+0x7c>
{
 8002efc:	b510      	push	{r4, lr}
 8002efe:	4604      	mov	r4, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f00:	2300      	movs	r3, #0
 8002f02:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f04:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d02e      	beq.n	8002f6a <HAL_SPI_Init+0x72>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f12:	6822      	ldr	r2, [r4, #0]
 8002f14:	6813      	ldr	r3, [r2, #0]
 8002f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f1a:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002f1c:	6863      	ldr	r3, [r4, #4]
 8002f1e:	68a2      	ldr	r2, [r4, #8]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	68e2      	ldr	r2, [r4, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	6922      	ldr	r2, [r4, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	6962      	ldr	r2, [r4, #20]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	69a2      	ldr	r2, [r4, #24]
 8002f30:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002f34:	4313      	orrs	r3, r2
 8002f36:	69e2      	ldr	r2, [r4, #28]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	6a22      	ldr	r2, [r4, #32]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002f40:	6822      	ldr	r2, [r4, #0]
 8002f42:	430b      	orrs	r3, r1
 8002f44:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002f46:	8b63      	ldrh	r3, [r4, #26]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002f4e:	6822      	ldr	r2, [r4, #0]
 8002f50:	430b      	orrs	r3, r1
 8002f52:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f54:	6822      	ldr	r2, [r4, #0]
 8002f56:	69d3      	ldr	r3, [r2, #28]
 8002f58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f5c:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f5e:	2000      	movs	r0, #0
 8002f60:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f62:	2301      	movs	r3, #1
 8002f64:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8002f68:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002f6a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002f6e:	f002 fd95 	bl	8005a9c <HAL_SPI_MspInit>
 8002f72:	e7cb      	b.n	8002f0c <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8002f74:	2001      	movs	r0, #1
}
 8002f76:	4770      	bx	lr

08002f78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f78:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f7a:	6a03      	ldr	r3, [r0, #32]
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f82:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f84:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f86:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f88:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f8c:	680d      	ldr	r5, [r1, #0]
 8002f8e:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f92:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f96:	688b      	ldr	r3, [r1, #8]
 8002f98:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f9a:	4d0d      	ldr	r5, [pc, #52]	; (8002fd0 <TIM_OC1_SetConfig+0x58>)
 8002f9c:	42a8      	cmp	r0, r5
 8002f9e:	d009      	beq.n	8002fb4 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa0:	4d0b      	ldr	r5, [pc, #44]	; (8002fd0 <TIM_OC1_SetConfig+0x58>)
 8002fa2:	42a8      	cmp	r0, r5
 8002fa4:	d00d      	beq.n	8002fc2 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fa6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fa8:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002faa:	684a      	ldr	r2, [r1, #4]
 8002fac:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fae:	6203      	str	r3, [r0, #32]
}
 8002fb0:	bc70      	pop	{r4, r5, r6}
 8002fb2:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fb4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002fb8:	68cc      	ldr	r4, [r1, #12]
 8002fba:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fbc:	f023 0304 	bic.w	r3, r3, #4
 8002fc0:	e7ee      	b.n	8002fa0 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fc2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8002fc6:	694c      	ldr	r4, [r1, #20]
 8002fc8:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fca:	698a      	ldr	r2, [r1, #24]
 8002fcc:	4322      	orrs	r2, r4
 8002fce:	e7ea      	b.n	8002fa6 <TIM_OC1_SetConfig+0x2e>
 8002fd0:	40010000 	.word	0x40010000

08002fd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fd4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fd6:	6a03      	ldr	r3, [r0, #32]
 8002fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fdc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fde:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fe2:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fe4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fe8:	680d      	ldr	r5, [r1, #0]
 8002fea:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ff0:	688d      	ldr	r5, [r1, #8]
 8002ff2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ff6:	4d0f      	ldr	r5, [pc, #60]	; (8003034 <TIM_OC3_SetConfig+0x60>)
 8002ff8:	42a8      	cmp	r0, r5
 8002ffa:	d009      	beq.n	8003010 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ffc:	4d0d      	ldr	r5, [pc, #52]	; (8003034 <TIM_OC3_SetConfig+0x60>)
 8002ffe:	42a8      	cmp	r0, r5
 8003000:	d00e      	beq.n	8003020 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003002:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003004:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003006:	684a      	ldr	r2, [r1, #4]
 8003008:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800300a:	6203      	str	r3, [r0, #32]
}
 800300c:	bc30      	pop	{r4, r5}
 800300e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003014:	68cd      	ldr	r5, [r1, #12]
 8003016:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800301a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800301e:	e7ed      	b.n	8002ffc <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003020:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003024:	694d      	ldr	r5, [r1, #20]
 8003026:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800302a:	698d      	ldr	r5, [r1, #24]
 800302c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003030:	e7e7      	b.n	8003002 <TIM_OC3_SetConfig+0x2e>
 8003032:	bf00      	nop
 8003034:	40010000 	.word	0x40010000

08003038 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003038:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800303a:	6a03      	ldr	r3, [r0, #32]
 800303c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003040:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003042:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003044:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003046:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003048:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800304c:	680d      	ldr	r5, [r1, #0]
 800304e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003052:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003056:	688d      	ldr	r5, [r1, #8]
 8003058:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800305c:	4d07      	ldr	r5, [pc, #28]	; (800307c <TIM_OC4_SetConfig+0x44>)
 800305e:	42a8      	cmp	r0, r5
 8003060:	d006      	beq.n	8003070 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003062:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003064:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003066:	684a      	ldr	r2, [r1, #4]
 8003068:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800306a:	6203      	str	r3, [r0, #32]
}
 800306c:	bc30      	pop	{r4, r5}
 800306e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003070:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003074:	694d      	ldr	r5, [r1, #20]
 8003076:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800307a:	e7f2      	b.n	8003062 <TIM_OC4_SetConfig+0x2a>
 800307c:	40010000 	.word	0x40010000

08003080 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003080:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003082:	4a25      	ldr	r2, [pc, #148]	; (8003118 <TIM_Base_SetConfig+0x98>)
 8003084:	4290      	cmp	r0, r2
 8003086:	d00e      	beq.n	80030a6 <TIM_Base_SetConfig+0x26>
 8003088:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800308c:	d00b      	beq.n	80030a6 <TIM_Base_SetConfig+0x26>
 800308e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003092:	4290      	cmp	r0, r2
 8003094:	d007      	beq.n	80030a6 <TIM_Base_SetConfig+0x26>
 8003096:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800309a:	4290      	cmp	r0, r2
 800309c:	d003      	beq.n	80030a6 <TIM_Base_SetConfig+0x26>
 800309e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030a2:	4290      	cmp	r0, r2
 80030a4:	d103      	bne.n	80030ae <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80030aa:	684a      	ldr	r2, [r1, #4]
 80030ac:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030ae:	4a1a      	ldr	r2, [pc, #104]	; (8003118 <TIM_Base_SetConfig+0x98>)
 80030b0:	4290      	cmp	r0, r2
 80030b2:	d01a      	beq.n	80030ea <TIM_Base_SetConfig+0x6a>
 80030b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80030b8:	d017      	beq.n	80030ea <TIM_Base_SetConfig+0x6a>
 80030ba:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80030be:	4290      	cmp	r0, r2
 80030c0:	d013      	beq.n	80030ea <TIM_Base_SetConfig+0x6a>
 80030c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030c6:	4290      	cmp	r0, r2
 80030c8:	d00f      	beq.n	80030ea <TIM_Base_SetConfig+0x6a>
 80030ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030ce:	4290      	cmp	r0, r2
 80030d0:	d00b      	beq.n	80030ea <TIM_Base_SetConfig+0x6a>
 80030d2:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80030d6:	4290      	cmp	r0, r2
 80030d8:	d007      	beq.n	80030ea <TIM_Base_SetConfig+0x6a>
 80030da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030de:	4290      	cmp	r0, r2
 80030e0:	d003      	beq.n	80030ea <TIM_Base_SetConfig+0x6a>
 80030e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030e6:	4290      	cmp	r0, r2
 80030e8:	d103      	bne.n	80030f2 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ee:	68ca      	ldr	r2, [r1, #12]
 80030f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030f6:	694a      	ldr	r2, [r1, #20]
 80030f8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80030fa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030fc:	688b      	ldr	r3, [r1, #8]
 80030fe:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003100:	680b      	ldr	r3, [r1, #0]
 8003102:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003104:	4b04      	ldr	r3, [pc, #16]	; (8003118 <TIM_Base_SetConfig+0x98>)
 8003106:	4298      	cmp	r0, r3
 8003108:	d002      	beq.n	8003110 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 800310a:	2301      	movs	r3, #1
 800310c:	6143      	str	r3, [r0, #20]
}
 800310e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003110:	690b      	ldr	r3, [r1, #16]
 8003112:	6303      	str	r3, [r0, #48]	; 0x30
 8003114:	e7f9      	b.n	800310a <TIM_Base_SetConfig+0x8a>
 8003116:	bf00      	nop
 8003118:	40010000 	.word	0x40010000

0800311c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800311c:	b1a8      	cbz	r0, 800314a <HAL_TIM_Base_Init+0x2e>
{
 800311e:	b510      	push	{r4, lr}
 8003120:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003122:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003126:	b15b      	cbz	r3, 8003140 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8003128:	2302      	movs	r3, #2
 800312a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800312e:	1d21      	adds	r1, r4, #4
 8003130:	6820      	ldr	r0, [r4, #0]
 8003132:	f7ff ffa5 	bl	8003080 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003136:	2301      	movs	r3, #1
 8003138:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800313c:	2000      	movs	r0, #0
}
 800313e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003140:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003144:	f002 fd10 	bl	8005b68 <HAL_TIM_Base_MspInit>
 8003148:	e7ee      	b.n	8003128 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800314a:	2001      	movs	r0, #1
}
 800314c:	4770      	bx	lr

0800314e <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800314e:	b1a8      	cbz	r0, 800317c <HAL_TIM_PWM_Init+0x2e>
{
 8003150:	b510      	push	{r4, lr}
 8003152:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003154:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003158:	b15b      	cbz	r3, 8003172 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800315a:	2302      	movs	r3, #2
 800315c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003160:	1d21      	adds	r1, r4, #4
 8003162:	6820      	ldr	r0, [r4, #0]
 8003164:	f7ff ff8c 	bl	8003080 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003168:	2301      	movs	r3, #1
 800316a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800316e:	2000      	movs	r0, #0
}
 8003170:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003172:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003176:	f002 fcdf 	bl	8005b38 <HAL_TIM_PWM_MspInit>
 800317a:	e7ee      	b.n	800315a <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800317c:	2001      	movs	r0, #1
}
 800317e:	4770      	bx	lr

08003180 <TIM_OC2_SetConfig>:
{
 8003180:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003182:	6a03      	ldr	r3, [r0, #32]
 8003184:	f023 0310 	bic.w	r3, r3, #16
 8003188:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800318a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800318c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800318e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003190:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003194:	680d      	ldr	r5, [r1, #0]
 8003196:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800319a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800319e:	688d      	ldr	r5, [r1, #8]
 80031a0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031a4:	4d0e      	ldr	r5, [pc, #56]	; (80031e0 <TIM_OC2_SetConfig+0x60>)
 80031a6:	42a8      	cmp	r0, r5
 80031a8:	d009      	beq.n	80031be <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031aa:	4d0d      	ldr	r5, [pc, #52]	; (80031e0 <TIM_OC2_SetConfig+0x60>)
 80031ac:	42a8      	cmp	r0, r5
 80031ae:	d00e      	beq.n	80031ce <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 80031b0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80031b2:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80031b4:	684a      	ldr	r2, [r1, #4]
 80031b6:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80031b8:	6203      	str	r3, [r0, #32]
}
 80031ba:	bc30      	pop	{r4, r5}
 80031bc:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80031be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031c2:	68cd      	ldr	r5, [r1, #12]
 80031c4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80031c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031cc:	e7ed      	b.n	80031aa <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031ce:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031d2:	694d      	ldr	r5, [r1, #20]
 80031d4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031d8:	698d      	ldr	r5, [r1, #24]
 80031da:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80031de:	e7e7      	b.n	80031b0 <TIM_OC2_SetConfig+0x30>
 80031e0:	40010000 	.word	0x40010000

080031e4 <HAL_TIM_PWM_ConfigChannel>:
{
 80031e4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80031e6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d066      	beq.n	80032bc <HAL_TIM_PWM_ConfigChannel+0xd8>
 80031ee:	460d      	mov	r5, r1
 80031f0:	4604      	mov	r4, r0
 80031f2:	2301      	movs	r3, #1
 80031f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80031f8:	2302      	movs	r3, #2
 80031fa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80031fe:	2a0c      	cmp	r2, #12
 8003200:	d81a      	bhi.n	8003238 <HAL_TIM_PWM_ConfigChannel+0x54>
 8003202:	e8df f002 	tbb	[pc, r2]
 8003206:	1907      	.short	0x1907
 8003208:	19201919 	.word	0x19201919
 800320c:	19341919 	.word	0x19341919
 8003210:	1919      	.short	0x1919
 8003212:	47          	.byte	0x47
 8003213:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003214:	6800      	ldr	r0, [r0, #0]
 8003216:	f7ff feaf 	bl	8002f78 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800321a:	6822      	ldr	r2, [r4, #0]
 800321c:	6993      	ldr	r3, [r2, #24]
 800321e:	f043 0308 	orr.w	r3, r3, #8
 8003222:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003224:	6822      	ldr	r2, [r4, #0]
 8003226:	6993      	ldr	r3, [r2, #24]
 8003228:	f023 0304 	bic.w	r3, r3, #4
 800322c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800322e:	6822      	ldr	r2, [r4, #0]
 8003230:	6993      	ldr	r3, [r2, #24]
 8003232:	6929      	ldr	r1, [r5, #16]
 8003234:	430b      	orrs	r3, r1
 8003236:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003238:	2301      	movs	r3, #1
 800323a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800323e:	2000      	movs	r0, #0
 8003240:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003244:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003246:	6800      	ldr	r0, [r0, #0]
 8003248:	f7ff ff9a 	bl	8003180 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800324c:	6822      	ldr	r2, [r4, #0]
 800324e:	6993      	ldr	r3, [r2, #24]
 8003250:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003254:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003256:	6822      	ldr	r2, [r4, #0]
 8003258:	6993      	ldr	r3, [r2, #24]
 800325a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800325e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003260:	6822      	ldr	r2, [r4, #0]
 8003262:	6993      	ldr	r3, [r2, #24]
 8003264:	6929      	ldr	r1, [r5, #16]
 8003266:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800326a:	6193      	str	r3, [r2, #24]
      break;
 800326c:	e7e4      	b.n	8003238 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800326e:	6800      	ldr	r0, [r0, #0]
 8003270:	f7ff feb0 	bl	8002fd4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003274:	6822      	ldr	r2, [r4, #0]
 8003276:	69d3      	ldr	r3, [r2, #28]
 8003278:	f043 0308 	orr.w	r3, r3, #8
 800327c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800327e:	6822      	ldr	r2, [r4, #0]
 8003280:	69d3      	ldr	r3, [r2, #28]
 8003282:	f023 0304 	bic.w	r3, r3, #4
 8003286:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003288:	6822      	ldr	r2, [r4, #0]
 800328a:	69d3      	ldr	r3, [r2, #28]
 800328c:	6929      	ldr	r1, [r5, #16]
 800328e:	430b      	orrs	r3, r1
 8003290:	61d3      	str	r3, [r2, #28]
      break;
 8003292:	e7d1      	b.n	8003238 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003294:	6800      	ldr	r0, [r0, #0]
 8003296:	f7ff fecf 	bl	8003038 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800329a:	6822      	ldr	r2, [r4, #0]
 800329c:	69d3      	ldr	r3, [r2, #28]
 800329e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032a2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032a4:	6822      	ldr	r2, [r4, #0]
 80032a6:	69d3      	ldr	r3, [r2, #28]
 80032a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032ac:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032ae:	6822      	ldr	r2, [r4, #0]
 80032b0:	69d3      	ldr	r3, [r2, #28]
 80032b2:	6929      	ldr	r1, [r5, #16]
 80032b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80032b8:	61d3      	str	r3, [r2, #28]
      break;
 80032ba:	e7bd      	b.n	8003238 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 80032bc:	2002      	movs	r0, #2
 80032be:	e7c1      	b.n	8003244 <HAL_TIM_PWM_ConfigChannel+0x60>

080032c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032c0:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032c2:	f001 011f 	and.w	r1, r1, #31
 80032c6:	2301      	movs	r3, #1
 80032c8:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032cc:	6a03      	ldr	r3, [r0, #32]
 80032ce:	ea23 0304 	bic.w	r3, r3, r4
 80032d2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032d4:	6a03      	ldr	r3, [r0, #32]
 80032d6:	408a      	lsls	r2, r1
 80032d8:	4313      	orrs	r3, r2
 80032da:	6203      	str	r3, [r0, #32]
}
 80032dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_TIM_PWM_Start>:
{
 80032e4:	b510      	push	{r4, lr}
 80032e6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032e8:	2201      	movs	r2, #1
 80032ea:	6800      	ldr	r0, [r0, #0]
 80032ec:	f7ff ffe8 	bl	80032c0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	4a0a      	ldr	r2, [pc, #40]	; (800331c <HAL_TIM_PWM_Start+0x38>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d00b      	beq.n	8003310 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f8:	6822      	ldr	r2, [r4, #0]
 80032fa:	6893      	ldr	r3, [r2, #8]
 80032fc:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003300:	2b06      	cmp	r3, #6
 8003302:	d003      	beq.n	800330c <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8003304:	6813      	ldr	r3, [r2, #0]
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	6013      	str	r3, [r2, #0]
}
 800330c:	2000      	movs	r0, #0
 800330e:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8003310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003316:	645a      	str	r2, [r3, #68]	; 0x44
 8003318:	e7ee      	b.n	80032f8 <HAL_TIM_PWM_Start+0x14>
 800331a:	bf00      	nop
 800331c:	40010000 	.word	0x40010000

08003320 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003320:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003324:	2b01      	cmp	r3, #1
 8003326:	d01c      	beq.n	8003362 <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8003328:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 800332a:	2601      	movs	r6, #1
 800332c:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003330:	2302      	movs	r3, #2
 8003332:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003336:	6802      	ldr	r2, [r0, #0]
 8003338:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800333a:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800333c:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003340:	680c      	ldr	r4, [r1, #0]
 8003342:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003344:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003348:	684b      	ldr	r3, [r1, #4]
 800334a:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800334c:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800334e:	6802      	ldr	r2, [r0, #0]
 8003350:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003352:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003356:	2300      	movs	r3, #0
 8003358:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800335c:	4618      	mov	r0, r3
}
 800335e:	bc70      	pop	{r4, r5, r6}
 8003360:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003362:	2002      	movs	r0, #2
}
 8003364:	4770      	bx	lr
	...

08003368 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800336c:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800336e:	6802      	ldr	r2, [r0, #0]
 8003370:	6913      	ldr	r3, [r2, #16]
 8003372:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003376:	68c1      	ldr	r1, [r0, #12]
 8003378:	430b      	orrs	r3, r1
 800337a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800337c:	6883      	ldr	r3, [r0, #8]
 800337e:	6902      	ldr	r2, [r0, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	6942      	ldr	r2, [r0, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	69c2      	ldr	r2, [r0, #28]
 8003388:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800338a:	6801      	ldr	r1, [r0, #0]
 800338c:	68cb      	ldr	r3, [r1, #12]
 800338e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003392:	f023 030c 	bic.w	r3, r3, #12
 8003396:	4313      	orrs	r3, r2
 8003398:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800339a:	6802      	ldr	r2, [r0, #0]
 800339c:	6953      	ldr	r3, [r2, #20]
 800339e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a2:	6981      	ldr	r1, [r0, #24]
 80033a4:	430b      	orrs	r3, r1
 80033a6:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033a8:	69c3      	ldr	r3, [r0, #28]
 80033aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ae:	d060      	beq.n	8003472 <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033b0:	6803      	ldr	r3, [r0, #0]
 80033b2:	4ab8      	ldr	r2, [pc, #736]	; (8003694 <UART_SetConfig+0x32c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	f000 8114 	beq.w	80035e2 <UART_SetConfig+0x27a>
 80033ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033be:	4293      	cmp	r3, r2
 80033c0:	f000 810f 	beq.w	80035e2 <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80033c4:	f7ff fd78 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 80033c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033d0:	6865      	ldr	r5, [r4, #4]
 80033d2:	00ad      	lsls	r5, r5, #2
 80033d4:	fbb0 f5f5 	udiv	r5, r0, r5
 80033d8:	4faf      	ldr	r7, [pc, #700]	; (8003698 <UART_SetConfig+0x330>)
 80033da:	fba7 3505 	umull	r3, r5, r7, r5
 80033de:	096d      	lsrs	r5, r5, #5
 80033e0:	012e      	lsls	r6, r5, #4
 80033e2:	f7ff fd69 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 80033e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033ee:	6865      	ldr	r5, [r4, #4]
 80033f0:	00ad      	lsls	r5, r5, #2
 80033f2:	fbb0 f9f5 	udiv	r9, r0, r5
 80033f6:	f7ff fd5f 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 80033fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003402:	6865      	ldr	r5, [r4, #4]
 8003404:	00ad      	lsls	r5, r5, #2
 8003406:	fbb0 f5f5 	udiv	r5, r0, r5
 800340a:	fba7 3505 	umull	r3, r5, r7, r5
 800340e:	096d      	lsrs	r5, r5, #5
 8003410:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003414:	fb08 9515 	mls	r5, r8, r5, r9
 8003418:	012d      	lsls	r5, r5, #4
 800341a:	3532      	adds	r5, #50	; 0x32
 800341c:	fba7 3505 	umull	r3, r5, r7, r5
 8003420:	096d      	lsrs	r5, r5, #5
 8003422:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8003426:	4435      	add	r5, r6
 8003428:	f7ff fd46 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 800342c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003430:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003434:	6866      	ldr	r6, [r4, #4]
 8003436:	00b6      	lsls	r6, r6, #2
 8003438:	fbb0 f6f6 	udiv	r6, r0, r6
 800343c:	f7ff fd3c 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 8003440:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003444:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003448:	6863      	ldr	r3, [r4, #4]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003450:	fba7 3000 	umull	r3, r0, r7, r0
 8003454:	0940      	lsrs	r0, r0, #5
 8003456:	fb08 6810 	mls	r8, r8, r0, r6
 800345a:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800345e:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8003462:	fba7 3708 	umull	r3, r7, r7, r8
 8003466:	f3c7 1743 	ubfx	r7, r7, #5, #4
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	442f      	add	r7, r5
 800346e:	609f      	str	r7, [r3, #8]
    }
  }
}
 8003470:	e10d      	b.n	800368e <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003472:	6803      	ldr	r3, [r0, #0]
 8003474:	4a87      	ldr	r2, [pc, #540]	; (8003694 <UART_SetConfig+0x32c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d05b      	beq.n	8003532 <UART_SetConfig+0x1ca>
 800347a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800347e:	4293      	cmp	r3, r2
 8003480:	d057      	beq.n	8003532 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003482:	f7ff fd19 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 8003486:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800348a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800348e:	6865      	ldr	r5, [r4, #4]
 8003490:	006d      	lsls	r5, r5, #1
 8003492:	fbb0 f5f5 	udiv	r5, r0, r5
 8003496:	4f80      	ldr	r7, [pc, #512]	; (8003698 <UART_SetConfig+0x330>)
 8003498:	fba7 3505 	umull	r3, r5, r7, r5
 800349c:	096d      	lsrs	r5, r5, #5
 800349e:	012e      	lsls	r6, r5, #4
 80034a0:	f7ff fd0a 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 80034a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034ac:	6865      	ldr	r5, [r4, #4]
 80034ae:	006d      	lsls	r5, r5, #1
 80034b0:	fbb0 f9f5 	udiv	r9, r0, r5
 80034b4:	f7ff fd00 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 80034b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034c0:	6865      	ldr	r5, [r4, #4]
 80034c2:	006d      	lsls	r5, r5, #1
 80034c4:	fbb0 f5f5 	udiv	r5, r0, r5
 80034c8:	fba7 3505 	umull	r3, r5, r7, r5
 80034cc:	096d      	lsrs	r5, r5, #5
 80034ce:	f04f 0864 	mov.w	r8, #100	; 0x64
 80034d2:	fb08 9515 	mls	r5, r8, r5, r9
 80034d6:	00ed      	lsls	r5, r5, #3
 80034d8:	3532      	adds	r5, #50	; 0x32
 80034da:	fba7 3505 	umull	r3, r5, r7, r5
 80034de:	096d      	lsrs	r5, r5, #5
 80034e0:	006d      	lsls	r5, r5, #1
 80034e2:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80034e6:	4435      	add	r5, r6
 80034e8:	f7ff fce6 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 80034ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034f4:	6866      	ldr	r6, [r4, #4]
 80034f6:	0076      	lsls	r6, r6, #1
 80034f8:	fbb0 f6f6 	udiv	r6, r0, r6
 80034fc:	f7ff fcdc 	bl	8002eb8 <HAL_RCC_GetPCLK1Freq>
 8003500:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003504:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003508:	6863      	ldr	r3, [r4, #4]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003510:	fba7 2303 	umull	r2, r3, r7, r3
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	fb08 6813 	mls	r8, r8, r3, r6
 800351a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800351e:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8003522:	fba7 3708 	umull	r3, r7, r7, r8
 8003526:	f3c7 1742 	ubfx	r7, r7, #5, #3
 800352a:	6823      	ldr	r3, [r4, #0]
 800352c:	442f      	add	r7, r5
 800352e:	609f      	str	r7, [r3, #8]
 8003530:	e0ad      	b.n	800368e <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003532:	f7ff fcd1 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 8003536:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800353a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800353e:	6865      	ldr	r5, [r4, #4]
 8003540:	006d      	lsls	r5, r5, #1
 8003542:	fbb0 f5f5 	udiv	r5, r0, r5
 8003546:	4f54      	ldr	r7, [pc, #336]	; (8003698 <UART_SetConfig+0x330>)
 8003548:	fba7 3505 	umull	r3, r5, r7, r5
 800354c:	096d      	lsrs	r5, r5, #5
 800354e:	012e      	lsls	r6, r5, #4
 8003550:	f7ff fcc2 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 8003554:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003558:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800355c:	6865      	ldr	r5, [r4, #4]
 800355e:	006d      	lsls	r5, r5, #1
 8003560:	fbb0 f9f5 	udiv	r9, r0, r5
 8003564:	f7ff fcb8 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 8003568:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800356c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003570:	6865      	ldr	r5, [r4, #4]
 8003572:	006d      	lsls	r5, r5, #1
 8003574:	fbb0 f5f5 	udiv	r5, r0, r5
 8003578:	fba7 3505 	umull	r3, r5, r7, r5
 800357c:	096d      	lsrs	r5, r5, #5
 800357e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003582:	fb08 9515 	mls	r5, r8, r5, r9
 8003586:	00ed      	lsls	r5, r5, #3
 8003588:	3532      	adds	r5, #50	; 0x32
 800358a:	fba7 3505 	umull	r3, r5, r7, r5
 800358e:	096d      	lsrs	r5, r5, #5
 8003590:	006d      	lsls	r5, r5, #1
 8003592:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8003596:	4435      	add	r5, r6
 8003598:	f7ff fc9e 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 800359c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80035a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80035a4:	6866      	ldr	r6, [r4, #4]
 80035a6:	0076      	lsls	r6, r6, #1
 80035a8:	fbb0 f6f6 	udiv	r6, r0, r6
 80035ac:	f7ff fc94 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 80035b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80035b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80035b8:	6863      	ldr	r3, [r4, #4]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c0:	fba7 2303 	umull	r2, r3, r7, r3
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	fb08 6813 	mls	r8, r8, r3, r6
 80035ca:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80035ce:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80035d2:	fba7 3708 	umull	r3, r7, r7, r8
 80035d6:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	442f      	add	r7, r5
 80035de:	609f      	str	r7, [r3, #8]
 80035e0:	e055      	b.n	800368e <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80035e2:	f7ff fc79 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 80035e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80035ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80035ee:	6865      	ldr	r5, [r4, #4]
 80035f0:	00ad      	lsls	r5, r5, #2
 80035f2:	fbb0 f5f5 	udiv	r5, r0, r5
 80035f6:	4f28      	ldr	r7, [pc, #160]	; (8003698 <UART_SetConfig+0x330>)
 80035f8:	fba7 3505 	umull	r3, r5, r7, r5
 80035fc:	096d      	lsrs	r5, r5, #5
 80035fe:	012e      	lsls	r6, r5, #4
 8003600:	f7ff fc6a 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 8003604:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003608:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800360c:	6865      	ldr	r5, [r4, #4]
 800360e:	00ad      	lsls	r5, r5, #2
 8003610:	fbb0 f9f5 	udiv	r9, r0, r5
 8003614:	f7ff fc60 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 8003618:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800361c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003620:	6865      	ldr	r5, [r4, #4]
 8003622:	00ad      	lsls	r5, r5, #2
 8003624:	fbb0 f5f5 	udiv	r5, r0, r5
 8003628:	fba7 3505 	umull	r3, r5, r7, r5
 800362c:	096d      	lsrs	r5, r5, #5
 800362e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003632:	fb08 9515 	mls	r5, r8, r5, r9
 8003636:	012d      	lsls	r5, r5, #4
 8003638:	3532      	adds	r5, #50	; 0x32
 800363a:	fba7 3505 	umull	r3, r5, r7, r5
 800363e:	096d      	lsrs	r5, r5, #5
 8003640:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8003644:	4435      	add	r5, r6
 8003646:	f7ff fc47 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 800364a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800364e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003652:	6866      	ldr	r6, [r4, #4]
 8003654:	00b6      	lsls	r6, r6, #2
 8003656:	fbb0 f6f6 	udiv	r6, r0, r6
 800365a:	f7ff fc3d 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 800365e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003662:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003666:	6863      	ldr	r3, [r4, #4]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	fbb0 f0f3 	udiv	r0, r0, r3
 800366e:	fba7 3000 	umull	r3, r0, r7, r0
 8003672:	0940      	lsrs	r0, r0, #5
 8003674:	fb08 6810 	mls	r8, r8, r0, r6
 8003678:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800367c:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8003680:	fba7 3708 	umull	r3, r7, r7, r8
 8003684:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	442f      	add	r7, r5
 800368c:	609f      	str	r7, [r3, #8]
}
 800368e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003692:	bf00      	nop
 8003694:	40011000 	.word	0x40011000
 8003698:	51eb851f 	.word	0x51eb851f

0800369c <HAL_UART_Init>:
  if (huart == NULL)
 800369c:	b358      	cbz	r0, 80036f6 <HAL_UART_Init+0x5a>
{
 800369e:	b510      	push	{r4, lr}
 80036a0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80036a2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80036a6:	b30b      	cbz	r3, 80036ec <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80036a8:	2324      	movs	r3, #36	; 0x24
 80036aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80036ae:	6822      	ldr	r2, [r4, #0]
 80036b0:	68d3      	ldr	r3, [r2, #12]
 80036b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036b6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80036b8:	4620      	mov	r0, r4
 80036ba:	f7ff fe55 	bl	8003368 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036be:	6822      	ldr	r2, [r4, #0]
 80036c0:	6913      	ldr	r3, [r2, #16]
 80036c2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80036c6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036c8:	6822      	ldr	r2, [r4, #0]
 80036ca:	6953      	ldr	r3, [r2, #20]
 80036cc:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80036d0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80036d2:	6822      	ldr	r2, [r4, #0]
 80036d4:	68d3      	ldr	r3, [r2, #12]
 80036d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036da:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036dc:	2000      	movs	r0, #0
 80036de:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80036e0:	2320      	movs	r3, #32
 80036e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80036e6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80036ea:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80036ec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80036f0:	f002 fa7e 	bl	8005bf0 <HAL_UART_MspInit>
 80036f4:	e7d8      	b.n	80036a8 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80036f6:	2001      	movs	r0, #1
}
 80036f8:	4770      	bx	lr

080036fa <arduino_get_clock_ms>:
******************************************************************************/
#include "arduino_mpu9250_clk.h"
#include "stm32f4xx_hal.h"

int arduino_get_clock_ms(unsigned long *count)
{
 80036fa:	b510      	push	{r4, lr}
 80036fc:	4604      	mov	r4, r0
	*count = HAL_GetTick();
 80036fe:	f7fe f82d 	bl	800175c <HAL_GetTick>
 8003702:	6020      	str	r0, [r4, #0]
	return 0;
}
 8003704:	2000      	movs	r0, #0
 8003706:	bd10      	pop	{r4, pc}

08003708 <arduino_delay_ms>:

int arduino_delay_ms(unsigned long num_ms)
{
 8003708:	b508      	push	{r3, lr}
	HAL_Delay(num_ms);
 800370a:	f7fe f82d 	bl	8001768 <HAL_Delay>

	return 0;
}
 800370e:	2000      	movs	r0, #0
 8003710:	bd08      	pop	{r3, pc}
	...

08003714 <arduino_i2c_write>:
I2C_HandleTypeDef hi2c2;


int arduino_i2c_write(unsigned char slave_addr, unsigned char reg_addr,
                       unsigned char length, unsigned char * data)
{
 8003714:	b510      	push	{r4, lr}
 8003716:	b08a      	sub	sp, #40	; 0x28
		unsigned char slave_addr_shift = slave_addr << 1;


		unsigned char data_write[32];

		data_write[0] = reg_addr;
 8003718:	f88d 1008 	strb.w	r1, [sp, #8]

		for (int i = 1; i <= length; ++i) {
 800371c:	2101      	movs	r1, #1
 800371e:	e006      	b.n	800372e <arduino_i2c_write+0x1a>
			data_write[i] = *data;
 8003720:	f813 4b01 	ldrb.w	r4, [r3], #1
 8003724:	a80a      	add	r0, sp, #40	; 0x28
 8003726:	4408      	add	r0, r1
 8003728:	f800 4c20 	strb.w	r4, [r0, #-32]
		for (int i = 1; i <= length; ++i) {
 800372c:	3101      	adds	r1, #1
 800372e:	428a      	cmp	r2, r1
 8003730:	daf6      	bge.n	8003720 <arduino_i2c_write+0xc>
			data++;
		}

		if(HAL_I2C_Master_Transmit(&hi2c2, 0xD0, data_write, length+1, 10) == HAL_OK ){
 8003732:	230a      	movs	r3, #10
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	1c53      	adds	r3, r2, #1
 8003738:	aa02      	add	r2, sp, #8
 800373a:	21d0      	movs	r1, #208	; 0xd0
 800373c:	4803      	ldr	r0, [pc, #12]	; (800374c <arduino_i2c_write+0x38>)
 800373e:	f7fe fded 	bl	800231c <HAL_I2C_Master_Transmit>
 8003742:	b100      	cbz	r0, 8003746 <arduino_i2c_write+0x32>
			return 0;
		}
		else{
			return 1;
 8003744:	2001      	movs	r0, #1
		}
}
 8003746:	b00a      	add	sp, #40	; 0x28
 8003748:	bd10      	pop	{r4, pc}
 800374a:	bf00      	nop
 800374c:	200002dc 	.word	0x200002dc

08003750 <arduino_i2c_read>:

int arduino_i2c_read(unsigned char slave_addr, unsigned char reg_addr,
                       unsigned char length, unsigned char * data)
{
 8003750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003752:	b085      	sub	sp, #20
 8003754:	4617      	mov	r7, r2
 8003756:	461e      	mov	r6, r3
	unsigned char slave_addr_shift = slave_addr << 1;

		unsigned char data_read[32];

		unsigned char data_write[1];
		data_write[0] = reg_addr;
 8003758:	aa04      	add	r2, sp, #16
 800375a:	f802 1d04 	strb.w	r1, [r2, #-4]!

		//Send adress of register ONLY
		HAL_I2C_Master_Transmit(&hi2c2, 0xD0, data_write, 1, 10);
 800375e:	4c09      	ldr	r4, [pc, #36]	; (8003784 <arduino_i2c_read+0x34>)
 8003760:	250a      	movs	r5, #10
 8003762:	9500      	str	r5, [sp, #0]
 8003764:	2301      	movs	r3, #1
 8003766:	21d0      	movs	r1, #208	; 0xd0
 8003768:	4620      	mov	r0, r4
 800376a:	f7fe fdd7 	bl	800231c <HAL_I2C_Master_Transmit>
		//Then read from register
		HAL_I2C_Master_Receive(&hi2c2, 0xD1, data, length, 10);
 800376e:	9500      	str	r5, [sp, #0]
 8003770:	463b      	mov	r3, r7
 8003772:	4632      	mov	r2, r6
 8003774:	21d1      	movs	r1, #209	; 0xd1
 8003776:	4620      	mov	r0, r4
 8003778:	f7fe fe8a 	bl	8002490 <HAL_I2C_Master_Receive>


		return 0;
}
 800377c:	2000      	movs	r0, #0
 800377e:	b005      	add	sp, #20
 8003780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003782:	bf00      	nop
 8003784:	200002dc 	.word	0x200002dc

08003788 <_MLPrintLog>:
void logString(char * string) 
{
}

int _MLPrintLog (int priority, const char* tag, const char* fmt, ...)
{
 8003788:	b40c      	push	{r2, r3}
}
 800378a:	b002      	add	sp, #8
 800378c:	4770      	bx	lr
	...

08003790 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
int set_int_enable(unsigned char enable)
{
 8003790:	b500      	push	{lr}
 8003792:	b083      	sub	sp, #12
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8003794:	4b25      	ldr	r3, [pc, #148]	; (800382c <set_int_enable+0x9c>)
 8003796:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800379a:	b1db      	cbz	r3, 80037d4 <set_int_enable+0x44>
        if (enable)
 800379c:	b1b0      	cbz	r0, 80037cc <set_int_enable+0x3c>
            tmp = BIT_DMP_INT_EN;
 800379e:	2302      	movs	r3, #2
 80037a0:	f88d 3007 	strb.w	r3, [sp, #7]
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80037a4:	4b21      	ldr	r3, [pc, #132]	; (800382c <set_int_enable+0x9c>)
 80037a6:	6858      	ldr	r0, [r3, #4]
 80037a8:	6819      	ldr	r1, [r3, #0]
 80037aa:	f10d 0307 	add.w	r3, sp, #7
 80037ae:	2201      	movs	r2, #1
 80037b0:	7c49      	ldrb	r1, [r1, #17]
 80037b2:	7800      	ldrb	r0, [r0, #0]
 80037b4:	f7ff ffae 	bl	8003714 <arduino_i2c_write>
 80037b8:	4603      	mov	r3, r0
 80037ba:	bb58      	cbnz	r0, 8003814 <set_int_enable+0x84>
            return -1;
        st.chip_cfg.int_enable = tmp;
 80037bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80037c0:	4a1a      	ldr	r2, [pc, #104]	; (800382c <set_int_enable+0x9c>)
 80037c2:	7451      	strb	r1, [r2, #17]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
        st.chip_cfg.int_enable = tmp;
    }
    return 0;
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	b003      	add	sp, #12
 80037c8:	f85d fb04 	ldr.w	pc, [sp], #4
            tmp = 0x00;
 80037cc:	2300      	movs	r3, #0
 80037ce:	f88d 3007 	strb.w	r3, [sp, #7]
 80037d2:	e7e7      	b.n	80037a4 <set_int_enable+0x14>
        if (!st.chip_cfg.sensors)
 80037d4:	4b15      	ldr	r3, [pc, #84]	; (800382c <set_int_enable+0x9c>)
 80037d6:	7a9b      	ldrb	r3, [r3, #10]
 80037d8:	b1fb      	cbz	r3, 800381a <set_int_enable+0x8a>
        if (enable && st.chip_cfg.int_enable)
 80037da:	b110      	cbz	r0, 80037e2 <set_int_enable+0x52>
 80037dc:	4b13      	ldr	r3, [pc, #76]	; (800382c <set_int_enable+0x9c>)
 80037de:	7c5b      	ldrb	r3, [r3, #17]
 80037e0:	b9f3      	cbnz	r3, 8003820 <set_int_enable+0x90>
        if (enable)
 80037e2:	b198      	cbz	r0, 800380c <set_int_enable+0x7c>
            tmp = BIT_DATA_RDY_EN;
 80037e4:	2301      	movs	r3, #1
 80037e6:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <set_int_enable+0x9c>)
 80037ec:	6858      	ldr	r0, [r3, #4]
 80037ee:	6819      	ldr	r1, [r3, #0]
 80037f0:	f10d 0307 	add.w	r3, sp, #7
 80037f4:	2201      	movs	r2, #1
 80037f6:	7c49      	ldrb	r1, [r1, #17]
 80037f8:	7800      	ldrb	r0, [r0, #0]
 80037fa:	f7ff ff8b 	bl	8003714 <arduino_i2c_write>
 80037fe:	4603      	mov	r3, r0
 8003800:	b980      	cbnz	r0, 8003824 <set_int_enable+0x94>
        st.chip_cfg.int_enable = tmp;
 8003802:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003806:	4a09      	ldr	r2, [pc, #36]	; (800382c <set_int_enable+0x9c>)
 8003808:	7451      	strb	r1, [r2, #17]
 800380a:	e7db      	b.n	80037c4 <set_int_enable+0x34>
            tmp = 0x00;
 800380c:	2300      	movs	r3, #0
 800380e:	f88d 3007 	strb.w	r3, [sp, #7]
 8003812:	e7ea      	b.n	80037ea <set_int_enable+0x5a>
            return -1;
 8003814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003818:	e7d4      	b.n	80037c4 <set_int_enable+0x34>
            return -1;
 800381a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800381e:	e7d1      	b.n	80037c4 <set_int_enable+0x34>
            return 0;
 8003820:	2300      	movs	r3, #0
 8003822:	e7cf      	b.n	80037c4 <set_int_enable+0x34>
            return -1;
 8003824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003828:	e7cc      	b.n	80037c4 <set_int_enable+0x34>
 800382a:	bf00      	nop
 800382c:	20000028 	.word	0x20000028

08003830 <mpu_read_reg>:
 *  @param[out] data    Register data.
 *  @return     0 if successful.
 */
int mpu_read_reg(unsigned char reg, unsigned char *data)
{
    if (reg == st.reg->fifo_r_w || reg == st.reg->mem_r_w)
 8003830:	4b0e      	ldr	r3, [pc, #56]	; (800386c <mpu_read_reg+0x3c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	7b5a      	ldrb	r2, [r3, #13]
 8003836:	4282      	cmp	r2, r0
 8003838:	d00f      	beq.n	800385a <mpu_read_reg+0x2a>
 800383a:	7e1b      	ldrb	r3, [r3, #24]
 800383c:	4283      	cmp	r3, r0
 800383e:	d00f      	beq.n	8003860 <mpu_read_reg+0x30>
{
 8003840:	b510      	push	{r4, lr}
        return -1;
    if (reg >= st.hw->num_reg)
 8003842:	4b0a      	ldr	r3, [pc, #40]	; (800386c <mpu_read_reg+0x3c>)
 8003844:	685c      	ldr	r4, [r3, #4]
 8003846:	7923      	ldrb	r3, [r4, #4]
 8003848:	4283      	cmp	r3, r0
 800384a:	d90c      	bls.n	8003866 <mpu_read_reg+0x36>
 800384c:	460b      	mov	r3, r1
 800384e:	4601      	mov	r1, r0
        return -1;
    return i2c_read(st.hw->addr, reg, 1, data);
 8003850:	2201      	movs	r2, #1
 8003852:	7820      	ldrb	r0, [r4, #0]
 8003854:	f7ff ff7c 	bl	8003750 <arduino_i2c_read>
}
 8003858:	bd10      	pop	{r4, pc}
        return -1;
 800385a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800385e:	4770      	bx	lr
 8003860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8003864:	4770      	bx	lr
        return -1;
 8003866:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800386a:	e7f5      	b.n	8003858 <mpu_read_reg+0x28>
 800386c:	20000028 	.word	0x20000028

08003870 <mpu_reset_fifo>:
 */
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8003870:	4b7c      	ldr	r3, [pc, #496]	; (8003a64 <mpu_reset_fifo+0x1f4>)
 8003872:	7a9b      	ldrb	r3, [r3, #10]
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80d5 	beq.w	8003a24 <mpu_reset_fifo+0x1b4>
{
 800387a:	b500      	push	{lr}
 800387c:	b083      	sub	sp, #12
        return -1;

    data = 0;
 800387e:	ab02      	add	r3, sp, #8
 8003880:	2200      	movs	r2, #0
 8003882:	f803 2d01 	strb.w	r2, [r3, #-1]!
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8003886:	4a77      	ldr	r2, [pc, #476]	; (8003a64 <mpu_reset_fifo+0x1f4>)
 8003888:	6850      	ldr	r0, [r2, #4]
 800388a:	6811      	ldr	r1, [r2, #0]
 800388c:	2201      	movs	r2, #1
 800388e:	7c49      	ldrb	r1, [r1, #17]
 8003890:	7800      	ldrb	r0, [r0, #0]
 8003892:	f7ff ff3f 	bl	8003714 <arduino_i2c_write>
 8003896:	2800      	cmp	r0, #0
 8003898:	f040 80c8 	bne.w	8003a2c <mpu_reset_fifo+0x1bc>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800389c:	4b71      	ldr	r3, [pc, #452]	; (8003a64 <mpu_reset_fifo+0x1f4>)
 800389e:	6858      	ldr	r0, [r3, #4]
 80038a0:	6819      	ldr	r1, [r3, #0]
 80038a2:	f10d 0307 	add.w	r3, sp, #7
 80038a6:	2201      	movs	r2, #1
 80038a8:	7949      	ldrb	r1, [r1, #5]
 80038aa:	7800      	ldrb	r0, [r0, #0]
 80038ac:	f7ff ff32 	bl	8003714 <arduino_i2c_write>
 80038b0:	2800      	cmp	r0, #0
 80038b2:	f040 80be 	bne.w	8003a32 <mpu_reset_fifo+0x1c2>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80038b6:	4b6b      	ldr	r3, [pc, #428]	; (8003a64 <mpu_reset_fifo+0x1f4>)
 80038b8:	6858      	ldr	r0, [r3, #4]
 80038ba:	6819      	ldr	r1, [r3, #0]
 80038bc:	f10d 0307 	add.w	r3, sp, #7
 80038c0:	2201      	movs	r2, #1
 80038c2:	7909      	ldrb	r1, [r1, #4]
 80038c4:	7800      	ldrb	r0, [r0, #0]
 80038c6:	f7ff ff25 	bl	8003714 <arduino_i2c_write>
 80038ca:	2800      	cmp	r0, #0
 80038cc:	f040 80b4 	bne.w	8003a38 <mpu_reset_fifo+0x1c8>
        return -1;

    if (st.chip_cfg.dmp_on) {
 80038d0:	4b64      	ldr	r3, [pc, #400]	; (8003a64 <mpu_reset_fifo+0x1f4>)
 80038d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d054      	beq.n	8003984 <mpu_reset_fifo+0x114>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 80038da:	ab02      	add	r3, sp, #8
 80038dc:	220c      	movs	r2, #12
 80038de:	f803 2d01 	strb.w	r2, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80038e2:	4a60      	ldr	r2, [pc, #384]	; (8003a64 <mpu_reset_fifo+0x1f4>)
 80038e4:	6850      	ldr	r0, [r2, #4]
 80038e6:	6811      	ldr	r1, [r2, #0]
 80038e8:	2201      	movs	r2, #1
 80038ea:	7909      	ldrb	r1, [r1, #4]
 80038ec:	7800      	ldrb	r0, [r0, #0]
 80038ee:	f7ff ff11 	bl	8003714 <arduino_i2c_write>
 80038f2:	2800      	cmp	r0, #0
 80038f4:	f040 80a3 	bne.w	8003a3e <mpu_reset_fifo+0x1ce>
            return -1;
        delay_ms(50);
 80038f8:	2032      	movs	r0, #50	; 0x32
 80038fa:	f7ff ff05 	bl	8003708 <arduino_delay_ms>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 80038fe:	23c0      	movs	r3, #192	; 0xc0
 8003900:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8003904:	4b57      	ldr	r3, [pc, #348]	; (8003a64 <mpu_reset_fifo+0x1f4>)
 8003906:	7a9b      	ldrb	r3, [r3, #10]
 8003908:	f013 0f01 	tst.w	r3, #1
 800390c:	d002      	beq.n	8003914 <mpu_reset_fifo+0xa4>
            data |= BIT_AUX_IF_EN;
 800390e:	23e0      	movs	r3, #224	; 0xe0
 8003910:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8003914:	4b53      	ldr	r3, [pc, #332]	; (8003a64 <mpu_reset_fifo+0x1f4>)
 8003916:	6858      	ldr	r0, [r3, #4]
 8003918:	6819      	ldr	r1, [r3, #0]
 800391a:	f10d 0307 	add.w	r3, sp, #7
 800391e:	2201      	movs	r2, #1
 8003920:	7909      	ldrb	r1, [r1, #4]
 8003922:	7800      	ldrb	r0, [r0, #0]
 8003924:	f7ff fef6 	bl	8003714 <arduino_i2c_write>
 8003928:	2800      	cmp	r0, #0
 800392a:	f040 808b 	bne.w	8003a44 <mpu_reset_fifo+0x1d4>
            return -1;
        if (st.chip_cfg.int_enable)
 800392e:	4b4d      	ldr	r3, [pc, #308]	; (8003a64 <mpu_reset_fifo+0x1f4>)
 8003930:	7c5b      	ldrb	r3, [r3, #17]
 8003932:	b303      	cbz	r3, 8003976 <mpu_reset_fifo+0x106>
            data = BIT_DMP_INT_EN;
 8003934:	2302      	movs	r3, #2
 8003936:	f88d 3007 	strb.w	r3, [sp, #7]
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800393a:	4b4a      	ldr	r3, [pc, #296]	; (8003a64 <mpu_reset_fifo+0x1f4>)
 800393c:	6858      	ldr	r0, [r3, #4]
 800393e:	6819      	ldr	r1, [r3, #0]
 8003940:	f10d 0307 	add.w	r3, sp, #7
 8003944:	2201      	movs	r2, #1
 8003946:	7c49      	ldrb	r1, [r1, #17]
 8003948:	7800      	ldrb	r0, [r0, #0]
 800394a:	f7ff fee3 	bl	8003714 <arduino_i2c_write>
 800394e:	2800      	cmp	r0, #0
 8003950:	d17b      	bne.n	8003a4a <mpu_reset_fifo+0x1da>
            return -1;
        data = 0;
 8003952:	ab02      	add	r3, sp, #8
 8003954:	2200      	movs	r2, #0
 8003956:	f803 2d01 	strb.w	r2, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800395a:	4a42      	ldr	r2, [pc, #264]	; (8003a64 <mpu_reset_fifo+0x1f4>)
 800395c:	6850      	ldr	r0, [r2, #4]
 800395e:	6811      	ldr	r1, [r2, #0]
 8003960:	2201      	movs	r2, #1
 8003962:	7949      	ldrb	r1, [r1, #5]
 8003964:	7800      	ldrb	r0, [r0, #0]
 8003966:	f7ff fed5 	bl	8003714 <arduino_i2c_write>
 800396a:	4603      	mov	r3, r0
 800396c:	b938      	cbnz	r0, 800397e <mpu_reset_fifo+0x10e>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
 800396e:	4618      	mov	r0, r3
 8003970:	b003      	add	sp, #12
 8003972:	f85d fb04 	ldr.w	pc, [sp], #4
            data = 0;
 8003976:	2300      	movs	r3, #0
 8003978:	f88d 3007 	strb.w	r3, [sp, #7]
 800397c:	e7dd      	b.n	800393a <mpu_reset_fifo+0xca>
            return -1;
 800397e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003982:	e7f4      	b.n	800396e <mpu_reset_fifo+0xfe>
        data = BIT_FIFO_RST;
 8003984:	ab02      	add	r3, sp, #8
 8003986:	2204      	movs	r2, #4
 8003988:	f803 2d01 	strb.w	r2, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800398c:	4a35      	ldr	r2, [pc, #212]	; (8003a64 <mpu_reset_fifo+0x1f4>)
 800398e:	6850      	ldr	r0, [r2, #4]
 8003990:	6811      	ldr	r1, [r2, #0]
 8003992:	2201      	movs	r2, #1
 8003994:	7909      	ldrb	r1, [r1, #4]
 8003996:	7800      	ldrb	r0, [r0, #0]
 8003998:	f7ff febc 	bl	8003714 <arduino_i2c_write>
 800399c:	2800      	cmp	r0, #0
 800399e:	d157      	bne.n	8003a50 <mpu_reset_fifo+0x1e0>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 80039a0:	4b30      	ldr	r3, [pc, #192]	; (8003a64 <mpu_reset_fifo+0x1f4>)
 80039a2:	7c9b      	ldrb	r3, [r3, #18]
 80039a4:	b923      	cbnz	r3, 80039b0 <mpu_reset_fifo+0x140>
 80039a6:	4b2f      	ldr	r3, [pc, #188]	; (8003a64 <mpu_reset_fifo+0x1f4>)
 80039a8:	7a9b      	ldrb	r3, [r3, #10]
 80039aa:	f013 0f01 	tst.w	r3, #1
 80039ae:	d131      	bne.n	8003a14 <mpu_reset_fifo+0x1a4>
            data = BIT_FIFO_EN;
 80039b0:	2340      	movs	r3, #64	; 0x40
 80039b2:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 80039b6:	4b2b      	ldr	r3, [pc, #172]	; (8003a64 <mpu_reset_fifo+0x1f4>)
 80039b8:	6858      	ldr	r0, [r3, #4]
 80039ba:	6819      	ldr	r1, [r3, #0]
 80039bc:	f10d 0307 	add.w	r3, sp, #7
 80039c0:	2201      	movs	r2, #1
 80039c2:	7909      	ldrb	r1, [r1, #4]
 80039c4:	7800      	ldrb	r0, [r0, #0]
 80039c6:	f7ff fea5 	bl	8003714 <arduino_i2c_write>
 80039ca:	2800      	cmp	r0, #0
 80039cc:	d143      	bne.n	8003a56 <mpu_reset_fifo+0x1e6>
        delay_ms(50);
 80039ce:	2032      	movs	r0, #50	; 0x32
 80039d0:	f7ff fe9a 	bl	8003708 <arduino_delay_ms>
        if (st.chip_cfg.int_enable)
 80039d4:	4b23      	ldr	r3, [pc, #140]	; (8003a64 <mpu_reset_fifo+0x1f4>)
 80039d6:	7c5b      	ldrb	r3, [r3, #17]
 80039d8:	b303      	cbz	r3, 8003a1c <mpu_reset_fifo+0x1ac>
            data = BIT_DATA_RDY_EN;
 80039da:	2301      	movs	r3, #1
 80039dc:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 80039e0:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <mpu_reset_fifo+0x1f4>)
 80039e2:	6858      	ldr	r0, [r3, #4]
 80039e4:	6819      	ldr	r1, [r3, #0]
 80039e6:	f10d 0307 	add.w	r3, sp, #7
 80039ea:	2201      	movs	r2, #1
 80039ec:	7c49      	ldrb	r1, [r1, #17]
 80039ee:	7800      	ldrb	r0, [r0, #0]
 80039f0:	f7ff fe90 	bl	8003714 <arduino_i2c_write>
 80039f4:	bb90      	cbnz	r0, 8003a5c <mpu_reset_fifo+0x1ec>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 80039f6:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <mpu_reset_fifo+0x1f4>)
 80039f8:	6858      	ldr	r0, [r3, #4]
 80039fa:	f853 1b10 	ldr.w	r1, [r3], #16
 80039fe:	2201      	movs	r2, #1
 8003a00:	7949      	ldrb	r1, [r1, #5]
 8003a02:	7800      	ldrb	r0, [r0, #0]
 8003a04:	f7ff fe86 	bl	8003714 <arduino_i2c_write>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d0af      	beq.n	800396e <mpu_reset_fifo+0xfe>
            return -1;
 8003a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a12:	e7ac      	b.n	800396e <mpu_reset_fifo+0xfe>
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8003a14:	2360      	movs	r3, #96	; 0x60
 8003a16:	f88d 3007 	strb.w	r3, [sp, #7]
 8003a1a:	e7cc      	b.n	80039b6 <mpu_reset_fifo+0x146>
            data = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f88d 3007 	strb.w	r3, [sp, #7]
 8003a22:	e7dd      	b.n	80039e0 <mpu_reset_fifo+0x170>
        return -1;
 8003a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	4770      	bx	lr
        return -1;
 8003a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a30:	e79d      	b.n	800396e <mpu_reset_fifo+0xfe>
        return -1;
 8003a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a36:	e79a      	b.n	800396e <mpu_reset_fifo+0xfe>
        return -1;
 8003a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a3c:	e797      	b.n	800396e <mpu_reset_fifo+0xfe>
            return -1;
 8003a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a42:	e794      	b.n	800396e <mpu_reset_fifo+0xfe>
            return -1;
 8003a44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a48:	e791      	b.n	800396e <mpu_reset_fifo+0xfe>
            return -1;
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a4e:	e78e      	b.n	800396e <mpu_reset_fifo+0xfe>
            return -1;
 8003a50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a54:	e78b      	b.n	800396e <mpu_reset_fifo+0xfe>
            return -1;
 8003a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a5a:	e788      	b.n	800396e <mpu_reset_fifo+0xfe>
            return -1;
 8003a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a60:	e785      	b.n	800396e <mpu_reset_fifo+0xfe>
 8003a62:	bf00      	nop
 8003a64:	20000028 	.word	0x20000028

08003a68 <mpu_set_gyro_fsr>:
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8003a68:	4b24      	ldr	r3, [pc, #144]	; (8003afc <mpu_set_gyro_fsr+0x94>)
 8003a6a:	7a9b      	ldrb	r3, [r3, #10]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d038      	beq.n	8003ae2 <mpu_set_gyro_fsr+0x7a>
{
 8003a70:	b500      	push	{lr}
 8003a72:	b083      	sub	sp, #12
        return -1;

    switch (fsr) {
 8003a74:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8003a78:	d02b      	beq.n	8003ad2 <mpu_set_gyro_fsr+0x6a>
 8003a7a:	d909      	bls.n	8003a90 <mpu_set_gyro_fsr+0x28>
 8003a7c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003a80:	d02b      	beq.n	8003ada <mpu_set_gyro_fsr+0x72>
 8003a82:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8003a86:	d130      	bne.n	8003aea <mpu_set_gyro_fsr+0x82>
        break;
    case 1000:
        data = INV_FSR_1000DPS << 3;
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8003a88:	2318      	movs	r3, #24
 8003a8a:	f88d 3007 	strb.w	r3, [sp, #7]
        break;
 8003a8e:	e004      	b.n	8003a9a <mpu_set_gyro_fsr+0x32>
    switch (fsr) {
 8003a90:	28fa      	cmp	r0, #250	; 0xfa
 8003a92:	d12a      	bne.n	8003aea <mpu_set_gyro_fsr+0x82>
        data = INV_FSR_250DPS << 3;
 8003a94:	2300      	movs	r3, #0
 8003a96:	f88d 3007 	strb.w	r3, [sp, #7]
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8003a9a:	4b18      	ldr	r3, [pc, #96]	; (8003afc <mpu_set_gyro_fsr+0x94>)
 8003a9c:	7a1b      	ldrb	r3, [r3, #8]
 8003a9e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003aa2:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8003aa6:	d023      	beq.n	8003af0 <mpu_set_gyro_fsr+0x88>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8003aa8:	4b14      	ldr	r3, [pc, #80]	; (8003afc <mpu_set_gyro_fsr+0x94>)
 8003aaa:	6858      	ldr	r0, [r3, #4]
 8003aac:	6819      	ldr	r1, [r3, #0]
 8003aae:	f10d 0307 	add.w	r3, sp, #7
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	7989      	ldrb	r1, [r1, #6]
 8003ab6:	7800      	ldrb	r0, [r0, #0]
 8003ab8:	f7ff fe2c 	bl	8003714 <arduino_i2c_write>
 8003abc:	4603      	mov	r3, r0
 8003abe:	b9c8      	cbnz	r0, 8003af4 <mpu_set_gyro_fsr+0x8c>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
 8003ac0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003ac4:	08d2      	lsrs	r2, r2, #3
 8003ac6:	490d      	ldr	r1, [pc, #52]	; (8003afc <mpu_set_gyro_fsr+0x94>)
 8003ac8:	720a      	strb	r2, [r1, #8]
    return 0;
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	b003      	add	sp, #12
 8003ace:	f85d fb04 	ldr.w	pc, [sp], #4
        data = INV_FSR_500DPS << 3;
 8003ad2:	2308      	movs	r3, #8
 8003ad4:	f88d 3007 	strb.w	r3, [sp, #7]
        break;
 8003ad8:	e7df      	b.n	8003a9a <mpu_set_gyro_fsr+0x32>
        data = INV_FSR_1000DPS << 3;
 8003ada:	2310      	movs	r3, #16
 8003adc:	f88d 3007 	strb.w	r3, [sp, #7]
        break;
 8003ae0:	e7db      	b.n	8003a9a <mpu_set_gyro_fsr+0x32>
        return -1;
 8003ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	4770      	bx	lr
        return -1;
 8003aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aee:	e7ec      	b.n	8003aca <mpu_set_gyro_fsr+0x62>
        return 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	e7ea      	b.n	8003aca <mpu_set_gyro_fsr+0x62>
        return -1;
 8003af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003af8:	e7e7      	b.n	8003aca <mpu_set_gyro_fsr+0x62>
 8003afa:	bf00      	nop
 8003afc:	20000028 	.word	0x20000028

08003b00 <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
 8003b00:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <mpu_get_accel_fsr+0x40>)
 8003b02:	7a5b      	ldrb	r3, [r3, #9]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d816      	bhi.n	8003b36 <mpu_get_accel_fsr+0x36>
 8003b08:	e8df f003 	tbb	[pc, r3]
 8003b0c:	120f0c02 	.word	0x120f0c02
    case INV_FSR_2G:
        fsr[0] = 2;
 8003b10:	2302      	movs	r3, #2
 8003b12:	7003      	strb	r3, [r0, #0]
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
 8003b14:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <mpu_get_accel_fsr+0x40>)
 8003b16:	7cdb      	ldrb	r3, [r3, #19]
 8003b18:	b183      	cbz	r3, 8003b3c <mpu_get_accel_fsr+0x3c>
        fsr[0] <<= 1;
 8003b1a:	7803      	ldrb	r3, [r0, #0]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	7003      	strb	r3, [r0, #0]
    return 0;
 8003b20:	2000      	movs	r0, #0
 8003b22:	4770      	bx	lr
        fsr[0] = 4;
 8003b24:	2304      	movs	r3, #4
 8003b26:	7003      	strb	r3, [r0, #0]
        break;
 8003b28:	e7f4      	b.n	8003b14 <mpu_get_accel_fsr+0x14>
        fsr[0] = 8;
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	7003      	strb	r3, [r0, #0]
        break;
 8003b2e:	e7f1      	b.n	8003b14 <mpu_get_accel_fsr+0x14>
        fsr[0] = 16;
 8003b30:	2310      	movs	r3, #16
 8003b32:	7003      	strb	r3, [r0, #0]
        break;
 8003b34:	e7ee      	b.n	8003b14 <mpu_get_accel_fsr+0x14>
        return -1;
 8003b36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b3a:	4770      	bx	lr
    return 0;
 8003b3c:	2000      	movs	r0, #0
}
 8003b3e:	4770      	bx	lr
 8003b40:	20000028 	.word	0x20000028

08003b44 <mpu_set_accel_fsr>:
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8003b44:	4b24      	ldr	r3, [pc, #144]	; (8003bd8 <mpu_set_accel_fsr+0x94>)
 8003b46:	7a9b      	ldrb	r3, [r3, #10]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d039      	beq.n	8003bc0 <mpu_set_accel_fsr+0x7c>
{
 8003b4c:	b500      	push	{lr}
 8003b4e:	b083      	sub	sp, #12
        return -1;

    switch (fsr) {
 8003b50:	3802      	subs	r0, #2
 8003b52:	280e      	cmp	r0, #14
 8003b54:	d838      	bhi.n	8003bc8 <mpu_set_accel_fsr+0x84>
 8003b56:	e8df f000 	tbb	[pc, r0]
 8003b5a:	3708      	.short	0x3708
 8003b5c:	37373727 	.word	0x37373727
 8003b60:	3737372b 	.word	0x3737372b
 8003b64:	37373737 	.word	0x37373737
 8003b68:	2f          	.byte	0x2f
 8003b69:	00          	.byte	0x00
    case 2:
        data = INV_FSR_2G << 3;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f88d 3007 	strb.w	r3, [sp, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8003b70:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <mpu_set_accel_fsr+0x94>)
 8003b72:	7a5b      	ldrb	r3, [r3, #9]
 8003b74:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003b78:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8003b7c:	d027      	beq.n	8003bce <mpu_set_accel_fsr+0x8a>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8003b7e:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <mpu_set_accel_fsr+0x94>)
 8003b80:	6858      	ldr	r0, [r3, #4]
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	f10d 0307 	add.w	r3, sp, #7
 8003b88:	2201      	movs	r2, #1
 8003b8a:	79c9      	ldrb	r1, [r1, #7]
 8003b8c:	7800      	ldrb	r0, [r0, #0]
 8003b8e:	f7ff fdc1 	bl	8003714 <arduino_i2c_write>
 8003b92:	4603      	mov	r3, r0
 8003b94:	b9e8      	cbnz	r0, 8003bd2 <mpu_set_accel_fsr+0x8e>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
 8003b96:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003b9a:	08d2      	lsrs	r2, r2, #3
 8003b9c:	490e      	ldr	r1, [pc, #56]	; (8003bd8 <mpu_set_accel_fsr+0x94>)
 8003b9e:	724a      	strb	r2, [r1, #9]
    return 0;
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	b003      	add	sp, #12
 8003ba4:	f85d fb04 	ldr.w	pc, [sp], #4
        data = INV_FSR_4G << 3;
 8003ba8:	2308      	movs	r3, #8
 8003baa:	f88d 3007 	strb.w	r3, [sp, #7]
        break;
 8003bae:	e7df      	b.n	8003b70 <mpu_set_accel_fsr+0x2c>
        data = INV_FSR_8G << 3;
 8003bb0:	2310      	movs	r3, #16
 8003bb2:	f88d 3007 	strb.w	r3, [sp, #7]
        break;
 8003bb6:	e7db      	b.n	8003b70 <mpu_set_accel_fsr+0x2c>
        data = INV_FSR_16G << 3;
 8003bb8:	2318      	movs	r3, #24
 8003bba:	f88d 3007 	strb.w	r3, [sp, #7]
        break;
 8003bbe:	e7d7      	b.n	8003b70 <mpu_set_accel_fsr+0x2c>
        return -1;
 8003bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	4770      	bx	lr
        return -1;
 8003bc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bcc:	e7e8      	b.n	8003ba0 <mpu_set_accel_fsr+0x5c>
        return 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e7e6      	b.n	8003ba0 <mpu_set_accel_fsr+0x5c>
        return -1;
 8003bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bd6:	e7e3      	b.n	8003ba0 <mpu_set_accel_fsr+0x5c>
 8003bd8:	20000028 	.word	0x20000028

08003bdc <mpu_set_lpf>:
 */
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8003bdc:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <mpu_set_lpf+0x94>)
 8003bde:	7a9b      	ldrb	r3, [r3, #10]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d03c      	beq.n	8003c5e <mpu_set_lpf+0x82>
{
 8003be4:	b500      	push	{lr}
 8003be6:	b083      	sub	sp, #12
        return -1;

    if (lpf >= 188)
 8003be8:	28bb      	cmp	r0, #187	; 0xbb
 8003bea:	d91c      	bls.n	8003c26 <mpu_set_lpf+0x4a>
        data = INV_FILTER_188HZ;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f88d 3007 	strb.w	r3, [sp, #7]
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
 8003bf2:	4b1f      	ldr	r3, [pc, #124]	; (8003c70 <mpu_set_lpf+0x94>)
 8003bf4:	7ada      	ldrb	r2, [r3, #11]
 8003bf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d033      	beq.n	8003c66 <mpu_set_lpf+0x8a>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8003bfe:	4b1c      	ldr	r3, [pc, #112]	; (8003c70 <mpu_set_lpf+0x94>)
 8003c00:	6858      	ldr	r0, [r3, #4]
 8003c02:	6819      	ldr	r1, [r3, #0]
 8003c04:	f10d 0307 	add.w	r3, sp, #7
 8003c08:	2201      	movs	r2, #1
 8003c0a:	7889      	ldrb	r1, [r1, #2]
 8003c0c:	7800      	ldrb	r0, [r0, #0]
 8003c0e:	f7ff fd81 	bl	8003714 <arduino_i2c_write>
 8003c12:	4603      	mov	r3, r0
 8003c14:	bb48      	cbnz	r0, 8003c6a <mpu_set_lpf+0x8e>
        return -1;
    st.chip_cfg.lpf = data;
 8003c16:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8003c1a:	4a15      	ldr	r2, [pc, #84]	; (8003c70 <mpu_set_lpf+0x94>)
 8003c1c:	72d1      	strb	r1, [r2, #11]
    return 0;
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	b003      	add	sp, #12
 8003c22:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (lpf >= 98)
 8003c26:	2861      	cmp	r0, #97	; 0x61
 8003c28:	d903      	bls.n	8003c32 <mpu_set_lpf+0x56>
        data = INV_FILTER_98HZ;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	f88d 3007 	strb.w	r3, [sp, #7]
 8003c30:	e7df      	b.n	8003bf2 <mpu_set_lpf+0x16>
    else if (lpf >= 42)
 8003c32:	2829      	cmp	r0, #41	; 0x29
 8003c34:	d903      	bls.n	8003c3e <mpu_set_lpf+0x62>
        data = INV_FILTER_42HZ;
 8003c36:	2303      	movs	r3, #3
 8003c38:	f88d 3007 	strb.w	r3, [sp, #7]
 8003c3c:	e7d9      	b.n	8003bf2 <mpu_set_lpf+0x16>
    else if (lpf >= 20)
 8003c3e:	2813      	cmp	r0, #19
 8003c40:	d903      	bls.n	8003c4a <mpu_set_lpf+0x6e>
        data = INV_FILTER_20HZ;
 8003c42:	2304      	movs	r3, #4
 8003c44:	f88d 3007 	strb.w	r3, [sp, #7]
 8003c48:	e7d3      	b.n	8003bf2 <mpu_set_lpf+0x16>
    else if (lpf >= 10)
 8003c4a:	2809      	cmp	r0, #9
 8003c4c:	d903      	bls.n	8003c56 <mpu_set_lpf+0x7a>
        data = INV_FILTER_10HZ;
 8003c4e:	2305      	movs	r3, #5
 8003c50:	f88d 3007 	strb.w	r3, [sp, #7]
 8003c54:	e7cd      	b.n	8003bf2 <mpu_set_lpf+0x16>
        data = INV_FILTER_5HZ;
 8003c56:	2306      	movs	r3, #6
 8003c58:	f88d 3007 	strb.w	r3, [sp, #7]
 8003c5c:	e7c9      	b.n	8003bf2 <mpu_set_lpf+0x16>
        return -1;
 8003c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	4770      	bx	lr
        return 0;
 8003c66:	2300      	movs	r3, #0
 8003c68:	e7d9      	b.n	8003c1e <mpu_set_lpf+0x42>
        return -1;
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c6e:	e7d6      	b.n	8003c1e <mpu_set_lpf+0x42>
 8003c70:	20000028 	.word	0x20000028

08003c74 <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
 8003c74:	b510      	push	{r4, lr}
 8003c76:	b082      	sub	sp, #8
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8003c78:	b308      	cbz	r0, 8003cbe <mpu_set_compass_sample_rate+0x4a>
 8003c7a:	4b17      	ldr	r3, [pc, #92]	; (8003cd8 <mpu_set_compass_sample_rate+0x64>)
 8003c7c:	89db      	ldrh	r3, [r3, #14]
 8003c7e:	4283      	cmp	r3, r0
 8003c80:	d320      	bcc.n	8003cc4 <mpu_set_compass_sample_rate+0x50>
 8003c82:	2864      	cmp	r0, #100	; 0x64
 8003c84:	d821      	bhi.n	8003cca <mpu_set_compass_sample_rate+0x56>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
 8003c86:	fbb3 f3f0 	udiv	r3, r3, r0
 8003c8a:	1e5a      	subs	r2, r3, #1
 8003c8c:	ab02      	add	r3, sp, #8
 8003c8e:	f803 2d01 	strb.w	r2, [r3, #-1]!
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 8003c92:	4a11      	ldr	r2, [pc, #68]	; (8003cd8 <mpu_set_compass_sample_rate+0x64>)
 8003c94:	6850      	ldr	r0, [r2, #4]
 8003c96:	6811      	ldr	r1, [r2, #0]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 8003c9e:	7800      	ldrb	r0, [r0, #0]
 8003ca0:	f7ff fd38 	bl	8003714 <arduino_i2c_write>
 8003ca4:	4604      	mov	r4, r0
 8003ca6:	b998      	cbnz	r0, 8003cd0 <mpu_set_compass_sample_rate+0x5c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 8003ca8:	490b      	ldr	r1, [pc, #44]	; (8003cd8 <mpu_set_compass_sample_rate+0x64>)
 8003caa:	89cb      	ldrh	r3, [r1, #14]
 8003cac:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003cb0:	3201      	adds	r2, #1
 8003cb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8003cb6:	850b      	strh	r3, [r1, #40]	; 0x28
    return 0;
#else
    return -1;
#endif
}
 8003cb8:	4620      	mov	r0, r4
 8003cba:	b002      	add	sp, #8
 8003cbc:	bd10      	pop	{r4, pc}
        return -1;
 8003cbe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003cc2:	e7f9      	b.n	8003cb8 <mpu_set_compass_sample_rate+0x44>
 8003cc4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003cc8:	e7f6      	b.n	8003cb8 <mpu_set_compass_sample_rate+0x44>
 8003cca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003cce:	e7f3      	b.n	8003cb8 <mpu_set_compass_sample_rate+0x44>
        return -1;
 8003cd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003cd4:	e7f0      	b.n	8003cb8 <mpu_set_compass_sample_rate+0x44>
 8003cd6:	bf00      	nop
 8003cd8:	20000028 	.word	0x20000028

08003cdc <mpu_get_gyro_sens>:
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
    switch (st.chip_cfg.gyro_fsr) {
 8003cdc:	4b0d      	ldr	r3, [pc, #52]	; (8003d14 <mpu_get_gyro_sens+0x38>)
 8003cde:	7a1b      	ldrb	r3, [r3, #8]
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d813      	bhi.n	8003d0c <mpu_get_gyro_sens+0x30>
 8003ce4:	e8df f003 	tbb	[pc, r3]
 8003ce8:	0e0a0602 	.word	0x0e0a0602
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <mpu_get_gyro_sens+0x3c>)
 8003cee:	6003      	str	r3, [r0, #0]
        sens[0] = 16.4f;
        break;
    default:
        return -1;
    }
    return 0;
 8003cf0:	2000      	movs	r0, #0
        break;
 8003cf2:	4770      	bx	lr
        sens[0] = 65.5f;
 8003cf4:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <mpu_get_gyro_sens+0x40>)
 8003cf6:	6003      	str	r3, [r0, #0]
    return 0;
 8003cf8:	2000      	movs	r0, #0
        break;
 8003cfa:	4770      	bx	lr
        sens[0] = 32.8f;
 8003cfc:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <mpu_get_gyro_sens+0x44>)
 8003cfe:	6003      	str	r3, [r0, #0]
    return 0;
 8003d00:	2000      	movs	r0, #0
        break;
 8003d02:	4770      	bx	lr
        sens[0] = 16.4f;
 8003d04:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <mpu_get_gyro_sens+0x48>)
 8003d06:	6003      	str	r3, [r0, #0]
    return 0;
 8003d08:	2000      	movs	r0, #0
        break;
 8003d0a:	4770      	bx	lr
        return -1;
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20000028 	.word	0x20000028
 8003d18:	43030000 	.word	0x43030000
 8003d1c:	42830000 	.word	0x42830000
 8003d20:	42033333 	.word	0x42033333
 8003d24:	41833333 	.word	0x41833333

08003d28 <mpu_get_accel_sens>:
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
    switch (st.chip_cfg.accel_fsr) {
 8003d28:	4b11      	ldr	r3, [pc, #68]	; (8003d70 <mpu_get_accel_sens+0x48>)
 8003d2a:	7a5b      	ldrb	r3, [r3, #9]
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	d81a      	bhi.n	8003d66 <mpu_get_accel_sens+0x3e>
 8003d30:	e8df f003 	tbb	[pc, r3]
 8003d34:	15110d02 	.word	0x15110d02
    case INV_FSR_2G:
        sens[0] = 16384;
 8003d38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d3c:	8003      	strh	r3, [r0, #0]
        sens[0] = 2048;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
 8003d3e:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <mpu_get_accel_sens+0x48>)
 8003d40:	7cdb      	ldrb	r3, [r3, #19]
 8003d42:	b19b      	cbz	r3, 8003d6c <mpu_get_accel_sens+0x44>
        sens[0] >>= 1;
 8003d44:	8803      	ldrh	r3, [r0, #0]
 8003d46:	085b      	lsrs	r3, r3, #1
 8003d48:	8003      	strh	r3, [r0, #0]
    return 0;
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	4770      	bx	lr
        sens[0] = 8192;
 8003d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d52:	8003      	strh	r3, [r0, #0]
        break;
 8003d54:	e7f3      	b.n	8003d3e <mpu_get_accel_sens+0x16>
        sens[0] = 4096;
 8003d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d5a:	8003      	strh	r3, [r0, #0]
        break;
 8003d5c:	e7ef      	b.n	8003d3e <mpu_get_accel_sens+0x16>
        sens[0] = 2048;
 8003d5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d62:	8003      	strh	r3, [r0, #0]
        break;
 8003d64:	e7eb      	b.n	8003d3e <mpu_get_accel_sens+0x16>
        return -1;
 8003d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d6a:	4770      	bx	lr
    return 0;
 8003d6c:	2000      	movs	r0, #0
}
 8003d6e:	4770      	bx	lr
 8003d70:	20000028 	.word	0x20000028

08003d74 <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 8003d74:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
 8003d76:	4b16      	ldr	r3, [pc, #88]	; (8003dd0 <mpu_configure_fifo+0x5c>)
 8003d78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d7c:	bb13      	cbnz	r3, 8003dc4 <mpu_configure_fifo+0x50>
 8003d7e:	f000 04fe 	and.w	r4, r0, #254	; 0xfe
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
 8003d82:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <mpu_configure_fifo+0x5c>)
 8003d84:	7a9b      	ldrb	r3, [r3, #10]
 8003d86:	b303      	cbz	r3, 8003dca <mpu_configure_fifo+0x56>
            return -1;
        prev = st.chip_cfg.fifo_enable;
 8003d88:	4a11      	ldr	r2, [pc, #68]	; (8003dd0 <mpu_configure_fifo+0x5c>)
 8003d8a:	7c16      	ldrb	r6, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8003d8c:	4023      	ands	r3, r4
 8003d8e:	7413      	strb	r3, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8003d90:	42a3      	cmp	r3, r4
 8003d92:	d011      	beq.n	8003db8 <mpu_configure_fifo+0x44>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 8003d94:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
 8003d98:	b914      	cbnz	r4, 8003da0 <mpu_configure_fifo+0x2c>
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <mpu_configure_fifo+0x5c>)
 8003d9c:	7d1b      	ldrb	r3, [r3, #20]
 8003d9e:	b16b      	cbz	r3, 8003dbc <mpu_configure_fifo+0x48>
            set_int_enable(1);
 8003da0:	2001      	movs	r0, #1
 8003da2:	f7ff fcf5 	bl	8003790 <set_int_enable>
        else
            set_int_enable(0);
        if (sensors) {
 8003da6:	b174      	cbz	r4, 8003dc6 <mpu_configure_fifo+0x52>
            if (mpu_reset_fifo()) {
 8003da8:	f7ff fd62 	bl	8003870 <mpu_reset_fifo>
 8003dac:	b158      	cbz	r0, 8003dc6 <mpu_configure_fifo+0x52>
                st.chip_cfg.fifo_enable = prev;
 8003dae:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <mpu_configure_fifo+0x5c>)
 8003db0:	741e      	strb	r6, [r3, #16]
                return -1;
 8003db2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003db6:	e006      	b.n	8003dc6 <mpu_configure_fifo+0x52>
            result = 0;
 8003db8:	2500      	movs	r5, #0
 8003dba:	e7ed      	b.n	8003d98 <mpu_configure_fifo+0x24>
            set_int_enable(0);
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	f7ff fce7 	bl	8003790 <set_int_enable>
 8003dc2:	e7f0      	b.n	8003da6 <mpu_configure_fifo+0x32>
        return 0;
 8003dc4:	2500      	movs	r5, #0
            }
        }
    }

    return result;
}
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	bd70      	pop	{r4, r5, r6, pc}
            return -1;
 8003dca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003dce:	e7fa      	b.n	8003dc6 <mpu_configure_fifo+0x52>
 8003dd0:	20000028 	.word	0x20000028

08003dd4 <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 8003dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dd6:	b083      	sub	sp, #12
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 8003dd8:	4f2e      	ldr	r7, [pc, #184]	; (8003e94 <mpu_read_fifo_stream+0xc0>)
 8003dda:	f897 7024 	ldrb.w	r7, [r7, #36]	; 0x24
 8003dde:	2f00      	cmp	r7, #0
 8003de0:	d049      	beq.n	8003e76 <mpu_read_fifo_stream+0xa2>
        return -1;
    if (!st.chip_cfg.sensors)
 8003de2:	4f2c      	ldr	r7, [pc, #176]	; (8003e94 <mpu_read_fifo_stream+0xc0>)
 8003de4:	7abf      	ldrb	r7, [r7, #10]
 8003de6:	2f00      	cmp	r7, #0
 8003de8:	d048      	beq.n	8003e7c <mpu_read_fifo_stream+0xa8>
 8003dea:	4616      	mov	r6, r2
 8003dec:	460f      	mov	r7, r1
 8003dee:	4605      	mov	r5, r0
        return -1;

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 8003df0:	4b28      	ldr	r3, [pc, #160]	; (8003e94 <mpu_read_fifo_stream+0xc0>)
 8003df2:	6858      	ldr	r0, [r3, #4]
 8003df4:	6819      	ldr	r1, [r3, #0]
 8003df6:	ab01      	add	r3, sp, #4
 8003df8:	2202      	movs	r2, #2
 8003dfa:	7b09      	ldrb	r1, [r1, #12]
 8003dfc:	7800      	ldrb	r0, [r0, #0]
 8003dfe:	f7ff fca7 	bl	8003750 <arduino_i2c_read>
 8003e02:	2800      	cmp	r0, #0
 8003e04:	d13d      	bne.n	8003e82 <mpu_read_fifo_stream+0xae>
        return -1;
    fifo_count = (tmp[0] << 8) | tmp[1];
 8003e06:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8003e0a:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8003e0e:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    if (fifo_count < length) {
 8003e12:	42ac      	cmp	r4, r5
 8003e14:	d325      	bcc.n	8003e62 <mpu_read_fifo_stream+0x8e>
        more[0] = 0;
        return -1;
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 8003e16:	4b1f      	ldr	r3, [pc, #124]	; (8003e94 <mpu_read_fifo_stream+0xc0>)
 8003e18:	6858      	ldr	r0, [r3, #4]
 8003e1a:	8843      	ldrh	r3, [r0, #2]
 8003e1c:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 8003e20:	d90d      	bls.n	8003e3e <mpu_read_fifo_stream+0x6a>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 8003e22:	4b1c      	ldr	r3, [pc, #112]	; (8003e94 <mpu_read_fifo_stream+0xc0>)
 8003e24:	6819      	ldr	r1, [r3, #0]
 8003e26:	ab01      	add	r3, sp, #4
 8003e28:	2201      	movs	r2, #1
 8003e2a:	7cc9      	ldrb	r1, [r1, #19]
 8003e2c:	7800      	ldrb	r0, [r0, #0]
 8003e2e:	f7ff fc8f 	bl	8003750 <arduino_i2c_read>
 8003e32:	bb48      	cbnz	r0, 8003e88 <mpu_read_fifo_stream+0xb4>
            return -1;
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 8003e34:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003e38:	f013 0f10 	tst.w	r3, #16
 8003e3c:	d116      	bne.n	8003e6c <mpu_read_fifo_stream+0x98>
            mpu_reset_fifo();
            return -2;
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8003e3e:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <mpu_read_fifo_stream+0xc0>)
 8003e40:	6858      	ldr	r0, [r3, #4]
 8003e42:	6819      	ldr	r1, [r3, #0]
 8003e44:	463b      	mov	r3, r7
 8003e46:	b2ea      	uxtb	r2, r5
 8003e48:	7b49      	ldrb	r1, [r1, #13]
 8003e4a:	7800      	ldrb	r0, [r0, #0]
 8003e4c:	f7ff fc80 	bl	8003750 <arduino_i2c_read>
 8003e50:	4603      	mov	r3, r0
 8003e52:	b9e0      	cbnz	r0, 8003e8e <mpu_read_fifo_stream+0xba>
        return -1;
    more[0] = fifo_count / length - 1;
 8003e54:	fbb4 f4f5 	udiv	r4, r4, r5
 8003e58:	3c01      	subs	r4, #1
 8003e5a:	7034      	strb	r4, [r6, #0]
    return 0;
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	b003      	add	sp, #12
 8003e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
        more[0] = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	7033      	strb	r3, [r6, #0]
        return -1;
 8003e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e6a:	e7f7      	b.n	8003e5c <mpu_read_fifo_stream+0x88>
            mpu_reset_fifo();
 8003e6c:	f7ff fd00 	bl	8003870 <mpu_reset_fifo>
            return -2;
 8003e70:	f06f 0301 	mvn.w	r3, #1
 8003e74:	e7f2      	b.n	8003e5c <mpu_read_fifo_stream+0x88>
        return -1;
 8003e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e7a:	e7ef      	b.n	8003e5c <mpu_read_fifo_stream+0x88>
        return -1;
 8003e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e80:	e7ec      	b.n	8003e5c <mpu_read_fifo_stream+0x88>
        return -1;
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e86:	e7e9      	b.n	8003e5c <mpu_read_fifo_stream+0x88>
            return -1;
 8003e88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e8c:	e7e6      	b.n	8003e5c <mpu_read_fifo_stream+0x88>
        return -1;
 8003e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e92:	e7e3      	b.n	8003e5c <mpu_read_fifo_stream+0x88>
 8003e94:	20000028 	.word	0x20000028

08003e98 <mpu_set_bypass>:
 */
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 8003e98:	4b58      	ldr	r3, [pc, #352]	; (8003ffc <mpu_set_bypass+0x164>)
 8003e9a:	7c9b      	ldrb	r3, [r3, #18]
 8003e9c:	4283      	cmp	r3, r0
 8003e9e:	f000 809b 	beq.w	8003fd8 <mpu_set_bypass+0x140>
{
 8003ea2:	b510      	push	{r4, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	4604      	mov	r4, r0
        return 0;

    if (bypass_on) {
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	d043      	beq.n	8003f34 <mpu_set_bypass+0x9c>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003eac:	4b53      	ldr	r3, [pc, #332]	; (8003ffc <mpu_set_bypass+0x164>)
 8003eae:	6858      	ldr	r0, [r3, #4]
 8003eb0:	6819      	ldr	r1, [r3, #0]
 8003eb2:	f10d 0307 	add.w	r3, sp, #7
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	7909      	ldrb	r1, [r1, #4]
 8003eba:	7800      	ldrb	r0, [r0, #0]
 8003ebc:	f7ff fc48 	bl	8003750 <arduino_i2c_read>
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	f040 808b 	bne.w	8003fdc <mpu_set_bypass+0x144>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
 8003ec6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8003eca:	f022 0220 	bic.w	r2, r2, #32
 8003ece:	ab02      	add	r3, sp, #8
 8003ed0:	f803 2d01 	strb.w	r2, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003ed4:	4a49      	ldr	r2, [pc, #292]	; (8003ffc <mpu_set_bypass+0x164>)
 8003ed6:	6850      	ldr	r0, [r2, #4]
 8003ed8:	6811      	ldr	r1, [r2, #0]
 8003eda:	2201      	movs	r2, #1
 8003edc:	7909      	ldrb	r1, [r1, #4]
 8003ede:	7800      	ldrb	r0, [r0, #0]
 8003ee0:	f7ff fc18 	bl	8003714 <arduino_i2c_write>
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d17c      	bne.n	8003fe2 <mpu_set_bypass+0x14a>
            return -1;
        delay_ms(3);
 8003ee8:	2003      	movs	r0, #3
 8003eea:	f7ff fc0d 	bl	8003708 <arduino_delay_ms>
        tmp = BIT_BYPASS_EN;
 8003eee:	2302      	movs	r3, #2
 8003ef0:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.active_low_int)
 8003ef4:	4b41      	ldr	r3, [pc, #260]	; (8003ffc <mpu_set_bypass+0x164>)
 8003ef6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003efa:	b113      	cbz	r3, 8003f02 <mpu_set_bypass+0x6a>
            tmp |= BIT_ACTL;
 8003efc:	2382      	movs	r3, #130	; 0x82
 8003efe:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 8003f02:	4b3e      	ldr	r3, [pc, #248]	; (8003ffc <mpu_set_bypass+0x164>)
 8003f04:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003f08:	b12b      	cbz	r3, 8003f16 <mpu_set_bypass+0x7e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8003f0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003f0e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003f12:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8003f16:	4b39      	ldr	r3, [pc, #228]	; (8003ffc <mpu_set_bypass+0x164>)
 8003f18:	6858      	ldr	r0, [r3, #4]
 8003f1a:	6819      	ldr	r1, [r3, #0]
 8003f1c:	f10d 0307 	add.w	r3, sp, #7
 8003f20:	2201      	movs	r2, #1
 8003f22:	7dc9      	ldrb	r1, [r1, #23]
 8003f24:	7800      	ldrb	r0, [r0, #0]
 8003f26:	f7ff fbf5 	bl	8003714 <arduino_i2c_write>
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d044      	beq.n	8003fb8 <mpu_set_bypass+0x120>
            return -1;
 8003f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f32:	e044      	b.n	8003fbe <mpu_set_bypass+0x126>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003f34:	4b31      	ldr	r3, [pc, #196]	; (8003ffc <mpu_set_bypass+0x164>)
 8003f36:	6858      	ldr	r0, [r3, #4]
 8003f38:	6819      	ldr	r1, [r3, #0]
 8003f3a:	f10d 0307 	add.w	r3, sp, #7
 8003f3e:	2201      	movs	r2, #1
 8003f40:	7909      	ldrb	r1, [r1, #4]
 8003f42:	7800      	ldrb	r0, [r0, #0]
 8003f44:	f7ff fc04 	bl	8003750 <arduino_i2c_read>
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	d14d      	bne.n	8003fe8 <mpu_set_bypass+0x150>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8003f4c:	4b2b      	ldr	r3, [pc, #172]	; (8003ffc <mpu_set_bypass+0x164>)
 8003f4e:	7a9b      	ldrb	r3, [r3, #10]
 8003f50:	f013 0f01 	tst.w	r3, #1
 8003f54:	d035      	beq.n	8003fc2 <mpu_set_bypass+0x12a>
            tmp |= BIT_AUX_IF_EN;
 8003f56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003f5a:	f043 0320 	orr.w	r3, r3, #32
 8003f5e:	f88d 3007 	strb.w	r3, [sp, #7]
        else
            tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 8003f62:	4b26      	ldr	r3, [pc, #152]	; (8003ffc <mpu_set_bypass+0x164>)
 8003f64:	6858      	ldr	r0, [r3, #4]
 8003f66:	6819      	ldr	r1, [r3, #0]
 8003f68:	f10d 0307 	add.w	r3, sp, #7
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	7909      	ldrb	r1, [r1, #4]
 8003f70:	7800      	ldrb	r0, [r0, #0]
 8003f72:	f7ff fbcf 	bl	8003714 <arduino_i2c_write>
 8003f76:	2800      	cmp	r0, #0
 8003f78:	d139      	bne.n	8003fee <mpu_set_bypass+0x156>
            return -1;
        delay_ms(3);
 8003f7a:	2003      	movs	r0, #3
 8003f7c:	f7ff fbc4 	bl	8003708 <arduino_delay_ms>
        if (st.chip_cfg.active_low_int)
 8003f80:	4b1e      	ldr	r3, [pc, #120]	; (8003ffc <mpu_set_bypass+0x164>)
 8003f82:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003f86:	b31b      	cbz	r3, 8003fd0 <mpu_set_bypass+0x138>
            tmp = BIT_ACTL;
 8003f88:	2380      	movs	r3, #128	; 0x80
 8003f8a:	f88d 3007 	strb.w	r3, [sp, #7]
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
 8003f8e:	4b1b      	ldr	r3, [pc, #108]	; (8003ffc <mpu_set_bypass+0x164>)
 8003f90:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003f94:	b12b      	cbz	r3, 8003fa2 <mpu_set_bypass+0x10a>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8003f96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003f9a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003f9e:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8003fa2:	4b16      	ldr	r3, [pc, #88]	; (8003ffc <mpu_set_bypass+0x164>)
 8003fa4:	6858      	ldr	r0, [r3, #4]
 8003fa6:	6819      	ldr	r1, [r3, #0]
 8003fa8:	f10d 0307 	add.w	r3, sp, #7
 8003fac:	2201      	movs	r2, #1
 8003fae:	7dc9      	ldrb	r1, [r1, #23]
 8003fb0:	7800      	ldrb	r0, [r0, #0]
 8003fb2:	f7ff fbaf 	bl	8003714 <arduino_i2c_write>
 8003fb6:	b9e8      	cbnz	r0, 8003ff4 <mpu_set_bypass+0x15c>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
 8003fb8:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <mpu_set_bypass+0x164>)
 8003fba:	749c      	strb	r4, [r3, #18]
    return 0;
 8003fbc:	2000      	movs	r0, #0
}
 8003fbe:	b002      	add	sp, #8
 8003fc0:	bd10      	pop	{r4, pc}
            tmp &= ~BIT_AUX_IF_EN;
 8003fc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003fc6:	f023 0320 	bic.w	r3, r3, #32
 8003fca:	f88d 3007 	strb.w	r3, [sp, #7]
 8003fce:	e7c8      	b.n	8003f62 <mpu_set_bypass+0xca>
            tmp = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f88d 3007 	strb.w	r3, [sp, #7]
 8003fd6:	e7da      	b.n	8003f8e <mpu_set_bypass+0xf6>
        return 0;
 8003fd8:	2000      	movs	r0, #0
}
 8003fda:	4770      	bx	lr
            return -1;
 8003fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fe0:	e7ed      	b.n	8003fbe <mpu_set_bypass+0x126>
            return -1;
 8003fe2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fe6:	e7ea      	b.n	8003fbe <mpu_set_bypass+0x126>
            return -1;
 8003fe8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fec:	e7e7      	b.n	8003fbe <mpu_set_bypass+0x126>
            return -1;
 8003fee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ff2:	e7e4      	b.n	8003fbe <mpu_set_bypass+0x126>
            return -1;
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ff8:	e7e1      	b.n	8003fbe <mpu_set_bypass+0x126>
 8003ffa:	bf00      	nop
 8003ffc:	20000028 	.word	0x20000028

08004000 <setup_compass>:
}

#ifdef AK89xx_SECONDARY
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
 8004000:	b510      	push	{r4, lr}
 8004002:	b082      	sub	sp, #8
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 8004004:	2001      	movs	r0, #1
 8004006:	f7ff ff47 	bl	8003e98 <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 800400a:	240c      	movs	r4, #12
 800400c:	e001      	b.n	8004012 <setup_compass+0x12>
 800400e:	3401      	adds	r4, #1
 8004010:	b2e4      	uxtb	r4, r4
 8004012:	2c0f      	cmp	r4, #15
 8004014:	d80b      	bhi.n	800402e <setup_compass+0x2e>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 8004016:	ab01      	add	r3, sp, #4
 8004018:	2201      	movs	r2, #1
 800401a:	2100      	movs	r1, #0
 800401c:	4620      	mov	r0, r4
 800401e:	f7ff fb97 	bl	8003750 <arduino_i2c_read>
        if (!result && (data[0] == AKM_WHOAMI))
 8004022:	2800      	cmp	r0, #0
 8004024:	d1f3      	bne.n	800400e <setup_compass+0xe>
 8004026:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800402a:	2b48      	cmp	r3, #72	; 0x48
 800402c:	d1ef      	bne.n	800400e <setup_compass+0xe>
            break;
    }

    if (akm_addr > 0x0F) {
 800402e:	2c0f      	cmp	r4, #15
 8004030:	f200 80db 	bhi.w	80041ea <setup_compass+0x1ea>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
 8004034:	4b83      	ldr	r3, [pc, #524]	; (8004244 <setup_compass+0x244>)
 8004036:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a

    data[0] = AKM_POWER_DOWN;
 800403a:	ab02      	add	r3, sp, #8
 800403c:	2210      	movs	r2, #16
 800403e:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8004042:	2201      	movs	r2, #1
 8004044:	210a      	movs	r1, #10
 8004046:	4620      	mov	r0, r4
 8004048:	f7ff fb64 	bl	8003714 <arduino_i2c_write>
 800404c:	2800      	cmp	r0, #0
 800404e:	f040 80d5 	bne.w	80041fc <setup_compass+0x1fc>
        return -1;
    delay_ms(1);
 8004052:	2001      	movs	r0, #1
 8004054:	f7ff fb58 	bl	8003708 <arduino_delay_ms>

    data[0] = AKM_FUSE_ROM_ACCESS;
 8004058:	ab02      	add	r3, sp, #8
 800405a:	221f      	movs	r2, #31
 800405c:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8004060:	2201      	movs	r2, #1
 8004062:	210a      	movs	r1, #10
 8004064:	4877      	ldr	r0, [pc, #476]	; (8004244 <setup_compass+0x244>)
 8004066:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 800406a:	f7ff fb53 	bl	8003714 <arduino_i2c_write>
 800406e:	2800      	cmp	r0, #0
 8004070:	f040 80c7 	bne.w	8004202 <setup_compass+0x202>
        return -1;
    delay_ms(1);
 8004074:	2001      	movs	r0, #1
 8004076:	f7ff fb47 	bl	8003708 <arduino_delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 800407a:	ab01      	add	r3, sp, #4
 800407c:	2203      	movs	r2, #3
 800407e:	2110      	movs	r1, #16
 8004080:	4870      	ldr	r0, [pc, #448]	; (8004244 <setup_compass+0x244>)
 8004082:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8004086:	f7ff fb63 	bl	8003750 <arduino_i2c_read>
 800408a:	2800      	cmp	r0, #0
 800408c:	f040 80bc 	bne.w	8004208 <setup_compass+0x208>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8004090:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004094:	3380      	adds	r3, #128	; 0x80
 8004096:	486b      	ldr	r0, [pc, #428]	; (8004244 <setup_compass+0x244>)
 8004098:	8583      	strh	r3, [r0, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 800409a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800409e:	3380      	adds	r3, #128	; 0x80
 80040a0:	85c3      	strh	r3, [r0, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 80040a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80040a6:	3380      	adds	r3, #128	; 0x80
 80040a8:	8603      	strh	r3, [r0, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
 80040aa:	ab02      	add	r3, sp, #8
 80040ac:	2210      	movs	r2, #16
 80040ae:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80040b2:	2201      	movs	r2, #1
 80040b4:	210a      	movs	r1, #10
 80040b6:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 80040ba:	f7ff fb2b 	bl	8003714 <arduino_i2c_write>
 80040be:	2800      	cmp	r0, #0
 80040c0:	f040 80a5 	bne.w	800420e <setup_compass+0x20e>
        return -1;
    delay_ms(1);
 80040c4:	2001      	movs	r0, #1
 80040c6:	f7ff fb1f 	bl	8003708 <arduino_delay_ms>

    mpu_set_bypass(0);
 80040ca:	2000      	movs	r0, #0
 80040cc:	f7ff fee4 	bl	8003e98 <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
 80040d0:	ab02      	add	r3, sp, #8
 80040d2:	2240      	movs	r2, #64	; 0x40
 80040d4:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80040d8:	4a5a      	ldr	r2, [pc, #360]	; (8004244 <setup_compass+0x244>)
 80040da:	6850      	ldr	r0, [r2, #4]
 80040dc:	6811      	ldr	r1, [r2, #0]
 80040de:	2201      	movs	r2, #1
 80040e0:	7e89      	ldrb	r1, [r1, #26]
 80040e2:	7800      	ldrb	r0, [r0, #0]
 80040e4:	f7ff fb16 	bl	8003714 <arduino_i2c_write>
 80040e8:	2800      	cmp	r0, #0
 80040ea:	f040 8093 	bne.w	8004214 <setup_compass+0x214>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 80040ee:	4a55      	ldr	r2, [pc, #340]	; (8004244 <setup_compass+0x244>)
 80040f0:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80040f4:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80040f8:	ab02      	add	r3, sp, #8
 80040fa:	f803 1d04 	strb.w	r1, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 80040fe:	6850      	ldr	r0, [r2, #4]
 8004100:	6811      	ldr	r1, [r2, #0]
 8004102:	2201      	movs	r2, #1
 8004104:	7f89      	ldrb	r1, [r1, #30]
 8004106:	7800      	ldrb	r0, [r0, #0]
 8004108:	f7ff fb04 	bl	8003714 <arduino_i2c_write>
 800410c:	2800      	cmp	r0, #0
 800410e:	f040 8084 	bne.w	800421a <setup_compass+0x21a>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
 8004112:	ab02      	add	r3, sp, #8
 8004114:	2202      	movs	r2, #2
 8004116:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 800411a:	4a4a      	ldr	r2, [pc, #296]	; (8004244 <setup_compass+0x244>)
 800411c:	6850      	ldr	r0, [r2, #4]
 800411e:	6811      	ldr	r1, [r2, #0]
 8004120:	2201      	movs	r2, #1
 8004122:	7fc9      	ldrb	r1, [r1, #31]
 8004124:	7800      	ldrb	r0, [r0, #0]
 8004126:	f7ff faf5 	bl	8003714 <arduino_i2c_write>
 800412a:	2800      	cmp	r0, #0
 800412c:	d178      	bne.n	8004220 <setup_compass+0x220>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
 800412e:	ab02      	add	r3, sp, #8
 8004130:	2288      	movs	r2, #136	; 0x88
 8004132:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 8004136:	4a43      	ldr	r2, [pc, #268]	; (8004244 <setup_compass+0x244>)
 8004138:	6850      	ldr	r0, [r2, #4]
 800413a:	6811      	ldr	r1, [r2, #0]
 800413c:	2201      	movs	r2, #1
 800413e:	f891 1020 	ldrb.w	r1, [r1, #32]
 8004142:	7800      	ldrb	r0, [r0, #0]
 8004144:	f7ff fae6 	bl	8003714 <arduino_i2c_write>
 8004148:	2800      	cmp	r0, #0
 800414a:	d16c      	bne.n	8004226 <setup_compass+0x226>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
 800414c:	4a3d      	ldr	r2, [pc, #244]	; (8004244 <setup_compass+0x244>)
 800414e:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8004152:	ab02      	add	r3, sp, #8
 8004154:	f803 1d04 	strb.w	r1, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8004158:	6850      	ldr	r0, [r2, #4]
 800415a:	6811      	ldr	r1, [r2, #0]
 800415c:	2201      	movs	r2, #1
 800415e:	f891 1021 	ldrb.w	r1, [r1, #33]	; 0x21
 8004162:	7800      	ldrb	r0, [r0, #0]
 8004164:	f7ff fad6 	bl	8003714 <arduino_i2c_write>
 8004168:	2800      	cmp	r0, #0
 800416a:	d15f      	bne.n	800422c <setup_compass+0x22c>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
 800416c:	ab02      	add	r3, sp, #8
 800416e:	220a      	movs	r2, #10
 8004170:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 8004174:	4a33      	ldr	r2, [pc, #204]	; (8004244 <setup_compass+0x244>)
 8004176:	6850      	ldr	r0, [r2, #4]
 8004178:	6811      	ldr	r1, [r2, #0]
 800417a:	2201      	movs	r2, #1
 800417c:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8004180:	7800      	ldrb	r0, [r0, #0]
 8004182:	f7ff fac7 	bl	8003714 <arduino_i2c_write>
 8004186:	2800      	cmp	r0, #0
 8004188:	d153      	bne.n	8004232 <setup_compass+0x232>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
 800418a:	ab02      	add	r3, sp, #8
 800418c:	2281      	movs	r2, #129	; 0x81
 800418e:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 8004192:	4a2c      	ldr	r2, [pc, #176]	; (8004244 <setup_compass+0x244>)
 8004194:	6850      	ldr	r0, [r2, #4]
 8004196:	6811      	ldr	r1, [r2, #0]
 8004198:	2201      	movs	r2, #1
 800419a:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
 800419e:	7800      	ldrb	r0, [r0, #0]
 80041a0:	f7ff fab8 	bl	8003714 <arduino_i2c_write>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	d147      	bne.n	8004238 <setup_compass+0x238>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
 80041a8:	ab02      	add	r3, sp, #8
 80041aa:	2211      	movs	r2, #17
 80041ac:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 80041b0:	4a24      	ldr	r2, [pc, #144]	; (8004244 <setup_compass+0x244>)
 80041b2:	6850      	ldr	r0, [r2, #4]
 80041b4:	6811      	ldr	r1, [r2, #0]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 80041bc:	7800      	ldrb	r0, [r0, #0]
 80041be:	f7ff faa9 	bl	8003714 <arduino_i2c_write>
 80041c2:	2800      	cmp	r0, #0
 80041c4:	d13b      	bne.n	800423e <setup_compass+0x23e>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
 80041c6:	ab02      	add	r3, sp, #8
 80041c8:	2203      	movs	r2, #3
 80041ca:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 80041ce:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <setup_compass+0x244>)
 80041d0:	6850      	ldr	r0, [r2, #4]
 80041d2:	6811      	ldr	r1, [r2, #0]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 80041da:	7800      	ldrb	r0, [r0, #0]
 80041dc:	f7ff fa9a 	bl	8003714 <arduino_i2c_write>
 80041e0:	4603      	mov	r3, r0
 80041e2:	b940      	cbnz	r0, 80041f6 <setup_compass+0x1f6>
    if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
        return -1;
#endif

    return 0;
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	b002      	add	sp, #8
 80041e8:	bd10      	pop	{r4, pc}
        log_e("Compass not found.\n");
 80041ea:	4817      	ldr	r0, [pc, #92]	; (8004248 <setup_compass+0x248>)
 80041ec:	f7ff facc 	bl	8003788 <_MLPrintLog>
        return -1;
 80041f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041f4:	e7f6      	b.n	80041e4 <setup_compass+0x1e4>
        return -1;
 80041f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041fa:	e7f3      	b.n	80041e4 <setup_compass+0x1e4>
        return -1;
 80041fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004200:	e7f0      	b.n	80041e4 <setup_compass+0x1e4>
        return -1;
 8004202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004206:	e7ed      	b.n	80041e4 <setup_compass+0x1e4>
        return -1;
 8004208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800420c:	e7ea      	b.n	80041e4 <setup_compass+0x1e4>
        return -1;
 800420e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004212:	e7e7      	b.n	80041e4 <setup_compass+0x1e4>
        return -1;
 8004214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004218:	e7e4      	b.n	80041e4 <setup_compass+0x1e4>
        return -1;
 800421a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800421e:	e7e1      	b.n	80041e4 <setup_compass+0x1e4>
        return -1;
 8004220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004224:	e7de      	b.n	80041e4 <setup_compass+0x1e4>
        return -1;
 8004226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800422a:	e7db      	b.n	80041e4 <setup_compass+0x1e4>
        return -1;
 800422c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004230:	e7d8      	b.n	80041e4 <setup_compass+0x1e4>
        return -1;
 8004232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004236:	e7d5      	b.n	80041e4 <setup_compass+0x1e4>
        return -1;
 8004238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800423c:	e7d2      	b.n	80041e4 <setup_compass+0x1e4>
        return -1;
 800423e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004242:	e7cf      	b.n	80041e4 <setup_compass+0x1e4>
 8004244:	20000028 	.word	0x20000028
 8004248:	08008498 	.word	0x08008498

0800424c <mpu_set_int_latched>:
    if (st.chip_cfg.latched_int == enable)
 800424c:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <mpu_set_int_latched+0x78>)
 800424e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004252:	4283      	cmp	r3, r0
 8004254:	d02f      	beq.n	80042b6 <mpu_set_int_latched+0x6a>
{
 8004256:	b510      	push	{r4, lr}
 8004258:	b082      	sub	sp, #8
    if (enable)
 800425a:	b340      	cbz	r0, 80042ae <mpu_set_int_latched+0x62>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800425c:	2330      	movs	r3, #48	; 0x30
 800425e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.bypass_mode)
 8004262:	4b18      	ldr	r3, [pc, #96]	; (80042c4 <mpu_set_int_latched+0x78>)
 8004264:	7c9b      	ldrb	r3, [r3, #18]
 8004266:	b12b      	cbz	r3, 8004274 <mpu_set_int_latched+0x28>
        tmp |= BIT_BYPASS_EN;
 8004268:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800426c:	f043 0302 	orr.w	r3, r3, #2
 8004270:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.active_low_int)
 8004274:	4b13      	ldr	r3, [pc, #76]	; (80042c4 <mpu_set_int_latched+0x78>)
 8004276:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800427a:	b12b      	cbz	r3, 8004288 <mpu_set_int_latched+0x3c>
        tmp |= BIT_ACTL;
 800427c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004280:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004284:	f88d 3007 	strb.w	r3, [sp, #7]
 8004288:	4604      	mov	r4, r0
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800428a:	4b0e      	ldr	r3, [pc, #56]	; (80042c4 <mpu_set_int_latched+0x78>)
 800428c:	6858      	ldr	r0, [r3, #4]
 800428e:	6819      	ldr	r1, [r3, #0]
 8004290:	f10d 0307 	add.w	r3, sp, #7
 8004294:	2201      	movs	r2, #1
 8004296:	7dc9      	ldrb	r1, [r1, #23]
 8004298:	7800      	ldrb	r0, [r0, #0]
 800429a:	f7ff fa3b 	bl	8003714 <arduino_i2c_write>
 800429e:	4603      	mov	r3, r0
 80042a0:	b960      	cbnz	r0, 80042bc <mpu_set_int_latched+0x70>
    st.chip_cfg.latched_int = enable;
 80042a2:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <mpu_set_int_latched+0x78>)
 80042a4:	f882 4023 	strb.w	r4, [r2, #35]	; 0x23
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	b002      	add	sp, #8
 80042ac:	bd10      	pop	{r4, pc}
        tmp = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	f88d 3007 	strb.w	r3, [sp, #7]
 80042b4:	e7d5      	b.n	8004262 <mpu_set_int_latched+0x16>
        return 0;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	4770      	bx	lr
        return -1;
 80042bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042c0:	e7f2      	b.n	80042a8 <mpu_set_int_latched+0x5c>
 80042c2:	bf00      	nop
 80042c4:	20000028 	.word	0x20000028

080042c8 <mpu_lp_accel_mode>:
{
 80042c8:	b510      	push	{r4, lr}
 80042ca:	b082      	sub	sp, #8
    if (rate > 40)
 80042cc:	2828      	cmp	r0, #40	; 0x28
 80042ce:	d861      	bhi.n	8004394 <mpu_lp_accel_mode+0xcc>
 80042d0:	4604      	mov	r4, r0
    if (!rate) {
 80042d2:	b9d0      	cbnz	r0, 800430a <mpu_lp_accel_mode+0x42>
        mpu_set_int_latched(0);
 80042d4:	2000      	movs	r0, #0
 80042d6:	f7ff ffb9 	bl	800424c <mpu_set_int_latched>
        tmp[0] = 0;
 80042da:	2300      	movs	r3, #0
 80042dc:	f88d 3004 	strb.w	r3, [sp, #4]
        tmp[1] = BIT_STBY_XYZG;
 80042e0:	2307      	movs	r3, #7
 80042e2:	f88d 3005 	strb.w	r3, [sp, #5]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80042e6:	4b31      	ldr	r3, [pc, #196]	; (80043ac <mpu_lp_accel_mode+0xe4>)
 80042e8:	6858      	ldr	r0, [r3, #4]
 80042ea:	6819      	ldr	r1, [r3, #0]
 80042ec:	ab01      	add	r3, sp, #4
 80042ee:	2202      	movs	r2, #2
 80042f0:	7d49      	ldrb	r1, [r1, #21]
 80042f2:	7800      	ldrb	r0, [r0, #0]
 80042f4:	f7ff fa0e 	bl	8003714 <arduino_i2c_write>
 80042f8:	4604      	mov	r4, r0
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d14d      	bne.n	800439a <mpu_lp_accel_mode+0xd2>
        st.chip_cfg.lp_accel_mode = 0;
 80042fe:	4b2b      	ldr	r3, [pc, #172]	; (80043ac <mpu_lp_accel_mode+0xe4>)
 8004300:	2200      	movs	r2, #0
 8004302:	751a      	strb	r2, [r3, #20]
}
 8004304:	4620      	mov	r0, r4
 8004306:	b002      	add	sp, #8
 8004308:	bd10      	pop	{r4, pc}
    mpu_set_int_latched(1);
 800430a:	2001      	movs	r0, #1
 800430c:	f7ff ff9e 	bl	800424c <mpu_set_int_latched>
    if (rate == 1)
 8004310:	2c01      	cmp	r4, #1
 8004312:	d007      	beq.n	8004324 <mpu_lp_accel_mode+0x5c>
    else if (rate == 2)
 8004314:	2c02      	cmp	r4, #2
 8004316:	d029      	beq.n	800436c <mpu_lp_accel_mode+0xa4>
    else if (rate <= 5)
 8004318:	2c05      	cmp	r4, #5
 800431a:	d82b      	bhi.n	8004374 <mpu_lp_accel_mode+0xac>
        tmp[0] = INV_LPA_5HZ;
 800431c:	2304      	movs	r3, #4
 800431e:	f88d 3004 	strb.w	r3, [sp, #4]
 8004322:	e002      	b.n	800432a <mpu_lp_accel_mode+0x62>
        tmp[0] = INV_LPA_1_25HZ;
 8004324:	2302      	movs	r3, #2
 8004326:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 800432a:	4b20      	ldr	r3, [pc, #128]	; (80043ac <mpu_lp_accel_mode+0xe4>)
 800432c:	6858      	ldr	r0, [r3, #4]
 800432e:	6819      	ldr	r1, [r3, #0]
 8004330:	ab01      	add	r3, sp, #4
 8004332:	2201      	movs	r2, #1
 8004334:	7a49      	ldrb	r1, [r1, #9]
 8004336:	7800      	ldrb	r0, [r0, #0]
 8004338:	f7ff f9ec 	bl	8003714 <arduino_i2c_write>
 800433c:	bb80      	cbnz	r0, 80043a0 <mpu_lp_accel_mode+0xd8>
    tmp[0] = BIT_LPA_CYCLE;
 800433e:	ab02      	add	r3, sp, #8
 8004340:	2220      	movs	r2, #32
 8004342:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 8004346:	4a19      	ldr	r2, [pc, #100]	; (80043ac <mpu_lp_accel_mode+0xe4>)
 8004348:	6850      	ldr	r0, [r2, #4]
 800434a:	6811      	ldr	r1, [r2, #0]
 800434c:	2201      	movs	r2, #1
 800434e:	7d49      	ldrb	r1, [r1, #21]
 8004350:	7800      	ldrb	r0, [r0, #0]
 8004352:	f7ff f9df 	bl	8003714 <arduino_i2c_write>
 8004356:	4604      	mov	r4, r0
 8004358:	bb28      	cbnz	r0, 80043a6 <mpu_lp_accel_mode+0xde>
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 800435a:	4b14      	ldr	r3, [pc, #80]	; (80043ac <mpu_lp_accel_mode+0xe4>)
 800435c:	2208      	movs	r2, #8
 800435e:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 8004360:	7318      	strb	r0, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 8004362:	2201      	movs	r2, #1
 8004364:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 8004366:	f7ff fd05 	bl	8003d74 <mpu_configure_fifo>
    return 0;
 800436a:	e7cb      	b.n	8004304 <mpu_lp_accel_mode+0x3c>
        tmp[0] = INV_LPA_2_5HZ;
 800436c:	2303      	movs	r3, #3
 800436e:	f88d 3004 	strb.w	r3, [sp, #4]
 8004372:	e7da      	b.n	800432a <mpu_lp_accel_mode+0x62>
    else if (rate <= 10)
 8004374:	2c0a      	cmp	r4, #10
 8004376:	d803      	bhi.n	8004380 <mpu_lp_accel_mode+0xb8>
        tmp[0] = INV_LPA_10HZ;
 8004378:	2305      	movs	r3, #5
 800437a:	f88d 3004 	strb.w	r3, [sp, #4]
 800437e:	e7d4      	b.n	800432a <mpu_lp_accel_mode+0x62>
    else if (rate <= 20)
 8004380:	2c14      	cmp	r4, #20
 8004382:	d803      	bhi.n	800438c <mpu_lp_accel_mode+0xc4>
        tmp[0] = INV_LPA_20HZ;
 8004384:	2306      	movs	r3, #6
 8004386:	f88d 3004 	strb.w	r3, [sp, #4]
 800438a:	e7ce      	b.n	800432a <mpu_lp_accel_mode+0x62>
        tmp[0] = INV_LPA_40HZ;
 800438c:	2307      	movs	r3, #7
 800438e:	f88d 3004 	strb.w	r3, [sp, #4]
 8004392:	e7ca      	b.n	800432a <mpu_lp_accel_mode+0x62>
        return -1;
 8004394:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004398:	e7b4      	b.n	8004304 <mpu_lp_accel_mode+0x3c>
            return -1;
 800439a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800439e:	e7b1      	b.n	8004304 <mpu_lp_accel_mode+0x3c>
        return -1;
 80043a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80043a4:	e7ae      	b.n	8004304 <mpu_lp_accel_mode+0x3c>
        return -1;
 80043a6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80043aa:	e7ab      	b.n	8004304 <mpu_lp_accel_mode+0x3c>
 80043ac:	20000028 	.word	0x20000028

080043b0 <mpu_set_sample_rate>:
{
 80043b0:	b530      	push	{r4, r5, lr}
 80043b2:	b083      	sub	sp, #12
    if (!(st.chip_cfg.sensors))
 80043b4:	4b28      	ldr	r3, [pc, #160]	; (8004458 <mpu_set_sample_rate+0xa8>)
 80043b6:	7a9b      	ldrb	r3, [r3, #10]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d044      	beq.n	8004446 <mpu_set_sample_rate+0x96>
 80043bc:	4604      	mov	r4, r0
    if (st.chip_cfg.dmp_on)
 80043be:	4b26      	ldr	r3, [pc, #152]	; (8004458 <mpu_set_sample_rate+0xa8>)
 80043c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d141      	bne.n	800444c <mpu_set_sample_rate+0x9c>
        if (st.chip_cfg.lp_accel_mode) {
 80043c8:	4b23      	ldr	r3, [pc, #140]	; (8004458 <mpu_set_sample_rate+0xa8>)
 80043ca:	7d1b      	ldrb	r3, [r3, #20]
 80043cc:	b133      	cbz	r3, 80043dc <mpu_set_sample_rate+0x2c>
            if (rate && (rate <= 40)) {
 80043ce:	1e43      	subs	r3, r0, #1
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b27      	cmp	r3, #39	; 0x27
 80043d4:	d90a      	bls.n	80043ec <mpu_set_sample_rate+0x3c>
            mpu_lp_accel_mode(0);
 80043d6:	2000      	movs	r0, #0
 80043d8:	f7ff ff76 	bl	80042c8 <mpu_lp_accel_mode>
        if (rate < 4)
 80043dc:	2c03      	cmp	r4, #3
 80043de:	d909      	bls.n	80043f4 <mpu_set_sample_rate+0x44>
        else if (rate > 1000)
 80043e0:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80043e4:	d907      	bls.n	80043f6 <mpu_set_sample_rate+0x46>
            rate = 1000;
 80043e6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80043ea:	e004      	b.n	80043f6 <mpu_set_sample_rate+0x46>
                mpu_lp_accel_mode(rate);
 80043ec:	f7ff ff6c 	bl	80042c8 <mpu_lp_accel_mode>
                return 0;
 80043f0:	2500      	movs	r5, #0
 80043f2:	e025      	b.n	8004440 <mpu_set_sample_rate+0x90>
            rate = 4;
 80043f4:	2404      	movs	r4, #4
        data = 1000 / rate - 1;
 80043f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043fa:	fb90 f0f4 	sdiv	r0, r0, r4
 80043fe:	3801      	subs	r0, #1
 8004400:	ab02      	add	r3, sp, #8
 8004402:	f803 0d01 	strb.w	r0, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 8004406:	4a14      	ldr	r2, [pc, #80]	; (8004458 <mpu_set_sample_rate+0xa8>)
 8004408:	6850      	ldr	r0, [r2, #4]
 800440a:	6811      	ldr	r1, [r2, #0]
 800440c:	2201      	movs	r2, #1
 800440e:	7849      	ldrb	r1, [r1, #1]
 8004410:	7800      	ldrb	r0, [r0, #0]
 8004412:	f7ff f97f 	bl	8003714 <arduino_i2c_write>
 8004416:	4605      	mov	r5, r0
 8004418:	b9d8      	cbnz	r0, 8004452 <mpu_set_sample_rate+0xa2>
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 800441a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004424:	fb93 f3f2 	sdiv	r3, r3, r2
 8004428:	4c0b      	ldr	r4, [pc, #44]	; (8004458 <mpu_set_sample_rate+0xa8>)
 800442a:	81e3      	strh	r3, [r4, #14]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 800442c:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800442e:	2864      	cmp	r0, #100	; 0x64
 8004430:	bf28      	it	cs
 8004432:	2064      	movcs	r0, #100	; 0x64
 8004434:	f7ff fc1e 	bl	8003c74 <mpu_set_compass_sample_rate>
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8004438:	89e0      	ldrh	r0, [r4, #14]
 800443a:	0840      	lsrs	r0, r0, #1
 800443c:	f7ff fbce 	bl	8003bdc <mpu_set_lpf>
}
 8004440:	4628      	mov	r0, r5
 8004442:	b003      	add	sp, #12
 8004444:	bd30      	pop	{r4, r5, pc}
        return -1;
 8004446:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800444a:	e7f9      	b.n	8004440 <mpu_set_sample_rate+0x90>
        return -1;
 800444c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004450:	e7f6      	b.n	8004440 <mpu_set_sample_rate+0x90>
            return -1;
 8004452:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004456:	e7f3      	b.n	8004440 <mpu_set_sample_rate+0x90>
 8004458:	20000028 	.word	0x20000028

0800445c <mpu_set_sensors>:
{
 800445c:	b530      	push	{r4, r5, lr}
 800445e:	b083      	sub	sp, #12
 8004460:	4604      	mov	r4, r0
    if (sensors & INV_XYZ_GYRO)
 8004462:	f010 0f70 	tst.w	r0, #112	; 0x70
 8004466:	f000 808f 	beq.w	8004588 <mpu_set_sensors+0x12c>
        data = INV_CLK_PLL;
 800446a:	2301      	movs	r3, #1
 800446c:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8004470:	4b5f      	ldr	r3, [pc, #380]	; (80045f0 <mpu_set_sensors+0x194>)
 8004472:	6858      	ldr	r0, [r3, #4]
 8004474:	6819      	ldr	r1, [r3, #0]
 8004476:	f10d 0307 	add.w	r3, sp, #7
 800447a:	2201      	movs	r2, #1
 800447c:	7d49      	ldrb	r1, [r1, #21]
 800447e:	7800      	ldrb	r0, [r0, #0]
 8004480:	f7ff f948 	bl	8003714 <arduino_i2c_write>
 8004484:	2800      	cmp	r0, #0
 8004486:	f040 8088 	bne.w	800459a <mpu_set_sensors+0x13e>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800448a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800448e:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 8004492:	4a57      	ldr	r2, [pc, #348]	; (80045f0 <mpu_set_sensors+0x194>)
 8004494:	7313      	strb	r3, [r2, #12]
    data = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!(sensors & INV_X_GYRO))
 800449c:	f014 0f40 	tst.w	r4, #64	; 0x40
 80044a0:	d102      	bne.n	80044a8 <mpu_set_sensors+0x4c>
        data |= BIT_STBY_XG;
 80044a2:	2304      	movs	r3, #4
 80044a4:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!(sensors & INV_Y_GYRO))
 80044a8:	f014 0f20 	tst.w	r4, #32
 80044ac:	d105      	bne.n	80044ba <mpu_set_sensors+0x5e>
        data |= BIT_STBY_YG;
 80044ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80044b2:	f043 0302 	orr.w	r3, r3, #2
 80044b6:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!(sensors & INV_Z_GYRO))
 80044ba:	f014 0f10 	tst.w	r4, #16
 80044be:	d105      	bne.n	80044cc <mpu_set_sensors+0x70>
        data |= BIT_STBY_ZG;
 80044c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!(sensors & INV_XYZ_ACCEL))
 80044cc:	f014 0f08 	tst.w	r4, #8
 80044d0:	d105      	bne.n	80044de <mpu_set_sensors+0x82>
        data |= BIT_STBY_XYZA;
 80044d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80044d6:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80044da:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80044de:	4b44      	ldr	r3, [pc, #272]	; (80045f0 <mpu_set_sensors+0x194>)
 80044e0:	6858      	ldr	r0, [r3, #4]
 80044e2:	6819      	ldr	r1, [r3, #0]
 80044e4:	f10d 0307 	add.w	r3, sp, #7
 80044e8:	2201      	movs	r2, #1
 80044ea:	7d89      	ldrb	r1, [r1, #22]
 80044ec:	7800      	ldrb	r0, [r0, #0]
 80044ee:	f7ff f911 	bl	8003714 <arduino_i2c_write>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d157      	bne.n	80045a6 <mpu_set_sensors+0x14a>
    if (sensors && (sensors != INV_XYZ_ACCEL))
 80044f6:	b10c      	cbz	r4, 80044fc <mpu_set_sensors+0xa0>
 80044f8:	2c08      	cmp	r4, #8
 80044fa:	d15a      	bne.n	80045b2 <mpu_set_sensors+0x156>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 80044fc:	4b3c      	ldr	r3, [pc, #240]	; (80045f0 <mpu_set_sensors+0x194>)
 80044fe:	6858      	ldr	r0, [r3, #4]
 8004500:	6819      	ldr	r1, [r3, #0]
 8004502:	f10d 0306 	add.w	r3, sp, #6
 8004506:	2201      	movs	r2, #1
 8004508:	7909      	ldrb	r1, [r1, #4]
 800450a:	7800      	ldrb	r0, [r0, #0]
 800450c:	f7ff f920 	bl	8003750 <arduino_i2c_read>
 8004510:	2800      	cmp	r0, #0
 8004512:	d163      	bne.n	80045dc <mpu_set_sensors+0x180>
    if (sensors & INV_XYZ_COMPASS) {
 8004514:	f014 0f01 	tst.w	r4, #1
 8004518:	d04f      	beq.n	80045ba <mpu_set_sensors+0x15e>
        data = AKM_SINGLE_MEASUREMENT;
 800451a:	2311      	movs	r3, #17
 800451c:	f88d 3007 	strb.w	r3, [sp, #7]
        user_ctrl |= BIT_AUX_IF_EN;
 8004520:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004524:	f043 0320 	orr.w	r3, r3, #32
 8004528:	f88d 3006 	strb.w	r3, [sp, #6]
    if (st.chip_cfg.dmp_on)
 800452c:	4b30      	ldr	r3, [pc, #192]	; (80045f0 <mpu_set_sensors+0x194>)
 800452e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004532:	2b00      	cmp	r3, #0
 8004534:	d04b      	beq.n	80045ce <mpu_set_sensors+0x172>
        user_ctrl |= BIT_DMP_EN;
 8004536:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800453a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800453e:	f88d 3006 	strb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 8004542:	4b2b      	ldr	r3, [pc, #172]	; (80045f0 <mpu_set_sensors+0x194>)
 8004544:	6858      	ldr	r0, [r3, #4]
 8004546:	6819      	ldr	r1, [r3, #0]
 8004548:	f10d 0307 	add.w	r3, sp, #7
 800454c:	2201      	movs	r2, #1
 800454e:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 8004552:	7800      	ldrb	r0, [r0, #0]
 8004554:	f7ff f8de 	bl	8003714 <arduino_i2c_write>
 8004558:	2800      	cmp	r0, #0
 800455a:	d142      	bne.n	80045e2 <mpu_set_sensors+0x186>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 800455c:	4b24      	ldr	r3, [pc, #144]	; (80045f0 <mpu_set_sensors+0x194>)
 800455e:	6858      	ldr	r0, [r3, #4]
 8004560:	6819      	ldr	r1, [r3, #0]
 8004562:	f10d 0306 	add.w	r3, sp, #6
 8004566:	2201      	movs	r2, #1
 8004568:	7909      	ldrb	r1, [r1, #4]
 800456a:	7800      	ldrb	r0, [r0, #0]
 800456c:	f7ff f8d2 	bl	8003714 <arduino_i2c_write>
 8004570:	4605      	mov	r5, r0
 8004572:	bbc8      	cbnz	r0, 80045e8 <mpu_set_sensors+0x18c>
    st.chip_cfg.sensors = sensors;
 8004574:	4b1e      	ldr	r3, [pc, #120]	; (80045f0 <mpu_set_sensors+0x194>)
 8004576:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8004578:	2200      	movs	r2, #0
 800457a:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 800457c:	2032      	movs	r0, #50	; 0x32
 800457e:	f7ff f8c3 	bl	8003708 <arduino_delay_ms>
}
 8004582:	4628      	mov	r0, r5
 8004584:	b003      	add	sp, #12
 8004586:	bd30      	pop	{r4, r5, pc}
    else if (sensors)
 8004588:	b118      	cbz	r0, 8004592 <mpu_set_sensors+0x136>
        data = 0;
 800458a:	2300      	movs	r3, #0
 800458c:	f88d 3007 	strb.w	r3, [sp, #7]
 8004590:	e76e      	b.n	8004470 <mpu_set_sensors+0x14>
        data = BIT_SLEEP;
 8004592:	2340      	movs	r3, #64	; 0x40
 8004594:	f88d 3007 	strb.w	r3, [sp, #7]
 8004598:	e76a      	b.n	8004470 <mpu_set_sensors+0x14>
        st.chip_cfg.sensors = 0;
 800459a:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <mpu_set_sensors+0x194>)
 800459c:	2200      	movs	r2, #0
 800459e:	729a      	strb	r2, [r3, #10]
        return -1;
 80045a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80045a4:	e7ed      	b.n	8004582 <mpu_set_sensors+0x126>
        st.chip_cfg.sensors = 0;
 80045a6:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <mpu_set_sensors+0x194>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	729a      	strb	r2, [r3, #10]
        return -1;
 80045ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80045b0:	e7e7      	b.n	8004582 <mpu_set_sensors+0x126>
        mpu_set_int_latched(0);
 80045b2:	2000      	movs	r0, #0
 80045b4:	f7ff fe4a 	bl	800424c <mpu_set_int_latched>
 80045b8:	e7a0      	b.n	80044fc <mpu_set_sensors+0xa0>
        data = AKM_POWER_DOWN;
 80045ba:	2310      	movs	r3, #16
 80045bc:	f88d 3007 	strb.w	r3, [sp, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
 80045c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80045c4:	f023 0320 	bic.w	r3, r3, #32
 80045c8:	f88d 3006 	strb.w	r3, [sp, #6]
 80045cc:	e7ae      	b.n	800452c <mpu_set_sensors+0xd0>
        user_ctrl &= ~BIT_DMP_EN;
 80045ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80045d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045d6:	f88d 3006 	strb.w	r3, [sp, #6]
 80045da:	e7b2      	b.n	8004542 <mpu_set_sensors+0xe6>
        return -1;
 80045dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80045e0:	e7cf      	b.n	8004582 <mpu_set_sensors+0x126>
        return -1;
 80045e2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80045e6:	e7cc      	b.n	8004582 <mpu_set_sensors+0x126>
        return -1;
 80045e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80045ec:	e7c9      	b.n	8004582 <mpu_set_sensors+0x126>
 80045ee:	bf00      	nop
 80045f0:	20000028 	.word	0x20000028

080045f4 <mpu_init>:
{
 80045f4:	b510      	push	{r4, lr}
 80045f6:	b082      	sub	sp, #8
    data[0] = BIT_RESET;
 80045f8:	ab02      	add	r3, sp, #8
 80045fa:	2280      	movs	r2, #128	; 0x80
 80045fc:	f803 2d08 	strb.w	r2, [r3, #-8]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8004600:	4a42      	ldr	r2, [pc, #264]	; (800470c <mpu_init+0x118>)
 8004602:	6850      	ldr	r0, [r2, #4]
 8004604:	6811      	ldr	r1, [r2, #0]
 8004606:	2201      	movs	r2, #1
 8004608:	7d49      	ldrb	r1, [r1, #21]
 800460a:	7800      	ldrb	r0, [r0, #0]
 800460c:	f7ff f882 	bl	8003714 <arduino_i2c_write>
 8004610:	2800      	cmp	r0, #0
 8004612:	d160      	bne.n	80046d6 <mpu_init+0xe2>
    delay_ms(100);
 8004614:	2064      	movs	r0, #100	; 0x64
 8004616:	f7ff f877 	bl	8003708 <arduino_delay_ms>
    data[0] = 0x00;
 800461a:	ab02      	add	r3, sp, #8
 800461c:	2200      	movs	r2, #0
 800461e:	f803 2d08 	strb.w	r2, [r3, #-8]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8004622:	4a3a      	ldr	r2, [pc, #232]	; (800470c <mpu_init+0x118>)
 8004624:	6850      	ldr	r0, [r2, #4]
 8004626:	6811      	ldr	r1, [r2, #0]
 8004628:	2201      	movs	r2, #1
 800462a:	7d49      	ldrb	r1, [r1, #21]
 800462c:	7800      	ldrb	r0, [r0, #0]
 800462e:	f7ff f871 	bl	8003714 <arduino_i2c_write>
 8004632:	2800      	cmp	r0, #0
 8004634:	d152      	bne.n	80046dc <mpu_init+0xe8>
   st.chip_cfg.accel_half = 0;
 8004636:	4a35      	ldr	r2, [pc, #212]	; (800470c <mpu_init+0x118>)
 8004638:	2300      	movs	r3, #0
 800463a:	74d3      	strb	r3, [r2, #19]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 800463c:	ab02      	add	r3, sp, #8
 800463e:	2148      	movs	r1, #72	; 0x48
 8004640:	f803 1d08 	strb.w	r1, [r3, #-8]!
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8004644:	6850      	ldr	r0, [r2, #4]
 8004646:	6811      	ldr	r1, [r2, #0]
 8004648:	2201      	movs	r2, #1
 800464a:	7a09      	ldrb	r1, [r1, #8]
 800464c:	7800      	ldrb	r0, [r0, #0]
 800464e:	f7ff f861 	bl	8003714 <arduino_i2c_write>
 8004652:	2800      	cmp	r0, #0
 8004654:	d145      	bne.n	80046e2 <mpu_init+0xee>
    st.chip_cfg.sensors = 0xFF;
 8004656:	4b2d      	ldr	r3, [pc, #180]	; (800470c <mpu_init+0x118>)
 8004658:	22ff      	movs	r2, #255	; 0xff
 800465a:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 800465c:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800465e:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8004660:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8004662:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004666:	81d9      	strh	r1, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8004668:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 800466a:	749a      	strb	r2, [r3, #18]
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 800466c:	8519      	strh	r1, [r3, #40]	; 0x28
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800466e:	2201      	movs	r2, #1
 8004670:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.active_low_int = 1;
 8004672:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 800467c:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 800467e:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8004680:	f8c3 2016 	str.w	r2, [r3, #22]
 8004684:	f8c3 201a 	str.w	r2, [r3, #26]
 8004688:	f8c3 201e 	str.w	r2, [r3, #30]
    st.chip_cfg.dmp_on = 0;
 800468c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 8004690:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8004694:	84da      	strh	r2, [r3, #38]	; 0x26
    if (mpu_set_gyro_fsr(2000))
 8004696:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800469a:	f7ff f9e5 	bl	8003a68 <mpu_set_gyro_fsr>
 800469e:	bb18      	cbnz	r0, 80046e8 <mpu_init+0xf4>
    if (mpu_set_accel_fsr(2))
 80046a0:	2002      	movs	r0, #2
 80046a2:	f7ff fa4f 	bl	8003b44 <mpu_set_accel_fsr>
 80046a6:	bb10      	cbnz	r0, 80046ee <mpu_init+0xfa>
    if (mpu_set_lpf(42))
 80046a8:	202a      	movs	r0, #42	; 0x2a
 80046aa:	f7ff fa97 	bl	8003bdc <mpu_set_lpf>
 80046ae:	bb08      	cbnz	r0, 80046f4 <mpu_init+0x100>
    if (mpu_set_sample_rate(50))
 80046b0:	2032      	movs	r0, #50	; 0x32
 80046b2:	f7ff fe7d 	bl	80043b0 <mpu_set_sample_rate>
 80046b6:	bb00      	cbnz	r0, 80046fa <mpu_init+0x106>
    if (mpu_configure_fifo(0))
 80046b8:	f7ff fb5c 	bl	8003d74 <mpu_configure_fifo>
 80046bc:	bb00      	cbnz	r0, 8004700 <mpu_init+0x10c>
    setup_compass();
 80046be:	f7ff fc9f 	bl	8004000 <setup_compass>
    if (mpu_set_compass_sample_rate(10))
 80046c2:	200a      	movs	r0, #10
 80046c4:	f7ff fad6 	bl	8003c74 <mpu_set_compass_sample_rate>
 80046c8:	4604      	mov	r4, r0
 80046ca:	b9e0      	cbnz	r0, 8004706 <mpu_init+0x112>
    mpu_set_sensors(0);
 80046cc:	f7ff fec6 	bl	800445c <mpu_set_sensors>
}
 80046d0:	4620      	mov	r0, r4
 80046d2:	b002      	add	sp, #8
 80046d4:	bd10      	pop	{r4, pc}
        return -1;
 80046d6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80046da:	e7f9      	b.n	80046d0 <mpu_init+0xdc>
        return -1;
 80046dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80046e0:	e7f6      	b.n	80046d0 <mpu_init+0xdc>
        return -1;
 80046e2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80046e6:	e7f3      	b.n	80046d0 <mpu_init+0xdc>
        return -1;
 80046e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80046ec:	e7f0      	b.n	80046d0 <mpu_init+0xdc>
        return -1;
 80046ee:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80046f2:	e7ed      	b.n	80046d0 <mpu_init+0xdc>
        return -1;
 80046f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80046f8:	e7ea      	b.n	80046d0 <mpu_init+0xdc>
        return -1;
 80046fa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80046fe:	e7e7      	b.n	80046d0 <mpu_init+0xdc>
        return -1;
 8004700:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004704:	e7e4      	b.n	80046d0 <mpu_init+0xdc>
        return -1;
 8004706:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800470a:	e7e1      	b.n	80046d0 <mpu_init+0xdc>
 800470c:	20000028 	.word	0x20000028

08004710 <mpu_write_mem>:
    if (!data)
 8004710:	b362      	cbz	r2, 800476c <mpu_write_mem+0x5c>
{
 8004712:	b570      	push	{r4, r5, r6, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	4616      	mov	r6, r2
    if (!st.chip_cfg.sensors)
 8004718:	4a1b      	ldr	r2, [pc, #108]	; (8004788 <mpu_write_mem+0x78>)
 800471a:	7a92      	ldrb	r2, [r2, #10]
 800471c:	b352      	cbz	r2, 8004774 <mpu_write_mem+0x64>
    tmp[0] = (unsigned char)(mem_addr >> 8);
 800471e:	0a02      	lsrs	r2, r0, #8
 8004720:	f88d 2004 	strb.w	r2, [sp, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8004724:	b2c0      	uxtb	r0, r0
 8004726:	f88d 0005 	strb.w	r0, [sp, #5]
    if (tmp[1] + length > st.hw->bank_size)
 800472a:	4408      	add	r0, r1
 800472c:	4a16      	ldr	r2, [pc, #88]	; (8004788 <mpu_write_mem+0x78>)
 800472e:	6855      	ldr	r5, [r2, #4]
 8004730:	896a      	ldrh	r2, [r5, #10]
 8004732:	4290      	cmp	r0, r2
 8004734:	dc21      	bgt.n	800477a <mpu_write_mem+0x6a>
 8004736:	460c      	mov	r4, r1
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8004738:	4b13      	ldr	r3, [pc, #76]	; (8004788 <mpu_write_mem+0x78>)
 800473a:	6819      	ldr	r1, [r3, #0]
 800473c:	ab01      	add	r3, sp, #4
 800473e:	2202      	movs	r2, #2
 8004740:	7ec9      	ldrb	r1, [r1, #27]
 8004742:	7828      	ldrb	r0, [r5, #0]
 8004744:	f7fe ffe6 	bl	8003714 <arduino_i2c_write>
 8004748:	b9d0      	cbnz	r0, 8004780 <mpu_write_mem+0x70>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 800474a:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <mpu_write_mem+0x78>)
 800474c:	6858      	ldr	r0, [r3, #4]
 800474e:	6819      	ldr	r1, [r3, #0]
 8004750:	4633      	mov	r3, r6
 8004752:	b2e2      	uxtb	r2, r4
 8004754:	7e09      	ldrb	r1, [r1, #24]
 8004756:	7800      	ldrb	r0, [r0, #0]
 8004758:	f7fe ffdc 	bl	8003714 <arduino_i2c_write>
 800475c:	4603      	mov	r3, r0
 800475e:	b910      	cbnz	r0, 8004766 <mpu_write_mem+0x56>
}
 8004760:	4618      	mov	r0, r3
 8004762:	b002      	add	sp, #8
 8004764:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 8004766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800476a:	e7f9      	b.n	8004760 <mpu_write_mem+0x50>
        return -1;
 800476c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004770:	4618      	mov	r0, r3
 8004772:	4770      	bx	lr
        return -1;
 8004774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004778:	e7f2      	b.n	8004760 <mpu_write_mem+0x50>
        return -1;
 800477a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800477e:	e7ef      	b.n	8004760 <mpu_write_mem+0x50>
        return -1;
 8004780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004784:	e7ec      	b.n	8004760 <mpu_write_mem+0x50>
 8004786:	bf00      	nop
 8004788:	20000028 	.word	0x20000028

0800478c <mpu_read_mem>:
    if (!data)
 800478c:	b362      	cbz	r2, 80047e8 <mpu_read_mem+0x5c>
{
 800478e:	b570      	push	{r4, r5, r6, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	4616      	mov	r6, r2
    if (!st.chip_cfg.sensors)
 8004794:	4a1b      	ldr	r2, [pc, #108]	; (8004804 <mpu_read_mem+0x78>)
 8004796:	7a92      	ldrb	r2, [r2, #10]
 8004798:	b352      	cbz	r2, 80047f0 <mpu_read_mem+0x64>
    tmp[0] = (unsigned char)(mem_addr >> 8);
 800479a:	0a02      	lsrs	r2, r0, #8
 800479c:	f88d 2004 	strb.w	r2, [sp, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 80047a0:	b2c0      	uxtb	r0, r0
 80047a2:	f88d 0005 	strb.w	r0, [sp, #5]
    if (tmp[1] + length > st.hw->bank_size)
 80047a6:	4408      	add	r0, r1
 80047a8:	4a16      	ldr	r2, [pc, #88]	; (8004804 <mpu_read_mem+0x78>)
 80047aa:	6855      	ldr	r5, [r2, #4]
 80047ac:	896a      	ldrh	r2, [r5, #10]
 80047ae:	4290      	cmp	r0, r2
 80047b0:	dc21      	bgt.n	80047f6 <mpu_read_mem+0x6a>
 80047b2:	460c      	mov	r4, r1
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 80047b4:	4b13      	ldr	r3, [pc, #76]	; (8004804 <mpu_read_mem+0x78>)
 80047b6:	6819      	ldr	r1, [r3, #0]
 80047b8:	ab01      	add	r3, sp, #4
 80047ba:	2202      	movs	r2, #2
 80047bc:	7ec9      	ldrb	r1, [r1, #27]
 80047be:	7828      	ldrb	r0, [r5, #0]
 80047c0:	f7fe ffa8 	bl	8003714 <arduino_i2c_write>
 80047c4:	b9d0      	cbnz	r0, 80047fc <mpu_read_mem+0x70>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 80047c6:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <mpu_read_mem+0x78>)
 80047c8:	6858      	ldr	r0, [r3, #4]
 80047ca:	6819      	ldr	r1, [r3, #0]
 80047cc:	4633      	mov	r3, r6
 80047ce:	b2e2      	uxtb	r2, r4
 80047d0:	7e09      	ldrb	r1, [r1, #24]
 80047d2:	7800      	ldrb	r0, [r0, #0]
 80047d4:	f7fe ffbc 	bl	8003750 <arduino_i2c_read>
 80047d8:	4603      	mov	r3, r0
 80047da:	b910      	cbnz	r0, 80047e2 <mpu_read_mem+0x56>
}
 80047dc:	4618      	mov	r0, r3
 80047de:	b002      	add	sp, #8
 80047e0:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 80047e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047e6:	e7f9      	b.n	80047dc <mpu_read_mem+0x50>
        return -1;
 80047e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	4770      	bx	lr
        return -1;
 80047f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047f4:	e7f2      	b.n	80047dc <mpu_read_mem+0x50>
        return -1;
 80047f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047fa:	e7ef      	b.n	80047dc <mpu_read_mem+0x50>
        return -1;
 80047fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004800:	e7ec      	b.n	80047dc <mpu_read_mem+0x50>
 8004802:	bf00      	nop
 8004804:	20000028 	.word	0x20000028

08004808 <mpu_load_firmware>:
{
 8004808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800480c:	b087      	sub	sp, #28
    if (st.chip_cfg.dmp_loaded)
 800480e:	4c2b      	ldr	r4, [pc, #172]	; (80048bc <mpu_load_firmware+0xb4>)
 8004810:	f894 4025 	ldrb.w	r4, [r4, #37]	; 0x25
 8004814:	2c00      	cmp	r4, #0
 8004816:	d13e      	bne.n	8004896 <mpu_load_firmware+0x8e>
    if (!firmware)
 8004818:	2900      	cmp	r1, #0
 800481a:	d03f      	beq.n	800489c <mpu_load_firmware+0x94>
 800481c:	469a      	mov	sl, r3
 800481e:	4691      	mov	r9, r2
 8004820:	4688      	mov	r8, r1
 8004822:	4607      	mov	r7, r0
    for (ii = 0; ii < length; ii += this_write) {
 8004824:	42bc      	cmp	r4, r7
 8004826:	d21b      	bcs.n	8004860 <mpu_load_firmware+0x58>
        this_write = min(LOAD_CHUNK, length - ii);
 8004828:	1b3e      	subs	r6, r7, r4
 800482a:	2e10      	cmp	r6, #16
 800482c:	bfa8      	it	ge
 800482e:	2610      	movge	r6, #16
 8004830:	b2b5      	uxth	r5, r6
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8004832:	eb08 0b04 	add.w	fp, r8, r4
 8004836:	465a      	mov	r2, fp
 8004838:	4629      	mov	r1, r5
 800483a:	4620      	mov	r0, r4
 800483c:	f7ff ff68 	bl	8004710 <mpu_write_mem>
 8004840:	bb78      	cbnz	r0, 80048a2 <mpu_load_firmware+0x9a>
        if (mpu_read_mem(ii, this_write, cur))
 8004842:	aa02      	add	r2, sp, #8
 8004844:	4629      	mov	r1, r5
 8004846:	4620      	mov	r0, r4
 8004848:	f7ff ffa0 	bl	800478c <mpu_read_mem>
 800484c:	bb60      	cbnz	r0, 80048a8 <mpu_load_firmware+0xa0>
        if (memcmp(firmware+ii, cur, this_write))
 800484e:	462a      	mov	r2, r5
 8004850:	a902      	add	r1, sp, #8
 8004852:	4658      	mov	r0, fp
 8004854:	f001 fae2 	bl	8005e1c <memcmp>
 8004858:	bb48      	cbnz	r0, 80048ae <mpu_load_firmware+0xa6>
    for (ii = 0; ii < length; ii += this_write) {
 800485a:	442c      	add	r4, r5
 800485c:	b2a4      	uxth	r4, r4
 800485e:	e7e1      	b.n	8004824 <mpu_load_firmware+0x1c>
    tmp[0] = start_addr >> 8;
 8004860:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8004864:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = start_addr & 0xFF;
 8004868:	f88d 9005 	strb.w	r9, [sp, #5]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 800486c:	4b13      	ldr	r3, [pc, #76]	; (80048bc <mpu_load_firmware+0xb4>)
 800486e:	6858      	ldr	r0, [r3, #4]
 8004870:	6819      	ldr	r1, [r3, #0]
 8004872:	ab01      	add	r3, sp, #4
 8004874:	2202      	movs	r2, #2
 8004876:	7f49      	ldrb	r1, [r1, #29]
 8004878:	7800      	ldrb	r0, [r0, #0]
 800487a:	f7fe ff4b 	bl	8003714 <arduino_i2c_write>
 800487e:	4603      	mov	r3, r0
 8004880:	b9c0      	cbnz	r0, 80048b4 <mpu_load_firmware+0xac>
    st.chip_cfg.dmp_loaded = 1;
 8004882:	4a0e      	ldr	r2, [pc, #56]	; (80048bc <mpu_load_firmware+0xb4>)
 8004884:	2101      	movs	r1, #1
 8004886:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 800488a:	f8a2 a026 	strh.w	sl, [r2, #38]	; 0x26
}
 800488e:	4618      	mov	r0, r3
 8004890:	b007      	add	sp, #28
 8004892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1;
 8004896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800489a:	e7f8      	b.n	800488e <mpu_load_firmware+0x86>
        return -1;
 800489c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048a0:	e7f5      	b.n	800488e <mpu_load_firmware+0x86>
            return -1;
 80048a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048a6:	e7f2      	b.n	800488e <mpu_load_firmware+0x86>
            return -1;
 80048a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048ac:	e7ef      	b.n	800488e <mpu_load_firmware+0x86>
            return -2;
 80048ae:	f06f 0301 	mvn.w	r3, #1
 80048b2:	e7ec      	b.n	800488e <mpu_load_firmware+0x86>
        return -1;
 80048b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048b8:	e7e9      	b.n	800488e <mpu_load_firmware+0x86>
 80048ba:	bf00      	nop
 80048bc:	20000028 	.word	0x20000028

080048c0 <mpu_set_dmp_state>:
    if (st.chip_cfg.dmp_on == enable)
 80048c0:	4b22      	ldr	r3, [pc, #136]	; (800494c <mpu_set_dmp_state+0x8c>)
 80048c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048c6:	4283      	cmp	r3, r0
 80048c8:	d03a      	beq.n	8004940 <mpu_set_dmp_state+0x80>
{
 80048ca:	b530      	push	{r4, r5, lr}
 80048cc:	b083      	sub	sp, #12
    if (enable) {
 80048ce:	b310      	cbz	r0, 8004916 <mpu_set_dmp_state+0x56>
        if (!st.chip_cfg.dmp_loaded)
 80048d0:	4b1e      	ldr	r3, [pc, #120]	; (800494c <mpu_set_dmp_state+0x8c>)
 80048d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d034      	beq.n	8004944 <mpu_set_dmp_state+0x84>
        set_int_enable(0);
 80048da:	2000      	movs	r0, #0
 80048dc:	f7fe ff58 	bl	8003790 <set_int_enable>
        mpu_set_bypass(0);
 80048e0:	2000      	movs	r0, #0
 80048e2:	f7ff fad9 	bl	8003e98 <mpu_set_bypass>
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 80048e6:	4d19      	ldr	r5, [pc, #100]	; (800494c <mpu_set_dmp_state+0x8c>)
 80048e8:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 80048ea:	f7ff fd61 	bl	80043b0 <mpu_set_sample_rate>
        tmp = 0;
 80048ee:	2400      	movs	r4, #0
 80048f0:	ab02      	add	r3, sp, #8
 80048f2:	f803 4d01 	strb.w	r4, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 80048f6:	6868      	ldr	r0, [r5, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	2123      	movs	r1, #35	; 0x23
 80048fc:	7800      	ldrb	r0, [r0, #0]
 80048fe:	f7fe ff09 	bl	8003714 <arduino_i2c_write>
        st.chip_cfg.dmp_on = 1;
 8004902:	2001      	movs	r0, #1
 8004904:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        set_int_enable(1);
 8004908:	f7fe ff42 	bl	8003790 <set_int_enable>
        mpu_reset_fifo();
 800490c:	f7fe ffb0 	bl	8003870 <mpu_reset_fifo>
    return 0;
 8004910:	4620      	mov	r0, r4
}
 8004912:	b003      	add	sp, #12
 8004914:	bd30      	pop	{r4, r5, pc}
        set_int_enable(0);
 8004916:	2000      	movs	r0, #0
 8004918:	f7fe ff3a 	bl	8003790 <set_int_enable>
        tmp = st.chip_cfg.fifo_enable;
 800491c:	4d0b      	ldr	r5, [pc, #44]	; (800494c <mpu_set_dmp_state+0x8c>)
 800491e:	7c2a      	ldrb	r2, [r5, #16]
 8004920:	ab02      	add	r3, sp, #8
 8004922:	f803 2d01 	strb.w	r2, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8004926:	6868      	ldr	r0, [r5, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	2123      	movs	r1, #35	; 0x23
 800492c:	7800      	ldrb	r0, [r0, #0]
 800492e:	f7fe fef1 	bl	8003714 <arduino_i2c_write>
        st.chip_cfg.dmp_on = 0;
 8004932:	2400      	movs	r4, #0
 8004934:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
        mpu_reset_fifo();
 8004938:	f7fe ff9a 	bl	8003870 <mpu_reset_fifo>
    return 0;
 800493c:	4620      	mov	r0, r4
 800493e:	e7e8      	b.n	8004912 <mpu_set_dmp_state+0x52>
        return 0;
 8004940:	2000      	movs	r0, #0
}
 8004942:	4770      	bx	lr
            return -1;
 8004944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004948:	e7e3      	b.n	8004912 <mpu_set_dmp_state+0x52>
 800494a:	bf00      	nop
 800494c:	20000028 	.word	0x20000028

08004950 <mpu_get_compass_reg>:
 *  @param[out] data        Raw data in hardware units.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_compass_reg(short *data, unsigned long *timestamp)
{
 8004950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004952:	b085      	sub	sp, #20
#ifdef AK89xx_SECONDARY
    unsigned char tmp[9];

    if (!(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8004954:	4b2d      	ldr	r3, [pc, #180]	; (8004a0c <mpu_get_compass_reg+0xbc>)
 8004956:	7a9b      	ldrb	r3, [r3, #10]
 8004958:	f013 0f01 	tst.w	r3, #1
 800495c:	d04a      	beq.n	80049f4 <mpu_get_compass_reg+0xa4>
 800495e:	460d      	mov	r5, r1
 8004960:	4604      	mov	r4, r0
        return -1;
    tmp[8] = AKM_SINGLE_MEASUREMENT;
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, tmp+8))
        return -1;
#else
    if (i2c_read(st.hw->addr, st.reg->raw_compass, 8, tmp))
 8004962:	4b2a      	ldr	r3, [pc, #168]	; (8004a0c <mpu_get_compass_reg+0xbc>)
 8004964:	6858      	ldr	r0, [r3, #4]
 8004966:	6819      	ldr	r1, [r3, #0]
 8004968:	ab01      	add	r3, sp, #4
 800496a:	2208      	movs	r2, #8
 800496c:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8004970:	7800      	ldrb	r0, [r0, #0]
 8004972:	f7fe feed 	bl	8003750 <arduino_i2c_read>
 8004976:	4606      	mov	r6, r0
 8004978:	2800      	cmp	r0, #0
 800497a:	d13e      	bne.n	80049fa <mpu_get_compass_reg+0xaa>
        return -2;
    if ((tmp[7] & AKM_OVERFLOW) || (tmp[7] & AKM_DATA_ERROR))
        return -3;
#elif defined AK8963_SECONDARY
    /* AK8963 doesn't have the data read error bit. */
    if (!(tmp[0] & AKM_DATA_READY) || (tmp[0] & AKM_DATA_OVERRUN))
 800497c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004980:	f003 0303 	and.w	r3, r3, #3
 8004984:	2b01      	cmp	r3, #1
 8004986:	d13b      	bne.n	8004a00 <mpu_get_compass_reg+0xb0>
        return -2;
    if (tmp[7] & AKM_OVERFLOW)
 8004988:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 800498c:	2b00      	cmp	r3, #0
 800498e:	db3a      	blt.n	8004a06 <mpu_get_compass_reg+0xb6>
        return -3;
#endif
    data[0] = (tmp[2] << 8) | tmp[1];
 8004990:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004994:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8004998:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 800499c:	b209      	sxth	r1, r1
 800499e:	8021      	strh	r1, [r4, #0]
    data[1] = (tmp[4] << 8) | tmp[3];
 80049a0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80049a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80049a8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80049ac:	b212      	sxth	r2, r2
 80049ae:	8062      	strh	r2, [r4, #2]
    data[2] = (tmp[6] << 8) | tmp[5];
 80049b0:	f89d 000a 	ldrb.w	r0, [sp, #10]
 80049b4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80049b8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80049bc:	b21b      	sxth	r3, r3
 80049be:	80a3      	strh	r3, [r4, #4]

    data[0] = ((long)data[0] * st.chip_cfg.mag_sens_adj[0]) >> 8;
 80049c0:	4f12      	ldr	r7, [pc, #72]	; (8004a0c <mpu_get_compass_reg+0xbc>)
 80049c2:	f9b7 002c 	ldrsh.w	r0, [r7, #44]	; 0x2c
 80049c6:	fb00 f101 	mul.w	r1, r0, r1
 80049ca:	1209      	asrs	r1, r1, #8
 80049cc:	8021      	strh	r1, [r4, #0]
    data[1] = ((long)data[1] * st.chip_cfg.mag_sens_adj[1]) >> 8;
 80049ce:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 80049d2:	fb01 f202 	mul.w	r2, r1, r2
 80049d6:	1212      	asrs	r2, r2, #8
 80049d8:	8062      	strh	r2, [r4, #2]
    data[2] = ((long)data[2] * st.chip_cfg.mag_sens_adj[2]) >> 8;
 80049da:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80049de:	fb02 f303 	mul.w	r3, r2, r3
 80049e2:	121b      	asrs	r3, r3, #8
 80049e4:	80a3      	strh	r3, [r4, #4]

    if (timestamp)
 80049e6:	b115      	cbz	r5, 80049ee <mpu_get_compass_reg+0x9e>
        get_ms(timestamp);
 80049e8:	4628      	mov	r0, r5
 80049ea:	f7fe fe86 	bl	80036fa <arduino_get_clock_ms>
    return 0;
#else
    return -1;
#endif
}
 80049ee:	4630      	mov	r0, r6
 80049f0:	b005      	add	sp, #20
 80049f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
 80049f4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80049f8:	e7f9      	b.n	80049ee <mpu_get_compass_reg+0x9e>
        return -1;
 80049fa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80049fe:	e7f6      	b.n	80049ee <mpu_get_compass_reg+0x9e>
        return -2;
 8004a00:	f06f 0601 	mvn.w	r6, #1
 8004a04:	e7f3      	b.n	80049ee <mpu_get_compass_reg+0x9e>
        return -3;
 8004a06:	f06f 0602 	mvn.w	r6, #2
 8004a0a:	e7f0      	b.n	80049ee <mpu_get_compass_reg+0x9e>
 8004a0c:	20000028 	.word	0x20000028

08004a10 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	4604      	mov	r4, r0
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 8004a14:	78c5      	ldrb	r5, [r0, #3]
    tap = 0x3F & gesture[3];

    if (gesture[1] & INT_SRC_TAP) {
 8004a16:	7843      	ldrb	r3, [r0, #1]
 8004a18:	f013 0f01 	tst.w	r3, #1
 8004a1c:	d009      	beq.n	8004a32 <decode_gesture+0x22>
 8004a1e:	f005 003f 	and.w	r0, r5, #63	; 0x3f
        unsigned char direction, count;
        direction = tap >> 3;
 8004a22:	08c0      	lsrs	r0, r0, #3
        count = (tap % 8) + 1;
 8004a24:	f005 0107 	and.w	r1, r5, #7
 8004a28:	3101      	adds	r1, #1
        if (dmp.tap_cb)
 8004a2a:	4b07      	ldr	r3, [pc, #28]	; (8004a48 <decode_gesture+0x38>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	b103      	cbz	r3, 8004a32 <decode_gesture+0x22>
            dmp.tap_cb(direction, count);
 8004a30:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 8004a32:	7863      	ldrb	r3, [r4, #1]
 8004a34:	f013 0f08 	tst.w	r3, #8
 8004a38:	d004      	beq.n	8004a44 <decode_gesture+0x34>
        if (dmp.android_orient_cb)
 8004a3a:	4b03      	ldr	r3, [pc, #12]	; (8004a48 <decode_gesture+0x38>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	b10b      	cbz	r3, 8004a44 <decode_gesture+0x34>
            dmp.android_orient_cb(android_orient >> 6);
 8004a40:	09a8      	lsrs	r0, r5, #6
 8004a42:	4798      	blx	r3
    }

    return 0;
}
 8004a44:	2000      	movs	r0, #0
 8004a46:	bd38      	pop	{r3, r4, r5, pc}
 8004a48:	20000270 	.word	0x20000270

08004a4c <dmp_load_motion_driver_firmware>:
{
 8004a4c:	b508      	push	{r3, lr}
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8004a4e:	23c8      	movs	r3, #200	; 0xc8
 8004a50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a54:	4902      	ldr	r1, [pc, #8]	; (8004a60 <dmp_load_motion_driver_firmware+0x14>)
 8004a56:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8004a5a:	f7ff fed5 	bl	8004808 <mpu_load_firmware>
}
 8004a5e:	bd08      	pop	{r3, pc}
 8004a60:	080084dc 	.word	0x080084dc

08004a64 <dmp_set_fifo_rate>:
{
 8004a64:	b510      	push	{r4, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	4604      	mov	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8004a6a:	4a17      	ldr	r2, [pc, #92]	; (8004ac8 <dmp_set_fifo_rate+0x64>)
 8004a6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a6e:	ab06      	add	r3, sp, #24
 8004a70:	e903 0007 	stmdb	r3, {r0, r1, r2}
    if (rate > DMP_SAMPLE_RATE)
 8004a74:	2cc8      	cmp	r4, #200	; 0xc8
 8004a76:	d81d      	bhi.n	8004ab4 <dmp_set_fifo_rate+0x50>
    div = DMP_SAMPLE_RATE / rate - 1;
 8004a78:	23c8      	movs	r3, #200	; 0xc8
 8004a7a:	fb93 f3f4 	sdiv	r3, r3, r4
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29b      	uxth	r3, r3
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8004a82:	0a1a      	lsrs	r2, r3, #8
 8004a84:	f88d 2004 	strb.w	r2, [sp, #4]
    tmp[1] = (unsigned char)(div & 0xFF);
 8004a88:	f88d 3005 	strb.w	r3, [sp, #5]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8004a8c:	aa01      	add	r2, sp, #4
 8004a8e:	2102      	movs	r1, #2
 8004a90:	f240 2016 	movw	r0, #534	; 0x216
 8004a94:	f7ff fe3c 	bl	8004710 <mpu_write_mem>
 8004a98:	b978      	cbnz	r0, 8004aba <dmp_set_fifo_rate+0x56>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8004a9a:	aa03      	add	r2, sp, #12
 8004a9c:	210c      	movs	r1, #12
 8004a9e:	f640 20c1 	movw	r0, #2753	; 0xac1
 8004aa2:	f7ff fe35 	bl	8004710 <mpu_write_mem>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	b950      	cbnz	r0, 8004ac0 <dmp_set_fifo_rate+0x5c>
    dmp.fifo_rate = rate;
 8004aaa:	4a08      	ldr	r2, [pc, #32]	; (8004acc <dmp_set_fifo_rate+0x68>)
 8004aac:	8194      	strh	r4, [r2, #12]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	b006      	add	sp, #24
 8004ab2:	bd10      	pop	{r4, pc}
        return -1;
 8004ab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ab8:	e7f9      	b.n	8004aae <dmp_set_fifo_rate+0x4a>
        return -1;
 8004aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004abe:	e7f6      	b.n	8004aae <dmp_set_fifo_rate+0x4a>
        return -1;
 8004ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ac4:	e7f3      	b.n	8004aae <dmp_set_fifo_rate+0x4a>
 8004ac6:	bf00      	nop
 8004ac8:	08008420 	.word	0x08008420
 8004acc:	20000270 	.word	0x20000270

08004ad0 <dmp_set_tap_thresh>:
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8004ad0:	f010 0f07 	tst.w	r0, #7
 8004ad4:	f000 80c4 	beq.w	8004c60 <dmp_set_tap_thresh+0x190>
 8004ad8:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8004adc:	f200 80c3 	bhi.w	8004c66 <dmp_set_tap_thresh+0x196>
{
 8004ae0:	b510      	push	{r4, lr}
 8004ae2:	ed2d 8b02 	vpush	{d8}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	ee07 1a90 	vmov	s15, r1
 8004aec:	4604      	mov	r4, r0
    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8004aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8004c88 <dmp_set_tap_thresh+0x1b8>
 8004af6:	ee87 8a87 	vdiv.f32	s16, s15, s14
    mpu_get_accel_fsr(&accel_fsr);
 8004afa:	f10d 0003 	add.w	r0, sp, #3
 8004afe:	f7fe ffff 	bl	8003b00 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8004b02:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004b06:	3b02      	subs	r3, #2
 8004b08:	2b0e      	cmp	r3, #14
 8004b0a:	f200 80b0 	bhi.w	8004c6e <dmp_set_tap_thresh+0x19e>
 8004b0e:	e8df f003 	tbb	[pc, r3]
 8004b12:	ae08      	.short	0xae08
 8004b14:	aeaeae33 	.word	0xaeaeae33
 8004b18:	aeaeae46 	.word	0xaeaeae46
 8004b1c:	aeaeaeae 	.word	0xaeaeaeae
 8004b20:	59          	.byte	0x59
 8004b21:	00          	.byte	0x00
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8004b22:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8004c8c <dmp_set_tap_thresh+0x1bc>
 8004b26:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b2e:	ee17 3a90 	vmov	r3, s15
 8004b32:	b29b      	uxth	r3, r3
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8004b34:	eddf 7a56 	vldr	s15, [pc, #344]	; 8004c90 <dmp_set_tap_thresh+0x1c0>
 8004b38:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004b3c:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8004b40:	ee18 2a10 	vmov	r2, s16
 8004b44:	b292      	uxth	r2, r2
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8004b46:	0a19      	lsrs	r1, r3, #8
 8004b48:	f88d 1004 	strb.w	r1, [sp, #4]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 8004b4c:	f88d 3005 	strb.w	r3, [sp, #5]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8004b50:	0a13      	lsrs	r3, r2, #8
 8004b52:	f88d 3006 	strb.w	r3, [sp, #6]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 8004b56:	f88d 2007 	strb.w	r2, [sp, #7]
    if (axis & TAP_X) {
 8004b5a:	f014 0f01 	tst.w	r4, #1
 8004b5e:	d144      	bne.n	8004bea <dmp_set_tap_thresh+0x11a>
    if (axis & TAP_Y) {
 8004b60:	f014 0f02 	tst.w	r4, #2
 8004b64:	d155      	bne.n	8004c12 <dmp_set_tap_thresh+0x142>
    if (axis & TAP_Z) {
 8004b66:	f014 0f04 	tst.w	r4, #4
 8004b6a:	d165      	bne.n	8004c38 <dmp_set_tap_thresh+0x168>
    return 0;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	b002      	add	sp, #8
 8004b72:	ecbd 8b02 	vpop	{d8}
 8004b76:	bd10      	pop	{r4, pc}
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8004b78:	eddf 7a46 	vldr	s15, [pc, #280]	; 8004c94 <dmp_set_tap_thresh+0x1c4>
 8004b7c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b84:	ee17 3a90 	vmov	r3, s15
 8004b88:	b29b      	uxth	r3, r3
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8004b8a:	eddf 7a43 	vldr	s15, [pc, #268]	; 8004c98 <dmp_set_tap_thresh+0x1c8>
 8004b8e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004b92:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8004b96:	ee18 2a10 	vmov	r2, s16
 8004b9a:	b292      	uxth	r2, r2
        break;
 8004b9c:	e7d3      	b.n	8004b46 <dmp_set_tap_thresh+0x76>
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 8004b9e:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8004c9c <dmp_set_tap_thresh+0x1cc>
 8004ba2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004baa:	ee17 3a90 	vmov	r3, s15
 8004bae:	b29b      	uxth	r3, r3
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8004bb0:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8004ca0 <dmp_set_tap_thresh+0x1d0>
 8004bb4:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004bb8:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8004bbc:	ee18 2a10 	vmov	r2, s16
 8004bc0:	b292      	uxth	r2, r2
        break;
 8004bc2:	e7c0      	b.n	8004b46 <dmp_set_tap_thresh+0x76>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 8004bc4:	eddf 7a37 	vldr	s15, [pc, #220]	; 8004ca4 <dmp_set_tap_thresh+0x1d4>
 8004bc8:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd0:	ee17 3a90 	vmov	r3, s15
 8004bd4:	b29b      	uxth	r3, r3
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 8004bd6:	eddf 7a34 	vldr	s15, [pc, #208]	; 8004ca8 <dmp_set_tap_thresh+0x1d8>
 8004bda:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004bde:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8004be2:	ee18 2a10 	vmov	r2, s16
 8004be6:	b292      	uxth	r2, r2
        break;
 8004be8:	e7ad      	b.n	8004b46 <dmp_set_tap_thresh+0x76>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8004bea:	aa01      	add	r2, sp, #4
 8004bec:	2102      	movs	r1, #2
 8004bee:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 8004bf2:	f7ff fd8d 	bl	8004710 <mpu_write_mem>
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	d13c      	bne.n	8004c74 <dmp_set_tap_thresh+0x1a4>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8004bfa:	f10d 0206 	add.w	r2, sp, #6
 8004bfe:	2102      	movs	r1, #2
 8004c00:	f44f 7092 	mov.w	r0, #292	; 0x124
 8004c04:	f7ff fd84 	bl	8004710 <mpu_write_mem>
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	d0a9      	beq.n	8004b60 <dmp_set_tap_thresh+0x90>
            return -1;
 8004c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c10:	e7ad      	b.n	8004b6e <dmp_set_tap_thresh+0x9e>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 8004c12:	aa01      	add	r2, sp, #4
 8004c14:	2102      	movs	r1, #2
 8004c16:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 8004c1a:	f7ff fd79 	bl	8004710 <mpu_write_mem>
 8004c1e:	bb60      	cbnz	r0, 8004c7a <dmp_set_tap_thresh+0x1aa>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8004c20:	f10d 0206 	add.w	r2, sp, #6
 8004c24:	2102      	movs	r1, #2
 8004c26:	f44f 7094 	mov.w	r0, #296	; 0x128
 8004c2a:	f7ff fd71 	bl	8004710 <mpu_write_mem>
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	d099      	beq.n	8004b66 <dmp_set_tap_thresh+0x96>
            return -1;
 8004c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c36:	e79a      	b.n	8004b6e <dmp_set_tap_thresh+0x9e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8004c38:	aa01      	add	r2, sp, #4
 8004c3a:	2102      	movs	r1, #2
 8004c3c:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8004c40:	f7ff fd66 	bl	8004710 <mpu_write_mem>
 8004c44:	b9e0      	cbnz	r0, 8004c80 <dmp_set_tap_thresh+0x1b0>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 8004c46:	f10d 0206 	add.w	r2, sp, #6
 8004c4a:	2102      	movs	r1, #2
 8004c4c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004c50:	f7ff fd5e 	bl	8004710 <mpu_write_mem>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2800      	cmp	r0, #0
 8004c58:	d089      	beq.n	8004b6e <dmp_set_tap_thresh+0x9e>
            return -1;
 8004c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c5e:	e786      	b.n	8004b6e <dmp_set_tap_thresh+0x9e>
        return -1;
 8004c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c64:	e001      	b.n	8004c6a <dmp_set_tap_thresh+0x19a>
 8004c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	4770      	bx	lr
        return -1;
 8004c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c72:	e77c      	b.n	8004b6e <dmp_set_tap_thresh+0x9e>
            return -1;
 8004c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c78:	e779      	b.n	8004b6e <dmp_set_tap_thresh+0x9e>
            return -1;
 8004c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c7e:	e776      	b.n	8004b6e <dmp_set_tap_thresh+0x9e>
            return -1;
 8004c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c84:	e773      	b.n	8004b6e <dmp_set_tap_thresh+0x9e>
 8004c86:	bf00      	nop
 8004c88:	43480000 	.word	0x43480000
 8004c8c:	46800000 	.word	0x46800000
 8004c90:	46400000 	.word	0x46400000
 8004c94:	46000000 	.word	0x46000000
 8004c98:	45c00000 	.word	0x45c00000
 8004c9c:	45800000 	.word	0x45800000
 8004ca0:	45400000 	.word	0x45400000
 8004ca4:	45000000 	.word	0x45000000
 8004ca8:	44c00000 	.word	0x44c00000

08004cac <dmp_set_tap_axes>:
{
 8004cac:	b500      	push	{lr}
 8004cae:	b083      	sub	sp, #12
    unsigned char tmp = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (axis & TAP_X)
 8004cb6:	f010 0f01 	tst.w	r0, #1
 8004cba:	d002      	beq.n	8004cc2 <dmp_set_tap_axes+0x16>
        tmp |= 0x30;
 8004cbc:	2330      	movs	r3, #48	; 0x30
 8004cbe:	f88d 3007 	strb.w	r3, [sp, #7]
    if (axis & TAP_Y)
 8004cc2:	f010 0f02 	tst.w	r0, #2
 8004cc6:	d005      	beq.n	8004cd4 <dmp_set_tap_axes+0x28>
        tmp |= 0x0C;
 8004cc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004ccc:	f043 030c 	orr.w	r3, r3, #12
 8004cd0:	f88d 3007 	strb.w	r3, [sp, #7]
    if (axis & TAP_Z)
 8004cd4:	f010 0f04 	tst.w	r0, #4
 8004cd8:	d005      	beq.n	8004ce6 <dmp_set_tap_axes+0x3a>
        tmp |= 0x03;
 8004cda:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004cde:	f043 0303 	orr.w	r3, r3, #3
 8004ce2:	f88d 3007 	strb.w	r3, [sp, #7]
    return mpu_write_mem(D_1_72, 1, &tmp);
 8004ce6:	f10d 0207 	add.w	r2, sp, #7
 8004cea:	2101      	movs	r1, #1
 8004cec:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8004cf0:	f7ff fd0e 	bl	8004710 <mpu_write_mem>
}
 8004cf4:	b003      	add	sp, #12
 8004cf6:	f85d fb04 	ldr.w	pc, [sp], #4

08004cfa <dmp_set_tap_count>:
{
 8004cfa:	b500      	push	{lr}
 8004cfc:	b083      	sub	sp, #12
    if (min_taps < 1)
 8004cfe:	b120      	cbz	r0, 8004d0a <dmp_set_tap_count+0x10>
 8004d00:	4603      	mov	r3, r0
    else if (min_taps > 4)
 8004d02:	2804      	cmp	r0, #4
 8004d04:	d902      	bls.n	8004d0c <dmp_set_tap_count+0x12>
        min_taps = 4;
 8004d06:	2304      	movs	r3, #4
 8004d08:	e000      	b.n	8004d0c <dmp_set_tap_count+0x12>
        min_taps = 1;
 8004d0a:	2301      	movs	r3, #1
    tmp = min_taps - 1;
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	aa02      	add	r2, sp, #8
 8004d10:	f802 3d01 	strb.w	r3, [r2, #-1]!
    return mpu_write_mem(D_1_79, 1, &tmp);
 8004d14:	2101      	movs	r1, #1
 8004d16:	f240 104f 	movw	r0, #335	; 0x14f
 8004d1a:	f7ff fcf9 	bl	8004710 <mpu_write_mem>
}
 8004d1e:	b003      	add	sp, #12
 8004d20:	f85d fb04 	ldr.w	pc, [sp], #4

08004d24 <dmp_set_tap_time>:
{
 8004d24:	b500      	push	{lr}
 8004d26:	b083      	sub	sp, #12
    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8004d28:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <dmp_set_tap_time+0x28>)
 8004d2a:	fba3 3000 	umull	r3, r0, r3, r0
 8004d2e:	0880      	lsrs	r0, r0, #2
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8004d30:	0a03      	lsrs	r3, r0, #8
 8004d32:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8004d36:	f88d 0005 	strb.w	r0, [sp, #5]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8004d3a:	aa01      	add	r2, sp, #4
 8004d3c:	2102      	movs	r1, #2
 8004d3e:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 8004d42:	f7ff fce5 	bl	8004710 <mpu_write_mem>
}
 8004d46:	b003      	add	sp, #12
 8004d48:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d4c:	cccccccd 	.word	0xcccccccd

08004d50 <dmp_set_tap_time_multi>:
{
 8004d50:	b500      	push	{lr}
 8004d52:	b083      	sub	sp, #12
    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8004d54:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <dmp_set_tap_time_multi+0x28>)
 8004d56:	fba3 3000 	umull	r3, r0, r3, r0
 8004d5a:	0880      	lsrs	r0, r0, #2
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8004d5c:	0a03      	lsrs	r3, r0, #8
 8004d5e:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 8004d62:	f88d 0005 	strb.w	r0, [sp, #5]
    return mpu_write_mem(D_1_218, 2, tmp);
 8004d66:	aa01      	add	r2, sp, #4
 8004d68:	2102      	movs	r1, #2
 8004d6a:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 8004d6e:	f7ff fccf 	bl	8004710 <mpu_write_mem>
}
 8004d72:	b003      	add	sp, #12
 8004d74:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d78:	cccccccd 	.word	0xcccccccd

08004d7c <dmp_set_shake_reject_thresh>:
{
 8004d7c:	b500      	push	{lr}
 8004d7e:	b083      	sub	sp, #12
    long thresh_scaled = sf / 1000 * thresh;
 8004d80:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <dmp_set_shake_reject_thresh+0x40>)
 8004d82:	fb83 2300 	smull	r2, r3, r3, r0
 8004d86:	17c0      	asrs	r0, r0, #31
 8004d88:	ebc0 10a3 	rsb	r0, r0, r3, asr #6
 8004d8c:	fb01 f100 	mul.w	r1, r1, r0
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 8004d90:	0e0b      	lsrs	r3, r1, #24
 8004d92:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 8004d96:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8004d9a:	f88d 3005 	strb.w	r3, [sp, #5]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 8004d9e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8004da2:	f88d 3006 	strb.w	r3, [sp, #6]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 8004da6:	f88d 1007 	strb.w	r1, [sp, #7]
    return mpu_write_mem(D_1_92, 4, tmp);
 8004daa:	aa01      	add	r2, sp, #4
 8004dac:	2104      	movs	r1, #4
 8004dae:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 8004db2:	f7ff fcad 	bl	8004710 <mpu_write_mem>
}
 8004db6:	b003      	add	sp, #12
 8004db8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004dbc:	10624dd3 	.word	0x10624dd3

08004dc0 <dmp_set_shake_reject_time>:
{
 8004dc0:	b500      	push	{lr}
 8004dc2:	b083      	sub	sp, #12
    time /= (1000 / DMP_SAMPLE_RATE);
 8004dc4:	4b08      	ldr	r3, [pc, #32]	; (8004de8 <dmp_set_shake_reject_time+0x28>)
 8004dc6:	fba3 3000 	umull	r3, r0, r3, r0
 8004dca:	0880      	lsrs	r0, r0, #2
    tmp[0] = time >> 8;
 8004dcc:	0a03      	lsrs	r3, r0, #8
 8004dce:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = time & 0xFF;
 8004dd2:	f88d 0005 	strb.w	r0, [sp, #5]
    return mpu_write_mem(D_1_90,2,tmp);
 8004dd6:	aa01      	add	r2, sp, #4
 8004dd8:	2102      	movs	r1, #2
 8004dda:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 8004dde:	f7ff fc97 	bl	8004710 <mpu_write_mem>
}
 8004de2:	b003      	add	sp, #12
 8004de4:	f85d fb04 	ldr.w	pc, [sp], #4
 8004de8:	cccccccd 	.word	0xcccccccd

08004dec <dmp_set_shake_reject_timeout>:
{
 8004dec:	b500      	push	{lr}
 8004dee:	b083      	sub	sp, #12
    time /= (1000 / DMP_SAMPLE_RATE);
 8004df0:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <dmp_set_shake_reject_timeout+0x28>)
 8004df2:	fba3 3000 	umull	r3, r0, r3, r0
 8004df6:	0880      	lsrs	r0, r0, #2
    tmp[0] = time >> 8;
 8004df8:	0a03      	lsrs	r3, r0, #8
 8004dfa:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = time & 0xFF;
 8004dfe:	f88d 0005 	strb.w	r0, [sp, #5]
    return mpu_write_mem(D_1_88,2,tmp);
 8004e02:	aa01      	add	r2, sp, #4
 8004e04:	2102      	movs	r1, #2
 8004e06:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8004e0a:	f7ff fc81 	bl	8004710 <mpu_write_mem>
}
 8004e0e:	b003      	add	sp, #12
 8004e10:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e14:	cccccccd 	.word	0xcccccccd

08004e18 <dmp_enable_gyro_cal>:
{
 8004e18:	b500      	push	{lr}
 8004e1a:	b085      	sub	sp, #20
    if (enable) {
 8004e1c:	b968      	cbnz	r0, 8004e3a <dmp_enable_gyro_cal+0x22>
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8004e1e:	ab01      	add	r3, sp, #4
 8004e20:	4a0c      	ldr	r2, [pc, #48]	; (8004e54 <dmp_enable_gyro_cal+0x3c>)
 8004e22:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e24:	c303      	stmia	r3!, {r0, r1}
 8004e26:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8004e28:	aa01      	add	r2, sp, #4
 8004e2a:	2109      	movs	r1, #9
 8004e2c:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8004e30:	f7ff fc6e 	bl	8004710 <mpu_write_mem>
}
 8004e34:	b005      	add	sp, #20
 8004e36:	f85d fb04 	ldr.w	pc, [sp], #4
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8004e3a:	ab01      	add	r3, sp, #4
 8004e3c:	4a06      	ldr	r2, [pc, #24]	; (8004e58 <dmp_enable_gyro_cal+0x40>)
 8004e3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e40:	c303      	stmia	r3!, {r0, r1}
 8004e42:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8004e44:	aa01      	add	r2, sp, #4
 8004e46:	2109      	movs	r1, #9
 8004e48:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8004e4c:	f7ff fc60 	bl	8004710 <mpu_write_mem>
 8004e50:	e7f0      	b.n	8004e34 <dmp_enable_gyro_cal+0x1c>
 8004e52:	bf00      	nop
 8004e54:	08008438 	.word	0x08008438
 8004e58:	0800842c 	.word	0x0800842c

08004e5c <dmp_enable_lp_quat>:
{
 8004e5c:	b500      	push	{lr}
 8004e5e:	b083      	sub	sp, #12
    if (enable) {
 8004e60:	b1b0      	cbz	r0, 8004e90 <dmp_enable_lp_quat+0x34>
        regs[0] = DINBC0;
 8004e62:	23c0      	movs	r3, #192	; 0xc0
 8004e64:	f88d 3004 	strb.w	r3, [sp, #4]
        regs[1] = DINBC2;
 8004e68:	23c2      	movs	r3, #194	; 0xc2
 8004e6a:	f88d 3005 	strb.w	r3, [sp, #5]
        regs[2] = DINBC4;
 8004e6e:	23c4      	movs	r3, #196	; 0xc4
 8004e70:	f88d 3006 	strb.w	r3, [sp, #6]
        regs[3] = DINBC6;
 8004e74:	23c6      	movs	r3, #198	; 0xc6
 8004e76:	f88d 3007 	strb.w	r3, [sp, #7]
    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 8004e7a:	aa01      	add	r2, sp, #4
 8004e7c:	2104      	movs	r1, #4
 8004e7e:	f640 2098 	movw	r0, #2712	; 0xa98
 8004e82:	f7ff fc45 	bl	8004710 <mpu_write_mem>
    return mpu_reset_fifo();
 8004e86:	f7fe fcf3 	bl	8003870 <mpu_reset_fifo>
}
 8004e8a:	b003      	add	sp, #12
 8004e8c:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0x8B, 4);
 8004e90:	f04f 338b 	mov.w	r3, #2341178251	; 0x8b8b8b8b
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	e7f0      	b.n	8004e7a <dmp_enable_lp_quat+0x1e>

08004e98 <dmp_enable_6x_lp_quat>:
{
 8004e98:	b500      	push	{lr}
 8004e9a:	b083      	sub	sp, #12
    if (enable) {
 8004e9c:	b1b0      	cbz	r0, 8004ecc <dmp_enable_6x_lp_quat+0x34>
        regs[0] = DINA20;
 8004e9e:	2320      	movs	r3, #32
 8004ea0:	f88d 3004 	strb.w	r3, [sp, #4]
        regs[1] = DINA28;
 8004ea4:	2328      	movs	r3, #40	; 0x28
 8004ea6:	f88d 3005 	strb.w	r3, [sp, #5]
        regs[2] = DINA30;
 8004eaa:	2330      	movs	r3, #48	; 0x30
 8004eac:	f88d 3006 	strb.w	r3, [sp, #6]
        regs[3] = DINA38;
 8004eb0:	2338      	movs	r3, #56	; 0x38
 8004eb2:	f88d 3007 	strb.w	r3, [sp, #7]
    mpu_write_mem(CFG_8, 4, regs);
 8004eb6:	aa01      	add	r2, sp, #4
 8004eb8:	2104      	movs	r1, #4
 8004eba:	f640 209e 	movw	r0, #2718	; 0xa9e
 8004ebe:	f7ff fc27 	bl	8004710 <mpu_write_mem>
    return mpu_reset_fifo();
 8004ec2:	f7fe fcd5 	bl	8003870 <mpu_reset_fifo>
}
 8004ec6:	b003      	add	sp, #12
 8004ec8:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0xA3, 4);
 8004ecc:	f04f 33a3 	mov.w	r3, #2745410467	; 0xa3a3a3a3
 8004ed0:	9301      	str	r3, [sp, #4]
 8004ed2:	e7f0      	b.n	8004eb6 <dmp_enable_6x_lp_quat+0x1e>

08004ed4 <dmp_enable_feature>:
{
 8004ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	4604      	mov	r4, r0
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8004edc:	2302      	movs	r3, #2
 8004ede:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 8004ee2:	23ca      	movs	r3, #202	; 0xca
 8004ee4:	f88d 3005 	strb.w	r3, [sp, #5]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 8004ee8:	23e3      	movs	r3, #227	; 0xe3
 8004eea:	f88d 3006 	strb.w	r3, [sp, #6]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 8004eee:	2309      	movs	r3, #9
 8004ef0:	f88d 3007 	strb.w	r3, [sp, #7]
    mpu_write_mem(D_0_104, 4, tmp);
 8004ef4:	aa01      	add	r2, sp, #4
 8004ef6:	2104      	movs	r1, #4
 8004ef8:	2068      	movs	r0, #104	; 0x68
 8004efa:	f7ff fc09 	bl	8004710 <mpu_write_mem>
    tmp[0] = 0xA3;
 8004efe:	23a3      	movs	r3, #163	; 0xa3
 8004f00:	f88d 3004 	strb.w	r3, [sp, #4]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8004f04:	f014 0840 	ands.w	r8, r4, #64	; 0x40
 8004f08:	f000 80b0 	beq.w	800506c <dmp_enable_feature+0x198>
        tmp[1] = 0xC0;
 8004f0c:	23c0      	movs	r3, #192	; 0xc0
 8004f0e:	f88d 3005 	strb.w	r3, [sp, #5]
        tmp[2] = 0xC8;
 8004f12:	23c8      	movs	r3, #200	; 0xc8
 8004f14:	f88d 3006 	strb.w	r3, [sp, #6]
        tmp[3] = 0xC2;
 8004f18:	23c2      	movs	r3, #194	; 0xc2
 8004f1a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004f1e:	f414 75c0 	ands.w	r5, r4, #384	; 0x180
 8004f22:	f000 80ab 	beq.w	800507c <dmp_enable_feature+0x1a8>
        tmp[4] = 0xC4;
 8004f26:	23c4      	movs	r3, #196	; 0xc4
 8004f28:	f88d 3008 	strb.w	r3, [sp, #8]
        tmp[5] = 0xCC;
 8004f2c:	23cc      	movs	r3, #204	; 0xcc
 8004f2e:	f88d 3009 	strb.w	r3, [sp, #9]
        tmp[6] = 0xC6;
 8004f32:	23c6      	movs	r3, #198	; 0xc6
 8004f34:	f88d 300a 	strb.w	r3, [sp, #10]
    tmp[7] = 0xA3;
 8004f38:	23a3      	movs	r3, #163	; 0xa3
 8004f3a:	f88d 300b 	strb.w	r3, [sp, #11]
    tmp[8] = 0xA3;
 8004f3e:	f88d 300c 	strb.w	r3, [sp, #12]
    tmp[9] = 0xA3;
 8004f42:	f88d 300d 	strb.w	r3, [sp, #13]
    mpu_write_mem(CFG_15,10,tmp);
 8004f46:	aa01      	add	r2, sp, #4
 8004f48:	210a      	movs	r1, #10
 8004f4a:	f640 20a7 	movw	r0, #2727	; 0xaa7
 8004f4e:	f7ff fbdf 	bl	8004710 <mpu_write_mem>
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8004f52:	f014 0703 	ands.w	r7, r4, #3
 8004f56:	f000 8099 	beq.w	800508c <dmp_enable_feature+0x1b8>
        tmp[0] = DINA20;
 8004f5a:	2320      	movs	r3, #32
 8004f5c:	f88d 3004 	strb.w	r3, [sp, #4]
    mpu_write_mem(CFG_27,1,tmp);
 8004f60:	aa01      	add	r2, sp, #4
 8004f62:	2101      	movs	r1, #1
 8004f64:	f640 20b6 	movw	r0, #2742	; 0xab6
 8004f68:	f7ff fbd2 	bl	8004710 <mpu_write_mem>
    if (mask & DMP_FEATURE_GYRO_CAL)
 8004f6c:	f014 0f20 	tst.w	r4, #32
 8004f70:	f000 8090 	beq.w	8005094 <dmp_enable_feature+0x1c0>
        dmp_enable_gyro_cal(1);
 8004f74:	2001      	movs	r0, #1
 8004f76:	f7ff ff4f 	bl	8004e18 <dmp_enable_gyro_cal>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8004f7a:	b1ad      	cbz	r5, 8004fa8 <dmp_enable_feature+0xd4>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 8004f7c:	f414 7f80 	tst.w	r4, #256	; 0x100
 8004f80:	f000 808c 	beq.w	800509c <dmp_enable_feature+0x1c8>
            tmp[0] = 0xB2;
 8004f84:	23b2      	movs	r3, #178	; 0xb2
 8004f86:	f88d 3004 	strb.w	r3, [sp, #4]
            tmp[1] = 0x8B;
 8004f8a:	238b      	movs	r3, #139	; 0x8b
 8004f8c:	f88d 3005 	strb.w	r3, [sp, #5]
            tmp[2] = 0xB6;
 8004f90:	23b6      	movs	r3, #182	; 0xb6
 8004f92:	f88d 3006 	strb.w	r3, [sp, #6]
            tmp[3] = 0x9B;
 8004f96:	239b      	movs	r3, #155	; 0x9b
 8004f98:	f88d 3007 	strb.w	r3, [sp, #7]
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 8004f9c:	aa01      	add	r2, sp, #4
 8004f9e:	2104      	movs	r1, #4
 8004fa0:	f640 20a2 	movw	r0, #2722	; 0xaa2
 8004fa4:	f7ff fbb4 	bl	8004710 <mpu_write_mem>
    if (mask & DMP_FEATURE_TAP) {
 8004fa8:	f014 0f01 	tst.w	r4, #1
 8004fac:	f000 8083 	beq.w	80050b6 <dmp_enable_feature+0x1e2>
        tmp[0] = 0xF8;
 8004fb0:	aa04      	add	r2, sp, #16
 8004fb2:	23f8      	movs	r3, #248	; 0xf8
 8004fb4:	f802 3d0c 	strb.w	r3, [r2, #-12]!
        mpu_write_mem(CFG_20, 1, tmp);
 8004fb8:	2101      	movs	r1, #1
 8004fba:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 8004fbe:	f7ff fba7 	bl	8004710 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 8004fc2:	21fa      	movs	r1, #250	; 0xfa
 8004fc4:	2007      	movs	r0, #7
 8004fc6:	f7ff fd83 	bl	8004ad0 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 8004fca:	2007      	movs	r0, #7
 8004fcc:	f7ff fe6e 	bl	8004cac <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 8004fd0:	2001      	movs	r0, #1
 8004fd2:	f7ff fe92 	bl	8004cfa <dmp_set_tap_count>
        dmp_set_tap_time(100);
 8004fd6:	2064      	movs	r0, #100	; 0x64
 8004fd8:	f7ff fea4 	bl	8004d24 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 8004fdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004fe0:	f7ff feb6 	bl	8004d50 <dmp_set_tap_time_multi>
        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 8004fe4:	21c8      	movs	r1, #200	; 0xc8
 8004fe6:	483f      	ldr	r0, [pc, #252]	; (80050e4 <dmp_enable_feature+0x210>)
 8004fe8:	f7ff fec8 	bl	8004d7c <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 8004fec:	2028      	movs	r0, #40	; 0x28
 8004fee:	f7ff fee7 	bl	8004dc0 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 8004ff2:	200a      	movs	r0, #10
 8004ff4:	f7ff fefa 	bl	8004dec <dmp_set_shake_reject_timeout>
    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 8004ff8:	f014 0f02 	tst.w	r4, #2
 8004ffc:	d065      	beq.n	80050ca <dmp_enable_feature+0x1f6>
        tmp[0] = 0xD9;
 8004ffe:	23d9      	movs	r3, #217	; 0xd9
 8005000:	f88d 3004 	strb.w	r3, [sp, #4]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 8005004:	aa01      	add	r2, sp, #4
 8005006:	2101      	movs	r1, #1
 8005008:	f240 703d 	movw	r0, #1853	; 0x73d
 800500c:	f7ff fb80 	bl	8004710 <mpu_write_mem>
    if (mask & DMP_FEATURE_LP_QUAT)
 8005010:	f014 0f04 	tst.w	r4, #4
 8005014:	d05d      	beq.n	80050d2 <dmp_enable_feature+0x1fe>
        dmp_enable_lp_quat(1);
 8005016:	2001      	movs	r0, #1
 8005018:	f7ff ff20 	bl	8004e5c <dmp_enable_lp_quat>
    if (mask & DMP_FEATURE_6X_LP_QUAT)
 800501c:	f014 0f10 	tst.w	r4, #16
 8005020:	d05b      	beq.n	80050da <dmp_enable_feature+0x206>
        dmp_enable_6x_lp_quat(1);
 8005022:	2001      	movs	r0, #1
 8005024:	f7ff ff38 	bl	8004e98 <dmp_enable_6x_lp_quat>
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8005028:	4e2f      	ldr	r6, [pc, #188]	; (80050e8 <dmp_enable_feature+0x214>)
 800502a:	f044 0308 	orr.w	r3, r4, #8
 800502e:	8173      	strh	r3, [r6, #10]
    mpu_reset_fifo();
 8005030:	f7fe fc1e 	bl	8003870 <mpu_reset_fifo>
    dmp.packet_length = 0;
 8005034:	2300      	movs	r3, #0
 8005036:	73b3      	strb	r3, [r6, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8005038:	f1b8 0f00 	cmp.w	r8, #0
 800503c:	d001      	beq.n	8005042 <dmp_enable_feature+0x16e>
        dmp.packet_length += 6;
 800503e:	2206      	movs	r2, #6
 8005040:	73b2      	strb	r2, [r6, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 8005042:	b11d      	cbz	r5, 800504c <dmp_enable_feature+0x178>
        dmp.packet_length += 6;
 8005044:	4a28      	ldr	r2, [pc, #160]	; (80050e8 <dmp_enable_feature+0x214>)
 8005046:	7b93      	ldrb	r3, [r2, #14]
 8005048:	3306      	adds	r3, #6
 800504a:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 800504c:	f014 0f14 	tst.w	r4, #20
 8005050:	d003      	beq.n	800505a <dmp_enable_feature+0x186>
        dmp.packet_length += 16;
 8005052:	4a25      	ldr	r2, [pc, #148]	; (80050e8 <dmp_enable_feature+0x214>)
 8005054:	7b93      	ldrb	r3, [r2, #14]
 8005056:	3310      	adds	r3, #16
 8005058:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800505a:	b11f      	cbz	r7, 8005064 <dmp_enable_feature+0x190>
        dmp.packet_length += 4;
 800505c:	4a22      	ldr	r2, [pc, #136]	; (80050e8 <dmp_enable_feature+0x214>)
 800505e:	7b93      	ldrb	r3, [r2, #14]
 8005060:	3304      	adds	r3, #4
 8005062:	7393      	strb	r3, [r2, #14]
}
 8005064:	2000      	movs	r0, #0
 8005066:	b004      	add	sp, #16
 8005068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp[1] = 0xA3;
 800506c:	23a3      	movs	r3, #163	; 0xa3
 800506e:	f88d 3005 	strb.w	r3, [sp, #5]
        tmp[2] = 0xA3;
 8005072:	f88d 3006 	strb.w	r3, [sp, #6]
        tmp[3] = 0xA3;
 8005076:	f88d 3007 	strb.w	r3, [sp, #7]
 800507a:	e750      	b.n	8004f1e <dmp_enable_feature+0x4a>
        tmp[4] = 0xA3;
 800507c:	23a3      	movs	r3, #163	; 0xa3
 800507e:	f88d 3008 	strb.w	r3, [sp, #8]
        tmp[5] = 0xA3;
 8005082:	f88d 3009 	strb.w	r3, [sp, #9]
        tmp[6] = 0xA3;
 8005086:	f88d 300a 	strb.w	r3, [sp, #10]
 800508a:	e755      	b.n	8004f38 <dmp_enable_feature+0x64>
        tmp[0] = 0xD8;
 800508c:	23d8      	movs	r3, #216	; 0xd8
 800508e:	f88d 3004 	strb.w	r3, [sp, #4]
 8005092:	e765      	b.n	8004f60 <dmp_enable_feature+0x8c>
        dmp_enable_gyro_cal(0);
 8005094:	2000      	movs	r0, #0
 8005096:	f7ff febf 	bl	8004e18 <dmp_enable_gyro_cal>
 800509a:	e76e      	b.n	8004f7a <dmp_enable_feature+0xa6>
            tmp[0] = DINAC0;
 800509c:	23b0      	movs	r3, #176	; 0xb0
 800509e:	f88d 3004 	strb.w	r3, [sp, #4]
            tmp[1] = DINA80;
 80050a2:	2380      	movs	r3, #128	; 0x80
 80050a4:	f88d 3005 	strb.w	r3, [sp, #5]
            tmp[2] = DINAC2;
 80050a8:	23b4      	movs	r3, #180	; 0xb4
 80050aa:	f88d 3006 	strb.w	r3, [sp, #6]
            tmp[3] = DINA90;
 80050ae:	2390      	movs	r3, #144	; 0x90
 80050b0:	f88d 3007 	strb.w	r3, [sp, #7]
 80050b4:	e772      	b.n	8004f9c <dmp_enable_feature+0xc8>
        tmp[0] = 0xD8;
 80050b6:	aa04      	add	r2, sp, #16
 80050b8:	23d8      	movs	r3, #216	; 0xd8
 80050ba:	f802 3d0c 	strb.w	r3, [r2, #-12]!
        mpu_write_mem(CFG_20, 1, tmp);
 80050be:	2101      	movs	r1, #1
 80050c0:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 80050c4:	f7ff fb24 	bl	8004710 <mpu_write_mem>
 80050c8:	e796      	b.n	8004ff8 <dmp_enable_feature+0x124>
        tmp[0] = 0xD8;
 80050ca:	23d8      	movs	r3, #216	; 0xd8
 80050cc:	f88d 3004 	strb.w	r3, [sp, #4]
 80050d0:	e798      	b.n	8005004 <dmp_enable_feature+0x130>
        dmp_enable_lp_quat(0);
 80050d2:	2000      	movs	r0, #0
 80050d4:	f7ff fec2 	bl	8004e5c <dmp_enable_lp_quat>
 80050d8:	e7a0      	b.n	800501c <dmp_enable_feature+0x148>
        dmp_enable_6x_lp_quat(0);
 80050da:	2000      	movs	r0, #0
 80050dc:	f7ff fedc 	bl	8004e98 <dmp_enable_6x_lp_quat>
 80050e0:	e7a2      	b.n	8005028 <dmp_enable_feature+0x154>
 80050e2:	bf00      	nop
 80050e4:	02cae309 	.word	0x02cae309
 80050e8:	20000270 	.word	0x20000270

080050ec <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 80050ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050f0:	b089      	sub	sp, #36	; 0x24
 80050f2:	4605      	mov	r5, r0
 80050f4:	460e      	mov	r6, r1
 80050f6:	4691      	mov	r9, r2
 80050f8:	4698      	mov	r8, r3
 80050fa:	9c10      	ldr	r4, [sp, #64]	; 0x40
    unsigned char ii = 0;

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	8023      	strh	r3, [r4, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8005100:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005102:	4669      	mov	r1, sp
 8005104:	4b6d      	ldr	r3, [pc, #436]	; (80052bc <dmp_read_fifo+0x1d0>)
 8005106:	7b98      	ldrb	r0, [r3, #14]
 8005108:	f7fe fe64 	bl	8003dd4 <mpu_read_fifo_stream>
 800510c:	2800      	cmp	r0, #0
 800510e:	f040 80d1 	bne.w	80052b4 <dmp_read_fifo+0x1c8>
 8005112:	4607      	mov	r7, r0
        return -1;

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 8005114:	4b69      	ldr	r3, [pc, #420]	; (80052bc <dmp_read_fifo+0x1d0>)
 8005116:	8959      	ldrh	r1, [r3, #10]
 8005118:	f011 0f14 	tst.w	r1, #20
 800511c:	d05d      	beq.n	80051da <dmp_read_fifo+0xee>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800511e:	f89d 3000 	ldrb.w	r3, [sp]
 8005122:	f89d c001 	ldrb.w	ip, [sp, #1]
 8005126:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800512a:	ea4c 6c03 	orr.w	ip, ip, r3, lsl #24
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800512e:	f89d 0002 	ldrb.w	r0, [sp, #2]
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8005132:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8005136:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800513a:	ea4c 0c03 	orr.w	ip, ip, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800513e:	f8c9 c000 	str.w	ip, [r9]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8005142:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005146:	f89d e005 	ldrb.w	lr, [sp, #5]
 800514a:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 800514e:	ea4e 6e03 	orr.w	lr, lr, r3, lsl #24
            ((long)fifo_data[6] << 8) | fifo_data[7];
 8005152:	f89d 3006 	ldrb.w	r3, [sp, #6]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8005156:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800515a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800515e:	ea4e 0e03 	orr.w	lr, lr, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 8005162:	f8c9 e004 	str.w	lr, [r9, #4]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8005166:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800516a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800516e:	0400      	lsls	r0, r0, #16
 8005170:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
            ((long)fifo_data[10] << 8) | fifo_data[11];
 8005174:	f89d 300a 	ldrb.w	r3, [sp, #10]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8005178:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 800517c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8005180:	4318      	orrs	r0, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 8005182:	f8c9 0008 	str.w	r0, [r9, #8]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8005186:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800518a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800518e:	0412      	lsls	r2, r2, #16
 8005190:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
            ((long)fifo_data[14] << 8) | fifo_data[15];
 8005194:	f89d 300e 	ldrb.w	r3, [sp, #14]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 8005198:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
            ((long)fifo_data[14] << 8) | fifo_data[15];
 800519c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80051a0:	4313      	orrs	r3, r2
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80051a2:	f8c9 300c 	str.w	r3, [r9, #12]
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 80051a6:	fb1e fe3e 	smultt	lr, lr, lr
 80051aa:	fb1c ec3c 	smlatt	ip, ip, ip, lr
 80051ae:	fb10 c030 	smlatt	r0, r0, r0, ip
 80051b2:	fb13 0333 	smlatt	r3, r3, r3, r0
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 80051b6:	f103 4371 	add.w	r3, r3, #4043309056	; 0xf1000000
 80051ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051be:	d805      	bhi.n	80051cc <dmp_read_fifo+0xe0>
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
            sensors[0] = 0;
            return -1;
        }
        sensors[0] |= INV_WXYZ_QUAT;
 80051c0:	8823      	ldrh	r3, [r4, #0]
 80051c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c6:	8023      	strh	r3, [r4, #0]
        ii += 16;
 80051c8:	2010      	movs	r0, #16
 80051ca:	e007      	b.n	80051dc <dmp_read_fifo+0xf0>
            mpu_reset_fifo();
 80051cc:	f7fe fb50 	bl	8003870 <mpu_reset_fifo>
            sensors[0] = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	8023      	strh	r3, [r4, #0]
            return -1;
 80051d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80051d8:	e064      	b.n	80052a4 <dmp_read_fifo+0x1b8>
    unsigned char ii = 0;
 80051da:	2000      	movs	r0, #0
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 80051dc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80051e0:	d02b      	beq.n	800523a <dmp_read_fifo+0x14e>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 80051e2:	ab08      	add	r3, sp, #32
 80051e4:	4403      	add	r3, r0
 80051e6:	f813 cc20 	ldrb.w	ip, [r3, #-32]
 80051ea:	1c42      	adds	r2, r0, #1
 80051ec:	ab08      	add	r3, sp, #32
 80051ee:	441a      	add	r2, r3
 80051f0:	f812 3c20 	ldrb.w	r3, [r2, #-32]
 80051f4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80051f8:	8033      	strh	r3, [r6, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80051fa:	1c83      	adds	r3, r0, #2
 80051fc:	aa08      	add	r2, sp, #32
 80051fe:	4413      	add	r3, r2
 8005200:	f813 cc20 	ldrb.w	ip, [r3, #-32]
 8005204:	1cc2      	adds	r2, r0, #3
 8005206:	ab08      	add	r3, sp, #32
 8005208:	441a      	add	r2, r3
 800520a:	f812 3c20 	ldrb.w	r3, [r2, #-32]
 800520e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8005212:	8073      	strh	r3, [r6, #2]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8005214:	1d03      	adds	r3, r0, #4
 8005216:	aa08      	add	r2, sp, #32
 8005218:	4413      	add	r3, r2
 800521a:	f813 cc20 	ldrb.w	ip, [r3, #-32]
 800521e:	1d42      	adds	r2, r0, #5
 8005220:	ab08      	add	r3, sp, #32
 8005222:	441a      	add	r2, r3
 8005224:	f812 3c20 	ldrb.w	r3, [r2, #-32]
 8005228:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800522c:	80b3      	strh	r3, [r6, #4]
        ii += 6;
 800522e:	3006      	adds	r0, #6
 8005230:	b2c0      	uxtb	r0, r0
        sensors[0] |= INV_XYZ_ACCEL;
 8005232:	8823      	ldrh	r3, [r4, #0]
 8005234:	f043 0308 	orr.w	r3, r3, #8
 8005238:	8023      	strh	r3, [r4, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 800523a:	f411 7fc0 	tst.w	r1, #384	; 0x180
 800523e:	d02b      	beq.n	8005298 <dmp_read_fifo+0x1ac>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8005240:	ab08      	add	r3, sp, #32
 8005242:	4403      	add	r3, r0
 8005244:	f813 6c20 	ldrb.w	r6, [r3, #-32]
 8005248:	1c42      	adds	r2, r0, #1
 800524a:	ab08      	add	r3, sp, #32
 800524c:	441a      	add	r2, r3
 800524e:	f812 3c20 	ldrb.w	r3, [r2, #-32]
 8005252:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8005256:	802b      	strh	r3, [r5, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8005258:	1c83      	adds	r3, r0, #2
 800525a:	aa08      	add	r2, sp, #32
 800525c:	4413      	add	r3, r2
 800525e:	f813 6c20 	ldrb.w	r6, [r3, #-32]
 8005262:	1cc2      	adds	r2, r0, #3
 8005264:	ab08      	add	r3, sp, #32
 8005266:	441a      	add	r2, r3
 8005268:	f812 3c20 	ldrb.w	r3, [r2, #-32]
 800526c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8005270:	806b      	strh	r3, [r5, #2]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 8005272:	1d03      	adds	r3, r0, #4
 8005274:	aa08      	add	r2, sp, #32
 8005276:	4413      	add	r3, r2
 8005278:	f813 6c20 	ldrb.w	r6, [r3, #-32]
 800527c:	1d42      	adds	r2, r0, #5
 800527e:	ab08      	add	r3, sp, #32
 8005280:	441a      	add	r2, r3
 8005282:	f812 3c20 	ldrb.w	r3, [r2, #-32]
 8005286:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 800528a:	80ab      	strh	r3, [r5, #4]
        ii += 6;
 800528c:	3006      	adds	r0, #6
 800528e:	b2c0      	uxtb	r0, r0
        sensors[0] |= INV_XYZ_GYRO;
 8005290:	8823      	ldrh	r3, [r4, #0]
 8005292:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8005296:	8023      	strh	r3, [r4, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 8005298:	f011 0f03 	tst.w	r1, #3
 800529c:	d106      	bne.n	80052ac <dmp_read_fifo+0x1c0>
        decode_gesture(fifo_data + ii);

    get_ms(timestamp);
 800529e:	4640      	mov	r0, r8
 80052a0:	f7fe fa2b 	bl	80036fa <arduino_get_clock_ms>
    return 0;
}
 80052a4:	4638      	mov	r0, r7
 80052a6:	b009      	add	sp, #36	; 0x24
 80052a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        decode_gesture(fifo_data + ii);
 80052ac:	4468      	add	r0, sp
 80052ae:	f7ff fbaf 	bl	8004a10 <decode_gesture>
 80052b2:	e7f4      	b.n	800529e <dmp_read_fifo+0x1b2>
        return -1;
 80052b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80052b8:	e7f4      	b.n	80052a4 <dmp_read_fifo+0x1b8>
 80052ba:	bf00      	nop
 80052bc:	20000270 	.word	0x20000270

080052c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80052c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052c4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c6:	2400      	movs	r4, #0
 80052c8:	9403      	str	r4, [sp, #12]
 80052ca:	9404      	str	r4, [sp, #16]
 80052cc:	9405      	str	r4, [sp, #20]
 80052ce:	9406      	str	r4, [sp, #24]
 80052d0:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80052d2:	9400      	str	r4, [sp, #0]
 80052d4:	4b3c      	ldr	r3, [pc, #240]	; (80053c8 <MX_GPIO_Init+0x108>)
 80052d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052d8:	f042 0204 	orr.w	r2, r2, #4
 80052dc:	631a      	str	r2, [r3, #48]	; 0x30
 80052de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e0:	f002 0204 	and.w	r2, r2, #4
 80052e4:	9200      	str	r2, [sp, #0]
 80052e6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80052e8:	9401      	str	r4, [sp, #4]
 80052ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ec:	f042 0201 	orr.w	r2, r2, #1
 80052f0:	631a      	str	r2, [r3, #48]	; 0x30
 80052f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f4:	f002 0201 	and.w	r2, r2, #1
 80052f8:	9201      	str	r2, [sp, #4]
 80052fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80052fc:	9402      	str	r4, [sp, #8]
 80052fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005300:	f042 0202 	orr.w	r2, r2, #2
 8005304:	631a      	str	r2, [r3, #48]	; 0x30
 8005306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	9302      	str	r3, [sp, #8]
 800530e:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8005310:	4e2e      	ldr	r6, [pc, #184]	; (80053cc <MX_GPIO_Init+0x10c>)
 8005312:	4622      	mov	r2, r4
 8005314:	2120      	movs	r1, #32
 8005316:	4630      	mov	r0, r6
 8005318:	f7fc fd0e 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800531c:	4f2c      	ldr	r7, [pc, #176]	; (80053d0 <MX_GPIO_Init+0x110>)
 800531e:	4622      	mov	r2, r4
 8005320:	2120      	movs	r1, #32
 8005322:	4638      	mov	r0, r7
 8005324:	f7fc fd08 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8005328:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80053d4 <MX_GPIO_Init+0x114>
 800532c:	4622      	mov	r2, r4
 800532e:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8005332:	4648      	mov	r0, r9
 8005334:	f7fc fd00 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005338:	f04f 0a20 	mov.w	sl, #32
 800533c:	f8cd a00c 	str.w	sl, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005340:	2501      	movs	r5, #1
 8005342:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005344:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005346:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005348:	a903      	add	r1, sp, #12
 800534a:	4630      	mov	r0, r6
 800534c:	f7fc fc22 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : kill_Pin */
  GPIO_InitStruct.Pin = kill_Pin;
 8005350:	2310      	movs	r3, #16
 8005352:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005354:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80053d8 <MX_GPIO_Init+0x118>
 8005358:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800535c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(kill_GPIO_Port, &GPIO_InitStruct);
 800535e:	a903      	add	r1, sp, #12
 8005360:	4638      	mov	r0, r7
 8005362:	f7fc fc17 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005366:	f8cd a00c 	str.w	sl, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800536a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800536c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800536e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005370:	a903      	add	r1, sp, #12
 8005372:	4638      	mov	r0, r7
 8005374:	f7fc fc0e 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8005378:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800537c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800537e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005380:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005382:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005384:	a903      	add	r1, sp, #12
 8005386:	4648      	mov	r0, r9
 8005388:	f7fc fc04 	bl	8001b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_RE_INT_Pin */
  GPIO_InitStruct.Pin = PWM_RE_INT_Pin;
 800538c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005390:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005392:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005396:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(PWM_RE_INT_GPIO_Port, &GPIO_InitStruct);
 8005398:	a903      	add	r1, sp, #12
 800539a:	4630      	mov	r0, r6
 800539c:	f7fc fbfa 	bl	8001b94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80053a0:	4622      	mov	r2, r4
 80053a2:	4621      	mov	r1, r4
 80053a4:	200a      	movs	r0, #10
 80053a6:	f7fc fb9d 	bl	8001ae4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80053aa:	200a      	movs	r0, #10
 80053ac:	f7fc fbce 	bl	8001b4c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 0);
 80053b0:	4622      	mov	r2, r4
 80053b2:	2104      	movs	r1, #4
 80053b4:	2017      	movs	r0, #23
 80053b6:	f7fc fb95 	bl	8001ae4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80053ba:	2017      	movs	r0, #23
 80053bc:	f7fc fbc6 	bl	8001b4c <HAL_NVIC_EnableIRQ>

}
 80053c0:	b008      	add	sp, #32
 80053c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c6:	bf00      	nop
 80053c8:	40023800 	.word	0x40023800
 80053cc:	40020000 	.word	0x40020000
 80053d0:	40020800 	.word	0x40020800
 80053d4:	40020400 	.word	0x40020400
 80053d8:	10110000 	.word	0x10110000

080053dc <MX_USART2_UART_Init>:
{
 80053dc:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80053de:	4808      	ldr	r0, [pc, #32]	; (8005400 <MX_USART2_UART_Init+0x24>)
 80053e0:	4b08      	ldr	r3, [pc, #32]	; (8005404 <MX_USART2_UART_Init+0x28>)
 80053e2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80053e4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80053e8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80053ea:	2300      	movs	r3, #0
 80053ec:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80053ee:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80053f0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80053f2:	220c      	movs	r2, #12
 80053f4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053f6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80053f8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80053fa:	f7fe f94f 	bl	800369c <HAL_UART_Init>
}
 80053fe:	bd08      	pop	{r3, pc}
 8005400:	200005a0 	.word	0x200005a0
 8005404:	40004400 	.word	0x40004400

08005408 <MX_USART6_UART_Init>:
{
 8005408:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 800540a:	4808      	ldr	r0, [pc, #32]	; (800542c <MX_USART6_UART_Init+0x24>)
 800540c:	4b08      	ldr	r3, [pc, #32]	; (8005430 <MX_USART6_UART_Init+0x28>)
 800540e:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 8005410:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005414:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005416:	2300      	movs	r3, #0
 8005418:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800541a:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800541c:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800541e:	220c      	movs	r2, #12
 8005420:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005422:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005424:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005426:	f7fe f939 	bl	800369c <HAL_UART_Init>
}
 800542a:	bd08      	pop	{r3, pc}
 800542c:	2000053c 	.word	0x2000053c
 8005430:	40011400 	.word	0x40011400

08005434 <MX_I2C2_Init>:
{
 8005434:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8005436:	4809      	ldr	r0, [pc, #36]	; (800545c <MX_I2C2_Init+0x28>)
 8005438:	4b09      	ldr	r3, [pc, #36]	; (8005460 <MX_I2C2_Init+0x2c>)
 800543a:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800543c:	4b09      	ldr	r3, [pc, #36]	; (8005464 <MX_I2C2_Init+0x30>)
 800543e:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005440:	2300      	movs	r3, #0
 8005442:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005444:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005446:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800544a:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800544c:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800544e:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005450:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005452:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005454:	f7fc fe92 	bl	800217c <HAL_I2C_Init>
}
 8005458:	bd08      	pop	{r3, pc}
 800545a:	bf00      	nop
 800545c:	200002dc 	.word	0x200002dc
 8005460:	40005800 	.word	0x40005800
 8005464:	00061a80 	.word	0x00061a80

08005468 <MX_TIM4_Init>:
{
 8005468:	b570      	push	{r4, r5, r6, lr}
 800546a:	b08a      	sub	sp, #40	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800546c:	2400      	movs	r4, #0
 800546e:	9408      	str	r4, [sp, #32]
 8005470:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005472:	9401      	str	r4, [sp, #4]
 8005474:	9402      	str	r4, [sp, #8]
 8005476:	9403      	str	r4, [sp, #12]
 8005478:	9404      	str	r4, [sp, #16]
 800547a:	9405      	str	r4, [sp, #20]
 800547c:	9406      	str	r4, [sp, #24]
 800547e:	9407      	str	r4, [sp, #28]
  htim4.Instance = TIM4;
 8005480:	4d1b      	ldr	r5, [pc, #108]	; (80054f0 <MX_TIM4_Init+0x88>)
 8005482:	4b1c      	ldr	r3, [pc, #112]	; (80054f4 <MX_TIM4_Init+0x8c>)
 8005484:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 9;
 8005486:	2309      	movs	r3, #9
 8005488:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800548a:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 20000;
 800548c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8005490:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005492:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005494:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005496:	4628      	mov	r0, r5
 8005498:	f7fd fe59 	bl	800314e <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800549c:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800549e:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80054a0:	a908      	add	r1, sp, #32
 80054a2:	4628      	mov	r0, r5
 80054a4:	f7fd ff3c 	bl	8003320 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80054a8:	2360      	movs	r3, #96	; 0x60
 80054aa:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80054ac:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80054ae:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80054b0:	2604      	movs	r6, #4
 80054b2:	9605      	str	r6, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80054b4:	4622      	mov	r2, r4
 80054b6:	eb0d 0106 	add.w	r1, sp, r6
 80054ba:	4628      	mov	r0, r5
 80054bc:	f7fd fe92 	bl	80031e4 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80054c0:	4632      	mov	r2, r6
 80054c2:	eb0d 0106 	add.w	r1, sp, r6
 80054c6:	4628      	mov	r0, r5
 80054c8:	f7fd fe8c 	bl	80031e4 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80054cc:	2208      	movs	r2, #8
 80054ce:	eb0d 0106 	add.w	r1, sp, r6
 80054d2:	4628      	mov	r0, r5
 80054d4:	f7fd fe86 	bl	80031e4 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80054d8:	220c      	movs	r2, #12
 80054da:	eb0d 0106 	add.w	r1, sp, r6
 80054de:	4628      	mov	r0, r5
 80054e0:	f7fd fe80 	bl	80031e4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 80054e4:	4628      	mov	r0, r5
 80054e6:	f000 fb57 	bl	8005b98 <HAL_TIM_MspPostInit>
}
 80054ea:	b00a      	add	sp, #40	; 0x28
 80054ec:	bd70      	pop	{r4, r5, r6, pc}
 80054ee:	bf00      	nop
 80054f0:	20000448 	.word	0x20000448
 80054f4:	40000800 	.word	0x40000800

080054f8 <MX_ADC1_Init>:
{
 80054f8:	b530      	push	{r4, r5, lr}
 80054fa:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80054fc:	2300      	movs	r3, #0
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	9301      	str	r3, [sp, #4]
 8005502:	9302      	str	r3, [sp, #8]
 8005504:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8005506:	4c11      	ldr	r4, [pc, #68]	; (800554c <MX_ADC1_Init+0x54>)
 8005508:	4a11      	ldr	r2, [pc, #68]	; (8005550 <MX_ADC1_Init+0x58>)
 800550a:	6022      	str	r2, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800550c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005510:	6062      	str	r2, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005512:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8005514:	6123      	str	r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005516:	2501      	movs	r5, #1
 8005518:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800551a:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800551e:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005520:	4a0c      	ldr	r2, [pc, #48]	; (8005554 <MX_ADC1_Init+0x5c>)
 8005522:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005524:	60e3      	str	r3, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005526:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005528:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800552c:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800552e:	4620      	mov	r0, r4
 8005530:	f7fc f9c8 	bl	80018c4 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_7;
 8005534:	2307      	movs	r3, #7
 8005536:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8005538:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800553a:	2302      	movs	r3, #2
 800553c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800553e:	4669      	mov	r1, sp
 8005540:	4620      	mov	r0, r4
 8005542:	f7fc f9eb 	bl	800191c <HAL_ADC_ConfigChannel>
}
 8005546:	b005      	add	sp, #20
 8005548:	bd30      	pop	{r4, r5, pc}
 800554a:	bf00      	nop
 800554c:	20000488 	.word	0x20000488
 8005550:	40012000 	.word	0x40012000
 8005554:	0f000001 	.word	0x0f000001

08005558 <MX_SPI2_Init>:
{
 8005558:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 800555a:	480c      	ldr	r0, [pc, #48]	; (800558c <MX_SPI2_Init+0x34>)
 800555c:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <MX_SPI2_Init+0x38>)
 800555e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005560:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005564:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005566:	2300      	movs	r3, #0
 8005568:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800556a:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800556c:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800556e:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005574:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005576:	2220      	movs	r2, #32
 8005578:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800557a:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800557c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800557e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005580:	230a      	movs	r3, #10
 8005582:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005584:	f7fd fcb8 	bl	8002ef8 <HAL_SPI_Init>
}
 8005588:	bd08      	pop	{r3, pc}
 800558a:	bf00      	nop
 800558c:	200003f0 	.word	0x200003f0
 8005590:	40003800 	.word	0x40003800

08005594 <MX_TIM11_Init>:
{
 8005594:	b508      	push	{r3, lr}
  htim11.Instance = TIM11;
 8005596:	4807      	ldr	r0, [pc, #28]	; (80055b4 <MX_TIM11_Init+0x20>)
 8005598:	4b07      	ldr	r3, [pc, #28]	; (80055b8 <MX_TIM11_Init+0x24>)
 800559a:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 100-1;
 800559c:	2363      	movs	r3, #99	; 0x63
 800559e:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055a0:	2300      	movs	r3, #0
 80055a2:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 65535-1;
 80055a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80055a8:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055aa:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055ac:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80055ae:	f7fd fdb5 	bl	800311c <HAL_TIM_Base_Init>
}
 80055b2:	bd08      	pop	{r3, pc}
 80055b4:	200004f0 	.word	0x200004f0
 80055b8:	40014800 	.word	0x40014800

080055bc <SystemClock_Config>:
{
 80055bc:	b530      	push	{r4, r5, lr}
 80055be:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80055c0:	2230      	movs	r2, #48	; 0x30
 80055c2:	2100      	movs	r1, #0
 80055c4:	a808      	add	r0, sp, #32
 80055c6:	f000 fc43 	bl	8005e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80055ca:	2400      	movs	r4, #0
 80055cc:	9403      	str	r4, [sp, #12]
 80055ce:	9404      	str	r4, [sp, #16]
 80055d0:	9405      	str	r4, [sp, #20]
 80055d2:	9406      	str	r4, [sp, #24]
 80055d4:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80055d6:	9401      	str	r4, [sp, #4]
 80055d8:	4b1a      	ldr	r3, [pc, #104]	; (8005644 <SystemClock_Config+0x88>)
 80055da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80055e0:	641a      	str	r2, [r3, #64]	; 0x40
 80055e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e8:	9301      	str	r3, [sp, #4]
 80055ea:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80055ec:	9402      	str	r4, [sp, #8]
 80055ee:	4b16      	ldr	r3, [pc, #88]	; (8005648 <SystemClock_Config+0x8c>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80055fe:	9302      	str	r3, [sp, #8]
 8005600:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005602:	2502      	movs	r5, #2
 8005604:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005606:	2301      	movs	r3, #1
 8005608:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800560a:	2310      	movs	r3, #16
 800560c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800560e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005610:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005612:	2308      	movs	r3, #8
 8005614:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8005616:	2364      	movs	r3, #100	; 0x64
 8005618:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800561a:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800561c:	2304      	movs	r3, #4
 800561e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005620:	a808      	add	r0, sp, #32
 8005622:	f7fd f95f 	bl	80028e4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005626:	230f      	movs	r3, #15
 8005628:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800562a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800562c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800562e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005632:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005634:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005636:	2103      	movs	r1, #3
 8005638:	a803      	add	r0, sp, #12
 800563a:	f7fd fb8b 	bl	8002d54 <HAL_RCC_ClockConfig>
}
 800563e:	b015      	add	sp, #84	; 0x54
 8005640:	bd30      	pop	{r4, r5, pc}
 8005642:	bf00      	nop
 8005644:	40023800 	.word	0x40023800
 8005648:	40007000 	.word	0x40007000

0800564c <PWM1_Set>:

}

//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 800564c:	4b01      	ldr	r3, [pc, #4]	; (8005654 <PWM1_Set+0x8>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6358      	str	r0, [r3, #52]	; 0x34
}
 8005652:	4770      	bx	lr
 8005654:	20000448 	.word	0x20000448

08005658 <PWM2_Set>:

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 8005658:	4b01      	ldr	r3, [pc, #4]	; (8005660 <PWM2_Set+0x8>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6398      	str	r0, [r3, #56]	; 0x38

}
 800565e:	4770      	bx	lr
 8005660:	20000448 	.word	0x20000448

08005664 <PWM3_Set>:

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 8005664:	4b01      	ldr	r3, [pc, #4]	; (800566c <PWM3_Set+0x8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 800566a:	4770      	bx	lr
 800566c:	20000448 	.word	0x20000448

08005670 <PWM4_Set>:

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 8005670:	4b01      	ldr	r3, [pc, #4]	; (8005678 <PWM4_Set+0x8>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6418      	str	r0, [r3, #64]	; 0x40
}
 8005676:	4770      	bx	lr
 8005678:	20000448 	.word	0x20000448

0800567c <main>:
{
 800567c:	b508      	push	{r3, lr}
  HAL_Init();
 800567e:	f7fc f847 	bl	8001710 <HAL_Init>
  SystemClock_Config();
 8005682:	f7ff ff9b 	bl	80055bc <SystemClock_Config>
  MX_GPIO_Init();
 8005686:	f7ff fe1b 	bl	80052c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800568a:	f7ff fea7 	bl	80053dc <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800568e:	f7ff fed1 	bl	8005434 <MX_I2C2_Init>
  MX_TIM4_Init();
 8005692:	f7ff fee9 	bl	8005468 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8005696:	f7ff feb7 	bl	8005408 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800569a:	f7ff ff2d 	bl	80054f8 <MX_ADC1_Init>
  MX_SPI2_Init();
 800569e:	f7ff ff5b 	bl	8005558 <MX_SPI2_Init>
  MX_TIM11_Init();
 80056a2:	f7ff ff77 	bl	8005594 <MX_TIM11_Init>
	if (HAL_I2C_IsDeviceReady(&hi2c2, 0xD0, 2, 100) == HAL_OK) {
 80056a6:	2364      	movs	r3, #100	; 0x64
 80056a8:	2202      	movs	r2, #2
 80056aa:	21d0      	movs	r1, #208	; 0xd0
 80056ac:	4824      	ldr	r0, [pc, #144]	; (8005740 <main+0xc4>)
 80056ae:	f7fd f857 	bl	8002760 <HAL_I2C_IsDeviceReady>
 80056b2:	b938      	cbnz	r0, 80056c4 <main+0x48>
		if (imu_begin() != INV_SUCCESS) {
 80056b4:	f7fb fc76 	bl	8000fa4 <imu_begin>
 80056b8:	b100      	cbz	r0, 80056bc <main+0x40>
 80056ba:	e7fe      	b.n	80056ba <main+0x3e>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle LED on if so
 80056bc:	2120      	movs	r1, #32
 80056be:	4821      	ldr	r0, [pc, #132]	; (8005744 <main+0xc8>)
 80056c0:	f7fc fb40 	bl	8001d44 <HAL_GPIO_TogglePin>
	imu_dmpBegin(DMP_FEATURE_6X_LP_QUAT,
 80056c4:	21c8      	movs	r1, #200	; 0xc8
 80056c6:	2010      	movs	r0, #16
 80056c8:	f7fb feac 	bl	8001424 <imu_dmpBegin>
	imu_setSensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS); // Enable all sensors
 80056cc:	2079      	movs	r0, #121	; 0x79
 80056ce:	f7fb fc64 	bl	8000f9a <imu_setSensors>
	imu_setGyroFSR(2000); // Set gyro to 2000 dps
 80056d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80056d6:	f7fb fc19 	bl	8000f0c <imu_setGyroFSR>
	imu_setAccelFSR(2); // Set accel to +/-2g
 80056da:	2002      	movs	r0, #2
 80056dc:	f7fb fc34 	bl	8000f48 <imu_setAccelFSR>
	imu_setLPF(42); // Set LPF corner frequency to 42Hz
 80056e0:	202a      	movs	r0, #42	; 0x2a
 80056e2:	f7fb fbf7 	bl	8000ed4 <imu_setLPF>
	imu_setSampleRate(1000); // Set sample rate to max
 80056e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056ea:	f7fb fbf7 	bl	8000edc <imu_setSampleRate>
	imu_setCompassSampleRate(100); // Set mag rate to max
 80056ee:	2064      	movs	r0, #100	; 0x64
 80056f0:	f7fb fbf8 	bl	8000ee4 <imu_setCompassSampleRate>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80056f4:	4c14      	ldr	r4, [pc, #80]	; (8005748 <main+0xcc>)
 80056f6:	2100      	movs	r1, #0
 80056f8:	4620      	mov	r0, r4
 80056fa:	f7fd fdf3 	bl	80032e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80056fe:	2104      	movs	r1, #4
 8005700:	4620      	mov	r0, r4
 8005702:	f7fd fdef 	bl	80032e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8005706:	2108      	movs	r1, #8
 8005708:	4620      	mov	r0, r4
 800570a:	f7fd fdeb 	bl	80032e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800570e:	210c      	movs	r1, #12
 8005710:	4620      	mov	r0, r4
 8005712:	f7fd fde7 	bl	80032e4 <HAL_TIM_PWM_Start>
	PWM1_Set(2500);
 8005716:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800571a:	f7ff ff97 	bl	800564c <PWM1_Set>
	PWM2_Set(2500);
 800571e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8005722:	f7ff ff99 	bl	8005658 <PWM2_Set>
	PWM3_Set(2500);
 8005726:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800572a:	f7ff ff9b 	bl	8005664 <PWM3_Set>
	PWM4_Set(2500);
 800572e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8005732:	f7ff ff9d 	bl	8005670 <PWM4_Set>
		main_loop = 1;
 8005736:	4b05      	ldr	r3, [pc, #20]	; (800574c <main+0xd0>)
 8005738:	2201      	movs	r2, #1
 800573a:	701a      	strb	r2, [r3, #0]
 800573c:	e7fb      	b.n	8005736 <main+0xba>
 800573e:	bf00      	nop
 8005740:	200002dc 	.word	0x200002dc
 8005744:	40020000 	.word	0x40020000
 8005748:	20000448 	.word	0x20000448
 800574c:	20000294 	.word	0x20000294

08005750 <pulse_posedge_handler>:
 * (1 CW)     (3 CCW)
 *
 * This function gets called by the GPIO_EXTI callback when the PWM_RE_INT_Pin triggers an interrupt,
 * which is on the rising edge of every PWM pulse.
 */
void pulse_posedge_handler() {
 8005750:	b538      	push	{r3, r4, r5, lr}
 8005752:	ed2d 8b02 	vpush	{d8}

	//Only want this to happen in main loop - not during init sequence
	if (main_loop) {
 8005756:	4b6a      	ldr	r3, [pc, #424]	; (8005900 <pulse_posedge_handler+0x1b0>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	b913      	cbnz	r3, 8005762 <pulse_posedge_handler+0x12>

#endif

	}

}
 800575c:	ecbd 8b02 	vpop	{d8}
 8005760:	bd38      	pop	{r3, r4, r5, pc}
		  if ( imu_fifoAvailable() )
 8005762:	f7fb fbff 	bl	8000f64 <imu_fifoAvailable>
 8005766:	2800      	cmp	r0, #0
 8005768:	f040 80b2 	bne.w	80058d0 <pulse_posedge_handler+0x180>
		imu_pitch = imu_get_pitch() + 0.0;
 800576c:	f7fb fba6 	bl	8000ebc <imu_get_pitch>
 8005770:	ed9f 8a64 	vldr	s16, [pc, #400]	; 8005904 <pulse_posedge_handler+0x1b4>
 8005774:	ee30 0a08 	vadd.f32	s0, s0, s16
 8005778:	4b63      	ldr	r3, [pc, #396]	; (8005908 <pulse_posedge_handler+0x1b8>)
 800577a:	ed83 0a00 	vstr	s0, [r3]
		imu_roll = imu_get_roll() + 0;
 800577e:	f7fb fb97 	bl	8000eb0 <imu_get_roll>
 8005782:	ee30 0a08 	vadd.f32	s0, s0, s16
 8005786:	4b61      	ldr	r3, [pc, #388]	; (800590c <pulse_posedge_handler+0x1bc>)
 8005788:	ed83 0a00 	vstr	s0, [r3]
		imu_yaw = imu_get_yaw() + 0;
 800578c:	f7fb fb9c 	bl	8000ec8 <imu_get_yaw>
 8005790:	ee30 0a08 	vadd.f32	s0, s0, s16
 8005794:	4b5e      	ldr	r3, [pc, #376]	; (8005910 <pulse_posedge_handler+0x1c0>)
 8005796:	ed83 0a00 	vstr	s0, [r3]
		imu_updateCompass();
 800579a:	f7fb fc1f 	bl	8000fdc <imu_updateCompass>
		imu_heading = imu_computeCompassHeading();
 800579e:	f7fb fdb3 	bl	8001308 <imu_computeCompassHeading>
 80057a2:	4b5c      	ldr	r3, [pc, #368]	; (8005914 <pulse_posedge_handler+0x1c4>)
 80057a4:	ed83 0a00 	vstr	s0, [r3]
		if (airmode) {
 80057a8:	4b5b      	ldr	r3, [pc, #364]	; (8005918 <pulse_posedge_handler+0x1c8>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8098 	beq.w	80058e2 <pulse_posedge_handler+0x192>
			pid_output_pitch = pid_calculate_pitch(imu_pitch, 0,
 80057b2:	4b5a      	ldr	r3, [pc, #360]	; (800591c <pulse_posedge_handler+0x1cc>)
 80057b4:	edd3 0a00 	vldr	s1, [r3]
 80057b8:	2000      	movs	r0, #0
 80057ba:	4b53      	ldr	r3, [pc, #332]	; (8005908 <pulse_posedge_handler+0x1b8>)
 80057bc:	ed93 0a00 	vldr	s0, [r3]
 80057c0:	f7fb fef0 	bl	80015a4 <pid_calculate_pitch>
 80057c4:	4b56      	ldr	r3, [pc, #344]	; (8005920 <pulse_posedge_handler+0x1d0>)
 80057c6:	ed83 0a00 	vstr	s0, [r3]
			pid_output_roll = pid_calculate_roll(imu_roll, 0, roll_setpoint);
 80057ca:	4b56      	ldr	r3, [pc, #344]	; (8005924 <pulse_posedge_handler+0x1d4>)
 80057cc:	edd3 0a00 	vldr	s1, [r3]
 80057d0:	2000      	movs	r0, #0
 80057d2:	4b4e      	ldr	r3, [pc, #312]	; (800590c <pulse_posedge_handler+0x1bc>)
 80057d4:	ed93 0a00 	vldr	s0, [r3]
 80057d8:	f7fb fe66 	bl	80014a8 <pid_calculate_roll>
 80057dc:	4b52      	ldr	r3, [pc, #328]	; (8005928 <pulse_posedge_handler+0x1d8>)
 80057de:	ed83 0a00 	vstr	s0, [r3]
		esc1_total = throttle - (int) pid_output_roll - (int) pid_output_pitch;
 80057e2:	4b52      	ldr	r3, [pc, #328]	; (800592c <pulse_posedge_handler+0x1dc>)
 80057e4:	6818      	ldr	r0, [r3, #0]
 80057e6:	4b50      	ldr	r3, [pc, #320]	; (8005928 <pulse_posedge_handler+0x1d8>)
 80057e8:	edd3 7a00 	vldr	s15, [r3]
 80057ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057f0:	ee17 1a90 	vmov	r1, s15
 80057f4:	1a42      	subs	r2, r0, r1
 80057f6:	4b4a      	ldr	r3, [pc, #296]	; (8005920 <pulse_posedge_handler+0x1d0>)
 80057f8:	edd3 7a00 	vldr	s15, [r3]
 80057fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005800:	ee17 3a90 	vmov	r3, s15
 8005804:	1ad4      	subs	r4, r2, r3
 8005806:	4d4a      	ldr	r5, [pc, #296]	; (8005930 <pulse_posedge_handler+0x1e0>)
 8005808:	602c      	str	r4, [r5, #0]
		esc2_total = throttle - (int) pid_output_roll + (int) pid_output_pitch;
 800580a:	441a      	add	r2, r3
 800580c:	4d49      	ldr	r5, [pc, #292]	; (8005934 <pulse_posedge_handler+0x1e4>)
 800580e:	602a      	str	r2, [r5, #0]
		esc3_total = (throttle) + (int) pid_output_roll
 8005810:	4401      	add	r1, r0
				- (int) pid_output_pitch;
 8005812:	1ac8      	subs	r0, r1, r3
		esc3_total = (throttle) + (int) pid_output_roll
 8005814:	4d48      	ldr	r5, [pc, #288]	; (8005938 <pulse_posedge_handler+0x1e8>)
 8005816:	6028      	str	r0, [r5, #0]
				+ (int) pid_output_pitch;
 8005818:	440b      	add	r3, r1
		esc4_total = (throttle) + (int) pid_output_roll
 800581a:	4948      	ldr	r1, [pc, #288]	; (800593c <pulse_posedge_handler+0x1ec>)
 800581c:	600b      	str	r3, [r1, #0]
		if (esc1_total < ESC_MIN) {
 800581e:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8005822:	428c      	cmp	r4, r1
 8005824:	dc03      	bgt.n	800582e <pulse_posedge_handler+0xde>
			esc1_total = ESC_MIN;
 8005826:	4942      	ldr	r1, [pc, #264]	; (8005930 <pulse_posedge_handler+0x1e0>)
 8005828:	f240 44e2 	movw	r4, #1250	; 0x4e2
 800582c:	600c      	str	r4, [r1, #0]
		if (esc1_total > ESC_MAX) {
 800582e:	4940      	ldr	r1, [pc, #256]	; (8005930 <pulse_posedge_handler+0x1e0>)
 8005830:	680c      	ldr	r4, [r1, #0]
 8005832:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8005836:	428c      	cmp	r4, r1
 8005838:	dd03      	ble.n	8005842 <pulse_posedge_handler+0xf2>
			esc1_total = ESC_MAX;
 800583a:	493d      	ldr	r1, [pc, #244]	; (8005930 <pulse_posedge_handler+0x1e0>)
 800583c:	f640 14c4 	movw	r4, #2500	; 0x9c4
 8005840:	600c      	str	r4, [r1, #0]
		if (esc2_total < ESC_MIN) {
 8005842:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8005846:	428a      	cmp	r2, r1
 8005848:	dc03      	bgt.n	8005852 <pulse_posedge_handler+0x102>
			esc2_total = ESC_MIN;
 800584a:	4a3a      	ldr	r2, [pc, #232]	; (8005934 <pulse_posedge_handler+0x1e4>)
 800584c:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8005850:	6011      	str	r1, [r2, #0]
		if (esc2_total > ESC_MAX) {
 8005852:	4a38      	ldr	r2, [pc, #224]	; (8005934 <pulse_posedge_handler+0x1e4>)
 8005854:	6811      	ldr	r1, [r2, #0]
 8005856:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800585a:	4291      	cmp	r1, r2
 800585c:	dd03      	ble.n	8005866 <pulse_posedge_handler+0x116>
			esc2_total = ESC_MAX;
 800585e:	4a35      	ldr	r2, [pc, #212]	; (8005934 <pulse_posedge_handler+0x1e4>)
 8005860:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8005864:	6011      	str	r1, [r2, #0]
		if (esc3_total < ESC_MIN) {
 8005866:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800586a:	4290      	cmp	r0, r2
 800586c:	dc03      	bgt.n	8005876 <pulse_posedge_handler+0x126>
			esc3_total = ESC_MIN;
 800586e:	4a32      	ldr	r2, [pc, #200]	; (8005938 <pulse_posedge_handler+0x1e8>)
 8005870:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8005874:	6011      	str	r1, [r2, #0]
		if (esc3_total > ESC_MAX) {
 8005876:	4a30      	ldr	r2, [pc, #192]	; (8005938 <pulse_posedge_handler+0x1e8>)
 8005878:	6811      	ldr	r1, [r2, #0]
 800587a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800587e:	4291      	cmp	r1, r2
 8005880:	dd03      	ble.n	800588a <pulse_posedge_handler+0x13a>
			esc3_total = ESC_MAX;
 8005882:	4a2d      	ldr	r2, [pc, #180]	; (8005938 <pulse_posedge_handler+0x1e8>)
 8005884:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8005888:	6011      	str	r1, [r2, #0]
		if (esc4_total < ESC_MIN) {
 800588a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800588e:	4293      	cmp	r3, r2
 8005890:	dc03      	bgt.n	800589a <pulse_posedge_handler+0x14a>
			esc4_total = ESC_MIN;
 8005892:	4b2a      	ldr	r3, [pc, #168]	; (800593c <pulse_posedge_handler+0x1ec>)
 8005894:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8005898:	601a      	str	r2, [r3, #0]
		if (esc4_total > ESC_MAX) {
 800589a:	4b28      	ldr	r3, [pc, #160]	; (800593c <pulse_posedge_handler+0x1ec>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80058a2:	429a      	cmp	r2, r3
 80058a4:	dd03      	ble.n	80058ae <pulse_posedge_handler+0x15e>
			esc4_total = ESC_MAX;
 80058a6:	4b25      	ldr	r3, [pc, #148]	; (800593c <pulse_posedge_handler+0x1ec>)
 80058a8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80058ac:	601a      	str	r2, [r3, #0]
		PWM1_Set(esc1_total); //PWM1 = Back left, CW
 80058ae:	4b20      	ldr	r3, [pc, #128]	; (8005930 <pulse_posedge_handler+0x1e0>)
 80058b0:	8818      	ldrh	r0, [r3, #0]
 80058b2:	f7ff fecb 	bl	800564c <PWM1_Set>
		PWM2_Set(esc2_total); //PWM2 = Front left, CCW
 80058b6:	4b1f      	ldr	r3, [pc, #124]	; (8005934 <pulse_posedge_handler+0x1e4>)
 80058b8:	8818      	ldrh	r0, [r3, #0]
 80058ba:	f7ff fecd 	bl	8005658 <PWM2_Set>
		PWM3_Set(esc3_total); //PWM3 = Back right, CCW
 80058be:	4b1e      	ldr	r3, [pc, #120]	; (8005938 <pulse_posedge_handler+0x1e8>)
 80058c0:	8818      	ldrh	r0, [r3, #0]
 80058c2:	f7ff fecf 	bl	8005664 <PWM3_Set>
		PWM4_Set(esc4_total); //PWM4 = Front right, CW
 80058c6:	4b1d      	ldr	r3, [pc, #116]	; (800593c <pulse_posedge_handler+0x1ec>)
 80058c8:	8818      	ldrh	r0, [r3, #0]
 80058ca:	f7ff fed1 	bl	8005670 <PWM4_Set>
}
 80058ce:	e745      	b.n	800575c <pulse_posedge_handler+0xc>
		    if ( imu_dmpUpdateFifo() == INV_SUCCESS)
 80058d0:	f7fb fbb0 	bl	8001034 <imu_dmpUpdateFifo>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	f47f af49 	bne.w	800576c <pulse_posedge_handler+0x1c>
		      imu_computeEulerAngles(1);
 80058da:	2001      	movs	r0, #1
 80058dc:	f7fb fc38 	bl	8001150 <imu_computeEulerAngles>
 80058e0:	e744      	b.n	800576c <pulse_posedge_handler+0x1c>
			pid_output_roll = 0;
 80058e2:	2300      	movs	r3, #0
 80058e4:	4a10      	ldr	r2, [pc, #64]	; (8005928 <pulse_posedge_handler+0x1d8>)
 80058e6:	6013      	str	r3, [r2, #0]
			pid_output_pitch = 0;
 80058e8:	4a0d      	ldr	r2, [pc, #52]	; (8005920 <pulse_posedge_handler+0x1d0>)
 80058ea:	6013      	str	r3, [r2, #0]
			pid_output_yaw = 0;
 80058ec:	4a14      	ldr	r2, [pc, #80]	; (8005940 <pulse_posedge_handler+0x1f0>)
 80058ee:	6013      	str	r3, [r2, #0]
			reset_pid_roll();
 80058f0:	f7fb fe46 	bl	8001580 <reset_pid_roll>
			reset_pid_pitch();
 80058f4:	f7fb fec2 	bl	800167c <reset_pid_pitch>
			reset_pid_yaw();
 80058f8:	f7fb fed2 	bl	80016a0 <reset_pid_yaw>
 80058fc:	e771      	b.n	80057e2 <pulse_posedge_handler+0x92>
 80058fe:	bf00      	nop
 8005900:	20000294 	.word	0x20000294
 8005904:	00000000 	.word	0x00000000
 8005908:	20000538 	.word	0x20000538
 800590c:	20000534 	.word	0x20000534
 8005910:	200003e8 	.word	0x200003e8
 8005914:	200003ec 	.word	0x200003ec
 8005918:	20000280 	.word	0x20000280
 800591c:	200002a4 	.word	0x200002a4
 8005920:	20000298 	.word	0x20000298
 8005924:	200002a8 	.word	0x200002a8
 8005928:	2000029c 	.word	0x2000029c
 800592c:	200002ac 	.word	0x200002ac
 8005930:	20000284 	.word	0x20000284
 8005934:	20000288 	.word	0x20000288
 8005938:	2000028c 	.word	0x2000028c
 800593c:	20000290 	.word	0x20000290
 8005940:	200002a0 	.word	0x200002a0

08005944 <HAL_GPIO_EXTI_Callback>:

//GPIO interrupt callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

//GPIO pin configured to capture rising edge interrupt of PWM signals
	if (GPIO_Pin == PWM_RE_INT_Pin && main_loop) {
 8005944:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8005948:	d000      	beq.n	800594c <HAL_GPIO_EXTI_Callback+0x8>
 800594a:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800594c:	b508      	push	{r3, lr}
	if (GPIO_Pin == PWM_RE_INT_Pin && main_loop) {
 800594e:	4b03      	ldr	r3, [pc, #12]	; (800595c <HAL_GPIO_EXTI_Callback+0x18>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	b903      	cbnz	r3, 8005956 <HAL_GPIO_EXTI_Callback+0x12>

	if (GPIO_Pin == kill_Pin && main_loop) {
		//kill();
	}

}
 8005954:	bd08      	pop	{r3, pc}
		pulse_posedge_handler();
 8005956:	f7ff fefb 	bl	8005750 <pulse_posedge_handler>
}
 800595a:	e7fb      	b.n	8005954 <HAL_GPIO_EXTI_Callback+0x10>
 800595c:	20000294 	.word	0x20000294

08005960 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005960:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005962:	2100      	movs	r1, #0
 8005964:	9100      	str	r1, [sp, #0]
 8005966:	4b0b      	ldr	r3, [pc, #44]	; (8005994 <HAL_MspInit+0x34>)
 8005968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800596a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800596e:	645a      	str	r2, [r3, #68]	; 0x44
 8005970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005972:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005976:	9200      	str	r2, [sp, #0]
 8005978:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800597a:	9101      	str	r1, [sp, #4]
 800597c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800597e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005982:	641a      	str	r2, [r3, #64]	; 0x40
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800598a:	9301      	str	r3, [sp, #4]
 800598c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800598e:	b002      	add	sp, #8
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40023800 	.word	0x40023800

08005998 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005998:	b500      	push	{lr}
 800599a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800599c:	2300      	movs	r3, #0
 800599e:	9303      	str	r3, [sp, #12]
 80059a0:	9304      	str	r3, [sp, #16]
 80059a2:	9305      	str	r3, [sp, #20]
 80059a4:	9306      	str	r3, [sp, #24]
 80059a6:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80059a8:	6802      	ldr	r2, [r0, #0]
 80059aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059ae:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d002      	beq.n	80059bc <HAL_ADC_MspInit+0x24>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80059b6:	b009      	add	sp, #36	; 0x24
 80059b8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 80059bc:	2100      	movs	r1, #0
 80059be:	9101      	str	r1, [sp, #4]
 80059c0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80059c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059ca:	645a      	str	r2, [r3, #68]	; 0x44
 80059cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ce:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80059d2:	9201      	str	r2, [sp, #4]
 80059d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059d6:	9102      	str	r1, [sp, #8]
 80059d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059da:	f042 0201 	orr.w	r2, r2, #1
 80059de:	631a      	str	r2, [r3, #48]	; 0x30
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	9302      	str	r3, [sp, #8]
 80059e8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80059ea:	2380      	movs	r3, #128	; 0x80
 80059ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059ee:	2303      	movs	r3, #3
 80059f0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059f2:	a903      	add	r1, sp, #12
 80059f4:	4801      	ldr	r0, [pc, #4]	; (80059fc <HAL_ADC_MspInit+0x64>)
 80059f6:	f7fc f8cd 	bl	8001b94 <HAL_GPIO_Init>
}
 80059fa:	e7dc      	b.n	80059b6 <HAL_ADC_MspInit+0x1e>
 80059fc:	40020000 	.word	0x40020000

08005a00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a04:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a06:	2300      	movs	r3, #0
 8005a08:	9303      	str	r3, [sp, #12]
 8005a0a:	9304      	str	r3, [sp, #16]
 8005a0c:	9305      	str	r3, [sp, #20]
 8005a0e:	9306      	str	r3, [sp, #24]
 8005a10:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 8005a12:	6802      	ldr	r2, [r0, #0]
 8005a14:	4b1e      	ldr	r3, [pc, #120]	; (8005a90 <HAL_I2C_MspInit+0x90>)
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d002      	beq.n	8005a20 <HAL_I2C_MspInit+0x20>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005a1a:	b009      	add	sp, #36	; 0x24
 8005a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a20:	2500      	movs	r5, #0
 8005a22:	9501      	str	r5, [sp, #4]
 8005a24:	4c1b      	ldr	r4, [pc, #108]	; (8005a94 <HAL_I2C_MspInit+0x94>)
 8005a26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a28:	f043 0302 	orr.w	r3, r3, #2
 8005a2c:	6323      	str	r3, [r4, #48]	; 0x30
 8005a2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	9301      	str	r3, [sp, #4]
 8005a36:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a3c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a3e:	f04f 0912 	mov.w	r9, #18
 8005a42:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a46:	f04f 0801 	mov.w	r8, #1
 8005a4a:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a4e:	2703      	movs	r7, #3
 8005a50:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005a52:	2304      	movs	r3, #4
 8005a54:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a56:	4e10      	ldr	r6, [pc, #64]	; (8005a98 <HAL_I2C_MspInit+0x98>)
 8005a58:	a903      	add	r1, sp, #12
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	f7fc f89a 	bl	8001b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005a60:	2308      	movs	r3, #8
 8005a62:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a64:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a68:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a6c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8005a6e:	2309      	movs	r3, #9
 8005a70:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a72:	a903      	add	r1, sp, #12
 8005a74:	4630      	mov	r0, r6
 8005a76:	f7fc f88d 	bl	8001b94 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005a7a:	9502      	str	r5, [sp, #8]
 8005a7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a82:	6423      	str	r3, [r4, #64]	; 0x40
 8005a84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a8a:	9302      	str	r3, [sp, #8]
 8005a8c:	9b02      	ldr	r3, [sp, #8]
}
 8005a8e:	e7c4      	b.n	8005a1a <HAL_I2C_MspInit+0x1a>
 8005a90:	40005800 	.word	0x40005800
 8005a94:	40023800 	.word	0x40023800
 8005a98:	40020400 	.word	0x40020400

08005a9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a9e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	9303      	str	r3, [sp, #12]
 8005aa4:	9304      	str	r3, [sp, #16]
 8005aa6:	9305      	str	r3, [sp, #20]
 8005aa8:	9306      	str	r3, [sp, #24]
 8005aaa:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 8005aac:	6802      	ldr	r2, [r0, #0]
 8005aae:	4b1f      	ldr	r3, [pc, #124]	; (8005b2c <HAL_SPI_MspInit+0x90>)
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d001      	beq.n	8005ab8 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005ab4:	b009      	add	sp, #36	; 0x24
 8005ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005ab8:	2400      	movs	r4, #0
 8005aba:	9400      	str	r4, [sp, #0]
 8005abc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ac2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ac6:	641a      	str	r2, [r3, #64]	; 0x40
 8005ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aca:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005ace:	9200      	str	r2, [sp, #0]
 8005ad0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ad2:	9401      	str	r4, [sp, #4]
 8005ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ad6:	f042 0204 	orr.w	r2, r2, #4
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30
 8005adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ade:	f002 0204 	and.w	r2, r2, #4
 8005ae2:	9201      	str	r2, [sp, #4]
 8005ae4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ae6:	9402      	str	r4, [sp, #8]
 8005ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aea:	f042 0202 	orr.w	r2, r2, #2
 8005aee:	631a      	str	r2, [r3, #48]	; 0x30
 8005af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	9302      	str	r3, [sp, #8]
 8005af8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005afa:	2304      	movs	r3, #4
 8005afc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005afe:	2702      	movs	r7, #2
 8005b00:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b02:	2603      	movs	r6, #3
 8005b04:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005b06:	2505      	movs	r5, #5
 8005b08:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b0a:	a903      	add	r1, sp, #12
 8005b0c:	4808      	ldr	r0, [pc, #32]	; (8005b30 <HAL_SPI_MspInit+0x94>)
 8005b0e:	f7fc f841 	bl	8001b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005b12:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005b16:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b18:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b1a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b1c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005b1e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b20:	a903      	add	r1, sp, #12
 8005b22:	4804      	ldr	r0, [pc, #16]	; (8005b34 <HAL_SPI_MspInit+0x98>)
 8005b24:	f7fc f836 	bl	8001b94 <HAL_GPIO_Init>
}
 8005b28:	e7c4      	b.n	8005ab4 <HAL_SPI_MspInit+0x18>
 8005b2a:	bf00      	nop
 8005b2c:	40003800 	.word	0x40003800
 8005b30:	40020800 	.word	0x40020800
 8005b34:	40020400 	.word	0x40020400

08005b38 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM4)
 8005b38:	6802      	ldr	r2, [r0, #0]
 8005b3a:	4b09      	ldr	r3, [pc, #36]	; (8005b60 <HAL_TIM_PWM_MspInit+0x28>)
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d000      	beq.n	8005b42 <HAL_TIM_PWM_MspInit+0xa>
 8005b40:	4770      	bx	lr
{
 8005b42:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005b44:	2300      	movs	r3, #0
 8005b46:	9301      	str	r3, [sp, #4]
 8005b48:	4b06      	ldr	r3, [pc, #24]	; (8005b64 <HAL_TIM_PWM_MspInit+0x2c>)
 8005b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b4c:	f042 0204 	orr.w	r2, r2, #4
 8005b50:	641a      	str	r2, [r3, #64]	; 0x40
 8005b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	9301      	str	r3, [sp, #4]
 8005b5a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005b5c:	b002      	add	sp, #8
 8005b5e:	4770      	bx	lr
 8005b60:	40000800 	.word	0x40000800
 8005b64:	40023800 	.word	0x40023800

08005b68 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 8005b68:	6802      	ldr	r2, [r0, #0]
 8005b6a:	4b09      	ldr	r3, [pc, #36]	; (8005b90 <HAL_TIM_Base_MspInit+0x28>)
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d000      	beq.n	8005b72 <HAL_TIM_Base_MspInit+0xa>
 8005b70:	4770      	bx	lr
{
 8005b72:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005b74:	2300      	movs	r3, #0
 8005b76:	9301      	str	r3, [sp, #4]
 8005b78:	4b06      	ldr	r3, [pc, #24]	; (8005b94 <HAL_TIM_Base_MspInit+0x2c>)
 8005b7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b7c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005b80:	645a      	str	r2, [r3, #68]	; 0x44
 8005b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b88:	9301      	str	r3, [sp, #4]
 8005b8a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8005b8c:	b002      	add	sp, #8
 8005b8e:	4770      	bx	lr
 8005b90:	40014800 	.word	0x40014800
 8005b94:	40023800 	.word	0x40023800

08005b98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005b98:	b500      	push	{lr}
 8005b9a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	9301      	str	r3, [sp, #4]
 8005ba0:	9302      	str	r3, [sp, #8]
 8005ba2:	9303      	str	r3, [sp, #12]
 8005ba4:	9304      	str	r3, [sp, #16]
 8005ba6:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 8005ba8:	6802      	ldr	r2, [r0, #0]
 8005baa:	4b0e      	ldr	r3, [pc, #56]	; (8005be4 <HAL_TIM_MspPostInit+0x4c>)
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d002      	beq.n	8005bb6 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005bb0:	b007      	add	sp, #28
 8005bb2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <HAL_TIM_MspPostInit+0x50>)
 8005bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bbe:	f042 0202 	orr.w	r2, r2, #2
 8005bc2:	631a      	str	r2, [r3, #48]	; 0x30
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005bce:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005bd2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005bd8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bda:	a901      	add	r1, sp, #4
 8005bdc:	4803      	ldr	r0, [pc, #12]	; (8005bec <HAL_TIM_MspPostInit+0x54>)
 8005bde:	f7fb ffd9 	bl	8001b94 <HAL_GPIO_Init>
}
 8005be2:	e7e5      	b.n	8005bb0 <HAL_TIM_MspPostInit+0x18>
 8005be4:	40000800 	.word	0x40000800
 8005be8:	40023800 	.word	0x40023800
 8005bec:	40020400 	.word	0x40020400

08005bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005bf0:	b500      	push	{lr}
 8005bf2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	9305      	str	r3, [sp, #20]
 8005bf8:	9306      	str	r3, [sp, #24]
 8005bfa:	9307      	str	r3, [sp, #28]
 8005bfc:	9308      	str	r3, [sp, #32]
 8005bfe:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART2)
 8005c00:	6803      	ldr	r3, [r0, #0]
 8005c02:	4a29      	ldr	r2, [pc, #164]	; (8005ca8 <HAL_UART_MspInit+0xb8>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d005      	beq.n	8005c14 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8005c08:	4a28      	ldr	r2, [pc, #160]	; (8005cac <HAL_UART_MspInit+0xbc>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d027      	beq.n	8005c5e <HAL_UART_MspInit+0x6e>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005c0e:	b00b      	add	sp, #44	; 0x2c
 8005c10:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c14:	2100      	movs	r1, #0
 8005c16:	9101      	str	r1, [sp, #4]
 8005c18:	4b25      	ldr	r3, [pc, #148]	; (8005cb0 <HAL_UART_MspInit+0xc0>)
 8005c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c1c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005c20:	641a      	str	r2, [r3, #64]	; 0x40
 8005c22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c24:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005c28:	9201      	str	r2, [sp, #4]
 8005c2a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c2c:	9102      	str	r1, [sp, #8]
 8005c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c30:	f042 0201 	orr.w	r2, r2, #1
 8005c34:	631a      	str	r2, [r3, #48]	; 0x30
 8005c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	9302      	str	r3, [sp, #8]
 8005c3e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005c40:	230c      	movs	r3, #12
 8005c42:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c44:	2302      	movs	r3, #2
 8005c46:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005c50:	2307      	movs	r3, #7
 8005c52:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c54:	a905      	add	r1, sp, #20
 8005c56:	4817      	ldr	r0, [pc, #92]	; (8005cb4 <HAL_UART_MspInit+0xc4>)
 8005c58:	f7fb ff9c 	bl	8001b94 <HAL_GPIO_Init>
 8005c5c:	e7d7      	b.n	8005c0e <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005c5e:	2100      	movs	r1, #0
 8005c60:	9103      	str	r1, [sp, #12]
 8005c62:	4b13      	ldr	r3, [pc, #76]	; (8005cb0 <HAL_UART_MspInit+0xc0>)
 8005c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c66:	f042 0220 	orr.w	r2, r2, #32
 8005c6a:	645a      	str	r2, [r3, #68]	; 0x44
 8005c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c6e:	f002 0220 	and.w	r2, r2, #32
 8005c72:	9203      	str	r2, [sp, #12]
 8005c74:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c76:	9104      	str	r1, [sp, #16]
 8005c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c7a:	f042 0204 	orr.w	r2, r2, #4
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30
 8005c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	9304      	str	r3, [sp, #16]
 8005c88:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005c8a:	23c0      	movs	r3, #192	; 0xc0
 8005c8c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c8e:	2302      	movs	r3, #2
 8005c90:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c92:	2301      	movs	r3, #1
 8005c94:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c96:	2303      	movs	r3, #3
 8005c98:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005c9a:	2308      	movs	r3, #8
 8005c9c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c9e:	a905      	add	r1, sp, #20
 8005ca0:	4805      	ldr	r0, [pc, #20]	; (8005cb8 <HAL_UART_MspInit+0xc8>)
 8005ca2:	f7fb ff77 	bl	8001b94 <HAL_GPIO_Init>
}
 8005ca6:	e7b2      	b.n	8005c0e <HAL_UART_MspInit+0x1e>
 8005ca8:	40004400 	.word	0x40004400
 8005cac:	40011400 	.word	0x40011400
 8005cb0:	40023800 	.word	0x40023800
 8005cb4:	40020000 	.word	0x40020000
 8005cb8:	40020800 	.word	0x40020800

08005cbc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005cbc:	4770      	bx	lr

08005cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cbe:	e7fe      	b.n	8005cbe <HardFault_Handler>

08005cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005cc0:	e7fe      	b.n	8005cc0 <MemManage_Handler>

08005cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005cc2:	e7fe      	b.n	8005cc2 <BusFault_Handler>

08005cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005cc4:	e7fe      	b.n	8005cc4 <UsageFault_Handler>

08005cc6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005cc6:	4770      	bx	lr

08005cc8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005cc8:	4770      	bx	lr

08005cca <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005cca:	4770      	bx	lr

08005ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ccc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005cce:	f7fb fd39 	bl	8001744 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005cd2:	bd08      	pop	{r3, pc}

08005cd4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005cd4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005cd6:	2010      	movs	r0, #16
 8005cd8:	f7fc f83e 	bl	8001d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005cdc:	bd08      	pop	{r3, pc}

08005cde <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005cde:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005ce0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005ce4:	f7fc f838 	bl	8001d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005ce8:	bd08      	pop	{r3, pc}
	...

08005cec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005cec:	b508      	push	{r3, lr}
 8005cee:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005cf0:	4a0b      	ldr	r2, [pc, #44]	; (8005d20 <_sbrk+0x34>)
 8005cf2:	6812      	ldr	r2, [r2, #0]
 8005cf4:	b142      	cbz	r2, 8005d08 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8005cf6:	4a0a      	ldr	r2, [pc, #40]	; (8005d20 <_sbrk+0x34>)
 8005cf8:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8005cfa:	4403      	add	r3, r0
 8005cfc:	466a      	mov	r2, sp
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d806      	bhi.n	8005d10 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8005d02:	4a07      	ldr	r2, [pc, #28]	; (8005d20 <_sbrk+0x34>)
 8005d04:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8005d06:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8005d08:	4a05      	ldr	r2, [pc, #20]	; (8005d20 <_sbrk+0x34>)
 8005d0a:	4906      	ldr	r1, [pc, #24]	; (8005d24 <_sbrk+0x38>)
 8005d0c:	6011      	str	r1, [r2, #0]
 8005d0e:	e7f2      	b.n	8005cf6 <_sbrk+0xa>
		errno = ENOMEM;
 8005d10:	f000 f85a 	bl	8005dc8 <__errno>
 8005d14:	230c      	movs	r3, #12
 8005d16:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d1c:	e7f3      	b.n	8005d06 <_sbrk+0x1a>
 8005d1e:	bf00      	nop
 8005d20:	200002b0 	.word	0x200002b0
 8005d24:	200005e8 	.word	0x200005e8

08005d28 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d28:	490f      	ldr	r1, [pc, #60]	; (8005d68 <SystemInit+0x40>)
 8005d2a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005d2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005d36:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <SystemInit+0x44>)
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	f042 0201 	orr.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005d40:	2000      	movs	r0, #0
 8005d42:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005d4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d4e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005d50:	4a07      	ldr	r2, [pc, #28]	; (8005d70 <SystemInit+0x48>)
 8005d52:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d5a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005d5c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005d5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d62:	608b      	str	r3, [r1, #8]
#endif
}
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	e000ed00 	.word	0xe000ed00
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	24003010 	.word	0x24003010

08005d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005dac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005d78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005d7a:	e003      	b.n	8005d84 <LoopCopyDataInit>

08005d7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005d7c:	4b0c      	ldr	r3, [pc, #48]	; (8005db0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005d7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005d80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005d82:	3104      	adds	r1, #4

08005d84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005d84:	480b      	ldr	r0, [pc, #44]	; (8005db4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005d86:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005d88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005d8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005d8c:	d3f6      	bcc.n	8005d7c <CopyDataInit>
  ldr  r2, =_sbss
 8005d8e:	4a0b      	ldr	r2, [pc, #44]	; (8005dbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005d90:	e002      	b.n	8005d98 <LoopFillZerobss>

08005d92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005d92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005d94:	f842 3b04 	str.w	r3, [r2], #4

08005d98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005d98:	4b09      	ldr	r3, [pc, #36]	; (8005dc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005d9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005d9c:	d3f9      	bcc.n	8005d92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005d9e:	f7ff ffc3 	bl	8005d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005da2:	f000 f817 	bl	8005dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005da6:	f7ff fc69 	bl	800567c <main>
  bx  lr    
 8005daa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005dac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005db0:	080093d0 	.word	0x080093d0
  ldr  r0, =_sdata
 8005db4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005db8:	20000238 	.word	0x20000238
  ldr  r2, =_sbss
 8005dbc:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 8005dc0:	200005e8 	.word	0x200005e8

08005dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005dc4:	e7fe      	b.n	8005dc4 <ADC_IRQHandler>
	...

08005dc8 <__errno>:
 8005dc8:	4b01      	ldr	r3, [pc, #4]	; (8005dd0 <__errno+0x8>)
 8005dca:	6818      	ldr	r0, [r3, #0]
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	20000064 	.word	0x20000064

08005dd4 <__libc_init_array>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	4e0d      	ldr	r6, [pc, #52]	; (8005e0c <__libc_init_array+0x38>)
 8005dd8:	4c0d      	ldr	r4, [pc, #52]	; (8005e10 <__libc_init_array+0x3c>)
 8005dda:	1ba4      	subs	r4, r4, r6
 8005ddc:	10a4      	asrs	r4, r4, #2
 8005dde:	2500      	movs	r5, #0
 8005de0:	42a5      	cmp	r5, r4
 8005de2:	d109      	bne.n	8005df8 <__libc_init_array+0x24>
 8005de4:	4e0b      	ldr	r6, [pc, #44]	; (8005e14 <__libc_init_array+0x40>)
 8005de6:	4c0c      	ldr	r4, [pc, #48]	; (8005e18 <__libc_init_array+0x44>)
 8005de8:	f002 fb06 	bl	80083f8 <_init>
 8005dec:	1ba4      	subs	r4, r4, r6
 8005dee:	10a4      	asrs	r4, r4, #2
 8005df0:	2500      	movs	r5, #0
 8005df2:	42a5      	cmp	r5, r4
 8005df4:	d105      	bne.n	8005e02 <__libc_init_array+0x2e>
 8005df6:	bd70      	pop	{r4, r5, r6, pc}
 8005df8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dfc:	4798      	blx	r3
 8005dfe:	3501      	adds	r5, #1
 8005e00:	e7ee      	b.n	8005de0 <__libc_init_array+0xc>
 8005e02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e06:	4798      	blx	r3
 8005e08:	3501      	adds	r5, #1
 8005e0a:	e7f2      	b.n	8005df2 <__libc_init_array+0x1e>
 8005e0c:	080093c8 	.word	0x080093c8
 8005e10:	080093c8 	.word	0x080093c8
 8005e14:	080093c8 	.word	0x080093c8
 8005e18:	080093cc 	.word	0x080093cc

08005e1c <memcmp>:
 8005e1c:	b530      	push	{r4, r5, lr}
 8005e1e:	2400      	movs	r4, #0
 8005e20:	42a2      	cmp	r2, r4
 8005e22:	d101      	bne.n	8005e28 <memcmp+0xc>
 8005e24:	2000      	movs	r0, #0
 8005e26:	e007      	b.n	8005e38 <memcmp+0x1c>
 8005e28:	5d03      	ldrb	r3, [r0, r4]
 8005e2a:	3401      	adds	r4, #1
 8005e2c:	190d      	adds	r5, r1, r4
 8005e2e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8005e32:	42ab      	cmp	r3, r5
 8005e34:	d0f4      	beq.n	8005e20 <memcmp+0x4>
 8005e36:	1b58      	subs	r0, r3, r5
 8005e38:	bd30      	pop	{r4, r5, pc}

08005e3a <memcpy>:
 8005e3a:	b510      	push	{r4, lr}
 8005e3c:	1e43      	subs	r3, r0, #1
 8005e3e:	440a      	add	r2, r1
 8005e40:	4291      	cmp	r1, r2
 8005e42:	d100      	bne.n	8005e46 <memcpy+0xc>
 8005e44:	bd10      	pop	{r4, pc}
 8005e46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e4e:	e7f7      	b.n	8005e40 <memcpy+0x6>

08005e50 <memset>:
 8005e50:	4402      	add	r2, r0
 8005e52:	4603      	mov	r3, r0
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d100      	bne.n	8005e5a <memset+0xa>
 8005e58:	4770      	bx	lr
 8005e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e5e:	e7f9      	b.n	8005e54 <memset+0x4>

08005e60 <__cvt>:
 8005e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e64:	ec55 4b10 	vmov	r4, r5, d0
 8005e68:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005e6a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e6e:	2d00      	cmp	r5, #0
 8005e70:	460e      	mov	r6, r1
 8005e72:	4691      	mov	r9, r2
 8005e74:	4619      	mov	r1, r3
 8005e76:	bfb8      	it	lt
 8005e78:	4622      	movlt	r2, r4
 8005e7a:	462b      	mov	r3, r5
 8005e7c:	f027 0720 	bic.w	r7, r7, #32
 8005e80:	bfbb      	ittet	lt
 8005e82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e86:	461d      	movlt	r5, r3
 8005e88:	2300      	movge	r3, #0
 8005e8a:	232d      	movlt	r3, #45	; 0x2d
 8005e8c:	bfb8      	it	lt
 8005e8e:	4614      	movlt	r4, r2
 8005e90:	2f46      	cmp	r7, #70	; 0x46
 8005e92:	700b      	strb	r3, [r1, #0]
 8005e94:	d004      	beq.n	8005ea0 <__cvt+0x40>
 8005e96:	2f45      	cmp	r7, #69	; 0x45
 8005e98:	d100      	bne.n	8005e9c <__cvt+0x3c>
 8005e9a:	3601      	adds	r6, #1
 8005e9c:	2102      	movs	r1, #2
 8005e9e:	e000      	b.n	8005ea2 <__cvt+0x42>
 8005ea0:	2103      	movs	r1, #3
 8005ea2:	ab03      	add	r3, sp, #12
 8005ea4:	9301      	str	r3, [sp, #4]
 8005ea6:	ab02      	add	r3, sp, #8
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	4632      	mov	r2, r6
 8005eac:	4653      	mov	r3, sl
 8005eae:	ec45 4b10 	vmov	d0, r4, r5
 8005eb2:	f000 fbad 	bl	8006610 <_dtoa_r>
 8005eb6:	2f47      	cmp	r7, #71	; 0x47
 8005eb8:	4680      	mov	r8, r0
 8005eba:	d102      	bne.n	8005ec2 <__cvt+0x62>
 8005ebc:	f019 0f01 	tst.w	r9, #1
 8005ec0:	d026      	beq.n	8005f10 <__cvt+0xb0>
 8005ec2:	2f46      	cmp	r7, #70	; 0x46
 8005ec4:	eb08 0906 	add.w	r9, r8, r6
 8005ec8:	d111      	bne.n	8005eee <__cvt+0x8e>
 8005eca:	f898 3000 	ldrb.w	r3, [r8]
 8005ece:	2b30      	cmp	r3, #48	; 0x30
 8005ed0:	d10a      	bne.n	8005ee8 <__cvt+0x88>
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	4629      	mov	r1, r5
 8005eda:	f7fa fda1 	bl	8000a20 <__aeabi_dcmpeq>
 8005ede:	b918      	cbnz	r0, 8005ee8 <__cvt+0x88>
 8005ee0:	f1c6 0601 	rsb	r6, r6, #1
 8005ee4:	f8ca 6000 	str.w	r6, [sl]
 8005ee8:	f8da 3000 	ldr.w	r3, [sl]
 8005eec:	4499      	add	r9, r3
 8005eee:	2200      	movs	r2, #0
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	f7fa fd93 	bl	8000a20 <__aeabi_dcmpeq>
 8005efa:	b938      	cbnz	r0, 8005f0c <__cvt+0xac>
 8005efc:	2230      	movs	r2, #48	; 0x30
 8005efe:	9b03      	ldr	r3, [sp, #12]
 8005f00:	454b      	cmp	r3, r9
 8005f02:	d205      	bcs.n	8005f10 <__cvt+0xb0>
 8005f04:	1c59      	adds	r1, r3, #1
 8005f06:	9103      	str	r1, [sp, #12]
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	e7f8      	b.n	8005efe <__cvt+0x9e>
 8005f0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f10:	9b03      	ldr	r3, [sp, #12]
 8005f12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f14:	eba3 0308 	sub.w	r3, r3, r8
 8005f18:	4640      	mov	r0, r8
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	b004      	add	sp, #16
 8005f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005f22 <__exponent>:
 8005f22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f24:	2900      	cmp	r1, #0
 8005f26:	4604      	mov	r4, r0
 8005f28:	bfba      	itte	lt
 8005f2a:	4249      	neglt	r1, r1
 8005f2c:	232d      	movlt	r3, #45	; 0x2d
 8005f2e:	232b      	movge	r3, #43	; 0x2b
 8005f30:	2909      	cmp	r1, #9
 8005f32:	f804 2b02 	strb.w	r2, [r4], #2
 8005f36:	7043      	strb	r3, [r0, #1]
 8005f38:	dd20      	ble.n	8005f7c <__exponent+0x5a>
 8005f3a:	f10d 0307 	add.w	r3, sp, #7
 8005f3e:	461f      	mov	r7, r3
 8005f40:	260a      	movs	r6, #10
 8005f42:	fb91 f5f6 	sdiv	r5, r1, r6
 8005f46:	fb06 1115 	mls	r1, r6, r5, r1
 8005f4a:	3130      	adds	r1, #48	; 0x30
 8005f4c:	2d09      	cmp	r5, #9
 8005f4e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005f52:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005f56:	4629      	mov	r1, r5
 8005f58:	dc09      	bgt.n	8005f6e <__exponent+0x4c>
 8005f5a:	3130      	adds	r1, #48	; 0x30
 8005f5c:	3b02      	subs	r3, #2
 8005f5e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005f62:	42bb      	cmp	r3, r7
 8005f64:	4622      	mov	r2, r4
 8005f66:	d304      	bcc.n	8005f72 <__exponent+0x50>
 8005f68:	1a10      	subs	r0, r2, r0
 8005f6a:	b003      	add	sp, #12
 8005f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f6e:	4613      	mov	r3, r2
 8005f70:	e7e7      	b.n	8005f42 <__exponent+0x20>
 8005f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f76:	f804 2b01 	strb.w	r2, [r4], #1
 8005f7a:	e7f2      	b.n	8005f62 <__exponent+0x40>
 8005f7c:	2330      	movs	r3, #48	; 0x30
 8005f7e:	4419      	add	r1, r3
 8005f80:	7083      	strb	r3, [r0, #2]
 8005f82:	1d02      	adds	r2, r0, #4
 8005f84:	70c1      	strb	r1, [r0, #3]
 8005f86:	e7ef      	b.n	8005f68 <__exponent+0x46>

08005f88 <_printf_float>:
 8005f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8c:	b08d      	sub	sp, #52	; 0x34
 8005f8e:	460c      	mov	r4, r1
 8005f90:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005f94:	4616      	mov	r6, r2
 8005f96:	461f      	mov	r7, r3
 8005f98:	4605      	mov	r5, r0
 8005f9a:	f001 f8f1 	bl	8007180 <_localeconv_r>
 8005f9e:	6803      	ldr	r3, [r0, #0]
 8005fa0:	9304      	str	r3, [sp, #16]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fa ff66 	bl	8000e74 <strlen>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	930a      	str	r3, [sp, #40]	; 0x28
 8005fac:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb0:	9005      	str	r0, [sp, #20]
 8005fb2:	3307      	adds	r3, #7
 8005fb4:	f023 0307 	bic.w	r3, r3, #7
 8005fb8:	f103 0208 	add.w	r2, r3, #8
 8005fbc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005fc0:	f8d4 b000 	ldr.w	fp, [r4]
 8005fc4:	f8c8 2000 	str.w	r2, [r8]
 8005fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fcc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005fd0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005fd4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005fd8:	9307      	str	r3, [sp, #28]
 8005fda:	f8cd 8018 	str.w	r8, [sp, #24]
 8005fde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fe2:	4ba7      	ldr	r3, [pc, #668]	; (8006280 <_printf_float+0x2f8>)
 8005fe4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fe8:	f7fa ff4c 	bl	8000e84 <__aeabi_dcmpun>
 8005fec:	bb70      	cbnz	r0, 800604c <_printf_float+0xc4>
 8005fee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ff2:	4ba3      	ldr	r3, [pc, #652]	; (8006280 <_printf_float+0x2f8>)
 8005ff4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ff8:	f7fa fd26 	bl	8000a48 <__aeabi_dcmple>
 8005ffc:	bb30      	cbnz	r0, 800604c <_printf_float+0xc4>
 8005ffe:	2200      	movs	r2, #0
 8006000:	2300      	movs	r3, #0
 8006002:	4640      	mov	r0, r8
 8006004:	4649      	mov	r1, r9
 8006006:	f7fa fd15 	bl	8000a34 <__aeabi_dcmplt>
 800600a:	b110      	cbz	r0, 8006012 <_printf_float+0x8a>
 800600c:	232d      	movs	r3, #45	; 0x2d
 800600e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006012:	4a9c      	ldr	r2, [pc, #624]	; (8006284 <_printf_float+0x2fc>)
 8006014:	4b9c      	ldr	r3, [pc, #624]	; (8006288 <_printf_float+0x300>)
 8006016:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800601a:	bf8c      	ite	hi
 800601c:	4690      	movhi	r8, r2
 800601e:	4698      	movls	r8, r3
 8006020:	2303      	movs	r3, #3
 8006022:	f02b 0204 	bic.w	r2, fp, #4
 8006026:	6123      	str	r3, [r4, #16]
 8006028:	6022      	str	r2, [r4, #0]
 800602a:	f04f 0900 	mov.w	r9, #0
 800602e:	9700      	str	r7, [sp, #0]
 8006030:	4633      	mov	r3, r6
 8006032:	aa0b      	add	r2, sp, #44	; 0x2c
 8006034:	4621      	mov	r1, r4
 8006036:	4628      	mov	r0, r5
 8006038:	f000 f9e6 	bl	8006408 <_printf_common>
 800603c:	3001      	adds	r0, #1
 800603e:	f040 808d 	bne.w	800615c <_printf_float+0x1d4>
 8006042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006046:	b00d      	add	sp, #52	; 0x34
 8006048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800604c:	4642      	mov	r2, r8
 800604e:	464b      	mov	r3, r9
 8006050:	4640      	mov	r0, r8
 8006052:	4649      	mov	r1, r9
 8006054:	f7fa ff16 	bl	8000e84 <__aeabi_dcmpun>
 8006058:	b110      	cbz	r0, 8006060 <_printf_float+0xd8>
 800605a:	4a8c      	ldr	r2, [pc, #560]	; (800628c <_printf_float+0x304>)
 800605c:	4b8c      	ldr	r3, [pc, #560]	; (8006290 <_printf_float+0x308>)
 800605e:	e7da      	b.n	8006016 <_printf_float+0x8e>
 8006060:	6861      	ldr	r1, [r4, #4]
 8006062:	1c4b      	adds	r3, r1, #1
 8006064:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006068:	a80a      	add	r0, sp, #40	; 0x28
 800606a:	d13e      	bne.n	80060ea <_printf_float+0x162>
 800606c:	2306      	movs	r3, #6
 800606e:	6063      	str	r3, [r4, #4]
 8006070:	2300      	movs	r3, #0
 8006072:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006076:	ab09      	add	r3, sp, #36	; 0x24
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	ec49 8b10 	vmov	d0, r8, r9
 800607e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006082:	6022      	str	r2, [r4, #0]
 8006084:	f8cd a004 	str.w	sl, [sp, #4]
 8006088:	6861      	ldr	r1, [r4, #4]
 800608a:	4628      	mov	r0, r5
 800608c:	f7ff fee8 	bl	8005e60 <__cvt>
 8006090:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006094:	2b47      	cmp	r3, #71	; 0x47
 8006096:	4680      	mov	r8, r0
 8006098:	d109      	bne.n	80060ae <_printf_float+0x126>
 800609a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800609c:	1cd8      	adds	r0, r3, #3
 800609e:	db02      	blt.n	80060a6 <_printf_float+0x11e>
 80060a0:	6862      	ldr	r2, [r4, #4]
 80060a2:	4293      	cmp	r3, r2
 80060a4:	dd47      	ble.n	8006136 <_printf_float+0x1ae>
 80060a6:	f1aa 0a02 	sub.w	sl, sl, #2
 80060aa:	fa5f fa8a 	uxtb.w	sl, sl
 80060ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80060b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060b4:	d824      	bhi.n	8006100 <_printf_float+0x178>
 80060b6:	3901      	subs	r1, #1
 80060b8:	4652      	mov	r2, sl
 80060ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060be:	9109      	str	r1, [sp, #36]	; 0x24
 80060c0:	f7ff ff2f 	bl	8005f22 <__exponent>
 80060c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060c6:	1813      	adds	r3, r2, r0
 80060c8:	2a01      	cmp	r2, #1
 80060ca:	4681      	mov	r9, r0
 80060cc:	6123      	str	r3, [r4, #16]
 80060ce:	dc02      	bgt.n	80060d6 <_printf_float+0x14e>
 80060d0:	6822      	ldr	r2, [r4, #0]
 80060d2:	07d1      	lsls	r1, r2, #31
 80060d4:	d501      	bpl.n	80060da <_printf_float+0x152>
 80060d6:	3301      	adds	r3, #1
 80060d8:	6123      	str	r3, [r4, #16]
 80060da:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0a5      	beq.n	800602e <_printf_float+0xa6>
 80060e2:	232d      	movs	r3, #45	; 0x2d
 80060e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060e8:	e7a1      	b.n	800602e <_printf_float+0xa6>
 80060ea:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80060ee:	f000 8177 	beq.w	80063e0 <_printf_float+0x458>
 80060f2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80060f6:	d1bb      	bne.n	8006070 <_printf_float+0xe8>
 80060f8:	2900      	cmp	r1, #0
 80060fa:	d1b9      	bne.n	8006070 <_printf_float+0xe8>
 80060fc:	2301      	movs	r3, #1
 80060fe:	e7b6      	b.n	800606e <_printf_float+0xe6>
 8006100:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006104:	d119      	bne.n	800613a <_printf_float+0x1b2>
 8006106:	2900      	cmp	r1, #0
 8006108:	6863      	ldr	r3, [r4, #4]
 800610a:	dd0c      	ble.n	8006126 <_printf_float+0x19e>
 800610c:	6121      	str	r1, [r4, #16]
 800610e:	b913      	cbnz	r3, 8006116 <_printf_float+0x18e>
 8006110:	6822      	ldr	r2, [r4, #0]
 8006112:	07d2      	lsls	r2, r2, #31
 8006114:	d502      	bpl.n	800611c <_printf_float+0x194>
 8006116:	3301      	adds	r3, #1
 8006118:	440b      	add	r3, r1
 800611a:	6123      	str	r3, [r4, #16]
 800611c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800611e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006120:	f04f 0900 	mov.w	r9, #0
 8006124:	e7d9      	b.n	80060da <_printf_float+0x152>
 8006126:	b913      	cbnz	r3, 800612e <_printf_float+0x1a6>
 8006128:	6822      	ldr	r2, [r4, #0]
 800612a:	07d0      	lsls	r0, r2, #31
 800612c:	d501      	bpl.n	8006132 <_printf_float+0x1aa>
 800612e:	3302      	adds	r3, #2
 8006130:	e7f3      	b.n	800611a <_printf_float+0x192>
 8006132:	2301      	movs	r3, #1
 8006134:	e7f1      	b.n	800611a <_printf_float+0x192>
 8006136:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800613a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800613e:	4293      	cmp	r3, r2
 8006140:	db05      	blt.n	800614e <_printf_float+0x1c6>
 8006142:	6822      	ldr	r2, [r4, #0]
 8006144:	6123      	str	r3, [r4, #16]
 8006146:	07d1      	lsls	r1, r2, #31
 8006148:	d5e8      	bpl.n	800611c <_printf_float+0x194>
 800614a:	3301      	adds	r3, #1
 800614c:	e7e5      	b.n	800611a <_printf_float+0x192>
 800614e:	2b00      	cmp	r3, #0
 8006150:	bfd4      	ite	le
 8006152:	f1c3 0302 	rsble	r3, r3, #2
 8006156:	2301      	movgt	r3, #1
 8006158:	4413      	add	r3, r2
 800615a:	e7de      	b.n	800611a <_printf_float+0x192>
 800615c:	6823      	ldr	r3, [r4, #0]
 800615e:	055a      	lsls	r2, r3, #21
 8006160:	d407      	bmi.n	8006172 <_printf_float+0x1ea>
 8006162:	6923      	ldr	r3, [r4, #16]
 8006164:	4642      	mov	r2, r8
 8006166:	4631      	mov	r1, r6
 8006168:	4628      	mov	r0, r5
 800616a:	47b8      	blx	r7
 800616c:	3001      	adds	r0, #1
 800616e:	d12b      	bne.n	80061c8 <_printf_float+0x240>
 8006170:	e767      	b.n	8006042 <_printf_float+0xba>
 8006172:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006176:	f240 80dc 	bls.w	8006332 <_printf_float+0x3aa>
 800617a:	2200      	movs	r2, #0
 800617c:	2300      	movs	r3, #0
 800617e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006182:	f7fa fc4d 	bl	8000a20 <__aeabi_dcmpeq>
 8006186:	2800      	cmp	r0, #0
 8006188:	d033      	beq.n	80061f2 <_printf_float+0x26a>
 800618a:	2301      	movs	r3, #1
 800618c:	4a41      	ldr	r2, [pc, #260]	; (8006294 <_printf_float+0x30c>)
 800618e:	4631      	mov	r1, r6
 8006190:	4628      	mov	r0, r5
 8006192:	47b8      	blx	r7
 8006194:	3001      	adds	r0, #1
 8006196:	f43f af54 	beq.w	8006042 <_printf_float+0xba>
 800619a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800619e:	429a      	cmp	r2, r3
 80061a0:	db02      	blt.n	80061a8 <_printf_float+0x220>
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	07d8      	lsls	r0, r3, #31
 80061a6:	d50f      	bpl.n	80061c8 <_printf_float+0x240>
 80061a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061ac:	4631      	mov	r1, r6
 80061ae:	4628      	mov	r0, r5
 80061b0:	47b8      	blx	r7
 80061b2:	3001      	adds	r0, #1
 80061b4:	f43f af45 	beq.w	8006042 <_printf_float+0xba>
 80061b8:	f04f 0800 	mov.w	r8, #0
 80061bc:	f104 091a 	add.w	r9, r4, #26
 80061c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061c2:	3b01      	subs	r3, #1
 80061c4:	4543      	cmp	r3, r8
 80061c6:	dc09      	bgt.n	80061dc <_printf_float+0x254>
 80061c8:	6823      	ldr	r3, [r4, #0]
 80061ca:	079b      	lsls	r3, r3, #30
 80061cc:	f100 8103 	bmi.w	80063d6 <_printf_float+0x44e>
 80061d0:	68e0      	ldr	r0, [r4, #12]
 80061d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061d4:	4298      	cmp	r0, r3
 80061d6:	bfb8      	it	lt
 80061d8:	4618      	movlt	r0, r3
 80061da:	e734      	b.n	8006046 <_printf_float+0xbe>
 80061dc:	2301      	movs	r3, #1
 80061de:	464a      	mov	r2, r9
 80061e0:	4631      	mov	r1, r6
 80061e2:	4628      	mov	r0, r5
 80061e4:	47b8      	blx	r7
 80061e6:	3001      	adds	r0, #1
 80061e8:	f43f af2b 	beq.w	8006042 <_printf_float+0xba>
 80061ec:	f108 0801 	add.w	r8, r8, #1
 80061f0:	e7e6      	b.n	80061c0 <_printf_float+0x238>
 80061f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	dc2b      	bgt.n	8006250 <_printf_float+0x2c8>
 80061f8:	2301      	movs	r3, #1
 80061fa:	4a26      	ldr	r2, [pc, #152]	; (8006294 <_printf_float+0x30c>)
 80061fc:	4631      	mov	r1, r6
 80061fe:	4628      	mov	r0, r5
 8006200:	47b8      	blx	r7
 8006202:	3001      	adds	r0, #1
 8006204:	f43f af1d 	beq.w	8006042 <_printf_float+0xba>
 8006208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800620a:	b923      	cbnz	r3, 8006216 <_printf_float+0x28e>
 800620c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800620e:	b913      	cbnz	r3, 8006216 <_printf_float+0x28e>
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	07d9      	lsls	r1, r3, #31
 8006214:	d5d8      	bpl.n	80061c8 <_printf_float+0x240>
 8006216:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800621a:	4631      	mov	r1, r6
 800621c:	4628      	mov	r0, r5
 800621e:	47b8      	blx	r7
 8006220:	3001      	adds	r0, #1
 8006222:	f43f af0e 	beq.w	8006042 <_printf_float+0xba>
 8006226:	f04f 0900 	mov.w	r9, #0
 800622a:	f104 0a1a 	add.w	sl, r4, #26
 800622e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006230:	425b      	negs	r3, r3
 8006232:	454b      	cmp	r3, r9
 8006234:	dc01      	bgt.n	800623a <_printf_float+0x2b2>
 8006236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006238:	e794      	b.n	8006164 <_printf_float+0x1dc>
 800623a:	2301      	movs	r3, #1
 800623c:	4652      	mov	r2, sl
 800623e:	4631      	mov	r1, r6
 8006240:	4628      	mov	r0, r5
 8006242:	47b8      	blx	r7
 8006244:	3001      	adds	r0, #1
 8006246:	f43f aefc 	beq.w	8006042 <_printf_float+0xba>
 800624a:	f109 0901 	add.w	r9, r9, #1
 800624e:	e7ee      	b.n	800622e <_printf_float+0x2a6>
 8006250:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006252:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006254:	429a      	cmp	r2, r3
 8006256:	bfa8      	it	ge
 8006258:	461a      	movge	r2, r3
 800625a:	2a00      	cmp	r2, #0
 800625c:	4691      	mov	r9, r2
 800625e:	dd07      	ble.n	8006270 <_printf_float+0x2e8>
 8006260:	4613      	mov	r3, r2
 8006262:	4631      	mov	r1, r6
 8006264:	4642      	mov	r2, r8
 8006266:	4628      	mov	r0, r5
 8006268:	47b8      	blx	r7
 800626a:	3001      	adds	r0, #1
 800626c:	f43f aee9 	beq.w	8006042 <_printf_float+0xba>
 8006270:	f104 031a 	add.w	r3, r4, #26
 8006274:	f04f 0b00 	mov.w	fp, #0
 8006278:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800627c:	9306      	str	r3, [sp, #24]
 800627e:	e015      	b.n	80062ac <_printf_float+0x324>
 8006280:	7fefffff 	.word	0x7fefffff
 8006284:	080090f0 	.word	0x080090f0
 8006288:	080090ec 	.word	0x080090ec
 800628c:	080090f8 	.word	0x080090f8
 8006290:	080090f4 	.word	0x080090f4
 8006294:	080090fc 	.word	0x080090fc
 8006298:	2301      	movs	r3, #1
 800629a:	9a06      	ldr	r2, [sp, #24]
 800629c:	4631      	mov	r1, r6
 800629e:	4628      	mov	r0, r5
 80062a0:	47b8      	blx	r7
 80062a2:	3001      	adds	r0, #1
 80062a4:	f43f aecd 	beq.w	8006042 <_printf_float+0xba>
 80062a8:	f10b 0b01 	add.w	fp, fp, #1
 80062ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80062b0:	ebaa 0309 	sub.w	r3, sl, r9
 80062b4:	455b      	cmp	r3, fp
 80062b6:	dcef      	bgt.n	8006298 <_printf_float+0x310>
 80062b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062bc:	429a      	cmp	r2, r3
 80062be:	44d0      	add	r8, sl
 80062c0:	db15      	blt.n	80062ee <_printf_float+0x366>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	07da      	lsls	r2, r3, #31
 80062c6:	d412      	bmi.n	80062ee <_printf_float+0x366>
 80062c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062cc:	eba3 020a 	sub.w	r2, r3, sl
 80062d0:	eba3 0a01 	sub.w	sl, r3, r1
 80062d4:	4592      	cmp	sl, r2
 80062d6:	bfa8      	it	ge
 80062d8:	4692      	movge	sl, r2
 80062da:	f1ba 0f00 	cmp.w	sl, #0
 80062de:	dc0e      	bgt.n	80062fe <_printf_float+0x376>
 80062e0:	f04f 0800 	mov.w	r8, #0
 80062e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062e8:	f104 091a 	add.w	r9, r4, #26
 80062ec:	e019      	b.n	8006322 <_printf_float+0x39a>
 80062ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062f2:	4631      	mov	r1, r6
 80062f4:	4628      	mov	r0, r5
 80062f6:	47b8      	blx	r7
 80062f8:	3001      	adds	r0, #1
 80062fa:	d1e5      	bne.n	80062c8 <_printf_float+0x340>
 80062fc:	e6a1      	b.n	8006042 <_printf_float+0xba>
 80062fe:	4653      	mov	r3, sl
 8006300:	4642      	mov	r2, r8
 8006302:	4631      	mov	r1, r6
 8006304:	4628      	mov	r0, r5
 8006306:	47b8      	blx	r7
 8006308:	3001      	adds	r0, #1
 800630a:	d1e9      	bne.n	80062e0 <_printf_float+0x358>
 800630c:	e699      	b.n	8006042 <_printf_float+0xba>
 800630e:	2301      	movs	r3, #1
 8006310:	464a      	mov	r2, r9
 8006312:	4631      	mov	r1, r6
 8006314:	4628      	mov	r0, r5
 8006316:	47b8      	blx	r7
 8006318:	3001      	adds	r0, #1
 800631a:	f43f ae92 	beq.w	8006042 <_printf_float+0xba>
 800631e:	f108 0801 	add.w	r8, r8, #1
 8006322:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006326:	1a9b      	subs	r3, r3, r2
 8006328:	eba3 030a 	sub.w	r3, r3, sl
 800632c:	4543      	cmp	r3, r8
 800632e:	dcee      	bgt.n	800630e <_printf_float+0x386>
 8006330:	e74a      	b.n	80061c8 <_printf_float+0x240>
 8006332:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006334:	2a01      	cmp	r2, #1
 8006336:	dc01      	bgt.n	800633c <_printf_float+0x3b4>
 8006338:	07db      	lsls	r3, r3, #31
 800633a:	d53a      	bpl.n	80063b2 <_printf_float+0x42a>
 800633c:	2301      	movs	r3, #1
 800633e:	4642      	mov	r2, r8
 8006340:	4631      	mov	r1, r6
 8006342:	4628      	mov	r0, r5
 8006344:	47b8      	blx	r7
 8006346:	3001      	adds	r0, #1
 8006348:	f43f ae7b 	beq.w	8006042 <_printf_float+0xba>
 800634c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006350:	4631      	mov	r1, r6
 8006352:	4628      	mov	r0, r5
 8006354:	47b8      	blx	r7
 8006356:	3001      	adds	r0, #1
 8006358:	f108 0801 	add.w	r8, r8, #1
 800635c:	f43f ae71 	beq.w	8006042 <_printf_float+0xba>
 8006360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006362:	2200      	movs	r2, #0
 8006364:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8006368:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800636c:	2300      	movs	r3, #0
 800636e:	f7fa fb57 	bl	8000a20 <__aeabi_dcmpeq>
 8006372:	b9c8      	cbnz	r0, 80063a8 <_printf_float+0x420>
 8006374:	4653      	mov	r3, sl
 8006376:	4642      	mov	r2, r8
 8006378:	4631      	mov	r1, r6
 800637a:	4628      	mov	r0, r5
 800637c:	47b8      	blx	r7
 800637e:	3001      	adds	r0, #1
 8006380:	d10e      	bne.n	80063a0 <_printf_float+0x418>
 8006382:	e65e      	b.n	8006042 <_printf_float+0xba>
 8006384:	2301      	movs	r3, #1
 8006386:	4652      	mov	r2, sl
 8006388:	4631      	mov	r1, r6
 800638a:	4628      	mov	r0, r5
 800638c:	47b8      	blx	r7
 800638e:	3001      	adds	r0, #1
 8006390:	f43f ae57 	beq.w	8006042 <_printf_float+0xba>
 8006394:	f108 0801 	add.w	r8, r8, #1
 8006398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800639a:	3b01      	subs	r3, #1
 800639c:	4543      	cmp	r3, r8
 800639e:	dcf1      	bgt.n	8006384 <_printf_float+0x3fc>
 80063a0:	464b      	mov	r3, r9
 80063a2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80063a6:	e6de      	b.n	8006166 <_printf_float+0x1de>
 80063a8:	f04f 0800 	mov.w	r8, #0
 80063ac:	f104 0a1a 	add.w	sl, r4, #26
 80063b0:	e7f2      	b.n	8006398 <_printf_float+0x410>
 80063b2:	2301      	movs	r3, #1
 80063b4:	e7df      	b.n	8006376 <_printf_float+0x3ee>
 80063b6:	2301      	movs	r3, #1
 80063b8:	464a      	mov	r2, r9
 80063ba:	4631      	mov	r1, r6
 80063bc:	4628      	mov	r0, r5
 80063be:	47b8      	blx	r7
 80063c0:	3001      	adds	r0, #1
 80063c2:	f43f ae3e 	beq.w	8006042 <_printf_float+0xba>
 80063c6:	f108 0801 	add.w	r8, r8, #1
 80063ca:	68e3      	ldr	r3, [r4, #12]
 80063cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063ce:	1a9b      	subs	r3, r3, r2
 80063d0:	4543      	cmp	r3, r8
 80063d2:	dcf0      	bgt.n	80063b6 <_printf_float+0x42e>
 80063d4:	e6fc      	b.n	80061d0 <_printf_float+0x248>
 80063d6:	f04f 0800 	mov.w	r8, #0
 80063da:	f104 0919 	add.w	r9, r4, #25
 80063de:	e7f4      	b.n	80063ca <_printf_float+0x442>
 80063e0:	2900      	cmp	r1, #0
 80063e2:	f43f ae8b 	beq.w	80060fc <_printf_float+0x174>
 80063e6:	2300      	movs	r3, #0
 80063e8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80063ec:	ab09      	add	r3, sp, #36	; 0x24
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	ec49 8b10 	vmov	d0, r8, r9
 80063f4:	6022      	str	r2, [r4, #0]
 80063f6:	f8cd a004 	str.w	sl, [sp, #4]
 80063fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80063fe:	4628      	mov	r0, r5
 8006400:	f7ff fd2e 	bl	8005e60 <__cvt>
 8006404:	4680      	mov	r8, r0
 8006406:	e648      	b.n	800609a <_printf_float+0x112>

08006408 <_printf_common>:
 8006408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800640c:	4691      	mov	r9, r2
 800640e:	461f      	mov	r7, r3
 8006410:	688a      	ldr	r2, [r1, #8]
 8006412:	690b      	ldr	r3, [r1, #16]
 8006414:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006418:	4293      	cmp	r3, r2
 800641a:	bfb8      	it	lt
 800641c:	4613      	movlt	r3, r2
 800641e:	f8c9 3000 	str.w	r3, [r9]
 8006422:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006426:	4606      	mov	r6, r0
 8006428:	460c      	mov	r4, r1
 800642a:	b112      	cbz	r2, 8006432 <_printf_common+0x2a>
 800642c:	3301      	adds	r3, #1
 800642e:	f8c9 3000 	str.w	r3, [r9]
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	0699      	lsls	r1, r3, #26
 8006436:	bf42      	ittt	mi
 8006438:	f8d9 3000 	ldrmi.w	r3, [r9]
 800643c:	3302      	addmi	r3, #2
 800643e:	f8c9 3000 	strmi.w	r3, [r9]
 8006442:	6825      	ldr	r5, [r4, #0]
 8006444:	f015 0506 	ands.w	r5, r5, #6
 8006448:	d107      	bne.n	800645a <_printf_common+0x52>
 800644a:	f104 0a19 	add.w	sl, r4, #25
 800644e:	68e3      	ldr	r3, [r4, #12]
 8006450:	f8d9 2000 	ldr.w	r2, [r9]
 8006454:	1a9b      	subs	r3, r3, r2
 8006456:	42ab      	cmp	r3, r5
 8006458:	dc28      	bgt.n	80064ac <_printf_common+0xa4>
 800645a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800645e:	6822      	ldr	r2, [r4, #0]
 8006460:	3300      	adds	r3, #0
 8006462:	bf18      	it	ne
 8006464:	2301      	movne	r3, #1
 8006466:	0692      	lsls	r2, r2, #26
 8006468:	d42d      	bmi.n	80064c6 <_printf_common+0xbe>
 800646a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800646e:	4639      	mov	r1, r7
 8006470:	4630      	mov	r0, r6
 8006472:	47c0      	blx	r8
 8006474:	3001      	adds	r0, #1
 8006476:	d020      	beq.n	80064ba <_printf_common+0xb2>
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	68e5      	ldr	r5, [r4, #12]
 800647c:	f8d9 2000 	ldr.w	r2, [r9]
 8006480:	f003 0306 	and.w	r3, r3, #6
 8006484:	2b04      	cmp	r3, #4
 8006486:	bf08      	it	eq
 8006488:	1aad      	subeq	r5, r5, r2
 800648a:	68a3      	ldr	r3, [r4, #8]
 800648c:	6922      	ldr	r2, [r4, #16]
 800648e:	bf0c      	ite	eq
 8006490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006494:	2500      	movne	r5, #0
 8006496:	4293      	cmp	r3, r2
 8006498:	bfc4      	itt	gt
 800649a:	1a9b      	subgt	r3, r3, r2
 800649c:	18ed      	addgt	r5, r5, r3
 800649e:	f04f 0900 	mov.w	r9, #0
 80064a2:	341a      	adds	r4, #26
 80064a4:	454d      	cmp	r5, r9
 80064a6:	d11a      	bne.n	80064de <_printf_common+0xd6>
 80064a8:	2000      	movs	r0, #0
 80064aa:	e008      	b.n	80064be <_printf_common+0xb6>
 80064ac:	2301      	movs	r3, #1
 80064ae:	4652      	mov	r2, sl
 80064b0:	4639      	mov	r1, r7
 80064b2:	4630      	mov	r0, r6
 80064b4:	47c0      	blx	r8
 80064b6:	3001      	adds	r0, #1
 80064b8:	d103      	bne.n	80064c2 <_printf_common+0xba>
 80064ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c2:	3501      	adds	r5, #1
 80064c4:	e7c3      	b.n	800644e <_printf_common+0x46>
 80064c6:	18e1      	adds	r1, r4, r3
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	2030      	movs	r0, #48	; 0x30
 80064cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064d0:	4422      	add	r2, r4
 80064d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064da:	3302      	adds	r3, #2
 80064dc:	e7c5      	b.n	800646a <_printf_common+0x62>
 80064de:	2301      	movs	r3, #1
 80064e0:	4622      	mov	r2, r4
 80064e2:	4639      	mov	r1, r7
 80064e4:	4630      	mov	r0, r6
 80064e6:	47c0      	blx	r8
 80064e8:	3001      	adds	r0, #1
 80064ea:	d0e6      	beq.n	80064ba <_printf_common+0xb2>
 80064ec:	f109 0901 	add.w	r9, r9, #1
 80064f0:	e7d8      	b.n	80064a4 <_printf_common+0x9c>

080064f2 <quorem>:
 80064f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f6:	6903      	ldr	r3, [r0, #16]
 80064f8:	690c      	ldr	r4, [r1, #16]
 80064fa:	42a3      	cmp	r3, r4
 80064fc:	4680      	mov	r8, r0
 80064fe:	f2c0 8082 	blt.w	8006606 <quorem+0x114>
 8006502:	3c01      	subs	r4, #1
 8006504:	f101 0714 	add.w	r7, r1, #20
 8006508:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800650c:	f100 0614 	add.w	r6, r0, #20
 8006510:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006514:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006518:	eb06 030c 	add.w	r3, r6, ip
 800651c:	3501      	adds	r5, #1
 800651e:	eb07 090c 	add.w	r9, r7, ip
 8006522:	9301      	str	r3, [sp, #4]
 8006524:	fbb0 f5f5 	udiv	r5, r0, r5
 8006528:	b395      	cbz	r5, 8006590 <quorem+0x9e>
 800652a:	f04f 0a00 	mov.w	sl, #0
 800652e:	4638      	mov	r0, r7
 8006530:	46b6      	mov	lr, r6
 8006532:	46d3      	mov	fp, sl
 8006534:	f850 2b04 	ldr.w	r2, [r0], #4
 8006538:	b293      	uxth	r3, r2
 800653a:	fb05 a303 	mla	r3, r5, r3, sl
 800653e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006542:	b29b      	uxth	r3, r3
 8006544:	ebab 0303 	sub.w	r3, fp, r3
 8006548:	0c12      	lsrs	r2, r2, #16
 800654a:	f8de b000 	ldr.w	fp, [lr]
 800654e:	fb05 a202 	mla	r2, r5, r2, sl
 8006552:	fa13 f38b 	uxtah	r3, r3, fp
 8006556:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800655a:	fa1f fb82 	uxth.w	fp, r2
 800655e:	f8de 2000 	ldr.w	r2, [lr]
 8006562:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006566:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800656a:	b29b      	uxth	r3, r3
 800656c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006570:	4581      	cmp	r9, r0
 8006572:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006576:	f84e 3b04 	str.w	r3, [lr], #4
 800657a:	d2db      	bcs.n	8006534 <quorem+0x42>
 800657c:	f856 300c 	ldr.w	r3, [r6, ip]
 8006580:	b933      	cbnz	r3, 8006590 <quorem+0x9e>
 8006582:	9b01      	ldr	r3, [sp, #4]
 8006584:	3b04      	subs	r3, #4
 8006586:	429e      	cmp	r6, r3
 8006588:	461a      	mov	r2, r3
 800658a:	d330      	bcc.n	80065ee <quorem+0xfc>
 800658c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006590:	4640      	mov	r0, r8
 8006592:	f001 f821 	bl	80075d8 <__mcmp>
 8006596:	2800      	cmp	r0, #0
 8006598:	db25      	blt.n	80065e6 <quorem+0xf4>
 800659a:	3501      	adds	r5, #1
 800659c:	4630      	mov	r0, r6
 800659e:	f04f 0c00 	mov.w	ip, #0
 80065a2:	f857 2b04 	ldr.w	r2, [r7], #4
 80065a6:	f8d0 e000 	ldr.w	lr, [r0]
 80065aa:	b293      	uxth	r3, r2
 80065ac:	ebac 0303 	sub.w	r3, ip, r3
 80065b0:	0c12      	lsrs	r2, r2, #16
 80065b2:	fa13 f38e 	uxtah	r3, r3, lr
 80065b6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80065ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065be:	b29b      	uxth	r3, r3
 80065c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065c4:	45b9      	cmp	r9, r7
 80065c6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80065ca:	f840 3b04 	str.w	r3, [r0], #4
 80065ce:	d2e8      	bcs.n	80065a2 <quorem+0xb0>
 80065d0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80065d4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80065d8:	b92a      	cbnz	r2, 80065e6 <quorem+0xf4>
 80065da:	3b04      	subs	r3, #4
 80065dc:	429e      	cmp	r6, r3
 80065de:	461a      	mov	r2, r3
 80065e0:	d30b      	bcc.n	80065fa <quorem+0x108>
 80065e2:	f8c8 4010 	str.w	r4, [r8, #16]
 80065e6:	4628      	mov	r0, r5
 80065e8:	b003      	add	sp, #12
 80065ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ee:	6812      	ldr	r2, [r2, #0]
 80065f0:	3b04      	subs	r3, #4
 80065f2:	2a00      	cmp	r2, #0
 80065f4:	d1ca      	bne.n	800658c <quorem+0x9a>
 80065f6:	3c01      	subs	r4, #1
 80065f8:	e7c5      	b.n	8006586 <quorem+0x94>
 80065fa:	6812      	ldr	r2, [r2, #0]
 80065fc:	3b04      	subs	r3, #4
 80065fe:	2a00      	cmp	r2, #0
 8006600:	d1ef      	bne.n	80065e2 <quorem+0xf0>
 8006602:	3c01      	subs	r4, #1
 8006604:	e7ea      	b.n	80065dc <quorem+0xea>
 8006606:	2000      	movs	r0, #0
 8006608:	e7ee      	b.n	80065e8 <quorem+0xf6>
 800660a:	0000      	movs	r0, r0
 800660c:	0000      	movs	r0, r0
	...

08006610 <_dtoa_r>:
 8006610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006614:	ec57 6b10 	vmov	r6, r7, d0
 8006618:	b097      	sub	sp, #92	; 0x5c
 800661a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800661c:	9106      	str	r1, [sp, #24]
 800661e:	4604      	mov	r4, r0
 8006620:	920b      	str	r2, [sp, #44]	; 0x2c
 8006622:	9312      	str	r3, [sp, #72]	; 0x48
 8006624:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006628:	e9cd 6700 	strd	r6, r7, [sp]
 800662c:	b93d      	cbnz	r5, 800663e <_dtoa_r+0x2e>
 800662e:	2010      	movs	r0, #16
 8006630:	f000 fdb4 	bl	800719c <malloc>
 8006634:	6260      	str	r0, [r4, #36]	; 0x24
 8006636:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800663a:	6005      	str	r5, [r0, #0]
 800663c:	60c5      	str	r5, [r0, #12]
 800663e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006640:	6819      	ldr	r1, [r3, #0]
 8006642:	b151      	cbz	r1, 800665a <_dtoa_r+0x4a>
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	604a      	str	r2, [r1, #4]
 8006648:	2301      	movs	r3, #1
 800664a:	4093      	lsls	r3, r2
 800664c:	608b      	str	r3, [r1, #8]
 800664e:	4620      	mov	r0, r4
 8006650:	f000 fde0 	bl	8007214 <_Bfree>
 8006654:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	1e3b      	subs	r3, r7, #0
 800665c:	bfbb      	ittet	lt
 800665e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006662:	9301      	strlt	r3, [sp, #4]
 8006664:	2300      	movge	r3, #0
 8006666:	2201      	movlt	r2, #1
 8006668:	bfac      	ite	ge
 800666a:	f8c8 3000 	strge.w	r3, [r8]
 800666e:	f8c8 2000 	strlt.w	r2, [r8]
 8006672:	4baf      	ldr	r3, [pc, #700]	; (8006930 <_dtoa_r+0x320>)
 8006674:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006678:	ea33 0308 	bics.w	r3, r3, r8
 800667c:	d114      	bne.n	80066a8 <_dtoa_r+0x98>
 800667e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006680:	f242 730f 	movw	r3, #9999	; 0x270f
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	9b00      	ldr	r3, [sp, #0]
 8006688:	b923      	cbnz	r3, 8006694 <_dtoa_r+0x84>
 800668a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800668e:	2800      	cmp	r0, #0
 8006690:	f000 8542 	beq.w	8007118 <_dtoa_r+0xb08>
 8006694:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006696:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006944 <_dtoa_r+0x334>
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 8544 	beq.w	8007128 <_dtoa_r+0xb18>
 80066a0:	f10b 0303 	add.w	r3, fp, #3
 80066a4:	f000 bd3e 	b.w	8007124 <_dtoa_r+0xb14>
 80066a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80066ac:	2200      	movs	r2, #0
 80066ae:	2300      	movs	r3, #0
 80066b0:	4630      	mov	r0, r6
 80066b2:	4639      	mov	r1, r7
 80066b4:	f7fa f9b4 	bl	8000a20 <__aeabi_dcmpeq>
 80066b8:	4681      	mov	r9, r0
 80066ba:	b168      	cbz	r0, 80066d8 <_dtoa_r+0xc8>
 80066bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066be:	2301      	movs	r3, #1
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 8524 	beq.w	8007112 <_dtoa_r+0xb02>
 80066ca:	4b9a      	ldr	r3, [pc, #616]	; (8006934 <_dtoa_r+0x324>)
 80066cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066ce:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	f000 bd28 	b.w	8007128 <_dtoa_r+0xb18>
 80066d8:	aa14      	add	r2, sp, #80	; 0x50
 80066da:	a915      	add	r1, sp, #84	; 0x54
 80066dc:	ec47 6b10 	vmov	d0, r6, r7
 80066e0:	4620      	mov	r0, r4
 80066e2:	f000 fff0 	bl	80076c6 <__d2b>
 80066e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80066ea:	9004      	str	r0, [sp, #16]
 80066ec:	2d00      	cmp	r5, #0
 80066ee:	d07c      	beq.n	80067ea <_dtoa_r+0x1da>
 80066f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80066f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80066f8:	46b2      	mov	sl, r6
 80066fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80066fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006702:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006706:	2200      	movs	r2, #0
 8006708:	4b8b      	ldr	r3, [pc, #556]	; (8006938 <_dtoa_r+0x328>)
 800670a:	4650      	mov	r0, sl
 800670c:	4659      	mov	r1, fp
 800670e:	f7f9 fd67 	bl	80001e0 <__aeabi_dsub>
 8006712:	a381      	add	r3, pc, #516	; (adr r3, 8006918 <_dtoa_r+0x308>)
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	f7f9 ff1a 	bl	8000550 <__aeabi_dmul>
 800671c:	a380      	add	r3, pc, #512	; (adr r3, 8006920 <_dtoa_r+0x310>)
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	f7f9 fd5f 	bl	80001e4 <__adddf3>
 8006726:	4606      	mov	r6, r0
 8006728:	4628      	mov	r0, r5
 800672a:	460f      	mov	r7, r1
 800672c:	f7f9 fea6 	bl	800047c <__aeabi_i2d>
 8006730:	a37d      	add	r3, pc, #500	; (adr r3, 8006928 <_dtoa_r+0x318>)
 8006732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006736:	f7f9 ff0b 	bl	8000550 <__aeabi_dmul>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4630      	mov	r0, r6
 8006740:	4639      	mov	r1, r7
 8006742:	f7f9 fd4f 	bl	80001e4 <__adddf3>
 8006746:	4606      	mov	r6, r0
 8006748:	460f      	mov	r7, r1
 800674a:	f7fa f99b 	bl	8000a84 <__aeabi_d2iz>
 800674e:	2200      	movs	r2, #0
 8006750:	4682      	mov	sl, r0
 8006752:	2300      	movs	r3, #0
 8006754:	4630      	mov	r0, r6
 8006756:	4639      	mov	r1, r7
 8006758:	f7fa f96c 	bl	8000a34 <__aeabi_dcmplt>
 800675c:	b148      	cbz	r0, 8006772 <_dtoa_r+0x162>
 800675e:	4650      	mov	r0, sl
 8006760:	f7f9 fe8c 	bl	800047c <__aeabi_i2d>
 8006764:	4632      	mov	r2, r6
 8006766:	463b      	mov	r3, r7
 8006768:	f7fa f95a 	bl	8000a20 <__aeabi_dcmpeq>
 800676c:	b908      	cbnz	r0, 8006772 <_dtoa_r+0x162>
 800676e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006772:	f1ba 0f16 	cmp.w	sl, #22
 8006776:	d859      	bhi.n	800682c <_dtoa_r+0x21c>
 8006778:	4970      	ldr	r1, [pc, #448]	; (800693c <_dtoa_r+0x32c>)
 800677a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800677e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006782:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006786:	f7fa f973 	bl	8000a70 <__aeabi_dcmpgt>
 800678a:	2800      	cmp	r0, #0
 800678c:	d050      	beq.n	8006830 <_dtoa_r+0x220>
 800678e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006792:	2300      	movs	r3, #0
 8006794:	930f      	str	r3, [sp, #60]	; 0x3c
 8006796:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006798:	1b5d      	subs	r5, r3, r5
 800679a:	f1b5 0801 	subs.w	r8, r5, #1
 800679e:	bf49      	itett	mi
 80067a0:	f1c5 0301 	rsbmi	r3, r5, #1
 80067a4:	2300      	movpl	r3, #0
 80067a6:	9305      	strmi	r3, [sp, #20]
 80067a8:	f04f 0800 	movmi.w	r8, #0
 80067ac:	bf58      	it	pl
 80067ae:	9305      	strpl	r3, [sp, #20]
 80067b0:	f1ba 0f00 	cmp.w	sl, #0
 80067b4:	db3e      	blt.n	8006834 <_dtoa_r+0x224>
 80067b6:	2300      	movs	r3, #0
 80067b8:	44d0      	add	r8, sl
 80067ba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80067be:	9307      	str	r3, [sp, #28]
 80067c0:	9b06      	ldr	r3, [sp, #24]
 80067c2:	2b09      	cmp	r3, #9
 80067c4:	f200 8090 	bhi.w	80068e8 <_dtoa_r+0x2d8>
 80067c8:	2b05      	cmp	r3, #5
 80067ca:	bfc4      	itt	gt
 80067cc:	3b04      	subgt	r3, #4
 80067ce:	9306      	strgt	r3, [sp, #24]
 80067d0:	9b06      	ldr	r3, [sp, #24]
 80067d2:	f1a3 0302 	sub.w	r3, r3, #2
 80067d6:	bfcc      	ite	gt
 80067d8:	2500      	movgt	r5, #0
 80067da:	2501      	movle	r5, #1
 80067dc:	2b03      	cmp	r3, #3
 80067de:	f200 808f 	bhi.w	8006900 <_dtoa_r+0x2f0>
 80067e2:	e8df f003 	tbb	[pc, r3]
 80067e6:	7f7d      	.short	0x7f7d
 80067e8:	7131      	.short	0x7131
 80067ea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80067ee:	441d      	add	r5, r3
 80067f0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80067f4:	2820      	cmp	r0, #32
 80067f6:	dd13      	ble.n	8006820 <_dtoa_r+0x210>
 80067f8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80067fc:	9b00      	ldr	r3, [sp, #0]
 80067fe:	fa08 f800 	lsl.w	r8, r8, r0
 8006802:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006806:	fa23 f000 	lsr.w	r0, r3, r0
 800680a:	ea48 0000 	orr.w	r0, r8, r0
 800680e:	f7f9 fe25 	bl	800045c <__aeabi_ui2d>
 8006812:	2301      	movs	r3, #1
 8006814:	4682      	mov	sl, r0
 8006816:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800681a:	3d01      	subs	r5, #1
 800681c:	9313      	str	r3, [sp, #76]	; 0x4c
 800681e:	e772      	b.n	8006706 <_dtoa_r+0xf6>
 8006820:	9b00      	ldr	r3, [sp, #0]
 8006822:	f1c0 0020 	rsb	r0, r0, #32
 8006826:	fa03 f000 	lsl.w	r0, r3, r0
 800682a:	e7f0      	b.n	800680e <_dtoa_r+0x1fe>
 800682c:	2301      	movs	r3, #1
 800682e:	e7b1      	b.n	8006794 <_dtoa_r+0x184>
 8006830:	900f      	str	r0, [sp, #60]	; 0x3c
 8006832:	e7b0      	b.n	8006796 <_dtoa_r+0x186>
 8006834:	9b05      	ldr	r3, [sp, #20]
 8006836:	eba3 030a 	sub.w	r3, r3, sl
 800683a:	9305      	str	r3, [sp, #20]
 800683c:	f1ca 0300 	rsb	r3, sl, #0
 8006840:	9307      	str	r3, [sp, #28]
 8006842:	2300      	movs	r3, #0
 8006844:	930e      	str	r3, [sp, #56]	; 0x38
 8006846:	e7bb      	b.n	80067c0 <_dtoa_r+0x1b0>
 8006848:	2301      	movs	r3, #1
 800684a:	930a      	str	r3, [sp, #40]	; 0x28
 800684c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800684e:	2b00      	cmp	r3, #0
 8006850:	dd59      	ble.n	8006906 <_dtoa_r+0x2f6>
 8006852:	9302      	str	r3, [sp, #8]
 8006854:	4699      	mov	r9, r3
 8006856:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006858:	2200      	movs	r2, #0
 800685a:	6072      	str	r2, [r6, #4]
 800685c:	2204      	movs	r2, #4
 800685e:	f102 0014 	add.w	r0, r2, #20
 8006862:	4298      	cmp	r0, r3
 8006864:	6871      	ldr	r1, [r6, #4]
 8006866:	d953      	bls.n	8006910 <_dtoa_r+0x300>
 8006868:	4620      	mov	r0, r4
 800686a:	f000 fc9f 	bl	80071ac <_Balloc>
 800686e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006870:	6030      	str	r0, [r6, #0]
 8006872:	f1b9 0f0e 	cmp.w	r9, #14
 8006876:	f8d3 b000 	ldr.w	fp, [r3]
 800687a:	f200 80e6 	bhi.w	8006a4a <_dtoa_r+0x43a>
 800687e:	2d00      	cmp	r5, #0
 8006880:	f000 80e3 	beq.w	8006a4a <_dtoa_r+0x43a>
 8006884:	ed9d 7b00 	vldr	d7, [sp]
 8006888:	f1ba 0f00 	cmp.w	sl, #0
 800688c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006890:	dd74      	ble.n	800697c <_dtoa_r+0x36c>
 8006892:	4a2a      	ldr	r2, [pc, #168]	; (800693c <_dtoa_r+0x32c>)
 8006894:	f00a 030f 	and.w	r3, sl, #15
 8006898:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800689c:	ed93 7b00 	vldr	d7, [r3]
 80068a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80068a4:	06f0      	lsls	r0, r6, #27
 80068a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80068aa:	d565      	bpl.n	8006978 <_dtoa_r+0x368>
 80068ac:	4b24      	ldr	r3, [pc, #144]	; (8006940 <_dtoa_r+0x330>)
 80068ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068b6:	f7f9 ff75 	bl	80007a4 <__aeabi_ddiv>
 80068ba:	e9cd 0100 	strd	r0, r1, [sp]
 80068be:	f006 060f 	and.w	r6, r6, #15
 80068c2:	2503      	movs	r5, #3
 80068c4:	4f1e      	ldr	r7, [pc, #120]	; (8006940 <_dtoa_r+0x330>)
 80068c6:	e04c      	b.n	8006962 <_dtoa_r+0x352>
 80068c8:	2301      	movs	r3, #1
 80068ca:	930a      	str	r3, [sp, #40]	; 0x28
 80068cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ce:	4453      	add	r3, sl
 80068d0:	f103 0901 	add.w	r9, r3, #1
 80068d4:	9302      	str	r3, [sp, #8]
 80068d6:	464b      	mov	r3, r9
 80068d8:	2b01      	cmp	r3, #1
 80068da:	bfb8      	it	lt
 80068dc:	2301      	movlt	r3, #1
 80068de:	e7ba      	b.n	8006856 <_dtoa_r+0x246>
 80068e0:	2300      	movs	r3, #0
 80068e2:	e7b2      	b.n	800684a <_dtoa_r+0x23a>
 80068e4:	2300      	movs	r3, #0
 80068e6:	e7f0      	b.n	80068ca <_dtoa_r+0x2ba>
 80068e8:	2501      	movs	r5, #1
 80068ea:	2300      	movs	r3, #0
 80068ec:	9306      	str	r3, [sp, #24]
 80068ee:	950a      	str	r5, [sp, #40]	; 0x28
 80068f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068f4:	9302      	str	r3, [sp, #8]
 80068f6:	4699      	mov	r9, r3
 80068f8:	2200      	movs	r2, #0
 80068fa:	2312      	movs	r3, #18
 80068fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80068fe:	e7aa      	b.n	8006856 <_dtoa_r+0x246>
 8006900:	2301      	movs	r3, #1
 8006902:	930a      	str	r3, [sp, #40]	; 0x28
 8006904:	e7f4      	b.n	80068f0 <_dtoa_r+0x2e0>
 8006906:	2301      	movs	r3, #1
 8006908:	9302      	str	r3, [sp, #8]
 800690a:	4699      	mov	r9, r3
 800690c:	461a      	mov	r2, r3
 800690e:	e7f5      	b.n	80068fc <_dtoa_r+0x2ec>
 8006910:	3101      	adds	r1, #1
 8006912:	6071      	str	r1, [r6, #4]
 8006914:	0052      	lsls	r2, r2, #1
 8006916:	e7a2      	b.n	800685e <_dtoa_r+0x24e>
 8006918:	636f4361 	.word	0x636f4361
 800691c:	3fd287a7 	.word	0x3fd287a7
 8006920:	8b60c8b3 	.word	0x8b60c8b3
 8006924:	3fc68a28 	.word	0x3fc68a28
 8006928:	509f79fb 	.word	0x509f79fb
 800692c:	3fd34413 	.word	0x3fd34413
 8006930:	7ff00000 	.word	0x7ff00000
 8006934:	080090fd 	.word	0x080090fd
 8006938:	3ff80000 	.word	0x3ff80000
 800693c:	08009198 	.word	0x08009198
 8006940:	08009170 	.word	0x08009170
 8006944:	08009107 	.word	0x08009107
 8006948:	07f1      	lsls	r1, r6, #31
 800694a:	d508      	bpl.n	800695e <_dtoa_r+0x34e>
 800694c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006954:	f7f9 fdfc 	bl	8000550 <__aeabi_dmul>
 8006958:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800695c:	3501      	adds	r5, #1
 800695e:	1076      	asrs	r6, r6, #1
 8006960:	3708      	adds	r7, #8
 8006962:	2e00      	cmp	r6, #0
 8006964:	d1f0      	bne.n	8006948 <_dtoa_r+0x338>
 8006966:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800696a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800696e:	f7f9 ff19 	bl	80007a4 <__aeabi_ddiv>
 8006972:	e9cd 0100 	strd	r0, r1, [sp]
 8006976:	e01a      	b.n	80069ae <_dtoa_r+0x39e>
 8006978:	2502      	movs	r5, #2
 800697a:	e7a3      	b.n	80068c4 <_dtoa_r+0x2b4>
 800697c:	f000 80a0 	beq.w	8006ac0 <_dtoa_r+0x4b0>
 8006980:	f1ca 0600 	rsb	r6, sl, #0
 8006984:	4b9f      	ldr	r3, [pc, #636]	; (8006c04 <_dtoa_r+0x5f4>)
 8006986:	4fa0      	ldr	r7, [pc, #640]	; (8006c08 <_dtoa_r+0x5f8>)
 8006988:	f006 020f 	and.w	r2, r6, #15
 800698c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006994:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006998:	f7f9 fdda 	bl	8000550 <__aeabi_dmul>
 800699c:	e9cd 0100 	strd	r0, r1, [sp]
 80069a0:	1136      	asrs	r6, r6, #4
 80069a2:	2300      	movs	r3, #0
 80069a4:	2502      	movs	r5, #2
 80069a6:	2e00      	cmp	r6, #0
 80069a8:	d17f      	bne.n	8006aaa <_dtoa_r+0x49a>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e1      	bne.n	8006972 <_dtoa_r+0x362>
 80069ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 8087 	beq.w	8006ac4 <_dtoa_r+0x4b4>
 80069b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80069ba:	2200      	movs	r2, #0
 80069bc:	4b93      	ldr	r3, [pc, #588]	; (8006c0c <_dtoa_r+0x5fc>)
 80069be:	4630      	mov	r0, r6
 80069c0:	4639      	mov	r1, r7
 80069c2:	f7fa f837 	bl	8000a34 <__aeabi_dcmplt>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d07c      	beq.n	8006ac4 <_dtoa_r+0x4b4>
 80069ca:	f1b9 0f00 	cmp.w	r9, #0
 80069ce:	d079      	beq.n	8006ac4 <_dtoa_r+0x4b4>
 80069d0:	9b02      	ldr	r3, [sp, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	dd35      	ble.n	8006a42 <_dtoa_r+0x432>
 80069d6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80069da:	9308      	str	r3, [sp, #32]
 80069dc:	4639      	mov	r1, r7
 80069de:	2200      	movs	r2, #0
 80069e0:	4b8b      	ldr	r3, [pc, #556]	; (8006c10 <_dtoa_r+0x600>)
 80069e2:	4630      	mov	r0, r6
 80069e4:	f7f9 fdb4 	bl	8000550 <__aeabi_dmul>
 80069e8:	e9cd 0100 	strd	r0, r1, [sp]
 80069ec:	9f02      	ldr	r7, [sp, #8]
 80069ee:	3501      	adds	r5, #1
 80069f0:	4628      	mov	r0, r5
 80069f2:	f7f9 fd43 	bl	800047c <__aeabi_i2d>
 80069f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069fa:	f7f9 fda9 	bl	8000550 <__aeabi_dmul>
 80069fe:	2200      	movs	r2, #0
 8006a00:	4b84      	ldr	r3, [pc, #528]	; (8006c14 <_dtoa_r+0x604>)
 8006a02:	f7f9 fbef 	bl	80001e4 <__adddf3>
 8006a06:	4605      	mov	r5, r0
 8006a08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006a0c:	2f00      	cmp	r7, #0
 8006a0e:	d15d      	bne.n	8006acc <_dtoa_r+0x4bc>
 8006a10:	2200      	movs	r2, #0
 8006a12:	4b81      	ldr	r3, [pc, #516]	; (8006c18 <_dtoa_r+0x608>)
 8006a14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a18:	f7f9 fbe2 	bl	80001e0 <__aeabi_dsub>
 8006a1c:	462a      	mov	r2, r5
 8006a1e:	4633      	mov	r3, r6
 8006a20:	e9cd 0100 	strd	r0, r1, [sp]
 8006a24:	f7fa f824 	bl	8000a70 <__aeabi_dcmpgt>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	f040 8288 	bne.w	8006f3e <_dtoa_r+0x92e>
 8006a2e:	462a      	mov	r2, r5
 8006a30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006a34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a38:	f7f9 fffc 	bl	8000a34 <__aeabi_dcmplt>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	f040 827c 	bne.w	8006f3a <_dtoa_r+0x92a>
 8006a42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a46:	e9cd 2300 	strd	r2, r3, [sp]
 8006a4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f2c0 8150 	blt.w	8006cf2 <_dtoa_r+0x6e2>
 8006a52:	f1ba 0f0e 	cmp.w	sl, #14
 8006a56:	f300 814c 	bgt.w	8006cf2 <_dtoa_r+0x6e2>
 8006a5a:	4b6a      	ldr	r3, [pc, #424]	; (8006c04 <_dtoa_r+0x5f4>)
 8006a5c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a60:	ed93 7b00 	vldr	d7, [r3]
 8006a64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006a6c:	f280 80d8 	bge.w	8006c20 <_dtoa_r+0x610>
 8006a70:	f1b9 0f00 	cmp.w	r9, #0
 8006a74:	f300 80d4 	bgt.w	8006c20 <_dtoa_r+0x610>
 8006a78:	f040 825e 	bne.w	8006f38 <_dtoa_r+0x928>
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	4b66      	ldr	r3, [pc, #408]	; (8006c18 <_dtoa_r+0x608>)
 8006a80:	ec51 0b17 	vmov	r0, r1, d7
 8006a84:	f7f9 fd64 	bl	8000550 <__aeabi_dmul>
 8006a88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a8c:	f7f9 ffe6 	bl	8000a5c <__aeabi_dcmpge>
 8006a90:	464f      	mov	r7, r9
 8006a92:	464e      	mov	r6, r9
 8006a94:	2800      	cmp	r0, #0
 8006a96:	f040 8234 	bne.w	8006f02 <_dtoa_r+0x8f2>
 8006a9a:	2331      	movs	r3, #49	; 0x31
 8006a9c:	f10b 0501 	add.w	r5, fp, #1
 8006aa0:	f88b 3000 	strb.w	r3, [fp]
 8006aa4:	f10a 0a01 	add.w	sl, sl, #1
 8006aa8:	e22f      	b.n	8006f0a <_dtoa_r+0x8fa>
 8006aaa:	07f2      	lsls	r2, r6, #31
 8006aac:	d505      	bpl.n	8006aba <_dtoa_r+0x4aa>
 8006aae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ab2:	f7f9 fd4d 	bl	8000550 <__aeabi_dmul>
 8006ab6:	3501      	adds	r5, #1
 8006ab8:	2301      	movs	r3, #1
 8006aba:	1076      	asrs	r6, r6, #1
 8006abc:	3708      	adds	r7, #8
 8006abe:	e772      	b.n	80069a6 <_dtoa_r+0x396>
 8006ac0:	2502      	movs	r5, #2
 8006ac2:	e774      	b.n	80069ae <_dtoa_r+0x39e>
 8006ac4:	f8cd a020 	str.w	sl, [sp, #32]
 8006ac8:	464f      	mov	r7, r9
 8006aca:	e791      	b.n	80069f0 <_dtoa_r+0x3e0>
 8006acc:	4b4d      	ldr	r3, [pc, #308]	; (8006c04 <_dtoa_r+0x5f4>)
 8006ace:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ad2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d047      	beq.n	8006b6c <_dtoa_r+0x55c>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	2000      	movs	r0, #0
 8006ae2:	494e      	ldr	r1, [pc, #312]	; (8006c1c <_dtoa_r+0x60c>)
 8006ae4:	f7f9 fe5e 	bl	80007a4 <__aeabi_ddiv>
 8006ae8:	462a      	mov	r2, r5
 8006aea:	4633      	mov	r3, r6
 8006aec:	f7f9 fb78 	bl	80001e0 <__aeabi_dsub>
 8006af0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006af4:	465d      	mov	r5, fp
 8006af6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006afa:	f7f9 ffc3 	bl	8000a84 <__aeabi_d2iz>
 8006afe:	4606      	mov	r6, r0
 8006b00:	f7f9 fcbc 	bl	800047c <__aeabi_i2d>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b0c:	f7f9 fb68 	bl	80001e0 <__aeabi_dsub>
 8006b10:	3630      	adds	r6, #48	; 0x30
 8006b12:	f805 6b01 	strb.w	r6, [r5], #1
 8006b16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006b1a:	e9cd 0100 	strd	r0, r1, [sp]
 8006b1e:	f7f9 ff89 	bl	8000a34 <__aeabi_dcmplt>
 8006b22:	2800      	cmp	r0, #0
 8006b24:	d163      	bne.n	8006bee <_dtoa_r+0x5de>
 8006b26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b2a:	2000      	movs	r0, #0
 8006b2c:	4937      	ldr	r1, [pc, #220]	; (8006c0c <_dtoa_r+0x5fc>)
 8006b2e:	f7f9 fb57 	bl	80001e0 <__aeabi_dsub>
 8006b32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006b36:	f7f9 ff7d 	bl	8000a34 <__aeabi_dcmplt>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	f040 80b7 	bne.w	8006cae <_dtoa_r+0x69e>
 8006b40:	eba5 030b 	sub.w	r3, r5, fp
 8006b44:	429f      	cmp	r7, r3
 8006b46:	f77f af7c 	ble.w	8006a42 <_dtoa_r+0x432>
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	4b30      	ldr	r3, [pc, #192]	; (8006c10 <_dtoa_r+0x600>)
 8006b4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b52:	f7f9 fcfd 	bl	8000550 <__aeabi_dmul>
 8006b56:	2200      	movs	r2, #0
 8006b58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006b5c:	4b2c      	ldr	r3, [pc, #176]	; (8006c10 <_dtoa_r+0x600>)
 8006b5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b62:	f7f9 fcf5 	bl	8000550 <__aeabi_dmul>
 8006b66:	e9cd 0100 	strd	r0, r1, [sp]
 8006b6a:	e7c4      	b.n	8006af6 <_dtoa_r+0x4e6>
 8006b6c:	462a      	mov	r2, r5
 8006b6e:	4633      	mov	r3, r6
 8006b70:	f7f9 fcee 	bl	8000550 <__aeabi_dmul>
 8006b74:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006b78:	eb0b 0507 	add.w	r5, fp, r7
 8006b7c:	465e      	mov	r6, fp
 8006b7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b82:	f7f9 ff7f 	bl	8000a84 <__aeabi_d2iz>
 8006b86:	4607      	mov	r7, r0
 8006b88:	f7f9 fc78 	bl	800047c <__aeabi_i2d>
 8006b8c:	3730      	adds	r7, #48	; 0x30
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b96:	f7f9 fb23 	bl	80001e0 <__aeabi_dsub>
 8006b9a:	f806 7b01 	strb.w	r7, [r6], #1
 8006b9e:	42ae      	cmp	r6, r5
 8006ba0:	e9cd 0100 	strd	r0, r1, [sp]
 8006ba4:	f04f 0200 	mov.w	r2, #0
 8006ba8:	d126      	bne.n	8006bf8 <_dtoa_r+0x5e8>
 8006baa:	4b1c      	ldr	r3, [pc, #112]	; (8006c1c <_dtoa_r+0x60c>)
 8006bac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006bb0:	f7f9 fb18 	bl	80001e4 <__adddf3>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bbc:	f7f9 ff58 	bl	8000a70 <__aeabi_dcmpgt>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d174      	bne.n	8006cae <_dtoa_r+0x69e>
 8006bc4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006bc8:	2000      	movs	r0, #0
 8006bca:	4914      	ldr	r1, [pc, #80]	; (8006c1c <_dtoa_r+0x60c>)
 8006bcc:	f7f9 fb08 	bl	80001e0 <__aeabi_dsub>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006bd8:	f7f9 ff2c 	bl	8000a34 <__aeabi_dcmplt>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	f43f af30 	beq.w	8006a42 <_dtoa_r+0x432>
 8006be2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006be6:	2b30      	cmp	r3, #48	; 0x30
 8006be8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006bec:	d002      	beq.n	8006bf4 <_dtoa_r+0x5e4>
 8006bee:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006bf2:	e04a      	b.n	8006c8a <_dtoa_r+0x67a>
 8006bf4:	4615      	mov	r5, r2
 8006bf6:	e7f4      	b.n	8006be2 <_dtoa_r+0x5d2>
 8006bf8:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <_dtoa_r+0x600>)
 8006bfa:	f7f9 fca9 	bl	8000550 <__aeabi_dmul>
 8006bfe:	e9cd 0100 	strd	r0, r1, [sp]
 8006c02:	e7bc      	b.n	8006b7e <_dtoa_r+0x56e>
 8006c04:	08009198 	.word	0x08009198
 8006c08:	08009170 	.word	0x08009170
 8006c0c:	3ff00000 	.word	0x3ff00000
 8006c10:	40240000 	.word	0x40240000
 8006c14:	401c0000 	.word	0x401c0000
 8006c18:	40140000 	.word	0x40140000
 8006c1c:	3fe00000 	.word	0x3fe00000
 8006c20:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006c24:	465d      	mov	r5, fp
 8006c26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	4639      	mov	r1, r7
 8006c2e:	f7f9 fdb9 	bl	80007a4 <__aeabi_ddiv>
 8006c32:	f7f9 ff27 	bl	8000a84 <__aeabi_d2iz>
 8006c36:	4680      	mov	r8, r0
 8006c38:	f7f9 fc20 	bl	800047c <__aeabi_i2d>
 8006c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c40:	f7f9 fc86 	bl	8000550 <__aeabi_dmul>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4630      	mov	r0, r6
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006c50:	f7f9 fac6 	bl	80001e0 <__aeabi_dsub>
 8006c54:	f805 6b01 	strb.w	r6, [r5], #1
 8006c58:	eba5 060b 	sub.w	r6, r5, fp
 8006c5c:	45b1      	cmp	r9, r6
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	d139      	bne.n	8006cd8 <_dtoa_r+0x6c8>
 8006c64:	f7f9 fabe 	bl	80001e4 <__adddf3>
 8006c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c6c:	4606      	mov	r6, r0
 8006c6e:	460f      	mov	r7, r1
 8006c70:	f7f9 fefe 	bl	8000a70 <__aeabi_dcmpgt>
 8006c74:	b9c8      	cbnz	r0, 8006caa <_dtoa_r+0x69a>
 8006c76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	4639      	mov	r1, r7
 8006c7e:	f7f9 fecf 	bl	8000a20 <__aeabi_dcmpeq>
 8006c82:	b110      	cbz	r0, 8006c8a <_dtoa_r+0x67a>
 8006c84:	f018 0f01 	tst.w	r8, #1
 8006c88:	d10f      	bne.n	8006caa <_dtoa_r+0x69a>
 8006c8a:	9904      	ldr	r1, [sp, #16]
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f000 fac1 	bl	8007214 <_Bfree>
 8006c92:	2300      	movs	r3, #0
 8006c94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c96:	702b      	strb	r3, [r5, #0]
 8006c98:	f10a 0301 	add.w	r3, sl, #1
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 8241 	beq.w	8007128 <_dtoa_r+0xb18>
 8006ca6:	601d      	str	r5, [r3, #0]
 8006ca8:	e23e      	b.n	8007128 <_dtoa_r+0xb18>
 8006caa:	f8cd a020 	str.w	sl, [sp, #32]
 8006cae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006cb2:	2a39      	cmp	r2, #57	; 0x39
 8006cb4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8006cb8:	d108      	bne.n	8006ccc <_dtoa_r+0x6bc>
 8006cba:	459b      	cmp	fp, r3
 8006cbc:	d10a      	bne.n	8006cd4 <_dtoa_r+0x6c4>
 8006cbe:	9b08      	ldr	r3, [sp, #32]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	9308      	str	r3, [sp, #32]
 8006cc4:	2330      	movs	r3, #48	; 0x30
 8006cc6:	f88b 3000 	strb.w	r3, [fp]
 8006cca:	465b      	mov	r3, fp
 8006ccc:	781a      	ldrb	r2, [r3, #0]
 8006cce:	3201      	adds	r2, #1
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	e78c      	b.n	8006bee <_dtoa_r+0x5de>
 8006cd4:	461d      	mov	r5, r3
 8006cd6:	e7ea      	b.n	8006cae <_dtoa_r+0x69e>
 8006cd8:	2200      	movs	r2, #0
 8006cda:	4b9b      	ldr	r3, [pc, #620]	; (8006f48 <_dtoa_r+0x938>)
 8006cdc:	f7f9 fc38 	bl	8000550 <__aeabi_dmul>
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	4606      	mov	r6, r0
 8006ce6:	460f      	mov	r7, r1
 8006ce8:	f7f9 fe9a 	bl	8000a20 <__aeabi_dcmpeq>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d09a      	beq.n	8006c26 <_dtoa_r+0x616>
 8006cf0:	e7cb      	b.n	8006c8a <_dtoa_r+0x67a>
 8006cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cf4:	2a00      	cmp	r2, #0
 8006cf6:	f000 808b 	beq.w	8006e10 <_dtoa_r+0x800>
 8006cfa:	9a06      	ldr	r2, [sp, #24]
 8006cfc:	2a01      	cmp	r2, #1
 8006cfe:	dc6e      	bgt.n	8006dde <_dtoa_r+0x7ce>
 8006d00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d02:	2a00      	cmp	r2, #0
 8006d04:	d067      	beq.n	8006dd6 <_dtoa_r+0x7c6>
 8006d06:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d0a:	9f07      	ldr	r7, [sp, #28]
 8006d0c:	9d05      	ldr	r5, [sp, #20]
 8006d0e:	9a05      	ldr	r2, [sp, #20]
 8006d10:	2101      	movs	r1, #1
 8006d12:	441a      	add	r2, r3
 8006d14:	4620      	mov	r0, r4
 8006d16:	9205      	str	r2, [sp, #20]
 8006d18:	4498      	add	r8, r3
 8006d1a:	f000 fb1b 	bl	8007354 <__i2b>
 8006d1e:	4606      	mov	r6, r0
 8006d20:	2d00      	cmp	r5, #0
 8006d22:	dd0c      	ble.n	8006d3e <_dtoa_r+0x72e>
 8006d24:	f1b8 0f00 	cmp.w	r8, #0
 8006d28:	dd09      	ble.n	8006d3e <_dtoa_r+0x72e>
 8006d2a:	4545      	cmp	r5, r8
 8006d2c:	9a05      	ldr	r2, [sp, #20]
 8006d2e:	462b      	mov	r3, r5
 8006d30:	bfa8      	it	ge
 8006d32:	4643      	movge	r3, r8
 8006d34:	1ad2      	subs	r2, r2, r3
 8006d36:	9205      	str	r2, [sp, #20]
 8006d38:	1aed      	subs	r5, r5, r3
 8006d3a:	eba8 0803 	sub.w	r8, r8, r3
 8006d3e:	9b07      	ldr	r3, [sp, #28]
 8006d40:	b1eb      	cbz	r3, 8006d7e <_dtoa_r+0x76e>
 8006d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d067      	beq.n	8006e18 <_dtoa_r+0x808>
 8006d48:	b18f      	cbz	r7, 8006d6e <_dtoa_r+0x75e>
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	463a      	mov	r2, r7
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f000 fba0 	bl	8007494 <__pow5mult>
 8006d54:	9a04      	ldr	r2, [sp, #16]
 8006d56:	4601      	mov	r1, r0
 8006d58:	4606      	mov	r6, r0
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f000 fb03 	bl	8007366 <__multiply>
 8006d60:	9904      	ldr	r1, [sp, #16]
 8006d62:	9008      	str	r0, [sp, #32]
 8006d64:	4620      	mov	r0, r4
 8006d66:	f000 fa55 	bl	8007214 <_Bfree>
 8006d6a:	9b08      	ldr	r3, [sp, #32]
 8006d6c:	9304      	str	r3, [sp, #16]
 8006d6e:	9b07      	ldr	r3, [sp, #28]
 8006d70:	1bda      	subs	r2, r3, r7
 8006d72:	d004      	beq.n	8006d7e <_dtoa_r+0x76e>
 8006d74:	9904      	ldr	r1, [sp, #16]
 8006d76:	4620      	mov	r0, r4
 8006d78:	f000 fb8c 	bl	8007494 <__pow5mult>
 8006d7c:	9004      	str	r0, [sp, #16]
 8006d7e:	2101      	movs	r1, #1
 8006d80:	4620      	mov	r0, r4
 8006d82:	f000 fae7 	bl	8007354 <__i2b>
 8006d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d88:	4607      	mov	r7, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f000 81d0 	beq.w	8007130 <_dtoa_r+0xb20>
 8006d90:	461a      	mov	r2, r3
 8006d92:	4601      	mov	r1, r0
 8006d94:	4620      	mov	r0, r4
 8006d96:	f000 fb7d 	bl	8007494 <__pow5mult>
 8006d9a:	9b06      	ldr	r3, [sp, #24]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	4607      	mov	r7, r0
 8006da0:	dc40      	bgt.n	8006e24 <_dtoa_r+0x814>
 8006da2:	9b00      	ldr	r3, [sp, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d139      	bne.n	8006e1c <_dtoa_r+0x80c>
 8006da8:	9b01      	ldr	r3, [sp, #4]
 8006daa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d136      	bne.n	8006e20 <_dtoa_r+0x810>
 8006db2:	9b01      	ldr	r3, [sp, #4]
 8006db4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006db8:	0d1b      	lsrs	r3, r3, #20
 8006dba:	051b      	lsls	r3, r3, #20
 8006dbc:	b12b      	cbz	r3, 8006dca <_dtoa_r+0x7ba>
 8006dbe:	9b05      	ldr	r3, [sp, #20]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	9305      	str	r3, [sp, #20]
 8006dc4:	f108 0801 	add.w	r8, r8, #1
 8006dc8:	2301      	movs	r3, #1
 8006dca:	9307      	str	r3, [sp, #28]
 8006dcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d12a      	bne.n	8006e28 <_dtoa_r+0x818>
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	e030      	b.n	8006e38 <_dtoa_r+0x828>
 8006dd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006dd8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ddc:	e795      	b.n	8006d0a <_dtoa_r+0x6fa>
 8006dde:	9b07      	ldr	r3, [sp, #28]
 8006de0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8006de4:	42bb      	cmp	r3, r7
 8006de6:	bfbf      	itttt	lt
 8006de8:	9b07      	ldrlt	r3, [sp, #28]
 8006dea:	9707      	strlt	r7, [sp, #28]
 8006dec:	1afa      	sublt	r2, r7, r3
 8006dee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006df0:	bfbb      	ittet	lt
 8006df2:	189b      	addlt	r3, r3, r2
 8006df4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006df6:	1bdf      	subge	r7, r3, r7
 8006df8:	2700      	movlt	r7, #0
 8006dfa:	f1b9 0f00 	cmp.w	r9, #0
 8006dfe:	bfb5      	itete	lt
 8006e00:	9b05      	ldrlt	r3, [sp, #20]
 8006e02:	9d05      	ldrge	r5, [sp, #20]
 8006e04:	eba3 0509 	sublt.w	r5, r3, r9
 8006e08:	464b      	movge	r3, r9
 8006e0a:	bfb8      	it	lt
 8006e0c:	2300      	movlt	r3, #0
 8006e0e:	e77e      	b.n	8006d0e <_dtoa_r+0x6fe>
 8006e10:	9f07      	ldr	r7, [sp, #28]
 8006e12:	9d05      	ldr	r5, [sp, #20]
 8006e14:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006e16:	e783      	b.n	8006d20 <_dtoa_r+0x710>
 8006e18:	9a07      	ldr	r2, [sp, #28]
 8006e1a:	e7ab      	b.n	8006d74 <_dtoa_r+0x764>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e7d4      	b.n	8006dca <_dtoa_r+0x7ba>
 8006e20:	9b00      	ldr	r3, [sp, #0]
 8006e22:	e7d2      	b.n	8006dca <_dtoa_r+0x7ba>
 8006e24:	2300      	movs	r3, #0
 8006e26:	9307      	str	r3, [sp, #28]
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006e2e:	6918      	ldr	r0, [r3, #16]
 8006e30:	f000 fa42 	bl	80072b8 <__hi0bits>
 8006e34:	f1c0 0020 	rsb	r0, r0, #32
 8006e38:	4440      	add	r0, r8
 8006e3a:	f010 001f 	ands.w	r0, r0, #31
 8006e3e:	d047      	beq.n	8006ed0 <_dtoa_r+0x8c0>
 8006e40:	f1c0 0320 	rsb	r3, r0, #32
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	dd3b      	ble.n	8006ec0 <_dtoa_r+0x8b0>
 8006e48:	9b05      	ldr	r3, [sp, #20]
 8006e4a:	f1c0 001c 	rsb	r0, r0, #28
 8006e4e:	4403      	add	r3, r0
 8006e50:	9305      	str	r3, [sp, #20]
 8006e52:	4405      	add	r5, r0
 8006e54:	4480      	add	r8, r0
 8006e56:	9b05      	ldr	r3, [sp, #20]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	dd05      	ble.n	8006e68 <_dtoa_r+0x858>
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	9904      	ldr	r1, [sp, #16]
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 fb65 	bl	8007530 <__lshift>
 8006e66:	9004      	str	r0, [sp, #16]
 8006e68:	f1b8 0f00 	cmp.w	r8, #0
 8006e6c:	dd05      	ble.n	8006e7a <_dtoa_r+0x86a>
 8006e6e:	4639      	mov	r1, r7
 8006e70:	4642      	mov	r2, r8
 8006e72:	4620      	mov	r0, r4
 8006e74:	f000 fb5c 	bl	8007530 <__lshift>
 8006e78:	4607      	mov	r7, r0
 8006e7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e7c:	b353      	cbz	r3, 8006ed4 <_dtoa_r+0x8c4>
 8006e7e:	4639      	mov	r1, r7
 8006e80:	9804      	ldr	r0, [sp, #16]
 8006e82:	f000 fba9 	bl	80075d8 <__mcmp>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	da24      	bge.n	8006ed4 <_dtoa_r+0x8c4>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	220a      	movs	r2, #10
 8006e8e:	9904      	ldr	r1, [sp, #16]
 8006e90:	4620      	mov	r0, r4
 8006e92:	f000 f9d6 	bl	8007242 <__multadd>
 8006e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e98:	9004      	str	r0, [sp, #16]
 8006e9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 814d 	beq.w	800713e <_dtoa_r+0xb2e>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	220a      	movs	r2, #10
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f000 f9c9 	bl	8007242 <__multadd>
 8006eb0:	9b02      	ldr	r3, [sp, #8]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	4606      	mov	r6, r0
 8006eb6:	dc4f      	bgt.n	8006f58 <_dtoa_r+0x948>
 8006eb8:	9b06      	ldr	r3, [sp, #24]
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	dd4c      	ble.n	8006f58 <_dtoa_r+0x948>
 8006ebe:	e011      	b.n	8006ee4 <_dtoa_r+0x8d4>
 8006ec0:	d0c9      	beq.n	8006e56 <_dtoa_r+0x846>
 8006ec2:	9a05      	ldr	r2, [sp, #20]
 8006ec4:	331c      	adds	r3, #28
 8006ec6:	441a      	add	r2, r3
 8006ec8:	9205      	str	r2, [sp, #20]
 8006eca:	441d      	add	r5, r3
 8006ecc:	4498      	add	r8, r3
 8006ece:	e7c2      	b.n	8006e56 <_dtoa_r+0x846>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	e7f6      	b.n	8006ec2 <_dtoa_r+0x8b2>
 8006ed4:	f1b9 0f00 	cmp.w	r9, #0
 8006ed8:	dc38      	bgt.n	8006f4c <_dtoa_r+0x93c>
 8006eda:	9b06      	ldr	r3, [sp, #24]
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	dd35      	ble.n	8006f4c <_dtoa_r+0x93c>
 8006ee0:	f8cd 9008 	str.w	r9, [sp, #8]
 8006ee4:	9b02      	ldr	r3, [sp, #8]
 8006ee6:	b963      	cbnz	r3, 8006f02 <_dtoa_r+0x8f2>
 8006ee8:	4639      	mov	r1, r7
 8006eea:	2205      	movs	r2, #5
 8006eec:	4620      	mov	r0, r4
 8006eee:	f000 f9a8 	bl	8007242 <__multadd>
 8006ef2:	4601      	mov	r1, r0
 8006ef4:	4607      	mov	r7, r0
 8006ef6:	9804      	ldr	r0, [sp, #16]
 8006ef8:	f000 fb6e 	bl	80075d8 <__mcmp>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	f73f adcc 	bgt.w	8006a9a <_dtoa_r+0x48a>
 8006f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f04:	465d      	mov	r5, fp
 8006f06:	ea6f 0a03 	mvn.w	sl, r3
 8006f0a:	f04f 0900 	mov.w	r9, #0
 8006f0e:	4639      	mov	r1, r7
 8006f10:	4620      	mov	r0, r4
 8006f12:	f000 f97f 	bl	8007214 <_Bfree>
 8006f16:	2e00      	cmp	r6, #0
 8006f18:	f43f aeb7 	beq.w	8006c8a <_dtoa_r+0x67a>
 8006f1c:	f1b9 0f00 	cmp.w	r9, #0
 8006f20:	d005      	beq.n	8006f2e <_dtoa_r+0x91e>
 8006f22:	45b1      	cmp	r9, r6
 8006f24:	d003      	beq.n	8006f2e <_dtoa_r+0x91e>
 8006f26:	4649      	mov	r1, r9
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f000 f973 	bl	8007214 <_Bfree>
 8006f2e:	4631      	mov	r1, r6
 8006f30:	4620      	mov	r0, r4
 8006f32:	f000 f96f 	bl	8007214 <_Bfree>
 8006f36:	e6a8      	b.n	8006c8a <_dtoa_r+0x67a>
 8006f38:	2700      	movs	r7, #0
 8006f3a:	463e      	mov	r6, r7
 8006f3c:	e7e1      	b.n	8006f02 <_dtoa_r+0x8f2>
 8006f3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006f42:	463e      	mov	r6, r7
 8006f44:	e5a9      	b.n	8006a9a <_dtoa_r+0x48a>
 8006f46:	bf00      	nop
 8006f48:	40240000 	.word	0x40240000
 8006f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f4e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 80fa 	beq.w	800714c <_dtoa_r+0xb3c>
 8006f58:	2d00      	cmp	r5, #0
 8006f5a:	dd05      	ble.n	8006f68 <_dtoa_r+0x958>
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	462a      	mov	r2, r5
 8006f60:	4620      	mov	r0, r4
 8006f62:	f000 fae5 	bl	8007530 <__lshift>
 8006f66:	4606      	mov	r6, r0
 8006f68:	9b07      	ldr	r3, [sp, #28]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d04c      	beq.n	8007008 <_dtoa_r+0x9f8>
 8006f6e:	6871      	ldr	r1, [r6, #4]
 8006f70:	4620      	mov	r0, r4
 8006f72:	f000 f91b 	bl	80071ac <_Balloc>
 8006f76:	6932      	ldr	r2, [r6, #16]
 8006f78:	3202      	adds	r2, #2
 8006f7a:	4605      	mov	r5, r0
 8006f7c:	0092      	lsls	r2, r2, #2
 8006f7e:	f106 010c 	add.w	r1, r6, #12
 8006f82:	300c      	adds	r0, #12
 8006f84:	f7fe ff59 	bl	8005e3a <memcpy>
 8006f88:	2201      	movs	r2, #1
 8006f8a:	4629      	mov	r1, r5
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	f000 facf 	bl	8007530 <__lshift>
 8006f92:	9b00      	ldr	r3, [sp, #0]
 8006f94:	f8cd b014 	str.w	fp, [sp, #20]
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	46b1      	mov	r9, r6
 8006f9e:	9307      	str	r3, [sp, #28]
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	4639      	mov	r1, r7
 8006fa4:	9804      	ldr	r0, [sp, #16]
 8006fa6:	f7ff faa4 	bl	80064f2 <quorem>
 8006faa:	4649      	mov	r1, r9
 8006fac:	4605      	mov	r5, r0
 8006fae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006fb2:	9804      	ldr	r0, [sp, #16]
 8006fb4:	f000 fb10 	bl	80075d8 <__mcmp>
 8006fb8:	4632      	mov	r2, r6
 8006fba:	9000      	str	r0, [sp, #0]
 8006fbc:	4639      	mov	r1, r7
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f000 fb24 	bl	800760c <__mdiff>
 8006fc4:	68c3      	ldr	r3, [r0, #12]
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	bb03      	cbnz	r3, 800700c <_dtoa_r+0x9fc>
 8006fca:	4601      	mov	r1, r0
 8006fcc:	9008      	str	r0, [sp, #32]
 8006fce:	9804      	ldr	r0, [sp, #16]
 8006fd0:	f000 fb02 	bl	80075d8 <__mcmp>
 8006fd4:	9a08      	ldr	r2, [sp, #32]
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	4611      	mov	r1, r2
 8006fda:	4620      	mov	r0, r4
 8006fdc:	9308      	str	r3, [sp, #32]
 8006fde:	f000 f919 	bl	8007214 <_Bfree>
 8006fe2:	9b08      	ldr	r3, [sp, #32]
 8006fe4:	b9a3      	cbnz	r3, 8007010 <_dtoa_r+0xa00>
 8006fe6:	9a06      	ldr	r2, [sp, #24]
 8006fe8:	b992      	cbnz	r2, 8007010 <_dtoa_r+0xa00>
 8006fea:	9a07      	ldr	r2, [sp, #28]
 8006fec:	b982      	cbnz	r2, 8007010 <_dtoa_r+0xa00>
 8006fee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006ff2:	d029      	beq.n	8007048 <_dtoa_r+0xa38>
 8006ff4:	9b00      	ldr	r3, [sp, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	dd01      	ble.n	8006ffe <_dtoa_r+0x9ee>
 8006ffa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006ffe:	9b05      	ldr	r3, [sp, #20]
 8007000:	1c5d      	adds	r5, r3, #1
 8007002:	f883 8000 	strb.w	r8, [r3]
 8007006:	e782      	b.n	8006f0e <_dtoa_r+0x8fe>
 8007008:	4630      	mov	r0, r6
 800700a:	e7c2      	b.n	8006f92 <_dtoa_r+0x982>
 800700c:	2301      	movs	r3, #1
 800700e:	e7e3      	b.n	8006fd8 <_dtoa_r+0x9c8>
 8007010:	9a00      	ldr	r2, [sp, #0]
 8007012:	2a00      	cmp	r2, #0
 8007014:	db04      	blt.n	8007020 <_dtoa_r+0xa10>
 8007016:	d125      	bne.n	8007064 <_dtoa_r+0xa54>
 8007018:	9a06      	ldr	r2, [sp, #24]
 800701a:	bb1a      	cbnz	r2, 8007064 <_dtoa_r+0xa54>
 800701c:	9a07      	ldr	r2, [sp, #28]
 800701e:	bb0a      	cbnz	r2, 8007064 <_dtoa_r+0xa54>
 8007020:	2b00      	cmp	r3, #0
 8007022:	ddec      	ble.n	8006ffe <_dtoa_r+0x9ee>
 8007024:	2201      	movs	r2, #1
 8007026:	9904      	ldr	r1, [sp, #16]
 8007028:	4620      	mov	r0, r4
 800702a:	f000 fa81 	bl	8007530 <__lshift>
 800702e:	4639      	mov	r1, r7
 8007030:	9004      	str	r0, [sp, #16]
 8007032:	f000 fad1 	bl	80075d8 <__mcmp>
 8007036:	2800      	cmp	r0, #0
 8007038:	dc03      	bgt.n	8007042 <_dtoa_r+0xa32>
 800703a:	d1e0      	bne.n	8006ffe <_dtoa_r+0x9ee>
 800703c:	f018 0f01 	tst.w	r8, #1
 8007040:	d0dd      	beq.n	8006ffe <_dtoa_r+0x9ee>
 8007042:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007046:	d1d8      	bne.n	8006ffa <_dtoa_r+0x9ea>
 8007048:	9b05      	ldr	r3, [sp, #20]
 800704a:	9a05      	ldr	r2, [sp, #20]
 800704c:	1c5d      	adds	r5, r3, #1
 800704e:	2339      	movs	r3, #57	; 0x39
 8007050:	7013      	strb	r3, [r2, #0]
 8007052:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007056:	2b39      	cmp	r3, #57	; 0x39
 8007058:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800705c:	d04f      	beq.n	80070fe <_dtoa_r+0xaee>
 800705e:	3301      	adds	r3, #1
 8007060:	7013      	strb	r3, [r2, #0]
 8007062:	e754      	b.n	8006f0e <_dtoa_r+0x8fe>
 8007064:	9a05      	ldr	r2, [sp, #20]
 8007066:	2b00      	cmp	r3, #0
 8007068:	f102 0501 	add.w	r5, r2, #1
 800706c:	dd06      	ble.n	800707c <_dtoa_r+0xa6c>
 800706e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007072:	d0e9      	beq.n	8007048 <_dtoa_r+0xa38>
 8007074:	f108 0801 	add.w	r8, r8, #1
 8007078:	9b05      	ldr	r3, [sp, #20]
 800707a:	e7c2      	b.n	8007002 <_dtoa_r+0x9f2>
 800707c:	9a02      	ldr	r2, [sp, #8]
 800707e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007082:	eba5 030b 	sub.w	r3, r5, fp
 8007086:	4293      	cmp	r3, r2
 8007088:	d021      	beq.n	80070ce <_dtoa_r+0xabe>
 800708a:	2300      	movs	r3, #0
 800708c:	220a      	movs	r2, #10
 800708e:	9904      	ldr	r1, [sp, #16]
 8007090:	4620      	mov	r0, r4
 8007092:	f000 f8d6 	bl	8007242 <__multadd>
 8007096:	45b1      	cmp	r9, r6
 8007098:	9004      	str	r0, [sp, #16]
 800709a:	f04f 0300 	mov.w	r3, #0
 800709e:	f04f 020a 	mov.w	r2, #10
 80070a2:	4649      	mov	r1, r9
 80070a4:	4620      	mov	r0, r4
 80070a6:	d105      	bne.n	80070b4 <_dtoa_r+0xaa4>
 80070a8:	f000 f8cb 	bl	8007242 <__multadd>
 80070ac:	4681      	mov	r9, r0
 80070ae:	4606      	mov	r6, r0
 80070b0:	9505      	str	r5, [sp, #20]
 80070b2:	e776      	b.n	8006fa2 <_dtoa_r+0x992>
 80070b4:	f000 f8c5 	bl	8007242 <__multadd>
 80070b8:	4631      	mov	r1, r6
 80070ba:	4681      	mov	r9, r0
 80070bc:	2300      	movs	r3, #0
 80070be:	220a      	movs	r2, #10
 80070c0:	4620      	mov	r0, r4
 80070c2:	f000 f8be 	bl	8007242 <__multadd>
 80070c6:	4606      	mov	r6, r0
 80070c8:	e7f2      	b.n	80070b0 <_dtoa_r+0xaa0>
 80070ca:	f04f 0900 	mov.w	r9, #0
 80070ce:	2201      	movs	r2, #1
 80070d0:	9904      	ldr	r1, [sp, #16]
 80070d2:	4620      	mov	r0, r4
 80070d4:	f000 fa2c 	bl	8007530 <__lshift>
 80070d8:	4639      	mov	r1, r7
 80070da:	9004      	str	r0, [sp, #16]
 80070dc:	f000 fa7c 	bl	80075d8 <__mcmp>
 80070e0:	2800      	cmp	r0, #0
 80070e2:	dcb6      	bgt.n	8007052 <_dtoa_r+0xa42>
 80070e4:	d102      	bne.n	80070ec <_dtoa_r+0xadc>
 80070e6:	f018 0f01 	tst.w	r8, #1
 80070ea:	d1b2      	bne.n	8007052 <_dtoa_r+0xa42>
 80070ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070f0:	2b30      	cmp	r3, #48	; 0x30
 80070f2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80070f6:	f47f af0a 	bne.w	8006f0e <_dtoa_r+0x8fe>
 80070fa:	4615      	mov	r5, r2
 80070fc:	e7f6      	b.n	80070ec <_dtoa_r+0xadc>
 80070fe:	4593      	cmp	fp, r2
 8007100:	d105      	bne.n	800710e <_dtoa_r+0xafe>
 8007102:	2331      	movs	r3, #49	; 0x31
 8007104:	f10a 0a01 	add.w	sl, sl, #1
 8007108:	f88b 3000 	strb.w	r3, [fp]
 800710c:	e6ff      	b.n	8006f0e <_dtoa_r+0x8fe>
 800710e:	4615      	mov	r5, r2
 8007110:	e79f      	b.n	8007052 <_dtoa_r+0xa42>
 8007112:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007178 <_dtoa_r+0xb68>
 8007116:	e007      	b.n	8007128 <_dtoa_r+0xb18>
 8007118:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800711a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800717c <_dtoa_r+0xb6c>
 800711e:	b11b      	cbz	r3, 8007128 <_dtoa_r+0xb18>
 8007120:	f10b 0308 	add.w	r3, fp, #8
 8007124:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	4658      	mov	r0, fp
 800712a:	b017      	add	sp, #92	; 0x5c
 800712c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007130:	9b06      	ldr	r3, [sp, #24]
 8007132:	2b01      	cmp	r3, #1
 8007134:	f77f ae35 	ble.w	8006da2 <_dtoa_r+0x792>
 8007138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800713a:	9307      	str	r3, [sp, #28]
 800713c:	e649      	b.n	8006dd2 <_dtoa_r+0x7c2>
 800713e:	9b02      	ldr	r3, [sp, #8]
 8007140:	2b00      	cmp	r3, #0
 8007142:	dc03      	bgt.n	800714c <_dtoa_r+0xb3c>
 8007144:	9b06      	ldr	r3, [sp, #24]
 8007146:	2b02      	cmp	r3, #2
 8007148:	f73f aecc 	bgt.w	8006ee4 <_dtoa_r+0x8d4>
 800714c:	465d      	mov	r5, fp
 800714e:	4639      	mov	r1, r7
 8007150:	9804      	ldr	r0, [sp, #16]
 8007152:	f7ff f9ce 	bl	80064f2 <quorem>
 8007156:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800715a:	f805 8b01 	strb.w	r8, [r5], #1
 800715e:	9a02      	ldr	r2, [sp, #8]
 8007160:	eba5 030b 	sub.w	r3, r5, fp
 8007164:	429a      	cmp	r2, r3
 8007166:	ddb0      	ble.n	80070ca <_dtoa_r+0xaba>
 8007168:	2300      	movs	r3, #0
 800716a:	220a      	movs	r2, #10
 800716c:	9904      	ldr	r1, [sp, #16]
 800716e:	4620      	mov	r0, r4
 8007170:	f000 f867 	bl	8007242 <__multadd>
 8007174:	9004      	str	r0, [sp, #16]
 8007176:	e7ea      	b.n	800714e <_dtoa_r+0xb3e>
 8007178:	080090fc 	.word	0x080090fc
 800717c:	080090fe 	.word	0x080090fe

08007180 <_localeconv_r>:
 8007180:	4b04      	ldr	r3, [pc, #16]	; (8007194 <_localeconv_r+0x14>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6a18      	ldr	r0, [r3, #32]
 8007186:	4b04      	ldr	r3, [pc, #16]	; (8007198 <_localeconv_r+0x18>)
 8007188:	2800      	cmp	r0, #0
 800718a:	bf08      	it	eq
 800718c:	4618      	moveq	r0, r3
 800718e:	30f0      	adds	r0, #240	; 0xf0
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	20000064 	.word	0x20000064
 8007198:	200000c8 	.word	0x200000c8

0800719c <malloc>:
 800719c:	4b02      	ldr	r3, [pc, #8]	; (80071a8 <malloc+0xc>)
 800719e:	4601      	mov	r1, r0
 80071a0:	6818      	ldr	r0, [r3, #0]
 80071a2:	f000 baed 	b.w	8007780 <_malloc_r>
 80071a6:	bf00      	nop
 80071a8:	20000064 	.word	0x20000064

080071ac <_Balloc>:
 80071ac:	b570      	push	{r4, r5, r6, lr}
 80071ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80071b0:	4604      	mov	r4, r0
 80071b2:	460e      	mov	r6, r1
 80071b4:	b93d      	cbnz	r5, 80071c6 <_Balloc+0x1a>
 80071b6:	2010      	movs	r0, #16
 80071b8:	f7ff fff0 	bl	800719c <malloc>
 80071bc:	6260      	str	r0, [r4, #36]	; 0x24
 80071be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071c2:	6005      	str	r5, [r0, #0]
 80071c4:	60c5      	str	r5, [r0, #12]
 80071c6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80071c8:	68eb      	ldr	r3, [r5, #12]
 80071ca:	b183      	cbz	r3, 80071ee <_Balloc+0x42>
 80071cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80071d4:	b9b8      	cbnz	r0, 8007206 <_Balloc+0x5a>
 80071d6:	2101      	movs	r1, #1
 80071d8:	fa01 f506 	lsl.w	r5, r1, r6
 80071dc:	1d6a      	adds	r2, r5, #5
 80071de:	0092      	lsls	r2, r2, #2
 80071e0:	4620      	mov	r0, r4
 80071e2:	f000 fabf 	bl	8007764 <_calloc_r>
 80071e6:	b160      	cbz	r0, 8007202 <_Balloc+0x56>
 80071e8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80071ec:	e00e      	b.n	800720c <_Balloc+0x60>
 80071ee:	2221      	movs	r2, #33	; 0x21
 80071f0:	2104      	movs	r1, #4
 80071f2:	4620      	mov	r0, r4
 80071f4:	f000 fab6 	bl	8007764 <_calloc_r>
 80071f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071fa:	60e8      	str	r0, [r5, #12]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e4      	bne.n	80071cc <_Balloc+0x20>
 8007202:	2000      	movs	r0, #0
 8007204:	bd70      	pop	{r4, r5, r6, pc}
 8007206:	6802      	ldr	r2, [r0, #0]
 8007208:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800720c:	2300      	movs	r3, #0
 800720e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007212:	e7f7      	b.n	8007204 <_Balloc+0x58>

08007214 <_Bfree>:
 8007214:	b570      	push	{r4, r5, r6, lr}
 8007216:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007218:	4606      	mov	r6, r0
 800721a:	460d      	mov	r5, r1
 800721c:	b93c      	cbnz	r4, 800722e <_Bfree+0x1a>
 800721e:	2010      	movs	r0, #16
 8007220:	f7ff ffbc 	bl	800719c <malloc>
 8007224:	6270      	str	r0, [r6, #36]	; 0x24
 8007226:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800722a:	6004      	str	r4, [r0, #0]
 800722c:	60c4      	str	r4, [r0, #12]
 800722e:	b13d      	cbz	r5, 8007240 <_Bfree+0x2c>
 8007230:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007232:	686a      	ldr	r2, [r5, #4]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800723a:	6029      	str	r1, [r5, #0]
 800723c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007240:	bd70      	pop	{r4, r5, r6, pc}

08007242 <__multadd>:
 8007242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007246:	690d      	ldr	r5, [r1, #16]
 8007248:	461f      	mov	r7, r3
 800724a:	4606      	mov	r6, r0
 800724c:	460c      	mov	r4, r1
 800724e:	f101 0c14 	add.w	ip, r1, #20
 8007252:	2300      	movs	r3, #0
 8007254:	f8dc 0000 	ldr.w	r0, [ip]
 8007258:	b281      	uxth	r1, r0
 800725a:	fb02 7101 	mla	r1, r2, r1, r7
 800725e:	0c0f      	lsrs	r7, r1, #16
 8007260:	0c00      	lsrs	r0, r0, #16
 8007262:	fb02 7000 	mla	r0, r2, r0, r7
 8007266:	b289      	uxth	r1, r1
 8007268:	3301      	adds	r3, #1
 800726a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800726e:	429d      	cmp	r5, r3
 8007270:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007274:	f84c 1b04 	str.w	r1, [ip], #4
 8007278:	dcec      	bgt.n	8007254 <__multadd+0x12>
 800727a:	b1d7      	cbz	r7, 80072b2 <__multadd+0x70>
 800727c:	68a3      	ldr	r3, [r4, #8]
 800727e:	42ab      	cmp	r3, r5
 8007280:	dc12      	bgt.n	80072a8 <__multadd+0x66>
 8007282:	6861      	ldr	r1, [r4, #4]
 8007284:	4630      	mov	r0, r6
 8007286:	3101      	adds	r1, #1
 8007288:	f7ff ff90 	bl	80071ac <_Balloc>
 800728c:	6922      	ldr	r2, [r4, #16]
 800728e:	3202      	adds	r2, #2
 8007290:	f104 010c 	add.w	r1, r4, #12
 8007294:	4680      	mov	r8, r0
 8007296:	0092      	lsls	r2, r2, #2
 8007298:	300c      	adds	r0, #12
 800729a:	f7fe fdce 	bl	8005e3a <memcpy>
 800729e:	4621      	mov	r1, r4
 80072a0:	4630      	mov	r0, r6
 80072a2:	f7ff ffb7 	bl	8007214 <_Bfree>
 80072a6:	4644      	mov	r4, r8
 80072a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072ac:	3501      	adds	r5, #1
 80072ae:	615f      	str	r7, [r3, #20]
 80072b0:	6125      	str	r5, [r4, #16]
 80072b2:	4620      	mov	r0, r4
 80072b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080072b8 <__hi0bits>:
 80072b8:	0c02      	lsrs	r2, r0, #16
 80072ba:	0412      	lsls	r2, r2, #16
 80072bc:	4603      	mov	r3, r0
 80072be:	b9b2      	cbnz	r2, 80072ee <__hi0bits+0x36>
 80072c0:	0403      	lsls	r3, r0, #16
 80072c2:	2010      	movs	r0, #16
 80072c4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80072c8:	bf04      	itt	eq
 80072ca:	021b      	lsleq	r3, r3, #8
 80072cc:	3008      	addeq	r0, #8
 80072ce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80072d2:	bf04      	itt	eq
 80072d4:	011b      	lsleq	r3, r3, #4
 80072d6:	3004      	addeq	r0, #4
 80072d8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80072dc:	bf04      	itt	eq
 80072de:	009b      	lsleq	r3, r3, #2
 80072e0:	3002      	addeq	r0, #2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	db06      	blt.n	80072f4 <__hi0bits+0x3c>
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	d503      	bpl.n	80072f2 <__hi0bits+0x3a>
 80072ea:	3001      	adds	r0, #1
 80072ec:	4770      	bx	lr
 80072ee:	2000      	movs	r0, #0
 80072f0:	e7e8      	b.n	80072c4 <__hi0bits+0xc>
 80072f2:	2020      	movs	r0, #32
 80072f4:	4770      	bx	lr

080072f6 <__lo0bits>:
 80072f6:	6803      	ldr	r3, [r0, #0]
 80072f8:	f013 0207 	ands.w	r2, r3, #7
 80072fc:	4601      	mov	r1, r0
 80072fe:	d00b      	beq.n	8007318 <__lo0bits+0x22>
 8007300:	07da      	lsls	r2, r3, #31
 8007302:	d423      	bmi.n	800734c <__lo0bits+0x56>
 8007304:	0798      	lsls	r0, r3, #30
 8007306:	bf49      	itett	mi
 8007308:	085b      	lsrmi	r3, r3, #1
 800730a:	089b      	lsrpl	r3, r3, #2
 800730c:	2001      	movmi	r0, #1
 800730e:	600b      	strmi	r3, [r1, #0]
 8007310:	bf5c      	itt	pl
 8007312:	600b      	strpl	r3, [r1, #0]
 8007314:	2002      	movpl	r0, #2
 8007316:	4770      	bx	lr
 8007318:	b298      	uxth	r0, r3
 800731a:	b9a8      	cbnz	r0, 8007348 <__lo0bits+0x52>
 800731c:	0c1b      	lsrs	r3, r3, #16
 800731e:	2010      	movs	r0, #16
 8007320:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007324:	bf04      	itt	eq
 8007326:	0a1b      	lsreq	r3, r3, #8
 8007328:	3008      	addeq	r0, #8
 800732a:	071a      	lsls	r2, r3, #28
 800732c:	bf04      	itt	eq
 800732e:	091b      	lsreq	r3, r3, #4
 8007330:	3004      	addeq	r0, #4
 8007332:	079a      	lsls	r2, r3, #30
 8007334:	bf04      	itt	eq
 8007336:	089b      	lsreq	r3, r3, #2
 8007338:	3002      	addeq	r0, #2
 800733a:	07da      	lsls	r2, r3, #31
 800733c:	d402      	bmi.n	8007344 <__lo0bits+0x4e>
 800733e:	085b      	lsrs	r3, r3, #1
 8007340:	d006      	beq.n	8007350 <__lo0bits+0x5a>
 8007342:	3001      	adds	r0, #1
 8007344:	600b      	str	r3, [r1, #0]
 8007346:	4770      	bx	lr
 8007348:	4610      	mov	r0, r2
 800734a:	e7e9      	b.n	8007320 <__lo0bits+0x2a>
 800734c:	2000      	movs	r0, #0
 800734e:	4770      	bx	lr
 8007350:	2020      	movs	r0, #32
 8007352:	4770      	bx	lr

08007354 <__i2b>:
 8007354:	b510      	push	{r4, lr}
 8007356:	460c      	mov	r4, r1
 8007358:	2101      	movs	r1, #1
 800735a:	f7ff ff27 	bl	80071ac <_Balloc>
 800735e:	2201      	movs	r2, #1
 8007360:	6144      	str	r4, [r0, #20]
 8007362:	6102      	str	r2, [r0, #16]
 8007364:	bd10      	pop	{r4, pc}

08007366 <__multiply>:
 8007366:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736a:	4614      	mov	r4, r2
 800736c:	690a      	ldr	r2, [r1, #16]
 800736e:	6923      	ldr	r3, [r4, #16]
 8007370:	429a      	cmp	r2, r3
 8007372:	bfb8      	it	lt
 8007374:	460b      	movlt	r3, r1
 8007376:	4688      	mov	r8, r1
 8007378:	bfbc      	itt	lt
 800737a:	46a0      	movlt	r8, r4
 800737c:	461c      	movlt	r4, r3
 800737e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007382:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007386:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800738a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800738e:	eb07 0609 	add.w	r6, r7, r9
 8007392:	42b3      	cmp	r3, r6
 8007394:	bfb8      	it	lt
 8007396:	3101      	addlt	r1, #1
 8007398:	f7ff ff08 	bl	80071ac <_Balloc>
 800739c:	f100 0514 	add.w	r5, r0, #20
 80073a0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80073a4:	462b      	mov	r3, r5
 80073a6:	2200      	movs	r2, #0
 80073a8:	4573      	cmp	r3, lr
 80073aa:	d316      	bcc.n	80073da <__multiply+0x74>
 80073ac:	f104 0214 	add.w	r2, r4, #20
 80073b0:	f108 0114 	add.w	r1, r8, #20
 80073b4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80073b8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	9b00      	ldr	r3, [sp, #0]
 80073c0:	9201      	str	r2, [sp, #4]
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d80c      	bhi.n	80073e0 <__multiply+0x7a>
 80073c6:	2e00      	cmp	r6, #0
 80073c8:	dd03      	ble.n	80073d2 <__multiply+0x6c>
 80073ca:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d05d      	beq.n	800748e <__multiply+0x128>
 80073d2:	6106      	str	r6, [r0, #16]
 80073d4:	b003      	add	sp, #12
 80073d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073da:	f843 2b04 	str.w	r2, [r3], #4
 80073de:	e7e3      	b.n	80073a8 <__multiply+0x42>
 80073e0:	f8b2 b000 	ldrh.w	fp, [r2]
 80073e4:	f1bb 0f00 	cmp.w	fp, #0
 80073e8:	d023      	beq.n	8007432 <__multiply+0xcc>
 80073ea:	4689      	mov	r9, r1
 80073ec:	46ac      	mov	ip, r5
 80073ee:	f04f 0800 	mov.w	r8, #0
 80073f2:	f859 4b04 	ldr.w	r4, [r9], #4
 80073f6:	f8dc a000 	ldr.w	sl, [ip]
 80073fa:	b2a3      	uxth	r3, r4
 80073fc:	fa1f fa8a 	uxth.w	sl, sl
 8007400:	fb0b a303 	mla	r3, fp, r3, sl
 8007404:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007408:	f8dc 4000 	ldr.w	r4, [ip]
 800740c:	4443      	add	r3, r8
 800740e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007412:	fb0b 840a 	mla	r4, fp, sl, r8
 8007416:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800741a:	46e2      	mov	sl, ip
 800741c:	b29b      	uxth	r3, r3
 800741e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007422:	454f      	cmp	r7, r9
 8007424:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007428:	f84a 3b04 	str.w	r3, [sl], #4
 800742c:	d82b      	bhi.n	8007486 <__multiply+0x120>
 800742e:	f8cc 8004 	str.w	r8, [ip, #4]
 8007432:	9b01      	ldr	r3, [sp, #4]
 8007434:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007438:	3204      	adds	r2, #4
 800743a:	f1ba 0f00 	cmp.w	sl, #0
 800743e:	d020      	beq.n	8007482 <__multiply+0x11c>
 8007440:	682b      	ldr	r3, [r5, #0]
 8007442:	4689      	mov	r9, r1
 8007444:	46a8      	mov	r8, r5
 8007446:	f04f 0b00 	mov.w	fp, #0
 800744a:	f8b9 c000 	ldrh.w	ip, [r9]
 800744e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007452:	fb0a 440c 	mla	r4, sl, ip, r4
 8007456:	445c      	add	r4, fp
 8007458:	46c4      	mov	ip, r8
 800745a:	b29b      	uxth	r3, r3
 800745c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007460:	f84c 3b04 	str.w	r3, [ip], #4
 8007464:	f859 3b04 	ldr.w	r3, [r9], #4
 8007468:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800746c:	0c1b      	lsrs	r3, r3, #16
 800746e:	fb0a b303 	mla	r3, sl, r3, fp
 8007472:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007476:	454f      	cmp	r7, r9
 8007478:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800747c:	d805      	bhi.n	800748a <__multiply+0x124>
 800747e:	f8c8 3004 	str.w	r3, [r8, #4]
 8007482:	3504      	adds	r5, #4
 8007484:	e79b      	b.n	80073be <__multiply+0x58>
 8007486:	46d4      	mov	ip, sl
 8007488:	e7b3      	b.n	80073f2 <__multiply+0x8c>
 800748a:	46e0      	mov	r8, ip
 800748c:	e7dd      	b.n	800744a <__multiply+0xe4>
 800748e:	3e01      	subs	r6, #1
 8007490:	e799      	b.n	80073c6 <__multiply+0x60>
	...

08007494 <__pow5mult>:
 8007494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007498:	4615      	mov	r5, r2
 800749a:	f012 0203 	ands.w	r2, r2, #3
 800749e:	4606      	mov	r6, r0
 80074a0:	460f      	mov	r7, r1
 80074a2:	d007      	beq.n	80074b4 <__pow5mult+0x20>
 80074a4:	3a01      	subs	r2, #1
 80074a6:	4c21      	ldr	r4, [pc, #132]	; (800752c <__pow5mult+0x98>)
 80074a8:	2300      	movs	r3, #0
 80074aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074ae:	f7ff fec8 	bl	8007242 <__multadd>
 80074b2:	4607      	mov	r7, r0
 80074b4:	10ad      	asrs	r5, r5, #2
 80074b6:	d035      	beq.n	8007524 <__pow5mult+0x90>
 80074b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80074ba:	b93c      	cbnz	r4, 80074cc <__pow5mult+0x38>
 80074bc:	2010      	movs	r0, #16
 80074be:	f7ff fe6d 	bl	800719c <malloc>
 80074c2:	6270      	str	r0, [r6, #36]	; 0x24
 80074c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074c8:	6004      	str	r4, [r0, #0]
 80074ca:	60c4      	str	r4, [r0, #12]
 80074cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80074d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074d4:	b94c      	cbnz	r4, 80074ea <__pow5mult+0x56>
 80074d6:	f240 2171 	movw	r1, #625	; 0x271
 80074da:	4630      	mov	r0, r6
 80074dc:	f7ff ff3a 	bl	8007354 <__i2b>
 80074e0:	2300      	movs	r3, #0
 80074e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80074e6:	4604      	mov	r4, r0
 80074e8:	6003      	str	r3, [r0, #0]
 80074ea:	f04f 0800 	mov.w	r8, #0
 80074ee:	07eb      	lsls	r3, r5, #31
 80074f0:	d50a      	bpl.n	8007508 <__pow5mult+0x74>
 80074f2:	4639      	mov	r1, r7
 80074f4:	4622      	mov	r2, r4
 80074f6:	4630      	mov	r0, r6
 80074f8:	f7ff ff35 	bl	8007366 <__multiply>
 80074fc:	4639      	mov	r1, r7
 80074fe:	4681      	mov	r9, r0
 8007500:	4630      	mov	r0, r6
 8007502:	f7ff fe87 	bl	8007214 <_Bfree>
 8007506:	464f      	mov	r7, r9
 8007508:	106d      	asrs	r5, r5, #1
 800750a:	d00b      	beq.n	8007524 <__pow5mult+0x90>
 800750c:	6820      	ldr	r0, [r4, #0]
 800750e:	b938      	cbnz	r0, 8007520 <__pow5mult+0x8c>
 8007510:	4622      	mov	r2, r4
 8007512:	4621      	mov	r1, r4
 8007514:	4630      	mov	r0, r6
 8007516:	f7ff ff26 	bl	8007366 <__multiply>
 800751a:	6020      	str	r0, [r4, #0]
 800751c:	f8c0 8000 	str.w	r8, [r0]
 8007520:	4604      	mov	r4, r0
 8007522:	e7e4      	b.n	80074ee <__pow5mult+0x5a>
 8007524:	4638      	mov	r0, r7
 8007526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800752a:	bf00      	nop
 800752c:	08009260 	.word	0x08009260

08007530 <__lshift>:
 8007530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007534:	460c      	mov	r4, r1
 8007536:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800753a:	6923      	ldr	r3, [r4, #16]
 800753c:	6849      	ldr	r1, [r1, #4]
 800753e:	eb0a 0903 	add.w	r9, sl, r3
 8007542:	68a3      	ldr	r3, [r4, #8]
 8007544:	4607      	mov	r7, r0
 8007546:	4616      	mov	r6, r2
 8007548:	f109 0501 	add.w	r5, r9, #1
 800754c:	42ab      	cmp	r3, r5
 800754e:	db32      	blt.n	80075b6 <__lshift+0x86>
 8007550:	4638      	mov	r0, r7
 8007552:	f7ff fe2b 	bl	80071ac <_Balloc>
 8007556:	2300      	movs	r3, #0
 8007558:	4680      	mov	r8, r0
 800755a:	f100 0114 	add.w	r1, r0, #20
 800755e:	461a      	mov	r2, r3
 8007560:	4553      	cmp	r3, sl
 8007562:	db2b      	blt.n	80075bc <__lshift+0x8c>
 8007564:	6920      	ldr	r0, [r4, #16]
 8007566:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800756a:	f104 0314 	add.w	r3, r4, #20
 800756e:	f016 021f 	ands.w	r2, r6, #31
 8007572:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007576:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800757a:	d025      	beq.n	80075c8 <__lshift+0x98>
 800757c:	f1c2 0e20 	rsb	lr, r2, #32
 8007580:	2000      	movs	r0, #0
 8007582:	681e      	ldr	r6, [r3, #0]
 8007584:	468a      	mov	sl, r1
 8007586:	4096      	lsls	r6, r2
 8007588:	4330      	orrs	r0, r6
 800758a:	f84a 0b04 	str.w	r0, [sl], #4
 800758e:	f853 0b04 	ldr.w	r0, [r3], #4
 8007592:	459c      	cmp	ip, r3
 8007594:	fa20 f00e 	lsr.w	r0, r0, lr
 8007598:	d814      	bhi.n	80075c4 <__lshift+0x94>
 800759a:	6048      	str	r0, [r1, #4]
 800759c:	b108      	cbz	r0, 80075a2 <__lshift+0x72>
 800759e:	f109 0502 	add.w	r5, r9, #2
 80075a2:	3d01      	subs	r5, #1
 80075a4:	4638      	mov	r0, r7
 80075a6:	f8c8 5010 	str.w	r5, [r8, #16]
 80075aa:	4621      	mov	r1, r4
 80075ac:	f7ff fe32 	bl	8007214 <_Bfree>
 80075b0:	4640      	mov	r0, r8
 80075b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075b6:	3101      	adds	r1, #1
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	e7c7      	b.n	800754c <__lshift+0x1c>
 80075bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80075c0:	3301      	adds	r3, #1
 80075c2:	e7cd      	b.n	8007560 <__lshift+0x30>
 80075c4:	4651      	mov	r1, sl
 80075c6:	e7dc      	b.n	8007582 <__lshift+0x52>
 80075c8:	3904      	subs	r1, #4
 80075ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80075d2:	459c      	cmp	ip, r3
 80075d4:	d8f9      	bhi.n	80075ca <__lshift+0x9a>
 80075d6:	e7e4      	b.n	80075a2 <__lshift+0x72>

080075d8 <__mcmp>:
 80075d8:	6903      	ldr	r3, [r0, #16]
 80075da:	690a      	ldr	r2, [r1, #16]
 80075dc:	1a9b      	subs	r3, r3, r2
 80075de:	b530      	push	{r4, r5, lr}
 80075e0:	d10c      	bne.n	80075fc <__mcmp+0x24>
 80075e2:	0092      	lsls	r2, r2, #2
 80075e4:	3014      	adds	r0, #20
 80075e6:	3114      	adds	r1, #20
 80075e8:	1884      	adds	r4, r0, r2
 80075ea:	4411      	add	r1, r2
 80075ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80075f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80075f4:	4295      	cmp	r5, r2
 80075f6:	d003      	beq.n	8007600 <__mcmp+0x28>
 80075f8:	d305      	bcc.n	8007606 <__mcmp+0x2e>
 80075fa:	2301      	movs	r3, #1
 80075fc:	4618      	mov	r0, r3
 80075fe:	bd30      	pop	{r4, r5, pc}
 8007600:	42a0      	cmp	r0, r4
 8007602:	d3f3      	bcc.n	80075ec <__mcmp+0x14>
 8007604:	e7fa      	b.n	80075fc <__mcmp+0x24>
 8007606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800760a:	e7f7      	b.n	80075fc <__mcmp+0x24>

0800760c <__mdiff>:
 800760c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007610:	460d      	mov	r5, r1
 8007612:	4607      	mov	r7, r0
 8007614:	4611      	mov	r1, r2
 8007616:	4628      	mov	r0, r5
 8007618:	4614      	mov	r4, r2
 800761a:	f7ff ffdd 	bl	80075d8 <__mcmp>
 800761e:	1e06      	subs	r6, r0, #0
 8007620:	d108      	bne.n	8007634 <__mdiff+0x28>
 8007622:	4631      	mov	r1, r6
 8007624:	4638      	mov	r0, r7
 8007626:	f7ff fdc1 	bl	80071ac <_Balloc>
 800762a:	2301      	movs	r3, #1
 800762c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007634:	bfa4      	itt	ge
 8007636:	4623      	movge	r3, r4
 8007638:	462c      	movge	r4, r5
 800763a:	4638      	mov	r0, r7
 800763c:	6861      	ldr	r1, [r4, #4]
 800763e:	bfa6      	itte	ge
 8007640:	461d      	movge	r5, r3
 8007642:	2600      	movge	r6, #0
 8007644:	2601      	movlt	r6, #1
 8007646:	f7ff fdb1 	bl	80071ac <_Balloc>
 800764a:	692b      	ldr	r3, [r5, #16]
 800764c:	60c6      	str	r6, [r0, #12]
 800764e:	6926      	ldr	r6, [r4, #16]
 8007650:	f105 0914 	add.w	r9, r5, #20
 8007654:	f104 0214 	add.w	r2, r4, #20
 8007658:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800765c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007660:	f100 0514 	add.w	r5, r0, #20
 8007664:	f04f 0e00 	mov.w	lr, #0
 8007668:	f852 ab04 	ldr.w	sl, [r2], #4
 800766c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007670:	fa1e f18a 	uxtah	r1, lr, sl
 8007674:	b2a3      	uxth	r3, r4
 8007676:	1ac9      	subs	r1, r1, r3
 8007678:	0c23      	lsrs	r3, r4, #16
 800767a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800767e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007682:	b289      	uxth	r1, r1
 8007684:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007688:	45c8      	cmp	r8, r9
 800768a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800768e:	4694      	mov	ip, r2
 8007690:	f845 3b04 	str.w	r3, [r5], #4
 8007694:	d8e8      	bhi.n	8007668 <__mdiff+0x5c>
 8007696:	45bc      	cmp	ip, r7
 8007698:	d304      	bcc.n	80076a4 <__mdiff+0x98>
 800769a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800769e:	b183      	cbz	r3, 80076c2 <__mdiff+0xb6>
 80076a0:	6106      	str	r6, [r0, #16]
 80076a2:	e7c5      	b.n	8007630 <__mdiff+0x24>
 80076a4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80076a8:	fa1e f381 	uxtah	r3, lr, r1
 80076ac:	141a      	asrs	r2, r3, #16
 80076ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076b8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80076bc:	f845 3b04 	str.w	r3, [r5], #4
 80076c0:	e7e9      	b.n	8007696 <__mdiff+0x8a>
 80076c2:	3e01      	subs	r6, #1
 80076c4:	e7e9      	b.n	800769a <__mdiff+0x8e>

080076c6 <__d2b>:
 80076c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076ca:	460e      	mov	r6, r1
 80076cc:	2101      	movs	r1, #1
 80076ce:	ec59 8b10 	vmov	r8, r9, d0
 80076d2:	4615      	mov	r5, r2
 80076d4:	f7ff fd6a 	bl	80071ac <_Balloc>
 80076d8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80076dc:	4607      	mov	r7, r0
 80076de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076e2:	bb34      	cbnz	r4, 8007732 <__d2b+0x6c>
 80076e4:	9301      	str	r3, [sp, #4]
 80076e6:	f1b8 0300 	subs.w	r3, r8, #0
 80076ea:	d027      	beq.n	800773c <__d2b+0x76>
 80076ec:	a802      	add	r0, sp, #8
 80076ee:	f840 3d08 	str.w	r3, [r0, #-8]!
 80076f2:	f7ff fe00 	bl	80072f6 <__lo0bits>
 80076f6:	9900      	ldr	r1, [sp, #0]
 80076f8:	b1f0      	cbz	r0, 8007738 <__d2b+0x72>
 80076fa:	9a01      	ldr	r2, [sp, #4]
 80076fc:	f1c0 0320 	rsb	r3, r0, #32
 8007700:	fa02 f303 	lsl.w	r3, r2, r3
 8007704:	430b      	orrs	r3, r1
 8007706:	40c2      	lsrs	r2, r0
 8007708:	617b      	str	r3, [r7, #20]
 800770a:	9201      	str	r2, [sp, #4]
 800770c:	9b01      	ldr	r3, [sp, #4]
 800770e:	61bb      	str	r3, [r7, #24]
 8007710:	2b00      	cmp	r3, #0
 8007712:	bf14      	ite	ne
 8007714:	2102      	movne	r1, #2
 8007716:	2101      	moveq	r1, #1
 8007718:	6139      	str	r1, [r7, #16]
 800771a:	b1c4      	cbz	r4, 800774e <__d2b+0x88>
 800771c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007720:	4404      	add	r4, r0
 8007722:	6034      	str	r4, [r6, #0]
 8007724:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007728:	6028      	str	r0, [r5, #0]
 800772a:	4638      	mov	r0, r7
 800772c:	b003      	add	sp, #12
 800772e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007736:	e7d5      	b.n	80076e4 <__d2b+0x1e>
 8007738:	6179      	str	r1, [r7, #20]
 800773a:	e7e7      	b.n	800770c <__d2b+0x46>
 800773c:	a801      	add	r0, sp, #4
 800773e:	f7ff fdda 	bl	80072f6 <__lo0bits>
 8007742:	9b01      	ldr	r3, [sp, #4]
 8007744:	617b      	str	r3, [r7, #20]
 8007746:	2101      	movs	r1, #1
 8007748:	6139      	str	r1, [r7, #16]
 800774a:	3020      	adds	r0, #32
 800774c:	e7e5      	b.n	800771a <__d2b+0x54>
 800774e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007752:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007756:	6030      	str	r0, [r6, #0]
 8007758:	6918      	ldr	r0, [r3, #16]
 800775a:	f7ff fdad 	bl	80072b8 <__hi0bits>
 800775e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007762:	e7e1      	b.n	8007728 <__d2b+0x62>

08007764 <_calloc_r>:
 8007764:	b538      	push	{r3, r4, r5, lr}
 8007766:	fb02 f401 	mul.w	r4, r2, r1
 800776a:	4621      	mov	r1, r4
 800776c:	f000 f808 	bl	8007780 <_malloc_r>
 8007770:	4605      	mov	r5, r0
 8007772:	b118      	cbz	r0, 800777c <_calloc_r+0x18>
 8007774:	4622      	mov	r2, r4
 8007776:	2100      	movs	r1, #0
 8007778:	f7fe fb6a 	bl	8005e50 <memset>
 800777c:	4628      	mov	r0, r5
 800777e:	bd38      	pop	{r3, r4, r5, pc}

08007780 <_malloc_r>:
 8007780:	b570      	push	{r4, r5, r6, lr}
 8007782:	1ccd      	adds	r5, r1, #3
 8007784:	f025 0503 	bic.w	r5, r5, #3
 8007788:	3508      	adds	r5, #8
 800778a:	2d0c      	cmp	r5, #12
 800778c:	bf38      	it	cc
 800778e:	250c      	movcc	r5, #12
 8007790:	2d00      	cmp	r5, #0
 8007792:	4606      	mov	r6, r0
 8007794:	db01      	blt.n	800779a <_malloc_r+0x1a>
 8007796:	42a9      	cmp	r1, r5
 8007798:	d903      	bls.n	80077a2 <_malloc_r+0x22>
 800779a:	230c      	movs	r3, #12
 800779c:	6033      	str	r3, [r6, #0]
 800779e:	2000      	movs	r0, #0
 80077a0:	bd70      	pop	{r4, r5, r6, pc}
 80077a2:	f000 f869 	bl	8007878 <__malloc_lock>
 80077a6:	4a21      	ldr	r2, [pc, #132]	; (800782c <_malloc_r+0xac>)
 80077a8:	6814      	ldr	r4, [r2, #0]
 80077aa:	4621      	mov	r1, r4
 80077ac:	b991      	cbnz	r1, 80077d4 <_malloc_r+0x54>
 80077ae:	4c20      	ldr	r4, [pc, #128]	; (8007830 <_malloc_r+0xb0>)
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	b91b      	cbnz	r3, 80077bc <_malloc_r+0x3c>
 80077b4:	4630      	mov	r0, r6
 80077b6:	f000 f83d 	bl	8007834 <_sbrk_r>
 80077ba:	6020      	str	r0, [r4, #0]
 80077bc:	4629      	mov	r1, r5
 80077be:	4630      	mov	r0, r6
 80077c0:	f000 f838 	bl	8007834 <_sbrk_r>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d124      	bne.n	8007812 <_malloc_r+0x92>
 80077c8:	230c      	movs	r3, #12
 80077ca:	6033      	str	r3, [r6, #0]
 80077cc:	4630      	mov	r0, r6
 80077ce:	f000 f854 	bl	800787a <__malloc_unlock>
 80077d2:	e7e4      	b.n	800779e <_malloc_r+0x1e>
 80077d4:	680b      	ldr	r3, [r1, #0]
 80077d6:	1b5b      	subs	r3, r3, r5
 80077d8:	d418      	bmi.n	800780c <_malloc_r+0x8c>
 80077da:	2b0b      	cmp	r3, #11
 80077dc:	d90f      	bls.n	80077fe <_malloc_r+0x7e>
 80077de:	600b      	str	r3, [r1, #0]
 80077e0:	50cd      	str	r5, [r1, r3]
 80077e2:	18cc      	adds	r4, r1, r3
 80077e4:	4630      	mov	r0, r6
 80077e6:	f000 f848 	bl	800787a <__malloc_unlock>
 80077ea:	f104 000b 	add.w	r0, r4, #11
 80077ee:	1d23      	adds	r3, r4, #4
 80077f0:	f020 0007 	bic.w	r0, r0, #7
 80077f4:	1ac3      	subs	r3, r0, r3
 80077f6:	d0d3      	beq.n	80077a0 <_malloc_r+0x20>
 80077f8:	425a      	negs	r2, r3
 80077fa:	50e2      	str	r2, [r4, r3]
 80077fc:	e7d0      	b.n	80077a0 <_malloc_r+0x20>
 80077fe:	428c      	cmp	r4, r1
 8007800:	684b      	ldr	r3, [r1, #4]
 8007802:	bf16      	itet	ne
 8007804:	6063      	strne	r3, [r4, #4]
 8007806:	6013      	streq	r3, [r2, #0]
 8007808:	460c      	movne	r4, r1
 800780a:	e7eb      	b.n	80077e4 <_malloc_r+0x64>
 800780c:	460c      	mov	r4, r1
 800780e:	6849      	ldr	r1, [r1, #4]
 8007810:	e7cc      	b.n	80077ac <_malloc_r+0x2c>
 8007812:	1cc4      	adds	r4, r0, #3
 8007814:	f024 0403 	bic.w	r4, r4, #3
 8007818:	42a0      	cmp	r0, r4
 800781a:	d005      	beq.n	8007828 <_malloc_r+0xa8>
 800781c:	1a21      	subs	r1, r4, r0
 800781e:	4630      	mov	r0, r6
 8007820:	f000 f808 	bl	8007834 <_sbrk_r>
 8007824:	3001      	adds	r0, #1
 8007826:	d0cf      	beq.n	80077c8 <_malloc_r+0x48>
 8007828:	6025      	str	r5, [r4, #0]
 800782a:	e7db      	b.n	80077e4 <_malloc_r+0x64>
 800782c:	200002b4 	.word	0x200002b4
 8007830:	200002b8 	.word	0x200002b8

08007834 <_sbrk_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	4c06      	ldr	r4, [pc, #24]	; (8007850 <_sbrk_r+0x1c>)
 8007838:	2300      	movs	r3, #0
 800783a:	4605      	mov	r5, r0
 800783c:	4608      	mov	r0, r1
 800783e:	6023      	str	r3, [r4, #0]
 8007840:	f7fe fa54 	bl	8005cec <_sbrk>
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	d102      	bne.n	800784e <_sbrk_r+0x1a>
 8007848:	6823      	ldr	r3, [r4, #0]
 800784a:	b103      	cbz	r3, 800784e <_sbrk_r+0x1a>
 800784c:	602b      	str	r3, [r5, #0]
 800784e:	bd38      	pop	{r3, r4, r5, pc}
 8007850:	200005e4 	.word	0x200005e4

08007854 <__ascii_mbtowc>:
 8007854:	b082      	sub	sp, #8
 8007856:	b901      	cbnz	r1, 800785a <__ascii_mbtowc+0x6>
 8007858:	a901      	add	r1, sp, #4
 800785a:	b142      	cbz	r2, 800786e <__ascii_mbtowc+0x1a>
 800785c:	b14b      	cbz	r3, 8007872 <__ascii_mbtowc+0x1e>
 800785e:	7813      	ldrb	r3, [r2, #0]
 8007860:	600b      	str	r3, [r1, #0]
 8007862:	7812      	ldrb	r2, [r2, #0]
 8007864:	1c10      	adds	r0, r2, #0
 8007866:	bf18      	it	ne
 8007868:	2001      	movne	r0, #1
 800786a:	b002      	add	sp, #8
 800786c:	4770      	bx	lr
 800786e:	4610      	mov	r0, r2
 8007870:	e7fb      	b.n	800786a <__ascii_mbtowc+0x16>
 8007872:	f06f 0001 	mvn.w	r0, #1
 8007876:	e7f8      	b.n	800786a <__ascii_mbtowc+0x16>

08007878 <__malloc_lock>:
 8007878:	4770      	bx	lr

0800787a <__malloc_unlock>:
 800787a:	4770      	bx	lr

0800787c <__ascii_wctomb>:
 800787c:	b149      	cbz	r1, 8007892 <__ascii_wctomb+0x16>
 800787e:	2aff      	cmp	r2, #255	; 0xff
 8007880:	bf85      	ittet	hi
 8007882:	238a      	movhi	r3, #138	; 0x8a
 8007884:	6003      	strhi	r3, [r0, #0]
 8007886:	700a      	strbls	r2, [r1, #0]
 8007888:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800788c:	bf98      	it	ls
 800788e:	2001      	movls	r0, #1
 8007890:	4770      	bx	lr
 8007892:	4608      	mov	r0, r1
 8007894:	4770      	bx	lr
	...

08007898 <asin>:
 8007898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800789a:	ed2d 8b02 	vpush	{d8}
 800789e:	4e26      	ldr	r6, [pc, #152]	; (8007938 <asin+0xa0>)
 80078a0:	b08b      	sub	sp, #44	; 0x2c
 80078a2:	ec55 4b10 	vmov	r4, r5, d0
 80078a6:	f000 f853 	bl	8007950 <__ieee754_asin>
 80078aa:	f996 3000 	ldrsb.w	r3, [r6]
 80078ae:	eeb0 8a40 	vmov.f32	s16, s0
 80078b2:	eef0 8a60 	vmov.f32	s17, s1
 80078b6:	3301      	adds	r3, #1
 80078b8:	d036      	beq.n	8007928 <asin+0x90>
 80078ba:	4622      	mov	r2, r4
 80078bc:	462b      	mov	r3, r5
 80078be:	4620      	mov	r0, r4
 80078c0:	4629      	mov	r1, r5
 80078c2:	f7f9 fadf 	bl	8000e84 <__aeabi_dcmpun>
 80078c6:	4607      	mov	r7, r0
 80078c8:	bb70      	cbnz	r0, 8007928 <asin+0x90>
 80078ca:	ec45 4b10 	vmov	d0, r4, r5
 80078ce:	f000 fd7f 	bl	80083d0 <fabs>
 80078d2:	2200      	movs	r2, #0
 80078d4:	4b19      	ldr	r3, [pc, #100]	; (800793c <asin+0xa4>)
 80078d6:	ec51 0b10 	vmov	r0, r1, d0
 80078da:	f7f9 f8c9 	bl	8000a70 <__aeabi_dcmpgt>
 80078de:	b318      	cbz	r0, 8007928 <asin+0x90>
 80078e0:	2301      	movs	r3, #1
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	4816      	ldr	r0, [pc, #88]	; (8007940 <asin+0xa8>)
 80078e6:	4b17      	ldr	r3, [pc, #92]	; (8007944 <asin+0xac>)
 80078e8:	9301      	str	r3, [sp, #4]
 80078ea:	9708      	str	r7, [sp, #32]
 80078ec:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80078f0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80078f4:	f000 fd78 	bl	80083e8 <nan>
 80078f8:	f996 3000 	ldrsb.w	r3, [r6]
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	ed8d 0b06 	vstr	d0, [sp, #24]
 8007902:	d104      	bne.n	800790e <asin+0x76>
 8007904:	f7fe fa60 	bl	8005dc8 <__errno>
 8007908:	2321      	movs	r3, #33	; 0x21
 800790a:	6003      	str	r3, [r0, #0]
 800790c:	e004      	b.n	8007918 <asin+0x80>
 800790e:	4668      	mov	r0, sp
 8007910:	f000 fd67 	bl	80083e2 <matherr>
 8007914:	2800      	cmp	r0, #0
 8007916:	d0f5      	beq.n	8007904 <asin+0x6c>
 8007918:	9b08      	ldr	r3, [sp, #32]
 800791a:	b11b      	cbz	r3, 8007924 <asin+0x8c>
 800791c:	f7fe fa54 	bl	8005dc8 <__errno>
 8007920:	9b08      	ldr	r3, [sp, #32]
 8007922:	6003      	str	r3, [r0, #0]
 8007924:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007928:	eeb0 0a48 	vmov.f32	s0, s16
 800792c:	eef0 0a68 	vmov.f32	s1, s17
 8007930:	b00b      	add	sp, #44	; 0x2c
 8007932:	ecbd 8b02 	vpop	{d8}
 8007936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007938:	20000234 	.word	0x20000234
 800793c:	3ff00000 	.word	0x3ff00000
 8007940:	08009275 	.word	0x08009275
 8007944:	08009377 	.word	0x08009377

08007948 <atan2>:
 8007948:	f000 ba12 	b.w	8007d70 <__ieee754_atan2>
 800794c:	0000      	movs	r0, r0
	...

08007950 <__ieee754_asin>:
 8007950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007954:	ec55 4b10 	vmov	r4, r5, d0
 8007958:	4bcb      	ldr	r3, [pc, #812]	; (8007c88 <__ieee754_asin+0x338>)
 800795a:	b087      	sub	sp, #28
 800795c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8007960:	429f      	cmp	r7, r3
 8007962:	9501      	str	r5, [sp, #4]
 8007964:	dd31      	ble.n	80079ca <__ieee754_asin+0x7a>
 8007966:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800796a:	ee10 3a10 	vmov	r3, s0
 800796e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8007972:	433b      	orrs	r3, r7
 8007974:	d117      	bne.n	80079a6 <__ieee754_asin+0x56>
 8007976:	a3aa      	add	r3, pc, #680	; (adr r3, 8007c20 <__ieee754_asin+0x2d0>)
 8007978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797c:	ee10 0a10 	vmov	r0, s0
 8007980:	4629      	mov	r1, r5
 8007982:	f7f8 fde5 	bl	8000550 <__aeabi_dmul>
 8007986:	a3a8      	add	r3, pc, #672	; (adr r3, 8007c28 <__ieee754_asin+0x2d8>)
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	4606      	mov	r6, r0
 800798e:	460f      	mov	r7, r1
 8007990:	4620      	mov	r0, r4
 8007992:	4629      	mov	r1, r5
 8007994:	f7f8 fddc 	bl	8000550 <__aeabi_dmul>
 8007998:	4602      	mov	r2, r0
 800799a:	460b      	mov	r3, r1
 800799c:	4630      	mov	r0, r6
 800799e:	4639      	mov	r1, r7
 80079a0:	f7f8 fc20 	bl	80001e4 <__adddf3>
 80079a4:	e00a      	b.n	80079bc <__ieee754_asin+0x6c>
 80079a6:	ee10 2a10 	vmov	r2, s0
 80079aa:	462b      	mov	r3, r5
 80079ac:	4620      	mov	r0, r4
 80079ae:	4629      	mov	r1, r5
 80079b0:	f7f8 fc16 	bl	80001e0 <__aeabi_dsub>
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	f7f8 fef4 	bl	80007a4 <__aeabi_ddiv>
 80079bc:	4604      	mov	r4, r0
 80079be:	460d      	mov	r5, r1
 80079c0:	ec45 4b10 	vmov	d0, r4, r5
 80079c4:	b007      	add	sp, #28
 80079c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ca:	4bb0      	ldr	r3, [pc, #704]	; (8007c8c <__ieee754_asin+0x33c>)
 80079cc:	429f      	cmp	r7, r3
 80079ce:	dc11      	bgt.n	80079f4 <__ieee754_asin+0xa4>
 80079d0:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80079d4:	f280 80ae 	bge.w	8007b34 <__ieee754_asin+0x1e4>
 80079d8:	a395      	add	r3, pc, #596	; (adr r3, 8007c30 <__ieee754_asin+0x2e0>)
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	ee10 0a10 	vmov	r0, s0
 80079e2:	4629      	mov	r1, r5
 80079e4:	f7f8 fbfe 	bl	80001e4 <__adddf3>
 80079e8:	2200      	movs	r2, #0
 80079ea:	4ba9      	ldr	r3, [pc, #676]	; (8007c90 <__ieee754_asin+0x340>)
 80079ec:	f7f9 f840 	bl	8000a70 <__aeabi_dcmpgt>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d1e5      	bne.n	80079c0 <__ieee754_asin+0x70>
 80079f4:	ec45 4b10 	vmov	d0, r4, r5
 80079f8:	f000 fcea 	bl	80083d0 <fabs>
 80079fc:	2000      	movs	r0, #0
 80079fe:	ec53 2b10 	vmov	r2, r3, d0
 8007a02:	49a3      	ldr	r1, [pc, #652]	; (8007c90 <__ieee754_asin+0x340>)
 8007a04:	f7f8 fbec 	bl	80001e0 <__aeabi_dsub>
 8007a08:	2200      	movs	r2, #0
 8007a0a:	4ba2      	ldr	r3, [pc, #648]	; (8007c94 <__ieee754_asin+0x344>)
 8007a0c:	f7f8 fda0 	bl	8000550 <__aeabi_dmul>
 8007a10:	a389      	add	r3, pc, #548	; (adr r3, 8007c38 <__ieee754_asin+0x2e8>)
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	4604      	mov	r4, r0
 8007a18:	460d      	mov	r5, r1
 8007a1a:	f7f8 fd99 	bl	8000550 <__aeabi_dmul>
 8007a1e:	a388      	add	r3, pc, #544	; (adr r3, 8007c40 <__ieee754_asin+0x2f0>)
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	f7f8 fbde 	bl	80001e4 <__adddf3>
 8007a28:	4622      	mov	r2, r4
 8007a2a:	462b      	mov	r3, r5
 8007a2c:	f7f8 fd90 	bl	8000550 <__aeabi_dmul>
 8007a30:	a385      	add	r3, pc, #532	; (adr r3, 8007c48 <__ieee754_asin+0x2f8>)
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	f7f8 fbd3 	bl	80001e0 <__aeabi_dsub>
 8007a3a:	4622      	mov	r2, r4
 8007a3c:	462b      	mov	r3, r5
 8007a3e:	f7f8 fd87 	bl	8000550 <__aeabi_dmul>
 8007a42:	a383      	add	r3, pc, #524	; (adr r3, 8007c50 <__ieee754_asin+0x300>)
 8007a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a48:	f7f8 fbcc 	bl	80001e4 <__adddf3>
 8007a4c:	4622      	mov	r2, r4
 8007a4e:	462b      	mov	r3, r5
 8007a50:	f7f8 fd7e 	bl	8000550 <__aeabi_dmul>
 8007a54:	a380      	add	r3, pc, #512	; (adr r3, 8007c58 <__ieee754_asin+0x308>)
 8007a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5a:	f7f8 fbc1 	bl	80001e0 <__aeabi_dsub>
 8007a5e:	4622      	mov	r2, r4
 8007a60:	462b      	mov	r3, r5
 8007a62:	f7f8 fd75 	bl	8000550 <__aeabi_dmul>
 8007a66:	a37e      	add	r3, pc, #504	; (adr r3, 8007c60 <__ieee754_asin+0x310>)
 8007a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6c:	f7f8 fbba 	bl	80001e4 <__adddf3>
 8007a70:	4622      	mov	r2, r4
 8007a72:	462b      	mov	r3, r5
 8007a74:	f7f8 fd6c 	bl	8000550 <__aeabi_dmul>
 8007a78:	a37b      	add	r3, pc, #492	; (adr r3, 8007c68 <__ieee754_asin+0x318>)
 8007a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7e:	4680      	mov	r8, r0
 8007a80:	4689      	mov	r9, r1
 8007a82:	4620      	mov	r0, r4
 8007a84:	4629      	mov	r1, r5
 8007a86:	f7f8 fd63 	bl	8000550 <__aeabi_dmul>
 8007a8a:	a379      	add	r3, pc, #484	; (adr r3, 8007c70 <__ieee754_asin+0x320>)
 8007a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a90:	f7f8 fba6 	bl	80001e0 <__aeabi_dsub>
 8007a94:	4622      	mov	r2, r4
 8007a96:	462b      	mov	r3, r5
 8007a98:	f7f8 fd5a 	bl	8000550 <__aeabi_dmul>
 8007a9c:	a376      	add	r3, pc, #472	; (adr r3, 8007c78 <__ieee754_asin+0x328>)
 8007a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa2:	f7f8 fb9f 	bl	80001e4 <__adddf3>
 8007aa6:	4622      	mov	r2, r4
 8007aa8:	462b      	mov	r3, r5
 8007aaa:	f7f8 fd51 	bl	8000550 <__aeabi_dmul>
 8007aae:	a374      	add	r3, pc, #464	; (adr r3, 8007c80 <__ieee754_asin+0x330>)
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	f7f8 fb94 	bl	80001e0 <__aeabi_dsub>
 8007ab8:	4622      	mov	r2, r4
 8007aba:	462b      	mov	r3, r5
 8007abc:	f7f8 fd48 	bl	8000550 <__aeabi_dmul>
 8007ac0:	4b73      	ldr	r3, [pc, #460]	; (8007c90 <__ieee754_asin+0x340>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f7f8 fb8e 	bl	80001e4 <__adddf3>
 8007ac8:	ec45 4b10 	vmov	d0, r4, r5
 8007acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ad0:	f000 fa2c 	bl	8007f2c <__ieee754_sqrt>
 8007ad4:	4b70      	ldr	r3, [pc, #448]	; (8007c98 <__ieee754_asin+0x348>)
 8007ad6:	429f      	cmp	r7, r3
 8007ad8:	ec5b ab10 	vmov	sl, fp, d0
 8007adc:	f340 80de 	ble.w	8007c9c <__ieee754_asin+0x34c>
 8007ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ae4:	4640      	mov	r0, r8
 8007ae6:	4649      	mov	r1, r9
 8007ae8:	f7f8 fe5c 	bl	80007a4 <__aeabi_ddiv>
 8007aec:	4652      	mov	r2, sl
 8007aee:	465b      	mov	r3, fp
 8007af0:	f7f8 fd2e 	bl	8000550 <__aeabi_dmul>
 8007af4:	4652      	mov	r2, sl
 8007af6:	465b      	mov	r3, fp
 8007af8:	f7f8 fb74 	bl	80001e4 <__adddf3>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	f7f8 fb70 	bl	80001e4 <__adddf3>
 8007b04:	a348      	add	r3, pc, #288	; (adr r3, 8007c28 <__ieee754_asin+0x2d8>)
 8007b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0a:	f7f8 fb69 	bl	80001e0 <__aeabi_dsub>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	460b      	mov	r3, r1
 8007b12:	a143      	add	r1, pc, #268	; (adr r1, 8007c20 <__ieee754_asin+0x2d0>)
 8007b14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b18:	f7f8 fb62 	bl	80001e0 <__aeabi_dsub>
 8007b1c:	9b01      	ldr	r3, [sp, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	bfdc      	itt	le
 8007b22:	4602      	movle	r2, r0
 8007b24:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8007b28:	4604      	mov	r4, r0
 8007b2a:	460d      	mov	r5, r1
 8007b2c:	bfdc      	itt	le
 8007b2e:	4614      	movle	r4, r2
 8007b30:	461d      	movle	r5, r3
 8007b32:	e745      	b.n	80079c0 <__ieee754_asin+0x70>
 8007b34:	ee10 2a10 	vmov	r2, s0
 8007b38:	ee10 0a10 	vmov	r0, s0
 8007b3c:	462b      	mov	r3, r5
 8007b3e:	4629      	mov	r1, r5
 8007b40:	f7f8 fd06 	bl	8000550 <__aeabi_dmul>
 8007b44:	a33c      	add	r3, pc, #240	; (adr r3, 8007c38 <__ieee754_asin+0x2e8>)
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	460f      	mov	r7, r1
 8007b4e:	f7f8 fcff 	bl	8000550 <__aeabi_dmul>
 8007b52:	a33b      	add	r3, pc, #236	; (adr r3, 8007c40 <__ieee754_asin+0x2f0>)
 8007b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b58:	f7f8 fb44 	bl	80001e4 <__adddf3>
 8007b5c:	4632      	mov	r2, r6
 8007b5e:	463b      	mov	r3, r7
 8007b60:	f7f8 fcf6 	bl	8000550 <__aeabi_dmul>
 8007b64:	a338      	add	r3, pc, #224	; (adr r3, 8007c48 <__ieee754_asin+0x2f8>)
 8007b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6a:	f7f8 fb39 	bl	80001e0 <__aeabi_dsub>
 8007b6e:	4632      	mov	r2, r6
 8007b70:	463b      	mov	r3, r7
 8007b72:	f7f8 fced 	bl	8000550 <__aeabi_dmul>
 8007b76:	a336      	add	r3, pc, #216	; (adr r3, 8007c50 <__ieee754_asin+0x300>)
 8007b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7c:	f7f8 fb32 	bl	80001e4 <__adddf3>
 8007b80:	4632      	mov	r2, r6
 8007b82:	463b      	mov	r3, r7
 8007b84:	f7f8 fce4 	bl	8000550 <__aeabi_dmul>
 8007b88:	a333      	add	r3, pc, #204	; (adr r3, 8007c58 <__ieee754_asin+0x308>)
 8007b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8e:	f7f8 fb27 	bl	80001e0 <__aeabi_dsub>
 8007b92:	4632      	mov	r2, r6
 8007b94:	463b      	mov	r3, r7
 8007b96:	f7f8 fcdb 	bl	8000550 <__aeabi_dmul>
 8007b9a:	a331      	add	r3, pc, #196	; (adr r3, 8007c60 <__ieee754_asin+0x310>)
 8007b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba0:	f7f8 fb20 	bl	80001e4 <__adddf3>
 8007ba4:	4632      	mov	r2, r6
 8007ba6:	463b      	mov	r3, r7
 8007ba8:	f7f8 fcd2 	bl	8000550 <__aeabi_dmul>
 8007bac:	a32e      	add	r3, pc, #184	; (adr r3, 8007c68 <__ieee754_asin+0x318>)
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	4680      	mov	r8, r0
 8007bb4:	4689      	mov	r9, r1
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	4639      	mov	r1, r7
 8007bba:	f7f8 fcc9 	bl	8000550 <__aeabi_dmul>
 8007bbe:	a32c      	add	r3, pc, #176	; (adr r3, 8007c70 <__ieee754_asin+0x320>)
 8007bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc4:	f7f8 fb0c 	bl	80001e0 <__aeabi_dsub>
 8007bc8:	4632      	mov	r2, r6
 8007bca:	463b      	mov	r3, r7
 8007bcc:	f7f8 fcc0 	bl	8000550 <__aeabi_dmul>
 8007bd0:	a329      	add	r3, pc, #164	; (adr r3, 8007c78 <__ieee754_asin+0x328>)
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	f7f8 fb05 	bl	80001e4 <__adddf3>
 8007bda:	4632      	mov	r2, r6
 8007bdc:	463b      	mov	r3, r7
 8007bde:	f7f8 fcb7 	bl	8000550 <__aeabi_dmul>
 8007be2:	a327      	add	r3, pc, #156	; (adr r3, 8007c80 <__ieee754_asin+0x330>)
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	f7f8 fafa 	bl	80001e0 <__aeabi_dsub>
 8007bec:	4632      	mov	r2, r6
 8007bee:	463b      	mov	r3, r7
 8007bf0:	f7f8 fcae 	bl	8000550 <__aeabi_dmul>
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	4b26      	ldr	r3, [pc, #152]	; (8007c90 <__ieee754_asin+0x340>)
 8007bf8:	f7f8 faf4 	bl	80001e4 <__adddf3>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4640      	mov	r0, r8
 8007c02:	4649      	mov	r1, r9
 8007c04:	f7f8 fdce 	bl	80007a4 <__aeabi_ddiv>
 8007c08:	4622      	mov	r2, r4
 8007c0a:	462b      	mov	r3, r5
 8007c0c:	f7f8 fca0 	bl	8000550 <__aeabi_dmul>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	4620      	mov	r0, r4
 8007c16:	4629      	mov	r1, r5
 8007c18:	e6c2      	b.n	80079a0 <__ieee754_asin+0x50>
 8007c1a:	bf00      	nop
 8007c1c:	f3af 8000 	nop.w
 8007c20:	54442d18 	.word	0x54442d18
 8007c24:	3ff921fb 	.word	0x3ff921fb
 8007c28:	33145c07 	.word	0x33145c07
 8007c2c:	3c91a626 	.word	0x3c91a626
 8007c30:	8800759c 	.word	0x8800759c
 8007c34:	7e37e43c 	.word	0x7e37e43c
 8007c38:	0dfdf709 	.word	0x0dfdf709
 8007c3c:	3f023de1 	.word	0x3f023de1
 8007c40:	7501b288 	.word	0x7501b288
 8007c44:	3f49efe0 	.word	0x3f49efe0
 8007c48:	b5688f3b 	.word	0xb5688f3b
 8007c4c:	3fa48228 	.word	0x3fa48228
 8007c50:	0e884455 	.word	0x0e884455
 8007c54:	3fc9c155 	.word	0x3fc9c155
 8007c58:	03eb6f7d 	.word	0x03eb6f7d
 8007c5c:	3fd4d612 	.word	0x3fd4d612
 8007c60:	55555555 	.word	0x55555555
 8007c64:	3fc55555 	.word	0x3fc55555
 8007c68:	b12e9282 	.word	0xb12e9282
 8007c6c:	3fb3b8c5 	.word	0x3fb3b8c5
 8007c70:	1b8d0159 	.word	0x1b8d0159
 8007c74:	3fe6066c 	.word	0x3fe6066c
 8007c78:	9c598ac8 	.word	0x9c598ac8
 8007c7c:	40002ae5 	.word	0x40002ae5
 8007c80:	1c8a2d4b 	.word	0x1c8a2d4b
 8007c84:	40033a27 	.word	0x40033a27
 8007c88:	3fefffff 	.word	0x3fefffff
 8007c8c:	3fdfffff 	.word	0x3fdfffff
 8007c90:	3ff00000 	.word	0x3ff00000
 8007c94:	3fe00000 	.word	0x3fe00000
 8007c98:	3fef3332 	.word	0x3fef3332
 8007c9c:	ee10 2a10 	vmov	r2, s0
 8007ca0:	ee10 0a10 	vmov	r0, s0
 8007ca4:	465b      	mov	r3, fp
 8007ca6:	4659      	mov	r1, fp
 8007ca8:	f7f8 fa9c 	bl	80001e4 <__adddf3>
 8007cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cb4:	4640      	mov	r0, r8
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	f7f8 fd74 	bl	80007a4 <__aeabi_ddiv>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cc4:	f7f8 fc44 	bl	8000550 <__aeabi_dmul>
 8007cc8:	2600      	movs	r6, #0
 8007cca:	4680      	mov	r8, r0
 8007ccc:	4689      	mov	r9, r1
 8007cce:	4632      	mov	r2, r6
 8007cd0:	465b      	mov	r3, fp
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	4659      	mov	r1, fp
 8007cd6:	f7f8 fc3b 	bl	8000550 <__aeabi_dmul>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4620      	mov	r0, r4
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	f7f8 fa7d 	bl	80001e0 <__aeabi_dsub>
 8007ce6:	4632      	mov	r2, r6
 8007ce8:	4604      	mov	r4, r0
 8007cea:	460d      	mov	r5, r1
 8007cec:	465b      	mov	r3, fp
 8007cee:	4650      	mov	r0, sl
 8007cf0:	4659      	mov	r1, fp
 8007cf2:	f7f8 fa77 	bl	80001e4 <__adddf3>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	4629      	mov	r1, r5
 8007cfe:	f7f8 fd51 	bl	80007a4 <__aeabi_ddiv>
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	f7f8 fa6d 	bl	80001e4 <__adddf3>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	a114      	add	r1, pc, #80	; (adr r1, 8007d60 <__ieee754_asin+0x410>)
 8007d10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d14:	f7f8 fa64 	bl	80001e0 <__aeabi_dsub>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4640      	mov	r0, r8
 8007d1e:	4649      	mov	r1, r9
 8007d20:	f7f8 fa5e 	bl	80001e0 <__aeabi_dsub>
 8007d24:	465f      	mov	r7, fp
 8007d26:	4604      	mov	r4, r0
 8007d28:	460d      	mov	r5, r1
 8007d2a:	4632      	mov	r2, r6
 8007d2c:	465b      	mov	r3, fp
 8007d2e:	4630      	mov	r0, r6
 8007d30:	4639      	mov	r1, r7
 8007d32:	f7f8 fa57 	bl	80001e4 <__adddf3>
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	a10b      	add	r1, pc, #44	; (adr r1, 8007d68 <__ieee754_asin+0x418>)
 8007d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d40:	f7f8 fa4e 	bl	80001e0 <__aeabi_dsub>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	4620      	mov	r0, r4
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	f7f8 fa48 	bl	80001e0 <__aeabi_dsub>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	a104      	add	r1, pc, #16	; (adr r1, 8007d68 <__ieee754_asin+0x418>)
 8007d56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d5a:	e6dd      	b.n	8007b18 <__ieee754_asin+0x1c8>
 8007d5c:	f3af 8000 	nop.w
 8007d60:	33145c07 	.word	0x33145c07
 8007d64:	3c91a626 	.word	0x3c91a626
 8007d68:	54442d18 	.word	0x54442d18
 8007d6c:	3fe921fb 	.word	0x3fe921fb

08007d70 <__ieee754_atan2>:
 8007d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d74:	ec57 6b11 	vmov	r6, r7, d1
 8007d78:	4273      	negs	r3, r6
 8007d7a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8007d7e:	4333      	orrs	r3, r6
 8007d80:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8007f28 <__ieee754_atan2+0x1b8>
 8007d84:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007d88:	4573      	cmp	r3, lr
 8007d8a:	ec51 0b10 	vmov	r0, r1, d0
 8007d8e:	ee11 8a10 	vmov	r8, s2
 8007d92:	d80a      	bhi.n	8007daa <__ieee754_atan2+0x3a>
 8007d94:	4244      	negs	r4, r0
 8007d96:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d9a:	4304      	orrs	r4, r0
 8007d9c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007da0:	4574      	cmp	r4, lr
 8007da2:	468c      	mov	ip, r1
 8007da4:	ee10 9a10 	vmov	r9, s0
 8007da8:	d907      	bls.n	8007dba <__ieee754_atan2+0x4a>
 8007daa:	4632      	mov	r2, r6
 8007dac:	463b      	mov	r3, r7
 8007dae:	f7f8 fa19 	bl	80001e4 <__adddf3>
 8007db2:	ec41 0b10 	vmov	d0, r0, r1
 8007db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dba:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007dbe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007dc2:	4334      	orrs	r4, r6
 8007dc4:	d103      	bne.n	8007dce <__ieee754_atan2+0x5e>
 8007dc6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dca:	f000 b961 	b.w	8008090 <atan>
 8007dce:	17bc      	asrs	r4, r7, #30
 8007dd0:	f004 0402 	and.w	r4, r4, #2
 8007dd4:	ea53 0909 	orrs.w	r9, r3, r9
 8007dd8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007ddc:	d107      	bne.n	8007dee <__ieee754_atan2+0x7e>
 8007dde:	2c02      	cmp	r4, #2
 8007de0:	d073      	beq.n	8007eca <__ieee754_atan2+0x15a>
 8007de2:	2c03      	cmp	r4, #3
 8007de4:	d1e5      	bne.n	8007db2 <__ieee754_atan2+0x42>
 8007de6:	a13e      	add	r1, pc, #248	; (adr r1, 8007ee0 <__ieee754_atan2+0x170>)
 8007de8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dec:	e7e1      	b.n	8007db2 <__ieee754_atan2+0x42>
 8007dee:	ea52 0808 	orrs.w	r8, r2, r8
 8007df2:	d106      	bne.n	8007e02 <__ieee754_atan2+0x92>
 8007df4:	f1bc 0f00 	cmp.w	ip, #0
 8007df8:	da6b      	bge.n	8007ed2 <__ieee754_atan2+0x162>
 8007dfa:	a13b      	add	r1, pc, #236	; (adr r1, 8007ee8 <__ieee754_atan2+0x178>)
 8007dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e00:	e7d7      	b.n	8007db2 <__ieee754_atan2+0x42>
 8007e02:	4572      	cmp	r2, lr
 8007e04:	d120      	bne.n	8007e48 <__ieee754_atan2+0xd8>
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d111      	bne.n	8007e2e <__ieee754_atan2+0xbe>
 8007e0a:	2c02      	cmp	r4, #2
 8007e0c:	d007      	beq.n	8007e1e <__ieee754_atan2+0xae>
 8007e0e:	2c03      	cmp	r4, #3
 8007e10:	d009      	beq.n	8007e26 <__ieee754_atan2+0xb6>
 8007e12:	2c01      	cmp	r4, #1
 8007e14:	d155      	bne.n	8007ec2 <__ieee754_atan2+0x152>
 8007e16:	a136      	add	r1, pc, #216	; (adr r1, 8007ef0 <__ieee754_atan2+0x180>)
 8007e18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e1c:	e7c9      	b.n	8007db2 <__ieee754_atan2+0x42>
 8007e1e:	a136      	add	r1, pc, #216	; (adr r1, 8007ef8 <__ieee754_atan2+0x188>)
 8007e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e24:	e7c5      	b.n	8007db2 <__ieee754_atan2+0x42>
 8007e26:	a136      	add	r1, pc, #216	; (adr r1, 8007f00 <__ieee754_atan2+0x190>)
 8007e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e2c:	e7c1      	b.n	8007db2 <__ieee754_atan2+0x42>
 8007e2e:	2c02      	cmp	r4, #2
 8007e30:	d04b      	beq.n	8007eca <__ieee754_atan2+0x15a>
 8007e32:	2c03      	cmp	r4, #3
 8007e34:	d0d7      	beq.n	8007de6 <__ieee754_atan2+0x76>
 8007e36:	2c01      	cmp	r4, #1
 8007e38:	f04f 0000 	mov.w	r0, #0
 8007e3c:	d102      	bne.n	8007e44 <__ieee754_atan2+0xd4>
 8007e3e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007e42:	e7b6      	b.n	8007db2 <__ieee754_atan2+0x42>
 8007e44:	2100      	movs	r1, #0
 8007e46:	e7b4      	b.n	8007db2 <__ieee754_atan2+0x42>
 8007e48:	4573      	cmp	r3, lr
 8007e4a:	d0d3      	beq.n	8007df4 <__ieee754_atan2+0x84>
 8007e4c:	1a9b      	subs	r3, r3, r2
 8007e4e:	151b      	asrs	r3, r3, #20
 8007e50:	2b3c      	cmp	r3, #60	; 0x3c
 8007e52:	dc1e      	bgt.n	8007e92 <__ieee754_atan2+0x122>
 8007e54:	2f00      	cmp	r7, #0
 8007e56:	da01      	bge.n	8007e5c <__ieee754_atan2+0xec>
 8007e58:	333c      	adds	r3, #60	; 0x3c
 8007e5a:	db1e      	blt.n	8007e9a <__ieee754_atan2+0x12a>
 8007e5c:	4632      	mov	r2, r6
 8007e5e:	463b      	mov	r3, r7
 8007e60:	f7f8 fca0 	bl	80007a4 <__aeabi_ddiv>
 8007e64:	ec41 0b10 	vmov	d0, r0, r1
 8007e68:	f000 fab2 	bl	80083d0 <fabs>
 8007e6c:	f000 f910 	bl	8008090 <atan>
 8007e70:	ec51 0b10 	vmov	r0, r1, d0
 8007e74:	2c01      	cmp	r4, #1
 8007e76:	d013      	beq.n	8007ea0 <__ieee754_atan2+0x130>
 8007e78:	2c02      	cmp	r4, #2
 8007e7a:	d015      	beq.n	8007ea8 <__ieee754_atan2+0x138>
 8007e7c:	2c00      	cmp	r4, #0
 8007e7e:	d098      	beq.n	8007db2 <__ieee754_atan2+0x42>
 8007e80:	a321      	add	r3, pc, #132	; (adr r3, 8007f08 <__ieee754_atan2+0x198>)
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	f7f8 f9ab 	bl	80001e0 <__aeabi_dsub>
 8007e8a:	a321      	add	r3, pc, #132	; (adr r3, 8007f10 <__ieee754_atan2+0x1a0>)
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	e014      	b.n	8007ebc <__ieee754_atan2+0x14c>
 8007e92:	a121      	add	r1, pc, #132	; (adr r1, 8007f18 <__ieee754_atan2+0x1a8>)
 8007e94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e98:	e7ec      	b.n	8007e74 <__ieee754_atan2+0x104>
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	e7e9      	b.n	8007e74 <__ieee754_atan2+0x104>
 8007ea0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	e784      	b.n	8007db2 <__ieee754_atan2+0x42>
 8007ea8:	a317      	add	r3, pc, #92	; (adr r3, 8007f08 <__ieee754_atan2+0x198>)
 8007eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eae:	f7f8 f997 	bl	80001e0 <__aeabi_dsub>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	a116      	add	r1, pc, #88	; (adr r1, 8007f10 <__ieee754_atan2+0x1a0>)
 8007eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ebc:	f7f8 f990 	bl	80001e0 <__aeabi_dsub>
 8007ec0:	e777      	b.n	8007db2 <__ieee754_atan2+0x42>
 8007ec2:	a117      	add	r1, pc, #92	; (adr r1, 8007f20 <__ieee754_atan2+0x1b0>)
 8007ec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ec8:	e773      	b.n	8007db2 <__ieee754_atan2+0x42>
 8007eca:	a111      	add	r1, pc, #68	; (adr r1, 8007f10 <__ieee754_atan2+0x1a0>)
 8007ecc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ed0:	e76f      	b.n	8007db2 <__ieee754_atan2+0x42>
 8007ed2:	a111      	add	r1, pc, #68	; (adr r1, 8007f18 <__ieee754_atan2+0x1a8>)
 8007ed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ed8:	e76b      	b.n	8007db2 <__ieee754_atan2+0x42>
 8007eda:	bf00      	nop
 8007edc:	f3af 8000 	nop.w
 8007ee0:	54442d18 	.word	0x54442d18
 8007ee4:	c00921fb 	.word	0xc00921fb
 8007ee8:	54442d18 	.word	0x54442d18
 8007eec:	bff921fb 	.word	0xbff921fb
 8007ef0:	54442d18 	.word	0x54442d18
 8007ef4:	bfe921fb 	.word	0xbfe921fb
 8007ef8:	7f3321d2 	.word	0x7f3321d2
 8007efc:	4002d97c 	.word	0x4002d97c
 8007f00:	7f3321d2 	.word	0x7f3321d2
 8007f04:	c002d97c 	.word	0xc002d97c
 8007f08:	33145c07 	.word	0x33145c07
 8007f0c:	3ca1a626 	.word	0x3ca1a626
 8007f10:	54442d18 	.word	0x54442d18
 8007f14:	400921fb 	.word	0x400921fb
 8007f18:	54442d18 	.word	0x54442d18
 8007f1c:	3ff921fb 	.word	0x3ff921fb
 8007f20:	54442d18 	.word	0x54442d18
 8007f24:	3fe921fb 	.word	0x3fe921fb
 8007f28:	7ff00000 	.word	0x7ff00000

08007f2c <__ieee754_sqrt>:
 8007f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f30:	4955      	ldr	r1, [pc, #340]	; (8008088 <__ieee754_sqrt+0x15c>)
 8007f32:	ec55 4b10 	vmov	r4, r5, d0
 8007f36:	43a9      	bics	r1, r5
 8007f38:	462b      	mov	r3, r5
 8007f3a:	462a      	mov	r2, r5
 8007f3c:	d112      	bne.n	8007f64 <__ieee754_sqrt+0x38>
 8007f3e:	ee10 2a10 	vmov	r2, s0
 8007f42:	ee10 0a10 	vmov	r0, s0
 8007f46:	4629      	mov	r1, r5
 8007f48:	f7f8 fb02 	bl	8000550 <__aeabi_dmul>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4620      	mov	r0, r4
 8007f52:	4629      	mov	r1, r5
 8007f54:	f7f8 f946 	bl	80001e4 <__adddf3>
 8007f58:	4604      	mov	r4, r0
 8007f5a:	460d      	mov	r5, r1
 8007f5c:	ec45 4b10 	vmov	d0, r4, r5
 8007f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f64:	2d00      	cmp	r5, #0
 8007f66:	ee10 0a10 	vmov	r0, s0
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	dc0f      	bgt.n	8007f8e <__ieee754_sqrt+0x62>
 8007f6e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007f72:	4330      	orrs	r0, r6
 8007f74:	d0f2      	beq.n	8007f5c <__ieee754_sqrt+0x30>
 8007f76:	b155      	cbz	r5, 8007f8e <__ieee754_sqrt+0x62>
 8007f78:	ee10 2a10 	vmov	r2, s0
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	4629      	mov	r1, r5
 8007f80:	f7f8 f92e 	bl	80001e0 <__aeabi_dsub>
 8007f84:	4602      	mov	r2, r0
 8007f86:	460b      	mov	r3, r1
 8007f88:	f7f8 fc0c 	bl	80007a4 <__aeabi_ddiv>
 8007f8c:	e7e4      	b.n	8007f58 <__ieee754_sqrt+0x2c>
 8007f8e:	151b      	asrs	r3, r3, #20
 8007f90:	d073      	beq.n	800807a <__ieee754_sqrt+0x14e>
 8007f92:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007f96:	07dd      	lsls	r5, r3, #31
 8007f98:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007f9c:	bf48      	it	mi
 8007f9e:	0fc8      	lsrmi	r0, r1, #31
 8007fa0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007fa4:	bf44      	itt	mi
 8007fa6:	0049      	lslmi	r1, r1, #1
 8007fa8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8007fac:	2500      	movs	r5, #0
 8007fae:	1058      	asrs	r0, r3, #1
 8007fb0:	0fcb      	lsrs	r3, r1, #31
 8007fb2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8007fb6:	0049      	lsls	r1, r1, #1
 8007fb8:	2316      	movs	r3, #22
 8007fba:	462c      	mov	r4, r5
 8007fbc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007fc0:	19a7      	adds	r7, r4, r6
 8007fc2:	4297      	cmp	r7, r2
 8007fc4:	bfde      	ittt	le
 8007fc6:	19bc      	addle	r4, r7, r6
 8007fc8:	1bd2      	suble	r2, r2, r7
 8007fca:	19ad      	addle	r5, r5, r6
 8007fcc:	0fcf      	lsrs	r7, r1, #31
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8007fd4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007fd8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007fdc:	d1f0      	bne.n	8007fc0 <__ieee754_sqrt+0x94>
 8007fde:	f04f 0c20 	mov.w	ip, #32
 8007fe2:	469e      	mov	lr, r3
 8007fe4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007fe8:	42a2      	cmp	r2, r4
 8007fea:	eb06 070e 	add.w	r7, r6, lr
 8007fee:	dc02      	bgt.n	8007ff6 <__ieee754_sqrt+0xca>
 8007ff0:	d112      	bne.n	8008018 <__ieee754_sqrt+0xec>
 8007ff2:	428f      	cmp	r7, r1
 8007ff4:	d810      	bhi.n	8008018 <__ieee754_sqrt+0xec>
 8007ff6:	2f00      	cmp	r7, #0
 8007ff8:	eb07 0e06 	add.w	lr, r7, r6
 8007ffc:	da42      	bge.n	8008084 <__ieee754_sqrt+0x158>
 8007ffe:	f1be 0f00 	cmp.w	lr, #0
 8008002:	db3f      	blt.n	8008084 <__ieee754_sqrt+0x158>
 8008004:	f104 0801 	add.w	r8, r4, #1
 8008008:	1b12      	subs	r2, r2, r4
 800800a:	428f      	cmp	r7, r1
 800800c:	bf88      	it	hi
 800800e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8008012:	1bc9      	subs	r1, r1, r7
 8008014:	4433      	add	r3, r6
 8008016:	4644      	mov	r4, r8
 8008018:	0052      	lsls	r2, r2, #1
 800801a:	f1bc 0c01 	subs.w	ip, ip, #1
 800801e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008022:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008026:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800802a:	d1dd      	bne.n	8007fe8 <__ieee754_sqrt+0xbc>
 800802c:	430a      	orrs	r2, r1
 800802e:	d006      	beq.n	800803e <__ieee754_sqrt+0x112>
 8008030:	1c5c      	adds	r4, r3, #1
 8008032:	bf13      	iteet	ne
 8008034:	3301      	addne	r3, #1
 8008036:	3501      	addeq	r5, #1
 8008038:	4663      	moveq	r3, ip
 800803a:	f023 0301 	bicne.w	r3, r3, #1
 800803e:	106a      	asrs	r2, r5, #1
 8008040:	085b      	lsrs	r3, r3, #1
 8008042:	07e9      	lsls	r1, r5, #31
 8008044:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008048:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800804c:	bf48      	it	mi
 800804e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008052:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008056:	461c      	mov	r4, r3
 8008058:	e780      	b.n	8007f5c <__ieee754_sqrt+0x30>
 800805a:	0aca      	lsrs	r2, r1, #11
 800805c:	3815      	subs	r0, #21
 800805e:	0549      	lsls	r1, r1, #21
 8008060:	2a00      	cmp	r2, #0
 8008062:	d0fa      	beq.n	800805a <__ieee754_sqrt+0x12e>
 8008064:	02d6      	lsls	r6, r2, #11
 8008066:	d50a      	bpl.n	800807e <__ieee754_sqrt+0x152>
 8008068:	f1c3 0420 	rsb	r4, r3, #32
 800806c:	fa21 f404 	lsr.w	r4, r1, r4
 8008070:	1e5d      	subs	r5, r3, #1
 8008072:	4099      	lsls	r1, r3
 8008074:	4322      	orrs	r2, r4
 8008076:	1b43      	subs	r3, r0, r5
 8008078:	e78b      	b.n	8007f92 <__ieee754_sqrt+0x66>
 800807a:	4618      	mov	r0, r3
 800807c:	e7f0      	b.n	8008060 <__ieee754_sqrt+0x134>
 800807e:	0052      	lsls	r2, r2, #1
 8008080:	3301      	adds	r3, #1
 8008082:	e7ef      	b.n	8008064 <__ieee754_sqrt+0x138>
 8008084:	46a0      	mov	r8, r4
 8008086:	e7bf      	b.n	8008008 <__ieee754_sqrt+0xdc>
 8008088:	7ff00000 	.word	0x7ff00000
 800808c:	00000000 	.word	0x00000000

08008090 <atan>:
 8008090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008094:	ec55 4b10 	vmov	r4, r5, d0
 8008098:	4bc3      	ldr	r3, [pc, #780]	; (80083a8 <atan+0x318>)
 800809a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800809e:	429e      	cmp	r6, r3
 80080a0:	46ab      	mov	fp, r5
 80080a2:	dd18      	ble.n	80080d6 <atan+0x46>
 80080a4:	4bc1      	ldr	r3, [pc, #772]	; (80083ac <atan+0x31c>)
 80080a6:	429e      	cmp	r6, r3
 80080a8:	dc01      	bgt.n	80080ae <atan+0x1e>
 80080aa:	d109      	bne.n	80080c0 <atan+0x30>
 80080ac:	b144      	cbz	r4, 80080c0 <atan+0x30>
 80080ae:	4622      	mov	r2, r4
 80080b0:	462b      	mov	r3, r5
 80080b2:	4620      	mov	r0, r4
 80080b4:	4629      	mov	r1, r5
 80080b6:	f7f8 f895 	bl	80001e4 <__adddf3>
 80080ba:	4604      	mov	r4, r0
 80080bc:	460d      	mov	r5, r1
 80080be:	e006      	b.n	80080ce <atan+0x3e>
 80080c0:	f1bb 0f00 	cmp.w	fp, #0
 80080c4:	f340 8131 	ble.w	800832a <atan+0x29a>
 80080c8:	a59b      	add	r5, pc, #620	; (adr r5, 8008338 <atan+0x2a8>)
 80080ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080ce:	ec45 4b10 	vmov	d0, r4, r5
 80080d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d6:	4bb6      	ldr	r3, [pc, #728]	; (80083b0 <atan+0x320>)
 80080d8:	429e      	cmp	r6, r3
 80080da:	dc14      	bgt.n	8008106 <atan+0x76>
 80080dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80080e0:	429e      	cmp	r6, r3
 80080e2:	dc0d      	bgt.n	8008100 <atan+0x70>
 80080e4:	a396      	add	r3, pc, #600	; (adr r3, 8008340 <atan+0x2b0>)
 80080e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ea:	ee10 0a10 	vmov	r0, s0
 80080ee:	4629      	mov	r1, r5
 80080f0:	f7f8 f878 	bl	80001e4 <__adddf3>
 80080f4:	2200      	movs	r2, #0
 80080f6:	4baf      	ldr	r3, [pc, #700]	; (80083b4 <atan+0x324>)
 80080f8:	f7f8 fcba 	bl	8000a70 <__aeabi_dcmpgt>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	d1e6      	bne.n	80080ce <atan+0x3e>
 8008100:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008104:	e02b      	b.n	800815e <atan+0xce>
 8008106:	f000 f963 	bl	80083d0 <fabs>
 800810a:	4bab      	ldr	r3, [pc, #684]	; (80083b8 <atan+0x328>)
 800810c:	429e      	cmp	r6, r3
 800810e:	ec55 4b10 	vmov	r4, r5, d0
 8008112:	f300 80bf 	bgt.w	8008294 <atan+0x204>
 8008116:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800811a:	429e      	cmp	r6, r3
 800811c:	f300 80a0 	bgt.w	8008260 <atan+0x1d0>
 8008120:	ee10 2a10 	vmov	r2, s0
 8008124:	ee10 0a10 	vmov	r0, s0
 8008128:	462b      	mov	r3, r5
 800812a:	4629      	mov	r1, r5
 800812c:	f7f8 f85a 	bl	80001e4 <__adddf3>
 8008130:	2200      	movs	r2, #0
 8008132:	4ba0      	ldr	r3, [pc, #640]	; (80083b4 <atan+0x324>)
 8008134:	f7f8 f854 	bl	80001e0 <__aeabi_dsub>
 8008138:	2200      	movs	r2, #0
 800813a:	4606      	mov	r6, r0
 800813c:	460f      	mov	r7, r1
 800813e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008142:	4620      	mov	r0, r4
 8008144:	4629      	mov	r1, r5
 8008146:	f7f8 f84d 	bl	80001e4 <__adddf3>
 800814a:	4602      	mov	r2, r0
 800814c:	460b      	mov	r3, r1
 800814e:	4630      	mov	r0, r6
 8008150:	4639      	mov	r1, r7
 8008152:	f7f8 fb27 	bl	80007a4 <__aeabi_ddiv>
 8008156:	f04f 0a00 	mov.w	sl, #0
 800815a:	4604      	mov	r4, r0
 800815c:	460d      	mov	r5, r1
 800815e:	4622      	mov	r2, r4
 8008160:	462b      	mov	r3, r5
 8008162:	4620      	mov	r0, r4
 8008164:	4629      	mov	r1, r5
 8008166:	f7f8 f9f3 	bl	8000550 <__aeabi_dmul>
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	4680      	mov	r8, r0
 8008170:	4689      	mov	r9, r1
 8008172:	f7f8 f9ed 	bl	8000550 <__aeabi_dmul>
 8008176:	a374      	add	r3, pc, #464	; (adr r3, 8008348 <atan+0x2b8>)
 8008178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817c:	4606      	mov	r6, r0
 800817e:	460f      	mov	r7, r1
 8008180:	f7f8 f9e6 	bl	8000550 <__aeabi_dmul>
 8008184:	a372      	add	r3, pc, #456	; (adr r3, 8008350 <atan+0x2c0>)
 8008186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818a:	f7f8 f82b 	bl	80001e4 <__adddf3>
 800818e:	4632      	mov	r2, r6
 8008190:	463b      	mov	r3, r7
 8008192:	f7f8 f9dd 	bl	8000550 <__aeabi_dmul>
 8008196:	a370      	add	r3, pc, #448	; (adr r3, 8008358 <atan+0x2c8>)
 8008198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819c:	f7f8 f822 	bl	80001e4 <__adddf3>
 80081a0:	4632      	mov	r2, r6
 80081a2:	463b      	mov	r3, r7
 80081a4:	f7f8 f9d4 	bl	8000550 <__aeabi_dmul>
 80081a8:	a36d      	add	r3, pc, #436	; (adr r3, 8008360 <atan+0x2d0>)
 80081aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ae:	f7f8 f819 	bl	80001e4 <__adddf3>
 80081b2:	4632      	mov	r2, r6
 80081b4:	463b      	mov	r3, r7
 80081b6:	f7f8 f9cb 	bl	8000550 <__aeabi_dmul>
 80081ba:	a36b      	add	r3, pc, #428	; (adr r3, 8008368 <atan+0x2d8>)
 80081bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c0:	f7f8 f810 	bl	80001e4 <__adddf3>
 80081c4:	4632      	mov	r2, r6
 80081c6:	463b      	mov	r3, r7
 80081c8:	f7f8 f9c2 	bl	8000550 <__aeabi_dmul>
 80081cc:	a368      	add	r3, pc, #416	; (adr r3, 8008370 <atan+0x2e0>)
 80081ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d2:	f7f8 f807 	bl	80001e4 <__adddf3>
 80081d6:	4642      	mov	r2, r8
 80081d8:	464b      	mov	r3, r9
 80081da:	f7f8 f9b9 	bl	8000550 <__aeabi_dmul>
 80081de:	a366      	add	r3, pc, #408	; (adr r3, 8008378 <atan+0x2e8>)
 80081e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e4:	4680      	mov	r8, r0
 80081e6:	4689      	mov	r9, r1
 80081e8:	4630      	mov	r0, r6
 80081ea:	4639      	mov	r1, r7
 80081ec:	f7f8 f9b0 	bl	8000550 <__aeabi_dmul>
 80081f0:	a363      	add	r3, pc, #396	; (adr r3, 8008380 <atan+0x2f0>)
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	f7f7 fff3 	bl	80001e0 <__aeabi_dsub>
 80081fa:	4632      	mov	r2, r6
 80081fc:	463b      	mov	r3, r7
 80081fe:	f7f8 f9a7 	bl	8000550 <__aeabi_dmul>
 8008202:	a361      	add	r3, pc, #388	; (adr r3, 8008388 <atan+0x2f8>)
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f7f7 ffea 	bl	80001e0 <__aeabi_dsub>
 800820c:	4632      	mov	r2, r6
 800820e:	463b      	mov	r3, r7
 8008210:	f7f8 f99e 	bl	8000550 <__aeabi_dmul>
 8008214:	a35e      	add	r3, pc, #376	; (adr r3, 8008390 <atan+0x300>)
 8008216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821a:	f7f7 ffe1 	bl	80001e0 <__aeabi_dsub>
 800821e:	4632      	mov	r2, r6
 8008220:	463b      	mov	r3, r7
 8008222:	f7f8 f995 	bl	8000550 <__aeabi_dmul>
 8008226:	a35c      	add	r3, pc, #368	; (adr r3, 8008398 <atan+0x308>)
 8008228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822c:	f7f7 ffd8 	bl	80001e0 <__aeabi_dsub>
 8008230:	4632      	mov	r2, r6
 8008232:	463b      	mov	r3, r7
 8008234:	f7f8 f98c 	bl	8000550 <__aeabi_dmul>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	4640      	mov	r0, r8
 800823e:	4649      	mov	r1, r9
 8008240:	f7f7 ffd0 	bl	80001e4 <__adddf3>
 8008244:	4622      	mov	r2, r4
 8008246:	462b      	mov	r3, r5
 8008248:	f7f8 f982 	bl	8000550 <__aeabi_dmul>
 800824c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	d14b      	bne.n	80082ee <atan+0x25e>
 8008256:	4620      	mov	r0, r4
 8008258:	4629      	mov	r1, r5
 800825a:	f7f7 ffc1 	bl	80001e0 <__aeabi_dsub>
 800825e:	e72c      	b.n	80080ba <atan+0x2a>
 8008260:	ee10 0a10 	vmov	r0, s0
 8008264:	2200      	movs	r2, #0
 8008266:	4b53      	ldr	r3, [pc, #332]	; (80083b4 <atan+0x324>)
 8008268:	4629      	mov	r1, r5
 800826a:	f7f7 ffb9 	bl	80001e0 <__aeabi_dsub>
 800826e:	2200      	movs	r2, #0
 8008270:	4606      	mov	r6, r0
 8008272:	460f      	mov	r7, r1
 8008274:	4b4f      	ldr	r3, [pc, #316]	; (80083b4 <atan+0x324>)
 8008276:	4620      	mov	r0, r4
 8008278:	4629      	mov	r1, r5
 800827a:	f7f7 ffb3 	bl	80001e4 <__adddf3>
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	4630      	mov	r0, r6
 8008284:	4639      	mov	r1, r7
 8008286:	f7f8 fa8d 	bl	80007a4 <__aeabi_ddiv>
 800828a:	f04f 0a01 	mov.w	sl, #1
 800828e:	4604      	mov	r4, r0
 8008290:	460d      	mov	r5, r1
 8008292:	e764      	b.n	800815e <atan+0xce>
 8008294:	4b49      	ldr	r3, [pc, #292]	; (80083bc <atan+0x32c>)
 8008296:	429e      	cmp	r6, r3
 8008298:	dc1d      	bgt.n	80082d6 <atan+0x246>
 800829a:	ee10 0a10 	vmov	r0, s0
 800829e:	2200      	movs	r2, #0
 80082a0:	4b47      	ldr	r3, [pc, #284]	; (80083c0 <atan+0x330>)
 80082a2:	4629      	mov	r1, r5
 80082a4:	f7f7 ff9c 	bl	80001e0 <__aeabi_dsub>
 80082a8:	2200      	movs	r2, #0
 80082aa:	4606      	mov	r6, r0
 80082ac:	460f      	mov	r7, r1
 80082ae:	4b44      	ldr	r3, [pc, #272]	; (80083c0 <atan+0x330>)
 80082b0:	4620      	mov	r0, r4
 80082b2:	4629      	mov	r1, r5
 80082b4:	f7f8 f94c 	bl	8000550 <__aeabi_dmul>
 80082b8:	2200      	movs	r2, #0
 80082ba:	4b3e      	ldr	r3, [pc, #248]	; (80083b4 <atan+0x324>)
 80082bc:	f7f7 ff92 	bl	80001e4 <__adddf3>
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	4630      	mov	r0, r6
 80082c6:	4639      	mov	r1, r7
 80082c8:	f7f8 fa6c 	bl	80007a4 <__aeabi_ddiv>
 80082cc:	f04f 0a02 	mov.w	sl, #2
 80082d0:	4604      	mov	r4, r0
 80082d2:	460d      	mov	r5, r1
 80082d4:	e743      	b.n	800815e <atan+0xce>
 80082d6:	462b      	mov	r3, r5
 80082d8:	ee10 2a10 	vmov	r2, s0
 80082dc:	2000      	movs	r0, #0
 80082de:	4939      	ldr	r1, [pc, #228]	; (80083c4 <atan+0x334>)
 80082e0:	f7f8 fa60 	bl	80007a4 <__aeabi_ddiv>
 80082e4:	f04f 0a03 	mov.w	sl, #3
 80082e8:	4604      	mov	r4, r0
 80082ea:	460d      	mov	r5, r1
 80082ec:	e737      	b.n	800815e <atan+0xce>
 80082ee:	4b36      	ldr	r3, [pc, #216]	; (80083c8 <atan+0x338>)
 80082f0:	4e36      	ldr	r6, [pc, #216]	; (80083cc <atan+0x33c>)
 80082f2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80082f6:	4456      	add	r6, sl
 80082f8:	449a      	add	sl, r3
 80082fa:	e9da 2300 	ldrd	r2, r3, [sl]
 80082fe:	f7f7 ff6f 	bl	80001e0 <__aeabi_dsub>
 8008302:	4622      	mov	r2, r4
 8008304:	462b      	mov	r3, r5
 8008306:	f7f7 ff6b 	bl	80001e0 <__aeabi_dsub>
 800830a:	4602      	mov	r2, r0
 800830c:	460b      	mov	r3, r1
 800830e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008312:	f7f7 ff65 	bl	80001e0 <__aeabi_dsub>
 8008316:	f1bb 0f00 	cmp.w	fp, #0
 800831a:	4604      	mov	r4, r0
 800831c:	460d      	mov	r5, r1
 800831e:	f6bf aed6 	bge.w	80080ce <atan+0x3e>
 8008322:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008326:	461d      	mov	r5, r3
 8008328:	e6d1      	b.n	80080ce <atan+0x3e>
 800832a:	a51d      	add	r5, pc, #116	; (adr r5, 80083a0 <atan+0x310>)
 800832c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008330:	e6cd      	b.n	80080ce <atan+0x3e>
 8008332:	bf00      	nop
 8008334:	f3af 8000 	nop.w
 8008338:	54442d18 	.word	0x54442d18
 800833c:	3ff921fb 	.word	0x3ff921fb
 8008340:	8800759c 	.word	0x8800759c
 8008344:	7e37e43c 	.word	0x7e37e43c
 8008348:	e322da11 	.word	0xe322da11
 800834c:	3f90ad3a 	.word	0x3f90ad3a
 8008350:	24760deb 	.word	0x24760deb
 8008354:	3fa97b4b 	.word	0x3fa97b4b
 8008358:	a0d03d51 	.word	0xa0d03d51
 800835c:	3fb10d66 	.word	0x3fb10d66
 8008360:	c54c206e 	.word	0xc54c206e
 8008364:	3fb745cd 	.word	0x3fb745cd
 8008368:	920083ff 	.word	0x920083ff
 800836c:	3fc24924 	.word	0x3fc24924
 8008370:	5555550d 	.word	0x5555550d
 8008374:	3fd55555 	.word	0x3fd55555
 8008378:	2c6a6c2f 	.word	0x2c6a6c2f
 800837c:	bfa2b444 	.word	0xbfa2b444
 8008380:	52defd9a 	.word	0x52defd9a
 8008384:	3fadde2d 	.word	0x3fadde2d
 8008388:	af749a6d 	.word	0xaf749a6d
 800838c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008390:	fe231671 	.word	0xfe231671
 8008394:	3fbc71c6 	.word	0x3fbc71c6
 8008398:	9998ebc4 	.word	0x9998ebc4
 800839c:	3fc99999 	.word	0x3fc99999
 80083a0:	54442d18 	.word	0x54442d18
 80083a4:	bff921fb 	.word	0xbff921fb
 80083a8:	440fffff 	.word	0x440fffff
 80083ac:	7ff00000 	.word	0x7ff00000
 80083b0:	3fdbffff 	.word	0x3fdbffff
 80083b4:	3ff00000 	.word	0x3ff00000
 80083b8:	3ff2ffff 	.word	0x3ff2ffff
 80083bc:	40037fff 	.word	0x40037fff
 80083c0:	3ff80000 	.word	0x3ff80000
 80083c4:	bff00000 	.word	0xbff00000
 80083c8:	080093a0 	.word	0x080093a0
 80083cc:	08009380 	.word	0x08009380

080083d0 <fabs>:
 80083d0:	ec51 0b10 	vmov	r0, r1, d0
 80083d4:	ee10 2a10 	vmov	r2, s0
 80083d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80083dc:	ec43 2b10 	vmov	d0, r2, r3
 80083e0:	4770      	bx	lr

080083e2 <matherr>:
 80083e2:	2000      	movs	r0, #0
 80083e4:	4770      	bx	lr
	...

080083e8 <nan>:
 80083e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80083f0 <nan+0x8>
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	00000000 	.word	0x00000000
 80083f4:	7ff80000 	.word	0x7ff80000

080083f8 <_init>:
 80083f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fa:	bf00      	nop
 80083fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fe:	bc08      	pop	{r3}
 8008400:	469e      	mov	lr, r3
 8008402:	4770      	bx	lr

08008404 <_fini>:
 8008404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008406:	bf00      	nop
 8008408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800840a:	bc08      	pop	{r3}
 800840c:	469e      	mov	lr, r3
 800840e:	4770      	bx	lr
