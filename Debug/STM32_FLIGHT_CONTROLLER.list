
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a078  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001438  0800a218  0800a218  0001a218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b650  0800b650  00020268  2**0
                  CONTENTS
  4 .ARM          00000008  0800b650  0800b650  0001b650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b658  0800b658  00020268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b658  0800b658  0001b658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b65c  0800b65c  0001b65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  0800b660  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000448  20000268  0800b8c8  00020268  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  0800b8c8  000206b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
 12 .debug_info   000233c8  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037ca  00000000  00000000  00043660  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000126fa  00000000  00000000  00046e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001968  00000000  00000000  00059528  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018f0  00000000  00000000  0005ae90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001aa5d  00000000  00000000  0005c780  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001211c  00000000  00000000  000771dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0009fd1a  00000000  00000000  000892f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00129013  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058e8  00000000  00000000  00129090  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000268 	.word	0x20000268
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a200 	.word	0x0800a200

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000026c 	.word	0x2000026c
 80001dc:	0800a200 	.word	0x0800a200

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2iz>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d215      	bcs.n	8000ac2 <__aeabi_d2iz+0x36>
 8000a96:	d511      	bpl.n	8000abc <__aeabi_d2iz+0x30>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d912      	bls.n	8000ac8 <__aeabi_d2iz+0x3c>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d105      	bne.n	8000ad4 <__aeabi_d2iz+0x48>
 8000ac8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	bf08      	it	eq
 8000ace:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b90:	f000 b972 	b.w	8000e78 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9e08      	ldr	r6, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	4688      	mov	r8, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14b      	bne.n	8000c52 <__udivmoddi4+0xa6>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4615      	mov	r5, r2
 8000bbe:	d967      	bls.n	8000c90 <__udivmoddi4+0xe4>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b14a      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc6:	f1c2 0720 	rsb	r7, r2, #32
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	fa20 f707 	lsr.w	r7, r0, r7
 8000bd2:	4095      	lsls	r5, r2
 8000bd4:	ea47 0803 	orr.w	r8, r7, r3
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000be4:	fa1f fc85 	uxth.w	ip, r5
 8000be8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bf0:	fb07 f10c 	mul.w	r1, r7, ip
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x60>
 8000bf8:	18eb      	adds	r3, r5, r3
 8000bfa:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bfe:	f080 811b 	bcs.w	8000e38 <__udivmoddi4+0x28c>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 8118 	bls.w	8000e38 <__udivmoddi4+0x28c>
 8000c08:	3f02      	subs	r7, #2
 8000c0a:	442b      	add	r3, r5
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c20:	45a4      	cmp	ip, r4
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x8c>
 8000c24:	192c      	adds	r4, r5, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c2a:	f080 8107 	bcs.w	8000e3c <__udivmoddi4+0x290>
 8000c2e:	45a4      	cmp	ip, r4
 8000c30:	f240 8104 	bls.w	8000e3c <__udivmoddi4+0x290>
 8000c34:	3802      	subs	r0, #2
 8000c36:	442c      	add	r4, r5
 8000c38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c3c:	eba4 040c 	sub.w	r4, r4, ip
 8000c40:	2700      	movs	r7, #0
 8000c42:	b11e      	cbz	r6, 8000c4c <__udivmoddi4+0xa0>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4c:	4639      	mov	r1, r7
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0xbe>
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	f000 80eb 	beq.w	8000e32 <__udivmoddi4+0x286>
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c62:	4638      	mov	r0, r7
 8000c64:	4639      	mov	r1, r7
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f783 	clz	r7, r3
 8000c6e:	2f00      	cmp	r7, #0
 8000c70:	d147      	bne.n	8000d02 <__udivmoddi4+0x156>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0xd0>
 8000c76:	4282      	cmp	r2, r0
 8000c78:	f200 80fa 	bhi.w	8000e70 <__udivmoddi4+0x2c4>
 8000c7c:	1a84      	subs	r4, r0, r2
 8000c7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	4698      	mov	r8, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d0e0      	beq.n	8000c4c <__udivmoddi4+0xa0>
 8000c8a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c8e:	e7dd      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000c90:	b902      	cbnz	r2, 8000c94 <__udivmoddi4+0xe8>
 8000c92:	deff      	udf	#255	; 0xff
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f040 808f 	bne.w	8000dbc <__udivmoddi4+0x210>
 8000c9e:	1b49      	subs	r1, r1, r5
 8000ca0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca4:	fa1f f885 	uxth.w	r8, r5
 8000ca8:	2701      	movs	r7, #1
 8000caa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cae:	0c23      	lsrs	r3, r4, #16
 8000cb0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cbc:	4299      	cmp	r1, r3
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0x124>
 8000cc0:	18eb      	adds	r3, r5, r3
 8000cc2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x122>
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	f200 80cd 	bhi.w	8000e68 <__udivmoddi4+0x2bc>
 8000cce:	4684      	mov	ip, r0
 8000cd0:	1a59      	subs	r1, r3, r1
 8000cd2:	b2a3      	uxth	r3, r4
 8000cd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cdc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ce0:	fb08 f800 	mul.w	r8, r8, r0
 8000ce4:	45a0      	cmp	r8, r4
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x14c>
 8000ce8:	192c      	adds	r4, r5, r4
 8000cea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x14a>
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	f200 80b6 	bhi.w	8000e62 <__udivmoddi4+0x2b6>
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	eba4 0408 	sub.w	r4, r4, r8
 8000cfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d00:	e79f      	b.n	8000c42 <__udivmoddi4+0x96>
 8000d02:	f1c7 0c20 	rsb	ip, r7, #32
 8000d06:	40bb      	lsls	r3, r7
 8000d08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d10:	fa01 f407 	lsl.w	r4, r1, r7
 8000d14:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d18:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d20:	4325      	orrs	r5, r4
 8000d22:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d26:	0c2c      	lsrs	r4, r5, #16
 8000d28:	fb08 3319 	mls	r3, r8, r9, r3
 8000d2c:	fa1f fa8e 	uxth.w	sl, lr
 8000d30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d34:	fb09 f40a 	mul.w	r4, r9, sl
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d3e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b0>
 8000d44:	eb1e 0303 	adds.w	r3, lr, r3
 8000d48:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d4c:	f080 8087 	bcs.w	8000e5e <__udivmoddi4+0x2b2>
 8000d50:	429c      	cmp	r4, r3
 8000d52:	f240 8084 	bls.w	8000e5e <__udivmoddi4+0x2b2>
 8000d56:	f1a9 0902 	sub.w	r9, r9, #2
 8000d5a:	4473      	add	r3, lr
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	b2ad      	uxth	r5, r5
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d70:	45a2      	cmp	sl, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1da>
 8000d74:	eb1e 0404 	adds.w	r4, lr, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7c:	d26b      	bcs.n	8000e56 <__udivmoddi4+0x2aa>
 8000d7e:	45a2      	cmp	sl, r4
 8000d80:	d969      	bls.n	8000e56 <__udivmoddi4+0x2aa>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4474      	add	r4, lr
 8000d86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8e:	eba4 040a 	sub.w	r4, r4, sl
 8000d92:	454c      	cmp	r4, r9
 8000d94:	46c2      	mov	sl, r8
 8000d96:	464b      	mov	r3, r9
 8000d98:	d354      	bcc.n	8000e44 <__udivmoddi4+0x298>
 8000d9a:	d051      	beq.n	8000e40 <__udivmoddi4+0x294>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d069      	beq.n	8000e74 <__udivmoddi4+0x2c8>
 8000da0:	ebb1 050a 	subs.w	r5, r1, sl
 8000da4:	eb64 0403 	sbc.w	r4, r4, r3
 8000da8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dac:	40fd      	lsrs	r5, r7
 8000dae:	40fc      	lsrs	r4, r7
 8000db0:	ea4c 0505 	orr.w	r5, ip, r5
 8000db4:	e9c6 5400 	strd	r5, r4, [r6]
 8000db8:	2700      	movs	r7, #0
 8000dba:	e747      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f703 	lsr.w	r7, r0, r3
 8000dc4:	4095      	lsls	r5, r2
 8000dc6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dca:	fa21 f303 	lsr.w	r3, r1, r3
 8000dce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd2:	4338      	orrs	r0, r7
 8000dd4:	0c01      	lsrs	r1, r0, #16
 8000dd6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dda:	fa1f f885 	uxth.w	r8, r5
 8000dde:	fb0e 3317 	mls	r3, lr, r7, r3
 8000de2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de6:	fb07 f308 	mul.w	r3, r7, r8
 8000dea:	428b      	cmp	r3, r1
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x256>
 8000df2:	1869      	adds	r1, r5, r1
 8000df4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000df8:	d22f      	bcs.n	8000e5a <__udivmoddi4+0x2ae>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d92d      	bls.n	8000e5a <__udivmoddi4+0x2ae>
 8000dfe:	3f02      	subs	r7, #2
 8000e00:	4429      	add	r1, r5
 8000e02:	1acb      	subs	r3, r1, r3
 8000e04:	b281      	uxth	r1, r0
 8000e06:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb00 f308 	mul.w	r3, r0, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x27e>
 8000e1a:	1869      	adds	r1, r5, r1
 8000e1c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e20:	d217      	bcs.n	8000e52 <__udivmoddi4+0x2a6>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d915      	bls.n	8000e52 <__udivmoddi4+0x2a6>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4429      	add	r1, r5
 8000e2a:	1ac9      	subs	r1, r1, r3
 8000e2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e30:	e73b      	b.n	8000caa <__udivmoddi4+0xfe>
 8000e32:	4637      	mov	r7, r6
 8000e34:	4630      	mov	r0, r6
 8000e36:	e709      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000e38:	4607      	mov	r7, r0
 8000e3a:	e6e7      	b.n	8000c0c <__udivmoddi4+0x60>
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	e6fb      	b.n	8000c38 <__udivmoddi4+0x8c>
 8000e40:	4541      	cmp	r1, r8
 8000e42:	d2ab      	bcs.n	8000d9c <__udivmoddi4+0x1f0>
 8000e44:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e48:	eb69 020e 	sbc.w	r2, r9, lr
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	4613      	mov	r3, r2
 8000e50:	e7a4      	b.n	8000d9c <__udivmoddi4+0x1f0>
 8000e52:	4660      	mov	r0, ip
 8000e54:	e7e9      	b.n	8000e2a <__udivmoddi4+0x27e>
 8000e56:	4618      	mov	r0, r3
 8000e58:	e795      	b.n	8000d86 <__udivmoddi4+0x1da>
 8000e5a:	4667      	mov	r7, ip
 8000e5c:	e7d1      	b.n	8000e02 <__udivmoddi4+0x256>
 8000e5e:	4681      	mov	r9, r0
 8000e60:	e77c      	b.n	8000d5c <__udivmoddi4+0x1b0>
 8000e62:	3802      	subs	r0, #2
 8000e64:	442c      	add	r4, r5
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0x14c>
 8000e68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e6c:	442b      	add	r3, r5
 8000e6e:	e72f      	b.n	8000cd0 <__udivmoddi4+0x124>
 8000e70:	4638      	mov	r0, r7
 8000e72:	e708      	b.n	8000c86 <__udivmoddi4+0xda>
 8000e74:	4637      	mov	r7, r6
 8000e76:	e6e9      	b.n	8000c4c <__udivmoddi4+0xa0>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <strlen>:
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d1fb      	bne.n	8000e7e <strlen+0x2>
 8000e86:	1a18      	subs	r0, r3, r0
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4770      	bx	lr
 8000e8c:	0000      	movs	r0, r0
	...

08000e90 <memchr>:
 8000e90:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000e94:	2a10      	cmp	r2, #16
 8000e96:	db2b      	blt.n	8000ef0 <memchr+0x60>
 8000e98:	f010 0f07 	tst.w	r0, #7
 8000e9c:	d008      	beq.n	8000eb0 <memchr+0x20>
 8000e9e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000ea2:	3a01      	subs	r2, #1
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	d02d      	beq.n	8000f04 <memchr+0x74>
 8000ea8:	f010 0f07 	tst.w	r0, #7
 8000eac:	b342      	cbz	r2, 8000f00 <memchr+0x70>
 8000eae:	d1f6      	bne.n	8000e9e <memchr+0xe>
 8000eb0:	b4f0      	push	{r4, r5, r6, r7}
 8000eb2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000eb6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000eba:	f022 0407 	bic.w	r4, r2, #7
 8000ebe:	f07f 0700 	mvns.w	r7, #0
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000ec8:	3c08      	subs	r4, #8
 8000eca:	ea85 0501 	eor.w	r5, r5, r1
 8000ece:	ea86 0601 	eor.w	r6, r6, r1
 8000ed2:	fa85 f547 	uadd8	r5, r5, r7
 8000ed6:	faa3 f587 	sel	r5, r3, r7
 8000eda:	fa86 f647 	uadd8	r6, r6, r7
 8000ede:	faa5 f687 	sel	r6, r5, r7
 8000ee2:	b98e      	cbnz	r6, 8000f08 <memchr+0x78>
 8000ee4:	d1ee      	bne.n	8000ec4 <memchr+0x34>
 8000ee6:	bcf0      	pop	{r4, r5, r6, r7}
 8000ee8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000eec:	f002 0207 	and.w	r2, r2, #7
 8000ef0:	b132      	cbz	r2, 8000f00 <memchr+0x70>
 8000ef2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000ef6:	3a01      	subs	r2, #1
 8000ef8:	ea83 0301 	eor.w	r3, r3, r1
 8000efc:	b113      	cbz	r3, 8000f04 <memchr+0x74>
 8000efe:	d1f8      	bne.n	8000ef2 <memchr+0x62>
 8000f00:	2000      	movs	r0, #0
 8000f02:	4770      	bx	lr
 8000f04:	3801      	subs	r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	2d00      	cmp	r5, #0
 8000f0a:	bf06      	itte	eq
 8000f0c:	4635      	moveq	r5, r6
 8000f0e:	3803      	subeq	r0, #3
 8000f10:	3807      	subne	r0, #7
 8000f12:	f015 0f01 	tst.w	r5, #1
 8000f16:	d107      	bne.n	8000f28 <memchr+0x98>
 8000f18:	3001      	adds	r0, #1
 8000f1a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000f1e:	bf02      	ittt	eq
 8000f20:	3001      	addeq	r0, #1
 8000f22:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000f26:	3001      	addeq	r0, #1
 8000f28:	bcf0      	pop	{r4, r5, r6, r7}
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <__aeabi_dcmpun>:
 8000f30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000f34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f38:	d102      	bne.n	8000f40 <__aeabi_dcmpun+0x10>
 8000f3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000f3e:	d10a      	bne.n	8000f56 <__aeabi_dcmpun+0x26>
 8000f40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000f44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000f48:	d102      	bne.n	8000f50 <__aeabi_dcmpun+0x20>
 8000f4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000f4e:	d102      	bne.n	8000f56 <__aeabi_dcmpun+0x26>
 8000f50:	f04f 0000 	mov.w	r0, #0
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0001 	mov.w	r0, #1
 8000f5a:	4770      	bx	lr

08000f5c <imu_get_roll>:
static void tap_cb(unsigned char direction, unsigned char count);


float imu_get_roll(){
return roll;
}
 8000f5c:	4b01      	ldr	r3, [pc, #4]	; (8000f64 <imu_get_roll+0x8>)
 8000f5e:	ed93 0a00 	vldr	s0, [r3]
 8000f62:	4770      	bx	lr
 8000f64:	20000454 	.word	0x20000454

08000f68 <imu_get_pitch>:
float imu_get_pitch(){
return pitch;
}
 8000f68:	4b01      	ldr	r3, [pc, #4]	; (8000f70 <imu_get_pitch+0x8>)
 8000f6a:	ed93 0a00 	vldr	s0, [r3]
 8000f6e:	4770      	bx	lr
 8000f70:	20000450 	.word	0x20000450

08000f74 <imu_get_yaw>:
float imu_get_yaw(){
return yaw;
}
 8000f74:	4b01      	ldr	r3, [pc, #4]	; (8000f7c <imu_get_yaw+0x8>)
 8000f76:	ed93 0a00 	vldr	s0, [r3]
 8000f7a:	4770      	bx	lr
 8000f7c:	20000444 	.word	0x20000444

08000f80 <imu_setLPF>:
	}
	return 0;
}

inv_error_t imu_setLPF(unsigned short lpf)
{
 8000f80:	b508      	push	{r3, lr}
	return mpu_set_lpf(lpf);
 8000f82:	f004 f8af 	bl	80050e4 <mpu_set_lpf>
}
 8000f86:	bd08      	pop	{r3, pc}

08000f88 <imu_setSampleRate>:
	}
	return 0;
}

inv_error_t imu_setSampleRate(unsigned short rate)
{
 8000f88:	b508      	push	{r3, lr}
    return mpu_set_sample_rate(rate);
 8000f8a:	f004 fc95 	bl	80058b8 <mpu_set_sample_rate>
}
 8000f8e:	bd08      	pop	{r3, pc}

08000f90 <imu_setCompassSampleRate>:
	}
	return 0;
}

inv_error_t imu_setCompassSampleRate(unsigned short rate)
{
 8000f90:	b508      	push	{r3, lr}
	return mpu_set_compass_sample_rate(rate);
 8000f92:	f004 f8f3 	bl	800517c <mpu_set_compass_sample_rate>
}
 8000f96:	bd08      	pop	{r3, pc}

08000f98 <imu_getGyroSens>:

	return 0;
}

float imu_getGyroSens(void)
{
 8000f98:	b500      	push	{lr}
 8000f9a:	b083      	sub	sp, #12
	float sens;
	if (mpu_get_gyro_sens(&sens) == INV_SUCCESS)
 8000f9c:	a801      	add	r0, sp, #4
 8000f9e:	f004 f921 	bl	80051e4 <mpu_get_gyro_sens>
 8000fa2:	b920      	cbnz	r0, 8000fae <imu_getGyroSens+0x16>
	{
		return sens;
 8000fa4:	ed9d 0a01 	vldr	s0, [sp, #4]
	}
	return 0;
}
 8000fa8:	b003      	add	sp, #12
 8000faa:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
 8000fae:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8000fb4 <imu_getGyroSens+0x1c>
 8000fb2:	e7f9      	b.n	8000fa8 <imu_getGyroSens+0x10>
 8000fb4:	00000000 	.word	0x00000000

08000fb8 <imu_setGyroFSR>:
{
 8000fb8:	b510      	push	{r4, lr}
	err = mpu_set_gyro_fsr(fsr);
 8000fba:	f003 ffd9 	bl	8004f70 <mpu_set_gyro_fsr>
	if (err == INV_SUCCESS)
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	b108      	cbz	r0, 8000fc6 <imu_setGyroFSR+0xe>
}
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	bd10      	pop	{r4, pc}
		_gSense = imu_getGyroSens();
 8000fc6:	f7ff ffe7 	bl	8000f98 <imu_getGyroSens>
 8000fca:	4b02      	ldr	r3, [pc, #8]	; (8000fd4 <imu_setGyroFSR+0x1c>)
 8000fcc:	ed83 0a00 	vstr	s0, [r3]
	return err;
 8000fd0:	e7f7      	b.n	8000fc2 <imu_setGyroFSR+0xa>
 8000fd2:	bf00      	nop
 8000fd4:	20000468 	.word	0x20000468

08000fd8 <imu_getAccelSens>:

unsigned short imu_getAccelSens(void)
{
 8000fd8:	b500      	push	{lr}
 8000fda:	b083      	sub	sp, #12
	unsigned short sens;
	if (mpu_get_accel_sens(&sens) == INV_SUCCESS)
 8000fdc:	f10d 0006 	add.w	r0, sp, #6
 8000fe0:	f004 f926 	bl	8005230 <mpu_get_accel_sens>
 8000fe4:	b920      	cbnz	r0, 8000ff0 <imu_getAccelSens+0x18>
	{
		return sens;
 8000fe6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
	}
	return 0;
}
 8000fea:	b003      	add	sp, #12
 8000fec:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	e7fa      	b.n	8000fea <imu_getAccelSens+0x12>

08000ff4 <imu_setAccelFSR>:
{
 8000ff4:	b510      	push	{r4, lr}
	err = mpu_set_accel_fsr(fsr);
 8000ff6:	f004 f829 	bl	800504c <mpu_set_accel_fsr>
	if (err == INV_SUCCESS)
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	b108      	cbz	r0, 8001002 <imu_setAccelFSR+0xe>
}
 8000ffe:	4620      	mov	r0, r4
 8001000:	bd10      	pop	{r4, pc}
		_aSense = imu_getAccelSens();
 8001002:	f7ff ffe9 	bl	8000fd8 <imu_getAccelSens>
 8001006:	4b01      	ldr	r3, [pc, #4]	; (800100c <imu_setAccelFSR+0x18>)
 8001008:	8018      	strh	r0, [r3, #0]
	return err;
 800100a:	e7f8      	b.n	8000ffe <imu_setAccelFSR+0xa>
 800100c:	20000484 	.word	0x20000484

08001010 <imu_fifoAvailable>:
{
	return mpu_reset_fifo();
}

unsigned short imu_fifoAvailable(void)
{
 8001010:	b500      	push	{lr}
 8001012:	b083      	sub	sp, #12
	unsigned char fifoH, fifoL;

	if (mpu_read_reg(MPU9250_FIFO_COUNTH, &fifoH) != INV_SUCCESS)
 8001014:	f10d 0107 	add.w	r1, sp, #7
 8001018:	2072      	movs	r0, #114	; 0x72
 800101a:	f003 fe8d 	bl	8004d38 <mpu_read_reg>
 800101e:	b118      	cbz	r0, 8001028 <imu_fifoAvailable+0x18>
		return 0;
 8001020:	2000      	movs	r0, #0
	if (mpu_read_reg(MPU9250_FIFO_COUNTL, &fifoL) != INV_SUCCESS)
		return 0;

	return (fifoH << 8 ) | fifoL;
}
 8001022:	b003      	add	sp, #12
 8001024:	f85d fb04 	ldr.w	pc, [sp], #4
	if (mpu_read_reg(MPU9250_FIFO_COUNTL, &fifoL) != INV_SUCCESS)
 8001028:	f10d 0106 	add.w	r1, sp, #6
 800102c:	2073      	movs	r0, #115	; 0x73
 800102e:	f003 fe83 	bl	8004d38 <mpu_read_reg>
 8001032:	b930      	cbnz	r0, 8001042 <imu_fifoAvailable+0x32>
	return (fifoH << 8 ) | fifoL;
 8001034:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001038:	f89d 0006 	ldrb.w	r0, [sp, #6]
 800103c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001040:	e7ef      	b.n	8001022 <imu_fifoAvailable+0x12>
		return 0;
 8001042:	2000      	movs	r0, #0
 8001044:	e7ed      	b.n	8001022 <imu_fifoAvailable+0x12>

08001046 <imu_setSensors>:

	return INV_SUCCESS;
}

inv_error_t imu_setSensors(unsigned char sensors)
{
 8001046:	b508      	push	{r3, lr}
	return mpu_set_sensors(sensors);
 8001048:	f004 fc8c 	bl	8005964 <mpu_set_sensors>
}
 800104c:	bd08      	pop	{r3, pc}
	...

08001050 <imu_begin>:
{
 8001050:	b510      	push	{r4, lr}
	result = mpu_init(&int_param);
 8001052:	4668      	mov	r0, sp
 8001054:	f004 fd52 	bl	8005afc <mpu_init>
	if (result)
 8001058:	4604      	mov	r4, r0
 800105a:	b108      	cbz	r0, 8001060 <imu_begin+0x10>
}
 800105c:	4620      	mov	r0, r4
 800105e:	bd10      	pop	{r4, pc}
	mpu_set_bypass(1); // Place all slaves (including compass) on primary bus
 8001060:	2001      	movs	r0, #1
 8001062:	f004 f99d 	bl	80053a0 <mpu_set_bypass>
	imu_setSensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
 8001066:	2079      	movs	r0, #121	; 0x79
 8001068:	f7ff ffed 	bl	8001046 <imu_setSensors>
	_gSense = imu_getGyroSens();
 800106c:	f7ff ff94 	bl	8000f98 <imu_getGyroSens>
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <imu_begin+0x30>)
 8001072:	ed83 0a00 	vstr	s0, [r3]
	_aSense = imu_getAccelSens();
 8001076:	f7ff ffaf 	bl	8000fd8 <imu_getAccelSens>
 800107a:	4b02      	ldr	r3, [pc, #8]	; (8001084 <imu_begin+0x34>)
 800107c:	8018      	strh	r0, [r3, #0]
	return result;
 800107e:	e7ed      	b.n	800105c <imu_begin+0xc>
 8001080:	20000468 	.word	0x20000468
 8001084:	20000484 	.word	0x20000484

08001088 <imu_dmpLoad>:

	return mpu_set_dmp_state(1);
}

inv_error_t imu_dmpLoad(void)
{
 8001088:	b508      	push	{r3, lr}
	return dmp_load_motion_driver_firmware();
 800108a:	f004 ff03 	bl	8005e94 <dmp_load_motion_driver_firmware>
}
 800108e:	bd08      	pop	{r3, pc}

08001090 <imu_dmpSetFifoRate>:

	return 0;
}

inv_error_t imu_dmpSetFifoRate(unsigned short rate)
{
 8001090:	b508      	push	{r3, lr}
	if (rate > MAX_DMP_SAMPLE_RATE) rate = MAX_DMP_SAMPLE_RATE;
 8001092:	28c8      	cmp	r0, #200	; 0xc8
 8001094:	d900      	bls.n	8001098 <imu_dmpSetFifoRate+0x8>
 8001096:	20c8      	movs	r0, #200	; 0xc8
	return dmp_set_fifo_rate(rate);
 8001098:	f004 ff08 	bl	8005eac <dmp_set_fifo_rate>
}
 800109c:	bd08      	pop	{r3, pc}
	...

080010a0 <imu_dmpUpdateFifo>:

inv_error_t imu_dmpUpdateFifo(void)
{
 80010a0:	b500      	push	{lr}
 80010a2:	b08d      	sub	sp, #52	; 0x34
	long quat[4];
	unsigned long timestamp;
	short sensors;
	unsigned char more;

	if (dmp_read_fifo(gyro, accel, quat, &timestamp, &sensors, &more)
 80010a4:	f10d 0309 	add.w	r3, sp, #9
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	f10d 030a 	add.w	r3, sp, #10
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	ab03      	add	r3, sp, #12
 80010b2:	aa04      	add	r2, sp, #16
 80010b4:	a908      	add	r1, sp, #32
 80010b6:	a80a      	add	r0, sp, #40	; 0x28
 80010b8:	f005 fa3c 	bl	8006534 <dmp_read_fifo>
 80010bc:	2800      	cmp	r0, #0
 80010be:	d13b      	bne.n	8001138 <imu_dmpUpdateFifo+0x98>
		   != INV_SUCCESS)
    {
	   return INV_ERROR;
    }

	if (sensors & INV_XYZ_ACCEL)
 80010c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80010c4:	f013 0f08 	tst.w	r3, #8
 80010c8:	d00b      	beq.n	80010e2 <imu_dmpUpdateFifo+0x42>
	{
		ax = accel[X_AXIS];
 80010ca:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80010ce:	4a1b      	ldr	r2, [pc, #108]	; (800113c <imu_dmpUpdateFifo+0x9c>)
 80010d0:	6011      	str	r1, [r2, #0]
		ay = accel[Y_AXIS];
 80010d2:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 80010d6:	4a1a      	ldr	r2, [pc, #104]	; (8001140 <imu_dmpUpdateFifo+0xa0>)
 80010d8:	6011      	str	r1, [r2, #0]
		az = accel[Z_AXIS];
 80010da:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
 80010de:	4a19      	ldr	r2, [pc, #100]	; (8001144 <imu_dmpUpdateFifo+0xa4>)
 80010e0:	6011      	str	r1, [r2, #0]
	}
	if (sensors & INV_X_GYRO)
 80010e2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80010e6:	d003      	beq.n	80010f0 <imu_dmpUpdateFifo+0x50>
		gx = gyro[X_AXIS];
 80010e8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 80010ec:	4a16      	ldr	r2, [pc, #88]	; (8001148 <imu_dmpUpdateFifo+0xa8>)
 80010ee:	6011      	str	r1, [r2, #0]
	if (sensors & INV_Y_GYRO)
 80010f0:	f013 0f20 	tst.w	r3, #32
 80010f4:	d003      	beq.n	80010fe <imu_dmpUpdateFifo+0x5e>
		gy = gyro[Y_AXIS];
 80010f6:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80010fa:	4a14      	ldr	r2, [pc, #80]	; (800114c <imu_dmpUpdateFifo+0xac>)
 80010fc:	6011      	str	r1, [r2, #0]
	if (sensors & INV_Z_GYRO)
 80010fe:	f013 0f10 	tst.w	r3, #16
 8001102:	d003      	beq.n	800110c <imu_dmpUpdateFifo+0x6c>
		gz = gyro[Z_AXIS];
 8001104:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 8001108:	4a11      	ldr	r2, [pc, #68]	; (8001150 <imu_dmpUpdateFifo+0xb0>)
 800110a:	6011      	str	r1, [r2, #0]
	if (sensors & INV_WXYZ_QUAT)
 800110c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001110:	d00b      	beq.n	800112a <imu_dmpUpdateFifo+0x8a>
	{
		qw = quat[0];
 8001112:	9a04      	ldr	r2, [sp, #16]
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <imu_dmpUpdateFifo+0xb4>)
 8001116:	601a      	str	r2, [r3, #0]
		qx = quat[1];
 8001118:	9a05      	ldr	r2, [sp, #20]
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <imu_dmpUpdateFifo+0xb8>)
 800111c:	601a      	str	r2, [r3, #0]
		qy = quat[2];
 800111e:	9a06      	ldr	r2, [sp, #24]
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <imu_dmpUpdateFifo+0xbc>)
 8001122:	601a      	str	r2, [r3, #0]
		qz = quat[3];
 8001124:	9a07      	ldr	r2, [sp, #28]
 8001126:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <imu_dmpUpdateFifo+0xc0>)
 8001128:	601a      	str	r2, [r3, #0]
	}

	time = timestamp;
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <imu_dmpUpdateFifo+0xc4>)
 800112c:	9a03      	ldr	r2, [sp, #12]
 800112e:	601a      	str	r2, [r3, #0]

	return INV_SUCCESS;
 8001130:	2000      	movs	r0, #0
}
 8001132:	b00d      	add	sp, #52	; 0x34
 8001134:	f85d fb04 	ldr.w	pc, [sp], #4
	   return INV_ERROR;
 8001138:	2020      	movs	r0, #32
 800113a:	e7fa      	b.n	8001132 <imu_dmpUpdateFifo+0x92>
 800113c:	2000042c 	.word	0x2000042c
 8001140:	20000460 	.word	0x20000460
 8001144:	20000418 	.word	0x20000418
 8001148:	2000045c 	.word	0x2000045c
 800114c:	20000414 	.word	0x20000414
 8001150:	20000438 	.word	0x20000438
 8001154:	2000046c 	.word	0x2000046c
 8001158:	20000478 	.word	0x20000478
 800115c:	20000480 	.word	0x20000480
 8001160:	20000474 	.word	0x20000474
 8001164:	2000047c 	.word	0x2000047c

08001168 <imu_dmpEnableFeatures>:

inv_error_t imu_dmpEnableFeatures(unsigned short mask)
{
 8001168:	b508      	push	{r3, lr}
	unsigned short enMask = 0;
	enMask |= mask;
	// Combat known issue where fifo sample rate is incorrect
	// unless tap is enabled in the DMP.
	enMask |= DMP_FEATURE_TAP;
	return dmp_enable_feature(enMask);
 800116a:	f040 0001 	orr.w	r0, r0, #1
 800116e:	f005 f8d5 	bl	800631c <dmp_enable_feature>
}
 8001172:	bd08      	pop	{r3, pc}

08001174 <imu_qToFloat>:
{
	return qToFloat(axis, 30);
}

float imu_qToFloat(long number, unsigned char q)
{
 8001174:	b410      	push	{r4}
	unsigned long mask = 0;
	for (int i=0; i<q; i++)
 8001176:	2300      	movs	r3, #0
	unsigned long mask = 0;
 8001178:	461c      	mov	r4, r3
	for (int i=0; i<q; i++)
 800117a:	e003      	b.n	8001184 <imu_qToFloat+0x10>
	{
		mask |= (1<<i);
 800117c:	2201      	movs	r2, #1
 800117e:	409a      	lsls	r2, r3
 8001180:	4314      	orrs	r4, r2
	for (int i=0; i<q; i++)
 8001182:	3301      	adds	r3, #1
 8001184:	4299      	cmp	r1, r3
 8001186:	dcf9      	bgt.n	800117c <imu_qToFloat+0x8>
	}
	return (number >> q) + ((number & mask) / (float) (2<<(q-1)));
 8001188:	fa40 f301 	asr.w	r3, r0, r1
 800118c:	ee00 3a10 	vmov	s0, r3
 8001190:	4020      	ands	r0, r4
 8001192:	1e4a      	subs	r2, r1, #1
 8001194:	2302      	movs	r3, #2
 8001196:	fa03 f202 	lsl.w	r2, r3, r2
 800119a:	ee07 2a90 	vmov	s15, r2
 800119e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a2:	ee07 0a90 	vmov	s15, r0
 80011a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011ae:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
 80011b2:	ee30 0a26 	vadd.f32	s0, s0, s13
 80011b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	0000      	movs	r0, r0
	...

080011c0 <imu_computeEulerAngles>:

void imu_computeEulerAngles(bool degrees)
{
 80011c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011c2:	ed2d 8b06 	vpush	{d8-d10}
 80011c6:	4605      	mov	r5, r0
    float dqw = imu_qToFloat(qw, 30);
 80011c8:	211e      	movs	r1, #30
 80011ca:	4b79      	ldr	r3, [pc, #484]	; (80013b0 <imu_computeEulerAngles+0x1f0>)
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	f7ff ffd1 	bl	8001174 <imu_qToFloat>
 80011d2:	eeb0 aa40 	vmov.f32	s20, s0
    float dqx = imu_qToFloat(qx, 30);
 80011d6:	211e      	movs	r1, #30
 80011d8:	4b76      	ldr	r3, [pc, #472]	; (80013b4 <imu_computeEulerAngles+0x1f4>)
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	f7ff ffca 	bl	8001174 <imu_qToFloat>
 80011e0:	eeb0 8a40 	vmov.f32	s16, s0
    float dqy = imu_qToFloat(qy, 30);
 80011e4:	211e      	movs	r1, #30
 80011e6:	4b74      	ldr	r3, [pc, #464]	; (80013b8 <imu_computeEulerAngles+0x1f8>)
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f7ff ffc3 	bl	8001174 <imu_qToFloat>
 80011ee:	eef0 8a40 	vmov.f32	s17, s0
    float dqz = imu_qToFloat(qz, 30);
 80011f2:	211e      	movs	r1, #30
 80011f4:	4b71      	ldr	r3, [pc, #452]	; (80013bc <imu_computeEulerAngles+0x1fc>)
 80011f6:	6818      	ldr	r0, [r3, #0]
 80011f8:	f7ff ffbc 	bl	8001174 <imu_qToFloat>

    float ysqr = dqy * dqy;
 80011fc:	ee28 6aa8 	vmul.f32	s12, s17, s17
    float t0 = -2.0f * (ysqr + dqz * dqz) + 1.0f;
 8001200:	ee20 9a00 	vmul.f32	s18, s0, s0
 8001204:	ee39 9a06 	vadd.f32	s18, s18, s12
 8001208:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 800120c:	ee29 9a26 	vmul.f32	s18, s18, s13
 8001210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001214:	ee39 9a07 	vadd.f32	s18, s18, s14
    float t1 = +2.0f * (dqx * dqy - dqw * dqz);
 8001218:	ee68 9a28 	vmul.f32	s19, s16, s17
 800121c:	ee6a 7a00 	vmul.f32	s15, s20, s0
 8001220:	ee79 9ae7 	vsub.f32	s19, s19, s15
 8001224:	ee79 9aa9 	vadd.f32	s19, s19, s19
    float t2 = -2.0f * (dqx * dqz + dqw * dqy);
 8001228:	ee68 7a00 	vmul.f32	s15, s16, s0
 800122c:	ee6a 5a28 	vmul.f32	s11, s20, s17
 8001230:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001234:	ee67 7aa6 	vmul.f32	s15, s15, s13
    float t3 = +2.0f * (dqy * dqz - dqw * dqx);
 8001238:	ee68 8a80 	vmul.f32	s17, s17, s0
 800123c:	ee2a aa08 	vmul.f32	s20, s20, s16
 8001240:	ee78 8aca 	vsub.f32	s17, s17, s20
 8001244:	ee78 8aa8 	vadd.f32	s17, s17, s17
    float t4 = -2.0f * (dqx * dqx + ysqr) + 1.0f;
 8001248:	ee28 8a08 	vmul.f32	s16, s16, s16
 800124c:	ee38 8a06 	vadd.f32	s16, s16, s12
 8001250:	ee28 8a26 	vmul.f32	s16, s16, s13
 8001254:	ee38 8a07 	vadd.f32	s16, s16, s14

	// Keep t2 within range of asin (-1, 1)
    t2 = t2 > 1.0f ? 1.0f : t2;
 8001258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001260:	dd01      	ble.n	8001266 <imu_computeEulerAngles+0xa6>
 8001262:	eef0 7a47 	vmov.f32	s15, s14
    t2 = t2 < -1.0f ? -1.0f : t2;
 8001266:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800126a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001272:	d47d      	bmi.n	8001370 <imu_computeEulerAngles+0x1b0>

    pitch = asin(t2) * 2;
 8001274:	ee17 0a90 	vmov	r0, s15
 8001278:	f7ff f916 	bl	80004a8 <__aeabi_f2d>
 800127c:	ec41 0b10 	vmov	d0, r0, r1
 8001280:	f008 fa0e 	bl	80096a0 <asin>
 8001284:	ec51 0b10 	vmov	r0, r1, d0
 8001288:	ee10 2a10 	vmov	r2, s0
 800128c:	460b      	mov	r3, r1
 800128e:	f7fe ffad 	bl	80001ec <__adddf3>
 8001292:	f7ff fc23 	bl	8000adc <__aeabi_d2f>
 8001296:	4b4a      	ldr	r3, [pc, #296]	; (80013c0 <imu_computeEulerAngles+0x200>)
 8001298:	6018      	str	r0, [r3, #0]
    roll = atan2(t3, t4);
 800129a:	ee18 0a10 	vmov	r0, s16
 800129e:	f7ff f903 	bl	80004a8 <__aeabi_f2d>
 80012a2:	4606      	mov	r6, r0
 80012a4:	460f      	mov	r7, r1
 80012a6:	ee18 0a90 	vmov	r0, s17
 80012aa:	f7ff f8fd 	bl	80004a8 <__aeabi_f2d>
 80012ae:	ec47 6b11 	vmov	d1, r6, r7
 80012b2:	ec41 0b10 	vmov	d0, r0, r1
 80012b6:	f008 fa4b 	bl	8009750 <atan2>
 80012ba:	ec51 0b10 	vmov	r0, r1, d0
 80012be:	f7ff fc0d 	bl	8000adc <__aeabi_d2f>
 80012c2:	4b40      	ldr	r3, [pc, #256]	; (80013c4 <imu_computeEulerAngles+0x204>)
 80012c4:	6018      	str	r0, [r3, #0]
    yaw = atan2(t1, t0);
 80012c6:	ee19 0a10 	vmov	r0, s18
 80012ca:	f7ff f8ed 	bl	80004a8 <__aeabi_f2d>
 80012ce:	4606      	mov	r6, r0
 80012d0:	460f      	mov	r7, r1
 80012d2:	ee19 0a90 	vmov	r0, s19
 80012d6:	f7ff f8e7 	bl	80004a8 <__aeabi_f2d>
 80012da:	ec47 6b11 	vmov	d1, r6, r7
 80012de:	ec41 0b10 	vmov	d0, r0, r1
 80012e2:	f008 fa35 	bl	8009750 <atan2>
 80012e6:	ec51 0b10 	vmov	r0, r1, d0
 80012ea:	f7ff fbf7 	bl	8000adc <__aeabi_d2f>
 80012ee:	4604      	mov	r4, r0
 80012f0:	4b35      	ldr	r3, [pc, #212]	; (80013c8 <imu_computeEulerAngles+0x208>)
 80012f2:	6018      	str	r0, [r3, #0]

	if (degrees)
 80012f4:	2d00      	cmp	r5, #0
 80012f6:	d038      	beq.n	800136a <imu_computeEulerAngles+0x1aa>
	{
		pitch *= (180.0 / PI);
 80012f8:	4d31      	ldr	r5, [pc, #196]	; (80013c0 <imu_computeEulerAngles+0x200>)
 80012fa:	6828      	ldr	r0, [r5, #0]
 80012fc:	f7ff f8d4 	bl	80004a8 <__aeabi_f2d>
 8001300:	a329      	add	r3, pc, #164	; (adr r3, 80013a8 <imu_computeEulerAngles+0x1e8>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	f7ff f927 	bl	8000558 <__aeabi_dmul>
 800130a:	f7ff fbe7 	bl	8000adc <__aeabi_d2f>
 800130e:	ee08 0a90 	vmov	s17, r0
 8001312:	6028      	str	r0, [r5, #0]
		roll *= (180.0 / PI);
 8001314:	4d2b      	ldr	r5, [pc, #172]	; (80013c4 <imu_computeEulerAngles+0x204>)
 8001316:	6828      	ldr	r0, [r5, #0]
 8001318:	f7ff f8c6 	bl	80004a8 <__aeabi_f2d>
 800131c:	a322      	add	r3, pc, #136	; (adr r3, 80013a8 <imu_computeEulerAngles+0x1e8>)
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	f7ff f919 	bl	8000558 <__aeabi_dmul>
 8001326:	f7ff fbd9 	bl	8000adc <__aeabi_d2f>
 800132a:	ee08 0a10 	vmov	s16, r0
 800132e:	6028      	str	r0, [r5, #0]
		yaw *= (180.0 / PI);
 8001330:	4620      	mov	r0, r4
 8001332:	f7ff f8b9 	bl	80004a8 <__aeabi_f2d>
 8001336:	a31c      	add	r3, pc, #112	; (adr r3, 80013a8 <imu_computeEulerAngles+0x1e8>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7ff f90c 	bl	8000558 <__aeabi_dmul>
 8001340:	f7ff fbcc 	bl	8000adc <__aeabi_d2f>
 8001344:	ee07 0a90 	vmov	s15, r0
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <imu_computeEulerAngles+0x208>)
 800134a:	6018      	str	r0, [r3, #0]
		if (pitch < 0) pitch = 360.0 + pitch;
 800134c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8001350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001354:	d40f      	bmi.n	8001376 <imu_computeEulerAngles+0x1b6>
		if (roll < 0) roll = 360.0 + roll;
 8001356:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800135a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135e:	d412      	bmi.n	8001386 <imu_computeEulerAngles+0x1c6>
		if (yaw < 0) yaw = 360.0 + yaw;
 8001360:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001368:	d415      	bmi.n	8001396 <imu_computeEulerAngles+0x1d6>
	}
}
 800136a:	ecbd 8b06 	vpop	{d8-d10}
 800136e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    t2 = t2 < -1.0f ? -1.0f : t2;
 8001370:	eef0 7a47 	vmov.f32	s15, s14
 8001374:	e77e      	b.n	8001274 <imu_computeEulerAngles+0xb4>
		if (pitch < 0) pitch = 360.0 + pitch;
 8001376:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80013cc <imu_computeEulerAngles+0x20c>
 800137a:	ee78 8a87 	vadd.f32	s17, s17, s14
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <imu_computeEulerAngles+0x200>)
 8001380:	edc3 8a00 	vstr	s17, [r3]
 8001384:	e7e7      	b.n	8001356 <imu_computeEulerAngles+0x196>
		if (roll < 0) roll = 360.0 + roll;
 8001386:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80013cc <imu_computeEulerAngles+0x20c>
 800138a:	ee38 8a07 	vadd.f32	s16, s16, s14
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <imu_computeEulerAngles+0x204>)
 8001390:	ed83 8a00 	vstr	s16, [r3]
 8001394:	e7e4      	b.n	8001360 <imu_computeEulerAngles+0x1a0>
		if (yaw < 0) yaw = 360.0 + yaw;
 8001396:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80013cc <imu_computeEulerAngles+0x20c>
 800139a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <imu_computeEulerAngles+0x208>)
 80013a0:	edc3 7a00 	vstr	s15, [r3]
}
 80013a4:	e7e1      	b.n	800136a <imu_computeEulerAngles+0x1aa>
 80013a6:	bf00      	nop
 80013a8:	0d03cf26 	.word	0x0d03cf26
 80013ac:	404ca5dc 	.word	0x404ca5dc
 80013b0:	2000046c 	.word	0x2000046c
 80013b4:	20000478 	.word	0x20000478
 80013b8:	20000480 	.word	0x20000480
 80013bc:	20000474 	.word	0x20000474
 80013c0:	20000450 	.word	0x20000450
 80013c4:	20000454 	.word	0x20000454
 80013c8:	20000444 	.word	0x20000444
 80013cc:	43b40000 	.word	0x43b40000

080013d0 <constrain>:


float constrain(float x, float a, float b){


	if(x >= a && x <= b){
 80013d0:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80013d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d8:	db04      	blt.n	80013e4 <constrain+0x14>
 80013da:	eeb4 0ac1 	vcmpe.f32	s0, s2
 80013de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e2:	d90f      	bls.n	8001404 <constrain+0x34>
		return x;
	}

	if(x < a){
 80013e4:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80013e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ec:	d405      	bmi.n	80013fa <constrain+0x2a>
		return a;
	}

	if(x > b){
 80013ee:	eeb4 0ac1 	vcmpe.f32	s0, s2
 80013f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f6:	dc03      	bgt.n	8001400 <constrain+0x30>
		return b;
	}

}
 80013f8:	4770      	bx	lr
		return a;
 80013fa:	eeb0 0a60 	vmov.f32	s0, s1
 80013fe:	4770      	bx	lr
		return b;
 8001400:	eeb0 0a41 	vmov.f32	s0, s2
}
 8001404:	4770      	bx	lr
	...

08001408 <imu_dmpBegin>:
{
 8001408:	b510      	push	{r4, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	4604      	mov	r4, r0
 800140e:	9101      	str	r1, [sp, #4]
	if (imu_dmpLoad() != INV_SUCCESS)
 8001410:	f7ff fe3a 	bl	8001088 <imu_dmpLoad>
 8001414:	bb88      	cbnz	r0, 800147a <imu_dmpBegin+0x72>
	if (feat & DMP_FEATURE_LP_QUAT)
 8001416:	f014 0f04 	tst.w	r4, #4
 800141a:	d11f      	bne.n	800145c <imu_dmpBegin+0x54>
	else if (feat & DMP_FEATURE_6X_LP_QUAT)
 800141c:	f014 0f10 	tst.w	r4, #16
 8001420:	d123      	bne.n	800146a <imu_dmpBegin+0x62>
	if (feat & DMP_FEATURE_GYRO_CAL)
 8001422:	f014 0f20 	tst.w	r4, #32
 8001426:	d124      	bne.n	8001472 <imu_dmpBegin+0x6a>
	if (imu_dmpEnableFeatures(feat) != INV_SUCCESS)
 8001428:	4620      	mov	r0, r4
 800142a:	f7ff fe9d 	bl	8001168 <imu_dmpEnableFeatures>
 800142e:	bb30      	cbnz	r0, 800147e <imu_dmpBegin+0x76>
	rate = constrain(rate, 1, 200);
 8001430:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8001488 <imu_dmpBegin+0x80>
 8001434:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001438:	eddd 7a01 	vldr	s15, [sp, #4]
 800143c:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8001440:	f7ff ffc6 	bl	80013d0 <constrain>
 8001444:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	if (imu_dmpSetFifoRate(rate) != INV_SUCCESS)
 8001448:	ee10 3a10 	vmov	r3, s0
 800144c:	b298      	uxth	r0, r3
 800144e:	f7ff fe1f 	bl	8001090 <imu_dmpSetFifoRate>
 8001452:	b9b8      	cbnz	r0, 8001484 <imu_dmpBegin+0x7c>
	return mpu_set_dmp_state(1);
 8001454:	2001      	movs	r0, #1
 8001456:	f004 fcb7 	bl	8005dc8 <mpu_set_dmp_state>
 800145a:	e011      	b.n	8001480 <imu_dmpBegin+0x78>
		feat &= ~(DMP_FEATURE_6X_LP_QUAT);
 800145c:	f024 0410 	bic.w	r4, r4, #16
 8001460:	b2a4      	uxth	r4, r4
		dmp_enable_lp_quat(1);
 8001462:	2001      	movs	r0, #1
 8001464:	f004 ff1e 	bl	80062a4 <dmp_enable_lp_quat>
 8001468:	e7db      	b.n	8001422 <imu_dmpBegin+0x1a>
		dmp_enable_6x_lp_quat(1);
 800146a:	2001      	movs	r0, #1
 800146c:	f004 ff38 	bl	80062e0 <dmp_enable_6x_lp_quat>
 8001470:	e7d7      	b.n	8001422 <imu_dmpBegin+0x1a>
		dmp_enable_gyro_cal(1);
 8001472:	2001      	movs	r0, #1
 8001474:	f004 fef4 	bl	8006260 <dmp_enable_gyro_cal>
 8001478:	e7d6      	b.n	8001428 <imu_dmpBegin+0x20>
		return INV_ERROR;
 800147a:	2020      	movs	r0, #32
 800147c:	e000      	b.n	8001480 <imu_dmpBegin+0x78>
		return INV_ERROR;
 800147e:	2020      	movs	r0, #32
}
 8001480:	b002      	add	sp, #8
 8001482:	bd10      	pop	{r4, pc}
		return INV_ERROR;
 8001484:	2020      	movs	r0, #32
 8001486:	e7fb      	b.n	8001480 <imu_dmpBegin+0x78>
 8001488:	43480000 	.word	0x43480000

0800148c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 800148c:	b508      	push	{r3, lr}
//	uint32_t uSecVar = uSec;
//	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
//	while(uSecVar--);
	DWT_Delay(uSec);
 800148e:	f000 ff59 	bl	8002344 <DWT_Delay>
}
 8001492:	bd08      	pop	{r3, pc}

08001494 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8001494:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8001496:	b938      	cbnz	r0, 80014a8 <NRF24_csn+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <NRF24_csn+0x24>)
 800149c:	8819      	ldrh	r1, [r3, #0]
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <NRF24_csn+0x28>)
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	f001 fa9f 	bl	80029e4 <HAL_GPIO_WritePin>
}
 80014a6:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <NRF24_csn+0x24>)
 80014ac:	8819      	ldrh	r1, [r3, #0]
 80014ae:	4b03      	ldr	r3, [pc, #12]	; (80014bc <NRF24_csn+0x28>)
 80014b0:	6818      	ldr	r0, [r3, #0]
 80014b2:	f001 fa97 	bl	80029e4 <HAL_GPIO_WritePin>
 80014b6:	e7f6      	b.n	80014a6 <NRF24_csn+0x12>
 80014b8:	20000286 	.word	0x20000286
 80014bc:	20000288 	.word	0x20000288

080014c0 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80014c0:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80014c2:	b938      	cbnz	r0, 80014d4 <NRF24_ce+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <NRF24_ce+0x24>)
 80014c8:	8819      	ldrh	r1, [r3, #0]
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <NRF24_ce+0x28>)
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	f001 fa89 	bl	80029e4 <HAL_GPIO_WritePin>
}
 80014d2:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <NRF24_ce+0x24>)
 80014d8:	8819      	ldrh	r1, [r3, #0]
 80014da:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <NRF24_ce+0x28>)
 80014dc:	6818      	ldr	r0, [r3, #0]
 80014de:	f001 fa81 	bl	80029e4 <HAL_GPIO_WritePin>
 80014e2:	e7f6      	b.n	80014d2 <NRF24_ce+0x12>
 80014e4:	20000284 	.word	0x20000284
 80014e8:	20000288 	.word	0x20000288

080014ec <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80014ec:	b510      	push	{r4, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80014f2:	2000      	movs	r0, #0
 80014f4:	f7ff ffce 	bl	8001494 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80014f8:	f004 041f 	and.w	r4, r4, #31
 80014fc:	a902      	add	r1, sp, #8
 80014fe:	f801 4d04 	strb.w	r4, [r1, #-4]!
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001502:	4c0a      	ldr	r4, [pc, #40]	; (800152c <NRF24_read_register+0x40>)
 8001504:	2364      	movs	r3, #100	; 0x64
 8001506:	2201      	movs	r2, #1
 8001508:	4620      	mov	r0, r4
 800150a:	f002 fc53 	bl	8003db4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800150e:	2364      	movs	r3, #100	; 0x64
 8001510:	2201      	movs	r2, #1
 8001512:	f10d 0105 	add.w	r1, sp, #5
 8001516:	4620      	mov	r0, r4
 8001518:	f002 fe30 	bl	800417c <HAL_SPI_Receive>
	retData = spiBuf[1];
 800151c:	f89d 4005 	ldrb.w	r4, [sp, #5]
	//Bring CSN high
	NRF24_csn(1);
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff ffb7 	bl	8001494 <NRF24_csn>
	return retData;
}
 8001526:	4620      	mov	r0, r4
 8001528:	b002      	add	sp, #8
 800152a:	bd10      	pop	{r4, pc}
 800152c:	2000028c 	.word	0x2000028c

08001530 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001530:	b570      	push	{r4, r5, r6, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	4604      	mov	r4, r0
 8001536:	460d      	mov	r5, r1
 8001538:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800153a:	2000      	movs	r0, #0
 800153c:	f7ff ffaa 	bl	8001494 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001540:	f004 041f 	and.w	r4, r4, #31
 8001544:	a902      	add	r1, sp, #8
 8001546:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800154a:	4c08      	ldr	r4, [pc, #32]	; (800156c <NRF24_read_registerN+0x3c>)
 800154c:	2364      	movs	r3, #100	; 0x64
 800154e:	2201      	movs	r2, #1
 8001550:	4620      	mov	r0, r4
 8001552:	f002 fc2f 	bl	8003db4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8001556:	2364      	movs	r3, #100	; 0x64
 8001558:	4632      	mov	r2, r6
 800155a:	4629      	mov	r1, r5
 800155c:	4620      	mov	r0, r4
 800155e:	f002 fe0d 	bl	800417c <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8001562:	2001      	movs	r0, #1
 8001564:	f7ff ff96 	bl	8001494 <NRF24_csn>
}
 8001568:	b002      	add	sp, #8
 800156a:	bd70      	pop	{r4, r5, r6, pc}
 800156c:	2000028c 	.word	0x2000028c

08001570 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8001570:	b530      	push	{r4, r5, lr}
 8001572:	b083      	sub	sp, #12
 8001574:	4604      	mov	r4, r0
 8001576:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff ff8b 	bl	8001494 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800157e:	f044 0420 	orr.w	r4, r4, #32
 8001582:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 8001586:	f88d 5005 	strb.w	r5, [sp, #5]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 800158a:	2364      	movs	r3, #100	; 0x64
 800158c:	2202      	movs	r2, #2
 800158e:	a901      	add	r1, sp, #4
 8001590:	4803      	ldr	r0, [pc, #12]	; (80015a0 <NRF24_write_register+0x30>)
 8001592:	f002 fc0f 	bl	8003db4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001596:	2001      	movs	r0, #1
 8001598:	f7ff ff7c 	bl	8001494 <NRF24_csn>
}
 800159c:	b003      	add	sp, #12
 800159e:	bd30      	pop	{r4, r5, pc}
 80015a0:	2000028c 	.word	0x2000028c

080015a4 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80015a4:	b570      	push	{r4, r5, r6, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	4604      	mov	r4, r0
 80015aa:	460d      	mov	r5, r1
 80015ac:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80015ae:	2000      	movs	r0, #0
 80015b0:	f7ff ff70 	bl	8001494 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80015b4:	f044 0420 	orr.w	r4, r4, #32
 80015b8:	a902      	add	r1, sp, #8
 80015ba:	f801 4d04 	strb.w	r4, [r1, #-4]!
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80015be:	4c08      	ldr	r4, [pc, #32]	; (80015e0 <NRF24_write_registerN+0x3c>)
 80015c0:	2364      	movs	r3, #100	; 0x64
 80015c2:	2201      	movs	r2, #1
 80015c4:	4620      	mov	r0, r4
 80015c6:	f002 fbf5 	bl	8003db4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80015ca:	2364      	movs	r3, #100	; 0x64
 80015cc:	4632      	mov	r2, r6
 80015ce:	4629      	mov	r1, r5
 80015d0:	4620      	mov	r0, r4
 80015d2:	f002 fbef 	bl	8003db4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80015d6:	2001      	movs	r0, #1
 80015d8:	f7ff ff5c 	bl	8001494 <NRF24_csn>
}
 80015dc:	b002      	add	sp, #8
 80015de:	bd70      	pop	{r4, r5, r6, pc}
 80015e0:	2000028c 	.word	0x2000028c

080015e4 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80015e4:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80015e6:	21ff      	movs	r1, #255	; 0xff
 80015e8:	20e1      	movs	r0, #225	; 0xe1
 80015ea:	f7ff ffc1 	bl	8001570 <NRF24_write_register>
}
 80015ee:	bd08      	pop	{r3, pc}

080015f0 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80015f0:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80015f2:	21ff      	movs	r1, #255	; 0xff
 80015f4:	20e2      	movs	r0, #226	; 0xe2
 80015f6:	f7ff ffbb 	bl	8001570 <NRF24_write_register>
}
 80015fa:	bd08      	pop	{r3, pc}

080015fc <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80015fc:	b508      	push	{r3, lr}
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80015fe:	2007      	movs	r0, #7
 8001600:	f7ff ff74 	bl	80014ec <NRF24_read_register>
	return statReg;
}
 8001604:	bd08      	pop	{r3, pc}
	...

08001608 <NRF24_startListening>:
	NRF24_powerDown();
	
}
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8001608:	b508      	push	{r3, lr}
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 800160a:	2000      	movs	r0, #0
 800160c:	f7ff ff6e 	bl	80014ec <NRF24_read_register>
 8001610:	f040 0103 	orr.w	r1, r0, #3
 8001614:	b2c9      	uxtb	r1, r1
 8001616:	2000      	movs	r0, #0
 8001618:	f7ff ffaa 	bl	8001570 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <NRF24_startListening+0x40>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	4313      	orrs	r3, r2
 8001624:	d10a      	bne.n	800163c <NRF24_startListening+0x34>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
	
	//Flush buffers
	NRF24_flush_tx();
 8001626:	f7ff ffdd 	bl	80015e4 <NRF24_flush_tx>
	NRF24_flush_rx();
 800162a:	f7ff ffe1 	bl	80015f0 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 800162e:	2001      	movs	r0, #1
 8001630:	f7ff ff46 	bl	80014c0 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8001634:	2096      	movs	r0, #150	; 0x96
 8001636:	f7ff ff29 	bl	800148c <NRF24_DelayMicroSeconds>
}
 800163a:	bd08      	pop	{r3, pc}
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 800163c:	2205      	movs	r2, #5
 800163e:	4902      	ldr	r1, [pc, #8]	; (8001648 <NRF24_startListening+0x40>)
 8001640:	200a      	movs	r0, #10
 8001642:	f7ff ffaf 	bl	80015a4 <NRF24_write_registerN>
 8001646:	e7ee      	b.n	8001626 <NRF24_startListening+0x1e>
 8001648:	20000328 	.word	0x20000328

0800164c <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 800164c:	b510      	push	{r4, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	e9cd 2300 	strd	r2, r3, [sp]
	if (number == 0)
 8001654:	4604      	mov	r4, r0
 8001656:	b920      	cbnz	r0, 8001662 <NRF24_openReadingPipe+0x16>
    pipe0_reading_address = address;
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <NRF24_openReadingPipe+0x60>)
 800165a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800165e:	e9c3 0100 	strd	r0, r1, [r3]
	
	if(number <= 6)
 8001662:	2c06      	cmp	r4, #6
 8001664:	d818      	bhi.n	8001698 <NRF24_openReadingPipe+0x4c>
	{
		if(number < 2)
 8001666:	2c01      	cmp	r4, #1
 8001668:	d918      	bls.n	800169c <NRF24_openReadingPipe+0x50>
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 800166a:	2201      	movs	r2, #1
 800166c:	4669      	mov	r1, sp
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <NRF24_openReadingPipe+0x64>)
 8001670:	5d18      	ldrb	r0, [r3, r4]
 8001672:	f7ff ff97 	bl	80015a4 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <NRF24_openReadingPipe+0x68>)
 8001678:	7819      	ldrb	r1, [r3, #0]
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <NRF24_openReadingPipe+0x6c>)
 800167c:	5d18      	ldrb	r0, [r3, r4]
 800167e:	f7ff ff77 	bl	8001570 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8001682:	2002      	movs	r0, #2
 8001684:	f7ff ff32 	bl	80014ec <NRF24_read_register>
 8001688:	b240      	sxtb	r0, r0
 800168a:	2101      	movs	r1, #1
 800168c:	40a1      	lsls	r1, r4
 800168e:	4301      	orrs	r1, r0
 8001690:	b2c9      	uxtb	r1, r1
 8001692:	2002      	movs	r0, #2
 8001694:	f7ff ff6c 	bl	8001570 <NRF24_write_register>
	}
	
}
 8001698:	b002      	add	sp, #8
 800169a:	bd10      	pop	{r4, pc}
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 800169c:	2205      	movs	r2, #5
 800169e:	4669      	mov	r1, sp
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <NRF24_openReadingPipe+0x64>)
 80016a2:	5d18      	ldrb	r0, [r3, r4]
 80016a4:	f7ff ff7e 	bl	80015a4 <NRF24_write_registerN>
 80016a8:	e7e5      	b.n	8001676 <NRF24_openReadingPipe+0x2a>
 80016aa:	bf00      	nop
 80016ac:	20000328 	.word	0x20000328
 80016b0:	0800a264 	.word	0x0800a264
 80016b4:	20000324 	.word	0x20000324
 80016b8:	0800a26c 	.word	0x0800a26c

080016bc <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80016bc:	b508      	push	{r3, lr}
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80016be:	f001 010f 	and.w	r1, r1, #15
 80016c2:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80016c6:	b2c9      	uxtb	r1, r1
 80016c8:	2004      	movs	r0, #4
 80016ca:	f7ff ff51 	bl	8001570 <NRF24_write_register>
}
 80016ce:	bd08      	pop	{r3, pc}

080016d0 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80016d0:	b508      	push	{r3, lr}
	const uint8_t max_channel = 127;
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80016d2:	4601      	mov	r1, r0
 80016d4:	287f      	cmp	r0, #127	; 0x7f
 80016d6:	bf28      	it	cs
 80016d8:	217f      	movcs	r1, #127	; 0x7f
 80016da:	2005      	movs	r0, #5
 80016dc:	f7ff ff48 	bl	8001570 <NRF24_write_register>
}
 80016e0:	bd08      	pop	{r3, pc}
	...

080016e4 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
	const uint8_t max_payload_size = 32;
  payload_size = MIN(size,max_payload_size);
 80016e4:	2820      	cmp	r0, #32
 80016e6:	bf28      	it	cs
 80016e8:	2020      	movcs	r0, #32
 80016ea:	4b01      	ldr	r3, [pc, #4]	; (80016f0 <NRF24_setPayloadSize+0xc>)
 80016ec:	7018      	strb	r0, [r3, #0]
}
 80016ee:	4770      	bx	lr
 80016f0:	20000324 	.word	0x20000324

080016f4 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
	return payload_size;
}
 80016f4:	4b01      	ldr	r3, [pc, #4]	; (80016fc <NRF24_getPayloadSize+0x8>)
 80016f6:	7818      	ldrb	r0, [r3, #0]
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000324 	.word	0x20000324

08001700 <NRF24_read_payload>:
{
 8001700:	b570      	push	{r4, r5, r6, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	4606      	mov	r6, r0
 8001706:	460d      	mov	r5, r1
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8001708:	f7ff fff4 	bl	80016f4 <NRF24_getPayloadSize>
 800170c:	4604      	mov	r4, r0
 800170e:	42a8      	cmp	r0, r5
 8001710:	d817      	bhi.n	8001742 <NRF24_read_payload+0x42>
	NRF24_csn(0);
 8001712:	2000      	movs	r0, #0
 8001714:	f7ff febe 	bl	8001494 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001718:	a902      	add	r1, sp, #8
 800171a:	2361      	movs	r3, #97	; 0x61
 800171c:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8001720:	4d09      	ldr	r5, [pc, #36]	; (8001748 <NRF24_read_payload+0x48>)
 8001722:	2364      	movs	r3, #100	; 0x64
 8001724:	2201      	movs	r2, #1
 8001726:	4628      	mov	r0, r5
 8001728:	f002 fb44 	bl	8003db4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 800172c:	2364      	movs	r3, #100	; 0x64
 800172e:	b2a2      	uxth	r2, r4
 8001730:	4631      	mov	r1, r6
 8001732:	4628      	mov	r0, r5
 8001734:	f002 fd22 	bl	800417c <HAL_SPI_Receive>
	NRF24_csn(1);
 8001738:	2001      	movs	r0, #1
 800173a:	f7ff feab 	bl	8001494 <NRF24_csn>
}
 800173e:	b002      	add	sp, #8
 8001740:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8001742:	462c      	mov	r4, r5
 8001744:	e7e5      	b.n	8001712 <NRF24_read_payload+0x12>
 8001746:	bf00      	nop
 8001748:	2000028c 	.word	0x2000028c

0800174c <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 800174c:	b508      	push	{r3, lr}
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800174e:	2060      	movs	r0, #96	; 0x60
 8001750:	f7ff fecc 	bl	80014ec <NRF24_read_register>
}
 8001754:	bd08      	pop	{r3, pc}

08001756 <NRF24_read>:
{
 8001756:	b510      	push	{r4, lr}
	NRF24_read_payload( buf, len );
 8001758:	f7ff ffd2 	bl	8001700 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800175c:	2017      	movs	r0, #23
 800175e:	f7ff fec5 	bl	80014ec <NRF24_read_register>
 8001762:	f000 0401 	and.w	r4, r0, #1
	NRF24_flush_rx();
 8001766:	f7ff ff43 	bl	80015f0 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 800176a:	f7ff ffef 	bl	800174c <NRF24_getDynamicPayloadSize>
}
 800176e:	4620      	mov	r0, r4
 8001770:	bd10      	pop	{r4, pc}

08001772 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001772:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001774:	201d      	movs	r0, #29
 8001776:	f7ff feb9 	bl	80014ec <NRF24_read_register>
 800177a:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800177e:	201d      	movs	r0, #29
 8001780:	f7ff fef6 	bl	8001570 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8001784:	2100      	movs	r1, #0
 8001786:	201c      	movs	r0, #28
 8001788:	f7ff fef2 	bl	8001570 <NRF24_write_register>
	dynamic_payloads_enabled = false;
}
 800178c:	bd08      	pop	{r3, pc}

0800178e <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 800178e:	b508      	push	{r3, lr}
	if ( enable )
 8001790:	b920      	cbnz	r0, 800179c <NRF24_setAutoAck+0xe>
    NRF24_write_register(REG_EN_AA, 0x3F);
  else
    NRF24_write_register(REG_EN_AA, 0x00);
 8001792:	2100      	movs	r1, #0
 8001794:	2001      	movs	r0, #1
 8001796:	f7ff feeb 	bl	8001570 <NRF24_write_register>
}
 800179a:	bd08      	pop	{r3, pc}
    NRF24_write_register(REG_EN_AA, 0x3F);
 800179c:	213f      	movs	r1, #63	; 0x3f
 800179e:	2001      	movs	r0, #1
 80017a0:	f7ff fee6 	bl	8001570 <NRF24_write_register>
 80017a4:	e7f9      	b.n	800179a <NRF24_setAutoAck+0xc>

080017a6 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80017a6:	b510      	push	{r4, lr}
 80017a8:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80017aa:	2006      	movs	r0, #6
 80017ac:	f7ff fe9e 	bl	80014ec <NRF24_read_register>
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80017b0:	f000 01f9 	and.w	r1, r0, #249	; 0xf9

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80017b4:	2c03      	cmp	r4, #3
 80017b6:	d009      	beq.n	80017cc <NRF24_setPALevel+0x26>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
  }
  else if ( level == RF24_PA_m6dB )
 80017b8:	2c02      	cmp	r4, #2
 80017ba:	d00d      	beq.n	80017d8 <NRF24_setPALevel+0x32>
  {
    setup |= _BV(RF_PWR_HIGH) ;
  }
  else if ( level == RF24_PA_m12dB )
 80017bc:	2c01      	cmp	r4, #1
 80017be:	d00e      	beq.n	80017de <NRF24_setPALevel+0x38>
  {
    setup |= _BV(RF_PWR_LOW);
  }
  else if ( level == RF24_PA_m18dB )
 80017c0:	b134      	cbz	r4, 80017d0 <NRF24_setPALevel+0x2a>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80017c2:	2c04      	cmp	r4, #4
 80017c4:	d104      	bne.n	80017d0 <NRF24_setPALevel+0x2a>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80017c6:	f041 0106 	orr.w	r1, r1, #6
 80017ca:	e001      	b.n	80017d0 <NRF24_setPALevel+0x2a>
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80017cc:	f041 0106 	orr.w	r1, r1, #6
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80017d0:	2006      	movs	r0, #6
 80017d2:	f7ff fecd 	bl	8001570 <NRF24_write_register>
}
 80017d6:	bd10      	pop	{r4, pc}
    setup |= _BV(RF_PWR_HIGH) ;
 80017d8:	f041 0104 	orr.w	r1, r1, #4
 80017dc:	e7f8      	b.n	80017d0 <NRF24_setPALevel+0x2a>
    setup |= _BV(RF_PWR_LOW);
 80017de:	f041 0102 	orr.w	r1, r1, #2
 80017e2:	e7f5      	b.n	80017d0 <NRF24_setPALevel+0x2a>

080017e4 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80017e4:	b538      	push	{r3, r4, r5, lr}
 80017e6:	4605      	mov	r5, r0
	bool result = false;
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80017e8:	2006      	movs	r0, #6
 80017ea:	f7ff fe7f 	bl	80014ec <NRF24_read_register>

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80017ee:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
  if( speed == RF24_250KBPS )
 80017f2:	2d02      	cmp	r5, #2
 80017f4:	d00c      	beq.n	8001810 <NRF24_setDataRate+0x2c>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80017f6:	2d01      	cmp	r5, #1
 80017f8:	d00d      	beq.n	8001816 <NRF24_setDataRate+0x32>
    {
      // 1Mbs
      wide_band = false ;
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80017fa:	4621      	mov	r1, r4
 80017fc:	2006      	movs	r0, #6
 80017fe:	f7ff feb7 	bl	8001570 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001802:	2006      	movs	r0, #6
 8001804:	f7ff fe72 	bl	80014ec <NRF24_read_register>
 8001808:	42a0      	cmp	r0, r4
 800180a:	d007      	beq.n	800181c <NRF24_setDataRate+0x38>
	bool result = false;
 800180c:	2000      	movs	r0, #0
  {
    wide_band = false;
  }

  return result;
}
 800180e:	bd38      	pop	{r3, r4, r5, pc}
    setup |= _BV( RF_DR_LOW ) ;
 8001810:	f044 0420 	orr.w	r4, r4, #32
 8001814:	e7f1      	b.n	80017fa <NRF24_setDataRate+0x16>
      setup |= _BV(RF_DR_HIGH);
 8001816:	f044 0408 	orr.w	r4, r4, #8
 800181a:	e7ee      	b.n	80017fa <NRF24_setDataRate+0x16>
    result = true;
 800181c:	2001      	movs	r0, #1
 800181e:	e7f6      	b.n	800180e <NRF24_setDataRate+0x2a>

08001820 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001820:	b510      	push	{r4, lr}
 8001822:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001824:	2000      	movs	r0, #0
 8001826:	f7ff fe61 	bl	80014ec <NRF24_read_register>
 800182a:	f000 01f3 	and.w	r1, r0, #243	; 0xf3
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 800182e:	b11c      	cbz	r4, 8001838 <NRF24_setCRCLength+0x18>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8001830:	2c01      	cmp	r4, #1
 8001832:	d005      	beq.n	8001840 <NRF24_setCRCLength+0x20>
    config |= _BV(BIT_EN_CRC);
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
    config |= _BV( BIT_CRCO );
 8001834:	f041 010c 	orr.w	r1, r1, #12
  }
  NRF24_write_register( REG_CONFIG, config );
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff fe99 	bl	8001570 <NRF24_write_register>
}
 800183e:	bd10      	pop	{r4, pc}
    config |= _BV(BIT_EN_CRC);
 8001840:	f041 0108 	orr.w	r1, r1, #8
 8001844:	e7f8      	b.n	8001838 <NRF24_setCRCLength+0x18>

08001846 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001846:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001848:	2000      	movs	r0, #0
 800184a:	f7ff fe4f 	bl	80014ec <NRF24_read_register>
 800184e:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 8001852:	2000      	movs	r0, #0
 8001854:	f7ff fe8c 	bl	8001570 <NRF24_write_register>
}
 8001858:	bd08      	pop	{r3, pc}

0800185a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800185a:	b570      	push	{r4, r5, r6, lr}
 800185c:	4606      	mov	r6, r0
	uint8_t status = NRF24_get_status();
 800185e:	f7ff fecd 	bl	80015fc <NRF24_get_status>
 8001862:	f000 0340 	and.w	r3, r0, #64	; 0x40

  bool result = ( status & _BV(BIT_RX_DR) );
 8001866:	2b00      	cmp	r3, #0
 8001868:	bf14      	ite	ne
 800186a:	2501      	movne	r5, #1
 800186c:	2500      	moveq	r5, #0

  if (result)
 800186e:	d00b      	beq.n	8001888 <NRF24_availablePipe+0x2e>
 8001870:	4604      	mov	r4, r0
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001872:	b116      	cbz	r6, 800187a <NRF24_availablePipe+0x20>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001874:	f3c0 0342 	ubfx	r3, r0, #1, #3
 8001878:	7033      	strb	r3, [r6, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800187a:	2140      	movs	r1, #64	; 0x40
 800187c:	2007      	movs	r0, #7
 800187e:	f7ff fe77 	bl	8001570 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001882:	f014 0f20 	tst.w	r4, #32
 8001886:	d101      	bne.n	800188c <NRF24_availablePipe+0x32>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
    }
  }
  return result;
}
 8001888:	4628      	mov	r0, r5
 800188a:	bd70      	pop	{r4, r5, r6, pc}
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800188c:	2120      	movs	r1, #32
 800188e:	2007      	movs	r0, #7
 8001890:	f7ff fe6e 	bl	8001570 <NRF24_write_register>
 8001894:	e7f8      	b.n	8001888 <NRF24_availablePipe+0x2e>

08001896 <NRF24_available>:
{
 8001896:	b508      	push	{r3, lr}
	return NRF24_availablePipe(NULL);
 8001898:	2000      	movs	r0, #0
 800189a:	f7ff ffde 	bl	800185a <NRF24_availablePipe>
}
 800189e:	bd08      	pop	{r3, pc}

080018a0 <NRF24_writeAckPayload>:
  NRF24_DelayMicroSeconds(15);
  NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 80018a0:	b570      	push	{r4, r5, r6, lr}
 80018a2:	4604      	mov	r4, r0
 80018a4:	460d      	mov	r5, r1
	const uint8_t* current = (uint8_t *)buf;
	const uint8_t max_payload_size = 32;
  uint8_t data_len = MIN(len,max_payload_size);
 80018a6:	2a20      	cmp	r2, #32
 80018a8:	bf28      	it	cs
 80018aa:	2220      	movcs	r2, #32
 80018ac:	4616      	mov	r6, r2
	
  NRF24_csn(0);
 80018ae:	2000      	movs	r0, #0
 80018b0:	f7ff fdf0 	bl	8001494 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 80018b4:	f004 0007 	and.w	r0, r4, #7
 80018b8:	4632      	mov	r2, r6
 80018ba:	4629      	mov	r1, r5
 80018bc:	f040 00a8 	orr.w	r0, r0, #168	; 0xa8
 80018c0:	f7ff fe70 	bl	80015a4 <NRF24_write_registerN>
  NRF24_csn(1);
 80018c4:	2001      	movs	r0, #1
 80018c6:	f7ff fde5 	bl	8001494 <NRF24_csn>
}
 80018ca:	bd70      	pop	{r4, r5, r6, pc}

080018cc <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80018cc:	b508      	push	{r3, lr}
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80018ce:	2170      	movs	r1, #112	; 0x70
 80018d0:	2007      	movs	r0, #7
 80018d2:	f7ff fe4d 	bl	8001570 <NRF24_write_register>
}
 80018d6:	bd08      	pop	{r3, pc}

080018d8 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80018d8:	b500      	push	{lr}
 80018da:	b083      	sub	sp, #12
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80018dc:	2000      	movs	r0, #0
 80018de:	f7ff fdd9 	bl	8001494 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80018e2:	2350      	movs	r3, #80	; 0x50
 80018e4:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 80018e8:	2373      	movs	r3, #115	; 0x73
 80018ea:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80018ee:	2364      	movs	r3, #100	; 0x64
 80018f0:	2202      	movs	r2, #2
 80018f2:	a901      	add	r1, sp, #4
 80018f4:	4804      	ldr	r0, [pc, #16]	; (8001908 <NRF24_ACTIVATE_cmd+0x30>)
 80018f6:	f002 fa5d 	bl	8003db4 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80018fa:	2001      	movs	r0, #1
 80018fc:	f7ff fdca 	bl	8001494 <NRF24_csn>
}
 8001900:	b003      	add	sp, #12
 8001902:	f85d fb04 	ldr.w	pc, [sp], #4
 8001906:	bf00      	nop
 8001908:	2000028c 	.word	0x2000028c

0800190c <NRF24_enableAckPayload>:
{
 800190c:	b508      	push	{r3, lr}
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800190e:	201d      	movs	r0, #29
 8001910:	f7ff fdec 	bl	80014ec <NRF24_read_register>
 8001914:	f040 0106 	orr.w	r1, r0, #6
 8001918:	b2c9      	uxtb	r1, r1
 800191a:	201d      	movs	r0, #29
 800191c:	f7ff fe28 	bl	8001570 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001920:	201d      	movs	r0, #29
 8001922:	f7ff fde3 	bl	80014ec <NRF24_read_register>
 8001926:	b148      	cbz	r0, 800193c <NRF24_enableAckPayload+0x30>
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001928:	201c      	movs	r0, #28
 800192a:	f7ff fddf 	bl	80014ec <NRF24_read_register>
 800192e:	f040 0103 	orr.w	r1, r0, #3
 8001932:	b2c9      	uxtb	r1, r1
 8001934:	201c      	movs	r0, #28
 8001936:	f7ff fe1b 	bl	8001570 <NRF24_write_register>
}
 800193a:	bd08      	pop	{r3, pc}
		NRF24_ACTIVATE_cmd();
 800193c:	f7ff ffcc 	bl	80018d8 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001940:	201d      	movs	r0, #29
 8001942:	f7ff fdd3 	bl	80014ec <NRF24_read_register>
 8001946:	f040 0106 	orr.w	r1, r0, #6
 800194a:	b2c9      	uxtb	r1, r1
 800194c:	201d      	movs	r0, #29
 800194e:	f7ff fe0f 	bl	8001570 <NRF24_write_register>
 8001952:	e7e9      	b.n	8001928 <NRF24_enableAckPayload+0x1c>

08001954 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001954:	b570      	push	{r4, r5, r6, lr}
 8001956:	b0a0      	sub	sp, #128	; 0x80
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001958:	ac07      	add	r4, sp, #28
 800195a:	4dc4      	ldr	r5, [pc, #784]	; (8001c6c <printRadioSettings+0x318>)
 800195c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800195e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001968:	682b      	ldr	r3, [r5, #0]
 800196a:	f824 3b02 	strh.w	r3, [r4], #2
 800196e:	0c1b      	lsrs	r3, r3, #16
 8001970:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001972:	a807      	add	r0, sp, #28
 8001974:	f7ff fa82 	bl	8000e7c <strlen>
 8001978:	230a      	movs	r3, #10
 800197a:	b282      	uxth	r2, r0
 800197c:	a907      	add	r1, sp, #28
 800197e:	48bc      	ldr	r0, [pc, #752]	; (8001c70 <printRadioSettings+0x31c>)
 8001980:	f003 f8d0 	bl	8004b24 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff fdb1 	bl	80014ec <NRF24_read_register>
	if(reg8Val & (1 << 3))
 800198a:	f010 0f08 	tst.w	r0, #8
 800198e:	f000 8261 	beq.w	8001e54 <printRadioSettings+0x500>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001992:	f010 0f04 	tst.w	r0, #4
 8001996:	f000 8251 	beq.w	8001e3c <printRadioSettings+0x4e8>
 800199a:	ac07      	add	r4, sp, #28
 800199c:	4db5      	ldr	r5, [pc, #724]	; (8001c74 <printRadioSettings+0x320>)
 800199e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019aa:	a807      	add	r0, sp, #28
 80019ac:	f7ff fa66 	bl	8000e7c <strlen>
 80019b0:	4caf      	ldr	r4, [pc, #700]	; (8001c70 <printRadioSettings+0x31c>)
 80019b2:	230a      	movs	r3, #10
 80019b4:	b282      	uxth	r2, r0
 80019b6:	a907      	add	r1, sp, #28
 80019b8:	4620      	mov	r0, r4
 80019ba:	f003 f8b3 	bl	8004b24 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80019be:	2001      	movs	r0, #1
 80019c0:	f7ff fd94 	bl	80014ec <NRF24_read_register>
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80019c4:	f3c0 1340 	ubfx	r3, r0, #5, #1
 80019c8:	9303      	str	r3, [sp, #12]
 80019ca:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80019ce:	9302      	str	r3, [sp, #8]
 80019d0:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80019d4:	9301      	str	r3, [sp, #4]
 80019d6:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	f3c0 0340 	ubfx	r3, r0, #1, #1
 80019e0:	f000 0201 	and.w	r2, r0, #1
 80019e4:	49a4      	ldr	r1, [pc, #656]	; (8001c78 <printRadioSettings+0x324>)
 80019e6:	a807      	add	r0, sp, #28
 80019e8:	f006 fa3a 	bl	8007e60 <siprintf>
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019ec:	a807      	add	r0, sp, #28
 80019ee:	f7ff fa45 	bl	8000e7c <strlen>
 80019f2:	230a      	movs	r3, #10
 80019f4:	b282      	uxth	r2, r0
 80019f6:	a907      	add	r1, sp, #28
 80019f8:	4620      	mov	r0, r4
 80019fa:	f003 f893 	bl	8004b24 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80019fe:	2002      	movs	r0, #2
 8001a00:	f7ff fd74 	bl	80014ec <NRF24_read_register>
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a04:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8001a08:	9303      	str	r3, [sp, #12]
 8001a0a:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8001a0e:	9302      	str	r3, [sp, #8]
 8001a10:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8001a20:	f000 0201 	and.w	r2, r0, #1
 8001a24:	4995      	ldr	r1, [pc, #596]	; (8001c7c <printRadioSettings+0x328>)
 8001a26:	a807      	add	r0, sp, #28
 8001a28:	f006 fa1a 	bl	8007e60 <siprintf>
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a2c:	a807      	add	r0, sp, #28
 8001a2e:	f7ff fa25 	bl	8000e7c <strlen>
 8001a32:	230a      	movs	r3, #10
 8001a34:	b282      	uxth	r2, r0
 8001a36:	a907      	add	r1, sp, #28
 8001a38:	4620      	mov	r0, r4
 8001a3a:	f003 f873 	bl	8004b24 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001a3e:	2003      	movs	r0, #3
 8001a40:	f7ff fd54 	bl	80014ec <NRF24_read_register>
 8001a44:	f000 0203 	and.w	r2, r0, #3
	reg8Val +=2;
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001a48:	3202      	adds	r2, #2
 8001a4a:	498d      	ldr	r1, [pc, #564]	; (8001c80 <printRadioSettings+0x32c>)
 8001a4c:	a807      	add	r0, sp, #28
 8001a4e:	f006 fa07 	bl	8007e60 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a52:	a807      	add	r0, sp, #28
 8001a54:	f7ff fa12 	bl	8000e7c <strlen>
 8001a58:	230a      	movs	r3, #10
 8001a5a:	b282      	uxth	r2, r0
 8001a5c:	a907      	add	r1, sp, #28
 8001a5e:	4620      	mov	r0, r4
 8001a60:	f003 f860 	bl	8004b24 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001a64:	2005      	movs	r0, #5
 8001a66:	f7ff fd41 	bl	80014ec <NRF24_read_register>
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001a6a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001a6e:	4985      	ldr	r1, [pc, #532]	; (8001c84 <printRadioSettings+0x330>)
 8001a70:	a807      	add	r0, sp, #28
 8001a72:	f006 f9f5 	bl	8007e60 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a76:	a807      	add	r0, sp, #28
 8001a78:	f7ff fa00 	bl	8000e7c <strlen>
 8001a7c:	230a      	movs	r3, #10
 8001a7e:	b282      	uxth	r2, r0
 8001a80:	a907      	add	r1, sp, #28
 8001a82:	4620      	mov	r0, r4
 8001a84:	f003 f84e 	bl	8004b24 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001a88:	2006      	movs	r0, #6
 8001a8a:	f7ff fd2f 	bl	80014ec <NRF24_read_register>
 8001a8e:	4604      	mov	r4, r0
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001a90:	f010 0f08 	tst.w	r0, #8
 8001a94:	f000 81e5 	beq.w	8001e62 <printRadioSettings+0x50e>
 8001a98:	ad07      	add	r5, sp, #28
 8001a9a:	4e7b      	ldr	r6, [pc, #492]	; (8001c88 <printRadioSettings+0x334>)
 8001a9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa0:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001aa4:	f845 0b04 	str.w	r0, [r5], #4
 8001aa8:	f825 1b02 	strh.w	r1, [r5], #2
 8001aac:	0c09      	lsrs	r1, r1, #16
 8001aae:	7029      	strb	r1, [r5, #0]
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ab0:	a807      	add	r0, sp, #28
 8001ab2:	f7ff f9e3 	bl	8000e7c <strlen>
 8001ab6:	230a      	movs	r3, #10
 8001ab8:	b282      	uxth	r2, r0
 8001aba:	a907      	add	r1, sp, #28
 8001abc:	486c      	ldr	r0, [pc, #432]	; (8001c70 <printRadioSettings+0x31c>)
 8001abe:	f003 f831 	bl	8004b24 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
	reg8Val = (reg8Val>>1);
 8001ac2:	f3c4 0441 	ubfx	r4, r4, #1, #2
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001ac6:	2c00      	cmp	r4, #0
 8001ac8:	f000 81d8 	beq.w	8001e7c <printRadioSettings+0x528>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001acc:	2c01      	cmp	r4, #1
 8001ace:	f000 81dc 	beq.w	8001e8a <printRadioSettings+0x536>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001ad2:	2c02      	cmp	r4, #2
 8001ad4:	f000 81e0 	beq.w	8001e98 <printRadioSettings+0x544>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001ad8:	2c03      	cmp	r4, #3
 8001ada:	f000 81e7 	beq.w	8001eac <printRadioSettings+0x558>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ade:	a807      	add	r0, sp, #28
 8001ae0:	f7ff f9cc 	bl	8000e7c <strlen>
 8001ae4:	4c62      	ldr	r4, [pc, #392]	; (8001c70 <printRadioSettings+0x31c>)
 8001ae6:	230a      	movs	r3, #10
 8001ae8:	b282      	uxth	r2, r0
 8001aea:	a907      	add	r1, sp, #28
 8001aec:	4620      	mov	r0, r4
 8001aee:	f003 f819 	bl	8004b24 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001af2:	2205      	movs	r2, #5
 8001af4:	a905      	add	r1, sp, #20
 8001af6:	200a      	movs	r0, #10
 8001af8:	f7ff fd1a 	bl	8001530 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001afc:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8001b00:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001b04:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8001b08:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8001b0c:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8001b10:	9502      	str	r5, [sp, #8]
 8001b12:	9001      	str	r0, [sp, #4]
 8001b14:	9100      	str	r1, [sp, #0]
 8001b16:	495d      	ldr	r1, [pc, #372]	; (8001c8c <printRadioSettings+0x338>)
 8001b18:	a807      	add	r0, sp, #28
 8001b1a:	f006 f9a1 	bl	8007e60 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b1e:	a807      	add	r0, sp, #28
 8001b20:	f7ff f9ac 	bl	8000e7c <strlen>
 8001b24:	230a      	movs	r3, #10
 8001b26:	b282      	uxth	r2, r0
 8001b28:	a907      	add	r1, sp, #28
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	f002 fffa 	bl	8004b24 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001b30:	2205      	movs	r2, #5
 8001b32:	a905      	add	r1, sp, #20
 8001b34:	200b      	movs	r0, #11
 8001b36:	f7ff fcfb 	bl	8001530 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001b3a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8001b3e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001b42:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8001b46:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8001b4a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8001b4e:	9502      	str	r5, [sp, #8]
 8001b50:	9001      	str	r0, [sp, #4]
 8001b52:	9100      	str	r1, [sp, #0]
 8001b54:	494e      	ldr	r1, [pc, #312]	; (8001c90 <printRadioSettings+0x33c>)
 8001b56:	a807      	add	r0, sp, #28
 8001b58:	f006 f982 	bl	8007e60 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b5c:	a807      	add	r0, sp, #28
 8001b5e:	f7ff f98d 	bl	8000e7c <strlen>
 8001b62:	230a      	movs	r3, #10
 8001b64:	b282      	uxth	r2, r0
 8001b66:	a907      	add	r1, sp, #28
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f002 ffdb 	bl	8004b24 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001b6e:	2201      	movs	r2, #1
 8001b70:	a905      	add	r1, sp, #20
 8001b72:	200c      	movs	r0, #12
 8001b74:	f7ff fcdc 	bl	8001530 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001b78:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001b7c:	4945      	ldr	r1, [pc, #276]	; (8001c94 <printRadioSettings+0x340>)
 8001b7e:	a807      	add	r0, sp, #28
 8001b80:	f006 f96e 	bl	8007e60 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b84:	a807      	add	r0, sp, #28
 8001b86:	f7ff f979 	bl	8000e7c <strlen>
 8001b8a:	230a      	movs	r3, #10
 8001b8c:	b282      	uxth	r2, r0
 8001b8e:	a907      	add	r1, sp, #28
 8001b90:	4620      	mov	r0, r4
 8001b92:	f002 ffc7 	bl	8004b24 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001b96:	2201      	movs	r2, #1
 8001b98:	a905      	add	r1, sp, #20
 8001b9a:	200d      	movs	r0, #13
 8001b9c:	f7ff fcc8 	bl	8001530 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001ba0:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001ba4:	493c      	ldr	r1, [pc, #240]	; (8001c98 <printRadioSettings+0x344>)
 8001ba6:	a807      	add	r0, sp, #28
 8001ba8:	f006 f95a 	bl	8007e60 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001bac:	a807      	add	r0, sp, #28
 8001bae:	f7ff f965 	bl	8000e7c <strlen>
 8001bb2:	230a      	movs	r3, #10
 8001bb4:	b282      	uxth	r2, r0
 8001bb6:	a907      	add	r1, sp, #28
 8001bb8:	4620      	mov	r0, r4
 8001bba:	f002 ffb3 	bl	8004b24 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	a905      	add	r1, sp, #20
 8001bc2:	200e      	movs	r0, #14
 8001bc4:	f7ff fcb4 	bl	8001530 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001bc8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001bcc:	4933      	ldr	r1, [pc, #204]	; (8001c9c <printRadioSettings+0x348>)
 8001bce:	a807      	add	r0, sp, #28
 8001bd0:	f006 f946 	bl	8007e60 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001bd4:	a807      	add	r0, sp, #28
 8001bd6:	f7ff f951 	bl	8000e7c <strlen>
 8001bda:	230a      	movs	r3, #10
 8001bdc:	b282      	uxth	r2, r0
 8001bde:	a907      	add	r1, sp, #28
 8001be0:	4620      	mov	r0, r4
 8001be2:	f002 ff9f 	bl	8004b24 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001be6:	2201      	movs	r2, #1
 8001be8:	a905      	add	r1, sp, #20
 8001bea:	200f      	movs	r0, #15
 8001bec:	f7ff fca0 	bl	8001530 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001bf0:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001bf4:	492a      	ldr	r1, [pc, #168]	; (8001ca0 <printRadioSettings+0x34c>)
 8001bf6:	a807      	add	r0, sp, #28
 8001bf8:	f006 f932 	bl	8007e60 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001bfc:	a807      	add	r0, sp, #28
 8001bfe:	f7ff f93d 	bl	8000e7c <strlen>
 8001c02:	230a      	movs	r3, #10
 8001c04:	b282      	uxth	r2, r0
 8001c06:	a907      	add	r1, sp, #28
 8001c08:	4620      	mov	r0, r4
 8001c0a:	f002 ff8b 	bl	8004b24 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001c0e:	2205      	movs	r2, #5
 8001c10:	a905      	add	r1, sp, #20
 8001c12:	2010      	movs	r0, #16
 8001c14:	f7ff fc8c 	bl	8001530 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001c18:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8001c1c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001c20:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8001c24:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8001c28:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8001c2c:	9502      	str	r5, [sp, #8]
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	9100      	str	r1, [sp, #0]
 8001c32:	491c      	ldr	r1, [pc, #112]	; (8001ca4 <printRadioSettings+0x350>)
 8001c34:	a807      	add	r0, sp, #28
 8001c36:	f006 f913 	bl	8007e60 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c3a:	a807      	add	r0, sp, #28
 8001c3c:	f7ff f91e 	bl	8000e7c <strlen>
 8001c40:	230a      	movs	r3, #10
 8001c42:	b282      	uxth	r2, r0
 8001c44:	a907      	add	r1, sp, #28
 8001c46:	4620      	mov	r0, r4
 8001c48:	f002 ff6c 	bl	8004b24 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001c4c:	2011      	movs	r0, #17
 8001c4e:	f7ff fc4d 	bl	80014ec <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001c52:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001c56:	4914      	ldr	r1, [pc, #80]	; (8001ca8 <printRadioSettings+0x354>)
 8001c58:	a807      	add	r0, sp, #28
 8001c5a:	f006 f901 	bl	8007e60 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c5e:	a807      	add	r0, sp, #28
 8001c60:	f7ff f90c 	bl	8000e7c <strlen>
 8001c64:	230a      	movs	r3, #10
 8001c66:	b282      	uxth	r2, r0
 8001c68:	e020      	b.n	8001cac <printRadioSettings+0x358>
 8001c6a:	bf00      	nop
 8001c6c:	0800a274 	.word	0x0800a274
 8001c70:	200002e4 	.word	0x200002e4
 8001c74:	0800a2a8 	.word	0x0800a2a8
 8001c78:	0800a2f4 	.word	0x0800a2f4
 8001c7c:	0800a338 	.word	0x0800a338
 8001c80:	0800a384 	.word	0x0800a384
 8001c84:	0800a3a0 	.word	0x0800a3a0
 8001c88:	0800a3b4 	.word	0x0800a3b4
 8001c8c:	0800a434 	.word	0x0800a434
 8001c90:	0800a464 	.word	0x0800a464
 8001c94:	0800a494 	.word	0x0800a494
 8001c98:	0800a4bc 	.word	0x0800a4bc
 8001c9c:	0800a4e4 	.word	0x0800a4e4
 8001ca0:	0800a50c 	.word	0x0800a50c
 8001ca4:	0800a534 	.word	0x0800a534
 8001ca8:	0800a560 	.word	0x0800a560
 8001cac:	a907      	add	r1, sp, #28
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f002 ff38 	bl	8004b24 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001cb4:	2012      	movs	r0, #18
 8001cb6:	f7ff fc19 	bl	80014ec <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001cba:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001cbe:	498a      	ldr	r1, [pc, #552]	; (8001ee8 <printRadioSettings+0x594>)
 8001cc0:	a807      	add	r0, sp, #28
 8001cc2:	f006 f8cd 	bl	8007e60 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cc6:	a807      	add	r0, sp, #28
 8001cc8:	f7ff f8d8 	bl	8000e7c <strlen>
 8001ccc:	230a      	movs	r3, #10
 8001cce:	b282      	uxth	r2, r0
 8001cd0:	a907      	add	r1, sp, #28
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f002 ff26 	bl	8004b24 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001cd8:	2013      	movs	r0, #19
 8001cda:	f7ff fc07 	bl	80014ec <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001cde:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001ce2:	4982      	ldr	r1, [pc, #520]	; (8001eec <printRadioSettings+0x598>)
 8001ce4:	a807      	add	r0, sp, #28
 8001ce6:	f006 f8bb 	bl	8007e60 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cea:	a807      	add	r0, sp, #28
 8001cec:	f7ff f8c6 	bl	8000e7c <strlen>
 8001cf0:	230a      	movs	r3, #10
 8001cf2:	b282      	uxth	r2, r0
 8001cf4:	a907      	add	r1, sp, #28
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f002 ff14 	bl	8004b24 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001cfc:	2014      	movs	r0, #20
 8001cfe:	f7ff fbf5 	bl	80014ec <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001d02:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001d06:	497a      	ldr	r1, [pc, #488]	; (8001ef0 <printRadioSettings+0x59c>)
 8001d08:	a807      	add	r0, sp, #28
 8001d0a:	f006 f8a9 	bl	8007e60 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d0e:	a807      	add	r0, sp, #28
 8001d10:	f7ff f8b4 	bl	8000e7c <strlen>
 8001d14:	230a      	movs	r3, #10
 8001d16:	b282      	uxth	r2, r0
 8001d18:	a907      	add	r1, sp, #28
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f002 ff02 	bl	8004b24 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001d20:	2015      	movs	r0, #21
 8001d22:	f7ff fbe3 	bl	80014ec <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001d26:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001d2a:	4972      	ldr	r1, [pc, #456]	; (8001ef4 <printRadioSettings+0x5a0>)
 8001d2c:	a807      	add	r0, sp, #28
 8001d2e:	f006 f897 	bl	8007e60 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d32:	a807      	add	r0, sp, #28
 8001d34:	f7ff f8a2 	bl	8000e7c <strlen>
 8001d38:	230a      	movs	r3, #10
 8001d3a:	b282      	uxth	r2, r0
 8001d3c:	a907      	add	r1, sp, #28
 8001d3e:	4620      	mov	r0, r4
 8001d40:	f002 fef0 	bl	8004b24 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001d44:	2016      	movs	r0, #22
 8001d46:	f7ff fbd1 	bl	80014ec <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001d4a:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8001d4e:	496a      	ldr	r1, [pc, #424]	; (8001ef8 <printRadioSettings+0x5a4>)
 8001d50:	a807      	add	r0, sp, #28
 8001d52:	f006 f885 	bl	8007e60 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d56:	a807      	add	r0, sp, #28
 8001d58:	f7ff f890 	bl	8000e7c <strlen>
 8001d5c:	230a      	movs	r3, #10
 8001d5e:	b282      	uxth	r2, r0
 8001d60:	a907      	add	r1, sp, #28
 8001d62:	4620      	mov	r0, r4
 8001d64:	f002 fede 	bl	8004b24 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001d68:	201c      	movs	r0, #28
 8001d6a:	f7ff fbbf 	bl	80014ec <NRF24_read_register>
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001d6e:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8001d72:	9303      	str	r3, [sp, #12]
 8001d74:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8001d78:	9302      	str	r3, [sp, #8]
 8001d7a:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8001d8a:	f000 0201 	and.w	r2, r0, #1
 8001d8e:	495b      	ldr	r1, [pc, #364]	; (8001efc <printRadioSettings+0x5a8>)
 8001d90:	a807      	add	r0, sp, #28
 8001d92:	f006 f865 	bl	8007e60 <siprintf>
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d96:	a807      	add	r0, sp, #28
 8001d98:	f7ff f870 	bl	8000e7c <strlen>
 8001d9c:	230a      	movs	r3, #10
 8001d9e:	b282      	uxth	r2, r0
 8001da0:	a907      	add	r1, sp, #28
 8001da2:	4620      	mov	r0, r4
 8001da4:	f002 febe 	bl	8004b24 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001da8:	201d      	movs	r0, #29
 8001daa:	f7ff fb9f 	bl	80014ec <NRF24_read_register>
 8001dae:	4606      	mov	r6, r0
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001db0:	f010 0f04 	tst.w	r0, #4
 8001db4:	f000 8081 	beq.w	8001eba <printRadioSettings+0x566>
 8001db8:	ac07      	add	r4, sp, #28
 8001dba:	4d51      	ldr	r5, [pc, #324]	; (8001f00 <printRadioSettings+0x5ac>)
 8001dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001dc4:	f844 0b04 	str.w	r0, [r4], #4
 8001dc8:	8021      	strh	r1, [r4, #0]
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001dca:	a807      	add	r0, sp, #28
 8001dcc:	f7ff f856 	bl	8000e7c <strlen>
 8001dd0:	230a      	movs	r3, #10
 8001dd2:	b282      	uxth	r2, r0
 8001dd4:	a907      	add	r1, sp, #28
 8001dd6:	484b      	ldr	r0, [pc, #300]	; (8001f04 <printRadioSettings+0x5b0>)
 8001dd8:	f002 fea4 	bl	8004b24 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001ddc:	f016 0f02 	tst.w	r6, #2
 8001de0:	d178      	bne.n	8001ed4 <printRadioSettings+0x580>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001de2:	ac07      	add	r4, sp, #28
 8001de4:	4d48      	ldr	r5, [pc, #288]	; (8001f08 <printRadioSettings+0x5b4>)
 8001de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001dee:	c403      	stmia	r4!, {r0, r1}
 8001df0:	f824 2b02 	strh.w	r2, [r4], #2
 8001df4:	0c12      	lsrs	r2, r2, #16
 8001df6:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001df8:	a807      	add	r0, sp, #28
 8001dfa:	f7ff f83f 	bl	8000e7c <strlen>
 8001dfe:	4e41      	ldr	r6, [pc, #260]	; (8001f04 <printRadioSettings+0x5b0>)
 8001e00:	230a      	movs	r3, #10
 8001e02:	b282      	uxth	r2, r0
 8001e04:	a907      	add	r1, sp, #28
 8001e06:	4630      	mov	r0, r6
 8001e08:	f002 fe8c 	bl	8004b24 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001e0c:	ac07      	add	r4, sp, #28
 8001e0e:	4d3f      	ldr	r5, [pc, #252]	; (8001f0c <printRadioSettings+0x5b8>)
 8001e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e1c:	682b      	ldr	r3, [r5, #0]
 8001e1e:	f824 3b02 	strh.w	r3, [r4], #2
 8001e22:	0c1b      	lsrs	r3, r3, #16
 8001e24:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e26:	a807      	add	r0, sp, #28
 8001e28:	f7ff f828 	bl	8000e7c <strlen>
 8001e2c:	230a      	movs	r3, #10
 8001e2e:	b282      	uxth	r2, r0
 8001e30:	a907      	add	r1, sp, #28
 8001e32:	4630      	mov	r0, r6
 8001e34:	f002 fe76 	bl	8004b24 <HAL_UART_Transmit>
}
 8001e38:	b020      	add	sp, #128	; 0x80
 8001e3a:	bd70      	pop	{r4, r5, r6, pc}
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8001e3c:	ac07      	add	r4, sp, #28
 8001e3e:	4d34      	ldr	r5, [pc, #208]	; (8001f10 <printRadioSettings+0x5bc>)
 8001e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e48:	c403      	stmia	r4!, {r0, r1}
 8001e4a:	f824 2b02 	strh.w	r2, [r4], #2
 8001e4e:	0c12      	lsrs	r2, r2, #16
 8001e50:	7022      	strb	r2, [r4, #0]
 8001e52:	e5aa      	b.n	80019aa <printRadioSettings+0x56>
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001e54:	ac07      	add	r4, sp, #28
 8001e56:	4d2f      	ldr	r5, [pc, #188]	; (8001f14 <printRadioSettings+0x5c0>)
 8001e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e5c:	682b      	ldr	r3, [r5, #0]
 8001e5e:	6023      	str	r3, [r4, #0]
 8001e60:	e5a3      	b.n	80019aa <printRadioSettings+0x56>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001e62:	ad07      	add	r5, sp, #28
 8001e64:	4e2c      	ldr	r6, [pc, #176]	; (8001f18 <printRadioSettings+0x5c4>)
 8001e66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e6a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001e6e:	f845 0b04 	str.w	r0, [r5], #4
 8001e72:	f825 1b02 	strh.w	r1, [r5], #2
 8001e76:	0c09      	lsrs	r1, r1, #16
 8001e78:	7029      	strb	r1, [r5, #0]
 8001e7a:	e619      	b.n	8001ab0 <printRadioSettings+0x15c>
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001e7c:	ac07      	add	r4, sp, #28
 8001e7e:	4d27      	ldr	r5, [pc, #156]	; (8001f1c <printRadioSettings+0x5c8>)
 8001e80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e84:	682b      	ldr	r3, [r5, #0]
 8001e86:	6023      	str	r3, [r4, #0]
 8001e88:	e629      	b.n	8001ade <printRadioSettings+0x18a>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001e8a:	ac07      	add	r4, sp, #28
 8001e8c:	4d24      	ldr	r5, [pc, #144]	; (8001f20 <printRadioSettings+0x5cc>)
 8001e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e92:	682b      	ldr	r3, [r5, #0]
 8001e94:	6023      	str	r3, [r4, #0]
 8001e96:	e622      	b.n	8001ade <printRadioSettings+0x18a>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001e98:	ac07      	add	r4, sp, #28
 8001e9a:	4d22      	ldr	r5, [pc, #136]	; (8001f24 <printRadioSettings+0x5d0>)
 8001e9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ea0:	682b      	ldr	r3, [r5, #0]
 8001ea2:	f824 3b02 	strh.w	r3, [r4], #2
 8001ea6:	0c1b      	lsrs	r3, r3, #16
 8001ea8:	7023      	strb	r3, [r4, #0]
 8001eaa:	e618      	b.n	8001ade <printRadioSettings+0x18a>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001eac:	ac07      	add	r4, sp, #28
 8001eae:	4d1e      	ldr	r5, [pc, #120]	; (8001f28 <printRadioSettings+0x5d4>)
 8001eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eb4:	682b      	ldr	r3, [r5, #0]
 8001eb6:	8023      	strh	r3, [r4, #0]
 8001eb8:	e611      	b.n	8001ade <printRadioSettings+0x18a>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001eba:	ac07      	add	r4, sp, #28
 8001ebc:	4d1b      	ldr	r5, [pc, #108]	; (8001f2c <printRadioSettings+0x5d8>)
 8001ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ec2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ec6:	f844 0b04 	str.w	r0, [r4], #4
 8001eca:	f824 1b02 	strh.w	r1, [r4], #2
 8001ece:	0c09      	lsrs	r1, r1, #16
 8001ed0:	7021      	strb	r1, [r4, #0]
 8001ed2:	e77a      	b.n	8001dca <printRadioSettings+0x476>
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001ed4:	ac07      	add	r4, sp, #28
 8001ed6:	4d16      	ldr	r5, [pc, #88]	; (8001f30 <printRadioSettings+0x5dc>)
 8001ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001edc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ee0:	c403      	stmia	r4!, {r0, r1}
 8001ee2:	8022      	strh	r2, [r4, #0]
 8001ee4:	e788      	b.n	8001df8 <printRadioSettings+0x4a4>
 8001ee6:	bf00      	nop
 8001ee8:	0800a57c 	.word	0x0800a57c
 8001eec:	0800a598 	.word	0x0800a598
 8001ef0:	0800a5b4 	.word	0x0800a5b4
 8001ef4:	0800a5d0 	.word	0x0800a5d0
 8001ef8:	0800a5ec 	.word	0x0800a5ec
 8001efc:	0800a608 	.word	0x0800a608
 8001f00:	0800a654 	.word	0x0800a654
 8001f04:	200002e4 	.word	0x200002e4
 8001f08:	0800a6a0 	.word	0x0800a6a0
 8001f0c:	0800a274 	.word	0x0800a274
 8001f10:	0800a2c4 	.word	0x0800a2c4
 8001f14:	0800a2e0 	.word	0x0800a2e0
 8001f18:	0800a3cc 	.word	0x0800a3cc
 8001f1c:	0800a3e4 	.word	0x0800a3e4
 8001f20:	0800a3f8 	.word	0x0800a3f8
 8001f24:	0800a40c 	.word	0x0800a40c
 8001f28:	0800a420 	.word	0x0800a420
 8001f2c:	0800a66c 	.word	0x0800a66c
 8001f30:	0800a684 	.word	0x0800a684

08001f34 <NRF24_begin>:
{
 8001f34:	b082      	sub	sp, #8
 8001f36:	b570      	push	{r4, r5, r6, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	4606      	mov	r6, r0
 8001f3c:	460d      	mov	r5, r1
 8001f3e:	4614      	mov	r4, r2
 8001f40:	a906      	add	r1, sp, #24
 8001f42:	f841 3f04 	str.w	r3, [r1, #4]!
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8001f46:	2258      	movs	r2, #88	; 0x58
 8001f48:	485f      	ldr	r0, [pc, #380]	; (80020c8 <NRF24_begin+0x194>)
 8001f4a:	f005 fb1a 	bl	8007582 <memcpy>
	nrf24_PORT = nrf24PORT;
 8001f4e:	4b5f      	ldr	r3, [pc, #380]	; (80020cc <NRF24_begin+0x198>)
 8001f50:	601e      	str	r6, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001f52:	4b5f      	ldr	r3, [pc, #380]	; (80020d0 <NRF24_begin+0x19c>)
 8001f54:	801d      	strh	r5, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001f56:	4b5f      	ldr	r3, [pc, #380]	; (80020d4 <NRF24_begin+0x1a0>)
 8001f58:	801c      	strh	r4, [r3, #0]
	NRF24_csn(1);
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f7ff fa9a 	bl	8001494 <NRF24_csn>
	NRF24_ce(0);
 8001f60:	2000      	movs	r0, #0
 8001f62:	f7ff faad 	bl	80014c0 <NRF24_ce>
	HAL_Delay(5);
 8001f66:	2005      	movs	r0, #5
 8001f68:	f000 fa54 	bl	8002414 <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 8001f6c:	2108      	movs	r1, #8
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f7ff fafe 	bl	8001570 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8001f74:	213f      	movs	r1, #63	; 0x3f
 8001f76:	2001      	movs	r0, #1
 8001f78:	f7ff fafa 	bl	8001570 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001f7c:	2103      	movs	r1, #3
 8001f7e:	2002      	movs	r0, #2
 8001f80:	f7ff faf6 	bl	8001570 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8001f84:	2103      	movs	r1, #3
 8001f86:	4608      	mov	r0, r1
 8001f88:	f7ff faf2 	bl	8001570 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001f8c:	2103      	movs	r1, #3
 8001f8e:	2004      	movs	r0, #4
 8001f90:	f7ff faee 	bl	8001570 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8001f94:	2102      	movs	r1, #2
 8001f96:	2005      	movs	r0, #5
 8001f98:	f7ff faea 	bl	8001570 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8001f9c:	210f      	movs	r1, #15
 8001f9e:	2006      	movs	r0, #6
 8001fa0:	f7ff fae6 	bl	8001570 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8001fa4:	210e      	movs	r1, #14
 8001fa6:	2007      	movs	r0, #7
 8001fa8:	f7ff fae2 	bl	8001570 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8001fac:	2100      	movs	r1, #0
 8001fae:	2008      	movs	r0, #8
 8001fb0:	f7ff fade 	bl	8001570 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2009      	movs	r0, #9
 8001fb8:	f7ff fada 	bl	8001570 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001fbc:	24e7      	movs	r4, #231	; 0xe7
 8001fbe:	f88d 4004 	strb.w	r4, [sp, #4]
 8001fc2:	f88d 4003 	strb.w	r4, [sp, #3]
 8001fc6:	f88d 4002 	strb.w	r4, [sp, #2]
 8001fca:	f88d 4001 	strb.w	r4, [sp, #1]
 8001fce:	ad02      	add	r5, sp, #8
 8001fd0:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8001fd4:	2205      	movs	r2, #5
 8001fd6:	4629      	mov	r1, r5
 8001fd8:	200a      	movs	r0, #10
 8001fda:	f7ff fae3 	bl	80015a4 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8001fde:	23c2      	movs	r3, #194	; 0xc2
 8001fe0:	f88d 3004 	strb.w	r3, [sp, #4]
 8001fe4:	f88d 3003 	strb.w	r3, [sp, #3]
 8001fe8:	f88d 3002 	strb.w	r3, [sp, #2]
 8001fec:	f88d 3001 	strb.w	r3, [sp, #1]
 8001ff0:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8001ff4:	2205      	movs	r2, #5
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	200b      	movs	r0, #11
 8001ffa:	f7ff fad3 	bl	80015a4 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8001ffe:	21c3      	movs	r1, #195	; 0xc3
 8002000:	200c      	movs	r0, #12
 8002002:	f7ff fab5 	bl	8001570 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8002006:	21c4      	movs	r1, #196	; 0xc4
 8002008:	200d      	movs	r0, #13
 800200a:	f7ff fab1 	bl	8001570 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800200e:	21c5      	movs	r1, #197	; 0xc5
 8002010:	200e      	movs	r0, #14
 8002012:	f7ff faad 	bl	8001570 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8002016:	21c6      	movs	r1, #198	; 0xc6
 8002018:	200f      	movs	r0, #15
 800201a:	f7ff faa9 	bl	8001570 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800201e:	f88d 4004 	strb.w	r4, [sp, #4]
 8002022:	f88d 4003 	strb.w	r4, [sp, #3]
 8002026:	f88d 4002 	strb.w	r4, [sp, #2]
 800202a:	f88d 4001 	strb.w	r4, [sp, #1]
 800202e:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8002032:	2205      	movs	r2, #5
 8002034:	4629      	mov	r1, r5
 8002036:	2010      	movs	r0, #16
 8002038:	f7ff fab4 	bl	80015a4 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800203c:	2100      	movs	r1, #0
 800203e:	2011      	movs	r0, #17
 8002040:	f7ff fa96 	bl	8001570 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8002044:	2100      	movs	r1, #0
 8002046:	2012      	movs	r0, #18
 8002048:	f7ff fa92 	bl	8001570 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800204c:	2100      	movs	r1, #0
 800204e:	2013      	movs	r0, #19
 8002050:	f7ff fa8e 	bl	8001570 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8002054:	2100      	movs	r1, #0
 8002056:	2014      	movs	r0, #20
 8002058:	f7ff fa8a 	bl	8001570 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800205c:	2100      	movs	r1, #0
 800205e:	2015      	movs	r0, #21
 8002060:	f7ff fa86 	bl	8001570 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8002064:	2100      	movs	r1, #0
 8002066:	2016      	movs	r0, #22
 8002068:	f7ff fa82 	bl	8001570 <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 800206c:	f7ff fc34 	bl	80018d8 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8002070:	2100      	movs	r1, #0
 8002072:	201c      	movs	r0, #28
 8002074:	f7ff fa7c 	bl	8001570 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8002078:	2100      	movs	r1, #0
 800207a:	201d      	movs	r0, #29
 800207c:	f7ff fa78 	bl	8001570 <NRF24_write_register>
	printRadioSettings();
 8002080:	f7ff fc68 	bl	8001954 <printRadioSettings>
	NRF24_setRetries(15, 15);
 8002084:	210f      	movs	r1, #15
 8002086:	4608      	mov	r0, r1
 8002088:	f7ff fb18 	bl	80016bc <NRF24_setRetries>
	NRF24_setPALevel(RF24_PA_m6dB);
 800208c:	2002      	movs	r0, #2
 800208e:	f7ff fb8a 	bl	80017a6 <NRF24_setPALevel>
	NRF24_setDataRate(RF24_1MBPS);
 8002092:	2000      	movs	r0, #0
 8002094:	f7ff fba6 	bl	80017e4 <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 8002098:	2002      	movs	r0, #2
 800209a:	f7ff fbc1 	bl	8001820 <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 800209e:	f7ff fb68 	bl	8001772 <NRF24_disableDynamicPayloads>
	NRF24_setPayloadSize(32);
 80020a2:	2020      	movs	r0, #32
 80020a4:	f7ff fb1e 	bl	80016e4 <NRF24_setPayloadSize>
	NRF24_resetStatus();
 80020a8:	f7ff fc10 	bl	80018cc <NRF24_resetStatus>
	NRF24_setChannel(76);
 80020ac:	204c      	movs	r0, #76	; 0x4c
 80020ae:	f7ff fb0f 	bl	80016d0 <NRF24_setChannel>
	NRF24_flush_tx();
 80020b2:	f7ff fa97 	bl	80015e4 <NRF24_flush_tx>
	NRF24_flush_rx();
 80020b6:	f7ff fa9b 	bl	80015f0 <NRF24_flush_rx>
	NRF24_powerDown();
 80020ba:	f7ff fbc4 	bl	8001846 <NRF24_powerDown>
}
 80020be:	b002      	add	sp, #8
 80020c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80020c4:	b002      	add	sp, #8
 80020c6:	4770      	bx	lr
 80020c8:	2000028c 	.word	0x2000028c
 80020cc:	20000288 	.word	0x20000288
 80020d0:	20000286 	.word	0x20000286
 80020d4:	20000284 	.word	0x20000284

080020d8 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80020d8:	b084      	sub	sp, #16
 80020da:	b430      	push	{r4, r5}
 80020dc:	ac02      	add	r4, sp, #8
 80020de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80020e2:	4c07      	ldr	r4, [pc, #28]	; (8002100 <nrf24_DebugUART_Init+0x28>)
 80020e4:	ad02      	add	r5, sp, #8
 80020e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80020fa:	bc30      	pop	{r4, r5}
 80020fc:	b004      	add	sp, #16
 80020fe:	4770      	bx	lr
 8002100:	200002e4 	.word	0x200002e4

08002104 <pid_calculate_roll>:

/** roll PID Calculation **/
float pid_calculate_roll(float IMU_roll_value, int timer_value, float roll_setpoint) {

	//Calculate error
	roll_error = IMU_roll_value - roll_setpoint;
 8002104:	ee70 0a60 	vsub.f32	s1, s0, s1
 8002108:	4b29      	ldr	r3, [pc, #164]	; (80021b0 <pid_calculate_roll+0xac>)
 800210a:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	roll_p = roll_p_gain * roll_error;
 800210e:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <pid_calculate_roll+0xb0>)
 8002110:	edd3 6a00 	vldr	s13, [r3]
 8002114:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8002118:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <pid_calculate_roll+0xb4>)
 800211a:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	roll_i += (roll_i_gain * roll_error * delta_t);
 800211e:	4b27      	ldr	r3, [pc, #156]	; (80021bc <pid_calculate_roll+0xb8>)
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8002128:	eddf 5a25 	vldr	s11, [pc, #148]	; 80021c0 <pid_calculate_roll+0xbc>
 800212c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002130:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <pid_calculate_roll+0xc0>)
 8002132:	ed93 7a00 	vldr	s14, [r3]
 8002136:	ee77 7a87 	vadd.f32	s15, s15, s14
 800213a:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / delta_t);
 800213e:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <pid_calculate_roll+0xc4>)
 8002140:	ed93 6a00 	vldr	s12, [r3]
 8002144:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8002148:	ee86 7a25 	vdiv.f32	s14, s12, s11
 800214c:	4a1f      	ldr	r2, [pc, #124]	; (80021cc <pid_calculate_roll+0xc8>)
 800214e:	ed92 6a00 	vldr	s12, [r2]
 8002152:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002156:	4a1e      	ldr	r2, [pc, #120]	; (80021d0 <pid_calculate_roll+0xcc>)
 8002158:	ed82 7a00 	vstr	s14, [r2]
	roll_last_d_error = roll_error;
 800215c:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	roll_output = roll_p + roll_i + roll_d;
 8002160:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002168:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <pid_calculate_roll+0xd0>)
 800216a:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (roll_output < -roll_pid_clip) {
 800216e:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <pid_calculate_roll+0xd4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	425a      	negs	r2, r3
 8002174:	ee07 2a10 	vmov	s14, r2
 8002178:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800217c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002184:	d40c      	bmi.n	80021a0 <pid_calculate_roll+0x9c>
		roll_output = -roll_pid_clip;
	} else if (roll_output > roll_pid_clip) {
 8002186:	ee07 3a10 	vmov	s14, r3
 800218a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800218e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002196:	dd06      	ble.n	80021a6 <pid_calculate_roll+0xa2>
		roll_output = roll_pid_clip;
 8002198:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <pid_calculate_roll+0xd0>)
 800219a:	ed83 7a00 	vstr	s14, [r3]
 800219e:	e002      	b.n	80021a6 <pid_calculate_roll+0xa2>
		roll_output = -roll_pid_clip;
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <pid_calculate_roll+0xd0>)
 80021a2:	ed83 7a00 	vstr	s14, [r3]
	}

	return roll_output;
}
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <pid_calculate_roll+0xd0>)
 80021a8:	ed93 0a00 	vldr	s0, [r3]
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	2000033c 	.word	0x2000033c
 80021b4:	20000018 	.word	0x20000018
 80021b8:	200004a0 	.word	0x200004a0
 80021bc:	20000014 	.word	0x20000014
 80021c0:	3b012912 	.word	0x3b012912
 80021c4:	200004ac 	.word	0x200004ac
 80021c8:	20000340 	.word	0x20000340
 80021cc:	20000010 	.word	0x20000010
 80021d0:	2000048c 	.word	0x2000048c
 80021d4:	20000344 	.word	0x20000344
 80021d8:	2000001c 	.word	0x2000001c

080021dc <reset_pid_roll>:

void reset_pid_roll(){

	roll_p = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <reset_pid_roll+0x14>)
 80021e0:	6013      	str	r3, [r2, #0]
	roll_i = 0;
 80021e2:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <reset_pid_roll+0x18>)
 80021e4:	6013      	str	r3, [r2, #0]
	roll_d = 0;
 80021e6:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <reset_pid_roll+0x1c>)
 80021e8:	6013      	str	r3, [r2, #0]
	roll_output = 0;
 80021ea:	4a04      	ldr	r2, [pc, #16]	; (80021fc <reset_pid_roll+0x20>)
 80021ec:	6013      	str	r3, [r2, #0]

}
 80021ee:	4770      	bx	lr
 80021f0:	200004a0 	.word	0x200004a0
 80021f4:	200004ac 	.word	0x200004ac
 80021f8:	2000048c 	.word	0x2000048c
 80021fc:	20000344 	.word	0x20000344

08002200 <pid_calculate_pitch>:

/** Pitch PID Calculation **/
float pid_calculate_pitch(float IMU_pitch_value, int timer_value, float pitch_setpoint) {

	//Calculate error
	pitch_error = IMU_pitch_value - pitch_setpoint;
 8002200:	ee70 0a60 	vsub.f32	s1, s0, s1
 8002204:	4b29      	ldr	r3, [pc, #164]	; (80022ac <pid_calculate_pitch+0xac>)
 8002206:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <pid_calculate_pitch+0xb0>)
 800220c:	edd3 6a00 	vldr	s13, [r3]
 8002210:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8002214:	4b27      	ldr	r3, [pc, #156]	; (80022b4 <pid_calculate_pitch+0xb4>)
 8002216:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	pitch_i += (pitch_i_gain * pitch_error * delta_t);
 800221a:	4b27      	ldr	r3, [pc, #156]	; (80022b8 <pid_calculate_pitch+0xb8>)
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8002224:	eddf 5a25 	vldr	s11, [pc, #148]	; 80022bc <pid_calculate_pitch+0xbc>
 8002228:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800222c:	4b24      	ldr	r3, [pc, #144]	; (80022c0 <pid_calculate_pitch+0xc0>)
 800222e:	ed93 7a00 	vldr	s14, [r3]
 8002232:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002236:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	pitch_d = pitch_d_gain * ( (pitch_error - pitch_last_d_error) / delta_t);
 800223a:	4b22      	ldr	r3, [pc, #136]	; (80022c4 <pid_calculate_pitch+0xc4>)
 800223c:	ed93 6a00 	vldr	s12, [r3]
 8002240:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8002244:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8002248:	4a1f      	ldr	r2, [pc, #124]	; (80022c8 <pid_calculate_pitch+0xc8>)
 800224a:	ed92 6a00 	vldr	s12, [r2]
 800224e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002252:	4a1e      	ldr	r2, [pc, #120]	; (80022cc <pid_calculate_pitch+0xcc>)
 8002254:	ed82 7a00 	vstr	s14, [r2]
	pitch_last_d_error = pitch_error;
 8002258:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 800225c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <pid_calculate_pitch+0xd0>)
 8002266:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (pitch_output < -pitch_pid_clip) {
 800226a:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <pid_calculate_pitch+0xd4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	425a      	negs	r2, r3
 8002270:	ee07 2a10 	vmov	s14, r2
 8002274:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800227c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002280:	d40c      	bmi.n	800229c <pid_calculate_pitch+0x9c>
		pitch_output = -pitch_pid_clip;
	} else if (pitch_output > pitch_pid_clip) {
 8002282:	ee07 3a10 	vmov	s14, r3
 8002286:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800228a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002292:	dd06      	ble.n	80022a2 <pid_calculate_pitch+0xa2>
		pitch_output = pitch_pid_clip;
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <pid_calculate_pitch+0xd0>)
 8002296:	ed83 7a00 	vstr	s14, [r3]
 800229a:	e002      	b.n	80022a2 <pid_calculate_pitch+0xa2>
		pitch_output = -pitch_pid_clip;
 800229c:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <pid_calculate_pitch+0xd0>)
 800229e:	ed83 7a00 	vstr	s14, [r3]
	}

	return pitch_output;
}
 80022a2:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <pid_calculate_pitch+0xd0>)
 80022a4:	ed93 0a00 	vldr	s0, [r3]
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20000330 	.word	0x20000330
 80022b0:	20000008 	.word	0x20000008
 80022b4:	20000498 	.word	0x20000498
 80022b8:	20000004 	.word	0x20000004
 80022bc:	3b012912 	.word	0x3b012912
 80022c0:	2000049c 	.word	0x2000049c
 80022c4:	20000334 	.word	0x20000334
 80022c8:	20000000 	.word	0x20000000
 80022cc:	20000490 	.word	0x20000490
 80022d0:	20000338 	.word	0x20000338
 80022d4:	2000000c 	.word	0x2000000c

080022d8 <reset_pid_pitch>:

void reset_pid_pitch(){

	pitch_p = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	4a04      	ldr	r2, [pc, #16]	; (80022ec <reset_pid_pitch+0x14>)
 80022dc:	6013      	str	r3, [r2, #0]
	pitch_i = 0;
 80022de:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <reset_pid_pitch+0x18>)
 80022e0:	6013      	str	r3, [r2, #0]
	pitch_d = 0;
 80022e2:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <reset_pid_pitch+0x1c>)
 80022e4:	6013      	str	r3, [r2, #0]
	pitch_output = 0;
 80022e6:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <reset_pid_pitch+0x20>)
 80022e8:	6013      	str	r3, [r2, #0]

}
 80022ea:	4770      	bx	lr
 80022ec:	20000498 	.word	0x20000498
 80022f0:	2000049c 	.word	0x2000049c
 80022f4:	20000490 	.word	0x20000490
 80022f8:	20000338 	.word	0x20000338

080022fc <reset_pid_yaw>:
	return yaw_output;
}

void reset_pid_yaw(){

	yaw_p = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	4a04      	ldr	r2, [pc, #16]	; (8002310 <reset_pid_yaw+0x14>)
 8002300:	6013      	str	r3, [r2, #0]
	yaw_i = 0;
 8002302:	4a04      	ldr	r2, [pc, #16]	; (8002314 <reset_pid_yaw+0x18>)
 8002304:	6013      	str	r3, [r2, #0]
	yaw_d = 0;
 8002306:	4a04      	ldr	r2, [pc, #16]	; (8002318 <reset_pid_yaw+0x1c>)
 8002308:	6013      	str	r3, [r2, #0]
	yaw_output = 0;
 800230a:	4a04      	ldr	r2, [pc, #16]	; (800231c <reset_pid_yaw+0x20>)
 800230c:	6013      	str	r3, [r2, #0]

}
 800230e:	4770      	bx	lr
 8002310:	200004a8 	.word	0x200004a8
 8002314:	200004a4 	.word	0x200004a4
 8002318:	20000494 	.word	0x20000494
 800231c:	20000348 	.word	0x20000348

08002320 <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002320:	4a06      	ldr	r2, [pc, #24]	; (800233c <DWT_Init+0x1c>)
 8002322:	68d3      	ldr	r3, [r2, #12]
 8002324:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002328:	60d3      	str	r3, [r2, #12]
        //DWT->LAR = 0xC5ACCE55;
        DWT->CYCCNT = 0;
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <DWT_Init+0x20>)
 800232c:	2200      	movs	r2, #0
 800232e:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]

}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000edf0 	.word	0xe000edf0
 8002340:	e0001000 	.word	0xe0001000

08002344 <DWT_Delay>:
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT,
 8002344:	4b07      	ldr	r3, [pc, #28]	; (8002364 <DWT_Delay+0x20>)
 8002346:	685a      	ldr	r2, [r3, #4]
             delayTicks = us * (SystemCoreClock/1000000);
 8002348:	4b07      	ldr	r3, [pc, #28]	; (8002368 <DWT_Delay+0x24>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4907      	ldr	r1, [pc, #28]	; (800236c <DWT_Delay+0x28>)
 800234e:	fba1 1303 	umull	r1, r3, r1, r3
 8002352:	0c9b      	lsrs	r3, r3, #18
 8002354:	fb00 f003 	mul.w	r0, r0, r3

    while (DWT->CYCCNT - startTick < delayTicks);
 8002358:	4b02      	ldr	r3, [pc, #8]	; (8002364 <DWT_Delay+0x20>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	4283      	cmp	r3, r0
 8002360:	d3fa      	bcc.n	8002358 <DWT_Delay+0x14>
}
 8002362:	4770      	bx	lr
 8002364:	e0001000 	.word	0xe0001000
 8002368:	20000090 	.word	0x20000090
 800236c:	431bde83 	.word	0x431bde83

08002370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002370:	b510      	push	{r4, lr}
 8002372:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002374:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <HAL_InitTick+0x40>)
 8002376:	7818      	ldrb	r0, [r3, #0]
 8002378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800237c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002380:	4a0c      	ldr	r2, [pc, #48]	; (80023b4 <HAL_InitTick+0x44>)
 8002382:	6810      	ldr	r0, [r2, #0]
 8002384:	fbb0 f0f3 	udiv	r0, r0, r3
 8002388:	f000 fa44 	bl	8002814 <HAL_SYSTICK_Config>
 800238c:	b968      	cbnz	r0, 80023aa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800238e:	2c0f      	cmp	r4, #15
 8002390:	d901      	bls.n	8002396 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002392:	2001      	movs	r0, #1
 8002394:	e00a      	b.n	80023ac <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002396:	2200      	movs	r2, #0
 8002398:	4621      	mov	r1, r4
 800239a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800239e:	f000 f9f7 	bl	8002790 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023a2:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <HAL_InitTick+0x48>)
 80023a4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023a6:	2000      	movs	r0, #0
 80023a8:	e000      	b.n	80023ac <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80023aa:	2001      	movs	r0, #1
}
 80023ac:	bd10      	pop	{r4, pc}
 80023ae:	bf00      	nop
 80023b0:	20000020 	.word	0x20000020
 80023b4:	20000090 	.word	0x20000090
 80023b8:	20000024 	.word	0x20000024

080023bc <HAL_Init>:
{
 80023bc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_Init+0x30>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023ce:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d8:	2003      	movs	r0, #3
 80023da:	f000 f9c7 	bl	800276c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80023de:	2000      	movs	r0, #0
 80023e0:	f7ff ffc6 	bl	8002370 <HAL_InitTick>
  HAL_MspInit();
 80023e4:	f004 fe60 	bl	80070a8 <HAL_MspInit>
}
 80023e8:	2000      	movs	r0, #0
 80023ea:	bd08      	pop	{r3, pc}
 80023ec:	40023c00 	.word	0x40023c00

080023f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80023f0:	4a03      	ldr	r2, [pc, #12]	; (8002400 <HAL_IncTick+0x10>)
 80023f2:	6811      	ldr	r1, [r2, #0]
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <HAL_IncTick+0x14>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	440b      	add	r3, r1
 80023fa:	6013      	str	r3, [r2, #0]
}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	200004b0 	.word	0x200004b0
 8002404:	20000020 	.word	0x20000020

08002408 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002408:	4b01      	ldr	r3, [pc, #4]	; (8002410 <HAL_GetTick+0x8>)
 800240a:	6818      	ldr	r0, [r3, #0]
}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	200004b0 	.word	0x200004b0

08002414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002414:	b538      	push	{r3, r4, r5, lr}
 8002416:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002418:	f7ff fff6 	bl	8002408 <HAL_GetTick>
 800241c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800241e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002422:	d002      	beq.n	800242a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <HAL_Delay+0x24>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800242a:	f7ff ffed 	bl	8002408 <HAL_GetTick>
 800242e:	1b40      	subs	r0, r0, r5
 8002430:	42a0      	cmp	r0, r4
 8002432:	d3fa      	bcc.n	800242a <HAL_Delay+0x16>
  {
  }
}
 8002434:	bd38      	pop	{r3, r4, r5, pc}
 8002436:	bf00      	nop
 8002438:	20000020 	.word	0x20000020

0800243c <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800243c:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <ADC_Init+0x12c>)
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002444:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	6841      	ldr	r1, [r0, #4]
 800244a:	430a      	orrs	r2, r1
 800244c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800244e:	6802      	ldr	r2, [r0, #0]
 8002450:	6853      	ldr	r3, [r2, #4]
 8002452:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002456:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002458:	6802      	ldr	r2, [r0, #0]
 800245a:	6853      	ldr	r3, [r2, #4]
 800245c:	6901      	ldr	r1, [r0, #16]
 800245e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002462:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002464:	6802      	ldr	r2, [r0, #0]
 8002466:	6853      	ldr	r3, [r2, #4]
 8002468:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800246c:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800246e:	6802      	ldr	r2, [r0, #0]
 8002470:	6853      	ldr	r3, [r2, #4]
 8002472:	6881      	ldr	r1, [r0, #8]
 8002474:	430b      	orrs	r3, r1
 8002476:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002478:	6802      	ldr	r2, [r0, #0]
 800247a:	6893      	ldr	r3, [r2, #8]
 800247c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002480:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002482:	6802      	ldr	r2, [r0, #0]
 8002484:	6893      	ldr	r3, [r2, #8]
 8002486:	68c1      	ldr	r1, [r0, #12]
 8002488:	430b      	orrs	r3, r1
 800248a:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800248c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800248e:	4b37      	ldr	r3, [pc, #220]	; (800256c <ADC_Init+0x130>)
 8002490:	429a      	cmp	r2, r3
 8002492:	d04b      	beq.n	800252c <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002494:	6802      	ldr	r2, [r0, #0]
 8002496:	6893      	ldr	r3, [r2, #8]
 8002498:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800249c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800249e:	6802      	ldr	r2, [r0, #0]
 80024a0:	6893      	ldr	r3, [r2, #8]
 80024a2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80024a4:	430b      	orrs	r3, r1
 80024a6:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024a8:	6802      	ldr	r2, [r0, #0]
 80024aa:	6893      	ldr	r3, [r2, #8]
 80024ac:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80024b0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024b2:	6802      	ldr	r2, [r0, #0]
 80024b4:	6893      	ldr	r3, [r2, #8]
 80024b6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80024b8:	430b      	orrs	r3, r1
 80024ba:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024bc:	6802      	ldr	r2, [r0, #0]
 80024be:	6893      	ldr	r3, [r2, #8]
 80024c0:	f023 0302 	bic.w	r3, r3, #2
 80024c4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024c6:	6802      	ldr	r2, [r0, #0]
 80024c8:	6893      	ldr	r3, [r2, #8]
 80024ca:	7e01      	ldrb	r1, [r0, #24]
 80024cc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80024d0:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024d2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d133      	bne.n	8002542 <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024da:	6802      	ldr	r2, [r0, #0]
 80024dc:	6853      	ldr	r3, [r2, #4]
 80024de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024e2:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024e4:	6802      	ldr	r2, [r0, #0]
 80024e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80024e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80024ec:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024ee:	6801      	ldr	r1, [r0, #0]
 80024f0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80024f2:	69c2      	ldr	r2, [r0, #28]
 80024f4:	3a01      	subs	r2, #1
 80024f6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80024fa:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024fc:	6802      	ldr	r2, [r0, #0]
 80024fe:	6893      	ldr	r3, [r2, #8]
 8002500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002504:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002506:	6802      	ldr	r2, [r0, #0]
 8002508:	6893      	ldr	r3, [r2, #8]
 800250a:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 800250e:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8002512:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002514:	6802      	ldr	r2, [r0, #0]
 8002516:	6893      	ldr	r3, [r2, #8]
 8002518:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800251c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800251e:	6802      	ldr	r2, [r0, #0]
 8002520:	6893      	ldr	r3, [r2, #8]
 8002522:	6941      	ldr	r1, [r0, #20]
 8002524:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002528:	6093      	str	r3, [r2, #8]
}
 800252a:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800252c:	6802      	ldr	r2, [r0, #0]
 800252e:	6893      	ldr	r3, [r2, #8]
 8002530:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002534:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002536:	6802      	ldr	r2, [r0, #0]
 8002538:	6893      	ldr	r3, [r2, #8]
 800253a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800253e:	6093      	str	r3, [r2, #8]
 8002540:	e7bc      	b.n	80024bc <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002542:	6802      	ldr	r2, [r0, #0]
 8002544:	6853      	ldr	r3, [r2, #4]
 8002546:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800254a:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800254c:	6802      	ldr	r2, [r0, #0]
 800254e:	6853      	ldr	r3, [r2, #4]
 8002550:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002554:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002556:	6801      	ldr	r1, [r0, #0]
 8002558:	684b      	ldr	r3, [r1, #4]
 800255a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800255c:	3a01      	subs	r2, #1
 800255e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002562:	604b      	str	r3, [r1, #4]
 8002564:	e7be      	b.n	80024e4 <ADC_Init+0xa8>
 8002566:	bf00      	nop
 8002568:	40012300 	.word	0x40012300
 800256c:	0f000001 	.word	0x0f000001

08002570 <HAL_ADC_Init>:
  if(hadc == NULL)
 8002570:	b338      	cbz	r0, 80025c2 <HAL_ADC_Init+0x52>
{
 8002572:	b510      	push	{r4, lr}
 8002574:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002576:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002578:	b143      	cbz	r3, 800258c <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800257a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800257c:	f013 0f10 	tst.w	r3, #16
 8002580:	d00b      	beq.n	800259a <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8002582:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002584:	2300      	movs	r3, #0
 8002586:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800258a:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 800258c:	f004 fda8 	bl	80070e0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002590:	2300      	movs	r3, #0
 8002592:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8002594:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002598:	e7ef      	b.n	800257a <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 800259a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800259c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025a0:	f023 0302 	bic.w	r3, r3, #2
 80025a4:	f043 0302 	orr.w	r3, r3, #2
 80025a8:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80025aa:	4620      	mov	r0, r4
 80025ac:	f7ff ff46 	bl	800243c <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80025b0:	2000      	movs	r0, #0
 80025b2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80025b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025b6:	f023 0303 	bic.w	r3, r3, #3
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6423      	str	r3, [r4, #64]	; 0x40
 80025c0:	e7e0      	b.n	8002584 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80025c2:	2001      	movs	r0, #1
}
 80025c4:	4770      	bx	lr
	...

080025c8 <HAL_ADC_ConfigChannel>:
{
 80025c8:	b430      	push	{r4, r5}
 80025ca:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80025d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	f000 80bd 	beq.w	8002754 <HAL_ADC_ConfigChannel+0x18c>
 80025da:	2301      	movs	r3, #1
 80025dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025e0:	680b      	ldr	r3, [r1, #0]
 80025e2:	2b09      	cmp	r3, #9
 80025e4:	d93e      	bls.n	8002664 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025e6:	6805      	ldr	r5, [r0, #0]
 80025e8:	68ea      	ldr	r2, [r5, #12]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80025f0:	3b1e      	subs	r3, #30
 80025f2:	2407      	movs	r4, #7
 80025f4:	fa04 f303 	lsl.w	r3, r4, r3
 80025f8:	ea22 0303 	bic.w	r3, r2, r3
 80025fc:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025fe:	6805      	ldr	r5, [r0, #0]
 8002600:	68ea      	ldr	r2, [r5, #12]
 8002602:	688c      	ldr	r4, [r1, #8]
 8002604:	880b      	ldrh	r3, [r1, #0]
 8002606:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800260a:	3b1e      	subs	r3, #30
 800260c:	fa04 f303 	lsl.w	r3, r4, r3
 8002610:	4313      	orrs	r3, r2
 8002612:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8002614:	684b      	ldr	r3, [r1, #4]
 8002616:	2b06      	cmp	r3, #6
 8002618:	d83a      	bhi.n	8002690 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800261a:	6805      	ldr	r5, [r0, #0]
 800261c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800261e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002622:	3b05      	subs	r3, #5
 8002624:	241f      	movs	r4, #31
 8002626:	fa04 f303 	lsl.w	r3, r4, r3
 800262a:	ea22 0303 	bic.w	r3, r2, r3
 800262e:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002630:	6805      	ldr	r5, [r0, #0]
 8002632:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002634:	684b      	ldr	r3, [r1, #4]
 8002636:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800263a:	3b05      	subs	r3, #5
 800263c:	880c      	ldrh	r4, [r1, #0]
 800263e:	fa04 f303 	lsl.w	r3, r4, r3
 8002642:	4313      	orrs	r3, r2
 8002644:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002646:	6802      	ldr	r2, [r0, #0]
 8002648:	4b43      	ldr	r3, [pc, #268]	; (8002758 <HAL_ADC_ConfigChannel+0x190>)
 800264a:	429a      	cmp	r2, r3
 800264c:	d050      	beq.n	80026f0 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800264e:	6802      	ldr	r2, [r0, #0]
 8002650:	4b41      	ldr	r3, [pc, #260]	; (8002758 <HAL_ADC_ConfigChannel+0x190>)
 8002652:	429a      	cmp	r2, r3
 8002654:	d059      	beq.n	800270a <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 8002656:	2300      	movs	r3, #0
 8002658:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800265c:	4618      	mov	r0, r3
}
 800265e:	b002      	add	sp, #8
 8002660:	bc30      	pop	{r4, r5}
 8002662:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002664:	6805      	ldr	r5, [r0, #0]
 8002666:	692a      	ldr	r2, [r5, #16]
 8002668:	b29b      	uxth	r3, r3
 800266a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800266e:	2407      	movs	r4, #7
 8002670:	fa04 f303 	lsl.w	r3, r4, r3
 8002674:	ea22 0303 	bic.w	r3, r2, r3
 8002678:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800267a:	6805      	ldr	r5, [r0, #0]
 800267c:	692a      	ldr	r2, [r5, #16]
 800267e:	688c      	ldr	r4, [r1, #8]
 8002680:	880b      	ldrh	r3, [r1, #0]
 8002682:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002686:	fa04 f303 	lsl.w	r3, r4, r3
 800268a:	4313      	orrs	r3, r2
 800268c:	612b      	str	r3, [r5, #16]
 800268e:	e7c1      	b.n	8002614 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8002690:	2b0c      	cmp	r3, #12
 8002692:	d816      	bhi.n	80026c2 <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002694:	6805      	ldr	r5, [r0, #0]
 8002696:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002698:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800269c:	3b23      	subs	r3, #35	; 0x23
 800269e:	241f      	movs	r4, #31
 80026a0:	fa04 f303 	lsl.w	r3, r4, r3
 80026a4:	ea22 0303 	bic.w	r3, r2, r3
 80026a8:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026aa:	6805      	ldr	r5, [r0, #0]
 80026ac:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80026ae:	684b      	ldr	r3, [r1, #4]
 80026b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026b4:	3b23      	subs	r3, #35	; 0x23
 80026b6:	880c      	ldrh	r4, [r1, #0]
 80026b8:	fa04 f303 	lsl.w	r3, r4, r3
 80026bc:	4313      	orrs	r3, r2
 80026be:	632b      	str	r3, [r5, #48]	; 0x30
 80026c0:	e7c1      	b.n	8002646 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026c2:	6805      	ldr	r5, [r0, #0]
 80026c4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80026c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026ca:	3b41      	subs	r3, #65	; 0x41
 80026cc:	241f      	movs	r4, #31
 80026ce:	fa04 f303 	lsl.w	r3, r4, r3
 80026d2:	ea22 0303 	bic.w	r3, r2, r3
 80026d6:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026d8:	6805      	ldr	r5, [r0, #0]
 80026da:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80026dc:	684b      	ldr	r3, [r1, #4]
 80026de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026e2:	3b41      	subs	r3, #65	; 0x41
 80026e4:	880c      	ldrh	r4, [r1, #0]
 80026e6:	fa04 f303 	lsl.w	r3, r4, r3
 80026ea:	4313      	orrs	r3, r2
 80026ec:	62eb      	str	r3, [r5, #44]	; 0x2c
 80026ee:	e7aa      	b.n	8002646 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026f0:	680b      	ldr	r3, [r1, #0]
 80026f2:	2b12      	cmp	r3, #18
 80026f4:	d1ab      	bne.n	800264e <HAL_ADC_ConfigChannel+0x86>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026f6:	4b19      	ldr	r3, [pc, #100]	; (800275c <HAL_ADC_ConfigChannel+0x194>)
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80026fe:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	e7a1      	b.n	800264e <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800270a:	680b      	ldr	r3, [r1, #0]
 800270c:	4a14      	ldr	r2, [pc, #80]	; (8002760 <HAL_ADC_ConfigChannel+0x198>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d001      	beq.n	8002716 <HAL_ADC_ConfigChannel+0x14e>
 8002712:	2b11      	cmp	r3, #17
 8002714:	d19f      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_ADC_ConfigChannel+0x194>)
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800271e:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002726:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002728:	680a      	ldr	r2, [r1, #0]
 800272a:	4b0d      	ldr	r3, [pc, #52]	; (8002760 <HAL_ADC_ConfigChannel+0x198>)
 800272c:	429a      	cmp	r2, r3
 800272e:	d192      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <HAL_ADC_ConfigChannel+0x19c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0c      	ldr	r2, [pc, #48]	; (8002768 <HAL_ADC_ConfigChannel+0x1a0>)
 8002736:	fba2 2303 	umull	r2, r3, r2, r3
 800273a:	0c9b      	lsrs	r3, r3, #18
 800273c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002740:	005a      	lsls	r2, r3, #1
 8002742:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8002744:	e002      	b.n	800274c <HAL_ADC_ConfigChannel+0x184>
        counter--;
 8002746:	9b01      	ldr	r3, [sp, #4]
 8002748:	3b01      	subs	r3, #1
 800274a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800274c:	9b01      	ldr	r3, [sp, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f9      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x17e>
 8002752:	e780      	b.n	8002656 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8002754:	2002      	movs	r0, #2
 8002756:	e782      	b.n	800265e <HAL_ADC_ConfigChannel+0x96>
 8002758:	40012000 	.word	0x40012000
 800275c:	40012300 	.word	0x40012300
 8002760:	10000012 	.word	0x10000012
 8002764:	20000090 	.word	0x20000090
 8002768:	431bde83 	.word	0x431bde83

0800276c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800276c:	4a07      	ldr	r2, [pc, #28]	; (800278c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800276e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002770:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002774:	041b      	lsls	r3, r3, #16
 8002776:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002778:	0200      	lsls	r0, r0, #8
 800277a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800277e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8002780:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8002784:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002788:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002790:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002792:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <HAL_NVIC_SetPriority+0x60>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800279a:	f1c3 0407 	rsb	r4, r3, #7
 800279e:	2c04      	cmp	r4, #4
 80027a0:	bf28      	it	cs
 80027a2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a4:	1d1d      	adds	r5, r3, #4
 80027a6:	2d06      	cmp	r5, #6
 80027a8:	d918      	bls.n	80027dc <HAL_NVIC_SetPriority+0x4c>
 80027aa:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80027b0:	fa05 f404 	lsl.w	r4, r5, r4
 80027b4:	ea21 0104 	bic.w	r1, r1, r4
 80027b8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ba:	fa05 f303 	lsl.w	r3, r5, r3
 80027be:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80027c4:	2800      	cmp	r0, #0
 80027c6:	db0b      	blt.n	80027e0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c8:	0109      	lsls	r1, r1, #4
 80027ca:	b2c9      	uxtb	r1, r1
 80027cc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80027d0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80027d4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80027d8:	bc30      	pop	{r4, r5}
 80027da:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027dc:	2300      	movs	r3, #0
 80027de:	e7e5      	b.n	80027ac <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e0:	f000 000f 	and.w	r0, r0, #15
 80027e4:	0109      	lsls	r1, r1, #4
 80027e6:	b2c9      	uxtb	r1, r1
 80027e8:	4b02      	ldr	r3, [pc, #8]	; (80027f4 <HAL_NVIC_SetPriority+0x64>)
 80027ea:	5419      	strb	r1, [r3, r0]
 80027ec:	e7f4      	b.n	80027d8 <HAL_NVIC_SetPriority+0x48>
 80027ee:	bf00      	nop
 80027f0:	e000ed00 	.word	0xe000ed00
 80027f4:	e000ed14 	.word	0xe000ed14

080027f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80027f8:	2800      	cmp	r0, #0
 80027fa:	db07      	blt.n	800280c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027fc:	f000 021f 	and.w	r2, r0, #31
 8002800:	0940      	lsrs	r0, r0, #5
 8002802:	2301      	movs	r3, #1
 8002804:	4093      	lsls	r3, r2
 8002806:	4a02      	ldr	r2, [pc, #8]	; (8002810 <HAL_NVIC_EnableIRQ+0x18>)
 8002808:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000e100 	.word	0xe000e100

08002814 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002814:	3801      	subs	r0, #1
 8002816:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800281a:	d20a      	bcs.n	8002832 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_SYSTICK_Config+0x24>)
 800281e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002820:	4a06      	ldr	r2, [pc, #24]	; (800283c <HAL_SYSTICK_Config+0x28>)
 8002822:	21f0      	movs	r1, #240	; 0xf0
 8002824:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002828:	2000      	movs	r0, #0
 800282a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282c:	2207      	movs	r2, #7
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002832:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000e010 	.word	0xe000e010
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002840:	2300      	movs	r3, #0
 8002842:	2b0f      	cmp	r3, #15
 8002844:	f200 80c5 	bhi.w	80029d2 <HAL_GPIO_Init+0x192>
{
 8002848:	b4f0      	push	{r4, r5, r6, r7}
 800284a:	b082      	sub	sp, #8
 800284c:	e039      	b.n	80028c2 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800284e:	2204      	movs	r2, #4
 8002850:	e000      	b.n	8002854 <HAL_GPIO_Init+0x14>
 8002852:	2200      	movs	r2, #0
 8002854:	40b2      	lsls	r2, r6
 8002856:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002858:	3402      	adds	r4, #2
 800285a:	4e5e      	ldr	r6, [pc, #376]	; (80029d4 <HAL_GPIO_Init+0x194>)
 800285c:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002860:	4a5d      	ldr	r2, [pc, #372]	; (80029d8 <HAL_GPIO_Init+0x198>)
 8002862:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002864:	43ea      	mvns	r2, r5
 8002866:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800286a:	684f      	ldr	r7, [r1, #4]
 800286c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8002870:	d001      	beq.n	8002876 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8002872:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8002876:	4c58      	ldr	r4, [pc, #352]	; (80029d8 <HAL_GPIO_Init+0x198>)
 8002878:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 800287a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 800287c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002880:	684f      	ldr	r7, [r1, #4]
 8002882:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002886:	d001      	beq.n	800288c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8002888:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 800288c:	4c52      	ldr	r4, [pc, #328]	; (80029d8 <HAL_GPIO_Init+0x198>)
 800288e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002890:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002892:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002896:	684f      	ldr	r7, [r1, #4]
 8002898:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800289c:	d001      	beq.n	80028a2 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 800289e:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80028a2:	4c4d      	ldr	r4, [pc, #308]	; (80029d8 <HAL_GPIO_Init+0x198>)
 80028a4:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80028a6:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80028a8:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028aa:	684e      	ldr	r6, [r1, #4]
 80028ac:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80028b0:	d001      	beq.n	80028b6 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80028b2:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 80028b6:	4c48      	ldr	r4, [pc, #288]	; (80029d8 <HAL_GPIO_Init+0x198>)
 80028b8:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ba:	3301      	adds	r3, #1
 80028bc:	2b0f      	cmp	r3, #15
 80028be:	f200 8085 	bhi.w	80029cc <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 80028c2:	2201      	movs	r2, #1
 80028c4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028c6:	680c      	ldr	r4, [r1, #0]
 80028c8:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80028cc:	42aa      	cmp	r2, r5
 80028ce:	d1f4      	bne.n	80028ba <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028d0:	684c      	ldr	r4, [r1, #4]
 80028d2:	2c02      	cmp	r4, #2
 80028d4:	d001      	beq.n	80028da <HAL_GPIO_Init+0x9a>
 80028d6:	2c12      	cmp	r4, #18
 80028d8:	d110      	bne.n	80028fc <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 80028da:	08de      	lsrs	r6, r3, #3
 80028dc:	3608      	adds	r6, #8
 80028de:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028e2:	f003 0407 	and.w	r4, r3, #7
 80028e6:	00a7      	lsls	r7, r4, #2
 80028e8:	240f      	movs	r4, #15
 80028ea:	40bc      	lsls	r4, r7
 80028ec:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028f0:	690c      	ldr	r4, [r1, #16]
 80028f2:	40bc      	lsls	r4, r7
 80028f4:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 80028f8:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80028fc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028fe:	005f      	lsls	r7, r3, #1
 8002900:	2603      	movs	r6, #3
 8002902:	40be      	lsls	r6, r7
 8002904:	43f6      	mvns	r6, r6
 8002906:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800290a:	684c      	ldr	r4, [r1, #4]
 800290c:	f004 0403 	and.w	r4, r4, #3
 8002910:	40bc      	lsls	r4, r7
 8002912:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002916:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002918:	684c      	ldr	r4, [r1, #4]
 800291a:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800291e:	f1bc 0f01 	cmp.w	ip, #1
 8002922:	d903      	bls.n	800292c <HAL_GPIO_Init+0xec>
 8002924:	2c11      	cmp	r4, #17
 8002926:	d001      	beq.n	800292c <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002928:	2c12      	cmp	r4, #18
 800292a:	d110      	bne.n	800294e <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 800292c:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800292e:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002932:	68cc      	ldr	r4, [r1, #12]
 8002934:	40bc      	lsls	r4, r7
 8002936:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 800293a:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 800293c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800293e:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002942:	684c      	ldr	r4, [r1, #4]
 8002944:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002948:	409c      	lsls	r4, r3
 800294a:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 800294c:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 800294e:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002950:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002952:	688a      	ldr	r2, [r1, #8]
 8002954:	40ba      	lsls	r2, r7
 8002956:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8002958:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800295a:	684a      	ldr	r2, [r1, #4]
 800295c:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8002960:	d0ab      	beq.n	80028ba <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002962:	2200      	movs	r2, #0
 8002964:	9201      	str	r2, [sp, #4]
 8002966:	4a1d      	ldr	r2, [pc, #116]	; (80029dc <HAL_GPIO_Init+0x19c>)
 8002968:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800296a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800296e:	6454      	str	r4, [r2, #68]	; 0x44
 8002970:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002972:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002976:	9201      	str	r2, [sp, #4]
 8002978:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800297a:	089c      	lsrs	r4, r3, #2
 800297c:	1ca6      	adds	r6, r4, #2
 800297e:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <HAL_GPIO_Init+0x194>)
 8002980:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002984:	f003 0203 	and.w	r2, r3, #3
 8002988:	0096      	lsls	r6, r2, #2
 800298a:	220f      	movs	r2, #15
 800298c:	40b2      	lsls	r2, r6
 800298e:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002992:	4a13      	ldr	r2, [pc, #76]	; (80029e0 <HAL_GPIO_Init+0x1a0>)
 8002994:	4290      	cmp	r0, r2
 8002996:	f43f af5c 	beq.w	8002852 <HAL_GPIO_Init+0x12>
 800299a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800299e:	4290      	cmp	r0, r2
 80029a0:	d00e      	beq.n	80029c0 <HAL_GPIO_Init+0x180>
 80029a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029a6:	4290      	cmp	r0, r2
 80029a8:	d00c      	beq.n	80029c4 <HAL_GPIO_Init+0x184>
 80029aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029ae:	4290      	cmp	r0, r2
 80029b0:	d00a      	beq.n	80029c8 <HAL_GPIO_Init+0x188>
 80029b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029b6:	4290      	cmp	r0, r2
 80029b8:	f43f af49 	beq.w	800284e <HAL_GPIO_Init+0xe>
 80029bc:	2207      	movs	r2, #7
 80029be:	e749      	b.n	8002854 <HAL_GPIO_Init+0x14>
 80029c0:	2201      	movs	r2, #1
 80029c2:	e747      	b.n	8002854 <HAL_GPIO_Init+0x14>
 80029c4:	2202      	movs	r2, #2
 80029c6:	e745      	b.n	8002854 <HAL_GPIO_Init+0x14>
 80029c8:	2203      	movs	r2, #3
 80029ca:	e743      	b.n	8002854 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80029cc:	b002      	add	sp, #8
 80029ce:	bcf0      	pop	{r4, r5, r6, r7}
 80029d0:	4770      	bx	lr
 80029d2:	4770      	bx	lr
 80029d4:	40013800 	.word	0x40013800
 80029d8:	40013c00 	.word	0x40013c00
 80029dc:	40023800 	.word	0x40023800
 80029e0:	40020000 	.word	0x40020000

080029e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029e4:	b912      	cbnz	r2, 80029ec <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029e6:	0409      	lsls	r1, r1, #16
 80029e8:	6181      	str	r1, [r0, #24]
  }
}
 80029ea:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 80029ec:	6181      	str	r1, [r0, #24]
 80029ee:	4770      	bx	lr

080029f0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80029f0:	6943      	ldr	r3, [r0, #20]
 80029f2:	ea31 0303 	bics.w	r3, r1, r3
 80029f6:	d001      	beq.n	80029fc <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80029f8:	6181      	str	r1, [r0, #24]
  }
}
 80029fa:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029fc:	0409      	lsls	r1, r1, #16
 80029fe:	6181      	str	r1, [r0, #24]
 8002a00:	4770      	bx	lr
	...

08002a04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a04:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a06:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	4203      	tst	r3, r0
 8002a0c:	d100      	bne.n	8002a10 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8002a0e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a10:	4b02      	ldr	r3, [pc, #8]	; (8002a1c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002a12:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a14:	f004 fb3a 	bl	800708c <HAL_GPIO_EXTI_Callback>
}
 8002a18:	e7f9      	b.n	8002a0e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002a1a:	bf00      	nop
 8002a1c:	40013c00 	.word	0x40013c00

08002a20 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a20:	6803      	ldr	r3, [r0, #0]
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002a28:	d011      	beq.n	8002a4e <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a2e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a34:	2220      	movs	r2, #32
 8002a36:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a3a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a3e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002a40:	f042 0204 	orr.w	r2, r2, #4
 8002a44:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	4770      	bx	lr
  }
  return HAL_OK;
 8002a4e:	2000      	movs	r0, #0
}
 8002a50:	4770      	bx	lr

08002a52 <I2C_WaitOnFlagUntilTimeout>:
{
 8002a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a54:	4606      	mov	r6, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	4617      	mov	r7, r2
 8002a5a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a5c:	e022      	b.n	8002aa4 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a5e:	f7ff fcd3 	bl	8002408 <HAL_GetTick>
 8002a62:	9b06      	ldr	r3, [sp, #24]
 8002a64:	1ac0      	subs	r0, r0, r3
 8002a66:	42a8      	cmp	r0, r5
 8002a68:	d800      	bhi.n	8002a6c <I2C_WaitOnFlagUntilTimeout+0x1a>
 8002a6a:	b9dd      	cbnz	r5, 8002aa4 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a70:	2220      	movs	r2, #32
 8002a72:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a76:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a7a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8002a7c:	f042 0220 	orr.w	r2, r2, #32
 8002a80:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002a82:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8002a86:	2001      	movs	r0, #1
 8002a88:	e01a      	b.n	8002ac0 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a8a:	6833      	ldr	r3, [r6, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	ea24 0303 	bic.w	r3, r4, r3
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	095b      	lsrs	r3, r3, #5
 8002a9a:	429f      	cmp	r7, r3
 8002a9c:	d10f      	bne.n	8002abe <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8002a9e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002aa2:	d1dc      	bne.n	8002a5e <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aa4:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d0ee      	beq.n	8002a8a <I2C_WaitOnFlagUntilTimeout+0x38>
 8002aac:	6833      	ldr	r3, [r6, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	ea24 0303 	bic.w	r3, r4, r3
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	e7ed      	b.n	8002a9a <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8002abe:	2000      	movs	r0, #0
}
 8002ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002ac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac4:	4604      	mov	r4, r0
 8002ac6:	460d      	mov	r5, r1
 8002ac8:	4616      	mov	r6, r2
 8002aca:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002acc:	e03c      	b.n	8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002adc:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002aee:	f042 0204 	orr.w	r2, r2, #4
 8002af2:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002af4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8002af8:	2001      	movs	r0, #1
 8002afa:	e033      	b.n	8002b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afc:	f7ff fc84 	bl	8002408 <HAL_GetTick>
 8002b00:	1bc0      	subs	r0, r0, r7
 8002b02:	42b0      	cmp	r0, r6
 8002b04:	d800      	bhi.n	8002b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8002b06:	b9fe      	cbnz	r6, 8002b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b12:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b16:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b18:	f042 0220 	orr.w	r2, r2, #32
 8002b1c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002b1e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002b22:	2001      	movs	r0, #1
 8002b24:	e01e      	b.n	8002b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	ea25 0303 	bic.w	r3, r5, r3
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3300      	adds	r3, #0
 8002b32:	bf18      	it	ne
 8002b34:	2301      	movne	r3, #1
 8002b36:	b1a3      	cbz	r3, 8002b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002b40:	d1c5      	bne.n	8002ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8002b42:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8002b46:	d1d9      	bne.n	8002afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b48:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d0ea      	beq.n	8002b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	ea25 0303 	bic.w	r3, r5, r3
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	3300      	adds	r3, #0
 8002b5c:	bf18      	it	ne
 8002b5e:	2301      	movne	r3, #1
 8002b60:	e7e9      	b.n	8002b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8002b62:	2000      	movs	r0, #0
}
 8002b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002b68 <I2C_MasterRequestWrite>:
{
 8002b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	4604      	mov	r4, r0
 8002b6e:	460f      	mov	r7, r1
 8002b70:	4615      	mov	r5, r2
 8002b72:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b74:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d00d      	beq.n	8002b96 <I2C_MasterRequestWrite+0x2e>
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d00b      	beq.n	8002b96 <I2C_MasterRequestWrite+0x2e>
 8002b7e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b82:	d008      	beq.n	8002b96 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b84:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002b86:	2b12      	cmp	r3, #18
 8002b88:	d10a      	bne.n	8002ba0 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b8a:	6802      	ldr	r2, [r0, #0]
 8002b8c:	6813      	ldr	r3, [r2, #0]
 8002b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	e004      	b.n	8002ba0 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b96:	6822      	ldr	r2, [r4, #0]
 8002b98:	6813      	ldr	r3, [r2, #0]
 8002b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9e:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba0:	9600      	str	r6, [sp, #0]
 8002ba2:	462b      	mov	r3, r5
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002baa:	4620      	mov	r0, r4
 8002bac:	f7ff ff51 	bl	8002a52 <I2C_WaitOnFlagUntilTimeout>
 8002bb0:	bb18      	cbnz	r0, 8002bfa <I2C_MasterRequestWrite+0x92>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bb2:	6923      	ldr	r3, [r4, #16]
 8002bb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bb8:	d10d      	bne.n	8002bd6 <I2C_MasterRequestWrite+0x6e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bba:	6823      	ldr	r3, [r4, #0]
 8002bbc:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8002bc0:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bc2:	4633      	mov	r3, r6
 8002bc4:	462a      	mov	r2, r5
 8002bc6:	4910      	ldr	r1, [pc, #64]	; (8002c08 <I2C_MasterRequestWrite+0xa0>)
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f7ff ff7a 	bl	8002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	b1a0      	cbz	r0, 8002bfc <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e012      	b.n	8002bfc <I2C_MasterRequestWrite+0x94>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bd6:	11fb      	asrs	r3, r7, #7
 8002bd8:	6822      	ldr	r2, [r4, #0]
 8002bda:	f003 0306 	and.w	r3, r3, #6
 8002bde:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002be2:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002be4:	4633      	mov	r3, r6
 8002be6:	462a      	mov	r2, r5
 8002be8:	4908      	ldr	r1, [pc, #32]	; (8002c0c <I2C_MasterRequestWrite+0xa4>)
 8002bea:	4620      	mov	r0, r4
 8002bec:	f7ff ff69 	bl	8002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bf0:	b938      	cbnz	r0, 8002c02 <I2C_MasterRequestWrite+0x9a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bf2:	6823      	ldr	r3, [r4, #0]
 8002bf4:	b2ff      	uxtb	r7, r7
 8002bf6:	611f      	str	r7, [r3, #16]
 8002bf8:	e7e3      	b.n	8002bc2 <I2C_MasterRequestWrite+0x5a>
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	b003      	add	sp, #12
 8002c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e7fa      	b.n	8002bfc <I2C_MasterRequestWrite+0x94>
 8002c06:	bf00      	nop
 8002c08:	00010002 	.word	0x00010002
 8002c0c:	00010008 	.word	0x00010008

08002c10 <I2C_MasterRequestRead>:
{
 8002c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	4604      	mov	r4, r0
 8002c18:	460d      	mov	r5, r1
 8002c1a:	4616      	mov	r6, r2
 8002c1c:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c1e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c20:	6801      	ldr	r1, [r0, #0]
 8002c22:	680b      	ldr	r3, [r1, #0]
 8002c24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c28:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c2a:	2a08      	cmp	r2, #8
 8002c2c:	d00d      	beq.n	8002c4a <I2C_MasterRequestRead+0x3a>
 8002c2e:	2a01      	cmp	r2, #1
 8002c30:	d00b      	beq.n	8002c4a <I2C_MasterRequestRead+0x3a>
 8002c32:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002c36:	d008      	beq.n	8002c4a <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002c38:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002c3a:	2b11      	cmp	r3, #17
 8002c3c:	d10a      	bne.n	8002c54 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c3e:	6802      	ldr	r2, [r0, #0]
 8002c40:	6813      	ldr	r3, [r2, #0]
 8002c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	e004      	b.n	8002c54 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c4a:	6822      	ldr	r2, [r4, #0]
 8002c4c:	6813      	ldr	r3, [r2, #0]
 8002c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c52:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c54:	9700      	str	r7, [sp, #0]
 8002c56:	4633      	mov	r3, r6
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f7ff fef7 	bl	8002a52 <I2C_WaitOnFlagUntilTimeout>
 8002c64:	2800      	cmp	r0, #0
 8002c66:	d149      	bne.n	8002cfc <I2C_MasterRequestRead+0xec>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c68:	6923      	ldr	r3, [r4, #16]
 8002c6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c6e:	d10f      	bne.n	8002c90 <I2C_MasterRequestRead+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	f045 0501 	orr.w	r5, r5, #1
 8002c76:	b2ed      	uxtb	r5, r5
 8002c78:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c7a:	463b      	mov	r3, r7
 8002c7c:	4632      	mov	r2, r6
 8002c7e:	4923      	ldr	r1, [pc, #140]	; (8002d0c <I2C_MasterRequestRead+0xfc>)
 8002c80:	4620      	mov	r0, r4
 8002c82:	f7ff ff1e 	bl	8002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2800      	cmp	r0, #0
 8002c8a:	d038      	beq.n	8002cfe <I2C_MasterRequestRead+0xee>
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e036      	b.n	8002cfe <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c90:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8002c94:	f008 0806 	and.w	r8, r8, #6
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8002c9e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ca0:	463b      	mov	r3, r7
 8002ca2:	4632      	mov	r2, r6
 8002ca4:	491a      	ldr	r1, [pc, #104]	; (8002d10 <I2C_MasterRequestRead+0x100>)
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	f7ff ff0b 	bl	8002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cac:	b108      	cbz	r0, 8002cb2 <I2C_MasterRequestRead+0xa2>
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e025      	b.n	8002cfe <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cb2:	6823      	ldr	r3, [r4, #0]
 8002cb4:	b2ed      	uxtb	r5, r5
 8002cb6:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cb8:	463b      	mov	r3, r7
 8002cba:	4632      	mov	r2, r6
 8002cbc:	4913      	ldr	r1, [pc, #76]	; (8002d0c <I2C_MasterRequestRead+0xfc>)
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	f7ff feff 	bl	8002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cc4:	b108      	cbz	r0, 8002cca <I2C_MasterRequestRead+0xba>
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e019      	b.n	8002cfe <I2C_MasterRequestRead+0xee>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	9203      	str	r2, [sp, #12]
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	6959      	ldr	r1, [r3, #20]
 8002cd2:	9103      	str	r1, [sp, #12]
 8002cd4:	6999      	ldr	r1, [r3, #24]
 8002cd6:	9103      	str	r1, [sp, #12]
 8002cd8:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cda:	6819      	ldr	r1, [r3, #0]
 8002cdc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002ce0:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce2:	9700      	str	r7, [sp, #0]
 8002ce4:	4633      	mov	r3, r6
 8002ce6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cea:	4620      	mov	r0, r4
 8002cec:	f7ff feb1 	bl	8002a52 <I2C_WaitOnFlagUntilTimeout>
 8002cf0:	b948      	cbnz	r0, 8002d06 <I2C_MasterRequestRead+0xf6>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002cf2:	6822      	ldr	r2, [r4, #0]
 8002cf4:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8002cf8:	6113      	str	r3, [r2, #16]
 8002cfa:	e7be      	b.n	8002c7a <I2C_MasterRequestRead+0x6a>
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	b004      	add	sp, #16
 8002d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e7f9      	b.n	8002cfe <I2C_MasterRequestRead+0xee>
 8002d0a:	bf00      	nop
 8002d0c:	00010002 	.word	0x00010002
 8002d10:	00010008 	.word	0x00010008

08002d14 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	4604      	mov	r4, r0
 8002d18:	460d      	mov	r5, r1
 8002d1a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002d24:	d11c      	bne.n	8002d60 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d26:	4620      	mov	r0, r4
 8002d28:	f7ff fe7a 	bl	8002a20 <I2C_IsAcknowledgeFailed>
 8002d2c:	b9d0      	cbnz	r0, 8002d64 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002d2e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002d32:	d0f3      	beq.n	8002d1c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d34:	f7ff fb68 	bl	8002408 <HAL_GetTick>
 8002d38:	1b80      	subs	r0, r0, r6
 8002d3a:	42a8      	cmp	r0, r5
 8002d3c:	d801      	bhi.n	8002d42 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002d3e:	2d00      	cmp	r5, #0
 8002d40:	d1ec      	bne.n	8002d1c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d46:	2220      	movs	r2, #32
 8002d48:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d4c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d50:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002d52:	f042 0220 	orr.w	r2, r2, #32
 8002d56:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002d58:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002d5c:	2001      	movs	r0, #1
 8002d5e:	e000      	b.n	8002d62 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002d60:	2000      	movs	r0, #0
}
 8002d62:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002d64:	2001      	movs	r0, #1
 8002d66:	e7fc      	b.n	8002d62 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08002d68 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002d68:	b570      	push	{r4, r5, r6, lr}
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	460d      	mov	r5, r1
 8002d6e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	f013 0f04 	tst.w	r3, #4
 8002d78:	d11c      	bne.n	8002db4 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f7ff fe50 	bl	8002a20 <I2C_IsAcknowledgeFailed>
 8002d80:	b9d0      	cbnz	r0, 8002db8 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002d82:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002d86:	d0f3      	beq.n	8002d70 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d88:	f7ff fb3e 	bl	8002408 <HAL_GetTick>
 8002d8c:	1b80      	subs	r0, r0, r6
 8002d8e:	42a8      	cmp	r0, r5
 8002d90:	d801      	bhi.n	8002d96 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002d92:	2d00      	cmp	r5, #0
 8002d94:	d1ec      	bne.n	8002d70 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d96:	2300      	movs	r3, #0
 8002d98:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002da6:	f042 0220 	orr.w	r2, r2, #32
 8002daa:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002dac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002db0:	2001      	movs	r0, #1
 8002db2:	e000      	b.n	8002db6 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002db4:	2000      	movs	r0, #0
}
 8002db6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002db8:	2001      	movs	r0, #1
 8002dba:	e7fc      	b.n	8002db6 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08002dbc <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002dbc:	b570      	push	{r4, r5, r6, lr}
 8002dbe:	4605      	mov	r5, r0
 8002dc0:	460c      	mov	r4, r1
 8002dc2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dc4:	682b      	ldr	r3, [r5, #0]
 8002dc6:	695a      	ldr	r2, [r3, #20]
 8002dc8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002dcc:	d129      	bne.n	8002e22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	f012 0f10 	tst.w	r2, #16
 8002dd4:	d115      	bne.n	8002e02 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd6:	f7ff fb17 	bl	8002408 <HAL_GetTick>
 8002dda:	1b80      	subs	r0, r0, r6
 8002ddc:	42a0      	cmp	r0, r4
 8002dde:	d801      	bhi.n	8002de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8002de0:	2c00      	cmp	r4, #0
 8002de2:	d1ef      	bne.n	8002dc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002de4:	2300      	movs	r3, #0
 8002de6:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002de8:	2220      	movs	r2, #32
 8002dea:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dee:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002df4:	f042 0220 	orr.w	r2, r2, #32
 8002df8:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002dfa:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002dfe:	2001      	movs	r0, #1
}
 8002e00:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e02:	f06f 0210 	mvn.w	r2, #16
 8002e06:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e12:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e16:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002e18:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002e1a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002e1e:	2001      	movs	r0, #1
 8002e20:	e7ee      	b.n	8002e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8002e22:	2000      	movs	r0, #0
 8002e24:	e7ec      	b.n	8002e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08002e28 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002e28:	2800      	cmp	r0, #0
 8002e2a:	f000 80be 	beq.w	8002faa <HAL_I2C_Init+0x182>
{
 8002e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e30:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d06b      	beq.n	8002f12 <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e3a:	2324      	movs	r3, #36	; 0x24
 8002e3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002e40:	6822      	ldr	r2, [r4, #0]
 8002e42:	6813      	ldr	r3, [r2, #0]
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e4a:	f000 fe8b 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e4e:	6862      	ldr	r2, [r4, #4]
 8002e50:	4b58      	ldr	r3, [pc, #352]	; (8002fb4 <HAL_I2C_Init+0x18c>)
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d862      	bhi.n	8002f1c <HAL_I2C_Init+0xf4>
 8002e56:	4b58      	ldr	r3, [pc, #352]	; (8002fb8 <HAL_I2C_Init+0x190>)
 8002e58:	4298      	cmp	r0, r3
 8002e5a:	bf8c      	ite	hi
 8002e5c:	2300      	movhi	r3, #0
 8002e5e:	2301      	movls	r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f040 80a4 	bne.w	8002fae <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 8002e66:	4b55      	ldr	r3, [pc, #340]	; (8002fbc <HAL_I2C_Init+0x194>)
 8002e68:	fba3 2300 	umull	r2, r3, r3, r0
 8002e6c:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e6e:	6821      	ldr	r1, [r4, #0]
 8002e70:	684a      	ldr	r2, [r1, #4]
 8002e72:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002e76:	431a      	orrs	r2, r3
 8002e78:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e7a:	6825      	ldr	r5, [r4, #0]
 8002e7c:	6a2a      	ldr	r2, [r5, #32]
 8002e7e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002e82:	6866      	ldr	r6, [r4, #4]
 8002e84:	494b      	ldr	r1, [pc, #300]	; (8002fb4 <HAL_I2C_Init+0x18c>)
 8002e86:	428e      	cmp	r6, r1
 8002e88:	d84e      	bhi.n	8002f28 <HAL_I2C_Init+0x100>
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e90:	6825      	ldr	r5, [r4, #0]
 8002e92:	69e9      	ldr	r1, [r5, #28]
 8002e94:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002e98:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002e9c:	6863      	ldr	r3, [r4, #4]
 8002e9e:	4a45      	ldr	r2, [pc, #276]	; (8002fb4 <HAL_I2C_Init+0x18c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d84b      	bhi.n	8002f3c <HAL_I2C_Init+0x114>
 8002ea4:	3801      	subs	r0, #1
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eac:	3301      	adds	r3, #1
 8002eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	bf38      	it	cc
 8002eb6:	2304      	movcc	r3, #4
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ebc:	6821      	ldr	r1, [r4, #0]
 8002ebe:	680b      	ldr	r3, [r1, #0]
 8002ec0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ec4:	69e2      	ldr	r2, [r4, #28]
 8002ec6:	6a20      	ldr	r0, [r4, #32]
 8002ec8:	4302      	orrs	r2, r0
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ece:	6821      	ldr	r1, [r4, #0]
 8002ed0:	688b      	ldr	r3, [r1, #8]
 8002ed2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ed6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eda:	6922      	ldr	r2, [r4, #16]
 8002edc:	68e0      	ldr	r0, [r4, #12]
 8002ede:	4302      	orrs	r2, r0
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ee4:	6821      	ldr	r1, [r4, #0]
 8002ee6:	68cb      	ldr	r3, [r1, #12]
 8002ee8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002eec:	6962      	ldr	r2, [r4, #20]
 8002eee:	69a0      	ldr	r0, [r4, #24]
 8002ef0:	4302      	orrs	r2, r0
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002ef6:	6822      	ldr	r2, [r4, #0]
 8002ef8:	6813      	ldr	r3, [r2, #0]
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f00:	2000      	movs	r0, #0
 8002f02:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f04:	2320      	movs	r3, #32
 8002f06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f0a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8002f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002f12:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002f16:	f004 f917 	bl	8007148 <HAL_I2C_MspInit>
 8002f1a:	e78e      	b.n	8002e3a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f1c:	4b28      	ldr	r3, [pc, #160]	; (8002fc0 <HAL_I2C_Init+0x198>)
 8002f1e:	4298      	cmp	r0, r3
 8002f20:	bf8c      	ite	hi
 8002f22:	2300      	movhi	r3, #0
 8002f24:	2301      	movls	r3, #1
 8002f26:	e79b      	b.n	8002e60 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f28:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002f2c:	fb01 f303 	mul.w	r3, r1, r3
 8002f30:	4924      	ldr	r1, [pc, #144]	; (8002fc4 <HAL_I2C_Init+0x19c>)
 8002f32:	fba1 1303 	umull	r1, r3, r1, r3
 8002f36:	099b      	lsrs	r3, r3, #6
 8002f38:	3301      	adds	r3, #1
 8002f3a:	e7a7      	b.n	8002e8c <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f3c:	68a2      	ldr	r2, [r4, #8]
 8002f3e:	b9ba      	cbnz	r2, 8002f70 <HAL_I2C_Init+0x148>
 8002f40:	1e46      	subs	r6, r0, #1
 8002f42:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8002f46:	fbb6 f6f7 	udiv	r6, r6, r7
 8002f4a:	3601      	adds	r6, #1
 8002f4c:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8002f50:	fab6 f686 	clz	r6, r6
 8002f54:	0976      	lsrs	r6, r6, #5
 8002f56:	bb36      	cbnz	r6, 8002fa6 <HAL_I2C_Init+0x17e>
 8002f58:	b9c2      	cbnz	r2, 8002f8c <HAL_I2C_Init+0x164>
 8002f5a:	3801      	subs	r0, #1
 8002f5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002f60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002f6a:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8002f6e:	e7a3      	b.n	8002eb8 <HAL_I2C_Init+0x90>
 8002f70:	1e46      	subs	r6, r0, #1
 8002f72:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8002f76:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8002f7a:	fbb6 f6f7 	udiv	r6, r6, r7
 8002f7e:	3601      	adds	r6, #1
 8002f80:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8002f84:	fab6 f686 	clz	r6, r6
 8002f88:	0976      	lsrs	r6, r6, #5
 8002f8a:	e7e4      	b.n	8002f56 <HAL_I2C_Init+0x12e>
 8002f8c:	3801      	subs	r0, #1
 8002f8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002f92:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002f96:	fbb0 f2f3 	udiv	r2, r0, r3
 8002f9a:	3201      	adds	r2, #1
 8002f9c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002fa0:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8002fa4:	e788      	b.n	8002eb8 <HAL_I2C_Init+0x90>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e786      	b.n	8002eb8 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002faa:	2001      	movs	r0, #1
}
 8002fac:	4770      	bx	lr
    return HAL_ERROR;
 8002fae:	2001      	movs	r0, #1
 8002fb0:	e7ae      	b.n	8002f10 <HAL_I2C_Init+0xe8>
 8002fb2:	bf00      	nop
 8002fb4:	000186a0 	.word	0x000186a0
 8002fb8:	001e847f 	.word	0x001e847f
 8002fbc:	431bde83 	.word	0x431bde83
 8002fc0:	003d08ff 	.word	0x003d08ff
 8002fc4:	10624dd3 	.word	0x10624dd3

08002fc8 <HAL_I2C_Master_Transmit>:
{
 8002fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	4604      	mov	r4, r0
 8002fd0:	460e      	mov	r6, r1
 8002fd2:	4690      	mov	r8, r2
 8002fd4:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8002fd6:	f7ff fa17 	bl	8002408 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fda:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d004      	beq.n	8002fee <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8002fe4:	2602      	movs	r6, #2
}
 8002fe6:	4630      	mov	r0, r6
 8002fe8:	b004      	add	sp, #16
 8002fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fee:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ff0:	9000      	str	r0, [sp, #0]
 8002ff2:	2319      	movs	r3, #25
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	494f      	ldr	r1, [pc, #316]	; (8003134 <HAL_I2C_Master_Transmit+0x16c>)
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	f7ff fd2a 	bl	8002a52 <I2C_WaitOnFlagUntilTimeout>
 8002ffe:	2800      	cmp	r0, #0
 8003000:	f040 8091 	bne.w	8003126 <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 8003004:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003008:	2b01      	cmp	r3, #1
 800300a:	f000 808e 	beq.w	800312a <HAL_I2C_Master_Transmit+0x162>
 800300e:	2301      	movs	r3, #1
 8003010:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	f012 0f01 	tst.w	r2, #1
 800301c:	d103      	bne.n	8003026 <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	f042 0201 	orr.w	r2, r2, #1
 8003024:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003026:	6822      	ldr	r2, [r4, #0]
 8003028:	6813      	ldr	r3, [r2, #0]
 800302a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800302e:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003030:	2321      	movs	r3, #33	; 0x21
 8003032:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003036:	2310      	movs	r3, #16
 8003038:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800303c:	2300      	movs	r3, #0
 800303e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003040:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003044:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003046:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003048:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800304a:	4b3b      	ldr	r3, [pc, #236]	; (8003138 <HAL_I2C_Master_Transmit+0x170>)
 800304c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800304e:	462b      	mov	r3, r5
 8003050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003052:	4631      	mov	r1, r6
 8003054:	4620      	mov	r0, r4
 8003056:	f7ff fd87 	bl	8002b68 <I2C_MasterRequestWrite>
 800305a:	4606      	mov	r6, r0
 800305c:	2800      	cmp	r0, #0
 800305e:	d166      	bne.n	800312e <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003060:	2300      	movs	r3, #0
 8003062:	9303      	str	r3, [sp, #12]
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	9203      	str	r2, [sp, #12]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	9303      	str	r3, [sp, #12]
 800306e:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8003070:	e012      	b.n	8003098 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003072:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003074:	2b04      	cmp	r3, #4
 8003076:	d001      	beq.n	800307c <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 8003078:	2601      	movs	r6, #1
 800307a:	e7b4      	b.n	8002fe6 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307c:	6822      	ldr	r2, [r4, #0]
 800307e:	6813      	ldr	r3, [r2, #0]
 8003080:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003084:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003086:	2601      	movs	r6, #1
 8003088:	e7ad      	b.n	8002fe6 <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800308a:	462a      	mov	r2, r5
 800308c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800308e:	4620      	mov	r0, r4
 8003090:	f7ff fe6a 	bl	8002d68 <I2C_WaitOnBTFFlagUntilTimeout>
 8003094:	2800      	cmp	r0, #0
 8003096:	d12c      	bne.n	80030f2 <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 8003098:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800309a:	2b00      	cmp	r3, #0
 800309c:	d035      	beq.n	800310a <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309e:	462a      	mov	r2, r5
 80030a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80030a2:	4620      	mov	r0, r4
 80030a4:	f7ff fe36 	bl	8002d14 <I2C_WaitOnTXEFlagUntilTimeout>
 80030a8:	2800      	cmp	r0, #0
 80030aa:	d1e2      	bne.n	8003072 <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80030ae:	6823      	ldr	r3, [r4, #0]
 80030b0:	7812      	ldrb	r2, [r2, #0]
 80030b2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80030b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80030b6:	1c4b      	adds	r3, r1, #1
 80030b8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80030ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29b      	uxth	r3, r3
 80030c0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80030c2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030ca:	6822      	ldr	r2, [r4, #0]
 80030cc:	6950      	ldr	r0, [r2, #20]
 80030ce:	f010 0f04 	tst.w	r0, #4
 80030d2:	d0da      	beq.n	800308a <HAL_I2C_Master_Transmit+0xc2>
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0d8      	beq.n	800308a <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030d8:	784b      	ldrb	r3, [r1, #1]
 80030da:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 80030dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030de:	3301      	adds	r3, #1
 80030e0:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80030e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80030ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80030ec:	3b01      	subs	r3, #1
 80030ee:	8523      	strh	r3, [r4, #40]	; 0x28
 80030f0:	e7cb      	b.n	800308a <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d001      	beq.n	80030fc <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 80030f8:	2601      	movs	r6, #1
 80030fa:	e774      	b.n	8002fe6 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fc:	6822      	ldr	r2, [r4, #0]
 80030fe:	6813      	ldr	r3, [r2, #0]
 8003100:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003104:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003106:	2601      	movs	r6, #1
 8003108:	e76d      	b.n	8002fe6 <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310a:	6822      	ldr	r2, [r4, #0]
 800310c:	6813      	ldr	r3, [r2, #0]
 800310e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003112:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003114:	2320      	movs	r3, #32
 8003116:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800311a:	2300      	movs	r3, #0
 800311c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003120:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003124:	e75f      	b.n	8002fe6 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 8003126:	2602      	movs	r6, #2
 8003128:	e75d      	b.n	8002fe6 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 800312a:	2602      	movs	r6, #2
 800312c:	e75b      	b.n	8002fe6 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 800312e:	2601      	movs	r6, #1
 8003130:	e759      	b.n	8002fe6 <HAL_I2C_Master_Transmit+0x1e>
 8003132:	bf00      	nop
 8003134:	00100002 	.word	0x00100002
 8003138:	ffff0000 	.word	0xffff0000

0800313c <HAL_I2C_Master_Receive>:
{
 800313c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003140:	b086      	sub	sp, #24
 8003142:	4604      	mov	r4, r0
 8003144:	460e      	mov	r6, r1
 8003146:	4690      	mov	r8, r2
 8003148:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800314a:	f7ff f95d 	bl	8002408 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800314e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b20      	cmp	r3, #32
 8003156:	d004      	beq.n	8003162 <HAL_I2C_Master_Receive+0x26>
    return HAL_BUSY;
 8003158:	2602      	movs	r6, #2
}
 800315a:	4630      	mov	r0, r6
 800315c:	b006      	add	sp, #24
 800315e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003162:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003164:	9000      	str	r0, [sp, #0]
 8003166:	2319      	movs	r3, #25
 8003168:	2201      	movs	r2, #1
 800316a:	499e      	ldr	r1, [pc, #632]	; (80033e4 <HAL_I2C_Master_Receive+0x2a8>)
 800316c:	4620      	mov	r0, r4
 800316e:	f7ff fc70 	bl	8002a52 <I2C_WaitOnFlagUntilTimeout>
 8003172:	2800      	cmp	r0, #0
 8003174:	f040 8134 	bne.w	80033e0 <HAL_I2C_Master_Receive+0x2a4>
    __HAL_LOCK(hi2c);
 8003178:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800317c:	2b01      	cmp	r3, #1
 800317e:	f000 8137 	beq.w	80033f0 <HAL_I2C_Master_Receive+0x2b4>
 8003182:	2301      	movs	r3, #1
 8003184:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	f012 0f01 	tst.w	r2, #1
 8003190:	d103      	bne.n	800319a <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	f042 0201 	orr.w	r2, r2, #1
 8003198:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800319a:	6822      	ldr	r2, [r4, #0]
 800319c:	6813      	ldr	r3, [r2, #0]
 800319e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031a2:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80031a4:	2322      	movs	r3, #34	; 0x22
 80031a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031aa:	2310      	movs	r3, #16
 80031ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80031b4:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031b8:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80031bc:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031be:	4b8a      	ldr	r3, [pc, #552]	; (80033e8 <HAL_I2C_Master_Receive+0x2ac>)
 80031c0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031c2:	462b      	mov	r3, r5
 80031c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80031c6:	4631      	mov	r1, r6
 80031c8:	4620      	mov	r0, r4
 80031ca:	f7ff fd21 	bl	8002c10 <I2C_MasterRequestRead>
 80031ce:	4606      	mov	r6, r0
 80031d0:	2800      	cmp	r0, #0
 80031d2:	f040 810f 	bne.w	80033f4 <HAL_I2C_Master_Receive+0x2b8>
    if (hi2c->XferSize == 0U)
 80031d6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80031d8:	b95b      	cbnz	r3, 80031f2 <HAL_I2C_Master_Receive+0xb6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031da:	9302      	str	r3, [sp, #8]
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	695a      	ldr	r2, [r3, #20]
 80031e0:	9202      	str	r2, [sp, #8]
 80031e2:	699a      	ldr	r2, [r3, #24]
 80031e4:	9202      	str	r2, [sp, #8]
 80031e6:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e077      	b.n	80032e2 <HAL_I2C_Master_Receive+0x1a6>
    else if (hi2c->XferSize == 1U)
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d00f      	beq.n	8003216 <HAL_I2C_Master_Receive+0xda>
    else if (hi2c->XferSize == 2U)
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d01f      	beq.n	800323a <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fa:	6822      	ldr	r2, [r4, #0]
 80031fc:	6813      	ldr	r3, [r2, #0]
 80031fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003202:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003204:	2300      	movs	r3, #0
 8003206:	9305      	str	r3, [sp, #20]
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	695a      	ldr	r2, [r3, #20]
 800320c:	9205      	str	r2, [sp, #20]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	9305      	str	r3, [sp, #20]
 8003212:	9b05      	ldr	r3, [sp, #20]
 8003214:	e065      	b.n	80032e2 <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003216:	6822      	ldr	r2, [r4, #0]
 8003218:	6813      	ldr	r3, [r2, #0]
 800321a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800321e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003220:	2300      	movs	r3, #0
 8003222:	9303      	str	r3, [sp, #12]
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	695a      	ldr	r2, [r3, #20]
 8003228:	9203      	str	r2, [sp, #12]
 800322a:	699a      	ldr	r2, [r3, #24]
 800322c:	9203      	str	r2, [sp, #12]
 800322e:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	e053      	b.n	80032e2 <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323a:	6822      	ldr	r2, [r4, #0]
 800323c:	6813      	ldr	r3, [r2, #0]
 800323e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003242:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003244:	6822      	ldr	r2, [r4, #0]
 8003246:	6813      	ldr	r3, [r2, #0]
 8003248:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800324c:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800324e:	2300      	movs	r3, #0
 8003250:	9304      	str	r3, [sp, #16]
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	9204      	str	r2, [sp, #16]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	9304      	str	r3, [sp, #16]
 800325c:	9b04      	ldr	r3, [sp, #16]
 800325e:	e040      	b.n	80032e2 <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003260:	462a      	mov	r2, r5
 8003262:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003264:	4620      	mov	r0, r4
 8003266:	f7ff fda9 	bl	8002dbc <I2C_WaitOnRXNEFlagUntilTimeout>
 800326a:	2800      	cmp	r0, #0
 800326c:	f040 80c4 	bne.w	80033f8 <HAL_I2C_Master_Receive+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003270:	6823      	ldr	r3, [r4, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003276:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800327a:	3301      	adds	r3, #1
 800327c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800327e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003280:	3b01      	subs	r3, #1
 8003282:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003284:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003286:	3b01      	subs	r3, #1
 8003288:	b29b      	uxth	r3, r3
 800328a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800328c:	e029      	b.n	80032e2 <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800328e:	9500      	str	r5, [sp, #0]
 8003290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003292:	2200      	movs	r2, #0
 8003294:	4955      	ldr	r1, [pc, #340]	; (80033ec <HAL_I2C_Master_Receive+0x2b0>)
 8003296:	4620      	mov	r0, r4
 8003298:	f7ff fbdb 	bl	8002a52 <I2C_WaitOnFlagUntilTimeout>
 800329c:	2800      	cmp	r0, #0
 800329e:	f040 80ad 	bne.w	80033fc <HAL_I2C_Master_Receive+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a2:	6822      	ldr	r2, [r4, #0]
 80032a4:	6813      	ldr	r3, [r2, #0]
 80032a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032aa:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ac:	6823      	ldr	r3, [r4, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032b2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80032b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80032b6:	1c53      	adds	r3, r2, #1
 80032b8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80032ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80032bc:	3b01      	subs	r3, #1
 80032be:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80032c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c8:	6823      	ldr	r3, [r4, #0]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80032ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032d0:	3301      	adds	r3, #1
 80032d2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80032d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80032d6:	3b01      	subs	r3, #1
 80032d8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80032da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29b      	uxth	r3, r3
 80032e0:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d072      	beq.n	80033ce <HAL_I2C_Master_Receive+0x292>
      if (hi2c->XferSize <= 3U)
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d849      	bhi.n	8003380 <HAL_I2C_Master_Receive+0x244>
        if (hi2c->XferSize == 1U)
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d0b7      	beq.n	8003260 <HAL_I2C_Master_Receive+0x124>
        else if (hi2c->XferSize == 2U)
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d0cc      	beq.n	800328e <HAL_I2C_Master_Receive+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032f4:	9500      	str	r5, [sp, #0]
 80032f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80032f8:	2200      	movs	r2, #0
 80032fa:	493c      	ldr	r1, [pc, #240]	; (80033ec <HAL_I2C_Master_Receive+0x2b0>)
 80032fc:	4620      	mov	r0, r4
 80032fe:	f7ff fba8 	bl	8002a52 <I2C_WaitOnFlagUntilTimeout>
 8003302:	2800      	cmp	r0, #0
 8003304:	d17c      	bne.n	8003400 <HAL_I2C_Master_Receive+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003306:	6822      	ldr	r2, [r4, #0]
 8003308:	6813      	ldr	r3, [r2, #0]
 800330a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800330e:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003316:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800331a:	3301      	adds	r3, #1
 800331c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800331e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003320:	3b01      	subs	r3, #1
 8003322:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003324:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003326:	3b01      	subs	r3, #1
 8003328:	b29b      	uxth	r3, r3
 800332a:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800332c:	9500      	str	r5, [sp, #0]
 800332e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003330:	2200      	movs	r2, #0
 8003332:	492e      	ldr	r1, [pc, #184]	; (80033ec <HAL_I2C_Master_Receive+0x2b0>)
 8003334:	4620      	mov	r0, r4
 8003336:	f7ff fb8c 	bl	8002a52 <I2C_WaitOnFlagUntilTimeout>
 800333a:	2800      	cmp	r0, #0
 800333c:	d162      	bne.n	8003404 <HAL_I2C_Master_Receive+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333e:	6822      	ldr	r2, [r4, #0]
 8003340:	6813      	ldr	r3, [r2, #0]
 8003342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003346:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800334e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003350:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003352:	1c53      	adds	r3, r2, #1
 8003354:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003356:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003358:	3b01      	subs	r3, #1
 800335a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800335c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800335e:	3b01      	subs	r3, #1
 8003360:	b29b      	uxth	r3, r3
 8003362:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800336a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800336c:	3301      	adds	r3, #1
 800336e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003370:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003372:	3b01      	subs	r3, #1
 8003374:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003376:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003378:	3b01      	subs	r3, #1
 800337a:	b29b      	uxth	r3, r3
 800337c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800337e:	e7b0      	b.n	80032e2 <HAL_I2C_Master_Receive+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003380:	462a      	mov	r2, r5
 8003382:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003384:	4620      	mov	r0, r4
 8003386:	f7ff fd19 	bl	8002dbc <I2C_WaitOnRXNEFlagUntilTimeout>
 800338a:	2800      	cmp	r0, #0
 800338c:	d13c      	bne.n	8003408 <HAL_I2C_Master_Receive+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	691a      	ldr	r2, [r3, #16]
 8003392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003394:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003396:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003398:	1c53      	adds	r3, r2, #1
 800339a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800339c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800339e:	3b01      	subs	r3, #1
 80033a0:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80033a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	6959      	ldr	r1, [r3, #20]
 80033ae:	f011 0f04 	tst.w	r1, #4
 80033b2:	d096      	beq.n	80032e2 <HAL_I2C_Master_Receive+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80033b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80033ba:	3301      	adds	r3, #1
 80033bc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80033be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80033c0:	3b01      	subs	r3, #1
 80033c2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80033c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	8563      	strh	r3, [r4, #42]	; 0x2a
 80033cc:	e789      	b.n	80032e2 <HAL_I2C_Master_Receive+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80033ce:	2320      	movs	r3, #32
 80033d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80033da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80033de:	e6bc      	b.n	800315a <HAL_I2C_Master_Receive+0x1e>
      return HAL_BUSY;
 80033e0:	2602      	movs	r6, #2
 80033e2:	e6ba      	b.n	800315a <HAL_I2C_Master_Receive+0x1e>
 80033e4:	00100002 	.word	0x00100002
 80033e8:	ffff0000 	.word	0xffff0000
 80033ec:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 80033f0:	2602      	movs	r6, #2
 80033f2:	e6b2      	b.n	800315a <HAL_I2C_Master_Receive+0x1e>
      return HAL_ERROR;
 80033f4:	2601      	movs	r6, #1
 80033f6:	e6b0      	b.n	800315a <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 80033f8:	2601      	movs	r6, #1
 80033fa:	e6ae      	b.n	800315a <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 80033fc:	2601      	movs	r6, #1
 80033fe:	e6ac      	b.n	800315a <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8003400:	2601      	movs	r6, #1
 8003402:	e6aa      	b.n	800315a <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8003404:	2601      	movs	r6, #1
 8003406:	e6a8      	b.n	800315a <HAL_I2C_Master_Receive+0x1e>
          return HAL_ERROR;
 8003408:	2601      	movs	r6, #1
 800340a:	e6a6      	b.n	800315a <HAL_I2C_Master_Receive+0x1e>

0800340c <HAL_I2C_IsDeviceReady>:
{
 800340c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003410:	b085      	sub	sp, #20
 8003412:	4604      	mov	r4, r0
 8003414:	4688      	mov	r8, r1
 8003416:	4691      	mov	r9, r2
 8003418:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800341a:	f7fe fff5 	bl	8002408 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800341e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b20      	cmp	r3, #32
 8003426:	d004      	beq.n	8003432 <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 8003428:	2302      	movs	r3, #2
}
 800342a:	4618      	mov	r0, r3
 800342c:	b005      	add	sp, #20
 800342e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003432:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003434:	9000      	str	r0, [sp, #0]
 8003436:	2319      	movs	r3, #25
 8003438:	2201      	movs	r2, #1
 800343a:	4954      	ldr	r1, [pc, #336]	; (800358c <HAL_I2C_IsDeviceReady+0x180>)
 800343c:	4620      	mov	r0, r4
 800343e:	f7ff fb08 	bl	8002a52 <I2C_WaitOnFlagUntilTimeout>
 8003442:	2800      	cmp	r0, #0
 8003444:	f040 8097 	bne.w	8003576 <HAL_I2C_IsDeviceReady+0x16a>
    __HAL_LOCK(hi2c);
 8003448:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800344c:	2b01      	cmp	r3, #1
 800344e:	f000 8094 	beq.w	800357a <HAL_I2C_IsDeviceReady+0x16e>
 8003452:	2301      	movs	r3, #1
 8003454:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	f012 0f01 	tst.w	r2, #1
 8003460:	d103      	bne.n	800346a <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	f042 0201 	orr.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800346a:	6822      	ldr	r2, [r4, #0]
 800346c:	6813      	ldr	r3, [r2, #0]
 800346e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003472:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003474:	2324      	movs	r3, #36	; 0x24
 8003476:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800347a:	2300      	movs	r3, #0
 800347c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800347e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003482:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 8003484:	2701      	movs	r7, #1
 8003486:	e034      	b.n	80034f2 <HAL_I2C_IsDeviceReady+0xe6>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003488:	23a0      	movs	r3, #160	; 0xa0
 800348a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	695a      	ldr	r2, [r3, #20]
 8003492:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003496:	6959      	ldr	r1, [r3, #20]
 8003498:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800349c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2ba0      	cmp	r3, #160	; 0xa0
 80034a4:	d009      	beq.n	80034ba <HAL_I2C_IsDeviceReady+0xae>
 80034a6:	b942      	cbnz	r2, 80034ba <HAL_I2C_IsDeviceReady+0xae>
 80034a8:	b939      	cbnz	r1, 80034ba <HAL_I2C_IsDeviceReady+0xae>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034aa:	f7fe ffad 	bl	8002408 <HAL_GetTick>
 80034ae:	1b80      	subs	r0, r0, r6
 80034b0:	42a8      	cmp	r0, r5
 80034b2:	d8e9      	bhi.n	8003488 <HAL_I2C_IsDeviceReady+0x7c>
 80034b4:	2d00      	cmp	r5, #0
 80034b6:	d1ea      	bne.n	800348e <HAL_I2C_IsDeviceReady+0x82>
 80034b8:	e7e6      	b.n	8003488 <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->State = HAL_I2C_STATE_READY;
 80034ba:	2320      	movs	r3, #32
 80034bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	f012 0f02 	tst.w	r2, #2
 80034c8:	d131      	bne.n	800352e <HAL_I2C_IsDeviceReady+0x122>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034d8:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034da:	9600      	str	r6, [sp, #0]
 80034dc:	2319      	movs	r3, #25
 80034de:	2201      	movs	r2, #1
 80034e0:	492a      	ldr	r1, [pc, #168]	; (800358c <HAL_I2C_IsDeviceReady+0x180>)
 80034e2:	4620      	mov	r0, r4
 80034e4:	f7ff fab5 	bl	8002a52 <I2C_WaitOnFlagUntilTimeout>
 80034e8:	2800      	cmp	r0, #0
 80034ea:	d14c      	bne.n	8003586 <HAL_I2C_IsDeviceReady+0x17a>
      I2C_Trials++;
 80034ec:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 80034ee:	454f      	cmp	r7, r9
 80034f0:	d239      	bcs.n	8003566 <HAL_I2C_IsDeviceReady+0x15a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f2:	6822      	ldr	r2, [r4, #0]
 80034f4:	6813      	ldr	r3, [r2, #0]
 80034f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fa:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80034fc:	9600      	str	r6, [sp, #0]
 80034fe:	462b      	mov	r3, r5
 8003500:	2200      	movs	r2, #0
 8003502:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003506:	4620      	mov	r0, r4
 8003508:	f7ff faa3 	bl	8002a52 <I2C_WaitOnFlagUntilTimeout>
 800350c:	2800      	cmp	r0, #0
 800350e:	d136      	bne.n	800357e <HAL_I2C_IsDeviceReady+0x172>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8003516:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8003518:	f7fe ff76 	bl	8002408 <HAL_GetTick>
 800351c:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	695a      	ldr	r2, [r3, #20]
 8003522:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003526:	6959      	ldr	r1, [r3, #20]
 8003528:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800352c:	e7b6      	b.n	800349c <HAL_I2C_IsDeviceReady+0x90>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003534:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003536:	2300      	movs	r3, #0
 8003538:	9303      	str	r3, [sp, #12]
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	695a      	ldr	r2, [r3, #20]
 800353e:	9203      	str	r2, [sp, #12]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	9303      	str	r3, [sp, #12]
 8003544:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003546:	9600      	str	r6, [sp, #0]
 8003548:	2319      	movs	r3, #25
 800354a:	2201      	movs	r2, #1
 800354c:	490f      	ldr	r1, [pc, #60]	; (800358c <HAL_I2C_IsDeviceReady+0x180>)
 800354e:	4620      	mov	r0, r4
 8003550:	f7ff fa7f 	bl	8002a52 <I2C_WaitOnFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	b9a0      	cbnz	r0, 8003582 <HAL_I2C_IsDeviceReady+0x176>
        hi2c->State = HAL_I2C_STATE_READY;
 8003558:	2220      	movs	r2, #32
 800355a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800355e:	2200      	movs	r2, #0
 8003560:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 8003564:	e761      	b.n	800342a <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003566:	2320      	movs	r3, #32
 8003568:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800356c:	2300      	movs	r3, #0
 800356e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e759      	b.n	800342a <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8003576:	2302      	movs	r3, #2
 8003578:	e757      	b.n	800342a <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 800357a:	2302      	movs	r3, #2
 800357c:	e755      	b.n	800342a <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e753      	b.n	800342a <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e751      	b.n	800342a <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e74f      	b.n	800342a <HAL_I2C_IsDeviceReady+0x1e>
 800358a:	bf00      	nop
 800358c:	00100002 	.word	0x00100002

08003590 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003590:	2800      	cmp	r0, #0
 8003592:	f000 81bb 	beq.w	800390c <HAL_RCC_OscConfig+0x37c>
{
 8003596:	b570      	push	{r4, r5, r6, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359c:	6803      	ldr	r3, [r0, #0]
 800359e:	f013 0f01 	tst.w	r3, #1
 80035a2:	d03b      	beq.n	800361c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035a4:	4ba7      	ldr	r3, [pc, #668]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 030c 	and.w	r3, r3, #12
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d02c      	beq.n	800360a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b0:	4ba4      	ldr	r3, [pc, #656]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d021      	beq.n	8003600 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035bc:	6863      	ldr	r3, [r4, #4]
 80035be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c2:	d04f      	beq.n	8003664 <HAL_RCC_OscConfig+0xd4>
 80035c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c8:	d052      	beq.n	8003670 <HAL_RCC_OscConfig+0xe0>
 80035ca:	4b9e      	ldr	r3, [pc, #632]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035da:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035dc:	6863      	ldr	r3, [r4, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d050      	beq.n	8003684 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e2:	f7fe ff11 	bl	8002408 <HAL_GetTick>
 80035e6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e8:	4b96      	ldr	r3, [pc, #600]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80035f0:	d114      	bne.n	800361c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f2:	f7fe ff09 	bl	8002408 <HAL_GetTick>
 80035f6:	1b40      	subs	r0, r0, r5
 80035f8:	2864      	cmp	r0, #100	; 0x64
 80035fa:	d9f5      	bls.n	80035e8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80035fc:	2003      	movs	r0, #3
 80035fe:	e18a      	b.n	8003916 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003600:	4b90      	ldr	r3, [pc, #576]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003608:	d0d8      	beq.n	80035bc <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360a:	4b8e      	ldr	r3, [pc, #568]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003612:	d003      	beq.n	800361c <HAL_RCC_OscConfig+0x8c>
 8003614:	6863      	ldr	r3, [r4, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 817a 	beq.w	8003910 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	f013 0f02 	tst.w	r3, #2
 8003622:	d055      	beq.n	80036d0 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003624:	4b87      	ldr	r3, [pc, #540]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f013 0f0c 	tst.w	r3, #12
 800362c:	d03e      	beq.n	80036ac <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800362e:	4b85      	ldr	r3, [pc, #532]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003636:	2b08      	cmp	r3, #8
 8003638:	d033      	beq.n	80036a2 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800363a:	68e3      	ldr	r3, [r4, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d068      	beq.n	8003712 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003640:	4b81      	ldr	r3, [pc, #516]	; (8003848 <HAL_RCC_OscConfig+0x2b8>)
 8003642:	2201      	movs	r2, #1
 8003644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003646:	f7fe fedf 	bl	8002408 <HAL_GetTick>
 800364a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364c:	4b7d      	ldr	r3, [pc, #500]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f013 0f02 	tst.w	r3, #2
 8003654:	d154      	bne.n	8003700 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003656:	f7fe fed7 	bl	8002408 <HAL_GetTick>
 800365a:	1b40      	subs	r0, r0, r5
 800365c:	2802      	cmp	r0, #2
 800365e:	d9f5      	bls.n	800364c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003660:	2003      	movs	r0, #3
 8003662:	e158      	b.n	8003916 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003664:	4a77      	ldr	r2, [pc, #476]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 8003666:	6813      	ldr	r3, [r2, #0]
 8003668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	e7b5      	b.n	80035dc <HAL_RCC_OscConfig+0x4c>
 8003670:	4b74      	ldr	r3, [pc, #464]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	e7ab      	b.n	80035dc <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8003684:	f7fe fec0 	bl	8002408 <HAL_GetTick>
 8003688:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368a:	4b6e      	ldr	r3, [pc, #440]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003692:	d0c3      	beq.n	800361c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003694:	f7fe feb8 	bl	8002408 <HAL_GetTick>
 8003698:	1b40      	subs	r0, r0, r5
 800369a:	2864      	cmp	r0, #100	; 0x64
 800369c:	d9f5      	bls.n	800368a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800369e:	2003      	movs	r0, #3
 80036a0:	e139      	b.n	8003916 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a2:	4b68      	ldr	r3, [pc, #416]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80036aa:	d1c6      	bne.n	800363a <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ac:	4b65      	ldr	r3, [pc, #404]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f013 0f02 	tst.w	r3, #2
 80036b4:	d004      	beq.n	80036c0 <HAL_RCC_OscConfig+0x130>
 80036b6:	68e3      	ldr	r3, [r4, #12]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 80036bc:	2001      	movs	r0, #1
 80036be:	e12a      	b.n	8003916 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c0:	4a60      	ldr	r2, [pc, #384]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 80036c2:	6813      	ldr	r3, [r2, #0]
 80036c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80036c8:	6921      	ldr	r1, [r4, #16]
 80036ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80036ce:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	f013 0f08 	tst.w	r3, #8
 80036d6:	d040      	beq.n	800375a <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036d8:	6963      	ldr	r3, [r4, #20]
 80036da:	b363      	cbz	r3, 8003736 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036dc:	4b5b      	ldr	r3, [pc, #364]	; (800384c <HAL_RCC_OscConfig+0x2bc>)
 80036de:	2201      	movs	r2, #1
 80036e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e2:	f7fe fe91 	bl	8002408 <HAL_GetTick>
 80036e6:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e8:	4b56      	ldr	r3, [pc, #344]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 80036ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ec:	f013 0f02 	tst.w	r3, #2
 80036f0:	d133      	bne.n	800375a <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f2:	f7fe fe89 	bl	8002408 <HAL_GetTick>
 80036f6:	1b40      	subs	r0, r0, r5
 80036f8:	2802      	cmp	r0, #2
 80036fa:	d9f5      	bls.n	80036e8 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80036fc:	2003      	movs	r0, #3
 80036fe:	e10a      	b.n	8003916 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003700:	4a50      	ldr	r2, [pc, #320]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 8003702:	6813      	ldr	r3, [r2, #0]
 8003704:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003708:	6921      	ldr	r1, [r4, #16]
 800370a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	e7de      	b.n	80036d0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8003712:	4b4d      	ldr	r3, [pc, #308]	; (8003848 <HAL_RCC_OscConfig+0x2b8>)
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003718:	f7fe fe76 	bl	8002408 <HAL_GetTick>
 800371c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371e:	4b49      	ldr	r3, [pc, #292]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f013 0f02 	tst.w	r3, #2
 8003726:	d0d3      	beq.n	80036d0 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003728:	f7fe fe6e 	bl	8002408 <HAL_GetTick>
 800372c:	1b40      	subs	r0, r0, r5
 800372e:	2802      	cmp	r0, #2
 8003730:	d9f5      	bls.n	800371e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8003732:	2003      	movs	r0, #3
 8003734:	e0ef      	b.n	8003916 <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003736:	4b45      	ldr	r3, [pc, #276]	; (800384c <HAL_RCC_OscConfig+0x2bc>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373c:	f7fe fe64 	bl	8002408 <HAL_GetTick>
 8003740:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003742:	4b40      	ldr	r3, [pc, #256]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 8003744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003746:	f013 0f02 	tst.w	r3, #2
 800374a:	d006      	beq.n	800375a <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800374c:	f7fe fe5c 	bl	8002408 <HAL_GetTick>
 8003750:	1b40      	subs	r0, r0, r5
 8003752:	2802      	cmp	r0, #2
 8003754:	d9f5      	bls.n	8003742 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8003756:	2003      	movs	r0, #3
 8003758:	e0dd      	b.n	8003916 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	f013 0f04 	tst.w	r3, #4
 8003760:	d079      	beq.n	8003856 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003762:	4b38      	ldr	r3, [pc, #224]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800376a:	d133      	bne.n	80037d4 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376c:	2300      	movs	r3, #0
 800376e:	9301      	str	r3, [sp, #4]
 8003770:	4b34      	ldr	r3, [pc, #208]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 8003772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003774:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003778:	641a      	str	r2, [r3, #64]	; 0x40
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003784:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003786:	4b32      	ldr	r3, [pc, #200]	; (8003850 <HAL_RCC_OscConfig+0x2c0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800378e:	d023      	beq.n	80037d8 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003790:	68a3      	ldr	r3, [r4, #8]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d034      	beq.n	8003800 <HAL_RCC_OscConfig+0x270>
 8003796:	2b05      	cmp	r3, #5
 8003798:	d038      	beq.n	800380c <HAL_RCC_OscConfig+0x27c>
 800379a:	4b2a      	ldr	r3, [pc, #168]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 800379c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	671a      	str	r2, [r3, #112]	; 0x70
 80037a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037a6:	f022 0204 	bic.w	r2, r2, #4
 80037aa:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037ac:	68a3      	ldr	r3, [r4, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d036      	beq.n	8003820 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b2:	f7fe fe29 	bl	8002408 <HAL_GetTick>
 80037b6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b8:	4b22      	ldr	r3, [pc, #136]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 80037ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037bc:	f013 0f02 	tst.w	r3, #2
 80037c0:	d148      	bne.n	8003854 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c2:	f7fe fe21 	bl	8002408 <HAL_GetTick>
 80037c6:	1b80      	subs	r0, r0, r6
 80037c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80037cc:	4298      	cmp	r0, r3
 80037ce:	d9f3      	bls.n	80037b8 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 80037d0:	2003      	movs	r0, #3
 80037d2:	e0a0      	b.n	8003916 <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 80037d4:	2500      	movs	r5, #0
 80037d6:	e7d6      	b.n	8003786 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037d8:	4a1d      	ldr	r2, [pc, #116]	; (8003850 <HAL_RCC_OscConfig+0x2c0>)
 80037da:	6813      	ldr	r3, [r2, #0]
 80037dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80037e2:	f7fe fe11 	bl	8002408 <HAL_GetTick>
 80037e6:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e8:	4b19      	ldr	r3, [pc, #100]	; (8003850 <HAL_RCC_OscConfig+0x2c0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f413 7f80 	tst.w	r3, #256	; 0x100
 80037f0:	d1ce      	bne.n	8003790 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f2:	f7fe fe09 	bl	8002408 <HAL_GetTick>
 80037f6:	1b80      	subs	r0, r0, r6
 80037f8:	2802      	cmp	r0, #2
 80037fa:	d9f5      	bls.n	80037e8 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 80037fc:	2003      	movs	r0, #3
 80037fe:	e08a      	b.n	8003916 <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003800:	4a10      	ldr	r2, [pc, #64]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 8003802:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003804:	f043 0301 	orr.w	r3, r3, #1
 8003808:	6713      	str	r3, [r2, #112]	; 0x70
 800380a:	e7cf      	b.n	80037ac <HAL_RCC_OscConfig+0x21c>
 800380c:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 800380e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003810:	f042 0204 	orr.w	r2, r2, #4
 8003814:	671a      	str	r2, [r3, #112]	; 0x70
 8003816:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003818:	f042 0201 	orr.w	r2, r2, #1
 800381c:	671a      	str	r2, [r3, #112]	; 0x70
 800381e:	e7c5      	b.n	80037ac <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003820:	f7fe fdf2 	bl	8002408 <HAL_GetTick>
 8003824:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003826:	4b07      	ldr	r3, [pc, #28]	; (8003844 <HAL_RCC_OscConfig+0x2b4>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	f013 0f02 	tst.w	r3, #2
 800382e:	d011      	beq.n	8003854 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003830:	f7fe fdea 	bl	8002408 <HAL_GetTick>
 8003834:	1b80      	subs	r0, r0, r6
 8003836:	f241 3388 	movw	r3, #5000	; 0x1388
 800383a:	4298      	cmp	r0, r3
 800383c:	d9f3      	bls.n	8003826 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 800383e:	2003      	movs	r0, #3
 8003840:	e069      	b.n	8003916 <HAL_RCC_OscConfig+0x386>
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800
 8003848:	42470000 	.word	0x42470000
 800384c:	42470e80 	.word	0x42470e80
 8003850:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003854:	b9e5      	cbnz	r5, 8003890 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003856:	69a3      	ldr	r3, [r4, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d05b      	beq.n	8003914 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800385c:	4a30      	ldr	r2, [pc, #192]	; (8003920 <HAL_RCC_OscConfig+0x390>)
 800385e:	6892      	ldr	r2, [r2, #8]
 8003860:	f002 020c 	and.w	r2, r2, #12
 8003864:	2a08      	cmp	r2, #8
 8003866:	d058      	beq.n	800391a <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003868:	2b02      	cmp	r3, #2
 800386a:	d017      	beq.n	800389c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386c:	4b2d      	ldr	r3, [pc, #180]	; (8003924 <HAL_RCC_OscConfig+0x394>)
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003872:	f7fe fdc9 	bl	8002408 <HAL_GetTick>
 8003876:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003878:	4b29      	ldr	r3, [pc, #164]	; (8003920 <HAL_RCC_OscConfig+0x390>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003880:	d042      	beq.n	8003908 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003882:	f7fe fdc1 	bl	8002408 <HAL_GetTick>
 8003886:	1b00      	subs	r0, r0, r4
 8003888:	2802      	cmp	r0, #2
 800388a:	d9f5      	bls.n	8003878 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800388c:	2003      	movs	r0, #3
 800388e:	e042      	b.n	8003916 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003890:	4a23      	ldr	r2, [pc, #140]	; (8003920 <HAL_RCC_OscConfig+0x390>)
 8003892:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003898:	6413      	str	r3, [r2, #64]	; 0x40
 800389a:	e7dc      	b.n	8003856 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 800389c:	4b21      	ldr	r3, [pc, #132]	; (8003924 <HAL_RCC_OscConfig+0x394>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038a2:	f7fe fdb1 	bl	8002408 <HAL_GetTick>
 80038a6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a8:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <HAL_RCC_OscConfig+0x390>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80038b0:	d006      	beq.n	80038c0 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b2:	f7fe fda9 	bl	8002408 <HAL_GetTick>
 80038b6:	1b40      	subs	r0, r0, r5
 80038b8:	2802      	cmp	r0, #2
 80038ba:	d9f5      	bls.n	80038a8 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80038bc:	2003      	movs	r0, #3
 80038be:	e02a      	b.n	8003916 <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038c0:	69e3      	ldr	r3, [r4, #28]
 80038c2:	6a22      	ldr	r2, [r4, #32]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80038c8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80038cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80038ce:	0852      	lsrs	r2, r2, #1
 80038d0:	3a01      	subs	r2, #1
 80038d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80038d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80038dc:	4a10      	ldr	r2, [pc, #64]	; (8003920 <HAL_RCC_OscConfig+0x390>)
 80038de:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80038e0:	4b10      	ldr	r3, [pc, #64]	; (8003924 <HAL_RCC_OscConfig+0x394>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038e6:	f7fe fd8f 	bl	8002408 <HAL_GetTick>
 80038ea:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <HAL_RCC_OscConfig+0x390>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80038f4:	d106      	bne.n	8003904 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f6:	f7fe fd87 	bl	8002408 <HAL_GetTick>
 80038fa:	1b00      	subs	r0, r0, r4
 80038fc:	2802      	cmp	r0, #2
 80038fe:	d9f5      	bls.n	80038ec <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8003900:	2003      	movs	r0, #3
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8003904:	2000      	movs	r0, #0
 8003906:	e006      	b.n	8003916 <HAL_RCC_OscConfig+0x386>
 8003908:	2000      	movs	r0, #0
 800390a:	e004      	b.n	8003916 <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 800390c:	2001      	movs	r0, #1
}
 800390e:	4770      	bx	lr
        return HAL_ERROR;
 8003910:	2001      	movs	r0, #1
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8003914:	2000      	movs	r0, #0
}
 8003916:	b002      	add	sp, #8
 8003918:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800391a:	2001      	movs	r0, #1
 800391c:	e7fb      	b.n	8003916 <HAL_RCC_OscConfig+0x386>
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800
 8003924:	42470060 	.word	0x42470060

08003928 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003928:	4b32      	ldr	r3, [pc, #200]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 030c 	and.w	r3, r3, #12
 8003930:	2b04      	cmp	r3, #4
 8003932:	d05c      	beq.n	80039ee <HAL_RCC_GetSysClockFreq+0xc6>
 8003934:	2b08      	cmp	r3, #8
 8003936:	d001      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003938:	482f      	ldr	r0, [pc, #188]	; (80039f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800393a:	4770      	bx	lr
{
 800393c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003940:	4b2c      	ldr	r3, [pc, #176]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800394e:	d02b      	beq.n	80039a8 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003950:	4b28      	ldr	r3, [pc, #160]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003958:	461e      	mov	r6, r3
 800395a:	2700      	movs	r7, #0
 800395c:	015c      	lsls	r4, r3, #5
 800395e:	2500      	movs	r5, #0
 8003960:	1ae4      	subs	r4, r4, r3
 8003962:	eb65 0507 	sbc.w	r5, r5, r7
 8003966:	01a9      	lsls	r1, r5, #6
 8003968:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800396c:	01a0      	lsls	r0, r4, #6
 800396e:	1b00      	subs	r0, r0, r4
 8003970:	eb61 0105 	sbc.w	r1, r1, r5
 8003974:	00cb      	lsls	r3, r1, #3
 8003976:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800397a:	00c4      	lsls	r4, r0, #3
 800397c:	19a0      	adds	r0, r4, r6
 800397e:	eb43 0107 	adc.w	r1, r3, r7
 8003982:	024b      	lsls	r3, r1, #9
 8003984:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8003988:	0244      	lsls	r4, r0, #9
 800398a:	4620      	mov	r0, r4
 800398c:	4619      	mov	r1, r3
 800398e:	2300      	movs	r3, #0
 8003990:	f7fd f8f4 	bl	8000b7c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003994:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800399c:	3301      	adds	r3, #1
 800399e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80039a0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80039a4:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039a8:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80039b0:	461e      	mov	r6, r3
 80039b2:	2700      	movs	r7, #0
 80039b4:	015c      	lsls	r4, r3, #5
 80039b6:	2500      	movs	r5, #0
 80039b8:	1ae4      	subs	r4, r4, r3
 80039ba:	eb65 0507 	sbc.w	r5, r5, r7
 80039be:	01a9      	lsls	r1, r5, #6
 80039c0:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80039c4:	01a0      	lsls	r0, r4, #6
 80039c6:	1b00      	subs	r0, r0, r4
 80039c8:	eb61 0105 	sbc.w	r1, r1, r5
 80039cc:	00cb      	lsls	r3, r1, #3
 80039ce:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80039d2:	00c4      	lsls	r4, r0, #3
 80039d4:	19a0      	adds	r0, r4, r6
 80039d6:	eb43 0107 	adc.w	r1, r3, r7
 80039da:	028b      	lsls	r3, r1, #10
 80039dc:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80039e0:	0284      	lsls	r4, r0, #10
 80039e2:	4620      	mov	r0, r4
 80039e4:	4619      	mov	r1, r3
 80039e6:	2300      	movs	r3, #0
 80039e8:	f7fd f8c8 	bl	8000b7c <__aeabi_uldivmod>
 80039ec:	e7d2      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 80039ee:	4803      	ldr	r0, [pc, #12]	; (80039fc <HAL_RCC_GetSysClockFreq+0xd4>)
}
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40023800 	.word	0x40023800
 80039f8:	00f42400 	.word	0x00f42400
 80039fc:	007a1200 	.word	0x007a1200

08003a00 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003a00:	2800      	cmp	r0, #0
 8003a02:	f000 809d 	beq.w	8003b40 <HAL_RCC_ClockConfig+0x140>
{
 8003a06:	b570      	push	{r4, r5, r6, lr}
 8003a08:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a0a:	4b4f      	ldr	r3, [pc, #316]	; (8003b48 <HAL_RCC_ClockConfig+0x148>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	428b      	cmp	r3, r1
 8003a14:	d209      	bcs.n	8003a2a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a16:	b2cb      	uxtb	r3, r1
 8003a18:	4a4b      	ldr	r2, [pc, #300]	; (8003b48 <HAL_RCC_ClockConfig+0x148>)
 8003a1a:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1c:	6813      	ldr	r3, [r2, #0]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	428b      	cmp	r3, r1
 8003a24:	d001      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8003a26:	2001      	movs	r0, #1
}
 8003a28:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	f013 0f02 	tst.w	r3, #2
 8003a30:	d017      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a32:	f013 0f04 	tst.w	r3, #4
 8003a36:	d004      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a38:	4a44      	ldr	r2, [pc, #272]	; (8003b4c <HAL_RCC_ClockConfig+0x14c>)
 8003a3a:	6893      	ldr	r3, [r2, #8]
 8003a3c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a40:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	f013 0f08 	tst.w	r3, #8
 8003a48:	d004      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a4a:	4a40      	ldr	r2, [pc, #256]	; (8003b4c <HAL_RCC_ClockConfig+0x14c>)
 8003a4c:	6893      	ldr	r3, [r2, #8]
 8003a4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a52:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a54:	4a3d      	ldr	r2, [pc, #244]	; (8003b4c <HAL_RCC_ClockConfig+0x14c>)
 8003a56:	6893      	ldr	r3, [r2, #8]
 8003a58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a5c:	68a0      	ldr	r0, [r4, #8]
 8003a5e:	4303      	orrs	r3, r0
 8003a60:	6093      	str	r3, [r2, #8]
 8003a62:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	f013 0f01 	tst.w	r3, #1
 8003a6a:	d032      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a6c:	6863      	ldr	r3, [r4, #4]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d021      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a72:	1e9a      	subs	r2, r3, #2
 8003a74:	2a01      	cmp	r2, #1
 8003a76:	d925      	bls.n	8003ac4 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a78:	4a34      	ldr	r2, [pc, #208]	; (8003b4c <HAL_RCC_ClockConfig+0x14c>)
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	f012 0f02 	tst.w	r2, #2
 8003a80:	d060      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a82:	4932      	ldr	r1, [pc, #200]	; (8003b4c <HAL_RCC_ClockConfig+0x14c>)
 8003a84:	688a      	ldr	r2, [r1, #8]
 8003a86:	f022 0203 	bic.w	r2, r2, #3
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003a8e:	f7fe fcbb 	bl	8002408 <HAL_GetTick>
 8003a92:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a94:	4b2d      	ldr	r3, [pc, #180]	; (8003b4c <HAL_RCC_ClockConfig+0x14c>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 030c 	and.w	r3, r3, #12
 8003a9c:	6862      	ldr	r2, [r4, #4]
 8003a9e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003aa2:	d016      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa4:	f7fe fcb0 	bl	8002408 <HAL_GetTick>
 8003aa8:	1b80      	subs	r0, r0, r6
 8003aaa:	f241 3388 	movw	r3, #5000	; 0x1388
 8003aae:	4298      	cmp	r0, r3
 8003ab0:	d9f0      	bls.n	8003a94 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8003ab2:	2003      	movs	r0, #3
 8003ab4:	e7b8      	b.n	8003a28 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab6:	4a25      	ldr	r2, [pc, #148]	; (8003b4c <HAL_RCC_ClockConfig+0x14c>)
 8003ab8:	6812      	ldr	r2, [r2, #0]
 8003aba:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003abe:	d1e0      	bne.n	8003a82 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	e7b1      	b.n	8003a28 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac4:	4a21      	ldr	r2, [pc, #132]	; (8003b4c <HAL_RCC_ClockConfig+0x14c>)
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003acc:	d1d9      	bne.n	8003a82 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8003ace:	2001      	movs	r0, #1
 8003ad0:	e7aa      	b.n	8003a28 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad2:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <HAL_RCC_ClockConfig+0x148>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	42ab      	cmp	r3, r5
 8003adc:	d909      	bls.n	8003af2 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	b2ea      	uxtb	r2, r5
 8003ae0:	4b19      	ldr	r3, [pc, #100]	; (8003b48 <HAL_RCC_ClockConfig+0x148>)
 8003ae2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	42ab      	cmp	r3, r5
 8003aec:	d001      	beq.n	8003af2 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8003aee:	2001      	movs	r0, #1
 8003af0:	e79a      	b.n	8003a28 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	f013 0f04 	tst.w	r3, #4
 8003af8:	d006      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003afa:	4a14      	ldr	r2, [pc, #80]	; (8003b4c <HAL_RCC_ClockConfig+0x14c>)
 8003afc:	6893      	ldr	r3, [r2, #8]
 8003afe:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003b02:	68e1      	ldr	r1, [r4, #12]
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	f013 0f08 	tst.w	r3, #8
 8003b0e:	d007      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b10:	4a0e      	ldr	r2, [pc, #56]	; (8003b4c <HAL_RCC_ClockConfig+0x14c>)
 8003b12:	6893      	ldr	r3, [r2, #8]
 8003b14:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003b18:	6921      	ldr	r1, [r4, #16]
 8003b1a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003b1e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b20:	f7ff ff02 	bl	8003928 <HAL_RCC_GetSysClockFreq>
 8003b24:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <HAL_RCC_ClockConfig+0x14c>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003b2c:	4a08      	ldr	r2, [pc, #32]	; (8003b50 <HAL_RCC_ClockConfig+0x150>)
 8003b2e:	5cd3      	ldrb	r3, [r2, r3]
 8003b30:	40d8      	lsrs	r0, r3
 8003b32:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <HAL_RCC_ClockConfig+0x154>)
 8003b34:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003b36:	2000      	movs	r0, #0
 8003b38:	f7fe fc1a 	bl	8002370 <HAL_InitTick>
  return HAL_OK;
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	e773      	b.n	8003a28 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003b40:	2001      	movs	r0, #1
}
 8003b42:	4770      	bx	lr
        return HAL_ERROR;
 8003b44:	2001      	movs	r0, #1
 8003b46:	e76f      	b.n	8003a28 <HAL_RCC_ClockConfig+0x28>
 8003b48:	40023c00 	.word	0x40023c00
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	0800b334 	.word	0x0800b334
 8003b54:	20000090 	.word	0x20000090

08003b58 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003b58:	4b01      	ldr	r3, [pc, #4]	; (8003b60 <HAL_RCC_GetHCLKFreq+0x8>)
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000090 	.word	0x20000090

08003b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b64:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b66:	f7ff fff7 	bl	8003b58 <HAL_RCC_GetHCLKFreq>
 8003b6a:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003b72:	4a03      	ldr	r2, [pc, #12]	; (8003b80 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003b74:	5cd3      	ldrb	r3, [r2, r3]
}
 8003b76:	40d8      	lsrs	r0, r3
 8003b78:	bd08      	pop	{r3, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	0800b344 	.word	0x0800b344

08003b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b84:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b86:	f7ff ffe7 	bl	8003b58 <HAL_RCC_GetHCLKFreq>
 8003b8a:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003b92:	4a03      	ldr	r2, [pc, #12]	; (8003ba0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003b94:	5cd3      	ldrb	r3, [r2, r3]
}
 8003b96:	40d8      	lsrs	r0, r3
 8003b98:	bd08      	pop	{r3, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	0800b344 	.word	0x0800b344

08003ba4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba6:	4605      	mov	r5, r0
 8003ba8:	460f      	mov	r7, r1
 8003baa:	4616      	mov	r6, r2
 8003bac:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bae:	682b      	ldr	r3, [r5, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	ea37 0303 	bics.w	r3, r7, r3
 8003bb6:	bf0c      	ite	eq
 8003bb8:	2301      	moveq	r3, #1
 8003bba:	2300      	movne	r3, #0
 8003bbc:	42b3      	cmp	r3, r6
 8003bbe:	d037      	beq.n	8003c30 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bc0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003bc4:	d0f3      	beq.n	8003bae <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003bc6:	f7fe fc1f 	bl	8002408 <HAL_GetTick>
 8003bca:	9b06      	ldr	r3, [sp, #24]
 8003bcc:	1ac0      	subs	r0, r0, r3
 8003bce:	42a0      	cmp	r0, r4
 8003bd0:	d201      	bcs.n	8003bd6 <SPI_WaitFlagStateUntilTimeout+0x32>
 8003bd2:	2c00      	cmp	r4, #0
 8003bd4:	d1eb      	bne.n	8003bae <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bd6:	682a      	ldr	r2, [r5, #0]
 8003bd8:	6853      	ldr	r3, [r2, #4]
 8003bda:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003bde:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003be0:	686b      	ldr	r3, [r5, #4]
 8003be2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003be6:	d00b      	beq.n	8003c00 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003be8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bee:	d014      	beq.n	8003c1a <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8003bfc:	2003      	movs	r0, #3
 8003bfe:	e018      	b.n	8003c32 <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c00:	68ab      	ldr	r3, [r5, #8]
 8003c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c06:	d002      	beq.n	8003c0e <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0c:	d1ec      	bne.n	8003be8 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8003c0e:	682a      	ldr	r2, [r5, #0]
 8003c10:	6813      	ldr	r3, [r2, #0]
 8003c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	e7e6      	b.n	8003be8 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8003c1a:	682a      	ldr	r2, [r5, #0]
 8003c1c:	6813      	ldr	r3, [r2, #0]
 8003c1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	682a      	ldr	r2, [r5, #0]
 8003c26:	6813      	ldr	r3, [r2, #0]
 8003c28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e7df      	b.n	8003bf0 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8003c30:	2000      	movs	r0, #0
}
 8003c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003c34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b530      	push	{r4, r5, lr}
 8003c36:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c38:	4c16      	ldr	r4, [pc, #88]	; (8003c94 <SPI_EndRxTxTransaction+0x60>)
 8003c3a:	6824      	ldr	r4, [r4, #0]
 8003c3c:	4d16      	ldr	r5, [pc, #88]	; (8003c98 <SPI_EndRxTxTransaction+0x64>)
 8003c3e:	fba5 3404 	umull	r3, r4, r5, r4
 8003c42:	0d64      	lsrs	r4, r4, #21
 8003c44:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8003c48:	fb05 f404 	mul.w	r4, r5, r4
 8003c4c:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c4e:	6844      	ldr	r4, [r0, #4]
 8003c50:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8003c54:	d00b      	beq.n	8003c6e <SPI_EndRxTxTransaction+0x3a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c56:	9b03      	ldr	r3, [sp, #12]
 8003c58:	b1c3      	cbz	r3, 8003c8c <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8003c5a:	9b03      	ldr	r3, [sp, #12]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c60:	6803      	ldr	r3, [r0, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003c68:	d1f5      	bne.n	8003c56 <SPI_EndRxTxTransaction+0x22>
  }

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e00f      	b.n	8003c8e <SPI_EndRxTxTransaction+0x5a>
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c72:	9200      	str	r2, [sp, #0]
 8003c74:	2200      	movs	r2, #0
 8003c76:	2180      	movs	r1, #128	; 0x80
 8003c78:	f7ff ff94 	bl	8003ba4 <SPI_WaitFlagStateUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	b130      	cbz	r0, 8003c8e <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c82:	f043 0320 	orr.w	r3, r3, #32
 8003c86:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e000      	b.n	8003c8e <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	b005      	add	sp, #20
 8003c92:	bd30      	pop	{r4, r5, pc}
 8003c94:	20000090 	.word	0x20000090
 8003c98:	165e9f81 	.word	0x165e9f81

08003c9c <SPI_EndRxTransaction>:
{
 8003c9c:	b510      	push	{r4, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ca2:	6840      	ldr	r0, [r0, #4]
 8003ca4:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8003ca8:	d016      	beq.n	8003cd8 <SPI_EndRxTransaction+0x3c>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003caa:	6860      	ldr	r0, [r4, #4]
 8003cac:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8003cb0:	d12e      	bne.n	8003d10 <SPI_EndRxTransaction+0x74>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003cb2:	68a3      	ldr	r3, [r4, #8]
 8003cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb8:	d01b      	beq.n	8003cf2 <SPI_EndRxTransaction+0x56>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cba:	9200      	str	r2, [sp, #0]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2180      	movs	r1, #128	; 0x80
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	f7ff ff6e 	bl	8003ba4 <SPI_WaitFlagStateUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	b350      	cbz	r0, 8003d22 <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ccc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003cce:	f043 0320 	orr.w	r3, r3, #32
 8003cd2:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e024      	b.n	8003d22 <SPI_EndRxTransaction+0x86>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cd8:	68a3      	ldr	r3, [r4, #8]
 8003cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cde:	d002      	beq.n	8003ce6 <SPI_EndRxTransaction+0x4a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce4:	d1e1      	bne.n	8003caa <SPI_EndRxTransaction+0xe>
    __HAL_SPI_DISABLE(hspi);
 8003ce6:	6820      	ldr	r0, [r4, #0]
 8003ce8:	6803      	ldr	r3, [r0, #0]
 8003cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cee:	6003      	str	r3, [r0, #0]
 8003cf0:	e7db      	b.n	8003caa <SPI_EndRxTransaction+0xe>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf2:	9200      	str	r2, [sp, #0]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	f7ff ff52 	bl	8003ba4 <SPI_WaitFlagStateUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	b170      	cbz	r0, 8003d22 <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d06:	f043 0320 	orr.w	r3, r3, #32
 8003d0a:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e008      	b.n	8003d22 <SPI_EndRxTransaction+0x86>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d10:	9200      	str	r2, [sp, #0]
 8003d12:	460b      	mov	r3, r1
 8003d14:	2200      	movs	r2, #0
 8003d16:	2101      	movs	r1, #1
 8003d18:	4620      	mov	r0, r4
 8003d1a:	f7ff ff43 	bl	8003ba4 <SPI_WaitFlagStateUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	b910      	cbnz	r0, 8003d28 <SPI_EndRxTransaction+0x8c>
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	b002      	add	sp, #8
 8003d26:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d2a:	f043 0320 	orr.w	r3, r3, #32
 8003d2e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e7f6      	b.n	8003d22 <SPI_EndRxTransaction+0x86>

08003d34 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003d34:	2800      	cmp	r0, #0
 8003d36:	d03b      	beq.n	8003db0 <HAL_SPI_Init+0x7c>
{
 8003d38:	b510      	push	{r4, lr}
 8003d3a:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d40:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d02e      	beq.n	8003da6 <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003d4e:	6822      	ldr	r2, [r4, #0]
 8003d50:	6813      	ldr	r3, [r2, #0]
 8003d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d56:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003d58:	6863      	ldr	r3, [r4, #4]
 8003d5a:	68a2      	ldr	r2, [r4, #8]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	68e2      	ldr	r2, [r4, #12]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	6922      	ldr	r2, [r4, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	6962      	ldr	r2, [r4, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	69a2      	ldr	r2, [r4, #24]
 8003d6c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003d70:	4313      	orrs	r3, r2
 8003d72:	69e2      	ldr	r2, [r4, #28]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	6a22      	ldr	r2, [r4, #32]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003d7c:	6822      	ldr	r2, [r4, #0]
 8003d7e:	430b      	orrs	r3, r1
 8003d80:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003d82:	8b63      	ldrh	r3, [r4, #26]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003d8a:	6822      	ldr	r2, [r4, #0]
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d90:	6822      	ldr	r2, [r4, #0]
 8003d92:	69d3      	ldr	r3, [r2, #28]
 8003d94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d98:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8003da4:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003da6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003daa:	f003 fa1b 	bl	80071e4 <HAL_SPI_MspInit>
 8003dae:	e7cb      	b.n	8003d48 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8003db0:	2001      	movs	r0, #1
}
 8003db2:	4770      	bx	lr

08003db4 <HAL_SPI_Transmit>:
{
 8003db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003db8:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8003dba:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8003dbe:	2c01      	cmp	r4, #1
 8003dc0:	f000 80c3 	beq.w	8003f4a <HAL_SPI_Transmit+0x196>
 8003dc4:	461d      	mov	r5, r3
 8003dc6:	4617      	mov	r7, r2
 8003dc8:	4688      	mov	r8, r1
 8003dca:	4604      	mov	r4, r0
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003dd2:	f7fe fb19 	bl	8002408 <HAL_GetTick>
 8003dd6:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003dd8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d009      	beq.n	8003df6 <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8003de2:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003de4:	2301      	movs	r3, #1
 8003de6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003dea:	2300      	movs	r3, #0
 8003dec:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003df0:	b002      	add	sp, #8
 8003df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8003df6:	f1b8 0f00 	cmp.w	r8, #0
 8003dfa:	f000 8098 	beq.w	8003f2e <HAL_SPI_Transmit+0x17a>
 8003dfe:	2f00      	cmp	r7, #0
 8003e00:	f000 8097 	beq.w	8003f32 <HAL_SPI_Transmit+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e04:	2303      	movs	r3, #3
 8003e06:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e0e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e12:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e14:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e16:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e18:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e1a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e1c:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e1e:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e20:	68a3      	ldr	r3, [r4, #8]
 8003e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e26:	d01c      	beq.n	8003e62 <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003e30:	d103      	bne.n	8003e3a <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e38:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e3a:	68e3      	ldr	r3, [r4, #12]
 8003e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e40:	d015      	beq.n	8003e6e <HAL_SPI_Transmit+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e42:	6863      	ldr	r3, [r4, #4]
 8003e44:	b10b      	cbz	r3, 8003e4a <HAL_SPI_Transmit+0x96>
 8003e46:	2f01      	cmp	r7, #1
 8003e48:	d149      	bne.n	8003ede <HAL_SPI_Transmit+0x12a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e4a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	7812      	ldrb	r2, [r2, #0]
 8003e50:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003e54:	3301      	adds	r3, #1
 8003e56:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003e58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003e60:	e03d      	b.n	8003ede <HAL_SPI_Transmit+0x12a>
    SPI_1LINE_TX(hspi);
 8003e62:	6822      	ldr	r2, [r4, #0]
 8003e64:	6813      	ldr	r3, [r2, #0]
 8003e66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	e7dc      	b.n	8003e28 <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e6e:	6863      	ldr	r3, [r4, #4]
 8003e70:	b10b      	cbz	r3, 8003e76 <HAL_SPI_Transmit+0xc2>
 8003e72:	2f01      	cmp	r7, #1
 8003e74:	d115      	bne.n	8003ea2 <HAL_SPI_Transmit+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	8812      	ldrh	r2, [r2, #0]
 8003e7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003e80:	3302      	adds	r3, #2
 8003e82:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003e84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003e8c:	e009      	b.n	8003ea2 <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e8e:	f7fe fabb 	bl	8002408 <HAL_GetTick>
 8003e92:	1b80      	subs	r0, r0, r6
 8003e94:	42a8      	cmp	r0, r5
 8003e96:	d302      	bcc.n	8003e9e <HAL_SPI_Transmit+0xea>
 8003e98:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003e9c:	d14b      	bne.n	8003f36 <HAL_SPI_Transmit+0x182>
 8003e9e:	2d00      	cmp	r5, #0
 8003ea0:	d04b      	beq.n	8003f3a <HAL_SPI_Transmit+0x186>
    while (hspi->TxXferCount > 0U)
 8003ea2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d02c      	beq.n	8003f04 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	f012 0f02 	tst.w	r2, #2
 8003eb2:	d0ec      	beq.n	8003e8e <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eb4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003eb6:	8812      	ldrh	r2, [r2, #0]
 8003eb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ebc:	3302      	adds	r3, #2
 8003ebe:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003ec0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003ec8:	e7eb      	b.n	8003ea2 <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eca:	f7fe fa9d 	bl	8002408 <HAL_GetTick>
 8003ece:	1b80      	subs	r0, r0, r6
 8003ed0:	42a8      	cmp	r0, r5
 8003ed2:	d302      	bcc.n	8003eda <HAL_SPI_Transmit+0x126>
 8003ed4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003ed8:	d131      	bne.n	8003f3e <HAL_SPI_Transmit+0x18a>
 8003eda:	2d00      	cmp	r5, #0
 8003edc:	d031      	beq.n	8003f42 <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 8003ede:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	b17b      	cbz	r3, 8003f04 <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	f012 0f02 	tst.w	r2, #2
 8003eec:	d0ed      	beq.n	8003eca <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003ef0:	7812      	ldrb	r2, [r2, #0]
 8003ef2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ef4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003efa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003f02:	e7ec      	b.n	8003ede <HAL_SPI_Transmit+0x12a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f04:	4632      	mov	r2, r6
 8003f06:	4629      	mov	r1, r5
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f7ff fe93 	bl	8003c34 <SPI_EndRxTxTransaction>
 8003f0e:	b108      	cbz	r0, 8003f14 <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f10:	2320      	movs	r3, #32
 8003f12:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f14:	68a3      	ldr	r3, [r4, #8]
 8003f16:	b933      	cbnz	r3, 8003f26 <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f18:	9301      	str	r3, [sp, #4]
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	9201      	str	r2, [sp, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	9301      	str	r3, [sp, #4]
 8003f24:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003f28:	b96b      	cbnz	r3, 8003f46 <HAL_SPI_Transmit+0x192>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	e75a      	b.n	8003de4 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8003f2e:	2001      	movs	r0, #1
 8003f30:	e758      	b.n	8003de4 <HAL_SPI_Transmit+0x30>
 8003f32:	2001      	movs	r0, #1
 8003f34:	e756      	b.n	8003de4 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8003f36:	2003      	movs	r0, #3
 8003f38:	e754      	b.n	8003de4 <HAL_SPI_Transmit+0x30>
 8003f3a:	2003      	movs	r0, #3
 8003f3c:	e752      	b.n	8003de4 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8003f3e:	2003      	movs	r0, #3
 8003f40:	e750      	b.n	8003de4 <HAL_SPI_Transmit+0x30>
 8003f42:	2003      	movs	r0, #3
 8003f44:	e74e      	b.n	8003de4 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8003f46:	2001      	movs	r0, #1
 8003f48:	e74c      	b.n	8003de4 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8003f4a:	2002      	movs	r0, #2
 8003f4c:	e750      	b.n	8003df0 <HAL_SPI_Transmit+0x3c>

08003f4e <HAL_SPI_TransmitReceive>:
{
 8003f4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f52:	b083      	sub	sp, #12
 8003f54:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8003f58:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8003f5c:	2c01      	cmp	r4, #1
 8003f5e:	f000 810b 	beq.w	8004178 <HAL_SPI_TransmitReceive+0x22a>
 8003f62:	461d      	mov	r5, r3
 8003f64:	4617      	mov	r7, r2
 8003f66:	460e      	mov	r6, r1
 8003f68:	4604      	mov	r4, r0
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003f70:	f7fe fa4a 	bl	8002408 <HAL_GetTick>
 8003f74:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8003f76:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8003f7a:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8003f7c:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f7e:	2801      	cmp	r0, #1
 8003f80:	d015      	beq.n	8003fae <HAL_SPI_TransmitReceive+0x60>
 8003f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f86:	d00a      	beq.n	8003f9e <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 8003f88:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f90:	2200      	movs	r2, #0
 8003f92:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	b003      	add	sp, #12
 8003f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f9e:	68a3      	ldr	r3, [r4, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f040 80db 	bne.w	800415c <HAL_SPI_TransmitReceive+0x20e>
 8003fa6:	2804      	cmp	r0, #4
 8003fa8:	d001      	beq.n	8003fae <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 8003faa:	2302      	movs	r3, #2
 8003fac:	e7ed      	b.n	8003f8a <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fae:	2e00      	cmp	r6, #0
 8003fb0:	f000 80d6 	beq.w	8004160 <HAL_SPI_TransmitReceive+0x212>
 8003fb4:	2f00      	cmp	r7, #0
 8003fb6:	f000 80d5 	beq.w	8004164 <HAL_SPI_TransmitReceive+0x216>
 8003fba:	2d00      	cmp	r5, #0
 8003fbc:	f000 80d4 	beq.w	8004168 <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fc0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d002      	beq.n	8003fd0 <HAL_SPI_TransmitReceive+0x82>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fca:	2305      	movs	r3, #5
 8003fcc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fd4:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003fd6:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003fd8:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fda:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003fdc:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003fde:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8003fe0:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003fe2:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003fec:	d103      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ff4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ff6:	68e3      	ldr	r3, [r4, #12]
 8003ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ffc:	d010      	beq.n	8004020 <HAL_SPI_TransmitReceive+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ffe:	6863      	ldr	r3, [r4, #4]
 8004000:	b10b      	cbz	r3, 8004006 <HAL_SPI_TransmitReceive+0xb8>
 8004002:	2d01      	cmp	r5, #1
 8004004:	d10a      	bne.n	800401c <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004006:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004008:	6823      	ldr	r3, [r4, #0]
 800400a:	7812      	ldrb	r2, [r2, #0]
 800400c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800400e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004010:	3301      	adds	r3, #1
 8004012:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004014:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004016:	3b01      	subs	r3, #1
 8004018:	b29b      	uxth	r3, r3
 800401a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800401c:	2501      	movs	r5, #1
 800401e:	e069      	b.n	80040f4 <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004020:	6863      	ldr	r3, [r4, #4]
 8004022:	b10b      	cbz	r3, 8004028 <HAL_SPI_TransmitReceive+0xda>
 8004024:	2d01      	cmp	r5, #1
 8004026:	d10a      	bne.n	800403e <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004028:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	8812      	ldrh	r2, [r2, #0]
 800402e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004030:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004032:	3302      	adds	r3, #2
 8004034:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004036:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004038:	3b01      	subs	r3, #1
 800403a:	b29b      	uxth	r3, r3
 800403c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800403e:	2501      	movs	r5, #1
 8004040:	e01b      	b.n	800407a <HAL_SPI_TransmitReceive+0x12c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	f012 0f01 	tst.w	r2, #1
 800404a:	d00d      	beq.n	8004068 <HAL_SPI_TransmitReceive+0x11a>
 800404c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800404e:	b292      	uxth	r2, r2
 8004050:	b152      	cbz	r2, 8004068 <HAL_SPI_TransmitReceive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004056:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004058:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800405a:	3302      	adds	r3, #2
 800405c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800405e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004060:	3b01      	subs	r3, #1
 8004062:	b29b      	uxth	r3, r3
 8004064:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004066:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004068:	f7fe f9ce 	bl	8002408 <HAL_GetTick>
 800406c:	eba0 0009 	sub.w	r0, r0, r9
 8004070:	4540      	cmp	r0, r8
 8004072:	d302      	bcc.n	800407a <HAL_SPI_TransmitReceive+0x12c>
 8004074:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004078:	d178      	bne.n	800416c <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800407a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800407c:	b29b      	uxth	r3, r3
 800407e:	b91b      	cbnz	r3, 8004088 <HAL_SPI_TransmitReceive+0x13a>
 8004080:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004082:	b29b      	uxth	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d052      	beq.n	800412e <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	f012 0f02 	tst.w	r2, #2
 8004090:	d0d7      	beq.n	8004042 <HAL_SPI_TransmitReceive+0xf4>
 8004092:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004094:	b292      	uxth	r2, r2
 8004096:	2a00      	cmp	r2, #0
 8004098:	d0d3      	beq.n	8004042 <HAL_SPI_TransmitReceive+0xf4>
 800409a:	2d00      	cmp	r5, #0
 800409c:	d0d1      	beq.n	8004042 <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800409e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80040a0:	8812      	ldrh	r2, [r2, #0]
 80040a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80040a6:	3302      	adds	r3, #2
 80040a8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80040aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80040b2:	2500      	movs	r5, #0
 80040b4:	e7c5      	b.n	8004042 <HAL_SPI_TransmitReceive+0xf4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	689a      	ldr	r2, [r3, #8]
 80040ba:	f012 0f01 	tst.w	r2, #1
 80040be:	d00d      	beq.n	80040dc <HAL_SPI_TransmitReceive+0x18e>
 80040c0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80040c2:	b292      	uxth	r2, r2
 80040c4:	b152      	cbz	r2, 80040dc <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040ce:	3301      	adds	r3, #1
 80040d0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80040d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80040da:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040dc:	f7fe f994 	bl	8002408 <HAL_GetTick>
 80040e0:	eba0 0009 	sub.w	r0, r0, r9
 80040e4:	4540      	cmp	r0, r8
 80040e6:	d302      	bcc.n	80040ee <HAL_SPI_TransmitReceive+0x1a0>
 80040e8:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80040ec:	d140      	bne.n	8004170 <HAL_SPI_TransmitReceive+0x222>
 80040ee:	f1b8 0f00 	cmp.w	r8, #0
 80040f2:	d03f      	beq.n	8004174 <HAL_SPI_TransmitReceive+0x226>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	b913      	cbnz	r3, 8004100 <HAL_SPI_TransmitReceive+0x1b2>
 80040fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	b1b3      	cbz	r3, 800412e <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	f012 0f02 	tst.w	r2, #2
 8004108:	d0d5      	beq.n	80040b6 <HAL_SPI_TransmitReceive+0x168>
 800410a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800410c:	b292      	uxth	r2, r2
 800410e:	2a00      	cmp	r2, #0
 8004110:	d0d1      	beq.n	80040b6 <HAL_SPI_TransmitReceive+0x168>
 8004112:	2d00      	cmp	r5, #0
 8004114:	d0cf      	beq.n	80040b6 <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004116:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004118:	7812      	ldrb	r2, [r2, #0]
 800411a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800411c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800411e:	3301      	adds	r3, #1
 8004120:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004122:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004124:	3b01      	subs	r3, #1
 8004126:	b29b      	uxth	r3, r3
 8004128:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800412a:	2500      	movs	r5, #0
 800412c:	e7c3      	b.n	80040b6 <HAL_SPI_TransmitReceive+0x168>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800412e:	464a      	mov	r2, r9
 8004130:	4641      	mov	r1, r8
 8004132:	4620      	mov	r0, r4
 8004134:	f7ff fd7e 	bl	8003c34 <SPI_EndRxTxTransaction>
 8004138:	4603      	mov	r3, r0
 800413a:	b118      	cbz	r0, 8004144 <HAL_SPI_TransmitReceive+0x1f6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800413c:	2320      	movs	r3, #32
 800413e:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
    goto error;
 8004142:	e722      	b.n	8003f8a <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004144:	68a2      	ldr	r2, [r4, #8]
 8004146:	2a00      	cmp	r2, #0
 8004148:	f47f af1f 	bne.w	8003f8a <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800414c:	9201      	str	r2, [sp, #4]
 800414e:	6822      	ldr	r2, [r4, #0]
 8004150:	68d1      	ldr	r1, [r2, #12]
 8004152:	9101      	str	r1, [sp, #4]
 8004154:	6892      	ldr	r2, [r2, #8]
 8004156:	9201      	str	r2, [sp, #4]
 8004158:	9a01      	ldr	r2, [sp, #4]
 800415a:	e716      	b.n	8003f8a <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 800415c:	2302      	movs	r3, #2
 800415e:	e714      	b.n	8003f8a <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e712      	b.n	8003f8a <HAL_SPI_TransmitReceive+0x3c>
 8004164:	2301      	movs	r3, #1
 8004166:	e710      	b.n	8003f8a <HAL_SPI_TransmitReceive+0x3c>
 8004168:	2301      	movs	r3, #1
 800416a:	e70e      	b.n	8003f8a <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e70c      	b.n	8003f8a <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e70a      	b.n	8003f8a <HAL_SPI_TransmitReceive+0x3c>
 8004174:	2303      	movs	r3, #3
 8004176:	e708      	b.n	8003f8a <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 8004178:	2302      	movs	r3, #2
 800417a:	e70c      	b.n	8003f96 <HAL_SPI_TransmitReceive+0x48>

0800417c <HAL_SPI_Receive>:
{
 800417c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004180:	b082      	sub	sp, #8
 8004182:	4604      	mov	r4, r0
 8004184:	460f      	mov	r7, r1
 8004186:	4690      	mov	r8, r2
 8004188:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800418a:	6843      	ldr	r3, [r0, #4]
 800418c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004190:	d019      	beq.n	80041c6 <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 8004192:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8004196:	2b01      	cmp	r3, #1
 8004198:	f000 809f 	beq.w	80042da <HAL_SPI_Receive+0x15e>
 800419c:	2301      	movs	r3, #1
 800419e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80041a2:	f7fe f931 	bl	8002408 <HAL_GetTick>
 80041a6:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80041a8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d015      	beq.n	80041de <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 80041b2:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80041b4:	2301      	movs	r3, #1
 80041b6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80041ba:	2300      	movs	r3, #0
 80041bc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80041c0:	b002      	add	sp, #8
 80041c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80041c6:	6883      	ldr	r3, [r0, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e2      	bne.n	8004192 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80041cc:	2304      	movs	r3, #4
 80041ce:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80041d2:	9500      	str	r5, [sp, #0]
 80041d4:	4613      	mov	r3, r2
 80041d6:	460a      	mov	r2, r1
 80041d8:	f7ff feb9 	bl	8003f4e <HAL_SPI_TransmitReceive>
 80041dc:	e7f0      	b.n	80041c0 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 80041de:	2f00      	cmp	r7, #0
 80041e0:	d06d      	beq.n	80042be <HAL_SPI_Receive+0x142>
 80041e2:	f1b8 0f00 	cmp.w	r8, #0
 80041e6:	d06c      	beq.n	80042c2 <HAL_SPI_Receive+0x146>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80041e8:	2304      	movs	r3, #4
 80041ea:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80041f2:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80041f4:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80041f8:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80041fc:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80041fe:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004200:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004202:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004204:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004206:	68a3      	ldr	r3, [r4, #8]
 8004208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800420c:	d00b      	beq.n	8004226 <HAL_SPI_Receive+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004216:	d103      	bne.n	8004220 <HAL_SPI_Receive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800421e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004220:	68e3      	ldr	r3, [r4, #12]
 8004222:	b183      	cbz	r3, 8004246 <HAL_SPI_Receive+0xca>
 8004224:	e02c      	b.n	8004280 <HAL_SPI_Receive+0x104>
    SPI_1LINE_RX(hspi);
 8004226:	6822      	ldr	r2, [r4, #0]
 8004228:	6813      	ldr	r3, [r2, #0]
 800422a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	e7ed      	b.n	800420e <HAL_SPI_Receive+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004232:	f7fe f8e9 	bl	8002408 <HAL_GetTick>
 8004236:	1b80      	subs	r0, r0, r6
 8004238:	42a8      	cmp	r0, r5
 800423a:	d302      	bcc.n	8004242 <HAL_SPI_Receive+0xc6>
 800423c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004240:	d141      	bne.n	80042c6 <HAL_SPI_Receive+0x14a>
 8004242:	2d00      	cmp	r5, #0
 8004244:	d041      	beq.n	80042ca <HAL_SPI_Receive+0x14e>
    while (hspi->RxXferCount > 0U)
 8004246:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d02b      	beq.n	80042a6 <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	f012 0f01 	tst.w	r2, #1
 8004256:	d0ec      	beq.n	8004232 <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004258:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800425a:	7b1b      	ldrb	r3, [r3, #12]
 800425c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800425e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004260:	3301      	adds	r3, #1
 8004262:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004264:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004266:	3b01      	subs	r3, #1
 8004268:	b29b      	uxth	r3, r3
 800426a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800426c:	e7eb      	b.n	8004246 <HAL_SPI_Receive+0xca>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800426e:	f7fe f8cb 	bl	8002408 <HAL_GetTick>
 8004272:	1b80      	subs	r0, r0, r6
 8004274:	42a8      	cmp	r0, r5
 8004276:	d302      	bcc.n	800427e <HAL_SPI_Receive+0x102>
 8004278:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800427c:	d127      	bne.n	80042ce <HAL_SPI_Receive+0x152>
 800427e:	b345      	cbz	r5, 80042d2 <HAL_SPI_Receive+0x156>
    while (hspi->RxXferCount > 0U)
 8004280:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004282:	b29b      	uxth	r3, r3
 8004284:	b17b      	cbz	r3, 80042a6 <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	f012 0f01 	tst.w	r2, #1
 800428e:	d0ee      	beq.n	800426e <HAL_SPI_Receive+0xf2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004294:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004296:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004298:	3302      	adds	r3, #2
 800429a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800429c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80042a4:	e7ec      	b.n	8004280 <HAL_SPI_Receive+0x104>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042a6:	4632      	mov	r2, r6
 80042a8:	4629      	mov	r1, r5
 80042aa:	4620      	mov	r0, r4
 80042ac:	f7ff fcf6 	bl	8003c9c <SPI_EndRxTransaction>
 80042b0:	b108      	cbz	r0, 80042b6 <HAL_SPI_Receive+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042b2:	2320      	movs	r3, #32
 80042b4:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042b8:	b96b      	cbnz	r3, 80042d6 <HAL_SPI_Receive+0x15a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042ba:	2000      	movs	r0, #0
 80042bc:	e77a      	b.n	80041b4 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 80042be:	2001      	movs	r0, #1
 80042c0:	e778      	b.n	80041b4 <HAL_SPI_Receive+0x38>
 80042c2:	2001      	movs	r0, #1
 80042c4:	e776      	b.n	80041b4 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 80042c6:	2003      	movs	r0, #3
 80042c8:	e774      	b.n	80041b4 <HAL_SPI_Receive+0x38>
 80042ca:	2003      	movs	r0, #3
 80042cc:	e772      	b.n	80041b4 <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 80042ce:	2003      	movs	r0, #3
 80042d0:	e770      	b.n	80041b4 <HAL_SPI_Receive+0x38>
 80042d2:	2003      	movs	r0, #3
 80042d4:	e76e      	b.n	80041b4 <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 80042d6:	2001      	movs	r0, #1
 80042d8:	e76c      	b.n	80041b4 <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 80042da:	2002      	movs	r0, #2
 80042dc:	e770      	b.n	80041c0 <HAL_SPI_Receive+0x44>
	...

080042e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042e0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042e2:	6a03      	ldr	r3, [r0, #32]
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ec:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ee:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042f0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f4:	680d      	ldr	r5, [r1, #0]
 80042f6:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042fa:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042fe:	688b      	ldr	r3, [r1, #8]
 8004300:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004302:	4d0d      	ldr	r5, [pc, #52]	; (8004338 <TIM_OC1_SetConfig+0x58>)
 8004304:	42a8      	cmp	r0, r5
 8004306:	d009      	beq.n	800431c <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004308:	4d0b      	ldr	r5, [pc, #44]	; (8004338 <TIM_OC1_SetConfig+0x58>)
 800430a:	42a8      	cmp	r0, r5
 800430c:	d00d      	beq.n	800432a <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004310:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004312:	684a      	ldr	r2, [r1, #4]
 8004314:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004316:	6203      	str	r3, [r0, #32]
}
 8004318:	bc70      	pop	{r4, r5, r6}
 800431a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 800431c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004320:	68cc      	ldr	r4, [r1, #12]
 8004322:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8004324:	f023 0304 	bic.w	r3, r3, #4
 8004328:	e7ee      	b.n	8004308 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800432a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 800432e:	694c      	ldr	r4, [r1, #20]
 8004330:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8004332:	698a      	ldr	r2, [r1, #24]
 8004334:	4322      	orrs	r2, r4
 8004336:	e7ea      	b.n	800430e <TIM_OC1_SetConfig+0x2e>
 8004338:	40010000 	.word	0x40010000

0800433c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800433c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800433e:	6a03      	ldr	r3, [r0, #32]
 8004340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004344:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004346:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004348:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800434a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800434c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004350:	680d      	ldr	r5, [r1, #0]
 8004352:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004354:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004358:	688d      	ldr	r5, [r1, #8]
 800435a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800435e:	4d0f      	ldr	r5, [pc, #60]	; (800439c <TIM_OC3_SetConfig+0x60>)
 8004360:	42a8      	cmp	r0, r5
 8004362:	d009      	beq.n	8004378 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004364:	4d0d      	ldr	r5, [pc, #52]	; (800439c <TIM_OC3_SetConfig+0x60>)
 8004366:	42a8      	cmp	r0, r5
 8004368:	d00e      	beq.n	8004388 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800436c:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800436e:	684a      	ldr	r2, [r1, #4]
 8004370:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004372:	6203      	str	r3, [r0, #32]
}
 8004374:	bc30      	pop	{r4, r5}
 8004376:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8004378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800437c:	68cd      	ldr	r5, [r1, #12]
 800437e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004382:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004386:	e7ed      	b.n	8004364 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004388:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800438c:	694d      	ldr	r5, [r1, #20]
 800438e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004392:	698d      	ldr	r5, [r1, #24]
 8004394:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8004398:	e7e7      	b.n	800436a <TIM_OC3_SetConfig+0x2e>
 800439a:	bf00      	nop
 800439c:	40010000 	.word	0x40010000

080043a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043a0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043a2:	6a03      	ldr	r3, [r0, #32]
 80043a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043a8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043aa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ae:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043b0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b4:	680d      	ldr	r5, [r1, #0]
 80043b6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043be:	688d      	ldr	r5, [r1, #8]
 80043c0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c4:	4d07      	ldr	r5, [pc, #28]	; (80043e4 <TIM_OC4_SetConfig+0x44>)
 80043c6:	42a8      	cmp	r0, r5
 80043c8:	d006      	beq.n	80043d8 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043cc:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043ce:	684a      	ldr	r2, [r1, #4]
 80043d0:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d2:	6203      	str	r3, [r0, #32]
}
 80043d4:	bc30      	pop	{r4, r5}
 80043d6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043d8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043dc:	694d      	ldr	r5, [r1, #20]
 80043de:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80043e2:	e7f2      	b.n	80043ca <TIM_OC4_SetConfig+0x2a>
 80043e4:	40010000 	.word	0x40010000

080043e8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80043e8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043ea:	4a25      	ldr	r2, [pc, #148]	; (8004480 <TIM_Base_SetConfig+0x98>)
 80043ec:	4290      	cmp	r0, r2
 80043ee:	d00e      	beq.n	800440e <TIM_Base_SetConfig+0x26>
 80043f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80043f4:	d00b      	beq.n	800440e <TIM_Base_SetConfig+0x26>
 80043f6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80043fa:	4290      	cmp	r0, r2
 80043fc:	d007      	beq.n	800440e <TIM_Base_SetConfig+0x26>
 80043fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004402:	4290      	cmp	r0, r2
 8004404:	d003      	beq.n	800440e <TIM_Base_SetConfig+0x26>
 8004406:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800440a:	4290      	cmp	r0, r2
 800440c:	d103      	bne.n	8004416 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800440e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004412:	684a      	ldr	r2, [r1, #4]
 8004414:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004416:	4a1a      	ldr	r2, [pc, #104]	; (8004480 <TIM_Base_SetConfig+0x98>)
 8004418:	4290      	cmp	r0, r2
 800441a:	d01a      	beq.n	8004452 <TIM_Base_SetConfig+0x6a>
 800441c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004420:	d017      	beq.n	8004452 <TIM_Base_SetConfig+0x6a>
 8004422:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004426:	4290      	cmp	r0, r2
 8004428:	d013      	beq.n	8004452 <TIM_Base_SetConfig+0x6a>
 800442a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800442e:	4290      	cmp	r0, r2
 8004430:	d00f      	beq.n	8004452 <TIM_Base_SetConfig+0x6a>
 8004432:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004436:	4290      	cmp	r0, r2
 8004438:	d00b      	beq.n	8004452 <TIM_Base_SetConfig+0x6a>
 800443a:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800443e:	4290      	cmp	r0, r2
 8004440:	d007      	beq.n	8004452 <TIM_Base_SetConfig+0x6a>
 8004442:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004446:	4290      	cmp	r0, r2
 8004448:	d003      	beq.n	8004452 <TIM_Base_SetConfig+0x6a>
 800444a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800444e:	4290      	cmp	r0, r2
 8004450:	d103      	bne.n	800445a <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004456:	68ca      	ldr	r2, [r1, #12]
 8004458:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800445a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800445e:	694a      	ldr	r2, [r1, #20]
 8004460:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004462:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004464:	688b      	ldr	r3, [r1, #8]
 8004466:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004468:	680b      	ldr	r3, [r1, #0]
 800446a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800446c:	4b04      	ldr	r3, [pc, #16]	; (8004480 <TIM_Base_SetConfig+0x98>)
 800446e:	4298      	cmp	r0, r3
 8004470:	d002      	beq.n	8004478 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8004472:	2301      	movs	r3, #1
 8004474:	6143      	str	r3, [r0, #20]
}
 8004476:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8004478:	690b      	ldr	r3, [r1, #16]
 800447a:	6303      	str	r3, [r0, #48]	; 0x30
 800447c:	e7f9      	b.n	8004472 <TIM_Base_SetConfig+0x8a>
 800447e:	bf00      	nop
 8004480:	40010000 	.word	0x40010000

08004484 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004484:	b1a8      	cbz	r0, 80044b2 <HAL_TIM_Base_Init+0x2e>
{
 8004486:	b510      	push	{r4, lr}
 8004488:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800448a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800448e:	b15b      	cbz	r3, 80044a8 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	2302      	movs	r3, #2
 8004492:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004496:	1d21      	adds	r1, r4, #4
 8004498:	6820      	ldr	r0, [r4, #0]
 800449a:	f7ff ffa5 	bl	80043e8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800449e:	2301      	movs	r3, #1
 80044a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80044a4:	2000      	movs	r0, #0
}
 80044a6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80044a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80044ac:	f002 ff00 	bl	80072b0 <HAL_TIM_Base_MspInit>
 80044b0:	e7ee      	b.n	8004490 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80044b2:	2001      	movs	r0, #1
}
 80044b4:	4770      	bx	lr

080044b6 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80044b6:	b1a8      	cbz	r0, 80044e4 <HAL_TIM_PWM_Init+0x2e>
{
 80044b8:	b510      	push	{r4, lr}
 80044ba:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80044bc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80044c0:	b15b      	cbz	r3, 80044da <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80044c2:	2302      	movs	r3, #2
 80044c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c8:	1d21      	adds	r1, r4, #4
 80044ca:	6820      	ldr	r0, [r4, #0]
 80044cc:	f7ff ff8c 	bl	80043e8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80044d0:	2301      	movs	r3, #1
 80044d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80044d6:	2000      	movs	r0, #0
}
 80044d8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80044da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80044de:	f002 fecf 	bl	8007280 <HAL_TIM_PWM_MspInit>
 80044e2:	e7ee      	b.n	80044c2 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80044e4:	2001      	movs	r0, #1
}
 80044e6:	4770      	bx	lr

080044e8 <TIM_OC2_SetConfig>:
{
 80044e8:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ea:	6a03      	ldr	r3, [r0, #32]
 80044ec:	f023 0310 	bic.w	r3, r3, #16
 80044f0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80044f2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80044f4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80044f6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044f8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044fc:	680d      	ldr	r5, [r1, #0]
 80044fe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8004502:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004506:	688d      	ldr	r5, [r1, #8]
 8004508:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800450c:	4d0e      	ldr	r5, [pc, #56]	; (8004548 <TIM_OC2_SetConfig+0x60>)
 800450e:	42a8      	cmp	r0, r5
 8004510:	d009      	beq.n	8004526 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004512:	4d0d      	ldr	r5, [pc, #52]	; (8004548 <TIM_OC2_SetConfig+0x60>)
 8004514:	42a8      	cmp	r0, r5
 8004516:	d00e      	beq.n	8004536 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8004518:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800451a:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800451c:	684a      	ldr	r2, [r1, #4]
 800451e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004520:	6203      	str	r3, [r0, #32]
}
 8004522:	bc30      	pop	{r4, r5}
 8004524:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8004526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800452a:	68cd      	ldr	r5, [r1, #12]
 800452c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004534:	e7ed      	b.n	8004512 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004536:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800453a:	694d      	ldr	r5, [r1, #20]
 800453c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004540:	698d      	ldr	r5, [r1, #24]
 8004542:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004546:	e7e7      	b.n	8004518 <TIM_OC2_SetConfig+0x30>
 8004548:	40010000 	.word	0x40010000

0800454c <HAL_TIM_PWM_ConfigChannel>:
{
 800454c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800454e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004552:	2b01      	cmp	r3, #1
 8004554:	d066      	beq.n	8004624 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8004556:	460d      	mov	r5, r1
 8004558:	4604      	mov	r4, r0
 800455a:	2301      	movs	r3, #1
 800455c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	2302      	movs	r3, #2
 8004562:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8004566:	2a0c      	cmp	r2, #12
 8004568:	d81a      	bhi.n	80045a0 <HAL_TIM_PWM_ConfigChannel+0x54>
 800456a:	e8df f002 	tbb	[pc, r2]
 800456e:	1907      	.short	0x1907
 8004570:	19201919 	.word	0x19201919
 8004574:	19341919 	.word	0x19341919
 8004578:	1919      	.short	0x1919
 800457a:	47          	.byte	0x47
 800457b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800457c:	6800      	ldr	r0, [r0, #0]
 800457e:	f7ff feaf 	bl	80042e0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004582:	6822      	ldr	r2, [r4, #0]
 8004584:	6993      	ldr	r3, [r2, #24]
 8004586:	f043 0308 	orr.w	r3, r3, #8
 800458a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800458c:	6822      	ldr	r2, [r4, #0]
 800458e:	6993      	ldr	r3, [r2, #24]
 8004590:	f023 0304 	bic.w	r3, r3, #4
 8004594:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004596:	6822      	ldr	r2, [r4, #0]
 8004598:	6993      	ldr	r3, [r2, #24]
 800459a:	6929      	ldr	r1, [r5, #16]
 800459c:	430b      	orrs	r3, r1
 800459e:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 80045a0:	2301      	movs	r3, #1
 80045a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80045a6:	2000      	movs	r0, #0
 80045a8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80045ac:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045ae:	6800      	ldr	r0, [r0, #0]
 80045b0:	f7ff ff9a 	bl	80044e8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045b4:	6822      	ldr	r2, [r4, #0]
 80045b6:	6993      	ldr	r3, [r2, #24]
 80045b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045bc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045be:	6822      	ldr	r2, [r4, #0]
 80045c0:	6993      	ldr	r3, [r2, #24]
 80045c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045c6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045c8:	6822      	ldr	r2, [r4, #0]
 80045ca:	6993      	ldr	r3, [r2, #24]
 80045cc:	6929      	ldr	r1, [r5, #16]
 80045ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80045d2:	6193      	str	r3, [r2, #24]
      break;
 80045d4:	e7e4      	b.n	80045a0 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045d6:	6800      	ldr	r0, [r0, #0]
 80045d8:	f7ff feb0 	bl	800433c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045dc:	6822      	ldr	r2, [r4, #0]
 80045de:	69d3      	ldr	r3, [r2, #28]
 80045e0:	f043 0308 	orr.w	r3, r3, #8
 80045e4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045e6:	6822      	ldr	r2, [r4, #0]
 80045e8:	69d3      	ldr	r3, [r2, #28]
 80045ea:	f023 0304 	bic.w	r3, r3, #4
 80045ee:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045f0:	6822      	ldr	r2, [r4, #0]
 80045f2:	69d3      	ldr	r3, [r2, #28]
 80045f4:	6929      	ldr	r1, [r5, #16]
 80045f6:	430b      	orrs	r3, r1
 80045f8:	61d3      	str	r3, [r2, #28]
      break;
 80045fa:	e7d1      	b.n	80045a0 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045fc:	6800      	ldr	r0, [r0, #0]
 80045fe:	f7ff fecf 	bl	80043a0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004602:	6822      	ldr	r2, [r4, #0]
 8004604:	69d3      	ldr	r3, [r2, #28]
 8004606:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800460a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800460c:	6822      	ldr	r2, [r4, #0]
 800460e:	69d3      	ldr	r3, [r2, #28]
 8004610:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004614:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004616:	6822      	ldr	r2, [r4, #0]
 8004618:	69d3      	ldr	r3, [r2, #28]
 800461a:	6929      	ldr	r1, [r5, #16]
 800461c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004620:	61d3      	str	r3, [r2, #28]
      break;
 8004622:	e7bd      	b.n	80045a0 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8004624:	2002      	movs	r0, #2
 8004626:	e7c1      	b.n	80045ac <HAL_TIM_PWM_ConfigChannel+0x60>

08004628 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004628:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800462a:	f001 011f 	and.w	r1, r1, #31
 800462e:	2301      	movs	r3, #1
 8004630:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004634:	6a03      	ldr	r3, [r0, #32]
 8004636:	ea23 0304 	bic.w	r3, r3, r4
 800463a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800463c:	6a03      	ldr	r3, [r0, #32]
 800463e:	408a      	lsls	r2, r1
 8004640:	4313      	orrs	r3, r2
 8004642:	6203      	str	r3, [r0, #32]
}
 8004644:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004648:	4770      	bx	lr
	...

0800464c <HAL_TIM_PWM_Start>:
{
 800464c:	b510      	push	{r4, lr}
 800464e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004650:	2201      	movs	r2, #1
 8004652:	6800      	ldr	r0, [r0, #0]
 8004654:	f7ff ffe8 	bl	8004628 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <HAL_TIM_PWM_Start+0x38>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00b      	beq.n	8004678 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004660:	6822      	ldr	r2, [r4, #0]
 8004662:	6893      	ldr	r3, [r2, #8]
 8004664:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004668:	2b06      	cmp	r3, #6
 800466a:	d003      	beq.n	8004674 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 800466c:	6813      	ldr	r3, [r2, #0]
 800466e:	f043 0301 	orr.w	r3, r3, #1
 8004672:	6013      	str	r3, [r2, #0]
}
 8004674:	2000      	movs	r0, #0
 8004676:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8004678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800467a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800467e:	645a      	str	r2, [r3, #68]	; 0x44
 8004680:	e7ee      	b.n	8004660 <HAL_TIM_PWM_Start+0x14>
 8004682:	bf00      	nop
 8004684:	40010000 	.word	0x40010000

08004688 <HAL_TIM_PWM_Stop>:
{
 8004688:	b510      	push	{r4, lr}
 800468a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800468c:	2200      	movs	r2, #0
 800468e:	6800      	ldr	r0, [r0, #0]
 8004690:	f7ff ffca 	bl	8004628 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	4a13      	ldr	r2, [pc, #76]	; (80046e4 <HAL_TIM_PWM_Stop+0x5c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d013      	beq.n	80046c4 <HAL_TIM_PWM_Stop+0x3c>
  __HAL_TIM_DISABLE(htim);
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	6a19      	ldr	r1, [r3, #32]
 80046a0:	f241 1211 	movw	r2, #4369	; 0x1111
 80046a4:	4211      	tst	r1, r2
 80046a6:	d108      	bne.n	80046ba <HAL_TIM_PWM_Stop+0x32>
 80046a8:	6a19      	ldr	r1, [r3, #32]
 80046aa:	f240 4244 	movw	r2, #1092	; 0x444
 80046ae:	4211      	tst	r1, r2
 80046b0:	d103      	bne.n	80046ba <HAL_TIM_PWM_Stop+0x32>
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	f022 0201 	bic.w	r2, r2, #1
 80046b8:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80046ba:	2301      	movs	r3, #1
 80046bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80046c0:	2000      	movs	r0, #0
 80046c2:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 80046c4:	6a19      	ldr	r1, [r3, #32]
 80046c6:	f241 1211 	movw	r2, #4369	; 0x1111
 80046ca:	4211      	tst	r1, r2
 80046cc:	d1e6      	bne.n	800469c <HAL_TIM_PWM_Stop+0x14>
 80046ce:	6a19      	ldr	r1, [r3, #32]
 80046d0:	f240 4244 	movw	r2, #1092	; 0x444
 80046d4:	4211      	tst	r1, r2
 80046d6:	d1e1      	bne.n	800469c <HAL_TIM_PWM_Stop+0x14>
 80046d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046de:	645a      	str	r2, [r3, #68]	; 0x44
 80046e0:	e7dc      	b.n	800469c <HAL_TIM_PWM_Stop+0x14>
 80046e2:	bf00      	nop
 80046e4:	40010000 	.word	0x40010000

080046e8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d01c      	beq.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 80046f0:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 80046f2:	2601      	movs	r6, #1
 80046f4:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	2302      	movs	r3, #2
 80046fa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046fe:	6802      	ldr	r2, [r0, #0]
 8004700:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004702:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004704:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004708:	680c      	ldr	r4, [r1, #0]
 800470a:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800470c:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004710:	684b      	ldr	r3, [r1, #4]
 8004712:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004714:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004716:	6802      	ldr	r2, [r0, #0]
 8004718:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800471a:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800471e:	2300      	movs	r3, #0
 8004720:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004724:	4618      	mov	r0, r3
}
 8004726:	bc70      	pop	{r4, r5, r6}
 8004728:	4770      	bx	lr
  __HAL_LOCK(htim);
 800472a:	2002      	movs	r0, #2
}
 800472c:	4770      	bx	lr
	...

08004730 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004734:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004736:	6802      	ldr	r2, [r0, #0]
 8004738:	6913      	ldr	r3, [r2, #16]
 800473a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800473e:	68c1      	ldr	r1, [r0, #12]
 8004740:	430b      	orrs	r3, r1
 8004742:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004744:	6883      	ldr	r3, [r0, #8]
 8004746:	6902      	ldr	r2, [r0, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	6942      	ldr	r2, [r0, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	69c2      	ldr	r2, [r0, #28]
 8004750:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8004752:	6801      	ldr	r1, [r0, #0]
 8004754:	68cb      	ldr	r3, [r1, #12]
 8004756:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800475a:	f023 030c 	bic.w	r3, r3, #12
 800475e:	4313      	orrs	r3, r2
 8004760:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004762:	6802      	ldr	r2, [r0, #0]
 8004764:	6953      	ldr	r3, [r2, #20]
 8004766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476a:	6981      	ldr	r1, [r0, #24]
 800476c:	430b      	orrs	r3, r1
 800476e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004770:	69c3      	ldr	r3, [r0, #28]
 8004772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004776:	d060      	beq.n	800483a <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004778:	6803      	ldr	r3, [r0, #0]
 800477a:	4ab8      	ldr	r2, [pc, #736]	; (8004a5c <UART_SetConfig+0x32c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	f000 8114 	beq.w	80049aa <UART_SetConfig+0x27a>
 8004782:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004786:	4293      	cmp	r3, r2
 8004788:	f000 810f 	beq.w	80049aa <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800478c:	f7ff f9ea 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 8004790:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004794:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004798:	6865      	ldr	r5, [r4, #4]
 800479a:	00ad      	lsls	r5, r5, #2
 800479c:	fbb0 f5f5 	udiv	r5, r0, r5
 80047a0:	4faf      	ldr	r7, [pc, #700]	; (8004a60 <UART_SetConfig+0x330>)
 80047a2:	fba7 3505 	umull	r3, r5, r7, r5
 80047a6:	096d      	lsrs	r5, r5, #5
 80047a8:	012e      	lsls	r6, r5, #4
 80047aa:	f7ff f9db 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 80047ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80047b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80047b6:	6865      	ldr	r5, [r4, #4]
 80047b8:	00ad      	lsls	r5, r5, #2
 80047ba:	fbb0 f9f5 	udiv	r9, r0, r5
 80047be:	f7ff f9d1 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 80047c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80047c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80047ca:	6865      	ldr	r5, [r4, #4]
 80047cc:	00ad      	lsls	r5, r5, #2
 80047ce:	fbb0 f5f5 	udiv	r5, r0, r5
 80047d2:	fba7 3505 	umull	r3, r5, r7, r5
 80047d6:	096d      	lsrs	r5, r5, #5
 80047d8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80047dc:	fb08 9515 	mls	r5, r8, r5, r9
 80047e0:	012d      	lsls	r5, r5, #4
 80047e2:	3532      	adds	r5, #50	; 0x32
 80047e4:	fba7 3505 	umull	r3, r5, r7, r5
 80047e8:	096d      	lsrs	r5, r5, #5
 80047ea:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80047ee:	4435      	add	r5, r6
 80047f0:	f7ff f9b8 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 80047f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80047f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80047fc:	6866      	ldr	r6, [r4, #4]
 80047fe:	00b6      	lsls	r6, r6, #2
 8004800:	fbb0 f6f6 	udiv	r6, r0, r6
 8004804:	f7ff f9ae 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 8004808:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800480c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004810:	6863      	ldr	r3, [r4, #4]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	fbb0 f0f3 	udiv	r0, r0, r3
 8004818:	fba7 3000 	umull	r3, r0, r7, r0
 800481c:	0940      	lsrs	r0, r0, #5
 800481e:	fb08 6810 	mls	r8, r8, r0, r6
 8004822:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8004826:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800482a:	fba7 3708 	umull	r3, r7, r7, r8
 800482e:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	442f      	add	r7, r5
 8004836:	609f      	str	r7, [r3, #8]
    }
  }
}
 8004838:	e10d      	b.n	8004a56 <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800483a:	6803      	ldr	r3, [r0, #0]
 800483c:	4a87      	ldr	r2, [pc, #540]	; (8004a5c <UART_SetConfig+0x32c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d05b      	beq.n	80048fa <UART_SetConfig+0x1ca>
 8004842:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004846:	4293      	cmp	r3, r2
 8004848:	d057      	beq.n	80048fa <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800484a:	f7ff f98b 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 800484e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004852:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004856:	6865      	ldr	r5, [r4, #4]
 8004858:	006d      	lsls	r5, r5, #1
 800485a:	fbb0 f5f5 	udiv	r5, r0, r5
 800485e:	4f80      	ldr	r7, [pc, #512]	; (8004a60 <UART_SetConfig+0x330>)
 8004860:	fba7 3505 	umull	r3, r5, r7, r5
 8004864:	096d      	lsrs	r5, r5, #5
 8004866:	012e      	lsls	r6, r5, #4
 8004868:	f7ff f97c 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 800486c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004870:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004874:	6865      	ldr	r5, [r4, #4]
 8004876:	006d      	lsls	r5, r5, #1
 8004878:	fbb0 f9f5 	udiv	r9, r0, r5
 800487c:	f7ff f972 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 8004880:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004884:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004888:	6865      	ldr	r5, [r4, #4]
 800488a:	006d      	lsls	r5, r5, #1
 800488c:	fbb0 f5f5 	udiv	r5, r0, r5
 8004890:	fba7 3505 	umull	r3, r5, r7, r5
 8004894:	096d      	lsrs	r5, r5, #5
 8004896:	f04f 0864 	mov.w	r8, #100	; 0x64
 800489a:	fb08 9515 	mls	r5, r8, r5, r9
 800489e:	00ed      	lsls	r5, r5, #3
 80048a0:	3532      	adds	r5, #50	; 0x32
 80048a2:	fba7 3505 	umull	r3, r5, r7, r5
 80048a6:	096d      	lsrs	r5, r5, #5
 80048a8:	006d      	lsls	r5, r5, #1
 80048aa:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80048ae:	4435      	add	r5, r6
 80048b0:	f7ff f958 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 80048b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80048b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80048bc:	6866      	ldr	r6, [r4, #4]
 80048be:	0076      	lsls	r6, r6, #1
 80048c0:	fbb0 f6f6 	udiv	r6, r0, r6
 80048c4:	f7ff f94e 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 80048c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80048cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80048d0:	6863      	ldr	r3, [r4, #4]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80048d8:	fba7 2303 	umull	r2, r3, r7, r3
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	fb08 6813 	mls	r8, r8, r3, r6
 80048e2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80048e6:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80048ea:	fba7 3708 	umull	r3, r7, r7, r8
 80048ee:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	442f      	add	r7, r5
 80048f6:	609f      	str	r7, [r3, #8]
 80048f8:	e0ad      	b.n	8004a56 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80048fa:	f7ff f943 	bl	8003b84 <HAL_RCC_GetPCLK2Freq>
 80048fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004902:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004906:	6865      	ldr	r5, [r4, #4]
 8004908:	006d      	lsls	r5, r5, #1
 800490a:	fbb0 f5f5 	udiv	r5, r0, r5
 800490e:	4f54      	ldr	r7, [pc, #336]	; (8004a60 <UART_SetConfig+0x330>)
 8004910:	fba7 3505 	umull	r3, r5, r7, r5
 8004914:	096d      	lsrs	r5, r5, #5
 8004916:	012e      	lsls	r6, r5, #4
 8004918:	f7ff f934 	bl	8003b84 <HAL_RCC_GetPCLK2Freq>
 800491c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004920:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004924:	6865      	ldr	r5, [r4, #4]
 8004926:	006d      	lsls	r5, r5, #1
 8004928:	fbb0 f9f5 	udiv	r9, r0, r5
 800492c:	f7ff f92a 	bl	8003b84 <HAL_RCC_GetPCLK2Freq>
 8004930:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004934:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004938:	6865      	ldr	r5, [r4, #4]
 800493a:	006d      	lsls	r5, r5, #1
 800493c:	fbb0 f5f5 	udiv	r5, r0, r5
 8004940:	fba7 3505 	umull	r3, r5, r7, r5
 8004944:	096d      	lsrs	r5, r5, #5
 8004946:	f04f 0864 	mov.w	r8, #100	; 0x64
 800494a:	fb08 9515 	mls	r5, r8, r5, r9
 800494e:	00ed      	lsls	r5, r5, #3
 8004950:	3532      	adds	r5, #50	; 0x32
 8004952:	fba7 3505 	umull	r3, r5, r7, r5
 8004956:	096d      	lsrs	r5, r5, #5
 8004958:	006d      	lsls	r5, r5, #1
 800495a:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800495e:	4435      	add	r5, r6
 8004960:	f7ff f910 	bl	8003b84 <HAL_RCC_GetPCLK2Freq>
 8004964:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004968:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800496c:	6866      	ldr	r6, [r4, #4]
 800496e:	0076      	lsls	r6, r6, #1
 8004970:	fbb0 f6f6 	udiv	r6, r0, r6
 8004974:	f7ff f906 	bl	8003b84 <HAL_RCC_GetPCLK2Freq>
 8004978:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800497c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004980:	6863      	ldr	r3, [r4, #4]
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	fbb0 f3f3 	udiv	r3, r0, r3
 8004988:	fba7 2303 	umull	r2, r3, r7, r3
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	fb08 6813 	mls	r8, r8, r3, r6
 8004992:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8004996:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800499a:	fba7 3708 	umull	r3, r7, r7, r8
 800499e:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	442f      	add	r7, r5
 80049a6:	609f      	str	r7, [r3, #8]
 80049a8:	e055      	b.n	8004a56 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80049aa:	f7ff f8eb 	bl	8003b84 <HAL_RCC_GetPCLK2Freq>
 80049ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80049b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80049b6:	6865      	ldr	r5, [r4, #4]
 80049b8:	00ad      	lsls	r5, r5, #2
 80049ba:	fbb0 f5f5 	udiv	r5, r0, r5
 80049be:	4f28      	ldr	r7, [pc, #160]	; (8004a60 <UART_SetConfig+0x330>)
 80049c0:	fba7 3505 	umull	r3, r5, r7, r5
 80049c4:	096d      	lsrs	r5, r5, #5
 80049c6:	012e      	lsls	r6, r5, #4
 80049c8:	f7ff f8dc 	bl	8003b84 <HAL_RCC_GetPCLK2Freq>
 80049cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80049d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80049d4:	6865      	ldr	r5, [r4, #4]
 80049d6:	00ad      	lsls	r5, r5, #2
 80049d8:	fbb0 f9f5 	udiv	r9, r0, r5
 80049dc:	f7ff f8d2 	bl	8003b84 <HAL_RCC_GetPCLK2Freq>
 80049e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80049e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80049e8:	6865      	ldr	r5, [r4, #4]
 80049ea:	00ad      	lsls	r5, r5, #2
 80049ec:	fbb0 f5f5 	udiv	r5, r0, r5
 80049f0:	fba7 3505 	umull	r3, r5, r7, r5
 80049f4:	096d      	lsrs	r5, r5, #5
 80049f6:	f04f 0864 	mov.w	r8, #100	; 0x64
 80049fa:	fb08 9515 	mls	r5, r8, r5, r9
 80049fe:	012d      	lsls	r5, r5, #4
 8004a00:	3532      	adds	r5, #50	; 0x32
 8004a02:	fba7 3505 	umull	r3, r5, r7, r5
 8004a06:	096d      	lsrs	r5, r5, #5
 8004a08:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8004a0c:	4435      	add	r5, r6
 8004a0e:	f7ff f8b9 	bl	8003b84 <HAL_RCC_GetPCLK2Freq>
 8004a12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a1a:	6866      	ldr	r6, [r4, #4]
 8004a1c:	00b6      	lsls	r6, r6, #2
 8004a1e:	fbb0 f6f6 	udiv	r6, r0, r6
 8004a22:	f7ff f8af 	bl	8003b84 <HAL_RCC_GetPCLK2Freq>
 8004a26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a2e:	6863      	ldr	r3, [r4, #4]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	fbb0 f0f3 	udiv	r0, r0, r3
 8004a36:	fba7 3000 	umull	r3, r0, r7, r0
 8004a3a:	0940      	lsrs	r0, r0, #5
 8004a3c:	fb08 6810 	mls	r8, r8, r0, r6
 8004a40:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8004a44:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8004a48:	fba7 3708 	umull	r3, r7, r7, r8
 8004a4c:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	442f      	add	r7, r5
 8004a54:	609f      	str	r7, [r3, #8]
}
 8004a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40011000 	.word	0x40011000
 8004a60:	51eb851f 	.word	0x51eb851f

08004a64 <UART_WaitOnFlagUntilTimeout>:
{
 8004a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a68:	4605      	mov	r5, r0
 8004a6a:	460f      	mov	r7, r1
 8004a6c:	4616      	mov	r6, r2
 8004a6e:	4698      	mov	r8, r3
 8004a70:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a72:	682b      	ldr	r3, [r5, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	ea37 0303 	bics.w	r3, r7, r3
 8004a7a:	bf0c      	ite	eq
 8004a7c:	2301      	moveq	r3, #1
 8004a7e:	2300      	movne	r3, #0
 8004a80:	42b3      	cmp	r3, r6
 8004a82:	d11d      	bne.n	8004ac0 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8004a84:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004a88:	d0f3      	beq.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a8a:	b12c      	cbz	r4, 8004a98 <UART_WaitOnFlagUntilTimeout+0x34>
 8004a8c:	f7fd fcbc 	bl	8002408 <HAL_GetTick>
 8004a90:	eba0 0008 	sub.w	r0, r0, r8
 8004a94:	42a0      	cmp	r0, r4
 8004a96:	d9ec      	bls.n	8004a72 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a98:	682a      	ldr	r2, [r5, #0]
 8004a9a:	68d3      	ldr	r3, [r2, #12]
 8004a9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004aa0:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa2:	682a      	ldr	r2, [r5, #0]
 8004aa4:	6953      	ldr	r3, [r2, #20]
 8004aa6:	f023 0301 	bic.w	r3, r3, #1
 8004aaa:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004aac:	2320      	movs	r3, #32
 8004aae:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004ab2:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8004abc:	2003      	movs	r0, #3
 8004abe:	e000      	b.n	8004ac2 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8004ac0:	2000      	movs	r0, #0
}
 8004ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004ac6 <HAL_UART_Init>:
  if (huart == NULL)
 8004ac6:	b358      	cbz	r0, 8004b20 <HAL_UART_Init+0x5a>
{
 8004ac8:	b510      	push	{r4, lr}
 8004aca:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004acc:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004ad0:	b30b      	cbz	r3, 8004b16 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004ad2:	2324      	movs	r3, #36	; 0x24
 8004ad4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8004ad8:	6822      	ldr	r2, [r4, #0]
 8004ada:	68d3      	ldr	r3, [r2, #12]
 8004adc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ae0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	f7ff fe24 	bl	8004730 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae8:	6822      	ldr	r2, [r4, #0]
 8004aea:	6913      	ldr	r3, [r2, #16]
 8004aec:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004af0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af2:	6822      	ldr	r2, [r4, #0]
 8004af4:	6953      	ldr	r3, [r2, #20]
 8004af6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004afa:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004afc:	6822      	ldr	r2, [r4, #0]
 8004afe:	68d3      	ldr	r3, [r2, #12]
 8004b00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b04:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b06:	2000      	movs	r0, #0
 8004b08:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b0a:	2320      	movs	r3, #32
 8004b0c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b10:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8004b14:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004b16:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004b1a:	f002 fc0d 	bl	8007338 <HAL_UART_MspInit>
 8004b1e:	e7d8      	b.n	8004ad2 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004b20:	2001      	movs	r0, #1
}
 8004b22:	4770      	bx	lr

08004b24 <HAL_UART_Transmit>:
{
 8004b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004b2c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d155      	bne.n	8004be2 <HAL_UART_Transmit+0xbe>
 8004b36:	4604      	mov	r4, r0
 8004b38:	460d      	mov	r5, r1
 8004b3a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004b3c:	2900      	cmp	r1, #0
 8004b3e:	d055      	beq.n	8004bec <HAL_UART_Transmit+0xc8>
 8004b40:	2a00      	cmp	r2, #0
 8004b42:	d055      	beq.n	8004bf0 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8004b44:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d053      	beq.n	8004bf4 <HAL_UART_Transmit+0xd0>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b52:	2300      	movs	r3, #0
 8004b54:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b56:	2321      	movs	r3, #33	; 0x21
 8004b58:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8004b5c:	f7fd fc54 	bl	8002408 <HAL_GetTick>
 8004b60:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8004b62:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b66:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b6a:	e010      	b.n	8004b8e <HAL_UART_Transmit+0x6a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b6c:	9600      	str	r6, [sp, #0]
 8004b6e:	463b      	mov	r3, r7
 8004b70:	2200      	movs	r2, #0
 8004b72:	2180      	movs	r1, #128	; 0x80
 8004b74:	4620      	mov	r0, r4
 8004b76:	f7ff ff75 	bl	8004a64 <UART_WaitOnFlagUntilTimeout>
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	d13c      	bne.n	8004bf8 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004b7e:	882b      	ldrh	r3, [r5, #0]
 8004b80:	6822      	ldr	r2, [r4, #0]
 8004b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b86:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004b88:	6923      	ldr	r3, [r4, #16]
 8004b8a:	b9c3      	cbnz	r3, 8004bbe <HAL_UART_Transmit+0x9a>
          pData += 2U;
 8004b8c:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8004b8e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	b1b3      	cbz	r3, 8004bc2 <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 8004b94:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b9c:	68a3      	ldr	r3, [r4, #8]
 8004b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba2:	d0e3      	beq.n	8004b6c <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ba4:	9600      	str	r6, [sp, #0]
 8004ba6:	463b      	mov	r3, r7
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2180      	movs	r1, #128	; 0x80
 8004bac:	4620      	mov	r0, r4
 8004bae:	f7ff ff59 	bl	8004a64 <UART_WaitOnFlagUntilTimeout>
 8004bb2:	bb18      	cbnz	r0, 8004bfc <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004bb4:	782a      	ldrb	r2, [r5, #0]
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	605a      	str	r2, [r3, #4]
 8004bba:	3501      	adds	r5, #1
 8004bbc:	e7e7      	b.n	8004b8e <HAL_UART_Transmit+0x6a>
          pData += 1U;
 8004bbe:	3501      	adds	r5, #1
 8004bc0:	e7e5      	b.n	8004b8e <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bc2:	9600      	str	r6, [sp, #0]
 8004bc4:	463b      	mov	r3, r7
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2140      	movs	r1, #64	; 0x40
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f7ff ff4a 	bl	8004a64 <UART_WaitOnFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	b9a8      	cbnz	r0, 8004c00 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8004be0:	e000      	b.n	8004be4 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8004be2:	2302      	movs	r3, #2
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	b002      	add	sp, #8
 8004be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e7f9      	b.n	8004be4 <HAL_UART_Transmit+0xc0>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e7f7      	b.n	8004be4 <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	e7f5      	b.n	8004be4 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e7f3      	b.n	8004be4 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e7f1      	b.n	8004be4 <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e7ef      	b.n	8004be4 <HAL_UART_Transmit+0xc0>

08004c04 <arduino_get_clock_ms>:
******************************************************************************/
#include "arduino_mpu9250_clk.h"
#include "stm32f4xx_hal.h"

int arduino_get_clock_ms(unsigned long *count)
{
 8004c04:	b510      	push	{r4, lr}
 8004c06:	4604      	mov	r4, r0
	*count = HAL_GetTick();
 8004c08:	f7fd fbfe 	bl	8002408 <HAL_GetTick>
 8004c0c:	6020      	str	r0, [r4, #0]
	return 0;
}
 8004c0e:	2000      	movs	r0, #0
 8004c10:	bd10      	pop	{r4, pc}

08004c12 <arduino_delay_ms>:

int arduino_delay_ms(unsigned long num_ms)
{
 8004c12:	b508      	push	{r3, lr}
	HAL_Delay(num_ms);
 8004c14:	f7fd fbfe 	bl	8002414 <HAL_Delay>

	return 0;
}
 8004c18:	2000      	movs	r0, #0
 8004c1a:	bd08      	pop	{r3, pc}

08004c1c <arduino_i2c_write>:
I2C_HandleTypeDef hi2c2;


int arduino_i2c_write(unsigned char slave_addr, unsigned char reg_addr,
                       unsigned char length, unsigned char * data)
{
 8004c1c:	b510      	push	{r4, lr}
 8004c1e:	b08a      	sub	sp, #40	; 0x28
		unsigned char slave_addr_shift = slave_addr << 1;


		unsigned char data_write[32];

		data_write[0] = reg_addr;
 8004c20:	f88d 1008 	strb.w	r1, [sp, #8]

		for (int i = 1; i <= length; ++i) {
 8004c24:	2101      	movs	r1, #1
 8004c26:	e006      	b.n	8004c36 <arduino_i2c_write+0x1a>
			data_write[i] = *data;
 8004c28:	f813 4b01 	ldrb.w	r4, [r3], #1
 8004c2c:	a80a      	add	r0, sp, #40	; 0x28
 8004c2e:	4408      	add	r0, r1
 8004c30:	f800 4c20 	strb.w	r4, [r0, #-32]
		for (int i = 1; i <= length; ++i) {
 8004c34:	3101      	adds	r1, #1
 8004c36:	428a      	cmp	r2, r1
 8004c38:	daf6      	bge.n	8004c28 <arduino_i2c_write+0xc>
			data++;
		}

		if(HAL_I2C_Master_Transmit(&hi2c2, 0xD0, data_write, length+1, 10) == HAL_OK ){
 8004c3a:	230a      	movs	r3, #10
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	1c53      	adds	r3, r2, #1
 8004c40:	aa02      	add	r2, sp, #8
 8004c42:	21d0      	movs	r1, #208	; 0xd0
 8004c44:	4803      	ldr	r0, [pc, #12]	; (8004c54 <arduino_i2c_write+0x38>)
 8004c46:	f7fe f9bf 	bl	8002fc8 <HAL_I2C_Master_Transmit>
 8004c4a:	b100      	cbz	r0, 8004c4e <arduino_i2c_write+0x32>
			return 0;
		}
		else{
			return 1;
 8004c4c:	2001      	movs	r0, #1
		}
}
 8004c4e:	b00a      	add	sp, #40	; 0x28
 8004c50:	bd10      	pop	{r4, pc}
 8004c52:	bf00      	nop
 8004c54:	200003c0 	.word	0x200003c0

08004c58 <arduino_i2c_read>:

int arduino_i2c_read(unsigned char slave_addr, unsigned char reg_addr,
                       unsigned char length, unsigned char * data)
{
 8004c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	4617      	mov	r7, r2
 8004c5e:	461e      	mov	r6, r3
	unsigned char slave_addr_shift = slave_addr << 1;

		unsigned char data_read[32];

		unsigned char data_write[1];
		data_write[0] = reg_addr;
 8004c60:	aa04      	add	r2, sp, #16
 8004c62:	f802 1d04 	strb.w	r1, [r2, #-4]!

		//Send adress of register ONLY
		HAL_I2C_Master_Transmit(&hi2c2, 0xD0, data_write, 1, 10);
 8004c66:	4c09      	ldr	r4, [pc, #36]	; (8004c8c <arduino_i2c_read+0x34>)
 8004c68:	250a      	movs	r5, #10
 8004c6a:	9500      	str	r5, [sp, #0]
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	21d0      	movs	r1, #208	; 0xd0
 8004c70:	4620      	mov	r0, r4
 8004c72:	f7fe f9a9 	bl	8002fc8 <HAL_I2C_Master_Transmit>
		//Then read from register
		HAL_I2C_Master_Receive(&hi2c2, 0xD1, data, length, 10);
 8004c76:	9500      	str	r5, [sp, #0]
 8004c78:	463b      	mov	r3, r7
 8004c7a:	4632      	mov	r2, r6
 8004c7c:	21d1      	movs	r1, #209	; 0xd1
 8004c7e:	4620      	mov	r0, r4
 8004c80:	f7fe fa5c 	bl	800313c <HAL_I2C_Master_Receive>


		return 0;
}
 8004c84:	2000      	movs	r0, #0
 8004c86:	b005      	add	sp, #20
 8004c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	200003c0 	.word	0x200003c0

08004c90 <_MLPrintLog>:
void logString(char * string) 
{
}

int _MLPrintLog (int priority, const char* tag, const char* fmt, ...)
{
 8004c90:	b40c      	push	{r2, r3}
}
 8004c92:	b002      	add	sp, #8
 8004c94:	4770      	bx	lr
	...

08004c98 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
int set_int_enable(unsigned char enable)
{
 8004c98:	b500      	push	{lr}
 8004c9a:	b083      	sub	sp, #12
    unsigned char tmp;

    if (st.chip_cfg.dmp_on) {
 8004c9c:	4b25      	ldr	r3, [pc, #148]	; (8004d34 <set_int_enable+0x9c>)
 8004c9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ca2:	b1db      	cbz	r3, 8004cdc <set_int_enable+0x44>
        if (enable)
 8004ca4:	b1b0      	cbz	r0, 8004cd4 <set_int_enable+0x3c>
            tmp = BIT_DMP_INT_EN;
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	f88d 3007 	strb.w	r3, [sp, #7]
        else
            tmp = 0x00;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8004cac:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <set_int_enable+0x9c>)
 8004cae:	6858      	ldr	r0, [r3, #4]
 8004cb0:	6819      	ldr	r1, [r3, #0]
 8004cb2:	f10d 0307 	add.w	r3, sp, #7
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	7c49      	ldrb	r1, [r1, #17]
 8004cba:	7800      	ldrb	r0, [r0, #0]
 8004cbc:	f7ff ffae 	bl	8004c1c <arduino_i2c_write>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	bb58      	cbnz	r0, 8004d1c <set_int_enable+0x84>
            return -1;
        st.chip_cfg.int_enable = tmp;
 8004cc4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004cc8:	4a1a      	ldr	r2, [pc, #104]	; (8004d34 <set_int_enable+0x9c>)
 8004cca:	7451      	strb	r1, [r2, #17]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
            return -1;
        st.chip_cfg.int_enable = tmp;
    }
    return 0;
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	b003      	add	sp, #12
 8004cd0:	f85d fb04 	ldr.w	pc, [sp], #4
            tmp = 0x00;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f88d 3007 	strb.w	r3, [sp, #7]
 8004cda:	e7e7      	b.n	8004cac <set_int_enable+0x14>
        if (!st.chip_cfg.sensors)
 8004cdc:	4b15      	ldr	r3, [pc, #84]	; (8004d34 <set_int_enable+0x9c>)
 8004cde:	7a9b      	ldrb	r3, [r3, #10]
 8004ce0:	b1fb      	cbz	r3, 8004d22 <set_int_enable+0x8a>
        if (enable && st.chip_cfg.int_enable)
 8004ce2:	b110      	cbz	r0, 8004cea <set_int_enable+0x52>
 8004ce4:	4b13      	ldr	r3, [pc, #76]	; (8004d34 <set_int_enable+0x9c>)
 8004ce6:	7c5b      	ldrb	r3, [r3, #17]
 8004ce8:	b9f3      	cbnz	r3, 8004d28 <set_int_enable+0x90>
        if (enable)
 8004cea:	b198      	cbz	r0, 8004d14 <set_int_enable+0x7c>
            tmp = BIT_DATA_RDY_EN;
 8004cec:	2301      	movs	r3, #1
 8004cee:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 8004cf2:	4b10      	ldr	r3, [pc, #64]	; (8004d34 <set_int_enable+0x9c>)
 8004cf4:	6858      	ldr	r0, [r3, #4]
 8004cf6:	6819      	ldr	r1, [r3, #0]
 8004cf8:	f10d 0307 	add.w	r3, sp, #7
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	7c49      	ldrb	r1, [r1, #17]
 8004d00:	7800      	ldrb	r0, [r0, #0]
 8004d02:	f7ff ff8b 	bl	8004c1c <arduino_i2c_write>
 8004d06:	4603      	mov	r3, r0
 8004d08:	b980      	cbnz	r0, 8004d2c <set_int_enable+0x94>
        st.chip_cfg.int_enable = tmp;
 8004d0a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8004d0e:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <set_int_enable+0x9c>)
 8004d10:	7451      	strb	r1, [r2, #17]
 8004d12:	e7db      	b.n	8004ccc <set_int_enable+0x34>
            tmp = 0x00;
 8004d14:	2300      	movs	r3, #0
 8004d16:	f88d 3007 	strb.w	r3, [sp, #7]
 8004d1a:	e7ea      	b.n	8004cf2 <set_int_enable+0x5a>
            return -1;
 8004d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d20:	e7d4      	b.n	8004ccc <set_int_enable+0x34>
            return -1;
 8004d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d26:	e7d1      	b.n	8004ccc <set_int_enable+0x34>
            return 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	e7cf      	b.n	8004ccc <set_int_enable+0x34>
            return -1;
 8004d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d30:	e7cc      	b.n	8004ccc <set_int_enable+0x34>
 8004d32:	bf00      	nop
 8004d34:	20000028 	.word	0x20000028

08004d38 <mpu_read_reg>:
 *  @param[out] data    Register data.
 *  @return     0 if successful.
 */
int mpu_read_reg(unsigned char reg, unsigned char *data)
{
    if (reg == st.reg->fifo_r_w || reg == st.reg->mem_r_w)
 8004d38:	4b0e      	ldr	r3, [pc, #56]	; (8004d74 <mpu_read_reg+0x3c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	7b5a      	ldrb	r2, [r3, #13]
 8004d3e:	4282      	cmp	r2, r0
 8004d40:	d00f      	beq.n	8004d62 <mpu_read_reg+0x2a>
 8004d42:	7e1b      	ldrb	r3, [r3, #24]
 8004d44:	4283      	cmp	r3, r0
 8004d46:	d00f      	beq.n	8004d68 <mpu_read_reg+0x30>
{
 8004d48:	b510      	push	{r4, lr}
        return -1;
    if (reg >= st.hw->num_reg)
 8004d4a:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <mpu_read_reg+0x3c>)
 8004d4c:	685c      	ldr	r4, [r3, #4]
 8004d4e:	7923      	ldrb	r3, [r4, #4]
 8004d50:	4283      	cmp	r3, r0
 8004d52:	d90c      	bls.n	8004d6e <mpu_read_reg+0x36>
 8004d54:	460b      	mov	r3, r1
 8004d56:	4601      	mov	r1, r0
        return -1;
    return i2c_read(st.hw->addr, reg, 1, data);
 8004d58:	2201      	movs	r2, #1
 8004d5a:	7820      	ldrb	r0, [r4, #0]
 8004d5c:	f7ff ff7c 	bl	8004c58 <arduino_i2c_read>
}
 8004d60:	bd10      	pop	{r4, pc}
        return -1;
 8004d62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d66:	4770      	bx	lr
 8004d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004d6c:	4770      	bx	lr
        return -1;
 8004d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d72:	e7f5      	b.n	8004d60 <mpu_read_reg+0x28>
 8004d74:	20000028 	.word	0x20000028

08004d78 <mpu_reset_fifo>:
 */
int mpu_reset_fifo(void)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8004d78:	4b7c      	ldr	r3, [pc, #496]	; (8004f6c <mpu_reset_fifo+0x1f4>)
 8004d7a:	7a9b      	ldrb	r3, [r3, #10]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 80d5 	beq.w	8004f2c <mpu_reset_fifo+0x1b4>
{
 8004d82:	b500      	push	{lr}
 8004d84:	b083      	sub	sp, #12
        return -1;

    data = 0;
 8004d86:	ab02      	add	r3, sp, #8
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f803 2d01 	strb.w	r2, [r3, #-1]!
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8004d8e:	4a77      	ldr	r2, [pc, #476]	; (8004f6c <mpu_reset_fifo+0x1f4>)
 8004d90:	6850      	ldr	r0, [r2, #4]
 8004d92:	6811      	ldr	r1, [r2, #0]
 8004d94:	2201      	movs	r2, #1
 8004d96:	7c49      	ldrb	r1, [r1, #17]
 8004d98:	7800      	ldrb	r0, [r0, #0]
 8004d9a:	f7ff ff3f 	bl	8004c1c <arduino_i2c_write>
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	f040 80c8 	bne.w	8004f34 <mpu_reset_fifo+0x1bc>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8004da4:	4b71      	ldr	r3, [pc, #452]	; (8004f6c <mpu_reset_fifo+0x1f4>)
 8004da6:	6858      	ldr	r0, [r3, #4]
 8004da8:	6819      	ldr	r1, [r3, #0]
 8004daa:	f10d 0307 	add.w	r3, sp, #7
 8004dae:	2201      	movs	r2, #1
 8004db0:	7949      	ldrb	r1, [r1, #5]
 8004db2:	7800      	ldrb	r0, [r0, #0]
 8004db4:	f7ff ff32 	bl	8004c1c <arduino_i2c_write>
 8004db8:	2800      	cmp	r0, #0
 8004dba:	f040 80be 	bne.w	8004f3a <mpu_reset_fifo+0x1c2>
        return -1;
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8004dbe:	4b6b      	ldr	r3, [pc, #428]	; (8004f6c <mpu_reset_fifo+0x1f4>)
 8004dc0:	6858      	ldr	r0, [r3, #4]
 8004dc2:	6819      	ldr	r1, [r3, #0]
 8004dc4:	f10d 0307 	add.w	r3, sp, #7
 8004dc8:	2201      	movs	r2, #1
 8004dca:	7909      	ldrb	r1, [r1, #4]
 8004dcc:	7800      	ldrb	r0, [r0, #0]
 8004dce:	f7ff ff25 	bl	8004c1c <arduino_i2c_write>
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	f040 80b4 	bne.w	8004f40 <mpu_reset_fifo+0x1c8>
        return -1;

    if (st.chip_cfg.dmp_on) {
 8004dd8:	4b64      	ldr	r3, [pc, #400]	; (8004f6c <mpu_reset_fifo+0x1f4>)
 8004dda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d054      	beq.n	8004e8c <mpu_reset_fifo+0x114>
        data = BIT_FIFO_RST | BIT_DMP_RST;
 8004de2:	ab02      	add	r3, sp, #8
 8004de4:	220c      	movs	r2, #12
 8004de6:	f803 2d01 	strb.w	r2, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8004dea:	4a60      	ldr	r2, [pc, #384]	; (8004f6c <mpu_reset_fifo+0x1f4>)
 8004dec:	6850      	ldr	r0, [r2, #4]
 8004dee:	6811      	ldr	r1, [r2, #0]
 8004df0:	2201      	movs	r2, #1
 8004df2:	7909      	ldrb	r1, [r1, #4]
 8004df4:	7800      	ldrb	r0, [r0, #0]
 8004df6:	f7ff ff11 	bl	8004c1c <arduino_i2c_write>
 8004dfa:	2800      	cmp	r0, #0
 8004dfc:	f040 80a3 	bne.w	8004f46 <mpu_reset_fifo+0x1ce>
            return -1;
        delay_ms(50);
 8004e00:	2032      	movs	r0, #50	; 0x32
 8004e02:	f7ff ff06 	bl	8004c12 <arduino_delay_ms>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 8004e06:	23c0      	movs	r3, #192	; 0xc0
 8004e08:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8004e0c:	4b57      	ldr	r3, [pc, #348]	; (8004f6c <mpu_reset_fifo+0x1f4>)
 8004e0e:	7a9b      	ldrb	r3, [r3, #10]
 8004e10:	f013 0f01 	tst.w	r3, #1
 8004e14:	d002      	beq.n	8004e1c <mpu_reset_fifo+0xa4>
            data |= BIT_AUX_IF_EN;
 8004e16:	23e0      	movs	r3, #224	; 0xe0
 8004e18:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8004e1c:	4b53      	ldr	r3, [pc, #332]	; (8004f6c <mpu_reset_fifo+0x1f4>)
 8004e1e:	6858      	ldr	r0, [r3, #4]
 8004e20:	6819      	ldr	r1, [r3, #0]
 8004e22:	f10d 0307 	add.w	r3, sp, #7
 8004e26:	2201      	movs	r2, #1
 8004e28:	7909      	ldrb	r1, [r1, #4]
 8004e2a:	7800      	ldrb	r0, [r0, #0]
 8004e2c:	f7ff fef6 	bl	8004c1c <arduino_i2c_write>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	f040 808b 	bne.w	8004f4c <mpu_reset_fifo+0x1d4>
            return -1;
        if (st.chip_cfg.int_enable)
 8004e36:	4b4d      	ldr	r3, [pc, #308]	; (8004f6c <mpu_reset_fifo+0x1f4>)
 8004e38:	7c5b      	ldrb	r3, [r3, #17]
 8004e3a:	b303      	cbz	r3, 8004e7e <mpu_reset_fifo+0x106>
            data = BIT_DMP_INT_EN;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	f88d 3007 	strb.w	r3, [sp, #7]
        else
            data = 0;
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8004e42:	4b4a      	ldr	r3, [pc, #296]	; (8004f6c <mpu_reset_fifo+0x1f4>)
 8004e44:	6858      	ldr	r0, [r3, #4]
 8004e46:	6819      	ldr	r1, [r3, #0]
 8004e48:	f10d 0307 	add.w	r3, sp, #7
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	7c49      	ldrb	r1, [r1, #17]
 8004e50:	7800      	ldrb	r0, [r0, #0]
 8004e52:	f7ff fee3 	bl	8004c1c <arduino_i2c_write>
 8004e56:	2800      	cmp	r0, #0
 8004e58:	d17b      	bne.n	8004f52 <mpu_reset_fifo+0x1da>
            return -1;
        data = 0;
 8004e5a:	ab02      	add	r3, sp, #8
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f803 2d01 	strb.w	r2, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 8004e62:	4a42      	ldr	r2, [pc, #264]	; (8004f6c <mpu_reset_fifo+0x1f4>)
 8004e64:	6850      	ldr	r0, [r2, #4]
 8004e66:	6811      	ldr	r1, [r2, #0]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	7949      	ldrb	r1, [r1, #5]
 8004e6c:	7800      	ldrb	r0, [r0, #0]
 8004e6e:	f7ff fed5 	bl	8004c1c <arduino_i2c_write>
 8004e72:	4603      	mov	r3, r0
 8004e74:	b938      	cbnz	r0, 8004e86 <mpu_reset_fifo+0x10e>
            return -1;
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
            return -1;
    }
    return 0;
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	b003      	add	sp, #12
 8004e7a:	f85d fb04 	ldr.w	pc, [sp], #4
            data = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f88d 3007 	strb.w	r3, [sp, #7]
 8004e84:	e7dd      	b.n	8004e42 <mpu_reset_fifo+0xca>
            return -1;
 8004e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e8a:	e7f4      	b.n	8004e76 <mpu_reset_fifo+0xfe>
        data = BIT_FIFO_RST;
 8004e8c:	ab02      	add	r3, sp, #8
 8004e8e:	2204      	movs	r2, #4
 8004e90:	f803 2d01 	strb.w	r2, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8004e94:	4a35      	ldr	r2, [pc, #212]	; (8004f6c <mpu_reset_fifo+0x1f4>)
 8004e96:	6850      	ldr	r0, [r2, #4]
 8004e98:	6811      	ldr	r1, [r2, #0]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	7909      	ldrb	r1, [r1, #4]
 8004e9e:	7800      	ldrb	r0, [r0, #0]
 8004ea0:	f7ff febc 	bl	8004c1c <arduino_i2c_write>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d157      	bne.n	8004f58 <mpu_reset_fifo+0x1e0>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 8004ea8:	4b30      	ldr	r3, [pc, #192]	; (8004f6c <mpu_reset_fifo+0x1f4>)
 8004eaa:	7c9b      	ldrb	r3, [r3, #18]
 8004eac:	b923      	cbnz	r3, 8004eb8 <mpu_reset_fifo+0x140>
 8004eae:	4b2f      	ldr	r3, [pc, #188]	; (8004f6c <mpu_reset_fifo+0x1f4>)
 8004eb0:	7a9b      	ldrb	r3, [r3, #10]
 8004eb2:	f013 0f01 	tst.w	r3, #1
 8004eb6:	d131      	bne.n	8004f1c <mpu_reset_fifo+0x1a4>
            data = BIT_FIFO_EN;
 8004eb8:	2340      	movs	r3, #64	; 0x40
 8004eba:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 8004ebe:	4b2b      	ldr	r3, [pc, #172]	; (8004f6c <mpu_reset_fifo+0x1f4>)
 8004ec0:	6858      	ldr	r0, [r3, #4]
 8004ec2:	6819      	ldr	r1, [r3, #0]
 8004ec4:	f10d 0307 	add.w	r3, sp, #7
 8004ec8:	2201      	movs	r2, #1
 8004eca:	7909      	ldrb	r1, [r1, #4]
 8004ecc:	7800      	ldrb	r0, [r0, #0]
 8004ece:	f7ff fea5 	bl	8004c1c <arduino_i2c_write>
 8004ed2:	2800      	cmp	r0, #0
 8004ed4:	d143      	bne.n	8004f5e <mpu_reset_fifo+0x1e6>
        delay_ms(50);
 8004ed6:	2032      	movs	r0, #50	; 0x32
 8004ed8:	f7ff fe9b 	bl	8004c12 <arduino_delay_ms>
        if (st.chip_cfg.int_enable)
 8004edc:	4b23      	ldr	r3, [pc, #140]	; (8004f6c <mpu_reset_fifo+0x1f4>)
 8004ede:	7c5b      	ldrb	r3, [r3, #17]
 8004ee0:	b303      	cbz	r3, 8004f24 <mpu_reset_fifo+0x1ac>
            data = BIT_DATA_RDY_EN;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 8004ee8:	4b20      	ldr	r3, [pc, #128]	; (8004f6c <mpu_reset_fifo+0x1f4>)
 8004eea:	6858      	ldr	r0, [r3, #4]
 8004eec:	6819      	ldr	r1, [r3, #0]
 8004eee:	f10d 0307 	add.w	r3, sp, #7
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	7c49      	ldrb	r1, [r1, #17]
 8004ef6:	7800      	ldrb	r0, [r0, #0]
 8004ef8:	f7ff fe90 	bl	8004c1c <arduino_i2c_write>
 8004efc:	bb90      	cbnz	r0, 8004f64 <mpu_reset_fifo+0x1ec>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 8004efe:	4b1b      	ldr	r3, [pc, #108]	; (8004f6c <mpu_reset_fifo+0x1f4>)
 8004f00:	6858      	ldr	r0, [r3, #4]
 8004f02:	f853 1b10 	ldr.w	r1, [r3], #16
 8004f06:	2201      	movs	r2, #1
 8004f08:	7949      	ldrb	r1, [r1, #5]
 8004f0a:	7800      	ldrb	r0, [r0, #0]
 8004f0c:	f7ff fe86 	bl	8004c1c <arduino_i2c_write>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2800      	cmp	r0, #0
 8004f14:	d0af      	beq.n	8004e76 <mpu_reset_fifo+0xfe>
            return -1;
 8004f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f1a:	e7ac      	b.n	8004e76 <mpu_reset_fifo+0xfe>
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 8004f1c:	2360      	movs	r3, #96	; 0x60
 8004f1e:	f88d 3007 	strb.w	r3, [sp, #7]
 8004f22:	e7cc      	b.n	8004ebe <mpu_reset_fifo+0x146>
            data = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	f88d 3007 	strb.w	r3, [sp, #7]
 8004f2a:	e7dd      	b.n	8004ee8 <mpu_reset_fifo+0x170>
        return -1;
 8004f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	4770      	bx	lr
        return -1;
 8004f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f38:	e79d      	b.n	8004e76 <mpu_reset_fifo+0xfe>
        return -1;
 8004f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f3e:	e79a      	b.n	8004e76 <mpu_reset_fifo+0xfe>
        return -1;
 8004f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f44:	e797      	b.n	8004e76 <mpu_reset_fifo+0xfe>
            return -1;
 8004f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f4a:	e794      	b.n	8004e76 <mpu_reset_fifo+0xfe>
            return -1;
 8004f4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f50:	e791      	b.n	8004e76 <mpu_reset_fifo+0xfe>
            return -1;
 8004f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f56:	e78e      	b.n	8004e76 <mpu_reset_fifo+0xfe>
            return -1;
 8004f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f5c:	e78b      	b.n	8004e76 <mpu_reset_fifo+0xfe>
            return -1;
 8004f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f62:	e788      	b.n	8004e76 <mpu_reset_fifo+0xfe>
            return -1;
 8004f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f68:	e785      	b.n	8004e76 <mpu_reset_fifo+0xfe>
 8004f6a:	bf00      	nop
 8004f6c:	20000028 	.word	0x20000028

08004f70 <mpu_set_gyro_fsr>:
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 8004f70:	4b24      	ldr	r3, [pc, #144]	; (8005004 <mpu_set_gyro_fsr+0x94>)
 8004f72:	7a9b      	ldrb	r3, [r3, #10]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d038      	beq.n	8004fea <mpu_set_gyro_fsr+0x7a>
{
 8004f78:	b500      	push	{lr}
 8004f7a:	b083      	sub	sp, #12
        return -1;

    switch (fsr) {
 8004f7c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8004f80:	d02b      	beq.n	8004fda <mpu_set_gyro_fsr+0x6a>
 8004f82:	d909      	bls.n	8004f98 <mpu_set_gyro_fsr+0x28>
 8004f84:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004f88:	d02b      	beq.n	8004fe2 <mpu_set_gyro_fsr+0x72>
 8004f8a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8004f8e:	d130      	bne.n	8004ff2 <mpu_set_gyro_fsr+0x82>
        break;
    case 1000:
        data = INV_FSR_1000DPS << 3;
        break;
    case 2000:
        data = INV_FSR_2000DPS << 3;
 8004f90:	2318      	movs	r3, #24
 8004f92:	f88d 3007 	strb.w	r3, [sp, #7]
        break;
 8004f96:	e004      	b.n	8004fa2 <mpu_set_gyro_fsr+0x32>
    switch (fsr) {
 8004f98:	28fa      	cmp	r0, #250	; 0xfa
 8004f9a:	d12a      	bne.n	8004ff2 <mpu_set_gyro_fsr+0x82>
        data = INV_FSR_250DPS << 3;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f88d 3007 	strb.w	r3, [sp, #7]
    default:
        return -1;
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 8004fa2:	4b18      	ldr	r3, [pc, #96]	; (8005004 <mpu_set_gyro_fsr+0x94>)
 8004fa4:	7a1b      	ldrb	r3, [r3, #8]
 8004fa6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004faa:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8004fae:	d023      	beq.n	8004ff8 <mpu_set_gyro_fsr+0x88>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 8004fb0:	4b14      	ldr	r3, [pc, #80]	; (8005004 <mpu_set_gyro_fsr+0x94>)
 8004fb2:	6858      	ldr	r0, [r3, #4]
 8004fb4:	6819      	ldr	r1, [r3, #0]
 8004fb6:	f10d 0307 	add.w	r3, sp, #7
 8004fba:	2201      	movs	r2, #1
 8004fbc:	7989      	ldrb	r1, [r1, #6]
 8004fbe:	7800      	ldrb	r0, [r0, #0]
 8004fc0:	f7ff fe2c 	bl	8004c1c <arduino_i2c_write>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	b9c8      	cbnz	r0, 8004ffc <mpu_set_gyro_fsr+0x8c>
        return -1;
    st.chip_cfg.gyro_fsr = data >> 3;
 8004fc8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004fcc:	08d2      	lsrs	r2, r2, #3
 8004fce:	490d      	ldr	r1, [pc, #52]	; (8005004 <mpu_set_gyro_fsr+0x94>)
 8004fd0:	720a      	strb	r2, [r1, #8]
    return 0;
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	b003      	add	sp, #12
 8004fd6:	f85d fb04 	ldr.w	pc, [sp], #4
        data = INV_FSR_500DPS << 3;
 8004fda:	2308      	movs	r3, #8
 8004fdc:	f88d 3007 	strb.w	r3, [sp, #7]
        break;
 8004fe0:	e7df      	b.n	8004fa2 <mpu_set_gyro_fsr+0x32>
        data = INV_FSR_1000DPS << 3;
 8004fe2:	2310      	movs	r3, #16
 8004fe4:	f88d 3007 	strb.w	r3, [sp, #7]
        break;
 8004fe8:	e7db      	b.n	8004fa2 <mpu_set_gyro_fsr+0x32>
        return -1;
 8004fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	4770      	bx	lr
        return -1;
 8004ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ff6:	e7ec      	b.n	8004fd2 <mpu_set_gyro_fsr+0x62>
        return 0;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	e7ea      	b.n	8004fd2 <mpu_set_gyro_fsr+0x62>
        return -1;
 8004ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005000:	e7e7      	b.n	8004fd2 <mpu_set_gyro_fsr+0x62>
 8005002:	bf00      	nop
 8005004:	20000028 	.word	0x20000028

08005008 <mpu_get_accel_fsr>:
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
    switch (st.chip_cfg.accel_fsr) {
 8005008:	4b0f      	ldr	r3, [pc, #60]	; (8005048 <mpu_get_accel_fsr+0x40>)
 800500a:	7a5b      	ldrb	r3, [r3, #9]
 800500c:	2b03      	cmp	r3, #3
 800500e:	d816      	bhi.n	800503e <mpu_get_accel_fsr+0x36>
 8005010:	e8df f003 	tbb	[pc, r3]
 8005014:	120f0c02 	.word	0x120f0c02
    case INV_FSR_2G:
        fsr[0] = 2;
 8005018:	2302      	movs	r3, #2
 800501a:	7003      	strb	r3, [r0, #0]
        fsr[0] = 16;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
 800501c:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <mpu_get_accel_fsr+0x40>)
 800501e:	7cdb      	ldrb	r3, [r3, #19]
 8005020:	b183      	cbz	r3, 8005044 <mpu_get_accel_fsr+0x3c>
        fsr[0] <<= 1;
 8005022:	7803      	ldrb	r3, [r0, #0]
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	7003      	strb	r3, [r0, #0]
    return 0;
 8005028:	2000      	movs	r0, #0
 800502a:	4770      	bx	lr
        fsr[0] = 4;
 800502c:	2304      	movs	r3, #4
 800502e:	7003      	strb	r3, [r0, #0]
        break;
 8005030:	e7f4      	b.n	800501c <mpu_get_accel_fsr+0x14>
        fsr[0] = 8;
 8005032:	2308      	movs	r3, #8
 8005034:	7003      	strb	r3, [r0, #0]
        break;
 8005036:	e7f1      	b.n	800501c <mpu_get_accel_fsr+0x14>
        fsr[0] = 16;
 8005038:	2310      	movs	r3, #16
 800503a:	7003      	strb	r3, [r0, #0]
        break;
 800503c:	e7ee      	b.n	800501c <mpu_get_accel_fsr+0x14>
        return -1;
 800503e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005042:	4770      	bx	lr
    return 0;
 8005044:	2000      	movs	r0, #0
}
 8005046:	4770      	bx	lr
 8005048:	20000028 	.word	0x20000028

0800504c <mpu_set_accel_fsr>:
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800504c:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <mpu_set_accel_fsr+0x94>)
 800504e:	7a9b      	ldrb	r3, [r3, #10]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d039      	beq.n	80050c8 <mpu_set_accel_fsr+0x7c>
{
 8005054:	b500      	push	{lr}
 8005056:	b083      	sub	sp, #12
        return -1;

    switch (fsr) {
 8005058:	3802      	subs	r0, #2
 800505a:	280e      	cmp	r0, #14
 800505c:	d838      	bhi.n	80050d0 <mpu_set_accel_fsr+0x84>
 800505e:	e8df f000 	tbb	[pc, r0]
 8005062:	3708      	.short	0x3708
 8005064:	37373727 	.word	0x37373727
 8005068:	3737372b 	.word	0x3737372b
 800506c:	37373737 	.word	0x37373737
 8005070:	2f          	.byte	0x2f
 8005071:	00          	.byte	0x00
    case 2:
        data = INV_FSR_2G << 3;
 8005072:	2300      	movs	r3, #0
 8005074:	f88d 3007 	strb.w	r3, [sp, #7]
        break;
    default:
        return -1;
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 8005078:	4b19      	ldr	r3, [pc, #100]	; (80050e0 <mpu_set_accel_fsr+0x94>)
 800507a:	7a5b      	ldrb	r3, [r3, #9]
 800507c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8005080:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
 8005084:	d027      	beq.n	80050d6 <mpu_set_accel_fsr+0x8a>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 8005086:	4b16      	ldr	r3, [pc, #88]	; (80050e0 <mpu_set_accel_fsr+0x94>)
 8005088:	6858      	ldr	r0, [r3, #4]
 800508a:	6819      	ldr	r1, [r3, #0]
 800508c:	f10d 0307 	add.w	r3, sp, #7
 8005090:	2201      	movs	r2, #1
 8005092:	79c9      	ldrb	r1, [r1, #7]
 8005094:	7800      	ldrb	r0, [r0, #0]
 8005096:	f7ff fdc1 	bl	8004c1c <arduino_i2c_write>
 800509a:	4603      	mov	r3, r0
 800509c:	b9e8      	cbnz	r0, 80050da <mpu_set_accel_fsr+0x8e>
        return -1;
    st.chip_cfg.accel_fsr = data >> 3;
 800509e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80050a2:	08d2      	lsrs	r2, r2, #3
 80050a4:	490e      	ldr	r1, [pc, #56]	; (80050e0 <mpu_set_accel_fsr+0x94>)
 80050a6:	724a      	strb	r2, [r1, #9]
    return 0;
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	b003      	add	sp, #12
 80050ac:	f85d fb04 	ldr.w	pc, [sp], #4
        data = INV_FSR_4G << 3;
 80050b0:	2308      	movs	r3, #8
 80050b2:	f88d 3007 	strb.w	r3, [sp, #7]
        break;
 80050b6:	e7df      	b.n	8005078 <mpu_set_accel_fsr+0x2c>
        data = INV_FSR_8G << 3;
 80050b8:	2310      	movs	r3, #16
 80050ba:	f88d 3007 	strb.w	r3, [sp, #7]
        break;
 80050be:	e7db      	b.n	8005078 <mpu_set_accel_fsr+0x2c>
        data = INV_FSR_16G << 3;
 80050c0:	2318      	movs	r3, #24
 80050c2:	f88d 3007 	strb.w	r3, [sp, #7]
        break;
 80050c6:	e7d7      	b.n	8005078 <mpu_set_accel_fsr+0x2c>
        return -1;
 80050c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	4770      	bx	lr
        return -1;
 80050d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050d4:	e7e8      	b.n	80050a8 <mpu_set_accel_fsr+0x5c>
        return 0;
 80050d6:	2300      	movs	r3, #0
 80050d8:	e7e6      	b.n	80050a8 <mpu_set_accel_fsr+0x5c>
        return -1;
 80050da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050de:	e7e3      	b.n	80050a8 <mpu_set_accel_fsr+0x5c>
 80050e0:	20000028 	.word	0x20000028

080050e4 <mpu_set_lpf>:
 */
int mpu_set_lpf(unsigned short lpf)
{
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 80050e4:	4b24      	ldr	r3, [pc, #144]	; (8005178 <mpu_set_lpf+0x94>)
 80050e6:	7a9b      	ldrb	r3, [r3, #10]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d03c      	beq.n	8005166 <mpu_set_lpf+0x82>
{
 80050ec:	b500      	push	{lr}
 80050ee:	b083      	sub	sp, #12
        return -1;

    if (lpf >= 188)
 80050f0:	28bb      	cmp	r0, #187	; 0xbb
 80050f2:	d91c      	bls.n	800512e <mpu_set_lpf+0x4a>
        data = INV_FILTER_188HZ;
 80050f4:	2301      	movs	r3, #1
 80050f6:	f88d 3007 	strb.w	r3, [sp, #7]
    else if (lpf >= 10)
        data = INV_FILTER_10HZ;
    else
        data = INV_FILTER_5HZ;

    if (st.chip_cfg.lpf == data)
 80050fa:	4b1f      	ldr	r3, [pc, #124]	; (8005178 <mpu_set_lpf+0x94>)
 80050fc:	7ada      	ldrb	r2, [r3, #11]
 80050fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005102:	429a      	cmp	r2, r3
 8005104:	d033      	beq.n	800516e <mpu_set_lpf+0x8a>
        return 0;
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 8005106:	4b1c      	ldr	r3, [pc, #112]	; (8005178 <mpu_set_lpf+0x94>)
 8005108:	6858      	ldr	r0, [r3, #4]
 800510a:	6819      	ldr	r1, [r3, #0]
 800510c:	f10d 0307 	add.w	r3, sp, #7
 8005110:	2201      	movs	r2, #1
 8005112:	7889      	ldrb	r1, [r1, #2]
 8005114:	7800      	ldrb	r0, [r0, #0]
 8005116:	f7ff fd81 	bl	8004c1c <arduino_i2c_write>
 800511a:	4603      	mov	r3, r0
 800511c:	bb48      	cbnz	r0, 8005172 <mpu_set_lpf+0x8e>
        return -1;
    st.chip_cfg.lpf = data;
 800511e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005122:	4a15      	ldr	r2, [pc, #84]	; (8005178 <mpu_set_lpf+0x94>)
 8005124:	72d1      	strb	r1, [r2, #11]
    return 0;
}
 8005126:	4618      	mov	r0, r3
 8005128:	b003      	add	sp, #12
 800512a:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (lpf >= 98)
 800512e:	2861      	cmp	r0, #97	; 0x61
 8005130:	d903      	bls.n	800513a <mpu_set_lpf+0x56>
        data = INV_FILTER_98HZ;
 8005132:	2302      	movs	r3, #2
 8005134:	f88d 3007 	strb.w	r3, [sp, #7]
 8005138:	e7df      	b.n	80050fa <mpu_set_lpf+0x16>
    else if (lpf >= 42)
 800513a:	2829      	cmp	r0, #41	; 0x29
 800513c:	d903      	bls.n	8005146 <mpu_set_lpf+0x62>
        data = INV_FILTER_42HZ;
 800513e:	2303      	movs	r3, #3
 8005140:	f88d 3007 	strb.w	r3, [sp, #7]
 8005144:	e7d9      	b.n	80050fa <mpu_set_lpf+0x16>
    else if (lpf >= 20)
 8005146:	2813      	cmp	r0, #19
 8005148:	d903      	bls.n	8005152 <mpu_set_lpf+0x6e>
        data = INV_FILTER_20HZ;
 800514a:	2304      	movs	r3, #4
 800514c:	f88d 3007 	strb.w	r3, [sp, #7]
 8005150:	e7d3      	b.n	80050fa <mpu_set_lpf+0x16>
    else if (lpf >= 10)
 8005152:	2809      	cmp	r0, #9
 8005154:	d903      	bls.n	800515e <mpu_set_lpf+0x7a>
        data = INV_FILTER_10HZ;
 8005156:	2305      	movs	r3, #5
 8005158:	f88d 3007 	strb.w	r3, [sp, #7]
 800515c:	e7cd      	b.n	80050fa <mpu_set_lpf+0x16>
        data = INV_FILTER_5HZ;
 800515e:	2306      	movs	r3, #6
 8005160:	f88d 3007 	strb.w	r3, [sp, #7]
 8005164:	e7c9      	b.n	80050fa <mpu_set_lpf+0x16>
        return -1;
 8005166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800516a:	4618      	mov	r0, r3
 800516c:	4770      	bx	lr
        return 0;
 800516e:	2300      	movs	r3, #0
 8005170:	e7d9      	b.n	8005126 <mpu_set_lpf+0x42>
        return -1;
 8005172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005176:	e7d6      	b.n	8005126 <mpu_set_lpf+0x42>
 8005178:	20000028 	.word	0x20000028

0800517c <mpu_set_compass_sample_rate>:
 *  mpu_get_compass_sample_rate to check the actual setting.
 *  @param[in]  rate    Desired compass sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_compass_sample_rate(unsigned short rate)
{
 800517c:	b510      	push	{r4, lr}
 800517e:	b082      	sub	sp, #8
#ifdef AK89xx_SECONDARY
    unsigned char div;
    if (!rate || rate > st.chip_cfg.sample_rate || rate > MAX_COMPASS_SAMPLE_RATE)
 8005180:	b308      	cbz	r0, 80051c6 <mpu_set_compass_sample_rate+0x4a>
 8005182:	4b17      	ldr	r3, [pc, #92]	; (80051e0 <mpu_set_compass_sample_rate+0x64>)
 8005184:	89db      	ldrh	r3, [r3, #14]
 8005186:	4283      	cmp	r3, r0
 8005188:	d320      	bcc.n	80051cc <mpu_set_compass_sample_rate+0x50>
 800518a:	2864      	cmp	r0, #100	; 0x64
 800518c:	d821      	bhi.n	80051d2 <mpu_set_compass_sample_rate+0x56>
        return -1;

    div = st.chip_cfg.sample_rate / rate - 1;
 800518e:	fbb3 f3f0 	udiv	r3, r3, r0
 8005192:	1e5a      	subs	r2, r3, #1
 8005194:	ab02      	add	r3, sp, #8
 8005196:	f803 2d01 	strb.w	r2, [r3, #-1]!
    if (i2c_write(st.hw->addr, st.reg->s4_ctrl, 1, &div))
 800519a:	4a11      	ldr	r2, [pc, #68]	; (80051e0 <mpu_set_compass_sample_rate+0x64>)
 800519c:	6850      	ldr	r0, [r2, #4]
 800519e:	6811      	ldr	r1, [r2, #0]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 80051a6:	7800      	ldrb	r0, [r0, #0]
 80051a8:	f7ff fd38 	bl	8004c1c <arduino_i2c_write>
 80051ac:	4604      	mov	r4, r0
 80051ae:	b998      	cbnz	r0, 80051d8 <mpu_set_compass_sample_rate+0x5c>
        return -1;
    st.chip_cfg.compass_sample_rate = st.chip_cfg.sample_rate / (div + 1);
 80051b0:	490b      	ldr	r1, [pc, #44]	; (80051e0 <mpu_set_compass_sample_rate+0x64>)
 80051b2:	89cb      	ldrh	r3, [r1, #14]
 80051b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80051b8:	3201      	adds	r2, #1
 80051ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80051be:	850b      	strh	r3, [r1, #40]	; 0x28
    return 0;
#else
    return -1;
#endif
}
 80051c0:	4620      	mov	r0, r4
 80051c2:	b002      	add	sp, #8
 80051c4:	bd10      	pop	{r4, pc}
        return -1;
 80051c6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80051ca:	e7f9      	b.n	80051c0 <mpu_set_compass_sample_rate+0x44>
 80051cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80051d0:	e7f6      	b.n	80051c0 <mpu_set_compass_sample_rate+0x44>
 80051d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80051d6:	e7f3      	b.n	80051c0 <mpu_set_compass_sample_rate+0x44>
        return -1;
 80051d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80051dc:	e7f0      	b.n	80051c0 <mpu_set_compass_sample_rate+0x44>
 80051de:	bf00      	nop
 80051e0:	20000028 	.word	0x20000028

080051e4 <mpu_get_gyro_sens>:
 *  @param[out] sens    Conversion from hardware units to dps.
 *  @return     0 if successful.
 */
int mpu_get_gyro_sens(float *sens)
{
    switch (st.chip_cfg.gyro_fsr) {
 80051e4:	4b0d      	ldr	r3, [pc, #52]	; (800521c <mpu_get_gyro_sens+0x38>)
 80051e6:	7a1b      	ldrb	r3, [r3, #8]
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	d813      	bhi.n	8005214 <mpu_get_gyro_sens+0x30>
 80051ec:	e8df f003 	tbb	[pc, r3]
 80051f0:	0e0a0602 	.word	0x0e0a0602
    case INV_FSR_250DPS:
        sens[0] = 131.f;
 80051f4:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <mpu_get_gyro_sens+0x3c>)
 80051f6:	6003      	str	r3, [r0, #0]
        sens[0] = 16.4f;
        break;
    default:
        return -1;
    }
    return 0;
 80051f8:	2000      	movs	r0, #0
        break;
 80051fa:	4770      	bx	lr
        sens[0] = 65.5f;
 80051fc:	4b09      	ldr	r3, [pc, #36]	; (8005224 <mpu_get_gyro_sens+0x40>)
 80051fe:	6003      	str	r3, [r0, #0]
    return 0;
 8005200:	2000      	movs	r0, #0
        break;
 8005202:	4770      	bx	lr
        sens[0] = 32.8f;
 8005204:	4b08      	ldr	r3, [pc, #32]	; (8005228 <mpu_get_gyro_sens+0x44>)
 8005206:	6003      	str	r3, [r0, #0]
    return 0;
 8005208:	2000      	movs	r0, #0
        break;
 800520a:	4770      	bx	lr
        sens[0] = 16.4f;
 800520c:	4b07      	ldr	r3, [pc, #28]	; (800522c <mpu_get_gyro_sens+0x48>)
 800520e:	6003      	str	r3, [r0, #0]
    return 0;
 8005210:	2000      	movs	r0, #0
        break;
 8005212:	4770      	bx	lr
        return -1;
 8005214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	20000028 	.word	0x20000028
 8005220:	43030000 	.word	0x43030000
 8005224:	42830000 	.word	0x42830000
 8005228:	42033333 	.word	0x42033333
 800522c:	41833333 	.word	0x41833333

08005230 <mpu_get_accel_sens>:
 *  @param[out] sens    Conversion from hardware units to g's.
 *  @return     0 if successful.
 */
int mpu_get_accel_sens(unsigned short *sens)
{
    switch (st.chip_cfg.accel_fsr) {
 8005230:	4b11      	ldr	r3, [pc, #68]	; (8005278 <mpu_get_accel_sens+0x48>)
 8005232:	7a5b      	ldrb	r3, [r3, #9]
 8005234:	2b03      	cmp	r3, #3
 8005236:	d81a      	bhi.n	800526e <mpu_get_accel_sens+0x3e>
 8005238:	e8df f003 	tbb	[pc, r3]
 800523c:	15110d02 	.word	0x15110d02
    case INV_FSR_2G:
        sens[0] = 16384;
 8005240:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005244:	8003      	strh	r3, [r0, #0]
        sens[0] = 2048;
        break;
    default:
        return -1;
    }
    if (st.chip_cfg.accel_half)
 8005246:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <mpu_get_accel_sens+0x48>)
 8005248:	7cdb      	ldrb	r3, [r3, #19]
 800524a:	b19b      	cbz	r3, 8005274 <mpu_get_accel_sens+0x44>
        sens[0] >>= 1;
 800524c:	8803      	ldrh	r3, [r0, #0]
 800524e:	085b      	lsrs	r3, r3, #1
 8005250:	8003      	strh	r3, [r0, #0]
    return 0;
 8005252:	2000      	movs	r0, #0
 8005254:	4770      	bx	lr
        sens[0] = 8192;
 8005256:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800525a:	8003      	strh	r3, [r0, #0]
        break;
 800525c:	e7f3      	b.n	8005246 <mpu_get_accel_sens+0x16>
        sens[0] = 4096;
 800525e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005262:	8003      	strh	r3, [r0, #0]
        break;
 8005264:	e7ef      	b.n	8005246 <mpu_get_accel_sens+0x16>
        sens[0] = 2048;
 8005266:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800526a:	8003      	strh	r3, [r0, #0]
        break;
 800526c:	e7eb      	b.n	8005246 <mpu_get_accel_sens+0x16>
        return -1;
 800526e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005272:	4770      	bx	lr
    return 0;
 8005274:	2000      	movs	r0, #0
}
 8005276:	4770      	bx	lr
 8005278:	20000028 	.word	0x20000028

0800527c <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 800527c:	b570      	push	{r4, r5, r6, lr}
    int result = 0;

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;

    if (st.chip_cfg.dmp_on)
 800527e:	4b16      	ldr	r3, [pc, #88]	; (80052d8 <mpu_configure_fifo+0x5c>)
 8005280:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005284:	bb13      	cbnz	r3, 80052cc <mpu_configure_fifo+0x50>
 8005286:	f000 04fe 	and.w	r4, r0, #254	; 0xfe
        return 0;
    else {
        if (!(st.chip_cfg.sensors))
 800528a:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <mpu_configure_fifo+0x5c>)
 800528c:	7a9b      	ldrb	r3, [r3, #10]
 800528e:	b303      	cbz	r3, 80052d2 <mpu_configure_fifo+0x56>
            return -1;
        prev = st.chip_cfg.fifo_enable;
 8005290:	4a11      	ldr	r2, [pc, #68]	; (80052d8 <mpu_configure_fifo+0x5c>)
 8005292:	7c16      	ldrb	r6, [r2, #16]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 8005294:	4023      	ands	r3, r4
 8005296:	7413      	strb	r3, [r2, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 8005298:	42a3      	cmp	r3, r4
 800529a:	d011      	beq.n	80052c0 <mpu_configure_fifo+0x44>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 800529c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        else
            result = 0;
        if (sensors || st.chip_cfg.lp_accel_mode)
 80052a0:	b914      	cbnz	r4, 80052a8 <mpu_configure_fifo+0x2c>
 80052a2:	4b0d      	ldr	r3, [pc, #52]	; (80052d8 <mpu_configure_fifo+0x5c>)
 80052a4:	7d1b      	ldrb	r3, [r3, #20]
 80052a6:	b16b      	cbz	r3, 80052c4 <mpu_configure_fifo+0x48>
            set_int_enable(1);
 80052a8:	2001      	movs	r0, #1
 80052aa:	f7ff fcf5 	bl	8004c98 <set_int_enable>
        else
            set_int_enable(0);
        if (sensors) {
 80052ae:	b174      	cbz	r4, 80052ce <mpu_configure_fifo+0x52>
            if (mpu_reset_fifo()) {
 80052b0:	f7ff fd62 	bl	8004d78 <mpu_reset_fifo>
 80052b4:	b158      	cbz	r0, 80052ce <mpu_configure_fifo+0x52>
                st.chip_cfg.fifo_enable = prev;
 80052b6:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <mpu_configure_fifo+0x5c>)
 80052b8:	741e      	strb	r6, [r3, #16]
                return -1;
 80052ba:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80052be:	e006      	b.n	80052ce <mpu_configure_fifo+0x52>
            result = 0;
 80052c0:	2500      	movs	r5, #0
 80052c2:	e7ed      	b.n	80052a0 <mpu_configure_fifo+0x24>
            set_int_enable(0);
 80052c4:	2000      	movs	r0, #0
 80052c6:	f7ff fce7 	bl	8004c98 <set_int_enable>
 80052ca:	e7f0      	b.n	80052ae <mpu_configure_fifo+0x32>
        return 0;
 80052cc:	2500      	movs	r5, #0
            }
        }
    }

    return result;
}
 80052ce:	4628      	mov	r0, r5
 80052d0:	bd70      	pop	{r4, r5, r6, pc}
            return -1;
 80052d2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80052d6:	e7fa      	b.n	80052ce <mpu_configure_fifo+0x52>
 80052d8:	20000028 	.word	0x20000028

080052dc <mpu_read_fifo_stream>:
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data,
    unsigned char *more)
{
 80052dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052de:	b083      	sub	sp, #12
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 80052e0:	4f2e      	ldr	r7, [pc, #184]	; (800539c <mpu_read_fifo_stream+0xc0>)
 80052e2:	f897 7024 	ldrb.w	r7, [r7, #36]	; 0x24
 80052e6:	2f00      	cmp	r7, #0
 80052e8:	d049      	beq.n	800537e <mpu_read_fifo_stream+0xa2>
        return -1;
    if (!st.chip_cfg.sensors)
 80052ea:	4f2c      	ldr	r7, [pc, #176]	; (800539c <mpu_read_fifo_stream+0xc0>)
 80052ec:	7abf      	ldrb	r7, [r7, #10]
 80052ee:	2f00      	cmp	r7, #0
 80052f0:	d048      	beq.n	8005384 <mpu_read_fifo_stream+0xa8>
 80052f2:	4616      	mov	r6, r2
 80052f4:	460f      	mov	r7, r1
 80052f6:	4605      	mov	r5, r0
        return -1;

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 80052f8:	4b28      	ldr	r3, [pc, #160]	; (800539c <mpu_read_fifo_stream+0xc0>)
 80052fa:	6858      	ldr	r0, [r3, #4]
 80052fc:	6819      	ldr	r1, [r3, #0]
 80052fe:	ab01      	add	r3, sp, #4
 8005300:	2202      	movs	r2, #2
 8005302:	7b09      	ldrb	r1, [r1, #12]
 8005304:	7800      	ldrb	r0, [r0, #0]
 8005306:	f7ff fca7 	bl	8004c58 <arduino_i2c_read>
 800530a:	2800      	cmp	r0, #0
 800530c:	d13d      	bne.n	800538a <mpu_read_fifo_stream+0xae>
        return -1;
    fifo_count = (tmp[0] << 8) | tmp[1];
 800530e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8005312:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8005316:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    if (fifo_count < length) {
 800531a:	42ac      	cmp	r4, r5
 800531c:	d325      	bcc.n	800536a <mpu_read_fifo_stream+0x8e>
        more[0] = 0;
        return -1;
    }
    if (fifo_count > (st.hw->max_fifo >> 1)) {
 800531e:	4b1f      	ldr	r3, [pc, #124]	; (800539c <mpu_read_fifo_stream+0xc0>)
 8005320:	6858      	ldr	r0, [r3, #4]
 8005322:	8843      	ldrh	r3, [r0, #2]
 8005324:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 8005328:	d90d      	bls.n	8005346 <mpu_read_fifo_stream+0x6a>
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 800532a:	4b1c      	ldr	r3, [pc, #112]	; (800539c <mpu_read_fifo_stream+0xc0>)
 800532c:	6819      	ldr	r1, [r3, #0]
 800532e:	ab01      	add	r3, sp, #4
 8005330:	2201      	movs	r2, #1
 8005332:	7cc9      	ldrb	r1, [r1, #19]
 8005334:	7800      	ldrb	r0, [r0, #0]
 8005336:	f7ff fc8f 	bl	8004c58 <arduino_i2c_read>
 800533a:	bb48      	cbnz	r0, 8005390 <mpu_read_fifo_stream+0xb4>
            return -1;
        if (tmp[0] & BIT_FIFO_OVERFLOW) {
 800533c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005340:	f013 0f10 	tst.w	r3, #16
 8005344:	d116      	bne.n	8005374 <mpu_read_fifo_stream+0x98>
            mpu_reset_fifo();
            return -2;
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 8005346:	4b15      	ldr	r3, [pc, #84]	; (800539c <mpu_read_fifo_stream+0xc0>)
 8005348:	6858      	ldr	r0, [r3, #4]
 800534a:	6819      	ldr	r1, [r3, #0]
 800534c:	463b      	mov	r3, r7
 800534e:	b2ea      	uxtb	r2, r5
 8005350:	7b49      	ldrb	r1, [r1, #13]
 8005352:	7800      	ldrb	r0, [r0, #0]
 8005354:	f7ff fc80 	bl	8004c58 <arduino_i2c_read>
 8005358:	4603      	mov	r3, r0
 800535a:	b9e0      	cbnz	r0, 8005396 <mpu_read_fifo_stream+0xba>
        return -1;
    more[0] = fifo_count / length - 1;
 800535c:	fbb4 f4f5 	udiv	r4, r4, r5
 8005360:	3c01      	subs	r4, #1
 8005362:	7034      	strb	r4, [r6, #0]
    return 0;
}
 8005364:	4618      	mov	r0, r3
 8005366:	b003      	add	sp, #12
 8005368:	bdf0      	pop	{r4, r5, r6, r7, pc}
        more[0] = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	7033      	strb	r3, [r6, #0]
        return -1;
 800536e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005372:	e7f7      	b.n	8005364 <mpu_read_fifo_stream+0x88>
            mpu_reset_fifo();
 8005374:	f7ff fd00 	bl	8004d78 <mpu_reset_fifo>
            return -2;
 8005378:	f06f 0301 	mvn.w	r3, #1
 800537c:	e7f2      	b.n	8005364 <mpu_read_fifo_stream+0x88>
        return -1;
 800537e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005382:	e7ef      	b.n	8005364 <mpu_read_fifo_stream+0x88>
        return -1;
 8005384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005388:	e7ec      	b.n	8005364 <mpu_read_fifo_stream+0x88>
        return -1;
 800538a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800538e:	e7e9      	b.n	8005364 <mpu_read_fifo_stream+0x88>
            return -1;
 8005390:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005394:	e7e6      	b.n	8005364 <mpu_read_fifo_stream+0x88>
        return -1;
 8005396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800539a:	e7e3      	b.n	8005364 <mpu_read_fifo_stream+0x88>
 800539c:	20000028 	.word	0x20000028

080053a0 <mpu_set_bypass>:
 */
int mpu_set_bypass(unsigned char bypass_on)
{
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 80053a0:	4b58      	ldr	r3, [pc, #352]	; (8005504 <mpu_set_bypass+0x164>)
 80053a2:	7c9b      	ldrb	r3, [r3, #18]
 80053a4:	4283      	cmp	r3, r0
 80053a6:	f000 809b 	beq.w	80054e0 <mpu_set_bypass+0x140>
{
 80053aa:	b510      	push	{r4, lr}
 80053ac:	b082      	sub	sp, #8
 80053ae:	4604      	mov	r4, r0
        return 0;

    if (bypass_on) {
 80053b0:	2800      	cmp	r0, #0
 80053b2:	d043      	beq.n	800543c <mpu_set_bypass+0x9c>
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80053b4:	4b53      	ldr	r3, [pc, #332]	; (8005504 <mpu_set_bypass+0x164>)
 80053b6:	6858      	ldr	r0, [r3, #4]
 80053b8:	6819      	ldr	r1, [r3, #0]
 80053ba:	f10d 0307 	add.w	r3, sp, #7
 80053be:	2201      	movs	r2, #1
 80053c0:	7909      	ldrb	r1, [r1, #4]
 80053c2:	7800      	ldrb	r0, [r0, #0]
 80053c4:	f7ff fc48 	bl	8004c58 <arduino_i2c_read>
 80053c8:	2800      	cmp	r0, #0
 80053ca:	f040 808b 	bne.w	80054e4 <mpu_set_bypass+0x144>
            return -1;
        tmp &= ~BIT_AUX_IF_EN;
 80053ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80053d2:	f022 0220 	bic.w	r2, r2, #32
 80053d6:	ab02      	add	r3, sp, #8
 80053d8:	f803 2d01 	strb.w	r2, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 80053dc:	4a49      	ldr	r2, [pc, #292]	; (8005504 <mpu_set_bypass+0x164>)
 80053de:	6850      	ldr	r0, [r2, #4]
 80053e0:	6811      	ldr	r1, [r2, #0]
 80053e2:	2201      	movs	r2, #1
 80053e4:	7909      	ldrb	r1, [r1, #4]
 80053e6:	7800      	ldrb	r0, [r0, #0]
 80053e8:	f7ff fc18 	bl	8004c1c <arduino_i2c_write>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d17c      	bne.n	80054ea <mpu_set_bypass+0x14a>
            return -1;
        delay_ms(3);
 80053f0:	2003      	movs	r0, #3
 80053f2:	f7ff fc0e 	bl	8004c12 <arduino_delay_ms>
        tmp = BIT_BYPASS_EN;
 80053f6:	2302      	movs	r3, #2
 80053f8:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.active_low_int)
 80053fc:	4b41      	ldr	r3, [pc, #260]	; (8005504 <mpu_set_bypass+0x164>)
 80053fe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005402:	b113      	cbz	r3, 800540a <mpu_set_bypass+0x6a>
            tmp |= BIT_ACTL;
 8005404:	2382      	movs	r3, #130	; 0x82
 8005406:	f88d 3007 	strb.w	r3, [sp, #7]
        if (st.chip_cfg.latched_int)
 800540a:	4b3e      	ldr	r3, [pc, #248]	; (8005504 <mpu_set_bypass+0x164>)
 800540c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005410:	b12b      	cbz	r3, 800541e <mpu_set_bypass+0x7e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8005412:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005416:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800541a:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800541e:	4b39      	ldr	r3, [pc, #228]	; (8005504 <mpu_set_bypass+0x164>)
 8005420:	6858      	ldr	r0, [r3, #4]
 8005422:	6819      	ldr	r1, [r3, #0]
 8005424:	f10d 0307 	add.w	r3, sp, #7
 8005428:	2201      	movs	r2, #1
 800542a:	7dc9      	ldrb	r1, [r1, #23]
 800542c:	7800      	ldrb	r0, [r0, #0]
 800542e:	f7ff fbf5 	bl	8004c1c <arduino_i2c_write>
 8005432:	2800      	cmp	r0, #0
 8005434:	d044      	beq.n	80054c0 <mpu_set_bypass+0x120>
            return -1;
 8005436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800543a:	e044      	b.n	80054c6 <mpu_set_bypass+0x126>
    } else {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800543c:	4b31      	ldr	r3, [pc, #196]	; (8005504 <mpu_set_bypass+0x164>)
 800543e:	6858      	ldr	r0, [r3, #4]
 8005440:	6819      	ldr	r1, [r3, #0]
 8005442:	f10d 0307 	add.w	r3, sp, #7
 8005446:	2201      	movs	r2, #1
 8005448:	7909      	ldrb	r1, [r1, #4]
 800544a:	7800      	ldrb	r0, [r0, #0]
 800544c:	f7ff fc04 	bl	8004c58 <arduino_i2c_read>
 8005450:	2800      	cmp	r0, #0
 8005452:	d14d      	bne.n	80054f0 <mpu_set_bypass+0x150>
            return -1;
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 8005454:	4b2b      	ldr	r3, [pc, #172]	; (8005504 <mpu_set_bypass+0x164>)
 8005456:	7a9b      	ldrb	r3, [r3, #10]
 8005458:	f013 0f01 	tst.w	r3, #1
 800545c:	d035      	beq.n	80054ca <mpu_set_bypass+0x12a>
            tmp |= BIT_AUX_IF_EN;
 800545e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005462:	f043 0320 	orr.w	r3, r3, #32
 8005466:	f88d 3007 	strb.w	r3, [sp, #7]
        else
            tmp &= ~BIT_AUX_IF_EN;
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800546a:	4b26      	ldr	r3, [pc, #152]	; (8005504 <mpu_set_bypass+0x164>)
 800546c:	6858      	ldr	r0, [r3, #4]
 800546e:	6819      	ldr	r1, [r3, #0]
 8005470:	f10d 0307 	add.w	r3, sp, #7
 8005474:	2201      	movs	r2, #1
 8005476:	7909      	ldrb	r1, [r1, #4]
 8005478:	7800      	ldrb	r0, [r0, #0]
 800547a:	f7ff fbcf 	bl	8004c1c <arduino_i2c_write>
 800547e:	2800      	cmp	r0, #0
 8005480:	d139      	bne.n	80054f6 <mpu_set_bypass+0x156>
            return -1;
        delay_ms(3);
 8005482:	2003      	movs	r0, #3
 8005484:	f7ff fbc5 	bl	8004c12 <arduino_delay_ms>
        if (st.chip_cfg.active_low_int)
 8005488:	4b1e      	ldr	r3, [pc, #120]	; (8005504 <mpu_set_bypass+0x164>)
 800548a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800548e:	b31b      	cbz	r3, 80054d8 <mpu_set_bypass+0x138>
            tmp = BIT_ACTL;
 8005490:	2380      	movs	r3, #128	; 0x80
 8005492:	f88d 3007 	strb.w	r3, [sp, #7]
        else
            tmp = 0;
        if (st.chip_cfg.latched_int)
 8005496:	4b1b      	ldr	r3, [pc, #108]	; (8005504 <mpu_set_bypass+0x164>)
 8005498:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800549c:	b12b      	cbz	r3, 80054aa <mpu_set_bypass+0x10a>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800549e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80054a2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80054a6:	f88d 3007 	strb.w	r3, [sp, #7]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 80054aa:	4b16      	ldr	r3, [pc, #88]	; (8005504 <mpu_set_bypass+0x164>)
 80054ac:	6858      	ldr	r0, [r3, #4]
 80054ae:	6819      	ldr	r1, [r3, #0]
 80054b0:	f10d 0307 	add.w	r3, sp, #7
 80054b4:	2201      	movs	r2, #1
 80054b6:	7dc9      	ldrb	r1, [r1, #23]
 80054b8:	7800      	ldrb	r0, [r0, #0]
 80054ba:	f7ff fbaf 	bl	8004c1c <arduino_i2c_write>
 80054be:	b9e8      	cbnz	r0, 80054fc <mpu_set_bypass+0x15c>
            return -1;
    }
    st.chip_cfg.bypass_mode = bypass_on;
 80054c0:	4b10      	ldr	r3, [pc, #64]	; (8005504 <mpu_set_bypass+0x164>)
 80054c2:	749c      	strb	r4, [r3, #18]
    return 0;
 80054c4:	2000      	movs	r0, #0
}
 80054c6:	b002      	add	sp, #8
 80054c8:	bd10      	pop	{r4, pc}
            tmp &= ~BIT_AUX_IF_EN;
 80054ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80054ce:	f023 0320 	bic.w	r3, r3, #32
 80054d2:	f88d 3007 	strb.w	r3, [sp, #7]
 80054d6:	e7c8      	b.n	800546a <mpu_set_bypass+0xca>
            tmp = 0;
 80054d8:	2300      	movs	r3, #0
 80054da:	f88d 3007 	strb.w	r3, [sp, #7]
 80054de:	e7da      	b.n	8005496 <mpu_set_bypass+0xf6>
        return 0;
 80054e0:	2000      	movs	r0, #0
}
 80054e2:	4770      	bx	lr
            return -1;
 80054e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054e8:	e7ed      	b.n	80054c6 <mpu_set_bypass+0x126>
            return -1;
 80054ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054ee:	e7ea      	b.n	80054c6 <mpu_set_bypass+0x126>
            return -1;
 80054f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054f4:	e7e7      	b.n	80054c6 <mpu_set_bypass+0x126>
            return -1;
 80054f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054fa:	e7e4      	b.n	80054c6 <mpu_set_bypass+0x126>
            return -1;
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005500:	e7e1      	b.n	80054c6 <mpu_set_bypass+0x126>
 8005502:	bf00      	nop
 8005504:	20000028 	.word	0x20000028

08005508 <setup_compass>:
}

#ifdef AK89xx_SECONDARY
/* This initialization is similar to the one in ak8975.c. */
static int setup_compass(void)
{
 8005508:	b510      	push	{r4, lr}
 800550a:	b082      	sub	sp, #8
    unsigned char data[4], akm_addr;

    mpu_set_bypass(1);
 800550c:	2001      	movs	r0, #1
 800550e:	f7ff ff47 	bl	80053a0 <mpu_set_bypass>

    /* Find compass. Possible addresses range from 0x0C to 0x0F. */
    for (akm_addr = 0x0C; akm_addr <= 0x0F; akm_addr++) {
 8005512:	240c      	movs	r4, #12
 8005514:	e001      	b.n	800551a <setup_compass+0x12>
 8005516:	3401      	adds	r4, #1
 8005518:	b2e4      	uxtb	r4, r4
 800551a:	2c0f      	cmp	r4, #15
 800551c:	d80b      	bhi.n	8005536 <setup_compass+0x2e>
        int result;
        result = i2c_read(akm_addr, AKM_REG_WHOAMI, 1, data);
 800551e:	ab01      	add	r3, sp, #4
 8005520:	2201      	movs	r2, #1
 8005522:	2100      	movs	r1, #0
 8005524:	4620      	mov	r0, r4
 8005526:	f7ff fb97 	bl	8004c58 <arduino_i2c_read>
        if (!result && (data[0] == AKM_WHOAMI))
 800552a:	2800      	cmp	r0, #0
 800552c:	d1f3      	bne.n	8005516 <setup_compass+0xe>
 800552e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005532:	2b48      	cmp	r3, #72	; 0x48
 8005534:	d1ef      	bne.n	8005516 <setup_compass+0xe>
            break;
    }

    if (akm_addr > 0x0F) {
 8005536:	2c0f      	cmp	r4, #15
 8005538:	f200 80db 	bhi.w	80056f2 <setup_compass+0x1ea>
        /* TODO: Handle this case in all compass-related functions. */
        log_e("Compass not found.\n");
        return -1;
    }

    st.chip_cfg.compass_addr = akm_addr;
 800553c:	4b83      	ldr	r3, [pc, #524]	; (800574c <setup_compass+0x244>)
 800553e:	f883 402a 	strb.w	r4, [r3, #42]	; 0x2a

    data[0] = AKM_POWER_DOWN;
 8005542:	ab02      	add	r3, sp, #8
 8005544:	2210      	movs	r2, #16
 8005546:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 800554a:	2201      	movs	r2, #1
 800554c:	210a      	movs	r1, #10
 800554e:	4620      	mov	r0, r4
 8005550:	f7ff fb64 	bl	8004c1c <arduino_i2c_write>
 8005554:	2800      	cmp	r0, #0
 8005556:	f040 80d5 	bne.w	8005704 <setup_compass+0x1fc>
        return -1;
    delay_ms(1);
 800555a:	2001      	movs	r0, #1
 800555c:	f7ff fb59 	bl	8004c12 <arduino_delay_ms>

    data[0] = AKM_FUSE_ROM_ACCESS;
 8005560:	ab02      	add	r3, sp, #8
 8005562:	221f      	movs	r2, #31
 8005564:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 8005568:	2201      	movs	r2, #1
 800556a:	210a      	movs	r1, #10
 800556c:	4877      	ldr	r0, [pc, #476]	; (800574c <setup_compass+0x244>)
 800556e:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 8005572:	f7ff fb53 	bl	8004c1c <arduino_i2c_write>
 8005576:	2800      	cmp	r0, #0
 8005578:	f040 80c7 	bne.w	800570a <setup_compass+0x202>
        return -1;
    delay_ms(1);
 800557c:	2001      	movs	r0, #1
 800557e:	f7ff fb48 	bl	8004c12 <arduino_delay_ms>

    /* Get sensitivity adjustment data from fuse ROM. */
    if (i2c_read(st.chip_cfg.compass_addr, AKM_REG_ASAX, 3, data))
 8005582:	ab01      	add	r3, sp, #4
 8005584:	2203      	movs	r2, #3
 8005586:	2110      	movs	r1, #16
 8005588:	4870      	ldr	r0, [pc, #448]	; (800574c <setup_compass+0x244>)
 800558a:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 800558e:	f7ff fb63 	bl	8004c58 <arduino_i2c_read>
 8005592:	2800      	cmp	r0, #0
 8005594:	f040 80bc 	bne.w	8005710 <setup_compass+0x208>
        return -1;
    st.chip_cfg.mag_sens_adj[0] = (long)data[0] + 128;
 8005598:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800559c:	3380      	adds	r3, #128	; 0x80
 800559e:	486b      	ldr	r0, [pc, #428]	; (800574c <setup_compass+0x244>)
 80055a0:	8583      	strh	r3, [r0, #44]	; 0x2c
    st.chip_cfg.mag_sens_adj[1] = (long)data[1] + 128;
 80055a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80055a6:	3380      	adds	r3, #128	; 0x80
 80055a8:	85c3      	strh	r3, [r0, #46]	; 0x2e
    st.chip_cfg.mag_sens_adj[2] = (long)data[2] + 128;
 80055aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80055ae:	3380      	adds	r3, #128	; 0x80
 80055b0:	8603      	strh	r3, [r0, #48]	; 0x30

    data[0] = AKM_POWER_DOWN;
 80055b2:	ab02      	add	r3, sp, #8
 80055b4:	2210      	movs	r2, #16
 80055b6:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.chip_cfg.compass_addr, AKM_REG_CNTL, 1, data))
 80055ba:	2201      	movs	r2, #1
 80055bc:	210a      	movs	r1, #10
 80055be:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 80055c2:	f7ff fb2b 	bl	8004c1c <arduino_i2c_write>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	f040 80a5 	bne.w	8005716 <setup_compass+0x20e>
        return -1;
    delay_ms(1);
 80055cc:	2001      	movs	r0, #1
 80055ce:	f7ff fb20 	bl	8004c12 <arduino_delay_ms>

    mpu_set_bypass(0);
 80055d2:	2000      	movs	r0, #0
 80055d4:	f7ff fee4 	bl	80053a0 <mpu_set_bypass>

    /* Set up master mode, master clock, and ES bit. */
    data[0] = 0x40;
 80055d8:	ab02      	add	r3, sp, #8
 80055da:	2240      	movs	r2, #64	; 0x40
 80055dc:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->i2c_mst, 1, data))
 80055e0:	4a5a      	ldr	r2, [pc, #360]	; (800574c <setup_compass+0x244>)
 80055e2:	6850      	ldr	r0, [r2, #4]
 80055e4:	6811      	ldr	r1, [r2, #0]
 80055e6:	2201      	movs	r2, #1
 80055e8:	7e89      	ldrb	r1, [r1, #26]
 80055ea:	7800      	ldrb	r0, [r0, #0]
 80055ec:	f7ff fb16 	bl	8004c1c <arduino_i2c_write>
 80055f0:	2800      	cmp	r0, #0
 80055f2:	f040 8093 	bne.w	800571c <setup_compass+0x214>
        return -1;

    /* Slave 0 reads from AKM data registers. */
    data[0] = BIT_I2C_READ | st.chip_cfg.compass_addr;
 80055f6:	4a55      	ldr	r2, [pc, #340]	; (800574c <setup_compass+0x244>)
 80055f8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80055fc:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8005600:	ab02      	add	r3, sp, #8
 8005602:	f803 1d04 	strb.w	r1, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s0_addr, 1, data))
 8005606:	6850      	ldr	r0, [r2, #4]
 8005608:	6811      	ldr	r1, [r2, #0]
 800560a:	2201      	movs	r2, #1
 800560c:	7f89      	ldrb	r1, [r1, #30]
 800560e:	7800      	ldrb	r0, [r0, #0]
 8005610:	f7ff fb04 	bl	8004c1c <arduino_i2c_write>
 8005614:	2800      	cmp	r0, #0
 8005616:	f040 8084 	bne.w	8005722 <setup_compass+0x21a>
        return -1;

    /* Compass reads start at this register. */
    data[0] = AKM_REG_ST1;
 800561a:	ab02      	add	r3, sp, #8
 800561c:	2202      	movs	r2, #2
 800561e:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s0_reg, 1, data))
 8005622:	4a4a      	ldr	r2, [pc, #296]	; (800574c <setup_compass+0x244>)
 8005624:	6850      	ldr	r0, [r2, #4]
 8005626:	6811      	ldr	r1, [r2, #0]
 8005628:	2201      	movs	r2, #1
 800562a:	7fc9      	ldrb	r1, [r1, #31]
 800562c:	7800      	ldrb	r0, [r0, #0]
 800562e:	f7ff faf5 	bl	8004c1c <arduino_i2c_write>
 8005632:	2800      	cmp	r0, #0
 8005634:	d178      	bne.n	8005728 <setup_compass+0x220>
        return -1;

    /* Enable slave 0, 8-byte reads. */
    data[0] = BIT_SLAVE_EN | 8;
 8005636:	ab02      	add	r3, sp, #8
 8005638:	2288      	movs	r2, #136	; 0x88
 800563a:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s0_ctrl, 1, data))
 800563e:	4a43      	ldr	r2, [pc, #268]	; (800574c <setup_compass+0x244>)
 8005640:	6850      	ldr	r0, [r2, #4]
 8005642:	6811      	ldr	r1, [r2, #0]
 8005644:	2201      	movs	r2, #1
 8005646:	f891 1020 	ldrb.w	r1, [r1, #32]
 800564a:	7800      	ldrb	r0, [r0, #0]
 800564c:	f7ff fae6 	bl	8004c1c <arduino_i2c_write>
 8005650:	2800      	cmp	r0, #0
 8005652:	d16c      	bne.n	800572e <setup_compass+0x226>
        return -1;

    /* Slave 1 changes AKM measurement mode. */
    data[0] = st.chip_cfg.compass_addr;
 8005654:	4a3d      	ldr	r2, [pc, #244]	; (800574c <setup_compass+0x244>)
 8005656:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800565a:	ab02      	add	r3, sp, #8
 800565c:	f803 1d04 	strb.w	r1, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s1_addr, 1, data))
 8005660:	6850      	ldr	r0, [r2, #4]
 8005662:	6811      	ldr	r1, [r2, #0]
 8005664:	2201      	movs	r2, #1
 8005666:	f891 1021 	ldrb.w	r1, [r1, #33]	; 0x21
 800566a:	7800      	ldrb	r0, [r0, #0]
 800566c:	f7ff fad6 	bl	8004c1c <arduino_i2c_write>
 8005670:	2800      	cmp	r0, #0
 8005672:	d15f      	bne.n	8005734 <setup_compass+0x22c>
        return -1;

    /* AKM measurement mode register. */
    data[0] = AKM_REG_CNTL;
 8005674:	ab02      	add	r3, sp, #8
 8005676:	220a      	movs	r2, #10
 8005678:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s1_reg, 1, data))
 800567c:	4a33      	ldr	r2, [pc, #204]	; (800574c <setup_compass+0x244>)
 800567e:	6850      	ldr	r0, [r2, #4]
 8005680:	6811      	ldr	r1, [r2, #0]
 8005682:	2201      	movs	r2, #1
 8005684:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8005688:	7800      	ldrb	r0, [r0, #0]
 800568a:	f7ff fac7 	bl	8004c1c <arduino_i2c_write>
 800568e:	2800      	cmp	r0, #0
 8005690:	d153      	bne.n	800573a <setup_compass+0x232>
        return -1;

    /* Enable slave 1, 1-byte writes. */
    data[0] = BIT_SLAVE_EN | 1;
 8005692:	ab02      	add	r3, sp, #8
 8005694:	2281      	movs	r2, #129	; 0x81
 8005696:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s1_ctrl, 1, data))
 800569a:	4a2c      	ldr	r2, [pc, #176]	; (800574c <setup_compass+0x244>)
 800569c:	6850      	ldr	r0, [r2, #4]
 800569e:	6811      	ldr	r1, [r2, #0]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
 80056a6:	7800      	ldrb	r0, [r0, #0]
 80056a8:	f7ff fab8 	bl	8004c1c <arduino_i2c_write>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d147      	bne.n	8005740 <setup_compass+0x238>
        return -1;

    /* Set slave 1 data. */
    data[0] = AKM_SINGLE_MEASUREMENT;
 80056b0:	ab02      	add	r3, sp, #8
 80056b2:	2211      	movs	r2, #17
 80056b4:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, data))
 80056b8:	4a24      	ldr	r2, [pc, #144]	; (800574c <setup_compass+0x244>)
 80056ba:	6850      	ldr	r0, [r2, #4]
 80056bc:	6811      	ldr	r1, [r2, #0]
 80056be:	2201      	movs	r2, #1
 80056c0:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 80056c4:	7800      	ldrb	r0, [r0, #0]
 80056c6:	f7ff faa9 	bl	8004c1c <arduino_i2c_write>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	d13b      	bne.n	8005746 <setup_compass+0x23e>
        return -1;

    /* Trigger slave 0 and slave 1 actions at each sample. */
    data[0] = 0x03;
 80056ce:	ab02      	add	r3, sp, #8
 80056d0:	2203      	movs	r2, #3
 80056d2:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->i2c_delay_ctrl, 1, data))
 80056d6:	4a1d      	ldr	r2, [pc, #116]	; (800574c <setup_compass+0x244>)
 80056d8:	6850      	ldr	r0, [r2, #4]
 80056da:	6811      	ldr	r1, [r2, #0]
 80056dc:	2201      	movs	r2, #1
 80056de:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
 80056e2:	7800      	ldrb	r0, [r0, #0]
 80056e4:	f7ff fa9a 	bl	8004c1c <arduino_i2c_write>
 80056e8:	4603      	mov	r3, r0
 80056ea:	b940      	cbnz	r0, 80056fe <setup_compass+0x1f6>
    if (i2c_write(st.hw->addr, st.reg->yg_offs_tc, 1, data))
        return -1;
#endif

    return 0;
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	b002      	add	sp, #8
 80056f0:	bd10      	pop	{r4, pc}
        log_e("Compass not found.\n");
 80056f2:	4817      	ldr	r0, [pc, #92]	; (8005750 <setup_compass+0x248>)
 80056f4:	f7ff facc 	bl	8004c90 <_MLPrintLog>
        return -1;
 80056f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056fc:	e7f6      	b.n	80056ec <setup_compass+0x1e4>
        return -1;
 80056fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005702:	e7f3      	b.n	80056ec <setup_compass+0x1e4>
        return -1;
 8005704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005708:	e7f0      	b.n	80056ec <setup_compass+0x1e4>
        return -1;
 800570a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800570e:	e7ed      	b.n	80056ec <setup_compass+0x1e4>
        return -1;
 8005710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005714:	e7ea      	b.n	80056ec <setup_compass+0x1e4>
        return -1;
 8005716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800571a:	e7e7      	b.n	80056ec <setup_compass+0x1e4>
        return -1;
 800571c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005720:	e7e4      	b.n	80056ec <setup_compass+0x1e4>
        return -1;
 8005722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005726:	e7e1      	b.n	80056ec <setup_compass+0x1e4>
        return -1;
 8005728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800572c:	e7de      	b.n	80056ec <setup_compass+0x1e4>
        return -1;
 800572e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005732:	e7db      	b.n	80056ec <setup_compass+0x1e4>
        return -1;
 8005734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005738:	e7d8      	b.n	80056ec <setup_compass+0x1e4>
        return -1;
 800573a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800573e:	e7d5      	b.n	80056ec <setup_compass+0x1e4>
        return -1;
 8005740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005744:	e7d2      	b.n	80056ec <setup_compass+0x1e4>
        return -1;
 8005746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800574a:	e7cf      	b.n	80056ec <setup_compass+0x1e4>
 800574c:	20000028 	.word	0x20000028
 8005750:	0800a6f8 	.word	0x0800a6f8

08005754 <mpu_set_int_latched>:
    if (st.chip_cfg.latched_int == enable)
 8005754:	4b1d      	ldr	r3, [pc, #116]	; (80057cc <mpu_set_int_latched+0x78>)
 8005756:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800575a:	4283      	cmp	r3, r0
 800575c:	d02f      	beq.n	80057be <mpu_set_int_latched+0x6a>
{
 800575e:	b510      	push	{r4, lr}
 8005760:	b082      	sub	sp, #8
    if (enable)
 8005762:	b340      	cbz	r0, 80057b6 <mpu_set_int_latched+0x62>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 8005764:	2330      	movs	r3, #48	; 0x30
 8005766:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.bypass_mode)
 800576a:	4b18      	ldr	r3, [pc, #96]	; (80057cc <mpu_set_int_latched+0x78>)
 800576c:	7c9b      	ldrb	r3, [r3, #18]
 800576e:	b12b      	cbz	r3, 800577c <mpu_set_int_latched+0x28>
        tmp |= BIT_BYPASS_EN;
 8005770:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005774:	f043 0302 	orr.w	r3, r3, #2
 8005778:	f88d 3007 	strb.w	r3, [sp, #7]
    if (st.chip_cfg.active_low_int)
 800577c:	4b13      	ldr	r3, [pc, #76]	; (80057cc <mpu_set_int_latched+0x78>)
 800577e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005782:	b12b      	cbz	r3, 8005790 <mpu_set_int_latched+0x3c>
        tmp |= BIT_ACTL;
 8005784:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005788:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800578c:	f88d 3007 	strb.w	r3, [sp, #7]
 8005790:	4604      	mov	r4, r0
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 8005792:	4b0e      	ldr	r3, [pc, #56]	; (80057cc <mpu_set_int_latched+0x78>)
 8005794:	6858      	ldr	r0, [r3, #4]
 8005796:	6819      	ldr	r1, [r3, #0]
 8005798:	f10d 0307 	add.w	r3, sp, #7
 800579c:	2201      	movs	r2, #1
 800579e:	7dc9      	ldrb	r1, [r1, #23]
 80057a0:	7800      	ldrb	r0, [r0, #0]
 80057a2:	f7ff fa3b 	bl	8004c1c <arduino_i2c_write>
 80057a6:	4603      	mov	r3, r0
 80057a8:	b960      	cbnz	r0, 80057c4 <mpu_set_int_latched+0x70>
    st.chip_cfg.latched_int = enable;
 80057aa:	4a08      	ldr	r2, [pc, #32]	; (80057cc <mpu_set_int_latched+0x78>)
 80057ac:	f882 4023 	strb.w	r4, [r2, #35]	; 0x23
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	b002      	add	sp, #8
 80057b4:	bd10      	pop	{r4, pc}
        tmp = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	f88d 3007 	strb.w	r3, [sp, #7]
 80057bc:	e7d5      	b.n	800576a <mpu_set_int_latched+0x16>
        return 0;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	4770      	bx	lr
        return -1;
 80057c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057c8:	e7f2      	b.n	80057b0 <mpu_set_int_latched+0x5c>
 80057ca:	bf00      	nop
 80057cc:	20000028 	.word	0x20000028

080057d0 <mpu_lp_accel_mode>:
{
 80057d0:	b510      	push	{r4, lr}
 80057d2:	b082      	sub	sp, #8
    if (rate > 40)
 80057d4:	2828      	cmp	r0, #40	; 0x28
 80057d6:	d861      	bhi.n	800589c <mpu_lp_accel_mode+0xcc>
 80057d8:	4604      	mov	r4, r0
    if (!rate) {
 80057da:	b9d0      	cbnz	r0, 8005812 <mpu_lp_accel_mode+0x42>
        mpu_set_int_latched(0);
 80057dc:	2000      	movs	r0, #0
 80057de:	f7ff ffb9 	bl	8005754 <mpu_set_int_latched>
        tmp[0] = 0;
 80057e2:	2300      	movs	r3, #0
 80057e4:	f88d 3004 	strb.w	r3, [sp, #4]
        tmp[1] = BIT_STBY_XYZG;
 80057e8:	2307      	movs	r3, #7
 80057ea:	f88d 3005 	strb.w	r3, [sp, #5]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 80057ee:	4b31      	ldr	r3, [pc, #196]	; (80058b4 <mpu_lp_accel_mode+0xe4>)
 80057f0:	6858      	ldr	r0, [r3, #4]
 80057f2:	6819      	ldr	r1, [r3, #0]
 80057f4:	ab01      	add	r3, sp, #4
 80057f6:	2202      	movs	r2, #2
 80057f8:	7d49      	ldrb	r1, [r1, #21]
 80057fa:	7800      	ldrb	r0, [r0, #0]
 80057fc:	f7ff fa0e 	bl	8004c1c <arduino_i2c_write>
 8005800:	4604      	mov	r4, r0
 8005802:	2800      	cmp	r0, #0
 8005804:	d14d      	bne.n	80058a2 <mpu_lp_accel_mode+0xd2>
        st.chip_cfg.lp_accel_mode = 0;
 8005806:	4b2b      	ldr	r3, [pc, #172]	; (80058b4 <mpu_lp_accel_mode+0xe4>)
 8005808:	2200      	movs	r2, #0
 800580a:	751a      	strb	r2, [r3, #20]
}
 800580c:	4620      	mov	r0, r4
 800580e:	b002      	add	sp, #8
 8005810:	bd10      	pop	{r4, pc}
    mpu_set_int_latched(1);
 8005812:	2001      	movs	r0, #1
 8005814:	f7ff ff9e 	bl	8005754 <mpu_set_int_latched>
    if (rate == 1)
 8005818:	2c01      	cmp	r4, #1
 800581a:	d007      	beq.n	800582c <mpu_lp_accel_mode+0x5c>
    else if (rate == 2)
 800581c:	2c02      	cmp	r4, #2
 800581e:	d029      	beq.n	8005874 <mpu_lp_accel_mode+0xa4>
    else if (rate <= 5)
 8005820:	2c05      	cmp	r4, #5
 8005822:	d82b      	bhi.n	800587c <mpu_lp_accel_mode+0xac>
        tmp[0] = INV_LPA_5HZ;
 8005824:	2304      	movs	r3, #4
 8005826:	f88d 3004 	strb.w	r3, [sp, #4]
 800582a:	e002      	b.n	8005832 <mpu_lp_accel_mode+0x62>
        tmp[0] = INV_LPA_1_25HZ;
 800582c:	2302      	movs	r3, #2
 800582e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (i2c_write(st.hw->addr, st.reg->lp_accel_odr, 1, tmp))
 8005832:	4b20      	ldr	r3, [pc, #128]	; (80058b4 <mpu_lp_accel_mode+0xe4>)
 8005834:	6858      	ldr	r0, [r3, #4]
 8005836:	6819      	ldr	r1, [r3, #0]
 8005838:	ab01      	add	r3, sp, #4
 800583a:	2201      	movs	r2, #1
 800583c:	7a49      	ldrb	r1, [r1, #9]
 800583e:	7800      	ldrb	r0, [r0, #0]
 8005840:	f7ff f9ec 	bl	8004c1c <arduino_i2c_write>
 8005844:	bb80      	cbnz	r0, 80058a8 <mpu_lp_accel_mode+0xd8>
    tmp[0] = BIT_LPA_CYCLE;
 8005846:	ab02      	add	r3, sp, #8
 8005848:	2220      	movs	r2, #32
 800584a:	f803 2d04 	strb.w	r2, [r3, #-4]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
 800584e:	4a19      	ldr	r2, [pc, #100]	; (80058b4 <mpu_lp_accel_mode+0xe4>)
 8005850:	6850      	ldr	r0, [r2, #4]
 8005852:	6811      	ldr	r1, [r2, #0]
 8005854:	2201      	movs	r2, #1
 8005856:	7d49      	ldrb	r1, [r1, #21]
 8005858:	7800      	ldrb	r0, [r0, #0]
 800585a:	f7ff f9df 	bl	8004c1c <arduino_i2c_write>
 800585e:	4604      	mov	r4, r0
 8005860:	bb28      	cbnz	r0, 80058ae <mpu_lp_accel_mode+0xde>
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 8005862:	4b14      	ldr	r3, [pc, #80]	; (80058b4 <mpu_lp_accel_mode+0xe4>)
 8005864:	2208      	movs	r2, #8
 8005866:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 8005868:	7318      	strb	r0, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 800586a:	2201      	movs	r2, #1
 800586c:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 800586e:	f7ff fd05 	bl	800527c <mpu_configure_fifo>
    return 0;
 8005872:	e7cb      	b.n	800580c <mpu_lp_accel_mode+0x3c>
        tmp[0] = INV_LPA_2_5HZ;
 8005874:	2303      	movs	r3, #3
 8005876:	f88d 3004 	strb.w	r3, [sp, #4]
 800587a:	e7da      	b.n	8005832 <mpu_lp_accel_mode+0x62>
    else if (rate <= 10)
 800587c:	2c0a      	cmp	r4, #10
 800587e:	d803      	bhi.n	8005888 <mpu_lp_accel_mode+0xb8>
        tmp[0] = INV_LPA_10HZ;
 8005880:	2305      	movs	r3, #5
 8005882:	f88d 3004 	strb.w	r3, [sp, #4]
 8005886:	e7d4      	b.n	8005832 <mpu_lp_accel_mode+0x62>
    else if (rate <= 20)
 8005888:	2c14      	cmp	r4, #20
 800588a:	d803      	bhi.n	8005894 <mpu_lp_accel_mode+0xc4>
        tmp[0] = INV_LPA_20HZ;
 800588c:	2306      	movs	r3, #6
 800588e:	f88d 3004 	strb.w	r3, [sp, #4]
 8005892:	e7ce      	b.n	8005832 <mpu_lp_accel_mode+0x62>
        tmp[0] = INV_LPA_40HZ;
 8005894:	2307      	movs	r3, #7
 8005896:	f88d 3004 	strb.w	r3, [sp, #4]
 800589a:	e7ca      	b.n	8005832 <mpu_lp_accel_mode+0x62>
        return -1;
 800589c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80058a0:	e7b4      	b.n	800580c <mpu_lp_accel_mode+0x3c>
            return -1;
 80058a2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80058a6:	e7b1      	b.n	800580c <mpu_lp_accel_mode+0x3c>
        return -1;
 80058a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80058ac:	e7ae      	b.n	800580c <mpu_lp_accel_mode+0x3c>
        return -1;
 80058ae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80058b2:	e7ab      	b.n	800580c <mpu_lp_accel_mode+0x3c>
 80058b4:	20000028 	.word	0x20000028

080058b8 <mpu_set_sample_rate>:
{
 80058b8:	b530      	push	{r4, r5, lr}
 80058ba:	b083      	sub	sp, #12
    if (!(st.chip_cfg.sensors))
 80058bc:	4b28      	ldr	r3, [pc, #160]	; (8005960 <mpu_set_sample_rate+0xa8>)
 80058be:	7a9b      	ldrb	r3, [r3, #10]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d044      	beq.n	800594e <mpu_set_sample_rate+0x96>
 80058c4:	4604      	mov	r4, r0
    if (st.chip_cfg.dmp_on)
 80058c6:	4b26      	ldr	r3, [pc, #152]	; (8005960 <mpu_set_sample_rate+0xa8>)
 80058c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d141      	bne.n	8005954 <mpu_set_sample_rate+0x9c>
        if (st.chip_cfg.lp_accel_mode) {
 80058d0:	4b23      	ldr	r3, [pc, #140]	; (8005960 <mpu_set_sample_rate+0xa8>)
 80058d2:	7d1b      	ldrb	r3, [r3, #20]
 80058d4:	b133      	cbz	r3, 80058e4 <mpu_set_sample_rate+0x2c>
            if (rate && (rate <= 40)) {
 80058d6:	1e43      	subs	r3, r0, #1
 80058d8:	b29b      	uxth	r3, r3
 80058da:	2b27      	cmp	r3, #39	; 0x27
 80058dc:	d90a      	bls.n	80058f4 <mpu_set_sample_rate+0x3c>
            mpu_lp_accel_mode(0);
 80058de:	2000      	movs	r0, #0
 80058e0:	f7ff ff76 	bl	80057d0 <mpu_lp_accel_mode>
        if (rate < 4)
 80058e4:	2c03      	cmp	r4, #3
 80058e6:	d909      	bls.n	80058fc <mpu_set_sample_rate+0x44>
        else if (rate > 1000)
 80058e8:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80058ec:	d907      	bls.n	80058fe <mpu_set_sample_rate+0x46>
            rate = 1000;
 80058ee:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80058f2:	e004      	b.n	80058fe <mpu_set_sample_rate+0x46>
                mpu_lp_accel_mode(rate);
 80058f4:	f7ff ff6c 	bl	80057d0 <mpu_lp_accel_mode>
                return 0;
 80058f8:	2500      	movs	r5, #0
 80058fa:	e025      	b.n	8005948 <mpu_set_sample_rate+0x90>
            rate = 4;
 80058fc:	2404      	movs	r4, #4
        data = 1000 / rate - 1;
 80058fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005902:	fb90 f0f4 	sdiv	r0, r0, r4
 8005906:	3801      	subs	r0, #1
 8005908:	ab02      	add	r3, sp, #8
 800590a:	f803 0d01 	strb.w	r0, [r3, #-1]!
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 800590e:	4a14      	ldr	r2, [pc, #80]	; (8005960 <mpu_set_sample_rate+0xa8>)
 8005910:	6850      	ldr	r0, [r2, #4]
 8005912:	6811      	ldr	r1, [r2, #0]
 8005914:	2201      	movs	r2, #1
 8005916:	7849      	ldrb	r1, [r1, #1]
 8005918:	7800      	ldrb	r0, [r0, #0]
 800591a:	f7ff f97f 	bl	8004c1c <arduino_i2c_write>
 800591e:	4605      	mov	r5, r0
 8005920:	b9d8      	cbnz	r0, 800595a <mpu_set_sample_rate+0xa2>
        st.chip_cfg.sample_rate = 1000 / (1 + data);
 8005922:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800592c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005930:	4c0b      	ldr	r4, [pc, #44]	; (8005960 <mpu_set_sample_rate+0xa8>)
 8005932:	81e3      	strh	r3, [r4, #14]
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
 8005934:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8005936:	2864      	cmp	r0, #100	; 0x64
 8005938:	bf28      	it	cs
 800593a:	2064      	movcs	r0, #100	; 0x64
 800593c:	f7ff fc1e 	bl	800517c <mpu_set_compass_sample_rate>
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 8005940:	89e0      	ldrh	r0, [r4, #14]
 8005942:	0840      	lsrs	r0, r0, #1
 8005944:	f7ff fbce 	bl	80050e4 <mpu_set_lpf>
}
 8005948:	4628      	mov	r0, r5
 800594a:	b003      	add	sp, #12
 800594c:	bd30      	pop	{r4, r5, pc}
        return -1;
 800594e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005952:	e7f9      	b.n	8005948 <mpu_set_sample_rate+0x90>
        return -1;
 8005954:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005958:	e7f6      	b.n	8005948 <mpu_set_sample_rate+0x90>
            return -1;
 800595a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800595e:	e7f3      	b.n	8005948 <mpu_set_sample_rate+0x90>
 8005960:	20000028 	.word	0x20000028

08005964 <mpu_set_sensors>:
{
 8005964:	b530      	push	{r4, r5, lr}
 8005966:	b083      	sub	sp, #12
 8005968:	4604      	mov	r4, r0
    if (sensors & INV_XYZ_GYRO)
 800596a:	f010 0f70 	tst.w	r0, #112	; 0x70
 800596e:	f000 808f 	beq.w	8005a90 <mpu_set_sensors+0x12c>
        data = INV_CLK_PLL;
 8005972:	2301      	movs	r3, #1
 8005974:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data)) {
 8005978:	4b5f      	ldr	r3, [pc, #380]	; (8005af8 <mpu_set_sensors+0x194>)
 800597a:	6858      	ldr	r0, [r3, #4]
 800597c:	6819      	ldr	r1, [r3, #0]
 800597e:	f10d 0307 	add.w	r3, sp, #7
 8005982:	2201      	movs	r2, #1
 8005984:	7d49      	ldrb	r1, [r1, #21]
 8005986:	7800      	ldrb	r0, [r0, #0]
 8005988:	f7ff f948 	bl	8004c1c <arduino_i2c_write>
 800598c:	2800      	cmp	r0, #0
 800598e:	f040 8088 	bne.w	8005aa2 <mpu_set_sensors+0x13e>
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 8005992:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005996:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 800599a:	4a57      	ldr	r2, [pc, #348]	; (8005af8 <mpu_set_sensors+0x194>)
 800599c:	7313      	strb	r3, [r2, #12]
    data = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!(sensors & INV_X_GYRO))
 80059a4:	f014 0f40 	tst.w	r4, #64	; 0x40
 80059a8:	d102      	bne.n	80059b0 <mpu_set_sensors+0x4c>
        data |= BIT_STBY_XG;
 80059aa:	2304      	movs	r3, #4
 80059ac:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!(sensors & INV_Y_GYRO))
 80059b0:	f014 0f20 	tst.w	r4, #32
 80059b4:	d105      	bne.n	80059c2 <mpu_set_sensors+0x5e>
        data |= BIT_STBY_YG;
 80059b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80059ba:	f043 0302 	orr.w	r3, r3, #2
 80059be:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!(sensors & INV_Z_GYRO))
 80059c2:	f014 0f10 	tst.w	r4, #16
 80059c6:	d105      	bne.n	80059d4 <mpu_set_sensors+0x70>
        data |= BIT_STBY_ZG;
 80059c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80059cc:	f043 0301 	orr.w	r3, r3, #1
 80059d0:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!(sensors & INV_XYZ_ACCEL))
 80059d4:	f014 0f08 	tst.w	r4, #8
 80059d8:	d105      	bne.n	80059e6 <mpu_set_sensors+0x82>
        data |= BIT_STBY_XYZA;
 80059da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80059de:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80059e2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data)) {
 80059e6:	4b44      	ldr	r3, [pc, #272]	; (8005af8 <mpu_set_sensors+0x194>)
 80059e8:	6858      	ldr	r0, [r3, #4]
 80059ea:	6819      	ldr	r1, [r3, #0]
 80059ec:	f10d 0307 	add.w	r3, sp, #7
 80059f0:	2201      	movs	r2, #1
 80059f2:	7d89      	ldrb	r1, [r1, #22]
 80059f4:	7800      	ldrb	r0, [r0, #0]
 80059f6:	f7ff f911 	bl	8004c1c <arduino_i2c_write>
 80059fa:	2800      	cmp	r0, #0
 80059fc:	d157      	bne.n	8005aae <mpu_set_sensors+0x14a>
    if (sensors && (sensors != INV_XYZ_ACCEL))
 80059fe:	b10c      	cbz	r4, 8005a04 <mpu_set_sensors+0xa0>
 8005a00:	2c08      	cmp	r4, #8
 8005a02:	d15a      	bne.n	8005aba <mpu_set_sensors+0x156>
    if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8005a04:	4b3c      	ldr	r3, [pc, #240]	; (8005af8 <mpu_set_sensors+0x194>)
 8005a06:	6858      	ldr	r0, [r3, #4]
 8005a08:	6819      	ldr	r1, [r3, #0]
 8005a0a:	f10d 0306 	add.w	r3, sp, #6
 8005a0e:	2201      	movs	r2, #1
 8005a10:	7909      	ldrb	r1, [r1, #4]
 8005a12:	7800      	ldrb	r0, [r0, #0]
 8005a14:	f7ff f920 	bl	8004c58 <arduino_i2c_read>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	d163      	bne.n	8005ae4 <mpu_set_sensors+0x180>
    if (sensors & INV_XYZ_COMPASS) {
 8005a1c:	f014 0f01 	tst.w	r4, #1
 8005a20:	d04f      	beq.n	8005ac2 <mpu_set_sensors+0x15e>
        data = AKM_SINGLE_MEASUREMENT;
 8005a22:	2311      	movs	r3, #17
 8005a24:	f88d 3007 	strb.w	r3, [sp, #7]
        user_ctrl |= BIT_AUX_IF_EN;
 8005a28:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005a2c:	f043 0320 	orr.w	r3, r3, #32
 8005a30:	f88d 3006 	strb.w	r3, [sp, #6]
    if (st.chip_cfg.dmp_on)
 8005a34:	4b30      	ldr	r3, [pc, #192]	; (8005af8 <mpu_set_sensors+0x194>)
 8005a36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d04b      	beq.n	8005ad6 <mpu_set_sensors+0x172>
        user_ctrl |= BIT_DMP_EN;
 8005a3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005a42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a46:	f88d 3006 	strb.w	r3, [sp, #6]
    if (i2c_write(st.hw->addr, st.reg->s1_do, 1, &data))
 8005a4a:	4b2b      	ldr	r3, [pc, #172]	; (8005af8 <mpu_set_sensors+0x194>)
 8005a4c:	6858      	ldr	r0, [r3, #4]
 8005a4e:	6819      	ldr	r1, [r3, #0]
 8005a50:	f10d 0307 	add.w	r3, sp, #7
 8005a54:	2201      	movs	r2, #1
 8005a56:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
 8005a5a:	7800      	ldrb	r0, [r0, #0]
 8005a5c:	f7ff f8de 	bl	8004c1c <arduino_i2c_write>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d142      	bne.n	8005aea <mpu_set_sensors+0x186>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
 8005a64:	4b24      	ldr	r3, [pc, #144]	; (8005af8 <mpu_set_sensors+0x194>)
 8005a66:	6858      	ldr	r0, [r3, #4]
 8005a68:	6819      	ldr	r1, [r3, #0]
 8005a6a:	f10d 0306 	add.w	r3, sp, #6
 8005a6e:	2201      	movs	r2, #1
 8005a70:	7909      	ldrb	r1, [r1, #4]
 8005a72:	7800      	ldrb	r0, [r0, #0]
 8005a74:	f7ff f8d2 	bl	8004c1c <arduino_i2c_write>
 8005a78:	4605      	mov	r5, r0
 8005a7a:	bbc8      	cbnz	r0, 8005af0 <mpu_set_sensors+0x18c>
    st.chip_cfg.sensors = sensors;
 8005a7c:	4b1e      	ldr	r3, [pc, #120]	; (8005af8 <mpu_set_sensors+0x194>)
 8005a7e:	729c      	strb	r4, [r3, #10]
    st.chip_cfg.lp_accel_mode = 0;
 8005a80:	2200      	movs	r2, #0
 8005a82:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 8005a84:	2032      	movs	r0, #50	; 0x32
 8005a86:	f7ff f8c4 	bl	8004c12 <arduino_delay_ms>
}
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	b003      	add	sp, #12
 8005a8e:	bd30      	pop	{r4, r5, pc}
    else if (sensors)
 8005a90:	b118      	cbz	r0, 8005a9a <mpu_set_sensors+0x136>
        data = 0;
 8005a92:	2300      	movs	r3, #0
 8005a94:	f88d 3007 	strb.w	r3, [sp, #7]
 8005a98:	e76e      	b.n	8005978 <mpu_set_sensors+0x14>
        data = BIT_SLEEP;
 8005a9a:	2340      	movs	r3, #64	; 0x40
 8005a9c:	f88d 3007 	strb.w	r3, [sp, #7]
 8005aa0:	e76a      	b.n	8005978 <mpu_set_sensors+0x14>
        st.chip_cfg.sensors = 0;
 8005aa2:	4b15      	ldr	r3, [pc, #84]	; (8005af8 <mpu_set_sensors+0x194>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	729a      	strb	r2, [r3, #10]
        return -1;
 8005aa8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005aac:	e7ed      	b.n	8005a8a <mpu_set_sensors+0x126>
        st.chip_cfg.sensors = 0;
 8005aae:	4b12      	ldr	r3, [pc, #72]	; (8005af8 <mpu_set_sensors+0x194>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	729a      	strb	r2, [r3, #10]
        return -1;
 8005ab4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005ab8:	e7e7      	b.n	8005a8a <mpu_set_sensors+0x126>
        mpu_set_int_latched(0);
 8005aba:	2000      	movs	r0, #0
 8005abc:	f7ff fe4a 	bl	8005754 <mpu_set_int_latched>
 8005ac0:	e7a0      	b.n	8005a04 <mpu_set_sensors+0xa0>
        data = AKM_POWER_DOWN;
 8005ac2:	2310      	movs	r3, #16
 8005ac4:	f88d 3007 	strb.w	r3, [sp, #7]
        user_ctrl &= ~BIT_AUX_IF_EN;
 8005ac8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005acc:	f023 0320 	bic.w	r3, r3, #32
 8005ad0:	f88d 3006 	strb.w	r3, [sp, #6]
 8005ad4:	e7ae      	b.n	8005a34 <mpu_set_sensors+0xd0>
        user_ctrl &= ~BIT_DMP_EN;
 8005ad6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ade:	f88d 3006 	strb.w	r3, [sp, #6]
 8005ae2:	e7b2      	b.n	8005a4a <mpu_set_sensors+0xe6>
        return -1;
 8005ae4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005ae8:	e7cf      	b.n	8005a8a <mpu_set_sensors+0x126>
        return -1;
 8005aea:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005aee:	e7cc      	b.n	8005a8a <mpu_set_sensors+0x126>
        return -1;
 8005af0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005af4:	e7c9      	b.n	8005a8a <mpu_set_sensors+0x126>
 8005af6:	bf00      	nop
 8005af8:	20000028 	.word	0x20000028

08005afc <mpu_init>:
{
 8005afc:	b510      	push	{r4, lr}
 8005afe:	b082      	sub	sp, #8
    data[0] = BIT_RESET;
 8005b00:	ab02      	add	r3, sp, #8
 8005b02:	2280      	movs	r2, #128	; 0x80
 8005b04:	f803 2d08 	strb.w	r2, [r3, #-8]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8005b08:	4a42      	ldr	r2, [pc, #264]	; (8005c14 <mpu_init+0x118>)
 8005b0a:	6850      	ldr	r0, [r2, #4]
 8005b0c:	6811      	ldr	r1, [r2, #0]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	7d49      	ldrb	r1, [r1, #21]
 8005b12:	7800      	ldrb	r0, [r0, #0]
 8005b14:	f7ff f882 	bl	8004c1c <arduino_i2c_write>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d160      	bne.n	8005bde <mpu_init+0xe2>
    delay_ms(100);
 8005b1c:	2064      	movs	r0, #100	; 0x64
 8005b1e:	f7ff f878 	bl	8004c12 <arduino_delay_ms>
    data[0] = 0x00;
 8005b22:	ab02      	add	r3, sp, #8
 8005b24:	2200      	movs	r2, #0
 8005b26:	f803 2d08 	strb.w	r2, [r3, #-8]!
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 8005b2a:	4a3a      	ldr	r2, [pc, #232]	; (8005c14 <mpu_init+0x118>)
 8005b2c:	6850      	ldr	r0, [r2, #4]
 8005b2e:	6811      	ldr	r1, [r2, #0]
 8005b30:	2201      	movs	r2, #1
 8005b32:	7d49      	ldrb	r1, [r1, #21]
 8005b34:	7800      	ldrb	r0, [r0, #0]
 8005b36:	f7ff f871 	bl	8004c1c <arduino_i2c_write>
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	d152      	bne.n	8005be4 <mpu_init+0xe8>
   st.chip_cfg.accel_half = 0;
 8005b3e:	4a35      	ldr	r2, [pc, #212]	; (8005c14 <mpu_init+0x118>)
 8005b40:	2300      	movs	r3, #0
 8005b42:	74d3      	strb	r3, [r2, #19]
    data[0] = BIT_FIFO_SIZE_1024 | 0x8;
 8005b44:	ab02      	add	r3, sp, #8
 8005b46:	2148      	movs	r1, #72	; 0x48
 8005b48:	f803 1d08 	strb.w	r1, [r3, #-8]!
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
 8005b4c:	6850      	ldr	r0, [r2, #4]
 8005b4e:	6811      	ldr	r1, [r2, #0]
 8005b50:	2201      	movs	r2, #1
 8005b52:	7a09      	ldrb	r1, [r1, #8]
 8005b54:	7800      	ldrb	r0, [r0, #0]
 8005b56:	f7ff f861 	bl	8004c1c <arduino_i2c_write>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	d145      	bne.n	8005bea <mpu_init+0xee>
    st.chip_cfg.sensors = 0xFF;
 8005b5e:	4b2d      	ldr	r3, [pc, #180]	; (8005c14 <mpu_init+0x118>)
 8005b60:	22ff      	movs	r2, #255	; 0xff
 8005b62:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 8005b64:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 8005b66:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 8005b68:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 8005b6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005b6e:	81d9      	strh	r1, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 8005b70:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 8005b72:	749a      	strb	r2, [r3, #18]
    st.chip_cfg.compass_sample_rate = 0xFFFF;
 8005b74:	8519      	strh	r1, [r3, #40]	; 0x28
    st.chip_cfg.clk_src = INV_CLK_PLL;
 8005b76:	2201      	movs	r2, #1
 8005b78:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.active_low_int = 1;
 8005b7a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 8005b84:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 8005b86:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 8005b88:	f8c3 2016 	str.w	r2, [r3, #22]
 8005b8c:	f8c3 201a 	str.w	r2, [r3, #26]
 8005b90:	f8c3 201e 	str.w	r2, [r3, #30]
    st.chip_cfg.dmp_on = 0;
 8005b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 8005b98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 8005b9c:	84da      	strh	r2, [r3, #38]	; 0x26
    if (mpu_set_gyro_fsr(2000))
 8005b9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005ba2:	f7ff f9e5 	bl	8004f70 <mpu_set_gyro_fsr>
 8005ba6:	bb18      	cbnz	r0, 8005bf0 <mpu_init+0xf4>
    if (mpu_set_accel_fsr(2))
 8005ba8:	2002      	movs	r0, #2
 8005baa:	f7ff fa4f 	bl	800504c <mpu_set_accel_fsr>
 8005bae:	bb10      	cbnz	r0, 8005bf6 <mpu_init+0xfa>
    if (mpu_set_lpf(42))
 8005bb0:	202a      	movs	r0, #42	; 0x2a
 8005bb2:	f7ff fa97 	bl	80050e4 <mpu_set_lpf>
 8005bb6:	bb08      	cbnz	r0, 8005bfc <mpu_init+0x100>
    if (mpu_set_sample_rate(50))
 8005bb8:	2032      	movs	r0, #50	; 0x32
 8005bba:	f7ff fe7d 	bl	80058b8 <mpu_set_sample_rate>
 8005bbe:	bb00      	cbnz	r0, 8005c02 <mpu_init+0x106>
    if (mpu_configure_fifo(0))
 8005bc0:	f7ff fb5c 	bl	800527c <mpu_configure_fifo>
 8005bc4:	bb00      	cbnz	r0, 8005c08 <mpu_init+0x10c>
    setup_compass();
 8005bc6:	f7ff fc9f 	bl	8005508 <setup_compass>
    if (mpu_set_compass_sample_rate(10))
 8005bca:	200a      	movs	r0, #10
 8005bcc:	f7ff fad6 	bl	800517c <mpu_set_compass_sample_rate>
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	b9e0      	cbnz	r0, 8005c0e <mpu_init+0x112>
    mpu_set_sensors(0);
 8005bd4:	f7ff fec6 	bl	8005964 <mpu_set_sensors>
}
 8005bd8:	4620      	mov	r0, r4
 8005bda:	b002      	add	sp, #8
 8005bdc:	bd10      	pop	{r4, pc}
        return -1;
 8005bde:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005be2:	e7f9      	b.n	8005bd8 <mpu_init+0xdc>
        return -1;
 8005be4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005be8:	e7f6      	b.n	8005bd8 <mpu_init+0xdc>
        return -1;
 8005bea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005bee:	e7f3      	b.n	8005bd8 <mpu_init+0xdc>
        return -1;
 8005bf0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005bf4:	e7f0      	b.n	8005bd8 <mpu_init+0xdc>
        return -1;
 8005bf6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005bfa:	e7ed      	b.n	8005bd8 <mpu_init+0xdc>
        return -1;
 8005bfc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c00:	e7ea      	b.n	8005bd8 <mpu_init+0xdc>
        return -1;
 8005c02:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c06:	e7e7      	b.n	8005bd8 <mpu_init+0xdc>
        return -1;
 8005c08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c0c:	e7e4      	b.n	8005bd8 <mpu_init+0xdc>
        return -1;
 8005c0e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c12:	e7e1      	b.n	8005bd8 <mpu_init+0xdc>
 8005c14:	20000028 	.word	0x20000028

08005c18 <mpu_write_mem>:
    if (!data)
 8005c18:	b362      	cbz	r2, 8005c74 <mpu_write_mem+0x5c>
{
 8005c1a:	b570      	push	{r4, r5, r6, lr}
 8005c1c:	b082      	sub	sp, #8
 8005c1e:	4616      	mov	r6, r2
    if (!st.chip_cfg.sensors)
 8005c20:	4a1b      	ldr	r2, [pc, #108]	; (8005c90 <mpu_write_mem+0x78>)
 8005c22:	7a92      	ldrb	r2, [r2, #10]
 8005c24:	b352      	cbz	r2, 8005c7c <mpu_write_mem+0x64>
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8005c26:	0a02      	lsrs	r2, r0, #8
 8005c28:	f88d 2004 	strb.w	r2, [sp, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8005c2c:	b2c0      	uxtb	r0, r0
 8005c2e:	f88d 0005 	strb.w	r0, [sp, #5]
    if (tmp[1] + length > st.hw->bank_size)
 8005c32:	4408      	add	r0, r1
 8005c34:	4a16      	ldr	r2, [pc, #88]	; (8005c90 <mpu_write_mem+0x78>)
 8005c36:	6855      	ldr	r5, [r2, #4]
 8005c38:	896a      	ldrh	r2, [r5, #10]
 8005c3a:	4290      	cmp	r0, r2
 8005c3c:	dc21      	bgt.n	8005c82 <mpu_write_mem+0x6a>
 8005c3e:	460c      	mov	r4, r1
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8005c40:	4b13      	ldr	r3, [pc, #76]	; (8005c90 <mpu_write_mem+0x78>)
 8005c42:	6819      	ldr	r1, [r3, #0]
 8005c44:	ab01      	add	r3, sp, #4
 8005c46:	2202      	movs	r2, #2
 8005c48:	7ec9      	ldrb	r1, [r1, #27]
 8005c4a:	7828      	ldrb	r0, [r5, #0]
 8005c4c:	f7fe ffe6 	bl	8004c1c <arduino_i2c_write>
 8005c50:	b9d0      	cbnz	r0, 8005c88 <mpu_write_mem+0x70>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 8005c52:	4b0f      	ldr	r3, [pc, #60]	; (8005c90 <mpu_write_mem+0x78>)
 8005c54:	6858      	ldr	r0, [r3, #4]
 8005c56:	6819      	ldr	r1, [r3, #0]
 8005c58:	4633      	mov	r3, r6
 8005c5a:	b2e2      	uxtb	r2, r4
 8005c5c:	7e09      	ldrb	r1, [r1, #24]
 8005c5e:	7800      	ldrb	r0, [r0, #0]
 8005c60:	f7fe ffdc 	bl	8004c1c <arduino_i2c_write>
 8005c64:	4603      	mov	r3, r0
 8005c66:	b910      	cbnz	r0, 8005c6e <mpu_write_mem+0x56>
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	b002      	add	sp, #8
 8005c6c:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 8005c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c72:	e7f9      	b.n	8005c68 <mpu_write_mem+0x50>
        return -1;
 8005c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	4770      	bx	lr
        return -1;
 8005c7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c80:	e7f2      	b.n	8005c68 <mpu_write_mem+0x50>
        return -1;
 8005c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c86:	e7ef      	b.n	8005c68 <mpu_write_mem+0x50>
        return -1;
 8005c88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c8c:	e7ec      	b.n	8005c68 <mpu_write_mem+0x50>
 8005c8e:	bf00      	nop
 8005c90:	20000028 	.word	0x20000028

08005c94 <mpu_read_mem>:
    if (!data)
 8005c94:	b362      	cbz	r2, 8005cf0 <mpu_read_mem+0x5c>
{
 8005c96:	b570      	push	{r4, r5, r6, lr}
 8005c98:	b082      	sub	sp, #8
 8005c9a:	4616      	mov	r6, r2
    if (!st.chip_cfg.sensors)
 8005c9c:	4a1b      	ldr	r2, [pc, #108]	; (8005d0c <mpu_read_mem+0x78>)
 8005c9e:	7a92      	ldrb	r2, [r2, #10]
 8005ca0:	b352      	cbz	r2, 8005cf8 <mpu_read_mem+0x64>
    tmp[0] = (unsigned char)(mem_addr >> 8);
 8005ca2:	0a02      	lsrs	r2, r0, #8
 8005ca4:	f88d 2004 	strb.w	r2, [sp, #4]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 8005ca8:	b2c0      	uxtb	r0, r0
 8005caa:	f88d 0005 	strb.w	r0, [sp, #5]
    if (tmp[1] + length > st.hw->bank_size)
 8005cae:	4408      	add	r0, r1
 8005cb0:	4a16      	ldr	r2, [pc, #88]	; (8005d0c <mpu_read_mem+0x78>)
 8005cb2:	6855      	ldr	r5, [r2, #4]
 8005cb4:	896a      	ldrh	r2, [r5, #10]
 8005cb6:	4290      	cmp	r0, r2
 8005cb8:	dc21      	bgt.n	8005cfe <mpu_read_mem+0x6a>
 8005cba:	460c      	mov	r4, r1
    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 8005cbc:	4b13      	ldr	r3, [pc, #76]	; (8005d0c <mpu_read_mem+0x78>)
 8005cbe:	6819      	ldr	r1, [r3, #0]
 8005cc0:	ab01      	add	r3, sp, #4
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	7ec9      	ldrb	r1, [r1, #27]
 8005cc6:	7828      	ldrb	r0, [r5, #0]
 8005cc8:	f7fe ffa8 	bl	8004c1c <arduino_i2c_write>
 8005ccc:	b9d0      	cbnz	r0, 8005d04 <mpu_read_mem+0x70>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 8005cce:	4b0f      	ldr	r3, [pc, #60]	; (8005d0c <mpu_read_mem+0x78>)
 8005cd0:	6858      	ldr	r0, [r3, #4]
 8005cd2:	6819      	ldr	r1, [r3, #0]
 8005cd4:	4633      	mov	r3, r6
 8005cd6:	b2e2      	uxtb	r2, r4
 8005cd8:	7e09      	ldrb	r1, [r1, #24]
 8005cda:	7800      	ldrb	r0, [r0, #0]
 8005cdc:	f7fe ffbc 	bl	8004c58 <arduino_i2c_read>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	b910      	cbnz	r0, 8005cea <mpu_read_mem+0x56>
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	b002      	add	sp, #8
 8005ce8:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
 8005cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cee:	e7f9      	b.n	8005ce4 <mpu_read_mem+0x50>
        return -1;
 8005cf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	4770      	bx	lr
        return -1;
 8005cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cfc:	e7f2      	b.n	8005ce4 <mpu_read_mem+0x50>
        return -1;
 8005cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d02:	e7ef      	b.n	8005ce4 <mpu_read_mem+0x50>
        return -1;
 8005d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d08:	e7ec      	b.n	8005ce4 <mpu_read_mem+0x50>
 8005d0a:	bf00      	nop
 8005d0c:	20000028 	.word	0x20000028

08005d10 <mpu_load_firmware>:
{
 8005d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d14:	b087      	sub	sp, #28
    if (st.chip_cfg.dmp_loaded)
 8005d16:	4c2b      	ldr	r4, [pc, #172]	; (8005dc4 <mpu_load_firmware+0xb4>)
 8005d18:	f894 4025 	ldrb.w	r4, [r4, #37]	; 0x25
 8005d1c:	2c00      	cmp	r4, #0
 8005d1e:	d13e      	bne.n	8005d9e <mpu_load_firmware+0x8e>
    if (!firmware)
 8005d20:	2900      	cmp	r1, #0
 8005d22:	d03f      	beq.n	8005da4 <mpu_load_firmware+0x94>
 8005d24:	469a      	mov	sl, r3
 8005d26:	4691      	mov	r9, r2
 8005d28:	4688      	mov	r8, r1
 8005d2a:	4607      	mov	r7, r0
    for (ii = 0; ii < length; ii += this_write) {
 8005d2c:	42bc      	cmp	r4, r7
 8005d2e:	d21b      	bcs.n	8005d68 <mpu_load_firmware+0x58>
        this_write = min(LOAD_CHUNK, length - ii);
 8005d30:	1b3e      	subs	r6, r7, r4
 8005d32:	2e10      	cmp	r6, #16
 8005d34:	bfa8      	it	ge
 8005d36:	2610      	movge	r6, #16
 8005d38:	b2b5      	uxth	r5, r6
        if (mpu_write_mem(ii, this_write, (unsigned char*)&firmware[ii]))
 8005d3a:	eb08 0b04 	add.w	fp, r8, r4
 8005d3e:	465a      	mov	r2, fp
 8005d40:	4629      	mov	r1, r5
 8005d42:	4620      	mov	r0, r4
 8005d44:	f7ff ff68 	bl	8005c18 <mpu_write_mem>
 8005d48:	bb78      	cbnz	r0, 8005daa <mpu_load_firmware+0x9a>
        if (mpu_read_mem(ii, this_write, cur))
 8005d4a:	aa02      	add	r2, sp, #8
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f7ff ffa0 	bl	8005c94 <mpu_read_mem>
 8005d54:	bb60      	cbnz	r0, 8005db0 <mpu_load_firmware+0xa0>
        if (memcmp(firmware+ii, cur, this_write))
 8005d56:	462a      	mov	r2, r5
 8005d58:	a902      	add	r1, sp, #8
 8005d5a:	4658      	mov	r0, fp
 8005d5c:	f001 fc02 	bl	8007564 <memcmp>
 8005d60:	bb48      	cbnz	r0, 8005db6 <mpu_load_firmware+0xa6>
    for (ii = 0; ii < length; ii += this_write) {
 8005d62:	442c      	add	r4, r5
 8005d64:	b2a4      	uxth	r4, r4
 8005d66:	e7e1      	b.n	8005d2c <mpu_load_firmware+0x1c>
    tmp[0] = start_addr >> 8;
 8005d68:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8005d6c:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = start_addr & 0xFF;
 8005d70:	f88d 9005 	strb.w	r9, [sp, #5]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 8005d74:	4b13      	ldr	r3, [pc, #76]	; (8005dc4 <mpu_load_firmware+0xb4>)
 8005d76:	6858      	ldr	r0, [r3, #4]
 8005d78:	6819      	ldr	r1, [r3, #0]
 8005d7a:	ab01      	add	r3, sp, #4
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	7f49      	ldrb	r1, [r1, #29]
 8005d80:	7800      	ldrb	r0, [r0, #0]
 8005d82:	f7fe ff4b 	bl	8004c1c <arduino_i2c_write>
 8005d86:	4603      	mov	r3, r0
 8005d88:	b9c0      	cbnz	r0, 8005dbc <mpu_load_firmware+0xac>
    st.chip_cfg.dmp_loaded = 1;
 8005d8a:	4a0e      	ldr	r2, [pc, #56]	; (8005dc4 <mpu_load_firmware+0xb4>)
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 8005d92:	f8a2 a026 	strh.w	sl, [r2, #38]	; 0x26
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	b007      	add	sp, #28
 8005d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return -1;
 8005d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005da2:	e7f8      	b.n	8005d96 <mpu_load_firmware+0x86>
        return -1;
 8005da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005da8:	e7f5      	b.n	8005d96 <mpu_load_firmware+0x86>
            return -1;
 8005daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dae:	e7f2      	b.n	8005d96 <mpu_load_firmware+0x86>
            return -1;
 8005db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005db4:	e7ef      	b.n	8005d96 <mpu_load_firmware+0x86>
            return -2;
 8005db6:	f06f 0301 	mvn.w	r3, #1
 8005dba:	e7ec      	b.n	8005d96 <mpu_load_firmware+0x86>
        return -1;
 8005dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dc0:	e7e9      	b.n	8005d96 <mpu_load_firmware+0x86>
 8005dc2:	bf00      	nop
 8005dc4:	20000028 	.word	0x20000028

08005dc8 <mpu_set_dmp_state>:
    if (st.chip_cfg.dmp_on == enable)
 8005dc8:	4b22      	ldr	r3, [pc, #136]	; (8005e54 <mpu_set_dmp_state+0x8c>)
 8005dca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005dce:	4283      	cmp	r3, r0
 8005dd0:	d03a      	beq.n	8005e48 <mpu_set_dmp_state+0x80>
{
 8005dd2:	b530      	push	{r4, r5, lr}
 8005dd4:	b083      	sub	sp, #12
    if (enable) {
 8005dd6:	b310      	cbz	r0, 8005e1e <mpu_set_dmp_state+0x56>
        if (!st.chip_cfg.dmp_loaded)
 8005dd8:	4b1e      	ldr	r3, [pc, #120]	; (8005e54 <mpu_set_dmp_state+0x8c>)
 8005dda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d034      	beq.n	8005e4c <mpu_set_dmp_state+0x84>
        set_int_enable(0);
 8005de2:	2000      	movs	r0, #0
 8005de4:	f7fe ff58 	bl	8004c98 <set_int_enable>
        mpu_set_bypass(0);
 8005de8:	2000      	movs	r0, #0
 8005dea:	f7ff fad9 	bl	80053a0 <mpu_set_bypass>
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 8005dee:	4d19      	ldr	r5, [pc, #100]	; (8005e54 <mpu_set_dmp_state+0x8c>)
 8005df0:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
 8005df2:	f7ff fd61 	bl	80058b8 <mpu_set_sample_rate>
        tmp = 0;
 8005df6:	2400      	movs	r4, #0
 8005df8:	ab02      	add	r3, sp, #8
 8005dfa:	f803 4d01 	strb.w	r4, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8005dfe:	6868      	ldr	r0, [r5, #4]
 8005e00:	2201      	movs	r2, #1
 8005e02:	2123      	movs	r1, #35	; 0x23
 8005e04:	7800      	ldrb	r0, [r0, #0]
 8005e06:	f7fe ff09 	bl	8004c1c <arduino_i2c_write>
        st.chip_cfg.dmp_on = 1;
 8005e0a:	2001      	movs	r0, #1
 8005e0c:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
        set_int_enable(1);
 8005e10:	f7fe ff42 	bl	8004c98 <set_int_enable>
        mpu_reset_fifo();
 8005e14:	f7fe ffb0 	bl	8004d78 <mpu_reset_fifo>
    return 0;
 8005e18:	4620      	mov	r0, r4
}
 8005e1a:	b003      	add	sp, #12
 8005e1c:	bd30      	pop	{r4, r5, pc}
        set_int_enable(0);
 8005e1e:	2000      	movs	r0, #0
 8005e20:	f7fe ff3a 	bl	8004c98 <set_int_enable>
        tmp = st.chip_cfg.fifo_enable;
 8005e24:	4d0b      	ldr	r5, [pc, #44]	; (8005e54 <mpu_set_dmp_state+0x8c>)
 8005e26:	7c2a      	ldrb	r2, [r5, #16]
 8005e28:	ab02      	add	r3, sp, #8
 8005e2a:	f803 2d01 	strb.w	r2, [r3, #-1]!
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 8005e2e:	6868      	ldr	r0, [r5, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	2123      	movs	r1, #35	; 0x23
 8005e34:	7800      	ldrb	r0, [r0, #0]
 8005e36:	f7fe fef1 	bl	8004c1c <arduino_i2c_write>
        st.chip_cfg.dmp_on = 0;
 8005e3a:	2400      	movs	r4, #0
 8005e3c:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
        mpu_reset_fifo();
 8005e40:	f7fe ff9a 	bl	8004d78 <mpu_reset_fifo>
    return 0;
 8005e44:	4620      	mov	r0, r4
 8005e46:	e7e8      	b.n	8005e1a <mpu_set_dmp_state+0x52>
        return 0;
 8005e48:	2000      	movs	r0, #0
}
 8005e4a:	4770      	bx	lr
            return -1;
 8005e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e50:	e7e3      	b.n	8005e1a <mpu_set_dmp_state+0x52>
 8005e52:	bf00      	nop
 8005e54:	20000028 	.word	0x20000028

08005e58 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 8005e58:	b538      	push	{r3, r4, r5, lr}
 8005e5a:	4604      	mov	r4, r0
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 8005e5c:	78c5      	ldrb	r5, [r0, #3]
    tap = 0x3F & gesture[3];

    if (gesture[1] & INT_SRC_TAP) {
 8005e5e:	7843      	ldrb	r3, [r0, #1]
 8005e60:	f013 0f01 	tst.w	r3, #1
 8005e64:	d009      	beq.n	8005e7a <decode_gesture+0x22>
 8005e66:	f005 003f 	and.w	r0, r5, #63	; 0x3f
        unsigned char direction, count;
        direction = tap >> 3;
 8005e6a:	08c0      	lsrs	r0, r0, #3
        count = (tap % 8) + 1;
 8005e6c:	f005 0107 	and.w	r1, r5, #7
 8005e70:	3101      	adds	r1, #1
        if (dmp.tap_cb)
 8005e72:	4b07      	ldr	r3, [pc, #28]	; (8005e90 <decode_gesture+0x38>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	b103      	cbz	r3, 8005e7a <decode_gesture+0x22>
            dmp.tap_cb(direction, count);
 8005e78:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT) {
 8005e7a:	7863      	ldrb	r3, [r4, #1]
 8005e7c:	f013 0f08 	tst.w	r3, #8
 8005e80:	d004      	beq.n	8005e8c <decode_gesture+0x34>
        if (dmp.android_orient_cb)
 8005e82:	4b03      	ldr	r3, [pc, #12]	; (8005e90 <decode_gesture+0x38>)
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	b10b      	cbz	r3, 8005e8c <decode_gesture+0x34>
            dmp.android_orient_cb(android_orient >> 6);
 8005e88:	09a8      	lsrs	r0, r5, #6
 8005e8a:	4798      	blx	r3
    }

    return 0;
}
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	bd38      	pop	{r3, r4, r5, pc}
 8005e90:	2000034c 	.word	0x2000034c

08005e94 <dmp_load_motion_driver_firmware>:
{
 8005e94:	b508      	push	{r3, lr}
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress,
 8005e96:	23c8      	movs	r3, #200	; 0xc8
 8005e98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e9c:	4902      	ldr	r1, [pc, #8]	; (8005ea8 <dmp_load_motion_driver_firmware+0x14>)
 8005e9e:	f640 30f6 	movw	r0, #3062	; 0xbf6
 8005ea2:	f7ff ff35 	bl	8005d10 <mpu_load_firmware>
}
 8005ea6:	bd08      	pop	{r3, pc}
 8005ea8:	0800a73c 	.word	0x0800a73c

08005eac <dmp_set_fifo_rate>:
{
 8005eac:	b510      	push	{r4, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	4604      	mov	r4, r0
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB,
 8005eb2:	4a17      	ldr	r2, [pc, #92]	; (8005f10 <dmp_set_fifo_rate+0x64>)
 8005eb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8005eb6:	ab06      	add	r3, sp, #24
 8005eb8:	e903 0007 	stmdb	r3, {r0, r1, r2}
    if (rate > DMP_SAMPLE_RATE)
 8005ebc:	2cc8      	cmp	r4, #200	; 0xc8
 8005ebe:	d81d      	bhi.n	8005efc <dmp_set_fifo_rate+0x50>
    div = DMP_SAMPLE_RATE / rate - 1;
 8005ec0:	23c8      	movs	r3, #200	; 0xc8
 8005ec2:	fb93 f3f4 	sdiv	r3, r3, r4
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29b      	uxth	r3, r3
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 8005eca:	0a1a      	lsrs	r2, r3, #8
 8005ecc:	f88d 2004 	strb.w	r2, [sp, #4]
    tmp[1] = (unsigned char)(div & 0xFF);
 8005ed0:	f88d 3005 	strb.w	r3, [sp, #5]
    if (mpu_write_mem(D_0_22, 2, tmp))
 8005ed4:	aa01      	add	r2, sp, #4
 8005ed6:	2102      	movs	r1, #2
 8005ed8:	f240 2016 	movw	r0, #534	; 0x216
 8005edc:	f7ff fe9c 	bl	8005c18 <mpu_write_mem>
 8005ee0:	b978      	cbnz	r0, 8005f02 <dmp_set_fifo_rate+0x56>
    if (mpu_write_mem(CFG_6, 12, (unsigned char*)regs_end))
 8005ee2:	aa03      	add	r2, sp, #12
 8005ee4:	210c      	movs	r1, #12
 8005ee6:	f640 20c1 	movw	r0, #2753	; 0xac1
 8005eea:	f7ff fe95 	bl	8005c18 <mpu_write_mem>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	b950      	cbnz	r0, 8005f08 <dmp_set_fifo_rate+0x5c>
    dmp.fifo_rate = rate;
 8005ef2:	4a08      	ldr	r2, [pc, #32]	; (8005f14 <dmp_set_fifo_rate+0x68>)
 8005ef4:	8194      	strh	r4, [r2, #12]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	b006      	add	sp, #24
 8005efa:	bd10      	pop	{r4, pc}
        return -1;
 8005efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f00:	e7f9      	b.n	8005ef6 <dmp_set_fifo_rate+0x4a>
        return -1;
 8005f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f06:	e7f6      	b.n	8005ef6 <dmp_set_fifo_rate+0x4a>
        return -1;
 8005f08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f0c:	e7f3      	b.n	8005ef6 <dmp_set_fifo_rate+0x4a>
 8005f0e:	bf00      	nop
 8005f10:	0800a228 	.word	0x0800a228
 8005f14:	2000034c 	.word	0x2000034c

08005f18 <dmp_set_tap_thresh>:
    if (!(axis & TAP_XYZ) || thresh > 1600)
 8005f18:	f010 0f07 	tst.w	r0, #7
 8005f1c:	f000 80c4 	beq.w	80060a8 <dmp_set_tap_thresh+0x190>
 8005f20:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
 8005f24:	f200 80c3 	bhi.w	80060ae <dmp_set_tap_thresh+0x196>
{
 8005f28:	b510      	push	{r4, lr}
 8005f2a:	ed2d 8b02 	vpush	{d8}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	ee07 1a90 	vmov	s15, r1
 8005f34:	4604      	mov	r4, r0
    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 8005f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80060d0 <dmp_set_tap_thresh+0x1b8>
 8005f3e:	ee87 8a87 	vdiv.f32	s16, s15, s14
    mpu_get_accel_fsr(&accel_fsr);
 8005f42:	f10d 0003 	add.w	r0, sp, #3
 8005f46:	f7ff f85f 	bl	8005008 <mpu_get_accel_fsr>
    switch (accel_fsr) {
 8005f4a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005f4e:	3b02      	subs	r3, #2
 8005f50:	2b0e      	cmp	r3, #14
 8005f52:	f200 80b0 	bhi.w	80060b6 <dmp_set_tap_thresh+0x19e>
 8005f56:	e8df f003 	tbb	[pc, r3]
 8005f5a:	ae08      	.short	0xae08
 8005f5c:	aeaeae33 	.word	0xaeaeae33
 8005f60:	aeaeae46 	.word	0xaeaeae46
 8005f64:	aeaeaeae 	.word	0xaeaeaeae
 8005f68:	59          	.byte	0x59
 8005f69:	00          	.byte	0x00
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 8005f6a:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80060d4 <dmp_set_tap_thresh+0x1bc>
 8005f6e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f76:	ee17 3a90 	vmov	r3, s15
 8005f7a:	b29b      	uxth	r3, r3
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 8005f7c:	eddf 7a56 	vldr	s15, [pc, #344]	; 80060d8 <dmp_set_tap_thresh+0x1c0>
 8005f80:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005f84:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8005f88:	ee18 2a10 	vmov	r2, s16
 8005f8c:	b292      	uxth	r2, r2
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 8005f8e:	0a19      	lsrs	r1, r3, #8
 8005f90:	f88d 1004 	strb.w	r1, [sp, #4]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 8005f94:	f88d 3005 	strb.w	r3, [sp, #5]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 8005f98:	0a13      	lsrs	r3, r2, #8
 8005f9a:	f88d 3006 	strb.w	r3, [sp, #6]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 8005f9e:	f88d 2007 	strb.w	r2, [sp, #7]
    if (axis & TAP_X) {
 8005fa2:	f014 0f01 	tst.w	r4, #1
 8005fa6:	d144      	bne.n	8006032 <dmp_set_tap_thresh+0x11a>
    if (axis & TAP_Y) {
 8005fa8:	f014 0f02 	tst.w	r4, #2
 8005fac:	d155      	bne.n	800605a <dmp_set_tap_thresh+0x142>
    if (axis & TAP_Z) {
 8005fae:	f014 0f04 	tst.w	r4, #4
 8005fb2:	d165      	bne.n	8006080 <dmp_set_tap_thresh+0x168>
    return 0;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	b002      	add	sp, #8
 8005fba:	ecbd 8b02 	vpop	{d8}
 8005fbe:	bd10      	pop	{r4, pc}
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 8005fc0:	eddf 7a46 	vldr	s15, [pc, #280]	; 80060dc <dmp_set_tap_thresh+0x1c4>
 8005fc4:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fcc:	ee17 3a90 	vmov	r3, s15
 8005fd0:	b29b      	uxth	r3, r3
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 8005fd2:	eddf 7a43 	vldr	s15, [pc, #268]	; 80060e0 <dmp_set_tap_thresh+0x1c8>
 8005fd6:	ee28 8a27 	vmul.f32	s16, s16, s15
 8005fda:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8005fde:	ee18 2a10 	vmov	r2, s16
 8005fe2:	b292      	uxth	r2, r2
        break;
 8005fe4:	e7d3      	b.n	8005f8e <dmp_set_tap_thresh+0x76>
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 8005fe6:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80060e4 <dmp_set_tap_thresh+0x1cc>
 8005fea:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ff2:	ee17 3a90 	vmov	r3, s15
 8005ff6:	b29b      	uxth	r3, r3
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 8005ff8:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80060e8 <dmp_set_tap_thresh+0x1d0>
 8005ffc:	ee28 8a27 	vmul.f32	s16, s16, s15
 8006000:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8006004:	ee18 2a10 	vmov	r2, s16
 8006008:	b292      	uxth	r2, r2
        break;
 800600a:	e7c0      	b.n	8005f8e <dmp_set_tap_thresh+0x76>
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 800600c:	eddf 7a37 	vldr	s15, [pc, #220]	; 80060ec <dmp_set_tap_thresh+0x1d4>
 8006010:	ee68 7a27 	vmul.f32	s15, s16, s15
 8006014:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006018:	ee17 3a90 	vmov	r3, s15
 800601c:	b29b      	uxth	r3, r3
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 800601e:	eddf 7a34 	vldr	s15, [pc, #208]	; 80060f0 <dmp_set_tap_thresh+0x1d8>
 8006022:	ee28 8a27 	vmul.f32	s16, s16, s15
 8006026:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 800602a:	ee18 2a10 	vmov	r2, s16
 800602e:	b292      	uxth	r2, r2
        break;
 8006030:	e7ad      	b.n	8005f8e <dmp_set_tap_thresh+0x76>
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 8006032:	aa01      	add	r2, sp, #4
 8006034:	2102      	movs	r1, #2
 8006036:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 800603a:	f7ff fded 	bl	8005c18 <mpu_write_mem>
 800603e:	2800      	cmp	r0, #0
 8006040:	d13c      	bne.n	80060bc <dmp_set_tap_thresh+0x1a4>
        if (mpu_write_mem(D_1_36, 2, tmp+2))
 8006042:	f10d 0206 	add.w	r2, sp, #6
 8006046:	2102      	movs	r1, #2
 8006048:	f44f 7092 	mov.w	r0, #292	; 0x124
 800604c:	f7ff fde4 	bl	8005c18 <mpu_write_mem>
 8006050:	2800      	cmp	r0, #0
 8006052:	d0a9      	beq.n	8005fa8 <dmp_set_tap_thresh+0x90>
            return -1;
 8006054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006058:	e7ad      	b.n	8005fb6 <dmp_set_tap_thresh+0x9e>
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 800605a:	aa01      	add	r2, sp, #4
 800605c:	2102      	movs	r1, #2
 800605e:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 8006062:	f7ff fdd9 	bl	8005c18 <mpu_write_mem>
 8006066:	bb60      	cbnz	r0, 80060c2 <dmp_set_tap_thresh+0x1aa>
        if (mpu_write_mem(D_1_40, 2, tmp+2))
 8006068:	f10d 0206 	add.w	r2, sp, #6
 800606c:	2102      	movs	r1, #2
 800606e:	f44f 7094 	mov.w	r0, #296	; 0x128
 8006072:	f7ff fdd1 	bl	8005c18 <mpu_write_mem>
 8006076:	2800      	cmp	r0, #0
 8006078:	d099      	beq.n	8005fae <dmp_set_tap_thresh+0x96>
            return -1;
 800607a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800607e:	e79a      	b.n	8005fb6 <dmp_set_tap_thresh+0x9e>
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 8006080:	aa01      	add	r2, sp, #4
 8006082:	2102      	movs	r1, #2
 8006084:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8006088:	f7ff fdc6 	bl	8005c18 <mpu_write_mem>
 800608c:	b9e0      	cbnz	r0, 80060c8 <dmp_set_tap_thresh+0x1b0>
        if (mpu_write_mem(D_1_44, 2, tmp+2))
 800608e:	f10d 0206 	add.w	r2, sp, #6
 8006092:	2102      	movs	r1, #2
 8006094:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006098:	f7ff fdbe 	bl	8005c18 <mpu_write_mem>
 800609c:	4603      	mov	r3, r0
 800609e:	2800      	cmp	r0, #0
 80060a0:	d089      	beq.n	8005fb6 <dmp_set_tap_thresh+0x9e>
            return -1;
 80060a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060a6:	e786      	b.n	8005fb6 <dmp_set_tap_thresh+0x9e>
        return -1;
 80060a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060ac:	e001      	b.n	80060b2 <dmp_set_tap_thresh+0x19a>
 80060ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	4770      	bx	lr
        return -1;
 80060b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060ba:	e77c      	b.n	8005fb6 <dmp_set_tap_thresh+0x9e>
            return -1;
 80060bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060c0:	e779      	b.n	8005fb6 <dmp_set_tap_thresh+0x9e>
            return -1;
 80060c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060c6:	e776      	b.n	8005fb6 <dmp_set_tap_thresh+0x9e>
            return -1;
 80060c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060cc:	e773      	b.n	8005fb6 <dmp_set_tap_thresh+0x9e>
 80060ce:	bf00      	nop
 80060d0:	43480000 	.word	0x43480000
 80060d4:	46800000 	.word	0x46800000
 80060d8:	46400000 	.word	0x46400000
 80060dc:	46000000 	.word	0x46000000
 80060e0:	45c00000 	.word	0x45c00000
 80060e4:	45800000 	.word	0x45800000
 80060e8:	45400000 	.word	0x45400000
 80060ec:	45000000 	.word	0x45000000
 80060f0:	44c00000 	.word	0x44c00000

080060f4 <dmp_set_tap_axes>:
{
 80060f4:	b500      	push	{lr}
 80060f6:	b083      	sub	sp, #12
    unsigned char tmp = 0;
 80060f8:	2300      	movs	r3, #0
 80060fa:	f88d 3007 	strb.w	r3, [sp, #7]
    if (axis & TAP_X)
 80060fe:	f010 0f01 	tst.w	r0, #1
 8006102:	d002      	beq.n	800610a <dmp_set_tap_axes+0x16>
        tmp |= 0x30;
 8006104:	2330      	movs	r3, #48	; 0x30
 8006106:	f88d 3007 	strb.w	r3, [sp, #7]
    if (axis & TAP_Y)
 800610a:	f010 0f02 	tst.w	r0, #2
 800610e:	d005      	beq.n	800611c <dmp_set_tap_axes+0x28>
        tmp |= 0x0C;
 8006110:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006114:	f043 030c 	orr.w	r3, r3, #12
 8006118:	f88d 3007 	strb.w	r3, [sp, #7]
    if (axis & TAP_Z)
 800611c:	f010 0f04 	tst.w	r0, #4
 8006120:	d005      	beq.n	800612e <dmp_set_tap_axes+0x3a>
        tmp |= 0x03;
 8006122:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006126:	f043 0303 	orr.w	r3, r3, #3
 800612a:	f88d 3007 	strb.w	r3, [sp, #7]
    return mpu_write_mem(D_1_72, 1, &tmp);
 800612e:	f10d 0207 	add.w	r2, sp, #7
 8006132:	2101      	movs	r1, #1
 8006134:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8006138:	f7ff fd6e 	bl	8005c18 <mpu_write_mem>
}
 800613c:	b003      	add	sp, #12
 800613e:	f85d fb04 	ldr.w	pc, [sp], #4

08006142 <dmp_set_tap_count>:
{
 8006142:	b500      	push	{lr}
 8006144:	b083      	sub	sp, #12
    if (min_taps < 1)
 8006146:	b120      	cbz	r0, 8006152 <dmp_set_tap_count+0x10>
 8006148:	4603      	mov	r3, r0
    else if (min_taps > 4)
 800614a:	2804      	cmp	r0, #4
 800614c:	d902      	bls.n	8006154 <dmp_set_tap_count+0x12>
        min_taps = 4;
 800614e:	2304      	movs	r3, #4
 8006150:	e000      	b.n	8006154 <dmp_set_tap_count+0x12>
        min_taps = 1;
 8006152:	2301      	movs	r3, #1
    tmp = min_taps - 1;
 8006154:	3b01      	subs	r3, #1
 8006156:	aa02      	add	r2, sp, #8
 8006158:	f802 3d01 	strb.w	r3, [r2, #-1]!
    return mpu_write_mem(D_1_79, 1, &tmp);
 800615c:	2101      	movs	r1, #1
 800615e:	f240 104f 	movw	r0, #335	; 0x14f
 8006162:	f7ff fd59 	bl	8005c18 <mpu_write_mem>
}
 8006166:	b003      	add	sp, #12
 8006168:	f85d fb04 	ldr.w	pc, [sp], #4

0800616c <dmp_set_tap_time>:
{
 800616c:	b500      	push	{lr}
 800616e:	b083      	sub	sp, #12
    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 8006170:	4b08      	ldr	r3, [pc, #32]	; (8006194 <dmp_set_tap_time+0x28>)
 8006172:	fba3 3000 	umull	r3, r0, r3, r0
 8006176:	0880      	lsrs	r0, r0, #2
    tmp[0] = (unsigned char)(dmp_time >> 8);
 8006178:	0a03      	lsrs	r3, r0, #8
 800617a:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800617e:	f88d 0005 	strb.w	r0, [sp, #5]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 8006182:	aa01      	add	r2, sp, #4
 8006184:	2102      	movs	r1, #2
 8006186:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 800618a:	f7ff fd45 	bl	8005c18 <mpu_write_mem>
}
 800618e:	b003      	add	sp, #12
 8006190:	f85d fb04 	ldr.w	pc, [sp], #4
 8006194:	cccccccd 	.word	0xcccccccd

08006198 <dmp_set_tap_time_multi>:
{
 8006198:	b500      	push	{lr}
 800619a:	b083      	sub	sp, #12
    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800619c:	4b08      	ldr	r3, [pc, #32]	; (80061c0 <dmp_set_tap_time_multi+0x28>)
 800619e:	fba3 3000 	umull	r3, r0, r3, r0
 80061a2:	0880      	lsrs	r0, r0, #2
    tmp[0] = (unsigned char)(dmp_time >> 8);
 80061a4:	0a03      	lsrs	r3, r0, #8
 80061a6:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 80061aa:	f88d 0005 	strb.w	r0, [sp, #5]
    return mpu_write_mem(D_1_218, 2, tmp);
 80061ae:	aa01      	add	r2, sp, #4
 80061b0:	2102      	movs	r1, #2
 80061b2:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 80061b6:	f7ff fd2f 	bl	8005c18 <mpu_write_mem>
}
 80061ba:	b003      	add	sp, #12
 80061bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80061c0:	cccccccd 	.word	0xcccccccd

080061c4 <dmp_set_shake_reject_thresh>:
{
 80061c4:	b500      	push	{lr}
 80061c6:	b083      	sub	sp, #12
    long thresh_scaled = sf / 1000 * thresh;
 80061c8:	4b0e      	ldr	r3, [pc, #56]	; (8006204 <dmp_set_shake_reject_thresh+0x40>)
 80061ca:	fb83 2300 	smull	r2, r3, r3, r0
 80061ce:	17c0      	asrs	r0, r0, #31
 80061d0:	ebc0 10a3 	rsb	r0, r0, r3, asr #6
 80061d4:	fb01 f100 	mul.w	r1, r1, r0
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 80061d8:	0e0b      	lsrs	r3, r1, #24
 80061da:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 80061de:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80061e2:	f88d 3005 	strb.w	r3, [sp, #5]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 80061e6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80061ea:	f88d 3006 	strb.w	r3, [sp, #6]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 80061ee:	f88d 1007 	strb.w	r1, [sp, #7]
    return mpu_write_mem(D_1_92, 4, tmp);
 80061f2:	aa01      	add	r2, sp, #4
 80061f4:	2104      	movs	r1, #4
 80061f6:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 80061fa:	f7ff fd0d 	bl	8005c18 <mpu_write_mem>
}
 80061fe:	b003      	add	sp, #12
 8006200:	f85d fb04 	ldr.w	pc, [sp], #4
 8006204:	10624dd3 	.word	0x10624dd3

08006208 <dmp_set_shake_reject_time>:
{
 8006208:	b500      	push	{lr}
 800620a:	b083      	sub	sp, #12
    time /= (1000 / DMP_SAMPLE_RATE);
 800620c:	4b08      	ldr	r3, [pc, #32]	; (8006230 <dmp_set_shake_reject_time+0x28>)
 800620e:	fba3 3000 	umull	r3, r0, r3, r0
 8006212:	0880      	lsrs	r0, r0, #2
    tmp[0] = time >> 8;
 8006214:	0a03      	lsrs	r3, r0, #8
 8006216:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = time & 0xFF;
 800621a:	f88d 0005 	strb.w	r0, [sp, #5]
    return mpu_write_mem(D_1_90,2,tmp);
 800621e:	aa01      	add	r2, sp, #4
 8006220:	2102      	movs	r1, #2
 8006222:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 8006226:	f7ff fcf7 	bl	8005c18 <mpu_write_mem>
}
 800622a:	b003      	add	sp, #12
 800622c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006230:	cccccccd 	.word	0xcccccccd

08006234 <dmp_set_shake_reject_timeout>:
{
 8006234:	b500      	push	{lr}
 8006236:	b083      	sub	sp, #12
    time /= (1000 / DMP_SAMPLE_RATE);
 8006238:	4b08      	ldr	r3, [pc, #32]	; (800625c <dmp_set_shake_reject_timeout+0x28>)
 800623a:	fba3 3000 	umull	r3, r0, r3, r0
 800623e:	0880      	lsrs	r0, r0, #2
    tmp[0] = time >> 8;
 8006240:	0a03      	lsrs	r3, r0, #8
 8006242:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = time & 0xFF;
 8006246:	f88d 0005 	strb.w	r0, [sp, #5]
    return mpu_write_mem(D_1_88,2,tmp);
 800624a:	aa01      	add	r2, sp, #4
 800624c:	2102      	movs	r1, #2
 800624e:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8006252:	f7ff fce1 	bl	8005c18 <mpu_write_mem>
}
 8006256:	b003      	add	sp, #12
 8006258:	f85d fb04 	ldr.w	pc, [sp], #4
 800625c:	cccccccd 	.word	0xcccccccd

08006260 <dmp_enable_gyro_cal>:
{
 8006260:	b500      	push	{lr}
 8006262:	b085      	sub	sp, #20
    if (enable) {
 8006264:	b968      	cbnz	r0, 8006282 <dmp_enable_gyro_cal+0x22>
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8006266:	ab01      	add	r3, sp, #4
 8006268:	4a0c      	ldr	r2, [pc, #48]	; (800629c <dmp_enable_gyro_cal+0x3c>)
 800626a:	ca07      	ldmia	r2, {r0, r1, r2}
 800626c:	c303      	stmia	r3!, {r0, r1}
 800626e:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 8006270:	aa01      	add	r2, sp, #4
 8006272:	2109      	movs	r1, #9
 8006274:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8006278:	f7ff fcce 	bl	8005c18 <mpu_write_mem>
}
 800627c:	b005      	add	sp, #20
 800627e:	f85d fb04 	ldr.w	pc, [sp], #4
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8006282:	ab01      	add	r3, sp, #4
 8006284:	4a06      	ldr	r2, [pc, #24]	; (80062a0 <dmp_enable_gyro_cal+0x40>)
 8006286:	ca07      	ldmia	r2, {r0, r1, r2}
 8006288:	c303      	stmia	r3!, {r0, r1}
 800628a:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800628c:	aa01      	add	r2, sp, #4
 800628e:	2109      	movs	r1, #9
 8006290:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 8006294:	f7ff fcc0 	bl	8005c18 <mpu_write_mem>
 8006298:	e7f0      	b.n	800627c <dmp_enable_gyro_cal+0x1c>
 800629a:	bf00      	nop
 800629c:	0800a240 	.word	0x0800a240
 80062a0:	0800a234 	.word	0x0800a234

080062a4 <dmp_enable_lp_quat>:
{
 80062a4:	b500      	push	{lr}
 80062a6:	b083      	sub	sp, #12
    if (enable) {
 80062a8:	b1b0      	cbz	r0, 80062d8 <dmp_enable_lp_quat+0x34>
        regs[0] = DINBC0;
 80062aa:	23c0      	movs	r3, #192	; 0xc0
 80062ac:	f88d 3004 	strb.w	r3, [sp, #4]
        regs[1] = DINBC2;
 80062b0:	23c2      	movs	r3, #194	; 0xc2
 80062b2:	f88d 3005 	strb.w	r3, [sp, #5]
        regs[2] = DINBC4;
 80062b6:	23c4      	movs	r3, #196	; 0xc4
 80062b8:	f88d 3006 	strb.w	r3, [sp, #6]
        regs[3] = DINBC6;
 80062bc:	23c6      	movs	r3, #198	; 0xc6
 80062be:	f88d 3007 	strb.w	r3, [sp, #7]
    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 80062c2:	aa01      	add	r2, sp, #4
 80062c4:	2104      	movs	r1, #4
 80062c6:	f640 2098 	movw	r0, #2712	; 0xa98
 80062ca:	f7ff fca5 	bl	8005c18 <mpu_write_mem>
    return mpu_reset_fifo();
 80062ce:	f7fe fd53 	bl	8004d78 <mpu_reset_fifo>
}
 80062d2:	b003      	add	sp, #12
 80062d4:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0x8B, 4);
 80062d8:	f04f 338b 	mov.w	r3, #2341178251	; 0x8b8b8b8b
 80062dc:	9301      	str	r3, [sp, #4]
 80062de:	e7f0      	b.n	80062c2 <dmp_enable_lp_quat+0x1e>

080062e0 <dmp_enable_6x_lp_quat>:
{
 80062e0:	b500      	push	{lr}
 80062e2:	b083      	sub	sp, #12
    if (enable) {
 80062e4:	b1b0      	cbz	r0, 8006314 <dmp_enable_6x_lp_quat+0x34>
        regs[0] = DINA20;
 80062e6:	2320      	movs	r3, #32
 80062e8:	f88d 3004 	strb.w	r3, [sp, #4]
        regs[1] = DINA28;
 80062ec:	2328      	movs	r3, #40	; 0x28
 80062ee:	f88d 3005 	strb.w	r3, [sp, #5]
        regs[2] = DINA30;
 80062f2:	2330      	movs	r3, #48	; 0x30
 80062f4:	f88d 3006 	strb.w	r3, [sp, #6]
        regs[3] = DINA38;
 80062f8:	2338      	movs	r3, #56	; 0x38
 80062fa:	f88d 3007 	strb.w	r3, [sp, #7]
    mpu_write_mem(CFG_8, 4, regs);
 80062fe:	aa01      	add	r2, sp, #4
 8006300:	2104      	movs	r1, #4
 8006302:	f640 209e 	movw	r0, #2718	; 0xa9e
 8006306:	f7ff fc87 	bl	8005c18 <mpu_write_mem>
    return mpu_reset_fifo();
 800630a:	f7fe fd35 	bl	8004d78 <mpu_reset_fifo>
}
 800630e:	b003      	add	sp, #12
 8006310:	f85d fb04 	ldr.w	pc, [sp], #4
        memset(regs, 0xA3, 4);
 8006314:	f04f 33a3 	mov.w	r3, #2745410467	; 0xa3a3a3a3
 8006318:	9301      	str	r3, [sp, #4]
 800631a:	e7f0      	b.n	80062fe <dmp_enable_6x_lp_quat+0x1e>

0800631c <dmp_enable_feature>:
{
 800631c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006320:	b084      	sub	sp, #16
 8006322:	4604      	mov	r4, r0
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 8006324:	2302      	movs	r3, #2
 8006326:	f88d 3004 	strb.w	r3, [sp, #4]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 800632a:	23ca      	movs	r3, #202	; 0xca
 800632c:	f88d 3005 	strb.w	r3, [sp, #5]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 8006330:	23e3      	movs	r3, #227	; 0xe3
 8006332:	f88d 3006 	strb.w	r3, [sp, #6]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 8006336:	2309      	movs	r3, #9
 8006338:	f88d 3007 	strb.w	r3, [sp, #7]
    mpu_write_mem(D_0_104, 4, tmp);
 800633c:	aa01      	add	r2, sp, #4
 800633e:	2104      	movs	r1, #4
 8006340:	2068      	movs	r0, #104	; 0x68
 8006342:	f7ff fc69 	bl	8005c18 <mpu_write_mem>
    tmp[0] = 0xA3;
 8006346:	23a3      	movs	r3, #163	; 0xa3
 8006348:	f88d 3004 	strb.w	r3, [sp, #4]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 800634c:	f014 0840 	ands.w	r8, r4, #64	; 0x40
 8006350:	f000 80b0 	beq.w	80064b4 <dmp_enable_feature+0x198>
        tmp[1] = 0xC0;
 8006354:	23c0      	movs	r3, #192	; 0xc0
 8006356:	f88d 3005 	strb.w	r3, [sp, #5]
        tmp[2] = 0xC8;
 800635a:	23c8      	movs	r3, #200	; 0xc8
 800635c:	f88d 3006 	strb.w	r3, [sp, #6]
        tmp[3] = 0xC2;
 8006360:	23c2      	movs	r3, #194	; 0xc2
 8006362:	f88d 3007 	strb.w	r3, [sp, #7]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8006366:	f414 75c0 	ands.w	r5, r4, #384	; 0x180
 800636a:	f000 80ab 	beq.w	80064c4 <dmp_enable_feature+0x1a8>
        tmp[4] = 0xC4;
 800636e:	23c4      	movs	r3, #196	; 0xc4
 8006370:	f88d 3008 	strb.w	r3, [sp, #8]
        tmp[5] = 0xCC;
 8006374:	23cc      	movs	r3, #204	; 0xcc
 8006376:	f88d 3009 	strb.w	r3, [sp, #9]
        tmp[6] = 0xC6;
 800637a:	23c6      	movs	r3, #198	; 0xc6
 800637c:	f88d 300a 	strb.w	r3, [sp, #10]
    tmp[7] = 0xA3;
 8006380:	23a3      	movs	r3, #163	; 0xa3
 8006382:	f88d 300b 	strb.w	r3, [sp, #11]
    tmp[8] = 0xA3;
 8006386:	f88d 300c 	strb.w	r3, [sp, #12]
    tmp[9] = 0xA3;
 800638a:	f88d 300d 	strb.w	r3, [sp, #13]
    mpu_write_mem(CFG_15,10,tmp);
 800638e:	aa01      	add	r2, sp, #4
 8006390:	210a      	movs	r1, #10
 8006392:	f640 20a7 	movw	r0, #2727	; 0xaa7
 8006396:	f7ff fc3f 	bl	8005c18 <mpu_write_mem>
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800639a:	f014 0703 	ands.w	r7, r4, #3
 800639e:	f000 8099 	beq.w	80064d4 <dmp_enable_feature+0x1b8>
        tmp[0] = DINA20;
 80063a2:	2320      	movs	r3, #32
 80063a4:	f88d 3004 	strb.w	r3, [sp, #4]
    mpu_write_mem(CFG_27,1,tmp);
 80063a8:	aa01      	add	r2, sp, #4
 80063aa:	2101      	movs	r1, #1
 80063ac:	f640 20b6 	movw	r0, #2742	; 0xab6
 80063b0:	f7ff fc32 	bl	8005c18 <mpu_write_mem>
    if (mask & DMP_FEATURE_GYRO_CAL)
 80063b4:	f014 0f20 	tst.w	r4, #32
 80063b8:	f000 8090 	beq.w	80064dc <dmp_enable_feature+0x1c0>
        dmp_enable_gyro_cal(1);
 80063bc:	2001      	movs	r0, #1
 80063be:	f7ff ff4f 	bl	8006260 <dmp_enable_gyro_cal>
    if (mask & DMP_FEATURE_SEND_ANY_GYRO) {
 80063c2:	b1ad      	cbz	r5, 80063f0 <dmp_enable_feature+0xd4>
        if (mask & DMP_FEATURE_SEND_CAL_GYRO) {
 80063c4:	f414 7f80 	tst.w	r4, #256	; 0x100
 80063c8:	f000 808c 	beq.w	80064e4 <dmp_enable_feature+0x1c8>
            tmp[0] = 0xB2;
 80063cc:	23b2      	movs	r3, #178	; 0xb2
 80063ce:	f88d 3004 	strb.w	r3, [sp, #4]
            tmp[1] = 0x8B;
 80063d2:	238b      	movs	r3, #139	; 0x8b
 80063d4:	f88d 3005 	strb.w	r3, [sp, #5]
            tmp[2] = 0xB6;
 80063d8:	23b6      	movs	r3, #182	; 0xb6
 80063da:	f88d 3006 	strb.w	r3, [sp, #6]
            tmp[3] = 0x9B;
 80063de:	239b      	movs	r3, #155	; 0x9b
 80063e0:	f88d 3007 	strb.w	r3, [sp, #7]
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 80063e4:	aa01      	add	r2, sp, #4
 80063e6:	2104      	movs	r1, #4
 80063e8:	f640 20a2 	movw	r0, #2722	; 0xaa2
 80063ec:	f7ff fc14 	bl	8005c18 <mpu_write_mem>
    if (mask & DMP_FEATURE_TAP) {
 80063f0:	f014 0f01 	tst.w	r4, #1
 80063f4:	f000 8083 	beq.w	80064fe <dmp_enable_feature+0x1e2>
        tmp[0] = 0xF8;
 80063f8:	aa04      	add	r2, sp, #16
 80063fa:	23f8      	movs	r3, #248	; 0xf8
 80063fc:	f802 3d0c 	strb.w	r3, [r2, #-12]!
        mpu_write_mem(CFG_20, 1, tmp);
 8006400:	2101      	movs	r1, #1
 8006402:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 8006406:	f7ff fc07 	bl	8005c18 <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 800640a:	21fa      	movs	r1, #250	; 0xfa
 800640c:	2007      	movs	r0, #7
 800640e:	f7ff fd83 	bl	8005f18 <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 8006412:	2007      	movs	r0, #7
 8006414:	f7ff fe6e 	bl	80060f4 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 8006418:	2001      	movs	r0, #1
 800641a:	f7ff fe92 	bl	8006142 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 800641e:	2064      	movs	r0, #100	; 0x64
 8006420:	f7ff fea4 	bl	800616c <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 8006424:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006428:	f7ff feb6 	bl	8006198 <dmp_set_tap_time_multi>
        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 800642c:	21c8      	movs	r1, #200	; 0xc8
 800642e:	483f      	ldr	r0, [pc, #252]	; (800652c <dmp_enable_feature+0x210>)
 8006430:	f7ff fec8 	bl	80061c4 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 8006434:	2028      	movs	r0, #40	; 0x28
 8006436:	f7ff fee7 	bl	8006208 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 800643a:	200a      	movs	r0, #10
 800643c:	f7ff fefa 	bl	8006234 <dmp_set_shake_reject_timeout>
    if (mask & DMP_FEATURE_ANDROID_ORIENT) {
 8006440:	f014 0f02 	tst.w	r4, #2
 8006444:	d065      	beq.n	8006512 <dmp_enable_feature+0x1f6>
        tmp[0] = 0xD9;
 8006446:	23d9      	movs	r3, #217	; 0xd9
 8006448:	f88d 3004 	strb.w	r3, [sp, #4]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 800644c:	aa01      	add	r2, sp, #4
 800644e:	2101      	movs	r1, #1
 8006450:	f240 703d 	movw	r0, #1853	; 0x73d
 8006454:	f7ff fbe0 	bl	8005c18 <mpu_write_mem>
    if (mask & DMP_FEATURE_LP_QUAT)
 8006458:	f014 0f04 	tst.w	r4, #4
 800645c:	d05d      	beq.n	800651a <dmp_enable_feature+0x1fe>
        dmp_enable_lp_quat(1);
 800645e:	2001      	movs	r0, #1
 8006460:	f7ff ff20 	bl	80062a4 <dmp_enable_lp_quat>
    if (mask & DMP_FEATURE_6X_LP_QUAT)
 8006464:	f014 0f10 	tst.w	r4, #16
 8006468:	d05b      	beq.n	8006522 <dmp_enable_feature+0x206>
        dmp_enable_6x_lp_quat(1);
 800646a:	2001      	movs	r0, #1
 800646c:	f7ff ff38 	bl	80062e0 <dmp_enable_6x_lp_quat>
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 8006470:	4e2f      	ldr	r6, [pc, #188]	; (8006530 <dmp_enable_feature+0x214>)
 8006472:	f044 0308 	orr.w	r3, r4, #8
 8006476:	8173      	strh	r3, [r6, #10]
    mpu_reset_fifo();
 8006478:	f7fe fc7e 	bl	8004d78 <mpu_reset_fifo>
    dmp.packet_length = 0;
 800647c:	2300      	movs	r3, #0
 800647e:	73b3      	strb	r3, [r6, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 8006480:	f1b8 0f00 	cmp.w	r8, #0
 8006484:	d001      	beq.n	800648a <dmp_enable_feature+0x16e>
        dmp.packet_length += 6;
 8006486:	2206      	movs	r2, #6
 8006488:	73b2      	strb	r2, [r6, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 800648a:	b11d      	cbz	r5, 8006494 <dmp_enable_feature+0x178>
        dmp.packet_length += 6;
 800648c:	4a28      	ldr	r2, [pc, #160]	; (8006530 <dmp_enable_feature+0x214>)
 800648e:	7b93      	ldrb	r3, [r2, #14]
 8006490:	3306      	adds	r3, #6
 8006492:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 8006494:	f014 0f14 	tst.w	r4, #20
 8006498:	d003      	beq.n	80064a2 <dmp_enable_feature+0x186>
        dmp.packet_length += 16;
 800649a:	4a25      	ldr	r2, [pc, #148]	; (8006530 <dmp_enable_feature+0x214>)
 800649c:	7b93      	ldrb	r3, [r2, #14]
 800649e:	3310      	adds	r3, #16
 80064a0:	7393      	strb	r3, [r2, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80064a2:	b11f      	cbz	r7, 80064ac <dmp_enable_feature+0x190>
        dmp.packet_length += 4;
 80064a4:	4a22      	ldr	r2, [pc, #136]	; (8006530 <dmp_enable_feature+0x214>)
 80064a6:	7b93      	ldrb	r3, [r2, #14]
 80064a8:	3304      	adds	r3, #4
 80064aa:	7393      	strb	r3, [r2, #14]
}
 80064ac:	2000      	movs	r0, #0
 80064ae:	b004      	add	sp, #16
 80064b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp[1] = 0xA3;
 80064b4:	23a3      	movs	r3, #163	; 0xa3
 80064b6:	f88d 3005 	strb.w	r3, [sp, #5]
        tmp[2] = 0xA3;
 80064ba:	f88d 3006 	strb.w	r3, [sp, #6]
        tmp[3] = 0xA3;
 80064be:	f88d 3007 	strb.w	r3, [sp, #7]
 80064c2:	e750      	b.n	8006366 <dmp_enable_feature+0x4a>
        tmp[4] = 0xA3;
 80064c4:	23a3      	movs	r3, #163	; 0xa3
 80064c6:	f88d 3008 	strb.w	r3, [sp, #8]
        tmp[5] = 0xA3;
 80064ca:	f88d 3009 	strb.w	r3, [sp, #9]
        tmp[6] = 0xA3;
 80064ce:	f88d 300a 	strb.w	r3, [sp, #10]
 80064d2:	e755      	b.n	8006380 <dmp_enable_feature+0x64>
        tmp[0] = 0xD8;
 80064d4:	23d8      	movs	r3, #216	; 0xd8
 80064d6:	f88d 3004 	strb.w	r3, [sp, #4]
 80064da:	e765      	b.n	80063a8 <dmp_enable_feature+0x8c>
        dmp_enable_gyro_cal(0);
 80064dc:	2000      	movs	r0, #0
 80064de:	f7ff febf 	bl	8006260 <dmp_enable_gyro_cal>
 80064e2:	e76e      	b.n	80063c2 <dmp_enable_feature+0xa6>
            tmp[0] = DINAC0;
 80064e4:	23b0      	movs	r3, #176	; 0xb0
 80064e6:	f88d 3004 	strb.w	r3, [sp, #4]
            tmp[1] = DINA80;
 80064ea:	2380      	movs	r3, #128	; 0x80
 80064ec:	f88d 3005 	strb.w	r3, [sp, #5]
            tmp[2] = DINAC2;
 80064f0:	23b4      	movs	r3, #180	; 0xb4
 80064f2:	f88d 3006 	strb.w	r3, [sp, #6]
            tmp[3] = DINA90;
 80064f6:	2390      	movs	r3, #144	; 0x90
 80064f8:	f88d 3007 	strb.w	r3, [sp, #7]
 80064fc:	e772      	b.n	80063e4 <dmp_enable_feature+0xc8>
        tmp[0] = 0xD8;
 80064fe:	aa04      	add	r2, sp, #16
 8006500:	23d8      	movs	r3, #216	; 0xd8
 8006502:	f802 3d0c 	strb.w	r3, [r2, #-12]!
        mpu_write_mem(CFG_20, 1, tmp);
 8006506:	2101      	movs	r1, #1
 8006508:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 800650c:	f7ff fb84 	bl	8005c18 <mpu_write_mem>
 8006510:	e796      	b.n	8006440 <dmp_enable_feature+0x124>
        tmp[0] = 0xD8;
 8006512:	23d8      	movs	r3, #216	; 0xd8
 8006514:	f88d 3004 	strb.w	r3, [sp, #4]
 8006518:	e798      	b.n	800644c <dmp_enable_feature+0x130>
        dmp_enable_lp_quat(0);
 800651a:	2000      	movs	r0, #0
 800651c:	f7ff fec2 	bl	80062a4 <dmp_enable_lp_quat>
 8006520:	e7a0      	b.n	8006464 <dmp_enable_feature+0x148>
        dmp_enable_6x_lp_quat(0);
 8006522:	2000      	movs	r0, #0
 8006524:	f7ff fedc 	bl	80062e0 <dmp_enable_6x_lp_quat>
 8006528:	e7a2      	b.n	8006470 <dmp_enable_feature+0x154>
 800652a:	bf00      	nop
 800652c:	02cae309 	.word	0x02cae309
 8006530:	2000034c 	.word	0x2000034c

08006534 <dmp_read_fifo>:
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat,
    unsigned long *timestamp, short *sensors, unsigned char *more)
{
 8006534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006538:	b089      	sub	sp, #36	; 0x24
 800653a:	4605      	mov	r5, r0
 800653c:	460e      	mov	r6, r1
 800653e:	4691      	mov	r9, r2
 8006540:	4698      	mov	r8, r3
 8006542:	9c10      	ldr	r4, [sp, #64]	; 0x40
    unsigned char ii = 0;

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 8006544:	2300      	movs	r3, #0
 8006546:	8023      	strh	r3, [r4, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 8006548:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800654a:	4669      	mov	r1, sp
 800654c:	4b6d      	ldr	r3, [pc, #436]	; (8006704 <dmp_read_fifo+0x1d0>)
 800654e:	7b98      	ldrb	r0, [r3, #14]
 8006550:	f7fe fec4 	bl	80052dc <mpu_read_fifo_stream>
 8006554:	2800      	cmp	r0, #0
 8006556:	f040 80d1 	bne.w	80066fc <dmp_read_fifo+0x1c8>
 800655a:	4607      	mov	r7, r0
        return -1;

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT)) {
 800655c:	4b69      	ldr	r3, [pc, #420]	; (8006704 <dmp_read_fifo+0x1d0>)
 800655e:	8959      	ldrh	r1, [r3, #10]
 8006560:	f011 0f14 	tst.w	r1, #20
 8006564:	d05d      	beq.n	8006622 <dmp_read_fifo+0xee>
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8006566:	f89d 3000 	ldrb.w	r3, [sp]
 800656a:	f89d c001 	ldrb.w	ip, [sp, #1]
 800656e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 8006572:	ea4c 6c03 	orr.w	ip, ip, r3, lsl #24
            ((long)fifo_data[2] << 8) | fifo_data[3];
 8006576:	f89d 0002 	ldrb.w	r0, [sp, #2]
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 800657a:	ea4c 2c00 	orr.w	ip, ip, r0, lsl #8
            ((long)fifo_data[2] << 8) | fifo_data[3];
 800657e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006582:	ea4c 0c03 	orr.w	ip, ip, r3
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) |
 8006586:	f8c9 c000 	str.w	ip, [r9]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800658a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800658e:	f89d e005 	ldrb.w	lr, [sp, #5]
 8006592:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
 8006596:	ea4e 6e03 	orr.w	lr, lr, r3, lsl #24
            ((long)fifo_data[6] << 8) | fifo_data[7];
 800659a:	f89d 3006 	ldrb.w	r3, [sp, #6]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 800659e:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
            ((long)fifo_data[6] << 8) | fifo_data[7];
 80065a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80065a6:	ea4e 0e03 	orr.w	lr, lr, r3
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) |
 80065aa:	f8c9 e004 	str.w	lr, [r9, #4]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80065ae:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80065b2:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80065b6:	0400      	lsls	r0, r0, #16
 80065b8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80065bc:	f89d 300a 	ldrb.w	r3, [sp, #10]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80065c0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
            ((long)fifo_data[10] << 8) | fifo_data[11];
 80065c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80065c8:	4318      	orrs	r0, r3
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) |
 80065ca:	f8c9 0008 	str.w	r0, [r9, #8]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80065ce:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80065d2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80065d6:	0412      	lsls	r2, r2, #16
 80065d8:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80065dc:	f89d 300e 	ldrb.w	r3, [sp, #14]
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80065e0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
            ((long)fifo_data[14] << 8) | fifo_data[15];
 80065e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80065e8:	4313      	orrs	r3, r2
        quat[3] = ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) |
 80065ea:	f8c9 300c 	str.w	r3, [r9, #12]
         */
        quat_q14[0] = quat[0] >> 16;
        quat_q14[1] = quat[1] >> 16;
        quat_q14[2] = quat[2] >> 16;
        quat_q14[3] = quat[3] >> 16;
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 80065ee:	fb1e fe3e 	smultt	lr, lr, lr
 80065f2:	fb1c ec3c 	smlatt	ip, ip, ip, lr
 80065f6:	fb10 c030 	smlatt	r0, r0, r0, ip
 80065fa:	fb13 0333 	smlatt	r3, r3, r3, r0
            quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) ||
 80065fe:	f103 4371 	add.w	r3, r3, #4043309056	; 0xf1000000
 8006602:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006606:	d805      	bhi.n	8006614 <dmp_read_fifo+0xe0>
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
            sensors[0] = 0;
            return -1;
        }
        sensors[0] |= INV_WXYZ_QUAT;
 8006608:	8823      	ldrh	r3, [r4, #0]
 800660a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800660e:	8023      	strh	r3, [r4, #0]
        ii += 16;
 8006610:	2010      	movs	r0, #16
 8006612:	e007      	b.n	8006624 <dmp_read_fifo+0xf0>
            mpu_reset_fifo();
 8006614:	f7fe fbb0 	bl	8004d78 <mpu_reset_fifo>
            sensors[0] = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	8023      	strh	r3, [r4, #0]
            return -1;
 800661c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006620:	e064      	b.n	80066ec <dmp_read_fifo+0x1b8>
    unsigned char ii = 0;
 8006622:	2000      	movs	r0, #0
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL) {
 8006624:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006628:	d02b      	beq.n	8006682 <dmp_read_fifo+0x14e>
        accel[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 800662a:	ab08      	add	r3, sp, #32
 800662c:	4403      	add	r3, r0
 800662e:	f813 cc20 	ldrb.w	ip, [r3, #-32]
 8006632:	1c42      	adds	r2, r0, #1
 8006634:	ab08      	add	r3, sp, #32
 8006636:	441a      	add	r2, r3
 8006638:	f812 3c20 	ldrb.w	r3, [r2, #-32]
 800663c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8006640:	8033      	strh	r3, [r6, #0]
        accel[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 8006642:	1c83      	adds	r3, r0, #2
 8006644:	aa08      	add	r2, sp, #32
 8006646:	4413      	add	r3, r2
 8006648:	f813 cc20 	ldrb.w	ip, [r3, #-32]
 800664c:	1cc2      	adds	r2, r0, #3
 800664e:	ab08      	add	r3, sp, #32
 8006650:	441a      	add	r2, r3
 8006652:	f812 3c20 	ldrb.w	r3, [r2, #-32]
 8006656:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800665a:	8073      	strh	r3, [r6, #2]
        accel[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 800665c:	1d03      	adds	r3, r0, #4
 800665e:	aa08      	add	r2, sp, #32
 8006660:	4413      	add	r3, r2
 8006662:	f813 cc20 	ldrb.w	ip, [r3, #-32]
 8006666:	1d42      	adds	r2, r0, #5
 8006668:	ab08      	add	r3, sp, #32
 800666a:	441a      	add	r2, r3
 800666c:	f812 3c20 	ldrb.w	r3, [r2, #-32]
 8006670:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8006674:	80b3      	strh	r3, [r6, #4]
        ii += 6;
 8006676:	3006      	adds	r0, #6
 8006678:	b2c0      	uxtb	r0, r0
        sensors[0] |= INV_XYZ_ACCEL;
 800667a:	8823      	ldrh	r3, [r4, #0]
 800667c:	f043 0308 	orr.w	r3, r3, #8
 8006680:	8023      	strh	r3, [r4, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO) {
 8006682:	f411 7fc0 	tst.w	r1, #384	; 0x180
 8006686:	d02b      	beq.n	80066e0 <dmp_read_fifo+0x1ac>
        gyro[0] = ((short)fifo_data[ii+0] << 8) | fifo_data[ii+1];
 8006688:	ab08      	add	r3, sp, #32
 800668a:	4403      	add	r3, r0
 800668c:	f813 6c20 	ldrb.w	r6, [r3, #-32]
 8006690:	1c42      	adds	r2, r0, #1
 8006692:	ab08      	add	r3, sp, #32
 8006694:	441a      	add	r2, r3
 8006696:	f812 3c20 	ldrb.w	r3, [r2, #-32]
 800669a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 800669e:	802b      	strh	r3, [r5, #0]
        gyro[1] = ((short)fifo_data[ii+2] << 8) | fifo_data[ii+3];
 80066a0:	1c83      	adds	r3, r0, #2
 80066a2:	aa08      	add	r2, sp, #32
 80066a4:	4413      	add	r3, r2
 80066a6:	f813 6c20 	ldrb.w	r6, [r3, #-32]
 80066aa:	1cc2      	adds	r2, r0, #3
 80066ac:	ab08      	add	r3, sp, #32
 80066ae:	441a      	add	r2, r3
 80066b0:	f812 3c20 	ldrb.w	r3, [r2, #-32]
 80066b4:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80066b8:	806b      	strh	r3, [r5, #2]
        gyro[2] = ((short)fifo_data[ii+4] << 8) | fifo_data[ii+5];
 80066ba:	1d03      	adds	r3, r0, #4
 80066bc:	aa08      	add	r2, sp, #32
 80066be:	4413      	add	r3, r2
 80066c0:	f813 6c20 	ldrb.w	r6, [r3, #-32]
 80066c4:	1d42      	adds	r2, r0, #5
 80066c6:	ab08      	add	r3, sp, #32
 80066c8:	441a      	add	r2, r3
 80066ca:	f812 3c20 	ldrb.w	r3, [r2, #-32]
 80066ce:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80066d2:	80ab      	strh	r3, [r5, #4]
        ii += 6;
 80066d4:	3006      	adds	r0, #6
 80066d6:	b2c0      	uxtb	r0, r0
        sensors[0] |= INV_XYZ_GYRO;
 80066d8:	8823      	ldrh	r3, [r4, #0]
 80066da:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80066de:	8023      	strh	r3, [r4, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 80066e0:	f011 0f03 	tst.w	r1, #3
 80066e4:	d106      	bne.n	80066f4 <dmp_read_fifo+0x1c0>
        decode_gesture(fifo_data + ii);

    get_ms(timestamp);
 80066e6:	4640      	mov	r0, r8
 80066e8:	f7fe fa8c 	bl	8004c04 <arduino_get_clock_ms>
    return 0;
}
 80066ec:	4638      	mov	r0, r7
 80066ee:	b009      	add	sp, #36	; 0x24
 80066f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        decode_gesture(fifo_data + ii);
 80066f4:	4468      	add	r0, sp
 80066f6:	f7ff fbaf 	bl	8005e58 <decode_gesture>
 80066fa:	e7f4      	b.n	80066e6 <dmp_read_fifo+0x1b2>
        return -1;
 80066fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006700:	e7f4      	b.n	80066ec <dmp_read_fifo+0x1b8>
 8006702:	bf00      	nop
 8006704:	2000034c 	.word	0x2000034c

08006708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800670c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800670e:	2400      	movs	r4, #0
 8006710:	9403      	str	r4, [sp, #12]
 8006712:	9404      	str	r4, [sp, #16]
 8006714:	9405      	str	r4, [sp, #20]
 8006716:	9406      	str	r4, [sp, #24]
 8006718:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800671a:	9400      	str	r4, [sp, #0]
 800671c:	4b3c      	ldr	r3, [pc, #240]	; (8006810 <MX_GPIO_Init+0x108>)
 800671e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006720:	f042 0204 	orr.w	r2, r2, #4
 8006724:	631a      	str	r2, [r3, #48]	; 0x30
 8006726:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006728:	f002 0204 	and.w	r2, r2, #4
 800672c:	9200      	str	r2, [sp, #0]
 800672e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006730:	9401      	str	r4, [sp, #4]
 8006732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006734:	f042 0201 	orr.w	r2, r2, #1
 8006738:	631a      	str	r2, [r3, #48]	; 0x30
 800673a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800673c:	f002 0201 	and.w	r2, r2, #1
 8006740:	9201      	str	r2, [sp, #4]
 8006742:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006744:	9402      	str	r4, [sp, #8]
 8006746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006748:	f042 0202 	orr.w	r2, r2, #2
 800674c:	631a      	str	r2, [r3, #48]	; 0x30
 800674e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	9302      	str	r3, [sp, #8]
 8006756:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8006758:	4e2e      	ldr	r6, [pc, #184]	; (8006814 <MX_GPIO_Init+0x10c>)
 800675a:	4622      	mov	r2, r4
 800675c:	2120      	movs	r1, #32
 800675e:	4630      	mov	r0, r6
 8006760:	f7fc f940 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8006764:	4f2c      	ldr	r7, [pc, #176]	; (8006818 <MX_GPIO_Init+0x110>)
 8006766:	4622      	mov	r2, r4
 8006768:	2120      	movs	r1, #32
 800676a:	4638      	mov	r0, r7
 800676c:	f7fc f93a 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8006770:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800681c <MX_GPIO_Init+0x114>
 8006774:	4622      	mov	r2, r4
 8006776:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800677a:	4648      	mov	r0, r9
 800677c:	f7fc f932 	bl	80029e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006780:	f04f 0a20 	mov.w	sl, #32
 8006784:	f8cd a00c 	str.w	sl, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006788:	2501      	movs	r5, #1
 800678a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800678c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800678e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006790:	a903      	add	r1, sp, #12
 8006792:	4630      	mov	r0, r6
 8006794:	f7fc f854 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pin : kill_Pin */
  GPIO_InitStruct.Pin = kill_Pin;
 8006798:	2310      	movs	r3, #16
 800679a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800679c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8006820 <MX_GPIO_Init+0x118>
 80067a0:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80067a4:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(kill_GPIO_Port, &GPIO_InitStruct);
 80067a6:	a903      	add	r1, sp, #12
 80067a8:	4638      	mov	r0, r7
 80067aa:	f7fc f849 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80067ae:	f8cd a00c 	str.w	sl, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067b2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067b4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067b6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067b8:	a903      	add	r1, sp, #12
 80067ba:	4638      	mov	r0, r7
 80067bc:	f7fc f840 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80067c0:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80067c4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067c6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067c8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067ca:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067cc:	a903      	add	r1, sp, #12
 80067ce:	4648      	mov	r0, r9
 80067d0:	f7fc f836 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_RE_INT_Pin */
  GPIO_InitStruct.Pin = PWM_RE_INT_Pin;
 80067d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067d8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80067da:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067de:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(PWM_RE_INT_GPIO_Port, &GPIO_InitStruct);
 80067e0:	a903      	add	r1, sp, #12
 80067e2:	4630      	mov	r0, r6
 80067e4:	f7fc f82c 	bl	8002840 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80067e8:	4622      	mov	r2, r4
 80067ea:	4621      	mov	r1, r4
 80067ec:	200a      	movs	r0, #10
 80067ee:	f7fb ffcf 	bl	8002790 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80067f2:	200a      	movs	r0, #10
 80067f4:	f7fc f800 	bl	80027f8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 4, 0);
 80067f8:	4622      	mov	r2, r4
 80067fa:	2104      	movs	r1, #4
 80067fc:	2017      	movs	r0, #23
 80067fe:	f7fb ffc7 	bl	8002790 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006802:	2017      	movs	r0, #23
 8006804:	f7fb fff8 	bl	80027f8 <HAL_NVIC_EnableIRQ>

}
 8006808:	b008      	add	sp, #32
 800680a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800680e:	bf00      	nop
 8006810:	40023800 	.word	0x40023800
 8006814:	40020000 	.word	0x40020000
 8006818:	40020800 	.word	0x40020800
 800681c:	40020400 	.word	0x40020400
 8006820:	10110000 	.word	0x10110000

08006824 <MX_USART2_UART_Init>:
{
 8006824:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8006826:	4808      	ldr	r0, [pc, #32]	; (8006848 <MX_USART2_UART_Init+0x24>)
 8006828:	4b08      	ldr	r3, [pc, #32]	; (800684c <MX_USART2_UART_Init+0x28>)
 800682a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800682c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8006830:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006832:	2300      	movs	r3, #0
 8006834:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006836:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006838:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800683a:	220c      	movs	r2, #12
 800683c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800683e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006840:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006842:	f7fe f940 	bl	8004ac6 <HAL_UART_Init>
}
 8006846:	bd08      	pop	{r3, pc}
 8006848:	20000668 	.word	0x20000668
 800684c:	40004400 	.word	0x40004400

08006850 <MX_USART6_UART_Init>:
{
 8006850:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 8006852:	4808      	ldr	r0, [pc, #32]	; (8006874 <MX_USART6_UART_Init+0x24>)
 8006854:	4b08      	ldr	r3, [pc, #32]	; (8006878 <MX_USART6_UART_Init+0x28>)
 8006856:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 8006858:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800685c:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800685e:	2300      	movs	r3, #0
 8006860:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8006862:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8006864:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8006866:	220c      	movs	r2, #12
 8006868:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800686a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800686c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800686e:	f7fe f92a 	bl	8004ac6 <HAL_UART_Init>
}
 8006872:	bd08      	pop	{r3, pc}
 8006874:	20000604 	.word	0x20000604
 8006878:	40011400 	.word	0x40011400

0800687c <MX_I2C2_Init>:
{
 800687c:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 800687e:	4809      	ldr	r0, [pc, #36]	; (80068a4 <MX_I2C2_Init+0x28>)
 8006880:	4b09      	ldr	r3, [pc, #36]	; (80068a8 <MX_I2C2_Init+0x2c>)
 8006882:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8006884:	4b09      	ldr	r3, [pc, #36]	; (80068ac <MX_I2C2_Init+0x30>)
 8006886:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006888:	2300      	movs	r3, #0
 800688a:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800688c:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800688e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006892:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006894:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006896:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006898:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800689a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800689c:	f7fc fac4 	bl	8002e28 <HAL_I2C_Init>
}
 80068a0:	bd08      	pop	{r3, pc}
 80068a2:	bf00      	nop
 80068a4:	200003c0 	.word	0x200003c0
 80068a8:	40005800 	.word	0x40005800
 80068ac:	00061a80 	.word	0x00061a80

080068b0 <MX_TIM4_Init>:
{
 80068b0:	b570      	push	{r4, r5, r6, lr}
 80068b2:	b08a      	sub	sp, #40	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068b4:	2400      	movs	r4, #0
 80068b6:	9408      	str	r4, [sp, #32]
 80068b8:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80068ba:	9401      	str	r4, [sp, #4]
 80068bc:	9402      	str	r4, [sp, #8]
 80068be:	9403      	str	r4, [sp, #12]
 80068c0:	9404      	str	r4, [sp, #16]
 80068c2:	9405      	str	r4, [sp, #20]
 80068c4:	9406      	str	r4, [sp, #24]
 80068c6:	9407      	str	r4, [sp, #28]
  htim4.Instance = TIM4;
 80068c8:	4d1b      	ldr	r5, [pc, #108]	; (8006938 <MX_TIM4_Init+0x88>)
 80068ca:	4b1c      	ldr	r3, [pc, #112]	; (800693c <MX_TIM4_Init+0x8c>)
 80068cc:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 9;
 80068ce:	2309      	movs	r3, #9
 80068d0:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068d2:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 20000;
 80068d4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80068d8:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068da:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068dc:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80068de:	4628      	mov	r0, r5
 80068e0:	f7fd fde9 	bl	80044b6 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068e4:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068e6:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80068e8:	a908      	add	r1, sp, #32
 80068ea:	4628      	mov	r0, r5
 80068ec:	f7fd fefc 	bl	80046e8 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80068f0:	2360      	movs	r3, #96	; 0x60
 80068f2:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80068f4:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80068f6:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80068f8:	2604      	movs	r6, #4
 80068fa:	9605      	str	r6, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80068fc:	4622      	mov	r2, r4
 80068fe:	eb0d 0106 	add.w	r1, sp, r6
 8006902:	4628      	mov	r0, r5
 8006904:	f7fd fe22 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006908:	4632      	mov	r2, r6
 800690a:	eb0d 0106 	add.w	r1, sp, r6
 800690e:	4628      	mov	r0, r5
 8006910:	f7fd fe1c 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006914:	2208      	movs	r2, #8
 8006916:	eb0d 0106 	add.w	r1, sp, r6
 800691a:	4628      	mov	r0, r5
 800691c:	f7fd fe16 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006920:	220c      	movs	r2, #12
 8006922:	eb0d 0106 	add.w	r1, sp, r6
 8006926:	4628      	mov	r0, r5
 8006928:	f7fd fe10 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 800692c:	4628      	mov	r0, r5
 800692e:	f000 fcd7 	bl	80072e0 <HAL_TIM_MspPostInit>
}
 8006932:	b00a      	add	sp, #40	; 0x28
 8006934:	bd70      	pop	{r4, r5, r6, pc}
 8006936:	bf00      	nop
 8006938:	20000510 	.word	0x20000510
 800693c:	40000800 	.word	0x40000800

08006940 <MX_ADC1_Init>:
{
 8006940:	b530      	push	{r4, r5, lr}
 8006942:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8006944:	2300      	movs	r3, #0
 8006946:	9300      	str	r3, [sp, #0]
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	9302      	str	r3, [sp, #8]
 800694c:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 800694e:	4c11      	ldr	r4, [pc, #68]	; (8006994 <MX_ADC1_Init+0x54>)
 8006950:	4a11      	ldr	r2, [pc, #68]	; (8006998 <MX_ADC1_Init+0x58>)
 8006952:	6022      	str	r2, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006954:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006958:	6062      	str	r2, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800695a:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800695c:	6123      	str	r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800695e:	2501      	movs	r5, #1
 8006960:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006962:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006966:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006968:	4a0c      	ldr	r2, [pc, #48]	; (800699c <MX_ADC1_Init+0x5c>)
 800696a:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800696c:	60e3      	str	r3, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 800696e:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006970:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006974:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006976:	4620      	mov	r0, r4
 8006978:	f7fb fdfa 	bl	8002570 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_7;
 800697c:	2307      	movs	r3, #7
 800697e:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8006980:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8006982:	2302      	movs	r3, #2
 8006984:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006986:	4669      	mov	r1, sp
 8006988:	4620      	mov	r0, r4
 800698a:	f7fb fe1d 	bl	80025c8 <HAL_ADC_ConfigChannel>
}
 800698e:	b005      	add	sp, #20
 8006990:	bd30      	pop	{r4, r5, pc}
 8006992:	bf00      	nop
 8006994:	20000550 	.word	0x20000550
 8006998:	40012000 	.word	0x40012000
 800699c:	0f000001 	.word	0x0f000001

080069a0 <MX_SPI2_Init>:
{
 80069a0:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 80069a2:	480c      	ldr	r0, [pc, #48]	; (80069d4 <MX_SPI2_Init+0x34>)
 80069a4:	4b0c      	ldr	r3, [pc, #48]	; (80069d8 <MX_SPI2_Init+0x38>)
 80069a6:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80069a8:	f44f 7382 	mov.w	r3, #260	; 0x104
 80069ac:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80069ae:	2300      	movs	r3, #0
 80069b0:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80069b2:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80069b4:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80069b6:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80069b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069bc:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80069be:	2220      	movs	r2, #32
 80069c0:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80069c2:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80069c4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069c6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80069c8:	230a      	movs	r3, #10
 80069ca:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80069cc:	f7fd f9b2 	bl	8003d34 <HAL_SPI_Init>
}
 80069d0:	bd08      	pop	{r3, pc}
 80069d2:	bf00      	nop
 80069d4:	200004b8 	.word	0x200004b8
 80069d8:	40003800 	.word	0x40003800

080069dc <MX_TIM11_Init>:
{
 80069dc:	b508      	push	{r3, lr}
  htim11.Instance = TIM11;
 80069de:	4807      	ldr	r0, [pc, #28]	; (80069fc <MX_TIM11_Init+0x20>)
 80069e0:	4b07      	ldr	r3, [pc, #28]	; (8006a00 <MX_TIM11_Init+0x24>)
 80069e2:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 100-1;
 80069e4:	2363      	movs	r3, #99	; 0x63
 80069e6:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069e8:	2300      	movs	r3, #0
 80069ea:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 65535-1;
 80069ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80069f0:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069f2:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069f4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80069f6:	f7fd fd45 	bl	8004484 <HAL_TIM_Base_Init>
}
 80069fa:	bd08      	pop	{r3, pc}
 80069fc:	200005b8 	.word	0x200005b8
 8006a00:	40014800 	.word	0x40014800

08006a04 <SystemClock_Config>:
{
 8006a04:	b530      	push	{r4, r5, lr}
 8006a06:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006a08:	2230      	movs	r2, #48	; 0x30
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	a808      	add	r0, sp, #32
 8006a0e:	f000 fdc3 	bl	8007598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006a12:	2400      	movs	r4, #0
 8006a14:	9403      	str	r4, [sp, #12]
 8006a16:	9404      	str	r4, [sp, #16]
 8006a18:	9405      	str	r4, [sp, #20]
 8006a1a:	9406      	str	r4, [sp, #24]
 8006a1c:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a1e:	9401      	str	r4, [sp, #4]
 8006a20:	4b1a      	ldr	r3, [pc, #104]	; (8006a8c <SystemClock_Config+0x88>)
 8006a22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006a28:	641a      	str	r2, [r3, #64]	; 0x40
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a30:	9301      	str	r3, [sp, #4]
 8006a32:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a34:	9402      	str	r4, [sp, #8]
 8006a36:	4b16      	ldr	r3, [pc, #88]	; (8006a90 <SystemClock_Config+0x8c>)
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a46:	9302      	str	r3, [sp, #8]
 8006a48:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006a4a:	2502      	movs	r5, #2
 8006a4c:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006a52:	2310      	movs	r3, #16
 8006a54:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006a56:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006a58:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006a5a:	2308      	movs	r3, #8
 8006a5c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8006a5e:	2364      	movs	r3, #100	; 0x64
 8006a60:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006a62:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006a64:	2304      	movs	r3, #4
 8006a66:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a68:	a808      	add	r0, sp, #32
 8006a6a:	f7fc fd91 	bl	8003590 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006a6e:	230f      	movs	r3, #15
 8006a70:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006a72:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006a74:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a7a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006a7c:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006a7e:	2103      	movs	r1, #3
 8006a80:	a803      	add	r0, sp, #12
 8006a82:	f7fc ffbd 	bl	8003a00 <HAL_RCC_ClockConfig>
}
 8006a86:	b015      	add	sp, #84	; 0x54
 8006a88:	bd30      	pop	{r4, r5, pc}
 8006a8a:	bf00      	nop
 8006a8c:	40023800 	.word	0x40023800
 8006a90:	40007000 	.word	0x40007000

08006a94 <PWM1_Set>:

}

//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 8006a94:	4b01      	ldr	r3, [pc, #4]	; (8006a9c <PWM1_Set+0x8>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6358      	str	r0, [r3, #52]	; 0x34
}
 8006a9a:	4770      	bx	lr
 8006a9c:	20000510 	.word	0x20000510

08006aa0 <PWM2_Set>:

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 8006aa0:	4b01      	ldr	r3, [pc, #4]	; (8006aa8 <PWM2_Set+0x8>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6398      	str	r0, [r3, #56]	; 0x38

}
 8006aa6:	4770      	bx	lr
 8006aa8:	20000510 	.word	0x20000510

08006aac <PWM3_Set>:

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 8006aac:	4b01      	ldr	r3, [pc, #4]	; (8006ab4 <PWM3_Set+0x8>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8006ab2:	4770      	bx	lr
 8006ab4:	20000510 	.word	0x20000510

08006ab8 <PWM4_Set>:

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 8006ab8:	4b01      	ldr	r3, [pc, #4]	; (8006ac0 <PWM4_Set+0x8>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6418      	str	r0, [r3, #64]	; 0x40
}
 8006abe:	4770      	bx	lr
 8006ac0:	20000510 	.word	0x20000510

08006ac4 <main>:
{
 8006ac4:	b500      	push	{lr}
 8006ac6:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 8006ac8:	f7fb fc78 	bl	80023bc <HAL_Init>
  SystemClock_Config();
 8006acc:	f7ff ff9a 	bl	8006a04 <SystemClock_Config>
  MX_GPIO_Init();
 8006ad0:	f7ff fe1a 	bl	8006708 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8006ad4:	f7ff fea6 	bl	8006824 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8006ad8:	f7ff fed0 	bl	800687c <MX_I2C2_Init>
  MX_TIM4_Init();
 8006adc:	f7ff fee8 	bl	80068b0 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8006ae0:	f7ff feb6 	bl	8006850 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8006ae4:	f7ff ff2c 	bl	8006940 <MX_ADC1_Init>
  MX_SPI2_Init();
 8006ae8:	f7ff ff5a 	bl	80069a0 <MX_SPI2_Init>
  MX_TIM11_Init();
 8006aec:	f7ff ff76 	bl	80069dc <MX_TIM11_Init>
	if (HAL_I2C_IsDeviceReady(&hi2c2, 0xD0, 2, 100) == HAL_OK) {
 8006af0:	2364      	movs	r3, #100	; 0x64
 8006af2:	2202      	movs	r2, #2
 8006af4:	21d0      	movs	r1, #208	; 0xd0
 8006af6:	483c      	ldr	r0, [pc, #240]	; (8006be8 <main+0x124>)
 8006af8:	f7fc fc88 	bl	800340c <HAL_I2C_IsDeviceReady>
 8006afc:	b938      	cbnz	r0, 8006b0e <main+0x4a>
		if (imu_begin() != INV_SUCCESS) {
 8006afe:	f7fa faa7 	bl	8001050 <imu_begin>
 8006b02:	b100      	cbz	r0, 8006b06 <main+0x42>
 8006b04:	e7fe      	b.n	8006b04 <main+0x40>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle LED on if so
 8006b06:	2120      	movs	r1, #32
 8006b08:	4838      	ldr	r0, [pc, #224]	; (8006bec <main+0x128>)
 8006b0a:	f7fb ff71 	bl	80029f0 <HAL_GPIO_TogglePin>
	 imu_dmpBegin(DMP_FEATURE_6X_LP_QUAT | // Enable 6-axis quat
 8006b0e:	21c8      	movs	r1, #200	; 0xc8
 8006b10:	2030      	movs	r0, #48	; 0x30
 8006b12:	f7fa fc79 	bl	8001408 <imu_dmpBegin>
	imu_setSensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS); // Enable all sensors
 8006b16:	2079      	movs	r0, #121	; 0x79
 8006b18:	f7fa fa95 	bl	8001046 <imu_setSensors>
	imu_setGyroFSR(2000); // Set gyro to 2000 dps
 8006b1c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006b20:	f7fa fa4a 	bl	8000fb8 <imu_setGyroFSR>
	imu_setAccelFSR(2); // Set accel to +/-2g
 8006b24:	2002      	movs	r0, #2
 8006b26:	f7fa fa65 	bl	8000ff4 <imu_setAccelFSR>
	imu_setLPF(5); // Set LPF corner frequency to 5Hz
 8006b2a:	2005      	movs	r0, #5
 8006b2c:	f7fa fa28 	bl	8000f80 <imu_setLPF>
	imu_setSampleRate(1000); // Set sample rate to 10Hz
 8006b30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b34:	f7fa fa28 	bl	8000f88 <imu_setSampleRate>
	imu_setCompassSampleRate(100); // Set mag rate to 10Hz
 8006b38:	2064      	movs	r0, #100	; 0x64
 8006b3a:	f7fa fa29 	bl	8000f90 <imu_setCompassSampleRate>
	DWT_Init(); //Enable some of the MCUs special registers so we can get microsecond (us) delays
 8006b3e:	f7fb fbef 	bl	8002320 <DWT_Init>
	NRF24_begin(GPIOB, nrf_CSN_PIN, nrf_CE_PIN, hspi2);
 8006b42:	4c2b      	ldr	r4, [pc, #172]	; (8006bf0 <main+0x12c>)
 8006b44:	2254      	movs	r2, #84	; 0x54
 8006b46:	1d21      	adds	r1, r4, #4
 8006b48:	4668      	mov	r0, sp
 8006b4a:	f000 fd1a 	bl	8007582 <memcpy>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b58:	4826      	ldr	r0, [pc, #152]	; (8006bf4 <main+0x130>)
 8006b5a:	f7fb f9eb 	bl	8001f34 <NRF24_begin>
	nrf24_DebugUART_Init(huart6);
 8006b5e:	4e26      	ldr	r6, [pc, #152]	; (8006bf8 <main+0x134>)
 8006b60:	466c      	mov	r4, sp
 8006b62:	f106 0510 	add.w	r5, r6, #16
 8006b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b6e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006b72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006b76:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006b7a:	f7fb faad 	bl	80020d8 <nrf24_DebugUART_Init>
	NRF24_enableAckPayload();
 8006b7e:	f7fa fec5 	bl	800190c <NRF24_enableAckPayload>
	NRF24_setAutoAck(true);
 8006b82:	2001      	movs	r0, #1
 8006b84:	f7fa fe03 	bl	800178e <NRF24_setAutoAck>
	NRF24_openReadingPipe(1, TxpipeAddrs);
 8006b88:	4b1c      	ldr	r3, [pc, #112]	; (8006bfc <main+0x138>)
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	2001      	movs	r0, #1
 8006b90:	f7fa fd5c 	bl	800164c <NRF24_openReadingPipe>
	NRF24_startListening();
 8006b94:	f7fa fd38 	bl	8001608 <NRF24_startListening>
	printRadioSettings();
 8006b98:	f7fa fedc 	bl	8001954 <printRadioSettings>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8006b9c:	4c18      	ldr	r4, [pc, #96]	; (8006c00 <main+0x13c>)
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f7fd fd53 	bl	800464c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8006ba6:	2104      	movs	r1, #4
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f7fd fd4f 	bl	800464c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8006bae:	2108      	movs	r1, #8
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f7fd fd4b 	bl	800464c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8006bb6:	210c      	movs	r1, #12
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f7fd fd47 	bl	800464c <HAL_TIM_PWM_Start>
	PWM1_Set(2500);
 8006bbe:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8006bc2:	f7ff ff67 	bl	8006a94 <PWM1_Set>
	PWM2_Set(2500);
 8006bc6:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8006bca:	f7ff ff69 	bl	8006aa0 <PWM2_Set>
	PWM3_Set(2500);
 8006bce:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8006bd2:	f7ff ff6b 	bl	8006aac <PWM3_Set>
	PWM4_Set(2500);
 8006bd6:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8006bda:	f7ff ff6d 	bl	8006ab8 <PWM4_Set>
		main_loop = 1;
 8006bde:	4b09      	ldr	r3, [pc, #36]	; (8006c04 <main+0x140>)
 8006be0:	2201      	movs	r2, #1
 8006be2:	701a      	strb	r2, [r3, #0]
 8006be4:	e7fb      	b.n	8006bde <main+0x11a>
 8006be6:	bf00      	nop
 8006be8:	200003c0 	.word	0x200003c0
 8006bec:	40020000 	.word	0x40020000
 8006bf0:	200004b8 	.word	0x200004b8
 8006bf4:	40020400 	.word	0x40020400
 8006bf8:	20000604 	.word	0x20000604
 8006bfc:	20000088 	.word	0x20000088
 8006c00:	20000510 	.word	0x20000510
 8006c04:	20000378 	.word	0x20000378

08006c08 <map>:

	}

}

float map(int x, int in_min, int in_max, int out_min, int out_max) {
 8006c08:	b410      	push	{r4}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8006c0a:	1a40      	subs	r0, r0, r1
 8006c0c:	9c01      	ldr	r4, [sp, #4]
 8006c0e:	1ae4      	subs	r4, r4, r3
 8006c10:	fb04 f000 	mul.w	r0, r4, r0
 8006c14:	1a52      	subs	r2, r2, r1
 8006c16:	fb90 f0f2 	sdiv	r0, r0, r2
 8006c1a:	18c3      	adds	r3, r0, r3
 8006c1c:	ee00 3a10 	vmov	s0, r3
}
 8006c20:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8006c24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c28:	4770      	bx	lr
	...

08006c2c <packAckPayData_0>:

}

//	Pack acknowledge payload data 0 - sent every control loop, which will be sent back to controller once drone has successfully
//	received a payload from it
void packAckPayData_0() {
 8006c2c:	b510      	push	{r4, lr}
 8006c2e:	ed2d 8b02 	vpush	{d8}

	//ID for packet 0
	AckPayload_0[0] = 0x00;
 8006c32:	4c1b      	ldr	r4, [pc, #108]	; (8006ca0 <packAckPayData_0+0x74>)
 8006c34:	2300      	movs	r3, #0
 8006c36:	7023      	strb	r3, [r4, #0]

	//Next 2 bytes = Battery level
	AckPayload_0[1] = batteryLevel;
 8006c38:	4b1a      	ldr	r3, [pc, #104]	; (8006ca4 <packAckPayData_0+0x78>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	7063      	strb	r3, [r4, #1]
	AckPayload_0[2] = batteryLevel >> 8;
 8006c3e:	0a1b      	lsrs	r3, r3, #8
 8006c40:	70a3      	strb	r3, [r4, #2]

	//Next 4 bytes = IMU Roll
	int16_t roll_tx = round(imu_roll * 100);
 8006c42:	4b19      	ldr	r3, [pc, #100]	; (8006ca8 <packAckPayData_0+0x7c>)
 8006c44:	edd3 7a00 	vldr	s15, [r3]
 8006c48:	ed9f 8a18 	vldr	s16, [pc, #96]	; 8006cac <packAckPayData_0+0x80>
 8006c4c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8006c50:	ee17 0a90 	vmov	r0, s15
 8006c54:	f7f9 fc28 	bl	80004a8 <__aeabi_f2d>
 8006c58:	ec41 0b10 	vmov	d0, r0, r1
 8006c5c:	f002 fcd6 	bl	800960c <round>
 8006c60:	ec51 0b10 	vmov	r0, r1, d0
 8006c64:	f7f9 ff12 	bl	8000a8c <__aeabi_d2iz>
 8006c68:	b200      	sxth	r0, r0
	AckPayload_0[3] = roll_tx;
 8006c6a:	70e0      	strb	r0, [r4, #3]
	AckPayload_0[4] = roll_tx >> 8;
 8006c6c:	1200      	asrs	r0, r0, #8
 8006c6e:	7120      	strb	r0, [r4, #4]
	int16_t pitch_tx = round(imu_pitch * 100);
	AckPayload_0[5] = pitch_tx;
	AckPayload_0[6] = pitch_tx >> 8;

	//Next  4 bytes = IMU Yaw
	int16_t yaw_tx = round(imu_yaw * 100);
 8006c70:	4b0f      	ldr	r3, [pc, #60]	; (8006cb0 <packAckPayData_0+0x84>)
 8006c72:	edd3 7a00 	vldr	s15, [r3]
 8006c76:	ee67 7a88 	vmul.f32	s15, s15, s16
 8006c7a:	ee17 0a90 	vmov	r0, s15
 8006c7e:	f7f9 fc13 	bl	80004a8 <__aeabi_f2d>
 8006c82:	ec41 0b10 	vmov	d0, r0, r1
 8006c86:	f002 fcc1 	bl	800960c <round>
 8006c8a:	ec51 0b10 	vmov	r0, r1, d0
 8006c8e:	f7f9 fefd 	bl	8000a8c <__aeabi_d2iz>
 8006c92:	b200      	sxth	r0, r0
	AckPayload_0[5] = yaw_tx;
 8006c94:	7160      	strb	r0, [r4, #5]
	AckPayload_0[6] = yaw_tx >> 8;
 8006c96:	1200      	asrs	r0, r0, #8
 8006c98:	71a0      	strb	r0, [r4, #6]

}
 8006c9a:	ecbd 8b02 	vpop	{d8}
 8006c9e:	bd10      	pop	{r4, pc}
 8006ca0:	20000598 	.word	0x20000598
 8006ca4:	20000360 	.word	0x20000360
 8006ca8:	200005fc 	.word	0x200005fc
 8006cac:	42c80000 	.word	0x42c80000
 8006cb0:	200004b4 	.word	0x200004b4

08006cb4 <packAckPayData_1>:

//	Pack acknowledge payload data 1 - sent every second
void packAckPayData_1() {

	//ID for packet 1
	AckPayload_1[0] = 0xFF;
 8006cb4:	4b01      	ldr	r3, [pc, #4]	; (8006cbc <packAckPayData_1+0x8>)
 8006cb6:	22ff      	movs	r2, #255	; 0xff
 8006cb8:	701a      	strb	r2, [r3, #0]
//	AckPayload_1[19] = temp[0];
//	AckPayload_1[20] = temp[1];
//	AckPayload_1[21] = temp[2];
//	AckPayload_1[22] = temp[3];

}
 8006cba:	4770      	bx	lr
 8006cbc:	20000060 	.word	0x20000060

08006cc0 <kill>:
}

/*
 *  Kill function disables PWM outputs, turning off motors
 */
void kill() {
 8006cc0:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8006cc2:	4c09      	ldr	r4, [pc, #36]	; (8006ce8 <kill+0x28>)
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f7fd fcde 	bl	8004688 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8006ccc:	2104      	movs	r1, #4
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f7fd fcda 	bl	8004688 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8006cd4:	2108      	movs	r1, #8
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	f7fd fcd6 	bl	8004688 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 8006cdc:	210c      	movs	r1, #12
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f7fd fcd2 	bl	8004688 <HAL_TIM_PWM_Stop>
}
 8006ce4:	bd10      	pop	{r4, pc}
 8006ce6:	bf00      	nop
 8006ce8:	20000510 	.word	0x20000510

08006cec <unpackRxData>:
void unpackRxData() {
 8006cec:	b508      	push	{r3, lr}
	L_Joystick_XPos = (RxData[0] & 0xFF) | (RxData[1] << 8);
 8006cee:	4b13      	ldr	r3, [pc, #76]	; (8006d3c <unpackRxData+0x50>)
 8006cf0:	781a      	ldrb	r2, [r3, #0]
 8006cf2:	7859      	ldrb	r1, [r3, #1]
 8006cf4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006cf8:	4911      	ldr	r1, [pc, #68]	; (8006d40 <unpackRxData+0x54>)
 8006cfa:	800a      	strh	r2, [r1, #0]
	L_Joystick_YPos = (RxData[2] & 0xFF) | (RxData[3] << 8);
 8006cfc:	789a      	ldrb	r2, [r3, #2]
 8006cfe:	78d9      	ldrb	r1, [r3, #3]
 8006d00:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006d04:	490f      	ldr	r1, [pc, #60]	; (8006d44 <unpackRxData+0x58>)
 8006d06:	800a      	strh	r2, [r1, #0]
	R_Joystick_XPos = (RxData[4] & 0xFF) | (RxData[5] << 8);
 8006d08:	791a      	ldrb	r2, [r3, #4]
 8006d0a:	7959      	ldrb	r1, [r3, #5]
 8006d0c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006d10:	490d      	ldr	r1, [pc, #52]	; (8006d48 <unpackRxData+0x5c>)
 8006d12:	800a      	strh	r2, [r1, #0]
	R_Joystick_YPos = (RxData[6] & 0xFF) | (RxData[7] << 8);
 8006d14:	799a      	ldrb	r2, [r3, #6]
 8006d16:	79d9      	ldrb	r1, [r3, #7]
 8006d18:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006d1c:	490b      	ldr	r1, [pc, #44]	; (8006d4c <unpackRxData+0x60>)
 8006d1e:	800a      	strh	r2, [r1, #0]
	airmode = (RxData[8] >> 0) & 1;
 8006d20:	7a1b      	ldrb	r3, [r3, #8]
 8006d22:	f003 0101 	and.w	r1, r3, #1
 8006d26:	4a0a      	ldr	r2, [pc, #40]	; (8006d50 <unpackRxData+0x64>)
 8006d28:	7011      	strb	r1, [r2, #0]
	kill_rx = (RxData[8] >> 1) & 1;
 8006d2a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006d2e:	4a09      	ldr	r2, [pc, #36]	; (8006d54 <unpackRxData+0x68>)
 8006d30:	7013      	strb	r3, [r2, #0]
	if (kill_rx) {
 8006d32:	b903      	cbnz	r3, 8006d36 <unpackRxData+0x4a>
}
 8006d34:	bd08      	pop	{r3, pc}
		kill();
 8006d36:	f7ff ffc3 	bl	8006cc0 <kill>
}
 8006d3a:	e7fb      	b.n	8006d34 <unpackRxData+0x48>
 8006d3c:	20000644 	.word	0x20000644
 8006d40:	2000035c 	.word	0x2000035c
 8006d44:	20000080 	.word	0x20000080
 8006d48:	200005f8 	.word	0x200005f8
 8006d4c:	200006a8 	.word	0x200006a8
 8006d50:	2000035e 	.word	0x2000035e
 8006d54:	20000374 	.word	0x20000374

08006d58 <lostConnection>:
/*
 *  In case connection to transmitter is lost, slowly power down motors
 *  in order to gently lower quadcopter as opposed to suddenly shutting them off
 *
 */
void lostConnection() {
 8006d58:	b508      	push	{r3, lr}

	airmode = 1;
 8006d5a:	4b0c      	ldr	r3, [pc, #48]	; (8006d8c <lostConnection+0x34>)
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	701a      	strb	r2, [r3, #0]

	//Reset joystick positions to centre
	roll_setpoint = 0;
 8006d60:	2300      	movs	r3, #0
 8006d62:	4a0b      	ldr	r2, [pc, #44]	; (8006d90 <lostConnection+0x38>)
 8006d64:	6013      	str	r3, [r2, #0]
	pitch_setpoint = 0;
 8006d66:	4a0b      	ldr	r2, [pc, #44]	; (8006d94 <lostConnection+0x3c>)
 8006d68:	6013      	str	r3, [r2, #0]

	//Decrease throttle down to min value
	if (throttle > ESC_MIN) {
 8006d6a:	4b0b      	ldr	r3, [pc, #44]	; (8006d98 <lostConnection+0x40>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006d72:	4293      	cmp	r3, r2
 8006d74:	dc02      	bgt.n	8006d7c <lostConnection+0x24>
		throttle--;
		NRF24_DelayMicroSeconds(5000);
	} else {
		//Then turn off motors fully to be sure
		kill();
 8006d76:	f7ff ffa3 	bl	8006cc0 <kill>
	}

}
 8006d7a:	bd08      	pop	{r3, pc}
		throttle--;
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	4a06      	ldr	r2, [pc, #24]	; (8006d98 <lostConnection+0x40>)
 8006d80:	6013      	str	r3, [r2, #0]
		NRF24_DelayMicroSeconds(5000);
 8006d82:	f241 3088 	movw	r0, #5000	; 0x1388
 8006d86:	f7fa fb81 	bl	800148c <NRF24_DelayMicroSeconds>
 8006d8a:	e7f6      	b.n	8006d7a <lostConnection+0x22>
 8006d8c:	2000035e 	.word	0x2000035e
 8006d90:	2000038c 	.word	0x2000038c
 8006d94:	20000388 	.word	0x20000388
 8006d98:	20000390 	.word	0x20000390

08006d9c <pulse_posedge_handler>:
	if (main_loop) {
 8006d9c:	4ba4      	ldr	r3, [pc, #656]	; (8007030 <pulse_posedge_handler+0x294>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	b903      	cbnz	r3, 8006da4 <pulse_posedge_handler+0x8>
 8006da2:	4770      	bx	lr
void pulse_posedge_handler() {
 8006da4:	b530      	push	{r4, r5, lr}
 8006da6:	b083      	sub	sp, #12
		packAckPayData_0();
 8006da8:	f7ff ff40 	bl	8006c2c <packAckPayData_0>
		if (loop_counter == CRTL_LOOP_FREQ - 1) {
 8006dac:	4ba1      	ldr	r3, [pc, #644]	; (8007034 <pulse_posedge_handler+0x298>)
 8006dae:	881b      	ldrh	r3, [r3, #0]
 8006db0:	f240 12f3 	movw	r2, #499	; 0x1f3
 8006db4:	4293      	cmp	r3, r2
 8006db6:	f000 80ba 	beq.w	8006f2e <pulse_posedge_handler+0x192>
			loop_counter++;
 8006dba:	3301      	adds	r3, #1
 8006dbc:	4a9d      	ldr	r2, [pc, #628]	; (8007034 <pulse_posedge_handler+0x298>)
 8006dbe:	8013      	strh	r3, [r2, #0]
		if (NRF24_available()) {
 8006dc0:	f7fa fd69 	bl	8001896 <NRF24_available>
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	f040 80b8 	bne.w	8006f3a <pulse_posedge_handler+0x19e>
			packetsLostCtr++;
 8006dca:	4a9b      	ldr	r2, [pc, #620]	; (8007038 <pulse_posedge_handler+0x29c>)
 8006dcc:	8813      	ldrh	r3, [r2, #0]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	8013      	strh	r3, [r2, #0]
		if (packetsLostCtr > 10) {
 8006dd2:	4b99      	ldr	r3, [pc, #612]	; (8007038 <pulse_posedge_handler+0x29c>)
 8006dd4:	881b      	ldrh	r3, [r3, #0]
 8006dd6:	2b0a      	cmp	r3, #10
 8006dd8:	f200 8110 	bhi.w	8006ffc <pulse_posedge_handler+0x260>
		  if ( imu_fifoAvailable() )
 8006ddc:	f7fa f918 	bl	8001010 <imu_fifoAvailable>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	f040 810e 	bne.w	8007002 <pulse_posedge_handler+0x266>
		imu_pitch = imu_get_pitch();
 8006de6:	f7fa f8bf 	bl	8000f68 <imu_get_pitch>
 8006dea:	4b94      	ldr	r3, [pc, #592]	; (800703c <pulse_posedge_handler+0x2a0>)
 8006dec:	ed83 0a00 	vstr	s0, [r3]
		imu_roll = imu_get_roll();
 8006df0:	f7fa f8b4 	bl	8000f5c <imu_get_roll>
 8006df4:	4b92      	ldr	r3, [pc, #584]	; (8007040 <pulse_posedge_handler+0x2a4>)
 8006df6:	ed83 0a00 	vstr	s0, [r3]
		imu_yaw = imu_get_yaw();
 8006dfa:	f7fa f8bb 	bl	8000f74 <imu_get_yaw>
 8006dfe:	4b91      	ldr	r3, [pc, #580]	; (8007044 <pulse_posedge_handler+0x2a8>)
 8006e00:	ed83 0a00 	vstr	s0, [r3]
		if (airmode) {
 8006e04:	4b90      	ldr	r3, [pc, #576]	; (8007048 <pulse_posedge_handler+0x2ac>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 8103 	beq.w	8007014 <pulse_posedge_handler+0x278>
			pid_output_pitch = pid_calculate_pitch(imu_pitch, 0,
 8006e0e:	4b8f      	ldr	r3, [pc, #572]	; (800704c <pulse_posedge_handler+0x2b0>)
 8006e10:	edd3 0a00 	vldr	s1, [r3]
 8006e14:	2000      	movs	r0, #0
 8006e16:	4b89      	ldr	r3, [pc, #548]	; (800703c <pulse_posedge_handler+0x2a0>)
 8006e18:	ed93 0a00 	vldr	s0, [r3]
 8006e1c:	f7fb f9f0 	bl	8002200 <pid_calculate_pitch>
 8006e20:	4b8b      	ldr	r3, [pc, #556]	; (8007050 <pulse_posedge_handler+0x2b4>)
 8006e22:	ed83 0a00 	vstr	s0, [r3]
			pid_output_roll = pid_calculate_roll(imu_roll, 0, roll_setpoint);
 8006e26:	4b8b      	ldr	r3, [pc, #556]	; (8007054 <pulse_posedge_handler+0x2b8>)
 8006e28:	edd3 0a00 	vldr	s1, [r3]
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	4b84      	ldr	r3, [pc, #528]	; (8007040 <pulse_posedge_handler+0x2a4>)
 8006e30:	ed93 0a00 	vldr	s0, [r3]
 8006e34:	f7fb f966 	bl	8002104 <pid_calculate_roll>
 8006e38:	4b87      	ldr	r3, [pc, #540]	; (8007058 <pulse_posedge_handler+0x2bc>)
 8006e3a:	ed83 0a00 	vstr	s0, [r3]
		esc1_total = throttle - (int) pid_output_roll - (int) pid_output_pitch;
 8006e3e:	4b87      	ldr	r3, [pc, #540]	; (800705c <pulse_posedge_handler+0x2c0>)
 8006e40:	6818      	ldr	r0, [r3, #0]
 8006e42:	4b85      	ldr	r3, [pc, #532]	; (8007058 <pulse_posedge_handler+0x2bc>)
 8006e44:	edd3 7a00 	vldr	s15, [r3]
 8006e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e4c:	ee17 1a90 	vmov	r1, s15
 8006e50:	1a42      	subs	r2, r0, r1
 8006e52:	4b7f      	ldr	r3, [pc, #508]	; (8007050 <pulse_posedge_handler+0x2b4>)
 8006e54:	edd3 7a00 	vldr	s15, [r3]
 8006e58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e5c:	ee17 3a90 	vmov	r3, s15
 8006e60:	1ad4      	subs	r4, r2, r3
 8006e62:	4d7f      	ldr	r5, [pc, #508]	; (8007060 <pulse_posedge_handler+0x2c4>)
 8006e64:	602c      	str	r4, [r5, #0]
		esc2_total = throttle - (int) pid_output_roll + (int) pid_output_pitch;
 8006e66:	441a      	add	r2, r3
 8006e68:	4d7e      	ldr	r5, [pc, #504]	; (8007064 <pulse_posedge_handler+0x2c8>)
 8006e6a:	602a      	str	r2, [r5, #0]
		esc3_total = (throttle) + (int) pid_output_roll
 8006e6c:	4401      	add	r1, r0
				- (int) pid_output_pitch;
 8006e6e:	1ac8      	subs	r0, r1, r3
		esc3_total = (throttle) + (int) pid_output_roll
 8006e70:	4d7d      	ldr	r5, [pc, #500]	; (8007068 <pulse_posedge_handler+0x2cc>)
 8006e72:	6028      	str	r0, [r5, #0]
				+ (int) pid_output_pitch;
 8006e74:	440b      	add	r3, r1
		esc4_total = (throttle) + (int) pid_output_roll
 8006e76:	497d      	ldr	r1, [pc, #500]	; (800706c <pulse_posedge_handler+0x2d0>)
 8006e78:	600b      	str	r3, [r1, #0]
		if (esc1_total < ESC_MIN) {
 8006e7a:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8006e7e:	428c      	cmp	r4, r1
 8006e80:	dc03      	bgt.n	8006e8a <pulse_posedge_handler+0xee>
			esc1_total = ESC_MIN;
 8006e82:	4977      	ldr	r1, [pc, #476]	; (8007060 <pulse_posedge_handler+0x2c4>)
 8006e84:	f240 44e2 	movw	r4, #1250	; 0x4e2
 8006e88:	600c      	str	r4, [r1, #0]
		if (esc1_total > ESC_MAX) {
 8006e8a:	4975      	ldr	r1, [pc, #468]	; (8007060 <pulse_posedge_handler+0x2c4>)
 8006e8c:	680c      	ldr	r4, [r1, #0]
 8006e8e:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8006e92:	428c      	cmp	r4, r1
 8006e94:	dd03      	ble.n	8006e9e <pulse_posedge_handler+0x102>
			esc1_total = ESC_MAX;
 8006e96:	4972      	ldr	r1, [pc, #456]	; (8007060 <pulse_posedge_handler+0x2c4>)
 8006e98:	f640 14c4 	movw	r4, #2500	; 0x9c4
 8006e9c:	600c      	str	r4, [r1, #0]
		if (esc2_total < ESC_MIN) {
 8006e9e:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8006ea2:	428a      	cmp	r2, r1
 8006ea4:	dc03      	bgt.n	8006eae <pulse_posedge_handler+0x112>
			esc2_total = ESC_MIN;
 8006ea6:	4a6f      	ldr	r2, [pc, #444]	; (8007064 <pulse_posedge_handler+0x2c8>)
 8006ea8:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8006eac:	6011      	str	r1, [r2, #0]
		if (esc2_total > ESC_MAX) {
 8006eae:	4a6d      	ldr	r2, [pc, #436]	; (8007064 <pulse_posedge_handler+0x2c8>)
 8006eb0:	6811      	ldr	r1, [r2, #0]
 8006eb2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006eb6:	4291      	cmp	r1, r2
 8006eb8:	dd03      	ble.n	8006ec2 <pulse_posedge_handler+0x126>
			esc2_total = ESC_MAX;
 8006eba:	4a6a      	ldr	r2, [pc, #424]	; (8007064 <pulse_posedge_handler+0x2c8>)
 8006ebc:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8006ec0:	6011      	str	r1, [r2, #0]
		if (esc3_total < ESC_MIN) {
 8006ec2:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8006ec6:	4290      	cmp	r0, r2
 8006ec8:	dc03      	bgt.n	8006ed2 <pulse_posedge_handler+0x136>
			esc3_total = ESC_MIN;
 8006eca:	4a67      	ldr	r2, [pc, #412]	; (8007068 <pulse_posedge_handler+0x2cc>)
 8006ecc:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8006ed0:	6011      	str	r1, [r2, #0]
		if (esc3_total > ESC_MAX) {
 8006ed2:	4a65      	ldr	r2, [pc, #404]	; (8007068 <pulse_posedge_handler+0x2cc>)
 8006ed4:	6811      	ldr	r1, [r2, #0]
 8006ed6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006eda:	4291      	cmp	r1, r2
 8006edc:	dd03      	ble.n	8006ee6 <pulse_posedge_handler+0x14a>
			esc3_total = ESC_MAX;
 8006ede:	4a62      	ldr	r2, [pc, #392]	; (8007068 <pulse_posedge_handler+0x2cc>)
 8006ee0:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8006ee4:	6011      	str	r1, [r2, #0]
		if (esc4_total < ESC_MIN) {
 8006ee6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8006eea:	4293      	cmp	r3, r2
 8006eec:	dc03      	bgt.n	8006ef6 <pulse_posedge_handler+0x15a>
			esc4_total = ESC_MIN;
 8006eee:	4b5f      	ldr	r3, [pc, #380]	; (800706c <pulse_posedge_handler+0x2d0>)
 8006ef0:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006ef4:	601a      	str	r2, [r3, #0]
		if (esc4_total > ESC_MAX) {
 8006ef6:	4b5d      	ldr	r3, [pc, #372]	; (800706c <pulse_posedge_handler+0x2d0>)
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8006efe:	429a      	cmp	r2, r3
 8006f00:	dd03      	ble.n	8006f0a <pulse_posedge_handler+0x16e>
			esc4_total = ESC_MAX;
 8006f02:	4b5a      	ldr	r3, [pc, #360]	; (800706c <pulse_posedge_handler+0x2d0>)
 8006f04:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006f08:	601a      	str	r2, [r3, #0]
		PWM1_Set(esc1_total); //PWM1 = Back left, CW
 8006f0a:	4b55      	ldr	r3, [pc, #340]	; (8007060 <pulse_posedge_handler+0x2c4>)
 8006f0c:	8818      	ldrh	r0, [r3, #0]
 8006f0e:	f7ff fdc1 	bl	8006a94 <PWM1_Set>
		PWM2_Set(esc2_total); //PWM2 = Front left, CCW
 8006f12:	4b54      	ldr	r3, [pc, #336]	; (8007064 <pulse_posedge_handler+0x2c8>)
 8006f14:	8818      	ldrh	r0, [r3, #0]
 8006f16:	f7ff fdc3 	bl	8006aa0 <PWM2_Set>
		PWM3_Set(esc3_total); //PWM3 = Back right, CCW
 8006f1a:	4b53      	ldr	r3, [pc, #332]	; (8007068 <pulse_posedge_handler+0x2cc>)
 8006f1c:	8818      	ldrh	r0, [r3, #0]
 8006f1e:	f7ff fdc5 	bl	8006aac <PWM3_Set>
		PWM4_Set(esc4_total); //PWM4 = Front right, CW
 8006f22:	4b52      	ldr	r3, [pc, #328]	; (800706c <pulse_posedge_handler+0x2d0>)
 8006f24:	8818      	ldrh	r0, [r3, #0]
 8006f26:	f7ff fdc7 	bl	8006ab8 <PWM4_Set>
}
 8006f2a:	b003      	add	sp, #12
 8006f2c:	bd30      	pop	{r4, r5, pc}
			packAckPayData_1();
 8006f2e:	f7ff fec1 	bl	8006cb4 <packAckPayData_1>
			loop_counter = 0;
 8006f32:	4b40      	ldr	r3, [pc, #256]	; (8007034 <pulse_posedge_handler+0x298>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	801a      	strh	r2, [r3, #0]
 8006f38:	e742      	b.n	8006dc0 <pulse_posedge_handler+0x24>
			NRF24_read(RxData, 32);
 8006f3a:	2120      	movs	r1, #32
 8006f3c:	484c      	ldr	r0, [pc, #304]	; (8007070 <pulse_posedge_handler+0x2d4>)
 8006f3e:	f7fa fc0a 	bl	8001756 <NRF24_read>
			packetsLostCtr = 0;
 8006f42:	4b3d      	ldr	r3, [pc, #244]	; (8007038 <pulse_posedge_handler+0x29c>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	801a      	strh	r2, [r3, #0]
			if (loop_counter == CRTL_LOOP_FREQ - 1) {
 8006f48:	4b3a      	ldr	r3, [pc, #232]	; (8007034 <pulse_posedge_handler+0x298>)
 8006f4a:	881a      	ldrh	r2, [r3, #0]
 8006f4c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d04d      	beq.n	8006ff0 <pulse_posedge_handler+0x254>
				NRF24_writeAckPayload(1, AckPayload_0, 32);
 8006f54:	2220      	movs	r2, #32
 8006f56:	4947      	ldr	r1, [pc, #284]	; (8007074 <pulse_posedge_handler+0x2d8>)
 8006f58:	2001      	movs	r0, #1
 8006f5a:	f7fa fca1 	bl	80018a0 <NRF24_writeAckPayload>
			unpackRxData();
 8006f5e:	f7ff fec5 	bl	8006cec <unpackRxData>
			throttle = map(L_Joystick_YPos, 850, 3300, ESC_MIN, ESC_MAX);
 8006f62:	4b45      	ldr	r3, [pc, #276]	; (8007078 <pulse_posedge_handler+0x2dc>)
 8006f64:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006f68:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8006f72:	f640 42e4 	movw	r2, #3300	; 0xce4
 8006f76:	f240 3152 	movw	r1, #850	; 0x352
 8006f7a:	f7ff fe45 	bl	8006c08 <map>
 8006f7e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006f82:	ee17 3a90 	vmov	r3, s15
 8006f86:	4a35      	ldr	r2, [pc, #212]	; (800705c <pulse_posedge_handler+0x2c0>)
 8006f88:	edc2 7a00 	vstr	s15, [r2]
			if (throttle < ESC_MIN + 200) {
 8006f8c:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8006f90:	4293      	cmp	r3, r2
 8006f92:	dc03      	bgt.n	8006f9c <pulse_posedge_handler+0x200>
				throttle = ESC_MIN;
 8006f94:	4b31      	ldr	r3, [pc, #196]	; (800705c <pulse_posedge_handler+0x2c0>)
 8006f96:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006f9a:	601a      	str	r2, [r3, #0]
			if (throttle > ESC_MAX - 200) {
 8006f9c:	4b2f      	ldr	r3, [pc, #188]	; (800705c <pulse_posedge_handler+0x2c0>)
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	dd03      	ble.n	8006fb0 <pulse_posedge_handler+0x214>
				throttle = ESC_MAX;
 8006fa8:	4b2c      	ldr	r3, [pc, #176]	; (800705c <pulse_posedge_handler+0x2c0>)
 8006faa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006fae:	601a      	str	r2, [r3, #0]
			roll_setpoint = map(R_Joystick_XPos, 340, 3960, -MAX_ANGLE, MAX_ANGLE);
 8006fb0:	4b32      	ldr	r3, [pc, #200]	; (800707c <pulse_posedge_handler+0x2e0>)
 8006fb2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006fb6:	2414      	movs	r4, #20
 8006fb8:	9400      	str	r4, [sp, #0]
 8006fba:	f06f 0313 	mvn.w	r3, #19
 8006fbe:	f640 7278 	movw	r2, #3960	; 0xf78
 8006fc2:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8006fc6:	f7ff fe1f 	bl	8006c08 <map>
 8006fca:	4b22      	ldr	r3, [pc, #136]	; (8007054 <pulse_posedge_handler+0x2b8>)
 8006fcc:	ed83 0a00 	vstr	s0, [r3]
			pitch_setpoint = map(R_Joystick_YPos, 350, 4000, -MAX_ANGLE, MAX_ANGLE);
 8006fd0:	4b2b      	ldr	r3, [pc, #172]	; (8007080 <pulse_posedge_handler+0x2e4>)
 8006fd2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006fd6:	9400      	str	r4, [sp, #0]
 8006fd8:	f06f 0313 	mvn.w	r3, #19
 8006fdc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8006fe0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8006fe4:	f7ff fe10 	bl	8006c08 <map>
 8006fe8:	4b18      	ldr	r3, [pc, #96]	; (800704c <pulse_posedge_handler+0x2b0>)
 8006fea:	ed83 0a00 	vstr	s0, [r3]
 8006fee:	e6f0      	b.n	8006dd2 <pulse_posedge_handler+0x36>
				NRF24_writeAckPayload(1, AckPayload_1, 32);
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	4924      	ldr	r1, [pc, #144]	; (8007084 <pulse_posedge_handler+0x2e8>)
 8006ff4:	2001      	movs	r0, #1
 8006ff6:	f7fa fc53 	bl	80018a0 <NRF24_writeAckPayload>
 8006ffa:	e7b0      	b.n	8006f5e <pulse_posedge_handler+0x1c2>
			lostConnection();
 8006ffc:	f7ff feac 	bl	8006d58 <lostConnection>
 8007000:	e6ec      	b.n	8006ddc <pulse_posedge_handler+0x40>
		    if ( imu_dmpUpdateFifo() == INV_SUCCESS)
 8007002:	f7fa f84d 	bl	80010a0 <imu_dmpUpdateFifo>
 8007006:	2800      	cmp	r0, #0
 8007008:	f47f aeed 	bne.w	8006de6 <pulse_posedge_handler+0x4a>
		      imu_computeEulerAngles(1);
 800700c:	2001      	movs	r0, #1
 800700e:	f7fa f8d7 	bl	80011c0 <imu_computeEulerAngles>
 8007012:	e6e8      	b.n	8006de6 <pulse_posedge_handler+0x4a>
			pid_output_roll = 0;
 8007014:	2300      	movs	r3, #0
 8007016:	4a10      	ldr	r2, [pc, #64]	; (8007058 <pulse_posedge_handler+0x2bc>)
 8007018:	6013      	str	r3, [r2, #0]
			pid_output_pitch = 0;
 800701a:	4a0d      	ldr	r2, [pc, #52]	; (8007050 <pulse_posedge_handler+0x2b4>)
 800701c:	6013      	str	r3, [r2, #0]
			pid_output_yaw = 0;
 800701e:	4a1a      	ldr	r2, [pc, #104]	; (8007088 <pulse_posedge_handler+0x2ec>)
 8007020:	6013      	str	r3, [r2, #0]
			reset_pid_roll();
 8007022:	f7fb f8db 	bl	80021dc <reset_pid_roll>
			reset_pid_pitch();
 8007026:	f7fb f957 	bl	80022d8 <reset_pid_pitch>
			reset_pid_yaw();
 800702a:	f7fb f967 	bl	80022fc <reset_pid_yaw>
 800702e:	e706      	b.n	8006e3e <pulse_posedge_handler+0xa2>
 8007030:	20000378 	.word	0x20000378
 8007034:	20000376 	.word	0x20000376
 8007038:	2000037a 	.word	0x2000037a
 800703c:	20000600 	.word	0x20000600
 8007040:	200005fc 	.word	0x200005fc
 8007044:	200004b4 	.word	0x200004b4
 8007048:	2000035e 	.word	0x2000035e
 800704c:	20000388 	.word	0x20000388
 8007050:	2000037c 	.word	0x2000037c
 8007054:	2000038c 	.word	0x2000038c
 8007058:	20000380 	.word	0x20000380
 800705c:	20000390 	.word	0x20000390
 8007060:	20000364 	.word	0x20000364
 8007064:	20000368 	.word	0x20000368
 8007068:	2000036c 	.word	0x2000036c
 800706c:	20000370 	.word	0x20000370
 8007070:	20000644 	.word	0x20000644
 8007074:	20000598 	.word	0x20000598
 8007078:	20000080 	.word	0x20000080
 800707c:	200005f8 	.word	0x200005f8
 8007080:	200006a8 	.word	0x200006a8
 8007084:	20000060 	.word	0x20000060
 8007088:	20000384 	.word	0x20000384

0800708c <HAL_GPIO_EXTI_Callback>:
	if (GPIO_Pin == PWM_RE_INT_Pin && main_loop) {
 800708c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8007090:	d000      	beq.n	8007094 <HAL_GPIO_EXTI_Callback+0x8>
 8007092:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8007094:	b508      	push	{r3, lr}
	if (GPIO_Pin == PWM_RE_INT_Pin && main_loop) {
 8007096:	4b03      	ldr	r3, [pc, #12]	; (80070a4 <HAL_GPIO_EXTI_Callback+0x18>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	b903      	cbnz	r3, 800709e <HAL_GPIO_EXTI_Callback+0x12>
}
 800709c:	bd08      	pop	{r3, pc}
		pulse_posedge_handler();
 800709e:	f7ff fe7d 	bl	8006d9c <pulse_posedge_handler>
}
 80070a2:	e7fb      	b.n	800709c <HAL_GPIO_EXTI_Callback+0x10>
 80070a4:	20000378 	.word	0x20000378

080070a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80070a8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070aa:	2100      	movs	r1, #0
 80070ac:	9100      	str	r1, [sp, #0]
 80070ae:	4b0b      	ldr	r3, [pc, #44]	; (80070dc <HAL_MspInit+0x34>)
 80070b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070b6:	645a      	str	r2, [r3, #68]	; 0x44
 80070b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ba:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80070be:	9200      	str	r2, [sp, #0]
 80070c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80070c2:	9101      	str	r1, [sp, #4]
 80070c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80070ca:	641a      	str	r2, [r3, #64]	; 0x40
 80070cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070d2:	9301      	str	r3, [sp, #4]
 80070d4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80070d6:	b002      	add	sp, #8
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	40023800 	.word	0x40023800

080070e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80070e0:	b500      	push	{lr}
 80070e2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070e4:	2300      	movs	r3, #0
 80070e6:	9303      	str	r3, [sp, #12]
 80070e8:	9304      	str	r3, [sp, #16]
 80070ea:	9305      	str	r3, [sp, #20]
 80070ec:	9306      	str	r3, [sp, #24]
 80070ee:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 80070f0:	6802      	ldr	r2, [r0, #0]
 80070f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80070f6:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d002      	beq.n	8007104 <HAL_ADC_MspInit+0x24>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80070fe:	b009      	add	sp, #36	; 0x24
 8007100:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007104:	2100      	movs	r1, #0
 8007106:	9101      	str	r1, [sp, #4]
 8007108:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800710c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800710e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007112:	645a      	str	r2, [r3, #68]	; 0x44
 8007114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007116:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800711a:	9201      	str	r2, [sp, #4]
 800711c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800711e:	9102      	str	r1, [sp, #8]
 8007120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007122:	f042 0201 	orr.w	r2, r2, #1
 8007126:	631a      	str	r2, [r3, #48]	; 0x30
 8007128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	9302      	str	r3, [sp, #8]
 8007130:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007132:	2380      	movs	r3, #128	; 0x80
 8007134:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007136:	2303      	movs	r3, #3
 8007138:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800713a:	a903      	add	r1, sp, #12
 800713c:	4801      	ldr	r0, [pc, #4]	; (8007144 <HAL_ADC_MspInit+0x64>)
 800713e:	f7fb fb7f 	bl	8002840 <HAL_GPIO_Init>
}
 8007142:	e7dc      	b.n	80070fe <HAL_ADC_MspInit+0x1e>
 8007144:	40020000 	.word	0x40020000

08007148 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800714c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800714e:	2300      	movs	r3, #0
 8007150:	9303      	str	r3, [sp, #12]
 8007152:	9304      	str	r3, [sp, #16]
 8007154:	9305      	str	r3, [sp, #20]
 8007156:	9306      	str	r3, [sp, #24]
 8007158:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 800715a:	6802      	ldr	r2, [r0, #0]
 800715c:	4b1e      	ldr	r3, [pc, #120]	; (80071d8 <HAL_I2C_MspInit+0x90>)
 800715e:	429a      	cmp	r2, r3
 8007160:	d002      	beq.n	8007168 <HAL_I2C_MspInit+0x20>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007162:	b009      	add	sp, #36	; 0x24
 8007164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007168:	2500      	movs	r5, #0
 800716a:	9501      	str	r5, [sp, #4]
 800716c:	4c1b      	ldr	r4, [pc, #108]	; (80071dc <HAL_I2C_MspInit+0x94>)
 800716e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007170:	f043 0302 	orr.w	r3, r3, #2
 8007174:	6323      	str	r3, [r4, #48]	; 0x30
 8007176:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007178:	f003 0302 	and.w	r3, r3, #2
 800717c:	9301      	str	r3, [sp, #4]
 800717e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007184:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007186:	f04f 0912 	mov.w	r9, #18
 800718a:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800718e:	f04f 0801 	mov.w	r8, #1
 8007192:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007196:	2703      	movs	r7, #3
 8007198:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800719a:	2304      	movs	r3, #4
 800719c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800719e:	4e10      	ldr	r6, [pc, #64]	; (80071e0 <HAL_I2C_MspInit+0x98>)
 80071a0:	a903      	add	r1, sp, #12
 80071a2:	4630      	mov	r0, r6
 80071a4:	f7fb fb4c 	bl	8002840 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80071a8:	2308      	movs	r3, #8
 80071aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80071ac:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80071b0:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071b4:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80071b6:	2309      	movs	r3, #9
 80071b8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071ba:	a903      	add	r1, sp, #12
 80071bc:	4630      	mov	r0, r6
 80071be:	f7fb fb3f 	bl	8002840 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80071c2:	9502      	str	r5, [sp, #8]
 80071c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80071ca:	6423      	str	r3, [r4, #64]	; 0x40
 80071cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071d2:	9302      	str	r3, [sp, #8]
 80071d4:	9b02      	ldr	r3, [sp, #8]
}
 80071d6:	e7c4      	b.n	8007162 <HAL_I2C_MspInit+0x1a>
 80071d8:	40005800 	.word	0x40005800
 80071dc:	40023800 	.word	0x40023800
 80071e0:	40020400 	.word	0x40020400

080071e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80071e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071e6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071e8:	2300      	movs	r3, #0
 80071ea:	9303      	str	r3, [sp, #12]
 80071ec:	9304      	str	r3, [sp, #16]
 80071ee:	9305      	str	r3, [sp, #20]
 80071f0:	9306      	str	r3, [sp, #24]
 80071f2:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 80071f4:	6802      	ldr	r2, [r0, #0]
 80071f6:	4b1f      	ldr	r3, [pc, #124]	; (8007274 <HAL_SPI_MspInit+0x90>)
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d001      	beq.n	8007200 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80071fc:	b009      	add	sp, #36	; 0x24
 80071fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007200:	2400      	movs	r4, #0
 8007202:	9400      	str	r4, [sp, #0]
 8007204:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8007208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800720a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800720e:	641a      	str	r2, [r3, #64]	; 0x40
 8007210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007212:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007216:	9200      	str	r2, [sp, #0]
 8007218:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800721a:	9401      	str	r4, [sp, #4]
 800721c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800721e:	f042 0204 	orr.w	r2, r2, #4
 8007222:	631a      	str	r2, [r3, #48]	; 0x30
 8007224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007226:	f002 0204 	and.w	r2, r2, #4
 800722a:	9201      	str	r2, [sp, #4]
 800722c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800722e:	9402      	str	r4, [sp, #8]
 8007230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007232:	f042 0202 	orr.w	r2, r2, #2
 8007236:	631a      	str	r2, [r3, #48]	; 0x30
 8007238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	9302      	str	r3, [sp, #8]
 8007240:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007242:	2304      	movs	r3, #4
 8007244:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007246:	2702      	movs	r7, #2
 8007248:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800724a:	2603      	movs	r6, #3
 800724c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800724e:	2505      	movs	r5, #5
 8007250:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007252:	a903      	add	r1, sp, #12
 8007254:	4808      	ldr	r0, [pc, #32]	; (8007278 <HAL_SPI_MspInit+0x94>)
 8007256:	f7fb faf3 	bl	8002840 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800725a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800725e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007260:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007262:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007264:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007266:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007268:	a903      	add	r1, sp, #12
 800726a:	4804      	ldr	r0, [pc, #16]	; (800727c <HAL_SPI_MspInit+0x98>)
 800726c:	f7fb fae8 	bl	8002840 <HAL_GPIO_Init>
}
 8007270:	e7c4      	b.n	80071fc <HAL_SPI_MspInit+0x18>
 8007272:	bf00      	nop
 8007274:	40003800 	.word	0x40003800
 8007278:	40020800 	.word	0x40020800
 800727c:	40020400 	.word	0x40020400

08007280 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM4)
 8007280:	6802      	ldr	r2, [r0, #0]
 8007282:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <HAL_TIM_PWM_MspInit+0x28>)
 8007284:	429a      	cmp	r2, r3
 8007286:	d000      	beq.n	800728a <HAL_TIM_PWM_MspInit+0xa>
 8007288:	4770      	bx	lr
{
 800728a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800728c:	2300      	movs	r3, #0
 800728e:	9301      	str	r3, [sp, #4]
 8007290:	4b06      	ldr	r3, [pc, #24]	; (80072ac <HAL_TIM_PWM_MspInit+0x2c>)
 8007292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007294:	f042 0204 	orr.w	r2, r2, #4
 8007298:	641a      	str	r2, [r3, #64]	; 0x40
 800729a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729c:	f003 0304 	and.w	r3, r3, #4
 80072a0:	9301      	str	r3, [sp, #4]
 80072a2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80072a4:	b002      	add	sp, #8
 80072a6:	4770      	bx	lr
 80072a8:	40000800 	.word	0x40000800
 80072ac:	40023800 	.word	0x40023800

080072b0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 80072b0:	6802      	ldr	r2, [r0, #0]
 80072b2:	4b09      	ldr	r3, [pc, #36]	; (80072d8 <HAL_TIM_Base_MspInit+0x28>)
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d000      	beq.n	80072ba <HAL_TIM_Base_MspInit+0xa>
 80072b8:	4770      	bx	lr
{
 80072ba:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80072bc:	2300      	movs	r3, #0
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	4b06      	ldr	r3, [pc, #24]	; (80072dc <HAL_TIM_Base_MspInit+0x2c>)
 80072c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072c4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80072c8:	645a      	str	r2, [r3, #68]	; 0x44
 80072ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072d0:	9301      	str	r3, [sp, #4]
 80072d2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80072d4:	b002      	add	sp, #8
 80072d6:	4770      	bx	lr
 80072d8:	40014800 	.word	0x40014800
 80072dc:	40023800 	.word	0x40023800

080072e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80072e0:	b500      	push	{lr}
 80072e2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072e4:	2300      	movs	r3, #0
 80072e6:	9301      	str	r3, [sp, #4]
 80072e8:	9302      	str	r3, [sp, #8]
 80072ea:	9303      	str	r3, [sp, #12]
 80072ec:	9304      	str	r3, [sp, #16]
 80072ee:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 80072f0:	6802      	ldr	r2, [r0, #0]
 80072f2:	4b0e      	ldr	r3, [pc, #56]	; (800732c <HAL_TIM_MspPostInit+0x4c>)
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d002      	beq.n	80072fe <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80072f8:	b007      	add	sp, #28
 80072fa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072fe:	2300      	movs	r3, #0
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <HAL_TIM_MspPostInit+0x50>)
 8007304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007306:	f042 0202 	orr.w	r2, r2, #2
 800730a:	631a      	str	r2, [r3, #48]	; 0x30
 800730c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8007316:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800731a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800731c:	2302      	movs	r3, #2
 800731e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007320:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007322:	a901      	add	r1, sp, #4
 8007324:	4803      	ldr	r0, [pc, #12]	; (8007334 <HAL_TIM_MspPostInit+0x54>)
 8007326:	f7fb fa8b 	bl	8002840 <HAL_GPIO_Init>
}
 800732a:	e7e5      	b.n	80072f8 <HAL_TIM_MspPostInit+0x18>
 800732c:	40000800 	.word	0x40000800
 8007330:	40023800 	.word	0x40023800
 8007334:	40020400 	.word	0x40020400

08007338 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007338:	b500      	push	{lr}
 800733a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800733c:	2300      	movs	r3, #0
 800733e:	9305      	str	r3, [sp, #20]
 8007340:	9306      	str	r3, [sp, #24]
 8007342:	9307      	str	r3, [sp, #28]
 8007344:	9308      	str	r3, [sp, #32]
 8007346:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART2)
 8007348:	6803      	ldr	r3, [r0, #0]
 800734a:	4a29      	ldr	r2, [pc, #164]	; (80073f0 <HAL_UART_MspInit+0xb8>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d005      	beq.n	800735c <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8007350:	4a28      	ldr	r2, [pc, #160]	; (80073f4 <HAL_UART_MspInit+0xbc>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d027      	beq.n	80073a6 <HAL_UART_MspInit+0x6e>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8007356:	b00b      	add	sp, #44	; 0x2c
 8007358:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 800735c:	2100      	movs	r1, #0
 800735e:	9101      	str	r1, [sp, #4]
 8007360:	4b25      	ldr	r3, [pc, #148]	; (80073f8 <HAL_UART_MspInit+0xc0>)
 8007362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007364:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007368:	641a      	str	r2, [r3, #64]	; 0x40
 800736a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800736c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8007370:	9201      	str	r2, [sp, #4]
 8007372:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007374:	9102      	str	r1, [sp, #8]
 8007376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007378:	f042 0201 	orr.w	r2, r2, #1
 800737c:	631a      	str	r2, [r3, #48]	; 0x30
 800737e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	9302      	str	r3, [sp, #8]
 8007386:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007388:	230c      	movs	r3, #12
 800738a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800738c:	2302      	movs	r3, #2
 800738e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007390:	2301      	movs	r3, #1
 8007392:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007394:	2303      	movs	r3, #3
 8007396:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007398:	2307      	movs	r3, #7
 800739a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800739c:	a905      	add	r1, sp, #20
 800739e:	4817      	ldr	r0, [pc, #92]	; (80073fc <HAL_UART_MspInit+0xc4>)
 80073a0:	f7fb fa4e 	bl	8002840 <HAL_GPIO_Init>
 80073a4:	e7d7      	b.n	8007356 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART6_CLK_ENABLE();
 80073a6:	2100      	movs	r1, #0
 80073a8:	9103      	str	r1, [sp, #12]
 80073aa:	4b13      	ldr	r3, [pc, #76]	; (80073f8 <HAL_UART_MspInit+0xc0>)
 80073ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073ae:	f042 0220 	orr.w	r2, r2, #32
 80073b2:	645a      	str	r2, [r3, #68]	; 0x44
 80073b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073b6:	f002 0220 	and.w	r2, r2, #32
 80073ba:	9203      	str	r2, [sp, #12]
 80073bc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073be:	9104      	str	r1, [sp, #16]
 80073c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073c2:	f042 0204 	orr.w	r2, r2, #4
 80073c6:	631a      	str	r2, [r3, #48]	; 0x30
 80073c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ca:	f003 0304 	and.w	r3, r3, #4
 80073ce:	9304      	str	r3, [sp, #16]
 80073d0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80073d2:	23c0      	movs	r3, #192	; 0xc0
 80073d4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073d6:	2302      	movs	r3, #2
 80073d8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80073da:	2301      	movs	r3, #1
 80073dc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073de:	2303      	movs	r3, #3
 80073e0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80073e2:	2308      	movs	r3, #8
 80073e4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073e6:	a905      	add	r1, sp, #20
 80073e8:	4805      	ldr	r0, [pc, #20]	; (8007400 <HAL_UART_MspInit+0xc8>)
 80073ea:	f7fb fa29 	bl	8002840 <HAL_GPIO_Init>
}
 80073ee:	e7b2      	b.n	8007356 <HAL_UART_MspInit+0x1e>
 80073f0:	40004400 	.word	0x40004400
 80073f4:	40011400 	.word	0x40011400
 80073f8:	40023800 	.word	0x40023800
 80073fc:	40020000 	.word	0x40020000
 8007400:	40020800 	.word	0x40020800

08007404 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007404:	4770      	bx	lr

08007406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007406:	e7fe      	b.n	8007406 <HardFault_Handler>

08007408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007408:	e7fe      	b.n	8007408 <MemManage_Handler>

0800740a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800740a:	e7fe      	b.n	800740a <BusFault_Handler>

0800740c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800740c:	e7fe      	b.n	800740c <UsageFault_Handler>

0800740e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800740e:	4770      	bx	lr

08007410 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007410:	4770      	bx	lr

08007412 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007412:	4770      	bx	lr

08007414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007414:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007416:	f7fa ffeb 	bl	80023f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800741a:	bd08      	pop	{r3, pc}

0800741c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800741c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800741e:	2010      	movs	r0, #16
 8007420:	f7fb faf0 	bl	8002a04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8007424:	bd08      	pop	{r3, pc}

08007426 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007426:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8007428:	f44f 7080 	mov.w	r0, #256	; 0x100
 800742c:	f7fb faea 	bl	8002a04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007430:	bd08      	pop	{r3, pc}
	...

08007434 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007434:	b508      	push	{r3, lr}
 8007436:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007438:	4a0b      	ldr	r2, [pc, #44]	; (8007468 <_sbrk+0x34>)
 800743a:	6812      	ldr	r2, [r2, #0]
 800743c:	b142      	cbz	r2, 8007450 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800743e:	4a0a      	ldr	r2, [pc, #40]	; (8007468 <_sbrk+0x34>)
 8007440:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8007442:	4403      	add	r3, r0
 8007444:	466a      	mov	r2, sp
 8007446:	4293      	cmp	r3, r2
 8007448:	d806      	bhi.n	8007458 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800744a:	4a07      	ldr	r2, [pc, #28]	; (8007468 <_sbrk+0x34>)
 800744c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800744e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8007450:	4a05      	ldr	r2, [pc, #20]	; (8007468 <_sbrk+0x34>)
 8007452:	4906      	ldr	r1, [pc, #24]	; (800746c <_sbrk+0x38>)
 8007454:	6011      	str	r1, [r2, #0]
 8007456:	e7f2      	b.n	800743e <_sbrk+0xa>
		errno = ENOMEM;
 8007458:	f000 f85a 	bl	8007510 <__errno>
 800745c:	230c      	movs	r3, #12
 800745e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007464:	e7f3      	b.n	800744e <_sbrk+0x1a>
 8007466:	bf00      	nop
 8007468:	20000394 	.word	0x20000394
 800746c:	200006b0 	.word	0x200006b0

08007470 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007470:	490f      	ldr	r1, [pc, #60]	; (80074b0 <SystemInit+0x40>)
 8007472:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007476:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800747a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800747e:	4b0d      	ldr	r3, [pc, #52]	; (80074b4 <SystemInit+0x44>)
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	f042 0201 	orr.w	r2, r2, #1
 8007486:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007488:	2000      	movs	r0, #0
 800748a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8007492:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007496:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007498:	4a07      	ldr	r2, [pc, #28]	; (80074b8 <SystemInit+0x48>)
 800749a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80074a2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80074a4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80074a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074aa:	608b      	str	r3, [r1, #8]
#endif
}
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	e000ed00 	.word	0xe000ed00
 80074b4:	40023800 	.word	0x40023800
 80074b8:	24003010 	.word	0x24003010

080074bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80074bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80074f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80074c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80074c2:	e003      	b.n	80074cc <LoopCopyDataInit>

080074c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80074c4:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80074c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80074c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80074ca:	3104      	adds	r1, #4

080074cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80074cc:	480b      	ldr	r0, [pc, #44]	; (80074fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80074ce:	4b0c      	ldr	r3, [pc, #48]	; (8007500 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80074d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80074d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80074d4:	d3f6      	bcc.n	80074c4 <CopyDataInit>
  ldr  r2, =_sbss
 80074d6:	4a0b      	ldr	r2, [pc, #44]	; (8007504 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80074d8:	e002      	b.n	80074e0 <LoopFillZerobss>

080074da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80074da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80074dc:	f842 3b04 	str.w	r3, [r2], #4

080074e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80074e0:	4b09      	ldr	r3, [pc, #36]	; (8007508 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80074e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80074e4:	d3f9      	bcc.n	80074da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80074e6:	f7ff ffc3 	bl	8007470 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80074ea:	f000 f817 	bl	800751c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80074ee:	f7ff fae9 	bl	8006ac4 <main>
  bx  lr    
 80074f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80074f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80074f8:	0800b660 	.word	0x0800b660
  ldr  r0, =_sdata
 80074fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007500:	20000268 	.word	0x20000268
  ldr  r2, =_sbss
 8007504:	20000268 	.word	0x20000268
  ldr  r3, = _ebss
 8007508:	200006b0 	.word	0x200006b0

0800750c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800750c:	e7fe      	b.n	800750c <ADC_IRQHandler>
	...

08007510 <__errno>:
 8007510:	4b01      	ldr	r3, [pc, #4]	; (8007518 <__errno+0x8>)
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	20000094 	.word	0x20000094

0800751c <__libc_init_array>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	4e0d      	ldr	r6, [pc, #52]	; (8007554 <__libc_init_array+0x38>)
 8007520:	4c0d      	ldr	r4, [pc, #52]	; (8007558 <__libc_init_array+0x3c>)
 8007522:	1ba4      	subs	r4, r4, r6
 8007524:	10a4      	asrs	r4, r4, #2
 8007526:	2500      	movs	r5, #0
 8007528:	42a5      	cmp	r5, r4
 800752a:	d109      	bne.n	8007540 <__libc_init_array+0x24>
 800752c:	4e0b      	ldr	r6, [pc, #44]	; (800755c <__libc_init_array+0x40>)
 800752e:	4c0c      	ldr	r4, [pc, #48]	; (8007560 <__libc_init_array+0x44>)
 8007530:	f002 fe66 	bl	800a200 <_init>
 8007534:	1ba4      	subs	r4, r4, r6
 8007536:	10a4      	asrs	r4, r4, #2
 8007538:	2500      	movs	r5, #0
 800753a:	42a5      	cmp	r5, r4
 800753c:	d105      	bne.n	800754a <__libc_init_array+0x2e>
 800753e:	bd70      	pop	{r4, r5, r6, pc}
 8007540:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007544:	4798      	blx	r3
 8007546:	3501      	adds	r5, #1
 8007548:	e7ee      	b.n	8007528 <__libc_init_array+0xc>
 800754a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800754e:	4798      	blx	r3
 8007550:	3501      	adds	r5, #1
 8007552:	e7f2      	b.n	800753a <__libc_init_array+0x1e>
 8007554:	0800b658 	.word	0x0800b658
 8007558:	0800b658 	.word	0x0800b658
 800755c:	0800b658 	.word	0x0800b658
 8007560:	0800b65c 	.word	0x0800b65c

08007564 <memcmp>:
 8007564:	b530      	push	{r4, r5, lr}
 8007566:	2400      	movs	r4, #0
 8007568:	42a2      	cmp	r2, r4
 800756a:	d101      	bne.n	8007570 <memcmp+0xc>
 800756c:	2000      	movs	r0, #0
 800756e:	e007      	b.n	8007580 <memcmp+0x1c>
 8007570:	5d03      	ldrb	r3, [r0, r4]
 8007572:	3401      	adds	r4, #1
 8007574:	190d      	adds	r5, r1, r4
 8007576:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800757a:	42ab      	cmp	r3, r5
 800757c:	d0f4      	beq.n	8007568 <memcmp+0x4>
 800757e:	1b58      	subs	r0, r3, r5
 8007580:	bd30      	pop	{r4, r5, pc}

08007582 <memcpy>:
 8007582:	b510      	push	{r4, lr}
 8007584:	1e43      	subs	r3, r0, #1
 8007586:	440a      	add	r2, r1
 8007588:	4291      	cmp	r1, r2
 800758a:	d100      	bne.n	800758e <memcpy+0xc>
 800758c:	bd10      	pop	{r4, pc}
 800758e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007592:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007596:	e7f7      	b.n	8007588 <memcpy+0x6>

08007598 <memset>:
 8007598:	4402      	add	r2, r0
 800759a:	4603      	mov	r3, r0
 800759c:	4293      	cmp	r3, r2
 800759e:	d100      	bne.n	80075a2 <memset+0xa>
 80075a0:	4770      	bx	lr
 80075a2:	f803 1b01 	strb.w	r1, [r3], #1
 80075a6:	e7f9      	b.n	800759c <memset+0x4>

080075a8 <__cvt>:
 80075a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075ac:	ec55 4b10 	vmov	r4, r5, d0
 80075b0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80075b2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80075b6:	2d00      	cmp	r5, #0
 80075b8:	460e      	mov	r6, r1
 80075ba:	4691      	mov	r9, r2
 80075bc:	4619      	mov	r1, r3
 80075be:	bfb8      	it	lt
 80075c0:	4622      	movlt	r2, r4
 80075c2:	462b      	mov	r3, r5
 80075c4:	f027 0720 	bic.w	r7, r7, #32
 80075c8:	bfbb      	ittet	lt
 80075ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80075ce:	461d      	movlt	r5, r3
 80075d0:	2300      	movge	r3, #0
 80075d2:	232d      	movlt	r3, #45	; 0x2d
 80075d4:	bfb8      	it	lt
 80075d6:	4614      	movlt	r4, r2
 80075d8:	2f46      	cmp	r7, #70	; 0x46
 80075da:	700b      	strb	r3, [r1, #0]
 80075dc:	d004      	beq.n	80075e8 <__cvt+0x40>
 80075de:	2f45      	cmp	r7, #69	; 0x45
 80075e0:	d100      	bne.n	80075e4 <__cvt+0x3c>
 80075e2:	3601      	adds	r6, #1
 80075e4:	2102      	movs	r1, #2
 80075e6:	e000      	b.n	80075ea <__cvt+0x42>
 80075e8:	2103      	movs	r1, #3
 80075ea:	ab03      	add	r3, sp, #12
 80075ec:	9301      	str	r3, [sp, #4]
 80075ee:	ab02      	add	r3, sp, #8
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	4632      	mov	r2, r6
 80075f4:	4653      	mov	r3, sl
 80075f6:	ec45 4b10 	vmov	d0, r4, r5
 80075fa:	f000 fcdd 	bl	8007fb8 <_dtoa_r>
 80075fe:	2f47      	cmp	r7, #71	; 0x47
 8007600:	4680      	mov	r8, r0
 8007602:	d102      	bne.n	800760a <__cvt+0x62>
 8007604:	f019 0f01 	tst.w	r9, #1
 8007608:	d026      	beq.n	8007658 <__cvt+0xb0>
 800760a:	2f46      	cmp	r7, #70	; 0x46
 800760c:	eb08 0906 	add.w	r9, r8, r6
 8007610:	d111      	bne.n	8007636 <__cvt+0x8e>
 8007612:	f898 3000 	ldrb.w	r3, [r8]
 8007616:	2b30      	cmp	r3, #48	; 0x30
 8007618:	d10a      	bne.n	8007630 <__cvt+0x88>
 800761a:	2200      	movs	r2, #0
 800761c:	2300      	movs	r3, #0
 800761e:	4620      	mov	r0, r4
 8007620:	4629      	mov	r1, r5
 8007622:	f7f9 fa01 	bl	8000a28 <__aeabi_dcmpeq>
 8007626:	b918      	cbnz	r0, 8007630 <__cvt+0x88>
 8007628:	f1c6 0601 	rsb	r6, r6, #1
 800762c:	f8ca 6000 	str.w	r6, [sl]
 8007630:	f8da 3000 	ldr.w	r3, [sl]
 8007634:	4499      	add	r9, r3
 8007636:	2200      	movs	r2, #0
 8007638:	2300      	movs	r3, #0
 800763a:	4620      	mov	r0, r4
 800763c:	4629      	mov	r1, r5
 800763e:	f7f9 f9f3 	bl	8000a28 <__aeabi_dcmpeq>
 8007642:	b938      	cbnz	r0, 8007654 <__cvt+0xac>
 8007644:	2230      	movs	r2, #48	; 0x30
 8007646:	9b03      	ldr	r3, [sp, #12]
 8007648:	454b      	cmp	r3, r9
 800764a:	d205      	bcs.n	8007658 <__cvt+0xb0>
 800764c:	1c59      	adds	r1, r3, #1
 800764e:	9103      	str	r1, [sp, #12]
 8007650:	701a      	strb	r2, [r3, #0]
 8007652:	e7f8      	b.n	8007646 <__cvt+0x9e>
 8007654:	f8cd 900c 	str.w	r9, [sp, #12]
 8007658:	9b03      	ldr	r3, [sp, #12]
 800765a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800765c:	eba3 0308 	sub.w	r3, r3, r8
 8007660:	4640      	mov	r0, r8
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	b004      	add	sp, #16
 8007666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800766a <__exponent>:
 800766a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800766c:	2900      	cmp	r1, #0
 800766e:	4604      	mov	r4, r0
 8007670:	bfba      	itte	lt
 8007672:	4249      	neglt	r1, r1
 8007674:	232d      	movlt	r3, #45	; 0x2d
 8007676:	232b      	movge	r3, #43	; 0x2b
 8007678:	2909      	cmp	r1, #9
 800767a:	f804 2b02 	strb.w	r2, [r4], #2
 800767e:	7043      	strb	r3, [r0, #1]
 8007680:	dd20      	ble.n	80076c4 <__exponent+0x5a>
 8007682:	f10d 0307 	add.w	r3, sp, #7
 8007686:	461f      	mov	r7, r3
 8007688:	260a      	movs	r6, #10
 800768a:	fb91 f5f6 	sdiv	r5, r1, r6
 800768e:	fb06 1115 	mls	r1, r6, r5, r1
 8007692:	3130      	adds	r1, #48	; 0x30
 8007694:	2d09      	cmp	r5, #9
 8007696:	f803 1c01 	strb.w	r1, [r3, #-1]
 800769a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800769e:	4629      	mov	r1, r5
 80076a0:	dc09      	bgt.n	80076b6 <__exponent+0x4c>
 80076a2:	3130      	adds	r1, #48	; 0x30
 80076a4:	3b02      	subs	r3, #2
 80076a6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80076aa:	42bb      	cmp	r3, r7
 80076ac:	4622      	mov	r2, r4
 80076ae:	d304      	bcc.n	80076ba <__exponent+0x50>
 80076b0:	1a10      	subs	r0, r2, r0
 80076b2:	b003      	add	sp, #12
 80076b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076b6:	4613      	mov	r3, r2
 80076b8:	e7e7      	b.n	800768a <__exponent+0x20>
 80076ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076be:	f804 2b01 	strb.w	r2, [r4], #1
 80076c2:	e7f2      	b.n	80076aa <__exponent+0x40>
 80076c4:	2330      	movs	r3, #48	; 0x30
 80076c6:	4419      	add	r1, r3
 80076c8:	7083      	strb	r3, [r0, #2]
 80076ca:	1d02      	adds	r2, r0, #4
 80076cc:	70c1      	strb	r1, [r0, #3]
 80076ce:	e7ef      	b.n	80076b0 <__exponent+0x46>

080076d0 <_printf_float>:
 80076d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d4:	b08d      	sub	sp, #52	; 0x34
 80076d6:	460c      	mov	r4, r1
 80076d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80076dc:	4616      	mov	r6, r2
 80076de:	461f      	mov	r7, r3
 80076e0:	4605      	mov	r5, r0
 80076e2:	f001 fa21 	bl	8008b28 <_localeconv_r>
 80076e6:	6803      	ldr	r3, [r0, #0]
 80076e8:	9304      	str	r3, [sp, #16]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7f9 fbc6 	bl	8000e7c <strlen>
 80076f0:	2300      	movs	r3, #0
 80076f2:	930a      	str	r3, [sp, #40]	; 0x28
 80076f4:	f8d8 3000 	ldr.w	r3, [r8]
 80076f8:	9005      	str	r0, [sp, #20]
 80076fa:	3307      	adds	r3, #7
 80076fc:	f023 0307 	bic.w	r3, r3, #7
 8007700:	f103 0208 	add.w	r2, r3, #8
 8007704:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007708:	f8d4 b000 	ldr.w	fp, [r4]
 800770c:	f8c8 2000 	str.w	r2, [r8]
 8007710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007714:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007718:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800771c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007720:	9307      	str	r3, [sp, #28]
 8007722:	f8cd 8018 	str.w	r8, [sp, #24]
 8007726:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800772a:	4ba7      	ldr	r3, [pc, #668]	; (80079c8 <_printf_float+0x2f8>)
 800772c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007730:	f7f9 fbfe 	bl	8000f30 <__aeabi_dcmpun>
 8007734:	bb70      	cbnz	r0, 8007794 <_printf_float+0xc4>
 8007736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800773a:	4ba3      	ldr	r3, [pc, #652]	; (80079c8 <_printf_float+0x2f8>)
 800773c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007740:	f7f9 f986 	bl	8000a50 <__aeabi_dcmple>
 8007744:	bb30      	cbnz	r0, 8007794 <_printf_float+0xc4>
 8007746:	2200      	movs	r2, #0
 8007748:	2300      	movs	r3, #0
 800774a:	4640      	mov	r0, r8
 800774c:	4649      	mov	r1, r9
 800774e:	f7f9 f975 	bl	8000a3c <__aeabi_dcmplt>
 8007752:	b110      	cbz	r0, 800775a <_printf_float+0x8a>
 8007754:	232d      	movs	r3, #45	; 0x2d
 8007756:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800775a:	4a9c      	ldr	r2, [pc, #624]	; (80079cc <_printf_float+0x2fc>)
 800775c:	4b9c      	ldr	r3, [pc, #624]	; (80079d0 <_printf_float+0x300>)
 800775e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007762:	bf8c      	ite	hi
 8007764:	4690      	movhi	r8, r2
 8007766:	4698      	movls	r8, r3
 8007768:	2303      	movs	r3, #3
 800776a:	f02b 0204 	bic.w	r2, fp, #4
 800776e:	6123      	str	r3, [r4, #16]
 8007770:	6022      	str	r2, [r4, #0]
 8007772:	f04f 0900 	mov.w	r9, #0
 8007776:	9700      	str	r7, [sp, #0]
 8007778:	4633      	mov	r3, r6
 800777a:	aa0b      	add	r2, sp, #44	; 0x2c
 800777c:	4621      	mov	r1, r4
 800777e:	4628      	mov	r0, r5
 8007780:	f000 f9e6 	bl	8007b50 <_printf_common>
 8007784:	3001      	adds	r0, #1
 8007786:	f040 808d 	bne.w	80078a4 <_printf_float+0x1d4>
 800778a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800778e:	b00d      	add	sp, #52	; 0x34
 8007790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007794:	4642      	mov	r2, r8
 8007796:	464b      	mov	r3, r9
 8007798:	4640      	mov	r0, r8
 800779a:	4649      	mov	r1, r9
 800779c:	f7f9 fbc8 	bl	8000f30 <__aeabi_dcmpun>
 80077a0:	b110      	cbz	r0, 80077a8 <_printf_float+0xd8>
 80077a2:	4a8c      	ldr	r2, [pc, #560]	; (80079d4 <_printf_float+0x304>)
 80077a4:	4b8c      	ldr	r3, [pc, #560]	; (80079d8 <_printf_float+0x308>)
 80077a6:	e7da      	b.n	800775e <_printf_float+0x8e>
 80077a8:	6861      	ldr	r1, [r4, #4]
 80077aa:	1c4b      	adds	r3, r1, #1
 80077ac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80077b0:	a80a      	add	r0, sp, #40	; 0x28
 80077b2:	d13e      	bne.n	8007832 <_printf_float+0x162>
 80077b4:	2306      	movs	r3, #6
 80077b6:	6063      	str	r3, [r4, #4]
 80077b8:	2300      	movs	r3, #0
 80077ba:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80077be:	ab09      	add	r3, sp, #36	; 0x24
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	ec49 8b10 	vmov	d0, r8, r9
 80077c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80077ca:	6022      	str	r2, [r4, #0]
 80077cc:	f8cd a004 	str.w	sl, [sp, #4]
 80077d0:	6861      	ldr	r1, [r4, #4]
 80077d2:	4628      	mov	r0, r5
 80077d4:	f7ff fee8 	bl	80075a8 <__cvt>
 80077d8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80077dc:	2b47      	cmp	r3, #71	; 0x47
 80077de:	4680      	mov	r8, r0
 80077e0:	d109      	bne.n	80077f6 <_printf_float+0x126>
 80077e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e4:	1cd8      	adds	r0, r3, #3
 80077e6:	db02      	blt.n	80077ee <_printf_float+0x11e>
 80077e8:	6862      	ldr	r2, [r4, #4]
 80077ea:	4293      	cmp	r3, r2
 80077ec:	dd47      	ble.n	800787e <_printf_float+0x1ae>
 80077ee:	f1aa 0a02 	sub.w	sl, sl, #2
 80077f2:	fa5f fa8a 	uxtb.w	sl, sl
 80077f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80077fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077fc:	d824      	bhi.n	8007848 <_printf_float+0x178>
 80077fe:	3901      	subs	r1, #1
 8007800:	4652      	mov	r2, sl
 8007802:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007806:	9109      	str	r1, [sp, #36]	; 0x24
 8007808:	f7ff ff2f 	bl	800766a <__exponent>
 800780c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800780e:	1813      	adds	r3, r2, r0
 8007810:	2a01      	cmp	r2, #1
 8007812:	4681      	mov	r9, r0
 8007814:	6123      	str	r3, [r4, #16]
 8007816:	dc02      	bgt.n	800781e <_printf_float+0x14e>
 8007818:	6822      	ldr	r2, [r4, #0]
 800781a:	07d1      	lsls	r1, r2, #31
 800781c:	d501      	bpl.n	8007822 <_printf_float+0x152>
 800781e:	3301      	adds	r3, #1
 8007820:	6123      	str	r3, [r4, #16]
 8007822:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007826:	2b00      	cmp	r3, #0
 8007828:	d0a5      	beq.n	8007776 <_printf_float+0xa6>
 800782a:	232d      	movs	r3, #45	; 0x2d
 800782c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007830:	e7a1      	b.n	8007776 <_printf_float+0xa6>
 8007832:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007836:	f000 8177 	beq.w	8007b28 <_printf_float+0x458>
 800783a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800783e:	d1bb      	bne.n	80077b8 <_printf_float+0xe8>
 8007840:	2900      	cmp	r1, #0
 8007842:	d1b9      	bne.n	80077b8 <_printf_float+0xe8>
 8007844:	2301      	movs	r3, #1
 8007846:	e7b6      	b.n	80077b6 <_printf_float+0xe6>
 8007848:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800784c:	d119      	bne.n	8007882 <_printf_float+0x1b2>
 800784e:	2900      	cmp	r1, #0
 8007850:	6863      	ldr	r3, [r4, #4]
 8007852:	dd0c      	ble.n	800786e <_printf_float+0x19e>
 8007854:	6121      	str	r1, [r4, #16]
 8007856:	b913      	cbnz	r3, 800785e <_printf_float+0x18e>
 8007858:	6822      	ldr	r2, [r4, #0]
 800785a:	07d2      	lsls	r2, r2, #31
 800785c:	d502      	bpl.n	8007864 <_printf_float+0x194>
 800785e:	3301      	adds	r3, #1
 8007860:	440b      	add	r3, r1
 8007862:	6123      	str	r3, [r4, #16]
 8007864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007866:	65a3      	str	r3, [r4, #88]	; 0x58
 8007868:	f04f 0900 	mov.w	r9, #0
 800786c:	e7d9      	b.n	8007822 <_printf_float+0x152>
 800786e:	b913      	cbnz	r3, 8007876 <_printf_float+0x1a6>
 8007870:	6822      	ldr	r2, [r4, #0]
 8007872:	07d0      	lsls	r0, r2, #31
 8007874:	d501      	bpl.n	800787a <_printf_float+0x1aa>
 8007876:	3302      	adds	r3, #2
 8007878:	e7f3      	b.n	8007862 <_printf_float+0x192>
 800787a:	2301      	movs	r3, #1
 800787c:	e7f1      	b.n	8007862 <_printf_float+0x192>
 800787e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007882:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007886:	4293      	cmp	r3, r2
 8007888:	db05      	blt.n	8007896 <_printf_float+0x1c6>
 800788a:	6822      	ldr	r2, [r4, #0]
 800788c:	6123      	str	r3, [r4, #16]
 800788e:	07d1      	lsls	r1, r2, #31
 8007890:	d5e8      	bpl.n	8007864 <_printf_float+0x194>
 8007892:	3301      	adds	r3, #1
 8007894:	e7e5      	b.n	8007862 <_printf_float+0x192>
 8007896:	2b00      	cmp	r3, #0
 8007898:	bfd4      	ite	le
 800789a:	f1c3 0302 	rsble	r3, r3, #2
 800789e:	2301      	movgt	r3, #1
 80078a0:	4413      	add	r3, r2
 80078a2:	e7de      	b.n	8007862 <_printf_float+0x192>
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	055a      	lsls	r2, r3, #21
 80078a8:	d407      	bmi.n	80078ba <_printf_float+0x1ea>
 80078aa:	6923      	ldr	r3, [r4, #16]
 80078ac:	4642      	mov	r2, r8
 80078ae:	4631      	mov	r1, r6
 80078b0:	4628      	mov	r0, r5
 80078b2:	47b8      	blx	r7
 80078b4:	3001      	adds	r0, #1
 80078b6:	d12b      	bne.n	8007910 <_printf_float+0x240>
 80078b8:	e767      	b.n	800778a <_printf_float+0xba>
 80078ba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80078be:	f240 80dc 	bls.w	8007a7a <_printf_float+0x3aa>
 80078c2:	2200      	movs	r2, #0
 80078c4:	2300      	movs	r3, #0
 80078c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078ca:	f7f9 f8ad 	bl	8000a28 <__aeabi_dcmpeq>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	d033      	beq.n	800793a <_printf_float+0x26a>
 80078d2:	2301      	movs	r3, #1
 80078d4:	4a41      	ldr	r2, [pc, #260]	; (80079dc <_printf_float+0x30c>)
 80078d6:	4631      	mov	r1, r6
 80078d8:	4628      	mov	r0, r5
 80078da:	47b8      	blx	r7
 80078dc:	3001      	adds	r0, #1
 80078de:	f43f af54 	beq.w	800778a <_printf_float+0xba>
 80078e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078e6:	429a      	cmp	r2, r3
 80078e8:	db02      	blt.n	80078f0 <_printf_float+0x220>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	07d8      	lsls	r0, r3, #31
 80078ee:	d50f      	bpl.n	8007910 <_printf_float+0x240>
 80078f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078f4:	4631      	mov	r1, r6
 80078f6:	4628      	mov	r0, r5
 80078f8:	47b8      	blx	r7
 80078fa:	3001      	adds	r0, #1
 80078fc:	f43f af45 	beq.w	800778a <_printf_float+0xba>
 8007900:	f04f 0800 	mov.w	r8, #0
 8007904:	f104 091a 	add.w	r9, r4, #26
 8007908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800790a:	3b01      	subs	r3, #1
 800790c:	4543      	cmp	r3, r8
 800790e:	dc09      	bgt.n	8007924 <_printf_float+0x254>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	079b      	lsls	r3, r3, #30
 8007914:	f100 8103 	bmi.w	8007b1e <_printf_float+0x44e>
 8007918:	68e0      	ldr	r0, [r4, #12]
 800791a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800791c:	4298      	cmp	r0, r3
 800791e:	bfb8      	it	lt
 8007920:	4618      	movlt	r0, r3
 8007922:	e734      	b.n	800778e <_printf_float+0xbe>
 8007924:	2301      	movs	r3, #1
 8007926:	464a      	mov	r2, r9
 8007928:	4631      	mov	r1, r6
 800792a:	4628      	mov	r0, r5
 800792c:	47b8      	blx	r7
 800792e:	3001      	adds	r0, #1
 8007930:	f43f af2b 	beq.w	800778a <_printf_float+0xba>
 8007934:	f108 0801 	add.w	r8, r8, #1
 8007938:	e7e6      	b.n	8007908 <_printf_float+0x238>
 800793a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800793c:	2b00      	cmp	r3, #0
 800793e:	dc2b      	bgt.n	8007998 <_printf_float+0x2c8>
 8007940:	2301      	movs	r3, #1
 8007942:	4a26      	ldr	r2, [pc, #152]	; (80079dc <_printf_float+0x30c>)
 8007944:	4631      	mov	r1, r6
 8007946:	4628      	mov	r0, r5
 8007948:	47b8      	blx	r7
 800794a:	3001      	adds	r0, #1
 800794c:	f43f af1d 	beq.w	800778a <_printf_float+0xba>
 8007950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007952:	b923      	cbnz	r3, 800795e <_printf_float+0x28e>
 8007954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007956:	b913      	cbnz	r3, 800795e <_printf_float+0x28e>
 8007958:	6823      	ldr	r3, [r4, #0]
 800795a:	07d9      	lsls	r1, r3, #31
 800795c:	d5d8      	bpl.n	8007910 <_printf_float+0x240>
 800795e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007962:	4631      	mov	r1, r6
 8007964:	4628      	mov	r0, r5
 8007966:	47b8      	blx	r7
 8007968:	3001      	adds	r0, #1
 800796a:	f43f af0e 	beq.w	800778a <_printf_float+0xba>
 800796e:	f04f 0900 	mov.w	r9, #0
 8007972:	f104 0a1a 	add.w	sl, r4, #26
 8007976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007978:	425b      	negs	r3, r3
 800797a:	454b      	cmp	r3, r9
 800797c:	dc01      	bgt.n	8007982 <_printf_float+0x2b2>
 800797e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007980:	e794      	b.n	80078ac <_printf_float+0x1dc>
 8007982:	2301      	movs	r3, #1
 8007984:	4652      	mov	r2, sl
 8007986:	4631      	mov	r1, r6
 8007988:	4628      	mov	r0, r5
 800798a:	47b8      	blx	r7
 800798c:	3001      	adds	r0, #1
 800798e:	f43f aefc 	beq.w	800778a <_printf_float+0xba>
 8007992:	f109 0901 	add.w	r9, r9, #1
 8007996:	e7ee      	b.n	8007976 <_printf_float+0x2a6>
 8007998:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800799a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800799c:	429a      	cmp	r2, r3
 800799e:	bfa8      	it	ge
 80079a0:	461a      	movge	r2, r3
 80079a2:	2a00      	cmp	r2, #0
 80079a4:	4691      	mov	r9, r2
 80079a6:	dd07      	ble.n	80079b8 <_printf_float+0x2e8>
 80079a8:	4613      	mov	r3, r2
 80079aa:	4631      	mov	r1, r6
 80079ac:	4642      	mov	r2, r8
 80079ae:	4628      	mov	r0, r5
 80079b0:	47b8      	blx	r7
 80079b2:	3001      	adds	r0, #1
 80079b4:	f43f aee9 	beq.w	800778a <_printf_float+0xba>
 80079b8:	f104 031a 	add.w	r3, r4, #26
 80079bc:	f04f 0b00 	mov.w	fp, #0
 80079c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079c4:	9306      	str	r3, [sp, #24]
 80079c6:	e015      	b.n	80079f4 <_printf_float+0x324>
 80079c8:	7fefffff 	.word	0x7fefffff
 80079cc:	0800b350 	.word	0x0800b350
 80079d0:	0800b34c 	.word	0x0800b34c
 80079d4:	0800b358 	.word	0x0800b358
 80079d8:	0800b354 	.word	0x0800b354
 80079dc:	0800b35c 	.word	0x0800b35c
 80079e0:	2301      	movs	r3, #1
 80079e2:	9a06      	ldr	r2, [sp, #24]
 80079e4:	4631      	mov	r1, r6
 80079e6:	4628      	mov	r0, r5
 80079e8:	47b8      	blx	r7
 80079ea:	3001      	adds	r0, #1
 80079ec:	f43f aecd 	beq.w	800778a <_printf_float+0xba>
 80079f0:	f10b 0b01 	add.w	fp, fp, #1
 80079f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80079f8:	ebaa 0309 	sub.w	r3, sl, r9
 80079fc:	455b      	cmp	r3, fp
 80079fe:	dcef      	bgt.n	80079e0 <_printf_float+0x310>
 8007a00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a04:	429a      	cmp	r2, r3
 8007a06:	44d0      	add	r8, sl
 8007a08:	db15      	blt.n	8007a36 <_printf_float+0x366>
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	07da      	lsls	r2, r3, #31
 8007a0e:	d412      	bmi.n	8007a36 <_printf_float+0x366>
 8007a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a14:	eba3 020a 	sub.w	r2, r3, sl
 8007a18:	eba3 0a01 	sub.w	sl, r3, r1
 8007a1c:	4592      	cmp	sl, r2
 8007a1e:	bfa8      	it	ge
 8007a20:	4692      	movge	sl, r2
 8007a22:	f1ba 0f00 	cmp.w	sl, #0
 8007a26:	dc0e      	bgt.n	8007a46 <_printf_float+0x376>
 8007a28:	f04f 0800 	mov.w	r8, #0
 8007a2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a30:	f104 091a 	add.w	r9, r4, #26
 8007a34:	e019      	b.n	8007a6a <_printf_float+0x39a>
 8007a36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	47b8      	blx	r7
 8007a40:	3001      	adds	r0, #1
 8007a42:	d1e5      	bne.n	8007a10 <_printf_float+0x340>
 8007a44:	e6a1      	b.n	800778a <_printf_float+0xba>
 8007a46:	4653      	mov	r3, sl
 8007a48:	4642      	mov	r2, r8
 8007a4a:	4631      	mov	r1, r6
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	47b8      	blx	r7
 8007a50:	3001      	adds	r0, #1
 8007a52:	d1e9      	bne.n	8007a28 <_printf_float+0x358>
 8007a54:	e699      	b.n	800778a <_printf_float+0xba>
 8007a56:	2301      	movs	r3, #1
 8007a58:	464a      	mov	r2, r9
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	47b8      	blx	r7
 8007a60:	3001      	adds	r0, #1
 8007a62:	f43f ae92 	beq.w	800778a <_printf_float+0xba>
 8007a66:	f108 0801 	add.w	r8, r8, #1
 8007a6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a6e:	1a9b      	subs	r3, r3, r2
 8007a70:	eba3 030a 	sub.w	r3, r3, sl
 8007a74:	4543      	cmp	r3, r8
 8007a76:	dcee      	bgt.n	8007a56 <_printf_float+0x386>
 8007a78:	e74a      	b.n	8007910 <_printf_float+0x240>
 8007a7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a7c:	2a01      	cmp	r2, #1
 8007a7e:	dc01      	bgt.n	8007a84 <_printf_float+0x3b4>
 8007a80:	07db      	lsls	r3, r3, #31
 8007a82:	d53a      	bpl.n	8007afa <_printf_float+0x42a>
 8007a84:	2301      	movs	r3, #1
 8007a86:	4642      	mov	r2, r8
 8007a88:	4631      	mov	r1, r6
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	47b8      	blx	r7
 8007a8e:	3001      	adds	r0, #1
 8007a90:	f43f ae7b 	beq.w	800778a <_printf_float+0xba>
 8007a94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a98:	4631      	mov	r1, r6
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	47b8      	blx	r7
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	f108 0801 	add.w	r8, r8, #1
 8007aa4:	f43f ae71 	beq.w	800778a <_printf_float+0xba>
 8007aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8007ab0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	f7f8 ffb7 	bl	8000a28 <__aeabi_dcmpeq>
 8007aba:	b9c8      	cbnz	r0, 8007af0 <_printf_float+0x420>
 8007abc:	4653      	mov	r3, sl
 8007abe:	4642      	mov	r2, r8
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	47b8      	blx	r7
 8007ac6:	3001      	adds	r0, #1
 8007ac8:	d10e      	bne.n	8007ae8 <_printf_float+0x418>
 8007aca:	e65e      	b.n	800778a <_printf_float+0xba>
 8007acc:	2301      	movs	r3, #1
 8007ace:	4652      	mov	r2, sl
 8007ad0:	4631      	mov	r1, r6
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	47b8      	blx	r7
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	f43f ae57 	beq.w	800778a <_printf_float+0xba>
 8007adc:	f108 0801 	add.w	r8, r8, #1
 8007ae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	4543      	cmp	r3, r8
 8007ae6:	dcf1      	bgt.n	8007acc <_printf_float+0x3fc>
 8007ae8:	464b      	mov	r3, r9
 8007aea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007aee:	e6de      	b.n	80078ae <_printf_float+0x1de>
 8007af0:	f04f 0800 	mov.w	r8, #0
 8007af4:	f104 0a1a 	add.w	sl, r4, #26
 8007af8:	e7f2      	b.n	8007ae0 <_printf_float+0x410>
 8007afa:	2301      	movs	r3, #1
 8007afc:	e7df      	b.n	8007abe <_printf_float+0x3ee>
 8007afe:	2301      	movs	r3, #1
 8007b00:	464a      	mov	r2, r9
 8007b02:	4631      	mov	r1, r6
 8007b04:	4628      	mov	r0, r5
 8007b06:	47b8      	blx	r7
 8007b08:	3001      	adds	r0, #1
 8007b0a:	f43f ae3e 	beq.w	800778a <_printf_float+0xba>
 8007b0e:	f108 0801 	add.w	r8, r8, #1
 8007b12:	68e3      	ldr	r3, [r4, #12]
 8007b14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b16:	1a9b      	subs	r3, r3, r2
 8007b18:	4543      	cmp	r3, r8
 8007b1a:	dcf0      	bgt.n	8007afe <_printf_float+0x42e>
 8007b1c:	e6fc      	b.n	8007918 <_printf_float+0x248>
 8007b1e:	f04f 0800 	mov.w	r8, #0
 8007b22:	f104 0919 	add.w	r9, r4, #25
 8007b26:	e7f4      	b.n	8007b12 <_printf_float+0x442>
 8007b28:	2900      	cmp	r1, #0
 8007b2a:	f43f ae8b 	beq.w	8007844 <_printf_float+0x174>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007b34:	ab09      	add	r3, sp, #36	; 0x24
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	ec49 8b10 	vmov	d0, r8, r9
 8007b3c:	6022      	str	r2, [r4, #0]
 8007b3e:	f8cd a004 	str.w	sl, [sp, #4]
 8007b42:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b46:	4628      	mov	r0, r5
 8007b48:	f7ff fd2e 	bl	80075a8 <__cvt>
 8007b4c:	4680      	mov	r8, r0
 8007b4e:	e648      	b.n	80077e2 <_printf_float+0x112>

08007b50 <_printf_common>:
 8007b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b54:	4691      	mov	r9, r2
 8007b56:	461f      	mov	r7, r3
 8007b58:	688a      	ldr	r2, [r1, #8]
 8007b5a:	690b      	ldr	r3, [r1, #16]
 8007b5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b60:	4293      	cmp	r3, r2
 8007b62:	bfb8      	it	lt
 8007b64:	4613      	movlt	r3, r2
 8007b66:	f8c9 3000 	str.w	r3, [r9]
 8007b6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b6e:	4606      	mov	r6, r0
 8007b70:	460c      	mov	r4, r1
 8007b72:	b112      	cbz	r2, 8007b7a <_printf_common+0x2a>
 8007b74:	3301      	adds	r3, #1
 8007b76:	f8c9 3000 	str.w	r3, [r9]
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	0699      	lsls	r1, r3, #26
 8007b7e:	bf42      	ittt	mi
 8007b80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007b84:	3302      	addmi	r3, #2
 8007b86:	f8c9 3000 	strmi.w	r3, [r9]
 8007b8a:	6825      	ldr	r5, [r4, #0]
 8007b8c:	f015 0506 	ands.w	r5, r5, #6
 8007b90:	d107      	bne.n	8007ba2 <_printf_common+0x52>
 8007b92:	f104 0a19 	add.w	sl, r4, #25
 8007b96:	68e3      	ldr	r3, [r4, #12]
 8007b98:	f8d9 2000 	ldr.w	r2, [r9]
 8007b9c:	1a9b      	subs	r3, r3, r2
 8007b9e:	42ab      	cmp	r3, r5
 8007ba0:	dc28      	bgt.n	8007bf4 <_printf_common+0xa4>
 8007ba2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007ba6:	6822      	ldr	r2, [r4, #0]
 8007ba8:	3300      	adds	r3, #0
 8007baa:	bf18      	it	ne
 8007bac:	2301      	movne	r3, #1
 8007bae:	0692      	lsls	r2, r2, #26
 8007bb0:	d42d      	bmi.n	8007c0e <_printf_common+0xbe>
 8007bb2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bb6:	4639      	mov	r1, r7
 8007bb8:	4630      	mov	r0, r6
 8007bba:	47c0      	blx	r8
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	d020      	beq.n	8007c02 <_printf_common+0xb2>
 8007bc0:	6823      	ldr	r3, [r4, #0]
 8007bc2:	68e5      	ldr	r5, [r4, #12]
 8007bc4:	f8d9 2000 	ldr.w	r2, [r9]
 8007bc8:	f003 0306 	and.w	r3, r3, #6
 8007bcc:	2b04      	cmp	r3, #4
 8007bce:	bf08      	it	eq
 8007bd0:	1aad      	subeq	r5, r5, r2
 8007bd2:	68a3      	ldr	r3, [r4, #8]
 8007bd4:	6922      	ldr	r2, [r4, #16]
 8007bd6:	bf0c      	ite	eq
 8007bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bdc:	2500      	movne	r5, #0
 8007bde:	4293      	cmp	r3, r2
 8007be0:	bfc4      	itt	gt
 8007be2:	1a9b      	subgt	r3, r3, r2
 8007be4:	18ed      	addgt	r5, r5, r3
 8007be6:	f04f 0900 	mov.w	r9, #0
 8007bea:	341a      	adds	r4, #26
 8007bec:	454d      	cmp	r5, r9
 8007bee:	d11a      	bne.n	8007c26 <_printf_common+0xd6>
 8007bf0:	2000      	movs	r0, #0
 8007bf2:	e008      	b.n	8007c06 <_printf_common+0xb6>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	4652      	mov	r2, sl
 8007bf8:	4639      	mov	r1, r7
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	47c0      	blx	r8
 8007bfe:	3001      	adds	r0, #1
 8007c00:	d103      	bne.n	8007c0a <_printf_common+0xba>
 8007c02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c0a:	3501      	adds	r5, #1
 8007c0c:	e7c3      	b.n	8007b96 <_printf_common+0x46>
 8007c0e:	18e1      	adds	r1, r4, r3
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	2030      	movs	r0, #48	; 0x30
 8007c14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c18:	4422      	add	r2, r4
 8007c1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c22:	3302      	adds	r3, #2
 8007c24:	e7c5      	b.n	8007bb2 <_printf_common+0x62>
 8007c26:	2301      	movs	r3, #1
 8007c28:	4622      	mov	r2, r4
 8007c2a:	4639      	mov	r1, r7
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	47c0      	blx	r8
 8007c30:	3001      	adds	r0, #1
 8007c32:	d0e6      	beq.n	8007c02 <_printf_common+0xb2>
 8007c34:	f109 0901 	add.w	r9, r9, #1
 8007c38:	e7d8      	b.n	8007bec <_printf_common+0x9c>
	...

08007c3c <_printf_i>:
 8007c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c40:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007c44:	460c      	mov	r4, r1
 8007c46:	7e09      	ldrb	r1, [r1, #24]
 8007c48:	b085      	sub	sp, #20
 8007c4a:	296e      	cmp	r1, #110	; 0x6e
 8007c4c:	4617      	mov	r7, r2
 8007c4e:	4606      	mov	r6, r0
 8007c50:	4698      	mov	r8, r3
 8007c52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c54:	f000 80b3 	beq.w	8007dbe <_printf_i+0x182>
 8007c58:	d822      	bhi.n	8007ca0 <_printf_i+0x64>
 8007c5a:	2963      	cmp	r1, #99	; 0x63
 8007c5c:	d036      	beq.n	8007ccc <_printf_i+0x90>
 8007c5e:	d80a      	bhi.n	8007c76 <_printf_i+0x3a>
 8007c60:	2900      	cmp	r1, #0
 8007c62:	f000 80b9 	beq.w	8007dd8 <_printf_i+0x19c>
 8007c66:	2958      	cmp	r1, #88	; 0x58
 8007c68:	f000 8083 	beq.w	8007d72 <_printf_i+0x136>
 8007c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007c74:	e032      	b.n	8007cdc <_printf_i+0xa0>
 8007c76:	2964      	cmp	r1, #100	; 0x64
 8007c78:	d001      	beq.n	8007c7e <_printf_i+0x42>
 8007c7a:	2969      	cmp	r1, #105	; 0x69
 8007c7c:	d1f6      	bne.n	8007c6c <_printf_i+0x30>
 8007c7e:	6820      	ldr	r0, [r4, #0]
 8007c80:	6813      	ldr	r3, [r2, #0]
 8007c82:	0605      	lsls	r5, r0, #24
 8007c84:	f103 0104 	add.w	r1, r3, #4
 8007c88:	d52a      	bpl.n	8007ce0 <_printf_i+0xa4>
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6011      	str	r1, [r2, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	da03      	bge.n	8007c9a <_printf_i+0x5e>
 8007c92:	222d      	movs	r2, #45	; 0x2d
 8007c94:	425b      	negs	r3, r3
 8007c96:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007c9a:	486f      	ldr	r0, [pc, #444]	; (8007e58 <_printf_i+0x21c>)
 8007c9c:	220a      	movs	r2, #10
 8007c9e:	e039      	b.n	8007d14 <_printf_i+0xd8>
 8007ca0:	2973      	cmp	r1, #115	; 0x73
 8007ca2:	f000 809d 	beq.w	8007de0 <_printf_i+0x1a4>
 8007ca6:	d808      	bhi.n	8007cba <_printf_i+0x7e>
 8007ca8:	296f      	cmp	r1, #111	; 0x6f
 8007caa:	d020      	beq.n	8007cee <_printf_i+0xb2>
 8007cac:	2970      	cmp	r1, #112	; 0x70
 8007cae:	d1dd      	bne.n	8007c6c <_printf_i+0x30>
 8007cb0:	6823      	ldr	r3, [r4, #0]
 8007cb2:	f043 0320 	orr.w	r3, r3, #32
 8007cb6:	6023      	str	r3, [r4, #0]
 8007cb8:	e003      	b.n	8007cc2 <_printf_i+0x86>
 8007cba:	2975      	cmp	r1, #117	; 0x75
 8007cbc:	d017      	beq.n	8007cee <_printf_i+0xb2>
 8007cbe:	2978      	cmp	r1, #120	; 0x78
 8007cc0:	d1d4      	bne.n	8007c6c <_printf_i+0x30>
 8007cc2:	2378      	movs	r3, #120	; 0x78
 8007cc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cc8:	4864      	ldr	r0, [pc, #400]	; (8007e5c <_printf_i+0x220>)
 8007cca:	e055      	b.n	8007d78 <_printf_i+0x13c>
 8007ccc:	6813      	ldr	r3, [r2, #0]
 8007cce:	1d19      	adds	r1, r3, #4
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6011      	str	r1, [r2, #0]
 8007cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e08c      	b.n	8007dfa <_printf_i+0x1be>
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6011      	str	r1, [r2, #0]
 8007ce4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007ce8:	bf18      	it	ne
 8007cea:	b21b      	sxthne	r3, r3
 8007cec:	e7cf      	b.n	8007c8e <_printf_i+0x52>
 8007cee:	6813      	ldr	r3, [r2, #0]
 8007cf0:	6825      	ldr	r5, [r4, #0]
 8007cf2:	1d18      	adds	r0, r3, #4
 8007cf4:	6010      	str	r0, [r2, #0]
 8007cf6:	0628      	lsls	r0, r5, #24
 8007cf8:	d501      	bpl.n	8007cfe <_printf_i+0xc2>
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	e002      	b.n	8007d04 <_printf_i+0xc8>
 8007cfe:	0668      	lsls	r0, r5, #25
 8007d00:	d5fb      	bpl.n	8007cfa <_printf_i+0xbe>
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	4854      	ldr	r0, [pc, #336]	; (8007e58 <_printf_i+0x21c>)
 8007d06:	296f      	cmp	r1, #111	; 0x6f
 8007d08:	bf14      	ite	ne
 8007d0a:	220a      	movne	r2, #10
 8007d0c:	2208      	moveq	r2, #8
 8007d0e:	2100      	movs	r1, #0
 8007d10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d14:	6865      	ldr	r5, [r4, #4]
 8007d16:	60a5      	str	r5, [r4, #8]
 8007d18:	2d00      	cmp	r5, #0
 8007d1a:	f2c0 8095 	blt.w	8007e48 <_printf_i+0x20c>
 8007d1e:	6821      	ldr	r1, [r4, #0]
 8007d20:	f021 0104 	bic.w	r1, r1, #4
 8007d24:	6021      	str	r1, [r4, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d13d      	bne.n	8007da6 <_printf_i+0x16a>
 8007d2a:	2d00      	cmp	r5, #0
 8007d2c:	f040 808e 	bne.w	8007e4c <_printf_i+0x210>
 8007d30:	4665      	mov	r5, ip
 8007d32:	2a08      	cmp	r2, #8
 8007d34:	d10b      	bne.n	8007d4e <_printf_i+0x112>
 8007d36:	6823      	ldr	r3, [r4, #0]
 8007d38:	07db      	lsls	r3, r3, #31
 8007d3a:	d508      	bpl.n	8007d4e <_printf_i+0x112>
 8007d3c:	6923      	ldr	r3, [r4, #16]
 8007d3e:	6862      	ldr	r2, [r4, #4]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	bfde      	ittt	le
 8007d44:	2330      	movle	r3, #48	; 0x30
 8007d46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d4a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007d4e:	ebac 0305 	sub.w	r3, ip, r5
 8007d52:	6123      	str	r3, [r4, #16]
 8007d54:	f8cd 8000 	str.w	r8, [sp]
 8007d58:	463b      	mov	r3, r7
 8007d5a:	aa03      	add	r2, sp, #12
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	4630      	mov	r0, r6
 8007d60:	f7ff fef6 	bl	8007b50 <_printf_common>
 8007d64:	3001      	adds	r0, #1
 8007d66:	d14d      	bne.n	8007e04 <_printf_i+0x1c8>
 8007d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d6c:	b005      	add	sp, #20
 8007d6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d72:	4839      	ldr	r0, [pc, #228]	; (8007e58 <_printf_i+0x21c>)
 8007d74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007d78:	6813      	ldr	r3, [r2, #0]
 8007d7a:	6821      	ldr	r1, [r4, #0]
 8007d7c:	1d1d      	adds	r5, r3, #4
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6015      	str	r5, [r2, #0]
 8007d82:	060a      	lsls	r2, r1, #24
 8007d84:	d50b      	bpl.n	8007d9e <_printf_i+0x162>
 8007d86:	07ca      	lsls	r2, r1, #31
 8007d88:	bf44      	itt	mi
 8007d8a:	f041 0120 	orrmi.w	r1, r1, #32
 8007d8e:	6021      	strmi	r1, [r4, #0]
 8007d90:	b91b      	cbnz	r3, 8007d9a <_printf_i+0x15e>
 8007d92:	6822      	ldr	r2, [r4, #0]
 8007d94:	f022 0220 	bic.w	r2, r2, #32
 8007d98:	6022      	str	r2, [r4, #0]
 8007d9a:	2210      	movs	r2, #16
 8007d9c:	e7b7      	b.n	8007d0e <_printf_i+0xd2>
 8007d9e:	064d      	lsls	r5, r1, #25
 8007da0:	bf48      	it	mi
 8007da2:	b29b      	uxthmi	r3, r3
 8007da4:	e7ef      	b.n	8007d86 <_printf_i+0x14a>
 8007da6:	4665      	mov	r5, ip
 8007da8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007dac:	fb02 3311 	mls	r3, r2, r1, r3
 8007db0:	5cc3      	ldrb	r3, [r0, r3]
 8007db2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007db6:	460b      	mov	r3, r1
 8007db8:	2900      	cmp	r1, #0
 8007dba:	d1f5      	bne.n	8007da8 <_printf_i+0x16c>
 8007dbc:	e7b9      	b.n	8007d32 <_printf_i+0xf6>
 8007dbe:	6813      	ldr	r3, [r2, #0]
 8007dc0:	6825      	ldr	r5, [r4, #0]
 8007dc2:	6961      	ldr	r1, [r4, #20]
 8007dc4:	1d18      	adds	r0, r3, #4
 8007dc6:	6010      	str	r0, [r2, #0]
 8007dc8:	0628      	lsls	r0, r5, #24
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	d501      	bpl.n	8007dd2 <_printf_i+0x196>
 8007dce:	6019      	str	r1, [r3, #0]
 8007dd0:	e002      	b.n	8007dd8 <_printf_i+0x19c>
 8007dd2:	066a      	lsls	r2, r5, #25
 8007dd4:	d5fb      	bpl.n	8007dce <_printf_i+0x192>
 8007dd6:	8019      	strh	r1, [r3, #0]
 8007dd8:	2300      	movs	r3, #0
 8007dda:	6123      	str	r3, [r4, #16]
 8007ddc:	4665      	mov	r5, ip
 8007dde:	e7b9      	b.n	8007d54 <_printf_i+0x118>
 8007de0:	6813      	ldr	r3, [r2, #0]
 8007de2:	1d19      	adds	r1, r3, #4
 8007de4:	6011      	str	r1, [r2, #0]
 8007de6:	681d      	ldr	r5, [r3, #0]
 8007de8:	6862      	ldr	r2, [r4, #4]
 8007dea:	2100      	movs	r1, #0
 8007dec:	4628      	mov	r0, r5
 8007dee:	f7f9 f84f 	bl	8000e90 <memchr>
 8007df2:	b108      	cbz	r0, 8007df8 <_printf_i+0x1bc>
 8007df4:	1b40      	subs	r0, r0, r5
 8007df6:	6060      	str	r0, [r4, #4]
 8007df8:	6863      	ldr	r3, [r4, #4]
 8007dfa:	6123      	str	r3, [r4, #16]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e02:	e7a7      	b.n	8007d54 <_printf_i+0x118>
 8007e04:	6923      	ldr	r3, [r4, #16]
 8007e06:	462a      	mov	r2, r5
 8007e08:	4639      	mov	r1, r7
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	47c0      	blx	r8
 8007e0e:	3001      	adds	r0, #1
 8007e10:	d0aa      	beq.n	8007d68 <_printf_i+0x12c>
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	079b      	lsls	r3, r3, #30
 8007e16:	d413      	bmi.n	8007e40 <_printf_i+0x204>
 8007e18:	68e0      	ldr	r0, [r4, #12]
 8007e1a:	9b03      	ldr	r3, [sp, #12]
 8007e1c:	4298      	cmp	r0, r3
 8007e1e:	bfb8      	it	lt
 8007e20:	4618      	movlt	r0, r3
 8007e22:	e7a3      	b.n	8007d6c <_printf_i+0x130>
 8007e24:	2301      	movs	r3, #1
 8007e26:	464a      	mov	r2, r9
 8007e28:	4639      	mov	r1, r7
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	47c0      	blx	r8
 8007e2e:	3001      	adds	r0, #1
 8007e30:	d09a      	beq.n	8007d68 <_printf_i+0x12c>
 8007e32:	3501      	adds	r5, #1
 8007e34:	68e3      	ldr	r3, [r4, #12]
 8007e36:	9a03      	ldr	r2, [sp, #12]
 8007e38:	1a9b      	subs	r3, r3, r2
 8007e3a:	42ab      	cmp	r3, r5
 8007e3c:	dcf2      	bgt.n	8007e24 <_printf_i+0x1e8>
 8007e3e:	e7eb      	b.n	8007e18 <_printf_i+0x1dc>
 8007e40:	2500      	movs	r5, #0
 8007e42:	f104 0919 	add.w	r9, r4, #25
 8007e46:	e7f5      	b.n	8007e34 <_printf_i+0x1f8>
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1ac      	bne.n	8007da6 <_printf_i+0x16a>
 8007e4c:	7803      	ldrb	r3, [r0, #0]
 8007e4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e56:	e76c      	b.n	8007d32 <_printf_i+0xf6>
 8007e58:	0800b35e 	.word	0x0800b35e
 8007e5c:	0800b36f 	.word	0x0800b36f

08007e60 <siprintf>:
 8007e60:	b40e      	push	{r1, r2, r3}
 8007e62:	b500      	push	{lr}
 8007e64:	b09c      	sub	sp, #112	; 0x70
 8007e66:	ab1d      	add	r3, sp, #116	; 0x74
 8007e68:	9002      	str	r0, [sp, #8]
 8007e6a:	9006      	str	r0, [sp, #24]
 8007e6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e70:	4809      	ldr	r0, [pc, #36]	; (8007e98 <siprintf+0x38>)
 8007e72:	9107      	str	r1, [sp, #28]
 8007e74:	9104      	str	r1, [sp, #16]
 8007e76:	4909      	ldr	r1, [pc, #36]	; (8007e9c <siprintf+0x3c>)
 8007e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e7c:	9105      	str	r1, [sp, #20]
 8007e7e:	6800      	ldr	r0, [r0, #0]
 8007e80:	9301      	str	r3, [sp, #4]
 8007e82:	a902      	add	r1, sp, #8
 8007e84:	f001 fa52 	bl	800932c <_svfiprintf_r>
 8007e88:	9b02      	ldr	r3, [sp, #8]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	701a      	strb	r2, [r3, #0]
 8007e8e:	b01c      	add	sp, #112	; 0x70
 8007e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e94:	b003      	add	sp, #12
 8007e96:	4770      	bx	lr
 8007e98:	20000094 	.word	0x20000094
 8007e9c:	ffff0208 	.word	0xffff0208

08007ea0 <quorem>:
 8007ea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea4:	6903      	ldr	r3, [r0, #16]
 8007ea6:	690c      	ldr	r4, [r1, #16]
 8007ea8:	42a3      	cmp	r3, r4
 8007eaa:	4680      	mov	r8, r0
 8007eac:	f2c0 8082 	blt.w	8007fb4 <quorem+0x114>
 8007eb0:	3c01      	subs	r4, #1
 8007eb2:	f101 0714 	add.w	r7, r1, #20
 8007eb6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007eba:	f100 0614 	add.w	r6, r0, #20
 8007ebe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007ec2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007ec6:	eb06 030c 	add.w	r3, r6, ip
 8007eca:	3501      	adds	r5, #1
 8007ecc:	eb07 090c 	add.w	r9, r7, ip
 8007ed0:	9301      	str	r3, [sp, #4]
 8007ed2:	fbb0 f5f5 	udiv	r5, r0, r5
 8007ed6:	b395      	cbz	r5, 8007f3e <quorem+0x9e>
 8007ed8:	f04f 0a00 	mov.w	sl, #0
 8007edc:	4638      	mov	r0, r7
 8007ede:	46b6      	mov	lr, r6
 8007ee0:	46d3      	mov	fp, sl
 8007ee2:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ee6:	b293      	uxth	r3, r2
 8007ee8:	fb05 a303 	mla	r3, r5, r3, sl
 8007eec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	ebab 0303 	sub.w	r3, fp, r3
 8007ef6:	0c12      	lsrs	r2, r2, #16
 8007ef8:	f8de b000 	ldr.w	fp, [lr]
 8007efc:	fb05 a202 	mla	r2, r5, r2, sl
 8007f00:	fa13 f38b 	uxtah	r3, r3, fp
 8007f04:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007f08:	fa1f fb82 	uxth.w	fp, r2
 8007f0c:	f8de 2000 	ldr.w	r2, [lr]
 8007f10:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007f14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f1e:	4581      	cmp	r9, r0
 8007f20:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007f24:	f84e 3b04 	str.w	r3, [lr], #4
 8007f28:	d2db      	bcs.n	8007ee2 <quorem+0x42>
 8007f2a:	f856 300c 	ldr.w	r3, [r6, ip]
 8007f2e:	b933      	cbnz	r3, 8007f3e <quorem+0x9e>
 8007f30:	9b01      	ldr	r3, [sp, #4]
 8007f32:	3b04      	subs	r3, #4
 8007f34:	429e      	cmp	r6, r3
 8007f36:	461a      	mov	r2, r3
 8007f38:	d330      	bcc.n	8007f9c <quorem+0xfc>
 8007f3a:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f3e:	4640      	mov	r0, r8
 8007f40:	f001 f81e 	bl	8008f80 <__mcmp>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	db25      	blt.n	8007f94 <quorem+0xf4>
 8007f48:	3501      	adds	r5, #1
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	f04f 0c00 	mov.w	ip, #0
 8007f50:	f857 2b04 	ldr.w	r2, [r7], #4
 8007f54:	f8d0 e000 	ldr.w	lr, [r0]
 8007f58:	b293      	uxth	r3, r2
 8007f5a:	ebac 0303 	sub.w	r3, ip, r3
 8007f5e:	0c12      	lsrs	r2, r2, #16
 8007f60:	fa13 f38e 	uxtah	r3, r3, lr
 8007f64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f72:	45b9      	cmp	r9, r7
 8007f74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f78:	f840 3b04 	str.w	r3, [r0], #4
 8007f7c:	d2e8      	bcs.n	8007f50 <quorem+0xb0>
 8007f7e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007f82:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007f86:	b92a      	cbnz	r2, 8007f94 <quorem+0xf4>
 8007f88:	3b04      	subs	r3, #4
 8007f8a:	429e      	cmp	r6, r3
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	d30b      	bcc.n	8007fa8 <quorem+0x108>
 8007f90:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f94:	4628      	mov	r0, r5
 8007f96:	b003      	add	sp, #12
 8007f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9c:	6812      	ldr	r2, [r2, #0]
 8007f9e:	3b04      	subs	r3, #4
 8007fa0:	2a00      	cmp	r2, #0
 8007fa2:	d1ca      	bne.n	8007f3a <quorem+0x9a>
 8007fa4:	3c01      	subs	r4, #1
 8007fa6:	e7c5      	b.n	8007f34 <quorem+0x94>
 8007fa8:	6812      	ldr	r2, [r2, #0]
 8007faa:	3b04      	subs	r3, #4
 8007fac:	2a00      	cmp	r2, #0
 8007fae:	d1ef      	bne.n	8007f90 <quorem+0xf0>
 8007fb0:	3c01      	subs	r4, #1
 8007fb2:	e7ea      	b.n	8007f8a <quorem+0xea>
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	e7ee      	b.n	8007f96 <quorem+0xf6>

08007fb8 <_dtoa_r>:
 8007fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fbc:	ec57 6b10 	vmov	r6, r7, d0
 8007fc0:	b097      	sub	sp, #92	; 0x5c
 8007fc2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007fc4:	9106      	str	r1, [sp, #24]
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	920b      	str	r2, [sp, #44]	; 0x2c
 8007fca:	9312      	str	r3, [sp, #72]	; 0x48
 8007fcc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007fd0:	e9cd 6700 	strd	r6, r7, [sp]
 8007fd4:	b93d      	cbnz	r5, 8007fe6 <_dtoa_r+0x2e>
 8007fd6:	2010      	movs	r0, #16
 8007fd8:	f000 fdb4 	bl	8008b44 <malloc>
 8007fdc:	6260      	str	r0, [r4, #36]	; 0x24
 8007fde:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fe2:	6005      	str	r5, [r0, #0]
 8007fe4:	60c5      	str	r5, [r0, #12]
 8007fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fe8:	6819      	ldr	r1, [r3, #0]
 8007fea:	b151      	cbz	r1, 8008002 <_dtoa_r+0x4a>
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	604a      	str	r2, [r1, #4]
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	4093      	lsls	r3, r2
 8007ff4:	608b      	str	r3, [r1, #8]
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	f000 fde0 	bl	8008bbc <_Bfree>
 8007ffc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ffe:	2200      	movs	r2, #0
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	1e3b      	subs	r3, r7, #0
 8008004:	bfbb      	ittet	lt
 8008006:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800800a:	9301      	strlt	r3, [sp, #4]
 800800c:	2300      	movge	r3, #0
 800800e:	2201      	movlt	r2, #1
 8008010:	bfac      	ite	ge
 8008012:	f8c8 3000 	strge.w	r3, [r8]
 8008016:	f8c8 2000 	strlt.w	r2, [r8]
 800801a:	4baf      	ldr	r3, [pc, #700]	; (80082d8 <_dtoa_r+0x320>)
 800801c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008020:	ea33 0308 	bics.w	r3, r3, r8
 8008024:	d114      	bne.n	8008050 <_dtoa_r+0x98>
 8008026:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008028:	f242 730f 	movw	r3, #9999	; 0x270f
 800802c:	6013      	str	r3, [r2, #0]
 800802e:	9b00      	ldr	r3, [sp, #0]
 8008030:	b923      	cbnz	r3, 800803c <_dtoa_r+0x84>
 8008032:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008036:	2800      	cmp	r0, #0
 8008038:	f000 8542 	beq.w	8008ac0 <_dtoa_r+0xb08>
 800803c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800803e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80082ec <_dtoa_r+0x334>
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 8544 	beq.w	8008ad0 <_dtoa_r+0xb18>
 8008048:	f10b 0303 	add.w	r3, fp, #3
 800804c:	f000 bd3e 	b.w	8008acc <_dtoa_r+0xb14>
 8008050:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008054:	2200      	movs	r2, #0
 8008056:	2300      	movs	r3, #0
 8008058:	4630      	mov	r0, r6
 800805a:	4639      	mov	r1, r7
 800805c:	f7f8 fce4 	bl	8000a28 <__aeabi_dcmpeq>
 8008060:	4681      	mov	r9, r0
 8008062:	b168      	cbz	r0, 8008080 <_dtoa_r+0xc8>
 8008064:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008066:	2301      	movs	r3, #1
 8008068:	6013      	str	r3, [r2, #0]
 800806a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 8524 	beq.w	8008aba <_dtoa_r+0xb02>
 8008072:	4b9a      	ldr	r3, [pc, #616]	; (80082dc <_dtoa_r+0x324>)
 8008074:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008076:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800807a:	6013      	str	r3, [r2, #0]
 800807c:	f000 bd28 	b.w	8008ad0 <_dtoa_r+0xb18>
 8008080:	aa14      	add	r2, sp, #80	; 0x50
 8008082:	a915      	add	r1, sp, #84	; 0x54
 8008084:	ec47 6b10 	vmov	d0, r6, r7
 8008088:	4620      	mov	r0, r4
 800808a:	f000 fff0 	bl	800906e <__d2b>
 800808e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008092:	9004      	str	r0, [sp, #16]
 8008094:	2d00      	cmp	r5, #0
 8008096:	d07c      	beq.n	8008192 <_dtoa_r+0x1da>
 8008098:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800809c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80080a0:	46b2      	mov	sl, r6
 80080a2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80080a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80080aa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80080ae:	2200      	movs	r2, #0
 80080b0:	4b8b      	ldr	r3, [pc, #556]	; (80082e0 <_dtoa_r+0x328>)
 80080b2:	4650      	mov	r0, sl
 80080b4:	4659      	mov	r1, fp
 80080b6:	f7f8 f897 	bl	80001e8 <__aeabi_dsub>
 80080ba:	a381      	add	r3, pc, #516	; (adr r3, 80082c0 <_dtoa_r+0x308>)
 80080bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c0:	f7f8 fa4a 	bl	8000558 <__aeabi_dmul>
 80080c4:	a380      	add	r3, pc, #512	; (adr r3, 80082c8 <_dtoa_r+0x310>)
 80080c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ca:	f7f8 f88f 	bl	80001ec <__adddf3>
 80080ce:	4606      	mov	r6, r0
 80080d0:	4628      	mov	r0, r5
 80080d2:	460f      	mov	r7, r1
 80080d4:	f7f8 f9d6 	bl	8000484 <__aeabi_i2d>
 80080d8:	a37d      	add	r3, pc, #500	; (adr r3, 80082d0 <_dtoa_r+0x318>)
 80080da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080de:	f7f8 fa3b 	bl	8000558 <__aeabi_dmul>
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	4630      	mov	r0, r6
 80080e8:	4639      	mov	r1, r7
 80080ea:	f7f8 f87f 	bl	80001ec <__adddf3>
 80080ee:	4606      	mov	r6, r0
 80080f0:	460f      	mov	r7, r1
 80080f2:	f7f8 fccb 	bl	8000a8c <__aeabi_d2iz>
 80080f6:	2200      	movs	r2, #0
 80080f8:	4682      	mov	sl, r0
 80080fa:	2300      	movs	r3, #0
 80080fc:	4630      	mov	r0, r6
 80080fe:	4639      	mov	r1, r7
 8008100:	f7f8 fc9c 	bl	8000a3c <__aeabi_dcmplt>
 8008104:	b148      	cbz	r0, 800811a <_dtoa_r+0x162>
 8008106:	4650      	mov	r0, sl
 8008108:	f7f8 f9bc 	bl	8000484 <__aeabi_i2d>
 800810c:	4632      	mov	r2, r6
 800810e:	463b      	mov	r3, r7
 8008110:	f7f8 fc8a 	bl	8000a28 <__aeabi_dcmpeq>
 8008114:	b908      	cbnz	r0, 800811a <_dtoa_r+0x162>
 8008116:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800811a:	f1ba 0f16 	cmp.w	sl, #22
 800811e:	d859      	bhi.n	80081d4 <_dtoa_r+0x21c>
 8008120:	4970      	ldr	r1, [pc, #448]	; (80082e4 <_dtoa_r+0x32c>)
 8008122:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008126:	e9dd 2300 	ldrd	r2, r3, [sp]
 800812a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800812e:	f7f8 fca3 	bl	8000a78 <__aeabi_dcmpgt>
 8008132:	2800      	cmp	r0, #0
 8008134:	d050      	beq.n	80081d8 <_dtoa_r+0x220>
 8008136:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800813a:	2300      	movs	r3, #0
 800813c:	930f      	str	r3, [sp, #60]	; 0x3c
 800813e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008140:	1b5d      	subs	r5, r3, r5
 8008142:	f1b5 0801 	subs.w	r8, r5, #1
 8008146:	bf49      	itett	mi
 8008148:	f1c5 0301 	rsbmi	r3, r5, #1
 800814c:	2300      	movpl	r3, #0
 800814e:	9305      	strmi	r3, [sp, #20]
 8008150:	f04f 0800 	movmi.w	r8, #0
 8008154:	bf58      	it	pl
 8008156:	9305      	strpl	r3, [sp, #20]
 8008158:	f1ba 0f00 	cmp.w	sl, #0
 800815c:	db3e      	blt.n	80081dc <_dtoa_r+0x224>
 800815e:	2300      	movs	r3, #0
 8008160:	44d0      	add	r8, sl
 8008162:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008166:	9307      	str	r3, [sp, #28]
 8008168:	9b06      	ldr	r3, [sp, #24]
 800816a:	2b09      	cmp	r3, #9
 800816c:	f200 8090 	bhi.w	8008290 <_dtoa_r+0x2d8>
 8008170:	2b05      	cmp	r3, #5
 8008172:	bfc4      	itt	gt
 8008174:	3b04      	subgt	r3, #4
 8008176:	9306      	strgt	r3, [sp, #24]
 8008178:	9b06      	ldr	r3, [sp, #24]
 800817a:	f1a3 0302 	sub.w	r3, r3, #2
 800817e:	bfcc      	ite	gt
 8008180:	2500      	movgt	r5, #0
 8008182:	2501      	movle	r5, #1
 8008184:	2b03      	cmp	r3, #3
 8008186:	f200 808f 	bhi.w	80082a8 <_dtoa_r+0x2f0>
 800818a:	e8df f003 	tbb	[pc, r3]
 800818e:	7f7d      	.short	0x7f7d
 8008190:	7131      	.short	0x7131
 8008192:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008196:	441d      	add	r5, r3
 8008198:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800819c:	2820      	cmp	r0, #32
 800819e:	dd13      	ble.n	80081c8 <_dtoa_r+0x210>
 80081a0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80081a4:	9b00      	ldr	r3, [sp, #0]
 80081a6:	fa08 f800 	lsl.w	r8, r8, r0
 80081aa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80081ae:	fa23 f000 	lsr.w	r0, r3, r0
 80081b2:	ea48 0000 	orr.w	r0, r8, r0
 80081b6:	f7f8 f955 	bl	8000464 <__aeabi_ui2d>
 80081ba:	2301      	movs	r3, #1
 80081bc:	4682      	mov	sl, r0
 80081be:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80081c2:	3d01      	subs	r5, #1
 80081c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80081c6:	e772      	b.n	80080ae <_dtoa_r+0xf6>
 80081c8:	9b00      	ldr	r3, [sp, #0]
 80081ca:	f1c0 0020 	rsb	r0, r0, #32
 80081ce:	fa03 f000 	lsl.w	r0, r3, r0
 80081d2:	e7f0      	b.n	80081b6 <_dtoa_r+0x1fe>
 80081d4:	2301      	movs	r3, #1
 80081d6:	e7b1      	b.n	800813c <_dtoa_r+0x184>
 80081d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80081da:	e7b0      	b.n	800813e <_dtoa_r+0x186>
 80081dc:	9b05      	ldr	r3, [sp, #20]
 80081de:	eba3 030a 	sub.w	r3, r3, sl
 80081e2:	9305      	str	r3, [sp, #20]
 80081e4:	f1ca 0300 	rsb	r3, sl, #0
 80081e8:	9307      	str	r3, [sp, #28]
 80081ea:	2300      	movs	r3, #0
 80081ec:	930e      	str	r3, [sp, #56]	; 0x38
 80081ee:	e7bb      	b.n	8008168 <_dtoa_r+0x1b0>
 80081f0:	2301      	movs	r3, #1
 80081f2:	930a      	str	r3, [sp, #40]	; 0x28
 80081f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	dd59      	ble.n	80082ae <_dtoa_r+0x2f6>
 80081fa:	9302      	str	r3, [sp, #8]
 80081fc:	4699      	mov	r9, r3
 80081fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008200:	2200      	movs	r2, #0
 8008202:	6072      	str	r2, [r6, #4]
 8008204:	2204      	movs	r2, #4
 8008206:	f102 0014 	add.w	r0, r2, #20
 800820a:	4298      	cmp	r0, r3
 800820c:	6871      	ldr	r1, [r6, #4]
 800820e:	d953      	bls.n	80082b8 <_dtoa_r+0x300>
 8008210:	4620      	mov	r0, r4
 8008212:	f000 fc9f 	bl	8008b54 <_Balloc>
 8008216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008218:	6030      	str	r0, [r6, #0]
 800821a:	f1b9 0f0e 	cmp.w	r9, #14
 800821e:	f8d3 b000 	ldr.w	fp, [r3]
 8008222:	f200 80e6 	bhi.w	80083f2 <_dtoa_r+0x43a>
 8008226:	2d00      	cmp	r5, #0
 8008228:	f000 80e3 	beq.w	80083f2 <_dtoa_r+0x43a>
 800822c:	ed9d 7b00 	vldr	d7, [sp]
 8008230:	f1ba 0f00 	cmp.w	sl, #0
 8008234:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008238:	dd74      	ble.n	8008324 <_dtoa_r+0x36c>
 800823a:	4a2a      	ldr	r2, [pc, #168]	; (80082e4 <_dtoa_r+0x32c>)
 800823c:	f00a 030f 	and.w	r3, sl, #15
 8008240:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008244:	ed93 7b00 	vldr	d7, [r3]
 8008248:	ea4f 162a 	mov.w	r6, sl, asr #4
 800824c:	06f0      	lsls	r0, r6, #27
 800824e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008252:	d565      	bpl.n	8008320 <_dtoa_r+0x368>
 8008254:	4b24      	ldr	r3, [pc, #144]	; (80082e8 <_dtoa_r+0x330>)
 8008256:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800825a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800825e:	f7f8 faa5 	bl	80007ac <__aeabi_ddiv>
 8008262:	e9cd 0100 	strd	r0, r1, [sp]
 8008266:	f006 060f 	and.w	r6, r6, #15
 800826a:	2503      	movs	r5, #3
 800826c:	4f1e      	ldr	r7, [pc, #120]	; (80082e8 <_dtoa_r+0x330>)
 800826e:	e04c      	b.n	800830a <_dtoa_r+0x352>
 8008270:	2301      	movs	r3, #1
 8008272:	930a      	str	r3, [sp, #40]	; 0x28
 8008274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008276:	4453      	add	r3, sl
 8008278:	f103 0901 	add.w	r9, r3, #1
 800827c:	9302      	str	r3, [sp, #8]
 800827e:	464b      	mov	r3, r9
 8008280:	2b01      	cmp	r3, #1
 8008282:	bfb8      	it	lt
 8008284:	2301      	movlt	r3, #1
 8008286:	e7ba      	b.n	80081fe <_dtoa_r+0x246>
 8008288:	2300      	movs	r3, #0
 800828a:	e7b2      	b.n	80081f2 <_dtoa_r+0x23a>
 800828c:	2300      	movs	r3, #0
 800828e:	e7f0      	b.n	8008272 <_dtoa_r+0x2ba>
 8008290:	2501      	movs	r5, #1
 8008292:	2300      	movs	r3, #0
 8008294:	9306      	str	r3, [sp, #24]
 8008296:	950a      	str	r5, [sp, #40]	; 0x28
 8008298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800829c:	9302      	str	r3, [sp, #8]
 800829e:	4699      	mov	r9, r3
 80082a0:	2200      	movs	r2, #0
 80082a2:	2312      	movs	r3, #18
 80082a4:	920b      	str	r2, [sp, #44]	; 0x2c
 80082a6:	e7aa      	b.n	80081fe <_dtoa_r+0x246>
 80082a8:	2301      	movs	r3, #1
 80082aa:	930a      	str	r3, [sp, #40]	; 0x28
 80082ac:	e7f4      	b.n	8008298 <_dtoa_r+0x2e0>
 80082ae:	2301      	movs	r3, #1
 80082b0:	9302      	str	r3, [sp, #8]
 80082b2:	4699      	mov	r9, r3
 80082b4:	461a      	mov	r2, r3
 80082b6:	e7f5      	b.n	80082a4 <_dtoa_r+0x2ec>
 80082b8:	3101      	adds	r1, #1
 80082ba:	6071      	str	r1, [r6, #4]
 80082bc:	0052      	lsls	r2, r2, #1
 80082be:	e7a2      	b.n	8008206 <_dtoa_r+0x24e>
 80082c0:	636f4361 	.word	0x636f4361
 80082c4:	3fd287a7 	.word	0x3fd287a7
 80082c8:	8b60c8b3 	.word	0x8b60c8b3
 80082cc:	3fc68a28 	.word	0x3fc68a28
 80082d0:	509f79fb 	.word	0x509f79fb
 80082d4:	3fd34413 	.word	0x3fd34413
 80082d8:	7ff00000 	.word	0x7ff00000
 80082dc:	0800b35d 	.word	0x0800b35d
 80082e0:	3ff80000 	.word	0x3ff80000
 80082e4:	0800b418 	.word	0x0800b418
 80082e8:	0800b3f0 	.word	0x0800b3f0
 80082ec:	0800b389 	.word	0x0800b389
 80082f0:	07f1      	lsls	r1, r6, #31
 80082f2:	d508      	bpl.n	8008306 <_dtoa_r+0x34e>
 80082f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082fc:	f7f8 f92c 	bl	8000558 <__aeabi_dmul>
 8008300:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008304:	3501      	adds	r5, #1
 8008306:	1076      	asrs	r6, r6, #1
 8008308:	3708      	adds	r7, #8
 800830a:	2e00      	cmp	r6, #0
 800830c:	d1f0      	bne.n	80082f0 <_dtoa_r+0x338>
 800830e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008312:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008316:	f7f8 fa49 	bl	80007ac <__aeabi_ddiv>
 800831a:	e9cd 0100 	strd	r0, r1, [sp]
 800831e:	e01a      	b.n	8008356 <_dtoa_r+0x39e>
 8008320:	2502      	movs	r5, #2
 8008322:	e7a3      	b.n	800826c <_dtoa_r+0x2b4>
 8008324:	f000 80a0 	beq.w	8008468 <_dtoa_r+0x4b0>
 8008328:	f1ca 0600 	rsb	r6, sl, #0
 800832c:	4b9f      	ldr	r3, [pc, #636]	; (80085ac <_dtoa_r+0x5f4>)
 800832e:	4fa0      	ldr	r7, [pc, #640]	; (80085b0 <_dtoa_r+0x5f8>)
 8008330:	f006 020f 	and.w	r2, r6, #15
 8008334:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008340:	f7f8 f90a 	bl	8000558 <__aeabi_dmul>
 8008344:	e9cd 0100 	strd	r0, r1, [sp]
 8008348:	1136      	asrs	r6, r6, #4
 800834a:	2300      	movs	r3, #0
 800834c:	2502      	movs	r5, #2
 800834e:	2e00      	cmp	r6, #0
 8008350:	d17f      	bne.n	8008452 <_dtoa_r+0x49a>
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1e1      	bne.n	800831a <_dtoa_r+0x362>
 8008356:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 8087 	beq.w	800846c <_dtoa_r+0x4b4>
 800835e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008362:	2200      	movs	r2, #0
 8008364:	4b93      	ldr	r3, [pc, #588]	; (80085b4 <_dtoa_r+0x5fc>)
 8008366:	4630      	mov	r0, r6
 8008368:	4639      	mov	r1, r7
 800836a:	f7f8 fb67 	bl	8000a3c <__aeabi_dcmplt>
 800836e:	2800      	cmp	r0, #0
 8008370:	d07c      	beq.n	800846c <_dtoa_r+0x4b4>
 8008372:	f1b9 0f00 	cmp.w	r9, #0
 8008376:	d079      	beq.n	800846c <_dtoa_r+0x4b4>
 8008378:	9b02      	ldr	r3, [sp, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	dd35      	ble.n	80083ea <_dtoa_r+0x432>
 800837e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008382:	9308      	str	r3, [sp, #32]
 8008384:	4639      	mov	r1, r7
 8008386:	2200      	movs	r2, #0
 8008388:	4b8b      	ldr	r3, [pc, #556]	; (80085b8 <_dtoa_r+0x600>)
 800838a:	4630      	mov	r0, r6
 800838c:	f7f8 f8e4 	bl	8000558 <__aeabi_dmul>
 8008390:	e9cd 0100 	strd	r0, r1, [sp]
 8008394:	9f02      	ldr	r7, [sp, #8]
 8008396:	3501      	adds	r5, #1
 8008398:	4628      	mov	r0, r5
 800839a:	f7f8 f873 	bl	8000484 <__aeabi_i2d>
 800839e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083a2:	f7f8 f8d9 	bl	8000558 <__aeabi_dmul>
 80083a6:	2200      	movs	r2, #0
 80083a8:	4b84      	ldr	r3, [pc, #528]	; (80085bc <_dtoa_r+0x604>)
 80083aa:	f7f7 ff1f 	bl	80001ec <__adddf3>
 80083ae:	4605      	mov	r5, r0
 80083b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80083b4:	2f00      	cmp	r7, #0
 80083b6:	d15d      	bne.n	8008474 <_dtoa_r+0x4bc>
 80083b8:	2200      	movs	r2, #0
 80083ba:	4b81      	ldr	r3, [pc, #516]	; (80085c0 <_dtoa_r+0x608>)
 80083bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083c0:	f7f7 ff12 	bl	80001e8 <__aeabi_dsub>
 80083c4:	462a      	mov	r2, r5
 80083c6:	4633      	mov	r3, r6
 80083c8:	e9cd 0100 	strd	r0, r1, [sp]
 80083cc:	f7f8 fb54 	bl	8000a78 <__aeabi_dcmpgt>
 80083d0:	2800      	cmp	r0, #0
 80083d2:	f040 8288 	bne.w	80088e6 <_dtoa_r+0x92e>
 80083d6:	462a      	mov	r2, r5
 80083d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80083dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083e0:	f7f8 fb2c 	bl	8000a3c <__aeabi_dcmplt>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	f040 827c 	bne.w	80088e2 <_dtoa_r+0x92a>
 80083ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083ee:	e9cd 2300 	strd	r2, r3, [sp]
 80083f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f2c0 8150 	blt.w	800869a <_dtoa_r+0x6e2>
 80083fa:	f1ba 0f0e 	cmp.w	sl, #14
 80083fe:	f300 814c 	bgt.w	800869a <_dtoa_r+0x6e2>
 8008402:	4b6a      	ldr	r3, [pc, #424]	; (80085ac <_dtoa_r+0x5f4>)
 8008404:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008408:	ed93 7b00 	vldr	d7, [r3]
 800840c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800840e:	2b00      	cmp	r3, #0
 8008410:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008414:	f280 80d8 	bge.w	80085c8 <_dtoa_r+0x610>
 8008418:	f1b9 0f00 	cmp.w	r9, #0
 800841c:	f300 80d4 	bgt.w	80085c8 <_dtoa_r+0x610>
 8008420:	f040 825e 	bne.w	80088e0 <_dtoa_r+0x928>
 8008424:	2200      	movs	r2, #0
 8008426:	4b66      	ldr	r3, [pc, #408]	; (80085c0 <_dtoa_r+0x608>)
 8008428:	ec51 0b17 	vmov	r0, r1, d7
 800842c:	f7f8 f894 	bl	8000558 <__aeabi_dmul>
 8008430:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008434:	f7f8 fb16 	bl	8000a64 <__aeabi_dcmpge>
 8008438:	464f      	mov	r7, r9
 800843a:	464e      	mov	r6, r9
 800843c:	2800      	cmp	r0, #0
 800843e:	f040 8234 	bne.w	80088aa <_dtoa_r+0x8f2>
 8008442:	2331      	movs	r3, #49	; 0x31
 8008444:	f10b 0501 	add.w	r5, fp, #1
 8008448:	f88b 3000 	strb.w	r3, [fp]
 800844c:	f10a 0a01 	add.w	sl, sl, #1
 8008450:	e22f      	b.n	80088b2 <_dtoa_r+0x8fa>
 8008452:	07f2      	lsls	r2, r6, #31
 8008454:	d505      	bpl.n	8008462 <_dtoa_r+0x4aa>
 8008456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800845a:	f7f8 f87d 	bl	8000558 <__aeabi_dmul>
 800845e:	3501      	adds	r5, #1
 8008460:	2301      	movs	r3, #1
 8008462:	1076      	asrs	r6, r6, #1
 8008464:	3708      	adds	r7, #8
 8008466:	e772      	b.n	800834e <_dtoa_r+0x396>
 8008468:	2502      	movs	r5, #2
 800846a:	e774      	b.n	8008356 <_dtoa_r+0x39e>
 800846c:	f8cd a020 	str.w	sl, [sp, #32]
 8008470:	464f      	mov	r7, r9
 8008472:	e791      	b.n	8008398 <_dtoa_r+0x3e0>
 8008474:	4b4d      	ldr	r3, [pc, #308]	; (80085ac <_dtoa_r+0x5f4>)
 8008476:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800847a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800847e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008480:	2b00      	cmp	r3, #0
 8008482:	d047      	beq.n	8008514 <_dtoa_r+0x55c>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	2000      	movs	r0, #0
 800848a:	494e      	ldr	r1, [pc, #312]	; (80085c4 <_dtoa_r+0x60c>)
 800848c:	f7f8 f98e 	bl	80007ac <__aeabi_ddiv>
 8008490:	462a      	mov	r2, r5
 8008492:	4633      	mov	r3, r6
 8008494:	f7f7 fea8 	bl	80001e8 <__aeabi_dsub>
 8008498:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800849c:	465d      	mov	r5, fp
 800849e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084a2:	f7f8 faf3 	bl	8000a8c <__aeabi_d2iz>
 80084a6:	4606      	mov	r6, r0
 80084a8:	f7f7 ffec 	bl	8000484 <__aeabi_i2d>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084b4:	f7f7 fe98 	bl	80001e8 <__aeabi_dsub>
 80084b8:	3630      	adds	r6, #48	; 0x30
 80084ba:	f805 6b01 	strb.w	r6, [r5], #1
 80084be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084c2:	e9cd 0100 	strd	r0, r1, [sp]
 80084c6:	f7f8 fab9 	bl	8000a3c <__aeabi_dcmplt>
 80084ca:	2800      	cmp	r0, #0
 80084cc:	d163      	bne.n	8008596 <_dtoa_r+0x5de>
 80084ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084d2:	2000      	movs	r0, #0
 80084d4:	4937      	ldr	r1, [pc, #220]	; (80085b4 <_dtoa_r+0x5fc>)
 80084d6:	f7f7 fe87 	bl	80001e8 <__aeabi_dsub>
 80084da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084de:	f7f8 faad 	bl	8000a3c <__aeabi_dcmplt>
 80084e2:	2800      	cmp	r0, #0
 80084e4:	f040 80b7 	bne.w	8008656 <_dtoa_r+0x69e>
 80084e8:	eba5 030b 	sub.w	r3, r5, fp
 80084ec:	429f      	cmp	r7, r3
 80084ee:	f77f af7c 	ble.w	80083ea <_dtoa_r+0x432>
 80084f2:	2200      	movs	r2, #0
 80084f4:	4b30      	ldr	r3, [pc, #192]	; (80085b8 <_dtoa_r+0x600>)
 80084f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084fa:	f7f8 f82d 	bl	8000558 <__aeabi_dmul>
 80084fe:	2200      	movs	r2, #0
 8008500:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008504:	4b2c      	ldr	r3, [pc, #176]	; (80085b8 <_dtoa_r+0x600>)
 8008506:	e9dd 0100 	ldrd	r0, r1, [sp]
 800850a:	f7f8 f825 	bl	8000558 <__aeabi_dmul>
 800850e:	e9cd 0100 	strd	r0, r1, [sp]
 8008512:	e7c4      	b.n	800849e <_dtoa_r+0x4e6>
 8008514:	462a      	mov	r2, r5
 8008516:	4633      	mov	r3, r6
 8008518:	f7f8 f81e 	bl	8000558 <__aeabi_dmul>
 800851c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008520:	eb0b 0507 	add.w	r5, fp, r7
 8008524:	465e      	mov	r6, fp
 8008526:	e9dd 0100 	ldrd	r0, r1, [sp]
 800852a:	f7f8 faaf 	bl	8000a8c <__aeabi_d2iz>
 800852e:	4607      	mov	r7, r0
 8008530:	f7f7 ffa8 	bl	8000484 <__aeabi_i2d>
 8008534:	3730      	adds	r7, #48	; 0x30
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800853e:	f7f7 fe53 	bl	80001e8 <__aeabi_dsub>
 8008542:	f806 7b01 	strb.w	r7, [r6], #1
 8008546:	42ae      	cmp	r6, r5
 8008548:	e9cd 0100 	strd	r0, r1, [sp]
 800854c:	f04f 0200 	mov.w	r2, #0
 8008550:	d126      	bne.n	80085a0 <_dtoa_r+0x5e8>
 8008552:	4b1c      	ldr	r3, [pc, #112]	; (80085c4 <_dtoa_r+0x60c>)
 8008554:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008558:	f7f7 fe48 	bl	80001ec <__adddf3>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008564:	f7f8 fa88 	bl	8000a78 <__aeabi_dcmpgt>
 8008568:	2800      	cmp	r0, #0
 800856a:	d174      	bne.n	8008656 <_dtoa_r+0x69e>
 800856c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008570:	2000      	movs	r0, #0
 8008572:	4914      	ldr	r1, [pc, #80]	; (80085c4 <_dtoa_r+0x60c>)
 8008574:	f7f7 fe38 	bl	80001e8 <__aeabi_dsub>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008580:	f7f8 fa5c 	bl	8000a3c <__aeabi_dcmplt>
 8008584:	2800      	cmp	r0, #0
 8008586:	f43f af30 	beq.w	80083ea <_dtoa_r+0x432>
 800858a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800858e:	2b30      	cmp	r3, #48	; 0x30
 8008590:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008594:	d002      	beq.n	800859c <_dtoa_r+0x5e4>
 8008596:	f8dd a020 	ldr.w	sl, [sp, #32]
 800859a:	e04a      	b.n	8008632 <_dtoa_r+0x67a>
 800859c:	4615      	mov	r5, r2
 800859e:	e7f4      	b.n	800858a <_dtoa_r+0x5d2>
 80085a0:	4b05      	ldr	r3, [pc, #20]	; (80085b8 <_dtoa_r+0x600>)
 80085a2:	f7f7 ffd9 	bl	8000558 <__aeabi_dmul>
 80085a6:	e9cd 0100 	strd	r0, r1, [sp]
 80085aa:	e7bc      	b.n	8008526 <_dtoa_r+0x56e>
 80085ac:	0800b418 	.word	0x0800b418
 80085b0:	0800b3f0 	.word	0x0800b3f0
 80085b4:	3ff00000 	.word	0x3ff00000
 80085b8:	40240000 	.word	0x40240000
 80085bc:	401c0000 	.word	0x401c0000
 80085c0:	40140000 	.word	0x40140000
 80085c4:	3fe00000 	.word	0x3fe00000
 80085c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80085cc:	465d      	mov	r5, fp
 80085ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085d2:	4630      	mov	r0, r6
 80085d4:	4639      	mov	r1, r7
 80085d6:	f7f8 f8e9 	bl	80007ac <__aeabi_ddiv>
 80085da:	f7f8 fa57 	bl	8000a8c <__aeabi_d2iz>
 80085de:	4680      	mov	r8, r0
 80085e0:	f7f7 ff50 	bl	8000484 <__aeabi_i2d>
 80085e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085e8:	f7f7 ffb6 	bl	8000558 <__aeabi_dmul>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	4630      	mov	r0, r6
 80085f2:	4639      	mov	r1, r7
 80085f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80085f8:	f7f7 fdf6 	bl	80001e8 <__aeabi_dsub>
 80085fc:	f805 6b01 	strb.w	r6, [r5], #1
 8008600:	eba5 060b 	sub.w	r6, r5, fp
 8008604:	45b1      	cmp	r9, r6
 8008606:	4602      	mov	r2, r0
 8008608:	460b      	mov	r3, r1
 800860a:	d139      	bne.n	8008680 <_dtoa_r+0x6c8>
 800860c:	f7f7 fdee 	bl	80001ec <__adddf3>
 8008610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008614:	4606      	mov	r6, r0
 8008616:	460f      	mov	r7, r1
 8008618:	f7f8 fa2e 	bl	8000a78 <__aeabi_dcmpgt>
 800861c:	b9c8      	cbnz	r0, 8008652 <_dtoa_r+0x69a>
 800861e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008622:	4630      	mov	r0, r6
 8008624:	4639      	mov	r1, r7
 8008626:	f7f8 f9ff 	bl	8000a28 <__aeabi_dcmpeq>
 800862a:	b110      	cbz	r0, 8008632 <_dtoa_r+0x67a>
 800862c:	f018 0f01 	tst.w	r8, #1
 8008630:	d10f      	bne.n	8008652 <_dtoa_r+0x69a>
 8008632:	9904      	ldr	r1, [sp, #16]
 8008634:	4620      	mov	r0, r4
 8008636:	f000 fac1 	bl	8008bbc <_Bfree>
 800863a:	2300      	movs	r3, #0
 800863c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800863e:	702b      	strb	r3, [r5, #0]
 8008640:	f10a 0301 	add.w	r3, sl, #1
 8008644:	6013      	str	r3, [r2, #0]
 8008646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 8241 	beq.w	8008ad0 <_dtoa_r+0xb18>
 800864e:	601d      	str	r5, [r3, #0]
 8008650:	e23e      	b.n	8008ad0 <_dtoa_r+0xb18>
 8008652:	f8cd a020 	str.w	sl, [sp, #32]
 8008656:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800865a:	2a39      	cmp	r2, #57	; 0x39
 800865c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8008660:	d108      	bne.n	8008674 <_dtoa_r+0x6bc>
 8008662:	459b      	cmp	fp, r3
 8008664:	d10a      	bne.n	800867c <_dtoa_r+0x6c4>
 8008666:	9b08      	ldr	r3, [sp, #32]
 8008668:	3301      	adds	r3, #1
 800866a:	9308      	str	r3, [sp, #32]
 800866c:	2330      	movs	r3, #48	; 0x30
 800866e:	f88b 3000 	strb.w	r3, [fp]
 8008672:	465b      	mov	r3, fp
 8008674:	781a      	ldrb	r2, [r3, #0]
 8008676:	3201      	adds	r2, #1
 8008678:	701a      	strb	r2, [r3, #0]
 800867a:	e78c      	b.n	8008596 <_dtoa_r+0x5de>
 800867c:	461d      	mov	r5, r3
 800867e:	e7ea      	b.n	8008656 <_dtoa_r+0x69e>
 8008680:	2200      	movs	r2, #0
 8008682:	4b9b      	ldr	r3, [pc, #620]	; (80088f0 <_dtoa_r+0x938>)
 8008684:	f7f7 ff68 	bl	8000558 <__aeabi_dmul>
 8008688:	2200      	movs	r2, #0
 800868a:	2300      	movs	r3, #0
 800868c:	4606      	mov	r6, r0
 800868e:	460f      	mov	r7, r1
 8008690:	f7f8 f9ca 	bl	8000a28 <__aeabi_dcmpeq>
 8008694:	2800      	cmp	r0, #0
 8008696:	d09a      	beq.n	80085ce <_dtoa_r+0x616>
 8008698:	e7cb      	b.n	8008632 <_dtoa_r+0x67a>
 800869a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800869c:	2a00      	cmp	r2, #0
 800869e:	f000 808b 	beq.w	80087b8 <_dtoa_r+0x800>
 80086a2:	9a06      	ldr	r2, [sp, #24]
 80086a4:	2a01      	cmp	r2, #1
 80086a6:	dc6e      	bgt.n	8008786 <_dtoa_r+0x7ce>
 80086a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80086aa:	2a00      	cmp	r2, #0
 80086ac:	d067      	beq.n	800877e <_dtoa_r+0x7c6>
 80086ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086b2:	9f07      	ldr	r7, [sp, #28]
 80086b4:	9d05      	ldr	r5, [sp, #20]
 80086b6:	9a05      	ldr	r2, [sp, #20]
 80086b8:	2101      	movs	r1, #1
 80086ba:	441a      	add	r2, r3
 80086bc:	4620      	mov	r0, r4
 80086be:	9205      	str	r2, [sp, #20]
 80086c0:	4498      	add	r8, r3
 80086c2:	f000 fb1b 	bl	8008cfc <__i2b>
 80086c6:	4606      	mov	r6, r0
 80086c8:	2d00      	cmp	r5, #0
 80086ca:	dd0c      	ble.n	80086e6 <_dtoa_r+0x72e>
 80086cc:	f1b8 0f00 	cmp.w	r8, #0
 80086d0:	dd09      	ble.n	80086e6 <_dtoa_r+0x72e>
 80086d2:	4545      	cmp	r5, r8
 80086d4:	9a05      	ldr	r2, [sp, #20]
 80086d6:	462b      	mov	r3, r5
 80086d8:	bfa8      	it	ge
 80086da:	4643      	movge	r3, r8
 80086dc:	1ad2      	subs	r2, r2, r3
 80086de:	9205      	str	r2, [sp, #20]
 80086e0:	1aed      	subs	r5, r5, r3
 80086e2:	eba8 0803 	sub.w	r8, r8, r3
 80086e6:	9b07      	ldr	r3, [sp, #28]
 80086e8:	b1eb      	cbz	r3, 8008726 <_dtoa_r+0x76e>
 80086ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d067      	beq.n	80087c0 <_dtoa_r+0x808>
 80086f0:	b18f      	cbz	r7, 8008716 <_dtoa_r+0x75e>
 80086f2:	4631      	mov	r1, r6
 80086f4:	463a      	mov	r2, r7
 80086f6:	4620      	mov	r0, r4
 80086f8:	f000 fba0 	bl	8008e3c <__pow5mult>
 80086fc:	9a04      	ldr	r2, [sp, #16]
 80086fe:	4601      	mov	r1, r0
 8008700:	4606      	mov	r6, r0
 8008702:	4620      	mov	r0, r4
 8008704:	f000 fb03 	bl	8008d0e <__multiply>
 8008708:	9904      	ldr	r1, [sp, #16]
 800870a:	9008      	str	r0, [sp, #32]
 800870c:	4620      	mov	r0, r4
 800870e:	f000 fa55 	bl	8008bbc <_Bfree>
 8008712:	9b08      	ldr	r3, [sp, #32]
 8008714:	9304      	str	r3, [sp, #16]
 8008716:	9b07      	ldr	r3, [sp, #28]
 8008718:	1bda      	subs	r2, r3, r7
 800871a:	d004      	beq.n	8008726 <_dtoa_r+0x76e>
 800871c:	9904      	ldr	r1, [sp, #16]
 800871e:	4620      	mov	r0, r4
 8008720:	f000 fb8c 	bl	8008e3c <__pow5mult>
 8008724:	9004      	str	r0, [sp, #16]
 8008726:	2101      	movs	r1, #1
 8008728:	4620      	mov	r0, r4
 800872a:	f000 fae7 	bl	8008cfc <__i2b>
 800872e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008730:	4607      	mov	r7, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 81d0 	beq.w	8008ad8 <_dtoa_r+0xb20>
 8008738:	461a      	mov	r2, r3
 800873a:	4601      	mov	r1, r0
 800873c:	4620      	mov	r0, r4
 800873e:	f000 fb7d 	bl	8008e3c <__pow5mult>
 8008742:	9b06      	ldr	r3, [sp, #24]
 8008744:	2b01      	cmp	r3, #1
 8008746:	4607      	mov	r7, r0
 8008748:	dc40      	bgt.n	80087cc <_dtoa_r+0x814>
 800874a:	9b00      	ldr	r3, [sp, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d139      	bne.n	80087c4 <_dtoa_r+0x80c>
 8008750:	9b01      	ldr	r3, [sp, #4]
 8008752:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008756:	2b00      	cmp	r3, #0
 8008758:	d136      	bne.n	80087c8 <_dtoa_r+0x810>
 800875a:	9b01      	ldr	r3, [sp, #4]
 800875c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008760:	0d1b      	lsrs	r3, r3, #20
 8008762:	051b      	lsls	r3, r3, #20
 8008764:	b12b      	cbz	r3, 8008772 <_dtoa_r+0x7ba>
 8008766:	9b05      	ldr	r3, [sp, #20]
 8008768:	3301      	adds	r3, #1
 800876a:	9305      	str	r3, [sp, #20]
 800876c:	f108 0801 	add.w	r8, r8, #1
 8008770:	2301      	movs	r3, #1
 8008772:	9307      	str	r3, [sp, #28]
 8008774:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008776:	2b00      	cmp	r3, #0
 8008778:	d12a      	bne.n	80087d0 <_dtoa_r+0x818>
 800877a:	2001      	movs	r0, #1
 800877c:	e030      	b.n	80087e0 <_dtoa_r+0x828>
 800877e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008780:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008784:	e795      	b.n	80086b2 <_dtoa_r+0x6fa>
 8008786:	9b07      	ldr	r3, [sp, #28]
 8008788:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800878c:	42bb      	cmp	r3, r7
 800878e:	bfbf      	itttt	lt
 8008790:	9b07      	ldrlt	r3, [sp, #28]
 8008792:	9707      	strlt	r7, [sp, #28]
 8008794:	1afa      	sublt	r2, r7, r3
 8008796:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008798:	bfbb      	ittet	lt
 800879a:	189b      	addlt	r3, r3, r2
 800879c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800879e:	1bdf      	subge	r7, r3, r7
 80087a0:	2700      	movlt	r7, #0
 80087a2:	f1b9 0f00 	cmp.w	r9, #0
 80087a6:	bfb5      	itete	lt
 80087a8:	9b05      	ldrlt	r3, [sp, #20]
 80087aa:	9d05      	ldrge	r5, [sp, #20]
 80087ac:	eba3 0509 	sublt.w	r5, r3, r9
 80087b0:	464b      	movge	r3, r9
 80087b2:	bfb8      	it	lt
 80087b4:	2300      	movlt	r3, #0
 80087b6:	e77e      	b.n	80086b6 <_dtoa_r+0x6fe>
 80087b8:	9f07      	ldr	r7, [sp, #28]
 80087ba:	9d05      	ldr	r5, [sp, #20]
 80087bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80087be:	e783      	b.n	80086c8 <_dtoa_r+0x710>
 80087c0:	9a07      	ldr	r2, [sp, #28]
 80087c2:	e7ab      	b.n	800871c <_dtoa_r+0x764>
 80087c4:	2300      	movs	r3, #0
 80087c6:	e7d4      	b.n	8008772 <_dtoa_r+0x7ba>
 80087c8:	9b00      	ldr	r3, [sp, #0]
 80087ca:	e7d2      	b.n	8008772 <_dtoa_r+0x7ba>
 80087cc:	2300      	movs	r3, #0
 80087ce:	9307      	str	r3, [sp, #28]
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80087d6:	6918      	ldr	r0, [r3, #16]
 80087d8:	f000 fa42 	bl	8008c60 <__hi0bits>
 80087dc:	f1c0 0020 	rsb	r0, r0, #32
 80087e0:	4440      	add	r0, r8
 80087e2:	f010 001f 	ands.w	r0, r0, #31
 80087e6:	d047      	beq.n	8008878 <_dtoa_r+0x8c0>
 80087e8:	f1c0 0320 	rsb	r3, r0, #32
 80087ec:	2b04      	cmp	r3, #4
 80087ee:	dd3b      	ble.n	8008868 <_dtoa_r+0x8b0>
 80087f0:	9b05      	ldr	r3, [sp, #20]
 80087f2:	f1c0 001c 	rsb	r0, r0, #28
 80087f6:	4403      	add	r3, r0
 80087f8:	9305      	str	r3, [sp, #20]
 80087fa:	4405      	add	r5, r0
 80087fc:	4480      	add	r8, r0
 80087fe:	9b05      	ldr	r3, [sp, #20]
 8008800:	2b00      	cmp	r3, #0
 8008802:	dd05      	ble.n	8008810 <_dtoa_r+0x858>
 8008804:	461a      	mov	r2, r3
 8008806:	9904      	ldr	r1, [sp, #16]
 8008808:	4620      	mov	r0, r4
 800880a:	f000 fb65 	bl	8008ed8 <__lshift>
 800880e:	9004      	str	r0, [sp, #16]
 8008810:	f1b8 0f00 	cmp.w	r8, #0
 8008814:	dd05      	ble.n	8008822 <_dtoa_r+0x86a>
 8008816:	4639      	mov	r1, r7
 8008818:	4642      	mov	r2, r8
 800881a:	4620      	mov	r0, r4
 800881c:	f000 fb5c 	bl	8008ed8 <__lshift>
 8008820:	4607      	mov	r7, r0
 8008822:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008824:	b353      	cbz	r3, 800887c <_dtoa_r+0x8c4>
 8008826:	4639      	mov	r1, r7
 8008828:	9804      	ldr	r0, [sp, #16]
 800882a:	f000 fba9 	bl	8008f80 <__mcmp>
 800882e:	2800      	cmp	r0, #0
 8008830:	da24      	bge.n	800887c <_dtoa_r+0x8c4>
 8008832:	2300      	movs	r3, #0
 8008834:	220a      	movs	r2, #10
 8008836:	9904      	ldr	r1, [sp, #16]
 8008838:	4620      	mov	r0, r4
 800883a:	f000 f9d6 	bl	8008bea <__multadd>
 800883e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008840:	9004      	str	r0, [sp, #16]
 8008842:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 814d 	beq.w	8008ae6 <_dtoa_r+0xb2e>
 800884c:	2300      	movs	r3, #0
 800884e:	4631      	mov	r1, r6
 8008850:	220a      	movs	r2, #10
 8008852:	4620      	mov	r0, r4
 8008854:	f000 f9c9 	bl	8008bea <__multadd>
 8008858:	9b02      	ldr	r3, [sp, #8]
 800885a:	2b00      	cmp	r3, #0
 800885c:	4606      	mov	r6, r0
 800885e:	dc4f      	bgt.n	8008900 <_dtoa_r+0x948>
 8008860:	9b06      	ldr	r3, [sp, #24]
 8008862:	2b02      	cmp	r3, #2
 8008864:	dd4c      	ble.n	8008900 <_dtoa_r+0x948>
 8008866:	e011      	b.n	800888c <_dtoa_r+0x8d4>
 8008868:	d0c9      	beq.n	80087fe <_dtoa_r+0x846>
 800886a:	9a05      	ldr	r2, [sp, #20]
 800886c:	331c      	adds	r3, #28
 800886e:	441a      	add	r2, r3
 8008870:	9205      	str	r2, [sp, #20]
 8008872:	441d      	add	r5, r3
 8008874:	4498      	add	r8, r3
 8008876:	e7c2      	b.n	80087fe <_dtoa_r+0x846>
 8008878:	4603      	mov	r3, r0
 800887a:	e7f6      	b.n	800886a <_dtoa_r+0x8b2>
 800887c:	f1b9 0f00 	cmp.w	r9, #0
 8008880:	dc38      	bgt.n	80088f4 <_dtoa_r+0x93c>
 8008882:	9b06      	ldr	r3, [sp, #24]
 8008884:	2b02      	cmp	r3, #2
 8008886:	dd35      	ble.n	80088f4 <_dtoa_r+0x93c>
 8008888:	f8cd 9008 	str.w	r9, [sp, #8]
 800888c:	9b02      	ldr	r3, [sp, #8]
 800888e:	b963      	cbnz	r3, 80088aa <_dtoa_r+0x8f2>
 8008890:	4639      	mov	r1, r7
 8008892:	2205      	movs	r2, #5
 8008894:	4620      	mov	r0, r4
 8008896:	f000 f9a8 	bl	8008bea <__multadd>
 800889a:	4601      	mov	r1, r0
 800889c:	4607      	mov	r7, r0
 800889e:	9804      	ldr	r0, [sp, #16]
 80088a0:	f000 fb6e 	bl	8008f80 <__mcmp>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	f73f adcc 	bgt.w	8008442 <_dtoa_r+0x48a>
 80088aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088ac:	465d      	mov	r5, fp
 80088ae:	ea6f 0a03 	mvn.w	sl, r3
 80088b2:	f04f 0900 	mov.w	r9, #0
 80088b6:	4639      	mov	r1, r7
 80088b8:	4620      	mov	r0, r4
 80088ba:	f000 f97f 	bl	8008bbc <_Bfree>
 80088be:	2e00      	cmp	r6, #0
 80088c0:	f43f aeb7 	beq.w	8008632 <_dtoa_r+0x67a>
 80088c4:	f1b9 0f00 	cmp.w	r9, #0
 80088c8:	d005      	beq.n	80088d6 <_dtoa_r+0x91e>
 80088ca:	45b1      	cmp	r9, r6
 80088cc:	d003      	beq.n	80088d6 <_dtoa_r+0x91e>
 80088ce:	4649      	mov	r1, r9
 80088d0:	4620      	mov	r0, r4
 80088d2:	f000 f973 	bl	8008bbc <_Bfree>
 80088d6:	4631      	mov	r1, r6
 80088d8:	4620      	mov	r0, r4
 80088da:	f000 f96f 	bl	8008bbc <_Bfree>
 80088de:	e6a8      	b.n	8008632 <_dtoa_r+0x67a>
 80088e0:	2700      	movs	r7, #0
 80088e2:	463e      	mov	r6, r7
 80088e4:	e7e1      	b.n	80088aa <_dtoa_r+0x8f2>
 80088e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80088ea:	463e      	mov	r6, r7
 80088ec:	e5a9      	b.n	8008442 <_dtoa_r+0x48a>
 80088ee:	bf00      	nop
 80088f0:	40240000 	.word	0x40240000
 80088f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f6:	f8cd 9008 	str.w	r9, [sp, #8]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 80fa 	beq.w	8008af4 <_dtoa_r+0xb3c>
 8008900:	2d00      	cmp	r5, #0
 8008902:	dd05      	ble.n	8008910 <_dtoa_r+0x958>
 8008904:	4631      	mov	r1, r6
 8008906:	462a      	mov	r2, r5
 8008908:	4620      	mov	r0, r4
 800890a:	f000 fae5 	bl	8008ed8 <__lshift>
 800890e:	4606      	mov	r6, r0
 8008910:	9b07      	ldr	r3, [sp, #28]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d04c      	beq.n	80089b0 <_dtoa_r+0x9f8>
 8008916:	6871      	ldr	r1, [r6, #4]
 8008918:	4620      	mov	r0, r4
 800891a:	f000 f91b 	bl	8008b54 <_Balloc>
 800891e:	6932      	ldr	r2, [r6, #16]
 8008920:	3202      	adds	r2, #2
 8008922:	4605      	mov	r5, r0
 8008924:	0092      	lsls	r2, r2, #2
 8008926:	f106 010c 	add.w	r1, r6, #12
 800892a:	300c      	adds	r0, #12
 800892c:	f7fe fe29 	bl	8007582 <memcpy>
 8008930:	2201      	movs	r2, #1
 8008932:	4629      	mov	r1, r5
 8008934:	4620      	mov	r0, r4
 8008936:	f000 facf 	bl	8008ed8 <__lshift>
 800893a:	9b00      	ldr	r3, [sp, #0]
 800893c:	f8cd b014 	str.w	fp, [sp, #20]
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	46b1      	mov	r9, r6
 8008946:	9307      	str	r3, [sp, #28]
 8008948:	4606      	mov	r6, r0
 800894a:	4639      	mov	r1, r7
 800894c:	9804      	ldr	r0, [sp, #16]
 800894e:	f7ff faa7 	bl	8007ea0 <quorem>
 8008952:	4649      	mov	r1, r9
 8008954:	4605      	mov	r5, r0
 8008956:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800895a:	9804      	ldr	r0, [sp, #16]
 800895c:	f000 fb10 	bl	8008f80 <__mcmp>
 8008960:	4632      	mov	r2, r6
 8008962:	9000      	str	r0, [sp, #0]
 8008964:	4639      	mov	r1, r7
 8008966:	4620      	mov	r0, r4
 8008968:	f000 fb24 	bl	8008fb4 <__mdiff>
 800896c:	68c3      	ldr	r3, [r0, #12]
 800896e:	4602      	mov	r2, r0
 8008970:	bb03      	cbnz	r3, 80089b4 <_dtoa_r+0x9fc>
 8008972:	4601      	mov	r1, r0
 8008974:	9008      	str	r0, [sp, #32]
 8008976:	9804      	ldr	r0, [sp, #16]
 8008978:	f000 fb02 	bl	8008f80 <__mcmp>
 800897c:	9a08      	ldr	r2, [sp, #32]
 800897e:	4603      	mov	r3, r0
 8008980:	4611      	mov	r1, r2
 8008982:	4620      	mov	r0, r4
 8008984:	9308      	str	r3, [sp, #32]
 8008986:	f000 f919 	bl	8008bbc <_Bfree>
 800898a:	9b08      	ldr	r3, [sp, #32]
 800898c:	b9a3      	cbnz	r3, 80089b8 <_dtoa_r+0xa00>
 800898e:	9a06      	ldr	r2, [sp, #24]
 8008990:	b992      	cbnz	r2, 80089b8 <_dtoa_r+0xa00>
 8008992:	9a07      	ldr	r2, [sp, #28]
 8008994:	b982      	cbnz	r2, 80089b8 <_dtoa_r+0xa00>
 8008996:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800899a:	d029      	beq.n	80089f0 <_dtoa_r+0xa38>
 800899c:	9b00      	ldr	r3, [sp, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	dd01      	ble.n	80089a6 <_dtoa_r+0x9ee>
 80089a2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80089a6:	9b05      	ldr	r3, [sp, #20]
 80089a8:	1c5d      	adds	r5, r3, #1
 80089aa:	f883 8000 	strb.w	r8, [r3]
 80089ae:	e782      	b.n	80088b6 <_dtoa_r+0x8fe>
 80089b0:	4630      	mov	r0, r6
 80089b2:	e7c2      	b.n	800893a <_dtoa_r+0x982>
 80089b4:	2301      	movs	r3, #1
 80089b6:	e7e3      	b.n	8008980 <_dtoa_r+0x9c8>
 80089b8:	9a00      	ldr	r2, [sp, #0]
 80089ba:	2a00      	cmp	r2, #0
 80089bc:	db04      	blt.n	80089c8 <_dtoa_r+0xa10>
 80089be:	d125      	bne.n	8008a0c <_dtoa_r+0xa54>
 80089c0:	9a06      	ldr	r2, [sp, #24]
 80089c2:	bb1a      	cbnz	r2, 8008a0c <_dtoa_r+0xa54>
 80089c4:	9a07      	ldr	r2, [sp, #28]
 80089c6:	bb0a      	cbnz	r2, 8008a0c <_dtoa_r+0xa54>
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	ddec      	ble.n	80089a6 <_dtoa_r+0x9ee>
 80089cc:	2201      	movs	r2, #1
 80089ce:	9904      	ldr	r1, [sp, #16]
 80089d0:	4620      	mov	r0, r4
 80089d2:	f000 fa81 	bl	8008ed8 <__lshift>
 80089d6:	4639      	mov	r1, r7
 80089d8:	9004      	str	r0, [sp, #16]
 80089da:	f000 fad1 	bl	8008f80 <__mcmp>
 80089de:	2800      	cmp	r0, #0
 80089e0:	dc03      	bgt.n	80089ea <_dtoa_r+0xa32>
 80089e2:	d1e0      	bne.n	80089a6 <_dtoa_r+0x9ee>
 80089e4:	f018 0f01 	tst.w	r8, #1
 80089e8:	d0dd      	beq.n	80089a6 <_dtoa_r+0x9ee>
 80089ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80089ee:	d1d8      	bne.n	80089a2 <_dtoa_r+0x9ea>
 80089f0:	9b05      	ldr	r3, [sp, #20]
 80089f2:	9a05      	ldr	r2, [sp, #20]
 80089f4:	1c5d      	adds	r5, r3, #1
 80089f6:	2339      	movs	r3, #57	; 0x39
 80089f8:	7013      	strb	r3, [r2, #0]
 80089fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089fe:	2b39      	cmp	r3, #57	; 0x39
 8008a00:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008a04:	d04f      	beq.n	8008aa6 <_dtoa_r+0xaee>
 8008a06:	3301      	adds	r3, #1
 8008a08:	7013      	strb	r3, [r2, #0]
 8008a0a:	e754      	b.n	80088b6 <_dtoa_r+0x8fe>
 8008a0c:	9a05      	ldr	r2, [sp, #20]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f102 0501 	add.w	r5, r2, #1
 8008a14:	dd06      	ble.n	8008a24 <_dtoa_r+0xa6c>
 8008a16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a1a:	d0e9      	beq.n	80089f0 <_dtoa_r+0xa38>
 8008a1c:	f108 0801 	add.w	r8, r8, #1
 8008a20:	9b05      	ldr	r3, [sp, #20]
 8008a22:	e7c2      	b.n	80089aa <_dtoa_r+0x9f2>
 8008a24:	9a02      	ldr	r2, [sp, #8]
 8008a26:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008a2a:	eba5 030b 	sub.w	r3, r5, fp
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d021      	beq.n	8008a76 <_dtoa_r+0xabe>
 8008a32:	2300      	movs	r3, #0
 8008a34:	220a      	movs	r2, #10
 8008a36:	9904      	ldr	r1, [sp, #16]
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 f8d6 	bl	8008bea <__multadd>
 8008a3e:	45b1      	cmp	r9, r6
 8008a40:	9004      	str	r0, [sp, #16]
 8008a42:	f04f 0300 	mov.w	r3, #0
 8008a46:	f04f 020a 	mov.w	r2, #10
 8008a4a:	4649      	mov	r1, r9
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	d105      	bne.n	8008a5c <_dtoa_r+0xaa4>
 8008a50:	f000 f8cb 	bl	8008bea <__multadd>
 8008a54:	4681      	mov	r9, r0
 8008a56:	4606      	mov	r6, r0
 8008a58:	9505      	str	r5, [sp, #20]
 8008a5a:	e776      	b.n	800894a <_dtoa_r+0x992>
 8008a5c:	f000 f8c5 	bl	8008bea <__multadd>
 8008a60:	4631      	mov	r1, r6
 8008a62:	4681      	mov	r9, r0
 8008a64:	2300      	movs	r3, #0
 8008a66:	220a      	movs	r2, #10
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f000 f8be 	bl	8008bea <__multadd>
 8008a6e:	4606      	mov	r6, r0
 8008a70:	e7f2      	b.n	8008a58 <_dtoa_r+0xaa0>
 8008a72:	f04f 0900 	mov.w	r9, #0
 8008a76:	2201      	movs	r2, #1
 8008a78:	9904      	ldr	r1, [sp, #16]
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f000 fa2c 	bl	8008ed8 <__lshift>
 8008a80:	4639      	mov	r1, r7
 8008a82:	9004      	str	r0, [sp, #16]
 8008a84:	f000 fa7c 	bl	8008f80 <__mcmp>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	dcb6      	bgt.n	80089fa <_dtoa_r+0xa42>
 8008a8c:	d102      	bne.n	8008a94 <_dtoa_r+0xadc>
 8008a8e:	f018 0f01 	tst.w	r8, #1
 8008a92:	d1b2      	bne.n	80089fa <_dtoa_r+0xa42>
 8008a94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a98:	2b30      	cmp	r3, #48	; 0x30
 8008a9a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008a9e:	f47f af0a 	bne.w	80088b6 <_dtoa_r+0x8fe>
 8008aa2:	4615      	mov	r5, r2
 8008aa4:	e7f6      	b.n	8008a94 <_dtoa_r+0xadc>
 8008aa6:	4593      	cmp	fp, r2
 8008aa8:	d105      	bne.n	8008ab6 <_dtoa_r+0xafe>
 8008aaa:	2331      	movs	r3, #49	; 0x31
 8008aac:	f10a 0a01 	add.w	sl, sl, #1
 8008ab0:	f88b 3000 	strb.w	r3, [fp]
 8008ab4:	e6ff      	b.n	80088b6 <_dtoa_r+0x8fe>
 8008ab6:	4615      	mov	r5, r2
 8008ab8:	e79f      	b.n	80089fa <_dtoa_r+0xa42>
 8008aba:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008b20 <_dtoa_r+0xb68>
 8008abe:	e007      	b.n	8008ad0 <_dtoa_r+0xb18>
 8008ac0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ac2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008b24 <_dtoa_r+0xb6c>
 8008ac6:	b11b      	cbz	r3, 8008ad0 <_dtoa_r+0xb18>
 8008ac8:	f10b 0308 	add.w	r3, fp, #8
 8008acc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	4658      	mov	r0, fp
 8008ad2:	b017      	add	sp, #92	; 0x5c
 8008ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad8:	9b06      	ldr	r3, [sp, #24]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	f77f ae35 	ble.w	800874a <_dtoa_r+0x792>
 8008ae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ae2:	9307      	str	r3, [sp, #28]
 8008ae4:	e649      	b.n	800877a <_dtoa_r+0x7c2>
 8008ae6:	9b02      	ldr	r3, [sp, #8]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	dc03      	bgt.n	8008af4 <_dtoa_r+0xb3c>
 8008aec:	9b06      	ldr	r3, [sp, #24]
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	f73f aecc 	bgt.w	800888c <_dtoa_r+0x8d4>
 8008af4:	465d      	mov	r5, fp
 8008af6:	4639      	mov	r1, r7
 8008af8:	9804      	ldr	r0, [sp, #16]
 8008afa:	f7ff f9d1 	bl	8007ea0 <quorem>
 8008afe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008b02:	f805 8b01 	strb.w	r8, [r5], #1
 8008b06:	9a02      	ldr	r2, [sp, #8]
 8008b08:	eba5 030b 	sub.w	r3, r5, fp
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	ddb0      	ble.n	8008a72 <_dtoa_r+0xaba>
 8008b10:	2300      	movs	r3, #0
 8008b12:	220a      	movs	r2, #10
 8008b14:	9904      	ldr	r1, [sp, #16]
 8008b16:	4620      	mov	r0, r4
 8008b18:	f000 f867 	bl	8008bea <__multadd>
 8008b1c:	9004      	str	r0, [sp, #16]
 8008b1e:	e7ea      	b.n	8008af6 <_dtoa_r+0xb3e>
 8008b20:	0800b35c 	.word	0x0800b35c
 8008b24:	0800b380 	.word	0x0800b380

08008b28 <_localeconv_r>:
 8008b28:	4b04      	ldr	r3, [pc, #16]	; (8008b3c <_localeconv_r+0x14>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6a18      	ldr	r0, [r3, #32]
 8008b2e:	4b04      	ldr	r3, [pc, #16]	; (8008b40 <_localeconv_r+0x18>)
 8008b30:	2800      	cmp	r0, #0
 8008b32:	bf08      	it	eq
 8008b34:	4618      	moveq	r0, r3
 8008b36:	30f0      	adds	r0, #240	; 0xf0
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	20000094 	.word	0x20000094
 8008b40:	200000f8 	.word	0x200000f8

08008b44 <malloc>:
 8008b44:	4b02      	ldr	r3, [pc, #8]	; (8008b50 <malloc+0xc>)
 8008b46:	4601      	mov	r1, r0
 8008b48:	6818      	ldr	r0, [r3, #0]
 8008b4a:	f000 bb3b 	b.w	80091c4 <_malloc_r>
 8008b4e:	bf00      	nop
 8008b50:	20000094 	.word	0x20000094

08008b54 <_Balloc>:
 8008b54:	b570      	push	{r4, r5, r6, lr}
 8008b56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b58:	4604      	mov	r4, r0
 8008b5a:	460e      	mov	r6, r1
 8008b5c:	b93d      	cbnz	r5, 8008b6e <_Balloc+0x1a>
 8008b5e:	2010      	movs	r0, #16
 8008b60:	f7ff fff0 	bl	8008b44 <malloc>
 8008b64:	6260      	str	r0, [r4, #36]	; 0x24
 8008b66:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b6a:	6005      	str	r5, [r0, #0]
 8008b6c:	60c5      	str	r5, [r0, #12]
 8008b6e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008b70:	68eb      	ldr	r3, [r5, #12]
 8008b72:	b183      	cbz	r3, 8008b96 <_Balloc+0x42>
 8008b74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008b7c:	b9b8      	cbnz	r0, 8008bae <_Balloc+0x5a>
 8008b7e:	2101      	movs	r1, #1
 8008b80:	fa01 f506 	lsl.w	r5, r1, r6
 8008b84:	1d6a      	adds	r2, r5, #5
 8008b86:	0092      	lsls	r2, r2, #2
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f000 fabf 	bl	800910c <_calloc_r>
 8008b8e:	b160      	cbz	r0, 8008baa <_Balloc+0x56>
 8008b90:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008b94:	e00e      	b.n	8008bb4 <_Balloc+0x60>
 8008b96:	2221      	movs	r2, #33	; 0x21
 8008b98:	2104      	movs	r1, #4
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f000 fab6 	bl	800910c <_calloc_r>
 8008ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ba2:	60e8      	str	r0, [r5, #12]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1e4      	bne.n	8008b74 <_Balloc+0x20>
 8008baa:	2000      	movs	r0, #0
 8008bac:	bd70      	pop	{r4, r5, r6, pc}
 8008bae:	6802      	ldr	r2, [r0, #0]
 8008bb0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bba:	e7f7      	b.n	8008bac <_Balloc+0x58>

08008bbc <_Bfree>:
 8008bbc:	b570      	push	{r4, r5, r6, lr}
 8008bbe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008bc0:	4606      	mov	r6, r0
 8008bc2:	460d      	mov	r5, r1
 8008bc4:	b93c      	cbnz	r4, 8008bd6 <_Bfree+0x1a>
 8008bc6:	2010      	movs	r0, #16
 8008bc8:	f7ff ffbc 	bl	8008b44 <malloc>
 8008bcc:	6270      	str	r0, [r6, #36]	; 0x24
 8008bce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bd2:	6004      	str	r4, [r0, #0]
 8008bd4:	60c4      	str	r4, [r0, #12]
 8008bd6:	b13d      	cbz	r5, 8008be8 <_Bfree+0x2c>
 8008bd8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008bda:	686a      	ldr	r2, [r5, #4]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008be2:	6029      	str	r1, [r5, #0]
 8008be4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008be8:	bd70      	pop	{r4, r5, r6, pc}

08008bea <__multadd>:
 8008bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bee:	690d      	ldr	r5, [r1, #16]
 8008bf0:	461f      	mov	r7, r3
 8008bf2:	4606      	mov	r6, r0
 8008bf4:	460c      	mov	r4, r1
 8008bf6:	f101 0c14 	add.w	ip, r1, #20
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	f8dc 0000 	ldr.w	r0, [ip]
 8008c00:	b281      	uxth	r1, r0
 8008c02:	fb02 7101 	mla	r1, r2, r1, r7
 8008c06:	0c0f      	lsrs	r7, r1, #16
 8008c08:	0c00      	lsrs	r0, r0, #16
 8008c0a:	fb02 7000 	mla	r0, r2, r0, r7
 8008c0e:	b289      	uxth	r1, r1
 8008c10:	3301      	adds	r3, #1
 8008c12:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008c16:	429d      	cmp	r5, r3
 8008c18:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008c1c:	f84c 1b04 	str.w	r1, [ip], #4
 8008c20:	dcec      	bgt.n	8008bfc <__multadd+0x12>
 8008c22:	b1d7      	cbz	r7, 8008c5a <__multadd+0x70>
 8008c24:	68a3      	ldr	r3, [r4, #8]
 8008c26:	42ab      	cmp	r3, r5
 8008c28:	dc12      	bgt.n	8008c50 <__multadd+0x66>
 8008c2a:	6861      	ldr	r1, [r4, #4]
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	3101      	adds	r1, #1
 8008c30:	f7ff ff90 	bl	8008b54 <_Balloc>
 8008c34:	6922      	ldr	r2, [r4, #16]
 8008c36:	3202      	adds	r2, #2
 8008c38:	f104 010c 	add.w	r1, r4, #12
 8008c3c:	4680      	mov	r8, r0
 8008c3e:	0092      	lsls	r2, r2, #2
 8008c40:	300c      	adds	r0, #12
 8008c42:	f7fe fc9e 	bl	8007582 <memcpy>
 8008c46:	4621      	mov	r1, r4
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f7ff ffb7 	bl	8008bbc <_Bfree>
 8008c4e:	4644      	mov	r4, r8
 8008c50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c54:	3501      	adds	r5, #1
 8008c56:	615f      	str	r7, [r3, #20]
 8008c58:	6125      	str	r5, [r4, #16]
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008c60 <__hi0bits>:
 8008c60:	0c02      	lsrs	r2, r0, #16
 8008c62:	0412      	lsls	r2, r2, #16
 8008c64:	4603      	mov	r3, r0
 8008c66:	b9b2      	cbnz	r2, 8008c96 <__hi0bits+0x36>
 8008c68:	0403      	lsls	r3, r0, #16
 8008c6a:	2010      	movs	r0, #16
 8008c6c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008c70:	bf04      	itt	eq
 8008c72:	021b      	lsleq	r3, r3, #8
 8008c74:	3008      	addeq	r0, #8
 8008c76:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008c7a:	bf04      	itt	eq
 8008c7c:	011b      	lsleq	r3, r3, #4
 8008c7e:	3004      	addeq	r0, #4
 8008c80:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008c84:	bf04      	itt	eq
 8008c86:	009b      	lsleq	r3, r3, #2
 8008c88:	3002      	addeq	r0, #2
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	db06      	blt.n	8008c9c <__hi0bits+0x3c>
 8008c8e:	005b      	lsls	r3, r3, #1
 8008c90:	d503      	bpl.n	8008c9a <__hi0bits+0x3a>
 8008c92:	3001      	adds	r0, #1
 8008c94:	4770      	bx	lr
 8008c96:	2000      	movs	r0, #0
 8008c98:	e7e8      	b.n	8008c6c <__hi0bits+0xc>
 8008c9a:	2020      	movs	r0, #32
 8008c9c:	4770      	bx	lr

08008c9e <__lo0bits>:
 8008c9e:	6803      	ldr	r3, [r0, #0]
 8008ca0:	f013 0207 	ands.w	r2, r3, #7
 8008ca4:	4601      	mov	r1, r0
 8008ca6:	d00b      	beq.n	8008cc0 <__lo0bits+0x22>
 8008ca8:	07da      	lsls	r2, r3, #31
 8008caa:	d423      	bmi.n	8008cf4 <__lo0bits+0x56>
 8008cac:	0798      	lsls	r0, r3, #30
 8008cae:	bf49      	itett	mi
 8008cb0:	085b      	lsrmi	r3, r3, #1
 8008cb2:	089b      	lsrpl	r3, r3, #2
 8008cb4:	2001      	movmi	r0, #1
 8008cb6:	600b      	strmi	r3, [r1, #0]
 8008cb8:	bf5c      	itt	pl
 8008cba:	600b      	strpl	r3, [r1, #0]
 8008cbc:	2002      	movpl	r0, #2
 8008cbe:	4770      	bx	lr
 8008cc0:	b298      	uxth	r0, r3
 8008cc2:	b9a8      	cbnz	r0, 8008cf0 <__lo0bits+0x52>
 8008cc4:	0c1b      	lsrs	r3, r3, #16
 8008cc6:	2010      	movs	r0, #16
 8008cc8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008ccc:	bf04      	itt	eq
 8008cce:	0a1b      	lsreq	r3, r3, #8
 8008cd0:	3008      	addeq	r0, #8
 8008cd2:	071a      	lsls	r2, r3, #28
 8008cd4:	bf04      	itt	eq
 8008cd6:	091b      	lsreq	r3, r3, #4
 8008cd8:	3004      	addeq	r0, #4
 8008cda:	079a      	lsls	r2, r3, #30
 8008cdc:	bf04      	itt	eq
 8008cde:	089b      	lsreq	r3, r3, #2
 8008ce0:	3002      	addeq	r0, #2
 8008ce2:	07da      	lsls	r2, r3, #31
 8008ce4:	d402      	bmi.n	8008cec <__lo0bits+0x4e>
 8008ce6:	085b      	lsrs	r3, r3, #1
 8008ce8:	d006      	beq.n	8008cf8 <__lo0bits+0x5a>
 8008cea:	3001      	adds	r0, #1
 8008cec:	600b      	str	r3, [r1, #0]
 8008cee:	4770      	bx	lr
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	e7e9      	b.n	8008cc8 <__lo0bits+0x2a>
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	4770      	bx	lr
 8008cf8:	2020      	movs	r0, #32
 8008cfa:	4770      	bx	lr

08008cfc <__i2b>:
 8008cfc:	b510      	push	{r4, lr}
 8008cfe:	460c      	mov	r4, r1
 8008d00:	2101      	movs	r1, #1
 8008d02:	f7ff ff27 	bl	8008b54 <_Balloc>
 8008d06:	2201      	movs	r2, #1
 8008d08:	6144      	str	r4, [r0, #20]
 8008d0a:	6102      	str	r2, [r0, #16]
 8008d0c:	bd10      	pop	{r4, pc}

08008d0e <__multiply>:
 8008d0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d12:	4614      	mov	r4, r2
 8008d14:	690a      	ldr	r2, [r1, #16]
 8008d16:	6923      	ldr	r3, [r4, #16]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	bfb8      	it	lt
 8008d1c:	460b      	movlt	r3, r1
 8008d1e:	4688      	mov	r8, r1
 8008d20:	bfbc      	itt	lt
 8008d22:	46a0      	movlt	r8, r4
 8008d24:	461c      	movlt	r4, r3
 8008d26:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d2a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008d2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d32:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d36:	eb07 0609 	add.w	r6, r7, r9
 8008d3a:	42b3      	cmp	r3, r6
 8008d3c:	bfb8      	it	lt
 8008d3e:	3101      	addlt	r1, #1
 8008d40:	f7ff ff08 	bl	8008b54 <_Balloc>
 8008d44:	f100 0514 	add.w	r5, r0, #20
 8008d48:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008d4c:	462b      	mov	r3, r5
 8008d4e:	2200      	movs	r2, #0
 8008d50:	4573      	cmp	r3, lr
 8008d52:	d316      	bcc.n	8008d82 <__multiply+0x74>
 8008d54:	f104 0214 	add.w	r2, r4, #20
 8008d58:	f108 0114 	add.w	r1, r8, #20
 8008d5c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008d60:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	9b00      	ldr	r3, [sp, #0]
 8008d68:	9201      	str	r2, [sp, #4]
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d80c      	bhi.n	8008d88 <__multiply+0x7a>
 8008d6e:	2e00      	cmp	r6, #0
 8008d70:	dd03      	ble.n	8008d7a <__multiply+0x6c>
 8008d72:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d05d      	beq.n	8008e36 <__multiply+0x128>
 8008d7a:	6106      	str	r6, [r0, #16]
 8008d7c:	b003      	add	sp, #12
 8008d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d82:	f843 2b04 	str.w	r2, [r3], #4
 8008d86:	e7e3      	b.n	8008d50 <__multiply+0x42>
 8008d88:	f8b2 b000 	ldrh.w	fp, [r2]
 8008d8c:	f1bb 0f00 	cmp.w	fp, #0
 8008d90:	d023      	beq.n	8008dda <__multiply+0xcc>
 8008d92:	4689      	mov	r9, r1
 8008d94:	46ac      	mov	ip, r5
 8008d96:	f04f 0800 	mov.w	r8, #0
 8008d9a:	f859 4b04 	ldr.w	r4, [r9], #4
 8008d9e:	f8dc a000 	ldr.w	sl, [ip]
 8008da2:	b2a3      	uxth	r3, r4
 8008da4:	fa1f fa8a 	uxth.w	sl, sl
 8008da8:	fb0b a303 	mla	r3, fp, r3, sl
 8008dac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008db0:	f8dc 4000 	ldr.w	r4, [ip]
 8008db4:	4443      	add	r3, r8
 8008db6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008dba:	fb0b 840a 	mla	r4, fp, sl, r8
 8008dbe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008dc2:	46e2      	mov	sl, ip
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008dca:	454f      	cmp	r7, r9
 8008dcc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008dd0:	f84a 3b04 	str.w	r3, [sl], #4
 8008dd4:	d82b      	bhi.n	8008e2e <__multiply+0x120>
 8008dd6:	f8cc 8004 	str.w	r8, [ip, #4]
 8008dda:	9b01      	ldr	r3, [sp, #4]
 8008ddc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008de0:	3204      	adds	r2, #4
 8008de2:	f1ba 0f00 	cmp.w	sl, #0
 8008de6:	d020      	beq.n	8008e2a <__multiply+0x11c>
 8008de8:	682b      	ldr	r3, [r5, #0]
 8008dea:	4689      	mov	r9, r1
 8008dec:	46a8      	mov	r8, r5
 8008dee:	f04f 0b00 	mov.w	fp, #0
 8008df2:	f8b9 c000 	ldrh.w	ip, [r9]
 8008df6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008dfa:	fb0a 440c 	mla	r4, sl, ip, r4
 8008dfe:	445c      	add	r4, fp
 8008e00:	46c4      	mov	ip, r8
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008e08:	f84c 3b04 	str.w	r3, [ip], #4
 8008e0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e10:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008e14:	0c1b      	lsrs	r3, r3, #16
 8008e16:	fb0a b303 	mla	r3, sl, r3, fp
 8008e1a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008e1e:	454f      	cmp	r7, r9
 8008e20:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008e24:	d805      	bhi.n	8008e32 <__multiply+0x124>
 8008e26:	f8c8 3004 	str.w	r3, [r8, #4]
 8008e2a:	3504      	adds	r5, #4
 8008e2c:	e79b      	b.n	8008d66 <__multiply+0x58>
 8008e2e:	46d4      	mov	ip, sl
 8008e30:	e7b3      	b.n	8008d9a <__multiply+0x8c>
 8008e32:	46e0      	mov	r8, ip
 8008e34:	e7dd      	b.n	8008df2 <__multiply+0xe4>
 8008e36:	3e01      	subs	r6, #1
 8008e38:	e799      	b.n	8008d6e <__multiply+0x60>
	...

08008e3c <__pow5mult>:
 8008e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e40:	4615      	mov	r5, r2
 8008e42:	f012 0203 	ands.w	r2, r2, #3
 8008e46:	4606      	mov	r6, r0
 8008e48:	460f      	mov	r7, r1
 8008e4a:	d007      	beq.n	8008e5c <__pow5mult+0x20>
 8008e4c:	3a01      	subs	r2, #1
 8008e4e:	4c21      	ldr	r4, [pc, #132]	; (8008ed4 <__pow5mult+0x98>)
 8008e50:	2300      	movs	r3, #0
 8008e52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e56:	f7ff fec8 	bl	8008bea <__multadd>
 8008e5a:	4607      	mov	r7, r0
 8008e5c:	10ad      	asrs	r5, r5, #2
 8008e5e:	d035      	beq.n	8008ecc <__pow5mult+0x90>
 8008e60:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e62:	b93c      	cbnz	r4, 8008e74 <__pow5mult+0x38>
 8008e64:	2010      	movs	r0, #16
 8008e66:	f7ff fe6d 	bl	8008b44 <malloc>
 8008e6a:	6270      	str	r0, [r6, #36]	; 0x24
 8008e6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e70:	6004      	str	r4, [r0, #0]
 8008e72:	60c4      	str	r4, [r0, #12]
 8008e74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e7c:	b94c      	cbnz	r4, 8008e92 <__pow5mult+0x56>
 8008e7e:	f240 2171 	movw	r1, #625	; 0x271
 8008e82:	4630      	mov	r0, r6
 8008e84:	f7ff ff3a 	bl	8008cfc <__i2b>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e8e:	4604      	mov	r4, r0
 8008e90:	6003      	str	r3, [r0, #0]
 8008e92:	f04f 0800 	mov.w	r8, #0
 8008e96:	07eb      	lsls	r3, r5, #31
 8008e98:	d50a      	bpl.n	8008eb0 <__pow5mult+0x74>
 8008e9a:	4639      	mov	r1, r7
 8008e9c:	4622      	mov	r2, r4
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f7ff ff35 	bl	8008d0e <__multiply>
 8008ea4:	4639      	mov	r1, r7
 8008ea6:	4681      	mov	r9, r0
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f7ff fe87 	bl	8008bbc <_Bfree>
 8008eae:	464f      	mov	r7, r9
 8008eb0:	106d      	asrs	r5, r5, #1
 8008eb2:	d00b      	beq.n	8008ecc <__pow5mult+0x90>
 8008eb4:	6820      	ldr	r0, [r4, #0]
 8008eb6:	b938      	cbnz	r0, 8008ec8 <__pow5mult+0x8c>
 8008eb8:	4622      	mov	r2, r4
 8008eba:	4621      	mov	r1, r4
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	f7ff ff26 	bl	8008d0e <__multiply>
 8008ec2:	6020      	str	r0, [r4, #0]
 8008ec4:	f8c0 8000 	str.w	r8, [r0]
 8008ec8:	4604      	mov	r4, r0
 8008eca:	e7e4      	b.n	8008e96 <__pow5mult+0x5a>
 8008ecc:	4638      	mov	r0, r7
 8008ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ed2:	bf00      	nop
 8008ed4:	0800b4e0 	.word	0x0800b4e0

08008ed8 <__lshift>:
 8008ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008edc:	460c      	mov	r4, r1
 8008ede:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ee2:	6923      	ldr	r3, [r4, #16]
 8008ee4:	6849      	ldr	r1, [r1, #4]
 8008ee6:	eb0a 0903 	add.w	r9, sl, r3
 8008eea:	68a3      	ldr	r3, [r4, #8]
 8008eec:	4607      	mov	r7, r0
 8008eee:	4616      	mov	r6, r2
 8008ef0:	f109 0501 	add.w	r5, r9, #1
 8008ef4:	42ab      	cmp	r3, r5
 8008ef6:	db32      	blt.n	8008f5e <__lshift+0x86>
 8008ef8:	4638      	mov	r0, r7
 8008efa:	f7ff fe2b 	bl	8008b54 <_Balloc>
 8008efe:	2300      	movs	r3, #0
 8008f00:	4680      	mov	r8, r0
 8008f02:	f100 0114 	add.w	r1, r0, #20
 8008f06:	461a      	mov	r2, r3
 8008f08:	4553      	cmp	r3, sl
 8008f0a:	db2b      	blt.n	8008f64 <__lshift+0x8c>
 8008f0c:	6920      	ldr	r0, [r4, #16]
 8008f0e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f12:	f104 0314 	add.w	r3, r4, #20
 8008f16:	f016 021f 	ands.w	r2, r6, #31
 8008f1a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f1e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f22:	d025      	beq.n	8008f70 <__lshift+0x98>
 8008f24:	f1c2 0e20 	rsb	lr, r2, #32
 8008f28:	2000      	movs	r0, #0
 8008f2a:	681e      	ldr	r6, [r3, #0]
 8008f2c:	468a      	mov	sl, r1
 8008f2e:	4096      	lsls	r6, r2
 8008f30:	4330      	orrs	r0, r6
 8008f32:	f84a 0b04 	str.w	r0, [sl], #4
 8008f36:	f853 0b04 	ldr.w	r0, [r3], #4
 8008f3a:	459c      	cmp	ip, r3
 8008f3c:	fa20 f00e 	lsr.w	r0, r0, lr
 8008f40:	d814      	bhi.n	8008f6c <__lshift+0x94>
 8008f42:	6048      	str	r0, [r1, #4]
 8008f44:	b108      	cbz	r0, 8008f4a <__lshift+0x72>
 8008f46:	f109 0502 	add.w	r5, r9, #2
 8008f4a:	3d01      	subs	r5, #1
 8008f4c:	4638      	mov	r0, r7
 8008f4e:	f8c8 5010 	str.w	r5, [r8, #16]
 8008f52:	4621      	mov	r1, r4
 8008f54:	f7ff fe32 	bl	8008bbc <_Bfree>
 8008f58:	4640      	mov	r0, r8
 8008f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f5e:	3101      	adds	r1, #1
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	e7c7      	b.n	8008ef4 <__lshift+0x1c>
 8008f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	e7cd      	b.n	8008f08 <__lshift+0x30>
 8008f6c:	4651      	mov	r1, sl
 8008f6e:	e7dc      	b.n	8008f2a <__lshift+0x52>
 8008f70:	3904      	subs	r1, #4
 8008f72:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f76:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f7a:	459c      	cmp	ip, r3
 8008f7c:	d8f9      	bhi.n	8008f72 <__lshift+0x9a>
 8008f7e:	e7e4      	b.n	8008f4a <__lshift+0x72>

08008f80 <__mcmp>:
 8008f80:	6903      	ldr	r3, [r0, #16]
 8008f82:	690a      	ldr	r2, [r1, #16]
 8008f84:	1a9b      	subs	r3, r3, r2
 8008f86:	b530      	push	{r4, r5, lr}
 8008f88:	d10c      	bne.n	8008fa4 <__mcmp+0x24>
 8008f8a:	0092      	lsls	r2, r2, #2
 8008f8c:	3014      	adds	r0, #20
 8008f8e:	3114      	adds	r1, #20
 8008f90:	1884      	adds	r4, r0, r2
 8008f92:	4411      	add	r1, r2
 8008f94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008f98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008f9c:	4295      	cmp	r5, r2
 8008f9e:	d003      	beq.n	8008fa8 <__mcmp+0x28>
 8008fa0:	d305      	bcc.n	8008fae <__mcmp+0x2e>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	bd30      	pop	{r4, r5, pc}
 8008fa8:	42a0      	cmp	r0, r4
 8008faa:	d3f3      	bcc.n	8008f94 <__mcmp+0x14>
 8008fac:	e7fa      	b.n	8008fa4 <__mcmp+0x24>
 8008fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fb2:	e7f7      	b.n	8008fa4 <__mcmp+0x24>

08008fb4 <__mdiff>:
 8008fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb8:	460d      	mov	r5, r1
 8008fba:	4607      	mov	r7, r0
 8008fbc:	4611      	mov	r1, r2
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	4614      	mov	r4, r2
 8008fc2:	f7ff ffdd 	bl	8008f80 <__mcmp>
 8008fc6:	1e06      	subs	r6, r0, #0
 8008fc8:	d108      	bne.n	8008fdc <__mdiff+0x28>
 8008fca:	4631      	mov	r1, r6
 8008fcc:	4638      	mov	r0, r7
 8008fce:	f7ff fdc1 	bl	8008b54 <_Balloc>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fdc:	bfa4      	itt	ge
 8008fde:	4623      	movge	r3, r4
 8008fe0:	462c      	movge	r4, r5
 8008fe2:	4638      	mov	r0, r7
 8008fe4:	6861      	ldr	r1, [r4, #4]
 8008fe6:	bfa6      	itte	ge
 8008fe8:	461d      	movge	r5, r3
 8008fea:	2600      	movge	r6, #0
 8008fec:	2601      	movlt	r6, #1
 8008fee:	f7ff fdb1 	bl	8008b54 <_Balloc>
 8008ff2:	692b      	ldr	r3, [r5, #16]
 8008ff4:	60c6      	str	r6, [r0, #12]
 8008ff6:	6926      	ldr	r6, [r4, #16]
 8008ff8:	f105 0914 	add.w	r9, r5, #20
 8008ffc:	f104 0214 	add.w	r2, r4, #20
 8009000:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009004:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009008:	f100 0514 	add.w	r5, r0, #20
 800900c:	f04f 0e00 	mov.w	lr, #0
 8009010:	f852 ab04 	ldr.w	sl, [r2], #4
 8009014:	f859 4b04 	ldr.w	r4, [r9], #4
 8009018:	fa1e f18a 	uxtah	r1, lr, sl
 800901c:	b2a3      	uxth	r3, r4
 800901e:	1ac9      	subs	r1, r1, r3
 8009020:	0c23      	lsrs	r3, r4, #16
 8009022:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009026:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800902a:	b289      	uxth	r1, r1
 800902c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009030:	45c8      	cmp	r8, r9
 8009032:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009036:	4694      	mov	ip, r2
 8009038:	f845 3b04 	str.w	r3, [r5], #4
 800903c:	d8e8      	bhi.n	8009010 <__mdiff+0x5c>
 800903e:	45bc      	cmp	ip, r7
 8009040:	d304      	bcc.n	800904c <__mdiff+0x98>
 8009042:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009046:	b183      	cbz	r3, 800906a <__mdiff+0xb6>
 8009048:	6106      	str	r6, [r0, #16]
 800904a:	e7c5      	b.n	8008fd8 <__mdiff+0x24>
 800904c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009050:	fa1e f381 	uxtah	r3, lr, r1
 8009054:	141a      	asrs	r2, r3, #16
 8009056:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800905a:	b29b      	uxth	r3, r3
 800905c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009060:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009064:	f845 3b04 	str.w	r3, [r5], #4
 8009068:	e7e9      	b.n	800903e <__mdiff+0x8a>
 800906a:	3e01      	subs	r6, #1
 800906c:	e7e9      	b.n	8009042 <__mdiff+0x8e>

0800906e <__d2b>:
 800906e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009072:	460e      	mov	r6, r1
 8009074:	2101      	movs	r1, #1
 8009076:	ec59 8b10 	vmov	r8, r9, d0
 800907a:	4615      	mov	r5, r2
 800907c:	f7ff fd6a 	bl	8008b54 <_Balloc>
 8009080:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009084:	4607      	mov	r7, r0
 8009086:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800908a:	bb34      	cbnz	r4, 80090da <__d2b+0x6c>
 800908c:	9301      	str	r3, [sp, #4]
 800908e:	f1b8 0300 	subs.w	r3, r8, #0
 8009092:	d027      	beq.n	80090e4 <__d2b+0x76>
 8009094:	a802      	add	r0, sp, #8
 8009096:	f840 3d08 	str.w	r3, [r0, #-8]!
 800909a:	f7ff fe00 	bl	8008c9e <__lo0bits>
 800909e:	9900      	ldr	r1, [sp, #0]
 80090a0:	b1f0      	cbz	r0, 80090e0 <__d2b+0x72>
 80090a2:	9a01      	ldr	r2, [sp, #4]
 80090a4:	f1c0 0320 	rsb	r3, r0, #32
 80090a8:	fa02 f303 	lsl.w	r3, r2, r3
 80090ac:	430b      	orrs	r3, r1
 80090ae:	40c2      	lsrs	r2, r0
 80090b0:	617b      	str	r3, [r7, #20]
 80090b2:	9201      	str	r2, [sp, #4]
 80090b4:	9b01      	ldr	r3, [sp, #4]
 80090b6:	61bb      	str	r3, [r7, #24]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	bf14      	ite	ne
 80090bc:	2102      	movne	r1, #2
 80090be:	2101      	moveq	r1, #1
 80090c0:	6139      	str	r1, [r7, #16]
 80090c2:	b1c4      	cbz	r4, 80090f6 <__d2b+0x88>
 80090c4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80090c8:	4404      	add	r4, r0
 80090ca:	6034      	str	r4, [r6, #0]
 80090cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80090d0:	6028      	str	r0, [r5, #0]
 80090d2:	4638      	mov	r0, r7
 80090d4:	b003      	add	sp, #12
 80090d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090de:	e7d5      	b.n	800908c <__d2b+0x1e>
 80090e0:	6179      	str	r1, [r7, #20]
 80090e2:	e7e7      	b.n	80090b4 <__d2b+0x46>
 80090e4:	a801      	add	r0, sp, #4
 80090e6:	f7ff fdda 	bl	8008c9e <__lo0bits>
 80090ea:	9b01      	ldr	r3, [sp, #4]
 80090ec:	617b      	str	r3, [r7, #20]
 80090ee:	2101      	movs	r1, #1
 80090f0:	6139      	str	r1, [r7, #16]
 80090f2:	3020      	adds	r0, #32
 80090f4:	e7e5      	b.n	80090c2 <__d2b+0x54>
 80090f6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80090fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80090fe:	6030      	str	r0, [r6, #0]
 8009100:	6918      	ldr	r0, [r3, #16]
 8009102:	f7ff fdad 	bl	8008c60 <__hi0bits>
 8009106:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800910a:	e7e1      	b.n	80090d0 <__d2b+0x62>

0800910c <_calloc_r>:
 800910c:	b538      	push	{r3, r4, r5, lr}
 800910e:	fb02 f401 	mul.w	r4, r2, r1
 8009112:	4621      	mov	r1, r4
 8009114:	f000 f856 	bl	80091c4 <_malloc_r>
 8009118:	4605      	mov	r5, r0
 800911a:	b118      	cbz	r0, 8009124 <_calloc_r+0x18>
 800911c:	4622      	mov	r2, r4
 800911e:	2100      	movs	r1, #0
 8009120:	f7fe fa3a 	bl	8007598 <memset>
 8009124:	4628      	mov	r0, r5
 8009126:	bd38      	pop	{r3, r4, r5, pc}

08009128 <_free_r>:
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	4605      	mov	r5, r0
 800912c:	2900      	cmp	r1, #0
 800912e:	d045      	beq.n	80091bc <_free_r+0x94>
 8009130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009134:	1f0c      	subs	r4, r1, #4
 8009136:	2b00      	cmp	r3, #0
 8009138:	bfb8      	it	lt
 800913a:	18e4      	addlt	r4, r4, r3
 800913c:	f000 fa29 	bl	8009592 <__malloc_lock>
 8009140:	4a1f      	ldr	r2, [pc, #124]	; (80091c0 <_free_r+0x98>)
 8009142:	6813      	ldr	r3, [r2, #0]
 8009144:	4610      	mov	r0, r2
 8009146:	b933      	cbnz	r3, 8009156 <_free_r+0x2e>
 8009148:	6063      	str	r3, [r4, #4]
 800914a:	6014      	str	r4, [r2, #0]
 800914c:	4628      	mov	r0, r5
 800914e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009152:	f000 ba1f 	b.w	8009594 <__malloc_unlock>
 8009156:	42a3      	cmp	r3, r4
 8009158:	d90c      	bls.n	8009174 <_free_r+0x4c>
 800915a:	6821      	ldr	r1, [r4, #0]
 800915c:	1862      	adds	r2, r4, r1
 800915e:	4293      	cmp	r3, r2
 8009160:	bf04      	itt	eq
 8009162:	681a      	ldreq	r2, [r3, #0]
 8009164:	685b      	ldreq	r3, [r3, #4]
 8009166:	6063      	str	r3, [r4, #4]
 8009168:	bf04      	itt	eq
 800916a:	1852      	addeq	r2, r2, r1
 800916c:	6022      	streq	r2, [r4, #0]
 800916e:	6004      	str	r4, [r0, #0]
 8009170:	e7ec      	b.n	800914c <_free_r+0x24>
 8009172:	4613      	mov	r3, r2
 8009174:	685a      	ldr	r2, [r3, #4]
 8009176:	b10a      	cbz	r2, 800917c <_free_r+0x54>
 8009178:	42a2      	cmp	r2, r4
 800917a:	d9fa      	bls.n	8009172 <_free_r+0x4a>
 800917c:	6819      	ldr	r1, [r3, #0]
 800917e:	1858      	adds	r0, r3, r1
 8009180:	42a0      	cmp	r0, r4
 8009182:	d10b      	bne.n	800919c <_free_r+0x74>
 8009184:	6820      	ldr	r0, [r4, #0]
 8009186:	4401      	add	r1, r0
 8009188:	1858      	adds	r0, r3, r1
 800918a:	4282      	cmp	r2, r0
 800918c:	6019      	str	r1, [r3, #0]
 800918e:	d1dd      	bne.n	800914c <_free_r+0x24>
 8009190:	6810      	ldr	r0, [r2, #0]
 8009192:	6852      	ldr	r2, [r2, #4]
 8009194:	605a      	str	r2, [r3, #4]
 8009196:	4401      	add	r1, r0
 8009198:	6019      	str	r1, [r3, #0]
 800919a:	e7d7      	b.n	800914c <_free_r+0x24>
 800919c:	d902      	bls.n	80091a4 <_free_r+0x7c>
 800919e:	230c      	movs	r3, #12
 80091a0:	602b      	str	r3, [r5, #0]
 80091a2:	e7d3      	b.n	800914c <_free_r+0x24>
 80091a4:	6820      	ldr	r0, [r4, #0]
 80091a6:	1821      	adds	r1, r4, r0
 80091a8:	428a      	cmp	r2, r1
 80091aa:	bf04      	itt	eq
 80091ac:	6811      	ldreq	r1, [r2, #0]
 80091ae:	6852      	ldreq	r2, [r2, #4]
 80091b0:	6062      	str	r2, [r4, #4]
 80091b2:	bf04      	itt	eq
 80091b4:	1809      	addeq	r1, r1, r0
 80091b6:	6021      	streq	r1, [r4, #0]
 80091b8:	605c      	str	r4, [r3, #4]
 80091ba:	e7c7      	b.n	800914c <_free_r+0x24>
 80091bc:	bd38      	pop	{r3, r4, r5, pc}
 80091be:	bf00      	nop
 80091c0:	20000398 	.word	0x20000398

080091c4 <_malloc_r>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	1ccd      	adds	r5, r1, #3
 80091c8:	f025 0503 	bic.w	r5, r5, #3
 80091cc:	3508      	adds	r5, #8
 80091ce:	2d0c      	cmp	r5, #12
 80091d0:	bf38      	it	cc
 80091d2:	250c      	movcc	r5, #12
 80091d4:	2d00      	cmp	r5, #0
 80091d6:	4606      	mov	r6, r0
 80091d8:	db01      	blt.n	80091de <_malloc_r+0x1a>
 80091da:	42a9      	cmp	r1, r5
 80091dc:	d903      	bls.n	80091e6 <_malloc_r+0x22>
 80091de:	230c      	movs	r3, #12
 80091e0:	6033      	str	r3, [r6, #0]
 80091e2:	2000      	movs	r0, #0
 80091e4:	bd70      	pop	{r4, r5, r6, pc}
 80091e6:	f000 f9d4 	bl	8009592 <__malloc_lock>
 80091ea:	4a21      	ldr	r2, [pc, #132]	; (8009270 <_malloc_r+0xac>)
 80091ec:	6814      	ldr	r4, [r2, #0]
 80091ee:	4621      	mov	r1, r4
 80091f0:	b991      	cbnz	r1, 8009218 <_malloc_r+0x54>
 80091f2:	4c20      	ldr	r4, [pc, #128]	; (8009274 <_malloc_r+0xb0>)
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	b91b      	cbnz	r3, 8009200 <_malloc_r+0x3c>
 80091f8:	4630      	mov	r0, r6
 80091fa:	f000 f98f 	bl	800951c <_sbrk_r>
 80091fe:	6020      	str	r0, [r4, #0]
 8009200:	4629      	mov	r1, r5
 8009202:	4630      	mov	r0, r6
 8009204:	f000 f98a 	bl	800951c <_sbrk_r>
 8009208:	1c43      	adds	r3, r0, #1
 800920a:	d124      	bne.n	8009256 <_malloc_r+0x92>
 800920c:	230c      	movs	r3, #12
 800920e:	6033      	str	r3, [r6, #0]
 8009210:	4630      	mov	r0, r6
 8009212:	f000 f9bf 	bl	8009594 <__malloc_unlock>
 8009216:	e7e4      	b.n	80091e2 <_malloc_r+0x1e>
 8009218:	680b      	ldr	r3, [r1, #0]
 800921a:	1b5b      	subs	r3, r3, r5
 800921c:	d418      	bmi.n	8009250 <_malloc_r+0x8c>
 800921e:	2b0b      	cmp	r3, #11
 8009220:	d90f      	bls.n	8009242 <_malloc_r+0x7e>
 8009222:	600b      	str	r3, [r1, #0]
 8009224:	50cd      	str	r5, [r1, r3]
 8009226:	18cc      	adds	r4, r1, r3
 8009228:	4630      	mov	r0, r6
 800922a:	f000 f9b3 	bl	8009594 <__malloc_unlock>
 800922e:	f104 000b 	add.w	r0, r4, #11
 8009232:	1d23      	adds	r3, r4, #4
 8009234:	f020 0007 	bic.w	r0, r0, #7
 8009238:	1ac3      	subs	r3, r0, r3
 800923a:	d0d3      	beq.n	80091e4 <_malloc_r+0x20>
 800923c:	425a      	negs	r2, r3
 800923e:	50e2      	str	r2, [r4, r3]
 8009240:	e7d0      	b.n	80091e4 <_malloc_r+0x20>
 8009242:	428c      	cmp	r4, r1
 8009244:	684b      	ldr	r3, [r1, #4]
 8009246:	bf16      	itet	ne
 8009248:	6063      	strne	r3, [r4, #4]
 800924a:	6013      	streq	r3, [r2, #0]
 800924c:	460c      	movne	r4, r1
 800924e:	e7eb      	b.n	8009228 <_malloc_r+0x64>
 8009250:	460c      	mov	r4, r1
 8009252:	6849      	ldr	r1, [r1, #4]
 8009254:	e7cc      	b.n	80091f0 <_malloc_r+0x2c>
 8009256:	1cc4      	adds	r4, r0, #3
 8009258:	f024 0403 	bic.w	r4, r4, #3
 800925c:	42a0      	cmp	r0, r4
 800925e:	d005      	beq.n	800926c <_malloc_r+0xa8>
 8009260:	1a21      	subs	r1, r4, r0
 8009262:	4630      	mov	r0, r6
 8009264:	f000 f95a 	bl	800951c <_sbrk_r>
 8009268:	3001      	adds	r0, #1
 800926a:	d0cf      	beq.n	800920c <_malloc_r+0x48>
 800926c:	6025      	str	r5, [r4, #0]
 800926e:	e7db      	b.n	8009228 <_malloc_r+0x64>
 8009270:	20000398 	.word	0x20000398
 8009274:	2000039c 	.word	0x2000039c

08009278 <__ssputs_r>:
 8009278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800927c:	688e      	ldr	r6, [r1, #8]
 800927e:	429e      	cmp	r6, r3
 8009280:	4682      	mov	sl, r0
 8009282:	460c      	mov	r4, r1
 8009284:	4690      	mov	r8, r2
 8009286:	4699      	mov	r9, r3
 8009288:	d837      	bhi.n	80092fa <__ssputs_r+0x82>
 800928a:	898a      	ldrh	r2, [r1, #12]
 800928c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009290:	d031      	beq.n	80092f6 <__ssputs_r+0x7e>
 8009292:	6825      	ldr	r5, [r4, #0]
 8009294:	6909      	ldr	r1, [r1, #16]
 8009296:	1a6f      	subs	r7, r5, r1
 8009298:	6965      	ldr	r5, [r4, #20]
 800929a:	2302      	movs	r3, #2
 800929c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80092a4:	f109 0301 	add.w	r3, r9, #1
 80092a8:	443b      	add	r3, r7
 80092aa:	429d      	cmp	r5, r3
 80092ac:	bf38      	it	cc
 80092ae:	461d      	movcc	r5, r3
 80092b0:	0553      	lsls	r3, r2, #21
 80092b2:	d530      	bpl.n	8009316 <__ssputs_r+0x9e>
 80092b4:	4629      	mov	r1, r5
 80092b6:	f7ff ff85 	bl	80091c4 <_malloc_r>
 80092ba:	4606      	mov	r6, r0
 80092bc:	b950      	cbnz	r0, 80092d4 <__ssputs_r+0x5c>
 80092be:	230c      	movs	r3, #12
 80092c0:	f8ca 3000 	str.w	r3, [sl]
 80092c4:	89a3      	ldrh	r3, [r4, #12]
 80092c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092ca:	81a3      	strh	r3, [r4, #12]
 80092cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d4:	463a      	mov	r2, r7
 80092d6:	6921      	ldr	r1, [r4, #16]
 80092d8:	f7fe f953 	bl	8007582 <memcpy>
 80092dc:	89a3      	ldrh	r3, [r4, #12]
 80092de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80092e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092e6:	81a3      	strh	r3, [r4, #12]
 80092e8:	6126      	str	r6, [r4, #16]
 80092ea:	6165      	str	r5, [r4, #20]
 80092ec:	443e      	add	r6, r7
 80092ee:	1bed      	subs	r5, r5, r7
 80092f0:	6026      	str	r6, [r4, #0]
 80092f2:	60a5      	str	r5, [r4, #8]
 80092f4:	464e      	mov	r6, r9
 80092f6:	454e      	cmp	r6, r9
 80092f8:	d900      	bls.n	80092fc <__ssputs_r+0x84>
 80092fa:	464e      	mov	r6, r9
 80092fc:	4632      	mov	r2, r6
 80092fe:	4641      	mov	r1, r8
 8009300:	6820      	ldr	r0, [r4, #0]
 8009302:	f000 f92d 	bl	8009560 <memmove>
 8009306:	68a3      	ldr	r3, [r4, #8]
 8009308:	1b9b      	subs	r3, r3, r6
 800930a:	60a3      	str	r3, [r4, #8]
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	441e      	add	r6, r3
 8009310:	6026      	str	r6, [r4, #0]
 8009312:	2000      	movs	r0, #0
 8009314:	e7dc      	b.n	80092d0 <__ssputs_r+0x58>
 8009316:	462a      	mov	r2, r5
 8009318:	f000 f93d 	bl	8009596 <_realloc_r>
 800931c:	4606      	mov	r6, r0
 800931e:	2800      	cmp	r0, #0
 8009320:	d1e2      	bne.n	80092e8 <__ssputs_r+0x70>
 8009322:	6921      	ldr	r1, [r4, #16]
 8009324:	4650      	mov	r0, sl
 8009326:	f7ff feff 	bl	8009128 <_free_r>
 800932a:	e7c8      	b.n	80092be <__ssputs_r+0x46>

0800932c <_svfiprintf_r>:
 800932c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009330:	461d      	mov	r5, r3
 8009332:	898b      	ldrh	r3, [r1, #12]
 8009334:	061f      	lsls	r7, r3, #24
 8009336:	b09d      	sub	sp, #116	; 0x74
 8009338:	4680      	mov	r8, r0
 800933a:	460c      	mov	r4, r1
 800933c:	4616      	mov	r6, r2
 800933e:	d50f      	bpl.n	8009360 <_svfiprintf_r+0x34>
 8009340:	690b      	ldr	r3, [r1, #16]
 8009342:	b96b      	cbnz	r3, 8009360 <_svfiprintf_r+0x34>
 8009344:	2140      	movs	r1, #64	; 0x40
 8009346:	f7ff ff3d 	bl	80091c4 <_malloc_r>
 800934a:	6020      	str	r0, [r4, #0]
 800934c:	6120      	str	r0, [r4, #16]
 800934e:	b928      	cbnz	r0, 800935c <_svfiprintf_r+0x30>
 8009350:	230c      	movs	r3, #12
 8009352:	f8c8 3000 	str.w	r3, [r8]
 8009356:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800935a:	e0c8      	b.n	80094ee <_svfiprintf_r+0x1c2>
 800935c:	2340      	movs	r3, #64	; 0x40
 800935e:	6163      	str	r3, [r4, #20]
 8009360:	2300      	movs	r3, #0
 8009362:	9309      	str	r3, [sp, #36]	; 0x24
 8009364:	2320      	movs	r3, #32
 8009366:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800936a:	2330      	movs	r3, #48	; 0x30
 800936c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009370:	9503      	str	r5, [sp, #12]
 8009372:	f04f 0b01 	mov.w	fp, #1
 8009376:	4637      	mov	r7, r6
 8009378:	463d      	mov	r5, r7
 800937a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800937e:	b10b      	cbz	r3, 8009384 <_svfiprintf_r+0x58>
 8009380:	2b25      	cmp	r3, #37	; 0x25
 8009382:	d13e      	bne.n	8009402 <_svfiprintf_r+0xd6>
 8009384:	ebb7 0a06 	subs.w	sl, r7, r6
 8009388:	d00b      	beq.n	80093a2 <_svfiprintf_r+0x76>
 800938a:	4653      	mov	r3, sl
 800938c:	4632      	mov	r2, r6
 800938e:	4621      	mov	r1, r4
 8009390:	4640      	mov	r0, r8
 8009392:	f7ff ff71 	bl	8009278 <__ssputs_r>
 8009396:	3001      	adds	r0, #1
 8009398:	f000 80a4 	beq.w	80094e4 <_svfiprintf_r+0x1b8>
 800939c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800939e:	4453      	add	r3, sl
 80093a0:	9309      	str	r3, [sp, #36]	; 0x24
 80093a2:	783b      	ldrb	r3, [r7, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f000 809d 	beq.w	80094e4 <_svfiprintf_r+0x1b8>
 80093aa:	2300      	movs	r3, #0
 80093ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093b4:	9304      	str	r3, [sp, #16]
 80093b6:	9307      	str	r3, [sp, #28]
 80093b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093bc:	931a      	str	r3, [sp, #104]	; 0x68
 80093be:	462f      	mov	r7, r5
 80093c0:	2205      	movs	r2, #5
 80093c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80093c6:	4850      	ldr	r0, [pc, #320]	; (8009508 <_svfiprintf_r+0x1dc>)
 80093c8:	f7f7 fd62 	bl	8000e90 <memchr>
 80093cc:	9b04      	ldr	r3, [sp, #16]
 80093ce:	b9d0      	cbnz	r0, 8009406 <_svfiprintf_r+0xda>
 80093d0:	06d9      	lsls	r1, r3, #27
 80093d2:	bf44      	itt	mi
 80093d4:	2220      	movmi	r2, #32
 80093d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80093da:	071a      	lsls	r2, r3, #28
 80093dc:	bf44      	itt	mi
 80093de:	222b      	movmi	r2, #43	; 0x2b
 80093e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80093e4:	782a      	ldrb	r2, [r5, #0]
 80093e6:	2a2a      	cmp	r2, #42	; 0x2a
 80093e8:	d015      	beq.n	8009416 <_svfiprintf_r+0xea>
 80093ea:	9a07      	ldr	r2, [sp, #28]
 80093ec:	462f      	mov	r7, r5
 80093ee:	2000      	movs	r0, #0
 80093f0:	250a      	movs	r5, #10
 80093f2:	4639      	mov	r1, r7
 80093f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093f8:	3b30      	subs	r3, #48	; 0x30
 80093fa:	2b09      	cmp	r3, #9
 80093fc:	d94d      	bls.n	800949a <_svfiprintf_r+0x16e>
 80093fe:	b1b8      	cbz	r0, 8009430 <_svfiprintf_r+0x104>
 8009400:	e00f      	b.n	8009422 <_svfiprintf_r+0xf6>
 8009402:	462f      	mov	r7, r5
 8009404:	e7b8      	b.n	8009378 <_svfiprintf_r+0x4c>
 8009406:	4a40      	ldr	r2, [pc, #256]	; (8009508 <_svfiprintf_r+0x1dc>)
 8009408:	1a80      	subs	r0, r0, r2
 800940a:	fa0b f000 	lsl.w	r0, fp, r0
 800940e:	4318      	orrs	r0, r3
 8009410:	9004      	str	r0, [sp, #16]
 8009412:	463d      	mov	r5, r7
 8009414:	e7d3      	b.n	80093be <_svfiprintf_r+0x92>
 8009416:	9a03      	ldr	r2, [sp, #12]
 8009418:	1d11      	adds	r1, r2, #4
 800941a:	6812      	ldr	r2, [r2, #0]
 800941c:	9103      	str	r1, [sp, #12]
 800941e:	2a00      	cmp	r2, #0
 8009420:	db01      	blt.n	8009426 <_svfiprintf_r+0xfa>
 8009422:	9207      	str	r2, [sp, #28]
 8009424:	e004      	b.n	8009430 <_svfiprintf_r+0x104>
 8009426:	4252      	negs	r2, r2
 8009428:	f043 0302 	orr.w	r3, r3, #2
 800942c:	9207      	str	r2, [sp, #28]
 800942e:	9304      	str	r3, [sp, #16]
 8009430:	783b      	ldrb	r3, [r7, #0]
 8009432:	2b2e      	cmp	r3, #46	; 0x2e
 8009434:	d10c      	bne.n	8009450 <_svfiprintf_r+0x124>
 8009436:	787b      	ldrb	r3, [r7, #1]
 8009438:	2b2a      	cmp	r3, #42	; 0x2a
 800943a:	d133      	bne.n	80094a4 <_svfiprintf_r+0x178>
 800943c:	9b03      	ldr	r3, [sp, #12]
 800943e:	1d1a      	adds	r2, r3, #4
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	9203      	str	r2, [sp, #12]
 8009444:	2b00      	cmp	r3, #0
 8009446:	bfb8      	it	lt
 8009448:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800944c:	3702      	adds	r7, #2
 800944e:	9305      	str	r3, [sp, #20]
 8009450:	4d2e      	ldr	r5, [pc, #184]	; (800950c <_svfiprintf_r+0x1e0>)
 8009452:	7839      	ldrb	r1, [r7, #0]
 8009454:	2203      	movs	r2, #3
 8009456:	4628      	mov	r0, r5
 8009458:	f7f7 fd1a 	bl	8000e90 <memchr>
 800945c:	b138      	cbz	r0, 800946e <_svfiprintf_r+0x142>
 800945e:	2340      	movs	r3, #64	; 0x40
 8009460:	1b40      	subs	r0, r0, r5
 8009462:	fa03 f000 	lsl.w	r0, r3, r0
 8009466:	9b04      	ldr	r3, [sp, #16]
 8009468:	4303      	orrs	r3, r0
 800946a:	3701      	adds	r7, #1
 800946c:	9304      	str	r3, [sp, #16]
 800946e:	7839      	ldrb	r1, [r7, #0]
 8009470:	4827      	ldr	r0, [pc, #156]	; (8009510 <_svfiprintf_r+0x1e4>)
 8009472:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009476:	2206      	movs	r2, #6
 8009478:	1c7e      	adds	r6, r7, #1
 800947a:	f7f7 fd09 	bl	8000e90 <memchr>
 800947e:	2800      	cmp	r0, #0
 8009480:	d038      	beq.n	80094f4 <_svfiprintf_r+0x1c8>
 8009482:	4b24      	ldr	r3, [pc, #144]	; (8009514 <_svfiprintf_r+0x1e8>)
 8009484:	bb13      	cbnz	r3, 80094cc <_svfiprintf_r+0x1a0>
 8009486:	9b03      	ldr	r3, [sp, #12]
 8009488:	3307      	adds	r3, #7
 800948a:	f023 0307 	bic.w	r3, r3, #7
 800948e:	3308      	adds	r3, #8
 8009490:	9303      	str	r3, [sp, #12]
 8009492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009494:	444b      	add	r3, r9
 8009496:	9309      	str	r3, [sp, #36]	; 0x24
 8009498:	e76d      	b.n	8009376 <_svfiprintf_r+0x4a>
 800949a:	fb05 3202 	mla	r2, r5, r2, r3
 800949e:	2001      	movs	r0, #1
 80094a0:	460f      	mov	r7, r1
 80094a2:	e7a6      	b.n	80093f2 <_svfiprintf_r+0xc6>
 80094a4:	2300      	movs	r3, #0
 80094a6:	3701      	adds	r7, #1
 80094a8:	9305      	str	r3, [sp, #20]
 80094aa:	4619      	mov	r1, r3
 80094ac:	250a      	movs	r5, #10
 80094ae:	4638      	mov	r0, r7
 80094b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094b4:	3a30      	subs	r2, #48	; 0x30
 80094b6:	2a09      	cmp	r2, #9
 80094b8:	d903      	bls.n	80094c2 <_svfiprintf_r+0x196>
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d0c8      	beq.n	8009450 <_svfiprintf_r+0x124>
 80094be:	9105      	str	r1, [sp, #20]
 80094c0:	e7c6      	b.n	8009450 <_svfiprintf_r+0x124>
 80094c2:	fb05 2101 	mla	r1, r5, r1, r2
 80094c6:	2301      	movs	r3, #1
 80094c8:	4607      	mov	r7, r0
 80094ca:	e7f0      	b.n	80094ae <_svfiprintf_r+0x182>
 80094cc:	ab03      	add	r3, sp, #12
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	4622      	mov	r2, r4
 80094d2:	4b11      	ldr	r3, [pc, #68]	; (8009518 <_svfiprintf_r+0x1ec>)
 80094d4:	a904      	add	r1, sp, #16
 80094d6:	4640      	mov	r0, r8
 80094d8:	f7fe f8fa 	bl	80076d0 <_printf_float>
 80094dc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80094e0:	4681      	mov	r9, r0
 80094e2:	d1d6      	bne.n	8009492 <_svfiprintf_r+0x166>
 80094e4:	89a3      	ldrh	r3, [r4, #12]
 80094e6:	065b      	lsls	r3, r3, #25
 80094e8:	f53f af35 	bmi.w	8009356 <_svfiprintf_r+0x2a>
 80094ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094ee:	b01d      	add	sp, #116	; 0x74
 80094f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f4:	ab03      	add	r3, sp, #12
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	4622      	mov	r2, r4
 80094fa:	4b07      	ldr	r3, [pc, #28]	; (8009518 <_svfiprintf_r+0x1ec>)
 80094fc:	a904      	add	r1, sp, #16
 80094fe:	4640      	mov	r0, r8
 8009500:	f7fe fb9c 	bl	8007c3c <_printf_i>
 8009504:	e7ea      	b.n	80094dc <_svfiprintf_r+0x1b0>
 8009506:	bf00      	nop
 8009508:	0800b4ec 	.word	0x0800b4ec
 800950c:	0800b4f2 	.word	0x0800b4f2
 8009510:	0800b4f6 	.word	0x0800b4f6
 8009514:	080076d1 	.word	0x080076d1
 8009518:	08009279 	.word	0x08009279

0800951c <_sbrk_r>:
 800951c:	b538      	push	{r3, r4, r5, lr}
 800951e:	4c06      	ldr	r4, [pc, #24]	; (8009538 <_sbrk_r+0x1c>)
 8009520:	2300      	movs	r3, #0
 8009522:	4605      	mov	r5, r0
 8009524:	4608      	mov	r0, r1
 8009526:	6023      	str	r3, [r4, #0]
 8009528:	f7fd ff84 	bl	8007434 <_sbrk>
 800952c:	1c43      	adds	r3, r0, #1
 800952e:	d102      	bne.n	8009536 <_sbrk_r+0x1a>
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	b103      	cbz	r3, 8009536 <_sbrk_r+0x1a>
 8009534:	602b      	str	r3, [r5, #0]
 8009536:	bd38      	pop	{r3, r4, r5, pc}
 8009538:	200006ac 	.word	0x200006ac

0800953c <__ascii_mbtowc>:
 800953c:	b082      	sub	sp, #8
 800953e:	b901      	cbnz	r1, 8009542 <__ascii_mbtowc+0x6>
 8009540:	a901      	add	r1, sp, #4
 8009542:	b142      	cbz	r2, 8009556 <__ascii_mbtowc+0x1a>
 8009544:	b14b      	cbz	r3, 800955a <__ascii_mbtowc+0x1e>
 8009546:	7813      	ldrb	r3, [r2, #0]
 8009548:	600b      	str	r3, [r1, #0]
 800954a:	7812      	ldrb	r2, [r2, #0]
 800954c:	1c10      	adds	r0, r2, #0
 800954e:	bf18      	it	ne
 8009550:	2001      	movne	r0, #1
 8009552:	b002      	add	sp, #8
 8009554:	4770      	bx	lr
 8009556:	4610      	mov	r0, r2
 8009558:	e7fb      	b.n	8009552 <__ascii_mbtowc+0x16>
 800955a:	f06f 0001 	mvn.w	r0, #1
 800955e:	e7f8      	b.n	8009552 <__ascii_mbtowc+0x16>

08009560 <memmove>:
 8009560:	4288      	cmp	r0, r1
 8009562:	b510      	push	{r4, lr}
 8009564:	eb01 0302 	add.w	r3, r1, r2
 8009568:	d807      	bhi.n	800957a <memmove+0x1a>
 800956a:	1e42      	subs	r2, r0, #1
 800956c:	4299      	cmp	r1, r3
 800956e:	d00a      	beq.n	8009586 <memmove+0x26>
 8009570:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009574:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009578:	e7f8      	b.n	800956c <memmove+0xc>
 800957a:	4283      	cmp	r3, r0
 800957c:	d9f5      	bls.n	800956a <memmove+0xa>
 800957e:	1881      	adds	r1, r0, r2
 8009580:	1ad2      	subs	r2, r2, r3
 8009582:	42d3      	cmn	r3, r2
 8009584:	d100      	bne.n	8009588 <memmove+0x28>
 8009586:	bd10      	pop	{r4, pc}
 8009588:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800958c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009590:	e7f7      	b.n	8009582 <memmove+0x22>

08009592 <__malloc_lock>:
 8009592:	4770      	bx	lr

08009594 <__malloc_unlock>:
 8009594:	4770      	bx	lr

08009596 <_realloc_r>:
 8009596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009598:	4607      	mov	r7, r0
 800959a:	4614      	mov	r4, r2
 800959c:	460e      	mov	r6, r1
 800959e:	b921      	cbnz	r1, 80095aa <_realloc_r+0x14>
 80095a0:	4611      	mov	r1, r2
 80095a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80095a6:	f7ff be0d 	b.w	80091c4 <_malloc_r>
 80095aa:	b922      	cbnz	r2, 80095b6 <_realloc_r+0x20>
 80095ac:	f7ff fdbc 	bl	8009128 <_free_r>
 80095b0:	4625      	mov	r5, r4
 80095b2:	4628      	mov	r0, r5
 80095b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095b6:	f000 f821 	bl	80095fc <_malloc_usable_size_r>
 80095ba:	42a0      	cmp	r0, r4
 80095bc:	d20f      	bcs.n	80095de <_realloc_r+0x48>
 80095be:	4621      	mov	r1, r4
 80095c0:	4638      	mov	r0, r7
 80095c2:	f7ff fdff 	bl	80091c4 <_malloc_r>
 80095c6:	4605      	mov	r5, r0
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d0f2      	beq.n	80095b2 <_realloc_r+0x1c>
 80095cc:	4631      	mov	r1, r6
 80095ce:	4622      	mov	r2, r4
 80095d0:	f7fd ffd7 	bl	8007582 <memcpy>
 80095d4:	4631      	mov	r1, r6
 80095d6:	4638      	mov	r0, r7
 80095d8:	f7ff fda6 	bl	8009128 <_free_r>
 80095dc:	e7e9      	b.n	80095b2 <_realloc_r+0x1c>
 80095de:	4635      	mov	r5, r6
 80095e0:	e7e7      	b.n	80095b2 <_realloc_r+0x1c>

080095e2 <__ascii_wctomb>:
 80095e2:	b149      	cbz	r1, 80095f8 <__ascii_wctomb+0x16>
 80095e4:	2aff      	cmp	r2, #255	; 0xff
 80095e6:	bf85      	ittet	hi
 80095e8:	238a      	movhi	r3, #138	; 0x8a
 80095ea:	6003      	strhi	r3, [r0, #0]
 80095ec:	700a      	strbls	r2, [r1, #0]
 80095ee:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80095f2:	bf98      	it	ls
 80095f4:	2001      	movls	r0, #1
 80095f6:	4770      	bx	lr
 80095f8:	4608      	mov	r0, r1
 80095fa:	4770      	bx	lr

080095fc <_malloc_usable_size_r>:
 80095fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009600:	1f18      	subs	r0, r3, #4
 8009602:	2b00      	cmp	r3, #0
 8009604:	bfbc      	itt	lt
 8009606:	580b      	ldrlt	r3, [r1, r0]
 8009608:	18c0      	addlt	r0, r0, r3
 800960a:	4770      	bx	lr

0800960c <round>:
 800960c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960e:	ec57 6b10 	vmov	r6, r7, d0
 8009612:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8009616:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800961a:	2c13      	cmp	r4, #19
 800961c:	463b      	mov	r3, r7
 800961e:	463d      	mov	r5, r7
 8009620:	dc17      	bgt.n	8009652 <round+0x46>
 8009622:	2c00      	cmp	r4, #0
 8009624:	da09      	bge.n	800963a <round+0x2e>
 8009626:	3401      	adds	r4, #1
 8009628:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 800962c:	d103      	bne.n	8009636 <round+0x2a>
 800962e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009632:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009636:	2100      	movs	r1, #0
 8009638:	e02c      	b.n	8009694 <round+0x88>
 800963a:	4a18      	ldr	r2, [pc, #96]	; (800969c <round+0x90>)
 800963c:	4122      	asrs	r2, r4
 800963e:	4217      	tst	r7, r2
 8009640:	d100      	bne.n	8009644 <round+0x38>
 8009642:	b19e      	cbz	r6, 800966c <round+0x60>
 8009644:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009648:	4123      	asrs	r3, r4
 800964a:	442b      	add	r3, r5
 800964c:	ea23 0302 	bic.w	r3, r3, r2
 8009650:	e7f1      	b.n	8009636 <round+0x2a>
 8009652:	2c33      	cmp	r4, #51	; 0x33
 8009654:	dd0d      	ble.n	8009672 <round+0x66>
 8009656:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800965a:	d107      	bne.n	800966c <round+0x60>
 800965c:	4630      	mov	r0, r6
 800965e:	4639      	mov	r1, r7
 8009660:	ee10 2a10 	vmov	r2, s0
 8009664:	f7f6 fdc2 	bl	80001ec <__adddf3>
 8009668:	4606      	mov	r6, r0
 800966a:	460f      	mov	r7, r1
 800966c:	ec47 6b10 	vmov	d0, r6, r7
 8009670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009672:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8009676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800967a:	40d0      	lsrs	r0, r2
 800967c:	4206      	tst	r6, r0
 800967e:	d0f5      	beq.n	800966c <round+0x60>
 8009680:	2201      	movs	r2, #1
 8009682:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8009686:	fa02 f404 	lsl.w	r4, r2, r4
 800968a:	1931      	adds	r1, r6, r4
 800968c:	bf28      	it	cs
 800968e:	189b      	addcs	r3, r3, r2
 8009690:	ea21 0100 	bic.w	r1, r1, r0
 8009694:	461f      	mov	r7, r3
 8009696:	460e      	mov	r6, r1
 8009698:	e7e8      	b.n	800966c <round+0x60>
 800969a:	bf00      	nop
 800969c:	000fffff 	.word	0x000fffff

080096a0 <asin>:
 80096a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096a2:	ed2d 8b02 	vpush	{d8}
 80096a6:	4e26      	ldr	r6, [pc, #152]	; (8009740 <asin+0xa0>)
 80096a8:	b08b      	sub	sp, #44	; 0x2c
 80096aa:	ec55 4b10 	vmov	r4, r5, d0
 80096ae:	f000 f853 	bl	8009758 <__ieee754_asin>
 80096b2:	f996 3000 	ldrsb.w	r3, [r6]
 80096b6:	eeb0 8a40 	vmov.f32	s16, s0
 80096ba:	eef0 8a60 	vmov.f32	s17, s1
 80096be:	3301      	adds	r3, #1
 80096c0:	d036      	beq.n	8009730 <asin+0x90>
 80096c2:	4622      	mov	r2, r4
 80096c4:	462b      	mov	r3, r5
 80096c6:	4620      	mov	r0, r4
 80096c8:	4629      	mov	r1, r5
 80096ca:	f7f7 fc31 	bl	8000f30 <__aeabi_dcmpun>
 80096ce:	4607      	mov	r7, r0
 80096d0:	bb70      	cbnz	r0, 8009730 <asin+0x90>
 80096d2:	ec45 4b10 	vmov	d0, r4, r5
 80096d6:	f000 fd7f 	bl	800a1d8 <fabs>
 80096da:	2200      	movs	r2, #0
 80096dc:	4b19      	ldr	r3, [pc, #100]	; (8009744 <asin+0xa4>)
 80096de:	ec51 0b10 	vmov	r0, r1, d0
 80096e2:	f7f7 f9c9 	bl	8000a78 <__aeabi_dcmpgt>
 80096e6:	b318      	cbz	r0, 8009730 <asin+0x90>
 80096e8:	2301      	movs	r3, #1
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	4816      	ldr	r0, [pc, #88]	; (8009748 <asin+0xa8>)
 80096ee:	4b17      	ldr	r3, [pc, #92]	; (800974c <asin+0xac>)
 80096f0:	9301      	str	r3, [sp, #4]
 80096f2:	9708      	str	r7, [sp, #32]
 80096f4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80096f8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80096fc:	f000 fd78 	bl	800a1f0 <nan>
 8009700:	f996 3000 	ldrsb.w	r3, [r6]
 8009704:	2b02      	cmp	r3, #2
 8009706:	ed8d 0b06 	vstr	d0, [sp, #24]
 800970a:	d104      	bne.n	8009716 <asin+0x76>
 800970c:	f7fd ff00 	bl	8007510 <__errno>
 8009710:	2321      	movs	r3, #33	; 0x21
 8009712:	6003      	str	r3, [r0, #0]
 8009714:	e004      	b.n	8009720 <asin+0x80>
 8009716:	4668      	mov	r0, sp
 8009718:	f000 fd67 	bl	800a1ea <matherr>
 800971c:	2800      	cmp	r0, #0
 800971e:	d0f5      	beq.n	800970c <asin+0x6c>
 8009720:	9b08      	ldr	r3, [sp, #32]
 8009722:	b11b      	cbz	r3, 800972c <asin+0x8c>
 8009724:	f7fd fef4 	bl	8007510 <__errno>
 8009728:	9b08      	ldr	r3, [sp, #32]
 800972a:	6003      	str	r3, [r0, #0]
 800972c:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009730:	eeb0 0a48 	vmov.f32	s0, s16
 8009734:	eef0 0a68 	vmov.f32	s1, s17
 8009738:	b00b      	add	sp, #44	; 0x2c
 800973a:	ecbd 8b02 	vpop	{d8}
 800973e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009740:	20000264 	.word	0x20000264
 8009744:	3ff00000 	.word	0x3ff00000
 8009748:	0800b4f1 	.word	0x0800b4f1
 800974c:	0800b608 	.word	0x0800b608

08009750 <atan2>:
 8009750:	f000 ba12 	b.w	8009b78 <__ieee754_atan2>
 8009754:	0000      	movs	r0, r0
	...

08009758 <__ieee754_asin>:
 8009758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975c:	ec55 4b10 	vmov	r4, r5, d0
 8009760:	4bcb      	ldr	r3, [pc, #812]	; (8009a90 <__ieee754_asin+0x338>)
 8009762:	b087      	sub	sp, #28
 8009764:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8009768:	429f      	cmp	r7, r3
 800976a:	9501      	str	r5, [sp, #4]
 800976c:	dd31      	ble.n	80097d2 <__ieee754_asin+0x7a>
 800976e:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8009772:	ee10 3a10 	vmov	r3, s0
 8009776:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800977a:	433b      	orrs	r3, r7
 800977c:	d117      	bne.n	80097ae <__ieee754_asin+0x56>
 800977e:	a3aa      	add	r3, pc, #680	; (adr r3, 8009a28 <__ieee754_asin+0x2d0>)
 8009780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009784:	ee10 0a10 	vmov	r0, s0
 8009788:	4629      	mov	r1, r5
 800978a:	f7f6 fee5 	bl	8000558 <__aeabi_dmul>
 800978e:	a3a8      	add	r3, pc, #672	; (adr r3, 8009a30 <__ieee754_asin+0x2d8>)
 8009790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009794:	4606      	mov	r6, r0
 8009796:	460f      	mov	r7, r1
 8009798:	4620      	mov	r0, r4
 800979a:	4629      	mov	r1, r5
 800979c:	f7f6 fedc 	bl	8000558 <__aeabi_dmul>
 80097a0:	4602      	mov	r2, r0
 80097a2:	460b      	mov	r3, r1
 80097a4:	4630      	mov	r0, r6
 80097a6:	4639      	mov	r1, r7
 80097a8:	f7f6 fd20 	bl	80001ec <__adddf3>
 80097ac:	e00a      	b.n	80097c4 <__ieee754_asin+0x6c>
 80097ae:	ee10 2a10 	vmov	r2, s0
 80097b2:	462b      	mov	r3, r5
 80097b4:	4620      	mov	r0, r4
 80097b6:	4629      	mov	r1, r5
 80097b8:	f7f6 fd16 	bl	80001e8 <__aeabi_dsub>
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	f7f6 fff4 	bl	80007ac <__aeabi_ddiv>
 80097c4:	4604      	mov	r4, r0
 80097c6:	460d      	mov	r5, r1
 80097c8:	ec45 4b10 	vmov	d0, r4, r5
 80097cc:	b007      	add	sp, #28
 80097ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d2:	4bb0      	ldr	r3, [pc, #704]	; (8009a94 <__ieee754_asin+0x33c>)
 80097d4:	429f      	cmp	r7, r3
 80097d6:	dc11      	bgt.n	80097fc <__ieee754_asin+0xa4>
 80097d8:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80097dc:	f280 80ae 	bge.w	800993c <__ieee754_asin+0x1e4>
 80097e0:	a395      	add	r3, pc, #596	; (adr r3, 8009a38 <__ieee754_asin+0x2e0>)
 80097e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e6:	ee10 0a10 	vmov	r0, s0
 80097ea:	4629      	mov	r1, r5
 80097ec:	f7f6 fcfe 	bl	80001ec <__adddf3>
 80097f0:	2200      	movs	r2, #0
 80097f2:	4ba9      	ldr	r3, [pc, #676]	; (8009a98 <__ieee754_asin+0x340>)
 80097f4:	f7f7 f940 	bl	8000a78 <__aeabi_dcmpgt>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d1e5      	bne.n	80097c8 <__ieee754_asin+0x70>
 80097fc:	ec45 4b10 	vmov	d0, r4, r5
 8009800:	f000 fcea 	bl	800a1d8 <fabs>
 8009804:	2000      	movs	r0, #0
 8009806:	ec53 2b10 	vmov	r2, r3, d0
 800980a:	49a3      	ldr	r1, [pc, #652]	; (8009a98 <__ieee754_asin+0x340>)
 800980c:	f7f6 fcec 	bl	80001e8 <__aeabi_dsub>
 8009810:	2200      	movs	r2, #0
 8009812:	4ba2      	ldr	r3, [pc, #648]	; (8009a9c <__ieee754_asin+0x344>)
 8009814:	f7f6 fea0 	bl	8000558 <__aeabi_dmul>
 8009818:	a389      	add	r3, pc, #548	; (adr r3, 8009a40 <__ieee754_asin+0x2e8>)
 800981a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981e:	4604      	mov	r4, r0
 8009820:	460d      	mov	r5, r1
 8009822:	f7f6 fe99 	bl	8000558 <__aeabi_dmul>
 8009826:	a388      	add	r3, pc, #544	; (adr r3, 8009a48 <__ieee754_asin+0x2f0>)
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	f7f6 fcde 	bl	80001ec <__adddf3>
 8009830:	4622      	mov	r2, r4
 8009832:	462b      	mov	r3, r5
 8009834:	f7f6 fe90 	bl	8000558 <__aeabi_dmul>
 8009838:	a385      	add	r3, pc, #532	; (adr r3, 8009a50 <__ieee754_asin+0x2f8>)
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	f7f6 fcd3 	bl	80001e8 <__aeabi_dsub>
 8009842:	4622      	mov	r2, r4
 8009844:	462b      	mov	r3, r5
 8009846:	f7f6 fe87 	bl	8000558 <__aeabi_dmul>
 800984a:	a383      	add	r3, pc, #524	; (adr r3, 8009a58 <__ieee754_asin+0x300>)
 800984c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009850:	f7f6 fccc 	bl	80001ec <__adddf3>
 8009854:	4622      	mov	r2, r4
 8009856:	462b      	mov	r3, r5
 8009858:	f7f6 fe7e 	bl	8000558 <__aeabi_dmul>
 800985c:	a380      	add	r3, pc, #512	; (adr r3, 8009a60 <__ieee754_asin+0x308>)
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	f7f6 fcc1 	bl	80001e8 <__aeabi_dsub>
 8009866:	4622      	mov	r2, r4
 8009868:	462b      	mov	r3, r5
 800986a:	f7f6 fe75 	bl	8000558 <__aeabi_dmul>
 800986e:	a37e      	add	r3, pc, #504	; (adr r3, 8009a68 <__ieee754_asin+0x310>)
 8009870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009874:	f7f6 fcba 	bl	80001ec <__adddf3>
 8009878:	4622      	mov	r2, r4
 800987a:	462b      	mov	r3, r5
 800987c:	f7f6 fe6c 	bl	8000558 <__aeabi_dmul>
 8009880:	a37b      	add	r3, pc, #492	; (adr r3, 8009a70 <__ieee754_asin+0x318>)
 8009882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009886:	4680      	mov	r8, r0
 8009888:	4689      	mov	r9, r1
 800988a:	4620      	mov	r0, r4
 800988c:	4629      	mov	r1, r5
 800988e:	f7f6 fe63 	bl	8000558 <__aeabi_dmul>
 8009892:	a379      	add	r3, pc, #484	; (adr r3, 8009a78 <__ieee754_asin+0x320>)
 8009894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009898:	f7f6 fca6 	bl	80001e8 <__aeabi_dsub>
 800989c:	4622      	mov	r2, r4
 800989e:	462b      	mov	r3, r5
 80098a0:	f7f6 fe5a 	bl	8000558 <__aeabi_dmul>
 80098a4:	a376      	add	r3, pc, #472	; (adr r3, 8009a80 <__ieee754_asin+0x328>)
 80098a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098aa:	f7f6 fc9f 	bl	80001ec <__adddf3>
 80098ae:	4622      	mov	r2, r4
 80098b0:	462b      	mov	r3, r5
 80098b2:	f7f6 fe51 	bl	8000558 <__aeabi_dmul>
 80098b6:	a374      	add	r3, pc, #464	; (adr r3, 8009a88 <__ieee754_asin+0x330>)
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	f7f6 fc94 	bl	80001e8 <__aeabi_dsub>
 80098c0:	4622      	mov	r2, r4
 80098c2:	462b      	mov	r3, r5
 80098c4:	f7f6 fe48 	bl	8000558 <__aeabi_dmul>
 80098c8:	4b73      	ldr	r3, [pc, #460]	; (8009a98 <__ieee754_asin+0x340>)
 80098ca:	2200      	movs	r2, #0
 80098cc:	f7f6 fc8e 	bl	80001ec <__adddf3>
 80098d0:	ec45 4b10 	vmov	d0, r4, r5
 80098d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098d8:	f000 fa2c 	bl	8009d34 <__ieee754_sqrt>
 80098dc:	4b70      	ldr	r3, [pc, #448]	; (8009aa0 <__ieee754_asin+0x348>)
 80098de:	429f      	cmp	r7, r3
 80098e0:	ec5b ab10 	vmov	sl, fp, d0
 80098e4:	f340 80de 	ble.w	8009aa4 <__ieee754_asin+0x34c>
 80098e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098ec:	4640      	mov	r0, r8
 80098ee:	4649      	mov	r1, r9
 80098f0:	f7f6 ff5c 	bl	80007ac <__aeabi_ddiv>
 80098f4:	4652      	mov	r2, sl
 80098f6:	465b      	mov	r3, fp
 80098f8:	f7f6 fe2e 	bl	8000558 <__aeabi_dmul>
 80098fc:	4652      	mov	r2, sl
 80098fe:	465b      	mov	r3, fp
 8009900:	f7f6 fc74 	bl	80001ec <__adddf3>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	f7f6 fc70 	bl	80001ec <__adddf3>
 800990c:	a348      	add	r3, pc, #288	; (adr r3, 8009a30 <__ieee754_asin+0x2d8>)
 800990e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009912:	f7f6 fc69 	bl	80001e8 <__aeabi_dsub>
 8009916:	4602      	mov	r2, r0
 8009918:	460b      	mov	r3, r1
 800991a:	a143      	add	r1, pc, #268	; (adr r1, 8009a28 <__ieee754_asin+0x2d0>)
 800991c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009920:	f7f6 fc62 	bl	80001e8 <__aeabi_dsub>
 8009924:	9b01      	ldr	r3, [sp, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	bfdc      	itt	le
 800992a:	4602      	movle	r2, r0
 800992c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8009930:	4604      	mov	r4, r0
 8009932:	460d      	mov	r5, r1
 8009934:	bfdc      	itt	le
 8009936:	4614      	movle	r4, r2
 8009938:	461d      	movle	r5, r3
 800993a:	e745      	b.n	80097c8 <__ieee754_asin+0x70>
 800993c:	ee10 2a10 	vmov	r2, s0
 8009940:	ee10 0a10 	vmov	r0, s0
 8009944:	462b      	mov	r3, r5
 8009946:	4629      	mov	r1, r5
 8009948:	f7f6 fe06 	bl	8000558 <__aeabi_dmul>
 800994c:	a33c      	add	r3, pc, #240	; (adr r3, 8009a40 <__ieee754_asin+0x2e8>)
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	4606      	mov	r6, r0
 8009954:	460f      	mov	r7, r1
 8009956:	f7f6 fdff 	bl	8000558 <__aeabi_dmul>
 800995a:	a33b      	add	r3, pc, #236	; (adr r3, 8009a48 <__ieee754_asin+0x2f0>)
 800995c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009960:	f7f6 fc44 	bl	80001ec <__adddf3>
 8009964:	4632      	mov	r2, r6
 8009966:	463b      	mov	r3, r7
 8009968:	f7f6 fdf6 	bl	8000558 <__aeabi_dmul>
 800996c:	a338      	add	r3, pc, #224	; (adr r3, 8009a50 <__ieee754_asin+0x2f8>)
 800996e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009972:	f7f6 fc39 	bl	80001e8 <__aeabi_dsub>
 8009976:	4632      	mov	r2, r6
 8009978:	463b      	mov	r3, r7
 800997a:	f7f6 fded 	bl	8000558 <__aeabi_dmul>
 800997e:	a336      	add	r3, pc, #216	; (adr r3, 8009a58 <__ieee754_asin+0x300>)
 8009980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009984:	f7f6 fc32 	bl	80001ec <__adddf3>
 8009988:	4632      	mov	r2, r6
 800998a:	463b      	mov	r3, r7
 800998c:	f7f6 fde4 	bl	8000558 <__aeabi_dmul>
 8009990:	a333      	add	r3, pc, #204	; (adr r3, 8009a60 <__ieee754_asin+0x308>)
 8009992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009996:	f7f6 fc27 	bl	80001e8 <__aeabi_dsub>
 800999a:	4632      	mov	r2, r6
 800999c:	463b      	mov	r3, r7
 800999e:	f7f6 fddb 	bl	8000558 <__aeabi_dmul>
 80099a2:	a331      	add	r3, pc, #196	; (adr r3, 8009a68 <__ieee754_asin+0x310>)
 80099a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a8:	f7f6 fc20 	bl	80001ec <__adddf3>
 80099ac:	4632      	mov	r2, r6
 80099ae:	463b      	mov	r3, r7
 80099b0:	f7f6 fdd2 	bl	8000558 <__aeabi_dmul>
 80099b4:	a32e      	add	r3, pc, #184	; (adr r3, 8009a70 <__ieee754_asin+0x318>)
 80099b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ba:	4680      	mov	r8, r0
 80099bc:	4689      	mov	r9, r1
 80099be:	4630      	mov	r0, r6
 80099c0:	4639      	mov	r1, r7
 80099c2:	f7f6 fdc9 	bl	8000558 <__aeabi_dmul>
 80099c6:	a32c      	add	r3, pc, #176	; (adr r3, 8009a78 <__ieee754_asin+0x320>)
 80099c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099cc:	f7f6 fc0c 	bl	80001e8 <__aeabi_dsub>
 80099d0:	4632      	mov	r2, r6
 80099d2:	463b      	mov	r3, r7
 80099d4:	f7f6 fdc0 	bl	8000558 <__aeabi_dmul>
 80099d8:	a329      	add	r3, pc, #164	; (adr r3, 8009a80 <__ieee754_asin+0x328>)
 80099da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099de:	f7f6 fc05 	bl	80001ec <__adddf3>
 80099e2:	4632      	mov	r2, r6
 80099e4:	463b      	mov	r3, r7
 80099e6:	f7f6 fdb7 	bl	8000558 <__aeabi_dmul>
 80099ea:	a327      	add	r3, pc, #156	; (adr r3, 8009a88 <__ieee754_asin+0x330>)
 80099ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f0:	f7f6 fbfa 	bl	80001e8 <__aeabi_dsub>
 80099f4:	4632      	mov	r2, r6
 80099f6:	463b      	mov	r3, r7
 80099f8:	f7f6 fdae 	bl	8000558 <__aeabi_dmul>
 80099fc:	2200      	movs	r2, #0
 80099fe:	4b26      	ldr	r3, [pc, #152]	; (8009a98 <__ieee754_asin+0x340>)
 8009a00:	f7f6 fbf4 	bl	80001ec <__adddf3>
 8009a04:	4602      	mov	r2, r0
 8009a06:	460b      	mov	r3, r1
 8009a08:	4640      	mov	r0, r8
 8009a0a:	4649      	mov	r1, r9
 8009a0c:	f7f6 fece 	bl	80007ac <__aeabi_ddiv>
 8009a10:	4622      	mov	r2, r4
 8009a12:	462b      	mov	r3, r5
 8009a14:	f7f6 fda0 	bl	8000558 <__aeabi_dmul>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	4629      	mov	r1, r5
 8009a20:	e6c2      	b.n	80097a8 <__ieee754_asin+0x50>
 8009a22:	bf00      	nop
 8009a24:	f3af 8000 	nop.w
 8009a28:	54442d18 	.word	0x54442d18
 8009a2c:	3ff921fb 	.word	0x3ff921fb
 8009a30:	33145c07 	.word	0x33145c07
 8009a34:	3c91a626 	.word	0x3c91a626
 8009a38:	8800759c 	.word	0x8800759c
 8009a3c:	7e37e43c 	.word	0x7e37e43c
 8009a40:	0dfdf709 	.word	0x0dfdf709
 8009a44:	3f023de1 	.word	0x3f023de1
 8009a48:	7501b288 	.word	0x7501b288
 8009a4c:	3f49efe0 	.word	0x3f49efe0
 8009a50:	b5688f3b 	.word	0xb5688f3b
 8009a54:	3fa48228 	.word	0x3fa48228
 8009a58:	0e884455 	.word	0x0e884455
 8009a5c:	3fc9c155 	.word	0x3fc9c155
 8009a60:	03eb6f7d 	.word	0x03eb6f7d
 8009a64:	3fd4d612 	.word	0x3fd4d612
 8009a68:	55555555 	.word	0x55555555
 8009a6c:	3fc55555 	.word	0x3fc55555
 8009a70:	b12e9282 	.word	0xb12e9282
 8009a74:	3fb3b8c5 	.word	0x3fb3b8c5
 8009a78:	1b8d0159 	.word	0x1b8d0159
 8009a7c:	3fe6066c 	.word	0x3fe6066c
 8009a80:	9c598ac8 	.word	0x9c598ac8
 8009a84:	40002ae5 	.word	0x40002ae5
 8009a88:	1c8a2d4b 	.word	0x1c8a2d4b
 8009a8c:	40033a27 	.word	0x40033a27
 8009a90:	3fefffff 	.word	0x3fefffff
 8009a94:	3fdfffff 	.word	0x3fdfffff
 8009a98:	3ff00000 	.word	0x3ff00000
 8009a9c:	3fe00000 	.word	0x3fe00000
 8009aa0:	3fef3332 	.word	0x3fef3332
 8009aa4:	ee10 2a10 	vmov	r2, s0
 8009aa8:	ee10 0a10 	vmov	r0, s0
 8009aac:	465b      	mov	r3, fp
 8009aae:	4659      	mov	r1, fp
 8009ab0:	f7f6 fb9c 	bl	80001ec <__adddf3>
 8009ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ab8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009abc:	4640      	mov	r0, r8
 8009abe:	4649      	mov	r1, r9
 8009ac0:	f7f6 fe74 	bl	80007ac <__aeabi_ddiv>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009acc:	f7f6 fd44 	bl	8000558 <__aeabi_dmul>
 8009ad0:	2600      	movs	r6, #0
 8009ad2:	4680      	mov	r8, r0
 8009ad4:	4689      	mov	r9, r1
 8009ad6:	4632      	mov	r2, r6
 8009ad8:	465b      	mov	r3, fp
 8009ada:	4630      	mov	r0, r6
 8009adc:	4659      	mov	r1, fp
 8009ade:	f7f6 fd3b 	bl	8000558 <__aeabi_dmul>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	4629      	mov	r1, r5
 8009aea:	f7f6 fb7d 	bl	80001e8 <__aeabi_dsub>
 8009aee:	4632      	mov	r2, r6
 8009af0:	4604      	mov	r4, r0
 8009af2:	460d      	mov	r5, r1
 8009af4:	465b      	mov	r3, fp
 8009af6:	4650      	mov	r0, sl
 8009af8:	4659      	mov	r1, fp
 8009afa:	f7f6 fb77 	bl	80001ec <__adddf3>
 8009afe:	4602      	mov	r2, r0
 8009b00:	460b      	mov	r3, r1
 8009b02:	4620      	mov	r0, r4
 8009b04:	4629      	mov	r1, r5
 8009b06:	f7f6 fe51 	bl	80007ac <__aeabi_ddiv>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	f7f6 fb6d 	bl	80001ec <__adddf3>
 8009b12:	4602      	mov	r2, r0
 8009b14:	460b      	mov	r3, r1
 8009b16:	a114      	add	r1, pc, #80	; (adr r1, 8009b68 <__ieee754_asin+0x410>)
 8009b18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b1c:	f7f6 fb64 	bl	80001e8 <__aeabi_dsub>
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	4640      	mov	r0, r8
 8009b26:	4649      	mov	r1, r9
 8009b28:	f7f6 fb5e 	bl	80001e8 <__aeabi_dsub>
 8009b2c:	465f      	mov	r7, fp
 8009b2e:	4604      	mov	r4, r0
 8009b30:	460d      	mov	r5, r1
 8009b32:	4632      	mov	r2, r6
 8009b34:	465b      	mov	r3, fp
 8009b36:	4630      	mov	r0, r6
 8009b38:	4639      	mov	r1, r7
 8009b3a:	f7f6 fb57 	bl	80001ec <__adddf3>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	460b      	mov	r3, r1
 8009b42:	a10b      	add	r1, pc, #44	; (adr r1, 8009b70 <__ieee754_asin+0x418>)
 8009b44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b48:	f7f6 fb4e 	bl	80001e8 <__aeabi_dsub>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	460b      	mov	r3, r1
 8009b50:	4620      	mov	r0, r4
 8009b52:	4629      	mov	r1, r5
 8009b54:	f7f6 fb48 	bl	80001e8 <__aeabi_dsub>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	a104      	add	r1, pc, #16	; (adr r1, 8009b70 <__ieee754_asin+0x418>)
 8009b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b62:	e6dd      	b.n	8009920 <__ieee754_asin+0x1c8>
 8009b64:	f3af 8000 	nop.w
 8009b68:	33145c07 	.word	0x33145c07
 8009b6c:	3c91a626 	.word	0x3c91a626
 8009b70:	54442d18 	.word	0x54442d18
 8009b74:	3fe921fb 	.word	0x3fe921fb

08009b78 <__ieee754_atan2>:
 8009b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b7c:	ec57 6b11 	vmov	r6, r7, d1
 8009b80:	4273      	negs	r3, r6
 8009b82:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009b86:	4333      	orrs	r3, r6
 8009b88:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8009d30 <__ieee754_atan2+0x1b8>
 8009b8c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009b90:	4573      	cmp	r3, lr
 8009b92:	ec51 0b10 	vmov	r0, r1, d0
 8009b96:	ee11 8a10 	vmov	r8, s2
 8009b9a:	d80a      	bhi.n	8009bb2 <__ieee754_atan2+0x3a>
 8009b9c:	4244      	negs	r4, r0
 8009b9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ba2:	4304      	orrs	r4, r0
 8009ba4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009ba8:	4574      	cmp	r4, lr
 8009baa:	468c      	mov	ip, r1
 8009bac:	ee10 9a10 	vmov	r9, s0
 8009bb0:	d907      	bls.n	8009bc2 <__ieee754_atan2+0x4a>
 8009bb2:	4632      	mov	r2, r6
 8009bb4:	463b      	mov	r3, r7
 8009bb6:	f7f6 fb19 	bl	80001ec <__adddf3>
 8009bba:	ec41 0b10 	vmov	d0, r0, r1
 8009bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bc2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009bc6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009bca:	4334      	orrs	r4, r6
 8009bcc:	d103      	bne.n	8009bd6 <__ieee754_atan2+0x5e>
 8009bce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bd2:	f000 b961 	b.w	8009e98 <atan>
 8009bd6:	17bc      	asrs	r4, r7, #30
 8009bd8:	f004 0402 	and.w	r4, r4, #2
 8009bdc:	ea53 0909 	orrs.w	r9, r3, r9
 8009be0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8009be4:	d107      	bne.n	8009bf6 <__ieee754_atan2+0x7e>
 8009be6:	2c02      	cmp	r4, #2
 8009be8:	d073      	beq.n	8009cd2 <__ieee754_atan2+0x15a>
 8009bea:	2c03      	cmp	r4, #3
 8009bec:	d1e5      	bne.n	8009bba <__ieee754_atan2+0x42>
 8009bee:	a13e      	add	r1, pc, #248	; (adr r1, 8009ce8 <__ieee754_atan2+0x170>)
 8009bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bf4:	e7e1      	b.n	8009bba <__ieee754_atan2+0x42>
 8009bf6:	ea52 0808 	orrs.w	r8, r2, r8
 8009bfa:	d106      	bne.n	8009c0a <__ieee754_atan2+0x92>
 8009bfc:	f1bc 0f00 	cmp.w	ip, #0
 8009c00:	da6b      	bge.n	8009cda <__ieee754_atan2+0x162>
 8009c02:	a13b      	add	r1, pc, #236	; (adr r1, 8009cf0 <__ieee754_atan2+0x178>)
 8009c04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c08:	e7d7      	b.n	8009bba <__ieee754_atan2+0x42>
 8009c0a:	4572      	cmp	r2, lr
 8009c0c:	d120      	bne.n	8009c50 <__ieee754_atan2+0xd8>
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d111      	bne.n	8009c36 <__ieee754_atan2+0xbe>
 8009c12:	2c02      	cmp	r4, #2
 8009c14:	d007      	beq.n	8009c26 <__ieee754_atan2+0xae>
 8009c16:	2c03      	cmp	r4, #3
 8009c18:	d009      	beq.n	8009c2e <__ieee754_atan2+0xb6>
 8009c1a:	2c01      	cmp	r4, #1
 8009c1c:	d155      	bne.n	8009cca <__ieee754_atan2+0x152>
 8009c1e:	a136      	add	r1, pc, #216	; (adr r1, 8009cf8 <__ieee754_atan2+0x180>)
 8009c20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c24:	e7c9      	b.n	8009bba <__ieee754_atan2+0x42>
 8009c26:	a136      	add	r1, pc, #216	; (adr r1, 8009d00 <__ieee754_atan2+0x188>)
 8009c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c2c:	e7c5      	b.n	8009bba <__ieee754_atan2+0x42>
 8009c2e:	a136      	add	r1, pc, #216	; (adr r1, 8009d08 <__ieee754_atan2+0x190>)
 8009c30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c34:	e7c1      	b.n	8009bba <__ieee754_atan2+0x42>
 8009c36:	2c02      	cmp	r4, #2
 8009c38:	d04b      	beq.n	8009cd2 <__ieee754_atan2+0x15a>
 8009c3a:	2c03      	cmp	r4, #3
 8009c3c:	d0d7      	beq.n	8009bee <__ieee754_atan2+0x76>
 8009c3e:	2c01      	cmp	r4, #1
 8009c40:	f04f 0000 	mov.w	r0, #0
 8009c44:	d102      	bne.n	8009c4c <__ieee754_atan2+0xd4>
 8009c46:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009c4a:	e7b6      	b.n	8009bba <__ieee754_atan2+0x42>
 8009c4c:	2100      	movs	r1, #0
 8009c4e:	e7b4      	b.n	8009bba <__ieee754_atan2+0x42>
 8009c50:	4573      	cmp	r3, lr
 8009c52:	d0d3      	beq.n	8009bfc <__ieee754_atan2+0x84>
 8009c54:	1a9b      	subs	r3, r3, r2
 8009c56:	151b      	asrs	r3, r3, #20
 8009c58:	2b3c      	cmp	r3, #60	; 0x3c
 8009c5a:	dc1e      	bgt.n	8009c9a <__ieee754_atan2+0x122>
 8009c5c:	2f00      	cmp	r7, #0
 8009c5e:	da01      	bge.n	8009c64 <__ieee754_atan2+0xec>
 8009c60:	333c      	adds	r3, #60	; 0x3c
 8009c62:	db1e      	blt.n	8009ca2 <__ieee754_atan2+0x12a>
 8009c64:	4632      	mov	r2, r6
 8009c66:	463b      	mov	r3, r7
 8009c68:	f7f6 fda0 	bl	80007ac <__aeabi_ddiv>
 8009c6c:	ec41 0b10 	vmov	d0, r0, r1
 8009c70:	f000 fab2 	bl	800a1d8 <fabs>
 8009c74:	f000 f910 	bl	8009e98 <atan>
 8009c78:	ec51 0b10 	vmov	r0, r1, d0
 8009c7c:	2c01      	cmp	r4, #1
 8009c7e:	d013      	beq.n	8009ca8 <__ieee754_atan2+0x130>
 8009c80:	2c02      	cmp	r4, #2
 8009c82:	d015      	beq.n	8009cb0 <__ieee754_atan2+0x138>
 8009c84:	2c00      	cmp	r4, #0
 8009c86:	d098      	beq.n	8009bba <__ieee754_atan2+0x42>
 8009c88:	a321      	add	r3, pc, #132	; (adr r3, 8009d10 <__ieee754_atan2+0x198>)
 8009c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8e:	f7f6 faab 	bl	80001e8 <__aeabi_dsub>
 8009c92:	a321      	add	r3, pc, #132	; (adr r3, 8009d18 <__ieee754_atan2+0x1a0>)
 8009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c98:	e014      	b.n	8009cc4 <__ieee754_atan2+0x14c>
 8009c9a:	a121      	add	r1, pc, #132	; (adr r1, 8009d20 <__ieee754_atan2+0x1a8>)
 8009c9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ca0:	e7ec      	b.n	8009c7c <__ieee754_atan2+0x104>
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	e7e9      	b.n	8009c7c <__ieee754_atan2+0x104>
 8009ca8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cac:	4619      	mov	r1, r3
 8009cae:	e784      	b.n	8009bba <__ieee754_atan2+0x42>
 8009cb0:	a317      	add	r3, pc, #92	; (adr r3, 8009d10 <__ieee754_atan2+0x198>)
 8009cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb6:	f7f6 fa97 	bl	80001e8 <__aeabi_dsub>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	a116      	add	r1, pc, #88	; (adr r1, 8009d18 <__ieee754_atan2+0x1a0>)
 8009cc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cc4:	f7f6 fa90 	bl	80001e8 <__aeabi_dsub>
 8009cc8:	e777      	b.n	8009bba <__ieee754_atan2+0x42>
 8009cca:	a117      	add	r1, pc, #92	; (adr r1, 8009d28 <__ieee754_atan2+0x1b0>)
 8009ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cd0:	e773      	b.n	8009bba <__ieee754_atan2+0x42>
 8009cd2:	a111      	add	r1, pc, #68	; (adr r1, 8009d18 <__ieee754_atan2+0x1a0>)
 8009cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cd8:	e76f      	b.n	8009bba <__ieee754_atan2+0x42>
 8009cda:	a111      	add	r1, pc, #68	; (adr r1, 8009d20 <__ieee754_atan2+0x1a8>)
 8009cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ce0:	e76b      	b.n	8009bba <__ieee754_atan2+0x42>
 8009ce2:	bf00      	nop
 8009ce4:	f3af 8000 	nop.w
 8009ce8:	54442d18 	.word	0x54442d18
 8009cec:	c00921fb 	.word	0xc00921fb
 8009cf0:	54442d18 	.word	0x54442d18
 8009cf4:	bff921fb 	.word	0xbff921fb
 8009cf8:	54442d18 	.word	0x54442d18
 8009cfc:	bfe921fb 	.word	0xbfe921fb
 8009d00:	7f3321d2 	.word	0x7f3321d2
 8009d04:	4002d97c 	.word	0x4002d97c
 8009d08:	7f3321d2 	.word	0x7f3321d2
 8009d0c:	c002d97c 	.word	0xc002d97c
 8009d10:	33145c07 	.word	0x33145c07
 8009d14:	3ca1a626 	.word	0x3ca1a626
 8009d18:	54442d18 	.word	0x54442d18
 8009d1c:	400921fb 	.word	0x400921fb
 8009d20:	54442d18 	.word	0x54442d18
 8009d24:	3ff921fb 	.word	0x3ff921fb
 8009d28:	54442d18 	.word	0x54442d18
 8009d2c:	3fe921fb 	.word	0x3fe921fb
 8009d30:	7ff00000 	.word	0x7ff00000

08009d34 <__ieee754_sqrt>:
 8009d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d38:	4955      	ldr	r1, [pc, #340]	; (8009e90 <__ieee754_sqrt+0x15c>)
 8009d3a:	ec55 4b10 	vmov	r4, r5, d0
 8009d3e:	43a9      	bics	r1, r5
 8009d40:	462b      	mov	r3, r5
 8009d42:	462a      	mov	r2, r5
 8009d44:	d112      	bne.n	8009d6c <__ieee754_sqrt+0x38>
 8009d46:	ee10 2a10 	vmov	r2, s0
 8009d4a:	ee10 0a10 	vmov	r0, s0
 8009d4e:	4629      	mov	r1, r5
 8009d50:	f7f6 fc02 	bl	8000558 <__aeabi_dmul>
 8009d54:	4602      	mov	r2, r0
 8009d56:	460b      	mov	r3, r1
 8009d58:	4620      	mov	r0, r4
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	f7f6 fa46 	bl	80001ec <__adddf3>
 8009d60:	4604      	mov	r4, r0
 8009d62:	460d      	mov	r5, r1
 8009d64:	ec45 4b10 	vmov	d0, r4, r5
 8009d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d6c:	2d00      	cmp	r5, #0
 8009d6e:	ee10 0a10 	vmov	r0, s0
 8009d72:	4621      	mov	r1, r4
 8009d74:	dc0f      	bgt.n	8009d96 <__ieee754_sqrt+0x62>
 8009d76:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009d7a:	4330      	orrs	r0, r6
 8009d7c:	d0f2      	beq.n	8009d64 <__ieee754_sqrt+0x30>
 8009d7e:	b155      	cbz	r5, 8009d96 <__ieee754_sqrt+0x62>
 8009d80:	ee10 2a10 	vmov	r2, s0
 8009d84:	4620      	mov	r0, r4
 8009d86:	4629      	mov	r1, r5
 8009d88:	f7f6 fa2e 	bl	80001e8 <__aeabi_dsub>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	460b      	mov	r3, r1
 8009d90:	f7f6 fd0c 	bl	80007ac <__aeabi_ddiv>
 8009d94:	e7e4      	b.n	8009d60 <__ieee754_sqrt+0x2c>
 8009d96:	151b      	asrs	r3, r3, #20
 8009d98:	d073      	beq.n	8009e82 <__ieee754_sqrt+0x14e>
 8009d9a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009d9e:	07dd      	lsls	r5, r3, #31
 8009da0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009da4:	bf48      	it	mi
 8009da6:	0fc8      	lsrmi	r0, r1, #31
 8009da8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009dac:	bf44      	itt	mi
 8009dae:	0049      	lslmi	r1, r1, #1
 8009db0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8009db4:	2500      	movs	r5, #0
 8009db6:	1058      	asrs	r0, r3, #1
 8009db8:	0fcb      	lsrs	r3, r1, #31
 8009dba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009dbe:	0049      	lsls	r1, r1, #1
 8009dc0:	2316      	movs	r3, #22
 8009dc2:	462c      	mov	r4, r5
 8009dc4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009dc8:	19a7      	adds	r7, r4, r6
 8009dca:	4297      	cmp	r7, r2
 8009dcc:	bfde      	ittt	le
 8009dce:	19bc      	addle	r4, r7, r6
 8009dd0:	1bd2      	suble	r2, r2, r7
 8009dd2:	19ad      	addle	r5, r5, r6
 8009dd4:	0fcf      	lsrs	r7, r1, #31
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009ddc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009de0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009de4:	d1f0      	bne.n	8009dc8 <__ieee754_sqrt+0x94>
 8009de6:	f04f 0c20 	mov.w	ip, #32
 8009dea:	469e      	mov	lr, r3
 8009dec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009df0:	42a2      	cmp	r2, r4
 8009df2:	eb06 070e 	add.w	r7, r6, lr
 8009df6:	dc02      	bgt.n	8009dfe <__ieee754_sqrt+0xca>
 8009df8:	d112      	bne.n	8009e20 <__ieee754_sqrt+0xec>
 8009dfa:	428f      	cmp	r7, r1
 8009dfc:	d810      	bhi.n	8009e20 <__ieee754_sqrt+0xec>
 8009dfe:	2f00      	cmp	r7, #0
 8009e00:	eb07 0e06 	add.w	lr, r7, r6
 8009e04:	da42      	bge.n	8009e8c <__ieee754_sqrt+0x158>
 8009e06:	f1be 0f00 	cmp.w	lr, #0
 8009e0a:	db3f      	blt.n	8009e8c <__ieee754_sqrt+0x158>
 8009e0c:	f104 0801 	add.w	r8, r4, #1
 8009e10:	1b12      	subs	r2, r2, r4
 8009e12:	428f      	cmp	r7, r1
 8009e14:	bf88      	it	hi
 8009e16:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8009e1a:	1bc9      	subs	r1, r1, r7
 8009e1c:	4433      	add	r3, r6
 8009e1e:	4644      	mov	r4, r8
 8009e20:	0052      	lsls	r2, r2, #1
 8009e22:	f1bc 0c01 	subs.w	ip, ip, #1
 8009e26:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009e2a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009e2e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009e32:	d1dd      	bne.n	8009df0 <__ieee754_sqrt+0xbc>
 8009e34:	430a      	orrs	r2, r1
 8009e36:	d006      	beq.n	8009e46 <__ieee754_sqrt+0x112>
 8009e38:	1c5c      	adds	r4, r3, #1
 8009e3a:	bf13      	iteet	ne
 8009e3c:	3301      	addne	r3, #1
 8009e3e:	3501      	addeq	r5, #1
 8009e40:	4663      	moveq	r3, ip
 8009e42:	f023 0301 	bicne.w	r3, r3, #1
 8009e46:	106a      	asrs	r2, r5, #1
 8009e48:	085b      	lsrs	r3, r3, #1
 8009e4a:	07e9      	lsls	r1, r5, #31
 8009e4c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009e50:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009e54:	bf48      	it	mi
 8009e56:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009e5a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009e5e:	461c      	mov	r4, r3
 8009e60:	e780      	b.n	8009d64 <__ieee754_sqrt+0x30>
 8009e62:	0aca      	lsrs	r2, r1, #11
 8009e64:	3815      	subs	r0, #21
 8009e66:	0549      	lsls	r1, r1, #21
 8009e68:	2a00      	cmp	r2, #0
 8009e6a:	d0fa      	beq.n	8009e62 <__ieee754_sqrt+0x12e>
 8009e6c:	02d6      	lsls	r6, r2, #11
 8009e6e:	d50a      	bpl.n	8009e86 <__ieee754_sqrt+0x152>
 8009e70:	f1c3 0420 	rsb	r4, r3, #32
 8009e74:	fa21 f404 	lsr.w	r4, r1, r4
 8009e78:	1e5d      	subs	r5, r3, #1
 8009e7a:	4099      	lsls	r1, r3
 8009e7c:	4322      	orrs	r2, r4
 8009e7e:	1b43      	subs	r3, r0, r5
 8009e80:	e78b      	b.n	8009d9a <__ieee754_sqrt+0x66>
 8009e82:	4618      	mov	r0, r3
 8009e84:	e7f0      	b.n	8009e68 <__ieee754_sqrt+0x134>
 8009e86:	0052      	lsls	r2, r2, #1
 8009e88:	3301      	adds	r3, #1
 8009e8a:	e7ef      	b.n	8009e6c <__ieee754_sqrt+0x138>
 8009e8c:	46a0      	mov	r8, r4
 8009e8e:	e7bf      	b.n	8009e10 <__ieee754_sqrt+0xdc>
 8009e90:	7ff00000 	.word	0x7ff00000
 8009e94:	00000000 	.word	0x00000000

08009e98 <atan>:
 8009e98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9c:	ec55 4b10 	vmov	r4, r5, d0
 8009ea0:	4bc3      	ldr	r3, [pc, #780]	; (800a1b0 <atan+0x318>)
 8009ea2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009ea6:	429e      	cmp	r6, r3
 8009ea8:	46ab      	mov	fp, r5
 8009eaa:	dd18      	ble.n	8009ede <atan+0x46>
 8009eac:	4bc1      	ldr	r3, [pc, #772]	; (800a1b4 <atan+0x31c>)
 8009eae:	429e      	cmp	r6, r3
 8009eb0:	dc01      	bgt.n	8009eb6 <atan+0x1e>
 8009eb2:	d109      	bne.n	8009ec8 <atan+0x30>
 8009eb4:	b144      	cbz	r4, 8009ec8 <atan+0x30>
 8009eb6:	4622      	mov	r2, r4
 8009eb8:	462b      	mov	r3, r5
 8009eba:	4620      	mov	r0, r4
 8009ebc:	4629      	mov	r1, r5
 8009ebe:	f7f6 f995 	bl	80001ec <__adddf3>
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	460d      	mov	r5, r1
 8009ec6:	e006      	b.n	8009ed6 <atan+0x3e>
 8009ec8:	f1bb 0f00 	cmp.w	fp, #0
 8009ecc:	f340 8131 	ble.w	800a132 <atan+0x29a>
 8009ed0:	a59b      	add	r5, pc, #620	; (adr r5, 800a140 <atan+0x2a8>)
 8009ed2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009ed6:	ec45 4b10 	vmov	d0, r4, r5
 8009eda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ede:	4bb6      	ldr	r3, [pc, #728]	; (800a1b8 <atan+0x320>)
 8009ee0:	429e      	cmp	r6, r3
 8009ee2:	dc14      	bgt.n	8009f0e <atan+0x76>
 8009ee4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009ee8:	429e      	cmp	r6, r3
 8009eea:	dc0d      	bgt.n	8009f08 <atan+0x70>
 8009eec:	a396      	add	r3, pc, #600	; (adr r3, 800a148 <atan+0x2b0>)
 8009eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef2:	ee10 0a10 	vmov	r0, s0
 8009ef6:	4629      	mov	r1, r5
 8009ef8:	f7f6 f978 	bl	80001ec <__adddf3>
 8009efc:	2200      	movs	r2, #0
 8009efe:	4baf      	ldr	r3, [pc, #700]	; (800a1bc <atan+0x324>)
 8009f00:	f7f6 fdba 	bl	8000a78 <__aeabi_dcmpgt>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d1e6      	bne.n	8009ed6 <atan+0x3e>
 8009f08:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009f0c:	e02b      	b.n	8009f66 <atan+0xce>
 8009f0e:	f000 f963 	bl	800a1d8 <fabs>
 8009f12:	4bab      	ldr	r3, [pc, #684]	; (800a1c0 <atan+0x328>)
 8009f14:	429e      	cmp	r6, r3
 8009f16:	ec55 4b10 	vmov	r4, r5, d0
 8009f1a:	f300 80bf 	bgt.w	800a09c <atan+0x204>
 8009f1e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009f22:	429e      	cmp	r6, r3
 8009f24:	f300 80a0 	bgt.w	800a068 <atan+0x1d0>
 8009f28:	ee10 2a10 	vmov	r2, s0
 8009f2c:	ee10 0a10 	vmov	r0, s0
 8009f30:	462b      	mov	r3, r5
 8009f32:	4629      	mov	r1, r5
 8009f34:	f7f6 f95a 	bl	80001ec <__adddf3>
 8009f38:	2200      	movs	r2, #0
 8009f3a:	4ba0      	ldr	r3, [pc, #640]	; (800a1bc <atan+0x324>)
 8009f3c:	f7f6 f954 	bl	80001e8 <__aeabi_dsub>
 8009f40:	2200      	movs	r2, #0
 8009f42:	4606      	mov	r6, r0
 8009f44:	460f      	mov	r7, r1
 8009f46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	f7f6 f94d 	bl	80001ec <__adddf3>
 8009f52:	4602      	mov	r2, r0
 8009f54:	460b      	mov	r3, r1
 8009f56:	4630      	mov	r0, r6
 8009f58:	4639      	mov	r1, r7
 8009f5a:	f7f6 fc27 	bl	80007ac <__aeabi_ddiv>
 8009f5e:	f04f 0a00 	mov.w	sl, #0
 8009f62:	4604      	mov	r4, r0
 8009f64:	460d      	mov	r5, r1
 8009f66:	4622      	mov	r2, r4
 8009f68:	462b      	mov	r3, r5
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	f7f6 faf3 	bl	8000558 <__aeabi_dmul>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4680      	mov	r8, r0
 8009f78:	4689      	mov	r9, r1
 8009f7a:	f7f6 faed 	bl	8000558 <__aeabi_dmul>
 8009f7e:	a374      	add	r3, pc, #464	; (adr r3, 800a150 <atan+0x2b8>)
 8009f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f84:	4606      	mov	r6, r0
 8009f86:	460f      	mov	r7, r1
 8009f88:	f7f6 fae6 	bl	8000558 <__aeabi_dmul>
 8009f8c:	a372      	add	r3, pc, #456	; (adr r3, 800a158 <atan+0x2c0>)
 8009f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f92:	f7f6 f92b 	bl	80001ec <__adddf3>
 8009f96:	4632      	mov	r2, r6
 8009f98:	463b      	mov	r3, r7
 8009f9a:	f7f6 fadd 	bl	8000558 <__aeabi_dmul>
 8009f9e:	a370      	add	r3, pc, #448	; (adr r3, 800a160 <atan+0x2c8>)
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	f7f6 f922 	bl	80001ec <__adddf3>
 8009fa8:	4632      	mov	r2, r6
 8009faa:	463b      	mov	r3, r7
 8009fac:	f7f6 fad4 	bl	8000558 <__aeabi_dmul>
 8009fb0:	a36d      	add	r3, pc, #436	; (adr r3, 800a168 <atan+0x2d0>)
 8009fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb6:	f7f6 f919 	bl	80001ec <__adddf3>
 8009fba:	4632      	mov	r2, r6
 8009fbc:	463b      	mov	r3, r7
 8009fbe:	f7f6 facb 	bl	8000558 <__aeabi_dmul>
 8009fc2:	a36b      	add	r3, pc, #428	; (adr r3, 800a170 <atan+0x2d8>)
 8009fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc8:	f7f6 f910 	bl	80001ec <__adddf3>
 8009fcc:	4632      	mov	r2, r6
 8009fce:	463b      	mov	r3, r7
 8009fd0:	f7f6 fac2 	bl	8000558 <__aeabi_dmul>
 8009fd4:	a368      	add	r3, pc, #416	; (adr r3, 800a178 <atan+0x2e0>)
 8009fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fda:	f7f6 f907 	bl	80001ec <__adddf3>
 8009fde:	4642      	mov	r2, r8
 8009fe0:	464b      	mov	r3, r9
 8009fe2:	f7f6 fab9 	bl	8000558 <__aeabi_dmul>
 8009fe6:	a366      	add	r3, pc, #408	; (adr r3, 800a180 <atan+0x2e8>)
 8009fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fec:	4680      	mov	r8, r0
 8009fee:	4689      	mov	r9, r1
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	4639      	mov	r1, r7
 8009ff4:	f7f6 fab0 	bl	8000558 <__aeabi_dmul>
 8009ff8:	a363      	add	r3, pc, #396	; (adr r3, 800a188 <atan+0x2f0>)
 8009ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffe:	f7f6 f8f3 	bl	80001e8 <__aeabi_dsub>
 800a002:	4632      	mov	r2, r6
 800a004:	463b      	mov	r3, r7
 800a006:	f7f6 faa7 	bl	8000558 <__aeabi_dmul>
 800a00a:	a361      	add	r3, pc, #388	; (adr r3, 800a190 <atan+0x2f8>)
 800a00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a010:	f7f6 f8ea 	bl	80001e8 <__aeabi_dsub>
 800a014:	4632      	mov	r2, r6
 800a016:	463b      	mov	r3, r7
 800a018:	f7f6 fa9e 	bl	8000558 <__aeabi_dmul>
 800a01c:	a35e      	add	r3, pc, #376	; (adr r3, 800a198 <atan+0x300>)
 800a01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a022:	f7f6 f8e1 	bl	80001e8 <__aeabi_dsub>
 800a026:	4632      	mov	r2, r6
 800a028:	463b      	mov	r3, r7
 800a02a:	f7f6 fa95 	bl	8000558 <__aeabi_dmul>
 800a02e:	a35c      	add	r3, pc, #368	; (adr r3, 800a1a0 <atan+0x308>)
 800a030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a034:	f7f6 f8d8 	bl	80001e8 <__aeabi_dsub>
 800a038:	4632      	mov	r2, r6
 800a03a:	463b      	mov	r3, r7
 800a03c:	f7f6 fa8c 	bl	8000558 <__aeabi_dmul>
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	4640      	mov	r0, r8
 800a046:	4649      	mov	r1, r9
 800a048:	f7f6 f8d0 	bl	80001ec <__adddf3>
 800a04c:	4622      	mov	r2, r4
 800a04e:	462b      	mov	r3, r5
 800a050:	f7f6 fa82 	bl	8000558 <__aeabi_dmul>
 800a054:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	d14b      	bne.n	800a0f6 <atan+0x25e>
 800a05e:	4620      	mov	r0, r4
 800a060:	4629      	mov	r1, r5
 800a062:	f7f6 f8c1 	bl	80001e8 <__aeabi_dsub>
 800a066:	e72c      	b.n	8009ec2 <atan+0x2a>
 800a068:	ee10 0a10 	vmov	r0, s0
 800a06c:	2200      	movs	r2, #0
 800a06e:	4b53      	ldr	r3, [pc, #332]	; (800a1bc <atan+0x324>)
 800a070:	4629      	mov	r1, r5
 800a072:	f7f6 f8b9 	bl	80001e8 <__aeabi_dsub>
 800a076:	2200      	movs	r2, #0
 800a078:	4606      	mov	r6, r0
 800a07a:	460f      	mov	r7, r1
 800a07c:	4b4f      	ldr	r3, [pc, #316]	; (800a1bc <atan+0x324>)
 800a07e:	4620      	mov	r0, r4
 800a080:	4629      	mov	r1, r5
 800a082:	f7f6 f8b3 	bl	80001ec <__adddf3>
 800a086:	4602      	mov	r2, r0
 800a088:	460b      	mov	r3, r1
 800a08a:	4630      	mov	r0, r6
 800a08c:	4639      	mov	r1, r7
 800a08e:	f7f6 fb8d 	bl	80007ac <__aeabi_ddiv>
 800a092:	f04f 0a01 	mov.w	sl, #1
 800a096:	4604      	mov	r4, r0
 800a098:	460d      	mov	r5, r1
 800a09a:	e764      	b.n	8009f66 <atan+0xce>
 800a09c:	4b49      	ldr	r3, [pc, #292]	; (800a1c4 <atan+0x32c>)
 800a09e:	429e      	cmp	r6, r3
 800a0a0:	dc1d      	bgt.n	800a0de <atan+0x246>
 800a0a2:	ee10 0a10 	vmov	r0, s0
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	4b47      	ldr	r3, [pc, #284]	; (800a1c8 <atan+0x330>)
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	f7f6 f89c 	bl	80001e8 <__aeabi_dsub>
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	4606      	mov	r6, r0
 800a0b4:	460f      	mov	r7, r1
 800a0b6:	4b44      	ldr	r3, [pc, #272]	; (800a1c8 <atan+0x330>)
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	4629      	mov	r1, r5
 800a0bc:	f7f6 fa4c 	bl	8000558 <__aeabi_dmul>
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	4b3e      	ldr	r3, [pc, #248]	; (800a1bc <atan+0x324>)
 800a0c4:	f7f6 f892 	bl	80001ec <__adddf3>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	4639      	mov	r1, r7
 800a0d0:	f7f6 fb6c 	bl	80007ac <__aeabi_ddiv>
 800a0d4:	f04f 0a02 	mov.w	sl, #2
 800a0d8:	4604      	mov	r4, r0
 800a0da:	460d      	mov	r5, r1
 800a0dc:	e743      	b.n	8009f66 <atan+0xce>
 800a0de:	462b      	mov	r3, r5
 800a0e0:	ee10 2a10 	vmov	r2, s0
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	4939      	ldr	r1, [pc, #228]	; (800a1cc <atan+0x334>)
 800a0e8:	f7f6 fb60 	bl	80007ac <__aeabi_ddiv>
 800a0ec:	f04f 0a03 	mov.w	sl, #3
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	460d      	mov	r5, r1
 800a0f4:	e737      	b.n	8009f66 <atan+0xce>
 800a0f6:	4b36      	ldr	r3, [pc, #216]	; (800a1d0 <atan+0x338>)
 800a0f8:	4e36      	ldr	r6, [pc, #216]	; (800a1d4 <atan+0x33c>)
 800a0fa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800a0fe:	4456      	add	r6, sl
 800a100:	449a      	add	sl, r3
 800a102:	e9da 2300 	ldrd	r2, r3, [sl]
 800a106:	f7f6 f86f 	bl	80001e8 <__aeabi_dsub>
 800a10a:	4622      	mov	r2, r4
 800a10c:	462b      	mov	r3, r5
 800a10e:	f7f6 f86b 	bl	80001e8 <__aeabi_dsub>
 800a112:	4602      	mov	r2, r0
 800a114:	460b      	mov	r3, r1
 800a116:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a11a:	f7f6 f865 	bl	80001e8 <__aeabi_dsub>
 800a11e:	f1bb 0f00 	cmp.w	fp, #0
 800a122:	4604      	mov	r4, r0
 800a124:	460d      	mov	r5, r1
 800a126:	f6bf aed6 	bge.w	8009ed6 <atan+0x3e>
 800a12a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a12e:	461d      	mov	r5, r3
 800a130:	e6d1      	b.n	8009ed6 <atan+0x3e>
 800a132:	a51d      	add	r5, pc, #116	; (adr r5, 800a1a8 <atan+0x310>)
 800a134:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a138:	e6cd      	b.n	8009ed6 <atan+0x3e>
 800a13a:	bf00      	nop
 800a13c:	f3af 8000 	nop.w
 800a140:	54442d18 	.word	0x54442d18
 800a144:	3ff921fb 	.word	0x3ff921fb
 800a148:	8800759c 	.word	0x8800759c
 800a14c:	7e37e43c 	.word	0x7e37e43c
 800a150:	e322da11 	.word	0xe322da11
 800a154:	3f90ad3a 	.word	0x3f90ad3a
 800a158:	24760deb 	.word	0x24760deb
 800a15c:	3fa97b4b 	.word	0x3fa97b4b
 800a160:	a0d03d51 	.word	0xa0d03d51
 800a164:	3fb10d66 	.word	0x3fb10d66
 800a168:	c54c206e 	.word	0xc54c206e
 800a16c:	3fb745cd 	.word	0x3fb745cd
 800a170:	920083ff 	.word	0x920083ff
 800a174:	3fc24924 	.word	0x3fc24924
 800a178:	5555550d 	.word	0x5555550d
 800a17c:	3fd55555 	.word	0x3fd55555
 800a180:	2c6a6c2f 	.word	0x2c6a6c2f
 800a184:	bfa2b444 	.word	0xbfa2b444
 800a188:	52defd9a 	.word	0x52defd9a
 800a18c:	3fadde2d 	.word	0x3fadde2d
 800a190:	af749a6d 	.word	0xaf749a6d
 800a194:	3fb3b0f2 	.word	0x3fb3b0f2
 800a198:	fe231671 	.word	0xfe231671
 800a19c:	3fbc71c6 	.word	0x3fbc71c6
 800a1a0:	9998ebc4 	.word	0x9998ebc4
 800a1a4:	3fc99999 	.word	0x3fc99999
 800a1a8:	54442d18 	.word	0x54442d18
 800a1ac:	bff921fb 	.word	0xbff921fb
 800a1b0:	440fffff 	.word	0x440fffff
 800a1b4:	7ff00000 	.word	0x7ff00000
 800a1b8:	3fdbffff 	.word	0x3fdbffff
 800a1bc:	3ff00000 	.word	0x3ff00000
 800a1c0:	3ff2ffff 	.word	0x3ff2ffff
 800a1c4:	40037fff 	.word	0x40037fff
 800a1c8:	3ff80000 	.word	0x3ff80000
 800a1cc:	bff00000 	.word	0xbff00000
 800a1d0:	0800b630 	.word	0x0800b630
 800a1d4:	0800b610 	.word	0x0800b610

0800a1d8 <fabs>:
 800a1d8:	ec51 0b10 	vmov	r0, r1, d0
 800a1dc:	ee10 2a10 	vmov	r2, s0
 800a1e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a1e4:	ec43 2b10 	vmov	d0, r2, r3
 800a1e8:	4770      	bx	lr

0800a1ea <matherr>:
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	4770      	bx	lr
	...

0800a1f0 <nan>:
 800a1f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a1f8 <nan+0x8>
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	00000000 	.word	0x00000000
 800a1fc:	7ff80000 	.word	0x7ff80000

0800a200 <_init>:
 800a200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a202:	bf00      	nop
 800a204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a206:	bc08      	pop	{r3}
 800a208:	469e      	mov	lr, r3
 800a20a:	4770      	bx	lr

0800a20c <_fini>:
 800a20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20e:	bf00      	nop
 800a210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a212:	bc08      	pop	{r3}
 800a214:	469e      	mov	lr, r3
 800a216:	4770      	bx	lr
