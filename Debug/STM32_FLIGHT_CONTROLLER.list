
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd84  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  0800df28  0800df28  0001df28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea10  0800ea10  00020250  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea10  0800ea10  0001ea10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea18  0800ea18  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea18  0800ea18  0001ea18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea1c  0800ea1c  0001ea1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800ea20  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000443c  20000250  0800ec70  00020250  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000468c  0800ec70  0002468c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025bb2  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004380  00000000  00000000  00045e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000133e4  00000000  00000000  0004a1b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001ac0  00000000  00000000  0005d598  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001a18  00000000  00000000  0005f058  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001b1c1  00000000  00000000  00060a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000155af  00000000  00000000  0007bc31  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000ac77b  00000000  00000000  000911e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0013d95b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000634c  00000000  00000000  0013d9d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000250 	.word	0x20000250
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800df0c 	.word	0x0800df0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000254 	.word	0x20000254
 80001dc:	0800df0c 	.word	0x0800df0c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <writeByte>:

//===================================================================================================================
//====== Set of useful function to access acceleration, gyroscope, and temperature data
//===================================================================================================================

void writeByte(uint8_t address_tx, uint8_t subAddress, uint8_t data) {
 8000f98:	b500      	push	{lr}
 8000f9a:	b085      	sub	sp, #20
	uint8_t data_write[2];
	data_write[0] = subAddress;
 8000f9c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_write[1] = data;
 8000fa0:	f88d 200d 	strb.w	r2, [sp, #13]
	//i2c.write(address, data_write, 2, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2302      	movs	r3, #2
 8000faa:	aa03      	add	r2, sp, #12
 8000fac:	4601      	mov	r1, r0
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <writeByte+0x24>)
 8000fb0:	f003 f920 	bl	80041f4 <HAL_I2C_Master_Transmit>
}
 8000fb4:	b005      	add	sp, #20
 8000fb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fba:	bf00      	nop
 8000fbc:	20004344 	.word	0x20004344

08000fc0 <readByte>:

//NICK - I've changed these to accept a tx address & a rx address as STM32 boards include the R/W bit at the end of 7 bit adress
//so HAL function takes in 8 bit address including R/W bit
char readByte(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress) {
 8000fc0:	b570      	push	{r4, r5, r6, lr}
 8000fc2:	b084      	sub	sp, #16
	uint8_t data[1]; // `data` will store the register data
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8000fc4:	a904      	add	r1, sp, #16
 8000fc6:	f801 2d08 	strb.w	r2, [r1, #-8]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, 1, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8000fca:	4605      	mov	r5, r0
 8000fcc:	4c09      	ldr	r4, [pc, #36]	; (8000ff4 <readByte+0x34>)
 8000fce:	260a      	movs	r6, #10
 8000fd0:	9600      	str	r6, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	460a      	mov	r2, r1
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f003 f90b 	bl	80041f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 8000fde:	9600      	str	r6, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	aa03      	add	r2, sp, #12
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f003 f9be 	bl	8004368 <HAL_I2C_Master_Receive>

	return data[0];
}
 8000fec:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8000ff0:	b004      	add	sp, #16
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
 8000ff4:	20004344 	.word	0x20004344

08000ff8 <imu_init>:
IMU_StatusTypeDef imu_init(I2C_HandleTypeDef* handle) {
 8000ff8:	b510      	push	{r4, lr}
 8000ffa:	4604      	mov	r4, r0
	printf("STM32 Online..\r\n");
 8000ffc:	480f      	ldr	r0, [pc, #60]	; (800103c <imu_init+0x44>)
 8000ffe:	f009 fc05 	bl	800a80c <puts>
	if (HAL_I2C_IsDeviceReady(handle, 0xD0, 2, 100) == HAL_OK) {
 8001002:	2364      	movs	r3, #100	; 0x64
 8001004:	2202      	movs	r2, #2
 8001006:	21d0      	movs	r1, #208	; 0xd0
 8001008:	4620      	mov	r0, r4
 800100a:	f003 fb15 	bl	8004638 <HAL_I2C_IsDeviceReady>
 800100e:	b100      	cbz	r0, 8001012 <imu_init+0x1a>
 8001010:	e7fe      	b.n	8001010 <imu_init+0x18>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle LED on if so
 8001012:	2120      	movs	r1, #32
 8001014:	480a      	ldr	r0, [pc, #40]	; (8001040 <imu_init+0x48>)
 8001016:	f002 fe11 	bl	8003c3c <HAL_GPIO_TogglePin>
	uint8_t whoami = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800101a:	2275      	movs	r2, #117	; 0x75
 800101c:	21d1      	movs	r1, #209	; 0xd1
 800101e:	20d0      	movs	r0, #208	; 0xd0
 8001020:	f7ff ffce 	bl	8000fc0 <readByte>
 8001024:	4604      	mov	r4, r0
	if (whoami == 0x71) {
 8001026:	2871      	cmp	r0, #113	; 0x71
 8001028:	d106      	bne.n	8001038 <imu_init+0x40>
		printf("MPU9250 online..\r\n");
 800102a:	4806      	ldr	r0, [pc, #24]	; (8001044 <imu_init+0x4c>)
 800102c:	f009 fbee 	bl	800a80c <puts>
		printf("whoami reg = %d ..\r\n", whoami);
 8001030:	4621      	mov	r1, r4
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <imu_init+0x50>)
 8001034:	f009 fb76 	bl	800a724 <iprintf>
}
 8001038:	2000      	movs	r0, #0
 800103a:	bd10      	pop	{r4, pc}
 800103c:	0800e1a0 	.word	0x0800e1a0
 8001040:	40020000 	.word	0x40020000
 8001044:	0800e1b0 	.word	0x0800e1b0
 8001048:	0800e1c4 	.word	0x0800e1c4

0800104c <readBytes>:

void readBytes(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress,
	uint8_t count, uint8_t * dest) {
 800104c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001050:	b088      	sub	sp, #32
 8001052:	4688      	mov	r8, r1
 8001054:	461c      	mov	r4, r3
 8001056:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	uint8_t data[14];
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8001058:	a908      	add	r1, sp, #32
 800105a:	f801 2d14 	strb.w	r2, [r1, #-20]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, count, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 800105e:	4e0e      	ldr	r6, [pc, #56]	; (8001098 <readBytes+0x4c>)
 8001060:	270a      	movs	r7, #10
 8001062:	9700      	str	r7, [sp, #0]
 8001064:	2301      	movs	r3, #1
 8001066:	460a      	mov	r2, r1
 8001068:	4601      	mov	r1, r0
 800106a:	4630      	mov	r0, r6
 800106c:	f003 f8c2 	bl	80041f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 8001070:	9700      	str	r7, [sp, #0]
 8001072:	4623      	mov	r3, r4
 8001074:	aa04      	add	r2, sp, #16
 8001076:	4641      	mov	r1, r8
 8001078:	4630      	mov	r0, r6
 800107a:	f003 f975 	bl	8004368 <HAL_I2C_Master_Receive>

	for (int ii = 0; ii < count; ii++) {
 800107e:	2300      	movs	r3, #0
 8001080:	e005      	b.n	800108e <readBytes+0x42>
		dest[ii] = data[ii];
 8001082:	aa08      	add	r2, sp, #32
 8001084:	441a      	add	r2, r3
 8001086:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800108a:	54ea      	strb	r2, [r5, r3]
	for (int ii = 0; ii < count; ii++) {
 800108c:	3301      	adds	r3, #1
 800108e:	429c      	cmp	r4, r3
 8001090:	dcf7      	bgt.n	8001082 <readBytes+0x36>
	}
}
 8001092:	b008      	add	sp, #32
 8001094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001098:	20004344 	.word	0x20004344

0800109c <getMres>:

void getMres() {

	switch (Mscale) {
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <getMres+0x1c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b113      	cbz	r3, 80010a8 <getMres+0xc>
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d004      	beq.n	80010b0 <getMres+0x14>
 80010a6:	4770      	bx	lr
	// Possible magnetometer scales (and their register bit settings) are:
	// 14 bit resolution (0) and 16 bit resolution (1)
	case MFS_14BITS:
		mRes = 10.0 * 4219.0 / 8190.0; // Proper scale to return milliGauss
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <getMres+0x20>)
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <getMres+0x24>)
 80010ac:	601a      	str	r2, [r3, #0]
		break;
 80010ae:	4770      	bx	lr
	case MFS_16BITS:
		mRes = 10.0 * 4219.0 / 32760.0; // Proper scale to return milliGauss
 80010b0:	4b02      	ldr	r3, [pc, #8]	; (80010bc <getMres+0x20>)
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <getMres+0x28>)
 80010b4:	601a      	str	r2, [r3, #0]
		break;
	}
}
 80010b6:	4770      	bx	lr
 80010b8:	20000001 	.word	0x20000001
 80010bc:	200043dc 	.word	0x200043dc
 80010c0:	40a4d84e 	.word	0x40a4d84e
 80010c4:	3fa4d84e 	.word	0x3fa4d84e

080010c8 <getGres>:

void getGres() {
	switch (Gscale) {
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <getGres+0x30>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d812      	bhi.n	80010f6 <getGres+0x2e>
 80010d0:	e8df f003 	tbb	[pc, r3]
 80010d4:	0e0a0602 	.word	0x0e0a0602
	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case GFS_250DPS:
		gRes = 250.0 / 32768.0;
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <getGres+0x34>)
 80010da:	4a09      	ldr	r2, [pc, #36]	; (8001100 <getGres+0x38>)
 80010dc:	601a      	str	r2, [r3, #0]
		break;
 80010de:	4770      	bx	lr
	case GFS_500DPS:
		gRes = 500.0 / 32768.0;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <getGres+0x34>)
 80010e2:	4a08      	ldr	r2, [pc, #32]	; (8001104 <getGres+0x3c>)
 80010e4:	601a      	str	r2, [r3, #0]
		break;
 80010e6:	4770      	bx	lr
	case GFS_1000DPS:
		gRes = 1000.0 / 32768.0;
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <getGres+0x34>)
 80010ea:	4a07      	ldr	r2, [pc, #28]	; (8001108 <getGres+0x40>)
 80010ec:	601a      	str	r2, [r3, #0]
		break;
 80010ee:	4770      	bx	lr
	case GFS_2000DPS:
		gRes = 2000.0 / 32768.0;
 80010f0:	4b02      	ldr	r3, [pc, #8]	; (80010fc <getGres+0x34>)
 80010f2:	4a06      	ldr	r2, [pc, #24]	; (800110c <getGres+0x44>)
 80010f4:	601a      	str	r2, [r3, #0]
		break;
	}
}
 80010f6:	4770      	bx	lr
 80010f8:	2000026d 	.word	0x2000026d
 80010fc:	200043c0 	.word	0x200043c0
 8001100:	3bfa0000 	.word	0x3bfa0000
 8001104:	3c7a0000 	.word	0x3c7a0000
 8001108:	3cfa0000 	.word	0x3cfa0000
 800110c:	3d7a0000 	.word	0x3d7a0000

08001110 <getAres>:

void getAres() {
	switch (Ascale) {
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <getAres+0x38>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b03      	cmp	r3, #3
 8001116:	d816      	bhi.n	8001146 <getAres+0x36>
 8001118:	e8df f003 	tbb	[pc, r3]
 800111c:	110c0702 	.word	0x110c0702
	// Possible accelerometer scales (and their register bit settings) are:
	// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case AFS_2G:
		aRes = 2.0 / 32768.0;
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <getAres+0x3c>)
 8001122:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001126:	601a      	str	r2, [r3, #0]
		break;
 8001128:	4770      	bx	lr
	case AFS_4G:
		aRes = 4.0 / 32768.0;
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <getAres+0x3c>)
 800112c:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001130:	601a      	str	r2, [r3, #0]
		break;
 8001132:	4770      	bx	lr
	case AFS_8G:
		aRes = 8.0 / 32768.0;
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <getAres+0x3c>)
 8001136:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800113a:	601a      	str	r2, [r3, #0]
		break;
 800113c:	4770      	bx	lr
	case AFS_16G:
		aRes = 16.0 / 32768.0;
 800113e:	4b03      	ldr	r3, [pc, #12]	; (800114c <getAres+0x3c>)
 8001140:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001144:	601a      	str	r2, [r3, #0]
		break;
	}
}
 8001146:	4770      	bx	lr
 8001148:	2000026c 	.word	0x2000026c
 800114c:	200043b4 	.word	0x200043b4

08001150 <readAccelData>:

void readAccelData(int16_t * destination) {
 8001150:	b510      	push	{r4, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 8001156:	ab02      	add	r3, sp, #8
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2306      	movs	r3, #6
 800115c:	223b      	movs	r2, #59	; 0x3b
 800115e:	21d1      	movs	r1, #209	; 0xd1
 8001160:	20d0      	movs	r0, #208	; 0xd0
 8001162:	f7ff ff73 	bl	800104c <readBytes>
			&rawData[0]); // Read the six raw data registers into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001166:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800116a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800116e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001172:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001174:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8001178:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800117c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001180:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001182:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8001186:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800118a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800118e:	80a3      	strh	r3, [r4, #4]
}
 8001190:	b004      	add	sp, #16
 8001192:	bd10      	pop	{r4, pc}

08001194 <readGyroData>:

void readGyroData(int16_t * destination) {
 8001194:	b510      	push	{r4, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 800119a:	ab02      	add	r3, sp, #8
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2306      	movs	r3, #6
 80011a0:	2243      	movs	r2, #67	; 0x43
 80011a2:	21d1      	movs	r1, #209	; 0xd1
 80011a4:	20d0      	movs	r0, #208	; 0xd0
 80011a6:	f7ff ff51 	bl	800104c <readBytes>
			&rawData[0]); // Read the six raw data registers sequentially into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80011aa:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80011ae:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80011b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011b6:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80011b8:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80011bc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80011c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011c4:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80011c6:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80011ca:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80011ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011d2:	80a3      	strh	r3, [r4, #4]
}
 80011d4:	b004      	add	sp, #16
 80011d6:	bd10      	pop	{r4, pc}

080011d8 <readMagData>:

void readMagData(int16_t * destination) {
 80011d8:	b510      	push	{r4, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	4604      	mov	r4, r0
	uint8_t rawData[7]; // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if (readByte(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
 80011de:	2202      	movs	r2, #2
 80011e0:	2119      	movs	r1, #25
 80011e2:	2018      	movs	r0, #24
 80011e4:	f7ff feec 	bl	8000fc0 <readByte>
 80011e8:	f010 0f01 	tst.w	r0, #1
 80011ec:	d101      	bne.n	80011f2 <readMagData+0x1a>
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
			destination[2] =
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
		}
	}
}
 80011ee:	b004      	add	sp, #16
 80011f0:	bd10      	pop	{r4, pc}
		readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_XOUT_L, 7, &rawData[0]); // Read the six raw data and ST2 registers sequentially into data array
 80011f2:	ab02      	add	r3, sp, #8
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2307      	movs	r3, #7
 80011f8:	2203      	movs	r2, #3
 80011fa:	2119      	movs	r1, #25
 80011fc:	2018      	movs	r0, #24
 80011fe:	f7ff ff25 	bl	800104c <readBytes>
		uint8_t c = rawData[6]; // End data read by reading ST2 register
 8001202:	f89d 300e 	ldrb.w	r3, [sp, #14]
		if (!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
 8001206:	f013 0f08 	tst.w	r3, #8
 800120a:	d1f0      	bne.n	80011ee <readMagData+0x16>
					(int16_t) (((int16_t) rawData[1] << 8) | rawData[0]); // Turn the MSB and LSB into a signed 16-bit value
 800120c:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001210:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001214:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[0] =
 8001218:	8023      	strh	r3, [r4, #0]
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
 800121a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800121e:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001222:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[1] =
 8001226:	8063      	strh	r3, [r4, #2]
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
 8001228:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800122c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001230:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[2] =
 8001234:	80a3      	strh	r3, [r4, #4]
}
 8001236:	e7da      	b.n	80011ee <readMagData+0x16>

08001238 <resetMPU9250>:
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, TEMP_OUT_H, 2,
			&rawData[0]); // Read the two raw data registers sequentially into data array
	return (int16_t) (((int16_t) rawData[0]) << 8 | rawData[1]); // Turn the MSB and LSB into a 16-bit value
}

void resetMPU9250() {
 8001238:	b508      	push	{r3, lr}
	// reset device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 800123a:	2280      	movs	r2, #128	; 0x80
 800123c:	216b      	movs	r1, #107	; 0x6b
 800123e:	20d0      	movs	r0, #208	; 0xd0
 8001240:	f7ff feaa 	bl	8000f98 <writeByte>
	HAL_Delay(100);
 8001244:	2064      	movs	r0, #100	; 0x64
 8001246:	f002 f9fd 	bl	8003644 <HAL_Delay>
}
 800124a:	bd08      	pop	{r3, pc}

0800124c <initAK8963>:

void initAK8963(float * destination) {
 800124c:	b510      	push	{r4, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	4604      	mov	r4, r0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 8001252:	2200      	movs	r2, #0
 8001254:	210a      	movs	r1, #10
 8001256:	2018      	movs	r0, #24
 8001258:	f7ff fe9e 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 800125c:	200a      	movs	r0, #10
 800125e:	f002 f9f1 	bl	8003644 <HAL_Delay>
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8001262:	220f      	movs	r2, #15
 8001264:	210a      	movs	r1, #10
 8001266:	2018      	movs	r0, #24
 8001268:	f7ff fe96 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 800126c:	200a      	movs	r0, #10
 800126e:	f002 f9e9 	bl	8003644 <HAL_Delay>
	readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ASAX, 3,
 8001272:	ab03      	add	r3, sp, #12
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2303      	movs	r3, #3
 8001278:	2210      	movs	r2, #16
 800127a:	2119      	movs	r1, #25
 800127c:	2018      	movs	r0, #24
 800127e:	f7ff fee5 	bl	800104c <readBytes>
			&rawData[0]);  // Read the x-, y-, and z-axis calibration values
	destination[0] = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 8001282:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001286:	3b80      	subs	r3, #128	; 0x80
 8001288:	ee07 3a10 	vmov	s14, r3
 800128c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001290:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8001308 <initAK8963+0xbc>
 8001294:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001298:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800129c:	ee37 7a26 	vadd.f32	s14, s14, s13
 80012a0:	ed84 7a00 	vstr	s14, [r4]
	destination[1] = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 80012a4:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80012a8:	3b80      	subs	r3, #128	; 0x80
 80012aa:	ee07 3a10 	vmov	s14, r3
 80012ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80012b2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80012b6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80012ba:	ed84 7a01 	vstr	s14, [r4, #4]
	destination[2] = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 80012be:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80012c2:	3b80      	subs	r3, #128	; 0x80
 80012c4:	ee07 3a90 	vmov	s15, r3
 80012c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012cc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80012d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80012d4:	edc4 7a02 	vstr	s15, [r4, #8]
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 80012d8:	2200      	movs	r2, #0
 80012da:	210a      	movs	r1, #10
 80012dc:	2018      	movs	r0, #24
 80012de:	f7ff fe5b 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 80012e2:	200a      	movs	r0, #10
 80012e4:	f002 f9ae 	bl	8003644 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <initAK8963+0xc0>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4a08      	ldr	r2, [pc, #32]	; (8001310 <initAK8963+0xc4>)
 80012ee:	7812      	ldrb	r2, [r2, #0]
 80012f0:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	210a      	movs	r1, #10
 80012f8:	2018      	movs	r0, #24
 80012fa:	f7ff fe4d 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 80012fe:	200a      	movs	r0, #10
 8001300:	f002 f9a0 	bl	8003644 <HAL_Delay>
}
 8001304:	b004      	add	sp, #16
 8001306:	bd10      	pop	{r4, pc}
 8001308:	3b800000 	.word	0x3b800000
 800130c:	20000001 	.word	0x20000001
 8001310:	20000000 	.word	0x20000000

08001314 <initMPU9250>:

void initMPU9250() {
 8001314:	b510      	push	{r4, lr}
	// Initialize MPU9250 device
	// wake up device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 8001316:	2200      	movs	r2, #0
 8001318:	216b      	movs	r1, #107	; 0x6b
 800131a:	20d0      	movs	r0, #208	; 0xd0
 800131c:	f7ff fe3c 	bl	8000f98 <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8001320:	2064      	movs	r0, #100	; 0x64
 8001322:	f002 f98f 	bl	8003644 <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01); // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8001326:	2201      	movs	r2, #1
 8001328:	216b      	movs	r1, #107	; 0x6b
 800132a:	20d0      	movs	r0, #208	; 0xd0
 800132c:	f7ff fe34 	bl	8000f98 <writeByte>

	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	// DLPF_CFG = bits 2:0 = 010 = 0x03; this sets the sample rate at 1 kHz for both
	// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x00);
 8001330:	2200      	movs	r2, #0
 8001332:	211a      	movs	r1, #26
 8001334:	20d0      	movs	r0, #208	; 0xd0
 8001336:	f7ff fe2f 	bl	8000f98 <writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Use a 200 Hz rate; the same rate set in CONFIG above
 800133a:	2200      	movs	r2, #0
 800133c:	2119      	movs	r1, #25
 800133e:	20d0      	movs	r0, #208	; 0xd0
 8001340:	f7ff fe2a 	bl	8000f98 <writeByte>

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX,
 8001344:	221b      	movs	r2, #27
 8001346:	21d1      	movs	r1, #209	; 0xd1
 8001348:	4608      	mov	r0, r1
 800134a:	f7ff fe39 	bl	8000fc0 <readByte>
 800134e:	4604      	mov	r4, r0
	GYRO_CONFIG);
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8001350:	f000 021f 	and.w	r2, r0, #31
 8001354:	211b      	movs	r1, #27
 8001356:	20d0      	movs	r0, #208	; 0xd0
 8001358:	f7ff fe1e 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 800135c:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 8001360:	211b      	movs	r1, #27
 8001362:	20d0      	movs	r0, #208	; 0xd0
 8001364:	f7ff fe18 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <initMPU9250+0xd8>)
 800136a:	781a      	ldrb	r2, [r3, #0]
 800136c:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	211b      	movs	r1, #27
 8001374:	20d0      	movs	r0, #208	; 0xd0
 8001376:	f7ff fe0f 	bl	8000f98 <writeByte>

	// Set accelerometer configuration
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG);
 800137a:	221c      	movs	r2, #28
 800137c:	21d1      	movs	r1, #209	; 0xd1
 800137e:	4608      	mov	r0, r1
 8001380:	f7ff fe1e 	bl	8000fc0 <readByte>
 8001384:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8001386:	f000 021f 	and.w	r2, r0, #31
 800138a:	211c      	movs	r1, #28
 800138c:	20d0      	movs	r0, #208	; 0xd0
 800138e:	f7ff fe03 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001392:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 8001396:	211c      	movs	r1, #28
 8001398:	20d0      	movs	r0, #208	; 0xd0
 800139a:	f7ff fdfd 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <initMPU9250+0xdc>)
 80013a0:	781a      	ldrb	r2, [r3, #0]
 80013a2:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	211c      	movs	r1, #28
 80013aa:	20d0      	movs	r0, #208	; 0xd0
 80013ac:	f7ff fdf4 	bl	8000f98 <writeByte>

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG2);
 80013b0:	221d      	movs	r2, #29
 80013b2:	21d1      	movs	r1, #209	; 0xd1
 80013b4:	4608      	mov	r0, r1
 80013b6:	f7ff fe03 	bl	8000fc0 <readByte>
 80013ba:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80013bc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80013c0:	211d      	movs	r1, #29
 80013c2:	20d0      	movs	r0, #208	; 0xd0
 80013c4:	f7ff fde8 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c | 0x03); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80013c8:	f044 0203 	orr.w	r2, r4, #3
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	211d      	movs	r1, #29
 80013d0:	20d0      	movs	r0, #208	; 0xd0
 80013d2:	f7ff fde1 	bl	8000f98 <writeByte>
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	writeByte(MPU9250_ADDRESS_TX, INT_PIN_CFG, 0x22);
 80013d6:	2222      	movs	r2, #34	; 0x22
 80013d8:	2137      	movs	r1, #55	; 0x37
 80013da:	20d0      	movs	r0, #208	; 0xd0
 80013dc:	f7ff fddc 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 80013e0:	2201      	movs	r2, #1
 80013e2:	2138      	movs	r1, #56	; 0x38
 80013e4:	20d0      	movs	r0, #208	; 0xd0
 80013e6:	f7ff fdd7 	bl	8000f98 <writeByte>
}
 80013ea:	bd10      	pop	{r4, pc}
 80013ec:	2000026d 	.word	0x2000026d
 80013f0:	2000026c 	.word	0x2000026c

080013f4 <calibrateMPU9250>:

// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(float * dest1, float * dest2) {
 80013f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013f8:	b08c      	sub	sp, #48	; 0x30
 80013fa:	4607      	mov	r7, r0
 80013fc:	460e      	mov	r6, r1
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = { 0, 0, 0 }, accel_bias[3] = { 0, 0, 0 };
 80013fe:	2400      	movs	r4, #0
 8001400:	9406      	str	r4, [sp, #24]
 8001402:	9407      	str	r4, [sp, #28]
 8001404:	9408      	str	r4, [sp, #32]
 8001406:	9403      	str	r4, [sp, #12]
 8001408:	9404      	str	r4, [sp, #16]
 800140a:	9405      	str	r4, [sp, #20]

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 800140c:	2280      	movs	r2, #128	; 0x80
 800140e:	216b      	movs	r1, #107	; 0x6b
 8001410:	20d0      	movs	r0, #208	; 0xd0
 8001412:	f7ff fdc1 	bl	8000f98 <writeByte>
	HAL_Delay(100);
 8001416:	2064      	movs	r0, #100	; 0x64
 8001418:	f002 f914 	bl	8003644 <HAL_Delay>

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01);
 800141c:	2201      	movs	r2, #1
 800141e:	216b      	movs	r1, #107	; 0x6b
 8001420:	20d0      	movs	r0, #208	; 0xd0
 8001422:	f7ff fdb9 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_2, 0x00);
 8001426:	4622      	mov	r2, r4
 8001428:	216c      	movs	r1, #108	; 0x6c
 800142a:	20d0      	movs	r0, #208	; 0xd0
 800142c:	f7ff fdb4 	bl	8000f98 <writeByte>
	HAL_Delay(200);
 8001430:	20c8      	movs	r0, #200	; 0xc8
 8001432:	f002 f907 	bl	8003644 <HAL_Delay>

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x00); // Disable all interrupts
 8001436:	4622      	mov	r2, r4
 8001438:	2138      	movs	r1, #56	; 0x38
 800143a:	20d0      	movs	r0, #208	; 0xd0
 800143c:	f7ff fdac 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x00);      // Disable FIFO
 8001440:	4622      	mov	r2, r4
 8001442:	2123      	movs	r1, #35	; 0x23
 8001444:	20d0      	movs	r0, #208	; 0xd0
 8001446:	f7ff fda7 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Turn on internal clock source
 800144a:	4622      	mov	r2, r4
 800144c:	216b      	movs	r1, #107	; 0x6b
 800144e:	20d0      	movs	r0, #208	; 0xd0
 8001450:	f7ff fda2 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, I2C_MST_CTRL, 0x00); // Disable I2C master
 8001454:	4622      	mov	r2, r4
 8001456:	2124      	movs	r1, #36	; 0x24
 8001458:	20d0      	movs	r0, #208	; 0xd0
 800145a:	f7ff fd9d 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x00); // Disable FIFO and I2C master modes
 800145e:	4622      	mov	r2, r4
 8001460:	216a      	movs	r1, #106	; 0x6a
 8001462:	20d0      	movs	r0, #208	; 0xd0
 8001464:	f7ff fd98 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8001468:	220c      	movs	r2, #12
 800146a:	216a      	movs	r1, #106	; 0x6a
 800146c:	20d0      	movs	r0, #208	; 0xd0
 800146e:	f7ff fd93 	bl	8000f98 <writeByte>
	HAL_Delay(15);
 8001472:	200f      	movs	r0, #15
 8001474:	f002 f8e6 	bl	8003644 <HAL_Delay>

	// Configure MPU9250 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x01); // Set low-pass filter to 188 Hz
 8001478:	2201      	movs	r2, #1
 800147a:	211a      	movs	r1, #26
 800147c:	20d0      	movs	r0, #208	; 0xd0
 800147e:	f7ff fd8b 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Set sample rate to 1 kHz
 8001482:	4622      	mov	r2, r4
 8001484:	2119      	movs	r1, #25
 8001486:	20d0      	movs	r0, #208	; 0xd0
 8001488:	f7ff fd86 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00); // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 800148c:	4622      	mov	r2, r4
 800148e:	211b      	movs	r1, #27
 8001490:	20d0      	movs	r0, #208	; 0xd0
 8001492:	f7ff fd81 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001496:	4622      	mov	r2, r4
 8001498:	211c      	movs	r1, #28
 800149a:	20d0      	movs	r0, #208	; 0xd0
 800149c:	f7ff fd7c 	bl	8000f98 <writeByte>

	uint16_t gyrosensitivity = 131;   // = 131 LSB/degrees/sec
	uint16_t accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x40);   // Enable FIFO
 80014a0:	2240      	movs	r2, #64	; 0x40
 80014a2:	216a      	movs	r1, #106	; 0x6a
 80014a4:	20d0      	movs	r0, #208	; 0xd0
 80014a6:	f7ff fd77 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x78); // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 80014aa:	2278      	movs	r2, #120	; 0x78
 80014ac:	2123      	movs	r1, #35	; 0x23
 80014ae:	20d0      	movs	r0, #208	; 0xd0
 80014b0:	f7ff fd72 	bl	8000f98 <writeByte>
	HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 80014b4:	2028      	movs	r0, #40	; 0x28
 80014b6:	f002 f8c5 	bl	8003644 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x00); // Disable gyro and accelerometer sensors for FIFO
 80014ba:	4622      	mov	r2, r4
 80014bc:	2123      	movs	r1, #35	; 0x23
 80014be:	20d0      	movs	r0, #208	; 0xd0
 80014c0:	f7ff fd6a 	bl	8000f98 <writeByte>
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 80014c4:	ab09      	add	r3, sp, #36	; 0x24
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2302      	movs	r3, #2
 80014ca:	2272      	movs	r2, #114	; 0x72
 80014cc:	21d1      	movs	r1, #209	; 0xd1
 80014ce:	20d0      	movs	r0, #208	; 0xd0
 80014d0:	f7ff fdbc 	bl	800104c <readBytes>
	fifo_count = ((uint16_t) data[0] << 8) | data[1];
 80014d4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80014d8:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 80014dc:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	packet_count = fifo_count / 12; // How many sets of full gyro and accelerometer data for averaging
 80014e0:	4b6d      	ldr	r3, [pc, #436]	; (8001698 <calibrateMPU9250+0x2a4>)
 80014e2:	fba3 3505 	umull	r3, r5, r3, r5
 80014e6:	08ed      	lsrs	r5, r5, #3

	for (ii = 0; ii < packet_count; ii++) {
 80014e8:	e045      	b.n	8001576 <calibrateMPU9250+0x182>
		int16_t accel_temp[3] = { 0, 0, 0 }, gyro_temp[3] = { 0, 0, 0 };
		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, FIFO_R_W, 12,
 80014ea:	ab09      	add	r3, sp, #36	; 0x24
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	230c      	movs	r3, #12
 80014f0:	2274      	movs	r2, #116	; 0x74
 80014f2:	21d1      	movs	r1, #209	; 0xd1
 80014f4:	20d0      	movs	r0, #208	; 0xd0
 80014f6:	f7ff fda9 	bl	800104c <readBytes>
				&data[0]); // read data for averaging
		accel_temp[0] = (int16_t) (((int16_t) data[0] << 8) | data[1]); // Form signed 16-bit integer for each sample in FIFO
 80014fa:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 80014fe:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
 8001502:	ea40 2808 	orr.w	r8, r0, r8, lsl #8
		accel_temp[1] = (int16_t) (((int16_t) data[2] << 8) | data[3]);
 8001506:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
 800150a:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 800150e:	ea40 2e0e 	orr.w	lr, r0, lr, lsl #8
		accel_temp[2] = (int16_t) (((int16_t) data[4] << 8) | data[5]);
 8001512:	f89d c028 	ldrb.w	ip, [sp, #40]	; 0x28
 8001516:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 800151a:	ea40 2c0c 	orr.w	ip, r0, ip, lsl #8
		gyro_temp[0] = (int16_t) (((int16_t) data[6] << 8) | data[7]);
 800151e:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8001522:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
 8001526:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
		gyro_temp[1] = (int16_t) (((int16_t) data[8] << 8) | data[9]);
 800152a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800152e:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8001532:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		gyro_temp[2] = (int16_t) (((int16_t) data[10] << 8) | data[11]);
 8001536:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 800153a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800153e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001542:	9803      	ldr	r0, [sp, #12]
 8001544:	fa00 f088 	sxtah	r0, r0, r8
 8001548:	9003      	str	r0, [sp, #12]
		accel_bias[1] += (int32_t) accel_temp[1];
 800154a:	9804      	ldr	r0, [sp, #16]
 800154c:	fa00 f08e 	sxtah	r0, r0, lr
 8001550:	9004      	str	r0, [sp, #16]
		accel_bias[2] += (int32_t) accel_temp[2];
 8001552:	9805      	ldr	r0, [sp, #20]
 8001554:	fa00 f08c 	sxtah	r0, r0, ip
 8001558:	9005      	str	r0, [sp, #20]
		gyro_bias[0] += (int32_t) gyro_temp[0];
 800155a:	9806      	ldr	r0, [sp, #24]
 800155c:	fa00 f181 	sxtah	r1, r0, r1
 8001560:	9106      	str	r1, [sp, #24]
		gyro_bias[1] += (int32_t) gyro_temp[1];
 8001562:	9907      	ldr	r1, [sp, #28]
 8001564:	fa01 f282 	sxtah	r2, r1, r2
 8001568:	9207      	str	r2, [sp, #28]
		gyro_bias[2] += (int32_t) gyro_temp[2];
 800156a:	9a08      	ldr	r2, [sp, #32]
 800156c:	fa02 f383 	sxtah	r3, r2, r3
 8001570:	9308      	str	r3, [sp, #32]
	for (ii = 0; ii < packet_count; ii++) {
 8001572:	3401      	adds	r4, #1
 8001574:	b2a4      	uxth	r4, r4
 8001576:	42ac      	cmp	r4, r5
 8001578:	d3b7      	bcc.n	80014ea <calibrateMPU9250+0xf6>

	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 800157a:	9b03      	ldr	r3, [sp, #12]
 800157c:	fb93 f8f5 	sdiv	r8, r3, r5
	accel_bias[1] /= (int32_t) packet_count;
 8001580:	9b04      	ldr	r3, [sp, #16]
 8001582:	fb93 f4f5 	sdiv	r4, r3, r5
	accel_bias[2] /= (int32_t) packet_count;
 8001586:	9805      	ldr	r0, [sp, #20]
 8001588:	fb90 f0f5 	sdiv	r0, r0, r5
	gyro_bias[0] /= (int32_t) packet_count;
 800158c:	9906      	ldr	r1, [sp, #24]
 800158e:	fb91 f1f5 	sdiv	r1, r1, r5
	gyro_bias[1] /= (int32_t) packet_count;
 8001592:	9a07      	ldr	r2, [sp, #28]
 8001594:	fb92 f2f5 	sdiv	r2, r2, r5
	gyro_bias[2] /= (int32_t) packet_count;
 8001598:	9b08      	ldr	r3, [sp, #32]
 800159a:	fb93 f5f5 	sdiv	r5, r3, r5

	if (accel_bias[2] > 0L) {
 800159e:	2800      	cmp	r0, #0
 80015a0:	dd4f      	ble.n	8001642 <calibrateMPU9250+0x24e>
		accel_bias[2] -= (int32_t) accelsensitivity;
 80015a2:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 80015a6:	9005      	str	r0, [sp, #20]
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
	}

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 80015a8:	424b      	negs	r3, r1
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	db4d      	blt.n	800164a <calibrateMPU9250+0x256>
 80015ae:	1098      	asrs	r0, r3, #2
 80015b0:	129b      	asrs	r3, r3, #10
 80015b2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data[1] = (-gyro_bias[0] / 4) & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 80015b6:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
	data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 80015ba:	4253      	negs	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	db46      	blt.n	800164e <calibrateMPU9250+0x25a>
 80015c0:	1098      	asrs	r0, r3, #2
 80015c2:	129b      	asrs	r3, r3, #10
 80015c4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	data[3] = (-gyro_bias[1] / 4) & 0xFF;
 80015c8:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
	data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 80015cc:	426b      	negs	r3, r5
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	db3f      	blt.n	8001652 <calibrateMPU9250+0x25e>
 80015d2:	1098      	asrs	r0, r3, #2
 80015d4:	129b      	asrs	r3, r3, #10
 80015d6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	data[5] = (-gyro_bias[2] / 4) & 0xFF;
 80015da:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
	 writeByte(MPU9250_ADDRESS_TX, YG_OFFSET_H, data[2]);
	 writeByte(MPU9250_ADDRESS_TX, YG_OFFSET_L, data[3]);
	 writeByte(MPU9250_ADDRESS_TX, ZG_OFFSET_H, data[4]);
	 writeByte(MPU9250_ADDRESS_TX, ZG_OFFSET_L, data[5]);
	 */
	dest1[0] = (float) gyro_bias[0] / (float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 80015de:	ee07 1a90 	vmov	s15, r1
 80015e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800169c <calibrateMPU9250+0x2a8>
 80015ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015ee:	edc7 6a00 	vstr	s13, [r7]
	dest1[1] = (float) gyro_bias[1] / (float) gyrosensitivity;
 80015f2:	ee07 2a90 	vmov	s15, r2
 80015f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015fe:	edc7 6a01 	vstr	s13, [r7, #4]
	dest1[2] = (float) gyro_bias[2] / (float) gyrosensitivity;
 8001602:	ee07 5a90 	vmov	s15, r5
 8001606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800160e:	edc7 6a02 	vstr	s13, [r7, #8]
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = { 0, 0, 0 }; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 8001612:	ad09      	add	r5, sp, #36	; 0x24
 8001614:	9500      	str	r5, [sp, #0]
 8001616:	2302      	movs	r3, #2
 8001618:	2277      	movs	r2, #119	; 0x77
 800161a:	21d1      	movs	r1, #209	; 0xd1
 800161c:	20d0      	movs	r0, #208	; 0xd0
 800161e:	f7ff fd15 	bl	800104c <readBytes>
	accel_bias_reg[0] = (int16_t) ((int16_t) data[0] << 8) | data[1];
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, YA_OFFSET_H, 2, &data[0]);
 8001622:	9500      	str	r5, [sp, #0]
 8001624:	2302      	movs	r3, #2
 8001626:	227a      	movs	r2, #122	; 0x7a
 8001628:	21d1      	movs	r1, #209	; 0xd1
 800162a:	20d0      	movs	r0, #208	; 0xd0
 800162c:	f7ff fd0e 	bl	800104c <readBytes>
	accel_bias_reg[1] = (int16_t) ((int16_t) data[0] << 8) | data[1];
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ZA_OFFSET_H, 2, &data[0]);
 8001630:	9500      	str	r5, [sp, #0]
 8001632:	2302      	movs	r3, #2
 8001634:	227d      	movs	r2, #125	; 0x7d
 8001636:	21d1      	movs	r1, #209	; 0xd1
 8001638:	20d0      	movs	r0, #208	; 0xd0
 800163a:	f7ff fd07 	bl	800104c <readBytes>
	accel_bias_reg[2] = (int16_t) ((int16_t) data[0] << 8) | data[1];

	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = { 0, 0, 0 }; // Define array to hold mask bit for each accelerometer bias axis

	for (ii = 0; ii < 3; ii++) {
 800163e:	2300      	movs	r3, #0
 8001640:	e00b      	b.n	800165a <calibrateMPU9250+0x266>
		accel_bias[2] += (int32_t) accelsensitivity;
 8001642:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8001646:	9005      	str	r0, [sp, #20]
 8001648:	e7ae      	b.n	80015a8 <calibrateMPU9250+0x1b4>
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 800164a:	3303      	adds	r3, #3
 800164c:	e7af      	b.n	80015ae <calibrateMPU9250+0x1ba>
	data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 800164e:	3303      	adds	r3, #3
 8001650:	e7b6      	b.n	80015c0 <calibrateMPU9250+0x1cc>
	data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 8001652:	3303      	adds	r3, #3
 8001654:	e7bd      	b.n	80015d2 <calibrateMPU9250+0x1de>
	for (ii = 0; ii < 3; ii++) {
 8001656:	3301      	adds	r3, #1
 8001658:	b29b      	uxth	r3, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d9fb      	bls.n	8001656 <calibrateMPU9250+0x262>
	 writeByte(MPU9250_ADDRESS_TX, YA_OFFSET_L, data[3]);
	 writeByte(MPU9250_ADDRESS_TX, ZA_OFFSET_H, data[4]);
	 writeByte(MPU9250_ADDRESS_TX, ZA_OFFSET_L, data[5]);
	 */
	// Output scaled accelerometer biases for manual subtraction in the main program
	dest2[0] = (float) accel_bias[0] / (float) accelsensitivity;
 800165e:	ee07 8a90 	vmov	s15, r8
 8001662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001666:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80016a0 <calibrateMPU9250+0x2ac>
 800166a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800166e:	edc6 7a00 	vstr	s15, [r6]
	dest2[1] = (float) accel_bias[1] / (float) accelsensitivity;
 8001672:	ee07 4a90 	vmov	s15, r4
 8001676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800167e:	edc6 7a01 	vstr	s15, [r6, #4]
	dest2[2] = (float) accel_bias[2] / (float) accelsensitivity;
 8001682:	eddd 7a05 	vldr	s15, [sp, #20]
 8001686:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168e:	edc6 7a02 	vstr	s15, [r6, #8]
}
 8001692:	b00c      	add	sp, #48	; 0x30
 8001694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001698:	aaaaaaab 	.word	0xaaaaaaab
 800169c:	43030000 	.word	0x43030000
 80016a0:	38800000 	.word	0x38800000
 80016a4:	00000000 	.word	0x00000000

080016a8 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
		{
 80016a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016ac:	ed2d 8b08 	vpush	{d8-d11}
 80016b0:	b093      	sub	sp, #76	; 0x4c
 80016b2:	4605      	mov	r5, r0
	uint8_t rawData[6] = { 0, 0, 0, 0, 0, 0 };
 80016b4:	2400      	movs	r4, #0
 80016b6:	9410      	str	r4, [sp, #64]	; 0x40
 80016b8:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
	uint8_t selfTest[6];
	int16_t gAvg[3], aAvg[3], aSTAvg[3], gSTAvg[3];
	float factoryTrim[6];
	uint8_t FS = 0;

	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 80016bc:	4622      	mov	r2, r4
 80016be:	2119      	movs	r1, #25
 80016c0:	20d0      	movs	r0, #208	; 0xd0
 80016c2:	f7ff fc69 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 80016c6:	2202      	movs	r2, #2
 80016c8:	211a      	movs	r1, #26
 80016ca:	20d0      	movs	r0, #208	; 0xd0
 80016cc:	f7ff fc64 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 1 << FS); // Set full scale range for the gyro to 250 dps
 80016d0:	2201      	movs	r2, #1
 80016d2:	211b      	movs	r1, #27
 80016d4:	20d0      	movs	r0, #208	; 0xd0
 80016d6:	f7ff fc5f 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80016da:	2202      	movs	r2, #2
 80016dc:	211d      	movs	r1, #29
 80016de:	20d0      	movs	r0, #208	; 0xd0
 80016e0:	f7ff fc5a 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 1 << FS); // Set full scale range for the accelerometer to 2 g
 80016e4:	2201      	movs	r2, #1
 80016e6:	211c      	movs	r1, #28
 80016e8:	20d0      	movs	r0, #208	; 0xd0
 80016ea:	f7ff fc55 	bl	8000f98 <writeByte>

	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 80016ee:	e051      	b.n	8001794 <MPU9250SelfTest+0xec>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 80016f0:	ae10      	add	r6, sp, #64	; 0x40
 80016f2:	9600      	str	r6, [sp, #0]
 80016f4:	2306      	movs	r3, #6
 80016f6:	223b      	movs	r2, #59	; 0x3b
 80016f8:	21d1      	movs	r1, #209	; 0xd1
 80016fa:	20d0      	movs	r0, #208	; 0xd0
 80016fc:	f7ff fca6 	bl	800104c <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001700:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001704:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001708:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800170c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8001710:	4413      	add	r3, r2
 8001712:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		aAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001716:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 800171a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800171e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001722:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8001726:	4413      	add	r3, r2
 8001728:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		aAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800172c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001730:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001734:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001738:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800173c:	4413      	add	r3, r2
 800173e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 8001742:	9600      	str	r6, [sp, #0]
 8001744:	2306      	movs	r3, #6
 8001746:	2243      	movs	r2, #67	; 0x43
 8001748:	21d1      	movs	r1, #209	; 0xd1
 800174a:	20d0      	movs	r0, #208	; 0xd0
 800174c:	f7ff fc7e 	bl	800104c <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001750:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001754:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001758:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800175c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8001760:	4413      	add	r3, r2
 8001762:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		gAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001766:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 800176a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800176e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001772:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8001776:	4413      	add	r3, r2
 8001778:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		gAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800177c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001780:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001784:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001788:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800178c:	4413      	add	r3, r2
 800178e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 8001792:	3401      	adds	r4, #1
 8001794:	2cc7      	cmp	r4, #199	; 0xc7
 8001796:	ddab      	ble.n	80016f0 <MPU9250SelfTest+0x48>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8001798:	2400      	movs	r4, #0
 800179a:	e016      	b.n	80017ca <MPU9250SelfTest+0x122>
		aAvg[ii] /= 200;
 800179c:	ab12      	add	r3, sp, #72	; 0x48
 800179e:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 80017a2:	f931 2c18 	ldrsh.w	r2, [r1, #-24]
 80017a6:	48c0      	ldr	r0, [pc, #768]	; (8001aa8 <MPU9250SelfTest+0x400>)
 80017a8:	fb80 6302 	smull	r6, r3, r0, r2
 80017ac:	17d2      	asrs	r2, r2, #31
 80017ae:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 80017b2:	f821 2c18 	strh.w	r2, [r1, #-24]
		gAvg[ii] /= 200;
 80017b6:	f931 3c10 	ldrsh.w	r3, [r1, #-16]
 80017ba:	fb80 2003 	smull	r2, r0, r0, r3
 80017be:	17db      	asrs	r3, r3, #31
 80017c0:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 80017c4:	f821 3c10 	strh.w	r3, [r1, #-16]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 80017c8:	3401      	adds	r4, #1
 80017ca:	2c02      	cmp	r4, #2
 80017cc:	dde6      	ble.n	800179c <MPU9250SelfTest+0xf4>
	}

	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 80017ce:	22e0      	movs	r2, #224	; 0xe0
 80017d0:	211c      	movs	r1, #28
 80017d2:	20d0      	movs	r0, #208	; 0xd0
 80017d4:	f7ff fbe0 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80017d8:	22e0      	movs	r2, #224	; 0xe0
 80017da:	211b      	movs	r1, #27
 80017dc:	20d0      	movs	r0, #208	; 0xd0
 80017de:	f7ff fbdb 	bl	8000f98 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 80017e2:	2019      	movs	r0, #25
 80017e4:	f001 ff2e 	bl	8003644 <HAL_Delay>

	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 80017e8:	2400      	movs	r4, #0
 80017ea:	e051      	b.n	8001890 <MPU9250SelfTest+0x1e8>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 80017ec:	ae10      	add	r6, sp, #64	; 0x40
 80017ee:	9600      	str	r6, [sp, #0]
 80017f0:	2306      	movs	r3, #6
 80017f2:	223b      	movs	r2, #59	; 0x3b
 80017f4:	21d1      	movs	r1, #209	; 0xd1
 80017f6:	20d0      	movs	r0, #208	; 0xd0
 80017f8:	f7ff fc28 	bl	800104c <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80017fc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001800:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001804:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001808:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800180c:	4413      	add	r3, r2
 800180e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		aSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001812:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8001816:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800181a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800181e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8001822:	4413      	add	r3, r2
 8001824:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		aSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001828:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800182c:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001830:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001834:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8001838:	4413      	add	r3, r2
 800183a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 800183e:	9600      	str	r6, [sp, #0]
 8001840:	2306      	movs	r3, #6
 8001842:	2243      	movs	r2, #67	; 0x43
 8001844:	21d1      	movs	r1, #209	; 0xd1
 8001846:	20d0      	movs	r0, #208	; 0xd0
 8001848:	f7ff fc00 	bl	800104c <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800184c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001850:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001854:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001858:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800185c:	4413      	add	r3, r2
 800185e:	f8ad 3020 	strh.w	r3, [sp, #32]
		gSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001862:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8001866:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800186a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800186e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8001872:	4413      	add	r3, r2
 8001874:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		gSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001878:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800187c:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001880:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001884:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8001888:	4413      	add	r3, r2
 800188a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 800188e:	3401      	adds	r4, #1
 8001890:	2cc7      	cmp	r4, #199	; 0xc7
 8001892:	ddab      	ble.n	80017ec <MPU9250SelfTest+0x144>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8001894:	2400      	movs	r4, #0
 8001896:	e016      	b.n	80018c6 <MPU9250SelfTest+0x21e>
		aSTAvg[ii] /= 200;
 8001898:	ab12      	add	r3, sp, #72	; 0x48
 800189a:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 800189e:	f931 2c20 	ldrsh.w	r2, [r1, #-32]
 80018a2:	4881      	ldr	r0, [pc, #516]	; (8001aa8 <MPU9250SelfTest+0x400>)
 80018a4:	fb80 6302 	smull	r6, r3, r0, r2
 80018a8:	17d2      	asrs	r2, r2, #31
 80018aa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 80018ae:	f821 2c20 	strh.w	r2, [r1, #-32]
		gSTAvg[ii] /= 200;
 80018b2:	f931 3c28 	ldrsh.w	r3, [r1, #-40]
 80018b6:	fb80 2003 	smull	r2, r0, r0, r3
 80018ba:	17db      	asrs	r3, r3, #31
 80018bc:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 80018c0:	f821 3c28 	strh.w	r3, [r1, #-40]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 80018c4:	3401      	adds	r4, #1
 80018c6:	2c02      	cmp	r4, #2
 80018c8:	dde6      	ble.n	8001898 <MPU9250SelfTest+0x1f0>
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00);
 80018ca:	2200      	movs	r2, #0
 80018cc:	211c      	movs	r1, #28
 80018ce:	20d0      	movs	r0, #208	; 0xd0
 80018d0:	f7ff fb62 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00);
 80018d4:	2200      	movs	r2, #0
 80018d6:	211b      	movs	r1, #27
 80018d8:	20d0      	movs	r0, #208	; 0xd0
 80018da:	f7ff fb5d 	bl	8000f98 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 80018de:	2019      	movs	r0, #25
 80018e0:	f001 feb0 	bl	8003644 <HAL_Delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018e4:	220d      	movs	r2, #13
 80018e6:	21d1      	movs	r1, #209	; 0xd1
 80018e8:	20d0      	movs	r0, #208	; 0xd0
 80018ea:	f7ff fb69 	bl	8000fc0 <readByte>
 80018ee:	ee08 0a10 	vmov	s16, r0
	SELF_TEST_X_ACCEL); // X-axis accel self-test results
	selfTest[1] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018f2:	220e      	movs	r2, #14
 80018f4:	21d1      	movs	r1, #209	; 0xd1
 80018f6:	20d0      	movs	r0, #208	; 0xd0
 80018f8:	f7ff fb62 	bl	8000fc0 <readByte>
 80018fc:	ee0b 0a10 	vmov	s22, r0
	SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
	selfTest[2] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001900:	220f      	movs	r2, #15
 8001902:	21d1      	movs	r1, #209	; 0xd1
 8001904:	20d0      	movs	r0, #208	; 0xd0
 8001906:	f7ff fb5b 	bl	8000fc0 <readByte>
 800190a:	ee0a 0a90 	vmov	s21, r0
	SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
	selfTest[3] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800190e:	2200      	movs	r2, #0
 8001910:	21d1      	movs	r1, #209	; 0xd1
 8001912:	20d0      	movs	r0, #208	; 0xd0
 8001914:	f7ff fb54 	bl	8000fc0 <readByte>
 8001918:	ee0a 0a10 	vmov	s20, r0
	SELF_TEST_X_GYRO); // X-axis gyro self-test results
	selfTest[4] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800191c:	2201      	movs	r2, #1
 800191e:	21d1      	movs	r1, #209	; 0xd1
 8001920:	20d0      	movs	r0, #208	; 0xd0
 8001922:	f7ff fb4d 	bl	8000fc0 <readByte>
 8001926:	ee09 0a90 	vmov	s19, r0
	SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
	selfTest[5] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800192a:	2202      	movs	r2, #2
 800192c:	21d1      	movs	r1, #209	; 0xd1
 800192e:	20d0      	movs	r0, #208	; 0xd0
 8001930:	f7ff fb46 	bl	8000fc0 <readByte>
 8001934:	ee09 0a10 	vmov	s18, r0
	SELF_TEST_Z_GYRO); // Z-axis gyro self-test results

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 8001938:	eef8 7a48 	vcvt.f32.u32	s15, s16
 800193c:	ee17 0a90 	vmov	r0, s15
 8001940:	f7fe fe0a 	bl	8000558 <__aeabi_f2d>
 8001944:	2200      	movs	r2, #0
 8001946:	4b59      	ldr	r3, [pc, #356]	; (8001aac <MPU9250SelfTest+0x404>)
 8001948:	f7fe fca6 	bl	8000298 <__aeabi_dsub>
 800194c:	ed9f 8b52 	vldr	d8, [pc, #328]	; 8001a98 <MPU9250SelfTest+0x3f0>
 8001950:	ec41 0b11 	vmov	d1, r0, r1
 8001954:	eeb0 0a48 	vmov.f32	s0, s16
 8001958:	eef0 0a68 	vmov.f32	s1, s17
 800195c:	f006 fb26 	bl	8007fac <pow>
 8001960:	a34f      	add	r3, pc, #316	; (adr r3, 8001aa0 <MPU9250SelfTest+0x3f8>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	ec51 0b10 	vmov	r0, r1, d0
 800196a:	f7fe fe4d 	bl	8000608 <__aeabi_dmul>
 800196e:	f7ff f943 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[0] = (float) (2620 / 1 << FS)
 8001972:	9002      	str	r0, [sp, #8]
	factoryTrim[1] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 8001974:	eef8 7a4b 	vcvt.f32.u32	s15, s22
 8001978:	ee17 0a90 	vmov	r0, s15
 800197c:	f7fe fdec 	bl	8000558 <__aeabi_f2d>
 8001980:	2200      	movs	r2, #0
 8001982:	4b4a      	ldr	r3, [pc, #296]	; (8001aac <MPU9250SelfTest+0x404>)
 8001984:	f7fe fc88 	bl	8000298 <__aeabi_dsub>
 8001988:	ec41 0b11 	vmov	d1, r0, r1
 800198c:	eeb0 0a48 	vmov.f32	s0, s16
 8001990:	eef0 0a68 	vmov.f32	s1, s17
 8001994:	f006 fb0a 	bl	8007fac <pow>
 8001998:	a341      	add	r3, pc, #260	; (adr r3, 8001aa0 <MPU9250SelfTest+0x3f8>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	ec51 0b10 	vmov	r0, r1, d0
 80019a2:	f7fe fe31 	bl	8000608 <__aeabi_dmul>
 80019a6:	f7ff f927 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[1] = (float) (2620 / 1 << FS)
 80019aa:	9003      	str	r0, [sp, #12]
	factoryTrim[2] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 80019ac:	eef8 7a6a 	vcvt.f32.u32	s15, s21
 80019b0:	ee17 0a90 	vmov	r0, s15
 80019b4:	f7fe fdd0 	bl	8000558 <__aeabi_f2d>
 80019b8:	2200      	movs	r2, #0
 80019ba:	4b3c      	ldr	r3, [pc, #240]	; (8001aac <MPU9250SelfTest+0x404>)
 80019bc:	f7fe fc6c 	bl	8000298 <__aeabi_dsub>
 80019c0:	ec41 0b11 	vmov	d1, r0, r1
 80019c4:	eeb0 0a48 	vmov.f32	s0, s16
 80019c8:	eef0 0a68 	vmov.f32	s1, s17
 80019cc:	f006 faee 	bl	8007fac <pow>
 80019d0:	a333      	add	r3, pc, #204	; (adr r3, 8001aa0 <MPU9250SelfTest+0x3f8>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	ec51 0b10 	vmov	r0, r1, d0
 80019da:	f7fe fe15 	bl	8000608 <__aeabi_dmul>
 80019de:	f7ff f90b 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[2] = (float) (2620 / 1 << FS)
 80019e2:	9004      	str	r0, [sp, #16]
	factoryTrim[3] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 80019e4:	eef8 7a4a 	vcvt.f32.u32	s15, s20
 80019e8:	ee17 0a90 	vmov	r0, s15
 80019ec:	f7fe fdb4 	bl	8000558 <__aeabi_f2d>
 80019f0:	2200      	movs	r2, #0
 80019f2:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <MPU9250SelfTest+0x404>)
 80019f4:	f7fe fc50 	bl	8000298 <__aeabi_dsub>
 80019f8:	ec41 0b11 	vmov	d1, r0, r1
 80019fc:	eeb0 0a48 	vmov.f32	s0, s16
 8001a00:	eef0 0a68 	vmov.f32	s1, s17
 8001a04:	f006 fad2 	bl	8007fac <pow>
 8001a08:	a325      	add	r3, pc, #148	; (adr r3, 8001aa0 <MPU9250SelfTest+0x3f8>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	ec51 0b10 	vmov	r0, r1, d0
 8001a12:	f7fe fdf9 	bl	8000608 <__aeabi_dmul>
 8001a16:	f7ff f8ef 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[3] = (float) (2620 / 1 << FS)
 8001a1a:	9005      	str	r0, [sp, #20]
	factoryTrim[4] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 8001a1c:	eef8 7a69 	vcvt.f32.u32	s15, s19
 8001a20:	ee17 0a90 	vmov	r0, s15
 8001a24:	f7fe fd98 	bl	8000558 <__aeabi_f2d>
 8001a28:	2200      	movs	r2, #0
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <MPU9250SelfTest+0x404>)
 8001a2c:	f7fe fc34 	bl	8000298 <__aeabi_dsub>
 8001a30:	ec41 0b11 	vmov	d1, r0, r1
 8001a34:	eeb0 0a48 	vmov.f32	s0, s16
 8001a38:	eef0 0a68 	vmov.f32	s1, s17
 8001a3c:	f006 fab6 	bl	8007fac <pow>
 8001a40:	a317      	add	r3, pc, #92	; (adr r3, 8001aa0 <MPU9250SelfTest+0x3f8>)
 8001a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a46:	ec51 0b10 	vmov	r0, r1, d0
 8001a4a:	f7fe fddd 	bl	8000608 <__aeabi_dmul>
 8001a4e:	f7ff f8d3 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[4] = (float) (2620 / 1 << FS)
 8001a52:	9006      	str	r0, [sp, #24]
	factoryTrim[5] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 8001a54:	eef8 7a49 	vcvt.f32.u32	s15, s18
 8001a58:	ee17 0a90 	vmov	r0, s15
 8001a5c:	f7fe fd7c 	bl	8000558 <__aeabi_f2d>
 8001a60:	2200      	movs	r2, #0
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <MPU9250SelfTest+0x404>)
 8001a64:	f7fe fc18 	bl	8000298 <__aeabi_dsub>
 8001a68:	ec41 0b11 	vmov	d1, r0, r1
 8001a6c:	eeb0 0a48 	vmov.f32	s0, s16
 8001a70:	eef0 0a68 	vmov.f32	s1, s17
 8001a74:	f006 fa9a 	bl	8007fac <pow>
 8001a78:	a309      	add	r3, pc, #36	; (adr r3, 8001aa0 <MPU9250SelfTest+0x3f8>)
 8001a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7e:	ec51 0b10 	vmov	r0, r1, d0
 8001a82:	f7fe fdc1 	bl	8000608 <__aeabi_dmul>
 8001a86:	f7ff f8b7 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[5] = (float) (2620 / 1 << FS)
 8001a8a:	9007      	str	r0, [sp, #28]

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 8001a8c:	f04f 0800 	mov.w	r8, #0
 8001a90:	e05f      	b.n	8001b52 <MPU9250SelfTest+0x4aa>
 8001a92:	bf00      	nop
 8001a94:	f3af 8000 	nop.w
 8001a98:	c28f5c29 	.word	0xc28f5c29
 8001a9c:	3ff028f5 	.word	0x3ff028f5
 8001aa0:	00000000 	.word	0x00000000
 8001aa4:	40a47800 	.word	0x40a47800
 8001aa8:	51eb851f 	.word	0x51eb851f
 8001aac:	3ff00000 	.word	0x3ff00000
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001ab0:	ab12      	add	r3, sp, #72	; 0x48
 8001ab2:	eb03 0448 	add.w	r4, r3, r8, lsl #1
 8001ab6:	f934 0c20 	ldrsh.w	r0, [r4, #-32]
 8001aba:	f934 3c18 	ldrsh.w	r3, [r4, #-24]
 8001abe:	1ac0      	subs	r0, r0, r3
 8001ac0:	ee07 0a90 	vmov	s15, r0
 8001ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac8:	ee17 0a90 	vmov	r0, s15
 8001acc:	f7fe fd44 	bl	8000558 <__aeabi_f2d>
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <MPU9250SelfTest+0x4bc>)
 8001ad4:	f7fe fd98 	bl	8000608 <__aeabi_dmul>
 8001ad8:	4606      	mov	r6, r0
 8001ada:	460f      	mov	r7, r1
				/ factoryTrim[i]; // Report percent differences
 8001adc:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8001ae0:	ab12      	add	r3, sp, #72	; 0x48
 8001ae2:	444b      	add	r3, r9
 8001ae4:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001ae8:	f7fe fd36 	bl	8000558 <__aeabi_f2d>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001aec:	44a9      	add	r9, r5
				/ factoryTrim[i]; // Report percent differences
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4630      	mov	r0, r6
 8001af4:	4639      	mov	r1, r7
 8001af6:	f7fe feb1 	bl	800085c <__aeabi_ddiv>
 8001afa:	f7ff f87d 	bl	8000bf8 <__aeabi_d2f>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001afe:	f8c9 0000 	str.w	r0, [r9]
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001b02:	f934 0c28 	ldrsh.w	r0, [r4, #-40]
 8001b06:	f934 3c10 	ldrsh.w	r3, [r4, #-16]
 8001b0a:	1ac0      	subs	r0, r0, r3
 8001b0c:	ee07 0a90 	vmov	s15, r0
 8001b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b14:	ee17 0a90 	vmov	r0, s15
 8001b18:	f7fe fd1e 	bl	8000558 <__aeabi_f2d>
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <MPU9250SelfTest+0x4bc>)
 8001b20:	f7fe fd72 	bl	8000608 <__aeabi_dmul>
 8001b24:	4606      	mov	r6, r0
 8001b26:	460f      	mov	r7, r1
				/ factoryTrim[i + 3]; // Report percent differences
 8001b28:	f108 0403 	add.w	r4, r8, #3
 8001b2c:	00a4      	lsls	r4, r4, #2
 8001b2e:	ab12      	add	r3, sp, #72	; 0x48
 8001b30:	4423      	add	r3, r4
 8001b32:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001b36:	f7fe fd0f 	bl	8000558 <__aeabi_f2d>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001b3a:	442c      	add	r4, r5
				/ factoryTrim[i + 3]; // Report percent differences
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4630      	mov	r0, r6
 8001b42:	4639      	mov	r1, r7
 8001b44:	f7fe fe8a 	bl	800085c <__aeabi_ddiv>
 8001b48:	f7ff f856 	bl	8000bf8 <__aeabi_d2f>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001b4c:	6020      	str	r0, [r4, #0]
	for (int i = 0; i < 3; i++) {
 8001b4e:	f108 0801 	add.w	r8, r8, #1
 8001b52:	f1b8 0f02 	cmp.w	r8, #2
 8001b56:	ddab      	ble.n	8001ab0 <MPU9250SelfTest+0x408>
	}

}
 8001b58:	b013      	add	sp, #76	; 0x4c
 8001b5a:	ecbd 8b08 	vpop	{d8-d11}
 8001b5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b62:	bf00      	nop
 8001b64:	40590000 	.word	0x40590000

08001b68 <imu_calibrate>:
IMU_StatusTypeDef imu_calibrate() {
 8001b68:	b538      	push	{r3, r4, r5, lr}
	resetMPU9250();
 8001b6a:	f7ff fb65 	bl	8001238 <resetMPU9250>
	MPU9250SelfTest(SelfTest); // Start by performing self test and reporting values
 8001b6e:	4c53      	ldr	r4, [pc, #332]	; (8001cbc <imu_calibrate+0x154>)
 8001b70:	4620      	mov	r0, r4
 8001b72:	f7ff fd99 	bl	80016a8 <MPU9250SelfTest>
	printf(	"x-axis self test: acceleration trim within : %f of factory value\n\r", SelfTest[0]);
 8001b76:	6820      	ldr	r0, [r4, #0]
 8001b78:	f7fe fcee 	bl	8000558 <__aeabi_f2d>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	484f      	ldr	r0, [pc, #316]	; (8001cc0 <imu_calibrate+0x158>)
 8001b82:	f008 fdcf 	bl	800a724 <iprintf>
	printf(
 8001b86:	6860      	ldr	r0, [r4, #4]
 8001b88:	f7fe fce6 	bl	8000558 <__aeabi_f2d>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	484c      	ldr	r0, [pc, #304]	; (8001cc4 <imu_calibrate+0x15c>)
 8001b92:	f008 fdc7 	bl	800a724 <iprintf>
	printf(
 8001b96:	68a0      	ldr	r0, [r4, #8]
 8001b98:	f7fe fcde 	bl	8000558 <__aeabi_f2d>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4849      	ldr	r0, [pc, #292]	; (8001cc8 <imu_calibrate+0x160>)
 8001ba2:	f008 fdbf 	bl	800a724 <iprintf>
	printf("x-axis self test: gyration trim within : %f  of factory value\n\r",
 8001ba6:	68e0      	ldr	r0, [r4, #12]
 8001ba8:	f7fe fcd6 	bl	8000558 <__aeabi_f2d>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4846      	ldr	r0, [pc, #280]	; (8001ccc <imu_calibrate+0x164>)
 8001bb2:	f008 fdb7 	bl	800a724 <iprintf>
	printf("y-axis self test: gyration trim within : %f  of factory value\n\r",
 8001bb6:	6920      	ldr	r0, [r4, #16]
 8001bb8:	f7fe fcce 	bl	8000558 <__aeabi_f2d>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4843      	ldr	r0, [pc, #268]	; (8001cd0 <imu_calibrate+0x168>)
 8001bc2:	f008 fdaf 	bl	800a724 <iprintf>
	printf("z-axis self test: gyration trim within : %f  of factory value\n\r",
 8001bc6:	6960      	ldr	r0, [r4, #20]
 8001bc8:	f7fe fcc6 	bl	8000558 <__aeabi_f2d>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4840      	ldr	r0, [pc, #256]	; (8001cd4 <imu_calibrate+0x16c>)
 8001bd2:	f008 fda7 	bl	800a724 <iprintf>
	calibrateMPU9250(gyroBias, accelBias); // Calibrate gyro and accelerometers, load biases in bias registers
 8001bd6:	4c40      	ldr	r4, [pc, #256]	; (8001cd8 <imu_calibrate+0x170>)
 8001bd8:	4d40      	ldr	r5, [pc, #256]	; (8001cdc <imu_calibrate+0x174>)
 8001bda:	4621      	mov	r1, r4
 8001bdc:	4628      	mov	r0, r5
 8001bde:	f7ff fc09 	bl	80013f4 <calibrateMPU9250>
	printf("x gyro bias = %f\n\r", gyroBias[0]);
 8001be2:	6828      	ldr	r0, [r5, #0]
 8001be4:	f7fe fcb8 	bl	8000558 <__aeabi_f2d>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	483c      	ldr	r0, [pc, #240]	; (8001ce0 <imu_calibrate+0x178>)
 8001bee:	f008 fd99 	bl	800a724 <iprintf>
	printf("y gyro bias = %f\n\r", gyroBias[1]);
 8001bf2:	6868      	ldr	r0, [r5, #4]
 8001bf4:	f7fe fcb0 	bl	8000558 <__aeabi_f2d>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4839      	ldr	r0, [pc, #228]	; (8001ce4 <imu_calibrate+0x17c>)
 8001bfe:	f008 fd91 	bl	800a724 <iprintf>
	printf("z gyro bias = %f\n\r", gyroBias[2]);
 8001c02:	68a8      	ldr	r0, [r5, #8]
 8001c04:	f7fe fca8 	bl	8000558 <__aeabi_f2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4836      	ldr	r0, [pc, #216]	; (8001ce8 <imu_calibrate+0x180>)
 8001c0e:	f008 fd89 	bl	800a724 <iprintf>
	printf("x accel bias = %f\n\r", accelBias[0]);
 8001c12:	6820      	ldr	r0, [r4, #0]
 8001c14:	f7fe fca0 	bl	8000558 <__aeabi_f2d>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4833      	ldr	r0, [pc, #204]	; (8001cec <imu_calibrate+0x184>)
 8001c1e:	f008 fd81 	bl	800a724 <iprintf>
	printf("y accel bias = %f\n\r", accelBias[1]);
 8001c22:	6860      	ldr	r0, [r4, #4]
 8001c24:	f7fe fc98 	bl	8000558 <__aeabi_f2d>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4830      	ldr	r0, [pc, #192]	; (8001cf0 <imu_calibrate+0x188>)
 8001c2e:	f008 fd79 	bl	800a724 <iprintf>
	printf("z accel bias = %f\n\r", accelBias[2]);
 8001c32:	68a0      	ldr	r0, [r4, #8]
 8001c34:	f7fe fc90 	bl	8000558 <__aeabi_f2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	482d      	ldr	r0, [pc, #180]	; (8001cf4 <imu_calibrate+0x18c>)
 8001c3e:	f008 fd71 	bl	800a724 <iprintf>
	initMPU9250();
 8001c42:	f7ff fb67 	bl	8001314 <initMPU9250>
	initAK8963(magCalibration);
 8001c46:	482c      	ldr	r0, [pc, #176]	; (8001cf8 <imu_calibrate+0x190>)
 8001c48:	f7ff fb00 	bl	800124c <initAK8963>
	printf("Accelerometer full-scale range = %f  g\n\r", 2.0f*(float)(1<<Ascale));
 8001c4c:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <imu_calibrate+0x194>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2401      	movs	r4, #1
 8001c52:	fa04 f303 	lsl.w	r3, r4, r3
 8001c56:	ee07 3a90 	vmov	s15, r3
 8001c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c62:	ee17 0a90 	vmov	r0, s15
 8001c66:	f7fe fc77 	bl	8000558 <__aeabi_f2d>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4824      	ldr	r0, [pc, #144]	; (8001d00 <imu_calibrate+0x198>)
 8001c70:	f008 fd58 	bl	800a724 <iprintf>
	printf("Gyroscope full-scale range = %f  deg/s\n\r", 250.0f*(float)(1<<Gscale));
 8001c74:	4b23      	ldr	r3, [pc, #140]	; (8001d04 <imu_calibrate+0x19c>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	409c      	lsls	r4, r3
 8001c7a:	ee07 4a90 	vmov	s15, r4
 8001c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c82:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001d08 <imu_calibrate+0x1a0>
 8001c86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c8a:	ee17 0a90 	vmov	r0, s15
 8001c8e:	f7fe fc63 	bl	8000558 <__aeabi_f2d>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	481d      	ldr	r0, [pc, #116]	; (8001d0c <imu_calibrate+0x1a4>)
 8001c98:	f008 fd44 	bl	800a724 <iprintf>
	getAres(); // Get accelerometer sensitivity
 8001c9c:	f7ff fa38 	bl	8001110 <getAres>
	getGres(); // Get gyro sensitivity
 8001ca0:	f7ff fa12 	bl	80010c8 <getGres>
	getMres(); // Get magnetometer sensitivity
 8001ca4:	f7ff f9fa 	bl	800109c <getMres>
	magbias[0] = +470.; // User environmental x-axis correction in milliGauss, should be automatically calculated
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <imu_calibrate+0x1a8>)
 8001caa:	4a1a      	ldr	r2, [pc, #104]	; (8001d14 <imu_calibrate+0x1ac>)
 8001cac:	601a      	str	r2, [r3, #0]
	magbias[1] = +120.; // User environmental x-axis correction in milliGauss
 8001cae:	4a1a      	ldr	r2, [pc, #104]	; (8001d18 <imu_calibrate+0x1b0>)
 8001cb0:	605a      	str	r2, [r3, #4]
	magbias[2] = +125.; // User environmental x-axis correction in milliGauss
 8001cb2:	4a1a      	ldr	r2, [pc, #104]	; (8001d1c <imu_calibrate+0x1b4>)
 8001cb4:	609a      	str	r2, [r3, #8]
}
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	bd38      	pop	{r3, r4, r5, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000432c 	.word	0x2000432c
 8001cc0:	0800df44 	.word	0x0800df44
 8001cc4:	0800df88 	.word	0x0800df88
 8001cc8:	0800dfcc 	.word	0x0800dfcc
 8001ccc:	0800e010 	.word	0x0800e010
 8001cd0:	0800e050 	.word	0x0800e050
 8001cd4:	0800e090 	.word	0x0800e090
 8001cd8:	20000274 	.word	0x20000274
 8001cdc:	20000290 	.word	0x20000290
 8001ce0:	0800e0d0 	.word	0x0800e0d0
 8001ce4:	0800e0e4 	.word	0x0800e0e4
 8001ce8:	0800e0f8 	.word	0x0800e0f8
 8001cec:	0800e10c 	.word	0x0800e10c
 8001cf0:	0800e120 	.word	0x0800e120
 8001cf4:	0800e134 	.word	0x0800e134
 8001cf8:	200002a0 	.word	0x200002a0
 8001cfc:	2000026c 	.word	0x2000026c
 8001d00:	0800e148 	.word	0x0800e148
 8001d04:	2000026d 	.word	0x2000026d
 8001d08:	437a0000 	.word	0x437a0000
 8001d0c:	0800e174 	.word	0x0800e174
 8001d10:	200002ac 	.word	0x200002ac
 8001d14:	43eb0000 	.word	0x43eb0000
 8001d18:	42f00000 	.word	0x42f00000
 8001d1c:	42fa0000 	.word	0x42fa0000

08001d20 <MahonyQuaternionUpdate>:
}

// Similar to Madgwick scheme but uses proportional and integral filtering on the error between estimated reference vectors and
// measured ones.
void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy,
		float gz, float mx, float my, float mz) {
 8001d20:	b500      	push	{lr}
 8001d22:	ed2d 8b10 	vpush	{d8-d15}
 8001d26:	b08d      	sub	sp, #52	; 0x34
 8001d28:	eeb0 ba40 	vmov.f32	s22, s0
 8001d2c:	eef0 aa60 	vmov.f32	s21, s1
 8001d30:	eeb0 aa41 	vmov.f32	s20, s2
 8001d34:	edcd 1a04 	vstr	s3, [sp, #16]
 8001d38:	ed8d 2a05 	vstr	s4, [sp, #20]
 8001d3c:	edcd 2a06 	vstr	s5, [sp, #24]
 8001d40:	eef0 da43 	vmov.f32	s27, s6
 8001d44:	eeb0 da63 	vmov.f32	s26, s7
 8001d48:	eef0 ca44 	vmov.f32	s25, s8

	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 8001d4c:	4be4      	ldr	r3, [pc, #912]	; (80020e0 <MahonyQuaternionUpdate+0x3c0>)
 8001d4e:	edd3 9a00 	vldr	s19, [r3]
 8001d52:	ed93 9a01 	vldr	s18, [r3, #4]
 8001d56:	edd3 8a02 	vldr	s17, [r3, #8]
 8001d5a:	ed93 8a03 	vldr	s16, [r3, #12]
	float vx, vy, vz, wx, wy, wz;
	float ex, ey, ez;
	float pa, pb, pc;

	// Auxiliary variables to avoid repeated arithmetic
	float q1q1 = q1 * q1;
 8001d5e:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8001d62:	edcd 7a03 	vstr	s15, [sp, #12]
	float q1q2 = q1 * q2;
 8001d66:	ee69 7a89 	vmul.f32	s15, s19, s18
 8001d6a:	edcd 7a00 	vstr	s15, [sp]
	float q1q3 = q1 * q3;
 8001d6e:	ee29 faa8 	vmul.f32	s30, s19, s17
	float q1q4 = q1 * q4;
 8001d72:	ee69 ba88 	vmul.f32	s23, s19, s16
	float q2q2 = q2 * q2;
 8001d76:	ee69 7a09 	vmul.f32	s15, s18, s18
 8001d7a:	edcd 7a01 	vstr	s15, [sp, #4]
	float q2q3 = q2 * q3;
 8001d7e:	ee69 fa28 	vmul.f32	s31, s18, s17
	float q2q4 = q2 * q4;
 8001d82:	ee29 ca08 	vmul.f32	s24, s18, s16
	float q3q3 = q3 * q3;
 8001d86:	ee68 eaa8 	vmul.f32	s29, s17, s17
	float q3q4 = q3 * q4;
 8001d8a:	ee68 7a88 	vmul.f32	s15, s17, s16
 8001d8e:	edcd 7a02 	vstr	s15, [sp, #8]
	float q4q4 = q4 * q4;
 8001d92:	ee28 ea08 	vmul.f32	s28, s16, s16

	// Normalise accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001d96:	ee60 7a00 	vmul.f32	s15, s0, s0
 8001d9a:	ee20 7aa0 	vmul.f32	s14, s1, s1
 8001d9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001da2:	ee21 7a01 	vmul.f32	s14, s2, s2
 8001da6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001daa:	ee17 0a90 	vmov	r0, s15
 8001dae:	f7fe fbd3 	bl	8000558 <__aeabi_f2d>
 8001db2:	ec41 0b10 	vmov	d0, r0, r1
 8001db6:	f006 fa69 	bl	800828c <sqrt>
 8001dba:	ec51 0b10 	vmov	r0, r1, d0
 8001dbe:	f7fe ff1b 	bl	8000bf8 <__aeabi_d2f>
 8001dc2:	ee07 0a90 	vmov	s15, r0
	if (norm == 0.0f)
 8001dc6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dce:	d104      	bne.n	8001dda <MahonyQuaternionUpdate+0xba>
	q[0] = q1 * norm;
	q[1] = q2 * norm;
	q[2] = q3 * norm;
	q[3] = q4 * norm;

}
 8001dd0:	b00d      	add	sp, #52	; 0x34
 8001dd2:	ecbd 8b10 	vpop	{d8-d15}
 8001dd6:	f85d fb04 	ldr.w	pc, [sp], #4
	norm = 1.0f / norm;        // use reciprocal for division
 8001dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	ax *= norm;
 8001de2:	ee2b ba07 	vmul.f32	s22, s22, s14
	ay *= norm;
 8001de6:	ee6a aa87 	vmul.f32	s21, s21, s14
	az *= norm;
 8001dea:	ee2a aa07 	vmul.f32	s20, s20, s14
	norm = sqrt(mx * mx + my * my + mz * mz);
 8001dee:	ee6d 7aad 	vmul.f32	s15, s27, s27
 8001df2:	ee2d 7a0d 	vmul.f32	s14, s26, s26
 8001df6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dfa:	ee2c 7aac 	vmul.f32	s14, s25, s25
 8001dfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e02:	ee17 0a90 	vmov	r0, s15
 8001e06:	f7fe fba7 	bl	8000558 <__aeabi_f2d>
 8001e0a:	ec41 0b10 	vmov	d0, r0, r1
 8001e0e:	f006 fa3d 	bl	800828c <sqrt>
 8001e12:	ec51 0b10 	vmov	r0, r1, d0
 8001e16:	f7fe feef 	bl	8000bf8 <__aeabi_d2f>
 8001e1a:	ee07 0a90 	vmov	s15, r0
	if (norm == 0.0f)
 8001e1e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e26:	d0d3      	beq.n	8001dd0 <MahonyQuaternionUpdate+0xb0>
	norm = 1.0f / norm;        // use reciprocal for division
 8001e28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e2c:	ee87 7a27 	vdiv.f32	s14, s14, s15
	mx *= norm;
 8001e30:	ee6d da87 	vmul.f32	s27, s27, s14
	my *= norm;
 8001e34:	ee2d da07 	vmul.f32	s26, s26, s14
	mz *= norm;
 8001e38:	ee6c ca87 	vmul.f32	s25, s25, s14
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e3c:	ee7d 6aad 	vadd.f32	s13, s27, s27
 8001e40:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001e44:	ee76 7a6e 	vsub.f32	s15, s12, s29
 8001e48:	ee77 7ace 	vsub.f32	s15, s15, s28
 8001e4c:	edcd 7a08 	vstr	s15, [sp, #32]
 8001e50:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8001e54:	ee7d 5a0d 	vadd.f32	s11, s26, s26
 8001e58:	ee3f 5aeb 	vsub.f32	s10, s31, s23
 8001e5c:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 8001e60:	ee65 7a85 	vmul.f32	s15, s11, s10
 8001e64:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ 2.0f * mz * (q2q4 + q1q3);
 8001e68:	ee7c 4aac 	vadd.f32	s9, s25, s25
 8001e6c:	ee3f 4a0c 	vadd.f32	s8, s30, s24
 8001e70:	ed8d 4a0b 	vstr	s8, [sp, #44]	; 0x2c
 8001e74:	ee64 7a84 	vmul.f32	s15, s9, s8
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e78:	ee37 7a27 	vadd.f32	s14, s14, s15
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e7c:	ee7b 7aaf 	vadd.f32	s15, s23, s31
 8001e80:	edcd 6a07 	vstr	s13, [sp, #28]
 8001e84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e88:	eddd 3a01 	vldr	s7, [sp, #4]
 8001e8c:	ee76 fa63 	vsub.f32	s31, s12, s7
 8001e90:	ee7f bace 	vsub.f32	s23, s31, s28
 8001e94:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8001e98:	ee65 baab 	vmul.f32	s23, s11, s23
 8001e9c:	ee77 7aab 	vadd.f32	s15, s15, s23
			+ 2.0f * mz * (q3q4 - q1q2);
 8001ea0:	ed9d 3a02 	vldr	s6, [sp, #8]
 8001ea4:	eddd 2a00 	vldr	s5, [sp]
 8001ea8:	ee73 6a62 	vsub.f32	s13, s6, s5
 8001eac:	eef0 ba64 	vmov.f32	s23, s9
 8001eb0:	ee64 6aa6 	vmul.f32	s13, s9, s13
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001eb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
	bx = sqrt((hx * hx) + (hy * hy));
 8001eb8:	ee27 7a07 	vmul.f32	s14, s14, s14
 8001ebc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ec0:	ee37 2a27 	vadd.f32	s4, s14, s15
 8001ec4:	ee12 0a10 	vmov	r0, s4
 8001ec8:	f7fe fb46 	bl	8000558 <__aeabi_f2d>
 8001ecc:	ec41 0b10 	vmov	d0, r0, r1
 8001ed0:	f006 f9dc 	bl	800828c <sqrt>
 8001ed4:	ec51 0b10 	vmov	r0, r1, d0
 8001ed8:	f7fe fe8e 	bl	8000bf8 <__aeabi_d2f>
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001edc:	ee3c ca4f 	vsub.f32	s24, s24, s30
 8001ee0:	eddd 6a07 	vldr	s13, [sp, #28]
 8001ee4:	ee26 7a8c 	vmul.f32	s14, s13, s24
 8001ee8:	eddd 4a00 	vldr	s9, [sp]
 8001eec:	ed9d 3a02 	vldr	s6, [sp, #8]
 8001ef0:	ee34 5a83 	vadd.f32	s10, s9, s6
 8001ef4:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 8001ef8:	ee65 7a85 	vmul.f32	s15, s11, s10
 8001efc:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001f00:	ee7f 4aee 	vsub.f32	s9, s31, s29
 8001f04:	ee6b 7aa4 	vmul.f32	s15, s23, s9
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001f08:	ee37 7a27 	vadd.f32	s14, s14, s15
	vx = 2.0f * (q2q4 - q1q3);
 8001f0c:	ee7c 7a0c 	vadd.f32	s15, s24, s24
	vy = 2.0f * (q1q2 + q3q4);
 8001f10:	ee35 6a05 	vadd.f32	s12, s10, s10
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001f14:	eddd 5a03 	vldr	s11, [sp, #12]
 8001f18:	eddd 3a01 	vldr	s7, [sp, #4]
 8001f1c:	ee75 6ae3 	vsub.f32	s13, s11, s7
 8001f20:	ee76 eaee 	vsub.f32	s29, s13, s29
 8001f24:	ee3e ea8e 	vadd.f32	s28, s29, s28
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001f28:	ee05 0a90 	vmov	s11, r0
 8001f2c:	ee75 faa5 	vadd.f32	s31, s11, s11
 8001f30:	eddd 6a08 	vldr	s13, [sp, #32]
 8001f34:	ee26 faaf 	vmul.f32	s30, s13, s31
 8001f38:	ee37 7a07 	vadd.f32	s14, s14, s14
 8001f3c:	ee2c ca07 	vmul.f32	s24, s24, s14
 8001f40:	ee3f ca0c 	vadd.f32	s24, s30, s24
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001f44:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
 8001f48:	ee66 5aaf 	vmul.f32	s11, s13, s31
 8001f4c:	ee25 5a07 	vmul.f32	s10, s10, s14
 8001f50:	ee75 5a85 	vadd.f32	s11, s11, s10
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001f54:	ed9d 4a0b 	vldr	s8, [sp, #44]	; 0x2c
 8001f58:	ee64 fa2f 	vmul.f32	s31, s8, s31
 8001f5c:	ee24 7a87 	vmul.f32	s14, s9, s14
 8001f60:	ee7f fa87 	vadd.f32	s31, s31, s14
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001f64:	ee6a 6a8e 	vmul.f32	s13, s21, s28
 8001f68:	ee2a 7a06 	vmul.f32	s14, s20, s12
 8001f6c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8001f70:	ee2d 7a2f 	vmul.f32	s14, s26, s31
 8001f74:	ee2c 5aa5 	vmul.f32	s10, s25, s11
 8001f78:	ee37 7a45 	vsub.f32	s14, s14, s10
 8001f7c:	ee76 6a87 	vadd.f32	s13, s13, s14
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001f80:	ee2a aa27 	vmul.f32	s20, s20, s15
 8001f84:	ee2b 7a0e 	vmul.f32	s14, s22, s28
 8001f88:	ee3a 7a47 	vsub.f32	s14, s20, s14
 8001f8c:	ee6c ca8c 	vmul.f32	s25, s25, s24
 8001f90:	ee6d faaf 	vmul.f32	s31, s27, s31
 8001f94:	ee7c faef 	vsub.f32	s31, s25, s31
 8001f98:	ee37 7a2f 	vadd.f32	s14, s14, s31
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001f9c:	ee2b ba06 	vmul.f32	s22, s22, s12
 8001fa0:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8001fa4:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8001fa8:	ee6d daa5 	vmul.f32	s27, s27, s11
 8001fac:	ee2d da0c 	vmul.f32	s26, s26, s24
 8001fb0:	ee3d dacd 	vsub.f32	s26, s27, s26
 8001fb4:	ee77 7a8d 	vadd.f32	s15, s15, s26
		eInt[0] = 0.0f;     // prevent integral wind up
 8001fb8:	4b4a      	ldr	r3, [pc, #296]	; (80020e4 <MahonyQuaternionUpdate+0x3c4>)
 8001fba:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 80020e8 <MahonyQuaternionUpdate+0x3c8>
 8001fbe:	ed83 6a00 	vstr	s12, [r3]
		eInt[1] = 0.0f;
 8001fc2:	ed83 6a01 	vstr	s12, [r3, #4]
		eInt[2] = 0.0f;
 8001fc6:	ed83 6a02 	vstr	s12, [r3, #8]
	gx = gx + Kp * ex + Ki * eInt[0];
 8001fca:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 8001fce:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8001fd2:	eddd 4a04 	vldr	s9, [sp, #16]
 8001fd6:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8001fda:	ee76 6a86 	vadd.f32	s13, s13, s12
	gy = gy + Kp * ey + Ki * eInt[1];
 8001fde:	ee27 7a25 	vmul.f32	s14, s14, s11
 8001fe2:	eddd 4a05 	vldr	s9, [sp, #20]
 8001fe6:	ee37 7a24 	vadd.f32	s14, s14, s9
 8001fea:	ee37 7a06 	vadd.f32	s14, s14, s12
	gz = gz + Kp * ez + Ki * eInt[2];
 8001fee:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001ff2:	eddd 5a06 	vldr	s11, [sp, #24]
 8001ff6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001ffa:	ee77 7a86 	vadd.f32	s15, s15, s12
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001ffe:	ee69 5a66 	vnmul.f32	s11, s18, s13
 8002002:	ee28 6a87 	vmul.f32	s12, s17, s14
 8002006:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800200a:	ee28 6a27 	vmul.f32	s12, s16, s15
 800200e:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8002012:	4b36      	ldr	r3, [pc, #216]	; (80020ec <MahonyQuaternionUpdate+0x3cc>)
 8002014:	ed93 6a00 	vldr	s12, [r3]
 8002018:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 800201c:	ee26 6a05 	vmul.f32	s12, s12, s10
 8002020:	ee65 5a86 	vmul.f32	s11, s11, s12
 8002024:	ee79 9aa5 	vadd.f32	s19, s19, s11
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8002028:	ee66 aaa9 	vmul.f32	s21, s13, s19
 800202c:	ee68 5aa7 	vmul.f32	s11, s17, s15
 8002030:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8002034:	ee68 5a07 	vmul.f32	s11, s16, s14
 8002038:	ee7a aae5 	vsub.f32	s21, s21, s11
 800203c:	ee66 aa2a 	vmul.f32	s21, s12, s21
 8002040:	ee79 aa2a 	vadd.f32	s21, s18, s21
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8002044:	ee27 aa29 	vmul.f32	s20, s14, s19
 8002048:	ee69 5a27 	vmul.f32	s11, s18, s15
 800204c:	ee3a aa65 	vsub.f32	s20, s20, s11
 8002050:	ee68 5a26 	vmul.f32	s11, s16, s13
 8002054:	ee3a aa25 	vadd.f32	s20, s20, s11
 8002058:	ee26 aa0a 	vmul.f32	s20, s12, s20
 800205c:	ee38 aa8a 	vadd.f32	s20, s17, s20
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8002060:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8002064:	ee29 9a07 	vmul.f32	s18, s18, s14
 8002068:	ee37 9a89 	vadd.f32	s18, s15, s18
 800206c:	ee68 8aa6 	vmul.f32	s17, s17, s13
 8002070:	ee79 8a68 	vsub.f32	s17, s18, s17
 8002074:	ee66 8a28 	vmul.f32	s17, s12, s17
 8002078:	ee38 8a28 	vadd.f32	s16, s16, s17
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 800207c:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8002080:	ee2a 7aaa 	vmul.f32	s14, s21, s21
 8002084:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002088:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 800208c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002090:	ee28 7a08 	vmul.f32	s14, s16, s16
 8002094:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002098:	ee17 0a90 	vmov	r0, s15
 800209c:	f7fe fa5c 	bl	8000558 <__aeabi_f2d>
 80020a0:	ec41 0b10 	vmov	d0, r0, r1
 80020a4:	f006 f8f2 	bl	800828c <sqrt>
 80020a8:	ec51 0b10 	vmov	r0, r1, d0
 80020ac:	f7fe fda4 	bl	8000bf8 <__aeabi_d2f>
	norm = 1.0f / norm;
 80020b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80020b4:	ee07 0a90 	vmov	s15, r0
 80020b8:	eec7 7a27 	vdiv.f32	s15, s14, s15
	q[0] = q1 * norm;
 80020bc:	ee69 9aa7 	vmul.f32	s19, s19, s15
 80020c0:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <MahonyQuaternionUpdate+0x3c0>)
 80020c2:	edc3 9a00 	vstr	s19, [r3]
	q[1] = q2 * norm;
 80020c6:	ee6a aaa7 	vmul.f32	s21, s21, s15
 80020ca:	edc3 aa01 	vstr	s21, [r3, #4]
	q[2] = q3 * norm;
 80020ce:	ee2a aa27 	vmul.f32	s20, s20, s15
 80020d2:	ed83 aa02 	vstr	s20, [r3, #8]
	q[3] = q4 * norm;
 80020d6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80020da:	ed83 8a03 	vstr	s16, [r3, #12]
 80020de:	e677      	b.n	8001dd0 <MahonyQuaternionUpdate+0xb0>
 80020e0:	20000004 	.word	0x20000004
 80020e4:	20000284 	.word	0x20000284
 80020e8:	00000000 	.word	0x00000000
 80020ec:	20000280 	.word	0x20000280

080020f0 <calc_RollPitchYaw>:
void calc_RollPitchYaw(int counter_value, float *imu_roll, float *imu_pitch, float *imu_yaw) {
 80020f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020f4:	ed2d 8b04 	vpush	{d8-d9}
 80020f8:	b083      	sub	sp, #12
 80020fa:	ee08 0a10 	vmov	s16, r0
 80020fe:	460f      	mov	r7, r1
 8002100:	4691      	mov	r9, r2
 8002102:	4698      	mov	r8, r3
	if (readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, INT_STATUS) & 0x01) { // On interrupt, check if data ready interrupt
 8002104:	223a      	movs	r2, #58	; 0x3a
 8002106:	21d1      	movs	r1, #209	; 0xd1
 8002108:	20d0      	movs	r0, #208	; 0xd0
 800210a:	f7fe ff59 	bl	8000fc0 <readByte>
 800210e:	f010 0f01 	tst.w	r0, #1
 8002112:	f040 8155 	bne.w	80023c0 <calc_RollPitchYaw+0x2d0>
	Now = counter_value;
 8002116:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 800211a:	4b93      	ldr	r3, [pc, #588]	; (8002368 <calc_RollPitchYaw+0x278>)
 800211c:	edc3 7a00 	vstr	s15, [r3]
	if(Now - lastUpdate < 0){
 8002120:	4b92      	ldr	r3, [pc, #584]	; (800236c <calc_RollPitchYaw+0x27c>)
 8002122:	edd3 6a00 	vldr	s13, [r3]
 8002126:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800212a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800212e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002132:	f100 81f2 	bmi.w	800251a <calc_RollPitchYaw+0x42a>
	deltat = (float) ((Now - lastUpdate) * (1 / (TIMER_CLK_FREQ / 99.0f))); // set integration time by time elapsed since last filter update
 8002136:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8002370 <calc_RollPitchYaw+0x280>
 800213a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800213e:	4b8d      	ldr	r3, [pc, #564]	; (8002374 <calc_RollPitchYaw+0x284>)
 8002140:	ed83 7a00 	vstr	s14, [r3]
	lastUpdate = Now;
 8002144:	4b89      	ldr	r3, [pc, #548]	; (800236c <calc_RollPitchYaw+0x27c>)
 8002146:	edc3 7a00 	vstr	s15, [r3]
	sum += deltat;
 800214a:	4e8b      	ldr	r6, [pc, #556]	; (8002378 <calc_RollPitchYaw+0x288>)
 800214c:	edd6 7a00 	vldr	s15, [r6]
 8002150:	4b88      	ldr	r3, [pc, #544]	; (8002374 <calc_RollPitchYaw+0x284>)
 8002152:	ed93 7a00 	vldr	s14, [r3]
 8002156:	ee77 7a87 	vadd.f32	s15, s15, s14
 800215a:	edc6 7a00 	vstr	s15, [r6]
	sumCount++;
 800215e:	4d87      	ldr	r5, [pc, #540]	; (800237c <calc_RollPitchYaw+0x28c>)
 8002160:	682b      	ldr	r3, [r5, #0]
 8002162:	3301      	adds	r3, #1
 8002164:	602b      	str	r3, [r5, #0]
	MahonyQuaternionUpdate(ax, ay, az, gx * PI / 180.0, gy * PI / 180.0, gz * PI / 180.0, my, mx, mz);
 8002166:	4b86      	ldr	r3, [pc, #536]	; (8002380 <calc_RollPitchYaw+0x290>)
 8002168:	edd3 1a00 	vldr	s3, [r3]
 800216c:	eddf 7a85 	vldr	s15, [pc, #532]	; 8002384 <calc_RollPitchYaw+0x294>
 8002170:	ee61 1aa7 	vmul.f32	s3, s3, s15
 8002174:	4b84      	ldr	r3, [pc, #528]	; (8002388 <calc_RollPitchYaw+0x298>)
 8002176:	ed93 2a00 	vldr	s4, [r3]
 800217a:	ee22 2a27 	vmul.f32	s4, s4, s15
 800217e:	4b83      	ldr	r3, [pc, #524]	; (800238c <calc_RollPitchYaw+0x29c>)
 8002180:	edd3 2a00 	vldr	s5, [r3]
 8002184:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8002188:	eddf 7a81 	vldr	s15, [pc, #516]	; 8002390 <calc_RollPitchYaw+0x2a0>
 800218c:	4b81      	ldr	r3, [pc, #516]	; (8002394 <calc_RollPitchYaw+0x2a4>)
 800218e:	ed93 4a00 	vldr	s8, [r3]
 8002192:	4b81      	ldr	r3, [pc, #516]	; (8002398 <calc_RollPitchYaw+0x2a8>)
 8002194:	edd3 3a00 	vldr	s7, [r3]
 8002198:	4b80      	ldr	r3, [pc, #512]	; (800239c <calc_RollPitchYaw+0x2ac>)
 800219a:	ed93 3a00 	vldr	s6, [r3]
 800219e:	eec2 2aa7 	vdiv.f32	s5, s5, s15
 80021a2:	ee82 2a27 	vdiv.f32	s4, s4, s15
 80021a6:	eec1 1aa7 	vdiv.f32	s3, s3, s15
 80021aa:	4b7d      	ldr	r3, [pc, #500]	; (80023a0 <calc_RollPitchYaw+0x2b0>)
 80021ac:	ed93 1a00 	vldr	s2, [r3]
 80021b0:	4b7c      	ldr	r3, [pc, #496]	; (80023a4 <calc_RollPitchYaw+0x2b4>)
 80021b2:	edd3 0a00 	vldr	s1, [r3]
 80021b6:	4b7c      	ldr	r3, [pc, #496]	; (80023a8 <calc_RollPitchYaw+0x2b8>)
 80021b8:	ed93 0a00 	vldr	s0, [r3]
 80021bc:	f7ff fdb0 	bl	8001d20 <MahonyQuaternionUpdate>
	yaw = atan2(2.0 * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 80021c0:	4c7a      	ldr	r4, [pc, #488]	; (80023ac <calc_RollPitchYaw+0x2bc>)
 80021c2:	edd4 9a01 	vldr	s19, [r4, #4]
 80021c6:	ed94 9a02 	vldr	s18, [r4, #8]
 80021ca:	ee29 7a89 	vmul.f32	s14, s19, s18
 80021ce:	ed94 8a00 	vldr	s16, [r4]
 80021d2:	edd4 8a03 	vldr	s17, [r4, #12]
 80021d6:	ee68 7a28 	vmul.f32	s15, s16, s17
 80021da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021de:	ee17 0a90 	vmov	r0, s15
 80021e2:	f7fe f9b9 	bl	8000558 <__aeabi_f2d>
 80021e6:	4682      	mov	sl, r0
 80021e8:	468b      	mov	fp, r1
 80021ea:	ee28 8a08 	vmul.f32	s16, s16, s16
 80021ee:	ee69 9aa9 	vmul.f32	s19, s19, s19
 80021f2:	ee38 8a29 	vadd.f32	s16, s16, s19
 80021f6:	ee29 9a09 	vmul.f32	s18, s18, s18
 80021fa:	ee38 8a49 	vsub.f32	s16, s16, s18
 80021fe:	ee68 8aa8 	vmul.f32	s17, s17, s17
 8002202:	ee78 7a68 	vsub.f32	s15, s16, s17
 8002206:	ee17 0a90 	vmov	r0, s15
 800220a:	f7fe f9a5 	bl	8000558 <__aeabi_f2d>
 800220e:	ec41 0b18 	vmov	d8, r0, r1
 8002212:	4652      	mov	r2, sl
 8002214:	465b      	mov	r3, fp
 8002216:	4650      	mov	r0, sl
 8002218:	4659      	mov	r1, fp
 800221a:	f7fe f83f 	bl	800029c <__adddf3>
 800221e:	eeb0 1a48 	vmov.f32	s2, s16
 8002222:	eef0 1a68 	vmov.f32	s3, s17
 8002226:	ec41 0b10 	vmov	d0, r0, r1
 800222a:	f005 febd 	bl	8007fa8 <atan2>
 800222e:	ec51 0b10 	vmov	r0, r1, d0
 8002232:	f7fe fce1 	bl	8000bf8 <__aeabi_d2f>
 8002236:	f8df a180 	ldr.w	sl, [pc, #384]	; 80023b8 <calc_RollPitchYaw+0x2c8>
 800223a:	f8ca 0000 	str.w	r0, [sl]
	pitch = -asin(2.0 * (q[1] * q[3] - q[0] * q[2]));
 800223e:	ed94 7a01 	vldr	s14, [r4, #4]
 8002242:	edd4 7a03 	vldr	s15, [r4, #12]
 8002246:	ee27 7a27 	vmul.f32	s14, s14, s15
 800224a:	edd4 7a00 	vldr	s15, [r4]
 800224e:	edd4 6a02 	vldr	s13, [r4, #8]
 8002252:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002256:	ee77 7a67 	vsub.f32	s15, s14, s15
 800225a:	ee17 0a90 	vmov	r0, s15
 800225e:	f7fe f97b 	bl	8000558 <__aeabi_f2d>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	f7fe f819 	bl	800029c <__adddf3>
 800226a:	ec41 0b10 	vmov	d0, r0, r1
 800226e:	f005 fe43 	bl	8007ef8 <asin>
 8002272:	ec51 0b10 	vmov	r0, r1, d0
 8002276:	f7fe fcbf 	bl	8000bf8 <__aeabi_d2f>
 800227a:	f8df b140 	ldr.w	fp, [pc, #320]	; 80023bc <calc_RollPitchYaw+0x2cc>
 800227e:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8002282:	f8cb 0000 	str.w	r0, [fp]
	roll = atan2(2.0 * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 8002286:	ed94 8a00 	vldr	s16, [r4]
 800228a:	edd4 9a01 	vldr	s19, [r4, #4]
 800228e:	ee28 7a29 	vmul.f32	s14, s16, s19
 8002292:	ed94 9a02 	vldr	s18, [r4, #8]
 8002296:	edd4 8a03 	vldr	s17, [r4, #12]
 800229a:	ee69 7a28 	vmul.f32	s15, s18, s17
 800229e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a2:	ee17 0a90 	vmov	r0, s15
 80022a6:	f7fe f957 	bl	8000558 <__aeabi_f2d>
 80022aa:	e9cd 0100 	strd	r0, r1, [sp]
 80022ae:	ee28 8a08 	vmul.f32	s16, s16, s16
 80022b2:	ee69 9aa9 	vmul.f32	s19, s19, s19
 80022b6:	ee38 8a69 	vsub.f32	s16, s16, s19
 80022ba:	ee29 9a09 	vmul.f32	s18, s18, s18
 80022be:	ee38 8a49 	vsub.f32	s16, s16, s18
 80022c2:	ee68 8aa8 	vmul.f32	s17, s17, s17
 80022c6:	ee78 7a28 	vadd.f32	s15, s16, s17
 80022ca:	ee17 0a90 	vmov	r0, s15
 80022ce:	f7fe f943 	bl	8000558 <__aeabi_f2d>
 80022d2:	ec41 0b18 	vmov	d8, r0, r1
 80022d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	f7fd ffdd 	bl	800029c <__adddf3>
 80022e2:	eeb0 1a48 	vmov.f32	s2, s16
 80022e6:	eef0 1a68 	vmov.f32	s3, s17
 80022ea:	ec41 0b10 	vmov	d0, r0, r1
 80022ee:	f005 fe5b 	bl	8007fa8 <atan2>
 80022f2:	ec51 0b10 	vmov	r0, r1, d0
 80022f6:	f7fe fc7f 	bl	8000bf8 <__aeabi_d2f>
 80022fa:	ee08 0a10 	vmov	s16, r0
	pitch *= 180.0f / PI;
 80022fe:	eddb 7a00 	vldr	s15, [fp]
 8002302:	eddf 8a2b 	vldr	s17, [pc, #172]	; 80023b0 <calc_RollPitchYaw+0x2c0>
 8002306:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800230a:	edcb 7a00 	vstr	s15, [fp]
	yaw *= 180.0f / PI;
 800230e:	edda 7a00 	vldr	s15, [sl]
	yaw -=  -1.1; // CHANGE-> (In Leeds, UK declination = -1.1) ... Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04 (+13.8)
 8002312:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8002316:	ee17 0a90 	vmov	r0, s15
 800231a:	f7fe f91d 	bl	8000558 <__aeabi_f2d>
 800231e:	a310      	add	r3, pc, #64	; (adr r3, 8002360 <calc_RollPitchYaw+0x270>)
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	f7fd ffba 	bl	800029c <__adddf3>
 8002328:	f7fe fc66 	bl	8000bf8 <__aeabi_d2f>
 800232c:	f8ca 0000 	str.w	r0, [sl]
	roll *= 180.0f / PI;
 8002330:	ee68 7a28 	vmul.f32	s15, s16, s17
 8002334:	4b1f      	ldr	r3, [pc, #124]	; (80023b4 <calc_RollPitchYaw+0x2c4>)
 8002336:	edc3 7a00 	vstr	s15, [r3]
	sum = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	6033      	str	r3, [r6, #0]
	sumCount = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	602b      	str	r3, [r5, #0]
	*imu_roll = roll;
 8002342:	edc7 7a00 	vstr	s15, [r7]
	*imu_pitch = pitch;
 8002346:	f8db 3000 	ldr.w	r3, [fp]
 800234a:	f8c9 3000 	str.w	r3, [r9]
	*imu_yaw = yaw;
 800234e:	f8da 3000 	ldr.w	r3, [sl]
 8002352:	f8c8 3000 	str.w	r3, [r8]
}
 8002356:	b003      	add	sp, #12
 8002358:	ecbd 8b04 	vpop	{d8-d9}
 800235c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002360:	9999999a 	.word	0x9999999a
 8002364:	3ff19999 	.word	0x3ff19999
 8002368:	20000270 	.word	0x20000270
 800236c:	2000029c 	.word	0x2000029c
 8002370:	3584e024 	.word	0x3584e024
 8002374:	20000280 	.word	0x20000280
 8002378:	200002b8 	.word	0x200002b8
 800237c:	200002bc 	.word	0x200002bc
 8002380:	200043e0 	.word	0x200043e0
 8002384:	40490fdb 	.word	0x40490fdb
 8002388:	20004398 	.word	0x20004398
 800238c:	200043bc 	.word	0x200043bc
 8002390:	43340000 	.word	0x43340000
 8002394:	200043c4 	.word	0x200043c4
 8002398:	200043e8 	.word	0x200043e8
 800239c:	200043ac 	.word	0x200043ac
 80023a0:	2000439c 	.word	0x2000439c
 80023a4:	200043e4 	.word	0x200043e4
 80023a8:	200043b0 	.word	0x200043b0
 80023ac:	20000004 	.word	0x20000004
 80023b0:	42652ee0 	.word	0x42652ee0
 80023b4:	200043d8 	.word	0x200043d8
 80023b8:	200043c8 	.word	0x200043c8
 80023bc:	200043d4 	.word	0x200043d4
		readAccelData(accelCount);  // Read the x/y/z adc values
 80023c0:	4c5d      	ldr	r4, [pc, #372]	; (8002538 <calc_RollPitchYaw+0x448>)
 80023c2:	4620      	mov	r0, r4
 80023c4:	f7fe fec4 	bl	8001150 <readAccelData>
		ax = (float) accelCount[0] * aRes - accelBias[0]; // get actual g value, this depends on scale being set
 80023c8:	f9b4 3000 	ldrsh.w	r3, [r4]
 80023cc:	ee07 3a10 	vmov	s14, r3
 80023d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80023d4:	4b59      	ldr	r3, [pc, #356]	; (800253c <calc_RollPitchYaw+0x44c>)
 80023d6:	edd3 7a00 	vldr	s15, [r3]
 80023da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023de:	4b58      	ldr	r3, [pc, #352]	; (8002540 <calc_RollPitchYaw+0x450>)
 80023e0:	edd3 6a00 	vldr	s13, [r3]
 80023e4:	ee37 7a66 	vsub.f32	s14, s14, s13
 80023e8:	4a56      	ldr	r2, [pc, #344]	; (8002544 <calc_RollPitchYaw+0x454>)
 80023ea:	ed82 7a00 	vstr	s14, [r2]
		ay = (float) accelCount[1] * aRes - accelBias[1];
 80023ee:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80023f2:	ee07 2a10 	vmov	s14, r2
 80023f6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80023fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023fe:	edd3 6a01 	vldr	s13, [r3, #4]
 8002402:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002406:	4a50      	ldr	r2, [pc, #320]	; (8002548 <calc_RollPitchYaw+0x458>)
 8002408:	ed82 7a00 	vstr	s14, [r2]
		az = (float) accelCount[2] * aRes - accelBias[2];
 800240c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8002410:	ee07 2a10 	vmov	s14, r2
 8002414:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002418:	ee67 7a87 	vmul.f32	s15, s15, s14
 800241c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002420:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002424:	4b49      	ldr	r3, [pc, #292]	; (800254c <calc_RollPitchYaw+0x45c>)
 8002426:	edc3 7a00 	vstr	s15, [r3]
		readGyroData(gyroCount);  // Read the x/y/z adc values
 800242a:	4c49      	ldr	r4, [pc, #292]	; (8002550 <calc_RollPitchYaw+0x460>)
 800242c:	4620      	mov	r0, r4
 800242e:	f7fe feb1 	bl	8001194 <readGyroData>
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 8002432:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002436:	ee07 3a10 	vmov	s14, r3
 800243a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800243e:	4b45      	ldr	r3, [pc, #276]	; (8002554 <calc_RollPitchYaw+0x464>)
 8002440:	edd3 7a00 	vldr	s15, [r3]
 8002444:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002448:	4b43      	ldr	r3, [pc, #268]	; (8002558 <calc_RollPitchYaw+0x468>)
 800244a:	edd3 6a00 	vldr	s13, [r3]
 800244e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002452:	4a42      	ldr	r2, [pc, #264]	; (800255c <calc_RollPitchYaw+0x46c>)
 8002454:	ed82 7a00 	vstr	s14, [r2]
		gy = (float) gyroCount[1] * gRes - gyroBias[1];
 8002458:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800245c:	ee07 2a10 	vmov	s14, r2
 8002460:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002464:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002468:	edd3 6a01 	vldr	s13, [r3, #4]
 800246c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002470:	4a3b      	ldr	r2, [pc, #236]	; (8002560 <calc_RollPitchYaw+0x470>)
 8002472:	ed82 7a00 	vstr	s14, [r2]
		gz = (float) gyroCount[2] * gRes - gyroBias[2];
 8002476:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800247a:	ee07 2a10 	vmov	s14, r2
 800247e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002486:	ed93 7a02 	vldr	s14, [r3, #8]
 800248a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800248e:	4b35      	ldr	r3, [pc, #212]	; (8002564 <calc_RollPitchYaw+0x474>)
 8002490:	edc3 7a00 	vstr	s15, [r3]
		readMagData(magCount);  // Read the x/y/z adc values
 8002494:	4c34      	ldr	r4, [pc, #208]	; (8002568 <calc_RollPitchYaw+0x478>)
 8002496:	4620      	mov	r0, r4
 8002498:	f7fe fe9e 	bl	80011d8 <readMagData>
		mx = (float) magCount[0] * mRes * magCalibration[0] - magbias[0]; // get actual magnetometer value, this depends on scale being set
 800249c:	f9b4 3000 	ldrsh.w	r3, [r4]
 80024a0:	ee07 3a10 	vmov	s14, r3
 80024a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024a8:	4b30      	ldr	r3, [pc, #192]	; (800256c <calc_RollPitchYaw+0x47c>)
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024b2:	4a2f      	ldr	r2, [pc, #188]	; (8002570 <calc_RollPitchYaw+0x480>)
 80024b4:	edd2 6a00 	vldr	s13, [r2]
 80024b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80024bc:	4b2d      	ldr	r3, [pc, #180]	; (8002574 <calc_RollPitchYaw+0x484>)
 80024be:	edd3 6a00 	vldr	s13, [r3]
 80024c2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80024c6:	492c      	ldr	r1, [pc, #176]	; (8002578 <calc_RollPitchYaw+0x488>)
 80024c8:	ed81 7a00 	vstr	s14, [r1]
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 80024cc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80024d0:	ee07 1a10 	vmov	s14, r1
 80024d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024dc:	edd2 6a01 	vldr	s13, [r2, #4]
 80024e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80024e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80024e8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80024ec:	4923      	ldr	r1, [pc, #140]	; (800257c <calc_RollPitchYaw+0x48c>)
 80024ee:	ed81 7a00 	vstr	s14, [r1]
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 80024f2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80024f6:	ee07 1a10 	vmov	s14, r1
 80024fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002502:	ed92 7a02 	vldr	s14, [r2, #8]
 8002506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800250a:	ed93 7a02 	vldr	s14, [r3, #8]
 800250e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002512:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <calc_RollPitchYaw+0x490>)
 8002514:	edc3 7a00 	vstr	s15, [r3]
 8002518:	e5fd      	b.n	8002116 <calc_RollPitchYaw+0x26>
		deltat = (float) (((65534-lastUpdate)+Now) * (1 / (TIMER_CLK_FREQ / 99.0f)));
 800251a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002584 <calc_RollPitchYaw+0x494>
 800251e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002522:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002526:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002588 <calc_RollPitchYaw+0x498>
 800252a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800252e:	4b17      	ldr	r3, [pc, #92]	; (800258c <calc_RollPitchYaw+0x49c>)
 8002530:	ed83 7a00 	vstr	s14, [r3]
 8002534:	e606      	b.n	8002144 <calc_RollPitchYaw+0x54>
 8002536:	bf00      	nop
 8002538:	20004324 	.word	0x20004324
 800253c:	200043b4 	.word	0x200043b4
 8002540:	20000274 	.word	0x20000274
 8002544:	200043b0 	.word	0x200043b0
 8002548:	200043e4 	.word	0x200043e4
 800254c:	2000439c 	.word	0x2000439c
 8002550:	200043a4 	.word	0x200043a4
 8002554:	200043c0 	.word	0x200043c0
 8002558:	20000290 	.word	0x20000290
 800255c:	200043e0 	.word	0x200043e0
 8002560:	20004398 	.word	0x20004398
 8002564:	200043bc 	.word	0x200043bc
 8002568:	200043cc 	.word	0x200043cc
 800256c:	200043dc 	.word	0x200043dc
 8002570:	200002a0 	.word	0x200002a0
 8002574:	200002ac 	.word	0x200002ac
 8002578:	200043e8 	.word	0x200043e8
 800257c:	200043ac 	.word	0x200043ac
 8002580:	200043c4 	.word	0x200043c4
 8002584:	477ffe00 	.word	0x477ffe00
 8002588:	3584e024 	.word	0x3584e024
 800258c:	20000280 	.word	0x20000280

08002590 <NRF24_DelayMicroSeconds>:
bool SPI_RxCplt = 0;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8002590:	b508      	push	{r3, lr}
	//	uint32_t uSecVar = uSec;
	//	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
	//	while(uSecVar--);
	DWT_Delay(uSec);
 8002592:	f001 f815 	bl	80035c0 <DWT_Delay>

}
 8002596:	bd08      	pop	{r3, pc}

08002598 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8002598:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800259a:	b938      	cbnz	r0, 80025ac <NRF24_csn+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 800259c:	2200      	movs	r2, #0
 800259e:	4b07      	ldr	r3, [pc, #28]	; (80025bc <NRF24_csn+0x24>)
 80025a0:	8819      	ldrh	r1, [r3, #0]
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <NRF24_csn+0x28>)
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	f001 fb43 	bl	8003c30 <HAL_GPIO_WritePin>
}
 80025aa:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80025ac:	2201      	movs	r2, #1
 80025ae:	4b03      	ldr	r3, [pc, #12]	; (80025bc <NRF24_csn+0x24>)
 80025b0:	8819      	ldrh	r1, [r3, #0]
 80025b2:	4b03      	ldr	r3, [pc, #12]	; (80025c0 <NRF24_csn+0x28>)
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	f001 fb3b 	bl	8003c30 <HAL_GPIO_WritePin>
 80025ba:	e7f6      	b.n	80025aa <NRF24_csn+0x12>
 80025bc:	200002c4 	.word	0x200002c4
 80025c0:	200002c8 	.word	0x200002c8

080025c4 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80025c4:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80025c6:	b938      	cbnz	r0, 80025d8 <NRF24_ce+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80025c8:	2200      	movs	r2, #0
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <NRF24_ce+0x24>)
 80025cc:	8819      	ldrh	r1, [r3, #0]
 80025ce:	4b07      	ldr	r3, [pc, #28]	; (80025ec <NRF24_ce+0x28>)
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	f001 fb2d 	bl	8003c30 <HAL_GPIO_WritePin>
}
 80025d6:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80025d8:	2201      	movs	r2, #1
 80025da:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <NRF24_ce+0x24>)
 80025dc:	8819      	ldrh	r1, [r3, #0]
 80025de:	4b03      	ldr	r3, [pc, #12]	; (80025ec <NRF24_ce+0x28>)
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	f001 fb25 	bl	8003c30 <HAL_GPIO_WritePin>
 80025e6:	e7f6      	b.n	80025d6 <NRF24_ce+0x12>
 80025e8:	200002c2 	.word	0x200002c2
 80025ec:	200002c8 	.word	0x200002c8

080025f0 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80025f0:	b510      	push	{r4, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80025f6:	2000      	movs	r0, #0
 80025f8:	f7ff ffce 	bl	8002598 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80025fc:	f004 041f 	and.w	r4, r4, #31
 8002600:	a902      	add	r1, sp, #8
 8002602:	f801 4d04 	strb.w	r4, [r1, #-4]!
	SPI_TxCplt = 0;
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <NRF24_read_register+0x58>)
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, spiBuf, 1);
 800260c:	2201      	movs	r2, #1
 800260e:	480f      	ldr	r0, [pc, #60]	; (800264c <NRF24_read_register+0x5c>)
 8002610:	f002 fd04 	bl	800501c <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <NRF24_read_register+0x58>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0fb      	beq.n	8002614 <NRF24_read_register+0x24>
	}
	//Receive data
	SPI_RxCplt = 0;
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <NRF24_read_register+0x60>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive_IT(&hspi2, &spiBuf[1], 1);
 8002622:	2201      	movs	r2, #1
 8002624:	f10d 0105 	add.w	r1, sp, #5
 8002628:	4808      	ldr	r0, [pc, #32]	; (800264c <NRF24_read_register+0x5c>)
 800262a:	f002 fdab 	bl	8005184 <HAL_SPI_Receive_IT>
	while(!SPI_RxCplt){
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <NRF24_read_register+0x60>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0fb      	beq.n	800262e <NRF24_read_register+0x3e>
	}
	retData = spiBuf[1];
 8002636:	f89d 4005 	ldrb.w	r4, [sp, #5]
	//Bring CSN high
	NRF24_csn(1);
 800263a:	2001      	movs	r0, #1
 800263c:	f7ff ffac 	bl	8002598 <NRF24_csn>
	return retData;
}
 8002640:	4620      	mov	r0, r4
 8002642:	b002      	add	sp, #8
 8002644:	bd10      	pop	{r4, pc}
 8002646:	bf00      	nop
 8002648:	200002c1 	.word	0x200002c1
 800264c:	200043ec 	.word	0x200043ec
 8002650:	200002c0 	.word	0x200002c0

08002654 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8002654:	b570      	push	{r4, r5, r6, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	4604      	mov	r4, r0
 800265a:	460d      	mov	r5, r1
 800265c:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800265e:	2000      	movs	r0, #0
 8002660:	f7ff ff9a 	bl	8002598 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8002664:	f004 041f 	and.w	r4, r4, #31
 8002668:	a902      	add	r1, sp, #8
 800266a:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	SPI_TxCplt = 0;
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <NRF24_read_registerN+0x54>)
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, spiBuf, 1);
 8002674:	2201      	movs	r2, #1
 8002676:	480d      	ldr	r0, [pc, #52]	; (80026ac <NRF24_read_registerN+0x58>)
 8002678:	f002 fcd0 	bl	800501c <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <NRF24_read_registerN+0x54>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0fb      	beq.n	800267c <NRF24_read_registerN+0x28>
	}
	//Receive data
	SPI_RxCplt = 0;
 8002684:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <NRF24_read_registerN+0x5c>)
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive_IT(&hspi2, buf, len);
 800268a:	4632      	mov	r2, r6
 800268c:	4629      	mov	r1, r5
 800268e:	4807      	ldr	r0, [pc, #28]	; (80026ac <NRF24_read_registerN+0x58>)
 8002690:	f002 fd78 	bl	8005184 <HAL_SPI_Receive_IT>
	while(!SPI_RxCplt){
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <NRF24_read_registerN+0x5c>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0fb      	beq.n	8002694 <NRF24_read_registerN+0x40>
	}
	//Bring CSN high
	NRF24_csn(1);
 800269c:	2001      	movs	r0, #1
 800269e:	f7ff ff7b 	bl	8002598 <NRF24_csn>
}
 80026a2:	b002      	add	sp, #8
 80026a4:	bd70      	pop	{r4, r5, r6, pc}
 80026a6:	bf00      	nop
 80026a8:	200002c1 	.word	0x200002c1
 80026ac:	200043ec 	.word	0x200043ec
 80026b0:	200002c0 	.word	0x200002c0

080026b4 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80026b4:	b530      	push	{r4, r5, lr}
 80026b6:	b083      	sub	sp, #12
 80026b8:	4604      	mov	r4, r0
 80026ba:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80026bc:	2000      	movs	r0, #0
 80026be:	f7ff ff6b 	bl	8002598 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80026c2:	f044 0420 	orr.w	r4, r4, #32
 80026c6:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 80026ca:	f88d 5005 	strb.w	r5, [sp, #5]
	SPI_TxCplt = 0;
 80026ce:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <NRF24_write_register+0x3c>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, spiBuf, 2);
 80026d4:	2202      	movs	r2, #2
 80026d6:	a901      	add	r1, sp, #4
 80026d8:	4806      	ldr	r0, [pc, #24]	; (80026f4 <NRF24_write_register+0x40>)
 80026da:	f002 fc9f 	bl	800501c <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 80026de:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <NRF24_write_register+0x3c>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0fb      	beq.n	80026de <NRF24_write_register+0x2a>
	}
	//Bring CSN high
	NRF24_csn(1);
 80026e6:	2001      	movs	r0, #1
 80026e8:	f7ff ff56 	bl	8002598 <NRF24_csn>
}
 80026ec:	b003      	add	sp, #12
 80026ee:	bd30      	pop	{r4, r5, pc}
 80026f0:	200002c1 	.word	0x200002c1
 80026f4:	200043ec 	.word	0x200043ec

080026f8 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80026f8:	b570      	push	{r4, r5, r6, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	4604      	mov	r4, r0
 80026fe:	460d      	mov	r5, r1
 8002700:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8002702:	2000      	movs	r0, #0
 8002704:	f7ff ff48 	bl	8002598 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8002708:	f044 0420 	orr.w	r4, r4, #32
 800270c:	a902      	add	r1, sp, #8
 800270e:	f801 4d04 	strb.w	r4, [r1, #-4]!
	SPI_TxCplt = 0;
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <NRF24_write_registerN+0x54>)
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, spiBuf, 1);
 8002718:	2201      	movs	r2, #1
 800271a:	480d      	ldr	r0, [pc, #52]	; (8002750 <NRF24_write_registerN+0x58>)
 800271c:	f002 fc7e 	bl	800501c <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 8002720:	4b0a      	ldr	r3, [pc, #40]	; (800274c <NRF24_write_registerN+0x54>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0fb      	beq.n	8002720 <NRF24_write_registerN+0x28>
	}
	SPI_TxCplt = 0;
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <NRF24_write_registerN+0x54>)
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, (uint8_t*)buf, len);
 800272e:	4632      	mov	r2, r6
 8002730:	4629      	mov	r1, r5
 8002732:	4807      	ldr	r0, [pc, #28]	; (8002750 <NRF24_write_registerN+0x58>)
 8002734:	f002 fc72 	bl	800501c <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <NRF24_write_registerN+0x54>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0fb      	beq.n	8002738 <NRF24_write_registerN+0x40>
	}
	//Bring CSN high
	NRF24_csn(1);
 8002740:	2001      	movs	r0, #1
 8002742:	f7ff ff29 	bl	8002598 <NRF24_csn>
}
 8002746:	b002      	add	sp, #8
 8002748:	bd70      	pop	{r4, r5, r6, pc}
 800274a:	bf00      	nop
 800274c:	200002c1 	.word	0x200002c1
 8002750:	200043ec 	.word	0x200043ec

08002754 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8002754:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8002756:	21ff      	movs	r1, #255	; 0xff
 8002758:	20e1      	movs	r0, #225	; 0xe1
 800275a:	f7ff ffab 	bl	80026b4 <NRF24_write_register>
}
 800275e:	bd08      	pop	{r3, pc}

08002760 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8002760:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8002762:	21ff      	movs	r1, #255	; 0xff
 8002764:	20e2      	movs	r0, #226	; 0xe2
 8002766:	f7ff ffa5 	bl	80026b4 <NRF24_write_register>
}
 800276a:	bd08      	pop	{r3, pc}

0800276c <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 800276c:	b508      	push	{r3, lr}
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800276e:	2007      	movs	r0, #7
 8002770:	f7ff ff3e 	bl	80025f0 <NRF24_read_register>
	return statReg;
}
 8002774:	bd08      	pop	{r3, pc}
	...

08002778 <NRF24_startListening>:
	NRF24_powerDown();

}
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8002778:	b508      	push	{r3, lr}
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 800277a:	2000      	movs	r0, #0
 800277c:	f7ff ff38 	bl	80025f0 <NRF24_read_register>
 8002780:	f040 0103 	orr.w	r1, r0, #3
 8002784:	b2c9      	uxtb	r1, r1
 8002786:	2000      	movs	r0, #0
 8002788:	f7ff ff94 	bl	80026b4 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 800278c:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <NRF24_startListening+0x40>)
 800278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002792:	4313      	orrs	r3, r2
 8002794:	d10a      	bne.n	80027ac <NRF24_startListening+0x34>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);

	//Flush buffers
	NRF24_flush_tx();
 8002796:	f7ff ffdd 	bl	8002754 <NRF24_flush_tx>
	NRF24_flush_rx();
 800279a:	f7ff ffe1 	bl	8002760 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 800279e:	2001      	movs	r0, #1
 80027a0:	f7ff ff10 	bl	80025c4 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 80027a4:	2096      	movs	r0, #150	; 0x96
 80027a6:	f7ff fef3 	bl	8002590 <NRF24_DelayMicroSeconds>
}
 80027aa:	bd08      	pop	{r3, pc}
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80027ac:	2205      	movs	r2, #5
 80027ae:	4902      	ldr	r1, [pc, #8]	; (80027b8 <NRF24_startListening+0x40>)
 80027b0:	200a      	movs	r0, #10
 80027b2:	f7ff ffa1 	bl	80026f8 <NRF24_write_registerN>
 80027b6:	e7ee      	b.n	8002796 <NRF24_startListening+0x1e>
 80027b8:	20000310 	.word	0x20000310

080027bc <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
	NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 80027bc:	b510      	push	{r4, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	e9cd 2300 	strd	r2, r3, [sp]
	if (number == 0)
 80027c4:	4604      	mov	r4, r0
 80027c6:	b920      	cbnz	r0, 80027d2 <NRF24_openReadingPipe+0x16>
		pipe0_reading_address = address;
 80027c8:	4b14      	ldr	r3, [pc, #80]	; (800281c <NRF24_openReadingPipe+0x60>)
 80027ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80027ce:	e9c3 0100 	strd	r0, r1, [r3]

	if(number <= 6)
 80027d2:	2c06      	cmp	r4, #6
 80027d4:	d818      	bhi.n	8002808 <NRF24_openReadingPipe+0x4c>
	{
		if(number < 2)
 80027d6:	2c01      	cmp	r4, #1
 80027d8:	d918      	bls.n	800280c <NRF24_openReadingPipe+0x50>
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 80027da:	2201      	movs	r2, #1
 80027dc:	4669      	mov	r1, sp
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <NRF24_openReadingPipe+0x64>)
 80027e0:	5d18      	ldrb	r0, [r3, r4]
 80027e2:	f7ff ff89 	bl	80026f8 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 80027e6:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <NRF24_openReadingPipe+0x68>)
 80027e8:	7819      	ldrb	r1, [r3, #0]
 80027ea:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <NRF24_openReadingPipe+0x6c>)
 80027ec:	5d18      	ldrb	r0, [r3, r4]
 80027ee:	f7ff ff61 	bl	80026b4 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80027f2:	2002      	movs	r0, #2
 80027f4:	f7ff fefc 	bl	80025f0 <NRF24_read_register>
 80027f8:	b240      	sxtb	r0, r0
 80027fa:	2101      	movs	r1, #1
 80027fc:	40a1      	lsls	r1, r4
 80027fe:	4301      	orrs	r1, r0
 8002800:	b2c9      	uxtb	r1, r1
 8002802:	2002      	movs	r0, #2
 8002804:	f7ff ff56 	bl	80026b4 <NRF24_write_register>
	}

}
 8002808:	b002      	add	sp, #8
 800280a:	bd10      	pop	{r4, pc}
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 800280c:	2205      	movs	r2, #5
 800280e:	4669      	mov	r1, sp
 8002810:	4b03      	ldr	r3, [pc, #12]	; (8002820 <NRF24_openReadingPipe+0x64>)
 8002812:	5d18      	ldrb	r0, [r3, r4]
 8002814:	f7ff ff70 	bl	80026f8 <NRF24_write_registerN>
 8002818:	e7e5      	b.n	80027e6 <NRF24_openReadingPipe+0x2a>
 800281a:	bf00      	nop
 800281c:	20000310 	.word	0x20000310
 8002820:	0800e1dc 	.word	0x0800e1dc
 8002824:	2000030c 	.word	0x2000030c
 8002828:	0800e1e4 	.word	0x0800e1e4

0800282c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 800282c:	b508      	push	{r3, lr}
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 800282e:	f001 010f 	and.w	r1, r1, #15
 8002832:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8002836:	b2c9      	uxtb	r1, r1
 8002838:	2004      	movs	r0, #4
 800283a:	f7ff ff3b 	bl	80026b4 <NRF24_write_register>
}
 800283e:	bd08      	pop	{r3, pc}

08002840 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8002840:	b508      	push	{r3, lr}
	const uint8_t max_channel = 127;
	NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8002842:	4601      	mov	r1, r0
 8002844:	287f      	cmp	r0, #127	; 0x7f
 8002846:	bf28      	it	cs
 8002848:	217f      	movcs	r1, #127	; 0x7f
 800284a:	2005      	movs	r0, #5
 800284c:	f7ff ff32 	bl	80026b4 <NRF24_write_register>
}
 8002850:	bd08      	pop	{r3, pc}
	...

08002854 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
	const uint8_t max_payload_size = 32;
	payload_size = MIN(size,max_payload_size);
 8002854:	2820      	cmp	r0, #32
 8002856:	bf28      	it	cs
 8002858:	2020      	movcs	r0, #32
 800285a:	4b01      	ldr	r3, [pc, #4]	; (8002860 <NRF24_setPayloadSize+0xc>)
 800285c:	7018      	strb	r0, [r3, #0]
}
 800285e:	4770      	bx	lr
 8002860:	2000030c 	.word	0x2000030c

08002864 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
	return payload_size;
}
 8002864:	4b01      	ldr	r3, [pc, #4]	; (800286c <NRF24_getPayloadSize+0x8>)
 8002866:	7818      	ldrb	r0, [r3, #0]
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	2000030c 	.word	0x2000030c

08002870 <NRF24_read_payload>:
{
 8002870:	b570      	push	{r4, r5, r6, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	4606      	mov	r6, r0
 8002876:	460d      	mov	r5, r1
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8002878:	f7ff fff4 	bl	8002864 <NRF24_getPayloadSize>
 800287c:	4604      	mov	r4, r0
 800287e:	42a8      	cmp	r0, r5
 8002880:	d900      	bls.n	8002884 <NRF24_read_payload+0x14>
 8002882:	462c      	mov	r4, r5
	NRF24_csn(0);
 8002884:	2000      	movs	r0, #0
 8002886:	f7ff fe87 	bl	8002598 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 800288a:	a902      	add	r1, sp, #8
 800288c:	2361      	movs	r3, #97	; 0x61
 800288e:	f801 3d01 	strb.w	r3, [r1, #-1]!
	SPI_TxCplt = 0;
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <NRF24_read_payload+0x5c>)
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, &cmdRxBuf, 1);
 8002898:	2201      	movs	r2, #1
 800289a:	480d      	ldr	r0, [pc, #52]	; (80028d0 <NRF24_read_payload+0x60>)
 800289c:	f002 fbbe 	bl	800501c <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <NRF24_read_payload+0x5c>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0fb      	beq.n	80028a0 <NRF24_read_payload+0x30>
	SPI_RxCplt = 0;
 80028a8:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <NRF24_read_payload+0x64>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Receive_IT(&hspi2, buf, data_len);
 80028ae:	b2a2      	uxth	r2, r4
 80028b0:	4631      	mov	r1, r6
 80028b2:	4807      	ldr	r0, [pc, #28]	; (80028d0 <NRF24_read_payload+0x60>)
 80028b4:	f002 fc66 	bl	8005184 <HAL_SPI_Receive_IT>
	while(!SPI_RxCplt){
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <NRF24_read_payload+0x64>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0fb      	beq.n	80028b8 <NRF24_read_payload+0x48>
	NRF24_csn(1);
 80028c0:	2001      	movs	r0, #1
 80028c2:	f7ff fe69 	bl	8002598 <NRF24_csn>
}
 80028c6:	b002      	add	sp, #8
 80028c8:	bd70      	pop	{r4, r5, r6, pc}
 80028ca:	bf00      	nop
 80028cc:	200002c1 	.word	0x200002c1
 80028d0:	200043ec 	.word	0x200043ec
 80028d4:	200002c0 	.word	0x200002c0

080028d8 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80028d8:	b508      	push	{r3, lr}
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80028da:	2060      	movs	r0, #96	; 0x60
 80028dc:	f7ff fe88 	bl	80025f0 <NRF24_read_register>
}
 80028e0:	bd08      	pop	{r3, pc}

080028e2 <NRF24_read>:
{
 80028e2:	b510      	push	{r4, lr}
	NRF24_read_payload( buf, len );
 80028e4:	f7ff ffc4 	bl	8002870 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80028e8:	2017      	movs	r0, #23
 80028ea:	f7ff fe81 	bl	80025f0 <NRF24_read_register>
 80028ee:	f000 0401 	and.w	r4, r0, #1
	NRF24_flush_rx();
 80028f2:	f7ff ff35 	bl	8002760 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 80028f6:	f7ff ffef 	bl	80028d8 <NRF24_getDynamicPayloadSize>
}
 80028fa:	4620      	mov	r0, r4
 80028fc:	bd10      	pop	{r4, pc}

080028fe <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 80028fe:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8002900:	201d      	movs	r0, #29
 8002902:	f7ff fe75 	bl	80025f0 <NRF24_read_register>
 8002906:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800290a:	201d      	movs	r0, #29
 800290c:	f7ff fed2 	bl	80026b4 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8002910:	2100      	movs	r1, #0
 8002912:	201c      	movs	r0, #28
 8002914:	f7ff fece 	bl	80026b4 <NRF24_write_register>
	dynamic_payloads_enabled = false;
}
 8002918:	bd08      	pop	{r3, pc}

0800291a <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 800291a:	b508      	push	{r3, lr}
	if ( enable )
 800291c:	b920      	cbnz	r0, 8002928 <NRF24_setAutoAck+0xe>
		NRF24_write_register(REG_EN_AA, 0x3F);
	else
		NRF24_write_register(REG_EN_AA, 0x00);
 800291e:	2100      	movs	r1, #0
 8002920:	2001      	movs	r0, #1
 8002922:	f7ff fec7 	bl	80026b4 <NRF24_write_register>
}
 8002926:	bd08      	pop	{r3, pc}
		NRF24_write_register(REG_EN_AA, 0x3F);
 8002928:	213f      	movs	r1, #63	; 0x3f
 800292a:	2001      	movs	r0, #1
 800292c:	f7ff fec2 	bl	80026b4 <NRF24_write_register>
 8002930:	e7f9      	b.n	8002926 <NRF24_setAutoAck+0xc>

08002932 <NRF24_setPALevel>:
		NRF24_write_register( REG_EN_AA, en_aa ) ;
	}
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8002932:	b510      	push	{r4, lr}
 8002934:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8002936:	2006      	movs	r0, #6
 8002938:	f7ff fe5a 	bl	80025f0 <NRF24_read_register>
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800293c:	f000 01f9 	and.w	r1, r0, #249	; 0xf9

	// switch uses RAM (evil!)
	if ( level == RF24_PA_0dB)
 8002940:	2c03      	cmp	r4, #3
 8002942:	d009      	beq.n	8002958 <NRF24_setPALevel+0x26>
	{
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
	}
	else if ( level == RF24_PA_m6dB )
 8002944:	2c02      	cmp	r4, #2
 8002946:	d00d      	beq.n	8002964 <NRF24_setPALevel+0x32>
	{
		setup |= _BV(RF_PWR_HIGH) ;
	}
	else if ( level == RF24_PA_m12dB )
 8002948:	2c01      	cmp	r4, #1
 800294a:	d00e      	beq.n	800296a <NRF24_setPALevel+0x38>
	{
		setup |= _BV(RF_PWR_LOW);
	}
	else if ( level == RF24_PA_m18dB )
 800294c:	b134      	cbz	r4, 800295c <NRF24_setPALevel+0x2a>
	{
		// nothing
	}
	else if ( level == RF24_PA_ERROR )
 800294e:	2c04      	cmp	r4, #4
 8002950:	d104      	bne.n	800295c <NRF24_setPALevel+0x2a>
	{
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002952:	f041 0106 	orr.w	r1, r1, #6
 8002956:	e001      	b.n	800295c <NRF24_setPALevel+0x2a>
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002958:	f041 0106 	orr.w	r1, r1, #6
	}

	NRF24_write_register( REG_RF_SETUP, setup ) ;
 800295c:	2006      	movs	r0, #6
 800295e:	f7ff fea9 	bl	80026b4 <NRF24_write_register>
}
 8002962:	bd10      	pop	{r4, pc}
		setup |= _BV(RF_PWR_HIGH) ;
 8002964:	f041 0104 	orr.w	r1, r1, #4
 8002968:	e7f8      	b.n	800295c <NRF24_setPALevel+0x2a>
		setup |= _BV(RF_PWR_LOW);
 800296a:	f041 0102 	orr.w	r1, r1, #2
 800296e:	e7f5      	b.n	800295c <NRF24_setPALevel+0x2a>

08002970 <NRF24_setDataRate>:

	return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8002970:	b538      	push	{r3, r4, r5, lr}
 8002972:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8002974:	2006      	movs	r0, #6
 8002976:	f7ff fe3b 	bl	80025f0 <NRF24_read_register>

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false ;
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800297a:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
	if( speed == RF24_250KBPS )
 800297e:	2d02      	cmp	r5, #2
 8002980:	d00c      	beq.n	800299c <NRF24_setDataRate+0x2c>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if ( speed == RF24_2MBPS )
 8002982:	2d01      	cmp	r5, #1
 8002984:	d00d      	beq.n	80029a2 <NRF24_setDataRate+0x32>
		{
			// 1Mbs
			wide_band = false ;
		}
	}
	NRF24_write_register(REG_RF_SETUP,setup);
 8002986:	4621      	mov	r1, r4
 8002988:	2006      	movs	r0, #6
 800298a:	f7ff fe93 	bl	80026b4 <NRF24_write_register>

	// Verify our result
	if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800298e:	2006      	movs	r0, #6
 8002990:	f7ff fe2e 	bl	80025f0 <NRF24_read_register>
 8002994:	42a0      	cmp	r0, r4
 8002996:	d007      	beq.n	80029a8 <NRF24_setDataRate+0x38>
	bool result = false;
 8002998:	2000      	movs	r0, #0
	{
		wide_band = false;
	}

	return result;
}
 800299a:	bd38      	pop	{r3, r4, r5, pc}
		setup |= _BV( RF_DR_LOW ) ;
 800299c:	f044 0420 	orr.w	r4, r4, #32
 80029a0:	e7f1      	b.n	8002986 <NRF24_setDataRate+0x16>
			setup |= _BV(RF_DR_HIGH);
 80029a2:	f044 0408 	orr.w	r4, r4, #8
 80029a6:	e7ee      	b.n	8002986 <NRF24_setDataRate+0x16>
		result = true;
 80029a8:	2001      	movs	r0, #1
 80029aa:	e7f6      	b.n	800299a <NRF24_setDataRate+0x2a>

080029ac <NRF24_setCRCLength>:
	}
	return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80029ac:	b510      	push	{r4, lr}
 80029ae:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80029b0:	2000      	movs	r0, #0
 80029b2:	f7ff fe1d 	bl	80025f0 <NRF24_read_register>
 80029b6:	f000 01f3 	and.w	r1, r0, #243	; 0xf3

	// switch uses RAM
	if ( length == RF24_CRC_DISABLED )
 80029ba:	b11c      	cbz	r4, 80029c4 <NRF24_setCRCLength+0x18>
	{
		// Do nothing, we turned it off above.
	}
	else if ( length == RF24_CRC_8 )
 80029bc:	2c01      	cmp	r4, #1
 80029be:	d005      	beq.n	80029cc <NRF24_setCRCLength+0x20>
		config |= _BV(BIT_EN_CRC);
	}
	else
	{
		config |= _BV(BIT_EN_CRC);
		config |= _BV( BIT_CRCO );
 80029c0:	f041 010c 	orr.w	r1, r1, #12
	}
	NRF24_write_register( REG_CONFIG, config );
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7ff fe75 	bl	80026b4 <NRF24_write_register>
}
 80029ca:	bd10      	pop	{r4, pc}
		config |= _BV(BIT_EN_CRC);
 80029cc:	f041 0108 	orr.w	r1, r1, #8
 80029d0:	e7f8      	b.n	80029c4 <NRF24_setCRCLength+0x18>

080029d2 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80029d2:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7ff fe0b 	bl	80025f0 <NRF24_read_register>
 80029da:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 80029de:	2000      	movs	r0, #0
 80029e0:	f7ff fe68 	bl	80026b4 <NRF24_write_register>
}
 80029e4:	bd08      	pop	{r3, pc}

080029e6 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80029e6:	b570      	push	{r4, r5, r6, lr}
 80029e8:	4606      	mov	r6, r0
	uint8_t status = NRF24_get_status();
 80029ea:	f7ff febf 	bl	800276c <NRF24_get_status>
 80029ee:	f000 0340 	and.w	r3, r0, #64	; 0x40

	bool result = ( status & _BV(BIT_RX_DR) );
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	bf14      	ite	ne
 80029f6:	2501      	movne	r5, #1
 80029f8:	2500      	moveq	r5, #0

	if (result)
 80029fa:	d00b      	beq.n	8002a14 <NRF24_availablePipe+0x2e>
 80029fc:	4604      	mov	r4, r0
	{
		// If the caller wants the pipe number, include that
		if ( pipe_num )
 80029fe:	b116      	cbz	r6, 8002a06 <NRF24_availablePipe+0x20>
			*pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8002a00:	f3c0 0342 	ubfx	r3, r0, #1, #3
 8002a04:	7033      	strb	r3, [r6, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8002a06:	2140      	movs	r1, #64	; 0x40
 8002a08:	2007      	movs	r0, #7
 8002a0a:	f7ff fe53 	bl	80026b4 <NRF24_write_register>

		// Handle ack payload receipt
		if ( status & _BV(BIT_TX_DS) )
 8002a0e:	f014 0f20 	tst.w	r4, #32
 8002a12:	d101      	bne.n	8002a18 <NRF24_availablePipe+0x32>
		{
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
		}
	}
	return result;
}
 8002a14:	4628      	mov	r0, r5
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8002a18:	2120      	movs	r1, #32
 8002a1a:	2007      	movs	r0, #7
 8002a1c:	f7ff fe4a 	bl	80026b4 <NRF24_write_register>
 8002a20:	e7f8      	b.n	8002a14 <NRF24_availablePipe+0x2e>

08002a22 <NRF24_available>:
{
 8002a22:	b508      	push	{r3, lr}
	return NRF24_availablePipe(NULL);
 8002a24:	2000      	movs	r0, #0
 8002a26:	f7ff ffde 	bl	80029e6 <NRF24_availablePipe>
}
 8002a2a:	bd08      	pop	{r3, pc}

08002a2c <NRF24_writeAckPayload>:
	NRF24_DelayMicroSeconds(15);
	NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	4604      	mov	r4, r0
 8002a30:	460d      	mov	r5, r1
	const uint8_t* current = (uint8_t *)buf;
	const uint8_t max_payload_size = 32;
	uint8_t data_len = MIN(len,max_payload_size);
 8002a32:	2a20      	cmp	r2, #32
 8002a34:	bf28      	it	cs
 8002a36:	2220      	movcs	r2, #32
 8002a38:	4616      	mov	r6, r2

	NRF24_csn(0);
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f7ff fdac 	bl	8002598 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8002a40:	f004 0007 	and.w	r0, r4, #7
 8002a44:	4632      	mov	r2, r6
 8002a46:	4629      	mov	r1, r5
 8002a48:	f040 00a8 	orr.w	r0, r0, #168	; 0xa8
 8002a4c:	f7ff fe54 	bl	80026f8 <NRF24_write_registerN>
	NRF24_csn(1);
 8002a50:	2001      	movs	r0, #1
 8002a52:	f7ff fda1 	bl	8002598 <NRF24_csn>
}
 8002a56:	bd70      	pop	{r4, r5, r6, pc}

08002a58 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8002a58:	b508      	push	{r3, lr}
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8002a5a:	2170      	movs	r1, #112	; 0x70
 8002a5c:	2007      	movs	r0, #7
 8002a5e:	f7ff fe29 	bl	80026b4 <NRF24_write_register>
}
 8002a62:	bd08      	pop	{r3, pc}

08002a64 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8002a64:	b500      	push	{lr}
 8002a66:	b083      	sub	sp, #12
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7ff fd95 	bl	8002598 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8002a6e:	2350      	movs	r3, #80	; 0x50
 8002a70:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 8002a74:	2373      	movs	r3, #115	; 0x73
 8002a76:	f88d 3005 	strb.w	r3, [sp, #5]
	SPI_TxCplt = 0;
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <NRF24_ACTIVATE_cmd+0x3c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi2, cmdRxBuf, 2);
 8002a80:	2202      	movs	r2, #2
 8002a82:	a901      	add	r1, sp, #4
 8002a84:	4807      	ldr	r0, [pc, #28]	; (8002aa4 <NRF24_ACTIVATE_cmd+0x40>)
 8002a86:	f002 fac9 	bl	800501c <HAL_SPI_Transmit_IT>
	while(!SPI_TxCplt){
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <NRF24_ACTIVATE_cmd+0x3c>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0fb      	beq.n	8002a8a <NRF24_ACTIVATE_cmd+0x26>
	}

	NRF24_csn(1);
 8002a92:	2001      	movs	r0, #1
 8002a94:	f7ff fd80 	bl	8002598 <NRF24_csn>
}
 8002a98:	b003      	add	sp, #12
 8002a9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a9e:	bf00      	nop
 8002aa0:	200002c1 	.word	0x200002c1
 8002aa4:	200043ec 	.word	0x200043ec

08002aa8 <NRF24_enableAckPayload>:
{
 8002aa8:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8002aaa:	201d      	movs	r0, #29
 8002aac:	f7ff fda0 	bl	80025f0 <NRF24_read_register>
 8002ab0:	f040 0106 	orr.w	r1, r0, #6
 8002ab4:	b2c9      	uxtb	r1, r1
 8002ab6:	201d      	movs	r0, #29
 8002ab8:	f7ff fdfc 	bl	80026b4 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8002abc:	201d      	movs	r0, #29
 8002abe:	f7ff fd97 	bl	80025f0 <NRF24_read_register>
 8002ac2:	b148      	cbz	r0, 8002ad8 <NRF24_enableAckPayload+0x30>
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8002ac4:	201c      	movs	r0, #28
 8002ac6:	f7ff fd93 	bl	80025f0 <NRF24_read_register>
 8002aca:	f040 0103 	orr.w	r1, r0, #3
 8002ace:	b2c9      	uxtb	r1, r1
 8002ad0:	201c      	movs	r0, #28
 8002ad2:	f7ff fdef 	bl	80026b4 <NRF24_write_register>
}
 8002ad6:	bd08      	pop	{r3, pc}
		NRF24_ACTIVATE_cmd();
 8002ad8:	f7ff ffc4 	bl	8002a64 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8002adc:	201d      	movs	r0, #29
 8002ade:	f7ff fd87 	bl	80025f0 <NRF24_read_register>
 8002ae2:	f040 0106 	orr.w	r1, r0, #6
 8002ae6:	b2c9      	uxtb	r1, r1
 8002ae8:	201d      	movs	r0, #29
 8002aea:	f7ff fde3 	bl	80026b4 <NRF24_write_register>
 8002aee:	e7e9      	b.n	8002ac4 <NRF24_enableAckPayload+0x1c>

08002af0 <NRF24_begin>:
{
 8002af0:	b082      	sub	sp, #8
 8002af2:	b530      	push	{r4, r5, lr}
 8002af4:	b083      	sub	sp, #12
 8002af6:	9307      	str	r3, [sp, #28]
	nrf24_PORT = nrf24PORT;
 8002af8:	4b5f      	ldr	r3, [pc, #380]	; (8002c78 <NRF24_begin+0x188>)
 8002afa:	6018      	str	r0, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8002afc:	4b5f      	ldr	r3, [pc, #380]	; (8002c7c <NRF24_begin+0x18c>)
 8002afe:	8019      	strh	r1, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8002b00:	4b5f      	ldr	r3, [pc, #380]	; (8002c80 <NRF24_begin+0x190>)
 8002b02:	801a      	strh	r2, [r3, #0]
	NRF24_csn(1);
 8002b04:	2001      	movs	r0, #1
 8002b06:	f7ff fd47 	bl	8002598 <NRF24_csn>
	NRF24_ce(0);
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f7ff fd5a 	bl	80025c4 <NRF24_ce>
	HAL_Delay(5);
 8002b10:	2005      	movs	r0, #5
 8002b12:	f000 fd97 	bl	8003644 <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 8002b16:	2108      	movs	r1, #8
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f7ff fdcb 	bl	80026b4 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8002b1e:	213f      	movs	r1, #63	; 0x3f
 8002b20:	2001      	movs	r0, #1
 8002b22:	f7ff fdc7 	bl	80026b4 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8002b26:	2103      	movs	r1, #3
 8002b28:	2002      	movs	r0, #2
 8002b2a:	f7ff fdc3 	bl	80026b4 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8002b2e:	2103      	movs	r1, #3
 8002b30:	4608      	mov	r0, r1
 8002b32:	f7ff fdbf 	bl	80026b4 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8002b36:	2103      	movs	r1, #3
 8002b38:	2004      	movs	r0, #4
 8002b3a:	f7ff fdbb 	bl	80026b4 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8002b3e:	2102      	movs	r1, #2
 8002b40:	2005      	movs	r0, #5
 8002b42:	f7ff fdb7 	bl	80026b4 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8002b46:	210f      	movs	r1, #15
 8002b48:	2006      	movs	r0, #6
 8002b4a:	f7ff fdb3 	bl	80026b4 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8002b4e:	210e      	movs	r1, #14
 8002b50:	2007      	movs	r0, #7
 8002b52:	f7ff fdaf 	bl	80026b4 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8002b56:	2100      	movs	r1, #0
 8002b58:	2008      	movs	r0, #8
 8002b5a:	f7ff fdab 	bl	80026b4 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8002b5e:	2100      	movs	r1, #0
 8002b60:	2009      	movs	r0, #9
 8002b62:	f7ff fda7 	bl	80026b4 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8002b66:	24e7      	movs	r4, #231	; 0xe7
 8002b68:	f88d 4004 	strb.w	r4, [sp, #4]
 8002b6c:	f88d 4003 	strb.w	r4, [sp, #3]
 8002b70:	f88d 4002 	strb.w	r4, [sp, #2]
 8002b74:	f88d 4001 	strb.w	r4, [sp, #1]
 8002b78:	ad02      	add	r5, sp, #8
 8002b7a:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8002b7e:	2205      	movs	r2, #5
 8002b80:	4629      	mov	r1, r5
 8002b82:	200a      	movs	r0, #10
 8002b84:	f7ff fdb8 	bl	80026f8 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 8002b88:	23c2      	movs	r3, #194	; 0xc2
 8002b8a:	f88d 3004 	strb.w	r3, [sp, #4]
 8002b8e:	f88d 3003 	strb.w	r3, [sp, #3]
 8002b92:	f88d 3002 	strb.w	r3, [sp, #2]
 8002b96:	f88d 3001 	strb.w	r3, [sp, #1]
 8002b9a:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8002b9e:	2205      	movs	r2, #5
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	200b      	movs	r0, #11
 8002ba4:	f7ff fda8 	bl	80026f8 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8002ba8:	21c3      	movs	r1, #195	; 0xc3
 8002baa:	200c      	movs	r0, #12
 8002bac:	f7ff fd82 	bl	80026b4 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8002bb0:	21c4      	movs	r1, #196	; 0xc4
 8002bb2:	200d      	movs	r0, #13
 8002bb4:	f7ff fd7e 	bl	80026b4 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8002bb8:	21c5      	movs	r1, #197	; 0xc5
 8002bba:	200e      	movs	r0, #14
 8002bbc:	f7ff fd7a 	bl	80026b4 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8002bc0:	21c6      	movs	r1, #198	; 0xc6
 8002bc2:	200f      	movs	r0, #15
 8002bc4:	f7ff fd76 	bl	80026b4 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8002bc8:	f88d 4004 	strb.w	r4, [sp, #4]
 8002bcc:	f88d 4003 	strb.w	r4, [sp, #3]
 8002bd0:	f88d 4002 	strb.w	r4, [sp, #2]
 8002bd4:	f88d 4001 	strb.w	r4, [sp, #1]
 8002bd8:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8002bdc:	2205      	movs	r2, #5
 8002bde:	4629      	mov	r1, r5
 8002be0:	2010      	movs	r0, #16
 8002be2:	f7ff fd89 	bl	80026f8 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8002be6:	2100      	movs	r1, #0
 8002be8:	2011      	movs	r0, #17
 8002bea:	f7ff fd63 	bl	80026b4 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8002bee:	2100      	movs	r1, #0
 8002bf0:	2012      	movs	r0, #18
 8002bf2:	f7ff fd5f 	bl	80026b4 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	2013      	movs	r0, #19
 8002bfa:	f7ff fd5b 	bl	80026b4 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8002bfe:	2100      	movs	r1, #0
 8002c00:	2014      	movs	r0, #20
 8002c02:	f7ff fd57 	bl	80026b4 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8002c06:	2100      	movs	r1, #0
 8002c08:	2015      	movs	r0, #21
 8002c0a:	f7ff fd53 	bl	80026b4 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8002c0e:	2100      	movs	r1, #0
 8002c10:	2016      	movs	r0, #22
 8002c12:	f7ff fd4f 	bl	80026b4 <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 8002c16:	f7ff ff25 	bl	8002a64 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	201c      	movs	r0, #28
 8002c1e:	f7ff fd49 	bl	80026b4 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8002c22:	2100      	movs	r1, #0
 8002c24:	201d      	movs	r0, #29
 8002c26:	f7ff fd45 	bl	80026b4 <NRF24_write_register>
	NRF24_setRetries(15, 15);
 8002c2a:	210f      	movs	r1, #15
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	f7ff fdfd 	bl	800282c <NRF24_setRetries>
	NRF24_setPALevel(RF24_PA_m6dB);
 8002c32:	2002      	movs	r0, #2
 8002c34:	f7ff fe7d 	bl	8002932 <NRF24_setPALevel>
	NRF24_setDataRate(RF24_1MBPS);
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f7ff fe99 	bl	8002970 <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 8002c3e:	2002      	movs	r0, #2
 8002c40:	f7ff feb4 	bl	80029ac <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 8002c44:	f7ff fe5b 	bl	80028fe <NRF24_disableDynamicPayloads>
	NRF24_setPayloadSize(32);
 8002c48:	2020      	movs	r0, #32
 8002c4a:	f7ff fe03 	bl	8002854 <NRF24_setPayloadSize>
	NRF24_setAutoAck(true);
 8002c4e:	2001      	movs	r0, #1
 8002c50:	f7ff fe63 	bl	800291a <NRF24_setAutoAck>
	NRF24_enableAckPayload();
 8002c54:	f7ff ff28 	bl	8002aa8 <NRF24_enableAckPayload>
	NRF24_resetStatus();
 8002c58:	f7ff fefe 	bl	8002a58 <NRF24_resetStatus>
	NRF24_setChannel(76);
 8002c5c:	204c      	movs	r0, #76	; 0x4c
 8002c5e:	f7ff fdef 	bl	8002840 <NRF24_setChannel>
	NRF24_flush_tx();
 8002c62:	f7ff fd77 	bl	8002754 <NRF24_flush_tx>
	NRF24_flush_rx();
 8002c66:	f7ff fd7b 	bl	8002760 <NRF24_flush_rx>
	NRF24_powerDown();
 8002c6a:	f7ff feb2 	bl	80029d2 <NRF24_powerDown>
}
 8002c6e:	b003      	add	sp, #12
 8002c70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c74:	b002      	add	sp, #8
 8002c76:	4770      	bx	lr
 8002c78:	200002c8 	.word	0x200002c8
 8002c7c:	200002c4 	.word	0x200002c4
 8002c80:	200002c2 	.word	0x200002c2

08002c84 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8002c84:	b570      	push	{r4, r5, r6, lr}
 8002c86:	b0a0      	sub	sp, #128	; 0x80
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002c88:	ac07      	add	r4, sp, #28
 8002c8a:	4dc4      	ldr	r5, [pc, #784]	; (8002f9c <printRadioSettings+0x318>)
 8002c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	f824 3b02 	strh.w	r3, [r4], #2
 8002c9e:	0c1b      	lsrs	r3, r3, #16
 8002ca0:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002ca2:	a807      	add	r0, sp, #28
 8002ca4:	f7fd fa9c 	bl	80001e0 <strlen>
 8002ca8:	230a      	movs	r3, #10
 8002caa:	b282      	uxth	r2, r0
 8002cac:	a907      	add	r1, sp, #28
 8002cae:	48bc      	ldr	r0, [pc, #752]	; (8002fa0 <printRadioSettings+0x31c>)
 8002cb0:	f003 f9ec 	bl	800608c <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f7ff fc9b 	bl	80025f0 <NRF24_read_register>
	if(reg8Val & (1 << 3))
 8002cba:	f010 0f08 	tst.w	r0, #8
 8002cbe:	f000 8261 	beq.w	8003184 <printRadioSettings+0x500>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8002cc2:	f010 0f04 	tst.w	r0, #4
 8002cc6:	f000 8251 	beq.w	800316c <printRadioSettings+0x4e8>
 8002cca:	ac07      	add	r4, sp, #28
 8002ccc:	4db5      	ldr	r5, [pc, #724]	; (8002fa4 <printRadioSettings+0x320>)
 8002cce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002cd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002cda:	a807      	add	r0, sp, #28
 8002cdc:	f7fd fa80 	bl	80001e0 <strlen>
 8002ce0:	4caf      	ldr	r4, [pc, #700]	; (8002fa0 <printRadioSettings+0x31c>)
 8002ce2:	230a      	movs	r3, #10
 8002ce4:	b282      	uxth	r2, r0
 8002ce6:	a907      	add	r1, sp, #28
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f003 f9cf 	bl	800608c <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8002cee:	2001      	movs	r0, #1
 8002cf0:	f7ff fc7e 	bl	80025f0 <NRF24_read_register>
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002cf4:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8002cf8:	9303      	str	r3, [sp, #12]
 8002cfa:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8002cfe:	9302      	str	r3, [sp, #8]
 8002d00:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8002d10:	f000 0201 	and.w	r2, r0, #1
 8002d14:	49a4      	ldr	r1, [pc, #656]	; (8002fa8 <printRadioSettings+0x324>)
 8002d16:	a807      	add	r0, sp, #28
 8002d18:	f007 fd86 	bl	800a828 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002d1c:	a807      	add	r0, sp, #28
 8002d1e:	f7fd fa5f 	bl	80001e0 <strlen>
 8002d22:	230a      	movs	r3, #10
 8002d24:	b282      	uxth	r2, r0
 8002d26:	a907      	add	r1, sp, #28
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f003 f9af 	bl	800608c <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8002d2e:	2002      	movs	r0, #2
 8002d30:	f7ff fc5e 	bl	80025f0 <NRF24_read_register>
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002d34:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8002d38:	9303      	str	r3, [sp, #12]
 8002d3a:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8002d3e:	9302      	str	r3, [sp, #8]
 8002d40:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8002d50:	f000 0201 	and.w	r2, r0, #1
 8002d54:	4995      	ldr	r1, [pc, #596]	; (8002fac <printRadioSettings+0x328>)
 8002d56:	a807      	add	r0, sp, #28
 8002d58:	f007 fd66 	bl	800a828 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002d5c:	a807      	add	r0, sp, #28
 8002d5e:	f7fd fa3f 	bl	80001e0 <strlen>
 8002d62:	230a      	movs	r3, #10
 8002d64:	b282      	uxth	r2, r0
 8002d66:	a907      	add	r1, sp, #28
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f003 f98f 	bl	800608c <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8002d6e:	2003      	movs	r0, #3
 8002d70:	f7ff fc3e 	bl	80025f0 <NRF24_read_register>
 8002d74:	f000 0203 	and.w	r2, r0, #3
	reg8Val +=2;
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8002d78:	3202      	adds	r2, #2
 8002d7a:	498d      	ldr	r1, [pc, #564]	; (8002fb0 <printRadioSettings+0x32c>)
 8002d7c:	a807      	add	r0, sp, #28
 8002d7e:	f007 fd53 	bl	800a828 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002d82:	a807      	add	r0, sp, #28
 8002d84:	f7fd fa2c 	bl	80001e0 <strlen>
 8002d88:	230a      	movs	r3, #10
 8002d8a:	b282      	uxth	r2, r0
 8002d8c:	a907      	add	r1, sp, #28
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f003 f97c 	bl	800608c <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8002d94:	2005      	movs	r0, #5
 8002d96:	f7ff fc2b 	bl	80025f0 <NRF24_read_register>
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8002d9a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8002d9e:	4985      	ldr	r1, [pc, #532]	; (8002fb4 <printRadioSettings+0x330>)
 8002da0:	a807      	add	r0, sp, #28
 8002da2:	f007 fd41 	bl	800a828 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002da6:	a807      	add	r0, sp, #28
 8002da8:	f7fd fa1a 	bl	80001e0 <strlen>
 8002dac:	230a      	movs	r3, #10
 8002dae:	b282      	uxth	r2, r0
 8002db0:	a907      	add	r1, sp, #28
 8002db2:	4620      	mov	r0, r4
 8002db4:	f003 f96a 	bl	800608c <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8002db8:	2006      	movs	r0, #6
 8002dba:	f7ff fc19 	bl	80025f0 <NRF24_read_register>
 8002dbe:	4604      	mov	r4, r0
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8002dc0:	f010 0f08 	tst.w	r0, #8
 8002dc4:	f000 81e5 	beq.w	8003192 <printRadioSettings+0x50e>
 8002dc8:	ad07      	add	r5, sp, #28
 8002dca:	4e7b      	ldr	r6, [pc, #492]	; (8002fb8 <printRadioSettings+0x334>)
 8002dcc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002dce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dd0:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002dd4:	f845 0b04 	str.w	r0, [r5], #4
 8002dd8:	f825 1b02 	strh.w	r1, [r5], #2
 8002ddc:	0c09      	lsrs	r1, r1, #16
 8002dde:	7029      	strb	r1, [r5, #0]
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002de0:	a807      	add	r0, sp, #28
 8002de2:	f7fd f9fd 	bl	80001e0 <strlen>
 8002de6:	230a      	movs	r3, #10
 8002de8:	b282      	uxth	r2, r0
 8002dea:	a907      	add	r1, sp, #28
 8002dec:	486c      	ldr	r0, [pc, #432]	; (8002fa0 <printRadioSettings+0x31c>)
 8002dee:	f003 f94d 	bl	800608c <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
	reg8Val = (reg8Val>>1);
 8002df2:	f3c4 0441 	ubfx	r4, r4, #1, #2
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8002df6:	2c00      	cmp	r4, #0
 8002df8:	f000 81d8 	beq.w	80031ac <printRadioSettings+0x528>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8002dfc:	2c01      	cmp	r4, #1
 8002dfe:	f000 81dc 	beq.w	80031ba <printRadioSettings+0x536>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8002e02:	2c02      	cmp	r4, #2
 8002e04:	f000 81e0 	beq.w	80031c8 <printRadioSettings+0x544>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8002e08:	2c03      	cmp	r4, #3
 8002e0a:	f000 81e7 	beq.w	80031dc <printRadioSettings+0x558>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002e0e:	a807      	add	r0, sp, #28
 8002e10:	f7fd f9e6 	bl	80001e0 <strlen>
 8002e14:	4c62      	ldr	r4, [pc, #392]	; (8002fa0 <printRadioSettings+0x31c>)
 8002e16:	230a      	movs	r3, #10
 8002e18:	b282      	uxth	r2, r0
 8002e1a:	a907      	add	r1, sp, #28
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	f003 f935 	bl	800608c <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8002e22:	2205      	movs	r2, #5
 8002e24:	a905      	add	r1, sp, #20
 8002e26:	200a      	movs	r0, #10
 8002e28:	f7ff fc14 	bl	8002654 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002e2c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8002e30:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002e34:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8002e38:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8002e3c:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8002e40:	9502      	str	r5, [sp, #8]
 8002e42:	9001      	str	r0, [sp, #4]
 8002e44:	9100      	str	r1, [sp, #0]
 8002e46:	495d      	ldr	r1, [pc, #372]	; (8002fbc <printRadioSettings+0x338>)
 8002e48:	a807      	add	r0, sp, #28
 8002e4a:	f007 fced 	bl	800a828 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002e4e:	a807      	add	r0, sp, #28
 8002e50:	f7fd f9c6 	bl	80001e0 <strlen>
 8002e54:	230a      	movs	r3, #10
 8002e56:	b282      	uxth	r2, r0
 8002e58:	a907      	add	r1, sp, #28
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	f003 f916 	bl	800608c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8002e60:	2205      	movs	r2, #5
 8002e62:	a905      	add	r1, sp, #20
 8002e64:	200b      	movs	r0, #11
 8002e66:	f7ff fbf5 	bl	8002654 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002e6a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8002e6e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002e72:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8002e76:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8002e7a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8002e7e:	9502      	str	r5, [sp, #8]
 8002e80:	9001      	str	r0, [sp, #4]
 8002e82:	9100      	str	r1, [sp, #0]
 8002e84:	494e      	ldr	r1, [pc, #312]	; (8002fc0 <printRadioSettings+0x33c>)
 8002e86:	a807      	add	r0, sp, #28
 8002e88:	f007 fcce 	bl	800a828 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002e8c:	a807      	add	r0, sp, #28
 8002e8e:	f7fd f9a7 	bl	80001e0 <strlen>
 8002e92:	230a      	movs	r3, #10
 8002e94:	b282      	uxth	r2, r0
 8002e96:	a907      	add	r1, sp, #28
 8002e98:	4620      	mov	r0, r4
 8002e9a:	f003 f8f7 	bl	800608c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	a905      	add	r1, sp, #20
 8002ea2:	200c      	movs	r0, #12
 8002ea4:	f7ff fbd6 	bl	8002654 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002ea8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002eac:	4945      	ldr	r1, [pc, #276]	; (8002fc4 <printRadioSettings+0x340>)
 8002eae:	a807      	add	r0, sp, #28
 8002eb0:	f007 fcba 	bl	800a828 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002eb4:	a807      	add	r0, sp, #28
 8002eb6:	f7fd f993 	bl	80001e0 <strlen>
 8002eba:	230a      	movs	r3, #10
 8002ebc:	b282      	uxth	r2, r0
 8002ebe:	a907      	add	r1, sp, #28
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	f003 f8e3 	bl	800608c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	a905      	add	r1, sp, #20
 8002eca:	200d      	movs	r0, #13
 8002ecc:	f7ff fbc2 	bl	8002654 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002ed0:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002ed4:	493c      	ldr	r1, [pc, #240]	; (8002fc8 <printRadioSettings+0x344>)
 8002ed6:	a807      	add	r0, sp, #28
 8002ed8:	f007 fca6 	bl	800a828 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002edc:	a807      	add	r0, sp, #28
 8002ede:	f7fd f97f 	bl	80001e0 <strlen>
 8002ee2:	230a      	movs	r3, #10
 8002ee4:	b282      	uxth	r2, r0
 8002ee6:	a907      	add	r1, sp, #28
 8002ee8:	4620      	mov	r0, r4
 8002eea:	f003 f8cf 	bl	800608c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8002eee:	2201      	movs	r2, #1
 8002ef0:	a905      	add	r1, sp, #20
 8002ef2:	200e      	movs	r0, #14
 8002ef4:	f7ff fbae 	bl	8002654 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002ef8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002efc:	4933      	ldr	r1, [pc, #204]	; (8002fcc <printRadioSettings+0x348>)
 8002efe:	a807      	add	r0, sp, #28
 8002f00:	f007 fc92 	bl	800a828 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002f04:	a807      	add	r0, sp, #28
 8002f06:	f7fd f96b 	bl	80001e0 <strlen>
 8002f0a:	230a      	movs	r3, #10
 8002f0c:	b282      	uxth	r2, r0
 8002f0e:	a907      	add	r1, sp, #28
 8002f10:	4620      	mov	r0, r4
 8002f12:	f003 f8bb 	bl	800608c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8002f16:	2201      	movs	r2, #1
 8002f18:	a905      	add	r1, sp, #20
 8002f1a:	200f      	movs	r0, #15
 8002f1c:	f7ff fb9a 	bl	8002654 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002f20:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002f24:	492a      	ldr	r1, [pc, #168]	; (8002fd0 <printRadioSettings+0x34c>)
 8002f26:	a807      	add	r0, sp, #28
 8002f28:	f007 fc7e 	bl	800a828 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002f2c:	a807      	add	r0, sp, #28
 8002f2e:	f7fd f957 	bl	80001e0 <strlen>
 8002f32:	230a      	movs	r3, #10
 8002f34:	b282      	uxth	r2, r0
 8002f36:	a907      	add	r1, sp, #28
 8002f38:	4620      	mov	r0, r4
 8002f3a:	f003 f8a7 	bl	800608c <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8002f3e:	2205      	movs	r2, #5
 8002f40:	a905      	add	r1, sp, #20
 8002f42:	2010      	movs	r0, #16
 8002f44:	f7ff fb86 	bl	8002654 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002f48:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8002f4c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002f50:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8002f54:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8002f58:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8002f5c:	9502      	str	r5, [sp, #8]
 8002f5e:	9001      	str	r0, [sp, #4]
 8002f60:	9100      	str	r1, [sp, #0]
 8002f62:	491c      	ldr	r1, [pc, #112]	; (8002fd4 <printRadioSettings+0x350>)
 8002f64:	a807      	add	r0, sp, #28
 8002f66:	f007 fc5f 	bl	800a828 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002f6a:	a807      	add	r0, sp, #28
 8002f6c:	f7fd f938 	bl	80001e0 <strlen>
 8002f70:	230a      	movs	r3, #10
 8002f72:	b282      	uxth	r2, r0
 8002f74:	a907      	add	r1, sp, #28
 8002f76:	4620      	mov	r0, r4
 8002f78:	f003 f888 	bl	800608c <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8002f7c:	2011      	movs	r0, #17
 8002f7e:	f7ff fb37 	bl	80025f0 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002f82:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002f86:	4914      	ldr	r1, [pc, #80]	; (8002fd8 <printRadioSettings+0x354>)
 8002f88:	a807      	add	r0, sp, #28
 8002f8a:	f007 fc4d 	bl	800a828 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002f8e:	a807      	add	r0, sp, #28
 8002f90:	f7fd f926 	bl	80001e0 <strlen>
 8002f94:	230a      	movs	r3, #10
 8002f96:	b282      	uxth	r2, r0
 8002f98:	e020      	b.n	8002fdc <printRadioSettings+0x358>
 8002f9a:	bf00      	nop
 8002f9c:	0800e1ec 	.word	0x0800e1ec
 8002fa0:	200002cc 	.word	0x200002cc
 8002fa4:	0800e220 	.word	0x0800e220
 8002fa8:	0800e26c 	.word	0x0800e26c
 8002fac:	0800e2b0 	.word	0x0800e2b0
 8002fb0:	0800e2fc 	.word	0x0800e2fc
 8002fb4:	0800e318 	.word	0x0800e318
 8002fb8:	0800e32c 	.word	0x0800e32c
 8002fbc:	0800e3ac 	.word	0x0800e3ac
 8002fc0:	0800e3dc 	.word	0x0800e3dc
 8002fc4:	0800e40c 	.word	0x0800e40c
 8002fc8:	0800e434 	.word	0x0800e434
 8002fcc:	0800e45c 	.word	0x0800e45c
 8002fd0:	0800e484 	.word	0x0800e484
 8002fd4:	0800e4ac 	.word	0x0800e4ac
 8002fd8:	0800e4d8 	.word	0x0800e4d8
 8002fdc:	a907      	add	r1, sp, #28
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f003 f854 	bl	800608c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8002fe4:	2012      	movs	r0, #18
 8002fe6:	f7ff fb03 	bl	80025f0 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002fea:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002fee:	498a      	ldr	r1, [pc, #552]	; (8003218 <printRadioSettings+0x594>)
 8002ff0:	a807      	add	r0, sp, #28
 8002ff2:	f007 fc19 	bl	800a828 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002ff6:	a807      	add	r0, sp, #28
 8002ff8:	f7fd f8f2 	bl	80001e0 <strlen>
 8002ffc:	230a      	movs	r3, #10
 8002ffe:	b282      	uxth	r2, r0
 8003000:	a907      	add	r1, sp, #28
 8003002:	4620      	mov	r0, r4
 8003004:	f003 f842 	bl	800608c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8003008:	2013      	movs	r0, #19
 800300a:	f7ff faf1 	bl	80025f0 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800300e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8003012:	4982      	ldr	r1, [pc, #520]	; (800321c <printRadioSettings+0x598>)
 8003014:	a807      	add	r0, sp, #28
 8003016:	f007 fc07 	bl	800a828 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800301a:	a807      	add	r0, sp, #28
 800301c:	f7fd f8e0 	bl	80001e0 <strlen>
 8003020:	230a      	movs	r3, #10
 8003022:	b282      	uxth	r2, r0
 8003024:	a907      	add	r1, sp, #28
 8003026:	4620      	mov	r0, r4
 8003028:	f003 f830 	bl	800608c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 800302c:	2014      	movs	r0, #20
 800302e:	f7ff fadf 	bl	80025f0 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8003032:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8003036:	497a      	ldr	r1, [pc, #488]	; (8003220 <printRadioSettings+0x59c>)
 8003038:	a807      	add	r0, sp, #28
 800303a:	f007 fbf5 	bl	800a828 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800303e:	a807      	add	r0, sp, #28
 8003040:	f7fd f8ce 	bl	80001e0 <strlen>
 8003044:	230a      	movs	r3, #10
 8003046:	b282      	uxth	r2, r0
 8003048:	a907      	add	r1, sp, #28
 800304a:	4620      	mov	r0, r4
 800304c:	f003 f81e 	bl	800608c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8003050:	2015      	movs	r0, #21
 8003052:	f7ff facd 	bl	80025f0 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8003056:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 800305a:	4972      	ldr	r1, [pc, #456]	; (8003224 <printRadioSettings+0x5a0>)
 800305c:	a807      	add	r0, sp, #28
 800305e:	f007 fbe3 	bl	800a828 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003062:	a807      	add	r0, sp, #28
 8003064:	f7fd f8bc 	bl	80001e0 <strlen>
 8003068:	230a      	movs	r3, #10
 800306a:	b282      	uxth	r2, r0
 800306c:	a907      	add	r1, sp, #28
 800306e:	4620      	mov	r0, r4
 8003070:	f003 f80c 	bl	800608c <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8003074:	2016      	movs	r0, #22
 8003076:	f7ff fabb 	bl	80025f0 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800307a:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 800307e:	496a      	ldr	r1, [pc, #424]	; (8003228 <printRadioSettings+0x5a4>)
 8003080:	a807      	add	r0, sp, #28
 8003082:	f007 fbd1 	bl	800a828 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003086:	a807      	add	r0, sp, #28
 8003088:	f7fd f8aa 	bl	80001e0 <strlen>
 800308c:	230a      	movs	r3, #10
 800308e:	b282      	uxth	r2, r0
 8003090:	a907      	add	r1, sp, #28
 8003092:	4620      	mov	r0, r4
 8003094:	f002 fffa 	bl	800608c <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8003098:	201c      	movs	r0, #28
 800309a:	f7ff faa9 	bl	80025f0 <NRF24_read_register>
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800309e:	f3c0 1340 	ubfx	r3, r0, #5, #1
 80030a2:	9303      	str	r3, [sp, #12]
 80030a4:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80030a8:	9302      	str	r3, [sp, #8]
 80030aa:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80030ae:	9301      	str	r3, [sp, #4]
 80030b0:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	f3c0 0340 	ubfx	r3, r0, #1, #1
 80030ba:	f000 0201 	and.w	r2, r0, #1
 80030be:	495b      	ldr	r1, [pc, #364]	; (800322c <printRadioSettings+0x5a8>)
 80030c0:	a807      	add	r0, sp, #28
 80030c2:	f007 fbb1 	bl	800a828 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80030c6:	a807      	add	r0, sp, #28
 80030c8:	f7fd f88a 	bl	80001e0 <strlen>
 80030cc:	230a      	movs	r3, #10
 80030ce:	b282      	uxth	r2, r0
 80030d0:	a907      	add	r1, sp, #28
 80030d2:	4620      	mov	r0, r4
 80030d4:	f002 ffda 	bl	800608c <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80030d8:	201d      	movs	r0, #29
 80030da:	f7ff fa89 	bl	80025f0 <NRF24_read_register>
 80030de:	4606      	mov	r6, r0
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80030e0:	f010 0f04 	tst.w	r0, #4
 80030e4:	f000 8081 	beq.w	80031ea <printRadioSettings+0x566>
 80030e8:	ac07      	add	r4, sp, #28
 80030ea:	4d51      	ldr	r5, [pc, #324]	; (8003230 <printRadioSettings+0x5ac>)
 80030ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80030f4:	f844 0b04 	str.w	r0, [r4], #4
 80030f8:	8021      	strh	r1, [r4, #0]
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80030fa:	a807      	add	r0, sp, #28
 80030fc:	f7fd f870 	bl	80001e0 <strlen>
 8003100:	230a      	movs	r3, #10
 8003102:	b282      	uxth	r2, r0
 8003104:	a907      	add	r1, sp, #28
 8003106:	484b      	ldr	r0, [pc, #300]	; (8003234 <printRadioSettings+0x5b0>)
 8003108:	f002 ffc0 	bl	800608c <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800310c:	f016 0f02 	tst.w	r6, #2
 8003110:	d178      	bne.n	8003204 <printRadioSettings+0x580>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8003112:	ac07      	add	r4, sp, #28
 8003114:	4d48      	ldr	r5, [pc, #288]	; (8003238 <printRadioSettings+0x5b4>)
 8003116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800311a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800311e:	c403      	stmia	r4!, {r0, r1}
 8003120:	f824 2b02 	strh.w	r2, [r4], #2
 8003124:	0c12      	lsrs	r2, r2, #16
 8003126:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003128:	a807      	add	r0, sp, #28
 800312a:	f7fd f859 	bl	80001e0 <strlen>
 800312e:	4e41      	ldr	r6, [pc, #260]	; (8003234 <printRadioSettings+0x5b0>)
 8003130:	230a      	movs	r3, #10
 8003132:	b282      	uxth	r2, r0
 8003134:	a907      	add	r1, sp, #28
 8003136:	4630      	mov	r0, r6
 8003138:	f002 ffa8 	bl	800608c <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800313c:	ac07      	add	r4, sp, #28
 800313e:	4d3f      	ldr	r5, [pc, #252]	; (800323c <printRadioSettings+0x5b8>)
 8003140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800314a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800314c:	682b      	ldr	r3, [r5, #0]
 800314e:	f824 3b02 	strh.w	r3, [r4], #2
 8003152:	0c1b      	lsrs	r3, r3, #16
 8003154:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003156:	a807      	add	r0, sp, #28
 8003158:	f7fd f842 	bl	80001e0 <strlen>
 800315c:	230a      	movs	r3, #10
 800315e:	b282      	uxth	r2, r0
 8003160:	a907      	add	r1, sp, #28
 8003162:	4630      	mov	r0, r6
 8003164:	f002 ff92 	bl	800608c <HAL_UART_Transmit>
}
 8003168:	b020      	add	sp, #128	; 0x80
 800316a:	bd70      	pop	{r4, r5, r6, pc}
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 800316c:	ac07      	add	r4, sp, #28
 800316e:	4d34      	ldr	r5, [pc, #208]	; (8003240 <printRadioSettings+0x5bc>)
 8003170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003174:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003178:	c403      	stmia	r4!, {r0, r1}
 800317a:	f824 2b02 	strh.w	r2, [r4], #2
 800317e:	0c12      	lsrs	r2, r2, #16
 8003180:	7022      	strb	r2, [r4, #0]
 8003182:	e5aa      	b.n	8002cda <printRadioSettings+0x56>
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8003184:	ac07      	add	r4, sp, #28
 8003186:	4d2f      	ldr	r5, [pc, #188]	; (8003244 <printRadioSettings+0x5c0>)
 8003188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800318a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800318c:	682b      	ldr	r3, [r5, #0]
 800318e:	6023      	str	r3, [r4, #0]
 8003190:	e5a3      	b.n	8002cda <printRadioSettings+0x56>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8003192:	ad07      	add	r5, sp, #28
 8003194:	4e2c      	ldr	r6, [pc, #176]	; (8003248 <printRadioSettings+0x5c4>)
 8003196:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800319a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800319e:	f845 0b04 	str.w	r0, [r5], #4
 80031a2:	f825 1b02 	strh.w	r1, [r5], #2
 80031a6:	0c09      	lsrs	r1, r1, #16
 80031a8:	7029      	strb	r1, [r5, #0]
 80031aa:	e619      	b.n	8002de0 <printRadioSettings+0x15c>
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80031ac:	ac07      	add	r4, sp, #28
 80031ae:	4d27      	ldr	r5, [pc, #156]	; (800324c <printRadioSettings+0x5c8>)
 80031b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031b4:	682b      	ldr	r3, [r5, #0]
 80031b6:	6023      	str	r3, [r4, #0]
 80031b8:	e629      	b.n	8002e0e <printRadioSettings+0x18a>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80031ba:	ac07      	add	r4, sp, #28
 80031bc:	4d24      	ldr	r5, [pc, #144]	; (8003250 <printRadioSettings+0x5cc>)
 80031be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031c2:	682b      	ldr	r3, [r5, #0]
 80031c4:	6023      	str	r3, [r4, #0]
 80031c6:	e622      	b.n	8002e0e <printRadioSettings+0x18a>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80031c8:	ac07      	add	r4, sp, #28
 80031ca:	4d22      	ldr	r5, [pc, #136]	; (8003254 <printRadioSettings+0x5d0>)
 80031cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031d0:	682b      	ldr	r3, [r5, #0]
 80031d2:	f824 3b02 	strh.w	r3, [r4], #2
 80031d6:	0c1b      	lsrs	r3, r3, #16
 80031d8:	7023      	strb	r3, [r4, #0]
 80031da:	e618      	b.n	8002e0e <printRadioSettings+0x18a>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80031dc:	ac07      	add	r4, sp, #28
 80031de:	4d1e      	ldr	r5, [pc, #120]	; (8003258 <printRadioSettings+0x5d4>)
 80031e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031e4:	682b      	ldr	r3, [r5, #0]
 80031e6:	8023      	strh	r3, [r4, #0]
 80031e8:	e611      	b.n	8002e0e <printRadioSettings+0x18a>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80031ea:	ac07      	add	r4, sp, #28
 80031ec:	4d1b      	ldr	r5, [pc, #108]	; (800325c <printRadioSettings+0x5d8>)
 80031ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031f6:	f844 0b04 	str.w	r0, [r4], #4
 80031fa:	f824 1b02 	strh.w	r1, [r4], #2
 80031fe:	0c09      	lsrs	r1, r1, #16
 8003200:	7021      	strb	r1, [r4, #0]
 8003202:	e77a      	b.n	80030fa <printRadioSettings+0x476>
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8003204:	ac07      	add	r4, sp, #28
 8003206:	4d16      	ldr	r5, [pc, #88]	; (8003260 <printRadioSettings+0x5dc>)
 8003208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800320a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800320c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003210:	c403      	stmia	r4!, {r0, r1}
 8003212:	8022      	strh	r2, [r4, #0]
 8003214:	e788      	b.n	8003128 <printRadioSettings+0x4a4>
 8003216:	bf00      	nop
 8003218:	0800e4f4 	.word	0x0800e4f4
 800321c:	0800e510 	.word	0x0800e510
 8003220:	0800e52c 	.word	0x0800e52c
 8003224:	0800e548 	.word	0x0800e548
 8003228:	0800e564 	.word	0x0800e564
 800322c:	0800e580 	.word	0x0800e580
 8003230:	0800e5cc 	.word	0x0800e5cc
 8003234:	200002cc 	.word	0x200002cc
 8003238:	0800e618 	.word	0x0800e618
 800323c:	0800e1ec 	.word	0x0800e1ec
 8003240:	0800e23c 	.word	0x0800e23c
 8003244:	0800e258 	.word	0x0800e258
 8003248:	0800e344 	.word	0x0800e344
 800324c:	0800e35c 	.word	0x0800e35c
 8003250:	0800e370 	.word	0x0800e370
 8003254:	0800e384 	.word	0x0800e384
 8003258:	0800e398 	.word	0x0800e398
 800325c:	0800e5e4 	.word	0x0800e5e4
 8003260:	0800e5fc 	.word	0x0800e5fc

08003264 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8003264:	b084      	sub	sp, #16
 8003266:	b430      	push	{r4, r5}
 8003268:	ac02      	add	r4, sp, #8
 800326a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800326e:	4c07      	ldr	r4, [pc, #28]	; (800328c <nrf24_DebugUART_Init+0x28>)
 8003270:	ad02      	add	r5, sp, #8
 8003272:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800327a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800327c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800327e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003282:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003286:	bc30      	pop	{r4, r5}
 8003288:	b004      	add	sp, #16
 800328a:	4770      	bx	lr
 800328c:	200002cc 	.word	0x200002cc

08003290 <HAL_SPI_TxCpltCallback>:




void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
	SPI_TxCplt = 1;
 8003290:	4b01      	ldr	r3, [pc, #4]	; (8003298 <HAL_SPI_TxCpltCallback+0x8>)
 8003292:	2201      	movs	r2, #1
 8003294:	701a      	strb	r2, [r3, #0]
}
 8003296:	4770      	bx	lr
 8003298:	200002c1 	.word	0x200002c1

0800329c <HAL_SPI_RxCpltCallback>:



void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
	SPI_RxCplt = 1;
 800329c:	4b01      	ldr	r3, [pc, #4]	; (80032a4 <HAL_SPI_RxCpltCallback+0x8>)
 800329e:	2201      	movs	r2, #1
 80032a0:	701a      	strb	r2, [r3, #0]
}
 80032a2:	4770      	bx	lr
 80032a4:	200002c0 	.word	0x200002c0

080032a8 <pid_calculate_roll>:

/** roll PID Calculation **/
float pid_calculate_roll(float IMU_roll_value, int timer_value, float roll_setpoint) {

	//Calculate error
	roll_error = IMU_roll_value - roll_setpoint;
 80032a8:	ee70 0a60 	vsub.f32	s1, s0, s1
 80032ac:	4b29      	ldr	r3, [pc, #164]	; (8003354 <pid_calculate_roll+0xac>)
 80032ae:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	roll_p = roll_p_gain * roll_error;
 80032b2:	4b29      	ldr	r3, [pc, #164]	; (8003358 <pid_calculate_roll+0xb0>)
 80032b4:	edd3 6a00 	vldr	s13, [r3]
 80032b8:	ee60 6aa6 	vmul.f32	s13, s1, s13
 80032bc:	4b27      	ldr	r3, [pc, #156]	; (800335c <pid_calculate_roll+0xb4>)
 80032be:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	roll_i += (roll_i_gain * roll_error * delta_t);
 80032c2:	4b27      	ldr	r3, [pc, #156]	; (8003360 <pid_calculate_roll+0xb8>)
 80032c4:	edd3 7a00 	vldr	s15, [r3]
 80032c8:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80032cc:	eddf 5a25 	vldr	s11, [pc, #148]	; 8003364 <pid_calculate_roll+0xbc>
 80032d0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80032d4:	4b24      	ldr	r3, [pc, #144]	; (8003368 <pid_calculate_roll+0xc0>)
 80032d6:	ed93 7a00 	vldr	s14, [r3]
 80032da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032de:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / delta_t);
 80032e2:	4b22      	ldr	r3, [pc, #136]	; (800336c <pid_calculate_roll+0xc4>)
 80032e4:	ed93 6a00 	vldr	s12, [r3]
 80032e8:	ee30 6ac6 	vsub.f32	s12, s1, s12
 80032ec:	ee86 7a25 	vdiv.f32	s14, s12, s11
 80032f0:	4a1f      	ldr	r2, [pc, #124]	; (8003370 <pid_calculate_roll+0xc8>)
 80032f2:	ed92 6a00 	vldr	s12, [r2]
 80032f6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80032fa:	4a1e      	ldr	r2, [pc, #120]	; (8003374 <pid_calculate_roll+0xcc>)
 80032fc:	ed82 7a00 	vstr	s14, [r2]
	roll_last_d_error = roll_error;
 8003300:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	roll_output = roll_p + roll_i + roll_d;
 8003304:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800330c:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <pid_calculate_roll+0xd0>)
 800330e:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (roll_output < -roll_pid_clip) {
 8003312:	4b1a      	ldr	r3, [pc, #104]	; (800337c <pid_calculate_roll+0xd4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	425a      	negs	r2, r3
 8003318:	ee07 2a10 	vmov	s14, r2
 800331c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003320:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003328:	d40c      	bmi.n	8003344 <pid_calculate_roll+0x9c>
		roll_output = -roll_pid_clip;
	} else if (roll_output > roll_pid_clip) {
 800332a:	ee07 3a10 	vmov	s14, r3
 800332e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333a:	dd06      	ble.n	800334a <pid_calculate_roll+0xa2>
		roll_output = roll_pid_clip;
 800333c:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <pid_calculate_roll+0xd0>)
 800333e:	ed83 7a00 	vstr	s14, [r3]
 8003342:	e002      	b.n	800334a <pid_calculate_roll+0xa2>
		roll_output = -roll_pid_clip;
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <pid_calculate_roll+0xd0>)
 8003346:	ed83 7a00 	vstr	s14, [r3]
	}

	return roll_output;
}
 800334a:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <pid_calculate_roll+0xd0>)
 800334c:	ed93 0a00 	vldr	s0, [r3]
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	20000324 	.word	0x20000324
 8003358:	2000002c 	.word	0x2000002c
 800335c:	20004458 	.word	0x20004458
 8003360:	20000028 	.word	0x20000028
 8003364:	3b012912 	.word	0x3b012912
 8003368:	20004464 	.word	0x20004464
 800336c:	20000328 	.word	0x20000328
 8003370:	20000024 	.word	0x20000024
 8003374:	20004444 	.word	0x20004444
 8003378:	2000032c 	.word	0x2000032c
 800337c:	20000030 	.word	0x20000030

08003380 <reset_pid_roll>:

void reset_pid_roll(){

	roll_p = 0;
 8003380:	2300      	movs	r3, #0
 8003382:	4a04      	ldr	r2, [pc, #16]	; (8003394 <reset_pid_roll+0x14>)
 8003384:	6013      	str	r3, [r2, #0]
	roll_i = 0;
 8003386:	4a04      	ldr	r2, [pc, #16]	; (8003398 <reset_pid_roll+0x18>)
 8003388:	6013      	str	r3, [r2, #0]
	roll_d = 0;
 800338a:	4a04      	ldr	r2, [pc, #16]	; (800339c <reset_pid_roll+0x1c>)
 800338c:	6013      	str	r3, [r2, #0]
	roll_output = 0;
 800338e:	4a04      	ldr	r2, [pc, #16]	; (80033a0 <reset_pid_roll+0x20>)
 8003390:	6013      	str	r3, [r2, #0]

}
 8003392:	4770      	bx	lr
 8003394:	20004458 	.word	0x20004458
 8003398:	20004464 	.word	0x20004464
 800339c:	20004444 	.word	0x20004444
 80033a0:	2000032c 	.word	0x2000032c

080033a4 <pid_calculate_pitch>:

/** Pitch PID Calculation **/
float pid_calculate_pitch(float IMU_pitch_value, int timer_value, float pitch_setpoint) {

	//Calculate error
	pitch_error = IMU_pitch_value - pitch_setpoint;
 80033a4:	ee70 0a60 	vsub.f32	s1, s0, s1
 80033a8:	4b29      	ldr	r3, [pc, #164]	; (8003450 <pid_calculate_pitch+0xac>)
 80033aa:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 80033ae:	4b29      	ldr	r3, [pc, #164]	; (8003454 <pid_calculate_pitch+0xb0>)
 80033b0:	edd3 6a00 	vldr	s13, [r3]
 80033b4:	ee60 6aa6 	vmul.f32	s13, s1, s13
 80033b8:	4b27      	ldr	r3, [pc, #156]	; (8003458 <pid_calculate_pitch+0xb4>)
 80033ba:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	pitch_i += (pitch_i_gain * pitch_error * delta_t);
 80033be:	4b27      	ldr	r3, [pc, #156]	; (800345c <pid_calculate_pitch+0xb8>)
 80033c0:	edd3 7a00 	vldr	s15, [r3]
 80033c4:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80033c8:	eddf 5a25 	vldr	s11, [pc, #148]	; 8003460 <pid_calculate_pitch+0xbc>
 80033cc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80033d0:	4b24      	ldr	r3, [pc, #144]	; (8003464 <pid_calculate_pitch+0xc0>)
 80033d2:	ed93 7a00 	vldr	s14, [r3]
 80033d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033da:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	pitch_d = pitch_d_gain * ( (pitch_error - pitch_last_d_error) / delta_t);
 80033de:	4b22      	ldr	r3, [pc, #136]	; (8003468 <pid_calculate_pitch+0xc4>)
 80033e0:	ed93 6a00 	vldr	s12, [r3]
 80033e4:	ee30 6ac6 	vsub.f32	s12, s1, s12
 80033e8:	ee86 7a25 	vdiv.f32	s14, s12, s11
 80033ec:	4a1f      	ldr	r2, [pc, #124]	; (800346c <pid_calculate_pitch+0xc8>)
 80033ee:	ed92 6a00 	vldr	s12, [r2]
 80033f2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80033f6:	4a1e      	ldr	r2, [pc, #120]	; (8003470 <pid_calculate_pitch+0xcc>)
 80033f8:	ed82 7a00 	vstr	s14, [r2]
	pitch_last_d_error = pitch_error;
 80033fc:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 8003400:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003408:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <pid_calculate_pitch+0xd0>)
 800340a:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (pitch_output < -pitch_pid_clip) {
 800340e:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <pid_calculate_pitch+0xd4>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	425a      	negs	r2, r3
 8003414:	ee07 2a10 	vmov	s14, r2
 8003418:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800341c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003424:	d40c      	bmi.n	8003440 <pid_calculate_pitch+0x9c>
		pitch_output = -pitch_pid_clip;
	} else if (pitch_output > pitch_pid_clip) {
 8003426:	ee07 3a10 	vmov	s14, r3
 800342a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800342e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003436:	dd06      	ble.n	8003446 <pid_calculate_pitch+0xa2>
		pitch_output = pitch_pid_clip;
 8003438:	4b0e      	ldr	r3, [pc, #56]	; (8003474 <pid_calculate_pitch+0xd0>)
 800343a:	ed83 7a00 	vstr	s14, [r3]
 800343e:	e002      	b.n	8003446 <pid_calculate_pitch+0xa2>
		pitch_output = -pitch_pid_clip;
 8003440:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <pid_calculate_pitch+0xd0>)
 8003442:	ed83 7a00 	vstr	s14, [r3]
	}

	return pitch_output;
}
 8003446:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <pid_calculate_pitch+0xd0>)
 8003448:	ed93 0a00 	vldr	s0, [r3]
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	20000318 	.word	0x20000318
 8003454:	2000001c 	.word	0x2000001c
 8003458:	20004450 	.word	0x20004450
 800345c:	20000018 	.word	0x20000018
 8003460:	3b012912 	.word	0x3b012912
 8003464:	20004454 	.word	0x20004454
 8003468:	2000031c 	.word	0x2000031c
 800346c:	20000014 	.word	0x20000014
 8003470:	20004448 	.word	0x20004448
 8003474:	20000320 	.word	0x20000320
 8003478:	20000020 	.word	0x20000020

0800347c <reset_pid_pitch>:

void reset_pid_pitch(){

	pitch_p = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	4a04      	ldr	r2, [pc, #16]	; (8003490 <reset_pid_pitch+0x14>)
 8003480:	6013      	str	r3, [r2, #0]
	pitch_i = 0;
 8003482:	4a04      	ldr	r2, [pc, #16]	; (8003494 <reset_pid_pitch+0x18>)
 8003484:	6013      	str	r3, [r2, #0]
	pitch_d = 0;
 8003486:	4a04      	ldr	r2, [pc, #16]	; (8003498 <reset_pid_pitch+0x1c>)
 8003488:	6013      	str	r3, [r2, #0]
	pitch_output = 0;
 800348a:	4a04      	ldr	r2, [pc, #16]	; (800349c <reset_pid_pitch+0x20>)
 800348c:	6013      	str	r3, [r2, #0]

}
 800348e:	4770      	bx	lr
 8003490:	20004450 	.word	0x20004450
 8003494:	20004454 	.word	0x20004454
 8003498:	20004448 	.word	0x20004448
 800349c:	20000320 	.word	0x20000320

080034a0 <pid_calculate_yaw>:

/** yaw PID Calculation **/
float pid_calculate_yaw(float IMU_yaw_value, int timer_value, float yaw_setpoint) {

	//Calculate error
	yaw_error = IMU_yaw_value - yaw_setpoint;
 80034a0:	ee70 0a60 	vsub.f32	s1, s0, s1
 80034a4:	4b29      	ldr	r3, [pc, #164]	; (800354c <pid_calculate_yaw+0xac>)
 80034a6:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	yaw_p = yaw_p_gain * yaw_error;
 80034aa:	4b29      	ldr	r3, [pc, #164]	; (8003550 <pid_calculate_yaw+0xb0>)
 80034ac:	edd3 6a00 	vldr	s13, [r3]
 80034b0:	ee60 6aa6 	vmul.f32	s13, s1, s13
 80034b4:	4b27      	ldr	r3, [pc, #156]	; (8003554 <pid_calculate_yaw+0xb4>)
 80034b6:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	yaw_i += (yaw_i_gain * yaw_error * delta_t);
 80034ba:	4b27      	ldr	r3, [pc, #156]	; (8003558 <pid_calculate_yaw+0xb8>)
 80034bc:	edd3 7a00 	vldr	s15, [r3]
 80034c0:	ee60 7aa7 	vmul.f32	s15, s1, s15
 80034c4:	eddf 5a25 	vldr	s11, [pc, #148]	; 800355c <pid_calculate_yaw+0xbc>
 80034c8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80034cc:	4b24      	ldr	r3, [pc, #144]	; (8003560 <pid_calculate_yaw+0xc0>)
 80034ce:	ed93 7a00 	vldr	s14, [r3]
 80034d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034d6:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	yaw_d = yaw_d_gain * ( (yaw_error - yaw_last_d_error) / delta_t);
 80034da:	4b22      	ldr	r3, [pc, #136]	; (8003564 <pid_calculate_yaw+0xc4>)
 80034dc:	ed93 6a00 	vldr	s12, [r3]
 80034e0:	ee30 6ac6 	vsub.f32	s12, s1, s12
 80034e4:	ee86 7a25 	vdiv.f32	s14, s12, s11
 80034e8:	4a1f      	ldr	r2, [pc, #124]	; (8003568 <pid_calculate_yaw+0xc8>)
 80034ea:	ed92 6a00 	vldr	s12, [r2]
 80034ee:	ee27 7a06 	vmul.f32	s14, s14, s12
 80034f2:	4a1e      	ldr	r2, [pc, #120]	; (800356c <pid_calculate_yaw+0xcc>)
 80034f4:	ed82 7a00 	vstr	s14, [r2]
	yaw_last_d_error = yaw_error;
 80034f8:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	yaw_output = yaw_p + yaw_i + yaw_d;
 80034fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003504:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <pid_calculate_yaw+0xd0>)
 8003506:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (yaw_output < -yaw_pid_clip) {
 800350a:	4b1a      	ldr	r3, [pc, #104]	; (8003574 <pid_calculate_yaw+0xd4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	425a      	negs	r2, r3
 8003510:	ee07 2a10 	vmov	s14, r2
 8003514:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800351c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003520:	d40c      	bmi.n	800353c <pid_calculate_yaw+0x9c>
		yaw_output = -yaw_pid_clip;
	} else if (yaw_output > yaw_pid_clip) {
 8003522:	ee07 3a10 	vmov	s14, r3
 8003526:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800352a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800352e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003532:	dd06      	ble.n	8003542 <pid_calculate_yaw+0xa2>
		yaw_output = yaw_pid_clip;
 8003534:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <pid_calculate_yaw+0xd0>)
 8003536:	ed83 7a00 	vstr	s14, [r3]
 800353a:	e002      	b.n	8003542 <pid_calculate_yaw+0xa2>
		yaw_output = -yaw_pid_clip;
 800353c:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <pid_calculate_yaw+0xd0>)
 800353e:	ed83 7a00 	vstr	s14, [r3]
	}

	return yaw_output;
}
 8003542:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <pid_calculate_yaw+0xd0>)
 8003544:	ed93 0a00 	vldr	s0, [r3]
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20000330 	.word	0x20000330
 8003550:	2000003c 	.word	0x2000003c
 8003554:	20004460 	.word	0x20004460
 8003558:	20000038 	.word	0x20000038
 800355c:	3b012912 	.word	0x3b012912
 8003560:	2000445c 	.word	0x2000445c
 8003564:	20000334 	.word	0x20000334
 8003568:	20000034 	.word	0x20000034
 800356c:	2000444c 	.word	0x2000444c
 8003570:	20000338 	.word	0x20000338
 8003574:	20000040 	.word	0x20000040

08003578 <reset_pid_yaw>:

void reset_pid_yaw(){

	yaw_p = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	4a04      	ldr	r2, [pc, #16]	; (800358c <reset_pid_yaw+0x14>)
 800357c:	6013      	str	r3, [r2, #0]
	yaw_i = 0;
 800357e:	4a04      	ldr	r2, [pc, #16]	; (8003590 <reset_pid_yaw+0x18>)
 8003580:	6013      	str	r3, [r2, #0]
	yaw_d = 0;
 8003582:	4a04      	ldr	r2, [pc, #16]	; (8003594 <reset_pid_yaw+0x1c>)
 8003584:	6013      	str	r3, [r2, #0]
	yaw_output = 0;
 8003586:	4a04      	ldr	r2, [pc, #16]	; (8003598 <reset_pid_yaw+0x20>)
 8003588:	6013      	str	r3, [r2, #0]

}
 800358a:	4770      	bx	lr
 800358c:	20004460 	.word	0x20004460
 8003590:	2000445c 	.word	0x2000445c
 8003594:	2000444c 	.word	0x2000444c
 8003598:	20000338 	.word	0x20000338

0800359c <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800359c:	4a06      	ldr	r2, [pc, #24]	; (80035b8 <DWT_Init+0x1c>)
 800359e:	68d3      	ldr	r3, [r2, #12]
 80035a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a4:	60d3      	str	r3, [r2, #12]
        //DWT->LAR = 0xC5ACCE55;
        DWT->CYCCNT = 0;
 80035a6:	4b05      	ldr	r3, [pc, #20]	; (80035bc <DWT_Init+0x20>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

}
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	e000edf0 	.word	0xe000edf0
 80035bc:	e0001000 	.word	0xe0001000

080035c0 <DWT_Delay>:
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT,
 80035c0:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <DWT_Delay+0x20>)
 80035c2:	685a      	ldr	r2, [r3, #4]
             delayTicks = us * (SystemCoreClock/1000000);
 80035c4:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <DWT_Delay+0x24>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4907      	ldr	r1, [pc, #28]	; (80035e8 <DWT_Delay+0x28>)
 80035ca:	fba1 1303 	umull	r1, r3, r1, r3
 80035ce:	0c9b      	lsrs	r3, r3, #18
 80035d0:	fb00 f003 	mul.w	r0, r0, r3

    while (DWT->CYCCNT - startTick < delayTicks);
 80035d4:	4b02      	ldr	r3, [pc, #8]	; (80035e0 <DWT_Delay+0x20>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	4283      	cmp	r3, r0
 80035dc:	d3fa      	bcc.n	80035d4 <DWT_Delay+0x14>
}
 80035de:	4770      	bx	lr
 80035e0:	e0001000 	.word	0xe0001000
 80035e4:	20000078 	.word	0x20000078
 80035e8:	431bde83 	.word	0x431bde83

080035ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035ec:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035ee:	4b0b      	ldr	r3, [pc, #44]	; (800361c <HAL_Init+0x30>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f6:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035fe:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003606:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003608:	2003      	movs	r0, #3
 800360a:	f000 f9c7 	bl	800399c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800360e:	2000      	movs	r0, #0
 8003610:	f004 fb4c 	bl	8007cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003614:	f004 f97a 	bl	800790c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003618:	2000      	movs	r0, #0
 800361a:	bd08      	pop	{r3, pc}
 800361c:	40023c00 	.word	0x40023c00

08003620 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003620:	4a03      	ldr	r2, [pc, #12]	; (8003630 <HAL_IncTick+0x10>)
 8003622:	6811      	ldr	r1, [r2, #0]
 8003624:	4b03      	ldr	r3, [pc, #12]	; (8003634 <HAL_IncTick+0x14>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	440b      	add	r3, r1
 800362a:	6013      	str	r3, [r2, #0]
}
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20004468 	.word	0x20004468
 8003634:	20000044 	.word	0x20000044

08003638 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003638:	4b01      	ldr	r3, [pc, #4]	; (8003640 <HAL_GetTick+0x8>)
 800363a:	6818      	ldr	r0, [r3, #0]
}
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	20004468 	.word	0x20004468

08003644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003644:	b538      	push	{r3, r4, r5, lr}
 8003646:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003648:	f7ff fff6 	bl	8003638 <HAL_GetTick>
 800364c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800364e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003652:	d002      	beq.n	800365a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003654:	4b04      	ldr	r3, [pc, #16]	; (8003668 <HAL_Delay+0x24>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800365a:	f7ff ffed 	bl	8003638 <HAL_GetTick>
 800365e:	1b40      	subs	r0, r0, r5
 8003660:	42a0      	cmp	r0, r4
 8003662:	d3fa      	bcc.n	800365a <HAL_Delay+0x16>
  {
  }
}
 8003664:	bd38      	pop	{r3, r4, r5, pc}
 8003666:	bf00      	nop
 8003668:	20000044 	.word	0x20000044

0800366c <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800366c:	4b4a      	ldr	r3, [pc, #296]	; (8003798 <ADC_Init+0x12c>)
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003674:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	6841      	ldr	r1, [r0, #4]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800367e:	6802      	ldr	r2, [r0, #0]
 8003680:	6853      	ldr	r3, [r2, #4]
 8003682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003686:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003688:	6802      	ldr	r2, [r0, #0]
 800368a:	6853      	ldr	r3, [r2, #4]
 800368c:	6901      	ldr	r1, [r0, #16]
 800368e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003692:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003694:	6802      	ldr	r2, [r0, #0]
 8003696:	6853      	ldr	r3, [r2, #4]
 8003698:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800369c:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800369e:	6802      	ldr	r2, [r0, #0]
 80036a0:	6853      	ldr	r3, [r2, #4]
 80036a2:	6881      	ldr	r1, [r0, #8]
 80036a4:	430b      	orrs	r3, r1
 80036a6:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036a8:	6802      	ldr	r2, [r0, #0]
 80036aa:	6893      	ldr	r3, [r2, #8]
 80036ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036b0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036b2:	6802      	ldr	r2, [r0, #0]
 80036b4:	6893      	ldr	r3, [r2, #8]
 80036b6:	68c1      	ldr	r1, [r0, #12]
 80036b8:	430b      	orrs	r3, r1
 80036ba:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036bc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80036be:	4b37      	ldr	r3, [pc, #220]	; (800379c <ADC_Init+0x130>)
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d04b      	beq.n	800375c <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036c4:	6802      	ldr	r2, [r0, #0]
 80036c6:	6893      	ldr	r3, [r2, #8]
 80036c8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80036cc:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036ce:	6802      	ldr	r2, [r0, #0]
 80036d0:	6893      	ldr	r3, [r2, #8]
 80036d2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80036d4:	430b      	orrs	r3, r1
 80036d6:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036d8:	6802      	ldr	r2, [r0, #0]
 80036da:	6893      	ldr	r3, [r2, #8]
 80036dc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80036e0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036e2:	6802      	ldr	r2, [r0, #0]
 80036e4:	6893      	ldr	r3, [r2, #8]
 80036e6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80036e8:	430b      	orrs	r3, r1
 80036ea:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036ec:	6802      	ldr	r2, [r0, #0]
 80036ee:	6893      	ldr	r3, [r2, #8]
 80036f0:	f023 0302 	bic.w	r3, r3, #2
 80036f4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036f6:	6802      	ldr	r2, [r0, #0]
 80036f8:	6893      	ldr	r3, [r2, #8]
 80036fa:	7e01      	ldrb	r1, [r0, #24]
 80036fc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8003700:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003702:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d133      	bne.n	8003772 <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800370a:	6802      	ldr	r2, [r0, #0]
 800370c:	6853      	ldr	r3, [r2, #4]
 800370e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003712:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003714:	6802      	ldr	r2, [r0, #0]
 8003716:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003718:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800371c:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800371e:	6801      	ldr	r1, [r0, #0]
 8003720:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8003722:	69c2      	ldr	r2, [r0, #28]
 8003724:	3a01      	subs	r2, #1
 8003726:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800372a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800372c:	6802      	ldr	r2, [r0, #0]
 800372e:	6893      	ldr	r3, [r2, #8]
 8003730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003734:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003736:	6802      	ldr	r2, [r0, #0]
 8003738:	6893      	ldr	r3, [r2, #8]
 800373a:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 800373e:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8003742:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003744:	6802      	ldr	r2, [r0, #0]
 8003746:	6893      	ldr	r3, [r2, #8]
 8003748:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800374c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800374e:	6802      	ldr	r2, [r0, #0]
 8003750:	6893      	ldr	r3, [r2, #8]
 8003752:	6941      	ldr	r1, [r0, #20]
 8003754:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8003758:	6093      	str	r3, [r2, #8]
}
 800375a:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800375c:	6802      	ldr	r2, [r0, #0]
 800375e:	6893      	ldr	r3, [r2, #8]
 8003760:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003764:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003766:	6802      	ldr	r2, [r0, #0]
 8003768:	6893      	ldr	r3, [r2, #8]
 800376a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800376e:	6093      	str	r3, [r2, #8]
 8003770:	e7bc      	b.n	80036ec <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003772:	6802      	ldr	r2, [r0, #0]
 8003774:	6853      	ldr	r3, [r2, #4]
 8003776:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800377a:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800377c:	6802      	ldr	r2, [r0, #0]
 800377e:	6853      	ldr	r3, [r2, #4]
 8003780:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003784:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003786:	6801      	ldr	r1, [r0, #0]
 8003788:	684b      	ldr	r3, [r1, #4]
 800378a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800378c:	3a01      	subs	r2, #1
 800378e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8003792:	604b      	str	r3, [r1, #4]
 8003794:	e7be      	b.n	8003714 <ADC_Init+0xa8>
 8003796:	bf00      	nop
 8003798:	40012300 	.word	0x40012300
 800379c:	0f000001 	.word	0x0f000001

080037a0 <HAL_ADC_Init>:
  if(hadc == NULL)
 80037a0:	b338      	cbz	r0, 80037f2 <HAL_ADC_Init+0x52>
{
 80037a2:	b510      	push	{r4, lr}
 80037a4:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 80037a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80037a8:	b143      	cbz	r3, 80037bc <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037ac:	f013 0f10 	tst.w	r3, #16
 80037b0:	d00b      	beq.n	80037ca <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80037b2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80037b4:	2300      	movs	r3, #0
 80037b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80037ba:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80037bc:	f004 f8c8 	bl	8007950 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80037c0:	2300      	movs	r3, #0
 80037c2:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 80037c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80037c8:	e7ef      	b.n	80037aa <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80037ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80037d0:	f023 0302 	bic.w	r3, r3, #2
 80037d4:	f043 0302 	orr.w	r3, r3, #2
 80037d8:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 80037da:	4620      	mov	r0, r4
 80037dc:	f7ff ff46 	bl	800366c <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80037e0:	2000      	movs	r0, #0
 80037e2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80037e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037e6:	f023 0303 	bic.w	r3, r3, #3
 80037ea:	f043 0301 	orr.w	r3, r3, #1
 80037ee:	6423      	str	r3, [r4, #64]	; 0x40
 80037f0:	e7e0      	b.n	80037b4 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80037f2:	2001      	movs	r0, #1
}
 80037f4:	4770      	bx	lr
	...

080037f8 <HAL_ADC_ConfigChannel>:
{
 80037f8:	b430      	push	{r4, r5}
 80037fa:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003800:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003804:	2b01      	cmp	r3, #1
 8003806:	f000 80bd 	beq.w	8003984 <HAL_ADC_ConfigChannel+0x18c>
 800380a:	2301      	movs	r3, #1
 800380c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003810:	680b      	ldr	r3, [r1, #0]
 8003812:	2b09      	cmp	r3, #9
 8003814:	d93e      	bls.n	8003894 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003816:	6805      	ldr	r5, [r0, #0]
 8003818:	68ea      	ldr	r2, [r5, #12]
 800381a:	b29b      	uxth	r3, r3
 800381c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003820:	3b1e      	subs	r3, #30
 8003822:	2407      	movs	r4, #7
 8003824:	fa04 f303 	lsl.w	r3, r4, r3
 8003828:	ea22 0303 	bic.w	r3, r2, r3
 800382c:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800382e:	6805      	ldr	r5, [r0, #0]
 8003830:	68ea      	ldr	r2, [r5, #12]
 8003832:	688c      	ldr	r4, [r1, #8]
 8003834:	880b      	ldrh	r3, [r1, #0]
 8003836:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800383a:	3b1e      	subs	r3, #30
 800383c:	fa04 f303 	lsl.w	r3, r4, r3
 8003840:	4313      	orrs	r3, r2
 8003842:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8003844:	684b      	ldr	r3, [r1, #4]
 8003846:	2b06      	cmp	r3, #6
 8003848:	d83a      	bhi.n	80038c0 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800384a:	6805      	ldr	r5, [r0, #0]
 800384c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800384e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003852:	3b05      	subs	r3, #5
 8003854:	241f      	movs	r4, #31
 8003856:	fa04 f303 	lsl.w	r3, r4, r3
 800385a:	ea22 0303 	bic.w	r3, r2, r3
 800385e:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003860:	6805      	ldr	r5, [r0, #0]
 8003862:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003864:	684b      	ldr	r3, [r1, #4]
 8003866:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800386a:	3b05      	subs	r3, #5
 800386c:	880c      	ldrh	r4, [r1, #0]
 800386e:	fa04 f303 	lsl.w	r3, r4, r3
 8003872:	4313      	orrs	r3, r2
 8003874:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003876:	6802      	ldr	r2, [r0, #0]
 8003878:	4b43      	ldr	r3, [pc, #268]	; (8003988 <HAL_ADC_ConfigChannel+0x190>)
 800387a:	429a      	cmp	r2, r3
 800387c:	d050      	beq.n	8003920 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800387e:	6802      	ldr	r2, [r0, #0]
 8003880:	4b41      	ldr	r3, [pc, #260]	; (8003988 <HAL_ADC_ConfigChannel+0x190>)
 8003882:	429a      	cmp	r2, r3
 8003884:	d059      	beq.n	800393a <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 8003886:	2300      	movs	r3, #0
 8003888:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800388c:	4618      	mov	r0, r3
}
 800388e:	b002      	add	sp, #8
 8003890:	bc30      	pop	{r4, r5}
 8003892:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003894:	6805      	ldr	r5, [r0, #0]
 8003896:	692a      	ldr	r2, [r5, #16]
 8003898:	b29b      	uxth	r3, r3
 800389a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800389e:	2407      	movs	r4, #7
 80038a0:	fa04 f303 	lsl.w	r3, r4, r3
 80038a4:	ea22 0303 	bic.w	r3, r2, r3
 80038a8:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80038aa:	6805      	ldr	r5, [r0, #0]
 80038ac:	692a      	ldr	r2, [r5, #16]
 80038ae:	688c      	ldr	r4, [r1, #8]
 80038b0:	880b      	ldrh	r3, [r1, #0]
 80038b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80038b6:	fa04 f303 	lsl.w	r3, r4, r3
 80038ba:	4313      	orrs	r3, r2
 80038bc:	612b      	str	r3, [r5, #16]
 80038be:	e7c1      	b.n	8003844 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 80038c0:	2b0c      	cmp	r3, #12
 80038c2:	d816      	bhi.n	80038f2 <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038c4:	6805      	ldr	r5, [r0, #0]
 80038c6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80038c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038cc:	3b23      	subs	r3, #35	; 0x23
 80038ce:	241f      	movs	r4, #31
 80038d0:	fa04 f303 	lsl.w	r3, r4, r3
 80038d4:	ea22 0303 	bic.w	r3, r2, r3
 80038d8:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038da:	6805      	ldr	r5, [r0, #0]
 80038dc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80038de:	684b      	ldr	r3, [r1, #4]
 80038e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038e4:	3b23      	subs	r3, #35	; 0x23
 80038e6:	880c      	ldrh	r4, [r1, #0]
 80038e8:	fa04 f303 	lsl.w	r3, r4, r3
 80038ec:	4313      	orrs	r3, r2
 80038ee:	632b      	str	r3, [r5, #48]	; 0x30
 80038f0:	e7c1      	b.n	8003876 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038f2:	6805      	ldr	r5, [r0, #0]
 80038f4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80038f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038fa:	3b41      	subs	r3, #65	; 0x41
 80038fc:	241f      	movs	r4, #31
 80038fe:	fa04 f303 	lsl.w	r3, r4, r3
 8003902:	ea22 0303 	bic.w	r3, r2, r3
 8003906:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003908:	6805      	ldr	r5, [r0, #0]
 800390a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800390c:	684b      	ldr	r3, [r1, #4]
 800390e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003912:	3b41      	subs	r3, #65	; 0x41
 8003914:	880c      	ldrh	r4, [r1, #0]
 8003916:	fa04 f303 	lsl.w	r3, r4, r3
 800391a:	4313      	orrs	r3, r2
 800391c:	62eb      	str	r3, [r5, #44]	; 0x2c
 800391e:	e7aa      	b.n	8003876 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003920:	680b      	ldr	r3, [r1, #0]
 8003922:	2b12      	cmp	r3, #18
 8003924:	d1ab      	bne.n	800387e <HAL_ADC_ConfigChannel+0x86>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003926:	4b19      	ldr	r3, [pc, #100]	; (800398c <HAL_ADC_ConfigChannel+0x194>)
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800392e:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003936:	605a      	str	r2, [r3, #4]
 8003938:	e7a1      	b.n	800387e <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800393a:	680b      	ldr	r3, [r1, #0]
 800393c:	4a14      	ldr	r2, [pc, #80]	; (8003990 <HAL_ADC_ConfigChannel+0x198>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d001      	beq.n	8003946 <HAL_ADC_ConfigChannel+0x14e>
 8003942:	2b11      	cmp	r3, #17
 8003944:	d19f      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003946:	4b11      	ldr	r3, [pc, #68]	; (800398c <HAL_ADC_ConfigChannel+0x194>)
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800394e:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003956:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003958:	680a      	ldr	r2, [r1, #0]
 800395a:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <HAL_ADC_ConfigChannel+0x198>)
 800395c:	429a      	cmp	r2, r3
 800395e:	d192      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003960:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <HAL_ADC_ConfigChannel+0x19c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a0c      	ldr	r2, [pc, #48]	; (8003998 <HAL_ADC_ConfigChannel+0x1a0>)
 8003966:	fba2 2303 	umull	r2, r3, r2, r3
 800396a:	0c9b      	lsrs	r3, r3, #18
 800396c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003970:	005a      	lsls	r2, r3, #1
 8003972:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8003974:	e002      	b.n	800397c <HAL_ADC_ConfigChannel+0x184>
        counter--;
 8003976:	9b01      	ldr	r3, [sp, #4]
 8003978:	3b01      	subs	r3, #1
 800397a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800397c:	9b01      	ldr	r3, [sp, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1f9      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x17e>
 8003982:	e780      	b.n	8003886 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8003984:	2002      	movs	r0, #2
 8003986:	e782      	b.n	800388e <HAL_ADC_ConfigChannel+0x96>
 8003988:	40012000 	.word	0x40012000
 800398c:	40012300 	.word	0x40012300
 8003990:	10000012 	.word	0x10000012
 8003994:	20000078 	.word	0x20000078
 8003998:	431bde83 	.word	0x431bde83

0800399c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800399c:	4a07      	ldr	r2, [pc, #28]	; (80039bc <HAL_NVIC_SetPriorityGrouping+0x20>)
 800399e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80039a4:	041b      	lsls	r3, r3, #16
 80039a6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039a8:	0200      	lsls	r0, r0, #8
 80039aa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039ae:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80039b0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80039b4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80039b8:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80039ba:	4770      	bx	lr
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039c0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039c2:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <HAL_NVIC_SetPriority+0x60>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039ca:	f1c3 0407 	rsb	r4, r3, #7
 80039ce:	2c04      	cmp	r4, #4
 80039d0:	bf28      	it	cs
 80039d2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039d4:	1d1d      	adds	r5, r3, #4
 80039d6:	2d06      	cmp	r5, #6
 80039d8:	d918      	bls.n	8003a0c <HAL_NVIC_SetPriority+0x4c>
 80039da:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80039e0:	fa05 f404 	lsl.w	r4, r5, r4
 80039e4:	ea21 0104 	bic.w	r1, r1, r4
 80039e8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039ea:	fa05 f303 	lsl.w	r3, r5, r3
 80039ee:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80039f4:	2800      	cmp	r0, #0
 80039f6:	db0b      	blt.n	8003a10 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f8:	0109      	lsls	r1, r1, #4
 80039fa:	b2c9      	uxtb	r1, r1
 80039fc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003a00:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003a04:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003a08:	bc30      	pop	{r4, r5}
 8003a0a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	e7e5      	b.n	80039dc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a10:	f000 000f 	and.w	r0, r0, #15
 8003a14:	0109      	lsls	r1, r1, #4
 8003a16:	b2c9      	uxtb	r1, r1
 8003a18:	4b02      	ldr	r3, [pc, #8]	; (8003a24 <HAL_NVIC_SetPriority+0x64>)
 8003a1a:	5419      	strb	r1, [r3, r0]
 8003a1c:	e7f4      	b.n	8003a08 <HAL_NVIC_SetPriority+0x48>
 8003a1e:	bf00      	nop
 8003a20:	e000ed00 	.word	0xe000ed00
 8003a24:	e000ed14 	.word	0xe000ed14

08003a28 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	db07      	blt.n	8003a3c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a2c:	f000 021f 	and.w	r2, r0, #31
 8003a30:	0940      	lsrs	r0, r0, #5
 8003a32:	2301      	movs	r3, #1
 8003a34:	4093      	lsls	r3, r2
 8003a36:	4a02      	ldr	r2, [pc, #8]	; (8003a40 <HAL_NVIC_EnableIRQ+0x18>)
 8003a38:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	e000e100 	.word	0xe000e100

08003a44 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003a44:	b168      	cbz	r0, 8003a62 <HAL_CRC_Init+0x1e>
{
 8003a46:	b510      	push	{r4, lr}
 8003a48:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003a4a:	7943      	ldrb	r3, [r0, #5]
 8003a4c:	b12b      	cbz	r3, 8003a5a <HAL_CRC_Init+0x16>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	7163      	strb	r3, [r4, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003a52:	2301      	movs	r3, #1
 8003a54:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8003a56:	2000      	movs	r0, #0
}
 8003a58:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8003a5a:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8003a5c:	f003 ffac 	bl	80079b8 <HAL_CRC_MspInit>
 8003a60:	e7f5      	b.n	8003a4e <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8003a62:	2001      	movs	r0, #1
}
 8003a64:	4770      	bx	lr

08003a66 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a66:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d003      	beq.n	8003a78 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a70:	2380      	movs	r3, #128	; 0x80
 8003a72:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8003a74:	2001      	movs	r0, #1
 8003a76:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a78:	2305      	movs	r3, #5
 8003a7a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a7e:	6802      	ldr	r2, [r0, #0]
 8003a80:	6813      	ldr	r3, [r2, #0]
 8003a82:	f023 0301 	bic.w	r3, r3, #1
 8003a86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a88:	2000      	movs	r0, #0
}
 8003a8a:	4770      	bx	lr

08003a8c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	2b0f      	cmp	r3, #15
 8003a90:	f200 80c5 	bhi.w	8003c1e <HAL_GPIO_Init+0x192>
{
 8003a94:	b4f0      	push	{r4, r5, r6, r7}
 8003a96:	b082      	sub	sp, #8
 8003a98:	e039      	b.n	8003b0e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	e000      	b.n	8003aa0 <HAL_GPIO_Init+0x14>
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	40b2      	lsls	r2, r6
 8003aa2:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aa4:	3402      	adds	r4, #2
 8003aa6:	4e5e      	ldr	r6, [pc, #376]	; (8003c20 <HAL_GPIO_Init+0x194>)
 8003aa8:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aac:	4a5d      	ldr	r2, [pc, #372]	; (8003c24 <HAL_GPIO_Init+0x198>)
 8003aae:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003ab0:	43ea      	mvns	r2, r5
 8003ab2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ab6:	684f      	ldr	r7, [r1, #4]
 8003ab8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8003abc:	d001      	beq.n	8003ac2 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8003abe:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8003ac2:	4c58      	ldr	r4, [pc, #352]	; (8003c24 <HAL_GPIO_Init+0x198>)
 8003ac4:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8003ac6:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8003ac8:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003acc:	684f      	ldr	r7, [r1, #4]
 8003ace:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003ad2:	d001      	beq.n	8003ad8 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8003ad4:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8003ad8:	4c52      	ldr	r4, [pc, #328]	; (8003c24 <HAL_GPIO_Init+0x198>)
 8003ada:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003adc:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8003ade:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ae2:	684f      	ldr	r7, [r1, #4]
 8003ae4:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003ae8:	d001      	beq.n	8003aee <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8003aea:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8003aee:	4c4d      	ldr	r4, [pc, #308]	; (8003c24 <HAL_GPIO_Init+0x198>)
 8003af0:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8003af2:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8003af4:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003af6:	684e      	ldr	r6, [r1, #4]
 8003af8:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8003afc:	d001      	beq.n	8003b02 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8003afe:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8003b02:	4c48      	ldr	r4, [pc, #288]	; (8003c24 <HAL_GPIO_Init+0x198>)
 8003b04:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b06:	3301      	adds	r3, #1
 8003b08:	2b0f      	cmp	r3, #15
 8003b0a:	f200 8085 	bhi.w	8003c18 <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 8003b0e:	2201      	movs	r2, #1
 8003b10:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b12:	680c      	ldr	r4, [r1, #0]
 8003b14:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8003b18:	42aa      	cmp	r2, r5
 8003b1a:	d1f4      	bne.n	8003b06 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b1c:	684c      	ldr	r4, [r1, #4]
 8003b1e:	2c02      	cmp	r4, #2
 8003b20:	d001      	beq.n	8003b26 <HAL_GPIO_Init+0x9a>
 8003b22:	2c12      	cmp	r4, #18
 8003b24:	d110      	bne.n	8003b48 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8003b26:	08de      	lsrs	r6, r3, #3
 8003b28:	3608      	adds	r6, #8
 8003b2a:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b2e:	f003 0407 	and.w	r4, r3, #7
 8003b32:	00a7      	lsls	r7, r4, #2
 8003b34:	240f      	movs	r4, #15
 8003b36:	40bc      	lsls	r4, r7
 8003b38:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b3c:	690c      	ldr	r4, [r1, #16]
 8003b3e:	40bc      	lsls	r4, r7
 8003b40:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8003b44:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8003b48:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b4a:	005f      	lsls	r7, r3, #1
 8003b4c:	2603      	movs	r6, #3
 8003b4e:	40be      	lsls	r6, r7
 8003b50:	43f6      	mvns	r6, r6
 8003b52:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b56:	684c      	ldr	r4, [r1, #4]
 8003b58:	f004 0403 	and.w	r4, r4, #3
 8003b5c:	40bc      	lsls	r4, r7
 8003b5e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003b62:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b64:	684c      	ldr	r4, [r1, #4]
 8003b66:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8003b6a:	f1bc 0f01 	cmp.w	ip, #1
 8003b6e:	d903      	bls.n	8003b78 <HAL_GPIO_Init+0xec>
 8003b70:	2c11      	cmp	r4, #17
 8003b72:	d001      	beq.n	8003b78 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b74:	2c12      	cmp	r4, #18
 8003b76:	d110      	bne.n	8003b9a <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8003b78:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b7a:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b7e:	68cc      	ldr	r4, [r1, #12]
 8003b80:	40bc      	lsls	r4, r7
 8003b82:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8003b86:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003b88:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b8a:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b8e:	684c      	ldr	r4, [r1, #4]
 8003b90:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003b94:	409c      	lsls	r4, r3
 8003b96:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8003b98:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8003b9a:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b9c:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b9e:	688a      	ldr	r2, [r1, #8]
 8003ba0:	40ba      	lsls	r2, r7
 8003ba2:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8003ba4:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ba6:	684a      	ldr	r2, [r1, #4]
 8003ba8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8003bac:	d0ab      	beq.n	8003b06 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bae:	2200      	movs	r2, #0
 8003bb0:	9201      	str	r2, [sp, #4]
 8003bb2:	4a1d      	ldr	r2, [pc, #116]	; (8003c28 <HAL_GPIO_Init+0x19c>)
 8003bb4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8003bb6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003bba:	6454      	str	r4, [r2, #68]	; 0x44
 8003bbc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003bbe:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003bc2:	9201      	str	r2, [sp, #4]
 8003bc4:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003bc6:	089c      	lsrs	r4, r3, #2
 8003bc8:	1ca6      	adds	r6, r4, #2
 8003bca:	4a15      	ldr	r2, [pc, #84]	; (8003c20 <HAL_GPIO_Init+0x194>)
 8003bcc:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bd0:	f003 0203 	and.w	r2, r3, #3
 8003bd4:	0096      	lsls	r6, r2, #2
 8003bd6:	220f      	movs	r2, #15
 8003bd8:	40b2      	lsls	r2, r6
 8003bda:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bde:	4a13      	ldr	r2, [pc, #76]	; (8003c2c <HAL_GPIO_Init+0x1a0>)
 8003be0:	4290      	cmp	r0, r2
 8003be2:	f43f af5c 	beq.w	8003a9e <HAL_GPIO_Init+0x12>
 8003be6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bea:	4290      	cmp	r0, r2
 8003bec:	d00e      	beq.n	8003c0c <HAL_GPIO_Init+0x180>
 8003bee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bf2:	4290      	cmp	r0, r2
 8003bf4:	d00c      	beq.n	8003c10 <HAL_GPIO_Init+0x184>
 8003bf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bfa:	4290      	cmp	r0, r2
 8003bfc:	d00a      	beq.n	8003c14 <HAL_GPIO_Init+0x188>
 8003bfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c02:	4290      	cmp	r0, r2
 8003c04:	f43f af49 	beq.w	8003a9a <HAL_GPIO_Init+0xe>
 8003c08:	2207      	movs	r2, #7
 8003c0a:	e749      	b.n	8003aa0 <HAL_GPIO_Init+0x14>
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	e747      	b.n	8003aa0 <HAL_GPIO_Init+0x14>
 8003c10:	2202      	movs	r2, #2
 8003c12:	e745      	b.n	8003aa0 <HAL_GPIO_Init+0x14>
 8003c14:	2203      	movs	r2, #3
 8003c16:	e743      	b.n	8003aa0 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8003c18:	b002      	add	sp, #8
 8003c1a:	bcf0      	pop	{r4, r5, r6, r7}
 8003c1c:	4770      	bx	lr
 8003c1e:	4770      	bx	lr
 8003c20:	40013800 	.word	0x40013800
 8003c24:	40013c00 	.word	0x40013c00
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	40020000 	.word	0x40020000

08003c30 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c30:	b912      	cbnz	r2, 8003c38 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c32:	0409      	lsls	r1, r1, #16
 8003c34:	6181      	str	r1, [r0, #24]
  }
}
 8003c36:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8003c38:	6181      	str	r1, [r0, #24]
 8003c3a:	4770      	bx	lr

08003c3c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003c3c:	6943      	ldr	r3, [r0, #20]
 8003c3e:	ea31 0303 	bics.w	r3, r1, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c44:	6181      	str	r1, [r0, #24]
  }
}
 8003c46:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c48:	0409      	lsls	r1, r1, #16
 8003c4a:	6181      	str	r1, [r0, #24]
 8003c4c:	4770      	bx	lr

08003c4e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c4e:	6803      	ldr	r3, [r0, #0]
 8003c50:	695a      	ldr	r2, [r3, #20]
 8003c52:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003c56:	d011      	beq.n	8003c7c <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c62:	2220      	movs	r2, #32
 8003c64:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c68:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c6c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003c6e:	f042 0204 	orr.w	r2, r2, #4
 8003c72:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c74:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8003c78:	2001      	movs	r0, #1
 8003c7a:	4770      	bx	lr
  }
  return HAL_OK;
 8003c7c:	2000      	movs	r0, #0
}
 8003c7e:	4770      	bx	lr

08003c80 <I2C_WaitOnFlagUntilTimeout>:
{
 8003c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c82:	4606      	mov	r6, r0
 8003c84:	460c      	mov	r4, r1
 8003c86:	4617      	mov	r7, r2
 8003c88:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c8a:	e022      	b.n	8003cd2 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8c:	f7ff fcd4 	bl	8003638 <HAL_GetTick>
 8003c90:	9b06      	ldr	r3, [sp, #24]
 8003c92:	1ac0      	subs	r0, r0, r3
 8003c94:	42a8      	cmp	r0, r5
 8003c96:	d800      	bhi.n	8003c9a <I2C_WaitOnFlagUntilTimeout+0x1a>
 8003c98:	b9dd      	cbnz	r5, 8003cd2 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ca4:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ca8:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8003caa:	f042 0220 	orr.w	r2, r2, #32
 8003cae:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003cb0:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	e01a      	b.n	8003cee <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cb8:	6833      	ldr	r3, [r6, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	ea24 0303 	bic.w	r3, r4, r3
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	fab3 f383 	clz	r3, r3
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	429f      	cmp	r7, r3
 8003cca:	d10f      	bne.n	8003cec <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8003ccc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003cd0:	d1dc      	bne.n	8003c8c <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cd2:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d0ee      	beq.n	8003cb8 <I2C_WaitOnFlagUntilTimeout+0x38>
 8003cda:	6833      	ldr	r3, [r6, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	ea24 0303 	bic.w	r3, r4, r3
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	fab3 f383 	clz	r3, r3
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	e7ed      	b.n	8003cc8 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8003cec:	2000      	movs	r0, #0
}
 8003cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf2:	4604      	mov	r4, r0
 8003cf4:	460d      	mov	r5, r1
 8003cf6:	4616      	mov	r6, r2
 8003cf8:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cfa:	e03c      	b.n	8003d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d02:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d0a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d10:	2220      	movs	r2, #32
 8003d12:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d16:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d1a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d1c:	f042 0204 	orr.w	r2, r2, #4
 8003d20:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003d22:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8003d26:	2001      	movs	r0, #1
 8003d28:	e033      	b.n	8003d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2a:	f7ff fc85 	bl	8003638 <HAL_GetTick>
 8003d2e:	1bc0      	subs	r0, r0, r7
 8003d30:	42b0      	cmp	r0, r6
 8003d32:	d800      	bhi.n	8003d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8003d34:	b9fe      	cbnz	r6, 8003d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d36:	2300      	movs	r3, #0
 8003d38:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d44:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d46:	f042 0220 	orr.w	r2, r2, #32
 8003d4a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003d4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003d50:	2001      	movs	r0, #1
 8003d52:	e01e      	b.n	8003d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	ea25 0303 	bic.w	r3, r5, r3
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3300      	adds	r3, #0
 8003d60:	bf18      	it	ne
 8003d62:	2301      	movne	r3, #1
 8003d64:	b1a3      	cbz	r3, 8003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003d6e:	d1c5      	bne.n	8003cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8003d70:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8003d74:	d1d9      	bne.n	8003d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d76:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d0ea      	beq.n	8003d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	ea25 0303 	bic.w	r3, r5, r3
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3300      	adds	r3, #0
 8003d8a:	bf18      	it	ne
 8003d8c:	2301      	movne	r3, #1
 8003d8e:	e7e9      	b.n	8003d64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8003d90:	2000      	movs	r0, #0
}
 8003d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d94 <I2C_MasterRequestWrite>:
{
 8003d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d96:	b083      	sub	sp, #12
 8003d98:	4604      	mov	r4, r0
 8003d9a:	460f      	mov	r7, r1
 8003d9c:	4615      	mov	r5, r2
 8003d9e:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003da0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d00d      	beq.n	8003dc2 <I2C_MasterRequestWrite+0x2e>
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d00b      	beq.n	8003dc2 <I2C_MasterRequestWrite+0x2e>
 8003daa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dae:	d008      	beq.n	8003dc2 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003db0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003db2:	2b12      	cmp	r3, #18
 8003db4:	d10a      	bne.n	8003dcc <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003db6:	6802      	ldr	r2, [r0, #0]
 8003db8:	6813      	ldr	r3, [r2, #0]
 8003dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	e004      	b.n	8003dcc <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dc2:	6822      	ldr	r2, [r4, #0]
 8003dc4:	6813      	ldr	r3, [r2, #0]
 8003dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dca:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dcc:	9600      	str	r6, [sp, #0]
 8003dce:	462b      	mov	r3, r5
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	f7ff ff52 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003ddc:	bb18      	cbnz	r0, 8003e26 <I2C_MasterRequestWrite+0x92>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dde:	6923      	ldr	r3, [r4, #16]
 8003de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003de4:	d10d      	bne.n	8003e02 <I2C_MasterRequestWrite+0x6e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8003dec:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dee:	4633      	mov	r3, r6
 8003df0:	462a      	mov	r2, r5
 8003df2:	4910      	ldr	r1, [pc, #64]	; (8003e34 <I2C_MasterRequestWrite+0xa0>)
 8003df4:	4620      	mov	r0, r4
 8003df6:	f7ff ff7b 	bl	8003cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	b1a0      	cbz	r0, 8003e28 <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e012      	b.n	8003e28 <I2C_MasterRequestWrite+0x94>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e02:	11fb      	asrs	r3, r7, #7
 8003e04:	6822      	ldr	r2, [r4, #0]
 8003e06:	f003 0306 	and.w	r3, r3, #6
 8003e0a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003e0e:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e10:	4633      	mov	r3, r6
 8003e12:	462a      	mov	r2, r5
 8003e14:	4908      	ldr	r1, [pc, #32]	; (8003e38 <I2C_MasterRequestWrite+0xa4>)
 8003e16:	4620      	mov	r0, r4
 8003e18:	f7ff ff6a 	bl	8003cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e1c:	b938      	cbnz	r0, 8003e2e <I2C_MasterRequestWrite+0x9a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	b2ff      	uxtb	r7, r7
 8003e22:	611f      	str	r7, [r3, #16]
 8003e24:	e7e3      	b.n	8003dee <I2C_MasterRequestWrite+0x5a>
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	b003      	add	sp, #12
 8003e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e7fa      	b.n	8003e28 <I2C_MasterRequestWrite+0x94>
 8003e32:	bf00      	nop
 8003e34:	00010002 	.word	0x00010002
 8003e38:	00010008 	.word	0x00010008

08003e3c <I2C_MasterRequestRead>:
{
 8003e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	4604      	mov	r4, r0
 8003e44:	460d      	mov	r5, r1
 8003e46:	4616      	mov	r6, r2
 8003e48:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e4a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e4c:	6801      	ldr	r1, [r0, #0]
 8003e4e:	680b      	ldr	r3, [r1, #0]
 8003e50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e54:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e56:	2a08      	cmp	r2, #8
 8003e58:	d00d      	beq.n	8003e76 <I2C_MasterRequestRead+0x3a>
 8003e5a:	2a01      	cmp	r2, #1
 8003e5c:	d00b      	beq.n	8003e76 <I2C_MasterRequestRead+0x3a>
 8003e5e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003e62:	d008      	beq.n	8003e76 <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003e64:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003e66:	2b11      	cmp	r3, #17
 8003e68:	d10a      	bne.n	8003e80 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e6a:	6802      	ldr	r2, [r0, #0]
 8003e6c:	6813      	ldr	r3, [r2, #0]
 8003e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	e004      	b.n	8003e80 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e76:	6822      	ldr	r2, [r4, #0]
 8003e78:	6813      	ldr	r3, [r2, #0]
 8003e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7e:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e80:	9700      	str	r7, [sp, #0]
 8003e82:	4633      	mov	r3, r6
 8003e84:	2200      	movs	r2, #0
 8003e86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f7ff fef8 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d149      	bne.n	8003f28 <I2C_MasterRequestRead+0xec>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e94:	6923      	ldr	r3, [r4, #16]
 8003e96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e9a:	d10f      	bne.n	8003ebc <I2C_MasterRequestRead+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	f045 0501 	orr.w	r5, r5, #1
 8003ea2:	b2ed      	uxtb	r5, r5
 8003ea4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ea6:	463b      	mov	r3, r7
 8003ea8:	4632      	mov	r2, r6
 8003eaa:	4923      	ldr	r1, [pc, #140]	; (8003f38 <I2C_MasterRequestRead+0xfc>)
 8003eac:	4620      	mov	r0, r4
 8003eae:	f7ff ff1f 	bl	8003cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	d038      	beq.n	8003f2a <I2C_MasterRequestRead+0xee>
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e036      	b.n	8003f2a <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ebc:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8003ec0:	f008 0806 	and.w	r8, r8, #6
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8003eca:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ecc:	463b      	mov	r3, r7
 8003ece:	4632      	mov	r2, r6
 8003ed0:	491a      	ldr	r1, [pc, #104]	; (8003f3c <I2C_MasterRequestRead+0x100>)
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	f7ff ff0c 	bl	8003cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ed8:	b108      	cbz	r0, 8003ede <I2C_MasterRequestRead+0xa2>
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e025      	b.n	8003f2a <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	b2ed      	uxtb	r5, r5
 8003ee2:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ee4:	463b      	mov	r3, r7
 8003ee6:	4632      	mov	r2, r6
 8003ee8:	4913      	ldr	r1, [pc, #76]	; (8003f38 <I2C_MasterRequestRead+0xfc>)
 8003eea:	4620      	mov	r0, r4
 8003eec:	f7ff ff00 	bl	8003cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ef0:	b108      	cbz	r0, 8003ef6 <I2C_MasterRequestRead+0xba>
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e019      	b.n	8003f2a <I2C_MasterRequestRead+0xee>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	9203      	str	r2, [sp, #12]
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	6959      	ldr	r1, [r3, #20]
 8003efe:	9103      	str	r1, [sp, #12]
 8003f00:	6999      	ldr	r1, [r3, #24]
 8003f02:	9103      	str	r1, [sp, #12]
 8003f04:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f06:	6819      	ldr	r1, [r3, #0]
 8003f08:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003f0c:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f0e:	9700      	str	r7, [sp, #0]
 8003f10:	4633      	mov	r3, r6
 8003f12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f16:	4620      	mov	r0, r4
 8003f18:	f7ff feb2 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003f1c:	b948      	cbnz	r0, 8003f32 <I2C_MasterRequestRead+0xf6>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003f1e:	6822      	ldr	r2, [r4, #0]
 8003f20:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8003f24:	6113      	str	r3, [r2, #16]
 8003f26:	e7be      	b.n	8003ea6 <I2C_MasterRequestRead+0x6a>
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	b004      	add	sp, #16
 8003f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e7f9      	b.n	8003f2a <I2C_MasterRequestRead+0xee>
 8003f36:	bf00      	nop
 8003f38:	00010002 	.word	0x00010002
 8003f3c:	00010008 	.word	0x00010008

08003f40 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	4604      	mov	r4, r0
 8003f44:	460d      	mov	r5, r1
 8003f46:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f50:	d11c      	bne.n	8003f8c <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f52:	4620      	mov	r0, r4
 8003f54:	f7ff fe7b 	bl	8003c4e <I2C_IsAcknowledgeFailed>
 8003f58:	b9d0      	cbnz	r0, 8003f90 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003f5a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003f5e:	d0f3      	beq.n	8003f48 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f60:	f7ff fb6a 	bl	8003638 <HAL_GetTick>
 8003f64:	1b80      	subs	r0, r0, r6
 8003f66:	42a8      	cmp	r0, r5
 8003f68:	d801      	bhi.n	8003f6e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003f6a:	2d00      	cmp	r5, #0
 8003f6c:	d1ec      	bne.n	8003f48 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f72:	2220      	movs	r2, #32
 8003f74:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f78:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f7c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003f7e:	f042 0220 	orr.w	r2, r2, #32
 8003f82:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003f84:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003f88:	2001      	movs	r0, #1
 8003f8a:	e000      	b.n	8003f8e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8003f8c:	2000      	movs	r0, #0
}
 8003f8e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003f90:	2001      	movs	r0, #1
 8003f92:	e7fc      	b.n	8003f8e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08003f94 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003f94:	b570      	push	{r4, r5, r6, lr}
 8003f96:	4604      	mov	r4, r0
 8003f98:	460d      	mov	r5, r1
 8003f9a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f9c:	6823      	ldr	r3, [r4, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	f013 0f04 	tst.w	r3, #4
 8003fa4:	d11c      	bne.n	8003fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f7ff fe51 	bl	8003c4e <I2C_IsAcknowledgeFailed>
 8003fac:	b9d0      	cbnz	r0, 8003fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003fae:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003fb2:	d0f3      	beq.n	8003f9c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb4:	f7ff fb40 	bl	8003638 <HAL_GetTick>
 8003fb8:	1b80      	subs	r0, r0, r6
 8003fba:	42a8      	cmp	r0, r5
 8003fbc:	d801      	bhi.n	8003fc2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003fbe:	2d00      	cmp	r5, #0
 8003fc0:	d1ec      	bne.n	8003f9c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fcc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fd0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003fd2:	f042 0220 	orr.w	r2, r2, #32
 8003fd6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003fd8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003fdc:	2001      	movs	r0, #1
 8003fde:	e000      	b.n	8003fe2 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8003fe0:	2000      	movs	r0, #0
}
 8003fe2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	e7fc      	b.n	8003fe2 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08003fe8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003fe8:	b570      	push	{r4, r5, r6, lr}
 8003fea:	4605      	mov	r5, r0
 8003fec:	460c      	mov	r4, r1
 8003fee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	695a      	ldr	r2, [r3, #20]
 8003ff4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003ff8:	d129      	bne.n	800404e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ffa:	695a      	ldr	r2, [r3, #20]
 8003ffc:	f012 0f10 	tst.w	r2, #16
 8004000:	d115      	bne.n	800402e <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004002:	f7ff fb19 	bl	8003638 <HAL_GetTick>
 8004006:	1b80      	subs	r0, r0, r6
 8004008:	42a0      	cmp	r0, r4
 800400a:	d801      	bhi.n	8004010 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 800400c:	2c00      	cmp	r4, #0
 800400e:	d1ef      	bne.n	8003ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004010:	2300      	movs	r3, #0
 8004012:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004014:	2220      	movs	r2, #32
 8004016:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800401a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800401e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004020:	f042 0220 	orr.w	r2, r2, #32
 8004024:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004026:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800402a:	2001      	movs	r0, #1
}
 800402c:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800402e:	f06f 0210 	mvn.w	r2, #16
 8004032:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004034:	2300      	movs	r3, #0
 8004036:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004038:	2220      	movs	r2, #32
 800403a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800403e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004042:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004044:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004046:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800404a:	2001      	movs	r0, #1
 800404c:	e7ee      	b.n	800402c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 800404e:	2000      	movs	r0, #0
 8004050:	e7ec      	b.n	800402c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08004054 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004054:	2800      	cmp	r0, #0
 8004056:	f000 80be 	beq.w	80041d6 <HAL_I2C_Init+0x182>
{
 800405a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800405e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004062:	2b00      	cmp	r3, #0
 8004064:	d06b      	beq.n	800413e <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004066:	2324      	movs	r3, #36	; 0x24
 8004068:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800406c:	6822      	ldr	r2, [r4, #0]
 800406e:	6813      	ldr	r3, [r2, #0]
 8004070:	f023 0301 	bic.w	r3, r3, #1
 8004074:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004076:	f000 fe8b 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800407a:	6862      	ldr	r2, [r4, #4]
 800407c:	4b58      	ldr	r3, [pc, #352]	; (80041e0 <HAL_I2C_Init+0x18c>)
 800407e:	429a      	cmp	r2, r3
 8004080:	d862      	bhi.n	8004148 <HAL_I2C_Init+0xf4>
 8004082:	4b58      	ldr	r3, [pc, #352]	; (80041e4 <HAL_I2C_Init+0x190>)
 8004084:	4298      	cmp	r0, r3
 8004086:	bf8c      	ite	hi
 8004088:	2300      	movhi	r3, #0
 800408a:	2301      	movls	r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	f040 80a4 	bne.w	80041da <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 8004092:	4b55      	ldr	r3, [pc, #340]	; (80041e8 <HAL_I2C_Init+0x194>)
 8004094:	fba3 2300 	umull	r2, r3, r3, r0
 8004098:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800409a:	6821      	ldr	r1, [r4, #0]
 800409c:	684a      	ldr	r2, [r1, #4]
 800409e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80040a2:	431a      	orrs	r2, r3
 80040a4:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040a6:	6825      	ldr	r5, [r4, #0]
 80040a8:	6a2a      	ldr	r2, [r5, #32]
 80040aa:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80040ae:	6866      	ldr	r6, [r4, #4]
 80040b0:	494b      	ldr	r1, [pc, #300]	; (80041e0 <HAL_I2C_Init+0x18c>)
 80040b2:	428e      	cmp	r6, r1
 80040b4:	d84e      	bhi.n	8004154 <HAL_I2C_Init+0x100>
 80040b6:	3301      	adds	r3, #1
 80040b8:	4313      	orrs	r3, r2
 80040ba:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040bc:	6825      	ldr	r5, [r4, #0]
 80040be:	69e9      	ldr	r1, [r5, #28]
 80040c0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80040c4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80040c8:	6863      	ldr	r3, [r4, #4]
 80040ca:	4a45      	ldr	r2, [pc, #276]	; (80041e0 <HAL_I2C_Init+0x18c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d84b      	bhi.n	8004168 <HAL_I2C_Init+0x114>
 80040d0:	3801      	subs	r0, #1
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80040d8:	3301      	adds	r3, #1
 80040da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040de:	2b04      	cmp	r3, #4
 80040e0:	bf38      	it	cc
 80040e2:	2304      	movcc	r3, #4
 80040e4:	430b      	orrs	r3, r1
 80040e6:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040e8:	6821      	ldr	r1, [r4, #0]
 80040ea:	680b      	ldr	r3, [r1, #0]
 80040ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80040f0:	69e2      	ldr	r2, [r4, #28]
 80040f2:	6a20      	ldr	r0, [r4, #32]
 80040f4:	4302      	orrs	r2, r0
 80040f6:	4313      	orrs	r3, r2
 80040f8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040fa:	6821      	ldr	r1, [r4, #0]
 80040fc:	688b      	ldr	r3, [r1, #8]
 80040fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004102:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004106:	6922      	ldr	r2, [r4, #16]
 8004108:	68e0      	ldr	r0, [r4, #12]
 800410a:	4302      	orrs	r2, r0
 800410c:	4313      	orrs	r3, r2
 800410e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004110:	6821      	ldr	r1, [r4, #0]
 8004112:	68cb      	ldr	r3, [r1, #12]
 8004114:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004118:	6962      	ldr	r2, [r4, #20]
 800411a:	69a0      	ldr	r0, [r4, #24]
 800411c:	4302      	orrs	r2, r0
 800411e:	4313      	orrs	r3, r2
 8004120:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8004122:	6822      	ldr	r2, [r4, #0]
 8004124:	6813      	ldr	r3, [r2, #0]
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800412c:	2000      	movs	r0, #0
 800412e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004130:	2320      	movs	r3, #32
 8004132:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004136:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004138:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 800413c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800413e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8004142:	f003 fc51 	bl	80079e8 <HAL_I2C_MspInit>
 8004146:	e78e      	b.n	8004066 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004148:	4b28      	ldr	r3, [pc, #160]	; (80041ec <HAL_I2C_Init+0x198>)
 800414a:	4298      	cmp	r0, r3
 800414c:	bf8c      	ite	hi
 800414e:	2300      	movhi	r3, #0
 8004150:	2301      	movls	r3, #1
 8004152:	e79b      	b.n	800408c <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004154:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	4924      	ldr	r1, [pc, #144]	; (80041f0 <HAL_I2C_Init+0x19c>)
 800415e:	fba1 1303 	umull	r1, r3, r1, r3
 8004162:	099b      	lsrs	r3, r3, #6
 8004164:	3301      	adds	r3, #1
 8004166:	e7a7      	b.n	80040b8 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004168:	68a2      	ldr	r2, [r4, #8]
 800416a:	b9ba      	cbnz	r2, 800419c <HAL_I2C_Init+0x148>
 800416c:	1e46      	subs	r6, r0, #1
 800416e:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8004172:	fbb6 f6f7 	udiv	r6, r6, r7
 8004176:	3601      	adds	r6, #1
 8004178:	f3c6 060b 	ubfx	r6, r6, #0, #12
 800417c:	fab6 f686 	clz	r6, r6
 8004180:	0976      	lsrs	r6, r6, #5
 8004182:	bb36      	cbnz	r6, 80041d2 <HAL_I2C_Init+0x17e>
 8004184:	b9c2      	cbnz	r2, 80041b8 <HAL_I2C_Init+0x164>
 8004186:	3801      	subs	r0, #1
 8004188:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800418c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004190:	3301      	adds	r3, #1
 8004192:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8004196:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 800419a:	e7a3      	b.n	80040e4 <HAL_I2C_Init+0x90>
 800419c:	1e46      	subs	r6, r0, #1
 800419e:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80041a2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80041a6:	fbb6 f6f7 	udiv	r6, r6, r7
 80041aa:	3601      	adds	r6, #1
 80041ac:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80041b0:	fab6 f686 	clz	r6, r6
 80041b4:	0976      	lsrs	r6, r6, #5
 80041b6:	e7e4      	b.n	8004182 <HAL_I2C_Init+0x12e>
 80041b8:	3801      	subs	r0, #1
 80041ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80041be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80041c2:	fbb0 f2f3 	udiv	r2, r0, r3
 80041c6:	3201      	adds	r2, #1
 80041c8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80041cc:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80041d0:	e788      	b.n	80040e4 <HAL_I2C_Init+0x90>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e786      	b.n	80040e4 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80041d6:	2001      	movs	r0, #1
}
 80041d8:	4770      	bx	lr
    return HAL_ERROR;
 80041da:	2001      	movs	r0, #1
 80041dc:	e7ae      	b.n	800413c <HAL_I2C_Init+0xe8>
 80041de:	bf00      	nop
 80041e0:	000186a0 	.word	0x000186a0
 80041e4:	001e847f 	.word	0x001e847f
 80041e8:	431bde83 	.word	0x431bde83
 80041ec:	003d08ff 	.word	0x003d08ff
 80041f0:	10624dd3 	.word	0x10624dd3

080041f4 <HAL_I2C_Master_Transmit>:
{
 80041f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	4604      	mov	r4, r0
 80041fc:	460e      	mov	r6, r1
 80041fe:	4690      	mov	r8, r2
 8004200:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8004202:	f7ff fa19 	bl	8003638 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004206:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b20      	cmp	r3, #32
 800420e:	d004      	beq.n	800421a <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8004210:	2602      	movs	r6, #2
}
 8004212:	4630      	mov	r0, r6
 8004214:	b004      	add	sp, #16
 8004216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800421a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800421c:	9000      	str	r0, [sp, #0]
 800421e:	2319      	movs	r3, #25
 8004220:	2201      	movs	r2, #1
 8004222:	494f      	ldr	r1, [pc, #316]	; (8004360 <HAL_I2C_Master_Transmit+0x16c>)
 8004224:	4620      	mov	r0, r4
 8004226:	f7ff fd2b 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 800422a:	2800      	cmp	r0, #0
 800422c:	f040 8091 	bne.w	8004352 <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 8004230:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004234:	2b01      	cmp	r3, #1
 8004236:	f000 808e 	beq.w	8004356 <HAL_I2C_Master_Transmit+0x162>
 800423a:	2301      	movs	r3, #1
 800423c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	f012 0f01 	tst.w	r2, #1
 8004248:	d103      	bne.n	8004252 <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	f042 0201 	orr.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004252:	6822      	ldr	r2, [r4, #0]
 8004254:	6813      	ldr	r3, [r2, #0]
 8004256:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800425a:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800425c:	2321      	movs	r3, #33	; 0x21
 800425e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004262:	2310      	movs	r3, #16
 8004264:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004268:	2300      	movs	r3, #0
 800426a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800426c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004270:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004272:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004274:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004276:	4b3b      	ldr	r3, [pc, #236]	; (8004364 <HAL_I2C_Master_Transmit+0x170>)
 8004278:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800427a:	462b      	mov	r3, r5
 800427c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800427e:	4631      	mov	r1, r6
 8004280:	4620      	mov	r0, r4
 8004282:	f7ff fd87 	bl	8003d94 <I2C_MasterRequestWrite>
 8004286:	4606      	mov	r6, r0
 8004288:	2800      	cmp	r0, #0
 800428a:	d166      	bne.n	800435a <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800428c:	2300      	movs	r3, #0
 800428e:	9303      	str	r3, [sp, #12]
 8004290:	6823      	ldr	r3, [r4, #0]
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	9203      	str	r2, [sp, #12]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	9303      	str	r3, [sp, #12]
 800429a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 800429c:	e012      	b.n	80042c4 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800429e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d001      	beq.n	80042a8 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 80042a4:	2601      	movs	r6, #1
 80042a6:	e7b4      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a8:	6822      	ldr	r2, [r4, #0]
 80042aa:	6813      	ldr	r3, [r2, #0]
 80042ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042b0:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80042b2:	2601      	movs	r6, #1
 80042b4:	e7ad      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b6:	462a      	mov	r2, r5
 80042b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80042ba:	4620      	mov	r0, r4
 80042bc:	f7ff fe6a 	bl	8003f94 <I2C_WaitOnBTFFlagUntilTimeout>
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d12c      	bne.n	800431e <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 80042c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d035      	beq.n	8004336 <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ca:	462a      	mov	r2, r5
 80042cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80042ce:	4620      	mov	r0, r4
 80042d0:	f7ff fe36 	bl	8003f40 <I2C_WaitOnTXEFlagUntilTimeout>
 80042d4:	2800      	cmp	r0, #0
 80042d6:	d1e2      	bne.n	800429e <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	7812      	ldrb	r2, [r2, #0]
 80042de:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80042e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80042e2:	1c4b      	adds	r3, r1, #1
 80042e4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80042e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80042ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042f6:	6822      	ldr	r2, [r4, #0]
 80042f8:	6950      	ldr	r0, [r2, #20]
 80042fa:	f010 0f04 	tst.w	r0, #4
 80042fe:	d0da      	beq.n	80042b6 <HAL_I2C_Master_Transmit+0xc2>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0d8      	beq.n	80042b6 <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004304:	784b      	ldrb	r3, [r1, #1]
 8004306:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8004308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800430a:	3301      	adds	r3, #1
 800430c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800430e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004310:	3b01      	subs	r3, #1
 8004312:	b29b      	uxth	r3, r3
 8004314:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8004316:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004318:	3b01      	subs	r3, #1
 800431a:	8523      	strh	r3, [r4, #40]	; 0x28
 800431c:	e7cb      	b.n	80042b6 <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800431e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004320:	2b04      	cmp	r3, #4
 8004322:	d001      	beq.n	8004328 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 8004324:	2601      	movs	r6, #1
 8004326:	e774      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004328:	6822      	ldr	r2, [r4, #0]
 800432a:	6813      	ldr	r3, [r2, #0]
 800432c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004330:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8004332:	2601      	movs	r6, #1
 8004334:	e76d      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004336:	6822      	ldr	r2, [r4, #0]
 8004338:	6813      	ldr	r3, [r2, #0]
 800433a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800433e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004340:	2320      	movs	r3, #32
 8004342:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004346:	2300      	movs	r3, #0
 8004348:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800434c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8004350:	e75f      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 8004352:	2602      	movs	r6, #2
 8004354:	e75d      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8004356:	2602      	movs	r6, #2
 8004358:	e75b      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 800435a:	2601      	movs	r6, #1
 800435c:	e759      	b.n	8004212 <HAL_I2C_Master_Transmit+0x1e>
 800435e:	bf00      	nop
 8004360:	00100002 	.word	0x00100002
 8004364:	ffff0000 	.word	0xffff0000

08004368 <HAL_I2C_Master_Receive>:
{
 8004368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800436c:	b086      	sub	sp, #24
 800436e:	4604      	mov	r4, r0
 8004370:	460e      	mov	r6, r1
 8004372:	4690      	mov	r8, r2
 8004374:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8004376:	f7ff f95f 	bl	8003638 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800437a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b20      	cmp	r3, #32
 8004382:	d004      	beq.n	800438e <HAL_I2C_Master_Receive+0x26>
    return HAL_BUSY;
 8004384:	2602      	movs	r6, #2
}
 8004386:	4630      	mov	r0, r6
 8004388:	b006      	add	sp, #24
 800438a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800438e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004390:	9000      	str	r0, [sp, #0]
 8004392:	2319      	movs	r3, #25
 8004394:	2201      	movs	r2, #1
 8004396:	499e      	ldr	r1, [pc, #632]	; (8004610 <HAL_I2C_Master_Receive+0x2a8>)
 8004398:	4620      	mov	r0, r4
 800439a:	f7ff fc71 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 800439e:	2800      	cmp	r0, #0
 80043a0:	f040 8134 	bne.w	800460c <HAL_I2C_Master_Receive+0x2a4>
    __HAL_LOCK(hi2c);
 80043a4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	f000 8137 	beq.w	800461c <HAL_I2C_Master_Receive+0x2b4>
 80043ae:	2301      	movs	r3, #1
 80043b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	f012 0f01 	tst.w	r2, #1
 80043bc:	d103      	bne.n	80043c6 <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	f042 0201 	orr.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043c6:	6822      	ldr	r2, [r4, #0]
 80043c8:	6813      	ldr	r3, [r2, #0]
 80043ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043ce:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80043d0:	2322      	movs	r3, #34	; 0x22
 80043d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043d6:	2310      	movs	r3, #16
 80043d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043dc:	2300      	movs	r3, #0
 80043de:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80043e0:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043e4:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043e8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043ea:	4b8a      	ldr	r3, [pc, #552]	; (8004614 <HAL_I2C_Master_Receive+0x2ac>)
 80043ec:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043ee:	462b      	mov	r3, r5
 80043f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80043f2:	4631      	mov	r1, r6
 80043f4:	4620      	mov	r0, r4
 80043f6:	f7ff fd21 	bl	8003e3c <I2C_MasterRequestRead>
 80043fa:	4606      	mov	r6, r0
 80043fc:	2800      	cmp	r0, #0
 80043fe:	f040 810f 	bne.w	8004620 <HAL_I2C_Master_Receive+0x2b8>
    if (hi2c->XferSize == 0U)
 8004402:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004404:	b95b      	cbnz	r3, 800441e <HAL_I2C_Master_Receive+0xb6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004406:	9302      	str	r3, [sp, #8]
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	695a      	ldr	r2, [r3, #20]
 800440c:	9202      	str	r2, [sp, #8]
 800440e:	699a      	ldr	r2, [r3, #24]
 8004410:	9202      	str	r2, [sp, #8]
 8004412:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	e077      	b.n	800450e <HAL_I2C_Master_Receive+0x1a6>
    else if (hi2c->XferSize == 1U)
 800441e:	2b01      	cmp	r3, #1
 8004420:	d00f      	beq.n	8004442 <HAL_I2C_Master_Receive+0xda>
    else if (hi2c->XferSize == 2U)
 8004422:	2b02      	cmp	r3, #2
 8004424:	d01f      	beq.n	8004466 <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004426:	6822      	ldr	r2, [r4, #0]
 8004428:	6813      	ldr	r3, [r2, #0]
 800442a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800442e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004430:	2300      	movs	r3, #0
 8004432:	9305      	str	r3, [sp, #20]
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	695a      	ldr	r2, [r3, #20]
 8004438:	9205      	str	r2, [sp, #20]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	9305      	str	r3, [sp, #20]
 800443e:	9b05      	ldr	r3, [sp, #20]
 8004440:	e065      	b.n	800450e <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004442:	6822      	ldr	r2, [r4, #0]
 8004444:	6813      	ldr	r3, [r2, #0]
 8004446:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800444a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800444c:	2300      	movs	r3, #0
 800444e:	9303      	str	r3, [sp, #12]
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	695a      	ldr	r2, [r3, #20]
 8004454:	9203      	str	r2, [sp, #12]
 8004456:	699a      	ldr	r2, [r3, #24]
 8004458:	9203      	str	r2, [sp, #12]
 800445a:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	e053      	b.n	800450e <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004466:	6822      	ldr	r2, [r4, #0]
 8004468:	6813      	ldr	r3, [r2, #0]
 800446a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800446e:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004470:	6822      	ldr	r2, [r4, #0]
 8004472:	6813      	ldr	r3, [r2, #0]
 8004474:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004478:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800447a:	2300      	movs	r3, #0
 800447c:	9304      	str	r3, [sp, #16]
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	695a      	ldr	r2, [r3, #20]
 8004482:	9204      	str	r2, [sp, #16]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	9304      	str	r3, [sp, #16]
 8004488:	9b04      	ldr	r3, [sp, #16]
 800448a:	e040      	b.n	800450e <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800448c:	462a      	mov	r2, r5
 800448e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004490:	4620      	mov	r0, r4
 8004492:	f7ff fda9 	bl	8003fe8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004496:	2800      	cmp	r0, #0
 8004498:	f040 80c4 	bne.w	8004624 <HAL_I2C_Master_Receive+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044a2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80044a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044a6:	3301      	adds	r3, #1
 80044a8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80044aa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80044ac:	3b01      	subs	r3, #1
 80044ae:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80044b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	8563      	strh	r3, [r4, #42]	; 0x2a
 80044b8:	e029      	b.n	800450e <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044ba:	9500      	str	r5, [sp, #0]
 80044bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044be:	2200      	movs	r2, #0
 80044c0:	4955      	ldr	r1, [pc, #340]	; (8004618 <HAL_I2C_Master_Receive+0x2b0>)
 80044c2:	4620      	mov	r0, r4
 80044c4:	f7ff fbdc 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	f040 80ad 	bne.w	8004628 <HAL_I2C_Master_Receive+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ce:	6822      	ldr	r2, [r4, #0]
 80044d0:	6813      	ldr	r3, [r2, #0]
 80044d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044d6:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044de:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80044e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80044e2:	1c53      	adds	r3, r2, #1
 80044e4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80044e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80044e8:	3b01      	subs	r3, #1
 80044ea:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80044ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80044ee:	3b01      	subs	r3, #1
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f4:	6823      	ldr	r3, [r4, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80044fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044fc:	3301      	adds	r3, #1
 80044fe:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004500:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004502:	3b01      	subs	r3, #1
 8004504:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004506:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004508:	3b01      	subs	r3, #1
 800450a:	b29b      	uxth	r3, r3
 800450c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800450e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004510:	2b00      	cmp	r3, #0
 8004512:	d072      	beq.n	80045fa <HAL_I2C_Master_Receive+0x292>
      if (hi2c->XferSize <= 3U)
 8004514:	2b03      	cmp	r3, #3
 8004516:	d849      	bhi.n	80045ac <HAL_I2C_Master_Receive+0x244>
        if (hi2c->XferSize == 1U)
 8004518:	2b01      	cmp	r3, #1
 800451a:	d0b7      	beq.n	800448c <HAL_I2C_Master_Receive+0x124>
        else if (hi2c->XferSize == 2U)
 800451c:	2b02      	cmp	r3, #2
 800451e:	d0cc      	beq.n	80044ba <HAL_I2C_Master_Receive+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004520:	9500      	str	r5, [sp, #0]
 8004522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004524:	2200      	movs	r2, #0
 8004526:	493c      	ldr	r1, [pc, #240]	; (8004618 <HAL_I2C_Master_Receive+0x2b0>)
 8004528:	4620      	mov	r0, r4
 800452a:	f7ff fba9 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 800452e:	2800      	cmp	r0, #0
 8004530:	d17c      	bne.n	800462c <HAL_I2C_Master_Receive+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004532:	6822      	ldr	r2, [r4, #0]
 8004534:	6813      	ldr	r3, [r2, #0]
 8004536:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800453a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004542:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004544:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004546:	3301      	adds	r3, #1
 8004548:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800454a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800454c:	3b01      	subs	r3, #1
 800454e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004550:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004552:	3b01      	subs	r3, #1
 8004554:	b29b      	uxth	r3, r3
 8004556:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004558:	9500      	str	r5, [sp, #0]
 800455a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800455c:	2200      	movs	r2, #0
 800455e:	492e      	ldr	r1, [pc, #184]	; (8004618 <HAL_I2C_Master_Receive+0x2b0>)
 8004560:	4620      	mov	r0, r4
 8004562:	f7ff fb8d 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8004566:	2800      	cmp	r0, #0
 8004568:	d162      	bne.n	8004630 <HAL_I2C_Master_Receive+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456a:	6822      	ldr	r2, [r4, #0]
 800456c:	6813      	ldr	r3, [r2, #0]
 800456e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004572:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800457a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800457c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800457e:	1c53      	adds	r3, r2, #1
 8004580:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004582:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004584:	3b01      	subs	r3, #1
 8004586:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004588:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800458a:	3b01      	subs	r3, #1
 800458c:	b29b      	uxth	r3, r3
 800458e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004590:	6823      	ldr	r3, [r4, #0]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8004596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004598:	3301      	adds	r3, #1
 800459a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800459c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800459e:	3b01      	subs	r3, #1
 80045a0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80045a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80045aa:	e7b0      	b.n	800450e <HAL_I2C_Master_Receive+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ac:	462a      	mov	r2, r5
 80045ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80045b0:	4620      	mov	r0, r4
 80045b2:	f7ff fd19 	bl	8003fe8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	d13c      	bne.n	8004634 <HAL_I2C_Master_Receive+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045c0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80045c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80045c4:	1c53      	adds	r3, r2, #1
 80045c6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80045c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80045ca:	3b01      	subs	r3, #1
 80045cc:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80045ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	6959      	ldr	r1, [r3, #20]
 80045da:	f011 0f04 	tst.w	r1, #4
 80045de:	d096      	beq.n	800450e <HAL_I2C_Master_Receive+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80045e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045e6:	3301      	adds	r3, #1
 80045e8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80045ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80045ec:	3b01      	subs	r3, #1
 80045ee:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80045f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	8563      	strh	r3, [r4, #42]	; 0x2a
 80045f8:	e789      	b.n	800450e <HAL_I2C_Master_Receive+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80045fa:	2320      	movs	r3, #32
 80045fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004600:	2300      	movs	r3, #0
 8004602:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004606:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800460a:	e6bc      	b.n	8004386 <HAL_I2C_Master_Receive+0x1e>
      return HAL_BUSY;
 800460c:	2602      	movs	r6, #2
 800460e:	e6ba      	b.n	8004386 <HAL_I2C_Master_Receive+0x1e>
 8004610:	00100002 	.word	0x00100002
 8004614:	ffff0000 	.word	0xffff0000
 8004618:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 800461c:	2602      	movs	r6, #2
 800461e:	e6b2      	b.n	8004386 <HAL_I2C_Master_Receive+0x1e>
      return HAL_ERROR;
 8004620:	2601      	movs	r6, #1
 8004622:	e6b0      	b.n	8004386 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8004624:	2601      	movs	r6, #1
 8004626:	e6ae      	b.n	8004386 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8004628:	2601      	movs	r6, #1
 800462a:	e6ac      	b.n	8004386 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 800462c:	2601      	movs	r6, #1
 800462e:	e6aa      	b.n	8004386 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8004630:	2601      	movs	r6, #1
 8004632:	e6a8      	b.n	8004386 <HAL_I2C_Master_Receive+0x1e>
          return HAL_ERROR;
 8004634:	2601      	movs	r6, #1
 8004636:	e6a6      	b.n	8004386 <HAL_I2C_Master_Receive+0x1e>

08004638 <HAL_I2C_IsDeviceReady>:
{
 8004638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800463c:	b085      	sub	sp, #20
 800463e:	4604      	mov	r4, r0
 8004640:	4688      	mov	r8, r1
 8004642:	4691      	mov	r9, r2
 8004644:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8004646:	f7fe fff7 	bl	8003638 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800464a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b20      	cmp	r3, #32
 8004652:	d004      	beq.n	800465e <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 8004654:	2302      	movs	r3, #2
}
 8004656:	4618      	mov	r0, r3
 8004658:	b005      	add	sp, #20
 800465a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800465e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004660:	9000      	str	r0, [sp, #0]
 8004662:	2319      	movs	r3, #25
 8004664:	2201      	movs	r2, #1
 8004666:	4954      	ldr	r1, [pc, #336]	; (80047b8 <HAL_I2C_IsDeviceReady+0x180>)
 8004668:	4620      	mov	r0, r4
 800466a:	f7ff fb09 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 800466e:	2800      	cmp	r0, #0
 8004670:	f040 8097 	bne.w	80047a2 <HAL_I2C_IsDeviceReady+0x16a>
    __HAL_LOCK(hi2c);
 8004674:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004678:	2b01      	cmp	r3, #1
 800467a:	f000 8094 	beq.w	80047a6 <HAL_I2C_IsDeviceReady+0x16e>
 800467e:	2301      	movs	r3, #1
 8004680:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	f012 0f01 	tst.w	r2, #1
 800468c:	d103      	bne.n	8004696 <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	f042 0201 	orr.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004696:	6822      	ldr	r2, [r4, #0]
 8004698:	6813      	ldr	r3, [r2, #0]
 800469a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800469e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80046a0:	2324      	movs	r3, #36	; 0x24
 80046a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a6:	2300      	movs	r3, #0
 80046a8:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046aa:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80046ae:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 80046b0:	2701      	movs	r7, #1
 80046b2:	e034      	b.n	800471e <HAL_I2C_IsDeviceReady+0xe6>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80046b4:	23a0      	movs	r3, #160	; 0xa0
 80046b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	695a      	ldr	r2, [r3, #20]
 80046be:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80046c2:	6959      	ldr	r1, [r3, #20]
 80046c4:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80046c8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2ba0      	cmp	r3, #160	; 0xa0
 80046d0:	d009      	beq.n	80046e6 <HAL_I2C_IsDeviceReady+0xae>
 80046d2:	b942      	cbnz	r2, 80046e6 <HAL_I2C_IsDeviceReady+0xae>
 80046d4:	b939      	cbnz	r1, 80046e6 <HAL_I2C_IsDeviceReady+0xae>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046d6:	f7fe ffaf 	bl	8003638 <HAL_GetTick>
 80046da:	1b80      	subs	r0, r0, r6
 80046dc:	42a8      	cmp	r0, r5
 80046de:	d8e9      	bhi.n	80046b4 <HAL_I2C_IsDeviceReady+0x7c>
 80046e0:	2d00      	cmp	r5, #0
 80046e2:	d1ea      	bne.n	80046ba <HAL_I2C_IsDeviceReady+0x82>
 80046e4:	e7e6      	b.n	80046b4 <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->State = HAL_I2C_STATE_READY;
 80046e6:	2320      	movs	r3, #32
 80046e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	695a      	ldr	r2, [r3, #20]
 80046f0:	f012 0f02 	tst.w	r2, #2
 80046f4:	d131      	bne.n	800475a <HAL_I2C_IsDeviceReady+0x122>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046fc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004704:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004706:	9600      	str	r6, [sp, #0]
 8004708:	2319      	movs	r3, #25
 800470a:	2201      	movs	r2, #1
 800470c:	492a      	ldr	r1, [pc, #168]	; (80047b8 <HAL_I2C_IsDeviceReady+0x180>)
 800470e:	4620      	mov	r0, r4
 8004710:	f7ff fab6 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8004714:	2800      	cmp	r0, #0
 8004716:	d14c      	bne.n	80047b2 <HAL_I2C_IsDeviceReady+0x17a>
      I2C_Trials++;
 8004718:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 800471a:	454f      	cmp	r7, r9
 800471c:	d239      	bcs.n	8004792 <HAL_I2C_IsDeviceReady+0x15a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800471e:	6822      	ldr	r2, [r4, #0]
 8004720:	6813      	ldr	r3, [r2, #0]
 8004722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004726:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004728:	9600      	str	r6, [sp, #0]
 800472a:	462b      	mov	r3, r5
 800472c:	2200      	movs	r2, #0
 800472e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004732:	4620      	mov	r0, r4
 8004734:	f7ff faa4 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8004738:	2800      	cmp	r0, #0
 800473a:	d136      	bne.n	80047aa <HAL_I2C_IsDeviceReady+0x172>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8004742:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8004744:	f7fe ff78 	bl	8003638 <HAL_GetTick>
 8004748:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004752:	6959      	ldr	r1, [r3, #20]
 8004754:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004758:	e7b6      	b.n	80046c8 <HAL_I2C_IsDeviceReady+0x90>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004760:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004762:	2300      	movs	r3, #0
 8004764:	9303      	str	r3, [sp, #12]
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	695a      	ldr	r2, [r3, #20]
 800476a:	9203      	str	r2, [sp, #12]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	9303      	str	r3, [sp, #12]
 8004770:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004772:	9600      	str	r6, [sp, #0]
 8004774:	2319      	movs	r3, #25
 8004776:	2201      	movs	r2, #1
 8004778:	490f      	ldr	r1, [pc, #60]	; (80047b8 <HAL_I2C_IsDeviceReady+0x180>)
 800477a:	4620      	mov	r0, r4
 800477c:	f7ff fa80 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	b9a0      	cbnz	r0, 80047ae <HAL_I2C_IsDeviceReady+0x176>
        hi2c->State = HAL_I2C_STATE_READY;
 8004784:	2220      	movs	r2, #32
 8004786:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800478a:	2200      	movs	r2, #0
 800478c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 8004790:	e761      	b.n	8004656 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004792:	2320      	movs	r3, #32
 8004794:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004798:	2300      	movs	r3, #0
 800479a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e759      	b.n	8004656 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 80047a2:	2302      	movs	r3, #2
 80047a4:	e757      	b.n	8004656 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 80047a6:	2302      	movs	r3, #2
 80047a8:	e755      	b.n	8004656 <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e753      	b.n	8004656 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e751      	b.n	8004656 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e74f      	b.n	8004656 <HAL_I2C_IsDeviceReady+0x1e>
 80047b6:	bf00      	nop
 80047b8:	00100002 	.word	0x00100002

080047bc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047bc:	2800      	cmp	r0, #0
 80047be:	f000 81bb 	beq.w	8004b38 <HAL_RCC_OscConfig+0x37c>
{
 80047c2:	b570      	push	{r4, r5, r6, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047c8:	6803      	ldr	r3, [r0, #0]
 80047ca:	f013 0f01 	tst.w	r3, #1
 80047ce:	d03b      	beq.n	8004848 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047d0:	4ba7      	ldr	r3, [pc, #668]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 030c 	and.w	r3, r3, #12
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d02c      	beq.n	8004836 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047dc:	4ba4      	ldr	r3, [pc, #656]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d021      	beq.n	800482c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e8:	6863      	ldr	r3, [r4, #4]
 80047ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ee:	d04f      	beq.n	8004890 <HAL_RCC_OscConfig+0xd4>
 80047f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047f4:	d052      	beq.n	800489c <HAL_RCC_OscConfig+0xe0>
 80047f6:	4b9e      	ldr	r3, [pc, #632]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004806:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004808:	6863      	ldr	r3, [r4, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d050      	beq.n	80048b0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480e:	f7fe ff13 	bl	8003638 <HAL_GetTick>
 8004812:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004814:	4b96      	ldr	r3, [pc, #600]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800481c:	d114      	bne.n	8004848 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800481e:	f7fe ff0b 	bl	8003638 <HAL_GetTick>
 8004822:	1b40      	subs	r0, r0, r5
 8004824:	2864      	cmp	r0, #100	; 0x64
 8004826:	d9f5      	bls.n	8004814 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8004828:	2003      	movs	r0, #3
 800482a:	e18a      	b.n	8004b42 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800482c:	4b90      	ldr	r3, [pc, #576]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004834:	d0d8      	beq.n	80047e8 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004836:	4b8e      	ldr	r3, [pc, #568]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800483e:	d003      	beq.n	8004848 <HAL_RCC_OscConfig+0x8c>
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 817a 	beq.w	8004b3c <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	f013 0f02 	tst.w	r3, #2
 800484e:	d055      	beq.n	80048fc <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004850:	4b87      	ldr	r3, [pc, #540]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f013 0f0c 	tst.w	r3, #12
 8004858:	d03e      	beq.n	80048d8 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800485a:	4b85      	ldr	r3, [pc, #532]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004862:	2b08      	cmp	r3, #8
 8004864:	d033      	beq.n	80048ce <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004866:	68e3      	ldr	r3, [r4, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d068      	beq.n	800493e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800486c:	4b81      	ldr	r3, [pc, #516]	; (8004a74 <HAL_RCC_OscConfig+0x2b8>)
 800486e:	2201      	movs	r2, #1
 8004870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004872:	f7fe fee1 	bl	8003638 <HAL_GetTick>
 8004876:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004878:	4b7d      	ldr	r3, [pc, #500]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f013 0f02 	tst.w	r3, #2
 8004880:	d154      	bne.n	800492c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004882:	f7fe fed9 	bl	8003638 <HAL_GetTick>
 8004886:	1b40      	subs	r0, r0, r5
 8004888:	2802      	cmp	r0, #2
 800488a:	d9f5      	bls.n	8004878 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800488c:	2003      	movs	r0, #3
 800488e:	e158      	b.n	8004b42 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004890:	4a77      	ldr	r2, [pc, #476]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 8004892:	6813      	ldr	r3, [r2, #0]
 8004894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	e7b5      	b.n	8004808 <HAL_RCC_OscConfig+0x4c>
 800489c:	4b74      	ldr	r3, [pc, #464]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	e7ab      	b.n	8004808 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80048b0:	f7fe fec2 	bl	8003638 <HAL_GetTick>
 80048b4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048b6:	4b6e      	ldr	r3, [pc, #440]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80048be:	d0c3      	beq.n	8004848 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048c0:	f7fe feba 	bl	8003638 <HAL_GetTick>
 80048c4:	1b40      	subs	r0, r0, r5
 80048c6:	2864      	cmp	r0, #100	; 0x64
 80048c8:	d9f5      	bls.n	80048b6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80048ca:	2003      	movs	r0, #3
 80048cc:	e139      	b.n	8004b42 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ce:	4b68      	ldr	r3, [pc, #416]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80048d6:	d1c6      	bne.n	8004866 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048d8:	4b65      	ldr	r3, [pc, #404]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f013 0f02 	tst.w	r3, #2
 80048e0:	d004      	beq.n	80048ec <HAL_RCC_OscConfig+0x130>
 80048e2:	68e3      	ldr	r3, [r4, #12]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 80048e8:	2001      	movs	r0, #1
 80048ea:	e12a      	b.n	8004b42 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ec:	4a60      	ldr	r2, [pc, #384]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 80048ee:	6813      	ldr	r3, [r2, #0]
 80048f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80048f4:	6921      	ldr	r1, [r4, #16]
 80048f6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80048fa:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	f013 0f08 	tst.w	r3, #8
 8004902:	d040      	beq.n	8004986 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004904:	6963      	ldr	r3, [r4, #20]
 8004906:	b363      	cbz	r3, 8004962 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004908:	4b5b      	ldr	r3, [pc, #364]	; (8004a78 <HAL_RCC_OscConfig+0x2bc>)
 800490a:	2201      	movs	r2, #1
 800490c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490e:	f7fe fe93 	bl	8003638 <HAL_GetTick>
 8004912:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004914:	4b56      	ldr	r3, [pc, #344]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 8004916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004918:	f013 0f02 	tst.w	r3, #2
 800491c:	d133      	bne.n	8004986 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800491e:	f7fe fe8b 	bl	8003638 <HAL_GetTick>
 8004922:	1b40      	subs	r0, r0, r5
 8004924:	2802      	cmp	r0, #2
 8004926:	d9f5      	bls.n	8004914 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8004928:	2003      	movs	r0, #3
 800492a:	e10a      	b.n	8004b42 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492c:	4a50      	ldr	r2, [pc, #320]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 800492e:	6813      	ldr	r3, [r2, #0]
 8004930:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004934:	6921      	ldr	r1, [r4, #16]
 8004936:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	e7de      	b.n	80048fc <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800493e:	4b4d      	ldr	r3, [pc, #308]	; (8004a74 <HAL_RCC_OscConfig+0x2b8>)
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004944:	f7fe fe78 	bl	8003638 <HAL_GetTick>
 8004948:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494a:	4b49      	ldr	r3, [pc, #292]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f013 0f02 	tst.w	r3, #2
 8004952:	d0d3      	beq.n	80048fc <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004954:	f7fe fe70 	bl	8003638 <HAL_GetTick>
 8004958:	1b40      	subs	r0, r0, r5
 800495a:	2802      	cmp	r0, #2
 800495c:	d9f5      	bls.n	800494a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800495e:	2003      	movs	r0, #3
 8004960:	e0ef      	b.n	8004b42 <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004962:	4b45      	ldr	r3, [pc, #276]	; (8004a78 <HAL_RCC_OscConfig+0x2bc>)
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004968:	f7fe fe66 	bl	8003638 <HAL_GetTick>
 800496c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800496e:	4b40      	ldr	r3, [pc, #256]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 8004970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004972:	f013 0f02 	tst.w	r3, #2
 8004976:	d006      	beq.n	8004986 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004978:	f7fe fe5e 	bl	8003638 <HAL_GetTick>
 800497c:	1b40      	subs	r0, r0, r5
 800497e:	2802      	cmp	r0, #2
 8004980:	d9f5      	bls.n	800496e <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8004982:	2003      	movs	r0, #3
 8004984:	e0dd      	b.n	8004b42 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	f013 0f04 	tst.w	r3, #4
 800498c:	d079      	beq.n	8004a82 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800498e:	4b38      	ldr	r3, [pc, #224]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004996:	d133      	bne.n	8004a00 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004998:	2300      	movs	r3, #0
 800499a:	9301      	str	r3, [sp, #4]
 800499c:	4b34      	ldr	r3, [pc, #208]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 800499e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80049b0:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b2:	4b32      	ldr	r3, [pc, #200]	; (8004a7c <HAL_RCC_OscConfig+0x2c0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80049ba:	d023      	beq.n	8004a04 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049bc:	68a3      	ldr	r3, [r4, #8]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d034      	beq.n	8004a2c <HAL_RCC_OscConfig+0x270>
 80049c2:	2b05      	cmp	r3, #5
 80049c4:	d038      	beq.n	8004a38 <HAL_RCC_OscConfig+0x27c>
 80049c6:	4b2a      	ldr	r3, [pc, #168]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 80049c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049ca:	f022 0201 	bic.w	r2, r2, #1
 80049ce:	671a      	str	r2, [r3, #112]	; 0x70
 80049d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049d2:	f022 0204 	bic.w	r2, r2, #4
 80049d6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049d8:	68a3      	ldr	r3, [r4, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d036      	beq.n	8004a4c <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049de:	f7fe fe2b 	bl	8003638 <HAL_GetTick>
 80049e2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e4:	4b22      	ldr	r3, [pc, #136]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 80049e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e8:	f013 0f02 	tst.w	r3, #2
 80049ec:	d148      	bne.n	8004a80 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ee:	f7fe fe23 	bl	8003638 <HAL_GetTick>
 80049f2:	1b80      	subs	r0, r0, r6
 80049f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80049f8:	4298      	cmp	r0, r3
 80049fa:	d9f3      	bls.n	80049e4 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 80049fc:	2003      	movs	r0, #3
 80049fe:	e0a0      	b.n	8004b42 <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8004a00:	2500      	movs	r5, #0
 8004a02:	e7d6      	b.n	80049b2 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a04:	4a1d      	ldr	r2, [pc, #116]	; (8004a7c <HAL_RCC_OscConfig+0x2c0>)
 8004a06:	6813      	ldr	r3, [r2, #0]
 8004a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a0c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004a0e:	f7fe fe13 	bl	8003638 <HAL_GetTick>
 8004a12:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a14:	4b19      	ldr	r3, [pc, #100]	; (8004a7c <HAL_RCC_OscConfig+0x2c0>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004a1c:	d1ce      	bne.n	80049bc <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a1e:	f7fe fe0b 	bl	8003638 <HAL_GetTick>
 8004a22:	1b80      	subs	r0, r0, r6
 8004a24:	2802      	cmp	r0, #2
 8004a26:	d9f5      	bls.n	8004a14 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8004a28:	2003      	movs	r0, #3
 8004a2a:	e08a      	b.n	8004b42 <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a2c:	4a10      	ldr	r2, [pc, #64]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 8004a2e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	6713      	str	r3, [r2, #112]	; 0x70
 8004a36:	e7cf      	b.n	80049d8 <HAL_RCC_OscConfig+0x21c>
 8004a38:	4b0d      	ldr	r3, [pc, #52]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 8004a3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a3c:	f042 0204 	orr.w	r2, r2, #4
 8004a40:	671a      	str	r2, [r3, #112]	; 0x70
 8004a42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a44:	f042 0201 	orr.w	r2, r2, #1
 8004a48:	671a      	str	r2, [r3, #112]	; 0x70
 8004a4a:	e7c5      	b.n	80049d8 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a4c:	f7fe fdf4 	bl	8003638 <HAL_GetTick>
 8004a50:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a52:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <HAL_RCC_OscConfig+0x2b4>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a56:	f013 0f02 	tst.w	r3, #2
 8004a5a:	d011      	beq.n	8004a80 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a5c:	f7fe fdec 	bl	8003638 <HAL_GetTick>
 8004a60:	1b80      	subs	r0, r0, r6
 8004a62:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a66:	4298      	cmp	r0, r3
 8004a68:	d9f3      	bls.n	8004a52 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8004a6a:	2003      	movs	r0, #3
 8004a6c:	e069      	b.n	8004b42 <HAL_RCC_OscConfig+0x386>
 8004a6e:	bf00      	nop
 8004a70:	40023800 	.word	0x40023800
 8004a74:	42470000 	.word	0x42470000
 8004a78:	42470e80 	.word	0x42470e80
 8004a7c:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a80:	b9e5      	cbnz	r5, 8004abc <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a82:	69a3      	ldr	r3, [r4, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d05b      	beq.n	8004b40 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a88:	4a30      	ldr	r2, [pc, #192]	; (8004b4c <HAL_RCC_OscConfig+0x390>)
 8004a8a:	6892      	ldr	r2, [r2, #8]
 8004a8c:	f002 020c 	and.w	r2, r2, #12
 8004a90:	2a08      	cmp	r2, #8
 8004a92:	d058      	beq.n	8004b46 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d017      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a98:	4b2d      	ldr	r3, [pc, #180]	; (8004b50 <HAL_RCC_OscConfig+0x394>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9e:	f7fe fdcb 	bl	8003638 <HAL_GetTick>
 8004aa2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa4:	4b29      	ldr	r3, [pc, #164]	; (8004b4c <HAL_RCC_OscConfig+0x390>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004aac:	d042      	beq.n	8004b34 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aae:	f7fe fdc3 	bl	8003638 <HAL_GetTick>
 8004ab2:	1b00      	subs	r0, r0, r4
 8004ab4:	2802      	cmp	r0, #2
 8004ab6:	d9f5      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004ab8:	2003      	movs	r0, #3
 8004aba:	e042      	b.n	8004b42 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004abc:	4a23      	ldr	r2, [pc, #140]	; (8004b4c <HAL_RCC_OscConfig+0x390>)
 8004abe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ac6:	e7dc      	b.n	8004a82 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8004ac8:	4b21      	ldr	r3, [pc, #132]	; (8004b50 <HAL_RCC_OscConfig+0x394>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004ace:	f7fe fdb3 	bl	8003638 <HAL_GetTick>
 8004ad2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad4:	4b1d      	ldr	r3, [pc, #116]	; (8004b4c <HAL_RCC_OscConfig+0x390>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004adc:	d006      	beq.n	8004aec <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ade:	f7fe fdab 	bl	8003638 <HAL_GetTick>
 8004ae2:	1b40      	subs	r0, r0, r5
 8004ae4:	2802      	cmp	r0, #2
 8004ae6:	d9f5      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8004ae8:	2003      	movs	r0, #3
 8004aea:	e02a      	b.n	8004b42 <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004aec:	69e3      	ldr	r3, [r4, #28]
 8004aee:	6a22      	ldr	r2, [r4, #32]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004af4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004af8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004afa:	0852      	lsrs	r2, r2, #1
 8004afc:	3a01      	subs	r2, #1
 8004afe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004b04:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b08:	4a10      	ldr	r2, [pc, #64]	; (8004b4c <HAL_RCC_OscConfig+0x390>)
 8004b0a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004b0c:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <HAL_RCC_OscConfig+0x394>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004b12:	f7fe fd91 	bl	8003638 <HAL_GetTick>
 8004b16:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b18:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <HAL_RCC_OscConfig+0x390>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004b20:	d106      	bne.n	8004b30 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b22:	f7fe fd89 	bl	8003638 <HAL_GetTick>
 8004b26:	1b00      	subs	r0, r0, r4
 8004b28:	2802      	cmp	r0, #2
 8004b2a:	d9f5      	bls.n	8004b18 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8004b2c:	2003      	movs	r0, #3
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004b30:	2000      	movs	r0, #0
 8004b32:	e006      	b.n	8004b42 <HAL_RCC_OscConfig+0x386>
 8004b34:	2000      	movs	r0, #0
 8004b36:	e004      	b.n	8004b42 <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8004b38:	2001      	movs	r0, #1
}
 8004b3a:	4770      	bx	lr
        return HAL_ERROR;
 8004b3c:	2001      	movs	r0, #1
 8004b3e:	e000      	b.n	8004b42 <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8004b40:	2000      	movs	r0, #0
}
 8004b42:	b002      	add	sp, #8
 8004b44:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004b46:	2001      	movs	r0, #1
 8004b48:	e7fb      	b.n	8004b42 <HAL_RCC_OscConfig+0x386>
 8004b4a:	bf00      	nop
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	42470060 	.word	0x42470060

08004b54 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b54:	4b32      	ldr	r3, [pc, #200]	; (8004c20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d05c      	beq.n	8004c1a <HAL_RCC_GetSysClockFreq+0xc6>
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d001      	beq.n	8004b68 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b64:	482f      	ldr	r0, [pc, #188]	; (8004c24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b66:	4770      	bx	lr
{
 8004b68:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b6c:	4b2c      	ldr	r3, [pc, #176]	; (8004c20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004b7a:	d02b      	beq.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b7c:	4b28      	ldr	r3, [pc, #160]	; (8004c20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004b84:	461e      	mov	r6, r3
 8004b86:	2700      	movs	r7, #0
 8004b88:	015c      	lsls	r4, r3, #5
 8004b8a:	2500      	movs	r5, #0
 8004b8c:	1ae4      	subs	r4, r4, r3
 8004b8e:	eb65 0507 	sbc.w	r5, r5, r7
 8004b92:	01a9      	lsls	r1, r5, #6
 8004b94:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004b98:	01a0      	lsls	r0, r4, #6
 8004b9a:	1b00      	subs	r0, r0, r4
 8004b9c:	eb61 0105 	sbc.w	r1, r1, r5
 8004ba0:	00cb      	lsls	r3, r1, #3
 8004ba2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004ba6:	00c4      	lsls	r4, r0, #3
 8004ba8:	19a0      	adds	r0, r4, r6
 8004baa:	eb43 0107 	adc.w	r1, r3, r7
 8004bae:	024b      	lsls	r3, r1, #9
 8004bb0:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8004bb4:	0244      	lsls	r4, r0, #9
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f7fc f86c 	bl	8000c98 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bc0:	4b17      	ldr	r3, [pc, #92]	; (8004c20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004bc8:	3301      	adds	r3, #1
 8004bca:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004bcc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004bd0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bd4:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004bdc:	461e      	mov	r6, r3
 8004bde:	2700      	movs	r7, #0
 8004be0:	015c      	lsls	r4, r3, #5
 8004be2:	2500      	movs	r5, #0
 8004be4:	1ae4      	subs	r4, r4, r3
 8004be6:	eb65 0507 	sbc.w	r5, r5, r7
 8004bea:	01a9      	lsls	r1, r5, #6
 8004bec:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004bf0:	01a0      	lsls	r0, r4, #6
 8004bf2:	1b00      	subs	r0, r0, r4
 8004bf4:	eb61 0105 	sbc.w	r1, r1, r5
 8004bf8:	00cb      	lsls	r3, r1, #3
 8004bfa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004bfe:	00c4      	lsls	r4, r0, #3
 8004c00:	19a0      	adds	r0, r4, r6
 8004c02:	eb43 0107 	adc.w	r1, r3, r7
 8004c06:	028b      	lsls	r3, r1, #10
 8004c08:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8004c0c:	0284      	lsls	r4, r0, #10
 8004c0e:	4620      	mov	r0, r4
 8004c10:	4619      	mov	r1, r3
 8004c12:	2300      	movs	r3, #0
 8004c14:	f7fc f840 	bl	8000c98 <__aeabi_uldivmod>
 8004c18:	e7d2      	b.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8004c1a:	4803      	ldr	r0, [pc, #12]	; (8004c28 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	40023800 	.word	0x40023800
 8004c24:	00f42400 	.word	0x00f42400
 8004c28:	007a1200 	.word	0x007a1200

08004c2c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	f000 809d 	beq.w	8004d6c <HAL_RCC_ClockConfig+0x140>
{
 8004c32:	b570      	push	{r4, r5, r6, lr}
 8004c34:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c36:	4b4f      	ldr	r3, [pc, #316]	; (8004d74 <HAL_RCC_ClockConfig+0x148>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	428b      	cmp	r3, r1
 8004c40:	d209      	bcs.n	8004c56 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c42:	b2cb      	uxtb	r3, r1
 8004c44:	4a4b      	ldr	r2, [pc, #300]	; (8004d74 <HAL_RCC_ClockConfig+0x148>)
 8004c46:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c48:	6813      	ldr	r3, [r2, #0]
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	428b      	cmp	r3, r1
 8004c50:	d001      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8004c52:	2001      	movs	r0, #1
}
 8004c54:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	f013 0f02 	tst.w	r3, #2
 8004c5c:	d017      	beq.n	8004c8e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c5e:	f013 0f04 	tst.w	r3, #4
 8004c62:	d004      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c64:	4a44      	ldr	r2, [pc, #272]	; (8004d78 <HAL_RCC_ClockConfig+0x14c>)
 8004c66:	6893      	ldr	r3, [r2, #8]
 8004c68:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c6c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	f013 0f08 	tst.w	r3, #8
 8004c74:	d004      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c76:	4a40      	ldr	r2, [pc, #256]	; (8004d78 <HAL_RCC_ClockConfig+0x14c>)
 8004c78:	6893      	ldr	r3, [r2, #8]
 8004c7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c7e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c80:	4a3d      	ldr	r2, [pc, #244]	; (8004d78 <HAL_RCC_ClockConfig+0x14c>)
 8004c82:	6893      	ldr	r3, [r2, #8]
 8004c84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c88:	68a0      	ldr	r0, [r4, #8]
 8004c8a:	4303      	orrs	r3, r0
 8004c8c:	6093      	str	r3, [r2, #8]
 8004c8e:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	f013 0f01 	tst.w	r3, #1
 8004c96:	d032      	beq.n	8004cfe <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c98:	6863      	ldr	r3, [r4, #4]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d021      	beq.n	8004ce2 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c9e:	1e9a      	subs	r2, r3, #2
 8004ca0:	2a01      	cmp	r2, #1
 8004ca2:	d925      	bls.n	8004cf0 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca4:	4a34      	ldr	r2, [pc, #208]	; (8004d78 <HAL_RCC_ClockConfig+0x14c>)
 8004ca6:	6812      	ldr	r2, [r2, #0]
 8004ca8:	f012 0f02 	tst.w	r2, #2
 8004cac:	d060      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cae:	4932      	ldr	r1, [pc, #200]	; (8004d78 <HAL_RCC_ClockConfig+0x14c>)
 8004cb0:	688a      	ldr	r2, [r1, #8]
 8004cb2:	f022 0203 	bic.w	r2, r2, #3
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004cba:	f7fe fcbd 	bl	8003638 <HAL_GetTick>
 8004cbe:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cc0:	4b2d      	ldr	r3, [pc, #180]	; (8004d78 <HAL_RCC_ClockConfig+0x14c>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 030c 	and.w	r3, r3, #12
 8004cc8:	6862      	ldr	r2, [r4, #4]
 8004cca:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004cce:	d016      	beq.n	8004cfe <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd0:	f7fe fcb2 	bl	8003638 <HAL_GetTick>
 8004cd4:	1b80      	subs	r0, r0, r6
 8004cd6:	f241 3388 	movw	r3, #5000	; 0x1388
 8004cda:	4298      	cmp	r0, r3
 8004cdc:	d9f0      	bls.n	8004cc0 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8004cde:	2003      	movs	r0, #3
 8004ce0:	e7b8      	b.n	8004c54 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce2:	4a25      	ldr	r2, [pc, #148]	; (8004d78 <HAL_RCC_ClockConfig+0x14c>)
 8004ce4:	6812      	ldr	r2, [r2, #0]
 8004ce6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004cea:	d1e0      	bne.n	8004cae <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8004cec:	2001      	movs	r0, #1
 8004cee:	e7b1      	b.n	8004c54 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf0:	4a21      	ldr	r2, [pc, #132]	; (8004d78 <HAL_RCC_ClockConfig+0x14c>)
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004cf8:	d1d9      	bne.n	8004cae <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8004cfa:	2001      	movs	r0, #1
 8004cfc:	e7aa      	b.n	8004c54 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cfe:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <HAL_RCC_ClockConfig+0x148>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	42ab      	cmp	r3, r5
 8004d08:	d909      	bls.n	8004d1e <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d0a:	b2ea      	uxtb	r2, r5
 8004d0c:	4b19      	ldr	r3, [pc, #100]	; (8004d74 <HAL_RCC_ClockConfig+0x148>)
 8004d0e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	42ab      	cmp	r3, r5
 8004d18:	d001      	beq.n	8004d1e <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8004d1a:	2001      	movs	r0, #1
 8004d1c:	e79a      	b.n	8004c54 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	f013 0f04 	tst.w	r3, #4
 8004d24:	d006      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d26:	4a14      	ldr	r2, [pc, #80]	; (8004d78 <HAL_RCC_ClockConfig+0x14c>)
 8004d28:	6893      	ldr	r3, [r2, #8]
 8004d2a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004d2e:	68e1      	ldr	r1, [r4, #12]
 8004d30:	430b      	orrs	r3, r1
 8004d32:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	f013 0f08 	tst.w	r3, #8
 8004d3a:	d007      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d3c:	4a0e      	ldr	r2, [pc, #56]	; (8004d78 <HAL_RCC_ClockConfig+0x14c>)
 8004d3e:	6893      	ldr	r3, [r2, #8]
 8004d40:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004d44:	6921      	ldr	r1, [r4, #16]
 8004d46:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004d4a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d4c:	f7ff ff02 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 8004d50:	4b09      	ldr	r3, [pc, #36]	; (8004d78 <HAL_RCC_ClockConfig+0x14c>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004d58:	4a08      	ldr	r2, [pc, #32]	; (8004d7c <HAL_RCC_ClockConfig+0x150>)
 8004d5a:	5cd3      	ldrb	r3, [r2, r3]
 8004d5c:	40d8      	lsrs	r0, r3
 8004d5e:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <HAL_RCC_ClockConfig+0x154>)
 8004d60:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004d62:	2000      	movs	r0, #0
 8004d64:	f002 ffa2 	bl	8007cac <HAL_InitTick>
  return HAL_OK;
 8004d68:	2000      	movs	r0, #0
 8004d6a:	e773      	b.n	8004c54 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004d6c:	2001      	movs	r0, #1
}
 8004d6e:	4770      	bx	lr
        return HAL_ERROR;
 8004d70:	2001      	movs	r0, #1
 8004d72:	e76f      	b.n	8004c54 <HAL_RCC_ClockConfig+0x28>
 8004d74:	40023c00 	.word	0x40023c00
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	0800e648 	.word	0x0800e648
 8004d80:	20000078 	.word	0x20000078

08004d84 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004d84:	4b01      	ldr	r3, [pc, #4]	; (8004d8c <HAL_RCC_GetHCLKFreq+0x8>)
 8004d86:	6818      	ldr	r0, [r3, #0]
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	20000078 	.word	0x20000078

08004d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d90:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d92:	f7ff fff7 	bl	8004d84 <HAL_RCC_GetHCLKFreq>
 8004d96:	4b04      	ldr	r3, [pc, #16]	; (8004da8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004d9e:	4a03      	ldr	r2, [pc, #12]	; (8004dac <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004da0:	5cd3      	ldrb	r3, [r2, r3]
}
 8004da2:	40d8      	lsrs	r0, r3
 8004da4:	bd08      	pop	{r3, pc}
 8004da6:	bf00      	nop
 8004da8:	40023800 	.word	0x40023800
 8004dac:	0800e658 	.word	0x0800e658

08004db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004db0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004db2:	f7ff ffe7 	bl	8004d84 <HAL_RCC_GetHCLKFreq>
 8004db6:	4b04      	ldr	r3, [pc, #16]	; (8004dc8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004dbe:	4a03      	ldr	r2, [pc, #12]	; (8004dcc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004dc0:	5cd3      	ldrb	r3, [r2, r3]
}
 8004dc2:	40d8      	lsrs	r0, r3
 8004dc4:	bd08      	pop	{r3, pc}
 8004dc6:	bf00      	nop
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	0800e658 	.word	0x0800e658

08004dd0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dd0:	230f      	movs	r3, #15
 8004dd2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <HAL_RCC_GetClockConfig+0x34>)
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	f002 0203 	and.w	r2, r2, #3
 8004ddc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004de4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8004dec:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	08db      	lsrs	r3, r3, #3
 8004df2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004df6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004df8:	4b03      	ldr	r3, [pc, #12]	; (8004e08 <HAL_RCC_GetClockConfig+0x38>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	600b      	str	r3, [r1, #0]
}
 8004e02:	4770      	bx	lr
 8004e04:	40023800 	.word	0x40023800
 8004e08:	40023c00 	.word	0x40023c00

08004e0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0e:	4605      	mov	r5, r0
 8004e10:	460f      	mov	r7, r1
 8004e12:	4616      	mov	r6, r2
 8004e14:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e16:	682b      	ldr	r3, [r5, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	ea37 0303 	bics.w	r3, r7, r3
 8004e1e:	bf0c      	ite	eq
 8004e20:	2301      	moveq	r3, #1
 8004e22:	2300      	movne	r3, #0
 8004e24:	42b3      	cmp	r3, r6
 8004e26:	d037      	beq.n	8004e98 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e28:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004e2c:	d0f3      	beq.n	8004e16 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004e2e:	f7fe fc03 	bl	8003638 <HAL_GetTick>
 8004e32:	9b06      	ldr	r3, [sp, #24]
 8004e34:	1ac0      	subs	r0, r0, r3
 8004e36:	42a0      	cmp	r0, r4
 8004e38:	d201      	bcs.n	8004e3e <SPI_WaitFlagStateUntilTimeout+0x32>
 8004e3a:	2c00      	cmp	r4, #0
 8004e3c:	d1eb      	bne.n	8004e16 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e3e:	682a      	ldr	r2, [r5, #0]
 8004e40:	6853      	ldr	r3, [r2, #4]
 8004e42:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004e46:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e48:	686b      	ldr	r3, [r5, #4]
 8004e4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e4e:	d00b      	beq.n	8004e68 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e50:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e56:	d014      	beq.n	8004e82 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e64:	2003      	movs	r0, #3
 8004e66:	e018      	b.n	8004e9a <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e68:	68ab      	ldr	r3, [r5, #8]
 8004e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e6e:	d002      	beq.n	8004e76 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e74:	d1ec      	bne.n	8004e50 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8004e76:	682a      	ldr	r2, [r5, #0]
 8004e78:	6813      	ldr	r3, [r2, #0]
 8004e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	e7e6      	b.n	8004e50 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8004e82:	682a      	ldr	r2, [r5, #0]
 8004e84:	6813      	ldr	r3, [r2, #0]
 8004e86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	682a      	ldr	r2, [r5, #0]
 8004e8e:	6813      	ldr	r3, [r2, #0]
 8004e90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	e7df      	b.n	8004e58 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8004e98:	2000      	movs	r0, #0
}
 8004e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004e9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e9c:	b530      	push	{r4, r5, lr}
 8004e9e:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ea0:	4c16      	ldr	r4, [pc, #88]	; (8004efc <SPI_EndRxTxTransaction+0x60>)
 8004ea2:	6824      	ldr	r4, [r4, #0]
 8004ea4:	4d16      	ldr	r5, [pc, #88]	; (8004f00 <SPI_EndRxTxTransaction+0x64>)
 8004ea6:	fba5 3404 	umull	r3, r4, r5, r4
 8004eaa:	0d64      	lsrs	r4, r4, #21
 8004eac:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8004eb0:	fb05 f404 	mul.w	r4, r5, r4
 8004eb4:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eb6:	6844      	ldr	r4, [r0, #4]
 8004eb8:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8004ebc:	d00b      	beq.n	8004ed6 <SPI_EndRxTxTransaction+0x3a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004ebe:	9b03      	ldr	r3, [sp, #12]
 8004ec0:	b1c3      	cbz	r3, 8004ef4 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8004ec2:	9b03      	ldr	r3, [sp, #12]
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ec8:	6803      	ldr	r3, [r0, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004ed0:	d1f5      	bne.n	8004ebe <SPI_EndRxTxTransaction+0x22>
  }

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e00f      	b.n	8004ef6 <SPI_EndRxTxTransaction+0x5a>
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004eda:	9200      	str	r2, [sp, #0]
 8004edc:	2200      	movs	r2, #0
 8004ede:	2180      	movs	r1, #128	; 0x80
 8004ee0:	f7ff ff94 	bl	8004e0c <SPI_WaitFlagStateUntilTimeout>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	b130      	cbz	r0, 8004ef6 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004eea:	f043 0320 	orr.w	r3, r3, #32
 8004eee:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e000      	b.n	8004ef6 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	b005      	add	sp, #20
 8004efa:	bd30      	pop	{r4, r5, pc}
 8004efc:	20000078 	.word	0x20000078
 8004f00:	165e9f81 	.word	0x165e9f81

08004f04 <SPI_EndRxTransaction>:
{
 8004f04:	b510      	push	{r4, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f0a:	6840      	ldr	r0, [r0, #4]
 8004f0c:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8004f10:	d016      	beq.n	8004f40 <SPI_EndRxTransaction+0x3c>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f12:	6860      	ldr	r0, [r4, #4]
 8004f14:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8004f18:	d12e      	bne.n	8004f78 <SPI_EndRxTransaction+0x74>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004f1a:	68a3      	ldr	r3, [r4, #8]
 8004f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f20:	d01b      	beq.n	8004f5a <SPI_EndRxTransaction+0x56>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f22:	9200      	str	r2, [sp, #0]
 8004f24:	460b      	mov	r3, r1
 8004f26:	2200      	movs	r2, #0
 8004f28:	2180      	movs	r1, #128	; 0x80
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f7ff ff6e 	bl	8004e0c <SPI_WaitFlagStateUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	b350      	cbz	r0, 8004f8a <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f34:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f36:	f043 0320 	orr.w	r3, r3, #32
 8004f3a:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e024      	b.n	8004f8a <SPI_EndRxTransaction+0x86>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f40:	68a3      	ldr	r3, [r4, #8]
 8004f42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f46:	d002      	beq.n	8004f4e <SPI_EndRxTransaction+0x4a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f4c:	d1e1      	bne.n	8004f12 <SPI_EndRxTransaction+0xe>
    __HAL_SPI_DISABLE(hspi);
 8004f4e:	6820      	ldr	r0, [r4, #0]
 8004f50:	6803      	ldr	r3, [r0, #0]
 8004f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f56:	6003      	str	r3, [r0, #0]
 8004f58:	e7db      	b.n	8004f12 <SPI_EndRxTransaction+0xe>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f5a:	9200      	str	r2, [sp, #0]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2101      	movs	r1, #1
 8004f62:	4620      	mov	r0, r4
 8004f64:	f7ff ff52 	bl	8004e0c <SPI_WaitFlagStateUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	b170      	cbz	r0, 8004f8a <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f6e:	f043 0320 	orr.w	r3, r3, #32
 8004f72:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e008      	b.n	8004f8a <SPI_EndRxTransaction+0x86>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f78:	9200      	str	r2, [sp, #0]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	2101      	movs	r1, #1
 8004f80:	4620      	mov	r0, r4
 8004f82:	f7ff ff43 	bl	8004e0c <SPI_WaitFlagStateUntilTimeout>
 8004f86:	4603      	mov	r3, r0
 8004f88:	b910      	cbnz	r0, 8004f90 <SPI_EndRxTransaction+0x8c>
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	b002      	add	sp, #8
 8004f8e:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f92:	f043 0320 	orr.w	r3, r3, #32
 8004f96:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e7f6      	b.n	8004f8a <SPI_EndRxTransaction+0x86>

08004f9c <HAL_SPI_Init>:
  if (hspi == NULL)
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d03b      	beq.n	8005018 <HAL_SPI_Init+0x7c>
{
 8004fa0:	b510      	push	{r4, lr}
 8004fa2:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fa8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d02e      	beq.n	800500e <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004fb6:	6822      	ldr	r2, [r4, #0]
 8004fb8:	6813      	ldr	r3, [r2, #0]
 8004fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fbe:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004fc0:	6863      	ldr	r3, [r4, #4]
 8004fc2:	68a2      	ldr	r2, [r4, #8]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	68e2      	ldr	r2, [r4, #12]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	6922      	ldr	r2, [r4, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	6962      	ldr	r2, [r4, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	69a2      	ldr	r2, [r4, #24]
 8004fd4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	69e2      	ldr	r2, [r4, #28]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	6a22      	ldr	r2, [r4, #32]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004fe4:	6822      	ldr	r2, [r4, #0]
 8004fe6:	430b      	orrs	r3, r1
 8004fe8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004fea:	8b63      	ldrh	r3, [r4, #26]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004ff2:	6822      	ldr	r2, [r4, #0]
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ff8:	6822      	ldr	r2, [r4, #0]
 8004ffa:	69d3      	ldr	r3, [r2, #28]
 8004ffc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005000:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005002:	2000      	movs	r0, #0
 8005004:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005006:	2301      	movs	r3, #1
 8005008:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800500c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800500e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8005012:	f002 fd33 	bl	8007a7c <HAL_SPI_MspInit>
 8005016:	e7cb      	b.n	8004fb0 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8005018:	2001      	movs	r0, #1
}
 800501a:	4770      	bx	lr

0800501c <HAL_SPI_Transmit_IT>:
{
 800501c:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 800501e:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 8005022:	2801      	cmp	r0, #1
 8005024:	d043      	beq.n	80050ae <HAL_SPI_Transmit_IT+0x92>
 8005026:	2001      	movs	r0, #1
 8005028:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  if ((pData == NULL) || (Size == 0U))
 800502c:	2900      	cmp	r1, #0
 800502e:	d035      	beq.n	800509c <HAL_SPI_Transmit_IT+0x80>
 8005030:	2a00      	cmp	r2, #0
 8005032:	d035      	beq.n	80050a0 <HAL_SPI_Transmit_IT+0x84>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005034:	f893 0051 	ldrb.w	r0, [r3, #81]	; 0x51
 8005038:	b2c0      	uxtb	r0, r0
 800503a:	2801      	cmp	r0, #1
 800503c:	d001      	beq.n	8005042 <HAL_SPI_Transmit_IT+0x26>
    errorcode = HAL_BUSY;
 800503e:	2002      	movs	r0, #2
 8005040:	e02f      	b.n	80050a2 <HAL_SPI_Transmit_IT+0x86>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005042:	2003      	movs	r0, #3
 8005044:	f883 0051 	strb.w	r0, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005048:	2000      	movs	r0, #0
 800504a:	6558      	str	r0, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800504c:	6319      	str	r1, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800504e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005050:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005052:	6398      	str	r0, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005054:	8798      	strh	r0, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005056:	87d8      	strh	r0, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005058:	6418      	str	r0, [r3, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	b1aa      	cbz	r2, 800508a <HAL_SPI_Transmit_IT+0x6e>
    hspi->TxISR = SPI_TxISR_16BIT;
 800505e:	4a15      	ldr	r2, [pc, #84]	; (80050b4 <HAL_SPI_Transmit_IT+0x98>)
 8005060:	645a      	str	r2, [r3, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005068:	d012      	beq.n	8005090 <HAL_SPI_Transmit_IT+0x74>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800506a:	6819      	ldr	r1, [r3, #0]
 800506c:	684a      	ldr	r2, [r1, #4]
 800506e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8005072:	604a      	str	r2, [r1, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	6811      	ldr	r1, [r2, #0]
 8005078:	f011 0f40 	tst.w	r1, #64	; 0x40
 800507c:	d115      	bne.n	80050aa <HAL_SPI_Transmit_IT+0x8e>
    __HAL_SPI_ENABLE(hspi);
 800507e:	6811      	ldr	r1, [r2, #0]
 8005080:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8005084:	6011      	str	r1, [r2, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005086:	2000      	movs	r0, #0
 8005088:	e00b      	b.n	80050a2 <HAL_SPI_Transmit_IT+0x86>
    hspi->TxISR = SPI_TxISR_8BIT;
 800508a:	4a0b      	ldr	r2, [pc, #44]	; (80050b8 <HAL_SPI_Transmit_IT+0x9c>)
 800508c:	645a      	str	r2, [r3, #68]	; 0x44
 800508e:	e7e8      	b.n	8005062 <HAL_SPI_Transmit_IT+0x46>
    SPI_1LINE_TX(hspi);
 8005090:	6819      	ldr	r1, [r3, #0]
 8005092:	680a      	ldr	r2, [r1, #0]
 8005094:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005098:	600a      	str	r2, [r1, #0]
 800509a:	e7e6      	b.n	800506a <HAL_SPI_Transmit_IT+0x4e>
    errorcode = HAL_ERROR;
 800509c:	2001      	movs	r0, #1
 800509e:	e000      	b.n	80050a2 <HAL_SPI_Transmit_IT+0x86>
 80050a0:	2001      	movs	r0, #1
  __HAL_UNLOCK(hspi);
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050a8:	4770      	bx	lr
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050aa:	2000      	movs	r0, #0
 80050ac:	e7f9      	b.n	80050a2 <HAL_SPI_Transmit_IT+0x86>
  __HAL_LOCK(hspi);
 80050ae:	2002      	movs	r0, #2
}
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	080052fb 	.word	0x080052fb
 80050b8:	080052d5 	.word	0x080052d5

080050bc <HAL_SPI_TransmitReceive_IT>:
{
 80050bc:	b430      	push	{r4, r5}
  __HAL_LOCK(hspi);
 80050be:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 80050c2:	2c01      	cmp	r4, #1
 80050c4:	d054      	beq.n	8005170 <HAL_SPI_TransmitReceive_IT+0xb4>
 80050c6:	2401      	movs	r4, #1
 80050c8:	f880 4050 	strb.w	r4, [r0, #80]	; 0x50
  tmp_state           = hspi->State;
 80050cc:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
 80050d0:	b2e4      	uxtb	r4, r4
  tmp_mode            = hspi->Init.Mode;
 80050d2:	6845      	ldr	r5, [r0, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050d4:	2c01      	cmp	r4, #1
 80050d6:	d010      	beq.n	80050fa <HAL_SPI_TransmitReceive_IT+0x3e>
 80050d8:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 80050dc:	d006      	beq.n	80050ec <HAL_SPI_TransmitReceive_IT+0x30>
    errorcode = HAL_BUSY;
 80050de:	2302      	movs	r3, #2
  __HAL_UNLOCK(hspi);
 80050e0:	2200      	movs	r2, #0
 80050e2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	bc30      	pop	{r4, r5}
 80050ea:	4770      	bx	lr
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050ec:	6885      	ldr	r5, [r0, #8]
 80050ee:	2d00      	cmp	r5, #0
 80050f0:	d134      	bne.n	800515c <HAL_SPI_TransmitReceive_IT+0xa0>
 80050f2:	2c04      	cmp	r4, #4
 80050f4:	d001      	beq.n	80050fa <HAL_SPI_TransmitReceive_IT+0x3e>
    errorcode = HAL_BUSY;
 80050f6:	2302      	movs	r3, #2
 80050f8:	e7f2      	b.n	80050e0 <HAL_SPI_TransmitReceive_IT+0x24>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050fa:	2900      	cmp	r1, #0
 80050fc:	d030      	beq.n	8005160 <HAL_SPI_TransmitReceive_IT+0xa4>
 80050fe:	2a00      	cmp	r2, #0
 8005100:	d030      	beq.n	8005164 <HAL_SPI_TransmitReceive_IT+0xa8>
 8005102:	2b00      	cmp	r3, #0
 8005104:	d030      	beq.n	8005168 <HAL_SPI_TransmitReceive_IT+0xac>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005106:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
 800510a:	b2e4      	uxtb	r4, r4
 800510c:	2c04      	cmp	r4, #4
 800510e:	d002      	beq.n	8005116 <HAL_SPI_TransmitReceive_IT+0x5a>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005110:	2405      	movs	r4, #5
 8005112:	f880 4051 	strb.w	r4, [r0, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005116:	2400      	movs	r4, #0
 8005118:	6544      	str	r4, [r0, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800511a:	6301      	str	r1, [r0, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800511c:	8683      	strh	r3, [r0, #52]	; 0x34
  hspi->TxXferCount = Size;
 800511e:	86c3      	strh	r3, [r0, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005120:	6382      	str	r2, [r0, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005122:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005124:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005126:	68c3      	ldr	r3, [r0, #12]
 8005128:	b19b      	cbz	r3, 8005152 <HAL_SPI_TransmitReceive_IT+0x96>
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800512a:	4b12      	ldr	r3, [pc, #72]	; (8005174 <HAL_SPI_TransmitReceive_IT+0xb8>)
 800512c:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800512e:	4b12      	ldr	r3, [pc, #72]	; (8005178 <HAL_SPI_TransmitReceive_IT+0xbc>)
 8005130:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005132:	6802      	ldr	r2, [r0, #0]
 8005134:	6853      	ldr	r3, [r2, #4]
 8005136:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800513a:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800513c:	6803      	ldr	r3, [r0, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005144:	d112      	bne.n	800516c <HAL_SPI_TransmitReceive_IT+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800514c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	e7c6      	b.n	80050e0 <HAL_SPI_TransmitReceive_IT+0x24>
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005152:	4b0a      	ldr	r3, [pc, #40]	; (800517c <HAL_SPI_TransmitReceive_IT+0xc0>)
 8005154:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005156:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <HAL_SPI_TransmitReceive_IT+0xc4>)
 8005158:	6443      	str	r3, [r0, #68]	; 0x44
 800515a:	e7ea      	b.n	8005132 <HAL_SPI_TransmitReceive_IT+0x76>
    errorcode = HAL_BUSY;
 800515c:	2302      	movs	r3, #2
 800515e:	e7bf      	b.n	80050e0 <HAL_SPI_TransmitReceive_IT+0x24>
    errorcode = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e7bd      	b.n	80050e0 <HAL_SPI_TransmitReceive_IT+0x24>
 8005164:	2301      	movs	r3, #1
 8005166:	e7bb      	b.n	80050e0 <HAL_SPI_TransmitReceive_IT+0x24>
 8005168:	2301      	movs	r3, #1
 800516a:	e7b9      	b.n	80050e0 <HAL_SPI_TransmitReceive_IT+0x24>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	e7b7      	b.n	80050e0 <HAL_SPI_TransmitReceive_IT+0x24>
  __HAL_LOCK(hspi);
 8005170:	2302      	movs	r3, #2
 8005172:	e7b8      	b.n	80050e6 <HAL_SPI_TransmitReceive_IT+0x2a>
 8005174:	08005517 	.word	0x08005517
 8005178:	080054e1 	.word	0x080054e1
 800517c:	080054ab 	.word	0x080054ab
 8005180:	08005475 	.word	0x08005475

08005184 <HAL_SPI_Receive_IT>:
{
 8005184:	b538      	push	{r3, r4, r5, lr}
 8005186:	4604      	mov	r4, r0
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005188:	6885      	ldr	r5, [r0, #8]
 800518a:	b91d      	cbnz	r5, 8005194 <HAL_SPI_Receive_IT+0x10>
 800518c:	6843      	ldr	r3, [r0, #4]
 800518e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005192:	d010      	beq.n	80051b6 <HAL_SPI_Receive_IT+0x32>
  __HAL_LOCK(hspi);
 8005194:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8005198:	2801      	cmp	r0, #1
 800519a:	d04a      	beq.n	8005232 <HAL_SPI_Receive_IT+0xae>
 800519c:	2301      	movs	r3, #1
 800519e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 80051a2:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80051a6:	b2c0      	uxtb	r0, r0
 80051a8:	4298      	cmp	r0, r3
 80051aa:	d00c      	beq.n	80051c6 <HAL_SPI_Receive_IT+0x42>
    errorcode = HAL_BUSY;
 80051ac:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80051ae:	2300      	movs	r3, #0
 80051b0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80051b4:	bd38      	pop	{r3, r4, r5, pc}
 80051b6:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80051b8:	2204      	movs	r2, #4
 80051ba:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80051be:	460a      	mov	r2, r1
 80051c0:	f7ff ff7c 	bl	80050bc <HAL_SPI_TransmitReceive_IT>
 80051c4:	e7f6      	b.n	80051b4 <HAL_SPI_Receive_IT+0x30>
  if ((pData == NULL) || (Size == 0U))
 80051c6:	2900      	cmp	r1, #0
 80051c8:	d02d      	beq.n	8005226 <HAL_SPI_Receive_IT+0xa2>
 80051ca:	2a00      	cmp	r2, #0
 80051cc:	d02d      	beq.n	800522a <HAL_SPI_Receive_IT+0xa6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80051ce:	2304      	movs	r3, #4
 80051d0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051d4:	2300      	movs	r3, #0
 80051d6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80051d8:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80051da:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80051dc:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80051de:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80051e0:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80051e2:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 80051e4:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051e6:	68e3      	ldr	r3, [r4, #12]
 80051e8:	b1a3      	cbz	r3, 8005214 <HAL_SPI_Receive_IT+0x90>
    hspi->RxISR = SPI_RxISR_16BIT;
 80051ea:	4b13      	ldr	r3, [pc, #76]	; (8005238 <HAL_SPI_Receive_IT+0xb4>)
 80051ec:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051ee:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 80051f2:	d012      	beq.n	800521a <HAL_SPI_Receive_IT+0x96>
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80051f4:	6822      	ldr	r2, [r4, #0]
 80051f6:	6853      	ldr	r3, [r2, #4]
 80051f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80051fc:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005206:	d112      	bne.n	800522e <HAL_SPI_Receive_IT+0xaa>
    __HAL_SPI_ENABLE(hspi);
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800520e:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005210:	2000      	movs	r0, #0
 8005212:	e7cc      	b.n	80051ae <HAL_SPI_Receive_IT+0x2a>
    hspi->RxISR = SPI_RxISR_8BIT;
 8005214:	4b09      	ldr	r3, [pc, #36]	; (800523c <HAL_SPI_Receive_IT+0xb8>)
 8005216:	6423      	str	r3, [r4, #64]	; 0x40
 8005218:	e7e9      	b.n	80051ee <HAL_SPI_Receive_IT+0x6a>
    SPI_1LINE_RX(hspi);
 800521a:	6822      	ldr	r2, [r4, #0]
 800521c:	6813      	ldr	r3, [r2, #0]
 800521e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	e7e6      	b.n	80051f4 <HAL_SPI_Receive_IT+0x70>
    errorcode = HAL_ERROR;
 8005226:	2001      	movs	r0, #1
 8005228:	e7c1      	b.n	80051ae <HAL_SPI_Receive_IT+0x2a>
 800522a:	2001      	movs	r0, #1
 800522c:	e7bf      	b.n	80051ae <HAL_SPI_Receive_IT+0x2a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800522e:	2000      	movs	r0, #0
 8005230:	e7bd      	b.n	80051ae <HAL_SPI_Receive_IT+0x2a>
  __HAL_LOCK(hspi);
 8005232:	2002      	movs	r0, #2
 8005234:	e7be      	b.n	80051b4 <HAL_SPI_Receive_IT+0x30>
 8005236:	bf00      	nop
 8005238:	0800539d 	.word	0x0800539d
 800523c:	08005377 	.word	0x08005377

08005240 <HAL_SPI_TxRxCpltCallback>:
}
 8005240:	4770      	bx	lr

08005242 <HAL_SPI_ErrorCallback>:
}
 8005242:	4770      	bx	lr

08005244 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005244:	b510      	push	{r4, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	4604      	mov	r4, r0
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800524a:	4b20      	ldr	r3, [pc, #128]	; (80052cc <SPI_CloseTx_ISR+0x88>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a20      	ldr	r2, [pc, #128]	; (80052d0 <SPI_CloseTx_ISR+0x8c>)
 8005250:	fba2 2303 	umull	r2, r3, r2, r3
 8005254:	0a5b      	lsrs	r3, r3, #9
 8005256:	2264      	movs	r2, #100	; 0x64
 8005258:	fb02 f303 	mul.w	r3, r2, r3
 800525c:	9301      	str	r3, [sp, #4]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800525e:	f7fe f9eb 	bl	8003638 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005264:	9b01      	ldr	r3, [sp, #4]
 8005266:	b143      	cbz	r3, 800527a <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      break;
    }
    count--;
 8005268:	9b01      	ldr	r3, [sp, #4]
 800526a:	3b01      	subs	r3, #1
 800526c:	9301      	str	r3, [sp, #4]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800526e:	6823      	ldr	r3, [r4, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f013 0f02 	tst.w	r3, #2
 8005276:	d0f5      	beq.n	8005264 <SPI_CloseTx_ISR+0x20>
 8005278:	e003      	b.n	8005282 <SPI_CloseTx_ISR+0x3e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800527a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800527c:	f043 0320 	orr.w	r3, r3, #32
 8005280:	6563      	str	r3, [r4, #84]	; 0x54

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005282:	6821      	ldr	r1, [r4, #0]
 8005284:	684b      	ldr	r3, [r1, #4]
 8005286:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800528a:	604b      	str	r3, [r1, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800528c:	2164      	movs	r1, #100	; 0x64
 800528e:	4620      	mov	r0, r4
 8005290:	f7ff fe04 	bl	8004e9c <SPI_EndRxTxTransaction>
 8005294:	b118      	cbz	r0, 800529e <SPI_CloseTx_ISR+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005296:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005298:	f043 0320 	orr.w	r3, r3, #32
 800529c:	6563      	str	r3, [r4, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800529e:	68a3      	ldr	r3, [r4, #8]
 80052a0:	b933      	cbnz	r3, 80052b0 <SPI_CloseTx_ISR+0x6c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	9200      	str	r2, [sp, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	9b00      	ldr	r3, [sp, #0]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80052b0:	2301      	movs	r3, #1
 80052b2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80052b8:	b923      	cbnz	r3, 80052c4 <SPI_CloseTx_ISR+0x80>
  {
    /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
 80052ba:	4620      	mov	r0, r4
 80052bc:	f7fd ffe8 	bl	8003290 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80052c0:	b002      	add	sp, #8
 80052c2:	bd10      	pop	{r4, pc}
    HAL_SPI_ErrorCallback(hspi);
 80052c4:	4620      	mov	r0, r4
 80052c6:	f7ff ffbc 	bl	8005242 <HAL_SPI_ErrorCallback>
 80052ca:	e7f9      	b.n	80052c0 <SPI_CloseTx_ISR+0x7c>
 80052cc:	20000078 	.word	0x20000078
 80052d0:	057619f1 	.word	0x057619f1

080052d4 <SPI_TxISR_8BIT>:
{
 80052d4:	b508      	push	{r3, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052d6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80052d8:	6803      	ldr	r3, [r0, #0]
 80052da:	7812      	ldrb	r2, [r2, #0]
 80052dc:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 80052de:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80052e0:	3301      	adds	r3, #1
 80052e2:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 80052e4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80052e6:	3b01      	subs	r3, #1
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 80052ec:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	b103      	cbz	r3, 80052f4 <SPI_TxISR_8BIT+0x20>
}
 80052f2:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 80052f4:	f7ff ffa6 	bl	8005244 <SPI_CloseTx_ISR>
}
 80052f8:	e7fb      	b.n	80052f2 <SPI_TxISR_8BIT+0x1e>

080052fa <SPI_TxISR_16BIT>:
{
 80052fa:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052fc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80052fe:	6803      	ldr	r3, [r0, #0]
 8005300:	8812      	ldrh	r2, [r2, #0]
 8005302:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005304:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005306:	3302      	adds	r3, #2
 8005308:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 800530a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800530c:	3b01      	subs	r3, #1
 800530e:	b29b      	uxth	r3, r3
 8005310:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 8005312:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8005314:	b29b      	uxth	r3, r3
 8005316:	b103      	cbz	r3, 800531a <SPI_TxISR_16BIT+0x20>
}
 8005318:	bd08      	pop	{r3, pc}
    SPI_CloseTx_ISR(hspi);
 800531a:	f7ff ff93 	bl	8005244 <SPI_CloseTx_ISR>
}
 800531e:	e7fb      	b.n	8005318 <SPI_TxISR_16BIT+0x1e>

08005320 <SPI_CloseRx_ISR>:
{
 8005320:	b510      	push	{r4, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	4604      	mov	r4, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005326:	6802      	ldr	r2, [r0, #0]
 8005328:	6853      	ldr	r3, [r2, #4]
 800532a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800532e:	6053      	str	r3, [r2, #4]
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005330:	f7fe f982 	bl	8003638 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	2164      	movs	r1, #100	; 0x64
 8005338:	4620      	mov	r0, r4
 800533a:	f7ff fde3 	bl	8004f04 <SPI_EndRxTransaction>
 800533e:	b118      	cbz	r0, 8005348 <SPI_CloseRx_ISR+0x28>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005340:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005342:	f043 0320 	orr.w	r3, r3, #32
 8005346:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005348:	68a3      	ldr	r3, [r4, #8]
 800534a:	b933      	cbnz	r3, 800535a <SPI_CloseRx_ISR+0x3a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	9201      	str	r2, [sp, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	9301      	str	r3, [sp, #4]
 8005358:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800535a:	2301      	movs	r3, #1
 800535c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005360:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005362:	b123      	cbz	r3, 800536e <SPI_CloseRx_ISR+0x4e>
      HAL_SPI_ErrorCallback(hspi);
 8005364:	4620      	mov	r0, r4
 8005366:	f7ff ff6c 	bl	8005242 <HAL_SPI_ErrorCallback>
}
 800536a:	b002      	add	sp, #8
 800536c:	bd10      	pop	{r4, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800536e:	4620      	mov	r0, r4
 8005370:	f7fd ff94 	bl	800329c <HAL_SPI_RxCpltCallback>
 8005374:	e7f9      	b.n	800536a <SPI_CloseRx_ISR+0x4a>

08005376 <SPI_RxISR_8BIT>:
{
 8005376:	b508      	push	{r3, lr}
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005378:	6802      	ldr	r2, [r0, #0]
 800537a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800537c:	7b12      	ldrb	r2, [r2, #12]
 800537e:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005380:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005382:	3301      	adds	r3, #1
 8005384:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 8005386:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005388:	3b01      	subs	r3, #1
 800538a:	b29b      	uxth	r3, r3
 800538c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 800538e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005390:	b29b      	uxth	r3, r3
 8005392:	b103      	cbz	r3, 8005396 <SPI_RxISR_8BIT+0x20>
}
 8005394:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 8005396:	f7ff ffc3 	bl	8005320 <SPI_CloseRx_ISR>
}
 800539a:	e7fb      	b.n	8005394 <SPI_RxISR_8BIT+0x1e>

0800539c <SPI_RxISR_16BIT>:
{
 800539c:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800539e:	6803      	ldr	r3, [r0, #0]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80053a4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80053a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80053a8:	3302      	adds	r3, #2
 80053aa:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 80053ac:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 80053b4:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	b103      	cbz	r3, 80053bc <SPI_RxISR_16BIT+0x20>
}
 80053ba:	bd08      	pop	{r3, pc}
    SPI_CloseRx_ISR(hspi);
 80053bc:	f7ff ffb0 	bl	8005320 <SPI_CloseRx_ISR>
}
 80053c0:	e7fb      	b.n	80053ba <SPI_RxISR_16BIT+0x1e>
	...

080053c4 <SPI_CloseRxTx_ISR>:
{
 80053c4:	b510      	push	{r4, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80053ca:	4b28      	ldr	r3, [pc, #160]	; (800546c <SPI_CloseRxTx_ISR+0xa8>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a28      	ldr	r2, [pc, #160]	; (8005470 <SPI_CloseRxTx_ISR+0xac>)
 80053d0:	fba2 2303 	umull	r2, r3, r2, r3
 80053d4:	0a5b      	lsrs	r3, r3, #9
 80053d6:	2264      	movs	r2, #100	; 0x64
 80053d8:	fb02 f303 	mul.w	r3, r2, r3
 80053dc:	9301      	str	r3, [sp, #4]
  tickstart = HAL_GetTick();
 80053de:	f7fe f92b 	bl	8003638 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80053e4:	6821      	ldr	r1, [r4, #0]
 80053e6:	684b      	ldr	r3, [r1, #4]
 80053e8:	f023 0320 	bic.w	r3, r3, #32
 80053ec:	604b      	str	r3, [r1, #4]
    if (count == 0U)
 80053ee:	9b01      	ldr	r3, [sp, #4]
 80053f0:	b143      	cbz	r3, 8005404 <SPI_CloseRxTx_ISR+0x40>
    count--;
 80053f2:	9b01      	ldr	r3, [sp, #4]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f013 0f02 	tst.w	r3, #2
 8005400:	d0f5      	beq.n	80053ee <SPI_CloseRxTx_ISR+0x2a>
 8005402:	e003      	b.n	800540c <SPI_CloseRxTx_ISR+0x48>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005404:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005406:	f043 0320 	orr.w	r3, r3, #32
 800540a:	6563      	str	r3, [r4, #84]	; 0x54
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800540c:	2164      	movs	r1, #100	; 0x64
 800540e:	4620      	mov	r0, r4
 8005410:	f7ff fd44 	bl	8004e9c <SPI_EndRxTxTransaction>
 8005414:	b118      	cbz	r0, 800541e <SPI_CloseRxTx_ISR+0x5a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005416:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005418:	f043 0320 	orr.w	r3, r3, #32
 800541c:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800541e:	68a3      	ldr	r3, [r4, #8]
 8005420:	b933      	cbnz	r3, 8005430 <SPI_CloseRxTx_ISR+0x6c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	68da      	ldr	r2, [r3, #12]
 8005428:	9200      	str	r2, [sp, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	9b00      	ldr	r3, [sp, #0]
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005430:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005432:	b99b      	cbnz	r3, 800545c <SPI_CloseRxTx_ISR+0x98>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005434:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b04      	cmp	r3, #4
 800543c:	d007      	beq.n	800544e <SPI_CloseRxTx_ISR+0x8a>
        hspi->State = HAL_SPI_STATE_READY;
 800543e:	2301      	movs	r3, #1
 8005440:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8005444:	4620      	mov	r0, r4
 8005446:	f7ff fefb 	bl	8005240 <HAL_SPI_TxRxCpltCallback>
}
 800544a:	b002      	add	sp, #8
 800544c:	bd10      	pop	{r4, pc}
        hspi->State = HAL_SPI_STATE_READY;
 800544e:	2301      	movs	r3, #1
 8005450:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        HAL_SPI_RxCpltCallback(hspi);
 8005454:	4620      	mov	r0, r4
 8005456:	f7fd ff21 	bl	800329c <HAL_SPI_RxCpltCallback>
 800545a:	e7f6      	b.n	800544a <SPI_CloseRxTx_ISR+0x86>
      hspi->State = HAL_SPI_STATE_READY;
 800545c:	2301      	movs	r3, #1
 800545e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8005462:	4620      	mov	r0, r4
 8005464:	f7ff feed 	bl	8005242 <HAL_SPI_ErrorCallback>
}
 8005468:	e7ef      	b.n	800544a <SPI_CloseRxTx_ISR+0x86>
 800546a:	bf00      	nop
 800546c:	20000078 	.word	0x20000078
 8005470:	057619f1 	.word	0x057619f1

08005474 <SPI_2linesTxISR_8BIT>:
{
 8005474:	b508      	push	{r3, lr}
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005476:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005478:	6803      	ldr	r3, [r0, #0]
 800547a:	7812      	ldrb	r2, [r2, #0]
 800547c:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 800547e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005480:	3301      	adds	r3, #1
 8005482:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 8005484:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8005486:	3b01      	subs	r3, #1
 8005488:	b29b      	uxth	r3, r3
 800548a:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 800548c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800548e:	b29b      	uxth	r3, r3
 8005490:	b93b      	cbnz	r3, 80054a2 <SPI_2linesTxISR_8BIT+0x2e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005492:	6802      	ldr	r2, [r0, #0]
 8005494:	6853      	ldr	r3, [r2, #4]
 8005496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800549a:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 800549c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800549e:	b29b      	uxth	r3, r3
 80054a0:	b103      	cbz	r3, 80054a4 <SPI_2linesTxISR_8BIT+0x30>
}
 80054a2:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 80054a4:	f7ff ff8e 	bl	80053c4 <SPI_CloseRxTx_ISR>
}
 80054a8:	e7fb      	b.n	80054a2 <SPI_2linesTxISR_8BIT+0x2e>

080054aa <SPI_2linesRxISR_8BIT>:
{
 80054aa:	b508      	push	{r3, lr}
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80054ac:	6802      	ldr	r2, [r0, #0]
 80054ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80054b0:	7b12      	ldrb	r2, [r2, #12]
 80054b2:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80054b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80054b6:	3301      	adds	r3, #1
 80054b8:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 80054ba:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29b      	uxth	r3, r3
 80054c0:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 80054c2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	b93b      	cbnz	r3, 80054d8 <SPI_2linesRxISR_8BIT+0x2e>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80054c8:	6802      	ldr	r2, [r0, #0]
 80054ca:	6853      	ldr	r3, [r2, #4]
 80054cc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80054d0:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 80054d2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	b103      	cbz	r3, 80054da <SPI_2linesRxISR_8BIT+0x30>
}
 80054d8:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 80054da:	f7ff ff73 	bl	80053c4 <SPI_CloseRxTx_ISR>
}
 80054de:	e7fb      	b.n	80054d8 <SPI_2linesRxISR_8BIT+0x2e>

080054e0 <SPI_2linesTxISR_16BIT>:
{
 80054e0:	b508      	push	{r3, lr}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054e2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80054e4:	6803      	ldr	r3, [r0, #0]
 80054e6:	8812      	ldrh	r2, [r2, #0]
 80054e8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80054ec:	3302      	adds	r3, #2
 80054ee:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->TxXferCount--;
 80054f0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	86c3      	strh	r3, [r0, #54]	; 0x36
  if (hspi->TxXferCount == 0U)
 80054f8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	b93b      	cbnz	r3, 800550e <SPI_2linesTxISR_16BIT+0x2e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80054fe:	6802      	ldr	r2, [r0, #0]
 8005500:	6853      	ldr	r3, [r2, #4]
 8005502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005506:	6053      	str	r3, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8005508:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800550a:	b29b      	uxth	r3, r3
 800550c:	b103      	cbz	r3, 8005510 <SPI_2linesTxISR_16BIT+0x30>
}
 800550e:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8005510:	f7ff ff58 	bl	80053c4 <SPI_CloseRxTx_ISR>
}
 8005514:	e7fb      	b.n	800550e <SPI_2linesTxISR_16BIT+0x2e>

08005516 <SPI_2linesRxISR_16BIT>:
{
 8005516:	b508      	push	{r3, lr}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005518:	6803      	ldr	r3, [r0, #0]
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800551e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005520:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005522:	3302      	adds	r3, #2
 8005524:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferCount--;
 8005526:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005528:	3b01      	subs	r3, #1
 800552a:	b29b      	uxth	r3, r3
 800552c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->RxXferCount == 0U)
 800552e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8005530:	b29b      	uxth	r3, r3
 8005532:	b93b      	cbnz	r3, 8005544 <SPI_2linesRxISR_16BIT+0x2e>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005534:	6802      	ldr	r2, [r0, #0]
 8005536:	6853      	ldr	r3, [r2, #4]
 8005538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800553c:	6053      	str	r3, [r2, #4]
    if (hspi->TxXferCount == 0U)
 800553e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8005540:	b29b      	uxth	r3, r3
 8005542:	b103      	cbz	r3, 8005546 <SPI_2linesRxISR_16BIT+0x30>
}
 8005544:	bd08      	pop	{r3, pc}
      SPI_CloseRxTx_ISR(hspi);
 8005546:	f7ff ff3d 	bl	80053c4 <SPI_CloseRxTx_ISR>
}
 800554a:	e7fb      	b.n	8005544 <SPI_2linesRxISR_16BIT+0x2e>

0800554c <HAL_SPI_IRQHandler>:
{
 800554c:	b530      	push	{r4, r5, lr}
 800554e:	b085      	sub	sp, #20
 8005550:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8005552:	6802      	ldr	r2, [r0, #0]
 8005554:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8005556:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005558:	f3c3 1180 	ubfx	r1, r3, #6, #1
 800555c:	b949      	cbnz	r1, 8005572 <HAL_SPI_IRQHandler+0x26>
 800555e:	f013 0f01 	tst.w	r3, #1
 8005562:	d006      	beq.n	8005572 <HAL_SPI_IRQHandler+0x26>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005564:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005568:	d003      	beq.n	8005572 <HAL_SPI_IRQHandler+0x26>
    hspi->RxISR(hspi);
 800556a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800556c:	4620      	mov	r0, r4
 800556e:	4798      	blx	r3
    return;
 8005570:	e008      	b.n	8005584 <HAL_SPI_IRQHandler+0x38>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005572:	f013 0f02 	tst.w	r3, #2
 8005576:	d007      	beq.n	8005588 <HAL_SPI_IRQHandler+0x3c>
 8005578:	f010 0f80 	tst.w	r0, #128	; 0x80
 800557c:	d004      	beq.n	8005588 <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 800557e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005580:	4620      	mov	r0, r4
 8005582:	4798      	blx	r3
}
 8005584:	b005      	add	sp, #20
 8005586:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005588:	f3c3 1540 	ubfx	r5, r3, #5, #1
 800558c:	b91d      	cbnz	r5, 8005596 <HAL_SPI_IRQHandler+0x4a>
 800558e:	b911      	cbnz	r1, 8005596 <HAL_SPI_IRQHandler+0x4a>
 8005590:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005594:	d0f6      	beq.n	8005584 <HAL_SPI_IRQHandler+0x38>
 8005596:	f010 0f20 	tst.w	r0, #32
 800559a:	d0f3      	beq.n	8005584 <HAL_SPI_IRQHandler+0x38>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800559c:	b179      	cbz	r1, 80055be <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800559e:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 80055a2:	b2c9      	uxtb	r1, r1
 80055a4:	2903      	cmp	r1, #3
 80055a6:	d053      	beq.n	8005650 <HAL_SPI_IRQHandler+0x104>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80055a8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80055aa:	f041 0104 	orr.w	r1, r1, #4
 80055ae:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055b0:	2100      	movs	r1, #0
 80055b2:	9100      	str	r1, [sp, #0]
 80055b4:	68d1      	ldr	r1, [r2, #12]
 80055b6:	9100      	str	r1, [sp, #0]
 80055b8:	6891      	ldr	r1, [r2, #8]
 80055ba:	9100      	str	r1, [sp, #0]
 80055bc:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80055be:	b165      	cbz	r5, 80055da <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80055c0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80055c2:	f041 0101 	orr.w	r1, r1, #1
 80055c6:	6561      	str	r1, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80055c8:	2100      	movs	r1, #0
 80055ca:	9102      	str	r1, [sp, #8]
 80055cc:	6891      	ldr	r1, [r2, #8]
 80055ce:	9102      	str	r1, [sp, #8]
 80055d0:	6811      	ldr	r1, [r2, #0]
 80055d2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80055d6:	6011      	str	r1, [r2, #0]
 80055d8:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80055da:	f413 7f80 	tst.w	r3, #256	; 0x100
 80055de:	d009      	beq.n	80055f4 <HAL_SPI_IRQHandler+0xa8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80055e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80055e2:	f043 0308 	orr.w	r3, r3, #8
 80055e6:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80055e8:	2300      	movs	r3, #0
 80055ea:	9303      	str	r3, [sp, #12]
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	9303      	str	r3, [sp, #12]
 80055f2:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0c4      	beq.n	8005584 <HAL_SPI_IRQHandler+0x38>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80055fa:	6822      	ldr	r2, [r4, #0]
 80055fc:	6853      	ldr	r3, [r2, #4]
 80055fe:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005602:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8005604:	2301      	movs	r3, #1
 8005606:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800560a:	f010 0f03 	tst.w	r0, #3
 800560e:	d027      	beq.n	8005660 <HAL_SPI_IRQHandler+0x114>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005610:	6822      	ldr	r2, [r4, #0]
 8005612:	6853      	ldr	r3, [r2, #4]
 8005614:	f023 0303 	bic.w	r3, r3, #3
 8005618:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800561a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800561c:	b14b      	cbz	r3, 8005632 <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800561e:	4a12      	ldr	r2, [pc, #72]	; (8005668 <HAL_SPI_IRQHandler+0x11c>)
 8005620:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005622:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005624:	f7fe fa1f 	bl	8003a66 <HAL_DMA_Abort_IT>
 8005628:	b118      	cbz	r0, 8005632 <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800562a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800562c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005630:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005632:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0a5      	beq.n	8005584 <HAL_SPI_IRQHandler+0x38>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005638:	4a0b      	ldr	r2, [pc, #44]	; (8005668 <HAL_SPI_IRQHandler+0x11c>)
 800563a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800563c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800563e:	f7fe fa12 	bl	8003a66 <HAL_DMA_Abort_IT>
 8005642:	2800      	cmp	r0, #0
 8005644:	d09e      	beq.n	8005584 <HAL_SPI_IRQHandler+0x38>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005646:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800564c:	6563      	str	r3, [r4, #84]	; 0x54
 800564e:	e799      	b.n	8005584 <HAL_SPI_IRQHandler+0x38>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005650:	2300      	movs	r3, #0
 8005652:	9301      	str	r3, [sp, #4]
 8005654:	68d3      	ldr	r3, [r2, #12]
 8005656:	9301      	str	r3, [sp, #4]
 8005658:	6893      	ldr	r3, [r2, #8]
 800565a:	9301      	str	r3, [sp, #4]
 800565c:	9b01      	ldr	r3, [sp, #4]
        return;
 800565e:	e791      	b.n	8005584 <HAL_SPI_IRQHandler+0x38>
        HAL_SPI_ErrorCallback(hspi);
 8005660:	4620      	mov	r0, r4
 8005662:	f7ff fdee 	bl	8005242 <HAL_SPI_ErrorCallback>
 8005666:	e78d      	b.n	8005584 <HAL_SPI_IRQHandler+0x38>
 8005668:	0800566d 	.word	0x0800566d

0800566c <SPI_DMAAbortOnError>:
{
 800566c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800566e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005674:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8005676:	f7ff fde4 	bl	8005242 <HAL_SPI_ErrorCallback>
}
 800567a:	bd08      	pop	{r3, pc}

0800567c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800567c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800567e:	6a03      	ldr	r3, [r0, #32]
 8005680:	f023 0301 	bic.w	r3, r3, #1
 8005684:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005686:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005688:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800568a:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800568c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005690:	680d      	ldr	r5, [r1, #0]
 8005692:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005696:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800569a:	688b      	ldr	r3, [r1, #8]
 800569c:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800569e:	4d0d      	ldr	r5, [pc, #52]	; (80056d4 <TIM_OC1_SetConfig+0x58>)
 80056a0:	42a8      	cmp	r0, r5
 80056a2:	d009      	beq.n	80056b8 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a4:	4d0b      	ldr	r5, [pc, #44]	; (80056d4 <TIM_OC1_SetConfig+0x58>)
 80056a6:	42a8      	cmp	r0, r5
 80056a8:	d00d      	beq.n	80056c6 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056aa:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ac:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056ae:	684a      	ldr	r2, [r1, #4]
 80056b0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b2:	6203      	str	r3, [r0, #32]
}
 80056b4:	bc70      	pop	{r4, r5, r6}
 80056b6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80056b8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80056bc:	68cc      	ldr	r4, [r1, #12]
 80056be:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 80056c0:	f023 0304 	bic.w	r3, r3, #4
 80056c4:	e7ee      	b.n	80056a4 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80056ca:	694c      	ldr	r4, [r1, #20]
 80056cc:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 80056ce:	698a      	ldr	r2, [r1, #24]
 80056d0:	4322      	orrs	r2, r4
 80056d2:	e7ea      	b.n	80056aa <TIM_OC1_SetConfig+0x2e>
 80056d4:	40010000 	.word	0x40010000

080056d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056d8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056da:	6a03      	ldr	r3, [r0, #32]
 80056dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e4:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056e6:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056e8:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056ec:	680d      	ldr	r5, [r1, #0]
 80056ee:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056f4:	688d      	ldr	r5, [r1, #8]
 80056f6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056fa:	4d0f      	ldr	r5, [pc, #60]	; (8005738 <TIM_OC3_SetConfig+0x60>)
 80056fc:	42a8      	cmp	r0, r5
 80056fe:	d009      	beq.n	8005714 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005700:	4d0d      	ldr	r5, [pc, #52]	; (8005738 <TIM_OC3_SetConfig+0x60>)
 8005702:	42a8      	cmp	r0, r5
 8005704:	d00e      	beq.n	8005724 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005706:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005708:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800570a:	684a      	ldr	r2, [r1, #4]
 800570c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800570e:	6203      	str	r3, [r0, #32]
}
 8005710:	bc30      	pop	{r4, r5}
 8005712:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8005714:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005718:	68cd      	ldr	r5, [r1, #12]
 800571a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800571e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005722:	e7ed      	b.n	8005700 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005724:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005728:	694d      	ldr	r5, [r1, #20]
 800572a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800572e:	698d      	ldr	r5, [r1, #24]
 8005730:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8005734:	e7e7      	b.n	8005706 <TIM_OC3_SetConfig+0x2e>
 8005736:	bf00      	nop
 8005738:	40010000 	.word	0x40010000

0800573c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800573c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800573e:	6a03      	ldr	r3, [r0, #32]
 8005740:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005744:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005746:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005748:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800574a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800574c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005750:	680d      	ldr	r5, [r1, #0]
 8005752:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800575a:	688d      	ldr	r5, [r1, #8]
 800575c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005760:	4d07      	ldr	r5, [pc, #28]	; (8005780 <TIM_OC4_SetConfig+0x44>)
 8005762:	42a8      	cmp	r0, r5
 8005764:	d006      	beq.n	8005774 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005766:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005768:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800576a:	684a      	ldr	r2, [r1, #4]
 800576c:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800576e:	6203      	str	r3, [r0, #32]
}
 8005770:	bc30      	pop	{r4, r5}
 8005772:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005774:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005778:	694d      	ldr	r5, [r1, #20]
 800577a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800577e:	e7f2      	b.n	8005766 <TIM_OC4_SetConfig+0x2a>
 8005780:	40010000 	.word	0x40010000

08005784 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	2302      	movs	r3, #2
 8005786:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800578a:	6802      	ldr	r2, [r0, #0]
 800578c:	6893      	ldr	r3, [r2, #8]
 800578e:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005792:	2b06      	cmp	r3, #6
 8005794:	d003      	beq.n	800579e <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 8005796:	6813      	ldr	r3, [r2, #0]
 8005798:	f043 0301 	orr.w	r3, r3, #1
 800579c:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800579e:	2301      	movs	r3, #1
 80057a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80057a4:	2000      	movs	r0, #0
 80057a6:	4770      	bx	lr

080057a8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057a8:	6802      	ldr	r2, [r0, #0]
 80057aa:	68d3      	ldr	r3, [r2, #12]
 80057ac:	f043 0301 	orr.w	r3, r3, #1
 80057b0:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057b2:	6802      	ldr	r2, [r0, #0]
 80057b4:	6893      	ldr	r3, [r2, #8]
 80057b6:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ba:	2b06      	cmp	r3, #6
 80057bc:	d003      	beq.n	80057c6 <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 80057be:	6813      	ldr	r3, [r2, #0]
 80057c0:	f043 0301 	orr.w	r3, r3, #1
 80057c4:	6013      	str	r3, [r2, #0]
}
 80057c6:	2000      	movs	r0, #0
 80057c8:	4770      	bx	lr

080057ca <HAL_TIM_OC_DelayElapsedCallback>:
}
 80057ca:	4770      	bx	lr

080057cc <HAL_TIM_IC_CaptureCallback>:
}
 80057cc:	4770      	bx	lr

080057ce <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80057ce:	4770      	bx	lr

080057d0 <HAL_TIM_TriggerCallback>:
}
 80057d0:	4770      	bx	lr

080057d2 <HAL_TIM_IRQHandler>:
{
 80057d2:	b510      	push	{r4, lr}
 80057d4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057d6:	6803      	ldr	r3, [r0, #0]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	f012 0f02 	tst.w	r2, #2
 80057de:	d011      	beq.n	8005804 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	f012 0f02 	tst.w	r2, #2
 80057e6:	d00d      	beq.n	8005804 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057e8:	f06f 0202 	mvn.w	r2, #2
 80057ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057ee:	2301      	movs	r3, #1
 80057f0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057f2:	6803      	ldr	r3, [r0, #0]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	f013 0f03 	tst.w	r3, #3
 80057fa:	d070      	beq.n	80058de <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80057fc:	f7ff ffe6 	bl	80057cc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005800:	2300      	movs	r3, #0
 8005802:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	691a      	ldr	r2, [r3, #16]
 8005808:	f012 0f04 	tst.w	r2, #4
 800580c:	d012      	beq.n	8005834 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	f012 0f04 	tst.w	r2, #4
 8005814:	d00e      	beq.n	8005834 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005816:	f06f 0204 	mvn.w	r2, #4
 800581a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800581c:	2302      	movs	r3, #2
 800581e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005828:	d05f      	beq.n	80058ea <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800582a:	4620      	mov	r0, r4
 800582c:	f7ff ffce 	bl	80057cc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005830:	2300      	movs	r3, #0
 8005832:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	f012 0f08 	tst.w	r2, #8
 800583c:	d012      	beq.n	8005864 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800583e:	68da      	ldr	r2, [r3, #12]
 8005840:	f012 0f08 	tst.w	r2, #8
 8005844:	d00e      	beq.n	8005864 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005846:	f06f 0208 	mvn.w	r2, #8
 800584a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800584c:	2304      	movs	r3, #4
 800584e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	69db      	ldr	r3, [r3, #28]
 8005854:	f013 0f03 	tst.w	r3, #3
 8005858:	d04e      	beq.n	80058f8 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800585a:	4620      	mov	r0, r4
 800585c:	f7ff ffb6 	bl	80057cc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005860:	2300      	movs	r3, #0
 8005862:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	691a      	ldr	r2, [r3, #16]
 8005868:	f012 0f10 	tst.w	r2, #16
 800586c:	d012      	beq.n	8005894 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	f012 0f10 	tst.w	r2, #16
 8005874:	d00e      	beq.n	8005894 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005876:	f06f 0210 	mvn.w	r2, #16
 800587a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800587c:	2308      	movs	r3, #8
 800587e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005888:	d03d      	beq.n	8005906 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800588a:	4620      	mov	r0, r4
 800588c:	f7ff ff9e 	bl	80057cc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005890:	2300      	movs	r3, #0
 8005892:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	691a      	ldr	r2, [r3, #16]
 8005898:	f012 0f01 	tst.w	r2, #1
 800589c:	d003      	beq.n	80058a6 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	f012 0f01 	tst.w	r2, #1
 80058a4:	d136      	bne.n	8005914 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	691a      	ldr	r2, [r3, #16]
 80058aa:	f012 0f80 	tst.w	r2, #128	; 0x80
 80058ae:	d003      	beq.n	80058b8 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80058b6:	d134      	bne.n	8005922 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	691a      	ldr	r2, [r3, #16]
 80058bc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80058c0:	d003      	beq.n	80058ca <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80058c8:	d132      	bne.n	8005930 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	f012 0f20 	tst.w	r2, #32
 80058d2:	d003      	beq.n	80058dc <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	f012 0f20 	tst.w	r2, #32
 80058da:	d130      	bne.n	800593e <HAL_TIM_IRQHandler+0x16c>
}
 80058dc:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058de:	f7ff ff74 	bl	80057ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e2:	4620      	mov	r0, r4
 80058e4:	f7ff ff73 	bl	80057ce <HAL_TIM_PWM_PulseFinishedCallback>
 80058e8:	e78a      	b.n	8005800 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ea:	4620      	mov	r0, r4
 80058ec:	f7ff ff6d 	bl	80057ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f0:	4620      	mov	r0, r4
 80058f2:	f7ff ff6c 	bl	80057ce <HAL_TIM_PWM_PulseFinishedCallback>
 80058f6:	e79b      	b.n	8005830 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f8:	4620      	mov	r0, r4
 80058fa:	f7ff ff66 	bl	80057ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058fe:	4620      	mov	r0, r4
 8005900:	f7ff ff65 	bl	80057ce <HAL_TIM_PWM_PulseFinishedCallback>
 8005904:	e7ac      	b.n	8005860 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005906:	4620      	mov	r0, r4
 8005908:	f7ff ff5f 	bl	80057ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800590c:	4620      	mov	r0, r4
 800590e:	f7ff ff5e 	bl	80057ce <HAL_TIM_PWM_PulseFinishedCallback>
 8005912:	e7bd      	b.n	8005890 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005914:	f06f 0201 	mvn.w	r2, #1
 8005918:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800591a:	4620      	mov	r0, r4
 800591c:	f001 ffea 	bl	80078f4 <HAL_TIM_PeriodElapsedCallback>
 8005920:	e7c1      	b.n	80058a6 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005922:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005926:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005928:	4620      	mov	r0, r4
 800592a:	f000 f9b3 	bl	8005c94 <HAL_TIMEx_BreakCallback>
 800592e:	e7c3      	b.n	80058b8 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005930:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005934:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005936:	4620      	mov	r0, r4
 8005938:	f7ff ff4a 	bl	80057d0 <HAL_TIM_TriggerCallback>
 800593c:	e7c5      	b.n	80058ca <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800593e:	f06f 0220 	mvn.w	r2, #32
 8005942:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005944:	4620      	mov	r0, r4
 8005946:	f000 f9a4 	bl	8005c92 <HAL_TIMEx_CommutCallback>
}
 800594a:	e7c7      	b.n	80058dc <HAL_TIM_IRQHandler+0x10a>

0800594c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800594c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800594e:	4a25      	ldr	r2, [pc, #148]	; (80059e4 <TIM_Base_SetConfig+0x98>)
 8005950:	4290      	cmp	r0, r2
 8005952:	d00e      	beq.n	8005972 <TIM_Base_SetConfig+0x26>
 8005954:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005958:	d00b      	beq.n	8005972 <TIM_Base_SetConfig+0x26>
 800595a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800595e:	4290      	cmp	r0, r2
 8005960:	d007      	beq.n	8005972 <TIM_Base_SetConfig+0x26>
 8005962:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005966:	4290      	cmp	r0, r2
 8005968:	d003      	beq.n	8005972 <TIM_Base_SetConfig+0x26>
 800596a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800596e:	4290      	cmp	r0, r2
 8005970:	d103      	bne.n	800597a <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005976:	684a      	ldr	r2, [r1, #4]
 8005978:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800597a:	4a1a      	ldr	r2, [pc, #104]	; (80059e4 <TIM_Base_SetConfig+0x98>)
 800597c:	4290      	cmp	r0, r2
 800597e:	d01a      	beq.n	80059b6 <TIM_Base_SetConfig+0x6a>
 8005980:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005984:	d017      	beq.n	80059b6 <TIM_Base_SetConfig+0x6a>
 8005986:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800598a:	4290      	cmp	r0, r2
 800598c:	d013      	beq.n	80059b6 <TIM_Base_SetConfig+0x6a>
 800598e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005992:	4290      	cmp	r0, r2
 8005994:	d00f      	beq.n	80059b6 <TIM_Base_SetConfig+0x6a>
 8005996:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800599a:	4290      	cmp	r0, r2
 800599c:	d00b      	beq.n	80059b6 <TIM_Base_SetConfig+0x6a>
 800599e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80059a2:	4290      	cmp	r0, r2
 80059a4:	d007      	beq.n	80059b6 <TIM_Base_SetConfig+0x6a>
 80059a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059aa:	4290      	cmp	r0, r2
 80059ac:	d003      	beq.n	80059b6 <TIM_Base_SetConfig+0x6a>
 80059ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059b2:	4290      	cmp	r0, r2
 80059b4:	d103      	bne.n	80059be <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 80059b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ba:	68ca      	ldr	r2, [r1, #12]
 80059bc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c2:	694a      	ldr	r2, [r1, #20]
 80059c4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80059c6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059c8:	688b      	ldr	r3, [r1, #8]
 80059ca:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80059cc:	680b      	ldr	r3, [r1, #0]
 80059ce:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059d0:	4b04      	ldr	r3, [pc, #16]	; (80059e4 <TIM_Base_SetConfig+0x98>)
 80059d2:	4298      	cmp	r0, r3
 80059d4:	d002      	beq.n	80059dc <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 80059d6:	2301      	movs	r3, #1
 80059d8:	6143      	str	r3, [r0, #20]
}
 80059da:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80059dc:	690b      	ldr	r3, [r1, #16]
 80059de:	6303      	str	r3, [r0, #48]	; 0x30
 80059e0:	e7f9      	b.n	80059d6 <TIM_Base_SetConfig+0x8a>
 80059e2:	bf00      	nop
 80059e4:	40010000 	.word	0x40010000

080059e8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80059e8:	b1a8      	cbz	r0, 8005a16 <HAL_TIM_Base_Init+0x2e>
{
 80059ea:	b510      	push	{r4, lr}
 80059ec:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80059ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80059f2:	b15b      	cbz	r3, 8005a0c <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80059f4:	2302      	movs	r3, #2
 80059f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059fa:	1d21      	adds	r1, r4, #4
 80059fc:	6820      	ldr	r0, [r4, #0]
 80059fe:	f7ff ffa5 	bl	800594c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005a08:	2000      	movs	r0, #0
}
 8005a0a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005a0c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005a10:	f002 f8a2 	bl	8007b58 <HAL_TIM_Base_MspInit>
 8005a14:	e7ee      	b.n	80059f4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005a16:	2001      	movs	r0, #1
}
 8005a18:	4770      	bx	lr

08005a1a <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005a1a:	b1a8      	cbz	r0, 8005a48 <HAL_TIM_PWM_Init+0x2e>
{
 8005a1c:	b510      	push	{r4, lr}
 8005a1e:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005a20:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005a24:	b15b      	cbz	r3, 8005a3e <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8005a26:	2302      	movs	r3, #2
 8005a28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a2c:	1d21      	adds	r1, r4, #4
 8005a2e:	6820      	ldr	r0, [r4, #0]
 8005a30:	f7ff ff8c 	bl	800594c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005a34:	2301      	movs	r3, #1
 8005a36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005a3a:	2000      	movs	r0, #0
}
 8005a3c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005a3e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005a42:	f002 f871 	bl	8007b28 <HAL_TIM_PWM_MspInit>
 8005a46:	e7ee      	b.n	8005a26 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8005a48:	2001      	movs	r0, #1
}
 8005a4a:	4770      	bx	lr

08005a4c <TIM_OC2_SetConfig>:
{
 8005a4c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a4e:	6a03      	ldr	r3, [r0, #32]
 8005a50:	f023 0310 	bic.w	r3, r3, #16
 8005a54:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005a56:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005a58:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005a5a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a5c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a60:	680d      	ldr	r5, [r1, #0]
 8005a62:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8005a66:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a6a:	688d      	ldr	r5, [r1, #8]
 8005a6c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a70:	4d0e      	ldr	r5, [pc, #56]	; (8005aac <TIM_OC2_SetConfig+0x60>)
 8005a72:	42a8      	cmp	r0, r5
 8005a74:	d009      	beq.n	8005a8a <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a76:	4d0d      	ldr	r5, [pc, #52]	; (8005aac <TIM_OC2_SetConfig+0x60>)
 8005a78:	42a8      	cmp	r0, r5
 8005a7a:	d00e      	beq.n	8005a9a <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8005a7c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005a7e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005a80:	684a      	ldr	r2, [r1, #4]
 8005a82:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005a84:	6203      	str	r3, [r0, #32]
}
 8005a86:	bc30      	pop	{r4, r5}
 8005a88:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a8e:	68cd      	ldr	r5, [r1, #12]
 8005a90:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a98:	e7ed      	b.n	8005a76 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a9a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a9e:	694d      	ldr	r5, [r1, #20]
 8005aa0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005aa4:	698d      	ldr	r5, [r1, #24]
 8005aa6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8005aaa:	e7e7      	b.n	8005a7c <TIM_OC2_SetConfig+0x30>
 8005aac:	40010000 	.word	0x40010000

08005ab0 <HAL_TIM_PWM_ConfigChannel>:
{
 8005ab0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005ab2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d066      	beq.n	8005b88 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8005aba:	460d      	mov	r5, r1
 8005abc:	4604      	mov	r4, r0
 8005abe:	2301      	movs	r3, #1
 8005ac0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8005aca:	2a0c      	cmp	r2, #12
 8005acc:	d81a      	bhi.n	8005b04 <HAL_TIM_PWM_ConfigChannel+0x54>
 8005ace:	e8df f002 	tbb	[pc, r2]
 8005ad2:	1907      	.short	0x1907
 8005ad4:	19201919 	.word	0x19201919
 8005ad8:	19341919 	.word	0x19341919
 8005adc:	1919      	.short	0x1919
 8005ade:	47          	.byte	0x47
 8005adf:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ae0:	6800      	ldr	r0, [r0, #0]
 8005ae2:	f7ff fdcb 	bl	800567c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ae6:	6822      	ldr	r2, [r4, #0]
 8005ae8:	6993      	ldr	r3, [r2, #24]
 8005aea:	f043 0308 	orr.w	r3, r3, #8
 8005aee:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005af0:	6822      	ldr	r2, [r4, #0]
 8005af2:	6993      	ldr	r3, [r2, #24]
 8005af4:	f023 0304 	bic.w	r3, r3, #4
 8005af8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005afa:	6822      	ldr	r2, [r4, #0]
 8005afc:	6993      	ldr	r3, [r2, #24]
 8005afe:	6929      	ldr	r1, [r5, #16]
 8005b00:	430b      	orrs	r3, r1
 8005b02:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8005b04:	2301      	movs	r3, #1
 8005b06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005b10:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b12:	6800      	ldr	r0, [r0, #0]
 8005b14:	f7ff ff9a 	bl	8005a4c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b18:	6822      	ldr	r2, [r4, #0]
 8005b1a:	6993      	ldr	r3, [r2, #24]
 8005b1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b20:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b22:	6822      	ldr	r2, [r4, #0]
 8005b24:	6993      	ldr	r3, [r2, #24]
 8005b26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b2a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b2c:	6822      	ldr	r2, [r4, #0]
 8005b2e:	6993      	ldr	r3, [r2, #24]
 8005b30:	6929      	ldr	r1, [r5, #16]
 8005b32:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005b36:	6193      	str	r3, [r2, #24]
      break;
 8005b38:	e7e4      	b.n	8005b04 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b3a:	6800      	ldr	r0, [r0, #0]
 8005b3c:	f7ff fdcc 	bl	80056d8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b40:	6822      	ldr	r2, [r4, #0]
 8005b42:	69d3      	ldr	r3, [r2, #28]
 8005b44:	f043 0308 	orr.w	r3, r3, #8
 8005b48:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b4a:	6822      	ldr	r2, [r4, #0]
 8005b4c:	69d3      	ldr	r3, [r2, #28]
 8005b4e:	f023 0304 	bic.w	r3, r3, #4
 8005b52:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b54:	6822      	ldr	r2, [r4, #0]
 8005b56:	69d3      	ldr	r3, [r2, #28]
 8005b58:	6929      	ldr	r1, [r5, #16]
 8005b5a:	430b      	orrs	r3, r1
 8005b5c:	61d3      	str	r3, [r2, #28]
      break;
 8005b5e:	e7d1      	b.n	8005b04 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b60:	6800      	ldr	r0, [r0, #0]
 8005b62:	f7ff fdeb 	bl	800573c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b66:	6822      	ldr	r2, [r4, #0]
 8005b68:	69d3      	ldr	r3, [r2, #28]
 8005b6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b6e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b70:	6822      	ldr	r2, [r4, #0]
 8005b72:	69d3      	ldr	r3, [r2, #28]
 8005b74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b78:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b7a:	6822      	ldr	r2, [r4, #0]
 8005b7c:	69d3      	ldr	r3, [r2, #28]
 8005b7e:	6929      	ldr	r1, [r5, #16]
 8005b80:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005b84:	61d3      	str	r3, [r2, #28]
      break;
 8005b86:	e7bd      	b.n	8005b04 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8005b88:	2002      	movs	r0, #2
 8005b8a:	e7c1      	b.n	8005b10 <HAL_TIM_PWM_ConfigChannel+0x60>

08005b8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b8c:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b8e:	f001 011f 	and.w	r1, r1, #31
 8005b92:	2301      	movs	r3, #1
 8005b94:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b98:	6a03      	ldr	r3, [r0, #32]
 8005b9a:	ea23 0304 	bic.w	r3, r3, r4
 8005b9e:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ba0:	6a03      	ldr	r3, [r0, #32]
 8005ba2:	408a      	lsls	r2, r1
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	6203      	str	r3, [r0, #32]
}
 8005ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bac:	4770      	bx	lr
	...

08005bb0 <HAL_TIM_PWM_Start>:
{
 8005bb0:	b510      	push	{r4, lr}
 8005bb2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	6800      	ldr	r0, [r0, #0]
 8005bb8:	f7ff ffe8 	bl	8005b8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	4a0a      	ldr	r2, [pc, #40]	; (8005be8 <HAL_TIM_PWM_Start+0x38>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00b      	beq.n	8005bdc <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bc4:	6822      	ldr	r2, [r4, #0]
 8005bc6:	6893      	ldr	r3, [r2, #8]
 8005bc8:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bcc:	2b06      	cmp	r3, #6
 8005bce:	d003      	beq.n	8005bd8 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 8005bd0:	6813      	ldr	r3, [r2, #0]
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	6013      	str	r3, [r2, #0]
}
 8005bd8:	2000      	movs	r0, #0
 8005bda:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8005bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005be2:	645a      	str	r2, [r3, #68]	; 0x44
 8005be4:	e7ee      	b.n	8005bc4 <HAL_TIM_PWM_Start+0x14>
 8005be6:	bf00      	nop
 8005be8:	40010000 	.word	0x40010000

08005bec <HAL_TIM_PWM_Stop>:
{
 8005bec:	b510      	push	{r4, lr}
 8005bee:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	6800      	ldr	r0, [r0, #0]
 8005bf4:	f7ff ffca 	bl	8005b8c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	4a13      	ldr	r2, [pc, #76]	; (8005c48 <HAL_TIM_PWM_Stop+0x5c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d013      	beq.n	8005c28 <HAL_TIM_PWM_Stop+0x3c>
  __HAL_TIM_DISABLE(htim);
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	6a19      	ldr	r1, [r3, #32]
 8005c04:	f241 1211 	movw	r2, #4369	; 0x1111
 8005c08:	4211      	tst	r1, r2
 8005c0a:	d108      	bne.n	8005c1e <HAL_TIM_PWM_Stop+0x32>
 8005c0c:	6a19      	ldr	r1, [r3, #32]
 8005c0e:	f240 4244 	movw	r2, #1092	; 0x444
 8005c12:	4211      	tst	r1, r2
 8005c14:	d103      	bne.n	8005c1e <HAL_TIM_PWM_Stop+0x32>
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	f022 0201 	bic.w	r2, r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005c24:	2000      	movs	r0, #0
 8005c26:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_DISABLE(htim);
 8005c28:	6a19      	ldr	r1, [r3, #32]
 8005c2a:	f241 1211 	movw	r2, #4369	; 0x1111
 8005c2e:	4211      	tst	r1, r2
 8005c30:	d1e6      	bne.n	8005c00 <HAL_TIM_PWM_Stop+0x14>
 8005c32:	6a19      	ldr	r1, [r3, #32]
 8005c34:	f240 4244 	movw	r2, #1092	; 0x444
 8005c38:	4211      	tst	r1, r2
 8005c3a:	d1e1      	bne.n	8005c00 <HAL_TIM_PWM_Stop+0x14>
 8005c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c42:	645a      	str	r2, [r3, #68]	; 0x44
 8005c44:	e7dc      	b.n	8005c00 <HAL_TIM_PWM_Stop+0x14>
 8005c46:	bf00      	nop
 8005c48:	40010000 	.word	0x40010000

08005c4c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c4c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d01c      	beq.n	8005c8e <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8005c54:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8005c56:	2601      	movs	r6, #1
 8005c58:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c62:	6802      	ldr	r2, [r0, #0]
 8005c64:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c66:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c68:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c6c:	680c      	ldr	r4, [r1, #0]
 8005c6e:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005c70:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c74:	684b      	ldr	r3, [r1, #4]
 8005c76:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c78:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c7a:	6802      	ldr	r2, [r0, #0]
 8005c7c:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c7e:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c82:	2300      	movs	r3, #0
 8005c84:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005c88:	4618      	mov	r0, r3
}
 8005c8a:	bc70      	pop	{r4, r5, r6}
 8005c8c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005c8e:	2002      	movs	r0, #2
}
 8005c90:	4770      	bx	lr

08005c92 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c92:	4770      	bx	lr

08005c94 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c94:	4770      	bx	lr
	...

08005c98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c9c:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c9e:	6802      	ldr	r2, [r0, #0]
 8005ca0:	6913      	ldr	r3, [r2, #16]
 8005ca2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005ca6:	68c1      	ldr	r1, [r0, #12]
 8005ca8:	430b      	orrs	r3, r1
 8005caa:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cac:	6883      	ldr	r3, [r0, #8]
 8005cae:	6902      	ldr	r2, [r0, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	6942      	ldr	r2, [r0, #20]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	69c2      	ldr	r2, [r0, #28]
 8005cb8:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8005cba:	6801      	ldr	r1, [r0, #0]
 8005cbc:	68cb      	ldr	r3, [r1, #12]
 8005cbe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005cc2:	f023 030c 	bic.w	r3, r3, #12
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cca:	6802      	ldr	r2, [r0, #0]
 8005ccc:	6953      	ldr	r3, [r2, #20]
 8005cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd2:	6981      	ldr	r1, [r0, #24]
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cd8:	69c3      	ldr	r3, [r0, #28]
 8005cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cde:	d060      	beq.n	8005da2 <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ce0:	6803      	ldr	r3, [r0, #0]
 8005ce2:	4ab8      	ldr	r2, [pc, #736]	; (8005fc4 <UART_SetConfig+0x32c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	f000 8114 	beq.w	8005f12 <UART_SetConfig+0x27a>
 8005cea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	f000 810f 	beq.w	8005f12 <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005cf4:	f7ff f84c 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
 8005cf8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005cfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d00:	6865      	ldr	r5, [r4, #4]
 8005d02:	00ad      	lsls	r5, r5, #2
 8005d04:	fbb0 f5f5 	udiv	r5, r0, r5
 8005d08:	4faf      	ldr	r7, [pc, #700]	; (8005fc8 <UART_SetConfig+0x330>)
 8005d0a:	fba7 3505 	umull	r3, r5, r7, r5
 8005d0e:	096d      	lsrs	r5, r5, #5
 8005d10:	012e      	lsls	r6, r5, #4
 8005d12:	f7ff f83d 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
 8005d16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d1e:	6865      	ldr	r5, [r4, #4]
 8005d20:	00ad      	lsls	r5, r5, #2
 8005d22:	fbb0 f9f5 	udiv	r9, r0, r5
 8005d26:	f7ff f833 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
 8005d2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d32:	6865      	ldr	r5, [r4, #4]
 8005d34:	00ad      	lsls	r5, r5, #2
 8005d36:	fbb0 f5f5 	udiv	r5, r0, r5
 8005d3a:	fba7 3505 	umull	r3, r5, r7, r5
 8005d3e:	096d      	lsrs	r5, r5, #5
 8005d40:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005d44:	fb08 9515 	mls	r5, r8, r5, r9
 8005d48:	012d      	lsls	r5, r5, #4
 8005d4a:	3532      	adds	r5, #50	; 0x32
 8005d4c:	fba7 3505 	umull	r3, r5, r7, r5
 8005d50:	096d      	lsrs	r5, r5, #5
 8005d52:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8005d56:	4435      	add	r5, r6
 8005d58:	f7ff f81a 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
 8005d5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d64:	6866      	ldr	r6, [r4, #4]
 8005d66:	00b6      	lsls	r6, r6, #2
 8005d68:	fbb0 f6f6 	udiv	r6, r0, r6
 8005d6c:	f7ff f810 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
 8005d70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d78:	6863      	ldr	r3, [r4, #4]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	fbb0 f0f3 	udiv	r0, r0, r3
 8005d80:	fba7 3000 	umull	r3, r0, r7, r0
 8005d84:	0940      	lsrs	r0, r0, #5
 8005d86:	fb08 6810 	mls	r8, r8, r0, r6
 8005d8a:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8005d8e:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005d92:	fba7 3708 	umull	r3, r7, r7, r8
 8005d96:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	442f      	add	r7, r5
 8005d9e:	609f      	str	r7, [r3, #8]
    }
  }
}
 8005da0:	e10d      	b.n	8005fbe <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005da2:	6803      	ldr	r3, [r0, #0]
 8005da4:	4a87      	ldr	r2, [pc, #540]	; (8005fc4 <UART_SetConfig+0x32c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d05b      	beq.n	8005e62 <UART_SetConfig+0x1ca>
 8005daa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d057      	beq.n	8005e62 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005db2:	f7fe ffed 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
 8005db6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005dba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005dbe:	6865      	ldr	r5, [r4, #4]
 8005dc0:	006d      	lsls	r5, r5, #1
 8005dc2:	fbb0 f5f5 	udiv	r5, r0, r5
 8005dc6:	4f80      	ldr	r7, [pc, #512]	; (8005fc8 <UART_SetConfig+0x330>)
 8005dc8:	fba7 3505 	umull	r3, r5, r7, r5
 8005dcc:	096d      	lsrs	r5, r5, #5
 8005dce:	012e      	lsls	r6, r5, #4
 8005dd0:	f7fe ffde 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
 8005dd4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005dd8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ddc:	6865      	ldr	r5, [r4, #4]
 8005dde:	006d      	lsls	r5, r5, #1
 8005de0:	fbb0 f9f5 	udiv	r9, r0, r5
 8005de4:	f7fe ffd4 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
 8005de8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005dec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005df0:	6865      	ldr	r5, [r4, #4]
 8005df2:	006d      	lsls	r5, r5, #1
 8005df4:	fbb0 f5f5 	udiv	r5, r0, r5
 8005df8:	fba7 3505 	umull	r3, r5, r7, r5
 8005dfc:	096d      	lsrs	r5, r5, #5
 8005dfe:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005e02:	fb08 9515 	mls	r5, r8, r5, r9
 8005e06:	00ed      	lsls	r5, r5, #3
 8005e08:	3532      	adds	r5, #50	; 0x32
 8005e0a:	fba7 3505 	umull	r3, r5, r7, r5
 8005e0e:	096d      	lsrs	r5, r5, #5
 8005e10:	006d      	lsls	r5, r5, #1
 8005e12:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8005e16:	4435      	add	r5, r6
 8005e18:	f7fe ffba 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
 8005e1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e24:	6866      	ldr	r6, [r4, #4]
 8005e26:	0076      	lsls	r6, r6, #1
 8005e28:	fbb0 f6f6 	udiv	r6, r0, r6
 8005e2c:	f7fe ffb0 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
 8005e30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e38:	6863      	ldr	r3, [r4, #4]
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e40:	fba7 2303 	umull	r2, r3, r7, r3
 8005e44:	095b      	lsrs	r3, r3, #5
 8005e46:	fb08 6813 	mls	r8, r8, r3, r6
 8005e4a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8005e4e:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005e52:	fba7 3708 	umull	r3, r7, r7, r8
 8005e56:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	442f      	add	r7, r5
 8005e5e:	609f      	str	r7, [r3, #8]
 8005e60:	e0ad      	b.n	8005fbe <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005e62:	f7fe ffa5 	bl	8004db0 <HAL_RCC_GetPCLK2Freq>
 8005e66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e6e:	6865      	ldr	r5, [r4, #4]
 8005e70:	006d      	lsls	r5, r5, #1
 8005e72:	fbb0 f5f5 	udiv	r5, r0, r5
 8005e76:	4f54      	ldr	r7, [pc, #336]	; (8005fc8 <UART_SetConfig+0x330>)
 8005e78:	fba7 3505 	umull	r3, r5, r7, r5
 8005e7c:	096d      	lsrs	r5, r5, #5
 8005e7e:	012e      	lsls	r6, r5, #4
 8005e80:	f7fe ff96 	bl	8004db0 <HAL_RCC_GetPCLK2Freq>
 8005e84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e8c:	6865      	ldr	r5, [r4, #4]
 8005e8e:	006d      	lsls	r5, r5, #1
 8005e90:	fbb0 f9f5 	udiv	r9, r0, r5
 8005e94:	f7fe ff8c 	bl	8004db0 <HAL_RCC_GetPCLK2Freq>
 8005e98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ea0:	6865      	ldr	r5, [r4, #4]
 8005ea2:	006d      	lsls	r5, r5, #1
 8005ea4:	fbb0 f5f5 	udiv	r5, r0, r5
 8005ea8:	fba7 3505 	umull	r3, r5, r7, r5
 8005eac:	096d      	lsrs	r5, r5, #5
 8005eae:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005eb2:	fb08 9515 	mls	r5, r8, r5, r9
 8005eb6:	00ed      	lsls	r5, r5, #3
 8005eb8:	3532      	adds	r5, #50	; 0x32
 8005eba:	fba7 3505 	umull	r3, r5, r7, r5
 8005ebe:	096d      	lsrs	r5, r5, #5
 8005ec0:	006d      	lsls	r5, r5, #1
 8005ec2:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8005ec6:	4435      	add	r5, r6
 8005ec8:	f7fe ff72 	bl	8004db0 <HAL_RCC_GetPCLK2Freq>
 8005ecc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ed0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ed4:	6866      	ldr	r6, [r4, #4]
 8005ed6:	0076      	lsls	r6, r6, #1
 8005ed8:	fbb0 f6f6 	udiv	r6, r0, r6
 8005edc:	f7fe ff68 	bl	8004db0 <HAL_RCC_GetPCLK2Freq>
 8005ee0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ee4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ee8:	6863      	ldr	r3, [r4, #4]
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ef0:	fba7 2303 	umull	r2, r3, r7, r3
 8005ef4:	095b      	lsrs	r3, r3, #5
 8005ef6:	fb08 6813 	mls	r8, r8, r3, r6
 8005efa:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8005efe:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005f02:	fba7 3708 	umull	r3, r7, r7, r8
 8005f06:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	442f      	add	r7, r5
 8005f0e:	609f      	str	r7, [r3, #8]
 8005f10:	e055      	b.n	8005fbe <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005f12:	f7fe ff4d 	bl	8004db0 <HAL_RCC_GetPCLK2Freq>
 8005f16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f1e:	6865      	ldr	r5, [r4, #4]
 8005f20:	00ad      	lsls	r5, r5, #2
 8005f22:	fbb0 f5f5 	udiv	r5, r0, r5
 8005f26:	4f28      	ldr	r7, [pc, #160]	; (8005fc8 <UART_SetConfig+0x330>)
 8005f28:	fba7 3505 	umull	r3, r5, r7, r5
 8005f2c:	096d      	lsrs	r5, r5, #5
 8005f2e:	012e      	lsls	r6, r5, #4
 8005f30:	f7fe ff3e 	bl	8004db0 <HAL_RCC_GetPCLK2Freq>
 8005f34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f3c:	6865      	ldr	r5, [r4, #4]
 8005f3e:	00ad      	lsls	r5, r5, #2
 8005f40:	fbb0 f9f5 	udiv	r9, r0, r5
 8005f44:	f7fe ff34 	bl	8004db0 <HAL_RCC_GetPCLK2Freq>
 8005f48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f50:	6865      	ldr	r5, [r4, #4]
 8005f52:	00ad      	lsls	r5, r5, #2
 8005f54:	fbb0 f5f5 	udiv	r5, r0, r5
 8005f58:	fba7 3505 	umull	r3, r5, r7, r5
 8005f5c:	096d      	lsrs	r5, r5, #5
 8005f5e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005f62:	fb08 9515 	mls	r5, r8, r5, r9
 8005f66:	012d      	lsls	r5, r5, #4
 8005f68:	3532      	adds	r5, #50	; 0x32
 8005f6a:	fba7 3505 	umull	r3, r5, r7, r5
 8005f6e:	096d      	lsrs	r5, r5, #5
 8005f70:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8005f74:	4435      	add	r5, r6
 8005f76:	f7fe ff1b 	bl	8004db0 <HAL_RCC_GetPCLK2Freq>
 8005f7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f82:	6866      	ldr	r6, [r4, #4]
 8005f84:	00b6      	lsls	r6, r6, #2
 8005f86:	fbb0 f6f6 	udiv	r6, r0, r6
 8005f8a:	f7fe ff11 	bl	8004db0 <HAL_RCC_GetPCLK2Freq>
 8005f8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f96:	6863      	ldr	r3, [r4, #4]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8005f9e:	fba7 3000 	umull	r3, r0, r7, r0
 8005fa2:	0940      	lsrs	r0, r0, #5
 8005fa4:	fb08 6810 	mls	r8, r8, r0, r6
 8005fa8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8005fac:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005fb0:	fba7 3708 	umull	r3, r7, r7, r8
 8005fb4:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8005fb8:	6823      	ldr	r3, [r4, #0]
 8005fba:	442f      	add	r7, r5
 8005fbc:	609f      	str	r7, [r3, #8]
}
 8005fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fc2:	bf00      	nop
 8005fc4:	40011000 	.word	0x40011000
 8005fc8:	51eb851f 	.word	0x51eb851f

08005fcc <UART_WaitOnFlagUntilTimeout>:
{
 8005fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd0:	4605      	mov	r5, r0
 8005fd2:	460f      	mov	r7, r1
 8005fd4:	4616      	mov	r6, r2
 8005fd6:	4698      	mov	r8, r3
 8005fd8:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fda:	682b      	ldr	r3, [r5, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	ea37 0303 	bics.w	r3, r7, r3
 8005fe2:	bf0c      	ite	eq
 8005fe4:	2301      	moveq	r3, #1
 8005fe6:	2300      	movne	r3, #0
 8005fe8:	42b3      	cmp	r3, r6
 8005fea:	d11d      	bne.n	8006028 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8005fec:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8005ff0:	d0f3      	beq.n	8005fda <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ff2:	b12c      	cbz	r4, 8006000 <UART_WaitOnFlagUntilTimeout+0x34>
 8005ff4:	f7fd fb20 	bl	8003638 <HAL_GetTick>
 8005ff8:	eba0 0008 	sub.w	r0, r0, r8
 8005ffc:	42a0      	cmp	r0, r4
 8005ffe:	d9ec      	bls.n	8005fda <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006000:	682a      	ldr	r2, [r5, #0]
 8006002:	68d3      	ldr	r3, [r2, #12]
 8006004:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006008:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600a:	682a      	ldr	r2, [r5, #0]
 800600c:	6953      	ldr	r3, [r2, #20]
 800600e:	f023 0301 	bic.w	r3, r3, #1
 8006012:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8006014:	2320      	movs	r3, #32
 8006016:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800601a:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800601e:	2300      	movs	r3, #0
 8006020:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8006024:	2003      	movs	r0, #3
 8006026:	e000      	b.n	800602a <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8006028:	2000      	movs	r0, #0
}
 800602a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800602e <HAL_UART_Init>:
  if (huart == NULL)
 800602e:	b358      	cbz	r0, 8006088 <HAL_UART_Init+0x5a>
{
 8006030:	b510      	push	{r4, lr}
 8006032:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006034:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8006038:	b30b      	cbz	r3, 800607e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800603a:	2324      	movs	r3, #36	; 0x24
 800603c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8006040:	6822      	ldr	r2, [r4, #0]
 8006042:	68d3      	ldr	r3, [r2, #12]
 8006044:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006048:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800604a:	4620      	mov	r0, r4
 800604c:	f7ff fe24 	bl	8005c98 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006050:	6822      	ldr	r2, [r4, #0]
 8006052:	6913      	ldr	r3, [r2, #16]
 8006054:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006058:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800605a:	6822      	ldr	r2, [r4, #0]
 800605c:	6953      	ldr	r3, [r2, #20]
 800605e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006062:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8006064:	6822      	ldr	r2, [r4, #0]
 8006066:	68d3      	ldr	r3, [r2, #12]
 8006068:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800606c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800606e:	2000      	movs	r0, #0
 8006070:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006072:	2320      	movs	r3, #32
 8006074:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006078:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800607c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800607e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8006082:	f001 fdad 	bl	8007be0 <HAL_UART_MspInit>
 8006086:	e7d8      	b.n	800603a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8006088:	2001      	movs	r0, #1
}
 800608a:	4770      	bx	lr

0800608c <HAL_UART_Transmit>:
{
 800608c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006090:	b082      	sub	sp, #8
 8006092:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006094:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b20      	cmp	r3, #32
 800609c:	d155      	bne.n	800614a <HAL_UART_Transmit+0xbe>
 800609e:	4604      	mov	r4, r0
 80060a0:	460d      	mov	r5, r1
 80060a2:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80060a4:	2900      	cmp	r1, #0
 80060a6:	d055      	beq.n	8006154 <HAL_UART_Transmit+0xc8>
 80060a8:	2a00      	cmp	r2, #0
 80060aa:	d055      	beq.n	8006158 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 80060ac:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d053      	beq.n	800615c <HAL_UART_Transmit+0xd0>
 80060b4:	2301      	movs	r3, #1
 80060b6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ba:	2300      	movs	r3, #0
 80060bc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060be:	2321      	movs	r3, #33	; 0x21
 80060c0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80060c4:	f7fd fab8 	bl	8003638 <HAL_GetTick>
 80060c8:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80060ca:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80060ce:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80060d2:	e010      	b.n	80060f6 <HAL_UART_Transmit+0x6a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060d4:	9600      	str	r6, [sp, #0]
 80060d6:	463b      	mov	r3, r7
 80060d8:	2200      	movs	r2, #0
 80060da:	2180      	movs	r1, #128	; 0x80
 80060dc:	4620      	mov	r0, r4
 80060de:	f7ff ff75 	bl	8005fcc <UART_WaitOnFlagUntilTimeout>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d13c      	bne.n	8006160 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80060e6:	882b      	ldrh	r3, [r5, #0]
 80060e8:	6822      	ldr	r2, [r4, #0]
 80060ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ee:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80060f0:	6923      	ldr	r3, [r4, #16]
 80060f2:	b9c3      	cbnz	r3, 8006126 <HAL_UART_Transmit+0x9a>
          pData += 2U;
 80060f4:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 80060f6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	b1b3      	cbz	r3, 800612a <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 80060fc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80060fe:	3b01      	subs	r3, #1
 8006100:	b29b      	uxth	r3, r3
 8006102:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006104:	68a3      	ldr	r3, [r4, #8]
 8006106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800610a:	d0e3      	beq.n	80060d4 <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800610c:	9600      	str	r6, [sp, #0]
 800610e:	463b      	mov	r3, r7
 8006110:	2200      	movs	r2, #0
 8006112:	2180      	movs	r1, #128	; 0x80
 8006114:	4620      	mov	r0, r4
 8006116:	f7ff ff59 	bl	8005fcc <UART_WaitOnFlagUntilTimeout>
 800611a:	bb18      	cbnz	r0, 8006164 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800611c:	782a      	ldrb	r2, [r5, #0]
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	605a      	str	r2, [r3, #4]
 8006122:	3501      	adds	r5, #1
 8006124:	e7e7      	b.n	80060f6 <HAL_UART_Transmit+0x6a>
          pData += 1U;
 8006126:	3501      	adds	r5, #1
 8006128:	e7e5      	b.n	80060f6 <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800612a:	9600      	str	r6, [sp, #0]
 800612c:	463b      	mov	r3, r7
 800612e:	2200      	movs	r2, #0
 8006130:	2140      	movs	r1, #64	; 0x40
 8006132:	4620      	mov	r0, r4
 8006134:	f7ff ff4a 	bl	8005fcc <UART_WaitOnFlagUntilTimeout>
 8006138:	4603      	mov	r3, r0
 800613a:	b9a8      	cbnz	r0, 8006168 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 800613c:	2220      	movs	r2, #32
 800613e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8006142:	2200      	movs	r2, #0
 8006144:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8006148:	e000      	b.n	800614c <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 800614a:	2302      	movs	r3, #2
}
 800614c:	4618      	mov	r0, r3
 800614e:	b002      	add	sp, #8
 8006150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e7f9      	b.n	800614c <HAL_UART_Transmit+0xc0>
 8006158:	2301      	movs	r3, #1
 800615a:	e7f7      	b.n	800614c <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 800615c:	2302      	movs	r3, #2
 800615e:	e7f5      	b.n	800614c <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e7f3      	b.n	800614c <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e7f1      	b.n	800614c <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e7ef      	b.n	800614c <HAL_UART_Transmit+0xc0>

0800616c <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800616c:	2884      	cmp	r0, #132	; 0x84
 800616e:	d001      	beq.n	8006174 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8006170:	3003      	adds	r0, #3
 8006172:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006174:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8006176:	4770      	bx	lr

08006178 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006178:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800617a:	f000 fa75 	bl	8006668 <vTaskStartScheduler>
  
  return osOK;
}
 800617e:	2000      	movs	r0, #0
 8006180:	bd08      	pop	{r3, pc}

08006182 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006182:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006186:	b087      	sub	sp, #28
 8006188:	4604      	mov	r4, r0
 800618a:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800618c:	6945      	ldr	r5, [r0, #20]
 800618e:	b1a5      	cbz	r5, 80061ba <osThreadCreate+0x38>
 8006190:	6986      	ldr	r6, [r0, #24]
 8006192:	b196      	cbz	r6, 80061ba <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006194:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8006198:	f8d0 9000 	ldr.w	r9, [r0]
 800619c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80061a0:	f7ff ffe4 	bl	800616c <makeFreeRtosPriority>
 80061a4:	6922      	ldr	r2, [r4, #16]
 80061a6:	9602      	str	r6, [sp, #8]
 80061a8:	9501      	str	r5, [sp, #4]
 80061aa:	9000      	str	r0, [sp, #0]
 80061ac:	463b      	mov	r3, r7
 80061ae:	4649      	mov	r1, r9
 80061b0:	4640      	mov	r0, r8
 80061b2:	f000 f9ed 	bl	8006590 <xTaskCreateStatic>
 80061b6:	9005      	str	r0, [sp, #20]
 80061b8:	e013      	b.n	80061e2 <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061ba:	6865      	ldr	r5, [r4, #4]
 80061bc:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80061be:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80061c2:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80061c6:	f7ff ffd1 	bl	800616c <makeFreeRtosPriority>
 80061ca:	ab05      	add	r3, sp, #20
 80061cc:	9301      	str	r3, [sp, #4]
 80061ce:	9000      	str	r0, [sp, #0]
 80061d0:	463b      	mov	r3, r7
 80061d2:	fa1f f288 	uxth.w	r2, r8
 80061d6:	4631      	mov	r1, r6
 80061d8:	4628      	mov	r0, r5
 80061da:	f000 fa12 	bl	8006602 <xTaskCreate>
 80061de:	2801      	cmp	r0, #1
 80061e0:	d103      	bne.n	80061ea <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80061e2:	9805      	ldr	r0, [sp, #20]
}
 80061e4:	b007      	add	sp, #28
 80061e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 80061ea:	2000      	movs	r0, #0
 80061ec:	e7fa      	b.n	80061e4 <osThreadCreate+0x62>

080061ee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80061ee:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80061f0:	4603      	mov	r3, r0
 80061f2:	b900      	cbnz	r0, 80061f6 <osDelay+0x8>
 80061f4:	2301      	movs	r3, #1
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 fb7a 	bl	80068f0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80061fc:	2000      	movs	r0, #0
 80061fe:	bd08      	pop	{r3, pc}

08006200 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006200:	f100 0308 	add.w	r3, r0, #8
 8006204:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006206:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800620a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800620c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800620e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006214:	4770      	bx	lr

08006216 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006216:	2300      	movs	r3, #0
 8006218:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800621a:	4770      	bx	lr

0800621c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800621c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800621e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006228:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800622a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800622c:	6803      	ldr	r3, [r0, #0]
 800622e:	3301      	adds	r3, #1
 8006230:	6003      	str	r3, [r0, #0]
}
 8006232:	4770      	bx	lr

08006234 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006234:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006236:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006238:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800623c:	d002      	beq.n	8006244 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800623e:	f100 0208 	add.w	r2, r0, #8
 8006242:	e002      	b.n	800624a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8006244:	6902      	ldr	r2, [r0, #16]
 8006246:	e004      	b.n	8006252 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006248:	461a      	mov	r2, r3
 800624a:	6853      	ldr	r3, [r2, #4]
 800624c:	681c      	ldr	r4, [r3, #0]
 800624e:	42ac      	cmp	r4, r5
 8006250:	d9fa      	bls.n	8006248 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006252:	6853      	ldr	r3, [r2, #4]
 8006254:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006256:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006258:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800625a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800625c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800625e:	6803      	ldr	r3, [r0, #0]
 8006260:	3301      	adds	r3, #1
 8006262:	6003      	str	r3, [r0, #0]
}
 8006264:	bc30      	pop	{r4, r5}
 8006266:	4770      	bx	lr

08006268 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006268:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800626a:	6842      	ldr	r2, [r0, #4]
 800626c:	6881      	ldr	r1, [r0, #8]
 800626e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006270:	6882      	ldr	r2, [r0, #8]
 8006272:	6841      	ldr	r1, [r0, #4]
 8006274:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	4282      	cmp	r2, r0
 800627a:	d006      	beq.n	800628a <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800627c:	2200      	movs	r2, #0
 800627e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	3a01      	subs	r2, #1
 8006284:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006286:	6818      	ldr	r0, [r3, #0]
}
 8006288:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800628a:	6882      	ldr	r2, [r0, #8]
 800628c:	605a      	str	r2, [r3, #4]
 800628e:	e7f5      	b.n	800627c <uxListRemove+0x14>

08006290 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006290:	4b08      	ldr	r3, [pc, #32]	; (80062b4 <prvResetNextTaskUnblockTime+0x24>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	b13b      	cbz	r3, 80062a8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006298:	4b06      	ldr	r3, [pc, #24]	; (80062b4 <prvResetNextTaskUnblockTime+0x24>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <prvResetNextTaskUnblockTime+0x28>)
 80062a4:	601a      	str	r2, [r3, #0]
	}
}
 80062a6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 80062a8:	4b03      	ldr	r3, [pc, #12]	; (80062b8 <prvResetNextTaskUnblockTime+0x28>)
 80062aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	20000340 	.word	0x20000340
 80062b8:	20000414 	.word	0x20000414

080062bc <prvInitialiseNewTask>:
{
 80062bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c0:	4680      	mov	r8, r0
 80062c2:	4699      	mov	r9, r3
 80062c4:	9d08      	ldr	r5, [sp, #32]
 80062c6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80062c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80062ca:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80062cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80062d0:	3a01      	subs	r2, #1
 80062d2:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80062d6:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062da:	2300      	movs	r3, #0
 80062dc:	2b0f      	cmp	r3, #15
 80062de:	d807      	bhi.n	80062f0 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062e0:	5cc8      	ldrb	r0, [r1, r3]
 80062e2:	18e2      	adds	r2, r4, r3
 80062e4:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 80062e8:	5cca      	ldrb	r2, [r1, r3]
 80062ea:	b10a      	cbz	r2, 80062f0 <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062ec:	3301      	adds	r3, #1
 80062ee:	e7f5      	b.n	80062dc <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062f0:	2300      	movs	r3, #0
 80062f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062f6:	2d06      	cmp	r5, #6
 80062f8:	d900      	bls.n	80062fc <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062fa:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80062fc:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80062fe:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006300:	f04f 0a00 	mov.w	sl, #0
 8006304:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006308:	1d20      	adds	r0, r4, #4
 800630a:	f7ff ff84 	bl	8006216 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800630e:	f104 0018 	add.w	r0, r4, #24
 8006312:	f7ff ff80 	bl	8006216 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006316:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006318:	f1c5 0507 	rsb	r5, r5, #7
 800631c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800631e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8006320:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006324:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006328:	464a      	mov	r2, r9
 800632a:	4641      	mov	r1, r8
 800632c:	4630      	mov	r0, r6
 800632e:	f000 fb8f 	bl	8006a50 <pxPortInitialiseStack>
 8006332:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006334:	b107      	cbz	r7, 8006338 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006336:	603c      	str	r4, [r7, #0]
}
 8006338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800633c <prvInitialiseTaskLists>:
{
 800633c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800633e:	2400      	movs	r4, #0
 8006340:	e007      	b.n	8006352 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006342:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8006346:	0093      	lsls	r3, r2, #2
 8006348:	480e      	ldr	r0, [pc, #56]	; (8006384 <prvInitialiseTaskLists+0x48>)
 800634a:	4418      	add	r0, r3
 800634c:	f7ff ff58 	bl	8006200 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006350:	3401      	adds	r4, #1
 8006352:	2c06      	cmp	r4, #6
 8006354:	d9f5      	bls.n	8006342 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8006356:	4d0c      	ldr	r5, [pc, #48]	; (8006388 <prvInitialiseTaskLists+0x4c>)
 8006358:	4628      	mov	r0, r5
 800635a:	f7ff ff51 	bl	8006200 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800635e:	4c0b      	ldr	r4, [pc, #44]	; (800638c <prvInitialiseTaskLists+0x50>)
 8006360:	4620      	mov	r0, r4
 8006362:	f7ff ff4d 	bl	8006200 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006366:	480a      	ldr	r0, [pc, #40]	; (8006390 <prvInitialiseTaskLists+0x54>)
 8006368:	f7ff ff4a 	bl	8006200 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800636c:	4809      	ldr	r0, [pc, #36]	; (8006394 <prvInitialiseTaskLists+0x58>)
 800636e:	f7ff ff47 	bl	8006200 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006372:	4809      	ldr	r0, [pc, #36]	; (8006398 <prvInitialiseTaskLists+0x5c>)
 8006374:	f7ff ff44 	bl	8006200 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8006378:	4b08      	ldr	r3, [pc, #32]	; (800639c <prvInitialiseTaskLists+0x60>)
 800637a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800637c:	4b08      	ldr	r3, [pc, #32]	; (80063a0 <prvInitialiseTaskLists+0x64>)
 800637e:	601c      	str	r4, [r3, #0]
}
 8006380:	bd38      	pop	{r3, r4, r5, pc}
 8006382:	bf00      	nop
 8006384:	20000348 	.word	0x20000348
 8006388:	200003ec 	.word	0x200003ec
 800638c:	20000400 	.word	0x20000400
 8006390:	2000041c 	.word	0x2000041c
 8006394:	20000448 	.word	0x20000448
 8006398:	20000434 	.word	0x20000434
 800639c:	20000340 	.word	0x20000340
 80063a0:	20000344 	.word	0x20000344

080063a4 <prvAddNewTaskToReadyList>:
{
 80063a4:	b510      	push	{r4, lr}
 80063a6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80063a8:	f000 fb7c 	bl	8006aa4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80063ac:	4a20      	ldr	r2, [pc, #128]	; (8006430 <prvAddNewTaskToReadyList+0x8c>)
 80063ae:	6813      	ldr	r3, [r2, #0]
 80063b0:	3301      	adds	r3, #1
 80063b2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063b4:	4b1f      	ldr	r3, [pc, #124]	; (8006434 <prvAddNewTaskToReadyList+0x90>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	b15b      	cbz	r3, 80063d2 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 80063ba:	4b1f      	ldr	r3, [pc, #124]	; (8006438 <prvAddNewTaskToReadyList+0x94>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	b96b      	cbnz	r3, 80063dc <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063c0:	4b1c      	ldr	r3, [pc, #112]	; (8006434 <prvAddNewTaskToReadyList+0x90>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d807      	bhi.n	80063dc <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 80063cc:	4b19      	ldr	r3, [pc, #100]	; (8006434 <prvAddNewTaskToReadyList+0x90>)
 80063ce:	601c      	str	r4, [r3, #0]
 80063d0:	e004      	b.n	80063dc <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 80063d2:	4b18      	ldr	r3, [pc, #96]	; (8006434 <prvAddNewTaskToReadyList+0x90>)
 80063d4:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063d6:	6813      	ldr	r3, [r2, #0]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d026      	beq.n	800642a <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 80063dc:	4a17      	ldr	r2, [pc, #92]	; (800643c <prvAddNewTaskToReadyList+0x98>)
 80063de:	6813      	ldr	r3, [r2, #0]
 80063e0:	3301      	adds	r3, #1
 80063e2:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80063e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80063e6:	2201      	movs	r2, #1
 80063e8:	409a      	lsls	r2, r3
 80063ea:	4915      	ldr	r1, [pc, #84]	; (8006440 <prvAddNewTaskToReadyList+0x9c>)
 80063ec:	6808      	ldr	r0, [r1, #0]
 80063ee:	4302      	orrs	r2, r0
 80063f0:	600a      	str	r2, [r1, #0]
 80063f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80063f6:	009a      	lsls	r2, r3, #2
 80063f8:	1d21      	adds	r1, r4, #4
 80063fa:	4812      	ldr	r0, [pc, #72]	; (8006444 <prvAddNewTaskToReadyList+0xa0>)
 80063fc:	4410      	add	r0, r2
 80063fe:	f7ff ff0d 	bl	800621c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006402:	f000 fb71 	bl	8006ae8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006406:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <prvAddNewTaskToReadyList+0x94>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	b16b      	cbz	r3, 8006428 <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800640c:	4b09      	ldr	r3, [pc, #36]	; (8006434 <prvAddNewTaskToReadyList+0x90>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006412:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006414:	429a      	cmp	r2, r3
 8006416:	d207      	bcs.n	8006428 <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 8006418:	4b0b      	ldr	r3, [pc, #44]	; (8006448 <prvAddNewTaskToReadyList+0xa4>)
 800641a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	f3bf 8f6f 	isb	sy
}
 8006428:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800642a:	f7ff ff87 	bl	800633c <prvInitialiseTaskLists>
 800642e:	e7d5      	b.n	80063dc <prvAddNewTaskToReadyList+0x38>
 8006430:	200003d4 	.word	0x200003d4
 8006434:	2000033c 	.word	0x2000033c
 8006438:	20000430 	.word	0x20000430
 800643c:	200003e4 	.word	0x200003e4
 8006440:	200003e8 	.word	0x200003e8
 8006444:	20000348 	.word	0x20000348
 8006448:	e000ed04 	.word	0xe000ed04

0800644c <prvDeleteTCB>:
	{
 800644c:	b510      	push	{r4, lr}
 800644e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006450:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8006454:	b933      	cbnz	r3, 8006464 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 8006456:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8006458:	f000 fd30 	bl	8006ebc <vPortFree>
				vPortFree( pxTCB );
 800645c:	4620      	mov	r0, r4
 800645e:	f000 fd2d 	bl	8006ebc <vPortFree>
	}
 8006462:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006464:	2b01      	cmp	r3, #1
 8006466:	d00a      	beq.n	800647e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006468:	2b02      	cmp	r3, #2
 800646a:	d0fa      	beq.n	8006462 <prvDeleteTCB+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	e7fe      	b.n	800647c <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 800647e:	f000 fd1d 	bl	8006ebc <vPortFree>
 8006482:	e7ee      	b.n	8006462 <prvDeleteTCB+0x16>

08006484 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006484:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <prvCheckTasksWaitingTermination+0x40>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	b1d3      	cbz	r3, 80064c0 <prvCheckTasksWaitingTermination+0x3c>
{
 800648a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800648c:	f000 fb0a 	bl	8006aa4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006490:	4b0d      	ldr	r3, [pc, #52]	; (80064c8 <prvCheckTasksWaitingTermination+0x44>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006496:	1d20      	adds	r0, r4, #4
 8006498:	f7ff fee6 	bl	8006268 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800649c:	4a0b      	ldr	r2, [pc, #44]	; (80064cc <prvCheckTasksWaitingTermination+0x48>)
 800649e:	6813      	ldr	r3, [r2, #0]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80064a4:	4a07      	ldr	r2, [pc, #28]	; (80064c4 <prvCheckTasksWaitingTermination+0x40>)
 80064a6:	6813      	ldr	r3, [r2, #0]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80064ac:	f000 fb1c 	bl	8006ae8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80064b0:	4620      	mov	r0, r4
 80064b2:	f7ff ffcb 	bl	800644c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064b6:	4b03      	ldr	r3, [pc, #12]	; (80064c4 <prvCheckTasksWaitingTermination+0x40>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1e6      	bne.n	800648c <prvCheckTasksWaitingTermination+0x8>
}
 80064be:	bd10      	pop	{r4, pc}
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	200003d8 	.word	0x200003d8
 80064c8:	20000448 	.word	0x20000448
 80064cc:	200003d4 	.word	0x200003d4

080064d0 <prvIdleTask>:
{
 80064d0:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 80064d2:	f7ff ffd7 	bl	8006484 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064d6:	4b06      	ldr	r3, [pc, #24]	; (80064f0 <prvIdleTask+0x20>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d9f9      	bls.n	80064d2 <prvIdleTask+0x2>
				taskYIELD();
 80064de:	4b05      	ldr	r3, [pc, #20]	; (80064f4 <prvIdleTask+0x24>)
 80064e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	e7f0      	b.n	80064d2 <prvIdleTask+0x2>
 80064f0:	20000348 	.word	0x20000348
 80064f4:	e000ed04 	.word	0xe000ed04

080064f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064f8:	b570      	push	{r4, r5, r6, lr}
 80064fa:	4604      	mov	r4, r0
 80064fc:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064fe:	4b1d      	ldr	r3, [pc, #116]	; (8006574 <prvAddCurrentTaskToDelayedList+0x7c>)
 8006500:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006502:	4b1d      	ldr	r3, [pc, #116]	; (8006578 <prvAddCurrentTaskToDelayedList+0x80>)
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	3004      	adds	r0, #4
 8006508:	f7ff feae 	bl	8006268 <uxListRemove>
 800650c:	b950      	cbnz	r0, 8006524 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800650e:	4b1a      	ldr	r3, [pc, #104]	; (8006578 <prvAddCurrentTaskToDelayedList+0x80>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006514:	2301      	movs	r3, #1
 8006516:	fa03 f202 	lsl.w	r2, r3, r2
 800651a:	4918      	ldr	r1, [pc, #96]	; (800657c <prvAddCurrentTaskToDelayedList+0x84>)
 800651c:	680b      	ldr	r3, [r1, #0]
 800651e:	ea23 0302 	bic.w	r3, r3, r2
 8006522:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006524:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8006528:	d013      	beq.n	8006552 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800652a:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800652c:	4b12      	ldr	r3, [pc, #72]	; (8006578 <prvAddCurrentTaskToDelayedList+0x80>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8006532:	42a5      	cmp	r5, r4
 8006534:	d816      	bhi.n	8006564 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006536:	4b12      	ldr	r3, [pc, #72]	; (8006580 <prvAddCurrentTaskToDelayedList+0x88>)
 8006538:	6818      	ldr	r0, [r3, #0]
 800653a:	4b0f      	ldr	r3, [pc, #60]	; (8006578 <prvAddCurrentTaskToDelayedList+0x80>)
 800653c:	6819      	ldr	r1, [r3, #0]
 800653e:	3104      	adds	r1, #4
 8006540:	f7ff fe78 	bl	8006234 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8006544:	4b0f      	ldr	r3, [pc, #60]	; (8006584 <prvAddCurrentTaskToDelayedList+0x8c>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	42a3      	cmp	r3, r4
 800654a:	d912      	bls.n	8006572 <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800654c:	4b0d      	ldr	r3, [pc, #52]	; (8006584 <prvAddCurrentTaskToDelayedList+0x8c>)
 800654e:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006550:	e00f      	b.n	8006572 <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006552:	2e00      	cmp	r6, #0
 8006554:	d0e9      	beq.n	800652a <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006556:	4b08      	ldr	r3, [pc, #32]	; (8006578 <prvAddCurrentTaskToDelayedList+0x80>)
 8006558:	6819      	ldr	r1, [r3, #0]
 800655a:	3104      	adds	r1, #4
 800655c:	480a      	ldr	r0, [pc, #40]	; (8006588 <prvAddCurrentTaskToDelayedList+0x90>)
 800655e:	f7ff fe5d 	bl	800621c <vListInsertEnd>
 8006562:	e006      	b.n	8006572 <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006564:	4b09      	ldr	r3, [pc, #36]	; (800658c <prvAddCurrentTaskToDelayedList+0x94>)
 8006566:	6818      	ldr	r0, [r3, #0]
 8006568:	4b03      	ldr	r3, [pc, #12]	; (8006578 <prvAddCurrentTaskToDelayedList+0x80>)
 800656a:	6819      	ldr	r1, [r3, #0]
 800656c:	3104      	adds	r1, #4
 800656e:	f7ff fe61 	bl	8006234 <vListInsert>
}
 8006572:	bd70      	pop	{r4, r5, r6, pc}
 8006574:	2000045c 	.word	0x2000045c
 8006578:	2000033c 	.word	0x2000033c
 800657c:	200003e8 	.word	0x200003e8
 8006580:	20000340 	.word	0x20000340
 8006584:	20000414 	.word	0x20000414
 8006588:	20000434 	.word	0x20000434
 800658c:	20000344 	.word	0x20000344

08006590 <xTaskCreateStatic>:
	{
 8006590:	b570      	push	{r4, r5, r6, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006596:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8006598:	b945      	cbnz	r5, 80065ac <xTaskCreateStatic+0x1c>
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	e7fe      	b.n	80065aa <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80065ac:	b944      	cbnz	r4, 80065c0 <xTaskCreateStatic+0x30>
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	e7fe      	b.n	80065be <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80065c0:	2654      	movs	r6, #84	; 0x54
 80065c2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80065c4:	9e04      	ldr	r6, [sp, #16]
 80065c6:	2e54      	cmp	r6, #84	; 0x54
 80065c8:	d008      	beq.n	80065dc <xTaskCreateStatic+0x4c>
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	e7fe      	b.n	80065da <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80065dc:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065de:	2502      	movs	r5, #2
 80065e0:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065e4:	2500      	movs	r5, #0
 80065e6:	9503      	str	r5, [sp, #12]
 80065e8:	9402      	str	r4, [sp, #8]
 80065ea:	ad05      	add	r5, sp, #20
 80065ec:	9501      	str	r5, [sp, #4]
 80065ee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80065f0:	9500      	str	r5, [sp, #0]
 80065f2:	f7ff fe63 	bl	80062bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065f6:	4620      	mov	r0, r4
 80065f8:	f7ff fed4 	bl	80063a4 <prvAddNewTaskToReadyList>
	}
 80065fc:	9805      	ldr	r0, [sp, #20]
 80065fe:	b006      	add	sp, #24
 8006600:	bd70      	pop	{r4, r5, r6, pc}

08006602 <xTaskCreate>:
	{
 8006602:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006606:	b085      	sub	sp, #20
 8006608:	4607      	mov	r7, r0
 800660a:	4688      	mov	r8, r1
 800660c:	4615      	mov	r5, r2
 800660e:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006610:	0090      	lsls	r0, r2, #2
 8006612:	f000 fbcf 	bl	8006db4 <pvPortMalloc>
			if( pxStack != NULL )
 8006616:	b308      	cbz	r0, 800665c <xTaskCreate+0x5a>
 8006618:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800661a:	2054      	movs	r0, #84	; 0x54
 800661c:	f000 fbca 	bl	8006db4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006620:	4604      	mov	r4, r0
 8006622:	b1b8      	cbz	r0, 8006654 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 8006624:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8006626:	b1e4      	cbz	r4, 8006662 <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006628:	2300      	movs	r3, #0
 800662a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800662e:	9303      	str	r3, [sp, #12]
 8006630:	9402      	str	r4, [sp, #8]
 8006632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006634:	9301      	str	r3, [sp, #4]
 8006636:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	464b      	mov	r3, r9
 800663c:	462a      	mov	r2, r5
 800663e:	4641      	mov	r1, r8
 8006640:	4638      	mov	r0, r7
 8006642:	f7ff fe3b 	bl	80062bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006646:	4620      	mov	r0, r4
 8006648:	f7ff feac 	bl	80063a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800664c:	2001      	movs	r0, #1
	}
 800664e:	b005      	add	sp, #20
 8006650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8006654:	4630      	mov	r0, r6
 8006656:	f000 fc31 	bl	8006ebc <vPortFree>
 800665a:	e7e4      	b.n	8006626 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800665c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006660:	e7f5      	b.n	800664e <xTaskCreate+0x4c>
 8006662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8006666:	e7f2      	b.n	800664e <xTaskCreate+0x4c>

08006668 <vTaskStartScheduler>:
{
 8006668:	b510      	push	{r4, lr}
 800666a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800666c:	2400      	movs	r4, #0
 800666e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006670:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006672:	aa07      	add	r2, sp, #28
 8006674:	a906      	add	r1, sp, #24
 8006676:	a805      	add	r0, sp, #20
 8006678:	f000 fc58 	bl	8006f2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800667c:	9b05      	ldr	r3, [sp, #20]
 800667e:	9302      	str	r3, [sp, #8]
 8006680:	9b06      	ldr	r3, [sp, #24]
 8006682:	9301      	str	r3, [sp, #4]
 8006684:	9400      	str	r4, [sp, #0]
 8006686:	4623      	mov	r3, r4
 8006688:	9a07      	ldr	r2, [sp, #28]
 800668a:	490d      	ldr	r1, [pc, #52]	; (80066c0 <vTaskStartScheduler+0x58>)
 800668c:	480d      	ldr	r0, [pc, #52]	; (80066c4 <vTaskStartScheduler+0x5c>)
 800668e:	f7ff ff7f 	bl	8006590 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006692:	b908      	cbnz	r0, 8006698 <vTaskStartScheduler+0x30>
}
 8006694:	b008      	add	sp, #32
 8006696:	bd10      	pop	{r4, pc}
 8006698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80066a8:	4b07      	ldr	r3, [pc, #28]	; (80066c8 <vTaskStartScheduler+0x60>)
 80066aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80066b0:	4b06      	ldr	r3, [pc, #24]	; (80066cc <vTaskStartScheduler+0x64>)
 80066b2:	2201      	movs	r2, #1
 80066b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80066b6:	4b06      	ldr	r3, [pc, #24]	; (80066d0 <vTaskStartScheduler+0x68>)
 80066b8:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80066ba:	f000 fa95 	bl	8006be8 <xPortStartScheduler>
 80066be:	e7e9      	b.n	8006694 <vTaskStartScheduler+0x2c>
 80066c0:	0800e634 	.word	0x0800e634
 80066c4:	080064d1 	.word	0x080064d1
 80066c8:	20000414 	.word	0x20000414
 80066cc:	20000430 	.word	0x20000430
 80066d0:	2000045c 	.word	0x2000045c

080066d4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80066d4:	4a02      	ldr	r2, [pc, #8]	; (80066e0 <vTaskSuspendAll+0xc>)
 80066d6:	6813      	ldr	r3, [r2, #0]
 80066d8:	3301      	adds	r3, #1
 80066da:	6013      	str	r3, [r2, #0]
}
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	200003e0 	.word	0x200003e0

080066e4 <xTaskIncrementTick>:
{
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066e6:	4b3a      	ldr	r3, [pc, #232]	; (80067d0 <xTaskIncrementTick+0xec>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d164      	bne.n	80067b8 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066ee:	4b39      	ldr	r3, [pc, #228]	; (80067d4 <xTaskIncrementTick+0xf0>)
 80066f0:	681d      	ldr	r5, [r3, #0]
 80066f2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80066f4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066f6:	b9c5      	cbnz	r5, 800672a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80066f8:	4b37      	ldr	r3, [pc, #220]	; (80067d8 <xTaskIncrementTick+0xf4>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	b143      	cbz	r3, 8006712 <xTaskIncrementTick+0x2e>
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	e7fe      	b.n	8006710 <xTaskIncrementTick+0x2c>
 8006712:	4a31      	ldr	r2, [pc, #196]	; (80067d8 <xTaskIncrementTick+0xf4>)
 8006714:	6811      	ldr	r1, [r2, #0]
 8006716:	4b31      	ldr	r3, [pc, #196]	; (80067dc <xTaskIncrementTick+0xf8>)
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	6010      	str	r0, [r2, #0]
 800671c:	6019      	str	r1, [r3, #0]
 800671e:	4a30      	ldr	r2, [pc, #192]	; (80067e0 <xTaskIncrementTick+0xfc>)
 8006720:	6813      	ldr	r3, [r2, #0]
 8006722:	3301      	adds	r3, #1
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	f7ff fdb3 	bl	8006290 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800672a:	4b2e      	ldr	r3, [pc, #184]	; (80067e4 <xTaskIncrementTick+0x100>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	42ab      	cmp	r3, r5
 8006730:	d938      	bls.n	80067a4 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8006732:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006734:	4b2c      	ldr	r3, [pc, #176]	; (80067e8 <xTaskIncrementTick+0x104>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800673e:	009a      	lsls	r2, r3, #2
 8006740:	4b2a      	ldr	r3, [pc, #168]	; (80067ec <xTaskIncrementTick+0x108>)
 8006742:	589b      	ldr	r3, [r3, r2]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d93c      	bls.n	80067c2 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8006748:	2401      	movs	r4, #1
 800674a:	e03a      	b.n	80067c2 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 800674c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800674e:	4b22      	ldr	r3, [pc, #136]	; (80067d8 <xTaskIncrementTick+0xf4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	b343      	cbz	r3, 80067a8 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006756:	4b20      	ldr	r3, [pc, #128]	; (80067d8 <xTaskIncrementTick+0xf4>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800675e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8006760:	429d      	cmp	r5, r3
 8006762:	d326      	bcc.n	80067b2 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006764:	1d37      	adds	r7, r6, #4
 8006766:	4638      	mov	r0, r7
 8006768:	f7ff fd7e 	bl	8006268 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800676c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800676e:	b11b      	cbz	r3, 8006778 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006770:	f106 0018 	add.w	r0, r6, #24
 8006774:	f7ff fd78 	bl	8006268 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006778:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800677a:	2201      	movs	r2, #1
 800677c:	409a      	lsls	r2, r3
 800677e:	491c      	ldr	r1, [pc, #112]	; (80067f0 <xTaskIncrementTick+0x10c>)
 8006780:	6808      	ldr	r0, [r1, #0]
 8006782:	4302      	orrs	r2, r0
 8006784:	600a      	str	r2, [r1, #0]
 8006786:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800678a:	009a      	lsls	r2, r3, #2
 800678c:	4639      	mov	r1, r7
 800678e:	4817      	ldr	r0, [pc, #92]	; (80067ec <xTaskIncrementTick+0x108>)
 8006790:	4410      	add	r0, r2
 8006792:	f7ff fd43 	bl	800621c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006796:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8006798:	4b13      	ldr	r3, [pc, #76]	; (80067e8 <xTaskIncrementTick+0x104>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679e:	429a      	cmp	r2, r3
 80067a0:	d2d4      	bcs.n	800674c <xTaskIncrementTick+0x68>
 80067a2:	e7d4      	b.n	800674e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 80067a4:	2400      	movs	r4, #0
 80067a6:	e7d2      	b.n	800674e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a8:	4b0e      	ldr	r3, [pc, #56]	; (80067e4 <xTaskIncrementTick+0x100>)
 80067aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067ae:	601a      	str	r2, [r3, #0]
					break;
 80067b0:	e7c0      	b.n	8006734 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80067b2:	4a0c      	ldr	r2, [pc, #48]	; (80067e4 <xTaskIncrementTick+0x100>)
 80067b4:	6013      	str	r3, [r2, #0]
						break;
 80067b6:	e7bd      	b.n	8006734 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 80067b8:	4a0e      	ldr	r2, [pc, #56]	; (80067f4 <xTaskIncrementTick+0x110>)
 80067ba:	6813      	ldr	r3, [r2, #0]
 80067bc:	3301      	adds	r3, #1
 80067be:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80067c0:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 80067c2:	4b0d      	ldr	r3, [pc, #52]	; (80067f8 <xTaskIncrementTick+0x114>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	b103      	cbz	r3, 80067ca <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 80067c8:	2401      	movs	r4, #1
}
 80067ca:	4620      	mov	r0, r4
 80067cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067ce:	bf00      	nop
 80067d0:	200003e0 	.word	0x200003e0
 80067d4:	2000045c 	.word	0x2000045c
 80067d8:	20000340 	.word	0x20000340
 80067dc:	20000344 	.word	0x20000344
 80067e0:	20000418 	.word	0x20000418
 80067e4:	20000414 	.word	0x20000414
 80067e8:	2000033c 	.word	0x2000033c
 80067ec:	20000348 	.word	0x20000348
 80067f0:	200003e8 	.word	0x200003e8
 80067f4:	200003dc 	.word	0x200003dc
 80067f8:	20000460 	.word	0x20000460

080067fc <xTaskResumeAll>:
{
 80067fc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80067fe:	4b33      	ldr	r3, [pc, #204]	; (80068cc <xTaskResumeAll+0xd0>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	b943      	cbnz	r3, 8006816 <xTaskResumeAll+0x1a>
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	e7fe      	b.n	8006814 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8006816:	f000 f945 	bl	8006aa4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800681a:	4b2c      	ldr	r3, [pc, #176]	; (80068cc <xTaskResumeAll+0xd0>)
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	3a01      	subs	r2, #1
 8006820:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d14d      	bne.n	80068c4 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006828:	4b29      	ldr	r3, [pc, #164]	; (80068d0 <xTaskResumeAll+0xd4>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	b923      	cbnz	r3, 8006838 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 800682e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006830:	f000 f95a 	bl	8006ae8 <vPortExitCritical>
}
 8006834:	4620      	mov	r0, r4
 8006836:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 8006838:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800683a:	4b26      	ldr	r3, [pc, #152]	; (80068d4 <xTaskResumeAll+0xd8>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	b31b      	cbz	r3, 8006888 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006840:	4b24      	ldr	r3, [pc, #144]	; (80068d4 <xTaskResumeAll+0xd8>)
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006846:	f104 0018 	add.w	r0, r4, #24
 800684a:	f7ff fd0d 	bl	8006268 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800684e:	1d25      	adds	r5, r4, #4
 8006850:	4628      	mov	r0, r5
 8006852:	f7ff fd09 	bl	8006268 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006856:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006858:	2201      	movs	r2, #1
 800685a:	409a      	lsls	r2, r3
 800685c:	491e      	ldr	r1, [pc, #120]	; (80068d8 <xTaskResumeAll+0xdc>)
 800685e:	6808      	ldr	r0, [r1, #0]
 8006860:	4302      	orrs	r2, r0
 8006862:	600a      	str	r2, [r1, #0]
 8006864:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006868:	009a      	lsls	r2, r3, #2
 800686a:	4629      	mov	r1, r5
 800686c:	481b      	ldr	r0, [pc, #108]	; (80068dc <xTaskResumeAll+0xe0>)
 800686e:	4410      	add	r0, r2
 8006870:	f7ff fcd4 	bl	800621c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006874:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006876:	4b1a      	ldr	r3, [pc, #104]	; (80068e0 <xTaskResumeAll+0xe4>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687c:	429a      	cmp	r2, r3
 800687e:	d3dc      	bcc.n	800683a <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8006880:	4b18      	ldr	r3, [pc, #96]	; (80068e4 <xTaskResumeAll+0xe8>)
 8006882:	2201      	movs	r2, #1
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	e7d8      	b.n	800683a <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8006888:	b10c      	cbz	r4, 800688e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800688a:	f7ff fd01 	bl	8006290 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800688e:	4b16      	ldr	r3, [pc, #88]	; (80068e8 <xTaskResumeAll+0xec>)
 8006890:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006892:	b154      	cbz	r4, 80068aa <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8006894:	f7ff ff26 	bl	80066e4 <xTaskIncrementTick>
 8006898:	b110      	cbz	r0, 80068a0 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800689a:	4b12      	ldr	r3, [pc, #72]	; (80068e4 <xTaskResumeAll+0xe8>)
 800689c:	2201      	movs	r2, #1
 800689e:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80068a0:	3c01      	subs	r4, #1
 80068a2:	d1f7      	bne.n	8006894 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 80068a4:	4b10      	ldr	r3, [pc, #64]	; (80068e8 <xTaskResumeAll+0xec>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 80068aa:	4b0e      	ldr	r3, [pc, #56]	; (80068e4 <xTaskResumeAll+0xe8>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	b15b      	cbz	r3, 80068c8 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 80068b0:	4b0e      	ldr	r3, [pc, #56]	; (80068ec <xTaskResumeAll+0xf0>)
 80068b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80068c0:	2401      	movs	r4, #1
 80068c2:	e7b5      	b.n	8006830 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 80068c4:	2400      	movs	r4, #0
 80068c6:	e7b3      	b.n	8006830 <xTaskResumeAll+0x34>
 80068c8:	2400      	movs	r4, #0
 80068ca:	e7b1      	b.n	8006830 <xTaskResumeAll+0x34>
 80068cc:	200003e0 	.word	0x200003e0
 80068d0:	200003d4 	.word	0x200003d4
 80068d4:	2000041c 	.word	0x2000041c
 80068d8:	200003e8 	.word	0x200003e8
 80068dc:	20000348 	.word	0x20000348
 80068e0:	2000033c 	.word	0x2000033c
 80068e4:	20000460 	.word	0x20000460
 80068e8:	200003dc 	.word	0x200003dc
 80068ec:	e000ed04 	.word	0xe000ed04

080068f0 <vTaskDelay>:
	{
 80068f0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80068f2:	b1a8      	cbz	r0, 8006920 <vTaskDelay+0x30>
 80068f4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80068f6:	4b0f      	ldr	r3, [pc, #60]	; (8006934 <vTaskDelay+0x44>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	b143      	cbz	r3, 800690e <vTaskDelay+0x1e>
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	e7fe      	b.n	800690c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800690e:	f7ff fee1 	bl	80066d4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006912:	2100      	movs	r1, #0
 8006914:	4620      	mov	r0, r4
 8006916:	f7ff fdef 	bl	80064f8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800691a:	f7ff ff6f 	bl	80067fc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800691e:	b938      	cbnz	r0, 8006930 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8006920:	4b05      	ldr	r3, [pc, #20]	; (8006938 <vTaskDelay+0x48>)
 8006922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	f3bf 8f6f 	isb	sy
	}
 8006930:	bd10      	pop	{r4, pc}
 8006932:	bf00      	nop
 8006934:	200003e0 	.word	0x200003e0
 8006938:	e000ed04 	.word	0xe000ed04

0800693c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800693c:	4b20      	ldr	r3, [pc, #128]	; (80069c0 <vTaskSwitchContext+0x84>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	b11b      	cbz	r3, 800694a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006942:	4b20      	ldr	r3, [pc, #128]	; (80069c4 <vTaskSwitchContext+0x88>)
 8006944:	2201      	movs	r2, #1
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800694a:	4b1e      	ldr	r3, [pc, #120]	; (80069c4 <vTaskSwitchContext+0x88>)
 800694c:	2200      	movs	r2, #0
 800694e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006950:	4b1d      	ldr	r3, [pc, #116]	; (80069c8 <vTaskSwitchContext+0x8c>)
 8006952:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006954:	fab3 f383 	clz	r3, r3
 8006958:	b2db      	uxtb	r3, r3
 800695a:	f1c3 031f 	rsb	r3, r3, #31
 800695e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006962:	008a      	lsls	r2, r1, #2
 8006964:	4919      	ldr	r1, [pc, #100]	; (80069cc <vTaskSwitchContext+0x90>)
 8006966:	588a      	ldr	r2, [r1, r2]
 8006968:	b942      	cbnz	r2, 800697c <vTaskSwitchContext+0x40>
	__asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	e7fe      	b.n	800697a <vTaskSwitchContext+0x3e>
{
 800697c:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800697e:	4813      	ldr	r0, [pc, #76]	; (80069cc <vTaskSwitchContext+0x90>)
 8006980:	009a      	lsls	r2, r3, #2
 8006982:	18d4      	adds	r4, r2, r3
 8006984:	00a1      	lsls	r1, r4, #2
 8006986:	4401      	add	r1, r0
 8006988:	684c      	ldr	r4, [r1, #4]
 800698a:	6864      	ldr	r4, [r4, #4]
 800698c:	604c      	str	r4, [r1, #4]
 800698e:	441a      	add	r2, r3
 8006990:	0091      	lsls	r1, r2, #2
 8006992:	3108      	adds	r1, #8
 8006994:	4408      	add	r0, r1
 8006996:	4284      	cmp	r4, r0
 8006998:	d00b      	beq.n	80069b2 <vTaskSwitchContext+0x76>
 800699a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800699e:	009a      	lsls	r2, r3, #2
 80069a0:	4b0a      	ldr	r3, [pc, #40]	; (80069cc <vTaskSwitchContext+0x90>)
 80069a2:	4413      	add	r3, r2
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	4b09      	ldr	r3, [pc, #36]	; (80069d0 <vTaskSwitchContext+0x94>)
 80069aa:	601a      	str	r2, [r3, #0]
}
 80069ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069b0:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80069b2:	6861      	ldr	r1, [r4, #4]
 80069b4:	4805      	ldr	r0, [pc, #20]	; (80069cc <vTaskSwitchContext+0x90>)
 80069b6:	2214      	movs	r2, #20
 80069b8:	fb02 0203 	mla	r2, r2, r3, r0
 80069bc:	6051      	str	r1, [r2, #4]
 80069be:	e7ec      	b.n	800699a <vTaskSwitchContext+0x5e>
 80069c0:	200003e0 	.word	0x200003e0
 80069c4:	20000460 	.word	0x20000460
 80069c8:	200003e8 	.word	0x200003e8
 80069cc:	20000348 	.word	0x20000348
 80069d0:	2000033c 	.word	0x2000033c

080069d4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069d4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80069d6:	2300      	movs	r3, #0
 80069d8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069da:	4b0d      	ldr	r3, [pc, #52]	; (8006a10 <prvTaskExitError+0x3c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069e2:	d008      	beq.n	80069f6 <prvTaskExitError+0x22>
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	e7fe      	b.n	80069f4 <prvTaskExitError+0x20>
 80069f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a06:	9b01      	ldr	r3, [sp, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0fc      	beq.n	8006a06 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a0c:	b002      	add	sp, #8
 8006a0e:	4770      	bx	lr
 8006a10:	20000048 	.word	0x20000048

08006a14 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a14:	4808      	ldr	r0, [pc, #32]	; (8006a38 <prvPortStartFirstTask+0x24>)
 8006a16:	6800      	ldr	r0, [r0, #0]
 8006a18:	6800      	ldr	r0, [r0, #0]
 8006a1a:	f380 8808 	msr	MSP, r0
 8006a1e:	f04f 0000 	mov.w	r0, #0
 8006a22:	f380 8814 	msr	CONTROL, r0
 8006a26:	b662      	cpsie	i
 8006a28:	b661      	cpsie	f
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	df00      	svc	0
 8006a34:	bf00      	nop
 8006a36:	0000      	.short	0x0000
 8006a38:	e000ed08 	.word	0xe000ed08

08006a3c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a3c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a4c <vPortEnableVFP+0x10>
 8006a40:	6801      	ldr	r1, [r0, #0]
 8006a42:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a46:	6001      	str	r1, [r0, #0]
 8006a48:	4770      	bx	lr
 8006a4a:	0000      	.short	0x0000
 8006a4c:	e000ed88 	.word	0xe000ed88

08006a50 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a54:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a58:	f021 0101 	bic.w	r1, r1, #1
 8006a5c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a60:	4b05      	ldr	r3, [pc, #20]	; (8006a78 <pxPortInitialiseStack+0x28>)
 8006a62:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a66:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a6a:	f06f 0302 	mvn.w	r3, #2
 8006a6e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8006a72:	3844      	subs	r0, #68	; 0x44
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	080069d5 	.word	0x080069d5
 8006a7c:	00000000 	.word	0x00000000

08006a80 <SVC_Handler>:
	__asm volatile (
 8006a80:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <pxCurrentTCBConst2>)
 8006a82:	6819      	ldr	r1, [r3, #0]
 8006a84:	6808      	ldr	r0, [r1, #0]
 8006a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8a:	f380 8809 	msr	PSP, r0
 8006a8e:	f3bf 8f6f 	isb	sy
 8006a92:	f04f 0000 	mov.w	r0, #0
 8006a96:	f380 8811 	msr	BASEPRI, r0
 8006a9a:	4770      	bx	lr
 8006a9c:	f3af 8000 	nop.w

08006aa0 <pxCurrentTCBConst2>:
 8006aa0:	2000033c 	.word	0x2000033c

08006aa4 <vPortEnterCritical>:
 8006aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006ab4:	4a0a      	ldr	r2, [pc, #40]	; (8006ae0 <vPortEnterCritical+0x3c>)
 8006ab6:	6813      	ldr	r3, [r2, #0]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d000      	beq.n	8006ac2 <vPortEnterCritical+0x1e>
}
 8006ac0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ac2:	4b08      	ldr	r3, [pc, #32]	; (8006ae4 <vPortEnterCritical+0x40>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006aca:	d0f9      	beq.n	8006ac0 <vPortEnterCritical+0x1c>
 8006acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	e7fe      	b.n	8006adc <vPortEnterCritical+0x38>
 8006ade:	bf00      	nop
 8006ae0:	20000048 	.word	0x20000048
 8006ae4:	e000ed04 	.word	0xe000ed04

08006ae8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006ae8:	4b09      	ldr	r3, [pc, #36]	; (8006b10 <vPortExitCritical+0x28>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	b943      	cbnz	r3, 8006b00 <vPortExitCritical+0x18>
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	e7fe      	b.n	8006afe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006b00:	3b01      	subs	r3, #1
 8006b02:	4a03      	ldr	r2, [pc, #12]	; (8006b10 <vPortExitCritical+0x28>)
 8006b04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b06:	b90b      	cbnz	r3, 8006b0c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b08:	f383 8811 	msr	BASEPRI, r3
}
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	20000048 	.word	0x20000048
	...

08006b20 <PendSV_Handler>:
	__asm volatile
 8006b20:	f3ef 8009 	mrs	r0, PSP
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	4b15      	ldr	r3, [pc, #84]	; (8006b80 <pxCurrentTCBConst>)
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	f01e 0f10 	tst.w	lr, #16
 8006b30:	bf08      	it	eq
 8006b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3a:	6010      	str	r0, [r2, #0]
 8006b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b44:	f380 8811 	msr	BASEPRI, r0
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	f7ff fef4 	bl	800693c <vTaskSwitchContext>
 8006b54:	f04f 0000 	mov.w	r0, #0
 8006b58:	f380 8811 	msr	BASEPRI, r0
 8006b5c:	bc09      	pop	{r0, r3}
 8006b5e:	6819      	ldr	r1, [r3, #0]
 8006b60:	6808      	ldr	r0, [r1, #0]
 8006b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b66:	f01e 0f10 	tst.w	lr, #16
 8006b6a:	bf08      	it	eq
 8006b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b70:	f380 8809 	msr	PSP, r0
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	f3af 8000 	nop.w

08006b80 <pxCurrentTCBConst>:
 8006b80:	2000033c 	.word	0x2000033c

08006b84 <SysTick_Handler>:
{
 8006b84:	b508      	push	{r3, lr}
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006b96:	f7ff fda5 	bl	80066e4 <xTaskIncrementTick>
 8006b9a:	b118      	cbz	r0, 8006ba4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b9c:	4b03      	ldr	r3, [pc, #12]	; (8006bac <SysTick_Handler+0x28>)
 8006b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ba2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	f383 8811 	msr	BASEPRI, r3
}
 8006baa:	bd08      	pop	{r3, pc}
 8006bac:	e000ed04 	.word	0xe000ed04

08006bb0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006bb0:	4a08      	ldr	r2, [pc, #32]	; (8006bd4 <vPortSetupTimerInterrupt+0x24>)
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006bb6:	4908      	ldr	r1, [pc, #32]	; (8006bd8 <vPortSetupTimerInterrupt+0x28>)
 8006bb8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bba:	4b08      	ldr	r3, [pc, #32]	; (8006bdc <vPortSetupTimerInterrupt+0x2c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4908      	ldr	r1, [pc, #32]	; (8006be0 <vPortSetupTimerInterrupt+0x30>)
 8006bc0:	fba1 1303 	umull	r1, r3, r1, r3
 8006bc4:	099b      	lsrs	r3, r3, #6
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	4906      	ldr	r1, [pc, #24]	; (8006be4 <vPortSetupTimerInterrupt+0x34>)
 8006bca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bcc:	2307      	movs	r3, #7
 8006bce:	6013      	str	r3, [r2, #0]
}
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	e000e010 	.word	0xe000e010
 8006bd8:	e000e018 	.word	0xe000e018
 8006bdc:	20000078 	.word	0x20000078
 8006be0:	10624dd3 	.word	0x10624dd3
 8006be4:	e000e014 	.word	0xe000e014

08006be8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006be8:	4b3a      	ldr	r3, [pc, #232]	; (8006cd4 <xPortStartScheduler+0xec>)
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	4b3a      	ldr	r3, [pc, #232]	; (8006cd8 <xPortStartScheduler+0xf0>)
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d00d      	beq.n	8006c0e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006bf2:	4b38      	ldr	r3, [pc, #224]	; (8006cd4 <xPortStartScheduler+0xec>)
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	4b39      	ldr	r3, [pc, #228]	; (8006cdc <xPortStartScheduler+0xf4>)
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d111      	bne.n	8006c20 <xPortStartScheduler+0x38>
	__asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	e7fe      	b.n	8006c0c <xPortStartScheduler+0x24>
 8006c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	e7fe      	b.n	8006c1e <xPortStartScheduler+0x36>
{
 8006c20:	b510      	push	{r4, lr}
 8006c22:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c24:	4b2e      	ldr	r3, [pc, #184]	; (8006ce0 <xPortStartScheduler+0xf8>)
 8006c26:	781a      	ldrb	r2, [r3, #0]
 8006c28:	b2d2      	uxtb	r2, r2
 8006c2a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c2c:	22ff      	movs	r2, #255	; 0xff
 8006c2e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c38:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006c3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c40:	4a28      	ldr	r2, [pc, #160]	; (8006ce4 <xPortStartScheduler+0xfc>)
 8006c42:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c44:	4b28      	ldr	r3, [pc, #160]	; (8006ce8 <xPortStartScheduler+0x100>)
 8006c46:	2207      	movs	r2, #7
 8006c48:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c4a:	e009      	b.n	8006c60 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 8006c4c:	4a26      	ldr	r2, [pc, #152]	; (8006ce8 <xPortStartScheduler+0x100>)
 8006c4e:	6813      	ldr	r3, [r2, #0]
 8006c50:	3b01      	subs	r3, #1
 8006c52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c54:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006c58:	005b      	lsls	r3, r3, #1
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c60:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006c64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006c68:	d1f0      	bne.n	8006c4c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c6a:	4b1f      	ldr	r3, [pc, #124]	; (8006ce8 <xPortStartScheduler+0x100>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d008      	beq.n	8006c84 <xPortStartScheduler+0x9c>
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	e7fe      	b.n	8006c82 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c84:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c8a:	4a17      	ldr	r2, [pc, #92]	; (8006ce8 <xPortStartScheduler+0x100>)
 8006c8c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c8e:	9b01      	ldr	r3, [sp, #4]
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	4a13      	ldr	r2, [pc, #76]	; (8006ce0 <xPortStartScheduler+0xf8>)
 8006c94:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c96:	4b15      	ldr	r3, [pc, #84]	; (8006cec <xPortStartScheduler+0x104>)
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8006c9e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8006ca6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8006ca8:	f7ff ff82 	bl	8006bb0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006cac:	2400      	movs	r4, #0
 8006cae:	4b10      	ldr	r3, [pc, #64]	; (8006cf0 <xPortStartScheduler+0x108>)
 8006cb0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8006cb2:	f7ff fec3 	bl	8006a3c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006cb6:	4a0f      	ldr	r2, [pc, #60]	; (8006cf4 <xPortStartScheduler+0x10c>)
 8006cb8:	6813      	ldr	r3, [r2, #0]
 8006cba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006cbe:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8006cc0:	f7ff fea8 	bl	8006a14 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006cc4:	f7ff fe3a 	bl	800693c <vTaskSwitchContext>
	prvTaskExitError();
 8006cc8:	f7ff fe84 	bl	80069d4 <prvTaskExitError>
}
 8006ccc:	4620      	mov	r0, r4
 8006cce:	b002      	add	sp, #8
 8006cd0:	bd10      	pop	{r4, pc}
 8006cd2:	bf00      	nop
 8006cd4:	e000ed00 	.word	0xe000ed00
 8006cd8:	410fc271 	.word	0x410fc271
 8006cdc:	410fc270 	.word	0x410fc270
 8006ce0:	e000e400 	.word	0xe000e400
 8006ce4:	20000464 	.word	0x20000464
 8006ce8:	20000468 	.word	0x20000468
 8006cec:	e000ed20 	.word	0xe000ed20
 8006cf0:	20000048 	.word	0x20000048
 8006cf4:	e000ef34 	.word	0xe000ef34

08006cf8 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006cf8:	4a12      	ldr	r2, [pc, #72]	; (8006d44 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cfa:	f012 0f07 	tst.w	r2, #7
 8006cfe:	d01e      	beq.n	8006d3e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d00:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d02:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d06:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8006d0a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d0c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d0e:	480e      	ldr	r0, [pc, #56]	; (8006d48 <prvHeapInit+0x50>)
 8006d10:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d12:	2100      	movs	r1, #0
 8006d14:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d16:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8006d18:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d1a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8006d1e:	480b      	ldr	r0, [pc, #44]	; (8006d4c <prvHeapInit+0x54>)
 8006d20:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8006d22:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d24:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d26:	1a99      	subs	r1, r3, r2
 8006d28:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d2a:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d2c:	4b08      	ldr	r3, [pc, #32]	; (8006d50 <prvHeapInit+0x58>)
 8006d2e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d30:	4b08      	ldr	r3, [pc, #32]	; (8006d54 <prvHeapInit+0x5c>)
 8006d32:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d34:	4b08      	ldr	r3, [pc, #32]	; (8006d58 <prvHeapInit+0x60>)
 8006d36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d3a:	601a      	str	r2, [r3, #0]
}
 8006d3c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d3e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d42:	e7e4      	b.n	8006d0e <prvHeapInit+0x16>
 8006d44:	20000470 	.word	0x20000470
 8006d48:	2000407c 	.word	0x2000407c
 8006d4c:	2000046c 	.word	0x2000046c
 8006d50:	20004078 	.word	0x20004078
 8006d54:	20004074 	.word	0x20004074
 8006d58:	20004070 	.word	0x20004070

08006d5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d5c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d5e:	4b13      	ldr	r3, [pc, #76]	; (8006dac <prvInsertBlockIntoFreeList+0x50>)
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	4282      	cmp	r2, r0
 8006d64:	d31b      	bcc.n	8006d9e <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d66:	6859      	ldr	r1, [r3, #4]
 8006d68:	185c      	adds	r4, r3, r1
 8006d6a:	4284      	cmp	r4, r0
 8006d6c:	d103      	bne.n	8006d76 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d6e:	6840      	ldr	r0, [r0, #4]
 8006d70:	4401      	add	r1, r0
 8006d72:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d74:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d76:	6841      	ldr	r1, [r0, #4]
 8006d78:	1844      	adds	r4, r0, r1
 8006d7a:	42a2      	cmp	r2, r4
 8006d7c:	d113      	bne.n	8006da6 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d7e:	4c0c      	ldr	r4, [pc, #48]	; (8006db0 <prvInsertBlockIntoFreeList+0x54>)
 8006d80:	6824      	ldr	r4, [r4, #0]
 8006d82:	42a2      	cmp	r2, r4
 8006d84:	d00d      	beq.n	8006da2 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d86:	6852      	ldr	r2, [r2, #4]
 8006d88:	4411      	add	r1, r2
 8006d8a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	6812      	ldr	r2, [r2, #0]
 8006d90:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d92:	4298      	cmp	r0, r3
 8006d94:	d000      	beq.n	8006d98 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d96:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d9c:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d9e:	4613      	mov	r3, r2
 8006da0:	e7de      	b.n	8006d60 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006da2:	6004      	str	r4, [r0, #0]
 8006da4:	e7f5      	b.n	8006d92 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006da6:	6002      	str	r2, [r0, #0]
 8006da8:	e7f3      	b.n	8006d92 <prvInsertBlockIntoFreeList+0x36>
 8006daa:	bf00      	nop
 8006dac:	2000407c 	.word	0x2000407c
 8006db0:	2000046c 	.word	0x2000046c

08006db4 <pvPortMalloc>:
{
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006db8:	f7ff fc8c 	bl	80066d4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006dbc:	4b3a      	ldr	r3, [pc, #232]	; (8006ea8 <pvPortMalloc+0xf4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	b1bb      	cbz	r3, 8006df2 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006dc2:	4b3a      	ldr	r3, [pc, #232]	; (8006eac <pvPortMalloc+0xf8>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	421c      	tst	r4, r3
 8006dc8:	d163      	bne.n	8006e92 <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 8006dca:	b1ac      	cbz	r4, 8006df8 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 8006dcc:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006dce:	f014 0f07 	tst.w	r4, #7
 8006dd2:	d011      	beq.n	8006df8 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006dd4:	f024 0407 	bic.w	r4, r4, #7
 8006dd8:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dda:	f004 0307 	and.w	r3, r4, #7
 8006dde:	b15b      	cbz	r3, 8006df8 <pvPortMalloc+0x44>
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	e7fe      	b.n	8006df0 <pvPortMalloc+0x3c>
			prvHeapInit();
 8006df2:	f7ff ff81 	bl	8006cf8 <prvHeapInit>
 8006df6:	e7e4      	b.n	8006dc2 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006df8:	2c00      	cmp	r4, #0
 8006dfa:	d04c      	beq.n	8006e96 <pvPortMalloc+0xe2>
 8006dfc:	4b2c      	ldr	r3, [pc, #176]	; (8006eb0 <pvPortMalloc+0xfc>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	42a3      	cmp	r3, r4
 8006e02:	d34a      	bcc.n	8006e9a <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 8006e04:	4b2b      	ldr	r3, [pc, #172]	; (8006eb4 <pvPortMalloc+0x100>)
 8006e06:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e08:	e001      	b.n	8006e0e <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 8006e0a:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e0c:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e0e:	686a      	ldr	r2, [r5, #4]
 8006e10:	42a2      	cmp	r2, r4
 8006e12:	d202      	bcs.n	8006e1a <pvPortMalloc+0x66>
 8006e14:	682a      	ldr	r2, [r5, #0]
 8006e16:	2a00      	cmp	r2, #0
 8006e18:	d1f7      	bne.n	8006e0a <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 8006e1a:	4a23      	ldr	r2, [pc, #140]	; (8006ea8 <pvPortMalloc+0xf4>)
 8006e1c:	6812      	ldr	r2, [r2, #0]
 8006e1e:	42aa      	cmp	r2, r5
 8006e20:	d03d      	beq.n	8006e9e <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e22:	681e      	ldr	r6, [r3, #0]
 8006e24:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e26:	682a      	ldr	r2, [r5, #0]
 8006e28:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e2a:	686b      	ldr	r3, [r5, #4]
 8006e2c:	1b1b      	subs	r3, r3, r4
 8006e2e:	2b10      	cmp	r3, #16
 8006e30:	d910      	bls.n	8006e54 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e32:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e34:	f010 0f07 	tst.w	r0, #7
 8006e38:	d008      	beq.n	8006e4c <pvPortMalloc+0x98>
 8006e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	e7fe      	b.n	8006e4a <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e4c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e4e:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e50:	f7ff ff84 	bl	8006d5c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e54:	686a      	ldr	r2, [r5, #4]
 8006e56:	4916      	ldr	r1, [pc, #88]	; (8006eb0 <pvPortMalloc+0xfc>)
 8006e58:	680b      	ldr	r3, [r1, #0]
 8006e5a:	1a9b      	subs	r3, r3, r2
 8006e5c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e5e:	4916      	ldr	r1, [pc, #88]	; (8006eb8 <pvPortMalloc+0x104>)
 8006e60:	6809      	ldr	r1, [r1, #0]
 8006e62:	428b      	cmp	r3, r1
 8006e64:	d201      	bcs.n	8006e6a <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e66:	4914      	ldr	r1, [pc, #80]	; (8006eb8 <pvPortMalloc+0x104>)
 8006e68:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e6a:	4b10      	ldr	r3, [pc, #64]	; (8006eac <pvPortMalloc+0xf8>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e72:	2300      	movs	r3, #0
 8006e74:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8006e76:	f7ff fcc1 	bl	80067fc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e7a:	f016 0f07 	tst.w	r6, #7
 8006e7e:	d010      	beq.n	8006ea2 <pvPortMalloc+0xee>
 8006e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	e7fe      	b.n	8006e90 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8006e92:	2600      	movs	r6, #0
 8006e94:	e7ef      	b.n	8006e76 <pvPortMalloc+0xc2>
 8006e96:	2600      	movs	r6, #0
 8006e98:	e7ed      	b.n	8006e76 <pvPortMalloc+0xc2>
 8006e9a:	2600      	movs	r6, #0
 8006e9c:	e7eb      	b.n	8006e76 <pvPortMalloc+0xc2>
 8006e9e:	2600      	movs	r6, #0
 8006ea0:	e7e9      	b.n	8006e76 <pvPortMalloc+0xc2>
}
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	bd70      	pop	{r4, r5, r6, pc}
 8006ea6:	bf00      	nop
 8006ea8:	2000046c 	.word	0x2000046c
 8006eac:	20004070 	.word	0x20004070
 8006eb0:	20004074 	.word	0x20004074
 8006eb4:	2000407c 	.word	0x2000407c
 8006eb8:	20004078 	.word	0x20004078

08006ebc <vPortFree>:
	if( pv != NULL )
 8006ebc:	b380      	cbz	r0, 8006f20 <vPortFree+0x64>
{
 8006ebe:	b538      	push	{r3, r4, r5, lr}
 8006ec0:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8006ec2:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ec6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006eca:	4916      	ldr	r1, [pc, #88]	; (8006f24 <vPortFree+0x68>)
 8006ecc:	6809      	ldr	r1, [r1, #0]
 8006ece:	420a      	tst	r2, r1
 8006ed0:	d108      	bne.n	8006ee4 <vPortFree+0x28>
 8006ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	e7fe      	b.n	8006ee2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ee4:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8006ee8:	b140      	cbz	r0, 8006efc <vPortFree+0x40>
 8006eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	e7fe      	b.n	8006efa <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006efc:	ea22 0201 	bic.w	r2, r2, r1
 8006f00:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8006f04:	f7ff fbe6 	bl	80066d4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f08:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8006f0c:	4a06      	ldr	r2, [pc, #24]	; (8006f28 <vPortFree+0x6c>)
 8006f0e:	6813      	ldr	r3, [r2, #0]
 8006f10:	440b      	add	r3, r1
 8006f12:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f14:	4628      	mov	r0, r5
 8006f16:	f7ff ff21 	bl	8006d5c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8006f1a:	f7ff fc6f 	bl	80067fc <xTaskResumeAll>
}
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	20004070 	.word	0x20004070
 8006f28:	20004074 	.word	0x20004074

08006f2c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8006f2c:	4b03      	ldr	r3, [pc, #12]	; (8006f3c <vApplicationGetIdleTaskMemory+0x10>)
 8006f2e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8006f30:	4b03      	ldr	r3, [pc, #12]	; (8006f40 <vApplicationGetIdleTaskMemory+0x14>)
 8006f32:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006f34:	2380      	movs	r3, #128	; 0x80
 8006f36:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	20004284 	.word	0x20004284
 8006f40:	20004084 	.word	0x20004084

08006f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f48:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f4a:	2400      	movs	r4, #0
 8006f4c:	9403      	str	r4, [sp, #12]
 8006f4e:	9404      	str	r4, [sp, #16]
 8006f50:	9405      	str	r4, [sp, #20]
 8006f52:	9406      	str	r4, [sp, #24]
 8006f54:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f56:	9400      	str	r4, [sp, #0]
 8006f58:	4b34      	ldr	r3, [pc, #208]	; (800702c <MX_GPIO_Init+0xe8>)
 8006f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f5c:	f042 0204 	orr.w	r2, r2, #4
 8006f60:	631a      	str	r2, [r3, #48]	; 0x30
 8006f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f64:	f002 0204 	and.w	r2, r2, #4
 8006f68:	9200      	str	r2, [sp, #0]
 8006f6a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f6c:	9401      	str	r4, [sp, #4]
 8006f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f70:	f042 0201 	orr.w	r2, r2, #1
 8006f74:	631a      	str	r2, [r3, #48]	; 0x30
 8006f76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f78:	f002 0201 	and.w	r2, r2, #1
 8006f7c:	9201      	str	r2, [sp, #4]
 8006f7e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f80:	9402      	str	r4, [sp, #8]
 8006f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f84:	f042 0202 	orr.w	r2, r2, #2
 8006f88:	631a      	str	r2, [r3, #48]	; 0x30
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	9302      	str	r3, [sp, #8]
 8006f92:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8006f94:	4e26      	ldr	r6, [pc, #152]	; (8007030 <MX_GPIO_Init+0xec>)
 8006f96:	4622      	mov	r2, r4
 8006f98:	2120      	movs	r1, #32
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	f7fc fe48 	bl	8003c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8006fa0:	4f24      	ldr	r7, [pc, #144]	; (8007034 <MX_GPIO_Init+0xf0>)
 8006fa2:	4622      	mov	r2, r4
 8006fa4:	2120      	movs	r1, #32
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	f7fc fe42 	bl	8003c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8006fac:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8007038 <MX_GPIO_Init+0xf4>
 8006fb0:	4622      	mov	r2, r4
 8006fb2:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8006fb6:	4648      	mov	r0, r9
 8006fb8:	f7fc fe3a 	bl	8003c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006fbc:	f04f 0a20 	mov.w	sl, #32
 8006fc0:	f8cd a00c 	str.w	sl, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fc4:	2501      	movs	r5, #1
 8006fc6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fca:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fcc:	a903      	add	r1, sp, #12
 8006fce:	4630      	mov	r0, r6
 8006fd0:	f7fc fd5c 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : kill_Pin */
  GPIO_InitStruct.Pin = kill_Pin;
 8006fd4:	2310      	movs	r3, #16
 8006fd6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006fd8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800703c <MX_GPIO_Init+0xf8>
 8006fdc:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006fe0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(kill_GPIO_Port, &GPIO_InitStruct);
 8006fe2:	a903      	add	r1, sp, #12
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	f7fc fd51 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006fea:	f8cd a00c 	str.w	sl, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fee:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ff0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ff2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ff4:	a903      	add	r1, sp, #12
 8006ff6:	4638      	mov	r0, r7
 8006ff8:	f7fc fd48 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8006ffc:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8007000:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007002:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007004:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007006:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007008:	a903      	add	r1, sp, #12
 800700a:	4648      	mov	r0, r9
 800700c:	f7fc fd3e 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_RE_INT_Pin */
  GPIO_InitStruct.Pin = PWM_RE_INT_Pin;
 8007010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007014:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007016:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800701a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(PWM_RE_INT_GPIO_Port, &GPIO_InitStruct);
 800701c:	a903      	add	r1, sp, #12
 800701e:	4630      	mov	r0, r6
 8007020:	f7fc fd34 	bl	8003a8c <HAL_GPIO_Init>

}
 8007024:	b008      	add	sp, #32
 8007026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800702a:	bf00      	nop
 800702c:	40023800 	.word	0x40023800
 8007030:	40020000 	.word	0x40020000
 8007034:	40020800 	.word	0x40020800
 8007038:	40020400 	.word	0x40020400
 800703c:	10110000 	.word	0x10110000

08007040 <MX_USART2_UART_Init>:
{
 8007040:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8007042:	4808      	ldr	r0, [pc, #32]	; (8007064 <MX_USART2_UART_Init+0x24>)
 8007044:	4b08      	ldr	r3, [pc, #32]	; (8007068 <MX_USART2_UART_Init+0x28>)
 8007046:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8007048:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800704c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800704e:	2300      	movs	r3, #0
 8007050:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007052:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007054:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007056:	220c      	movs	r2, #12
 8007058:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800705a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800705c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800705e:	f7fe ffe6 	bl	800602e <HAL_UART_Init>
}
 8007062:	bd08      	pop	{r3, pc}
 8007064:	20004604 	.word	0x20004604
 8007068:	40004400 	.word	0x40004400

0800706c <MX_USART6_UART_Init>:
{
 800706c:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 800706e:	4808      	ldr	r0, [pc, #32]	; (8007090 <MX_USART6_UART_Init+0x24>)
 8007070:	4b08      	ldr	r3, [pc, #32]	; (8007094 <MX_USART6_UART_Init+0x28>)
 8007072:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 115200;
 8007074:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007078:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800707a:	2300      	movs	r3, #0
 800707c:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800707e:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8007080:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8007082:	220c      	movs	r2, #12
 8007084:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007086:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8007088:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800708a:	f7fe ffd0 	bl	800602e <HAL_UART_Init>
}
 800708e:	bd08      	pop	{r3, pc}
 8007090:	200045a0 	.word	0x200045a0
 8007094:	40011400 	.word	0x40011400

08007098 <MX_I2C2_Init>:
{
 8007098:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 800709a:	4809      	ldr	r0, [pc, #36]	; (80070c0 <MX_I2C2_Init+0x28>)
 800709c:	4b09      	ldr	r3, [pc, #36]	; (80070c4 <MX_I2C2_Init+0x2c>)
 800709e:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80070a0:	4b09      	ldr	r3, [pc, #36]	; (80070c8 <MX_I2C2_Init+0x30>)
 80070a2:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80070a4:	2300      	movs	r3, #0
 80070a6:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80070a8:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80070aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80070ae:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80070b0:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80070b2:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80070b4:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80070b6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80070b8:	f7fc ffcc 	bl	8004054 <HAL_I2C_Init>
}
 80070bc:	bd08      	pop	{r3, pc}
 80070be:	bf00      	nop
 80070c0:	20004344 	.word	0x20004344
 80070c4:	40005800 	.word	0x40005800
 80070c8:	00061a80 	.word	0x00061a80

080070cc <MX_TIM4_Init>:
{
 80070cc:	b570      	push	{r4, r5, r6, lr}
 80070ce:	b08a      	sub	sp, #40	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80070d0:	2400      	movs	r4, #0
 80070d2:	9408      	str	r4, [sp, #32]
 80070d4:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80070d6:	9401      	str	r4, [sp, #4]
 80070d8:	9402      	str	r4, [sp, #8]
 80070da:	9403      	str	r4, [sp, #12]
 80070dc:	9404      	str	r4, [sp, #16]
 80070de:	9405      	str	r4, [sp, #20]
 80070e0:	9406      	str	r4, [sp, #24]
 80070e2:	9407      	str	r4, [sp, #28]
  htim4.Instance = TIM4;
 80070e4:	4d1b      	ldr	r5, [pc, #108]	; (8007154 <MX_TIM4_Init+0x88>)
 80070e6:	4b1c      	ldr	r3, [pc, #112]	; (8007158 <MX_TIM4_Init+0x8c>)
 80070e8:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 9;
 80070ea:	2309      	movs	r3, #9
 80070ec:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070ee:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 20000;
 80070f0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80070f4:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80070f6:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80070f8:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80070fa:	4628      	mov	r0, r5
 80070fc:	f7fe fc8d 	bl	8005a1a <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007100:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007102:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007104:	a908      	add	r1, sp, #32
 8007106:	4628      	mov	r0, r5
 8007108:	f7fe fda0 	bl	8005c4c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800710c:	2360      	movs	r3, #96	; 0x60
 800710e:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8007110:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007112:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8007114:	2604      	movs	r6, #4
 8007116:	9605      	str	r6, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007118:	4622      	mov	r2, r4
 800711a:	eb0d 0106 	add.w	r1, sp, r6
 800711e:	4628      	mov	r0, r5
 8007120:	f7fe fcc6 	bl	8005ab0 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007124:	4632      	mov	r2, r6
 8007126:	eb0d 0106 	add.w	r1, sp, r6
 800712a:	4628      	mov	r0, r5
 800712c:	f7fe fcc0 	bl	8005ab0 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007130:	2208      	movs	r2, #8
 8007132:	eb0d 0106 	add.w	r1, sp, r6
 8007136:	4628      	mov	r0, r5
 8007138:	f7fe fcba 	bl	8005ab0 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800713c:	220c      	movs	r2, #12
 800713e:	eb0d 0106 	add.w	r1, sp, r6
 8007142:	4628      	mov	r0, r5
 8007144:	f7fe fcb4 	bl	8005ab0 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8007148:	4628      	mov	r0, r5
 800714a:	f000 fd1d 	bl	8007b88 <HAL_TIM_MspPostInit>
}
 800714e:	b00a      	add	sp, #40	; 0x28
 8007150:	bd70      	pop	{r4, r5, r6, pc}
 8007152:	bf00      	nop
 8007154:	20004478 	.word	0x20004478
 8007158:	40000800 	.word	0x40000800

0800715c <MX_ADC1_Init>:
{
 800715c:	b530      	push	{r4, r5, lr}
 800715e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8007160:	2300      	movs	r3, #0
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	9301      	str	r3, [sp, #4]
 8007166:	9302      	str	r3, [sp, #8]
 8007168:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 800716a:	4c11      	ldr	r4, [pc, #68]	; (80071b0 <MX_ADC1_Init+0x54>)
 800716c:	4a11      	ldr	r2, [pc, #68]	; (80071b4 <MX_ADC1_Init+0x58>)
 800716e:	6022      	str	r2, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007170:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007174:	6062      	str	r2, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007176:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8007178:	6123      	str	r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800717a:	2501      	movs	r5, #1
 800717c:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800717e:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007182:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007184:	4a0c      	ldr	r2, [pc, #48]	; (80071b8 <MX_ADC1_Init+0x5c>)
 8007186:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007188:	60e3      	str	r3, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 800718a:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800718c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007190:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007192:	4620      	mov	r0, r4
 8007194:	f7fc fb04 	bl	80037a0 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_7;
 8007198:	2307      	movs	r3, #7
 800719a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 800719c:	9501      	str	r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800719e:	2302      	movs	r3, #2
 80071a0:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80071a2:	4669      	mov	r1, sp
 80071a4:	4620      	mov	r0, r4
 80071a6:	f7fc fb27 	bl	80037f8 <HAL_ADC_ConfigChannel>
}
 80071aa:	b005      	add	sp, #20
 80071ac:	bd30      	pop	{r4, r5, pc}
 80071ae:	bf00      	nop
 80071b0:	200044ec 	.word	0x200044ec
 80071b4:	40012000 	.word	0x40012000
 80071b8:	0f000001 	.word	0x0f000001

080071bc <MX_SPI2_Init>:
{
 80071bc:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 80071be:	480c      	ldr	r0, [pc, #48]	; (80071f0 <MX_SPI2_Init+0x34>)
 80071c0:	4b0c      	ldr	r3, [pc, #48]	; (80071f4 <MX_SPI2_Init+0x38>)
 80071c2:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80071c4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80071c8:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80071ca:	2300      	movs	r3, #0
 80071cc:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80071ce:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80071d0:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80071d2:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80071d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071d8:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80071da:	2220      	movs	r2, #32
 80071dc:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80071de:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80071e0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071e2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80071e4:	230a      	movs	r3, #10
 80071e6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80071e8:	f7fd fed8 	bl	8004f9c <HAL_SPI_Init>
}
 80071ec:	bd08      	pop	{r3, pc}
 80071ee:	bf00      	nop
 80071f0:	200043ec 	.word	0x200043ec
 80071f4:	40003800 	.word	0x40003800

080071f8 <MX_CRC_Init>:
{
 80071f8:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 80071fa:	4803      	ldr	r0, [pc, #12]	; (8007208 <MX_CRC_Init+0x10>)
 80071fc:	4b03      	ldr	r3, [pc, #12]	; (800720c <MX_CRC_Init+0x14>)
 80071fe:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007200:	f7fc fc20 	bl	8003a44 <HAL_CRC_Init>
}
 8007204:	bd08      	pop	{r3, pc}
 8007206:	bf00      	nop
 8007208:	200044c4 	.word	0x200044c4
 800720c:	40023000 	.word	0x40023000

08007210 <MX_TIM11_Init>:
{
 8007210:	b508      	push	{r3, lr}
  htim11.Instance = TIM11;
 8007212:	4807      	ldr	r0, [pc, #28]	; (8007230 <MX_TIM11_Init+0x20>)
 8007214:	4b07      	ldr	r3, [pc, #28]	; (8007234 <MX_TIM11_Init+0x24>)
 8007216:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 100;
 8007218:	2364      	movs	r3, #100	; 0x64
 800721a:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800721c:	2300      	movs	r3, #0
 800721e:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 65535;
 8007220:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007224:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007226:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007228:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800722a:	f7fe fbdd 	bl	80059e8 <HAL_TIM_Base_Init>
}
 800722e:	bd08      	pop	{r3, pc}
 8007230:	20004554 	.word	0x20004554
 8007234:	40014800 	.word	0x40014800

08007238 <SystemClock_Config>:
{
 8007238:	b530      	push	{r4, r5, lr}
 800723a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800723c:	2230      	movs	r2, #48	; 0x30
 800723e:	2100      	movs	r1, #0
 8007240:	a808      	add	r0, sp, #32
 8007242:	f002 fc28 	bl	8009a96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007246:	2400      	movs	r4, #0
 8007248:	9403      	str	r4, [sp, #12]
 800724a:	9404      	str	r4, [sp, #16]
 800724c:	9405      	str	r4, [sp, #20]
 800724e:	9406      	str	r4, [sp, #24]
 8007250:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007252:	9401      	str	r4, [sp, #4]
 8007254:	4b1a      	ldr	r3, [pc, #104]	; (80072c0 <SystemClock_Config+0x88>)
 8007256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007258:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800725c:	641a      	str	r2, [r3, #64]	; 0x40
 800725e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007264:	9301      	str	r3, [sp, #4]
 8007266:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007268:	9402      	str	r4, [sp, #8]
 800726a:	4b16      	ldr	r3, [pc, #88]	; (80072c4 <SystemClock_Config+0x8c>)
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800727a:	9302      	str	r3, [sp, #8]
 800727c:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800727e:	2502      	movs	r5, #2
 8007280:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007282:	2301      	movs	r3, #1
 8007284:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007286:	2310      	movs	r3, #16
 8007288:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800728a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800728c:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800728e:	2308      	movs	r3, #8
 8007290:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8007292:	2364      	movs	r3, #100	; 0x64
 8007294:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007296:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007298:	2304      	movs	r3, #4
 800729a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800729c:	a808      	add	r0, sp, #32
 800729e:	f7fd fa8d 	bl	80047bc <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80072a2:	230f      	movs	r3, #15
 80072a4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80072a6:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80072a8:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80072aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072ae:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80072b0:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80072b2:	2103      	movs	r1, #3
 80072b4:	a803      	add	r0, sp, #12
 80072b6:	f7fd fcb9 	bl	8004c2c <HAL_RCC_ClockConfig>
}
 80072ba:	b015      	add	sp, #84	; 0x54
 80072bc:	bd30      	pop	{r4, r5, pc}
 80072be:	bf00      	nop
 80072c0:	40023800 	.word	0x40023800
 80072c4:	40007000 	.word	0x40007000

080072c8 <PWM1_Set>:

}

//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 80072c8:	4b01      	ldr	r3, [pc, #4]	; (80072d0 <PWM1_Set+0x8>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6358      	str	r0, [r3, #52]	; 0x34
}
 80072ce:	4770      	bx	lr
 80072d0:	20004478 	.word	0x20004478

080072d4 <PWM2_Set>:

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 80072d4:	4b01      	ldr	r3, [pc, #4]	; (80072dc <PWM2_Set+0x8>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6398      	str	r0, [r3, #56]	; 0x38

}
 80072da:	4770      	bx	lr
 80072dc:	20004478 	.word	0x20004478

080072e0 <PWM3_Set>:

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 80072e0:	4b01      	ldr	r3, [pc, #4]	; (80072e8 <PWM3_Set+0x8>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 80072e6:	4770      	bx	lr
 80072e8:	20004478 	.word	0x20004478

080072ec <PWM4_Set>:

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 80072ec:	4b01      	ldr	r3, [pc, #4]	; (80072f4 <PWM4_Set+0x8>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6418      	str	r0, [r3, #64]	; 0x40
}
 80072f2:	4770      	bx	lr
 80072f4:	20004478 	.word	0x20004478

080072f8 <main>:
{
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	b09e      	sub	sp, #120	; 0x78
  HAL_Init();
 80072fc:	f7fc f976 	bl	80035ec <HAL_Init>
  SystemClock_Config();
 8007300:	f7ff ff9a 	bl	8007238 <SystemClock_Config>
  MX_GPIO_Init();
 8007304:	f7ff fe1e 	bl	8006f44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8007308:	f7ff fe9a 	bl	8007040 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800730c:	f7ff fec4 	bl	8007098 <MX_I2C2_Init>
  MX_TIM4_Init();
 8007310:	f7ff fedc 	bl	80070cc <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8007314:	f7ff feaa 	bl	800706c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8007318:	f7ff ff20 	bl	800715c <MX_ADC1_Init>
  MX_SPI2_Init();
 800731c:	f7ff ff4e 	bl	80071bc <MX_SPI2_Init>
  MX_CRC_Init();
 8007320:	f7ff ff6a 	bl	80071f8 <MX_CRC_Init>
  MX_TIM11_Init();
 8007324:	f7ff ff74 	bl	8007210 <MX_TIM11_Init>
	HAL_TIM_Base_Start(&htim11);
 8007328:	483b      	ldr	r0, [pc, #236]	; (8007418 <main+0x120>)
 800732a:	f7fe fa2b 	bl	8005784 <HAL_TIM_Base_Start>
	if (imu_init(&hi2c2) == IMU_SUCCESS) {
 800732e:	483b      	ldr	r0, [pc, #236]	; (800741c <main+0x124>)
 8007330:	f7f9 fe62 	bl	8000ff8 <imu_init>
 8007334:	b108      	cbz	r0, 800733a <main+0x42>
{
 8007336:	2300      	movs	r3, #0
 8007338:	e008      	b.n	800734c <main+0x54>
		imu_calibrate();
 800733a:	f7fa fc15 	bl	8001b68 <imu_calibrate>
 800733e:	e7fa      	b.n	8007336 <main+0x3e>
		AckPayload_0[i] = 0;
 8007340:	2200      	movs	r2, #0
 8007342:	4937      	ldr	r1, [pc, #220]	; (8007420 <main+0x128>)
 8007344:	54ca      	strb	r2, [r1, r3]
		AckPayload_1[i] = 0;
 8007346:	4937      	ldr	r1, [pc, #220]	; (8007424 <main+0x12c>)
 8007348:	54ca      	strb	r2, [r1, r3]
	for (int i = 0; i < 31; ++i) {
 800734a:	3301      	adds	r3, #1
 800734c:	2b1e      	cmp	r3, #30
 800734e:	ddf7      	ble.n	8007340 <main+0x48>
	DWT_Init(); //Enable some of the MCUs special registers so we can get microsecond (us) delays
 8007350:	f7fc f924 	bl	800359c <DWT_Init>
	NRF24_begin(GPIOB, nrf_CSN_PIN, nrf_CE_PIN, hspi2);
 8007354:	4c34      	ldr	r4, [pc, #208]	; (8007428 <main+0x130>)
 8007356:	2254      	movs	r2, #84	; 0x54
 8007358:	1d21      	adds	r1, r4, #4
 800735a:	4668      	mov	r0, sp
 800735c:	f002 fb90 	bl	8009a80 <memcpy>
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007366:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800736a:	4830      	ldr	r0, [pc, #192]	; (800742c <main+0x134>)
 800736c:	f7fb fbc0 	bl	8002af0 <NRF24_begin>
	nrf24_DebugUART_Init(huart6);
 8007370:	4e2f      	ldr	r6, [pc, #188]	; (8007430 <main+0x138>)
 8007372:	466c      	mov	r4, sp
 8007374:	f106 0510 	add.w	r5, r6, #16
 8007378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800737a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800737c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800737e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007380:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007384:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8007388:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800738c:	f7fb ff6a 	bl	8003264 <nrf24_DebugUART_Init>
	NRF24_enableAckPayload();
 8007390:	f7fb fb8a 	bl	8002aa8 <NRF24_enableAckPayload>
	NRF24_setAutoAck(true);
 8007394:	2001      	movs	r0, #1
 8007396:	f7fb fac0 	bl	800291a <NRF24_setAutoAck>
	NRF24_openReadingPipe(1, TxpipeAddrs);
 800739a:	4b26      	ldr	r3, [pc, #152]	; (8007434 <main+0x13c>)
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	2001      	movs	r0, #1
 80073a2:	f7fb fa0b 	bl	80027bc <NRF24_openReadingPipe>
	NRF24_startListening();
 80073a6:	f7fb f9e7 	bl	8002778 <NRF24_startListening>
	printRadioSettings();
 80073aa:	f7fb fc6b 	bl	8002c84 <printRadioSettings>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80073ae:	4c22      	ldr	r4, [pc, #136]	; (8007438 <main+0x140>)
 80073b0:	2100      	movs	r1, #0
 80073b2:	4620      	mov	r0, r4
 80073b4:	f7fe fbfc 	bl	8005bb0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80073b8:	2104      	movs	r1, #4
 80073ba:	4620      	mov	r0, r4
 80073bc:	f7fe fbf8 	bl	8005bb0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80073c0:	2108      	movs	r1, #8
 80073c2:	4620      	mov	r0, r4
 80073c4:	f7fe fbf4 	bl	8005bb0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80073c8:	210c      	movs	r1, #12
 80073ca:	4620      	mov	r0, r4
 80073cc:	f7fe fbf0 	bl	8005bb0 <HAL_TIM_PWM_Start>
	PWM1_Set(2500);
 80073d0:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80073d4:	f7ff ff78 	bl	80072c8 <PWM1_Set>
	PWM2_Set(2500);
 80073d8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80073dc:	f7ff ff7a 	bl	80072d4 <PWM2_Set>
	PWM3_Set(2500);
 80073e0:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80073e4:	f7ff ff7c 	bl	80072e0 <PWM3_Set>
	PWM4_Set(2500);
 80073e8:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80073ec:	f7ff ff7e 	bl	80072ec <PWM4_Set>
  osThreadDef(ControlLoop, StartControlLoop, osPriorityRealtime, 0, 256);
 80073f0:	ac17      	add	r4, sp, #92	; 0x5c
 80073f2:	4d12      	ldr	r5, [pc, #72]	; (800743c <main+0x144>)
 80073f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80073fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlLoopHandle = osThreadCreate(osThread(ControlLoop), NULL);
 8007400:	2100      	movs	r1, #0
 8007402:	a817      	add	r0, sp, #92	; 0x5c
 8007404:	f7fe febd 	bl	8006182 <osThreadCreate>
 8007408:	4b0d      	ldr	r3, [pc, #52]	; (8007440 <main+0x148>)
 800740a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800740c:	f7fe feb4 	bl	8006178 <osKernelStart>
		main_loop = 1;
 8007410:	4b0c      	ldr	r3, [pc, #48]	; (8007444 <main+0x14c>)
 8007412:	2201      	movs	r2, #1
 8007414:	701a      	strb	r2, [r3, #0]
 8007416:	e7fb      	b.n	8007410 <main+0x118>
 8007418:	20004554 	.word	0x20004554
 800741c:	20004344 	.word	0x20004344
 8007420:	20004534 	.word	0x20004534
 8007424:	2000004c 	.word	0x2000004c
 8007428:	200043ec 	.word	0x200043ec
 800742c:	40020400 	.word	0x40020400
 8007430:	200045a0 	.word	0x200045a0
 8007434:	20000070 	.word	0x20000070
 8007438:	20004478 	.word	0x20004478
 800743c:	0800df28 	.word	0x0800df28
 8007440:	200044c0 	.word	0x200044c0
 8007444:	200042f4 	.word	0x200042f4

08007448 <__io_putchar>:
/*
 *	Some functions to allow the program to use printf,
 *	from http://www.emcu.eu/how-to-implement-printf-for-send-message-via-usb-on-stm32-nucleo-boards-using-atollic/
 *
 */
int __io_putchar(int ch) {
 8007448:	b510      	push	{r4, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	4604      	mov	r4, r0
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 800744e:	a902      	add	r1, sp, #8
 8007450:	f801 0d04 	strb.w	r0, [r1, #-4]!

	HAL_UART_Transmit(&huart6, &*c, 1, 10);
 8007454:	230a      	movs	r3, #10
 8007456:	2201      	movs	r2, #1
 8007458:	4802      	ldr	r0, [pc, #8]	; (8007464 <__io_putchar+0x1c>)
 800745a:	f7fe fe17 	bl	800608c <HAL_UART_Transmit>
	return ch;
}
 800745e:	4620      	mov	r0, r4
 8007460:	b002      	add	sp, #8
 8007462:	bd10      	pop	{r4, pc}
 8007464:	200045a0 	.word	0x200045a0

08007468 <_write>:

int _write(int file, char *ptr, int len) {
 8007468:	b570      	push	{r4, r5, r6, lr}
 800746a:	4616      	mov	r6, r2
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800746c:	2400      	movs	r4, #0
 800746e:	e005      	b.n	800747c <_write+0x14>
		__io_putchar(*ptr++);
 8007470:	1c4d      	adds	r5, r1, #1
 8007472:	7808      	ldrb	r0, [r1, #0]
 8007474:	f7ff ffe8 	bl	8007448 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8007478:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 800747a:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800747c:	42b4      	cmp	r4, r6
 800747e:	dbf7      	blt.n	8007470 <_write+0x8>
	}
	return len;
}
 8007480:	4630      	mov	r0, r6
 8007482:	bd70      	pop	{r4, r5, r6, pc}

08007484 <packAckPayData_0>:

}

//	Pack acknowledge payload data 0 - sent every control loop, which will be sent back to controller once drone has successfully
//	received a payload from it
void packAckPayData_0() {
 8007484:	b510      	push	{r4, lr}
 8007486:	ed2d 8b02 	vpush	{d8}

	//ID for packet 0
	AckPayload_0[0] = 0x00;
 800748a:	4c26      	ldr	r4, [pc, #152]	; (8007524 <packAckPayData_0+0xa0>)
 800748c:	2300      	movs	r3, #0
 800748e:	7023      	strb	r3, [r4, #0]

	//Next 2 bytes = Battery level
	AckPayload_0[1] = batteryLevel;
 8007490:	4b25      	ldr	r3, [pc, #148]	; (8007528 <packAckPayData_0+0xa4>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	7063      	strb	r3, [r4, #1]
	AckPayload_0[2] = batteryLevel >> 8;
 8007496:	0a1b      	lsrs	r3, r3, #8
 8007498:	70a3      	strb	r3, [r4, #2]

	//Next 4 bytes = IMU Roll
	int16_t roll_tx = round(imu_roll * 100);
 800749a:	4b24      	ldr	r3, [pc, #144]	; (800752c <packAckPayData_0+0xa8>)
 800749c:	edd3 7a00 	vldr	s15, [r3]
 80074a0:	ed9f 8a23 	vldr	s16, [pc, #140]	; 8007530 <packAckPayData_0+0xac>
 80074a4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80074a8:	ee17 0a90 	vmov	r0, s15
 80074ac:	f7f9 f854 	bl	8000558 <__aeabi_f2d>
 80074b0:	ec41 0b10 	vmov	d0, r0, r1
 80074b4:	f000 fcd6 	bl	8007e64 <round>
 80074b8:	ec51 0b10 	vmov	r0, r1, d0
 80074bc:	f7f9 fb54 	bl	8000b68 <__aeabi_d2iz>
 80074c0:	b200      	sxth	r0, r0
	AckPayload_0[3] = roll_tx;
 80074c2:	70e0      	strb	r0, [r4, #3]
	AckPayload_0[4] = roll_tx >> 8;
 80074c4:	1200      	asrs	r0, r0, #8
 80074c6:	7120      	strb	r0, [r4, #4]

	//Next  4 bytes = IMU Pitch
	int16_t pitch_tx = round(imu_pitch * 100);
 80074c8:	4b1a      	ldr	r3, [pc, #104]	; (8007534 <packAckPayData_0+0xb0>)
 80074ca:	edd3 7a00 	vldr	s15, [r3]
 80074ce:	ee67 7a88 	vmul.f32	s15, s15, s16
 80074d2:	ee17 0a90 	vmov	r0, s15
 80074d6:	f7f9 f83f 	bl	8000558 <__aeabi_f2d>
 80074da:	ec41 0b10 	vmov	d0, r0, r1
 80074de:	f000 fcc1 	bl	8007e64 <round>
 80074e2:	ec51 0b10 	vmov	r0, r1, d0
 80074e6:	f7f9 fb3f 	bl	8000b68 <__aeabi_d2iz>
 80074ea:	b200      	sxth	r0, r0
	AckPayload_0[5] = pitch_tx;
 80074ec:	7160      	strb	r0, [r4, #5]
	AckPayload_0[6] = pitch_tx >> 8;
 80074ee:	1200      	asrs	r0, r0, #8
 80074f0:	71a0      	strb	r0, [r4, #6]

	//Next  4 bytes = IMU Yaw
	int16_t yaw_tx = round(imu_yaw * 100);
 80074f2:	4b11      	ldr	r3, [pc, #68]	; (8007538 <packAckPayData_0+0xb4>)
 80074f4:	edd3 7a00 	vldr	s15, [r3]
 80074f8:	ee67 7a88 	vmul.f32	s15, s15, s16
 80074fc:	ee17 0a90 	vmov	r0, s15
 8007500:	f7f9 f82a 	bl	8000558 <__aeabi_f2d>
 8007504:	ec41 0b10 	vmov	d0, r0, r1
 8007508:	f000 fcac 	bl	8007e64 <round>
 800750c:	ec51 0b10 	vmov	r0, r1, d0
 8007510:	f7f9 fb2a 	bl	8000b68 <__aeabi_d2iz>
 8007514:	b200      	sxth	r0, r0
	AckPayload_0[7] = yaw_tx;
 8007516:	71e0      	strb	r0, [r4, #7]
	AckPayload_0[8] = yaw_tx >> 8;
 8007518:	1200      	asrs	r0, r0, #8
 800751a:	7220      	strb	r0, [r4, #8]

}
 800751c:	ecbd 8b02 	vpop	{d8}
 8007520:	bd10      	pop	{r4, pc}
 8007522:	bf00      	nop
 8007524:	20004534 	.word	0x20004534
 8007528:	200042dc 	.word	0x200042dc
 800752c:	20004598 	.word	0x20004598
 8007530:	42c80000 	.word	0x42c80000
 8007534:	2000459c 	.word	0x2000459c
 8007538:	2000446c 	.word	0x2000446c

0800753c <packAckPayData_1>:

//	Pack acknowledge payload data 1 - sent every second
void packAckPayData_1() {

	//ID for packet 1
	AckPayload_1[0] = 0xFF;
 800753c:	4b01      	ldr	r3, [pc, #4]	; (8007544 <packAckPayData_1+0x8>)
 800753e:	22ff      	movs	r2, #255	; 0xff
 8007540:	701a      	strb	r2, [r3, #0]
//	AckPayload_1[19] = temp[0];
//	AckPayload_1[20] = temp[1];
//	AckPayload_1[21] = temp[2];
//	AckPayload_1[22] = temp[3];

}
 8007542:	4770      	bx	lr
 8007544:	2000004c 	.word	0x2000004c

08007548 <kill>:
}

/*
 *  Kill function disables PWM outputs, turning off motors
 */
void kill() {
 8007548:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800754a:	4c09      	ldr	r4, [pc, #36]	; (8007570 <kill+0x28>)
 800754c:	2100      	movs	r1, #0
 800754e:	4620      	mov	r0, r4
 8007550:	f7fe fb4c 	bl	8005bec <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8007554:	2104      	movs	r1, #4
 8007556:	4620      	mov	r0, r4
 8007558:	f7fe fb48 	bl	8005bec <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 800755c:	2108      	movs	r1, #8
 800755e:	4620      	mov	r0, r4
 8007560:	f7fe fb44 	bl	8005bec <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 8007564:	210c      	movs	r1, #12
 8007566:	4620      	mov	r0, r4
 8007568:	f7fe fb40 	bl	8005bec <HAL_TIM_PWM_Stop>
}
 800756c:	bd10      	pop	{r4, pc}
 800756e:	bf00      	nop
 8007570:	20004478 	.word	0x20004478

08007574 <unpackRxData>:
void unpackRxData() {
 8007574:	b508      	push	{r3, lr}
	L_Joystick_XPos = (RxData[0] & 0xFF) | (RxData[1] << 8);
 8007576:	4b13      	ldr	r3, [pc, #76]	; (80075c4 <unpackRxData+0x50>)
 8007578:	781a      	ldrb	r2, [r3, #0]
 800757a:	7859      	ldrb	r1, [r3, #1]
 800757c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007580:	4911      	ldr	r1, [pc, #68]	; (80075c8 <unpackRxData+0x54>)
 8007582:	800a      	strh	r2, [r1, #0]
	L_Joystick_YPos = (RxData[2] & 0xFF) | (RxData[3] << 8);
 8007584:	789a      	ldrb	r2, [r3, #2]
 8007586:	78d9      	ldrb	r1, [r3, #3]
 8007588:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800758c:	490f      	ldr	r1, [pc, #60]	; (80075cc <unpackRxData+0x58>)
 800758e:	800a      	strh	r2, [r1, #0]
	R_Joystick_XPos = (RxData[4] & 0xFF) | (RxData[5] << 8);
 8007590:	791a      	ldrb	r2, [r3, #4]
 8007592:	7959      	ldrb	r1, [r3, #5]
 8007594:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007598:	490d      	ldr	r1, [pc, #52]	; (80075d0 <unpackRxData+0x5c>)
 800759a:	800a      	strh	r2, [r1, #0]
	R_Joystick_YPos = (RxData[6] & 0xFF) | (RxData[7] << 8);
 800759c:	799a      	ldrb	r2, [r3, #6]
 800759e:	79d9      	ldrb	r1, [r3, #7]
 80075a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80075a4:	490b      	ldr	r1, [pc, #44]	; (80075d4 <unpackRxData+0x60>)
 80075a6:	800a      	strh	r2, [r1, #0]
	airmode = (RxData[8] >> 0) & 1;
 80075a8:	7a1b      	ldrb	r3, [r3, #8]
 80075aa:	f003 0101 	and.w	r1, r3, #1
 80075ae:	4a0a      	ldr	r2, [pc, #40]	; (80075d8 <unpackRxData+0x64>)
 80075b0:	7011      	strb	r1, [r2, #0]
	kill_rx = (RxData[8] >> 1) & 1;
 80075b2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80075b6:	4a09      	ldr	r2, [pc, #36]	; (80075dc <unpackRxData+0x68>)
 80075b8:	7013      	strb	r3, [r2, #0]
	if (kill_rx) {
 80075ba:	b903      	cbnz	r3, 80075be <unpackRxData+0x4a>
}
 80075bc:	bd08      	pop	{r3, pc}
		kill();
 80075be:	f7ff ffc3 	bl	8007548 <kill>
}
 80075c2:	e7fb      	b.n	80075bc <unpackRxData+0x48>
 80075c4:	200045e0 	.word	0x200045e0
 80075c8:	200042d8 	.word	0x200042d8
 80075cc:	2000006c 	.word	0x2000006c
 80075d0:	20004594 	.word	0x20004594
 80075d4:	20004644 	.word	0x20004644
 80075d8:	200042da 	.word	0x200042da
 80075dc:	200042f0 	.word	0x200042f0

080075e0 <map>:
	NRF24_openReadingPipe(1, TxpipeAddrs);
	NRF24_startListening();

}

float map(int x, int in_min, int in_max, int out_min, int out_max) {
 80075e0:	b410      	push	{r4}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80075e2:	1a40      	subs	r0, r0, r1
 80075e4:	9c01      	ldr	r4, [sp, #4]
 80075e6:	1ae4      	subs	r4, r4, r3
 80075e8:	fb04 f000 	mul.w	r0, r4, r0
 80075ec:	1a52      	subs	r2, r2, r1
 80075ee:	fb90 f0f2 	sdiv	r0, r0, r2
 80075f2:	18c3      	adds	r3, r0, r3
 80075f4:	ee00 3a10 	vmov	s0, r3
}
 80075f8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80075fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007600:	4770      	bx	lr
	...

08007604 <controlLoop>:
void controlLoop(){
 8007604:	b570      	push	{r4, r5, r6, lr}
 8007606:	b084      	sub	sp, #16
		packAckPayData_0();
 8007608:	f7ff ff3c 	bl	8007484 <packAckPayData_0>
		if (loop_counter == CRTL_LOOP_FREQ - 1) {
 800760c:	4b9b      	ldr	r3, [pc, #620]	; (800787c <controlLoop+0x278>)
 800760e:	881b      	ldrh	r3, [r3, #0]
 8007610:	f240 12f3 	movw	r2, #499	; 0x1f3
 8007614:	4293      	cmp	r3, r2
 8007616:	f000 80bc 	beq.w	8007792 <controlLoop+0x18e>
			loop_counter++;
 800761a:	3301      	adds	r3, #1
 800761c:	4a97      	ldr	r2, [pc, #604]	; (800787c <controlLoop+0x278>)
 800761e:	8013      	strh	r3, [r2, #0]
		if (NRF24_available()) {
 8007620:	f7fb f9ff 	bl	8002a22 <NRF24_available>
 8007624:	2800      	cmp	r0, #0
 8007626:	f040 80ba 	bne.w	800779e <controlLoop+0x19a>
			packetsLostCtr++;
 800762a:	4a95      	ldr	r2, [pc, #596]	; (8007880 <controlLoop+0x27c>)
 800762c:	8813      	ldrh	r3, [r2, #0]
 800762e:	3301      	adds	r3, #1
 8007630:	8013      	strh	r3, [r2, #0]
		tim11_count = htim11.Instance->CNT; //read TIM11 counter value, used for integral calculations
 8007632:	4e94      	ldr	r6, [pc, #592]	; (8007884 <controlLoop+0x280>)
 8007634:	6833      	ldr	r3, [r6, #0]
 8007636:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007638:	4d93      	ldr	r5, [pc, #588]	; (8007888 <controlLoop+0x284>)
 800763a:	602c      	str	r4, [r5, #0]
		calc_RollPitchYaw(tim11_count, &imu_roll, &imu_pitch, &imu_yaw);
 800763c:	4b93      	ldr	r3, [pc, #588]	; (800788c <controlLoop+0x288>)
 800763e:	4a94      	ldr	r2, [pc, #592]	; (8007890 <controlLoop+0x28c>)
 8007640:	4994      	ldr	r1, [pc, #592]	; (8007894 <controlLoop+0x290>)
 8007642:	4620      	mov	r0, r4
 8007644:	f7fa fd54 	bl	80020f0 <calc_RollPitchYaw>
		tim11_count = htim11.Instance->CNT; //read TIM11 counter value, used for integral calculations
 8007648:	6833      	ldr	r3, [r6, #0]
 800764a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800764c:	6028      	str	r0, [r5, #0]
		volatile int deltat = tim2-tim1;
 800764e:	1b00      	subs	r0, r0, r4
 8007650:	9003      	str	r0, [sp, #12]
		if (airmode) {
 8007652:	4b91      	ldr	r3, [pc, #580]	; (8007898 <controlLoop+0x294>)
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 8102 	beq.w	8007860 <controlLoop+0x25c>
			pid_output_pitch = pid_calculate_pitch(imu_pitch, 0, 0);
 800765c:	eddf 0a8f 	vldr	s1, [pc, #572]	; 800789c <controlLoop+0x298>
 8007660:	2000      	movs	r0, #0
 8007662:	4b8b      	ldr	r3, [pc, #556]	; (8007890 <controlLoop+0x28c>)
 8007664:	ed93 0a00 	vldr	s0, [r3]
 8007668:	f7fb fe9c 	bl	80033a4 <pid_calculate_pitch>
 800766c:	4b8c      	ldr	r3, [pc, #560]	; (80078a0 <controlLoop+0x29c>)
 800766e:	ed83 0a00 	vstr	s0, [r3]
			pid_output_roll = pid_calculate_roll(imu_roll, 0, roll_setpoint);
 8007672:	4b8c      	ldr	r3, [pc, #560]	; (80078a4 <controlLoop+0x2a0>)
 8007674:	edd3 0a00 	vldr	s1, [r3]
 8007678:	2000      	movs	r0, #0
 800767a:	4b86      	ldr	r3, [pc, #536]	; (8007894 <controlLoop+0x290>)
 800767c:	ed93 0a00 	vldr	s0, [r3]
 8007680:	f7fb fe12 	bl	80032a8 <pid_calculate_roll>
 8007684:	4b88      	ldr	r3, [pc, #544]	; (80078a8 <controlLoop+0x2a4>)
 8007686:	ed83 0a00 	vstr	s0, [r3]
			pid_output_yaw = pid_calculate_yaw(imu_yaw, 0, yaw_setpoint);
 800768a:	4b88      	ldr	r3, [pc, #544]	; (80078ac <controlLoop+0x2a8>)
 800768c:	edd3 0a00 	vldr	s1, [r3]
 8007690:	2000      	movs	r0, #0
 8007692:	4b7e      	ldr	r3, [pc, #504]	; (800788c <controlLoop+0x288>)
 8007694:	ed93 0a00 	vldr	s0, [r3]
 8007698:	f7fb ff02 	bl	80034a0 <pid_calculate_yaw>
 800769c:	4b84      	ldr	r3, [pc, #528]	; (80078b0 <controlLoop+0x2ac>)
 800769e:	ed83 0a00 	vstr	s0, [r3]
		esc1_total = throttle - (int) pid_output_roll - (int) pid_output_pitch;
 80076a2:	4b84      	ldr	r3, [pc, #528]	; (80078b4 <controlLoop+0x2b0>)
 80076a4:	6818      	ldr	r0, [r3, #0]
 80076a6:	4b80      	ldr	r3, [pc, #512]	; (80078a8 <controlLoop+0x2a4>)
 80076a8:	edd3 7a00 	vldr	s15, [r3]
 80076ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076b0:	ee17 1a90 	vmov	r1, s15
 80076b4:	1a42      	subs	r2, r0, r1
 80076b6:	4b7a      	ldr	r3, [pc, #488]	; (80078a0 <controlLoop+0x29c>)
 80076b8:	edd3 7a00 	vldr	s15, [r3]
 80076bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076c0:	ee17 3a90 	vmov	r3, s15
 80076c4:	1ad4      	subs	r4, r2, r3
 80076c6:	4d7c      	ldr	r5, [pc, #496]	; (80078b8 <controlLoop+0x2b4>)
 80076c8:	602c      	str	r4, [r5, #0]
		esc2_total = throttle - (int) pid_output_roll + (int) pid_output_pitch;
 80076ca:	441a      	add	r2, r3
 80076cc:	4d7b      	ldr	r5, [pc, #492]	; (80078bc <controlLoop+0x2b8>)
 80076ce:	602a      	str	r2, [r5, #0]
		esc3_total = (throttle) + (int) pid_output_roll
 80076d0:	4401      	add	r1, r0
				- (int) pid_output_pitch;
 80076d2:	1ac8      	subs	r0, r1, r3
		esc3_total = (throttle) + (int) pid_output_roll
 80076d4:	4d7a      	ldr	r5, [pc, #488]	; (80078c0 <controlLoop+0x2bc>)
 80076d6:	6028      	str	r0, [r5, #0]
				+ (int) pid_output_pitch;
 80076d8:	440b      	add	r3, r1
		esc4_total = (throttle) + (int) pid_output_roll
 80076da:	497a      	ldr	r1, [pc, #488]	; (80078c4 <controlLoop+0x2c0>)
 80076dc:	600b      	str	r3, [r1, #0]
		if (esc1_total < ESC_MIN) {
 80076de:	f240 41e1 	movw	r1, #1249	; 0x4e1
 80076e2:	428c      	cmp	r4, r1
 80076e4:	dc03      	bgt.n	80076ee <controlLoop+0xea>
			esc1_total = ESC_MIN;
 80076e6:	4974      	ldr	r1, [pc, #464]	; (80078b8 <controlLoop+0x2b4>)
 80076e8:	f240 44e2 	movw	r4, #1250	; 0x4e2
 80076ec:	600c      	str	r4, [r1, #0]
		if (esc1_total > ESC_MAX) {
 80076ee:	4972      	ldr	r1, [pc, #456]	; (80078b8 <controlLoop+0x2b4>)
 80076f0:	680c      	ldr	r4, [r1, #0]
 80076f2:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80076f6:	428c      	cmp	r4, r1
 80076f8:	dd03      	ble.n	8007702 <controlLoop+0xfe>
			esc1_total = ESC_MAX;
 80076fa:	496f      	ldr	r1, [pc, #444]	; (80078b8 <controlLoop+0x2b4>)
 80076fc:	f640 14c4 	movw	r4, #2500	; 0x9c4
 8007700:	600c      	str	r4, [r1, #0]
		if (esc2_total < ESC_MIN) {
 8007702:	f240 41e1 	movw	r1, #1249	; 0x4e1
 8007706:	428a      	cmp	r2, r1
 8007708:	dc03      	bgt.n	8007712 <controlLoop+0x10e>
			esc2_total = ESC_MIN;
 800770a:	4a6c      	ldr	r2, [pc, #432]	; (80078bc <controlLoop+0x2b8>)
 800770c:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8007710:	6011      	str	r1, [r2, #0]
		if (esc2_total > ESC_MAX) {
 8007712:	4a6a      	ldr	r2, [pc, #424]	; (80078bc <controlLoop+0x2b8>)
 8007714:	6811      	ldr	r1, [r2, #0]
 8007716:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800771a:	4291      	cmp	r1, r2
 800771c:	dd03      	ble.n	8007726 <controlLoop+0x122>
			esc2_total = ESC_MAX;
 800771e:	4a67      	ldr	r2, [pc, #412]	; (80078bc <controlLoop+0x2b8>)
 8007720:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8007724:	6011      	str	r1, [r2, #0]
		if (esc3_total < ESC_MIN) {
 8007726:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800772a:	4290      	cmp	r0, r2
 800772c:	dc03      	bgt.n	8007736 <controlLoop+0x132>
			esc3_total = ESC_MIN;
 800772e:	4a64      	ldr	r2, [pc, #400]	; (80078c0 <controlLoop+0x2bc>)
 8007730:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8007734:	6011      	str	r1, [r2, #0]
		if (esc3_total > ESC_MAX) {
 8007736:	4a62      	ldr	r2, [pc, #392]	; (80078c0 <controlLoop+0x2bc>)
 8007738:	6811      	ldr	r1, [r2, #0]
 800773a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800773e:	4291      	cmp	r1, r2
 8007740:	dd03      	ble.n	800774a <controlLoop+0x146>
			esc3_total = ESC_MAX;
 8007742:	4a5f      	ldr	r2, [pc, #380]	; (80078c0 <controlLoop+0x2bc>)
 8007744:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8007748:	6011      	str	r1, [r2, #0]
		if (esc4_total < ESC_MIN) {
 800774a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800774e:	4293      	cmp	r3, r2
 8007750:	dc03      	bgt.n	800775a <controlLoop+0x156>
			esc4_total = ESC_MIN;
 8007752:	4b5c      	ldr	r3, [pc, #368]	; (80078c4 <controlLoop+0x2c0>)
 8007754:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8007758:	601a      	str	r2, [r3, #0]
		if (esc4_total > ESC_MAX) {
 800775a:	4b5a      	ldr	r3, [pc, #360]	; (80078c4 <controlLoop+0x2c0>)
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8007762:	429a      	cmp	r2, r3
 8007764:	dd03      	ble.n	800776e <controlLoop+0x16a>
			esc4_total = ESC_MAX;
 8007766:	4b57      	ldr	r3, [pc, #348]	; (80078c4 <controlLoop+0x2c0>)
 8007768:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800776c:	601a      	str	r2, [r3, #0]
		PWM1_Set(esc1_total); //PWM1 = Back left, CW
 800776e:	4b52      	ldr	r3, [pc, #328]	; (80078b8 <controlLoop+0x2b4>)
 8007770:	8818      	ldrh	r0, [r3, #0]
 8007772:	f7ff fda9 	bl	80072c8 <PWM1_Set>
		PWM2_Set(esc2_total); //PWM2 = Front left, CCW
 8007776:	4b51      	ldr	r3, [pc, #324]	; (80078bc <controlLoop+0x2b8>)
 8007778:	8818      	ldrh	r0, [r3, #0]
 800777a:	f7ff fdab 	bl	80072d4 <PWM2_Set>
		PWM3_Set(esc3_total); //PWM3 = Back right, CCW
 800777e:	4b50      	ldr	r3, [pc, #320]	; (80078c0 <controlLoop+0x2bc>)
 8007780:	8818      	ldrh	r0, [r3, #0]
 8007782:	f7ff fdad 	bl	80072e0 <PWM3_Set>
		PWM4_Set(esc4_total); //PWM4 = Front right, CW
 8007786:	4b4f      	ldr	r3, [pc, #316]	; (80078c4 <controlLoop+0x2c0>)
 8007788:	8818      	ldrh	r0, [r3, #0]
 800778a:	f7ff fdaf 	bl	80072ec <PWM4_Set>
}
 800778e:	b004      	add	sp, #16
 8007790:	bd70      	pop	{r4, r5, r6, pc}
			packAckPayData_1();
 8007792:	f7ff fed3 	bl	800753c <packAckPayData_1>
			loop_counter = 0;
 8007796:	4b39      	ldr	r3, [pc, #228]	; (800787c <controlLoop+0x278>)
 8007798:	2200      	movs	r2, #0
 800779a:	801a      	strh	r2, [r3, #0]
 800779c:	e740      	b.n	8007620 <controlLoop+0x1c>
			NRF24_read(RxData, 32);
 800779e:	2120      	movs	r1, #32
 80077a0:	4849      	ldr	r0, [pc, #292]	; (80078c8 <controlLoop+0x2c4>)
 80077a2:	f7fb f89e 	bl	80028e2 <NRF24_read>
			packetsLostCtr = 0;
 80077a6:	4b36      	ldr	r3, [pc, #216]	; (8007880 <controlLoop+0x27c>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	801a      	strh	r2, [r3, #0]
			if (loop_counter == CRTL_LOOP_FREQ - 1) {
 80077ac:	4b33      	ldr	r3, [pc, #204]	; (800787c <controlLoop+0x278>)
 80077ae:	881a      	ldrh	r2, [r3, #0]
 80077b0:	f240 13f3 	movw	r3, #499	; 0x1f3
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d04d      	beq.n	8007854 <controlLoop+0x250>
				NRF24_writeAckPayload(1, AckPayload_0, 32);
 80077b8:	2220      	movs	r2, #32
 80077ba:	4944      	ldr	r1, [pc, #272]	; (80078cc <controlLoop+0x2c8>)
 80077bc:	2001      	movs	r0, #1
 80077be:	f7fb f935 	bl	8002a2c <NRF24_writeAckPayload>
			unpackRxData();
 80077c2:	f7ff fed7 	bl	8007574 <unpackRxData>
			throttle = map(L_Joystick_YPos, 850, 3300, ESC_MIN, ESC_MAX);
 80077c6:	4b42      	ldr	r3, [pc, #264]	; (80078d0 <controlLoop+0x2cc>)
 80077c8:	f9b3 0000 	ldrsh.w	r0, [r3]
 80077cc:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	f240 43e2 	movw	r3, #1250	; 0x4e2
 80077d6:	f640 42e4 	movw	r2, #3300	; 0xce4
 80077da:	f240 3152 	movw	r1, #850	; 0x352
 80077de:	f7ff feff 	bl	80075e0 <map>
 80077e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80077e6:	ee17 3a90 	vmov	r3, s15
 80077ea:	4a32      	ldr	r2, [pc, #200]	; (80078b4 <controlLoop+0x2b0>)
 80077ec:	edc2 7a00 	vstr	s15, [r2]
			if (throttle < ESC_MIN + 200) {
 80077f0:	f240 52a9 	movw	r2, #1449	; 0x5a9
 80077f4:	4293      	cmp	r3, r2
 80077f6:	dc03      	bgt.n	8007800 <controlLoop+0x1fc>
				throttle = ESC_MIN;
 80077f8:	4b2e      	ldr	r3, [pc, #184]	; (80078b4 <controlLoop+0x2b0>)
 80077fa:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80077fe:	601a      	str	r2, [r3, #0]
			if (throttle > ESC_MAX - 200) {
 8007800:	4b2c      	ldr	r3, [pc, #176]	; (80078b4 <controlLoop+0x2b0>)
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8007808:	429a      	cmp	r2, r3
 800780a:	dd03      	ble.n	8007814 <controlLoop+0x210>
				throttle = ESC_MAX;
 800780c:	4b29      	ldr	r3, [pc, #164]	; (80078b4 <controlLoop+0x2b0>)
 800780e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007812:	601a      	str	r2, [r3, #0]
			roll_setpoint = map(R_Joystick_XPos, 340, 3960, -MAX_ANGLE, MAX_ANGLE);
 8007814:	4b2f      	ldr	r3, [pc, #188]	; (80078d4 <controlLoop+0x2d0>)
 8007816:	f9b3 0000 	ldrsh.w	r0, [r3]
 800781a:	2414      	movs	r4, #20
 800781c:	9400      	str	r4, [sp, #0]
 800781e:	f06f 0313 	mvn.w	r3, #19
 8007822:	f640 7278 	movw	r2, #3960	; 0xf78
 8007826:	f44f 71aa 	mov.w	r1, #340	; 0x154
 800782a:	f7ff fed9 	bl	80075e0 <map>
 800782e:	4b1d      	ldr	r3, [pc, #116]	; (80078a4 <controlLoop+0x2a0>)
 8007830:	ed83 0a00 	vstr	s0, [r3]
			pitch_setpoint = map(R_Joystick_YPos, 350, 4000, -MAX_ANGLE, MAX_ANGLE);
 8007834:	4b28      	ldr	r3, [pc, #160]	; (80078d8 <controlLoop+0x2d4>)
 8007836:	f9b3 0000 	ldrsh.w	r0, [r3]
 800783a:	9400      	str	r4, [sp, #0]
 800783c:	f06f 0313 	mvn.w	r3, #19
 8007840:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8007844:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007848:	f7ff feca 	bl	80075e0 <map>
 800784c:	4b23      	ldr	r3, [pc, #140]	; (80078dc <controlLoop+0x2d8>)
 800784e:	ed83 0a00 	vstr	s0, [r3]
 8007852:	e6ee      	b.n	8007632 <controlLoop+0x2e>
				NRF24_writeAckPayload(1, AckPayload_1, 32);
 8007854:	2220      	movs	r2, #32
 8007856:	4922      	ldr	r1, [pc, #136]	; (80078e0 <controlLoop+0x2dc>)
 8007858:	2001      	movs	r0, #1
 800785a:	f7fb f8e7 	bl	8002a2c <NRF24_writeAckPayload>
 800785e:	e7b0      	b.n	80077c2 <controlLoop+0x1be>
			pid_output_roll = 0;
 8007860:	2300      	movs	r3, #0
 8007862:	4a11      	ldr	r2, [pc, #68]	; (80078a8 <controlLoop+0x2a4>)
 8007864:	6013      	str	r3, [r2, #0]
			pid_output_pitch = 0;
 8007866:	4a0e      	ldr	r2, [pc, #56]	; (80078a0 <controlLoop+0x29c>)
 8007868:	6013      	str	r3, [r2, #0]
			pid_output_yaw = 0;
 800786a:	4a11      	ldr	r2, [pc, #68]	; (80078b0 <controlLoop+0x2ac>)
 800786c:	6013      	str	r3, [r2, #0]
			reset_pid_roll();
 800786e:	f7fb fd87 	bl	8003380 <reset_pid_roll>
			reset_pid_pitch();
 8007872:	f7fb fe03 	bl	800347c <reset_pid_pitch>
			reset_pid_yaw();
 8007876:	f7fb fe7f 	bl	8003578 <reset_pid_yaw>
 800787a:	e712      	b.n	80076a2 <controlLoop+0x9e>
 800787c:	200042f2 	.word	0x200042f2
 8007880:	200042f6 	.word	0x200042f6
 8007884:	20004554 	.word	0x20004554
 8007888:	20004310 	.word	0x20004310
 800788c:	2000446c 	.word	0x2000446c
 8007890:	2000459c 	.word	0x2000459c
 8007894:	20004598 	.word	0x20004598
 8007898:	200042da 	.word	0x200042da
 800789c:	00000000 	.word	0x00000000
 80078a0:	200042f8 	.word	0x200042f8
 80078a4:	20004308 	.word	0x20004308
 80078a8:	200042fc 	.word	0x200042fc
 80078ac:	20004314 	.word	0x20004314
 80078b0:	20004300 	.word	0x20004300
 80078b4:	2000430c 	.word	0x2000430c
 80078b8:	200042e0 	.word	0x200042e0
 80078bc:	200042e4 	.word	0x200042e4
 80078c0:	200042e8 	.word	0x200042e8
 80078c4:	200042ec 	.word	0x200042ec
 80078c8:	200045e0 	.word	0x200045e0
 80078cc:	20004534 	.word	0x20004534
 80078d0:	2000006c 	.word	0x2000006c
 80078d4:	20004594 	.word	0x20004594
 80078d8:	20004644 	.word	0x20004644
 80078dc:	20004304 	.word	0x20004304
 80078e0:	2000004c 	.word	0x2000004c

080078e4 <StartControlLoop>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartControlLoop */
void StartControlLoop(void const * argument)
{
 80078e4:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	controlLoop();
 80078e6:	f7ff fe8d 	bl	8007604 <controlLoop>

	//Delay 2ms = 500Hz update rate
    osDelay(2);
 80078ea:	2002      	movs	r0, #2
 80078ec:	f7fe fc7f 	bl	80061ee <osDelay>
 80078f0:	e7f9      	b.n	80078e6 <StartControlLoop+0x2>
	...

080078f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80078f6:	6802      	ldr	r2, [r0, #0]
 80078f8:	4b03      	ldr	r3, [pc, #12]	; (8007908 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d000      	beq.n	8007900 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80078fe:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8007900:	f7fb fe8e 	bl	8003620 <HAL_IncTick>
}
 8007904:	e7fb      	b.n	80078fe <HAL_TIM_PeriodElapsedCallback+0xa>
 8007906:	bf00      	nop
 8007908:	40000400 	.word	0x40000400

0800790c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800790c:	b500      	push	{lr}
 800790e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007910:	2200      	movs	r2, #0
 8007912:	9200      	str	r2, [sp, #0]
 8007914:	4b0d      	ldr	r3, [pc, #52]	; (800794c <HAL_MspInit+0x40>)
 8007916:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007918:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800791c:	6459      	str	r1, [r3, #68]	; 0x44
 800791e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007920:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8007924:	9100      	str	r1, [sp, #0]
 8007926:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007928:	9201      	str	r2, [sp, #4]
 800792a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800792c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007930:	6419      	str	r1, [r3, #64]	; 0x40
 8007932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007938:	9301      	str	r3, [sp, #4]
 800793a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800793c:	210f      	movs	r1, #15
 800793e:	f06f 0001 	mvn.w	r0, #1
 8007942:	f7fc f83d 	bl	80039c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007946:	b003      	add	sp, #12
 8007948:	f85d fb04 	ldr.w	pc, [sp], #4
 800794c:	40023800 	.word	0x40023800

08007950 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007950:	b500      	push	{lr}
 8007952:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007954:	2300      	movs	r3, #0
 8007956:	9303      	str	r3, [sp, #12]
 8007958:	9304      	str	r3, [sp, #16]
 800795a:	9305      	str	r3, [sp, #20]
 800795c:	9306      	str	r3, [sp, #24]
 800795e:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8007960:	6802      	ldr	r2, [r0, #0]
 8007962:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007966:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 800796a:	429a      	cmp	r2, r3
 800796c:	d002      	beq.n	8007974 <HAL_ADC_MspInit+0x24>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800796e:	b009      	add	sp, #36	; 0x24
 8007970:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007974:	2100      	movs	r1, #0
 8007976:	9101      	str	r1, [sp, #4]
 8007978:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800797c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800797e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007982:	645a      	str	r2, [r3, #68]	; 0x44
 8007984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007986:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800798a:	9201      	str	r2, [sp, #4]
 800798c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800798e:	9102      	str	r1, [sp, #8]
 8007990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007992:	f042 0201 	orr.w	r2, r2, #1
 8007996:	631a      	str	r2, [r3, #48]	; 0x30
 8007998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	9302      	str	r3, [sp, #8]
 80079a0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80079a2:	2380      	movs	r3, #128	; 0x80
 80079a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80079a6:	2303      	movs	r3, #3
 80079a8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079aa:	a903      	add	r1, sp, #12
 80079ac:	4801      	ldr	r0, [pc, #4]	; (80079b4 <HAL_ADC_MspInit+0x64>)
 80079ae:	f7fc f86d 	bl	8003a8c <HAL_GPIO_Init>
}
 80079b2:	e7dc      	b.n	800796e <HAL_ADC_MspInit+0x1e>
 80079b4:	40020000 	.word	0x40020000

080079b8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80079b8:	6802      	ldr	r2, [r0, #0]
 80079ba:	4b09      	ldr	r3, [pc, #36]	; (80079e0 <HAL_CRC_MspInit+0x28>)
 80079bc:	429a      	cmp	r2, r3
 80079be:	d000      	beq.n	80079c2 <HAL_CRC_MspInit+0xa>
 80079c0:	4770      	bx	lr
{
 80079c2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80079c4:	2300      	movs	r3, #0
 80079c6:	9301      	str	r3, [sp, #4]
 80079c8:	4b06      	ldr	r3, [pc, #24]	; (80079e4 <HAL_CRC_MspInit+0x2c>)
 80079ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079d0:	631a      	str	r2, [r3, #48]	; 0x30
 80079d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079d8:	9301      	str	r3, [sp, #4]
 80079da:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80079dc:	b002      	add	sp, #8
 80079de:	4770      	bx	lr
 80079e0:	40023000 	.word	0x40023000
 80079e4:	40023800 	.word	0x40023800

080079e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80079e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ec:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079ee:	2300      	movs	r3, #0
 80079f0:	9303      	str	r3, [sp, #12]
 80079f2:	9304      	str	r3, [sp, #16]
 80079f4:	9305      	str	r3, [sp, #20]
 80079f6:	9306      	str	r3, [sp, #24]
 80079f8:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 80079fa:	6802      	ldr	r2, [r0, #0]
 80079fc:	4b1c      	ldr	r3, [pc, #112]	; (8007a70 <HAL_I2C_MspInit+0x88>)
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d002      	beq.n	8007a08 <HAL_I2C_MspInit+0x20>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007a02:	b008      	add	sp, #32
 8007a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a08:	2500      	movs	r5, #0
 8007a0a:	9501      	str	r5, [sp, #4]
 8007a0c:	4c19      	ldr	r4, [pc, #100]	; (8007a74 <HAL_I2C_MspInit+0x8c>)
 8007a0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007a10:	f043 0302 	orr.w	r3, r3, #2
 8007a14:	6323      	str	r3, [r4, #48]	; 0x30
 8007a16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007a18:	f003 0302 	and.w	r3, r3, #2
 8007a1c:	9301      	str	r3, [sp, #4]
 8007a1e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a24:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a26:	f04f 0812 	mov.w	r8, #18
 8007a2a:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a2e:	2703      	movs	r7, #3
 8007a30:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007a32:	2304      	movs	r3, #4
 8007a34:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a36:	4e10      	ldr	r6, [pc, #64]	; (8007a78 <HAL_I2C_MspInit+0x90>)
 8007a38:	a903      	add	r1, sp, #12
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	f7fc f826 	bl	8003a8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007a40:	2308      	movs	r3, #8
 8007a42:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a44:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a48:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a4a:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8007a4c:	2309      	movs	r3, #9
 8007a4e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a50:	a903      	add	r1, sp, #12
 8007a52:	4630      	mov	r0, r6
 8007a54:	f7fc f81a 	bl	8003a8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007a58:	9502      	str	r5, [sp, #8]
 8007a5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007a60:	6423      	str	r3, [r4, #64]	; 0x40
 8007a62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a68:	9302      	str	r3, [sp, #8]
 8007a6a:	9b02      	ldr	r3, [sp, #8]
}
 8007a6c:	e7c9      	b.n	8007a02 <HAL_I2C_MspInit+0x1a>
 8007a6e:	bf00      	nop
 8007a70:	40005800 	.word	0x40005800
 8007a74:	40023800 	.word	0x40023800
 8007a78:	40020400 	.word	0x40020400

08007a7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a7e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a80:	2300      	movs	r3, #0
 8007a82:	9303      	str	r3, [sp, #12]
 8007a84:	9304      	str	r3, [sp, #16]
 8007a86:	9305      	str	r3, [sp, #20]
 8007a88:	9306      	str	r3, [sp, #24]
 8007a8a:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 8007a8c:	6802      	ldr	r2, [r0, #0]
 8007a8e:	4b23      	ldr	r3, [pc, #140]	; (8007b1c <HAL_SPI_MspInit+0xa0>)
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d001      	beq.n	8007a98 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007a94:	b009      	add	sp, #36	; 0x24
 8007a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007a98:	2400      	movs	r4, #0
 8007a9a:	9400      	str	r4, [sp, #0]
 8007a9c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8007aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007aa2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007aa6:	641a      	str	r2, [r3, #64]	; 0x40
 8007aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007aaa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007aae:	9200      	str	r2, [sp, #0]
 8007ab0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ab2:	9401      	str	r4, [sp, #4]
 8007ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ab6:	f042 0204 	orr.w	r2, r2, #4
 8007aba:	631a      	str	r2, [r3, #48]	; 0x30
 8007abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007abe:	f002 0204 	and.w	r2, r2, #4
 8007ac2:	9201      	str	r2, [sp, #4]
 8007ac4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ac6:	9402      	str	r4, [sp, #8]
 8007ac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007aca:	f042 0202 	orr.w	r2, r2, #2
 8007ace:	631a      	str	r2, [r3, #48]	; 0x30
 8007ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	9302      	str	r3, [sp, #8]
 8007ad8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007ada:	2304      	movs	r3, #4
 8007adc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ade:	2702      	movs	r7, #2
 8007ae0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ae2:	2603      	movs	r6, #3
 8007ae4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007ae6:	2505      	movs	r5, #5
 8007ae8:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007aea:	a903      	add	r1, sp, #12
 8007aec:	480c      	ldr	r0, [pc, #48]	; (8007b20 <HAL_SPI_MspInit+0xa4>)
 8007aee:	f7fb ffcd 	bl	8003a8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8007af2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8007af6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007af8:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007afa:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007afc:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007afe:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b00:	a903      	add	r1, sp, #12
 8007b02:	4808      	ldr	r0, [pc, #32]	; (8007b24 <HAL_SPI_MspInit+0xa8>)
 8007b04:	f7fb ffc2 	bl	8003a8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 6, 0);
 8007b08:	4622      	mov	r2, r4
 8007b0a:	2106      	movs	r1, #6
 8007b0c:	2024      	movs	r0, #36	; 0x24
 8007b0e:	f7fb ff57 	bl	80039c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007b12:	2024      	movs	r0, #36	; 0x24
 8007b14:	f7fb ff88 	bl	8003a28 <HAL_NVIC_EnableIRQ>
}
 8007b18:	e7bc      	b.n	8007a94 <HAL_SPI_MspInit+0x18>
 8007b1a:	bf00      	nop
 8007b1c:	40003800 	.word	0x40003800
 8007b20:	40020800 	.word	0x40020800
 8007b24:	40020400 	.word	0x40020400

08007b28 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM4)
 8007b28:	6802      	ldr	r2, [r0, #0]
 8007b2a:	4b09      	ldr	r3, [pc, #36]	; (8007b50 <HAL_TIM_PWM_MspInit+0x28>)
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d000      	beq.n	8007b32 <HAL_TIM_PWM_MspInit+0xa>
 8007b30:	4770      	bx	lr
{
 8007b32:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007b34:	2300      	movs	r3, #0
 8007b36:	9301      	str	r3, [sp, #4]
 8007b38:	4b06      	ldr	r3, [pc, #24]	; (8007b54 <HAL_TIM_PWM_MspInit+0x2c>)
 8007b3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b3c:	f042 0204 	orr.w	r2, r2, #4
 8007b40:	641a      	str	r2, [r3, #64]	; 0x40
 8007b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b44:	f003 0304 	and.w	r3, r3, #4
 8007b48:	9301      	str	r3, [sp, #4]
 8007b4a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007b4c:	b002      	add	sp, #8
 8007b4e:	4770      	bx	lr
 8007b50:	40000800 	.word	0x40000800
 8007b54:	40023800 	.word	0x40023800

08007b58 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM11)
 8007b58:	6802      	ldr	r2, [r0, #0]
 8007b5a:	4b09      	ldr	r3, [pc, #36]	; (8007b80 <HAL_TIM_Base_MspInit+0x28>)
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d000      	beq.n	8007b62 <HAL_TIM_Base_MspInit+0xa>
 8007b60:	4770      	bx	lr
{
 8007b62:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007b64:	2300      	movs	r3, #0
 8007b66:	9301      	str	r3, [sp, #4]
 8007b68:	4b06      	ldr	r3, [pc, #24]	; (8007b84 <HAL_TIM_Base_MspInit+0x2c>)
 8007b6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b6c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007b70:	645a      	str	r2, [r3, #68]	; 0x44
 8007b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b78:	9301      	str	r3, [sp, #4]
 8007b7a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8007b7c:	b002      	add	sp, #8
 8007b7e:	4770      	bx	lr
 8007b80:	40014800 	.word	0x40014800
 8007b84:	40023800 	.word	0x40023800

08007b88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007b88:	b500      	push	{lr}
 8007b8a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	9301      	str	r3, [sp, #4]
 8007b90:	9302      	str	r3, [sp, #8]
 8007b92:	9303      	str	r3, [sp, #12]
 8007b94:	9304      	str	r3, [sp, #16]
 8007b96:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 8007b98:	6802      	ldr	r2, [r0, #0]
 8007b9a:	4b0e      	ldr	r3, [pc, #56]	; (8007bd4 <HAL_TIM_MspPostInit+0x4c>)
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d002      	beq.n	8007ba6 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007ba0:	b007      	add	sp, #28
 8007ba2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	4b0b      	ldr	r3, [pc, #44]	; (8007bd8 <HAL_TIM_MspPostInit+0x50>)
 8007bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bae:	f042 0202 	orr.w	r2, r2, #2
 8007bb2:	631a      	str	r2, [r3, #48]	; 0x30
 8007bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8007bbe:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8007bc2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007bc8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007bca:	a901      	add	r1, sp, #4
 8007bcc:	4803      	ldr	r0, [pc, #12]	; (8007bdc <HAL_TIM_MspPostInit+0x54>)
 8007bce:	f7fb ff5d 	bl	8003a8c <HAL_GPIO_Init>
}
 8007bd2:	e7e5      	b.n	8007ba0 <HAL_TIM_MspPostInit+0x18>
 8007bd4:	40000800 	.word	0x40000800
 8007bd8:	40023800 	.word	0x40023800
 8007bdc:	40020400 	.word	0x40020400

08007be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007be0:	b500      	push	{lr}
 8007be2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007be4:	2300      	movs	r3, #0
 8007be6:	9305      	str	r3, [sp, #20]
 8007be8:	9306      	str	r3, [sp, #24]
 8007bea:	9307      	str	r3, [sp, #28]
 8007bec:	9308      	str	r3, [sp, #32]
 8007bee:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART2)
 8007bf0:	6803      	ldr	r3, [r0, #0]
 8007bf2:	4a29      	ldr	r2, [pc, #164]	; (8007c98 <HAL_UART_MspInit+0xb8>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d005      	beq.n	8007c04 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8007bf8:	4a28      	ldr	r2, [pc, #160]	; (8007c9c <HAL_UART_MspInit+0xbc>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d027      	beq.n	8007c4e <HAL_UART_MspInit+0x6e>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8007bfe:	b00b      	add	sp, #44	; 0x2c
 8007c00:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8007c04:	2100      	movs	r1, #0
 8007c06:	9101      	str	r1, [sp, #4]
 8007c08:	4b25      	ldr	r3, [pc, #148]	; (8007ca0 <HAL_UART_MspInit+0xc0>)
 8007c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c0c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007c10:	641a      	str	r2, [r3, #64]	; 0x40
 8007c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c14:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8007c18:	9201      	str	r2, [sp, #4]
 8007c1a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c1c:	9102      	str	r1, [sp, #8]
 8007c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c20:	f042 0201 	orr.w	r2, r2, #1
 8007c24:	631a      	str	r2, [r3, #48]	; 0x30
 8007c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c28:	f003 0301 	and.w	r3, r3, #1
 8007c2c:	9302      	str	r3, [sp, #8]
 8007c2e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007c30:	230c      	movs	r3, #12
 8007c32:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c34:	2302      	movs	r3, #2
 8007c36:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007c40:	2307      	movs	r3, #7
 8007c42:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c44:	a905      	add	r1, sp, #20
 8007c46:	4817      	ldr	r0, [pc, #92]	; (8007ca4 <HAL_UART_MspInit+0xc4>)
 8007c48:	f7fb ff20 	bl	8003a8c <HAL_GPIO_Init>
 8007c4c:	e7d7      	b.n	8007bfe <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007c4e:	2100      	movs	r1, #0
 8007c50:	9103      	str	r1, [sp, #12]
 8007c52:	4b13      	ldr	r3, [pc, #76]	; (8007ca0 <HAL_UART_MspInit+0xc0>)
 8007c54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c56:	f042 0220 	orr.w	r2, r2, #32
 8007c5a:	645a      	str	r2, [r3, #68]	; 0x44
 8007c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c5e:	f002 0220 	and.w	r2, r2, #32
 8007c62:	9203      	str	r2, [sp, #12]
 8007c64:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c66:	9104      	str	r1, [sp, #16]
 8007c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c6a:	f042 0204 	orr.w	r2, r2, #4
 8007c6e:	631a      	str	r2, [r3, #48]	; 0x30
 8007c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c72:	f003 0304 	and.w	r3, r3, #4
 8007c76:	9304      	str	r3, [sp, #16]
 8007c78:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007c7a:	23c0      	movs	r3, #192	; 0xc0
 8007c7c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c7e:	2302      	movs	r3, #2
 8007c80:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c82:	2301      	movs	r3, #1
 8007c84:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c86:	2303      	movs	r3, #3
 8007c88:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007c8a:	2308      	movs	r3, #8
 8007c8c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c8e:	a905      	add	r1, sp, #20
 8007c90:	4805      	ldr	r0, [pc, #20]	; (8007ca8 <HAL_UART_MspInit+0xc8>)
 8007c92:	f7fb fefb 	bl	8003a8c <HAL_GPIO_Init>
}
 8007c96:	e7b2      	b.n	8007bfe <HAL_UART_MspInit+0x1e>
 8007c98:	40004400 	.word	0x40004400
 8007c9c:	40011400 	.word	0x40011400
 8007ca0:	40023800 	.word	0x40023800
 8007ca4:	40020000 	.word	0x40020000
 8007ca8:	40020800 	.word	0x40020800

08007cac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007cac:	b510      	push	{r4, lr}
 8007cae:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	4601      	mov	r1, r0
 8007cb4:	201d      	movs	r0, #29
 8007cb6:	f7fb fe83 	bl	80039c0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 8007cba:	201d      	movs	r0, #29
 8007cbc:	f7fb feb4 	bl	8003a28 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8007cc0:	2400      	movs	r4, #0
 8007cc2:	9401      	str	r4, [sp, #4]
 8007cc4:	4b14      	ldr	r3, [pc, #80]	; (8007d18 <HAL_InitTick+0x6c>)
 8007cc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cc8:	f042 0202 	orr.w	r2, r2, #2
 8007ccc:	641a      	str	r2, [r3, #64]	; 0x40
 8007cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd0:	f003 0302 	and.w	r3, r3, #2
 8007cd4:	9301      	str	r3, [sp, #4]
 8007cd6:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007cd8:	a902      	add	r1, sp, #8
 8007cda:	a803      	add	r0, sp, #12
 8007cdc:	f7fd f878 	bl	8004dd0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8007ce0:	f7fd f856 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
 8007ce4:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8007ce6:	480d      	ldr	r0, [pc, #52]	; (8007d1c <HAL_InitTick+0x70>)
 8007ce8:	fba0 2303 	umull	r2, r3, r0, r3
 8007cec:	0c9b      	lsrs	r3, r3, #18
 8007cee:	3b01      	subs	r3, #1
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8007cf0:	480b      	ldr	r0, [pc, #44]	; (8007d20 <HAL_InitTick+0x74>)
 8007cf2:	4a0c      	ldr	r2, [pc, #48]	; (8007d24 <HAL_InitTick+0x78>)
 8007cf4:	6002      	str	r2, [r0, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 8007cf6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007cfa:	60c2      	str	r2, [r0, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8007cfc:	6043      	str	r3, [r0, #4]
  htim3.Init.ClockDivision = 0;
 8007cfe:	6104      	str	r4, [r0, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d00:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8007d02:	f7fd fe71 	bl	80059e8 <HAL_TIM_Base_Init>
 8007d06:	b110      	cbz	r0, 8007d0e <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8007d08:	2001      	movs	r0, #1
}
 8007d0a:	b008      	add	sp, #32
 8007d0c:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim3);
 8007d0e:	4804      	ldr	r0, [pc, #16]	; (8007d20 <HAL_InitTick+0x74>)
 8007d10:	f7fd fd4a 	bl	80057a8 <HAL_TIM_Base_Start_IT>
 8007d14:	e7f9      	b.n	8007d0a <HAL_InitTick+0x5e>
 8007d16:	bf00      	nop
 8007d18:	40023800 	.word	0x40023800
 8007d1c:	431bde83 	.word	0x431bde83
 8007d20:	20004648 	.word	0x20004648
 8007d24:	40000400 	.word	0x40000400

08007d28 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007d28:	4770      	bx	lr

08007d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007d2a:	e7fe      	b.n	8007d2a <HardFault_Handler>

08007d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007d2c:	e7fe      	b.n	8007d2c <MemManage_Handler>

08007d2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007d2e:	e7fe      	b.n	8007d2e <BusFault_Handler>

08007d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007d30:	e7fe      	b.n	8007d30 <UsageFault_Handler>

08007d32 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007d32:	4770      	bx	lr

08007d34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007d34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007d36:	4802      	ldr	r0, [pc, #8]	; (8007d40 <TIM3_IRQHandler+0xc>)
 8007d38:	f7fd fd4b 	bl	80057d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007d3c:	bd08      	pop	{r3, pc}
 8007d3e:	bf00      	nop
 8007d40:	20004648 	.word	0x20004648

08007d44 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8007d44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8007d46:	4802      	ldr	r0, [pc, #8]	; (8007d50 <SPI2_IRQHandler+0xc>)
 8007d48:	f7fd fc00 	bl	800554c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8007d4c:	bd08      	pop	{r3, pc}
 8007d4e:	bf00      	nop
 8007d50:	200043ec 	.word	0x200043ec

08007d54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007d54:	b570      	push	{r4, r5, r6, lr}
 8007d56:	460d      	mov	r5, r1
 8007d58:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d5a:	2400      	movs	r4, #0
 8007d5c:	e004      	b.n	8007d68 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 8007d5e:	f3af 8000 	nop.w
 8007d62:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d64:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8007d66:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007d68:	42b4      	cmp	r4, r6
 8007d6a:	dbf8      	blt.n	8007d5e <_read+0xa>
	}

return len;
}
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	bd70      	pop	{r4, r5, r6, pc}

08007d70 <_close>:
}

int _close(int file)
{
	return -1;
}
 8007d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d74:	4770      	bx	lr

08007d76 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8007d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d7a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	4770      	bx	lr

08007d80 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8007d80:	2001      	movs	r0, #1
 8007d82:	4770      	bx	lr

08007d84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007d84:	2000      	movs	r0, #0
 8007d86:	4770      	bx	lr

08007d88 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007d88:	b508      	push	{r3, lr}
 8007d8a:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007d8c:	4a0b      	ldr	r2, [pc, #44]	; (8007dbc <_sbrk+0x34>)
 8007d8e:	6812      	ldr	r2, [r2, #0]
 8007d90:	b142      	cbz	r2, 8007da4 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8007d92:	4a0a      	ldr	r2, [pc, #40]	; (8007dbc <_sbrk+0x34>)
 8007d94:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8007d96:	4403      	add	r3, r0
 8007d98:	466a      	mov	r2, sp
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d806      	bhi.n	8007dac <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8007d9e:	4a07      	ldr	r2, [pc, #28]	; (8007dbc <_sbrk+0x34>)
 8007da0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8007da2:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8007da4:	4a05      	ldr	r2, [pc, #20]	; (8007dbc <_sbrk+0x34>)
 8007da6:	4906      	ldr	r1, [pc, #24]	; (8007dc0 <_sbrk+0x38>)
 8007da8:	6011      	str	r1, [r2, #0]
 8007daa:	e7f2      	b.n	8007d92 <_sbrk+0xa>
		errno = ENOMEM;
 8007dac:	f001 fe3e 	bl	8009a2c <__errno>
 8007db0:	230c      	movs	r3, #12
 8007db2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007db8:	e7f3      	b.n	8007da2 <_sbrk+0x1a>
 8007dba:	bf00      	nop
 8007dbc:	20004318 	.word	0x20004318
 8007dc0:	20004690 	.word	0x20004690

08007dc4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007dc4:	490f      	ldr	r1, [pc, #60]	; (8007e04 <SystemInit+0x40>)
 8007dc6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007dca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007dd2:	4b0d      	ldr	r3, [pc, #52]	; (8007e08 <SystemInit+0x44>)
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	f042 0201 	orr.w	r2, r2, #1
 8007dda:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007ddc:	2000      	movs	r0, #0
 8007dde:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8007de6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007dea:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007dec:	4a07      	ldr	r2, [pc, #28]	; (8007e0c <SystemInit+0x48>)
 8007dee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007df6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007df8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007dfa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007dfe:	608b      	str	r3, [r1, #8]
#endif
}
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	e000ed00 	.word	0xe000ed00
 8007e08:	40023800 	.word	0x40023800
 8007e0c:	24003010 	.word	0x24003010

08007e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007e48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007e14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007e16:	e003      	b.n	8007e20 <LoopCopyDataInit>

08007e18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007e18:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007e1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007e1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007e1e:	3104      	adds	r1, #4

08007e20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007e20:	480b      	ldr	r0, [pc, #44]	; (8007e50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007e22:	4b0c      	ldr	r3, [pc, #48]	; (8007e54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007e24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007e26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007e28:	d3f6      	bcc.n	8007e18 <CopyDataInit>
  ldr  r2, =_sbss
 8007e2a:	4a0b      	ldr	r2, [pc, #44]	; (8007e58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007e2c:	e002      	b.n	8007e34 <LoopFillZerobss>

08007e2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007e2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007e30:	f842 3b04 	str.w	r3, [r2], #4

08007e34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007e34:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007e36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007e38:	d3f9      	bcc.n	8007e2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007e3a:	f7ff ffc3 	bl	8007dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007e3e:	f001 fdfb 	bl	8009a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007e42:	f7ff fa59 	bl	80072f8 <main>
  bx  lr    
 8007e46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007e48:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007e4c:	0800ea20 	.word	0x0800ea20
  ldr  r0, =_sdata
 8007e50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007e54:	20000250 	.word	0x20000250
  ldr  r2, =_sbss
 8007e58:	20000250 	.word	0x20000250
  ldr  r3, = _ebss
 8007e5c:	2000468c 	.word	0x2000468c

08007e60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007e60:	e7fe      	b.n	8007e60 <ADC_IRQHandler>
	...

08007e64 <round>:
 8007e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e66:	ec57 6b10 	vmov	r6, r7, d0
 8007e6a:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8007e6e:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8007e72:	2c13      	cmp	r4, #19
 8007e74:	463b      	mov	r3, r7
 8007e76:	463d      	mov	r5, r7
 8007e78:	dc17      	bgt.n	8007eaa <round+0x46>
 8007e7a:	2c00      	cmp	r4, #0
 8007e7c:	da09      	bge.n	8007e92 <round+0x2e>
 8007e7e:	3401      	adds	r4, #1
 8007e80:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8007e84:	d103      	bne.n	8007e8e <round+0x2a>
 8007e86:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007e8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007e8e:	2100      	movs	r1, #0
 8007e90:	e02c      	b.n	8007eec <round+0x88>
 8007e92:	4a18      	ldr	r2, [pc, #96]	; (8007ef4 <round+0x90>)
 8007e94:	4122      	asrs	r2, r4
 8007e96:	4217      	tst	r7, r2
 8007e98:	d100      	bne.n	8007e9c <round+0x38>
 8007e9a:	b19e      	cbz	r6, 8007ec4 <round+0x60>
 8007e9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ea0:	4123      	asrs	r3, r4
 8007ea2:	442b      	add	r3, r5
 8007ea4:	ea23 0302 	bic.w	r3, r3, r2
 8007ea8:	e7f1      	b.n	8007e8e <round+0x2a>
 8007eaa:	2c33      	cmp	r4, #51	; 0x33
 8007eac:	dd0d      	ble.n	8007eca <round+0x66>
 8007eae:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8007eb2:	d107      	bne.n	8007ec4 <round+0x60>
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	4639      	mov	r1, r7
 8007eb8:	ee10 2a10 	vmov	r2, s0
 8007ebc:	f7f8 f9ee 	bl	800029c <__adddf3>
 8007ec0:	4606      	mov	r6, r0
 8007ec2:	460f      	mov	r7, r1
 8007ec4:	ec47 6b10 	vmov	d0, r6, r7
 8007ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eca:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8007ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ed2:	40d0      	lsrs	r0, r2
 8007ed4:	4206      	tst	r6, r0
 8007ed6:	d0f5      	beq.n	8007ec4 <round+0x60>
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8007ede:	fa02 f404 	lsl.w	r4, r2, r4
 8007ee2:	1931      	adds	r1, r6, r4
 8007ee4:	bf28      	it	cs
 8007ee6:	189b      	addcs	r3, r3, r2
 8007ee8:	ea21 0100 	bic.w	r1, r1, r0
 8007eec:	461f      	mov	r7, r3
 8007eee:	460e      	mov	r6, r1
 8007ef0:	e7e8      	b.n	8007ec4 <round+0x60>
 8007ef2:	bf00      	nop
 8007ef4:	000fffff 	.word	0x000fffff

08007ef8 <asin>:
 8007ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007efa:	ed2d 8b02 	vpush	{d8}
 8007efe:	4e26      	ldr	r6, [pc, #152]	; (8007f98 <asin+0xa0>)
 8007f00:	b08b      	sub	sp, #44	; 0x2c
 8007f02:	ec55 4b10 	vmov	r4, r5, d0
 8007f06:	f000 fa1b 	bl	8008340 <__ieee754_asin>
 8007f0a:	f996 3000 	ldrsb.w	r3, [r6]
 8007f0e:	eeb0 8a40 	vmov.f32	s16, s0
 8007f12:	eef0 8a60 	vmov.f32	s17, s1
 8007f16:	3301      	adds	r3, #1
 8007f18:	d036      	beq.n	8007f88 <asin+0x90>
 8007f1a:	4622      	mov	r2, r4
 8007f1c:	462b      	mov	r3, r5
 8007f1e:	4620      	mov	r0, r4
 8007f20:	4629      	mov	r1, r5
 8007f22:	f7f8 fe0b 	bl	8000b3c <__aeabi_dcmpun>
 8007f26:	4607      	mov	r7, r0
 8007f28:	bb70      	cbnz	r0, 8007f88 <asin+0x90>
 8007f2a:	ec45 4b10 	vmov	d0, r4, r5
 8007f2e:	f001 fc57 	bl	80097e0 <fabs>
 8007f32:	2200      	movs	r2, #0
 8007f34:	4b19      	ldr	r3, [pc, #100]	; (8007f9c <asin+0xa4>)
 8007f36:	ec51 0b10 	vmov	r0, r1, d0
 8007f3a:	f7f8 fdf5 	bl	8000b28 <__aeabi_dcmpgt>
 8007f3e:	b318      	cbz	r0, 8007f88 <asin+0x90>
 8007f40:	2301      	movs	r3, #1
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	4816      	ldr	r0, [pc, #88]	; (8007fa0 <asin+0xa8>)
 8007f46:	4b17      	ldr	r3, [pc, #92]	; (8007fa4 <asin+0xac>)
 8007f48:	9301      	str	r3, [sp, #4]
 8007f4a:	9708      	str	r7, [sp, #32]
 8007f4c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007f50:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007f54:	f001 fc58 	bl	8009808 <nan>
 8007f58:	f996 3000 	ldrsb.w	r3, [r6]
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8007f62:	d104      	bne.n	8007f6e <asin+0x76>
 8007f64:	f001 fd62 	bl	8009a2c <__errno>
 8007f68:	2321      	movs	r3, #33	; 0x21
 8007f6a:	6003      	str	r3, [r0, #0]
 8007f6c:	e004      	b.n	8007f78 <asin+0x80>
 8007f6e:	4668      	mov	r0, sp
 8007f70:	f001 fc47 	bl	8009802 <matherr>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d0f5      	beq.n	8007f64 <asin+0x6c>
 8007f78:	9b08      	ldr	r3, [sp, #32]
 8007f7a:	b11b      	cbz	r3, 8007f84 <asin+0x8c>
 8007f7c:	f001 fd56 	bl	8009a2c <__errno>
 8007f80:	9b08      	ldr	r3, [sp, #32]
 8007f82:	6003      	str	r3, [r0, #0]
 8007f84:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007f88:	eeb0 0a48 	vmov.f32	s0, s16
 8007f8c:	eef0 0a68 	vmov.f32	s1, s17
 8007f90:	b00b      	add	sp, #44	; 0x2c
 8007f92:	ecbd 8b02 	vpop	{d8}
 8007f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f98:	2000007c 	.word	0x2000007c
 8007f9c:	3ff00000 	.word	0x3ff00000
 8007fa0:	0800e901 	.word	0x0800e901
 8007fa4:	0800e660 	.word	0x0800e660

08007fa8 <atan2>:
 8007fa8:	f000 bbda 	b.w	8008760 <__ieee754_atan2>

08007fac <pow>:
 8007fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb0:	ed2d 8b04 	vpush	{d8-d9}
 8007fb4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8008288 <pow+0x2dc>
 8007fb8:	b08d      	sub	sp, #52	; 0x34
 8007fba:	ec57 6b10 	vmov	r6, r7, d0
 8007fbe:	ec55 4b11 	vmov	r4, r5, d1
 8007fc2:	f000 fcad 	bl	8008920 <__ieee754_pow>
 8007fc6:	f999 3000 	ldrsb.w	r3, [r9]
 8007fca:	9300      	str	r3, [sp, #0]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	eeb0 8a40 	vmov.f32	s16, s0
 8007fd2:	eef0 8a60 	vmov.f32	s17, s1
 8007fd6:	46c8      	mov	r8, r9
 8007fd8:	d05f      	beq.n	800809a <pow+0xee>
 8007fda:	4622      	mov	r2, r4
 8007fdc:	462b      	mov	r3, r5
 8007fde:	4620      	mov	r0, r4
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	f7f8 fdab 	bl	8000b3c <__aeabi_dcmpun>
 8007fe6:	4683      	mov	fp, r0
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d156      	bne.n	800809a <pow+0xee>
 8007fec:	4632      	mov	r2, r6
 8007fee:	463b      	mov	r3, r7
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	4639      	mov	r1, r7
 8007ff4:	f7f8 fda2 	bl	8000b3c <__aeabi_dcmpun>
 8007ff8:	9001      	str	r0, [sp, #4]
 8007ffa:	b1e8      	cbz	r0, 8008038 <pow+0x8c>
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2300      	movs	r3, #0
 8008000:	4620      	mov	r0, r4
 8008002:	4629      	mov	r1, r5
 8008004:	f7f8 fd68 	bl	8000ad8 <__aeabi_dcmpeq>
 8008008:	2800      	cmp	r0, #0
 800800a:	d046      	beq.n	800809a <pow+0xee>
 800800c:	2301      	movs	r3, #1
 800800e:	9302      	str	r3, [sp, #8]
 8008010:	4b96      	ldr	r3, [pc, #600]	; (800826c <pow+0x2c0>)
 8008012:	9303      	str	r3, [sp, #12]
 8008014:	4b96      	ldr	r3, [pc, #600]	; (8008270 <pow+0x2c4>)
 8008016:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800801a:	2200      	movs	r2, #0
 800801c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008020:	9b00      	ldr	r3, [sp, #0]
 8008022:	2b02      	cmp	r3, #2
 8008024:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008028:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800802c:	d033      	beq.n	8008096 <pow+0xea>
 800802e:	a802      	add	r0, sp, #8
 8008030:	f001 fbe7 	bl	8009802 <matherr>
 8008034:	bb48      	cbnz	r0, 800808a <pow+0xde>
 8008036:	e05d      	b.n	80080f4 <pow+0x148>
 8008038:	f04f 0a00 	mov.w	sl, #0
 800803c:	f04f 0b00 	mov.w	fp, #0
 8008040:	4652      	mov	r2, sl
 8008042:	465b      	mov	r3, fp
 8008044:	4630      	mov	r0, r6
 8008046:	4639      	mov	r1, r7
 8008048:	f7f8 fd46 	bl	8000ad8 <__aeabi_dcmpeq>
 800804c:	ec4b ab19 	vmov	d9, sl, fp
 8008050:	2800      	cmp	r0, #0
 8008052:	d054      	beq.n	80080fe <pow+0x152>
 8008054:	4652      	mov	r2, sl
 8008056:	465b      	mov	r3, fp
 8008058:	4620      	mov	r0, r4
 800805a:	4629      	mov	r1, r5
 800805c:	f7f8 fd3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008060:	4680      	mov	r8, r0
 8008062:	b318      	cbz	r0, 80080ac <pow+0x100>
 8008064:	2301      	movs	r3, #1
 8008066:	9302      	str	r3, [sp, #8]
 8008068:	4b80      	ldr	r3, [pc, #512]	; (800826c <pow+0x2c0>)
 800806a:	9303      	str	r3, [sp, #12]
 800806c:	9b01      	ldr	r3, [sp, #4]
 800806e:	930a      	str	r3, [sp, #40]	; 0x28
 8008070:	9b00      	ldr	r3, [sp, #0]
 8008072:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008076:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800807a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d0d5      	beq.n	800802e <pow+0x82>
 8008082:	4b7b      	ldr	r3, [pc, #492]	; (8008270 <pow+0x2c4>)
 8008084:	2200      	movs	r2, #0
 8008086:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800808a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800808c:	b11b      	cbz	r3, 8008096 <pow+0xea>
 800808e:	f001 fccd 	bl	8009a2c <__errno>
 8008092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008094:	6003      	str	r3, [r0, #0]
 8008096:	ed9d 8b08 	vldr	d8, [sp, #32]
 800809a:	eeb0 0a48 	vmov.f32	s0, s16
 800809e:	eef0 0a68 	vmov.f32	s1, s17
 80080a2:	b00d      	add	sp, #52	; 0x34
 80080a4:	ecbd 8b04 	vpop	{d8-d9}
 80080a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ac:	ec45 4b10 	vmov	d0, r4, r5
 80080b0:	f001 fb9f 	bl	80097f2 <finite>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d0f0      	beq.n	800809a <pow+0xee>
 80080b8:	4652      	mov	r2, sl
 80080ba:	465b      	mov	r3, fp
 80080bc:	4620      	mov	r0, r4
 80080be:	4629      	mov	r1, r5
 80080c0:	f7f8 fd14 	bl	8000aec <__aeabi_dcmplt>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	d0e8      	beq.n	800809a <pow+0xee>
 80080c8:	2301      	movs	r3, #1
 80080ca:	9302      	str	r3, [sp, #8]
 80080cc:	4b67      	ldr	r3, [pc, #412]	; (800826c <pow+0x2c0>)
 80080ce:	9303      	str	r3, [sp, #12]
 80080d0:	f999 3000 	ldrsb.w	r3, [r9]
 80080d4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80080d8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80080dc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80080e0:	b913      	cbnz	r3, 80080e8 <pow+0x13c>
 80080e2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80080e6:	e7a2      	b.n	800802e <pow+0x82>
 80080e8:	4962      	ldr	r1, [pc, #392]	; (8008274 <pow+0x2c8>)
 80080ea:	2000      	movs	r0, #0
 80080ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d19c      	bne.n	800802e <pow+0x82>
 80080f4:	f001 fc9a 	bl	8009a2c <__errno>
 80080f8:	2321      	movs	r3, #33	; 0x21
 80080fa:	6003      	str	r3, [r0, #0]
 80080fc:	e7c5      	b.n	800808a <pow+0xde>
 80080fe:	eeb0 0a48 	vmov.f32	s0, s16
 8008102:	eef0 0a68 	vmov.f32	s1, s17
 8008106:	f001 fb74 	bl	80097f2 <finite>
 800810a:	9000      	str	r0, [sp, #0]
 800810c:	2800      	cmp	r0, #0
 800810e:	f040 8081 	bne.w	8008214 <pow+0x268>
 8008112:	ec47 6b10 	vmov	d0, r6, r7
 8008116:	f001 fb6c 	bl	80097f2 <finite>
 800811a:	2800      	cmp	r0, #0
 800811c:	d07a      	beq.n	8008214 <pow+0x268>
 800811e:	ec45 4b10 	vmov	d0, r4, r5
 8008122:	f001 fb66 	bl	80097f2 <finite>
 8008126:	2800      	cmp	r0, #0
 8008128:	d074      	beq.n	8008214 <pow+0x268>
 800812a:	ec53 2b18 	vmov	r2, r3, d8
 800812e:	ee18 0a10 	vmov	r0, s16
 8008132:	4619      	mov	r1, r3
 8008134:	f7f8 fd02 	bl	8000b3c <__aeabi_dcmpun>
 8008138:	f999 9000 	ldrsb.w	r9, [r9]
 800813c:	4b4b      	ldr	r3, [pc, #300]	; (800826c <pow+0x2c0>)
 800813e:	b1b0      	cbz	r0, 800816e <pow+0x1c2>
 8008140:	2201      	movs	r2, #1
 8008142:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008146:	9b00      	ldr	r3, [sp, #0]
 8008148:	930a      	str	r3, [sp, #40]	; 0x28
 800814a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800814e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008152:	f1b9 0f00 	cmp.w	r9, #0
 8008156:	d0c4      	beq.n	80080e2 <pow+0x136>
 8008158:	4652      	mov	r2, sl
 800815a:	465b      	mov	r3, fp
 800815c:	4650      	mov	r0, sl
 800815e:	4659      	mov	r1, fp
 8008160:	f7f8 fb7c 	bl	800085c <__aeabi_ddiv>
 8008164:	f1b9 0f02 	cmp.w	r9, #2
 8008168:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800816c:	e7c1      	b.n	80080f2 <pow+0x146>
 800816e:	2203      	movs	r2, #3
 8008170:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008174:	900a      	str	r0, [sp, #40]	; 0x28
 8008176:	4629      	mov	r1, r5
 8008178:	4620      	mov	r0, r4
 800817a:	2200      	movs	r2, #0
 800817c:	4b3e      	ldr	r3, [pc, #248]	; (8008278 <pow+0x2cc>)
 800817e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008182:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008186:	f7f8 fa3f 	bl	8000608 <__aeabi_dmul>
 800818a:	4604      	mov	r4, r0
 800818c:	460d      	mov	r5, r1
 800818e:	f1b9 0f00 	cmp.w	r9, #0
 8008192:	d124      	bne.n	80081de <pow+0x232>
 8008194:	4b39      	ldr	r3, [pc, #228]	; (800827c <pow+0x2d0>)
 8008196:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800819a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800819e:	4630      	mov	r0, r6
 80081a0:	4652      	mov	r2, sl
 80081a2:	465b      	mov	r3, fp
 80081a4:	4639      	mov	r1, r7
 80081a6:	f7f8 fca1 	bl	8000aec <__aeabi_dcmplt>
 80081aa:	2800      	cmp	r0, #0
 80081ac:	d056      	beq.n	800825c <pow+0x2b0>
 80081ae:	ec45 4b10 	vmov	d0, r4, r5
 80081b2:	f001 fb31 	bl	8009818 <rint>
 80081b6:	4622      	mov	r2, r4
 80081b8:	462b      	mov	r3, r5
 80081ba:	ec51 0b10 	vmov	r0, r1, d0
 80081be:	f7f8 fc8b 	bl	8000ad8 <__aeabi_dcmpeq>
 80081c2:	b920      	cbnz	r0, 80081ce <pow+0x222>
 80081c4:	4b2e      	ldr	r3, [pc, #184]	; (8008280 <pow+0x2d4>)
 80081c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80081ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80081ce:	f998 3000 	ldrsb.w	r3, [r8]
 80081d2:	2b02      	cmp	r3, #2
 80081d4:	d142      	bne.n	800825c <pow+0x2b0>
 80081d6:	f001 fc29 	bl	8009a2c <__errno>
 80081da:	2322      	movs	r3, #34	; 0x22
 80081dc:	e78d      	b.n	80080fa <pow+0x14e>
 80081de:	4b29      	ldr	r3, [pc, #164]	; (8008284 <pow+0x2d8>)
 80081e0:	2200      	movs	r2, #0
 80081e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80081e6:	4630      	mov	r0, r6
 80081e8:	4652      	mov	r2, sl
 80081ea:	465b      	mov	r3, fp
 80081ec:	4639      	mov	r1, r7
 80081ee:	f7f8 fc7d 	bl	8000aec <__aeabi_dcmplt>
 80081f2:	2800      	cmp	r0, #0
 80081f4:	d0eb      	beq.n	80081ce <pow+0x222>
 80081f6:	ec45 4b10 	vmov	d0, r4, r5
 80081fa:	f001 fb0d 	bl	8009818 <rint>
 80081fe:	4622      	mov	r2, r4
 8008200:	462b      	mov	r3, r5
 8008202:	ec51 0b10 	vmov	r0, r1, d0
 8008206:	f7f8 fc67 	bl	8000ad8 <__aeabi_dcmpeq>
 800820a:	2800      	cmp	r0, #0
 800820c:	d1df      	bne.n	80081ce <pow+0x222>
 800820e:	2200      	movs	r2, #0
 8008210:	4b18      	ldr	r3, [pc, #96]	; (8008274 <pow+0x2c8>)
 8008212:	e7da      	b.n	80081ca <pow+0x21e>
 8008214:	2200      	movs	r2, #0
 8008216:	2300      	movs	r3, #0
 8008218:	ec51 0b18 	vmov	r0, r1, d8
 800821c:	f7f8 fc5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008220:	2800      	cmp	r0, #0
 8008222:	f43f af3a 	beq.w	800809a <pow+0xee>
 8008226:	ec47 6b10 	vmov	d0, r6, r7
 800822a:	f001 fae2 	bl	80097f2 <finite>
 800822e:	2800      	cmp	r0, #0
 8008230:	f43f af33 	beq.w	800809a <pow+0xee>
 8008234:	ec45 4b10 	vmov	d0, r4, r5
 8008238:	f001 fadb 	bl	80097f2 <finite>
 800823c:	2800      	cmp	r0, #0
 800823e:	f43f af2c 	beq.w	800809a <pow+0xee>
 8008242:	2304      	movs	r3, #4
 8008244:	9302      	str	r3, [sp, #8]
 8008246:	4b09      	ldr	r3, [pc, #36]	; (800826c <pow+0x2c0>)
 8008248:	9303      	str	r3, [sp, #12]
 800824a:	2300      	movs	r3, #0
 800824c:	930a      	str	r3, [sp, #40]	; 0x28
 800824e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008252:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008256:	ed8d 9b08 	vstr	d9, [sp, #32]
 800825a:	e7b8      	b.n	80081ce <pow+0x222>
 800825c:	a802      	add	r0, sp, #8
 800825e:	f001 fad0 	bl	8009802 <matherr>
 8008262:	2800      	cmp	r0, #0
 8008264:	f47f af11 	bne.w	800808a <pow+0xde>
 8008268:	e7b5      	b.n	80081d6 <pow+0x22a>
 800826a:	bf00      	nop
 800826c:	0800e665 	.word	0x0800e665
 8008270:	3ff00000 	.word	0x3ff00000
 8008274:	fff00000 	.word	0xfff00000
 8008278:	3fe00000 	.word	0x3fe00000
 800827c:	47efffff 	.word	0x47efffff
 8008280:	c7efffff 	.word	0xc7efffff
 8008284:	7ff00000 	.word	0x7ff00000
 8008288:	2000007c 	.word	0x2000007c

0800828c <sqrt>:
 800828c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008290:	ed2d 8b02 	vpush	{d8}
 8008294:	b08b      	sub	sp, #44	; 0x2c
 8008296:	ec55 4b10 	vmov	r4, r5, d0
 800829a:	f001 f84f 	bl	800933c <__ieee754_sqrt>
 800829e:	4b26      	ldr	r3, [pc, #152]	; (8008338 <sqrt+0xac>)
 80082a0:	eeb0 8a40 	vmov.f32	s16, s0
 80082a4:	eef0 8a60 	vmov.f32	s17, s1
 80082a8:	f993 6000 	ldrsb.w	r6, [r3]
 80082ac:	1c73      	adds	r3, r6, #1
 80082ae:	d02a      	beq.n	8008306 <sqrt+0x7a>
 80082b0:	4622      	mov	r2, r4
 80082b2:	462b      	mov	r3, r5
 80082b4:	4620      	mov	r0, r4
 80082b6:	4629      	mov	r1, r5
 80082b8:	f7f8 fc40 	bl	8000b3c <__aeabi_dcmpun>
 80082bc:	4607      	mov	r7, r0
 80082be:	bb10      	cbnz	r0, 8008306 <sqrt+0x7a>
 80082c0:	f04f 0800 	mov.w	r8, #0
 80082c4:	f04f 0900 	mov.w	r9, #0
 80082c8:	4642      	mov	r2, r8
 80082ca:	464b      	mov	r3, r9
 80082cc:	4620      	mov	r0, r4
 80082ce:	4629      	mov	r1, r5
 80082d0:	f7f8 fc0c 	bl	8000aec <__aeabi_dcmplt>
 80082d4:	b1b8      	cbz	r0, 8008306 <sqrt+0x7a>
 80082d6:	2301      	movs	r3, #1
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	4b18      	ldr	r3, [pc, #96]	; (800833c <sqrt+0xb0>)
 80082dc:	9301      	str	r3, [sp, #4]
 80082de:	9708      	str	r7, [sp, #32]
 80082e0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80082e4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80082e8:	b9b6      	cbnz	r6, 8008318 <sqrt+0x8c>
 80082ea:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80082ee:	4668      	mov	r0, sp
 80082f0:	f001 fa87 	bl	8009802 <matherr>
 80082f4:	b1d0      	cbz	r0, 800832c <sqrt+0xa0>
 80082f6:	9b08      	ldr	r3, [sp, #32]
 80082f8:	b11b      	cbz	r3, 8008302 <sqrt+0x76>
 80082fa:	f001 fb97 	bl	8009a2c <__errno>
 80082fe:	9b08      	ldr	r3, [sp, #32]
 8008300:	6003      	str	r3, [r0, #0]
 8008302:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008306:	eeb0 0a48 	vmov.f32	s0, s16
 800830a:	eef0 0a68 	vmov.f32	s1, s17
 800830e:	b00b      	add	sp, #44	; 0x2c
 8008310:	ecbd 8b02 	vpop	{d8}
 8008314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008318:	4642      	mov	r2, r8
 800831a:	464b      	mov	r3, r9
 800831c:	4640      	mov	r0, r8
 800831e:	4649      	mov	r1, r9
 8008320:	f7f8 fa9c 	bl	800085c <__aeabi_ddiv>
 8008324:	2e02      	cmp	r6, #2
 8008326:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800832a:	d1e0      	bne.n	80082ee <sqrt+0x62>
 800832c:	f001 fb7e 	bl	8009a2c <__errno>
 8008330:	2321      	movs	r3, #33	; 0x21
 8008332:	6003      	str	r3, [r0, #0]
 8008334:	e7df      	b.n	80082f6 <sqrt+0x6a>
 8008336:	bf00      	nop
 8008338:	2000007c 	.word	0x2000007c
 800833c:	0800e669 	.word	0x0800e669

08008340 <__ieee754_asin>:
 8008340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008344:	ec55 4b10 	vmov	r4, r5, d0
 8008348:	4bcb      	ldr	r3, [pc, #812]	; (8008678 <__ieee754_asin+0x338>)
 800834a:	b087      	sub	sp, #28
 800834c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8008350:	429f      	cmp	r7, r3
 8008352:	9501      	str	r5, [sp, #4]
 8008354:	dd31      	ble.n	80083ba <__ieee754_asin+0x7a>
 8008356:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800835a:	ee10 3a10 	vmov	r3, s0
 800835e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8008362:	433b      	orrs	r3, r7
 8008364:	d117      	bne.n	8008396 <__ieee754_asin+0x56>
 8008366:	a3aa      	add	r3, pc, #680	; (adr r3, 8008610 <__ieee754_asin+0x2d0>)
 8008368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836c:	ee10 0a10 	vmov	r0, s0
 8008370:	4629      	mov	r1, r5
 8008372:	f7f8 f949 	bl	8000608 <__aeabi_dmul>
 8008376:	a3a8      	add	r3, pc, #672	; (adr r3, 8008618 <__ieee754_asin+0x2d8>)
 8008378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837c:	4606      	mov	r6, r0
 800837e:	460f      	mov	r7, r1
 8008380:	4620      	mov	r0, r4
 8008382:	4629      	mov	r1, r5
 8008384:	f7f8 f940 	bl	8000608 <__aeabi_dmul>
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	4630      	mov	r0, r6
 800838e:	4639      	mov	r1, r7
 8008390:	f7f7 ff84 	bl	800029c <__adddf3>
 8008394:	e00a      	b.n	80083ac <__ieee754_asin+0x6c>
 8008396:	ee10 2a10 	vmov	r2, s0
 800839a:	462b      	mov	r3, r5
 800839c:	4620      	mov	r0, r4
 800839e:	4629      	mov	r1, r5
 80083a0:	f7f7 ff7a 	bl	8000298 <__aeabi_dsub>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	f7f8 fa58 	bl	800085c <__aeabi_ddiv>
 80083ac:	4604      	mov	r4, r0
 80083ae:	460d      	mov	r5, r1
 80083b0:	ec45 4b10 	vmov	d0, r4, r5
 80083b4:	b007      	add	sp, #28
 80083b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ba:	4bb0      	ldr	r3, [pc, #704]	; (800867c <__ieee754_asin+0x33c>)
 80083bc:	429f      	cmp	r7, r3
 80083be:	dc11      	bgt.n	80083e4 <__ieee754_asin+0xa4>
 80083c0:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80083c4:	f280 80ae 	bge.w	8008524 <__ieee754_asin+0x1e4>
 80083c8:	a395      	add	r3, pc, #596	; (adr r3, 8008620 <__ieee754_asin+0x2e0>)
 80083ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ce:	ee10 0a10 	vmov	r0, s0
 80083d2:	4629      	mov	r1, r5
 80083d4:	f7f7 ff62 	bl	800029c <__adddf3>
 80083d8:	2200      	movs	r2, #0
 80083da:	4ba9      	ldr	r3, [pc, #676]	; (8008680 <__ieee754_asin+0x340>)
 80083dc:	f7f8 fba4 	bl	8000b28 <__aeabi_dcmpgt>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d1e5      	bne.n	80083b0 <__ieee754_asin+0x70>
 80083e4:	ec45 4b10 	vmov	d0, r4, r5
 80083e8:	f001 f9fa 	bl	80097e0 <fabs>
 80083ec:	2000      	movs	r0, #0
 80083ee:	ec53 2b10 	vmov	r2, r3, d0
 80083f2:	49a3      	ldr	r1, [pc, #652]	; (8008680 <__ieee754_asin+0x340>)
 80083f4:	f7f7 ff50 	bl	8000298 <__aeabi_dsub>
 80083f8:	2200      	movs	r2, #0
 80083fa:	4ba2      	ldr	r3, [pc, #648]	; (8008684 <__ieee754_asin+0x344>)
 80083fc:	f7f8 f904 	bl	8000608 <__aeabi_dmul>
 8008400:	a389      	add	r3, pc, #548	; (adr r3, 8008628 <__ieee754_asin+0x2e8>)
 8008402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008406:	4604      	mov	r4, r0
 8008408:	460d      	mov	r5, r1
 800840a:	f7f8 f8fd 	bl	8000608 <__aeabi_dmul>
 800840e:	a388      	add	r3, pc, #544	; (adr r3, 8008630 <__ieee754_asin+0x2f0>)
 8008410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008414:	f7f7 ff42 	bl	800029c <__adddf3>
 8008418:	4622      	mov	r2, r4
 800841a:	462b      	mov	r3, r5
 800841c:	f7f8 f8f4 	bl	8000608 <__aeabi_dmul>
 8008420:	a385      	add	r3, pc, #532	; (adr r3, 8008638 <__ieee754_asin+0x2f8>)
 8008422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008426:	f7f7 ff37 	bl	8000298 <__aeabi_dsub>
 800842a:	4622      	mov	r2, r4
 800842c:	462b      	mov	r3, r5
 800842e:	f7f8 f8eb 	bl	8000608 <__aeabi_dmul>
 8008432:	a383      	add	r3, pc, #524	; (adr r3, 8008640 <__ieee754_asin+0x300>)
 8008434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008438:	f7f7 ff30 	bl	800029c <__adddf3>
 800843c:	4622      	mov	r2, r4
 800843e:	462b      	mov	r3, r5
 8008440:	f7f8 f8e2 	bl	8000608 <__aeabi_dmul>
 8008444:	a380      	add	r3, pc, #512	; (adr r3, 8008648 <__ieee754_asin+0x308>)
 8008446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844a:	f7f7 ff25 	bl	8000298 <__aeabi_dsub>
 800844e:	4622      	mov	r2, r4
 8008450:	462b      	mov	r3, r5
 8008452:	f7f8 f8d9 	bl	8000608 <__aeabi_dmul>
 8008456:	a37e      	add	r3, pc, #504	; (adr r3, 8008650 <__ieee754_asin+0x310>)
 8008458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845c:	f7f7 ff1e 	bl	800029c <__adddf3>
 8008460:	4622      	mov	r2, r4
 8008462:	462b      	mov	r3, r5
 8008464:	f7f8 f8d0 	bl	8000608 <__aeabi_dmul>
 8008468:	a37b      	add	r3, pc, #492	; (adr r3, 8008658 <__ieee754_asin+0x318>)
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	4680      	mov	r8, r0
 8008470:	4689      	mov	r9, r1
 8008472:	4620      	mov	r0, r4
 8008474:	4629      	mov	r1, r5
 8008476:	f7f8 f8c7 	bl	8000608 <__aeabi_dmul>
 800847a:	a379      	add	r3, pc, #484	; (adr r3, 8008660 <__ieee754_asin+0x320>)
 800847c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008480:	f7f7 ff0a 	bl	8000298 <__aeabi_dsub>
 8008484:	4622      	mov	r2, r4
 8008486:	462b      	mov	r3, r5
 8008488:	f7f8 f8be 	bl	8000608 <__aeabi_dmul>
 800848c:	a376      	add	r3, pc, #472	; (adr r3, 8008668 <__ieee754_asin+0x328>)
 800848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008492:	f7f7 ff03 	bl	800029c <__adddf3>
 8008496:	4622      	mov	r2, r4
 8008498:	462b      	mov	r3, r5
 800849a:	f7f8 f8b5 	bl	8000608 <__aeabi_dmul>
 800849e:	a374      	add	r3, pc, #464	; (adr r3, 8008670 <__ieee754_asin+0x330>)
 80084a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a4:	f7f7 fef8 	bl	8000298 <__aeabi_dsub>
 80084a8:	4622      	mov	r2, r4
 80084aa:	462b      	mov	r3, r5
 80084ac:	f7f8 f8ac 	bl	8000608 <__aeabi_dmul>
 80084b0:	4b73      	ldr	r3, [pc, #460]	; (8008680 <__ieee754_asin+0x340>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	f7f7 fef2 	bl	800029c <__adddf3>
 80084b8:	ec45 4b10 	vmov	d0, r4, r5
 80084bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084c0:	f000 ff3c 	bl	800933c <__ieee754_sqrt>
 80084c4:	4b70      	ldr	r3, [pc, #448]	; (8008688 <__ieee754_asin+0x348>)
 80084c6:	429f      	cmp	r7, r3
 80084c8:	ec5b ab10 	vmov	sl, fp, d0
 80084cc:	f340 80de 	ble.w	800868c <__ieee754_asin+0x34c>
 80084d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084d4:	4640      	mov	r0, r8
 80084d6:	4649      	mov	r1, r9
 80084d8:	f7f8 f9c0 	bl	800085c <__aeabi_ddiv>
 80084dc:	4652      	mov	r2, sl
 80084de:	465b      	mov	r3, fp
 80084e0:	f7f8 f892 	bl	8000608 <__aeabi_dmul>
 80084e4:	4652      	mov	r2, sl
 80084e6:	465b      	mov	r3, fp
 80084e8:	f7f7 fed8 	bl	800029c <__adddf3>
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	f7f7 fed4 	bl	800029c <__adddf3>
 80084f4:	a348      	add	r3, pc, #288	; (adr r3, 8008618 <__ieee754_asin+0x2d8>)
 80084f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fa:	f7f7 fecd 	bl	8000298 <__aeabi_dsub>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	a143      	add	r1, pc, #268	; (adr r1, 8008610 <__ieee754_asin+0x2d0>)
 8008504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008508:	f7f7 fec6 	bl	8000298 <__aeabi_dsub>
 800850c:	9b01      	ldr	r3, [sp, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	bfdc      	itt	le
 8008512:	4602      	movle	r2, r0
 8008514:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8008518:	4604      	mov	r4, r0
 800851a:	460d      	mov	r5, r1
 800851c:	bfdc      	itt	le
 800851e:	4614      	movle	r4, r2
 8008520:	461d      	movle	r5, r3
 8008522:	e745      	b.n	80083b0 <__ieee754_asin+0x70>
 8008524:	ee10 2a10 	vmov	r2, s0
 8008528:	ee10 0a10 	vmov	r0, s0
 800852c:	462b      	mov	r3, r5
 800852e:	4629      	mov	r1, r5
 8008530:	f7f8 f86a 	bl	8000608 <__aeabi_dmul>
 8008534:	a33c      	add	r3, pc, #240	; (adr r3, 8008628 <__ieee754_asin+0x2e8>)
 8008536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853a:	4606      	mov	r6, r0
 800853c:	460f      	mov	r7, r1
 800853e:	f7f8 f863 	bl	8000608 <__aeabi_dmul>
 8008542:	a33b      	add	r3, pc, #236	; (adr r3, 8008630 <__ieee754_asin+0x2f0>)
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	f7f7 fea8 	bl	800029c <__adddf3>
 800854c:	4632      	mov	r2, r6
 800854e:	463b      	mov	r3, r7
 8008550:	f7f8 f85a 	bl	8000608 <__aeabi_dmul>
 8008554:	a338      	add	r3, pc, #224	; (adr r3, 8008638 <__ieee754_asin+0x2f8>)
 8008556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855a:	f7f7 fe9d 	bl	8000298 <__aeabi_dsub>
 800855e:	4632      	mov	r2, r6
 8008560:	463b      	mov	r3, r7
 8008562:	f7f8 f851 	bl	8000608 <__aeabi_dmul>
 8008566:	a336      	add	r3, pc, #216	; (adr r3, 8008640 <__ieee754_asin+0x300>)
 8008568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856c:	f7f7 fe96 	bl	800029c <__adddf3>
 8008570:	4632      	mov	r2, r6
 8008572:	463b      	mov	r3, r7
 8008574:	f7f8 f848 	bl	8000608 <__aeabi_dmul>
 8008578:	a333      	add	r3, pc, #204	; (adr r3, 8008648 <__ieee754_asin+0x308>)
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	f7f7 fe8b 	bl	8000298 <__aeabi_dsub>
 8008582:	4632      	mov	r2, r6
 8008584:	463b      	mov	r3, r7
 8008586:	f7f8 f83f 	bl	8000608 <__aeabi_dmul>
 800858a:	a331      	add	r3, pc, #196	; (adr r3, 8008650 <__ieee754_asin+0x310>)
 800858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008590:	f7f7 fe84 	bl	800029c <__adddf3>
 8008594:	4632      	mov	r2, r6
 8008596:	463b      	mov	r3, r7
 8008598:	f7f8 f836 	bl	8000608 <__aeabi_dmul>
 800859c:	a32e      	add	r3, pc, #184	; (adr r3, 8008658 <__ieee754_asin+0x318>)
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	4680      	mov	r8, r0
 80085a4:	4689      	mov	r9, r1
 80085a6:	4630      	mov	r0, r6
 80085a8:	4639      	mov	r1, r7
 80085aa:	f7f8 f82d 	bl	8000608 <__aeabi_dmul>
 80085ae:	a32c      	add	r3, pc, #176	; (adr r3, 8008660 <__ieee754_asin+0x320>)
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	f7f7 fe70 	bl	8000298 <__aeabi_dsub>
 80085b8:	4632      	mov	r2, r6
 80085ba:	463b      	mov	r3, r7
 80085bc:	f7f8 f824 	bl	8000608 <__aeabi_dmul>
 80085c0:	a329      	add	r3, pc, #164	; (adr r3, 8008668 <__ieee754_asin+0x328>)
 80085c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c6:	f7f7 fe69 	bl	800029c <__adddf3>
 80085ca:	4632      	mov	r2, r6
 80085cc:	463b      	mov	r3, r7
 80085ce:	f7f8 f81b 	bl	8000608 <__aeabi_dmul>
 80085d2:	a327      	add	r3, pc, #156	; (adr r3, 8008670 <__ieee754_asin+0x330>)
 80085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d8:	f7f7 fe5e 	bl	8000298 <__aeabi_dsub>
 80085dc:	4632      	mov	r2, r6
 80085de:	463b      	mov	r3, r7
 80085e0:	f7f8 f812 	bl	8000608 <__aeabi_dmul>
 80085e4:	2200      	movs	r2, #0
 80085e6:	4b26      	ldr	r3, [pc, #152]	; (8008680 <__ieee754_asin+0x340>)
 80085e8:	f7f7 fe58 	bl	800029c <__adddf3>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	4640      	mov	r0, r8
 80085f2:	4649      	mov	r1, r9
 80085f4:	f7f8 f932 	bl	800085c <__aeabi_ddiv>
 80085f8:	4622      	mov	r2, r4
 80085fa:	462b      	mov	r3, r5
 80085fc:	f7f8 f804 	bl	8000608 <__aeabi_dmul>
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	4620      	mov	r0, r4
 8008606:	4629      	mov	r1, r5
 8008608:	e6c2      	b.n	8008390 <__ieee754_asin+0x50>
 800860a:	bf00      	nop
 800860c:	f3af 8000 	nop.w
 8008610:	54442d18 	.word	0x54442d18
 8008614:	3ff921fb 	.word	0x3ff921fb
 8008618:	33145c07 	.word	0x33145c07
 800861c:	3c91a626 	.word	0x3c91a626
 8008620:	8800759c 	.word	0x8800759c
 8008624:	7e37e43c 	.word	0x7e37e43c
 8008628:	0dfdf709 	.word	0x0dfdf709
 800862c:	3f023de1 	.word	0x3f023de1
 8008630:	7501b288 	.word	0x7501b288
 8008634:	3f49efe0 	.word	0x3f49efe0
 8008638:	b5688f3b 	.word	0xb5688f3b
 800863c:	3fa48228 	.word	0x3fa48228
 8008640:	0e884455 	.word	0x0e884455
 8008644:	3fc9c155 	.word	0x3fc9c155
 8008648:	03eb6f7d 	.word	0x03eb6f7d
 800864c:	3fd4d612 	.word	0x3fd4d612
 8008650:	55555555 	.word	0x55555555
 8008654:	3fc55555 	.word	0x3fc55555
 8008658:	b12e9282 	.word	0xb12e9282
 800865c:	3fb3b8c5 	.word	0x3fb3b8c5
 8008660:	1b8d0159 	.word	0x1b8d0159
 8008664:	3fe6066c 	.word	0x3fe6066c
 8008668:	9c598ac8 	.word	0x9c598ac8
 800866c:	40002ae5 	.word	0x40002ae5
 8008670:	1c8a2d4b 	.word	0x1c8a2d4b
 8008674:	40033a27 	.word	0x40033a27
 8008678:	3fefffff 	.word	0x3fefffff
 800867c:	3fdfffff 	.word	0x3fdfffff
 8008680:	3ff00000 	.word	0x3ff00000
 8008684:	3fe00000 	.word	0x3fe00000
 8008688:	3fef3332 	.word	0x3fef3332
 800868c:	ee10 2a10 	vmov	r2, s0
 8008690:	ee10 0a10 	vmov	r0, s0
 8008694:	465b      	mov	r3, fp
 8008696:	4659      	mov	r1, fp
 8008698:	f7f7 fe00 	bl	800029c <__adddf3>
 800869c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086a4:	4640      	mov	r0, r8
 80086a6:	4649      	mov	r1, r9
 80086a8:	f7f8 f8d8 	bl	800085c <__aeabi_ddiv>
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086b4:	f7f7 ffa8 	bl	8000608 <__aeabi_dmul>
 80086b8:	2600      	movs	r6, #0
 80086ba:	4680      	mov	r8, r0
 80086bc:	4689      	mov	r9, r1
 80086be:	4632      	mov	r2, r6
 80086c0:	465b      	mov	r3, fp
 80086c2:	4630      	mov	r0, r6
 80086c4:	4659      	mov	r1, fp
 80086c6:	f7f7 ff9f 	bl	8000608 <__aeabi_dmul>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	4620      	mov	r0, r4
 80086d0:	4629      	mov	r1, r5
 80086d2:	f7f7 fde1 	bl	8000298 <__aeabi_dsub>
 80086d6:	4632      	mov	r2, r6
 80086d8:	4604      	mov	r4, r0
 80086da:	460d      	mov	r5, r1
 80086dc:	465b      	mov	r3, fp
 80086de:	4650      	mov	r0, sl
 80086e0:	4659      	mov	r1, fp
 80086e2:	f7f7 fddb 	bl	800029c <__adddf3>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	4620      	mov	r0, r4
 80086ec:	4629      	mov	r1, r5
 80086ee:	f7f8 f8b5 	bl	800085c <__aeabi_ddiv>
 80086f2:	4602      	mov	r2, r0
 80086f4:	460b      	mov	r3, r1
 80086f6:	f7f7 fdd1 	bl	800029c <__adddf3>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	a114      	add	r1, pc, #80	; (adr r1, 8008750 <__ieee754_asin+0x410>)
 8008700:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008704:	f7f7 fdc8 	bl	8000298 <__aeabi_dsub>
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	4640      	mov	r0, r8
 800870e:	4649      	mov	r1, r9
 8008710:	f7f7 fdc2 	bl	8000298 <__aeabi_dsub>
 8008714:	465f      	mov	r7, fp
 8008716:	4604      	mov	r4, r0
 8008718:	460d      	mov	r5, r1
 800871a:	4632      	mov	r2, r6
 800871c:	465b      	mov	r3, fp
 800871e:	4630      	mov	r0, r6
 8008720:	4639      	mov	r1, r7
 8008722:	f7f7 fdbb 	bl	800029c <__adddf3>
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	a10b      	add	r1, pc, #44	; (adr r1, 8008758 <__ieee754_asin+0x418>)
 800872c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008730:	f7f7 fdb2 	bl	8000298 <__aeabi_dsub>
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	4620      	mov	r0, r4
 800873a:	4629      	mov	r1, r5
 800873c:	f7f7 fdac 	bl	8000298 <__aeabi_dsub>
 8008740:	4602      	mov	r2, r0
 8008742:	460b      	mov	r3, r1
 8008744:	a104      	add	r1, pc, #16	; (adr r1, 8008758 <__ieee754_asin+0x418>)
 8008746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800874a:	e6dd      	b.n	8008508 <__ieee754_asin+0x1c8>
 800874c:	f3af 8000 	nop.w
 8008750:	33145c07 	.word	0x33145c07
 8008754:	3c91a626 	.word	0x3c91a626
 8008758:	54442d18 	.word	0x54442d18
 800875c:	3fe921fb 	.word	0x3fe921fb

08008760 <__ieee754_atan2>:
 8008760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008764:	ec57 6b11 	vmov	r6, r7, d1
 8008768:	4273      	negs	r3, r6
 800876a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800876e:	4333      	orrs	r3, r6
 8008770:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8008918 <__ieee754_atan2+0x1b8>
 8008774:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008778:	4573      	cmp	r3, lr
 800877a:	ec51 0b10 	vmov	r0, r1, d0
 800877e:	ee11 8a10 	vmov	r8, s2
 8008782:	d80a      	bhi.n	800879a <__ieee754_atan2+0x3a>
 8008784:	4244      	negs	r4, r0
 8008786:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800878a:	4304      	orrs	r4, r0
 800878c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008790:	4574      	cmp	r4, lr
 8008792:	468c      	mov	ip, r1
 8008794:	ee10 9a10 	vmov	r9, s0
 8008798:	d907      	bls.n	80087aa <__ieee754_atan2+0x4a>
 800879a:	4632      	mov	r2, r6
 800879c:	463b      	mov	r3, r7
 800879e:	f7f7 fd7d 	bl	800029c <__adddf3>
 80087a2:	ec41 0b10 	vmov	d0, r0, r1
 80087a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087aa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80087ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80087b2:	4334      	orrs	r4, r6
 80087b4:	d103      	bne.n	80087be <__ieee754_atan2+0x5e>
 80087b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087ba:	f000 be71 	b.w	80094a0 <atan>
 80087be:	17bc      	asrs	r4, r7, #30
 80087c0:	f004 0402 	and.w	r4, r4, #2
 80087c4:	ea53 0909 	orrs.w	r9, r3, r9
 80087c8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80087cc:	d107      	bne.n	80087de <__ieee754_atan2+0x7e>
 80087ce:	2c02      	cmp	r4, #2
 80087d0:	d073      	beq.n	80088ba <__ieee754_atan2+0x15a>
 80087d2:	2c03      	cmp	r4, #3
 80087d4:	d1e5      	bne.n	80087a2 <__ieee754_atan2+0x42>
 80087d6:	a13e      	add	r1, pc, #248	; (adr r1, 80088d0 <__ieee754_atan2+0x170>)
 80087d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087dc:	e7e1      	b.n	80087a2 <__ieee754_atan2+0x42>
 80087de:	ea52 0808 	orrs.w	r8, r2, r8
 80087e2:	d106      	bne.n	80087f2 <__ieee754_atan2+0x92>
 80087e4:	f1bc 0f00 	cmp.w	ip, #0
 80087e8:	da6b      	bge.n	80088c2 <__ieee754_atan2+0x162>
 80087ea:	a13b      	add	r1, pc, #236	; (adr r1, 80088d8 <__ieee754_atan2+0x178>)
 80087ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087f0:	e7d7      	b.n	80087a2 <__ieee754_atan2+0x42>
 80087f2:	4572      	cmp	r2, lr
 80087f4:	d120      	bne.n	8008838 <__ieee754_atan2+0xd8>
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d111      	bne.n	800881e <__ieee754_atan2+0xbe>
 80087fa:	2c02      	cmp	r4, #2
 80087fc:	d007      	beq.n	800880e <__ieee754_atan2+0xae>
 80087fe:	2c03      	cmp	r4, #3
 8008800:	d009      	beq.n	8008816 <__ieee754_atan2+0xb6>
 8008802:	2c01      	cmp	r4, #1
 8008804:	d155      	bne.n	80088b2 <__ieee754_atan2+0x152>
 8008806:	a136      	add	r1, pc, #216	; (adr r1, 80088e0 <__ieee754_atan2+0x180>)
 8008808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800880c:	e7c9      	b.n	80087a2 <__ieee754_atan2+0x42>
 800880e:	a136      	add	r1, pc, #216	; (adr r1, 80088e8 <__ieee754_atan2+0x188>)
 8008810:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008814:	e7c5      	b.n	80087a2 <__ieee754_atan2+0x42>
 8008816:	a136      	add	r1, pc, #216	; (adr r1, 80088f0 <__ieee754_atan2+0x190>)
 8008818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800881c:	e7c1      	b.n	80087a2 <__ieee754_atan2+0x42>
 800881e:	2c02      	cmp	r4, #2
 8008820:	d04b      	beq.n	80088ba <__ieee754_atan2+0x15a>
 8008822:	2c03      	cmp	r4, #3
 8008824:	d0d7      	beq.n	80087d6 <__ieee754_atan2+0x76>
 8008826:	2c01      	cmp	r4, #1
 8008828:	f04f 0000 	mov.w	r0, #0
 800882c:	d102      	bne.n	8008834 <__ieee754_atan2+0xd4>
 800882e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008832:	e7b6      	b.n	80087a2 <__ieee754_atan2+0x42>
 8008834:	2100      	movs	r1, #0
 8008836:	e7b4      	b.n	80087a2 <__ieee754_atan2+0x42>
 8008838:	4573      	cmp	r3, lr
 800883a:	d0d3      	beq.n	80087e4 <__ieee754_atan2+0x84>
 800883c:	1a9b      	subs	r3, r3, r2
 800883e:	151b      	asrs	r3, r3, #20
 8008840:	2b3c      	cmp	r3, #60	; 0x3c
 8008842:	dc1e      	bgt.n	8008882 <__ieee754_atan2+0x122>
 8008844:	2f00      	cmp	r7, #0
 8008846:	da01      	bge.n	800884c <__ieee754_atan2+0xec>
 8008848:	333c      	adds	r3, #60	; 0x3c
 800884a:	db1e      	blt.n	800888a <__ieee754_atan2+0x12a>
 800884c:	4632      	mov	r2, r6
 800884e:	463b      	mov	r3, r7
 8008850:	f7f8 f804 	bl	800085c <__aeabi_ddiv>
 8008854:	ec41 0b10 	vmov	d0, r0, r1
 8008858:	f000 ffc2 	bl	80097e0 <fabs>
 800885c:	f000 fe20 	bl	80094a0 <atan>
 8008860:	ec51 0b10 	vmov	r0, r1, d0
 8008864:	2c01      	cmp	r4, #1
 8008866:	d013      	beq.n	8008890 <__ieee754_atan2+0x130>
 8008868:	2c02      	cmp	r4, #2
 800886a:	d015      	beq.n	8008898 <__ieee754_atan2+0x138>
 800886c:	2c00      	cmp	r4, #0
 800886e:	d098      	beq.n	80087a2 <__ieee754_atan2+0x42>
 8008870:	a321      	add	r3, pc, #132	; (adr r3, 80088f8 <__ieee754_atan2+0x198>)
 8008872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008876:	f7f7 fd0f 	bl	8000298 <__aeabi_dsub>
 800887a:	a321      	add	r3, pc, #132	; (adr r3, 8008900 <__ieee754_atan2+0x1a0>)
 800887c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008880:	e014      	b.n	80088ac <__ieee754_atan2+0x14c>
 8008882:	a121      	add	r1, pc, #132	; (adr r1, 8008908 <__ieee754_atan2+0x1a8>)
 8008884:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008888:	e7ec      	b.n	8008864 <__ieee754_atan2+0x104>
 800888a:	2000      	movs	r0, #0
 800888c:	2100      	movs	r1, #0
 800888e:	e7e9      	b.n	8008864 <__ieee754_atan2+0x104>
 8008890:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008894:	4619      	mov	r1, r3
 8008896:	e784      	b.n	80087a2 <__ieee754_atan2+0x42>
 8008898:	a317      	add	r3, pc, #92	; (adr r3, 80088f8 <__ieee754_atan2+0x198>)
 800889a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889e:	f7f7 fcfb 	bl	8000298 <__aeabi_dsub>
 80088a2:	4602      	mov	r2, r0
 80088a4:	460b      	mov	r3, r1
 80088a6:	a116      	add	r1, pc, #88	; (adr r1, 8008900 <__ieee754_atan2+0x1a0>)
 80088a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088ac:	f7f7 fcf4 	bl	8000298 <__aeabi_dsub>
 80088b0:	e777      	b.n	80087a2 <__ieee754_atan2+0x42>
 80088b2:	a117      	add	r1, pc, #92	; (adr r1, 8008910 <__ieee754_atan2+0x1b0>)
 80088b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088b8:	e773      	b.n	80087a2 <__ieee754_atan2+0x42>
 80088ba:	a111      	add	r1, pc, #68	; (adr r1, 8008900 <__ieee754_atan2+0x1a0>)
 80088bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088c0:	e76f      	b.n	80087a2 <__ieee754_atan2+0x42>
 80088c2:	a111      	add	r1, pc, #68	; (adr r1, 8008908 <__ieee754_atan2+0x1a8>)
 80088c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088c8:	e76b      	b.n	80087a2 <__ieee754_atan2+0x42>
 80088ca:	bf00      	nop
 80088cc:	f3af 8000 	nop.w
 80088d0:	54442d18 	.word	0x54442d18
 80088d4:	c00921fb 	.word	0xc00921fb
 80088d8:	54442d18 	.word	0x54442d18
 80088dc:	bff921fb 	.word	0xbff921fb
 80088e0:	54442d18 	.word	0x54442d18
 80088e4:	bfe921fb 	.word	0xbfe921fb
 80088e8:	7f3321d2 	.word	0x7f3321d2
 80088ec:	4002d97c 	.word	0x4002d97c
 80088f0:	7f3321d2 	.word	0x7f3321d2
 80088f4:	c002d97c 	.word	0xc002d97c
 80088f8:	33145c07 	.word	0x33145c07
 80088fc:	3ca1a626 	.word	0x3ca1a626
 8008900:	54442d18 	.word	0x54442d18
 8008904:	400921fb 	.word	0x400921fb
 8008908:	54442d18 	.word	0x54442d18
 800890c:	3ff921fb 	.word	0x3ff921fb
 8008910:	54442d18 	.word	0x54442d18
 8008914:	3fe921fb 	.word	0x3fe921fb
 8008918:	7ff00000 	.word	0x7ff00000
 800891c:	00000000 	.word	0x00000000

08008920 <__ieee754_pow>:
 8008920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008924:	b091      	sub	sp, #68	; 0x44
 8008926:	ed8d 1b00 	vstr	d1, [sp]
 800892a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800892e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008932:	ea58 0302 	orrs.w	r3, r8, r2
 8008936:	ec57 6b10 	vmov	r6, r7, d0
 800893a:	f000 84be 	beq.w	80092ba <__ieee754_pow+0x99a>
 800893e:	4b7a      	ldr	r3, [pc, #488]	; (8008b28 <__ieee754_pow+0x208>)
 8008940:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008944:	429c      	cmp	r4, r3
 8008946:	463d      	mov	r5, r7
 8008948:	ee10 aa10 	vmov	sl, s0
 800894c:	dc09      	bgt.n	8008962 <__ieee754_pow+0x42>
 800894e:	d103      	bne.n	8008958 <__ieee754_pow+0x38>
 8008950:	b93e      	cbnz	r6, 8008962 <__ieee754_pow+0x42>
 8008952:	45a0      	cmp	r8, r4
 8008954:	dc0d      	bgt.n	8008972 <__ieee754_pow+0x52>
 8008956:	e001      	b.n	800895c <__ieee754_pow+0x3c>
 8008958:	4598      	cmp	r8, r3
 800895a:	dc02      	bgt.n	8008962 <__ieee754_pow+0x42>
 800895c:	4598      	cmp	r8, r3
 800895e:	d10e      	bne.n	800897e <__ieee754_pow+0x5e>
 8008960:	b16a      	cbz	r2, 800897e <__ieee754_pow+0x5e>
 8008962:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008966:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800896a:	ea54 030a 	orrs.w	r3, r4, sl
 800896e:	f000 84a4 	beq.w	80092ba <__ieee754_pow+0x99a>
 8008972:	486e      	ldr	r0, [pc, #440]	; (8008b2c <__ieee754_pow+0x20c>)
 8008974:	b011      	add	sp, #68	; 0x44
 8008976:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897a:	f000 bf45 	b.w	8009808 <nan>
 800897e:	2d00      	cmp	r5, #0
 8008980:	da53      	bge.n	8008a2a <__ieee754_pow+0x10a>
 8008982:	4b6b      	ldr	r3, [pc, #428]	; (8008b30 <__ieee754_pow+0x210>)
 8008984:	4598      	cmp	r8, r3
 8008986:	dc4d      	bgt.n	8008a24 <__ieee754_pow+0x104>
 8008988:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800898c:	4598      	cmp	r8, r3
 800898e:	dd4c      	ble.n	8008a2a <__ieee754_pow+0x10a>
 8008990:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008994:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008998:	2b14      	cmp	r3, #20
 800899a:	dd26      	ble.n	80089ea <__ieee754_pow+0xca>
 800899c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80089a0:	fa22 f103 	lsr.w	r1, r2, r3
 80089a4:	fa01 f303 	lsl.w	r3, r1, r3
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d13e      	bne.n	8008a2a <__ieee754_pow+0x10a>
 80089ac:	f001 0101 	and.w	r1, r1, #1
 80089b0:	f1c1 0b02 	rsb	fp, r1, #2
 80089b4:	2a00      	cmp	r2, #0
 80089b6:	d15b      	bne.n	8008a70 <__ieee754_pow+0x150>
 80089b8:	4b5b      	ldr	r3, [pc, #364]	; (8008b28 <__ieee754_pow+0x208>)
 80089ba:	4598      	cmp	r8, r3
 80089bc:	d124      	bne.n	8008a08 <__ieee754_pow+0xe8>
 80089be:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80089c2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80089c6:	ea53 030a 	orrs.w	r3, r3, sl
 80089ca:	f000 8476 	beq.w	80092ba <__ieee754_pow+0x99a>
 80089ce:	4b59      	ldr	r3, [pc, #356]	; (8008b34 <__ieee754_pow+0x214>)
 80089d0:	429c      	cmp	r4, r3
 80089d2:	dd2d      	ble.n	8008a30 <__ieee754_pow+0x110>
 80089d4:	f1b9 0f00 	cmp.w	r9, #0
 80089d8:	f280 8473 	bge.w	80092c2 <__ieee754_pow+0x9a2>
 80089dc:	2000      	movs	r0, #0
 80089de:	2100      	movs	r1, #0
 80089e0:	ec41 0b10 	vmov	d0, r0, r1
 80089e4:	b011      	add	sp, #68	; 0x44
 80089e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ea:	2a00      	cmp	r2, #0
 80089ec:	d13e      	bne.n	8008a6c <__ieee754_pow+0x14c>
 80089ee:	f1c3 0314 	rsb	r3, r3, #20
 80089f2:	fa48 f103 	asr.w	r1, r8, r3
 80089f6:	fa01 f303 	lsl.w	r3, r1, r3
 80089fa:	4543      	cmp	r3, r8
 80089fc:	f040 8469 	bne.w	80092d2 <__ieee754_pow+0x9b2>
 8008a00:	f001 0101 	and.w	r1, r1, #1
 8008a04:	f1c1 0b02 	rsb	fp, r1, #2
 8008a08:	4b4b      	ldr	r3, [pc, #300]	; (8008b38 <__ieee754_pow+0x218>)
 8008a0a:	4598      	cmp	r8, r3
 8008a0c:	d118      	bne.n	8008a40 <__ieee754_pow+0x120>
 8008a0e:	f1b9 0f00 	cmp.w	r9, #0
 8008a12:	f280 845a 	bge.w	80092ca <__ieee754_pow+0x9aa>
 8008a16:	4948      	ldr	r1, [pc, #288]	; (8008b38 <__ieee754_pow+0x218>)
 8008a18:	4632      	mov	r2, r6
 8008a1a:	463b      	mov	r3, r7
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	f7f7 ff1d 	bl	800085c <__aeabi_ddiv>
 8008a22:	e7dd      	b.n	80089e0 <__ieee754_pow+0xc0>
 8008a24:	f04f 0b02 	mov.w	fp, #2
 8008a28:	e7c4      	b.n	80089b4 <__ieee754_pow+0x94>
 8008a2a:	f04f 0b00 	mov.w	fp, #0
 8008a2e:	e7c1      	b.n	80089b4 <__ieee754_pow+0x94>
 8008a30:	f1b9 0f00 	cmp.w	r9, #0
 8008a34:	dad2      	bge.n	80089dc <__ieee754_pow+0xbc>
 8008a36:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008a3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008a3e:	e7cf      	b.n	80089e0 <__ieee754_pow+0xc0>
 8008a40:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008a44:	d106      	bne.n	8008a54 <__ieee754_pow+0x134>
 8008a46:	4632      	mov	r2, r6
 8008a48:	463b      	mov	r3, r7
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	f7f7 fddb 	bl	8000608 <__aeabi_dmul>
 8008a52:	e7c5      	b.n	80089e0 <__ieee754_pow+0xc0>
 8008a54:	4b39      	ldr	r3, [pc, #228]	; (8008b3c <__ieee754_pow+0x21c>)
 8008a56:	4599      	cmp	r9, r3
 8008a58:	d10a      	bne.n	8008a70 <__ieee754_pow+0x150>
 8008a5a:	2d00      	cmp	r5, #0
 8008a5c:	db08      	blt.n	8008a70 <__ieee754_pow+0x150>
 8008a5e:	ec47 6b10 	vmov	d0, r6, r7
 8008a62:	b011      	add	sp, #68	; 0x44
 8008a64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a68:	f000 bc68 	b.w	800933c <__ieee754_sqrt>
 8008a6c:	f04f 0b00 	mov.w	fp, #0
 8008a70:	ec47 6b10 	vmov	d0, r6, r7
 8008a74:	f000 feb4 	bl	80097e0 <fabs>
 8008a78:	ec51 0b10 	vmov	r0, r1, d0
 8008a7c:	f1ba 0f00 	cmp.w	sl, #0
 8008a80:	d127      	bne.n	8008ad2 <__ieee754_pow+0x1b2>
 8008a82:	b124      	cbz	r4, 8008a8e <__ieee754_pow+0x16e>
 8008a84:	4b2c      	ldr	r3, [pc, #176]	; (8008b38 <__ieee754_pow+0x218>)
 8008a86:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d121      	bne.n	8008ad2 <__ieee754_pow+0x1b2>
 8008a8e:	f1b9 0f00 	cmp.w	r9, #0
 8008a92:	da05      	bge.n	8008aa0 <__ieee754_pow+0x180>
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	2000      	movs	r0, #0
 8008a9a:	4927      	ldr	r1, [pc, #156]	; (8008b38 <__ieee754_pow+0x218>)
 8008a9c:	f7f7 fede 	bl	800085c <__aeabi_ddiv>
 8008aa0:	2d00      	cmp	r5, #0
 8008aa2:	da9d      	bge.n	80089e0 <__ieee754_pow+0xc0>
 8008aa4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008aa8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008aac:	ea54 030b 	orrs.w	r3, r4, fp
 8008ab0:	d108      	bne.n	8008ac4 <__ieee754_pow+0x1a4>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	4619      	mov	r1, r3
 8008aba:	f7f7 fbed 	bl	8000298 <__aeabi_dsub>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	e7ac      	b.n	8008a1e <__ieee754_pow+0xfe>
 8008ac4:	f1bb 0f01 	cmp.w	fp, #1
 8008ac8:	d18a      	bne.n	80089e0 <__ieee754_pow+0xc0>
 8008aca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ace:	4619      	mov	r1, r3
 8008ad0:	e786      	b.n	80089e0 <__ieee754_pow+0xc0>
 8008ad2:	0fed      	lsrs	r5, r5, #31
 8008ad4:	1e6b      	subs	r3, r5, #1
 8008ad6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ad8:	ea5b 0303 	orrs.w	r3, fp, r3
 8008adc:	d102      	bne.n	8008ae4 <__ieee754_pow+0x1c4>
 8008ade:	4632      	mov	r2, r6
 8008ae0:	463b      	mov	r3, r7
 8008ae2:	e7e8      	b.n	8008ab6 <__ieee754_pow+0x196>
 8008ae4:	4b16      	ldr	r3, [pc, #88]	; (8008b40 <__ieee754_pow+0x220>)
 8008ae6:	4598      	cmp	r8, r3
 8008ae8:	f340 80fe 	ble.w	8008ce8 <__ieee754_pow+0x3c8>
 8008aec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008af0:	4598      	cmp	r8, r3
 8008af2:	dd0a      	ble.n	8008b0a <__ieee754_pow+0x1ea>
 8008af4:	4b0f      	ldr	r3, [pc, #60]	; (8008b34 <__ieee754_pow+0x214>)
 8008af6:	429c      	cmp	r4, r3
 8008af8:	dc0d      	bgt.n	8008b16 <__ieee754_pow+0x1f6>
 8008afa:	f1b9 0f00 	cmp.w	r9, #0
 8008afe:	f6bf af6d 	bge.w	80089dc <__ieee754_pow+0xbc>
 8008b02:	a307      	add	r3, pc, #28	; (adr r3, 8008b20 <__ieee754_pow+0x200>)
 8008b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b08:	e79f      	b.n	8008a4a <__ieee754_pow+0x12a>
 8008b0a:	4b0e      	ldr	r3, [pc, #56]	; (8008b44 <__ieee754_pow+0x224>)
 8008b0c:	429c      	cmp	r4, r3
 8008b0e:	ddf4      	ble.n	8008afa <__ieee754_pow+0x1da>
 8008b10:	4b09      	ldr	r3, [pc, #36]	; (8008b38 <__ieee754_pow+0x218>)
 8008b12:	429c      	cmp	r4, r3
 8008b14:	dd18      	ble.n	8008b48 <__ieee754_pow+0x228>
 8008b16:	f1b9 0f00 	cmp.w	r9, #0
 8008b1a:	dcf2      	bgt.n	8008b02 <__ieee754_pow+0x1e2>
 8008b1c:	e75e      	b.n	80089dc <__ieee754_pow+0xbc>
 8008b1e:	bf00      	nop
 8008b20:	8800759c 	.word	0x8800759c
 8008b24:	7e37e43c 	.word	0x7e37e43c
 8008b28:	7ff00000 	.word	0x7ff00000
 8008b2c:	0800e901 	.word	0x0800e901
 8008b30:	433fffff 	.word	0x433fffff
 8008b34:	3fefffff 	.word	0x3fefffff
 8008b38:	3ff00000 	.word	0x3ff00000
 8008b3c:	3fe00000 	.word	0x3fe00000
 8008b40:	41e00000 	.word	0x41e00000
 8008b44:	3feffffe 	.word	0x3feffffe
 8008b48:	2200      	movs	r2, #0
 8008b4a:	4b63      	ldr	r3, [pc, #396]	; (8008cd8 <__ieee754_pow+0x3b8>)
 8008b4c:	f7f7 fba4 	bl	8000298 <__aeabi_dsub>
 8008b50:	a355      	add	r3, pc, #340	; (adr r3, 8008ca8 <__ieee754_pow+0x388>)
 8008b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b56:	4604      	mov	r4, r0
 8008b58:	460d      	mov	r5, r1
 8008b5a:	f7f7 fd55 	bl	8000608 <__aeabi_dmul>
 8008b5e:	a354      	add	r3, pc, #336	; (adr r3, 8008cb0 <__ieee754_pow+0x390>)
 8008b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b64:	4606      	mov	r6, r0
 8008b66:	460f      	mov	r7, r1
 8008b68:	4620      	mov	r0, r4
 8008b6a:	4629      	mov	r1, r5
 8008b6c:	f7f7 fd4c 	bl	8000608 <__aeabi_dmul>
 8008b70:	2200      	movs	r2, #0
 8008b72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b76:	4b59      	ldr	r3, [pc, #356]	; (8008cdc <__ieee754_pow+0x3bc>)
 8008b78:	4620      	mov	r0, r4
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	f7f7 fd44 	bl	8000608 <__aeabi_dmul>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	a14c      	add	r1, pc, #304	; (adr r1, 8008cb8 <__ieee754_pow+0x398>)
 8008b86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b8a:	f7f7 fb85 	bl	8000298 <__aeabi_dsub>
 8008b8e:	4622      	mov	r2, r4
 8008b90:	462b      	mov	r3, r5
 8008b92:	f7f7 fd39 	bl	8000608 <__aeabi_dmul>
 8008b96:	4602      	mov	r2, r0
 8008b98:	460b      	mov	r3, r1
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	4950      	ldr	r1, [pc, #320]	; (8008ce0 <__ieee754_pow+0x3c0>)
 8008b9e:	f7f7 fb7b 	bl	8000298 <__aeabi_dsub>
 8008ba2:	4622      	mov	r2, r4
 8008ba4:	462b      	mov	r3, r5
 8008ba6:	4680      	mov	r8, r0
 8008ba8:	4689      	mov	r9, r1
 8008baa:	4620      	mov	r0, r4
 8008bac:	4629      	mov	r1, r5
 8008bae:	f7f7 fd2b 	bl	8000608 <__aeabi_dmul>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	4640      	mov	r0, r8
 8008bb8:	4649      	mov	r1, r9
 8008bba:	f7f7 fd25 	bl	8000608 <__aeabi_dmul>
 8008bbe:	a340      	add	r3, pc, #256	; (adr r3, 8008cc0 <__ieee754_pow+0x3a0>)
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	f7f7 fd20 	bl	8000608 <__aeabi_dmul>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bd0:	f7f7 fb62 	bl	8000298 <__aeabi_dsub>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	4604      	mov	r4, r0
 8008bda:	460d      	mov	r5, r1
 8008bdc:	4630      	mov	r0, r6
 8008bde:	4639      	mov	r1, r7
 8008be0:	f7f7 fb5c 	bl	800029c <__adddf3>
 8008be4:	2000      	movs	r0, #0
 8008be6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bea:	4632      	mov	r2, r6
 8008bec:	463b      	mov	r3, r7
 8008bee:	f7f7 fb53 	bl	8000298 <__aeabi_dsub>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	f7f7 fb4d 	bl	8000298 <__aeabi_dsub>
 8008bfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c00:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8008c04:	4313      	orrs	r3, r2
 8008c06:	4606      	mov	r6, r0
 8008c08:	460f      	mov	r7, r1
 8008c0a:	f040 81eb 	bne.w	8008fe4 <__ieee754_pow+0x6c4>
 8008c0e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008cc8 <__ieee754_pow+0x3a8>
 8008c12:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008c16:	2400      	movs	r4, #0
 8008c18:	4622      	mov	r2, r4
 8008c1a:	462b      	mov	r3, r5
 8008c1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008c24:	f7f7 fb38 	bl	8000298 <__aeabi_dsub>
 8008c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c2c:	f7f7 fcec 	bl	8000608 <__aeabi_dmul>
 8008c30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c34:	4680      	mov	r8, r0
 8008c36:	4689      	mov	r9, r1
 8008c38:	4630      	mov	r0, r6
 8008c3a:	4639      	mov	r1, r7
 8008c3c:	f7f7 fce4 	bl	8000608 <__aeabi_dmul>
 8008c40:	4602      	mov	r2, r0
 8008c42:	460b      	mov	r3, r1
 8008c44:	4640      	mov	r0, r8
 8008c46:	4649      	mov	r1, r9
 8008c48:	f7f7 fb28 	bl	800029c <__adddf3>
 8008c4c:	4622      	mov	r2, r4
 8008c4e:	462b      	mov	r3, r5
 8008c50:	4680      	mov	r8, r0
 8008c52:	4689      	mov	r9, r1
 8008c54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c58:	f7f7 fcd6 	bl	8000608 <__aeabi_dmul>
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	4604      	mov	r4, r0
 8008c60:	460d      	mov	r5, r1
 8008c62:	4602      	mov	r2, r0
 8008c64:	4649      	mov	r1, r9
 8008c66:	4640      	mov	r0, r8
 8008c68:	e9cd 4500 	strd	r4, r5, [sp]
 8008c6c:	f7f7 fb16 	bl	800029c <__adddf3>
 8008c70:	4b1c      	ldr	r3, [pc, #112]	; (8008ce4 <__ieee754_pow+0x3c4>)
 8008c72:	4299      	cmp	r1, r3
 8008c74:	4606      	mov	r6, r0
 8008c76:	460f      	mov	r7, r1
 8008c78:	468b      	mov	fp, r1
 8008c7a:	f340 82f7 	ble.w	800926c <__ieee754_pow+0x94c>
 8008c7e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008c82:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008c86:	4303      	orrs	r3, r0
 8008c88:	f000 81ea 	beq.w	8009060 <__ieee754_pow+0x740>
 8008c8c:	a310      	add	r3, pc, #64	; (adr r3, 8008cd0 <__ieee754_pow+0x3b0>)
 8008c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c96:	f7f7 fcb7 	bl	8000608 <__aeabi_dmul>
 8008c9a:	a30d      	add	r3, pc, #52	; (adr r3, 8008cd0 <__ieee754_pow+0x3b0>)
 8008c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca0:	e6d5      	b.n	8008a4e <__ieee754_pow+0x12e>
 8008ca2:	bf00      	nop
 8008ca4:	f3af 8000 	nop.w
 8008ca8:	60000000 	.word	0x60000000
 8008cac:	3ff71547 	.word	0x3ff71547
 8008cb0:	f85ddf44 	.word	0xf85ddf44
 8008cb4:	3e54ae0b 	.word	0x3e54ae0b
 8008cb8:	55555555 	.word	0x55555555
 8008cbc:	3fd55555 	.word	0x3fd55555
 8008cc0:	652b82fe 	.word	0x652b82fe
 8008cc4:	3ff71547 	.word	0x3ff71547
 8008cc8:	00000000 	.word	0x00000000
 8008ccc:	bff00000 	.word	0xbff00000
 8008cd0:	8800759c 	.word	0x8800759c
 8008cd4:	7e37e43c 	.word	0x7e37e43c
 8008cd8:	3ff00000 	.word	0x3ff00000
 8008cdc:	3fd00000 	.word	0x3fd00000
 8008ce0:	3fe00000 	.word	0x3fe00000
 8008ce4:	408fffff 	.word	0x408fffff
 8008ce8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008cec:	f04f 0200 	mov.w	r2, #0
 8008cf0:	da05      	bge.n	8008cfe <__ieee754_pow+0x3de>
 8008cf2:	4bd3      	ldr	r3, [pc, #844]	; (8009040 <__ieee754_pow+0x720>)
 8008cf4:	f7f7 fc88 	bl	8000608 <__aeabi_dmul>
 8008cf8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008cfc:	460c      	mov	r4, r1
 8008cfe:	1523      	asrs	r3, r4, #20
 8008d00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008d04:	4413      	add	r3, r2
 8008d06:	9309      	str	r3, [sp, #36]	; 0x24
 8008d08:	4bce      	ldr	r3, [pc, #824]	; (8009044 <__ieee754_pow+0x724>)
 8008d0a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008d0e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008d12:	429c      	cmp	r4, r3
 8008d14:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008d18:	dd08      	ble.n	8008d2c <__ieee754_pow+0x40c>
 8008d1a:	4bcb      	ldr	r3, [pc, #812]	; (8009048 <__ieee754_pow+0x728>)
 8008d1c:	429c      	cmp	r4, r3
 8008d1e:	f340 815e 	ble.w	8008fde <__ieee754_pow+0x6be>
 8008d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d24:	3301      	adds	r3, #1
 8008d26:	9309      	str	r3, [sp, #36]	; 0x24
 8008d28:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008d2c:	f04f 0a00 	mov.w	sl, #0
 8008d30:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008d34:	930c      	str	r3, [sp, #48]	; 0x30
 8008d36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d38:	4bc4      	ldr	r3, [pc, #784]	; (800904c <__ieee754_pow+0x72c>)
 8008d3a:	4413      	add	r3, r2
 8008d3c:	ed93 7b00 	vldr	d7, [r3]
 8008d40:	4629      	mov	r1, r5
 8008d42:	ec53 2b17 	vmov	r2, r3, d7
 8008d46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d4a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008d4e:	f7f7 faa3 	bl	8000298 <__aeabi_dsub>
 8008d52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d56:	4606      	mov	r6, r0
 8008d58:	460f      	mov	r7, r1
 8008d5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d5e:	f7f7 fa9d 	bl	800029c <__adddf3>
 8008d62:	4602      	mov	r2, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	2000      	movs	r0, #0
 8008d68:	49b9      	ldr	r1, [pc, #740]	; (8009050 <__ieee754_pow+0x730>)
 8008d6a:	f7f7 fd77 	bl	800085c <__aeabi_ddiv>
 8008d6e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008d72:	4602      	mov	r2, r0
 8008d74:	460b      	mov	r3, r1
 8008d76:	4630      	mov	r0, r6
 8008d78:	4639      	mov	r1, r7
 8008d7a:	f7f7 fc45 	bl	8000608 <__aeabi_dmul>
 8008d7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d82:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008d86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	9302      	str	r3, [sp, #8]
 8008d8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008d92:	106d      	asrs	r5, r5, #1
 8008d94:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008d98:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008da2:	4640      	mov	r0, r8
 8008da4:	4649      	mov	r1, r9
 8008da6:	4614      	mov	r4, r2
 8008da8:	461d      	mov	r5, r3
 8008daa:	f7f7 fc2d 	bl	8000608 <__aeabi_dmul>
 8008dae:	4602      	mov	r2, r0
 8008db0:	460b      	mov	r3, r1
 8008db2:	4630      	mov	r0, r6
 8008db4:	4639      	mov	r1, r7
 8008db6:	f7f7 fa6f 	bl	8000298 <__aeabi_dsub>
 8008dba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	460f      	mov	r7, r1
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	f7f7 fa67 	bl	8000298 <__aeabi_dsub>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008dd2:	f7f7 fa61 	bl	8000298 <__aeabi_dsub>
 8008dd6:	4642      	mov	r2, r8
 8008dd8:	464b      	mov	r3, r9
 8008dda:	f7f7 fc15 	bl	8000608 <__aeabi_dmul>
 8008dde:	4602      	mov	r2, r0
 8008de0:	460b      	mov	r3, r1
 8008de2:	4630      	mov	r0, r6
 8008de4:	4639      	mov	r1, r7
 8008de6:	f7f7 fa57 	bl	8000298 <__aeabi_dsub>
 8008dea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008dee:	f7f7 fc0b 	bl	8000608 <__aeabi_dmul>
 8008df2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008df6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	f7f7 fc03 	bl	8000608 <__aeabi_dmul>
 8008e02:	a37b      	add	r3, pc, #492	; (adr r3, 8008ff0 <__ieee754_pow+0x6d0>)
 8008e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e08:	4604      	mov	r4, r0
 8008e0a:	460d      	mov	r5, r1
 8008e0c:	f7f7 fbfc 	bl	8000608 <__aeabi_dmul>
 8008e10:	a379      	add	r3, pc, #484	; (adr r3, 8008ff8 <__ieee754_pow+0x6d8>)
 8008e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e16:	f7f7 fa41 	bl	800029c <__adddf3>
 8008e1a:	4622      	mov	r2, r4
 8008e1c:	462b      	mov	r3, r5
 8008e1e:	f7f7 fbf3 	bl	8000608 <__aeabi_dmul>
 8008e22:	a377      	add	r3, pc, #476	; (adr r3, 8009000 <__ieee754_pow+0x6e0>)
 8008e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e28:	f7f7 fa38 	bl	800029c <__adddf3>
 8008e2c:	4622      	mov	r2, r4
 8008e2e:	462b      	mov	r3, r5
 8008e30:	f7f7 fbea 	bl	8000608 <__aeabi_dmul>
 8008e34:	a374      	add	r3, pc, #464	; (adr r3, 8009008 <__ieee754_pow+0x6e8>)
 8008e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3a:	f7f7 fa2f 	bl	800029c <__adddf3>
 8008e3e:	4622      	mov	r2, r4
 8008e40:	462b      	mov	r3, r5
 8008e42:	f7f7 fbe1 	bl	8000608 <__aeabi_dmul>
 8008e46:	a372      	add	r3, pc, #456	; (adr r3, 8009010 <__ieee754_pow+0x6f0>)
 8008e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4c:	f7f7 fa26 	bl	800029c <__adddf3>
 8008e50:	4622      	mov	r2, r4
 8008e52:	462b      	mov	r3, r5
 8008e54:	f7f7 fbd8 	bl	8000608 <__aeabi_dmul>
 8008e58:	a36f      	add	r3, pc, #444	; (adr r3, 8009018 <__ieee754_pow+0x6f8>)
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	f7f7 fa1d 	bl	800029c <__adddf3>
 8008e62:	4622      	mov	r2, r4
 8008e64:	4606      	mov	r6, r0
 8008e66:	460f      	mov	r7, r1
 8008e68:	462b      	mov	r3, r5
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	f7f7 fbcb 	bl	8000608 <__aeabi_dmul>
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	4630      	mov	r0, r6
 8008e78:	4639      	mov	r1, r7
 8008e7a:	f7f7 fbc5 	bl	8000608 <__aeabi_dmul>
 8008e7e:	4642      	mov	r2, r8
 8008e80:	4604      	mov	r4, r0
 8008e82:	460d      	mov	r5, r1
 8008e84:	464b      	mov	r3, r9
 8008e86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e8a:	f7f7 fa07 	bl	800029c <__adddf3>
 8008e8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e92:	f7f7 fbb9 	bl	8000608 <__aeabi_dmul>
 8008e96:	4622      	mov	r2, r4
 8008e98:	462b      	mov	r3, r5
 8008e9a:	f7f7 f9ff 	bl	800029c <__adddf3>
 8008e9e:	4642      	mov	r2, r8
 8008ea0:	4606      	mov	r6, r0
 8008ea2:	460f      	mov	r7, r1
 8008ea4:	464b      	mov	r3, r9
 8008ea6:	4640      	mov	r0, r8
 8008ea8:	4649      	mov	r1, r9
 8008eaa:	f7f7 fbad 	bl	8000608 <__aeabi_dmul>
 8008eae:	2200      	movs	r2, #0
 8008eb0:	4b68      	ldr	r3, [pc, #416]	; (8009054 <__ieee754_pow+0x734>)
 8008eb2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008eb6:	f7f7 f9f1 	bl	800029c <__adddf3>
 8008eba:	4632      	mov	r2, r6
 8008ebc:	463b      	mov	r3, r7
 8008ebe:	f7f7 f9ed 	bl	800029c <__adddf3>
 8008ec2:	9802      	ldr	r0, [sp, #8]
 8008ec4:	460d      	mov	r5, r1
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	4602      	mov	r2, r0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4640      	mov	r0, r8
 8008ece:	4649      	mov	r1, r9
 8008ed0:	f7f7 fb9a 	bl	8000608 <__aeabi_dmul>
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	4680      	mov	r8, r0
 8008ed8:	4689      	mov	r9, r1
 8008eda:	4b5e      	ldr	r3, [pc, #376]	; (8009054 <__ieee754_pow+0x734>)
 8008edc:	4620      	mov	r0, r4
 8008ede:	4629      	mov	r1, r5
 8008ee0:	f7f7 f9da 	bl	8000298 <__aeabi_dsub>
 8008ee4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008ee8:	f7f7 f9d6 	bl	8000298 <__aeabi_dsub>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	4639      	mov	r1, r7
 8008ef4:	f7f7 f9d0 	bl	8000298 <__aeabi_dsub>
 8008ef8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008efc:	f7f7 fb84 	bl	8000608 <__aeabi_dmul>
 8008f00:	4622      	mov	r2, r4
 8008f02:	4606      	mov	r6, r0
 8008f04:	460f      	mov	r7, r1
 8008f06:	462b      	mov	r3, r5
 8008f08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f0c:	f7f7 fb7c 	bl	8000608 <__aeabi_dmul>
 8008f10:	4602      	mov	r2, r0
 8008f12:	460b      	mov	r3, r1
 8008f14:	4630      	mov	r0, r6
 8008f16:	4639      	mov	r1, r7
 8008f18:	f7f7 f9c0 	bl	800029c <__adddf3>
 8008f1c:	4606      	mov	r6, r0
 8008f1e:	460f      	mov	r7, r1
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	4640      	mov	r0, r8
 8008f26:	4649      	mov	r1, r9
 8008f28:	f7f7 f9b8 	bl	800029c <__adddf3>
 8008f2c:	9802      	ldr	r0, [sp, #8]
 8008f2e:	a33c      	add	r3, pc, #240	; (adr r3, 8009020 <__ieee754_pow+0x700>)
 8008f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f34:	4604      	mov	r4, r0
 8008f36:	460d      	mov	r5, r1
 8008f38:	f7f7 fb66 	bl	8000608 <__aeabi_dmul>
 8008f3c:	4642      	mov	r2, r8
 8008f3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008f42:	464b      	mov	r3, r9
 8008f44:	4620      	mov	r0, r4
 8008f46:	4629      	mov	r1, r5
 8008f48:	f7f7 f9a6 	bl	8000298 <__aeabi_dsub>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	460b      	mov	r3, r1
 8008f50:	4630      	mov	r0, r6
 8008f52:	4639      	mov	r1, r7
 8008f54:	f7f7 f9a0 	bl	8000298 <__aeabi_dsub>
 8008f58:	a333      	add	r3, pc, #204	; (adr r3, 8009028 <__ieee754_pow+0x708>)
 8008f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5e:	f7f7 fb53 	bl	8000608 <__aeabi_dmul>
 8008f62:	a333      	add	r3, pc, #204	; (adr r3, 8009030 <__ieee754_pow+0x710>)
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	4606      	mov	r6, r0
 8008f6a:	460f      	mov	r7, r1
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	4629      	mov	r1, r5
 8008f70:	f7f7 fb4a 	bl	8000608 <__aeabi_dmul>
 8008f74:	4602      	mov	r2, r0
 8008f76:	460b      	mov	r3, r1
 8008f78:	4630      	mov	r0, r6
 8008f7a:	4639      	mov	r1, r7
 8008f7c:	f7f7 f98e 	bl	800029c <__adddf3>
 8008f80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f82:	4b35      	ldr	r3, [pc, #212]	; (8009058 <__ieee754_pow+0x738>)
 8008f84:	4413      	add	r3, r2
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	f7f7 f987 	bl	800029c <__adddf3>
 8008f8e:	4604      	mov	r4, r0
 8008f90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f92:	460d      	mov	r5, r1
 8008f94:	f7f7 face 	bl	8000534 <__aeabi_i2d>
 8008f98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f9a:	4b30      	ldr	r3, [pc, #192]	; (800905c <__ieee754_pow+0x73c>)
 8008f9c:	4413      	add	r3, r2
 8008f9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fa2:	4606      	mov	r6, r0
 8008fa4:	460f      	mov	r7, r1
 8008fa6:	4622      	mov	r2, r4
 8008fa8:	462b      	mov	r3, r5
 8008faa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fae:	f7f7 f975 	bl	800029c <__adddf3>
 8008fb2:	4642      	mov	r2, r8
 8008fb4:	464b      	mov	r3, r9
 8008fb6:	f7f7 f971 	bl	800029c <__adddf3>
 8008fba:	4632      	mov	r2, r6
 8008fbc:	463b      	mov	r3, r7
 8008fbe:	f7f7 f96d 	bl	800029c <__adddf3>
 8008fc2:	9802      	ldr	r0, [sp, #8]
 8008fc4:	4632      	mov	r2, r6
 8008fc6:	463b      	mov	r3, r7
 8008fc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fcc:	f7f7 f964 	bl	8000298 <__aeabi_dsub>
 8008fd0:	4642      	mov	r2, r8
 8008fd2:	464b      	mov	r3, r9
 8008fd4:	f7f7 f960 	bl	8000298 <__aeabi_dsub>
 8008fd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008fdc:	e607      	b.n	8008bee <__ieee754_pow+0x2ce>
 8008fde:	f04f 0a01 	mov.w	sl, #1
 8008fe2:	e6a5      	b.n	8008d30 <__ieee754_pow+0x410>
 8008fe4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009038 <__ieee754_pow+0x718>
 8008fe8:	e613      	b.n	8008c12 <__ieee754_pow+0x2f2>
 8008fea:	bf00      	nop
 8008fec:	f3af 8000 	nop.w
 8008ff0:	4a454eef 	.word	0x4a454eef
 8008ff4:	3fca7e28 	.word	0x3fca7e28
 8008ff8:	93c9db65 	.word	0x93c9db65
 8008ffc:	3fcd864a 	.word	0x3fcd864a
 8009000:	a91d4101 	.word	0xa91d4101
 8009004:	3fd17460 	.word	0x3fd17460
 8009008:	518f264d 	.word	0x518f264d
 800900c:	3fd55555 	.word	0x3fd55555
 8009010:	db6fabff 	.word	0xdb6fabff
 8009014:	3fdb6db6 	.word	0x3fdb6db6
 8009018:	33333303 	.word	0x33333303
 800901c:	3fe33333 	.word	0x3fe33333
 8009020:	e0000000 	.word	0xe0000000
 8009024:	3feec709 	.word	0x3feec709
 8009028:	dc3a03fd 	.word	0xdc3a03fd
 800902c:	3feec709 	.word	0x3feec709
 8009030:	145b01f5 	.word	0x145b01f5
 8009034:	be3e2fe0 	.word	0xbe3e2fe0
 8009038:	00000000 	.word	0x00000000
 800903c:	3ff00000 	.word	0x3ff00000
 8009040:	43400000 	.word	0x43400000
 8009044:	0003988e 	.word	0x0003988e
 8009048:	000bb679 	.word	0x000bb679
 800904c:	0800e670 	.word	0x0800e670
 8009050:	3ff00000 	.word	0x3ff00000
 8009054:	40080000 	.word	0x40080000
 8009058:	0800e690 	.word	0x0800e690
 800905c:	0800e680 	.word	0x0800e680
 8009060:	a3b4      	add	r3, pc, #720	; (adr r3, 8009334 <__ieee754_pow+0xa14>)
 8009062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009066:	4640      	mov	r0, r8
 8009068:	4649      	mov	r1, r9
 800906a:	f7f7 f917 	bl	800029c <__adddf3>
 800906e:	4622      	mov	r2, r4
 8009070:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009074:	462b      	mov	r3, r5
 8009076:	4630      	mov	r0, r6
 8009078:	4639      	mov	r1, r7
 800907a:	f7f7 f90d 	bl	8000298 <__aeabi_dsub>
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009086:	f7f7 fd4f 	bl	8000b28 <__aeabi_dcmpgt>
 800908a:	2800      	cmp	r0, #0
 800908c:	f47f adfe 	bne.w	8008c8c <__ieee754_pow+0x36c>
 8009090:	4aa3      	ldr	r2, [pc, #652]	; (8009320 <__ieee754_pow+0xa00>)
 8009092:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009096:	4293      	cmp	r3, r2
 8009098:	f340 810a 	ble.w	80092b0 <__ieee754_pow+0x990>
 800909c:	151b      	asrs	r3, r3, #20
 800909e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80090a2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80090a6:	fa4a f303 	asr.w	r3, sl, r3
 80090aa:	445b      	add	r3, fp
 80090ac:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80090b0:	4e9c      	ldr	r6, [pc, #624]	; (8009324 <__ieee754_pow+0xa04>)
 80090b2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80090b6:	4116      	asrs	r6, r2
 80090b8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80090bc:	2000      	movs	r0, #0
 80090be:	ea23 0106 	bic.w	r1, r3, r6
 80090c2:	f1c2 0214 	rsb	r2, r2, #20
 80090c6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80090ca:	fa4a fa02 	asr.w	sl, sl, r2
 80090ce:	f1bb 0f00 	cmp.w	fp, #0
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	4620      	mov	r0, r4
 80090d8:	4629      	mov	r1, r5
 80090da:	bfb8      	it	lt
 80090dc:	f1ca 0a00 	rsblt	sl, sl, #0
 80090e0:	f7f7 f8da 	bl	8000298 <__aeabi_dsub>
 80090e4:	e9cd 0100 	strd	r0, r1, [sp]
 80090e8:	4642      	mov	r2, r8
 80090ea:	464b      	mov	r3, r9
 80090ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090f0:	f7f7 f8d4 	bl	800029c <__adddf3>
 80090f4:	2000      	movs	r0, #0
 80090f6:	a378      	add	r3, pc, #480	; (adr r3, 80092d8 <__ieee754_pow+0x9b8>)
 80090f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fc:	4604      	mov	r4, r0
 80090fe:	460d      	mov	r5, r1
 8009100:	f7f7 fa82 	bl	8000608 <__aeabi_dmul>
 8009104:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009108:	4606      	mov	r6, r0
 800910a:	460f      	mov	r7, r1
 800910c:	4620      	mov	r0, r4
 800910e:	4629      	mov	r1, r5
 8009110:	f7f7 f8c2 	bl	8000298 <__aeabi_dsub>
 8009114:	4602      	mov	r2, r0
 8009116:	460b      	mov	r3, r1
 8009118:	4640      	mov	r0, r8
 800911a:	4649      	mov	r1, r9
 800911c:	f7f7 f8bc 	bl	8000298 <__aeabi_dsub>
 8009120:	a36f      	add	r3, pc, #444	; (adr r3, 80092e0 <__ieee754_pow+0x9c0>)
 8009122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009126:	f7f7 fa6f 	bl	8000608 <__aeabi_dmul>
 800912a:	a36f      	add	r3, pc, #444	; (adr r3, 80092e8 <__ieee754_pow+0x9c8>)
 800912c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009130:	4680      	mov	r8, r0
 8009132:	4689      	mov	r9, r1
 8009134:	4620      	mov	r0, r4
 8009136:	4629      	mov	r1, r5
 8009138:	f7f7 fa66 	bl	8000608 <__aeabi_dmul>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	4640      	mov	r0, r8
 8009142:	4649      	mov	r1, r9
 8009144:	f7f7 f8aa 	bl	800029c <__adddf3>
 8009148:	4604      	mov	r4, r0
 800914a:	460d      	mov	r5, r1
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	4630      	mov	r0, r6
 8009152:	4639      	mov	r1, r7
 8009154:	f7f7 f8a2 	bl	800029c <__adddf3>
 8009158:	4632      	mov	r2, r6
 800915a:	463b      	mov	r3, r7
 800915c:	4680      	mov	r8, r0
 800915e:	4689      	mov	r9, r1
 8009160:	f7f7 f89a 	bl	8000298 <__aeabi_dsub>
 8009164:	4602      	mov	r2, r0
 8009166:	460b      	mov	r3, r1
 8009168:	4620      	mov	r0, r4
 800916a:	4629      	mov	r1, r5
 800916c:	f7f7 f894 	bl	8000298 <__aeabi_dsub>
 8009170:	4642      	mov	r2, r8
 8009172:	4606      	mov	r6, r0
 8009174:	460f      	mov	r7, r1
 8009176:	464b      	mov	r3, r9
 8009178:	4640      	mov	r0, r8
 800917a:	4649      	mov	r1, r9
 800917c:	f7f7 fa44 	bl	8000608 <__aeabi_dmul>
 8009180:	a35b      	add	r3, pc, #364	; (adr r3, 80092f0 <__ieee754_pow+0x9d0>)
 8009182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009186:	4604      	mov	r4, r0
 8009188:	460d      	mov	r5, r1
 800918a:	f7f7 fa3d 	bl	8000608 <__aeabi_dmul>
 800918e:	a35a      	add	r3, pc, #360	; (adr r3, 80092f8 <__ieee754_pow+0x9d8>)
 8009190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009194:	f7f7 f880 	bl	8000298 <__aeabi_dsub>
 8009198:	4622      	mov	r2, r4
 800919a:	462b      	mov	r3, r5
 800919c:	f7f7 fa34 	bl	8000608 <__aeabi_dmul>
 80091a0:	a357      	add	r3, pc, #348	; (adr r3, 8009300 <__ieee754_pow+0x9e0>)
 80091a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a6:	f7f7 f879 	bl	800029c <__adddf3>
 80091aa:	4622      	mov	r2, r4
 80091ac:	462b      	mov	r3, r5
 80091ae:	f7f7 fa2b 	bl	8000608 <__aeabi_dmul>
 80091b2:	a355      	add	r3, pc, #340	; (adr r3, 8009308 <__ieee754_pow+0x9e8>)
 80091b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b8:	f7f7 f86e 	bl	8000298 <__aeabi_dsub>
 80091bc:	4622      	mov	r2, r4
 80091be:	462b      	mov	r3, r5
 80091c0:	f7f7 fa22 	bl	8000608 <__aeabi_dmul>
 80091c4:	a352      	add	r3, pc, #328	; (adr r3, 8009310 <__ieee754_pow+0x9f0>)
 80091c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ca:	f7f7 f867 	bl	800029c <__adddf3>
 80091ce:	4622      	mov	r2, r4
 80091d0:	462b      	mov	r3, r5
 80091d2:	f7f7 fa19 	bl	8000608 <__aeabi_dmul>
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	4640      	mov	r0, r8
 80091dc:	4649      	mov	r1, r9
 80091de:	f7f7 f85b 	bl	8000298 <__aeabi_dsub>
 80091e2:	4604      	mov	r4, r0
 80091e4:	460d      	mov	r5, r1
 80091e6:	4602      	mov	r2, r0
 80091e8:	460b      	mov	r3, r1
 80091ea:	4640      	mov	r0, r8
 80091ec:	4649      	mov	r1, r9
 80091ee:	f7f7 fa0b 	bl	8000608 <__aeabi_dmul>
 80091f2:	2200      	movs	r2, #0
 80091f4:	e9cd 0100 	strd	r0, r1, [sp]
 80091f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80091fc:	4620      	mov	r0, r4
 80091fe:	4629      	mov	r1, r5
 8009200:	f7f7 f84a 	bl	8000298 <__aeabi_dsub>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	e9dd 0100 	ldrd	r0, r1, [sp]
 800920c:	f7f7 fb26 	bl	800085c <__aeabi_ddiv>
 8009210:	4632      	mov	r2, r6
 8009212:	4604      	mov	r4, r0
 8009214:	460d      	mov	r5, r1
 8009216:	463b      	mov	r3, r7
 8009218:	4640      	mov	r0, r8
 800921a:	4649      	mov	r1, r9
 800921c:	f7f7 f9f4 	bl	8000608 <__aeabi_dmul>
 8009220:	4632      	mov	r2, r6
 8009222:	463b      	mov	r3, r7
 8009224:	f7f7 f83a 	bl	800029c <__adddf3>
 8009228:	4602      	mov	r2, r0
 800922a:	460b      	mov	r3, r1
 800922c:	4620      	mov	r0, r4
 800922e:	4629      	mov	r1, r5
 8009230:	f7f7 f832 	bl	8000298 <__aeabi_dsub>
 8009234:	4642      	mov	r2, r8
 8009236:	464b      	mov	r3, r9
 8009238:	f7f7 f82e 	bl	8000298 <__aeabi_dsub>
 800923c:	4602      	mov	r2, r0
 800923e:	460b      	mov	r3, r1
 8009240:	2000      	movs	r0, #0
 8009242:	4939      	ldr	r1, [pc, #228]	; (8009328 <__ieee754_pow+0xa08>)
 8009244:	f7f7 f828 	bl	8000298 <__aeabi_dsub>
 8009248:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800924c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009250:	4602      	mov	r2, r0
 8009252:	460b      	mov	r3, r1
 8009254:	da2f      	bge.n	80092b6 <__ieee754_pow+0x996>
 8009256:	4650      	mov	r0, sl
 8009258:	ec43 2b10 	vmov	d0, r2, r3
 800925c:	f000 fb60 	bl	8009920 <scalbn>
 8009260:	ec51 0b10 	vmov	r0, r1, d0
 8009264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009268:	f7ff bbf1 	b.w	8008a4e <__ieee754_pow+0x12e>
 800926c:	4b2f      	ldr	r3, [pc, #188]	; (800932c <__ieee754_pow+0xa0c>)
 800926e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009272:	429e      	cmp	r6, r3
 8009274:	f77f af0c 	ble.w	8009090 <__ieee754_pow+0x770>
 8009278:	4b2d      	ldr	r3, [pc, #180]	; (8009330 <__ieee754_pow+0xa10>)
 800927a:	440b      	add	r3, r1
 800927c:	4303      	orrs	r3, r0
 800927e:	d00b      	beq.n	8009298 <__ieee754_pow+0x978>
 8009280:	a325      	add	r3, pc, #148	; (adr r3, 8009318 <__ieee754_pow+0x9f8>)
 8009282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800928a:	f7f7 f9bd 	bl	8000608 <__aeabi_dmul>
 800928e:	a322      	add	r3, pc, #136	; (adr r3, 8009318 <__ieee754_pow+0x9f8>)
 8009290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009294:	f7ff bbdb 	b.w	8008a4e <__ieee754_pow+0x12e>
 8009298:	4622      	mov	r2, r4
 800929a:	462b      	mov	r3, r5
 800929c:	f7f6 fffc 	bl	8000298 <__aeabi_dsub>
 80092a0:	4642      	mov	r2, r8
 80092a2:	464b      	mov	r3, r9
 80092a4:	f7f7 fc36 	bl	8000b14 <__aeabi_dcmpge>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	f43f aef1 	beq.w	8009090 <__ieee754_pow+0x770>
 80092ae:	e7e7      	b.n	8009280 <__ieee754_pow+0x960>
 80092b0:	f04f 0a00 	mov.w	sl, #0
 80092b4:	e718      	b.n	80090e8 <__ieee754_pow+0x7c8>
 80092b6:	4621      	mov	r1, r4
 80092b8:	e7d4      	b.n	8009264 <__ieee754_pow+0x944>
 80092ba:	2000      	movs	r0, #0
 80092bc:	491a      	ldr	r1, [pc, #104]	; (8009328 <__ieee754_pow+0xa08>)
 80092be:	f7ff bb8f 	b.w	80089e0 <__ieee754_pow+0xc0>
 80092c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092c6:	f7ff bb8b 	b.w	80089e0 <__ieee754_pow+0xc0>
 80092ca:	4630      	mov	r0, r6
 80092cc:	4639      	mov	r1, r7
 80092ce:	f7ff bb87 	b.w	80089e0 <__ieee754_pow+0xc0>
 80092d2:	4693      	mov	fp, r2
 80092d4:	f7ff bb98 	b.w	8008a08 <__ieee754_pow+0xe8>
 80092d8:	00000000 	.word	0x00000000
 80092dc:	3fe62e43 	.word	0x3fe62e43
 80092e0:	fefa39ef 	.word	0xfefa39ef
 80092e4:	3fe62e42 	.word	0x3fe62e42
 80092e8:	0ca86c39 	.word	0x0ca86c39
 80092ec:	be205c61 	.word	0xbe205c61
 80092f0:	72bea4d0 	.word	0x72bea4d0
 80092f4:	3e663769 	.word	0x3e663769
 80092f8:	c5d26bf1 	.word	0xc5d26bf1
 80092fc:	3ebbbd41 	.word	0x3ebbbd41
 8009300:	af25de2c 	.word	0xaf25de2c
 8009304:	3f11566a 	.word	0x3f11566a
 8009308:	16bebd93 	.word	0x16bebd93
 800930c:	3f66c16c 	.word	0x3f66c16c
 8009310:	5555553e 	.word	0x5555553e
 8009314:	3fc55555 	.word	0x3fc55555
 8009318:	c2f8f359 	.word	0xc2f8f359
 800931c:	01a56e1f 	.word	0x01a56e1f
 8009320:	3fe00000 	.word	0x3fe00000
 8009324:	000fffff 	.word	0x000fffff
 8009328:	3ff00000 	.word	0x3ff00000
 800932c:	4090cbff 	.word	0x4090cbff
 8009330:	3f6f3400 	.word	0x3f6f3400
 8009334:	652b82fe 	.word	0x652b82fe
 8009338:	3c971547 	.word	0x3c971547

0800933c <__ieee754_sqrt>:
 800933c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009340:	4955      	ldr	r1, [pc, #340]	; (8009498 <__ieee754_sqrt+0x15c>)
 8009342:	ec55 4b10 	vmov	r4, r5, d0
 8009346:	43a9      	bics	r1, r5
 8009348:	462b      	mov	r3, r5
 800934a:	462a      	mov	r2, r5
 800934c:	d112      	bne.n	8009374 <__ieee754_sqrt+0x38>
 800934e:	ee10 2a10 	vmov	r2, s0
 8009352:	ee10 0a10 	vmov	r0, s0
 8009356:	4629      	mov	r1, r5
 8009358:	f7f7 f956 	bl	8000608 <__aeabi_dmul>
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	4620      	mov	r0, r4
 8009362:	4629      	mov	r1, r5
 8009364:	f7f6 ff9a 	bl	800029c <__adddf3>
 8009368:	4604      	mov	r4, r0
 800936a:	460d      	mov	r5, r1
 800936c:	ec45 4b10 	vmov	d0, r4, r5
 8009370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009374:	2d00      	cmp	r5, #0
 8009376:	ee10 0a10 	vmov	r0, s0
 800937a:	4621      	mov	r1, r4
 800937c:	dc0f      	bgt.n	800939e <__ieee754_sqrt+0x62>
 800937e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009382:	4330      	orrs	r0, r6
 8009384:	d0f2      	beq.n	800936c <__ieee754_sqrt+0x30>
 8009386:	b155      	cbz	r5, 800939e <__ieee754_sqrt+0x62>
 8009388:	ee10 2a10 	vmov	r2, s0
 800938c:	4620      	mov	r0, r4
 800938e:	4629      	mov	r1, r5
 8009390:	f7f6 ff82 	bl	8000298 <__aeabi_dsub>
 8009394:	4602      	mov	r2, r0
 8009396:	460b      	mov	r3, r1
 8009398:	f7f7 fa60 	bl	800085c <__aeabi_ddiv>
 800939c:	e7e4      	b.n	8009368 <__ieee754_sqrt+0x2c>
 800939e:	151b      	asrs	r3, r3, #20
 80093a0:	d073      	beq.n	800948a <__ieee754_sqrt+0x14e>
 80093a2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80093a6:	07dd      	lsls	r5, r3, #31
 80093a8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80093ac:	bf48      	it	mi
 80093ae:	0fc8      	lsrmi	r0, r1, #31
 80093b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80093b4:	bf44      	itt	mi
 80093b6:	0049      	lslmi	r1, r1, #1
 80093b8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80093bc:	2500      	movs	r5, #0
 80093be:	1058      	asrs	r0, r3, #1
 80093c0:	0fcb      	lsrs	r3, r1, #31
 80093c2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80093c6:	0049      	lsls	r1, r1, #1
 80093c8:	2316      	movs	r3, #22
 80093ca:	462c      	mov	r4, r5
 80093cc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80093d0:	19a7      	adds	r7, r4, r6
 80093d2:	4297      	cmp	r7, r2
 80093d4:	bfde      	ittt	le
 80093d6:	19bc      	addle	r4, r7, r6
 80093d8:	1bd2      	suble	r2, r2, r7
 80093da:	19ad      	addle	r5, r5, r6
 80093dc:	0fcf      	lsrs	r7, r1, #31
 80093de:	3b01      	subs	r3, #1
 80093e0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80093e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80093e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80093ec:	d1f0      	bne.n	80093d0 <__ieee754_sqrt+0x94>
 80093ee:	f04f 0c20 	mov.w	ip, #32
 80093f2:	469e      	mov	lr, r3
 80093f4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80093f8:	42a2      	cmp	r2, r4
 80093fa:	eb06 070e 	add.w	r7, r6, lr
 80093fe:	dc02      	bgt.n	8009406 <__ieee754_sqrt+0xca>
 8009400:	d112      	bne.n	8009428 <__ieee754_sqrt+0xec>
 8009402:	428f      	cmp	r7, r1
 8009404:	d810      	bhi.n	8009428 <__ieee754_sqrt+0xec>
 8009406:	2f00      	cmp	r7, #0
 8009408:	eb07 0e06 	add.w	lr, r7, r6
 800940c:	da42      	bge.n	8009494 <__ieee754_sqrt+0x158>
 800940e:	f1be 0f00 	cmp.w	lr, #0
 8009412:	db3f      	blt.n	8009494 <__ieee754_sqrt+0x158>
 8009414:	f104 0801 	add.w	r8, r4, #1
 8009418:	1b12      	subs	r2, r2, r4
 800941a:	428f      	cmp	r7, r1
 800941c:	bf88      	it	hi
 800941e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8009422:	1bc9      	subs	r1, r1, r7
 8009424:	4433      	add	r3, r6
 8009426:	4644      	mov	r4, r8
 8009428:	0052      	lsls	r2, r2, #1
 800942a:	f1bc 0c01 	subs.w	ip, ip, #1
 800942e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009432:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009436:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800943a:	d1dd      	bne.n	80093f8 <__ieee754_sqrt+0xbc>
 800943c:	430a      	orrs	r2, r1
 800943e:	d006      	beq.n	800944e <__ieee754_sqrt+0x112>
 8009440:	1c5c      	adds	r4, r3, #1
 8009442:	bf13      	iteet	ne
 8009444:	3301      	addne	r3, #1
 8009446:	3501      	addeq	r5, #1
 8009448:	4663      	moveq	r3, ip
 800944a:	f023 0301 	bicne.w	r3, r3, #1
 800944e:	106a      	asrs	r2, r5, #1
 8009450:	085b      	lsrs	r3, r3, #1
 8009452:	07e9      	lsls	r1, r5, #31
 8009454:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009458:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800945c:	bf48      	it	mi
 800945e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009462:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009466:	461c      	mov	r4, r3
 8009468:	e780      	b.n	800936c <__ieee754_sqrt+0x30>
 800946a:	0aca      	lsrs	r2, r1, #11
 800946c:	3815      	subs	r0, #21
 800946e:	0549      	lsls	r1, r1, #21
 8009470:	2a00      	cmp	r2, #0
 8009472:	d0fa      	beq.n	800946a <__ieee754_sqrt+0x12e>
 8009474:	02d6      	lsls	r6, r2, #11
 8009476:	d50a      	bpl.n	800948e <__ieee754_sqrt+0x152>
 8009478:	f1c3 0420 	rsb	r4, r3, #32
 800947c:	fa21 f404 	lsr.w	r4, r1, r4
 8009480:	1e5d      	subs	r5, r3, #1
 8009482:	4099      	lsls	r1, r3
 8009484:	4322      	orrs	r2, r4
 8009486:	1b43      	subs	r3, r0, r5
 8009488:	e78b      	b.n	80093a2 <__ieee754_sqrt+0x66>
 800948a:	4618      	mov	r0, r3
 800948c:	e7f0      	b.n	8009470 <__ieee754_sqrt+0x134>
 800948e:	0052      	lsls	r2, r2, #1
 8009490:	3301      	adds	r3, #1
 8009492:	e7ef      	b.n	8009474 <__ieee754_sqrt+0x138>
 8009494:	46a0      	mov	r8, r4
 8009496:	e7bf      	b.n	8009418 <__ieee754_sqrt+0xdc>
 8009498:	7ff00000 	.word	0x7ff00000
 800949c:	00000000 	.word	0x00000000

080094a0 <atan>:
 80094a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a4:	ec55 4b10 	vmov	r4, r5, d0
 80094a8:	4bc3      	ldr	r3, [pc, #780]	; (80097b8 <atan+0x318>)
 80094aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80094ae:	429e      	cmp	r6, r3
 80094b0:	46ab      	mov	fp, r5
 80094b2:	dd18      	ble.n	80094e6 <atan+0x46>
 80094b4:	4bc1      	ldr	r3, [pc, #772]	; (80097bc <atan+0x31c>)
 80094b6:	429e      	cmp	r6, r3
 80094b8:	dc01      	bgt.n	80094be <atan+0x1e>
 80094ba:	d109      	bne.n	80094d0 <atan+0x30>
 80094bc:	b144      	cbz	r4, 80094d0 <atan+0x30>
 80094be:	4622      	mov	r2, r4
 80094c0:	462b      	mov	r3, r5
 80094c2:	4620      	mov	r0, r4
 80094c4:	4629      	mov	r1, r5
 80094c6:	f7f6 fee9 	bl	800029c <__adddf3>
 80094ca:	4604      	mov	r4, r0
 80094cc:	460d      	mov	r5, r1
 80094ce:	e006      	b.n	80094de <atan+0x3e>
 80094d0:	f1bb 0f00 	cmp.w	fp, #0
 80094d4:	f340 8131 	ble.w	800973a <atan+0x29a>
 80094d8:	a59b      	add	r5, pc, #620	; (adr r5, 8009748 <atan+0x2a8>)
 80094da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80094de:	ec45 4b10 	vmov	d0, r4, r5
 80094e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e6:	4bb6      	ldr	r3, [pc, #728]	; (80097c0 <atan+0x320>)
 80094e8:	429e      	cmp	r6, r3
 80094ea:	dc14      	bgt.n	8009516 <atan+0x76>
 80094ec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80094f0:	429e      	cmp	r6, r3
 80094f2:	dc0d      	bgt.n	8009510 <atan+0x70>
 80094f4:	a396      	add	r3, pc, #600	; (adr r3, 8009750 <atan+0x2b0>)
 80094f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fa:	ee10 0a10 	vmov	r0, s0
 80094fe:	4629      	mov	r1, r5
 8009500:	f7f6 fecc 	bl	800029c <__adddf3>
 8009504:	2200      	movs	r2, #0
 8009506:	4baf      	ldr	r3, [pc, #700]	; (80097c4 <atan+0x324>)
 8009508:	f7f7 fb0e 	bl	8000b28 <__aeabi_dcmpgt>
 800950c:	2800      	cmp	r0, #0
 800950e:	d1e6      	bne.n	80094de <atan+0x3e>
 8009510:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009514:	e02b      	b.n	800956e <atan+0xce>
 8009516:	f000 f963 	bl	80097e0 <fabs>
 800951a:	4bab      	ldr	r3, [pc, #684]	; (80097c8 <atan+0x328>)
 800951c:	429e      	cmp	r6, r3
 800951e:	ec55 4b10 	vmov	r4, r5, d0
 8009522:	f300 80bf 	bgt.w	80096a4 <atan+0x204>
 8009526:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800952a:	429e      	cmp	r6, r3
 800952c:	f300 80a0 	bgt.w	8009670 <atan+0x1d0>
 8009530:	ee10 2a10 	vmov	r2, s0
 8009534:	ee10 0a10 	vmov	r0, s0
 8009538:	462b      	mov	r3, r5
 800953a:	4629      	mov	r1, r5
 800953c:	f7f6 feae 	bl	800029c <__adddf3>
 8009540:	2200      	movs	r2, #0
 8009542:	4ba0      	ldr	r3, [pc, #640]	; (80097c4 <atan+0x324>)
 8009544:	f7f6 fea8 	bl	8000298 <__aeabi_dsub>
 8009548:	2200      	movs	r2, #0
 800954a:	4606      	mov	r6, r0
 800954c:	460f      	mov	r7, r1
 800954e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009552:	4620      	mov	r0, r4
 8009554:	4629      	mov	r1, r5
 8009556:	f7f6 fea1 	bl	800029c <__adddf3>
 800955a:	4602      	mov	r2, r0
 800955c:	460b      	mov	r3, r1
 800955e:	4630      	mov	r0, r6
 8009560:	4639      	mov	r1, r7
 8009562:	f7f7 f97b 	bl	800085c <__aeabi_ddiv>
 8009566:	f04f 0a00 	mov.w	sl, #0
 800956a:	4604      	mov	r4, r0
 800956c:	460d      	mov	r5, r1
 800956e:	4622      	mov	r2, r4
 8009570:	462b      	mov	r3, r5
 8009572:	4620      	mov	r0, r4
 8009574:	4629      	mov	r1, r5
 8009576:	f7f7 f847 	bl	8000608 <__aeabi_dmul>
 800957a:	4602      	mov	r2, r0
 800957c:	460b      	mov	r3, r1
 800957e:	4680      	mov	r8, r0
 8009580:	4689      	mov	r9, r1
 8009582:	f7f7 f841 	bl	8000608 <__aeabi_dmul>
 8009586:	a374      	add	r3, pc, #464	; (adr r3, 8009758 <atan+0x2b8>)
 8009588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958c:	4606      	mov	r6, r0
 800958e:	460f      	mov	r7, r1
 8009590:	f7f7 f83a 	bl	8000608 <__aeabi_dmul>
 8009594:	a372      	add	r3, pc, #456	; (adr r3, 8009760 <atan+0x2c0>)
 8009596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959a:	f7f6 fe7f 	bl	800029c <__adddf3>
 800959e:	4632      	mov	r2, r6
 80095a0:	463b      	mov	r3, r7
 80095a2:	f7f7 f831 	bl	8000608 <__aeabi_dmul>
 80095a6:	a370      	add	r3, pc, #448	; (adr r3, 8009768 <atan+0x2c8>)
 80095a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ac:	f7f6 fe76 	bl	800029c <__adddf3>
 80095b0:	4632      	mov	r2, r6
 80095b2:	463b      	mov	r3, r7
 80095b4:	f7f7 f828 	bl	8000608 <__aeabi_dmul>
 80095b8:	a36d      	add	r3, pc, #436	; (adr r3, 8009770 <atan+0x2d0>)
 80095ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095be:	f7f6 fe6d 	bl	800029c <__adddf3>
 80095c2:	4632      	mov	r2, r6
 80095c4:	463b      	mov	r3, r7
 80095c6:	f7f7 f81f 	bl	8000608 <__aeabi_dmul>
 80095ca:	a36b      	add	r3, pc, #428	; (adr r3, 8009778 <atan+0x2d8>)
 80095cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d0:	f7f6 fe64 	bl	800029c <__adddf3>
 80095d4:	4632      	mov	r2, r6
 80095d6:	463b      	mov	r3, r7
 80095d8:	f7f7 f816 	bl	8000608 <__aeabi_dmul>
 80095dc:	a368      	add	r3, pc, #416	; (adr r3, 8009780 <atan+0x2e0>)
 80095de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e2:	f7f6 fe5b 	bl	800029c <__adddf3>
 80095e6:	4642      	mov	r2, r8
 80095e8:	464b      	mov	r3, r9
 80095ea:	f7f7 f80d 	bl	8000608 <__aeabi_dmul>
 80095ee:	a366      	add	r3, pc, #408	; (adr r3, 8009788 <atan+0x2e8>)
 80095f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f4:	4680      	mov	r8, r0
 80095f6:	4689      	mov	r9, r1
 80095f8:	4630      	mov	r0, r6
 80095fa:	4639      	mov	r1, r7
 80095fc:	f7f7 f804 	bl	8000608 <__aeabi_dmul>
 8009600:	a363      	add	r3, pc, #396	; (adr r3, 8009790 <atan+0x2f0>)
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	f7f6 fe47 	bl	8000298 <__aeabi_dsub>
 800960a:	4632      	mov	r2, r6
 800960c:	463b      	mov	r3, r7
 800960e:	f7f6 fffb 	bl	8000608 <__aeabi_dmul>
 8009612:	a361      	add	r3, pc, #388	; (adr r3, 8009798 <atan+0x2f8>)
 8009614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009618:	f7f6 fe3e 	bl	8000298 <__aeabi_dsub>
 800961c:	4632      	mov	r2, r6
 800961e:	463b      	mov	r3, r7
 8009620:	f7f6 fff2 	bl	8000608 <__aeabi_dmul>
 8009624:	a35e      	add	r3, pc, #376	; (adr r3, 80097a0 <atan+0x300>)
 8009626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962a:	f7f6 fe35 	bl	8000298 <__aeabi_dsub>
 800962e:	4632      	mov	r2, r6
 8009630:	463b      	mov	r3, r7
 8009632:	f7f6 ffe9 	bl	8000608 <__aeabi_dmul>
 8009636:	a35c      	add	r3, pc, #368	; (adr r3, 80097a8 <atan+0x308>)
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	f7f6 fe2c 	bl	8000298 <__aeabi_dsub>
 8009640:	4632      	mov	r2, r6
 8009642:	463b      	mov	r3, r7
 8009644:	f7f6 ffe0 	bl	8000608 <__aeabi_dmul>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	4640      	mov	r0, r8
 800964e:	4649      	mov	r1, r9
 8009650:	f7f6 fe24 	bl	800029c <__adddf3>
 8009654:	4622      	mov	r2, r4
 8009656:	462b      	mov	r3, r5
 8009658:	f7f6 ffd6 	bl	8000608 <__aeabi_dmul>
 800965c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009660:	4602      	mov	r2, r0
 8009662:	460b      	mov	r3, r1
 8009664:	d14b      	bne.n	80096fe <atan+0x25e>
 8009666:	4620      	mov	r0, r4
 8009668:	4629      	mov	r1, r5
 800966a:	f7f6 fe15 	bl	8000298 <__aeabi_dsub>
 800966e:	e72c      	b.n	80094ca <atan+0x2a>
 8009670:	ee10 0a10 	vmov	r0, s0
 8009674:	2200      	movs	r2, #0
 8009676:	4b53      	ldr	r3, [pc, #332]	; (80097c4 <atan+0x324>)
 8009678:	4629      	mov	r1, r5
 800967a:	f7f6 fe0d 	bl	8000298 <__aeabi_dsub>
 800967e:	2200      	movs	r2, #0
 8009680:	4606      	mov	r6, r0
 8009682:	460f      	mov	r7, r1
 8009684:	4b4f      	ldr	r3, [pc, #316]	; (80097c4 <atan+0x324>)
 8009686:	4620      	mov	r0, r4
 8009688:	4629      	mov	r1, r5
 800968a:	f7f6 fe07 	bl	800029c <__adddf3>
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	4630      	mov	r0, r6
 8009694:	4639      	mov	r1, r7
 8009696:	f7f7 f8e1 	bl	800085c <__aeabi_ddiv>
 800969a:	f04f 0a01 	mov.w	sl, #1
 800969e:	4604      	mov	r4, r0
 80096a0:	460d      	mov	r5, r1
 80096a2:	e764      	b.n	800956e <atan+0xce>
 80096a4:	4b49      	ldr	r3, [pc, #292]	; (80097cc <atan+0x32c>)
 80096a6:	429e      	cmp	r6, r3
 80096a8:	dc1d      	bgt.n	80096e6 <atan+0x246>
 80096aa:	ee10 0a10 	vmov	r0, s0
 80096ae:	2200      	movs	r2, #0
 80096b0:	4b47      	ldr	r3, [pc, #284]	; (80097d0 <atan+0x330>)
 80096b2:	4629      	mov	r1, r5
 80096b4:	f7f6 fdf0 	bl	8000298 <__aeabi_dsub>
 80096b8:	2200      	movs	r2, #0
 80096ba:	4606      	mov	r6, r0
 80096bc:	460f      	mov	r7, r1
 80096be:	4b44      	ldr	r3, [pc, #272]	; (80097d0 <atan+0x330>)
 80096c0:	4620      	mov	r0, r4
 80096c2:	4629      	mov	r1, r5
 80096c4:	f7f6 ffa0 	bl	8000608 <__aeabi_dmul>
 80096c8:	2200      	movs	r2, #0
 80096ca:	4b3e      	ldr	r3, [pc, #248]	; (80097c4 <atan+0x324>)
 80096cc:	f7f6 fde6 	bl	800029c <__adddf3>
 80096d0:	4602      	mov	r2, r0
 80096d2:	460b      	mov	r3, r1
 80096d4:	4630      	mov	r0, r6
 80096d6:	4639      	mov	r1, r7
 80096d8:	f7f7 f8c0 	bl	800085c <__aeabi_ddiv>
 80096dc:	f04f 0a02 	mov.w	sl, #2
 80096e0:	4604      	mov	r4, r0
 80096e2:	460d      	mov	r5, r1
 80096e4:	e743      	b.n	800956e <atan+0xce>
 80096e6:	462b      	mov	r3, r5
 80096e8:	ee10 2a10 	vmov	r2, s0
 80096ec:	2000      	movs	r0, #0
 80096ee:	4939      	ldr	r1, [pc, #228]	; (80097d4 <atan+0x334>)
 80096f0:	f7f7 f8b4 	bl	800085c <__aeabi_ddiv>
 80096f4:	f04f 0a03 	mov.w	sl, #3
 80096f8:	4604      	mov	r4, r0
 80096fa:	460d      	mov	r5, r1
 80096fc:	e737      	b.n	800956e <atan+0xce>
 80096fe:	4b36      	ldr	r3, [pc, #216]	; (80097d8 <atan+0x338>)
 8009700:	4e36      	ldr	r6, [pc, #216]	; (80097dc <atan+0x33c>)
 8009702:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8009706:	4456      	add	r6, sl
 8009708:	449a      	add	sl, r3
 800970a:	e9da 2300 	ldrd	r2, r3, [sl]
 800970e:	f7f6 fdc3 	bl	8000298 <__aeabi_dsub>
 8009712:	4622      	mov	r2, r4
 8009714:	462b      	mov	r3, r5
 8009716:	f7f6 fdbf 	bl	8000298 <__aeabi_dsub>
 800971a:	4602      	mov	r2, r0
 800971c:	460b      	mov	r3, r1
 800971e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009722:	f7f6 fdb9 	bl	8000298 <__aeabi_dsub>
 8009726:	f1bb 0f00 	cmp.w	fp, #0
 800972a:	4604      	mov	r4, r0
 800972c:	460d      	mov	r5, r1
 800972e:	f6bf aed6 	bge.w	80094de <atan+0x3e>
 8009732:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009736:	461d      	mov	r5, r3
 8009738:	e6d1      	b.n	80094de <atan+0x3e>
 800973a:	a51d      	add	r5, pc, #116	; (adr r5, 80097b0 <atan+0x310>)
 800973c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009740:	e6cd      	b.n	80094de <atan+0x3e>
 8009742:	bf00      	nop
 8009744:	f3af 8000 	nop.w
 8009748:	54442d18 	.word	0x54442d18
 800974c:	3ff921fb 	.word	0x3ff921fb
 8009750:	8800759c 	.word	0x8800759c
 8009754:	7e37e43c 	.word	0x7e37e43c
 8009758:	e322da11 	.word	0xe322da11
 800975c:	3f90ad3a 	.word	0x3f90ad3a
 8009760:	24760deb 	.word	0x24760deb
 8009764:	3fa97b4b 	.word	0x3fa97b4b
 8009768:	a0d03d51 	.word	0xa0d03d51
 800976c:	3fb10d66 	.word	0x3fb10d66
 8009770:	c54c206e 	.word	0xc54c206e
 8009774:	3fb745cd 	.word	0x3fb745cd
 8009778:	920083ff 	.word	0x920083ff
 800977c:	3fc24924 	.word	0x3fc24924
 8009780:	5555550d 	.word	0x5555550d
 8009784:	3fd55555 	.word	0x3fd55555
 8009788:	2c6a6c2f 	.word	0x2c6a6c2f
 800978c:	bfa2b444 	.word	0xbfa2b444
 8009790:	52defd9a 	.word	0x52defd9a
 8009794:	3fadde2d 	.word	0x3fadde2d
 8009798:	af749a6d 	.word	0xaf749a6d
 800979c:	3fb3b0f2 	.word	0x3fb3b0f2
 80097a0:	fe231671 	.word	0xfe231671
 80097a4:	3fbc71c6 	.word	0x3fbc71c6
 80097a8:	9998ebc4 	.word	0x9998ebc4
 80097ac:	3fc99999 	.word	0x3fc99999
 80097b0:	54442d18 	.word	0x54442d18
 80097b4:	bff921fb 	.word	0xbff921fb
 80097b8:	440fffff 	.word	0x440fffff
 80097bc:	7ff00000 	.word	0x7ff00000
 80097c0:	3fdbffff 	.word	0x3fdbffff
 80097c4:	3ff00000 	.word	0x3ff00000
 80097c8:	3ff2ffff 	.word	0x3ff2ffff
 80097cc:	40037fff 	.word	0x40037fff
 80097d0:	3ff80000 	.word	0x3ff80000
 80097d4:	bff00000 	.word	0xbff00000
 80097d8:	0800e6c0 	.word	0x0800e6c0
 80097dc:	0800e6a0 	.word	0x0800e6a0

080097e0 <fabs>:
 80097e0:	ec51 0b10 	vmov	r0, r1, d0
 80097e4:	ee10 2a10 	vmov	r2, s0
 80097e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80097ec:	ec43 2b10 	vmov	d0, r2, r3
 80097f0:	4770      	bx	lr

080097f2 <finite>:
 80097f2:	ee10 3a90 	vmov	r3, s1
 80097f6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80097fa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80097fe:	0fc0      	lsrs	r0, r0, #31
 8009800:	4770      	bx	lr

08009802 <matherr>:
 8009802:	2000      	movs	r0, #0
 8009804:	4770      	bx	lr
	...

08009808 <nan>:
 8009808:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009810 <nan+0x8>
 800980c:	4770      	bx	lr
 800980e:	bf00      	nop
 8009810:	00000000 	.word	0x00000000
 8009814:	7ff80000 	.word	0x7ff80000

08009818 <rint>:
 8009818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800981a:	ec51 0b10 	vmov	r0, r1, d0
 800981e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009822:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009826:	2e13      	cmp	r6, #19
 8009828:	460b      	mov	r3, r1
 800982a:	ee10 4a10 	vmov	r4, s0
 800982e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009832:	dc56      	bgt.n	80098e2 <rint+0xca>
 8009834:	2e00      	cmp	r6, #0
 8009836:	da2b      	bge.n	8009890 <rint+0x78>
 8009838:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800983c:	4302      	orrs	r2, r0
 800983e:	d023      	beq.n	8009888 <rint+0x70>
 8009840:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009844:	4302      	orrs	r2, r0
 8009846:	4254      	negs	r4, r2
 8009848:	4314      	orrs	r4, r2
 800984a:	0c4b      	lsrs	r3, r1, #17
 800984c:	0b24      	lsrs	r4, r4, #12
 800984e:	045b      	lsls	r3, r3, #17
 8009850:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009854:	ea44 0103 	orr.w	r1, r4, r3
 8009858:	460b      	mov	r3, r1
 800985a:	492f      	ldr	r1, [pc, #188]	; (8009918 <rint+0x100>)
 800985c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009860:	e9d1 6700 	ldrd	r6, r7, [r1]
 8009864:	4602      	mov	r2, r0
 8009866:	4639      	mov	r1, r7
 8009868:	4630      	mov	r0, r6
 800986a:	f7f6 fd17 	bl	800029c <__adddf3>
 800986e:	e9cd 0100 	strd	r0, r1, [sp]
 8009872:	463b      	mov	r3, r7
 8009874:	4632      	mov	r2, r6
 8009876:	e9dd 0100 	ldrd	r0, r1, [sp]
 800987a:	f7f6 fd0d 	bl	8000298 <__aeabi_dsub>
 800987e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009882:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009886:	4639      	mov	r1, r7
 8009888:	ec41 0b10 	vmov	d0, r0, r1
 800988c:	b003      	add	sp, #12
 800988e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009890:	4a22      	ldr	r2, [pc, #136]	; (800991c <rint+0x104>)
 8009892:	4132      	asrs	r2, r6
 8009894:	ea01 0702 	and.w	r7, r1, r2
 8009898:	4307      	orrs	r7, r0
 800989a:	d0f5      	beq.n	8009888 <rint+0x70>
 800989c:	0852      	lsrs	r2, r2, #1
 800989e:	4011      	ands	r1, r2
 80098a0:	430c      	orrs	r4, r1
 80098a2:	d00b      	beq.n	80098bc <rint+0xa4>
 80098a4:	ea23 0202 	bic.w	r2, r3, r2
 80098a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80098ac:	2e13      	cmp	r6, #19
 80098ae:	fa43 f306 	asr.w	r3, r3, r6
 80098b2:	bf0c      	ite	eq
 80098b4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80098b8:	2400      	movne	r4, #0
 80098ba:	4313      	orrs	r3, r2
 80098bc:	4916      	ldr	r1, [pc, #88]	; (8009918 <rint+0x100>)
 80098be:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80098c2:	4622      	mov	r2, r4
 80098c4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80098c8:	4620      	mov	r0, r4
 80098ca:	4629      	mov	r1, r5
 80098cc:	f7f6 fce6 	bl	800029c <__adddf3>
 80098d0:	e9cd 0100 	strd	r0, r1, [sp]
 80098d4:	4622      	mov	r2, r4
 80098d6:	462b      	mov	r3, r5
 80098d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098dc:	f7f6 fcdc 	bl	8000298 <__aeabi_dsub>
 80098e0:	e7d2      	b.n	8009888 <rint+0x70>
 80098e2:	2e33      	cmp	r6, #51	; 0x33
 80098e4:	dd07      	ble.n	80098f6 <rint+0xde>
 80098e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80098ea:	d1cd      	bne.n	8009888 <rint+0x70>
 80098ec:	ee10 2a10 	vmov	r2, s0
 80098f0:	f7f6 fcd4 	bl	800029c <__adddf3>
 80098f4:	e7c8      	b.n	8009888 <rint+0x70>
 80098f6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80098fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098fe:	40f2      	lsrs	r2, r6
 8009900:	4210      	tst	r0, r2
 8009902:	d0c1      	beq.n	8009888 <rint+0x70>
 8009904:	0852      	lsrs	r2, r2, #1
 8009906:	4210      	tst	r0, r2
 8009908:	bf1f      	itttt	ne
 800990a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800990e:	ea20 0202 	bicne.w	r2, r0, r2
 8009912:	4134      	asrne	r4, r6
 8009914:	4314      	orrne	r4, r2
 8009916:	e7d1      	b.n	80098bc <rint+0xa4>
 8009918:	0800e6e0 	.word	0x0800e6e0
 800991c:	000fffff 	.word	0x000fffff

08009920 <scalbn>:
 8009920:	b570      	push	{r4, r5, r6, lr}
 8009922:	ec55 4b10 	vmov	r4, r5, d0
 8009926:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800992a:	4606      	mov	r6, r0
 800992c:	462b      	mov	r3, r5
 800992e:	b9aa      	cbnz	r2, 800995c <scalbn+0x3c>
 8009930:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009934:	4323      	orrs	r3, r4
 8009936:	d03b      	beq.n	80099b0 <scalbn+0x90>
 8009938:	4b31      	ldr	r3, [pc, #196]	; (8009a00 <scalbn+0xe0>)
 800993a:	4629      	mov	r1, r5
 800993c:	2200      	movs	r2, #0
 800993e:	ee10 0a10 	vmov	r0, s0
 8009942:	f7f6 fe61 	bl	8000608 <__aeabi_dmul>
 8009946:	4b2f      	ldr	r3, [pc, #188]	; (8009a04 <scalbn+0xe4>)
 8009948:	429e      	cmp	r6, r3
 800994a:	4604      	mov	r4, r0
 800994c:	460d      	mov	r5, r1
 800994e:	da12      	bge.n	8009976 <scalbn+0x56>
 8009950:	a327      	add	r3, pc, #156	; (adr r3, 80099f0 <scalbn+0xd0>)
 8009952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009956:	f7f6 fe57 	bl	8000608 <__aeabi_dmul>
 800995a:	e009      	b.n	8009970 <scalbn+0x50>
 800995c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009960:	428a      	cmp	r2, r1
 8009962:	d10c      	bne.n	800997e <scalbn+0x5e>
 8009964:	ee10 2a10 	vmov	r2, s0
 8009968:	4620      	mov	r0, r4
 800996a:	4629      	mov	r1, r5
 800996c:	f7f6 fc96 	bl	800029c <__adddf3>
 8009970:	4604      	mov	r4, r0
 8009972:	460d      	mov	r5, r1
 8009974:	e01c      	b.n	80099b0 <scalbn+0x90>
 8009976:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800997a:	460b      	mov	r3, r1
 800997c:	3a36      	subs	r2, #54	; 0x36
 800997e:	4432      	add	r2, r6
 8009980:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009984:	428a      	cmp	r2, r1
 8009986:	dd0b      	ble.n	80099a0 <scalbn+0x80>
 8009988:	ec45 4b11 	vmov	d1, r4, r5
 800998c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80099f8 <scalbn+0xd8>
 8009990:	f000 f83c 	bl	8009a0c <copysign>
 8009994:	a318      	add	r3, pc, #96	; (adr r3, 80099f8 <scalbn+0xd8>)
 8009996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999a:	ec51 0b10 	vmov	r0, r1, d0
 800999e:	e7da      	b.n	8009956 <scalbn+0x36>
 80099a0:	2a00      	cmp	r2, #0
 80099a2:	dd08      	ble.n	80099b6 <scalbn+0x96>
 80099a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80099a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80099ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80099b0:	ec45 4b10 	vmov	d0, r4, r5
 80099b4:	bd70      	pop	{r4, r5, r6, pc}
 80099b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80099ba:	da0d      	bge.n	80099d8 <scalbn+0xb8>
 80099bc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80099c0:	429e      	cmp	r6, r3
 80099c2:	ec45 4b11 	vmov	d1, r4, r5
 80099c6:	dce1      	bgt.n	800998c <scalbn+0x6c>
 80099c8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80099f0 <scalbn+0xd0>
 80099cc:	f000 f81e 	bl	8009a0c <copysign>
 80099d0:	a307      	add	r3, pc, #28	; (adr r3, 80099f0 <scalbn+0xd0>)
 80099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d6:	e7e0      	b.n	800999a <scalbn+0x7a>
 80099d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80099dc:	3236      	adds	r2, #54	; 0x36
 80099de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80099e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80099e6:	4620      	mov	r0, r4
 80099e8:	4629      	mov	r1, r5
 80099ea:	2200      	movs	r2, #0
 80099ec:	4b06      	ldr	r3, [pc, #24]	; (8009a08 <scalbn+0xe8>)
 80099ee:	e7b2      	b.n	8009956 <scalbn+0x36>
 80099f0:	c2f8f359 	.word	0xc2f8f359
 80099f4:	01a56e1f 	.word	0x01a56e1f
 80099f8:	8800759c 	.word	0x8800759c
 80099fc:	7e37e43c 	.word	0x7e37e43c
 8009a00:	43500000 	.word	0x43500000
 8009a04:	ffff3cb0 	.word	0xffff3cb0
 8009a08:	3c900000 	.word	0x3c900000

08009a0c <copysign>:
 8009a0c:	ec51 0b10 	vmov	r0, r1, d0
 8009a10:	ee11 0a90 	vmov	r0, s3
 8009a14:	ee10 2a10 	vmov	r2, s0
 8009a18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009a1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009a20:	ea41 0300 	orr.w	r3, r1, r0
 8009a24:	ec43 2b10 	vmov	d0, r2, r3
 8009a28:	4770      	bx	lr
	...

08009a2c <__errno>:
 8009a2c:	4b01      	ldr	r3, [pc, #4]	; (8009a34 <__errno+0x8>)
 8009a2e:	6818      	ldr	r0, [r3, #0]
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	20000080 	.word	0x20000080

08009a38 <__libc_init_array>:
 8009a38:	b570      	push	{r4, r5, r6, lr}
 8009a3a:	4e0d      	ldr	r6, [pc, #52]	; (8009a70 <__libc_init_array+0x38>)
 8009a3c:	4c0d      	ldr	r4, [pc, #52]	; (8009a74 <__libc_init_array+0x3c>)
 8009a3e:	1ba4      	subs	r4, r4, r6
 8009a40:	10a4      	asrs	r4, r4, #2
 8009a42:	2500      	movs	r5, #0
 8009a44:	42a5      	cmp	r5, r4
 8009a46:	d109      	bne.n	8009a5c <__libc_init_array+0x24>
 8009a48:	4e0b      	ldr	r6, [pc, #44]	; (8009a78 <__libc_init_array+0x40>)
 8009a4a:	4c0c      	ldr	r4, [pc, #48]	; (8009a7c <__libc_init_array+0x44>)
 8009a4c:	f004 fa5e 	bl	800df0c <_init>
 8009a50:	1ba4      	subs	r4, r4, r6
 8009a52:	10a4      	asrs	r4, r4, #2
 8009a54:	2500      	movs	r5, #0
 8009a56:	42a5      	cmp	r5, r4
 8009a58:	d105      	bne.n	8009a66 <__libc_init_array+0x2e>
 8009a5a:	bd70      	pop	{r4, r5, r6, pc}
 8009a5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a60:	4798      	blx	r3
 8009a62:	3501      	adds	r5, #1
 8009a64:	e7ee      	b.n	8009a44 <__libc_init_array+0xc>
 8009a66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a6a:	4798      	blx	r3
 8009a6c:	3501      	adds	r5, #1
 8009a6e:	e7f2      	b.n	8009a56 <__libc_init_array+0x1e>
 8009a70:	0800ea18 	.word	0x0800ea18
 8009a74:	0800ea18 	.word	0x0800ea18
 8009a78:	0800ea18 	.word	0x0800ea18
 8009a7c:	0800ea1c 	.word	0x0800ea1c

08009a80 <memcpy>:
 8009a80:	b510      	push	{r4, lr}
 8009a82:	1e43      	subs	r3, r0, #1
 8009a84:	440a      	add	r2, r1
 8009a86:	4291      	cmp	r1, r2
 8009a88:	d100      	bne.n	8009a8c <memcpy+0xc>
 8009a8a:	bd10      	pop	{r4, pc}
 8009a8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a94:	e7f7      	b.n	8009a86 <memcpy+0x6>

08009a96 <memset>:
 8009a96:	4402      	add	r2, r0
 8009a98:	4603      	mov	r3, r0
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d100      	bne.n	8009aa0 <memset+0xa>
 8009a9e:	4770      	bx	lr
 8009aa0:	f803 1b01 	strb.w	r1, [r3], #1
 8009aa4:	e7f9      	b.n	8009a9a <memset+0x4>

08009aa6 <__cvt>:
 8009aa6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009aaa:	ec55 4b10 	vmov	r4, r5, d0
 8009aae:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009ab0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009ab4:	2d00      	cmp	r5, #0
 8009ab6:	460e      	mov	r6, r1
 8009ab8:	4691      	mov	r9, r2
 8009aba:	4619      	mov	r1, r3
 8009abc:	bfb8      	it	lt
 8009abe:	4622      	movlt	r2, r4
 8009ac0:	462b      	mov	r3, r5
 8009ac2:	f027 0720 	bic.w	r7, r7, #32
 8009ac6:	bfbb      	ittet	lt
 8009ac8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009acc:	461d      	movlt	r5, r3
 8009ace:	2300      	movge	r3, #0
 8009ad0:	232d      	movlt	r3, #45	; 0x2d
 8009ad2:	bfb8      	it	lt
 8009ad4:	4614      	movlt	r4, r2
 8009ad6:	2f46      	cmp	r7, #70	; 0x46
 8009ad8:	700b      	strb	r3, [r1, #0]
 8009ada:	d004      	beq.n	8009ae6 <__cvt+0x40>
 8009adc:	2f45      	cmp	r7, #69	; 0x45
 8009ade:	d100      	bne.n	8009ae2 <__cvt+0x3c>
 8009ae0:	3601      	adds	r6, #1
 8009ae2:	2102      	movs	r1, #2
 8009ae4:	e000      	b.n	8009ae8 <__cvt+0x42>
 8009ae6:	2103      	movs	r1, #3
 8009ae8:	ab03      	add	r3, sp, #12
 8009aea:	9301      	str	r3, [sp, #4]
 8009aec:	ab02      	add	r3, sp, #8
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	4632      	mov	r2, r6
 8009af2:	4653      	mov	r3, sl
 8009af4:	ec45 4b10 	vmov	d0, r4, r5
 8009af8:	f001 feb2 	bl	800b860 <_dtoa_r>
 8009afc:	2f47      	cmp	r7, #71	; 0x47
 8009afe:	4680      	mov	r8, r0
 8009b00:	d102      	bne.n	8009b08 <__cvt+0x62>
 8009b02:	f019 0f01 	tst.w	r9, #1
 8009b06:	d026      	beq.n	8009b56 <__cvt+0xb0>
 8009b08:	2f46      	cmp	r7, #70	; 0x46
 8009b0a:	eb08 0906 	add.w	r9, r8, r6
 8009b0e:	d111      	bne.n	8009b34 <__cvt+0x8e>
 8009b10:	f898 3000 	ldrb.w	r3, [r8]
 8009b14:	2b30      	cmp	r3, #48	; 0x30
 8009b16:	d10a      	bne.n	8009b2e <__cvt+0x88>
 8009b18:	2200      	movs	r2, #0
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	4629      	mov	r1, r5
 8009b20:	f7f6 ffda 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b24:	b918      	cbnz	r0, 8009b2e <__cvt+0x88>
 8009b26:	f1c6 0601 	rsb	r6, r6, #1
 8009b2a:	f8ca 6000 	str.w	r6, [sl]
 8009b2e:	f8da 3000 	ldr.w	r3, [sl]
 8009b32:	4499      	add	r9, r3
 8009b34:	2200      	movs	r2, #0
 8009b36:	2300      	movs	r3, #0
 8009b38:	4620      	mov	r0, r4
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	f7f6 ffcc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b40:	b938      	cbnz	r0, 8009b52 <__cvt+0xac>
 8009b42:	2230      	movs	r2, #48	; 0x30
 8009b44:	9b03      	ldr	r3, [sp, #12]
 8009b46:	454b      	cmp	r3, r9
 8009b48:	d205      	bcs.n	8009b56 <__cvt+0xb0>
 8009b4a:	1c59      	adds	r1, r3, #1
 8009b4c:	9103      	str	r1, [sp, #12]
 8009b4e:	701a      	strb	r2, [r3, #0]
 8009b50:	e7f8      	b.n	8009b44 <__cvt+0x9e>
 8009b52:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b56:	9b03      	ldr	r3, [sp, #12]
 8009b58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b5a:	eba3 0308 	sub.w	r3, r3, r8
 8009b5e:	4640      	mov	r0, r8
 8009b60:	6013      	str	r3, [r2, #0]
 8009b62:	b004      	add	sp, #16
 8009b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009b68 <__exponent>:
 8009b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b6a:	2900      	cmp	r1, #0
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	bfba      	itte	lt
 8009b70:	4249      	neglt	r1, r1
 8009b72:	232d      	movlt	r3, #45	; 0x2d
 8009b74:	232b      	movge	r3, #43	; 0x2b
 8009b76:	2909      	cmp	r1, #9
 8009b78:	f804 2b02 	strb.w	r2, [r4], #2
 8009b7c:	7043      	strb	r3, [r0, #1]
 8009b7e:	dd20      	ble.n	8009bc2 <__exponent+0x5a>
 8009b80:	f10d 0307 	add.w	r3, sp, #7
 8009b84:	461f      	mov	r7, r3
 8009b86:	260a      	movs	r6, #10
 8009b88:	fb91 f5f6 	sdiv	r5, r1, r6
 8009b8c:	fb06 1115 	mls	r1, r6, r5, r1
 8009b90:	3130      	adds	r1, #48	; 0x30
 8009b92:	2d09      	cmp	r5, #9
 8009b94:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009b98:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8009b9c:	4629      	mov	r1, r5
 8009b9e:	dc09      	bgt.n	8009bb4 <__exponent+0x4c>
 8009ba0:	3130      	adds	r1, #48	; 0x30
 8009ba2:	3b02      	subs	r3, #2
 8009ba4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009ba8:	42bb      	cmp	r3, r7
 8009baa:	4622      	mov	r2, r4
 8009bac:	d304      	bcc.n	8009bb8 <__exponent+0x50>
 8009bae:	1a10      	subs	r0, r2, r0
 8009bb0:	b003      	add	sp, #12
 8009bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	e7e7      	b.n	8009b88 <__exponent+0x20>
 8009bb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bbc:	f804 2b01 	strb.w	r2, [r4], #1
 8009bc0:	e7f2      	b.n	8009ba8 <__exponent+0x40>
 8009bc2:	2330      	movs	r3, #48	; 0x30
 8009bc4:	4419      	add	r1, r3
 8009bc6:	7083      	strb	r3, [r0, #2]
 8009bc8:	1d02      	adds	r2, r0, #4
 8009bca:	70c1      	strb	r1, [r0, #3]
 8009bcc:	e7ef      	b.n	8009bae <__exponent+0x46>
	...

08009bd0 <_printf_float>:
 8009bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd4:	b08d      	sub	sp, #52	; 0x34
 8009bd6:	460c      	mov	r4, r1
 8009bd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009bdc:	4616      	mov	r6, r2
 8009bde:	461f      	mov	r7, r3
 8009be0:	4605      	mov	r5, r0
 8009be2:	f003 f89b 	bl	800cd1c <_localeconv_r>
 8009be6:	6803      	ldr	r3, [r0, #0]
 8009be8:	9304      	str	r3, [sp, #16]
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7f6 faf8 	bl	80001e0 <strlen>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8009bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8009bf8:	9005      	str	r0, [sp, #20]
 8009bfa:	3307      	adds	r3, #7
 8009bfc:	f023 0307 	bic.w	r3, r3, #7
 8009c00:	f103 0208 	add.w	r2, r3, #8
 8009c04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009c08:	f8d4 b000 	ldr.w	fp, [r4]
 8009c0c:	f8c8 2000 	str.w	r2, [r8]
 8009c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c14:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009c18:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009c1c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c20:	9307      	str	r3, [sp, #28]
 8009c22:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c2a:	4ba7      	ldr	r3, [pc, #668]	; (8009ec8 <_printf_float+0x2f8>)
 8009c2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c30:	f7f6 ff84 	bl	8000b3c <__aeabi_dcmpun>
 8009c34:	bb70      	cbnz	r0, 8009c94 <_printf_float+0xc4>
 8009c36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c3a:	4ba3      	ldr	r3, [pc, #652]	; (8009ec8 <_printf_float+0x2f8>)
 8009c3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c40:	f7f6 ff5e 	bl	8000b00 <__aeabi_dcmple>
 8009c44:	bb30      	cbnz	r0, 8009c94 <_printf_float+0xc4>
 8009c46:	2200      	movs	r2, #0
 8009c48:	2300      	movs	r3, #0
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	4649      	mov	r1, r9
 8009c4e:	f7f6 ff4d 	bl	8000aec <__aeabi_dcmplt>
 8009c52:	b110      	cbz	r0, 8009c5a <_printf_float+0x8a>
 8009c54:	232d      	movs	r3, #45	; 0x2d
 8009c56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c5a:	4a9c      	ldr	r2, [pc, #624]	; (8009ecc <_printf_float+0x2fc>)
 8009c5c:	4b9c      	ldr	r3, [pc, #624]	; (8009ed0 <_printf_float+0x300>)
 8009c5e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009c62:	bf8c      	ite	hi
 8009c64:	4690      	movhi	r8, r2
 8009c66:	4698      	movls	r8, r3
 8009c68:	2303      	movs	r3, #3
 8009c6a:	f02b 0204 	bic.w	r2, fp, #4
 8009c6e:	6123      	str	r3, [r4, #16]
 8009c70:	6022      	str	r2, [r4, #0]
 8009c72:	f04f 0900 	mov.w	r9, #0
 8009c76:	9700      	str	r7, [sp, #0]
 8009c78:	4633      	mov	r3, r6
 8009c7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c7c:	4621      	mov	r1, r4
 8009c7e:	4628      	mov	r0, r5
 8009c80:	f000 f9e6 	bl	800a050 <_printf_common>
 8009c84:	3001      	adds	r0, #1
 8009c86:	f040 808d 	bne.w	8009da4 <_printf_float+0x1d4>
 8009c8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c8e:	b00d      	add	sp, #52	; 0x34
 8009c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c94:	4642      	mov	r2, r8
 8009c96:	464b      	mov	r3, r9
 8009c98:	4640      	mov	r0, r8
 8009c9a:	4649      	mov	r1, r9
 8009c9c:	f7f6 ff4e 	bl	8000b3c <__aeabi_dcmpun>
 8009ca0:	b110      	cbz	r0, 8009ca8 <_printf_float+0xd8>
 8009ca2:	4a8c      	ldr	r2, [pc, #560]	; (8009ed4 <_printf_float+0x304>)
 8009ca4:	4b8c      	ldr	r3, [pc, #560]	; (8009ed8 <_printf_float+0x308>)
 8009ca6:	e7da      	b.n	8009c5e <_printf_float+0x8e>
 8009ca8:	6861      	ldr	r1, [r4, #4]
 8009caa:	1c4b      	adds	r3, r1, #1
 8009cac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009cb0:	a80a      	add	r0, sp, #40	; 0x28
 8009cb2:	d13e      	bne.n	8009d32 <_printf_float+0x162>
 8009cb4:	2306      	movs	r3, #6
 8009cb6:	6063      	str	r3, [r4, #4]
 8009cb8:	2300      	movs	r3, #0
 8009cba:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009cbe:	ab09      	add	r3, sp, #36	; 0x24
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	ec49 8b10 	vmov	d0, r8, r9
 8009cc6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009cca:	6022      	str	r2, [r4, #0]
 8009ccc:	f8cd a004 	str.w	sl, [sp, #4]
 8009cd0:	6861      	ldr	r1, [r4, #4]
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	f7ff fee7 	bl	8009aa6 <__cvt>
 8009cd8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009cdc:	2b47      	cmp	r3, #71	; 0x47
 8009cde:	4680      	mov	r8, r0
 8009ce0:	d109      	bne.n	8009cf6 <_printf_float+0x126>
 8009ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ce4:	1cd8      	adds	r0, r3, #3
 8009ce6:	db02      	blt.n	8009cee <_printf_float+0x11e>
 8009ce8:	6862      	ldr	r2, [r4, #4]
 8009cea:	4293      	cmp	r3, r2
 8009cec:	dd47      	ble.n	8009d7e <_printf_float+0x1ae>
 8009cee:	f1aa 0a02 	sub.w	sl, sl, #2
 8009cf2:	fa5f fa8a 	uxtb.w	sl, sl
 8009cf6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009cfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cfc:	d824      	bhi.n	8009d48 <_printf_float+0x178>
 8009cfe:	3901      	subs	r1, #1
 8009d00:	4652      	mov	r2, sl
 8009d02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009d06:	9109      	str	r1, [sp, #36]	; 0x24
 8009d08:	f7ff ff2e 	bl	8009b68 <__exponent>
 8009d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d0e:	1813      	adds	r3, r2, r0
 8009d10:	2a01      	cmp	r2, #1
 8009d12:	4681      	mov	r9, r0
 8009d14:	6123      	str	r3, [r4, #16]
 8009d16:	dc02      	bgt.n	8009d1e <_printf_float+0x14e>
 8009d18:	6822      	ldr	r2, [r4, #0]
 8009d1a:	07d1      	lsls	r1, r2, #31
 8009d1c:	d501      	bpl.n	8009d22 <_printf_float+0x152>
 8009d1e:	3301      	adds	r3, #1
 8009d20:	6123      	str	r3, [r4, #16]
 8009d22:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d0a5      	beq.n	8009c76 <_printf_float+0xa6>
 8009d2a:	232d      	movs	r3, #45	; 0x2d
 8009d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d30:	e7a1      	b.n	8009c76 <_printf_float+0xa6>
 8009d32:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009d36:	f000 8177 	beq.w	800a028 <_printf_float+0x458>
 8009d3a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009d3e:	d1bb      	bne.n	8009cb8 <_printf_float+0xe8>
 8009d40:	2900      	cmp	r1, #0
 8009d42:	d1b9      	bne.n	8009cb8 <_printf_float+0xe8>
 8009d44:	2301      	movs	r3, #1
 8009d46:	e7b6      	b.n	8009cb6 <_printf_float+0xe6>
 8009d48:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009d4c:	d119      	bne.n	8009d82 <_printf_float+0x1b2>
 8009d4e:	2900      	cmp	r1, #0
 8009d50:	6863      	ldr	r3, [r4, #4]
 8009d52:	dd0c      	ble.n	8009d6e <_printf_float+0x19e>
 8009d54:	6121      	str	r1, [r4, #16]
 8009d56:	b913      	cbnz	r3, 8009d5e <_printf_float+0x18e>
 8009d58:	6822      	ldr	r2, [r4, #0]
 8009d5a:	07d2      	lsls	r2, r2, #31
 8009d5c:	d502      	bpl.n	8009d64 <_printf_float+0x194>
 8009d5e:	3301      	adds	r3, #1
 8009d60:	440b      	add	r3, r1
 8009d62:	6123      	str	r3, [r4, #16]
 8009d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d66:	65a3      	str	r3, [r4, #88]	; 0x58
 8009d68:	f04f 0900 	mov.w	r9, #0
 8009d6c:	e7d9      	b.n	8009d22 <_printf_float+0x152>
 8009d6e:	b913      	cbnz	r3, 8009d76 <_printf_float+0x1a6>
 8009d70:	6822      	ldr	r2, [r4, #0]
 8009d72:	07d0      	lsls	r0, r2, #31
 8009d74:	d501      	bpl.n	8009d7a <_printf_float+0x1aa>
 8009d76:	3302      	adds	r3, #2
 8009d78:	e7f3      	b.n	8009d62 <_printf_float+0x192>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e7f1      	b.n	8009d62 <_printf_float+0x192>
 8009d7e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009d82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009d86:	4293      	cmp	r3, r2
 8009d88:	db05      	blt.n	8009d96 <_printf_float+0x1c6>
 8009d8a:	6822      	ldr	r2, [r4, #0]
 8009d8c:	6123      	str	r3, [r4, #16]
 8009d8e:	07d1      	lsls	r1, r2, #31
 8009d90:	d5e8      	bpl.n	8009d64 <_printf_float+0x194>
 8009d92:	3301      	adds	r3, #1
 8009d94:	e7e5      	b.n	8009d62 <_printf_float+0x192>
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	bfd4      	ite	le
 8009d9a:	f1c3 0302 	rsble	r3, r3, #2
 8009d9e:	2301      	movgt	r3, #1
 8009da0:	4413      	add	r3, r2
 8009da2:	e7de      	b.n	8009d62 <_printf_float+0x192>
 8009da4:	6823      	ldr	r3, [r4, #0]
 8009da6:	055a      	lsls	r2, r3, #21
 8009da8:	d407      	bmi.n	8009dba <_printf_float+0x1ea>
 8009daa:	6923      	ldr	r3, [r4, #16]
 8009dac:	4642      	mov	r2, r8
 8009dae:	4631      	mov	r1, r6
 8009db0:	4628      	mov	r0, r5
 8009db2:	47b8      	blx	r7
 8009db4:	3001      	adds	r0, #1
 8009db6:	d12b      	bne.n	8009e10 <_printf_float+0x240>
 8009db8:	e767      	b.n	8009c8a <_printf_float+0xba>
 8009dba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009dbe:	f240 80dc 	bls.w	8009f7a <_printf_float+0x3aa>
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009dca:	f7f6 fe85 	bl	8000ad8 <__aeabi_dcmpeq>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	d033      	beq.n	8009e3a <_printf_float+0x26a>
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	4a41      	ldr	r2, [pc, #260]	; (8009edc <_printf_float+0x30c>)
 8009dd6:	4631      	mov	r1, r6
 8009dd8:	4628      	mov	r0, r5
 8009dda:	47b8      	blx	r7
 8009ddc:	3001      	adds	r0, #1
 8009dde:	f43f af54 	beq.w	8009c8a <_printf_float+0xba>
 8009de2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009de6:	429a      	cmp	r2, r3
 8009de8:	db02      	blt.n	8009df0 <_printf_float+0x220>
 8009dea:	6823      	ldr	r3, [r4, #0]
 8009dec:	07d8      	lsls	r0, r3, #31
 8009dee:	d50f      	bpl.n	8009e10 <_printf_float+0x240>
 8009df0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009df4:	4631      	mov	r1, r6
 8009df6:	4628      	mov	r0, r5
 8009df8:	47b8      	blx	r7
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	f43f af45 	beq.w	8009c8a <_printf_float+0xba>
 8009e00:	f04f 0800 	mov.w	r8, #0
 8009e04:	f104 091a 	add.w	r9, r4, #26
 8009e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	4543      	cmp	r3, r8
 8009e0e:	dc09      	bgt.n	8009e24 <_printf_float+0x254>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	079b      	lsls	r3, r3, #30
 8009e14:	f100 8103 	bmi.w	800a01e <_printf_float+0x44e>
 8009e18:	68e0      	ldr	r0, [r4, #12]
 8009e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e1c:	4298      	cmp	r0, r3
 8009e1e:	bfb8      	it	lt
 8009e20:	4618      	movlt	r0, r3
 8009e22:	e734      	b.n	8009c8e <_printf_float+0xbe>
 8009e24:	2301      	movs	r3, #1
 8009e26:	464a      	mov	r2, r9
 8009e28:	4631      	mov	r1, r6
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	47b8      	blx	r7
 8009e2e:	3001      	adds	r0, #1
 8009e30:	f43f af2b 	beq.w	8009c8a <_printf_float+0xba>
 8009e34:	f108 0801 	add.w	r8, r8, #1
 8009e38:	e7e6      	b.n	8009e08 <_printf_float+0x238>
 8009e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	dc2b      	bgt.n	8009e98 <_printf_float+0x2c8>
 8009e40:	2301      	movs	r3, #1
 8009e42:	4a26      	ldr	r2, [pc, #152]	; (8009edc <_printf_float+0x30c>)
 8009e44:	4631      	mov	r1, r6
 8009e46:	4628      	mov	r0, r5
 8009e48:	47b8      	blx	r7
 8009e4a:	3001      	adds	r0, #1
 8009e4c:	f43f af1d 	beq.w	8009c8a <_printf_float+0xba>
 8009e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e52:	b923      	cbnz	r3, 8009e5e <_printf_float+0x28e>
 8009e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e56:	b913      	cbnz	r3, 8009e5e <_printf_float+0x28e>
 8009e58:	6823      	ldr	r3, [r4, #0]
 8009e5a:	07d9      	lsls	r1, r3, #31
 8009e5c:	d5d8      	bpl.n	8009e10 <_printf_float+0x240>
 8009e5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e62:	4631      	mov	r1, r6
 8009e64:	4628      	mov	r0, r5
 8009e66:	47b8      	blx	r7
 8009e68:	3001      	adds	r0, #1
 8009e6a:	f43f af0e 	beq.w	8009c8a <_printf_float+0xba>
 8009e6e:	f04f 0900 	mov.w	r9, #0
 8009e72:	f104 0a1a 	add.w	sl, r4, #26
 8009e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e78:	425b      	negs	r3, r3
 8009e7a:	454b      	cmp	r3, r9
 8009e7c:	dc01      	bgt.n	8009e82 <_printf_float+0x2b2>
 8009e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e80:	e794      	b.n	8009dac <_printf_float+0x1dc>
 8009e82:	2301      	movs	r3, #1
 8009e84:	4652      	mov	r2, sl
 8009e86:	4631      	mov	r1, r6
 8009e88:	4628      	mov	r0, r5
 8009e8a:	47b8      	blx	r7
 8009e8c:	3001      	adds	r0, #1
 8009e8e:	f43f aefc 	beq.w	8009c8a <_printf_float+0xba>
 8009e92:	f109 0901 	add.w	r9, r9, #1
 8009e96:	e7ee      	b.n	8009e76 <_printf_float+0x2a6>
 8009e98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	bfa8      	it	ge
 8009ea0:	461a      	movge	r2, r3
 8009ea2:	2a00      	cmp	r2, #0
 8009ea4:	4691      	mov	r9, r2
 8009ea6:	dd07      	ble.n	8009eb8 <_printf_float+0x2e8>
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	4631      	mov	r1, r6
 8009eac:	4642      	mov	r2, r8
 8009eae:	4628      	mov	r0, r5
 8009eb0:	47b8      	blx	r7
 8009eb2:	3001      	adds	r0, #1
 8009eb4:	f43f aee9 	beq.w	8009c8a <_printf_float+0xba>
 8009eb8:	f104 031a 	add.w	r3, r4, #26
 8009ebc:	f04f 0b00 	mov.w	fp, #0
 8009ec0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ec4:	9306      	str	r3, [sp, #24]
 8009ec6:	e015      	b.n	8009ef4 <_printf_float+0x324>
 8009ec8:	7fefffff 	.word	0x7fefffff
 8009ecc:	0800e6f8 	.word	0x0800e6f8
 8009ed0:	0800e6f4 	.word	0x0800e6f4
 8009ed4:	0800e700 	.word	0x0800e700
 8009ed8:	0800e6fc 	.word	0x0800e6fc
 8009edc:	0800e704 	.word	0x0800e704
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	9a06      	ldr	r2, [sp, #24]
 8009ee4:	4631      	mov	r1, r6
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	47b8      	blx	r7
 8009eea:	3001      	adds	r0, #1
 8009eec:	f43f aecd 	beq.w	8009c8a <_printf_float+0xba>
 8009ef0:	f10b 0b01 	add.w	fp, fp, #1
 8009ef4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009ef8:	ebaa 0309 	sub.w	r3, sl, r9
 8009efc:	455b      	cmp	r3, fp
 8009efe:	dcef      	bgt.n	8009ee0 <_printf_float+0x310>
 8009f00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f04:	429a      	cmp	r2, r3
 8009f06:	44d0      	add	r8, sl
 8009f08:	db15      	blt.n	8009f36 <_printf_float+0x366>
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	07da      	lsls	r2, r3, #31
 8009f0e:	d412      	bmi.n	8009f36 <_printf_float+0x366>
 8009f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f14:	eba3 020a 	sub.w	r2, r3, sl
 8009f18:	eba3 0a01 	sub.w	sl, r3, r1
 8009f1c:	4592      	cmp	sl, r2
 8009f1e:	bfa8      	it	ge
 8009f20:	4692      	movge	sl, r2
 8009f22:	f1ba 0f00 	cmp.w	sl, #0
 8009f26:	dc0e      	bgt.n	8009f46 <_printf_float+0x376>
 8009f28:	f04f 0800 	mov.w	r8, #0
 8009f2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f30:	f104 091a 	add.w	r9, r4, #26
 8009f34:	e019      	b.n	8009f6a <_printf_float+0x39a>
 8009f36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f3a:	4631      	mov	r1, r6
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	47b8      	blx	r7
 8009f40:	3001      	adds	r0, #1
 8009f42:	d1e5      	bne.n	8009f10 <_printf_float+0x340>
 8009f44:	e6a1      	b.n	8009c8a <_printf_float+0xba>
 8009f46:	4653      	mov	r3, sl
 8009f48:	4642      	mov	r2, r8
 8009f4a:	4631      	mov	r1, r6
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	47b8      	blx	r7
 8009f50:	3001      	adds	r0, #1
 8009f52:	d1e9      	bne.n	8009f28 <_printf_float+0x358>
 8009f54:	e699      	b.n	8009c8a <_printf_float+0xba>
 8009f56:	2301      	movs	r3, #1
 8009f58:	464a      	mov	r2, r9
 8009f5a:	4631      	mov	r1, r6
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	47b8      	blx	r7
 8009f60:	3001      	adds	r0, #1
 8009f62:	f43f ae92 	beq.w	8009c8a <_printf_float+0xba>
 8009f66:	f108 0801 	add.w	r8, r8, #1
 8009f6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f6e:	1a9b      	subs	r3, r3, r2
 8009f70:	eba3 030a 	sub.w	r3, r3, sl
 8009f74:	4543      	cmp	r3, r8
 8009f76:	dcee      	bgt.n	8009f56 <_printf_float+0x386>
 8009f78:	e74a      	b.n	8009e10 <_printf_float+0x240>
 8009f7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f7c:	2a01      	cmp	r2, #1
 8009f7e:	dc01      	bgt.n	8009f84 <_printf_float+0x3b4>
 8009f80:	07db      	lsls	r3, r3, #31
 8009f82:	d53a      	bpl.n	8009ffa <_printf_float+0x42a>
 8009f84:	2301      	movs	r3, #1
 8009f86:	4642      	mov	r2, r8
 8009f88:	4631      	mov	r1, r6
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	47b8      	blx	r7
 8009f8e:	3001      	adds	r0, #1
 8009f90:	f43f ae7b 	beq.w	8009c8a <_printf_float+0xba>
 8009f94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f98:	4631      	mov	r1, r6
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	47b8      	blx	r7
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	f108 0801 	add.w	r8, r8, #1
 8009fa4:	f43f ae71 	beq.w	8009c8a <_printf_float+0xba>
 8009fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009faa:	2200      	movs	r2, #0
 8009fac:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8009fb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	f7f6 fd8f 	bl	8000ad8 <__aeabi_dcmpeq>
 8009fba:	b9c8      	cbnz	r0, 8009ff0 <_printf_float+0x420>
 8009fbc:	4653      	mov	r3, sl
 8009fbe:	4642      	mov	r2, r8
 8009fc0:	4631      	mov	r1, r6
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	47b8      	blx	r7
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	d10e      	bne.n	8009fe8 <_printf_float+0x418>
 8009fca:	e65e      	b.n	8009c8a <_printf_float+0xba>
 8009fcc:	2301      	movs	r3, #1
 8009fce:	4652      	mov	r2, sl
 8009fd0:	4631      	mov	r1, r6
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	47b8      	blx	r7
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	f43f ae57 	beq.w	8009c8a <_printf_float+0xba>
 8009fdc:	f108 0801 	add.w	r8, r8, #1
 8009fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	4543      	cmp	r3, r8
 8009fe6:	dcf1      	bgt.n	8009fcc <_printf_float+0x3fc>
 8009fe8:	464b      	mov	r3, r9
 8009fea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009fee:	e6de      	b.n	8009dae <_printf_float+0x1de>
 8009ff0:	f04f 0800 	mov.w	r8, #0
 8009ff4:	f104 0a1a 	add.w	sl, r4, #26
 8009ff8:	e7f2      	b.n	8009fe0 <_printf_float+0x410>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e7df      	b.n	8009fbe <_printf_float+0x3ee>
 8009ffe:	2301      	movs	r3, #1
 800a000:	464a      	mov	r2, r9
 800a002:	4631      	mov	r1, r6
 800a004:	4628      	mov	r0, r5
 800a006:	47b8      	blx	r7
 800a008:	3001      	adds	r0, #1
 800a00a:	f43f ae3e 	beq.w	8009c8a <_printf_float+0xba>
 800a00e:	f108 0801 	add.w	r8, r8, #1
 800a012:	68e3      	ldr	r3, [r4, #12]
 800a014:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a016:	1a9b      	subs	r3, r3, r2
 800a018:	4543      	cmp	r3, r8
 800a01a:	dcf0      	bgt.n	8009ffe <_printf_float+0x42e>
 800a01c:	e6fc      	b.n	8009e18 <_printf_float+0x248>
 800a01e:	f04f 0800 	mov.w	r8, #0
 800a022:	f104 0919 	add.w	r9, r4, #25
 800a026:	e7f4      	b.n	800a012 <_printf_float+0x442>
 800a028:	2900      	cmp	r1, #0
 800a02a:	f43f ae8b 	beq.w	8009d44 <_printf_float+0x174>
 800a02e:	2300      	movs	r3, #0
 800a030:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a034:	ab09      	add	r3, sp, #36	; 0x24
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	ec49 8b10 	vmov	d0, r8, r9
 800a03c:	6022      	str	r2, [r4, #0]
 800a03e:	f8cd a004 	str.w	sl, [sp, #4]
 800a042:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a046:	4628      	mov	r0, r5
 800a048:	f7ff fd2d 	bl	8009aa6 <__cvt>
 800a04c:	4680      	mov	r8, r0
 800a04e:	e648      	b.n	8009ce2 <_printf_float+0x112>

0800a050 <_printf_common>:
 800a050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a054:	4691      	mov	r9, r2
 800a056:	461f      	mov	r7, r3
 800a058:	688a      	ldr	r2, [r1, #8]
 800a05a:	690b      	ldr	r3, [r1, #16]
 800a05c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a060:	4293      	cmp	r3, r2
 800a062:	bfb8      	it	lt
 800a064:	4613      	movlt	r3, r2
 800a066:	f8c9 3000 	str.w	r3, [r9]
 800a06a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a06e:	4606      	mov	r6, r0
 800a070:	460c      	mov	r4, r1
 800a072:	b112      	cbz	r2, 800a07a <_printf_common+0x2a>
 800a074:	3301      	adds	r3, #1
 800a076:	f8c9 3000 	str.w	r3, [r9]
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	0699      	lsls	r1, r3, #26
 800a07e:	bf42      	ittt	mi
 800a080:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a084:	3302      	addmi	r3, #2
 800a086:	f8c9 3000 	strmi.w	r3, [r9]
 800a08a:	6825      	ldr	r5, [r4, #0]
 800a08c:	f015 0506 	ands.w	r5, r5, #6
 800a090:	d107      	bne.n	800a0a2 <_printf_common+0x52>
 800a092:	f104 0a19 	add.w	sl, r4, #25
 800a096:	68e3      	ldr	r3, [r4, #12]
 800a098:	f8d9 2000 	ldr.w	r2, [r9]
 800a09c:	1a9b      	subs	r3, r3, r2
 800a09e:	42ab      	cmp	r3, r5
 800a0a0:	dc28      	bgt.n	800a0f4 <_printf_common+0xa4>
 800a0a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a0a6:	6822      	ldr	r2, [r4, #0]
 800a0a8:	3300      	adds	r3, #0
 800a0aa:	bf18      	it	ne
 800a0ac:	2301      	movne	r3, #1
 800a0ae:	0692      	lsls	r2, r2, #26
 800a0b0:	d42d      	bmi.n	800a10e <_printf_common+0xbe>
 800a0b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0b6:	4639      	mov	r1, r7
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	47c0      	blx	r8
 800a0bc:	3001      	adds	r0, #1
 800a0be:	d020      	beq.n	800a102 <_printf_common+0xb2>
 800a0c0:	6823      	ldr	r3, [r4, #0]
 800a0c2:	68e5      	ldr	r5, [r4, #12]
 800a0c4:	f8d9 2000 	ldr.w	r2, [r9]
 800a0c8:	f003 0306 	and.w	r3, r3, #6
 800a0cc:	2b04      	cmp	r3, #4
 800a0ce:	bf08      	it	eq
 800a0d0:	1aad      	subeq	r5, r5, r2
 800a0d2:	68a3      	ldr	r3, [r4, #8]
 800a0d4:	6922      	ldr	r2, [r4, #16]
 800a0d6:	bf0c      	ite	eq
 800a0d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0dc:	2500      	movne	r5, #0
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	bfc4      	itt	gt
 800a0e2:	1a9b      	subgt	r3, r3, r2
 800a0e4:	18ed      	addgt	r5, r5, r3
 800a0e6:	f04f 0900 	mov.w	r9, #0
 800a0ea:	341a      	adds	r4, #26
 800a0ec:	454d      	cmp	r5, r9
 800a0ee:	d11a      	bne.n	800a126 <_printf_common+0xd6>
 800a0f0:	2000      	movs	r0, #0
 800a0f2:	e008      	b.n	800a106 <_printf_common+0xb6>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	4652      	mov	r2, sl
 800a0f8:	4639      	mov	r1, r7
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	47c0      	blx	r8
 800a0fe:	3001      	adds	r0, #1
 800a100:	d103      	bne.n	800a10a <_printf_common+0xba>
 800a102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a10a:	3501      	adds	r5, #1
 800a10c:	e7c3      	b.n	800a096 <_printf_common+0x46>
 800a10e:	18e1      	adds	r1, r4, r3
 800a110:	1c5a      	adds	r2, r3, #1
 800a112:	2030      	movs	r0, #48	; 0x30
 800a114:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a118:	4422      	add	r2, r4
 800a11a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a11e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a122:	3302      	adds	r3, #2
 800a124:	e7c5      	b.n	800a0b2 <_printf_common+0x62>
 800a126:	2301      	movs	r3, #1
 800a128:	4622      	mov	r2, r4
 800a12a:	4639      	mov	r1, r7
 800a12c:	4630      	mov	r0, r6
 800a12e:	47c0      	blx	r8
 800a130:	3001      	adds	r0, #1
 800a132:	d0e6      	beq.n	800a102 <_printf_common+0xb2>
 800a134:	f109 0901 	add.w	r9, r9, #1
 800a138:	e7d8      	b.n	800a0ec <_printf_common+0x9c>
	...

0800a13c <_printf_i>:
 800a13c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a140:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a144:	460c      	mov	r4, r1
 800a146:	7e09      	ldrb	r1, [r1, #24]
 800a148:	b085      	sub	sp, #20
 800a14a:	296e      	cmp	r1, #110	; 0x6e
 800a14c:	4617      	mov	r7, r2
 800a14e:	4606      	mov	r6, r0
 800a150:	4698      	mov	r8, r3
 800a152:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a154:	f000 80b3 	beq.w	800a2be <_printf_i+0x182>
 800a158:	d822      	bhi.n	800a1a0 <_printf_i+0x64>
 800a15a:	2963      	cmp	r1, #99	; 0x63
 800a15c:	d036      	beq.n	800a1cc <_printf_i+0x90>
 800a15e:	d80a      	bhi.n	800a176 <_printf_i+0x3a>
 800a160:	2900      	cmp	r1, #0
 800a162:	f000 80b9 	beq.w	800a2d8 <_printf_i+0x19c>
 800a166:	2958      	cmp	r1, #88	; 0x58
 800a168:	f000 8083 	beq.w	800a272 <_printf_i+0x136>
 800a16c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a170:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a174:	e032      	b.n	800a1dc <_printf_i+0xa0>
 800a176:	2964      	cmp	r1, #100	; 0x64
 800a178:	d001      	beq.n	800a17e <_printf_i+0x42>
 800a17a:	2969      	cmp	r1, #105	; 0x69
 800a17c:	d1f6      	bne.n	800a16c <_printf_i+0x30>
 800a17e:	6820      	ldr	r0, [r4, #0]
 800a180:	6813      	ldr	r3, [r2, #0]
 800a182:	0605      	lsls	r5, r0, #24
 800a184:	f103 0104 	add.w	r1, r3, #4
 800a188:	d52a      	bpl.n	800a1e0 <_printf_i+0xa4>
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	6011      	str	r1, [r2, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	da03      	bge.n	800a19a <_printf_i+0x5e>
 800a192:	222d      	movs	r2, #45	; 0x2d
 800a194:	425b      	negs	r3, r3
 800a196:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a19a:	486f      	ldr	r0, [pc, #444]	; (800a358 <_printf_i+0x21c>)
 800a19c:	220a      	movs	r2, #10
 800a19e:	e039      	b.n	800a214 <_printf_i+0xd8>
 800a1a0:	2973      	cmp	r1, #115	; 0x73
 800a1a2:	f000 809d 	beq.w	800a2e0 <_printf_i+0x1a4>
 800a1a6:	d808      	bhi.n	800a1ba <_printf_i+0x7e>
 800a1a8:	296f      	cmp	r1, #111	; 0x6f
 800a1aa:	d020      	beq.n	800a1ee <_printf_i+0xb2>
 800a1ac:	2970      	cmp	r1, #112	; 0x70
 800a1ae:	d1dd      	bne.n	800a16c <_printf_i+0x30>
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	f043 0320 	orr.w	r3, r3, #32
 800a1b6:	6023      	str	r3, [r4, #0]
 800a1b8:	e003      	b.n	800a1c2 <_printf_i+0x86>
 800a1ba:	2975      	cmp	r1, #117	; 0x75
 800a1bc:	d017      	beq.n	800a1ee <_printf_i+0xb2>
 800a1be:	2978      	cmp	r1, #120	; 0x78
 800a1c0:	d1d4      	bne.n	800a16c <_printf_i+0x30>
 800a1c2:	2378      	movs	r3, #120	; 0x78
 800a1c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1c8:	4864      	ldr	r0, [pc, #400]	; (800a35c <_printf_i+0x220>)
 800a1ca:	e055      	b.n	800a278 <_printf_i+0x13c>
 800a1cc:	6813      	ldr	r3, [r2, #0]
 800a1ce:	1d19      	adds	r1, r3, #4
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	6011      	str	r1, [r2, #0]
 800a1d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e08c      	b.n	800a2fa <_printf_i+0x1be>
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	6011      	str	r1, [r2, #0]
 800a1e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a1e8:	bf18      	it	ne
 800a1ea:	b21b      	sxthne	r3, r3
 800a1ec:	e7cf      	b.n	800a18e <_printf_i+0x52>
 800a1ee:	6813      	ldr	r3, [r2, #0]
 800a1f0:	6825      	ldr	r5, [r4, #0]
 800a1f2:	1d18      	adds	r0, r3, #4
 800a1f4:	6010      	str	r0, [r2, #0]
 800a1f6:	0628      	lsls	r0, r5, #24
 800a1f8:	d501      	bpl.n	800a1fe <_printf_i+0xc2>
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	e002      	b.n	800a204 <_printf_i+0xc8>
 800a1fe:	0668      	lsls	r0, r5, #25
 800a200:	d5fb      	bpl.n	800a1fa <_printf_i+0xbe>
 800a202:	881b      	ldrh	r3, [r3, #0]
 800a204:	4854      	ldr	r0, [pc, #336]	; (800a358 <_printf_i+0x21c>)
 800a206:	296f      	cmp	r1, #111	; 0x6f
 800a208:	bf14      	ite	ne
 800a20a:	220a      	movne	r2, #10
 800a20c:	2208      	moveq	r2, #8
 800a20e:	2100      	movs	r1, #0
 800a210:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a214:	6865      	ldr	r5, [r4, #4]
 800a216:	60a5      	str	r5, [r4, #8]
 800a218:	2d00      	cmp	r5, #0
 800a21a:	f2c0 8095 	blt.w	800a348 <_printf_i+0x20c>
 800a21e:	6821      	ldr	r1, [r4, #0]
 800a220:	f021 0104 	bic.w	r1, r1, #4
 800a224:	6021      	str	r1, [r4, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d13d      	bne.n	800a2a6 <_printf_i+0x16a>
 800a22a:	2d00      	cmp	r5, #0
 800a22c:	f040 808e 	bne.w	800a34c <_printf_i+0x210>
 800a230:	4665      	mov	r5, ip
 800a232:	2a08      	cmp	r2, #8
 800a234:	d10b      	bne.n	800a24e <_printf_i+0x112>
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	07db      	lsls	r3, r3, #31
 800a23a:	d508      	bpl.n	800a24e <_printf_i+0x112>
 800a23c:	6923      	ldr	r3, [r4, #16]
 800a23e:	6862      	ldr	r2, [r4, #4]
 800a240:	429a      	cmp	r2, r3
 800a242:	bfde      	ittt	le
 800a244:	2330      	movle	r3, #48	; 0x30
 800a246:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a24a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a24e:	ebac 0305 	sub.w	r3, ip, r5
 800a252:	6123      	str	r3, [r4, #16]
 800a254:	f8cd 8000 	str.w	r8, [sp]
 800a258:	463b      	mov	r3, r7
 800a25a:	aa03      	add	r2, sp, #12
 800a25c:	4621      	mov	r1, r4
 800a25e:	4630      	mov	r0, r6
 800a260:	f7ff fef6 	bl	800a050 <_printf_common>
 800a264:	3001      	adds	r0, #1
 800a266:	d14d      	bne.n	800a304 <_printf_i+0x1c8>
 800a268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a26c:	b005      	add	sp, #20
 800a26e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a272:	4839      	ldr	r0, [pc, #228]	; (800a358 <_printf_i+0x21c>)
 800a274:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a278:	6813      	ldr	r3, [r2, #0]
 800a27a:	6821      	ldr	r1, [r4, #0]
 800a27c:	1d1d      	adds	r5, r3, #4
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	6015      	str	r5, [r2, #0]
 800a282:	060a      	lsls	r2, r1, #24
 800a284:	d50b      	bpl.n	800a29e <_printf_i+0x162>
 800a286:	07ca      	lsls	r2, r1, #31
 800a288:	bf44      	itt	mi
 800a28a:	f041 0120 	orrmi.w	r1, r1, #32
 800a28e:	6021      	strmi	r1, [r4, #0]
 800a290:	b91b      	cbnz	r3, 800a29a <_printf_i+0x15e>
 800a292:	6822      	ldr	r2, [r4, #0]
 800a294:	f022 0220 	bic.w	r2, r2, #32
 800a298:	6022      	str	r2, [r4, #0]
 800a29a:	2210      	movs	r2, #16
 800a29c:	e7b7      	b.n	800a20e <_printf_i+0xd2>
 800a29e:	064d      	lsls	r5, r1, #25
 800a2a0:	bf48      	it	mi
 800a2a2:	b29b      	uxthmi	r3, r3
 800a2a4:	e7ef      	b.n	800a286 <_printf_i+0x14a>
 800a2a6:	4665      	mov	r5, ip
 800a2a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2ac:	fb02 3311 	mls	r3, r2, r1, r3
 800a2b0:	5cc3      	ldrb	r3, [r0, r3]
 800a2b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	2900      	cmp	r1, #0
 800a2ba:	d1f5      	bne.n	800a2a8 <_printf_i+0x16c>
 800a2bc:	e7b9      	b.n	800a232 <_printf_i+0xf6>
 800a2be:	6813      	ldr	r3, [r2, #0]
 800a2c0:	6825      	ldr	r5, [r4, #0]
 800a2c2:	6961      	ldr	r1, [r4, #20]
 800a2c4:	1d18      	adds	r0, r3, #4
 800a2c6:	6010      	str	r0, [r2, #0]
 800a2c8:	0628      	lsls	r0, r5, #24
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	d501      	bpl.n	800a2d2 <_printf_i+0x196>
 800a2ce:	6019      	str	r1, [r3, #0]
 800a2d0:	e002      	b.n	800a2d8 <_printf_i+0x19c>
 800a2d2:	066a      	lsls	r2, r5, #25
 800a2d4:	d5fb      	bpl.n	800a2ce <_printf_i+0x192>
 800a2d6:	8019      	strh	r1, [r3, #0]
 800a2d8:	2300      	movs	r3, #0
 800a2da:	6123      	str	r3, [r4, #16]
 800a2dc:	4665      	mov	r5, ip
 800a2de:	e7b9      	b.n	800a254 <_printf_i+0x118>
 800a2e0:	6813      	ldr	r3, [r2, #0]
 800a2e2:	1d19      	adds	r1, r3, #4
 800a2e4:	6011      	str	r1, [r2, #0]
 800a2e6:	681d      	ldr	r5, [r3, #0]
 800a2e8:	6862      	ldr	r2, [r4, #4]
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	f7f5 ff7f 	bl	80001f0 <memchr>
 800a2f2:	b108      	cbz	r0, 800a2f8 <_printf_i+0x1bc>
 800a2f4:	1b40      	subs	r0, r0, r5
 800a2f6:	6060      	str	r0, [r4, #4]
 800a2f8:	6863      	ldr	r3, [r4, #4]
 800a2fa:	6123      	str	r3, [r4, #16]
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a302:	e7a7      	b.n	800a254 <_printf_i+0x118>
 800a304:	6923      	ldr	r3, [r4, #16]
 800a306:	462a      	mov	r2, r5
 800a308:	4639      	mov	r1, r7
 800a30a:	4630      	mov	r0, r6
 800a30c:	47c0      	blx	r8
 800a30e:	3001      	adds	r0, #1
 800a310:	d0aa      	beq.n	800a268 <_printf_i+0x12c>
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	079b      	lsls	r3, r3, #30
 800a316:	d413      	bmi.n	800a340 <_printf_i+0x204>
 800a318:	68e0      	ldr	r0, [r4, #12]
 800a31a:	9b03      	ldr	r3, [sp, #12]
 800a31c:	4298      	cmp	r0, r3
 800a31e:	bfb8      	it	lt
 800a320:	4618      	movlt	r0, r3
 800a322:	e7a3      	b.n	800a26c <_printf_i+0x130>
 800a324:	2301      	movs	r3, #1
 800a326:	464a      	mov	r2, r9
 800a328:	4639      	mov	r1, r7
 800a32a:	4630      	mov	r0, r6
 800a32c:	47c0      	blx	r8
 800a32e:	3001      	adds	r0, #1
 800a330:	d09a      	beq.n	800a268 <_printf_i+0x12c>
 800a332:	3501      	adds	r5, #1
 800a334:	68e3      	ldr	r3, [r4, #12]
 800a336:	9a03      	ldr	r2, [sp, #12]
 800a338:	1a9b      	subs	r3, r3, r2
 800a33a:	42ab      	cmp	r3, r5
 800a33c:	dcf2      	bgt.n	800a324 <_printf_i+0x1e8>
 800a33e:	e7eb      	b.n	800a318 <_printf_i+0x1dc>
 800a340:	2500      	movs	r5, #0
 800a342:	f104 0919 	add.w	r9, r4, #25
 800a346:	e7f5      	b.n	800a334 <_printf_i+0x1f8>
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1ac      	bne.n	800a2a6 <_printf_i+0x16a>
 800a34c:	7803      	ldrb	r3, [r0, #0]
 800a34e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a352:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a356:	e76c      	b.n	800a232 <_printf_i+0xf6>
 800a358:	0800e706 	.word	0x0800e706
 800a35c:	0800e717 	.word	0x0800e717

0800a360 <_scanf_float>:
 800a360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a364:	469a      	mov	sl, r3
 800a366:	688b      	ldr	r3, [r1, #8]
 800a368:	4616      	mov	r6, r2
 800a36a:	1e5a      	subs	r2, r3, #1
 800a36c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a370:	b087      	sub	sp, #28
 800a372:	bf83      	ittte	hi
 800a374:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800a378:	189b      	addhi	r3, r3, r2
 800a37a:	9301      	strhi	r3, [sp, #4]
 800a37c:	2300      	movls	r3, #0
 800a37e:	bf86      	itte	hi
 800a380:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a384:	608b      	strhi	r3, [r1, #8]
 800a386:	9301      	strls	r3, [sp, #4]
 800a388:	680b      	ldr	r3, [r1, #0]
 800a38a:	4688      	mov	r8, r1
 800a38c:	f04f 0b00 	mov.w	fp, #0
 800a390:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a394:	f848 3b1c 	str.w	r3, [r8], #28
 800a398:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800a39c:	4607      	mov	r7, r0
 800a39e:	460c      	mov	r4, r1
 800a3a0:	4645      	mov	r5, r8
 800a3a2:	465a      	mov	r2, fp
 800a3a4:	46d9      	mov	r9, fp
 800a3a6:	f8cd b008 	str.w	fp, [sp, #8]
 800a3aa:	68a1      	ldr	r1, [r4, #8]
 800a3ac:	b181      	cbz	r1, 800a3d0 <_scanf_float+0x70>
 800a3ae:	6833      	ldr	r3, [r6, #0]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	2b49      	cmp	r3, #73	; 0x49
 800a3b4:	d071      	beq.n	800a49a <_scanf_float+0x13a>
 800a3b6:	d84d      	bhi.n	800a454 <_scanf_float+0xf4>
 800a3b8:	2b39      	cmp	r3, #57	; 0x39
 800a3ba:	d840      	bhi.n	800a43e <_scanf_float+0xde>
 800a3bc:	2b31      	cmp	r3, #49	; 0x31
 800a3be:	f080 8088 	bcs.w	800a4d2 <_scanf_float+0x172>
 800a3c2:	2b2d      	cmp	r3, #45	; 0x2d
 800a3c4:	f000 8090 	beq.w	800a4e8 <_scanf_float+0x188>
 800a3c8:	d815      	bhi.n	800a3f6 <_scanf_float+0x96>
 800a3ca:	2b2b      	cmp	r3, #43	; 0x2b
 800a3cc:	f000 808c 	beq.w	800a4e8 <_scanf_float+0x188>
 800a3d0:	f1b9 0f00 	cmp.w	r9, #0
 800a3d4:	d003      	beq.n	800a3de <_scanf_float+0x7e>
 800a3d6:	6823      	ldr	r3, [r4, #0]
 800a3d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3dc:	6023      	str	r3, [r4, #0]
 800a3de:	3a01      	subs	r2, #1
 800a3e0:	2a01      	cmp	r2, #1
 800a3e2:	f200 80ea 	bhi.w	800a5ba <_scanf_float+0x25a>
 800a3e6:	4545      	cmp	r5, r8
 800a3e8:	f200 80dc 	bhi.w	800a5a4 <_scanf_float+0x244>
 800a3ec:	2601      	movs	r6, #1
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	b007      	add	sp, #28
 800a3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f6:	2b2e      	cmp	r3, #46	; 0x2e
 800a3f8:	f000 809f 	beq.w	800a53a <_scanf_float+0x1da>
 800a3fc:	2b30      	cmp	r3, #48	; 0x30
 800a3fe:	d1e7      	bne.n	800a3d0 <_scanf_float+0x70>
 800a400:	6820      	ldr	r0, [r4, #0]
 800a402:	f410 7f80 	tst.w	r0, #256	; 0x100
 800a406:	d064      	beq.n	800a4d2 <_scanf_float+0x172>
 800a408:	9b01      	ldr	r3, [sp, #4]
 800a40a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800a40e:	6020      	str	r0, [r4, #0]
 800a410:	f109 0901 	add.w	r9, r9, #1
 800a414:	b11b      	cbz	r3, 800a41e <_scanf_float+0xbe>
 800a416:	3b01      	subs	r3, #1
 800a418:	3101      	adds	r1, #1
 800a41a:	9301      	str	r3, [sp, #4]
 800a41c:	60a1      	str	r1, [r4, #8]
 800a41e:	68a3      	ldr	r3, [r4, #8]
 800a420:	3b01      	subs	r3, #1
 800a422:	60a3      	str	r3, [r4, #8]
 800a424:	6923      	ldr	r3, [r4, #16]
 800a426:	3301      	adds	r3, #1
 800a428:	6123      	str	r3, [r4, #16]
 800a42a:	6873      	ldr	r3, [r6, #4]
 800a42c:	3b01      	subs	r3, #1
 800a42e:	2b00      	cmp	r3, #0
 800a430:	6073      	str	r3, [r6, #4]
 800a432:	f340 80ac 	ble.w	800a58e <_scanf_float+0x22e>
 800a436:	6833      	ldr	r3, [r6, #0]
 800a438:	3301      	adds	r3, #1
 800a43a:	6033      	str	r3, [r6, #0]
 800a43c:	e7b5      	b.n	800a3aa <_scanf_float+0x4a>
 800a43e:	2b45      	cmp	r3, #69	; 0x45
 800a440:	f000 8085 	beq.w	800a54e <_scanf_float+0x1ee>
 800a444:	2b46      	cmp	r3, #70	; 0x46
 800a446:	d06a      	beq.n	800a51e <_scanf_float+0x1be>
 800a448:	2b41      	cmp	r3, #65	; 0x41
 800a44a:	d1c1      	bne.n	800a3d0 <_scanf_float+0x70>
 800a44c:	2a01      	cmp	r2, #1
 800a44e:	d1bf      	bne.n	800a3d0 <_scanf_float+0x70>
 800a450:	2202      	movs	r2, #2
 800a452:	e046      	b.n	800a4e2 <_scanf_float+0x182>
 800a454:	2b65      	cmp	r3, #101	; 0x65
 800a456:	d07a      	beq.n	800a54e <_scanf_float+0x1ee>
 800a458:	d818      	bhi.n	800a48c <_scanf_float+0x12c>
 800a45a:	2b54      	cmp	r3, #84	; 0x54
 800a45c:	d066      	beq.n	800a52c <_scanf_float+0x1cc>
 800a45e:	d811      	bhi.n	800a484 <_scanf_float+0x124>
 800a460:	2b4e      	cmp	r3, #78	; 0x4e
 800a462:	d1b5      	bne.n	800a3d0 <_scanf_float+0x70>
 800a464:	2a00      	cmp	r2, #0
 800a466:	d146      	bne.n	800a4f6 <_scanf_float+0x196>
 800a468:	f1b9 0f00 	cmp.w	r9, #0
 800a46c:	d145      	bne.n	800a4fa <_scanf_float+0x19a>
 800a46e:	6821      	ldr	r1, [r4, #0]
 800a470:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a474:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a478:	d13f      	bne.n	800a4fa <_scanf_float+0x19a>
 800a47a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a47e:	6021      	str	r1, [r4, #0]
 800a480:	2201      	movs	r2, #1
 800a482:	e02e      	b.n	800a4e2 <_scanf_float+0x182>
 800a484:	2b59      	cmp	r3, #89	; 0x59
 800a486:	d01e      	beq.n	800a4c6 <_scanf_float+0x166>
 800a488:	2b61      	cmp	r3, #97	; 0x61
 800a48a:	e7de      	b.n	800a44a <_scanf_float+0xea>
 800a48c:	2b6e      	cmp	r3, #110	; 0x6e
 800a48e:	d0e9      	beq.n	800a464 <_scanf_float+0x104>
 800a490:	d815      	bhi.n	800a4be <_scanf_float+0x15e>
 800a492:	2b66      	cmp	r3, #102	; 0x66
 800a494:	d043      	beq.n	800a51e <_scanf_float+0x1be>
 800a496:	2b69      	cmp	r3, #105	; 0x69
 800a498:	d19a      	bne.n	800a3d0 <_scanf_float+0x70>
 800a49a:	f1bb 0f00 	cmp.w	fp, #0
 800a49e:	d138      	bne.n	800a512 <_scanf_float+0x1b2>
 800a4a0:	f1b9 0f00 	cmp.w	r9, #0
 800a4a4:	d197      	bne.n	800a3d6 <_scanf_float+0x76>
 800a4a6:	6821      	ldr	r1, [r4, #0]
 800a4a8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a4ac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a4b0:	d195      	bne.n	800a3de <_scanf_float+0x7e>
 800a4b2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a4b6:	6021      	str	r1, [r4, #0]
 800a4b8:	f04f 0b01 	mov.w	fp, #1
 800a4bc:	e011      	b.n	800a4e2 <_scanf_float+0x182>
 800a4be:	2b74      	cmp	r3, #116	; 0x74
 800a4c0:	d034      	beq.n	800a52c <_scanf_float+0x1cc>
 800a4c2:	2b79      	cmp	r3, #121	; 0x79
 800a4c4:	d184      	bne.n	800a3d0 <_scanf_float+0x70>
 800a4c6:	f1bb 0f07 	cmp.w	fp, #7
 800a4ca:	d181      	bne.n	800a3d0 <_scanf_float+0x70>
 800a4cc:	f04f 0b08 	mov.w	fp, #8
 800a4d0:	e007      	b.n	800a4e2 <_scanf_float+0x182>
 800a4d2:	eb12 0f0b 	cmn.w	r2, fp
 800a4d6:	f47f af7b 	bne.w	800a3d0 <_scanf_float+0x70>
 800a4da:	6821      	ldr	r1, [r4, #0]
 800a4dc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800a4e0:	6021      	str	r1, [r4, #0]
 800a4e2:	702b      	strb	r3, [r5, #0]
 800a4e4:	3501      	adds	r5, #1
 800a4e6:	e79a      	b.n	800a41e <_scanf_float+0xbe>
 800a4e8:	6821      	ldr	r1, [r4, #0]
 800a4ea:	0608      	lsls	r0, r1, #24
 800a4ec:	f57f af70 	bpl.w	800a3d0 <_scanf_float+0x70>
 800a4f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a4f4:	e7f4      	b.n	800a4e0 <_scanf_float+0x180>
 800a4f6:	2a02      	cmp	r2, #2
 800a4f8:	d047      	beq.n	800a58a <_scanf_float+0x22a>
 800a4fa:	f1bb 0f01 	cmp.w	fp, #1
 800a4fe:	d003      	beq.n	800a508 <_scanf_float+0x1a8>
 800a500:	f1bb 0f04 	cmp.w	fp, #4
 800a504:	f47f af64 	bne.w	800a3d0 <_scanf_float+0x70>
 800a508:	f10b 0b01 	add.w	fp, fp, #1
 800a50c:	fa5f fb8b 	uxtb.w	fp, fp
 800a510:	e7e7      	b.n	800a4e2 <_scanf_float+0x182>
 800a512:	f1bb 0f03 	cmp.w	fp, #3
 800a516:	d0f7      	beq.n	800a508 <_scanf_float+0x1a8>
 800a518:	f1bb 0f05 	cmp.w	fp, #5
 800a51c:	e7f2      	b.n	800a504 <_scanf_float+0x1a4>
 800a51e:	f1bb 0f02 	cmp.w	fp, #2
 800a522:	f47f af55 	bne.w	800a3d0 <_scanf_float+0x70>
 800a526:	f04f 0b03 	mov.w	fp, #3
 800a52a:	e7da      	b.n	800a4e2 <_scanf_float+0x182>
 800a52c:	f1bb 0f06 	cmp.w	fp, #6
 800a530:	f47f af4e 	bne.w	800a3d0 <_scanf_float+0x70>
 800a534:	f04f 0b07 	mov.w	fp, #7
 800a538:	e7d3      	b.n	800a4e2 <_scanf_float+0x182>
 800a53a:	6821      	ldr	r1, [r4, #0]
 800a53c:	0588      	lsls	r0, r1, #22
 800a53e:	f57f af47 	bpl.w	800a3d0 <_scanf_float+0x70>
 800a542:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800a546:	6021      	str	r1, [r4, #0]
 800a548:	f8cd 9008 	str.w	r9, [sp, #8]
 800a54c:	e7c9      	b.n	800a4e2 <_scanf_float+0x182>
 800a54e:	6821      	ldr	r1, [r4, #0]
 800a550:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800a554:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a558:	d006      	beq.n	800a568 <_scanf_float+0x208>
 800a55a:	0548      	lsls	r0, r1, #21
 800a55c:	f57f af38 	bpl.w	800a3d0 <_scanf_float+0x70>
 800a560:	f1b9 0f00 	cmp.w	r9, #0
 800a564:	f43f af3b 	beq.w	800a3de <_scanf_float+0x7e>
 800a568:	0588      	lsls	r0, r1, #22
 800a56a:	bf58      	it	pl
 800a56c:	9802      	ldrpl	r0, [sp, #8]
 800a56e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a572:	bf58      	it	pl
 800a574:	eba9 0000 	subpl.w	r0, r9, r0
 800a578:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800a57c:	bf58      	it	pl
 800a57e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800a582:	6021      	str	r1, [r4, #0]
 800a584:	f04f 0900 	mov.w	r9, #0
 800a588:	e7ab      	b.n	800a4e2 <_scanf_float+0x182>
 800a58a:	2203      	movs	r2, #3
 800a58c:	e7a9      	b.n	800a4e2 <_scanf_float+0x182>
 800a58e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a592:	9205      	str	r2, [sp, #20]
 800a594:	4631      	mov	r1, r6
 800a596:	4638      	mov	r0, r7
 800a598:	4798      	blx	r3
 800a59a:	9a05      	ldr	r2, [sp, #20]
 800a59c:	2800      	cmp	r0, #0
 800a59e:	f43f af04 	beq.w	800a3aa <_scanf_float+0x4a>
 800a5a2:	e715      	b.n	800a3d0 <_scanf_float+0x70>
 800a5a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a5ac:	4632      	mov	r2, r6
 800a5ae:	4638      	mov	r0, r7
 800a5b0:	4798      	blx	r3
 800a5b2:	6923      	ldr	r3, [r4, #16]
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	6123      	str	r3, [r4, #16]
 800a5b8:	e715      	b.n	800a3e6 <_scanf_float+0x86>
 800a5ba:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800a5be:	2b06      	cmp	r3, #6
 800a5c0:	d80a      	bhi.n	800a5d8 <_scanf_float+0x278>
 800a5c2:	f1bb 0f02 	cmp.w	fp, #2
 800a5c6:	d968      	bls.n	800a69a <_scanf_float+0x33a>
 800a5c8:	f1ab 0b03 	sub.w	fp, fp, #3
 800a5cc:	fa5f fb8b 	uxtb.w	fp, fp
 800a5d0:	eba5 0b0b 	sub.w	fp, r5, fp
 800a5d4:	455d      	cmp	r5, fp
 800a5d6:	d14b      	bne.n	800a670 <_scanf_float+0x310>
 800a5d8:	6823      	ldr	r3, [r4, #0]
 800a5da:	05da      	lsls	r2, r3, #23
 800a5dc:	d51f      	bpl.n	800a61e <_scanf_float+0x2be>
 800a5de:	055b      	lsls	r3, r3, #21
 800a5e0:	d468      	bmi.n	800a6b4 <_scanf_float+0x354>
 800a5e2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a5e6:	6923      	ldr	r3, [r4, #16]
 800a5e8:	2965      	cmp	r1, #101	; 0x65
 800a5ea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a5ee:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800a5f2:	6123      	str	r3, [r4, #16]
 800a5f4:	d00d      	beq.n	800a612 <_scanf_float+0x2b2>
 800a5f6:	2945      	cmp	r1, #69	; 0x45
 800a5f8:	d00b      	beq.n	800a612 <_scanf_float+0x2b2>
 800a5fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5fe:	4632      	mov	r2, r6
 800a600:	4638      	mov	r0, r7
 800a602:	4798      	blx	r3
 800a604:	6923      	ldr	r3, [r4, #16]
 800a606:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800a60a:	3b01      	subs	r3, #1
 800a60c:	f1a5 0b02 	sub.w	fp, r5, #2
 800a610:	6123      	str	r3, [r4, #16]
 800a612:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a616:	4632      	mov	r2, r6
 800a618:	4638      	mov	r0, r7
 800a61a:	4798      	blx	r3
 800a61c:	465d      	mov	r5, fp
 800a61e:	6826      	ldr	r6, [r4, #0]
 800a620:	f016 0610 	ands.w	r6, r6, #16
 800a624:	d17a      	bne.n	800a71c <_scanf_float+0x3bc>
 800a626:	702e      	strb	r6, [r5, #0]
 800a628:	6823      	ldr	r3, [r4, #0]
 800a62a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a62e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a632:	d142      	bne.n	800a6ba <_scanf_float+0x35a>
 800a634:	9b02      	ldr	r3, [sp, #8]
 800a636:	eba9 0303 	sub.w	r3, r9, r3
 800a63a:	425a      	negs	r2, r3
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d149      	bne.n	800a6d4 <_scanf_float+0x374>
 800a640:	2200      	movs	r2, #0
 800a642:	4641      	mov	r1, r8
 800a644:	4638      	mov	r0, r7
 800a646:	f000 ff1f 	bl	800b488 <_strtod_r>
 800a64a:	6825      	ldr	r5, [r4, #0]
 800a64c:	f8da 3000 	ldr.w	r3, [sl]
 800a650:	f015 0f02 	tst.w	r5, #2
 800a654:	f103 0204 	add.w	r2, r3, #4
 800a658:	ec59 8b10 	vmov	r8, r9, d0
 800a65c:	f8ca 2000 	str.w	r2, [sl]
 800a660:	d043      	beq.n	800a6ea <_scanf_float+0x38a>
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	e9c3 8900 	strd	r8, r9, [r3]
 800a668:	68e3      	ldr	r3, [r4, #12]
 800a66a:	3301      	adds	r3, #1
 800a66c:	60e3      	str	r3, [r4, #12]
 800a66e:	e6be      	b.n	800a3ee <_scanf_float+0x8e>
 800a670:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a674:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a678:	4632      	mov	r2, r6
 800a67a:	4638      	mov	r0, r7
 800a67c:	4798      	blx	r3
 800a67e:	6923      	ldr	r3, [r4, #16]
 800a680:	3b01      	subs	r3, #1
 800a682:	6123      	str	r3, [r4, #16]
 800a684:	e7a6      	b.n	800a5d4 <_scanf_float+0x274>
 800a686:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a68a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a68e:	4632      	mov	r2, r6
 800a690:	4638      	mov	r0, r7
 800a692:	4798      	blx	r3
 800a694:	6923      	ldr	r3, [r4, #16]
 800a696:	3b01      	subs	r3, #1
 800a698:	6123      	str	r3, [r4, #16]
 800a69a:	4545      	cmp	r5, r8
 800a69c:	d8f3      	bhi.n	800a686 <_scanf_float+0x326>
 800a69e:	e6a5      	b.n	800a3ec <_scanf_float+0x8c>
 800a6a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a6a8:	4632      	mov	r2, r6
 800a6aa:	4638      	mov	r0, r7
 800a6ac:	4798      	blx	r3
 800a6ae:	6923      	ldr	r3, [r4, #16]
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	6123      	str	r3, [r4, #16]
 800a6b4:	4545      	cmp	r5, r8
 800a6b6:	d8f3      	bhi.n	800a6a0 <_scanf_float+0x340>
 800a6b8:	e698      	b.n	800a3ec <_scanf_float+0x8c>
 800a6ba:	9b03      	ldr	r3, [sp, #12]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d0bf      	beq.n	800a640 <_scanf_float+0x2e0>
 800a6c0:	9904      	ldr	r1, [sp, #16]
 800a6c2:	230a      	movs	r3, #10
 800a6c4:	4632      	mov	r2, r6
 800a6c6:	3101      	adds	r1, #1
 800a6c8:	4638      	mov	r0, r7
 800a6ca:	f000 ff69 	bl	800b5a0 <_strtol_r>
 800a6ce:	9b03      	ldr	r3, [sp, #12]
 800a6d0:	9d04      	ldr	r5, [sp, #16]
 800a6d2:	1ac2      	subs	r2, r0, r3
 800a6d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a6d8:	429d      	cmp	r5, r3
 800a6da:	bf28      	it	cs
 800a6dc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800a6e0:	490f      	ldr	r1, [pc, #60]	; (800a720 <_scanf_float+0x3c0>)
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	f000 f8a0 	bl	800a828 <siprintf>
 800a6e8:	e7aa      	b.n	800a640 <_scanf_float+0x2e0>
 800a6ea:	f015 0504 	ands.w	r5, r5, #4
 800a6ee:	d1b8      	bne.n	800a662 <_scanf_float+0x302>
 800a6f0:	681f      	ldr	r7, [r3, #0]
 800a6f2:	ee10 2a10 	vmov	r2, s0
 800a6f6:	464b      	mov	r3, r9
 800a6f8:	ee10 0a10 	vmov	r0, s0
 800a6fc:	4649      	mov	r1, r9
 800a6fe:	f7f6 fa1d 	bl	8000b3c <__aeabi_dcmpun>
 800a702:	b128      	cbz	r0, 800a710 <_scanf_float+0x3b0>
 800a704:	4628      	mov	r0, r5
 800a706:	f000 f889 	bl	800a81c <nanf>
 800a70a:	ed87 0a00 	vstr	s0, [r7]
 800a70e:	e7ab      	b.n	800a668 <_scanf_float+0x308>
 800a710:	4640      	mov	r0, r8
 800a712:	4649      	mov	r1, r9
 800a714:	f7f6 fa70 	bl	8000bf8 <__aeabi_d2f>
 800a718:	6038      	str	r0, [r7, #0]
 800a71a:	e7a5      	b.n	800a668 <_scanf_float+0x308>
 800a71c:	2600      	movs	r6, #0
 800a71e:	e666      	b.n	800a3ee <_scanf_float+0x8e>
 800a720:	0800e728 	.word	0x0800e728

0800a724 <iprintf>:
 800a724:	b40f      	push	{r0, r1, r2, r3}
 800a726:	4b0a      	ldr	r3, [pc, #40]	; (800a750 <iprintf+0x2c>)
 800a728:	b513      	push	{r0, r1, r4, lr}
 800a72a:	681c      	ldr	r4, [r3, #0]
 800a72c:	b124      	cbz	r4, 800a738 <iprintf+0x14>
 800a72e:	69a3      	ldr	r3, [r4, #24]
 800a730:	b913      	cbnz	r3, 800a738 <iprintf+0x14>
 800a732:	4620      	mov	r0, r4
 800a734:	f001 ff3c 	bl	800c5b0 <__sinit>
 800a738:	ab05      	add	r3, sp, #20
 800a73a:	9a04      	ldr	r2, [sp, #16]
 800a73c:	68a1      	ldr	r1, [r4, #8]
 800a73e:	9301      	str	r3, [sp, #4]
 800a740:	4620      	mov	r0, r4
 800a742:	f003 f9a9 	bl	800da98 <_vfiprintf_r>
 800a746:	b002      	add	sp, #8
 800a748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a74c:	b004      	add	sp, #16
 800a74e:	4770      	bx	lr
 800a750:	20000080 	.word	0x20000080

0800a754 <_puts_r>:
 800a754:	b570      	push	{r4, r5, r6, lr}
 800a756:	460e      	mov	r6, r1
 800a758:	4605      	mov	r5, r0
 800a75a:	b118      	cbz	r0, 800a764 <_puts_r+0x10>
 800a75c:	6983      	ldr	r3, [r0, #24]
 800a75e:	b90b      	cbnz	r3, 800a764 <_puts_r+0x10>
 800a760:	f001 ff26 	bl	800c5b0 <__sinit>
 800a764:	69ab      	ldr	r3, [r5, #24]
 800a766:	68ac      	ldr	r4, [r5, #8]
 800a768:	b913      	cbnz	r3, 800a770 <_puts_r+0x1c>
 800a76a:	4628      	mov	r0, r5
 800a76c:	f001 ff20 	bl	800c5b0 <__sinit>
 800a770:	4b23      	ldr	r3, [pc, #140]	; (800a800 <_puts_r+0xac>)
 800a772:	429c      	cmp	r4, r3
 800a774:	d117      	bne.n	800a7a6 <_puts_r+0x52>
 800a776:	686c      	ldr	r4, [r5, #4]
 800a778:	89a3      	ldrh	r3, [r4, #12]
 800a77a:	071b      	lsls	r3, r3, #28
 800a77c:	d51d      	bpl.n	800a7ba <_puts_r+0x66>
 800a77e:	6923      	ldr	r3, [r4, #16]
 800a780:	b1db      	cbz	r3, 800a7ba <_puts_r+0x66>
 800a782:	3e01      	subs	r6, #1
 800a784:	68a3      	ldr	r3, [r4, #8]
 800a786:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a78a:	3b01      	subs	r3, #1
 800a78c:	60a3      	str	r3, [r4, #8]
 800a78e:	b9e9      	cbnz	r1, 800a7cc <_puts_r+0x78>
 800a790:	2b00      	cmp	r3, #0
 800a792:	da2e      	bge.n	800a7f2 <_puts_r+0x9e>
 800a794:	4622      	mov	r2, r4
 800a796:	210a      	movs	r1, #10
 800a798:	4628      	mov	r0, r5
 800a79a:	f000 ff13 	bl	800b5c4 <__swbuf_r>
 800a79e:	3001      	adds	r0, #1
 800a7a0:	d011      	beq.n	800a7c6 <_puts_r+0x72>
 800a7a2:	200a      	movs	r0, #10
 800a7a4:	e011      	b.n	800a7ca <_puts_r+0x76>
 800a7a6:	4b17      	ldr	r3, [pc, #92]	; (800a804 <_puts_r+0xb0>)
 800a7a8:	429c      	cmp	r4, r3
 800a7aa:	d101      	bne.n	800a7b0 <_puts_r+0x5c>
 800a7ac:	68ac      	ldr	r4, [r5, #8]
 800a7ae:	e7e3      	b.n	800a778 <_puts_r+0x24>
 800a7b0:	4b15      	ldr	r3, [pc, #84]	; (800a808 <_puts_r+0xb4>)
 800a7b2:	429c      	cmp	r4, r3
 800a7b4:	bf08      	it	eq
 800a7b6:	68ec      	ldreq	r4, [r5, #12]
 800a7b8:	e7de      	b.n	800a778 <_puts_r+0x24>
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	4628      	mov	r0, r5
 800a7be:	f000 ff53 	bl	800b668 <__swsetup_r>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	d0dd      	beq.n	800a782 <_puts_r+0x2e>
 800a7c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7ca:	bd70      	pop	{r4, r5, r6, pc}
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	da04      	bge.n	800a7da <_puts_r+0x86>
 800a7d0:	69a2      	ldr	r2, [r4, #24]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	dc06      	bgt.n	800a7e4 <_puts_r+0x90>
 800a7d6:	290a      	cmp	r1, #10
 800a7d8:	d004      	beq.n	800a7e4 <_puts_r+0x90>
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	1c5a      	adds	r2, r3, #1
 800a7de:	6022      	str	r2, [r4, #0]
 800a7e0:	7019      	strb	r1, [r3, #0]
 800a7e2:	e7cf      	b.n	800a784 <_puts_r+0x30>
 800a7e4:	4622      	mov	r2, r4
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	f000 feec 	bl	800b5c4 <__swbuf_r>
 800a7ec:	3001      	adds	r0, #1
 800a7ee:	d1c9      	bne.n	800a784 <_puts_r+0x30>
 800a7f0:	e7e9      	b.n	800a7c6 <_puts_r+0x72>
 800a7f2:	6823      	ldr	r3, [r4, #0]
 800a7f4:	200a      	movs	r0, #10
 800a7f6:	1c5a      	adds	r2, r3, #1
 800a7f8:	6022      	str	r2, [r4, #0]
 800a7fa:	7018      	strb	r0, [r3, #0]
 800a7fc:	e7e5      	b.n	800a7ca <_puts_r+0x76>
 800a7fe:	bf00      	nop
 800a800:	0800e7b0 	.word	0x0800e7b0
 800a804:	0800e7d0 	.word	0x0800e7d0
 800a808:	0800e790 	.word	0x0800e790

0800a80c <puts>:
 800a80c:	4b02      	ldr	r3, [pc, #8]	; (800a818 <puts+0xc>)
 800a80e:	4601      	mov	r1, r0
 800a810:	6818      	ldr	r0, [r3, #0]
 800a812:	f7ff bf9f 	b.w	800a754 <_puts_r>
 800a816:	bf00      	nop
 800a818:	20000080 	.word	0x20000080

0800a81c <nanf>:
 800a81c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a824 <nanf+0x8>
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	7fc00000 	.word	0x7fc00000

0800a828 <siprintf>:
 800a828:	b40e      	push	{r1, r2, r3}
 800a82a:	b500      	push	{lr}
 800a82c:	b09c      	sub	sp, #112	; 0x70
 800a82e:	ab1d      	add	r3, sp, #116	; 0x74
 800a830:	9002      	str	r0, [sp, #8]
 800a832:	9006      	str	r0, [sp, #24]
 800a834:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a838:	4809      	ldr	r0, [pc, #36]	; (800a860 <siprintf+0x38>)
 800a83a:	9107      	str	r1, [sp, #28]
 800a83c:	9104      	str	r1, [sp, #16]
 800a83e:	4909      	ldr	r1, [pc, #36]	; (800a864 <siprintf+0x3c>)
 800a840:	f853 2b04 	ldr.w	r2, [r3], #4
 800a844:	9105      	str	r1, [sp, #20]
 800a846:	6800      	ldr	r0, [r0, #0]
 800a848:	9301      	str	r3, [sp, #4]
 800a84a:	a902      	add	r1, sp, #8
 800a84c:	f003 f802 	bl	800d854 <_svfiprintf_r>
 800a850:	9b02      	ldr	r3, [sp, #8]
 800a852:	2200      	movs	r2, #0
 800a854:	701a      	strb	r2, [r3, #0]
 800a856:	b01c      	add	sp, #112	; 0x70
 800a858:	f85d eb04 	ldr.w	lr, [sp], #4
 800a85c:	b003      	add	sp, #12
 800a85e:	4770      	bx	lr
 800a860:	20000080 	.word	0x20000080
 800a864:	ffff0208 	.word	0xffff0208

0800a868 <sulp>:
 800a868:	b570      	push	{r4, r5, r6, lr}
 800a86a:	4604      	mov	r4, r0
 800a86c:	460d      	mov	r5, r1
 800a86e:	ec45 4b10 	vmov	d0, r4, r5
 800a872:	4616      	mov	r6, r2
 800a874:	f002 fdaa 	bl	800d3cc <__ulp>
 800a878:	ec51 0b10 	vmov	r0, r1, d0
 800a87c:	b17e      	cbz	r6, 800a89e <sulp+0x36>
 800a87e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a882:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a886:	2b00      	cmp	r3, #0
 800a888:	dd09      	ble.n	800a89e <sulp+0x36>
 800a88a:	051b      	lsls	r3, r3, #20
 800a88c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a890:	2400      	movs	r4, #0
 800a892:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a896:	4622      	mov	r2, r4
 800a898:	462b      	mov	r3, r5
 800a89a:	f7f5 feb5 	bl	8000608 <__aeabi_dmul>
 800a89e:	bd70      	pop	{r4, r5, r6, pc}

0800a8a0 <_strtod_l>:
 800a8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a4:	461f      	mov	r7, r3
 800a8a6:	b0a1      	sub	sp, #132	; 0x84
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	4681      	mov	r9, r0
 800a8ac:	4638      	mov	r0, r7
 800a8ae:	460e      	mov	r6, r1
 800a8b0:	9217      	str	r2, [sp, #92]	; 0x5c
 800a8b2:	931c      	str	r3, [sp, #112]	; 0x70
 800a8b4:	f002 fa2f 	bl	800cd16 <__localeconv_l>
 800a8b8:	4680      	mov	r8, r0
 800a8ba:	6800      	ldr	r0, [r0, #0]
 800a8bc:	f7f5 fc90 	bl	80001e0 <strlen>
 800a8c0:	f04f 0a00 	mov.w	sl, #0
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	f04f 0b00 	mov.w	fp, #0
 800a8ca:	961b      	str	r6, [sp, #108]	; 0x6c
 800a8cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a8ce:	781a      	ldrb	r2, [r3, #0]
 800a8d0:	2a0d      	cmp	r2, #13
 800a8d2:	d832      	bhi.n	800a93a <_strtod_l+0x9a>
 800a8d4:	2a09      	cmp	r2, #9
 800a8d6:	d236      	bcs.n	800a946 <_strtod_l+0xa6>
 800a8d8:	2a00      	cmp	r2, #0
 800a8da:	d03e      	beq.n	800a95a <_strtod_l+0xba>
 800a8dc:	2300      	movs	r3, #0
 800a8de:	930d      	str	r3, [sp, #52]	; 0x34
 800a8e0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a8e2:	782b      	ldrb	r3, [r5, #0]
 800a8e4:	2b30      	cmp	r3, #48	; 0x30
 800a8e6:	f040 80ac 	bne.w	800aa42 <_strtod_l+0x1a2>
 800a8ea:	786b      	ldrb	r3, [r5, #1]
 800a8ec:	2b58      	cmp	r3, #88	; 0x58
 800a8ee:	d001      	beq.n	800a8f4 <_strtod_l+0x54>
 800a8f0:	2b78      	cmp	r3, #120	; 0x78
 800a8f2:	d167      	bne.n	800a9c4 <_strtod_l+0x124>
 800a8f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8f6:	9301      	str	r3, [sp, #4]
 800a8f8:	ab1c      	add	r3, sp, #112	; 0x70
 800a8fa:	9300      	str	r3, [sp, #0]
 800a8fc:	9702      	str	r7, [sp, #8]
 800a8fe:	ab1d      	add	r3, sp, #116	; 0x74
 800a900:	4a88      	ldr	r2, [pc, #544]	; (800ab24 <_strtod_l+0x284>)
 800a902:	a91b      	add	r1, sp, #108	; 0x6c
 800a904:	4648      	mov	r0, r9
 800a906:	f001 ff2c 	bl	800c762 <__gethex>
 800a90a:	f010 0407 	ands.w	r4, r0, #7
 800a90e:	4606      	mov	r6, r0
 800a910:	d005      	beq.n	800a91e <_strtod_l+0x7e>
 800a912:	2c06      	cmp	r4, #6
 800a914:	d12b      	bne.n	800a96e <_strtod_l+0xce>
 800a916:	3501      	adds	r5, #1
 800a918:	2300      	movs	r3, #0
 800a91a:	951b      	str	r5, [sp, #108]	; 0x6c
 800a91c:	930d      	str	r3, [sp, #52]	; 0x34
 800a91e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a920:	2b00      	cmp	r3, #0
 800a922:	f040 859a 	bne.w	800b45a <_strtod_l+0xbba>
 800a926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a928:	b1e3      	cbz	r3, 800a964 <_strtod_l+0xc4>
 800a92a:	4652      	mov	r2, sl
 800a92c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a930:	ec43 2b10 	vmov	d0, r2, r3
 800a934:	b021      	add	sp, #132	; 0x84
 800a936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93a:	2a2b      	cmp	r2, #43	; 0x2b
 800a93c:	d015      	beq.n	800a96a <_strtod_l+0xca>
 800a93e:	2a2d      	cmp	r2, #45	; 0x2d
 800a940:	d004      	beq.n	800a94c <_strtod_l+0xac>
 800a942:	2a20      	cmp	r2, #32
 800a944:	d1ca      	bne.n	800a8dc <_strtod_l+0x3c>
 800a946:	3301      	adds	r3, #1
 800a948:	931b      	str	r3, [sp, #108]	; 0x6c
 800a94a:	e7bf      	b.n	800a8cc <_strtod_l+0x2c>
 800a94c:	2201      	movs	r2, #1
 800a94e:	920d      	str	r2, [sp, #52]	; 0x34
 800a950:	1c5a      	adds	r2, r3, #1
 800a952:	921b      	str	r2, [sp, #108]	; 0x6c
 800a954:	785b      	ldrb	r3, [r3, #1]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1c2      	bne.n	800a8e0 <_strtod_l+0x40>
 800a95a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a95c:	961b      	str	r6, [sp, #108]	; 0x6c
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f040 8579 	bne.w	800b456 <_strtod_l+0xbb6>
 800a964:	4652      	mov	r2, sl
 800a966:	465b      	mov	r3, fp
 800a968:	e7e2      	b.n	800a930 <_strtod_l+0x90>
 800a96a:	2200      	movs	r2, #0
 800a96c:	e7ef      	b.n	800a94e <_strtod_l+0xae>
 800a96e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a970:	b13a      	cbz	r2, 800a982 <_strtod_l+0xe2>
 800a972:	2135      	movs	r1, #53	; 0x35
 800a974:	a81e      	add	r0, sp, #120	; 0x78
 800a976:	f002 fe21 	bl	800d5bc <__copybits>
 800a97a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a97c:	4648      	mov	r0, r9
 800a97e:	f002 fa8d 	bl	800ce9c <_Bfree>
 800a982:	3c01      	subs	r4, #1
 800a984:	2c04      	cmp	r4, #4
 800a986:	d806      	bhi.n	800a996 <_strtod_l+0xf6>
 800a988:	e8df f004 	tbb	[pc, r4]
 800a98c:	1714030a 	.word	0x1714030a
 800a990:	0a          	.byte	0x0a
 800a991:	00          	.byte	0x00
 800a992:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800a996:	0730      	lsls	r0, r6, #28
 800a998:	d5c1      	bpl.n	800a91e <_strtod_l+0x7e>
 800a99a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a99e:	e7be      	b.n	800a91e <_strtod_l+0x7e>
 800a9a0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800a9a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a9a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a9aa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a9ae:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a9b2:	e7f0      	b.n	800a996 <_strtod_l+0xf6>
 800a9b4:	f8df b170 	ldr.w	fp, [pc, #368]	; 800ab28 <_strtod_l+0x288>
 800a9b8:	e7ed      	b.n	800a996 <_strtod_l+0xf6>
 800a9ba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a9be:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a9c2:	e7e8      	b.n	800a996 <_strtod_l+0xf6>
 800a9c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9c6:	1c5a      	adds	r2, r3, #1
 800a9c8:	921b      	str	r2, [sp, #108]	; 0x6c
 800a9ca:	785b      	ldrb	r3, [r3, #1]
 800a9cc:	2b30      	cmp	r3, #48	; 0x30
 800a9ce:	d0f9      	beq.n	800a9c4 <_strtod_l+0x124>
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d0a4      	beq.n	800a91e <_strtod_l+0x7e>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	2500      	movs	r5, #0
 800a9d8:	9306      	str	r3, [sp, #24]
 800a9da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9dc:	9308      	str	r3, [sp, #32]
 800a9de:	9507      	str	r5, [sp, #28]
 800a9e0:	9505      	str	r5, [sp, #20]
 800a9e2:	220a      	movs	r2, #10
 800a9e4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a9e6:	7807      	ldrb	r7, [r0, #0]
 800a9e8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a9ec:	b2d9      	uxtb	r1, r3
 800a9ee:	2909      	cmp	r1, #9
 800a9f0:	d929      	bls.n	800aa46 <_strtod_l+0x1a6>
 800a9f2:	4622      	mov	r2, r4
 800a9f4:	f8d8 1000 	ldr.w	r1, [r8]
 800a9f8:	f003 f9b7 	bl	800dd6a <strncmp>
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	d031      	beq.n	800aa64 <_strtod_l+0x1c4>
 800aa00:	2000      	movs	r0, #0
 800aa02:	9c05      	ldr	r4, [sp, #20]
 800aa04:	9004      	str	r0, [sp, #16]
 800aa06:	463b      	mov	r3, r7
 800aa08:	4602      	mov	r2, r0
 800aa0a:	2b65      	cmp	r3, #101	; 0x65
 800aa0c:	d001      	beq.n	800aa12 <_strtod_l+0x172>
 800aa0e:	2b45      	cmp	r3, #69	; 0x45
 800aa10:	d114      	bne.n	800aa3c <_strtod_l+0x19c>
 800aa12:	b924      	cbnz	r4, 800aa1e <_strtod_l+0x17e>
 800aa14:	b910      	cbnz	r0, 800aa1c <_strtod_l+0x17c>
 800aa16:	9b06      	ldr	r3, [sp, #24]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d09e      	beq.n	800a95a <_strtod_l+0xba>
 800aa1c:	2400      	movs	r4, #0
 800aa1e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800aa20:	1c73      	adds	r3, r6, #1
 800aa22:	931b      	str	r3, [sp, #108]	; 0x6c
 800aa24:	7873      	ldrb	r3, [r6, #1]
 800aa26:	2b2b      	cmp	r3, #43	; 0x2b
 800aa28:	d078      	beq.n	800ab1c <_strtod_l+0x27c>
 800aa2a:	2b2d      	cmp	r3, #45	; 0x2d
 800aa2c:	d070      	beq.n	800ab10 <_strtod_l+0x270>
 800aa2e:	f04f 0c00 	mov.w	ip, #0
 800aa32:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800aa36:	2f09      	cmp	r7, #9
 800aa38:	d97c      	bls.n	800ab34 <_strtod_l+0x294>
 800aa3a:	961b      	str	r6, [sp, #108]	; 0x6c
 800aa3c:	f04f 0e00 	mov.w	lr, #0
 800aa40:	e09a      	b.n	800ab78 <_strtod_l+0x2d8>
 800aa42:	2300      	movs	r3, #0
 800aa44:	e7c7      	b.n	800a9d6 <_strtod_l+0x136>
 800aa46:	9905      	ldr	r1, [sp, #20]
 800aa48:	2908      	cmp	r1, #8
 800aa4a:	bfdd      	ittte	le
 800aa4c:	9907      	ldrle	r1, [sp, #28]
 800aa4e:	fb02 3301 	mlale	r3, r2, r1, r3
 800aa52:	9307      	strle	r3, [sp, #28]
 800aa54:	fb02 3505 	mlagt	r5, r2, r5, r3
 800aa58:	9b05      	ldr	r3, [sp, #20]
 800aa5a:	3001      	adds	r0, #1
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	9305      	str	r3, [sp, #20]
 800aa60:	901b      	str	r0, [sp, #108]	; 0x6c
 800aa62:	e7bf      	b.n	800a9e4 <_strtod_l+0x144>
 800aa64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa66:	191a      	adds	r2, r3, r4
 800aa68:	921b      	str	r2, [sp, #108]	; 0x6c
 800aa6a:	9a05      	ldr	r2, [sp, #20]
 800aa6c:	5d1b      	ldrb	r3, [r3, r4]
 800aa6e:	2a00      	cmp	r2, #0
 800aa70:	d037      	beq.n	800aae2 <_strtod_l+0x242>
 800aa72:	9c05      	ldr	r4, [sp, #20]
 800aa74:	4602      	mov	r2, r0
 800aa76:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800aa7a:	2909      	cmp	r1, #9
 800aa7c:	d913      	bls.n	800aaa6 <_strtod_l+0x206>
 800aa7e:	2101      	movs	r1, #1
 800aa80:	9104      	str	r1, [sp, #16]
 800aa82:	e7c2      	b.n	800aa0a <_strtod_l+0x16a>
 800aa84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aa86:	1c5a      	adds	r2, r3, #1
 800aa88:	921b      	str	r2, [sp, #108]	; 0x6c
 800aa8a:	785b      	ldrb	r3, [r3, #1]
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	2b30      	cmp	r3, #48	; 0x30
 800aa90:	d0f8      	beq.n	800aa84 <_strtod_l+0x1e4>
 800aa92:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800aa96:	2a08      	cmp	r2, #8
 800aa98:	f200 84e4 	bhi.w	800b464 <_strtod_l+0xbc4>
 800aa9c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800aa9e:	9208      	str	r2, [sp, #32]
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800aaaa:	f100 0101 	add.w	r1, r0, #1
 800aaae:	d012      	beq.n	800aad6 <_strtod_l+0x236>
 800aab0:	440a      	add	r2, r1
 800aab2:	eb00 0c04 	add.w	ip, r0, r4
 800aab6:	4621      	mov	r1, r4
 800aab8:	270a      	movs	r7, #10
 800aaba:	458c      	cmp	ip, r1
 800aabc:	d113      	bne.n	800aae6 <_strtod_l+0x246>
 800aabe:	1821      	adds	r1, r4, r0
 800aac0:	2908      	cmp	r1, #8
 800aac2:	f104 0401 	add.w	r4, r4, #1
 800aac6:	4404      	add	r4, r0
 800aac8:	dc19      	bgt.n	800aafe <_strtod_l+0x25e>
 800aaca:	9b07      	ldr	r3, [sp, #28]
 800aacc:	210a      	movs	r1, #10
 800aace:	fb01 e303 	mla	r3, r1, r3, lr
 800aad2:	9307      	str	r3, [sp, #28]
 800aad4:	2100      	movs	r1, #0
 800aad6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aad8:	1c58      	adds	r0, r3, #1
 800aada:	901b      	str	r0, [sp, #108]	; 0x6c
 800aadc:	785b      	ldrb	r3, [r3, #1]
 800aade:	4608      	mov	r0, r1
 800aae0:	e7c9      	b.n	800aa76 <_strtod_l+0x1d6>
 800aae2:	9805      	ldr	r0, [sp, #20]
 800aae4:	e7d3      	b.n	800aa8e <_strtod_l+0x1ee>
 800aae6:	2908      	cmp	r1, #8
 800aae8:	f101 0101 	add.w	r1, r1, #1
 800aaec:	dc03      	bgt.n	800aaf6 <_strtod_l+0x256>
 800aaee:	9b07      	ldr	r3, [sp, #28]
 800aaf0:	437b      	muls	r3, r7
 800aaf2:	9307      	str	r3, [sp, #28]
 800aaf4:	e7e1      	b.n	800aaba <_strtod_l+0x21a>
 800aaf6:	2910      	cmp	r1, #16
 800aaf8:	bfd8      	it	le
 800aafa:	437d      	mulle	r5, r7
 800aafc:	e7dd      	b.n	800aaba <_strtod_l+0x21a>
 800aafe:	2c10      	cmp	r4, #16
 800ab00:	bfdc      	itt	le
 800ab02:	210a      	movle	r1, #10
 800ab04:	fb01 e505 	mlale	r5, r1, r5, lr
 800ab08:	e7e4      	b.n	800aad4 <_strtod_l+0x234>
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	9304      	str	r3, [sp, #16]
 800ab0e:	e781      	b.n	800aa14 <_strtod_l+0x174>
 800ab10:	f04f 0c01 	mov.w	ip, #1
 800ab14:	1cb3      	adds	r3, r6, #2
 800ab16:	931b      	str	r3, [sp, #108]	; 0x6c
 800ab18:	78b3      	ldrb	r3, [r6, #2]
 800ab1a:	e78a      	b.n	800aa32 <_strtod_l+0x192>
 800ab1c:	f04f 0c00 	mov.w	ip, #0
 800ab20:	e7f8      	b.n	800ab14 <_strtod_l+0x274>
 800ab22:	bf00      	nop
 800ab24:	0800e730 	.word	0x0800e730
 800ab28:	7ff00000 	.word	0x7ff00000
 800ab2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab2e:	1c5f      	adds	r7, r3, #1
 800ab30:	971b      	str	r7, [sp, #108]	; 0x6c
 800ab32:	785b      	ldrb	r3, [r3, #1]
 800ab34:	2b30      	cmp	r3, #48	; 0x30
 800ab36:	d0f9      	beq.n	800ab2c <_strtod_l+0x28c>
 800ab38:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800ab3c:	2f08      	cmp	r7, #8
 800ab3e:	f63f af7d 	bhi.w	800aa3c <_strtod_l+0x19c>
 800ab42:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ab46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab48:	930a      	str	r3, [sp, #40]	; 0x28
 800ab4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ab4c:	1c5f      	adds	r7, r3, #1
 800ab4e:	971b      	str	r7, [sp, #108]	; 0x6c
 800ab50:	785b      	ldrb	r3, [r3, #1]
 800ab52:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800ab56:	f1b8 0f09 	cmp.w	r8, #9
 800ab5a:	d937      	bls.n	800abcc <_strtod_l+0x32c>
 800ab5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ab5e:	1a7f      	subs	r7, r7, r1
 800ab60:	2f08      	cmp	r7, #8
 800ab62:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ab66:	dc37      	bgt.n	800abd8 <_strtod_l+0x338>
 800ab68:	45be      	cmp	lr, r7
 800ab6a:	bfa8      	it	ge
 800ab6c:	46be      	movge	lr, r7
 800ab6e:	f1bc 0f00 	cmp.w	ip, #0
 800ab72:	d001      	beq.n	800ab78 <_strtod_l+0x2d8>
 800ab74:	f1ce 0e00 	rsb	lr, lr, #0
 800ab78:	2c00      	cmp	r4, #0
 800ab7a:	d151      	bne.n	800ac20 <_strtod_l+0x380>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	f47f aece 	bne.w	800a91e <_strtod_l+0x7e>
 800ab82:	9a06      	ldr	r2, [sp, #24]
 800ab84:	2a00      	cmp	r2, #0
 800ab86:	f47f aeca 	bne.w	800a91e <_strtod_l+0x7e>
 800ab8a:	9a04      	ldr	r2, [sp, #16]
 800ab8c:	2a00      	cmp	r2, #0
 800ab8e:	f47f aee4 	bne.w	800a95a <_strtod_l+0xba>
 800ab92:	2b4e      	cmp	r3, #78	; 0x4e
 800ab94:	d027      	beq.n	800abe6 <_strtod_l+0x346>
 800ab96:	dc21      	bgt.n	800abdc <_strtod_l+0x33c>
 800ab98:	2b49      	cmp	r3, #73	; 0x49
 800ab9a:	f47f aede 	bne.w	800a95a <_strtod_l+0xba>
 800ab9e:	49a0      	ldr	r1, [pc, #640]	; (800ae20 <_strtod_l+0x580>)
 800aba0:	a81b      	add	r0, sp, #108	; 0x6c
 800aba2:	f002 f811 	bl	800cbc8 <__match>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	f43f aed7 	beq.w	800a95a <_strtod_l+0xba>
 800abac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abae:	499d      	ldr	r1, [pc, #628]	; (800ae24 <_strtod_l+0x584>)
 800abb0:	3b01      	subs	r3, #1
 800abb2:	a81b      	add	r0, sp, #108	; 0x6c
 800abb4:	931b      	str	r3, [sp, #108]	; 0x6c
 800abb6:	f002 f807 	bl	800cbc8 <__match>
 800abba:	b910      	cbnz	r0, 800abc2 <_strtod_l+0x322>
 800abbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abbe:	3301      	adds	r3, #1
 800abc0:	931b      	str	r3, [sp, #108]	; 0x6c
 800abc2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800ae38 <_strtod_l+0x598>
 800abc6:	f04f 0a00 	mov.w	sl, #0
 800abca:	e6a8      	b.n	800a91e <_strtod_l+0x7e>
 800abcc:	210a      	movs	r1, #10
 800abce:	fb01 3e0e 	mla	lr, r1, lr, r3
 800abd2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800abd6:	e7b8      	b.n	800ab4a <_strtod_l+0x2aa>
 800abd8:	46be      	mov	lr, r7
 800abda:	e7c8      	b.n	800ab6e <_strtod_l+0x2ce>
 800abdc:	2b69      	cmp	r3, #105	; 0x69
 800abde:	d0de      	beq.n	800ab9e <_strtod_l+0x2fe>
 800abe0:	2b6e      	cmp	r3, #110	; 0x6e
 800abe2:	f47f aeba 	bne.w	800a95a <_strtod_l+0xba>
 800abe6:	4990      	ldr	r1, [pc, #576]	; (800ae28 <_strtod_l+0x588>)
 800abe8:	a81b      	add	r0, sp, #108	; 0x6c
 800abea:	f001 ffed 	bl	800cbc8 <__match>
 800abee:	2800      	cmp	r0, #0
 800abf0:	f43f aeb3 	beq.w	800a95a <_strtod_l+0xba>
 800abf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	2b28      	cmp	r3, #40	; 0x28
 800abfa:	d10e      	bne.n	800ac1a <_strtod_l+0x37a>
 800abfc:	aa1e      	add	r2, sp, #120	; 0x78
 800abfe:	498b      	ldr	r1, [pc, #556]	; (800ae2c <_strtod_l+0x58c>)
 800ac00:	a81b      	add	r0, sp, #108	; 0x6c
 800ac02:	f001 fff5 	bl	800cbf0 <__hexnan>
 800ac06:	2805      	cmp	r0, #5
 800ac08:	d107      	bne.n	800ac1a <_strtod_l+0x37a>
 800ac0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ac0c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800ac10:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ac14:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ac18:	e681      	b.n	800a91e <_strtod_l+0x7e>
 800ac1a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800ae40 <_strtod_l+0x5a0>
 800ac1e:	e7d2      	b.n	800abc6 <_strtod_l+0x326>
 800ac20:	ebae 0302 	sub.w	r3, lr, r2
 800ac24:	9306      	str	r3, [sp, #24]
 800ac26:	9b05      	ldr	r3, [sp, #20]
 800ac28:	9807      	ldr	r0, [sp, #28]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	bf08      	it	eq
 800ac2e:	4623      	moveq	r3, r4
 800ac30:	2c10      	cmp	r4, #16
 800ac32:	9305      	str	r3, [sp, #20]
 800ac34:	46a0      	mov	r8, r4
 800ac36:	bfa8      	it	ge
 800ac38:	f04f 0810 	movge.w	r8, #16
 800ac3c:	f7f5 fc6a 	bl	8000514 <__aeabi_ui2d>
 800ac40:	2c09      	cmp	r4, #9
 800ac42:	4682      	mov	sl, r0
 800ac44:	468b      	mov	fp, r1
 800ac46:	dc13      	bgt.n	800ac70 <_strtod_l+0x3d0>
 800ac48:	9b06      	ldr	r3, [sp, #24]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	f43f ae67 	beq.w	800a91e <_strtod_l+0x7e>
 800ac50:	9b06      	ldr	r3, [sp, #24]
 800ac52:	dd7a      	ble.n	800ad4a <_strtod_l+0x4aa>
 800ac54:	2b16      	cmp	r3, #22
 800ac56:	dc61      	bgt.n	800ad1c <_strtod_l+0x47c>
 800ac58:	4a75      	ldr	r2, [pc, #468]	; (800ae30 <_strtod_l+0x590>)
 800ac5a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800ac5e:	e9de 0100 	ldrd	r0, r1, [lr]
 800ac62:	4652      	mov	r2, sl
 800ac64:	465b      	mov	r3, fp
 800ac66:	f7f5 fccf 	bl	8000608 <__aeabi_dmul>
 800ac6a:	4682      	mov	sl, r0
 800ac6c:	468b      	mov	fp, r1
 800ac6e:	e656      	b.n	800a91e <_strtod_l+0x7e>
 800ac70:	4b6f      	ldr	r3, [pc, #444]	; (800ae30 <_strtod_l+0x590>)
 800ac72:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ac76:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ac7a:	f7f5 fcc5 	bl	8000608 <__aeabi_dmul>
 800ac7e:	4606      	mov	r6, r0
 800ac80:	4628      	mov	r0, r5
 800ac82:	460f      	mov	r7, r1
 800ac84:	f7f5 fc46 	bl	8000514 <__aeabi_ui2d>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	4639      	mov	r1, r7
 800ac90:	f7f5 fb04 	bl	800029c <__adddf3>
 800ac94:	2c0f      	cmp	r4, #15
 800ac96:	4682      	mov	sl, r0
 800ac98:	468b      	mov	fp, r1
 800ac9a:	ddd5      	ble.n	800ac48 <_strtod_l+0x3a8>
 800ac9c:	9b06      	ldr	r3, [sp, #24]
 800ac9e:	eba4 0808 	sub.w	r8, r4, r8
 800aca2:	4498      	add	r8, r3
 800aca4:	f1b8 0f00 	cmp.w	r8, #0
 800aca8:	f340 8096 	ble.w	800add8 <_strtod_l+0x538>
 800acac:	f018 030f 	ands.w	r3, r8, #15
 800acb0:	d00a      	beq.n	800acc8 <_strtod_l+0x428>
 800acb2:	495f      	ldr	r1, [pc, #380]	; (800ae30 <_strtod_l+0x590>)
 800acb4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800acb8:	4652      	mov	r2, sl
 800acba:	465b      	mov	r3, fp
 800acbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acc0:	f7f5 fca2 	bl	8000608 <__aeabi_dmul>
 800acc4:	4682      	mov	sl, r0
 800acc6:	468b      	mov	fp, r1
 800acc8:	f038 080f 	bics.w	r8, r8, #15
 800accc:	d073      	beq.n	800adb6 <_strtod_l+0x516>
 800acce:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800acd2:	dd47      	ble.n	800ad64 <_strtod_l+0x4c4>
 800acd4:	2400      	movs	r4, #0
 800acd6:	46a0      	mov	r8, r4
 800acd8:	9407      	str	r4, [sp, #28]
 800acda:	9405      	str	r4, [sp, #20]
 800acdc:	2322      	movs	r3, #34	; 0x22
 800acde:	f8df b158 	ldr.w	fp, [pc, #344]	; 800ae38 <_strtod_l+0x598>
 800ace2:	f8c9 3000 	str.w	r3, [r9]
 800ace6:	f04f 0a00 	mov.w	sl, #0
 800acea:	9b07      	ldr	r3, [sp, #28]
 800acec:	2b00      	cmp	r3, #0
 800acee:	f43f ae16 	beq.w	800a91e <_strtod_l+0x7e>
 800acf2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800acf4:	4648      	mov	r0, r9
 800acf6:	f002 f8d1 	bl	800ce9c <_Bfree>
 800acfa:	9905      	ldr	r1, [sp, #20]
 800acfc:	4648      	mov	r0, r9
 800acfe:	f002 f8cd 	bl	800ce9c <_Bfree>
 800ad02:	4641      	mov	r1, r8
 800ad04:	4648      	mov	r0, r9
 800ad06:	f002 f8c9 	bl	800ce9c <_Bfree>
 800ad0a:	9907      	ldr	r1, [sp, #28]
 800ad0c:	4648      	mov	r0, r9
 800ad0e:	f002 f8c5 	bl	800ce9c <_Bfree>
 800ad12:	4621      	mov	r1, r4
 800ad14:	4648      	mov	r0, r9
 800ad16:	f002 f8c1 	bl	800ce9c <_Bfree>
 800ad1a:	e600      	b.n	800a91e <_strtod_l+0x7e>
 800ad1c:	9a06      	ldr	r2, [sp, #24]
 800ad1e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800ad22:	4293      	cmp	r3, r2
 800ad24:	dbba      	blt.n	800ac9c <_strtod_l+0x3fc>
 800ad26:	4d42      	ldr	r5, [pc, #264]	; (800ae30 <_strtod_l+0x590>)
 800ad28:	f1c4 040f 	rsb	r4, r4, #15
 800ad2c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800ad30:	4652      	mov	r2, sl
 800ad32:	465b      	mov	r3, fp
 800ad34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad38:	f7f5 fc66 	bl	8000608 <__aeabi_dmul>
 800ad3c:	9b06      	ldr	r3, [sp, #24]
 800ad3e:	1b1c      	subs	r4, r3, r4
 800ad40:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800ad44:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad48:	e78d      	b.n	800ac66 <_strtod_l+0x3c6>
 800ad4a:	f113 0f16 	cmn.w	r3, #22
 800ad4e:	dba5      	blt.n	800ac9c <_strtod_l+0x3fc>
 800ad50:	4a37      	ldr	r2, [pc, #220]	; (800ae30 <_strtod_l+0x590>)
 800ad52:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800ad56:	e9d2 2300 	ldrd	r2, r3, [r2]
 800ad5a:	4650      	mov	r0, sl
 800ad5c:	4659      	mov	r1, fp
 800ad5e:	f7f5 fd7d 	bl	800085c <__aeabi_ddiv>
 800ad62:	e782      	b.n	800ac6a <_strtod_l+0x3ca>
 800ad64:	2300      	movs	r3, #0
 800ad66:	4e33      	ldr	r6, [pc, #204]	; (800ae34 <_strtod_l+0x594>)
 800ad68:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ad6c:	4650      	mov	r0, sl
 800ad6e:	4659      	mov	r1, fp
 800ad70:	461d      	mov	r5, r3
 800ad72:	f1b8 0f01 	cmp.w	r8, #1
 800ad76:	dc21      	bgt.n	800adbc <_strtod_l+0x51c>
 800ad78:	b10b      	cbz	r3, 800ad7e <_strtod_l+0x4de>
 800ad7a:	4682      	mov	sl, r0
 800ad7c:	468b      	mov	fp, r1
 800ad7e:	4b2d      	ldr	r3, [pc, #180]	; (800ae34 <_strtod_l+0x594>)
 800ad80:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ad84:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ad88:	4652      	mov	r2, sl
 800ad8a:	465b      	mov	r3, fp
 800ad8c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ad90:	f7f5 fc3a 	bl	8000608 <__aeabi_dmul>
 800ad94:	4b28      	ldr	r3, [pc, #160]	; (800ae38 <_strtod_l+0x598>)
 800ad96:	460a      	mov	r2, r1
 800ad98:	400b      	ands	r3, r1
 800ad9a:	4928      	ldr	r1, [pc, #160]	; (800ae3c <_strtod_l+0x59c>)
 800ad9c:	428b      	cmp	r3, r1
 800ad9e:	4682      	mov	sl, r0
 800ada0:	d898      	bhi.n	800acd4 <_strtod_l+0x434>
 800ada2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ada6:	428b      	cmp	r3, r1
 800ada8:	bf86      	itte	hi
 800adaa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ae44 <_strtod_l+0x5a4>
 800adae:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800adb2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800adb6:	2300      	movs	r3, #0
 800adb8:	9304      	str	r3, [sp, #16]
 800adba:	e077      	b.n	800aeac <_strtod_l+0x60c>
 800adbc:	f018 0f01 	tst.w	r8, #1
 800adc0:	d006      	beq.n	800add0 <_strtod_l+0x530>
 800adc2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800adc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adca:	f7f5 fc1d 	bl	8000608 <__aeabi_dmul>
 800adce:	2301      	movs	r3, #1
 800add0:	3501      	adds	r5, #1
 800add2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800add6:	e7cc      	b.n	800ad72 <_strtod_l+0x4d2>
 800add8:	d0ed      	beq.n	800adb6 <_strtod_l+0x516>
 800adda:	f1c8 0800 	rsb	r8, r8, #0
 800adde:	f018 020f 	ands.w	r2, r8, #15
 800ade2:	d00a      	beq.n	800adfa <_strtod_l+0x55a>
 800ade4:	4b12      	ldr	r3, [pc, #72]	; (800ae30 <_strtod_l+0x590>)
 800ade6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adea:	4650      	mov	r0, sl
 800adec:	4659      	mov	r1, fp
 800adee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf2:	f7f5 fd33 	bl	800085c <__aeabi_ddiv>
 800adf6:	4682      	mov	sl, r0
 800adf8:	468b      	mov	fp, r1
 800adfa:	ea5f 1828 	movs.w	r8, r8, asr #4
 800adfe:	d0da      	beq.n	800adb6 <_strtod_l+0x516>
 800ae00:	f1b8 0f1f 	cmp.w	r8, #31
 800ae04:	dd20      	ble.n	800ae48 <_strtod_l+0x5a8>
 800ae06:	2400      	movs	r4, #0
 800ae08:	46a0      	mov	r8, r4
 800ae0a:	9407      	str	r4, [sp, #28]
 800ae0c:	9405      	str	r4, [sp, #20]
 800ae0e:	2322      	movs	r3, #34	; 0x22
 800ae10:	f04f 0a00 	mov.w	sl, #0
 800ae14:	f04f 0b00 	mov.w	fp, #0
 800ae18:	f8c9 3000 	str.w	r3, [r9]
 800ae1c:	e765      	b.n	800acea <_strtod_l+0x44a>
 800ae1e:	bf00      	nop
 800ae20:	0800e6f9 	.word	0x0800e6f9
 800ae24:	0800e783 	.word	0x0800e783
 800ae28:	0800e701 	.word	0x0800e701
 800ae2c:	0800e744 	.word	0x0800e744
 800ae30:	0800e828 	.word	0x0800e828
 800ae34:	0800e800 	.word	0x0800e800
 800ae38:	7ff00000 	.word	0x7ff00000
 800ae3c:	7ca00000 	.word	0x7ca00000
 800ae40:	fff80000 	.word	0xfff80000
 800ae44:	7fefffff 	.word	0x7fefffff
 800ae48:	f018 0310 	ands.w	r3, r8, #16
 800ae4c:	bf18      	it	ne
 800ae4e:	236a      	movne	r3, #106	; 0x6a
 800ae50:	4da0      	ldr	r5, [pc, #640]	; (800b0d4 <_strtod_l+0x834>)
 800ae52:	9304      	str	r3, [sp, #16]
 800ae54:	4650      	mov	r0, sl
 800ae56:	4659      	mov	r1, fp
 800ae58:	2300      	movs	r3, #0
 800ae5a:	f1b8 0f00 	cmp.w	r8, #0
 800ae5e:	f300 810a 	bgt.w	800b076 <_strtod_l+0x7d6>
 800ae62:	b10b      	cbz	r3, 800ae68 <_strtod_l+0x5c8>
 800ae64:	4682      	mov	sl, r0
 800ae66:	468b      	mov	fp, r1
 800ae68:	9b04      	ldr	r3, [sp, #16]
 800ae6a:	b1bb      	cbz	r3, 800ae9c <_strtod_l+0x5fc>
 800ae6c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ae70:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	4659      	mov	r1, fp
 800ae78:	dd10      	ble.n	800ae9c <_strtod_l+0x5fc>
 800ae7a:	2b1f      	cmp	r3, #31
 800ae7c:	f340 8107 	ble.w	800b08e <_strtod_l+0x7ee>
 800ae80:	2b34      	cmp	r3, #52	; 0x34
 800ae82:	bfde      	ittt	le
 800ae84:	3b20      	suble	r3, #32
 800ae86:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800ae8a:	fa02 f303 	lslle.w	r3, r2, r3
 800ae8e:	f04f 0a00 	mov.w	sl, #0
 800ae92:	bfcc      	ite	gt
 800ae94:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ae98:	ea03 0b01 	andle.w	fp, r3, r1
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	2300      	movs	r3, #0
 800aea0:	4650      	mov	r0, sl
 800aea2:	4659      	mov	r1, fp
 800aea4:	f7f5 fe18 	bl	8000ad8 <__aeabi_dcmpeq>
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	d1ac      	bne.n	800ae06 <_strtod_l+0x566>
 800aeac:	9b07      	ldr	r3, [sp, #28]
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	9a05      	ldr	r2, [sp, #20]
 800aeb2:	9908      	ldr	r1, [sp, #32]
 800aeb4:	4623      	mov	r3, r4
 800aeb6:	4648      	mov	r0, r9
 800aeb8:	f002 f842 	bl	800cf40 <__s2b>
 800aebc:	9007      	str	r0, [sp, #28]
 800aebe:	2800      	cmp	r0, #0
 800aec0:	f43f af08 	beq.w	800acd4 <_strtod_l+0x434>
 800aec4:	9a06      	ldr	r2, [sp, #24]
 800aec6:	9b06      	ldr	r3, [sp, #24]
 800aec8:	2a00      	cmp	r2, #0
 800aeca:	f1c3 0300 	rsb	r3, r3, #0
 800aece:	bfa8      	it	ge
 800aed0:	2300      	movge	r3, #0
 800aed2:	930e      	str	r3, [sp, #56]	; 0x38
 800aed4:	2400      	movs	r4, #0
 800aed6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aeda:	9316      	str	r3, [sp, #88]	; 0x58
 800aedc:	46a0      	mov	r8, r4
 800aede:	9b07      	ldr	r3, [sp, #28]
 800aee0:	4648      	mov	r0, r9
 800aee2:	6859      	ldr	r1, [r3, #4]
 800aee4:	f001 ffa6 	bl	800ce34 <_Balloc>
 800aee8:	9005      	str	r0, [sp, #20]
 800aeea:	2800      	cmp	r0, #0
 800aeec:	f43f aef6 	beq.w	800acdc <_strtod_l+0x43c>
 800aef0:	9b07      	ldr	r3, [sp, #28]
 800aef2:	691a      	ldr	r2, [r3, #16]
 800aef4:	3202      	adds	r2, #2
 800aef6:	f103 010c 	add.w	r1, r3, #12
 800aefa:	0092      	lsls	r2, r2, #2
 800aefc:	300c      	adds	r0, #12
 800aefe:	f7fe fdbf 	bl	8009a80 <memcpy>
 800af02:	aa1e      	add	r2, sp, #120	; 0x78
 800af04:	a91d      	add	r1, sp, #116	; 0x74
 800af06:	ec4b ab10 	vmov	d0, sl, fp
 800af0a:	4648      	mov	r0, r9
 800af0c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800af10:	f002 fad2 	bl	800d4b8 <__d2b>
 800af14:	901c      	str	r0, [sp, #112]	; 0x70
 800af16:	2800      	cmp	r0, #0
 800af18:	f43f aee0 	beq.w	800acdc <_strtod_l+0x43c>
 800af1c:	2101      	movs	r1, #1
 800af1e:	4648      	mov	r0, r9
 800af20:	f002 f89a 	bl	800d058 <__i2b>
 800af24:	4680      	mov	r8, r0
 800af26:	2800      	cmp	r0, #0
 800af28:	f43f aed8 	beq.w	800acdc <_strtod_l+0x43c>
 800af2c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800af2e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800af30:	2e00      	cmp	r6, #0
 800af32:	bfab      	itete	ge
 800af34:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800af36:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800af38:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800af3a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800af3c:	bfac      	ite	ge
 800af3e:	18f7      	addge	r7, r6, r3
 800af40:	1b9d      	sublt	r5, r3, r6
 800af42:	9b04      	ldr	r3, [sp, #16]
 800af44:	1af6      	subs	r6, r6, r3
 800af46:	4416      	add	r6, r2
 800af48:	4b63      	ldr	r3, [pc, #396]	; (800b0d8 <_strtod_l+0x838>)
 800af4a:	3e01      	subs	r6, #1
 800af4c:	429e      	cmp	r6, r3
 800af4e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800af52:	f280 80af 	bge.w	800b0b4 <_strtod_l+0x814>
 800af56:	1b9b      	subs	r3, r3, r6
 800af58:	2b1f      	cmp	r3, #31
 800af5a:	eba2 0203 	sub.w	r2, r2, r3
 800af5e:	f04f 0101 	mov.w	r1, #1
 800af62:	f300 809b 	bgt.w	800b09c <_strtod_l+0x7fc>
 800af66:	fa01 f303 	lsl.w	r3, r1, r3
 800af6a:	930f      	str	r3, [sp, #60]	; 0x3c
 800af6c:	2300      	movs	r3, #0
 800af6e:	930a      	str	r3, [sp, #40]	; 0x28
 800af70:	18be      	adds	r6, r7, r2
 800af72:	9b04      	ldr	r3, [sp, #16]
 800af74:	42b7      	cmp	r7, r6
 800af76:	4415      	add	r5, r2
 800af78:	441d      	add	r5, r3
 800af7a:	463b      	mov	r3, r7
 800af7c:	bfa8      	it	ge
 800af7e:	4633      	movge	r3, r6
 800af80:	42ab      	cmp	r3, r5
 800af82:	bfa8      	it	ge
 800af84:	462b      	movge	r3, r5
 800af86:	2b00      	cmp	r3, #0
 800af88:	bfc2      	ittt	gt
 800af8a:	1af6      	subgt	r6, r6, r3
 800af8c:	1aed      	subgt	r5, r5, r3
 800af8e:	1aff      	subgt	r7, r7, r3
 800af90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af92:	b1bb      	cbz	r3, 800afc4 <_strtod_l+0x724>
 800af94:	4641      	mov	r1, r8
 800af96:	461a      	mov	r2, r3
 800af98:	4648      	mov	r0, r9
 800af9a:	f002 f8fd 	bl	800d198 <__pow5mult>
 800af9e:	4680      	mov	r8, r0
 800afa0:	2800      	cmp	r0, #0
 800afa2:	f43f ae9b 	beq.w	800acdc <_strtod_l+0x43c>
 800afa6:	4601      	mov	r1, r0
 800afa8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800afaa:	4648      	mov	r0, r9
 800afac:	f002 f85d 	bl	800d06a <__multiply>
 800afb0:	900c      	str	r0, [sp, #48]	; 0x30
 800afb2:	2800      	cmp	r0, #0
 800afb4:	f43f ae92 	beq.w	800acdc <_strtod_l+0x43c>
 800afb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800afba:	4648      	mov	r0, r9
 800afbc:	f001 ff6e 	bl	800ce9c <_Bfree>
 800afc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afc2:	931c      	str	r3, [sp, #112]	; 0x70
 800afc4:	2e00      	cmp	r6, #0
 800afc6:	dc7a      	bgt.n	800b0be <_strtod_l+0x81e>
 800afc8:	9b06      	ldr	r3, [sp, #24]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	dd08      	ble.n	800afe0 <_strtod_l+0x740>
 800afce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800afd0:	9905      	ldr	r1, [sp, #20]
 800afd2:	4648      	mov	r0, r9
 800afd4:	f002 f8e0 	bl	800d198 <__pow5mult>
 800afd8:	9005      	str	r0, [sp, #20]
 800afda:	2800      	cmp	r0, #0
 800afdc:	f43f ae7e 	beq.w	800acdc <_strtod_l+0x43c>
 800afe0:	2d00      	cmp	r5, #0
 800afe2:	dd08      	ble.n	800aff6 <_strtod_l+0x756>
 800afe4:	462a      	mov	r2, r5
 800afe6:	9905      	ldr	r1, [sp, #20]
 800afe8:	4648      	mov	r0, r9
 800afea:	f002 f923 	bl	800d234 <__lshift>
 800afee:	9005      	str	r0, [sp, #20]
 800aff0:	2800      	cmp	r0, #0
 800aff2:	f43f ae73 	beq.w	800acdc <_strtod_l+0x43c>
 800aff6:	2f00      	cmp	r7, #0
 800aff8:	dd08      	ble.n	800b00c <_strtod_l+0x76c>
 800affa:	4641      	mov	r1, r8
 800affc:	463a      	mov	r2, r7
 800affe:	4648      	mov	r0, r9
 800b000:	f002 f918 	bl	800d234 <__lshift>
 800b004:	4680      	mov	r8, r0
 800b006:	2800      	cmp	r0, #0
 800b008:	f43f ae68 	beq.w	800acdc <_strtod_l+0x43c>
 800b00c:	9a05      	ldr	r2, [sp, #20]
 800b00e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b010:	4648      	mov	r0, r9
 800b012:	f002 f97d 	bl	800d310 <__mdiff>
 800b016:	4604      	mov	r4, r0
 800b018:	2800      	cmp	r0, #0
 800b01a:	f43f ae5f 	beq.w	800acdc <_strtod_l+0x43c>
 800b01e:	68c3      	ldr	r3, [r0, #12]
 800b020:	930c      	str	r3, [sp, #48]	; 0x30
 800b022:	2300      	movs	r3, #0
 800b024:	60c3      	str	r3, [r0, #12]
 800b026:	4641      	mov	r1, r8
 800b028:	f002 f958 	bl	800d2dc <__mcmp>
 800b02c:	2800      	cmp	r0, #0
 800b02e:	da55      	bge.n	800b0dc <_strtod_l+0x83c>
 800b030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b032:	b9e3      	cbnz	r3, 800b06e <_strtod_l+0x7ce>
 800b034:	f1ba 0f00 	cmp.w	sl, #0
 800b038:	d119      	bne.n	800b06e <_strtod_l+0x7ce>
 800b03a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b03e:	b9b3      	cbnz	r3, 800b06e <_strtod_l+0x7ce>
 800b040:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b044:	0d1b      	lsrs	r3, r3, #20
 800b046:	051b      	lsls	r3, r3, #20
 800b048:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b04c:	d90f      	bls.n	800b06e <_strtod_l+0x7ce>
 800b04e:	6963      	ldr	r3, [r4, #20]
 800b050:	b913      	cbnz	r3, 800b058 <_strtod_l+0x7b8>
 800b052:	6923      	ldr	r3, [r4, #16]
 800b054:	2b01      	cmp	r3, #1
 800b056:	dd0a      	ble.n	800b06e <_strtod_l+0x7ce>
 800b058:	4621      	mov	r1, r4
 800b05a:	2201      	movs	r2, #1
 800b05c:	4648      	mov	r0, r9
 800b05e:	f002 f8e9 	bl	800d234 <__lshift>
 800b062:	4641      	mov	r1, r8
 800b064:	4604      	mov	r4, r0
 800b066:	f002 f939 	bl	800d2dc <__mcmp>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	dc67      	bgt.n	800b13e <_strtod_l+0x89e>
 800b06e:	9b04      	ldr	r3, [sp, #16]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d171      	bne.n	800b158 <_strtod_l+0x8b8>
 800b074:	e63d      	b.n	800acf2 <_strtod_l+0x452>
 800b076:	f018 0f01 	tst.w	r8, #1
 800b07a:	d004      	beq.n	800b086 <_strtod_l+0x7e6>
 800b07c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b080:	f7f5 fac2 	bl	8000608 <__aeabi_dmul>
 800b084:	2301      	movs	r3, #1
 800b086:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b08a:	3508      	adds	r5, #8
 800b08c:	e6e5      	b.n	800ae5a <_strtod_l+0x5ba>
 800b08e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b092:	fa02 f303 	lsl.w	r3, r2, r3
 800b096:	ea03 0a0a 	and.w	sl, r3, sl
 800b09a:	e6ff      	b.n	800ae9c <_strtod_l+0x5fc>
 800b09c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b0a0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b0a4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b0a8:	36e2      	adds	r6, #226	; 0xe2
 800b0aa:	fa01 f306 	lsl.w	r3, r1, r6
 800b0ae:	930a      	str	r3, [sp, #40]	; 0x28
 800b0b0:	910f      	str	r1, [sp, #60]	; 0x3c
 800b0b2:	e75d      	b.n	800af70 <_strtod_l+0x6d0>
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0bc:	e758      	b.n	800af70 <_strtod_l+0x6d0>
 800b0be:	4632      	mov	r2, r6
 800b0c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b0c2:	4648      	mov	r0, r9
 800b0c4:	f002 f8b6 	bl	800d234 <__lshift>
 800b0c8:	901c      	str	r0, [sp, #112]	; 0x70
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	f47f af7c 	bne.w	800afc8 <_strtod_l+0x728>
 800b0d0:	e604      	b.n	800acdc <_strtod_l+0x43c>
 800b0d2:	bf00      	nop
 800b0d4:	0800e758 	.word	0x0800e758
 800b0d8:	fffffc02 	.word	0xfffffc02
 800b0dc:	465d      	mov	r5, fp
 800b0de:	f040 8086 	bne.w	800b1ee <_strtod_l+0x94e>
 800b0e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0e8:	b32a      	cbz	r2, 800b136 <_strtod_l+0x896>
 800b0ea:	4aaf      	ldr	r2, [pc, #700]	; (800b3a8 <_strtod_l+0xb08>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d153      	bne.n	800b198 <_strtod_l+0x8f8>
 800b0f0:	9b04      	ldr	r3, [sp, #16]
 800b0f2:	4650      	mov	r0, sl
 800b0f4:	b1d3      	cbz	r3, 800b12c <_strtod_l+0x88c>
 800b0f6:	4aad      	ldr	r2, [pc, #692]	; (800b3ac <_strtod_l+0xb0c>)
 800b0f8:	402a      	ands	r2, r5
 800b0fa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b0fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b102:	d816      	bhi.n	800b132 <_strtod_l+0x892>
 800b104:	0d12      	lsrs	r2, r2, #20
 800b106:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b10a:	fa01 f303 	lsl.w	r3, r1, r3
 800b10e:	4298      	cmp	r0, r3
 800b110:	d142      	bne.n	800b198 <_strtod_l+0x8f8>
 800b112:	4ba7      	ldr	r3, [pc, #668]	; (800b3b0 <_strtod_l+0xb10>)
 800b114:	429d      	cmp	r5, r3
 800b116:	d102      	bne.n	800b11e <_strtod_l+0x87e>
 800b118:	3001      	adds	r0, #1
 800b11a:	f43f addf 	beq.w	800acdc <_strtod_l+0x43c>
 800b11e:	4ba3      	ldr	r3, [pc, #652]	; (800b3ac <_strtod_l+0xb0c>)
 800b120:	402b      	ands	r3, r5
 800b122:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b126:	f04f 0a00 	mov.w	sl, #0
 800b12a:	e7a0      	b.n	800b06e <_strtod_l+0x7ce>
 800b12c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b130:	e7ed      	b.n	800b10e <_strtod_l+0x86e>
 800b132:	460b      	mov	r3, r1
 800b134:	e7eb      	b.n	800b10e <_strtod_l+0x86e>
 800b136:	bb7b      	cbnz	r3, 800b198 <_strtod_l+0x8f8>
 800b138:	f1ba 0f00 	cmp.w	sl, #0
 800b13c:	d12c      	bne.n	800b198 <_strtod_l+0x8f8>
 800b13e:	9904      	ldr	r1, [sp, #16]
 800b140:	4a9a      	ldr	r2, [pc, #616]	; (800b3ac <_strtod_l+0xb0c>)
 800b142:	465b      	mov	r3, fp
 800b144:	b1f1      	cbz	r1, 800b184 <_strtod_l+0x8e4>
 800b146:	ea02 010b 	and.w	r1, r2, fp
 800b14a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b14e:	dc19      	bgt.n	800b184 <_strtod_l+0x8e4>
 800b150:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b154:	f77f ae5b 	ble.w	800ae0e <_strtod_l+0x56e>
 800b158:	4a96      	ldr	r2, [pc, #600]	; (800b3b4 <_strtod_l+0xb14>)
 800b15a:	2300      	movs	r3, #0
 800b15c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b160:	4650      	mov	r0, sl
 800b162:	4659      	mov	r1, fp
 800b164:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b168:	f7f5 fa4e 	bl	8000608 <__aeabi_dmul>
 800b16c:	4682      	mov	sl, r0
 800b16e:	468b      	mov	fp, r1
 800b170:	2900      	cmp	r1, #0
 800b172:	f47f adbe 	bne.w	800acf2 <_strtod_l+0x452>
 800b176:	2800      	cmp	r0, #0
 800b178:	f47f adbb 	bne.w	800acf2 <_strtod_l+0x452>
 800b17c:	2322      	movs	r3, #34	; 0x22
 800b17e:	f8c9 3000 	str.w	r3, [r9]
 800b182:	e5b6      	b.n	800acf2 <_strtod_l+0x452>
 800b184:	4013      	ands	r3, r2
 800b186:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b18a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b18e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b192:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b196:	e76a      	b.n	800b06e <_strtod_l+0x7ce>
 800b198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b19a:	b193      	cbz	r3, 800b1c2 <_strtod_l+0x922>
 800b19c:	422b      	tst	r3, r5
 800b19e:	f43f af66 	beq.w	800b06e <_strtod_l+0x7ce>
 800b1a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1a4:	9a04      	ldr	r2, [sp, #16]
 800b1a6:	4650      	mov	r0, sl
 800b1a8:	4659      	mov	r1, fp
 800b1aa:	b173      	cbz	r3, 800b1ca <_strtod_l+0x92a>
 800b1ac:	f7ff fb5c 	bl	800a868 <sulp>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b1b8:	f7f5 f870 	bl	800029c <__adddf3>
 800b1bc:	4682      	mov	sl, r0
 800b1be:	468b      	mov	fp, r1
 800b1c0:	e755      	b.n	800b06e <_strtod_l+0x7ce>
 800b1c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1c4:	ea13 0f0a 	tst.w	r3, sl
 800b1c8:	e7e9      	b.n	800b19e <_strtod_l+0x8fe>
 800b1ca:	f7ff fb4d 	bl	800a868 <sulp>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b1d6:	f7f5 f85f 	bl	8000298 <__aeabi_dsub>
 800b1da:	2200      	movs	r2, #0
 800b1dc:	2300      	movs	r3, #0
 800b1de:	4682      	mov	sl, r0
 800b1e0:	468b      	mov	fp, r1
 800b1e2:	f7f5 fc79 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	f47f ae11 	bne.w	800ae0e <_strtod_l+0x56e>
 800b1ec:	e73f      	b.n	800b06e <_strtod_l+0x7ce>
 800b1ee:	4641      	mov	r1, r8
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f002 f9b0 	bl	800d556 <__ratio>
 800b1f6:	ec57 6b10 	vmov	r6, r7, d0
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b200:	ee10 0a10 	vmov	r0, s0
 800b204:	4639      	mov	r1, r7
 800b206:	f7f5 fc7b 	bl	8000b00 <__aeabi_dcmple>
 800b20a:	2800      	cmp	r0, #0
 800b20c:	d077      	beq.n	800b2fe <_strtod_l+0xa5e>
 800b20e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b210:	2b00      	cmp	r3, #0
 800b212:	d04a      	beq.n	800b2aa <_strtod_l+0xa0a>
 800b214:	4b68      	ldr	r3, [pc, #416]	; (800b3b8 <_strtod_l+0xb18>)
 800b216:	2200      	movs	r2, #0
 800b218:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b21c:	4f66      	ldr	r7, [pc, #408]	; (800b3b8 <_strtod_l+0xb18>)
 800b21e:	2600      	movs	r6, #0
 800b220:	4b62      	ldr	r3, [pc, #392]	; (800b3ac <_strtod_l+0xb0c>)
 800b222:	402b      	ands	r3, r5
 800b224:	930f      	str	r3, [sp, #60]	; 0x3c
 800b226:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b228:	4b64      	ldr	r3, [pc, #400]	; (800b3bc <_strtod_l+0xb1c>)
 800b22a:	429a      	cmp	r2, r3
 800b22c:	f040 80ce 	bne.w	800b3cc <_strtod_l+0xb2c>
 800b230:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b234:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b238:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800b23c:	ec4b ab10 	vmov	d0, sl, fp
 800b240:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b244:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b248:	f002 f8c0 	bl	800d3cc <__ulp>
 800b24c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b250:	ec53 2b10 	vmov	r2, r3, d0
 800b254:	f7f5 f9d8 	bl	8000608 <__aeabi_dmul>
 800b258:	4652      	mov	r2, sl
 800b25a:	465b      	mov	r3, fp
 800b25c:	f7f5 f81e 	bl	800029c <__adddf3>
 800b260:	460b      	mov	r3, r1
 800b262:	4952      	ldr	r1, [pc, #328]	; (800b3ac <_strtod_l+0xb0c>)
 800b264:	4a56      	ldr	r2, [pc, #344]	; (800b3c0 <_strtod_l+0xb20>)
 800b266:	4019      	ands	r1, r3
 800b268:	4291      	cmp	r1, r2
 800b26a:	4682      	mov	sl, r0
 800b26c:	d95b      	bls.n	800b326 <_strtod_l+0xa86>
 800b26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b270:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b274:	4293      	cmp	r3, r2
 800b276:	d103      	bne.n	800b280 <_strtod_l+0x9e0>
 800b278:	9b08      	ldr	r3, [sp, #32]
 800b27a:	3301      	adds	r3, #1
 800b27c:	f43f ad2e 	beq.w	800acdc <_strtod_l+0x43c>
 800b280:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800b3b0 <_strtod_l+0xb10>
 800b284:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b288:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b28a:	4648      	mov	r0, r9
 800b28c:	f001 fe06 	bl	800ce9c <_Bfree>
 800b290:	9905      	ldr	r1, [sp, #20]
 800b292:	4648      	mov	r0, r9
 800b294:	f001 fe02 	bl	800ce9c <_Bfree>
 800b298:	4641      	mov	r1, r8
 800b29a:	4648      	mov	r0, r9
 800b29c:	f001 fdfe 	bl	800ce9c <_Bfree>
 800b2a0:	4621      	mov	r1, r4
 800b2a2:	4648      	mov	r0, r9
 800b2a4:	f001 fdfa 	bl	800ce9c <_Bfree>
 800b2a8:	e619      	b.n	800aede <_strtod_l+0x63e>
 800b2aa:	f1ba 0f00 	cmp.w	sl, #0
 800b2ae:	d11a      	bne.n	800b2e6 <_strtod_l+0xa46>
 800b2b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2b4:	b9eb      	cbnz	r3, 800b2f2 <_strtod_l+0xa52>
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	4b3f      	ldr	r3, [pc, #252]	; (800b3b8 <_strtod_l+0xb18>)
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	4639      	mov	r1, r7
 800b2be:	f7f5 fc15 	bl	8000aec <__aeabi_dcmplt>
 800b2c2:	b9c8      	cbnz	r0, 800b2f8 <_strtod_l+0xa58>
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	4639      	mov	r1, r7
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	4b3e      	ldr	r3, [pc, #248]	; (800b3c4 <_strtod_l+0xb24>)
 800b2cc:	f7f5 f99c 	bl	8000608 <__aeabi_dmul>
 800b2d0:	4606      	mov	r6, r0
 800b2d2:	460f      	mov	r7, r1
 800b2d4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b2d8:	9618      	str	r6, [sp, #96]	; 0x60
 800b2da:	9319      	str	r3, [sp, #100]	; 0x64
 800b2dc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b2e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b2e4:	e79c      	b.n	800b220 <_strtod_l+0x980>
 800b2e6:	f1ba 0f01 	cmp.w	sl, #1
 800b2ea:	d102      	bne.n	800b2f2 <_strtod_l+0xa52>
 800b2ec:	2d00      	cmp	r5, #0
 800b2ee:	f43f ad8e 	beq.w	800ae0e <_strtod_l+0x56e>
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	4b34      	ldr	r3, [pc, #208]	; (800b3c8 <_strtod_l+0xb28>)
 800b2f6:	e78f      	b.n	800b218 <_strtod_l+0x978>
 800b2f8:	2600      	movs	r6, #0
 800b2fa:	4f32      	ldr	r7, [pc, #200]	; (800b3c4 <_strtod_l+0xb24>)
 800b2fc:	e7ea      	b.n	800b2d4 <_strtod_l+0xa34>
 800b2fe:	4b31      	ldr	r3, [pc, #196]	; (800b3c4 <_strtod_l+0xb24>)
 800b300:	4630      	mov	r0, r6
 800b302:	4639      	mov	r1, r7
 800b304:	2200      	movs	r2, #0
 800b306:	f7f5 f97f 	bl	8000608 <__aeabi_dmul>
 800b30a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b30c:	4606      	mov	r6, r0
 800b30e:	460f      	mov	r7, r1
 800b310:	b933      	cbnz	r3, 800b320 <_strtod_l+0xa80>
 800b312:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b316:	9010      	str	r0, [sp, #64]	; 0x40
 800b318:	9311      	str	r3, [sp, #68]	; 0x44
 800b31a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b31e:	e7df      	b.n	800b2e0 <_strtod_l+0xa40>
 800b320:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b324:	e7f9      	b.n	800b31a <_strtod_l+0xa7a>
 800b326:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b32a:	9b04      	ldr	r3, [sp, #16]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d1ab      	bne.n	800b288 <_strtod_l+0x9e8>
 800b330:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b334:	0d1b      	lsrs	r3, r3, #20
 800b336:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b338:	051b      	lsls	r3, r3, #20
 800b33a:	429a      	cmp	r2, r3
 800b33c:	465d      	mov	r5, fp
 800b33e:	d1a3      	bne.n	800b288 <_strtod_l+0x9e8>
 800b340:	4639      	mov	r1, r7
 800b342:	4630      	mov	r0, r6
 800b344:	f7f5 fc10 	bl	8000b68 <__aeabi_d2iz>
 800b348:	f7f5 f8f4 	bl	8000534 <__aeabi_i2d>
 800b34c:	460b      	mov	r3, r1
 800b34e:	4602      	mov	r2, r0
 800b350:	4639      	mov	r1, r7
 800b352:	4630      	mov	r0, r6
 800b354:	f7f4 ffa0 	bl	8000298 <__aeabi_dsub>
 800b358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b35a:	4606      	mov	r6, r0
 800b35c:	460f      	mov	r7, r1
 800b35e:	b933      	cbnz	r3, 800b36e <_strtod_l+0xace>
 800b360:	f1ba 0f00 	cmp.w	sl, #0
 800b364:	d103      	bne.n	800b36e <_strtod_l+0xace>
 800b366:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800b36a:	2d00      	cmp	r5, #0
 800b36c:	d06d      	beq.n	800b44a <_strtod_l+0xbaa>
 800b36e:	a30a      	add	r3, pc, #40	; (adr r3, 800b398 <_strtod_l+0xaf8>)
 800b370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b374:	4630      	mov	r0, r6
 800b376:	4639      	mov	r1, r7
 800b378:	f7f5 fbb8 	bl	8000aec <__aeabi_dcmplt>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	f47f acb8 	bne.w	800acf2 <_strtod_l+0x452>
 800b382:	a307      	add	r3, pc, #28	; (adr r3, 800b3a0 <_strtod_l+0xb00>)
 800b384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b388:	4630      	mov	r0, r6
 800b38a:	4639      	mov	r1, r7
 800b38c:	f7f5 fbcc 	bl	8000b28 <__aeabi_dcmpgt>
 800b390:	2800      	cmp	r0, #0
 800b392:	f43f af79 	beq.w	800b288 <_strtod_l+0x9e8>
 800b396:	e4ac      	b.n	800acf2 <_strtod_l+0x452>
 800b398:	94a03595 	.word	0x94a03595
 800b39c:	3fdfffff 	.word	0x3fdfffff
 800b3a0:	35afe535 	.word	0x35afe535
 800b3a4:	3fe00000 	.word	0x3fe00000
 800b3a8:	000fffff 	.word	0x000fffff
 800b3ac:	7ff00000 	.word	0x7ff00000
 800b3b0:	7fefffff 	.word	0x7fefffff
 800b3b4:	39500000 	.word	0x39500000
 800b3b8:	3ff00000 	.word	0x3ff00000
 800b3bc:	7fe00000 	.word	0x7fe00000
 800b3c0:	7c9fffff 	.word	0x7c9fffff
 800b3c4:	3fe00000 	.word	0x3fe00000
 800b3c8:	bff00000 	.word	0xbff00000
 800b3cc:	9b04      	ldr	r3, [sp, #16]
 800b3ce:	b333      	cbz	r3, 800b41e <_strtod_l+0xb7e>
 800b3d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3d2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b3d6:	d822      	bhi.n	800b41e <_strtod_l+0xb7e>
 800b3d8:	a327      	add	r3, pc, #156	; (adr r3, 800b478 <_strtod_l+0xbd8>)
 800b3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3de:	4630      	mov	r0, r6
 800b3e0:	4639      	mov	r1, r7
 800b3e2:	f7f5 fb8d 	bl	8000b00 <__aeabi_dcmple>
 800b3e6:	b1a0      	cbz	r0, 800b412 <_strtod_l+0xb72>
 800b3e8:	4639      	mov	r1, r7
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	f7f5 fbe4 	bl	8000bb8 <__aeabi_d2uiz>
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	bf08      	it	eq
 800b3f4:	2001      	moveq	r0, #1
 800b3f6:	f7f5 f88d 	bl	8000514 <__aeabi_ui2d>
 800b3fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3fc:	4606      	mov	r6, r0
 800b3fe:	460f      	mov	r7, r1
 800b400:	bb03      	cbnz	r3, 800b444 <_strtod_l+0xba4>
 800b402:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b406:	9012      	str	r0, [sp, #72]	; 0x48
 800b408:	9313      	str	r3, [sp, #76]	; 0x4c
 800b40a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b40e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b414:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b416:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b41a:	1a9b      	subs	r3, r3, r2
 800b41c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b41e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800b422:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800b426:	f001 ffd1 	bl	800d3cc <__ulp>
 800b42a:	4650      	mov	r0, sl
 800b42c:	ec53 2b10 	vmov	r2, r3, d0
 800b430:	4659      	mov	r1, fp
 800b432:	f7f5 f8e9 	bl	8000608 <__aeabi_dmul>
 800b436:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b43a:	f7f4 ff2f 	bl	800029c <__adddf3>
 800b43e:	4682      	mov	sl, r0
 800b440:	468b      	mov	fp, r1
 800b442:	e772      	b.n	800b32a <_strtod_l+0xa8a>
 800b444:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800b448:	e7df      	b.n	800b40a <_strtod_l+0xb6a>
 800b44a:	a30d      	add	r3, pc, #52	; (adr r3, 800b480 <_strtod_l+0xbe0>)
 800b44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b450:	f7f5 fb4c 	bl	8000aec <__aeabi_dcmplt>
 800b454:	e79c      	b.n	800b390 <_strtod_l+0xaf0>
 800b456:	2300      	movs	r3, #0
 800b458:	930d      	str	r3, [sp, #52]	; 0x34
 800b45a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b45c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b45e:	6013      	str	r3, [r2, #0]
 800b460:	f7ff ba61 	b.w	800a926 <_strtod_l+0x86>
 800b464:	2b65      	cmp	r3, #101	; 0x65
 800b466:	f04f 0200 	mov.w	r2, #0
 800b46a:	f43f ab4e 	beq.w	800ab0a <_strtod_l+0x26a>
 800b46e:	2101      	movs	r1, #1
 800b470:	4614      	mov	r4, r2
 800b472:	9104      	str	r1, [sp, #16]
 800b474:	f7ff bacb 	b.w	800aa0e <_strtod_l+0x16e>
 800b478:	ffc00000 	.word	0xffc00000
 800b47c:	41dfffff 	.word	0x41dfffff
 800b480:	94a03595 	.word	0x94a03595
 800b484:	3fcfffff 	.word	0x3fcfffff

0800b488 <_strtod_r>:
 800b488:	4b05      	ldr	r3, [pc, #20]	; (800b4a0 <_strtod_r+0x18>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	b410      	push	{r4}
 800b48e:	6a1b      	ldr	r3, [r3, #32]
 800b490:	4c04      	ldr	r4, [pc, #16]	; (800b4a4 <_strtod_r+0x1c>)
 800b492:	2b00      	cmp	r3, #0
 800b494:	bf08      	it	eq
 800b496:	4623      	moveq	r3, r4
 800b498:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b49c:	f7ff ba00 	b.w	800a8a0 <_strtod_l>
 800b4a0:	20000080 	.word	0x20000080
 800b4a4:	200000e4 	.word	0x200000e4

0800b4a8 <_strtol_l.isra.0>:
 800b4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4ac:	4680      	mov	r8, r0
 800b4ae:	4689      	mov	r9, r1
 800b4b0:	4692      	mov	sl, r2
 800b4b2:	461e      	mov	r6, r3
 800b4b4:	460f      	mov	r7, r1
 800b4b6:	463d      	mov	r5, r7
 800b4b8:	9808      	ldr	r0, [sp, #32]
 800b4ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4be:	f001 fc27 	bl	800cd10 <__locale_ctype_ptr_l>
 800b4c2:	4420      	add	r0, r4
 800b4c4:	7843      	ldrb	r3, [r0, #1]
 800b4c6:	f013 0308 	ands.w	r3, r3, #8
 800b4ca:	d132      	bne.n	800b532 <_strtol_l.isra.0+0x8a>
 800b4cc:	2c2d      	cmp	r4, #45	; 0x2d
 800b4ce:	d132      	bne.n	800b536 <_strtol_l.isra.0+0x8e>
 800b4d0:	787c      	ldrb	r4, [r7, #1]
 800b4d2:	1cbd      	adds	r5, r7, #2
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	2e00      	cmp	r6, #0
 800b4d8:	d05d      	beq.n	800b596 <_strtol_l.isra.0+0xee>
 800b4da:	2e10      	cmp	r6, #16
 800b4dc:	d109      	bne.n	800b4f2 <_strtol_l.isra.0+0x4a>
 800b4de:	2c30      	cmp	r4, #48	; 0x30
 800b4e0:	d107      	bne.n	800b4f2 <_strtol_l.isra.0+0x4a>
 800b4e2:	782b      	ldrb	r3, [r5, #0]
 800b4e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b4e8:	2b58      	cmp	r3, #88	; 0x58
 800b4ea:	d14f      	bne.n	800b58c <_strtol_l.isra.0+0xe4>
 800b4ec:	786c      	ldrb	r4, [r5, #1]
 800b4ee:	2610      	movs	r6, #16
 800b4f0:	3502      	adds	r5, #2
 800b4f2:	2a00      	cmp	r2, #0
 800b4f4:	bf14      	ite	ne
 800b4f6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b4fa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b4fe:	2700      	movs	r7, #0
 800b500:	fbb1 fcf6 	udiv	ip, r1, r6
 800b504:	4638      	mov	r0, r7
 800b506:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b50a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b50e:	2b09      	cmp	r3, #9
 800b510:	d817      	bhi.n	800b542 <_strtol_l.isra.0+0x9a>
 800b512:	461c      	mov	r4, r3
 800b514:	42a6      	cmp	r6, r4
 800b516:	dd23      	ble.n	800b560 <_strtol_l.isra.0+0xb8>
 800b518:	1c7b      	adds	r3, r7, #1
 800b51a:	d007      	beq.n	800b52c <_strtol_l.isra.0+0x84>
 800b51c:	4584      	cmp	ip, r0
 800b51e:	d31c      	bcc.n	800b55a <_strtol_l.isra.0+0xb2>
 800b520:	d101      	bne.n	800b526 <_strtol_l.isra.0+0x7e>
 800b522:	45a6      	cmp	lr, r4
 800b524:	db19      	blt.n	800b55a <_strtol_l.isra.0+0xb2>
 800b526:	fb00 4006 	mla	r0, r0, r6, r4
 800b52a:	2701      	movs	r7, #1
 800b52c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b530:	e7eb      	b.n	800b50a <_strtol_l.isra.0+0x62>
 800b532:	462f      	mov	r7, r5
 800b534:	e7bf      	b.n	800b4b6 <_strtol_l.isra.0+0xe>
 800b536:	2c2b      	cmp	r4, #43	; 0x2b
 800b538:	bf04      	itt	eq
 800b53a:	1cbd      	addeq	r5, r7, #2
 800b53c:	787c      	ldrbeq	r4, [r7, #1]
 800b53e:	461a      	mov	r2, r3
 800b540:	e7c9      	b.n	800b4d6 <_strtol_l.isra.0+0x2e>
 800b542:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b546:	2b19      	cmp	r3, #25
 800b548:	d801      	bhi.n	800b54e <_strtol_l.isra.0+0xa6>
 800b54a:	3c37      	subs	r4, #55	; 0x37
 800b54c:	e7e2      	b.n	800b514 <_strtol_l.isra.0+0x6c>
 800b54e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b552:	2b19      	cmp	r3, #25
 800b554:	d804      	bhi.n	800b560 <_strtol_l.isra.0+0xb8>
 800b556:	3c57      	subs	r4, #87	; 0x57
 800b558:	e7dc      	b.n	800b514 <_strtol_l.isra.0+0x6c>
 800b55a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b55e:	e7e5      	b.n	800b52c <_strtol_l.isra.0+0x84>
 800b560:	1c7b      	adds	r3, r7, #1
 800b562:	d108      	bne.n	800b576 <_strtol_l.isra.0+0xce>
 800b564:	2322      	movs	r3, #34	; 0x22
 800b566:	f8c8 3000 	str.w	r3, [r8]
 800b56a:	4608      	mov	r0, r1
 800b56c:	f1ba 0f00 	cmp.w	sl, #0
 800b570:	d107      	bne.n	800b582 <_strtol_l.isra.0+0xda>
 800b572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b576:	b102      	cbz	r2, 800b57a <_strtol_l.isra.0+0xd2>
 800b578:	4240      	negs	r0, r0
 800b57a:	f1ba 0f00 	cmp.w	sl, #0
 800b57e:	d0f8      	beq.n	800b572 <_strtol_l.isra.0+0xca>
 800b580:	b10f      	cbz	r7, 800b586 <_strtol_l.isra.0+0xde>
 800b582:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800b586:	f8ca 9000 	str.w	r9, [sl]
 800b58a:	e7f2      	b.n	800b572 <_strtol_l.isra.0+0xca>
 800b58c:	2430      	movs	r4, #48	; 0x30
 800b58e:	2e00      	cmp	r6, #0
 800b590:	d1af      	bne.n	800b4f2 <_strtol_l.isra.0+0x4a>
 800b592:	2608      	movs	r6, #8
 800b594:	e7ad      	b.n	800b4f2 <_strtol_l.isra.0+0x4a>
 800b596:	2c30      	cmp	r4, #48	; 0x30
 800b598:	d0a3      	beq.n	800b4e2 <_strtol_l.isra.0+0x3a>
 800b59a:	260a      	movs	r6, #10
 800b59c:	e7a9      	b.n	800b4f2 <_strtol_l.isra.0+0x4a>
	...

0800b5a0 <_strtol_r>:
 800b5a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5a2:	4c06      	ldr	r4, [pc, #24]	; (800b5bc <_strtol_r+0x1c>)
 800b5a4:	4d06      	ldr	r5, [pc, #24]	; (800b5c0 <_strtol_r+0x20>)
 800b5a6:	6824      	ldr	r4, [r4, #0]
 800b5a8:	6a24      	ldr	r4, [r4, #32]
 800b5aa:	2c00      	cmp	r4, #0
 800b5ac:	bf08      	it	eq
 800b5ae:	462c      	moveq	r4, r5
 800b5b0:	9400      	str	r4, [sp, #0]
 800b5b2:	f7ff ff79 	bl	800b4a8 <_strtol_l.isra.0>
 800b5b6:	b003      	add	sp, #12
 800b5b8:	bd30      	pop	{r4, r5, pc}
 800b5ba:	bf00      	nop
 800b5bc:	20000080 	.word	0x20000080
 800b5c0:	200000e4 	.word	0x200000e4

0800b5c4 <__swbuf_r>:
 800b5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c6:	460e      	mov	r6, r1
 800b5c8:	4614      	mov	r4, r2
 800b5ca:	4605      	mov	r5, r0
 800b5cc:	b118      	cbz	r0, 800b5d6 <__swbuf_r+0x12>
 800b5ce:	6983      	ldr	r3, [r0, #24]
 800b5d0:	b90b      	cbnz	r3, 800b5d6 <__swbuf_r+0x12>
 800b5d2:	f000 ffed 	bl	800c5b0 <__sinit>
 800b5d6:	4b21      	ldr	r3, [pc, #132]	; (800b65c <__swbuf_r+0x98>)
 800b5d8:	429c      	cmp	r4, r3
 800b5da:	d12a      	bne.n	800b632 <__swbuf_r+0x6e>
 800b5dc:	686c      	ldr	r4, [r5, #4]
 800b5de:	69a3      	ldr	r3, [r4, #24]
 800b5e0:	60a3      	str	r3, [r4, #8]
 800b5e2:	89a3      	ldrh	r3, [r4, #12]
 800b5e4:	071a      	lsls	r2, r3, #28
 800b5e6:	d52e      	bpl.n	800b646 <__swbuf_r+0x82>
 800b5e8:	6923      	ldr	r3, [r4, #16]
 800b5ea:	b363      	cbz	r3, 800b646 <__swbuf_r+0x82>
 800b5ec:	6923      	ldr	r3, [r4, #16]
 800b5ee:	6820      	ldr	r0, [r4, #0]
 800b5f0:	1ac0      	subs	r0, r0, r3
 800b5f2:	6963      	ldr	r3, [r4, #20]
 800b5f4:	b2f6      	uxtb	r6, r6
 800b5f6:	4283      	cmp	r3, r0
 800b5f8:	4637      	mov	r7, r6
 800b5fa:	dc04      	bgt.n	800b606 <__swbuf_r+0x42>
 800b5fc:	4621      	mov	r1, r4
 800b5fe:	4628      	mov	r0, r5
 800b600:	f000 ff6c 	bl	800c4dc <_fflush_r>
 800b604:	bb28      	cbnz	r0, 800b652 <__swbuf_r+0x8e>
 800b606:	68a3      	ldr	r3, [r4, #8]
 800b608:	3b01      	subs	r3, #1
 800b60a:	60a3      	str	r3, [r4, #8]
 800b60c:	6823      	ldr	r3, [r4, #0]
 800b60e:	1c5a      	adds	r2, r3, #1
 800b610:	6022      	str	r2, [r4, #0]
 800b612:	701e      	strb	r6, [r3, #0]
 800b614:	6963      	ldr	r3, [r4, #20]
 800b616:	3001      	adds	r0, #1
 800b618:	4283      	cmp	r3, r0
 800b61a:	d004      	beq.n	800b626 <__swbuf_r+0x62>
 800b61c:	89a3      	ldrh	r3, [r4, #12]
 800b61e:	07db      	lsls	r3, r3, #31
 800b620:	d519      	bpl.n	800b656 <__swbuf_r+0x92>
 800b622:	2e0a      	cmp	r6, #10
 800b624:	d117      	bne.n	800b656 <__swbuf_r+0x92>
 800b626:	4621      	mov	r1, r4
 800b628:	4628      	mov	r0, r5
 800b62a:	f000 ff57 	bl	800c4dc <_fflush_r>
 800b62e:	b190      	cbz	r0, 800b656 <__swbuf_r+0x92>
 800b630:	e00f      	b.n	800b652 <__swbuf_r+0x8e>
 800b632:	4b0b      	ldr	r3, [pc, #44]	; (800b660 <__swbuf_r+0x9c>)
 800b634:	429c      	cmp	r4, r3
 800b636:	d101      	bne.n	800b63c <__swbuf_r+0x78>
 800b638:	68ac      	ldr	r4, [r5, #8]
 800b63a:	e7d0      	b.n	800b5de <__swbuf_r+0x1a>
 800b63c:	4b09      	ldr	r3, [pc, #36]	; (800b664 <__swbuf_r+0xa0>)
 800b63e:	429c      	cmp	r4, r3
 800b640:	bf08      	it	eq
 800b642:	68ec      	ldreq	r4, [r5, #12]
 800b644:	e7cb      	b.n	800b5de <__swbuf_r+0x1a>
 800b646:	4621      	mov	r1, r4
 800b648:	4628      	mov	r0, r5
 800b64a:	f000 f80d 	bl	800b668 <__swsetup_r>
 800b64e:	2800      	cmp	r0, #0
 800b650:	d0cc      	beq.n	800b5ec <__swbuf_r+0x28>
 800b652:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b656:	4638      	mov	r0, r7
 800b658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b65a:	bf00      	nop
 800b65c:	0800e7b0 	.word	0x0800e7b0
 800b660:	0800e7d0 	.word	0x0800e7d0
 800b664:	0800e790 	.word	0x0800e790

0800b668 <__swsetup_r>:
 800b668:	4b32      	ldr	r3, [pc, #200]	; (800b734 <__swsetup_r+0xcc>)
 800b66a:	b570      	push	{r4, r5, r6, lr}
 800b66c:	681d      	ldr	r5, [r3, #0]
 800b66e:	4606      	mov	r6, r0
 800b670:	460c      	mov	r4, r1
 800b672:	b125      	cbz	r5, 800b67e <__swsetup_r+0x16>
 800b674:	69ab      	ldr	r3, [r5, #24]
 800b676:	b913      	cbnz	r3, 800b67e <__swsetup_r+0x16>
 800b678:	4628      	mov	r0, r5
 800b67a:	f000 ff99 	bl	800c5b0 <__sinit>
 800b67e:	4b2e      	ldr	r3, [pc, #184]	; (800b738 <__swsetup_r+0xd0>)
 800b680:	429c      	cmp	r4, r3
 800b682:	d10f      	bne.n	800b6a4 <__swsetup_r+0x3c>
 800b684:	686c      	ldr	r4, [r5, #4]
 800b686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	0715      	lsls	r5, r2, #28
 800b68e:	d42c      	bmi.n	800b6ea <__swsetup_r+0x82>
 800b690:	06d0      	lsls	r0, r2, #27
 800b692:	d411      	bmi.n	800b6b8 <__swsetup_r+0x50>
 800b694:	2209      	movs	r2, #9
 800b696:	6032      	str	r2, [r6, #0]
 800b698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b69c:	81a3      	strh	r3, [r4, #12]
 800b69e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6a2:	e03e      	b.n	800b722 <__swsetup_r+0xba>
 800b6a4:	4b25      	ldr	r3, [pc, #148]	; (800b73c <__swsetup_r+0xd4>)
 800b6a6:	429c      	cmp	r4, r3
 800b6a8:	d101      	bne.n	800b6ae <__swsetup_r+0x46>
 800b6aa:	68ac      	ldr	r4, [r5, #8]
 800b6ac:	e7eb      	b.n	800b686 <__swsetup_r+0x1e>
 800b6ae:	4b24      	ldr	r3, [pc, #144]	; (800b740 <__swsetup_r+0xd8>)
 800b6b0:	429c      	cmp	r4, r3
 800b6b2:	bf08      	it	eq
 800b6b4:	68ec      	ldreq	r4, [r5, #12]
 800b6b6:	e7e6      	b.n	800b686 <__swsetup_r+0x1e>
 800b6b8:	0751      	lsls	r1, r2, #29
 800b6ba:	d512      	bpl.n	800b6e2 <__swsetup_r+0x7a>
 800b6bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6be:	b141      	cbz	r1, 800b6d2 <__swsetup_r+0x6a>
 800b6c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6c4:	4299      	cmp	r1, r3
 800b6c6:	d002      	beq.n	800b6ce <__swsetup_r+0x66>
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f001 ffc1 	bl	800d650 <_free_r>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	6363      	str	r3, [r4, #52]	; 0x34
 800b6d2:	89a3      	ldrh	r3, [r4, #12]
 800b6d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6d8:	81a3      	strh	r3, [r4, #12]
 800b6da:	2300      	movs	r3, #0
 800b6dc:	6063      	str	r3, [r4, #4]
 800b6de:	6923      	ldr	r3, [r4, #16]
 800b6e0:	6023      	str	r3, [r4, #0]
 800b6e2:	89a3      	ldrh	r3, [r4, #12]
 800b6e4:	f043 0308 	orr.w	r3, r3, #8
 800b6e8:	81a3      	strh	r3, [r4, #12]
 800b6ea:	6923      	ldr	r3, [r4, #16]
 800b6ec:	b94b      	cbnz	r3, 800b702 <__swsetup_r+0x9a>
 800b6ee:	89a3      	ldrh	r3, [r4, #12]
 800b6f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6f8:	d003      	beq.n	800b702 <__swsetup_r+0x9a>
 800b6fa:	4621      	mov	r1, r4
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	f001 fb3f 	bl	800cd80 <__smakebuf_r>
 800b702:	89a2      	ldrh	r2, [r4, #12]
 800b704:	f012 0301 	ands.w	r3, r2, #1
 800b708:	d00c      	beq.n	800b724 <__swsetup_r+0xbc>
 800b70a:	2300      	movs	r3, #0
 800b70c:	60a3      	str	r3, [r4, #8]
 800b70e:	6963      	ldr	r3, [r4, #20]
 800b710:	425b      	negs	r3, r3
 800b712:	61a3      	str	r3, [r4, #24]
 800b714:	6923      	ldr	r3, [r4, #16]
 800b716:	b953      	cbnz	r3, 800b72e <__swsetup_r+0xc6>
 800b718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b71c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b720:	d1ba      	bne.n	800b698 <__swsetup_r+0x30>
 800b722:	bd70      	pop	{r4, r5, r6, pc}
 800b724:	0792      	lsls	r2, r2, #30
 800b726:	bf58      	it	pl
 800b728:	6963      	ldrpl	r3, [r4, #20]
 800b72a:	60a3      	str	r3, [r4, #8]
 800b72c:	e7f2      	b.n	800b714 <__swsetup_r+0xac>
 800b72e:	2000      	movs	r0, #0
 800b730:	e7f7      	b.n	800b722 <__swsetup_r+0xba>
 800b732:	bf00      	nop
 800b734:	20000080 	.word	0x20000080
 800b738:	0800e7b0 	.word	0x0800e7b0
 800b73c:	0800e7d0 	.word	0x0800e7d0
 800b740:	0800e790 	.word	0x0800e790

0800b744 <quorem>:
 800b744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b748:	6903      	ldr	r3, [r0, #16]
 800b74a:	690c      	ldr	r4, [r1, #16]
 800b74c:	42a3      	cmp	r3, r4
 800b74e:	4680      	mov	r8, r0
 800b750:	f2c0 8082 	blt.w	800b858 <quorem+0x114>
 800b754:	3c01      	subs	r4, #1
 800b756:	f101 0714 	add.w	r7, r1, #20
 800b75a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b75e:	f100 0614 	add.w	r6, r0, #20
 800b762:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b766:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b76a:	eb06 030c 	add.w	r3, r6, ip
 800b76e:	3501      	adds	r5, #1
 800b770:	eb07 090c 	add.w	r9, r7, ip
 800b774:	9301      	str	r3, [sp, #4]
 800b776:	fbb0 f5f5 	udiv	r5, r0, r5
 800b77a:	b395      	cbz	r5, 800b7e2 <quorem+0x9e>
 800b77c:	f04f 0a00 	mov.w	sl, #0
 800b780:	4638      	mov	r0, r7
 800b782:	46b6      	mov	lr, r6
 800b784:	46d3      	mov	fp, sl
 800b786:	f850 2b04 	ldr.w	r2, [r0], #4
 800b78a:	b293      	uxth	r3, r2
 800b78c:	fb05 a303 	mla	r3, r5, r3, sl
 800b790:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b794:	b29b      	uxth	r3, r3
 800b796:	ebab 0303 	sub.w	r3, fp, r3
 800b79a:	0c12      	lsrs	r2, r2, #16
 800b79c:	f8de b000 	ldr.w	fp, [lr]
 800b7a0:	fb05 a202 	mla	r2, r5, r2, sl
 800b7a4:	fa13 f38b 	uxtah	r3, r3, fp
 800b7a8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b7ac:	fa1f fb82 	uxth.w	fp, r2
 800b7b0:	f8de 2000 	ldr.w	r2, [lr]
 800b7b4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b7b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7c2:	4581      	cmp	r9, r0
 800b7c4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b7c8:	f84e 3b04 	str.w	r3, [lr], #4
 800b7cc:	d2db      	bcs.n	800b786 <quorem+0x42>
 800b7ce:	f856 300c 	ldr.w	r3, [r6, ip]
 800b7d2:	b933      	cbnz	r3, 800b7e2 <quorem+0x9e>
 800b7d4:	9b01      	ldr	r3, [sp, #4]
 800b7d6:	3b04      	subs	r3, #4
 800b7d8:	429e      	cmp	r6, r3
 800b7da:	461a      	mov	r2, r3
 800b7dc:	d330      	bcc.n	800b840 <quorem+0xfc>
 800b7de:	f8c8 4010 	str.w	r4, [r8, #16]
 800b7e2:	4640      	mov	r0, r8
 800b7e4:	f001 fd7a 	bl	800d2dc <__mcmp>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	db25      	blt.n	800b838 <quorem+0xf4>
 800b7ec:	3501      	adds	r5, #1
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	f04f 0c00 	mov.w	ip, #0
 800b7f4:	f857 2b04 	ldr.w	r2, [r7], #4
 800b7f8:	f8d0 e000 	ldr.w	lr, [r0]
 800b7fc:	b293      	uxth	r3, r2
 800b7fe:	ebac 0303 	sub.w	r3, ip, r3
 800b802:	0c12      	lsrs	r2, r2, #16
 800b804:	fa13 f38e 	uxtah	r3, r3, lr
 800b808:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b80c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b810:	b29b      	uxth	r3, r3
 800b812:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b816:	45b9      	cmp	r9, r7
 800b818:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b81c:	f840 3b04 	str.w	r3, [r0], #4
 800b820:	d2e8      	bcs.n	800b7f4 <quorem+0xb0>
 800b822:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b826:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b82a:	b92a      	cbnz	r2, 800b838 <quorem+0xf4>
 800b82c:	3b04      	subs	r3, #4
 800b82e:	429e      	cmp	r6, r3
 800b830:	461a      	mov	r2, r3
 800b832:	d30b      	bcc.n	800b84c <quorem+0x108>
 800b834:	f8c8 4010 	str.w	r4, [r8, #16]
 800b838:	4628      	mov	r0, r5
 800b83a:	b003      	add	sp, #12
 800b83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b840:	6812      	ldr	r2, [r2, #0]
 800b842:	3b04      	subs	r3, #4
 800b844:	2a00      	cmp	r2, #0
 800b846:	d1ca      	bne.n	800b7de <quorem+0x9a>
 800b848:	3c01      	subs	r4, #1
 800b84a:	e7c5      	b.n	800b7d8 <quorem+0x94>
 800b84c:	6812      	ldr	r2, [r2, #0]
 800b84e:	3b04      	subs	r3, #4
 800b850:	2a00      	cmp	r2, #0
 800b852:	d1ef      	bne.n	800b834 <quorem+0xf0>
 800b854:	3c01      	subs	r4, #1
 800b856:	e7ea      	b.n	800b82e <quorem+0xea>
 800b858:	2000      	movs	r0, #0
 800b85a:	e7ee      	b.n	800b83a <quorem+0xf6>
 800b85c:	0000      	movs	r0, r0
	...

0800b860 <_dtoa_r>:
 800b860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b864:	ec57 6b10 	vmov	r6, r7, d0
 800b868:	b097      	sub	sp, #92	; 0x5c
 800b86a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b86c:	9106      	str	r1, [sp, #24]
 800b86e:	4604      	mov	r4, r0
 800b870:	920b      	str	r2, [sp, #44]	; 0x2c
 800b872:	9312      	str	r3, [sp, #72]	; 0x48
 800b874:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b878:	e9cd 6700 	strd	r6, r7, [sp]
 800b87c:	b93d      	cbnz	r5, 800b88e <_dtoa_r+0x2e>
 800b87e:	2010      	movs	r0, #16
 800b880:	f001 fabe 	bl	800ce00 <malloc>
 800b884:	6260      	str	r0, [r4, #36]	; 0x24
 800b886:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b88a:	6005      	str	r5, [r0, #0]
 800b88c:	60c5      	str	r5, [r0, #12]
 800b88e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b890:	6819      	ldr	r1, [r3, #0]
 800b892:	b151      	cbz	r1, 800b8aa <_dtoa_r+0x4a>
 800b894:	685a      	ldr	r2, [r3, #4]
 800b896:	604a      	str	r2, [r1, #4]
 800b898:	2301      	movs	r3, #1
 800b89a:	4093      	lsls	r3, r2
 800b89c:	608b      	str	r3, [r1, #8]
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f001 fafc 	bl	800ce9c <_Bfree>
 800b8a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	601a      	str	r2, [r3, #0]
 800b8aa:	1e3b      	subs	r3, r7, #0
 800b8ac:	bfbb      	ittet	lt
 800b8ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b8b2:	9301      	strlt	r3, [sp, #4]
 800b8b4:	2300      	movge	r3, #0
 800b8b6:	2201      	movlt	r2, #1
 800b8b8:	bfac      	ite	ge
 800b8ba:	f8c8 3000 	strge.w	r3, [r8]
 800b8be:	f8c8 2000 	strlt.w	r2, [r8]
 800b8c2:	4baf      	ldr	r3, [pc, #700]	; (800bb80 <_dtoa_r+0x320>)
 800b8c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b8c8:	ea33 0308 	bics.w	r3, r3, r8
 800b8cc:	d114      	bne.n	800b8f8 <_dtoa_r+0x98>
 800b8ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b8d0:	f242 730f 	movw	r3, #9999	; 0x270f
 800b8d4:	6013      	str	r3, [r2, #0]
 800b8d6:	9b00      	ldr	r3, [sp, #0]
 800b8d8:	b923      	cbnz	r3, 800b8e4 <_dtoa_r+0x84>
 800b8da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	f000 8542 	beq.w	800c368 <_dtoa_r+0xb08>
 800b8e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800bb94 <_dtoa_r+0x334>
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	f000 8544 	beq.w	800c378 <_dtoa_r+0xb18>
 800b8f0:	f10b 0303 	add.w	r3, fp, #3
 800b8f4:	f000 bd3e 	b.w	800c374 <_dtoa_r+0xb14>
 800b8f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	2300      	movs	r3, #0
 800b900:	4630      	mov	r0, r6
 800b902:	4639      	mov	r1, r7
 800b904:	f7f5 f8e8 	bl	8000ad8 <__aeabi_dcmpeq>
 800b908:	4681      	mov	r9, r0
 800b90a:	b168      	cbz	r0, 800b928 <_dtoa_r+0xc8>
 800b90c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b90e:	2301      	movs	r3, #1
 800b910:	6013      	str	r3, [r2, #0]
 800b912:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b914:	2b00      	cmp	r3, #0
 800b916:	f000 8524 	beq.w	800c362 <_dtoa_r+0xb02>
 800b91a:	4b9a      	ldr	r3, [pc, #616]	; (800bb84 <_dtoa_r+0x324>)
 800b91c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b91e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800b922:	6013      	str	r3, [r2, #0]
 800b924:	f000 bd28 	b.w	800c378 <_dtoa_r+0xb18>
 800b928:	aa14      	add	r2, sp, #80	; 0x50
 800b92a:	a915      	add	r1, sp, #84	; 0x54
 800b92c:	ec47 6b10 	vmov	d0, r6, r7
 800b930:	4620      	mov	r0, r4
 800b932:	f001 fdc1 	bl	800d4b8 <__d2b>
 800b936:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b93a:	9004      	str	r0, [sp, #16]
 800b93c:	2d00      	cmp	r5, #0
 800b93e:	d07c      	beq.n	800ba3a <_dtoa_r+0x1da>
 800b940:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b944:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b948:	46b2      	mov	sl, r6
 800b94a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b94e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b952:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b956:	2200      	movs	r2, #0
 800b958:	4b8b      	ldr	r3, [pc, #556]	; (800bb88 <_dtoa_r+0x328>)
 800b95a:	4650      	mov	r0, sl
 800b95c:	4659      	mov	r1, fp
 800b95e:	f7f4 fc9b 	bl	8000298 <__aeabi_dsub>
 800b962:	a381      	add	r3, pc, #516	; (adr r3, 800bb68 <_dtoa_r+0x308>)
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	f7f4 fe4e 	bl	8000608 <__aeabi_dmul>
 800b96c:	a380      	add	r3, pc, #512	; (adr r3, 800bb70 <_dtoa_r+0x310>)
 800b96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b972:	f7f4 fc93 	bl	800029c <__adddf3>
 800b976:	4606      	mov	r6, r0
 800b978:	4628      	mov	r0, r5
 800b97a:	460f      	mov	r7, r1
 800b97c:	f7f4 fdda 	bl	8000534 <__aeabi_i2d>
 800b980:	a37d      	add	r3, pc, #500	; (adr r3, 800bb78 <_dtoa_r+0x318>)
 800b982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b986:	f7f4 fe3f 	bl	8000608 <__aeabi_dmul>
 800b98a:	4602      	mov	r2, r0
 800b98c:	460b      	mov	r3, r1
 800b98e:	4630      	mov	r0, r6
 800b990:	4639      	mov	r1, r7
 800b992:	f7f4 fc83 	bl	800029c <__adddf3>
 800b996:	4606      	mov	r6, r0
 800b998:	460f      	mov	r7, r1
 800b99a:	f7f5 f8e5 	bl	8000b68 <__aeabi_d2iz>
 800b99e:	2200      	movs	r2, #0
 800b9a0:	4682      	mov	sl, r0
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	4639      	mov	r1, r7
 800b9a8:	f7f5 f8a0 	bl	8000aec <__aeabi_dcmplt>
 800b9ac:	b148      	cbz	r0, 800b9c2 <_dtoa_r+0x162>
 800b9ae:	4650      	mov	r0, sl
 800b9b0:	f7f4 fdc0 	bl	8000534 <__aeabi_i2d>
 800b9b4:	4632      	mov	r2, r6
 800b9b6:	463b      	mov	r3, r7
 800b9b8:	f7f5 f88e 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9bc:	b908      	cbnz	r0, 800b9c2 <_dtoa_r+0x162>
 800b9be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b9c2:	f1ba 0f16 	cmp.w	sl, #22
 800b9c6:	d859      	bhi.n	800ba7c <_dtoa_r+0x21c>
 800b9c8:	4970      	ldr	r1, [pc, #448]	; (800bb8c <_dtoa_r+0x32c>)
 800b9ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b9ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9d6:	f7f5 f8a7 	bl	8000b28 <__aeabi_dcmpgt>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	d050      	beq.n	800ba80 <_dtoa_r+0x220>
 800b9de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b9e8:	1b5d      	subs	r5, r3, r5
 800b9ea:	f1b5 0801 	subs.w	r8, r5, #1
 800b9ee:	bf49      	itett	mi
 800b9f0:	f1c5 0301 	rsbmi	r3, r5, #1
 800b9f4:	2300      	movpl	r3, #0
 800b9f6:	9305      	strmi	r3, [sp, #20]
 800b9f8:	f04f 0800 	movmi.w	r8, #0
 800b9fc:	bf58      	it	pl
 800b9fe:	9305      	strpl	r3, [sp, #20]
 800ba00:	f1ba 0f00 	cmp.w	sl, #0
 800ba04:	db3e      	blt.n	800ba84 <_dtoa_r+0x224>
 800ba06:	2300      	movs	r3, #0
 800ba08:	44d0      	add	r8, sl
 800ba0a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ba0e:	9307      	str	r3, [sp, #28]
 800ba10:	9b06      	ldr	r3, [sp, #24]
 800ba12:	2b09      	cmp	r3, #9
 800ba14:	f200 8090 	bhi.w	800bb38 <_dtoa_r+0x2d8>
 800ba18:	2b05      	cmp	r3, #5
 800ba1a:	bfc4      	itt	gt
 800ba1c:	3b04      	subgt	r3, #4
 800ba1e:	9306      	strgt	r3, [sp, #24]
 800ba20:	9b06      	ldr	r3, [sp, #24]
 800ba22:	f1a3 0302 	sub.w	r3, r3, #2
 800ba26:	bfcc      	ite	gt
 800ba28:	2500      	movgt	r5, #0
 800ba2a:	2501      	movle	r5, #1
 800ba2c:	2b03      	cmp	r3, #3
 800ba2e:	f200 808f 	bhi.w	800bb50 <_dtoa_r+0x2f0>
 800ba32:	e8df f003 	tbb	[pc, r3]
 800ba36:	7f7d      	.short	0x7f7d
 800ba38:	7131      	.short	0x7131
 800ba3a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800ba3e:	441d      	add	r5, r3
 800ba40:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ba44:	2820      	cmp	r0, #32
 800ba46:	dd13      	ble.n	800ba70 <_dtoa_r+0x210>
 800ba48:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ba4c:	9b00      	ldr	r3, [sp, #0]
 800ba4e:	fa08 f800 	lsl.w	r8, r8, r0
 800ba52:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ba56:	fa23 f000 	lsr.w	r0, r3, r0
 800ba5a:	ea48 0000 	orr.w	r0, r8, r0
 800ba5e:	f7f4 fd59 	bl	8000514 <__aeabi_ui2d>
 800ba62:	2301      	movs	r3, #1
 800ba64:	4682      	mov	sl, r0
 800ba66:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ba6a:	3d01      	subs	r5, #1
 800ba6c:	9313      	str	r3, [sp, #76]	; 0x4c
 800ba6e:	e772      	b.n	800b956 <_dtoa_r+0xf6>
 800ba70:	9b00      	ldr	r3, [sp, #0]
 800ba72:	f1c0 0020 	rsb	r0, r0, #32
 800ba76:	fa03 f000 	lsl.w	r0, r3, r0
 800ba7a:	e7f0      	b.n	800ba5e <_dtoa_r+0x1fe>
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e7b1      	b.n	800b9e4 <_dtoa_r+0x184>
 800ba80:	900f      	str	r0, [sp, #60]	; 0x3c
 800ba82:	e7b0      	b.n	800b9e6 <_dtoa_r+0x186>
 800ba84:	9b05      	ldr	r3, [sp, #20]
 800ba86:	eba3 030a 	sub.w	r3, r3, sl
 800ba8a:	9305      	str	r3, [sp, #20]
 800ba8c:	f1ca 0300 	rsb	r3, sl, #0
 800ba90:	9307      	str	r3, [sp, #28]
 800ba92:	2300      	movs	r3, #0
 800ba94:	930e      	str	r3, [sp, #56]	; 0x38
 800ba96:	e7bb      	b.n	800ba10 <_dtoa_r+0x1b0>
 800ba98:	2301      	movs	r3, #1
 800ba9a:	930a      	str	r3, [sp, #40]	; 0x28
 800ba9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	dd59      	ble.n	800bb56 <_dtoa_r+0x2f6>
 800baa2:	9302      	str	r3, [sp, #8]
 800baa4:	4699      	mov	r9, r3
 800baa6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800baa8:	2200      	movs	r2, #0
 800baaa:	6072      	str	r2, [r6, #4]
 800baac:	2204      	movs	r2, #4
 800baae:	f102 0014 	add.w	r0, r2, #20
 800bab2:	4298      	cmp	r0, r3
 800bab4:	6871      	ldr	r1, [r6, #4]
 800bab6:	d953      	bls.n	800bb60 <_dtoa_r+0x300>
 800bab8:	4620      	mov	r0, r4
 800baba:	f001 f9bb 	bl	800ce34 <_Balloc>
 800babe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bac0:	6030      	str	r0, [r6, #0]
 800bac2:	f1b9 0f0e 	cmp.w	r9, #14
 800bac6:	f8d3 b000 	ldr.w	fp, [r3]
 800baca:	f200 80e6 	bhi.w	800bc9a <_dtoa_r+0x43a>
 800bace:	2d00      	cmp	r5, #0
 800bad0:	f000 80e3 	beq.w	800bc9a <_dtoa_r+0x43a>
 800bad4:	ed9d 7b00 	vldr	d7, [sp]
 800bad8:	f1ba 0f00 	cmp.w	sl, #0
 800badc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bae0:	dd74      	ble.n	800bbcc <_dtoa_r+0x36c>
 800bae2:	4a2a      	ldr	r2, [pc, #168]	; (800bb8c <_dtoa_r+0x32c>)
 800bae4:	f00a 030f 	and.w	r3, sl, #15
 800bae8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800baec:	ed93 7b00 	vldr	d7, [r3]
 800baf0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800baf4:	06f0      	lsls	r0, r6, #27
 800baf6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800bafa:	d565      	bpl.n	800bbc8 <_dtoa_r+0x368>
 800bafc:	4b24      	ldr	r3, [pc, #144]	; (800bb90 <_dtoa_r+0x330>)
 800bafe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bb02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb06:	f7f4 fea9 	bl	800085c <__aeabi_ddiv>
 800bb0a:	e9cd 0100 	strd	r0, r1, [sp]
 800bb0e:	f006 060f 	and.w	r6, r6, #15
 800bb12:	2503      	movs	r5, #3
 800bb14:	4f1e      	ldr	r7, [pc, #120]	; (800bb90 <_dtoa_r+0x330>)
 800bb16:	e04c      	b.n	800bbb2 <_dtoa_r+0x352>
 800bb18:	2301      	movs	r3, #1
 800bb1a:	930a      	str	r3, [sp, #40]	; 0x28
 800bb1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb1e:	4453      	add	r3, sl
 800bb20:	f103 0901 	add.w	r9, r3, #1
 800bb24:	9302      	str	r3, [sp, #8]
 800bb26:	464b      	mov	r3, r9
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	bfb8      	it	lt
 800bb2c:	2301      	movlt	r3, #1
 800bb2e:	e7ba      	b.n	800baa6 <_dtoa_r+0x246>
 800bb30:	2300      	movs	r3, #0
 800bb32:	e7b2      	b.n	800ba9a <_dtoa_r+0x23a>
 800bb34:	2300      	movs	r3, #0
 800bb36:	e7f0      	b.n	800bb1a <_dtoa_r+0x2ba>
 800bb38:	2501      	movs	r5, #1
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	9306      	str	r3, [sp, #24]
 800bb3e:	950a      	str	r5, [sp, #40]	; 0x28
 800bb40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb44:	9302      	str	r3, [sp, #8]
 800bb46:	4699      	mov	r9, r3
 800bb48:	2200      	movs	r2, #0
 800bb4a:	2312      	movs	r3, #18
 800bb4c:	920b      	str	r2, [sp, #44]	; 0x2c
 800bb4e:	e7aa      	b.n	800baa6 <_dtoa_r+0x246>
 800bb50:	2301      	movs	r3, #1
 800bb52:	930a      	str	r3, [sp, #40]	; 0x28
 800bb54:	e7f4      	b.n	800bb40 <_dtoa_r+0x2e0>
 800bb56:	2301      	movs	r3, #1
 800bb58:	9302      	str	r3, [sp, #8]
 800bb5a:	4699      	mov	r9, r3
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	e7f5      	b.n	800bb4c <_dtoa_r+0x2ec>
 800bb60:	3101      	adds	r1, #1
 800bb62:	6071      	str	r1, [r6, #4]
 800bb64:	0052      	lsls	r2, r2, #1
 800bb66:	e7a2      	b.n	800baae <_dtoa_r+0x24e>
 800bb68:	636f4361 	.word	0x636f4361
 800bb6c:	3fd287a7 	.word	0x3fd287a7
 800bb70:	8b60c8b3 	.word	0x8b60c8b3
 800bb74:	3fc68a28 	.word	0x3fc68a28
 800bb78:	509f79fb 	.word	0x509f79fb
 800bb7c:	3fd34413 	.word	0x3fd34413
 800bb80:	7ff00000 	.word	0x7ff00000
 800bb84:	0800e705 	.word	0x0800e705
 800bb88:	3ff80000 	.word	0x3ff80000
 800bb8c:	0800e828 	.word	0x0800e828
 800bb90:	0800e800 	.word	0x0800e800
 800bb94:	0800e789 	.word	0x0800e789
 800bb98:	07f1      	lsls	r1, r6, #31
 800bb9a:	d508      	bpl.n	800bbae <_dtoa_r+0x34e>
 800bb9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bba4:	f7f4 fd30 	bl	8000608 <__aeabi_dmul>
 800bba8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bbac:	3501      	adds	r5, #1
 800bbae:	1076      	asrs	r6, r6, #1
 800bbb0:	3708      	adds	r7, #8
 800bbb2:	2e00      	cmp	r6, #0
 800bbb4:	d1f0      	bne.n	800bb98 <_dtoa_r+0x338>
 800bbb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bbba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbbe:	f7f4 fe4d 	bl	800085c <__aeabi_ddiv>
 800bbc2:	e9cd 0100 	strd	r0, r1, [sp]
 800bbc6:	e01a      	b.n	800bbfe <_dtoa_r+0x39e>
 800bbc8:	2502      	movs	r5, #2
 800bbca:	e7a3      	b.n	800bb14 <_dtoa_r+0x2b4>
 800bbcc:	f000 80a0 	beq.w	800bd10 <_dtoa_r+0x4b0>
 800bbd0:	f1ca 0600 	rsb	r6, sl, #0
 800bbd4:	4b9f      	ldr	r3, [pc, #636]	; (800be54 <_dtoa_r+0x5f4>)
 800bbd6:	4fa0      	ldr	r7, [pc, #640]	; (800be58 <_dtoa_r+0x5f8>)
 800bbd8:	f006 020f 	and.w	r2, r6, #15
 800bbdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bbe8:	f7f4 fd0e 	bl	8000608 <__aeabi_dmul>
 800bbec:	e9cd 0100 	strd	r0, r1, [sp]
 800bbf0:	1136      	asrs	r6, r6, #4
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	2502      	movs	r5, #2
 800bbf6:	2e00      	cmp	r6, #0
 800bbf8:	d17f      	bne.n	800bcfa <_dtoa_r+0x49a>
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d1e1      	bne.n	800bbc2 <_dtoa_r+0x362>
 800bbfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	f000 8087 	beq.w	800bd14 <_dtoa_r+0x4b4>
 800bc06:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	4b93      	ldr	r3, [pc, #588]	; (800be5c <_dtoa_r+0x5fc>)
 800bc0e:	4630      	mov	r0, r6
 800bc10:	4639      	mov	r1, r7
 800bc12:	f7f4 ff6b 	bl	8000aec <__aeabi_dcmplt>
 800bc16:	2800      	cmp	r0, #0
 800bc18:	d07c      	beq.n	800bd14 <_dtoa_r+0x4b4>
 800bc1a:	f1b9 0f00 	cmp.w	r9, #0
 800bc1e:	d079      	beq.n	800bd14 <_dtoa_r+0x4b4>
 800bc20:	9b02      	ldr	r3, [sp, #8]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	dd35      	ble.n	800bc92 <_dtoa_r+0x432>
 800bc26:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800bc2a:	9308      	str	r3, [sp, #32]
 800bc2c:	4639      	mov	r1, r7
 800bc2e:	2200      	movs	r2, #0
 800bc30:	4b8b      	ldr	r3, [pc, #556]	; (800be60 <_dtoa_r+0x600>)
 800bc32:	4630      	mov	r0, r6
 800bc34:	f7f4 fce8 	bl	8000608 <__aeabi_dmul>
 800bc38:	e9cd 0100 	strd	r0, r1, [sp]
 800bc3c:	9f02      	ldr	r7, [sp, #8]
 800bc3e:	3501      	adds	r5, #1
 800bc40:	4628      	mov	r0, r5
 800bc42:	f7f4 fc77 	bl	8000534 <__aeabi_i2d>
 800bc46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc4a:	f7f4 fcdd 	bl	8000608 <__aeabi_dmul>
 800bc4e:	2200      	movs	r2, #0
 800bc50:	4b84      	ldr	r3, [pc, #528]	; (800be64 <_dtoa_r+0x604>)
 800bc52:	f7f4 fb23 	bl	800029c <__adddf3>
 800bc56:	4605      	mov	r5, r0
 800bc58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bc5c:	2f00      	cmp	r7, #0
 800bc5e:	d15d      	bne.n	800bd1c <_dtoa_r+0x4bc>
 800bc60:	2200      	movs	r2, #0
 800bc62:	4b81      	ldr	r3, [pc, #516]	; (800be68 <_dtoa_r+0x608>)
 800bc64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc68:	f7f4 fb16 	bl	8000298 <__aeabi_dsub>
 800bc6c:	462a      	mov	r2, r5
 800bc6e:	4633      	mov	r3, r6
 800bc70:	e9cd 0100 	strd	r0, r1, [sp]
 800bc74:	f7f4 ff58 	bl	8000b28 <__aeabi_dcmpgt>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	f040 8288 	bne.w	800c18e <_dtoa_r+0x92e>
 800bc7e:	462a      	mov	r2, r5
 800bc80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bc84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc88:	f7f4 ff30 	bl	8000aec <__aeabi_dcmplt>
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	f040 827c 	bne.w	800c18a <_dtoa_r+0x92a>
 800bc92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bc96:	e9cd 2300 	strd	r2, r3, [sp]
 800bc9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	f2c0 8150 	blt.w	800bf42 <_dtoa_r+0x6e2>
 800bca2:	f1ba 0f0e 	cmp.w	sl, #14
 800bca6:	f300 814c 	bgt.w	800bf42 <_dtoa_r+0x6e2>
 800bcaa:	4b6a      	ldr	r3, [pc, #424]	; (800be54 <_dtoa_r+0x5f4>)
 800bcac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bcb0:	ed93 7b00 	vldr	d7, [r3]
 800bcb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bcbc:	f280 80d8 	bge.w	800be70 <_dtoa_r+0x610>
 800bcc0:	f1b9 0f00 	cmp.w	r9, #0
 800bcc4:	f300 80d4 	bgt.w	800be70 <_dtoa_r+0x610>
 800bcc8:	f040 825e 	bne.w	800c188 <_dtoa_r+0x928>
 800bccc:	2200      	movs	r2, #0
 800bcce:	4b66      	ldr	r3, [pc, #408]	; (800be68 <_dtoa_r+0x608>)
 800bcd0:	ec51 0b17 	vmov	r0, r1, d7
 800bcd4:	f7f4 fc98 	bl	8000608 <__aeabi_dmul>
 800bcd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcdc:	f7f4 ff1a 	bl	8000b14 <__aeabi_dcmpge>
 800bce0:	464f      	mov	r7, r9
 800bce2:	464e      	mov	r6, r9
 800bce4:	2800      	cmp	r0, #0
 800bce6:	f040 8234 	bne.w	800c152 <_dtoa_r+0x8f2>
 800bcea:	2331      	movs	r3, #49	; 0x31
 800bcec:	f10b 0501 	add.w	r5, fp, #1
 800bcf0:	f88b 3000 	strb.w	r3, [fp]
 800bcf4:	f10a 0a01 	add.w	sl, sl, #1
 800bcf8:	e22f      	b.n	800c15a <_dtoa_r+0x8fa>
 800bcfa:	07f2      	lsls	r2, r6, #31
 800bcfc:	d505      	bpl.n	800bd0a <_dtoa_r+0x4aa>
 800bcfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd02:	f7f4 fc81 	bl	8000608 <__aeabi_dmul>
 800bd06:	3501      	adds	r5, #1
 800bd08:	2301      	movs	r3, #1
 800bd0a:	1076      	asrs	r6, r6, #1
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	e772      	b.n	800bbf6 <_dtoa_r+0x396>
 800bd10:	2502      	movs	r5, #2
 800bd12:	e774      	b.n	800bbfe <_dtoa_r+0x39e>
 800bd14:	f8cd a020 	str.w	sl, [sp, #32]
 800bd18:	464f      	mov	r7, r9
 800bd1a:	e791      	b.n	800bc40 <_dtoa_r+0x3e0>
 800bd1c:	4b4d      	ldr	r3, [pc, #308]	; (800be54 <_dtoa_r+0x5f4>)
 800bd1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd22:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800bd26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d047      	beq.n	800bdbc <_dtoa_r+0x55c>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	460b      	mov	r3, r1
 800bd30:	2000      	movs	r0, #0
 800bd32:	494e      	ldr	r1, [pc, #312]	; (800be6c <_dtoa_r+0x60c>)
 800bd34:	f7f4 fd92 	bl	800085c <__aeabi_ddiv>
 800bd38:	462a      	mov	r2, r5
 800bd3a:	4633      	mov	r3, r6
 800bd3c:	f7f4 faac 	bl	8000298 <__aeabi_dsub>
 800bd40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bd44:	465d      	mov	r5, fp
 800bd46:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd4a:	f7f4 ff0d 	bl	8000b68 <__aeabi_d2iz>
 800bd4e:	4606      	mov	r6, r0
 800bd50:	f7f4 fbf0 	bl	8000534 <__aeabi_i2d>
 800bd54:	4602      	mov	r2, r0
 800bd56:	460b      	mov	r3, r1
 800bd58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd5c:	f7f4 fa9c 	bl	8000298 <__aeabi_dsub>
 800bd60:	3630      	adds	r6, #48	; 0x30
 800bd62:	f805 6b01 	strb.w	r6, [r5], #1
 800bd66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bd6a:	e9cd 0100 	strd	r0, r1, [sp]
 800bd6e:	f7f4 febd 	bl	8000aec <__aeabi_dcmplt>
 800bd72:	2800      	cmp	r0, #0
 800bd74:	d163      	bne.n	800be3e <_dtoa_r+0x5de>
 800bd76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd7a:	2000      	movs	r0, #0
 800bd7c:	4937      	ldr	r1, [pc, #220]	; (800be5c <_dtoa_r+0x5fc>)
 800bd7e:	f7f4 fa8b 	bl	8000298 <__aeabi_dsub>
 800bd82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bd86:	f7f4 feb1 	bl	8000aec <__aeabi_dcmplt>
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	f040 80b7 	bne.w	800befe <_dtoa_r+0x69e>
 800bd90:	eba5 030b 	sub.w	r3, r5, fp
 800bd94:	429f      	cmp	r7, r3
 800bd96:	f77f af7c 	ble.w	800bc92 <_dtoa_r+0x432>
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	4b30      	ldr	r3, [pc, #192]	; (800be60 <_dtoa_r+0x600>)
 800bd9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bda2:	f7f4 fc31 	bl	8000608 <__aeabi_dmul>
 800bda6:	2200      	movs	r2, #0
 800bda8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bdac:	4b2c      	ldr	r3, [pc, #176]	; (800be60 <_dtoa_r+0x600>)
 800bdae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdb2:	f7f4 fc29 	bl	8000608 <__aeabi_dmul>
 800bdb6:	e9cd 0100 	strd	r0, r1, [sp]
 800bdba:	e7c4      	b.n	800bd46 <_dtoa_r+0x4e6>
 800bdbc:	462a      	mov	r2, r5
 800bdbe:	4633      	mov	r3, r6
 800bdc0:	f7f4 fc22 	bl	8000608 <__aeabi_dmul>
 800bdc4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bdc8:	eb0b 0507 	add.w	r5, fp, r7
 800bdcc:	465e      	mov	r6, fp
 800bdce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdd2:	f7f4 fec9 	bl	8000b68 <__aeabi_d2iz>
 800bdd6:	4607      	mov	r7, r0
 800bdd8:	f7f4 fbac 	bl	8000534 <__aeabi_i2d>
 800bddc:	3730      	adds	r7, #48	; 0x30
 800bdde:	4602      	mov	r2, r0
 800bde0:	460b      	mov	r3, r1
 800bde2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bde6:	f7f4 fa57 	bl	8000298 <__aeabi_dsub>
 800bdea:	f806 7b01 	strb.w	r7, [r6], #1
 800bdee:	42ae      	cmp	r6, r5
 800bdf0:	e9cd 0100 	strd	r0, r1, [sp]
 800bdf4:	f04f 0200 	mov.w	r2, #0
 800bdf8:	d126      	bne.n	800be48 <_dtoa_r+0x5e8>
 800bdfa:	4b1c      	ldr	r3, [pc, #112]	; (800be6c <_dtoa_r+0x60c>)
 800bdfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800be00:	f7f4 fa4c 	bl	800029c <__adddf3>
 800be04:	4602      	mov	r2, r0
 800be06:	460b      	mov	r3, r1
 800be08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be0c:	f7f4 fe8c 	bl	8000b28 <__aeabi_dcmpgt>
 800be10:	2800      	cmp	r0, #0
 800be12:	d174      	bne.n	800befe <_dtoa_r+0x69e>
 800be14:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800be18:	2000      	movs	r0, #0
 800be1a:	4914      	ldr	r1, [pc, #80]	; (800be6c <_dtoa_r+0x60c>)
 800be1c:	f7f4 fa3c 	bl	8000298 <__aeabi_dsub>
 800be20:	4602      	mov	r2, r0
 800be22:	460b      	mov	r3, r1
 800be24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be28:	f7f4 fe60 	bl	8000aec <__aeabi_dcmplt>
 800be2c:	2800      	cmp	r0, #0
 800be2e:	f43f af30 	beq.w	800bc92 <_dtoa_r+0x432>
 800be32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be36:	2b30      	cmp	r3, #48	; 0x30
 800be38:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800be3c:	d002      	beq.n	800be44 <_dtoa_r+0x5e4>
 800be3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800be42:	e04a      	b.n	800beda <_dtoa_r+0x67a>
 800be44:	4615      	mov	r5, r2
 800be46:	e7f4      	b.n	800be32 <_dtoa_r+0x5d2>
 800be48:	4b05      	ldr	r3, [pc, #20]	; (800be60 <_dtoa_r+0x600>)
 800be4a:	f7f4 fbdd 	bl	8000608 <__aeabi_dmul>
 800be4e:	e9cd 0100 	strd	r0, r1, [sp]
 800be52:	e7bc      	b.n	800bdce <_dtoa_r+0x56e>
 800be54:	0800e828 	.word	0x0800e828
 800be58:	0800e800 	.word	0x0800e800
 800be5c:	3ff00000 	.word	0x3ff00000
 800be60:	40240000 	.word	0x40240000
 800be64:	401c0000 	.word	0x401c0000
 800be68:	40140000 	.word	0x40140000
 800be6c:	3fe00000 	.word	0x3fe00000
 800be70:	e9dd 6700 	ldrd	r6, r7, [sp]
 800be74:	465d      	mov	r5, fp
 800be76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be7a:	4630      	mov	r0, r6
 800be7c:	4639      	mov	r1, r7
 800be7e:	f7f4 fced 	bl	800085c <__aeabi_ddiv>
 800be82:	f7f4 fe71 	bl	8000b68 <__aeabi_d2iz>
 800be86:	4680      	mov	r8, r0
 800be88:	f7f4 fb54 	bl	8000534 <__aeabi_i2d>
 800be8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be90:	f7f4 fbba 	bl	8000608 <__aeabi_dmul>
 800be94:	4602      	mov	r2, r0
 800be96:	460b      	mov	r3, r1
 800be98:	4630      	mov	r0, r6
 800be9a:	4639      	mov	r1, r7
 800be9c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800bea0:	f7f4 f9fa 	bl	8000298 <__aeabi_dsub>
 800bea4:	f805 6b01 	strb.w	r6, [r5], #1
 800bea8:	eba5 060b 	sub.w	r6, r5, fp
 800beac:	45b1      	cmp	r9, r6
 800beae:	4602      	mov	r2, r0
 800beb0:	460b      	mov	r3, r1
 800beb2:	d139      	bne.n	800bf28 <_dtoa_r+0x6c8>
 800beb4:	f7f4 f9f2 	bl	800029c <__adddf3>
 800beb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bebc:	4606      	mov	r6, r0
 800bebe:	460f      	mov	r7, r1
 800bec0:	f7f4 fe32 	bl	8000b28 <__aeabi_dcmpgt>
 800bec4:	b9c8      	cbnz	r0, 800befa <_dtoa_r+0x69a>
 800bec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800beca:	4630      	mov	r0, r6
 800becc:	4639      	mov	r1, r7
 800bece:	f7f4 fe03 	bl	8000ad8 <__aeabi_dcmpeq>
 800bed2:	b110      	cbz	r0, 800beda <_dtoa_r+0x67a>
 800bed4:	f018 0f01 	tst.w	r8, #1
 800bed8:	d10f      	bne.n	800befa <_dtoa_r+0x69a>
 800beda:	9904      	ldr	r1, [sp, #16]
 800bedc:	4620      	mov	r0, r4
 800bede:	f000 ffdd 	bl	800ce9c <_Bfree>
 800bee2:	2300      	movs	r3, #0
 800bee4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bee6:	702b      	strb	r3, [r5, #0]
 800bee8:	f10a 0301 	add.w	r3, sl, #1
 800beec:	6013      	str	r3, [r2, #0]
 800beee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f000 8241 	beq.w	800c378 <_dtoa_r+0xb18>
 800bef6:	601d      	str	r5, [r3, #0]
 800bef8:	e23e      	b.n	800c378 <_dtoa_r+0xb18>
 800befa:	f8cd a020 	str.w	sl, [sp, #32]
 800befe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bf02:	2a39      	cmp	r2, #57	; 0x39
 800bf04:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800bf08:	d108      	bne.n	800bf1c <_dtoa_r+0x6bc>
 800bf0a:	459b      	cmp	fp, r3
 800bf0c:	d10a      	bne.n	800bf24 <_dtoa_r+0x6c4>
 800bf0e:	9b08      	ldr	r3, [sp, #32]
 800bf10:	3301      	adds	r3, #1
 800bf12:	9308      	str	r3, [sp, #32]
 800bf14:	2330      	movs	r3, #48	; 0x30
 800bf16:	f88b 3000 	strb.w	r3, [fp]
 800bf1a:	465b      	mov	r3, fp
 800bf1c:	781a      	ldrb	r2, [r3, #0]
 800bf1e:	3201      	adds	r2, #1
 800bf20:	701a      	strb	r2, [r3, #0]
 800bf22:	e78c      	b.n	800be3e <_dtoa_r+0x5de>
 800bf24:	461d      	mov	r5, r3
 800bf26:	e7ea      	b.n	800befe <_dtoa_r+0x69e>
 800bf28:	2200      	movs	r2, #0
 800bf2a:	4b9b      	ldr	r3, [pc, #620]	; (800c198 <_dtoa_r+0x938>)
 800bf2c:	f7f4 fb6c 	bl	8000608 <__aeabi_dmul>
 800bf30:	2200      	movs	r2, #0
 800bf32:	2300      	movs	r3, #0
 800bf34:	4606      	mov	r6, r0
 800bf36:	460f      	mov	r7, r1
 800bf38:	f7f4 fdce 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	d09a      	beq.n	800be76 <_dtoa_r+0x616>
 800bf40:	e7cb      	b.n	800beda <_dtoa_r+0x67a>
 800bf42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf44:	2a00      	cmp	r2, #0
 800bf46:	f000 808b 	beq.w	800c060 <_dtoa_r+0x800>
 800bf4a:	9a06      	ldr	r2, [sp, #24]
 800bf4c:	2a01      	cmp	r2, #1
 800bf4e:	dc6e      	bgt.n	800c02e <_dtoa_r+0x7ce>
 800bf50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bf52:	2a00      	cmp	r2, #0
 800bf54:	d067      	beq.n	800c026 <_dtoa_r+0x7c6>
 800bf56:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf5a:	9f07      	ldr	r7, [sp, #28]
 800bf5c:	9d05      	ldr	r5, [sp, #20]
 800bf5e:	9a05      	ldr	r2, [sp, #20]
 800bf60:	2101      	movs	r1, #1
 800bf62:	441a      	add	r2, r3
 800bf64:	4620      	mov	r0, r4
 800bf66:	9205      	str	r2, [sp, #20]
 800bf68:	4498      	add	r8, r3
 800bf6a:	f001 f875 	bl	800d058 <__i2b>
 800bf6e:	4606      	mov	r6, r0
 800bf70:	2d00      	cmp	r5, #0
 800bf72:	dd0c      	ble.n	800bf8e <_dtoa_r+0x72e>
 800bf74:	f1b8 0f00 	cmp.w	r8, #0
 800bf78:	dd09      	ble.n	800bf8e <_dtoa_r+0x72e>
 800bf7a:	4545      	cmp	r5, r8
 800bf7c:	9a05      	ldr	r2, [sp, #20]
 800bf7e:	462b      	mov	r3, r5
 800bf80:	bfa8      	it	ge
 800bf82:	4643      	movge	r3, r8
 800bf84:	1ad2      	subs	r2, r2, r3
 800bf86:	9205      	str	r2, [sp, #20]
 800bf88:	1aed      	subs	r5, r5, r3
 800bf8a:	eba8 0803 	sub.w	r8, r8, r3
 800bf8e:	9b07      	ldr	r3, [sp, #28]
 800bf90:	b1eb      	cbz	r3, 800bfce <_dtoa_r+0x76e>
 800bf92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d067      	beq.n	800c068 <_dtoa_r+0x808>
 800bf98:	b18f      	cbz	r7, 800bfbe <_dtoa_r+0x75e>
 800bf9a:	4631      	mov	r1, r6
 800bf9c:	463a      	mov	r2, r7
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f001 f8fa 	bl	800d198 <__pow5mult>
 800bfa4:	9a04      	ldr	r2, [sp, #16]
 800bfa6:	4601      	mov	r1, r0
 800bfa8:	4606      	mov	r6, r0
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f001 f85d 	bl	800d06a <__multiply>
 800bfb0:	9904      	ldr	r1, [sp, #16]
 800bfb2:	9008      	str	r0, [sp, #32]
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	f000 ff71 	bl	800ce9c <_Bfree>
 800bfba:	9b08      	ldr	r3, [sp, #32]
 800bfbc:	9304      	str	r3, [sp, #16]
 800bfbe:	9b07      	ldr	r3, [sp, #28]
 800bfc0:	1bda      	subs	r2, r3, r7
 800bfc2:	d004      	beq.n	800bfce <_dtoa_r+0x76e>
 800bfc4:	9904      	ldr	r1, [sp, #16]
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f001 f8e6 	bl	800d198 <__pow5mult>
 800bfcc:	9004      	str	r0, [sp, #16]
 800bfce:	2101      	movs	r1, #1
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	f001 f841 	bl	800d058 <__i2b>
 800bfd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfd8:	4607      	mov	r7, r0
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	f000 81d0 	beq.w	800c380 <_dtoa_r+0xb20>
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	4601      	mov	r1, r0
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	f001 f8d7 	bl	800d198 <__pow5mult>
 800bfea:	9b06      	ldr	r3, [sp, #24]
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	4607      	mov	r7, r0
 800bff0:	dc40      	bgt.n	800c074 <_dtoa_r+0x814>
 800bff2:	9b00      	ldr	r3, [sp, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d139      	bne.n	800c06c <_dtoa_r+0x80c>
 800bff8:	9b01      	ldr	r3, [sp, #4]
 800bffa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d136      	bne.n	800c070 <_dtoa_r+0x810>
 800c002:	9b01      	ldr	r3, [sp, #4]
 800c004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c008:	0d1b      	lsrs	r3, r3, #20
 800c00a:	051b      	lsls	r3, r3, #20
 800c00c:	b12b      	cbz	r3, 800c01a <_dtoa_r+0x7ba>
 800c00e:	9b05      	ldr	r3, [sp, #20]
 800c010:	3301      	adds	r3, #1
 800c012:	9305      	str	r3, [sp, #20]
 800c014:	f108 0801 	add.w	r8, r8, #1
 800c018:	2301      	movs	r3, #1
 800c01a:	9307      	str	r3, [sp, #28]
 800c01c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d12a      	bne.n	800c078 <_dtoa_r+0x818>
 800c022:	2001      	movs	r0, #1
 800c024:	e030      	b.n	800c088 <_dtoa_r+0x828>
 800c026:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c028:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c02c:	e795      	b.n	800bf5a <_dtoa_r+0x6fa>
 800c02e:	9b07      	ldr	r3, [sp, #28]
 800c030:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800c034:	42bb      	cmp	r3, r7
 800c036:	bfbf      	itttt	lt
 800c038:	9b07      	ldrlt	r3, [sp, #28]
 800c03a:	9707      	strlt	r7, [sp, #28]
 800c03c:	1afa      	sublt	r2, r7, r3
 800c03e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c040:	bfbb      	ittet	lt
 800c042:	189b      	addlt	r3, r3, r2
 800c044:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c046:	1bdf      	subge	r7, r3, r7
 800c048:	2700      	movlt	r7, #0
 800c04a:	f1b9 0f00 	cmp.w	r9, #0
 800c04e:	bfb5      	itete	lt
 800c050:	9b05      	ldrlt	r3, [sp, #20]
 800c052:	9d05      	ldrge	r5, [sp, #20]
 800c054:	eba3 0509 	sublt.w	r5, r3, r9
 800c058:	464b      	movge	r3, r9
 800c05a:	bfb8      	it	lt
 800c05c:	2300      	movlt	r3, #0
 800c05e:	e77e      	b.n	800bf5e <_dtoa_r+0x6fe>
 800c060:	9f07      	ldr	r7, [sp, #28]
 800c062:	9d05      	ldr	r5, [sp, #20]
 800c064:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c066:	e783      	b.n	800bf70 <_dtoa_r+0x710>
 800c068:	9a07      	ldr	r2, [sp, #28]
 800c06a:	e7ab      	b.n	800bfc4 <_dtoa_r+0x764>
 800c06c:	2300      	movs	r3, #0
 800c06e:	e7d4      	b.n	800c01a <_dtoa_r+0x7ba>
 800c070:	9b00      	ldr	r3, [sp, #0]
 800c072:	e7d2      	b.n	800c01a <_dtoa_r+0x7ba>
 800c074:	2300      	movs	r3, #0
 800c076:	9307      	str	r3, [sp, #28]
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c07e:	6918      	ldr	r0, [r3, #16]
 800c080:	f000 ff9c 	bl	800cfbc <__hi0bits>
 800c084:	f1c0 0020 	rsb	r0, r0, #32
 800c088:	4440      	add	r0, r8
 800c08a:	f010 001f 	ands.w	r0, r0, #31
 800c08e:	d047      	beq.n	800c120 <_dtoa_r+0x8c0>
 800c090:	f1c0 0320 	rsb	r3, r0, #32
 800c094:	2b04      	cmp	r3, #4
 800c096:	dd3b      	ble.n	800c110 <_dtoa_r+0x8b0>
 800c098:	9b05      	ldr	r3, [sp, #20]
 800c09a:	f1c0 001c 	rsb	r0, r0, #28
 800c09e:	4403      	add	r3, r0
 800c0a0:	9305      	str	r3, [sp, #20]
 800c0a2:	4405      	add	r5, r0
 800c0a4:	4480      	add	r8, r0
 800c0a6:	9b05      	ldr	r3, [sp, #20]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	dd05      	ble.n	800c0b8 <_dtoa_r+0x858>
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	9904      	ldr	r1, [sp, #16]
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	f001 f8bf 	bl	800d234 <__lshift>
 800c0b6:	9004      	str	r0, [sp, #16]
 800c0b8:	f1b8 0f00 	cmp.w	r8, #0
 800c0bc:	dd05      	ble.n	800c0ca <_dtoa_r+0x86a>
 800c0be:	4639      	mov	r1, r7
 800c0c0:	4642      	mov	r2, r8
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	f001 f8b6 	bl	800d234 <__lshift>
 800c0c8:	4607      	mov	r7, r0
 800c0ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0cc:	b353      	cbz	r3, 800c124 <_dtoa_r+0x8c4>
 800c0ce:	4639      	mov	r1, r7
 800c0d0:	9804      	ldr	r0, [sp, #16]
 800c0d2:	f001 f903 	bl	800d2dc <__mcmp>
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	da24      	bge.n	800c124 <_dtoa_r+0x8c4>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	220a      	movs	r2, #10
 800c0de:	9904      	ldr	r1, [sp, #16]
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	f000 fef2 	bl	800ceca <__multadd>
 800c0e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0e8:	9004      	str	r0, [sp, #16]
 800c0ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	f000 814d 	beq.w	800c38e <_dtoa_r+0xb2e>
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	4631      	mov	r1, r6
 800c0f8:	220a      	movs	r2, #10
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	f000 fee5 	bl	800ceca <__multadd>
 800c100:	9b02      	ldr	r3, [sp, #8]
 800c102:	2b00      	cmp	r3, #0
 800c104:	4606      	mov	r6, r0
 800c106:	dc4f      	bgt.n	800c1a8 <_dtoa_r+0x948>
 800c108:	9b06      	ldr	r3, [sp, #24]
 800c10a:	2b02      	cmp	r3, #2
 800c10c:	dd4c      	ble.n	800c1a8 <_dtoa_r+0x948>
 800c10e:	e011      	b.n	800c134 <_dtoa_r+0x8d4>
 800c110:	d0c9      	beq.n	800c0a6 <_dtoa_r+0x846>
 800c112:	9a05      	ldr	r2, [sp, #20]
 800c114:	331c      	adds	r3, #28
 800c116:	441a      	add	r2, r3
 800c118:	9205      	str	r2, [sp, #20]
 800c11a:	441d      	add	r5, r3
 800c11c:	4498      	add	r8, r3
 800c11e:	e7c2      	b.n	800c0a6 <_dtoa_r+0x846>
 800c120:	4603      	mov	r3, r0
 800c122:	e7f6      	b.n	800c112 <_dtoa_r+0x8b2>
 800c124:	f1b9 0f00 	cmp.w	r9, #0
 800c128:	dc38      	bgt.n	800c19c <_dtoa_r+0x93c>
 800c12a:	9b06      	ldr	r3, [sp, #24]
 800c12c:	2b02      	cmp	r3, #2
 800c12e:	dd35      	ble.n	800c19c <_dtoa_r+0x93c>
 800c130:	f8cd 9008 	str.w	r9, [sp, #8]
 800c134:	9b02      	ldr	r3, [sp, #8]
 800c136:	b963      	cbnz	r3, 800c152 <_dtoa_r+0x8f2>
 800c138:	4639      	mov	r1, r7
 800c13a:	2205      	movs	r2, #5
 800c13c:	4620      	mov	r0, r4
 800c13e:	f000 fec4 	bl	800ceca <__multadd>
 800c142:	4601      	mov	r1, r0
 800c144:	4607      	mov	r7, r0
 800c146:	9804      	ldr	r0, [sp, #16]
 800c148:	f001 f8c8 	bl	800d2dc <__mcmp>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	f73f adcc 	bgt.w	800bcea <_dtoa_r+0x48a>
 800c152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c154:	465d      	mov	r5, fp
 800c156:	ea6f 0a03 	mvn.w	sl, r3
 800c15a:	f04f 0900 	mov.w	r9, #0
 800c15e:	4639      	mov	r1, r7
 800c160:	4620      	mov	r0, r4
 800c162:	f000 fe9b 	bl	800ce9c <_Bfree>
 800c166:	2e00      	cmp	r6, #0
 800c168:	f43f aeb7 	beq.w	800beda <_dtoa_r+0x67a>
 800c16c:	f1b9 0f00 	cmp.w	r9, #0
 800c170:	d005      	beq.n	800c17e <_dtoa_r+0x91e>
 800c172:	45b1      	cmp	r9, r6
 800c174:	d003      	beq.n	800c17e <_dtoa_r+0x91e>
 800c176:	4649      	mov	r1, r9
 800c178:	4620      	mov	r0, r4
 800c17a:	f000 fe8f 	bl	800ce9c <_Bfree>
 800c17e:	4631      	mov	r1, r6
 800c180:	4620      	mov	r0, r4
 800c182:	f000 fe8b 	bl	800ce9c <_Bfree>
 800c186:	e6a8      	b.n	800beda <_dtoa_r+0x67a>
 800c188:	2700      	movs	r7, #0
 800c18a:	463e      	mov	r6, r7
 800c18c:	e7e1      	b.n	800c152 <_dtoa_r+0x8f2>
 800c18e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c192:	463e      	mov	r6, r7
 800c194:	e5a9      	b.n	800bcea <_dtoa_r+0x48a>
 800c196:	bf00      	nop
 800c198:	40240000 	.word	0x40240000
 800c19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c19e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	f000 80fa 	beq.w	800c39c <_dtoa_r+0xb3c>
 800c1a8:	2d00      	cmp	r5, #0
 800c1aa:	dd05      	ble.n	800c1b8 <_dtoa_r+0x958>
 800c1ac:	4631      	mov	r1, r6
 800c1ae:	462a      	mov	r2, r5
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f001 f83f 	bl	800d234 <__lshift>
 800c1b6:	4606      	mov	r6, r0
 800c1b8:	9b07      	ldr	r3, [sp, #28]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d04c      	beq.n	800c258 <_dtoa_r+0x9f8>
 800c1be:	6871      	ldr	r1, [r6, #4]
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f000 fe37 	bl	800ce34 <_Balloc>
 800c1c6:	6932      	ldr	r2, [r6, #16]
 800c1c8:	3202      	adds	r2, #2
 800c1ca:	4605      	mov	r5, r0
 800c1cc:	0092      	lsls	r2, r2, #2
 800c1ce:	f106 010c 	add.w	r1, r6, #12
 800c1d2:	300c      	adds	r0, #12
 800c1d4:	f7fd fc54 	bl	8009a80 <memcpy>
 800c1d8:	2201      	movs	r2, #1
 800c1da:	4629      	mov	r1, r5
 800c1dc:	4620      	mov	r0, r4
 800c1de:	f001 f829 	bl	800d234 <__lshift>
 800c1e2:	9b00      	ldr	r3, [sp, #0]
 800c1e4:	f8cd b014 	str.w	fp, [sp, #20]
 800c1e8:	f003 0301 	and.w	r3, r3, #1
 800c1ec:	46b1      	mov	r9, r6
 800c1ee:	9307      	str	r3, [sp, #28]
 800c1f0:	4606      	mov	r6, r0
 800c1f2:	4639      	mov	r1, r7
 800c1f4:	9804      	ldr	r0, [sp, #16]
 800c1f6:	f7ff faa5 	bl	800b744 <quorem>
 800c1fa:	4649      	mov	r1, r9
 800c1fc:	4605      	mov	r5, r0
 800c1fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c202:	9804      	ldr	r0, [sp, #16]
 800c204:	f001 f86a 	bl	800d2dc <__mcmp>
 800c208:	4632      	mov	r2, r6
 800c20a:	9000      	str	r0, [sp, #0]
 800c20c:	4639      	mov	r1, r7
 800c20e:	4620      	mov	r0, r4
 800c210:	f001 f87e 	bl	800d310 <__mdiff>
 800c214:	68c3      	ldr	r3, [r0, #12]
 800c216:	4602      	mov	r2, r0
 800c218:	bb03      	cbnz	r3, 800c25c <_dtoa_r+0x9fc>
 800c21a:	4601      	mov	r1, r0
 800c21c:	9008      	str	r0, [sp, #32]
 800c21e:	9804      	ldr	r0, [sp, #16]
 800c220:	f001 f85c 	bl	800d2dc <__mcmp>
 800c224:	9a08      	ldr	r2, [sp, #32]
 800c226:	4603      	mov	r3, r0
 800c228:	4611      	mov	r1, r2
 800c22a:	4620      	mov	r0, r4
 800c22c:	9308      	str	r3, [sp, #32]
 800c22e:	f000 fe35 	bl	800ce9c <_Bfree>
 800c232:	9b08      	ldr	r3, [sp, #32]
 800c234:	b9a3      	cbnz	r3, 800c260 <_dtoa_r+0xa00>
 800c236:	9a06      	ldr	r2, [sp, #24]
 800c238:	b992      	cbnz	r2, 800c260 <_dtoa_r+0xa00>
 800c23a:	9a07      	ldr	r2, [sp, #28]
 800c23c:	b982      	cbnz	r2, 800c260 <_dtoa_r+0xa00>
 800c23e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c242:	d029      	beq.n	800c298 <_dtoa_r+0xa38>
 800c244:	9b00      	ldr	r3, [sp, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	dd01      	ble.n	800c24e <_dtoa_r+0x9ee>
 800c24a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c24e:	9b05      	ldr	r3, [sp, #20]
 800c250:	1c5d      	adds	r5, r3, #1
 800c252:	f883 8000 	strb.w	r8, [r3]
 800c256:	e782      	b.n	800c15e <_dtoa_r+0x8fe>
 800c258:	4630      	mov	r0, r6
 800c25a:	e7c2      	b.n	800c1e2 <_dtoa_r+0x982>
 800c25c:	2301      	movs	r3, #1
 800c25e:	e7e3      	b.n	800c228 <_dtoa_r+0x9c8>
 800c260:	9a00      	ldr	r2, [sp, #0]
 800c262:	2a00      	cmp	r2, #0
 800c264:	db04      	blt.n	800c270 <_dtoa_r+0xa10>
 800c266:	d125      	bne.n	800c2b4 <_dtoa_r+0xa54>
 800c268:	9a06      	ldr	r2, [sp, #24]
 800c26a:	bb1a      	cbnz	r2, 800c2b4 <_dtoa_r+0xa54>
 800c26c:	9a07      	ldr	r2, [sp, #28]
 800c26e:	bb0a      	cbnz	r2, 800c2b4 <_dtoa_r+0xa54>
 800c270:	2b00      	cmp	r3, #0
 800c272:	ddec      	ble.n	800c24e <_dtoa_r+0x9ee>
 800c274:	2201      	movs	r2, #1
 800c276:	9904      	ldr	r1, [sp, #16]
 800c278:	4620      	mov	r0, r4
 800c27a:	f000 ffdb 	bl	800d234 <__lshift>
 800c27e:	4639      	mov	r1, r7
 800c280:	9004      	str	r0, [sp, #16]
 800c282:	f001 f82b 	bl	800d2dc <__mcmp>
 800c286:	2800      	cmp	r0, #0
 800c288:	dc03      	bgt.n	800c292 <_dtoa_r+0xa32>
 800c28a:	d1e0      	bne.n	800c24e <_dtoa_r+0x9ee>
 800c28c:	f018 0f01 	tst.w	r8, #1
 800c290:	d0dd      	beq.n	800c24e <_dtoa_r+0x9ee>
 800c292:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c296:	d1d8      	bne.n	800c24a <_dtoa_r+0x9ea>
 800c298:	9b05      	ldr	r3, [sp, #20]
 800c29a:	9a05      	ldr	r2, [sp, #20]
 800c29c:	1c5d      	adds	r5, r3, #1
 800c29e:	2339      	movs	r3, #57	; 0x39
 800c2a0:	7013      	strb	r3, [r2, #0]
 800c2a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c2a6:	2b39      	cmp	r3, #57	; 0x39
 800c2a8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c2ac:	d04f      	beq.n	800c34e <_dtoa_r+0xaee>
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	7013      	strb	r3, [r2, #0]
 800c2b2:	e754      	b.n	800c15e <_dtoa_r+0x8fe>
 800c2b4:	9a05      	ldr	r2, [sp, #20]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	f102 0501 	add.w	r5, r2, #1
 800c2bc:	dd06      	ble.n	800c2cc <_dtoa_r+0xa6c>
 800c2be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c2c2:	d0e9      	beq.n	800c298 <_dtoa_r+0xa38>
 800c2c4:	f108 0801 	add.w	r8, r8, #1
 800c2c8:	9b05      	ldr	r3, [sp, #20]
 800c2ca:	e7c2      	b.n	800c252 <_dtoa_r+0x9f2>
 800c2cc:	9a02      	ldr	r2, [sp, #8]
 800c2ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c2d2:	eba5 030b 	sub.w	r3, r5, fp
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d021      	beq.n	800c31e <_dtoa_r+0xabe>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	220a      	movs	r2, #10
 800c2de:	9904      	ldr	r1, [sp, #16]
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	f000 fdf2 	bl	800ceca <__multadd>
 800c2e6:	45b1      	cmp	r9, r6
 800c2e8:	9004      	str	r0, [sp, #16]
 800c2ea:	f04f 0300 	mov.w	r3, #0
 800c2ee:	f04f 020a 	mov.w	r2, #10
 800c2f2:	4649      	mov	r1, r9
 800c2f4:	4620      	mov	r0, r4
 800c2f6:	d105      	bne.n	800c304 <_dtoa_r+0xaa4>
 800c2f8:	f000 fde7 	bl	800ceca <__multadd>
 800c2fc:	4681      	mov	r9, r0
 800c2fe:	4606      	mov	r6, r0
 800c300:	9505      	str	r5, [sp, #20]
 800c302:	e776      	b.n	800c1f2 <_dtoa_r+0x992>
 800c304:	f000 fde1 	bl	800ceca <__multadd>
 800c308:	4631      	mov	r1, r6
 800c30a:	4681      	mov	r9, r0
 800c30c:	2300      	movs	r3, #0
 800c30e:	220a      	movs	r2, #10
 800c310:	4620      	mov	r0, r4
 800c312:	f000 fdda 	bl	800ceca <__multadd>
 800c316:	4606      	mov	r6, r0
 800c318:	e7f2      	b.n	800c300 <_dtoa_r+0xaa0>
 800c31a:	f04f 0900 	mov.w	r9, #0
 800c31e:	2201      	movs	r2, #1
 800c320:	9904      	ldr	r1, [sp, #16]
 800c322:	4620      	mov	r0, r4
 800c324:	f000 ff86 	bl	800d234 <__lshift>
 800c328:	4639      	mov	r1, r7
 800c32a:	9004      	str	r0, [sp, #16]
 800c32c:	f000 ffd6 	bl	800d2dc <__mcmp>
 800c330:	2800      	cmp	r0, #0
 800c332:	dcb6      	bgt.n	800c2a2 <_dtoa_r+0xa42>
 800c334:	d102      	bne.n	800c33c <_dtoa_r+0xadc>
 800c336:	f018 0f01 	tst.w	r8, #1
 800c33a:	d1b2      	bne.n	800c2a2 <_dtoa_r+0xa42>
 800c33c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c340:	2b30      	cmp	r3, #48	; 0x30
 800c342:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c346:	f47f af0a 	bne.w	800c15e <_dtoa_r+0x8fe>
 800c34a:	4615      	mov	r5, r2
 800c34c:	e7f6      	b.n	800c33c <_dtoa_r+0xadc>
 800c34e:	4593      	cmp	fp, r2
 800c350:	d105      	bne.n	800c35e <_dtoa_r+0xafe>
 800c352:	2331      	movs	r3, #49	; 0x31
 800c354:	f10a 0a01 	add.w	sl, sl, #1
 800c358:	f88b 3000 	strb.w	r3, [fp]
 800c35c:	e6ff      	b.n	800c15e <_dtoa_r+0x8fe>
 800c35e:	4615      	mov	r5, r2
 800c360:	e79f      	b.n	800c2a2 <_dtoa_r+0xa42>
 800c362:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c3c8 <_dtoa_r+0xb68>
 800c366:	e007      	b.n	800c378 <_dtoa_r+0xb18>
 800c368:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c36a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c3cc <_dtoa_r+0xb6c>
 800c36e:	b11b      	cbz	r3, 800c378 <_dtoa_r+0xb18>
 800c370:	f10b 0308 	add.w	r3, fp, #8
 800c374:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c376:	6013      	str	r3, [r2, #0]
 800c378:	4658      	mov	r0, fp
 800c37a:	b017      	add	sp, #92	; 0x5c
 800c37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c380:	9b06      	ldr	r3, [sp, #24]
 800c382:	2b01      	cmp	r3, #1
 800c384:	f77f ae35 	ble.w	800bff2 <_dtoa_r+0x792>
 800c388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c38a:	9307      	str	r3, [sp, #28]
 800c38c:	e649      	b.n	800c022 <_dtoa_r+0x7c2>
 800c38e:	9b02      	ldr	r3, [sp, #8]
 800c390:	2b00      	cmp	r3, #0
 800c392:	dc03      	bgt.n	800c39c <_dtoa_r+0xb3c>
 800c394:	9b06      	ldr	r3, [sp, #24]
 800c396:	2b02      	cmp	r3, #2
 800c398:	f73f aecc 	bgt.w	800c134 <_dtoa_r+0x8d4>
 800c39c:	465d      	mov	r5, fp
 800c39e:	4639      	mov	r1, r7
 800c3a0:	9804      	ldr	r0, [sp, #16]
 800c3a2:	f7ff f9cf 	bl	800b744 <quorem>
 800c3a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c3aa:	f805 8b01 	strb.w	r8, [r5], #1
 800c3ae:	9a02      	ldr	r2, [sp, #8]
 800c3b0:	eba5 030b 	sub.w	r3, r5, fp
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	ddb0      	ble.n	800c31a <_dtoa_r+0xaba>
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	220a      	movs	r2, #10
 800c3bc:	9904      	ldr	r1, [sp, #16]
 800c3be:	4620      	mov	r0, r4
 800c3c0:	f000 fd83 	bl	800ceca <__multadd>
 800c3c4:	9004      	str	r0, [sp, #16]
 800c3c6:	e7ea      	b.n	800c39e <_dtoa_r+0xb3e>
 800c3c8:	0800e704 	.word	0x0800e704
 800c3cc:	0800e780 	.word	0x0800e780

0800c3d0 <__sflush_r>:
 800c3d0:	898a      	ldrh	r2, [r1, #12]
 800c3d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d6:	4605      	mov	r5, r0
 800c3d8:	0710      	lsls	r0, r2, #28
 800c3da:	460c      	mov	r4, r1
 800c3dc:	d458      	bmi.n	800c490 <__sflush_r+0xc0>
 800c3de:	684b      	ldr	r3, [r1, #4]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	dc05      	bgt.n	800c3f0 <__sflush_r+0x20>
 800c3e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	dc02      	bgt.n	800c3f0 <__sflush_r+0x20>
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3f2:	2e00      	cmp	r6, #0
 800c3f4:	d0f9      	beq.n	800c3ea <__sflush_r+0x1a>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3fc:	682f      	ldr	r7, [r5, #0]
 800c3fe:	6a21      	ldr	r1, [r4, #32]
 800c400:	602b      	str	r3, [r5, #0]
 800c402:	d032      	beq.n	800c46a <__sflush_r+0x9a>
 800c404:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c406:	89a3      	ldrh	r3, [r4, #12]
 800c408:	075a      	lsls	r2, r3, #29
 800c40a:	d505      	bpl.n	800c418 <__sflush_r+0x48>
 800c40c:	6863      	ldr	r3, [r4, #4]
 800c40e:	1ac0      	subs	r0, r0, r3
 800c410:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c412:	b10b      	cbz	r3, 800c418 <__sflush_r+0x48>
 800c414:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c416:	1ac0      	subs	r0, r0, r3
 800c418:	2300      	movs	r3, #0
 800c41a:	4602      	mov	r2, r0
 800c41c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c41e:	6a21      	ldr	r1, [r4, #32]
 800c420:	4628      	mov	r0, r5
 800c422:	47b0      	blx	r6
 800c424:	1c43      	adds	r3, r0, #1
 800c426:	89a3      	ldrh	r3, [r4, #12]
 800c428:	d106      	bne.n	800c438 <__sflush_r+0x68>
 800c42a:	6829      	ldr	r1, [r5, #0]
 800c42c:	291d      	cmp	r1, #29
 800c42e:	d848      	bhi.n	800c4c2 <__sflush_r+0xf2>
 800c430:	4a29      	ldr	r2, [pc, #164]	; (800c4d8 <__sflush_r+0x108>)
 800c432:	40ca      	lsrs	r2, r1
 800c434:	07d6      	lsls	r6, r2, #31
 800c436:	d544      	bpl.n	800c4c2 <__sflush_r+0xf2>
 800c438:	2200      	movs	r2, #0
 800c43a:	6062      	str	r2, [r4, #4]
 800c43c:	04d9      	lsls	r1, r3, #19
 800c43e:	6922      	ldr	r2, [r4, #16]
 800c440:	6022      	str	r2, [r4, #0]
 800c442:	d504      	bpl.n	800c44e <__sflush_r+0x7e>
 800c444:	1c42      	adds	r2, r0, #1
 800c446:	d101      	bne.n	800c44c <__sflush_r+0x7c>
 800c448:	682b      	ldr	r3, [r5, #0]
 800c44a:	b903      	cbnz	r3, 800c44e <__sflush_r+0x7e>
 800c44c:	6560      	str	r0, [r4, #84]	; 0x54
 800c44e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c450:	602f      	str	r7, [r5, #0]
 800c452:	2900      	cmp	r1, #0
 800c454:	d0c9      	beq.n	800c3ea <__sflush_r+0x1a>
 800c456:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c45a:	4299      	cmp	r1, r3
 800c45c:	d002      	beq.n	800c464 <__sflush_r+0x94>
 800c45e:	4628      	mov	r0, r5
 800c460:	f001 f8f6 	bl	800d650 <_free_r>
 800c464:	2000      	movs	r0, #0
 800c466:	6360      	str	r0, [r4, #52]	; 0x34
 800c468:	e7c0      	b.n	800c3ec <__sflush_r+0x1c>
 800c46a:	2301      	movs	r3, #1
 800c46c:	4628      	mov	r0, r5
 800c46e:	47b0      	blx	r6
 800c470:	1c41      	adds	r1, r0, #1
 800c472:	d1c8      	bne.n	800c406 <__sflush_r+0x36>
 800c474:	682b      	ldr	r3, [r5, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d0c5      	beq.n	800c406 <__sflush_r+0x36>
 800c47a:	2b1d      	cmp	r3, #29
 800c47c:	d001      	beq.n	800c482 <__sflush_r+0xb2>
 800c47e:	2b16      	cmp	r3, #22
 800c480:	d101      	bne.n	800c486 <__sflush_r+0xb6>
 800c482:	602f      	str	r7, [r5, #0]
 800c484:	e7b1      	b.n	800c3ea <__sflush_r+0x1a>
 800c486:	89a3      	ldrh	r3, [r4, #12]
 800c488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c48c:	81a3      	strh	r3, [r4, #12]
 800c48e:	e7ad      	b.n	800c3ec <__sflush_r+0x1c>
 800c490:	690f      	ldr	r7, [r1, #16]
 800c492:	2f00      	cmp	r7, #0
 800c494:	d0a9      	beq.n	800c3ea <__sflush_r+0x1a>
 800c496:	0793      	lsls	r3, r2, #30
 800c498:	680e      	ldr	r6, [r1, #0]
 800c49a:	bf08      	it	eq
 800c49c:	694b      	ldreq	r3, [r1, #20]
 800c49e:	600f      	str	r7, [r1, #0]
 800c4a0:	bf18      	it	ne
 800c4a2:	2300      	movne	r3, #0
 800c4a4:	eba6 0807 	sub.w	r8, r6, r7
 800c4a8:	608b      	str	r3, [r1, #8]
 800c4aa:	f1b8 0f00 	cmp.w	r8, #0
 800c4ae:	dd9c      	ble.n	800c3ea <__sflush_r+0x1a>
 800c4b0:	4643      	mov	r3, r8
 800c4b2:	463a      	mov	r2, r7
 800c4b4:	6a21      	ldr	r1, [r4, #32]
 800c4b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	47b0      	blx	r6
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	dc06      	bgt.n	800c4ce <__sflush_r+0xfe>
 800c4c0:	89a3      	ldrh	r3, [r4, #12]
 800c4c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4c6:	81a3      	strh	r3, [r4, #12]
 800c4c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4cc:	e78e      	b.n	800c3ec <__sflush_r+0x1c>
 800c4ce:	4407      	add	r7, r0
 800c4d0:	eba8 0800 	sub.w	r8, r8, r0
 800c4d4:	e7e9      	b.n	800c4aa <__sflush_r+0xda>
 800c4d6:	bf00      	nop
 800c4d8:	20400001 	.word	0x20400001

0800c4dc <_fflush_r>:
 800c4dc:	b538      	push	{r3, r4, r5, lr}
 800c4de:	690b      	ldr	r3, [r1, #16]
 800c4e0:	4605      	mov	r5, r0
 800c4e2:	460c      	mov	r4, r1
 800c4e4:	b1db      	cbz	r3, 800c51e <_fflush_r+0x42>
 800c4e6:	b118      	cbz	r0, 800c4f0 <_fflush_r+0x14>
 800c4e8:	6983      	ldr	r3, [r0, #24]
 800c4ea:	b90b      	cbnz	r3, 800c4f0 <_fflush_r+0x14>
 800c4ec:	f000 f860 	bl	800c5b0 <__sinit>
 800c4f0:	4b0c      	ldr	r3, [pc, #48]	; (800c524 <_fflush_r+0x48>)
 800c4f2:	429c      	cmp	r4, r3
 800c4f4:	d109      	bne.n	800c50a <_fflush_r+0x2e>
 800c4f6:	686c      	ldr	r4, [r5, #4]
 800c4f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4fc:	b17b      	cbz	r3, 800c51e <_fflush_r+0x42>
 800c4fe:	4621      	mov	r1, r4
 800c500:	4628      	mov	r0, r5
 800c502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c506:	f7ff bf63 	b.w	800c3d0 <__sflush_r>
 800c50a:	4b07      	ldr	r3, [pc, #28]	; (800c528 <_fflush_r+0x4c>)
 800c50c:	429c      	cmp	r4, r3
 800c50e:	d101      	bne.n	800c514 <_fflush_r+0x38>
 800c510:	68ac      	ldr	r4, [r5, #8]
 800c512:	e7f1      	b.n	800c4f8 <_fflush_r+0x1c>
 800c514:	4b05      	ldr	r3, [pc, #20]	; (800c52c <_fflush_r+0x50>)
 800c516:	429c      	cmp	r4, r3
 800c518:	bf08      	it	eq
 800c51a:	68ec      	ldreq	r4, [r5, #12]
 800c51c:	e7ec      	b.n	800c4f8 <_fflush_r+0x1c>
 800c51e:	2000      	movs	r0, #0
 800c520:	bd38      	pop	{r3, r4, r5, pc}
 800c522:	bf00      	nop
 800c524:	0800e7b0 	.word	0x0800e7b0
 800c528:	0800e7d0 	.word	0x0800e7d0
 800c52c:	0800e790 	.word	0x0800e790

0800c530 <std>:
 800c530:	2300      	movs	r3, #0
 800c532:	b510      	push	{r4, lr}
 800c534:	4604      	mov	r4, r0
 800c536:	e9c0 3300 	strd	r3, r3, [r0]
 800c53a:	6083      	str	r3, [r0, #8]
 800c53c:	8181      	strh	r1, [r0, #12]
 800c53e:	6643      	str	r3, [r0, #100]	; 0x64
 800c540:	81c2      	strh	r2, [r0, #14]
 800c542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c546:	6183      	str	r3, [r0, #24]
 800c548:	4619      	mov	r1, r3
 800c54a:	2208      	movs	r2, #8
 800c54c:	305c      	adds	r0, #92	; 0x5c
 800c54e:	f7fd faa2 	bl	8009a96 <memset>
 800c552:	4b05      	ldr	r3, [pc, #20]	; (800c568 <std+0x38>)
 800c554:	6263      	str	r3, [r4, #36]	; 0x24
 800c556:	4b05      	ldr	r3, [pc, #20]	; (800c56c <std+0x3c>)
 800c558:	62a3      	str	r3, [r4, #40]	; 0x28
 800c55a:	4b05      	ldr	r3, [pc, #20]	; (800c570 <std+0x40>)
 800c55c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c55e:	4b05      	ldr	r3, [pc, #20]	; (800c574 <std+0x44>)
 800c560:	6224      	str	r4, [r4, #32]
 800c562:	6323      	str	r3, [r4, #48]	; 0x30
 800c564:	bd10      	pop	{r4, pc}
 800c566:	bf00      	nop
 800c568:	0800dce5 	.word	0x0800dce5
 800c56c:	0800dd07 	.word	0x0800dd07
 800c570:	0800dd3f 	.word	0x0800dd3f
 800c574:	0800dd63 	.word	0x0800dd63

0800c578 <_cleanup_r>:
 800c578:	4901      	ldr	r1, [pc, #4]	; (800c580 <_cleanup_r+0x8>)
 800c57a:	f000 b885 	b.w	800c688 <_fwalk_reent>
 800c57e:	bf00      	nop
 800c580:	0800c4dd 	.word	0x0800c4dd

0800c584 <__sfmoreglue>:
 800c584:	b570      	push	{r4, r5, r6, lr}
 800c586:	1e4a      	subs	r2, r1, #1
 800c588:	2568      	movs	r5, #104	; 0x68
 800c58a:	4355      	muls	r5, r2
 800c58c:	460e      	mov	r6, r1
 800c58e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c592:	f001 f8ab 	bl	800d6ec <_malloc_r>
 800c596:	4604      	mov	r4, r0
 800c598:	b140      	cbz	r0, 800c5ac <__sfmoreglue+0x28>
 800c59a:	2100      	movs	r1, #0
 800c59c:	e9c0 1600 	strd	r1, r6, [r0]
 800c5a0:	300c      	adds	r0, #12
 800c5a2:	60a0      	str	r0, [r4, #8]
 800c5a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c5a8:	f7fd fa75 	bl	8009a96 <memset>
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	bd70      	pop	{r4, r5, r6, pc}

0800c5b0 <__sinit>:
 800c5b0:	6983      	ldr	r3, [r0, #24]
 800c5b2:	b510      	push	{r4, lr}
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	bb33      	cbnz	r3, 800c606 <__sinit+0x56>
 800c5b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c5bc:	6503      	str	r3, [r0, #80]	; 0x50
 800c5be:	4b12      	ldr	r3, [pc, #72]	; (800c608 <__sinit+0x58>)
 800c5c0:	4a12      	ldr	r2, [pc, #72]	; (800c60c <__sinit+0x5c>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	6282      	str	r2, [r0, #40]	; 0x28
 800c5c6:	4298      	cmp	r0, r3
 800c5c8:	bf04      	itt	eq
 800c5ca:	2301      	moveq	r3, #1
 800c5cc:	6183      	streq	r3, [r0, #24]
 800c5ce:	f000 f81f 	bl	800c610 <__sfp>
 800c5d2:	6060      	str	r0, [r4, #4]
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	f000 f81b 	bl	800c610 <__sfp>
 800c5da:	60a0      	str	r0, [r4, #8]
 800c5dc:	4620      	mov	r0, r4
 800c5de:	f000 f817 	bl	800c610 <__sfp>
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	60e0      	str	r0, [r4, #12]
 800c5e6:	2104      	movs	r1, #4
 800c5e8:	6860      	ldr	r0, [r4, #4]
 800c5ea:	f7ff ffa1 	bl	800c530 <std>
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	2109      	movs	r1, #9
 800c5f2:	68a0      	ldr	r0, [r4, #8]
 800c5f4:	f7ff ff9c 	bl	800c530 <std>
 800c5f8:	2202      	movs	r2, #2
 800c5fa:	2112      	movs	r1, #18
 800c5fc:	68e0      	ldr	r0, [r4, #12]
 800c5fe:	f7ff ff97 	bl	800c530 <std>
 800c602:	2301      	movs	r3, #1
 800c604:	61a3      	str	r3, [r4, #24]
 800c606:	bd10      	pop	{r4, pc}
 800c608:	0800e6f0 	.word	0x0800e6f0
 800c60c:	0800c579 	.word	0x0800c579

0800c610 <__sfp>:
 800c610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c612:	4b1b      	ldr	r3, [pc, #108]	; (800c680 <__sfp+0x70>)
 800c614:	681e      	ldr	r6, [r3, #0]
 800c616:	69b3      	ldr	r3, [r6, #24]
 800c618:	4607      	mov	r7, r0
 800c61a:	b913      	cbnz	r3, 800c622 <__sfp+0x12>
 800c61c:	4630      	mov	r0, r6
 800c61e:	f7ff ffc7 	bl	800c5b0 <__sinit>
 800c622:	3648      	adds	r6, #72	; 0x48
 800c624:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c628:	3b01      	subs	r3, #1
 800c62a:	d503      	bpl.n	800c634 <__sfp+0x24>
 800c62c:	6833      	ldr	r3, [r6, #0]
 800c62e:	b133      	cbz	r3, 800c63e <__sfp+0x2e>
 800c630:	6836      	ldr	r6, [r6, #0]
 800c632:	e7f7      	b.n	800c624 <__sfp+0x14>
 800c634:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c638:	b16d      	cbz	r5, 800c656 <__sfp+0x46>
 800c63a:	3468      	adds	r4, #104	; 0x68
 800c63c:	e7f4      	b.n	800c628 <__sfp+0x18>
 800c63e:	2104      	movs	r1, #4
 800c640:	4638      	mov	r0, r7
 800c642:	f7ff ff9f 	bl	800c584 <__sfmoreglue>
 800c646:	6030      	str	r0, [r6, #0]
 800c648:	2800      	cmp	r0, #0
 800c64a:	d1f1      	bne.n	800c630 <__sfp+0x20>
 800c64c:	230c      	movs	r3, #12
 800c64e:	603b      	str	r3, [r7, #0]
 800c650:	4604      	mov	r4, r0
 800c652:	4620      	mov	r0, r4
 800c654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c656:	4b0b      	ldr	r3, [pc, #44]	; (800c684 <__sfp+0x74>)
 800c658:	6665      	str	r5, [r4, #100]	; 0x64
 800c65a:	e9c4 5500 	strd	r5, r5, [r4]
 800c65e:	60a5      	str	r5, [r4, #8]
 800c660:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c664:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c668:	2208      	movs	r2, #8
 800c66a:	4629      	mov	r1, r5
 800c66c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c670:	f7fd fa11 	bl	8009a96 <memset>
 800c674:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c678:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c67c:	e7e9      	b.n	800c652 <__sfp+0x42>
 800c67e:	bf00      	nop
 800c680:	0800e6f0 	.word	0x0800e6f0
 800c684:	ffff0001 	.word	0xffff0001

0800c688 <_fwalk_reent>:
 800c688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c68c:	4680      	mov	r8, r0
 800c68e:	4689      	mov	r9, r1
 800c690:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c694:	2600      	movs	r6, #0
 800c696:	b914      	cbnz	r4, 800c69e <_fwalk_reent+0x16>
 800c698:	4630      	mov	r0, r6
 800c69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c69e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c6a2:	3f01      	subs	r7, #1
 800c6a4:	d501      	bpl.n	800c6aa <_fwalk_reent+0x22>
 800c6a6:	6824      	ldr	r4, [r4, #0]
 800c6a8:	e7f5      	b.n	800c696 <_fwalk_reent+0xe>
 800c6aa:	89ab      	ldrh	r3, [r5, #12]
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d907      	bls.n	800c6c0 <_fwalk_reent+0x38>
 800c6b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	d003      	beq.n	800c6c0 <_fwalk_reent+0x38>
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	4640      	mov	r0, r8
 800c6bc:	47c8      	blx	r9
 800c6be:	4306      	orrs	r6, r0
 800c6c0:	3568      	adds	r5, #104	; 0x68
 800c6c2:	e7ee      	b.n	800c6a2 <_fwalk_reent+0x1a>

0800c6c4 <rshift>:
 800c6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6c6:	6906      	ldr	r6, [r0, #16]
 800c6c8:	114b      	asrs	r3, r1, #5
 800c6ca:	429e      	cmp	r6, r3
 800c6cc:	f100 0414 	add.w	r4, r0, #20
 800c6d0:	dd30      	ble.n	800c734 <rshift+0x70>
 800c6d2:	f011 011f 	ands.w	r1, r1, #31
 800c6d6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c6da:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c6de:	d108      	bne.n	800c6f2 <rshift+0x2e>
 800c6e0:	4621      	mov	r1, r4
 800c6e2:	42b2      	cmp	r2, r6
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	d211      	bcs.n	800c70c <rshift+0x48>
 800c6e8:	f852 3b04 	ldr.w	r3, [r2], #4
 800c6ec:	f841 3b04 	str.w	r3, [r1], #4
 800c6f0:	e7f7      	b.n	800c6e2 <rshift+0x1e>
 800c6f2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800c6f6:	f1c1 0c20 	rsb	ip, r1, #32
 800c6fa:	40cd      	lsrs	r5, r1
 800c6fc:	3204      	adds	r2, #4
 800c6fe:	4623      	mov	r3, r4
 800c700:	42b2      	cmp	r2, r6
 800c702:	4617      	mov	r7, r2
 800c704:	d30c      	bcc.n	800c720 <rshift+0x5c>
 800c706:	601d      	str	r5, [r3, #0]
 800c708:	b105      	cbz	r5, 800c70c <rshift+0x48>
 800c70a:	3304      	adds	r3, #4
 800c70c:	1b1a      	subs	r2, r3, r4
 800c70e:	42a3      	cmp	r3, r4
 800c710:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c714:	bf08      	it	eq
 800c716:	2300      	moveq	r3, #0
 800c718:	6102      	str	r2, [r0, #16]
 800c71a:	bf08      	it	eq
 800c71c:	6143      	streq	r3, [r0, #20]
 800c71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c720:	683f      	ldr	r7, [r7, #0]
 800c722:	fa07 f70c 	lsl.w	r7, r7, ip
 800c726:	433d      	orrs	r5, r7
 800c728:	f843 5b04 	str.w	r5, [r3], #4
 800c72c:	f852 5b04 	ldr.w	r5, [r2], #4
 800c730:	40cd      	lsrs	r5, r1
 800c732:	e7e5      	b.n	800c700 <rshift+0x3c>
 800c734:	4623      	mov	r3, r4
 800c736:	e7e9      	b.n	800c70c <rshift+0x48>

0800c738 <__hexdig_fun>:
 800c738:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c73c:	2b09      	cmp	r3, #9
 800c73e:	d802      	bhi.n	800c746 <__hexdig_fun+0xe>
 800c740:	3820      	subs	r0, #32
 800c742:	b2c0      	uxtb	r0, r0
 800c744:	4770      	bx	lr
 800c746:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c74a:	2b05      	cmp	r3, #5
 800c74c:	d801      	bhi.n	800c752 <__hexdig_fun+0x1a>
 800c74e:	3847      	subs	r0, #71	; 0x47
 800c750:	e7f7      	b.n	800c742 <__hexdig_fun+0xa>
 800c752:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c756:	2b05      	cmp	r3, #5
 800c758:	d801      	bhi.n	800c75e <__hexdig_fun+0x26>
 800c75a:	3827      	subs	r0, #39	; 0x27
 800c75c:	e7f1      	b.n	800c742 <__hexdig_fun+0xa>
 800c75e:	2000      	movs	r0, #0
 800c760:	4770      	bx	lr

0800c762 <__gethex>:
 800c762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c766:	b08b      	sub	sp, #44	; 0x2c
 800c768:	468a      	mov	sl, r1
 800c76a:	9002      	str	r0, [sp, #8]
 800c76c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c76e:	9306      	str	r3, [sp, #24]
 800c770:	4690      	mov	r8, r2
 800c772:	f000 fad0 	bl	800cd16 <__localeconv_l>
 800c776:	6803      	ldr	r3, [r0, #0]
 800c778:	9303      	str	r3, [sp, #12]
 800c77a:	4618      	mov	r0, r3
 800c77c:	f7f3 fd30 	bl	80001e0 <strlen>
 800c780:	9b03      	ldr	r3, [sp, #12]
 800c782:	9001      	str	r0, [sp, #4]
 800c784:	4403      	add	r3, r0
 800c786:	f04f 0b00 	mov.w	fp, #0
 800c78a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c78e:	9307      	str	r3, [sp, #28]
 800c790:	f8da 3000 	ldr.w	r3, [sl]
 800c794:	3302      	adds	r3, #2
 800c796:	461f      	mov	r7, r3
 800c798:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c79c:	2830      	cmp	r0, #48	; 0x30
 800c79e:	d06c      	beq.n	800c87a <__gethex+0x118>
 800c7a0:	f7ff ffca 	bl	800c738 <__hexdig_fun>
 800c7a4:	4604      	mov	r4, r0
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d16a      	bne.n	800c880 <__gethex+0x11e>
 800c7aa:	9a01      	ldr	r2, [sp, #4]
 800c7ac:	9903      	ldr	r1, [sp, #12]
 800c7ae:	4638      	mov	r0, r7
 800c7b0:	f001 fadb 	bl	800dd6a <strncmp>
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	d166      	bne.n	800c886 <__gethex+0x124>
 800c7b8:	9b01      	ldr	r3, [sp, #4]
 800c7ba:	5cf8      	ldrb	r0, [r7, r3]
 800c7bc:	18fe      	adds	r6, r7, r3
 800c7be:	f7ff ffbb 	bl	800c738 <__hexdig_fun>
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	d062      	beq.n	800c88c <__gethex+0x12a>
 800c7c6:	4633      	mov	r3, r6
 800c7c8:	7818      	ldrb	r0, [r3, #0]
 800c7ca:	2830      	cmp	r0, #48	; 0x30
 800c7cc:	461f      	mov	r7, r3
 800c7ce:	f103 0301 	add.w	r3, r3, #1
 800c7d2:	d0f9      	beq.n	800c7c8 <__gethex+0x66>
 800c7d4:	f7ff ffb0 	bl	800c738 <__hexdig_fun>
 800c7d8:	fab0 f580 	clz	r5, r0
 800c7dc:	096d      	lsrs	r5, r5, #5
 800c7de:	4634      	mov	r4, r6
 800c7e0:	f04f 0b01 	mov.w	fp, #1
 800c7e4:	463a      	mov	r2, r7
 800c7e6:	4616      	mov	r6, r2
 800c7e8:	3201      	adds	r2, #1
 800c7ea:	7830      	ldrb	r0, [r6, #0]
 800c7ec:	f7ff ffa4 	bl	800c738 <__hexdig_fun>
 800c7f0:	2800      	cmp	r0, #0
 800c7f2:	d1f8      	bne.n	800c7e6 <__gethex+0x84>
 800c7f4:	9a01      	ldr	r2, [sp, #4]
 800c7f6:	9903      	ldr	r1, [sp, #12]
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	f001 fab6 	bl	800dd6a <strncmp>
 800c7fe:	b950      	cbnz	r0, 800c816 <__gethex+0xb4>
 800c800:	b954      	cbnz	r4, 800c818 <__gethex+0xb6>
 800c802:	9b01      	ldr	r3, [sp, #4]
 800c804:	18f4      	adds	r4, r6, r3
 800c806:	4622      	mov	r2, r4
 800c808:	4616      	mov	r6, r2
 800c80a:	3201      	adds	r2, #1
 800c80c:	7830      	ldrb	r0, [r6, #0]
 800c80e:	f7ff ff93 	bl	800c738 <__hexdig_fun>
 800c812:	2800      	cmp	r0, #0
 800c814:	d1f8      	bne.n	800c808 <__gethex+0xa6>
 800c816:	b10c      	cbz	r4, 800c81c <__gethex+0xba>
 800c818:	1ba4      	subs	r4, r4, r6
 800c81a:	00a4      	lsls	r4, r4, #2
 800c81c:	7833      	ldrb	r3, [r6, #0]
 800c81e:	2b50      	cmp	r3, #80	; 0x50
 800c820:	d001      	beq.n	800c826 <__gethex+0xc4>
 800c822:	2b70      	cmp	r3, #112	; 0x70
 800c824:	d140      	bne.n	800c8a8 <__gethex+0x146>
 800c826:	7873      	ldrb	r3, [r6, #1]
 800c828:	2b2b      	cmp	r3, #43	; 0x2b
 800c82a:	d031      	beq.n	800c890 <__gethex+0x12e>
 800c82c:	2b2d      	cmp	r3, #45	; 0x2d
 800c82e:	d033      	beq.n	800c898 <__gethex+0x136>
 800c830:	1c71      	adds	r1, r6, #1
 800c832:	f04f 0900 	mov.w	r9, #0
 800c836:	7808      	ldrb	r0, [r1, #0]
 800c838:	f7ff ff7e 	bl	800c738 <__hexdig_fun>
 800c83c:	1e43      	subs	r3, r0, #1
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	2b18      	cmp	r3, #24
 800c842:	d831      	bhi.n	800c8a8 <__gethex+0x146>
 800c844:	f1a0 0210 	sub.w	r2, r0, #16
 800c848:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c84c:	f7ff ff74 	bl	800c738 <__hexdig_fun>
 800c850:	1e43      	subs	r3, r0, #1
 800c852:	b2db      	uxtb	r3, r3
 800c854:	2b18      	cmp	r3, #24
 800c856:	d922      	bls.n	800c89e <__gethex+0x13c>
 800c858:	f1b9 0f00 	cmp.w	r9, #0
 800c85c:	d000      	beq.n	800c860 <__gethex+0xfe>
 800c85e:	4252      	negs	r2, r2
 800c860:	4414      	add	r4, r2
 800c862:	f8ca 1000 	str.w	r1, [sl]
 800c866:	b30d      	cbz	r5, 800c8ac <__gethex+0x14a>
 800c868:	f1bb 0f00 	cmp.w	fp, #0
 800c86c:	bf0c      	ite	eq
 800c86e:	2706      	moveq	r7, #6
 800c870:	2700      	movne	r7, #0
 800c872:	4638      	mov	r0, r7
 800c874:	b00b      	add	sp, #44	; 0x2c
 800c876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c87a:	f10b 0b01 	add.w	fp, fp, #1
 800c87e:	e78a      	b.n	800c796 <__gethex+0x34>
 800c880:	2500      	movs	r5, #0
 800c882:	462c      	mov	r4, r5
 800c884:	e7ae      	b.n	800c7e4 <__gethex+0x82>
 800c886:	463e      	mov	r6, r7
 800c888:	2501      	movs	r5, #1
 800c88a:	e7c7      	b.n	800c81c <__gethex+0xba>
 800c88c:	4604      	mov	r4, r0
 800c88e:	e7fb      	b.n	800c888 <__gethex+0x126>
 800c890:	f04f 0900 	mov.w	r9, #0
 800c894:	1cb1      	adds	r1, r6, #2
 800c896:	e7ce      	b.n	800c836 <__gethex+0xd4>
 800c898:	f04f 0901 	mov.w	r9, #1
 800c89c:	e7fa      	b.n	800c894 <__gethex+0x132>
 800c89e:	230a      	movs	r3, #10
 800c8a0:	fb03 0202 	mla	r2, r3, r2, r0
 800c8a4:	3a10      	subs	r2, #16
 800c8a6:	e7cf      	b.n	800c848 <__gethex+0xe6>
 800c8a8:	4631      	mov	r1, r6
 800c8aa:	e7da      	b.n	800c862 <__gethex+0x100>
 800c8ac:	1bf3      	subs	r3, r6, r7
 800c8ae:	3b01      	subs	r3, #1
 800c8b0:	4629      	mov	r1, r5
 800c8b2:	2b07      	cmp	r3, #7
 800c8b4:	dc49      	bgt.n	800c94a <__gethex+0x1e8>
 800c8b6:	9802      	ldr	r0, [sp, #8]
 800c8b8:	f000 fabc 	bl	800ce34 <_Balloc>
 800c8bc:	9b01      	ldr	r3, [sp, #4]
 800c8be:	f100 0914 	add.w	r9, r0, #20
 800c8c2:	f04f 0b00 	mov.w	fp, #0
 800c8c6:	f1c3 0301 	rsb	r3, r3, #1
 800c8ca:	4605      	mov	r5, r0
 800c8cc:	f8cd 9010 	str.w	r9, [sp, #16]
 800c8d0:	46da      	mov	sl, fp
 800c8d2:	9308      	str	r3, [sp, #32]
 800c8d4:	42b7      	cmp	r7, r6
 800c8d6:	d33b      	bcc.n	800c950 <__gethex+0x1ee>
 800c8d8:	9804      	ldr	r0, [sp, #16]
 800c8da:	f840 ab04 	str.w	sl, [r0], #4
 800c8de:	eba0 0009 	sub.w	r0, r0, r9
 800c8e2:	1080      	asrs	r0, r0, #2
 800c8e4:	6128      	str	r0, [r5, #16]
 800c8e6:	0147      	lsls	r7, r0, #5
 800c8e8:	4650      	mov	r0, sl
 800c8ea:	f000 fb67 	bl	800cfbc <__hi0bits>
 800c8ee:	f8d8 6000 	ldr.w	r6, [r8]
 800c8f2:	1a3f      	subs	r7, r7, r0
 800c8f4:	42b7      	cmp	r7, r6
 800c8f6:	dd64      	ble.n	800c9c2 <__gethex+0x260>
 800c8f8:	1bbf      	subs	r7, r7, r6
 800c8fa:	4639      	mov	r1, r7
 800c8fc:	4628      	mov	r0, r5
 800c8fe:	f000 fe77 	bl	800d5f0 <__any_on>
 800c902:	4682      	mov	sl, r0
 800c904:	b178      	cbz	r0, 800c926 <__gethex+0x1c4>
 800c906:	1e7b      	subs	r3, r7, #1
 800c908:	1159      	asrs	r1, r3, #5
 800c90a:	f003 021f 	and.w	r2, r3, #31
 800c90e:	f04f 0a01 	mov.w	sl, #1
 800c912:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c916:	fa0a f202 	lsl.w	r2, sl, r2
 800c91a:	420a      	tst	r2, r1
 800c91c:	d003      	beq.n	800c926 <__gethex+0x1c4>
 800c91e:	4553      	cmp	r3, sl
 800c920:	dc46      	bgt.n	800c9b0 <__gethex+0x24e>
 800c922:	f04f 0a02 	mov.w	sl, #2
 800c926:	4639      	mov	r1, r7
 800c928:	4628      	mov	r0, r5
 800c92a:	f7ff fecb 	bl	800c6c4 <rshift>
 800c92e:	443c      	add	r4, r7
 800c930:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c934:	42a3      	cmp	r3, r4
 800c936:	da52      	bge.n	800c9de <__gethex+0x27c>
 800c938:	4629      	mov	r1, r5
 800c93a:	9802      	ldr	r0, [sp, #8]
 800c93c:	f000 faae 	bl	800ce9c <_Bfree>
 800c940:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c942:	2300      	movs	r3, #0
 800c944:	6013      	str	r3, [r2, #0]
 800c946:	27a3      	movs	r7, #163	; 0xa3
 800c948:	e793      	b.n	800c872 <__gethex+0x110>
 800c94a:	3101      	adds	r1, #1
 800c94c:	105b      	asrs	r3, r3, #1
 800c94e:	e7b0      	b.n	800c8b2 <__gethex+0x150>
 800c950:	1e73      	subs	r3, r6, #1
 800c952:	9305      	str	r3, [sp, #20]
 800c954:	9a07      	ldr	r2, [sp, #28]
 800c956:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d018      	beq.n	800c990 <__gethex+0x22e>
 800c95e:	f1bb 0f20 	cmp.w	fp, #32
 800c962:	d107      	bne.n	800c974 <__gethex+0x212>
 800c964:	9b04      	ldr	r3, [sp, #16]
 800c966:	f8c3 a000 	str.w	sl, [r3]
 800c96a:	3304      	adds	r3, #4
 800c96c:	f04f 0a00 	mov.w	sl, #0
 800c970:	9304      	str	r3, [sp, #16]
 800c972:	46d3      	mov	fp, sl
 800c974:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c978:	f7ff fede 	bl	800c738 <__hexdig_fun>
 800c97c:	f000 000f 	and.w	r0, r0, #15
 800c980:	fa00 f00b 	lsl.w	r0, r0, fp
 800c984:	ea4a 0a00 	orr.w	sl, sl, r0
 800c988:	f10b 0b04 	add.w	fp, fp, #4
 800c98c:	9b05      	ldr	r3, [sp, #20]
 800c98e:	e00d      	b.n	800c9ac <__gethex+0x24a>
 800c990:	9b05      	ldr	r3, [sp, #20]
 800c992:	9a08      	ldr	r2, [sp, #32]
 800c994:	4413      	add	r3, r2
 800c996:	42bb      	cmp	r3, r7
 800c998:	d3e1      	bcc.n	800c95e <__gethex+0x1fc>
 800c99a:	4618      	mov	r0, r3
 800c99c:	9a01      	ldr	r2, [sp, #4]
 800c99e:	9903      	ldr	r1, [sp, #12]
 800c9a0:	9309      	str	r3, [sp, #36]	; 0x24
 800c9a2:	f001 f9e2 	bl	800dd6a <strncmp>
 800c9a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	d1d8      	bne.n	800c95e <__gethex+0x1fc>
 800c9ac:	461e      	mov	r6, r3
 800c9ae:	e791      	b.n	800c8d4 <__gethex+0x172>
 800c9b0:	1eb9      	subs	r1, r7, #2
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	f000 fe1c 	bl	800d5f0 <__any_on>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	d0b2      	beq.n	800c922 <__gethex+0x1c0>
 800c9bc:	f04f 0a03 	mov.w	sl, #3
 800c9c0:	e7b1      	b.n	800c926 <__gethex+0x1c4>
 800c9c2:	da09      	bge.n	800c9d8 <__gethex+0x276>
 800c9c4:	1bf7      	subs	r7, r6, r7
 800c9c6:	4629      	mov	r1, r5
 800c9c8:	463a      	mov	r2, r7
 800c9ca:	9802      	ldr	r0, [sp, #8]
 800c9cc:	f000 fc32 	bl	800d234 <__lshift>
 800c9d0:	1be4      	subs	r4, r4, r7
 800c9d2:	4605      	mov	r5, r0
 800c9d4:	f100 0914 	add.w	r9, r0, #20
 800c9d8:	f04f 0a00 	mov.w	sl, #0
 800c9dc:	e7a8      	b.n	800c930 <__gethex+0x1ce>
 800c9de:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c9e2:	42a0      	cmp	r0, r4
 800c9e4:	dd6a      	ble.n	800cabc <__gethex+0x35a>
 800c9e6:	1b04      	subs	r4, r0, r4
 800c9e8:	42a6      	cmp	r6, r4
 800c9ea:	dc2e      	bgt.n	800ca4a <__gethex+0x2e8>
 800c9ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c9f0:	2b02      	cmp	r3, #2
 800c9f2:	d022      	beq.n	800ca3a <__gethex+0x2d8>
 800c9f4:	2b03      	cmp	r3, #3
 800c9f6:	d024      	beq.n	800ca42 <__gethex+0x2e0>
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d115      	bne.n	800ca28 <__gethex+0x2c6>
 800c9fc:	42a6      	cmp	r6, r4
 800c9fe:	d113      	bne.n	800ca28 <__gethex+0x2c6>
 800ca00:	2e01      	cmp	r6, #1
 800ca02:	dc0b      	bgt.n	800ca1c <__gethex+0x2ba>
 800ca04:	9a06      	ldr	r2, [sp, #24]
 800ca06:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ca0a:	6013      	str	r3, [r2, #0]
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	612b      	str	r3, [r5, #16]
 800ca10:	f8c9 3000 	str.w	r3, [r9]
 800ca14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca16:	2762      	movs	r7, #98	; 0x62
 800ca18:	601d      	str	r5, [r3, #0]
 800ca1a:	e72a      	b.n	800c872 <__gethex+0x110>
 800ca1c:	1e71      	subs	r1, r6, #1
 800ca1e:	4628      	mov	r0, r5
 800ca20:	f000 fde6 	bl	800d5f0 <__any_on>
 800ca24:	2800      	cmp	r0, #0
 800ca26:	d1ed      	bne.n	800ca04 <__gethex+0x2a2>
 800ca28:	4629      	mov	r1, r5
 800ca2a:	9802      	ldr	r0, [sp, #8]
 800ca2c:	f000 fa36 	bl	800ce9c <_Bfree>
 800ca30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ca32:	2300      	movs	r3, #0
 800ca34:	6013      	str	r3, [r2, #0]
 800ca36:	2750      	movs	r7, #80	; 0x50
 800ca38:	e71b      	b.n	800c872 <__gethex+0x110>
 800ca3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d0e1      	beq.n	800ca04 <__gethex+0x2a2>
 800ca40:	e7f2      	b.n	800ca28 <__gethex+0x2c6>
 800ca42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d1dd      	bne.n	800ca04 <__gethex+0x2a2>
 800ca48:	e7ee      	b.n	800ca28 <__gethex+0x2c6>
 800ca4a:	1e67      	subs	r7, r4, #1
 800ca4c:	f1ba 0f00 	cmp.w	sl, #0
 800ca50:	d131      	bne.n	800cab6 <__gethex+0x354>
 800ca52:	b127      	cbz	r7, 800ca5e <__gethex+0x2fc>
 800ca54:	4639      	mov	r1, r7
 800ca56:	4628      	mov	r0, r5
 800ca58:	f000 fdca 	bl	800d5f0 <__any_on>
 800ca5c:	4682      	mov	sl, r0
 800ca5e:	117a      	asrs	r2, r7, #5
 800ca60:	2301      	movs	r3, #1
 800ca62:	f007 071f 	and.w	r7, r7, #31
 800ca66:	fa03 f707 	lsl.w	r7, r3, r7
 800ca6a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800ca6e:	4621      	mov	r1, r4
 800ca70:	421f      	tst	r7, r3
 800ca72:	4628      	mov	r0, r5
 800ca74:	bf18      	it	ne
 800ca76:	f04a 0a02 	orrne.w	sl, sl, #2
 800ca7a:	1b36      	subs	r6, r6, r4
 800ca7c:	f7ff fe22 	bl	800c6c4 <rshift>
 800ca80:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ca84:	2702      	movs	r7, #2
 800ca86:	f1ba 0f00 	cmp.w	sl, #0
 800ca8a:	d048      	beq.n	800cb1e <__gethex+0x3bc>
 800ca8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca90:	2b02      	cmp	r3, #2
 800ca92:	d015      	beq.n	800cac0 <__gethex+0x35e>
 800ca94:	2b03      	cmp	r3, #3
 800ca96:	d017      	beq.n	800cac8 <__gethex+0x366>
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d109      	bne.n	800cab0 <__gethex+0x34e>
 800ca9c:	f01a 0f02 	tst.w	sl, #2
 800caa0:	d006      	beq.n	800cab0 <__gethex+0x34e>
 800caa2:	f8d9 3000 	ldr.w	r3, [r9]
 800caa6:	ea4a 0a03 	orr.w	sl, sl, r3
 800caaa:	f01a 0f01 	tst.w	sl, #1
 800caae:	d10e      	bne.n	800cace <__gethex+0x36c>
 800cab0:	f047 0710 	orr.w	r7, r7, #16
 800cab4:	e033      	b.n	800cb1e <__gethex+0x3bc>
 800cab6:	f04f 0a01 	mov.w	sl, #1
 800caba:	e7d0      	b.n	800ca5e <__gethex+0x2fc>
 800cabc:	2701      	movs	r7, #1
 800cabe:	e7e2      	b.n	800ca86 <__gethex+0x324>
 800cac0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cac2:	f1c3 0301 	rsb	r3, r3, #1
 800cac6:	9315      	str	r3, [sp, #84]	; 0x54
 800cac8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d0f0      	beq.n	800cab0 <__gethex+0x34e>
 800cace:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800cad2:	f105 0314 	add.w	r3, r5, #20
 800cad6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800cada:	eb03 010a 	add.w	r1, r3, sl
 800cade:	f04f 0c00 	mov.w	ip, #0
 800cae2:	4618      	mov	r0, r3
 800cae4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cae8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800caec:	d01c      	beq.n	800cb28 <__gethex+0x3c6>
 800caee:	3201      	adds	r2, #1
 800caf0:	6002      	str	r2, [r0, #0]
 800caf2:	2f02      	cmp	r7, #2
 800caf4:	f105 0314 	add.w	r3, r5, #20
 800caf8:	d138      	bne.n	800cb6c <__gethex+0x40a>
 800cafa:	f8d8 2000 	ldr.w	r2, [r8]
 800cafe:	3a01      	subs	r2, #1
 800cb00:	42b2      	cmp	r2, r6
 800cb02:	d10a      	bne.n	800cb1a <__gethex+0x3b8>
 800cb04:	1171      	asrs	r1, r6, #5
 800cb06:	2201      	movs	r2, #1
 800cb08:	f006 061f 	and.w	r6, r6, #31
 800cb0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cb10:	fa02 f606 	lsl.w	r6, r2, r6
 800cb14:	421e      	tst	r6, r3
 800cb16:	bf18      	it	ne
 800cb18:	4617      	movne	r7, r2
 800cb1a:	f047 0720 	orr.w	r7, r7, #32
 800cb1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb20:	601d      	str	r5, [r3, #0]
 800cb22:	9b06      	ldr	r3, [sp, #24]
 800cb24:	601c      	str	r4, [r3, #0]
 800cb26:	e6a4      	b.n	800c872 <__gethex+0x110>
 800cb28:	4299      	cmp	r1, r3
 800cb2a:	f843 cc04 	str.w	ip, [r3, #-4]
 800cb2e:	d8d8      	bhi.n	800cae2 <__gethex+0x380>
 800cb30:	68ab      	ldr	r3, [r5, #8]
 800cb32:	4599      	cmp	r9, r3
 800cb34:	db12      	blt.n	800cb5c <__gethex+0x3fa>
 800cb36:	6869      	ldr	r1, [r5, #4]
 800cb38:	9802      	ldr	r0, [sp, #8]
 800cb3a:	3101      	adds	r1, #1
 800cb3c:	f000 f97a 	bl	800ce34 <_Balloc>
 800cb40:	692a      	ldr	r2, [r5, #16]
 800cb42:	3202      	adds	r2, #2
 800cb44:	f105 010c 	add.w	r1, r5, #12
 800cb48:	4683      	mov	fp, r0
 800cb4a:	0092      	lsls	r2, r2, #2
 800cb4c:	300c      	adds	r0, #12
 800cb4e:	f7fc ff97 	bl	8009a80 <memcpy>
 800cb52:	4629      	mov	r1, r5
 800cb54:	9802      	ldr	r0, [sp, #8]
 800cb56:	f000 f9a1 	bl	800ce9c <_Bfree>
 800cb5a:	465d      	mov	r5, fp
 800cb5c:	692b      	ldr	r3, [r5, #16]
 800cb5e:	1c5a      	adds	r2, r3, #1
 800cb60:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800cb64:	612a      	str	r2, [r5, #16]
 800cb66:	2201      	movs	r2, #1
 800cb68:	615a      	str	r2, [r3, #20]
 800cb6a:	e7c2      	b.n	800caf2 <__gethex+0x390>
 800cb6c:	692a      	ldr	r2, [r5, #16]
 800cb6e:	454a      	cmp	r2, r9
 800cb70:	dd0b      	ble.n	800cb8a <__gethex+0x428>
 800cb72:	2101      	movs	r1, #1
 800cb74:	4628      	mov	r0, r5
 800cb76:	f7ff fda5 	bl	800c6c4 <rshift>
 800cb7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb7e:	3401      	adds	r4, #1
 800cb80:	42a3      	cmp	r3, r4
 800cb82:	f6ff aed9 	blt.w	800c938 <__gethex+0x1d6>
 800cb86:	2701      	movs	r7, #1
 800cb88:	e7c7      	b.n	800cb1a <__gethex+0x3b8>
 800cb8a:	f016 061f 	ands.w	r6, r6, #31
 800cb8e:	d0fa      	beq.n	800cb86 <__gethex+0x424>
 800cb90:	449a      	add	sl, r3
 800cb92:	f1c6 0620 	rsb	r6, r6, #32
 800cb96:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cb9a:	f000 fa0f 	bl	800cfbc <__hi0bits>
 800cb9e:	42b0      	cmp	r0, r6
 800cba0:	dbe7      	blt.n	800cb72 <__gethex+0x410>
 800cba2:	e7f0      	b.n	800cb86 <__gethex+0x424>

0800cba4 <L_shift>:
 800cba4:	f1c2 0208 	rsb	r2, r2, #8
 800cba8:	0092      	lsls	r2, r2, #2
 800cbaa:	b570      	push	{r4, r5, r6, lr}
 800cbac:	f1c2 0620 	rsb	r6, r2, #32
 800cbb0:	6843      	ldr	r3, [r0, #4]
 800cbb2:	6804      	ldr	r4, [r0, #0]
 800cbb4:	fa03 f506 	lsl.w	r5, r3, r6
 800cbb8:	432c      	orrs	r4, r5
 800cbba:	40d3      	lsrs	r3, r2
 800cbbc:	6004      	str	r4, [r0, #0]
 800cbbe:	f840 3f04 	str.w	r3, [r0, #4]!
 800cbc2:	4288      	cmp	r0, r1
 800cbc4:	d3f4      	bcc.n	800cbb0 <L_shift+0xc>
 800cbc6:	bd70      	pop	{r4, r5, r6, pc}

0800cbc8 <__match>:
 800cbc8:	b530      	push	{r4, r5, lr}
 800cbca:	6803      	ldr	r3, [r0, #0]
 800cbcc:	3301      	adds	r3, #1
 800cbce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbd2:	b914      	cbnz	r4, 800cbda <__match+0x12>
 800cbd4:	6003      	str	r3, [r0, #0]
 800cbd6:	2001      	movs	r0, #1
 800cbd8:	bd30      	pop	{r4, r5, pc}
 800cbda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbde:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cbe2:	2d19      	cmp	r5, #25
 800cbe4:	bf98      	it	ls
 800cbe6:	3220      	addls	r2, #32
 800cbe8:	42a2      	cmp	r2, r4
 800cbea:	d0f0      	beq.n	800cbce <__match+0x6>
 800cbec:	2000      	movs	r0, #0
 800cbee:	e7f3      	b.n	800cbd8 <__match+0x10>

0800cbf0 <__hexnan>:
 800cbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf4:	680b      	ldr	r3, [r1, #0]
 800cbf6:	6801      	ldr	r1, [r0, #0]
 800cbf8:	115f      	asrs	r7, r3, #5
 800cbfa:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800cbfe:	f013 031f 	ands.w	r3, r3, #31
 800cc02:	b087      	sub	sp, #28
 800cc04:	bf18      	it	ne
 800cc06:	3704      	addne	r7, #4
 800cc08:	2500      	movs	r5, #0
 800cc0a:	1f3e      	subs	r6, r7, #4
 800cc0c:	4682      	mov	sl, r0
 800cc0e:	4690      	mov	r8, r2
 800cc10:	9301      	str	r3, [sp, #4]
 800cc12:	f847 5c04 	str.w	r5, [r7, #-4]
 800cc16:	46b1      	mov	r9, r6
 800cc18:	4634      	mov	r4, r6
 800cc1a:	9502      	str	r5, [sp, #8]
 800cc1c:	46ab      	mov	fp, r5
 800cc1e:	784a      	ldrb	r2, [r1, #1]
 800cc20:	1c4b      	adds	r3, r1, #1
 800cc22:	9303      	str	r3, [sp, #12]
 800cc24:	b342      	cbz	r2, 800cc78 <__hexnan+0x88>
 800cc26:	4610      	mov	r0, r2
 800cc28:	9105      	str	r1, [sp, #20]
 800cc2a:	9204      	str	r2, [sp, #16]
 800cc2c:	f7ff fd84 	bl	800c738 <__hexdig_fun>
 800cc30:	2800      	cmp	r0, #0
 800cc32:	d143      	bne.n	800ccbc <__hexnan+0xcc>
 800cc34:	9a04      	ldr	r2, [sp, #16]
 800cc36:	9905      	ldr	r1, [sp, #20]
 800cc38:	2a20      	cmp	r2, #32
 800cc3a:	d818      	bhi.n	800cc6e <__hexnan+0x7e>
 800cc3c:	9b02      	ldr	r3, [sp, #8]
 800cc3e:	459b      	cmp	fp, r3
 800cc40:	dd13      	ble.n	800cc6a <__hexnan+0x7a>
 800cc42:	454c      	cmp	r4, r9
 800cc44:	d206      	bcs.n	800cc54 <__hexnan+0x64>
 800cc46:	2d07      	cmp	r5, #7
 800cc48:	dc04      	bgt.n	800cc54 <__hexnan+0x64>
 800cc4a:	462a      	mov	r2, r5
 800cc4c:	4649      	mov	r1, r9
 800cc4e:	4620      	mov	r0, r4
 800cc50:	f7ff ffa8 	bl	800cba4 <L_shift>
 800cc54:	4544      	cmp	r4, r8
 800cc56:	d944      	bls.n	800cce2 <__hexnan+0xf2>
 800cc58:	2300      	movs	r3, #0
 800cc5a:	f1a4 0904 	sub.w	r9, r4, #4
 800cc5e:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc62:	f8cd b008 	str.w	fp, [sp, #8]
 800cc66:	464c      	mov	r4, r9
 800cc68:	461d      	mov	r5, r3
 800cc6a:	9903      	ldr	r1, [sp, #12]
 800cc6c:	e7d7      	b.n	800cc1e <__hexnan+0x2e>
 800cc6e:	2a29      	cmp	r2, #41	; 0x29
 800cc70:	d14a      	bne.n	800cd08 <__hexnan+0x118>
 800cc72:	3102      	adds	r1, #2
 800cc74:	f8ca 1000 	str.w	r1, [sl]
 800cc78:	f1bb 0f00 	cmp.w	fp, #0
 800cc7c:	d044      	beq.n	800cd08 <__hexnan+0x118>
 800cc7e:	454c      	cmp	r4, r9
 800cc80:	d206      	bcs.n	800cc90 <__hexnan+0xa0>
 800cc82:	2d07      	cmp	r5, #7
 800cc84:	dc04      	bgt.n	800cc90 <__hexnan+0xa0>
 800cc86:	462a      	mov	r2, r5
 800cc88:	4649      	mov	r1, r9
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	f7ff ff8a 	bl	800cba4 <L_shift>
 800cc90:	4544      	cmp	r4, r8
 800cc92:	d928      	bls.n	800cce6 <__hexnan+0xf6>
 800cc94:	4643      	mov	r3, r8
 800cc96:	f854 2b04 	ldr.w	r2, [r4], #4
 800cc9a:	f843 2b04 	str.w	r2, [r3], #4
 800cc9e:	42a6      	cmp	r6, r4
 800cca0:	d2f9      	bcs.n	800cc96 <__hexnan+0xa6>
 800cca2:	2200      	movs	r2, #0
 800cca4:	f843 2b04 	str.w	r2, [r3], #4
 800cca8:	429e      	cmp	r6, r3
 800ccaa:	d2fb      	bcs.n	800cca4 <__hexnan+0xb4>
 800ccac:	6833      	ldr	r3, [r6, #0]
 800ccae:	b91b      	cbnz	r3, 800ccb8 <__hexnan+0xc8>
 800ccb0:	4546      	cmp	r6, r8
 800ccb2:	d127      	bne.n	800cd04 <__hexnan+0x114>
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	6033      	str	r3, [r6, #0]
 800ccb8:	2005      	movs	r0, #5
 800ccba:	e026      	b.n	800cd0a <__hexnan+0x11a>
 800ccbc:	3501      	adds	r5, #1
 800ccbe:	2d08      	cmp	r5, #8
 800ccc0:	f10b 0b01 	add.w	fp, fp, #1
 800ccc4:	dd06      	ble.n	800ccd4 <__hexnan+0xe4>
 800ccc6:	4544      	cmp	r4, r8
 800ccc8:	d9cf      	bls.n	800cc6a <__hexnan+0x7a>
 800ccca:	2300      	movs	r3, #0
 800cccc:	f844 3c04 	str.w	r3, [r4, #-4]
 800ccd0:	2501      	movs	r5, #1
 800ccd2:	3c04      	subs	r4, #4
 800ccd4:	6822      	ldr	r2, [r4, #0]
 800ccd6:	f000 000f 	and.w	r0, r0, #15
 800ccda:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ccde:	6020      	str	r0, [r4, #0]
 800cce0:	e7c3      	b.n	800cc6a <__hexnan+0x7a>
 800cce2:	2508      	movs	r5, #8
 800cce4:	e7c1      	b.n	800cc6a <__hexnan+0x7a>
 800cce6:	9b01      	ldr	r3, [sp, #4]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d0df      	beq.n	800ccac <__hexnan+0xbc>
 800ccec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccf0:	f1c3 0320 	rsb	r3, r3, #32
 800ccf4:	fa22 f303 	lsr.w	r3, r2, r3
 800ccf8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ccfc:	401a      	ands	r2, r3
 800ccfe:	f847 2c04 	str.w	r2, [r7, #-4]
 800cd02:	e7d3      	b.n	800ccac <__hexnan+0xbc>
 800cd04:	3e04      	subs	r6, #4
 800cd06:	e7d1      	b.n	800ccac <__hexnan+0xbc>
 800cd08:	2004      	movs	r0, #4
 800cd0a:	b007      	add	sp, #28
 800cd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd10 <__locale_ctype_ptr_l>:
 800cd10:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800cd14:	4770      	bx	lr

0800cd16 <__localeconv_l>:
 800cd16:	30f0      	adds	r0, #240	; 0xf0
 800cd18:	4770      	bx	lr
	...

0800cd1c <_localeconv_r>:
 800cd1c:	4b04      	ldr	r3, [pc, #16]	; (800cd30 <_localeconv_r+0x14>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	6a18      	ldr	r0, [r3, #32]
 800cd22:	4b04      	ldr	r3, [pc, #16]	; (800cd34 <_localeconv_r+0x18>)
 800cd24:	2800      	cmp	r0, #0
 800cd26:	bf08      	it	eq
 800cd28:	4618      	moveq	r0, r3
 800cd2a:	30f0      	adds	r0, #240	; 0xf0
 800cd2c:	4770      	bx	lr
 800cd2e:	bf00      	nop
 800cd30:	20000080 	.word	0x20000080
 800cd34:	200000e4 	.word	0x200000e4

0800cd38 <__swhatbuf_r>:
 800cd38:	b570      	push	{r4, r5, r6, lr}
 800cd3a:	460e      	mov	r6, r1
 800cd3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd40:	2900      	cmp	r1, #0
 800cd42:	b096      	sub	sp, #88	; 0x58
 800cd44:	4614      	mov	r4, r2
 800cd46:	461d      	mov	r5, r3
 800cd48:	da07      	bge.n	800cd5a <__swhatbuf_r+0x22>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	602b      	str	r3, [r5, #0]
 800cd4e:	89b3      	ldrh	r3, [r6, #12]
 800cd50:	061a      	lsls	r2, r3, #24
 800cd52:	d410      	bmi.n	800cd76 <__swhatbuf_r+0x3e>
 800cd54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd58:	e00e      	b.n	800cd78 <__swhatbuf_r+0x40>
 800cd5a:	466a      	mov	r2, sp
 800cd5c:	f001 f846 	bl	800ddec <_fstat_r>
 800cd60:	2800      	cmp	r0, #0
 800cd62:	dbf2      	blt.n	800cd4a <__swhatbuf_r+0x12>
 800cd64:	9a01      	ldr	r2, [sp, #4]
 800cd66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd6e:	425a      	negs	r2, r3
 800cd70:	415a      	adcs	r2, r3
 800cd72:	602a      	str	r2, [r5, #0]
 800cd74:	e7ee      	b.n	800cd54 <__swhatbuf_r+0x1c>
 800cd76:	2340      	movs	r3, #64	; 0x40
 800cd78:	2000      	movs	r0, #0
 800cd7a:	6023      	str	r3, [r4, #0]
 800cd7c:	b016      	add	sp, #88	; 0x58
 800cd7e:	bd70      	pop	{r4, r5, r6, pc}

0800cd80 <__smakebuf_r>:
 800cd80:	898b      	ldrh	r3, [r1, #12]
 800cd82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd84:	079d      	lsls	r5, r3, #30
 800cd86:	4606      	mov	r6, r0
 800cd88:	460c      	mov	r4, r1
 800cd8a:	d507      	bpl.n	800cd9c <__smakebuf_r+0x1c>
 800cd8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd90:	6023      	str	r3, [r4, #0]
 800cd92:	6123      	str	r3, [r4, #16]
 800cd94:	2301      	movs	r3, #1
 800cd96:	6163      	str	r3, [r4, #20]
 800cd98:	b002      	add	sp, #8
 800cd9a:	bd70      	pop	{r4, r5, r6, pc}
 800cd9c:	ab01      	add	r3, sp, #4
 800cd9e:	466a      	mov	r2, sp
 800cda0:	f7ff ffca 	bl	800cd38 <__swhatbuf_r>
 800cda4:	9900      	ldr	r1, [sp, #0]
 800cda6:	4605      	mov	r5, r0
 800cda8:	4630      	mov	r0, r6
 800cdaa:	f000 fc9f 	bl	800d6ec <_malloc_r>
 800cdae:	b948      	cbnz	r0, 800cdc4 <__smakebuf_r+0x44>
 800cdb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdb4:	059a      	lsls	r2, r3, #22
 800cdb6:	d4ef      	bmi.n	800cd98 <__smakebuf_r+0x18>
 800cdb8:	f023 0303 	bic.w	r3, r3, #3
 800cdbc:	f043 0302 	orr.w	r3, r3, #2
 800cdc0:	81a3      	strh	r3, [r4, #12]
 800cdc2:	e7e3      	b.n	800cd8c <__smakebuf_r+0xc>
 800cdc4:	4b0d      	ldr	r3, [pc, #52]	; (800cdfc <__smakebuf_r+0x7c>)
 800cdc6:	62b3      	str	r3, [r6, #40]	; 0x28
 800cdc8:	89a3      	ldrh	r3, [r4, #12]
 800cdca:	6020      	str	r0, [r4, #0]
 800cdcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdd0:	81a3      	strh	r3, [r4, #12]
 800cdd2:	9b00      	ldr	r3, [sp, #0]
 800cdd4:	6163      	str	r3, [r4, #20]
 800cdd6:	9b01      	ldr	r3, [sp, #4]
 800cdd8:	6120      	str	r0, [r4, #16]
 800cdda:	b15b      	cbz	r3, 800cdf4 <__smakebuf_r+0x74>
 800cddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cde0:	4630      	mov	r0, r6
 800cde2:	f001 f815 	bl	800de10 <_isatty_r>
 800cde6:	b128      	cbz	r0, 800cdf4 <__smakebuf_r+0x74>
 800cde8:	89a3      	ldrh	r3, [r4, #12]
 800cdea:	f023 0303 	bic.w	r3, r3, #3
 800cdee:	f043 0301 	orr.w	r3, r3, #1
 800cdf2:	81a3      	strh	r3, [r4, #12]
 800cdf4:	89a3      	ldrh	r3, [r4, #12]
 800cdf6:	431d      	orrs	r5, r3
 800cdf8:	81a5      	strh	r5, [r4, #12]
 800cdfa:	e7cd      	b.n	800cd98 <__smakebuf_r+0x18>
 800cdfc:	0800c579 	.word	0x0800c579

0800ce00 <malloc>:
 800ce00:	4b02      	ldr	r3, [pc, #8]	; (800ce0c <malloc+0xc>)
 800ce02:	4601      	mov	r1, r0
 800ce04:	6818      	ldr	r0, [r3, #0]
 800ce06:	f000 bc71 	b.w	800d6ec <_malloc_r>
 800ce0a:	bf00      	nop
 800ce0c:	20000080 	.word	0x20000080

0800ce10 <__ascii_mbtowc>:
 800ce10:	b082      	sub	sp, #8
 800ce12:	b901      	cbnz	r1, 800ce16 <__ascii_mbtowc+0x6>
 800ce14:	a901      	add	r1, sp, #4
 800ce16:	b142      	cbz	r2, 800ce2a <__ascii_mbtowc+0x1a>
 800ce18:	b14b      	cbz	r3, 800ce2e <__ascii_mbtowc+0x1e>
 800ce1a:	7813      	ldrb	r3, [r2, #0]
 800ce1c:	600b      	str	r3, [r1, #0]
 800ce1e:	7812      	ldrb	r2, [r2, #0]
 800ce20:	1c10      	adds	r0, r2, #0
 800ce22:	bf18      	it	ne
 800ce24:	2001      	movne	r0, #1
 800ce26:	b002      	add	sp, #8
 800ce28:	4770      	bx	lr
 800ce2a:	4610      	mov	r0, r2
 800ce2c:	e7fb      	b.n	800ce26 <__ascii_mbtowc+0x16>
 800ce2e:	f06f 0001 	mvn.w	r0, #1
 800ce32:	e7f8      	b.n	800ce26 <__ascii_mbtowc+0x16>

0800ce34 <_Balloc>:
 800ce34:	b570      	push	{r4, r5, r6, lr}
 800ce36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ce38:	4604      	mov	r4, r0
 800ce3a:	460e      	mov	r6, r1
 800ce3c:	b93d      	cbnz	r5, 800ce4e <_Balloc+0x1a>
 800ce3e:	2010      	movs	r0, #16
 800ce40:	f7ff ffde 	bl	800ce00 <malloc>
 800ce44:	6260      	str	r0, [r4, #36]	; 0x24
 800ce46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ce4a:	6005      	str	r5, [r0, #0]
 800ce4c:	60c5      	str	r5, [r0, #12]
 800ce4e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ce50:	68eb      	ldr	r3, [r5, #12]
 800ce52:	b183      	cbz	r3, 800ce76 <_Balloc+0x42>
 800ce54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce56:	68db      	ldr	r3, [r3, #12]
 800ce58:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ce5c:	b9b8      	cbnz	r0, 800ce8e <_Balloc+0x5a>
 800ce5e:	2101      	movs	r1, #1
 800ce60:	fa01 f506 	lsl.w	r5, r1, r6
 800ce64:	1d6a      	adds	r2, r5, #5
 800ce66:	0092      	lsls	r2, r2, #2
 800ce68:	4620      	mov	r0, r4
 800ce6a:	f000 fbe2 	bl	800d632 <_calloc_r>
 800ce6e:	b160      	cbz	r0, 800ce8a <_Balloc+0x56>
 800ce70:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ce74:	e00e      	b.n	800ce94 <_Balloc+0x60>
 800ce76:	2221      	movs	r2, #33	; 0x21
 800ce78:	2104      	movs	r1, #4
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f000 fbd9 	bl	800d632 <_calloc_r>
 800ce80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce82:	60e8      	str	r0, [r5, #12]
 800ce84:	68db      	ldr	r3, [r3, #12]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d1e4      	bne.n	800ce54 <_Balloc+0x20>
 800ce8a:	2000      	movs	r0, #0
 800ce8c:	bd70      	pop	{r4, r5, r6, pc}
 800ce8e:	6802      	ldr	r2, [r0, #0]
 800ce90:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ce94:	2300      	movs	r3, #0
 800ce96:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce9a:	e7f7      	b.n	800ce8c <_Balloc+0x58>

0800ce9c <_Bfree>:
 800ce9c:	b570      	push	{r4, r5, r6, lr}
 800ce9e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cea0:	4606      	mov	r6, r0
 800cea2:	460d      	mov	r5, r1
 800cea4:	b93c      	cbnz	r4, 800ceb6 <_Bfree+0x1a>
 800cea6:	2010      	movs	r0, #16
 800cea8:	f7ff ffaa 	bl	800ce00 <malloc>
 800ceac:	6270      	str	r0, [r6, #36]	; 0x24
 800ceae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ceb2:	6004      	str	r4, [r0, #0]
 800ceb4:	60c4      	str	r4, [r0, #12]
 800ceb6:	b13d      	cbz	r5, 800cec8 <_Bfree+0x2c>
 800ceb8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ceba:	686a      	ldr	r2, [r5, #4]
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cec2:	6029      	str	r1, [r5, #0]
 800cec4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800cec8:	bd70      	pop	{r4, r5, r6, pc}

0800ceca <__multadd>:
 800ceca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cece:	690d      	ldr	r5, [r1, #16]
 800ced0:	461f      	mov	r7, r3
 800ced2:	4606      	mov	r6, r0
 800ced4:	460c      	mov	r4, r1
 800ced6:	f101 0c14 	add.w	ip, r1, #20
 800ceda:	2300      	movs	r3, #0
 800cedc:	f8dc 0000 	ldr.w	r0, [ip]
 800cee0:	b281      	uxth	r1, r0
 800cee2:	fb02 7101 	mla	r1, r2, r1, r7
 800cee6:	0c0f      	lsrs	r7, r1, #16
 800cee8:	0c00      	lsrs	r0, r0, #16
 800ceea:	fb02 7000 	mla	r0, r2, r0, r7
 800ceee:	b289      	uxth	r1, r1
 800cef0:	3301      	adds	r3, #1
 800cef2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800cef6:	429d      	cmp	r5, r3
 800cef8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800cefc:	f84c 1b04 	str.w	r1, [ip], #4
 800cf00:	dcec      	bgt.n	800cedc <__multadd+0x12>
 800cf02:	b1d7      	cbz	r7, 800cf3a <__multadd+0x70>
 800cf04:	68a3      	ldr	r3, [r4, #8]
 800cf06:	42ab      	cmp	r3, r5
 800cf08:	dc12      	bgt.n	800cf30 <__multadd+0x66>
 800cf0a:	6861      	ldr	r1, [r4, #4]
 800cf0c:	4630      	mov	r0, r6
 800cf0e:	3101      	adds	r1, #1
 800cf10:	f7ff ff90 	bl	800ce34 <_Balloc>
 800cf14:	6922      	ldr	r2, [r4, #16]
 800cf16:	3202      	adds	r2, #2
 800cf18:	f104 010c 	add.w	r1, r4, #12
 800cf1c:	4680      	mov	r8, r0
 800cf1e:	0092      	lsls	r2, r2, #2
 800cf20:	300c      	adds	r0, #12
 800cf22:	f7fc fdad 	bl	8009a80 <memcpy>
 800cf26:	4621      	mov	r1, r4
 800cf28:	4630      	mov	r0, r6
 800cf2a:	f7ff ffb7 	bl	800ce9c <_Bfree>
 800cf2e:	4644      	mov	r4, r8
 800cf30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf34:	3501      	adds	r5, #1
 800cf36:	615f      	str	r7, [r3, #20]
 800cf38:	6125      	str	r5, [r4, #16]
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cf40 <__s2b>:
 800cf40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf44:	460c      	mov	r4, r1
 800cf46:	4615      	mov	r5, r2
 800cf48:	461f      	mov	r7, r3
 800cf4a:	2209      	movs	r2, #9
 800cf4c:	3308      	adds	r3, #8
 800cf4e:	4606      	mov	r6, r0
 800cf50:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf54:	2100      	movs	r1, #0
 800cf56:	2201      	movs	r2, #1
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	db20      	blt.n	800cf9e <__s2b+0x5e>
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	f7ff ff69 	bl	800ce34 <_Balloc>
 800cf62:	9b08      	ldr	r3, [sp, #32]
 800cf64:	6143      	str	r3, [r0, #20]
 800cf66:	2d09      	cmp	r5, #9
 800cf68:	f04f 0301 	mov.w	r3, #1
 800cf6c:	6103      	str	r3, [r0, #16]
 800cf6e:	dd19      	ble.n	800cfa4 <__s2b+0x64>
 800cf70:	f104 0809 	add.w	r8, r4, #9
 800cf74:	46c1      	mov	r9, r8
 800cf76:	442c      	add	r4, r5
 800cf78:	f819 3b01 	ldrb.w	r3, [r9], #1
 800cf7c:	4601      	mov	r1, r0
 800cf7e:	3b30      	subs	r3, #48	; 0x30
 800cf80:	220a      	movs	r2, #10
 800cf82:	4630      	mov	r0, r6
 800cf84:	f7ff ffa1 	bl	800ceca <__multadd>
 800cf88:	45a1      	cmp	r9, r4
 800cf8a:	d1f5      	bne.n	800cf78 <__s2b+0x38>
 800cf8c:	eb08 0405 	add.w	r4, r8, r5
 800cf90:	3c08      	subs	r4, #8
 800cf92:	1b2d      	subs	r5, r5, r4
 800cf94:	1963      	adds	r3, r4, r5
 800cf96:	42bb      	cmp	r3, r7
 800cf98:	db07      	blt.n	800cfaa <__s2b+0x6a>
 800cf9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf9e:	0052      	lsls	r2, r2, #1
 800cfa0:	3101      	adds	r1, #1
 800cfa2:	e7d9      	b.n	800cf58 <__s2b+0x18>
 800cfa4:	340a      	adds	r4, #10
 800cfa6:	2509      	movs	r5, #9
 800cfa8:	e7f3      	b.n	800cf92 <__s2b+0x52>
 800cfaa:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cfae:	4601      	mov	r1, r0
 800cfb0:	3b30      	subs	r3, #48	; 0x30
 800cfb2:	220a      	movs	r2, #10
 800cfb4:	4630      	mov	r0, r6
 800cfb6:	f7ff ff88 	bl	800ceca <__multadd>
 800cfba:	e7eb      	b.n	800cf94 <__s2b+0x54>

0800cfbc <__hi0bits>:
 800cfbc:	0c02      	lsrs	r2, r0, #16
 800cfbe:	0412      	lsls	r2, r2, #16
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	b9b2      	cbnz	r2, 800cff2 <__hi0bits+0x36>
 800cfc4:	0403      	lsls	r3, r0, #16
 800cfc6:	2010      	movs	r0, #16
 800cfc8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cfcc:	bf04      	itt	eq
 800cfce:	021b      	lsleq	r3, r3, #8
 800cfd0:	3008      	addeq	r0, #8
 800cfd2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cfd6:	bf04      	itt	eq
 800cfd8:	011b      	lsleq	r3, r3, #4
 800cfda:	3004      	addeq	r0, #4
 800cfdc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cfe0:	bf04      	itt	eq
 800cfe2:	009b      	lsleq	r3, r3, #2
 800cfe4:	3002      	addeq	r0, #2
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	db06      	blt.n	800cff8 <__hi0bits+0x3c>
 800cfea:	005b      	lsls	r3, r3, #1
 800cfec:	d503      	bpl.n	800cff6 <__hi0bits+0x3a>
 800cfee:	3001      	adds	r0, #1
 800cff0:	4770      	bx	lr
 800cff2:	2000      	movs	r0, #0
 800cff4:	e7e8      	b.n	800cfc8 <__hi0bits+0xc>
 800cff6:	2020      	movs	r0, #32
 800cff8:	4770      	bx	lr

0800cffa <__lo0bits>:
 800cffa:	6803      	ldr	r3, [r0, #0]
 800cffc:	f013 0207 	ands.w	r2, r3, #7
 800d000:	4601      	mov	r1, r0
 800d002:	d00b      	beq.n	800d01c <__lo0bits+0x22>
 800d004:	07da      	lsls	r2, r3, #31
 800d006:	d423      	bmi.n	800d050 <__lo0bits+0x56>
 800d008:	0798      	lsls	r0, r3, #30
 800d00a:	bf49      	itett	mi
 800d00c:	085b      	lsrmi	r3, r3, #1
 800d00e:	089b      	lsrpl	r3, r3, #2
 800d010:	2001      	movmi	r0, #1
 800d012:	600b      	strmi	r3, [r1, #0]
 800d014:	bf5c      	itt	pl
 800d016:	600b      	strpl	r3, [r1, #0]
 800d018:	2002      	movpl	r0, #2
 800d01a:	4770      	bx	lr
 800d01c:	b298      	uxth	r0, r3
 800d01e:	b9a8      	cbnz	r0, 800d04c <__lo0bits+0x52>
 800d020:	0c1b      	lsrs	r3, r3, #16
 800d022:	2010      	movs	r0, #16
 800d024:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d028:	bf04      	itt	eq
 800d02a:	0a1b      	lsreq	r3, r3, #8
 800d02c:	3008      	addeq	r0, #8
 800d02e:	071a      	lsls	r2, r3, #28
 800d030:	bf04      	itt	eq
 800d032:	091b      	lsreq	r3, r3, #4
 800d034:	3004      	addeq	r0, #4
 800d036:	079a      	lsls	r2, r3, #30
 800d038:	bf04      	itt	eq
 800d03a:	089b      	lsreq	r3, r3, #2
 800d03c:	3002      	addeq	r0, #2
 800d03e:	07da      	lsls	r2, r3, #31
 800d040:	d402      	bmi.n	800d048 <__lo0bits+0x4e>
 800d042:	085b      	lsrs	r3, r3, #1
 800d044:	d006      	beq.n	800d054 <__lo0bits+0x5a>
 800d046:	3001      	adds	r0, #1
 800d048:	600b      	str	r3, [r1, #0]
 800d04a:	4770      	bx	lr
 800d04c:	4610      	mov	r0, r2
 800d04e:	e7e9      	b.n	800d024 <__lo0bits+0x2a>
 800d050:	2000      	movs	r0, #0
 800d052:	4770      	bx	lr
 800d054:	2020      	movs	r0, #32
 800d056:	4770      	bx	lr

0800d058 <__i2b>:
 800d058:	b510      	push	{r4, lr}
 800d05a:	460c      	mov	r4, r1
 800d05c:	2101      	movs	r1, #1
 800d05e:	f7ff fee9 	bl	800ce34 <_Balloc>
 800d062:	2201      	movs	r2, #1
 800d064:	6144      	str	r4, [r0, #20]
 800d066:	6102      	str	r2, [r0, #16]
 800d068:	bd10      	pop	{r4, pc}

0800d06a <__multiply>:
 800d06a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d06e:	4614      	mov	r4, r2
 800d070:	690a      	ldr	r2, [r1, #16]
 800d072:	6923      	ldr	r3, [r4, #16]
 800d074:	429a      	cmp	r2, r3
 800d076:	bfb8      	it	lt
 800d078:	460b      	movlt	r3, r1
 800d07a:	4688      	mov	r8, r1
 800d07c:	bfbc      	itt	lt
 800d07e:	46a0      	movlt	r8, r4
 800d080:	461c      	movlt	r4, r3
 800d082:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d086:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d08a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d08e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d092:	eb07 0609 	add.w	r6, r7, r9
 800d096:	42b3      	cmp	r3, r6
 800d098:	bfb8      	it	lt
 800d09a:	3101      	addlt	r1, #1
 800d09c:	f7ff feca 	bl	800ce34 <_Balloc>
 800d0a0:	f100 0514 	add.w	r5, r0, #20
 800d0a4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d0a8:	462b      	mov	r3, r5
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	4573      	cmp	r3, lr
 800d0ae:	d316      	bcc.n	800d0de <__multiply+0x74>
 800d0b0:	f104 0214 	add.w	r2, r4, #20
 800d0b4:	f108 0114 	add.w	r1, r8, #20
 800d0b8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d0bc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d0c0:	9300      	str	r3, [sp, #0]
 800d0c2:	9b00      	ldr	r3, [sp, #0]
 800d0c4:	9201      	str	r2, [sp, #4]
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d80c      	bhi.n	800d0e4 <__multiply+0x7a>
 800d0ca:	2e00      	cmp	r6, #0
 800d0cc:	dd03      	ble.n	800d0d6 <__multiply+0x6c>
 800d0ce:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d05d      	beq.n	800d192 <__multiply+0x128>
 800d0d6:	6106      	str	r6, [r0, #16]
 800d0d8:	b003      	add	sp, #12
 800d0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0de:	f843 2b04 	str.w	r2, [r3], #4
 800d0e2:	e7e3      	b.n	800d0ac <__multiply+0x42>
 800d0e4:	f8b2 b000 	ldrh.w	fp, [r2]
 800d0e8:	f1bb 0f00 	cmp.w	fp, #0
 800d0ec:	d023      	beq.n	800d136 <__multiply+0xcc>
 800d0ee:	4689      	mov	r9, r1
 800d0f0:	46ac      	mov	ip, r5
 800d0f2:	f04f 0800 	mov.w	r8, #0
 800d0f6:	f859 4b04 	ldr.w	r4, [r9], #4
 800d0fa:	f8dc a000 	ldr.w	sl, [ip]
 800d0fe:	b2a3      	uxth	r3, r4
 800d100:	fa1f fa8a 	uxth.w	sl, sl
 800d104:	fb0b a303 	mla	r3, fp, r3, sl
 800d108:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d10c:	f8dc 4000 	ldr.w	r4, [ip]
 800d110:	4443      	add	r3, r8
 800d112:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d116:	fb0b 840a 	mla	r4, fp, sl, r8
 800d11a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d11e:	46e2      	mov	sl, ip
 800d120:	b29b      	uxth	r3, r3
 800d122:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d126:	454f      	cmp	r7, r9
 800d128:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d12c:	f84a 3b04 	str.w	r3, [sl], #4
 800d130:	d82b      	bhi.n	800d18a <__multiply+0x120>
 800d132:	f8cc 8004 	str.w	r8, [ip, #4]
 800d136:	9b01      	ldr	r3, [sp, #4]
 800d138:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d13c:	3204      	adds	r2, #4
 800d13e:	f1ba 0f00 	cmp.w	sl, #0
 800d142:	d020      	beq.n	800d186 <__multiply+0x11c>
 800d144:	682b      	ldr	r3, [r5, #0]
 800d146:	4689      	mov	r9, r1
 800d148:	46a8      	mov	r8, r5
 800d14a:	f04f 0b00 	mov.w	fp, #0
 800d14e:	f8b9 c000 	ldrh.w	ip, [r9]
 800d152:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d156:	fb0a 440c 	mla	r4, sl, ip, r4
 800d15a:	445c      	add	r4, fp
 800d15c:	46c4      	mov	ip, r8
 800d15e:	b29b      	uxth	r3, r3
 800d160:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d164:	f84c 3b04 	str.w	r3, [ip], #4
 800d168:	f859 3b04 	ldr.w	r3, [r9], #4
 800d16c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d170:	0c1b      	lsrs	r3, r3, #16
 800d172:	fb0a b303 	mla	r3, sl, r3, fp
 800d176:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d17a:	454f      	cmp	r7, r9
 800d17c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d180:	d805      	bhi.n	800d18e <__multiply+0x124>
 800d182:	f8c8 3004 	str.w	r3, [r8, #4]
 800d186:	3504      	adds	r5, #4
 800d188:	e79b      	b.n	800d0c2 <__multiply+0x58>
 800d18a:	46d4      	mov	ip, sl
 800d18c:	e7b3      	b.n	800d0f6 <__multiply+0x8c>
 800d18e:	46e0      	mov	r8, ip
 800d190:	e7dd      	b.n	800d14e <__multiply+0xe4>
 800d192:	3e01      	subs	r6, #1
 800d194:	e799      	b.n	800d0ca <__multiply+0x60>
	...

0800d198 <__pow5mult>:
 800d198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d19c:	4615      	mov	r5, r2
 800d19e:	f012 0203 	ands.w	r2, r2, #3
 800d1a2:	4606      	mov	r6, r0
 800d1a4:	460f      	mov	r7, r1
 800d1a6:	d007      	beq.n	800d1b8 <__pow5mult+0x20>
 800d1a8:	3a01      	subs	r2, #1
 800d1aa:	4c21      	ldr	r4, [pc, #132]	; (800d230 <__pow5mult+0x98>)
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d1b2:	f7ff fe8a 	bl	800ceca <__multadd>
 800d1b6:	4607      	mov	r7, r0
 800d1b8:	10ad      	asrs	r5, r5, #2
 800d1ba:	d035      	beq.n	800d228 <__pow5mult+0x90>
 800d1bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d1be:	b93c      	cbnz	r4, 800d1d0 <__pow5mult+0x38>
 800d1c0:	2010      	movs	r0, #16
 800d1c2:	f7ff fe1d 	bl	800ce00 <malloc>
 800d1c6:	6270      	str	r0, [r6, #36]	; 0x24
 800d1c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1cc:	6004      	str	r4, [r0, #0]
 800d1ce:	60c4      	str	r4, [r0, #12]
 800d1d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d1d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1d8:	b94c      	cbnz	r4, 800d1ee <__pow5mult+0x56>
 800d1da:	f240 2171 	movw	r1, #625	; 0x271
 800d1de:	4630      	mov	r0, r6
 800d1e0:	f7ff ff3a 	bl	800d058 <__i2b>
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	6003      	str	r3, [r0, #0]
 800d1ee:	f04f 0800 	mov.w	r8, #0
 800d1f2:	07eb      	lsls	r3, r5, #31
 800d1f4:	d50a      	bpl.n	800d20c <__pow5mult+0x74>
 800d1f6:	4639      	mov	r1, r7
 800d1f8:	4622      	mov	r2, r4
 800d1fa:	4630      	mov	r0, r6
 800d1fc:	f7ff ff35 	bl	800d06a <__multiply>
 800d200:	4639      	mov	r1, r7
 800d202:	4681      	mov	r9, r0
 800d204:	4630      	mov	r0, r6
 800d206:	f7ff fe49 	bl	800ce9c <_Bfree>
 800d20a:	464f      	mov	r7, r9
 800d20c:	106d      	asrs	r5, r5, #1
 800d20e:	d00b      	beq.n	800d228 <__pow5mult+0x90>
 800d210:	6820      	ldr	r0, [r4, #0]
 800d212:	b938      	cbnz	r0, 800d224 <__pow5mult+0x8c>
 800d214:	4622      	mov	r2, r4
 800d216:	4621      	mov	r1, r4
 800d218:	4630      	mov	r0, r6
 800d21a:	f7ff ff26 	bl	800d06a <__multiply>
 800d21e:	6020      	str	r0, [r4, #0]
 800d220:	f8c0 8000 	str.w	r8, [r0]
 800d224:	4604      	mov	r4, r0
 800d226:	e7e4      	b.n	800d1f2 <__pow5mult+0x5a>
 800d228:	4638      	mov	r0, r7
 800d22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d22e:	bf00      	nop
 800d230:	0800e8f0 	.word	0x0800e8f0

0800d234 <__lshift>:
 800d234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d238:	460c      	mov	r4, r1
 800d23a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d23e:	6923      	ldr	r3, [r4, #16]
 800d240:	6849      	ldr	r1, [r1, #4]
 800d242:	eb0a 0903 	add.w	r9, sl, r3
 800d246:	68a3      	ldr	r3, [r4, #8]
 800d248:	4607      	mov	r7, r0
 800d24a:	4616      	mov	r6, r2
 800d24c:	f109 0501 	add.w	r5, r9, #1
 800d250:	42ab      	cmp	r3, r5
 800d252:	db32      	blt.n	800d2ba <__lshift+0x86>
 800d254:	4638      	mov	r0, r7
 800d256:	f7ff fded 	bl	800ce34 <_Balloc>
 800d25a:	2300      	movs	r3, #0
 800d25c:	4680      	mov	r8, r0
 800d25e:	f100 0114 	add.w	r1, r0, #20
 800d262:	461a      	mov	r2, r3
 800d264:	4553      	cmp	r3, sl
 800d266:	db2b      	blt.n	800d2c0 <__lshift+0x8c>
 800d268:	6920      	ldr	r0, [r4, #16]
 800d26a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d26e:	f104 0314 	add.w	r3, r4, #20
 800d272:	f016 021f 	ands.w	r2, r6, #31
 800d276:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d27a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d27e:	d025      	beq.n	800d2cc <__lshift+0x98>
 800d280:	f1c2 0e20 	rsb	lr, r2, #32
 800d284:	2000      	movs	r0, #0
 800d286:	681e      	ldr	r6, [r3, #0]
 800d288:	468a      	mov	sl, r1
 800d28a:	4096      	lsls	r6, r2
 800d28c:	4330      	orrs	r0, r6
 800d28e:	f84a 0b04 	str.w	r0, [sl], #4
 800d292:	f853 0b04 	ldr.w	r0, [r3], #4
 800d296:	459c      	cmp	ip, r3
 800d298:	fa20 f00e 	lsr.w	r0, r0, lr
 800d29c:	d814      	bhi.n	800d2c8 <__lshift+0x94>
 800d29e:	6048      	str	r0, [r1, #4]
 800d2a0:	b108      	cbz	r0, 800d2a6 <__lshift+0x72>
 800d2a2:	f109 0502 	add.w	r5, r9, #2
 800d2a6:	3d01      	subs	r5, #1
 800d2a8:	4638      	mov	r0, r7
 800d2aa:	f8c8 5010 	str.w	r5, [r8, #16]
 800d2ae:	4621      	mov	r1, r4
 800d2b0:	f7ff fdf4 	bl	800ce9c <_Bfree>
 800d2b4:	4640      	mov	r0, r8
 800d2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ba:	3101      	adds	r1, #1
 800d2bc:	005b      	lsls	r3, r3, #1
 800d2be:	e7c7      	b.n	800d250 <__lshift+0x1c>
 800d2c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	e7cd      	b.n	800d264 <__lshift+0x30>
 800d2c8:	4651      	mov	r1, sl
 800d2ca:	e7dc      	b.n	800d286 <__lshift+0x52>
 800d2cc:	3904      	subs	r1, #4
 800d2ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2d2:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2d6:	459c      	cmp	ip, r3
 800d2d8:	d8f9      	bhi.n	800d2ce <__lshift+0x9a>
 800d2da:	e7e4      	b.n	800d2a6 <__lshift+0x72>

0800d2dc <__mcmp>:
 800d2dc:	6903      	ldr	r3, [r0, #16]
 800d2de:	690a      	ldr	r2, [r1, #16]
 800d2e0:	1a9b      	subs	r3, r3, r2
 800d2e2:	b530      	push	{r4, r5, lr}
 800d2e4:	d10c      	bne.n	800d300 <__mcmp+0x24>
 800d2e6:	0092      	lsls	r2, r2, #2
 800d2e8:	3014      	adds	r0, #20
 800d2ea:	3114      	adds	r1, #20
 800d2ec:	1884      	adds	r4, r0, r2
 800d2ee:	4411      	add	r1, r2
 800d2f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d2f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d2f8:	4295      	cmp	r5, r2
 800d2fa:	d003      	beq.n	800d304 <__mcmp+0x28>
 800d2fc:	d305      	bcc.n	800d30a <__mcmp+0x2e>
 800d2fe:	2301      	movs	r3, #1
 800d300:	4618      	mov	r0, r3
 800d302:	bd30      	pop	{r4, r5, pc}
 800d304:	42a0      	cmp	r0, r4
 800d306:	d3f3      	bcc.n	800d2f0 <__mcmp+0x14>
 800d308:	e7fa      	b.n	800d300 <__mcmp+0x24>
 800d30a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d30e:	e7f7      	b.n	800d300 <__mcmp+0x24>

0800d310 <__mdiff>:
 800d310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d314:	460d      	mov	r5, r1
 800d316:	4607      	mov	r7, r0
 800d318:	4611      	mov	r1, r2
 800d31a:	4628      	mov	r0, r5
 800d31c:	4614      	mov	r4, r2
 800d31e:	f7ff ffdd 	bl	800d2dc <__mcmp>
 800d322:	1e06      	subs	r6, r0, #0
 800d324:	d108      	bne.n	800d338 <__mdiff+0x28>
 800d326:	4631      	mov	r1, r6
 800d328:	4638      	mov	r0, r7
 800d32a:	f7ff fd83 	bl	800ce34 <_Balloc>
 800d32e:	2301      	movs	r3, #1
 800d330:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d338:	bfa4      	itt	ge
 800d33a:	4623      	movge	r3, r4
 800d33c:	462c      	movge	r4, r5
 800d33e:	4638      	mov	r0, r7
 800d340:	6861      	ldr	r1, [r4, #4]
 800d342:	bfa6      	itte	ge
 800d344:	461d      	movge	r5, r3
 800d346:	2600      	movge	r6, #0
 800d348:	2601      	movlt	r6, #1
 800d34a:	f7ff fd73 	bl	800ce34 <_Balloc>
 800d34e:	692b      	ldr	r3, [r5, #16]
 800d350:	60c6      	str	r6, [r0, #12]
 800d352:	6926      	ldr	r6, [r4, #16]
 800d354:	f105 0914 	add.w	r9, r5, #20
 800d358:	f104 0214 	add.w	r2, r4, #20
 800d35c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d360:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d364:	f100 0514 	add.w	r5, r0, #20
 800d368:	f04f 0e00 	mov.w	lr, #0
 800d36c:	f852 ab04 	ldr.w	sl, [r2], #4
 800d370:	f859 4b04 	ldr.w	r4, [r9], #4
 800d374:	fa1e f18a 	uxtah	r1, lr, sl
 800d378:	b2a3      	uxth	r3, r4
 800d37a:	1ac9      	subs	r1, r1, r3
 800d37c:	0c23      	lsrs	r3, r4, #16
 800d37e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d382:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d386:	b289      	uxth	r1, r1
 800d388:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d38c:	45c8      	cmp	r8, r9
 800d38e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d392:	4694      	mov	ip, r2
 800d394:	f845 3b04 	str.w	r3, [r5], #4
 800d398:	d8e8      	bhi.n	800d36c <__mdiff+0x5c>
 800d39a:	45bc      	cmp	ip, r7
 800d39c:	d304      	bcc.n	800d3a8 <__mdiff+0x98>
 800d39e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d3a2:	b183      	cbz	r3, 800d3c6 <__mdiff+0xb6>
 800d3a4:	6106      	str	r6, [r0, #16]
 800d3a6:	e7c5      	b.n	800d334 <__mdiff+0x24>
 800d3a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d3ac:	fa1e f381 	uxtah	r3, lr, r1
 800d3b0:	141a      	asrs	r2, r3, #16
 800d3b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d3bc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d3c0:	f845 3b04 	str.w	r3, [r5], #4
 800d3c4:	e7e9      	b.n	800d39a <__mdiff+0x8a>
 800d3c6:	3e01      	subs	r6, #1
 800d3c8:	e7e9      	b.n	800d39e <__mdiff+0x8e>
	...

0800d3cc <__ulp>:
 800d3cc:	4b12      	ldr	r3, [pc, #72]	; (800d418 <__ulp+0x4c>)
 800d3ce:	ee10 2a90 	vmov	r2, s1
 800d3d2:	401a      	ands	r2, r3
 800d3d4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	dd04      	ble.n	800d3e6 <__ulp+0x1a>
 800d3dc:	2000      	movs	r0, #0
 800d3de:	4619      	mov	r1, r3
 800d3e0:	ec41 0b10 	vmov	d0, r0, r1
 800d3e4:	4770      	bx	lr
 800d3e6:	425b      	negs	r3, r3
 800d3e8:	151b      	asrs	r3, r3, #20
 800d3ea:	2b13      	cmp	r3, #19
 800d3ec:	f04f 0000 	mov.w	r0, #0
 800d3f0:	f04f 0100 	mov.w	r1, #0
 800d3f4:	dc04      	bgt.n	800d400 <__ulp+0x34>
 800d3f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d3fa:	fa42 f103 	asr.w	r1, r2, r3
 800d3fe:	e7ef      	b.n	800d3e0 <__ulp+0x14>
 800d400:	3b14      	subs	r3, #20
 800d402:	2b1e      	cmp	r3, #30
 800d404:	f04f 0201 	mov.w	r2, #1
 800d408:	bfda      	itte	le
 800d40a:	f1c3 031f 	rsble	r3, r3, #31
 800d40e:	fa02 f303 	lslle.w	r3, r2, r3
 800d412:	4613      	movgt	r3, r2
 800d414:	4618      	mov	r0, r3
 800d416:	e7e3      	b.n	800d3e0 <__ulp+0x14>
 800d418:	7ff00000 	.word	0x7ff00000

0800d41c <__b2d>:
 800d41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d41e:	6905      	ldr	r5, [r0, #16]
 800d420:	f100 0714 	add.w	r7, r0, #20
 800d424:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d428:	1f2e      	subs	r6, r5, #4
 800d42a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d42e:	4620      	mov	r0, r4
 800d430:	f7ff fdc4 	bl	800cfbc <__hi0bits>
 800d434:	f1c0 0320 	rsb	r3, r0, #32
 800d438:	280a      	cmp	r0, #10
 800d43a:	600b      	str	r3, [r1, #0]
 800d43c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800d4b4 <__b2d+0x98>
 800d440:	dc14      	bgt.n	800d46c <__b2d+0x50>
 800d442:	f1c0 0e0b 	rsb	lr, r0, #11
 800d446:	fa24 f10e 	lsr.w	r1, r4, lr
 800d44a:	42b7      	cmp	r7, r6
 800d44c:	ea41 030c 	orr.w	r3, r1, ip
 800d450:	bf34      	ite	cc
 800d452:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d456:	2100      	movcs	r1, #0
 800d458:	3015      	adds	r0, #21
 800d45a:	fa04 f000 	lsl.w	r0, r4, r0
 800d45e:	fa21 f10e 	lsr.w	r1, r1, lr
 800d462:	ea40 0201 	orr.w	r2, r0, r1
 800d466:	ec43 2b10 	vmov	d0, r2, r3
 800d46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d46c:	42b7      	cmp	r7, r6
 800d46e:	bf3a      	itte	cc
 800d470:	f1a5 0608 	subcc.w	r6, r5, #8
 800d474:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d478:	2100      	movcs	r1, #0
 800d47a:	380b      	subs	r0, #11
 800d47c:	d015      	beq.n	800d4aa <__b2d+0x8e>
 800d47e:	4084      	lsls	r4, r0
 800d480:	f1c0 0520 	rsb	r5, r0, #32
 800d484:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800d488:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800d48c:	42be      	cmp	r6, r7
 800d48e:	fa21 fc05 	lsr.w	ip, r1, r5
 800d492:	ea44 030c 	orr.w	r3, r4, ip
 800d496:	bf8c      	ite	hi
 800d498:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d49c:	2400      	movls	r4, #0
 800d49e:	fa01 f000 	lsl.w	r0, r1, r0
 800d4a2:	40ec      	lsrs	r4, r5
 800d4a4:	ea40 0204 	orr.w	r2, r0, r4
 800d4a8:	e7dd      	b.n	800d466 <__b2d+0x4a>
 800d4aa:	ea44 030c 	orr.w	r3, r4, ip
 800d4ae:	460a      	mov	r2, r1
 800d4b0:	e7d9      	b.n	800d466 <__b2d+0x4a>
 800d4b2:	bf00      	nop
 800d4b4:	3ff00000 	.word	0x3ff00000

0800d4b8 <__d2b>:
 800d4b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d4bc:	460e      	mov	r6, r1
 800d4be:	2101      	movs	r1, #1
 800d4c0:	ec59 8b10 	vmov	r8, r9, d0
 800d4c4:	4615      	mov	r5, r2
 800d4c6:	f7ff fcb5 	bl	800ce34 <_Balloc>
 800d4ca:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d4ce:	4607      	mov	r7, r0
 800d4d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d4d4:	bb34      	cbnz	r4, 800d524 <__d2b+0x6c>
 800d4d6:	9301      	str	r3, [sp, #4]
 800d4d8:	f1b8 0300 	subs.w	r3, r8, #0
 800d4dc:	d027      	beq.n	800d52e <__d2b+0x76>
 800d4de:	a802      	add	r0, sp, #8
 800d4e0:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d4e4:	f7ff fd89 	bl	800cffa <__lo0bits>
 800d4e8:	9900      	ldr	r1, [sp, #0]
 800d4ea:	b1f0      	cbz	r0, 800d52a <__d2b+0x72>
 800d4ec:	9a01      	ldr	r2, [sp, #4]
 800d4ee:	f1c0 0320 	rsb	r3, r0, #32
 800d4f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d4f6:	430b      	orrs	r3, r1
 800d4f8:	40c2      	lsrs	r2, r0
 800d4fa:	617b      	str	r3, [r7, #20]
 800d4fc:	9201      	str	r2, [sp, #4]
 800d4fe:	9b01      	ldr	r3, [sp, #4]
 800d500:	61bb      	str	r3, [r7, #24]
 800d502:	2b00      	cmp	r3, #0
 800d504:	bf14      	ite	ne
 800d506:	2102      	movne	r1, #2
 800d508:	2101      	moveq	r1, #1
 800d50a:	6139      	str	r1, [r7, #16]
 800d50c:	b1c4      	cbz	r4, 800d540 <__d2b+0x88>
 800d50e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d512:	4404      	add	r4, r0
 800d514:	6034      	str	r4, [r6, #0]
 800d516:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d51a:	6028      	str	r0, [r5, #0]
 800d51c:	4638      	mov	r0, r7
 800d51e:	b003      	add	sp, #12
 800d520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d528:	e7d5      	b.n	800d4d6 <__d2b+0x1e>
 800d52a:	6179      	str	r1, [r7, #20]
 800d52c:	e7e7      	b.n	800d4fe <__d2b+0x46>
 800d52e:	a801      	add	r0, sp, #4
 800d530:	f7ff fd63 	bl	800cffa <__lo0bits>
 800d534:	9b01      	ldr	r3, [sp, #4]
 800d536:	617b      	str	r3, [r7, #20]
 800d538:	2101      	movs	r1, #1
 800d53a:	6139      	str	r1, [r7, #16]
 800d53c:	3020      	adds	r0, #32
 800d53e:	e7e5      	b.n	800d50c <__d2b+0x54>
 800d540:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d544:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d548:	6030      	str	r0, [r6, #0]
 800d54a:	6918      	ldr	r0, [r3, #16]
 800d54c:	f7ff fd36 	bl	800cfbc <__hi0bits>
 800d550:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d554:	e7e1      	b.n	800d51a <__d2b+0x62>

0800d556 <__ratio>:
 800d556:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d55a:	4688      	mov	r8, r1
 800d55c:	4669      	mov	r1, sp
 800d55e:	4681      	mov	r9, r0
 800d560:	f7ff ff5c 	bl	800d41c <__b2d>
 800d564:	a901      	add	r1, sp, #4
 800d566:	4640      	mov	r0, r8
 800d568:	ec57 6b10 	vmov	r6, r7, d0
 800d56c:	f7ff ff56 	bl	800d41c <__b2d>
 800d570:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d574:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d578:	eba3 0c02 	sub.w	ip, r3, r2
 800d57c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d580:	1a9b      	subs	r3, r3, r2
 800d582:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d586:	ec5b ab10 	vmov	sl, fp, d0
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	bfce      	itee	gt
 800d58e:	463a      	movgt	r2, r7
 800d590:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d594:	465a      	movle	r2, fp
 800d596:	4659      	mov	r1, fp
 800d598:	463d      	mov	r5, r7
 800d59a:	bfd4      	ite	le
 800d59c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d5a0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d5a4:	4630      	mov	r0, r6
 800d5a6:	ee10 2a10 	vmov	r2, s0
 800d5aa:	460b      	mov	r3, r1
 800d5ac:	4629      	mov	r1, r5
 800d5ae:	f7f3 f955 	bl	800085c <__aeabi_ddiv>
 800d5b2:	ec41 0b10 	vmov	d0, r0, r1
 800d5b6:	b003      	add	sp, #12
 800d5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d5bc <__copybits>:
 800d5bc:	3901      	subs	r1, #1
 800d5be:	b510      	push	{r4, lr}
 800d5c0:	1149      	asrs	r1, r1, #5
 800d5c2:	6914      	ldr	r4, [r2, #16]
 800d5c4:	3101      	adds	r1, #1
 800d5c6:	f102 0314 	add.w	r3, r2, #20
 800d5ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d5ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d5d2:	42a3      	cmp	r3, r4
 800d5d4:	4602      	mov	r2, r0
 800d5d6:	d303      	bcc.n	800d5e0 <__copybits+0x24>
 800d5d8:	2300      	movs	r3, #0
 800d5da:	428a      	cmp	r2, r1
 800d5dc:	d305      	bcc.n	800d5ea <__copybits+0x2e>
 800d5de:	bd10      	pop	{r4, pc}
 800d5e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5e4:	f840 2b04 	str.w	r2, [r0], #4
 800d5e8:	e7f3      	b.n	800d5d2 <__copybits+0x16>
 800d5ea:	f842 3b04 	str.w	r3, [r2], #4
 800d5ee:	e7f4      	b.n	800d5da <__copybits+0x1e>

0800d5f0 <__any_on>:
 800d5f0:	f100 0214 	add.w	r2, r0, #20
 800d5f4:	6900      	ldr	r0, [r0, #16]
 800d5f6:	114b      	asrs	r3, r1, #5
 800d5f8:	4298      	cmp	r0, r3
 800d5fa:	b510      	push	{r4, lr}
 800d5fc:	db11      	blt.n	800d622 <__any_on+0x32>
 800d5fe:	dd0a      	ble.n	800d616 <__any_on+0x26>
 800d600:	f011 011f 	ands.w	r1, r1, #31
 800d604:	d007      	beq.n	800d616 <__any_on+0x26>
 800d606:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d60a:	fa24 f001 	lsr.w	r0, r4, r1
 800d60e:	fa00 f101 	lsl.w	r1, r0, r1
 800d612:	428c      	cmp	r4, r1
 800d614:	d10b      	bne.n	800d62e <__any_on+0x3e>
 800d616:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d803      	bhi.n	800d626 <__any_on+0x36>
 800d61e:	2000      	movs	r0, #0
 800d620:	bd10      	pop	{r4, pc}
 800d622:	4603      	mov	r3, r0
 800d624:	e7f7      	b.n	800d616 <__any_on+0x26>
 800d626:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d62a:	2900      	cmp	r1, #0
 800d62c:	d0f5      	beq.n	800d61a <__any_on+0x2a>
 800d62e:	2001      	movs	r0, #1
 800d630:	e7f6      	b.n	800d620 <__any_on+0x30>

0800d632 <_calloc_r>:
 800d632:	b538      	push	{r3, r4, r5, lr}
 800d634:	fb02 f401 	mul.w	r4, r2, r1
 800d638:	4621      	mov	r1, r4
 800d63a:	f000 f857 	bl	800d6ec <_malloc_r>
 800d63e:	4605      	mov	r5, r0
 800d640:	b118      	cbz	r0, 800d64a <_calloc_r+0x18>
 800d642:	4622      	mov	r2, r4
 800d644:	2100      	movs	r1, #0
 800d646:	f7fc fa26 	bl	8009a96 <memset>
 800d64a:	4628      	mov	r0, r5
 800d64c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d650 <_free_r>:
 800d650:	b538      	push	{r3, r4, r5, lr}
 800d652:	4605      	mov	r5, r0
 800d654:	2900      	cmp	r1, #0
 800d656:	d045      	beq.n	800d6e4 <_free_r+0x94>
 800d658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d65c:	1f0c      	subs	r4, r1, #4
 800d65e:	2b00      	cmp	r3, #0
 800d660:	bfb8      	it	lt
 800d662:	18e4      	addlt	r4, r4, r3
 800d664:	f000 fc0f 	bl	800de86 <__malloc_lock>
 800d668:	4a1f      	ldr	r2, [pc, #124]	; (800d6e8 <_free_r+0x98>)
 800d66a:	6813      	ldr	r3, [r2, #0]
 800d66c:	4610      	mov	r0, r2
 800d66e:	b933      	cbnz	r3, 800d67e <_free_r+0x2e>
 800d670:	6063      	str	r3, [r4, #4]
 800d672:	6014      	str	r4, [r2, #0]
 800d674:	4628      	mov	r0, r5
 800d676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d67a:	f000 bc05 	b.w	800de88 <__malloc_unlock>
 800d67e:	42a3      	cmp	r3, r4
 800d680:	d90c      	bls.n	800d69c <_free_r+0x4c>
 800d682:	6821      	ldr	r1, [r4, #0]
 800d684:	1862      	adds	r2, r4, r1
 800d686:	4293      	cmp	r3, r2
 800d688:	bf04      	itt	eq
 800d68a:	681a      	ldreq	r2, [r3, #0]
 800d68c:	685b      	ldreq	r3, [r3, #4]
 800d68e:	6063      	str	r3, [r4, #4]
 800d690:	bf04      	itt	eq
 800d692:	1852      	addeq	r2, r2, r1
 800d694:	6022      	streq	r2, [r4, #0]
 800d696:	6004      	str	r4, [r0, #0]
 800d698:	e7ec      	b.n	800d674 <_free_r+0x24>
 800d69a:	4613      	mov	r3, r2
 800d69c:	685a      	ldr	r2, [r3, #4]
 800d69e:	b10a      	cbz	r2, 800d6a4 <_free_r+0x54>
 800d6a0:	42a2      	cmp	r2, r4
 800d6a2:	d9fa      	bls.n	800d69a <_free_r+0x4a>
 800d6a4:	6819      	ldr	r1, [r3, #0]
 800d6a6:	1858      	adds	r0, r3, r1
 800d6a8:	42a0      	cmp	r0, r4
 800d6aa:	d10b      	bne.n	800d6c4 <_free_r+0x74>
 800d6ac:	6820      	ldr	r0, [r4, #0]
 800d6ae:	4401      	add	r1, r0
 800d6b0:	1858      	adds	r0, r3, r1
 800d6b2:	4282      	cmp	r2, r0
 800d6b4:	6019      	str	r1, [r3, #0]
 800d6b6:	d1dd      	bne.n	800d674 <_free_r+0x24>
 800d6b8:	6810      	ldr	r0, [r2, #0]
 800d6ba:	6852      	ldr	r2, [r2, #4]
 800d6bc:	605a      	str	r2, [r3, #4]
 800d6be:	4401      	add	r1, r0
 800d6c0:	6019      	str	r1, [r3, #0]
 800d6c2:	e7d7      	b.n	800d674 <_free_r+0x24>
 800d6c4:	d902      	bls.n	800d6cc <_free_r+0x7c>
 800d6c6:	230c      	movs	r3, #12
 800d6c8:	602b      	str	r3, [r5, #0]
 800d6ca:	e7d3      	b.n	800d674 <_free_r+0x24>
 800d6cc:	6820      	ldr	r0, [r4, #0]
 800d6ce:	1821      	adds	r1, r4, r0
 800d6d0:	428a      	cmp	r2, r1
 800d6d2:	bf04      	itt	eq
 800d6d4:	6811      	ldreq	r1, [r2, #0]
 800d6d6:	6852      	ldreq	r2, [r2, #4]
 800d6d8:	6062      	str	r2, [r4, #4]
 800d6da:	bf04      	itt	eq
 800d6dc:	1809      	addeq	r1, r1, r0
 800d6de:	6021      	streq	r1, [r4, #0]
 800d6e0:	605c      	str	r4, [r3, #4]
 800d6e2:	e7c7      	b.n	800d674 <_free_r+0x24>
 800d6e4:	bd38      	pop	{r3, r4, r5, pc}
 800d6e6:	bf00      	nop
 800d6e8:	2000431c 	.word	0x2000431c

0800d6ec <_malloc_r>:
 800d6ec:	b570      	push	{r4, r5, r6, lr}
 800d6ee:	1ccd      	adds	r5, r1, #3
 800d6f0:	f025 0503 	bic.w	r5, r5, #3
 800d6f4:	3508      	adds	r5, #8
 800d6f6:	2d0c      	cmp	r5, #12
 800d6f8:	bf38      	it	cc
 800d6fa:	250c      	movcc	r5, #12
 800d6fc:	2d00      	cmp	r5, #0
 800d6fe:	4606      	mov	r6, r0
 800d700:	db01      	blt.n	800d706 <_malloc_r+0x1a>
 800d702:	42a9      	cmp	r1, r5
 800d704:	d903      	bls.n	800d70e <_malloc_r+0x22>
 800d706:	230c      	movs	r3, #12
 800d708:	6033      	str	r3, [r6, #0]
 800d70a:	2000      	movs	r0, #0
 800d70c:	bd70      	pop	{r4, r5, r6, pc}
 800d70e:	f000 fbba 	bl	800de86 <__malloc_lock>
 800d712:	4a21      	ldr	r2, [pc, #132]	; (800d798 <_malloc_r+0xac>)
 800d714:	6814      	ldr	r4, [r2, #0]
 800d716:	4621      	mov	r1, r4
 800d718:	b991      	cbnz	r1, 800d740 <_malloc_r+0x54>
 800d71a:	4c20      	ldr	r4, [pc, #128]	; (800d79c <_malloc_r+0xb0>)
 800d71c:	6823      	ldr	r3, [r4, #0]
 800d71e:	b91b      	cbnz	r3, 800d728 <_malloc_r+0x3c>
 800d720:	4630      	mov	r0, r6
 800d722:	f000 facf 	bl	800dcc4 <_sbrk_r>
 800d726:	6020      	str	r0, [r4, #0]
 800d728:	4629      	mov	r1, r5
 800d72a:	4630      	mov	r0, r6
 800d72c:	f000 faca 	bl	800dcc4 <_sbrk_r>
 800d730:	1c43      	adds	r3, r0, #1
 800d732:	d124      	bne.n	800d77e <_malloc_r+0x92>
 800d734:	230c      	movs	r3, #12
 800d736:	6033      	str	r3, [r6, #0]
 800d738:	4630      	mov	r0, r6
 800d73a:	f000 fba5 	bl	800de88 <__malloc_unlock>
 800d73e:	e7e4      	b.n	800d70a <_malloc_r+0x1e>
 800d740:	680b      	ldr	r3, [r1, #0]
 800d742:	1b5b      	subs	r3, r3, r5
 800d744:	d418      	bmi.n	800d778 <_malloc_r+0x8c>
 800d746:	2b0b      	cmp	r3, #11
 800d748:	d90f      	bls.n	800d76a <_malloc_r+0x7e>
 800d74a:	600b      	str	r3, [r1, #0]
 800d74c:	50cd      	str	r5, [r1, r3]
 800d74e:	18cc      	adds	r4, r1, r3
 800d750:	4630      	mov	r0, r6
 800d752:	f000 fb99 	bl	800de88 <__malloc_unlock>
 800d756:	f104 000b 	add.w	r0, r4, #11
 800d75a:	1d23      	adds	r3, r4, #4
 800d75c:	f020 0007 	bic.w	r0, r0, #7
 800d760:	1ac3      	subs	r3, r0, r3
 800d762:	d0d3      	beq.n	800d70c <_malloc_r+0x20>
 800d764:	425a      	negs	r2, r3
 800d766:	50e2      	str	r2, [r4, r3]
 800d768:	e7d0      	b.n	800d70c <_malloc_r+0x20>
 800d76a:	428c      	cmp	r4, r1
 800d76c:	684b      	ldr	r3, [r1, #4]
 800d76e:	bf16      	itet	ne
 800d770:	6063      	strne	r3, [r4, #4]
 800d772:	6013      	streq	r3, [r2, #0]
 800d774:	460c      	movne	r4, r1
 800d776:	e7eb      	b.n	800d750 <_malloc_r+0x64>
 800d778:	460c      	mov	r4, r1
 800d77a:	6849      	ldr	r1, [r1, #4]
 800d77c:	e7cc      	b.n	800d718 <_malloc_r+0x2c>
 800d77e:	1cc4      	adds	r4, r0, #3
 800d780:	f024 0403 	bic.w	r4, r4, #3
 800d784:	42a0      	cmp	r0, r4
 800d786:	d005      	beq.n	800d794 <_malloc_r+0xa8>
 800d788:	1a21      	subs	r1, r4, r0
 800d78a:	4630      	mov	r0, r6
 800d78c:	f000 fa9a 	bl	800dcc4 <_sbrk_r>
 800d790:	3001      	adds	r0, #1
 800d792:	d0cf      	beq.n	800d734 <_malloc_r+0x48>
 800d794:	6025      	str	r5, [r4, #0]
 800d796:	e7db      	b.n	800d750 <_malloc_r+0x64>
 800d798:	2000431c 	.word	0x2000431c
 800d79c:	20004320 	.word	0x20004320

0800d7a0 <__ssputs_r>:
 800d7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7a4:	688e      	ldr	r6, [r1, #8]
 800d7a6:	429e      	cmp	r6, r3
 800d7a8:	4682      	mov	sl, r0
 800d7aa:	460c      	mov	r4, r1
 800d7ac:	4690      	mov	r8, r2
 800d7ae:	4699      	mov	r9, r3
 800d7b0:	d837      	bhi.n	800d822 <__ssputs_r+0x82>
 800d7b2:	898a      	ldrh	r2, [r1, #12]
 800d7b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d7b8:	d031      	beq.n	800d81e <__ssputs_r+0x7e>
 800d7ba:	6825      	ldr	r5, [r4, #0]
 800d7bc:	6909      	ldr	r1, [r1, #16]
 800d7be:	1a6f      	subs	r7, r5, r1
 800d7c0:	6965      	ldr	r5, [r4, #20]
 800d7c2:	2302      	movs	r3, #2
 800d7c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7c8:	fb95 f5f3 	sdiv	r5, r5, r3
 800d7cc:	f109 0301 	add.w	r3, r9, #1
 800d7d0:	443b      	add	r3, r7
 800d7d2:	429d      	cmp	r5, r3
 800d7d4:	bf38      	it	cc
 800d7d6:	461d      	movcc	r5, r3
 800d7d8:	0553      	lsls	r3, r2, #21
 800d7da:	d530      	bpl.n	800d83e <__ssputs_r+0x9e>
 800d7dc:	4629      	mov	r1, r5
 800d7de:	f7ff ff85 	bl	800d6ec <_malloc_r>
 800d7e2:	4606      	mov	r6, r0
 800d7e4:	b950      	cbnz	r0, 800d7fc <__ssputs_r+0x5c>
 800d7e6:	230c      	movs	r3, #12
 800d7e8:	f8ca 3000 	str.w	r3, [sl]
 800d7ec:	89a3      	ldrh	r3, [r4, #12]
 800d7ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7f2:	81a3      	strh	r3, [r4, #12]
 800d7f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7fc:	463a      	mov	r2, r7
 800d7fe:	6921      	ldr	r1, [r4, #16]
 800d800:	f7fc f93e 	bl	8009a80 <memcpy>
 800d804:	89a3      	ldrh	r3, [r4, #12]
 800d806:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d80a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d80e:	81a3      	strh	r3, [r4, #12]
 800d810:	6126      	str	r6, [r4, #16]
 800d812:	6165      	str	r5, [r4, #20]
 800d814:	443e      	add	r6, r7
 800d816:	1bed      	subs	r5, r5, r7
 800d818:	6026      	str	r6, [r4, #0]
 800d81a:	60a5      	str	r5, [r4, #8]
 800d81c:	464e      	mov	r6, r9
 800d81e:	454e      	cmp	r6, r9
 800d820:	d900      	bls.n	800d824 <__ssputs_r+0x84>
 800d822:	464e      	mov	r6, r9
 800d824:	4632      	mov	r2, r6
 800d826:	4641      	mov	r1, r8
 800d828:	6820      	ldr	r0, [r4, #0]
 800d82a:	f000 fb13 	bl	800de54 <memmove>
 800d82e:	68a3      	ldr	r3, [r4, #8]
 800d830:	1b9b      	subs	r3, r3, r6
 800d832:	60a3      	str	r3, [r4, #8]
 800d834:	6823      	ldr	r3, [r4, #0]
 800d836:	441e      	add	r6, r3
 800d838:	6026      	str	r6, [r4, #0]
 800d83a:	2000      	movs	r0, #0
 800d83c:	e7dc      	b.n	800d7f8 <__ssputs_r+0x58>
 800d83e:	462a      	mov	r2, r5
 800d840:	f000 fb23 	bl	800de8a <_realloc_r>
 800d844:	4606      	mov	r6, r0
 800d846:	2800      	cmp	r0, #0
 800d848:	d1e2      	bne.n	800d810 <__ssputs_r+0x70>
 800d84a:	6921      	ldr	r1, [r4, #16]
 800d84c:	4650      	mov	r0, sl
 800d84e:	f7ff feff 	bl	800d650 <_free_r>
 800d852:	e7c8      	b.n	800d7e6 <__ssputs_r+0x46>

0800d854 <_svfiprintf_r>:
 800d854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d858:	461d      	mov	r5, r3
 800d85a:	898b      	ldrh	r3, [r1, #12]
 800d85c:	061f      	lsls	r7, r3, #24
 800d85e:	b09d      	sub	sp, #116	; 0x74
 800d860:	4680      	mov	r8, r0
 800d862:	460c      	mov	r4, r1
 800d864:	4616      	mov	r6, r2
 800d866:	d50f      	bpl.n	800d888 <_svfiprintf_r+0x34>
 800d868:	690b      	ldr	r3, [r1, #16]
 800d86a:	b96b      	cbnz	r3, 800d888 <_svfiprintf_r+0x34>
 800d86c:	2140      	movs	r1, #64	; 0x40
 800d86e:	f7ff ff3d 	bl	800d6ec <_malloc_r>
 800d872:	6020      	str	r0, [r4, #0]
 800d874:	6120      	str	r0, [r4, #16]
 800d876:	b928      	cbnz	r0, 800d884 <_svfiprintf_r+0x30>
 800d878:	230c      	movs	r3, #12
 800d87a:	f8c8 3000 	str.w	r3, [r8]
 800d87e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d882:	e0c8      	b.n	800da16 <_svfiprintf_r+0x1c2>
 800d884:	2340      	movs	r3, #64	; 0x40
 800d886:	6163      	str	r3, [r4, #20]
 800d888:	2300      	movs	r3, #0
 800d88a:	9309      	str	r3, [sp, #36]	; 0x24
 800d88c:	2320      	movs	r3, #32
 800d88e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d892:	2330      	movs	r3, #48	; 0x30
 800d894:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d898:	9503      	str	r5, [sp, #12]
 800d89a:	f04f 0b01 	mov.w	fp, #1
 800d89e:	4637      	mov	r7, r6
 800d8a0:	463d      	mov	r5, r7
 800d8a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d8a6:	b10b      	cbz	r3, 800d8ac <_svfiprintf_r+0x58>
 800d8a8:	2b25      	cmp	r3, #37	; 0x25
 800d8aa:	d13e      	bne.n	800d92a <_svfiprintf_r+0xd6>
 800d8ac:	ebb7 0a06 	subs.w	sl, r7, r6
 800d8b0:	d00b      	beq.n	800d8ca <_svfiprintf_r+0x76>
 800d8b2:	4653      	mov	r3, sl
 800d8b4:	4632      	mov	r2, r6
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	4640      	mov	r0, r8
 800d8ba:	f7ff ff71 	bl	800d7a0 <__ssputs_r>
 800d8be:	3001      	adds	r0, #1
 800d8c0:	f000 80a4 	beq.w	800da0c <_svfiprintf_r+0x1b8>
 800d8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8c6:	4453      	add	r3, sl
 800d8c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d8ca:	783b      	ldrb	r3, [r7, #0]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	f000 809d 	beq.w	800da0c <_svfiprintf_r+0x1b8>
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d8d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8dc:	9304      	str	r3, [sp, #16]
 800d8de:	9307      	str	r3, [sp, #28]
 800d8e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8e4:	931a      	str	r3, [sp, #104]	; 0x68
 800d8e6:	462f      	mov	r7, r5
 800d8e8:	2205      	movs	r2, #5
 800d8ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d8ee:	4850      	ldr	r0, [pc, #320]	; (800da30 <_svfiprintf_r+0x1dc>)
 800d8f0:	f7f2 fc7e 	bl	80001f0 <memchr>
 800d8f4:	9b04      	ldr	r3, [sp, #16]
 800d8f6:	b9d0      	cbnz	r0, 800d92e <_svfiprintf_r+0xda>
 800d8f8:	06d9      	lsls	r1, r3, #27
 800d8fa:	bf44      	itt	mi
 800d8fc:	2220      	movmi	r2, #32
 800d8fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d902:	071a      	lsls	r2, r3, #28
 800d904:	bf44      	itt	mi
 800d906:	222b      	movmi	r2, #43	; 0x2b
 800d908:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d90c:	782a      	ldrb	r2, [r5, #0]
 800d90e:	2a2a      	cmp	r2, #42	; 0x2a
 800d910:	d015      	beq.n	800d93e <_svfiprintf_r+0xea>
 800d912:	9a07      	ldr	r2, [sp, #28]
 800d914:	462f      	mov	r7, r5
 800d916:	2000      	movs	r0, #0
 800d918:	250a      	movs	r5, #10
 800d91a:	4639      	mov	r1, r7
 800d91c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d920:	3b30      	subs	r3, #48	; 0x30
 800d922:	2b09      	cmp	r3, #9
 800d924:	d94d      	bls.n	800d9c2 <_svfiprintf_r+0x16e>
 800d926:	b1b8      	cbz	r0, 800d958 <_svfiprintf_r+0x104>
 800d928:	e00f      	b.n	800d94a <_svfiprintf_r+0xf6>
 800d92a:	462f      	mov	r7, r5
 800d92c:	e7b8      	b.n	800d8a0 <_svfiprintf_r+0x4c>
 800d92e:	4a40      	ldr	r2, [pc, #256]	; (800da30 <_svfiprintf_r+0x1dc>)
 800d930:	1a80      	subs	r0, r0, r2
 800d932:	fa0b f000 	lsl.w	r0, fp, r0
 800d936:	4318      	orrs	r0, r3
 800d938:	9004      	str	r0, [sp, #16]
 800d93a:	463d      	mov	r5, r7
 800d93c:	e7d3      	b.n	800d8e6 <_svfiprintf_r+0x92>
 800d93e:	9a03      	ldr	r2, [sp, #12]
 800d940:	1d11      	adds	r1, r2, #4
 800d942:	6812      	ldr	r2, [r2, #0]
 800d944:	9103      	str	r1, [sp, #12]
 800d946:	2a00      	cmp	r2, #0
 800d948:	db01      	blt.n	800d94e <_svfiprintf_r+0xfa>
 800d94a:	9207      	str	r2, [sp, #28]
 800d94c:	e004      	b.n	800d958 <_svfiprintf_r+0x104>
 800d94e:	4252      	negs	r2, r2
 800d950:	f043 0302 	orr.w	r3, r3, #2
 800d954:	9207      	str	r2, [sp, #28]
 800d956:	9304      	str	r3, [sp, #16]
 800d958:	783b      	ldrb	r3, [r7, #0]
 800d95a:	2b2e      	cmp	r3, #46	; 0x2e
 800d95c:	d10c      	bne.n	800d978 <_svfiprintf_r+0x124>
 800d95e:	787b      	ldrb	r3, [r7, #1]
 800d960:	2b2a      	cmp	r3, #42	; 0x2a
 800d962:	d133      	bne.n	800d9cc <_svfiprintf_r+0x178>
 800d964:	9b03      	ldr	r3, [sp, #12]
 800d966:	1d1a      	adds	r2, r3, #4
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	9203      	str	r2, [sp, #12]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	bfb8      	it	lt
 800d970:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d974:	3702      	adds	r7, #2
 800d976:	9305      	str	r3, [sp, #20]
 800d978:	4d2e      	ldr	r5, [pc, #184]	; (800da34 <_svfiprintf_r+0x1e0>)
 800d97a:	7839      	ldrb	r1, [r7, #0]
 800d97c:	2203      	movs	r2, #3
 800d97e:	4628      	mov	r0, r5
 800d980:	f7f2 fc36 	bl	80001f0 <memchr>
 800d984:	b138      	cbz	r0, 800d996 <_svfiprintf_r+0x142>
 800d986:	2340      	movs	r3, #64	; 0x40
 800d988:	1b40      	subs	r0, r0, r5
 800d98a:	fa03 f000 	lsl.w	r0, r3, r0
 800d98e:	9b04      	ldr	r3, [sp, #16]
 800d990:	4303      	orrs	r3, r0
 800d992:	3701      	adds	r7, #1
 800d994:	9304      	str	r3, [sp, #16]
 800d996:	7839      	ldrb	r1, [r7, #0]
 800d998:	4827      	ldr	r0, [pc, #156]	; (800da38 <_svfiprintf_r+0x1e4>)
 800d99a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d99e:	2206      	movs	r2, #6
 800d9a0:	1c7e      	adds	r6, r7, #1
 800d9a2:	f7f2 fc25 	bl	80001f0 <memchr>
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	d038      	beq.n	800da1c <_svfiprintf_r+0x1c8>
 800d9aa:	4b24      	ldr	r3, [pc, #144]	; (800da3c <_svfiprintf_r+0x1e8>)
 800d9ac:	bb13      	cbnz	r3, 800d9f4 <_svfiprintf_r+0x1a0>
 800d9ae:	9b03      	ldr	r3, [sp, #12]
 800d9b0:	3307      	adds	r3, #7
 800d9b2:	f023 0307 	bic.w	r3, r3, #7
 800d9b6:	3308      	adds	r3, #8
 800d9b8:	9303      	str	r3, [sp, #12]
 800d9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9bc:	444b      	add	r3, r9
 800d9be:	9309      	str	r3, [sp, #36]	; 0x24
 800d9c0:	e76d      	b.n	800d89e <_svfiprintf_r+0x4a>
 800d9c2:	fb05 3202 	mla	r2, r5, r2, r3
 800d9c6:	2001      	movs	r0, #1
 800d9c8:	460f      	mov	r7, r1
 800d9ca:	e7a6      	b.n	800d91a <_svfiprintf_r+0xc6>
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	3701      	adds	r7, #1
 800d9d0:	9305      	str	r3, [sp, #20]
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	250a      	movs	r5, #10
 800d9d6:	4638      	mov	r0, r7
 800d9d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9dc:	3a30      	subs	r2, #48	; 0x30
 800d9de:	2a09      	cmp	r2, #9
 800d9e0:	d903      	bls.n	800d9ea <_svfiprintf_r+0x196>
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d0c8      	beq.n	800d978 <_svfiprintf_r+0x124>
 800d9e6:	9105      	str	r1, [sp, #20]
 800d9e8:	e7c6      	b.n	800d978 <_svfiprintf_r+0x124>
 800d9ea:	fb05 2101 	mla	r1, r5, r1, r2
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	4607      	mov	r7, r0
 800d9f2:	e7f0      	b.n	800d9d6 <_svfiprintf_r+0x182>
 800d9f4:	ab03      	add	r3, sp, #12
 800d9f6:	9300      	str	r3, [sp, #0]
 800d9f8:	4622      	mov	r2, r4
 800d9fa:	4b11      	ldr	r3, [pc, #68]	; (800da40 <_svfiprintf_r+0x1ec>)
 800d9fc:	a904      	add	r1, sp, #16
 800d9fe:	4640      	mov	r0, r8
 800da00:	f7fc f8e6 	bl	8009bd0 <_printf_float>
 800da04:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800da08:	4681      	mov	r9, r0
 800da0a:	d1d6      	bne.n	800d9ba <_svfiprintf_r+0x166>
 800da0c:	89a3      	ldrh	r3, [r4, #12]
 800da0e:	065b      	lsls	r3, r3, #25
 800da10:	f53f af35 	bmi.w	800d87e <_svfiprintf_r+0x2a>
 800da14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da16:	b01d      	add	sp, #116	; 0x74
 800da18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da1c:	ab03      	add	r3, sp, #12
 800da1e:	9300      	str	r3, [sp, #0]
 800da20:	4622      	mov	r2, r4
 800da22:	4b07      	ldr	r3, [pc, #28]	; (800da40 <_svfiprintf_r+0x1ec>)
 800da24:	a904      	add	r1, sp, #16
 800da26:	4640      	mov	r0, r8
 800da28:	f7fc fb88 	bl	800a13c <_printf_i>
 800da2c:	e7ea      	b.n	800da04 <_svfiprintf_r+0x1b0>
 800da2e:	bf00      	nop
 800da30:	0800e8fc 	.word	0x0800e8fc
 800da34:	0800e902 	.word	0x0800e902
 800da38:	0800e906 	.word	0x0800e906
 800da3c:	08009bd1 	.word	0x08009bd1
 800da40:	0800d7a1 	.word	0x0800d7a1

0800da44 <__sfputc_r>:
 800da44:	6893      	ldr	r3, [r2, #8]
 800da46:	3b01      	subs	r3, #1
 800da48:	2b00      	cmp	r3, #0
 800da4a:	b410      	push	{r4}
 800da4c:	6093      	str	r3, [r2, #8]
 800da4e:	da08      	bge.n	800da62 <__sfputc_r+0x1e>
 800da50:	6994      	ldr	r4, [r2, #24]
 800da52:	42a3      	cmp	r3, r4
 800da54:	db01      	blt.n	800da5a <__sfputc_r+0x16>
 800da56:	290a      	cmp	r1, #10
 800da58:	d103      	bne.n	800da62 <__sfputc_r+0x1e>
 800da5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da5e:	f7fd bdb1 	b.w	800b5c4 <__swbuf_r>
 800da62:	6813      	ldr	r3, [r2, #0]
 800da64:	1c58      	adds	r0, r3, #1
 800da66:	6010      	str	r0, [r2, #0]
 800da68:	7019      	strb	r1, [r3, #0]
 800da6a:	4608      	mov	r0, r1
 800da6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da70:	4770      	bx	lr

0800da72 <__sfputs_r>:
 800da72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da74:	4606      	mov	r6, r0
 800da76:	460f      	mov	r7, r1
 800da78:	4614      	mov	r4, r2
 800da7a:	18d5      	adds	r5, r2, r3
 800da7c:	42ac      	cmp	r4, r5
 800da7e:	d101      	bne.n	800da84 <__sfputs_r+0x12>
 800da80:	2000      	movs	r0, #0
 800da82:	e007      	b.n	800da94 <__sfputs_r+0x22>
 800da84:	463a      	mov	r2, r7
 800da86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da8a:	4630      	mov	r0, r6
 800da8c:	f7ff ffda 	bl	800da44 <__sfputc_r>
 800da90:	1c43      	adds	r3, r0, #1
 800da92:	d1f3      	bne.n	800da7c <__sfputs_r+0xa>
 800da94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da98 <_vfiprintf_r>:
 800da98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da9c:	460c      	mov	r4, r1
 800da9e:	b09d      	sub	sp, #116	; 0x74
 800daa0:	4617      	mov	r7, r2
 800daa2:	461d      	mov	r5, r3
 800daa4:	4606      	mov	r6, r0
 800daa6:	b118      	cbz	r0, 800dab0 <_vfiprintf_r+0x18>
 800daa8:	6983      	ldr	r3, [r0, #24]
 800daaa:	b90b      	cbnz	r3, 800dab0 <_vfiprintf_r+0x18>
 800daac:	f7fe fd80 	bl	800c5b0 <__sinit>
 800dab0:	4b7c      	ldr	r3, [pc, #496]	; (800dca4 <_vfiprintf_r+0x20c>)
 800dab2:	429c      	cmp	r4, r3
 800dab4:	d158      	bne.n	800db68 <_vfiprintf_r+0xd0>
 800dab6:	6874      	ldr	r4, [r6, #4]
 800dab8:	89a3      	ldrh	r3, [r4, #12]
 800daba:	0718      	lsls	r0, r3, #28
 800dabc:	d55e      	bpl.n	800db7c <_vfiprintf_r+0xe4>
 800dabe:	6923      	ldr	r3, [r4, #16]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d05b      	beq.n	800db7c <_vfiprintf_r+0xe4>
 800dac4:	2300      	movs	r3, #0
 800dac6:	9309      	str	r3, [sp, #36]	; 0x24
 800dac8:	2320      	movs	r3, #32
 800daca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dace:	2330      	movs	r3, #48	; 0x30
 800dad0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dad4:	9503      	str	r5, [sp, #12]
 800dad6:	f04f 0b01 	mov.w	fp, #1
 800dada:	46b8      	mov	r8, r7
 800dadc:	4645      	mov	r5, r8
 800dade:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dae2:	b10b      	cbz	r3, 800dae8 <_vfiprintf_r+0x50>
 800dae4:	2b25      	cmp	r3, #37	; 0x25
 800dae6:	d154      	bne.n	800db92 <_vfiprintf_r+0xfa>
 800dae8:	ebb8 0a07 	subs.w	sl, r8, r7
 800daec:	d00b      	beq.n	800db06 <_vfiprintf_r+0x6e>
 800daee:	4653      	mov	r3, sl
 800daf0:	463a      	mov	r2, r7
 800daf2:	4621      	mov	r1, r4
 800daf4:	4630      	mov	r0, r6
 800daf6:	f7ff ffbc 	bl	800da72 <__sfputs_r>
 800dafa:	3001      	adds	r0, #1
 800dafc:	f000 80c2 	beq.w	800dc84 <_vfiprintf_r+0x1ec>
 800db00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db02:	4453      	add	r3, sl
 800db04:	9309      	str	r3, [sp, #36]	; 0x24
 800db06:	f898 3000 	ldrb.w	r3, [r8]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	f000 80ba 	beq.w	800dc84 <_vfiprintf_r+0x1ec>
 800db10:	2300      	movs	r3, #0
 800db12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db1a:	9304      	str	r3, [sp, #16]
 800db1c:	9307      	str	r3, [sp, #28]
 800db1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db22:	931a      	str	r3, [sp, #104]	; 0x68
 800db24:	46a8      	mov	r8, r5
 800db26:	2205      	movs	r2, #5
 800db28:	f818 1b01 	ldrb.w	r1, [r8], #1
 800db2c:	485e      	ldr	r0, [pc, #376]	; (800dca8 <_vfiprintf_r+0x210>)
 800db2e:	f7f2 fb5f 	bl	80001f0 <memchr>
 800db32:	9b04      	ldr	r3, [sp, #16]
 800db34:	bb78      	cbnz	r0, 800db96 <_vfiprintf_r+0xfe>
 800db36:	06d9      	lsls	r1, r3, #27
 800db38:	bf44      	itt	mi
 800db3a:	2220      	movmi	r2, #32
 800db3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800db40:	071a      	lsls	r2, r3, #28
 800db42:	bf44      	itt	mi
 800db44:	222b      	movmi	r2, #43	; 0x2b
 800db46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800db4a:	782a      	ldrb	r2, [r5, #0]
 800db4c:	2a2a      	cmp	r2, #42	; 0x2a
 800db4e:	d02a      	beq.n	800dba6 <_vfiprintf_r+0x10e>
 800db50:	9a07      	ldr	r2, [sp, #28]
 800db52:	46a8      	mov	r8, r5
 800db54:	2000      	movs	r0, #0
 800db56:	250a      	movs	r5, #10
 800db58:	4641      	mov	r1, r8
 800db5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db5e:	3b30      	subs	r3, #48	; 0x30
 800db60:	2b09      	cmp	r3, #9
 800db62:	d969      	bls.n	800dc38 <_vfiprintf_r+0x1a0>
 800db64:	b360      	cbz	r0, 800dbc0 <_vfiprintf_r+0x128>
 800db66:	e024      	b.n	800dbb2 <_vfiprintf_r+0x11a>
 800db68:	4b50      	ldr	r3, [pc, #320]	; (800dcac <_vfiprintf_r+0x214>)
 800db6a:	429c      	cmp	r4, r3
 800db6c:	d101      	bne.n	800db72 <_vfiprintf_r+0xda>
 800db6e:	68b4      	ldr	r4, [r6, #8]
 800db70:	e7a2      	b.n	800dab8 <_vfiprintf_r+0x20>
 800db72:	4b4f      	ldr	r3, [pc, #316]	; (800dcb0 <_vfiprintf_r+0x218>)
 800db74:	429c      	cmp	r4, r3
 800db76:	bf08      	it	eq
 800db78:	68f4      	ldreq	r4, [r6, #12]
 800db7a:	e79d      	b.n	800dab8 <_vfiprintf_r+0x20>
 800db7c:	4621      	mov	r1, r4
 800db7e:	4630      	mov	r0, r6
 800db80:	f7fd fd72 	bl	800b668 <__swsetup_r>
 800db84:	2800      	cmp	r0, #0
 800db86:	d09d      	beq.n	800dac4 <_vfiprintf_r+0x2c>
 800db88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db8c:	b01d      	add	sp, #116	; 0x74
 800db8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db92:	46a8      	mov	r8, r5
 800db94:	e7a2      	b.n	800dadc <_vfiprintf_r+0x44>
 800db96:	4a44      	ldr	r2, [pc, #272]	; (800dca8 <_vfiprintf_r+0x210>)
 800db98:	1a80      	subs	r0, r0, r2
 800db9a:	fa0b f000 	lsl.w	r0, fp, r0
 800db9e:	4318      	orrs	r0, r3
 800dba0:	9004      	str	r0, [sp, #16]
 800dba2:	4645      	mov	r5, r8
 800dba4:	e7be      	b.n	800db24 <_vfiprintf_r+0x8c>
 800dba6:	9a03      	ldr	r2, [sp, #12]
 800dba8:	1d11      	adds	r1, r2, #4
 800dbaa:	6812      	ldr	r2, [r2, #0]
 800dbac:	9103      	str	r1, [sp, #12]
 800dbae:	2a00      	cmp	r2, #0
 800dbb0:	db01      	blt.n	800dbb6 <_vfiprintf_r+0x11e>
 800dbb2:	9207      	str	r2, [sp, #28]
 800dbb4:	e004      	b.n	800dbc0 <_vfiprintf_r+0x128>
 800dbb6:	4252      	negs	r2, r2
 800dbb8:	f043 0302 	orr.w	r3, r3, #2
 800dbbc:	9207      	str	r2, [sp, #28]
 800dbbe:	9304      	str	r3, [sp, #16]
 800dbc0:	f898 3000 	ldrb.w	r3, [r8]
 800dbc4:	2b2e      	cmp	r3, #46	; 0x2e
 800dbc6:	d10e      	bne.n	800dbe6 <_vfiprintf_r+0x14e>
 800dbc8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dbcc:	2b2a      	cmp	r3, #42	; 0x2a
 800dbce:	d138      	bne.n	800dc42 <_vfiprintf_r+0x1aa>
 800dbd0:	9b03      	ldr	r3, [sp, #12]
 800dbd2:	1d1a      	adds	r2, r3, #4
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	9203      	str	r2, [sp, #12]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	bfb8      	it	lt
 800dbdc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dbe0:	f108 0802 	add.w	r8, r8, #2
 800dbe4:	9305      	str	r3, [sp, #20]
 800dbe6:	4d33      	ldr	r5, [pc, #204]	; (800dcb4 <_vfiprintf_r+0x21c>)
 800dbe8:	f898 1000 	ldrb.w	r1, [r8]
 800dbec:	2203      	movs	r2, #3
 800dbee:	4628      	mov	r0, r5
 800dbf0:	f7f2 fafe 	bl	80001f0 <memchr>
 800dbf4:	b140      	cbz	r0, 800dc08 <_vfiprintf_r+0x170>
 800dbf6:	2340      	movs	r3, #64	; 0x40
 800dbf8:	1b40      	subs	r0, r0, r5
 800dbfa:	fa03 f000 	lsl.w	r0, r3, r0
 800dbfe:	9b04      	ldr	r3, [sp, #16]
 800dc00:	4303      	orrs	r3, r0
 800dc02:	f108 0801 	add.w	r8, r8, #1
 800dc06:	9304      	str	r3, [sp, #16]
 800dc08:	f898 1000 	ldrb.w	r1, [r8]
 800dc0c:	482a      	ldr	r0, [pc, #168]	; (800dcb8 <_vfiprintf_r+0x220>)
 800dc0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc12:	2206      	movs	r2, #6
 800dc14:	f108 0701 	add.w	r7, r8, #1
 800dc18:	f7f2 faea 	bl	80001f0 <memchr>
 800dc1c:	2800      	cmp	r0, #0
 800dc1e:	d037      	beq.n	800dc90 <_vfiprintf_r+0x1f8>
 800dc20:	4b26      	ldr	r3, [pc, #152]	; (800dcbc <_vfiprintf_r+0x224>)
 800dc22:	bb1b      	cbnz	r3, 800dc6c <_vfiprintf_r+0x1d4>
 800dc24:	9b03      	ldr	r3, [sp, #12]
 800dc26:	3307      	adds	r3, #7
 800dc28:	f023 0307 	bic.w	r3, r3, #7
 800dc2c:	3308      	adds	r3, #8
 800dc2e:	9303      	str	r3, [sp, #12]
 800dc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc32:	444b      	add	r3, r9
 800dc34:	9309      	str	r3, [sp, #36]	; 0x24
 800dc36:	e750      	b.n	800dada <_vfiprintf_r+0x42>
 800dc38:	fb05 3202 	mla	r2, r5, r2, r3
 800dc3c:	2001      	movs	r0, #1
 800dc3e:	4688      	mov	r8, r1
 800dc40:	e78a      	b.n	800db58 <_vfiprintf_r+0xc0>
 800dc42:	2300      	movs	r3, #0
 800dc44:	f108 0801 	add.w	r8, r8, #1
 800dc48:	9305      	str	r3, [sp, #20]
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	250a      	movs	r5, #10
 800dc4e:	4640      	mov	r0, r8
 800dc50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc54:	3a30      	subs	r2, #48	; 0x30
 800dc56:	2a09      	cmp	r2, #9
 800dc58:	d903      	bls.n	800dc62 <_vfiprintf_r+0x1ca>
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d0c3      	beq.n	800dbe6 <_vfiprintf_r+0x14e>
 800dc5e:	9105      	str	r1, [sp, #20]
 800dc60:	e7c1      	b.n	800dbe6 <_vfiprintf_r+0x14e>
 800dc62:	fb05 2101 	mla	r1, r5, r1, r2
 800dc66:	2301      	movs	r3, #1
 800dc68:	4680      	mov	r8, r0
 800dc6a:	e7f0      	b.n	800dc4e <_vfiprintf_r+0x1b6>
 800dc6c:	ab03      	add	r3, sp, #12
 800dc6e:	9300      	str	r3, [sp, #0]
 800dc70:	4622      	mov	r2, r4
 800dc72:	4b13      	ldr	r3, [pc, #76]	; (800dcc0 <_vfiprintf_r+0x228>)
 800dc74:	a904      	add	r1, sp, #16
 800dc76:	4630      	mov	r0, r6
 800dc78:	f7fb ffaa 	bl	8009bd0 <_printf_float>
 800dc7c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800dc80:	4681      	mov	r9, r0
 800dc82:	d1d5      	bne.n	800dc30 <_vfiprintf_r+0x198>
 800dc84:	89a3      	ldrh	r3, [r4, #12]
 800dc86:	065b      	lsls	r3, r3, #25
 800dc88:	f53f af7e 	bmi.w	800db88 <_vfiprintf_r+0xf0>
 800dc8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc8e:	e77d      	b.n	800db8c <_vfiprintf_r+0xf4>
 800dc90:	ab03      	add	r3, sp, #12
 800dc92:	9300      	str	r3, [sp, #0]
 800dc94:	4622      	mov	r2, r4
 800dc96:	4b0a      	ldr	r3, [pc, #40]	; (800dcc0 <_vfiprintf_r+0x228>)
 800dc98:	a904      	add	r1, sp, #16
 800dc9a:	4630      	mov	r0, r6
 800dc9c:	f7fc fa4e 	bl	800a13c <_printf_i>
 800dca0:	e7ec      	b.n	800dc7c <_vfiprintf_r+0x1e4>
 800dca2:	bf00      	nop
 800dca4:	0800e7b0 	.word	0x0800e7b0
 800dca8:	0800e8fc 	.word	0x0800e8fc
 800dcac:	0800e7d0 	.word	0x0800e7d0
 800dcb0:	0800e790 	.word	0x0800e790
 800dcb4:	0800e902 	.word	0x0800e902
 800dcb8:	0800e906 	.word	0x0800e906
 800dcbc:	08009bd1 	.word	0x08009bd1
 800dcc0:	0800da73 	.word	0x0800da73

0800dcc4 <_sbrk_r>:
 800dcc4:	b538      	push	{r3, r4, r5, lr}
 800dcc6:	4c06      	ldr	r4, [pc, #24]	; (800dce0 <_sbrk_r+0x1c>)
 800dcc8:	2300      	movs	r3, #0
 800dcca:	4605      	mov	r5, r0
 800dccc:	4608      	mov	r0, r1
 800dcce:	6023      	str	r3, [r4, #0]
 800dcd0:	f7fa f85a 	bl	8007d88 <_sbrk>
 800dcd4:	1c43      	adds	r3, r0, #1
 800dcd6:	d102      	bne.n	800dcde <_sbrk_r+0x1a>
 800dcd8:	6823      	ldr	r3, [r4, #0]
 800dcda:	b103      	cbz	r3, 800dcde <_sbrk_r+0x1a>
 800dcdc:	602b      	str	r3, [r5, #0]
 800dcde:	bd38      	pop	{r3, r4, r5, pc}
 800dce0:	20004688 	.word	0x20004688

0800dce4 <__sread>:
 800dce4:	b510      	push	{r4, lr}
 800dce6:	460c      	mov	r4, r1
 800dce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcec:	f000 f8f4 	bl	800ded8 <_read_r>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	bfab      	itete	ge
 800dcf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dcf6:	89a3      	ldrhlt	r3, [r4, #12]
 800dcf8:	181b      	addge	r3, r3, r0
 800dcfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dcfe:	bfac      	ite	ge
 800dd00:	6563      	strge	r3, [r4, #84]	; 0x54
 800dd02:	81a3      	strhlt	r3, [r4, #12]
 800dd04:	bd10      	pop	{r4, pc}

0800dd06 <__swrite>:
 800dd06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd0a:	461f      	mov	r7, r3
 800dd0c:	898b      	ldrh	r3, [r1, #12]
 800dd0e:	05db      	lsls	r3, r3, #23
 800dd10:	4605      	mov	r5, r0
 800dd12:	460c      	mov	r4, r1
 800dd14:	4616      	mov	r6, r2
 800dd16:	d505      	bpl.n	800dd24 <__swrite+0x1e>
 800dd18:	2302      	movs	r3, #2
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd20:	f000 f886 	bl	800de30 <_lseek_r>
 800dd24:	89a3      	ldrh	r3, [r4, #12]
 800dd26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd2e:	81a3      	strh	r3, [r4, #12]
 800dd30:	4632      	mov	r2, r6
 800dd32:	463b      	mov	r3, r7
 800dd34:	4628      	mov	r0, r5
 800dd36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd3a:	f000 b835 	b.w	800dda8 <_write_r>

0800dd3e <__sseek>:
 800dd3e:	b510      	push	{r4, lr}
 800dd40:	460c      	mov	r4, r1
 800dd42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd46:	f000 f873 	bl	800de30 <_lseek_r>
 800dd4a:	1c43      	adds	r3, r0, #1
 800dd4c:	89a3      	ldrh	r3, [r4, #12]
 800dd4e:	bf15      	itete	ne
 800dd50:	6560      	strne	r0, [r4, #84]	; 0x54
 800dd52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dd56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dd5a:	81a3      	strheq	r3, [r4, #12]
 800dd5c:	bf18      	it	ne
 800dd5e:	81a3      	strhne	r3, [r4, #12]
 800dd60:	bd10      	pop	{r4, pc}

0800dd62 <__sclose>:
 800dd62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd66:	f000 b831 	b.w	800ddcc <_close_r>

0800dd6a <strncmp>:
 800dd6a:	b510      	push	{r4, lr}
 800dd6c:	b16a      	cbz	r2, 800dd8a <strncmp+0x20>
 800dd6e:	3901      	subs	r1, #1
 800dd70:	1884      	adds	r4, r0, r2
 800dd72:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dd76:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d103      	bne.n	800dd86 <strncmp+0x1c>
 800dd7e:	42a0      	cmp	r0, r4
 800dd80:	d001      	beq.n	800dd86 <strncmp+0x1c>
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d1f5      	bne.n	800dd72 <strncmp+0x8>
 800dd86:	1a98      	subs	r0, r3, r2
 800dd88:	bd10      	pop	{r4, pc}
 800dd8a:	4610      	mov	r0, r2
 800dd8c:	e7fc      	b.n	800dd88 <strncmp+0x1e>

0800dd8e <__ascii_wctomb>:
 800dd8e:	b149      	cbz	r1, 800dda4 <__ascii_wctomb+0x16>
 800dd90:	2aff      	cmp	r2, #255	; 0xff
 800dd92:	bf85      	ittet	hi
 800dd94:	238a      	movhi	r3, #138	; 0x8a
 800dd96:	6003      	strhi	r3, [r0, #0]
 800dd98:	700a      	strbls	r2, [r1, #0]
 800dd9a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800dd9e:	bf98      	it	ls
 800dda0:	2001      	movls	r0, #1
 800dda2:	4770      	bx	lr
 800dda4:	4608      	mov	r0, r1
 800dda6:	4770      	bx	lr

0800dda8 <_write_r>:
 800dda8:	b538      	push	{r3, r4, r5, lr}
 800ddaa:	4c07      	ldr	r4, [pc, #28]	; (800ddc8 <_write_r+0x20>)
 800ddac:	4605      	mov	r5, r0
 800ddae:	4608      	mov	r0, r1
 800ddb0:	4611      	mov	r1, r2
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	6022      	str	r2, [r4, #0]
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	f7f9 fb56 	bl	8007468 <_write>
 800ddbc:	1c43      	adds	r3, r0, #1
 800ddbe:	d102      	bne.n	800ddc6 <_write_r+0x1e>
 800ddc0:	6823      	ldr	r3, [r4, #0]
 800ddc2:	b103      	cbz	r3, 800ddc6 <_write_r+0x1e>
 800ddc4:	602b      	str	r3, [r5, #0]
 800ddc6:	bd38      	pop	{r3, r4, r5, pc}
 800ddc8:	20004688 	.word	0x20004688

0800ddcc <_close_r>:
 800ddcc:	b538      	push	{r3, r4, r5, lr}
 800ddce:	4c06      	ldr	r4, [pc, #24]	; (800dde8 <_close_r+0x1c>)
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	4605      	mov	r5, r0
 800ddd4:	4608      	mov	r0, r1
 800ddd6:	6023      	str	r3, [r4, #0]
 800ddd8:	f7f9 ffca 	bl	8007d70 <_close>
 800dddc:	1c43      	adds	r3, r0, #1
 800ddde:	d102      	bne.n	800dde6 <_close_r+0x1a>
 800dde0:	6823      	ldr	r3, [r4, #0]
 800dde2:	b103      	cbz	r3, 800dde6 <_close_r+0x1a>
 800dde4:	602b      	str	r3, [r5, #0]
 800dde6:	bd38      	pop	{r3, r4, r5, pc}
 800dde8:	20004688 	.word	0x20004688

0800ddec <_fstat_r>:
 800ddec:	b538      	push	{r3, r4, r5, lr}
 800ddee:	4c07      	ldr	r4, [pc, #28]	; (800de0c <_fstat_r+0x20>)
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	4605      	mov	r5, r0
 800ddf4:	4608      	mov	r0, r1
 800ddf6:	4611      	mov	r1, r2
 800ddf8:	6023      	str	r3, [r4, #0]
 800ddfa:	f7f9 ffbc 	bl	8007d76 <_fstat>
 800ddfe:	1c43      	adds	r3, r0, #1
 800de00:	d102      	bne.n	800de08 <_fstat_r+0x1c>
 800de02:	6823      	ldr	r3, [r4, #0]
 800de04:	b103      	cbz	r3, 800de08 <_fstat_r+0x1c>
 800de06:	602b      	str	r3, [r5, #0]
 800de08:	bd38      	pop	{r3, r4, r5, pc}
 800de0a:	bf00      	nop
 800de0c:	20004688 	.word	0x20004688

0800de10 <_isatty_r>:
 800de10:	b538      	push	{r3, r4, r5, lr}
 800de12:	4c06      	ldr	r4, [pc, #24]	; (800de2c <_isatty_r+0x1c>)
 800de14:	2300      	movs	r3, #0
 800de16:	4605      	mov	r5, r0
 800de18:	4608      	mov	r0, r1
 800de1a:	6023      	str	r3, [r4, #0]
 800de1c:	f7f9 ffb0 	bl	8007d80 <_isatty>
 800de20:	1c43      	adds	r3, r0, #1
 800de22:	d102      	bne.n	800de2a <_isatty_r+0x1a>
 800de24:	6823      	ldr	r3, [r4, #0]
 800de26:	b103      	cbz	r3, 800de2a <_isatty_r+0x1a>
 800de28:	602b      	str	r3, [r5, #0]
 800de2a:	bd38      	pop	{r3, r4, r5, pc}
 800de2c:	20004688 	.word	0x20004688

0800de30 <_lseek_r>:
 800de30:	b538      	push	{r3, r4, r5, lr}
 800de32:	4c07      	ldr	r4, [pc, #28]	; (800de50 <_lseek_r+0x20>)
 800de34:	4605      	mov	r5, r0
 800de36:	4608      	mov	r0, r1
 800de38:	4611      	mov	r1, r2
 800de3a:	2200      	movs	r2, #0
 800de3c:	6022      	str	r2, [r4, #0]
 800de3e:	461a      	mov	r2, r3
 800de40:	f7f9 ffa0 	bl	8007d84 <_lseek>
 800de44:	1c43      	adds	r3, r0, #1
 800de46:	d102      	bne.n	800de4e <_lseek_r+0x1e>
 800de48:	6823      	ldr	r3, [r4, #0]
 800de4a:	b103      	cbz	r3, 800de4e <_lseek_r+0x1e>
 800de4c:	602b      	str	r3, [r5, #0]
 800de4e:	bd38      	pop	{r3, r4, r5, pc}
 800de50:	20004688 	.word	0x20004688

0800de54 <memmove>:
 800de54:	4288      	cmp	r0, r1
 800de56:	b510      	push	{r4, lr}
 800de58:	eb01 0302 	add.w	r3, r1, r2
 800de5c:	d807      	bhi.n	800de6e <memmove+0x1a>
 800de5e:	1e42      	subs	r2, r0, #1
 800de60:	4299      	cmp	r1, r3
 800de62:	d00a      	beq.n	800de7a <memmove+0x26>
 800de64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de68:	f802 4f01 	strb.w	r4, [r2, #1]!
 800de6c:	e7f8      	b.n	800de60 <memmove+0xc>
 800de6e:	4283      	cmp	r3, r0
 800de70:	d9f5      	bls.n	800de5e <memmove+0xa>
 800de72:	1881      	adds	r1, r0, r2
 800de74:	1ad2      	subs	r2, r2, r3
 800de76:	42d3      	cmn	r3, r2
 800de78:	d100      	bne.n	800de7c <memmove+0x28>
 800de7a:	bd10      	pop	{r4, pc}
 800de7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de80:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800de84:	e7f7      	b.n	800de76 <memmove+0x22>

0800de86 <__malloc_lock>:
 800de86:	4770      	bx	lr

0800de88 <__malloc_unlock>:
 800de88:	4770      	bx	lr

0800de8a <_realloc_r>:
 800de8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de8c:	4607      	mov	r7, r0
 800de8e:	4614      	mov	r4, r2
 800de90:	460e      	mov	r6, r1
 800de92:	b921      	cbnz	r1, 800de9e <_realloc_r+0x14>
 800de94:	4611      	mov	r1, r2
 800de96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800de9a:	f7ff bc27 	b.w	800d6ec <_malloc_r>
 800de9e:	b922      	cbnz	r2, 800deaa <_realloc_r+0x20>
 800dea0:	f7ff fbd6 	bl	800d650 <_free_r>
 800dea4:	4625      	mov	r5, r4
 800dea6:	4628      	mov	r0, r5
 800dea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800deaa:	f000 f827 	bl	800defc <_malloc_usable_size_r>
 800deae:	42a0      	cmp	r0, r4
 800deb0:	d20f      	bcs.n	800ded2 <_realloc_r+0x48>
 800deb2:	4621      	mov	r1, r4
 800deb4:	4638      	mov	r0, r7
 800deb6:	f7ff fc19 	bl	800d6ec <_malloc_r>
 800deba:	4605      	mov	r5, r0
 800debc:	2800      	cmp	r0, #0
 800debe:	d0f2      	beq.n	800dea6 <_realloc_r+0x1c>
 800dec0:	4631      	mov	r1, r6
 800dec2:	4622      	mov	r2, r4
 800dec4:	f7fb fddc 	bl	8009a80 <memcpy>
 800dec8:	4631      	mov	r1, r6
 800deca:	4638      	mov	r0, r7
 800decc:	f7ff fbc0 	bl	800d650 <_free_r>
 800ded0:	e7e9      	b.n	800dea6 <_realloc_r+0x1c>
 800ded2:	4635      	mov	r5, r6
 800ded4:	e7e7      	b.n	800dea6 <_realloc_r+0x1c>
	...

0800ded8 <_read_r>:
 800ded8:	b538      	push	{r3, r4, r5, lr}
 800deda:	4c07      	ldr	r4, [pc, #28]	; (800def8 <_read_r+0x20>)
 800dedc:	4605      	mov	r5, r0
 800dede:	4608      	mov	r0, r1
 800dee0:	4611      	mov	r1, r2
 800dee2:	2200      	movs	r2, #0
 800dee4:	6022      	str	r2, [r4, #0]
 800dee6:	461a      	mov	r2, r3
 800dee8:	f7f9 ff34 	bl	8007d54 <_read>
 800deec:	1c43      	adds	r3, r0, #1
 800deee:	d102      	bne.n	800def6 <_read_r+0x1e>
 800def0:	6823      	ldr	r3, [r4, #0]
 800def2:	b103      	cbz	r3, 800def6 <_read_r+0x1e>
 800def4:	602b      	str	r3, [r5, #0]
 800def6:	bd38      	pop	{r3, r4, r5, pc}
 800def8:	20004688 	.word	0x20004688

0800defc <_malloc_usable_size_r>:
 800defc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df00:	1f18      	subs	r0, r3, #4
 800df02:	2b00      	cmp	r3, #0
 800df04:	bfbc      	itt	lt
 800df06:	580b      	ldrlt	r3, [r1, r0]
 800df08:	18c0      	addlt	r0, r0, r3
 800df0a:	4770      	bx	lr

0800df0c <_init>:
 800df0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df0e:	bf00      	nop
 800df10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df12:	bc08      	pop	{r3}
 800df14:	469e      	mov	lr, r3
 800df16:	4770      	bx	lr

0800df18 <_fini>:
 800df18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df1a:	bf00      	nop
 800df1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df1e:	bc08      	pop	{r3}
 800df20:	469e      	mov	lr, r3
 800df22:	4770      	bx	lr
