
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b54c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a78  0800b6f0  0800b6f0  0001b6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c168  0800c168  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  0800c168  0800c168  0001c168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c170  0800c170  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c170  0800c170  0001c170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c174  0800c174  0001c174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800c178  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  20000238  0800c3b0  00020238  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  0800c3b0  0002076c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e457  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003490  00000000  00000000  0003e6bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000106d2  00000000  00000000  00041b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001570  00000000  00000000  00052228  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001490  00000000  00000000  00053798  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001a18a  00000000  00000000  00054c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00010aa3  00000000  00000000  0006edb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000991c3  00000000  00000000  0007f855  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00118a18  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d8c  00000000  00000000  00118a94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b6d4 	.word	0x0800b6d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	0800b6d4 	.word	0x0800b6d4

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2f>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000984:	bf24      	itt	cs
 8000986:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800098a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800098e:	d90d      	bls.n	80009ac <__aeabi_d2f+0x30>
 8000990:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000994:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000998:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800099c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a4:	bf08      	it	eq
 80009a6:	f020 0001 	biceq.w	r0, r0, #1
 80009aa:	4770      	bx	lr
 80009ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b0:	d121      	bne.n	80009f6 <__aeabi_d2f+0x7a>
 80009b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009b6:	bfbc      	itt	lt
 80009b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	4770      	bxlt	lr
 80009be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c6:	f1c2 0218 	rsb	r2, r2, #24
 80009ca:	f1c2 0c20 	rsb	ip, r2, #32
 80009ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80009d2:	fa20 f002 	lsr.w	r0, r0, r2
 80009d6:	bf18      	it	ne
 80009d8:	f040 0001 	orrne.w	r0, r0, #1
 80009dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e8:	ea40 000c 	orr.w	r0, r0, ip
 80009ec:	fa23 f302 	lsr.w	r3, r3, r2
 80009f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f4:	e7cc      	b.n	8000990 <__aeabi_d2f+0x14>
 80009f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009fa:	d107      	bne.n	8000a0c <__aeabi_d2f+0x90>
 80009fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a00:	bf1e      	ittt	ne
 8000a02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a0a:	4770      	bxne	lr
 8000a0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_uldivmod>:
 8000a1c:	b953      	cbnz	r3, 8000a34 <__aeabi_uldivmod+0x18>
 8000a1e:	b94a      	cbnz	r2, 8000a34 <__aeabi_uldivmod+0x18>
 8000a20:	2900      	cmp	r1, #0
 8000a22:	bf08      	it	eq
 8000a24:	2800      	cmpeq	r0, #0
 8000a26:	bf1c      	itt	ne
 8000a28:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a2c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a30:	f000 b972 	b.w	8000d18 <__aeabi_idiv0>
 8000a34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3c:	f000 f806 	bl	8000a4c <__udivmoddi4>
 8000a40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr

08000a4c <__udivmoddi4>:
 8000a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a50:	9e08      	ldr	r6, [sp, #32]
 8000a52:	4604      	mov	r4, r0
 8000a54:	4688      	mov	r8, r1
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d14b      	bne.n	8000af2 <__udivmoddi4+0xa6>
 8000a5a:	428a      	cmp	r2, r1
 8000a5c:	4615      	mov	r5, r2
 8000a5e:	d967      	bls.n	8000b30 <__udivmoddi4+0xe4>
 8000a60:	fab2 f282 	clz	r2, r2
 8000a64:	b14a      	cbz	r2, 8000a7a <__udivmoddi4+0x2e>
 8000a66:	f1c2 0720 	rsb	r7, r2, #32
 8000a6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a6e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a72:	4095      	lsls	r5, r2
 8000a74:	ea47 0803 	orr.w	r8, r7, r3
 8000a78:	4094      	lsls	r4, r2
 8000a7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a7e:	0c23      	lsrs	r3, r4, #16
 8000a80:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a84:	fa1f fc85 	uxth.w	ip, r5
 8000a88:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a90:	fb07 f10c 	mul.w	r1, r7, ip
 8000a94:	4299      	cmp	r1, r3
 8000a96:	d909      	bls.n	8000aac <__udivmoddi4+0x60>
 8000a98:	18eb      	adds	r3, r5, r3
 8000a9a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000a9e:	f080 811b 	bcs.w	8000cd8 <__udivmoddi4+0x28c>
 8000aa2:	4299      	cmp	r1, r3
 8000aa4:	f240 8118 	bls.w	8000cd8 <__udivmoddi4+0x28c>
 8000aa8:	3f02      	subs	r7, #2
 8000aaa:	442b      	add	r3, r5
 8000aac:	1a5b      	subs	r3, r3, r1
 8000aae:	b2a4      	uxth	r4, r4
 8000ab0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ab4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ab8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000abc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ac0:	45a4      	cmp	ip, r4
 8000ac2:	d909      	bls.n	8000ad8 <__udivmoddi4+0x8c>
 8000ac4:	192c      	adds	r4, r5, r4
 8000ac6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000aca:	f080 8107 	bcs.w	8000cdc <__udivmoddi4+0x290>
 8000ace:	45a4      	cmp	ip, r4
 8000ad0:	f240 8104 	bls.w	8000cdc <__udivmoddi4+0x290>
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	442c      	add	r4, r5
 8000ad8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000adc:	eba4 040c 	sub.w	r4, r4, ip
 8000ae0:	2700      	movs	r7, #0
 8000ae2:	b11e      	cbz	r6, 8000aec <__udivmoddi4+0xa0>
 8000ae4:	40d4      	lsrs	r4, r2
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e9c6 4300 	strd	r4, r3, [r6]
 8000aec:	4639      	mov	r1, r7
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0xbe>
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	f000 80eb 	beq.w	8000cd2 <__udivmoddi4+0x286>
 8000afc:	2700      	movs	r7, #0
 8000afe:	e9c6 0100 	strd	r0, r1, [r6]
 8000b02:	4638      	mov	r0, r7
 8000b04:	4639      	mov	r1, r7
 8000b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0a:	fab3 f783 	clz	r7, r3
 8000b0e:	2f00      	cmp	r7, #0
 8000b10:	d147      	bne.n	8000ba2 <__udivmoddi4+0x156>
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d302      	bcc.n	8000b1c <__udivmoddi4+0xd0>
 8000b16:	4282      	cmp	r2, r0
 8000b18:	f200 80fa 	bhi.w	8000d10 <__udivmoddi4+0x2c4>
 8000b1c:	1a84      	subs	r4, r0, r2
 8000b1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b22:	2001      	movs	r0, #1
 8000b24:	4698      	mov	r8, r3
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	d0e0      	beq.n	8000aec <__udivmoddi4+0xa0>
 8000b2a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b2e:	e7dd      	b.n	8000aec <__udivmoddi4+0xa0>
 8000b30:	b902      	cbnz	r2, 8000b34 <__udivmoddi4+0xe8>
 8000b32:	deff      	udf	#255	; 0xff
 8000b34:	fab2 f282 	clz	r2, r2
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	f040 808f 	bne.w	8000c5c <__udivmoddi4+0x210>
 8000b3e:	1b49      	subs	r1, r1, r5
 8000b40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b44:	fa1f f885 	uxth.w	r8, r5
 8000b48:	2701      	movs	r7, #1
 8000b4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b58:	fb08 f10c 	mul.w	r1, r8, ip
 8000b5c:	4299      	cmp	r1, r3
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0x124>
 8000b60:	18eb      	adds	r3, r5, r3
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x122>
 8000b68:	4299      	cmp	r1, r3
 8000b6a:	f200 80cd 	bhi.w	8000d08 <__udivmoddi4+0x2bc>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1a59      	subs	r1, r3, r1
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x14c>
 8000b88:	192c      	adds	r4, r5, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x14a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80b6 	bhi.w	8000d02 <__udivmoddi4+0x2b6>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e79f      	b.n	8000ae2 <__udivmoddi4+0x96>
 8000ba2:	f1c7 0c20 	rsb	ip, r7, #32
 8000ba6:	40bb      	lsls	r3, r7
 8000ba8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bac:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bb0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bb4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bb8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bbc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bc0:	4325      	orrs	r5, r4
 8000bc2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bc6:	0c2c      	lsrs	r4, r5, #16
 8000bc8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bcc:	fa1f fa8e 	uxth.w	sl, lr
 8000bd0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bd4:	fb09 f40a 	mul.w	r4, r9, sl
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	fa02 f207 	lsl.w	r2, r2, r7
 8000bde:	fa00 f107 	lsl.w	r1, r0, r7
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b0>
 8000be4:	eb1e 0303 	adds.w	r3, lr, r3
 8000be8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bec:	f080 8087 	bcs.w	8000cfe <__udivmoddi4+0x2b2>
 8000bf0:	429c      	cmp	r4, r3
 8000bf2:	f240 8084 	bls.w	8000cfe <__udivmoddi4+0x2b2>
 8000bf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bfa:	4473      	add	r3, lr
 8000bfc:	1b1b      	subs	r3, r3, r4
 8000bfe:	b2ad      	uxth	r5, r5
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c0c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c10:	45a2      	cmp	sl, r4
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1da>
 8000c14:	eb1e 0404 	adds.w	r4, lr, r4
 8000c18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c1c:	d26b      	bcs.n	8000cf6 <__udivmoddi4+0x2aa>
 8000c1e:	45a2      	cmp	sl, r4
 8000c20:	d969      	bls.n	8000cf6 <__udivmoddi4+0x2aa>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4474      	add	r4, lr
 8000c26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c2e:	eba4 040a 	sub.w	r4, r4, sl
 8000c32:	454c      	cmp	r4, r9
 8000c34:	46c2      	mov	sl, r8
 8000c36:	464b      	mov	r3, r9
 8000c38:	d354      	bcc.n	8000ce4 <__udivmoddi4+0x298>
 8000c3a:	d051      	beq.n	8000ce0 <__udivmoddi4+0x294>
 8000c3c:	2e00      	cmp	r6, #0
 8000c3e:	d069      	beq.n	8000d14 <__udivmoddi4+0x2c8>
 8000c40:	ebb1 050a 	subs.w	r5, r1, sl
 8000c44:	eb64 0403 	sbc.w	r4, r4, r3
 8000c48:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c4c:	40fd      	lsrs	r5, r7
 8000c4e:	40fc      	lsrs	r4, r7
 8000c50:	ea4c 0505 	orr.w	r5, ip, r5
 8000c54:	e9c6 5400 	strd	r5, r4, [r6]
 8000c58:	2700      	movs	r7, #0
 8000c5a:	e747      	b.n	8000aec <__udivmoddi4+0xa0>
 8000c5c:	f1c2 0320 	rsb	r3, r2, #32
 8000c60:	fa20 f703 	lsr.w	r7, r0, r3
 8000c64:	4095      	lsls	r5, r2
 8000c66:	fa01 f002 	lsl.w	r0, r1, r2
 8000c6a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c72:	4338      	orrs	r0, r7
 8000c74:	0c01      	lsrs	r1, r0, #16
 8000c76:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c7a:	fa1f f885 	uxth.w	r8, r5
 8000c7e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c86:	fb07 f308 	mul.w	r3, r7, r8
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d907      	bls.n	8000ca2 <__udivmoddi4+0x256>
 8000c92:	1869      	adds	r1, r5, r1
 8000c94:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000c98:	d22f      	bcs.n	8000cfa <__udivmoddi4+0x2ae>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d92d      	bls.n	8000cfa <__udivmoddi4+0x2ae>
 8000c9e:	3f02      	subs	r7, #2
 8000ca0:	4429      	add	r1, r5
 8000ca2:	1acb      	subs	r3, r1, r3
 8000ca4:	b281      	uxth	r1, r0
 8000ca6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000caa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb2:	fb00 f308 	mul.w	r3, r0, r8
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d907      	bls.n	8000cca <__udivmoddi4+0x27e>
 8000cba:	1869      	adds	r1, r5, r1
 8000cbc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cc0:	d217      	bcs.n	8000cf2 <__udivmoddi4+0x2a6>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d915      	bls.n	8000cf2 <__udivmoddi4+0x2a6>
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	4429      	add	r1, r5
 8000cca:	1ac9      	subs	r1, r1, r3
 8000ccc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cd0:	e73b      	b.n	8000b4a <__udivmoddi4+0xfe>
 8000cd2:	4637      	mov	r7, r6
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	e709      	b.n	8000aec <__udivmoddi4+0xa0>
 8000cd8:	4607      	mov	r7, r0
 8000cda:	e6e7      	b.n	8000aac <__udivmoddi4+0x60>
 8000cdc:	4618      	mov	r0, r3
 8000cde:	e6fb      	b.n	8000ad8 <__udivmoddi4+0x8c>
 8000ce0:	4541      	cmp	r1, r8
 8000ce2:	d2ab      	bcs.n	8000c3c <__udivmoddi4+0x1f0>
 8000ce4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ce8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cec:	3801      	subs	r0, #1
 8000cee:	4613      	mov	r3, r2
 8000cf0:	e7a4      	b.n	8000c3c <__udivmoddi4+0x1f0>
 8000cf2:	4660      	mov	r0, ip
 8000cf4:	e7e9      	b.n	8000cca <__udivmoddi4+0x27e>
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	e795      	b.n	8000c26 <__udivmoddi4+0x1da>
 8000cfa:	4667      	mov	r7, ip
 8000cfc:	e7d1      	b.n	8000ca2 <__udivmoddi4+0x256>
 8000cfe:	4681      	mov	r9, r0
 8000d00:	e77c      	b.n	8000bfc <__udivmoddi4+0x1b0>
 8000d02:	3802      	subs	r0, #2
 8000d04:	442c      	add	r4, r5
 8000d06:	e747      	b.n	8000b98 <__udivmoddi4+0x14c>
 8000d08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d0c:	442b      	add	r3, r5
 8000d0e:	e72f      	b.n	8000b70 <__udivmoddi4+0x124>
 8000d10:	4638      	mov	r0, r7
 8000d12:	e708      	b.n	8000b26 <__udivmoddi4+0xda>
 8000d14:	4637      	mov	r7, r6
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0xa0>

08000d18 <__aeabi_idiv0>:
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <strlen>:
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d22:	2a00      	cmp	r2, #0
 8000d24:	d1fb      	bne.n	8000d1e <strlen+0x2>
 8000d26:	1a18      	subs	r0, r3, r0
 8000d28:	3801      	subs	r0, #1
 8000d2a:	4770      	bx	lr
 8000d2c:	0000      	movs	r0, r0
	...

08000d30 <memchr>:
 8000d30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000d34:	2a10      	cmp	r2, #16
 8000d36:	db2b      	blt.n	8000d90 <memchr+0x60>
 8000d38:	f010 0f07 	tst.w	r0, #7
 8000d3c:	d008      	beq.n	8000d50 <memchr+0x20>
 8000d3e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000d42:	3a01      	subs	r2, #1
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d02d      	beq.n	8000da4 <memchr+0x74>
 8000d48:	f010 0f07 	tst.w	r0, #7
 8000d4c:	b342      	cbz	r2, 8000da0 <memchr+0x70>
 8000d4e:	d1f6      	bne.n	8000d3e <memchr+0xe>
 8000d50:	b4f0      	push	{r4, r5, r6, r7}
 8000d52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000d56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000d5a:	f022 0407 	bic.w	r4, r2, #7
 8000d5e:	f07f 0700 	mvns.w	r7, #0
 8000d62:	2300      	movs	r3, #0
 8000d64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000d68:	3c08      	subs	r4, #8
 8000d6a:	ea85 0501 	eor.w	r5, r5, r1
 8000d6e:	ea86 0601 	eor.w	r6, r6, r1
 8000d72:	fa85 f547 	uadd8	r5, r5, r7
 8000d76:	faa3 f587 	sel	r5, r3, r7
 8000d7a:	fa86 f647 	uadd8	r6, r6, r7
 8000d7e:	faa5 f687 	sel	r6, r5, r7
 8000d82:	b98e      	cbnz	r6, 8000da8 <memchr+0x78>
 8000d84:	d1ee      	bne.n	8000d64 <memchr+0x34>
 8000d86:	bcf0      	pop	{r4, r5, r6, r7}
 8000d88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000d8c:	f002 0207 	and.w	r2, r2, #7
 8000d90:	b132      	cbz	r2, 8000da0 <memchr+0x70>
 8000d92:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000d96:	3a01      	subs	r2, #1
 8000d98:	ea83 0301 	eor.w	r3, r3, r1
 8000d9c:	b113      	cbz	r3, 8000da4 <memchr+0x74>
 8000d9e:	d1f8      	bne.n	8000d92 <memchr+0x62>
 8000da0:	2000      	movs	r0, #0
 8000da2:	4770      	bx	lr
 8000da4:	3801      	subs	r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	bf06      	itte	eq
 8000dac:	4635      	moveq	r5, r6
 8000dae:	3803      	subeq	r0, #3
 8000db0:	3807      	subne	r0, #7
 8000db2:	f015 0f01 	tst.w	r5, #1
 8000db6:	d107      	bne.n	8000dc8 <memchr+0x98>
 8000db8:	3001      	adds	r0, #1
 8000dba:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000dbe:	bf02      	ittt	eq
 8000dc0:	3001      	addeq	r0, #1
 8000dc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000dc6:	3001      	addeq	r0, #1
 8000dc8:	bcf0      	pop	{r4, r5, r6, r7}
 8000dca:	3801      	subs	r0, #1
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <__gedf2>:
 8000dd0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000dd4:	e006      	b.n	8000de4 <__cmpdf2+0x4>
 8000dd6:	bf00      	nop

08000dd8 <__ledf2>:
 8000dd8:	f04f 0c01 	mov.w	ip, #1
 8000ddc:	e002      	b.n	8000de4 <__cmpdf2+0x4>
 8000dde:	bf00      	nop

08000de0 <__cmpdf2>:
 8000de0:	f04f 0c01 	mov.w	ip, #1
 8000de4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000de8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000dec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000df0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000df4:	bf18      	it	ne
 8000df6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000dfa:	d01b      	beq.n	8000e34 <__cmpdf2+0x54>
 8000dfc:	b001      	add	sp, #4
 8000dfe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000e02:	bf0c      	ite	eq
 8000e04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000e08:	ea91 0f03 	teqne	r1, r3
 8000e0c:	bf02      	ittt	eq
 8000e0e:	ea90 0f02 	teqeq	r0, r2
 8000e12:	2000      	moveq	r0, #0
 8000e14:	4770      	bxeq	lr
 8000e16:	f110 0f00 	cmn.w	r0, #0
 8000e1a:	ea91 0f03 	teq	r1, r3
 8000e1e:	bf58      	it	pl
 8000e20:	4299      	cmppl	r1, r3
 8000e22:	bf08      	it	eq
 8000e24:	4290      	cmpeq	r0, r2
 8000e26:	bf2c      	ite	cs
 8000e28:	17d8      	asrcs	r0, r3, #31
 8000e2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000e2e:	f040 0001 	orr.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e3c:	d102      	bne.n	8000e44 <__cmpdf2+0x64>
 8000e3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e42:	d107      	bne.n	8000e54 <__cmpdf2+0x74>
 8000e44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e4c:	d1d6      	bne.n	8000dfc <__cmpdf2+0x1c>
 8000e4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000e52:	d0d3      	beq.n	8000dfc <__cmpdf2+0x1c>
 8000e54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <__aeabi_cdrcmple>:
 8000e5c:	4684      	mov	ip, r0
 8000e5e:	4610      	mov	r0, r2
 8000e60:	4662      	mov	r2, ip
 8000e62:	468c      	mov	ip, r1
 8000e64:	4619      	mov	r1, r3
 8000e66:	4663      	mov	r3, ip
 8000e68:	e000      	b.n	8000e6c <__aeabi_cdcmpeq>
 8000e6a:	bf00      	nop

08000e6c <__aeabi_cdcmpeq>:
 8000e6c:	b501      	push	{r0, lr}
 8000e6e:	f7ff ffb7 	bl	8000de0 <__cmpdf2>
 8000e72:	2800      	cmp	r0, #0
 8000e74:	bf48      	it	mi
 8000e76:	f110 0f00 	cmnmi.w	r0, #0
 8000e7a:	bd01      	pop	{r0, pc}

08000e7c <__aeabi_dcmpeq>:
 8000e7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e80:	f7ff fff4 	bl	8000e6c <__aeabi_cdcmpeq>
 8000e84:	bf0c      	ite	eq
 8000e86:	2001      	moveq	r0, #1
 8000e88:	2000      	movne	r0, #0
 8000e8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e8e:	bf00      	nop

08000e90 <__aeabi_dcmplt>:
 8000e90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e94:	f7ff ffea 	bl	8000e6c <__aeabi_cdcmpeq>
 8000e98:	bf34      	ite	cc
 8000e9a:	2001      	movcc	r0, #1
 8000e9c:	2000      	movcs	r0, #0
 8000e9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_dcmple>:
 8000ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea8:	f7ff ffe0 	bl	8000e6c <__aeabi_cdcmpeq>
 8000eac:	bf94      	ite	ls
 8000eae:	2001      	movls	r0, #1
 8000eb0:	2000      	movhi	r0, #0
 8000eb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_dcmpge>:
 8000eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ebc:	f7ff ffce 	bl	8000e5c <__aeabi_cdrcmple>
 8000ec0:	bf94      	ite	ls
 8000ec2:	2001      	movls	r0, #1
 8000ec4:	2000      	movhi	r0, #0
 8000ec6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eca:	bf00      	nop

08000ecc <__aeabi_dcmpgt>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff ffc4 	bl	8000e5c <__aeabi_cdrcmple>
 8000ed4:	bf34      	ite	cc
 8000ed6:	2001      	movcc	r0, #1
 8000ed8:	2000      	movcs	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_dcmpun>:
 8000ee0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ee4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ee8:	d102      	bne.n	8000ef0 <__aeabi_dcmpun+0x10>
 8000eea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000eee:	d10a      	bne.n	8000f06 <__aeabi_dcmpun+0x26>
 8000ef0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ef4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ef8:	d102      	bne.n	8000f00 <__aeabi_dcmpun+0x20>
 8000efa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000efe:	d102      	bne.n	8000f06 <__aeabi_dcmpun+0x26>
 8000f00:	f04f 0000 	mov.w	r0, #0
 8000f04:	4770      	bx	lr
 8000f06:	f04f 0001 	mov.w	r0, #1
 8000f0a:	4770      	bx	lr

08000f0c <__aeabi_d2iz>:
 8000f0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000f10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f14:	d215      	bcs.n	8000f42 <__aeabi_d2iz+0x36>
 8000f16:	d511      	bpl.n	8000f3c <__aeabi_d2iz+0x30>
 8000f18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f20:	d912      	bls.n	8000f48 <__aeabi_d2iz+0x3c>
 8000f22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000f32:	fa23 f002 	lsr.w	r0, r3, r2
 8000f36:	bf18      	it	ne
 8000f38:	4240      	negne	r0, r0
 8000f3a:	4770      	bx	lr
 8000f3c:	f04f 0000 	mov.w	r0, #0
 8000f40:	4770      	bx	lr
 8000f42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f46:	d105      	bne.n	8000f54 <__aeabi_d2iz+0x48>
 8000f48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000f4c:	bf08      	it	eq
 8000f4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f52:	4770      	bx	lr
 8000f54:	f04f 0000 	mov.w	r0, #0
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <get_pitch>:
}

float get_pitch(){

	return pitch;
}
 8000f5c:	4b01      	ldr	r3, [pc, #4]	; (8000f64 <get_pitch+0x8>)
 8000f5e:	ed93 0a00 	vldr	s0, [r3]
 8000f62:	4770      	bx	lr
 8000f64:	20000428 	.word	0x20000428

08000f68 <writeByte>:

//===================================================================================================================
//====== Set of useful function to access acceleration, gyroscope, and temperature data
//===================================================================================================================

void writeByte(uint8_t address_tx, uint8_t subAddress, uint8_t data) {
 8000f68:	b500      	push	{lr}
 8000f6a:	b085      	sub	sp, #20
	uint8_t data_write[2];
	data_write[0] = subAddress;
 8000f6c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_write[1] = data;
 8000f70:	f88d 200d 	strb.w	r2, [sp, #13]
	//i2c.write(address, data_write, 2, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8000f74:	230a      	movs	r3, #10
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2302      	movs	r3, #2
 8000f7a:	aa03      	add	r2, sp, #12
 8000f7c:	4601      	mov	r1, r0
 8000f7e:	4803      	ldr	r0, [pc, #12]	; (8000f8c <writeByte+0x24>)
 8000f80:	f003 f9d6 	bl	8004330 <HAL_I2C_Master_Transmit>
}
 8000f84:	b005      	add	sp, #20
 8000f86:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f8a:	bf00      	nop
 8000f8c:	20000398 	.word	0x20000398

08000f90 <readByte>:

//NICK - I've changed these to accept a tx address & a rx address as STM32 boards include the R/W bit at the end of 7 bit adress
//so HAL function takes in 8 bit address including R/W bit
char readByte(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress) {
 8000f90:	b570      	push	{r4, r5, r6, lr}
 8000f92:	b084      	sub	sp, #16
	uint8_t data[1]; // `data` will store the register data
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8000f94:	a904      	add	r1, sp, #16
 8000f96:	f801 2d08 	strb.w	r2, [r1, #-8]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, 1, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8000f9a:	4605      	mov	r5, r0
 8000f9c:	4c09      	ldr	r4, [pc, #36]	; (8000fc4 <readByte+0x34>)
 8000f9e:	260a      	movs	r6, #10
 8000fa0:	9600      	str	r6, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	460a      	mov	r2, r1
 8000fa6:	4601      	mov	r1, r0
 8000fa8:	4620      	mov	r0, r4
 8000faa:	f003 f9c1 	bl	8004330 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 8000fae:	9600      	str	r6, [sp, #0]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	aa03      	add	r2, sp, #12
 8000fb4:	4629      	mov	r1, r5
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f003 fa74 	bl	80044a4 <HAL_I2C_Master_Receive>

	return data[0];
}
 8000fbc:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8000fc0:	b004      	add	sp, #16
 8000fc2:	bd70      	pop	{r4, r5, r6, pc}
 8000fc4:	20000398 	.word	0x20000398

08000fc8 <imu_init>:
IMU_StatusTypeDef imu_init(I2C_HandleTypeDef* handle) {
 8000fc8:	b510      	push	{r4, lr}
 8000fca:	4604      	mov	r4, r0
	printf("STM32 Online..\r\n");
 8000fcc:	480f      	ldr	r0, [pc, #60]	; (800100c <imu_init+0x44>)
 8000fce:	f006 fd79 	bl	8007ac4 <puts>
	if (HAL_I2C_IsDeviceReady(handle, 0xD0, 2, 100) == HAL_OK) {
 8000fd2:	2364      	movs	r3, #100	; 0x64
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	21d0      	movs	r1, #208	; 0xd0
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f003 fbcb 	bl	8004774 <HAL_I2C_IsDeviceReady>
 8000fde:	b100      	cbz	r0, 8000fe2 <imu_init+0x1a>
 8000fe0:	e7fe      	b.n	8000fe0 <imu_init+0x18>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle LED on if so
 8000fe2:	2120      	movs	r1, #32
 8000fe4:	480a      	ldr	r0, [pc, #40]	; (8001010 <imu_init+0x48>)
 8000fe6:	f002 feb7 	bl	8003d58 <HAL_GPIO_TogglePin>
	uint8_t whoami = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8000fea:	2275      	movs	r2, #117	; 0x75
 8000fec:	21d1      	movs	r1, #209	; 0xd1
 8000fee:	20d0      	movs	r0, #208	; 0xd0
 8000ff0:	f7ff ffce 	bl	8000f90 <readByte>
 8000ff4:	4604      	mov	r4, r0
	if (whoami == 0x71) {
 8000ff6:	2871      	cmp	r0, #113	; 0x71
 8000ff8:	d106      	bne.n	8001008 <imu_init+0x40>
		printf("MPU9250 online..\r\n");
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <imu_init+0x4c>)
 8000ffc:	f006 fd62 	bl	8007ac4 <puts>
		printf("whoami reg = %d ..\r\n", whoami);
 8001000:	4621      	mov	r1, r4
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <imu_init+0x50>)
 8001004:	f006 fcea 	bl	80079dc <iprintf>
}
 8001008:	2000      	movs	r0, #0
 800100a:	bd10      	pop	{r4, pc}
 800100c:	0800b94c 	.word	0x0800b94c
 8001010:	40020000 	.word	0x40020000
 8001014:	0800b95c 	.word	0x0800b95c
 8001018:	0800b970 	.word	0x0800b970

0800101c <readBytes>:

void readBytes(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress,
	uint8_t count, uint8_t * dest) {
 800101c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001020:	b088      	sub	sp, #32
 8001022:	4688      	mov	r8, r1
 8001024:	461c      	mov	r4, r3
 8001026:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	uint8_t data[14];
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8001028:	a908      	add	r1, sp, #32
 800102a:	f801 2d14 	strb.w	r2, [r1, #-20]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, count, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 800102e:	4e0e      	ldr	r6, [pc, #56]	; (8001068 <readBytes+0x4c>)
 8001030:	270a      	movs	r7, #10
 8001032:	9700      	str	r7, [sp, #0]
 8001034:	2301      	movs	r3, #1
 8001036:	460a      	mov	r2, r1
 8001038:	4601      	mov	r1, r0
 800103a:	4630      	mov	r0, r6
 800103c:	f003 f978 	bl	8004330 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 8001040:	9700      	str	r7, [sp, #0]
 8001042:	4623      	mov	r3, r4
 8001044:	aa04      	add	r2, sp, #16
 8001046:	4641      	mov	r1, r8
 8001048:	4630      	mov	r0, r6
 800104a:	f003 fa2b 	bl	80044a4 <HAL_I2C_Master_Receive>

	for (int ii = 0; ii < count; ii++) {
 800104e:	2300      	movs	r3, #0
 8001050:	e005      	b.n	800105e <readBytes+0x42>
		dest[ii] = data[ii];
 8001052:	aa08      	add	r2, sp, #32
 8001054:	441a      	add	r2, r3
 8001056:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800105a:	54ea      	strb	r2, [r5, r3]
	for (int ii = 0; ii < count; ii++) {
 800105c:	3301      	adds	r3, #1
 800105e:	429c      	cmp	r4, r3
 8001060:	dcf7      	bgt.n	8001052 <readBytes+0x36>
	}
}
 8001062:	b008      	add	sp, #32
 8001064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001068:	20000398 	.word	0x20000398

0800106c <getMres>:

void getMres() {

	switch (Mscale) {
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <getMres+0x1c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b113      	cbz	r3, 8001078 <getMres+0xc>
 8001072:	2b01      	cmp	r3, #1
 8001074:	d004      	beq.n	8001080 <getMres+0x14>
 8001076:	4770      	bx	lr
	// Possible magnetometer scales (and their register bit settings) are:
	// 14 bit resolution (0) and 16 bit resolution (1)
	case MFS_14BITS:
		mRes = 10.0 * 4219.0 / 8190.0; // Proper scale to return milliGauss
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <getMres+0x20>)
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <getMres+0x24>)
 800107c:	601a      	str	r2, [r3, #0]
		break;
 800107e:	4770      	bx	lr
	case MFS_16BITS:
		mRes = 10.0 * 4219.0 / 32760.0; // Proper scale to return milliGauss
 8001080:	4b02      	ldr	r3, [pc, #8]	; (800108c <getMres+0x20>)
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <getMres+0x28>)
 8001084:	601a      	str	r2, [r3, #0]
		break;
	}
}
 8001086:	4770      	bx	lr
 8001088:	20000001 	.word	0x20000001
 800108c:	20000430 	.word	0x20000430
 8001090:	40a4d84e 	.word	0x40a4d84e
 8001094:	3fa4d84e 	.word	0x3fa4d84e

08001098 <getGres>:

void getGres() {
	switch (Gscale) {
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <getGres+0x30>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b03      	cmp	r3, #3
 800109e:	d812      	bhi.n	80010c6 <getGres+0x2e>
 80010a0:	e8df f003 	tbb	[pc, r3]
 80010a4:	0e0a0602 	.word	0x0e0a0602
	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case GFS_250DPS:
		gRes = 250.0 / 32768.0;
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <getGres+0x34>)
 80010aa:	4a09      	ldr	r2, [pc, #36]	; (80010d0 <getGres+0x38>)
 80010ac:	601a      	str	r2, [r3, #0]
		break;
 80010ae:	4770      	bx	lr
	case GFS_500DPS:
		gRes = 500.0 / 32768.0;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <getGres+0x34>)
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <getGres+0x3c>)
 80010b4:	601a      	str	r2, [r3, #0]
		break;
 80010b6:	4770      	bx	lr
	case GFS_1000DPS:
		gRes = 1000.0 / 32768.0;
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <getGres+0x34>)
 80010ba:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <getGres+0x40>)
 80010bc:	601a      	str	r2, [r3, #0]
		break;
 80010be:	4770      	bx	lr
	case GFS_2000DPS:
		gRes = 2000.0 / 32768.0;
 80010c0:	4b02      	ldr	r3, [pc, #8]	; (80010cc <getGres+0x34>)
 80010c2:	4a06      	ldr	r2, [pc, #24]	; (80010dc <getGres+0x44>)
 80010c4:	601a      	str	r2, [r3, #0]
		break;
	}
}
 80010c6:	4770      	bx	lr
 80010c8:	20000255 	.word	0x20000255
 80010cc:	20000414 	.word	0x20000414
 80010d0:	3bfa0000 	.word	0x3bfa0000
 80010d4:	3c7a0000 	.word	0x3c7a0000
 80010d8:	3cfa0000 	.word	0x3cfa0000
 80010dc:	3d7a0000 	.word	0x3d7a0000

080010e0 <getAres>:

void getAres() {
	switch (Ascale) {
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <getAres+0x38>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d816      	bhi.n	8001116 <getAres+0x36>
 80010e8:	e8df f003 	tbb	[pc, r3]
 80010ec:	110c0702 	.word	0x110c0702
	// Possible accelerometer scales (and their register bit settings) are:
	// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case AFS_2G:
		aRes = 2.0 / 32768.0;
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <getAres+0x3c>)
 80010f2:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80010f6:	601a      	str	r2, [r3, #0]
		break;
 80010f8:	4770      	bx	lr
	case AFS_4G:
		aRes = 4.0 / 32768.0;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <getAres+0x3c>)
 80010fc:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001100:	601a      	str	r2, [r3, #0]
		break;
 8001102:	4770      	bx	lr
	case AFS_8G:
		aRes = 8.0 / 32768.0;
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <getAres+0x3c>)
 8001106:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800110a:	601a      	str	r2, [r3, #0]
		break;
 800110c:	4770      	bx	lr
	case AFS_16G:
		aRes = 16.0 / 32768.0;
 800110e:	4b03      	ldr	r3, [pc, #12]	; (800111c <getAres+0x3c>)
 8001110:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001114:	601a      	str	r2, [r3, #0]
		break;
	}
}
 8001116:	4770      	bx	lr
 8001118:	20000254 	.word	0x20000254
 800111c:	20000408 	.word	0x20000408

08001120 <readAccelData>:

void readAccelData(int16_t * destination) {
 8001120:	b510      	push	{r4, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 8001126:	ab02      	add	r3, sp, #8
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2306      	movs	r3, #6
 800112c:	223b      	movs	r2, #59	; 0x3b
 800112e:	21d1      	movs	r1, #209	; 0xd1
 8001130:	20d0      	movs	r0, #208	; 0xd0
 8001132:	f7ff ff73 	bl	800101c <readBytes>
			&rawData[0]); // Read the six raw data registers into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001136:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800113a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800113e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001142:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001144:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8001148:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800114c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001150:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001152:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8001156:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800115a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800115e:	80a3      	strh	r3, [r4, #4]
}
 8001160:	b004      	add	sp, #16
 8001162:	bd10      	pop	{r4, pc}

08001164 <readGyroData>:

void readGyroData(int16_t * destination) {
 8001164:	b510      	push	{r4, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 800116a:	ab02      	add	r3, sp, #8
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2306      	movs	r3, #6
 8001170:	2243      	movs	r2, #67	; 0x43
 8001172:	21d1      	movs	r1, #209	; 0xd1
 8001174:	20d0      	movs	r0, #208	; 0xd0
 8001176:	f7ff ff51 	bl	800101c <readBytes>
			&rawData[0]); // Read the six raw data registers sequentially into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800117a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800117e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001182:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001186:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001188:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800118c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001190:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001194:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001196:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800119a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800119e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011a2:	80a3      	strh	r3, [r4, #4]
}
 80011a4:	b004      	add	sp, #16
 80011a6:	bd10      	pop	{r4, pc}

080011a8 <readMagData>:

void readMagData(int16_t * destination) {
 80011a8:	b510      	push	{r4, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	4604      	mov	r4, r0
	uint8_t rawData[7]; // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	//if (readByte(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set

		readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_XOUT_L, 7, &rawData[0]); // Read the six raw data and ST2 registers sequentially into data array
 80011ae:	ab02      	add	r3, sp, #8
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2307      	movs	r3, #7
 80011b4:	2203      	movs	r2, #3
 80011b6:	2119      	movs	r1, #25
 80011b8:	2018      	movs	r0, #24
 80011ba:	f7ff ff2f 	bl	800101c <readBytes>
		uint8_t c = rawData[6]; // End data read by reading ST2 register
 80011be:	f89d 300e 	ldrb.w	r3, [sp, #14]
		if (!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
 80011c2:	f013 0f08 	tst.w	r3, #8
 80011c6:	d114      	bne.n	80011f2 <readMagData+0x4a>
			destination[0] =
					(int16_t) (((int16_t) rawData[1] << 8) | rawData[0]); // Turn the MSB and LSB into a signed 16-bit value
 80011c8:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80011cc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80011d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[0] =
 80011d4:	8023      	strh	r3, [r4, #0]
			destination[1] =
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
 80011d6:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80011da:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80011de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[1] =
 80011e2:	8063      	strh	r3, [r4, #2]
			destination[2] =
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
 80011e4:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80011e8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80011ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[2] =
 80011f0:	80a3      	strh	r3, [r4, #4]
		}
	//}
}
 80011f2:	b004      	add	sp, #16
 80011f4:	bd10      	pop	{r4, pc}

080011f6 <resetMPU9250>:
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, TEMP_OUT_H, 2,
			&rawData[0]); // Read the two raw data registers sequentially into data array
	return (int16_t) (((int16_t) rawData[0]) << 8 | rawData[1]); // Turn the MSB and LSB into a 16-bit value
}

void resetMPU9250() {
 80011f6:	b508      	push	{r3, lr}
	// reset device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	216b      	movs	r1, #107	; 0x6b
 80011fc:	20d0      	movs	r0, #208	; 0xd0
 80011fe:	f7ff feb3 	bl	8000f68 <writeByte>
	HAL_Delay(100);
 8001202:	2064      	movs	r0, #100	; 0x64
 8001204:	f002 f8ec 	bl	80033e0 <HAL_Delay>
}
 8001208:	bd08      	pop	{r3, pc}
	...

0800120c <initAK8963>:

void initAK8963(float * destination) {
 800120c:	b510      	push	{r4, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	4604      	mov	r4, r0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 8001212:	2200      	movs	r2, #0
 8001214:	210a      	movs	r1, #10
 8001216:	2018      	movs	r0, #24
 8001218:	f7ff fea6 	bl	8000f68 <writeByte>
	HAL_Delay(10);
 800121c:	200a      	movs	r0, #10
 800121e:	f002 f8df 	bl	80033e0 <HAL_Delay>
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8001222:	220f      	movs	r2, #15
 8001224:	210a      	movs	r1, #10
 8001226:	2018      	movs	r0, #24
 8001228:	f7ff fe9e 	bl	8000f68 <writeByte>
	HAL_Delay(10);
 800122c:	200a      	movs	r0, #10
 800122e:	f002 f8d7 	bl	80033e0 <HAL_Delay>
	readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ASAX, 3,
 8001232:	ab03      	add	r3, sp, #12
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2303      	movs	r3, #3
 8001238:	2210      	movs	r2, #16
 800123a:	2119      	movs	r1, #25
 800123c:	2018      	movs	r0, #24
 800123e:	f7ff feed 	bl	800101c <readBytes>
			&rawData[0]);  // Read the x-, y-, and z-axis calibration values
	destination[0] = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 8001242:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001246:	3b80      	subs	r3, #128	; 0x80
 8001248:	ee07 3a10 	vmov	s14, r3
 800124c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001250:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80012c8 <initAK8963+0xbc>
 8001254:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001258:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800125c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001260:	ed84 7a00 	vstr	s14, [r4]
	destination[1] = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8001264:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001268:	3b80      	subs	r3, #128	; 0x80
 800126a:	ee07 3a10 	vmov	s14, r3
 800126e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001272:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001276:	ee37 7a26 	vadd.f32	s14, s14, s13
 800127a:	ed84 7a01 	vstr	s14, [r4, #4]
	destination[2] = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 800127e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001282:	3b80      	subs	r3, #128	; 0x80
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800128c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001290:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001294:	edc4 7a02 	vstr	s15, [r4, #8]
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 8001298:	2200      	movs	r2, #0
 800129a:	210a      	movs	r1, #10
 800129c:	2018      	movs	r0, #24
 800129e:	f7ff fe63 	bl	8000f68 <writeByte>
	HAL_Delay(10);
 80012a2:	200a      	movs	r0, #10
 80012a4:	f002 f89c 	bl	80033e0 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <initAK8963+0xc0>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <initAK8963+0xc4>)
 80012ae:	7812      	ldrb	r2, [r2, #0]
 80012b0:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	210a      	movs	r1, #10
 80012b8:	2018      	movs	r0, #24
 80012ba:	f7ff fe55 	bl	8000f68 <writeByte>
	HAL_Delay(10);
 80012be:	200a      	movs	r0, #10
 80012c0:	f002 f88e 	bl	80033e0 <HAL_Delay>
}
 80012c4:	b004      	add	sp, #16
 80012c6:	bd10      	pop	{r4, pc}
 80012c8:	3b800000 	.word	0x3b800000
 80012cc:	20000001 	.word	0x20000001
 80012d0:	20000000 	.word	0x20000000

080012d4 <initMPU9250>:

void initMPU9250() {
 80012d4:	b510      	push	{r4, lr}
	// Initialize MPU9250 device
	// wake up device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80012d6:	2200      	movs	r2, #0
 80012d8:	216b      	movs	r1, #107	; 0x6b
 80012da:	20d0      	movs	r0, #208	; 0xd0
 80012dc:	f7ff fe44 	bl	8000f68 <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 80012e0:	2064      	movs	r0, #100	; 0x64
 80012e2:	f002 f87d 	bl	80033e0 <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01); // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 80012e6:	2201      	movs	r2, #1
 80012e8:	216b      	movs	r1, #107	; 0x6b
 80012ea:	20d0      	movs	r0, #208	; 0xd0
 80012ec:	f7ff fe3c 	bl	8000f68 <writeByte>

	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	// DLPF_CFG = bits 2:0 = 010 = 0x03; this sets the sample rate at 1 kHz for both
	// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x00);
 80012f0:	2200      	movs	r2, #0
 80012f2:	211a      	movs	r1, #26
 80012f4:	20d0      	movs	r0, #208	; 0xd0
 80012f6:	f7ff fe37 	bl	8000f68 <writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Use a 200 Hz rate; the same rate set in CONFIG above
 80012fa:	2200      	movs	r2, #0
 80012fc:	2119      	movs	r1, #25
 80012fe:	20d0      	movs	r0, #208	; 0xd0
 8001300:	f7ff fe32 	bl	8000f68 <writeByte>

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX,
 8001304:	221b      	movs	r2, #27
 8001306:	21d1      	movs	r1, #209	; 0xd1
 8001308:	4608      	mov	r0, r1
 800130a:	f7ff fe41 	bl	8000f90 <readByte>
 800130e:	4604      	mov	r4, r0
	GYRO_CONFIG);
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8001310:	f000 021f 	and.w	r2, r0, #31
 8001314:	211b      	movs	r1, #27
 8001316:	20d0      	movs	r0, #208	; 0xd0
 8001318:	f7ff fe26 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 800131c:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 8001320:	211b      	movs	r1, #27
 8001322:	20d0      	movs	r0, #208	; 0xd0
 8001324:	f7ff fe20 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro
 8001328:	4b20      	ldr	r3, [pc, #128]	; (80013ac <initMPU9250+0xd8>)
 800132a:	781a      	ldrb	r2, [r3, #0]
 800132c:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	211b      	movs	r1, #27
 8001334:	20d0      	movs	r0, #208	; 0xd0
 8001336:	f7ff fe17 	bl	8000f68 <writeByte>

	// Set accelerometer configuration
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG);
 800133a:	221c      	movs	r2, #28
 800133c:	21d1      	movs	r1, #209	; 0xd1
 800133e:	4608      	mov	r0, r1
 8001340:	f7ff fe26 	bl	8000f90 <readByte>
 8001344:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8001346:	f000 021f 	and.w	r2, r0, #31
 800134a:	211c      	movs	r1, #28
 800134c:	20d0      	movs	r0, #208	; 0xd0
 800134e:	f7ff fe0b 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001352:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 8001356:	211c      	movs	r1, #28
 8001358:	20d0      	movs	r0, #208	; 0xd0
 800135a:	f7ff fe05 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <initMPU9250+0xdc>)
 8001360:	781a      	ldrb	r2, [r3, #0]
 8001362:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	211c      	movs	r1, #28
 800136a:	20d0      	movs	r0, #208	; 0xd0
 800136c:	f7ff fdfc 	bl	8000f68 <writeByte>

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG2);
 8001370:	221d      	movs	r2, #29
 8001372:	21d1      	movs	r1, #209	; 0xd1
 8001374:	4608      	mov	r0, r1
 8001376:	f7ff fe0b 	bl	8000f90 <readByte>
 800137a:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 800137c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001380:	211d      	movs	r1, #29
 8001382:	20d0      	movs	r0, #208	; 0xd0
 8001384:	f7ff fdf0 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c | 0x03); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001388:	f044 0203 	orr.w	r2, r4, #3
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	211d      	movs	r1, #29
 8001390:	20d0      	movs	r0, #208	; 0xd0
 8001392:	f7ff fde9 	bl	8000f68 <writeByte>
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	writeByte(MPU9250_ADDRESS_TX, INT_PIN_CFG, 0x22);
 8001396:	2222      	movs	r2, #34	; 0x22
 8001398:	2137      	movs	r1, #55	; 0x37
 800139a:	20d0      	movs	r0, #208	; 0xd0
 800139c:	f7ff fde4 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 80013a0:	2201      	movs	r2, #1
 80013a2:	2138      	movs	r1, #56	; 0x38
 80013a4:	20d0      	movs	r0, #208	; 0xd0
 80013a6:	f7ff fddf 	bl	8000f68 <writeByte>
}
 80013aa:	bd10      	pop	{r4, pc}
 80013ac:	20000255 	.word	0x20000255
 80013b0:	20000254 	.word	0x20000254

080013b4 <calibrateMPU9250>:

// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(float * dest1, float * dest2) {
 80013b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013b8:	b08c      	sub	sp, #48	; 0x30
 80013ba:	4607      	mov	r7, r0
 80013bc:	460e      	mov	r6, r1
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = { 0, 0, 0 }, accel_bias[3] = { 0, 0, 0 };
 80013be:	2400      	movs	r4, #0
 80013c0:	9406      	str	r4, [sp, #24]
 80013c2:	9407      	str	r4, [sp, #28]
 80013c4:	9408      	str	r4, [sp, #32]
 80013c6:	9403      	str	r4, [sp, #12]
 80013c8:	9404      	str	r4, [sp, #16]
 80013ca:	9405      	str	r4, [sp, #20]

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80013cc:	2280      	movs	r2, #128	; 0x80
 80013ce:	216b      	movs	r1, #107	; 0x6b
 80013d0:	20d0      	movs	r0, #208	; 0xd0
 80013d2:	f7ff fdc9 	bl	8000f68 <writeByte>
	HAL_Delay(100);
 80013d6:	2064      	movs	r0, #100	; 0x64
 80013d8:	f002 f802 	bl	80033e0 <HAL_Delay>

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01);
 80013dc:	2201      	movs	r2, #1
 80013de:	216b      	movs	r1, #107	; 0x6b
 80013e0:	20d0      	movs	r0, #208	; 0xd0
 80013e2:	f7ff fdc1 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_2, 0x00);
 80013e6:	4622      	mov	r2, r4
 80013e8:	216c      	movs	r1, #108	; 0x6c
 80013ea:	20d0      	movs	r0, #208	; 0xd0
 80013ec:	f7ff fdbc 	bl	8000f68 <writeByte>
	HAL_Delay(200);
 80013f0:	20c8      	movs	r0, #200	; 0xc8
 80013f2:	f001 fff5 	bl	80033e0 <HAL_Delay>

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x00); // Disable all interrupts
 80013f6:	4622      	mov	r2, r4
 80013f8:	2138      	movs	r1, #56	; 0x38
 80013fa:	20d0      	movs	r0, #208	; 0xd0
 80013fc:	f7ff fdb4 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x00);      // Disable FIFO
 8001400:	4622      	mov	r2, r4
 8001402:	2123      	movs	r1, #35	; 0x23
 8001404:	20d0      	movs	r0, #208	; 0xd0
 8001406:	f7ff fdaf 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Turn on internal clock source
 800140a:	4622      	mov	r2, r4
 800140c:	216b      	movs	r1, #107	; 0x6b
 800140e:	20d0      	movs	r0, #208	; 0xd0
 8001410:	f7ff fdaa 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, I2C_MST_CTRL, 0x00); // Disable I2C master
 8001414:	4622      	mov	r2, r4
 8001416:	2124      	movs	r1, #36	; 0x24
 8001418:	20d0      	movs	r0, #208	; 0xd0
 800141a:	f7ff fda5 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x00); // Disable FIFO and I2C master modes
 800141e:	4622      	mov	r2, r4
 8001420:	216a      	movs	r1, #106	; 0x6a
 8001422:	20d0      	movs	r0, #208	; 0xd0
 8001424:	f7ff fda0 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8001428:	220c      	movs	r2, #12
 800142a:	216a      	movs	r1, #106	; 0x6a
 800142c:	20d0      	movs	r0, #208	; 0xd0
 800142e:	f7ff fd9b 	bl	8000f68 <writeByte>
	HAL_Delay(15);
 8001432:	200f      	movs	r0, #15
 8001434:	f001 ffd4 	bl	80033e0 <HAL_Delay>

	// Configure MPU9250 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x01); // Set low-pass filter to 188 Hz
 8001438:	2201      	movs	r2, #1
 800143a:	211a      	movs	r1, #26
 800143c:	20d0      	movs	r0, #208	; 0xd0
 800143e:	f7ff fd93 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Set sample rate to 1 kHz
 8001442:	4622      	mov	r2, r4
 8001444:	2119      	movs	r1, #25
 8001446:	20d0      	movs	r0, #208	; 0xd0
 8001448:	f7ff fd8e 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00); // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 800144c:	4622      	mov	r2, r4
 800144e:	211b      	movs	r1, #27
 8001450:	20d0      	movs	r0, #208	; 0xd0
 8001452:	f7ff fd89 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001456:	4622      	mov	r2, r4
 8001458:	211c      	movs	r1, #28
 800145a:	20d0      	movs	r0, #208	; 0xd0
 800145c:	f7ff fd84 	bl	8000f68 <writeByte>

	uint16_t gyrosensitivity = 131;   // = 131 LSB/degrees/sec
	uint16_t accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x40);   // Enable FIFO
 8001460:	2240      	movs	r2, #64	; 0x40
 8001462:	216a      	movs	r1, #106	; 0x6a
 8001464:	20d0      	movs	r0, #208	; 0xd0
 8001466:	f7ff fd7f 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x78); // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 800146a:	2278      	movs	r2, #120	; 0x78
 800146c:	2123      	movs	r1, #35	; 0x23
 800146e:	20d0      	movs	r0, #208	; 0xd0
 8001470:	f7ff fd7a 	bl	8000f68 <writeByte>
	HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8001474:	2028      	movs	r0, #40	; 0x28
 8001476:	f001 ffb3 	bl	80033e0 <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x00); // Disable gyro and accelerometer sensors for FIFO
 800147a:	4622      	mov	r2, r4
 800147c:	2123      	movs	r1, #35	; 0x23
 800147e:	20d0      	movs	r0, #208	; 0xd0
 8001480:	f7ff fd72 	bl	8000f68 <writeByte>
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8001484:	ab09      	add	r3, sp, #36	; 0x24
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2302      	movs	r3, #2
 800148a:	2272      	movs	r2, #114	; 0x72
 800148c:	21d1      	movs	r1, #209	; 0xd1
 800148e:	20d0      	movs	r0, #208	; 0xd0
 8001490:	f7ff fdc4 	bl	800101c <readBytes>
	fifo_count = ((uint16_t) data[0] << 8) | data[1];
 8001494:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8001498:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800149c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	packet_count = fifo_count / 12; // How many sets of full gyro and accelerometer data for averaging
 80014a0:	4b6d      	ldr	r3, [pc, #436]	; (8001658 <calibrateMPU9250+0x2a4>)
 80014a2:	fba3 3505 	umull	r3, r5, r3, r5
 80014a6:	08ed      	lsrs	r5, r5, #3

	for (ii = 0; ii < packet_count; ii++) {
 80014a8:	e045      	b.n	8001536 <calibrateMPU9250+0x182>
		int16_t accel_temp[3] = { 0, 0, 0 }, gyro_temp[3] = { 0, 0, 0 };
		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, FIFO_R_W, 12,
 80014aa:	ab09      	add	r3, sp, #36	; 0x24
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	230c      	movs	r3, #12
 80014b0:	2274      	movs	r2, #116	; 0x74
 80014b2:	21d1      	movs	r1, #209	; 0xd1
 80014b4:	20d0      	movs	r0, #208	; 0xd0
 80014b6:	f7ff fdb1 	bl	800101c <readBytes>
				&data[0]); // read data for averaging
		accel_temp[0] = (int16_t) (((int16_t) data[0] << 8) | data[1]); // Form signed 16-bit integer for each sample in FIFO
 80014ba:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 80014be:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
 80014c2:	ea40 2808 	orr.w	r8, r0, r8, lsl #8
		accel_temp[1] = (int16_t) (((int16_t) data[2] << 8) | data[3]);
 80014c6:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
 80014ca:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 80014ce:	ea40 2e0e 	orr.w	lr, r0, lr, lsl #8
		accel_temp[2] = (int16_t) (((int16_t) data[4] << 8) | data[5]);
 80014d2:	f89d c028 	ldrb.w	ip, [sp, #40]	; 0x28
 80014d6:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 80014da:	ea40 2c0c 	orr.w	ip, r0, ip, lsl #8
		gyro_temp[0] = (int16_t) (((int16_t) data[6] << 8) | data[7]);
 80014de:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 80014e2:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
 80014e6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
		gyro_temp[1] = (int16_t) (((int16_t) data[8] << 8) | data[9]);
 80014ea:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80014ee:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80014f2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		gyro_temp[2] = (int16_t) (((int16_t) data[10] << 8) | data[11]);
 80014f6:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 80014fa:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 80014fe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001502:	9803      	ldr	r0, [sp, #12]
 8001504:	fa00 f088 	sxtah	r0, r0, r8
 8001508:	9003      	str	r0, [sp, #12]
		accel_bias[1] += (int32_t) accel_temp[1];
 800150a:	9804      	ldr	r0, [sp, #16]
 800150c:	fa00 f08e 	sxtah	r0, r0, lr
 8001510:	9004      	str	r0, [sp, #16]
		accel_bias[2] += (int32_t) accel_temp[2];
 8001512:	9805      	ldr	r0, [sp, #20]
 8001514:	fa00 f08c 	sxtah	r0, r0, ip
 8001518:	9005      	str	r0, [sp, #20]
		gyro_bias[0] += (int32_t) gyro_temp[0];
 800151a:	9806      	ldr	r0, [sp, #24]
 800151c:	fa00 f181 	sxtah	r1, r0, r1
 8001520:	9106      	str	r1, [sp, #24]
		gyro_bias[1] += (int32_t) gyro_temp[1];
 8001522:	9907      	ldr	r1, [sp, #28]
 8001524:	fa01 f282 	sxtah	r2, r1, r2
 8001528:	9207      	str	r2, [sp, #28]
		gyro_bias[2] += (int32_t) gyro_temp[2];
 800152a:	9a08      	ldr	r2, [sp, #32]
 800152c:	fa02 f383 	sxtah	r3, r2, r3
 8001530:	9308      	str	r3, [sp, #32]
	for (ii = 0; ii < packet_count; ii++) {
 8001532:	3401      	adds	r4, #1
 8001534:	b2a4      	uxth	r4, r4
 8001536:	42ac      	cmp	r4, r5
 8001538:	d3b7      	bcc.n	80014aa <calibrateMPU9250+0xf6>

	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 800153a:	9b03      	ldr	r3, [sp, #12]
 800153c:	fb93 f8f5 	sdiv	r8, r3, r5
	accel_bias[1] /= (int32_t) packet_count;
 8001540:	9b04      	ldr	r3, [sp, #16]
 8001542:	fb93 f4f5 	sdiv	r4, r3, r5
	accel_bias[2] /= (int32_t) packet_count;
 8001546:	9805      	ldr	r0, [sp, #20]
 8001548:	fb90 f0f5 	sdiv	r0, r0, r5
	gyro_bias[0] /= (int32_t) packet_count;
 800154c:	9906      	ldr	r1, [sp, #24]
 800154e:	fb91 f1f5 	sdiv	r1, r1, r5
	gyro_bias[1] /= (int32_t) packet_count;
 8001552:	9a07      	ldr	r2, [sp, #28]
 8001554:	fb92 f2f5 	sdiv	r2, r2, r5
	gyro_bias[2] /= (int32_t) packet_count;
 8001558:	9b08      	ldr	r3, [sp, #32]
 800155a:	fb93 f5f5 	sdiv	r5, r3, r5

	if (accel_bias[2] > 0L) {
 800155e:	2800      	cmp	r0, #0
 8001560:	dd4f      	ble.n	8001602 <calibrateMPU9250+0x24e>
		accel_bias[2] -= (int32_t) accelsensitivity;
 8001562:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 8001566:	9005      	str	r0, [sp, #20]
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
	}

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001568:	424b      	negs	r3, r1
 800156a:	2b00      	cmp	r3, #0
 800156c:	db4d      	blt.n	800160a <calibrateMPU9250+0x256>
 800156e:	1098      	asrs	r0, r3, #2
 8001570:	129b      	asrs	r3, r3, #10
 8001572:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data[1] = (-gyro_bias[0] / 4) & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8001576:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
	data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 800157a:	4253      	negs	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	db46      	blt.n	800160e <calibrateMPU9250+0x25a>
 8001580:	1098      	asrs	r0, r3, #2
 8001582:	129b      	asrs	r3, r3, #10
 8001584:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	data[3] = (-gyro_bias[1] / 4) & 0xFF;
 8001588:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
	data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 800158c:	426b      	negs	r3, r5
 800158e:	2b00      	cmp	r3, #0
 8001590:	db3f      	blt.n	8001612 <calibrateMPU9250+0x25e>
 8001592:	1098      	asrs	r0, r3, #2
 8001594:	129b      	asrs	r3, r3, #10
 8001596:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	data[5] = (-gyro_bias[2] / 4) & 0xFF;
 800159a:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
	 writeByte(MPU9250_ADDRESS_TX, YG_OFFSET_H, data[2]);
	 writeByte(MPU9250_ADDRESS_TX, YG_OFFSET_L, data[3]);
	 writeByte(MPU9250_ADDRESS_TX, ZG_OFFSET_H, data[4]);
	 writeByte(MPU9250_ADDRESS_TX, ZG_OFFSET_L, data[5]);
	 */
	dest1[0] = (float) gyro_bias[0] / (float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 800159e:	ee07 1a90 	vmov	s15, r1
 80015a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800165c <calibrateMPU9250+0x2a8>
 80015aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015ae:	edc7 6a00 	vstr	s13, [r7]
	dest1[1] = (float) gyro_bias[1] / (float) gyrosensitivity;
 80015b2:	ee07 2a90 	vmov	s15, r2
 80015b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015be:	edc7 6a01 	vstr	s13, [r7, #4]
	dest1[2] = (float) gyro_bias[2] / (float) gyrosensitivity;
 80015c2:	ee07 5a90 	vmov	s15, r5
 80015c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015ce:	edc7 6a02 	vstr	s13, [r7, #8]
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = { 0, 0, 0 }; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 80015d2:	ad09      	add	r5, sp, #36	; 0x24
 80015d4:	9500      	str	r5, [sp, #0]
 80015d6:	2302      	movs	r3, #2
 80015d8:	2277      	movs	r2, #119	; 0x77
 80015da:	21d1      	movs	r1, #209	; 0xd1
 80015dc:	20d0      	movs	r0, #208	; 0xd0
 80015de:	f7ff fd1d 	bl	800101c <readBytes>
	accel_bias_reg[0] = (int16_t) ((int16_t) data[0] << 8) | data[1];
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, YA_OFFSET_H, 2, &data[0]);
 80015e2:	9500      	str	r5, [sp, #0]
 80015e4:	2302      	movs	r3, #2
 80015e6:	227a      	movs	r2, #122	; 0x7a
 80015e8:	21d1      	movs	r1, #209	; 0xd1
 80015ea:	20d0      	movs	r0, #208	; 0xd0
 80015ec:	f7ff fd16 	bl	800101c <readBytes>
	accel_bias_reg[1] = (int16_t) ((int16_t) data[0] << 8) | data[1];
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ZA_OFFSET_H, 2, &data[0]);
 80015f0:	9500      	str	r5, [sp, #0]
 80015f2:	2302      	movs	r3, #2
 80015f4:	227d      	movs	r2, #125	; 0x7d
 80015f6:	21d1      	movs	r1, #209	; 0xd1
 80015f8:	20d0      	movs	r0, #208	; 0xd0
 80015fa:	f7ff fd0f 	bl	800101c <readBytes>
	accel_bias_reg[2] = (int16_t) ((int16_t) data[0] << 8) | data[1];

	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = { 0, 0, 0 }; // Define array to hold mask bit for each accelerometer bias axis

	for (ii = 0; ii < 3; ii++) {
 80015fe:	2300      	movs	r3, #0
 8001600:	e00b      	b.n	800161a <calibrateMPU9250+0x266>
		accel_bias[2] += (int32_t) accelsensitivity;
 8001602:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8001606:	9005      	str	r0, [sp, #20]
 8001608:	e7ae      	b.n	8001568 <calibrateMPU9250+0x1b4>
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 800160a:	3303      	adds	r3, #3
 800160c:	e7af      	b.n	800156e <calibrateMPU9250+0x1ba>
	data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 800160e:	3303      	adds	r3, #3
 8001610:	e7b6      	b.n	8001580 <calibrateMPU9250+0x1cc>
	data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 8001612:	3303      	adds	r3, #3
 8001614:	e7bd      	b.n	8001592 <calibrateMPU9250+0x1de>
	for (ii = 0; ii < 3; ii++) {
 8001616:	3301      	adds	r3, #1
 8001618:	b29b      	uxth	r3, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d9fb      	bls.n	8001616 <calibrateMPU9250+0x262>
	 writeByte(MPU9250_ADDRESS_TX, YA_OFFSET_L, data[3]);
	 writeByte(MPU9250_ADDRESS_TX, ZA_OFFSET_H, data[4]);
	 writeByte(MPU9250_ADDRESS_TX, ZA_OFFSET_L, data[5]);
	 */
	// Output scaled accelerometer biases for manual subtraction in the main program
	dest2[0] = (float) accel_bias[0] / (float) accelsensitivity;
 800161e:	ee07 8a90 	vmov	s15, r8
 8001622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001626:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001660 <calibrateMPU9250+0x2ac>
 800162a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162e:	edc6 7a00 	vstr	s15, [r6]
	dest2[1] = (float) accel_bias[1] / (float) accelsensitivity;
 8001632:	ee07 4a90 	vmov	s15, r4
 8001636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800163e:	edc6 7a01 	vstr	s15, [r6, #4]
	dest2[2] = (float) accel_bias[2] / (float) accelsensitivity;
 8001642:	eddd 7a05 	vldr	s15, [sp, #20]
 8001646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800164e:	edc6 7a02 	vstr	s15, [r6, #8]
}
 8001652:	b00c      	add	sp, #48	; 0x30
 8001654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001658:	aaaaaaab 	.word	0xaaaaaaab
 800165c:	43030000 	.word	0x43030000
 8001660:	38800000 	.word	0x38800000
 8001664:	00000000 	.word	0x00000000

08001668 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
		{
 8001668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800166c:	ed2d 8b08 	vpush	{d8-d11}
 8001670:	b093      	sub	sp, #76	; 0x4c
 8001672:	4605      	mov	r5, r0
	uint8_t rawData[6] = { 0, 0, 0, 0, 0, 0 };
 8001674:	2400      	movs	r4, #0
 8001676:	9410      	str	r4, [sp, #64]	; 0x40
 8001678:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
	uint8_t selfTest[6];
	int16_t gAvg[3], aAvg[3], aSTAvg[3], gSTAvg[3];
	float factoryTrim[6];
	uint8_t FS = 0;

	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 800167c:	4622      	mov	r2, r4
 800167e:	2119      	movs	r1, #25
 8001680:	20d0      	movs	r0, #208	; 0xd0
 8001682:	f7ff fc71 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8001686:	2202      	movs	r2, #2
 8001688:	211a      	movs	r1, #26
 800168a:	20d0      	movs	r0, #208	; 0xd0
 800168c:	f7ff fc6c 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 1 << FS); // Set full scale range for the gyro to 250 dps
 8001690:	2201      	movs	r2, #1
 8001692:	211b      	movs	r1, #27
 8001694:	20d0      	movs	r0, #208	; 0xd0
 8001696:	f7ff fc67 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 800169a:	2202      	movs	r2, #2
 800169c:	211d      	movs	r1, #29
 800169e:	20d0      	movs	r0, #208	; 0xd0
 80016a0:	f7ff fc62 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 1 << FS); // Set full scale range for the accelerometer to 2 g
 80016a4:	2201      	movs	r2, #1
 80016a6:	211c      	movs	r1, #28
 80016a8:	20d0      	movs	r0, #208	; 0xd0
 80016aa:	f7ff fc5d 	bl	8000f68 <writeByte>

	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 80016ae:	e051      	b.n	8001754 <MPU9250SelfTest+0xec>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 80016b0:	ae10      	add	r6, sp, #64	; 0x40
 80016b2:	9600      	str	r6, [sp, #0]
 80016b4:	2306      	movs	r3, #6
 80016b6:	223b      	movs	r2, #59	; 0x3b
 80016b8:	21d1      	movs	r1, #209	; 0xd1
 80016ba:	20d0      	movs	r0, #208	; 0xd0
 80016bc:	f7ff fcae 	bl	800101c <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80016c0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80016c4:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80016c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016cc:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80016d0:	4413      	add	r3, r2
 80016d2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		aAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80016d6:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80016da:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80016de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016e2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80016e6:	4413      	add	r3, r2
 80016e8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		aAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80016ec:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80016f0:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 80016f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016f8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80016fc:	4413      	add	r3, r2
 80016fe:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 8001702:	9600      	str	r6, [sp, #0]
 8001704:	2306      	movs	r3, #6
 8001706:	2243      	movs	r2, #67	; 0x43
 8001708:	21d1      	movs	r1, #209	; 0xd1
 800170a:	20d0      	movs	r0, #208	; 0xd0
 800170c:	f7ff fc86 	bl	800101c <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001710:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001714:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001718:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800171c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8001720:	4413      	add	r3, r2
 8001722:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		gAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001726:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 800172a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800172e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001732:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8001736:	4413      	add	r3, r2
 8001738:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		gAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800173c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001740:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001744:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001748:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800174c:	4413      	add	r3, r2
 800174e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 8001752:	3401      	adds	r4, #1
 8001754:	2cc7      	cmp	r4, #199	; 0xc7
 8001756:	ddab      	ble.n	80016b0 <MPU9250SelfTest+0x48>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8001758:	2400      	movs	r4, #0
 800175a:	e016      	b.n	800178a <MPU9250SelfTest+0x122>
		aAvg[ii] /= 200;
 800175c:	ab12      	add	r3, sp, #72	; 0x48
 800175e:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 8001762:	f931 2c18 	ldrsh.w	r2, [r1, #-24]
 8001766:	48c0      	ldr	r0, [pc, #768]	; (8001a68 <MPU9250SelfTest+0x400>)
 8001768:	fb80 6302 	smull	r6, r3, r0, r2
 800176c:	17d2      	asrs	r2, r2, #31
 800176e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8001772:	f821 2c18 	strh.w	r2, [r1, #-24]
		gAvg[ii] /= 200;
 8001776:	f931 3c10 	ldrsh.w	r3, [r1, #-16]
 800177a:	fb80 2003 	smull	r2, r0, r0, r3
 800177e:	17db      	asrs	r3, r3, #31
 8001780:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 8001784:	f821 3c10 	strh.w	r3, [r1, #-16]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8001788:	3401      	adds	r4, #1
 800178a:	2c02      	cmp	r4, #2
 800178c:	dde6      	ble.n	800175c <MPU9250SelfTest+0xf4>
	}

	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 800178e:	22e0      	movs	r2, #224	; 0xe0
 8001790:	211c      	movs	r1, #28
 8001792:	20d0      	movs	r0, #208	; 0xd0
 8001794:	f7ff fbe8 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8001798:	22e0      	movs	r2, #224	; 0xe0
 800179a:	211b      	movs	r1, #27
 800179c:	20d0      	movs	r0, #208	; 0xd0
 800179e:	f7ff fbe3 	bl	8000f68 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 80017a2:	2019      	movs	r0, #25
 80017a4:	f001 fe1c 	bl	80033e0 <HAL_Delay>

	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 80017a8:	2400      	movs	r4, #0
 80017aa:	e051      	b.n	8001850 <MPU9250SelfTest+0x1e8>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 80017ac:	ae10      	add	r6, sp, #64	; 0x40
 80017ae:	9600      	str	r6, [sp, #0]
 80017b0:	2306      	movs	r3, #6
 80017b2:	223b      	movs	r2, #59	; 0x3b
 80017b4:	21d1      	movs	r1, #209	; 0xd1
 80017b6:	20d0      	movs	r0, #208	; 0xd0
 80017b8:	f7ff fc30 	bl	800101c <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80017bc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80017c0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80017c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017c8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80017cc:	4413      	add	r3, r2
 80017ce:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		aSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80017d2:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80017d6:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80017da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017de:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80017e2:	4413      	add	r3, r2
 80017e4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		aSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80017e8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80017ec:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 80017f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017f4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80017f8:	4413      	add	r3, r2
 80017fa:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 80017fe:	9600      	str	r6, [sp, #0]
 8001800:	2306      	movs	r3, #6
 8001802:	2243      	movs	r2, #67	; 0x43
 8001804:	21d1      	movs	r1, #209	; 0xd1
 8001806:	20d0      	movs	r0, #208	; 0xd0
 8001808:	f7ff fc08 	bl	800101c <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800180c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001810:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001814:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001818:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800181c:	4413      	add	r3, r2
 800181e:	f8ad 3020 	strh.w	r3, [sp, #32]
		gSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001822:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8001826:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800182a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800182e:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8001832:	4413      	add	r3, r2
 8001834:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		gSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001838:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800183c:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001840:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001844:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8001848:	4413      	add	r3, r2
 800184a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 800184e:	3401      	adds	r4, #1
 8001850:	2cc7      	cmp	r4, #199	; 0xc7
 8001852:	ddab      	ble.n	80017ac <MPU9250SelfTest+0x144>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8001854:	2400      	movs	r4, #0
 8001856:	e016      	b.n	8001886 <MPU9250SelfTest+0x21e>
		aSTAvg[ii] /= 200;
 8001858:	ab12      	add	r3, sp, #72	; 0x48
 800185a:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 800185e:	f931 2c20 	ldrsh.w	r2, [r1, #-32]
 8001862:	4881      	ldr	r0, [pc, #516]	; (8001a68 <MPU9250SelfTest+0x400>)
 8001864:	fb80 6302 	smull	r6, r3, r0, r2
 8001868:	17d2      	asrs	r2, r2, #31
 800186a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 800186e:	f821 2c20 	strh.w	r2, [r1, #-32]
		gSTAvg[ii] /= 200;
 8001872:	f931 3c28 	ldrsh.w	r3, [r1, #-40]
 8001876:	fb80 2003 	smull	r2, r0, r0, r3
 800187a:	17db      	asrs	r3, r3, #31
 800187c:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 8001880:	f821 3c28 	strh.w	r3, [r1, #-40]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8001884:	3401      	adds	r4, #1
 8001886:	2c02      	cmp	r4, #2
 8001888:	dde6      	ble.n	8001858 <MPU9250SelfTest+0x1f0>
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00);
 800188a:	2200      	movs	r2, #0
 800188c:	211c      	movs	r1, #28
 800188e:	20d0      	movs	r0, #208	; 0xd0
 8001890:	f7ff fb6a 	bl	8000f68 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00);
 8001894:	2200      	movs	r2, #0
 8001896:	211b      	movs	r1, #27
 8001898:	20d0      	movs	r0, #208	; 0xd0
 800189a:	f7ff fb65 	bl	8000f68 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 800189e:	2019      	movs	r0, #25
 80018a0:	f001 fd9e 	bl	80033e0 <HAL_Delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018a4:	220d      	movs	r2, #13
 80018a6:	21d1      	movs	r1, #209	; 0xd1
 80018a8:	20d0      	movs	r0, #208	; 0xd0
 80018aa:	f7ff fb71 	bl	8000f90 <readByte>
 80018ae:	ee08 0a10 	vmov	s16, r0
	SELF_TEST_X_ACCEL); // X-axis accel self-test results
	selfTest[1] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018b2:	220e      	movs	r2, #14
 80018b4:	21d1      	movs	r1, #209	; 0xd1
 80018b6:	20d0      	movs	r0, #208	; 0xd0
 80018b8:	f7ff fb6a 	bl	8000f90 <readByte>
 80018bc:	ee0b 0a10 	vmov	s22, r0
	SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
	selfTest[2] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018c0:	220f      	movs	r2, #15
 80018c2:	21d1      	movs	r1, #209	; 0xd1
 80018c4:	20d0      	movs	r0, #208	; 0xd0
 80018c6:	f7ff fb63 	bl	8000f90 <readByte>
 80018ca:	ee0a 0a90 	vmov	s21, r0
	SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
	selfTest[3] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018ce:	2200      	movs	r2, #0
 80018d0:	21d1      	movs	r1, #209	; 0xd1
 80018d2:	20d0      	movs	r0, #208	; 0xd0
 80018d4:	f7ff fb5c 	bl	8000f90 <readByte>
 80018d8:	ee0a 0a10 	vmov	s20, r0
	SELF_TEST_X_GYRO); // X-axis gyro self-test results
	selfTest[4] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018dc:	2201      	movs	r2, #1
 80018de:	21d1      	movs	r1, #209	; 0xd1
 80018e0:	20d0      	movs	r0, #208	; 0xd0
 80018e2:	f7ff fb55 	bl	8000f90 <readByte>
 80018e6:	ee09 0a90 	vmov	s19, r0
	SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
	selfTest[5] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018ea:	2202      	movs	r2, #2
 80018ec:	21d1      	movs	r1, #209	; 0xd1
 80018ee:	20d0      	movs	r0, #208	; 0xd0
 80018f0:	f7ff fb4e 	bl	8000f90 <readByte>
 80018f4:	ee09 0a10 	vmov	s18, r0
	SELF_TEST_Z_GYRO); // Z-axis gyro self-test results

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 80018f8:	eef8 7a48 	vcvt.f32.u32	s15, s16
 80018fc:	ee17 0a90 	vmov	r0, s15
 8001900:	f7fe fdd2 	bl	80004a8 <__aeabi_f2d>
 8001904:	2200      	movs	r2, #0
 8001906:	4b59      	ldr	r3, [pc, #356]	; (8001a6c <MPU9250SelfTest+0x404>)
 8001908:	f7fe fc6e 	bl	80001e8 <__aeabi_dsub>
 800190c:	ed9f 8b52 	vldr	d8, [pc, #328]	; 8001a58 <MPU9250SelfTest+0x3f0>
 8001910:	ec41 0b11 	vmov	d1, r0, r1
 8001914:	eeb0 0a48 	vmov.f32	s0, s16
 8001918:	eef0 0a68 	vmov.f32	s1, s17
 800191c:	f008 f998 	bl	8009c50 <pow>
 8001920:	a34f      	add	r3, pc, #316	; (adr r3, 8001a60 <MPU9250SelfTest+0x3f8>)
 8001922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001926:	ec51 0b10 	vmov	r0, r1, d0
 800192a:	f7fe fe15 	bl	8000558 <__aeabi_dmul>
 800192e:	f7ff f825 	bl	800097c <__aeabi_d2f>
	factoryTrim[0] = (float) (2620 / 1 << FS)
 8001932:	9002      	str	r0, [sp, #8]
	factoryTrim[1] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 8001934:	eef8 7a4b 	vcvt.f32.u32	s15, s22
 8001938:	ee17 0a90 	vmov	r0, s15
 800193c:	f7fe fdb4 	bl	80004a8 <__aeabi_f2d>
 8001940:	2200      	movs	r2, #0
 8001942:	4b4a      	ldr	r3, [pc, #296]	; (8001a6c <MPU9250SelfTest+0x404>)
 8001944:	f7fe fc50 	bl	80001e8 <__aeabi_dsub>
 8001948:	ec41 0b11 	vmov	d1, r0, r1
 800194c:	eeb0 0a48 	vmov.f32	s0, s16
 8001950:	eef0 0a68 	vmov.f32	s1, s17
 8001954:	f008 f97c 	bl	8009c50 <pow>
 8001958:	a341      	add	r3, pc, #260	; (adr r3, 8001a60 <MPU9250SelfTest+0x3f8>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	ec51 0b10 	vmov	r0, r1, d0
 8001962:	f7fe fdf9 	bl	8000558 <__aeabi_dmul>
 8001966:	f7ff f809 	bl	800097c <__aeabi_d2f>
	factoryTrim[1] = (float) (2620 / 1 << FS)
 800196a:	9003      	str	r0, [sp, #12]
	factoryTrim[2] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 800196c:	eef8 7a6a 	vcvt.f32.u32	s15, s21
 8001970:	ee17 0a90 	vmov	r0, s15
 8001974:	f7fe fd98 	bl	80004a8 <__aeabi_f2d>
 8001978:	2200      	movs	r2, #0
 800197a:	4b3c      	ldr	r3, [pc, #240]	; (8001a6c <MPU9250SelfTest+0x404>)
 800197c:	f7fe fc34 	bl	80001e8 <__aeabi_dsub>
 8001980:	ec41 0b11 	vmov	d1, r0, r1
 8001984:	eeb0 0a48 	vmov.f32	s0, s16
 8001988:	eef0 0a68 	vmov.f32	s1, s17
 800198c:	f008 f960 	bl	8009c50 <pow>
 8001990:	a333      	add	r3, pc, #204	; (adr r3, 8001a60 <MPU9250SelfTest+0x3f8>)
 8001992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001996:	ec51 0b10 	vmov	r0, r1, d0
 800199a:	f7fe fddd 	bl	8000558 <__aeabi_dmul>
 800199e:	f7fe ffed 	bl	800097c <__aeabi_d2f>
	factoryTrim[2] = (float) (2620 / 1 << FS)
 80019a2:	9004      	str	r0, [sp, #16]
	factoryTrim[3] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 80019a4:	eef8 7a4a 	vcvt.f32.u32	s15, s20
 80019a8:	ee17 0a90 	vmov	r0, s15
 80019ac:	f7fe fd7c 	bl	80004a8 <__aeabi_f2d>
 80019b0:	2200      	movs	r2, #0
 80019b2:	4b2e      	ldr	r3, [pc, #184]	; (8001a6c <MPU9250SelfTest+0x404>)
 80019b4:	f7fe fc18 	bl	80001e8 <__aeabi_dsub>
 80019b8:	ec41 0b11 	vmov	d1, r0, r1
 80019bc:	eeb0 0a48 	vmov.f32	s0, s16
 80019c0:	eef0 0a68 	vmov.f32	s1, s17
 80019c4:	f008 f944 	bl	8009c50 <pow>
 80019c8:	a325      	add	r3, pc, #148	; (adr r3, 8001a60 <MPU9250SelfTest+0x3f8>)
 80019ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ce:	ec51 0b10 	vmov	r0, r1, d0
 80019d2:	f7fe fdc1 	bl	8000558 <__aeabi_dmul>
 80019d6:	f7fe ffd1 	bl	800097c <__aeabi_d2f>
	factoryTrim[3] = (float) (2620 / 1 << FS)
 80019da:	9005      	str	r0, [sp, #20]
	factoryTrim[4] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 80019dc:	eef8 7a69 	vcvt.f32.u32	s15, s19
 80019e0:	ee17 0a90 	vmov	r0, s15
 80019e4:	f7fe fd60 	bl	80004a8 <__aeabi_f2d>
 80019e8:	2200      	movs	r2, #0
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <MPU9250SelfTest+0x404>)
 80019ec:	f7fe fbfc 	bl	80001e8 <__aeabi_dsub>
 80019f0:	ec41 0b11 	vmov	d1, r0, r1
 80019f4:	eeb0 0a48 	vmov.f32	s0, s16
 80019f8:	eef0 0a68 	vmov.f32	s1, s17
 80019fc:	f008 f928 	bl	8009c50 <pow>
 8001a00:	a317      	add	r3, pc, #92	; (adr r3, 8001a60 <MPU9250SelfTest+0x3f8>)
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	ec51 0b10 	vmov	r0, r1, d0
 8001a0a:	f7fe fda5 	bl	8000558 <__aeabi_dmul>
 8001a0e:	f7fe ffb5 	bl	800097c <__aeabi_d2f>
	factoryTrim[4] = (float) (2620 / 1 << FS)
 8001a12:	9006      	str	r0, [sp, #24]
	factoryTrim[5] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 8001a14:	eef8 7a49 	vcvt.f32.u32	s15, s18
 8001a18:	ee17 0a90 	vmov	r0, s15
 8001a1c:	f7fe fd44 	bl	80004a8 <__aeabi_f2d>
 8001a20:	2200      	movs	r2, #0
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <MPU9250SelfTest+0x404>)
 8001a24:	f7fe fbe0 	bl	80001e8 <__aeabi_dsub>
 8001a28:	ec41 0b11 	vmov	d1, r0, r1
 8001a2c:	eeb0 0a48 	vmov.f32	s0, s16
 8001a30:	eef0 0a68 	vmov.f32	s1, s17
 8001a34:	f008 f90c 	bl	8009c50 <pow>
 8001a38:	a309      	add	r3, pc, #36	; (adr r3, 8001a60 <MPU9250SelfTest+0x3f8>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	ec51 0b10 	vmov	r0, r1, d0
 8001a42:	f7fe fd89 	bl	8000558 <__aeabi_dmul>
 8001a46:	f7fe ff99 	bl	800097c <__aeabi_d2f>
	factoryTrim[5] = (float) (2620 / 1 << FS)
 8001a4a:	9007      	str	r0, [sp, #28]

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 8001a4c:	f04f 0800 	mov.w	r8, #0
 8001a50:	e05f      	b.n	8001b12 <MPU9250SelfTest+0x4aa>
 8001a52:	bf00      	nop
 8001a54:	f3af 8000 	nop.w
 8001a58:	c28f5c29 	.word	0xc28f5c29
 8001a5c:	3ff028f5 	.word	0x3ff028f5
 8001a60:	00000000 	.word	0x00000000
 8001a64:	40a47800 	.word	0x40a47800
 8001a68:	51eb851f 	.word	0x51eb851f
 8001a6c:	3ff00000 	.word	0x3ff00000
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001a70:	ab12      	add	r3, sp, #72	; 0x48
 8001a72:	eb03 0448 	add.w	r4, r3, r8, lsl #1
 8001a76:	f934 0c20 	ldrsh.w	r0, [r4, #-32]
 8001a7a:	f934 3c18 	ldrsh.w	r3, [r4, #-24]
 8001a7e:	1ac0      	subs	r0, r0, r3
 8001a80:	ee07 0a90 	vmov	s15, r0
 8001a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a88:	ee17 0a90 	vmov	r0, s15
 8001a8c:	f7fe fd0c 	bl	80004a8 <__aeabi_f2d>
 8001a90:	2200      	movs	r2, #0
 8001a92:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <MPU9250SelfTest+0x4bc>)
 8001a94:	f7fe fd60 	bl	8000558 <__aeabi_dmul>
 8001a98:	4606      	mov	r6, r0
 8001a9a:	460f      	mov	r7, r1
				/ factoryTrim[i]; // Report percent differences
 8001a9c:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8001aa0:	ab12      	add	r3, sp, #72	; 0x48
 8001aa2:	444b      	add	r3, r9
 8001aa4:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001aa8:	f7fe fcfe 	bl	80004a8 <__aeabi_f2d>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001aac:	44a9      	add	r9, r5
				/ factoryTrim[i]; // Report percent differences
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4630      	mov	r0, r6
 8001ab4:	4639      	mov	r1, r7
 8001ab6:	f7fe fe79 	bl	80007ac <__aeabi_ddiv>
 8001aba:	f7fe ff5f 	bl	800097c <__aeabi_d2f>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001abe:	f8c9 0000 	str.w	r0, [r9]
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001ac2:	f934 0c28 	ldrsh.w	r0, [r4, #-40]
 8001ac6:	f934 3c10 	ldrsh.w	r3, [r4, #-16]
 8001aca:	1ac0      	subs	r0, r0, r3
 8001acc:	ee07 0a90 	vmov	s15, r0
 8001ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad4:	ee17 0a90 	vmov	r0, s15
 8001ad8:	f7fe fce6 	bl	80004a8 <__aeabi_f2d>
 8001adc:	2200      	movs	r2, #0
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <MPU9250SelfTest+0x4bc>)
 8001ae0:	f7fe fd3a 	bl	8000558 <__aeabi_dmul>
 8001ae4:	4606      	mov	r6, r0
 8001ae6:	460f      	mov	r7, r1
				/ factoryTrim[i + 3]; // Report percent differences
 8001ae8:	f108 0403 	add.w	r4, r8, #3
 8001aec:	00a4      	lsls	r4, r4, #2
 8001aee:	ab12      	add	r3, sp, #72	; 0x48
 8001af0:	4423      	add	r3, r4
 8001af2:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001af6:	f7fe fcd7 	bl	80004a8 <__aeabi_f2d>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001afa:	442c      	add	r4, r5
				/ factoryTrim[i + 3]; // Report percent differences
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4630      	mov	r0, r6
 8001b02:	4639      	mov	r1, r7
 8001b04:	f7fe fe52 	bl	80007ac <__aeabi_ddiv>
 8001b08:	f7fe ff38 	bl	800097c <__aeabi_d2f>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001b0c:	6020      	str	r0, [r4, #0]
	for (int i = 0; i < 3; i++) {
 8001b0e:	f108 0801 	add.w	r8, r8, #1
 8001b12:	f1b8 0f02 	cmp.w	r8, #2
 8001b16:	ddab      	ble.n	8001a70 <MPU9250SelfTest+0x408>
	}

}
 8001b18:	b013      	add	sp, #76	; 0x4c
 8001b1a:	ecbd 8b08 	vpop	{d8-d11}
 8001b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b22:	bf00      	nop
 8001b24:	40590000 	.word	0x40590000

08001b28 <imu_calibrate>:
IMU_StatusTypeDef imu_calibrate() {
 8001b28:	b538      	push	{r3, r4, r5, lr}
	resetMPU9250();
 8001b2a:	f7ff fb64 	bl	80011f6 <resetMPU9250>
	MPU9250SelfTest(SelfTest); // Start by performing self test and reporting values
 8001b2e:	4c53      	ldr	r4, [pc, #332]	; (8001c7c <imu_calibrate+0x154>)
 8001b30:	4620      	mov	r0, r4
 8001b32:	f7ff fd99 	bl	8001668 <MPU9250SelfTest>
	printf(	"x-axis self test: acceleration trim within : %f of factory value\n\r", SelfTest[0]);
 8001b36:	6820      	ldr	r0, [r4, #0]
 8001b38:	f7fe fcb6 	bl	80004a8 <__aeabi_f2d>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	484f      	ldr	r0, [pc, #316]	; (8001c80 <imu_calibrate+0x158>)
 8001b42:	f005 ff4b 	bl	80079dc <iprintf>
	printf(
 8001b46:	6860      	ldr	r0, [r4, #4]
 8001b48:	f7fe fcae 	bl	80004a8 <__aeabi_f2d>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	484c      	ldr	r0, [pc, #304]	; (8001c84 <imu_calibrate+0x15c>)
 8001b52:	f005 ff43 	bl	80079dc <iprintf>
	printf(
 8001b56:	68a0      	ldr	r0, [r4, #8]
 8001b58:	f7fe fca6 	bl	80004a8 <__aeabi_f2d>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4849      	ldr	r0, [pc, #292]	; (8001c88 <imu_calibrate+0x160>)
 8001b62:	f005 ff3b 	bl	80079dc <iprintf>
	printf("x-axis self test: gyration trim within : %f  of factory value\n\r",
 8001b66:	68e0      	ldr	r0, [r4, #12]
 8001b68:	f7fe fc9e 	bl	80004a8 <__aeabi_f2d>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4846      	ldr	r0, [pc, #280]	; (8001c8c <imu_calibrate+0x164>)
 8001b72:	f005 ff33 	bl	80079dc <iprintf>
	printf("y-axis self test: gyration trim within : %f  of factory value\n\r",
 8001b76:	6920      	ldr	r0, [r4, #16]
 8001b78:	f7fe fc96 	bl	80004a8 <__aeabi_f2d>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4843      	ldr	r0, [pc, #268]	; (8001c90 <imu_calibrate+0x168>)
 8001b82:	f005 ff2b 	bl	80079dc <iprintf>
	printf("z-axis self test: gyration trim within : %f  of factory value\n\r",
 8001b86:	6960      	ldr	r0, [r4, #20]
 8001b88:	f7fe fc8e 	bl	80004a8 <__aeabi_f2d>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4840      	ldr	r0, [pc, #256]	; (8001c94 <imu_calibrate+0x16c>)
 8001b92:	f005 ff23 	bl	80079dc <iprintf>
	calibrateMPU9250(gyroBias, accelBias); // Calibrate gyro and accelerometers, load biases in bias registers
 8001b96:	4c40      	ldr	r4, [pc, #256]	; (8001c98 <imu_calibrate+0x170>)
 8001b98:	4d40      	ldr	r5, [pc, #256]	; (8001c9c <imu_calibrate+0x174>)
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	4628      	mov	r0, r5
 8001b9e:	f7ff fc09 	bl	80013b4 <calibrateMPU9250>
	printf("x gyro bias = %f\n\r", gyroBias[0]);
 8001ba2:	6828      	ldr	r0, [r5, #0]
 8001ba4:	f7fe fc80 	bl	80004a8 <__aeabi_f2d>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	483c      	ldr	r0, [pc, #240]	; (8001ca0 <imu_calibrate+0x178>)
 8001bae:	f005 ff15 	bl	80079dc <iprintf>
	printf("y gyro bias = %f\n\r", gyroBias[1]);
 8001bb2:	6868      	ldr	r0, [r5, #4]
 8001bb4:	f7fe fc78 	bl	80004a8 <__aeabi_f2d>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4839      	ldr	r0, [pc, #228]	; (8001ca4 <imu_calibrate+0x17c>)
 8001bbe:	f005 ff0d 	bl	80079dc <iprintf>
	printf("z gyro bias = %f\n\r", gyroBias[2]);
 8001bc2:	68a8      	ldr	r0, [r5, #8]
 8001bc4:	f7fe fc70 	bl	80004a8 <__aeabi_f2d>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4836      	ldr	r0, [pc, #216]	; (8001ca8 <imu_calibrate+0x180>)
 8001bce:	f005 ff05 	bl	80079dc <iprintf>
	printf("x accel bias = %f\n\r", accelBias[0]);
 8001bd2:	6820      	ldr	r0, [r4, #0]
 8001bd4:	f7fe fc68 	bl	80004a8 <__aeabi_f2d>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4833      	ldr	r0, [pc, #204]	; (8001cac <imu_calibrate+0x184>)
 8001bde:	f005 fefd 	bl	80079dc <iprintf>
	printf("y accel bias = %f\n\r", accelBias[1]);
 8001be2:	6860      	ldr	r0, [r4, #4]
 8001be4:	f7fe fc60 	bl	80004a8 <__aeabi_f2d>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4830      	ldr	r0, [pc, #192]	; (8001cb0 <imu_calibrate+0x188>)
 8001bee:	f005 fef5 	bl	80079dc <iprintf>
	printf("z accel bias = %f\n\r", accelBias[2]);
 8001bf2:	68a0      	ldr	r0, [r4, #8]
 8001bf4:	f7fe fc58 	bl	80004a8 <__aeabi_f2d>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	482d      	ldr	r0, [pc, #180]	; (8001cb4 <imu_calibrate+0x18c>)
 8001bfe:	f005 feed 	bl	80079dc <iprintf>
	initMPU9250();
 8001c02:	f7ff fb67 	bl	80012d4 <initMPU9250>
	initAK8963(magCalibration);
 8001c06:	482c      	ldr	r0, [pc, #176]	; (8001cb8 <imu_calibrate+0x190>)
 8001c08:	f7ff fb00 	bl	800120c <initAK8963>
	printf("Accelerometer full-scale range = %f  g\n\r", 2.0f*(float)(1<<Ascale));
 8001c0c:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <imu_calibrate+0x194>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2401      	movs	r4, #1
 8001c12:	fa04 f303 	lsl.w	r3, r4, r3
 8001c16:	ee07 3a90 	vmov	s15, r3
 8001c1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c22:	ee17 0a90 	vmov	r0, s15
 8001c26:	f7fe fc3f 	bl	80004a8 <__aeabi_f2d>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4824      	ldr	r0, [pc, #144]	; (8001cc0 <imu_calibrate+0x198>)
 8001c30:	f005 fed4 	bl	80079dc <iprintf>
	printf("Gyroscope full-scale range = %f  deg/s\n\r", 250.0f*(float)(1<<Gscale));
 8001c34:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <imu_calibrate+0x19c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	409c      	lsls	r4, r3
 8001c3a:	ee07 4a90 	vmov	s15, r4
 8001c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c42:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001cc8 <imu_calibrate+0x1a0>
 8001c46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c4a:	ee17 0a90 	vmov	r0, s15
 8001c4e:	f7fe fc2b 	bl	80004a8 <__aeabi_f2d>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	481d      	ldr	r0, [pc, #116]	; (8001ccc <imu_calibrate+0x1a4>)
 8001c58:	f005 fec0 	bl	80079dc <iprintf>
	getAres(); // Get accelerometer sensitivity
 8001c5c:	f7ff fa40 	bl	80010e0 <getAres>
	getGres(); // Get gyro sensitivity
 8001c60:	f7ff fa1a 	bl	8001098 <getGres>
	getMres(); // Get magnetometer sensitivity
 8001c64:	f7ff fa02 	bl	800106c <getMres>
	magbias[0] = +470.; // User environmental x-axis correction in milliGauss, should be automatically calculated
 8001c68:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <imu_calibrate+0x1a8>)
 8001c6a:	4a1a      	ldr	r2, [pc, #104]	; (8001cd4 <imu_calibrate+0x1ac>)
 8001c6c:	601a      	str	r2, [r3, #0]
	magbias[1] = +120.; // User environmental x-axis correction in milliGauss
 8001c6e:	4a1a      	ldr	r2, [pc, #104]	; (8001cd8 <imu_calibrate+0x1b0>)
 8001c70:	605a      	str	r2, [r3, #4]
	magbias[2] = +125.; // User environmental x-axis correction in milliGauss
 8001c72:	4a1a      	ldr	r2, [pc, #104]	; (8001cdc <imu_calibrate+0x1b4>)
 8001c74:	609a      	str	r2, [r3, #8]
}
 8001c76:	2000      	movs	r0, #0
 8001c78:	bd38      	pop	{r3, r4, r5, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000380 	.word	0x20000380
 8001c80:	0800b6f0 	.word	0x0800b6f0
 8001c84:	0800b734 	.word	0x0800b734
 8001c88:	0800b778 	.word	0x0800b778
 8001c8c:	0800b7bc 	.word	0x0800b7bc
 8001c90:	0800b7fc 	.word	0x0800b7fc
 8001c94:	0800b83c 	.word	0x0800b83c
 8001c98:	20000004 	.word	0x20000004
 8001c9c:	20000010 	.word	0x20000010
 8001ca0:	0800b87c 	.word	0x0800b87c
 8001ca4:	0800b890 	.word	0x0800b890
 8001ca8:	0800b8a4 	.word	0x0800b8a4
 8001cac:	0800b8b8 	.word	0x0800b8b8
 8001cb0:	0800b8cc 	.word	0x0800b8cc
 8001cb4:	0800b8e0 	.word	0x0800b8e0
 8001cb8:	20000270 	.word	0x20000270
 8001cbc:	20000254 	.word	0x20000254
 8001cc0:	0800b8f4 	.word	0x0800b8f4
 8001cc4:	20000255 	.word	0x20000255
 8001cc8:	437a0000 	.word	0x437a0000
 8001ccc:	0800b920 	.word	0x0800b920
 8001cd0:	2000027c 	.word	0x2000027c
 8001cd4:	43eb0000 	.word	0x43eb0000
 8001cd8:	42f00000 	.word	0x42f00000
 8001cdc:	42fa0000 	.word	0x42fa0000

08001ce0 <MahonyQuaternionUpdate>:
}

// Similar to Madgwick scheme but uses proportional and integral filtering on the error between estimated reference vectors and
// measured ones.
void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy,
		float gz, float mx, float my, float mz) {
 8001ce0:	b500      	push	{lr}
 8001ce2:	ed2d 8b10 	vpush	{d8-d15}
 8001ce6:	b08d      	sub	sp, #52	; 0x34
 8001ce8:	eeb0 ba40 	vmov.f32	s22, s0
 8001cec:	eef0 aa60 	vmov.f32	s21, s1
 8001cf0:	eeb0 aa41 	vmov.f32	s20, s2
 8001cf4:	edcd 1a04 	vstr	s3, [sp, #16]
 8001cf8:	ed8d 2a05 	vstr	s4, [sp, #20]
 8001cfc:	edcd 2a06 	vstr	s5, [sp, #24]
 8001d00:	eef0 da43 	vmov.f32	s27, s6
 8001d04:	eeb0 da63 	vmov.f32	s26, s7
 8001d08:	eef0 ca44 	vmov.f32	s25, s8

	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 8001d0c:	4be4      	ldr	r3, [pc, #912]	; (80020a0 <MahonyQuaternionUpdate+0x3c0>)
 8001d0e:	edd3 9a00 	vldr	s19, [r3]
 8001d12:	ed93 9a01 	vldr	s18, [r3, #4]
 8001d16:	edd3 8a02 	vldr	s17, [r3, #8]
 8001d1a:	ed93 8a03 	vldr	s16, [r3, #12]
	float vx, vy, vz, wx, wy, wz;
	float ex, ey, ez;
	float pa, pb, pc;

	// Auxiliary variables to avoid repeated arithmetic
	float q1q1 = q1 * q1;
 8001d1e:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8001d22:	edcd 7a03 	vstr	s15, [sp, #12]
	float q1q2 = q1 * q2;
 8001d26:	ee69 7a89 	vmul.f32	s15, s19, s18
 8001d2a:	edcd 7a00 	vstr	s15, [sp]
	float q1q3 = q1 * q3;
 8001d2e:	ee29 faa8 	vmul.f32	s30, s19, s17
	float q1q4 = q1 * q4;
 8001d32:	ee69 ba88 	vmul.f32	s23, s19, s16
	float q2q2 = q2 * q2;
 8001d36:	ee69 7a09 	vmul.f32	s15, s18, s18
 8001d3a:	edcd 7a01 	vstr	s15, [sp, #4]
	float q2q3 = q2 * q3;
 8001d3e:	ee69 fa28 	vmul.f32	s31, s18, s17
	float q2q4 = q2 * q4;
 8001d42:	ee29 ca08 	vmul.f32	s24, s18, s16
	float q3q3 = q3 * q3;
 8001d46:	ee68 eaa8 	vmul.f32	s29, s17, s17
	float q3q4 = q3 * q4;
 8001d4a:	ee68 7a88 	vmul.f32	s15, s17, s16
 8001d4e:	edcd 7a02 	vstr	s15, [sp, #8]
	float q4q4 = q4 * q4;
 8001d52:	ee28 ea08 	vmul.f32	s28, s16, s16

	// Normalise accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001d56:	ee60 7a00 	vmul.f32	s15, s0, s0
 8001d5a:	ee20 7aa0 	vmul.f32	s14, s1, s1
 8001d5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d62:	ee21 7a01 	vmul.f32	s14, s2, s2
 8001d66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d6a:	ee17 0a90 	vmov	r0, s15
 8001d6e:	f7fe fb9b 	bl	80004a8 <__aeabi_f2d>
 8001d72:	ec41 0b10 	vmov	d0, r0, r1
 8001d76:	f008 f8db 	bl	8009f30 <sqrt>
 8001d7a:	ec51 0b10 	vmov	r0, r1, d0
 8001d7e:	f7fe fdfd 	bl	800097c <__aeabi_d2f>
 8001d82:	ee07 0a90 	vmov	s15, r0
	if (norm == 0.0f)
 8001d86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8e:	d104      	bne.n	8001d9a <MahonyQuaternionUpdate+0xba>
	q[0] = q1 * norm;
	q[1] = q2 * norm;
	q[2] = q3 * norm;
	q[3] = q4 * norm;

}
 8001d90:	b00d      	add	sp, #52	; 0x34
 8001d92:	ecbd 8b10 	vpop	{d8-d15}
 8001d96:	f85d fb04 	ldr.w	pc, [sp], #4
	norm = 1.0f / norm;        // use reciprocal for division
 8001d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	ax *= norm;
 8001da2:	ee2b ba07 	vmul.f32	s22, s22, s14
	ay *= norm;
 8001da6:	ee6a aa87 	vmul.f32	s21, s21, s14
	az *= norm;
 8001daa:	ee2a aa07 	vmul.f32	s20, s20, s14
	norm = sqrt(mx * mx + my * my + mz * mz);
 8001dae:	ee6d 7aad 	vmul.f32	s15, s27, s27
 8001db2:	ee2d 7a0d 	vmul.f32	s14, s26, s26
 8001db6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dba:	ee2c 7aac 	vmul.f32	s14, s25, s25
 8001dbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dc2:	ee17 0a90 	vmov	r0, s15
 8001dc6:	f7fe fb6f 	bl	80004a8 <__aeabi_f2d>
 8001dca:	ec41 0b10 	vmov	d0, r0, r1
 8001dce:	f008 f8af 	bl	8009f30 <sqrt>
 8001dd2:	ec51 0b10 	vmov	r0, r1, d0
 8001dd6:	f7fe fdd1 	bl	800097c <__aeabi_d2f>
 8001dda:	ee07 0a90 	vmov	s15, r0
	if (norm == 0.0f)
 8001dde:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de6:	d0d3      	beq.n	8001d90 <MahonyQuaternionUpdate+0xb0>
	norm = 1.0f / norm;        // use reciprocal for division
 8001de8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dec:	ee87 7a27 	vdiv.f32	s14, s14, s15
	mx *= norm;
 8001df0:	ee6d da87 	vmul.f32	s27, s27, s14
	my *= norm;
 8001df4:	ee2d da07 	vmul.f32	s26, s26, s14
	mz *= norm;
 8001df8:	ee6c ca87 	vmul.f32	s25, s25, s14
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001dfc:	ee7d 6aad 	vadd.f32	s13, s27, s27
 8001e00:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001e04:	ee76 7a6e 	vsub.f32	s15, s12, s29
 8001e08:	ee77 7ace 	vsub.f32	s15, s15, s28
 8001e0c:	edcd 7a08 	vstr	s15, [sp, #32]
 8001e10:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8001e14:	ee7d 5a0d 	vadd.f32	s11, s26, s26
 8001e18:	ee3f 5aeb 	vsub.f32	s10, s31, s23
 8001e1c:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 8001e20:	ee65 7a85 	vmul.f32	s15, s11, s10
 8001e24:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ 2.0f * mz * (q2q4 + q1q3);
 8001e28:	ee7c 4aac 	vadd.f32	s9, s25, s25
 8001e2c:	ee3f 4a0c 	vadd.f32	s8, s30, s24
 8001e30:	ed8d 4a0b 	vstr	s8, [sp, #44]	; 0x2c
 8001e34:	ee64 7a84 	vmul.f32	s15, s9, s8
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e38:	ee37 7a27 	vadd.f32	s14, s14, s15
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e3c:	ee7b 7aaf 	vadd.f32	s15, s23, s31
 8001e40:	edcd 6a07 	vstr	s13, [sp, #28]
 8001e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e48:	eddd 3a01 	vldr	s7, [sp, #4]
 8001e4c:	ee76 fa63 	vsub.f32	s31, s12, s7
 8001e50:	ee7f bace 	vsub.f32	s23, s31, s28
 8001e54:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8001e58:	ee65 baab 	vmul.f32	s23, s11, s23
 8001e5c:	ee77 7aab 	vadd.f32	s15, s15, s23
			+ 2.0f * mz * (q3q4 - q1q2);
 8001e60:	ed9d 3a02 	vldr	s6, [sp, #8]
 8001e64:	eddd 2a00 	vldr	s5, [sp]
 8001e68:	ee73 6a62 	vsub.f32	s13, s6, s5
 8001e6c:	eef0 ba64 	vmov.f32	s23, s9
 8001e70:	ee64 6aa6 	vmul.f32	s13, s9, s13
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e74:	ee77 7aa6 	vadd.f32	s15, s15, s13
	bx = sqrt((hx * hx) + (hy * hy));
 8001e78:	ee27 7a07 	vmul.f32	s14, s14, s14
 8001e7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e80:	ee37 2a27 	vadd.f32	s4, s14, s15
 8001e84:	ee12 0a10 	vmov	r0, s4
 8001e88:	f7fe fb0e 	bl	80004a8 <__aeabi_f2d>
 8001e8c:	ec41 0b10 	vmov	d0, r0, r1
 8001e90:	f008 f84e 	bl	8009f30 <sqrt>
 8001e94:	ec51 0b10 	vmov	r0, r1, d0
 8001e98:	f7fe fd70 	bl	800097c <__aeabi_d2f>
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001e9c:	ee3c ca4f 	vsub.f32	s24, s24, s30
 8001ea0:	eddd 6a07 	vldr	s13, [sp, #28]
 8001ea4:	ee26 7a8c 	vmul.f32	s14, s13, s24
 8001ea8:	eddd 4a00 	vldr	s9, [sp]
 8001eac:	ed9d 3a02 	vldr	s6, [sp, #8]
 8001eb0:	ee34 5a83 	vadd.f32	s10, s9, s6
 8001eb4:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 8001eb8:	ee65 7a85 	vmul.f32	s15, s11, s10
 8001ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001ec0:	ee7f 4aee 	vsub.f32	s9, s31, s29
 8001ec4:	ee6b 7aa4 	vmul.f32	s15, s23, s9
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001ec8:	ee37 7a27 	vadd.f32	s14, s14, s15
	vx = 2.0f * (q2q4 - q1q3);
 8001ecc:	ee7c 7a0c 	vadd.f32	s15, s24, s24
	vy = 2.0f * (q1q2 + q3q4);
 8001ed0:	ee35 6a05 	vadd.f32	s12, s10, s10
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001ed4:	eddd 5a03 	vldr	s11, [sp, #12]
 8001ed8:	eddd 3a01 	vldr	s7, [sp, #4]
 8001edc:	ee75 6ae3 	vsub.f32	s13, s11, s7
 8001ee0:	ee76 eaee 	vsub.f32	s29, s13, s29
 8001ee4:	ee3e ea8e 	vadd.f32	s28, s29, s28
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001ee8:	ee05 0a90 	vmov	s11, r0
 8001eec:	ee75 faa5 	vadd.f32	s31, s11, s11
 8001ef0:	eddd 6a08 	vldr	s13, [sp, #32]
 8001ef4:	ee26 faaf 	vmul.f32	s30, s13, s31
 8001ef8:	ee37 7a07 	vadd.f32	s14, s14, s14
 8001efc:	ee2c ca07 	vmul.f32	s24, s24, s14
 8001f00:	ee3f ca0c 	vadd.f32	s24, s30, s24
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001f04:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
 8001f08:	ee66 5aaf 	vmul.f32	s11, s13, s31
 8001f0c:	ee25 5a07 	vmul.f32	s10, s10, s14
 8001f10:	ee75 5a85 	vadd.f32	s11, s11, s10
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001f14:	ed9d 4a0b 	vldr	s8, [sp, #44]	; 0x2c
 8001f18:	ee64 fa2f 	vmul.f32	s31, s8, s31
 8001f1c:	ee24 7a87 	vmul.f32	s14, s9, s14
 8001f20:	ee7f fa87 	vadd.f32	s31, s31, s14
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001f24:	ee6a 6a8e 	vmul.f32	s13, s21, s28
 8001f28:	ee2a 7a06 	vmul.f32	s14, s20, s12
 8001f2c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8001f30:	ee2d 7a2f 	vmul.f32	s14, s26, s31
 8001f34:	ee2c 5aa5 	vmul.f32	s10, s25, s11
 8001f38:	ee37 7a45 	vsub.f32	s14, s14, s10
 8001f3c:	ee76 6a87 	vadd.f32	s13, s13, s14
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001f40:	ee2a aa27 	vmul.f32	s20, s20, s15
 8001f44:	ee2b 7a0e 	vmul.f32	s14, s22, s28
 8001f48:	ee3a 7a47 	vsub.f32	s14, s20, s14
 8001f4c:	ee6c ca8c 	vmul.f32	s25, s25, s24
 8001f50:	ee6d faaf 	vmul.f32	s31, s27, s31
 8001f54:	ee7c faef 	vsub.f32	s31, s25, s31
 8001f58:	ee37 7a2f 	vadd.f32	s14, s14, s31
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001f5c:	ee2b ba06 	vmul.f32	s22, s22, s12
 8001f60:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8001f64:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8001f68:	ee6d daa5 	vmul.f32	s27, s27, s11
 8001f6c:	ee2d da0c 	vmul.f32	s26, s26, s24
 8001f70:	ee3d dacd 	vsub.f32	s26, s27, s26
 8001f74:	ee77 7a8d 	vadd.f32	s15, s15, s26
		eInt[0] = 0.0f;     // prevent integral wind up
 8001f78:	4b4a      	ldr	r3, [pc, #296]	; (80020a4 <MahonyQuaternionUpdate+0x3c4>)
 8001f7a:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 80020a8 <MahonyQuaternionUpdate+0x3c8>
 8001f7e:	ed83 6a00 	vstr	s12, [r3]
		eInt[1] = 0.0f;
 8001f82:	ed83 6a01 	vstr	s12, [r3, #4]
		eInt[2] = 0.0f;
 8001f86:	ed83 6a02 	vstr	s12, [r3, #8]
	gx = gx + Kp * ex + Ki * eInt[0];
 8001f8a:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 8001f8e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8001f92:	eddd 4a04 	vldr	s9, [sp, #16]
 8001f96:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8001f9a:	ee76 6a86 	vadd.f32	s13, s13, s12
	gy = gy + Kp * ey + Ki * eInt[1];
 8001f9e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8001fa2:	eddd 4a05 	vldr	s9, [sp, #20]
 8001fa6:	ee37 7a24 	vadd.f32	s14, s14, s9
 8001faa:	ee37 7a06 	vadd.f32	s14, s14, s12
	gz = gz + Kp * ez + Ki * eInt[2];
 8001fae:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001fb2:	eddd 5a06 	vldr	s11, [sp, #24]
 8001fb6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001fba:	ee77 7a86 	vadd.f32	s15, s15, s12
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001fbe:	ee69 5a66 	vnmul.f32	s11, s18, s13
 8001fc2:	ee28 6a87 	vmul.f32	s12, s17, s14
 8001fc6:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8001fca:	ee28 6a27 	vmul.f32	s12, s16, s15
 8001fce:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8001fd2:	4b36      	ldr	r3, [pc, #216]	; (80020ac <MahonyQuaternionUpdate+0x3cc>)
 8001fd4:	ed93 6a00 	vldr	s12, [r3]
 8001fd8:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8001fdc:	ee26 6a05 	vmul.f32	s12, s12, s10
 8001fe0:	ee65 5a86 	vmul.f32	s11, s11, s12
 8001fe4:	ee79 9aa5 	vadd.f32	s19, s19, s11
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001fe8:	ee66 aaa9 	vmul.f32	s21, s13, s19
 8001fec:	ee68 5aa7 	vmul.f32	s11, s17, s15
 8001ff0:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8001ff4:	ee68 5a07 	vmul.f32	s11, s16, s14
 8001ff8:	ee7a aae5 	vsub.f32	s21, s21, s11
 8001ffc:	ee66 aa2a 	vmul.f32	s21, s12, s21
 8002000:	ee79 aa2a 	vadd.f32	s21, s18, s21
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8002004:	ee27 aa29 	vmul.f32	s20, s14, s19
 8002008:	ee69 5a27 	vmul.f32	s11, s18, s15
 800200c:	ee3a aa65 	vsub.f32	s20, s20, s11
 8002010:	ee68 5a26 	vmul.f32	s11, s16, s13
 8002014:	ee3a aa25 	vadd.f32	s20, s20, s11
 8002018:	ee26 aa0a 	vmul.f32	s20, s12, s20
 800201c:	ee38 aa8a 	vadd.f32	s20, s17, s20
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8002020:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8002024:	ee29 9a07 	vmul.f32	s18, s18, s14
 8002028:	ee37 9a89 	vadd.f32	s18, s15, s18
 800202c:	ee68 8aa6 	vmul.f32	s17, s17, s13
 8002030:	ee79 8a68 	vsub.f32	s17, s18, s17
 8002034:	ee66 8a28 	vmul.f32	s17, s12, s17
 8002038:	ee38 8a28 	vadd.f32	s16, s16, s17
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 800203c:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8002040:	ee2a 7aaa 	vmul.f32	s14, s21, s21
 8002044:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002048:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 800204c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002050:	ee28 7a08 	vmul.f32	s14, s16, s16
 8002054:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002058:	ee17 0a90 	vmov	r0, s15
 800205c:	f7fe fa24 	bl	80004a8 <__aeabi_f2d>
 8002060:	ec41 0b10 	vmov	d0, r0, r1
 8002064:	f007 ff64 	bl	8009f30 <sqrt>
 8002068:	ec51 0b10 	vmov	r0, r1, d0
 800206c:	f7fe fc86 	bl	800097c <__aeabi_d2f>
	norm = 1.0f / norm;
 8002070:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002074:	ee07 0a90 	vmov	s15, r0
 8002078:	eec7 7a27 	vdiv.f32	s15, s14, s15
	q[0] = q1 * norm;
 800207c:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <MahonyQuaternionUpdate+0x3c0>)
 8002082:	edc3 9a00 	vstr	s19, [r3]
	q[1] = q2 * norm;
 8002086:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800208a:	edc3 aa01 	vstr	s21, [r3, #4]
	q[2] = q3 * norm;
 800208e:	ee2a aa27 	vmul.f32	s20, s20, s15
 8002092:	ed83 aa02 	vstr	s20, [r3, #8]
	q[3] = q4 * norm;
 8002096:	ee28 8a27 	vmul.f32	s16, s16, s15
 800209a:	ed83 8a03 	vstr	s16, [r3, #12]
 800209e:	e677      	b.n	8001d90 <MahonyQuaternionUpdate+0xb0>
 80020a0:	2000001c 	.word	0x2000001c
 80020a4:	20000260 	.word	0x20000260
 80020a8:	00000000 	.word	0x00000000
 80020ac:	2000025c 	.word	0x2000025c

080020b0 <calc_RollPitchYaw>:
void calc_RollPitchYaw(int counter_value) {
 80020b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020b4:	ed2d 8b04 	vpush	{d8-d9}
 80020b8:	b087      	sub	sp, #28
 80020ba:	ee08 0a10 	vmov	s16, r0
	if (readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, INT_STATUS) & 0x01) { // On interrupt, check if data ready interrupt
 80020be:	223a      	movs	r2, #58	; 0x3a
 80020c0:	21d1      	movs	r1, #209	; 0xd1
 80020c2:	20d0      	movs	r0, #208	; 0xd0
 80020c4:	f7fe ff64 	bl	8000f90 <readByte>
 80020c8:	f010 0f01 	tst.w	r0, #1
 80020cc:	f040 8170 	bne.w	80023b0 <calc_RollPitchYaw+0x300>
	Now = counter_value;
 80020d0:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 80020d4:	4ba0      	ldr	r3, [pc, #640]	; (8002358 <calc_RollPitchYaw+0x2a8>)
 80020d6:	edc3 7a00 	vstr	s15, [r3]
	if(Now - lastUpdate < 0){
 80020da:	4ba0      	ldr	r3, [pc, #640]	; (800235c <calc_RollPitchYaw+0x2ac>)
 80020dc:	ed93 7a00 	vldr	s14, [r3]
 80020e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ec:	f100 820d 	bmi.w	800250a <calc_RollPitchYaw+0x45a>
		float32_t result1 = 0;
 80020f0:	2500      	movs	r5, #0
 80020f2:	ac06      	add	r4, sp, #24
 80020f4:	f844 5d0c 	str.w	r5, [r4, #-12]!
		arm_sub_f32(&Now, &lastUpdate, &result1, 1);
 80020f8:	2301      	movs	r3, #1
 80020fa:	4622      	mov	r2, r4
 80020fc:	4997      	ldr	r1, [pc, #604]	; (800235c <calc_RollPitchYaw+0x2ac>)
 80020fe:	4896      	ldr	r0, [pc, #600]	; (8002358 <calc_RollPitchYaw+0x2a8>)
 8002100:	f004 f998 	bl	8006434 <arm_sub_f32>
		float32_t result2 = 0;
 8002104:	9504      	str	r5, [sp, #16]
		float32_t prescaler = 2000;
 8002106:	4b96      	ldr	r3, [pc, #600]	; (8002360 <calc_RollPitchYaw+0x2b0>)
 8002108:	9305      	str	r3, [sp, #20]
		arm_mult_f32(&result1, &prescaler,&result2, 1);
 800210a:	2301      	movs	r3, #1
 800210c:	aa04      	add	r2, sp, #16
 800210e:	a905      	add	r1, sp, #20
 8002110:	4620      	mov	r0, r4
 8002112:	f004 f97f 	bl	8006414 <arm_mult_f32>
		deltat = result2/TIMER_CLK_FREQ;
 8002116:	eddd 6a04 	vldr	s13, [sp, #16]
 800211a:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8002364 <calc_RollPitchYaw+0x2b4>
 800211e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002122:	4b91      	ldr	r3, [pc, #580]	; (8002368 <calc_RollPitchYaw+0x2b8>)
 8002124:	edc3 7a00 	vstr	s15, [r3]
	lastUpdate = Now;
 8002128:	4b8b      	ldr	r3, [pc, #556]	; (8002358 <calc_RollPitchYaw+0x2a8>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b8b      	ldr	r3, [pc, #556]	; (800235c <calc_RollPitchYaw+0x2ac>)
 800212e:	601a      	str	r2, [r3, #0]
	sum += deltat;
 8002130:	4e8e      	ldr	r6, [pc, #568]	; (800236c <calc_RollPitchYaw+0x2bc>)
 8002132:	edd6 7a00 	vldr	s15, [r6]
 8002136:	4b8c      	ldr	r3, [pc, #560]	; (8002368 <calc_RollPitchYaw+0x2b8>)
 8002138:	ed93 7a00 	vldr	s14, [r3]
 800213c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002140:	edc6 7a00 	vstr	s15, [r6]
	sumCount++;
 8002144:	4d8a      	ldr	r5, [pc, #552]	; (8002370 <calc_RollPitchYaw+0x2c0>)
 8002146:	682b      	ldr	r3, [r5, #0]
 8002148:	3301      	adds	r3, #1
 800214a:	602b      	str	r3, [r5, #0]
	MahonyQuaternionUpdate(ax, ay, az, gx * PI / 180.0, gy * PI / 180.0, gz * PI / 180.0, my, mx, mz);
 800214c:	4b89      	ldr	r3, [pc, #548]	; (8002374 <calc_RollPitchYaw+0x2c4>)
 800214e:	edd3 1a00 	vldr	s3, [r3]
 8002152:	eddf 7a89 	vldr	s15, [pc, #548]	; 8002378 <calc_RollPitchYaw+0x2c8>
 8002156:	ee61 1aa7 	vmul.f32	s3, s3, s15
 800215a:	4b88      	ldr	r3, [pc, #544]	; (800237c <calc_RollPitchYaw+0x2cc>)
 800215c:	ed93 2a00 	vldr	s4, [r3]
 8002160:	ee22 2a27 	vmul.f32	s4, s4, s15
 8002164:	4b86      	ldr	r3, [pc, #536]	; (8002380 <calc_RollPitchYaw+0x2d0>)
 8002166:	edd3 2a00 	vldr	s5, [r3]
 800216a:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800216e:	eddf 7a85 	vldr	s15, [pc, #532]	; 8002384 <calc_RollPitchYaw+0x2d4>
 8002172:	4b85      	ldr	r3, [pc, #532]	; (8002388 <calc_RollPitchYaw+0x2d8>)
 8002174:	ed93 4a00 	vldr	s8, [r3]
 8002178:	4b84      	ldr	r3, [pc, #528]	; (800238c <calc_RollPitchYaw+0x2dc>)
 800217a:	edd3 3a00 	vldr	s7, [r3]
 800217e:	4b84      	ldr	r3, [pc, #528]	; (8002390 <calc_RollPitchYaw+0x2e0>)
 8002180:	ed93 3a00 	vldr	s6, [r3]
 8002184:	eec2 2aa7 	vdiv.f32	s5, s5, s15
 8002188:	ee82 2a27 	vdiv.f32	s4, s4, s15
 800218c:	eec1 1aa7 	vdiv.f32	s3, s3, s15
 8002190:	4b80      	ldr	r3, [pc, #512]	; (8002394 <calc_RollPitchYaw+0x2e4>)
 8002192:	ed93 1a00 	vldr	s2, [r3]
 8002196:	4b80      	ldr	r3, [pc, #512]	; (8002398 <calc_RollPitchYaw+0x2e8>)
 8002198:	edd3 0a00 	vldr	s1, [r3]
 800219c:	4b7f      	ldr	r3, [pc, #508]	; (800239c <calc_RollPitchYaw+0x2ec>)
 800219e:	ed93 0a00 	vldr	s0, [r3]
 80021a2:	f7ff fd9d 	bl	8001ce0 <MahonyQuaternionUpdate>
	yaw = atan2(2.0 * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 80021a6:	4c7e      	ldr	r4, [pc, #504]	; (80023a0 <calc_RollPitchYaw+0x2f0>)
 80021a8:	edd4 9a01 	vldr	s19, [r4, #4]
 80021ac:	ed94 9a02 	vldr	s18, [r4, #8]
 80021b0:	ee29 7a89 	vmul.f32	s14, s19, s18
 80021b4:	ed94 8a00 	vldr	s16, [r4]
 80021b8:	edd4 8a03 	vldr	s17, [r4, #12]
 80021bc:	ee68 7a28 	vmul.f32	s15, s16, s17
 80021c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c4:	ee17 0a90 	vmov	r0, s15
 80021c8:	f7fe f96e 	bl	80004a8 <__aeabi_f2d>
 80021cc:	4680      	mov	r8, r0
 80021ce:	4689      	mov	r9, r1
 80021d0:	ee28 8a08 	vmul.f32	s16, s16, s16
 80021d4:	ee69 9aa9 	vmul.f32	s19, s19, s19
 80021d8:	ee38 8a29 	vadd.f32	s16, s16, s19
 80021dc:	ee29 9a09 	vmul.f32	s18, s18, s18
 80021e0:	ee38 8a49 	vsub.f32	s16, s16, s18
 80021e4:	ee68 8aa8 	vmul.f32	s17, s17, s17
 80021e8:	ee78 7a68 	vsub.f32	s15, s16, s17
 80021ec:	ee17 0a90 	vmov	r0, s15
 80021f0:	f7fe f95a 	bl	80004a8 <__aeabi_f2d>
 80021f4:	4682      	mov	sl, r0
 80021f6:	468b      	mov	fp, r1
 80021f8:	4642      	mov	r2, r8
 80021fa:	464b      	mov	r3, r9
 80021fc:	4640      	mov	r0, r8
 80021fe:	4649      	mov	r1, r9
 8002200:	f7fd fff4 	bl	80001ec <__adddf3>
 8002204:	ec4b ab11 	vmov	d1, sl, fp
 8002208:	ec41 0b10 	vmov	d0, r0, r1
 800220c:	f007 fd1e 	bl	8009c4c <atan2>
 8002210:	ec51 0b10 	vmov	r0, r1, d0
 8002214:	f7fe fbb2 	bl	800097c <__aeabi_d2f>
 8002218:	4f62      	ldr	r7, [pc, #392]	; (80023a4 <calc_RollPitchYaw+0x2f4>)
 800221a:	6038      	str	r0, [r7, #0]
	pitch = -asin(2.0 * (q[1] * q[3] - q[0] * q[2]));
 800221c:	ed94 7a01 	vldr	s14, [r4, #4]
 8002220:	edd4 7a03 	vldr	s15, [r4, #12]
 8002224:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002228:	edd4 7a00 	vldr	s15, [r4]
 800222c:	edd4 6a02 	vldr	s13, [r4, #8]
 8002230:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002238:	ee17 0a90 	vmov	r0, s15
 800223c:	f7fe f934 	bl	80004a8 <__aeabi_f2d>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	f7fd ffd2 	bl	80001ec <__adddf3>
 8002248:	ec41 0b10 	vmov	d0, r0, r1
 800224c:	f007 fca6 	bl	8009b9c <asin>
 8002250:	ec51 0b10 	vmov	r0, r1, d0
 8002254:	f7fe fb92 	bl	800097c <__aeabi_d2f>
 8002258:	f8df a150 	ldr.w	sl, [pc, #336]	; 80023ac <calc_RollPitchYaw+0x2fc>
 800225c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8002260:	f8ca 0000 	str.w	r0, [sl]
	roll = atan2(2.0 * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 8002264:	ed94 8a00 	vldr	s16, [r4]
 8002268:	edd4 9a01 	vldr	s19, [r4, #4]
 800226c:	ee28 7a29 	vmul.f32	s14, s16, s19
 8002270:	ed94 9a02 	vldr	s18, [r4, #8]
 8002274:	edd4 8a03 	vldr	s17, [r4, #12]
 8002278:	ee69 7a28 	vmul.f32	s15, s18, s17
 800227c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002280:	ee17 0a90 	vmov	r0, s15
 8002284:	f7fe f910 	bl	80004a8 <__aeabi_f2d>
 8002288:	4680      	mov	r8, r0
 800228a:	4689      	mov	r9, r1
 800228c:	ee28 8a08 	vmul.f32	s16, s16, s16
 8002290:	ee69 9aa9 	vmul.f32	s19, s19, s19
 8002294:	ee38 8a69 	vsub.f32	s16, s16, s19
 8002298:	ee29 9a09 	vmul.f32	s18, s18, s18
 800229c:	ee38 8a49 	vsub.f32	s16, s16, s18
 80022a0:	ee68 8aa8 	vmul.f32	s17, s17, s17
 80022a4:	ee78 7a28 	vadd.f32	s15, s16, s17
 80022a8:	ee17 0a90 	vmov	r0, s15
 80022ac:	f7fe f8fc 	bl	80004a8 <__aeabi_f2d>
 80022b0:	ec41 0b18 	vmov	d8, r0, r1
 80022b4:	4642      	mov	r2, r8
 80022b6:	464b      	mov	r3, r9
 80022b8:	4640      	mov	r0, r8
 80022ba:	4649      	mov	r1, r9
 80022bc:	f7fd ff96 	bl	80001ec <__adddf3>
 80022c0:	eeb0 1a48 	vmov.f32	s2, s16
 80022c4:	eef0 1a68 	vmov.f32	s3, s17
 80022c8:	ec41 0b10 	vmov	d0, r0, r1
 80022cc:	f007 fcbe 	bl	8009c4c <atan2>
 80022d0:	ec51 0b10 	vmov	r0, r1, d0
 80022d4:	f7fe fb52 	bl	800097c <__aeabi_d2f>
 80022d8:	4604      	mov	r4, r0
	pitch *= 180.0 / PI;
 80022da:	f8da 0000 	ldr.w	r0, [sl]
 80022de:	f7fe f8e3 	bl	80004a8 <__aeabi_f2d>
 80022e2:	a319      	add	r3, pc, #100	; (adr r3, 8002348 <calc_RollPitchYaw+0x298>)
 80022e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e8:	f7fe f936 	bl	8000558 <__aeabi_dmul>
 80022ec:	f7fe fb46 	bl	800097c <__aeabi_d2f>
 80022f0:	f8ca 0000 	str.w	r0, [sl]
	yaw *= 180.0 / PI;
 80022f4:	6838      	ldr	r0, [r7, #0]
 80022f6:	f7fe f8d7 	bl	80004a8 <__aeabi_f2d>
 80022fa:	a313      	add	r3, pc, #76	; (adr r3, 8002348 <calc_RollPitchYaw+0x298>)
 80022fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002300:	f7fe f92a 	bl	8000558 <__aeabi_dmul>
 8002304:	f7fe fb3a 	bl	800097c <__aeabi_d2f>
	yaw -=  -1.1; // CHANGE-> (In Leeds, UK declination = -1.1) ... Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04 (+13.8)
 8002308:	f7fe f8ce 	bl	80004a8 <__aeabi_f2d>
 800230c:	a310      	add	r3, pc, #64	; (adr r3, 8002350 <calc_RollPitchYaw+0x2a0>)
 800230e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002312:	f7fd ff6b 	bl	80001ec <__adddf3>
 8002316:	f7fe fb31 	bl	800097c <__aeabi_d2f>
 800231a:	6038      	str	r0, [r7, #0]
	roll *= 180.0 / PI;
 800231c:	4620      	mov	r0, r4
 800231e:	f7fe f8c3 	bl	80004a8 <__aeabi_f2d>
 8002322:	a309      	add	r3, pc, #36	; (adr r3, 8002348 <calc_RollPitchYaw+0x298>)
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	f7fe f916 	bl	8000558 <__aeabi_dmul>
 800232c:	f7fe fb26 	bl	800097c <__aeabi_d2f>
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <calc_RollPitchYaw+0x2f8>)
 8002332:	6018      	str	r0, [r3, #0]
	sum = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	6033      	str	r3, [r6, #0]
	sumCount = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	602b      	str	r3, [r5, #0]
}
 800233c:	b007      	add	sp, #28
 800233e:	ecbd 8b04 	vpop	{d8-d9}
 8002342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002346:	bf00      	nop
 8002348:	0d03cf26 	.word	0x0d03cf26
 800234c:	404ca5dc 	.word	0x404ca5dc
 8002350:	9999999a 	.word	0x9999999a
 8002354:	3ff19999 	.word	0x3ff19999
 8002358:	20000258 	.word	0x20000258
 800235c:	2000026c 	.word	0x2000026c
 8002360:	44fa0000 	.word	0x44fa0000
 8002364:	4cbebc20 	.word	0x4cbebc20
 8002368:	2000025c 	.word	0x2000025c
 800236c:	20000288 	.word	0x20000288
 8002370:	2000028c 	.word	0x2000028c
 8002374:	20000434 	.word	0x20000434
 8002378:	40490fdb 	.word	0x40490fdb
 800237c:	200003ec 	.word	0x200003ec
 8002380:	20000410 	.word	0x20000410
 8002384:	43340000 	.word	0x43340000
 8002388:	20000418 	.word	0x20000418
 800238c:	2000043c 	.word	0x2000043c
 8002390:	20000400 	.word	0x20000400
 8002394:	200003f0 	.word	0x200003f0
 8002398:	20000438 	.word	0x20000438
 800239c:	20000404 	.word	0x20000404
 80023a0:	2000001c 	.word	0x2000001c
 80023a4:	2000041c 	.word	0x2000041c
 80023a8:	2000042c 	.word	0x2000042c
 80023ac:	20000428 	.word	0x20000428
		readAccelData(accelCount);  // Read the x/y/z adc values
 80023b0:	4c69      	ldr	r4, [pc, #420]	; (8002558 <calc_RollPitchYaw+0x4a8>)
 80023b2:	4620      	mov	r0, r4
 80023b4:	f7fe feb4 	bl	8001120 <readAccelData>
		ax = (float) accelCount[0] * aRes - accelBias[0]; // get actual g value, this depends on scale being set
 80023b8:	f9b4 3000 	ldrsh.w	r3, [r4]
 80023bc:	ee07 3a10 	vmov	s14, r3
 80023c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80023c4:	4b65      	ldr	r3, [pc, #404]	; (800255c <calc_RollPitchYaw+0x4ac>)
 80023c6:	edd3 7a00 	vldr	s15, [r3]
 80023ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ce:	4b64      	ldr	r3, [pc, #400]	; (8002560 <calc_RollPitchYaw+0x4b0>)
 80023d0:	edd3 6a00 	vldr	s13, [r3]
 80023d4:	ee37 7a66 	vsub.f32	s14, s14, s13
 80023d8:	4a62      	ldr	r2, [pc, #392]	; (8002564 <calc_RollPitchYaw+0x4b4>)
 80023da:	ed82 7a00 	vstr	s14, [r2]
		ay = (float) accelCount[1] * aRes - accelBias[1];
 80023de:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80023e2:	ee07 2a10 	vmov	s14, r2
 80023e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80023ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80023f2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80023f6:	4a5c      	ldr	r2, [pc, #368]	; (8002568 <calc_RollPitchYaw+0x4b8>)
 80023f8:	ed82 7a00 	vstr	s14, [r2]
		az = (float) accelCount[2] * aRes - accelBias[2];
 80023fc:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8002400:	ee07 2a10 	vmov	s14, r2
 8002404:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002410:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002414:	4b55      	ldr	r3, [pc, #340]	; (800256c <calc_RollPitchYaw+0x4bc>)
 8002416:	edc3 7a00 	vstr	s15, [r3]
		readGyroData(gyroCount);  // Read the x/y/z adc values
 800241a:	4c55      	ldr	r4, [pc, #340]	; (8002570 <calc_RollPitchYaw+0x4c0>)
 800241c:	4620      	mov	r0, r4
 800241e:	f7fe fea1 	bl	8001164 <readGyroData>
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 8002422:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002426:	ee07 3a10 	vmov	s14, r3
 800242a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800242e:	4b51      	ldr	r3, [pc, #324]	; (8002574 <calc_RollPitchYaw+0x4c4>)
 8002430:	edd3 7a00 	vldr	s15, [r3]
 8002434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002438:	4b4f      	ldr	r3, [pc, #316]	; (8002578 <calc_RollPitchYaw+0x4c8>)
 800243a:	edd3 6a00 	vldr	s13, [r3]
 800243e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002442:	4a4e      	ldr	r2, [pc, #312]	; (800257c <calc_RollPitchYaw+0x4cc>)
 8002444:	ed82 7a00 	vstr	s14, [r2]
		gy = (float) gyroCount[1] * gRes - gyroBias[1];
 8002448:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800244c:	ee07 2a10 	vmov	s14, r2
 8002450:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002454:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002458:	edd3 6a01 	vldr	s13, [r3, #4]
 800245c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002460:	4a47      	ldr	r2, [pc, #284]	; (8002580 <calc_RollPitchYaw+0x4d0>)
 8002462:	ed82 7a00 	vstr	s14, [r2]
		gz = (float) gyroCount[2] * gRes - gyroBias[2];
 8002466:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800246a:	ee07 2a10 	vmov	s14, r2
 800246e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002476:	ed93 7a02 	vldr	s14, [r3, #8]
 800247a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800247e:	4b41      	ldr	r3, [pc, #260]	; (8002584 <calc_RollPitchYaw+0x4d4>)
 8002480:	edc3 7a00 	vstr	s15, [r3]
		readMagData(magCount);  // Read the x/y/z adc values
 8002484:	4c40      	ldr	r4, [pc, #256]	; (8002588 <calc_RollPitchYaw+0x4d8>)
 8002486:	4620      	mov	r0, r4
 8002488:	f7fe fe8e 	bl	80011a8 <readMagData>
		mx = (float) magCount[0] * mRes * magCalibration[0] - magbias[0]; // get actual magnetometer value, this depends on scale being set
 800248c:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002490:	ee07 3a10 	vmov	s14, r3
 8002494:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002498:	4b3c      	ldr	r3, [pc, #240]	; (800258c <calc_RollPitchYaw+0x4dc>)
 800249a:	edd3 7a00 	vldr	s15, [r3]
 800249e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024a2:	4a3b      	ldr	r2, [pc, #236]	; (8002590 <calc_RollPitchYaw+0x4e0>)
 80024a4:	edd2 6a00 	vldr	s13, [r2]
 80024a8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80024ac:	4b39      	ldr	r3, [pc, #228]	; (8002594 <calc_RollPitchYaw+0x4e4>)
 80024ae:	edd3 6a00 	vldr	s13, [r3]
 80024b2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80024b6:	4938      	ldr	r1, [pc, #224]	; (8002598 <calc_RollPitchYaw+0x4e8>)
 80024b8:	ed81 7a00 	vstr	s14, [r1]
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 80024bc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80024c0:	ee07 1a10 	vmov	s14, r1
 80024c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024cc:	edd2 6a01 	vldr	s13, [r2, #4]
 80024d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80024d4:	edd3 6a01 	vldr	s13, [r3, #4]
 80024d8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80024dc:	492f      	ldr	r1, [pc, #188]	; (800259c <calc_RollPitchYaw+0x4ec>)
 80024de:	ed81 7a00 	vstr	s14, [r1]
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 80024e2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80024e6:	ee07 1a10 	vmov	s14, r1
 80024ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f2:	ed92 7a02 	vldr	s14, [r2, #8]
 80024f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024fa:	ed93 7a02 	vldr	s14, [r3, #8]
 80024fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002502:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <calc_RollPitchYaw+0x4f0>)
 8002504:	edc3 7a00 	vstr	s15, [r3]
 8002508:	e5e2      	b.n	80020d0 <calc_RollPitchYaw+0x20>
		float32_t timer_load = 65535;
 800250a:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <calc_RollPitchYaw+0x4f4>)
 800250c:	9301      	str	r3, [sp, #4]
		float32_t time_difference = 0;
 800250e:	2600      	movs	r6, #0
 8002510:	ad06      	add	r5, sp, #24
 8002512:	f845 6d10 	str.w	r6, [r5, #-16]!
		arm_sub_f32(&timer_load, &lastUpdate, &time_difference, 1);
 8002516:	2301      	movs	r3, #1
 8002518:	462a      	mov	r2, r5
 800251a:	4923      	ldr	r1, [pc, #140]	; (80025a8 <calc_RollPitchYaw+0x4f8>)
 800251c:	a801      	add	r0, sp, #4
 800251e:	f003 ff89 	bl	8006434 <arm_sub_f32>
		float32_t time_diff_plus_now = 0;
 8002522:	ac06      	add	r4, sp, #24
 8002524:	f844 6d0c 	str.w	r6, [r4, #-12]!
		arm_add_f32(&time_difference, &Now, &time_diff_plus_now, 1);
 8002528:	2301      	movs	r3, #1
 800252a:	4622      	mov	r2, r4
 800252c:	491f      	ldr	r1, [pc, #124]	; (80025ac <calc_RollPitchYaw+0x4fc>)
 800252e:	4628      	mov	r0, r5
 8002530:	f003 ff60 	bl	80063f4 <arm_add_f32>
		float32_t prescaler = 2000;
 8002534:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <calc_RollPitchYaw+0x500>)
 8002536:	9305      	str	r3, [sp, #20]
		arm_mult_f32(&prescaler, &time_diff_plus_now, &top, 1);
 8002538:	2301      	movs	r3, #1
 800253a:	aa04      	add	r2, sp, #16
 800253c:	4621      	mov	r1, r4
 800253e:	a805      	add	r0, sp, #20
 8002540:	f003 ff68 	bl	8006414 <arm_mult_f32>
		deltat = top/TIMER_CLK_FREQ;
 8002544:	eddd 6a04 	vldr	s13, [sp, #16]
 8002548:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80025b4 <calc_RollPitchYaw+0x504>
 800254c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <calc_RollPitchYaw+0x508>)
 8002552:	edc3 7a00 	vstr	s15, [r3]
 8002556:	e5e7      	b.n	8002128 <calc_RollPitchYaw+0x78>
 8002558:	20000378 	.word	0x20000378
 800255c:	20000408 	.word	0x20000408
 8002560:	20000004 	.word	0x20000004
 8002564:	20000404 	.word	0x20000404
 8002568:	20000438 	.word	0x20000438
 800256c:	200003f0 	.word	0x200003f0
 8002570:	200003f8 	.word	0x200003f8
 8002574:	20000414 	.word	0x20000414
 8002578:	20000010 	.word	0x20000010
 800257c:	20000434 	.word	0x20000434
 8002580:	200003ec 	.word	0x200003ec
 8002584:	20000410 	.word	0x20000410
 8002588:	20000420 	.word	0x20000420
 800258c:	20000430 	.word	0x20000430
 8002590:	20000270 	.word	0x20000270
 8002594:	2000027c 	.word	0x2000027c
 8002598:	2000043c 	.word	0x2000043c
 800259c:	20000400 	.word	0x20000400
 80025a0:	20000418 	.word	0x20000418
 80025a4:	477fff00 	.word	0x477fff00
 80025a8:	2000026c 	.word	0x2000026c
 80025ac:	20000258 	.word	0x20000258
 80025b0:	44fa0000 	.word	0x44fa0000
 80025b4:	4cbebc20 	.word	0x4cbebc20
 80025b8:	2000025c 	.word	0x2000025c

080025bc <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80025bc:	b508      	push	{r3, lr}
//	uint32_t uSecVar = uSec;
//	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
//	while(uSecVar--);
	DWT_Delay(uSec);
 80025be:	f000 fea7 	bl	8003310 <DWT_Delay>
}
 80025c2:	bd08      	pop	{r3, pc}

080025c4 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80025c4:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80025c6:	b938      	cbnz	r0, 80025d8 <NRF24_csn+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80025c8:	2200      	movs	r2, #0
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <NRF24_csn+0x24>)
 80025cc:	8819      	ldrh	r1, [r3, #0]
 80025ce:	4b07      	ldr	r3, [pc, #28]	; (80025ec <NRF24_csn+0x28>)
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	f001 fbbb 	bl	8003d4c <HAL_GPIO_WritePin>
}
 80025d6:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80025d8:	2201      	movs	r2, #1
 80025da:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <NRF24_csn+0x24>)
 80025dc:	8819      	ldrh	r1, [r3, #0]
 80025de:	4b03      	ldr	r3, [pc, #12]	; (80025ec <NRF24_csn+0x28>)
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	f001 fbb3 	bl	8003d4c <HAL_GPIO_WritePin>
 80025e6:	e7f6      	b.n	80025d6 <NRF24_csn+0x12>
 80025e8:	20000292 	.word	0x20000292
 80025ec:	20000294 	.word	0x20000294

080025f0 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80025f0:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80025f2:	b938      	cbnz	r0, 8002604 <NRF24_ce+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80025f4:	2200      	movs	r2, #0
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <NRF24_ce+0x24>)
 80025f8:	8819      	ldrh	r1, [r3, #0]
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <NRF24_ce+0x28>)
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	f001 fba5 	bl	8003d4c <HAL_GPIO_WritePin>
}
 8002602:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8002604:	2201      	movs	r2, #1
 8002606:	4b03      	ldr	r3, [pc, #12]	; (8002614 <NRF24_ce+0x24>)
 8002608:	8819      	ldrh	r1, [r3, #0]
 800260a:	4b03      	ldr	r3, [pc, #12]	; (8002618 <NRF24_ce+0x28>)
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	f001 fb9d 	bl	8003d4c <HAL_GPIO_WritePin>
 8002612:	e7f6      	b.n	8002602 <NRF24_ce+0x12>
 8002614:	20000290 	.word	0x20000290
 8002618:	20000294 	.word	0x20000294

0800261c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800261c:	b510      	push	{r4, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8002622:	2000      	movs	r0, #0
 8002624:	f7ff ffce 	bl	80025c4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8002628:	f004 041f 	and.w	r4, r4, #31
 800262c:	a902      	add	r1, sp, #8
 800262e:	f801 4d04 	strb.w	r4, [r1, #-4]!
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8002632:	4c0a      	ldr	r4, [pc, #40]	; (800265c <NRF24_read_register+0x40>)
 8002634:	2364      	movs	r3, #100	; 0x64
 8002636:	2201      	movs	r2, #1
 8002638:	4620      	mov	r0, r4
 800263a:	f002 fd6f 	bl	800511c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800263e:	2364      	movs	r3, #100	; 0x64
 8002640:	2201      	movs	r2, #1
 8002642:	f10d 0105 	add.w	r1, sp, #5
 8002646:	4620      	mov	r0, r4
 8002648:	f002 ff4c 	bl	80054e4 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800264c:	f89d 4005 	ldrb.w	r4, [sp, #5]
	//Bring CSN high
	NRF24_csn(1);
 8002650:	2001      	movs	r0, #1
 8002652:	f7ff ffb7 	bl	80025c4 <NRF24_csn>
	return retData;
}
 8002656:	4620      	mov	r0, r4
 8002658:	b002      	add	sp, #8
 800265a:	bd10      	pop	{r4, pc}
 800265c:	20000298 	.word	0x20000298

08002660 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8002660:	b570      	push	{r4, r5, r6, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	4604      	mov	r4, r0
 8002666:	460d      	mov	r5, r1
 8002668:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800266a:	2000      	movs	r0, #0
 800266c:	f7ff ffaa 	bl	80025c4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8002670:	f004 041f 	and.w	r4, r4, #31
 8002674:	a902      	add	r1, sp, #8
 8002676:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800267a:	4c08      	ldr	r4, [pc, #32]	; (800269c <NRF24_read_registerN+0x3c>)
 800267c:	2364      	movs	r3, #100	; 0x64
 800267e:	2201      	movs	r2, #1
 8002680:	4620      	mov	r0, r4
 8002682:	f002 fd4b 	bl	800511c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8002686:	2364      	movs	r3, #100	; 0x64
 8002688:	4632      	mov	r2, r6
 800268a:	4629      	mov	r1, r5
 800268c:	4620      	mov	r0, r4
 800268e:	f002 ff29 	bl	80054e4 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8002692:	2001      	movs	r0, #1
 8002694:	f7ff ff96 	bl	80025c4 <NRF24_csn>
}
 8002698:	b002      	add	sp, #8
 800269a:	bd70      	pop	{r4, r5, r6, pc}
 800269c:	20000298 	.word	0x20000298

080026a0 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80026a0:	b530      	push	{r4, r5, lr}
 80026a2:	b083      	sub	sp, #12
 80026a4:	4604      	mov	r4, r0
 80026a6:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80026a8:	2000      	movs	r0, #0
 80026aa:	f7ff ff8b 	bl	80025c4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80026ae:	f044 0420 	orr.w	r4, r4, #32
 80026b2:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 80026b6:	f88d 5005 	strb.w	r5, [sp, #5]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80026ba:	2364      	movs	r3, #100	; 0x64
 80026bc:	2202      	movs	r2, #2
 80026be:	a901      	add	r1, sp, #4
 80026c0:	4803      	ldr	r0, [pc, #12]	; (80026d0 <NRF24_write_register+0x30>)
 80026c2:	f002 fd2b 	bl	800511c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80026c6:	2001      	movs	r0, #1
 80026c8:	f7ff ff7c 	bl	80025c4 <NRF24_csn>
}
 80026cc:	b003      	add	sp, #12
 80026ce:	bd30      	pop	{r4, r5, pc}
 80026d0:	20000298 	.word	0x20000298

080026d4 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80026d4:	b570      	push	{r4, r5, r6, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	4604      	mov	r4, r0
 80026da:	460d      	mov	r5, r1
 80026dc:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80026de:	2000      	movs	r0, #0
 80026e0:	f7ff ff70 	bl	80025c4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80026e4:	f044 0420 	orr.w	r4, r4, #32
 80026e8:	a902      	add	r1, sp, #8
 80026ea:	f801 4d04 	strb.w	r4, [r1, #-4]!
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80026ee:	4c08      	ldr	r4, [pc, #32]	; (8002710 <NRF24_write_registerN+0x3c>)
 80026f0:	2364      	movs	r3, #100	; 0x64
 80026f2:	2201      	movs	r2, #1
 80026f4:	4620      	mov	r0, r4
 80026f6:	f002 fd11 	bl	800511c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80026fa:	2364      	movs	r3, #100	; 0x64
 80026fc:	4632      	mov	r2, r6
 80026fe:	4629      	mov	r1, r5
 8002700:	4620      	mov	r0, r4
 8002702:	f002 fd0b 	bl	800511c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8002706:	2001      	movs	r0, #1
 8002708:	f7ff ff5c 	bl	80025c4 <NRF24_csn>
}
 800270c:	b002      	add	sp, #8
 800270e:	bd70      	pop	{r4, r5, r6, pc}
 8002710:	20000298 	.word	0x20000298

08002714 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8002714:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8002716:	21ff      	movs	r1, #255	; 0xff
 8002718:	20e1      	movs	r0, #225	; 0xe1
 800271a:	f7ff ffc1 	bl	80026a0 <NRF24_write_register>
}
 800271e:	bd08      	pop	{r3, pc}

08002720 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8002720:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8002722:	21ff      	movs	r1, #255	; 0xff
 8002724:	20e2      	movs	r0, #226	; 0xe2
 8002726:	f7ff ffbb 	bl	80026a0 <NRF24_write_register>
}
 800272a:	bd08      	pop	{r3, pc}

0800272c <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 800272c:	b508      	push	{r3, lr}
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800272e:	2007      	movs	r0, #7
 8002730:	f7ff ff74 	bl	800261c <NRF24_read_register>
	return statReg;
}
 8002734:	bd08      	pop	{r3, pc}
	...

08002738 <NRF24_startListening>:
	NRF24_powerDown();
	
}
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8002738:	b508      	push	{r3, lr}
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 800273a:	2000      	movs	r0, #0
 800273c:	f7ff ff6e 	bl	800261c <NRF24_read_register>
 8002740:	f040 0103 	orr.w	r1, r0, #3
 8002744:	b2c9      	uxtb	r1, r1
 8002746:	2000      	movs	r0, #0
 8002748:	f7ff ffaa 	bl	80026a0 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <NRF24_startListening+0x40>)
 800274e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002752:	4313      	orrs	r3, r2
 8002754:	d10a      	bne.n	800276c <NRF24_startListening+0x34>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
	
	//Flush buffers
	NRF24_flush_tx();
 8002756:	f7ff ffdd 	bl	8002714 <NRF24_flush_tx>
	NRF24_flush_rx();
 800275a:	f7ff ffe1 	bl	8002720 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 800275e:	2001      	movs	r0, #1
 8002760:	f7ff ff46 	bl	80025f0 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8002764:	2096      	movs	r0, #150	; 0x96
 8002766:	f7ff ff29 	bl	80025bc <NRF24_DelayMicroSeconds>
}
 800276a:	bd08      	pop	{r3, pc}
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 800276c:	2205      	movs	r2, #5
 800276e:	4902      	ldr	r1, [pc, #8]	; (8002778 <NRF24_startListening+0x40>)
 8002770:	200a      	movs	r0, #10
 8002772:	f7ff ffaf 	bl	80026d4 <NRF24_write_registerN>
 8002776:	e7ee      	b.n	8002756 <NRF24_startListening+0x1e>
 8002778:	20000338 	.word	0x20000338

0800277c <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 800277c:	b510      	push	{r4, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	e9cd 2300 	strd	r2, r3, [sp]
	if (number == 0)
 8002784:	4604      	mov	r4, r0
 8002786:	b920      	cbnz	r0, 8002792 <NRF24_openReadingPipe+0x16>
    pipe0_reading_address = address;
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <NRF24_openReadingPipe+0x60>)
 800278a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800278e:	e9c3 0100 	strd	r0, r1, [r3]
	
	if(number <= 6)
 8002792:	2c06      	cmp	r4, #6
 8002794:	d818      	bhi.n	80027c8 <NRF24_openReadingPipe+0x4c>
	{
		if(number < 2)
 8002796:	2c01      	cmp	r4, #1
 8002798:	d918      	bls.n	80027cc <NRF24_openReadingPipe+0x50>
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 800279a:	2201      	movs	r2, #1
 800279c:	4669      	mov	r1, sp
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <NRF24_openReadingPipe+0x64>)
 80027a0:	5d18      	ldrb	r0, [r3, r4]
 80027a2:	f7ff ff97 	bl	80026d4 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 80027a6:	4b0f      	ldr	r3, [pc, #60]	; (80027e4 <NRF24_openReadingPipe+0x68>)
 80027a8:	7819      	ldrb	r1, [r3, #0]
 80027aa:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <NRF24_openReadingPipe+0x6c>)
 80027ac:	5d18      	ldrb	r0, [r3, r4]
 80027ae:	f7ff ff77 	bl	80026a0 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80027b2:	2002      	movs	r0, #2
 80027b4:	f7ff ff32 	bl	800261c <NRF24_read_register>
 80027b8:	b240      	sxtb	r0, r0
 80027ba:	2101      	movs	r1, #1
 80027bc:	40a1      	lsls	r1, r4
 80027be:	4301      	orrs	r1, r0
 80027c0:	b2c9      	uxtb	r1, r1
 80027c2:	2002      	movs	r0, #2
 80027c4:	f7ff ff6c 	bl	80026a0 <NRF24_write_register>
	}
	
}
 80027c8:	b002      	add	sp, #8
 80027ca:	bd10      	pop	{r4, pc}
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80027cc:	2205      	movs	r2, #5
 80027ce:	4669      	mov	r1, sp
 80027d0:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <NRF24_openReadingPipe+0x64>)
 80027d2:	5d18      	ldrb	r0, [r3, r4]
 80027d4:	f7ff ff7e 	bl	80026d4 <NRF24_write_registerN>
 80027d8:	e7e5      	b.n	80027a6 <NRF24_openReadingPipe+0x2a>
 80027da:	bf00      	nop
 80027dc:	20000338 	.word	0x20000338
 80027e0:	0800b988 	.word	0x0800b988
 80027e4:	20000330 	.word	0x20000330
 80027e8:	0800b990 	.word	0x0800b990

080027ec <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80027ec:	b508      	push	{r3, lr}
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80027ee:	f001 010f 	and.w	r1, r1, #15
 80027f2:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80027f6:	b2c9      	uxtb	r1, r1
 80027f8:	2004      	movs	r0, #4
 80027fa:	f7ff ff51 	bl	80026a0 <NRF24_write_register>
}
 80027fe:	bd08      	pop	{r3, pc}

08002800 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8002800:	b508      	push	{r3, lr}
	const uint8_t max_channel = 127;
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8002802:	4601      	mov	r1, r0
 8002804:	287f      	cmp	r0, #127	; 0x7f
 8002806:	bf28      	it	cs
 8002808:	217f      	movcs	r1, #127	; 0x7f
 800280a:	2005      	movs	r0, #5
 800280c:	f7ff ff48 	bl	80026a0 <NRF24_write_register>
}
 8002810:	bd08      	pop	{r3, pc}
	...

08002814 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
	const uint8_t max_payload_size = 32;
  payload_size = MIN(size,max_payload_size);
 8002814:	2820      	cmp	r0, #32
 8002816:	bf28      	it	cs
 8002818:	2020      	movcs	r0, #32
 800281a:	4b01      	ldr	r3, [pc, #4]	; (8002820 <NRF24_setPayloadSize+0xc>)
 800281c:	7018      	strb	r0, [r3, #0]
}
 800281e:	4770      	bx	lr
 8002820:	20000330 	.word	0x20000330

08002824 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
	return payload_size;
}
 8002824:	4b01      	ldr	r3, [pc, #4]	; (800282c <NRF24_getPayloadSize+0x8>)
 8002826:	7818      	ldrb	r0, [r3, #0]
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000330 	.word	0x20000330

08002830 <NRF24_read_payload>:
{
 8002830:	b570      	push	{r4, r5, r6, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	4606      	mov	r6, r0
 8002836:	460d      	mov	r5, r1
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8002838:	f7ff fff4 	bl	8002824 <NRF24_getPayloadSize>
 800283c:	4604      	mov	r4, r0
 800283e:	42a8      	cmp	r0, r5
 8002840:	d817      	bhi.n	8002872 <NRF24_read_payload+0x42>
	NRF24_csn(0);
 8002842:	2000      	movs	r0, #0
 8002844:	f7ff febe 	bl	80025c4 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8002848:	a902      	add	r1, sp, #8
 800284a:	2361      	movs	r3, #97	; 0x61
 800284c:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8002850:	4d09      	ldr	r5, [pc, #36]	; (8002878 <NRF24_read_payload+0x48>)
 8002852:	2364      	movs	r3, #100	; 0x64
 8002854:	2201      	movs	r2, #1
 8002856:	4628      	mov	r0, r5
 8002858:	f002 fc60 	bl	800511c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 800285c:	2364      	movs	r3, #100	; 0x64
 800285e:	b2a2      	uxth	r2, r4
 8002860:	4631      	mov	r1, r6
 8002862:	4628      	mov	r0, r5
 8002864:	f002 fe3e 	bl	80054e4 <HAL_SPI_Receive>
	NRF24_csn(1);
 8002868:	2001      	movs	r0, #1
 800286a:	f7ff feab 	bl	80025c4 <NRF24_csn>
}
 800286e:	b002      	add	sp, #8
 8002870:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8002872:	462c      	mov	r4, r5
 8002874:	e7e5      	b.n	8002842 <NRF24_read_payload+0x12>
 8002876:	bf00      	nop
 8002878:	20000298 	.word	0x20000298

0800287c <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 800287c:	b508      	push	{r3, lr}
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800287e:	2060      	movs	r0, #96	; 0x60
 8002880:	f7ff fecc 	bl	800261c <NRF24_read_register>
}
 8002884:	bd08      	pop	{r3, pc}

08002886 <NRF24_read>:
{
 8002886:	b510      	push	{r4, lr}
	NRF24_read_payload( buf, len );
 8002888:	f7ff ffd2 	bl	8002830 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800288c:	2017      	movs	r0, #23
 800288e:	f7ff fec5 	bl	800261c <NRF24_read_register>
 8002892:	f000 0401 	and.w	r4, r0, #1
	NRF24_flush_rx();
 8002896:	f7ff ff43 	bl	8002720 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 800289a:	f7ff ffef 	bl	800287c <NRF24_getDynamicPayloadSize>
}
 800289e:	4620      	mov	r0, r4
 80028a0:	bd10      	pop	{r4, pc}

080028a2 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 80028a2:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80028a4:	201d      	movs	r0, #29
 80028a6:	f7ff feb9 	bl	800261c <NRF24_read_register>
 80028aa:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80028ae:	201d      	movs	r0, #29
 80028b0:	f7ff fef6 	bl	80026a0 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80028b4:	2100      	movs	r1, #0
 80028b6:	201c      	movs	r0, #28
 80028b8:	f7ff fef2 	bl	80026a0 <NRF24_write_register>
	dynamic_payloads_enabled = false;
}
 80028bc:	bd08      	pop	{r3, pc}

080028be <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80028be:	b508      	push	{r3, lr}
	if ( enable )
 80028c0:	b920      	cbnz	r0, 80028cc <NRF24_setAutoAck+0xe>
    NRF24_write_register(REG_EN_AA, 0x3F);
  else
    NRF24_write_register(REG_EN_AA, 0x00);
 80028c2:	2100      	movs	r1, #0
 80028c4:	2001      	movs	r0, #1
 80028c6:	f7ff feeb 	bl	80026a0 <NRF24_write_register>
}
 80028ca:	bd08      	pop	{r3, pc}
    NRF24_write_register(REG_EN_AA, 0x3F);
 80028cc:	213f      	movs	r1, #63	; 0x3f
 80028ce:	2001      	movs	r0, #1
 80028d0:	f7ff fee6 	bl	80026a0 <NRF24_write_register>
 80028d4:	e7f9      	b.n	80028ca <NRF24_setAutoAck+0xc>

080028d6 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80028d6:	b510      	push	{r4, lr}
 80028d8:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80028da:	2006      	movs	r0, #6
 80028dc:	f7ff fe9e 	bl	800261c <NRF24_read_register>
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80028e0:	f000 01f9 	and.w	r1, r0, #249	; 0xf9

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80028e4:	2c03      	cmp	r4, #3
 80028e6:	d009      	beq.n	80028fc <NRF24_setPALevel+0x26>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
  }
  else if ( level == RF24_PA_m6dB )
 80028e8:	2c02      	cmp	r4, #2
 80028ea:	d00d      	beq.n	8002908 <NRF24_setPALevel+0x32>
  {
    setup |= _BV(RF_PWR_HIGH) ;
  }
  else if ( level == RF24_PA_m12dB )
 80028ec:	2c01      	cmp	r4, #1
 80028ee:	d00e      	beq.n	800290e <NRF24_setPALevel+0x38>
  {
    setup |= _BV(RF_PWR_LOW);
  }
  else if ( level == RF24_PA_m18dB )
 80028f0:	b134      	cbz	r4, 8002900 <NRF24_setPALevel+0x2a>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80028f2:	2c04      	cmp	r4, #4
 80028f4:	d104      	bne.n	8002900 <NRF24_setPALevel+0x2a>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80028f6:	f041 0106 	orr.w	r1, r1, #6
 80028fa:	e001      	b.n	8002900 <NRF24_setPALevel+0x2a>
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80028fc:	f041 0106 	orr.w	r1, r1, #6
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8002900:	2006      	movs	r0, #6
 8002902:	f7ff fecd 	bl	80026a0 <NRF24_write_register>
}
 8002906:	bd10      	pop	{r4, pc}
    setup |= _BV(RF_PWR_HIGH) ;
 8002908:	f041 0104 	orr.w	r1, r1, #4
 800290c:	e7f8      	b.n	8002900 <NRF24_setPALevel+0x2a>
    setup |= _BV(RF_PWR_LOW);
 800290e:	f041 0102 	orr.w	r1, r1, #2
 8002912:	e7f5      	b.n	8002900 <NRF24_setPALevel+0x2a>

08002914 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8002914:	b538      	push	{r3, r4, r5, lr}
 8002916:	4605      	mov	r5, r0
	bool result = false;
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8002918:	2006      	movs	r0, #6
 800291a:	f7ff fe7f 	bl	800261c <NRF24_read_register>

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800291e:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
  if( speed == RF24_250KBPS )
 8002922:	2d02      	cmp	r5, #2
 8002924:	d00c      	beq.n	8002940 <NRF24_setDataRate+0x2c>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8002926:	2d01      	cmp	r5, #1
 8002928:	d00d      	beq.n	8002946 <NRF24_setDataRate+0x32>
    {
      // 1Mbs
      wide_band = false ;
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 800292a:	4621      	mov	r1, r4
 800292c:	2006      	movs	r0, #6
 800292e:	f7ff feb7 	bl	80026a0 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8002932:	2006      	movs	r0, #6
 8002934:	f7ff fe72 	bl	800261c <NRF24_read_register>
 8002938:	42a0      	cmp	r0, r4
 800293a:	d007      	beq.n	800294c <NRF24_setDataRate+0x38>
	bool result = false;
 800293c:	2000      	movs	r0, #0
  {
    wide_band = false;
  }

  return result;
}
 800293e:	bd38      	pop	{r3, r4, r5, pc}
    setup |= _BV( RF_DR_LOW ) ;
 8002940:	f044 0420 	orr.w	r4, r4, #32
 8002944:	e7f1      	b.n	800292a <NRF24_setDataRate+0x16>
      setup |= _BV(RF_DR_HIGH);
 8002946:	f044 0408 	orr.w	r4, r4, #8
 800294a:	e7ee      	b.n	800292a <NRF24_setDataRate+0x16>
    result = true;
 800294c:	2001      	movs	r0, #1
 800294e:	e7f6      	b.n	800293e <NRF24_setDataRate+0x2a>

08002950 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8002950:	b510      	push	{r4, lr}
 8002952:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8002954:	2000      	movs	r0, #0
 8002956:	f7ff fe61 	bl	800261c <NRF24_read_register>
 800295a:	f000 01f3 	and.w	r1, r0, #243	; 0xf3
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 800295e:	b11c      	cbz	r4, 8002968 <NRF24_setCRCLength+0x18>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8002960:	2c01      	cmp	r4, #1
 8002962:	d005      	beq.n	8002970 <NRF24_setCRCLength+0x20>
    config |= _BV(BIT_EN_CRC);
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
    config |= _BV( BIT_CRCO );
 8002964:	f041 010c 	orr.w	r1, r1, #12
  }
  NRF24_write_register( REG_CONFIG, config );
 8002968:	2000      	movs	r0, #0
 800296a:	f7ff fe99 	bl	80026a0 <NRF24_write_register>
}
 800296e:	bd10      	pop	{r4, pc}
    config |= _BV(BIT_EN_CRC);
 8002970:	f041 0108 	orr.w	r1, r1, #8
 8002974:	e7f8      	b.n	8002968 <NRF24_setCRCLength+0x18>

08002976 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8002976:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8002978:	2000      	movs	r0, #0
 800297a:	f7ff fe4f 	bl	800261c <NRF24_read_register>
 800297e:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 8002982:	2000      	movs	r0, #0
 8002984:	f7ff fe8c 	bl	80026a0 <NRF24_write_register>
}
 8002988:	bd08      	pop	{r3, pc}

0800298a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800298a:	b570      	push	{r4, r5, r6, lr}
 800298c:	4606      	mov	r6, r0
	uint8_t status = NRF24_get_status();
 800298e:	f7ff fecd 	bl	800272c <NRF24_get_status>
 8002992:	f000 0340 	and.w	r3, r0, #64	; 0x40

  bool result = ( status & _BV(BIT_RX_DR) );
 8002996:	2b00      	cmp	r3, #0
 8002998:	bf14      	ite	ne
 800299a:	2501      	movne	r5, #1
 800299c:	2500      	moveq	r5, #0

  if (result)
 800299e:	d00b      	beq.n	80029b8 <NRF24_availablePipe+0x2e>
 80029a0:	4604      	mov	r4, r0
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 80029a2:	b116      	cbz	r6, 80029aa <NRF24_availablePipe+0x20>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80029a4:	f3c0 0342 	ubfx	r3, r0, #1, #3
 80029a8:	7033      	strb	r3, [r6, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80029aa:	2140      	movs	r1, #64	; 0x40
 80029ac:	2007      	movs	r0, #7
 80029ae:	f7ff fe77 	bl	80026a0 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80029b2:	f014 0f20 	tst.w	r4, #32
 80029b6:	d101      	bne.n	80029bc <NRF24_availablePipe+0x32>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
    }
  }
  return result;
}
 80029b8:	4628      	mov	r0, r5
 80029ba:	bd70      	pop	{r4, r5, r6, pc}
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80029bc:	2120      	movs	r1, #32
 80029be:	2007      	movs	r0, #7
 80029c0:	f7ff fe6e 	bl	80026a0 <NRF24_write_register>
 80029c4:	e7f8      	b.n	80029b8 <NRF24_availablePipe+0x2e>

080029c6 <NRF24_available>:
{
 80029c6:	b508      	push	{r3, lr}
	return NRF24_availablePipe(NULL);
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7ff ffde 	bl	800298a <NRF24_availablePipe>
}
 80029ce:	bd08      	pop	{r3, pc}

080029d0 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80029d0:	b508      	push	{r3, lr}
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80029d2:	2170      	movs	r1, #112	; 0x70
 80029d4:	2007      	movs	r0, #7
 80029d6:	f7ff fe63 	bl	80026a0 <NRF24_write_register>
}
 80029da:	bd08      	pop	{r3, pc}

080029dc <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80029dc:	b500      	push	{lr}
 80029de:	b083      	sub	sp, #12
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80029e0:	2000      	movs	r0, #0
 80029e2:	f7ff fdef 	bl	80025c4 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80029e6:	2350      	movs	r3, #80	; 0x50
 80029e8:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 80029ec:	2373      	movs	r3, #115	; 0x73
 80029ee:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80029f2:	2364      	movs	r3, #100	; 0x64
 80029f4:	2202      	movs	r2, #2
 80029f6:	a901      	add	r1, sp, #4
 80029f8:	4804      	ldr	r0, [pc, #16]	; (8002a0c <NRF24_ACTIVATE_cmd+0x30>)
 80029fa:	f002 fb8f 	bl	800511c <HAL_SPI_Transmit>
	NRF24_csn(1);
 80029fe:	2001      	movs	r0, #1
 8002a00:	f7ff fde0 	bl	80025c4 <NRF24_csn>
}
 8002a04:	b003      	add	sp, #12
 8002a06:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a0a:	bf00      	nop
 8002a0c:	20000298 	.word	0x20000298

08002a10 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8002a10:	b570      	push	{r4, r5, r6, lr}
 8002a12:	b0a0      	sub	sp, #128	; 0x80
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002a14:	ac07      	add	r4, sp, #28
 8002a16:	4dc4      	ldr	r5, [pc, #784]	; (8002d28 <printRadioSettings+0x318>)
 8002a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a24:	682b      	ldr	r3, [r5, #0]
 8002a26:	f824 3b02 	strh.w	r3, [r4], #2
 8002a2a:	0c1b      	lsrs	r3, r3, #16
 8002a2c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002a2e:	a807      	add	r0, sp, #28
 8002a30:	f7fe f974 	bl	8000d1c <strlen>
 8002a34:	230a      	movs	r3, #10
 8002a36:	b282      	uxth	r2, r0
 8002a38:	a907      	add	r1, sp, #28
 8002a3a:	48bc      	ldr	r0, [pc, #752]	; (8002d2c <printRadioSettings+0x31c>)
 8002a3c:	f003 fb74 	bl	8006128 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7ff fdeb 	bl	800261c <NRF24_read_register>
	if(reg8Val & (1 << 3))
 8002a46:	f010 0f08 	tst.w	r0, #8
 8002a4a:	f000 8261 	beq.w	8002f10 <printRadioSettings+0x500>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8002a4e:	f010 0f04 	tst.w	r0, #4
 8002a52:	f000 8251 	beq.w	8002ef8 <printRadioSettings+0x4e8>
 8002a56:	ac07      	add	r4, sp, #28
 8002a58:	4db5      	ldr	r5, [pc, #724]	; (8002d30 <printRadioSettings+0x320>)
 8002a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002a62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002a66:	a807      	add	r0, sp, #28
 8002a68:	f7fe f958 	bl	8000d1c <strlen>
 8002a6c:	4caf      	ldr	r4, [pc, #700]	; (8002d2c <printRadioSettings+0x31c>)
 8002a6e:	230a      	movs	r3, #10
 8002a70:	b282      	uxth	r2, r0
 8002a72:	a907      	add	r1, sp, #28
 8002a74:	4620      	mov	r0, r4
 8002a76:	f003 fb57 	bl	8006128 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	f7ff fdce 	bl	800261c <NRF24_read_register>
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002a80:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8002a84:	9303      	str	r3, [sp, #12]
 8002a86:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8002a8a:	9302      	str	r3, [sp, #8]
 8002a8c:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8002a9c:	f000 0201 	and.w	r2, r0, #1
 8002aa0:	49a4      	ldr	r1, [pc, #656]	; (8002d34 <printRadioSettings+0x324>)
 8002aa2:	a807      	add	r0, sp, #28
 8002aa4:	f005 f816 	bl	8007ad4 <siprintf>
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002aa8:	a807      	add	r0, sp, #28
 8002aaa:	f7fe f937 	bl	8000d1c <strlen>
 8002aae:	230a      	movs	r3, #10
 8002ab0:	b282      	uxth	r2, r0
 8002ab2:	a907      	add	r1, sp, #28
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	f003 fb37 	bl	8006128 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8002aba:	2002      	movs	r0, #2
 8002abc:	f7ff fdae 	bl	800261c <NRF24_read_register>
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002ac0:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8002ac4:	9303      	str	r3, [sp, #12]
 8002ac6:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8002aca:	9302      	str	r3, [sp, #8]
 8002acc:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8002adc:	f000 0201 	and.w	r2, r0, #1
 8002ae0:	4995      	ldr	r1, [pc, #596]	; (8002d38 <printRadioSettings+0x328>)
 8002ae2:	a807      	add	r0, sp, #28
 8002ae4:	f004 fff6 	bl	8007ad4 <siprintf>
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002ae8:	a807      	add	r0, sp, #28
 8002aea:	f7fe f917 	bl	8000d1c <strlen>
 8002aee:	230a      	movs	r3, #10
 8002af0:	b282      	uxth	r2, r0
 8002af2:	a907      	add	r1, sp, #28
 8002af4:	4620      	mov	r0, r4
 8002af6:	f003 fb17 	bl	8006128 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8002afa:	2003      	movs	r0, #3
 8002afc:	f7ff fd8e 	bl	800261c <NRF24_read_register>
 8002b00:	f000 0203 	and.w	r2, r0, #3
	reg8Val +=2;
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8002b04:	3202      	adds	r2, #2
 8002b06:	498d      	ldr	r1, [pc, #564]	; (8002d3c <printRadioSettings+0x32c>)
 8002b08:	a807      	add	r0, sp, #28
 8002b0a:	f004 ffe3 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002b0e:	a807      	add	r0, sp, #28
 8002b10:	f7fe f904 	bl	8000d1c <strlen>
 8002b14:	230a      	movs	r3, #10
 8002b16:	b282      	uxth	r2, r0
 8002b18:	a907      	add	r1, sp, #28
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	f003 fb04 	bl	8006128 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8002b20:	2005      	movs	r0, #5
 8002b22:	f7ff fd7b 	bl	800261c <NRF24_read_register>
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8002b26:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8002b2a:	4985      	ldr	r1, [pc, #532]	; (8002d40 <printRadioSettings+0x330>)
 8002b2c:	a807      	add	r0, sp, #28
 8002b2e:	f004 ffd1 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002b32:	a807      	add	r0, sp, #28
 8002b34:	f7fe f8f2 	bl	8000d1c <strlen>
 8002b38:	230a      	movs	r3, #10
 8002b3a:	b282      	uxth	r2, r0
 8002b3c:	a907      	add	r1, sp, #28
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f003 faf2 	bl	8006128 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8002b44:	2006      	movs	r0, #6
 8002b46:	f7ff fd69 	bl	800261c <NRF24_read_register>
 8002b4a:	4604      	mov	r4, r0
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8002b4c:	f010 0f08 	tst.w	r0, #8
 8002b50:	f000 81e5 	beq.w	8002f1e <printRadioSettings+0x50e>
 8002b54:	ad07      	add	r5, sp, #28
 8002b56:	4e7b      	ldr	r6, [pc, #492]	; (8002d44 <printRadioSettings+0x334>)
 8002b58:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b5c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002b60:	f845 0b04 	str.w	r0, [r5], #4
 8002b64:	f825 1b02 	strh.w	r1, [r5], #2
 8002b68:	0c09      	lsrs	r1, r1, #16
 8002b6a:	7029      	strb	r1, [r5, #0]
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002b6c:	a807      	add	r0, sp, #28
 8002b6e:	f7fe f8d5 	bl	8000d1c <strlen>
 8002b72:	230a      	movs	r3, #10
 8002b74:	b282      	uxth	r2, r0
 8002b76:	a907      	add	r1, sp, #28
 8002b78:	486c      	ldr	r0, [pc, #432]	; (8002d2c <printRadioSettings+0x31c>)
 8002b7a:	f003 fad5 	bl	8006128 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
	reg8Val = (reg8Val>>1);
 8002b7e:	f3c4 0441 	ubfx	r4, r4, #1, #2
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8002b82:	2c00      	cmp	r4, #0
 8002b84:	f000 81d8 	beq.w	8002f38 <printRadioSettings+0x528>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8002b88:	2c01      	cmp	r4, #1
 8002b8a:	f000 81dc 	beq.w	8002f46 <printRadioSettings+0x536>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8002b8e:	2c02      	cmp	r4, #2
 8002b90:	f000 81e0 	beq.w	8002f54 <printRadioSettings+0x544>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8002b94:	2c03      	cmp	r4, #3
 8002b96:	f000 81e7 	beq.w	8002f68 <printRadioSettings+0x558>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002b9a:	a807      	add	r0, sp, #28
 8002b9c:	f7fe f8be 	bl	8000d1c <strlen>
 8002ba0:	4c62      	ldr	r4, [pc, #392]	; (8002d2c <printRadioSettings+0x31c>)
 8002ba2:	230a      	movs	r3, #10
 8002ba4:	b282      	uxth	r2, r0
 8002ba6:	a907      	add	r1, sp, #28
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f003 fabd 	bl	8006128 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8002bae:	2205      	movs	r2, #5
 8002bb0:	a905      	add	r1, sp, #20
 8002bb2:	200a      	movs	r0, #10
 8002bb4:	f7ff fd54 	bl	8002660 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002bb8:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8002bbc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002bc0:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8002bc4:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8002bc8:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8002bcc:	9502      	str	r5, [sp, #8]
 8002bce:	9001      	str	r0, [sp, #4]
 8002bd0:	9100      	str	r1, [sp, #0]
 8002bd2:	495d      	ldr	r1, [pc, #372]	; (8002d48 <printRadioSettings+0x338>)
 8002bd4:	a807      	add	r0, sp, #28
 8002bd6:	f004 ff7d 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002bda:	a807      	add	r0, sp, #28
 8002bdc:	f7fe f89e 	bl	8000d1c <strlen>
 8002be0:	230a      	movs	r3, #10
 8002be2:	b282      	uxth	r2, r0
 8002be4:	a907      	add	r1, sp, #28
 8002be6:	4620      	mov	r0, r4
 8002be8:	f003 fa9e 	bl	8006128 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8002bec:	2205      	movs	r2, #5
 8002bee:	a905      	add	r1, sp, #20
 8002bf0:	200b      	movs	r0, #11
 8002bf2:	f7ff fd35 	bl	8002660 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002bf6:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8002bfa:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002bfe:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8002c02:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8002c06:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8002c0a:	9502      	str	r5, [sp, #8]
 8002c0c:	9001      	str	r0, [sp, #4]
 8002c0e:	9100      	str	r1, [sp, #0]
 8002c10:	494e      	ldr	r1, [pc, #312]	; (8002d4c <printRadioSettings+0x33c>)
 8002c12:	a807      	add	r0, sp, #28
 8002c14:	f004 ff5e 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002c18:	a807      	add	r0, sp, #28
 8002c1a:	f7fe f87f 	bl	8000d1c <strlen>
 8002c1e:	230a      	movs	r3, #10
 8002c20:	b282      	uxth	r2, r0
 8002c22:	a907      	add	r1, sp, #28
 8002c24:	4620      	mov	r0, r4
 8002c26:	f003 fa7f 	bl	8006128 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	a905      	add	r1, sp, #20
 8002c2e:	200c      	movs	r0, #12
 8002c30:	f7ff fd16 	bl	8002660 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002c34:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002c38:	4945      	ldr	r1, [pc, #276]	; (8002d50 <printRadioSettings+0x340>)
 8002c3a:	a807      	add	r0, sp, #28
 8002c3c:	f004 ff4a 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002c40:	a807      	add	r0, sp, #28
 8002c42:	f7fe f86b 	bl	8000d1c <strlen>
 8002c46:	230a      	movs	r3, #10
 8002c48:	b282      	uxth	r2, r0
 8002c4a:	a907      	add	r1, sp, #28
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	f003 fa6b 	bl	8006128 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8002c52:	2201      	movs	r2, #1
 8002c54:	a905      	add	r1, sp, #20
 8002c56:	200d      	movs	r0, #13
 8002c58:	f7ff fd02 	bl	8002660 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002c5c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002c60:	493c      	ldr	r1, [pc, #240]	; (8002d54 <printRadioSettings+0x344>)
 8002c62:	a807      	add	r0, sp, #28
 8002c64:	f004 ff36 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002c68:	a807      	add	r0, sp, #28
 8002c6a:	f7fe f857 	bl	8000d1c <strlen>
 8002c6e:	230a      	movs	r3, #10
 8002c70:	b282      	uxth	r2, r0
 8002c72:	a907      	add	r1, sp, #28
 8002c74:	4620      	mov	r0, r4
 8002c76:	f003 fa57 	bl	8006128 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	a905      	add	r1, sp, #20
 8002c7e:	200e      	movs	r0, #14
 8002c80:	f7ff fcee 	bl	8002660 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002c84:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002c88:	4933      	ldr	r1, [pc, #204]	; (8002d58 <printRadioSettings+0x348>)
 8002c8a:	a807      	add	r0, sp, #28
 8002c8c:	f004 ff22 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002c90:	a807      	add	r0, sp, #28
 8002c92:	f7fe f843 	bl	8000d1c <strlen>
 8002c96:	230a      	movs	r3, #10
 8002c98:	b282      	uxth	r2, r0
 8002c9a:	a907      	add	r1, sp, #28
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	f003 fa43 	bl	8006128 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	a905      	add	r1, sp, #20
 8002ca6:	200f      	movs	r0, #15
 8002ca8:	f7ff fcda 	bl	8002660 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002cac:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002cb0:	492a      	ldr	r1, [pc, #168]	; (8002d5c <printRadioSettings+0x34c>)
 8002cb2:	a807      	add	r0, sp, #28
 8002cb4:	f004 ff0e 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002cb8:	a807      	add	r0, sp, #28
 8002cba:	f7fe f82f 	bl	8000d1c <strlen>
 8002cbe:	230a      	movs	r3, #10
 8002cc0:	b282      	uxth	r2, r0
 8002cc2:	a907      	add	r1, sp, #28
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	f003 fa2f 	bl	8006128 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8002cca:	2205      	movs	r2, #5
 8002ccc:	a905      	add	r1, sp, #20
 8002cce:	2010      	movs	r0, #16
 8002cd0:	f7ff fcc6 	bl	8002660 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002cd4:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8002cd8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002cdc:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8002ce0:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8002ce4:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8002ce8:	9502      	str	r5, [sp, #8]
 8002cea:	9001      	str	r0, [sp, #4]
 8002cec:	9100      	str	r1, [sp, #0]
 8002cee:	491c      	ldr	r1, [pc, #112]	; (8002d60 <printRadioSettings+0x350>)
 8002cf0:	a807      	add	r0, sp, #28
 8002cf2:	f004 feef 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002cf6:	a807      	add	r0, sp, #28
 8002cf8:	f7fe f810 	bl	8000d1c <strlen>
 8002cfc:	230a      	movs	r3, #10
 8002cfe:	b282      	uxth	r2, r0
 8002d00:	a907      	add	r1, sp, #28
 8002d02:	4620      	mov	r0, r4
 8002d04:	f003 fa10 	bl	8006128 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8002d08:	2011      	movs	r0, #17
 8002d0a:	f7ff fc87 	bl	800261c <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002d0e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002d12:	4914      	ldr	r1, [pc, #80]	; (8002d64 <printRadioSettings+0x354>)
 8002d14:	a807      	add	r0, sp, #28
 8002d16:	f004 fedd 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002d1a:	a807      	add	r0, sp, #28
 8002d1c:	f7fd fffe 	bl	8000d1c <strlen>
 8002d20:	230a      	movs	r3, #10
 8002d22:	b282      	uxth	r2, r0
 8002d24:	e020      	b.n	8002d68 <printRadioSettings+0x358>
 8002d26:	bf00      	nop
 8002d28:	0800b998 	.word	0x0800b998
 8002d2c:	200002f0 	.word	0x200002f0
 8002d30:	0800b9cc 	.word	0x0800b9cc
 8002d34:	0800ba18 	.word	0x0800ba18
 8002d38:	0800ba5c 	.word	0x0800ba5c
 8002d3c:	0800baa8 	.word	0x0800baa8
 8002d40:	0800bac4 	.word	0x0800bac4
 8002d44:	0800bad8 	.word	0x0800bad8
 8002d48:	0800bb58 	.word	0x0800bb58
 8002d4c:	0800bb88 	.word	0x0800bb88
 8002d50:	0800bbb8 	.word	0x0800bbb8
 8002d54:	0800bbe0 	.word	0x0800bbe0
 8002d58:	0800bc08 	.word	0x0800bc08
 8002d5c:	0800bc30 	.word	0x0800bc30
 8002d60:	0800bc58 	.word	0x0800bc58
 8002d64:	0800bc84 	.word	0x0800bc84
 8002d68:	a907      	add	r1, sp, #28
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	f003 f9dc 	bl	8006128 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8002d70:	2012      	movs	r0, #18
 8002d72:	f7ff fc53 	bl	800261c <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002d76:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002d7a:	498a      	ldr	r1, [pc, #552]	; (8002fa4 <printRadioSettings+0x594>)
 8002d7c:	a807      	add	r0, sp, #28
 8002d7e:	f004 fea9 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002d82:	a807      	add	r0, sp, #28
 8002d84:	f7fd ffca 	bl	8000d1c <strlen>
 8002d88:	230a      	movs	r3, #10
 8002d8a:	b282      	uxth	r2, r0
 8002d8c:	a907      	add	r1, sp, #28
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f003 f9ca 	bl	8006128 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8002d94:	2013      	movs	r0, #19
 8002d96:	f7ff fc41 	bl	800261c <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002d9a:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002d9e:	4982      	ldr	r1, [pc, #520]	; (8002fa8 <printRadioSettings+0x598>)
 8002da0:	a807      	add	r0, sp, #28
 8002da2:	f004 fe97 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002da6:	a807      	add	r0, sp, #28
 8002da8:	f7fd ffb8 	bl	8000d1c <strlen>
 8002dac:	230a      	movs	r3, #10
 8002dae:	b282      	uxth	r2, r0
 8002db0:	a907      	add	r1, sp, #28
 8002db2:	4620      	mov	r0, r4
 8002db4:	f003 f9b8 	bl	8006128 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8002db8:	2014      	movs	r0, #20
 8002dba:	f7ff fc2f 	bl	800261c <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002dbe:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002dc2:	497a      	ldr	r1, [pc, #488]	; (8002fac <printRadioSettings+0x59c>)
 8002dc4:	a807      	add	r0, sp, #28
 8002dc6:	f004 fe85 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002dca:	a807      	add	r0, sp, #28
 8002dcc:	f7fd ffa6 	bl	8000d1c <strlen>
 8002dd0:	230a      	movs	r3, #10
 8002dd2:	b282      	uxth	r2, r0
 8002dd4:	a907      	add	r1, sp, #28
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	f003 f9a6 	bl	8006128 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8002ddc:	2015      	movs	r0, #21
 8002dde:	f7ff fc1d 	bl	800261c <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002de2:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002de6:	4972      	ldr	r1, [pc, #456]	; (8002fb0 <printRadioSettings+0x5a0>)
 8002de8:	a807      	add	r0, sp, #28
 8002dea:	f004 fe73 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002dee:	a807      	add	r0, sp, #28
 8002df0:	f7fd ff94 	bl	8000d1c <strlen>
 8002df4:	230a      	movs	r3, #10
 8002df6:	b282      	uxth	r2, r0
 8002df8:	a907      	add	r1, sp, #28
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	f003 f994 	bl	8006128 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8002e00:	2016      	movs	r0, #22
 8002e02:	f7ff fc0b 	bl	800261c <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002e06:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002e0a:	496a      	ldr	r1, [pc, #424]	; (8002fb4 <printRadioSettings+0x5a4>)
 8002e0c:	a807      	add	r0, sp, #28
 8002e0e:	f004 fe61 	bl	8007ad4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002e12:	a807      	add	r0, sp, #28
 8002e14:	f7fd ff82 	bl	8000d1c <strlen>
 8002e18:	230a      	movs	r3, #10
 8002e1a:	b282      	uxth	r2, r0
 8002e1c:	a907      	add	r1, sp, #28
 8002e1e:	4620      	mov	r0, r4
 8002e20:	f003 f982 	bl	8006128 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8002e24:	201c      	movs	r0, #28
 8002e26:	f7ff fbf9 	bl	800261c <NRF24_read_register>
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002e2a:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8002e2e:	9303      	str	r3, [sp, #12]
 8002e30:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8002e34:	9302      	str	r3, [sp, #8]
 8002e36:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8002e46:	f000 0201 	and.w	r2, r0, #1
 8002e4a:	495b      	ldr	r1, [pc, #364]	; (8002fb8 <printRadioSettings+0x5a8>)
 8002e4c:	a807      	add	r0, sp, #28
 8002e4e:	f004 fe41 	bl	8007ad4 <siprintf>
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002e52:	a807      	add	r0, sp, #28
 8002e54:	f7fd ff62 	bl	8000d1c <strlen>
 8002e58:	230a      	movs	r3, #10
 8002e5a:	b282      	uxth	r2, r0
 8002e5c:	a907      	add	r1, sp, #28
 8002e5e:	4620      	mov	r0, r4
 8002e60:	f003 f962 	bl	8006128 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8002e64:	201d      	movs	r0, #29
 8002e66:	f7ff fbd9 	bl	800261c <NRF24_read_register>
 8002e6a:	4606      	mov	r6, r0
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8002e6c:	f010 0f04 	tst.w	r0, #4
 8002e70:	f000 8081 	beq.w	8002f76 <printRadioSettings+0x566>
 8002e74:	ac07      	add	r4, sp, #28
 8002e76:	4d51      	ldr	r5, [pc, #324]	; (8002fbc <printRadioSettings+0x5ac>)
 8002e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002e80:	f844 0b04 	str.w	r0, [r4], #4
 8002e84:	8021      	strh	r1, [r4, #0]
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002e86:	a807      	add	r0, sp, #28
 8002e88:	f7fd ff48 	bl	8000d1c <strlen>
 8002e8c:	230a      	movs	r3, #10
 8002e8e:	b282      	uxth	r2, r0
 8002e90:	a907      	add	r1, sp, #28
 8002e92:	484b      	ldr	r0, [pc, #300]	; (8002fc0 <printRadioSettings+0x5b0>)
 8002e94:	f003 f948 	bl	8006128 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002e98:	f016 0f02 	tst.w	r6, #2
 8002e9c:	d178      	bne.n	8002f90 <printRadioSettings+0x580>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8002e9e:	ac07      	add	r4, sp, #28
 8002ea0:	4d48      	ldr	r5, [pc, #288]	; (8002fc4 <printRadioSettings+0x5b4>)
 8002ea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ea6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002eaa:	c403      	stmia	r4!, {r0, r1}
 8002eac:	f824 2b02 	strh.w	r2, [r4], #2
 8002eb0:	0c12      	lsrs	r2, r2, #16
 8002eb2:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002eb4:	a807      	add	r0, sp, #28
 8002eb6:	f7fd ff31 	bl	8000d1c <strlen>
 8002eba:	4e41      	ldr	r6, [pc, #260]	; (8002fc0 <printRadioSettings+0x5b0>)
 8002ebc:	230a      	movs	r3, #10
 8002ebe:	b282      	uxth	r2, r0
 8002ec0:	a907      	add	r1, sp, #28
 8002ec2:	4630      	mov	r0, r6
 8002ec4:	f003 f930 	bl	8006128 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002ec8:	ac07      	add	r4, sp, #28
 8002eca:	4d3f      	ldr	r5, [pc, #252]	; (8002fc8 <printRadioSettings+0x5b8>)
 8002ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ed8:	682b      	ldr	r3, [r5, #0]
 8002eda:	f824 3b02 	strh.w	r3, [r4], #2
 8002ede:	0c1b      	lsrs	r3, r3, #16
 8002ee0:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002ee2:	a807      	add	r0, sp, #28
 8002ee4:	f7fd ff1a 	bl	8000d1c <strlen>
 8002ee8:	230a      	movs	r3, #10
 8002eea:	b282      	uxth	r2, r0
 8002eec:	a907      	add	r1, sp, #28
 8002eee:	4630      	mov	r0, r6
 8002ef0:	f003 f91a 	bl	8006128 <HAL_UART_Transmit>
}
 8002ef4:	b020      	add	sp, #128	; 0x80
 8002ef6:	bd70      	pop	{r4, r5, r6, pc}
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8002ef8:	ac07      	add	r4, sp, #28
 8002efa:	4d34      	ldr	r5, [pc, #208]	; (8002fcc <printRadioSettings+0x5bc>)
 8002efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f04:	c403      	stmia	r4!, {r0, r1}
 8002f06:	f824 2b02 	strh.w	r2, [r4], #2
 8002f0a:	0c12      	lsrs	r2, r2, #16
 8002f0c:	7022      	strb	r2, [r4, #0]
 8002f0e:	e5aa      	b.n	8002a66 <printRadioSettings+0x56>
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8002f10:	ac07      	add	r4, sp, #28
 8002f12:	4d2f      	ldr	r5, [pc, #188]	; (8002fd0 <printRadioSettings+0x5c0>)
 8002f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f18:	682b      	ldr	r3, [r5, #0]
 8002f1a:	6023      	str	r3, [r4, #0]
 8002f1c:	e5a3      	b.n	8002a66 <printRadioSettings+0x56>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8002f1e:	ad07      	add	r5, sp, #28
 8002f20:	4e2c      	ldr	r6, [pc, #176]	; (8002fd4 <printRadioSettings+0x5c4>)
 8002f22:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002f24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f26:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002f2a:	f845 0b04 	str.w	r0, [r5], #4
 8002f2e:	f825 1b02 	strh.w	r1, [r5], #2
 8002f32:	0c09      	lsrs	r1, r1, #16
 8002f34:	7029      	strb	r1, [r5, #0]
 8002f36:	e619      	b.n	8002b6c <printRadioSettings+0x15c>
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8002f38:	ac07      	add	r4, sp, #28
 8002f3a:	4d27      	ldr	r5, [pc, #156]	; (8002fd8 <printRadioSettings+0x5c8>)
 8002f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f40:	682b      	ldr	r3, [r5, #0]
 8002f42:	6023      	str	r3, [r4, #0]
 8002f44:	e629      	b.n	8002b9a <printRadioSettings+0x18a>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8002f46:	ac07      	add	r4, sp, #28
 8002f48:	4d24      	ldr	r5, [pc, #144]	; (8002fdc <printRadioSettings+0x5cc>)
 8002f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f4e:	682b      	ldr	r3, [r5, #0]
 8002f50:	6023      	str	r3, [r4, #0]
 8002f52:	e622      	b.n	8002b9a <printRadioSettings+0x18a>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8002f54:	ac07      	add	r4, sp, #28
 8002f56:	4d22      	ldr	r5, [pc, #136]	; (8002fe0 <printRadioSettings+0x5d0>)
 8002f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f5c:	682b      	ldr	r3, [r5, #0]
 8002f5e:	f824 3b02 	strh.w	r3, [r4], #2
 8002f62:	0c1b      	lsrs	r3, r3, #16
 8002f64:	7023      	strb	r3, [r4, #0]
 8002f66:	e618      	b.n	8002b9a <printRadioSettings+0x18a>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8002f68:	ac07      	add	r4, sp, #28
 8002f6a:	4d1e      	ldr	r5, [pc, #120]	; (8002fe4 <printRadioSettings+0x5d4>)
 8002f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f70:	682b      	ldr	r3, [r5, #0]
 8002f72:	8023      	strh	r3, [r4, #0]
 8002f74:	e611      	b.n	8002b9a <printRadioSettings+0x18a>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8002f76:	ac07      	add	r4, sp, #28
 8002f78:	4d1b      	ldr	r5, [pc, #108]	; (8002fe8 <printRadioSettings+0x5d8>)
 8002f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002f82:	f844 0b04 	str.w	r0, [r4], #4
 8002f86:	f824 1b02 	strh.w	r1, [r4], #2
 8002f8a:	0c09      	lsrs	r1, r1, #16
 8002f8c:	7021      	strb	r1, [r4, #0]
 8002f8e:	e77a      	b.n	8002e86 <printRadioSettings+0x476>
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002f90:	ac07      	add	r4, sp, #28
 8002f92:	4d16      	ldr	r5, [pc, #88]	; (8002fec <printRadioSettings+0x5dc>)
 8002f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f9c:	c403      	stmia	r4!, {r0, r1}
 8002f9e:	8022      	strh	r2, [r4, #0]
 8002fa0:	e788      	b.n	8002eb4 <printRadioSettings+0x4a4>
 8002fa2:	bf00      	nop
 8002fa4:	0800bca0 	.word	0x0800bca0
 8002fa8:	0800bcbc 	.word	0x0800bcbc
 8002fac:	0800bcd8 	.word	0x0800bcd8
 8002fb0:	0800bcf4 	.word	0x0800bcf4
 8002fb4:	0800bd10 	.word	0x0800bd10
 8002fb8:	0800bd2c 	.word	0x0800bd2c
 8002fbc:	0800bd78 	.word	0x0800bd78
 8002fc0:	200002f0 	.word	0x200002f0
 8002fc4:	0800bdc4 	.word	0x0800bdc4
 8002fc8:	0800b998 	.word	0x0800b998
 8002fcc:	0800b9e8 	.word	0x0800b9e8
 8002fd0:	0800ba04 	.word	0x0800ba04
 8002fd4:	0800baf0 	.word	0x0800baf0
 8002fd8:	0800bb08 	.word	0x0800bb08
 8002fdc:	0800bb1c 	.word	0x0800bb1c
 8002fe0:	0800bb30 	.word	0x0800bb30
 8002fe4:	0800bb44 	.word	0x0800bb44
 8002fe8:	0800bd90 	.word	0x0800bd90
 8002fec:	0800bda8 	.word	0x0800bda8

08002ff0 <NRF24_begin>:
{
 8002ff0:	b082      	sub	sp, #8
 8002ff2:	b570      	push	{r4, r5, r6, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	4606      	mov	r6, r0
 8002ff8:	460d      	mov	r5, r1
 8002ffa:	4614      	mov	r4, r2
 8002ffc:	a906      	add	r1, sp, #24
 8002ffe:	f841 3f04 	str.w	r3, [r1, #4]!
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8003002:	2258      	movs	r2, #88	; 0x58
 8003004:	485f      	ldr	r0, [pc, #380]	; (8003184 <NRF24_begin+0x194>)
 8003006:	f004 f879 	bl	80070fc <memcpy>
	nrf24_PORT = nrf24PORT;
 800300a:	4b5f      	ldr	r3, [pc, #380]	; (8003188 <NRF24_begin+0x198>)
 800300c:	601e      	str	r6, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800300e:	4b5f      	ldr	r3, [pc, #380]	; (800318c <NRF24_begin+0x19c>)
 8003010:	801d      	strh	r5, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8003012:	4b5f      	ldr	r3, [pc, #380]	; (8003190 <NRF24_begin+0x1a0>)
 8003014:	801c      	strh	r4, [r3, #0]
	NRF24_csn(1);
 8003016:	2001      	movs	r0, #1
 8003018:	f7ff fad4 	bl	80025c4 <NRF24_csn>
	NRF24_ce(0);
 800301c:	2000      	movs	r0, #0
 800301e:	f7ff fae7 	bl	80025f0 <NRF24_ce>
	HAL_Delay(5);
 8003022:	2005      	movs	r0, #5
 8003024:	f000 f9dc 	bl	80033e0 <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 8003028:	2108      	movs	r1, #8
 800302a:	2000      	movs	r0, #0
 800302c:	f7ff fb38 	bl	80026a0 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8003030:	213f      	movs	r1, #63	; 0x3f
 8003032:	2001      	movs	r0, #1
 8003034:	f7ff fb34 	bl	80026a0 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8003038:	2103      	movs	r1, #3
 800303a:	2002      	movs	r0, #2
 800303c:	f7ff fb30 	bl	80026a0 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8003040:	2103      	movs	r1, #3
 8003042:	4608      	mov	r0, r1
 8003044:	f7ff fb2c 	bl	80026a0 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8003048:	2103      	movs	r1, #3
 800304a:	2004      	movs	r0, #4
 800304c:	f7ff fb28 	bl	80026a0 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8003050:	2102      	movs	r1, #2
 8003052:	2005      	movs	r0, #5
 8003054:	f7ff fb24 	bl	80026a0 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8003058:	210f      	movs	r1, #15
 800305a:	2006      	movs	r0, #6
 800305c:	f7ff fb20 	bl	80026a0 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8003060:	210e      	movs	r1, #14
 8003062:	2007      	movs	r0, #7
 8003064:	f7ff fb1c 	bl	80026a0 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8003068:	2100      	movs	r1, #0
 800306a:	2008      	movs	r0, #8
 800306c:	f7ff fb18 	bl	80026a0 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8003070:	2100      	movs	r1, #0
 8003072:	2009      	movs	r0, #9
 8003074:	f7ff fb14 	bl	80026a0 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8003078:	24e7      	movs	r4, #231	; 0xe7
 800307a:	f88d 4004 	strb.w	r4, [sp, #4]
 800307e:	f88d 4003 	strb.w	r4, [sp, #3]
 8003082:	f88d 4002 	strb.w	r4, [sp, #2]
 8003086:	f88d 4001 	strb.w	r4, [sp, #1]
 800308a:	ad02      	add	r5, sp, #8
 800308c:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8003090:	2205      	movs	r2, #5
 8003092:	4629      	mov	r1, r5
 8003094:	200a      	movs	r0, #10
 8003096:	f7ff fb1d 	bl	80026d4 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 800309a:	23c2      	movs	r3, #194	; 0xc2
 800309c:	f88d 3004 	strb.w	r3, [sp, #4]
 80030a0:	f88d 3003 	strb.w	r3, [sp, #3]
 80030a4:	f88d 3002 	strb.w	r3, [sp, #2]
 80030a8:	f88d 3001 	strb.w	r3, [sp, #1]
 80030ac:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80030b0:	2205      	movs	r2, #5
 80030b2:	4629      	mov	r1, r5
 80030b4:	200b      	movs	r0, #11
 80030b6:	f7ff fb0d 	bl	80026d4 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80030ba:	21c3      	movs	r1, #195	; 0xc3
 80030bc:	200c      	movs	r0, #12
 80030be:	f7ff faef 	bl	80026a0 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80030c2:	21c4      	movs	r1, #196	; 0xc4
 80030c4:	200d      	movs	r0, #13
 80030c6:	f7ff faeb 	bl	80026a0 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80030ca:	21c5      	movs	r1, #197	; 0xc5
 80030cc:	200e      	movs	r0, #14
 80030ce:	f7ff fae7 	bl	80026a0 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80030d2:	21c6      	movs	r1, #198	; 0xc6
 80030d4:	200f      	movs	r0, #15
 80030d6:	f7ff fae3 	bl	80026a0 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80030da:	f88d 4004 	strb.w	r4, [sp, #4]
 80030de:	f88d 4003 	strb.w	r4, [sp, #3]
 80030e2:	f88d 4002 	strb.w	r4, [sp, #2]
 80030e6:	f88d 4001 	strb.w	r4, [sp, #1]
 80030ea:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80030ee:	2205      	movs	r2, #5
 80030f0:	4629      	mov	r1, r5
 80030f2:	2010      	movs	r0, #16
 80030f4:	f7ff faee 	bl	80026d4 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80030f8:	2100      	movs	r1, #0
 80030fa:	2011      	movs	r0, #17
 80030fc:	f7ff fad0 	bl	80026a0 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8003100:	2100      	movs	r1, #0
 8003102:	2012      	movs	r0, #18
 8003104:	f7ff facc 	bl	80026a0 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8003108:	2100      	movs	r1, #0
 800310a:	2013      	movs	r0, #19
 800310c:	f7ff fac8 	bl	80026a0 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8003110:	2100      	movs	r1, #0
 8003112:	2014      	movs	r0, #20
 8003114:	f7ff fac4 	bl	80026a0 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8003118:	2100      	movs	r1, #0
 800311a:	2015      	movs	r0, #21
 800311c:	f7ff fac0 	bl	80026a0 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8003120:	2100      	movs	r1, #0
 8003122:	2016      	movs	r0, #22
 8003124:	f7ff fabc 	bl	80026a0 <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 8003128:	f7ff fc58 	bl	80029dc <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800312c:	2100      	movs	r1, #0
 800312e:	201c      	movs	r0, #28
 8003130:	f7ff fab6 	bl	80026a0 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8003134:	2100      	movs	r1, #0
 8003136:	201d      	movs	r0, #29
 8003138:	f7ff fab2 	bl	80026a0 <NRF24_write_register>
	printRadioSettings();
 800313c:	f7ff fc68 	bl	8002a10 <printRadioSettings>
	NRF24_setRetries(15, 15);
 8003140:	210f      	movs	r1, #15
 8003142:	4608      	mov	r0, r1
 8003144:	f7ff fb52 	bl	80027ec <NRF24_setRetries>
	NRF24_setPALevel(RF24_PA_0dB);
 8003148:	2003      	movs	r0, #3
 800314a:	f7ff fbc4 	bl	80028d6 <NRF24_setPALevel>
	NRF24_setDataRate(RF24_2MBPS);
 800314e:	2001      	movs	r0, #1
 8003150:	f7ff fbe0 	bl	8002914 <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 8003154:	2002      	movs	r0, #2
 8003156:	f7ff fbfb 	bl	8002950 <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 800315a:	f7ff fba2 	bl	80028a2 <NRF24_disableDynamicPayloads>
	NRF24_setPayloadSize(32);
 800315e:	2020      	movs	r0, #32
 8003160:	f7ff fb58 	bl	8002814 <NRF24_setPayloadSize>
	NRF24_resetStatus();
 8003164:	f7ff fc34 	bl	80029d0 <NRF24_resetStatus>
	NRF24_setChannel(76);
 8003168:	204c      	movs	r0, #76	; 0x4c
 800316a:	f7ff fb49 	bl	8002800 <NRF24_setChannel>
	NRF24_flush_tx();
 800316e:	f7ff fad1 	bl	8002714 <NRF24_flush_tx>
	NRF24_flush_rx();
 8003172:	f7ff fad5 	bl	8002720 <NRF24_flush_rx>
	NRF24_powerDown();
 8003176:	f7ff fbfe 	bl	8002976 <NRF24_powerDown>
}
 800317a:	b002      	add	sp, #8
 800317c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003180:	b002      	add	sp, #8
 8003182:	4770      	bx	lr
 8003184:	20000298 	.word	0x20000298
 8003188:	20000294 	.word	0x20000294
 800318c:	20000292 	.word	0x20000292
 8003190:	20000290 	.word	0x20000290

08003194 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8003194:	b084      	sub	sp, #16
 8003196:	b430      	push	{r4, r5}
 8003198:	ac02      	add	r4, sp, #8
 800319a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 800319e:	4c07      	ldr	r4, [pc, #28]	; (80031bc <nrf24_DebugUART_Init+0x28>)
 80031a0:	ad02      	add	r5, sp, #8
 80031a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80031b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80031b6:	bc30      	pop	{r4, r5}
 80031b8:	b004      	add	sp, #16
 80031ba:	4770      	bx	lr
 80031bc:	200002f0 	.word	0x200002f0

080031c0 <pid_calculate_pitch>:
float pitch_elapsed_time = 0;

int pitch_pid_clip = 1250;

/** Pitch PID Calculation **/
float pid_calculate_pitch(float IMU_pitch_value, int timer_value) {
 80031c0:	b5d0      	push	{r4, r6, r7, lr}
 80031c2:	ed2d 8b04 	vpush	{d8-d9}

	//Calculate error
	pitch_error = IMU_pitch_value - pitch_setpoint;
 80031c6:	4b3e      	ldr	r3, [pc, #248]	; (80032c0 <pid_calculate_pitch+0x100>)
 80031c8:	ed93 8a00 	vldr	s16, [r3]
 80031cc:	ee30 8a48 	vsub.f32	s16, s0, s16
 80031d0:	4b3c      	ldr	r3, [pc, #240]	; (80032c4 <pid_calculate_pitch+0x104>)
 80031d2:	ed83 8a00 	vstr	s16, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 80031d6:	4b3c      	ldr	r3, [pc, #240]	; (80032c8 <pid_calculate_pitch+0x108>)
 80031d8:	edd3 8a00 	vldr	s17, [r3]
 80031dc:	ee68 8a28 	vmul.f32	s17, s16, s17
 80031e0:	4b3a      	ldr	r3, [pc, #232]	; (80032cc <pid_calculate_pitch+0x10c>)
 80031e2:	edc3 8a00 	vstr	s17, [r3]

	//Integral
	pitch_i += (pitch_i_gain * pitch_error * delta_t);
 80031e6:	4b3a      	ldr	r3, [pc, #232]	; (80032d0 <pid_calculate_pitch+0x110>)
 80031e8:	edd3 7a00 	vldr	s15, [r3]
 80031ec:	ee68 7a27 	vmul.f32	s15, s16, s15
 80031f0:	ee17 0a90 	vmov	r0, s15
 80031f4:	f7fd f958 	bl	80004a8 <__aeabi_f2d>
 80031f8:	a32f      	add	r3, pc, #188	; (adr r3, 80032b8 <pid_calculate_pitch+0xf8>)
 80031fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fe:	f7fd f9ab 	bl	8000558 <__aeabi_dmul>
 8003202:	4606      	mov	r6, r0
 8003204:	460f      	mov	r7, r1
 8003206:	4c33      	ldr	r4, [pc, #204]	; (80032d4 <pid_calculate_pitch+0x114>)
 8003208:	6820      	ldr	r0, [r4, #0]
 800320a:	f7fd f94d 	bl	80004a8 <__aeabi_f2d>
 800320e:	4632      	mov	r2, r6
 8003210:	463b      	mov	r3, r7
 8003212:	f7fc ffeb 	bl	80001ec <__adddf3>
 8003216:	f7fd fbb1 	bl	800097c <__aeabi_d2f>
 800321a:	ee09 0a10 	vmov	s18, r0
 800321e:	6020      	str	r0, [r4, #0]


	//Derivative component

	pitch_d = pitch_d_gain * ( (pitch_error - pitch_last_d_error) / delta_t);
 8003220:	4c2d      	ldr	r4, [pc, #180]	; (80032d8 <pid_calculate_pitch+0x118>)
 8003222:	edd4 7a00 	vldr	s15, [r4]
 8003226:	ee78 7a67 	vsub.f32	s15, s16, s15
 800322a:	ee17 0a90 	vmov	r0, s15
 800322e:	f7fd f93b 	bl	80004a8 <__aeabi_f2d>
 8003232:	a321      	add	r3, pc, #132	; (adr r3, 80032b8 <pid_calculate_pitch+0xf8>)
 8003234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003238:	f7fd fab8 	bl	80007ac <__aeabi_ddiv>
 800323c:	4606      	mov	r6, r0
 800323e:	460f      	mov	r7, r1
 8003240:	4b26      	ldr	r3, [pc, #152]	; (80032dc <pid_calculate_pitch+0x11c>)
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	f7fd f930 	bl	80004a8 <__aeabi_f2d>
 8003248:	4632      	mov	r2, r6
 800324a:	463b      	mov	r3, r7
 800324c:	f7fd f984 	bl	8000558 <__aeabi_dmul>
 8003250:	f7fd fb94 	bl	800097c <__aeabi_d2f>
 8003254:	ee07 0a90 	vmov	s15, r0
 8003258:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <pid_calculate_pitch+0x120>)
 800325a:	6018      	str	r0, [r3, #0]
	pitch_last_d_error = pitch_error;
 800325c:	ed84 8a00 	vstr	s16, [r4]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 8003260:	ee78 8a89 	vadd.f32	s17, s17, s18
 8003264:	ee77 8aa8 	vadd.f32	s17, s15, s17
 8003268:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <pid_calculate_pitch+0x124>)
 800326a:	edc3 8a00 	vstr	s17, [r3]

	//Clip PID output in event of extreme swings
	if (pitch_output < -pitch_pid_clip) {
 800326e:	4b1e      	ldr	r3, [pc, #120]	; (80032e8 <pid_calculate_pitch+0x128>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	425a      	negs	r2, r3
 8003274:	ee07 2a90 	vmov	s15, r2
 8003278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800327c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8003280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003284:	d40c      	bmi.n	80032a0 <pid_calculate_pitch+0xe0>
		pitch_output = -pitch_pid_clip;
	} else if (pitch_output > pitch_pid_clip) {
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800328e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8003292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003296:	dd06      	ble.n	80032a6 <pid_calculate_pitch+0xe6>
		pitch_output = pitch_pid_clip;
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <pid_calculate_pitch+0x124>)
 800329a:	edc3 7a00 	vstr	s15, [r3]
 800329e:	e002      	b.n	80032a6 <pid_calculate_pitch+0xe6>
		pitch_output = -pitch_pid_clip;
 80032a0:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <pid_calculate_pitch+0x124>)
 80032a2:	edc3 7a00 	vstr	s15, [r3]
	}

	return pitch_output;
}
 80032a6:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <pid_calculate_pitch+0x124>)
 80032a8:	ed93 0a00 	vldr	s0, [r3]
 80032ac:	ecbd 8b04 	vpop	{d8-d9}
 80032b0:	bdd0      	pop	{r4, r6, r7, pc}
 80032b2:	bf00      	nop
 80032b4:	f3af 8000 	nop.w
 80032b8:	2c514db1 	.word	0x2c514db1
 80032bc:	3f6034ab 	.word	0x3f6034ab
 80032c0:	2000034c 	.word	0x2000034c
 80032c4:	20000340 	.word	0x20000340
 80032c8:	20000034 	.word	0x20000034
 80032cc:	20000444 	.word	0x20000444
 80032d0:	20000030 	.word	0x20000030
 80032d4:	20000448 	.word	0x20000448
 80032d8:	20000344 	.word	0x20000344
 80032dc:	2000002c 	.word	0x2000002c
 80032e0:	20000440 	.word	0x20000440
 80032e4:	20000348 	.word	0x20000348
 80032e8:	20000038 	.word	0x20000038

080032ec <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80032ec:	4a06      	ldr	r2, [pc, #24]	; (8003308 <DWT_Init+0x1c>)
 80032ee:	68d3      	ldr	r3, [r2, #12]
 80032f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032f4:	60d3      	str	r3, [r2, #12]
        //DWT->LAR = 0xC5ACCE55;
        DWT->CYCCNT = 0;
 80032f6:	4b05      	ldr	r3, [pc, #20]	; (800330c <DWT_Init+0x20>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]

}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	e000edf0 	.word	0xe000edf0
 800330c:	e0001000 	.word	0xe0001000

08003310 <DWT_Delay>:
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT,
 8003310:	4b07      	ldr	r3, [pc, #28]	; (8003330 <DWT_Delay+0x20>)
 8003312:	685a      	ldr	r2, [r3, #4]
             delayTicks = us * (SystemCoreClock/1000000);
 8003314:	4b07      	ldr	r3, [pc, #28]	; (8003334 <DWT_Delay+0x24>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4907      	ldr	r1, [pc, #28]	; (8003338 <DWT_Delay+0x28>)
 800331a:	fba1 1303 	umull	r1, r3, r1, r3
 800331e:	0c9b      	lsrs	r3, r3, #18
 8003320:	fb00 f003 	mul.w	r0, r0, r3

    while (DWT->CYCCNT - startTick < delayTicks);
 8003324:	4b02      	ldr	r3, [pc, #8]	; (8003330 <DWT_Delay+0x20>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	4283      	cmp	r3, r0
 800332c:	d3fa      	bcc.n	8003324 <DWT_Delay+0x14>
}
 800332e:	4770      	bx	lr
 8003330:	e0001000 	.word	0xe0001000
 8003334:	20000060 	.word	0x20000060
 8003338:	431bde83 	.word	0x431bde83

0800333c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800333c:	b510      	push	{r4, lr}
 800333e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003340:	4b0e      	ldr	r3, [pc, #56]	; (800337c <HAL_InitTick+0x40>)
 8003342:	7818      	ldrb	r0, [r3, #0]
 8003344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003348:	fbb3 f3f0 	udiv	r3, r3, r0
 800334c:	4a0c      	ldr	r2, [pc, #48]	; (8003380 <HAL_InitTick+0x44>)
 800334e:	6810      	ldr	r0, [r2, #0]
 8003350:	fbb0 f0f3 	udiv	r0, r0, r3
 8003354:	f000 fa44 	bl	80037e0 <HAL_SYSTICK_Config>
 8003358:	b968      	cbnz	r0, 8003376 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800335a:	2c0f      	cmp	r4, #15
 800335c:	d901      	bls.n	8003362 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800335e:	2001      	movs	r0, #1
 8003360:	e00a      	b.n	8003378 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003362:	2200      	movs	r2, #0
 8003364:	4621      	mov	r1, r4
 8003366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800336a:	f000 f9f7 	bl	800375c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HAL_InitTick+0x48>)
 8003370:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003372:	2000      	movs	r0, #0
 8003374:	e000      	b.n	8003378 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8003376:	2001      	movs	r0, #1
}
 8003378:	bd10      	pop	{r4, pc}
 800337a:	bf00      	nop
 800337c:	2000003c 	.word	0x2000003c
 8003380:	20000060 	.word	0x20000060
 8003384:	20000040 	.word	0x20000040

08003388 <HAL_Init>:
{
 8003388:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800338a:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_Init+0x30>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003392:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800339a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033a4:	2003      	movs	r0, #3
 80033a6:	f000 f9c7 	bl	8003738 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80033aa:	2000      	movs	r0, #0
 80033ac:	f7ff ffc6 	bl	800333c <HAL_InitTick>
  HAL_MspInit();
 80033b0:	f003 fba6 	bl	8006b00 <HAL_MspInit>
}
 80033b4:	2000      	movs	r0, #0
 80033b6:	bd08      	pop	{r3, pc}
 80033b8:	40023c00 	.word	0x40023c00

080033bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80033bc:	4a03      	ldr	r2, [pc, #12]	; (80033cc <HAL_IncTick+0x10>)
 80033be:	6811      	ldr	r1, [r2, #0]
 80033c0:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <HAL_IncTick+0x14>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	440b      	add	r3, r1
 80033c6:	6013      	str	r3, [r2, #0]
}
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	2000044c 	.word	0x2000044c
 80033d0:	2000003c 	.word	0x2000003c

080033d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80033d4:	4b01      	ldr	r3, [pc, #4]	; (80033dc <HAL_GetTick+0x8>)
 80033d6:	6818      	ldr	r0, [r3, #0]
}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	2000044c 	.word	0x2000044c

080033e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033e0:	b538      	push	{r3, r4, r5, lr}
 80033e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80033e4:	f7ff fff6 	bl	80033d4 <HAL_GetTick>
 80033e8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ea:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80033ee:	d002      	beq.n	80033f6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80033f0:	4b04      	ldr	r3, [pc, #16]	; (8003404 <HAL_Delay+0x24>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033f6:	f7ff ffed 	bl	80033d4 <HAL_GetTick>
 80033fa:	1b40      	subs	r0, r0, r5
 80033fc:	42a0      	cmp	r0, r4
 80033fe:	d3fa      	bcc.n	80033f6 <HAL_Delay+0x16>
  {
  }
}
 8003400:	bd38      	pop	{r3, r4, r5, pc}
 8003402:	bf00      	nop
 8003404:	2000003c 	.word	0x2000003c

08003408 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003408:	4b4a      	ldr	r3, [pc, #296]	; (8003534 <ADC_Init+0x12c>)
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003410:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	6841      	ldr	r1, [r0, #4]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800341a:	6802      	ldr	r2, [r0, #0]
 800341c:	6853      	ldr	r3, [r2, #4]
 800341e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003422:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003424:	6802      	ldr	r2, [r0, #0]
 8003426:	6853      	ldr	r3, [r2, #4]
 8003428:	6901      	ldr	r1, [r0, #16]
 800342a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800342e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003430:	6802      	ldr	r2, [r0, #0]
 8003432:	6853      	ldr	r3, [r2, #4]
 8003434:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003438:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800343a:	6802      	ldr	r2, [r0, #0]
 800343c:	6853      	ldr	r3, [r2, #4]
 800343e:	6881      	ldr	r1, [r0, #8]
 8003440:	430b      	orrs	r3, r1
 8003442:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003444:	6802      	ldr	r2, [r0, #0]
 8003446:	6893      	ldr	r3, [r2, #8]
 8003448:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800344c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800344e:	6802      	ldr	r2, [r0, #0]
 8003450:	6893      	ldr	r3, [r2, #8]
 8003452:	68c1      	ldr	r1, [r0, #12]
 8003454:	430b      	orrs	r3, r1
 8003456:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003458:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800345a:	4b37      	ldr	r3, [pc, #220]	; (8003538 <ADC_Init+0x130>)
 800345c:	429a      	cmp	r2, r3
 800345e:	d04b      	beq.n	80034f8 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003460:	6802      	ldr	r2, [r0, #0]
 8003462:	6893      	ldr	r3, [r2, #8]
 8003464:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003468:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800346a:	6802      	ldr	r2, [r0, #0]
 800346c:	6893      	ldr	r3, [r2, #8]
 800346e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003470:	430b      	orrs	r3, r1
 8003472:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003474:	6802      	ldr	r2, [r0, #0]
 8003476:	6893      	ldr	r3, [r2, #8]
 8003478:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800347c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800347e:	6802      	ldr	r2, [r0, #0]
 8003480:	6893      	ldr	r3, [r2, #8]
 8003482:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003484:	430b      	orrs	r3, r1
 8003486:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003488:	6802      	ldr	r2, [r0, #0]
 800348a:	6893      	ldr	r3, [r2, #8]
 800348c:	f023 0302 	bic.w	r3, r3, #2
 8003490:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003492:	6802      	ldr	r2, [r0, #0]
 8003494:	6893      	ldr	r3, [r2, #8]
 8003496:	7e01      	ldrb	r1, [r0, #24]
 8003498:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800349c:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800349e:	f890 3020 	ldrb.w	r3, [r0, #32]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d133      	bne.n	800350e <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034a6:	6802      	ldr	r2, [r0, #0]
 80034a8:	6853      	ldr	r3, [r2, #4]
 80034aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ae:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034b0:	6802      	ldr	r2, [r0, #0]
 80034b2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80034b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80034b8:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034ba:	6801      	ldr	r1, [r0, #0]
 80034bc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80034be:	69c2      	ldr	r2, [r0, #28]
 80034c0:	3a01      	subs	r2, #1
 80034c2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80034c6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034c8:	6802      	ldr	r2, [r0, #0]
 80034ca:	6893      	ldr	r3, [r2, #8]
 80034cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034d0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034d2:	6802      	ldr	r2, [r0, #0]
 80034d4:	6893      	ldr	r3, [r2, #8]
 80034d6:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 80034da:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80034de:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034e0:	6802      	ldr	r2, [r0, #0]
 80034e2:	6893      	ldr	r3, [r2, #8]
 80034e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034e8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034ea:	6802      	ldr	r2, [r0, #0]
 80034ec:	6893      	ldr	r3, [r2, #8]
 80034ee:	6941      	ldr	r1, [r0, #20]
 80034f0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80034f4:	6093      	str	r3, [r2, #8]
}
 80034f6:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034f8:	6802      	ldr	r2, [r0, #0]
 80034fa:	6893      	ldr	r3, [r2, #8]
 80034fc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003500:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003502:	6802      	ldr	r2, [r0, #0]
 8003504:	6893      	ldr	r3, [r2, #8]
 8003506:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800350a:	6093      	str	r3, [r2, #8]
 800350c:	e7bc      	b.n	8003488 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800350e:	6802      	ldr	r2, [r0, #0]
 8003510:	6853      	ldr	r3, [r2, #4]
 8003512:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003516:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003518:	6802      	ldr	r2, [r0, #0]
 800351a:	6853      	ldr	r3, [r2, #4]
 800351c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003520:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003522:	6801      	ldr	r1, [r0, #0]
 8003524:	684b      	ldr	r3, [r1, #4]
 8003526:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003528:	3a01      	subs	r2, #1
 800352a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800352e:	604b      	str	r3, [r1, #4]
 8003530:	e7be      	b.n	80034b0 <ADC_Init+0xa8>
 8003532:	bf00      	nop
 8003534:	40012300 	.word	0x40012300
 8003538:	0f000001 	.word	0x0f000001

0800353c <HAL_ADC_Init>:
  if(hadc == NULL)
 800353c:	b338      	cbz	r0, 800358e <HAL_ADC_Init+0x52>
{
 800353e:	b510      	push	{r4, lr}
 8003540:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003542:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003544:	b143      	cbz	r3, 8003558 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003546:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003548:	f013 0f10 	tst.w	r3, #16
 800354c:	d00b      	beq.n	8003566 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800354e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8003550:	2300      	movs	r3, #0
 8003552:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003556:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8003558:	f003 faf2 	bl	8006b40 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800355c:	2300      	movs	r3, #0
 800355e:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8003560:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8003564:	e7ef      	b.n	8003546 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8003566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003568:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800356c:	f023 0302 	bic.w	r3, r3, #2
 8003570:	f043 0302 	orr.w	r3, r3, #2
 8003574:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8003576:	4620      	mov	r0, r4
 8003578:	f7ff ff46 	bl	8003408 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 800357c:	2000      	movs	r0, #0
 800357e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003580:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003582:	f023 0303 	bic.w	r3, r3, #3
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	6423      	str	r3, [r4, #64]	; 0x40
 800358c:	e7e0      	b.n	8003550 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800358e:	2001      	movs	r0, #1
}
 8003590:	4770      	bx	lr
	...

08003594 <HAL_ADC_ConfigChannel>:
{
 8003594:	b430      	push	{r4, r5}
 8003596:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800359c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	f000 80bd 	beq.w	8003720 <HAL_ADC_ConfigChannel+0x18c>
 80035a6:	2301      	movs	r3, #1
 80035a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80035ac:	680b      	ldr	r3, [r1, #0]
 80035ae:	2b09      	cmp	r3, #9
 80035b0:	d93e      	bls.n	8003630 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80035b2:	6805      	ldr	r5, [r0, #0]
 80035b4:	68ea      	ldr	r2, [r5, #12]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80035bc:	3b1e      	subs	r3, #30
 80035be:	2407      	movs	r4, #7
 80035c0:	fa04 f303 	lsl.w	r3, r4, r3
 80035c4:	ea22 0303 	bic.w	r3, r2, r3
 80035c8:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035ca:	6805      	ldr	r5, [r0, #0]
 80035cc:	68ea      	ldr	r2, [r5, #12]
 80035ce:	688c      	ldr	r4, [r1, #8]
 80035d0:	880b      	ldrh	r3, [r1, #0]
 80035d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80035d6:	3b1e      	subs	r3, #30
 80035d8:	fa04 f303 	lsl.w	r3, r4, r3
 80035dc:	4313      	orrs	r3, r2
 80035de:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 80035e0:	684b      	ldr	r3, [r1, #4]
 80035e2:	2b06      	cmp	r3, #6
 80035e4:	d83a      	bhi.n	800365c <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035e6:	6805      	ldr	r5, [r0, #0]
 80035e8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80035ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80035ee:	3b05      	subs	r3, #5
 80035f0:	241f      	movs	r4, #31
 80035f2:	fa04 f303 	lsl.w	r3, r4, r3
 80035f6:	ea22 0303 	bic.w	r3, r2, r3
 80035fa:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035fc:	6805      	ldr	r5, [r0, #0]
 80035fe:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003600:	684b      	ldr	r3, [r1, #4]
 8003602:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003606:	3b05      	subs	r3, #5
 8003608:	880c      	ldrh	r4, [r1, #0]
 800360a:	fa04 f303 	lsl.w	r3, r4, r3
 800360e:	4313      	orrs	r3, r2
 8003610:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003612:	6802      	ldr	r2, [r0, #0]
 8003614:	4b43      	ldr	r3, [pc, #268]	; (8003724 <HAL_ADC_ConfigChannel+0x190>)
 8003616:	429a      	cmp	r2, r3
 8003618:	d050      	beq.n	80036bc <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800361a:	6802      	ldr	r2, [r0, #0]
 800361c:	4b41      	ldr	r3, [pc, #260]	; (8003724 <HAL_ADC_ConfigChannel+0x190>)
 800361e:	429a      	cmp	r2, r3
 8003620:	d059      	beq.n	80036d6 <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 8003622:	2300      	movs	r3, #0
 8003624:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003628:	4618      	mov	r0, r3
}
 800362a:	b002      	add	sp, #8
 800362c:	bc30      	pop	{r4, r5}
 800362e:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003630:	6805      	ldr	r5, [r0, #0]
 8003632:	692a      	ldr	r2, [r5, #16]
 8003634:	b29b      	uxth	r3, r3
 8003636:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800363a:	2407      	movs	r4, #7
 800363c:	fa04 f303 	lsl.w	r3, r4, r3
 8003640:	ea22 0303 	bic.w	r3, r2, r3
 8003644:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003646:	6805      	ldr	r5, [r0, #0]
 8003648:	692a      	ldr	r2, [r5, #16]
 800364a:	688c      	ldr	r4, [r1, #8]
 800364c:	880b      	ldrh	r3, [r1, #0]
 800364e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003652:	fa04 f303 	lsl.w	r3, r4, r3
 8003656:	4313      	orrs	r3, r2
 8003658:	612b      	str	r3, [r5, #16]
 800365a:	e7c1      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 800365c:	2b0c      	cmp	r3, #12
 800365e:	d816      	bhi.n	800368e <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003660:	6805      	ldr	r5, [r0, #0]
 8003662:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003664:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003668:	3b23      	subs	r3, #35	; 0x23
 800366a:	241f      	movs	r4, #31
 800366c:	fa04 f303 	lsl.w	r3, r4, r3
 8003670:	ea22 0303 	bic.w	r3, r2, r3
 8003674:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003676:	6805      	ldr	r5, [r0, #0]
 8003678:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800367a:	684b      	ldr	r3, [r1, #4]
 800367c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003680:	3b23      	subs	r3, #35	; 0x23
 8003682:	880c      	ldrh	r4, [r1, #0]
 8003684:	fa04 f303 	lsl.w	r3, r4, r3
 8003688:	4313      	orrs	r3, r2
 800368a:	632b      	str	r3, [r5, #48]	; 0x30
 800368c:	e7c1      	b.n	8003612 <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800368e:	6805      	ldr	r5, [r0, #0]
 8003690:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003692:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003696:	3b41      	subs	r3, #65	; 0x41
 8003698:	241f      	movs	r4, #31
 800369a:	fa04 f303 	lsl.w	r3, r4, r3
 800369e:	ea22 0303 	bic.w	r3, r2, r3
 80036a2:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036a4:	6805      	ldr	r5, [r0, #0]
 80036a6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80036a8:	684b      	ldr	r3, [r1, #4]
 80036aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80036ae:	3b41      	subs	r3, #65	; 0x41
 80036b0:	880c      	ldrh	r4, [r1, #0]
 80036b2:	fa04 f303 	lsl.w	r3, r4, r3
 80036b6:	4313      	orrs	r3, r2
 80036b8:	62eb      	str	r3, [r5, #44]	; 0x2c
 80036ba:	e7aa      	b.n	8003612 <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036bc:	680b      	ldr	r3, [r1, #0]
 80036be:	2b12      	cmp	r3, #18
 80036c0:	d1ab      	bne.n	800361a <HAL_ADC_ConfigChannel+0x86>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80036c2:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HAL_ADC_ConfigChannel+0x194>)
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80036ca:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80036d2:	605a      	str	r2, [r3, #4]
 80036d4:	e7a1      	b.n	800361a <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036d6:	680b      	ldr	r3, [r1, #0]
 80036d8:	4a14      	ldr	r2, [pc, #80]	; (800372c <HAL_ADC_ConfigChannel+0x198>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d001      	beq.n	80036e2 <HAL_ADC_ConfigChannel+0x14e>
 80036de:	2b11      	cmp	r3, #17
 80036e0:	d19f      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80036e2:	4b11      	ldr	r3, [pc, #68]	; (8003728 <HAL_ADC_ConfigChannel+0x194>)
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80036ea:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80036f2:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80036f4:	680a      	ldr	r2, [r1, #0]
 80036f6:	4b0d      	ldr	r3, [pc, #52]	; (800372c <HAL_ADC_ConfigChannel+0x198>)
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d192      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036fc:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <HAL_ADC_ConfigChannel+0x19c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a0c      	ldr	r2, [pc, #48]	; (8003734 <HAL_ADC_ConfigChannel+0x1a0>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	0c9b      	lsrs	r3, r3, #18
 8003708:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800370c:	005a      	lsls	r2, r3, #1
 800370e:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8003710:	e002      	b.n	8003718 <HAL_ADC_ConfigChannel+0x184>
        counter--;
 8003712:	9b01      	ldr	r3, [sp, #4]
 8003714:	3b01      	subs	r3, #1
 8003716:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003718:	9b01      	ldr	r3, [sp, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f9      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x17e>
 800371e:	e780      	b.n	8003622 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8003720:	2002      	movs	r0, #2
 8003722:	e782      	b.n	800362a <HAL_ADC_ConfigChannel+0x96>
 8003724:	40012000 	.word	0x40012000
 8003728:	40012300 	.word	0x40012300
 800372c:	10000012 	.word	0x10000012
 8003730:	20000060 	.word	0x20000060
 8003734:	431bde83 	.word	0x431bde83

08003738 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003738:	4a07      	ldr	r2, [pc, #28]	; (8003758 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800373a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800373c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003740:	041b      	lsls	r3, r3, #16
 8003742:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003744:	0200      	lsls	r0, r0, #8
 8003746:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800374a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800374c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8003750:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003754:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003756:	4770      	bx	lr
 8003758:	e000ed00 	.word	0xe000ed00

0800375c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800375c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800375e:	4b17      	ldr	r3, [pc, #92]	; (80037bc <HAL_NVIC_SetPriority+0x60>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003766:	f1c3 0407 	rsb	r4, r3, #7
 800376a:	2c04      	cmp	r4, #4
 800376c:	bf28      	it	cs
 800376e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003770:	1d1d      	adds	r5, r3, #4
 8003772:	2d06      	cmp	r5, #6
 8003774:	d918      	bls.n	80037a8 <HAL_NVIC_SetPriority+0x4c>
 8003776:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003778:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800377c:	fa05 f404 	lsl.w	r4, r5, r4
 8003780:	ea21 0104 	bic.w	r1, r1, r4
 8003784:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003786:	fa05 f303 	lsl.w	r3, r5, r3
 800378a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800378e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003790:	2800      	cmp	r0, #0
 8003792:	db0b      	blt.n	80037ac <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003794:	0109      	lsls	r1, r1, #4
 8003796:	b2c9      	uxtb	r1, r1
 8003798:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800379c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80037a0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80037a4:	bc30      	pop	{r4, r5}
 80037a6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037a8:	2300      	movs	r3, #0
 80037aa:	e7e5      	b.n	8003778 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ac:	f000 000f 	and.w	r0, r0, #15
 80037b0:	0109      	lsls	r1, r1, #4
 80037b2:	b2c9      	uxtb	r1, r1
 80037b4:	4b02      	ldr	r3, [pc, #8]	; (80037c0 <HAL_NVIC_SetPriority+0x64>)
 80037b6:	5419      	strb	r1, [r3, r0]
 80037b8:	e7f4      	b.n	80037a4 <HAL_NVIC_SetPriority+0x48>
 80037ba:	bf00      	nop
 80037bc:	e000ed00 	.word	0xe000ed00
 80037c0:	e000ed14 	.word	0xe000ed14

080037c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80037c4:	2800      	cmp	r0, #0
 80037c6:	db07      	blt.n	80037d8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037c8:	f000 021f 	and.w	r2, r0, #31
 80037cc:	0940      	lsrs	r0, r0, #5
 80037ce:	2301      	movs	r3, #1
 80037d0:	4093      	lsls	r3, r2
 80037d2:	4a02      	ldr	r2, [pc, #8]	; (80037dc <HAL_NVIC_EnableIRQ+0x18>)
 80037d4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	e000e100 	.word	0xe000e100

080037e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037e0:	3801      	subs	r0, #1
 80037e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80037e6:	d20a      	bcs.n	80037fe <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_SYSTICK_Config+0x24>)
 80037ea:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ec:	4a06      	ldr	r2, [pc, #24]	; (8003808 <HAL_SYSTICK_Config+0x28>)
 80037ee:	21f0      	movs	r1, #240	; 0xf0
 80037f0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037f4:	2000      	movs	r0, #0
 80037f6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037f8:	2207      	movs	r2, #7
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80037fe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	e000e010 	.word	0xe000e010
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800380c:	6802      	ldr	r2, [r0, #0]
 800380e:	b2d3      	uxtb	r3, r2
 8003810:	3b10      	subs	r3, #16
 8003812:	490b      	ldr	r1, [pc, #44]	; (8003840 <DMA_CalcBaseAndBitshift+0x34>)
 8003814:	fba1 1303 	umull	r1, r3, r1, r3
 8003818:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800381a:	490a      	ldr	r1, [pc, #40]	; (8003844 <DMA_CalcBaseAndBitshift+0x38>)
 800381c:	5cc9      	ldrb	r1, [r1, r3]
 800381e:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003820:	2b03      	cmp	r3, #3
 8003822:	d806      	bhi.n	8003832 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003824:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8003828:	f022 0203 	bic.w	r2, r2, #3
 800382c:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800382e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8003830:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003832:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8003836:	f022 0203 	bic.w	r2, r2, #3
 800383a:	3204      	adds	r2, #4
 800383c:	6582      	str	r2, [r0, #88]	; 0x58
 800383e:	e7f6      	b.n	800382e <DMA_CalcBaseAndBitshift+0x22>
 8003840:	aaaaaaab 	.word	0xaaaaaaab
 8003844:	0800bde0 	.word	0x0800bde0

08003848 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003848:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800384a:	6982      	ldr	r2, [r0, #24]
 800384c:	b992      	cbnz	r2, 8003874 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 800384e:	2b01      	cmp	r3, #1
 8003850:	d00a      	beq.n	8003868 <DMA_CheckFifoParam+0x20>
 8003852:	b11b      	cbz	r3, 800385c <DMA_CheckFifoParam+0x14>
 8003854:	2b02      	cmp	r3, #2
 8003856:	d001      	beq.n	800385c <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8003858:	2000      	movs	r0, #0
 800385a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800385c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800385e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003862:	d12c      	bne.n	80038be <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8003864:	2000      	movs	r0, #0
 8003866:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003868:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800386a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800386e:	d028      	beq.n	80038c2 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8003870:	2000      	movs	r0, #0
 8003872:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003874:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003878:	d005      	beq.n	8003886 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800387a:	2b02      	cmp	r3, #2
 800387c:	d929      	bls.n	80038d2 <DMA_CheckFifoParam+0x8a>
 800387e:	2b03      	cmp	r3, #3
 8003880:	d015      	beq.n	80038ae <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8003882:	2000      	movs	r0, #0
 8003884:	4770      	bx	lr
    switch (tmp)
 8003886:	2b03      	cmp	r3, #3
 8003888:	d803      	bhi.n	8003892 <DMA_CheckFifoParam+0x4a>
 800388a:	e8df f003 	tbb	[pc, r3]
 800388e:	041c      	.short	0x041c
 8003890:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8003892:	2000      	movs	r0, #0
 8003894:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003896:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003898:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800389c:	d115      	bne.n	80038ca <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800389e:	2000      	movs	r0, #0
 80038a0:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80038a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038a8:	d011      	beq.n	80038ce <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 80038aa:	2000      	movs	r0, #0
 80038ac:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80038b0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80038b4:	d001      	beq.n	80038ba <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 80038b6:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80038b8:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80038ba:	2000      	movs	r0, #0
 80038bc:	4770      	bx	lr
        status = HAL_ERROR;
 80038be:	2001      	movs	r0, #1
 80038c0:	4770      	bx	lr
        status = HAL_ERROR;
 80038c2:	2001      	movs	r0, #1
 80038c4:	4770      	bx	lr
      status = HAL_ERROR;
 80038c6:	2001      	movs	r0, #1
 80038c8:	4770      	bx	lr
        status = HAL_ERROR;
 80038ca:	2001      	movs	r0, #1
 80038cc:	4770      	bx	lr
        status = HAL_ERROR;
 80038ce:	2001      	movs	r0, #1
 80038d0:	4770      	bx	lr
      status = HAL_ERROR;
 80038d2:	2001      	movs	r0, #1
 80038d4:	4770      	bx	lr
	...

080038d8 <HAL_DMA_Init>:
{
 80038d8:	b570      	push	{r4, r5, r6, lr}
 80038da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80038dc:	f7ff fd7a 	bl	80033d4 <HAL_GetTick>
  if(hdma == NULL)
 80038e0:	2c00      	cmp	r4, #0
 80038e2:	d05b      	beq.n	800399c <HAL_DMA_Init+0xc4>
 80038e4:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 80038e6:	2300      	movs	r3, #0
 80038e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80038ec:	2302      	movs	r3, #2
 80038ee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80038f2:	6822      	ldr	r2, [r4, #0]
 80038f4:	6813      	ldr	r3, [r2, #0]
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	f012 0f01 	tst.w	r2, #1
 8003904:	d00a      	beq.n	800391c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003906:	f7ff fd65 	bl	80033d4 <HAL_GetTick>
 800390a:	1b40      	subs	r0, r0, r5
 800390c:	2805      	cmp	r0, #5
 800390e:	d9f5      	bls.n	80038fc <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003910:	2320      	movs	r3, #32
 8003912:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003914:	2003      	movs	r0, #3
 8003916:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800391a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 800391c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800391e:	4820      	ldr	r0, [pc, #128]	; (80039a0 <HAL_DMA_Init+0xc8>)
 8003920:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003922:	6861      	ldr	r1, [r4, #4]
 8003924:	68a2      	ldr	r2, [r4, #8]
 8003926:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003928:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800392a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800392c:	6921      	ldr	r1, [r4, #16]
 800392e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003930:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003932:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003934:	69a1      	ldr	r1, [r4, #24]
 8003936:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8003938:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800393a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800393c:	6a21      	ldr	r1, [r4, #32]
 800393e:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003940:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003942:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003944:	2904      	cmp	r1, #4
 8003946:	d01e      	beq.n	8003986 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8003948:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800394a:	6826      	ldr	r6, [r4, #0]
 800394c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800394e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8003952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003954:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003956:	2b04      	cmp	r3, #4
 8003958:	d107      	bne.n	800396a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 800395a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800395c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800395e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003960:	b11b      	cbz	r3, 800396a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003962:	4620      	mov	r0, r4
 8003964:	f7ff ff70 	bl	8003848 <DMA_CheckFifoParam>
 8003968:	b990      	cbnz	r0, 8003990 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 800396a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800396c:	4620      	mov	r0, r4
 800396e:	f7ff ff4d 	bl	800380c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003972:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003974:	233f      	movs	r3, #63	; 0x3f
 8003976:	4093      	lsls	r3, r2
 8003978:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800397a:	2000      	movs	r0, #0
 800397c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800397e:	2301      	movs	r3, #1
 8003980:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003984:	e7c9      	b.n	800391a <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003986:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003988:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800398a:	4301      	orrs	r1, r0
 800398c:	430a      	orrs	r2, r1
 800398e:	e7db      	b.n	8003948 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003990:	2340      	movs	r3, #64	; 0x40
 8003992:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003994:	2001      	movs	r0, #1
 8003996:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800399a:	e7be      	b.n	800391a <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 800399c:	2001      	movs	r0, #1
 800399e:	e7bc      	b.n	800391a <HAL_DMA_Init+0x42>
 80039a0:	f010803f 	.word	0xf010803f

080039a4 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039a4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d003      	beq.n	80039b6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80039b2:	2001      	movs	r0, #1
 80039b4:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80039b6:	2305      	movs	r3, #5
 80039b8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80039bc:	6802      	ldr	r2, [r0, #0]
 80039be:	6813      	ldr	r3, [r2, #0]
 80039c0:	f023 0301 	bic.w	r3, r3, #1
 80039c4:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80039c6:	2000      	movs	r0, #0
}
 80039c8:	4770      	bx	lr
	...

080039cc <HAL_DMA_IRQHandler>:
{
 80039cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ce:	b083      	sub	sp, #12
 80039d0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039d6:	4b72      	ldr	r3, [pc, #456]	; (8003ba0 <HAL_DMA_IRQHandler+0x1d4>)
 80039d8:	681d      	ldr	r5, [r3, #0]
 80039da:	4b72      	ldr	r3, [pc, #456]	; (8003ba4 <HAL_DMA_IRQHandler+0x1d8>)
 80039dc:	fba3 3505 	umull	r3, r5, r3, r5
 80039e0:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039e2:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80039e4:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039e6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80039e8:	2308      	movs	r3, #8
 80039ea:	4093      	lsls	r3, r2
 80039ec:	4233      	tst	r3, r6
 80039ee:	d010      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039f0:	6803      	ldr	r3, [r0, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	f012 0f04 	tst.w	r2, #4
 80039f8:	d00b      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	f022 0204 	bic.w	r2, r2, #4
 8003a00:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a02:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003a04:	2308      	movs	r3, #8
 8003a06:	4093      	lsls	r3, r2
 8003a08:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a0a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a12:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003a14:	2301      	movs	r3, #1
 8003a16:	4093      	lsls	r3, r2
 8003a18:	4233      	tst	r3, r6
 8003a1a:	d009      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a1c:	6822      	ldr	r2, [r4, #0]
 8003a1e:	6952      	ldr	r2, [r2, #20]
 8003a20:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003a24:	d004      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a26:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003a2a:	f043 0302 	orr.w	r3, r3, #2
 8003a2e:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a30:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003a32:	2304      	movs	r3, #4
 8003a34:	4093      	lsls	r3, r2
 8003a36:	4233      	tst	r3, r6
 8003a38:	d009      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a3a:	6822      	ldr	r2, [r4, #0]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	f012 0f02 	tst.w	r2, #2
 8003a42:	d004      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a44:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a46:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003a48:	f043 0304 	orr.w	r3, r3, #4
 8003a4c:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a4e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003a50:	2310      	movs	r3, #16
 8003a52:	4093      	lsls	r3, r2
 8003a54:	4233      	tst	r3, r6
 8003a56:	d024      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a58:	6822      	ldr	r2, [r4, #0]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	f012 0f08 	tst.w	r2, #8
 8003a60:	d01f      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a62:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003a6c:	d00d      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003a74:	d104      	bne.n	8003a80 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8003a76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a78:	b19b      	cbz	r3, 8003aa2 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	4798      	blx	r3
 8003a7e:	e010      	b.n	8003aa2 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003a82:	b173      	cbz	r3, 8003aa2 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8003a84:	4620      	mov	r0, r4
 8003a86:	4798      	blx	r3
 8003a88:	e00b      	b.n	8003aa2 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003a90:	d103      	bne.n	8003a9a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	f022 0208 	bic.w	r2, r2, #8
 8003a98:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8003a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a9c:	b10b      	cbz	r3, 8003aa2 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8003a9e:	4620      	mov	r0, r4
 8003aa0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003aa4:	2320      	movs	r3, #32
 8003aa6:	4093      	lsls	r3, r2
 8003aa8:	4233      	tst	r3, r6
 8003aaa:	d055      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003aac:	6822      	ldr	r2, [r4, #0]
 8003aae:	6812      	ldr	r2, [r2, #0]
 8003ab0:	f012 0f10 	tst.w	r2, #16
 8003ab4:	d050      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ab6:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ab8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b05      	cmp	r3, #5
 8003ac0:	d00e      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003aca:	d033      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003ad2:	d12a      	bne.n	8003b2a <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8003ad4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d03e      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8003ada:	4620      	mov	r0, r4
 8003adc:	4798      	blx	r3
 8003ade:	e03b      	b.n	8003b58 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ae0:	6822      	ldr	r2, [r4, #0]
 8003ae2:	6813      	ldr	r3, [r2, #0]
 8003ae4:	f023 0316 	bic.w	r3, r3, #22
 8003ae8:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003aea:	6822      	ldr	r2, [r4, #0]
 8003aec:	6953      	ldr	r3, [r2, #20]
 8003aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af2:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003af4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003af6:	b1a3      	cbz	r3, 8003b22 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003af8:	6822      	ldr	r2, [r4, #0]
 8003afa:	6813      	ldr	r3, [r2, #0]
 8003afc:	f023 0308 	bic.w	r3, r3, #8
 8003b00:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b02:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003b04:	233f      	movs	r3, #63	; 0x3f
 8003b06:	4093      	lsls	r3, r2
 8003b08:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8003b16:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d03f      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	4798      	blx	r3
 8003b20:	e03c      	b.n	8003b9c <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b22:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e7      	bne.n	8003af8 <HAL_DMA_IRQHandler+0x12c>
 8003b28:	e7eb      	b.n	8003b02 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8003b2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b2c:	b1a3      	cbz	r3, 8003b58 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8003b2e:	4620      	mov	r0, r4
 8003b30:	4798      	blx	r3
 8003b32:	e011      	b.n	8003b58 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003b3a:	d109      	bne.n	8003b50 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	f022 0210 	bic.w	r2, r2, #16
 8003b42:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8003b44:	2300      	movs	r3, #0
 8003b46:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8003b50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b52:	b10b      	cbz	r3, 8003b58 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8003b54:	4620      	mov	r0, r4
 8003b56:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b58:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b5a:	b1fb      	cbz	r3, 8003b9c <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b5e:	f013 0f01 	tst.w	r3, #1
 8003b62:	d017      	beq.n	8003b94 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b64:	2305      	movs	r3, #5
 8003b66:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8003b6a:	6822      	ldr	r2, [r4, #0]
 8003b6c:	6813      	ldr	r3, [r2, #0]
 8003b6e:	f023 0301 	bic.w	r3, r3, #1
 8003b72:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8003b74:	9b01      	ldr	r3, [sp, #4]
 8003b76:	3301      	adds	r3, #1
 8003b78:	9301      	str	r3, [sp, #4]
 8003b7a:	42ab      	cmp	r3, r5
 8003b7c:	d804      	bhi.n	8003b88 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f013 0f01 	tst.w	r3, #1
 8003b86:	d1f5      	bne.n	8003b74 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8003b94:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003b96:	b10b      	cbz	r3, 8003b9c <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8003b98:	4620      	mov	r0, r4
 8003b9a:	4798      	blx	r3
}
 8003b9c:	b003      	add	sp, #12
 8003b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ba0:	20000060 	.word	0x20000060
 8003ba4:	1b4e81b5 	.word	0x1b4e81b5

08003ba8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ba8:	2300      	movs	r3, #0
 8003baa:	2b0f      	cmp	r3, #15
 8003bac:	f200 80c5 	bhi.w	8003d3a <HAL_GPIO_Init+0x192>
{
 8003bb0:	b4f0      	push	{r4, r5, r6, r7}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	e039      	b.n	8003c2a <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	e000      	b.n	8003bbc <HAL_GPIO_Init+0x14>
 8003bba:	2200      	movs	r2, #0
 8003bbc:	40b2      	lsls	r2, r6
 8003bbe:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bc0:	3402      	adds	r4, #2
 8003bc2:	4e5e      	ldr	r6, [pc, #376]	; (8003d3c <HAL_GPIO_Init+0x194>)
 8003bc4:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bc8:	4a5d      	ldr	r2, [pc, #372]	; (8003d40 <HAL_GPIO_Init+0x198>)
 8003bca:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003bcc:	43ea      	mvns	r2, r5
 8003bce:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bd2:	684f      	ldr	r7, [r1, #4]
 8003bd4:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8003bd8:	d001      	beq.n	8003bde <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8003bda:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8003bde:	4c58      	ldr	r4, [pc, #352]	; (8003d40 <HAL_GPIO_Init+0x198>)
 8003be0:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8003be2:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8003be4:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003be8:	684f      	ldr	r7, [r1, #4]
 8003bea:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003bee:	d001      	beq.n	8003bf4 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8003bf0:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8003bf4:	4c52      	ldr	r4, [pc, #328]	; (8003d40 <HAL_GPIO_Init+0x198>)
 8003bf6:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bf8:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8003bfa:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bfe:	684f      	ldr	r7, [r1, #4]
 8003c00:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003c04:	d001      	beq.n	8003c0a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8003c06:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8003c0a:	4c4d      	ldr	r4, [pc, #308]	; (8003d40 <HAL_GPIO_Init+0x198>)
 8003c0c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8003c0e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8003c10:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c12:	684e      	ldr	r6, [r1, #4]
 8003c14:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8003c18:	d001      	beq.n	8003c1e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8003c1a:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8003c1e:	4c48      	ldr	r4, [pc, #288]	; (8003d40 <HAL_GPIO_Init+0x198>)
 8003c20:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c22:	3301      	adds	r3, #1
 8003c24:	2b0f      	cmp	r3, #15
 8003c26:	f200 8085 	bhi.w	8003d34 <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c2e:	680c      	ldr	r4, [r1, #0]
 8003c30:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8003c34:	42aa      	cmp	r2, r5
 8003c36:	d1f4      	bne.n	8003c22 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c38:	684c      	ldr	r4, [r1, #4]
 8003c3a:	2c02      	cmp	r4, #2
 8003c3c:	d001      	beq.n	8003c42 <HAL_GPIO_Init+0x9a>
 8003c3e:	2c12      	cmp	r4, #18
 8003c40:	d110      	bne.n	8003c64 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8003c42:	08de      	lsrs	r6, r3, #3
 8003c44:	3608      	adds	r6, #8
 8003c46:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c4a:	f003 0407 	and.w	r4, r3, #7
 8003c4e:	00a7      	lsls	r7, r4, #2
 8003c50:	240f      	movs	r4, #15
 8003c52:	40bc      	lsls	r4, r7
 8003c54:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c58:	690c      	ldr	r4, [r1, #16]
 8003c5a:	40bc      	lsls	r4, r7
 8003c5c:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8003c60:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8003c64:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c66:	005f      	lsls	r7, r3, #1
 8003c68:	2603      	movs	r6, #3
 8003c6a:	40be      	lsls	r6, r7
 8003c6c:	43f6      	mvns	r6, r6
 8003c6e:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c72:	684c      	ldr	r4, [r1, #4]
 8003c74:	f004 0403 	and.w	r4, r4, #3
 8003c78:	40bc      	lsls	r4, r7
 8003c7a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003c7e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c80:	684c      	ldr	r4, [r1, #4]
 8003c82:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8003c86:	f1bc 0f01 	cmp.w	ip, #1
 8003c8a:	d903      	bls.n	8003c94 <HAL_GPIO_Init+0xec>
 8003c8c:	2c11      	cmp	r4, #17
 8003c8e:	d001      	beq.n	8003c94 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c90:	2c12      	cmp	r4, #18
 8003c92:	d110      	bne.n	8003cb6 <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8003c94:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c96:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c9a:	68cc      	ldr	r4, [r1, #12]
 8003c9c:	40bc      	lsls	r4, r7
 8003c9e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8003ca2:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003ca4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ca6:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003caa:	684c      	ldr	r4, [r1, #4]
 8003cac:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003cb0:	409c      	lsls	r4, r3
 8003cb2:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8003cb4:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8003cb6:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cb8:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cba:	688a      	ldr	r2, [r1, #8]
 8003cbc:	40ba      	lsls	r2, r7
 8003cbe:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8003cc0:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cc2:	684a      	ldr	r2, [r1, #4]
 8003cc4:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8003cc8:	d0ab      	beq.n	8003c22 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cca:	2200      	movs	r2, #0
 8003ccc:	9201      	str	r2, [sp, #4]
 8003cce:	4a1d      	ldr	r2, [pc, #116]	; (8003d44 <HAL_GPIO_Init+0x19c>)
 8003cd0:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8003cd2:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003cd6:	6454      	str	r4, [r2, #68]	; 0x44
 8003cd8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003cda:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003cde:	9201      	str	r2, [sp, #4]
 8003ce0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003ce2:	089c      	lsrs	r4, r3, #2
 8003ce4:	1ca6      	adds	r6, r4, #2
 8003ce6:	4a15      	ldr	r2, [pc, #84]	; (8003d3c <HAL_GPIO_Init+0x194>)
 8003ce8:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cec:	f003 0203 	and.w	r2, r3, #3
 8003cf0:	0096      	lsls	r6, r2, #2
 8003cf2:	220f      	movs	r2, #15
 8003cf4:	40b2      	lsls	r2, r6
 8003cf6:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cfa:	4a13      	ldr	r2, [pc, #76]	; (8003d48 <HAL_GPIO_Init+0x1a0>)
 8003cfc:	4290      	cmp	r0, r2
 8003cfe:	f43f af5c 	beq.w	8003bba <HAL_GPIO_Init+0x12>
 8003d02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d06:	4290      	cmp	r0, r2
 8003d08:	d00e      	beq.n	8003d28 <HAL_GPIO_Init+0x180>
 8003d0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d0e:	4290      	cmp	r0, r2
 8003d10:	d00c      	beq.n	8003d2c <HAL_GPIO_Init+0x184>
 8003d12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d16:	4290      	cmp	r0, r2
 8003d18:	d00a      	beq.n	8003d30 <HAL_GPIO_Init+0x188>
 8003d1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d1e:	4290      	cmp	r0, r2
 8003d20:	f43f af49 	beq.w	8003bb6 <HAL_GPIO_Init+0xe>
 8003d24:	2207      	movs	r2, #7
 8003d26:	e749      	b.n	8003bbc <HAL_GPIO_Init+0x14>
 8003d28:	2201      	movs	r2, #1
 8003d2a:	e747      	b.n	8003bbc <HAL_GPIO_Init+0x14>
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	e745      	b.n	8003bbc <HAL_GPIO_Init+0x14>
 8003d30:	2203      	movs	r2, #3
 8003d32:	e743      	b.n	8003bbc <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8003d34:	b002      	add	sp, #8
 8003d36:	bcf0      	pop	{r4, r5, r6, r7}
 8003d38:	4770      	bx	lr
 8003d3a:	4770      	bx	lr
 8003d3c:	40013800 	.word	0x40013800
 8003d40:	40013c00 	.word	0x40013c00
 8003d44:	40023800 	.word	0x40023800
 8003d48:	40020000 	.word	0x40020000

08003d4c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d4c:	b912      	cbnz	r2, 8003d54 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d4e:	0409      	lsls	r1, r1, #16
 8003d50:	6181      	str	r1, [r0, #24]
  }
}
 8003d52:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8003d54:	6181      	str	r1, [r0, #24]
 8003d56:	4770      	bx	lr

08003d58 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003d58:	6943      	ldr	r3, [r0, #20]
 8003d5a:	ea31 0303 	bics.w	r3, r1, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d60:	6181      	str	r1, [r0, #24]
  }
}
 8003d62:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003d64:	0409      	lsls	r1, r1, #16
 8003d66:	6181      	str	r1, [r0, #24]
 8003d68:	4770      	bx	lr
	...

08003d6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d6c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d6e:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	4203      	tst	r3, r0
 8003d74:	d100      	bne.n	8003d78 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8003d76:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d78:	4b02      	ldr	r3, [pc, #8]	; (8003d84 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003d7a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d7c:	f002 feaa 	bl	8006ad4 <HAL_GPIO_EXTI_Callback>
}
 8003d80:	e7f9      	b.n	8003d76 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003d82:	bf00      	nop
 8003d84:	40013c00 	.word	0x40013c00

08003d88 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d88:	6803      	ldr	r3, [r0, #0]
 8003d8a:	695a      	ldr	r2, [r3, #20]
 8003d8c:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003d90:	d011      	beq.n	8003db6 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d96:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003da6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003da8:	f042 0204 	orr.w	r2, r2, #4
 8003dac:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8003db2:	2001      	movs	r0, #1
 8003db4:	4770      	bx	lr
  }
  return HAL_OK;
 8003db6:	2000      	movs	r0, #0
}
 8003db8:	4770      	bx	lr

08003dba <I2C_WaitOnFlagUntilTimeout>:
{
 8003dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dbc:	4606      	mov	r6, r0
 8003dbe:	460c      	mov	r4, r1
 8003dc0:	4617      	mov	r7, r2
 8003dc2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dc4:	e022      	b.n	8003e0c <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc6:	f7ff fb05 	bl	80033d4 <HAL_GetTick>
 8003dca:	9b06      	ldr	r3, [sp, #24]
 8003dcc:	1ac0      	subs	r0, r0, r3
 8003dce:	42a8      	cmp	r0, r5
 8003dd0:	d800      	bhi.n	8003dd4 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8003dd2:	b9dd      	cbnz	r5, 8003e0c <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003dde:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003de2:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8003de4:	f042 0220 	orr.w	r2, r2, #32
 8003de8:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003dea:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8003dee:	2001      	movs	r0, #1
 8003df0:	e01a      	b.n	8003e28 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003df2:	6833      	ldr	r3, [r6, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	ea24 0303 	bic.w	r3, r4, r3
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	fab3 f383 	clz	r3, r3
 8003e00:	095b      	lsrs	r3, r3, #5
 8003e02:	429f      	cmp	r7, r3
 8003e04:	d10f      	bne.n	8003e26 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8003e06:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003e0a:	d1dc      	bne.n	8003dc6 <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e0c:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d0ee      	beq.n	8003df2 <I2C_WaitOnFlagUntilTimeout+0x38>
 8003e14:	6833      	ldr	r3, [r6, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	ea24 0303 	bic.w	r3, r4, r3
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	fab3 f383 	clz	r3, r3
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	e7ed      	b.n	8003e02 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8003e26:	2000      	movs	r0, #0
}
 8003e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2c:	4604      	mov	r4, r0
 8003e2e:	460d      	mov	r5, r1
 8003e30:	4616      	mov	r6, r2
 8003e32:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e34:	e03c      	b.n	8003eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e3c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e44:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e46:	2300      	movs	r3, #0
 8003e48:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e50:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e54:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e56:	f042 0204 	orr.w	r2, r2, #4
 8003e5a:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003e5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8003e60:	2001      	movs	r0, #1
 8003e62:	e033      	b.n	8003ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e64:	f7ff fab6 	bl	80033d4 <HAL_GetTick>
 8003e68:	1bc0      	subs	r0, r0, r7
 8003e6a:	42b0      	cmp	r0, r6
 8003e6c:	d800      	bhi.n	8003e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8003e6e:	b9fe      	cbnz	r6, 8003eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e74:	2220      	movs	r2, #32
 8003e76:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e7a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e7e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e80:	f042 0220 	orr.w	r2, r2, #32
 8003e84:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003e86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003e8a:	2001      	movs	r0, #1
 8003e8c:	e01e      	b.n	8003ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	ea25 0303 	bic.w	r3, r5, r3
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3300      	adds	r3, #0
 8003e9a:	bf18      	it	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	b1a3      	cbz	r3, 8003eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	695a      	ldr	r2, [r3, #20]
 8003ea4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003ea8:	d1c5      	bne.n	8003e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8003eaa:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8003eae:	d1d9      	bne.n	8003e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003eb0:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d0ea      	beq.n	8003e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	ea25 0303 	bic.w	r3, r5, r3
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3300      	adds	r3, #0
 8003ec4:	bf18      	it	ne
 8003ec6:	2301      	movne	r3, #1
 8003ec8:	e7e9      	b.n	8003e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8003eca:	2000      	movs	r0, #0
}
 8003ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ed0 <I2C_MasterRequestWrite>:
{
 8003ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	4604      	mov	r4, r0
 8003ed6:	460f      	mov	r7, r1
 8003ed8:	4615      	mov	r5, r2
 8003eda:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003edc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d00d      	beq.n	8003efe <I2C_MasterRequestWrite+0x2e>
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d00b      	beq.n	8003efe <I2C_MasterRequestWrite+0x2e>
 8003ee6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eea:	d008      	beq.n	8003efe <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003eec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003eee:	2b12      	cmp	r3, #18
 8003ef0:	d10a      	bne.n	8003f08 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ef2:	6802      	ldr	r2, [r0, #0]
 8003ef4:	6813      	ldr	r3, [r2, #0]
 8003ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efa:	6013      	str	r3, [r2, #0]
 8003efc:	e004      	b.n	8003f08 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003efe:	6822      	ldr	r2, [r4, #0]
 8003f00:	6813      	ldr	r3, [r2, #0]
 8003f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f06:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f08:	9600      	str	r6, [sp, #0]
 8003f0a:	462b      	mov	r3, r5
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f12:	4620      	mov	r0, r4
 8003f14:	f7ff ff51 	bl	8003dba <I2C_WaitOnFlagUntilTimeout>
 8003f18:	bb18      	cbnz	r0, 8003f62 <I2C_MasterRequestWrite+0x92>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f1a:	6923      	ldr	r3, [r4, #16]
 8003f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f20:	d10d      	bne.n	8003f3e <I2C_MasterRequestWrite+0x6e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8003f28:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f2a:	4633      	mov	r3, r6
 8003f2c:	462a      	mov	r2, r5
 8003f2e:	4910      	ldr	r1, [pc, #64]	; (8003f70 <I2C_MasterRequestWrite+0xa0>)
 8003f30:	4620      	mov	r0, r4
 8003f32:	f7ff ff7a 	bl	8003e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	b1a0      	cbz	r0, 8003f64 <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e012      	b.n	8003f64 <I2C_MasterRequestWrite+0x94>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f3e:	11fb      	asrs	r3, r7, #7
 8003f40:	6822      	ldr	r2, [r4, #0]
 8003f42:	f003 0306 	and.w	r3, r3, #6
 8003f46:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003f4a:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f4c:	4633      	mov	r3, r6
 8003f4e:	462a      	mov	r2, r5
 8003f50:	4908      	ldr	r1, [pc, #32]	; (8003f74 <I2C_MasterRequestWrite+0xa4>)
 8003f52:	4620      	mov	r0, r4
 8003f54:	f7ff ff69 	bl	8003e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f58:	b938      	cbnz	r0, 8003f6a <I2C_MasterRequestWrite+0x9a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	b2ff      	uxtb	r7, r7
 8003f5e:	611f      	str	r7, [r3, #16]
 8003f60:	e7e3      	b.n	8003f2a <I2C_MasterRequestWrite+0x5a>
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	b003      	add	sp, #12
 8003f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e7fa      	b.n	8003f64 <I2C_MasterRequestWrite+0x94>
 8003f6e:	bf00      	nop
 8003f70:	00010002 	.word	0x00010002
 8003f74:	00010008 	.word	0x00010008

08003f78 <I2C_MasterRequestRead>:
{
 8003f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	4604      	mov	r4, r0
 8003f80:	460d      	mov	r5, r1
 8003f82:	4616      	mov	r6, r2
 8003f84:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f86:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f88:	6801      	ldr	r1, [r0, #0]
 8003f8a:	680b      	ldr	r3, [r1, #0]
 8003f8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f90:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f92:	2a08      	cmp	r2, #8
 8003f94:	d00d      	beq.n	8003fb2 <I2C_MasterRequestRead+0x3a>
 8003f96:	2a01      	cmp	r2, #1
 8003f98:	d00b      	beq.n	8003fb2 <I2C_MasterRequestRead+0x3a>
 8003f9a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003f9e:	d008      	beq.n	8003fb2 <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003fa0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003fa2:	2b11      	cmp	r3, #17
 8003fa4:	d10a      	bne.n	8003fbc <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa6:	6802      	ldr	r2, [r0, #0]
 8003fa8:	6813      	ldr	r3, [r2, #0]
 8003faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	e004      	b.n	8003fbc <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fb2:	6822      	ldr	r2, [r4, #0]
 8003fb4:	6813      	ldr	r3, [r2, #0]
 8003fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fba:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fbc:	9700      	str	r7, [sp, #0]
 8003fbe:	4633      	mov	r3, r6
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	f7ff fef7 	bl	8003dba <I2C_WaitOnFlagUntilTimeout>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d149      	bne.n	8004064 <I2C_MasterRequestRead+0xec>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fd0:	6923      	ldr	r3, [r4, #16]
 8003fd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd6:	d10f      	bne.n	8003ff8 <I2C_MasterRequestRead+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	f045 0501 	orr.w	r5, r5, #1
 8003fde:	b2ed      	uxtb	r5, r5
 8003fe0:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fe2:	463b      	mov	r3, r7
 8003fe4:	4632      	mov	r2, r6
 8003fe6:	4923      	ldr	r1, [pc, #140]	; (8004074 <I2C_MasterRequestRead+0xfc>)
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f7ff ff1e 	bl	8003e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	d038      	beq.n	8004066 <I2C_MasterRequestRead+0xee>
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e036      	b.n	8004066 <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ff8:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8003ffc:	f008 0806 	and.w	r8, r8, #6
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8004006:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004008:	463b      	mov	r3, r7
 800400a:	4632      	mov	r2, r6
 800400c:	491a      	ldr	r1, [pc, #104]	; (8004078 <I2C_MasterRequestRead+0x100>)
 800400e:	4620      	mov	r0, r4
 8004010:	f7ff ff0b 	bl	8003e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004014:	b108      	cbz	r0, 800401a <I2C_MasterRequestRead+0xa2>
      return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e025      	b.n	8004066 <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	b2ed      	uxtb	r5, r5
 800401e:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004020:	463b      	mov	r3, r7
 8004022:	4632      	mov	r2, r6
 8004024:	4913      	ldr	r1, [pc, #76]	; (8004074 <I2C_MasterRequestRead+0xfc>)
 8004026:	4620      	mov	r0, r4
 8004028:	f7ff feff 	bl	8003e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800402c:	b108      	cbz	r0, 8004032 <I2C_MasterRequestRead+0xba>
      return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e019      	b.n	8004066 <I2C_MasterRequestRead+0xee>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004032:	2200      	movs	r2, #0
 8004034:	9203      	str	r2, [sp, #12]
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	6959      	ldr	r1, [r3, #20]
 800403a:	9103      	str	r1, [sp, #12]
 800403c:	6999      	ldr	r1, [r3, #24]
 800403e:	9103      	str	r1, [sp, #12]
 8004040:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004042:	6819      	ldr	r1, [r3, #0]
 8004044:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004048:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800404a:	9700      	str	r7, [sp, #0]
 800404c:	4633      	mov	r3, r6
 800404e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004052:	4620      	mov	r0, r4
 8004054:	f7ff feb1 	bl	8003dba <I2C_WaitOnFlagUntilTimeout>
 8004058:	b948      	cbnz	r0, 800406e <I2C_MasterRequestRead+0xf6>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800405a:	6822      	ldr	r2, [r4, #0]
 800405c:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8004060:	6113      	str	r3, [r2, #16]
 8004062:	e7be      	b.n	8003fe2 <I2C_MasterRequestRead+0x6a>
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
}
 8004066:	4618      	mov	r0, r3
 8004068:	b004      	add	sp, #16
 800406a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e7f9      	b.n	8004066 <I2C_MasterRequestRead+0xee>
 8004072:	bf00      	nop
 8004074:	00010002 	.word	0x00010002
 8004078:	00010008 	.word	0x00010008

0800407c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800407c:	b570      	push	{r4, r5, r6, lr}
 800407e:	4604      	mov	r4, r0
 8004080:	460d      	mov	r5, r1
 8004082:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f013 0f80 	tst.w	r3, #128	; 0x80
 800408c:	d11c      	bne.n	80040c8 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800408e:	4620      	mov	r0, r4
 8004090:	f7ff fe7a 	bl	8003d88 <I2C_IsAcknowledgeFailed>
 8004094:	b9d0      	cbnz	r0, 80040cc <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004096:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800409a:	d0f3      	beq.n	8004084 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800409c:	f7ff f99a 	bl	80033d4 <HAL_GetTick>
 80040a0:	1b80      	subs	r0, r0, r6
 80040a2:	42a8      	cmp	r0, r5
 80040a4:	d801      	bhi.n	80040aa <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80040a6:	2d00      	cmp	r5, #0
 80040a8:	d1ec      	bne.n	8004084 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040aa:	2300      	movs	r3, #0
 80040ac:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040ae:	2220      	movs	r2, #32
 80040b0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80040ba:	f042 0220 	orr.w	r2, r2, #32
 80040be:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80040c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80040c4:	2001      	movs	r0, #1
 80040c6:	e000      	b.n	80040ca <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 80040c8:	2000      	movs	r0, #0
}
 80040ca:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80040cc:	2001      	movs	r0, #1
 80040ce:	e7fc      	b.n	80040ca <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

080040d0 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	4604      	mov	r4, r0
 80040d4:	460d      	mov	r5, r1
 80040d6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	f013 0f04 	tst.w	r3, #4
 80040e0:	d11c      	bne.n	800411c <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040e2:	4620      	mov	r0, r4
 80040e4:	f7ff fe50 	bl	8003d88 <I2C_IsAcknowledgeFailed>
 80040e8:	b9d0      	cbnz	r0, 8004120 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80040ea:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80040ee:	d0f3      	beq.n	80040d8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f0:	f7ff f970 	bl	80033d4 <HAL_GetTick>
 80040f4:	1b80      	subs	r0, r0, r6
 80040f6:	42a8      	cmp	r0, r5
 80040f8:	d801      	bhi.n	80040fe <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80040fa:	2d00      	cmp	r5, #0
 80040fc:	d1ec      	bne.n	80040d8 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040fe:	2300      	movs	r3, #0
 8004100:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004102:	2220      	movs	r2, #32
 8004104:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004108:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800410c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800410e:	f042 0220 	orr.w	r2, r2, #32
 8004112:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004114:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8004118:	2001      	movs	r0, #1
 800411a:	e000      	b.n	800411e <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 800411c:	2000      	movs	r0, #0
}
 800411e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004120:	2001      	movs	r0, #1
 8004122:	e7fc      	b.n	800411e <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08004124 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004124:	b570      	push	{r4, r5, r6, lr}
 8004126:	4605      	mov	r5, r0
 8004128:	460c      	mov	r4, r1
 800412a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800412c:	682b      	ldr	r3, [r5, #0]
 800412e:	695a      	ldr	r2, [r3, #20]
 8004130:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004134:	d129      	bne.n	800418a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004136:	695a      	ldr	r2, [r3, #20]
 8004138:	f012 0f10 	tst.w	r2, #16
 800413c:	d115      	bne.n	800416a <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413e:	f7ff f949 	bl	80033d4 <HAL_GetTick>
 8004142:	1b80      	subs	r0, r0, r6
 8004144:	42a0      	cmp	r0, r4
 8004146:	d801      	bhi.n	800414c <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8004148:	2c00      	cmp	r4, #0
 800414a:	d1ef      	bne.n	800412c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800414c:	2300      	movs	r3, #0
 800414e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004150:	2220      	movs	r2, #32
 8004152:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004156:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800415a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800415c:	f042 0220 	orr.w	r2, r2, #32
 8004160:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004162:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8004166:	2001      	movs	r0, #1
}
 8004168:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800416a:	f06f 0210 	mvn.w	r2, #16
 800416e:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004170:	2300      	movs	r3, #0
 8004172:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004174:	2220      	movs	r2, #32
 8004176:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800417a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800417e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004180:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004182:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8004186:	2001      	movs	r0, #1
 8004188:	e7ee      	b.n	8004168 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 800418a:	2000      	movs	r0, #0
 800418c:	e7ec      	b.n	8004168 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08004190 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004190:	2800      	cmp	r0, #0
 8004192:	f000 80be 	beq.w	8004312 <HAL_I2C_Init+0x182>
{
 8004196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004198:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800419a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d06b      	beq.n	800427a <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80041a2:	2324      	movs	r3, #36	; 0x24
 80041a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80041a8:	6822      	ldr	r2, [r4, #0]
 80041aa:	6813      	ldr	r3, [r2, #0]
 80041ac:	f023 0301 	bic.w	r3, r3, #1
 80041b0:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041b2:	f000 fe8b 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041b6:	6862      	ldr	r2, [r4, #4]
 80041b8:	4b58      	ldr	r3, [pc, #352]	; (800431c <HAL_I2C_Init+0x18c>)
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d862      	bhi.n	8004284 <HAL_I2C_Init+0xf4>
 80041be:	4b58      	ldr	r3, [pc, #352]	; (8004320 <HAL_I2C_Init+0x190>)
 80041c0:	4298      	cmp	r0, r3
 80041c2:	bf8c      	ite	hi
 80041c4:	2300      	movhi	r3, #0
 80041c6:	2301      	movls	r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f040 80a4 	bne.w	8004316 <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 80041ce:	4b55      	ldr	r3, [pc, #340]	; (8004324 <HAL_I2C_Init+0x194>)
 80041d0:	fba3 2300 	umull	r2, r3, r3, r0
 80041d4:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041d6:	6821      	ldr	r1, [r4, #0]
 80041d8:	684a      	ldr	r2, [r1, #4]
 80041da:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80041de:	431a      	orrs	r2, r3
 80041e0:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041e2:	6825      	ldr	r5, [r4, #0]
 80041e4:	6a2a      	ldr	r2, [r5, #32]
 80041e6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80041ea:	6866      	ldr	r6, [r4, #4]
 80041ec:	494b      	ldr	r1, [pc, #300]	; (800431c <HAL_I2C_Init+0x18c>)
 80041ee:	428e      	cmp	r6, r1
 80041f0:	d84e      	bhi.n	8004290 <HAL_I2C_Init+0x100>
 80041f2:	3301      	adds	r3, #1
 80041f4:	4313      	orrs	r3, r2
 80041f6:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041f8:	6825      	ldr	r5, [r4, #0]
 80041fa:	69e9      	ldr	r1, [r5, #28]
 80041fc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004200:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004204:	6863      	ldr	r3, [r4, #4]
 8004206:	4a45      	ldr	r2, [pc, #276]	; (800431c <HAL_I2C_Init+0x18c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d84b      	bhi.n	80042a4 <HAL_I2C_Init+0x114>
 800420c:	3801      	subs	r0, #1
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	fbb0 f3f3 	udiv	r3, r0, r3
 8004214:	3301      	adds	r3, #1
 8004216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800421a:	2b04      	cmp	r3, #4
 800421c:	bf38      	it	cc
 800421e:	2304      	movcc	r3, #4
 8004220:	430b      	orrs	r3, r1
 8004222:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004224:	6821      	ldr	r1, [r4, #0]
 8004226:	680b      	ldr	r3, [r1, #0]
 8004228:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800422c:	69e2      	ldr	r2, [r4, #28]
 800422e:	6a20      	ldr	r0, [r4, #32]
 8004230:	4302      	orrs	r2, r0
 8004232:	4313      	orrs	r3, r2
 8004234:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004236:	6821      	ldr	r1, [r4, #0]
 8004238:	688b      	ldr	r3, [r1, #8]
 800423a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800423e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004242:	6922      	ldr	r2, [r4, #16]
 8004244:	68e0      	ldr	r0, [r4, #12]
 8004246:	4302      	orrs	r2, r0
 8004248:	4313      	orrs	r3, r2
 800424a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800424c:	6821      	ldr	r1, [r4, #0]
 800424e:	68cb      	ldr	r3, [r1, #12]
 8004250:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004254:	6962      	ldr	r2, [r4, #20]
 8004256:	69a0      	ldr	r0, [r4, #24]
 8004258:	4302      	orrs	r2, r0
 800425a:	4313      	orrs	r3, r2
 800425c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800425e:	6822      	ldr	r2, [r4, #0]
 8004260:	6813      	ldr	r3, [r2, #0]
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004268:	2000      	movs	r0, #0
 800426a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800426c:	2320      	movs	r3, #32
 800426e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004272:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004274:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8004278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800427a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800427e:	f002 fc93 	bl	8006ba8 <HAL_I2C_MspInit>
 8004282:	e78e      	b.n	80041a2 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004284:	4b28      	ldr	r3, [pc, #160]	; (8004328 <HAL_I2C_Init+0x198>)
 8004286:	4298      	cmp	r0, r3
 8004288:	bf8c      	ite	hi
 800428a:	2300      	movhi	r3, #0
 800428c:	2301      	movls	r3, #1
 800428e:	e79b      	b.n	80041c8 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004290:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004294:	fb01 f303 	mul.w	r3, r1, r3
 8004298:	4924      	ldr	r1, [pc, #144]	; (800432c <HAL_I2C_Init+0x19c>)
 800429a:	fba1 1303 	umull	r1, r3, r1, r3
 800429e:	099b      	lsrs	r3, r3, #6
 80042a0:	3301      	adds	r3, #1
 80042a2:	e7a7      	b.n	80041f4 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042a4:	68a2      	ldr	r2, [r4, #8]
 80042a6:	b9ba      	cbnz	r2, 80042d8 <HAL_I2C_Init+0x148>
 80042a8:	1e46      	subs	r6, r0, #1
 80042aa:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80042ae:	fbb6 f6f7 	udiv	r6, r6, r7
 80042b2:	3601      	adds	r6, #1
 80042b4:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80042b8:	fab6 f686 	clz	r6, r6
 80042bc:	0976      	lsrs	r6, r6, #5
 80042be:	bb36      	cbnz	r6, 800430e <HAL_I2C_Init+0x17e>
 80042c0:	b9c2      	cbnz	r2, 80042f4 <HAL_I2C_Init+0x164>
 80042c2:	3801      	subs	r0, #1
 80042c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80042c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80042cc:	3301      	adds	r3, #1
 80042ce:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80042d2:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80042d6:	e7a3      	b.n	8004220 <HAL_I2C_Init+0x90>
 80042d8:	1e46      	subs	r6, r0, #1
 80042da:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80042de:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80042e2:	fbb6 f6f7 	udiv	r6, r6, r7
 80042e6:	3601      	adds	r6, #1
 80042e8:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80042ec:	fab6 f686 	clz	r6, r6
 80042f0:	0976      	lsrs	r6, r6, #5
 80042f2:	e7e4      	b.n	80042be <HAL_I2C_Init+0x12e>
 80042f4:	3801      	subs	r0, #1
 80042f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80042fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80042fe:	fbb0 f2f3 	udiv	r2, r0, r3
 8004302:	3201      	adds	r2, #1
 8004304:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004308:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 800430c:	e788      	b.n	8004220 <HAL_I2C_Init+0x90>
 800430e:	2301      	movs	r3, #1
 8004310:	e786      	b.n	8004220 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8004312:	2001      	movs	r0, #1
}
 8004314:	4770      	bx	lr
    return HAL_ERROR;
 8004316:	2001      	movs	r0, #1
 8004318:	e7ae      	b.n	8004278 <HAL_I2C_Init+0xe8>
 800431a:	bf00      	nop
 800431c:	000186a0 	.word	0x000186a0
 8004320:	001e847f 	.word	0x001e847f
 8004324:	431bde83 	.word	0x431bde83
 8004328:	003d08ff 	.word	0x003d08ff
 800432c:	10624dd3 	.word	0x10624dd3

08004330 <HAL_I2C_Master_Transmit>:
{
 8004330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	4604      	mov	r4, r0
 8004338:	460e      	mov	r6, r1
 800433a:	4690      	mov	r8, r2
 800433c:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800433e:	f7ff f849 	bl	80033d4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004342:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b20      	cmp	r3, #32
 800434a:	d004      	beq.n	8004356 <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 800434c:	2602      	movs	r6, #2
}
 800434e:	4630      	mov	r0, r6
 8004350:	b004      	add	sp, #16
 8004352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004356:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004358:	9000      	str	r0, [sp, #0]
 800435a:	2319      	movs	r3, #25
 800435c:	2201      	movs	r2, #1
 800435e:	494f      	ldr	r1, [pc, #316]	; (800449c <HAL_I2C_Master_Transmit+0x16c>)
 8004360:	4620      	mov	r0, r4
 8004362:	f7ff fd2a 	bl	8003dba <I2C_WaitOnFlagUntilTimeout>
 8004366:	2800      	cmp	r0, #0
 8004368:	f040 8091 	bne.w	800448e <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 800436c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004370:	2b01      	cmp	r3, #1
 8004372:	f000 808e 	beq.w	8004492 <HAL_I2C_Master_Transmit+0x162>
 8004376:	2301      	movs	r3, #1
 8004378:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	f012 0f01 	tst.w	r2, #1
 8004384:	d103      	bne.n	800438e <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	f042 0201 	orr.w	r2, r2, #1
 800438c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800438e:	6822      	ldr	r2, [r4, #0]
 8004390:	6813      	ldr	r3, [r2, #0]
 8004392:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004396:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004398:	2321      	movs	r3, #33	; 0x21
 800439a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800439e:	2310      	movs	r3, #16
 80043a0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043a4:	2300      	movs	r3, #0
 80043a6:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80043a8:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043ac:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043b0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043b2:	4b3b      	ldr	r3, [pc, #236]	; (80044a0 <HAL_I2C_Master_Transmit+0x170>)
 80043b4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80043b6:	462b      	mov	r3, r5
 80043b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043ba:	4631      	mov	r1, r6
 80043bc:	4620      	mov	r0, r4
 80043be:	f7ff fd87 	bl	8003ed0 <I2C_MasterRequestWrite>
 80043c2:	4606      	mov	r6, r0
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d166      	bne.n	8004496 <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c8:	2300      	movs	r3, #0
 80043ca:	9303      	str	r3, [sp, #12]
 80043cc:	6823      	ldr	r3, [r4, #0]
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	9203      	str	r2, [sp, #12]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	9303      	str	r3, [sp, #12]
 80043d6:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80043d8:	e012      	b.n	8004400 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d001      	beq.n	80043e4 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 80043e0:	2601      	movs	r6, #1
 80043e2:	e7b4      	b.n	800434e <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e4:	6822      	ldr	r2, [r4, #0]
 80043e6:	6813      	ldr	r3, [r2, #0]
 80043e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043ec:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80043ee:	2601      	movs	r6, #1
 80043f0:	e7ad      	b.n	800434e <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f2:	462a      	mov	r2, r5
 80043f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80043f6:	4620      	mov	r0, r4
 80043f8:	f7ff fe6a 	bl	80040d0 <I2C_WaitOnBTFFlagUntilTimeout>
 80043fc:	2800      	cmp	r0, #0
 80043fe:	d12c      	bne.n	800445a <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 8004400:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004402:	2b00      	cmp	r3, #0
 8004404:	d035      	beq.n	8004472 <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004406:	462a      	mov	r2, r5
 8004408:	990a      	ldr	r1, [sp, #40]	; 0x28
 800440a:	4620      	mov	r0, r4
 800440c:	f7ff fe36 	bl	800407c <I2C_WaitOnTXEFlagUntilTimeout>
 8004410:	2800      	cmp	r0, #0
 8004412:	d1e2      	bne.n	80043da <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004414:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	7812      	ldrb	r2, [r2, #0]
 800441a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800441c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800441e:	1c4b      	adds	r3, r1, #1
 8004420:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004422:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004424:	3b01      	subs	r3, #1
 8004426:	b29b      	uxth	r3, r3
 8004428:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800442a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800442c:	3b01      	subs	r3, #1
 800442e:	b29b      	uxth	r3, r3
 8004430:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004432:	6822      	ldr	r2, [r4, #0]
 8004434:	6950      	ldr	r0, [r2, #20]
 8004436:	f010 0f04 	tst.w	r0, #4
 800443a:	d0da      	beq.n	80043f2 <HAL_I2C_Master_Transmit+0xc2>
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0d8      	beq.n	80043f2 <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004440:	784b      	ldrb	r3, [r1, #1]
 8004442:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8004444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004446:	3301      	adds	r3, #1
 8004448:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800444a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800444c:	3b01      	subs	r3, #1
 800444e:	b29b      	uxth	r3, r3
 8004450:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8004452:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004454:	3b01      	subs	r3, #1
 8004456:	8523      	strh	r3, [r4, #40]	; 0x28
 8004458:	e7cb      	b.n	80043f2 <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800445a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800445c:	2b04      	cmp	r3, #4
 800445e:	d001      	beq.n	8004464 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 8004460:	2601      	movs	r6, #1
 8004462:	e774      	b.n	800434e <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004464:	6822      	ldr	r2, [r4, #0]
 8004466:	6813      	ldr	r3, [r2, #0]
 8004468:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800446c:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 800446e:	2601      	movs	r6, #1
 8004470:	e76d      	b.n	800434e <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004472:	6822      	ldr	r2, [r4, #0]
 8004474:	6813      	ldr	r3, [r2, #0]
 8004476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800447a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800447c:	2320      	movs	r3, #32
 800447e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004482:	2300      	movs	r3, #0
 8004484:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004488:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800448c:	e75f      	b.n	800434e <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 800448e:	2602      	movs	r6, #2
 8004490:	e75d      	b.n	800434e <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8004492:	2602      	movs	r6, #2
 8004494:	e75b      	b.n	800434e <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8004496:	2601      	movs	r6, #1
 8004498:	e759      	b.n	800434e <HAL_I2C_Master_Transmit+0x1e>
 800449a:	bf00      	nop
 800449c:	00100002 	.word	0x00100002
 80044a0:	ffff0000 	.word	0xffff0000

080044a4 <HAL_I2C_Master_Receive>:
{
 80044a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a8:	b086      	sub	sp, #24
 80044aa:	4604      	mov	r4, r0
 80044ac:	460e      	mov	r6, r1
 80044ae:	4690      	mov	r8, r2
 80044b0:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 80044b2:	f7fe ff8f 	bl	80033d4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80044b6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d004      	beq.n	80044ca <HAL_I2C_Master_Receive+0x26>
    return HAL_BUSY;
 80044c0:	2602      	movs	r6, #2
}
 80044c2:	4630      	mov	r0, r6
 80044c4:	b006      	add	sp, #24
 80044c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044ca:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044cc:	9000      	str	r0, [sp, #0]
 80044ce:	2319      	movs	r3, #25
 80044d0:	2201      	movs	r2, #1
 80044d2:	499e      	ldr	r1, [pc, #632]	; (800474c <HAL_I2C_Master_Receive+0x2a8>)
 80044d4:	4620      	mov	r0, r4
 80044d6:	f7ff fc70 	bl	8003dba <I2C_WaitOnFlagUntilTimeout>
 80044da:	2800      	cmp	r0, #0
 80044dc:	f040 8134 	bne.w	8004748 <HAL_I2C_Master_Receive+0x2a4>
    __HAL_LOCK(hi2c);
 80044e0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	f000 8137 	beq.w	8004758 <HAL_I2C_Master_Receive+0x2b4>
 80044ea:	2301      	movs	r3, #1
 80044ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	f012 0f01 	tst.w	r2, #1
 80044f8:	d103      	bne.n	8004502 <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	f042 0201 	orr.w	r2, r2, #1
 8004500:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004502:	6822      	ldr	r2, [r4, #0]
 8004504:	6813      	ldr	r3, [r2, #0]
 8004506:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800450a:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800450c:	2322      	movs	r3, #34	; 0x22
 800450e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004512:	2310      	movs	r3, #16
 8004514:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004518:	2300      	movs	r3, #0
 800451a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800451c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004520:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004522:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004524:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004526:	4b8a      	ldr	r3, [pc, #552]	; (8004750 <HAL_I2C_Master_Receive+0x2ac>)
 8004528:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800452a:	462b      	mov	r3, r5
 800452c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800452e:	4631      	mov	r1, r6
 8004530:	4620      	mov	r0, r4
 8004532:	f7ff fd21 	bl	8003f78 <I2C_MasterRequestRead>
 8004536:	4606      	mov	r6, r0
 8004538:	2800      	cmp	r0, #0
 800453a:	f040 810f 	bne.w	800475c <HAL_I2C_Master_Receive+0x2b8>
    if (hi2c->XferSize == 0U)
 800453e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004540:	b95b      	cbnz	r3, 800455a <HAL_I2C_Master_Receive+0xb6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004542:	9302      	str	r3, [sp, #8]
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	695a      	ldr	r2, [r3, #20]
 8004548:	9202      	str	r2, [sp, #8]
 800454a:	699a      	ldr	r2, [r3, #24]
 800454c:	9202      	str	r2, [sp, #8]
 800454e:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	e077      	b.n	800464a <HAL_I2C_Master_Receive+0x1a6>
    else if (hi2c->XferSize == 1U)
 800455a:	2b01      	cmp	r3, #1
 800455c:	d00f      	beq.n	800457e <HAL_I2C_Master_Receive+0xda>
    else if (hi2c->XferSize == 2U)
 800455e:	2b02      	cmp	r3, #2
 8004560:	d01f      	beq.n	80045a2 <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004562:	6822      	ldr	r2, [r4, #0]
 8004564:	6813      	ldr	r3, [r2, #0]
 8004566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800456a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456c:	2300      	movs	r3, #0
 800456e:	9305      	str	r3, [sp, #20]
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	695a      	ldr	r2, [r3, #20]
 8004574:	9205      	str	r2, [sp, #20]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	9305      	str	r3, [sp, #20]
 800457a:	9b05      	ldr	r3, [sp, #20]
 800457c:	e065      	b.n	800464a <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800457e:	6822      	ldr	r2, [r4, #0]
 8004580:	6813      	ldr	r3, [r2, #0]
 8004582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004586:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004588:	2300      	movs	r3, #0
 800458a:	9303      	str	r3, [sp, #12]
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	695a      	ldr	r2, [r3, #20]
 8004590:	9203      	str	r2, [sp, #12]
 8004592:	699a      	ldr	r2, [r3, #24]
 8004594:	9203      	str	r2, [sp, #12]
 8004596:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	e053      	b.n	800464a <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a2:	6822      	ldr	r2, [r4, #0]
 80045a4:	6813      	ldr	r3, [r2, #0]
 80045a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045aa:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045ac:	6822      	ldr	r2, [r4, #0]
 80045ae:	6813      	ldr	r3, [r2, #0]
 80045b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045b4:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b6:	2300      	movs	r3, #0
 80045b8:	9304      	str	r3, [sp, #16]
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	695a      	ldr	r2, [r3, #20]
 80045be:	9204      	str	r2, [sp, #16]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	9304      	str	r3, [sp, #16]
 80045c4:	9b04      	ldr	r3, [sp, #16]
 80045c6:	e040      	b.n	800464a <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c8:	462a      	mov	r2, r5
 80045ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80045cc:	4620      	mov	r0, r4
 80045ce:	f7ff fda9 	bl	8004124 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	f040 80c4 	bne.w	8004760 <HAL_I2C_Master_Receive+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045de:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80045e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045e2:	3301      	adds	r3, #1
 80045e4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80045e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80045e8:	3b01      	subs	r3, #1
 80045ea:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80045ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	8563      	strh	r3, [r4, #42]	; 0x2a
 80045f4:	e029      	b.n	800464a <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045f6:	9500      	str	r5, [sp, #0]
 80045f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045fa:	2200      	movs	r2, #0
 80045fc:	4955      	ldr	r1, [pc, #340]	; (8004754 <HAL_I2C_Master_Receive+0x2b0>)
 80045fe:	4620      	mov	r0, r4
 8004600:	f7ff fbdb 	bl	8003dba <I2C_WaitOnFlagUntilTimeout>
 8004604:	2800      	cmp	r0, #0
 8004606:	f040 80ad 	bne.w	8004764 <HAL_I2C_Master_Receive+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460a:	6822      	ldr	r2, [r4, #0]
 800460c:	6813      	ldr	r3, [r2, #0]
 800460e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004612:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004614:	6823      	ldr	r3, [r4, #0]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800461a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800461c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800461e:	1c53      	adds	r3, r2, #1
 8004620:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004622:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004624:	3b01      	subs	r3, #1
 8004626:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004628:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800462a:	3b01      	subs	r3, #1
 800462c:	b29b      	uxth	r3, r3
 800462e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8004636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004638:	3301      	adds	r3, #1
 800463a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800463c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800463e:	3b01      	subs	r3, #1
 8004640:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004642:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004644:	3b01      	subs	r3, #1
 8004646:	b29b      	uxth	r3, r3
 8004648:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800464a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800464c:	2b00      	cmp	r3, #0
 800464e:	d072      	beq.n	8004736 <HAL_I2C_Master_Receive+0x292>
      if (hi2c->XferSize <= 3U)
 8004650:	2b03      	cmp	r3, #3
 8004652:	d849      	bhi.n	80046e8 <HAL_I2C_Master_Receive+0x244>
        if (hi2c->XferSize == 1U)
 8004654:	2b01      	cmp	r3, #1
 8004656:	d0b7      	beq.n	80045c8 <HAL_I2C_Master_Receive+0x124>
        else if (hi2c->XferSize == 2U)
 8004658:	2b02      	cmp	r3, #2
 800465a:	d0cc      	beq.n	80045f6 <HAL_I2C_Master_Receive+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800465c:	9500      	str	r5, [sp, #0]
 800465e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004660:	2200      	movs	r2, #0
 8004662:	493c      	ldr	r1, [pc, #240]	; (8004754 <HAL_I2C_Master_Receive+0x2b0>)
 8004664:	4620      	mov	r0, r4
 8004666:	f7ff fba8 	bl	8003dba <I2C_WaitOnFlagUntilTimeout>
 800466a:	2800      	cmp	r0, #0
 800466c:	d17c      	bne.n	8004768 <HAL_I2C_Master_Receive+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800466e:	6822      	ldr	r2, [r4, #0]
 8004670:	6813      	ldr	r3, [r2, #0]
 8004672:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004676:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800467e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004680:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004682:	3301      	adds	r3, #1
 8004684:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004686:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004688:	3b01      	subs	r3, #1
 800468a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800468c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800468e:	3b01      	subs	r3, #1
 8004690:	b29b      	uxth	r3, r3
 8004692:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004694:	9500      	str	r5, [sp, #0]
 8004696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004698:	2200      	movs	r2, #0
 800469a:	492e      	ldr	r1, [pc, #184]	; (8004754 <HAL_I2C_Master_Receive+0x2b0>)
 800469c:	4620      	mov	r0, r4
 800469e:	f7ff fb8c 	bl	8003dba <I2C_WaitOnFlagUntilTimeout>
 80046a2:	2800      	cmp	r0, #0
 80046a4:	d162      	bne.n	800476c <HAL_I2C_Master_Receive+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a6:	6822      	ldr	r2, [r4, #0]
 80046a8:	6813      	ldr	r3, [r2, #0]
 80046aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046ae:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046b6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80046b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80046ba:	1c53      	adds	r3, r2, #1
 80046bc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80046be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80046c0:	3b01      	subs	r3, #1
 80046c2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80046c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80046d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046d4:	3301      	adds	r3, #1
 80046d6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80046d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80046da:	3b01      	subs	r3, #1
 80046dc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80046de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80046e6:	e7b0      	b.n	800464a <HAL_I2C_Master_Receive+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046e8:	462a      	mov	r2, r5
 80046ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80046ec:	4620      	mov	r0, r4
 80046ee:	f7ff fd19 	bl	8004124 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d13c      	bne.n	8004770 <HAL_I2C_Master_Receive+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	691a      	ldr	r2, [r3, #16]
 80046fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046fc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80046fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004700:	1c53      	adds	r3, r2, #1
 8004702:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8004704:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004706:	3b01      	subs	r3, #1
 8004708:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800470a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800470c:	3b01      	subs	r3, #1
 800470e:	b29b      	uxth	r3, r3
 8004710:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	6959      	ldr	r1, [r3, #20]
 8004716:	f011 0f04 	tst.w	r1, #4
 800471a:	d096      	beq.n	800464a <HAL_I2C_Master_Receive+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8004720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004722:	3301      	adds	r3, #1
 8004724:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004726:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004728:	3b01      	subs	r3, #1
 800472a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800472c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800472e:	3b01      	subs	r3, #1
 8004730:	b29b      	uxth	r3, r3
 8004732:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004734:	e789      	b.n	800464a <HAL_I2C_Master_Receive+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004736:	2320      	movs	r3, #32
 8004738:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800473c:	2300      	movs	r3, #0
 800473e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004742:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8004746:	e6bc      	b.n	80044c2 <HAL_I2C_Master_Receive+0x1e>
      return HAL_BUSY;
 8004748:	2602      	movs	r6, #2
 800474a:	e6ba      	b.n	80044c2 <HAL_I2C_Master_Receive+0x1e>
 800474c:	00100002 	.word	0x00100002
 8004750:	ffff0000 	.word	0xffff0000
 8004754:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 8004758:	2602      	movs	r6, #2
 800475a:	e6b2      	b.n	80044c2 <HAL_I2C_Master_Receive+0x1e>
      return HAL_ERROR;
 800475c:	2601      	movs	r6, #1
 800475e:	e6b0      	b.n	80044c2 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8004760:	2601      	movs	r6, #1
 8004762:	e6ae      	b.n	80044c2 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8004764:	2601      	movs	r6, #1
 8004766:	e6ac      	b.n	80044c2 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8004768:	2601      	movs	r6, #1
 800476a:	e6aa      	b.n	80044c2 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 800476c:	2601      	movs	r6, #1
 800476e:	e6a8      	b.n	80044c2 <HAL_I2C_Master_Receive+0x1e>
          return HAL_ERROR;
 8004770:	2601      	movs	r6, #1
 8004772:	e6a6      	b.n	80044c2 <HAL_I2C_Master_Receive+0x1e>

08004774 <HAL_I2C_IsDeviceReady>:
{
 8004774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004778:	b085      	sub	sp, #20
 800477a:	4604      	mov	r4, r0
 800477c:	4688      	mov	r8, r1
 800477e:	4691      	mov	r9, r2
 8004780:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8004782:	f7fe fe27 	bl	80033d4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004786:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b20      	cmp	r3, #32
 800478e:	d004      	beq.n	800479a <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 8004790:	2302      	movs	r3, #2
}
 8004792:	4618      	mov	r0, r3
 8004794:	b005      	add	sp, #20
 8004796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800479a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800479c:	9000      	str	r0, [sp, #0]
 800479e:	2319      	movs	r3, #25
 80047a0:	2201      	movs	r2, #1
 80047a2:	4954      	ldr	r1, [pc, #336]	; (80048f4 <HAL_I2C_IsDeviceReady+0x180>)
 80047a4:	4620      	mov	r0, r4
 80047a6:	f7ff fb08 	bl	8003dba <I2C_WaitOnFlagUntilTimeout>
 80047aa:	2800      	cmp	r0, #0
 80047ac:	f040 8097 	bne.w	80048de <HAL_I2C_IsDeviceReady+0x16a>
    __HAL_LOCK(hi2c);
 80047b0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	f000 8094 	beq.w	80048e2 <HAL_I2C_IsDeviceReady+0x16e>
 80047ba:	2301      	movs	r3, #1
 80047bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	f012 0f01 	tst.w	r2, #1
 80047c8:	d103      	bne.n	80047d2 <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	f042 0201 	orr.w	r2, r2, #1
 80047d0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047d2:	6822      	ldr	r2, [r4, #0]
 80047d4:	6813      	ldr	r3, [r2, #0]
 80047d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047da:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047dc:	2324      	movs	r3, #36	; 0x24
 80047de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047e2:	2300      	movs	r3, #0
 80047e4:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047e6:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80047ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 80047ec:	2701      	movs	r7, #1
 80047ee:	e034      	b.n	800485a <HAL_I2C_IsDeviceReady+0xe6>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80047f0:	23a0      	movs	r3, #160	; 0xa0
 80047f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80047fe:	6959      	ldr	r1, [r3, #20]
 8004800:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004804:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2ba0      	cmp	r3, #160	; 0xa0
 800480c:	d009      	beq.n	8004822 <HAL_I2C_IsDeviceReady+0xae>
 800480e:	b942      	cbnz	r2, 8004822 <HAL_I2C_IsDeviceReady+0xae>
 8004810:	b939      	cbnz	r1, 8004822 <HAL_I2C_IsDeviceReady+0xae>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004812:	f7fe fddf 	bl	80033d4 <HAL_GetTick>
 8004816:	1b80      	subs	r0, r0, r6
 8004818:	42a8      	cmp	r0, r5
 800481a:	d8e9      	bhi.n	80047f0 <HAL_I2C_IsDeviceReady+0x7c>
 800481c:	2d00      	cmp	r5, #0
 800481e:	d1ea      	bne.n	80047f6 <HAL_I2C_IsDeviceReady+0x82>
 8004820:	e7e6      	b.n	80047f0 <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->State = HAL_I2C_STATE_READY;
 8004822:	2320      	movs	r3, #32
 8004824:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	695a      	ldr	r2, [r3, #20]
 800482c:	f012 0f02 	tst.w	r2, #2
 8004830:	d131      	bne.n	8004896 <HAL_I2C_IsDeviceReady+0x122>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004838:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004840:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004842:	9600      	str	r6, [sp, #0]
 8004844:	2319      	movs	r3, #25
 8004846:	2201      	movs	r2, #1
 8004848:	492a      	ldr	r1, [pc, #168]	; (80048f4 <HAL_I2C_IsDeviceReady+0x180>)
 800484a:	4620      	mov	r0, r4
 800484c:	f7ff fab5 	bl	8003dba <I2C_WaitOnFlagUntilTimeout>
 8004850:	2800      	cmp	r0, #0
 8004852:	d14c      	bne.n	80048ee <HAL_I2C_IsDeviceReady+0x17a>
      I2C_Trials++;
 8004854:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8004856:	454f      	cmp	r7, r9
 8004858:	d239      	bcs.n	80048ce <HAL_I2C_IsDeviceReady+0x15a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800485a:	6822      	ldr	r2, [r4, #0]
 800485c:	6813      	ldr	r3, [r2, #0]
 800485e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004862:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004864:	9600      	str	r6, [sp, #0]
 8004866:	462b      	mov	r3, r5
 8004868:	2200      	movs	r2, #0
 800486a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800486e:	4620      	mov	r0, r4
 8004870:	f7ff faa3 	bl	8003dba <I2C_WaitOnFlagUntilTimeout>
 8004874:	2800      	cmp	r0, #0
 8004876:	d136      	bne.n	80048e6 <HAL_I2C_IsDeviceReady+0x172>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 800487e:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8004880:	f7fe fda8 	bl	80033d4 <HAL_GetTick>
 8004884:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	695a      	ldr	r2, [r3, #20]
 800488a:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800488e:	6959      	ldr	r1, [r3, #20]
 8004890:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004894:	e7b6      	b.n	8004804 <HAL_I2C_IsDeviceReady+0x90>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800489c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800489e:	2300      	movs	r3, #0
 80048a0:	9303      	str	r3, [sp, #12]
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	9203      	str	r2, [sp, #12]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	9303      	str	r3, [sp, #12]
 80048ac:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048ae:	9600      	str	r6, [sp, #0]
 80048b0:	2319      	movs	r3, #25
 80048b2:	2201      	movs	r2, #1
 80048b4:	490f      	ldr	r1, [pc, #60]	; (80048f4 <HAL_I2C_IsDeviceReady+0x180>)
 80048b6:	4620      	mov	r0, r4
 80048b8:	f7ff fa7f 	bl	8003dba <I2C_WaitOnFlagUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	b9a0      	cbnz	r0, 80048ea <HAL_I2C_IsDeviceReady+0x176>
        hi2c->State = HAL_I2C_STATE_READY;
 80048c0:	2220      	movs	r2, #32
 80048c2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80048c6:	2200      	movs	r2, #0
 80048c8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 80048cc:	e761      	b.n	8004792 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 80048ce:	2320      	movs	r3, #32
 80048d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80048d4:	2300      	movs	r3, #0
 80048d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e759      	b.n	8004792 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 80048de:	2302      	movs	r3, #2
 80048e0:	e757      	b.n	8004792 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 80048e2:	2302      	movs	r3, #2
 80048e4:	e755      	b.n	8004792 <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e753      	b.n	8004792 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e751      	b.n	8004792 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e74f      	b.n	8004792 <HAL_I2C_IsDeviceReady+0x1e>
 80048f2:	bf00      	nop
 80048f4:	00100002 	.word	0x00100002

080048f8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048f8:	2800      	cmp	r0, #0
 80048fa:	f000 81bb 	beq.w	8004c74 <HAL_RCC_OscConfig+0x37c>
{
 80048fe:	b570      	push	{r4, r5, r6, lr}
 8004900:	b082      	sub	sp, #8
 8004902:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004904:	6803      	ldr	r3, [r0, #0]
 8004906:	f013 0f01 	tst.w	r3, #1
 800490a:	d03b      	beq.n	8004984 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800490c:	4ba7      	ldr	r3, [pc, #668]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 030c 	and.w	r3, r3, #12
 8004914:	2b04      	cmp	r3, #4
 8004916:	d02c      	beq.n	8004972 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004918:	4ba4      	ldr	r3, [pc, #656]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004920:	2b08      	cmp	r3, #8
 8004922:	d021      	beq.n	8004968 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004924:	6863      	ldr	r3, [r4, #4]
 8004926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492a:	d04f      	beq.n	80049cc <HAL_RCC_OscConfig+0xd4>
 800492c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004930:	d052      	beq.n	80049d8 <HAL_RCC_OscConfig+0xe0>
 8004932:	4b9e      	ldr	r3, [pc, #632]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004942:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004944:	6863      	ldr	r3, [r4, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d050      	beq.n	80049ec <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494a:	f7fe fd43 	bl	80033d4 <HAL_GetTick>
 800494e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004950:	4b96      	ldr	r3, [pc, #600]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004958:	d114      	bne.n	8004984 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800495a:	f7fe fd3b 	bl	80033d4 <HAL_GetTick>
 800495e:	1b40      	subs	r0, r0, r5
 8004960:	2864      	cmp	r0, #100	; 0x64
 8004962:	d9f5      	bls.n	8004950 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8004964:	2003      	movs	r0, #3
 8004966:	e18a      	b.n	8004c7e <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004968:	4b90      	ldr	r3, [pc, #576]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004970:	d0d8      	beq.n	8004924 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004972:	4b8e      	ldr	r3, [pc, #568]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800497a:	d003      	beq.n	8004984 <HAL_RCC_OscConfig+0x8c>
 800497c:	6863      	ldr	r3, [r4, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 817a 	beq.w	8004c78 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004984:	6823      	ldr	r3, [r4, #0]
 8004986:	f013 0f02 	tst.w	r3, #2
 800498a:	d055      	beq.n	8004a38 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800498c:	4b87      	ldr	r3, [pc, #540]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f013 0f0c 	tst.w	r3, #12
 8004994:	d03e      	beq.n	8004a14 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004996:	4b85      	ldr	r3, [pc, #532]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d033      	beq.n	8004a0a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049a2:	68e3      	ldr	r3, [r4, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d068      	beq.n	8004a7a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049a8:	4b81      	ldr	r3, [pc, #516]	; (8004bb0 <HAL_RCC_OscConfig+0x2b8>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ae:	f7fe fd11 	bl	80033d4 <HAL_GetTick>
 80049b2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b4:	4b7d      	ldr	r3, [pc, #500]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f013 0f02 	tst.w	r3, #2
 80049bc:	d154      	bne.n	8004a68 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049be:	f7fe fd09 	bl	80033d4 <HAL_GetTick>
 80049c2:	1b40      	subs	r0, r0, r5
 80049c4:	2802      	cmp	r0, #2
 80049c6:	d9f5      	bls.n	80049b4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80049c8:	2003      	movs	r0, #3
 80049ca:	e158      	b.n	8004c7e <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049cc:	4a77      	ldr	r2, [pc, #476]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 80049ce:	6813      	ldr	r3, [r2, #0]
 80049d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	e7b5      	b.n	8004944 <HAL_RCC_OscConfig+0x4c>
 80049d8:	4b74      	ldr	r3, [pc, #464]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	e7ab      	b.n	8004944 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80049ec:	f7fe fcf2 	bl	80033d4 <HAL_GetTick>
 80049f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f2:	4b6e      	ldr	r3, [pc, #440]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80049fa:	d0c3      	beq.n	8004984 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049fc:	f7fe fcea 	bl	80033d4 <HAL_GetTick>
 8004a00:	1b40      	subs	r0, r0, r5
 8004a02:	2864      	cmp	r0, #100	; 0x64
 8004a04:	d9f5      	bls.n	80049f2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8004a06:	2003      	movs	r0, #3
 8004a08:	e139      	b.n	8004c7e <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a0a:	4b68      	ldr	r3, [pc, #416]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004a12:	d1c6      	bne.n	80049a2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a14:	4b65      	ldr	r3, [pc, #404]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f013 0f02 	tst.w	r3, #2
 8004a1c:	d004      	beq.n	8004a28 <HAL_RCC_OscConfig+0x130>
 8004a1e:	68e3      	ldr	r3, [r4, #12]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d001      	beq.n	8004a28 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8004a24:	2001      	movs	r0, #1
 8004a26:	e12a      	b.n	8004c7e <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a28:	4a60      	ldr	r2, [pc, #384]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 8004a2a:	6813      	ldr	r3, [r2, #0]
 8004a2c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004a30:	6921      	ldr	r1, [r4, #16]
 8004a32:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004a36:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	f013 0f08 	tst.w	r3, #8
 8004a3e:	d040      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a40:	6963      	ldr	r3, [r4, #20]
 8004a42:	b363      	cbz	r3, 8004a9e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a44:	4b5b      	ldr	r3, [pc, #364]	; (8004bb4 <HAL_RCC_OscConfig+0x2bc>)
 8004a46:	2201      	movs	r2, #1
 8004a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4a:	f7fe fcc3 	bl	80033d4 <HAL_GetTick>
 8004a4e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a50:	4b56      	ldr	r3, [pc, #344]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 8004a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a54:	f013 0f02 	tst.w	r3, #2
 8004a58:	d133      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a5a:	f7fe fcbb 	bl	80033d4 <HAL_GetTick>
 8004a5e:	1b40      	subs	r0, r0, r5
 8004a60:	2802      	cmp	r0, #2
 8004a62:	d9f5      	bls.n	8004a50 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8004a64:	2003      	movs	r0, #3
 8004a66:	e10a      	b.n	8004c7e <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a68:	4a50      	ldr	r2, [pc, #320]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 8004a6a:	6813      	ldr	r3, [r2, #0]
 8004a6c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004a70:	6921      	ldr	r1, [r4, #16]
 8004a72:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	e7de      	b.n	8004a38 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8004a7a:	4b4d      	ldr	r3, [pc, #308]	; (8004bb0 <HAL_RCC_OscConfig+0x2b8>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004a80:	f7fe fca8 	bl	80033d4 <HAL_GetTick>
 8004a84:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a86:	4b49      	ldr	r3, [pc, #292]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f013 0f02 	tst.w	r3, #2
 8004a8e:	d0d3      	beq.n	8004a38 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a90:	f7fe fca0 	bl	80033d4 <HAL_GetTick>
 8004a94:	1b40      	subs	r0, r0, r5
 8004a96:	2802      	cmp	r0, #2
 8004a98:	d9f5      	bls.n	8004a86 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8004a9a:	2003      	movs	r0, #3
 8004a9c:	e0ef      	b.n	8004c7e <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a9e:	4b45      	ldr	r3, [pc, #276]	; (8004bb4 <HAL_RCC_OscConfig+0x2bc>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa4:	f7fe fc96 	bl	80033d4 <HAL_GetTick>
 8004aa8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aaa:	4b40      	ldr	r3, [pc, #256]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 8004aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aae:	f013 0f02 	tst.w	r3, #2
 8004ab2:	d006      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ab4:	f7fe fc8e 	bl	80033d4 <HAL_GetTick>
 8004ab8:	1b40      	subs	r0, r0, r5
 8004aba:	2802      	cmp	r0, #2
 8004abc:	d9f5      	bls.n	8004aaa <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8004abe:	2003      	movs	r0, #3
 8004ac0:	e0dd      	b.n	8004c7e <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	f013 0f04 	tst.w	r3, #4
 8004ac8:	d079      	beq.n	8004bbe <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aca:	4b38      	ldr	r3, [pc, #224]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004ad2:	d133      	bne.n	8004b3c <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9301      	str	r3, [sp, #4]
 8004ad8:	4b34      	ldr	r3, [pc, #208]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 8004ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004adc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004aec:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aee:	4b32      	ldr	r3, [pc, #200]	; (8004bb8 <HAL_RCC_OscConfig+0x2c0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004af6:	d023      	beq.n	8004b40 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af8:	68a3      	ldr	r3, [r4, #8]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d034      	beq.n	8004b68 <HAL_RCC_OscConfig+0x270>
 8004afe:	2b05      	cmp	r3, #5
 8004b00:	d038      	beq.n	8004b74 <HAL_RCC_OscConfig+0x27c>
 8004b02:	4b2a      	ldr	r3, [pc, #168]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 8004b04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b06:	f022 0201 	bic.w	r2, r2, #1
 8004b0a:	671a      	str	r2, [r3, #112]	; 0x70
 8004b0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b0e:	f022 0204 	bic.w	r2, r2, #4
 8004b12:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b14:	68a3      	ldr	r3, [r4, #8]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d036      	beq.n	8004b88 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1a:	f7fe fc5b 	bl	80033d4 <HAL_GetTick>
 8004b1e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b20:	4b22      	ldr	r3, [pc, #136]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 8004b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b24:	f013 0f02 	tst.w	r3, #2
 8004b28:	d148      	bne.n	8004bbc <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b2a:	f7fe fc53 	bl	80033d4 <HAL_GetTick>
 8004b2e:	1b80      	subs	r0, r0, r6
 8004b30:	f241 3388 	movw	r3, #5000	; 0x1388
 8004b34:	4298      	cmp	r0, r3
 8004b36:	d9f3      	bls.n	8004b20 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8004b38:	2003      	movs	r0, #3
 8004b3a:	e0a0      	b.n	8004c7e <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8004b3c:	2500      	movs	r5, #0
 8004b3e:	e7d6      	b.n	8004aee <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b40:	4a1d      	ldr	r2, [pc, #116]	; (8004bb8 <HAL_RCC_OscConfig+0x2c0>)
 8004b42:	6813      	ldr	r3, [r2, #0]
 8004b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b48:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004b4a:	f7fe fc43 	bl	80033d4 <HAL_GetTick>
 8004b4e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b50:	4b19      	ldr	r3, [pc, #100]	; (8004bb8 <HAL_RCC_OscConfig+0x2c0>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004b58:	d1ce      	bne.n	8004af8 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b5a:	f7fe fc3b 	bl	80033d4 <HAL_GetTick>
 8004b5e:	1b80      	subs	r0, r0, r6
 8004b60:	2802      	cmp	r0, #2
 8004b62:	d9f5      	bls.n	8004b50 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8004b64:	2003      	movs	r0, #3
 8004b66:	e08a      	b.n	8004c7e <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b68:	4a10      	ldr	r2, [pc, #64]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 8004b6a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004b6c:	f043 0301 	orr.w	r3, r3, #1
 8004b70:	6713      	str	r3, [r2, #112]	; 0x70
 8004b72:	e7cf      	b.n	8004b14 <HAL_RCC_OscConfig+0x21c>
 8004b74:	4b0d      	ldr	r3, [pc, #52]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 8004b76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b78:	f042 0204 	orr.w	r2, r2, #4
 8004b7c:	671a      	str	r2, [r3, #112]	; 0x70
 8004b7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b80:	f042 0201 	orr.w	r2, r2, #1
 8004b84:	671a      	str	r2, [r3, #112]	; 0x70
 8004b86:	e7c5      	b.n	8004b14 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b88:	f7fe fc24 	bl	80033d4 <HAL_GetTick>
 8004b8c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b8e:	4b07      	ldr	r3, [pc, #28]	; (8004bac <HAL_RCC_OscConfig+0x2b4>)
 8004b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b92:	f013 0f02 	tst.w	r3, #2
 8004b96:	d011      	beq.n	8004bbc <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b98:	f7fe fc1c 	bl	80033d4 <HAL_GetTick>
 8004b9c:	1b80      	subs	r0, r0, r6
 8004b9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ba2:	4298      	cmp	r0, r3
 8004ba4:	d9f3      	bls.n	8004b8e <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8004ba6:	2003      	movs	r0, #3
 8004ba8:	e069      	b.n	8004c7e <HAL_RCC_OscConfig+0x386>
 8004baa:	bf00      	nop
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	42470000 	.word	0x42470000
 8004bb4:	42470e80 	.word	0x42470e80
 8004bb8:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bbc:	b9e5      	cbnz	r5, 8004bf8 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bbe:	69a3      	ldr	r3, [r4, #24]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d05b      	beq.n	8004c7c <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bc4:	4a30      	ldr	r2, [pc, #192]	; (8004c88 <HAL_RCC_OscConfig+0x390>)
 8004bc6:	6892      	ldr	r2, [r2, #8]
 8004bc8:	f002 020c 	and.w	r2, r2, #12
 8004bcc:	2a08      	cmp	r2, #8
 8004bce:	d058      	beq.n	8004c82 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d017      	beq.n	8004c04 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd4:	4b2d      	ldr	r3, [pc, #180]	; (8004c8c <HAL_RCC_OscConfig+0x394>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bda:	f7fe fbfb 	bl	80033d4 <HAL_GetTick>
 8004bde:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be0:	4b29      	ldr	r3, [pc, #164]	; (8004c88 <HAL_RCC_OscConfig+0x390>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004be8:	d042      	beq.n	8004c70 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bea:	f7fe fbf3 	bl	80033d4 <HAL_GetTick>
 8004bee:	1b00      	subs	r0, r0, r4
 8004bf0:	2802      	cmp	r0, #2
 8004bf2:	d9f5      	bls.n	8004be0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004bf4:	2003      	movs	r0, #3
 8004bf6:	e042      	b.n	8004c7e <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bf8:	4a23      	ldr	r2, [pc, #140]	; (8004c88 <HAL_RCC_OscConfig+0x390>)
 8004bfa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c00:	6413      	str	r3, [r2, #64]	; 0x40
 8004c02:	e7dc      	b.n	8004bbe <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8004c04:	4b21      	ldr	r3, [pc, #132]	; (8004c8c <HAL_RCC_OscConfig+0x394>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004c0a:	f7fe fbe3 	bl	80033d4 <HAL_GetTick>
 8004c0e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c10:	4b1d      	ldr	r3, [pc, #116]	; (8004c88 <HAL_RCC_OscConfig+0x390>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004c18:	d006      	beq.n	8004c28 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c1a:	f7fe fbdb 	bl	80033d4 <HAL_GetTick>
 8004c1e:	1b40      	subs	r0, r0, r5
 8004c20:	2802      	cmp	r0, #2
 8004c22:	d9f5      	bls.n	8004c10 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8004c24:	2003      	movs	r0, #3
 8004c26:	e02a      	b.n	8004c7e <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c28:	69e3      	ldr	r3, [r4, #28]
 8004c2a:	6a22      	ldr	r2, [r4, #32]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004c30:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004c34:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004c36:	0852      	lsrs	r2, r2, #1
 8004c38:	3a01      	subs	r2, #1
 8004c3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004c40:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c44:	4a10      	ldr	r2, [pc, #64]	; (8004c88 <HAL_RCC_OscConfig+0x390>)
 8004c46:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004c48:	4b10      	ldr	r3, [pc, #64]	; (8004c8c <HAL_RCC_OscConfig+0x394>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004c4e:	f7fe fbc1 	bl	80033d4 <HAL_GetTick>
 8004c52:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c54:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <HAL_RCC_OscConfig+0x390>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004c5c:	d106      	bne.n	8004c6c <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c5e:	f7fe fbb9 	bl	80033d4 <HAL_GetTick>
 8004c62:	1b00      	subs	r0, r0, r4
 8004c64:	2802      	cmp	r0, #2
 8004c66:	d9f5      	bls.n	8004c54 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8004c68:	2003      	movs	r0, #3
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	e006      	b.n	8004c7e <HAL_RCC_OscConfig+0x386>
 8004c70:	2000      	movs	r0, #0
 8004c72:	e004      	b.n	8004c7e <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8004c74:	2001      	movs	r0, #1
}
 8004c76:	4770      	bx	lr
        return HAL_ERROR;
 8004c78:	2001      	movs	r0, #1
 8004c7a:	e000      	b.n	8004c7e <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8004c7c:	2000      	movs	r0, #0
}
 8004c7e:	b002      	add	sp, #8
 8004c80:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004c82:	2001      	movs	r0, #1
 8004c84:	e7fb      	b.n	8004c7e <HAL_RCC_OscConfig+0x386>
 8004c86:	bf00      	nop
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	42470060 	.word	0x42470060

08004c90 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c90:	4b32      	ldr	r3, [pc, #200]	; (8004d5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 030c 	and.w	r3, r3, #12
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d05c      	beq.n	8004d56 <HAL_RCC_GetSysClockFreq+0xc6>
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ca0:	482f      	ldr	r0, [pc, #188]	; (8004d60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ca2:	4770      	bx	lr
{
 8004ca4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ca8:	4b2c      	ldr	r3, [pc, #176]	; (8004d5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004cb6:	d02b      	beq.n	8004d10 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb8:	4b28      	ldr	r3, [pc, #160]	; (8004d5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004cc0:	461e      	mov	r6, r3
 8004cc2:	2700      	movs	r7, #0
 8004cc4:	015c      	lsls	r4, r3, #5
 8004cc6:	2500      	movs	r5, #0
 8004cc8:	1ae4      	subs	r4, r4, r3
 8004cca:	eb65 0507 	sbc.w	r5, r5, r7
 8004cce:	01a9      	lsls	r1, r5, #6
 8004cd0:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004cd4:	01a0      	lsls	r0, r4, #6
 8004cd6:	1b00      	subs	r0, r0, r4
 8004cd8:	eb61 0105 	sbc.w	r1, r1, r5
 8004cdc:	00cb      	lsls	r3, r1, #3
 8004cde:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004ce2:	00c4      	lsls	r4, r0, #3
 8004ce4:	19a0      	adds	r0, r4, r6
 8004ce6:	eb43 0107 	adc.w	r1, r3, r7
 8004cea:	024b      	lsls	r3, r1, #9
 8004cec:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8004cf0:	0244      	lsls	r4, r0, #9
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f7fb fe90 	bl	8000a1c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cfc:	4b17      	ldr	r3, [pc, #92]	; (8004d5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004d04:	3301      	adds	r3, #1
 8004d06:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004d08:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004d0c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d10:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004d18:	461e      	mov	r6, r3
 8004d1a:	2700      	movs	r7, #0
 8004d1c:	015c      	lsls	r4, r3, #5
 8004d1e:	2500      	movs	r5, #0
 8004d20:	1ae4      	subs	r4, r4, r3
 8004d22:	eb65 0507 	sbc.w	r5, r5, r7
 8004d26:	01a9      	lsls	r1, r5, #6
 8004d28:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004d2c:	01a0      	lsls	r0, r4, #6
 8004d2e:	1b00      	subs	r0, r0, r4
 8004d30:	eb61 0105 	sbc.w	r1, r1, r5
 8004d34:	00cb      	lsls	r3, r1, #3
 8004d36:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004d3a:	00c4      	lsls	r4, r0, #3
 8004d3c:	19a0      	adds	r0, r4, r6
 8004d3e:	eb43 0107 	adc.w	r1, r3, r7
 8004d42:	028b      	lsls	r3, r1, #10
 8004d44:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8004d48:	0284      	lsls	r4, r0, #10
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f7fb fe64 	bl	8000a1c <__aeabi_uldivmod>
 8004d54:	e7d2      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8004d56:	4803      	ldr	r0, [pc, #12]	; (8004d64 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	00f42400 	.word	0x00f42400
 8004d64:	007a1200 	.word	0x007a1200

08004d68 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	f000 809d 	beq.w	8004ea8 <HAL_RCC_ClockConfig+0x140>
{
 8004d6e:	b570      	push	{r4, r5, r6, lr}
 8004d70:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d72:	4b4f      	ldr	r3, [pc, #316]	; (8004eb0 <HAL_RCC_ClockConfig+0x148>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	428b      	cmp	r3, r1
 8004d7c:	d209      	bcs.n	8004d92 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d7e:	b2cb      	uxtb	r3, r1
 8004d80:	4a4b      	ldr	r2, [pc, #300]	; (8004eb0 <HAL_RCC_ClockConfig+0x148>)
 8004d82:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d84:	6813      	ldr	r3, [r2, #0]
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	428b      	cmp	r3, r1
 8004d8c:	d001      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8004d8e:	2001      	movs	r0, #1
}
 8004d90:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	f013 0f02 	tst.w	r3, #2
 8004d98:	d017      	beq.n	8004dca <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d9a:	f013 0f04 	tst.w	r3, #4
 8004d9e:	d004      	beq.n	8004daa <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004da0:	4a44      	ldr	r2, [pc, #272]	; (8004eb4 <HAL_RCC_ClockConfig+0x14c>)
 8004da2:	6893      	ldr	r3, [r2, #8]
 8004da4:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004da8:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	f013 0f08 	tst.w	r3, #8
 8004db0:	d004      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004db2:	4a40      	ldr	r2, [pc, #256]	; (8004eb4 <HAL_RCC_ClockConfig+0x14c>)
 8004db4:	6893      	ldr	r3, [r2, #8]
 8004db6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dba:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dbc:	4a3d      	ldr	r2, [pc, #244]	; (8004eb4 <HAL_RCC_ClockConfig+0x14c>)
 8004dbe:	6893      	ldr	r3, [r2, #8]
 8004dc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dc4:	68a0      	ldr	r0, [r4, #8]
 8004dc6:	4303      	orrs	r3, r0
 8004dc8:	6093      	str	r3, [r2, #8]
 8004dca:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	f013 0f01 	tst.w	r3, #1
 8004dd2:	d032      	beq.n	8004e3a <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd4:	6863      	ldr	r3, [r4, #4]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d021      	beq.n	8004e1e <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dda:	1e9a      	subs	r2, r3, #2
 8004ddc:	2a01      	cmp	r2, #1
 8004dde:	d925      	bls.n	8004e2c <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de0:	4a34      	ldr	r2, [pc, #208]	; (8004eb4 <HAL_RCC_ClockConfig+0x14c>)
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	f012 0f02 	tst.w	r2, #2
 8004de8:	d060      	beq.n	8004eac <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dea:	4932      	ldr	r1, [pc, #200]	; (8004eb4 <HAL_RCC_ClockConfig+0x14c>)
 8004dec:	688a      	ldr	r2, [r1, #8]
 8004dee:	f022 0203 	bic.w	r2, r2, #3
 8004df2:	4313      	orrs	r3, r2
 8004df4:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004df6:	f7fe faed 	bl	80033d4 <HAL_GetTick>
 8004dfa:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dfc:	4b2d      	ldr	r3, [pc, #180]	; (8004eb4 <HAL_RCC_ClockConfig+0x14c>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 030c 	and.w	r3, r3, #12
 8004e04:	6862      	ldr	r2, [r4, #4]
 8004e06:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004e0a:	d016      	beq.n	8004e3a <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e0c:	f7fe fae2 	bl	80033d4 <HAL_GetTick>
 8004e10:	1b80      	subs	r0, r0, r6
 8004e12:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e16:	4298      	cmp	r0, r3
 8004e18:	d9f0      	bls.n	8004dfc <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8004e1a:	2003      	movs	r0, #3
 8004e1c:	e7b8      	b.n	8004d90 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1e:	4a25      	ldr	r2, [pc, #148]	; (8004eb4 <HAL_RCC_ClockConfig+0x14c>)
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004e26:	d1e0      	bne.n	8004dea <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8004e28:	2001      	movs	r0, #1
 8004e2a:	e7b1      	b.n	8004d90 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2c:	4a21      	ldr	r2, [pc, #132]	; (8004eb4 <HAL_RCC_ClockConfig+0x14c>)
 8004e2e:	6812      	ldr	r2, [r2, #0]
 8004e30:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004e34:	d1d9      	bne.n	8004dea <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8004e36:	2001      	movs	r0, #1
 8004e38:	e7aa      	b.n	8004d90 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e3a:	4b1d      	ldr	r3, [pc, #116]	; (8004eb0 <HAL_RCC_ClockConfig+0x148>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	42ab      	cmp	r3, r5
 8004e44:	d909      	bls.n	8004e5a <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e46:	b2ea      	uxtb	r2, r5
 8004e48:	4b19      	ldr	r3, [pc, #100]	; (8004eb0 <HAL_RCC_ClockConfig+0x148>)
 8004e4a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	42ab      	cmp	r3, r5
 8004e54:	d001      	beq.n	8004e5a <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8004e56:	2001      	movs	r0, #1
 8004e58:	e79a      	b.n	8004d90 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e5a:	6823      	ldr	r3, [r4, #0]
 8004e5c:	f013 0f04 	tst.w	r3, #4
 8004e60:	d006      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e62:	4a14      	ldr	r2, [pc, #80]	; (8004eb4 <HAL_RCC_ClockConfig+0x14c>)
 8004e64:	6893      	ldr	r3, [r2, #8]
 8004e66:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004e6a:	68e1      	ldr	r1, [r4, #12]
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	f013 0f08 	tst.w	r3, #8
 8004e76:	d007      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e78:	4a0e      	ldr	r2, [pc, #56]	; (8004eb4 <HAL_RCC_ClockConfig+0x14c>)
 8004e7a:	6893      	ldr	r3, [r2, #8]
 8004e7c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004e80:	6921      	ldr	r1, [r4, #16]
 8004e82:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004e86:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e88:	f7ff ff02 	bl	8004c90 <HAL_RCC_GetSysClockFreq>
 8004e8c:	4b09      	ldr	r3, [pc, #36]	; (8004eb4 <HAL_RCC_ClockConfig+0x14c>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004e94:	4a08      	ldr	r2, [pc, #32]	; (8004eb8 <HAL_RCC_ClockConfig+0x150>)
 8004e96:	5cd3      	ldrb	r3, [r2, r3]
 8004e98:	40d8      	lsrs	r0, r3
 8004e9a:	4b08      	ldr	r3, [pc, #32]	; (8004ebc <HAL_RCC_ClockConfig+0x154>)
 8004e9c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	f7fe fa4c 	bl	800333c <HAL_InitTick>
  return HAL_OK;
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	e773      	b.n	8004d90 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004ea8:	2001      	movs	r0, #1
}
 8004eaa:	4770      	bx	lr
        return HAL_ERROR;
 8004eac:	2001      	movs	r0, #1
 8004eae:	e76f      	b.n	8004d90 <HAL_RCC_ClockConfig+0x28>
 8004eb0:	40023c00 	.word	0x40023c00
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	0800bdfc 	.word	0x0800bdfc
 8004ebc:	20000060 	.word	0x20000060

08004ec0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004ec0:	4b01      	ldr	r3, [pc, #4]	; (8004ec8 <HAL_RCC_GetHCLKFreq+0x8>)
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	20000060 	.word	0x20000060

08004ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ecc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ece:	f7ff fff7 	bl	8004ec0 <HAL_RCC_GetHCLKFreq>
 8004ed2:	4b04      	ldr	r3, [pc, #16]	; (8004ee4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004eda:	4a03      	ldr	r2, [pc, #12]	; (8004ee8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004edc:	5cd3      	ldrb	r3, [r2, r3]
}
 8004ede:	40d8      	lsrs	r0, r3
 8004ee0:	bd08      	pop	{r3, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	0800be0c 	.word	0x0800be0c

08004eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eec:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004eee:	f7ff ffe7 	bl	8004ec0 <HAL_RCC_GetHCLKFreq>
 8004ef2:	4b04      	ldr	r3, [pc, #16]	; (8004f04 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004efa:	4a03      	ldr	r2, [pc, #12]	; (8004f08 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004efc:	5cd3      	ldrb	r3, [r2, r3]
}
 8004efe:	40d8      	lsrs	r0, r3
 8004f00:	bd08      	pop	{r3, pc}
 8004f02:	bf00      	nop
 8004f04:	40023800 	.word	0x40023800
 8004f08:	0800be0c 	.word	0x0800be0c

08004f0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0e:	4605      	mov	r5, r0
 8004f10:	460f      	mov	r7, r1
 8004f12:	4616      	mov	r6, r2
 8004f14:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f16:	682b      	ldr	r3, [r5, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	ea37 0303 	bics.w	r3, r7, r3
 8004f1e:	bf0c      	ite	eq
 8004f20:	2301      	moveq	r3, #1
 8004f22:	2300      	movne	r3, #0
 8004f24:	42b3      	cmp	r3, r6
 8004f26:	d037      	beq.n	8004f98 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f28:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004f2c:	d0f3      	beq.n	8004f16 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004f2e:	f7fe fa51 	bl	80033d4 <HAL_GetTick>
 8004f32:	9b06      	ldr	r3, [sp, #24]
 8004f34:	1ac0      	subs	r0, r0, r3
 8004f36:	42a0      	cmp	r0, r4
 8004f38:	d201      	bcs.n	8004f3e <SPI_WaitFlagStateUntilTimeout+0x32>
 8004f3a:	2c00      	cmp	r4, #0
 8004f3c:	d1eb      	bne.n	8004f16 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f3e:	682a      	ldr	r2, [r5, #0]
 8004f40:	6853      	ldr	r3, [r2, #4]
 8004f42:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004f46:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f48:	686b      	ldr	r3, [r5, #4]
 8004f4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f4e:	d00b      	beq.n	8004f68 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f50:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f56:	d014      	beq.n	8004f82 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f64:	2003      	movs	r0, #3
 8004f66:	e018      	b.n	8004f9a <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f68:	68ab      	ldr	r3, [r5, #8]
 8004f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f6e:	d002      	beq.n	8004f76 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f74:	d1ec      	bne.n	8004f50 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8004f76:	682a      	ldr	r2, [r5, #0]
 8004f78:	6813      	ldr	r3, [r2, #0]
 8004f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	e7e6      	b.n	8004f50 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8004f82:	682a      	ldr	r2, [r5, #0]
 8004f84:	6813      	ldr	r3, [r2, #0]
 8004f86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	682a      	ldr	r2, [r5, #0]
 8004f8e:	6813      	ldr	r3, [r2, #0]
 8004f90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	e7df      	b.n	8004f58 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8004f98:	2000      	movs	r0, #0
}
 8004f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004f9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f9c:	b530      	push	{r4, r5, lr}
 8004f9e:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fa0:	4c16      	ldr	r4, [pc, #88]	; (8004ffc <SPI_EndRxTxTransaction+0x60>)
 8004fa2:	6824      	ldr	r4, [r4, #0]
 8004fa4:	4d16      	ldr	r5, [pc, #88]	; (8005000 <SPI_EndRxTxTransaction+0x64>)
 8004fa6:	fba5 3404 	umull	r3, r4, r5, r4
 8004faa:	0d64      	lsrs	r4, r4, #21
 8004fac:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8004fb0:	fb05 f404 	mul.w	r4, r5, r4
 8004fb4:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fb6:	6844      	ldr	r4, [r0, #4]
 8004fb8:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8004fbc:	d00b      	beq.n	8004fd6 <SPI_EndRxTxTransaction+0x3a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004fbe:	9b03      	ldr	r3, [sp, #12]
 8004fc0:	b1c3      	cbz	r3, 8004ff4 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8004fc2:	9b03      	ldr	r3, [sp, #12]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fc8:	6803      	ldr	r3, [r0, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004fd0:	d1f5      	bne.n	8004fbe <SPI_EndRxTxTransaction+0x22>
  }

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e00f      	b.n	8004ff6 <SPI_EndRxTxTransaction+0x5a>
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fda:	9200      	str	r2, [sp, #0]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2180      	movs	r1, #128	; 0x80
 8004fe0:	f7ff ff94 	bl	8004f0c <SPI_WaitFlagStateUntilTimeout>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	b130      	cbz	r0, 8004ff6 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fe8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004fea:	f043 0320 	orr.w	r3, r3, #32
 8004fee:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e000      	b.n	8004ff6 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	b005      	add	sp, #20
 8004ffa:	bd30      	pop	{r4, r5, pc}
 8004ffc:	20000060 	.word	0x20000060
 8005000:	165e9f81 	.word	0x165e9f81

08005004 <SPI_EndRxTransaction>:
{
 8005004:	b510      	push	{r4, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800500a:	6840      	ldr	r0, [r0, #4]
 800500c:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8005010:	d016      	beq.n	8005040 <SPI_EndRxTransaction+0x3c>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005012:	6860      	ldr	r0, [r4, #4]
 8005014:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8005018:	d12e      	bne.n	8005078 <SPI_EndRxTransaction+0x74>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800501a:	68a3      	ldr	r3, [r4, #8]
 800501c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005020:	d01b      	beq.n	800505a <SPI_EndRxTransaction+0x56>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005022:	9200      	str	r2, [sp, #0]
 8005024:	460b      	mov	r3, r1
 8005026:	2200      	movs	r2, #0
 8005028:	2180      	movs	r1, #128	; 0x80
 800502a:	4620      	mov	r0, r4
 800502c:	f7ff ff6e 	bl	8004f0c <SPI_WaitFlagStateUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	b350      	cbz	r0, 800508a <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005034:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005036:	f043 0320 	orr.w	r3, r3, #32
 800503a:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e024      	b.n	800508a <SPI_EndRxTransaction+0x86>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005040:	68a3      	ldr	r3, [r4, #8]
 8005042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005046:	d002      	beq.n	800504e <SPI_EndRxTransaction+0x4a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504c:	d1e1      	bne.n	8005012 <SPI_EndRxTransaction+0xe>
    __HAL_SPI_DISABLE(hspi);
 800504e:	6820      	ldr	r0, [r4, #0]
 8005050:	6803      	ldr	r3, [r0, #0]
 8005052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005056:	6003      	str	r3, [r0, #0]
 8005058:	e7db      	b.n	8005012 <SPI_EndRxTransaction+0xe>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800505a:	9200      	str	r2, [sp, #0]
 800505c:	460b      	mov	r3, r1
 800505e:	2200      	movs	r2, #0
 8005060:	2101      	movs	r1, #1
 8005062:	4620      	mov	r0, r4
 8005064:	f7ff ff52 	bl	8004f0c <SPI_WaitFlagStateUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	b170      	cbz	r0, 800508a <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800506c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800506e:	f043 0320 	orr.w	r3, r3, #32
 8005072:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e008      	b.n	800508a <SPI_EndRxTransaction+0x86>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005078:	9200      	str	r2, [sp, #0]
 800507a:	460b      	mov	r3, r1
 800507c:	2200      	movs	r2, #0
 800507e:	2101      	movs	r1, #1
 8005080:	4620      	mov	r0, r4
 8005082:	f7ff ff43 	bl	8004f0c <SPI_WaitFlagStateUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	b910      	cbnz	r0, 8005090 <SPI_EndRxTransaction+0x8c>
}
 800508a:	4618      	mov	r0, r3
 800508c:	b002      	add	sp, #8
 800508e:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005090:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005092:	f043 0320 	orr.w	r3, r3, #32
 8005096:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e7f6      	b.n	800508a <SPI_EndRxTransaction+0x86>

0800509c <HAL_SPI_Init>:
  if (hspi == NULL)
 800509c:	2800      	cmp	r0, #0
 800509e:	d03b      	beq.n	8005118 <HAL_SPI_Init+0x7c>
{
 80050a0:	b510      	push	{r4, lr}
 80050a2:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050a4:	2300      	movs	r3, #0
 80050a6:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80050a8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d02e      	beq.n	800510e <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 80050b0:	2302      	movs	r3, #2
 80050b2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80050b6:	6822      	ldr	r2, [r4, #0]
 80050b8:	6813      	ldr	r3, [r2, #0]
 80050ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050be:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80050c0:	6863      	ldr	r3, [r4, #4]
 80050c2:	68a2      	ldr	r2, [r4, #8]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	68e2      	ldr	r2, [r4, #12]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	6922      	ldr	r2, [r4, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	6962      	ldr	r2, [r4, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	69a2      	ldr	r2, [r4, #24]
 80050d4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80050d8:	4313      	orrs	r3, r2
 80050da:	69e2      	ldr	r2, [r4, #28]
 80050dc:	4313      	orrs	r3, r2
 80050de:	6a22      	ldr	r2, [r4, #32]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80050e4:	6822      	ldr	r2, [r4, #0]
 80050e6:	430b      	orrs	r3, r1
 80050e8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80050ea:	8b63      	ldrh	r3, [r4, #26]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80050f2:	6822      	ldr	r2, [r4, #0]
 80050f4:	430b      	orrs	r3, r1
 80050f6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050f8:	6822      	ldr	r2, [r4, #0]
 80050fa:	69d3      	ldr	r3, [r2, #28]
 80050fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005100:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005102:	2000      	movs	r0, #0
 8005104:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005106:	2301      	movs	r3, #1
 8005108:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800510c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800510e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8005112:	f001 fd97 	bl	8006c44 <HAL_SPI_MspInit>
 8005116:	e7cb      	b.n	80050b0 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8005118:	2001      	movs	r0, #1
}
 800511a:	4770      	bx	lr

0800511c <HAL_SPI_Transmit>:
{
 800511c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005120:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8005122:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8005126:	2c01      	cmp	r4, #1
 8005128:	f000 80c3 	beq.w	80052b2 <HAL_SPI_Transmit+0x196>
 800512c:	461d      	mov	r5, r3
 800512e:	4617      	mov	r7, r2
 8005130:	4688      	mov	r8, r1
 8005132:	4604      	mov	r4, r0
 8005134:	2301      	movs	r3, #1
 8005136:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800513a:	f7fe f94b 	bl	80033d4 <HAL_GetTick>
 800513e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005140:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b01      	cmp	r3, #1
 8005148:	d009      	beq.n	800515e <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 800514a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800514c:	2301      	movs	r3, #1
 800514e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005152:	2300      	movs	r3, #0
 8005154:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005158:	b002      	add	sp, #8
 800515a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800515e:	f1b8 0f00 	cmp.w	r8, #0
 8005162:	f000 8098 	beq.w	8005296 <HAL_SPI_Transmit+0x17a>
 8005166:	2f00      	cmp	r7, #0
 8005168:	f000 8097 	beq.w	800529a <HAL_SPI_Transmit+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800516c:	2303      	movs	r3, #3
 800516e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005172:	2300      	movs	r3, #0
 8005174:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005176:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800517a:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 800517c:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800517e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005180:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005182:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005184:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005186:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005188:	68a3      	ldr	r3, [r4, #8]
 800518a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800518e:	d01c      	beq.n	80051ca <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005198:	d103      	bne.n	80051a2 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051a0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051a2:	68e3      	ldr	r3, [r4, #12]
 80051a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051a8:	d015      	beq.n	80051d6 <HAL_SPI_Transmit+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051aa:	6863      	ldr	r3, [r4, #4]
 80051ac:	b10b      	cbz	r3, 80051b2 <HAL_SPI_Transmit+0x96>
 80051ae:	2f01      	cmp	r7, #1
 80051b0:	d149      	bne.n	8005246 <HAL_SPI_Transmit+0x12a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	7812      	ldrb	r2, [r2, #0]
 80051b8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80051bc:	3301      	adds	r3, #1
 80051be:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80051c0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	86e3      	strh	r3, [r4, #54]	; 0x36
 80051c8:	e03d      	b.n	8005246 <HAL_SPI_Transmit+0x12a>
    SPI_1LINE_TX(hspi);
 80051ca:	6822      	ldr	r2, [r4, #0]
 80051cc:	6813      	ldr	r3, [r2, #0]
 80051ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	e7dc      	b.n	8005190 <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051d6:	6863      	ldr	r3, [r4, #4]
 80051d8:	b10b      	cbz	r3, 80051de <HAL_SPI_Transmit+0xc2>
 80051da:	2f01      	cmp	r7, #1
 80051dc:	d115      	bne.n	800520a <HAL_SPI_Transmit+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051de:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	8812      	ldrh	r2, [r2, #0]
 80051e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80051e8:	3302      	adds	r3, #2
 80051ea:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80051ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	86e3      	strh	r3, [r4, #54]	; 0x36
 80051f4:	e009      	b.n	800520a <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051f6:	f7fe f8ed 	bl	80033d4 <HAL_GetTick>
 80051fa:	1b80      	subs	r0, r0, r6
 80051fc:	42a8      	cmp	r0, r5
 80051fe:	d302      	bcc.n	8005206 <HAL_SPI_Transmit+0xea>
 8005200:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005204:	d14b      	bne.n	800529e <HAL_SPI_Transmit+0x182>
 8005206:	2d00      	cmp	r5, #0
 8005208:	d04b      	beq.n	80052a2 <HAL_SPI_Transmit+0x186>
    while (hspi->TxXferCount > 0U)
 800520a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d02c      	beq.n	800526c <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	689a      	ldr	r2, [r3, #8]
 8005216:	f012 0f02 	tst.w	r2, #2
 800521a:	d0ec      	beq.n	80051f6 <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800521c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800521e:	8812      	ldrh	r2, [r2, #0]
 8005220:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005222:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005224:	3302      	adds	r3, #2
 8005226:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005228:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800522a:	3b01      	subs	r3, #1
 800522c:	b29b      	uxth	r3, r3
 800522e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8005230:	e7eb      	b.n	800520a <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005232:	f7fe f8cf 	bl	80033d4 <HAL_GetTick>
 8005236:	1b80      	subs	r0, r0, r6
 8005238:	42a8      	cmp	r0, r5
 800523a:	d302      	bcc.n	8005242 <HAL_SPI_Transmit+0x126>
 800523c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005240:	d131      	bne.n	80052a6 <HAL_SPI_Transmit+0x18a>
 8005242:	2d00      	cmp	r5, #0
 8005244:	d031      	beq.n	80052aa <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 8005246:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005248:	b29b      	uxth	r3, r3
 800524a:	b17b      	cbz	r3, 800526c <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	f012 0f02 	tst.w	r2, #2
 8005254:	d0ed      	beq.n	8005232 <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005256:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005258:	7812      	ldrb	r2, [r2, #0]
 800525a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800525c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800525e:	3301      	adds	r3, #1
 8005260:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005262:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005264:	3b01      	subs	r3, #1
 8005266:	b29b      	uxth	r3, r3
 8005268:	86e3      	strh	r3, [r4, #54]	; 0x36
 800526a:	e7ec      	b.n	8005246 <HAL_SPI_Transmit+0x12a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800526c:	4632      	mov	r2, r6
 800526e:	4629      	mov	r1, r5
 8005270:	4620      	mov	r0, r4
 8005272:	f7ff fe93 	bl	8004f9c <SPI_EndRxTxTransaction>
 8005276:	b108      	cbz	r0, 800527c <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005278:	2320      	movs	r3, #32
 800527a:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800527c:	68a3      	ldr	r3, [r4, #8]
 800527e:	b933      	cbnz	r3, 800528e <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005280:	9301      	str	r3, [sp, #4]
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	9201      	str	r2, [sp, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	9301      	str	r3, [sp, #4]
 800528c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800528e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005290:	b96b      	cbnz	r3, 80052ae <HAL_SPI_Transmit+0x192>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005292:	2000      	movs	r0, #0
 8005294:	e75a      	b.n	800514c <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8005296:	2001      	movs	r0, #1
 8005298:	e758      	b.n	800514c <HAL_SPI_Transmit+0x30>
 800529a:	2001      	movs	r0, #1
 800529c:	e756      	b.n	800514c <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 800529e:	2003      	movs	r0, #3
 80052a0:	e754      	b.n	800514c <HAL_SPI_Transmit+0x30>
 80052a2:	2003      	movs	r0, #3
 80052a4:	e752      	b.n	800514c <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 80052a6:	2003      	movs	r0, #3
 80052a8:	e750      	b.n	800514c <HAL_SPI_Transmit+0x30>
 80052aa:	2003      	movs	r0, #3
 80052ac:	e74e      	b.n	800514c <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 80052ae:	2001      	movs	r0, #1
 80052b0:	e74c      	b.n	800514c <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 80052b2:	2002      	movs	r0, #2
 80052b4:	e750      	b.n	8005158 <HAL_SPI_Transmit+0x3c>

080052b6 <HAL_SPI_TransmitReceive>:
{
 80052b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052ba:	b083      	sub	sp, #12
 80052bc:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80052c0:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 80052c4:	2c01      	cmp	r4, #1
 80052c6:	f000 810b 	beq.w	80054e0 <HAL_SPI_TransmitReceive+0x22a>
 80052ca:	461d      	mov	r5, r3
 80052cc:	4617      	mov	r7, r2
 80052ce:	460e      	mov	r6, r1
 80052d0:	4604      	mov	r4, r0
 80052d2:	2301      	movs	r3, #1
 80052d4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80052d8:	f7fe f87c 	bl	80033d4 <HAL_GetTick>
 80052dc:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 80052de:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 80052e2:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 80052e4:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80052e6:	2801      	cmp	r0, #1
 80052e8:	d015      	beq.n	8005316 <HAL_SPI_TransmitReceive+0x60>
 80052ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ee:	d00a      	beq.n	8005306 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 80052f0:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 80052f2:	2201      	movs	r2, #1
 80052f4:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052f8:	2200      	movs	r2, #0
 80052fa:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 80052fe:	4618      	mov	r0, r3
 8005300:	b003      	add	sp, #12
 8005302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005306:	68a3      	ldr	r3, [r4, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	f040 80db 	bne.w	80054c4 <HAL_SPI_TransmitReceive+0x20e>
 800530e:	2804      	cmp	r0, #4
 8005310:	d001      	beq.n	8005316 <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 8005312:	2302      	movs	r3, #2
 8005314:	e7ed      	b.n	80052f2 <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005316:	2e00      	cmp	r6, #0
 8005318:	f000 80d6 	beq.w	80054c8 <HAL_SPI_TransmitReceive+0x212>
 800531c:	2f00      	cmp	r7, #0
 800531e:	f000 80d5 	beq.w	80054cc <HAL_SPI_TransmitReceive+0x216>
 8005322:	2d00      	cmp	r5, #0
 8005324:	f000 80d4 	beq.w	80054d0 <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005328:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b04      	cmp	r3, #4
 8005330:	d002      	beq.n	8005338 <HAL_SPI_TransmitReceive+0x82>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005332:	2305      	movs	r3, #5
 8005334:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005338:	2300      	movs	r3, #0
 800533a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800533c:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 800533e:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005340:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005342:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005344:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005346:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8005348:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800534a:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005354:	d103      	bne.n	800535e <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800535c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800535e:	68e3      	ldr	r3, [r4, #12]
 8005360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005364:	d010      	beq.n	8005388 <HAL_SPI_TransmitReceive+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005366:	6863      	ldr	r3, [r4, #4]
 8005368:	b10b      	cbz	r3, 800536e <HAL_SPI_TransmitReceive+0xb8>
 800536a:	2d01      	cmp	r5, #1
 800536c:	d10a      	bne.n	8005384 <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800536e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005370:	6823      	ldr	r3, [r4, #0]
 8005372:	7812      	ldrb	r2, [r2, #0]
 8005374:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005376:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005378:	3301      	adds	r3, #1
 800537a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800537c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800537e:	3b01      	subs	r3, #1
 8005380:	b29b      	uxth	r3, r3
 8005382:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8005384:	2501      	movs	r5, #1
 8005386:	e069      	b.n	800545c <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005388:	6863      	ldr	r3, [r4, #4]
 800538a:	b10b      	cbz	r3, 8005390 <HAL_SPI_TransmitReceive+0xda>
 800538c:	2d01      	cmp	r5, #1
 800538e:	d10a      	bne.n	80053a6 <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005390:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	8812      	ldrh	r2, [r2, #0]
 8005396:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005398:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800539a:	3302      	adds	r3, #2
 800539c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800539e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80053a6:	2501      	movs	r5, #1
 80053a8:	e01b      	b.n	80053e2 <HAL_SPI_TransmitReceive+0x12c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	f012 0f01 	tst.w	r2, #1
 80053b2:	d00d      	beq.n	80053d0 <HAL_SPI_TransmitReceive+0x11a>
 80053b4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80053b6:	b292      	uxth	r2, r2
 80053b8:	b152      	cbz	r2, 80053d0 <HAL_SPI_TransmitReceive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053c2:	3302      	adds	r3, #2
 80053c4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80053c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80053ce:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053d0:	f7fe f800 	bl	80033d4 <HAL_GetTick>
 80053d4:	eba0 0009 	sub.w	r0, r0, r9
 80053d8:	4540      	cmp	r0, r8
 80053da:	d302      	bcc.n	80053e2 <HAL_SPI_TransmitReceive+0x12c>
 80053dc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80053e0:	d178      	bne.n	80054d4 <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053e2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	b91b      	cbnz	r3, 80053f0 <HAL_SPI_TransmitReceive+0x13a>
 80053e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d052      	beq.n	8005496 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	f012 0f02 	tst.w	r2, #2
 80053f8:	d0d7      	beq.n	80053aa <HAL_SPI_TransmitReceive+0xf4>
 80053fa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80053fc:	b292      	uxth	r2, r2
 80053fe:	2a00      	cmp	r2, #0
 8005400:	d0d3      	beq.n	80053aa <HAL_SPI_TransmitReceive+0xf4>
 8005402:	2d00      	cmp	r5, #0
 8005404:	d0d1      	beq.n	80053aa <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005406:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005408:	8812      	ldrh	r2, [r2, #0]
 800540a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800540c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800540e:	3302      	adds	r3, #2
 8005410:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005412:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005414:	3b01      	subs	r3, #1
 8005416:	b29b      	uxth	r3, r3
 8005418:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800541a:	2500      	movs	r5, #0
 800541c:	e7c5      	b.n	80053aa <HAL_SPI_TransmitReceive+0xf4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	f012 0f01 	tst.w	r2, #1
 8005426:	d00d      	beq.n	8005444 <HAL_SPI_TransmitReceive+0x18e>
 8005428:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800542a:	b292      	uxth	r2, r2
 800542c:	b152      	cbz	r2, 8005444 <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005432:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005434:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005436:	3301      	adds	r3, #1
 8005438:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800543a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800543c:	3b01      	subs	r3, #1
 800543e:	b29b      	uxth	r3, r3
 8005440:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005442:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005444:	f7fd ffc6 	bl	80033d4 <HAL_GetTick>
 8005448:	eba0 0009 	sub.w	r0, r0, r9
 800544c:	4540      	cmp	r0, r8
 800544e:	d302      	bcc.n	8005456 <HAL_SPI_TransmitReceive+0x1a0>
 8005450:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8005454:	d140      	bne.n	80054d8 <HAL_SPI_TransmitReceive+0x222>
 8005456:	f1b8 0f00 	cmp.w	r8, #0
 800545a:	d03f      	beq.n	80054dc <HAL_SPI_TransmitReceive+0x226>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800545c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800545e:	b29b      	uxth	r3, r3
 8005460:	b913      	cbnz	r3, 8005468 <HAL_SPI_TransmitReceive+0x1b2>
 8005462:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005464:	b29b      	uxth	r3, r3
 8005466:	b1b3      	cbz	r3, 8005496 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	f012 0f02 	tst.w	r2, #2
 8005470:	d0d5      	beq.n	800541e <HAL_SPI_TransmitReceive+0x168>
 8005472:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005474:	b292      	uxth	r2, r2
 8005476:	2a00      	cmp	r2, #0
 8005478:	d0d1      	beq.n	800541e <HAL_SPI_TransmitReceive+0x168>
 800547a:	2d00      	cmp	r5, #0
 800547c:	d0cf      	beq.n	800541e <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800547e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005480:	7812      	ldrb	r2, [r2, #0]
 8005482:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005484:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005486:	3301      	adds	r3, #1
 8005488:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800548a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800548c:	3b01      	subs	r3, #1
 800548e:	b29b      	uxth	r3, r3
 8005490:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8005492:	2500      	movs	r5, #0
 8005494:	e7c3      	b.n	800541e <HAL_SPI_TransmitReceive+0x168>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005496:	464a      	mov	r2, r9
 8005498:	4641      	mov	r1, r8
 800549a:	4620      	mov	r0, r4
 800549c:	f7ff fd7e 	bl	8004f9c <SPI_EndRxTxTransaction>
 80054a0:	4603      	mov	r3, r0
 80054a2:	b118      	cbz	r0, 80054ac <HAL_SPI_TransmitReceive+0x1f6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054a4:	2320      	movs	r3, #32
 80054a6:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
    goto error;
 80054aa:	e722      	b.n	80052f2 <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054ac:	68a2      	ldr	r2, [r4, #8]
 80054ae:	2a00      	cmp	r2, #0
 80054b0:	f47f af1f 	bne.w	80052f2 <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054b4:	9201      	str	r2, [sp, #4]
 80054b6:	6822      	ldr	r2, [r4, #0]
 80054b8:	68d1      	ldr	r1, [r2, #12]
 80054ba:	9101      	str	r1, [sp, #4]
 80054bc:	6892      	ldr	r2, [r2, #8]
 80054be:	9201      	str	r2, [sp, #4]
 80054c0:	9a01      	ldr	r2, [sp, #4]
 80054c2:	e716      	b.n	80052f2 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 80054c4:	2302      	movs	r3, #2
 80054c6:	e714      	b.n	80052f2 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e712      	b.n	80052f2 <HAL_SPI_TransmitReceive+0x3c>
 80054cc:	2301      	movs	r3, #1
 80054ce:	e710      	b.n	80052f2 <HAL_SPI_TransmitReceive+0x3c>
 80054d0:	2301      	movs	r3, #1
 80054d2:	e70e      	b.n	80052f2 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e70c      	b.n	80052f2 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e70a      	b.n	80052f2 <HAL_SPI_TransmitReceive+0x3c>
 80054dc:	2303      	movs	r3, #3
 80054de:	e708      	b.n	80052f2 <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 80054e0:	2302      	movs	r3, #2
 80054e2:	e70c      	b.n	80052fe <HAL_SPI_TransmitReceive+0x48>

080054e4 <HAL_SPI_Receive>:
{
 80054e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e8:	b082      	sub	sp, #8
 80054ea:	4604      	mov	r4, r0
 80054ec:	460f      	mov	r7, r1
 80054ee:	4690      	mov	r8, r2
 80054f0:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054f2:	6843      	ldr	r3, [r0, #4]
 80054f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054f8:	d019      	beq.n	800552e <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 80054fa:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80054fe:	2b01      	cmp	r3, #1
 8005500:	f000 809f 	beq.w	8005642 <HAL_SPI_Receive+0x15e>
 8005504:	2301      	movs	r3, #1
 8005506:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800550a:	f7fd ff63 	bl	80033d4 <HAL_GetTick>
 800550e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005510:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b01      	cmp	r3, #1
 8005518:	d015      	beq.n	8005546 <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 800551a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800551c:	2301      	movs	r3, #1
 800551e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005522:	2300      	movs	r3, #0
 8005524:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005528:	b002      	add	sp, #8
 800552a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800552e:	6883      	ldr	r3, [r0, #8]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1e2      	bne.n	80054fa <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005534:	2304      	movs	r3, #4
 8005536:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800553a:	9500      	str	r5, [sp, #0]
 800553c:	4613      	mov	r3, r2
 800553e:	460a      	mov	r2, r1
 8005540:	f7ff feb9 	bl	80052b6 <HAL_SPI_TransmitReceive>
 8005544:	e7f0      	b.n	8005528 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 8005546:	2f00      	cmp	r7, #0
 8005548:	d06d      	beq.n	8005626 <HAL_SPI_Receive+0x142>
 800554a:	f1b8 0f00 	cmp.w	r8, #0
 800554e:	d06c      	beq.n	800562a <HAL_SPI_Receive+0x146>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005550:	2304      	movs	r3, #4
 8005552:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005556:	2300      	movs	r3, #0
 8005558:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800555a:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800555c:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005560:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005564:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005566:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005568:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 800556a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800556c:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800556e:	68a3      	ldr	r3, [r4, #8]
 8005570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005574:	d00b      	beq.n	800558e <HAL_SPI_Receive+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800557e:	d103      	bne.n	8005588 <HAL_SPI_Receive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005586:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005588:	68e3      	ldr	r3, [r4, #12]
 800558a:	b183      	cbz	r3, 80055ae <HAL_SPI_Receive+0xca>
 800558c:	e02c      	b.n	80055e8 <HAL_SPI_Receive+0x104>
    SPI_1LINE_RX(hspi);
 800558e:	6822      	ldr	r2, [r4, #0]
 8005590:	6813      	ldr	r3, [r2, #0]
 8005592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	e7ed      	b.n	8005576 <HAL_SPI_Receive+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800559a:	f7fd ff1b 	bl	80033d4 <HAL_GetTick>
 800559e:	1b80      	subs	r0, r0, r6
 80055a0:	42a8      	cmp	r0, r5
 80055a2:	d302      	bcc.n	80055aa <HAL_SPI_Receive+0xc6>
 80055a4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80055a8:	d141      	bne.n	800562e <HAL_SPI_Receive+0x14a>
 80055aa:	2d00      	cmp	r5, #0
 80055ac:	d041      	beq.n	8005632 <HAL_SPI_Receive+0x14e>
    while (hspi->RxXferCount > 0U)
 80055ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d02b      	beq.n	800560e <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	f012 0f01 	tst.w	r2, #1
 80055be:	d0ec      	beq.n	800559a <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80055c2:	7b1b      	ldrb	r3, [r3, #12]
 80055c4:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055c8:	3301      	adds	r3, #1
 80055ca:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80055cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80055d4:	e7eb      	b.n	80055ae <HAL_SPI_Receive+0xca>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055d6:	f7fd fefd 	bl	80033d4 <HAL_GetTick>
 80055da:	1b80      	subs	r0, r0, r6
 80055dc:	42a8      	cmp	r0, r5
 80055de:	d302      	bcc.n	80055e6 <HAL_SPI_Receive+0x102>
 80055e0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80055e4:	d127      	bne.n	8005636 <HAL_SPI_Receive+0x152>
 80055e6:	b345      	cbz	r5, 800563a <HAL_SPI_Receive+0x156>
    while (hspi->RxXferCount > 0U)
 80055e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	b17b      	cbz	r3, 800560e <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	f012 0f01 	tst.w	r2, #1
 80055f6:	d0ee      	beq.n	80055d6 <HAL_SPI_Receive+0xf2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005600:	3302      	adds	r3, #2
 8005602:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005604:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005606:	3b01      	subs	r3, #1
 8005608:	b29b      	uxth	r3, r3
 800560a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800560c:	e7ec      	b.n	80055e8 <HAL_SPI_Receive+0x104>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800560e:	4632      	mov	r2, r6
 8005610:	4629      	mov	r1, r5
 8005612:	4620      	mov	r0, r4
 8005614:	f7ff fcf6 	bl	8005004 <SPI_EndRxTransaction>
 8005618:	b108      	cbz	r0, 800561e <HAL_SPI_Receive+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800561a:	2320      	movs	r3, #32
 800561c:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800561e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005620:	b96b      	cbnz	r3, 800563e <HAL_SPI_Receive+0x15a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005622:	2000      	movs	r0, #0
 8005624:	e77a      	b.n	800551c <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8005626:	2001      	movs	r0, #1
 8005628:	e778      	b.n	800551c <HAL_SPI_Receive+0x38>
 800562a:	2001      	movs	r0, #1
 800562c:	e776      	b.n	800551c <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 800562e:	2003      	movs	r0, #3
 8005630:	e774      	b.n	800551c <HAL_SPI_Receive+0x38>
 8005632:	2003      	movs	r0, #3
 8005634:	e772      	b.n	800551c <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8005636:	2003      	movs	r0, #3
 8005638:	e770      	b.n	800551c <HAL_SPI_Receive+0x38>
 800563a:	2003      	movs	r0, #3
 800563c:	e76e      	b.n	800551c <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 800563e:	2001      	movs	r0, #1
 8005640:	e76c      	b.n	800551c <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 8005642:	2002      	movs	r0, #2
 8005644:	e770      	b.n	8005528 <HAL_SPI_Receive+0x44>
	...

08005648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005648:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800564a:	6a03      	ldr	r3, [r0, #32]
 800564c:	f023 0301 	bic.w	r3, r3, #1
 8005650:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005652:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005654:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005656:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005658:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800565c:	680d      	ldr	r5, [r1, #0]
 800565e:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005662:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005666:	688b      	ldr	r3, [r1, #8]
 8005668:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800566a:	4d0d      	ldr	r5, [pc, #52]	; (80056a0 <TIM_OC1_SetConfig+0x58>)
 800566c:	42a8      	cmp	r0, r5
 800566e:	d009      	beq.n	8005684 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005670:	4d0b      	ldr	r5, [pc, #44]	; (80056a0 <TIM_OC1_SetConfig+0x58>)
 8005672:	42a8      	cmp	r0, r5
 8005674:	d00d      	beq.n	8005692 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005676:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005678:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800567a:	684a      	ldr	r2, [r1, #4]
 800567c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800567e:	6203      	str	r3, [r0, #32]
}
 8005680:	bc70      	pop	{r4, r5, r6}
 8005682:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8005684:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005688:	68cc      	ldr	r4, [r1, #12]
 800568a:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 800568c:	f023 0304 	bic.w	r3, r3, #4
 8005690:	e7ee      	b.n	8005670 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005692:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8005696:	694c      	ldr	r4, [r1, #20]
 8005698:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 800569a:	698a      	ldr	r2, [r1, #24]
 800569c:	4322      	orrs	r2, r4
 800569e:	e7ea      	b.n	8005676 <TIM_OC1_SetConfig+0x2e>
 80056a0:	40010000 	.word	0x40010000

080056a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056a4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056a6:	6a03      	ldr	r3, [r0, #32]
 80056a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056ac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056b2:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056b4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b8:	680d      	ldr	r5, [r1, #0]
 80056ba:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056c0:	688d      	ldr	r5, [r1, #8]
 80056c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056c6:	4d0f      	ldr	r5, [pc, #60]	; (8005704 <TIM_OC3_SetConfig+0x60>)
 80056c8:	42a8      	cmp	r0, r5
 80056ca:	d009      	beq.n	80056e0 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056cc:	4d0d      	ldr	r5, [pc, #52]	; (8005704 <TIM_OC3_SetConfig+0x60>)
 80056ce:	42a8      	cmp	r0, r5
 80056d0:	d00e      	beq.n	80056f0 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056d4:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056d6:	684a      	ldr	r2, [r1, #4]
 80056d8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056da:	6203      	str	r3, [r0, #32]
}
 80056dc:	bc30      	pop	{r4, r5}
 80056de:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80056e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056e4:	68cd      	ldr	r5, [r1, #12]
 80056e6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80056ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056ee:	e7ed      	b.n	80056cc <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056f0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056f4:	694d      	ldr	r5, [r1, #20]
 80056f6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056fa:	698d      	ldr	r5, [r1, #24]
 80056fc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8005700:	e7e7      	b.n	80056d2 <TIM_OC3_SetConfig+0x2e>
 8005702:	bf00      	nop
 8005704:	40010000 	.word	0x40010000

08005708 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005708:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800570a:	6a03      	ldr	r3, [r0, #32]
 800570c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005710:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005712:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005714:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005716:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005718:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800571c:	680d      	ldr	r5, [r1, #0]
 800571e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005722:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005726:	688d      	ldr	r5, [r1, #8]
 8005728:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800572c:	4d07      	ldr	r5, [pc, #28]	; (800574c <TIM_OC4_SetConfig+0x44>)
 800572e:	42a8      	cmp	r0, r5
 8005730:	d006      	beq.n	8005740 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005732:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005734:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005736:	684a      	ldr	r2, [r1, #4]
 8005738:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573a:	6203      	str	r3, [r0, #32]
}
 800573c:	bc30      	pop	{r4, r5}
 800573e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005740:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005744:	694d      	ldr	r5, [r1, #20]
 8005746:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800574a:	e7f2      	b.n	8005732 <TIM_OC4_SetConfig+0x2a>
 800574c:	40010000 	.word	0x40010000

08005750 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005750:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005752:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005754:	6a04      	ldr	r4, [r0, #32]
 8005756:	f024 0401 	bic.w	r4, r4, #1
 800575a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800575c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800575e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005762:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005766:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800576a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800576c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800576e:	6203      	str	r3, [r0, #32]
}
 8005770:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005774:	4770      	bx	lr

08005776 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005776:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005778:	6a03      	ldr	r3, [r0, #32]
 800577a:	f023 0310 	bic.w	r3, r3, #16
 800577e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005780:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8005782:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005784:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005788:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800578c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005790:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005794:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005796:	6203      	str	r3, [r0, #32]
}
 8005798:	f85d 4b04 	ldr.w	r4, [sp], #4
 800579c:	4770      	bx	lr

0800579e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800579e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057a4:	4319      	orrs	r1, r3
 80057a6:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057aa:	6081      	str	r1, [r0, #8]
}
 80057ac:	4770      	bx	lr

080057ae <HAL_TIM_PeriodElapsedCallback>:
}
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80057b0:	4770      	bx	lr

080057b2 <HAL_TIM_IC_CaptureCallback>:
}
 80057b2:	4770      	bx	lr

080057b4 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80057b4:	4770      	bx	lr

080057b6 <HAL_TIM_TriggerCallback>:
}
 80057b6:	4770      	bx	lr

080057b8 <HAL_TIM_IRQHandler>:
{
 80057b8:	b510      	push	{r4, lr}
 80057ba:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057bc:	6803      	ldr	r3, [r0, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	f012 0f02 	tst.w	r2, #2
 80057c4:	d011      	beq.n	80057ea <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	f012 0f02 	tst.w	r2, #2
 80057cc:	d00d      	beq.n	80057ea <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057ce:	f06f 0202 	mvn.w	r2, #2
 80057d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057d4:	2301      	movs	r3, #1
 80057d6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057d8:	6803      	ldr	r3, [r0, #0]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	f013 0f03 	tst.w	r3, #3
 80057e0:	d070      	beq.n	80058c4 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80057e2:	f7ff ffe6 	bl	80057b2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e6:	2300      	movs	r3, #0
 80057e8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	691a      	ldr	r2, [r3, #16]
 80057ee:	f012 0f04 	tst.w	r2, #4
 80057f2:	d012      	beq.n	800581a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	f012 0f04 	tst.w	r2, #4
 80057fa:	d00e      	beq.n	800581a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057fc:	f06f 0204 	mvn.w	r2, #4
 8005800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005802:	2302      	movs	r3, #2
 8005804:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800580e:	d05f      	beq.n	80058d0 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8005810:	4620      	mov	r0, r4
 8005812:	f7ff ffce 	bl	80057b2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005816:	2300      	movs	r3, #0
 8005818:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	691a      	ldr	r2, [r3, #16]
 800581e:	f012 0f08 	tst.w	r2, #8
 8005822:	d012      	beq.n	800584a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	f012 0f08 	tst.w	r2, #8
 800582a:	d00e      	beq.n	800584a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800582c:	f06f 0208 	mvn.w	r2, #8
 8005830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005832:	2304      	movs	r3, #4
 8005834:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	f013 0f03 	tst.w	r3, #3
 800583e:	d04e      	beq.n	80058de <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8005840:	4620      	mov	r0, r4
 8005842:	f7ff ffb6 	bl	80057b2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005846:	2300      	movs	r3, #0
 8005848:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	691a      	ldr	r2, [r3, #16]
 800584e:	f012 0f10 	tst.w	r2, #16
 8005852:	d012      	beq.n	800587a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	f012 0f10 	tst.w	r2, #16
 800585a:	d00e      	beq.n	800587a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800585c:	f06f 0210 	mvn.w	r2, #16
 8005860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005862:	2308      	movs	r3, #8
 8005864:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800586e:	d03d      	beq.n	80058ec <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8005870:	4620      	mov	r0, r4
 8005872:	f7ff ff9e 	bl	80057b2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005876:	2300      	movs	r3, #0
 8005878:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800587a:	6823      	ldr	r3, [r4, #0]
 800587c:	691a      	ldr	r2, [r3, #16]
 800587e:	f012 0f01 	tst.w	r2, #1
 8005882:	d003      	beq.n	800588c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	f012 0f01 	tst.w	r2, #1
 800588a:	d136      	bne.n	80058fa <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005894:	d003      	beq.n	800589e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	f012 0f80 	tst.w	r2, #128	; 0x80
 800589c:	d134      	bne.n	8005908 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	691a      	ldr	r2, [r3, #16]
 80058a2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80058a6:	d003      	beq.n	80058b0 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	f012 0f40 	tst.w	r2, #64	; 0x40
 80058ae:	d132      	bne.n	8005916 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	f012 0f20 	tst.w	r2, #32
 80058b8:	d003      	beq.n	80058c2 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	f012 0f20 	tst.w	r2, #32
 80058c0:	d130      	bne.n	8005924 <HAL_TIM_IRQHandler+0x16c>
}
 80058c2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c4:	f7ff ff74 	bl	80057b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c8:	4620      	mov	r0, r4
 80058ca:	f7ff ff73 	bl	80057b4 <HAL_TIM_PWM_PulseFinishedCallback>
 80058ce:	e78a      	b.n	80057e6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d0:	4620      	mov	r0, r4
 80058d2:	f7ff ff6d 	bl	80057b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d6:	4620      	mov	r0, r4
 80058d8:	f7ff ff6c 	bl	80057b4 <HAL_TIM_PWM_PulseFinishedCallback>
 80058dc:	e79b      	b.n	8005816 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058de:	4620      	mov	r0, r4
 80058e0:	f7ff ff66 	bl	80057b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e4:	4620      	mov	r0, r4
 80058e6:	f7ff ff65 	bl	80057b4 <HAL_TIM_PWM_PulseFinishedCallback>
 80058ea:	e7ac      	b.n	8005846 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ec:	4620      	mov	r0, r4
 80058ee:	f7ff ff5f 	bl	80057b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f2:	4620      	mov	r0, r4
 80058f4:	f7ff ff5e 	bl	80057b4 <HAL_TIM_PWM_PulseFinishedCallback>
 80058f8:	e7bd      	b.n	8005876 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058fa:	f06f 0201 	mvn.w	r2, #1
 80058fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005900:	4620      	mov	r0, r4
 8005902:	f7ff ff54 	bl	80057ae <HAL_TIM_PeriodElapsedCallback>
 8005906:	e7c1      	b.n	800588c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005908:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800590c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800590e:	4620      	mov	r0, r4
 8005910:	f000 f9cd 	bl	8005cae <HAL_TIMEx_BreakCallback>
 8005914:	e7c3      	b.n	800589e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005916:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800591a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800591c:	4620      	mov	r0, r4
 800591e:	f7ff ff4a 	bl	80057b6 <HAL_TIM_TriggerCallback>
 8005922:	e7c5      	b.n	80058b0 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005924:	f06f 0220 	mvn.w	r2, #32
 8005928:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800592a:	4620      	mov	r0, r4
 800592c:	f000 f9be 	bl	8005cac <HAL_TIMEx_CommutCallback>
}
 8005930:	e7c7      	b.n	80058c2 <HAL_TIM_IRQHandler+0x10a>
	...

08005934 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005934:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005936:	4a25      	ldr	r2, [pc, #148]	; (80059cc <TIM_Base_SetConfig+0x98>)
 8005938:	4290      	cmp	r0, r2
 800593a:	d00e      	beq.n	800595a <TIM_Base_SetConfig+0x26>
 800593c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005940:	d00b      	beq.n	800595a <TIM_Base_SetConfig+0x26>
 8005942:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005946:	4290      	cmp	r0, r2
 8005948:	d007      	beq.n	800595a <TIM_Base_SetConfig+0x26>
 800594a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800594e:	4290      	cmp	r0, r2
 8005950:	d003      	beq.n	800595a <TIM_Base_SetConfig+0x26>
 8005952:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005956:	4290      	cmp	r0, r2
 8005958:	d103      	bne.n	8005962 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800595a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800595e:	684a      	ldr	r2, [r1, #4]
 8005960:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005962:	4a1a      	ldr	r2, [pc, #104]	; (80059cc <TIM_Base_SetConfig+0x98>)
 8005964:	4290      	cmp	r0, r2
 8005966:	d01a      	beq.n	800599e <TIM_Base_SetConfig+0x6a>
 8005968:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800596c:	d017      	beq.n	800599e <TIM_Base_SetConfig+0x6a>
 800596e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005972:	4290      	cmp	r0, r2
 8005974:	d013      	beq.n	800599e <TIM_Base_SetConfig+0x6a>
 8005976:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800597a:	4290      	cmp	r0, r2
 800597c:	d00f      	beq.n	800599e <TIM_Base_SetConfig+0x6a>
 800597e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005982:	4290      	cmp	r0, r2
 8005984:	d00b      	beq.n	800599e <TIM_Base_SetConfig+0x6a>
 8005986:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800598a:	4290      	cmp	r0, r2
 800598c:	d007      	beq.n	800599e <TIM_Base_SetConfig+0x6a>
 800598e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005992:	4290      	cmp	r0, r2
 8005994:	d003      	beq.n	800599e <TIM_Base_SetConfig+0x6a>
 8005996:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800599a:	4290      	cmp	r0, r2
 800599c:	d103      	bne.n	80059a6 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 800599e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059a2:	68ca      	ldr	r2, [r1, #12]
 80059a4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059aa:	694a      	ldr	r2, [r1, #20]
 80059ac:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80059ae:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059b0:	688b      	ldr	r3, [r1, #8]
 80059b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80059b4:	680b      	ldr	r3, [r1, #0]
 80059b6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059b8:	4b04      	ldr	r3, [pc, #16]	; (80059cc <TIM_Base_SetConfig+0x98>)
 80059ba:	4298      	cmp	r0, r3
 80059bc:	d002      	beq.n	80059c4 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 80059be:	2301      	movs	r3, #1
 80059c0:	6143      	str	r3, [r0, #20]
}
 80059c2:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80059c4:	690b      	ldr	r3, [r1, #16]
 80059c6:	6303      	str	r3, [r0, #48]	; 0x30
 80059c8:	e7f9      	b.n	80059be <TIM_Base_SetConfig+0x8a>
 80059ca:	bf00      	nop
 80059cc:	40010000 	.word	0x40010000

080059d0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80059d0:	b1a8      	cbz	r0, 80059fe <HAL_TIM_Base_Init+0x2e>
{
 80059d2:	b510      	push	{r4, lr}
 80059d4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80059d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80059da:	b15b      	cbz	r3, 80059f4 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	2302      	movs	r3, #2
 80059de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059e2:	1d21      	adds	r1, r4, #4
 80059e4:	6820      	ldr	r0, [r4, #0]
 80059e6:	f7ff ffa5 	bl	8005934 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80059ea:	2301      	movs	r3, #1
 80059ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80059f0:	2000      	movs	r0, #0
}
 80059f2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80059f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80059f8:	f001 f972 	bl	8006ce0 <HAL_TIM_Base_MspInit>
 80059fc:	e7ee      	b.n	80059dc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80059fe:	2001      	movs	r0, #1
}
 8005a00:	4770      	bx	lr

08005a02 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005a02:	b1a8      	cbz	r0, 8005a30 <HAL_TIM_PWM_Init+0x2e>
{
 8005a04:	b510      	push	{r4, lr}
 8005a06:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005a08:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005a0c:	b15b      	cbz	r3, 8005a26 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8005a0e:	2302      	movs	r3, #2
 8005a10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a14:	1d21      	adds	r1, r4, #4
 8005a16:	6820      	ldr	r0, [r4, #0]
 8005a18:	f7ff ff8c 	bl	8005934 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005a22:	2000      	movs	r0, #0
}
 8005a24:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005a26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005a2a:	f001 f979 	bl	8006d20 <HAL_TIM_PWM_MspInit>
 8005a2e:	e7ee      	b.n	8005a0e <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8005a30:	2001      	movs	r0, #1
}
 8005a32:	4770      	bx	lr

08005a34 <TIM_OC2_SetConfig>:
{
 8005a34:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a36:	6a03      	ldr	r3, [r0, #32]
 8005a38:	f023 0310 	bic.w	r3, r3, #16
 8005a3c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005a3e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005a40:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005a42:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a44:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a48:	680d      	ldr	r5, [r1, #0]
 8005a4a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8005a4e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a52:	688d      	ldr	r5, [r1, #8]
 8005a54:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a58:	4d0e      	ldr	r5, [pc, #56]	; (8005a94 <TIM_OC2_SetConfig+0x60>)
 8005a5a:	42a8      	cmp	r0, r5
 8005a5c:	d009      	beq.n	8005a72 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5e:	4d0d      	ldr	r5, [pc, #52]	; (8005a94 <TIM_OC2_SetConfig+0x60>)
 8005a60:	42a8      	cmp	r0, r5
 8005a62:	d00e      	beq.n	8005a82 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8005a64:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005a66:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005a68:	684a      	ldr	r2, [r1, #4]
 8005a6a:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005a6c:	6203      	str	r3, [r0, #32]
}
 8005a6e:	bc30      	pop	{r4, r5}
 8005a70:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a76:	68cd      	ldr	r5, [r1, #12]
 8005a78:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a80:	e7ed      	b.n	8005a5e <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a82:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a86:	694d      	ldr	r5, [r1, #20]
 8005a88:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a8c:	698d      	ldr	r5, [r1, #24]
 8005a8e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8005a92:	e7e7      	b.n	8005a64 <TIM_OC2_SetConfig+0x30>
 8005a94:	40010000 	.word	0x40010000

08005a98 <HAL_TIM_PWM_ConfigChannel>:
{
 8005a98:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005a9a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d066      	beq.n	8005b70 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8005aa2:	460d      	mov	r5, r1
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005aac:	2302      	movs	r3, #2
 8005aae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8005ab2:	2a0c      	cmp	r2, #12
 8005ab4:	d81a      	bhi.n	8005aec <HAL_TIM_PWM_ConfigChannel+0x54>
 8005ab6:	e8df f002 	tbb	[pc, r2]
 8005aba:	1907      	.short	0x1907
 8005abc:	19201919 	.word	0x19201919
 8005ac0:	19341919 	.word	0x19341919
 8005ac4:	1919      	.short	0x1919
 8005ac6:	47          	.byte	0x47
 8005ac7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ac8:	6800      	ldr	r0, [r0, #0]
 8005aca:	f7ff fdbd 	bl	8005648 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ace:	6822      	ldr	r2, [r4, #0]
 8005ad0:	6993      	ldr	r3, [r2, #24]
 8005ad2:	f043 0308 	orr.w	r3, r3, #8
 8005ad6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ad8:	6822      	ldr	r2, [r4, #0]
 8005ada:	6993      	ldr	r3, [r2, #24]
 8005adc:	f023 0304 	bic.w	r3, r3, #4
 8005ae0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	6993      	ldr	r3, [r2, #24]
 8005ae6:	6929      	ldr	r1, [r5, #16]
 8005ae8:	430b      	orrs	r3, r1
 8005aea:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8005aec:	2301      	movs	r3, #1
 8005aee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005af2:	2000      	movs	r0, #0
 8005af4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005af8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005afa:	6800      	ldr	r0, [r0, #0]
 8005afc:	f7ff ff9a 	bl	8005a34 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b00:	6822      	ldr	r2, [r4, #0]
 8005b02:	6993      	ldr	r3, [r2, #24]
 8005b04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b08:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b0a:	6822      	ldr	r2, [r4, #0]
 8005b0c:	6993      	ldr	r3, [r2, #24]
 8005b0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b12:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b14:	6822      	ldr	r2, [r4, #0]
 8005b16:	6993      	ldr	r3, [r2, #24]
 8005b18:	6929      	ldr	r1, [r5, #16]
 8005b1a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005b1e:	6193      	str	r3, [r2, #24]
      break;
 8005b20:	e7e4      	b.n	8005aec <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b22:	6800      	ldr	r0, [r0, #0]
 8005b24:	f7ff fdbe 	bl	80056a4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b28:	6822      	ldr	r2, [r4, #0]
 8005b2a:	69d3      	ldr	r3, [r2, #28]
 8005b2c:	f043 0308 	orr.w	r3, r3, #8
 8005b30:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b32:	6822      	ldr	r2, [r4, #0]
 8005b34:	69d3      	ldr	r3, [r2, #28]
 8005b36:	f023 0304 	bic.w	r3, r3, #4
 8005b3a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b3c:	6822      	ldr	r2, [r4, #0]
 8005b3e:	69d3      	ldr	r3, [r2, #28]
 8005b40:	6929      	ldr	r1, [r5, #16]
 8005b42:	430b      	orrs	r3, r1
 8005b44:	61d3      	str	r3, [r2, #28]
      break;
 8005b46:	e7d1      	b.n	8005aec <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b48:	6800      	ldr	r0, [r0, #0]
 8005b4a:	f7ff fddd 	bl	8005708 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b4e:	6822      	ldr	r2, [r4, #0]
 8005b50:	69d3      	ldr	r3, [r2, #28]
 8005b52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005b56:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b58:	6822      	ldr	r2, [r4, #0]
 8005b5a:	69d3      	ldr	r3, [r2, #28]
 8005b5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b60:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b62:	6822      	ldr	r2, [r4, #0]
 8005b64:	69d3      	ldr	r3, [r2, #28]
 8005b66:	6929      	ldr	r1, [r5, #16]
 8005b68:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005b6c:	61d3      	str	r3, [r2, #28]
      break;
 8005b6e:	e7bd      	b.n	8005aec <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8005b70:	2002      	movs	r0, #2
 8005b72:	e7c1      	b.n	8005af8 <HAL_TIM_PWM_ConfigChannel+0x60>

08005b74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b74:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b76:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b78:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b7c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8005b80:	430b      	orrs	r3, r1
 8005b82:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b84:	6083      	str	r3, [r0, #8]
}
 8005b86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005b8c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d066      	beq.n	8005c62 <HAL_TIM_ConfigClockSource+0xd6>
{
 8005b94:	b510      	push	{r4, lr}
 8005b96:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005b98:	2301      	movs	r3, #1
 8005b9a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005ba4:	6802      	ldr	r2, [r0, #0]
 8005ba6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ba8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005bb0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005bb2:	680b      	ldr	r3, [r1, #0]
 8005bb4:	2b40      	cmp	r3, #64	; 0x40
 8005bb6:	d04a      	beq.n	8005c4e <HAL_TIM_ConfigClockSource+0xc2>
 8005bb8:	d913      	bls.n	8005be2 <HAL_TIM_ConfigClockSource+0x56>
 8005bba:	2b60      	cmp	r3, #96	; 0x60
 8005bbc:	d03d      	beq.n	8005c3a <HAL_TIM_ConfigClockSource+0xae>
 8005bbe:	d91e      	bls.n	8005bfe <HAL_TIM_ConfigClockSource+0x72>
 8005bc0:	2b70      	cmp	r3, #112	; 0x70
 8005bc2:	d028      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x8a>
 8005bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bc8:	d130      	bne.n	8005c2c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8005bca:	68cb      	ldr	r3, [r1, #12]
 8005bcc:	684a      	ldr	r2, [r1, #4]
 8005bce:	6889      	ldr	r1, [r1, #8]
 8005bd0:	6800      	ldr	r0, [r0, #0]
 8005bd2:	f7ff ffcf 	bl	8005b74 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bd6:	6822      	ldr	r2, [r4, #0]
 8005bd8:	6893      	ldr	r3, [r2, #8]
 8005bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005bde:	6093      	str	r3, [r2, #8]
      break;
 8005be0:	e024      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8005be2:	2b10      	cmp	r3, #16
 8005be4:	d006      	beq.n	8005bf4 <HAL_TIM_ConfigClockSource+0x68>
 8005be6:	d904      	bls.n	8005bf2 <HAL_TIM_ConfigClockSource+0x66>
 8005be8:	2b20      	cmp	r3, #32
 8005bea:	d003      	beq.n	8005bf4 <HAL_TIM_ConfigClockSource+0x68>
 8005bec:	2b30      	cmp	r3, #48	; 0x30
 8005bee:	d001      	beq.n	8005bf4 <HAL_TIM_ConfigClockSource+0x68>
 8005bf0:	e01c      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0xa0>
 8005bf2:	b9db      	cbnz	r3, 8005c2c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6820      	ldr	r0, [r4, #0]
 8005bf8:	f7ff fdd1 	bl	800579e <TIM_ITRx_SetConfig>
      break;
 8005bfc:	e016      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8005bfe:	2b50      	cmp	r3, #80	; 0x50
 8005c00:	d114      	bne.n	8005c2c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c02:	68ca      	ldr	r2, [r1, #12]
 8005c04:	6849      	ldr	r1, [r1, #4]
 8005c06:	6800      	ldr	r0, [r0, #0]
 8005c08:	f7ff fda2 	bl	8005750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c0c:	2150      	movs	r1, #80	; 0x50
 8005c0e:	6820      	ldr	r0, [r4, #0]
 8005c10:	f7ff fdc5 	bl	800579e <TIM_ITRx_SetConfig>
      break;
 8005c14:	e00a      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8005c16:	68cb      	ldr	r3, [r1, #12]
 8005c18:	684a      	ldr	r2, [r1, #4]
 8005c1a:	6889      	ldr	r1, [r1, #8]
 8005c1c:	6800      	ldr	r0, [r0, #0]
 8005c1e:	f7ff ffa9 	bl	8005b74 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c22:	6822      	ldr	r2, [r4, #0]
 8005c24:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c26:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8005c2a:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005c32:	2000      	movs	r0, #0
 8005c34:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005c38:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c3a:	68ca      	ldr	r2, [r1, #12]
 8005c3c:	6849      	ldr	r1, [r1, #4]
 8005c3e:	6800      	ldr	r0, [r0, #0]
 8005c40:	f7ff fd99 	bl	8005776 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c44:	2160      	movs	r1, #96	; 0x60
 8005c46:	6820      	ldr	r0, [r4, #0]
 8005c48:	f7ff fda9 	bl	800579e <TIM_ITRx_SetConfig>
      break;
 8005c4c:	e7ee      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c4e:	68ca      	ldr	r2, [r1, #12]
 8005c50:	6849      	ldr	r1, [r1, #4]
 8005c52:	6800      	ldr	r0, [r0, #0]
 8005c54:	f7ff fd7c 	bl	8005750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c58:	2140      	movs	r1, #64	; 0x40
 8005c5a:	6820      	ldr	r0, [r4, #0]
 8005c5c:	f7ff fd9f 	bl	800579e <TIM_ITRx_SetConfig>
      break;
 8005c60:	e7e4      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 8005c62:	2002      	movs	r0, #2
}
 8005c64:	4770      	bx	lr

08005c66 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c66:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d01c      	beq.n	8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8005c6e:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8005c70:	2601      	movs	r6, #1
 8005c72:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c76:	2302      	movs	r3, #2
 8005c78:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c7c:	6802      	ldr	r2, [r0, #0]
 8005c7e:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c80:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c82:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c86:	680c      	ldr	r4, [r1, #0]
 8005c88:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005c8a:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c8e:	684b      	ldr	r3, [r1, #4]
 8005c90:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c92:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c94:	6802      	ldr	r2, [r0, #0]
 8005c96:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c98:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005ca2:	4618      	mov	r0, r3
}
 8005ca4:	bc70      	pop	{r4, r5, r6}
 8005ca6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005ca8:	2002      	movs	r0, #2
}
 8005caa:	4770      	bx	lr

08005cac <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cac:	4770      	bx	lr

08005cae <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cae:	4770      	bx	lr

08005cb0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb0:	6802      	ldr	r2, [r0, #0]
 8005cb2:	68d3      	ldr	r3, [r2, #12]
 8005cb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cb8:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cba:	6802      	ldr	r2, [r0, #0]
 8005cbc:	6953      	ldr	r3, [r2, #20]
 8005cbe:	f023 0301 	bic.w	r3, r3, #1
 8005cc2:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cc4:	2320      	movs	r3, #32
 8005cc6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8005cca:	4770      	bx	lr

08005ccc <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ccc:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b21      	cmp	r3, #33	; 0x21
 8005cd4:	d12a      	bne.n	8005d2c <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005cd6:	6883      	ldr	r3, [r0, #8]
 8005cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cdc:	d016      	beq.n	8005d0c <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cde:	6a03      	ldr	r3, [r0, #32]
 8005ce0:	1c5a      	adds	r2, r3, #1
 8005ce2:	6202      	str	r2, [r0, #32]
 8005ce4:	781a      	ldrb	r2, [r3, #0]
 8005ce6:	6803      	ldr	r3, [r0, #0]
 8005ce8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005cea:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8005cec:	3b01      	subs	r3, #1
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	84c3      	strh	r3, [r0, #38]	; 0x26
 8005cf2:	b9eb      	cbnz	r3, 8005d30 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cf4:	6802      	ldr	r2, [r0, #0]
 8005cf6:	68d3      	ldr	r3, [r2, #12]
 8005cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cfc:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005cfe:	6802      	ldr	r2, [r0, #0]
 8005d00:	68d3      	ldr	r3, [r2, #12]
 8005d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d06:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8005d08:	2000      	movs	r0, #0
 8005d0a:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005d0c:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	6802      	ldr	r2, [r0, #0]
 8005d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d16:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005d18:	6903      	ldr	r3, [r0, #16]
 8005d1a:	b91b      	cbnz	r3, 8005d24 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8005d1c:	6a03      	ldr	r3, [r0, #32]
 8005d1e:	3302      	adds	r3, #2
 8005d20:	6203      	str	r3, [r0, #32]
 8005d22:	e7e2      	b.n	8005cea <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8005d24:	6a03      	ldr	r3, [r0, #32]
 8005d26:	3301      	adds	r3, #1
 8005d28:	6203      	str	r3, [r0, #32]
 8005d2a:	e7de      	b.n	8005cea <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8005d2c:	2002      	movs	r0, #2
 8005d2e:	4770      	bx	lr
    return HAL_OK;
 8005d30:	2000      	movs	r0, #0
  }
}
 8005d32:	4770      	bx	lr

08005d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d38:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d3a:	6802      	ldr	r2, [r0, #0]
 8005d3c:	6913      	ldr	r3, [r2, #16]
 8005d3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005d42:	68c1      	ldr	r1, [r0, #12]
 8005d44:	430b      	orrs	r3, r1
 8005d46:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d48:	6883      	ldr	r3, [r0, #8]
 8005d4a:	6902      	ldr	r2, [r0, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	6942      	ldr	r2, [r0, #20]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	69c2      	ldr	r2, [r0, #28]
 8005d54:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8005d56:	6801      	ldr	r1, [r0, #0]
 8005d58:	68cb      	ldr	r3, [r1, #12]
 8005d5a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005d5e:	f023 030c 	bic.w	r3, r3, #12
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d66:	6802      	ldr	r2, [r0, #0]
 8005d68:	6953      	ldr	r3, [r2, #20]
 8005d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d6e:	6981      	ldr	r1, [r0, #24]
 8005d70:	430b      	orrs	r3, r1
 8005d72:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d74:	69c3      	ldr	r3, [r0, #28]
 8005d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d7a:	d060      	beq.n	8005e3e <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d7c:	6803      	ldr	r3, [r0, #0]
 8005d7e:	4ab8      	ldr	r2, [pc, #736]	; (8006060 <UART_SetConfig+0x32c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	f000 8114 	beq.w	8005fae <UART_SetConfig+0x27a>
 8005d86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	f000 810f 	beq.w	8005fae <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005d90:	f7ff f89c 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8005d94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d9c:	6865      	ldr	r5, [r4, #4]
 8005d9e:	00ad      	lsls	r5, r5, #2
 8005da0:	fbb0 f5f5 	udiv	r5, r0, r5
 8005da4:	4faf      	ldr	r7, [pc, #700]	; (8006064 <UART_SetConfig+0x330>)
 8005da6:	fba7 3505 	umull	r3, r5, r7, r5
 8005daa:	096d      	lsrs	r5, r5, #5
 8005dac:	012e      	lsls	r6, r5, #4
 8005dae:	f7ff f88d 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8005db2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005db6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005dba:	6865      	ldr	r5, [r4, #4]
 8005dbc:	00ad      	lsls	r5, r5, #2
 8005dbe:	fbb0 f9f5 	udiv	r9, r0, r5
 8005dc2:	f7ff f883 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8005dc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005dca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005dce:	6865      	ldr	r5, [r4, #4]
 8005dd0:	00ad      	lsls	r5, r5, #2
 8005dd2:	fbb0 f5f5 	udiv	r5, r0, r5
 8005dd6:	fba7 3505 	umull	r3, r5, r7, r5
 8005dda:	096d      	lsrs	r5, r5, #5
 8005ddc:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005de0:	fb08 9515 	mls	r5, r8, r5, r9
 8005de4:	012d      	lsls	r5, r5, #4
 8005de6:	3532      	adds	r5, #50	; 0x32
 8005de8:	fba7 3505 	umull	r3, r5, r7, r5
 8005dec:	096d      	lsrs	r5, r5, #5
 8005dee:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8005df2:	4435      	add	r5, r6
 8005df4:	f7ff f86a 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8005df8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005dfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e00:	6866      	ldr	r6, [r4, #4]
 8005e02:	00b6      	lsls	r6, r6, #2
 8005e04:	fbb0 f6f6 	udiv	r6, r0, r6
 8005e08:	f7ff f860 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8005e0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e14:	6863      	ldr	r3, [r4, #4]
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	fbb0 f0f3 	udiv	r0, r0, r3
 8005e1c:	fba7 3000 	umull	r3, r0, r7, r0
 8005e20:	0940      	lsrs	r0, r0, #5
 8005e22:	fb08 6810 	mls	r8, r8, r0, r6
 8005e26:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8005e2a:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005e2e:	fba7 3708 	umull	r3, r7, r7, r8
 8005e32:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	442f      	add	r7, r5
 8005e3a:	609f      	str	r7, [r3, #8]
    }
  }
}
 8005e3c:	e10d      	b.n	800605a <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e3e:	6803      	ldr	r3, [r0, #0]
 8005e40:	4a87      	ldr	r2, [pc, #540]	; (8006060 <UART_SetConfig+0x32c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d05b      	beq.n	8005efe <UART_SetConfig+0x1ca>
 8005e46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d057      	beq.n	8005efe <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005e4e:	f7ff f83d 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8005e52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e5a:	6865      	ldr	r5, [r4, #4]
 8005e5c:	006d      	lsls	r5, r5, #1
 8005e5e:	fbb0 f5f5 	udiv	r5, r0, r5
 8005e62:	4f80      	ldr	r7, [pc, #512]	; (8006064 <UART_SetConfig+0x330>)
 8005e64:	fba7 3505 	umull	r3, r5, r7, r5
 8005e68:	096d      	lsrs	r5, r5, #5
 8005e6a:	012e      	lsls	r6, r5, #4
 8005e6c:	f7ff f82e 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8005e70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e78:	6865      	ldr	r5, [r4, #4]
 8005e7a:	006d      	lsls	r5, r5, #1
 8005e7c:	fbb0 f9f5 	udiv	r9, r0, r5
 8005e80:	f7ff f824 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8005e84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e8c:	6865      	ldr	r5, [r4, #4]
 8005e8e:	006d      	lsls	r5, r5, #1
 8005e90:	fbb0 f5f5 	udiv	r5, r0, r5
 8005e94:	fba7 3505 	umull	r3, r5, r7, r5
 8005e98:	096d      	lsrs	r5, r5, #5
 8005e9a:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005e9e:	fb08 9515 	mls	r5, r8, r5, r9
 8005ea2:	00ed      	lsls	r5, r5, #3
 8005ea4:	3532      	adds	r5, #50	; 0x32
 8005ea6:	fba7 3505 	umull	r3, r5, r7, r5
 8005eaa:	096d      	lsrs	r5, r5, #5
 8005eac:	006d      	lsls	r5, r5, #1
 8005eae:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8005eb2:	4435      	add	r5, r6
 8005eb4:	f7ff f80a 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8005eb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ebc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ec0:	6866      	ldr	r6, [r4, #4]
 8005ec2:	0076      	lsls	r6, r6, #1
 8005ec4:	fbb0 f6f6 	udiv	r6, r0, r6
 8005ec8:	f7ff f800 	bl	8004ecc <HAL_RCC_GetPCLK1Freq>
 8005ecc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ed0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ed4:	6863      	ldr	r3, [r4, #4]
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005edc:	fba7 2303 	umull	r2, r3, r7, r3
 8005ee0:	095b      	lsrs	r3, r3, #5
 8005ee2:	fb08 6813 	mls	r8, r8, r3, r6
 8005ee6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8005eea:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005eee:	fba7 3708 	umull	r3, r7, r7, r8
 8005ef2:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	442f      	add	r7, r5
 8005efa:	609f      	str	r7, [r3, #8]
 8005efc:	e0ad      	b.n	800605a <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005efe:	f7fe fff5 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 8005f02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f0a:	6865      	ldr	r5, [r4, #4]
 8005f0c:	006d      	lsls	r5, r5, #1
 8005f0e:	fbb0 f5f5 	udiv	r5, r0, r5
 8005f12:	4f54      	ldr	r7, [pc, #336]	; (8006064 <UART_SetConfig+0x330>)
 8005f14:	fba7 3505 	umull	r3, r5, r7, r5
 8005f18:	096d      	lsrs	r5, r5, #5
 8005f1a:	012e      	lsls	r6, r5, #4
 8005f1c:	f7fe ffe6 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 8005f20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f28:	6865      	ldr	r5, [r4, #4]
 8005f2a:	006d      	lsls	r5, r5, #1
 8005f2c:	fbb0 f9f5 	udiv	r9, r0, r5
 8005f30:	f7fe ffdc 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 8005f34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f3c:	6865      	ldr	r5, [r4, #4]
 8005f3e:	006d      	lsls	r5, r5, #1
 8005f40:	fbb0 f5f5 	udiv	r5, r0, r5
 8005f44:	fba7 3505 	umull	r3, r5, r7, r5
 8005f48:	096d      	lsrs	r5, r5, #5
 8005f4a:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005f4e:	fb08 9515 	mls	r5, r8, r5, r9
 8005f52:	00ed      	lsls	r5, r5, #3
 8005f54:	3532      	adds	r5, #50	; 0x32
 8005f56:	fba7 3505 	umull	r3, r5, r7, r5
 8005f5a:	096d      	lsrs	r5, r5, #5
 8005f5c:	006d      	lsls	r5, r5, #1
 8005f5e:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8005f62:	4435      	add	r5, r6
 8005f64:	f7fe ffc2 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 8005f68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f70:	6866      	ldr	r6, [r4, #4]
 8005f72:	0076      	lsls	r6, r6, #1
 8005f74:	fbb0 f6f6 	udiv	r6, r0, r6
 8005f78:	f7fe ffb8 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 8005f7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f84:	6863      	ldr	r3, [r4, #4]
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f8c:	fba7 2303 	umull	r2, r3, r7, r3
 8005f90:	095b      	lsrs	r3, r3, #5
 8005f92:	fb08 6813 	mls	r8, r8, r3, r6
 8005f96:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8005f9a:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005f9e:	fba7 3708 	umull	r3, r7, r7, r8
 8005fa2:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	442f      	add	r7, r5
 8005faa:	609f      	str	r7, [r3, #8]
 8005fac:	e055      	b.n	800605a <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005fae:	f7fe ff9d 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 8005fb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005fb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005fba:	6865      	ldr	r5, [r4, #4]
 8005fbc:	00ad      	lsls	r5, r5, #2
 8005fbe:	fbb0 f5f5 	udiv	r5, r0, r5
 8005fc2:	4f28      	ldr	r7, [pc, #160]	; (8006064 <UART_SetConfig+0x330>)
 8005fc4:	fba7 3505 	umull	r3, r5, r7, r5
 8005fc8:	096d      	lsrs	r5, r5, #5
 8005fca:	012e      	lsls	r6, r5, #4
 8005fcc:	f7fe ff8e 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 8005fd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005fd4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005fd8:	6865      	ldr	r5, [r4, #4]
 8005fda:	00ad      	lsls	r5, r5, #2
 8005fdc:	fbb0 f9f5 	udiv	r9, r0, r5
 8005fe0:	f7fe ff84 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 8005fe4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005fe8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005fec:	6865      	ldr	r5, [r4, #4]
 8005fee:	00ad      	lsls	r5, r5, #2
 8005ff0:	fbb0 f5f5 	udiv	r5, r0, r5
 8005ff4:	fba7 3505 	umull	r3, r5, r7, r5
 8005ff8:	096d      	lsrs	r5, r5, #5
 8005ffa:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005ffe:	fb08 9515 	mls	r5, r8, r5, r9
 8006002:	012d      	lsls	r5, r5, #4
 8006004:	3532      	adds	r5, #50	; 0x32
 8006006:	fba7 3505 	umull	r3, r5, r7, r5
 800600a:	096d      	lsrs	r5, r5, #5
 800600c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8006010:	4435      	add	r5, r6
 8006012:	f7fe ff6b 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 8006016:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800601a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800601e:	6866      	ldr	r6, [r4, #4]
 8006020:	00b6      	lsls	r6, r6, #2
 8006022:	fbb0 f6f6 	udiv	r6, r0, r6
 8006026:	f7fe ff61 	bl	8004eec <HAL_RCC_GetPCLK2Freq>
 800602a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800602e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006032:	6863      	ldr	r3, [r4, #4]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	fbb0 f0f3 	udiv	r0, r0, r3
 800603a:	fba7 3000 	umull	r3, r0, r7, r0
 800603e:	0940      	lsrs	r0, r0, #5
 8006040:	fb08 6810 	mls	r8, r8, r0, r6
 8006044:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8006048:	f108 0832 	add.w	r8, r8, #50	; 0x32
 800604c:	fba7 3708 	umull	r3, r7, r7, r8
 8006050:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	442f      	add	r7, r5
 8006058:	609f      	str	r7, [r3, #8]
}
 800605a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800605e:	bf00      	nop
 8006060:	40011000 	.word	0x40011000
 8006064:	51eb851f 	.word	0x51eb851f

08006068 <UART_WaitOnFlagUntilTimeout>:
{
 8006068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606c:	4605      	mov	r5, r0
 800606e:	460f      	mov	r7, r1
 8006070:	4616      	mov	r6, r2
 8006072:	4698      	mov	r8, r3
 8006074:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006076:	682b      	ldr	r3, [r5, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	ea37 0303 	bics.w	r3, r7, r3
 800607e:	bf0c      	ite	eq
 8006080:	2301      	moveq	r3, #1
 8006082:	2300      	movne	r3, #0
 8006084:	42b3      	cmp	r3, r6
 8006086:	d11d      	bne.n	80060c4 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8006088:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800608c:	d0f3      	beq.n	8006076 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800608e:	b12c      	cbz	r4, 800609c <UART_WaitOnFlagUntilTimeout+0x34>
 8006090:	f7fd f9a0 	bl	80033d4 <HAL_GetTick>
 8006094:	eba0 0008 	sub.w	r0, r0, r8
 8006098:	42a0      	cmp	r0, r4
 800609a:	d9ec      	bls.n	8006076 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800609c:	682a      	ldr	r2, [r5, #0]
 800609e:	68d3      	ldr	r3, [r2, #12]
 80060a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060a4:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a6:	682a      	ldr	r2, [r5, #0]
 80060a8:	6953      	ldr	r3, [r2, #20]
 80060aa:	f023 0301 	bic.w	r3, r3, #1
 80060ae:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80060b0:	2320      	movs	r3, #32
 80060b2:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80060b6:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80060ba:	2300      	movs	r3, #0
 80060bc:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 80060c0:	2003      	movs	r0, #3
 80060c2:	e000      	b.n	80060c6 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 80060c4:	2000      	movs	r0, #0
}
 80060c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080060ca <HAL_UART_Init>:
  if (huart == NULL)
 80060ca:	b358      	cbz	r0, 8006124 <HAL_UART_Init+0x5a>
{
 80060cc:	b510      	push	{r4, lr}
 80060ce:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80060d0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80060d4:	b30b      	cbz	r3, 800611a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80060d6:	2324      	movs	r3, #36	; 0x24
 80060d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80060dc:	6822      	ldr	r2, [r4, #0]
 80060de:	68d3      	ldr	r3, [r2, #12]
 80060e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060e4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80060e6:	4620      	mov	r0, r4
 80060e8:	f7ff fe24 	bl	8005d34 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ec:	6822      	ldr	r2, [r4, #0]
 80060ee:	6913      	ldr	r3, [r2, #16]
 80060f0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80060f4:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060f6:	6822      	ldr	r2, [r4, #0]
 80060f8:	6953      	ldr	r3, [r2, #20]
 80060fa:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80060fe:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8006100:	6822      	ldr	r2, [r4, #0]
 8006102:	68d3      	ldr	r3, [r2, #12]
 8006104:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006108:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800610a:	2000      	movs	r0, #0
 800610c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800610e:	2320      	movs	r3, #32
 8006110:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006114:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8006118:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800611a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800611e:	f000 fe57 	bl	8006dd0 <HAL_UART_MspInit>
 8006122:	e7d8      	b.n	80060d6 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8006124:	2001      	movs	r0, #1
}
 8006126:	4770      	bx	lr

08006128 <HAL_UART_Transmit>:
{
 8006128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006130:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b20      	cmp	r3, #32
 8006138:	d155      	bne.n	80061e6 <HAL_UART_Transmit+0xbe>
 800613a:	4604      	mov	r4, r0
 800613c:	460d      	mov	r5, r1
 800613e:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8006140:	2900      	cmp	r1, #0
 8006142:	d055      	beq.n	80061f0 <HAL_UART_Transmit+0xc8>
 8006144:	2a00      	cmp	r2, #0
 8006146:	d055      	beq.n	80061f4 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8006148:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800614c:	2b01      	cmp	r3, #1
 800614e:	d053      	beq.n	80061f8 <HAL_UART_Transmit+0xd0>
 8006150:	2301      	movs	r3, #1
 8006152:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006156:	2300      	movs	r3, #0
 8006158:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800615a:	2321      	movs	r3, #33	; 0x21
 800615c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8006160:	f7fd f938 	bl	80033d4 <HAL_GetTick>
 8006164:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8006166:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800616a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800616e:	e010      	b.n	8006192 <HAL_UART_Transmit+0x6a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006170:	9600      	str	r6, [sp, #0]
 8006172:	463b      	mov	r3, r7
 8006174:	2200      	movs	r2, #0
 8006176:	2180      	movs	r1, #128	; 0x80
 8006178:	4620      	mov	r0, r4
 800617a:	f7ff ff75 	bl	8006068 <UART_WaitOnFlagUntilTimeout>
 800617e:	2800      	cmp	r0, #0
 8006180:	d13c      	bne.n	80061fc <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006182:	882b      	ldrh	r3, [r5, #0]
 8006184:	6822      	ldr	r2, [r4, #0]
 8006186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800618a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800618c:	6923      	ldr	r3, [r4, #16]
 800618e:	b9c3      	cbnz	r3, 80061c2 <HAL_UART_Transmit+0x9a>
          pData += 2U;
 8006190:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8006192:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006194:	b29b      	uxth	r3, r3
 8006196:	b1b3      	cbz	r3, 80061c6 <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 8006198:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800619a:	3b01      	subs	r3, #1
 800619c:	b29b      	uxth	r3, r3
 800619e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80061a0:	68a3      	ldr	r3, [r4, #8]
 80061a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a6:	d0e3      	beq.n	8006170 <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061a8:	9600      	str	r6, [sp, #0]
 80061aa:	463b      	mov	r3, r7
 80061ac:	2200      	movs	r2, #0
 80061ae:	2180      	movs	r1, #128	; 0x80
 80061b0:	4620      	mov	r0, r4
 80061b2:	f7ff ff59 	bl	8006068 <UART_WaitOnFlagUntilTimeout>
 80061b6:	bb18      	cbnz	r0, 8006200 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80061b8:	782a      	ldrb	r2, [r5, #0]
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	605a      	str	r2, [r3, #4]
 80061be:	3501      	adds	r5, #1
 80061c0:	e7e7      	b.n	8006192 <HAL_UART_Transmit+0x6a>
          pData += 1U;
 80061c2:	3501      	adds	r5, #1
 80061c4:	e7e5      	b.n	8006192 <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061c6:	9600      	str	r6, [sp, #0]
 80061c8:	463b      	mov	r3, r7
 80061ca:	2200      	movs	r2, #0
 80061cc:	2140      	movs	r1, #64	; 0x40
 80061ce:	4620      	mov	r0, r4
 80061d0:	f7ff ff4a 	bl	8006068 <UART_WaitOnFlagUntilTimeout>
 80061d4:	4603      	mov	r3, r0
 80061d6:	b9a8      	cbnz	r0, 8006204 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 80061d8:	2220      	movs	r2, #32
 80061da:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80061de:	2200      	movs	r2, #0
 80061e0:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 80061e4:	e000      	b.n	80061e8 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 80061e6:	2302      	movs	r3, #2
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	b002      	add	sp, #8
 80061ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e7f9      	b.n	80061e8 <HAL_UART_Transmit+0xc0>
 80061f4:	2301      	movs	r3, #1
 80061f6:	e7f7      	b.n	80061e8 <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 80061f8:	2302      	movs	r3, #2
 80061fa:	e7f5      	b.n	80061e8 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e7f3      	b.n	80061e8 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e7f1      	b.n	80061e8 <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e7ef      	b.n	80061e8 <HAL_UART_Transmit+0xc0>

08006208 <HAL_UART_TxCpltCallback>:
}
 8006208:	4770      	bx	lr

0800620a <UART_EndTransmit_IT>:
{
 800620a:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800620c:	6801      	ldr	r1, [r0, #0]
 800620e:	68cb      	ldr	r3, [r1, #12]
 8006210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006214:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006216:	2320      	movs	r3, #32
 8006218:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800621c:	f7ff fff4 	bl	8006208 <HAL_UART_TxCpltCallback>
}
 8006220:	2000      	movs	r0, #0
 8006222:	bd08      	pop	{r3, pc}

08006224 <HAL_UART_RxCpltCallback>:
}
 8006224:	4770      	bx	lr

08006226 <UART_Receive_IT>:
{
 8006226:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006228:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b22      	cmp	r3, #34	; 0x22
 8006230:	d145      	bne.n	80062be <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006232:	6883      	ldr	r3, [r0, #8]
 8006234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006238:	d00e      	beq.n	8006258 <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800623a:	6903      	ldr	r3, [r0, #16]
 800623c:	bb03      	cbnz	r3, 8006280 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800623e:	6803      	ldr	r3, [r0, #0]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006244:	1c59      	adds	r1, r3, #1
 8006246:	6281      	str	r1, [r0, #40]	; 0x28
 8006248:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 800624a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800624c:	3b01      	subs	r3, #1
 800624e:	b29b      	uxth	r3, r3
 8006250:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8006252:	b1f3      	cbz	r3, 8006292 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8006254:	2000      	movs	r0, #0
 8006256:	e033      	b.n	80062c0 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006258:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 800625a:	6903      	ldr	r3, [r0, #16]
 800625c:	b943      	cbnz	r3, 8006270 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800625e:	6803      	ldr	r3, [r0, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006266:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8006268:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800626a:	3302      	adds	r3, #2
 800626c:	6283      	str	r3, [r0, #40]	; 0x28
 800626e:	e7ec      	b.n	800624a <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006270:	6803      	ldr	r3, [r0, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	b2db      	uxtb	r3, r3
 8006276:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8006278:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800627a:	3301      	adds	r3, #1
 800627c:	6283      	str	r3, [r0, #40]	; 0x28
 800627e:	e7e4      	b.n	800624a <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006280:	6803      	ldr	r3, [r0, #0]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006286:	1c51      	adds	r1, r2, #1
 8006288:	6281      	str	r1, [r0, #40]	; 0x28
 800628a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800628e:	7013      	strb	r3, [r2, #0]
 8006290:	e7db      	b.n	800624a <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006292:	6802      	ldr	r2, [r0, #0]
 8006294:	68d3      	ldr	r3, [r2, #12]
 8006296:	f023 0320 	bic.w	r3, r3, #32
 800629a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800629c:	6802      	ldr	r2, [r0, #0]
 800629e:	68d3      	ldr	r3, [r2, #12]
 80062a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062a4:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062a6:	6802      	ldr	r2, [r0, #0]
 80062a8:	6953      	ldr	r3, [r2, #20]
 80062aa:	f023 0301 	bic.w	r3, r3, #1
 80062ae:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80062b0:	2320      	movs	r3, #32
 80062b2:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80062b6:	f7ff ffb5 	bl	8006224 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80062ba:	2000      	movs	r0, #0
 80062bc:	e000      	b.n	80062c0 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 80062be:	2002      	movs	r0, #2
}
 80062c0:	bd08      	pop	{r3, pc}

080062c2 <HAL_UART_ErrorCallback>:
}
 80062c2:	4770      	bx	lr

080062c4 <HAL_UART_IRQHandler>:
{
 80062c4:	b510      	push	{r4, lr}
 80062c6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80062c8:	6802      	ldr	r2, [r0, #0]
 80062ca:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062cc:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062ce:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 80062d0:	f013 000f 	ands.w	r0, r3, #15
 80062d4:	d105      	bne.n	80062e2 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062d6:	f013 0f20 	tst.w	r3, #32
 80062da:	d002      	beq.n	80062e2 <HAL_UART_IRQHandler+0x1e>
 80062dc:	f011 0f20 	tst.w	r1, #32
 80062e0:	d153      	bne.n	800638a <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d067      	beq.n	80063b6 <HAL_UART_IRQHandler+0xf2>
 80062e6:	f012 0201 	ands.w	r2, r2, #1
 80062ea:	d102      	bne.n	80062f2 <HAL_UART_IRQHandler+0x2e>
 80062ec:	f411 7f90 	tst.w	r1, #288	; 0x120
 80062f0:	d061      	beq.n	80063b6 <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062f2:	f013 0f01 	tst.w	r3, #1
 80062f6:	d006      	beq.n	8006306 <HAL_UART_IRQHandler+0x42>
 80062f8:	f411 7f80 	tst.w	r1, #256	; 0x100
 80062fc:	d003      	beq.n	8006306 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006300:	f040 0001 	orr.w	r0, r0, #1
 8006304:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006306:	f013 0f04 	tst.w	r3, #4
 800630a:	d004      	beq.n	8006316 <HAL_UART_IRQHandler+0x52>
 800630c:	b11a      	cbz	r2, 8006316 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800630e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006310:	f040 0002 	orr.w	r0, r0, #2
 8006314:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006316:	f013 0f02 	tst.w	r3, #2
 800631a:	d004      	beq.n	8006326 <HAL_UART_IRQHandler+0x62>
 800631c:	b11a      	cbz	r2, 8006326 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800631e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006320:	f040 0004 	orr.w	r0, r0, #4
 8006324:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006326:	f013 0f08 	tst.w	r3, #8
 800632a:	d004      	beq.n	8006336 <HAL_UART_IRQHandler+0x72>
 800632c:	b11a      	cbz	r2, 8006336 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800632e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006330:	f042 0208 	orr.w	r2, r2, #8
 8006334:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006336:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006338:	2a00      	cmp	r2, #0
 800633a:	d048      	beq.n	80063ce <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800633c:	f013 0f20 	tst.w	r3, #32
 8006340:	d002      	beq.n	8006348 <HAL_UART_IRQHandler+0x84>
 8006342:	f011 0f20 	tst.w	r1, #32
 8006346:	d124      	bne.n	8006392 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006350:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006352:	f012 0f08 	tst.w	r2, #8
 8006356:	d100      	bne.n	800635a <HAL_UART_IRQHandler+0x96>
 8006358:	b33b      	cbz	r3, 80063aa <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 800635a:	4620      	mov	r0, r4
 800635c:	f7ff fca8 	bl	8005cb0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	695a      	ldr	r2, [r3, #20]
 8006364:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006368:	d01b      	beq.n	80063a2 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800636a:	695a      	ldr	r2, [r3, #20]
 800636c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006370:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8006372:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006374:	b18b      	cbz	r3, 800639a <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006376:	4a1a      	ldr	r2, [pc, #104]	; (80063e0 <HAL_UART_IRQHandler+0x11c>)
 8006378:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800637a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800637c:	f7fd fb12 	bl	80039a4 <HAL_DMA_Abort_IT>
 8006380:	b328      	cbz	r0, 80063ce <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006382:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006384:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006386:	4798      	blx	r3
 8006388:	e021      	b.n	80063ce <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 800638a:	4620      	mov	r0, r4
 800638c:	f7ff ff4b 	bl	8006226 <UART_Receive_IT>
      return;
 8006390:	e01d      	b.n	80063ce <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 8006392:	4620      	mov	r0, r4
 8006394:	f7ff ff47 	bl	8006226 <UART_Receive_IT>
 8006398:	e7d6      	b.n	8006348 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 800639a:	4620      	mov	r0, r4
 800639c:	f7ff ff91 	bl	80062c2 <HAL_UART_ErrorCallback>
 80063a0:	e015      	b.n	80063ce <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 80063a2:	4620      	mov	r0, r4
 80063a4:	f7ff ff8d 	bl	80062c2 <HAL_UART_ErrorCallback>
 80063a8:	e011      	b.n	80063ce <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 80063aa:	4620      	mov	r0, r4
 80063ac:	f7ff ff89 	bl	80062c2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b0:	2300      	movs	r3, #0
 80063b2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80063b4:	e00b      	b.n	80063ce <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80063ba:	d002      	beq.n	80063c2 <HAL_UART_IRQHandler+0xfe>
 80063bc:	f011 0f80 	tst.w	r1, #128	; 0x80
 80063c0:	d106      	bne.n	80063d0 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063c2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80063c6:	d002      	beq.n	80063ce <HAL_UART_IRQHandler+0x10a>
 80063c8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80063cc:	d104      	bne.n	80063d8 <HAL_UART_IRQHandler+0x114>
}
 80063ce:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 80063d0:	4620      	mov	r0, r4
 80063d2:	f7ff fc7b 	bl	8005ccc <UART_Transmit_IT>
    return;
 80063d6:	e7fa      	b.n	80063ce <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 80063d8:	4620      	mov	r0, r4
 80063da:	f7ff ff16 	bl	800620a <UART_EndTransmit_IT>
    return;
 80063de:	e7f6      	b.n	80063ce <HAL_UART_IRQHandler+0x10a>
 80063e0:	080063e5 	.word	0x080063e5

080063e4 <UART_DMAAbortOnError>:
{
 80063e4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063ec:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80063ee:	f7ff ff68 	bl	80062c2 <HAL_UART_ErrorCallback>
}
 80063f2:	bd08      	pop	{r3, pc}

080063f4 <arm_add_f32>:
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 80063f4:	e00b      	b.n	800640e <arm_add_f32+0x1a>
  {
    /* C = A + B */

    /* Add and store result in destination buffer. */
    *pDst++ = (*pSrcA++) + (*pSrcB++);
 80063f6:	edd0 7a00 	vldr	s15, [r0]
 80063fa:	ed91 7a00 	vldr	s14, [r1]
 80063fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006402:	edc2 7a00 	vstr	s15, [r2]

    /* Decrement loop counter */
    blkCnt--;
 8006406:	3b01      	subs	r3, #1
    *pDst++ = (*pSrcA++) + (*pSrcB++);
 8006408:	3204      	adds	r2, #4
 800640a:	3104      	adds	r1, #4
 800640c:	3004      	adds	r0, #4
  while (blkCnt > 0U)
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1f1      	bne.n	80063f6 <arm_add_f32+0x2>
  }

}
 8006412:	4770      	bx	lr

08006414 <arm_mult_f32>:
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8006414:	e00b      	b.n	800642e <arm_mult_f32+0x1a>
  {
    /* C = A * B */

    /* Multiply input and store result in destination buffer. */
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 8006416:	edd0 7a00 	vldr	s15, [r0]
 800641a:	ed91 7a00 	vldr	s14, [r1]
 800641e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006422:	edc2 7a00 	vstr	s15, [r2]

    /* Decrement loop counter */
    blkCnt--;
 8006426:	3b01      	subs	r3, #1
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 8006428:	3204      	adds	r2, #4
 800642a:	3104      	adds	r1, #4
 800642c:	3004      	adds	r0, #4
  while (blkCnt > 0U)
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1f1      	bne.n	8006416 <arm_mult_f32+0x2>
  }

}
 8006432:	4770      	bx	lr

08006434 <arm_sub_f32>:
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8006434:	e00b      	b.n	800644e <arm_sub_f32+0x1a>
  {
    /* C = A - B */

    /* Subtract and store result in destination buffer. */
    *pDst++ = (*pSrcA++) - (*pSrcB++);
 8006436:	edd0 7a00 	vldr	s15, [r0]
 800643a:	ed91 7a00 	vldr	s14, [r1]
 800643e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006442:	edc2 7a00 	vstr	s15, [r2]

    /* Decrement loop counter */
    blkCnt--;
 8006446:	3b01      	subs	r3, #1
    *pDst++ = (*pSrcA++) - (*pSrcB++);
 8006448:	3204      	adds	r2, #4
 800644a:	3104      	adds	r1, #4
 800644c:	3004      	adds	r0, #4
  while (blkCnt > 0U)
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1f1      	bne.n	8006436 <arm_sub_f32+0x2>
  }

}
 8006452:	4770      	bx	lr

08006454 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8006454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006458:	b08a      	sub	sp, #40	; 0x28
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800645a:	2400      	movs	r4, #0
 800645c:	9405      	str	r4, [sp, #20]
 800645e:	9406      	str	r4, [sp, #24]
 8006460:	9407      	str	r4, [sp, #28]
 8006462:	9408      	str	r4, [sp, #32]
 8006464:	9409      	str	r4, [sp, #36]	; 0x24

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8006466:	9401      	str	r4, [sp, #4]
 8006468:	4b36      	ldr	r3, [pc, #216]	; (8006544 <MX_GPIO_Init+0xf0>)
 800646a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800646c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006470:	631a      	str	r2, [r3, #48]	; 0x30
 8006472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006474:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006478:	9201      	str	r2, [sp, #4]
 800647a:	9a01      	ldr	r2, [sp, #4]
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800647c:	9402      	str	r4, [sp, #8]
 800647e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006480:	f042 0204 	orr.w	r2, r2, #4
 8006484:	631a      	str	r2, [r3, #48]	; 0x30
 8006486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006488:	f002 0204 	and.w	r2, r2, #4
 800648c:	9202      	str	r2, [sp, #8]
 800648e:	9a02      	ldr	r2, [sp, #8]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8006490:	9403      	str	r4, [sp, #12]
 8006492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006494:	f042 0201 	orr.w	r2, r2, #1
 8006498:	631a      	str	r2, [r3, #48]	; 0x30
 800649a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800649c:	f002 0201 	and.w	r2, r2, #1
 80064a0:	9203      	str	r2, [sp, #12]
 80064a2:	9a03      	ldr	r2, [sp, #12]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80064a4:	9404      	str	r4, [sp, #16]
 80064a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064a8:	f042 0202 	orr.w	r2, r2, #2
 80064ac:	631a      	str	r2, [r3, #48]	; 0x30
 80064ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b0:	f003 0302 	and.w	r3, r3, #2
 80064b4:	9304      	str	r3, [sp, #16]
 80064b6:	9b04      	ldr	r3, [sp, #16]
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80064b8:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8006554 <MX_GPIO_Init+0x100>
 80064bc:	4622      	mov	r2, r4
 80064be:	2108      	movs	r1, #8
 80064c0:	4640      	mov	r0, r8
 80064c2:	f7fd fc43 	bl	8003d4c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80064c6:	4d20      	ldr	r5, [pc, #128]	; (8006548 <MX_GPIO_Init+0xf4>)
 80064c8:	4622      	mov	r2, r4
 80064ca:	2120      	movs	r1, #32
 80064cc:	4628      	mov	r0, r5
 80064ce:	f7fd fc3d 	bl	8003d4c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, CE_Pin | CSN_Pin, GPIO_PIN_RESET);
 80064d2:	4f1e      	ldr	r7, [pc, #120]	; (800654c <MX_GPIO_Init+0xf8>)
 80064d4:	4622      	mov	r2, r4
 80064d6:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80064da:	4638      	mov	r0, r7
 80064dc:	f7fd fc36 	bl	8003d4c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80064e0:	2308      	movs	r3, #8
 80064e2:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064e4:	2601      	movs	r6, #1
 80064e6:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064e8:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064ea:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064ec:	a905      	add	r1, sp, #20
 80064ee:	4640      	mov	r0, r8
 80064f0:	f7fd fb5a 	bl	8003ba8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80064f4:	2320      	movs	r3, #32
 80064f6:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80064f8:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064fa:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064fc:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064fe:	a905      	add	r1, sp, #20
 8006500:	4628      	mov	r0, r5
 8006502:	f7fd fb51 	bl	8003ba8 <HAL_GPIO_Init>

	/*Configure GPIO pins : CE_Pin CSN_Pin */
	GPIO_InitStruct.Pin = CE_Pin | CSN_Pin;
 8006506:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800650a:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800650c:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800650e:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006510:	9408      	str	r4, [sp, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006512:	a905      	add	r1, sp, #20
 8006514:	4638      	mov	r0, r7
 8006516:	f7fd fb47 	bl	8003ba8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PWM_RE_INT_Pin */
	GPIO_InitStruct.Pin = PWM_RE_INT_Pin;
 800651a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800651e:	9305      	str	r3, [sp, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006520:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <MX_GPIO_Init+0xfc>)
 8006522:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006524:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(PWM_RE_INT_GPIO_Port, &GPIO_InitStruct);
 8006526:	a905      	add	r1, sp, #20
 8006528:	4628      	mov	r0, r5
 800652a:	f7fd fb3d 	bl	8003ba8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800652e:	4622      	mov	r2, r4
 8006530:	4621      	mov	r1, r4
 8006532:	2017      	movs	r0, #23
 8006534:	f7fd f912 	bl	800375c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006538:	2017      	movs	r0, #23
 800653a:	f7fd f943 	bl	80037c4 <HAL_NVIC_EnableIRQ>

}
 800653e:	b00a      	add	sp, #40	; 0x28
 8006540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006544:	40023800 	.word	0x40023800
 8006548:	40020000 	.word	0x40020000
 800654c:	40020400 	.word	0x40020400
 8006550:	10110000 	.word	0x10110000
 8006554:	40020800 	.word	0x40020800

08006558 <MX_DMA_Init>:
static void MX_DMA_Init(void) {
 8006558:	b510      	push	{r4, lr}
 800655a:	b082      	sub	sp, #8
	__HAL_RCC_DMA1_CLK_ENABLE()
 800655c:	2400      	movs	r4, #0
 800655e:	9401      	str	r4, [sp, #4]
 8006560:	4b0d      	ldr	r3, [pc, #52]	; (8006598 <MX_DMA_Init+0x40>)
 8006562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006564:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8006568:	631a      	str	r2, [r3, #48]	; 0x30
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006570:	9301      	str	r3, [sp, #4]
 8006572:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8006574:	4622      	mov	r2, r4
 8006576:	4621      	mov	r1, r4
 8006578:	2010      	movs	r0, #16
 800657a:	f7fd f8ef 	bl	800375c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800657e:	2010      	movs	r0, #16
 8006580:	f7fd f920 	bl	80037c4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8006584:	4622      	mov	r2, r4
 8006586:	4621      	mov	r1, r4
 8006588:	2011      	movs	r0, #17
 800658a:	f7fd f8e7 	bl	800375c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800658e:	2011      	movs	r0, #17
 8006590:	f7fd f918 	bl	80037c4 <HAL_NVIC_EnableIRQ>
}
 8006594:	b002      	add	sp, #8
 8006596:	bd10      	pop	{r4, pc}
 8006598:	40023800 	.word	0x40023800

0800659c <MX_USART2_UART_Init>:
static void MX_USART2_UART_Init(void) {
 800659c:	b508      	push	{r3, lr}
	huart2.Instance = USART2;
 800659e:	4808      	ldr	r0, [pc, #32]	; (80065c0 <MX_USART2_UART_Init+0x24>)
 80065a0:	4b08      	ldr	r3, [pc, #32]	; (80065c4 <MX_USART2_UART_Init+0x28>)
 80065a2:	6003      	str	r3, [r0, #0]
	huart2.Init.BaudRate = 115200;
 80065a4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80065a8:	6043      	str	r3, [r0, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80065aa:	2300      	movs	r3, #0
 80065ac:	6083      	str	r3, [r0, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80065ae:	60c3      	str	r3, [r0, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80065b0:	6103      	str	r3, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80065b2:	220c      	movs	r2, #12
 80065b4:	6142      	str	r2, [r0, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80065b6:	6183      	str	r3, [r0, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80065b8:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80065ba:	f7ff fd86 	bl	80060ca <HAL_UART_Init>
}
 80065be:	bd08      	pop	{r3, pc}
 80065c0:	20000704 	.word	0x20000704
 80065c4:	40004400 	.word	0x40004400

080065c8 <MX_USART6_UART_Init>:
static void MX_USART6_UART_Init(void) {
 80065c8:	b508      	push	{r3, lr}
	huart6.Instance = USART6;
 80065ca:	4808      	ldr	r0, [pc, #32]	; (80065ec <MX_USART6_UART_Init+0x24>)
 80065cc:	4b08      	ldr	r3, [pc, #32]	; (80065f0 <MX_USART6_UART_Init+0x28>)
 80065ce:	6003      	str	r3, [r0, #0]
	huart6.Init.BaudRate = 115200;
 80065d0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80065d4:	6043      	str	r3, [r0, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80065d6:	2300      	movs	r3, #0
 80065d8:	6083      	str	r3, [r0, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80065da:	60c3      	str	r3, [r0, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80065dc:	6103      	str	r3, [r0, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80065de:	220c      	movs	r2, #12
 80065e0:	6142      	str	r2, [r0, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80065e2:	6183      	str	r3, [r0, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80065e4:	61c3      	str	r3, [r0, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 80065e6:	f7ff fd70 	bl	80060ca <HAL_UART_Init>
}
 80065ea:	bd08      	pop	{r3, pc}
 80065ec:	20000684 	.word	0x20000684
 80065f0:	40011400 	.word	0x40011400

080065f4 <MX_I2C2_Init>:
static void MX_I2C2_Init(void) {
 80065f4:	b508      	push	{r3, lr}
	hi2c2.Instance = I2C2;
 80065f6:	4809      	ldr	r0, [pc, #36]	; (800661c <MX_I2C2_Init+0x28>)
 80065f8:	4b09      	ldr	r3, [pc, #36]	; (8006620 <MX_I2C2_Init+0x2c>)
 80065fa:	6003      	str	r3, [r0, #0]
	hi2c2.Init.ClockSpeed = 400000;
 80065fc:	4b09      	ldr	r3, [pc, #36]	; (8006624 <MX_I2C2_Init+0x30>)
 80065fe:	6043      	str	r3, [r0, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006600:	2300      	movs	r3, #0
 8006602:	6083      	str	r3, [r0, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8006604:	60c3      	str	r3, [r0, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006606:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800660a:	6102      	str	r2, [r0, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800660c:	6143      	str	r3, [r0, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800660e:	6183      	str	r3, [r0, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006610:	61c3      	str	r3, [r0, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006612:	6203      	str	r3, [r0, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8006614:	f7fd fdbc 	bl	8004190 <HAL_I2C_Init>
}
 8006618:	bd08      	pop	{r3, pc}
 800661a:	bf00      	nop
 800661c:	20000398 	.word	0x20000398
 8006620:	40005800 	.word	0x40005800
 8006624:	00061a80 	.word	0x00061a80

08006628 <MX_TIM3_Init>:
static void MX_TIM3_Init(void) {
 8006628:	b530      	push	{r4, r5, lr}
 800662a:	b087      	sub	sp, #28
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800662c:	2400      	movs	r4, #0
 800662e:	9402      	str	r4, [sp, #8]
 8006630:	9403      	str	r4, [sp, #12]
 8006632:	9404      	str	r4, [sp, #16]
 8006634:	9405      	str	r4, [sp, #20]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8006636:	9400      	str	r4, [sp, #0]
 8006638:	9401      	str	r4, [sp, #4]
	htim3.Instance = TIM3;
 800663a:	4d0f      	ldr	r5, [pc, #60]	; (8006678 <MX_TIM3_Init+0x50>)
 800663c:	4b0f      	ldr	r3, [pc, #60]	; (800667c <MX_TIM3_Init+0x54>)
 800663e:	602b      	str	r3, [r5, #0]
	htim3.Init.Prescaler = 2000;
 8006640:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006644:	606b      	str	r3, [r5, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006646:	60ac      	str	r4, [r5, #8]
	htim3.Init.Period = 65535;
 8006648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800664c:	60eb      	str	r3, [r5, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800664e:	612c      	str	r4, [r5, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006650:	61ac      	str	r4, [r5, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8006652:	4628      	mov	r0, r5
 8006654:	f7ff f9bc 	bl	80059d0 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800665c:	9302      	str	r3, [sp, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800665e:	a902      	add	r1, sp, #8
 8006660:	4628      	mov	r0, r5
 8006662:	f7ff fa93 	bl	8005b8c <HAL_TIM_ConfigClockSource>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006666:	9400      	str	r4, [sp, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006668:	9401      	str	r4, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800666a:	4669      	mov	r1, sp
 800666c:	4628      	mov	r0, r5
 800666e:	f7ff fafa 	bl	8005c66 <HAL_TIMEx_MasterConfigSynchronization>
}
 8006672:	b007      	add	sp, #28
 8006674:	bd30      	pop	{r4, r5, pc}
 8006676:	bf00      	nop
 8006678:	2000054c 	.word	0x2000054c
 800667c:	40000400 	.word	0x40000400

08006680 <MX_TIM4_Init>:
static void MX_TIM4_Init(void) {
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	b08a      	sub	sp, #40	; 0x28
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8006684:	2400      	movs	r4, #0
 8006686:	9408      	str	r4, [sp, #32]
 8006688:	9409      	str	r4, [sp, #36]	; 0x24
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800668a:	9401      	str	r4, [sp, #4]
 800668c:	9402      	str	r4, [sp, #8]
 800668e:	9403      	str	r4, [sp, #12]
 8006690:	9404      	str	r4, [sp, #16]
 8006692:	9405      	str	r4, [sp, #20]
 8006694:	9406      	str	r4, [sp, #24]
 8006696:	9407      	str	r4, [sp, #28]
	htim4.Instance = TIM4;
 8006698:	4d1b      	ldr	r5, [pc, #108]	; (8006708 <MX_TIM4_Init+0x88>)
 800669a:	4b1c      	ldr	r3, [pc, #112]	; (800670c <MX_TIM4_Init+0x8c>)
 800669c:	602b      	str	r3, [r5, #0]
	htim4.Init.Prescaler = 9;
 800669e:	2309      	movs	r3, #9
 80066a0:	606b      	str	r3, [r5, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066a2:	60ac      	str	r4, [r5, #8]
	htim4.Init.Period = 20000;
 80066a4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80066a8:	60eb      	str	r3, [r5, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066aa:	612c      	str	r4, [r5, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066ac:	61ac      	str	r4, [r5, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80066ae:	4628      	mov	r0, r5
 80066b0:	f7ff f9a7 	bl	8005a02 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066b4:	9408      	str	r4, [sp, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066b6:	9409      	str	r4, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80066b8:	a908      	add	r1, sp, #32
 80066ba:	4628      	mov	r0, r5
 80066bc:	f7ff fad3 	bl	8005c66 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80066c0:	2360      	movs	r3, #96	; 0x60
 80066c2:	9301      	str	r3, [sp, #4]
	sConfigOC.Pulse = 0;
 80066c4:	9402      	str	r4, [sp, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80066c6:	9403      	str	r4, [sp, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80066c8:	2604      	movs	r6, #4
 80066ca:	9605      	str	r6, [sp, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 80066cc:	4622      	mov	r2, r4
 80066ce:	eb0d 0106 	add.w	r1, sp, r6
 80066d2:	4628      	mov	r0, r5
 80066d4:	f7ff f9e0 	bl	8005a98 <HAL_TIM_PWM_ConfigChannel>
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 80066d8:	4632      	mov	r2, r6
 80066da:	eb0d 0106 	add.w	r1, sp, r6
 80066de:	4628      	mov	r0, r5
 80066e0:	f7ff f9da 	bl	8005a98 <HAL_TIM_PWM_ConfigChannel>
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 80066e4:	2208      	movs	r2, #8
 80066e6:	eb0d 0106 	add.w	r1, sp, r6
 80066ea:	4628      	mov	r0, r5
 80066ec:	f7ff f9d4 	bl	8005a98 <HAL_TIM_PWM_ConfigChannel>
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 80066f0:	220c      	movs	r2, #12
 80066f2:	eb0d 0106 	add.w	r1, sp, r6
 80066f6:	4628      	mov	r0, r5
 80066f8:	f7ff f9ce 	bl	8005a98 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim4);
 80066fc:	4628      	mov	r0, r5
 80066fe:	f000 fb2f 	bl	8006d60 <HAL_TIM_MspPostInit>
}
 8006702:	b00a      	add	sp, #40	; 0x28
 8006704:	bd70      	pop	{r4, r5, r6, pc}
 8006706:	bf00      	nop
 8006708:	2000050c 	.word	0x2000050c
 800670c:	40000800 	.word	0x40000800

08006710 <MX_ADC1_Init>:
static void MX_ADC1_Init(void) {
 8006710:	b570      	push	{r4, r5, r6, lr}
 8006712:	b084      	sub	sp, #16
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8006714:	2500      	movs	r5, #0
 8006716:	9500      	str	r5, [sp, #0]
 8006718:	9501      	str	r5, [sp, #4]
 800671a:	9502      	str	r5, [sp, #8]
 800671c:	9503      	str	r5, [sp, #12]
	hadc1.Instance = ADC1;
 800671e:	4c10      	ldr	r4, [pc, #64]	; (8006760 <MX_ADC1_Init+0x50>)
 8006720:	4b10      	ldr	r3, [pc, #64]	; (8006764 <MX_ADC1_Init+0x54>)
 8006722:	6023      	str	r3, [r4, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006724:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006728:	6063      	str	r3, [r4, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800672a:	60a5      	str	r5, [r4, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800672c:	6125      	str	r5, [r4, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800672e:	7625      	strb	r5, [r4, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006730:	f884 5020 	strb.w	r5, [r4, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006734:	62e5      	str	r5, [r4, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006736:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <MX_ADC1_Init+0x58>)
 8006738:	62a3      	str	r3, [r4, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800673a:	60e5      	str	r5, [r4, #12]
	hadc1.Init.NbrOfConversion = 1;
 800673c:	2601      	movs	r6, #1
 800673e:	61e6      	str	r6, [r4, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8006740:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006744:	6166      	str	r6, [r4, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8006746:	4620      	mov	r0, r4
 8006748:	f7fc fef8 	bl	800353c <HAL_ADC_Init>
	sConfig.Channel = ADC_CHANNEL_8;
 800674c:	2308      	movs	r3, #8
 800674e:	9300      	str	r3, [sp, #0]
	sConfig.Rank = 1;
 8006750:	9601      	str	r6, [sp, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006752:	9502      	str	r5, [sp, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8006754:	4669      	mov	r1, sp
 8006756:	4620      	mov	r0, r4
 8006758:	f7fc ff1c 	bl	8003594 <HAL_ADC_ConfigChannel>
}
 800675c:	b004      	add	sp, #16
 800675e:	bd70      	pop	{r4, r5, r6, pc}
 8006760:	200005b0 	.word	0x200005b0
 8006764:	40012000 	.word	0x40012000
 8006768:	0f000001 	.word	0x0f000001

0800676c <MX_SPI2_Init>:
static void MX_SPI2_Init(void) {
 800676c:	b508      	push	{r3, lr}
	hspi2.Instance = SPI2;
 800676e:	480c      	ldr	r0, [pc, #48]	; (80067a0 <MX_SPI2_Init+0x34>)
 8006770:	4b0c      	ldr	r3, [pc, #48]	; (80067a4 <MX_SPI2_Init+0x38>)
 8006772:	6003      	str	r3, [r0, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8006774:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006778:	6043      	str	r3, [r0, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800677a:	2300      	movs	r3, #0
 800677c:	6083      	str	r3, [r0, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800677e:	60c3      	str	r3, [r0, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006780:	6103      	str	r3, [r0, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006782:	6143      	str	r3, [r0, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8006784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006788:	6182      	str	r2, [r0, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800678a:	2228      	movs	r2, #40	; 0x28
 800678c:	61c2      	str	r2, [r0, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800678e:	6203      	str	r3, [r0, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006790:	6243      	str	r3, [r0, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006792:	6283      	str	r3, [r0, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8006794:	230a      	movs	r3, #10
 8006796:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8006798:	f7fe fc80 	bl	800509c <HAL_SPI_Init>
}
 800679c:	bd08      	pop	{r3, pc}
 800679e:	bf00      	nop
 80067a0:	200004b4 	.word	0x200004b4
 80067a4:	40003800 	.word	0x40003800

080067a8 <SystemClock_Config>:
void SystemClock_Config(void) {
 80067a8:	b530      	push	{r4, r5, lr}
 80067aa:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80067ac:	2230      	movs	r2, #48	; 0x30
 80067ae:	2100      	movs	r1, #0
 80067b0:	a808      	add	r0, sp, #32
 80067b2:	f000 fcae 	bl	8007112 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80067b6:	2400      	movs	r4, #0
 80067b8:	9403      	str	r4, [sp, #12]
 80067ba:	9404      	str	r4, [sp, #16]
 80067bc:	9405      	str	r4, [sp, #20]
 80067be:	9406      	str	r4, [sp, #24]
 80067c0:	9407      	str	r4, [sp, #28]
	__HAL_RCC_PWR_CLK_ENABLE()
 80067c2:	9401      	str	r4, [sp, #4]
 80067c4:	4b1a      	ldr	r3, [pc, #104]	; (8006830 <SystemClock_Config+0x88>)
 80067c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80067cc:	641a      	str	r2, [r3, #64]	; 0x40
 80067ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067d4:	9301      	str	r3, [sp, #4]
 80067d6:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80067d8:	9402      	str	r4, [sp, #8]
 80067da:	4b16      	ldr	r3, [pc, #88]	; (8006834 <SystemClock_Config+0x8c>)
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80067ea:	9302      	str	r3, [sp, #8]
 80067ec:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80067ee:	2502      	movs	r5, #2
 80067f0:	9508      	str	r5, [sp, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80067f2:	2301      	movs	r3, #1
 80067f4:	930b      	str	r3, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80067f6:	2310      	movs	r3, #16
 80067f8:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80067fa:	950e      	str	r5, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80067fc:	940f      	str	r4, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80067fe:	2308      	movs	r3, #8
 8006800:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8006802:	2364      	movs	r3, #100	; 0x64
 8006804:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006806:	9512      	str	r5, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8006808:	2304      	movs	r3, #4
 800680a:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800680c:	a808      	add	r0, sp, #32
 800680e:	f7fe f873 	bl	80048f8 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8006812:	230f      	movs	r3, #15
 8006814:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006816:	9504      	str	r5, [sp, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006818:	9405      	str	r4, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800681a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800681e:	9306      	str	r3, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006820:	9407      	str	r4, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8006822:	2103      	movs	r1, #3
 8006824:	a803      	add	r0, sp, #12
 8006826:	f7fe fa9f 	bl	8004d68 <HAL_RCC_ClockConfig>
}
 800682a:	b015      	add	sp, #84	; 0x54
 800682c:	bd30      	pop	{r4, r5, pc}
 800682e:	bf00      	nop
 8006830:	40023800 	.word	0x40023800
 8006834:	40007000 	.word	0x40007000

08006838 <main>:
int main(void) {
 8006838:	b500      	push	{lr}
 800683a:	b097      	sub	sp, #92	; 0x5c
	HAL_Init();
 800683c:	f7fc fda4 	bl	8003388 <HAL_Init>
	SystemClock_Config();
 8006840:	f7ff ffb2 	bl	80067a8 <SystemClock_Config>
	MX_GPIO_Init();
 8006844:	f7ff fe06 	bl	8006454 <MX_GPIO_Init>
	MX_DMA_Init();
 8006848:	f7ff fe86 	bl	8006558 <MX_DMA_Init>
	MX_USART2_UART_Init();
 800684c:	f7ff fea6 	bl	800659c <MX_USART2_UART_Init>
	MX_I2C2_Init();
 8006850:	f7ff fed0 	bl	80065f4 <MX_I2C2_Init>
	MX_TIM3_Init();
 8006854:	f7ff fee8 	bl	8006628 <MX_TIM3_Init>
	MX_TIM4_Init();
 8006858:	f7ff ff12 	bl	8006680 <MX_TIM4_Init>
	MX_USART6_UART_Init();
 800685c:	f7ff feb4 	bl	80065c8 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8006860:	f7ff ff56 	bl	8006710 <MX_ADC1_Init>
	MX_SPI2_Init();
 8006864:	f7ff ff82 	bl	800676c <MX_SPI2_Init>
	if (imu_init(&hi2c2) == IMU_SUCCESS) {
 8006868:	4821      	ldr	r0, [pc, #132]	; (80068f0 <main+0xb8>)
 800686a:	f7fa fbad 	bl	8000fc8 <imu_init>
 800686e:	b908      	cbnz	r0, 8006874 <main+0x3c>
		imu_calibrate();
 8006870:	f7fb f95a 	bl	8001b28 <imu_calibrate>
	DWT_Init();
 8006874:	f7fc fd3a 	bl	80032ec <DWT_Init>
	NRF24_begin(GPIOB, nrf_CSN_PIN, nrf_CE_PIN, hspi2);
 8006878:	4c1e      	ldr	r4, [pc, #120]	; (80068f4 <main+0xbc>)
 800687a:	2254      	movs	r2, #84	; 0x54
 800687c:	1d21      	adds	r1, r4, #4
 800687e:	4668      	mov	r0, sp
 8006880:	f000 fc3c 	bl	80070fc <memcpy>
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800688a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800688e:	481a      	ldr	r0, [pc, #104]	; (80068f8 <main+0xc0>)
 8006890:	f7fc fbae 	bl	8002ff0 <NRF24_begin>
	nrf24_DebugUART_Init(huart2);
 8006894:	4e19      	ldr	r6, [pc, #100]	; (80068fc <main+0xc4>)
 8006896:	466c      	mov	r4, sp
 8006898:	f106 0510 	add.w	r5, r6, #16
 800689c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800689e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80068a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80068ac:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80068b0:	f7fc fc70 	bl	8003194 <nrf24_DebugUART_Init>
	NRF24_setAutoAck(false);
 80068b4:	2000      	movs	r0, #0
 80068b6:	f7fc f802 	bl	80028be <NRF24_setAutoAck>
	NRF24_openReadingPipe(1,TxpipeAddrs);
 80068ba:	4b11      	ldr	r3, [pc, #68]	; (8006900 <main+0xc8>)
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	2001      	movs	r0, #1
 80068c2:	f7fb ff5b 	bl	800277c <NRF24_openReadingPipe>
	NRF24_startListening();
 80068c6:	f7fb ff37 	bl	8002738 <NRF24_startListening>
	printRadioSettings();
 80068ca:	f7fc f8a1 	bl	8002a10 <printRadioSettings>
		main_loop = 1;
 80068ce:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <main+0xcc>)
 80068d0:	2201      	movs	r2, #1
 80068d2:	701a      	strb	r2, [r3, #0]
		if (NRF24_available()) {
 80068d4:	f7fc f877 	bl	80029c6 <NRF24_available>
 80068d8:	2800      	cmp	r0, #0
 80068da:	d0f8      	beq.n	80068ce <main+0x96>
			NRF24_read(RxData, 32);
 80068dc:	4c0a      	ldr	r4, [pc, #40]	; (8006908 <main+0xd0>)
 80068de:	2120      	movs	r1, #32
 80068e0:	4620      	mov	r0, r4
 80068e2:	f7fb ffd0 	bl	8002886 <NRF24_read>
			printf("Received data %s\n\r", RxData);
 80068e6:	4621      	mov	r1, r4
 80068e8:	4808      	ldr	r0, [pc, #32]	; (800690c <main+0xd4>)
 80068ea:	f001 f877 	bl	80079dc <iprintf>
 80068ee:	e7ee      	b.n	80068ce <main+0x96>
 80068f0:	20000398 	.word	0x20000398
 80068f4:	200004b4 	.word	0x200004b4
 80068f8:	40020400 	.word	0x40020400
 80068fc:	20000704 	.word	0x20000704
 8006900:	20000048 	.word	0x20000048
 8006904:	20000360 	.word	0x20000360
 8006908:	200006c4 	.word	0x200006c4
 800690c:	0800bde8 	.word	0x0800bde8

08006910 <PWM1_Set>:

}

//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 8006910:	4b01      	ldr	r3, [pc, #4]	; (8006918 <PWM1_Set+0x8>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6358      	str	r0, [r3, #52]	; 0x34
}
 8006916:	4770      	bx	lr
 8006918:	2000050c 	.word	0x2000050c

0800691c <PWM2_Set>:

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 800691c:	4b01      	ldr	r3, [pc, #4]	; (8006924 <PWM2_Set+0x8>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6398      	str	r0, [r3, #56]	; 0x38

}
 8006922:	4770      	bx	lr
 8006924:	2000050c 	.word	0x2000050c

08006928 <PWM3_Set>:

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 8006928:	4b01      	ldr	r3, [pc, #4]	; (8006930 <PWM3_Set+0x8>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 800692e:	4770      	bx	lr
 8006930:	2000050c 	.word	0x2000050c

08006934 <PWM4_Set>:

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 8006934:	4b01      	ldr	r3, [pc, #4]	; (800693c <PWM4_Set+0x8>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6418      	str	r0, [r3, #64]	; 0x40
}
 800693a:	4770      	bx	lr
 800693c:	2000050c 	.word	0x2000050c

08006940 <pulse_posedge_handler>:

//
void pulse_posedge_handler() {
 8006940:	b538      	push	{r3, r4, r5, lr}

	//Only want this to happen in main loop - not during init sequence
	if (main_loop) {
 8006942:	4b48      	ldr	r3, [pc, #288]	; (8006a64 <pulse_posedge_handler+0x124>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	b903      	cbnz	r3, 800694a <pulse_posedge_handler+0xa>
		PWM3_Set(esc3_total); //PWM3 = Back right, CCW
		PWM4_Set(esc4_total); //PWM4 = Front right, CW

	}

}
 8006948:	bd38      	pop	{r3, r4, r5, pc}
		tim3_count = htim3.Instance->CNT; //read TIM3 counter value
 800694a:	4d47      	ldr	r5, [pc, #284]	; (8006a68 <pulse_posedge_handler+0x128>)
 800694c:	682b      	ldr	r3, [r5, #0]
 800694e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006950:	4c46      	ldr	r4, [pc, #280]	; (8006a6c <pulse_posedge_handler+0x12c>)
 8006952:	6020      	str	r0, [r4, #0]
		calc_RollPitchYaw(tim3_count);
 8006954:	f7fb fbac 	bl	80020b0 <calc_RollPitchYaw>
		imu_pitch = get_pitch();
 8006958:	f7fa fb00 	bl	8000f5c <get_pitch>
 800695c:	4b44      	ldr	r3, [pc, #272]	; (8006a70 <pulse_posedge_handler+0x130>)
 800695e:	ed83 0a00 	vstr	s0, [r3]
		tim3_count = htim3.Instance->CNT;
 8006962:	682b      	ldr	r3, [r5, #0]
 8006964:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006966:	6020      	str	r0, [r4, #0]
		pid_output_pitch = pid_calculate_pitch(imu_pitch, tim3_count);
 8006968:	f7fc fc2a 	bl	80031c0 <pid_calculate_pitch>
 800696c:	4b41      	ldr	r3, [pc, #260]	; (8006a74 <pulse_posedge_handler+0x134>)
 800696e:	ed83 0a00 	vstr	s0, [r3]
		esc1_total = ESC_MIN + esc1_throttle + (int) pid_output_pitch;
 8006972:	4b41      	ldr	r3, [pc, #260]	; (8006a78 <pulse_posedge_handler+0x138>)
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	f202 42e2 	addw	r2, r2, #1250	; 0x4e2
 800697a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800697e:	ee17 3a90 	vmov	r3, s15
 8006982:	18d4      	adds	r4, r2, r3
 8006984:	4a3d      	ldr	r2, [pc, #244]	; (8006a7c <pulse_posedge_handler+0x13c>)
 8006986:	6014      	str	r4, [r2, #0]
		esc2_total = ESC_MIN + esc2_throttle + (int) pid_output_pitch;
 8006988:	4a3d      	ldr	r2, [pc, #244]	; (8006a80 <pulse_posedge_handler+0x140>)
 800698a:	6812      	ldr	r2, [r2, #0]
 800698c:	f202 42e2 	addw	r2, r2, #1250	; 0x4e2
 8006990:	1898      	adds	r0, r3, r2
 8006992:	4a3c      	ldr	r2, [pc, #240]	; (8006a84 <pulse_posedge_handler+0x144>)
 8006994:	6010      	str	r0, [r2, #0]
		esc3_total = (ESC_MIN + esc3_throttle) - (int) pid_output_pitch;
 8006996:	4a3c      	ldr	r2, [pc, #240]	; (8006a88 <pulse_posedge_handler+0x148>)
 8006998:	6812      	ldr	r2, [r2, #0]
 800699a:	f202 42e2 	addw	r2, r2, #1250	; 0x4e2
 800699e:	1ad1      	subs	r1, r2, r3
 80069a0:	4a3a      	ldr	r2, [pc, #232]	; (8006a8c <pulse_posedge_handler+0x14c>)
 80069a2:	6011      	str	r1, [r2, #0]
		esc4_total = (ESC_MIN + esc4_throttle) - (int) pid_output_pitch;
 80069a4:	4a3a      	ldr	r2, [pc, #232]	; (8006a90 <pulse_posedge_handler+0x150>)
 80069a6:	6812      	ldr	r2, [r2, #0]
 80069a8:	f202 42e2 	addw	r2, r2, #1250	; 0x4e2
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	4a39      	ldr	r2, [pc, #228]	; (8006a94 <pulse_posedge_handler+0x154>)
 80069b0:	6013      	str	r3, [r2, #0]
		if (esc1_total < ESC_MIN) {
 80069b2:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80069b6:	4294      	cmp	r4, r2
 80069b8:	dc03      	bgt.n	80069c2 <pulse_posedge_handler+0x82>
			esc1_total = ESC_MIN;
 80069ba:	4a30      	ldr	r2, [pc, #192]	; (8006a7c <pulse_posedge_handler+0x13c>)
 80069bc:	f240 44e2 	movw	r4, #1250	; 0x4e2
 80069c0:	6014      	str	r4, [r2, #0]
		if (esc1_total > ESC_MAX) {
 80069c2:	4a2e      	ldr	r2, [pc, #184]	; (8006a7c <pulse_posedge_handler+0x13c>)
 80069c4:	6814      	ldr	r4, [r2, #0]
 80069c6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80069ca:	4294      	cmp	r4, r2
 80069cc:	dd03      	ble.n	80069d6 <pulse_posedge_handler+0x96>
			esc1_total = ESC_MAX;
 80069ce:	4a2b      	ldr	r2, [pc, #172]	; (8006a7c <pulse_posedge_handler+0x13c>)
 80069d0:	f640 14c4 	movw	r4, #2500	; 0x9c4
 80069d4:	6014      	str	r4, [r2, #0]
		if (esc2_total < ESC_MIN) {
 80069d6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80069da:	4290      	cmp	r0, r2
 80069dc:	dc03      	bgt.n	80069e6 <pulse_posedge_handler+0xa6>
			esc2_total = ESC_MIN;
 80069de:	4a29      	ldr	r2, [pc, #164]	; (8006a84 <pulse_posedge_handler+0x144>)
 80069e0:	f240 40e2 	movw	r0, #1250	; 0x4e2
 80069e4:	6010      	str	r0, [r2, #0]
		if (esc2_total > ESC_MAX) {
 80069e6:	4a27      	ldr	r2, [pc, #156]	; (8006a84 <pulse_posedge_handler+0x144>)
 80069e8:	6810      	ldr	r0, [r2, #0]
 80069ea:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80069ee:	4290      	cmp	r0, r2
 80069f0:	dd03      	ble.n	80069fa <pulse_posedge_handler+0xba>
			esc2_total = ESC_MAX;
 80069f2:	4a24      	ldr	r2, [pc, #144]	; (8006a84 <pulse_posedge_handler+0x144>)
 80069f4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80069f8:	6010      	str	r0, [r2, #0]
		if (esc3_total < ESC_MIN) {
 80069fa:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80069fe:	4291      	cmp	r1, r2
 8006a00:	dc03      	bgt.n	8006a0a <pulse_posedge_handler+0xca>
			esc3_total = ESC_MIN;
 8006a02:	4a22      	ldr	r2, [pc, #136]	; (8006a8c <pulse_posedge_handler+0x14c>)
 8006a04:	f240 41e2 	movw	r1, #1250	; 0x4e2
 8006a08:	6011      	str	r1, [r2, #0]
		if (esc3_total > ESC_MAX) {
 8006a0a:	4a20      	ldr	r2, [pc, #128]	; (8006a8c <pulse_posedge_handler+0x14c>)
 8006a0c:	6811      	ldr	r1, [r2, #0]
 8006a0e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006a12:	4291      	cmp	r1, r2
 8006a14:	dd03      	ble.n	8006a1e <pulse_posedge_handler+0xde>
			esc3_total = ESC_MAX;
 8006a16:	4a1d      	ldr	r2, [pc, #116]	; (8006a8c <pulse_posedge_handler+0x14c>)
 8006a18:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8006a1c:	6011      	str	r1, [r2, #0]
		if (esc4_total < ESC_MIN) {
 8006a1e:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8006a22:	4293      	cmp	r3, r2
 8006a24:	dc03      	bgt.n	8006a2e <pulse_posedge_handler+0xee>
			esc4_total = ESC_MIN;
 8006a26:	4b1b      	ldr	r3, [pc, #108]	; (8006a94 <pulse_posedge_handler+0x154>)
 8006a28:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006a2c:	601a      	str	r2, [r3, #0]
		if (esc4_total > ESC_MAX) {
 8006a2e:	4b19      	ldr	r3, [pc, #100]	; (8006a94 <pulse_posedge_handler+0x154>)
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8006a36:	429a      	cmp	r2, r3
 8006a38:	dd03      	ble.n	8006a42 <pulse_posedge_handler+0x102>
			esc4_total = ESC_MAX;
 8006a3a:	4b16      	ldr	r3, [pc, #88]	; (8006a94 <pulse_posedge_handler+0x154>)
 8006a3c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006a40:	601a      	str	r2, [r3, #0]
		PWM1_Set(esc1_total); //PWM1 = Back left, CW
 8006a42:	4b0e      	ldr	r3, [pc, #56]	; (8006a7c <pulse_posedge_handler+0x13c>)
 8006a44:	8818      	ldrh	r0, [r3, #0]
 8006a46:	f7ff ff63 	bl	8006910 <PWM1_Set>
		PWM2_Set(esc2_total); //PWM2 = Front left, CCW
 8006a4a:	4b0e      	ldr	r3, [pc, #56]	; (8006a84 <pulse_posedge_handler+0x144>)
 8006a4c:	8818      	ldrh	r0, [r3, #0]
 8006a4e:	f7ff ff65 	bl	800691c <PWM2_Set>
		PWM3_Set(esc3_total); //PWM3 = Back right, CCW
 8006a52:	4b0e      	ldr	r3, [pc, #56]	; (8006a8c <pulse_posedge_handler+0x14c>)
 8006a54:	8818      	ldrh	r0, [r3, #0]
 8006a56:	f7ff ff67 	bl	8006928 <PWM3_Set>
		PWM4_Set(esc4_total); //PWM4 = Front right, CW
 8006a5a:	4b0e      	ldr	r3, [pc, #56]	; (8006a94 <pulse_posedge_handler+0x154>)
 8006a5c:	8818      	ldrh	r0, [r3, #0]
 8006a5e:	f7ff ff69 	bl	8006934 <PWM4_Set>
}
 8006a62:	e771      	b.n	8006948 <pulse_posedge_handler+0x8>
 8006a64:	20000360 	.word	0x20000360
 8006a68:	2000054c 	.word	0x2000054c
 8006a6c:	20000368 	.word	0x20000368
 8006a70:	20000680 	.word	0x20000680
 8006a74:	20000364 	.word	0x20000364
 8006a78:	20000050 	.word	0x20000050
 8006a7c:	20000350 	.word	0x20000350
 8006a80:	20000054 	.word	0x20000054
 8006a84:	20000354 	.word	0x20000354
 8006a88:	20000058 	.word	0x20000058
 8006a8c:	20000358 	.word	0x20000358
 8006a90:	2000005c 	.word	0x2000005c
 8006a94:	2000035c 	.word	0x2000035c

08006a98 <__io_putchar>:
/*
 *	Some functions to allow the program to use printf,
 *	from http://www.emcu.eu/how-to-implement-printf-for-send-message-via-usb-on-stm32-nucleo-boards-using-atollic/
 *
 */
int __io_putchar(int ch) {
 8006a98:	b510      	push	{r4, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	4604      	mov	r4, r0
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8006a9e:	a902      	add	r1, sp, #8
 8006aa0:	f801 0d04 	strb.w	r0, [r1, #-4]!

	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 8006aa4:	230a      	movs	r3, #10
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	4802      	ldr	r0, [pc, #8]	; (8006ab4 <__io_putchar+0x1c>)
 8006aaa:	f7ff fb3d 	bl	8006128 <HAL_UART_Transmit>
	return ch;
}
 8006aae:	4620      	mov	r0, r4
 8006ab0:	b002      	add	sp, #8
 8006ab2:	bd10      	pop	{r4, pc}
 8006ab4:	20000704 	.word	0x20000704

08006ab8 <_write>:

int _write(int file, char *ptr, int len) {
 8006ab8:	b570      	push	{r4, r5, r6, lr}
 8006aba:	4616      	mov	r6, r2
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8006abc:	2400      	movs	r4, #0
 8006abe:	e005      	b.n	8006acc <_write+0x14>
		__io_putchar(*ptr++);
 8006ac0:	1c4d      	adds	r5, r1, #1
 8006ac2:	7808      	ldrb	r0, [r1, #0]
 8006ac4:	f7ff ffe8 	bl	8006a98 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8006ac8:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8006aca:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8006acc:	42b4      	cmp	r4, r6
 8006ace:	dbf7      	blt.n	8006ac0 <_write+0x8>
	}
	return len;
}
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	bd70      	pop	{r4, r5, r6, pc}

08006ad4 <HAL_GPIO_EXTI_Callback>:
#endif
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

	if (GPIO_Pin == PWM_RE_INT_Pin && main_loop) {
 8006ad4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006ad8:	d000      	beq.n	8006adc <HAL_GPIO_EXTI_Callback+0x8>
 8006ada:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8006adc:	b508      	push	{r3, lr}
	if (GPIO_Pin == PWM_RE_INT_Pin && main_loop) {
 8006ade:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <HAL_GPIO_EXTI_Callback+0x20>)
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	b903      	cbnz	r3, 8006ae6 <HAL_GPIO_EXTI_Callback+0x12>
		pulse_posedge_handler();
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
	}

}
 8006ae4:	bd08      	pop	{r3, pc}
		pulse_posedge_handler();
 8006ae6:	f7ff ff2b 	bl	8006940 <pulse_posedge_handler>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8006aea:	2108      	movs	r1, #8
 8006aec:	4802      	ldr	r0, [pc, #8]	; (8006af8 <HAL_GPIO_EXTI_Callback+0x24>)
 8006aee:	f7fd f933 	bl	8003d58 <HAL_GPIO_TogglePin>
}
 8006af2:	e7f7      	b.n	8006ae4 <HAL_GPIO_EXTI_Callback+0x10>
 8006af4:	20000360 	.word	0x20000360
 8006af8:	40020800 	.word	0x40020800

08006afc <Error_Handler>:
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8006afc:	4770      	bx	lr
	...

08006b00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b00:	b500      	push	{lr}
 8006b02:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b04:	2100      	movs	r1, #0
 8006b06:	9100      	str	r1, [sp, #0]
 8006b08:	4b0c      	ldr	r3, [pc, #48]	; (8006b3c <HAL_MspInit+0x3c>)
 8006b0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b10:	645a      	str	r2, [r3, #68]	; 0x44
 8006b12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b14:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006b18:	9200      	str	r2, [sp, #0]
 8006b1a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b1c:	9101      	str	r1, [sp, #4]
 8006b1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006b24:	641a      	str	r2, [r3, #64]	; 0x40
 8006b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b2c:	9301      	str	r3, [sp, #4]
 8006b2e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006b30:	2007      	movs	r0, #7
 8006b32:	f7fc fe01 	bl	8003738 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b36:	b003      	add	sp, #12
 8006b38:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b3c:	40023800 	.word	0x40023800

08006b40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006b40:	b500      	push	{lr}
 8006b42:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b44:	2300      	movs	r3, #0
 8006b46:	9303      	str	r3, [sp, #12]
 8006b48:	9304      	str	r3, [sp, #16]
 8006b4a:	9305      	str	r3, [sp, #20]
 8006b4c:	9306      	str	r3, [sp, #24]
 8006b4e:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8006b50:	6802      	ldr	r2, [r0, #0]
 8006b52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b56:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d002      	beq.n	8006b64 <HAL_ADC_MspInit+0x24>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006b5e:	b009      	add	sp, #36	; 0x24
 8006b60:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006b64:	2100      	movs	r1, #0
 8006b66:	9101      	str	r1, [sp, #4]
 8006b68:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8006b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b72:	645a      	str	r2, [r3, #68]	; 0x44
 8006b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b76:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8006b7a:	9201      	str	r2, [sp, #4]
 8006b7c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b7e:	9102      	str	r1, [sp, #8]
 8006b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b82:	f042 0202 	orr.w	r2, r2, #2
 8006b86:	631a      	str	r2, [r3, #48]	; 0x30
 8006b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	9302      	str	r3, [sp, #8]
 8006b90:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006b92:	2301      	movs	r3, #1
 8006b94:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b96:	2303      	movs	r3, #3
 8006b98:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b9a:	a903      	add	r1, sp, #12
 8006b9c:	4801      	ldr	r0, [pc, #4]	; (8006ba4 <HAL_ADC_MspInit+0x64>)
 8006b9e:	f7fd f803 	bl	8003ba8 <HAL_GPIO_Init>
}
 8006ba2:	e7dc      	b.n	8006b5e <HAL_ADC_MspInit+0x1e>
 8006ba4:	40020400 	.word	0x40020400

08006ba8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006bac:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bae:	2300      	movs	r3, #0
 8006bb0:	9303      	str	r3, [sp, #12]
 8006bb2:	9304      	str	r3, [sp, #16]
 8006bb4:	9305      	str	r3, [sp, #20]
 8006bb6:	9306      	str	r3, [sp, #24]
 8006bb8:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 8006bba:	6802      	ldr	r2, [r0, #0]
 8006bbc:	4b1e      	ldr	r3, [pc, #120]	; (8006c38 <HAL_I2C_MspInit+0x90>)
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d002      	beq.n	8006bc8 <HAL_I2C_MspInit+0x20>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006bc2:	b009      	add	sp, #36	; 0x24
 8006bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bc8:	2500      	movs	r5, #0
 8006bca:	9501      	str	r5, [sp, #4]
 8006bcc:	4c1b      	ldr	r4, [pc, #108]	; (8006c3c <HAL_I2C_MspInit+0x94>)
 8006bce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006bd0:	f043 0302 	orr.w	r3, r3, #2
 8006bd4:	6323      	str	r3, [r4, #48]	; 0x30
 8006bd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	9301      	str	r3, [sp, #4]
 8006bde:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006be4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006be6:	f04f 0912 	mov.w	r9, #18
 8006bea:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bee:	f04f 0801 	mov.w	r8, #1
 8006bf2:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bf6:	2703      	movs	r7, #3
 8006bf8:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006bfa:	2304      	movs	r3, #4
 8006bfc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bfe:	4e10      	ldr	r6, [pc, #64]	; (8006c40 <HAL_I2C_MspInit+0x98>)
 8006c00:	a903      	add	r1, sp, #12
 8006c02:	4630      	mov	r0, r6
 8006c04:	f7fc ffd0 	bl	8003ba8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006c08:	2308      	movs	r3, #8
 8006c0a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c0c:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c10:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c14:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8006c16:	2309      	movs	r3, #9
 8006c18:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c1a:	a903      	add	r1, sp, #12
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	f7fc ffc3 	bl	8003ba8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006c22:	9502      	str	r5, [sp, #8]
 8006c24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c2a:	6423      	str	r3, [r4, #64]	; 0x40
 8006c2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c32:	9302      	str	r3, [sp, #8]
 8006c34:	9b02      	ldr	r3, [sp, #8]
}
 8006c36:	e7c4      	b.n	8006bc2 <HAL_I2C_MspInit+0x1a>
 8006c38:	40005800 	.word	0x40005800
 8006c3c:	40023800 	.word	0x40023800
 8006c40:	40020400 	.word	0x40020400

08006c44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c46:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c48:	2300      	movs	r3, #0
 8006c4a:	9303      	str	r3, [sp, #12]
 8006c4c:	9304      	str	r3, [sp, #16]
 8006c4e:	9305      	str	r3, [sp, #20]
 8006c50:	9306      	str	r3, [sp, #24]
 8006c52:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 8006c54:	6802      	ldr	r2, [r0, #0]
 8006c56:	4b1f      	ldr	r3, [pc, #124]	; (8006cd4 <HAL_SPI_MspInit+0x90>)
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d001      	beq.n	8006c60 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006c5c:	b009      	add	sp, #36	; 0x24
 8006c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006c60:	2400      	movs	r4, #0
 8006c62:	9400      	str	r4, [sp, #0]
 8006c64:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8006c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c6e:	641a      	str	r2, [r3, #64]	; 0x40
 8006c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c72:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006c76:	9200      	str	r2, [sp, #0]
 8006c78:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c7a:	9401      	str	r4, [sp, #4]
 8006c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c7e:	f042 0204 	orr.w	r2, r2, #4
 8006c82:	631a      	str	r2, [r3, #48]	; 0x30
 8006c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c86:	f002 0204 	and.w	r2, r2, #4
 8006c8a:	9201      	str	r2, [sp, #4]
 8006c8c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c8e:	9402      	str	r4, [sp, #8]
 8006c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c92:	f042 0202 	orr.w	r2, r2, #2
 8006c96:	631a      	str	r2, [r3, #48]	; 0x30
 8006c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	9302      	str	r3, [sp, #8]
 8006ca0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006ca2:	2304      	movs	r3, #4
 8006ca4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ca6:	2702      	movs	r7, #2
 8006ca8:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006caa:	2603      	movs	r6, #3
 8006cac:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006cae:	2505      	movs	r5, #5
 8006cb0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cb2:	a903      	add	r1, sp, #12
 8006cb4:	4808      	ldr	r0, [pc, #32]	; (8006cd8 <HAL_SPI_MspInit+0x94>)
 8006cb6:	f7fc ff77 	bl	8003ba8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8006cba:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8006cbe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cc0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cc2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cc4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006cc6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cc8:	a903      	add	r1, sp, #12
 8006cca:	4804      	ldr	r0, [pc, #16]	; (8006cdc <HAL_SPI_MspInit+0x98>)
 8006ccc:	f7fc ff6c 	bl	8003ba8 <HAL_GPIO_Init>
}
 8006cd0:	e7c4      	b.n	8006c5c <HAL_SPI_MspInit+0x18>
 8006cd2:	bf00      	nop
 8006cd4:	40003800 	.word	0x40003800
 8006cd8:	40020800 	.word	0x40020800
 8006cdc:	40020400 	.word	0x40020400

08006ce0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8006ce0:	6802      	ldr	r2, [r0, #0]
 8006ce2:	4b0e      	ldr	r3, [pc, #56]	; (8006d1c <HAL_TIM_Base_MspInit+0x3c>)
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d000      	beq.n	8006cea <HAL_TIM_Base_MspInit+0xa>
 8006ce8:	4770      	bx	lr
{
 8006cea:	b500      	push	{lr}
 8006cec:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006cee:	2100      	movs	r1, #0
 8006cf0:	9101      	str	r1, [sp, #4]
 8006cf2:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 8006cf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cf8:	f042 0202 	orr.w	r2, r2, #2
 8006cfc:	641a      	str	r2, [r3, #64]	; 0x40
 8006cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	9301      	str	r3, [sp, #4]
 8006d06:	9b01      	ldr	r3, [sp, #4]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006d08:	460a      	mov	r2, r1
 8006d0a:	201d      	movs	r0, #29
 8006d0c:	f7fc fd26 	bl	800375c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006d10:	201d      	movs	r0, #29
 8006d12:	f7fc fd57 	bl	80037c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006d16:	b003      	add	sp, #12
 8006d18:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d1c:	40000400 	.word	0x40000400

08006d20 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM4)
 8006d20:	6802      	ldr	r2, [r0, #0]
 8006d22:	4b0e      	ldr	r3, [pc, #56]	; (8006d5c <HAL_TIM_PWM_MspInit+0x3c>)
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d000      	beq.n	8006d2a <HAL_TIM_PWM_MspInit+0xa>
 8006d28:	4770      	bx	lr
{
 8006d2a:	b500      	push	{lr}
 8006d2c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006d2e:	2100      	movs	r1, #0
 8006d30:	9101      	str	r1, [sp, #4]
 8006d32:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8006d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d38:	f042 0204 	orr.w	r2, r2, #4
 8006d3c:	641a      	str	r2, [r3, #64]	; 0x40
 8006d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	9301      	str	r3, [sp, #4]
 8006d46:	9b01      	ldr	r3, [sp, #4]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8006d48:	460a      	mov	r2, r1
 8006d4a:	201e      	movs	r0, #30
 8006d4c:	f7fc fd06 	bl	800375c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006d50:	201e      	movs	r0, #30
 8006d52:	f7fc fd37 	bl	80037c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006d56:	b003      	add	sp, #12
 8006d58:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d5c:	40000800 	.word	0x40000800

08006d60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006d60:	b570      	push	{r4, r5, r6, lr}
 8006d62:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d64:	2300      	movs	r3, #0
 8006d66:	9301      	str	r3, [sp, #4]
 8006d68:	9302      	str	r3, [sp, #8]
 8006d6a:	9303      	str	r3, [sp, #12]
 8006d6c:	9304      	str	r3, [sp, #16]
 8006d6e:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 8006d70:	6802      	ldr	r2, [r0, #0]
 8006d72:	4b15      	ldr	r3, [pc, #84]	; (8006dc8 <HAL_TIM_MspPostInit+0x68>)
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d001      	beq.n	8006d7c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8006d78:	b006      	add	sp, #24
 8006d7a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d7c:	2500      	movs	r5, #0
 8006d7e:	9500      	str	r5, [sp, #0]
 8006d80:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8006d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d86:	f042 0202 	orr.w	r2, r2, #2
 8006d8a:	631a      	str	r2, [r3, #48]	; 0x30
 8006d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8006d96:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8006d9a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d9c:	2402      	movs	r4, #2
 8006d9e:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006da0:	2303      	movs	r3, #3
 8006da2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006da4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006da6:	4e09      	ldr	r6, [pc, #36]	; (8006dcc <HAL_TIM_MspPostInit+0x6c>)
 8006da8:	a901      	add	r1, sp, #4
 8006daa:	4630      	mov	r0, r6
 8006dac:	f7fc fefc 	bl	8003ba8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006db4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006db6:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db8:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dba:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006dbc:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dbe:	a901      	add	r1, sp, #4
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f7fc fef1 	bl	8003ba8 <HAL_GPIO_Init>
}
 8006dc6:	e7d7      	b.n	8006d78 <HAL_TIM_MspPostInit+0x18>
 8006dc8:	40000800 	.word	0x40000800
 8006dcc:	40020400 	.word	0x40020400

08006dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006dd0:	b530      	push	{r4, r5, lr}
 8006dd2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	9305      	str	r3, [sp, #20]
 8006dd8:	9306      	str	r3, [sp, #24]
 8006dda:	9307      	str	r3, [sp, #28]
 8006ddc:	9308      	str	r3, [sp, #32]
 8006dde:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART2)
 8006de0:	6803      	ldr	r3, [r0, #0]
 8006de2:	4a47      	ldr	r2, [pc, #284]	; (8006f00 <HAL_UART_MspInit+0x130>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d004      	beq.n	8006df2 <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8006de8:	4a46      	ldr	r2, [pc, #280]	; (8006f04 <HAL_UART_MspInit+0x134>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d063      	beq.n	8006eb6 <HAL_UART_MspInit+0xe6>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006dee:	b00b      	add	sp, #44	; 0x2c
 8006df0:	bd30      	pop	{r4, r5, pc}
 8006df2:	4604      	mov	r4, r0
    __HAL_RCC_USART2_CLK_ENABLE();
 8006df4:	2500      	movs	r5, #0
 8006df6:	9501      	str	r5, [sp, #4]
 8006df8:	4b43      	ldr	r3, [pc, #268]	; (8006f08 <HAL_UART_MspInit+0x138>)
 8006dfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dfc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006e00:	641a      	str	r2, [r3, #64]	; 0x40
 8006e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e04:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8006e08:	9201      	str	r2, [sp, #4]
 8006e0a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e0c:	9502      	str	r5, [sp, #8]
 8006e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e10:	f042 0201 	orr.w	r2, r2, #1
 8006e14:	631a      	str	r2, [r3, #48]	; 0x30
 8006e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	9302      	str	r3, [sp, #8]
 8006e1e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006e20:	230c      	movs	r3, #12
 8006e22:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e24:	2302      	movs	r3, #2
 8006e26:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006e30:	2307      	movs	r3, #7
 8006e32:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e34:	a905      	add	r1, sp, #20
 8006e36:	4835      	ldr	r0, [pc, #212]	; (8006f0c <HAL_UART_MspInit+0x13c>)
 8006e38:	f7fc feb6 	bl	8003ba8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006e3c:	4834      	ldr	r0, [pc, #208]	; (8006f10 <HAL_UART_MspInit+0x140>)
 8006e3e:	4b35      	ldr	r3, [pc, #212]	; (8006f14 <HAL_UART_MspInit+0x144>)
 8006e40:	6003      	str	r3, [r0, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8006e42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e46:	6043      	str	r3, [r0, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e48:	6085      	str	r5, [r0, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e4a:	60c5      	str	r5, [r0, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e50:	6103      	str	r3, [r0, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e52:	6145      	str	r5, [r0, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e54:	6185      	str	r5, [r0, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006e56:	61c5      	str	r5, [r0, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006e58:	6205      	str	r5, [r0, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e5a:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006e5c:	f7fc fd3c 	bl	80038d8 <HAL_DMA_Init>
 8006e60:	bb18      	cbnz	r0, 8006eaa <HAL_UART_MspInit+0xda>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8006e62:	4b2b      	ldr	r3, [pc, #172]	; (8006f10 <HAL_UART_MspInit+0x140>)
 8006e64:	6363      	str	r3, [r4, #52]	; 0x34
 8006e66:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8006e68:	482b      	ldr	r0, [pc, #172]	; (8006f18 <HAL_UART_MspInit+0x148>)
 8006e6a:	4b2c      	ldr	r3, [pc, #176]	; (8006f1c <HAL_UART_MspInit+0x14c>)
 8006e6c:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8006e6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e72:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e74:	2340      	movs	r3, #64	; 0x40
 8006e76:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60c3      	str	r3, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e80:	6102      	str	r2, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e82:	6143      	str	r3, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e84:	6183      	str	r3, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006e86:	61c3      	str	r3, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006e88:	6203      	str	r3, [r0, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e8a:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006e8c:	f7fc fd24 	bl	80038d8 <HAL_DMA_Init>
 8006e90:	b970      	cbnz	r0, 8006eb0 <HAL_UART_MspInit+0xe0>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8006e92:	4b21      	ldr	r3, [pc, #132]	; (8006f18 <HAL_UART_MspInit+0x148>)
 8006e94:	6323      	str	r3, [r4, #48]	; 0x30
 8006e96:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006e98:	2200      	movs	r2, #0
 8006e9a:	4611      	mov	r1, r2
 8006e9c:	2026      	movs	r0, #38	; 0x26
 8006e9e:	f7fc fc5d 	bl	800375c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006ea2:	2026      	movs	r0, #38	; 0x26
 8006ea4:	f7fc fc8e 	bl	80037c4 <HAL_NVIC_EnableIRQ>
 8006ea8:	e7a1      	b.n	8006dee <HAL_UART_MspInit+0x1e>
      Error_Handler();
 8006eaa:	f7ff fe27 	bl	8006afc <Error_Handler>
 8006eae:	e7d8      	b.n	8006e62 <HAL_UART_MspInit+0x92>
      Error_Handler();
 8006eb0:	f7ff fe24 	bl	8006afc <Error_Handler>
 8006eb4:	e7ed      	b.n	8006e92 <HAL_UART_MspInit+0xc2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	9103      	str	r1, [sp, #12]
 8006eba:	4b13      	ldr	r3, [pc, #76]	; (8006f08 <HAL_UART_MspInit+0x138>)
 8006ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ebe:	f042 0220 	orr.w	r2, r2, #32
 8006ec2:	645a      	str	r2, [r3, #68]	; 0x44
 8006ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ec6:	f002 0220 	and.w	r2, r2, #32
 8006eca:	9203      	str	r2, [sp, #12]
 8006ecc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ece:	9104      	str	r1, [sp, #16]
 8006ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ed2:	f042 0204 	orr.w	r2, r2, #4
 8006ed6:	631a      	str	r2, [r3, #48]	; 0x30
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eda:	f003 0304 	and.w	r3, r3, #4
 8006ede:	9304      	str	r3, [sp, #16]
 8006ee0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006ee2:	23c0      	movs	r3, #192	; 0xc0
 8006ee4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006eea:	2301      	movs	r3, #1
 8006eec:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006ef2:	2308      	movs	r3, #8
 8006ef4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ef6:	a905      	add	r1, sp, #20
 8006ef8:	4809      	ldr	r0, [pc, #36]	; (8006f20 <HAL_UART_MspInit+0x150>)
 8006efa:	f7fc fe55 	bl	8003ba8 <HAL_GPIO_Init>
}
 8006efe:	e776      	b.n	8006dee <HAL_UART_MspInit+0x1e>
 8006f00:	40004400 	.word	0x40004400
 8006f04:	40011400 	.word	0x40011400
 8006f08:	40023800 	.word	0x40023800
 8006f0c:	40020000 	.word	0x40020000
 8006f10:	20000454 	.word	0x20000454
 8006f14:	40026088 	.word	0x40026088
 8006f18:	200005f8 	.word	0x200005f8
 8006f1c:	400260a0 	.word	0x400260a0
 8006f20:	40020800 	.word	0x40020800

08006f24 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006f24:	4770      	bx	lr

08006f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f26:	e7fe      	b.n	8006f26 <HardFault_Handler>

08006f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f28:	e7fe      	b.n	8006f28 <MemManage_Handler>

08006f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006f2a:	e7fe      	b.n	8006f2a <BusFault_Handler>

08006f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f2c:	e7fe      	b.n	8006f2c <UsageFault_Handler>

08006f2e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006f2e:	4770      	bx	lr

08006f30 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006f30:	4770      	bx	lr

08006f32 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006f32:	4770      	bx	lr

08006f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006f34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006f36:	f7fc fa41 	bl	80033bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006f3a:	bd08      	pop	{r3, pc}

08006f3c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006f3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006f3e:	4802      	ldr	r0, [pc, #8]	; (8006f48 <DMA1_Stream5_IRQHandler+0xc>)
 8006f40:	f7fc fd44 	bl	80039cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006f44:	bd08      	pop	{r3, pc}
 8006f46:	bf00      	nop
 8006f48:	20000454 	.word	0x20000454

08006f4c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8006f4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006f4e:	4802      	ldr	r0, [pc, #8]	; (8006f58 <DMA1_Stream6_IRQHandler+0xc>)
 8006f50:	f7fc fd3c 	bl	80039cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8006f54:	bd08      	pop	{r3, pc}
 8006f56:	bf00      	nop
 8006f58:	200005f8 	.word	0x200005f8

08006f5c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006f5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8006f5e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006f62:	f7fc ff03 	bl	8003d6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006f66:	bd08      	pop	{r3, pc}

08006f68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006f68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006f6a:	4802      	ldr	r0, [pc, #8]	; (8006f74 <TIM3_IRQHandler+0xc>)
 8006f6c:	f7fe fc24 	bl	80057b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006f70:	bd08      	pop	{r3, pc}
 8006f72:	bf00      	nop
 8006f74:	2000054c 	.word	0x2000054c

08006f78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006f78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006f7a:	4802      	ldr	r0, [pc, #8]	; (8006f84 <TIM4_IRQHandler+0xc>)
 8006f7c:	f7fe fc1c 	bl	80057b8 <HAL_TIM_IRQHandler>

*/


  /* USER CODE END TIM4_IRQn 1 */
}
 8006f80:	bd08      	pop	{r3, pc}
 8006f82:	bf00      	nop
 8006f84:	2000050c 	.word	0x2000050c

08006f88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006f88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006f8a:	4802      	ldr	r0, [pc, #8]	; (8006f94 <USART2_IRQHandler+0xc>)
 8006f8c:	f7ff f99a 	bl	80062c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006f90:	bd08      	pop	{r3, pc}
 8006f92:	bf00      	nop
 8006f94:	20000704 	.word	0x20000704

08006f98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006f98:	b570      	push	{r4, r5, r6, lr}
 8006f9a:	460d      	mov	r5, r1
 8006f9c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f9e:	2400      	movs	r4, #0
 8006fa0:	e004      	b.n	8006fac <_read+0x14>
	{
		*ptr++ = __io_getchar();
 8006fa2:	f3af 8000 	nop.w
 8006fa6:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006fa8:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8006faa:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006fac:	42b4      	cmp	r4, r6
 8006fae:	dbf8      	blt.n	8006fa2 <_read+0xa>
	}

return len;
}
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	bd70      	pop	{r4, r5, r6, pc}

08006fb4 <_close>:
}

int _close(int file)
{
	return -1;
}
 8006fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fb8:	4770      	bx	lr

08006fba <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8006fba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006fbe:	604b      	str	r3, [r1, #4]
	return 0;
}
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	4770      	bx	lr

08006fc4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8006fc4:	2001      	movs	r0, #1
 8006fc6:	4770      	bx	lr

08006fc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8006fc8:	2000      	movs	r0, #0
 8006fca:	4770      	bx	lr

08006fcc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006fcc:	b508      	push	{r3, lr}
 8006fce:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006fd0:	4a0b      	ldr	r2, [pc, #44]	; (8007000 <_sbrk+0x34>)
 8006fd2:	6812      	ldr	r2, [r2, #0]
 8006fd4:	b142      	cbz	r2, 8006fe8 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8006fd6:	4a0a      	ldr	r2, [pc, #40]	; (8007000 <_sbrk+0x34>)
 8006fd8:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8006fda:	4403      	add	r3, r0
 8006fdc:	466a      	mov	r2, sp
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d806      	bhi.n	8006ff0 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8006fe2:	4a07      	ldr	r2, [pc, #28]	; (8007000 <_sbrk+0x34>)
 8006fe4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8006fe6:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8006fe8:	4a05      	ldr	r2, [pc, #20]	; (8007000 <_sbrk+0x34>)
 8006fea:	4906      	ldr	r1, [pc, #24]	; (8007004 <_sbrk+0x38>)
 8006fec:	6011      	str	r1, [r2, #0]
 8006fee:	e7f2      	b.n	8006fd6 <_sbrk+0xa>
		errno = ENOMEM;
 8006ff0:	f000 f85a 	bl	80070a8 <__errno>
 8006ff4:	230c      	movs	r3, #12
 8006ff6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ffc:	e7f3      	b.n	8006fe6 <_sbrk+0x1a>
 8006ffe:	bf00      	nop
 8007000:	2000036c 	.word	0x2000036c
 8007004:	20000770 	.word	0x20000770

08007008 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007008:	490f      	ldr	r1, [pc, #60]	; (8007048 <SystemInit+0x40>)
 800700a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800700e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007016:	4b0d      	ldr	r3, [pc, #52]	; (800704c <SystemInit+0x44>)
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	f042 0201 	orr.w	r2, r2, #1
 800701e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007020:	2000      	movs	r0, #0
 8007022:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800702a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800702e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007030:	4a07      	ldr	r2, [pc, #28]	; (8007050 <SystemInit+0x48>)
 8007032:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800703a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800703c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800703e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007042:	608b      	str	r3, [r1, #8]
#endif
}
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	e000ed00 	.word	0xe000ed00
 800704c:	40023800 	.word	0x40023800
 8007050:	24003010 	.word	0x24003010

08007054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800708c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007058:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800705a:	e003      	b.n	8007064 <LoopCopyDataInit>

0800705c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800705c:	4b0c      	ldr	r3, [pc, #48]	; (8007090 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800705e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007060:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007062:	3104      	adds	r1, #4

08007064 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007064:	480b      	ldr	r0, [pc, #44]	; (8007094 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007066:	4b0c      	ldr	r3, [pc, #48]	; (8007098 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007068:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800706a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800706c:	d3f6      	bcc.n	800705c <CopyDataInit>
  ldr  r2, =_sbss
 800706e:	4a0b      	ldr	r2, [pc, #44]	; (800709c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007070:	e002      	b.n	8007078 <LoopFillZerobss>

08007072 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007072:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007074:	f842 3b04 	str.w	r3, [r2], #4

08007078 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007078:	4b09      	ldr	r3, [pc, #36]	; (80070a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800707a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800707c:	d3f9      	bcc.n	8007072 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800707e:	f7ff ffc3 	bl	8007008 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007082:	f000 f817 	bl	80070b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007086:	f7ff fbd7 	bl	8006838 <main>
  bx  lr    
 800708a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800708c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007090:	0800c178 	.word	0x0800c178
  ldr  r0, =_sdata
 8007094:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007098:	20000238 	.word	0x20000238
  ldr  r2, =_sbss
 800709c:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 80070a0:	2000076c 	.word	0x2000076c

080070a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80070a4:	e7fe      	b.n	80070a4 <ADC_IRQHandler>
	...

080070a8 <__errno>:
 80070a8:	4b01      	ldr	r3, [pc, #4]	; (80070b0 <__errno+0x8>)
 80070aa:	6818      	ldr	r0, [r3, #0]
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	20000064 	.word	0x20000064

080070b4 <__libc_init_array>:
 80070b4:	b570      	push	{r4, r5, r6, lr}
 80070b6:	4e0d      	ldr	r6, [pc, #52]	; (80070ec <__libc_init_array+0x38>)
 80070b8:	4c0d      	ldr	r4, [pc, #52]	; (80070f0 <__libc_init_array+0x3c>)
 80070ba:	1ba4      	subs	r4, r4, r6
 80070bc:	10a4      	asrs	r4, r4, #2
 80070be:	2500      	movs	r5, #0
 80070c0:	42a5      	cmp	r5, r4
 80070c2:	d109      	bne.n	80070d8 <__libc_init_array+0x24>
 80070c4:	4e0b      	ldr	r6, [pc, #44]	; (80070f4 <__libc_init_array+0x40>)
 80070c6:	4c0c      	ldr	r4, [pc, #48]	; (80070f8 <__libc_init_array+0x44>)
 80070c8:	f004 fb04 	bl	800b6d4 <_init>
 80070cc:	1ba4      	subs	r4, r4, r6
 80070ce:	10a4      	asrs	r4, r4, #2
 80070d0:	2500      	movs	r5, #0
 80070d2:	42a5      	cmp	r5, r4
 80070d4:	d105      	bne.n	80070e2 <__libc_init_array+0x2e>
 80070d6:	bd70      	pop	{r4, r5, r6, pc}
 80070d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070dc:	4798      	blx	r3
 80070de:	3501      	adds	r5, #1
 80070e0:	e7ee      	b.n	80070c0 <__libc_init_array+0xc>
 80070e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070e6:	4798      	blx	r3
 80070e8:	3501      	adds	r5, #1
 80070ea:	e7f2      	b.n	80070d2 <__libc_init_array+0x1e>
 80070ec:	0800c170 	.word	0x0800c170
 80070f0:	0800c170 	.word	0x0800c170
 80070f4:	0800c170 	.word	0x0800c170
 80070f8:	0800c174 	.word	0x0800c174

080070fc <memcpy>:
 80070fc:	b510      	push	{r4, lr}
 80070fe:	1e43      	subs	r3, r0, #1
 8007100:	440a      	add	r2, r1
 8007102:	4291      	cmp	r1, r2
 8007104:	d100      	bne.n	8007108 <memcpy+0xc>
 8007106:	bd10      	pop	{r4, pc}
 8007108:	f811 4b01 	ldrb.w	r4, [r1], #1
 800710c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007110:	e7f7      	b.n	8007102 <memcpy+0x6>

08007112 <memset>:
 8007112:	4402      	add	r2, r0
 8007114:	4603      	mov	r3, r0
 8007116:	4293      	cmp	r3, r2
 8007118:	d100      	bne.n	800711c <memset+0xa>
 800711a:	4770      	bx	lr
 800711c:	f803 1b01 	strb.w	r1, [r3], #1
 8007120:	e7f9      	b.n	8007116 <memset+0x4>

08007122 <__cvt>:
 8007122:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007126:	ec55 4b10 	vmov	r4, r5, d0
 800712a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800712c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007130:	2d00      	cmp	r5, #0
 8007132:	460e      	mov	r6, r1
 8007134:	4691      	mov	r9, r2
 8007136:	4619      	mov	r1, r3
 8007138:	bfb8      	it	lt
 800713a:	4622      	movlt	r2, r4
 800713c:	462b      	mov	r3, r5
 800713e:	f027 0720 	bic.w	r7, r7, #32
 8007142:	bfbb      	ittet	lt
 8007144:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007148:	461d      	movlt	r5, r3
 800714a:	2300      	movge	r3, #0
 800714c:	232d      	movlt	r3, #45	; 0x2d
 800714e:	bfb8      	it	lt
 8007150:	4614      	movlt	r4, r2
 8007152:	2f46      	cmp	r7, #70	; 0x46
 8007154:	700b      	strb	r3, [r1, #0]
 8007156:	d004      	beq.n	8007162 <__cvt+0x40>
 8007158:	2f45      	cmp	r7, #69	; 0x45
 800715a:	d100      	bne.n	800715e <__cvt+0x3c>
 800715c:	3601      	adds	r6, #1
 800715e:	2102      	movs	r1, #2
 8007160:	e000      	b.n	8007164 <__cvt+0x42>
 8007162:	2103      	movs	r1, #3
 8007164:	ab03      	add	r3, sp, #12
 8007166:	9301      	str	r3, [sp, #4]
 8007168:	ab02      	add	r3, sp, #8
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	4632      	mov	r2, r6
 800716e:	4653      	mov	r3, sl
 8007170:	ec45 4b10 	vmov	d0, r4, r5
 8007174:	f000 fe1c 	bl	8007db0 <_dtoa_r>
 8007178:	2f47      	cmp	r7, #71	; 0x47
 800717a:	4680      	mov	r8, r0
 800717c:	d102      	bne.n	8007184 <__cvt+0x62>
 800717e:	f019 0f01 	tst.w	r9, #1
 8007182:	d026      	beq.n	80071d2 <__cvt+0xb0>
 8007184:	2f46      	cmp	r7, #70	; 0x46
 8007186:	eb08 0906 	add.w	r9, r8, r6
 800718a:	d111      	bne.n	80071b0 <__cvt+0x8e>
 800718c:	f898 3000 	ldrb.w	r3, [r8]
 8007190:	2b30      	cmp	r3, #48	; 0x30
 8007192:	d10a      	bne.n	80071aa <__cvt+0x88>
 8007194:	2200      	movs	r2, #0
 8007196:	2300      	movs	r3, #0
 8007198:	4620      	mov	r0, r4
 800719a:	4629      	mov	r1, r5
 800719c:	f7f9 fe6e 	bl	8000e7c <__aeabi_dcmpeq>
 80071a0:	b918      	cbnz	r0, 80071aa <__cvt+0x88>
 80071a2:	f1c6 0601 	rsb	r6, r6, #1
 80071a6:	f8ca 6000 	str.w	r6, [sl]
 80071aa:	f8da 3000 	ldr.w	r3, [sl]
 80071ae:	4499      	add	r9, r3
 80071b0:	2200      	movs	r2, #0
 80071b2:	2300      	movs	r3, #0
 80071b4:	4620      	mov	r0, r4
 80071b6:	4629      	mov	r1, r5
 80071b8:	f7f9 fe60 	bl	8000e7c <__aeabi_dcmpeq>
 80071bc:	b938      	cbnz	r0, 80071ce <__cvt+0xac>
 80071be:	2230      	movs	r2, #48	; 0x30
 80071c0:	9b03      	ldr	r3, [sp, #12]
 80071c2:	454b      	cmp	r3, r9
 80071c4:	d205      	bcs.n	80071d2 <__cvt+0xb0>
 80071c6:	1c59      	adds	r1, r3, #1
 80071c8:	9103      	str	r1, [sp, #12]
 80071ca:	701a      	strb	r2, [r3, #0]
 80071cc:	e7f8      	b.n	80071c0 <__cvt+0x9e>
 80071ce:	f8cd 900c 	str.w	r9, [sp, #12]
 80071d2:	9b03      	ldr	r3, [sp, #12]
 80071d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071d6:	eba3 0308 	sub.w	r3, r3, r8
 80071da:	4640      	mov	r0, r8
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	b004      	add	sp, #16
 80071e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080071e4 <__exponent>:
 80071e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071e6:	2900      	cmp	r1, #0
 80071e8:	4604      	mov	r4, r0
 80071ea:	bfba      	itte	lt
 80071ec:	4249      	neglt	r1, r1
 80071ee:	232d      	movlt	r3, #45	; 0x2d
 80071f0:	232b      	movge	r3, #43	; 0x2b
 80071f2:	2909      	cmp	r1, #9
 80071f4:	f804 2b02 	strb.w	r2, [r4], #2
 80071f8:	7043      	strb	r3, [r0, #1]
 80071fa:	dd20      	ble.n	800723e <__exponent+0x5a>
 80071fc:	f10d 0307 	add.w	r3, sp, #7
 8007200:	461f      	mov	r7, r3
 8007202:	260a      	movs	r6, #10
 8007204:	fb91 f5f6 	sdiv	r5, r1, r6
 8007208:	fb06 1115 	mls	r1, r6, r5, r1
 800720c:	3130      	adds	r1, #48	; 0x30
 800720e:	2d09      	cmp	r5, #9
 8007210:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007214:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007218:	4629      	mov	r1, r5
 800721a:	dc09      	bgt.n	8007230 <__exponent+0x4c>
 800721c:	3130      	adds	r1, #48	; 0x30
 800721e:	3b02      	subs	r3, #2
 8007220:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007224:	42bb      	cmp	r3, r7
 8007226:	4622      	mov	r2, r4
 8007228:	d304      	bcc.n	8007234 <__exponent+0x50>
 800722a:	1a10      	subs	r0, r2, r0
 800722c:	b003      	add	sp, #12
 800722e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007230:	4613      	mov	r3, r2
 8007232:	e7e7      	b.n	8007204 <__exponent+0x20>
 8007234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007238:	f804 2b01 	strb.w	r2, [r4], #1
 800723c:	e7f2      	b.n	8007224 <__exponent+0x40>
 800723e:	2330      	movs	r3, #48	; 0x30
 8007240:	4419      	add	r1, r3
 8007242:	7083      	strb	r3, [r0, #2]
 8007244:	1d02      	adds	r2, r0, #4
 8007246:	70c1      	strb	r1, [r0, #3]
 8007248:	e7ef      	b.n	800722a <__exponent+0x46>
	...

0800724c <_printf_float>:
 800724c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007250:	b08d      	sub	sp, #52	; 0x34
 8007252:	460c      	mov	r4, r1
 8007254:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007258:	4616      	mov	r6, r2
 800725a:	461f      	mov	r7, r3
 800725c:	4605      	mov	r5, r0
 800725e:	f001 fcd9 	bl	8008c14 <_localeconv_r>
 8007262:	6803      	ldr	r3, [r0, #0]
 8007264:	9304      	str	r3, [sp, #16]
 8007266:	4618      	mov	r0, r3
 8007268:	f7f9 fd58 	bl	8000d1c <strlen>
 800726c:	2300      	movs	r3, #0
 800726e:	930a      	str	r3, [sp, #40]	; 0x28
 8007270:	f8d8 3000 	ldr.w	r3, [r8]
 8007274:	9005      	str	r0, [sp, #20]
 8007276:	3307      	adds	r3, #7
 8007278:	f023 0307 	bic.w	r3, r3, #7
 800727c:	f103 0208 	add.w	r2, r3, #8
 8007280:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007284:	f8d4 b000 	ldr.w	fp, [r4]
 8007288:	f8c8 2000 	str.w	r2, [r8]
 800728c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007290:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007294:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007298:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800729c:	9307      	str	r3, [sp, #28]
 800729e:	f8cd 8018 	str.w	r8, [sp, #24]
 80072a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072a6:	4ba7      	ldr	r3, [pc, #668]	; (8007544 <_printf_float+0x2f8>)
 80072a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072ac:	f7f9 fe18 	bl	8000ee0 <__aeabi_dcmpun>
 80072b0:	bb70      	cbnz	r0, 8007310 <_printf_float+0xc4>
 80072b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072b6:	4ba3      	ldr	r3, [pc, #652]	; (8007544 <_printf_float+0x2f8>)
 80072b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072bc:	f7f9 fdf2 	bl	8000ea4 <__aeabi_dcmple>
 80072c0:	bb30      	cbnz	r0, 8007310 <_printf_float+0xc4>
 80072c2:	2200      	movs	r2, #0
 80072c4:	2300      	movs	r3, #0
 80072c6:	4640      	mov	r0, r8
 80072c8:	4649      	mov	r1, r9
 80072ca:	f7f9 fde1 	bl	8000e90 <__aeabi_dcmplt>
 80072ce:	b110      	cbz	r0, 80072d6 <_printf_float+0x8a>
 80072d0:	232d      	movs	r3, #45	; 0x2d
 80072d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072d6:	4a9c      	ldr	r2, [pc, #624]	; (8007548 <_printf_float+0x2fc>)
 80072d8:	4b9c      	ldr	r3, [pc, #624]	; (800754c <_printf_float+0x300>)
 80072da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80072de:	bf8c      	ite	hi
 80072e0:	4690      	movhi	r8, r2
 80072e2:	4698      	movls	r8, r3
 80072e4:	2303      	movs	r3, #3
 80072e6:	f02b 0204 	bic.w	r2, fp, #4
 80072ea:	6123      	str	r3, [r4, #16]
 80072ec:	6022      	str	r2, [r4, #0]
 80072ee:	f04f 0900 	mov.w	r9, #0
 80072f2:	9700      	str	r7, [sp, #0]
 80072f4:	4633      	mov	r3, r6
 80072f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80072f8:	4621      	mov	r1, r4
 80072fa:	4628      	mov	r0, r5
 80072fc:	f000 f9e6 	bl	80076cc <_printf_common>
 8007300:	3001      	adds	r0, #1
 8007302:	f040 808d 	bne.w	8007420 <_printf_float+0x1d4>
 8007306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800730a:	b00d      	add	sp, #52	; 0x34
 800730c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007310:	4642      	mov	r2, r8
 8007312:	464b      	mov	r3, r9
 8007314:	4640      	mov	r0, r8
 8007316:	4649      	mov	r1, r9
 8007318:	f7f9 fde2 	bl	8000ee0 <__aeabi_dcmpun>
 800731c:	b110      	cbz	r0, 8007324 <_printf_float+0xd8>
 800731e:	4a8c      	ldr	r2, [pc, #560]	; (8007550 <_printf_float+0x304>)
 8007320:	4b8c      	ldr	r3, [pc, #560]	; (8007554 <_printf_float+0x308>)
 8007322:	e7da      	b.n	80072da <_printf_float+0x8e>
 8007324:	6861      	ldr	r1, [r4, #4]
 8007326:	1c4b      	adds	r3, r1, #1
 8007328:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800732c:	a80a      	add	r0, sp, #40	; 0x28
 800732e:	d13e      	bne.n	80073ae <_printf_float+0x162>
 8007330:	2306      	movs	r3, #6
 8007332:	6063      	str	r3, [r4, #4]
 8007334:	2300      	movs	r3, #0
 8007336:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800733a:	ab09      	add	r3, sp, #36	; 0x24
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	ec49 8b10 	vmov	d0, r8, r9
 8007342:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007346:	6022      	str	r2, [r4, #0]
 8007348:	f8cd a004 	str.w	sl, [sp, #4]
 800734c:	6861      	ldr	r1, [r4, #4]
 800734e:	4628      	mov	r0, r5
 8007350:	f7ff fee7 	bl	8007122 <__cvt>
 8007354:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007358:	2b47      	cmp	r3, #71	; 0x47
 800735a:	4680      	mov	r8, r0
 800735c:	d109      	bne.n	8007372 <_printf_float+0x126>
 800735e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007360:	1cd8      	adds	r0, r3, #3
 8007362:	db02      	blt.n	800736a <_printf_float+0x11e>
 8007364:	6862      	ldr	r2, [r4, #4]
 8007366:	4293      	cmp	r3, r2
 8007368:	dd47      	ble.n	80073fa <_printf_float+0x1ae>
 800736a:	f1aa 0a02 	sub.w	sl, sl, #2
 800736e:	fa5f fa8a 	uxtb.w	sl, sl
 8007372:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007376:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007378:	d824      	bhi.n	80073c4 <_printf_float+0x178>
 800737a:	3901      	subs	r1, #1
 800737c:	4652      	mov	r2, sl
 800737e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007382:	9109      	str	r1, [sp, #36]	; 0x24
 8007384:	f7ff ff2e 	bl	80071e4 <__exponent>
 8007388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800738a:	1813      	adds	r3, r2, r0
 800738c:	2a01      	cmp	r2, #1
 800738e:	4681      	mov	r9, r0
 8007390:	6123      	str	r3, [r4, #16]
 8007392:	dc02      	bgt.n	800739a <_printf_float+0x14e>
 8007394:	6822      	ldr	r2, [r4, #0]
 8007396:	07d1      	lsls	r1, r2, #31
 8007398:	d501      	bpl.n	800739e <_printf_float+0x152>
 800739a:	3301      	adds	r3, #1
 800739c:	6123      	str	r3, [r4, #16]
 800739e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d0a5      	beq.n	80072f2 <_printf_float+0xa6>
 80073a6:	232d      	movs	r3, #45	; 0x2d
 80073a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073ac:	e7a1      	b.n	80072f2 <_printf_float+0xa6>
 80073ae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80073b2:	f000 8177 	beq.w	80076a4 <_printf_float+0x458>
 80073b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80073ba:	d1bb      	bne.n	8007334 <_printf_float+0xe8>
 80073bc:	2900      	cmp	r1, #0
 80073be:	d1b9      	bne.n	8007334 <_printf_float+0xe8>
 80073c0:	2301      	movs	r3, #1
 80073c2:	e7b6      	b.n	8007332 <_printf_float+0xe6>
 80073c4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80073c8:	d119      	bne.n	80073fe <_printf_float+0x1b2>
 80073ca:	2900      	cmp	r1, #0
 80073cc:	6863      	ldr	r3, [r4, #4]
 80073ce:	dd0c      	ble.n	80073ea <_printf_float+0x19e>
 80073d0:	6121      	str	r1, [r4, #16]
 80073d2:	b913      	cbnz	r3, 80073da <_printf_float+0x18e>
 80073d4:	6822      	ldr	r2, [r4, #0]
 80073d6:	07d2      	lsls	r2, r2, #31
 80073d8:	d502      	bpl.n	80073e0 <_printf_float+0x194>
 80073da:	3301      	adds	r3, #1
 80073dc:	440b      	add	r3, r1
 80073de:	6123      	str	r3, [r4, #16]
 80073e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80073e4:	f04f 0900 	mov.w	r9, #0
 80073e8:	e7d9      	b.n	800739e <_printf_float+0x152>
 80073ea:	b913      	cbnz	r3, 80073f2 <_printf_float+0x1a6>
 80073ec:	6822      	ldr	r2, [r4, #0]
 80073ee:	07d0      	lsls	r0, r2, #31
 80073f0:	d501      	bpl.n	80073f6 <_printf_float+0x1aa>
 80073f2:	3302      	adds	r3, #2
 80073f4:	e7f3      	b.n	80073de <_printf_float+0x192>
 80073f6:	2301      	movs	r3, #1
 80073f8:	e7f1      	b.n	80073de <_printf_float+0x192>
 80073fa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80073fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007402:	4293      	cmp	r3, r2
 8007404:	db05      	blt.n	8007412 <_printf_float+0x1c6>
 8007406:	6822      	ldr	r2, [r4, #0]
 8007408:	6123      	str	r3, [r4, #16]
 800740a:	07d1      	lsls	r1, r2, #31
 800740c:	d5e8      	bpl.n	80073e0 <_printf_float+0x194>
 800740e:	3301      	adds	r3, #1
 8007410:	e7e5      	b.n	80073de <_printf_float+0x192>
 8007412:	2b00      	cmp	r3, #0
 8007414:	bfd4      	ite	le
 8007416:	f1c3 0302 	rsble	r3, r3, #2
 800741a:	2301      	movgt	r3, #1
 800741c:	4413      	add	r3, r2
 800741e:	e7de      	b.n	80073de <_printf_float+0x192>
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	055a      	lsls	r2, r3, #21
 8007424:	d407      	bmi.n	8007436 <_printf_float+0x1ea>
 8007426:	6923      	ldr	r3, [r4, #16]
 8007428:	4642      	mov	r2, r8
 800742a:	4631      	mov	r1, r6
 800742c:	4628      	mov	r0, r5
 800742e:	47b8      	blx	r7
 8007430:	3001      	adds	r0, #1
 8007432:	d12b      	bne.n	800748c <_printf_float+0x240>
 8007434:	e767      	b.n	8007306 <_printf_float+0xba>
 8007436:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800743a:	f240 80dc 	bls.w	80075f6 <_printf_float+0x3aa>
 800743e:	2200      	movs	r2, #0
 8007440:	2300      	movs	r3, #0
 8007442:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007446:	f7f9 fd19 	bl	8000e7c <__aeabi_dcmpeq>
 800744a:	2800      	cmp	r0, #0
 800744c:	d033      	beq.n	80074b6 <_printf_float+0x26a>
 800744e:	2301      	movs	r3, #1
 8007450:	4a41      	ldr	r2, [pc, #260]	; (8007558 <_printf_float+0x30c>)
 8007452:	4631      	mov	r1, r6
 8007454:	4628      	mov	r0, r5
 8007456:	47b8      	blx	r7
 8007458:	3001      	adds	r0, #1
 800745a:	f43f af54 	beq.w	8007306 <_printf_float+0xba>
 800745e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007462:	429a      	cmp	r2, r3
 8007464:	db02      	blt.n	800746c <_printf_float+0x220>
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	07d8      	lsls	r0, r3, #31
 800746a:	d50f      	bpl.n	800748c <_printf_float+0x240>
 800746c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007470:	4631      	mov	r1, r6
 8007472:	4628      	mov	r0, r5
 8007474:	47b8      	blx	r7
 8007476:	3001      	adds	r0, #1
 8007478:	f43f af45 	beq.w	8007306 <_printf_float+0xba>
 800747c:	f04f 0800 	mov.w	r8, #0
 8007480:	f104 091a 	add.w	r9, r4, #26
 8007484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007486:	3b01      	subs	r3, #1
 8007488:	4543      	cmp	r3, r8
 800748a:	dc09      	bgt.n	80074a0 <_printf_float+0x254>
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	079b      	lsls	r3, r3, #30
 8007490:	f100 8103 	bmi.w	800769a <_printf_float+0x44e>
 8007494:	68e0      	ldr	r0, [r4, #12]
 8007496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007498:	4298      	cmp	r0, r3
 800749a:	bfb8      	it	lt
 800749c:	4618      	movlt	r0, r3
 800749e:	e734      	b.n	800730a <_printf_float+0xbe>
 80074a0:	2301      	movs	r3, #1
 80074a2:	464a      	mov	r2, r9
 80074a4:	4631      	mov	r1, r6
 80074a6:	4628      	mov	r0, r5
 80074a8:	47b8      	blx	r7
 80074aa:	3001      	adds	r0, #1
 80074ac:	f43f af2b 	beq.w	8007306 <_printf_float+0xba>
 80074b0:	f108 0801 	add.w	r8, r8, #1
 80074b4:	e7e6      	b.n	8007484 <_printf_float+0x238>
 80074b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	dc2b      	bgt.n	8007514 <_printf_float+0x2c8>
 80074bc:	2301      	movs	r3, #1
 80074be:	4a26      	ldr	r2, [pc, #152]	; (8007558 <_printf_float+0x30c>)
 80074c0:	4631      	mov	r1, r6
 80074c2:	4628      	mov	r0, r5
 80074c4:	47b8      	blx	r7
 80074c6:	3001      	adds	r0, #1
 80074c8:	f43f af1d 	beq.w	8007306 <_printf_float+0xba>
 80074cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ce:	b923      	cbnz	r3, 80074da <_printf_float+0x28e>
 80074d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074d2:	b913      	cbnz	r3, 80074da <_printf_float+0x28e>
 80074d4:	6823      	ldr	r3, [r4, #0]
 80074d6:	07d9      	lsls	r1, r3, #31
 80074d8:	d5d8      	bpl.n	800748c <_printf_float+0x240>
 80074da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074de:	4631      	mov	r1, r6
 80074e0:	4628      	mov	r0, r5
 80074e2:	47b8      	blx	r7
 80074e4:	3001      	adds	r0, #1
 80074e6:	f43f af0e 	beq.w	8007306 <_printf_float+0xba>
 80074ea:	f04f 0900 	mov.w	r9, #0
 80074ee:	f104 0a1a 	add.w	sl, r4, #26
 80074f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074f4:	425b      	negs	r3, r3
 80074f6:	454b      	cmp	r3, r9
 80074f8:	dc01      	bgt.n	80074fe <_printf_float+0x2b2>
 80074fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074fc:	e794      	b.n	8007428 <_printf_float+0x1dc>
 80074fe:	2301      	movs	r3, #1
 8007500:	4652      	mov	r2, sl
 8007502:	4631      	mov	r1, r6
 8007504:	4628      	mov	r0, r5
 8007506:	47b8      	blx	r7
 8007508:	3001      	adds	r0, #1
 800750a:	f43f aefc 	beq.w	8007306 <_printf_float+0xba>
 800750e:	f109 0901 	add.w	r9, r9, #1
 8007512:	e7ee      	b.n	80074f2 <_printf_float+0x2a6>
 8007514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007516:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007518:	429a      	cmp	r2, r3
 800751a:	bfa8      	it	ge
 800751c:	461a      	movge	r2, r3
 800751e:	2a00      	cmp	r2, #0
 8007520:	4691      	mov	r9, r2
 8007522:	dd07      	ble.n	8007534 <_printf_float+0x2e8>
 8007524:	4613      	mov	r3, r2
 8007526:	4631      	mov	r1, r6
 8007528:	4642      	mov	r2, r8
 800752a:	4628      	mov	r0, r5
 800752c:	47b8      	blx	r7
 800752e:	3001      	adds	r0, #1
 8007530:	f43f aee9 	beq.w	8007306 <_printf_float+0xba>
 8007534:	f104 031a 	add.w	r3, r4, #26
 8007538:	f04f 0b00 	mov.w	fp, #0
 800753c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007540:	9306      	str	r3, [sp, #24]
 8007542:	e015      	b.n	8007570 <_printf_float+0x324>
 8007544:	7fefffff 	.word	0x7fefffff
 8007548:	0800be1c 	.word	0x0800be1c
 800754c:	0800be18 	.word	0x0800be18
 8007550:	0800be24 	.word	0x0800be24
 8007554:	0800be20 	.word	0x0800be20
 8007558:	0800be28 	.word	0x0800be28
 800755c:	2301      	movs	r3, #1
 800755e:	9a06      	ldr	r2, [sp, #24]
 8007560:	4631      	mov	r1, r6
 8007562:	4628      	mov	r0, r5
 8007564:	47b8      	blx	r7
 8007566:	3001      	adds	r0, #1
 8007568:	f43f aecd 	beq.w	8007306 <_printf_float+0xba>
 800756c:	f10b 0b01 	add.w	fp, fp, #1
 8007570:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007574:	ebaa 0309 	sub.w	r3, sl, r9
 8007578:	455b      	cmp	r3, fp
 800757a:	dcef      	bgt.n	800755c <_printf_float+0x310>
 800757c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007580:	429a      	cmp	r2, r3
 8007582:	44d0      	add	r8, sl
 8007584:	db15      	blt.n	80075b2 <_printf_float+0x366>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	07da      	lsls	r2, r3, #31
 800758a:	d412      	bmi.n	80075b2 <_printf_float+0x366>
 800758c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800758e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007590:	eba3 020a 	sub.w	r2, r3, sl
 8007594:	eba3 0a01 	sub.w	sl, r3, r1
 8007598:	4592      	cmp	sl, r2
 800759a:	bfa8      	it	ge
 800759c:	4692      	movge	sl, r2
 800759e:	f1ba 0f00 	cmp.w	sl, #0
 80075a2:	dc0e      	bgt.n	80075c2 <_printf_float+0x376>
 80075a4:	f04f 0800 	mov.w	r8, #0
 80075a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075ac:	f104 091a 	add.w	r9, r4, #26
 80075b0:	e019      	b.n	80075e6 <_printf_float+0x39a>
 80075b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075b6:	4631      	mov	r1, r6
 80075b8:	4628      	mov	r0, r5
 80075ba:	47b8      	blx	r7
 80075bc:	3001      	adds	r0, #1
 80075be:	d1e5      	bne.n	800758c <_printf_float+0x340>
 80075c0:	e6a1      	b.n	8007306 <_printf_float+0xba>
 80075c2:	4653      	mov	r3, sl
 80075c4:	4642      	mov	r2, r8
 80075c6:	4631      	mov	r1, r6
 80075c8:	4628      	mov	r0, r5
 80075ca:	47b8      	blx	r7
 80075cc:	3001      	adds	r0, #1
 80075ce:	d1e9      	bne.n	80075a4 <_printf_float+0x358>
 80075d0:	e699      	b.n	8007306 <_printf_float+0xba>
 80075d2:	2301      	movs	r3, #1
 80075d4:	464a      	mov	r2, r9
 80075d6:	4631      	mov	r1, r6
 80075d8:	4628      	mov	r0, r5
 80075da:	47b8      	blx	r7
 80075dc:	3001      	adds	r0, #1
 80075de:	f43f ae92 	beq.w	8007306 <_printf_float+0xba>
 80075e2:	f108 0801 	add.w	r8, r8, #1
 80075e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075ea:	1a9b      	subs	r3, r3, r2
 80075ec:	eba3 030a 	sub.w	r3, r3, sl
 80075f0:	4543      	cmp	r3, r8
 80075f2:	dcee      	bgt.n	80075d2 <_printf_float+0x386>
 80075f4:	e74a      	b.n	800748c <_printf_float+0x240>
 80075f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075f8:	2a01      	cmp	r2, #1
 80075fa:	dc01      	bgt.n	8007600 <_printf_float+0x3b4>
 80075fc:	07db      	lsls	r3, r3, #31
 80075fe:	d53a      	bpl.n	8007676 <_printf_float+0x42a>
 8007600:	2301      	movs	r3, #1
 8007602:	4642      	mov	r2, r8
 8007604:	4631      	mov	r1, r6
 8007606:	4628      	mov	r0, r5
 8007608:	47b8      	blx	r7
 800760a:	3001      	adds	r0, #1
 800760c:	f43f ae7b 	beq.w	8007306 <_printf_float+0xba>
 8007610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007614:	4631      	mov	r1, r6
 8007616:	4628      	mov	r0, r5
 8007618:	47b8      	blx	r7
 800761a:	3001      	adds	r0, #1
 800761c:	f108 0801 	add.w	r8, r8, #1
 8007620:	f43f ae71 	beq.w	8007306 <_printf_float+0xba>
 8007624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007626:	2200      	movs	r2, #0
 8007628:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800762c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007630:	2300      	movs	r3, #0
 8007632:	f7f9 fc23 	bl	8000e7c <__aeabi_dcmpeq>
 8007636:	b9c8      	cbnz	r0, 800766c <_printf_float+0x420>
 8007638:	4653      	mov	r3, sl
 800763a:	4642      	mov	r2, r8
 800763c:	4631      	mov	r1, r6
 800763e:	4628      	mov	r0, r5
 8007640:	47b8      	blx	r7
 8007642:	3001      	adds	r0, #1
 8007644:	d10e      	bne.n	8007664 <_printf_float+0x418>
 8007646:	e65e      	b.n	8007306 <_printf_float+0xba>
 8007648:	2301      	movs	r3, #1
 800764a:	4652      	mov	r2, sl
 800764c:	4631      	mov	r1, r6
 800764e:	4628      	mov	r0, r5
 8007650:	47b8      	blx	r7
 8007652:	3001      	adds	r0, #1
 8007654:	f43f ae57 	beq.w	8007306 <_printf_float+0xba>
 8007658:	f108 0801 	add.w	r8, r8, #1
 800765c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800765e:	3b01      	subs	r3, #1
 8007660:	4543      	cmp	r3, r8
 8007662:	dcf1      	bgt.n	8007648 <_printf_float+0x3fc>
 8007664:	464b      	mov	r3, r9
 8007666:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800766a:	e6de      	b.n	800742a <_printf_float+0x1de>
 800766c:	f04f 0800 	mov.w	r8, #0
 8007670:	f104 0a1a 	add.w	sl, r4, #26
 8007674:	e7f2      	b.n	800765c <_printf_float+0x410>
 8007676:	2301      	movs	r3, #1
 8007678:	e7df      	b.n	800763a <_printf_float+0x3ee>
 800767a:	2301      	movs	r3, #1
 800767c:	464a      	mov	r2, r9
 800767e:	4631      	mov	r1, r6
 8007680:	4628      	mov	r0, r5
 8007682:	47b8      	blx	r7
 8007684:	3001      	adds	r0, #1
 8007686:	f43f ae3e 	beq.w	8007306 <_printf_float+0xba>
 800768a:	f108 0801 	add.w	r8, r8, #1
 800768e:	68e3      	ldr	r3, [r4, #12]
 8007690:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007692:	1a9b      	subs	r3, r3, r2
 8007694:	4543      	cmp	r3, r8
 8007696:	dcf0      	bgt.n	800767a <_printf_float+0x42e>
 8007698:	e6fc      	b.n	8007494 <_printf_float+0x248>
 800769a:	f04f 0800 	mov.w	r8, #0
 800769e:	f104 0919 	add.w	r9, r4, #25
 80076a2:	e7f4      	b.n	800768e <_printf_float+0x442>
 80076a4:	2900      	cmp	r1, #0
 80076a6:	f43f ae8b 	beq.w	80073c0 <_printf_float+0x174>
 80076aa:	2300      	movs	r3, #0
 80076ac:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80076b0:	ab09      	add	r3, sp, #36	; 0x24
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	ec49 8b10 	vmov	d0, r8, r9
 80076b8:	6022      	str	r2, [r4, #0]
 80076ba:	f8cd a004 	str.w	sl, [sp, #4]
 80076be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80076c2:	4628      	mov	r0, r5
 80076c4:	f7ff fd2d 	bl	8007122 <__cvt>
 80076c8:	4680      	mov	r8, r0
 80076ca:	e648      	b.n	800735e <_printf_float+0x112>

080076cc <_printf_common>:
 80076cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076d0:	4691      	mov	r9, r2
 80076d2:	461f      	mov	r7, r3
 80076d4:	688a      	ldr	r2, [r1, #8]
 80076d6:	690b      	ldr	r3, [r1, #16]
 80076d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076dc:	4293      	cmp	r3, r2
 80076de:	bfb8      	it	lt
 80076e0:	4613      	movlt	r3, r2
 80076e2:	f8c9 3000 	str.w	r3, [r9]
 80076e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076ea:	4606      	mov	r6, r0
 80076ec:	460c      	mov	r4, r1
 80076ee:	b112      	cbz	r2, 80076f6 <_printf_common+0x2a>
 80076f0:	3301      	adds	r3, #1
 80076f2:	f8c9 3000 	str.w	r3, [r9]
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	0699      	lsls	r1, r3, #26
 80076fa:	bf42      	ittt	mi
 80076fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007700:	3302      	addmi	r3, #2
 8007702:	f8c9 3000 	strmi.w	r3, [r9]
 8007706:	6825      	ldr	r5, [r4, #0]
 8007708:	f015 0506 	ands.w	r5, r5, #6
 800770c:	d107      	bne.n	800771e <_printf_common+0x52>
 800770e:	f104 0a19 	add.w	sl, r4, #25
 8007712:	68e3      	ldr	r3, [r4, #12]
 8007714:	f8d9 2000 	ldr.w	r2, [r9]
 8007718:	1a9b      	subs	r3, r3, r2
 800771a:	42ab      	cmp	r3, r5
 800771c:	dc28      	bgt.n	8007770 <_printf_common+0xa4>
 800771e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007722:	6822      	ldr	r2, [r4, #0]
 8007724:	3300      	adds	r3, #0
 8007726:	bf18      	it	ne
 8007728:	2301      	movne	r3, #1
 800772a:	0692      	lsls	r2, r2, #26
 800772c:	d42d      	bmi.n	800778a <_printf_common+0xbe>
 800772e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007732:	4639      	mov	r1, r7
 8007734:	4630      	mov	r0, r6
 8007736:	47c0      	blx	r8
 8007738:	3001      	adds	r0, #1
 800773a:	d020      	beq.n	800777e <_printf_common+0xb2>
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	68e5      	ldr	r5, [r4, #12]
 8007740:	f8d9 2000 	ldr.w	r2, [r9]
 8007744:	f003 0306 	and.w	r3, r3, #6
 8007748:	2b04      	cmp	r3, #4
 800774a:	bf08      	it	eq
 800774c:	1aad      	subeq	r5, r5, r2
 800774e:	68a3      	ldr	r3, [r4, #8]
 8007750:	6922      	ldr	r2, [r4, #16]
 8007752:	bf0c      	ite	eq
 8007754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007758:	2500      	movne	r5, #0
 800775a:	4293      	cmp	r3, r2
 800775c:	bfc4      	itt	gt
 800775e:	1a9b      	subgt	r3, r3, r2
 8007760:	18ed      	addgt	r5, r5, r3
 8007762:	f04f 0900 	mov.w	r9, #0
 8007766:	341a      	adds	r4, #26
 8007768:	454d      	cmp	r5, r9
 800776a:	d11a      	bne.n	80077a2 <_printf_common+0xd6>
 800776c:	2000      	movs	r0, #0
 800776e:	e008      	b.n	8007782 <_printf_common+0xb6>
 8007770:	2301      	movs	r3, #1
 8007772:	4652      	mov	r2, sl
 8007774:	4639      	mov	r1, r7
 8007776:	4630      	mov	r0, r6
 8007778:	47c0      	blx	r8
 800777a:	3001      	adds	r0, #1
 800777c:	d103      	bne.n	8007786 <_printf_common+0xba>
 800777e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007786:	3501      	adds	r5, #1
 8007788:	e7c3      	b.n	8007712 <_printf_common+0x46>
 800778a:	18e1      	adds	r1, r4, r3
 800778c:	1c5a      	adds	r2, r3, #1
 800778e:	2030      	movs	r0, #48	; 0x30
 8007790:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007794:	4422      	add	r2, r4
 8007796:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800779a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800779e:	3302      	adds	r3, #2
 80077a0:	e7c5      	b.n	800772e <_printf_common+0x62>
 80077a2:	2301      	movs	r3, #1
 80077a4:	4622      	mov	r2, r4
 80077a6:	4639      	mov	r1, r7
 80077a8:	4630      	mov	r0, r6
 80077aa:	47c0      	blx	r8
 80077ac:	3001      	adds	r0, #1
 80077ae:	d0e6      	beq.n	800777e <_printf_common+0xb2>
 80077b0:	f109 0901 	add.w	r9, r9, #1
 80077b4:	e7d8      	b.n	8007768 <_printf_common+0x9c>
	...

080077b8 <_printf_i>:
 80077b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80077c0:	460c      	mov	r4, r1
 80077c2:	7e09      	ldrb	r1, [r1, #24]
 80077c4:	b085      	sub	sp, #20
 80077c6:	296e      	cmp	r1, #110	; 0x6e
 80077c8:	4617      	mov	r7, r2
 80077ca:	4606      	mov	r6, r0
 80077cc:	4698      	mov	r8, r3
 80077ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077d0:	f000 80b3 	beq.w	800793a <_printf_i+0x182>
 80077d4:	d822      	bhi.n	800781c <_printf_i+0x64>
 80077d6:	2963      	cmp	r1, #99	; 0x63
 80077d8:	d036      	beq.n	8007848 <_printf_i+0x90>
 80077da:	d80a      	bhi.n	80077f2 <_printf_i+0x3a>
 80077dc:	2900      	cmp	r1, #0
 80077de:	f000 80b9 	beq.w	8007954 <_printf_i+0x19c>
 80077e2:	2958      	cmp	r1, #88	; 0x58
 80077e4:	f000 8083 	beq.w	80078ee <_printf_i+0x136>
 80077e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80077f0:	e032      	b.n	8007858 <_printf_i+0xa0>
 80077f2:	2964      	cmp	r1, #100	; 0x64
 80077f4:	d001      	beq.n	80077fa <_printf_i+0x42>
 80077f6:	2969      	cmp	r1, #105	; 0x69
 80077f8:	d1f6      	bne.n	80077e8 <_printf_i+0x30>
 80077fa:	6820      	ldr	r0, [r4, #0]
 80077fc:	6813      	ldr	r3, [r2, #0]
 80077fe:	0605      	lsls	r5, r0, #24
 8007800:	f103 0104 	add.w	r1, r3, #4
 8007804:	d52a      	bpl.n	800785c <_printf_i+0xa4>
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6011      	str	r1, [r2, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	da03      	bge.n	8007816 <_printf_i+0x5e>
 800780e:	222d      	movs	r2, #45	; 0x2d
 8007810:	425b      	negs	r3, r3
 8007812:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007816:	486f      	ldr	r0, [pc, #444]	; (80079d4 <_printf_i+0x21c>)
 8007818:	220a      	movs	r2, #10
 800781a:	e039      	b.n	8007890 <_printf_i+0xd8>
 800781c:	2973      	cmp	r1, #115	; 0x73
 800781e:	f000 809d 	beq.w	800795c <_printf_i+0x1a4>
 8007822:	d808      	bhi.n	8007836 <_printf_i+0x7e>
 8007824:	296f      	cmp	r1, #111	; 0x6f
 8007826:	d020      	beq.n	800786a <_printf_i+0xb2>
 8007828:	2970      	cmp	r1, #112	; 0x70
 800782a:	d1dd      	bne.n	80077e8 <_printf_i+0x30>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	f043 0320 	orr.w	r3, r3, #32
 8007832:	6023      	str	r3, [r4, #0]
 8007834:	e003      	b.n	800783e <_printf_i+0x86>
 8007836:	2975      	cmp	r1, #117	; 0x75
 8007838:	d017      	beq.n	800786a <_printf_i+0xb2>
 800783a:	2978      	cmp	r1, #120	; 0x78
 800783c:	d1d4      	bne.n	80077e8 <_printf_i+0x30>
 800783e:	2378      	movs	r3, #120	; 0x78
 8007840:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007844:	4864      	ldr	r0, [pc, #400]	; (80079d8 <_printf_i+0x220>)
 8007846:	e055      	b.n	80078f4 <_printf_i+0x13c>
 8007848:	6813      	ldr	r3, [r2, #0]
 800784a:	1d19      	adds	r1, r3, #4
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6011      	str	r1, [r2, #0]
 8007850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007858:	2301      	movs	r3, #1
 800785a:	e08c      	b.n	8007976 <_printf_i+0x1be>
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6011      	str	r1, [r2, #0]
 8007860:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007864:	bf18      	it	ne
 8007866:	b21b      	sxthne	r3, r3
 8007868:	e7cf      	b.n	800780a <_printf_i+0x52>
 800786a:	6813      	ldr	r3, [r2, #0]
 800786c:	6825      	ldr	r5, [r4, #0]
 800786e:	1d18      	adds	r0, r3, #4
 8007870:	6010      	str	r0, [r2, #0]
 8007872:	0628      	lsls	r0, r5, #24
 8007874:	d501      	bpl.n	800787a <_printf_i+0xc2>
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	e002      	b.n	8007880 <_printf_i+0xc8>
 800787a:	0668      	lsls	r0, r5, #25
 800787c:	d5fb      	bpl.n	8007876 <_printf_i+0xbe>
 800787e:	881b      	ldrh	r3, [r3, #0]
 8007880:	4854      	ldr	r0, [pc, #336]	; (80079d4 <_printf_i+0x21c>)
 8007882:	296f      	cmp	r1, #111	; 0x6f
 8007884:	bf14      	ite	ne
 8007886:	220a      	movne	r2, #10
 8007888:	2208      	moveq	r2, #8
 800788a:	2100      	movs	r1, #0
 800788c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007890:	6865      	ldr	r5, [r4, #4]
 8007892:	60a5      	str	r5, [r4, #8]
 8007894:	2d00      	cmp	r5, #0
 8007896:	f2c0 8095 	blt.w	80079c4 <_printf_i+0x20c>
 800789a:	6821      	ldr	r1, [r4, #0]
 800789c:	f021 0104 	bic.w	r1, r1, #4
 80078a0:	6021      	str	r1, [r4, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d13d      	bne.n	8007922 <_printf_i+0x16a>
 80078a6:	2d00      	cmp	r5, #0
 80078a8:	f040 808e 	bne.w	80079c8 <_printf_i+0x210>
 80078ac:	4665      	mov	r5, ip
 80078ae:	2a08      	cmp	r2, #8
 80078b0:	d10b      	bne.n	80078ca <_printf_i+0x112>
 80078b2:	6823      	ldr	r3, [r4, #0]
 80078b4:	07db      	lsls	r3, r3, #31
 80078b6:	d508      	bpl.n	80078ca <_printf_i+0x112>
 80078b8:	6923      	ldr	r3, [r4, #16]
 80078ba:	6862      	ldr	r2, [r4, #4]
 80078bc:	429a      	cmp	r2, r3
 80078be:	bfde      	ittt	le
 80078c0:	2330      	movle	r3, #48	; 0x30
 80078c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078c6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80078ca:	ebac 0305 	sub.w	r3, ip, r5
 80078ce:	6123      	str	r3, [r4, #16]
 80078d0:	f8cd 8000 	str.w	r8, [sp]
 80078d4:	463b      	mov	r3, r7
 80078d6:	aa03      	add	r2, sp, #12
 80078d8:	4621      	mov	r1, r4
 80078da:	4630      	mov	r0, r6
 80078dc:	f7ff fef6 	bl	80076cc <_printf_common>
 80078e0:	3001      	adds	r0, #1
 80078e2:	d14d      	bne.n	8007980 <_printf_i+0x1c8>
 80078e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078e8:	b005      	add	sp, #20
 80078ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078ee:	4839      	ldr	r0, [pc, #228]	; (80079d4 <_printf_i+0x21c>)
 80078f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80078f4:	6813      	ldr	r3, [r2, #0]
 80078f6:	6821      	ldr	r1, [r4, #0]
 80078f8:	1d1d      	adds	r5, r3, #4
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6015      	str	r5, [r2, #0]
 80078fe:	060a      	lsls	r2, r1, #24
 8007900:	d50b      	bpl.n	800791a <_printf_i+0x162>
 8007902:	07ca      	lsls	r2, r1, #31
 8007904:	bf44      	itt	mi
 8007906:	f041 0120 	orrmi.w	r1, r1, #32
 800790a:	6021      	strmi	r1, [r4, #0]
 800790c:	b91b      	cbnz	r3, 8007916 <_printf_i+0x15e>
 800790e:	6822      	ldr	r2, [r4, #0]
 8007910:	f022 0220 	bic.w	r2, r2, #32
 8007914:	6022      	str	r2, [r4, #0]
 8007916:	2210      	movs	r2, #16
 8007918:	e7b7      	b.n	800788a <_printf_i+0xd2>
 800791a:	064d      	lsls	r5, r1, #25
 800791c:	bf48      	it	mi
 800791e:	b29b      	uxthmi	r3, r3
 8007920:	e7ef      	b.n	8007902 <_printf_i+0x14a>
 8007922:	4665      	mov	r5, ip
 8007924:	fbb3 f1f2 	udiv	r1, r3, r2
 8007928:	fb02 3311 	mls	r3, r2, r1, r3
 800792c:	5cc3      	ldrb	r3, [r0, r3]
 800792e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007932:	460b      	mov	r3, r1
 8007934:	2900      	cmp	r1, #0
 8007936:	d1f5      	bne.n	8007924 <_printf_i+0x16c>
 8007938:	e7b9      	b.n	80078ae <_printf_i+0xf6>
 800793a:	6813      	ldr	r3, [r2, #0]
 800793c:	6825      	ldr	r5, [r4, #0]
 800793e:	6961      	ldr	r1, [r4, #20]
 8007940:	1d18      	adds	r0, r3, #4
 8007942:	6010      	str	r0, [r2, #0]
 8007944:	0628      	lsls	r0, r5, #24
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	d501      	bpl.n	800794e <_printf_i+0x196>
 800794a:	6019      	str	r1, [r3, #0]
 800794c:	e002      	b.n	8007954 <_printf_i+0x19c>
 800794e:	066a      	lsls	r2, r5, #25
 8007950:	d5fb      	bpl.n	800794a <_printf_i+0x192>
 8007952:	8019      	strh	r1, [r3, #0]
 8007954:	2300      	movs	r3, #0
 8007956:	6123      	str	r3, [r4, #16]
 8007958:	4665      	mov	r5, ip
 800795a:	e7b9      	b.n	80078d0 <_printf_i+0x118>
 800795c:	6813      	ldr	r3, [r2, #0]
 800795e:	1d19      	adds	r1, r3, #4
 8007960:	6011      	str	r1, [r2, #0]
 8007962:	681d      	ldr	r5, [r3, #0]
 8007964:	6862      	ldr	r2, [r4, #4]
 8007966:	2100      	movs	r1, #0
 8007968:	4628      	mov	r0, r5
 800796a:	f7f9 f9e1 	bl	8000d30 <memchr>
 800796e:	b108      	cbz	r0, 8007974 <_printf_i+0x1bc>
 8007970:	1b40      	subs	r0, r0, r5
 8007972:	6060      	str	r0, [r4, #4]
 8007974:	6863      	ldr	r3, [r4, #4]
 8007976:	6123      	str	r3, [r4, #16]
 8007978:	2300      	movs	r3, #0
 800797a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800797e:	e7a7      	b.n	80078d0 <_printf_i+0x118>
 8007980:	6923      	ldr	r3, [r4, #16]
 8007982:	462a      	mov	r2, r5
 8007984:	4639      	mov	r1, r7
 8007986:	4630      	mov	r0, r6
 8007988:	47c0      	blx	r8
 800798a:	3001      	adds	r0, #1
 800798c:	d0aa      	beq.n	80078e4 <_printf_i+0x12c>
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	079b      	lsls	r3, r3, #30
 8007992:	d413      	bmi.n	80079bc <_printf_i+0x204>
 8007994:	68e0      	ldr	r0, [r4, #12]
 8007996:	9b03      	ldr	r3, [sp, #12]
 8007998:	4298      	cmp	r0, r3
 800799a:	bfb8      	it	lt
 800799c:	4618      	movlt	r0, r3
 800799e:	e7a3      	b.n	80078e8 <_printf_i+0x130>
 80079a0:	2301      	movs	r3, #1
 80079a2:	464a      	mov	r2, r9
 80079a4:	4639      	mov	r1, r7
 80079a6:	4630      	mov	r0, r6
 80079a8:	47c0      	blx	r8
 80079aa:	3001      	adds	r0, #1
 80079ac:	d09a      	beq.n	80078e4 <_printf_i+0x12c>
 80079ae:	3501      	adds	r5, #1
 80079b0:	68e3      	ldr	r3, [r4, #12]
 80079b2:	9a03      	ldr	r2, [sp, #12]
 80079b4:	1a9b      	subs	r3, r3, r2
 80079b6:	42ab      	cmp	r3, r5
 80079b8:	dcf2      	bgt.n	80079a0 <_printf_i+0x1e8>
 80079ba:	e7eb      	b.n	8007994 <_printf_i+0x1dc>
 80079bc:	2500      	movs	r5, #0
 80079be:	f104 0919 	add.w	r9, r4, #25
 80079c2:	e7f5      	b.n	80079b0 <_printf_i+0x1f8>
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1ac      	bne.n	8007922 <_printf_i+0x16a>
 80079c8:	7803      	ldrb	r3, [r0, #0]
 80079ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079d2:	e76c      	b.n	80078ae <_printf_i+0xf6>
 80079d4:	0800be2a 	.word	0x0800be2a
 80079d8:	0800be3b 	.word	0x0800be3b

080079dc <iprintf>:
 80079dc:	b40f      	push	{r0, r1, r2, r3}
 80079de:	4b0a      	ldr	r3, [pc, #40]	; (8007a08 <iprintf+0x2c>)
 80079e0:	b513      	push	{r0, r1, r4, lr}
 80079e2:	681c      	ldr	r4, [r3, #0]
 80079e4:	b124      	cbz	r4, 80079f0 <iprintf+0x14>
 80079e6:	69a3      	ldr	r3, [r4, #24]
 80079e8:	b913      	cbnz	r3, 80079f0 <iprintf+0x14>
 80079ea:	4620      	mov	r0, r4
 80079ec:	f001 f888 	bl	8008b00 <__sinit>
 80079f0:	ab05      	add	r3, sp, #20
 80079f2:	9a04      	ldr	r2, [sp, #16]
 80079f4:	68a1      	ldr	r1, [r4, #8]
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	4620      	mov	r0, r4
 80079fa:	f001 fe93 	bl	8009724 <_vfiprintf_r>
 80079fe:	b002      	add	sp, #8
 8007a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a04:	b004      	add	sp, #16
 8007a06:	4770      	bx	lr
 8007a08:	20000064 	.word	0x20000064

08007a0c <_puts_r>:
 8007a0c:	b570      	push	{r4, r5, r6, lr}
 8007a0e:	460e      	mov	r6, r1
 8007a10:	4605      	mov	r5, r0
 8007a12:	b118      	cbz	r0, 8007a1c <_puts_r+0x10>
 8007a14:	6983      	ldr	r3, [r0, #24]
 8007a16:	b90b      	cbnz	r3, 8007a1c <_puts_r+0x10>
 8007a18:	f001 f872 	bl	8008b00 <__sinit>
 8007a1c:	69ab      	ldr	r3, [r5, #24]
 8007a1e:	68ac      	ldr	r4, [r5, #8]
 8007a20:	b913      	cbnz	r3, 8007a28 <_puts_r+0x1c>
 8007a22:	4628      	mov	r0, r5
 8007a24:	f001 f86c 	bl	8008b00 <__sinit>
 8007a28:	4b23      	ldr	r3, [pc, #140]	; (8007ab8 <_puts_r+0xac>)
 8007a2a:	429c      	cmp	r4, r3
 8007a2c:	d117      	bne.n	8007a5e <_puts_r+0x52>
 8007a2e:	686c      	ldr	r4, [r5, #4]
 8007a30:	89a3      	ldrh	r3, [r4, #12]
 8007a32:	071b      	lsls	r3, r3, #28
 8007a34:	d51d      	bpl.n	8007a72 <_puts_r+0x66>
 8007a36:	6923      	ldr	r3, [r4, #16]
 8007a38:	b1db      	cbz	r3, 8007a72 <_puts_r+0x66>
 8007a3a:	3e01      	subs	r6, #1
 8007a3c:	68a3      	ldr	r3, [r4, #8]
 8007a3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a42:	3b01      	subs	r3, #1
 8007a44:	60a3      	str	r3, [r4, #8]
 8007a46:	b9e9      	cbnz	r1, 8007a84 <_puts_r+0x78>
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	da2e      	bge.n	8007aaa <_puts_r+0x9e>
 8007a4c:	4622      	mov	r2, r4
 8007a4e:	210a      	movs	r1, #10
 8007a50:	4628      	mov	r0, r5
 8007a52:	f000 f85f 	bl	8007b14 <__swbuf_r>
 8007a56:	3001      	adds	r0, #1
 8007a58:	d011      	beq.n	8007a7e <_puts_r+0x72>
 8007a5a:	200a      	movs	r0, #10
 8007a5c:	e011      	b.n	8007a82 <_puts_r+0x76>
 8007a5e:	4b17      	ldr	r3, [pc, #92]	; (8007abc <_puts_r+0xb0>)
 8007a60:	429c      	cmp	r4, r3
 8007a62:	d101      	bne.n	8007a68 <_puts_r+0x5c>
 8007a64:	68ac      	ldr	r4, [r5, #8]
 8007a66:	e7e3      	b.n	8007a30 <_puts_r+0x24>
 8007a68:	4b15      	ldr	r3, [pc, #84]	; (8007ac0 <_puts_r+0xb4>)
 8007a6a:	429c      	cmp	r4, r3
 8007a6c:	bf08      	it	eq
 8007a6e:	68ec      	ldreq	r4, [r5, #12]
 8007a70:	e7de      	b.n	8007a30 <_puts_r+0x24>
 8007a72:	4621      	mov	r1, r4
 8007a74:	4628      	mov	r0, r5
 8007a76:	f000 f89f 	bl	8007bb8 <__swsetup_r>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d0dd      	beq.n	8007a3a <_puts_r+0x2e>
 8007a7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	da04      	bge.n	8007a92 <_puts_r+0x86>
 8007a88:	69a2      	ldr	r2, [r4, #24]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	dc06      	bgt.n	8007a9c <_puts_r+0x90>
 8007a8e:	290a      	cmp	r1, #10
 8007a90:	d004      	beq.n	8007a9c <_puts_r+0x90>
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	1c5a      	adds	r2, r3, #1
 8007a96:	6022      	str	r2, [r4, #0]
 8007a98:	7019      	strb	r1, [r3, #0]
 8007a9a:	e7cf      	b.n	8007a3c <_puts_r+0x30>
 8007a9c:	4622      	mov	r2, r4
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f000 f838 	bl	8007b14 <__swbuf_r>
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	d1c9      	bne.n	8007a3c <_puts_r+0x30>
 8007aa8:	e7e9      	b.n	8007a7e <_puts_r+0x72>
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	200a      	movs	r0, #10
 8007aae:	1c5a      	adds	r2, r3, #1
 8007ab0:	6022      	str	r2, [r4, #0]
 8007ab2:	7018      	strb	r0, [r3, #0]
 8007ab4:	e7e5      	b.n	8007a82 <_puts_r+0x76>
 8007ab6:	bf00      	nop
 8007ab8:	0800be7c 	.word	0x0800be7c
 8007abc:	0800be9c 	.word	0x0800be9c
 8007ac0:	0800be5c 	.word	0x0800be5c

08007ac4 <puts>:
 8007ac4:	4b02      	ldr	r3, [pc, #8]	; (8007ad0 <puts+0xc>)
 8007ac6:	4601      	mov	r1, r0
 8007ac8:	6818      	ldr	r0, [r3, #0]
 8007aca:	f7ff bf9f 	b.w	8007a0c <_puts_r>
 8007ace:	bf00      	nop
 8007ad0:	20000064 	.word	0x20000064

08007ad4 <siprintf>:
 8007ad4:	b40e      	push	{r1, r2, r3}
 8007ad6:	b500      	push	{lr}
 8007ad8:	b09c      	sub	sp, #112	; 0x70
 8007ada:	ab1d      	add	r3, sp, #116	; 0x74
 8007adc:	9002      	str	r0, [sp, #8]
 8007ade:	9006      	str	r0, [sp, #24]
 8007ae0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ae4:	4809      	ldr	r0, [pc, #36]	; (8007b0c <siprintf+0x38>)
 8007ae6:	9107      	str	r1, [sp, #28]
 8007ae8:	9104      	str	r1, [sp, #16]
 8007aea:	4909      	ldr	r1, [pc, #36]	; (8007b10 <siprintf+0x3c>)
 8007aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007af0:	9105      	str	r1, [sp, #20]
 8007af2:	6800      	ldr	r0, [r0, #0]
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	a902      	add	r1, sp, #8
 8007af8:	f001 fcf2 	bl	80094e0 <_svfiprintf_r>
 8007afc:	9b02      	ldr	r3, [sp, #8]
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
 8007b02:	b01c      	add	sp, #112	; 0x70
 8007b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b08:	b003      	add	sp, #12
 8007b0a:	4770      	bx	lr
 8007b0c:	20000064 	.word	0x20000064
 8007b10:	ffff0208 	.word	0xffff0208

08007b14 <__swbuf_r>:
 8007b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b16:	460e      	mov	r6, r1
 8007b18:	4614      	mov	r4, r2
 8007b1a:	4605      	mov	r5, r0
 8007b1c:	b118      	cbz	r0, 8007b26 <__swbuf_r+0x12>
 8007b1e:	6983      	ldr	r3, [r0, #24]
 8007b20:	b90b      	cbnz	r3, 8007b26 <__swbuf_r+0x12>
 8007b22:	f000 ffed 	bl	8008b00 <__sinit>
 8007b26:	4b21      	ldr	r3, [pc, #132]	; (8007bac <__swbuf_r+0x98>)
 8007b28:	429c      	cmp	r4, r3
 8007b2a:	d12a      	bne.n	8007b82 <__swbuf_r+0x6e>
 8007b2c:	686c      	ldr	r4, [r5, #4]
 8007b2e:	69a3      	ldr	r3, [r4, #24]
 8007b30:	60a3      	str	r3, [r4, #8]
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	071a      	lsls	r2, r3, #28
 8007b36:	d52e      	bpl.n	8007b96 <__swbuf_r+0x82>
 8007b38:	6923      	ldr	r3, [r4, #16]
 8007b3a:	b363      	cbz	r3, 8007b96 <__swbuf_r+0x82>
 8007b3c:	6923      	ldr	r3, [r4, #16]
 8007b3e:	6820      	ldr	r0, [r4, #0]
 8007b40:	1ac0      	subs	r0, r0, r3
 8007b42:	6963      	ldr	r3, [r4, #20]
 8007b44:	b2f6      	uxtb	r6, r6
 8007b46:	4283      	cmp	r3, r0
 8007b48:	4637      	mov	r7, r6
 8007b4a:	dc04      	bgt.n	8007b56 <__swbuf_r+0x42>
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f000 ff6c 	bl	8008a2c <_fflush_r>
 8007b54:	bb28      	cbnz	r0, 8007ba2 <__swbuf_r+0x8e>
 8007b56:	68a3      	ldr	r3, [r4, #8]
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	60a3      	str	r3, [r4, #8]
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	1c5a      	adds	r2, r3, #1
 8007b60:	6022      	str	r2, [r4, #0]
 8007b62:	701e      	strb	r6, [r3, #0]
 8007b64:	6963      	ldr	r3, [r4, #20]
 8007b66:	3001      	adds	r0, #1
 8007b68:	4283      	cmp	r3, r0
 8007b6a:	d004      	beq.n	8007b76 <__swbuf_r+0x62>
 8007b6c:	89a3      	ldrh	r3, [r4, #12]
 8007b6e:	07db      	lsls	r3, r3, #31
 8007b70:	d519      	bpl.n	8007ba6 <__swbuf_r+0x92>
 8007b72:	2e0a      	cmp	r6, #10
 8007b74:	d117      	bne.n	8007ba6 <__swbuf_r+0x92>
 8007b76:	4621      	mov	r1, r4
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f000 ff57 	bl	8008a2c <_fflush_r>
 8007b7e:	b190      	cbz	r0, 8007ba6 <__swbuf_r+0x92>
 8007b80:	e00f      	b.n	8007ba2 <__swbuf_r+0x8e>
 8007b82:	4b0b      	ldr	r3, [pc, #44]	; (8007bb0 <__swbuf_r+0x9c>)
 8007b84:	429c      	cmp	r4, r3
 8007b86:	d101      	bne.n	8007b8c <__swbuf_r+0x78>
 8007b88:	68ac      	ldr	r4, [r5, #8]
 8007b8a:	e7d0      	b.n	8007b2e <__swbuf_r+0x1a>
 8007b8c:	4b09      	ldr	r3, [pc, #36]	; (8007bb4 <__swbuf_r+0xa0>)
 8007b8e:	429c      	cmp	r4, r3
 8007b90:	bf08      	it	eq
 8007b92:	68ec      	ldreq	r4, [r5, #12]
 8007b94:	e7cb      	b.n	8007b2e <__swbuf_r+0x1a>
 8007b96:	4621      	mov	r1, r4
 8007b98:	4628      	mov	r0, r5
 8007b9a:	f000 f80d 	bl	8007bb8 <__swsetup_r>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d0cc      	beq.n	8007b3c <__swbuf_r+0x28>
 8007ba2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007baa:	bf00      	nop
 8007bac:	0800be7c 	.word	0x0800be7c
 8007bb0:	0800be9c 	.word	0x0800be9c
 8007bb4:	0800be5c 	.word	0x0800be5c

08007bb8 <__swsetup_r>:
 8007bb8:	4b32      	ldr	r3, [pc, #200]	; (8007c84 <__swsetup_r+0xcc>)
 8007bba:	b570      	push	{r4, r5, r6, lr}
 8007bbc:	681d      	ldr	r5, [r3, #0]
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	b125      	cbz	r5, 8007bce <__swsetup_r+0x16>
 8007bc4:	69ab      	ldr	r3, [r5, #24]
 8007bc6:	b913      	cbnz	r3, 8007bce <__swsetup_r+0x16>
 8007bc8:	4628      	mov	r0, r5
 8007bca:	f000 ff99 	bl	8008b00 <__sinit>
 8007bce:	4b2e      	ldr	r3, [pc, #184]	; (8007c88 <__swsetup_r+0xd0>)
 8007bd0:	429c      	cmp	r4, r3
 8007bd2:	d10f      	bne.n	8007bf4 <__swsetup_r+0x3c>
 8007bd4:	686c      	ldr	r4, [r5, #4]
 8007bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	0715      	lsls	r5, r2, #28
 8007bde:	d42c      	bmi.n	8007c3a <__swsetup_r+0x82>
 8007be0:	06d0      	lsls	r0, r2, #27
 8007be2:	d411      	bmi.n	8007c08 <__swsetup_r+0x50>
 8007be4:	2209      	movs	r2, #9
 8007be6:	6032      	str	r2, [r6, #0]
 8007be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bec:	81a3      	strh	r3, [r4, #12]
 8007bee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bf2:	e03e      	b.n	8007c72 <__swsetup_r+0xba>
 8007bf4:	4b25      	ldr	r3, [pc, #148]	; (8007c8c <__swsetup_r+0xd4>)
 8007bf6:	429c      	cmp	r4, r3
 8007bf8:	d101      	bne.n	8007bfe <__swsetup_r+0x46>
 8007bfa:	68ac      	ldr	r4, [r5, #8]
 8007bfc:	e7eb      	b.n	8007bd6 <__swsetup_r+0x1e>
 8007bfe:	4b24      	ldr	r3, [pc, #144]	; (8007c90 <__swsetup_r+0xd8>)
 8007c00:	429c      	cmp	r4, r3
 8007c02:	bf08      	it	eq
 8007c04:	68ec      	ldreq	r4, [r5, #12]
 8007c06:	e7e6      	b.n	8007bd6 <__swsetup_r+0x1e>
 8007c08:	0751      	lsls	r1, r2, #29
 8007c0a:	d512      	bpl.n	8007c32 <__swsetup_r+0x7a>
 8007c0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c0e:	b141      	cbz	r1, 8007c22 <__swsetup_r+0x6a>
 8007c10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c14:	4299      	cmp	r1, r3
 8007c16:	d002      	beq.n	8007c1e <__swsetup_r+0x66>
 8007c18:	4630      	mov	r0, r6
 8007c1a:	f001 fb5f 	bl	80092dc <_free_r>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	6363      	str	r3, [r4, #52]	; 0x34
 8007c22:	89a3      	ldrh	r3, [r4, #12]
 8007c24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c28:	81a3      	strh	r3, [r4, #12]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	6063      	str	r3, [r4, #4]
 8007c2e:	6923      	ldr	r3, [r4, #16]
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	f043 0308 	orr.w	r3, r3, #8
 8007c38:	81a3      	strh	r3, [r4, #12]
 8007c3a:	6923      	ldr	r3, [r4, #16]
 8007c3c:	b94b      	cbnz	r3, 8007c52 <__swsetup_r+0x9a>
 8007c3e:	89a3      	ldrh	r3, [r4, #12]
 8007c40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c48:	d003      	beq.n	8007c52 <__swsetup_r+0x9a>
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f001 f813 	bl	8008c78 <__smakebuf_r>
 8007c52:	89a2      	ldrh	r2, [r4, #12]
 8007c54:	f012 0301 	ands.w	r3, r2, #1
 8007c58:	d00c      	beq.n	8007c74 <__swsetup_r+0xbc>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	60a3      	str	r3, [r4, #8]
 8007c5e:	6963      	ldr	r3, [r4, #20]
 8007c60:	425b      	negs	r3, r3
 8007c62:	61a3      	str	r3, [r4, #24]
 8007c64:	6923      	ldr	r3, [r4, #16]
 8007c66:	b953      	cbnz	r3, 8007c7e <__swsetup_r+0xc6>
 8007c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c6c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007c70:	d1ba      	bne.n	8007be8 <__swsetup_r+0x30>
 8007c72:	bd70      	pop	{r4, r5, r6, pc}
 8007c74:	0792      	lsls	r2, r2, #30
 8007c76:	bf58      	it	pl
 8007c78:	6963      	ldrpl	r3, [r4, #20]
 8007c7a:	60a3      	str	r3, [r4, #8]
 8007c7c:	e7f2      	b.n	8007c64 <__swsetup_r+0xac>
 8007c7e:	2000      	movs	r0, #0
 8007c80:	e7f7      	b.n	8007c72 <__swsetup_r+0xba>
 8007c82:	bf00      	nop
 8007c84:	20000064 	.word	0x20000064
 8007c88:	0800be7c 	.word	0x0800be7c
 8007c8c:	0800be9c 	.word	0x0800be9c
 8007c90:	0800be5c 	.word	0x0800be5c

08007c94 <quorem>:
 8007c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c98:	6903      	ldr	r3, [r0, #16]
 8007c9a:	690c      	ldr	r4, [r1, #16]
 8007c9c:	42a3      	cmp	r3, r4
 8007c9e:	4680      	mov	r8, r0
 8007ca0:	f2c0 8082 	blt.w	8007da8 <quorem+0x114>
 8007ca4:	3c01      	subs	r4, #1
 8007ca6:	f101 0714 	add.w	r7, r1, #20
 8007caa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007cae:	f100 0614 	add.w	r6, r0, #20
 8007cb2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007cb6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007cba:	eb06 030c 	add.w	r3, r6, ip
 8007cbe:	3501      	adds	r5, #1
 8007cc0:	eb07 090c 	add.w	r9, r7, ip
 8007cc4:	9301      	str	r3, [sp, #4]
 8007cc6:	fbb0 f5f5 	udiv	r5, r0, r5
 8007cca:	b395      	cbz	r5, 8007d32 <quorem+0x9e>
 8007ccc:	f04f 0a00 	mov.w	sl, #0
 8007cd0:	4638      	mov	r0, r7
 8007cd2:	46b6      	mov	lr, r6
 8007cd4:	46d3      	mov	fp, sl
 8007cd6:	f850 2b04 	ldr.w	r2, [r0], #4
 8007cda:	b293      	uxth	r3, r2
 8007cdc:	fb05 a303 	mla	r3, r5, r3, sl
 8007ce0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	ebab 0303 	sub.w	r3, fp, r3
 8007cea:	0c12      	lsrs	r2, r2, #16
 8007cec:	f8de b000 	ldr.w	fp, [lr]
 8007cf0:	fb05 a202 	mla	r2, r5, r2, sl
 8007cf4:	fa13 f38b 	uxtah	r3, r3, fp
 8007cf8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007cfc:	fa1f fb82 	uxth.w	fp, r2
 8007d00:	f8de 2000 	ldr.w	r2, [lr]
 8007d04:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007d08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d12:	4581      	cmp	r9, r0
 8007d14:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007d18:	f84e 3b04 	str.w	r3, [lr], #4
 8007d1c:	d2db      	bcs.n	8007cd6 <quorem+0x42>
 8007d1e:	f856 300c 	ldr.w	r3, [r6, ip]
 8007d22:	b933      	cbnz	r3, 8007d32 <quorem+0x9e>
 8007d24:	9b01      	ldr	r3, [sp, #4]
 8007d26:	3b04      	subs	r3, #4
 8007d28:	429e      	cmp	r6, r3
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	d330      	bcc.n	8007d90 <quorem+0xfc>
 8007d2e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007d32:	4640      	mov	r0, r8
 8007d34:	f001 f9fe 	bl	8009134 <__mcmp>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	db25      	blt.n	8007d88 <quorem+0xf4>
 8007d3c:	3501      	adds	r5, #1
 8007d3e:	4630      	mov	r0, r6
 8007d40:	f04f 0c00 	mov.w	ip, #0
 8007d44:	f857 2b04 	ldr.w	r2, [r7], #4
 8007d48:	f8d0 e000 	ldr.w	lr, [r0]
 8007d4c:	b293      	uxth	r3, r2
 8007d4e:	ebac 0303 	sub.w	r3, ip, r3
 8007d52:	0c12      	lsrs	r2, r2, #16
 8007d54:	fa13 f38e 	uxtah	r3, r3, lr
 8007d58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007d5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d66:	45b9      	cmp	r9, r7
 8007d68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d6c:	f840 3b04 	str.w	r3, [r0], #4
 8007d70:	d2e8      	bcs.n	8007d44 <quorem+0xb0>
 8007d72:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007d76:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007d7a:	b92a      	cbnz	r2, 8007d88 <quorem+0xf4>
 8007d7c:	3b04      	subs	r3, #4
 8007d7e:	429e      	cmp	r6, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	d30b      	bcc.n	8007d9c <quorem+0x108>
 8007d84:	f8c8 4010 	str.w	r4, [r8, #16]
 8007d88:	4628      	mov	r0, r5
 8007d8a:	b003      	add	sp, #12
 8007d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d90:	6812      	ldr	r2, [r2, #0]
 8007d92:	3b04      	subs	r3, #4
 8007d94:	2a00      	cmp	r2, #0
 8007d96:	d1ca      	bne.n	8007d2e <quorem+0x9a>
 8007d98:	3c01      	subs	r4, #1
 8007d9a:	e7c5      	b.n	8007d28 <quorem+0x94>
 8007d9c:	6812      	ldr	r2, [r2, #0]
 8007d9e:	3b04      	subs	r3, #4
 8007da0:	2a00      	cmp	r2, #0
 8007da2:	d1ef      	bne.n	8007d84 <quorem+0xf0>
 8007da4:	3c01      	subs	r4, #1
 8007da6:	e7ea      	b.n	8007d7e <quorem+0xea>
 8007da8:	2000      	movs	r0, #0
 8007daa:	e7ee      	b.n	8007d8a <quorem+0xf6>
 8007dac:	0000      	movs	r0, r0
	...

08007db0 <_dtoa_r>:
 8007db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db4:	ec57 6b10 	vmov	r6, r7, d0
 8007db8:	b097      	sub	sp, #92	; 0x5c
 8007dba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007dbc:	9106      	str	r1, [sp, #24]
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	920b      	str	r2, [sp, #44]	; 0x2c
 8007dc2:	9312      	str	r3, [sp, #72]	; 0x48
 8007dc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007dc8:	e9cd 6700 	strd	r6, r7, [sp]
 8007dcc:	b93d      	cbnz	r5, 8007dde <_dtoa_r+0x2e>
 8007dce:	2010      	movs	r0, #16
 8007dd0:	f000 ff92 	bl	8008cf8 <malloc>
 8007dd4:	6260      	str	r0, [r4, #36]	; 0x24
 8007dd6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007dda:	6005      	str	r5, [r0, #0]
 8007ddc:	60c5      	str	r5, [r0, #12]
 8007dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007de0:	6819      	ldr	r1, [r3, #0]
 8007de2:	b151      	cbz	r1, 8007dfa <_dtoa_r+0x4a>
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	604a      	str	r2, [r1, #4]
 8007de8:	2301      	movs	r3, #1
 8007dea:	4093      	lsls	r3, r2
 8007dec:	608b      	str	r3, [r1, #8]
 8007dee:	4620      	mov	r0, r4
 8007df0:	f000 ffbe 	bl	8008d70 <_Bfree>
 8007df4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	1e3b      	subs	r3, r7, #0
 8007dfc:	bfbb      	ittet	lt
 8007dfe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e02:	9301      	strlt	r3, [sp, #4]
 8007e04:	2300      	movge	r3, #0
 8007e06:	2201      	movlt	r2, #1
 8007e08:	bfac      	ite	ge
 8007e0a:	f8c8 3000 	strge.w	r3, [r8]
 8007e0e:	f8c8 2000 	strlt.w	r2, [r8]
 8007e12:	4baf      	ldr	r3, [pc, #700]	; (80080d0 <_dtoa_r+0x320>)
 8007e14:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e18:	ea33 0308 	bics.w	r3, r3, r8
 8007e1c:	d114      	bne.n	8007e48 <_dtoa_r+0x98>
 8007e1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e20:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e24:	6013      	str	r3, [r2, #0]
 8007e26:	9b00      	ldr	r3, [sp, #0]
 8007e28:	b923      	cbnz	r3, 8007e34 <_dtoa_r+0x84>
 8007e2a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	f000 8542 	beq.w	80088b8 <_dtoa_r+0xb08>
 8007e34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e36:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80080e4 <_dtoa_r+0x334>
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 8544 	beq.w	80088c8 <_dtoa_r+0xb18>
 8007e40:	f10b 0303 	add.w	r3, fp, #3
 8007e44:	f000 bd3e 	b.w	80088c4 <_dtoa_r+0xb14>
 8007e48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2300      	movs	r3, #0
 8007e50:	4630      	mov	r0, r6
 8007e52:	4639      	mov	r1, r7
 8007e54:	f7f9 f812 	bl	8000e7c <__aeabi_dcmpeq>
 8007e58:	4681      	mov	r9, r0
 8007e5a:	b168      	cbz	r0, 8007e78 <_dtoa_r+0xc8>
 8007e5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e5e:	2301      	movs	r3, #1
 8007e60:	6013      	str	r3, [r2, #0]
 8007e62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f000 8524 	beq.w	80088b2 <_dtoa_r+0xb02>
 8007e6a:	4b9a      	ldr	r3, [pc, #616]	; (80080d4 <_dtoa_r+0x324>)
 8007e6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e6e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8007e72:	6013      	str	r3, [r2, #0]
 8007e74:	f000 bd28 	b.w	80088c8 <_dtoa_r+0xb18>
 8007e78:	aa14      	add	r2, sp, #80	; 0x50
 8007e7a:	a915      	add	r1, sp, #84	; 0x54
 8007e7c:	ec47 6b10 	vmov	d0, r6, r7
 8007e80:	4620      	mov	r0, r4
 8007e82:	f001 f9ce 	bl	8009222 <__d2b>
 8007e86:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007e8a:	9004      	str	r0, [sp, #16]
 8007e8c:	2d00      	cmp	r5, #0
 8007e8e:	d07c      	beq.n	8007f8a <_dtoa_r+0x1da>
 8007e90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007e94:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007e98:	46b2      	mov	sl, r6
 8007e9a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007e9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007ea2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	4b8b      	ldr	r3, [pc, #556]	; (80080d8 <_dtoa_r+0x328>)
 8007eaa:	4650      	mov	r0, sl
 8007eac:	4659      	mov	r1, fp
 8007eae:	f7f8 f99b 	bl	80001e8 <__aeabi_dsub>
 8007eb2:	a381      	add	r3, pc, #516	; (adr r3, 80080b8 <_dtoa_r+0x308>)
 8007eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb8:	f7f8 fb4e 	bl	8000558 <__aeabi_dmul>
 8007ebc:	a380      	add	r3, pc, #512	; (adr r3, 80080c0 <_dtoa_r+0x310>)
 8007ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec2:	f7f8 f993 	bl	80001ec <__adddf3>
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	4628      	mov	r0, r5
 8007eca:	460f      	mov	r7, r1
 8007ecc:	f7f8 fada 	bl	8000484 <__aeabi_i2d>
 8007ed0:	a37d      	add	r3, pc, #500	; (adr r3, 80080c8 <_dtoa_r+0x318>)
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	f7f8 fb3f 	bl	8000558 <__aeabi_dmul>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	4630      	mov	r0, r6
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	f7f8 f983 	bl	80001ec <__adddf3>
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	460f      	mov	r7, r1
 8007eea:	f7f9 f80f 	bl	8000f0c <__aeabi_d2iz>
 8007eee:	2200      	movs	r2, #0
 8007ef0:	4682      	mov	sl, r0
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	4639      	mov	r1, r7
 8007ef8:	f7f8 ffca 	bl	8000e90 <__aeabi_dcmplt>
 8007efc:	b148      	cbz	r0, 8007f12 <_dtoa_r+0x162>
 8007efe:	4650      	mov	r0, sl
 8007f00:	f7f8 fac0 	bl	8000484 <__aeabi_i2d>
 8007f04:	4632      	mov	r2, r6
 8007f06:	463b      	mov	r3, r7
 8007f08:	f7f8 ffb8 	bl	8000e7c <__aeabi_dcmpeq>
 8007f0c:	b908      	cbnz	r0, 8007f12 <_dtoa_r+0x162>
 8007f0e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007f12:	f1ba 0f16 	cmp.w	sl, #22
 8007f16:	d859      	bhi.n	8007fcc <_dtoa_r+0x21c>
 8007f18:	4970      	ldr	r1, [pc, #448]	; (80080dc <_dtoa_r+0x32c>)
 8007f1a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007f1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f26:	f7f8 ffd1 	bl	8000ecc <__aeabi_dcmpgt>
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	d050      	beq.n	8007fd0 <_dtoa_r+0x220>
 8007f2e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007f32:	2300      	movs	r3, #0
 8007f34:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f38:	1b5d      	subs	r5, r3, r5
 8007f3a:	f1b5 0801 	subs.w	r8, r5, #1
 8007f3e:	bf49      	itett	mi
 8007f40:	f1c5 0301 	rsbmi	r3, r5, #1
 8007f44:	2300      	movpl	r3, #0
 8007f46:	9305      	strmi	r3, [sp, #20]
 8007f48:	f04f 0800 	movmi.w	r8, #0
 8007f4c:	bf58      	it	pl
 8007f4e:	9305      	strpl	r3, [sp, #20]
 8007f50:	f1ba 0f00 	cmp.w	sl, #0
 8007f54:	db3e      	blt.n	8007fd4 <_dtoa_r+0x224>
 8007f56:	2300      	movs	r3, #0
 8007f58:	44d0      	add	r8, sl
 8007f5a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007f5e:	9307      	str	r3, [sp, #28]
 8007f60:	9b06      	ldr	r3, [sp, #24]
 8007f62:	2b09      	cmp	r3, #9
 8007f64:	f200 8090 	bhi.w	8008088 <_dtoa_r+0x2d8>
 8007f68:	2b05      	cmp	r3, #5
 8007f6a:	bfc4      	itt	gt
 8007f6c:	3b04      	subgt	r3, #4
 8007f6e:	9306      	strgt	r3, [sp, #24]
 8007f70:	9b06      	ldr	r3, [sp, #24]
 8007f72:	f1a3 0302 	sub.w	r3, r3, #2
 8007f76:	bfcc      	ite	gt
 8007f78:	2500      	movgt	r5, #0
 8007f7a:	2501      	movle	r5, #1
 8007f7c:	2b03      	cmp	r3, #3
 8007f7e:	f200 808f 	bhi.w	80080a0 <_dtoa_r+0x2f0>
 8007f82:	e8df f003 	tbb	[pc, r3]
 8007f86:	7f7d      	.short	0x7f7d
 8007f88:	7131      	.short	0x7131
 8007f8a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007f8e:	441d      	add	r5, r3
 8007f90:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007f94:	2820      	cmp	r0, #32
 8007f96:	dd13      	ble.n	8007fc0 <_dtoa_r+0x210>
 8007f98:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007f9c:	9b00      	ldr	r3, [sp, #0]
 8007f9e:	fa08 f800 	lsl.w	r8, r8, r0
 8007fa2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007fa6:	fa23 f000 	lsr.w	r0, r3, r0
 8007faa:	ea48 0000 	orr.w	r0, r8, r0
 8007fae:	f7f8 fa59 	bl	8000464 <__aeabi_ui2d>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	4682      	mov	sl, r0
 8007fb6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007fba:	3d01      	subs	r5, #1
 8007fbc:	9313      	str	r3, [sp, #76]	; 0x4c
 8007fbe:	e772      	b.n	8007ea6 <_dtoa_r+0xf6>
 8007fc0:	9b00      	ldr	r3, [sp, #0]
 8007fc2:	f1c0 0020 	rsb	r0, r0, #32
 8007fc6:	fa03 f000 	lsl.w	r0, r3, r0
 8007fca:	e7f0      	b.n	8007fae <_dtoa_r+0x1fe>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e7b1      	b.n	8007f34 <_dtoa_r+0x184>
 8007fd0:	900f      	str	r0, [sp, #60]	; 0x3c
 8007fd2:	e7b0      	b.n	8007f36 <_dtoa_r+0x186>
 8007fd4:	9b05      	ldr	r3, [sp, #20]
 8007fd6:	eba3 030a 	sub.w	r3, r3, sl
 8007fda:	9305      	str	r3, [sp, #20]
 8007fdc:	f1ca 0300 	rsb	r3, sl, #0
 8007fe0:	9307      	str	r3, [sp, #28]
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	930e      	str	r3, [sp, #56]	; 0x38
 8007fe6:	e7bb      	b.n	8007f60 <_dtoa_r+0x1b0>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	930a      	str	r3, [sp, #40]	; 0x28
 8007fec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	dd59      	ble.n	80080a6 <_dtoa_r+0x2f6>
 8007ff2:	9302      	str	r3, [sp, #8]
 8007ff4:	4699      	mov	r9, r3
 8007ff6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	6072      	str	r2, [r6, #4]
 8007ffc:	2204      	movs	r2, #4
 8007ffe:	f102 0014 	add.w	r0, r2, #20
 8008002:	4298      	cmp	r0, r3
 8008004:	6871      	ldr	r1, [r6, #4]
 8008006:	d953      	bls.n	80080b0 <_dtoa_r+0x300>
 8008008:	4620      	mov	r0, r4
 800800a:	f000 fe7d 	bl	8008d08 <_Balloc>
 800800e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008010:	6030      	str	r0, [r6, #0]
 8008012:	f1b9 0f0e 	cmp.w	r9, #14
 8008016:	f8d3 b000 	ldr.w	fp, [r3]
 800801a:	f200 80e6 	bhi.w	80081ea <_dtoa_r+0x43a>
 800801e:	2d00      	cmp	r5, #0
 8008020:	f000 80e3 	beq.w	80081ea <_dtoa_r+0x43a>
 8008024:	ed9d 7b00 	vldr	d7, [sp]
 8008028:	f1ba 0f00 	cmp.w	sl, #0
 800802c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008030:	dd74      	ble.n	800811c <_dtoa_r+0x36c>
 8008032:	4a2a      	ldr	r2, [pc, #168]	; (80080dc <_dtoa_r+0x32c>)
 8008034:	f00a 030f 	and.w	r3, sl, #15
 8008038:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800803c:	ed93 7b00 	vldr	d7, [r3]
 8008040:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008044:	06f0      	lsls	r0, r6, #27
 8008046:	ed8d 7b08 	vstr	d7, [sp, #32]
 800804a:	d565      	bpl.n	8008118 <_dtoa_r+0x368>
 800804c:	4b24      	ldr	r3, [pc, #144]	; (80080e0 <_dtoa_r+0x330>)
 800804e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008052:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008056:	f7f8 fba9 	bl	80007ac <__aeabi_ddiv>
 800805a:	e9cd 0100 	strd	r0, r1, [sp]
 800805e:	f006 060f 	and.w	r6, r6, #15
 8008062:	2503      	movs	r5, #3
 8008064:	4f1e      	ldr	r7, [pc, #120]	; (80080e0 <_dtoa_r+0x330>)
 8008066:	e04c      	b.n	8008102 <_dtoa_r+0x352>
 8008068:	2301      	movs	r3, #1
 800806a:	930a      	str	r3, [sp, #40]	; 0x28
 800806c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800806e:	4453      	add	r3, sl
 8008070:	f103 0901 	add.w	r9, r3, #1
 8008074:	9302      	str	r3, [sp, #8]
 8008076:	464b      	mov	r3, r9
 8008078:	2b01      	cmp	r3, #1
 800807a:	bfb8      	it	lt
 800807c:	2301      	movlt	r3, #1
 800807e:	e7ba      	b.n	8007ff6 <_dtoa_r+0x246>
 8008080:	2300      	movs	r3, #0
 8008082:	e7b2      	b.n	8007fea <_dtoa_r+0x23a>
 8008084:	2300      	movs	r3, #0
 8008086:	e7f0      	b.n	800806a <_dtoa_r+0x2ba>
 8008088:	2501      	movs	r5, #1
 800808a:	2300      	movs	r3, #0
 800808c:	9306      	str	r3, [sp, #24]
 800808e:	950a      	str	r5, [sp, #40]	; 0x28
 8008090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008094:	9302      	str	r3, [sp, #8]
 8008096:	4699      	mov	r9, r3
 8008098:	2200      	movs	r2, #0
 800809a:	2312      	movs	r3, #18
 800809c:	920b      	str	r2, [sp, #44]	; 0x2c
 800809e:	e7aa      	b.n	8007ff6 <_dtoa_r+0x246>
 80080a0:	2301      	movs	r3, #1
 80080a2:	930a      	str	r3, [sp, #40]	; 0x28
 80080a4:	e7f4      	b.n	8008090 <_dtoa_r+0x2e0>
 80080a6:	2301      	movs	r3, #1
 80080a8:	9302      	str	r3, [sp, #8]
 80080aa:	4699      	mov	r9, r3
 80080ac:	461a      	mov	r2, r3
 80080ae:	e7f5      	b.n	800809c <_dtoa_r+0x2ec>
 80080b0:	3101      	adds	r1, #1
 80080b2:	6071      	str	r1, [r6, #4]
 80080b4:	0052      	lsls	r2, r2, #1
 80080b6:	e7a2      	b.n	8007ffe <_dtoa_r+0x24e>
 80080b8:	636f4361 	.word	0x636f4361
 80080bc:	3fd287a7 	.word	0x3fd287a7
 80080c0:	8b60c8b3 	.word	0x8b60c8b3
 80080c4:	3fc68a28 	.word	0x3fc68a28
 80080c8:	509f79fb 	.word	0x509f79fb
 80080cc:	3fd34413 	.word	0x3fd34413
 80080d0:	7ff00000 	.word	0x7ff00000
 80080d4:	0800be29 	.word	0x0800be29
 80080d8:	3ff80000 	.word	0x3ff80000
 80080dc:	0800bee8 	.word	0x0800bee8
 80080e0:	0800bec0 	.word	0x0800bec0
 80080e4:	0800be55 	.word	0x0800be55
 80080e8:	07f1      	lsls	r1, r6, #31
 80080ea:	d508      	bpl.n	80080fe <_dtoa_r+0x34e>
 80080ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80080f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080f4:	f7f8 fa30 	bl	8000558 <__aeabi_dmul>
 80080f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80080fc:	3501      	adds	r5, #1
 80080fe:	1076      	asrs	r6, r6, #1
 8008100:	3708      	adds	r7, #8
 8008102:	2e00      	cmp	r6, #0
 8008104:	d1f0      	bne.n	80080e8 <_dtoa_r+0x338>
 8008106:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800810a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800810e:	f7f8 fb4d 	bl	80007ac <__aeabi_ddiv>
 8008112:	e9cd 0100 	strd	r0, r1, [sp]
 8008116:	e01a      	b.n	800814e <_dtoa_r+0x39e>
 8008118:	2502      	movs	r5, #2
 800811a:	e7a3      	b.n	8008064 <_dtoa_r+0x2b4>
 800811c:	f000 80a0 	beq.w	8008260 <_dtoa_r+0x4b0>
 8008120:	f1ca 0600 	rsb	r6, sl, #0
 8008124:	4b9f      	ldr	r3, [pc, #636]	; (80083a4 <_dtoa_r+0x5f4>)
 8008126:	4fa0      	ldr	r7, [pc, #640]	; (80083a8 <_dtoa_r+0x5f8>)
 8008128:	f006 020f 	and.w	r2, r6, #15
 800812c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008134:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008138:	f7f8 fa0e 	bl	8000558 <__aeabi_dmul>
 800813c:	e9cd 0100 	strd	r0, r1, [sp]
 8008140:	1136      	asrs	r6, r6, #4
 8008142:	2300      	movs	r3, #0
 8008144:	2502      	movs	r5, #2
 8008146:	2e00      	cmp	r6, #0
 8008148:	d17f      	bne.n	800824a <_dtoa_r+0x49a>
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1e1      	bne.n	8008112 <_dtoa_r+0x362>
 800814e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 8087 	beq.w	8008264 <_dtoa_r+0x4b4>
 8008156:	e9dd 6700 	ldrd	r6, r7, [sp]
 800815a:	2200      	movs	r2, #0
 800815c:	4b93      	ldr	r3, [pc, #588]	; (80083ac <_dtoa_r+0x5fc>)
 800815e:	4630      	mov	r0, r6
 8008160:	4639      	mov	r1, r7
 8008162:	f7f8 fe95 	bl	8000e90 <__aeabi_dcmplt>
 8008166:	2800      	cmp	r0, #0
 8008168:	d07c      	beq.n	8008264 <_dtoa_r+0x4b4>
 800816a:	f1b9 0f00 	cmp.w	r9, #0
 800816e:	d079      	beq.n	8008264 <_dtoa_r+0x4b4>
 8008170:	9b02      	ldr	r3, [sp, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	dd35      	ble.n	80081e2 <_dtoa_r+0x432>
 8008176:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800817a:	9308      	str	r3, [sp, #32]
 800817c:	4639      	mov	r1, r7
 800817e:	2200      	movs	r2, #0
 8008180:	4b8b      	ldr	r3, [pc, #556]	; (80083b0 <_dtoa_r+0x600>)
 8008182:	4630      	mov	r0, r6
 8008184:	f7f8 f9e8 	bl	8000558 <__aeabi_dmul>
 8008188:	e9cd 0100 	strd	r0, r1, [sp]
 800818c:	9f02      	ldr	r7, [sp, #8]
 800818e:	3501      	adds	r5, #1
 8008190:	4628      	mov	r0, r5
 8008192:	f7f8 f977 	bl	8000484 <__aeabi_i2d>
 8008196:	e9dd 2300 	ldrd	r2, r3, [sp]
 800819a:	f7f8 f9dd 	bl	8000558 <__aeabi_dmul>
 800819e:	2200      	movs	r2, #0
 80081a0:	4b84      	ldr	r3, [pc, #528]	; (80083b4 <_dtoa_r+0x604>)
 80081a2:	f7f8 f823 	bl	80001ec <__adddf3>
 80081a6:	4605      	mov	r5, r0
 80081a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80081ac:	2f00      	cmp	r7, #0
 80081ae:	d15d      	bne.n	800826c <_dtoa_r+0x4bc>
 80081b0:	2200      	movs	r2, #0
 80081b2:	4b81      	ldr	r3, [pc, #516]	; (80083b8 <_dtoa_r+0x608>)
 80081b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081b8:	f7f8 f816 	bl	80001e8 <__aeabi_dsub>
 80081bc:	462a      	mov	r2, r5
 80081be:	4633      	mov	r3, r6
 80081c0:	e9cd 0100 	strd	r0, r1, [sp]
 80081c4:	f7f8 fe82 	bl	8000ecc <__aeabi_dcmpgt>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	f040 8288 	bne.w	80086de <_dtoa_r+0x92e>
 80081ce:	462a      	mov	r2, r5
 80081d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80081d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081d8:	f7f8 fe5a 	bl	8000e90 <__aeabi_dcmplt>
 80081dc:	2800      	cmp	r0, #0
 80081de:	f040 827c 	bne.w	80086da <_dtoa_r+0x92a>
 80081e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081e6:	e9cd 2300 	strd	r2, r3, [sp]
 80081ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f2c0 8150 	blt.w	8008492 <_dtoa_r+0x6e2>
 80081f2:	f1ba 0f0e 	cmp.w	sl, #14
 80081f6:	f300 814c 	bgt.w	8008492 <_dtoa_r+0x6e2>
 80081fa:	4b6a      	ldr	r3, [pc, #424]	; (80083a4 <_dtoa_r+0x5f4>)
 80081fc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008200:	ed93 7b00 	vldr	d7, [r3]
 8008204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008206:	2b00      	cmp	r3, #0
 8008208:	ed8d 7b02 	vstr	d7, [sp, #8]
 800820c:	f280 80d8 	bge.w	80083c0 <_dtoa_r+0x610>
 8008210:	f1b9 0f00 	cmp.w	r9, #0
 8008214:	f300 80d4 	bgt.w	80083c0 <_dtoa_r+0x610>
 8008218:	f040 825e 	bne.w	80086d8 <_dtoa_r+0x928>
 800821c:	2200      	movs	r2, #0
 800821e:	4b66      	ldr	r3, [pc, #408]	; (80083b8 <_dtoa_r+0x608>)
 8008220:	ec51 0b17 	vmov	r0, r1, d7
 8008224:	f7f8 f998 	bl	8000558 <__aeabi_dmul>
 8008228:	e9dd 2300 	ldrd	r2, r3, [sp]
 800822c:	f7f8 fe44 	bl	8000eb8 <__aeabi_dcmpge>
 8008230:	464f      	mov	r7, r9
 8008232:	464e      	mov	r6, r9
 8008234:	2800      	cmp	r0, #0
 8008236:	f040 8234 	bne.w	80086a2 <_dtoa_r+0x8f2>
 800823a:	2331      	movs	r3, #49	; 0x31
 800823c:	f10b 0501 	add.w	r5, fp, #1
 8008240:	f88b 3000 	strb.w	r3, [fp]
 8008244:	f10a 0a01 	add.w	sl, sl, #1
 8008248:	e22f      	b.n	80086aa <_dtoa_r+0x8fa>
 800824a:	07f2      	lsls	r2, r6, #31
 800824c:	d505      	bpl.n	800825a <_dtoa_r+0x4aa>
 800824e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008252:	f7f8 f981 	bl	8000558 <__aeabi_dmul>
 8008256:	3501      	adds	r5, #1
 8008258:	2301      	movs	r3, #1
 800825a:	1076      	asrs	r6, r6, #1
 800825c:	3708      	adds	r7, #8
 800825e:	e772      	b.n	8008146 <_dtoa_r+0x396>
 8008260:	2502      	movs	r5, #2
 8008262:	e774      	b.n	800814e <_dtoa_r+0x39e>
 8008264:	f8cd a020 	str.w	sl, [sp, #32]
 8008268:	464f      	mov	r7, r9
 800826a:	e791      	b.n	8008190 <_dtoa_r+0x3e0>
 800826c:	4b4d      	ldr	r3, [pc, #308]	; (80083a4 <_dtoa_r+0x5f4>)
 800826e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008272:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008278:	2b00      	cmp	r3, #0
 800827a:	d047      	beq.n	800830c <_dtoa_r+0x55c>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	2000      	movs	r0, #0
 8008282:	494e      	ldr	r1, [pc, #312]	; (80083bc <_dtoa_r+0x60c>)
 8008284:	f7f8 fa92 	bl	80007ac <__aeabi_ddiv>
 8008288:	462a      	mov	r2, r5
 800828a:	4633      	mov	r3, r6
 800828c:	f7f7 ffac 	bl	80001e8 <__aeabi_dsub>
 8008290:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008294:	465d      	mov	r5, fp
 8008296:	e9dd 0100 	ldrd	r0, r1, [sp]
 800829a:	f7f8 fe37 	bl	8000f0c <__aeabi_d2iz>
 800829e:	4606      	mov	r6, r0
 80082a0:	f7f8 f8f0 	bl	8000484 <__aeabi_i2d>
 80082a4:	4602      	mov	r2, r0
 80082a6:	460b      	mov	r3, r1
 80082a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082ac:	f7f7 ff9c 	bl	80001e8 <__aeabi_dsub>
 80082b0:	3630      	adds	r6, #48	; 0x30
 80082b2:	f805 6b01 	strb.w	r6, [r5], #1
 80082b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80082ba:	e9cd 0100 	strd	r0, r1, [sp]
 80082be:	f7f8 fde7 	bl	8000e90 <__aeabi_dcmplt>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	d163      	bne.n	800838e <_dtoa_r+0x5de>
 80082c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082ca:	2000      	movs	r0, #0
 80082cc:	4937      	ldr	r1, [pc, #220]	; (80083ac <_dtoa_r+0x5fc>)
 80082ce:	f7f7 ff8b 	bl	80001e8 <__aeabi_dsub>
 80082d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80082d6:	f7f8 fddb 	bl	8000e90 <__aeabi_dcmplt>
 80082da:	2800      	cmp	r0, #0
 80082dc:	f040 80b7 	bne.w	800844e <_dtoa_r+0x69e>
 80082e0:	eba5 030b 	sub.w	r3, r5, fp
 80082e4:	429f      	cmp	r7, r3
 80082e6:	f77f af7c 	ble.w	80081e2 <_dtoa_r+0x432>
 80082ea:	2200      	movs	r2, #0
 80082ec:	4b30      	ldr	r3, [pc, #192]	; (80083b0 <_dtoa_r+0x600>)
 80082ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082f2:	f7f8 f931 	bl	8000558 <__aeabi_dmul>
 80082f6:	2200      	movs	r2, #0
 80082f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80082fc:	4b2c      	ldr	r3, [pc, #176]	; (80083b0 <_dtoa_r+0x600>)
 80082fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008302:	f7f8 f929 	bl	8000558 <__aeabi_dmul>
 8008306:	e9cd 0100 	strd	r0, r1, [sp]
 800830a:	e7c4      	b.n	8008296 <_dtoa_r+0x4e6>
 800830c:	462a      	mov	r2, r5
 800830e:	4633      	mov	r3, r6
 8008310:	f7f8 f922 	bl	8000558 <__aeabi_dmul>
 8008314:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008318:	eb0b 0507 	add.w	r5, fp, r7
 800831c:	465e      	mov	r6, fp
 800831e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008322:	f7f8 fdf3 	bl	8000f0c <__aeabi_d2iz>
 8008326:	4607      	mov	r7, r0
 8008328:	f7f8 f8ac 	bl	8000484 <__aeabi_i2d>
 800832c:	3730      	adds	r7, #48	; 0x30
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008336:	f7f7 ff57 	bl	80001e8 <__aeabi_dsub>
 800833a:	f806 7b01 	strb.w	r7, [r6], #1
 800833e:	42ae      	cmp	r6, r5
 8008340:	e9cd 0100 	strd	r0, r1, [sp]
 8008344:	f04f 0200 	mov.w	r2, #0
 8008348:	d126      	bne.n	8008398 <_dtoa_r+0x5e8>
 800834a:	4b1c      	ldr	r3, [pc, #112]	; (80083bc <_dtoa_r+0x60c>)
 800834c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008350:	f7f7 ff4c 	bl	80001ec <__adddf3>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	e9dd 0100 	ldrd	r0, r1, [sp]
 800835c:	f7f8 fdb6 	bl	8000ecc <__aeabi_dcmpgt>
 8008360:	2800      	cmp	r0, #0
 8008362:	d174      	bne.n	800844e <_dtoa_r+0x69e>
 8008364:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008368:	2000      	movs	r0, #0
 800836a:	4914      	ldr	r1, [pc, #80]	; (80083bc <_dtoa_r+0x60c>)
 800836c:	f7f7 ff3c 	bl	80001e8 <__aeabi_dsub>
 8008370:	4602      	mov	r2, r0
 8008372:	460b      	mov	r3, r1
 8008374:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008378:	f7f8 fd8a 	bl	8000e90 <__aeabi_dcmplt>
 800837c:	2800      	cmp	r0, #0
 800837e:	f43f af30 	beq.w	80081e2 <_dtoa_r+0x432>
 8008382:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008386:	2b30      	cmp	r3, #48	; 0x30
 8008388:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800838c:	d002      	beq.n	8008394 <_dtoa_r+0x5e4>
 800838e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008392:	e04a      	b.n	800842a <_dtoa_r+0x67a>
 8008394:	4615      	mov	r5, r2
 8008396:	e7f4      	b.n	8008382 <_dtoa_r+0x5d2>
 8008398:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <_dtoa_r+0x600>)
 800839a:	f7f8 f8dd 	bl	8000558 <__aeabi_dmul>
 800839e:	e9cd 0100 	strd	r0, r1, [sp]
 80083a2:	e7bc      	b.n	800831e <_dtoa_r+0x56e>
 80083a4:	0800bee8 	.word	0x0800bee8
 80083a8:	0800bec0 	.word	0x0800bec0
 80083ac:	3ff00000 	.word	0x3ff00000
 80083b0:	40240000 	.word	0x40240000
 80083b4:	401c0000 	.word	0x401c0000
 80083b8:	40140000 	.word	0x40140000
 80083bc:	3fe00000 	.word	0x3fe00000
 80083c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80083c4:	465d      	mov	r5, fp
 80083c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083ca:	4630      	mov	r0, r6
 80083cc:	4639      	mov	r1, r7
 80083ce:	f7f8 f9ed 	bl	80007ac <__aeabi_ddiv>
 80083d2:	f7f8 fd9b 	bl	8000f0c <__aeabi_d2iz>
 80083d6:	4680      	mov	r8, r0
 80083d8:	f7f8 f854 	bl	8000484 <__aeabi_i2d>
 80083dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083e0:	f7f8 f8ba 	bl	8000558 <__aeabi_dmul>
 80083e4:	4602      	mov	r2, r0
 80083e6:	460b      	mov	r3, r1
 80083e8:	4630      	mov	r0, r6
 80083ea:	4639      	mov	r1, r7
 80083ec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80083f0:	f7f7 fefa 	bl	80001e8 <__aeabi_dsub>
 80083f4:	f805 6b01 	strb.w	r6, [r5], #1
 80083f8:	eba5 060b 	sub.w	r6, r5, fp
 80083fc:	45b1      	cmp	r9, r6
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	d139      	bne.n	8008478 <_dtoa_r+0x6c8>
 8008404:	f7f7 fef2 	bl	80001ec <__adddf3>
 8008408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800840c:	4606      	mov	r6, r0
 800840e:	460f      	mov	r7, r1
 8008410:	f7f8 fd5c 	bl	8000ecc <__aeabi_dcmpgt>
 8008414:	b9c8      	cbnz	r0, 800844a <_dtoa_r+0x69a>
 8008416:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800841a:	4630      	mov	r0, r6
 800841c:	4639      	mov	r1, r7
 800841e:	f7f8 fd2d 	bl	8000e7c <__aeabi_dcmpeq>
 8008422:	b110      	cbz	r0, 800842a <_dtoa_r+0x67a>
 8008424:	f018 0f01 	tst.w	r8, #1
 8008428:	d10f      	bne.n	800844a <_dtoa_r+0x69a>
 800842a:	9904      	ldr	r1, [sp, #16]
 800842c:	4620      	mov	r0, r4
 800842e:	f000 fc9f 	bl	8008d70 <_Bfree>
 8008432:	2300      	movs	r3, #0
 8008434:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008436:	702b      	strb	r3, [r5, #0]
 8008438:	f10a 0301 	add.w	r3, sl, #1
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 8241 	beq.w	80088c8 <_dtoa_r+0xb18>
 8008446:	601d      	str	r5, [r3, #0]
 8008448:	e23e      	b.n	80088c8 <_dtoa_r+0xb18>
 800844a:	f8cd a020 	str.w	sl, [sp, #32]
 800844e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008452:	2a39      	cmp	r2, #57	; 0x39
 8008454:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8008458:	d108      	bne.n	800846c <_dtoa_r+0x6bc>
 800845a:	459b      	cmp	fp, r3
 800845c:	d10a      	bne.n	8008474 <_dtoa_r+0x6c4>
 800845e:	9b08      	ldr	r3, [sp, #32]
 8008460:	3301      	adds	r3, #1
 8008462:	9308      	str	r3, [sp, #32]
 8008464:	2330      	movs	r3, #48	; 0x30
 8008466:	f88b 3000 	strb.w	r3, [fp]
 800846a:	465b      	mov	r3, fp
 800846c:	781a      	ldrb	r2, [r3, #0]
 800846e:	3201      	adds	r2, #1
 8008470:	701a      	strb	r2, [r3, #0]
 8008472:	e78c      	b.n	800838e <_dtoa_r+0x5de>
 8008474:	461d      	mov	r5, r3
 8008476:	e7ea      	b.n	800844e <_dtoa_r+0x69e>
 8008478:	2200      	movs	r2, #0
 800847a:	4b9b      	ldr	r3, [pc, #620]	; (80086e8 <_dtoa_r+0x938>)
 800847c:	f7f8 f86c 	bl	8000558 <__aeabi_dmul>
 8008480:	2200      	movs	r2, #0
 8008482:	2300      	movs	r3, #0
 8008484:	4606      	mov	r6, r0
 8008486:	460f      	mov	r7, r1
 8008488:	f7f8 fcf8 	bl	8000e7c <__aeabi_dcmpeq>
 800848c:	2800      	cmp	r0, #0
 800848e:	d09a      	beq.n	80083c6 <_dtoa_r+0x616>
 8008490:	e7cb      	b.n	800842a <_dtoa_r+0x67a>
 8008492:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008494:	2a00      	cmp	r2, #0
 8008496:	f000 808b 	beq.w	80085b0 <_dtoa_r+0x800>
 800849a:	9a06      	ldr	r2, [sp, #24]
 800849c:	2a01      	cmp	r2, #1
 800849e:	dc6e      	bgt.n	800857e <_dtoa_r+0x7ce>
 80084a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084a2:	2a00      	cmp	r2, #0
 80084a4:	d067      	beq.n	8008576 <_dtoa_r+0x7c6>
 80084a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80084aa:	9f07      	ldr	r7, [sp, #28]
 80084ac:	9d05      	ldr	r5, [sp, #20]
 80084ae:	9a05      	ldr	r2, [sp, #20]
 80084b0:	2101      	movs	r1, #1
 80084b2:	441a      	add	r2, r3
 80084b4:	4620      	mov	r0, r4
 80084b6:	9205      	str	r2, [sp, #20]
 80084b8:	4498      	add	r8, r3
 80084ba:	f000 fcf9 	bl	8008eb0 <__i2b>
 80084be:	4606      	mov	r6, r0
 80084c0:	2d00      	cmp	r5, #0
 80084c2:	dd0c      	ble.n	80084de <_dtoa_r+0x72e>
 80084c4:	f1b8 0f00 	cmp.w	r8, #0
 80084c8:	dd09      	ble.n	80084de <_dtoa_r+0x72e>
 80084ca:	4545      	cmp	r5, r8
 80084cc:	9a05      	ldr	r2, [sp, #20]
 80084ce:	462b      	mov	r3, r5
 80084d0:	bfa8      	it	ge
 80084d2:	4643      	movge	r3, r8
 80084d4:	1ad2      	subs	r2, r2, r3
 80084d6:	9205      	str	r2, [sp, #20]
 80084d8:	1aed      	subs	r5, r5, r3
 80084da:	eba8 0803 	sub.w	r8, r8, r3
 80084de:	9b07      	ldr	r3, [sp, #28]
 80084e0:	b1eb      	cbz	r3, 800851e <_dtoa_r+0x76e>
 80084e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d067      	beq.n	80085b8 <_dtoa_r+0x808>
 80084e8:	b18f      	cbz	r7, 800850e <_dtoa_r+0x75e>
 80084ea:	4631      	mov	r1, r6
 80084ec:	463a      	mov	r2, r7
 80084ee:	4620      	mov	r0, r4
 80084f0:	f000 fd7e 	bl	8008ff0 <__pow5mult>
 80084f4:	9a04      	ldr	r2, [sp, #16]
 80084f6:	4601      	mov	r1, r0
 80084f8:	4606      	mov	r6, r0
 80084fa:	4620      	mov	r0, r4
 80084fc:	f000 fce1 	bl	8008ec2 <__multiply>
 8008500:	9904      	ldr	r1, [sp, #16]
 8008502:	9008      	str	r0, [sp, #32]
 8008504:	4620      	mov	r0, r4
 8008506:	f000 fc33 	bl	8008d70 <_Bfree>
 800850a:	9b08      	ldr	r3, [sp, #32]
 800850c:	9304      	str	r3, [sp, #16]
 800850e:	9b07      	ldr	r3, [sp, #28]
 8008510:	1bda      	subs	r2, r3, r7
 8008512:	d004      	beq.n	800851e <_dtoa_r+0x76e>
 8008514:	9904      	ldr	r1, [sp, #16]
 8008516:	4620      	mov	r0, r4
 8008518:	f000 fd6a 	bl	8008ff0 <__pow5mult>
 800851c:	9004      	str	r0, [sp, #16]
 800851e:	2101      	movs	r1, #1
 8008520:	4620      	mov	r0, r4
 8008522:	f000 fcc5 	bl	8008eb0 <__i2b>
 8008526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008528:	4607      	mov	r7, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 81d0 	beq.w	80088d0 <_dtoa_r+0xb20>
 8008530:	461a      	mov	r2, r3
 8008532:	4601      	mov	r1, r0
 8008534:	4620      	mov	r0, r4
 8008536:	f000 fd5b 	bl	8008ff0 <__pow5mult>
 800853a:	9b06      	ldr	r3, [sp, #24]
 800853c:	2b01      	cmp	r3, #1
 800853e:	4607      	mov	r7, r0
 8008540:	dc40      	bgt.n	80085c4 <_dtoa_r+0x814>
 8008542:	9b00      	ldr	r3, [sp, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d139      	bne.n	80085bc <_dtoa_r+0x80c>
 8008548:	9b01      	ldr	r3, [sp, #4]
 800854a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800854e:	2b00      	cmp	r3, #0
 8008550:	d136      	bne.n	80085c0 <_dtoa_r+0x810>
 8008552:	9b01      	ldr	r3, [sp, #4]
 8008554:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008558:	0d1b      	lsrs	r3, r3, #20
 800855a:	051b      	lsls	r3, r3, #20
 800855c:	b12b      	cbz	r3, 800856a <_dtoa_r+0x7ba>
 800855e:	9b05      	ldr	r3, [sp, #20]
 8008560:	3301      	adds	r3, #1
 8008562:	9305      	str	r3, [sp, #20]
 8008564:	f108 0801 	add.w	r8, r8, #1
 8008568:	2301      	movs	r3, #1
 800856a:	9307      	str	r3, [sp, #28]
 800856c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800856e:	2b00      	cmp	r3, #0
 8008570:	d12a      	bne.n	80085c8 <_dtoa_r+0x818>
 8008572:	2001      	movs	r0, #1
 8008574:	e030      	b.n	80085d8 <_dtoa_r+0x828>
 8008576:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008578:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800857c:	e795      	b.n	80084aa <_dtoa_r+0x6fa>
 800857e:	9b07      	ldr	r3, [sp, #28]
 8008580:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8008584:	42bb      	cmp	r3, r7
 8008586:	bfbf      	itttt	lt
 8008588:	9b07      	ldrlt	r3, [sp, #28]
 800858a:	9707      	strlt	r7, [sp, #28]
 800858c:	1afa      	sublt	r2, r7, r3
 800858e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008590:	bfbb      	ittet	lt
 8008592:	189b      	addlt	r3, r3, r2
 8008594:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008596:	1bdf      	subge	r7, r3, r7
 8008598:	2700      	movlt	r7, #0
 800859a:	f1b9 0f00 	cmp.w	r9, #0
 800859e:	bfb5      	itete	lt
 80085a0:	9b05      	ldrlt	r3, [sp, #20]
 80085a2:	9d05      	ldrge	r5, [sp, #20]
 80085a4:	eba3 0509 	sublt.w	r5, r3, r9
 80085a8:	464b      	movge	r3, r9
 80085aa:	bfb8      	it	lt
 80085ac:	2300      	movlt	r3, #0
 80085ae:	e77e      	b.n	80084ae <_dtoa_r+0x6fe>
 80085b0:	9f07      	ldr	r7, [sp, #28]
 80085b2:	9d05      	ldr	r5, [sp, #20]
 80085b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80085b6:	e783      	b.n	80084c0 <_dtoa_r+0x710>
 80085b8:	9a07      	ldr	r2, [sp, #28]
 80085ba:	e7ab      	b.n	8008514 <_dtoa_r+0x764>
 80085bc:	2300      	movs	r3, #0
 80085be:	e7d4      	b.n	800856a <_dtoa_r+0x7ba>
 80085c0:	9b00      	ldr	r3, [sp, #0]
 80085c2:	e7d2      	b.n	800856a <_dtoa_r+0x7ba>
 80085c4:	2300      	movs	r3, #0
 80085c6:	9307      	str	r3, [sp, #28]
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80085ce:	6918      	ldr	r0, [r3, #16]
 80085d0:	f000 fc20 	bl	8008e14 <__hi0bits>
 80085d4:	f1c0 0020 	rsb	r0, r0, #32
 80085d8:	4440      	add	r0, r8
 80085da:	f010 001f 	ands.w	r0, r0, #31
 80085de:	d047      	beq.n	8008670 <_dtoa_r+0x8c0>
 80085e0:	f1c0 0320 	rsb	r3, r0, #32
 80085e4:	2b04      	cmp	r3, #4
 80085e6:	dd3b      	ble.n	8008660 <_dtoa_r+0x8b0>
 80085e8:	9b05      	ldr	r3, [sp, #20]
 80085ea:	f1c0 001c 	rsb	r0, r0, #28
 80085ee:	4403      	add	r3, r0
 80085f0:	9305      	str	r3, [sp, #20]
 80085f2:	4405      	add	r5, r0
 80085f4:	4480      	add	r8, r0
 80085f6:	9b05      	ldr	r3, [sp, #20]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	dd05      	ble.n	8008608 <_dtoa_r+0x858>
 80085fc:	461a      	mov	r2, r3
 80085fe:	9904      	ldr	r1, [sp, #16]
 8008600:	4620      	mov	r0, r4
 8008602:	f000 fd43 	bl	800908c <__lshift>
 8008606:	9004      	str	r0, [sp, #16]
 8008608:	f1b8 0f00 	cmp.w	r8, #0
 800860c:	dd05      	ble.n	800861a <_dtoa_r+0x86a>
 800860e:	4639      	mov	r1, r7
 8008610:	4642      	mov	r2, r8
 8008612:	4620      	mov	r0, r4
 8008614:	f000 fd3a 	bl	800908c <__lshift>
 8008618:	4607      	mov	r7, r0
 800861a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800861c:	b353      	cbz	r3, 8008674 <_dtoa_r+0x8c4>
 800861e:	4639      	mov	r1, r7
 8008620:	9804      	ldr	r0, [sp, #16]
 8008622:	f000 fd87 	bl	8009134 <__mcmp>
 8008626:	2800      	cmp	r0, #0
 8008628:	da24      	bge.n	8008674 <_dtoa_r+0x8c4>
 800862a:	2300      	movs	r3, #0
 800862c:	220a      	movs	r2, #10
 800862e:	9904      	ldr	r1, [sp, #16]
 8008630:	4620      	mov	r0, r4
 8008632:	f000 fbb4 	bl	8008d9e <__multadd>
 8008636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008638:	9004      	str	r0, [sp, #16]
 800863a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800863e:	2b00      	cmp	r3, #0
 8008640:	f000 814d 	beq.w	80088de <_dtoa_r+0xb2e>
 8008644:	2300      	movs	r3, #0
 8008646:	4631      	mov	r1, r6
 8008648:	220a      	movs	r2, #10
 800864a:	4620      	mov	r0, r4
 800864c:	f000 fba7 	bl	8008d9e <__multadd>
 8008650:	9b02      	ldr	r3, [sp, #8]
 8008652:	2b00      	cmp	r3, #0
 8008654:	4606      	mov	r6, r0
 8008656:	dc4f      	bgt.n	80086f8 <_dtoa_r+0x948>
 8008658:	9b06      	ldr	r3, [sp, #24]
 800865a:	2b02      	cmp	r3, #2
 800865c:	dd4c      	ble.n	80086f8 <_dtoa_r+0x948>
 800865e:	e011      	b.n	8008684 <_dtoa_r+0x8d4>
 8008660:	d0c9      	beq.n	80085f6 <_dtoa_r+0x846>
 8008662:	9a05      	ldr	r2, [sp, #20]
 8008664:	331c      	adds	r3, #28
 8008666:	441a      	add	r2, r3
 8008668:	9205      	str	r2, [sp, #20]
 800866a:	441d      	add	r5, r3
 800866c:	4498      	add	r8, r3
 800866e:	e7c2      	b.n	80085f6 <_dtoa_r+0x846>
 8008670:	4603      	mov	r3, r0
 8008672:	e7f6      	b.n	8008662 <_dtoa_r+0x8b2>
 8008674:	f1b9 0f00 	cmp.w	r9, #0
 8008678:	dc38      	bgt.n	80086ec <_dtoa_r+0x93c>
 800867a:	9b06      	ldr	r3, [sp, #24]
 800867c:	2b02      	cmp	r3, #2
 800867e:	dd35      	ble.n	80086ec <_dtoa_r+0x93c>
 8008680:	f8cd 9008 	str.w	r9, [sp, #8]
 8008684:	9b02      	ldr	r3, [sp, #8]
 8008686:	b963      	cbnz	r3, 80086a2 <_dtoa_r+0x8f2>
 8008688:	4639      	mov	r1, r7
 800868a:	2205      	movs	r2, #5
 800868c:	4620      	mov	r0, r4
 800868e:	f000 fb86 	bl	8008d9e <__multadd>
 8008692:	4601      	mov	r1, r0
 8008694:	4607      	mov	r7, r0
 8008696:	9804      	ldr	r0, [sp, #16]
 8008698:	f000 fd4c 	bl	8009134 <__mcmp>
 800869c:	2800      	cmp	r0, #0
 800869e:	f73f adcc 	bgt.w	800823a <_dtoa_r+0x48a>
 80086a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086a4:	465d      	mov	r5, fp
 80086a6:	ea6f 0a03 	mvn.w	sl, r3
 80086aa:	f04f 0900 	mov.w	r9, #0
 80086ae:	4639      	mov	r1, r7
 80086b0:	4620      	mov	r0, r4
 80086b2:	f000 fb5d 	bl	8008d70 <_Bfree>
 80086b6:	2e00      	cmp	r6, #0
 80086b8:	f43f aeb7 	beq.w	800842a <_dtoa_r+0x67a>
 80086bc:	f1b9 0f00 	cmp.w	r9, #0
 80086c0:	d005      	beq.n	80086ce <_dtoa_r+0x91e>
 80086c2:	45b1      	cmp	r9, r6
 80086c4:	d003      	beq.n	80086ce <_dtoa_r+0x91e>
 80086c6:	4649      	mov	r1, r9
 80086c8:	4620      	mov	r0, r4
 80086ca:	f000 fb51 	bl	8008d70 <_Bfree>
 80086ce:	4631      	mov	r1, r6
 80086d0:	4620      	mov	r0, r4
 80086d2:	f000 fb4d 	bl	8008d70 <_Bfree>
 80086d6:	e6a8      	b.n	800842a <_dtoa_r+0x67a>
 80086d8:	2700      	movs	r7, #0
 80086da:	463e      	mov	r6, r7
 80086dc:	e7e1      	b.n	80086a2 <_dtoa_r+0x8f2>
 80086de:	f8dd a020 	ldr.w	sl, [sp, #32]
 80086e2:	463e      	mov	r6, r7
 80086e4:	e5a9      	b.n	800823a <_dtoa_r+0x48a>
 80086e6:	bf00      	nop
 80086e8:	40240000 	.word	0x40240000
 80086ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 80fa 	beq.w	80088ec <_dtoa_r+0xb3c>
 80086f8:	2d00      	cmp	r5, #0
 80086fa:	dd05      	ble.n	8008708 <_dtoa_r+0x958>
 80086fc:	4631      	mov	r1, r6
 80086fe:	462a      	mov	r2, r5
 8008700:	4620      	mov	r0, r4
 8008702:	f000 fcc3 	bl	800908c <__lshift>
 8008706:	4606      	mov	r6, r0
 8008708:	9b07      	ldr	r3, [sp, #28]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d04c      	beq.n	80087a8 <_dtoa_r+0x9f8>
 800870e:	6871      	ldr	r1, [r6, #4]
 8008710:	4620      	mov	r0, r4
 8008712:	f000 faf9 	bl	8008d08 <_Balloc>
 8008716:	6932      	ldr	r2, [r6, #16]
 8008718:	3202      	adds	r2, #2
 800871a:	4605      	mov	r5, r0
 800871c:	0092      	lsls	r2, r2, #2
 800871e:	f106 010c 	add.w	r1, r6, #12
 8008722:	300c      	adds	r0, #12
 8008724:	f7fe fcea 	bl	80070fc <memcpy>
 8008728:	2201      	movs	r2, #1
 800872a:	4629      	mov	r1, r5
 800872c:	4620      	mov	r0, r4
 800872e:	f000 fcad 	bl	800908c <__lshift>
 8008732:	9b00      	ldr	r3, [sp, #0]
 8008734:	f8cd b014 	str.w	fp, [sp, #20]
 8008738:	f003 0301 	and.w	r3, r3, #1
 800873c:	46b1      	mov	r9, r6
 800873e:	9307      	str	r3, [sp, #28]
 8008740:	4606      	mov	r6, r0
 8008742:	4639      	mov	r1, r7
 8008744:	9804      	ldr	r0, [sp, #16]
 8008746:	f7ff faa5 	bl	8007c94 <quorem>
 800874a:	4649      	mov	r1, r9
 800874c:	4605      	mov	r5, r0
 800874e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008752:	9804      	ldr	r0, [sp, #16]
 8008754:	f000 fcee 	bl	8009134 <__mcmp>
 8008758:	4632      	mov	r2, r6
 800875a:	9000      	str	r0, [sp, #0]
 800875c:	4639      	mov	r1, r7
 800875e:	4620      	mov	r0, r4
 8008760:	f000 fd02 	bl	8009168 <__mdiff>
 8008764:	68c3      	ldr	r3, [r0, #12]
 8008766:	4602      	mov	r2, r0
 8008768:	bb03      	cbnz	r3, 80087ac <_dtoa_r+0x9fc>
 800876a:	4601      	mov	r1, r0
 800876c:	9008      	str	r0, [sp, #32]
 800876e:	9804      	ldr	r0, [sp, #16]
 8008770:	f000 fce0 	bl	8009134 <__mcmp>
 8008774:	9a08      	ldr	r2, [sp, #32]
 8008776:	4603      	mov	r3, r0
 8008778:	4611      	mov	r1, r2
 800877a:	4620      	mov	r0, r4
 800877c:	9308      	str	r3, [sp, #32]
 800877e:	f000 faf7 	bl	8008d70 <_Bfree>
 8008782:	9b08      	ldr	r3, [sp, #32]
 8008784:	b9a3      	cbnz	r3, 80087b0 <_dtoa_r+0xa00>
 8008786:	9a06      	ldr	r2, [sp, #24]
 8008788:	b992      	cbnz	r2, 80087b0 <_dtoa_r+0xa00>
 800878a:	9a07      	ldr	r2, [sp, #28]
 800878c:	b982      	cbnz	r2, 80087b0 <_dtoa_r+0xa00>
 800878e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008792:	d029      	beq.n	80087e8 <_dtoa_r+0xa38>
 8008794:	9b00      	ldr	r3, [sp, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	dd01      	ble.n	800879e <_dtoa_r+0x9ee>
 800879a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800879e:	9b05      	ldr	r3, [sp, #20]
 80087a0:	1c5d      	adds	r5, r3, #1
 80087a2:	f883 8000 	strb.w	r8, [r3]
 80087a6:	e782      	b.n	80086ae <_dtoa_r+0x8fe>
 80087a8:	4630      	mov	r0, r6
 80087aa:	e7c2      	b.n	8008732 <_dtoa_r+0x982>
 80087ac:	2301      	movs	r3, #1
 80087ae:	e7e3      	b.n	8008778 <_dtoa_r+0x9c8>
 80087b0:	9a00      	ldr	r2, [sp, #0]
 80087b2:	2a00      	cmp	r2, #0
 80087b4:	db04      	blt.n	80087c0 <_dtoa_r+0xa10>
 80087b6:	d125      	bne.n	8008804 <_dtoa_r+0xa54>
 80087b8:	9a06      	ldr	r2, [sp, #24]
 80087ba:	bb1a      	cbnz	r2, 8008804 <_dtoa_r+0xa54>
 80087bc:	9a07      	ldr	r2, [sp, #28]
 80087be:	bb0a      	cbnz	r2, 8008804 <_dtoa_r+0xa54>
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	ddec      	ble.n	800879e <_dtoa_r+0x9ee>
 80087c4:	2201      	movs	r2, #1
 80087c6:	9904      	ldr	r1, [sp, #16]
 80087c8:	4620      	mov	r0, r4
 80087ca:	f000 fc5f 	bl	800908c <__lshift>
 80087ce:	4639      	mov	r1, r7
 80087d0:	9004      	str	r0, [sp, #16]
 80087d2:	f000 fcaf 	bl	8009134 <__mcmp>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	dc03      	bgt.n	80087e2 <_dtoa_r+0xa32>
 80087da:	d1e0      	bne.n	800879e <_dtoa_r+0x9ee>
 80087dc:	f018 0f01 	tst.w	r8, #1
 80087e0:	d0dd      	beq.n	800879e <_dtoa_r+0x9ee>
 80087e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80087e6:	d1d8      	bne.n	800879a <_dtoa_r+0x9ea>
 80087e8:	9b05      	ldr	r3, [sp, #20]
 80087ea:	9a05      	ldr	r2, [sp, #20]
 80087ec:	1c5d      	adds	r5, r3, #1
 80087ee:	2339      	movs	r3, #57	; 0x39
 80087f0:	7013      	strb	r3, [r2, #0]
 80087f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087f6:	2b39      	cmp	r3, #57	; 0x39
 80087f8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80087fc:	d04f      	beq.n	800889e <_dtoa_r+0xaee>
 80087fe:	3301      	adds	r3, #1
 8008800:	7013      	strb	r3, [r2, #0]
 8008802:	e754      	b.n	80086ae <_dtoa_r+0x8fe>
 8008804:	9a05      	ldr	r2, [sp, #20]
 8008806:	2b00      	cmp	r3, #0
 8008808:	f102 0501 	add.w	r5, r2, #1
 800880c:	dd06      	ble.n	800881c <_dtoa_r+0xa6c>
 800880e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008812:	d0e9      	beq.n	80087e8 <_dtoa_r+0xa38>
 8008814:	f108 0801 	add.w	r8, r8, #1
 8008818:	9b05      	ldr	r3, [sp, #20]
 800881a:	e7c2      	b.n	80087a2 <_dtoa_r+0x9f2>
 800881c:	9a02      	ldr	r2, [sp, #8]
 800881e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008822:	eba5 030b 	sub.w	r3, r5, fp
 8008826:	4293      	cmp	r3, r2
 8008828:	d021      	beq.n	800886e <_dtoa_r+0xabe>
 800882a:	2300      	movs	r3, #0
 800882c:	220a      	movs	r2, #10
 800882e:	9904      	ldr	r1, [sp, #16]
 8008830:	4620      	mov	r0, r4
 8008832:	f000 fab4 	bl	8008d9e <__multadd>
 8008836:	45b1      	cmp	r9, r6
 8008838:	9004      	str	r0, [sp, #16]
 800883a:	f04f 0300 	mov.w	r3, #0
 800883e:	f04f 020a 	mov.w	r2, #10
 8008842:	4649      	mov	r1, r9
 8008844:	4620      	mov	r0, r4
 8008846:	d105      	bne.n	8008854 <_dtoa_r+0xaa4>
 8008848:	f000 faa9 	bl	8008d9e <__multadd>
 800884c:	4681      	mov	r9, r0
 800884e:	4606      	mov	r6, r0
 8008850:	9505      	str	r5, [sp, #20]
 8008852:	e776      	b.n	8008742 <_dtoa_r+0x992>
 8008854:	f000 faa3 	bl	8008d9e <__multadd>
 8008858:	4631      	mov	r1, r6
 800885a:	4681      	mov	r9, r0
 800885c:	2300      	movs	r3, #0
 800885e:	220a      	movs	r2, #10
 8008860:	4620      	mov	r0, r4
 8008862:	f000 fa9c 	bl	8008d9e <__multadd>
 8008866:	4606      	mov	r6, r0
 8008868:	e7f2      	b.n	8008850 <_dtoa_r+0xaa0>
 800886a:	f04f 0900 	mov.w	r9, #0
 800886e:	2201      	movs	r2, #1
 8008870:	9904      	ldr	r1, [sp, #16]
 8008872:	4620      	mov	r0, r4
 8008874:	f000 fc0a 	bl	800908c <__lshift>
 8008878:	4639      	mov	r1, r7
 800887a:	9004      	str	r0, [sp, #16]
 800887c:	f000 fc5a 	bl	8009134 <__mcmp>
 8008880:	2800      	cmp	r0, #0
 8008882:	dcb6      	bgt.n	80087f2 <_dtoa_r+0xa42>
 8008884:	d102      	bne.n	800888c <_dtoa_r+0xadc>
 8008886:	f018 0f01 	tst.w	r8, #1
 800888a:	d1b2      	bne.n	80087f2 <_dtoa_r+0xa42>
 800888c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008890:	2b30      	cmp	r3, #48	; 0x30
 8008892:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008896:	f47f af0a 	bne.w	80086ae <_dtoa_r+0x8fe>
 800889a:	4615      	mov	r5, r2
 800889c:	e7f6      	b.n	800888c <_dtoa_r+0xadc>
 800889e:	4593      	cmp	fp, r2
 80088a0:	d105      	bne.n	80088ae <_dtoa_r+0xafe>
 80088a2:	2331      	movs	r3, #49	; 0x31
 80088a4:	f10a 0a01 	add.w	sl, sl, #1
 80088a8:	f88b 3000 	strb.w	r3, [fp]
 80088ac:	e6ff      	b.n	80086ae <_dtoa_r+0x8fe>
 80088ae:	4615      	mov	r5, r2
 80088b0:	e79f      	b.n	80087f2 <_dtoa_r+0xa42>
 80088b2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008918 <_dtoa_r+0xb68>
 80088b6:	e007      	b.n	80088c8 <_dtoa_r+0xb18>
 80088b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088ba:	f8df b060 	ldr.w	fp, [pc, #96]	; 800891c <_dtoa_r+0xb6c>
 80088be:	b11b      	cbz	r3, 80088c8 <_dtoa_r+0xb18>
 80088c0:	f10b 0308 	add.w	r3, fp, #8
 80088c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	4658      	mov	r0, fp
 80088ca:	b017      	add	sp, #92	; 0x5c
 80088cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d0:	9b06      	ldr	r3, [sp, #24]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	f77f ae35 	ble.w	8008542 <_dtoa_r+0x792>
 80088d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088da:	9307      	str	r3, [sp, #28]
 80088dc:	e649      	b.n	8008572 <_dtoa_r+0x7c2>
 80088de:	9b02      	ldr	r3, [sp, #8]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	dc03      	bgt.n	80088ec <_dtoa_r+0xb3c>
 80088e4:	9b06      	ldr	r3, [sp, #24]
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	f73f aecc 	bgt.w	8008684 <_dtoa_r+0x8d4>
 80088ec:	465d      	mov	r5, fp
 80088ee:	4639      	mov	r1, r7
 80088f0:	9804      	ldr	r0, [sp, #16]
 80088f2:	f7ff f9cf 	bl	8007c94 <quorem>
 80088f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80088fa:	f805 8b01 	strb.w	r8, [r5], #1
 80088fe:	9a02      	ldr	r2, [sp, #8]
 8008900:	eba5 030b 	sub.w	r3, r5, fp
 8008904:	429a      	cmp	r2, r3
 8008906:	ddb0      	ble.n	800886a <_dtoa_r+0xaba>
 8008908:	2300      	movs	r3, #0
 800890a:	220a      	movs	r2, #10
 800890c:	9904      	ldr	r1, [sp, #16]
 800890e:	4620      	mov	r0, r4
 8008910:	f000 fa45 	bl	8008d9e <__multadd>
 8008914:	9004      	str	r0, [sp, #16]
 8008916:	e7ea      	b.n	80088ee <_dtoa_r+0xb3e>
 8008918:	0800be28 	.word	0x0800be28
 800891c:	0800be4c 	.word	0x0800be4c

08008920 <__sflush_r>:
 8008920:	898a      	ldrh	r2, [r1, #12]
 8008922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008926:	4605      	mov	r5, r0
 8008928:	0710      	lsls	r0, r2, #28
 800892a:	460c      	mov	r4, r1
 800892c:	d458      	bmi.n	80089e0 <__sflush_r+0xc0>
 800892e:	684b      	ldr	r3, [r1, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	dc05      	bgt.n	8008940 <__sflush_r+0x20>
 8008934:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008936:	2b00      	cmp	r3, #0
 8008938:	dc02      	bgt.n	8008940 <__sflush_r+0x20>
 800893a:	2000      	movs	r0, #0
 800893c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008942:	2e00      	cmp	r6, #0
 8008944:	d0f9      	beq.n	800893a <__sflush_r+0x1a>
 8008946:	2300      	movs	r3, #0
 8008948:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800894c:	682f      	ldr	r7, [r5, #0]
 800894e:	6a21      	ldr	r1, [r4, #32]
 8008950:	602b      	str	r3, [r5, #0]
 8008952:	d032      	beq.n	80089ba <__sflush_r+0x9a>
 8008954:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008956:	89a3      	ldrh	r3, [r4, #12]
 8008958:	075a      	lsls	r2, r3, #29
 800895a:	d505      	bpl.n	8008968 <__sflush_r+0x48>
 800895c:	6863      	ldr	r3, [r4, #4]
 800895e:	1ac0      	subs	r0, r0, r3
 8008960:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008962:	b10b      	cbz	r3, 8008968 <__sflush_r+0x48>
 8008964:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008966:	1ac0      	subs	r0, r0, r3
 8008968:	2300      	movs	r3, #0
 800896a:	4602      	mov	r2, r0
 800896c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800896e:	6a21      	ldr	r1, [r4, #32]
 8008970:	4628      	mov	r0, r5
 8008972:	47b0      	blx	r6
 8008974:	1c43      	adds	r3, r0, #1
 8008976:	89a3      	ldrh	r3, [r4, #12]
 8008978:	d106      	bne.n	8008988 <__sflush_r+0x68>
 800897a:	6829      	ldr	r1, [r5, #0]
 800897c:	291d      	cmp	r1, #29
 800897e:	d848      	bhi.n	8008a12 <__sflush_r+0xf2>
 8008980:	4a29      	ldr	r2, [pc, #164]	; (8008a28 <__sflush_r+0x108>)
 8008982:	40ca      	lsrs	r2, r1
 8008984:	07d6      	lsls	r6, r2, #31
 8008986:	d544      	bpl.n	8008a12 <__sflush_r+0xf2>
 8008988:	2200      	movs	r2, #0
 800898a:	6062      	str	r2, [r4, #4]
 800898c:	04d9      	lsls	r1, r3, #19
 800898e:	6922      	ldr	r2, [r4, #16]
 8008990:	6022      	str	r2, [r4, #0]
 8008992:	d504      	bpl.n	800899e <__sflush_r+0x7e>
 8008994:	1c42      	adds	r2, r0, #1
 8008996:	d101      	bne.n	800899c <__sflush_r+0x7c>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	b903      	cbnz	r3, 800899e <__sflush_r+0x7e>
 800899c:	6560      	str	r0, [r4, #84]	; 0x54
 800899e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089a0:	602f      	str	r7, [r5, #0]
 80089a2:	2900      	cmp	r1, #0
 80089a4:	d0c9      	beq.n	800893a <__sflush_r+0x1a>
 80089a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089aa:	4299      	cmp	r1, r3
 80089ac:	d002      	beq.n	80089b4 <__sflush_r+0x94>
 80089ae:	4628      	mov	r0, r5
 80089b0:	f000 fc94 	bl	80092dc <_free_r>
 80089b4:	2000      	movs	r0, #0
 80089b6:	6360      	str	r0, [r4, #52]	; 0x34
 80089b8:	e7c0      	b.n	800893c <__sflush_r+0x1c>
 80089ba:	2301      	movs	r3, #1
 80089bc:	4628      	mov	r0, r5
 80089be:	47b0      	blx	r6
 80089c0:	1c41      	adds	r1, r0, #1
 80089c2:	d1c8      	bne.n	8008956 <__sflush_r+0x36>
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d0c5      	beq.n	8008956 <__sflush_r+0x36>
 80089ca:	2b1d      	cmp	r3, #29
 80089cc:	d001      	beq.n	80089d2 <__sflush_r+0xb2>
 80089ce:	2b16      	cmp	r3, #22
 80089d0:	d101      	bne.n	80089d6 <__sflush_r+0xb6>
 80089d2:	602f      	str	r7, [r5, #0]
 80089d4:	e7b1      	b.n	800893a <__sflush_r+0x1a>
 80089d6:	89a3      	ldrh	r3, [r4, #12]
 80089d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089dc:	81a3      	strh	r3, [r4, #12]
 80089de:	e7ad      	b.n	800893c <__sflush_r+0x1c>
 80089e0:	690f      	ldr	r7, [r1, #16]
 80089e2:	2f00      	cmp	r7, #0
 80089e4:	d0a9      	beq.n	800893a <__sflush_r+0x1a>
 80089e6:	0793      	lsls	r3, r2, #30
 80089e8:	680e      	ldr	r6, [r1, #0]
 80089ea:	bf08      	it	eq
 80089ec:	694b      	ldreq	r3, [r1, #20]
 80089ee:	600f      	str	r7, [r1, #0]
 80089f0:	bf18      	it	ne
 80089f2:	2300      	movne	r3, #0
 80089f4:	eba6 0807 	sub.w	r8, r6, r7
 80089f8:	608b      	str	r3, [r1, #8]
 80089fa:	f1b8 0f00 	cmp.w	r8, #0
 80089fe:	dd9c      	ble.n	800893a <__sflush_r+0x1a>
 8008a00:	4643      	mov	r3, r8
 8008a02:	463a      	mov	r2, r7
 8008a04:	6a21      	ldr	r1, [r4, #32]
 8008a06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a08:	4628      	mov	r0, r5
 8008a0a:	47b0      	blx	r6
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	dc06      	bgt.n	8008a1e <__sflush_r+0xfe>
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a16:	81a3      	strh	r3, [r4, #12]
 8008a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a1c:	e78e      	b.n	800893c <__sflush_r+0x1c>
 8008a1e:	4407      	add	r7, r0
 8008a20:	eba8 0800 	sub.w	r8, r8, r0
 8008a24:	e7e9      	b.n	80089fa <__sflush_r+0xda>
 8008a26:	bf00      	nop
 8008a28:	20400001 	.word	0x20400001

08008a2c <_fflush_r>:
 8008a2c:	b538      	push	{r3, r4, r5, lr}
 8008a2e:	690b      	ldr	r3, [r1, #16]
 8008a30:	4605      	mov	r5, r0
 8008a32:	460c      	mov	r4, r1
 8008a34:	b1db      	cbz	r3, 8008a6e <_fflush_r+0x42>
 8008a36:	b118      	cbz	r0, 8008a40 <_fflush_r+0x14>
 8008a38:	6983      	ldr	r3, [r0, #24]
 8008a3a:	b90b      	cbnz	r3, 8008a40 <_fflush_r+0x14>
 8008a3c:	f000 f860 	bl	8008b00 <__sinit>
 8008a40:	4b0c      	ldr	r3, [pc, #48]	; (8008a74 <_fflush_r+0x48>)
 8008a42:	429c      	cmp	r4, r3
 8008a44:	d109      	bne.n	8008a5a <_fflush_r+0x2e>
 8008a46:	686c      	ldr	r4, [r5, #4]
 8008a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a4c:	b17b      	cbz	r3, 8008a6e <_fflush_r+0x42>
 8008a4e:	4621      	mov	r1, r4
 8008a50:	4628      	mov	r0, r5
 8008a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a56:	f7ff bf63 	b.w	8008920 <__sflush_r>
 8008a5a:	4b07      	ldr	r3, [pc, #28]	; (8008a78 <_fflush_r+0x4c>)
 8008a5c:	429c      	cmp	r4, r3
 8008a5e:	d101      	bne.n	8008a64 <_fflush_r+0x38>
 8008a60:	68ac      	ldr	r4, [r5, #8]
 8008a62:	e7f1      	b.n	8008a48 <_fflush_r+0x1c>
 8008a64:	4b05      	ldr	r3, [pc, #20]	; (8008a7c <_fflush_r+0x50>)
 8008a66:	429c      	cmp	r4, r3
 8008a68:	bf08      	it	eq
 8008a6a:	68ec      	ldreq	r4, [r5, #12]
 8008a6c:	e7ec      	b.n	8008a48 <_fflush_r+0x1c>
 8008a6e:	2000      	movs	r0, #0
 8008a70:	bd38      	pop	{r3, r4, r5, pc}
 8008a72:	bf00      	nop
 8008a74:	0800be7c 	.word	0x0800be7c
 8008a78:	0800be9c 	.word	0x0800be9c
 8008a7c:	0800be5c 	.word	0x0800be5c

08008a80 <std>:
 8008a80:	2300      	movs	r3, #0
 8008a82:	b510      	push	{r4, lr}
 8008a84:	4604      	mov	r4, r0
 8008a86:	e9c0 3300 	strd	r3, r3, [r0]
 8008a8a:	6083      	str	r3, [r0, #8]
 8008a8c:	8181      	strh	r1, [r0, #12]
 8008a8e:	6643      	str	r3, [r0, #100]	; 0x64
 8008a90:	81c2      	strh	r2, [r0, #14]
 8008a92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a96:	6183      	str	r3, [r0, #24]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	2208      	movs	r2, #8
 8008a9c:	305c      	adds	r0, #92	; 0x5c
 8008a9e:	f7fe fb38 	bl	8007112 <memset>
 8008aa2:	4b05      	ldr	r3, [pc, #20]	; (8008ab8 <std+0x38>)
 8008aa4:	6263      	str	r3, [r4, #36]	; 0x24
 8008aa6:	4b05      	ldr	r3, [pc, #20]	; (8008abc <std+0x3c>)
 8008aa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008aaa:	4b05      	ldr	r3, [pc, #20]	; (8008ac0 <std+0x40>)
 8008aac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008aae:	4b05      	ldr	r3, [pc, #20]	; (8008ac4 <std+0x44>)
 8008ab0:	6224      	str	r4, [r4, #32]
 8008ab2:	6323      	str	r3, [r4, #48]	; 0x30
 8008ab4:	bd10      	pop	{r4, pc}
 8008ab6:	bf00      	nop
 8008ab8:	08009971 	.word	0x08009971
 8008abc:	08009993 	.word	0x08009993
 8008ac0:	080099cb 	.word	0x080099cb
 8008ac4:	080099ef 	.word	0x080099ef

08008ac8 <_cleanup_r>:
 8008ac8:	4901      	ldr	r1, [pc, #4]	; (8008ad0 <_cleanup_r+0x8>)
 8008aca:	f000 b885 	b.w	8008bd8 <_fwalk_reent>
 8008ace:	bf00      	nop
 8008ad0:	08008a2d 	.word	0x08008a2d

08008ad4 <__sfmoreglue>:
 8008ad4:	b570      	push	{r4, r5, r6, lr}
 8008ad6:	1e4a      	subs	r2, r1, #1
 8008ad8:	2568      	movs	r5, #104	; 0x68
 8008ada:	4355      	muls	r5, r2
 8008adc:	460e      	mov	r6, r1
 8008ade:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ae2:	f000 fc49 	bl	8009378 <_malloc_r>
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	b140      	cbz	r0, 8008afc <__sfmoreglue+0x28>
 8008aea:	2100      	movs	r1, #0
 8008aec:	e9c0 1600 	strd	r1, r6, [r0]
 8008af0:	300c      	adds	r0, #12
 8008af2:	60a0      	str	r0, [r4, #8]
 8008af4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008af8:	f7fe fb0b 	bl	8007112 <memset>
 8008afc:	4620      	mov	r0, r4
 8008afe:	bd70      	pop	{r4, r5, r6, pc}

08008b00 <__sinit>:
 8008b00:	6983      	ldr	r3, [r0, #24]
 8008b02:	b510      	push	{r4, lr}
 8008b04:	4604      	mov	r4, r0
 8008b06:	bb33      	cbnz	r3, 8008b56 <__sinit+0x56>
 8008b08:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008b0c:	6503      	str	r3, [r0, #80]	; 0x50
 8008b0e:	4b12      	ldr	r3, [pc, #72]	; (8008b58 <__sinit+0x58>)
 8008b10:	4a12      	ldr	r2, [pc, #72]	; (8008b5c <__sinit+0x5c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6282      	str	r2, [r0, #40]	; 0x28
 8008b16:	4298      	cmp	r0, r3
 8008b18:	bf04      	itt	eq
 8008b1a:	2301      	moveq	r3, #1
 8008b1c:	6183      	streq	r3, [r0, #24]
 8008b1e:	f000 f81f 	bl	8008b60 <__sfp>
 8008b22:	6060      	str	r0, [r4, #4]
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 f81b 	bl	8008b60 <__sfp>
 8008b2a:	60a0      	str	r0, [r4, #8]
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f000 f817 	bl	8008b60 <__sfp>
 8008b32:	2200      	movs	r2, #0
 8008b34:	60e0      	str	r0, [r4, #12]
 8008b36:	2104      	movs	r1, #4
 8008b38:	6860      	ldr	r0, [r4, #4]
 8008b3a:	f7ff ffa1 	bl	8008a80 <std>
 8008b3e:	2201      	movs	r2, #1
 8008b40:	2109      	movs	r1, #9
 8008b42:	68a0      	ldr	r0, [r4, #8]
 8008b44:	f7ff ff9c 	bl	8008a80 <std>
 8008b48:	2202      	movs	r2, #2
 8008b4a:	2112      	movs	r1, #18
 8008b4c:	68e0      	ldr	r0, [r4, #12]
 8008b4e:	f7ff ff97 	bl	8008a80 <std>
 8008b52:	2301      	movs	r3, #1
 8008b54:	61a3      	str	r3, [r4, #24]
 8008b56:	bd10      	pop	{r4, pc}
 8008b58:	0800be14 	.word	0x0800be14
 8008b5c:	08008ac9 	.word	0x08008ac9

08008b60 <__sfp>:
 8008b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b62:	4b1b      	ldr	r3, [pc, #108]	; (8008bd0 <__sfp+0x70>)
 8008b64:	681e      	ldr	r6, [r3, #0]
 8008b66:	69b3      	ldr	r3, [r6, #24]
 8008b68:	4607      	mov	r7, r0
 8008b6a:	b913      	cbnz	r3, 8008b72 <__sfp+0x12>
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	f7ff ffc7 	bl	8008b00 <__sinit>
 8008b72:	3648      	adds	r6, #72	; 0x48
 8008b74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	d503      	bpl.n	8008b84 <__sfp+0x24>
 8008b7c:	6833      	ldr	r3, [r6, #0]
 8008b7e:	b133      	cbz	r3, 8008b8e <__sfp+0x2e>
 8008b80:	6836      	ldr	r6, [r6, #0]
 8008b82:	e7f7      	b.n	8008b74 <__sfp+0x14>
 8008b84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b88:	b16d      	cbz	r5, 8008ba6 <__sfp+0x46>
 8008b8a:	3468      	adds	r4, #104	; 0x68
 8008b8c:	e7f4      	b.n	8008b78 <__sfp+0x18>
 8008b8e:	2104      	movs	r1, #4
 8008b90:	4638      	mov	r0, r7
 8008b92:	f7ff ff9f 	bl	8008ad4 <__sfmoreglue>
 8008b96:	6030      	str	r0, [r6, #0]
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	d1f1      	bne.n	8008b80 <__sfp+0x20>
 8008b9c:	230c      	movs	r3, #12
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	4604      	mov	r4, r0
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ba6:	4b0b      	ldr	r3, [pc, #44]	; (8008bd4 <__sfp+0x74>)
 8008ba8:	6665      	str	r5, [r4, #100]	; 0x64
 8008baa:	e9c4 5500 	strd	r5, r5, [r4]
 8008bae:	60a5      	str	r5, [r4, #8]
 8008bb0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008bb4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008bb8:	2208      	movs	r2, #8
 8008bba:	4629      	mov	r1, r5
 8008bbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bc0:	f7fe faa7 	bl	8007112 <memset>
 8008bc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bcc:	e7e9      	b.n	8008ba2 <__sfp+0x42>
 8008bce:	bf00      	nop
 8008bd0:	0800be14 	.word	0x0800be14
 8008bd4:	ffff0001 	.word	0xffff0001

08008bd8 <_fwalk_reent>:
 8008bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bdc:	4680      	mov	r8, r0
 8008bde:	4689      	mov	r9, r1
 8008be0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008be4:	2600      	movs	r6, #0
 8008be6:	b914      	cbnz	r4, 8008bee <_fwalk_reent+0x16>
 8008be8:	4630      	mov	r0, r6
 8008bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008bf2:	3f01      	subs	r7, #1
 8008bf4:	d501      	bpl.n	8008bfa <_fwalk_reent+0x22>
 8008bf6:	6824      	ldr	r4, [r4, #0]
 8008bf8:	e7f5      	b.n	8008be6 <_fwalk_reent+0xe>
 8008bfa:	89ab      	ldrh	r3, [r5, #12]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d907      	bls.n	8008c10 <_fwalk_reent+0x38>
 8008c00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c04:	3301      	adds	r3, #1
 8008c06:	d003      	beq.n	8008c10 <_fwalk_reent+0x38>
 8008c08:	4629      	mov	r1, r5
 8008c0a:	4640      	mov	r0, r8
 8008c0c:	47c8      	blx	r9
 8008c0e:	4306      	orrs	r6, r0
 8008c10:	3568      	adds	r5, #104	; 0x68
 8008c12:	e7ee      	b.n	8008bf2 <_fwalk_reent+0x1a>

08008c14 <_localeconv_r>:
 8008c14:	4b04      	ldr	r3, [pc, #16]	; (8008c28 <_localeconv_r+0x14>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6a18      	ldr	r0, [r3, #32]
 8008c1a:	4b04      	ldr	r3, [pc, #16]	; (8008c2c <_localeconv_r+0x18>)
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	bf08      	it	eq
 8008c20:	4618      	moveq	r0, r3
 8008c22:	30f0      	adds	r0, #240	; 0xf0
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	20000064 	.word	0x20000064
 8008c2c:	200000c8 	.word	0x200000c8

08008c30 <__swhatbuf_r>:
 8008c30:	b570      	push	{r4, r5, r6, lr}
 8008c32:	460e      	mov	r6, r1
 8008c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c38:	2900      	cmp	r1, #0
 8008c3a:	b096      	sub	sp, #88	; 0x58
 8008c3c:	4614      	mov	r4, r2
 8008c3e:	461d      	mov	r5, r3
 8008c40:	da07      	bge.n	8008c52 <__swhatbuf_r+0x22>
 8008c42:	2300      	movs	r3, #0
 8008c44:	602b      	str	r3, [r5, #0]
 8008c46:	89b3      	ldrh	r3, [r6, #12]
 8008c48:	061a      	lsls	r2, r3, #24
 8008c4a:	d410      	bmi.n	8008c6e <__swhatbuf_r+0x3e>
 8008c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c50:	e00e      	b.n	8008c70 <__swhatbuf_r+0x40>
 8008c52:	466a      	mov	r2, sp
 8008c54:	f000 fef2 	bl	8009a3c <_fstat_r>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	dbf2      	blt.n	8008c42 <__swhatbuf_r+0x12>
 8008c5c:	9a01      	ldr	r2, [sp, #4]
 8008c5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c62:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c66:	425a      	negs	r2, r3
 8008c68:	415a      	adcs	r2, r3
 8008c6a:	602a      	str	r2, [r5, #0]
 8008c6c:	e7ee      	b.n	8008c4c <__swhatbuf_r+0x1c>
 8008c6e:	2340      	movs	r3, #64	; 0x40
 8008c70:	2000      	movs	r0, #0
 8008c72:	6023      	str	r3, [r4, #0]
 8008c74:	b016      	add	sp, #88	; 0x58
 8008c76:	bd70      	pop	{r4, r5, r6, pc}

08008c78 <__smakebuf_r>:
 8008c78:	898b      	ldrh	r3, [r1, #12]
 8008c7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c7c:	079d      	lsls	r5, r3, #30
 8008c7e:	4606      	mov	r6, r0
 8008c80:	460c      	mov	r4, r1
 8008c82:	d507      	bpl.n	8008c94 <__smakebuf_r+0x1c>
 8008c84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c88:	6023      	str	r3, [r4, #0]
 8008c8a:	6123      	str	r3, [r4, #16]
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	6163      	str	r3, [r4, #20]
 8008c90:	b002      	add	sp, #8
 8008c92:	bd70      	pop	{r4, r5, r6, pc}
 8008c94:	ab01      	add	r3, sp, #4
 8008c96:	466a      	mov	r2, sp
 8008c98:	f7ff ffca 	bl	8008c30 <__swhatbuf_r>
 8008c9c:	9900      	ldr	r1, [sp, #0]
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	f000 fb69 	bl	8009378 <_malloc_r>
 8008ca6:	b948      	cbnz	r0, 8008cbc <__smakebuf_r+0x44>
 8008ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cac:	059a      	lsls	r2, r3, #22
 8008cae:	d4ef      	bmi.n	8008c90 <__smakebuf_r+0x18>
 8008cb0:	f023 0303 	bic.w	r3, r3, #3
 8008cb4:	f043 0302 	orr.w	r3, r3, #2
 8008cb8:	81a3      	strh	r3, [r4, #12]
 8008cba:	e7e3      	b.n	8008c84 <__smakebuf_r+0xc>
 8008cbc:	4b0d      	ldr	r3, [pc, #52]	; (8008cf4 <__smakebuf_r+0x7c>)
 8008cbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	6020      	str	r0, [r4, #0]
 8008cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cc8:	81a3      	strh	r3, [r4, #12]
 8008cca:	9b00      	ldr	r3, [sp, #0]
 8008ccc:	6163      	str	r3, [r4, #20]
 8008cce:	9b01      	ldr	r3, [sp, #4]
 8008cd0:	6120      	str	r0, [r4, #16]
 8008cd2:	b15b      	cbz	r3, 8008cec <__smakebuf_r+0x74>
 8008cd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cd8:	4630      	mov	r0, r6
 8008cda:	f000 fec1 	bl	8009a60 <_isatty_r>
 8008cde:	b128      	cbz	r0, 8008cec <__smakebuf_r+0x74>
 8008ce0:	89a3      	ldrh	r3, [r4, #12]
 8008ce2:	f023 0303 	bic.w	r3, r3, #3
 8008ce6:	f043 0301 	orr.w	r3, r3, #1
 8008cea:	81a3      	strh	r3, [r4, #12]
 8008cec:	89a3      	ldrh	r3, [r4, #12]
 8008cee:	431d      	orrs	r5, r3
 8008cf0:	81a5      	strh	r5, [r4, #12]
 8008cf2:	e7cd      	b.n	8008c90 <__smakebuf_r+0x18>
 8008cf4:	08008ac9 	.word	0x08008ac9

08008cf8 <malloc>:
 8008cf8:	4b02      	ldr	r3, [pc, #8]	; (8008d04 <malloc+0xc>)
 8008cfa:	4601      	mov	r1, r0
 8008cfc:	6818      	ldr	r0, [r3, #0]
 8008cfe:	f000 bb3b 	b.w	8009378 <_malloc_r>
 8008d02:	bf00      	nop
 8008d04:	20000064 	.word	0x20000064

08008d08 <_Balloc>:
 8008d08:	b570      	push	{r4, r5, r6, lr}
 8008d0a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	460e      	mov	r6, r1
 8008d10:	b93d      	cbnz	r5, 8008d22 <_Balloc+0x1a>
 8008d12:	2010      	movs	r0, #16
 8008d14:	f7ff fff0 	bl	8008cf8 <malloc>
 8008d18:	6260      	str	r0, [r4, #36]	; 0x24
 8008d1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008d1e:	6005      	str	r5, [r0, #0]
 8008d20:	60c5      	str	r5, [r0, #12]
 8008d22:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008d24:	68eb      	ldr	r3, [r5, #12]
 8008d26:	b183      	cbz	r3, 8008d4a <_Balloc+0x42>
 8008d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008d30:	b9b8      	cbnz	r0, 8008d62 <_Balloc+0x5a>
 8008d32:	2101      	movs	r1, #1
 8008d34:	fa01 f506 	lsl.w	r5, r1, r6
 8008d38:	1d6a      	adds	r2, r5, #5
 8008d3a:	0092      	lsls	r2, r2, #2
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f000 fabf 	bl	80092c0 <_calloc_r>
 8008d42:	b160      	cbz	r0, 8008d5e <_Balloc+0x56>
 8008d44:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008d48:	e00e      	b.n	8008d68 <_Balloc+0x60>
 8008d4a:	2221      	movs	r2, #33	; 0x21
 8008d4c:	2104      	movs	r1, #4
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f000 fab6 	bl	80092c0 <_calloc_r>
 8008d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d56:	60e8      	str	r0, [r5, #12]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1e4      	bne.n	8008d28 <_Balloc+0x20>
 8008d5e:	2000      	movs	r0, #0
 8008d60:	bd70      	pop	{r4, r5, r6, pc}
 8008d62:	6802      	ldr	r2, [r0, #0]
 8008d64:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008d68:	2300      	movs	r3, #0
 8008d6a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d6e:	e7f7      	b.n	8008d60 <_Balloc+0x58>

08008d70 <_Bfree>:
 8008d70:	b570      	push	{r4, r5, r6, lr}
 8008d72:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008d74:	4606      	mov	r6, r0
 8008d76:	460d      	mov	r5, r1
 8008d78:	b93c      	cbnz	r4, 8008d8a <_Bfree+0x1a>
 8008d7a:	2010      	movs	r0, #16
 8008d7c:	f7ff ffbc 	bl	8008cf8 <malloc>
 8008d80:	6270      	str	r0, [r6, #36]	; 0x24
 8008d82:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d86:	6004      	str	r4, [r0, #0]
 8008d88:	60c4      	str	r4, [r0, #12]
 8008d8a:	b13d      	cbz	r5, 8008d9c <_Bfree+0x2c>
 8008d8c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008d8e:	686a      	ldr	r2, [r5, #4]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d96:	6029      	str	r1, [r5, #0]
 8008d98:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008d9c:	bd70      	pop	{r4, r5, r6, pc}

08008d9e <__multadd>:
 8008d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da2:	690d      	ldr	r5, [r1, #16]
 8008da4:	461f      	mov	r7, r3
 8008da6:	4606      	mov	r6, r0
 8008da8:	460c      	mov	r4, r1
 8008daa:	f101 0c14 	add.w	ip, r1, #20
 8008dae:	2300      	movs	r3, #0
 8008db0:	f8dc 0000 	ldr.w	r0, [ip]
 8008db4:	b281      	uxth	r1, r0
 8008db6:	fb02 7101 	mla	r1, r2, r1, r7
 8008dba:	0c0f      	lsrs	r7, r1, #16
 8008dbc:	0c00      	lsrs	r0, r0, #16
 8008dbe:	fb02 7000 	mla	r0, r2, r0, r7
 8008dc2:	b289      	uxth	r1, r1
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008dca:	429d      	cmp	r5, r3
 8008dcc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008dd0:	f84c 1b04 	str.w	r1, [ip], #4
 8008dd4:	dcec      	bgt.n	8008db0 <__multadd+0x12>
 8008dd6:	b1d7      	cbz	r7, 8008e0e <__multadd+0x70>
 8008dd8:	68a3      	ldr	r3, [r4, #8]
 8008dda:	42ab      	cmp	r3, r5
 8008ddc:	dc12      	bgt.n	8008e04 <__multadd+0x66>
 8008dde:	6861      	ldr	r1, [r4, #4]
 8008de0:	4630      	mov	r0, r6
 8008de2:	3101      	adds	r1, #1
 8008de4:	f7ff ff90 	bl	8008d08 <_Balloc>
 8008de8:	6922      	ldr	r2, [r4, #16]
 8008dea:	3202      	adds	r2, #2
 8008dec:	f104 010c 	add.w	r1, r4, #12
 8008df0:	4680      	mov	r8, r0
 8008df2:	0092      	lsls	r2, r2, #2
 8008df4:	300c      	adds	r0, #12
 8008df6:	f7fe f981 	bl	80070fc <memcpy>
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f7ff ffb7 	bl	8008d70 <_Bfree>
 8008e02:	4644      	mov	r4, r8
 8008e04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e08:	3501      	adds	r5, #1
 8008e0a:	615f      	str	r7, [r3, #20]
 8008e0c:	6125      	str	r5, [r4, #16]
 8008e0e:	4620      	mov	r0, r4
 8008e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008e14 <__hi0bits>:
 8008e14:	0c02      	lsrs	r2, r0, #16
 8008e16:	0412      	lsls	r2, r2, #16
 8008e18:	4603      	mov	r3, r0
 8008e1a:	b9b2      	cbnz	r2, 8008e4a <__hi0bits+0x36>
 8008e1c:	0403      	lsls	r3, r0, #16
 8008e1e:	2010      	movs	r0, #16
 8008e20:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008e24:	bf04      	itt	eq
 8008e26:	021b      	lsleq	r3, r3, #8
 8008e28:	3008      	addeq	r0, #8
 8008e2a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008e2e:	bf04      	itt	eq
 8008e30:	011b      	lsleq	r3, r3, #4
 8008e32:	3004      	addeq	r0, #4
 8008e34:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008e38:	bf04      	itt	eq
 8008e3a:	009b      	lsleq	r3, r3, #2
 8008e3c:	3002      	addeq	r0, #2
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	db06      	blt.n	8008e50 <__hi0bits+0x3c>
 8008e42:	005b      	lsls	r3, r3, #1
 8008e44:	d503      	bpl.n	8008e4e <__hi0bits+0x3a>
 8008e46:	3001      	adds	r0, #1
 8008e48:	4770      	bx	lr
 8008e4a:	2000      	movs	r0, #0
 8008e4c:	e7e8      	b.n	8008e20 <__hi0bits+0xc>
 8008e4e:	2020      	movs	r0, #32
 8008e50:	4770      	bx	lr

08008e52 <__lo0bits>:
 8008e52:	6803      	ldr	r3, [r0, #0]
 8008e54:	f013 0207 	ands.w	r2, r3, #7
 8008e58:	4601      	mov	r1, r0
 8008e5a:	d00b      	beq.n	8008e74 <__lo0bits+0x22>
 8008e5c:	07da      	lsls	r2, r3, #31
 8008e5e:	d423      	bmi.n	8008ea8 <__lo0bits+0x56>
 8008e60:	0798      	lsls	r0, r3, #30
 8008e62:	bf49      	itett	mi
 8008e64:	085b      	lsrmi	r3, r3, #1
 8008e66:	089b      	lsrpl	r3, r3, #2
 8008e68:	2001      	movmi	r0, #1
 8008e6a:	600b      	strmi	r3, [r1, #0]
 8008e6c:	bf5c      	itt	pl
 8008e6e:	600b      	strpl	r3, [r1, #0]
 8008e70:	2002      	movpl	r0, #2
 8008e72:	4770      	bx	lr
 8008e74:	b298      	uxth	r0, r3
 8008e76:	b9a8      	cbnz	r0, 8008ea4 <__lo0bits+0x52>
 8008e78:	0c1b      	lsrs	r3, r3, #16
 8008e7a:	2010      	movs	r0, #16
 8008e7c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008e80:	bf04      	itt	eq
 8008e82:	0a1b      	lsreq	r3, r3, #8
 8008e84:	3008      	addeq	r0, #8
 8008e86:	071a      	lsls	r2, r3, #28
 8008e88:	bf04      	itt	eq
 8008e8a:	091b      	lsreq	r3, r3, #4
 8008e8c:	3004      	addeq	r0, #4
 8008e8e:	079a      	lsls	r2, r3, #30
 8008e90:	bf04      	itt	eq
 8008e92:	089b      	lsreq	r3, r3, #2
 8008e94:	3002      	addeq	r0, #2
 8008e96:	07da      	lsls	r2, r3, #31
 8008e98:	d402      	bmi.n	8008ea0 <__lo0bits+0x4e>
 8008e9a:	085b      	lsrs	r3, r3, #1
 8008e9c:	d006      	beq.n	8008eac <__lo0bits+0x5a>
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	600b      	str	r3, [r1, #0]
 8008ea2:	4770      	bx	lr
 8008ea4:	4610      	mov	r0, r2
 8008ea6:	e7e9      	b.n	8008e7c <__lo0bits+0x2a>
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	4770      	bx	lr
 8008eac:	2020      	movs	r0, #32
 8008eae:	4770      	bx	lr

08008eb0 <__i2b>:
 8008eb0:	b510      	push	{r4, lr}
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	2101      	movs	r1, #1
 8008eb6:	f7ff ff27 	bl	8008d08 <_Balloc>
 8008eba:	2201      	movs	r2, #1
 8008ebc:	6144      	str	r4, [r0, #20]
 8008ebe:	6102      	str	r2, [r0, #16]
 8008ec0:	bd10      	pop	{r4, pc}

08008ec2 <__multiply>:
 8008ec2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec6:	4614      	mov	r4, r2
 8008ec8:	690a      	ldr	r2, [r1, #16]
 8008eca:	6923      	ldr	r3, [r4, #16]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	bfb8      	it	lt
 8008ed0:	460b      	movlt	r3, r1
 8008ed2:	4688      	mov	r8, r1
 8008ed4:	bfbc      	itt	lt
 8008ed6:	46a0      	movlt	r8, r4
 8008ed8:	461c      	movlt	r4, r3
 8008eda:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ede:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008ee2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ee6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008eea:	eb07 0609 	add.w	r6, r7, r9
 8008eee:	42b3      	cmp	r3, r6
 8008ef0:	bfb8      	it	lt
 8008ef2:	3101      	addlt	r1, #1
 8008ef4:	f7ff ff08 	bl	8008d08 <_Balloc>
 8008ef8:	f100 0514 	add.w	r5, r0, #20
 8008efc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008f00:	462b      	mov	r3, r5
 8008f02:	2200      	movs	r2, #0
 8008f04:	4573      	cmp	r3, lr
 8008f06:	d316      	bcc.n	8008f36 <__multiply+0x74>
 8008f08:	f104 0214 	add.w	r2, r4, #20
 8008f0c:	f108 0114 	add.w	r1, r8, #20
 8008f10:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008f14:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	9b00      	ldr	r3, [sp, #0]
 8008f1c:	9201      	str	r2, [sp, #4]
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d80c      	bhi.n	8008f3c <__multiply+0x7a>
 8008f22:	2e00      	cmp	r6, #0
 8008f24:	dd03      	ble.n	8008f2e <__multiply+0x6c>
 8008f26:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d05d      	beq.n	8008fea <__multiply+0x128>
 8008f2e:	6106      	str	r6, [r0, #16]
 8008f30:	b003      	add	sp, #12
 8008f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f36:	f843 2b04 	str.w	r2, [r3], #4
 8008f3a:	e7e3      	b.n	8008f04 <__multiply+0x42>
 8008f3c:	f8b2 b000 	ldrh.w	fp, [r2]
 8008f40:	f1bb 0f00 	cmp.w	fp, #0
 8008f44:	d023      	beq.n	8008f8e <__multiply+0xcc>
 8008f46:	4689      	mov	r9, r1
 8008f48:	46ac      	mov	ip, r5
 8008f4a:	f04f 0800 	mov.w	r8, #0
 8008f4e:	f859 4b04 	ldr.w	r4, [r9], #4
 8008f52:	f8dc a000 	ldr.w	sl, [ip]
 8008f56:	b2a3      	uxth	r3, r4
 8008f58:	fa1f fa8a 	uxth.w	sl, sl
 8008f5c:	fb0b a303 	mla	r3, fp, r3, sl
 8008f60:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008f64:	f8dc 4000 	ldr.w	r4, [ip]
 8008f68:	4443      	add	r3, r8
 8008f6a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008f6e:	fb0b 840a 	mla	r4, fp, sl, r8
 8008f72:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008f76:	46e2      	mov	sl, ip
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008f7e:	454f      	cmp	r7, r9
 8008f80:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008f84:	f84a 3b04 	str.w	r3, [sl], #4
 8008f88:	d82b      	bhi.n	8008fe2 <__multiply+0x120>
 8008f8a:	f8cc 8004 	str.w	r8, [ip, #4]
 8008f8e:	9b01      	ldr	r3, [sp, #4]
 8008f90:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008f94:	3204      	adds	r2, #4
 8008f96:	f1ba 0f00 	cmp.w	sl, #0
 8008f9a:	d020      	beq.n	8008fde <__multiply+0x11c>
 8008f9c:	682b      	ldr	r3, [r5, #0]
 8008f9e:	4689      	mov	r9, r1
 8008fa0:	46a8      	mov	r8, r5
 8008fa2:	f04f 0b00 	mov.w	fp, #0
 8008fa6:	f8b9 c000 	ldrh.w	ip, [r9]
 8008faa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008fae:	fb0a 440c 	mla	r4, sl, ip, r4
 8008fb2:	445c      	add	r4, fp
 8008fb4:	46c4      	mov	ip, r8
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008fbc:	f84c 3b04 	str.w	r3, [ip], #4
 8008fc0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008fc4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008fc8:	0c1b      	lsrs	r3, r3, #16
 8008fca:	fb0a b303 	mla	r3, sl, r3, fp
 8008fce:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008fd2:	454f      	cmp	r7, r9
 8008fd4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008fd8:	d805      	bhi.n	8008fe6 <__multiply+0x124>
 8008fda:	f8c8 3004 	str.w	r3, [r8, #4]
 8008fde:	3504      	adds	r5, #4
 8008fe0:	e79b      	b.n	8008f1a <__multiply+0x58>
 8008fe2:	46d4      	mov	ip, sl
 8008fe4:	e7b3      	b.n	8008f4e <__multiply+0x8c>
 8008fe6:	46e0      	mov	r8, ip
 8008fe8:	e7dd      	b.n	8008fa6 <__multiply+0xe4>
 8008fea:	3e01      	subs	r6, #1
 8008fec:	e799      	b.n	8008f22 <__multiply+0x60>
	...

08008ff0 <__pow5mult>:
 8008ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ff4:	4615      	mov	r5, r2
 8008ff6:	f012 0203 	ands.w	r2, r2, #3
 8008ffa:	4606      	mov	r6, r0
 8008ffc:	460f      	mov	r7, r1
 8008ffe:	d007      	beq.n	8009010 <__pow5mult+0x20>
 8009000:	3a01      	subs	r2, #1
 8009002:	4c21      	ldr	r4, [pc, #132]	; (8009088 <__pow5mult+0x98>)
 8009004:	2300      	movs	r3, #0
 8009006:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800900a:	f7ff fec8 	bl	8008d9e <__multadd>
 800900e:	4607      	mov	r7, r0
 8009010:	10ad      	asrs	r5, r5, #2
 8009012:	d035      	beq.n	8009080 <__pow5mult+0x90>
 8009014:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009016:	b93c      	cbnz	r4, 8009028 <__pow5mult+0x38>
 8009018:	2010      	movs	r0, #16
 800901a:	f7ff fe6d 	bl	8008cf8 <malloc>
 800901e:	6270      	str	r0, [r6, #36]	; 0x24
 8009020:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009024:	6004      	str	r4, [r0, #0]
 8009026:	60c4      	str	r4, [r0, #12]
 8009028:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800902c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009030:	b94c      	cbnz	r4, 8009046 <__pow5mult+0x56>
 8009032:	f240 2171 	movw	r1, #625	; 0x271
 8009036:	4630      	mov	r0, r6
 8009038:	f7ff ff3a 	bl	8008eb0 <__i2b>
 800903c:	2300      	movs	r3, #0
 800903e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009042:	4604      	mov	r4, r0
 8009044:	6003      	str	r3, [r0, #0]
 8009046:	f04f 0800 	mov.w	r8, #0
 800904a:	07eb      	lsls	r3, r5, #31
 800904c:	d50a      	bpl.n	8009064 <__pow5mult+0x74>
 800904e:	4639      	mov	r1, r7
 8009050:	4622      	mov	r2, r4
 8009052:	4630      	mov	r0, r6
 8009054:	f7ff ff35 	bl	8008ec2 <__multiply>
 8009058:	4639      	mov	r1, r7
 800905a:	4681      	mov	r9, r0
 800905c:	4630      	mov	r0, r6
 800905e:	f7ff fe87 	bl	8008d70 <_Bfree>
 8009062:	464f      	mov	r7, r9
 8009064:	106d      	asrs	r5, r5, #1
 8009066:	d00b      	beq.n	8009080 <__pow5mult+0x90>
 8009068:	6820      	ldr	r0, [r4, #0]
 800906a:	b938      	cbnz	r0, 800907c <__pow5mult+0x8c>
 800906c:	4622      	mov	r2, r4
 800906e:	4621      	mov	r1, r4
 8009070:	4630      	mov	r0, r6
 8009072:	f7ff ff26 	bl	8008ec2 <__multiply>
 8009076:	6020      	str	r0, [r4, #0]
 8009078:	f8c0 8000 	str.w	r8, [r0]
 800907c:	4604      	mov	r4, r0
 800907e:	e7e4      	b.n	800904a <__pow5mult+0x5a>
 8009080:	4638      	mov	r0, r7
 8009082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009086:	bf00      	nop
 8009088:	0800bfb0 	.word	0x0800bfb0

0800908c <__lshift>:
 800908c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009090:	460c      	mov	r4, r1
 8009092:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009096:	6923      	ldr	r3, [r4, #16]
 8009098:	6849      	ldr	r1, [r1, #4]
 800909a:	eb0a 0903 	add.w	r9, sl, r3
 800909e:	68a3      	ldr	r3, [r4, #8]
 80090a0:	4607      	mov	r7, r0
 80090a2:	4616      	mov	r6, r2
 80090a4:	f109 0501 	add.w	r5, r9, #1
 80090a8:	42ab      	cmp	r3, r5
 80090aa:	db32      	blt.n	8009112 <__lshift+0x86>
 80090ac:	4638      	mov	r0, r7
 80090ae:	f7ff fe2b 	bl	8008d08 <_Balloc>
 80090b2:	2300      	movs	r3, #0
 80090b4:	4680      	mov	r8, r0
 80090b6:	f100 0114 	add.w	r1, r0, #20
 80090ba:	461a      	mov	r2, r3
 80090bc:	4553      	cmp	r3, sl
 80090be:	db2b      	blt.n	8009118 <__lshift+0x8c>
 80090c0:	6920      	ldr	r0, [r4, #16]
 80090c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090c6:	f104 0314 	add.w	r3, r4, #20
 80090ca:	f016 021f 	ands.w	r2, r6, #31
 80090ce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090d2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090d6:	d025      	beq.n	8009124 <__lshift+0x98>
 80090d8:	f1c2 0e20 	rsb	lr, r2, #32
 80090dc:	2000      	movs	r0, #0
 80090de:	681e      	ldr	r6, [r3, #0]
 80090e0:	468a      	mov	sl, r1
 80090e2:	4096      	lsls	r6, r2
 80090e4:	4330      	orrs	r0, r6
 80090e6:	f84a 0b04 	str.w	r0, [sl], #4
 80090ea:	f853 0b04 	ldr.w	r0, [r3], #4
 80090ee:	459c      	cmp	ip, r3
 80090f0:	fa20 f00e 	lsr.w	r0, r0, lr
 80090f4:	d814      	bhi.n	8009120 <__lshift+0x94>
 80090f6:	6048      	str	r0, [r1, #4]
 80090f8:	b108      	cbz	r0, 80090fe <__lshift+0x72>
 80090fa:	f109 0502 	add.w	r5, r9, #2
 80090fe:	3d01      	subs	r5, #1
 8009100:	4638      	mov	r0, r7
 8009102:	f8c8 5010 	str.w	r5, [r8, #16]
 8009106:	4621      	mov	r1, r4
 8009108:	f7ff fe32 	bl	8008d70 <_Bfree>
 800910c:	4640      	mov	r0, r8
 800910e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009112:	3101      	adds	r1, #1
 8009114:	005b      	lsls	r3, r3, #1
 8009116:	e7c7      	b.n	80090a8 <__lshift+0x1c>
 8009118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800911c:	3301      	adds	r3, #1
 800911e:	e7cd      	b.n	80090bc <__lshift+0x30>
 8009120:	4651      	mov	r1, sl
 8009122:	e7dc      	b.n	80090de <__lshift+0x52>
 8009124:	3904      	subs	r1, #4
 8009126:	f853 2b04 	ldr.w	r2, [r3], #4
 800912a:	f841 2f04 	str.w	r2, [r1, #4]!
 800912e:	459c      	cmp	ip, r3
 8009130:	d8f9      	bhi.n	8009126 <__lshift+0x9a>
 8009132:	e7e4      	b.n	80090fe <__lshift+0x72>

08009134 <__mcmp>:
 8009134:	6903      	ldr	r3, [r0, #16]
 8009136:	690a      	ldr	r2, [r1, #16]
 8009138:	1a9b      	subs	r3, r3, r2
 800913a:	b530      	push	{r4, r5, lr}
 800913c:	d10c      	bne.n	8009158 <__mcmp+0x24>
 800913e:	0092      	lsls	r2, r2, #2
 8009140:	3014      	adds	r0, #20
 8009142:	3114      	adds	r1, #20
 8009144:	1884      	adds	r4, r0, r2
 8009146:	4411      	add	r1, r2
 8009148:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800914c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009150:	4295      	cmp	r5, r2
 8009152:	d003      	beq.n	800915c <__mcmp+0x28>
 8009154:	d305      	bcc.n	8009162 <__mcmp+0x2e>
 8009156:	2301      	movs	r3, #1
 8009158:	4618      	mov	r0, r3
 800915a:	bd30      	pop	{r4, r5, pc}
 800915c:	42a0      	cmp	r0, r4
 800915e:	d3f3      	bcc.n	8009148 <__mcmp+0x14>
 8009160:	e7fa      	b.n	8009158 <__mcmp+0x24>
 8009162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009166:	e7f7      	b.n	8009158 <__mcmp+0x24>

08009168 <__mdiff>:
 8009168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800916c:	460d      	mov	r5, r1
 800916e:	4607      	mov	r7, r0
 8009170:	4611      	mov	r1, r2
 8009172:	4628      	mov	r0, r5
 8009174:	4614      	mov	r4, r2
 8009176:	f7ff ffdd 	bl	8009134 <__mcmp>
 800917a:	1e06      	subs	r6, r0, #0
 800917c:	d108      	bne.n	8009190 <__mdiff+0x28>
 800917e:	4631      	mov	r1, r6
 8009180:	4638      	mov	r0, r7
 8009182:	f7ff fdc1 	bl	8008d08 <_Balloc>
 8009186:	2301      	movs	r3, #1
 8009188:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800918c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009190:	bfa4      	itt	ge
 8009192:	4623      	movge	r3, r4
 8009194:	462c      	movge	r4, r5
 8009196:	4638      	mov	r0, r7
 8009198:	6861      	ldr	r1, [r4, #4]
 800919a:	bfa6      	itte	ge
 800919c:	461d      	movge	r5, r3
 800919e:	2600      	movge	r6, #0
 80091a0:	2601      	movlt	r6, #1
 80091a2:	f7ff fdb1 	bl	8008d08 <_Balloc>
 80091a6:	692b      	ldr	r3, [r5, #16]
 80091a8:	60c6      	str	r6, [r0, #12]
 80091aa:	6926      	ldr	r6, [r4, #16]
 80091ac:	f105 0914 	add.w	r9, r5, #20
 80091b0:	f104 0214 	add.w	r2, r4, #20
 80091b4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80091b8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80091bc:	f100 0514 	add.w	r5, r0, #20
 80091c0:	f04f 0e00 	mov.w	lr, #0
 80091c4:	f852 ab04 	ldr.w	sl, [r2], #4
 80091c8:	f859 4b04 	ldr.w	r4, [r9], #4
 80091cc:	fa1e f18a 	uxtah	r1, lr, sl
 80091d0:	b2a3      	uxth	r3, r4
 80091d2:	1ac9      	subs	r1, r1, r3
 80091d4:	0c23      	lsrs	r3, r4, #16
 80091d6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80091da:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80091de:	b289      	uxth	r1, r1
 80091e0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80091e4:	45c8      	cmp	r8, r9
 80091e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80091ea:	4694      	mov	ip, r2
 80091ec:	f845 3b04 	str.w	r3, [r5], #4
 80091f0:	d8e8      	bhi.n	80091c4 <__mdiff+0x5c>
 80091f2:	45bc      	cmp	ip, r7
 80091f4:	d304      	bcc.n	8009200 <__mdiff+0x98>
 80091f6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80091fa:	b183      	cbz	r3, 800921e <__mdiff+0xb6>
 80091fc:	6106      	str	r6, [r0, #16]
 80091fe:	e7c5      	b.n	800918c <__mdiff+0x24>
 8009200:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009204:	fa1e f381 	uxtah	r3, lr, r1
 8009208:	141a      	asrs	r2, r3, #16
 800920a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800920e:	b29b      	uxth	r3, r3
 8009210:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009214:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009218:	f845 3b04 	str.w	r3, [r5], #4
 800921c:	e7e9      	b.n	80091f2 <__mdiff+0x8a>
 800921e:	3e01      	subs	r6, #1
 8009220:	e7e9      	b.n	80091f6 <__mdiff+0x8e>

08009222 <__d2b>:
 8009222:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009226:	460e      	mov	r6, r1
 8009228:	2101      	movs	r1, #1
 800922a:	ec59 8b10 	vmov	r8, r9, d0
 800922e:	4615      	mov	r5, r2
 8009230:	f7ff fd6a 	bl	8008d08 <_Balloc>
 8009234:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009238:	4607      	mov	r7, r0
 800923a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800923e:	bb34      	cbnz	r4, 800928e <__d2b+0x6c>
 8009240:	9301      	str	r3, [sp, #4]
 8009242:	f1b8 0300 	subs.w	r3, r8, #0
 8009246:	d027      	beq.n	8009298 <__d2b+0x76>
 8009248:	a802      	add	r0, sp, #8
 800924a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800924e:	f7ff fe00 	bl	8008e52 <__lo0bits>
 8009252:	9900      	ldr	r1, [sp, #0]
 8009254:	b1f0      	cbz	r0, 8009294 <__d2b+0x72>
 8009256:	9a01      	ldr	r2, [sp, #4]
 8009258:	f1c0 0320 	rsb	r3, r0, #32
 800925c:	fa02 f303 	lsl.w	r3, r2, r3
 8009260:	430b      	orrs	r3, r1
 8009262:	40c2      	lsrs	r2, r0
 8009264:	617b      	str	r3, [r7, #20]
 8009266:	9201      	str	r2, [sp, #4]
 8009268:	9b01      	ldr	r3, [sp, #4]
 800926a:	61bb      	str	r3, [r7, #24]
 800926c:	2b00      	cmp	r3, #0
 800926e:	bf14      	ite	ne
 8009270:	2102      	movne	r1, #2
 8009272:	2101      	moveq	r1, #1
 8009274:	6139      	str	r1, [r7, #16]
 8009276:	b1c4      	cbz	r4, 80092aa <__d2b+0x88>
 8009278:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800927c:	4404      	add	r4, r0
 800927e:	6034      	str	r4, [r6, #0]
 8009280:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009284:	6028      	str	r0, [r5, #0]
 8009286:	4638      	mov	r0, r7
 8009288:	b003      	add	sp, #12
 800928a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800928e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009292:	e7d5      	b.n	8009240 <__d2b+0x1e>
 8009294:	6179      	str	r1, [r7, #20]
 8009296:	e7e7      	b.n	8009268 <__d2b+0x46>
 8009298:	a801      	add	r0, sp, #4
 800929a:	f7ff fdda 	bl	8008e52 <__lo0bits>
 800929e:	9b01      	ldr	r3, [sp, #4]
 80092a0:	617b      	str	r3, [r7, #20]
 80092a2:	2101      	movs	r1, #1
 80092a4:	6139      	str	r1, [r7, #16]
 80092a6:	3020      	adds	r0, #32
 80092a8:	e7e5      	b.n	8009276 <__d2b+0x54>
 80092aa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80092ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80092b2:	6030      	str	r0, [r6, #0]
 80092b4:	6918      	ldr	r0, [r3, #16]
 80092b6:	f7ff fdad 	bl	8008e14 <__hi0bits>
 80092ba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80092be:	e7e1      	b.n	8009284 <__d2b+0x62>

080092c0 <_calloc_r>:
 80092c0:	b538      	push	{r3, r4, r5, lr}
 80092c2:	fb02 f401 	mul.w	r4, r2, r1
 80092c6:	4621      	mov	r1, r4
 80092c8:	f000 f856 	bl	8009378 <_malloc_r>
 80092cc:	4605      	mov	r5, r0
 80092ce:	b118      	cbz	r0, 80092d8 <_calloc_r+0x18>
 80092d0:	4622      	mov	r2, r4
 80092d2:	2100      	movs	r1, #0
 80092d4:	f7fd ff1d 	bl	8007112 <memset>
 80092d8:	4628      	mov	r0, r5
 80092da:	bd38      	pop	{r3, r4, r5, pc}

080092dc <_free_r>:
 80092dc:	b538      	push	{r3, r4, r5, lr}
 80092de:	4605      	mov	r5, r0
 80092e0:	2900      	cmp	r1, #0
 80092e2:	d045      	beq.n	8009370 <_free_r+0x94>
 80092e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092e8:	1f0c      	subs	r4, r1, #4
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	bfb8      	it	lt
 80092ee:	18e4      	addlt	r4, r4, r3
 80092f0:	f000 fc03 	bl	8009afa <__malloc_lock>
 80092f4:	4a1f      	ldr	r2, [pc, #124]	; (8009374 <_free_r+0x98>)
 80092f6:	6813      	ldr	r3, [r2, #0]
 80092f8:	4610      	mov	r0, r2
 80092fa:	b933      	cbnz	r3, 800930a <_free_r+0x2e>
 80092fc:	6063      	str	r3, [r4, #4]
 80092fe:	6014      	str	r4, [r2, #0]
 8009300:	4628      	mov	r0, r5
 8009302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009306:	f000 bbf9 	b.w	8009afc <__malloc_unlock>
 800930a:	42a3      	cmp	r3, r4
 800930c:	d90c      	bls.n	8009328 <_free_r+0x4c>
 800930e:	6821      	ldr	r1, [r4, #0]
 8009310:	1862      	adds	r2, r4, r1
 8009312:	4293      	cmp	r3, r2
 8009314:	bf04      	itt	eq
 8009316:	681a      	ldreq	r2, [r3, #0]
 8009318:	685b      	ldreq	r3, [r3, #4]
 800931a:	6063      	str	r3, [r4, #4]
 800931c:	bf04      	itt	eq
 800931e:	1852      	addeq	r2, r2, r1
 8009320:	6022      	streq	r2, [r4, #0]
 8009322:	6004      	str	r4, [r0, #0]
 8009324:	e7ec      	b.n	8009300 <_free_r+0x24>
 8009326:	4613      	mov	r3, r2
 8009328:	685a      	ldr	r2, [r3, #4]
 800932a:	b10a      	cbz	r2, 8009330 <_free_r+0x54>
 800932c:	42a2      	cmp	r2, r4
 800932e:	d9fa      	bls.n	8009326 <_free_r+0x4a>
 8009330:	6819      	ldr	r1, [r3, #0]
 8009332:	1858      	adds	r0, r3, r1
 8009334:	42a0      	cmp	r0, r4
 8009336:	d10b      	bne.n	8009350 <_free_r+0x74>
 8009338:	6820      	ldr	r0, [r4, #0]
 800933a:	4401      	add	r1, r0
 800933c:	1858      	adds	r0, r3, r1
 800933e:	4282      	cmp	r2, r0
 8009340:	6019      	str	r1, [r3, #0]
 8009342:	d1dd      	bne.n	8009300 <_free_r+0x24>
 8009344:	6810      	ldr	r0, [r2, #0]
 8009346:	6852      	ldr	r2, [r2, #4]
 8009348:	605a      	str	r2, [r3, #4]
 800934a:	4401      	add	r1, r0
 800934c:	6019      	str	r1, [r3, #0]
 800934e:	e7d7      	b.n	8009300 <_free_r+0x24>
 8009350:	d902      	bls.n	8009358 <_free_r+0x7c>
 8009352:	230c      	movs	r3, #12
 8009354:	602b      	str	r3, [r5, #0]
 8009356:	e7d3      	b.n	8009300 <_free_r+0x24>
 8009358:	6820      	ldr	r0, [r4, #0]
 800935a:	1821      	adds	r1, r4, r0
 800935c:	428a      	cmp	r2, r1
 800935e:	bf04      	itt	eq
 8009360:	6811      	ldreq	r1, [r2, #0]
 8009362:	6852      	ldreq	r2, [r2, #4]
 8009364:	6062      	str	r2, [r4, #4]
 8009366:	bf04      	itt	eq
 8009368:	1809      	addeq	r1, r1, r0
 800936a:	6021      	streq	r1, [r4, #0]
 800936c:	605c      	str	r4, [r3, #4]
 800936e:	e7c7      	b.n	8009300 <_free_r+0x24>
 8009370:	bd38      	pop	{r3, r4, r5, pc}
 8009372:	bf00      	nop
 8009374:	20000370 	.word	0x20000370

08009378 <_malloc_r>:
 8009378:	b570      	push	{r4, r5, r6, lr}
 800937a:	1ccd      	adds	r5, r1, #3
 800937c:	f025 0503 	bic.w	r5, r5, #3
 8009380:	3508      	adds	r5, #8
 8009382:	2d0c      	cmp	r5, #12
 8009384:	bf38      	it	cc
 8009386:	250c      	movcc	r5, #12
 8009388:	2d00      	cmp	r5, #0
 800938a:	4606      	mov	r6, r0
 800938c:	db01      	blt.n	8009392 <_malloc_r+0x1a>
 800938e:	42a9      	cmp	r1, r5
 8009390:	d903      	bls.n	800939a <_malloc_r+0x22>
 8009392:	230c      	movs	r3, #12
 8009394:	6033      	str	r3, [r6, #0]
 8009396:	2000      	movs	r0, #0
 8009398:	bd70      	pop	{r4, r5, r6, pc}
 800939a:	f000 fbae 	bl	8009afa <__malloc_lock>
 800939e:	4a21      	ldr	r2, [pc, #132]	; (8009424 <_malloc_r+0xac>)
 80093a0:	6814      	ldr	r4, [r2, #0]
 80093a2:	4621      	mov	r1, r4
 80093a4:	b991      	cbnz	r1, 80093cc <_malloc_r+0x54>
 80093a6:	4c20      	ldr	r4, [pc, #128]	; (8009428 <_malloc_r+0xb0>)
 80093a8:	6823      	ldr	r3, [r4, #0]
 80093aa:	b91b      	cbnz	r3, 80093b4 <_malloc_r+0x3c>
 80093ac:	4630      	mov	r0, r6
 80093ae:	f000 facf 	bl	8009950 <_sbrk_r>
 80093b2:	6020      	str	r0, [r4, #0]
 80093b4:	4629      	mov	r1, r5
 80093b6:	4630      	mov	r0, r6
 80093b8:	f000 faca 	bl	8009950 <_sbrk_r>
 80093bc:	1c43      	adds	r3, r0, #1
 80093be:	d124      	bne.n	800940a <_malloc_r+0x92>
 80093c0:	230c      	movs	r3, #12
 80093c2:	6033      	str	r3, [r6, #0]
 80093c4:	4630      	mov	r0, r6
 80093c6:	f000 fb99 	bl	8009afc <__malloc_unlock>
 80093ca:	e7e4      	b.n	8009396 <_malloc_r+0x1e>
 80093cc:	680b      	ldr	r3, [r1, #0]
 80093ce:	1b5b      	subs	r3, r3, r5
 80093d0:	d418      	bmi.n	8009404 <_malloc_r+0x8c>
 80093d2:	2b0b      	cmp	r3, #11
 80093d4:	d90f      	bls.n	80093f6 <_malloc_r+0x7e>
 80093d6:	600b      	str	r3, [r1, #0]
 80093d8:	50cd      	str	r5, [r1, r3]
 80093da:	18cc      	adds	r4, r1, r3
 80093dc:	4630      	mov	r0, r6
 80093de:	f000 fb8d 	bl	8009afc <__malloc_unlock>
 80093e2:	f104 000b 	add.w	r0, r4, #11
 80093e6:	1d23      	adds	r3, r4, #4
 80093e8:	f020 0007 	bic.w	r0, r0, #7
 80093ec:	1ac3      	subs	r3, r0, r3
 80093ee:	d0d3      	beq.n	8009398 <_malloc_r+0x20>
 80093f0:	425a      	negs	r2, r3
 80093f2:	50e2      	str	r2, [r4, r3]
 80093f4:	e7d0      	b.n	8009398 <_malloc_r+0x20>
 80093f6:	428c      	cmp	r4, r1
 80093f8:	684b      	ldr	r3, [r1, #4]
 80093fa:	bf16      	itet	ne
 80093fc:	6063      	strne	r3, [r4, #4]
 80093fe:	6013      	streq	r3, [r2, #0]
 8009400:	460c      	movne	r4, r1
 8009402:	e7eb      	b.n	80093dc <_malloc_r+0x64>
 8009404:	460c      	mov	r4, r1
 8009406:	6849      	ldr	r1, [r1, #4]
 8009408:	e7cc      	b.n	80093a4 <_malloc_r+0x2c>
 800940a:	1cc4      	adds	r4, r0, #3
 800940c:	f024 0403 	bic.w	r4, r4, #3
 8009410:	42a0      	cmp	r0, r4
 8009412:	d005      	beq.n	8009420 <_malloc_r+0xa8>
 8009414:	1a21      	subs	r1, r4, r0
 8009416:	4630      	mov	r0, r6
 8009418:	f000 fa9a 	bl	8009950 <_sbrk_r>
 800941c:	3001      	adds	r0, #1
 800941e:	d0cf      	beq.n	80093c0 <_malloc_r+0x48>
 8009420:	6025      	str	r5, [r4, #0]
 8009422:	e7db      	b.n	80093dc <_malloc_r+0x64>
 8009424:	20000370 	.word	0x20000370
 8009428:	20000374 	.word	0x20000374

0800942c <__ssputs_r>:
 800942c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009430:	688e      	ldr	r6, [r1, #8]
 8009432:	429e      	cmp	r6, r3
 8009434:	4682      	mov	sl, r0
 8009436:	460c      	mov	r4, r1
 8009438:	4690      	mov	r8, r2
 800943a:	4699      	mov	r9, r3
 800943c:	d837      	bhi.n	80094ae <__ssputs_r+0x82>
 800943e:	898a      	ldrh	r2, [r1, #12]
 8009440:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009444:	d031      	beq.n	80094aa <__ssputs_r+0x7e>
 8009446:	6825      	ldr	r5, [r4, #0]
 8009448:	6909      	ldr	r1, [r1, #16]
 800944a:	1a6f      	subs	r7, r5, r1
 800944c:	6965      	ldr	r5, [r4, #20]
 800944e:	2302      	movs	r3, #2
 8009450:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009454:	fb95 f5f3 	sdiv	r5, r5, r3
 8009458:	f109 0301 	add.w	r3, r9, #1
 800945c:	443b      	add	r3, r7
 800945e:	429d      	cmp	r5, r3
 8009460:	bf38      	it	cc
 8009462:	461d      	movcc	r5, r3
 8009464:	0553      	lsls	r3, r2, #21
 8009466:	d530      	bpl.n	80094ca <__ssputs_r+0x9e>
 8009468:	4629      	mov	r1, r5
 800946a:	f7ff ff85 	bl	8009378 <_malloc_r>
 800946e:	4606      	mov	r6, r0
 8009470:	b950      	cbnz	r0, 8009488 <__ssputs_r+0x5c>
 8009472:	230c      	movs	r3, #12
 8009474:	f8ca 3000 	str.w	r3, [sl]
 8009478:	89a3      	ldrh	r3, [r4, #12]
 800947a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800947e:	81a3      	strh	r3, [r4, #12]
 8009480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009488:	463a      	mov	r2, r7
 800948a:	6921      	ldr	r1, [r4, #16]
 800948c:	f7fd fe36 	bl	80070fc <memcpy>
 8009490:	89a3      	ldrh	r3, [r4, #12]
 8009492:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800949a:	81a3      	strh	r3, [r4, #12]
 800949c:	6126      	str	r6, [r4, #16]
 800949e:	6165      	str	r5, [r4, #20]
 80094a0:	443e      	add	r6, r7
 80094a2:	1bed      	subs	r5, r5, r7
 80094a4:	6026      	str	r6, [r4, #0]
 80094a6:	60a5      	str	r5, [r4, #8]
 80094a8:	464e      	mov	r6, r9
 80094aa:	454e      	cmp	r6, r9
 80094ac:	d900      	bls.n	80094b0 <__ssputs_r+0x84>
 80094ae:	464e      	mov	r6, r9
 80094b0:	4632      	mov	r2, r6
 80094b2:	4641      	mov	r1, r8
 80094b4:	6820      	ldr	r0, [r4, #0]
 80094b6:	f000 fb07 	bl	8009ac8 <memmove>
 80094ba:	68a3      	ldr	r3, [r4, #8]
 80094bc:	1b9b      	subs	r3, r3, r6
 80094be:	60a3      	str	r3, [r4, #8]
 80094c0:	6823      	ldr	r3, [r4, #0]
 80094c2:	441e      	add	r6, r3
 80094c4:	6026      	str	r6, [r4, #0]
 80094c6:	2000      	movs	r0, #0
 80094c8:	e7dc      	b.n	8009484 <__ssputs_r+0x58>
 80094ca:	462a      	mov	r2, r5
 80094cc:	f000 fb17 	bl	8009afe <_realloc_r>
 80094d0:	4606      	mov	r6, r0
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d1e2      	bne.n	800949c <__ssputs_r+0x70>
 80094d6:	6921      	ldr	r1, [r4, #16]
 80094d8:	4650      	mov	r0, sl
 80094da:	f7ff feff 	bl	80092dc <_free_r>
 80094de:	e7c8      	b.n	8009472 <__ssputs_r+0x46>

080094e0 <_svfiprintf_r>:
 80094e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e4:	461d      	mov	r5, r3
 80094e6:	898b      	ldrh	r3, [r1, #12]
 80094e8:	061f      	lsls	r7, r3, #24
 80094ea:	b09d      	sub	sp, #116	; 0x74
 80094ec:	4680      	mov	r8, r0
 80094ee:	460c      	mov	r4, r1
 80094f0:	4616      	mov	r6, r2
 80094f2:	d50f      	bpl.n	8009514 <_svfiprintf_r+0x34>
 80094f4:	690b      	ldr	r3, [r1, #16]
 80094f6:	b96b      	cbnz	r3, 8009514 <_svfiprintf_r+0x34>
 80094f8:	2140      	movs	r1, #64	; 0x40
 80094fa:	f7ff ff3d 	bl	8009378 <_malloc_r>
 80094fe:	6020      	str	r0, [r4, #0]
 8009500:	6120      	str	r0, [r4, #16]
 8009502:	b928      	cbnz	r0, 8009510 <_svfiprintf_r+0x30>
 8009504:	230c      	movs	r3, #12
 8009506:	f8c8 3000 	str.w	r3, [r8]
 800950a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800950e:	e0c8      	b.n	80096a2 <_svfiprintf_r+0x1c2>
 8009510:	2340      	movs	r3, #64	; 0x40
 8009512:	6163      	str	r3, [r4, #20]
 8009514:	2300      	movs	r3, #0
 8009516:	9309      	str	r3, [sp, #36]	; 0x24
 8009518:	2320      	movs	r3, #32
 800951a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800951e:	2330      	movs	r3, #48	; 0x30
 8009520:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009524:	9503      	str	r5, [sp, #12]
 8009526:	f04f 0b01 	mov.w	fp, #1
 800952a:	4637      	mov	r7, r6
 800952c:	463d      	mov	r5, r7
 800952e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009532:	b10b      	cbz	r3, 8009538 <_svfiprintf_r+0x58>
 8009534:	2b25      	cmp	r3, #37	; 0x25
 8009536:	d13e      	bne.n	80095b6 <_svfiprintf_r+0xd6>
 8009538:	ebb7 0a06 	subs.w	sl, r7, r6
 800953c:	d00b      	beq.n	8009556 <_svfiprintf_r+0x76>
 800953e:	4653      	mov	r3, sl
 8009540:	4632      	mov	r2, r6
 8009542:	4621      	mov	r1, r4
 8009544:	4640      	mov	r0, r8
 8009546:	f7ff ff71 	bl	800942c <__ssputs_r>
 800954a:	3001      	adds	r0, #1
 800954c:	f000 80a4 	beq.w	8009698 <_svfiprintf_r+0x1b8>
 8009550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009552:	4453      	add	r3, sl
 8009554:	9309      	str	r3, [sp, #36]	; 0x24
 8009556:	783b      	ldrb	r3, [r7, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 809d 	beq.w	8009698 <_svfiprintf_r+0x1b8>
 800955e:	2300      	movs	r3, #0
 8009560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009564:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009568:	9304      	str	r3, [sp, #16]
 800956a:	9307      	str	r3, [sp, #28]
 800956c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009570:	931a      	str	r3, [sp, #104]	; 0x68
 8009572:	462f      	mov	r7, r5
 8009574:	2205      	movs	r2, #5
 8009576:	f817 1b01 	ldrb.w	r1, [r7], #1
 800957a:	4850      	ldr	r0, [pc, #320]	; (80096bc <_svfiprintf_r+0x1dc>)
 800957c:	f7f7 fbd8 	bl	8000d30 <memchr>
 8009580:	9b04      	ldr	r3, [sp, #16]
 8009582:	b9d0      	cbnz	r0, 80095ba <_svfiprintf_r+0xda>
 8009584:	06d9      	lsls	r1, r3, #27
 8009586:	bf44      	itt	mi
 8009588:	2220      	movmi	r2, #32
 800958a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800958e:	071a      	lsls	r2, r3, #28
 8009590:	bf44      	itt	mi
 8009592:	222b      	movmi	r2, #43	; 0x2b
 8009594:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009598:	782a      	ldrb	r2, [r5, #0]
 800959a:	2a2a      	cmp	r2, #42	; 0x2a
 800959c:	d015      	beq.n	80095ca <_svfiprintf_r+0xea>
 800959e:	9a07      	ldr	r2, [sp, #28]
 80095a0:	462f      	mov	r7, r5
 80095a2:	2000      	movs	r0, #0
 80095a4:	250a      	movs	r5, #10
 80095a6:	4639      	mov	r1, r7
 80095a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095ac:	3b30      	subs	r3, #48	; 0x30
 80095ae:	2b09      	cmp	r3, #9
 80095b0:	d94d      	bls.n	800964e <_svfiprintf_r+0x16e>
 80095b2:	b1b8      	cbz	r0, 80095e4 <_svfiprintf_r+0x104>
 80095b4:	e00f      	b.n	80095d6 <_svfiprintf_r+0xf6>
 80095b6:	462f      	mov	r7, r5
 80095b8:	e7b8      	b.n	800952c <_svfiprintf_r+0x4c>
 80095ba:	4a40      	ldr	r2, [pc, #256]	; (80096bc <_svfiprintf_r+0x1dc>)
 80095bc:	1a80      	subs	r0, r0, r2
 80095be:	fa0b f000 	lsl.w	r0, fp, r0
 80095c2:	4318      	orrs	r0, r3
 80095c4:	9004      	str	r0, [sp, #16]
 80095c6:	463d      	mov	r5, r7
 80095c8:	e7d3      	b.n	8009572 <_svfiprintf_r+0x92>
 80095ca:	9a03      	ldr	r2, [sp, #12]
 80095cc:	1d11      	adds	r1, r2, #4
 80095ce:	6812      	ldr	r2, [r2, #0]
 80095d0:	9103      	str	r1, [sp, #12]
 80095d2:	2a00      	cmp	r2, #0
 80095d4:	db01      	blt.n	80095da <_svfiprintf_r+0xfa>
 80095d6:	9207      	str	r2, [sp, #28]
 80095d8:	e004      	b.n	80095e4 <_svfiprintf_r+0x104>
 80095da:	4252      	negs	r2, r2
 80095dc:	f043 0302 	orr.w	r3, r3, #2
 80095e0:	9207      	str	r2, [sp, #28]
 80095e2:	9304      	str	r3, [sp, #16]
 80095e4:	783b      	ldrb	r3, [r7, #0]
 80095e6:	2b2e      	cmp	r3, #46	; 0x2e
 80095e8:	d10c      	bne.n	8009604 <_svfiprintf_r+0x124>
 80095ea:	787b      	ldrb	r3, [r7, #1]
 80095ec:	2b2a      	cmp	r3, #42	; 0x2a
 80095ee:	d133      	bne.n	8009658 <_svfiprintf_r+0x178>
 80095f0:	9b03      	ldr	r3, [sp, #12]
 80095f2:	1d1a      	adds	r2, r3, #4
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	9203      	str	r2, [sp, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	bfb8      	it	lt
 80095fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009600:	3702      	adds	r7, #2
 8009602:	9305      	str	r3, [sp, #20]
 8009604:	4d2e      	ldr	r5, [pc, #184]	; (80096c0 <_svfiprintf_r+0x1e0>)
 8009606:	7839      	ldrb	r1, [r7, #0]
 8009608:	2203      	movs	r2, #3
 800960a:	4628      	mov	r0, r5
 800960c:	f7f7 fb90 	bl	8000d30 <memchr>
 8009610:	b138      	cbz	r0, 8009622 <_svfiprintf_r+0x142>
 8009612:	2340      	movs	r3, #64	; 0x40
 8009614:	1b40      	subs	r0, r0, r5
 8009616:	fa03 f000 	lsl.w	r0, r3, r0
 800961a:	9b04      	ldr	r3, [sp, #16]
 800961c:	4303      	orrs	r3, r0
 800961e:	3701      	adds	r7, #1
 8009620:	9304      	str	r3, [sp, #16]
 8009622:	7839      	ldrb	r1, [r7, #0]
 8009624:	4827      	ldr	r0, [pc, #156]	; (80096c4 <_svfiprintf_r+0x1e4>)
 8009626:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800962a:	2206      	movs	r2, #6
 800962c:	1c7e      	adds	r6, r7, #1
 800962e:	f7f7 fb7f 	bl	8000d30 <memchr>
 8009632:	2800      	cmp	r0, #0
 8009634:	d038      	beq.n	80096a8 <_svfiprintf_r+0x1c8>
 8009636:	4b24      	ldr	r3, [pc, #144]	; (80096c8 <_svfiprintf_r+0x1e8>)
 8009638:	bb13      	cbnz	r3, 8009680 <_svfiprintf_r+0x1a0>
 800963a:	9b03      	ldr	r3, [sp, #12]
 800963c:	3307      	adds	r3, #7
 800963e:	f023 0307 	bic.w	r3, r3, #7
 8009642:	3308      	adds	r3, #8
 8009644:	9303      	str	r3, [sp, #12]
 8009646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009648:	444b      	add	r3, r9
 800964a:	9309      	str	r3, [sp, #36]	; 0x24
 800964c:	e76d      	b.n	800952a <_svfiprintf_r+0x4a>
 800964e:	fb05 3202 	mla	r2, r5, r2, r3
 8009652:	2001      	movs	r0, #1
 8009654:	460f      	mov	r7, r1
 8009656:	e7a6      	b.n	80095a6 <_svfiprintf_r+0xc6>
 8009658:	2300      	movs	r3, #0
 800965a:	3701      	adds	r7, #1
 800965c:	9305      	str	r3, [sp, #20]
 800965e:	4619      	mov	r1, r3
 8009660:	250a      	movs	r5, #10
 8009662:	4638      	mov	r0, r7
 8009664:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009668:	3a30      	subs	r2, #48	; 0x30
 800966a:	2a09      	cmp	r2, #9
 800966c:	d903      	bls.n	8009676 <_svfiprintf_r+0x196>
 800966e:	2b00      	cmp	r3, #0
 8009670:	d0c8      	beq.n	8009604 <_svfiprintf_r+0x124>
 8009672:	9105      	str	r1, [sp, #20]
 8009674:	e7c6      	b.n	8009604 <_svfiprintf_r+0x124>
 8009676:	fb05 2101 	mla	r1, r5, r1, r2
 800967a:	2301      	movs	r3, #1
 800967c:	4607      	mov	r7, r0
 800967e:	e7f0      	b.n	8009662 <_svfiprintf_r+0x182>
 8009680:	ab03      	add	r3, sp, #12
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	4622      	mov	r2, r4
 8009686:	4b11      	ldr	r3, [pc, #68]	; (80096cc <_svfiprintf_r+0x1ec>)
 8009688:	a904      	add	r1, sp, #16
 800968a:	4640      	mov	r0, r8
 800968c:	f7fd fdde 	bl	800724c <_printf_float>
 8009690:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009694:	4681      	mov	r9, r0
 8009696:	d1d6      	bne.n	8009646 <_svfiprintf_r+0x166>
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	065b      	lsls	r3, r3, #25
 800969c:	f53f af35 	bmi.w	800950a <_svfiprintf_r+0x2a>
 80096a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096a2:	b01d      	add	sp, #116	; 0x74
 80096a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096a8:	ab03      	add	r3, sp, #12
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	4622      	mov	r2, r4
 80096ae:	4b07      	ldr	r3, [pc, #28]	; (80096cc <_svfiprintf_r+0x1ec>)
 80096b0:	a904      	add	r1, sp, #16
 80096b2:	4640      	mov	r0, r8
 80096b4:	f7fe f880 	bl	80077b8 <_printf_i>
 80096b8:	e7ea      	b.n	8009690 <_svfiprintf_r+0x1b0>
 80096ba:	bf00      	nop
 80096bc:	0800bfbc 	.word	0x0800bfbc
 80096c0:	0800bfc2 	.word	0x0800bfc2
 80096c4:	0800bfc6 	.word	0x0800bfc6
 80096c8:	0800724d 	.word	0x0800724d
 80096cc:	0800942d 	.word	0x0800942d

080096d0 <__sfputc_r>:
 80096d0:	6893      	ldr	r3, [r2, #8]
 80096d2:	3b01      	subs	r3, #1
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	b410      	push	{r4}
 80096d8:	6093      	str	r3, [r2, #8]
 80096da:	da08      	bge.n	80096ee <__sfputc_r+0x1e>
 80096dc:	6994      	ldr	r4, [r2, #24]
 80096de:	42a3      	cmp	r3, r4
 80096e0:	db01      	blt.n	80096e6 <__sfputc_r+0x16>
 80096e2:	290a      	cmp	r1, #10
 80096e4:	d103      	bne.n	80096ee <__sfputc_r+0x1e>
 80096e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096ea:	f7fe ba13 	b.w	8007b14 <__swbuf_r>
 80096ee:	6813      	ldr	r3, [r2, #0]
 80096f0:	1c58      	adds	r0, r3, #1
 80096f2:	6010      	str	r0, [r2, #0]
 80096f4:	7019      	strb	r1, [r3, #0]
 80096f6:	4608      	mov	r0, r1
 80096f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <__sfputs_r>:
 80096fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009700:	4606      	mov	r6, r0
 8009702:	460f      	mov	r7, r1
 8009704:	4614      	mov	r4, r2
 8009706:	18d5      	adds	r5, r2, r3
 8009708:	42ac      	cmp	r4, r5
 800970a:	d101      	bne.n	8009710 <__sfputs_r+0x12>
 800970c:	2000      	movs	r0, #0
 800970e:	e007      	b.n	8009720 <__sfputs_r+0x22>
 8009710:	463a      	mov	r2, r7
 8009712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009716:	4630      	mov	r0, r6
 8009718:	f7ff ffda 	bl	80096d0 <__sfputc_r>
 800971c:	1c43      	adds	r3, r0, #1
 800971e:	d1f3      	bne.n	8009708 <__sfputs_r+0xa>
 8009720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009724 <_vfiprintf_r>:
 8009724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009728:	460c      	mov	r4, r1
 800972a:	b09d      	sub	sp, #116	; 0x74
 800972c:	4617      	mov	r7, r2
 800972e:	461d      	mov	r5, r3
 8009730:	4606      	mov	r6, r0
 8009732:	b118      	cbz	r0, 800973c <_vfiprintf_r+0x18>
 8009734:	6983      	ldr	r3, [r0, #24]
 8009736:	b90b      	cbnz	r3, 800973c <_vfiprintf_r+0x18>
 8009738:	f7ff f9e2 	bl	8008b00 <__sinit>
 800973c:	4b7c      	ldr	r3, [pc, #496]	; (8009930 <_vfiprintf_r+0x20c>)
 800973e:	429c      	cmp	r4, r3
 8009740:	d158      	bne.n	80097f4 <_vfiprintf_r+0xd0>
 8009742:	6874      	ldr	r4, [r6, #4]
 8009744:	89a3      	ldrh	r3, [r4, #12]
 8009746:	0718      	lsls	r0, r3, #28
 8009748:	d55e      	bpl.n	8009808 <_vfiprintf_r+0xe4>
 800974a:	6923      	ldr	r3, [r4, #16]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d05b      	beq.n	8009808 <_vfiprintf_r+0xe4>
 8009750:	2300      	movs	r3, #0
 8009752:	9309      	str	r3, [sp, #36]	; 0x24
 8009754:	2320      	movs	r3, #32
 8009756:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800975a:	2330      	movs	r3, #48	; 0x30
 800975c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009760:	9503      	str	r5, [sp, #12]
 8009762:	f04f 0b01 	mov.w	fp, #1
 8009766:	46b8      	mov	r8, r7
 8009768:	4645      	mov	r5, r8
 800976a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800976e:	b10b      	cbz	r3, 8009774 <_vfiprintf_r+0x50>
 8009770:	2b25      	cmp	r3, #37	; 0x25
 8009772:	d154      	bne.n	800981e <_vfiprintf_r+0xfa>
 8009774:	ebb8 0a07 	subs.w	sl, r8, r7
 8009778:	d00b      	beq.n	8009792 <_vfiprintf_r+0x6e>
 800977a:	4653      	mov	r3, sl
 800977c:	463a      	mov	r2, r7
 800977e:	4621      	mov	r1, r4
 8009780:	4630      	mov	r0, r6
 8009782:	f7ff ffbc 	bl	80096fe <__sfputs_r>
 8009786:	3001      	adds	r0, #1
 8009788:	f000 80c2 	beq.w	8009910 <_vfiprintf_r+0x1ec>
 800978c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800978e:	4453      	add	r3, sl
 8009790:	9309      	str	r3, [sp, #36]	; 0x24
 8009792:	f898 3000 	ldrb.w	r3, [r8]
 8009796:	2b00      	cmp	r3, #0
 8009798:	f000 80ba 	beq.w	8009910 <_vfiprintf_r+0x1ec>
 800979c:	2300      	movs	r3, #0
 800979e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097a6:	9304      	str	r3, [sp, #16]
 80097a8:	9307      	str	r3, [sp, #28]
 80097aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097ae:	931a      	str	r3, [sp, #104]	; 0x68
 80097b0:	46a8      	mov	r8, r5
 80097b2:	2205      	movs	r2, #5
 80097b4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80097b8:	485e      	ldr	r0, [pc, #376]	; (8009934 <_vfiprintf_r+0x210>)
 80097ba:	f7f7 fab9 	bl	8000d30 <memchr>
 80097be:	9b04      	ldr	r3, [sp, #16]
 80097c0:	bb78      	cbnz	r0, 8009822 <_vfiprintf_r+0xfe>
 80097c2:	06d9      	lsls	r1, r3, #27
 80097c4:	bf44      	itt	mi
 80097c6:	2220      	movmi	r2, #32
 80097c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80097cc:	071a      	lsls	r2, r3, #28
 80097ce:	bf44      	itt	mi
 80097d0:	222b      	movmi	r2, #43	; 0x2b
 80097d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80097d6:	782a      	ldrb	r2, [r5, #0]
 80097d8:	2a2a      	cmp	r2, #42	; 0x2a
 80097da:	d02a      	beq.n	8009832 <_vfiprintf_r+0x10e>
 80097dc:	9a07      	ldr	r2, [sp, #28]
 80097de:	46a8      	mov	r8, r5
 80097e0:	2000      	movs	r0, #0
 80097e2:	250a      	movs	r5, #10
 80097e4:	4641      	mov	r1, r8
 80097e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097ea:	3b30      	subs	r3, #48	; 0x30
 80097ec:	2b09      	cmp	r3, #9
 80097ee:	d969      	bls.n	80098c4 <_vfiprintf_r+0x1a0>
 80097f0:	b360      	cbz	r0, 800984c <_vfiprintf_r+0x128>
 80097f2:	e024      	b.n	800983e <_vfiprintf_r+0x11a>
 80097f4:	4b50      	ldr	r3, [pc, #320]	; (8009938 <_vfiprintf_r+0x214>)
 80097f6:	429c      	cmp	r4, r3
 80097f8:	d101      	bne.n	80097fe <_vfiprintf_r+0xda>
 80097fa:	68b4      	ldr	r4, [r6, #8]
 80097fc:	e7a2      	b.n	8009744 <_vfiprintf_r+0x20>
 80097fe:	4b4f      	ldr	r3, [pc, #316]	; (800993c <_vfiprintf_r+0x218>)
 8009800:	429c      	cmp	r4, r3
 8009802:	bf08      	it	eq
 8009804:	68f4      	ldreq	r4, [r6, #12]
 8009806:	e79d      	b.n	8009744 <_vfiprintf_r+0x20>
 8009808:	4621      	mov	r1, r4
 800980a:	4630      	mov	r0, r6
 800980c:	f7fe f9d4 	bl	8007bb8 <__swsetup_r>
 8009810:	2800      	cmp	r0, #0
 8009812:	d09d      	beq.n	8009750 <_vfiprintf_r+0x2c>
 8009814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009818:	b01d      	add	sp, #116	; 0x74
 800981a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800981e:	46a8      	mov	r8, r5
 8009820:	e7a2      	b.n	8009768 <_vfiprintf_r+0x44>
 8009822:	4a44      	ldr	r2, [pc, #272]	; (8009934 <_vfiprintf_r+0x210>)
 8009824:	1a80      	subs	r0, r0, r2
 8009826:	fa0b f000 	lsl.w	r0, fp, r0
 800982a:	4318      	orrs	r0, r3
 800982c:	9004      	str	r0, [sp, #16]
 800982e:	4645      	mov	r5, r8
 8009830:	e7be      	b.n	80097b0 <_vfiprintf_r+0x8c>
 8009832:	9a03      	ldr	r2, [sp, #12]
 8009834:	1d11      	adds	r1, r2, #4
 8009836:	6812      	ldr	r2, [r2, #0]
 8009838:	9103      	str	r1, [sp, #12]
 800983a:	2a00      	cmp	r2, #0
 800983c:	db01      	blt.n	8009842 <_vfiprintf_r+0x11e>
 800983e:	9207      	str	r2, [sp, #28]
 8009840:	e004      	b.n	800984c <_vfiprintf_r+0x128>
 8009842:	4252      	negs	r2, r2
 8009844:	f043 0302 	orr.w	r3, r3, #2
 8009848:	9207      	str	r2, [sp, #28]
 800984a:	9304      	str	r3, [sp, #16]
 800984c:	f898 3000 	ldrb.w	r3, [r8]
 8009850:	2b2e      	cmp	r3, #46	; 0x2e
 8009852:	d10e      	bne.n	8009872 <_vfiprintf_r+0x14e>
 8009854:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009858:	2b2a      	cmp	r3, #42	; 0x2a
 800985a:	d138      	bne.n	80098ce <_vfiprintf_r+0x1aa>
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	1d1a      	adds	r2, r3, #4
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	9203      	str	r2, [sp, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	bfb8      	it	lt
 8009868:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800986c:	f108 0802 	add.w	r8, r8, #2
 8009870:	9305      	str	r3, [sp, #20]
 8009872:	4d33      	ldr	r5, [pc, #204]	; (8009940 <_vfiprintf_r+0x21c>)
 8009874:	f898 1000 	ldrb.w	r1, [r8]
 8009878:	2203      	movs	r2, #3
 800987a:	4628      	mov	r0, r5
 800987c:	f7f7 fa58 	bl	8000d30 <memchr>
 8009880:	b140      	cbz	r0, 8009894 <_vfiprintf_r+0x170>
 8009882:	2340      	movs	r3, #64	; 0x40
 8009884:	1b40      	subs	r0, r0, r5
 8009886:	fa03 f000 	lsl.w	r0, r3, r0
 800988a:	9b04      	ldr	r3, [sp, #16]
 800988c:	4303      	orrs	r3, r0
 800988e:	f108 0801 	add.w	r8, r8, #1
 8009892:	9304      	str	r3, [sp, #16]
 8009894:	f898 1000 	ldrb.w	r1, [r8]
 8009898:	482a      	ldr	r0, [pc, #168]	; (8009944 <_vfiprintf_r+0x220>)
 800989a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800989e:	2206      	movs	r2, #6
 80098a0:	f108 0701 	add.w	r7, r8, #1
 80098a4:	f7f7 fa44 	bl	8000d30 <memchr>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	d037      	beq.n	800991c <_vfiprintf_r+0x1f8>
 80098ac:	4b26      	ldr	r3, [pc, #152]	; (8009948 <_vfiprintf_r+0x224>)
 80098ae:	bb1b      	cbnz	r3, 80098f8 <_vfiprintf_r+0x1d4>
 80098b0:	9b03      	ldr	r3, [sp, #12]
 80098b2:	3307      	adds	r3, #7
 80098b4:	f023 0307 	bic.w	r3, r3, #7
 80098b8:	3308      	adds	r3, #8
 80098ba:	9303      	str	r3, [sp, #12]
 80098bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098be:	444b      	add	r3, r9
 80098c0:	9309      	str	r3, [sp, #36]	; 0x24
 80098c2:	e750      	b.n	8009766 <_vfiprintf_r+0x42>
 80098c4:	fb05 3202 	mla	r2, r5, r2, r3
 80098c8:	2001      	movs	r0, #1
 80098ca:	4688      	mov	r8, r1
 80098cc:	e78a      	b.n	80097e4 <_vfiprintf_r+0xc0>
 80098ce:	2300      	movs	r3, #0
 80098d0:	f108 0801 	add.w	r8, r8, #1
 80098d4:	9305      	str	r3, [sp, #20]
 80098d6:	4619      	mov	r1, r3
 80098d8:	250a      	movs	r5, #10
 80098da:	4640      	mov	r0, r8
 80098dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098e0:	3a30      	subs	r2, #48	; 0x30
 80098e2:	2a09      	cmp	r2, #9
 80098e4:	d903      	bls.n	80098ee <_vfiprintf_r+0x1ca>
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d0c3      	beq.n	8009872 <_vfiprintf_r+0x14e>
 80098ea:	9105      	str	r1, [sp, #20]
 80098ec:	e7c1      	b.n	8009872 <_vfiprintf_r+0x14e>
 80098ee:	fb05 2101 	mla	r1, r5, r1, r2
 80098f2:	2301      	movs	r3, #1
 80098f4:	4680      	mov	r8, r0
 80098f6:	e7f0      	b.n	80098da <_vfiprintf_r+0x1b6>
 80098f8:	ab03      	add	r3, sp, #12
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	4622      	mov	r2, r4
 80098fe:	4b13      	ldr	r3, [pc, #76]	; (800994c <_vfiprintf_r+0x228>)
 8009900:	a904      	add	r1, sp, #16
 8009902:	4630      	mov	r0, r6
 8009904:	f7fd fca2 	bl	800724c <_printf_float>
 8009908:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800990c:	4681      	mov	r9, r0
 800990e:	d1d5      	bne.n	80098bc <_vfiprintf_r+0x198>
 8009910:	89a3      	ldrh	r3, [r4, #12]
 8009912:	065b      	lsls	r3, r3, #25
 8009914:	f53f af7e 	bmi.w	8009814 <_vfiprintf_r+0xf0>
 8009918:	9809      	ldr	r0, [sp, #36]	; 0x24
 800991a:	e77d      	b.n	8009818 <_vfiprintf_r+0xf4>
 800991c:	ab03      	add	r3, sp, #12
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	4622      	mov	r2, r4
 8009922:	4b0a      	ldr	r3, [pc, #40]	; (800994c <_vfiprintf_r+0x228>)
 8009924:	a904      	add	r1, sp, #16
 8009926:	4630      	mov	r0, r6
 8009928:	f7fd ff46 	bl	80077b8 <_printf_i>
 800992c:	e7ec      	b.n	8009908 <_vfiprintf_r+0x1e4>
 800992e:	bf00      	nop
 8009930:	0800be7c 	.word	0x0800be7c
 8009934:	0800bfbc 	.word	0x0800bfbc
 8009938:	0800be9c 	.word	0x0800be9c
 800993c:	0800be5c 	.word	0x0800be5c
 8009940:	0800bfc2 	.word	0x0800bfc2
 8009944:	0800bfc6 	.word	0x0800bfc6
 8009948:	0800724d 	.word	0x0800724d
 800994c:	080096ff 	.word	0x080096ff

08009950 <_sbrk_r>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	4c06      	ldr	r4, [pc, #24]	; (800996c <_sbrk_r+0x1c>)
 8009954:	2300      	movs	r3, #0
 8009956:	4605      	mov	r5, r0
 8009958:	4608      	mov	r0, r1
 800995a:	6023      	str	r3, [r4, #0]
 800995c:	f7fd fb36 	bl	8006fcc <_sbrk>
 8009960:	1c43      	adds	r3, r0, #1
 8009962:	d102      	bne.n	800996a <_sbrk_r+0x1a>
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	b103      	cbz	r3, 800996a <_sbrk_r+0x1a>
 8009968:	602b      	str	r3, [r5, #0]
 800996a:	bd38      	pop	{r3, r4, r5, pc}
 800996c:	20000768 	.word	0x20000768

08009970 <__sread>:
 8009970:	b510      	push	{r4, lr}
 8009972:	460c      	mov	r4, r1
 8009974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009978:	f000 f8e8 	bl	8009b4c <_read_r>
 800997c:	2800      	cmp	r0, #0
 800997e:	bfab      	itete	ge
 8009980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009982:	89a3      	ldrhlt	r3, [r4, #12]
 8009984:	181b      	addge	r3, r3, r0
 8009986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800998a:	bfac      	ite	ge
 800998c:	6563      	strge	r3, [r4, #84]	; 0x54
 800998e:	81a3      	strhlt	r3, [r4, #12]
 8009990:	bd10      	pop	{r4, pc}

08009992 <__swrite>:
 8009992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009996:	461f      	mov	r7, r3
 8009998:	898b      	ldrh	r3, [r1, #12]
 800999a:	05db      	lsls	r3, r3, #23
 800999c:	4605      	mov	r5, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	4616      	mov	r6, r2
 80099a2:	d505      	bpl.n	80099b0 <__swrite+0x1e>
 80099a4:	2302      	movs	r3, #2
 80099a6:	2200      	movs	r2, #0
 80099a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ac:	f000 f868 	bl	8009a80 <_lseek_r>
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099ba:	81a3      	strh	r3, [r4, #12]
 80099bc:	4632      	mov	r2, r6
 80099be:	463b      	mov	r3, r7
 80099c0:	4628      	mov	r0, r5
 80099c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099c6:	f000 b817 	b.w	80099f8 <_write_r>

080099ca <__sseek>:
 80099ca:	b510      	push	{r4, lr}
 80099cc:	460c      	mov	r4, r1
 80099ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d2:	f000 f855 	bl	8009a80 <_lseek_r>
 80099d6:	1c43      	adds	r3, r0, #1
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	bf15      	itete	ne
 80099dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80099de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099e6:	81a3      	strheq	r3, [r4, #12]
 80099e8:	bf18      	it	ne
 80099ea:	81a3      	strhne	r3, [r4, #12]
 80099ec:	bd10      	pop	{r4, pc}

080099ee <__sclose>:
 80099ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099f2:	f000 b813 	b.w	8009a1c <_close_r>
	...

080099f8 <_write_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4c07      	ldr	r4, [pc, #28]	; (8009a18 <_write_r+0x20>)
 80099fc:	4605      	mov	r5, r0
 80099fe:	4608      	mov	r0, r1
 8009a00:	4611      	mov	r1, r2
 8009a02:	2200      	movs	r2, #0
 8009a04:	6022      	str	r2, [r4, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	f7fd f856 	bl	8006ab8 <_write>
 8009a0c:	1c43      	adds	r3, r0, #1
 8009a0e:	d102      	bne.n	8009a16 <_write_r+0x1e>
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	b103      	cbz	r3, 8009a16 <_write_r+0x1e>
 8009a14:	602b      	str	r3, [r5, #0]
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	20000768 	.word	0x20000768

08009a1c <_close_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	4c06      	ldr	r4, [pc, #24]	; (8009a38 <_close_r+0x1c>)
 8009a20:	2300      	movs	r3, #0
 8009a22:	4605      	mov	r5, r0
 8009a24:	4608      	mov	r0, r1
 8009a26:	6023      	str	r3, [r4, #0]
 8009a28:	f7fd fac4 	bl	8006fb4 <_close>
 8009a2c:	1c43      	adds	r3, r0, #1
 8009a2e:	d102      	bne.n	8009a36 <_close_r+0x1a>
 8009a30:	6823      	ldr	r3, [r4, #0]
 8009a32:	b103      	cbz	r3, 8009a36 <_close_r+0x1a>
 8009a34:	602b      	str	r3, [r5, #0]
 8009a36:	bd38      	pop	{r3, r4, r5, pc}
 8009a38:	20000768 	.word	0x20000768

08009a3c <_fstat_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4c07      	ldr	r4, [pc, #28]	; (8009a5c <_fstat_r+0x20>)
 8009a40:	2300      	movs	r3, #0
 8009a42:	4605      	mov	r5, r0
 8009a44:	4608      	mov	r0, r1
 8009a46:	4611      	mov	r1, r2
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	f7fd fab6 	bl	8006fba <_fstat>
 8009a4e:	1c43      	adds	r3, r0, #1
 8009a50:	d102      	bne.n	8009a58 <_fstat_r+0x1c>
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	b103      	cbz	r3, 8009a58 <_fstat_r+0x1c>
 8009a56:	602b      	str	r3, [r5, #0]
 8009a58:	bd38      	pop	{r3, r4, r5, pc}
 8009a5a:	bf00      	nop
 8009a5c:	20000768 	.word	0x20000768

08009a60 <_isatty_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	4c06      	ldr	r4, [pc, #24]	; (8009a7c <_isatty_r+0x1c>)
 8009a64:	2300      	movs	r3, #0
 8009a66:	4605      	mov	r5, r0
 8009a68:	4608      	mov	r0, r1
 8009a6a:	6023      	str	r3, [r4, #0]
 8009a6c:	f7fd faaa 	bl	8006fc4 <_isatty>
 8009a70:	1c43      	adds	r3, r0, #1
 8009a72:	d102      	bne.n	8009a7a <_isatty_r+0x1a>
 8009a74:	6823      	ldr	r3, [r4, #0]
 8009a76:	b103      	cbz	r3, 8009a7a <_isatty_r+0x1a>
 8009a78:	602b      	str	r3, [r5, #0]
 8009a7a:	bd38      	pop	{r3, r4, r5, pc}
 8009a7c:	20000768 	.word	0x20000768

08009a80 <_lseek_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4c07      	ldr	r4, [pc, #28]	; (8009aa0 <_lseek_r+0x20>)
 8009a84:	4605      	mov	r5, r0
 8009a86:	4608      	mov	r0, r1
 8009a88:	4611      	mov	r1, r2
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	6022      	str	r2, [r4, #0]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	f7fd fa9a 	bl	8006fc8 <_lseek>
 8009a94:	1c43      	adds	r3, r0, #1
 8009a96:	d102      	bne.n	8009a9e <_lseek_r+0x1e>
 8009a98:	6823      	ldr	r3, [r4, #0]
 8009a9a:	b103      	cbz	r3, 8009a9e <_lseek_r+0x1e>
 8009a9c:	602b      	str	r3, [r5, #0]
 8009a9e:	bd38      	pop	{r3, r4, r5, pc}
 8009aa0:	20000768 	.word	0x20000768

08009aa4 <__ascii_mbtowc>:
 8009aa4:	b082      	sub	sp, #8
 8009aa6:	b901      	cbnz	r1, 8009aaa <__ascii_mbtowc+0x6>
 8009aa8:	a901      	add	r1, sp, #4
 8009aaa:	b142      	cbz	r2, 8009abe <__ascii_mbtowc+0x1a>
 8009aac:	b14b      	cbz	r3, 8009ac2 <__ascii_mbtowc+0x1e>
 8009aae:	7813      	ldrb	r3, [r2, #0]
 8009ab0:	600b      	str	r3, [r1, #0]
 8009ab2:	7812      	ldrb	r2, [r2, #0]
 8009ab4:	1c10      	adds	r0, r2, #0
 8009ab6:	bf18      	it	ne
 8009ab8:	2001      	movne	r0, #1
 8009aba:	b002      	add	sp, #8
 8009abc:	4770      	bx	lr
 8009abe:	4610      	mov	r0, r2
 8009ac0:	e7fb      	b.n	8009aba <__ascii_mbtowc+0x16>
 8009ac2:	f06f 0001 	mvn.w	r0, #1
 8009ac6:	e7f8      	b.n	8009aba <__ascii_mbtowc+0x16>

08009ac8 <memmove>:
 8009ac8:	4288      	cmp	r0, r1
 8009aca:	b510      	push	{r4, lr}
 8009acc:	eb01 0302 	add.w	r3, r1, r2
 8009ad0:	d807      	bhi.n	8009ae2 <memmove+0x1a>
 8009ad2:	1e42      	subs	r2, r0, #1
 8009ad4:	4299      	cmp	r1, r3
 8009ad6:	d00a      	beq.n	8009aee <memmove+0x26>
 8009ad8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009adc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009ae0:	e7f8      	b.n	8009ad4 <memmove+0xc>
 8009ae2:	4283      	cmp	r3, r0
 8009ae4:	d9f5      	bls.n	8009ad2 <memmove+0xa>
 8009ae6:	1881      	adds	r1, r0, r2
 8009ae8:	1ad2      	subs	r2, r2, r3
 8009aea:	42d3      	cmn	r3, r2
 8009aec:	d100      	bne.n	8009af0 <memmove+0x28>
 8009aee:	bd10      	pop	{r4, pc}
 8009af0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009af4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009af8:	e7f7      	b.n	8009aea <memmove+0x22>

08009afa <__malloc_lock>:
 8009afa:	4770      	bx	lr

08009afc <__malloc_unlock>:
 8009afc:	4770      	bx	lr

08009afe <_realloc_r>:
 8009afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b00:	4607      	mov	r7, r0
 8009b02:	4614      	mov	r4, r2
 8009b04:	460e      	mov	r6, r1
 8009b06:	b921      	cbnz	r1, 8009b12 <_realloc_r+0x14>
 8009b08:	4611      	mov	r1, r2
 8009b0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009b0e:	f7ff bc33 	b.w	8009378 <_malloc_r>
 8009b12:	b922      	cbnz	r2, 8009b1e <_realloc_r+0x20>
 8009b14:	f7ff fbe2 	bl	80092dc <_free_r>
 8009b18:	4625      	mov	r5, r4
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b1e:	f000 f834 	bl	8009b8a <_malloc_usable_size_r>
 8009b22:	42a0      	cmp	r0, r4
 8009b24:	d20f      	bcs.n	8009b46 <_realloc_r+0x48>
 8009b26:	4621      	mov	r1, r4
 8009b28:	4638      	mov	r0, r7
 8009b2a:	f7ff fc25 	bl	8009378 <_malloc_r>
 8009b2e:	4605      	mov	r5, r0
 8009b30:	2800      	cmp	r0, #0
 8009b32:	d0f2      	beq.n	8009b1a <_realloc_r+0x1c>
 8009b34:	4631      	mov	r1, r6
 8009b36:	4622      	mov	r2, r4
 8009b38:	f7fd fae0 	bl	80070fc <memcpy>
 8009b3c:	4631      	mov	r1, r6
 8009b3e:	4638      	mov	r0, r7
 8009b40:	f7ff fbcc 	bl	80092dc <_free_r>
 8009b44:	e7e9      	b.n	8009b1a <_realloc_r+0x1c>
 8009b46:	4635      	mov	r5, r6
 8009b48:	e7e7      	b.n	8009b1a <_realloc_r+0x1c>
	...

08009b4c <_read_r>:
 8009b4c:	b538      	push	{r3, r4, r5, lr}
 8009b4e:	4c07      	ldr	r4, [pc, #28]	; (8009b6c <_read_r+0x20>)
 8009b50:	4605      	mov	r5, r0
 8009b52:	4608      	mov	r0, r1
 8009b54:	4611      	mov	r1, r2
 8009b56:	2200      	movs	r2, #0
 8009b58:	6022      	str	r2, [r4, #0]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	f7fd fa1c 	bl	8006f98 <_read>
 8009b60:	1c43      	adds	r3, r0, #1
 8009b62:	d102      	bne.n	8009b6a <_read_r+0x1e>
 8009b64:	6823      	ldr	r3, [r4, #0]
 8009b66:	b103      	cbz	r3, 8009b6a <_read_r+0x1e>
 8009b68:	602b      	str	r3, [r5, #0]
 8009b6a:	bd38      	pop	{r3, r4, r5, pc}
 8009b6c:	20000768 	.word	0x20000768

08009b70 <__ascii_wctomb>:
 8009b70:	b149      	cbz	r1, 8009b86 <__ascii_wctomb+0x16>
 8009b72:	2aff      	cmp	r2, #255	; 0xff
 8009b74:	bf85      	ittet	hi
 8009b76:	238a      	movhi	r3, #138	; 0x8a
 8009b78:	6003      	strhi	r3, [r0, #0]
 8009b7a:	700a      	strbls	r2, [r1, #0]
 8009b7c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009b80:	bf98      	it	ls
 8009b82:	2001      	movls	r0, #1
 8009b84:	4770      	bx	lr
 8009b86:	4608      	mov	r0, r1
 8009b88:	4770      	bx	lr

08009b8a <_malloc_usable_size_r>:
 8009b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b8e:	1f18      	subs	r0, r3, #4
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	bfbc      	itt	lt
 8009b94:	580b      	ldrlt	r3, [r1, r0]
 8009b96:	18c0      	addlt	r0, r0, r3
 8009b98:	4770      	bx	lr
	...

08009b9c <asin>:
 8009b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b9e:	ed2d 8b02 	vpush	{d8}
 8009ba2:	4e26      	ldr	r6, [pc, #152]	; (8009c3c <asin+0xa0>)
 8009ba4:	b08b      	sub	sp, #44	; 0x2c
 8009ba6:	ec55 4b10 	vmov	r4, r5, d0
 8009baa:	f000 fa1d 	bl	8009fe8 <__ieee754_asin>
 8009bae:	f996 3000 	ldrsb.w	r3, [r6]
 8009bb2:	eeb0 8a40 	vmov.f32	s16, s0
 8009bb6:	eef0 8a60 	vmov.f32	s17, s1
 8009bba:	3301      	adds	r3, #1
 8009bbc:	d036      	beq.n	8009c2c <asin+0x90>
 8009bbe:	4622      	mov	r2, r4
 8009bc0:	462b      	mov	r3, r5
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	f7f7 f98b 	bl	8000ee0 <__aeabi_dcmpun>
 8009bca:	4607      	mov	r7, r0
 8009bcc:	bb70      	cbnz	r0, 8009c2c <asin+0x90>
 8009bce:	ec45 4b10 	vmov	d0, r4, r5
 8009bd2:	f001 fc59 	bl	800b488 <fabs>
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	4b19      	ldr	r3, [pc, #100]	; (8009c40 <asin+0xa4>)
 8009bda:	ec51 0b10 	vmov	r0, r1, d0
 8009bde:	f7f7 f975 	bl	8000ecc <__aeabi_dcmpgt>
 8009be2:	b318      	cbz	r0, 8009c2c <asin+0x90>
 8009be4:	2301      	movs	r3, #1
 8009be6:	9300      	str	r3, [sp, #0]
 8009be8:	4816      	ldr	r0, [pc, #88]	; (8009c44 <asin+0xa8>)
 8009bea:	4b17      	ldr	r3, [pc, #92]	; (8009c48 <asin+0xac>)
 8009bec:	9301      	str	r3, [sp, #4]
 8009bee:	9708      	str	r7, [sp, #32]
 8009bf0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009bf4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009bf8:	f001 fc5a 	bl	800b4b0 <nan>
 8009bfc:	f996 3000 	ldrsb.w	r3, [r6]
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	ed8d 0b06 	vstr	d0, [sp, #24]
 8009c06:	d104      	bne.n	8009c12 <asin+0x76>
 8009c08:	f7fd fa4e 	bl	80070a8 <__errno>
 8009c0c:	2321      	movs	r3, #33	; 0x21
 8009c0e:	6003      	str	r3, [r0, #0]
 8009c10:	e004      	b.n	8009c1c <asin+0x80>
 8009c12:	4668      	mov	r0, sp
 8009c14:	f001 fc49 	bl	800b4aa <matherr>
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	d0f5      	beq.n	8009c08 <asin+0x6c>
 8009c1c:	9b08      	ldr	r3, [sp, #32]
 8009c1e:	b11b      	cbz	r3, 8009c28 <asin+0x8c>
 8009c20:	f7fd fa42 	bl	80070a8 <__errno>
 8009c24:	9b08      	ldr	r3, [sp, #32]
 8009c26:	6003      	str	r3, [r0, #0]
 8009c28:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009c2c:	eeb0 0a48 	vmov.f32	s0, s16
 8009c30:	eef0 0a68 	vmov.f32	s1, s17
 8009c34:	b00b      	add	sp, #44	; 0x2c
 8009c36:	ecbd 8b02 	vpop	{d8}
 8009c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c3c:	20000234 	.word	0x20000234
 8009c40:	3ff00000 	.word	0x3ff00000
 8009c44:	0800bfc1 	.word	0x0800bfc1
 8009c48:	0800c0d8 	.word	0x0800c0d8

08009c4c <atan2>:
 8009c4c:	f000 bbdc 	b.w	800a408 <__ieee754_atan2>

08009c50 <pow>:
 8009c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c54:	ed2d 8b04 	vpush	{d8-d9}
 8009c58:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8009f2c <pow+0x2dc>
 8009c5c:	b08d      	sub	sp, #52	; 0x34
 8009c5e:	ec57 6b10 	vmov	r6, r7, d0
 8009c62:	ec55 4b11 	vmov	r4, r5, d1
 8009c66:	f000 fcaf 	bl	800a5c8 <__ieee754_pow>
 8009c6a:	f999 3000 	ldrsb.w	r3, [r9]
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	3301      	adds	r3, #1
 8009c72:	eeb0 8a40 	vmov.f32	s16, s0
 8009c76:	eef0 8a60 	vmov.f32	s17, s1
 8009c7a:	46c8      	mov	r8, r9
 8009c7c:	d05f      	beq.n	8009d3e <pow+0xee>
 8009c7e:	4622      	mov	r2, r4
 8009c80:	462b      	mov	r3, r5
 8009c82:	4620      	mov	r0, r4
 8009c84:	4629      	mov	r1, r5
 8009c86:	f7f7 f92b 	bl	8000ee0 <__aeabi_dcmpun>
 8009c8a:	4683      	mov	fp, r0
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	d156      	bne.n	8009d3e <pow+0xee>
 8009c90:	4632      	mov	r2, r6
 8009c92:	463b      	mov	r3, r7
 8009c94:	4630      	mov	r0, r6
 8009c96:	4639      	mov	r1, r7
 8009c98:	f7f7 f922 	bl	8000ee0 <__aeabi_dcmpun>
 8009c9c:	9001      	str	r0, [sp, #4]
 8009c9e:	b1e8      	cbz	r0, 8009cdc <pow+0x8c>
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	4629      	mov	r1, r5
 8009ca8:	f7f7 f8e8 	bl	8000e7c <__aeabi_dcmpeq>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d046      	beq.n	8009d3e <pow+0xee>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	9302      	str	r3, [sp, #8]
 8009cb4:	4b96      	ldr	r3, [pc, #600]	; (8009f10 <pow+0x2c0>)
 8009cb6:	9303      	str	r3, [sp, #12]
 8009cb8:	4b96      	ldr	r3, [pc, #600]	; (8009f14 <pow+0x2c4>)
 8009cba:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009cc4:	9b00      	ldr	r3, [sp, #0]
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009ccc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009cd0:	d033      	beq.n	8009d3a <pow+0xea>
 8009cd2:	a802      	add	r0, sp, #8
 8009cd4:	f001 fbe9 	bl	800b4aa <matherr>
 8009cd8:	bb48      	cbnz	r0, 8009d2e <pow+0xde>
 8009cda:	e05d      	b.n	8009d98 <pow+0x148>
 8009cdc:	f04f 0a00 	mov.w	sl, #0
 8009ce0:	f04f 0b00 	mov.w	fp, #0
 8009ce4:	4652      	mov	r2, sl
 8009ce6:	465b      	mov	r3, fp
 8009ce8:	4630      	mov	r0, r6
 8009cea:	4639      	mov	r1, r7
 8009cec:	f7f7 f8c6 	bl	8000e7c <__aeabi_dcmpeq>
 8009cf0:	ec4b ab19 	vmov	d9, sl, fp
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	d054      	beq.n	8009da2 <pow+0x152>
 8009cf8:	4652      	mov	r2, sl
 8009cfa:	465b      	mov	r3, fp
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	4629      	mov	r1, r5
 8009d00:	f7f7 f8bc 	bl	8000e7c <__aeabi_dcmpeq>
 8009d04:	4680      	mov	r8, r0
 8009d06:	b318      	cbz	r0, 8009d50 <pow+0x100>
 8009d08:	2301      	movs	r3, #1
 8009d0a:	9302      	str	r3, [sp, #8]
 8009d0c:	4b80      	ldr	r3, [pc, #512]	; (8009f10 <pow+0x2c0>)
 8009d0e:	9303      	str	r3, [sp, #12]
 8009d10:	9b01      	ldr	r3, [sp, #4]
 8009d12:	930a      	str	r3, [sp, #40]	; 0x28
 8009d14:	9b00      	ldr	r3, [sp, #0]
 8009d16:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009d1a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009d1e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d0d5      	beq.n	8009cd2 <pow+0x82>
 8009d26:	4b7b      	ldr	r3, [pc, #492]	; (8009f14 <pow+0x2c4>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d30:	b11b      	cbz	r3, 8009d3a <pow+0xea>
 8009d32:	f7fd f9b9 	bl	80070a8 <__errno>
 8009d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d38:	6003      	str	r3, [r0, #0]
 8009d3a:	ed9d 8b08 	vldr	d8, [sp, #32]
 8009d3e:	eeb0 0a48 	vmov.f32	s0, s16
 8009d42:	eef0 0a68 	vmov.f32	s1, s17
 8009d46:	b00d      	add	sp, #52	; 0x34
 8009d48:	ecbd 8b04 	vpop	{d8-d9}
 8009d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d50:	ec45 4b10 	vmov	d0, r4, r5
 8009d54:	f001 fba1 	bl	800b49a <finite>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	d0f0      	beq.n	8009d3e <pow+0xee>
 8009d5c:	4652      	mov	r2, sl
 8009d5e:	465b      	mov	r3, fp
 8009d60:	4620      	mov	r0, r4
 8009d62:	4629      	mov	r1, r5
 8009d64:	f7f7 f894 	bl	8000e90 <__aeabi_dcmplt>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	d0e8      	beq.n	8009d3e <pow+0xee>
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	9302      	str	r3, [sp, #8]
 8009d70:	4b67      	ldr	r3, [pc, #412]	; (8009f10 <pow+0x2c0>)
 8009d72:	9303      	str	r3, [sp, #12]
 8009d74:	f999 3000 	ldrsb.w	r3, [r9]
 8009d78:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009d7c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009d80:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009d84:	b913      	cbnz	r3, 8009d8c <pow+0x13c>
 8009d86:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009d8a:	e7a2      	b.n	8009cd2 <pow+0x82>
 8009d8c:	4962      	ldr	r1, [pc, #392]	; (8009f18 <pow+0x2c8>)
 8009d8e:	2000      	movs	r0, #0
 8009d90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d19c      	bne.n	8009cd2 <pow+0x82>
 8009d98:	f7fd f986 	bl	80070a8 <__errno>
 8009d9c:	2321      	movs	r3, #33	; 0x21
 8009d9e:	6003      	str	r3, [r0, #0]
 8009da0:	e7c5      	b.n	8009d2e <pow+0xde>
 8009da2:	eeb0 0a48 	vmov.f32	s0, s16
 8009da6:	eef0 0a68 	vmov.f32	s1, s17
 8009daa:	f001 fb76 	bl	800b49a <finite>
 8009dae:	9000      	str	r0, [sp, #0]
 8009db0:	2800      	cmp	r0, #0
 8009db2:	f040 8081 	bne.w	8009eb8 <pow+0x268>
 8009db6:	ec47 6b10 	vmov	d0, r6, r7
 8009dba:	f001 fb6e 	bl	800b49a <finite>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	d07a      	beq.n	8009eb8 <pow+0x268>
 8009dc2:	ec45 4b10 	vmov	d0, r4, r5
 8009dc6:	f001 fb68 	bl	800b49a <finite>
 8009dca:	2800      	cmp	r0, #0
 8009dcc:	d074      	beq.n	8009eb8 <pow+0x268>
 8009dce:	ec53 2b18 	vmov	r2, r3, d8
 8009dd2:	ee18 0a10 	vmov	r0, s16
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	f7f7 f882 	bl	8000ee0 <__aeabi_dcmpun>
 8009ddc:	f999 9000 	ldrsb.w	r9, [r9]
 8009de0:	4b4b      	ldr	r3, [pc, #300]	; (8009f10 <pow+0x2c0>)
 8009de2:	b1b0      	cbz	r0, 8009e12 <pow+0x1c2>
 8009de4:	2201      	movs	r2, #1
 8009de6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009dea:	9b00      	ldr	r3, [sp, #0]
 8009dec:	930a      	str	r3, [sp, #40]	; 0x28
 8009dee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009df2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009df6:	f1b9 0f00 	cmp.w	r9, #0
 8009dfa:	d0c4      	beq.n	8009d86 <pow+0x136>
 8009dfc:	4652      	mov	r2, sl
 8009dfe:	465b      	mov	r3, fp
 8009e00:	4650      	mov	r0, sl
 8009e02:	4659      	mov	r1, fp
 8009e04:	f7f6 fcd2 	bl	80007ac <__aeabi_ddiv>
 8009e08:	f1b9 0f02 	cmp.w	r9, #2
 8009e0c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e10:	e7c1      	b.n	8009d96 <pow+0x146>
 8009e12:	2203      	movs	r2, #3
 8009e14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e18:	900a      	str	r0, [sp, #40]	; 0x28
 8009e1a:	4629      	mov	r1, r5
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	2200      	movs	r2, #0
 8009e20:	4b3e      	ldr	r3, [pc, #248]	; (8009f1c <pow+0x2cc>)
 8009e22:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009e26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009e2a:	f7f6 fb95 	bl	8000558 <__aeabi_dmul>
 8009e2e:	4604      	mov	r4, r0
 8009e30:	460d      	mov	r5, r1
 8009e32:	f1b9 0f00 	cmp.w	r9, #0
 8009e36:	d124      	bne.n	8009e82 <pow+0x232>
 8009e38:	4b39      	ldr	r3, [pc, #228]	; (8009f20 <pow+0x2d0>)
 8009e3a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009e3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e42:	4630      	mov	r0, r6
 8009e44:	4652      	mov	r2, sl
 8009e46:	465b      	mov	r3, fp
 8009e48:	4639      	mov	r1, r7
 8009e4a:	f7f7 f821 	bl	8000e90 <__aeabi_dcmplt>
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	d056      	beq.n	8009f00 <pow+0x2b0>
 8009e52:	ec45 4b10 	vmov	d0, r4, r5
 8009e56:	f001 fb33 	bl	800b4c0 <rint>
 8009e5a:	4622      	mov	r2, r4
 8009e5c:	462b      	mov	r3, r5
 8009e5e:	ec51 0b10 	vmov	r0, r1, d0
 8009e62:	f7f7 f80b 	bl	8000e7c <__aeabi_dcmpeq>
 8009e66:	b920      	cbnz	r0, 8009e72 <pow+0x222>
 8009e68:	4b2e      	ldr	r3, [pc, #184]	; (8009f24 <pow+0x2d4>)
 8009e6a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009e6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e72:	f998 3000 	ldrsb.w	r3, [r8]
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	d142      	bne.n	8009f00 <pow+0x2b0>
 8009e7a:	f7fd f915 	bl	80070a8 <__errno>
 8009e7e:	2322      	movs	r3, #34	; 0x22
 8009e80:	e78d      	b.n	8009d9e <pow+0x14e>
 8009e82:	4b29      	ldr	r3, [pc, #164]	; (8009f28 <pow+0x2d8>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	4652      	mov	r2, sl
 8009e8e:	465b      	mov	r3, fp
 8009e90:	4639      	mov	r1, r7
 8009e92:	f7f6 fffd 	bl	8000e90 <__aeabi_dcmplt>
 8009e96:	2800      	cmp	r0, #0
 8009e98:	d0eb      	beq.n	8009e72 <pow+0x222>
 8009e9a:	ec45 4b10 	vmov	d0, r4, r5
 8009e9e:	f001 fb0f 	bl	800b4c0 <rint>
 8009ea2:	4622      	mov	r2, r4
 8009ea4:	462b      	mov	r3, r5
 8009ea6:	ec51 0b10 	vmov	r0, r1, d0
 8009eaa:	f7f6 ffe7 	bl	8000e7c <__aeabi_dcmpeq>
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	d1df      	bne.n	8009e72 <pow+0x222>
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	4b18      	ldr	r3, [pc, #96]	; (8009f18 <pow+0x2c8>)
 8009eb6:	e7da      	b.n	8009e6e <pow+0x21e>
 8009eb8:	2200      	movs	r2, #0
 8009eba:	2300      	movs	r3, #0
 8009ebc:	ec51 0b18 	vmov	r0, r1, d8
 8009ec0:	f7f6 ffdc 	bl	8000e7c <__aeabi_dcmpeq>
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	f43f af3a 	beq.w	8009d3e <pow+0xee>
 8009eca:	ec47 6b10 	vmov	d0, r6, r7
 8009ece:	f001 fae4 	bl	800b49a <finite>
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	f43f af33 	beq.w	8009d3e <pow+0xee>
 8009ed8:	ec45 4b10 	vmov	d0, r4, r5
 8009edc:	f001 fadd 	bl	800b49a <finite>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	f43f af2c 	beq.w	8009d3e <pow+0xee>
 8009ee6:	2304      	movs	r3, #4
 8009ee8:	9302      	str	r3, [sp, #8]
 8009eea:	4b09      	ldr	r3, [pc, #36]	; (8009f10 <pow+0x2c0>)
 8009eec:	9303      	str	r3, [sp, #12]
 8009eee:	2300      	movs	r3, #0
 8009ef0:	930a      	str	r3, [sp, #40]	; 0x28
 8009ef2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009ef6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009efa:	ed8d 9b08 	vstr	d9, [sp, #32]
 8009efe:	e7b8      	b.n	8009e72 <pow+0x222>
 8009f00:	a802      	add	r0, sp, #8
 8009f02:	f001 fad2 	bl	800b4aa <matherr>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	f47f af11 	bne.w	8009d2e <pow+0xde>
 8009f0c:	e7b5      	b.n	8009e7a <pow+0x22a>
 8009f0e:	bf00      	nop
 8009f10:	0800c0dd 	.word	0x0800c0dd
 8009f14:	3ff00000 	.word	0x3ff00000
 8009f18:	fff00000 	.word	0xfff00000
 8009f1c:	3fe00000 	.word	0x3fe00000
 8009f20:	47efffff 	.word	0x47efffff
 8009f24:	c7efffff 	.word	0xc7efffff
 8009f28:	7ff00000 	.word	0x7ff00000
 8009f2c:	20000234 	.word	0x20000234

08009f30 <sqrt>:
 8009f30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f34:	ed2d 8b02 	vpush	{d8}
 8009f38:	b08b      	sub	sp, #44	; 0x2c
 8009f3a:	ec55 4b10 	vmov	r4, r5, d0
 8009f3e:	f001 f851 	bl	800afe4 <__ieee754_sqrt>
 8009f42:	4b26      	ldr	r3, [pc, #152]	; (8009fdc <sqrt+0xac>)
 8009f44:	eeb0 8a40 	vmov.f32	s16, s0
 8009f48:	eef0 8a60 	vmov.f32	s17, s1
 8009f4c:	f993 6000 	ldrsb.w	r6, [r3]
 8009f50:	1c73      	adds	r3, r6, #1
 8009f52:	d02a      	beq.n	8009faa <sqrt+0x7a>
 8009f54:	4622      	mov	r2, r4
 8009f56:	462b      	mov	r3, r5
 8009f58:	4620      	mov	r0, r4
 8009f5a:	4629      	mov	r1, r5
 8009f5c:	f7f6 ffc0 	bl	8000ee0 <__aeabi_dcmpun>
 8009f60:	4607      	mov	r7, r0
 8009f62:	bb10      	cbnz	r0, 8009faa <sqrt+0x7a>
 8009f64:	f04f 0800 	mov.w	r8, #0
 8009f68:	f04f 0900 	mov.w	r9, #0
 8009f6c:	4642      	mov	r2, r8
 8009f6e:	464b      	mov	r3, r9
 8009f70:	4620      	mov	r0, r4
 8009f72:	4629      	mov	r1, r5
 8009f74:	f7f6 ff8c 	bl	8000e90 <__aeabi_dcmplt>
 8009f78:	b1b8      	cbz	r0, 8009faa <sqrt+0x7a>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	9300      	str	r3, [sp, #0]
 8009f7e:	4b18      	ldr	r3, [pc, #96]	; (8009fe0 <sqrt+0xb0>)
 8009f80:	9301      	str	r3, [sp, #4]
 8009f82:	9708      	str	r7, [sp, #32]
 8009f84:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009f88:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009f8c:	b9b6      	cbnz	r6, 8009fbc <sqrt+0x8c>
 8009f8e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009f92:	4668      	mov	r0, sp
 8009f94:	f001 fa89 	bl	800b4aa <matherr>
 8009f98:	b1d0      	cbz	r0, 8009fd0 <sqrt+0xa0>
 8009f9a:	9b08      	ldr	r3, [sp, #32]
 8009f9c:	b11b      	cbz	r3, 8009fa6 <sqrt+0x76>
 8009f9e:	f7fd f883 	bl	80070a8 <__errno>
 8009fa2:	9b08      	ldr	r3, [sp, #32]
 8009fa4:	6003      	str	r3, [r0, #0]
 8009fa6:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009faa:	eeb0 0a48 	vmov.f32	s0, s16
 8009fae:	eef0 0a68 	vmov.f32	s1, s17
 8009fb2:	b00b      	add	sp, #44	; 0x2c
 8009fb4:	ecbd 8b02 	vpop	{d8}
 8009fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fbc:	4642      	mov	r2, r8
 8009fbe:	464b      	mov	r3, r9
 8009fc0:	4640      	mov	r0, r8
 8009fc2:	4649      	mov	r1, r9
 8009fc4:	f7f6 fbf2 	bl	80007ac <__aeabi_ddiv>
 8009fc8:	2e02      	cmp	r6, #2
 8009fca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009fce:	d1e0      	bne.n	8009f92 <sqrt+0x62>
 8009fd0:	f7fd f86a 	bl	80070a8 <__errno>
 8009fd4:	2321      	movs	r3, #33	; 0x21
 8009fd6:	6003      	str	r3, [r0, #0]
 8009fd8:	e7df      	b.n	8009f9a <sqrt+0x6a>
 8009fda:	bf00      	nop
 8009fdc:	20000234 	.word	0x20000234
 8009fe0:	0800c0e1 	.word	0x0800c0e1
 8009fe4:	00000000 	.word	0x00000000

08009fe8 <__ieee754_asin>:
 8009fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	ec55 4b10 	vmov	r4, r5, d0
 8009ff0:	4bcb      	ldr	r3, [pc, #812]	; (800a320 <__ieee754_asin+0x338>)
 8009ff2:	b087      	sub	sp, #28
 8009ff4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8009ff8:	429f      	cmp	r7, r3
 8009ffa:	9501      	str	r5, [sp, #4]
 8009ffc:	dd31      	ble.n	800a062 <__ieee754_asin+0x7a>
 8009ffe:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800a002:	ee10 3a10 	vmov	r3, s0
 800a006:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800a00a:	433b      	orrs	r3, r7
 800a00c:	d117      	bne.n	800a03e <__ieee754_asin+0x56>
 800a00e:	a3aa      	add	r3, pc, #680	; (adr r3, 800a2b8 <__ieee754_asin+0x2d0>)
 800a010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a014:	ee10 0a10 	vmov	r0, s0
 800a018:	4629      	mov	r1, r5
 800a01a:	f7f6 fa9d 	bl	8000558 <__aeabi_dmul>
 800a01e:	a3a8      	add	r3, pc, #672	; (adr r3, 800a2c0 <__ieee754_asin+0x2d8>)
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	4606      	mov	r6, r0
 800a026:	460f      	mov	r7, r1
 800a028:	4620      	mov	r0, r4
 800a02a:	4629      	mov	r1, r5
 800a02c:	f7f6 fa94 	bl	8000558 <__aeabi_dmul>
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4630      	mov	r0, r6
 800a036:	4639      	mov	r1, r7
 800a038:	f7f6 f8d8 	bl	80001ec <__adddf3>
 800a03c:	e00a      	b.n	800a054 <__ieee754_asin+0x6c>
 800a03e:	ee10 2a10 	vmov	r2, s0
 800a042:	462b      	mov	r3, r5
 800a044:	4620      	mov	r0, r4
 800a046:	4629      	mov	r1, r5
 800a048:	f7f6 f8ce 	bl	80001e8 <__aeabi_dsub>
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	f7f6 fbac 	bl	80007ac <__aeabi_ddiv>
 800a054:	4604      	mov	r4, r0
 800a056:	460d      	mov	r5, r1
 800a058:	ec45 4b10 	vmov	d0, r4, r5
 800a05c:	b007      	add	sp, #28
 800a05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a062:	4bb0      	ldr	r3, [pc, #704]	; (800a324 <__ieee754_asin+0x33c>)
 800a064:	429f      	cmp	r7, r3
 800a066:	dc11      	bgt.n	800a08c <__ieee754_asin+0xa4>
 800a068:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800a06c:	f280 80ae 	bge.w	800a1cc <__ieee754_asin+0x1e4>
 800a070:	a395      	add	r3, pc, #596	; (adr r3, 800a2c8 <__ieee754_asin+0x2e0>)
 800a072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a076:	ee10 0a10 	vmov	r0, s0
 800a07a:	4629      	mov	r1, r5
 800a07c:	f7f6 f8b6 	bl	80001ec <__adddf3>
 800a080:	2200      	movs	r2, #0
 800a082:	4ba9      	ldr	r3, [pc, #676]	; (800a328 <__ieee754_asin+0x340>)
 800a084:	f7f6 ff22 	bl	8000ecc <__aeabi_dcmpgt>
 800a088:	2800      	cmp	r0, #0
 800a08a:	d1e5      	bne.n	800a058 <__ieee754_asin+0x70>
 800a08c:	ec45 4b10 	vmov	d0, r4, r5
 800a090:	f001 f9fa 	bl	800b488 <fabs>
 800a094:	2000      	movs	r0, #0
 800a096:	ec53 2b10 	vmov	r2, r3, d0
 800a09a:	49a3      	ldr	r1, [pc, #652]	; (800a328 <__ieee754_asin+0x340>)
 800a09c:	f7f6 f8a4 	bl	80001e8 <__aeabi_dsub>
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	4ba2      	ldr	r3, [pc, #648]	; (800a32c <__ieee754_asin+0x344>)
 800a0a4:	f7f6 fa58 	bl	8000558 <__aeabi_dmul>
 800a0a8:	a389      	add	r3, pc, #548	; (adr r3, 800a2d0 <__ieee754_asin+0x2e8>)
 800a0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ae:	4604      	mov	r4, r0
 800a0b0:	460d      	mov	r5, r1
 800a0b2:	f7f6 fa51 	bl	8000558 <__aeabi_dmul>
 800a0b6:	a388      	add	r3, pc, #544	; (adr r3, 800a2d8 <__ieee754_asin+0x2f0>)
 800a0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0bc:	f7f6 f896 	bl	80001ec <__adddf3>
 800a0c0:	4622      	mov	r2, r4
 800a0c2:	462b      	mov	r3, r5
 800a0c4:	f7f6 fa48 	bl	8000558 <__aeabi_dmul>
 800a0c8:	a385      	add	r3, pc, #532	; (adr r3, 800a2e0 <__ieee754_asin+0x2f8>)
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	f7f6 f88b 	bl	80001e8 <__aeabi_dsub>
 800a0d2:	4622      	mov	r2, r4
 800a0d4:	462b      	mov	r3, r5
 800a0d6:	f7f6 fa3f 	bl	8000558 <__aeabi_dmul>
 800a0da:	a383      	add	r3, pc, #524	; (adr r3, 800a2e8 <__ieee754_asin+0x300>)
 800a0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e0:	f7f6 f884 	bl	80001ec <__adddf3>
 800a0e4:	4622      	mov	r2, r4
 800a0e6:	462b      	mov	r3, r5
 800a0e8:	f7f6 fa36 	bl	8000558 <__aeabi_dmul>
 800a0ec:	a380      	add	r3, pc, #512	; (adr r3, 800a2f0 <__ieee754_asin+0x308>)
 800a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f2:	f7f6 f879 	bl	80001e8 <__aeabi_dsub>
 800a0f6:	4622      	mov	r2, r4
 800a0f8:	462b      	mov	r3, r5
 800a0fa:	f7f6 fa2d 	bl	8000558 <__aeabi_dmul>
 800a0fe:	a37e      	add	r3, pc, #504	; (adr r3, 800a2f8 <__ieee754_asin+0x310>)
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	f7f6 f872 	bl	80001ec <__adddf3>
 800a108:	4622      	mov	r2, r4
 800a10a:	462b      	mov	r3, r5
 800a10c:	f7f6 fa24 	bl	8000558 <__aeabi_dmul>
 800a110:	a37b      	add	r3, pc, #492	; (adr r3, 800a300 <__ieee754_asin+0x318>)
 800a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a116:	4680      	mov	r8, r0
 800a118:	4689      	mov	r9, r1
 800a11a:	4620      	mov	r0, r4
 800a11c:	4629      	mov	r1, r5
 800a11e:	f7f6 fa1b 	bl	8000558 <__aeabi_dmul>
 800a122:	a379      	add	r3, pc, #484	; (adr r3, 800a308 <__ieee754_asin+0x320>)
 800a124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a128:	f7f6 f85e 	bl	80001e8 <__aeabi_dsub>
 800a12c:	4622      	mov	r2, r4
 800a12e:	462b      	mov	r3, r5
 800a130:	f7f6 fa12 	bl	8000558 <__aeabi_dmul>
 800a134:	a376      	add	r3, pc, #472	; (adr r3, 800a310 <__ieee754_asin+0x328>)
 800a136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13a:	f7f6 f857 	bl	80001ec <__adddf3>
 800a13e:	4622      	mov	r2, r4
 800a140:	462b      	mov	r3, r5
 800a142:	f7f6 fa09 	bl	8000558 <__aeabi_dmul>
 800a146:	a374      	add	r3, pc, #464	; (adr r3, 800a318 <__ieee754_asin+0x330>)
 800a148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14c:	f7f6 f84c 	bl	80001e8 <__aeabi_dsub>
 800a150:	4622      	mov	r2, r4
 800a152:	462b      	mov	r3, r5
 800a154:	f7f6 fa00 	bl	8000558 <__aeabi_dmul>
 800a158:	4b73      	ldr	r3, [pc, #460]	; (800a328 <__ieee754_asin+0x340>)
 800a15a:	2200      	movs	r2, #0
 800a15c:	f7f6 f846 	bl	80001ec <__adddf3>
 800a160:	ec45 4b10 	vmov	d0, r4, r5
 800a164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a168:	f000 ff3c 	bl	800afe4 <__ieee754_sqrt>
 800a16c:	4b70      	ldr	r3, [pc, #448]	; (800a330 <__ieee754_asin+0x348>)
 800a16e:	429f      	cmp	r7, r3
 800a170:	ec5b ab10 	vmov	sl, fp, d0
 800a174:	f340 80de 	ble.w	800a334 <__ieee754_asin+0x34c>
 800a178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a17c:	4640      	mov	r0, r8
 800a17e:	4649      	mov	r1, r9
 800a180:	f7f6 fb14 	bl	80007ac <__aeabi_ddiv>
 800a184:	4652      	mov	r2, sl
 800a186:	465b      	mov	r3, fp
 800a188:	f7f6 f9e6 	bl	8000558 <__aeabi_dmul>
 800a18c:	4652      	mov	r2, sl
 800a18e:	465b      	mov	r3, fp
 800a190:	f7f6 f82c 	bl	80001ec <__adddf3>
 800a194:	4602      	mov	r2, r0
 800a196:	460b      	mov	r3, r1
 800a198:	f7f6 f828 	bl	80001ec <__adddf3>
 800a19c:	a348      	add	r3, pc, #288	; (adr r3, 800a2c0 <__ieee754_asin+0x2d8>)
 800a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a2:	f7f6 f821 	bl	80001e8 <__aeabi_dsub>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	a143      	add	r1, pc, #268	; (adr r1, 800a2b8 <__ieee754_asin+0x2d0>)
 800a1ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1b0:	f7f6 f81a 	bl	80001e8 <__aeabi_dsub>
 800a1b4:	9b01      	ldr	r3, [sp, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	bfdc      	itt	le
 800a1ba:	4602      	movle	r2, r0
 800a1bc:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800a1c0:	4604      	mov	r4, r0
 800a1c2:	460d      	mov	r5, r1
 800a1c4:	bfdc      	itt	le
 800a1c6:	4614      	movle	r4, r2
 800a1c8:	461d      	movle	r5, r3
 800a1ca:	e745      	b.n	800a058 <__ieee754_asin+0x70>
 800a1cc:	ee10 2a10 	vmov	r2, s0
 800a1d0:	ee10 0a10 	vmov	r0, s0
 800a1d4:	462b      	mov	r3, r5
 800a1d6:	4629      	mov	r1, r5
 800a1d8:	f7f6 f9be 	bl	8000558 <__aeabi_dmul>
 800a1dc:	a33c      	add	r3, pc, #240	; (adr r3, 800a2d0 <__ieee754_asin+0x2e8>)
 800a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e2:	4606      	mov	r6, r0
 800a1e4:	460f      	mov	r7, r1
 800a1e6:	f7f6 f9b7 	bl	8000558 <__aeabi_dmul>
 800a1ea:	a33b      	add	r3, pc, #236	; (adr r3, 800a2d8 <__ieee754_asin+0x2f0>)
 800a1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f0:	f7f5 fffc 	bl	80001ec <__adddf3>
 800a1f4:	4632      	mov	r2, r6
 800a1f6:	463b      	mov	r3, r7
 800a1f8:	f7f6 f9ae 	bl	8000558 <__aeabi_dmul>
 800a1fc:	a338      	add	r3, pc, #224	; (adr r3, 800a2e0 <__ieee754_asin+0x2f8>)
 800a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a202:	f7f5 fff1 	bl	80001e8 <__aeabi_dsub>
 800a206:	4632      	mov	r2, r6
 800a208:	463b      	mov	r3, r7
 800a20a:	f7f6 f9a5 	bl	8000558 <__aeabi_dmul>
 800a20e:	a336      	add	r3, pc, #216	; (adr r3, 800a2e8 <__ieee754_asin+0x300>)
 800a210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a214:	f7f5 ffea 	bl	80001ec <__adddf3>
 800a218:	4632      	mov	r2, r6
 800a21a:	463b      	mov	r3, r7
 800a21c:	f7f6 f99c 	bl	8000558 <__aeabi_dmul>
 800a220:	a333      	add	r3, pc, #204	; (adr r3, 800a2f0 <__ieee754_asin+0x308>)
 800a222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a226:	f7f5 ffdf 	bl	80001e8 <__aeabi_dsub>
 800a22a:	4632      	mov	r2, r6
 800a22c:	463b      	mov	r3, r7
 800a22e:	f7f6 f993 	bl	8000558 <__aeabi_dmul>
 800a232:	a331      	add	r3, pc, #196	; (adr r3, 800a2f8 <__ieee754_asin+0x310>)
 800a234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a238:	f7f5 ffd8 	bl	80001ec <__adddf3>
 800a23c:	4632      	mov	r2, r6
 800a23e:	463b      	mov	r3, r7
 800a240:	f7f6 f98a 	bl	8000558 <__aeabi_dmul>
 800a244:	a32e      	add	r3, pc, #184	; (adr r3, 800a300 <__ieee754_asin+0x318>)
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	4680      	mov	r8, r0
 800a24c:	4689      	mov	r9, r1
 800a24e:	4630      	mov	r0, r6
 800a250:	4639      	mov	r1, r7
 800a252:	f7f6 f981 	bl	8000558 <__aeabi_dmul>
 800a256:	a32c      	add	r3, pc, #176	; (adr r3, 800a308 <__ieee754_asin+0x320>)
 800a258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25c:	f7f5 ffc4 	bl	80001e8 <__aeabi_dsub>
 800a260:	4632      	mov	r2, r6
 800a262:	463b      	mov	r3, r7
 800a264:	f7f6 f978 	bl	8000558 <__aeabi_dmul>
 800a268:	a329      	add	r3, pc, #164	; (adr r3, 800a310 <__ieee754_asin+0x328>)
 800a26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26e:	f7f5 ffbd 	bl	80001ec <__adddf3>
 800a272:	4632      	mov	r2, r6
 800a274:	463b      	mov	r3, r7
 800a276:	f7f6 f96f 	bl	8000558 <__aeabi_dmul>
 800a27a:	a327      	add	r3, pc, #156	; (adr r3, 800a318 <__ieee754_asin+0x330>)
 800a27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a280:	f7f5 ffb2 	bl	80001e8 <__aeabi_dsub>
 800a284:	4632      	mov	r2, r6
 800a286:	463b      	mov	r3, r7
 800a288:	f7f6 f966 	bl	8000558 <__aeabi_dmul>
 800a28c:	2200      	movs	r2, #0
 800a28e:	4b26      	ldr	r3, [pc, #152]	; (800a328 <__ieee754_asin+0x340>)
 800a290:	f7f5 ffac 	bl	80001ec <__adddf3>
 800a294:	4602      	mov	r2, r0
 800a296:	460b      	mov	r3, r1
 800a298:	4640      	mov	r0, r8
 800a29a:	4649      	mov	r1, r9
 800a29c:	f7f6 fa86 	bl	80007ac <__aeabi_ddiv>
 800a2a0:	4622      	mov	r2, r4
 800a2a2:	462b      	mov	r3, r5
 800a2a4:	f7f6 f958 	bl	8000558 <__aeabi_dmul>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	4620      	mov	r0, r4
 800a2ae:	4629      	mov	r1, r5
 800a2b0:	e6c2      	b.n	800a038 <__ieee754_asin+0x50>
 800a2b2:	bf00      	nop
 800a2b4:	f3af 8000 	nop.w
 800a2b8:	54442d18 	.word	0x54442d18
 800a2bc:	3ff921fb 	.word	0x3ff921fb
 800a2c0:	33145c07 	.word	0x33145c07
 800a2c4:	3c91a626 	.word	0x3c91a626
 800a2c8:	8800759c 	.word	0x8800759c
 800a2cc:	7e37e43c 	.word	0x7e37e43c
 800a2d0:	0dfdf709 	.word	0x0dfdf709
 800a2d4:	3f023de1 	.word	0x3f023de1
 800a2d8:	7501b288 	.word	0x7501b288
 800a2dc:	3f49efe0 	.word	0x3f49efe0
 800a2e0:	b5688f3b 	.word	0xb5688f3b
 800a2e4:	3fa48228 	.word	0x3fa48228
 800a2e8:	0e884455 	.word	0x0e884455
 800a2ec:	3fc9c155 	.word	0x3fc9c155
 800a2f0:	03eb6f7d 	.word	0x03eb6f7d
 800a2f4:	3fd4d612 	.word	0x3fd4d612
 800a2f8:	55555555 	.word	0x55555555
 800a2fc:	3fc55555 	.word	0x3fc55555
 800a300:	b12e9282 	.word	0xb12e9282
 800a304:	3fb3b8c5 	.word	0x3fb3b8c5
 800a308:	1b8d0159 	.word	0x1b8d0159
 800a30c:	3fe6066c 	.word	0x3fe6066c
 800a310:	9c598ac8 	.word	0x9c598ac8
 800a314:	40002ae5 	.word	0x40002ae5
 800a318:	1c8a2d4b 	.word	0x1c8a2d4b
 800a31c:	40033a27 	.word	0x40033a27
 800a320:	3fefffff 	.word	0x3fefffff
 800a324:	3fdfffff 	.word	0x3fdfffff
 800a328:	3ff00000 	.word	0x3ff00000
 800a32c:	3fe00000 	.word	0x3fe00000
 800a330:	3fef3332 	.word	0x3fef3332
 800a334:	ee10 2a10 	vmov	r2, s0
 800a338:	ee10 0a10 	vmov	r0, s0
 800a33c:	465b      	mov	r3, fp
 800a33e:	4659      	mov	r1, fp
 800a340:	f7f5 ff54 	bl	80001ec <__adddf3>
 800a344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a348:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a34c:	4640      	mov	r0, r8
 800a34e:	4649      	mov	r1, r9
 800a350:	f7f6 fa2c 	bl	80007ac <__aeabi_ddiv>
 800a354:	4602      	mov	r2, r0
 800a356:	460b      	mov	r3, r1
 800a358:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a35c:	f7f6 f8fc 	bl	8000558 <__aeabi_dmul>
 800a360:	2600      	movs	r6, #0
 800a362:	4680      	mov	r8, r0
 800a364:	4689      	mov	r9, r1
 800a366:	4632      	mov	r2, r6
 800a368:	465b      	mov	r3, fp
 800a36a:	4630      	mov	r0, r6
 800a36c:	4659      	mov	r1, fp
 800a36e:	f7f6 f8f3 	bl	8000558 <__aeabi_dmul>
 800a372:	4602      	mov	r2, r0
 800a374:	460b      	mov	r3, r1
 800a376:	4620      	mov	r0, r4
 800a378:	4629      	mov	r1, r5
 800a37a:	f7f5 ff35 	bl	80001e8 <__aeabi_dsub>
 800a37e:	4632      	mov	r2, r6
 800a380:	4604      	mov	r4, r0
 800a382:	460d      	mov	r5, r1
 800a384:	465b      	mov	r3, fp
 800a386:	4650      	mov	r0, sl
 800a388:	4659      	mov	r1, fp
 800a38a:	f7f5 ff2f 	bl	80001ec <__adddf3>
 800a38e:	4602      	mov	r2, r0
 800a390:	460b      	mov	r3, r1
 800a392:	4620      	mov	r0, r4
 800a394:	4629      	mov	r1, r5
 800a396:	f7f6 fa09 	bl	80007ac <__aeabi_ddiv>
 800a39a:	4602      	mov	r2, r0
 800a39c:	460b      	mov	r3, r1
 800a39e:	f7f5 ff25 	bl	80001ec <__adddf3>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	a114      	add	r1, pc, #80	; (adr r1, 800a3f8 <__ieee754_asin+0x410>)
 800a3a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3ac:	f7f5 ff1c 	bl	80001e8 <__aeabi_dsub>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4640      	mov	r0, r8
 800a3b6:	4649      	mov	r1, r9
 800a3b8:	f7f5 ff16 	bl	80001e8 <__aeabi_dsub>
 800a3bc:	465f      	mov	r7, fp
 800a3be:	4604      	mov	r4, r0
 800a3c0:	460d      	mov	r5, r1
 800a3c2:	4632      	mov	r2, r6
 800a3c4:	465b      	mov	r3, fp
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	4639      	mov	r1, r7
 800a3ca:	f7f5 ff0f 	bl	80001ec <__adddf3>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	a10b      	add	r1, pc, #44	; (adr r1, 800a400 <__ieee754_asin+0x418>)
 800a3d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3d8:	f7f5 ff06 	bl	80001e8 <__aeabi_dsub>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	f7f5 ff00 	bl	80001e8 <__aeabi_dsub>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	a104      	add	r1, pc, #16	; (adr r1, 800a400 <__ieee754_asin+0x418>)
 800a3ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3f2:	e6dd      	b.n	800a1b0 <__ieee754_asin+0x1c8>
 800a3f4:	f3af 8000 	nop.w
 800a3f8:	33145c07 	.word	0x33145c07
 800a3fc:	3c91a626 	.word	0x3c91a626
 800a400:	54442d18 	.word	0x54442d18
 800a404:	3fe921fb 	.word	0x3fe921fb

0800a408 <__ieee754_atan2>:
 800a408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a40c:	ec57 6b11 	vmov	r6, r7, d1
 800a410:	4273      	negs	r3, r6
 800a412:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a416:	4333      	orrs	r3, r6
 800a418:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800a5c0 <__ieee754_atan2+0x1b8>
 800a41c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a420:	4573      	cmp	r3, lr
 800a422:	ec51 0b10 	vmov	r0, r1, d0
 800a426:	ee11 8a10 	vmov	r8, s2
 800a42a:	d80a      	bhi.n	800a442 <__ieee754_atan2+0x3a>
 800a42c:	4244      	negs	r4, r0
 800a42e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a432:	4304      	orrs	r4, r0
 800a434:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a438:	4574      	cmp	r4, lr
 800a43a:	468c      	mov	ip, r1
 800a43c:	ee10 9a10 	vmov	r9, s0
 800a440:	d907      	bls.n	800a452 <__ieee754_atan2+0x4a>
 800a442:	4632      	mov	r2, r6
 800a444:	463b      	mov	r3, r7
 800a446:	f7f5 fed1 	bl	80001ec <__adddf3>
 800a44a:	ec41 0b10 	vmov	d0, r0, r1
 800a44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a452:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a456:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a45a:	4334      	orrs	r4, r6
 800a45c:	d103      	bne.n	800a466 <__ieee754_atan2+0x5e>
 800a45e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a462:	f000 be71 	b.w	800b148 <atan>
 800a466:	17bc      	asrs	r4, r7, #30
 800a468:	f004 0402 	and.w	r4, r4, #2
 800a46c:	ea53 0909 	orrs.w	r9, r3, r9
 800a470:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a474:	d107      	bne.n	800a486 <__ieee754_atan2+0x7e>
 800a476:	2c02      	cmp	r4, #2
 800a478:	d073      	beq.n	800a562 <__ieee754_atan2+0x15a>
 800a47a:	2c03      	cmp	r4, #3
 800a47c:	d1e5      	bne.n	800a44a <__ieee754_atan2+0x42>
 800a47e:	a13e      	add	r1, pc, #248	; (adr r1, 800a578 <__ieee754_atan2+0x170>)
 800a480:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a484:	e7e1      	b.n	800a44a <__ieee754_atan2+0x42>
 800a486:	ea52 0808 	orrs.w	r8, r2, r8
 800a48a:	d106      	bne.n	800a49a <__ieee754_atan2+0x92>
 800a48c:	f1bc 0f00 	cmp.w	ip, #0
 800a490:	da6b      	bge.n	800a56a <__ieee754_atan2+0x162>
 800a492:	a13b      	add	r1, pc, #236	; (adr r1, 800a580 <__ieee754_atan2+0x178>)
 800a494:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a498:	e7d7      	b.n	800a44a <__ieee754_atan2+0x42>
 800a49a:	4572      	cmp	r2, lr
 800a49c:	d120      	bne.n	800a4e0 <__ieee754_atan2+0xd8>
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d111      	bne.n	800a4c6 <__ieee754_atan2+0xbe>
 800a4a2:	2c02      	cmp	r4, #2
 800a4a4:	d007      	beq.n	800a4b6 <__ieee754_atan2+0xae>
 800a4a6:	2c03      	cmp	r4, #3
 800a4a8:	d009      	beq.n	800a4be <__ieee754_atan2+0xb6>
 800a4aa:	2c01      	cmp	r4, #1
 800a4ac:	d155      	bne.n	800a55a <__ieee754_atan2+0x152>
 800a4ae:	a136      	add	r1, pc, #216	; (adr r1, 800a588 <__ieee754_atan2+0x180>)
 800a4b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4b4:	e7c9      	b.n	800a44a <__ieee754_atan2+0x42>
 800a4b6:	a136      	add	r1, pc, #216	; (adr r1, 800a590 <__ieee754_atan2+0x188>)
 800a4b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4bc:	e7c5      	b.n	800a44a <__ieee754_atan2+0x42>
 800a4be:	a136      	add	r1, pc, #216	; (adr r1, 800a598 <__ieee754_atan2+0x190>)
 800a4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4c4:	e7c1      	b.n	800a44a <__ieee754_atan2+0x42>
 800a4c6:	2c02      	cmp	r4, #2
 800a4c8:	d04b      	beq.n	800a562 <__ieee754_atan2+0x15a>
 800a4ca:	2c03      	cmp	r4, #3
 800a4cc:	d0d7      	beq.n	800a47e <__ieee754_atan2+0x76>
 800a4ce:	2c01      	cmp	r4, #1
 800a4d0:	f04f 0000 	mov.w	r0, #0
 800a4d4:	d102      	bne.n	800a4dc <__ieee754_atan2+0xd4>
 800a4d6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a4da:	e7b6      	b.n	800a44a <__ieee754_atan2+0x42>
 800a4dc:	2100      	movs	r1, #0
 800a4de:	e7b4      	b.n	800a44a <__ieee754_atan2+0x42>
 800a4e0:	4573      	cmp	r3, lr
 800a4e2:	d0d3      	beq.n	800a48c <__ieee754_atan2+0x84>
 800a4e4:	1a9b      	subs	r3, r3, r2
 800a4e6:	151b      	asrs	r3, r3, #20
 800a4e8:	2b3c      	cmp	r3, #60	; 0x3c
 800a4ea:	dc1e      	bgt.n	800a52a <__ieee754_atan2+0x122>
 800a4ec:	2f00      	cmp	r7, #0
 800a4ee:	da01      	bge.n	800a4f4 <__ieee754_atan2+0xec>
 800a4f0:	333c      	adds	r3, #60	; 0x3c
 800a4f2:	db1e      	blt.n	800a532 <__ieee754_atan2+0x12a>
 800a4f4:	4632      	mov	r2, r6
 800a4f6:	463b      	mov	r3, r7
 800a4f8:	f7f6 f958 	bl	80007ac <__aeabi_ddiv>
 800a4fc:	ec41 0b10 	vmov	d0, r0, r1
 800a500:	f000 ffc2 	bl	800b488 <fabs>
 800a504:	f000 fe20 	bl	800b148 <atan>
 800a508:	ec51 0b10 	vmov	r0, r1, d0
 800a50c:	2c01      	cmp	r4, #1
 800a50e:	d013      	beq.n	800a538 <__ieee754_atan2+0x130>
 800a510:	2c02      	cmp	r4, #2
 800a512:	d015      	beq.n	800a540 <__ieee754_atan2+0x138>
 800a514:	2c00      	cmp	r4, #0
 800a516:	d098      	beq.n	800a44a <__ieee754_atan2+0x42>
 800a518:	a321      	add	r3, pc, #132	; (adr r3, 800a5a0 <__ieee754_atan2+0x198>)
 800a51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51e:	f7f5 fe63 	bl	80001e8 <__aeabi_dsub>
 800a522:	a321      	add	r3, pc, #132	; (adr r3, 800a5a8 <__ieee754_atan2+0x1a0>)
 800a524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a528:	e014      	b.n	800a554 <__ieee754_atan2+0x14c>
 800a52a:	a121      	add	r1, pc, #132	; (adr r1, 800a5b0 <__ieee754_atan2+0x1a8>)
 800a52c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a530:	e7ec      	b.n	800a50c <__ieee754_atan2+0x104>
 800a532:	2000      	movs	r0, #0
 800a534:	2100      	movs	r1, #0
 800a536:	e7e9      	b.n	800a50c <__ieee754_atan2+0x104>
 800a538:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a53c:	4619      	mov	r1, r3
 800a53e:	e784      	b.n	800a44a <__ieee754_atan2+0x42>
 800a540:	a317      	add	r3, pc, #92	; (adr r3, 800a5a0 <__ieee754_atan2+0x198>)
 800a542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a546:	f7f5 fe4f 	bl	80001e8 <__aeabi_dsub>
 800a54a:	4602      	mov	r2, r0
 800a54c:	460b      	mov	r3, r1
 800a54e:	a116      	add	r1, pc, #88	; (adr r1, 800a5a8 <__ieee754_atan2+0x1a0>)
 800a550:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a554:	f7f5 fe48 	bl	80001e8 <__aeabi_dsub>
 800a558:	e777      	b.n	800a44a <__ieee754_atan2+0x42>
 800a55a:	a117      	add	r1, pc, #92	; (adr r1, 800a5b8 <__ieee754_atan2+0x1b0>)
 800a55c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a560:	e773      	b.n	800a44a <__ieee754_atan2+0x42>
 800a562:	a111      	add	r1, pc, #68	; (adr r1, 800a5a8 <__ieee754_atan2+0x1a0>)
 800a564:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a568:	e76f      	b.n	800a44a <__ieee754_atan2+0x42>
 800a56a:	a111      	add	r1, pc, #68	; (adr r1, 800a5b0 <__ieee754_atan2+0x1a8>)
 800a56c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a570:	e76b      	b.n	800a44a <__ieee754_atan2+0x42>
 800a572:	bf00      	nop
 800a574:	f3af 8000 	nop.w
 800a578:	54442d18 	.word	0x54442d18
 800a57c:	c00921fb 	.word	0xc00921fb
 800a580:	54442d18 	.word	0x54442d18
 800a584:	bff921fb 	.word	0xbff921fb
 800a588:	54442d18 	.word	0x54442d18
 800a58c:	bfe921fb 	.word	0xbfe921fb
 800a590:	7f3321d2 	.word	0x7f3321d2
 800a594:	4002d97c 	.word	0x4002d97c
 800a598:	7f3321d2 	.word	0x7f3321d2
 800a59c:	c002d97c 	.word	0xc002d97c
 800a5a0:	33145c07 	.word	0x33145c07
 800a5a4:	3ca1a626 	.word	0x3ca1a626
 800a5a8:	54442d18 	.word	0x54442d18
 800a5ac:	400921fb 	.word	0x400921fb
 800a5b0:	54442d18 	.word	0x54442d18
 800a5b4:	3ff921fb 	.word	0x3ff921fb
 800a5b8:	54442d18 	.word	0x54442d18
 800a5bc:	3fe921fb 	.word	0x3fe921fb
 800a5c0:	7ff00000 	.word	0x7ff00000
 800a5c4:	00000000 	.word	0x00000000

0800a5c8 <__ieee754_pow>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	b091      	sub	sp, #68	; 0x44
 800a5ce:	ed8d 1b00 	vstr	d1, [sp]
 800a5d2:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a5d6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a5da:	ea58 0302 	orrs.w	r3, r8, r2
 800a5de:	ec57 6b10 	vmov	r6, r7, d0
 800a5e2:	f000 84be 	beq.w	800af62 <__ieee754_pow+0x99a>
 800a5e6:	4b7a      	ldr	r3, [pc, #488]	; (800a7d0 <__ieee754_pow+0x208>)
 800a5e8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a5ec:	429c      	cmp	r4, r3
 800a5ee:	463d      	mov	r5, r7
 800a5f0:	ee10 aa10 	vmov	sl, s0
 800a5f4:	dc09      	bgt.n	800a60a <__ieee754_pow+0x42>
 800a5f6:	d103      	bne.n	800a600 <__ieee754_pow+0x38>
 800a5f8:	b93e      	cbnz	r6, 800a60a <__ieee754_pow+0x42>
 800a5fa:	45a0      	cmp	r8, r4
 800a5fc:	dc0d      	bgt.n	800a61a <__ieee754_pow+0x52>
 800a5fe:	e001      	b.n	800a604 <__ieee754_pow+0x3c>
 800a600:	4598      	cmp	r8, r3
 800a602:	dc02      	bgt.n	800a60a <__ieee754_pow+0x42>
 800a604:	4598      	cmp	r8, r3
 800a606:	d10e      	bne.n	800a626 <__ieee754_pow+0x5e>
 800a608:	b16a      	cbz	r2, 800a626 <__ieee754_pow+0x5e>
 800a60a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a60e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a612:	ea54 030a 	orrs.w	r3, r4, sl
 800a616:	f000 84a4 	beq.w	800af62 <__ieee754_pow+0x99a>
 800a61a:	486e      	ldr	r0, [pc, #440]	; (800a7d4 <__ieee754_pow+0x20c>)
 800a61c:	b011      	add	sp, #68	; 0x44
 800a61e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a622:	f000 bf45 	b.w	800b4b0 <nan>
 800a626:	2d00      	cmp	r5, #0
 800a628:	da53      	bge.n	800a6d2 <__ieee754_pow+0x10a>
 800a62a:	4b6b      	ldr	r3, [pc, #428]	; (800a7d8 <__ieee754_pow+0x210>)
 800a62c:	4598      	cmp	r8, r3
 800a62e:	dc4d      	bgt.n	800a6cc <__ieee754_pow+0x104>
 800a630:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a634:	4598      	cmp	r8, r3
 800a636:	dd4c      	ble.n	800a6d2 <__ieee754_pow+0x10a>
 800a638:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a63c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a640:	2b14      	cmp	r3, #20
 800a642:	dd26      	ble.n	800a692 <__ieee754_pow+0xca>
 800a644:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a648:	fa22 f103 	lsr.w	r1, r2, r3
 800a64c:	fa01 f303 	lsl.w	r3, r1, r3
 800a650:	4293      	cmp	r3, r2
 800a652:	d13e      	bne.n	800a6d2 <__ieee754_pow+0x10a>
 800a654:	f001 0101 	and.w	r1, r1, #1
 800a658:	f1c1 0b02 	rsb	fp, r1, #2
 800a65c:	2a00      	cmp	r2, #0
 800a65e:	d15b      	bne.n	800a718 <__ieee754_pow+0x150>
 800a660:	4b5b      	ldr	r3, [pc, #364]	; (800a7d0 <__ieee754_pow+0x208>)
 800a662:	4598      	cmp	r8, r3
 800a664:	d124      	bne.n	800a6b0 <__ieee754_pow+0xe8>
 800a666:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a66a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a66e:	ea53 030a 	orrs.w	r3, r3, sl
 800a672:	f000 8476 	beq.w	800af62 <__ieee754_pow+0x99a>
 800a676:	4b59      	ldr	r3, [pc, #356]	; (800a7dc <__ieee754_pow+0x214>)
 800a678:	429c      	cmp	r4, r3
 800a67a:	dd2d      	ble.n	800a6d8 <__ieee754_pow+0x110>
 800a67c:	f1b9 0f00 	cmp.w	r9, #0
 800a680:	f280 8473 	bge.w	800af6a <__ieee754_pow+0x9a2>
 800a684:	2000      	movs	r0, #0
 800a686:	2100      	movs	r1, #0
 800a688:	ec41 0b10 	vmov	d0, r0, r1
 800a68c:	b011      	add	sp, #68	; 0x44
 800a68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a692:	2a00      	cmp	r2, #0
 800a694:	d13e      	bne.n	800a714 <__ieee754_pow+0x14c>
 800a696:	f1c3 0314 	rsb	r3, r3, #20
 800a69a:	fa48 f103 	asr.w	r1, r8, r3
 800a69e:	fa01 f303 	lsl.w	r3, r1, r3
 800a6a2:	4543      	cmp	r3, r8
 800a6a4:	f040 8469 	bne.w	800af7a <__ieee754_pow+0x9b2>
 800a6a8:	f001 0101 	and.w	r1, r1, #1
 800a6ac:	f1c1 0b02 	rsb	fp, r1, #2
 800a6b0:	4b4b      	ldr	r3, [pc, #300]	; (800a7e0 <__ieee754_pow+0x218>)
 800a6b2:	4598      	cmp	r8, r3
 800a6b4:	d118      	bne.n	800a6e8 <__ieee754_pow+0x120>
 800a6b6:	f1b9 0f00 	cmp.w	r9, #0
 800a6ba:	f280 845a 	bge.w	800af72 <__ieee754_pow+0x9aa>
 800a6be:	4948      	ldr	r1, [pc, #288]	; (800a7e0 <__ieee754_pow+0x218>)
 800a6c0:	4632      	mov	r2, r6
 800a6c2:	463b      	mov	r3, r7
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	f7f6 f871 	bl	80007ac <__aeabi_ddiv>
 800a6ca:	e7dd      	b.n	800a688 <__ieee754_pow+0xc0>
 800a6cc:	f04f 0b02 	mov.w	fp, #2
 800a6d0:	e7c4      	b.n	800a65c <__ieee754_pow+0x94>
 800a6d2:	f04f 0b00 	mov.w	fp, #0
 800a6d6:	e7c1      	b.n	800a65c <__ieee754_pow+0x94>
 800a6d8:	f1b9 0f00 	cmp.w	r9, #0
 800a6dc:	dad2      	bge.n	800a684 <__ieee754_pow+0xbc>
 800a6de:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a6e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a6e6:	e7cf      	b.n	800a688 <__ieee754_pow+0xc0>
 800a6e8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a6ec:	d106      	bne.n	800a6fc <__ieee754_pow+0x134>
 800a6ee:	4632      	mov	r2, r6
 800a6f0:	463b      	mov	r3, r7
 800a6f2:	4610      	mov	r0, r2
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	f7f5 ff2f 	bl	8000558 <__aeabi_dmul>
 800a6fa:	e7c5      	b.n	800a688 <__ieee754_pow+0xc0>
 800a6fc:	4b39      	ldr	r3, [pc, #228]	; (800a7e4 <__ieee754_pow+0x21c>)
 800a6fe:	4599      	cmp	r9, r3
 800a700:	d10a      	bne.n	800a718 <__ieee754_pow+0x150>
 800a702:	2d00      	cmp	r5, #0
 800a704:	db08      	blt.n	800a718 <__ieee754_pow+0x150>
 800a706:	ec47 6b10 	vmov	d0, r6, r7
 800a70a:	b011      	add	sp, #68	; 0x44
 800a70c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a710:	f000 bc68 	b.w	800afe4 <__ieee754_sqrt>
 800a714:	f04f 0b00 	mov.w	fp, #0
 800a718:	ec47 6b10 	vmov	d0, r6, r7
 800a71c:	f000 feb4 	bl	800b488 <fabs>
 800a720:	ec51 0b10 	vmov	r0, r1, d0
 800a724:	f1ba 0f00 	cmp.w	sl, #0
 800a728:	d127      	bne.n	800a77a <__ieee754_pow+0x1b2>
 800a72a:	b124      	cbz	r4, 800a736 <__ieee754_pow+0x16e>
 800a72c:	4b2c      	ldr	r3, [pc, #176]	; (800a7e0 <__ieee754_pow+0x218>)
 800a72e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a732:	429a      	cmp	r2, r3
 800a734:	d121      	bne.n	800a77a <__ieee754_pow+0x1b2>
 800a736:	f1b9 0f00 	cmp.w	r9, #0
 800a73a:	da05      	bge.n	800a748 <__ieee754_pow+0x180>
 800a73c:	4602      	mov	r2, r0
 800a73e:	460b      	mov	r3, r1
 800a740:	2000      	movs	r0, #0
 800a742:	4927      	ldr	r1, [pc, #156]	; (800a7e0 <__ieee754_pow+0x218>)
 800a744:	f7f6 f832 	bl	80007ac <__aeabi_ddiv>
 800a748:	2d00      	cmp	r5, #0
 800a74a:	da9d      	bge.n	800a688 <__ieee754_pow+0xc0>
 800a74c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a750:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a754:	ea54 030b 	orrs.w	r3, r4, fp
 800a758:	d108      	bne.n	800a76c <__ieee754_pow+0x1a4>
 800a75a:	4602      	mov	r2, r0
 800a75c:	460b      	mov	r3, r1
 800a75e:	4610      	mov	r0, r2
 800a760:	4619      	mov	r1, r3
 800a762:	f7f5 fd41 	bl	80001e8 <__aeabi_dsub>
 800a766:	4602      	mov	r2, r0
 800a768:	460b      	mov	r3, r1
 800a76a:	e7ac      	b.n	800a6c6 <__ieee754_pow+0xfe>
 800a76c:	f1bb 0f01 	cmp.w	fp, #1
 800a770:	d18a      	bne.n	800a688 <__ieee754_pow+0xc0>
 800a772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a776:	4619      	mov	r1, r3
 800a778:	e786      	b.n	800a688 <__ieee754_pow+0xc0>
 800a77a:	0fed      	lsrs	r5, r5, #31
 800a77c:	1e6b      	subs	r3, r5, #1
 800a77e:	930d      	str	r3, [sp, #52]	; 0x34
 800a780:	ea5b 0303 	orrs.w	r3, fp, r3
 800a784:	d102      	bne.n	800a78c <__ieee754_pow+0x1c4>
 800a786:	4632      	mov	r2, r6
 800a788:	463b      	mov	r3, r7
 800a78a:	e7e8      	b.n	800a75e <__ieee754_pow+0x196>
 800a78c:	4b16      	ldr	r3, [pc, #88]	; (800a7e8 <__ieee754_pow+0x220>)
 800a78e:	4598      	cmp	r8, r3
 800a790:	f340 80fe 	ble.w	800a990 <__ieee754_pow+0x3c8>
 800a794:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a798:	4598      	cmp	r8, r3
 800a79a:	dd0a      	ble.n	800a7b2 <__ieee754_pow+0x1ea>
 800a79c:	4b0f      	ldr	r3, [pc, #60]	; (800a7dc <__ieee754_pow+0x214>)
 800a79e:	429c      	cmp	r4, r3
 800a7a0:	dc0d      	bgt.n	800a7be <__ieee754_pow+0x1f6>
 800a7a2:	f1b9 0f00 	cmp.w	r9, #0
 800a7a6:	f6bf af6d 	bge.w	800a684 <__ieee754_pow+0xbc>
 800a7aa:	a307      	add	r3, pc, #28	; (adr r3, 800a7c8 <__ieee754_pow+0x200>)
 800a7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b0:	e79f      	b.n	800a6f2 <__ieee754_pow+0x12a>
 800a7b2:	4b0e      	ldr	r3, [pc, #56]	; (800a7ec <__ieee754_pow+0x224>)
 800a7b4:	429c      	cmp	r4, r3
 800a7b6:	ddf4      	ble.n	800a7a2 <__ieee754_pow+0x1da>
 800a7b8:	4b09      	ldr	r3, [pc, #36]	; (800a7e0 <__ieee754_pow+0x218>)
 800a7ba:	429c      	cmp	r4, r3
 800a7bc:	dd18      	ble.n	800a7f0 <__ieee754_pow+0x228>
 800a7be:	f1b9 0f00 	cmp.w	r9, #0
 800a7c2:	dcf2      	bgt.n	800a7aa <__ieee754_pow+0x1e2>
 800a7c4:	e75e      	b.n	800a684 <__ieee754_pow+0xbc>
 800a7c6:	bf00      	nop
 800a7c8:	8800759c 	.word	0x8800759c
 800a7cc:	7e37e43c 	.word	0x7e37e43c
 800a7d0:	7ff00000 	.word	0x7ff00000
 800a7d4:	0800bfc1 	.word	0x0800bfc1
 800a7d8:	433fffff 	.word	0x433fffff
 800a7dc:	3fefffff 	.word	0x3fefffff
 800a7e0:	3ff00000 	.word	0x3ff00000
 800a7e4:	3fe00000 	.word	0x3fe00000
 800a7e8:	41e00000 	.word	0x41e00000
 800a7ec:	3feffffe 	.word	0x3feffffe
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	4b63      	ldr	r3, [pc, #396]	; (800a980 <__ieee754_pow+0x3b8>)
 800a7f4:	f7f5 fcf8 	bl	80001e8 <__aeabi_dsub>
 800a7f8:	a355      	add	r3, pc, #340	; (adr r3, 800a950 <__ieee754_pow+0x388>)
 800a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fe:	4604      	mov	r4, r0
 800a800:	460d      	mov	r5, r1
 800a802:	f7f5 fea9 	bl	8000558 <__aeabi_dmul>
 800a806:	a354      	add	r3, pc, #336	; (adr r3, 800a958 <__ieee754_pow+0x390>)
 800a808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80c:	4606      	mov	r6, r0
 800a80e:	460f      	mov	r7, r1
 800a810:	4620      	mov	r0, r4
 800a812:	4629      	mov	r1, r5
 800a814:	f7f5 fea0 	bl	8000558 <__aeabi_dmul>
 800a818:	2200      	movs	r2, #0
 800a81a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a81e:	4b59      	ldr	r3, [pc, #356]	; (800a984 <__ieee754_pow+0x3bc>)
 800a820:	4620      	mov	r0, r4
 800a822:	4629      	mov	r1, r5
 800a824:	f7f5 fe98 	bl	8000558 <__aeabi_dmul>
 800a828:	4602      	mov	r2, r0
 800a82a:	460b      	mov	r3, r1
 800a82c:	a14c      	add	r1, pc, #304	; (adr r1, 800a960 <__ieee754_pow+0x398>)
 800a82e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a832:	f7f5 fcd9 	bl	80001e8 <__aeabi_dsub>
 800a836:	4622      	mov	r2, r4
 800a838:	462b      	mov	r3, r5
 800a83a:	f7f5 fe8d 	bl	8000558 <__aeabi_dmul>
 800a83e:	4602      	mov	r2, r0
 800a840:	460b      	mov	r3, r1
 800a842:	2000      	movs	r0, #0
 800a844:	4950      	ldr	r1, [pc, #320]	; (800a988 <__ieee754_pow+0x3c0>)
 800a846:	f7f5 fccf 	bl	80001e8 <__aeabi_dsub>
 800a84a:	4622      	mov	r2, r4
 800a84c:	462b      	mov	r3, r5
 800a84e:	4680      	mov	r8, r0
 800a850:	4689      	mov	r9, r1
 800a852:	4620      	mov	r0, r4
 800a854:	4629      	mov	r1, r5
 800a856:	f7f5 fe7f 	bl	8000558 <__aeabi_dmul>
 800a85a:	4602      	mov	r2, r0
 800a85c:	460b      	mov	r3, r1
 800a85e:	4640      	mov	r0, r8
 800a860:	4649      	mov	r1, r9
 800a862:	f7f5 fe79 	bl	8000558 <__aeabi_dmul>
 800a866:	a340      	add	r3, pc, #256	; (adr r3, 800a968 <__ieee754_pow+0x3a0>)
 800a868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86c:	f7f5 fe74 	bl	8000558 <__aeabi_dmul>
 800a870:	4602      	mov	r2, r0
 800a872:	460b      	mov	r3, r1
 800a874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a878:	f7f5 fcb6 	bl	80001e8 <__aeabi_dsub>
 800a87c:	4602      	mov	r2, r0
 800a87e:	460b      	mov	r3, r1
 800a880:	4604      	mov	r4, r0
 800a882:	460d      	mov	r5, r1
 800a884:	4630      	mov	r0, r6
 800a886:	4639      	mov	r1, r7
 800a888:	f7f5 fcb0 	bl	80001ec <__adddf3>
 800a88c:	2000      	movs	r0, #0
 800a88e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a892:	4632      	mov	r2, r6
 800a894:	463b      	mov	r3, r7
 800a896:	f7f5 fca7 	bl	80001e8 <__aeabi_dsub>
 800a89a:	4602      	mov	r2, r0
 800a89c:	460b      	mov	r3, r1
 800a89e:	4620      	mov	r0, r4
 800a8a0:	4629      	mov	r1, r5
 800a8a2:	f7f5 fca1 	bl	80001e8 <__aeabi_dsub>
 800a8a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8a8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	460f      	mov	r7, r1
 800a8b2:	f040 81eb 	bne.w	800ac8c <__ieee754_pow+0x6c4>
 800a8b6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a970 <__ieee754_pow+0x3a8>
 800a8ba:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a8be:	2400      	movs	r4, #0
 800a8c0:	4622      	mov	r2, r4
 800a8c2:	462b      	mov	r3, r5
 800a8c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a8cc:	f7f5 fc8c 	bl	80001e8 <__aeabi_dsub>
 800a8d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8d4:	f7f5 fe40 	bl	8000558 <__aeabi_dmul>
 800a8d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8dc:	4680      	mov	r8, r0
 800a8de:	4689      	mov	r9, r1
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	4639      	mov	r1, r7
 800a8e4:	f7f5 fe38 	bl	8000558 <__aeabi_dmul>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	4640      	mov	r0, r8
 800a8ee:	4649      	mov	r1, r9
 800a8f0:	f7f5 fc7c 	bl	80001ec <__adddf3>
 800a8f4:	4622      	mov	r2, r4
 800a8f6:	462b      	mov	r3, r5
 800a8f8:	4680      	mov	r8, r0
 800a8fa:	4689      	mov	r9, r1
 800a8fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a900:	f7f5 fe2a 	bl	8000558 <__aeabi_dmul>
 800a904:	460b      	mov	r3, r1
 800a906:	4604      	mov	r4, r0
 800a908:	460d      	mov	r5, r1
 800a90a:	4602      	mov	r2, r0
 800a90c:	4649      	mov	r1, r9
 800a90e:	4640      	mov	r0, r8
 800a910:	e9cd 4500 	strd	r4, r5, [sp]
 800a914:	f7f5 fc6a 	bl	80001ec <__adddf3>
 800a918:	4b1c      	ldr	r3, [pc, #112]	; (800a98c <__ieee754_pow+0x3c4>)
 800a91a:	4299      	cmp	r1, r3
 800a91c:	4606      	mov	r6, r0
 800a91e:	460f      	mov	r7, r1
 800a920:	468b      	mov	fp, r1
 800a922:	f340 82f7 	ble.w	800af14 <__ieee754_pow+0x94c>
 800a926:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a92a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a92e:	4303      	orrs	r3, r0
 800a930:	f000 81ea 	beq.w	800ad08 <__ieee754_pow+0x740>
 800a934:	a310      	add	r3, pc, #64	; (adr r3, 800a978 <__ieee754_pow+0x3b0>)
 800a936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a93e:	f7f5 fe0b 	bl	8000558 <__aeabi_dmul>
 800a942:	a30d      	add	r3, pc, #52	; (adr r3, 800a978 <__ieee754_pow+0x3b0>)
 800a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a948:	e6d5      	b.n	800a6f6 <__ieee754_pow+0x12e>
 800a94a:	bf00      	nop
 800a94c:	f3af 8000 	nop.w
 800a950:	60000000 	.word	0x60000000
 800a954:	3ff71547 	.word	0x3ff71547
 800a958:	f85ddf44 	.word	0xf85ddf44
 800a95c:	3e54ae0b 	.word	0x3e54ae0b
 800a960:	55555555 	.word	0x55555555
 800a964:	3fd55555 	.word	0x3fd55555
 800a968:	652b82fe 	.word	0x652b82fe
 800a96c:	3ff71547 	.word	0x3ff71547
 800a970:	00000000 	.word	0x00000000
 800a974:	bff00000 	.word	0xbff00000
 800a978:	8800759c 	.word	0x8800759c
 800a97c:	7e37e43c 	.word	0x7e37e43c
 800a980:	3ff00000 	.word	0x3ff00000
 800a984:	3fd00000 	.word	0x3fd00000
 800a988:	3fe00000 	.word	0x3fe00000
 800a98c:	408fffff 	.word	0x408fffff
 800a990:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a994:	f04f 0200 	mov.w	r2, #0
 800a998:	da05      	bge.n	800a9a6 <__ieee754_pow+0x3de>
 800a99a:	4bd3      	ldr	r3, [pc, #844]	; (800ace8 <__ieee754_pow+0x720>)
 800a99c:	f7f5 fddc 	bl	8000558 <__aeabi_dmul>
 800a9a0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a9a4:	460c      	mov	r4, r1
 800a9a6:	1523      	asrs	r3, r4, #20
 800a9a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a9ac:	4413      	add	r3, r2
 800a9ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a9b0:	4bce      	ldr	r3, [pc, #824]	; (800acec <__ieee754_pow+0x724>)
 800a9b2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a9b6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a9ba:	429c      	cmp	r4, r3
 800a9bc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a9c0:	dd08      	ble.n	800a9d4 <__ieee754_pow+0x40c>
 800a9c2:	4bcb      	ldr	r3, [pc, #812]	; (800acf0 <__ieee754_pow+0x728>)
 800a9c4:	429c      	cmp	r4, r3
 800a9c6:	f340 815e 	ble.w	800ac86 <__ieee754_pow+0x6be>
 800a9ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a9d0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a9d4:	f04f 0a00 	mov.w	sl, #0
 800a9d8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a9dc:	930c      	str	r3, [sp, #48]	; 0x30
 800a9de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9e0:	4bc4      	ldr	r3, [pc, #784]	; (800acf4 <__ieee754_pow+0x72c>)
 800a9e2:	4413      	add	r3, r2
 800a9e4:	ed93 7b00 	vldr	d7, [r3]
 800a9e8:	4629      	mov	r1, r5
 800a9ea:	ec53 2b17 	vmov	r2, r3, d7
 800a9ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a9f6:	f7f5 fbf7 	bl	80001e8 <__aeabi_dsub>
 800a9fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a9fe:	4606      	mov	r6, r0
 800aa00:	460f      	mov	r7, r1
 800aa02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa06:	f7f5 fbf1 	bl	80001ec <__adddf3>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	2000      	movs	r0, #0
 800aa10:	49b9      	ldr	r1, [pc, #740]	; (800acf8 <__ieee754_pow+0x730>)
 800aa12:	f7f5 fecb 	bl	80007ac <__aeabi_ddiv>
 800aa16:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	4630      	mov	r0, r6
 800aa20:	4639      	mov	r1, r7
 800aa22:	f7f5 fd99 	bl	8000558 <__aeabi_dmul>
 800aa26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa2a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800aa2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800aa32:	2300      	movs	r3, #0
 800aa34:	9302      	str	r3, [sp, #8]
 800aa36:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aa3a:	106d      	asrs	r5, r5, #1
 800aa3c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800aa40:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800aa44:	2200      	movs	r2, #0
 800aa46:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800aa4a:	4640      	mov	r0, r8
 800aa4c:	4649      	mov	r1, r9
 800aa4e:	4614      	mov	r4, r2
 800aa50:	461d      	mov	r5, r3
 800aa52:	f7f5 fd81 	bl	8000558 <__aeabi_dmul>
 800aa56:	4602      	mov	r2, r0
 800aa58:	460b      	mov	r3, r1
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	4639      	mov	r1, r7
 800aa5e:	f7f5 fbc3 	bl	80001e8 <__aeabi_dsub>
 800aa62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa66:	4606      	mov	r6, r0
 800aa68:	460f      	mov	r7, r1
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	f7f5 fbbb 	bl	80001e8 <__aeabi_dsub>
 800aa72:	4602      	mov	r2, r0
 800aa74:	460b      	mov	r3, r1
 800aa76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa7a:	f7f5 fbb5 	bl	80001e8 <__aeabi_dsub>
 800aa7e:	4642      	mov	r2, r8
 800aa80:	464b      	mov	r3, r9
 800aa82:	f7f5 fd69 	bl	8000558 <__aeabi_dmul>
 800aa86:	4602      	mov	r2, r0
 800aa88:	460b      	mov	r3, r1
 800aa8a:	4630      	mov	r0, r6
 800aa8c:	4639      	mov	r1, r7
 800aa8e:	f7f5 fbab 	bl	80001e8 <__aeabi_dsub>
 800aa92:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800aa96:	f7f5 fd5f 	bl	8000558 <__aeabi_dmul>
 800aa9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aaa2:	4610      	mov	r0, r2
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	f7f5 fd57 	bl	8000558 <__aeabi_dmul>
 800aaaa:	a37b      	add	r3, pc, #492	; (adr r3, 800ac98 <__ieee754_pow+0x6d0>)
 800aaac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab0:	4604      	mov	r4, r0
 800aab2:	460d      	mov	r5, r1
 800aab4:	f7f5 fd50 	bl	8000558 <__aeabi_dmul>
 800aab8:	a379      	add	r3, pc, #484	; (adr r3, 800aca0 <__ieee754_pow+0x6d8>)
 800aaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabe:	f7f5 fb95 	bl	80001ec <__adddf3>
 800aac2:	4622      	mov	r2, r4
 800aac4:	462b      	mov	r3, r5
 800aac6:	f7f5 fd47 	bl	8000558 <__aeabi_dmul>
 800aaca:	a377      	add	r3, pc, #476	; (adr r3, 800aca8 <__ieee754_pow+0x6e0>)
 800aacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad0:	f7f5 fb8c 	bl	80001ec <__adddf3>
 800aad4:	4622      	mov	r2, r4
 800aad6:	462b      	mov	r3, r5
 800aad8:	f7f5 fd3e 	bl	8000558 <__aeabi_dmul>
 800aadc:	a374      	add	r3, pc, #464	; (adr r3, 800acb0 <__ieee754_pow+0x6e8>)
 800aade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae2:	f7f5 fb83 	bl	80001ec <__adddf3>
 800aae6:	4622      	mov	r2, r4
 800aae8:	462b      	mov	r3, r5
 800aaea:	f7f5 fd35 	bl	8000558 <__aeabi_dmul>
 800aaee:	a372      	add	r3, pc, #456	; (adr r3, 800acb8 <__ieee754_pow+0x6f0>)
 800aaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf4:	f7f5 fb7a 	bl	80001ec <__adddf3>
 800aaf8:	4622      	mov	r2, r4
 800aafa:	462b      	mov	r3, r5
 800aafc:	f7f5 fd2c 	bl	8000558 <__aeabi_dmul>
 800ab00:	a36f      	add	r3, pc, #444	; (adr r3, 800acc0 <__ieee754_pow+0x6f8>)
 800ab02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab06:	f7f5 fb71 	bl	80001ec <__adddf3>
 800ab0a:	4622      	mov	r2, r4
 800ab0c:	4606      	mov	r6, r0
 800ab0e:	460f      	mov	r7, r1
 800ab10:	462b      	mov	r3, r5
 800ab12:	4620      	mov	r0, r4
 800ab14:	4629      	mov	r1, r5
 800ab16:	f7f5 fd1f 	bl	8000558 <__aeabi_dmul>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	4630      	mov	r0, r6
 800ab20:	4639      	mov	r1, r7
 800ab22:	f7f5 fd19 	bl	8000558 <__aeabi_dmul>
 800ab26:	4642      	mov	r2, r8
 800ab28:	4604      	mov	r4, r0
 800ab2a:	460d      	mov	r5, r1
 800ab2c:	464b      	mov	r3, r9
 800ab2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab32:	f7f5 fb5b 	bl	80001ec <__adddf3>
 800ab36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab3a:	f7f5 fd0d 	bl	8000558 <__aeabi_dmul>
 800ab3e:	4622      	mov	r2, r4
 800ab40:	462b      	mov	r3, r5
 800ab42:	f7f5 fb53 	bl	80001ec <__adddf3>
 800ab46:	4642      	mov	r2, r8
 800ab48:	4606      	mov	r6, r0
 800ab4a:	460f      	mov	r7, r1
 800ab4c:	464b      	mov	r3, r9
 800ab4e:	4640      	mov	r0, r8
 800ab50:	4649      	mov	r1, r9
 800ab52:	f7f5 fd01 	bl	8000558 <__aeabi_dmul>
 800ab56:	2200      	movs	r2, #0
 800ab58:	4b68      	ldr	r3, [pc, #416]	; (800acfc <__ieee754_pow+0x734>)
 800ab5a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ab5e:	f7f5 fb45 	bl	80001ec <__adddf3>
 800ab62:	4632      	mov	r2, r6
 800ab64:	463b      	mov	r3, r7
 800ab66:	f7f5 fb41 	bl	80001ec <__adddf3>
 800ab6a:	9802      	ldr	r0, [sp, #8]
 800ab6c:	460d      	mov	r5, r1
 800ab6e:	4604      	mov	r4, r0
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	4640      	mov	r0, r8
 800ab76:	4649      	mov	r1, r9
 800ab78:	f7f5 fcee 	bl	8000558 <__aeabi_dmul>
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	4680      	mov	r8, r0
 800ab80:	4689      	mov	r9, r1
 800ab82:	4b5e      	ldr	r3, [pc, #376]	; (800acfc <__ieee754_pow+0x734>)
 800ab84:	4620      	mov	r0, r4
 800ab86:	4629      	mov	r1, r5
 800ab88:	f7f5 fb2e 	bl	80001e8 <__aeabi_dsub>
 800ab8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ab90:	f7f5 fb2a 	bl	80001e8 <__aeabi_dsub>
 800ab94:	4602      	mov	r2, r0
 800ab96:	460b      	mov	r3, r1
 800ab98:	4630      	mov	r0, r6
 800ab9a:	4639      	mov	r1, r7
 800ab9c:	f7f5 fb24 	bl	80001e8 <__aeabi_dsub>
 800aba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aba4:	f7f5 fcd8 	bl	8000558 <__aeabi_dmul>
 800aba8:	4622      	mov	r2, r4
 800abaa:	4606      	mov	r6, r0
 800abac:	460f      	mov	r7, r1
 800abae:	462b      	mov	r3, r5
 800abb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abb4:	f7f5 fcd0 	bl	8000558 <__aeabi_dmul>
 800abb8:	4602      	mov	r2, r0
 800abba:	460b      	mov	r3, r1
 800abbc:	4630      	mov	r0, r6
 800abbe:	4639      	mov	r1, r7
 800abc0:	f7f5 fb14 	bl	80001ec <__adddf3>
 800abc4:	4606      	mov	r6, r0
 800abc6:	460f      	mov	r7, r1
 800abc8:	4602      	mov	r2, r0
 800abca:	460b      	mov	r3, r1
 800abcc:	4640      	mov	r0, r8
 800abce:	4649      	mov	r1, r9
 800abd0:	f7f5 fb0c 	bl	80001ec <__adddf3>
 800abd4:	9802      	ldr	r0, [sp, #8]
 800abd6:	a33c      	add	r3, pc, #240	; (adr r3, 800acc8 <__ieee754_pow+0x700>)
 800abd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abdc:	4604      	mov	r4, r0
 800abde:	460d      	mov	r5, r1
 800abe0:	f7f5 fcba 	bl	8000558 <__aeabi_dmul>
 800abe4:	4642      	mov	r2, r8
 800abe6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800abea:	464b      	mov	r3, r9
 800abec:	4620      	mov	r0, r4
 800abee:	4629      	mov	r1, r5
 800abf0:	f7f5 fafa 	bl	80001e8 <__aeabi_dsub>
 800abf4:	4602      	mov	r2, r0
 800abf6:	460b      	mov	r3, r1
 800abf8:	4630      	mov	r0, r6
 800abfa:	4639      	mov	r1, r7
 800abfc:	f7f5 faf4 	bl	80001e8 <__aeabi_dsub>
 800ac00:	a333      	add	r3, pc, #204	; (adr r3, 800acd0 <__ieee754_pow+0x708>)
 800ac02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac06:	f7f5 fca7 	bl	8000558 <__aeabi_dmul>
 800ac0a:	a333      	add	r3, pc, #204	; (adr r3, 800acd8 <__ieee754_pow+0x710>)
 800ac0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac10:	4606      	mov	r6, r0
 800ac12:	460f      	mov	r7, r1
 800ac14:	4620      	mov	r0, r4
 800ac16:	4629      	mov	r1, r5
 800ac18:	f7f5 fc9e 	bl	8000558 <__aeabi_dmul>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	460b      	mov	r3, r1
 800ac20:	4630      	mov	r0, r6
 800ac22:	4639      	mov	r1, r7
 800ac24:	f7f5 fae2 	bl	80001ec <__adddf3>
 800ac28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac2a:	4b35      	ldr	r3, [pc, #212]	; (800ad00 <__ieee754_pow+0x738>)
 800ac2c:	4413      	add	r3, r2
 800ac2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac32:	f7f5 fadb 	bl	80001ec <__adddf3>
 800ac36:	4604      	mov	r4, r0
 800ac38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac3a:	460d      	mov	r5, r1
 800ac3c:	f7f5 fc22 	bl	8000484 <__aeabi_i2d>
 800ac40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac42:	4b30      	ldr	r3, [pc, #192]	; (800ad04 <__ieee754_pow+0x73c>)
 800ac44:	4413      	add	r3, r2
 800ac46:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac4a:	4606      	mov	r6, r0
 800ac4c:	460f      	mov	r7, r1
 800ac4e:	4622      	mov	r2, r4
 800ac50:	462b      	mov	r3, r5
 800ac52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac56:	f7f5 fac9 	bl	80001ec <__adddf3>
 800ac5a:	4642      	mov	r2, r8
 800ac5c:	464b      	mov	r3, r9
 800ac5e:	f7f5 fac5 	bl	80001ec <__adddf3>
 800ac62:	4632      	mov	r2, r6
 800ac64:	463b      	mov	r3, r7
 800ac66:	f7f5 fac1 	bl	80001ec <__adddf3>
 800ac6a:	9802      	ldr	r0, [sp, #8]
 800ac6c:	4632      	mov	r2, r6
 800ac6e:	463b      	mov	r3, r7
 800ac70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac74:	f7f5 fab8 	bl	80001e8 <__aeabi_dsub>
 800ac78:	4642      	mov	r2, r8
 800ac7a:	464b      	mov	r3, r9
 800ac7c:	f7f5 fab4 	bl	80001e8 <__aeabi_dsub>
 800ac80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac84:	e607      	b.n	800a896 <__ieee754_pow+0x2ce>
 800ac86:	f04f 0a01 	mov.w	sl, #1
 800ac8a:	e6a5      	b.n	800a9d8 <__ieee754_pow+0x410>
 800ac8c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800ace0 <__ieee754_pow+0x718>
 800ac90:	e613      	b.n	800a8ba <__ieee754_pow+0x2f2>
 800ac92:	bf00      	nop
 800ac94:	f3af 8000 	nop.w
 800ac98:	4a454eef 	.word	0x4a454eef
 800ac9c:	3fca7e28 	.word	0x3fca7e28
 800aca0:	93c9db65 	.word	0x93c9db65
 800aca4:	3fcd864a 	.word	0x3fcd864a
 800aca8:	a91d4101 	.word	0xa91d4101
 800acac:	3fd17460 	.word	0x3fd17460
 800acb0:	518f264d 	.word	0x518f264d
 800acb4:	3fd55555 	.word	0x3fd55555
 800acb8:	db6fabff 	.word	0xdb6fabff
 800acbc:	3fdb6db6 	.word	0x3fdb6db6
 800acc0:	33333303 	.word	0x33333303
 800acc4:	3fe33333 	.word	0x3fe33333
 800acc8:	e0000000 	.word	0xe0000000
 800accc:	3feec709 	.word	0x3feec709
 800acd0:	dc3a03fd 	.word	0xdc3a03fd
 800acd4:	3feec709 	.word	0x3feec709
 800acd8:	145b01f5 	.word	0x145b01f5
 800acdc:	be3e2fe0 	.word	0xbe3e2fe0
 800ace0:	00000000 	.word	0x00000000
 800ace4:	3ff00000 	.word	0x3ff00000
 800ace8:	43400000 	.word	0x43400000
 800acec:	0003988e 	.word	0x0003988e
 800acf0:	000bb679 	.word	0x000bb679
 800acf4:	0800c0e8 	.word	0x0800c0e8
 800acf8:	3ff00000 	.word	0x3ff00000
 800acfc:	40080000 	.word	0x40080000
 800ad00:	0800c108 	.word	0x0800c108
 800ad04:	0800c0f8 	.word	0x0800c0f8
 800ad08:	a3b4      	add	r3, pc, #720	; (adr r3, 800afdc <__ieee754_pow+0xa14>)
 800ad0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0e:	4640      	mov	r0, r8
 800ad10:	4649      	mov	r1, r9
 800ad12:	f7f5 fa6b 	bl	80001ec <__adddf3>
 800ad16:	4622      	mov	r2, r4
 800ad18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad1c:	462b      	mov	r3, r5
 800ad1e:	4630      	mov	r0, r6
 800ad20:	4639      	mov	r1, r7
 800ad22:	f7f5 fa61 	bl	80001e8 <__aeabi_dsub>
 800ad26:	4602      	mov	r2, r0
 800ad28:	460b      	mov	r3, r1
 800ad2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad2e:	f7f6 f8cd 	bl	8000ecc <__aeabi_dcmpgt>
 800ad32:	2800      	cmp	r0, #0
 800ad34:	f47f adfe 	bne.w	800a934 <__ieee754_pow+0x36c>
 800ad38:	4aa3      	ldr	r2, [pc, #652]	; (800afc8 <__ieee754_pow+0xa00>)
 800ad3a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	f340 810a 	ble.w	800af58 <__ieee754_pow+0x990>
 800ad44:	151b      	asrs	r3, r3, #20
 800ad46:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ad4a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ad4e:	fa4a f303 	asr.w	r3, sl, r3
 800ad52:	445b      	add	r3, fp
 800ad54:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ad58:	4e9c      	ldr	r6, [pc, #624]	; (800afcc <__ieee754_pow+0xa04>)
 800ad5a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ad5e:	4116      	asrs	r6, r2
 800ad60:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ad64:	2000      	movs	r0, #0
 800ad66:	ea23 0106 	bic.w	r1, r3, r6
 800ad6a:	f1c2 0214 	rsb	r2, r2, #20
 800ad6e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ad72:	fa4a fa02 	asr.w	sl, sl, r2
 800ad76:	f1bb 0f00 	cmp.w	fp, #0
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	4620      	mov	r0, r4
 800ad80:	4629      	mov	r1, r5
 800ad82:	bfb8      	it	lt
 800ad84:	f1ca 0a00 	rsblt	sl, sl, #0
 800ad88:	f7f5 fa2e 	bl	80001e8 <__aeabi_dsub>
 800ad8c:	e9cd 0100 	strd	r0, r1, [sp]
 800ad90:	4642      	mov	r2, r8
 800ad92:	464b      	mov	r3, r9
 800ad94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad98:	f7f5 fa28 	bl	80001ec <__adddf3>
 800ad9c:	2000      	movs	r0, #0
 800ad9e:	a378      	add	r3, pc, #480	; (adr r3, 800af80 <__ieee754_pow+0x9b8>)
 800ada0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada4:	4604      	mov	r4, r0
 800ada6:	460d      	mov	r5, r1
 800ada8:	f7f5 fbd6 	bl	8000558 <__aeabi_dmul>
 800adac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adb0:	4606      	mov	r6, r0
 800adb2:	460f      	mov	r7, r1
 800adb4:	4620      	mov	r0, r4
 800adb6:	4629      	mov	r1, r5
 800adb8:	f7f5 fa16 	bl	80001e8 <__aeabi_dsub>
 800adbc:	4602      	mov	r2, r0
 800adbe:	460b      	mov	r3, r1
 800adc0:	4640      	mov	r0, r8
 800adc2:	4649      	mov	r1, r9
 800adc4:	f7f5 fa10 	bl	80001e8 <__aeabi_dsub>
 800adc8:	a36f      	add	r3, pc, #444	; (adr r3, 800af88 <__ieee754_pow+0x9c0>)
 800adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adce:	f7f5 fbc3 	bl	8000558 <__aeabi_dmul>
 800add2:	a36f      	add	r3, pc, #444	; (adr r3, 800af90 <__ieee754_pow+0x9c8>)
 800add4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add8:	4680      	mov	r8, r0
 800adda:	4689      	mov	r9, r1
 800addc:	4620      	mov	r0, r4
 800adde:	4629      	mov	r1, r5
 800ade0:	f7f5 fbba 	bl	8000558 <__aeabi_dmul>
 800ade4:	4602      	mov	r2, r0
 800ade6:	460b      	mov	r3, r1
 800ade8:	4640      	mov	r0, r8
 800adea:	4649      	mov	r1, r9
 800adec:	f7f5 f9fe 	bl	80001ec <__adddf3>
 800adf0:	4604      	mov	r4, r0
 800adf2:	460d      	mov	r5, r1
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	4630      	mov	r0, r6
 800adfa:	4639      	mov	r1, r7
 800adfc:	f7f5 f9f6 	bl	80001ec <__adddf3>
 800ae00:	4632      	mov	r2, r6
 800ae02:	463b      	mov	r3, r7
 800ae04:	4680      	mov	r8, r0
 800ae06:	4689      	mov	r9, r1
 800ae08:	f7f5 f9ee 	bl	80001e8 <__aeabi_dsub>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	460b      	mov	r3, r1
 800ae10:	4620      	mov	r0, r4
 800ae12:	4629      	mov	r1, r5
 800ae14:	f7f5 f9e8 	bl	80001e8 <__aeabi_dsub>
 800ae18:	4642      	mov	r2, r8
 800ae1a:	4606      	mov	r6, r0
 800ae1c:	460f      	mov	r7, r1
 800ae1e:	464b      	mov	r3, r9
 800ae20:	4640      	mov	r0, r8
 800ae22:	4649      	mov	r1, r9
 800ae24:	f7f5 fb98 	bl	8000558 <__aeabi_dmul>
 800ae28:	a35b      	add	r3, pc, #364	; (adr r3, 800af98 <__ieee754_pow+0x9d0>)
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	4604      	mov	r4, r0
 800ae30:	460d      	mov	r5, r1
 800ae32:	f7f5 fb91 	bl	8000558 <__aeabi_dmul>
 800ae36:	a35a      	add	r3, pc, #360	; (adr r3, 800afa0 <__ieee754_pow+0x9d8>)
 800ae38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3c:	f7f5 f9d4 	bl	80001e8 <__aeabi_dsub>
 800ae40:	4622      	mov	r2, r4
 800ae42:	462b      	mov	r3, r5
 800ae44:	f7f5 fb88 	bl	8000558 <__aeabi_dmul>
 800ae48:	a357      	add	r3, pc, #348	; (adr r3, 800afa8 <__ieee754_pow+0x9e0>)
 800ae4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4e:	f7f5 f9cd 	bl	80001ec <__adddf3>
 800ae52:	4622      	mov	r2, r4
 800ae54:	462b      	mov	r3, r5
 800ae56:	f7f5 fb7f 	bl	8000558 <__aeabi_dmul>
 800ae5a:	a355      	add	r3, pc, #340	; (adr r3, 800afb0 <__ieee754_pow+0x9e8>)
 800ae5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae60:	f7f5 f9c2 	bl	80001e8 <__aeabi_dsub>
 800ae64:	4622      	mov	r2, r4
 800ae66:	462b      	mov	r3, r5
 800ae68:	f7f5 fb76 	bl	8000558 <__aeabi_dmul>
 800ae6c:	a352      	add	r3, pc, #328	; (adr r3, 800afb8 <__ieee754_pow+0x9f0>)
 800ae6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae72:	f7f5 f9bb 	bl	80001ec <__adddf3>
 800ae76:	4622      	mov	r2, r4
 800ae78:	462b      	mov	r3, r5
 800ae7a:	f7f5 fb6d 	bl	8000558 <__aeabi_dmul>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	460b      	mov	r3, r1
 800ae82:	4640      	mov	r0, r8
 800ae84:	4649      	mov	r1, r9
 800ae86:	f7f5 f9af 	bl	80001e8 <__aeabi_dsub>
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	460d      	mov	r5, r1
 800ae8e:	4602      	mov	r2, r0
 800ae90:	460b      	mov	r3, r1
 800ae92:	4640      	mov	r0, r8
 800ae94:	4649      	mov	r1, r9
 800ae96:	f7f5 fb5f 	bl	8000558 <__aeabi_dmul>
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	e9cd 0100 	strd	r0, r1, [sp]
 800aea0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aea4:	4620      	mov	r0, r4
 800aea6:	4629      	mov	r1, r5
 800aea8:	f7f5 f99e 	bl	80001e8 <__aeabi_dsub>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aeb4:	f7f5 fc7a 	bl	80007ac <__aeabi_ddiv>
 800aeb8:	4632      	mov	r2, r6
 800aeba:	4604      	mov	r4, r0
 800aebc:	460d      	mov	r5, r1
 800aebe:	463b      	mov	r3, r7
 800aec0:	4640      	mov	r0, r8
 800aec2:	4649      	mov	r1, r9
 800aec4:	f7f5 fb48 	bl	8000558 <__aeabi_dmul>
 800aec8:	4632      	mov	r2, r6
 800aeca:	463b      	mov	r3, r7
 800aecc:	f7f5 f98e 	bl	80001ec <__adddf3>
 800aed0:	4602      	mov	r2, r0
 800aed2:	460b      	mov	r3, r1
 800aed4:	4620      	mov	r0, r4
 800aed6:	4629      	mov	r1, r5
 800aed8:	f7f5 f986 	bl	80001e8 <__aeabi_dsub>
 800aedc:	4642      	mov	r2, r8
 800aede:	464b      	mov	r3, r9
 800aee0:	f7f5 f982 	bl	80001e8 <__aeabi_dsub>
 800aee4:	4602      	mov	r2, r0
 800aee6:	460b      	mov	r3, r1
 800aee8:	2000      	movs	r0, #0
 800aeea:	4939      	ldr	r1, [pc, #228]	; (800afd0 <__ieee754_pow+0xa08>)
 800aeec:	f7f5 f97c 	bl	80001e8 <__aeabi_dsub>
 800aef0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800aef4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800aef8:	4602      	mov	r2, r0
 800aefa:	460b      	mov	r3, r1
 800aefc:	da2f      	bge.n	800af5e <__ieee754_pow+0x996>
 800aefe:	4650      	mov	r0, sl
 800af00:	ec43 2b10 	vmov	d0, r2, r3
 800af04:	f000 fb60 	bl	800b5c8 <scalbn>
 800af08:	ec51 0b10 	vmov	r0, r1, d0
 800af0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800af10:	f7ff bbf1 	b.w	800a6f6 <__ieee754_pow+0x12e>
 800af14:	4b2f      	ldr	r3, [pc, #188]	; (800afd4 <__ieee754_pow+0xa0c>)
 800af16:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800af1a:	429e      	cmp	r6, r3
 800af1c:	f77f af0c 	ble.w	800ad38 <__ieee754_pow+0x770>
 800af20:	4b2d      	ldr	r3, [pc, #180]	; (800afd8 <__ieee754_pow+0xa10>)
 800af22:	440b      	add	r3, r1
 800af24:	4303      	orrs	r3, r0
 800af26:	d00b      	beq.n	800af40 <__ieee754_pow+0x978>
 800af28:	a325      	add	r3, pc, #148	; (adr r3, 800afc0 <__ieee754_pow+0x9f8>)
 800af2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af32:	f7f5 fb11 	bl	8000558 <__aeabi_dmul>
 800af36:	a322      	add	r3, pc, #136	; (adr r3, 800afc0 <__ieee754_pow+0x9f8>)
 800af38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3c:	f7ff bbdb 	b.w	800a6f6 <__ieee754_pow+0x12e>
 800af40:	4622      	mov	r2, r4
 800af42:	462b      	mov	r3, r5
 800af44:	f7f5 f950 	bl	80001e8 <__aeabi_dsub>
 800af48:	4642      	mov	r2, r8
 800af4a:	464b      	mov	r3, r9
 800af4c:	f7f5 ffb4 	bl	8000eb8 <__aeabi_dcmpge>
 800af50:	2800      	cmp	r0, #0
 800af52:	f43f aef1 	beq.w	800ad38 <__ieee754_pow+0x770>
 800af56:	e7e7      	b.n	800af28 <__ieee754_pow+0x960>
 800af58:	f04f 0a00 	mov.w	sl, #0
 800af5c:	e718      	b.n	800ad90 <__ieee754_pow+0x7c8>
 800af5e:	4621      	mov	r1, r4
 800af60:	e7d4      	b.n	800af0c <__ieee754_pow+0x944>
 800af62:	2000      	movs	r0, #0
 800af64:	491a      	ldr	r1, [pc, #104]	; (800afd0 <__ieee754_pow+0xa08>)
 800af66:	f7ff bb8f 	b.w	800a688 <__ieee754_pow+0xc0>
 800af6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af6e:	f7ff bb8b 	b.w	800a688 <__ieee754_pow+0xc0>
 800af72:	4630      	mov	r0, r6
 800af74:	4639      	mov	r1, r7
 800af76:	f7ff bb87 	b.w	800a688 <__ieee754_pow+0xc0>
 800af7a:	4693      	mov	fp, r2
 800af7c:	f7ff bb98 	b.w	800a6b0 <__ieee754_pow+0xe8>
 800af80:	00000000 	.word	0x00000000
 800af84:	3fe62e43 	.word	0x3fe62e43
 800af88:	fefa39ef 	.word	0xfefa39ef
 800af8c:	3fe62e42 	.word	0x3fe62e42
 800af90:	0ca86c39 	.word	0x0ca86c39
 800af94:	be205c61 	.word	0xbe205c61
 800af98:	72bea4d0 	.word	0x72bea4d0
 800af9c:	3e663769 	.word	0x3e663769
 800afa0:	c5d26bf1 	.word	0xc5d26bf1
 800afa4:	3ebbbd41 	.word	0x3ebbbd41
 800afa8:	af25de2c 	.word	0xaf25de2c
 800afac:	3f11566a 	.word	0x3f11566a
 800afb0:	16bebd93 	.word	0x16bebd93
 800afb4:	3f66c16c 	.word	0x3f66c16c
 800afb8:	5555553e 	.word	0x5555553e
 800afbc:	3fc55555 	.word	0x3fc55555
 800afc0:	c2f8f359 	.word	0xc2f8f359
 800afc4:	01a56e1f 	.word	0x01a56e1f
 800afc8:	3fe00000 	.word	0x3fe00000
 800afcc:	000fffff 	.word	0x000fffff
 800afd0:	3ff00000 	.word	0x3ff00000
 800afd4:	4090cbff 	.word	0x4090cbff
 800afd8:	3f6f3400 	.word	0x3f6f3400
 800afdc:	652b82fe 	.word	0x652b82fe
 800afe0:	3c971547 	.word	0x3c971547

0800afe4 <__ieee754_sqrt>:
 800afe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe8:	4955      	ldr	r1, [pc, #340]	; (800b140 <__ieee754_sqrt+0x15c>)
 800afea:	ec55 4b10 	vmov	r4, r5, d0
 800afee:	43a9      	bics	r1, r5
 800aff0:	462b      	mov	r3, r5
 800aff2:	462a      	mov	r2, r5
 800aff4:	d112      	bne.n	800b01c <__ieee754_sqrt+0x38>
 800aff6:	ee10 2a10 	vmov	r2, s0
 800affa:	ee10 0a10 	vmov	r0, s0
 800affe:	4629      	mov	r1, r5
 800b000:	f7f5 faaa 	bl	8000558 <__aeabi_dmul>
 800b004:	4602      	mov	r2, r0
 800b006:	460b      	mov	r3, r1
 800b008:	4620      	mov	r0, r4
 800b00a:	4629      	mov	r1, r5
 800b00c:	f7f5 f8ee 	bl	80001ec <__adddf3>
 800b010:	4604      	mov	r4, r0
 800b012:	460d      	mov	r5, r1
 800b014:	ec45 4b10 	vmov	d0, r4, r5
 800b018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b01c:	2d00      	cmp	r5, #0
 800b01e:	ee10 0a10 	vmov	r0, s0
 800b022:	4621      	mov	r1, r4
 800b024:	dc0f      	bgt.n	800b046 <__ieee754_sqrt+0x62>
 800b026:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b02a:	4330      	orrs	r0, r6
 800b02c:	d0f2      	beq.n	800b014 <__ieee754_sqrt+0x30>
 800b02e:	b155      	cbz	r5, 800b046 <__ieee754_sqrt+0x62>
 800b030:	ee10 2a10 	vmov	r2, s0
 800b034:	4620      	mov	r0, r4
 800b036:	4629      	mov	r1, r5
 800b038:	f7f5 f8d6 	bl	80001e8 <__aeabi_dsub>
 800b03c:	4602      	mov	r2, r0
 800b03e:	460b      	mov	r3, r1
 800b040:	f7f5 fbb4 	bl	80007ac <__aeabi_ddiv>
 800b044:	e7e4      	b.n	800b010 <__ieee754_sqrt+0x2c>
 800b046:	151b      	asrs	r3, r3, #20
 800b048:	d073      	beq.n	800b132 <__ieee754_sqrt+0x14e>
 800b04a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b04e:	07dd      	lsls	r5, r3, #31
 800b050:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b054:	bf48      	it	mi
 800b056:	0fc8      	lsrmi	r0, r1, #31
 800b058:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b05c:	bf44      	itt	mi
 800b05e:	0049      	lslmi	r1, r1, #1
 800b060:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800b064:	2500      	movs	r5, #0
 800b066:	1058      	asrs	r0, r3, #1
 800b068:	0fcb      	lsrs	r3, r1, #31
 800b06a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800b06e:	0049      	lsls	r1, r1, #1
 800b070:	2316      	movs	r3, #22
 800b072:	462c      	mov	r4, r5
 800b074:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b078:	19a7      	adds	r7, r4, r6
 800b07a:	4297      	cmp	r7, r2
 800b07c:	bfde      	ittt	le
 800b07e:	19bc      	addle	r4, r7, r6
 800b080:	1bd2      	suble	r2, r2, r7
 800b082:	19ad      	addle	r5, r5, r6
 800b084:	0fcf      	lsrs	r7, r1, #31
 800b086:	3b01      	subs	r3, #1
 800b088:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800b08c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b090:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b094:	d1f0      	bne.n	800b078 <__ieee754_sqrt+0x94>
 800b096:	f04f 0c20 	mov.w	ip, #32
 800b09a:	469e      	mov	lr, r3
 800b09c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b0a0:	42a2      	cmp	r2, r4
 800b0a2:	eb06 070e 	add.w	r7, r6, lr
 800b0a6:	dc02      	bgt.n	800b0ae <__ieee754_sqrt+0xca>
 800b0a8:	d112      	bne.n	800b0d0 <__ieee754_sqrt+0xec>
 800b0aa:	428f      	cmp	r7, r1
 800b0ac:	d810      	bhi.n	800b0d0 <__ieee754_sqrt+0xec>
 800b0ae:	2f00      	cmp	r7, #0
 800b0b0:	eb07 0e06 	add.w	lr, r7, r6
 800b0b4:	da42      	bge.n	800b13c <__ieee754_sqrt+0x158>
 800b0b6:	f1be 0f00 	cmp.w	lr, #0
 800b0ba:	db3f      	blt.n	800b13c <__ieee754_sqrt+0x158>
 800b0bc:	f104 0801 	add.w	r8, r4, #1
 800b0c0:	1b12      	subs	r2, r2, r4
 800b0c2:	428f      	cmp	r7, r1
 800b0c4:	bf88      	it	hi
 800b0c6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800b0ca:	1bc9      	subs	r1, r1, r7
 800b0cc:	4433      	add	r3, r6
 800b0ce:	4644      	mov	r4, r8
 800b0d0:	0052      	lsls	r2, r2, #1
 800b0d2:	f1bc 0c01 	subs.w	ip, ip, #1
 800b0d6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800b0da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b0de:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b0e2:	d1dd      	bne.n	800b0a0 <__ieee754_sqrt+0xbc>
 800b0e4:	430a      	orrs	r2, r1
 800b0e6:	d006      	beq.n	800b0f6 <__ieee754_sqrt+0x112>
 800b0e8:	1c5c      	adds	r4, r3, #1
 800b0ea:	bf13      	iteet	ne
 800b0ec:	3301      	addne	r3, #1
 800b0ee:	3501      	addeq	r5, #1
 800b0f0:	4663      	moveq	r3, ip
 800b0f2:	f023 0301 	bicne.w	r3, r3, #1
 800b0f6:	106a      	asrs	r2, r5, #1
 800b0f8:	085b      	lsrs	r3, r3, #1
 800b0fa:	07e9      	lsls	r1, r5, #31
 800b0fc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b100:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b104:	bf48      	it	mi
 800b106:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b10a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800b10e:	461c      	mov	r4, r3
 800b110:	e780      	b.n	800b014 <__ieee754_sqrt+0x30>
 800b112:	0aca      	lsrs	r2, r1, #11
 800b114:	3815      	subs	r0, #21
 800b116:	0549      	lsls	r1, r1, #21
 800b118:	2a00      	cmp	r2, #0
 800b11a:	d0fa      	beq.n	800b112 <__ieee754_sqrt+0x12e>
 800b11c:	02d6      	lsls	r6, r2, #11
 800b11e:	d50a      	bpl.n	800b136 <__ieee754_sqrt+0x152>
 800b120:	f1c3 0420 	rsb	r4, r3, #32
 800b124:	fa21 f404 	lsr.w	r4, r1, r4
 800b128:	1e5d      	subs	r5, r3, #1
 800b12a:	4099      	lsls	r1, r3
 800b12c:	4322      	orrs	r2, r4
 800b12e:	1b43      	subs	r3, r0, r5
 800b130:	e78b      	b.n	800b04a <__ieee754_sqrt+0x66>
 800b132:	4618      	mov	r0, r3
 800b134:	e7f0      	b.n	800b118 <__ieee754_sqrt+0x134>
 800b136:	0052      	lsls	r2, r2, #1
 800b138:	3301      	adds	r3, #1
 800b13a:	e7ef      	b.n	800b11c <__ieee754_sqrt+0x138>
 800b13c:	46a0      	mov	r8, r4
 800b13e:	e7bf      	b.n	800b0c0 <__ieee754_sqrt+0xdc>
 800b140:	7ff00000 	.word	0x7ff00000
 800b144:	00000000 	.word	0x00000000

0800b148 <atan>:
 800b148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	ec55 4b10 	vmov	r4, r5, d0
 800b150:	4bc3      	ldr	r3, [pc, #780]	; (800b460 <atan+0x318>)
 800b152:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b156:	429e      	cmp	r6, r3
 800b158:	46ab      	mov	fp, r5
 800b15a:	dd18      	ble.n	800b18e <atan+0x46>
 800b15c:	4bc1      	ldr	r3, [pc, #772]	; (800b464 <atan+0x31c>)
 800b15e:	429e      	cmp	r6, r3
 800b160:	dc01      	bgt.n	800b166 <atan+0x1e>
 800b162:	d109      	bne.n	800b178 <atan+0x30>
 800b164:	b144      	cbz	r4, 800b178 <atan+0x30>
 800b166:	4622      	mov	r2, r4
 800b168:	462b      	mov	r3, r5
 800b16a:	4620      	mov	r0, r4
 800b16c:	4629      	mov	r1, r5
 800b16e:	f7f5 f83d 	bl	80001ec <__adddf3>
 800b172:	4604      	mov	r4, r0
 800b174:	460d      	mov	r5, r1
 800b176:	e006      	b.n	800b186 <atan+0x3e>
 800b178:	f1bb 0f00 	cmp.w	fp, #0
 800b17c:	f340 8131 	ble.w	800b3e2 <atan+0x29a>
 800b180:	a59b      	add	r5, pc, #620	; (adr r5, 800b3f0 <atan+0x2a8>)
 800b182:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b186:	ec45 4b10 	vmov	d0, r4, r5
 800b18a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b18e:	4bb6      	ldr	r3, [pc, #728]	; (800b468 <atan+0x320>)
 800b190:	429e      	cmp	r6, r3
 800b192:	dc14      	bgt.n	800b1be <atan+0x76>
 800b194:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b198:	429e      	cmp	r6, r3
 800b19a:	dc0d      	bgt.n	800b1b8 <atan+0x70>
 800b19c:	a396      	add	r3, pc, #600	; (adr r3, 800b3f8 <atan+0x2b0>)
 800b19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a2:	ee10 0a10 	vmov	r0, s0
 800b1a6:	4629      	mov	r1, r5
 800b1a8:	f7f5 f820 	bl	80001ec <__adddf3>
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	4baf      	ldr	r3, [pc, #700]	; (800b46c <atan+0x324>)
 800b1b0:	f7f5 fe8c 	bl	8000ecc <__aeabi_dcmpgt>
 800b1b4:	2800      	cmp	r0, #0
 800b1b6:	d1e6      	bne.n	800b186 <atan+0x3e>
 800b1b8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b1bc:	e02b      	b.n	800b216 <atan+0xce>
 800b1be:	f000 f963 	bl	800b488 <fabs>
 800b1c2:	4bab      	ldr	r3, [pc, #684]	; (800b470 <atan+0x328>)
 800b1c4:	429e      	cmp	r6, r3
 800b1c6:	ec55 4b10 	vmov	r4, r5, d0
 800b1ca:	f300 80bf 	bgt.w	800b34c <atan+0x204>
 800b1ce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b1d2:	429e      	cmp	r6, r3
 800b1d4:	f300 80a0 	bgt.w	800b318 <atan+0x1d0>
 800b1d8:	ee10 2a10 	vmov	r2, s0
 800b1dc:	ee10 0a10 	vmov	r0, s0
 800b1e0:	462b      	mov	r3, r5
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	f7f5 f802 	bl	80001ec <__adddf3>
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	4ba0      	ldr	r3, [pc, #640]	; (800b46c <atan+0x324>)
 800b1ec:	f7f4 fffc 	bl	80001e8 <__aeabi_dsub>
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	4606      	mov	r6, r0
 800b1f4:	460f      	mov	r7, r1
 800b1f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	4629      	mov	r1, r5
 800b1fe:	f7f4 fff5 	bl	80001ec <__adddf3>
 800b202:	4602      	mov	r2, r0
 800b204:	460b      	mov	r3, r1
 800b206:	4630      	mov	r0, r6
 800b208:	4639      	mov	r1, r7
 800b20a:	f7f5 facf 	bl	80007ac <__aeabi_ddiv>
 800b20e:	f04f 0a00 	mov.w	sl, #0
 800b212:	4604      	mov	r4, r0
 800b214:	460d      	mov	r5, r1
 800b216:	4622      	mov	r2, r4
 800b218:	462b      	mov	r3, r5
 800b21a:	4620      	mov	r0, r4
 800b21c:	4629      	mov	r1, r5
 800b21e:	f7f5 f99b 	bl	8000558 <__aeabi_dmul>
 800b222:	4602      	mov	r2, r0
 800b224:	460b      	mov	r3, r1
 800b226:	4680      	mov	r8, r0
 800b228:	4689      	mov	r9, r1
 800b22a:	f7f5 f995 	bl	8000558 <__aeabi_dmul>
 800b22e:	a374      	add	r3, pc, #464	; (adr r3, 800b400 <atan+0x2b8>)
 800b230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b234:	4606      	mov	r6, r0
 800b236:	460f      	mov	r7, r1
 800b238:	f7f5 f98e 	bl	8000558 <__aeabi_dmul>
 800b23c:	a372      	add	r3, pc, #456	; (adr r3, 800b408 <atan+0x2c0>)
 800b23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b242:	f7f4 ffd3 	bl	80001ec <__adddf3>
 800b246:	4632      	mov	r2, r6
 800b248:	463b      	mov	r3, r7
 800b24a:	f7f5 f985 	bl	8000558 <__aeabi_dmul>
 800b24e:	a370      	add	r3, pc, #448	; (adr r3, 800b410 <atan+0x2c8>)
 800b250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b254:	f7f4 ffca 	bl	80001ec <__adddf3>
 800b258:	4632      	mov	r2, r6
 800b25a:	463b      	mov	r3, r7
 800b25c:	f7f5 f97c 	bl	8000558 <__aeabi_dmul>
 800b260:	a36d      	add	r3, pc, #436	; (adr r3, 800b418 <atan+0x2d0>)
 800b262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b266:	f7f4 ffc1 	bl	80001ec <__adddf3>
 800b26a:	4632      	mov	r2, r6
 800b26c:	463b      	mov	r3, r7
 800b26e:	f7f5 f973 	bl	8000558 <__aeabi_dmul>
 800b272:	a36b      	add	r3, pc, #428	; (adr r3, 800b420 <atan+0x2d8>)
 800b274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b278:	f7f4 ffb8 	bl	80001ec <__adddf3>
 800b27c:	4632      	mov	r2, r6
 800b27e:	463b      	mov	r3, r7
 800b280:	f7f5 f96a 	bl	8000558 <__aeabi_dmul>
 800b284:	a368      	add	r3, pc, #416	; (adr r3, 800b428 <atan+0x2e0>)
 800b286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28a:	f7f4 ffaf 	bl	80001ec <__adddf3>
 800b28e:	4642      	mov	r2, r8
 800b290:	464b      	mov	r3, r9
 800b292:	f7f5 f961 	bl	8000558 <__aeabi_dmul>
 800b296:	a366      	add	r3, pc, #408	; (adr r3, 800b430 <atan+0x2e8>)
 800b298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29c:	4680      	mov	r8, r0
 800b29e:	4689      	mov	r9, r1
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	4639      	mov	r1, r7
 800b2a4:	f7f5 f958 	bl	8000558 <__aeabi_dmul>
 800b2a8:	a363      	add	r3, pc, #396	; (adr r3, 800b438 <atan+0x2f0>)
 800b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ae:	f7f4 ff9b 	bl	80001e8 <__aeabi_dsub>
 800b2b2:	4632      	mov	r2, r6
 800b2b4:	463b      	mov	r3, r7
 800b2b6:	f7f5 f94f 	bl	8000558 <__aeabi_dmul>
 800b2ba:	a361      	add	r3, pc, #388	; (adr r3, 800b440 <atan+0x2f8>)
 800b2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c0:	f7f4 ff92 	bl	80001e8 <__aeabi_dsub>
 800b2c4:	4632      	mov	r2, r6
 800b2c6:	463b      	mov	r3, r7
 800b2c8:	f7f5 f946 	bl	8000558 <__aeabi_dmul>
 800b2cc:	a35e      	add	r3, pc, #376	; (adr r3, 800b448 <atan+0x300>)
 800b2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d2:	f7f4 ff89 	bl	80001e8 <__aeabi_dsub>
 800b2d6:	4632      	mov	r2, r6
 800b2d8:	463b      	mov	r3, r7
 800b2da:	f7f5 f93d 	bl	8000558 <__aeabi_dmul>
 800b2de:	a35c      	add	r3, pc, #368	; (adr r3, 800b450 <atan+0x308>)
 800b2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e4:	f7f4 ff80 	bl	80001e8 <__aeabi_dsub>
 800b2e8:	4632      	mov	r2, r6
 800b2ea:	463b      	mov	r3, r7
 800b2ec:	f7f5 f934 	bl	8000558 <__aeabi_dmul>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	4640      	mov	r0, r8
 800b2f6:	4649      	mov	r1, r9
 800b2f8:	f7f4 ff78 	bl	80001ec <__adddf3>
 800b2fc:	4622      	mov	r2, r4
 800b2fe:	462b      	mov	r3, r5
 800b300:	f7f5 f92a 	bl	8000558 <__aeabi_dmul>
 800b304:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800b308:	4602      	mov	r2, r0
 800b30a:	460b      	mov	r3, r1
 800b30c:	d14b      	bne.n	800b3a6 <atan+0x25e>
 800b30e:	4620      	mov	r0, r4
 800b310:	4629      	mov	r1, r5
 800b312:	f7f4 ff69 	bl	80001e8 <__aeabi_dsub>
 800b316:	e72c      	b.n	800b172 <atan+0x2a>
 800b318:	ee10 0a10 	vmov	r0, s0
 800b31c:	2200      	movs	r2, #0
 800b31e:	4b53      	ldr	r3, [pc, #332]	; (800b46c <atan+0x324>)
 800b320:	4629      	mov	r1, r5
 800b322:	f7f4 ff61 	bl	80001e8 <__aeabi_dsub>
 800b326:	2200      	movs	r2, #0
 800b328:	4606      	mov	r6, r0
 800b32a:	460f      	mov	r7, r1
 800b32c:	4b4f      	ldr	r3, [pc, #316]	; (800b46c <atan+0x324>)
 800b32e:	4620      	mov	r0, r4
 800b330:	4629      	mov	r1, r5
 800b332:	f7f4 ff5b 	bl	80001ec <__adddf3>
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	4630      	mov	r0, r6
 800b33c:	4639      	mov	r1, r7
 800b33e:	f7f5 fa35 	bl	80007ac <__aeabi_ddiv>
 800b342:	f04f 0a01 	mov.w	sl, #1
 800b346:	4604      	mov	r4, r0
 800b348:	460d      	mov	r5, r1
 800b34a:	e764      	b.n	800b216 <atan+0xce>
 800b34c:	4b49      	ldr	r3, [pc, #292]	; (800b474 <atan+0x32c>)
 800b34e:	429e      	cmp	r6, r3
 800b350:	dc1d      	bgt.n	800b38e <atan+0x246>
 800b352:	ee10 0a10 	vmov	r0, s0
 800b356:	2200      	movs	r2, #0
 800b358:	4b47      	ldr	r3, [pc, #284]	; (800b478 <atan+0x330>)
 800b35a:	4629      	mov	r1, r5
 800b35c:	f7f4 ff44 	bl	80001e8 <__aeabi_dsub>
 800b360:	2200      	movs	r2, #0
 800b362:	4606      	mov	r6, r0
 800b364:	460f      	mov	r7, r1
 800b366:	4b44      	ldr	r3, [pc, #272]	; (800b478 <atan+0x330>)
 800b368:	4620      	mov	r0, r4
 800b36a:	4629      	mov	r1, r5
 800b36c:	f7f5 f8f4 	bl	8000558 <__aeabi_dmul>
 800b370:	2200      	movs	r2, #0
 800b372:	4b3e      	ldr	r3, [pc, #248]	; (800b46c <atan+0x324>)
 800b374:	f7f4 ff3a 	bl	80001ec <__adddf3>
 800b378:	4602      	mov	r2, r0
 800b37a:	460b      	mov	r3, r1
 800b37c:	4630      	mov	r0, r6
 800b37e:	4639      	mov	r1, r7
 800b380:	f7f5 fa14 	bl	80007ac <__aeabi_ddiv>
 800b384:	f04f 0a02 	mov.w	sl, #2
 800b388:	4604      	mov	r4, r0
 800b38a:	460d      	mov	r5, r1
 800b38c:	e743      	b.n	800b216 <atan+0xce>
 800b38e:	462b      	mov	r3, r5
 800b390:	ee10 2a10 	vmov	r2, s0
 800b394:	2000      	movs	r0, #0
 800b396:	4939      	ldr	r1, [pc, #228]	; (800b47c <atan+0x334>)
 800b398:	f7f5 fa08 	bl	80007ac <__aeabi_ddiv>
 800b39c:	f04f 0a03 	mov.w	sl, #3
 800b3a0:	4604      	mov	r4, r0
 800b3a2:	460d      	mov	r5, r1
 800b3a4:	e737      	b.n	800b216 <atan+0xce>
 800b3a6:	4b36      	ldr	r3, [pc, #216]	; (800b480 <atan+0x338>)
 800b3a8:	4e36      	ldr	r6, [pc, #216]	; (800b484 <atan+0x33c>)
 800b3aa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800b3ae:	4456      	add	r6, sl
 800b3b0:	449a      	add	sl, r3
 800b3b2:	e9da 2300 	ldrd	r2, r3, [sl]
 800b3b6:	f7f4 ff17 	bl	80001e8 <__aeabi_dsub>
 800b3ba:	4622      	mov	r2, r4
 800b3bc:	462b      	mov	r3, r5
 800b3be:	f7f4 ff13 	bl	80001e8 <__aeabi_dsub>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b3ca:	f7f4 ff0d 	bl	80001e8 <__aeabi_dsub>
 800b3ce:	f1bb 0f00 	cmp.w	fp, #0
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	460d      	mov	r5, r1
 800b3d6:	f6bf aed6 	bge.w	800b186 <atan+0x3e>
 800b3da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3de:	461d      	mov	r5, r3
 800b3e0:	e6d1      	b.n	800b186 <atan+0x3e>
 800b3e2:	a51d      	add	r5, pc, #116	; (adr r5, 800b458 <atan+0x310>)
 800b3e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b3e8:	e6cd      	b.n	800b186 <atan+0x3e>
 800b3ea:	bf00      	nop
 800b3ec:	f3af 8000 	nop.w
 800b3f0:	54442d18 	.word	0x54442d18
 800b3f4:	3ff921fb 	.word	0x3ff921fb
 800b3f8:	8800759c 	.word	0x8800759c
 800b3fc:	7e37e43c 	.word	0x7e37e43c
 800b400:	e322da11 	.word	0xe322da11
 800b404:	3f90ad3a 	.word	0x3f90ad3a
 800b408:	24760deb 	.word	0x24760deb
 800b40c:	3fa97b4b 	.word	0x3fa97b4b
 800b410:	a0d03d51 	.word	0xa0d03d51
 800b414:	3fb10d66 	.word	0x3fb10d66
 800b418:	c54c206e 	.word	0xc54c206e
 800b41c:	3fb745cd 	.word	0x3fb745cd
 800b420:	920083ff 	.word	0x920083ff
 800b424:	3fc24924 	.word	0x3fc24924
 800b428:	5555550d 	.word	0x5555550d
 800b42c:	3fd55555 	.word	0x3fd55555
 800b430:	2c6a6c2f 	.word	0x2c6a6c2f
 800b434:	bfa2b444 	.word	0xbfa2b444
 800b438:	52defd9a 	.word	0x52defd9a
 800b43c:	3fadde2d 	.word	0x3fadde2d
 800b440:	af749a6d 	.word	0xaf749a6d
 800b444:	3fb3b0f2 	.word	0x3fb3b0f2
 800b448:	fe231671 	.word	0xfe231671
 800b44c:	3fbc71c6 	.word	0x3fbc71c6
 800b450:	9998ebc4 	.word	0x9998ebc4
 800b454:	3fc99999 	.word	0x3fc99999
 800b458:	54442d18 	.word	0x54442d18
 800b45c:	bff921fb 	.word	0xbff921fb
 800b460:	440fffff 	.word	0x440fffff
 800b464:	7ff00000 	.word	0x7ff00000
 800b468:	3fdbffff 	.word	0x3fdbffff
 800b46c:	3ff00000 	.word	0x3ff00000
 800b470:	3ff2ffff 	.word	0x3ff2ffff
 800b474:	40037fff 	.word	0x40037fff
 800b478:	3ff80000 	.word	0x3ff80000
 800b47c:	bff00000 	.word	0xbff00000
 800b480:	0800c138 	.word	0x0800c138
 800b484:	0800c118 	.word	0x0800c118

0800b488 <fabs>:
 800b488:	ec51 0b10 	vmov	r0, r1, d0
 800b48c:	ee10 2a10 	vmov	r2, s0
 800b490:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b494:	ec43 2b10 	vmov	d0, r2, r3
 800b498:	4770      	bx	lr

0800b49a <finite>:
 800b49a:	ee10 3a90 	vmov	r3, s1
 800b49e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800b4a2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b4a6:	0fc0      	lsrs	r0, r0, #31
 800b4a8:	4770      	bx	lr

0800b4aa <matherr>:
 800b4aa:	2000      	movs	r0, #0
 800b4ac:	4770      	bx	lr
	...

0800b4b0 <nan>:
 800b4b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b4b8 <nan+0x8>
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	00000000 	.word	0x00000000
 800b4bc:	7ff80000 	.word	0x7ff80000

0800b4c0 <rint>:
 800b4c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4c2:	ec51 0b10 	vmov	r0, r1, d0
 800b4c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b4ca:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b4ce:	2e13      	cmp	r6, #19
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	ee10 4a10 	vmov	r4, s0
 800b4d6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800b4da:	dc56      	bgt.n	800b58a <rint+0xca>
 800b4dc:	2e00      	cmp	r6, #0
 800b4de:	da2b      	bge.n	800b538 <rint+0x78>
 800b4e0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b4e4:	4302      	orrs	r2, r0
 800b4e6:	d023      	beq.n	800b530 <rint+0x70>
 800b4e8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b4ec:	4302      	orrs	r2, r0
 800b4ee:	4254      	negs	r4, r2
 800b4f0:	4314      	orrs	r4, r2
 800b4f2:	0c4b      	lsrs	r3, r1, #17
 800b4f4:	0b24      	lsrs	r4, r4, #12
 800b4f6:	045b      	lsls	r3, r3, #17
 800b4f8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800b4fc:	ea44 0103 	orr.w	r1, r4, r3
 800b500:	460b      	mov	r3, r1
 800b502:	492f      	ldr	r1, [pc, #188]	; (800b5c0 <rint+0x100>)
 800b504:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800b508:	e9d1 6700 	ldrd	r6, r7, [r1]
 800b50c:	4602      	mov	r2, r0
 800b50e:	4639      	mov	r1, r7
 800b510:	4630      	mov	r0, r6
 800b512:	f7f4 fe6b 	bl	80001ec <__adddf3>
 800b516:	e9cd 0100 	strd	r0, r1, [sp]
 800b51a:	463b      	mov	r3, r7
 800b51c:	4632      	mov	r2, r6
 800b51e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b522:	f7f4 fe61 	bl	80001e8 <__aeabi_dsub>
 800b526:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b52a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800b52e:	4639      	mov	r1, r7
 800b530:	ec41 0b10 	vmov	d0, r0, r1
 800b534:	b003      	add	sp, #12
 800b536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b538:	4a22      	ldr	r2, [pc, #136]	; (800b5c4 <rint+0x104>)
 800b53a:	4132      	asrs	r2, r6
 800b53c:	ea01 0702 	and.w	r7, r1, r2
 800b540:	4307      	orrs	r7, r0
 800b542:	d0f5      	beq.n	800b530 <rint+0x70>
 800b544:	0852      	lsrs	r2, r2, #1
 800b546:	4011      	ands	r1, r2
 800b548:	430c      	orrs	r4, r1
 800b54a:	d00b      	beq.n	800b564 <rint+0xa4>
 800b54c:	ea23 0202 	bic.w	r2, r3, r2
 800b550:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b554:	2e13      	cmp	r6, #19
 800b556:	fa43 f306 	asr.w	r3, r3, r6
 800b55a:	bf0c      	ite	eq
 800b55c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800b560:	2400      	movne	r4, #0
 800b562:	4313      	orrs	r3, r2
 800b564:	4916      	ldr	r1, [pc, #88]	; (800b5c0 <rint+0x100>)
 800b566:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800b56a:	4622      	mov	r2, r4
 800b56c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b570:	4620      	mov	r0, r4
 800b572:	4629      	mov	r1, r5
 800b574:	f7f4 fe3a 	bl	80001ec <__adddf3>
 800b578:	e9cd 0100 	strd	r0, r1, [sp]
 800b57c:	4622      	mov	r2, r4
 800b57e:	462b      	mov	r3, r5
 800b580:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b584:	f7f4 fe30 	bl	80001e8 <__aeabi_dsub>
 800b588:	e7d2      	b.n	800b530 <rint+0x70>
 800b58a:	2e33      	cmp	r6, #51	; 0x33
 800b58c:	dd07      	ble.n	800b59e <rint+0xde>
 800b58e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b592:	d1cd      	bne.n	800b530 <rint+0x70>
 800b594:	ee10 2a10 	vmov	r2, s0
 800b598:	f7f4 fe28 	bl	80001ec <__adddf3>
 800b59c:	e7c8      	b.n	800b530 <rint+0x70>
 800b59e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800b5a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5a6:	40f2      	lsrs	r2, r6
 800b5a8:	4210      	tst	r0, r2
 800b5aa:	d0c1      	beq.n	800b530 <rint+0x70>
 800b5ac:	0852      	lsrs	r2, r2, #1
 800b5ae:	4210      	tst	r0, r2
 800b5b0:	bf1f      	itttt	ne
 800b5b2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800b5b6:	ea20 0202 	bicne.w	r2, r0, r2
 800b5ba:	4134      	asrne	r4, r6
 800b5bc:	4314      	orrne	r4, r2
 800b5be:	e7d1      	b.n	800b564 <rint+0xa4>
 800b5c0:	0800c158 	.word	0x0800c158
 800b5c4:	000fffff 	.word	0x000fffff

0800b5c8 <scalbn>:
 800b5c8:	b570      	push	{r4, r5, r6, lr}
 800b5ca:	ec55 4b10 	vmov	r4, r5, d0
 800b5ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b5d2:	4606      	mov	r6, r0
 800b5d4:	462b      	mov	r3, r5
 800b5d6:	b9aa      	cbnz	r2, 800b604 <scalbn+0x3c>
 800b5d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b5dc:	4323      	orrs	r3, r4
 800b5de:	d03b      	beq.n	800b658 <scalbn+0x90>
 800b5e0:	4b31      	ldr	r3, [pc, #196]	; (800b6a8 <scalbn+0xe0>)
 800b5e2:	4629      	mov	r1, r5
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	ee10 0a10 	vmov	r0, s0
 800b5ea:	f7f4 ffb5 	bl	8000558 <__aeabi_dmul>
 800b5ee:	4b2f      	ldr	r3, [pc, #188]	; (800b6ac <scalbn+0xe4>)
 800b5f0:	429e      	cmp	r6, r3
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	460d      	mov	r5, r1
 800b5f6:	da12      	bge.n	800b61e <scalbn+0x56>
 800b5f8:	a327      	add	r3, pc, #156	; (adr r3, 800b698 <scalbn+0xd0>)
 800b5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fe:	f7f4 ffab 	bl	8000558 <__aeabi_dmul>
 800b602:	e009      	b.n	800b618 <scalbn+0x50>
 800b604:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b608:	428a      	cmp	r2, r1
 800b60a:	d10c      	bne.n	800b626 <scalbn+0x5e>
 800b60c:	ee10 2a10 	vmov	r2, s0
 800b610:	4620      	mov	r0, r4
 800b612:	4629      	mov	r1, r5
 800b614:	f7f4 fdea 	bl	80001ec <__adddf3>
 800b618:	4604      	mov	r4, r0
 800b61a:	460d      	mov	r5, r1
 800b61c:	e01c      	b.n	800b658 <scalbn+0x90>
 800b61e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b622:	460b      	mov	r3, r1
 800b624:	3a36      	subs	r2, #54	; 0x36
 800b626:	4432      	add	r2, r6
 800b628:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b62c:	428a      	cmp	r2, r1
 800b62e:	dd0b      	ble.n	800b648 <scalbn+0x80>
 800b630:	ec45 4b11 	vmov	d1, r4, r5
 800b634:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800b6a0 <scalbn+0xd8>
 800b638:	f000 f83c 	bl	800b6b4 <copysign>
 800b63c:	a318      	add	r3, pc, #96	; (adr r3, 800b6a0 <scalbn+0xd8>)
 800b63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b642:	ec51 0b10 	vmov	r0, r1, d0
 800b646:	e7da      	b.n	800b5fe <scalbn+0x36>
 800b648:	2a00      	cmp	r2, #0
 800b64a:	dd08      	ble.n	800b65e <scalbn+0x96>
 800b64c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b650:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b654:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b658:	ec45 4b10 	vmov	d0, r4, r5
 800b65c:	bd70      	pop	{r4, r5, r6, pc}
 800b65e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b662:	da0d      	bge.n	800b680 <scalbn+0xb8>
 800b664:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b668:	429e      	cmp	r6, r3
 800b66a:	ec45 4b11 	vmov	d1, r4, r5
 800b66e:	dce1      	bgt.n	800b634 <scalbn+0x6c>
 800b670:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800b698 <scalbn+0xd0>
 800b674:	f000 f81e 	bl	800b6b4 <copysign>
 800b678:	a307      	add	r3, pc, #28	; (adr r3, 800b698 <scalbn+0xd0>)
 800b67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67e:	e7e0      	b.n	800b642 <scalbn+0x7a>
 800b680:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b684:	3236      	adds	r2, #54	; 0x36
 800b686:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b68a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b68e:	4620      	mov	r0, r4
 800b690:	4629      	mov	r1, r5
 800b692:	2200      	movs	r2, #0
 800b694:	4b06      	ldr	r3, [pc, #24]	; (800b6b0 <scalbn+0xe8>)
 800b696:	e7b2      	b.n	800b5fe <scalbn+0x36>
 800b698:	c2f8f359 	.word	0xc2f8f359
 800b69c:	01a56e1f 	.word	0x01a56e1f
 800b6a0:	8800759c 	.word	0x8800759c
 800b6a4:	7e37e43c 	.word	0x7e37e43c
 800b6a8:	43500000 	.word	0x43500000
 800b6ac:	ffff3cb0 	.word	0xffff3cb0
 800b6b0:	3c900000 	.word	0x3c900000

0800b6b4 <copysign>:
 800b6b4:	ec51 0b10 	vmov	r0, r1, d0
 800b6b8:	ee11 0a90 	vmov	r0, s3
 800b6bc:	ee10 2a10 	vmov	r2, s0
 800b6c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b6c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800b6c8:	ea41 0300 	orr.w	r3, r1, r0
 800b6cc:	ec43 2b10 	vmov	d0, r2, r3
 800b6d0:	4770      	bx	lr
	...

0800b6d4 <_init>:
 800b6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d6:	bf00      	nop
 800b6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6da:	bc08      	pop	{r3}
 800b6dc:	469e      	mov	lr, r3
 800b6de:	4770      	bx	lr

0800b6e0 <_fini>:
 800b6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6e2:	bf00      	nop
 800b6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6e6:	bc08      	pop	{r3}
 800b6e8:	469e      	mov	lr, r3
 800b6ea:	4770      	bx	lr
