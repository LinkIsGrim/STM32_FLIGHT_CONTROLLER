
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e450  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a8  0800e5f0  0800e5f0  0001e5f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee98  0800ee98  00020258  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee98  0800ee98  0001ee98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eea0  0800eea0  00020258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eea0  0800eea0  0001eea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eea4  0800eea4  0001eea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  0800eea8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048a0  20000258  0800f100  00020258  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004af8  0800f100  00024af8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d584  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005aff  00000000  00000000  0004d80c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00014093  00000000  00000000  0005330b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001d08  00000000  00000000  000673a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001d98  00000000  00000000  000690a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001d0dc  00000000  00000000  0006ae40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001b300  00000000  00000000  00087f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0009e2b9  00000000  00000000  000a321c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001414d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067d8  00000000  00000000  00141550  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000258 	.word	0x20000258
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e5d8 	.word	0x0800e5d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	0800e5d8 	.word	0x0800e5d8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <writeByte>:

//===================================================================================================================
//====== Set of useful function to access acceleration, gyroscope, and temperature data
//===================================================================================================================

void writeByte(uint8_t address_tx, uint8_t subAddress, uint8_t data) {
 8000f98:	b500      	push	{lr}
 8000f9a:	b085      	sub	sp, #20
	uint8_t data_write[2];
	data_write[0] = subAddress;
 8000f9c:	f88d 100c 	strb.w	r1, [sp, #12]
	data_write[1] = data;
 8000fa0:	f88d 200d 	strb.w	r2, [sp, #13]
	//i2c.write(address, data_write, 2, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2302      	movs	r3, #2
 8000faa:	aa03      	add	r2, sp, #12
 8000fac:	4601      	mov	r1, r0
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <writeByte+0x24>)
 8000fb0:	f002 ff38 	bl	8003e24 <HAL_I2C_Master_Transmit>
}
 8000fb4:	b005      	add	sp, #20
 8000fb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fba:	bf00      	nop
 8000fbc:	20004374 	.word	0x20004374

08000fc0 <readByte>:

//NICK - I've changed these to accept a tx address & a rx address as STM32 boards include the R/W bit at the end of 7 bit adress
//so HAL function takes in 8 bit address including R/W bit
char readByte(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress) {
 8000fc0:	b570      	push	{r4, r5, r6, lr}
 8000fc2:	b084      	sub	sp, #16
	uint8_t data[1]; // `data` will store the register data
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8000fc4:	a904      	add	r1, sp, #16
 8000fc6:	f801 2d08 	strb.w	r2, [r1, #-8]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, 1, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 8000fca:	4605      	mov	r5, r0
 8000fcc:	4c09      	ldr	r4, [pc, #36]	; (8000ff4 <readByte+0x34>)
 8000fce:	260a      	movs	r6, #10
 8000fd0:	9600      	str	r6, [sp, #0]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	460a      	mov	r2, r1
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f002 ff23 	bl	8003e24 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 8000fde:	9600      	str	r6, [sp, #0]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	aa03      	add	r2, sp, #12
 8000fe4:	4629      	mov	r1, r5
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f002 ffd6 	bl	8003f98 <HAL_I2C_Master_Receive>

	return data[0];
}
 8000fec:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8000ff0:	b004      	add	sp, #16
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
 8000ff4:	20004374 	.word	0x20004374

08000ff8 <imu_init>:
IMU_StatusTypeDef imu_init(I2C_HandleTypeDef* handle) {
 8000ff8:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(handle, 0xD0, 2, 100) == HAL_OK) {
 8000ffa:	2364      	movs	r3, #100	; 0x64
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	21d0      	movs	r1, #208	; 0xd0
 8001000:	f003 f932 	bl	8004268 <HAL_I2C_IsDeviceReady>
 8001004:	b100      	cbz	r0, 8001008 <imu_init+0x10>
 8001006:	e7fe      	b.n	8001006 <imu_init+0xe>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle LED on if so
 8001008:	2120      	movs	r1, #32
 800100a:	480a      	ldr	r0, [pc, #40]	; (8001034 <imu_init+0x3c>)
 800100c:	f002 fc1e 	bl	800384c <HAL_GPIO_TogglePin>
	uint8_t whoami = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001010:	2275      	movs	r2, #117	; 0x75
 8001012:	21d1      	movs	r1, #209	; 0xd1
 8001014:	20d0      	movs	r0, #208	; 0xd0
 8001016:	f7ff ffd3 	bl	8000fc0 <readByte>
 800101a:	4604      	mov	r4, r0
	if (whoami == 0x71) {
 800101c:	2871      	cmp	r0, #113	; 0x71
 800101e:	d106      	bne.n	800102e <imu_init+0x36>
		printf("MPU9250 online..\r\n");
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <imu_init+0x40>)
 8001022:	f009 ff6f 	bl	800af04 <puts>
		printf("whoami reg = %d ..\r\n", whoami);
 8001026:	4621      	mov	r1, r4
 8001028:	4804      	ldr	r0, [pc, #16]	; (800103c <imu_init+0x44>)
 800102a:	f009 fef7 	bl	800ae1c <iprintf>
}
 800102e:	2000      	movs	r0, #0
 8001030:	bd10      	pop	{r4, pc}
 8001032:	bf00      	nop
 8001034:	40020000 	.word	0x40020000
 8001038:	0800e628 	.word	0x0800e628
 800103c:	0800e63c 	.word	0x0800e63c

08001040 <readBytes>:

void readBytes(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress,
	uint8_t count, uint8_t * dest) {
 8001040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001044:	b088      	sub	sp, #32
 8001046:	4688      	mov	r8, r1
 8001048:	461c      	mov	r4, r3
 800104a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	uint8_t data[14];
	uint8_t data_write[1];
	data_write[0] = subAddress;
 800104c:	a908      	add	r1, sp, #32
 800104e:	f801 2d14 	strb.w	r2, [r1, #-20]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, count, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 8001052:	4e0e      	ldr	r6, [pc, #56]	; (800108c <readBytes+0x4c>)
 8001054:	270a      	movs	r7, #10
 8001056:	9700      	str	r7, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	460a      	mov	r2, r1
 800105c:	4601      	mov	r1, r0
 800105e:	4630      	mov	r0, r6
 8001060:	f002 fee0 	bl	8003e24 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 8001064:	9700      	str	r7, [sp, #0]
 8001066:	4623      	mov	r3, r4
 8001068:	aa04      	add	r2, sp, #16
 800106a:	4641      	mov	r1, r8
 800106c:	4630      	mov	r0, r6
 800106e:	f002 ff93 	bl	8003f98 <HAL_I2C_Master_Receive>

	for (int ii = 0; ii < count; ii++) {
 8001072:	2300      	movs	r3, #0
 8001074:	e005      	b.n	8001082 <readBytes+0x42>
		dest[ii] = data[ii];
 8001076:	aa08      	add	r2, sp, #32
 8001078:	441a      	add	r2, r3
 800107a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800107e:	54ea      	strb	r2, [r5, r3]
	for (int ii = 0; ii < count; ii++) {
 8001080:	3301      	adds	r3, #1
 8001082:	429c      	cmp	r4, r3
 8001084:	dcf7      	bgt.n	8001076 <readBytes+0x36>
	}
}
 8001086:	b008      	add	sp, #32
 8001088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800108c:	20004374 	.word	0x20004374

08001090 <getMres>:

void getMres() {

	switch (Mscale) {
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <getMres+0x1c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b113      	cbz	r3, 800109c <getMres+0xc>
 8001096:	2b01      	cmp	r3, #1
 8001098:	d004      	beq.n	80010a4 <getMres+0x14>
 800109a:	4770      	bx	lr
	// Possible magnetometer scales (and their register bit settings) are:
	// 14 bit resolution (0) and 16 bit resolution (1)
	case MFS_14BITS:
		mRes = 10.0 * 4219.0 / 8190.0; // Proper scale to return milliGauss
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <getMres+0x20>)
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <getMres+0x24>)
 80010a0:	601a      	str	r2, [r3, #0]
		break;
 80010a2:	4770      	bx	lr
	case MFS_16BITS:
		mRes = 10.0 * 4219.0 / 32760.0; // Proper scale to return milliGauss
 80010a4:	4b02      	ldr	r3, [pc, #8]	; (80010b0 <getMres+0x20>)
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <getMres+0x28>)
 80010a8:	601a      	str	r2, [r3, #0]
		break;
	}
}
 80010aa:	4770      	bx	lr
 80010ac:	20000001 	.word	0x20000001
 80010b0:	2000440c 	.word	0x2000440c
 80010b4:	40a4d84e 	.word	0x40a4d84e
 80010b8:	3fa4d84e 	.word	0x3fa4d84e

080010bc <getGres>:

void getGres() {
	switch (Gscale) {
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <getGres+0x30>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d812      	bhi.n	80010ea <getGres+0x2e>
 80010c4:	e8df f003 	tbb	[pc, r3]
 80010c8:	0e0a0602 	.word	0x0e0a0602
	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case GFS_250DPS:
		gRes = 250.0 / 32768.0;
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <getGres+0x34>)
 80010ce:	4a09      	ldr	r2, [pc, #36]	; (80010f4 <getGres+0x38>)
 80010d0:	601a      	str	r2, [r3, #0]
		break;
 80010d2:	4770      	bx	lr
	case GFS_500DPS:
		gRes = 500.0 / 32768.0;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <getGres+0x34>)
 80010d6:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <getGres+0x3c>)
 80010d8:	601a      	str	r2, [r3, #0]
		break;
 80010da:	4770      	bx	lr
	case GFS_1000DPS:
		gRes = 1000.0 / 32768.0;
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <getGres+0x34>)
 80010de:	4a07      	ldr	r2, [pc, #28]	; (80010fc <getGres+0x40>)
 80010e0:	601a      	str	r2, [r3, #0]
		break;
 80010e2:	4770      	bx	lr
	case GFS_2000DPS:
		gRes = 2000.0 / 32768.0;
 80010e4:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <getGres+0x34>)
 80010e6:	4a06      	ldr	r2, [pc, #24]	; (8001100 <getGres+0x44>)
 80010e8:	601a      	str	r2, [r3, #0]
		break;
	}
}
 80010ea:	4770      	bx	lr
 80010ec:	20000275 	.word	0x20000275
 80010f0:	200043f0 	.word	0x200043f0
 80010f4:	3bfa0000 	.word	0x3bfa0000
 80010f8:	3c7a0000 	.word	0x3c7a0000
 80010fc:	3cfa0000 	.word	0x3cfa0000
 8001100:	3d7a0000 	.word	0x3d7a0000

08001104 <getAres>:

void getAres() {
	switch (Ascale) {
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <getAres+0x38>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b03      	cmp	r3, #3
 800110a:	d816      	bhi.n	800113a <getAres+0x36>
 800110c:	e8df f003 	tbb	[pc, r3]
 8001110:	110c0702 	.word	0x110c0702
	// Possible accelerometer scales (and their register bit settings) are:
	// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case AFS_2G:
		aRes = 2.0 / 32768.0;
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <getAres+0x3c>)
 8001116:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800111a:	601a      	str	r2, [r3, #0]
		break;
 800111c:	4770      	bx	lr
	case AFS_4G:
		aRes = 4.0 / 32768.0;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <getAres+0x3c>)
 8001120:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001124:	601a      	str	r2, [r3, #0]
		break;
 8001126:	4770      	bx	lr
	case AFS_8G:
		aRes = 8.0 / 32768.0;
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <getAres+0x3c>)
 800112a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800112e:	601a      	str	r2, [r3, #0]
		break;
 8001130:	4770      	bx	lr
	case AFS_16G:
		aRes = 16.0 / 32768.0;
 8001132:	4b03      	ldr	r3, [pc, #12]	; (8001140 <getAres+0x3c>)
 8001134:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001138:	601a      	str	r2, [r3, #0]
		break;
	}
}
 800113a:	4770      	bx	lr
 800113c:	20000274 	.word	0x20000274
 8001140:	200043e4 	.word	0x200043e4

08001144 <readAccelData>:

void readAccelData(int16_t * destination) {
 8001144:	b510      	push	{r4, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 800114a:	ab02      	add	r3, sp, #8
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2306      	movs	r3, #6
 8001150:	223b      	movs	r2, #59	; 0x3b
 8001152:	21d1      	movs	r1, #209	; 0xd1
 8001154:	20d0      	movs	r0, #208	; 0xd0
 8001156:	f7ff ff73 	bl	8001040 <readBytes>
			&rawData[0]); // Read the six raw data registers into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800115a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800115e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001162:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001166:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001168:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800116c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001170:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001174:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001176:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800117a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800117e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001182:	80a3      	strh	r3, [r4, #4]
}
 8001184:	b004      	add	sp, #16
 8001186:	bd10      	pop	{r4, pc}

08001188 <readGyroData>:

void readGyroData(int16_t * destination) {
 8001188:	b510      	push	{r4, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 800118e:	ab02      	add	r3, sp, #8
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2306      	movs	r3, #6
 8001194:	2243      	movs	r2, #67	; 0x43
 8001196:	21d1      	movs	r1, #209	; 0xd1
 8001198:	20d0      	movs	r0, #208	; 0xd0
 800119a:	f7ff ff51 	bl	8001040 <readBytes>
			&rawData[0]); // Read the six raw data registers sequentially into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800119e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80011a2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80011a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011aa:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80011ac:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80011b0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80011b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011b8:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80011ba:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80011be:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80011c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011c6:	80a3      	strh	r3, [r4, #4]
}
 80011c8:	b004      	add	sp, #16
 80011ca:	bd10      	pop	{r4, pc}

080011cc <readMagData>:

void readMagData(int16_t * destination) {
 80011cc:	b510      	push	{r4, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	4604      	mov	r4, r0
	uint8_t rawData[7]; // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if (readByte(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
 80011d2:	2202      	movs	r2, #2
 80011d4:	2119      	movs	r1, #25
 80011d6:	2018      	movs	r0, #24
 80011d8:	f7ff fef2 	bl	8000fc0 <readByte>
 80011dc:	f010 0f01 	tst.w	r0, #1
 80011e0:	d101      	bne.n	80011e6 <readMagData+0x1a>
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
			destination[2] =
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
		}
	}
}
 80011e2:	b004      	add	sp, #16
 80011e4:	bd10      	pop	{r4, pc}
		readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_XOUT_L, 7, &rawData[0]); // Read the six raw data and ST2 registers sequentially into data array
 80011e6:	ab02      	add	r3, sp, #8
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2307      	movs	r3, #7
 80011ec:	2203      	movs	r2, #3
 80011ee:	2119      	movs	r1, #25
 80011f0:	2018      	movs	r0, #24
 80011f2:	f7ff ff25 	bl	8001040 <readBytes>
		uint8_t c = rawData[6]; // End data read by reading ST2 register
 80011f6:	f89d 300e 	ldrb.w	r3, [sp, #14]
		if (!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
 80011fa:	f013 0f08 	tst.w	r3, #8
 80011fe:	d1f0      	bne.n	80011e2 <readMagData+0x16>
					(int16_t) (((int16_t) rawData[1] << 8) | rawData[0]); // Turn the MSB and LSB into a signed 16-bit value
 8001200:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001204:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001208:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[0] =
 800120c:	8023      	strh	r3, [r4, #0]
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
 800120e:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8001212:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001216:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[1] =
 800121a:	8063      	strh	r3, [r4, #2]
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
 800121c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001220:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001224:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[2] =
 8001228:	80a3      	strh	r3, [r4, #4]
}
 800122a:	e7da      	b.n	80011e2 <readMagData+0x16>

0800122c <resetMPU9250>:
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, TEMP_OUT_H, 2,
			&rawData[0]); // Read the two raw data registers sequentially into data array
	return (int16_t) (((int16_t) rawData[0]) << 8 | rawData[1]); // Turn the MSB and LSB into a 16-bit value
}

void resetMPU9250() {
 800122c:	b508      	push	{r3, lr}
	// reset device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 800122e:	2280      	movs	r2, #128	; 0x80
 8001230:	216b      	movs	r1, #107	; 0x6b
 8001232:	20d0      	movs	r0, #208	; 0xd0
 8001234:	f7ff feb0 	bl	8000f98 <writeByte>
	HAL_Delay(100);
 8001238:	2064      	movs	r0, #100	; 0x64
 800123a:	f001 febb 	bl	8002fb4 <HAL_Delay>
}
 800123e:	bd08      	pop	{r3, pc}

08001240 <initAK8963>:

void initAK8963(float * destination) {
 8001240:	b510      	push	{r4, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	4604      	mov	r4, r0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 8001246:	2200      	movs	r2, #0
 8001248:	210a      	movs	r1, #10
 800124a:	2018      	movs	r0, #24
 800124c:	f7ff fea4 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 8001250:	200a      	movs	r0, #10
 8001252:	f001 feaf 	bl	8002fb4 <HAL_Delay>
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8001256:	220f      	movs	r2, #15
 8001258:	210a      	movs	r1, #10
 800125a:	2018      	movs	r0, #24
 800125c:	f7ff fe9c 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 8001260:	200a      	movs	r0, #10
 8001262:	f001 fea7 	bl	8002fb4 <HAL_Delay>
	readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ASAX, 3,
 8001266:	ab03      	add	r3, sp, #12
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2303      	movs	r3, #3
 800126c:	2210      	movs	r2, #16
 800126e:	2119      	movs	r1, #25
 8001270:	2018      	movs	r0, #24
 8001272:	f7ff fee5 	bl	8001040 <readBytes>
			&rawData[0]);  // Read the x-, y-, and z-axis calibration values
	destination[0] = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 8001276:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800127a:	3b80      	subs	r3, #128	; 0x80
 800127c:	ee07 3a10 	vmov	s14, r3
 8001280:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001284:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80012fc <initAK8963+0xbc>
 8001288:	ee27 7a06 	vmul.f32	s14, s14, s12
 800128c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001290:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001294:	ed84 7a00 	vstr	s14, [r4]
	destination[1] = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8001298:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800129c:	3b80      	subs	r3, #128	; 0x80
 800129e:	ee07 3a10 	vmov	s14, r3
 80012a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80012a6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80012aa:	ee37 7a26 	vadd.f32	s14, s14, s13
 80012ae:	ed84 7a01 	vstr	s14, [r4, #4]
	destination[2] = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 80012b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80012b6:	3b80      	subs	r3, #128	; 0x80
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80012c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80012c8:	edc4 7a02 	vstr	s15, [r4, #8]
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 80012cc:	2200      	movs	r2, #0
 80012ce:	210a      	movs	r1, #10
 80012d0:	2018      	movs	r0, #24
 80012d2:	f7ff fe61 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 80012d6:	200a      	movs	r0, #10
 80012d8:	f001 fe6c 	bl	8002fb4 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <initAK8963+0xc0>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4a08      	ldr	r2, [pc, #32]	; (8001304 <initAK8963+0xc4>)
 80012e2:	7812      	ldrb	r2, [r2, #0]
 80012e4:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	210a      	movs	r1, #10
 80012ec:	2018      	movs	r0, #24
 80012ee:	f7ff fe53 	bl	8000f98 <writeByte>
	HAL_Delay(10);
 80012f2:	200a      	movs	r0, #10
 80012f4:	f001 fe5e 	bl	8002fb4 <HAL_Delay>
}
 80012f8:	b004      	add	sp, #16
 80012fa:	bd10      	pop	{r4, pc}
 80012fc:	3b800000 	.word	0x3b800000
 8001300:	20000001 	.word	0x20000001
 8001304:	20000000 	.word	0x20000000

08001308 <initMPU9250>:
	    dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
	    dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];

}

void initMPU9250() {
 8001308:	b510      	push	{r4, lr}
	// Initialize MPU9250 device
	// wake up device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 800130a:	2200      	movs	r2, #0
 800130c:	216b      	movs	r1, #107	; 0x6b
 800130e:	20d0      	movs	r0, #208	; 0xd0
 8001310:	f7ff fe42 	bl	8000f98 <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8001314:	2064      	movs	r0, #100	; 0x64
 8001316:	f001 fe4d 	bl	8002fb4 <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01); // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 800131a:	2201      	movs	r2, #1
 800131c:	216b      	movs	r1, #107	; 0x6b
 800131e:	20d0      	movs	r0, #208	; 0xd0
 8001320:	f7ff fe3a 	bl	8000f98 <writeByte>

	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	// DLPF_CFG = bits 2:0 = 010 = 0x03; this sets the sample rate at 1 kHz for both
	// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x00);
 8001324:	2200      	movs	r2, #0
 8001326:	211a      	movs	r1, #26
 8001328:	20d0      	movs	r0, #208	; 0xd0
 800132a:	f7ff fe35 	bl	8000f98 <writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Use a 200 Hz rate; the same rate set in CONFIG above
 800132e:	2200      	movs	r2, #0
 8001330:	2119      	movs	r1, #25
 8001332:	20d0      	movs	r0, #208	; 0xd0
 8001334:	f7ff fe30 	bl	8000f98 <writeByte>

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX,
 8001338:	221b      	movs	r2, #27
 800133a:	21d1      	movs	r1, #209	; 0xd1
 800133c:	4608      	mov	r0, r1
 800133e:	f7ff fe3f 	bl	8000fc0 <readByte>
 8001342:	4604      	mov	r4, r0
	GYRO_CONFIG);
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8001344:	f000 021f 	and.w	r2, r0, #31
 8001348:	211b      	movs	r1, #27
 800134a:	20d0      	movs	r0, #208	; 0xd0
 800134c:	f7ff fe24 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001350:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 8001354:	211b      	movs	r1, #27
 8001356:	20d0      	movs	r0, #208	; 0xd0
 8001358:	f7ff fe1e 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro
 800135c:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <initMPU9250+0xd8>)
 800135e:	781a      	ldrb	r2, [r3, #0]
 8001360:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	211b      	movs	r1, #27
 8001368:	20d0      	movs	r0, #208	; 0xd0
 800136a:	f7ff fe15 	bl	8000f98 <writeByte>

	// Set accelerometer configuration
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG);
 800136e:	221c      	movs	r2, #28
 8001370:	21d1      	movs	r1, #209	; 0xd1
 8001372:	4608      	mov	r0, r1
 8001374:	f7ff fe24 	bl	8000fc0 <readByte>
 8001378:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 800137a:	f000 021f 	and.w	r2, r0, #31
 800137e:	211c      	movs	r1, #28
 8001380:	20d0      	movs	r0, #208	; 0xd0
 8001382:	f7ff fe09 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001386:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 800138a:	211c      	movs	r1, #28
 800138c:	20d0      	movs	r0, #208	; 0xd0
 800138e:	f7ff fe03 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <initMPU9250+0xdc>)
 8001394:	781a      	ldrb	r2, [r3, #0]
 8001396:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	211c      	movs	r1, #28
 800139e:	20d0      	movs	r0, #208	; 0xd0
 80013a0:	f7ff fdfa 	bl	8000f98 <writeByte>

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG2);
 80013a4:	221d      	movs	r2, #29
 80013a6:	21d1      	movs	r1, #209	; 0xd1
 80013a8:	4608      	mov	r0, r1
 80013aa:	f7ff fe09 	bl	8000fc0 <readByte>
 80013ae:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 80013b0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80013b4:	211d      	movs	r1, #29
 80013b6:	20d0      	movs	r0, #208	; 0xd0
 80013b8:	f7ff fdee 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c | 0x03); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 80013bc:	f044 0203 	orr.w	r2, r4, #3
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	211d      	movs	r1, #29
 80013c4:	20d0      	movs	r0, #208	; 0xd0
 80013c6:	f7ff fde7 	bl	8000f98 <writeByte>
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	writeByte(MPU9250_ADDRESS_TX, INT_PIN_CFG, 0x22);
 80013ca:	2222      	movs	r2, #34	; 0x22
 80013cc:	2137      	movs	r1, #55	; 0x37
 80013ce:	20d0      	movs	r0, #208	; 0xd0
 80013d0:	f7ff fde2 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 80013d4:	2201      	movs	r2, #1
 80013d6:	2138      	movs	r1, #56	; 0x38
 80013d8:	20d0      	movs	r0, #208	; 0xd0
 80013da:	f7ff fddd 	bl	8000f98 <writeByte>
}
 80013de:	bd10      	pop	{r4, pc}
 80013e0:	20000275 	.word	0x20000275
 80013e4:	20000274 	.word	0x20000274

080013e8 <MPU9250SelfTest>:
	dest2[2] = (float) accel_bias[2] / (float) accelsensitivity;
}

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
		{
 80013e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ec:	ed2d 8b08 	vpush	{d8-d11}
 80013f0:	b093      	sub	sp, #76	; 0x4c
 80013f2:	4605      	mov	r5, r0
	uint8_t rawData[6] = { 0, 0, 0, 0, 0, 0 };
 80013f4:	2400      	movs	r4, #0
 80013f6:	9410      	str	r4, [sp, #64]	; 0x40
 80013f8:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
	uint8_t selfTest[6];
	int16_t gAvg[3], aAvg[3], aSTAvg[3], gSTAvg[3];
	float factoryTrim[6];
	uint8_t FS = 0;

	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 80013fc:	4622      	mov	r2, r4
 80013fe:	2119      	movs	r1, #25
 8001400:	20d0      	movs	r0, #208	; 0xd0
 8001402:	f7ff fdc9 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8001406:	2202      	movs	r2, #2
 8001408:	211a      	movs	r1, #26
 800140a:	20d0      	movs	r0, #208	; 0xd0
 800140c:	f7ff fdc4 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 1 << FS); // Set full scale range for the gyro to 250 dps
 8001410:	2201      	movs	r2, #1
 8001412:	211b      	movs	r1, #27
 8001414:	20d0      	movs	r0, #208	; 0xd0
 8001416:	f7ff fdbf 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 800141a:	2202      	movs	r2, #2
 800141c:	211d      	movs	r1, #29
 800141e:	20d0      	movs	r0, #208	; 0xd0
 8001420:	f7ff fdba 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 1 << FS); // Set full scale range for the accelerometer to 2 g
 8001424:	2201      	movs	r2, #1
 8001426:	211c      	movs	r1, #28
 8001428:	20d0      	movs	r0, #208	; 0xd0
 800142a:	f7ff fdb5 	bl	8000f98 <writeByte>

	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 800142e:	e051      	b.n	80014d4 <MPU9250SelfTest+0xec>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 8001430:	ae10      	add	r6, sp, #64	; 0x40
 8001432:	9600      	str	r6, [sp, #0]
 8001434:	2306      	movs	r3, #6
 8001436:	223b      	movs	r2, #59	; 0x3b
 8001438:	21d1      	movs	r1, #209	; 0xd1
 800143a:	20d0      	movs	r0, #208	; 0xd0
 800143c:	f7ff fe00 	bl	8001040 <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001440:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001444:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001448:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800144c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8001450:	4413      	add	r3, r2
 8001452:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		aAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001456:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 800145a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800145e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001462:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8001466:	4413      	add	r3, r2
 8001468:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		aAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800146c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001470:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001474:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001478:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800147c:	4413      	add	r3, r2
 800147e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 8001482:	9600      	str	r6, [sp, #0]
 8001484:	2306      	movs	r3, #6
 8001486:	2243      	movs	r2, #67	; 0x43
 8001488:	21d1      	movs	r1, #209	; 0xd1
 800148a:	20d0      	movs	r0, #208	; 0xd0
 800148c:	f7ff fdd8 	bl	8001040 <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001490:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001494:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001498:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800149c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80014a0:	4413      	add	r3, r2
 80014a2:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		gAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80014a6:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80014aa:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80014ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014b2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80014b6:	4413      	add	r3, r2
 80014b8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		gAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80014bc:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80014c0:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 80014c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014c8:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80014cc:	4413      	add	r3, r2
 80014ce:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 80014d2:	3401      	adds	r4, #1
 80014d4:	2cc7      	cmp	r4, #199	; 0xc7
 80014d6:	ddab      	ble.n	8001430 <MPU9250SelfTest+0x48>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 80014d8:	2400      	movs	r4, #0
 80014da:	e016      	b.n	800150a <MPU9250SelfTest+0x122>
		aAvg[ii] /= 200;
 80014dc:	ab12      	add	r3, sp, #72	; 0x48
 80014de:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 80014e2:	f931 2c18 	ldrsh.w	r2, [r1, #-24]
 80014e6:	48c0      	ldr	r0, [pc, #768]	; (80017e8 <MPU9250SelfTest+0x400>)
 80014e8:	fb80 6302 	smull	r6, r3, r0, r2
 80014ec:	17d2      	asrs	r2, r2, #31
 80014ee:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 80014f2:	f821 2c18 	strh.w	r2, [r1, #-24]
		gAvg[ii] /= 200;
 80014f6:	f931 3c10 	ldrsh.w	r3, [r1, #-16]
 80014fa:	fb80 2003 	smull	r2, r0, r0, r3
 80014fe:	17db      	asrs	r3, r3, #31
 8001500:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 8001504:	f821 3c10 	strh.w	r3, [r1, #-16]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8001508:	3401      	adds	r4, #1
 800150a:	2c02      	cmp	r4, #2
 800150c:	dde6      	ble.n	80014dc <MPU9250SelfTest+0xf4>
	}

	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 800150e:	22e0      	movs	r2, #224	; 0xe0
 8001510:	211c      	movs	r1, #28
 8001512:	20d0      	movs	r0, #208	; 0xd0
 8001514:	f7ff fd40 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8001518:	22e0      	movs	r2, #224	; 0xe0
 800151a:	211b      	movs	r1, #27
 800151c:	20d0      	movs	r0, #208	; 0xd0
 800151e:	f7ff fd3b 	bl	8000f98 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 8001522:	2019      	movs	r0, #25
 8001524:	f001 fd46 	bl	8002fb4 <HAL_Delay>

	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8001528:	2400      	movs	r4, #0
 800152a:	e051      	b.n	80015d0 <MPU9250SelfTest+0x1e8>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 800152c:	ae10      	add	r6, sp, #64	; 0x40
 800152e:	9600      	str	r6, [sp, #0]
 8001530:	2306      	movs	r3, #6
 8001532:	223b      	movs	r2, #59	; 0x3b
 8001534:	21d1      	movs	r1, #209	; 0xd1
 8001536:	20d0      	movs	r0, #208	; 0xd0
 8001538:	f7ff fd82 	bl	8001040 <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800153c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001540:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001544:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001548:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 800154c:	4413      	add	r3, r2
 800154e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		aSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001552:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8001556:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800155a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800155e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8001562:	4413      	add	r3, r2
 8001564:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		aSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001568:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800156c:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001570:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001574:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8001578:	4413      	add	r3, r2
 800157a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 800157e:	9600      	str	r6, [sp, #0]
 8001580:	2306      	movs	r3, #6
 8001582:	2243      	movs	r2, #67	; 0x43
 8001584:	21d1      	movs	r1, #209	; 0xd1
 8001586:	20d0      	movs	r0, #208	; 0xd0
 8001588:	f7ff fd5a 	bl	8001040 <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 800158c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001590:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001594:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001598:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800159c:	4413      	add	r3, r2
 800159e:	f8ad 3020 	strh.w	r3, [sp, #32]
		gSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80015a2:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80015a6:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80015aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015ae:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80015b2:	4413      	add	r3, r2
 80015b4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		gSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80015b8:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80015bc:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 80015c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015c4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80015c8:	4413      	add	r3, r2
 80015ca:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 80015ce:	3401      	adds	r4, #1
 80015d0:	2cc7      	cmp	r4, #199	; 0xc7
 80015d2:	ddab      	ble.n	800152c <MPU9250SelfTest+0x144>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 80015d4:	2400      	movs	r4, #0
 80015d6:	e016      	b.n	8001606 <MPU9250SelfTest+0x21e>
		aSTAvg[ii] /= 200;
 80015d8:	ab12      	add	r3, sp, #72	; 0x48
 80015da:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 80015de:	f931 2c20 	ldrsh.w	r2, [r1, #-32]
 80015e2:	4881      	ldr	r0, [pc, #516]	; (80017e8 <MPU9250SelfTest+0x400>)
 80015e4:	fb80 6302 	smull	r6, r3, r0, r2
 80015e8:	17d2      	asrs	r2, r2, #31
 80015ea:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 80015ee:	f821 2c20 	strh.w	r2, [r1, #-32]
		gSTAvg[ii] /= 200;
 80015f2:	f931 3c28 	ldrsh.w	r3, [r1, #-40]
 80015f6:	fb80 2003 	smull	r2, r0, r0, r3
 80015fa:	17db      	asrs	r3, r3, #31
 80015fc:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 8001600:	f821 3c28 	strh.w	r3, [r1, #-40]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8001604:	3401      	adds	r4, #1
 8001606:	2c02      	cmp	r4, #2
 8001608:	dde6      	ble.n	80015d8 <MPU9250SelfTest+0x1f0>
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00);
 800160a:	2200      	movs	r2, #0
 800160c:	211c      	movs	r1, #28
 800160e:	20d0      	movs	r0, #208	; 0xd0
 8001610:	f7ff fcc2 	bl	8000f98 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00);
 8001614:	2200      	movs	r2, #0
 8001616:	211b      	movs	r1, #27
 8001618:	20d0      	movs	r0, #208	; 0xd0
 800161a:	f7ff fcbd 	bl	8000f98 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 800161e:	2019      	movs	r0, #25
 8001620:	f001 fcc8 	bl	8002fb4 <HAL_Delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001624:	220d      	movs	r2, #13
 8001626:	21d1      	movs	r1, #209	; 0xd1
 8001628:	20d0      	movs	r0, #208	; 0xd0
 800162a:	f7ff fcc9 	bl	8000fc0 <readByte>
 800162e:	ee08 0a10 	vmov	s16, r0
	SELF_TEST_X_ACCEL); // X-axis accel self-test results
	selfTest[1] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001632:	220e      	movs	r2, #14
 8001634:	21d1      	movs	r1, #209	; 0xd1
 8001636:	20d0      	movs	r0, #208	; 0xd0
 8001638:	f7ff fcc2 	bl	8000fc0 <readByte>
 800163c:	ee0b 0a10 	vmov	s22, r0
	SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
	selfTest[2] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001640:	220f      	movs	r2, #15
 8001642:	21d1      	movs	r1, #209	; 0xd1
 8001644:	20d0      	movs	r0, #208	; 0xd0
 8001646:	f7ff fcbb 	bl	8000fc0 <readByte>
 800164a:	ee0a 0a90 	vmov	s21, r0
	SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
	selfTest[3] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800164e:	2200      	movs	r2, #0
 8001650:	21d1      	movs	r1, #209	; 0xd1
 8001652:	20d0      	movs	r0, #208	; 0xd0
 8001654:	f7ff fcb4 	bl	8000fc0 <readByte>
 8001658:	ee0a 0a10 	vmov	s20, r0
	SELF_TEST_X_GYRO); // X-axis gyro self-test results
	selfTest[4] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800165c:	2201      	movs	r2, #1
 800165e:	21d1      	movs	r1, #209	; 0xd1
 8001660:	20d0      	movs	r0, #208	; 0xd0
 8001662:	f7ff fcad 	bl	8000fc0 <readByte>
 8001666:	ee09 0a90 	vmov	s19, r0
	SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
	selfTest[5] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 800166a:	2202      	movs	r2, #2
 800166c:	21d1      	movs	r1, #209	; 0xd1
 800166e:	20d0      	movs	r0, #208	; 0xd0
 8001670:	f7ff fca6 	bl	8000fc0 <readByte>
 8001674:	ee09 0a10 	vmov	s18, r0
	SELF_TEST_Z_GYRO); // Z-axis gyro self-test results

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 8001678:	eef8 7a48 	vcvt.f32.u32	s15, s16
 800167c:	ee17 0a90 	vmov	r0, s15
 8001680:	f7fe ff6a 	bl	8000558 <__aeabi_f2d>
 8001684:	2200      	movs	r2, #0
 8001686:	4b59      	ldr	r3, [pc, #356]	; (80017ec <MPU9250SelfTest+0x404>)
 8001688:	f7fe fe06 	bl	8000298 <__aeabi_dsub>
 800168c:	ed9f 8b52 	vldr	d8, [pc, #328]	; 80017d8 <MPU9250SelfTest+0x3f0>
 8001690:	ec41 0b11 	vmov	d1, r0, r1
 8001694:	eeb0 0a48 	vmov.f32	s0, s16
 8001698:	eef0 0a68 	vmov.f32	s1, s17
 800169c:	f006 ffee 	bl	800867c <pow>
 80016a0:	a34f      	add	r3, pc, #316	; (adr r3, 80017e0 <MPU9250SelfTest+0x3f8>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	ec51 0b10 	vmov	r0, r1, d0
 80016aa:	f7fe ffad 	bl	8000608 <__aeabi_dmul>
 80016ae:	f7ff faa3 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[0] = (float) (2620 / 1 << FS)
 80016b2:	9002      	str	r0, [sp, #8]
	factoryTrim[1] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 80016b4:	eef8 7a4b 	vcvt.f32.u32	s15, s22
 80016b8:	ee17 0a90 	vmov	r0, s15
 80016bc:	f7fe ff4c 	bl	8000558 <__aeabi_f2d>
 80016c0:	2200      	movs	r2, #0
 80016c2:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <MPU9250SelfTest+0x404>)
 80016c4:	f7fe fde8 	bl	8000298 <__aeabi_dsub>
 80016c8:	ec41 0b11 	vmov	d1, r0, r1
 80016cc:	eeb0 0a48 	vmov.f32	s0, s16
 80016d0:	eef0 0a68 	vmov.f32	s1, s17
 80016d4:	f006 ffd2 	bl	800867c <pow>
 80016d8:	a341      	add	r3, pc, #260	; (adr r3, 80017e0 <MPU9250SelfTest+0x3f8>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	ec51 0b10 	vmov	r0, r1, d0
 80016e2:	f7fe ff91 	bl	8000608 <__aeabi_dmul>
 80016e6:	f7ff fa87 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[1] = (float) (2620 / 1 << FS)
 80016ea:	9003      	str	r0, [sp, #12]
	factoryTrim[2] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 80016ec:	eef8 7a6a 	vcvt.f32.u32	s15, s21
 80016f0:	ee17 0a90 	vmov	r0, s15
 80016f4:	f7fe ff30 	bl	8000558 <__aeabi_f2d>
 80016f8:	2200      	movs	r2, #0
 80016fa:	4b3c      	ldr	r3, [pc, #240]	; (80017ec <MPU9250SelfTest+0x404>)
 80016fc:	f7fe fdcc 	bl	8000298 <__aeabi_dsub>
 8001700:	ec41 0b11 	vmov	d1, r0, r1
 8001704:	eeb0 0a48 	vmov.f32	s0, s16
 8001708:	eef0 0a68 	vmov.f32	s1, s17
 800170c:	f006 ffb6 	bl	800867c <pow>
 8001710:	a333      	add	r3, pc, #204	; (adr r3, 80017e0 <MPU9250SelfTest+0x3f8>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	ec51 0b10 	vmov	r0, r1, d0
 800171a:	f7fe ff75 	bl	8000608 <__aeabi_dmul>
 800171e:	f7ff fa6b 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[2] = (float) (2620 / 1 << FS)
 8001722:	9004      	str	r0, [sp, #16]
	factoryTrim[3] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 8001724:	eef8 7a4a 	vcvt.f32.u32	s15, s20
 8001728:	ee17 0a90 	vmov	r0, s15
 800172c:	f7fe ff14 	bl	8000558 <__aeabi_f2d>
 8001730:	2200      	movs	r2, #0
 8001732:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <MPU9250SelfTest+0x404>)
 8001734:	f7fe fdb0 	bl	8000298 <__aeabi_dsub>
 8001738:	ec41 0b11 	vmov	d1, r0, r1
 800173c:	eeb0 0a48 	vmov.f32	s0, s16
 8001740:	eef0 0a68 	vmov.f32	s1, s17
 8001744:	f006 ff9a 	bl	800867c <pow>
 8001748:	a325      	add	r3, pc, #148	; (adr r3, 80017e0 <MPU9250SelfTest+0x3f8>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	ec51 0b10 	vmov	r0, r1, d0
 8001752:	f7fe ff59 	bl	8000608 <__aeabi_dmul>
 8001756:	f7ff fa4f 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[3] = (float) (2620 / 1 << FS)
 800175a:	9005      	str	r0, [sp, #20]
	factoryTrim[4] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 800175c:	eef8 7a69 	vcvt.f32.u32	s15, s19
 8001760:	ee17 0a90 	vmov	r0, s15
 8001764:	f7fe fef8 	bl	8000558 <__aeabi_f2d>
 8001768:	2200      	movs	r2, #0
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <MPU9250SelfTest+0x404>)
 800176c:	f7fe fd94 	bl	8000298 <__aeabi_dsub>
 8001770:	ec41 0b11 	vmov	d1, r0, r1
 8001774:	eeb0 0a48 	vmov.f32	s0, s16
 8001778:	eef0 0a68 	vmov.f32	s1, s17
 800177c:	f006 ff7e 	bl	800867c <pow>
 8001780:	a317      	add	r3, pc, #92	; (adr r3, 80017e0 <MPU9250SelfTest+0x3f8>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	ec51 0b10 	vmov	r0, r1, d0
 800178a:	f7fe ff3d 	bl	8000608 <__aeabi_dmul>
 800178e:	f7ff fa33 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[4] = (float) (2620 / 1 << FS)
 8001792:	9006      	str	r0, [sp, #24]
	factoryTrim[5] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 8001794:	eef8 7a49 	vcvt.f32.u32	s15, s18
 8001798:	ee17 0a90 	vmov	r0, s15
 800179c:	f7fe fedc 	bl	8000558 <__aeabi_f2d>
 80017a0:	2200      	movs	r2, #0
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MPU9250SelfTest+0x404>)
 80017a4:	f7fe fd78 	bl	8000298 <__aeabi_dsub>
 80017a8:	ec41 0b11 	vmov	d1, r0, r1
 80017ac:	eeb0 0a48 	vmov.f32	s0, s16
 80017b0:	eef0 0a68 	vmov.f32	s1, s17
 80017b4:	f006 ff62 	bl	800867c <pow>
 80017b8:	a309      	add	r3, pc, #36	; (adr r3, 80017e0 <MPU9250SelfTest+0x3f8>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	ec51 0b10 	vmov	r0, r1, d0
 80017c2:	f7fe ff21 	bl	8000608 <__aeabi_dmul>
 80017c6:	f7ff fa17 	bl	8000bf8 <__aeabi_d2f>
	factoryTrim[5] = (float) (2620 / 1 << FS)
 80017ca:	9007      	str	r0, [sp, #28]

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 80017cc:	f04f 0800 	mov.w	r8, #0
 80017d0:	e05f      	b.n	8001892 <MPU9250SelfTest+0x4aa>
 80017d2:	bf00      	nop
 80017d4:	f3af 8000 	nop.w
 80017d8:	c28f5c29 	.word	0xc28f5c29
 80017dc:	3ff028f5 	.word	0x3ff028f5
 80017e0:	00000000 	.word	0x00000000
 80017e4:	40a47800 	.word	0x40a47800
 80017e8:	51eb851f 	.word	0x51eb851f
 80017ec:	3ff00000 	.word	0x3ff00000
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 80017f0:	ab12      	add	r3, sp, #72	; 0x48
 80017f2:	eb03 0448 	add.w	r4, r3, r8, lsl #1
 80017f6:	f934 0c20 	ldrsh.w	r0, [r4, #-32]
 80017fa:	f934 3c18 	ldrsh.w	r3, [r4, #-24]
 80017fe:	1ac0      	subs	r0, r0, r3
 8001800:	ee07 0a90 	vmov	s15, r0
 8001804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001808:	ee17 0a90 	vmov	r0, s15
 800180c:	f7fe fea4 	bl	8000558 <__aeabi_f2d>
 8001810:	2200      	movs	r2, #0
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <MPU9250SelfTest+0x4bc>)
 8001814:	f7fe fef8 	bl	8000608 <__aeabi_dmul>
 8001818:	4606      	mov	r6, r0
 800181a:	460f      	mov	r7, r1
				/ factoryTrim[i]; // Report percent differences
 800181c:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8001820:	ab12      	add	r3, sp, #72	; 0x48
 8001822:	444b      	add	r3, r9
 8001824:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001828:	f7fe fe96 	bl	8000558 <__aeabi_f2d>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 800182c:	44a9      	add	r9, r5
				/ factoryTrim[i]; // Report percent differences
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4630      	mov	r0, r6
 8001834:	4639      	mov	r1, r7
 8001836:	f7ff f811 	bl	800085c <__aeabi_ddiv>
 800183a:	f7ff f9dd 	bl	8000bf8 <__aeabi_d2f>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 800183e:	f8c9 0000 	str.w	r0, [r9]
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001842:	f934 0c28 	ldrsh.w	r0, [r4, #-40]
 8001846:	f934 3c10 	ldrsh.w	r3, [r4, #-16]
 800184a:	1ac0      	subs	r0, r0, r3
 800184c:	ee07 0a90 	vmov	s15, r0
 8001850:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001854:	ee17 0a90 	vmov	r0, s15
 8001858:	f7fe fe7e 	bl	8000558 <__aeabi_f2d>
 800185c:	2200      	movs	r2, #0
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MPU9250SelfTest+0x4bc>)
 8001860:	f7fe fed2 	bl	8000608 <__aeabi_dmul>
 8001864:	4606      	mov	r6, r0
 8001866:	460f      	mov	r7, r1
				/ factoryTrim[i + 3]; // Report percent differences
 8001868:	f108 0403 	add.w	r4, r8, #3
 800186c:	00a4      	lsls	r4, r4, #2
 800186e:	ab12      	add	r3, sp, #72	; 0x48
 8001870:	4423      	add	r3, r4
 8001872:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001876:	f7fe fe6f 	bl	8000558 <__aeabi_f2d>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 800187a:	442c      	add	r4, r5
				/ factoryTrim[i + 3]; // Report percent differences
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4630      	mov	r0, r6
 8001882:	4639      	mov	r1, r7
 8001884:	f7fe ffea 	bl	800085c <__aeabi_ddiv>
 8001888:	f7ff f9b6 	bl	8000bf8 <__aeabi_d2f>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 800188c:	6020      	str	r0, [r4, #0]
	for (int i = 0; i < 3; i++) {
 800188e:	f108 0801 	add.w	r8, r8, #1
 8001892:	f1b8 0f02 	cmp.w	r8, #2
 8001896:	ddab      	ble.n	80017f0 <MPU9250SelfTest+0x408>
	}

}
 8001898:	b013      	add	sp, #76	; 0x4c
 800189a:	ecbd 8b08 	vpop	{d8-d11}
 800189e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018a2:	bf00      	nop
 80018a4:	40590000 	.word	0x40590000

080018a8 <imu_calibrate>:
IMU_StatusTypeDef imu_calibrate() {
 80018a8:	b508      	push	{r3, lr}
	resetMPU9250();
 80018aa:	f7ff fcbf 	bl	800122c <resetMPU9250>
	MPU9250SelfTest(SelfTest); // Start by performing self test and reporting values
 80018ae:	480e      	ldr	r0, [pc, #56]	; (80018e8 <imu_calibrate+0x40>)
 80018b0:	f7ff fd9a 	bl	80013e8 <MPU9250SelfTest>
	HAL_Delay(500);
 80018b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018b8:	f001 fb7c 	bl	8002fb4 <HAL_Delay>
	HAL_Delay(500);
 80018bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018c0:	f001 fb78 	bl	8002fb4 <HAL_Delay>
	initMPU9250();
 80018c4:	f7ff fd20 	bl	8001308 <initMPU9250>
	initAK8963(magCalibration);
 80018c8:	4808      	ldr	r0, [pc, #32]	; (80018ec <imu_calibrate+0x44>)
 80018ca:	f7ff fcb9 	bl	8001240 <initAK8963>
	HAL_Delay(500);
 80018ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018d2:	f001 fb6f 	bl	8002fb4 <HAL_Delay>
	getAres(); // Get accelerometer sensitivity
 80018d6:	f7ff fc15 	bl	8001104 <getAres>
	getGres(); // Get gyro sensitivity
 80018da:	f7ff fbef 	bl	80010bc <getGres>
	getMres(); // Get magnetometer sensitivity
 80018de:	f7ff fbd7 	bl	8001090 <getMres>
}
 80018e2:	2000      	movs	r0, #0
 80018e4:	bd08      	pop	{r3, pc}
 80018e6:	bf00      	nop
 80018e8:	2000435c 	.word	0x2000435c
 80018ec:	2000001c 	.word	0x2000001c

080018f0 <MahonyQuaternionUpdate>:
	float q3q3 = q3 * q3;
	float q3q4 = q3 * q4;
	float q4q4 = q4 * q4;

	// Normalise accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 80018f0:	ee61 7a01 	vmul.f32	s15, s2, s2
		float gz, float mx, float my, float mz) {
 80018f4:	b530      	push	{r4, r5, lr}
	norm = sqrt(ax * ax + ay * ay + az * az);
 80018f6:	eee0 7aa0 	vfma.f32	s15, s1, s1
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 80018fa:	4cb9      	ldr	r4, [pc, #740]	; (8001be0 <MahonyQuaternionUpdate+0x2f0>)
		float gz, float mx, float my, float mz) {
 80018fc:	ed2d 8b10 	vpush	{d8-d15}
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001900:	eee0 7a00 	vfma.f32	s15, s0, s0
		float gz, float mx, float my, float mz) {
 8001904:	b089      	sub	sp, #36	; 0x24
 8001906:	eeb0 aa41 	vmov.f32	s20, s2
	norm = sqrt(ax * ax + ay * ay + az * az);
 800190a:	ee17 0a90 	vmov	r0, s15
		float gz, float mx, float my, float mz) {
 800190e:	eeb0 ca61 	vmov.f32	s24, s3
 8001912:	eeb0 ea42 	vmov.f32	s28, s4
 8001916:	eef0 da62 	vmov.f32	s27, s5
 800191a:	eef0 ba43 	vmov.f32	s23, s6
 800191e:	eeb0 ba63 	vmov.f32	s22, s7
 8001922:	eef0 ca44 	vmov.f32	s25, s8
 8001926:	eef0 8a60 	vmov.f32	s17, s1
 800192a:	eeb0 8a40 	vmov.f32	s16, s0
	norm = sqrt(ax * ax + ay * ay + az * az);
 800192e:	f7fe fe13 	bl	8000558 <__aeabi_f2d>
 8001932:	ec41 0b10 	vmov	d0, r0, r1
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 8001936:	ed94 9a00 	vldr	s18, [r4]
 800193a:	ed94 da01 	vldr	s26, [r4, #4]
 800193e:	edd4 aa02 	vldr	s21, [r4, #8]
 8001942:	edd4 9a03 	vldr	s19, [r4, #12]
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001946:	f007 f809 	bl	800895c <sqrt>
 800194a:	ec51 0b10 	vmov	r0, r1, d0
 800194e:	f7ff f953 	bl	8000bf8 <__aeabi_d2f>
 8001952:	ee0e 0a90 	vmov	s29, r0
	if (norm == 0.0f)
 8001956:	eef5 ea40 	vcmp.f32	s29, #0.0
 800195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195e:	d103      	bne.n	8001968 <MahonyQuaternionUpdate+0x78>
	q[0] = q1 * norm;
	q[1] = q2 * norm;
	q[2] = q3 * norm;
	q[3] = q4 * norm;

}
 8001960:	b009      	add	sp, #36	; 0x24
 8001962:	ecbd 8b10 	vpop	{d8-d15}
 8001966:	bd30      	pop	{r4, r5, pc}
	norm = sqrt(mx * mx + my * my + mz * mz);
 8001968:	ee6c 7aac 	vmul.f32	s15, s25, s25
 800196c:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8001970:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8001974:	ee17 0a90 	vmov	r0, s15
 8001978:	f7fe fdee 	bl	8000558 <__aeabi_f2d>
 800197c:	ec41 0b10 	vmov	d0, r0, r1
 8001980:	f006 ffec 	bl	800895c <sqrt>
 8001984:	ec51 0b10 	vmov	r0, r1, d0
 8001988:	f7ff f936 	bl	8000bf8 <__aeabi_d2f>
 800198c:	ee07 0a90 	vmov	s15, r0
	if (norm == 0.0f)
 8001990:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001998:	d0e2      	beq.n	8001960 <MahonyQuaternionUpdate+0x70>
	norm = 1.0f / norm;        // use reciprocal for division
 800199a:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
	norm = 1.0f / norm;        // use reciprocal for division
 800199e:	ee8f 4a27 	vdiv.f32	s8, s30, s15
 80019a2:	2500      	movs	r5, #0
	float q4q4 = q4 * q4;
 80019a4:	ee29 6aa9 	vmul.f32	s12, s19, s19
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019a8:	ee2d 7a4d 	vnmul.f32	s14, s26, s26
	float q2q3 = q2 * q3;
 80019ac:	ee6d 6a2a 	vmul.f32	s13, s26, s21
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019b0:	ee77 7a46 	vsub.f32	s15, s14, s12
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80019b4:	eef1 5a49 	vneg.f32	s11, s18
 80019b8:	eef0 4a46 	vmov.f32	s9, s12
 80019bc:	eef6 fa00 	vmov.f32	s31, #96	; 0x3f000000  0.5
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019c0:	eef0 3a66 	vmov.f32	s7, s13
	my *= norm;
 80019c4:	ee2b ba04 	vmul.f32	s22, s22, s8
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80019c8:	eee5 6aa9 	vfma.f32	s13, s11, s19
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019cc:	eee9 3a29 	vfma.f32	s7, s18, s19
 80019d0:	ee77 7aaf 	vadd.f32	s15, s15, s31
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80019d4:	eeea 4aaa 	vfma.f32	s9, s21, s21
	float q3q4 = q3 * q4;
 80019d8:	ee2a 5aa9 	vmul.f32	s10, s21, s19
	mx *= norm;
 80019dc:	ee6b ba84 	vmul.f32	s23, s23, s8
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019e0:	ee67 7a8b 	vmul.f32	s15, s15, s22
	norm = 1.0f / norm;        // use reciprocal for division
 80019e4:	ee8f 1a2e 	vdiv.f32	s2, s30, s29
			+ 2.0f * mz * (q3q4 - q1q2);
 80019e8:	eeb0 3a45 	vmov.f32	s6, s10
	mz *= norm;
 80019ec:	ee6c ea84 	vmul.f32	s29, s25, s8
	float q2q4 = q2 * q4;
 80019f0:	ee6d ca29 	vmul.f32	s25, s26, s19
			+ 2.0f * mz * (q3q4 - q1q2);
 80019f4:	eea5 3a8d 	vfma.f32	s6, s11, s26
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80019f8:	ee7f 4ae4 	vsub.f32	s9, s31, s9
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80019fc:	eee3 7aab 	vfma.f32	s15, s7, s23
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a00:	ee66 3a8b 	vmul.f32	s7, s13, s22
			+ 2.0f * mz * (q2q4 + q1q3);
 8001a04:	eeb0 4a6c 	vmov.f32	s8, s25
 8001a08:	eea9 4a2a 	vfma.f32	s8, s18, s21
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a0c:	eee4 3aab 	vfma.f32	s7, s9, s23
			+ 2.0f * mz * (q3q4 - q1q2);
 8001a10:	eee3 7a2e 	vfma.f32	s15, s6, s29
			+ 2.0f * mz * (q2q4 + q1q3);
 8001a14:	eee4 3a2e 	vfma.f32	s7, s8, s29
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001a18:	ee77 7aa7 	vadd.f32	s15, s15, s15
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a1c:	ee73 3aa3 	vadd.f32	s7, s7, s7
	bx = sqrt((hx * hx) + (hy * hy));
 8001a20:	ee67 7aa7 	vmul.f32	s15, s15, s15
	ax *= norm;
 8001a24:	ee28 8a01 	vmul.f32	s16, s16, s2
	bx = sqrt((hx * hx) + (hy * hy));
 8001a28:	eee3 7aa3 	vfma.f32	s15, s7, s7
	ay *= norm;
 8001a2c:	ee68 8a81 	vmul.f32	s17, s17, s2
	bx = sqrt((hx * hx) + (hy * hy));
 8001a30:	ee17 0a90 	vmov	r0, s15
	az *= norm;
 8001a34:	ee2a aa01 	vmul.f32	s20, s20, s2
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001a38:	ed8d 7a07 	vstr	s14, [sp, #28]
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a3c:	ed8d 6a06 	vstr	s12, [sp, #24]
			+ 2.0f * mz * (q3q4 - q1q2);
 8001a40:	ed8d 5a05 	vstr	s10, [sp, #20]
 8001a44:	edcd 5a04 	vstr	s11, [sp, #16]
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001a48:	edcd 6a03 	vstr	s13, [sp, #12]
 8001a4c:	edcd 4a02 	vstr	s9, [sp, #8]
			+ 2.0f * mz * (q2q4 + q1q3);
 8001a50:	ed8d 4a01 	vstr	s8, [sp, #4]
	bx = sqrt((hx * hx) + (hy * hy));
 8001a54:	f7fe fd80 	bl	8000558 <__aeabi_f2d>
 8001a58:	ec41 0b10 	vmov	d0, r0, r1
 8001a5c:	f006 ff7e 	bl	800895c <sqrt>
 8001a60:	ec51 0b10 	vmov	r0, r1, d0
 8001a64:	f7ff f8c8 	bl	8000bf8 <__aeabi_d2f>
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001a68:	ed9d 5a05 	vldr	s10, [sp, #20]
 8001a6c:	eddd 5a04 	vldr	s11, [sp, #16]
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001a70:	ed9d 7a07 	vldr	s14, [sp, #28]
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001a74:	ed9d 6a06 	vldr	s12, [sp, #24]
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001a78:	eddd 4a02 	vldr	s9, [sp, #8]
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001a7c:	ed9d 4a01 	vldr	s8, [sp, #4]
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001a80:	eddd 6a03 	vldr	s13, [sp, #12]
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001a84:	4a57      	ldr	r2, [pc, #348]	; (8001be4 <MahonyQuaternionUpdate+0x2f4>)
		eInt[0] = 0.0f;     // prevent integral wind up
 8001a86:	4b58      	ldr	r3, [pc, #352]	; (8001be8 <MahonyQuaternionUpdate+0x2f8>)
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001a88:	eea9 5a0d 	vfma.f32	s10, s18, s26
		eInt[0] = 0.0f;     // prevent integral wind up
 8001a8c:	601d      	str	r5, [r3, #0]
		eInt[1] = 0.0f;
 8001a8e:	605d      	str	r5, [r3, #4]
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001a90:	eee5 caaa 	vfma.f32	s25, s11, s21
		eInt[2] = 0.0f;
 8001a94:	609d      	str	r5, [r3, #8]
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001a96:	eeb1 3a6a 	vneg.f32	s6, s21
 8001a9a:	eef0 5a47 	vmov.f32	s11, s14
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001a9e:	ee65 7a0b 	vmul.f32	s15, s10, s22
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001aa2:	eee3 5a2a 	vfma.f32	s11, s6, s21
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001aa6:	eeec 7aab 	vfma.f32	s15, s25, s23
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001aaa:	ee75 5aaf 	vadd.f32	s11, s11, s31
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001aae:	eea9 7a09 	vfma.f32	s14, s18, s18
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001ab2:	eee5 7aae 	vfma.f32	s15, s11, s29
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001ab6:	eea3 7a2a 	vfma.f32	s14, s6, s21
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001aba:	ee77 7aa7 	vadd.f32	s15, s15, s15
	bx = sqrt((hx * hx) + (hy * hy));
 8001abe:	ee03 0a90 	vmov	s7, r0
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001ac2:	ee37 6a06 	vadd.f32	s12, s14, s12
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001ac6:	ee2c 3aa7 	vmul.f32	s6, s25, s15
	vx = 2.0f * (q2q4 - q1q3);
 8001aca:	ee7c caac 	vadd.f32	s25, s25, s25
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001ace:	eea4 3aa3 	vfma.f32	s6, s9, s7
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001ad2:	ee66 4a48 	vnmul.f32	s9, s12, s16
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001ad6:	ee25 7aa7 	vmul.f32	s14, s11, s15
	vy = 2.0f * (q1q2 + q3q4);
 8001ada:	ee75 5a05 	vadd.f32	s11, s10, s10
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001ade:	eeea 4a2c 	vfma.f32	s9, s20, s25
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001ae2:	eea4 7a23 	vfma.f32	s14, s8, s7
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001ae6:	ee25 1aca 	vnmul.f32	s2, s11, s20
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001aea:	ee65 7a27 	vmul.f32	s15, s10, s15
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001aee:	eea8 1a86 	vfma.f32	s2, s17, s12
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001af2:	ee33 5a03 	vadd.f32	s10, s6, s6
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001af6:	eee6 7aa3 	vfma.f32	s15, s13, s7
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001afa:	eef0 6a64 	vmov.f32	s13, s9
 8001afe:	eeee 6a85 	vfma.f32	s13, s29, s10
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001b02:	ee37 7a07 	vadd.f32	s14, s14, s14
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001b06:	ee6c cae8 	vnmul.f32	s25, s25, s17
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001b0a:	eeab 1a07 	vfma.f32	s2, s22, s14
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001b0e:	eee8 ca25 	vfma.f32	s25, s16, s11
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001b12:	eeeb 6ac7 	vfms.f32	s13, s23, s14
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001b16:	ee77 7aa7 	vadd.f32	s15, s15, s15
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b1a:	eeb0 8a6a 	vmov.f32	s16, s21
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001b1e:	eeae 1ae7 	vfms.f32	s2, s29, s15
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001b22:	eeeb caa7 	vfma.f32	s25, s23, s15
	gx = gx + Kp * ex + Ki * eInt[0];
 8001b26:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	gy = gy + Kp * ey + Ki * eInt[1];
 8001b2a:	eea6 eaa7 	vfma.f32	s28, s13, s15
	gx = gx + Kp * ex + Ki * eInt[0];
 8001b2e:	eea1 ca27 	vfma.f32	s24, s2, s15
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001b32:	eeeb ca45 	vfms.f32	s25, s22, s10
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001b36:	ee6a 6a8e 	vmul.f32	s13, s21, s28
	gz = gz + Kp * ez + Ki * eInt[2];
 8001b3a:	eeec daa7 	vfma.f32	s27, s25, s15
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001b3e:	eeed 6a0c 	vfma.f32	s13, s26, s24
 8001b42:	edd2 7a00 	vldr	s15, [r2]
 8001b46:	eee9 6aad 	vfma.f32	s13, s19, s27
 8001b4a:	ee67 faaf 	vmul.f32	s31, s15, s31
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b4e:	ee29 7a8c 	vmul.f32	s14, s19, s24
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001b52:	eea6 9aef 	vfms.f32	s18, s13, s31
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001b56:	ee6e 7a69 	vnmul.f32	s15, s28, s19
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b5a:	eead 7a6d 	vfms.f32	s14, s26, s27
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001b5e:	eeea 7aad 	vfma.f32	s15, s21, s27
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b62:	eeae 7a09 	vfma.f32	s14, s28, s18
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001b66:	eeec 7a09 	vfma.f32	s15, s24, s18
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8001b6a:	eea7 8a2f 	vfma.f32	s16, s14, s31
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001b6e:	ee2c ca6a 	vnmul.f32	s24, s24, s21
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001b72:	eef0 8a4d 	vmov.f32	s17, s26
 8001b76:	eee7 8aaf 	vfma.f32	s17, s15, s31
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001b7a:	eead ca0e 	vfma.f32	s24, s26, s28
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001b7e:	ee68 7a08 	vmul.f32	s15, s16, s16
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001b82:	eead ca89 	vfma.f32	s24, s27, s18
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001b86:	eee8 7aa8 	vfma.f32	s15, s17, s17
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8001b8a:	eeec 9a2f 	vfma.f32	s19, s24, s31
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8001b8e:	eee9 7a09 	vfma.f32	s15, s18, s18
 8001b92:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8001b96:	ee17 0a90 	vmov	r0, s15
 8001b9a:	f7fe fcdd 	bl	8000558 <__aeabi_f2d>
 8001b9e:	ec41 0b10 	vmov	d0, r0, r1
 8001ba2:	f006 fedb 	bl	800895c <sqrt>
 8001ba6:	ec51 0b10 	vmov	r0, r1, d0
 8001baa:	f7ff f825 	bl	8000bf8 <__aeabi_d2f>
	norm = 1.0f / norm;
 8001bae:	ee07 0a90 	vmov	s15, r0
 8001bb2:	eecf 7a27 	vdiv.f32	s15, s30, s15
	q[1] = q2 * norm;
 8001bb6:	ee68 8aa7 	vmul.f32	s17, s17, s15
	q[2] = q3 * norm;
 8001bba:	ee28 8a27 	vmul.f32	s16, s16, s15
	q[3] = q4 * norm;
 8001bbe:	ee69 9aa7 	vmul.f32	s19, s19, s15
	q[0] = q1 * norm;
 8001bc2:	ee29 9a27 	vmul.f32	s18, s18, s15
	q[1] = q2 * norm;
 8001bc6:	edc4 8a01 	vstr	s17, [r4, #4]
	q[2] = q3 * norm;
 8001bca:	ed84 8a02 	vstr	s16, [r4, #8]
	q[3] = q4 * norm;
 8001bce:	edc4 9a03 	vstr	s19, [r4, #12]
	q[0] = q1 * norm;
 8001bd2:	ed84 9a00 	vstr	s18, [r4]
}
 8001bd6:	b009      	add	sp, #36	; 0x24
 8001bd8:	ecbd 8b10 	vpop	{d8-d15}
 8001bdc:	bd30      	pop	{r4, r5, pc}
 8001bde:	bf00      	nop
 8001be0:	20000040 	.word	0x20000040
 8001be4:	2000027c 	.word	0x2000027c
 8001be8:	20000280 	.word	0x20000280
 8001bec:	00000000 	.word	0x00000000

08001bf0 <calc_RollPitchYaw>:
void calc_RollPitchYaw(float *roll, float *pitch, float *yaw) {
 8001bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bf4:	ed2d 8b04 	vpush	{d8-d9}
 8001bf8:	4606      	mov	r6, r0
 8001bfa:	468a      	mov	sl, r1
 8001bfc:	4617      	mov	r7, r2
	if (readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, INT_STATUS) & 0x01) { // On interrupt, check if data ready interrupt
 8001bfe:	223a      	movs	r2, #58	; 0x3a
 8001c00:	21d1      	movs	r1, #209	; 0xd1
 8001c02:	20d0      	movs	r0, #208	; 0xd0
 8001c04:	f7ff f9dc 	bl	8000fc0 <readByte>
 8001c08:	f010 0f01 	tst.w	r0, #1
 8001c0c:	f040 8156 	bne.w	8001ebc <calc_RollPitchYaw+0x2cc>
	Now = htim11.Instance->CNT;
 8001c10:	4b97      	ldr	r3, [pc, #604]	; (8001e70 <calc_RollPitchYaw+0x280>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c1c:	4b95      	ldr	r3, [pc, #596]	; (8001e74 <calc_RollPitchYaw+0x284>)
 8001c1e:	edc3 7a00 	vstr	s15, [r3]
	if(Now - lastUpdate < 0){
 8001c22:	4b95      	ldr	r3, [pc, #596]	; (8001e78 <calc_RollPitchYaw+0x288>)
 8001c24:	edd3 6a00 	vldr	s13, [r3]
 8001c28:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8001c2c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8001c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c34:	f100 81fc 	bmi.w	8002030 <calc_RollPitchYaw+0x440>
	deltat = (float) ((Now - lastUpdate) * (1 / (TIMER_CLK_FREQ / 100.0f))); // set integration time by time elapsed since last filter update
 8001c38:	eddf 6a90 	vldr	s13, [pc, #576]	; 8001e7c <calc_RollPitchYaw+0x28c>
 8001c3c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001c40:	4b8f      	ldr	r3, [pc, #572]	; (8001e80 <calc_RollPitchYaw+0x290>)
 8001c42:	ed83 7a00 	vstr	s14, [r3]
	lastUpdate = Now;
 8001c46:	4b8c      	ldr	r3, [pc, #560]	; (8001e78 <calc_RollPitchYaw+0x288>)
 8001c48:	edc3 7a00 	vstr	s15, [r3]
	sum += deltat;
 8001c4c:	4d8d      	ldr	r5, [pc, #564]	; (8001e84 <calc_RollPitchYaw+0x294>)
 8001c4e:	edd5 7a00 	vldr	s15, [r5]
 8001c52:	4b8b      	ldr	r3, [pc, #556]	; (8001e80 <calc_RollPitchYaw+0x290>)
 8001c54:	ed93 7a00 	vldr	s14, [r3]
 8001c58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c5c:	edc5 7a00 	vstr	s15, [r5]
	sumCount++;
 8001c60:	4c89      	ldr	r4, [pc, #548]	; (8001e88 <calc_RollPitchYaw+0x298>)
 8001c62:	6823      	ldr	r3, [r4, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	6023      	str	r3, [r4, #0]
	MahonyQuaternionUpdate(ax, ay, az, gx * PI / 180.0, gy * PI / 180.0, gz * PI / 180.0, my, mx, mz);
 8001c68:	4b88      	ldr	r3, [pc, #544]	; (8001e8c <calc_RollPitchYaw+0x29c>)
 8001c6a:	edd3 1a00 	vldr	s3, [r3]
 8001c6e:	eddf 7a88 	vldr	s15, [pc, #544]	; 8001e90 <calc_RollPitchYaw+0x2a0>
 8001c72:	ee61 1aa7 	vmul.f32	s3, s3, s15
 8001c76:	4b87      	ldr	r3, [pc, #540]	; (8001e94 <calc_RollPitchYaw+0x2a4>)
 8001c78:	ed93 2a00 	vldr	s4, [r3]
 8001c7c:	ee22 2a27 	vmul.f32	s4, s4, s15
 8001c80:	4b85      	ldr	r3, [pc, #532]	; (8001e98 <calc_RollPitchYaw+0x2a8>)
 8001c82:	edd3 2a00 	vldr	s5, [r3]
 8001c86:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8001c8a:	eddf 7a84 	vldr	s15, [pc, #528]	; 8001e9c <calc_RollPitchYaw+0x2ac>
 8001c8e:	4b84      	ldr	r3, [pc, #528]	; (8001ea0 <calc_RollPitchYaw+0x2b0>)
 8001c90:	ed93 4a00 	vldr	s8, [r3]
 8001c94:	4b83      	ldr	r3, [pc, #524]	; (8001ea4 <calc_RollPitchYaw+0x2b4>)
 8001c96:	edd3 3a00 	vldr	s7, [r3]
 8001c9a:	4b83      	ldr	r3, [pc, #524]	; (8001ea8 <calc_RollPitchYaw+0x2b8>)
 8001c9c:	ed93 3a00 	vldr	s6, [r3]
 8001ca0:	eec2 2aa7 	vdiv.f32	s5, s5, s15
 8001ca4:	ee82 2a27 	vdiv.f32	s4, s4, s15
 8001ca8:	eec1 1aa7 	vdiv.f32	s3, s3, s15
 8001cac:	4b7f      	ldr	r3, [pc, #508]	; (8001eac <calc_RollPitchYaw+0x2bc>)
 8001cae:	ed93 1a00 	vldr	s2, [r3]
 8001cb2:	4b7f      	ldr	r3, [pc, #508]	; (8001eb0 <calc_RollPitchYaw+0x2c0>)
 8001cb4:	edd3 0a00 	vldr	s1, [r3]
 8001cb8:	4b7e      	ldr	r3, [pc, #504]	; (8001eb4 <calc_RollPitchYaw+0x2c4>)
 8001cba:	ed93 0a00 	vldr	s0, [r3]
 8001cbe:	f7ff fe17 	bl	80018f0 <MahonyQuaternionUpdate>
	*yaw = atan2(2.0 * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 8001cc2:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 8001eb8 <calc_RollPitchYaw+0x2c8>
 8001cc6:	eddb 9a01 	vldr	s19, [fp, #4]
 8001cca:	ed9b 9a02 	vldr	s18, [fp, #8]
 8001cce:	ee29 7a89 	vmul.f32	s14, s19, s18
 8001cd2:	ed9b 8a00 	vldr	s16, [fp]
 8001cd6:	eddb 8a03 	vldr	s17, [fp, #12]
 8001cda:	ee68 7a28 	vmul.f32	s15, s16, s17
 8001cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce2:	ee17 0a90 	vmov	r0, s15
 8001ce6:	f7fe fc37 	bl	8000558 <__aeabi_f2d>
 8001cea:	4680      	mov	r8, r0
 8001cec:	4689      	mov	r9, r1
 8001cee:	ee28 8a08 	vmul.f32	s16, s16, s16
 8001cf2:	ee69 9aa9 	vmul.f32	s19, s19, s19
 8001cf6:	ee38 8a29 	vadd.f32	s16, s16, s19
 8001cfa:	ee29 9a09 	vmul.f32	s18, s18, s18
 8001cfe:	ee38 8a49 	vsub.f32	s16, s16, s18
 8001d02:	ee68 8aa8 	vmul.f32	s17, s17, s17
 8001d06:	ee78 7a68 	vsub.f32	s15, s16, s17
 8001d0a:	ee17 0a90 	vmov	r0, s15
 8001d0e:	f7fe fc23 	bl	8000558 <__aeabi_f2d>
 8001d12:	ec41 0b18 	vmov	d8, r0, r1
 8001d16:	4642      	mov	r2, r8
 8001d18:	464b      	mov	r3, r9
 8001d1a:	4640      	mov	r0, r8
 8001d1c:	4649      	mov	r1, r9
 8001d1e:	f7fe fabd 	bl	800029c <__adddf3>
 8001d22:	eeb0 1a48 	vmov.f32	s2, s16
 8001d26:	eef0 1a68 	vmov.f32	s3, s17
 8001d2a:	ec41 0b10 	vmov	d0, r0, r1
 8001d2e:	f006 fca3 	bl	8008678 <atan2>
 8001d32:	ec51 0b10 	vmov	r0, r1, d0
 8001d36:	f7fe ff5f 	bl	8000bf8 <__aeabi_d2f>
 8001d3a:	6038      	str	r0, [r7, #0]
	*pitch = -asin(2.0 * (q[1] * q[3] - q[0] * q[2]));
 8001d3c:	ed9b 7a01 	vldr	s14, [fp, #4]
 8001d40:	eddb 7a03 	vldr	s15, [fp, #12]
 8001d44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d48:	eddb 7a00 	vldr	s15, [fp]
 8001d4c:	eddb 6a02 	vldr	s13, [fp, #8]
 8001d50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d58:	ee17 0a90 	vmov	r0, s15
 8001d5c:	f7fe fbfc 	bl	8000558 <__aeabi_f2d>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	f7fe fa9a 	bl	800029c <__adddf3>
 8001d68:	ec41 0b10 	vmov	d0, r0, r1
 8001d6c:	f006 fc2c 	bl	80085c8 <asin>
 8001d70:	ec51 0b10 	vmov	r0, r1, d0
 8001d74:	f7fe ff40 	bl	8000bf8 <__aeabi_d2f>
 8001d78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8001d7c:	f8ca 0000 	str.w	r0, [sl]
	*roll = atan2(2.0 * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 8001d80:	ed9b 8a00 	vldr	s16, [fp]
 8001d84:	eddb 9a01 	vldr	s19, [fp, #4]
 8001d88:	ee28 7a29 	vmul.f32	s14, s16, s19
 8001d8c:	ed9b 9a02 	vldr	s18, [fp, #8]
 8001d90:	eddb 8a03 	vldr	s17, [fp, #12]
 8001d94:	ee69 7a28 	vmul.f32	s15, s18, s17
 8001d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9c:	ee17 0a90 	vmov	r0, s15
 8001da0:	f7fe fbda 	bl	8000558 <__aeabi_f2d>
 8001da4:	4680      	mov	r8, r0
 8001da6:	4689      	mov	r9, r1
 8001da8:	ee28 8a08 	vmul.f32	s16, s16, s16
 8001dac:	ee69 9aa9 	vmul.f32	s19, s19, s19
 8001db0:	ee38 8a69 	vsub.f32	s16, s16, s19
 8001db4:	ee29 9a09 	vmul.f32	s18, s18, s18
 8001db8:	ee38 8a49 	vsub.f32	s16, s16, s18
 8001dbc:	ee68 8aa8 	vmul.f32	s17, s17, s17
 8001dc0:	ee78 7a28 	vadd.f32	s15, s16, s17
 8001dc4:	ee17 0a90 	vmov	r0, s15
 8001dc8:	f7fe fbc6 	bl	8000558 <__aeabi_f2d>
 8001dcc:	ec41 0b18 	vmov	d8, r0, r1
 8001dd0:	4642      	mov	r2, r8
 8001dd2:	464b      	mov	r3, r9
 8001dd4:	4640      	mov	r0, r8
 8001dd6:	4649      	mov	r1, r9
 8001dd8:	f7fe fa60 	bl	800029c <__adddf3>
 8001ddc:	eeb0 1a48 	vmov.f32	s2, s16
 8001de0:	eef0 1a68 	vmov.f32	s3, s17
 8001de4:	ec41 0b10 	vmov	d0, r0, r1
 8001de8:	f006 fc46 	bl	8008678 <atan2>
 8001dec:	ec51 0b10 	vmov	r0, r1, d0
 8001df0:	f7fe ff02 	bl	8000bf8 <__aeabi_d2f>
 8001df4:	6030      	str	r0, [r6, #0]
	*pitch *= 180.0 / PI;
 8001df6:	f8da 0000 	ldr.w	r0, [sl]
 8001dfa:	f7fe fbad 	bl	8000558 <__aeabi_f2d>
 8001dfe:	a318      	add	r3, pc, #96	; (adr r3, 8001e60 <calc_RollPitchYaw+0x270>)
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	f7fe fc00 	bl	8000608 <__aeabi_dmul>
 8001e08:	f7fe fef6 	bl	8000bf8 <__aeabi_d2f>
 8001e0c:	f8ca 0000 	str.w	r0, [sl]
	*yaw *= 180.0 / PI;
 8001e10:	6838      	ldr	r0, [r7, #0]
 8001e12:	f7fe fba1 	bl	8000558 <__aeabi_f2d>
 8001e16:	a312      	add	r3, pc, #72	; (adr r3, 8001e60 <calc_RollPitchYaw+0x270>)
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	f7fe fbf4 	bl	8000608 <__aeabi_dmul>
 8001e20:	f7fe feea 	bl	8000bf8 <__aeabi_d2f>
	*yaw -=  -1.1; // CHANGE-> (In Leeds, UK declination = -1.1) ... Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04 (+13.8)
 8001e24:	f7fe fb98 	bl	8000558 <__aeabi_f2d>
 8001e28:	a30f      	add	r3, pc, #60	; (adr r3, 8001e68 <calc_RollPitchYaw+0x278>)
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	f7fe fa35 	bl	800029c <__adddf3>
 8001e32:	f7fe fee1 	bl	8000bf8 <__aeabi_d2f>
 8001e36:	6038      	str	r0, [r7, #0]
	*roll *= 180.0 / PI;
 8001e38:	6830      	ldr	r0, [r6, #0]
 8001e3a:	f7fe fb8d 	bl	8000558 <__aeabi_f2d>
 8001e3e:	a308      	add	r3, pc, #32	; (adr r3, 8001e60 <calc_RollPitchYaw+0x270>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	f7fe fbe0 	bl	8000608 <__aeabi_dmul>
 8001e48:	f7fe fed6 	bl	8000bf8 <__aeabi_d2f>
 8001e4c:	6030      	str	r0, [r6, #0]
	sum = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	602b      	str	r3, [r5, #0]
	sumCount = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	6023      	str	r3, [r4, #0]
}
 8001e56:	ecbd 8b04 	vpop	{d8-d9}
 8001e5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e5e:	bf00      	nop
 8001e60:	0d03cf26 	.word	0x0d03cf26
 8001e64:	404ca5dc 	.word	0x404ca5dc
 8001e68:	9999999a 	.word	0x9999999a
 8001e6c:	3ff19999 	.word	0x3ff19999
 8001e70:	20004a14 	.word	0x20004a14
 8001e74:	20000278 	.word	0x20000278
 8001e78:	2000028c 	.word	0x2000028c
 8001e7c:	358637bd 	.word	0x358637bd
 8001e80:	2000027c 	.word	0x2000027c
 8001e84:	20000290 	.word	0x20000290
 8001e88:	20000294 	.word	0x20000294
 8001e8c:	20004410 	.word	0x20004410
 8001e90:	40490fdb 	.word	0x40490fdb
 8001e94:	200043c8 	.word	0x200043c8
 8001e98:	200043ec 	.word	0x200043ec
 8001e9c:	43340000 	.word	0x43340000
 8001ea0:	200043f4 	.word	0x200043f4
 8001ea4:	20004418 	.word	0x20004418
 8001ea8:	200043dc 	.word	0x200043dc
 8001eac:	200043cc 	.word	0x200043cc
 8001eb0:	20004414 	.word	0x20004414
 8001eb4:	200043e0 	.word	0x200043e0
 8001eb8:	20000040 	.word	0x20000040
		readAccelData(accelCount);  // Read the x/y/z adc values
 8001ebc:	4c63      	ldr	r4, [pc, #396]	; (800204c <calc_RollPitchYaw+0x45c>)
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f7ff f940 	bl	8001144 <readAccelData>
		ax = (float) accelCount[0] * aRes - accelBias[0]; // get actual g value, this depends on scale being set
 8001ec4:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001ec8:	ee07 3a10 	vmov	s14, r3
 8001ecc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ed0:	4b5f      	ldr	r3, [pc, #380]	; (8002050 <calc_RollPitchYaw+0x460>)
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eda:	4b5e      	ldr	r3, [pc, #376]	; (8002054 <calc_RollPitchYaw+0x464>)
 8001edc:	edd3 6a00 	vldr	s13, [r3]
 8001ee0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001ee4:	4a5c      	ldr	r2, [pc, #368]	; (8002058 <calc_RollPitchYaw+0x468>)
 8001ee6:	ed82 7a00 	vstr	s14, [r2]
		ay = (float) accelCount[1] * aRes - accelBias[1];
 8001eea:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8001eee:	ee07 2a10 	vmov	s14, r2
 8001ef2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ef6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001efa:	edd3 6a01 	vldr	s13, [r3, #4]
 8001efe:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001f02:	4a56      	ldr	r2, [pc, #344]	; (800205c <calc_RollPitchYaw+0x46c>)
 8001f04:	ed82 7a00 	vstr	s14, [r2]
		az = (float) accelCount[2] * aRes - accelBias[2];
 8001f08:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8001f0c:	ee07 2a10 	vmov	s14, r2
 8001f10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f18:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f20:	4b4f      	ldr	r3, [pc, #316]	; (8002060 <calc_RollPitchYaw+0x470>)
 8001f22:	edc3 7a00 	vstr	s15, [r3]
		readGyroData(gyroCount);  // Read the x/y/z adc values
 8001f26:	4c4f      	ldr	r4, [pc, #316]	; (8002064 <calc_RollPitchYaw+0x474>)
 8001f28:	4620      	mov	r0, r4
 8001f2a:	f7ff f92d 	bl	8001188 <readGyroData>
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 8001f2e:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001f32:	ee07 3a10 	vmov	s14, r3
 8001f36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f3a:	4b4b      	ldr	r3, [pc, #300]	; (8002068 <calc_RollPitchYaw+0x478>)
 8001f3c:	edd3 7a00 	vldr	s15, [r3]
 8001f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f44:	4b49      	ldr	r3, [pc, #292]	; (800206c <calc_RollPitchYaw+0x47c>)
 8001f46:	edd3 6a00 	vldr	s13, [r3]
 8001f4a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001f4e:	4a48      	ldr	r2, [pc, #288]	; (8002070 <calc_RollPitchYaw+0x480>)
 8001f50:	ed82 7a00 	vstr	s14, [r2]
		gy = (float) gyroCount[1] * gRes - gyroBias[1];
 8001f54:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8001f58:	ee07 2a10 	vmov	s14, r2
 8001f5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f64:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f68:	ee37 7a66 	vsub.f32	s14, s14, s13
 8001f6c:	4a41      	ldr	r2, [pc, #260]	; (8002074 <calc_RollPitchYaw+0x484>)
 8001f6e:	ed82 7a00 	vstr	s14, [r2]
		gz = (float) gyroCount[2] * gRes - gyroBias[2];
 8001f72:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8001f76:	ee07 2a10 	vmov	s14, r2
 8001f7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f82:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f8a:	4b3b      	ldr	r3, [pc, #236]	; (8002078 <calc_RollPitchYaw+0x488>)
 8001f8c:	edc3 7a00 	vstr	s15, [r3]
		readMagData(magCount);  // Read the x/y/z adc values
 8001f90:	4c3a      	ldr	r4, [pc, #232]	; (800207c <calc_RollPitchYaw+0x48c>)
 8001f92:	4620      	mov	r0, r4
 8001f94:	f7ff f91a 	bl	80011cc <readMagData>
		mx = (float) magCount[0] * mRes * magCalibration[0] - magbias[0]; // get actual magnetometer value, this depends on scale being set
 8001f98:	f9b4 3000 	ldrsh.w	r3, [r4]
 8001f9c:	ee06 3a90 	vmov	s13, r3
 8001fa0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001fa4:	4b36      	ldr	r3, [pc, #216]	; (8002080 <calc_RollPitchYaw+0x490>)
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fae:	4a35      	ldr	r2, [pc, #212]	; (8002084 <calc_RollPitchYaw+0x494>)
 8001fb0:	ed92 7a00 	vldr	s14, [r2]
 8001fb4:	ee66 6a87 	vmul.f32	s13, s13, s14
 8001fb8:	4b33      	ldr	r3, [pc, #204]	; (8002088 <calc_RollPitchYaw+0x498>)
 8001fba:	ed93 7a00 	vldr	s14, [r3]
 8001fbe:	ee76 6ac7 	vsub.f32	s13, s13, s14
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 8001fc2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8001fc6:	ee07 1a10 	vmov	s14, r1
 8001fca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001fce:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fd2:	ed92 6a01 	vldr	s12, [r2, #4]
 8001fd6:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001fda:	ed93 6a01 	vldr	s12, [r3, #4]
 8001fde:	ee37 7a46 	vsub.f32	s14, s14, s12
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 8001fe2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8001fe6:	ee06 1a10 	vmov	s12, r1
 8001fea:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8001fee:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001ff2:	ed92 6a02 	vldr	s12, [r2, #8]
 8001ff6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001ffa:	ed93 6a02 	vldr	s12, [r3, #8]
 8001ffe:	ee77 7ac6 	vsub.f32	s15, s15, s12
		mx *= magscale[0];
 8002002:	4b22      	ldr	r3, [pc, #136]	; (800208c <calc_RollPitchYaw+0x49c>)
 8002004:	ed93 6a00 	vldr	s12, [r3]
 8002008:	ee66 6a86 	vmul.f32	s13, s13, s12
 800200c:	4a20      	ldr	r2, [pc, #128]	; (8002090 <calc_RollPitchYaw+0x4a0>)
 800200e:	edc2 6a00 	vstr	s13, [r2]
		my *= magscale[1];
 8002012:	edd3 6a01 	vldr	s13, [r3, #4]
 8002016:	ee27 7a26 	vmul.f32	s14, s14, s13
 800201a:	4a1e      	ldr	r2, [pc, #120]	; (8002094 <calc_RollPitchYaw+0x4a4>)
 800201c:	ed82 7a00 	vstr	s14, [r2]
		mz *= magscale[2];
 8002020:	ed93 7a02 	vldr	s14, [r3, #8]
 8002024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <calc_RollPitchYaw+0x4a8>)
 800202a:	edc3 7a00 	vstr	s15, [r3]
 800202e:	e5ef      	b.n	8001c10 <calc_RollPitchYaw+0x20>
		deltat = (float) (((65535-lastUpdate)+Now) * (1 / (TIMER_CLK_FREQ / 100.0f)));
 8002030:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800209c <calc_RollPitchYaw+0x4ac>
 8002034:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002038:	ee37 7a87 	vadd.f32	s14, s15, s14
 800203c:	eddf 6a18 	vldr	s13, [pc, #96]	; 80020a0 <calc_RollPitchYaw+0x4b0>
 8002040:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002044:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <calc_RollPitchYaw+0x4b4>)
 8002046:	ed83 7a00 	vstr	s14, [r3]
 800204a:	e5fc      	b.n	8001c46 <calc_RollPitchYaw+0x56>
 800204c:	20004354 	.word	0x20004354
 8002050:	200043e4 	.word	0x200043e4
 8002054:	20000004 	.word	0x20000004
 8002058:	200043e0 	.word	0x200043e0
 800205c:	20004414 	.word	0x20004414
 8002060:	200043cc 	.word	0x200043cc
 8002064:	200043d4 	.word	0x200043d4
 8002068:	200043f0 	.word	0x200043f0
 800206c:	20000010 	.word	0x20000010
 8002070:	20004410 	.word	0x20004410
 8002074:	200043c8 	.word	0x200043c8
 8002078:	200043ec 	.word	0x200043ec
 800207c:	200043fc 	.word	0x200043fc
 8002080:	2000440c 	.word	0x2000440c
 8002084:	2000001c 	.word	0x2000001c
 8002088:	20000028 	.word	0x20000028
 800208c:	20000034 	.word	0x20000034
 8002090:	20004418 	.word	0x20004418
 8002094:	200043dc 	.word	0x200043dc
 8002098:	200043f4 	.word	0x200043f4
 800209c:	477fff00 	.word	0x477fff00
 80020a0:	358637bd 	.word	0x358637bd
 80020a4:	2000027c 	.word	0x2000027c

080020a8 <NRF24_DelayMicroSeconds>:
bool SPI_RxCplt = 1;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80020a8:	b508      	push	{r3, lr}
	//	uint32_t uSecVar = uSec;
	//	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
	//	while(uSecVar--);
	DWT_Delay(uSec);
 80020aa:	f000 ff41 	bl	8002f30 <DWT_Delay>

}
 80020ae:	bd08      	pop	{r3, pc}

080020b0 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80020b0:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80020b2:	b938      	cbnz	r0, 80020c4 <NRF24_csn+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80020b4:	2200      	movs	r2, #0
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <NRF24_csn+0x24>)
 80020b8:	8819      	ldrh	r1, [r3, #0]
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <NRF24_csn+0x28>)
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	f001 fbbf 	bl	8003840 <HAL_GPIO_WritePin>
}
 80020c2:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80020c4:	2201      	movs	r2, #1
 80020c6:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <NRF24_csn+0x24>)
 80020c8:	8819      	ldrh	r1, [r3, #0]
 80020ca:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <NRF24_csn+0x28>)
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	f001 fbb7 	bl	8003840 <HAL_GPIO_WritePin>
 80020d2:	e7f6      	b.n	80020c2 <NRF24_csn+0x12>
 80020d4:	2000029a 	.word	0x2000029a
 80020d8:	2000029c 	.word	0x2000029c

080020dc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80020dc:	b508      	push	{r3, lr}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80020de:	b938      	cbnz	r0, 80020f0 <NRF24_ce+0x14>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80020e0:	2200      	movs	r2, #0
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <NRF24_ce+0x24>)
 80020e4:	8819      	ldrh	r1, [r3, #0]
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <NRF24_ce+0x28>)
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	f001 fba9 	bl	8003840 <HAL_GPIO_WritePin>
}
 80020ee:	bd08      	pop	{r3, pc}
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80020f0:	2201      	movs	r2, #1
 80020f2:	4b03      	ldr	r3, [pc, #12]	; (8002100 <NRF24_ce+0x24>)
 80020f4:	8819      	ldrh	r1, [r3, #0]
 80020f6:	4b03      	ldr	r3, [pc, #12]	; (8002104 <NRF24_ce+0x28>)
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	f001 fba1 	bl	8003840 <HAL_GPIO_WritePin>
 80020fe:	e7f6      	b.n	80020ee <NRF24_ce+0x12>
 8002100:	20000298 	.word	0x20000298
 8002104:	2000029c 	.word	0x2000029c

08002108 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8002108:	b510      	push	{r4, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	4604      	mov	r4, r0
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800210e:	2000      	movs	r0, #0
 8002110:	f7ff ffce 	bl	80020b0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8002114:	f004 041f 	and.w	r4, r4, #31
 8002118:	a902      	add	r1, sp, #8
 800211a:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 800211e:	4c0a      	ldr	r4, [pc, #40]	; (8002148 <NRF24_read_register+0x40>)
 8002120:	2302      	movs	r3, #2
 8002122:	2201      	movs	r2, #1
 8002124:	4620      	mov	r0, r4
 8002126:	f002 fd91 	bl	8004c4c <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Receive data
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1,2);
 800212a:	2302      	movs	r3, #2
 800212c:	2201      	movs	r2, #1
 800212e:	f10d 0105 	add.w	r1, sp, #5
 8002132:	4620      	mov	r0, r4
 8002134:	f002 ff6e 	bl	8005014 <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	retData = spiBuf[1];
 8002138:	f89d 4005 	ldrb.w	r4, [sp, #5]
	//Bring CSN high
	NRF24_csn(1);
 800213c:	2001      	movs	r0, #1
 800213e:	f7ff ffb7 	bl	80020b0 <NRF24_csn>
	return retData;
}
 8002142:	4620      	mov	r0, r4
 8002144:	b002      	add	sp, #8
 8002146:	bd10      	pop	{r4, pc}
 8002148:	200002a0 	.word	0x200002a0

0800214c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800214c:	b570      	push	{r4, r5, r6, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	4604      	mov	r4, r0
 8002152:	460d      	mov	r5, r1
 8002154:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8002156:	2000      	movs	r0, #0
 8002158:	f7ff ffaa 	bl	80020b0 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800215c:	f004 041f 	and.w	r4, r4, #31
 8002160:	a902      	add	r1, sp, #8
 8002162:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 8002166:	4c08      	ldr	r4, [pc, #32]	; (8002188 <NRF24_read_registerN+0x3c>)
 8002168:	2302      	movs	r3, #2
 800216a:	2201      	movs	r2, #1
 800216c:	4620      	mov	r0, r4
 800216e:	f002 fd6d 	bl	8004c4c <HAL_SPI_Transmit>
	//while(!SPI_TxCplt){
//	}
	//Receive data
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, buf, len,2);
 8002172:	2302      	movs	r3, #2
 8002174:	4632      	mov	r2, r6
 8002176:	4629      	mov	r1, r5
 8002178:	4620      	mov	r0, r4
 800217a:	f002 ff4b 	bl	8005014 <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 800217e:	2001      	movs	r0, #1
 8002180:	f7ff ff96 	bl	80020b0 <NRF24_csn>
}
 8002184:	b002      	add	sp, #8
 8002186:	bd70      	pop	{r4, r5, r6, pc}
 8002188:	200002a0 	.word	0x200002a0

0800218c <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 800218c:	b530      	push	{r4, r5, lr}
 800218e:	b083      	sub	sp, #12
 8002190:	4604      	mov	r4, r0
 8002192:	460d      	mov	r5, r1
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8002194:	2000      	movs	r0, #0
 8002196:	f7ff ff8b 	bl	80020b0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800219a:	f044 0420 	orr.w	r4, r4, #32
 800219e:	f88d 4004 	strb.w	r4, [sp, #4]
	spiBuf[1] = value;
 80021a2:	f88d 5005 	strb.w	r5, [sp, #5]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2,10);
 80021a6:	230a      	movs	r3, #10
 80021a8:	2202      	movs	r2, #2
 80021aa:	a901      	add	r1, sp, #4
 80021ac:	4803      	ldr	r0, [pc, #12]	; (80021bc <NRF24_write_register+0x30>)
 80021ae:	f002 fd4d 	bl	8004c4c <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 80021b2:	2001      	movs	r0, #1
 80021b4:	f7ff ff7c 	bl	80020b0 <NRF24_csn>
}
 80021b8:	b003      	add	sp, #12
 80021ba:	bd30      	pop	{r4, r5, pc}
 80021bc:	200002a0 	.word	0x200002a0

080021c0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80021c0:	b570      	push	{r4, r5, r6, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	4604      	mov	r4, r0
 80021c6:	460d      	mov	r5, r1
 80021c8:	4616      	mov	r6, r2
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f7ff ff70 	bl	80020b0 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80021d0:	f044 0420 	orr.w	r4, r4, #32
 80021d4:	a902      	add	r1, sp, #8
 80021d6:	f801 4d04 	strb.w	r4, [r1, #-4]!
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 80021da:	4c08      	ldr	r4, [pc, #32]	; (80021fc <NRF24_write_registerN+0x3c>)
 80021dc:	2302      	movs	r3, #2
 80021de:	2201      	movs	r2, #1
 80021e0:	4620      	mov	r0, r4
 80021e2:	f002 fd33 	bl	8004c4c <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len,2);
 80021e6:	2302      	movs	r3, #2
 80021e8:	4632      	mov	r2, r6
 80021ea:	4629      	mov	r1, r5
 80021ec:	4620      	mov	r0, r4
 80021ee:	f002 fd2d 	bl	8004c4c <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 80021f2:	2001      	movs	r0, #1
 80021f4:	f7ff ff5c 	bl	80020b0 <NRF24_csn>
}
 80021f8:	b002      	add	sp, #8
 80021fa:	bd70      	pop	{r4, r5, r6, pc}
 80021fc:	200002a0 	.word	0x200002a0

08002200 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8002200:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8002202:	21ff      	movs	r1, #255	; 0xff
 8002204:	20e1      	movs	r0, #225	; 0xe1
 8002206:	f7ff ffc1 	bl	800218c <NRF24_write_register>
}
 800220a:	bd08      	pop	{r3, pc}

0800220c <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 800220c:	b508      	push	{r3, lr}
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 800220e:	21ff      	movs	r1, #255	; 0xff
 8002210:	20e2      	movs	r0, #226	; 0xe2
 8002212:	f7ff ffbb 	bl	800218c <NRF24_write_register>
}
 8002216:	bd08      	pop	{r3, pc}

08002218 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8002218:	b508      	push	{r3, lr}
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800221a:	2007      	movs	r0, #7
 800221c:	f7ff ff74 	bl	8002108 <NRF24_read_register>
	return statReg;
}
 8002220:	bd08      	pop	{r3, pc}
	...

08002224 <NRF24_startListening>:
	NRF24_powerDown();

}
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8002224:	b508      	push	{r3, lr}
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8002226:	2000      	movs	r0, #0
 8002228:	f7ff ff6e 	bl	8002108 <NRF24_read_register>
 800222c:	f040 0103 	orr.w	r1, r0, #3
 8002230:	b2c9      	uxtb	r1, r1
 8002232:	2000      	movs	r0, #0
 8002234:	f7ff ffaa 	bl	800218c <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8002238:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <NRF24_startListening+0x40>)
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	4313      	orrs	r3, r2
 8002240:	d10a      	bne.n	8002258 <NRF24_startListening+0x34>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);

	//Flush buffers
	NRF24_flush_tx();
 8002242:	f7ff ffdd 	bl	8002200 <NRF24_flush_tx>
	NRF24_flush_rx();
 8002246:	f7ff ffe1 	bl	800220c <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 800224a:	2001      	movs	r0, #1
 800224c:	f7ff ff46 	bl	80020dc <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8002250:	2096      	movs	r0, #150	; 0x96
 8002252:	f7ff ff29 	bl	80020a8 <NRF24_DelayMicroSeconds>
}
 8002256:	bd08      	pop	{r3, pc}
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8002258:	2205      	movs	r2, #5
 800225a:	4902      	ldr	r1, [pc, #8]	; (8002264 <NRF24_startListening+0x40>)
 800225c:	200a      	movs	r0, #10
 800225e:	f7ff ffaf 	bl	80021c0 <NRF24_write_registerN>
 8002262:	e7ee      	b.n	8002242 <NRF24_startListening+0x1e>
 8002264:	20000340 	.word	0x20000340

08002268 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
	NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8002268:	b510      	push	{r4, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	e9cd 2300 	strd	r2, r3, [sp]
	if (number == 0)
 8002270:	4604      	mov	r4, r0
 8002272:	b920      	cbnz	r0, 800227e <NRF24_openReadingPipe+0x16>
		pipe0_reading_address = address;
 8002274:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <NRF24_openReadingPipe+0x60>)
 8002276:	e9dd 0100 	ldrd	r0, r1, [sp]
 800227a:	e9c3 0100 	strd	r0, r1, [r3]

	if(number <= 6)
 800227e:	2c06      	cmp	r4, #6
 8002280:	d818      	bhi.n	80022b4 <NRF24_openReadingPipe+0x4c>
	{
		if(number < 2)
 8002282:	2c01      	cmp	r4, #1
 8002284:	d918      	bls.n	80022b8 <NRF24_openReadingPipe+0x50>
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8002286:	2201      	movs	r2, #1
 8002288:	4669      	mov	r1, sp
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <NRF24_openReadingPipe+0x64>)
 800228c:	5d18      	ldrb	r0, [r3, r4]
 800228e:	f7ff ff97 	bl	80021c0 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <NRF24_openReadingPipe+0x68>)
 8002294:	7819      	ldrb	r1, [r3, #0]
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <NRF24_openReadingPipe+0x6c>)
 8002298:	5d18      	ldrb	r0, [r3, r4]
 800229a:	f7ff ff77 	bl	800218c <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 800229e:	2002      	movs	r0, #2
 80022a0:	f7ff ff32 	bl	8002108 <NRF24_read_register>
 80022a4:	b240      	sxtb	r0, r0
 80022a6:	2101      	movs	r1, #1
 80022a8:	40a1      	lsls	r1, r4
 80022aa:	4301      	orrs	r1, r0
 80022ac:	b2c9      	uxtb	r1, r1
 80022ae:	2002      	movs	r0, #2
 80022b0:	f7ff ff6c 	bl	800218c <NRF24_write_register>
	}

}
 80022b4:	b002      	add	sp, #8
 80022b6:	bd10      	pop	{r4, pc}
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80022b8:	2205      	movs	r2, #5
 80022ba:	4669      	mov	r1, sp
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <NRF24_openReadingPipe+0x64>)
 80022be:	5d18      	ldrb	r0, [r3, r4]
 80022c0:	f7ff ff7e 	bl	80021c0 <NRF24_write_registerN>
 80022c4:	e7e5      	b.n	8002292 <NRF24_openReadingPipe+0x2a>
 80022c6:	bf00      	nop
 80022c8:	20000340 	.word	0x20000340
 80022cc:	0800e654 	.word	0x0800e654
 80022d0:	20000338 	.word	0x20000338
 80022d4:	0800e65c 	.word	0x0800e65c

080022d8 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80022d8:	b508      	push	{r3, lr}
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80022da:	f001 010f 	and.w	r1, r1, #15
 80022de:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80022e2:	b2c9      	uxtb	r1, r1
 80022e4:	2004      	movs	r0, #4
 80022e6:	f7ff ff51 	bl	800218c <NRF24_write_register>
}
 80022ea:	bd08      	pop	{r3, pc}

080022ec <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80022ec:	b508      	push	{r3, lr}
	const uint8_t max_channel = 127;
	NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80022ee:	4601      	mov	r1, r0
 80022f0:	287f      	cmp	r0, #127	; 0x7f
 80022f2:	bf28      	it	cs
 80022f4:	217f      	movcs	r1, #127	; 0x7f
 80022f6:	2005      	movs	r0, #5
 80022f8:	f7ff ff48 	bl	800218c <NRF24_write_register>
}
 80022fc:	bd08      	pop	{r3, pc}
	...

08002300 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
	const uint8_t max_payload_size = 32;
	payload_size = MIN(size,max_payload_size);
 8002300:	2820      	cmp	r0, #32
 8002302:	bf28      	it	cs
 8002304:	2020      	movcs	r0, #32
 8002306:	4b01      	ldr	r3, [pc, #4]	; (800230c <NRF24_setPayloadSize+0xc>)
 8002308:	7018      	strb	r0, [r3, #0]
}
 800230a:	4770      	bx	lr
 800230c:	20000338 	.word	0x20000338

08002310 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
	return payload_size;
}
 8002310:	4b01      	ldr	r3, [pc, #4]	; (8002318 <NRF24_getPayloadSize+0x8>)
 8002312:	7818      	ldrb	r0, [r3, #0]
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000338 	.word	0x20000338

0800231c <NRF24_read_payload>:
{
 800231c:	b570      	push	{r4, r5, r6, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	4606      	mov	r6, r0
 8002322:	460d      	mov	r5, r1
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8002324:	f7ff fff4 	bl	8002310 <NRF24_getPayloadSize>
 8002328:	4604      	mov	r4, r0
 800232a:	42a8      	cmp	r0, r5
 800232c:	d817      	bhi.n	800235e <NRF24_read_payload+0x42>
	NRF24_csn(0);
 800232e:	2000      	movs	r0, #0
 8002330:	f7ff febe 	bl	80020b0 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8002334:	a902      	add	r1, sp, #8
 8002336:	2361      	movs	r3, #97	; 0x61
 8002338:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1,10);
 800233c:	4d09      	ldr	r5, [pc, #36]	; (8002364 <NRF24_read_payload+0x48>)
 800233e:	230a      	movs	r3, #10
 8002340:	2201      	movs	r2, #1
 8002342:	4628      	mov	r0, r5
 8002344:	f002 fc82 	bl	8004c4c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len,10);
 8002348:	230a      	movs	r3, #10
 800234a:	b2a2      	uxth	r2, r4
 800234c:	4631      	mov	r1, r6
 800234e:	4628      	mov	r0, r5
 8002350:	f002 fe60 	bl	8005014 <HAL_SPI_Receive>
	NRF24_csn(1);
 8002354:	2001      	movs	r0, #1
 8002356:	f7ff feab 	bl	80020b0 <NRF24_csn>
}
 800235a:	b002      	add	sp, #8
 800235c:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 800235e:	462c      	mov	r4, r5
 8002360:	e7e5      	b.n	800232e <NRF24_read_payload+0x12>
 8002362:	bf00      	nop
 8002364:	200002a0 	.word	0x200002a0

08002368 <NRF24_read>:
{
 8002368:	b510      	push	{r4, lr}
	NRF24_read_payload( buf, len );
 800236a:	f7ff ffd7 	bl	800231c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800236e:	2017      	movs	r0, #23
 8002370:	f7ff feca 	bl	8002108 <NRF24_read_register>
 8002374:	f000 0401 	and.w	r4, r0, #1
	NRF24_flush_rx();
 8002378:	f7ff ff48 	bl	800220c <NRF24_flush_rx>
}
 800237c:	4620      	mov	r0, r4
 800237e:	bd10      	pop	{r4, pc}

08002380 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8002380:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8002382:	201d      	movs	r0, #29
 8002384:	f7ff fec0 	bl	8002108 <NRF24_read_register>
 8002388:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800238c:	201d      	movs	r0, #29
 800238e:	f7ff fefd 	bl	800218c <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8002392:	2100      	movs	r1, #0
 8002394:	201c      	movs	r0, #28
 8002396:	f7ff fef9 	bl	800218c <NRF24_write_register>
	dynamic_payloads_enabled = false;
}
 800239a:	bd08      	pop	{r3, pc}

0800239c <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 800239c:	b508      	push	{r3, lr}
	if ( enable )
 800239e:	b920      	cbnz	r0, 80023aa <NRF24_setAutoAck+0xe>
		NRF24_write_register(REG_EN_AA, 0x3F);
	else
		NRF24_write_register(REG_EN_AA, 0x00);
 80023a0:	2100      	movs	r1, #0
 80023a2:	2001      	movs	r0, #1
 80023a4:	f7ff fef2 	bl	800218c <NRF24_write_register>
}
 80023a8:	bd08      	pop	{r3, pc}
		NRF24_write_register(REG_EN_AA, 0x3F);
 80023aa:	213f      	movs	r1, #63	; 0x3f
 80023ac:	2001      	movs	r0, #1
 80023ae:	f7ff feed 	bl	800218c <NRF24_write_register>
 80023b2:	e7f9      	b.n	80023a8 <NRF24_setAutoAck+0xc>

080023b4 <NRF24_setPALevel>:
		NRF24_write_register( REG_EN_AA, en_aa ) ;
	}
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80023b4:	b510      	push	{r4, lr}
 80023b6:	4604      	mov	r4, r0
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80023b8:	2006      	movs	r0, #6
 80023ba:	f7ff fea5 	bl	8002108 <NRF24_read_register>
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80023be:	f000 01f9 	and.w	r1, r0, #249	; 0xf9

	// switch uses RAM (evil!)
	if ( level == RF24_PA_0dB)
 80023c2:	2c03      	cmp	r4, #3
 80023c4:	d009      	beq.n	80023da <NRF24_setPALevel+0x26>
	{
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
	}
	else if ( level == RF24_PA_m6dB )
 80023c6:	2c02      	cmp	r4, #2
 80023c8:	d00d      	beq.n	80023e6 <NRF24_setPALevel+0x32>
	{
		setup |= _BV(RF_PWR_HIGH) ;
	}
	else if ( level == RF24_PA_m12dB )
 80023ca:	2c01      	cmp	r4, #1
 80023cc:	d00e      	beq.n	80023ec <NRF24_setPALevel+0x38>
	{
		setup |= _BV(RF_PWR_LOW);
	}
	else if ( level == RF24_PA_m18dB )
 80023ce:	b134      	cbz	r4, 80023de <NRF24_setPALevel+0x2a>
	{
		// nothing
	}
	else if ( level == RF24_PA_ERROR )
 80023d0:	2c04      	cmp	r4, #4
 80023d2:	d104      	bne.n	80023de <NRF24_setPALevel+0x2a>
	{
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80023d4:	f041 0106 	orr.w	r1, r1, #6
 80023d8:	e001      	b.n	80023de <NRF24_setPALevel+0x2a>
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80023da:	f041 0106 	orr.w	r1, r1, #6
	}

	NRF24_write_register( REG_RF_SETUP, setup ) ;
 80023de:	2006      	movs	r0, #6
 80023e0:	f7ff fed4 	bl	800218c <NRF24_write_register>
}
 80023e4:	bd10      	pop	{r4, pc}
		setup |= _BV(RF_PWR_HIGH) ;
 80023e6:	f041 0104 	orr.w	r1, r1, #4
 80023ea:	e7f8      	b.n	80023de <NRF24_setPALevel+0x2a>
		setup |= _BV(RF_PWR_LOW);
 80023ec:	f041 0102 	orr.w	r1, r1, #2
 80023f0:	e7f5      	b.n	80023de <NRF24_setPALevel+0x2a>

080023f2 <NRF24_setDataRate>:

	return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80023f2:	b538      	push	{r3, r4, r5, lr}
 80023f4:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80023f6:	2006      	movs	r0, #6
 80023f8:	f7ff fe86 	bl	8002108 <NRF24_read_register>

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false ;
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80023fc:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
	if( speed == RF24_250KBPS )
 8002400:	2d02      	cmp	r5, #2
 8002402:	d00c      	beq.n	800241e <NRF24_setDataRate+0x2c>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if ( speed == RF24_2MBPS )
 8002404:	2d01      	cmp	r5, #1
 8002406:	d00d      	beq.n	8002424 <NRF24_setDataRate+0x32>
		{
			// 1Mbs
			wide_band = false ;
		}
	}
	NRF24_write_register(REG_RF_SETUP,setup);
 8002408:	4621      	mov	r1, r4
 800240a:	2006      	movs	r0, #6
 800240c:	f7ff febe 	bl	800218c <NRF24_write_register>

	// Verify our result
	if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8002410:	2006      	movs	r0, #6
 8002412:	f7ff fe79 	bl	8002108 <NRF24_read_register>
 8002416:	42a0      	cmp	r0, r4
 8002418:	d007      	beq.n	800242a <NRF24_setDataRate+0x38>
	bool result = false;
 800241a:	2000      	movs	r0, #0
	{
		wide_band = false;
	}

	return result;
}
 800241c:	bd38      	pop	{r3, r4, r5, pc}
		setup |= _BV( RF_DR_LOW ) ;
 800241e:	f044 0420 	orr.w	r4, r4, #32
 8002422:	e7f1      	b.n	8002408 <NRF24_setDataRate+0x16>
			setup |= _BV(RF_DR_HIGH);
 8002424:	f044 0408 	orr.w	r4, r4, #8
 8002428:	e7ee      	b.n	8002408 <NRF24_setDataRate+0x16>
		result = true;
 800242a:	2001      	movs	r0, #1
 800242c:	e7f6      	b.n	800241c <NRF24_setDataRate+0x2a>

0800242e <NRF24_setCRCLength>:
	}
	return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800242e:	b510      	push	{r4, lr}
 8002430:	4604      	mov	r4, r0
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8002432:	2000      	movs	r0, #0
 8002434:	f7ff fe68 	bl	8002108 <NRF24_read_register>
 8002438:	f000 01f3 	and.w	r1, r0, #243	; 0xf3

	// switch uses RAM
	if ( length == RF24_CRC_DISABLED )
 800243c:	b11c      	cbz	r4, 8002446 <NRF24_setCRCLength+0x18>
	{
		// Do nothing, we turned it off above.
	}
	else if ( length == RF24_CRC_8 )
 800243e:	2c01      	cmp	r4, #1
 8002440:	d005      	beq.n	800244e <NRF24_setCRCLength+0x20>
		config |= _BV(BIT_EN_CRC);
	}
	else
	{
		config |= _BV(BIT_EN_CRC);
		config |= _BV( BIT_CRCO );
 8002442:	f041 010c 	orr.w	r1, r1, #12
	}
	NRF24_write_register( REG_CONFIG, config );
 8002446:	2000      	movs	r0, #0
 8002448:	f7ff fea0 	bl	800218c <NRF24_write_register>
}
 800244c:	bd10      	pop	{r4, pc}
		config |= _BV(BIT_EN_CRC);
 800244e:	f041 0108 	orr.w	r1, r1, #8
 8002452:	e7f8      	b.n	8002446 <NRF24_setCRCLength+0x18>

08002454 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8002454:	b508      	push	{r3, lr}
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8002456:	2000      	movs	r0, #0
 8002458:	f7ff fe56 	bl	8002108 <NRF24_read_register>
 800245c:	f000 01fd 	and.w	r1, r0, #253	; 0xfd
 8002460:	2000      	movs	r0, #0
 8002462:	f7ff fe93 	bl	800218c <NRF24_write_register>
}
 8002466:	bd08      	pop	{r3, pc}

08002468 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8002468:	b570      	push	{r4, r5, r6, lr}
 800246a:	4606      	mov	r6, r0
	uint8_t status = NRF24_get_status();
 800246c:	f7ff fed4 	bl	8002218 <NRF24_get_status>
 8002470:	f000 0340 	and.w	r3, r0, #64	; 0x40

	bool result = ( status & _BV(BIT_RX_DR) );
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf14      	ite	ne
 8002478:	2501      	movne	r5, #1
 800247a:	2500      	moveq	r5, #0

	if (result)
 800247c:	d00b      	beq.n	8002496 <NRF24_availablePipe+0x2e>
 800247e:	4604      	mov	r4, r0
	{
		// If the caller wants the pipe number, include that
		if ( pipe_num )
 8002480:	b116      	cbz	r6, 8002488 <NRF24_availablePipe+0x20>
			*pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8002482:	f3c0 0342 	ubfx	r3, r0, #1, #3
 8002486:	7033      	strb	r3, [r6, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8002488:	2140      	movs	r1, #64	; 0x40
 800248a:	2007      	movs	r0, #7
 800248c:	f7ff fe7e 	bl	800218c <NRF24_write_register>

		// Handle ack payload receipt
		if ( status & _BV(BIT_TX_DS) )
 8002490:	f014 0f20 	tst.w	r4, #32
 8002494:	d101      	bne.n	800249a <NRF24_availablePipe+0x32>
		{
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
		}
	}
	return result;
}
 8002496:	4628      	mov	r0, r5
 8002498:	bd70      	pop	{r4, r5, r6, pc}
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800249a:	2120      	movs	r1, #32
 800249c:	2007      	movs	r0, #7
 800249e:	f7ff fe75 	bl	800218c <NRF24_write_register>
 80024a2:	e7f8      	b.n	8002496 <NRF24_availablePipe+0x2e>

080024a4 <NRF24_available>:
{
 80024a4:	b508      	push	{r3, lr}
	return NRF24_availablePipe(NULL);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7ff ffde 	bl	8002468 <NRF24_availablePipe>
}
 80024ac:	bd08      	pop	{r3, pc}

080024ae <NRF24_writeAckPayload>:
	NRF24_DelayMicroSeconds(15);
	NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 80024ae:	b570      	push	{r4, r5, r6, lr}
 80024b0:	4604      	mov	r4, r0
 80024b2:	460d      	mov	r5, r1
	const uint8_t* current = (uint8_t *)buf;
	const uint8_t max_payload_size = 32;
	uint8_t data_len = MIN(len,max_payload_size);
 80024b4:	2a20      	cmp	r2, #32
 80024b6:	bf28      	it	cs
 80024b8:	2220      	movcs	r2, #32
 80024ba:	4616      	mov	r6, r2

	NRF24_csn(0);
 80024bc:	2000      	movs	r0, #0
 80024be:	f7ff fdf7 	bl	80020b0 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 80024c2:	f004 0007 	and.w	r0, r4, #7
 80024c6:	4632      	mov	r2, r6
 80024c8:	4629      	mov	r1, r5
 80024ca:	f040 00a8 	orr.w	r0, r0, #168	; 0xa8
 80024ce:	f7ff fe77 	bl	80021c0 <NRF24_write_registerN>
	NRF24_csn(1);
 80024d2:	2001      	movs	r0, #1
 80024d4:	f7ff fdec 	bl	80020b0 <NRF24_csn>
}
 80024d8:	bd70      	pop	{r4, r5, r6, pc}

080024da <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80024da:	b508      	push	{r3, lr}
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80024dc:	2170      	movs	r1, #112	; 0x70
 80024de:	2007      	movs	r0, #7
 80024e0:	f7ff fe54 	bl	800218c <NRF24_write_register>
}
 80024e4:	bd08      	pop	{r3, pc}
	...

080024e8 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80024e8:	b500      	push	{lr}
 80024ea:	b083      	sub	sp, #12
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7ff fddf 	bl	80020b0 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80024f2:	2350      	movs	r3, #80	; 0x50
 80024f4:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdRxBuf[1] = 0x73;
 80024f8:	2373      	movs	r3, #115	; 0x73
 80024fa:	f88d 3005 	strb.w	r3, [sp, #5]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2,2);
 80024fe:	2302      	movs	r3, #2
 8002500:	461a      	mov	r2, r3
 8002502:	a901      	add	r1, sp, #4
 8002504:	4804      	ldr	r0, [pc, #16]	; (8002518 <NRF24_ACTIVATE_cmd+0x30>)
 8002506:	f002 fba1 	bl	8004c4c <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}

	NRF24_csn(1);
 800250a:	2001      	movs	r0, #1
 800250c:	f7ff fdd0 	bl	80020b0 <NRF24_csn>
}
 8002510:	b003      	add	sp, #12
 8002512:	f85d fb04 	ldr.w	pc, [sp], #4
 8002516:	bf00      	nop
 8002518:	200002a0 	.word	0x200002a0

0800251c <NRF24_enableAckPayload>:
{
 800251c:	b508      	push	{r3, lr}
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800251e:	201d      	movs	r0, #29
 8002520:	f7ff fdf2 	bl	8002108 <NRF24_read_register>
 8002524:	f040 0106 	orr.w	r1, r0, #6
 8002528:	b2c9      	uxtb	r1, r1
 800252a:	201d      	movs	r0, #29
 800252c:	f7ff fe2e 	bl	800218c <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8002530:	201d      	movs	r0, #29
 8002532:	f7ff fde9 	bl	8002108 <NRF24_read_register>
 8002536:	b148      	cbz	r0, 800254c <NRF24_enableAckPayload+0x30>
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8002538:	201c      	movs	r0, #28
 800253a:	f7ff fde5 	bl	8002108 <NRF24_read_register>
 800253e:	f040 0103 	orr.w	r1, r0, #3
 8002542:	b2c9      	uxtb	r1, r1
 8002544:	201c      	movs	r0, #28
 8002546:	f7ff fe21 	bl	800218c <NRF24_write_register>
}
 800254a:	bd08      	pop	{r3, pc}
		NRF24_ACTIVATE_cmd();
 800254c:	f7ff ffcc 	bl	80024e8 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8002550:	201d      	movs	r0, #29
 8002552:	f7ff fdd9 	bl	8002108 <NRF24_read_register>
 8002556:	f040 0106 	orr.w	r1, r0, #6
 800255a:	b2c9      	uxtb	r1, r1
 800255c:	201d      	movs	r0, #29
 800255e:	f7ff fe15 	bl	800218c <NRF24_write_register>
 8002562:	e7e9      	b.n	8002538 <NRF24_enableAckPayload+0x1c>

08002564 <NRF24_begin>:
{
 8002564:	b082      	sub	sp, #8
 8002566:	b570      	push	{r4, r5, r6, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	4606      	mov	r6, r0
 800256c:	460d      	mov	r5, r1
 800256e:	4614      	mov	r4, r2
 8002570:	9307      	str	r3, [sp, #28]
	memcpy(&nrf24_hspi, &hspi2, sizeof(hspi2));
 8002572:	2258      	movs	r2, #88	; 0x58
 8002574:	4961      	ldr	r1, [pc, #388]	; (80026fc <NRF24_begin+0x198>)
 8002576:	4862      	ldr	r0, [pc, #392]	; (8002700 <NRF24_begin+0x19c>)
 8002578:	f007 fdff 	bl	800a17a <memcpy>
	nrf24_PORT = nrf24PORT;
 800257c:	4b61      	ldr	r3, [pc, #388]	; (8002704 <NRF24_begin+0x1a0>)
 800257e:	601e      	str	r6, [r3, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8002580:	4b61      	ldr	r3, [pc, #388]	; (8002708 <NRF24_begin+0x1a4>)
 8002582:	801d      	strh	r5, [r3, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8002584:	4b61      	ldr	r3, [pc, #388]	; (800270c <NRF24_begin+0x1a8>)
 8002586:	801c      	strh	r4, [r3, #0]
	NRF24_csn(1);
 8002588:	2001      	movs	r0, #1
 800258a:	f7ff fd91 	bl	80020b0 <NRF24_csn>
	NRF24_ce(0);
 800258e:	2000      	movs	r0, #0
 8002590:	f7ff fda4 	bl	80020dc <NRF24_ce>
	HAL_Delay(5);
 8002594:	2005      	movs	r0, #5
 8002596:	f000 fd0d 	bl	8002fb4 <HAL_Delay>
	NRF24_write_register(0x00, 0x08);
 800259a:	2108      	movs	r1, #8
 800259c:	2000      	movs	r0, #0
 800259e:	f7ff fdf5 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80025a2:	213f      	movs	r1, #63	; 0x3f
 80025a4:	2001      	movs	r0, #1
 80025a6:	f7ff fdf1 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80025aa:	2103      	movs	r1, #3
 80025ac:	2002      	movs	r0, #2
 80025ae:	f7ff fded 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80025b2:	2103      	movs	r1, #3
 80025b4:	4608      	mov	r0, r1
 80025b6:	f7ff fde9 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80025ba:	2103      	movs	r1, #3
 80025bc:	2004      	movs	r0, #4
 80025be:	f7ff fde5 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80025c2:	2102      	movs	r1, #2
 80025c4:	2005      	movs	r0, #5
 80025c6:	f7ff fde1 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80025ca:	210f      	movs	r1, #15
 80025cc:	2006      	movs	r0, #6
 80025ce:	f7ff fddd 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80025d2:	210e      	movs	r1, #14
 80025d4:	2007      	movs	r0, #7
 80025d6:	f7ff fdd9 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80025da:	2100      	movs	r1, #0
 80025dc:	2008      	movs	r0, #8
 80025de:	f7ff fdd5 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80025e2:	2100      	movs	r1, #0
 80025e4:	2009      	movs	r0, #9
 80025e6:	f7ff fdd1 	bl	800218c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80025ea:	24e7      	movs	r4, #231	; 0xe7
 80025ec:	f88d 4004 	strb.w	r4, [sp, #4]
 80025f0:	f88d 4003 	strb.w	r4, [sp, #3]
 80025f4:	f88d 4002 	strb.w	r4, [sp, #2]
 80025f8:	f88d 4001 	strb.w	r4, [sp, #1]
 80025fc:	ad02      	add	r5, sp, #8
 80025fe:	f805 4d08 	strb.w	r4, [r5, #-8]!
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8002602:	2205      	movs	r2, #5
 8002604:	4629      	mov	r1, r5
 8002606:	200a      	movs	r0, #10
 8002608:	f7ff fdda 	bl	80021c0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800260c:	23c2      	movs	r3, #194	; 0xc2
 800260e:	f88d 3004 	strb.w	r3, [sp, #4]
 8002612:	f88d 3003 	strb.w	r3, [sp, #3]
 8002616:	f88d 3002 	strb.w	r3, [sp, #2]
 800261a:	f88d 3001 	strb.w	r3, [sp, #1]
 800261e:	f88d 3000 	strb.w	r3, [sp]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8002622:	2205      	movs	r2, #5
 8002624:	4629      	mov	r1, r5
 8002626:	200b      	movs	r0, #11
 8002628:	f7ff fdca 	bl	80021c0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800262c:	21c3      	movs	r1, #195	; 0xc3
 800262e:	200c      	movs	r0, #12
 8002630:	f7ff fdac 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8002634:	21c4      	movs	r1, #196	; 0xc4
 8002636:	200d      	movs	r0, #13
 8002638:	f7ff fda8 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800263c:	21c5      	movs	r1, #197	; 0xc5
 800263e:	200e      	movs	r0, #14
 8002640:	f7ff fda4 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8002644:	21c6      	movs	r1, #198	; 0xc6
 8002646:	200f      	movs	r0, #15
 8002648:	f7ff fda0 	bl	800218c <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800264c:	f88d 4004 	strb.w	r4, [sp, #4]
 8002650:	f88d 4003 	strb.w	r4, [sp, #3]
 8002654:	f88d 4002 	strb.w	r4, [sp, #2]
 8002658:	f88d 4001 	strb.w	r4, [sp, #1]
 800265c:	f88d 4000 	strb.w	r4, [sp]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8002660:	2205      	movs	r2, #5
 8002662:	4629      	mov	r1, r5
 8002664:	2010      	movs	r0, #16
 8002666:	f7ff fdab 	bl	80021c0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800266a:	2100      	movs	r1, #0
 800266c:	2011      	movs	r0, #17
 800266e:	f7ff fd8d 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8002672:	2100      	movs	r1, #0
 8002674:	2012      	movs	r0, #18
 8002676:	f7ff fd89 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800267a:	2100      	movs	r1, #0
 800267c:	2013      	movs	r0, #19
 800267e:	f7ff fd85 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8002682:	2100      	movs	r1, #0
 8002684:	2014      	movs	r0, #20
 8002686:	f7ff fd81 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800268a:	2100      	movs	r1, #0
 800268c:	2015      	movs	r0, #21
 800268e:	f7ff fd7d 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8002692:	2100      	movs	r1, #0
 8002694:	2016      	movs	r0, #22
 8002696:	f7ff fd79 	bl	800218c <NRF24_write_register>
	NRF24_ACTIVATE_cmd();
 800269a:	f7ff ff25 	bl	80024e8 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800269e:	2100      	movs	r1, #0
 80026a0:	201c      	movs	r0, #28
 80026a2:	f7ff fd73 	bl	800218c <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80026a6:	2100      	movs	r1, #0
 80026a8:	201d      	movs	r0, #29
 80026aa:	f7ff fd6f 	bl	800218c <NRF24_write_register>
	NRF24_setRetries(15, 15);
 80026ae:	210f      	movs	r1, #15
 80026b0:	4608      	mov	r0, r1
 80026b2:	f7ff fe11 	bl	80022d8 <NRF24_setRetries>
	NRF24_setPALevel(RF24_PA_m6dB);
 80026b6:	2002      	movs	r0, #2
 80026b8:	f7ff fe7c 	bl	80023b4 <NRF24_setPALevel>
	NRF24_setDataRate(RF24_1MBPS);
 80026bc:	2000      	movs	r0, #0
 80026be:	f7ff fe98 	bl	80023f2 <NRF24_setDataRate>
	NRF24_setCRCLength(RF24_CRC_16);
 80026c2:	2002      	movs	r0, #2
 80026c4:	f7ff feb3 	bl	800242e <NRF24_setCRCLength>
	NRF24_disableDynamicPayloads();
 80026c8:	f7ff fe5a 	bl	8002380 <NRF24_disableDynamicPayloads>
	NRF24_setPayloadSize(32);
 80026cc:	2020      	movs	r0, #32
 80026ce:	f7ff fe17 	bl	8002300 <NRF24_setPayloadSize>
	NRF24_setAutoAck(true);
 80026d2:	2001      	movs	r0, #1
 80026d4:	f7ff fe62 	bl	800239c <NRF24_setAutoAck>
	NRF24_enableAckPayload();
 80026d8:	f7ff ff20 	bl	800251c <NRF24_enableAckPayload>
	NRF24_resetStatus();
 80026dc:	f7ff fefd 	bl	80024da <NRF24_resetStatus>
	NRF24_setChannel(76);
 80026e0:	204c      	movs	r0, #76	; 0x4c
 80026e2:	f7ff fe03 	bl	80022ec <NRF24_setChannel>
	NRF24_flush_tx();
 80026e6:	f7ff fd8b 	bl	8002200 <NRF24_flush_tx>
	NRF24_flush_rx();
 80026ea:	f7ff fd8f 	bl	800220c <NRF24_flush_rx>
	NRF24_powerDown();
 80026ee:	f7ff feb1 	bl	8002454 <NRF24_powerDown>
}
 80026f2:	b002      	add	sp, #8
 80026f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80026f8:	b002      	add	sp, #8
 80026fa:	4770      	bx	lr
 80026fc:	2000493c 	.word	0x2000493c
 8002700:	200002a0 	.word	0x200002a0
 8002704:	2000029c 	.word	0x2000029c
 8002708:	2000029a 	.word	0x2000029a
 800270c:	20000298 	.word	0x20000298

08002710 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8002710:	b570      	push	{r4, r5, r6, lr}
 8002712:	b0a0      	sub	sp, #128	; 0x80
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002714:	ac07      	add	r4, sp, #28
 8002716:	4dc4      	ldr	r5, [pc, #784]	; (8002a28 <printRadioSettings+0x318>)
 8002718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800271a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800271c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800271e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002724:	682b      	ldr	r3, [r5, #0]
 8002726:	f824 3b02 	strh.w	r3, [r4], #2
 800272a:	0c1b      	lsrs	r3, r3, #16
 800272c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800272e:	a807      	add	r0, sp, #28
 8002730:	f7fd fd56 	bl	80001e0 <strlen>
 8002734:	230a      	movs	r3, #10
 8002736:	b282      	uxth	r2, r0
 8002738:	a907      	add	r1, sp, #28
 800273a:	48bc      	ldr	r0, [pc, #752]	; (8002a2c <printRadioSettings+0x31c>)
 800273c:	f003 face 	bl	8005cdc <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8002740:	2000      	movs	r0, #0
 8002742:	f7ff fce1 	bl	8002108 <NRF24_read_register>
	if(reg8Val & (1 << 3))
 8002746:	f010 0f08 	tst.w	r0, #8
 800274a:	f000 8261 	beq.w	8002c10 <printRadioSettings+0x500>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800274e:	f010 0f04 	tst.w	r0, #4
 8002752:	f000 8251 	beq.w	8002bf8 <printRadioSettings+0x4e8>
 8002756:	ac07      	add	r4, sp, #28
 8002758:	4db5      	ldr	r5, [pc, #724]	; (8002a30 <printRadioSettings+0x320>)
 800275a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800275e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002762:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002766:	a807      	add	r0, sp, #28
 8002768:	f7fd fd3a 	bl	80001e0 <strlen>
 800276c:	4caf      	ldr	r4, [pc, #700]	; (8002a2c <printRadioSettings+0x31c>)
 800276e:	230a      	movs	r3, #10
 8002770:	b282      	uxth	r2, r0
 8002772:	a907      	add	r1, sp, #28
 8002774:	4620      	mov	r0, r4
 8002776:	f003 fab1 	bl	8005cdc <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800277a:	2001      	movs	r0, #1
 800277c:	f7ff fcc4 	bl	8002108 <NRF24_read_register>
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002780:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8002784:	9303      	str	r3, [sp, #12]
 8002786:	f3c0 1300 	ubfx	r3, r0, #4, #1
 800278a:	9302      	str	r3, [sp, #8]
 800278c:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	f3c0 0340 	ubfx	r3, r0, #1, #1
 800279c:	f000 0201 	and.w	r2, r0, #1
 80027a0:	49a4      	ldr	r1, [pc, #656]	; (8002a34 <printRadioSettings+0x324>)
 80027a2:	a807      	add	r0, sp, #28
 80027a4:	f008 fbbc 	bl	800af20 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80027a8:	a807      	add	r0, sp, #28
 80027aa:	f7fd fd19 	bl	80001e0 <strlen>
 80027ae:	230a      	movs	r3, #10
 80027b0:	b282      	uxth	r2, r0
 80027b2:	a907      	add	r1, sp, #28
 80027b4:	4620      	mov	r0, r4
 80027b6:	f003 fa91 	bl	8005cdc <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80027ba:	2002      	movs	r0, #2
 80027bc:	f7ff fca4 	bl	8002108 <NRF24_read_register>
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80027c0:	f3c0 1340 	ubfx	r3, r0, #5, #1
 80027c4:	9303      	str	r3, [sp, #12]
 80027c6:	f3c0 1300 	ubfx	r3, r0, #4, #1
 80027ca:	9302      	str	r3, [sp, #8]
 80027cc:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	f3c0 0380 	ubfx	r3, r0, #2, #1
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	f3c0 0340 	ubfx	r3, r0, #1, #1
 80027dc:	f000 0201 	and.w	r2, r0, #1
 80027e0:	4995      	ldr	r1, [pc, #596]	; (8002a38 <printRadioSettings+0x328>)
 80027e2:	a807      	add	r0, sp, #28
 80027e4:	f008 fb9c 	bl	800af20 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80027e8:	a807      	add	r0, sp, #28
 80027ea:	f7fd fcf9 	bl	80001e0 <strlen>
 80027ee:	230a      	movs	r3, #10
 80027f0:	b282      	uxth	r2, r0
 80027f2:	a907      	add	r1, sp, #28
 80027f4:	4620      	mov	r0, r4
 80027f6:	f003 fa71 	bl	8005cdc <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80027fa:	2003      	movs	r0, #3
 80027fc:	f7ff fc84 	bl	8002108 <NRF24_read_register>
 8002800:	f000 0203 	and.w	r2, r0, #3
	reg8Val +=2;
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8002804:	3202      	adds	r2, #2
 8002806:	498d      	ldr	r1, [pc, #564]	; (8002a3c <printRadioSettings+0x32c>)
 8002808:	a807      	add	r0, sp, #28
 800280a:	f008 fb89 	bl	800af20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800280e:	a807      	add	r0, sp, #28
 8002810:	f7fd fce6 	bl	80001e0 <strlen>
 8002814:	230a      	movs	r3, #10
 8002816:	b282      	uxth	r2, r0
 8002818:	a907      	add	r1, sp, #28
 800281a:	4620      	mov	r0, r4
 800281c:	f003 fa5e 	bl	8005cdc <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8002820:	2005      	movs	r0, #5
 8002822:	f7ff fc71 	bl	8002108 <NRF24_read_register>
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8002826:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800282a:	4985      	ldr	r1, [pc, #532]	; (8002a40 <printRadioSettings+0x330>)
 800282c:	a807      	add	r0, sp, #28
 800282e:	f008 fb77 	bl	800af20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002832:	a807      	add	r0, sp, #28
 8002834:	f7fd fcd4 	bl	80001e0 <strlen>
 8002838:	230a      	movs	r3, #10
 800283a:	b282      	uxth	r2, r0
 800283c:	a907      	add	r1, sp, #28
 800283e:	4620      	mov	r0, r4
 8002840:	f003 fa4c 	bl	8005cdc <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8002844:	2006      	movs	r0, #6
 8002846:	f7ff fc5f 	bl	8002108 <NRF24_read_register>
 800284a:	4604      	mov	r4, r0
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800284c:	f010 0f08 	tst.w	r0, #8
 8002850:	f000 81e5 	beq.w	8002c1e <printRadioSettings+0x50e>
 8002854:	ad07      	add	r5, sp, #28
 8002856:	4e7b      	ldr	r6, [pc, #492]	; (8002a44 <printRadioSettings+0x334>)
 8002858:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800285a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800285c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002860:	f845 0b04 	str.w	r0, [r5], #4
 8002864:	f825 1b02 	strh.w	r1, [r5], #2
 8002868:	0c09      	lsrs	r1, r1, #16
 800286a:	7029      	strb	r1, [r5, #0]
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800286c:	a807      	add	r0, sp, #28
 800286e:	f7fd fcb7 	bl	80001e0 <strlen>
 8002872:	230a      	movs	r3, #10
 8002874:	b282      	uxth	r2, r0
 8002876:	a907      	add	r1, sp, #28
 8002878:	486c      	ldr	r0, [pc, #432]	; (8002a2c <printRadioSettings+0x31c>)
 800287a:	f003 fa2f 	bl	8005cdc <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
	reg8Val = (reg8Val>>1);
 800287e:	f3c4 0441 	ubfx	r4, r4, #1, #2
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8002882:	2c00      	cmp	r4, #0
 8002884:	f000 81d8 	beq.w	8002c38 <printRadioSettings+0x528>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8002888:	2c01      	cmp	r4, #1
 800288a:	f000 81dc 	beq.w	8002c46 <printRadioSettings+0x536>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800288e:	2c02      	cmp	r4, #2
 8002890:	f000 81e0 	beq.w	8002c54 <printRadioSettings+0x544>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8002894:	2c03      	cmp	r4, #3
 8002896:	f000 81e7 	beq.w	8002c68 <printRadioSettings+0x558>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800289a:	a807      	add	r0, sp, #28
 800289c:	f7fd fca0 	bl	80001e0 <strlen>
 80028a0:	4c62      	ldr	r4, [pc, #392]	; (8002a2c <printRadioSettings+0x31c>)
 80028a2:	230a      	movs	r3, #10
 80028a4:	b282      	uxth	r2, r0
 80028a6:	a907      	add	r1, sp, #28
 80028a8:	4620      	mov	r0, r4
 80028aa:	f003 fa17 	bl	8005cdc <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80028ae:	2205      	movs	r2, #5
 80028b0:	a905      	add	r1, sp, #20
 80028b2:	200a      	movs	r0, #10
 80028b4:	f7ff fc4a 	bl	800214c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80028b8:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80028bc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80028c0:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80028c4:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80028c8:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80028cc:	9502      	str	r5, [sp, #8]
 80028ce:	9001      	str	r0, [sp, #4]
 80028d0:	9100      	str	r1, [sp, #0]
 80028d2:	495d      	ldr	r1, [pc, #372]	; (8002a48 <printRadioSettings+0x338>)
 80028d4:	a807      	add	r0, sp, #28
 80028d6:	f008 fb23 	bl	800af20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80028da:	a807      	add	r0, sp, #28
 80028dc:	f7fd fc80 	bl	80001e0 <strlen>
 80028e0:	230a      	movs	r3, #10
 80028e2:	b282      	uxth	r2, r0
 80028e4:	a907      	add	r1, sp, #28
 80028e6:	4620      	mov	r0, r4
 80028e8:	f003 f9f8 	bl	8005cdc <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80028ec:	2205      	movs	r2, #5
 80028ee:	a905      	add	r1, sp, #20
 80028f0:	200b      	movs	r0, #11
 80028f2:	f7ff fc2b 	bl	800214c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80028f6:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80028fa:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80028fe:	f89d 1016 	ldrb.w	r1, [sp, #22]
 8002902:	f89d 0015 	ldrb.w	r0, [sp, #21]
 8002906:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800290a:	9502      	str	r5, [sp, #8]
 800290c:	9001      	str	r0, [sp, #4]
 800290e:	9100      	str	r1, [sp, #0]
 8002910:	494e      	ldr	r1, [pc, #312]	; (8002a4c <printRadioSettings+0x33c>)
 8002912:	a807      	add	r0, sp, #28
 8002914:	f008 fb04 	bl	800af20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002918:	a807      	add	r0, sp, #28
 800291a:	f7fd fc61 	bl	80001e0 <strlen>
 800291e:	230a      	movs	r3, #10
 8002920:	b282      	uxth	r2, r0
 8002922:	a907      	add	r1, sp, #28
 8002924:	4620      	mov	r0, r4
 8002926:	f003 f9d9 	bl	8005cdc <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800292a:	2201      	movs	r2, #1
 800292c:	a905      	add	r1, sp, #20
 800292e:	200c      	movs	r0, #12
 8002930:	f7ff fc0c 	bl	800214c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002934:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002938:	4945      	ldr	r1, [pc, #276]	; (8002a50 <printRadioSettings+0x340>)
 800293a:	a807      	add	r0, sp, #28
 800293c:	f008 faf0 	bl	800af20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002940:	a807      	add	r0, sp, #28
 8002942:	f7fd fc4d 	bl	80001e0 <strlen>
 8002946:	230a      	movs	r3, #10
 8002948:	b282      	uxth	r2, r0
 800294a:	a907      	add	r1, sp, #28
 800294c:	4620      	mov	r0, r4
 800294e:	f003 f9c5 	bl	8005cdc <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8002952:	2201      	movs	r2, #1
 8002954:	a905      	add	r1, sp, #20
 8002956:	200d      	movs	r0, #13
 8002958:	f7ff fbf8 	bl	800214c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800295c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002960:	493c      	ldr	r1, [pc, #240]	; (8002a54 <printRadioSettings+0x344>)
 8002962:	a807      	add	r0, sp, #28
 8002964:	f008 fadc 	bl	800af20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002968:	a807      	add	r0, sp, #28
 800296a:	f7fd fc39 	bl	80001e0 <strlen>
 800296e:	230a      	movs	r3, #10
 8002970:	b282      	uxth	r2, r0
 8002972:	a907      	add	r1, sp, #28
 8002974:	4620      	mov	r0, r4
 8002976:	f003 f9b1 	bl	8005cdc <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800297a:	2201      	movs	r2, #1
 800297c:	a905      	add	r1, sp, #20
 800297e:	200e      	movs	r0, #14
 8002980:	f7ff fbe4 	bl	800214c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002984:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002988:	4933      	ldr	r1, [pc, #204]	; (8002a58 <printRadioSettings+0x348>)
 800298a:	a807      	add	r0, sp, #28
 800298c:	f008 fac8 	bl	800af20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002990:	a807      	add	r0, sp, #28
 8002992:	f7fd fc25 	bl	80001e0 <strlen>
 8002996:	230a      	movs	r3, #10
 8002998:	b282      	uxth	r2, r0
 800299a:	a907      	add	r1, sp, #28
 800299c:	4620      	mov	r0, r4
 800299e:	f003 f99d 	bl	8005cdc <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80029a2:	2201      	movs	r2, #1
 80029a4:	a905      	add	r1, sp, #20
 80029a6:	200f      	movs	r0, #15
 80029a8:	f7ff fbd0 	bl	800214c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80029ac:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80029b0:	492a      	ldr	r1, [pc, #168]	; (8002a5c <printRadioSettings+0x34c>)
 80029b2:	a807      	add	r0, sp, #28
 80029b4:	f008 fab4 	bl	800af20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80029b8:	a807      	add	r0, sp, #28
 80029ba:	f7fd fc11 	bl	80001e0 <strlen>
 80029be:	230a      	movs	r3, #10
 80029c0:	b282      	uxth	r2, r0
 80029c2:	a907      	add	r1, sp, #28
 80029c4:	4620      	mov	r0, r4
 80029c6:	f003 f989 	bl	8005cdc <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80029ca:	2205      	movs	r2, #5
 80029cc:	a905      	add	r1, sp, #20
 80029ce:	2010      	movs	r0, #16
 80029d0:	f7ff fbbc 	bl	800214c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80029d4:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80029d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80029dc:	f89d 1016 	ldrb.w	r1, [sp, #22]
 80029e0:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80029e4:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80029e8:	9502      	str	r5, [sp, #8]
 80029ea:	9001      	str	r0, [sp, #4]
 80029ec:	9100      	str	r1, [sp, #0]
 80029ee:	491c      	ldr	r1, [pc, #112]	; (8002a60 <printRadioSettings+0x350>)
 80029f0:	a807      	add	r0, sp, #28
 80029f2:	f008 fa95 	bl	800af20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80029f6:	a807      	add	r0, sp, #28
 80029f8:	f7fd fbf2 	bl	80001e0 <strlen>
 80029fc:	230a      	movs	r3, #10
 80029fe:	b282      	uxth	r2, r0
 8002a00:	a907      	add	r1, sp, #28
 8002a02:	4620      	mov	r0, r4
 8002a04:	f003 f96a 	bl	8005cdc <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8002a08:	2011      	movs	r0, #17
 8002a0a:	f7ff fb7d 	bl	8002108 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002a0e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002a12:	4914      	ldr	r1, [pc, #80]	; (8002a64 <printRadioSettings+0x354>)
 8002a14:	a807      	add	r0, sp, #28
 8002a16:	f008 fa83 	bl	800af20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002a1a:	a807      	add	r0, sp, #28
 8002a1c:	f7fd fbe0 	bl	80001e0 <strlen>
 8002a20:	230a      	movs	r3, #10
 8002a22:	b282      	uxth	r2, r0
 8002a24:	e020      	b.n	8002a68 <printRadioSettings+0x358>
 8002a26:	bf00      	nop
 8002a28:	0800e664 	.word	0x0800e664
 8002a2c:	200002f8 	.word	0x200002f8
 8002a30:	0800e698 	.word	0x0800e698
 8002a34:	0800e6e4 	.word	0x0800e6e4
 8002a38:	0800e728 	.word	0x0800e728
 8002a3c:	0800e774 	.word	0x0800e774
 8002a40:	0800e790 	.word	0x0800e790
 8002a44:	0800e7a4 	.word	0x0800e7a4
 8002a48:	0800e824 	.word	0x0800e824
 8002a4c:	0800e854 	.word	0x0800e854
 8002a50:	0800e884 	.word	0x0800e884
 8002a54:	0800e8ac 	.word	0x0800e8ac
 8002a58:	0800e8d4 	.word	0x0800e8d4
 8002a5c:	0800e8fc 	.word	0x0800e8fc
 8002a60:	0800e924 	.word	0x0800e924
 8002a64:	0800e950 	.word	0x0800e950
 8002a68:	a907      	add	r1, sp, #28
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	f003 f936 	bl	8005cdc <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 8002a70:	2012      	movs	r0, #18
 8002a72:	f7ff fb49 	bl	8002108 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002a76:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002a7a:	498a      	ldr	r1, [pc, #552]	; (8002ca4 <printRadioSettings+0x594>)
 8002a7c:	a807      	add	r0, sp, #28
 8002a7e:	f008 fa4f 	bl	800af20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002a82:	a807      	add	r0, sp, #28
 8002a84:	f7fd fbac 	bl	80001e0 <strlen>
 8002a88:	230a      	movs	r3, #10
 8002a8a:	b282      	uxth	r2, r0
 8002a8c:	a907      	add	r1, sp, #28
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f003 f924 	bl	8005cdc <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8002a94:	2013      	movs	r0, #19
 8002a96:	f7ff fb37 	bl	8002108 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002a9a:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002a9e:	4982      	ldr	r1, [pc, #520]	; (8002ca8 <printRadioSettings+0x598>)
 8002aa0:	a807      	add	r0, sp, #28
 8002aa2:	f008 fa3d 	bl	800af20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002aa6:	a807      	add	r0, sp, #28
 8002aa8:	f7fd fb9a 	bl	80001e0 <strlen>
 8002aac:	230a      	movs	r3, #10
 8002aae:	b282      	uxth	r2, r0
 8002ab0:	a907      	add	r1, sp, #28
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f003 f912 	bl	8005cdc <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8002ab8:	2014      	movs	r0, #20
 8002aba:	f7ff fb25 	bl	8002108 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002abe:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002ac2:	497a      	ldr	r1, [pc, #488]	; (8002cac <printRadioSettings+0x59c>)
 8002ac4:	a807      	add	r0, sp, #28
 8002ac6:	f008 fa2b 	bl	800af20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002aca:	a807      	add	r0, sp, #28
 8002acc:	f7fd fb88 	bl	80001e0 <strlen>
 8002ad0:	230a      	movs	r3, #10
 8002ad2:	b282      	uxth	r2, r0
 8002ad4:	a907      	add	r1, sp, #28
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	f003 f900 	bl	8005cdc <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8002adc:	2015      	movs	r0, #21
 8002ade:	f7ff fb13 	bl	8002108 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002ae2:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002ae6:	4972      	ldr	r1, [pc, #456]	; (8002cb0 <printRadioSettings+0x5a0>)
 8002ae8:	a807      	add	r0, sp, #28
 8002aea:	f008 fa19 	bl	800af20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002aee:	a807      	add	r0, sp, #28
 8002af0:	f7fd fb76 	bl	80001e0 <strlen>
 8002af4:	230a      	movs	r3, #10
 8002af6:	b282      	uxth	r2, r0
 8002af8:	a907      	add	r1, sp, #28
 8002afa:	4620      	mov	r0, r4
 8002afc:	f003 f8ee 	bl	8005cdc <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 8002b00:	2016      	movs	r0, #22
 8002b02:	f7ff fb01 	bl	8002108 <NRF24_read_register>
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002b06:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8002b0a:	496a      	ldr	r1, [pc, #424]	; (8002cb4 <printRadioSettings+0x5a4>)
 8002b0c:	a807      	add	r0, sp, #28
 8002b0e:	f008 fa07 	bl	800af20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002b12:	a807      	add	r0, sp, #28
 8002b14:	f7fd fb64 	bl	80001e0 <strlen>
 8002b18:	230a      	movs	r3, #10
 8002b1a:	b282      	uxth	r2, r0
 8002b1c:	a907      	add	r1, sp, #28
 8002b1e:	4620      	mov	r0, r4
 8002b20:	f003 f8dc 	bl	8005cdc <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8002b24:	201c      	movs	r0, #28
 8002b26:	f7ff faef 	bl	8002108 <NRF24_read_register>
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002b2a:	f3c0 1340 	ubfx	r3, r0, #5, #1
 8002b2e:	9303      	str	r3, [sp, #12]
 8002b30:	f3c0 1300 	ubfx	r3, r0, #4, #1
 8002b34:	9302      	str	r3, [sp, #8]
 8002b36:	f3c0 03c0 	ubfx	r3, r0, #3, #1
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	f3c0 0340 	ubfx	r3, r0, #1, #1
 8002b46:	f000 0201 	and.w	r2, r0, #1
 8002b4a:	495b      	ldr	r1, [pc, #364]	; (8002cb8 <printRadioSettings+0x5a8>)
 8002b4c:	a807      	add	r0, sp, #28
 8002b4e:	f008 f9e7 	bl	800af20 <siprintf>
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002b52:	a807      	add	r0, sp, #28
 8002b54:	f7fd fb44 	bl	80001e0 <strlen>
 8002b58:	230a      	movs	r3, #10
 8002b5a:	b282      	uxth	r2, r0
 8002b5c:	a907      	add	r1, sp, #28
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f003 f8bc 	bl	8005cdc <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8002b64:	201d      	movs	r0, #29
 8002b66:	f7ff facf 	bl	8002108 <NRF24_read_register>
 8002b6a:	4606      	mov	r6, r0
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8002b6c:	f010 0f04 	tst.w	r0, #4
 8002b70:	f000 8081 	beq.w	8002c76 <printRadioSettings+0x566>
 8002b74:	ac07      	add	r4, sp, #28
 8002b76:	4d51      	ldr	r5, [pc, #324]	; (8002cbc <printRadioSettings+0x5ac>)
 8002b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002b80:	f844 0b04 	str.w	r0, [r4], #4
 8002b84:	8021      	strh	r1, [r4, #0]
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002b86:	a807      	add	r0, sp, #28
 8002b88:	f7fd fb2a 	bl	80001e0 <strlen>
 8002b8c:	230a      	movs	r3, #10
 8002b8e:	b282      	uxth	r2, r0
 8002b90:	a907      	add	r1, sp, #28
 8002b92:	484b      	ldr	r0, [pc, #300]	; (8002cc0 <printRadioSettings+0x5b0>)
 8002b94:	f003 f8a2 	bl	8005cdc <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002b98:	f016 0f02 	tst.w	r6, #2
 8002b9c:	d178      	bne.n	8002c90 <printRadioSettings+0x580>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8002b9e:	ac07      	add	r4, sp, #28
 8002ba0:	4d48      	ldr	r5, [pc, #288]	; (8002cc4 <printRadioSettings+0x5b4>)
 8002ba2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ba6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002baa:	c403      	stmia	r4!, {r0, r1}
 8002bac:	f824 2b02 	strh.w	r2, [r4], #2
 8002bb0:	0c12      	lsrs	r2, r2, #16
 8002bb2:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002bb4:	a807      	add	r0, sp, #28
 8002bb6:	f7fd fb13 	bl	80001e0 <strlen>
 8002bba:	4e41      	ldr	r6, [pc, #260]	; (8002cc0 <printRadioSettings+0x5b0>)
 8002bbc:	230a      	movs	r3, #10
 8002bbe:	b282      	uxth	r2, r0
 8002bc0:	a907      	add	r1, sp, #28
 8002bc2:	4630      	mov	r0, r6
 8002bc4:	f003 f88a 	bl	8005cdc <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002bc8:	ac07      	add	r4, sp, #28
 8002bca:	4d3f      	ldr	r5, [pc, #252]	; (8002cc8 <printRadioSettings+0x5b8>)
 8002bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bd8:	682b      	ldr	r3, [r5, #0]
 8002bda:	f824 3b02 	strh.w	r3, [r4], #2
 8002bde:	0c1b      	lsrs	r3, r3, #16
 8002be0:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002be2:	a807      	add	r0, sp, #28
 8002be4:	f7fd fafc 	bl	80001e0 <strlen>
 8002be8:	230a      	movs	r3, #10
 8002bea:	b282      	uxth	r2, r0
 8002bec:	a907      	add	r1, sp, #28
 8002bee:	4630      	mov	r0, r6
 8002bf0:	f003 f874 	bl	8005cdc <HAL_UART_Transmit>
}
 8002bf4:	b020      	add	sp, #128	; 0x80
 8002bf6:	bd70      	pop	{r4, r5, r6, pc}
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8002bf8:	ac07      	add	r4, sp, #28
 8002bfa:	4d34      	ldr	r5, [pc, #208]	; (8002ccc <printRadioSettings+0x5bc>)
 8002bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c04:	c403      	stmia	r4!, {r0, r1}
 8002c06:	f824 2b02 	strh.w	r2, [r4], #2
 8002c0a:	0c12      	lsrs	r2, r2, #16
 8002c0c:	7022      	strb	r2, [r4, #0]
 8002c0e:	e5aa      	b.n	8002766 <printRadioSettings+0x56>
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8002c10:	ac07      	add	r4, sp, #28
 8002c12:	4d2f      	ldr	r5, [pc, #188]	; (8002cd0 <printRadioSettings+0x5c0>)
 8002c14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c18:	682b      	ldr	r3, [r5, #0]
 8002c1a:	6023      	str	r3, [r4, #0]
 8002c1c:	e5a3      	b.n	8002766 <printRadioSettings+0x56>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8002c1e:	ad07      	add	r5, sp, #28
 8002c20:	4e2c      	ldr	r6, [pc, #176]	; (8002cd4 <printRadioSettings+0x5c4>)
 8002c22:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c26:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002c2a:	f845 0b04 	str.w	r0, [r5], #4
 8002c2e:	f825 1b02 	strh.w	r1, [r5], #2
 8002c32:	0c09      	lsrs	r1, r1, #16
 8002c34:	7029      	strb	r1, [r5, #0]
 8002c36:	e619      	b.n	800286c <printRadioSettings+0x15c>
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8002c38:	ac07      	add	r4, sp, #28
 8002c3a:	4d27      	ldr	r5, [pc, #156]	; (8002cd8 <printRadioSettings+0x5c8>)
 8002c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c40:	682b      	ldr	r3, [r5, #0]
 8002c42:	6023      	str	r3, [r4, #0]
 8002c44:	e629      	b.n	800289a <printRadioSettings+0x18a>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8002c46:	ac07      	add	r4, sp, #28
 8002c48:	4d24      	ldr	r5, [pc, #144]	; (8002cdc <printRadioSettings+0x5cc>)
 8002c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c4e:	682b      	ldr	r3, [r5, #0]
 8002c50:	6023      	str	r3, [r4, #0]
 8002c52:	e622      	b.n	800289a <printRadioSettings+0x18a>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8002c54:	ac07      	add	r4, sp, #28
 8002c56:	4d22      	ldr	r5, [pc, #136]	; (8002ce0 <printRadioSettings+0x5d0>)
 8002c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c5c:	682b      	ldr	r3, [r5, #0]
 8002c5e:	f824 3b02 	strh.w	r3, [r4], #2
 8002c62:	0c1b      	lsrs	r3, r3, #16
 8002c64:	7023      	strb	r3, [r4, #0]
 8002c66:	e618      	b.n	800289a <printRadioSettings+0x18a>
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8002c68:	ac07      	add	r4, sp, #28
 8002c6a:	4d1e      	ldr	r5, [pc, #120]	; (8002ce4 <printRadioSettings+0x5d4>)
 8002c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c70:	682b      	ldr	r3, [r5, #0]
 8002c72:	8023      	strh	r3, [r4, #0]
 8002c74:	e611      	b.n	800289a <printRadioSettings+0x18a>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8002c76:	ac07      	add	r4, sp, #28
 8002c78:	4d1b      	ldr	r5, [pc, #108]	; (8002ce8 <printRadioSettings+0x5d8>)
 8002c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c82:	f844 0b04 	str.w	r0, [r4], #4
 8002c86:	f824 1b02 	strh.w	r1, [r4], #2
 8002c8a:	0c09      	lsrs	r1, r1, #16
 8002c8c:	7021      	strb	r1, [r4, #0]
 8002c8e:	e77a      	b.n	8002b86 <printRadioSettings+0x476>
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002c90:	ac07      	add	r4, sp, #28
 8002c92:	4d16      	ldr	r5, [pc, #88]	; (8002cec <printRadioSettings+0x5dc>)
 8002c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c9c:	c403      	stmia	r4!, {r0, r1}
 8002c9e:	8022      	strh	r2, [r4, #0]
 8002ca0:	e788      	b.n	8002bb4 <printRadioSettings+0x4a4>
 8002ca2:	bf00      	nop
 8002ca4:	0800e96c 	.word	0x0800e96c
 8002ca8:	0800e988 	.word	0x0800e988
 8002cac:	0800e9a4 	.word	0x0800e9a4
 8002cb0:	0800e9c0 	.word	0x0800e9c0
 8002cb4:	0800e9dc 	.word	0x0800e9dc
 8002cb8:	0800e9f8 	.word	0x0800e9f8
 8002cbc:	0800ea44 	.word	0x0800ea44
 8002cc0:	200002f8 	.word	0x200002f8
 8002cc4:	0800ea90 	.word	0x0800ea90
 8002cc8:	0800e664 	.word	0x0800e664
 8002ccc:	0800e6b4 	.word	0x0800e6b4
 8002cd0:	0800e6d0 	.word	0x0800e6d0
 8002cd4:	0800e7bc 	.word	0x0800e7bc
 8002cd8:	0800e7d4 	.word	0x0800e7d4
 8002cdc:	0800e7e8 	.word	0x0800e7e8
 8002ce0:	0800e7fc 	.word	0x0800e7fc
 8002ce4:	0800e810 	.word	0x0800e810
 8002ce8:	0800ea5c 	.word	0x0800ea5c
 8002cec:	0800ea74 	.word	0x0800ea74

08002cf0 <pid_calculate_roll>:

/** roll PID Calculation **/
float pid_calculate_roll(float IMU_roll_value, int timer_value, float roll_setpoint) {

	//Calculate error
	roll_error = IMU_roll_value - roll_setpoint;
 8002cf0:	ee70 0a60 	vsub.f32	s1, s0, s1
 8002cf4:	4b29      	ldr	r3, [pc, #164]	; (8002d9c <pid_calculate_roll+0xac>)
 8002cf6:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	roll_p = roll_p_gain * roll_error;
 8002cfa:	4b29      	ldr	r3, [pc, #164]	; (8002da0 <pid_calculate_roll+0xb0>)
 8002cfc:	edd3 6a00 	vldr	s13, [r3]
 8002d00:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8002d04:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <pid_calculate_roll+0xb4>)
 8002d06:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	roll_i += (roll_i_gain * roll_error * delta_t);
 8002d0a:	4b27      	ldr	r3, [pc, #156]	; (8002da8 <pid_calculate_roll+0xb8>)
 8002d0c:	edd3 7a00 	vldr	s15, [r3]
 8002d10:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8002d14:	eddf 5a25 	vldr	s11, [pc, #148]	; 8002dac <pid_calculate_roll+0xbc>
 8002d18:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002d1c:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <pid_calculate_roll+0xc0>)
 8002d1e:	ed93 7a00 	vldr	s14, [r3]
 8002d22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d26:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / delta_t);
 8002d2a:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <pid_calculate_roll+0xc4>)
 8002d2c:	ed93 6a00 	vldr	s12, [r3]
 8002d30:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8002d34:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8002d38:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <pid_calculate_roll+0xc8>)
 8002d3a:	ed92 6a00 	vldr	s12, [r2]
 8002d3e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002d42:	4a1e      	ldr	r2, [pc, #120]	; (8002dbc <pid_calculate_roll+0xcc>)
 8002d44:	ed82 7a00 	vstr	s14, [r2]
	roll_last_d_error = roll_error;
 8002d48:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	roll_output = roll_p + roll_i + roll_d;
 8002d4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d54:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <pid_calculate_roll+0xd0>)
 8002d56:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (roll_output < -roll_pid_clip) {
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <pid_calculate_roll+0xd4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	425a      	negs	r2, r3
 8002d60:	ee07 2a10 	vmov	s14, r2
 8002d64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d70:	d40c      	bmi.n	8002d8c <pid_calculate_roll+0x9c>
		roll_output = -roll_pid_clip;
	} else if (roll_output > roll_pid_clip) {
 8002d72:	ee07 3a10 	vmov	s14, r3
 8002d76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d82:	dd06      	ble.n	8002d92 <pid_calculate_roll+0xa2>
		roll_output = roll_pid_clip;
 8002d84:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <pid_calculate_roll+0xd0>)
 8002d86:	ed83 7a00 	vstr	s14, [r3]
 8002d8a:	e002      	b.n	8002d92 <pid_calculate_roll+0xa2>
		roll_output = -roll_pid_clip;
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <pid_calculate_roll+0xd0>)
 8002d8e:	ed83 7a00 	vstr	s14, [r3]
	}

	return roll_output;
}
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <pid_calculate_roll+0xd0>)
 8002d94:	ed93 0a00 	vldr	s0, [r3]
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20000354 	.word	0x20000354
 8002da0:	20000068 	.word	0x20000068
 8002da4:	20004430 	.word	0x20004430
 8002da8:	20000064 	.word	0x20000064
 8002dac:	3b012912 	.word	0x3b012912
 8002db0:	2000443c 	.word	0x2000443c
 8002db4:	20000358 	.word	0x20000358
 8002db8:	20000060 	.word	0x20000060
 8002dbc:	2000441c 	.word	0x2000441c
 8002dc0:	2000035c 	.word	0x2000035c
 8002dc4:	2000006c 	.word	0x2000006c

08002dc8 <reset_pid_roll>:

void reset_pid_roll(){

	roll_p = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <reset_pid_roll+0x14>)
 8002dcc:	6013      	str	r3, [r2, #0]
	roll_i = 0;
 8002dce:	4a04      	ldr	r2, [pc, #16]	; (8002de0 <reset_pid_roll+0x18>)
 8002dd0:	6013      	str	r3, [r2, #0]
	roll_d = 0;
 8002dd2:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <reset_pid_roll+0x1c>)
 8002dd4:	6013      	str	r3, [r2, #0]
	roll_output = 0;
 8002dd6:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <reset_pid_roll+0x20>)
 8002dd8:	6013      	str	r3, [r2, #0]

}
 8002dda:	4770      	bx	lr
 8002ddc:	20004430 	.word	0x20004430
 8002de0:	2000443c 	.word	0x2000443c
 8002de4:	2000441c 	.word	0x2000441c
 8002de8:	2000035c 	.word	0x2000035c

08002dec <pid_calculate_pitch>:

/** Pitch PID Calculation **/
float pid_calculate_pitch(float IMU_pitch_value, int timer_value, float pitch_setpoint) {

	//Calculate error
	pitch_error = IMU_pitch_value - pitch_setpoint;
 8002dec:	ee70 0a60 	vsub.f32	s1, s0, s1
 8002df0:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <pid_calculate_pitch+0xac>)
 8002df2:	edc3 0a00 	vstr	s1, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 8002df6:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <pid_calculate_pitch+0xb0>)
 8002df8:	edd3 6a00 	vldr	s13, [r3]
 8002dfc:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8002e00:	4b27      	ldr	r3, [pc, #156]	; (8002ea0 <pid_calculate_pitch+0xb4>)
 8002e02:	edc3 6a00 	vstr	s13, [r3]

	//Integral
	pitch_i += (pitch_i_gain * pitch_error * delta_t);
 8002e06:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <pid_calculate_pitch+0xb8>)
 8002e08:	edd3 7a00 	vldr	s15, [r3]
 8002e0c:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8002e10:	eddf 5a25 	vldr	s11, [pc, #148]	; 8002ea8 <pid_calculate_pitch+0xbc>
 8002e14:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002e18:	4b24      	ldr	r3, [pc, #144]	; (8002eac <pid_calculate_pitch+0xc0>)
 8002e1a:	ed93 7a00 	vldr	s14, [r3]
 8002e1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e22:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	pitch_d = pitch_d_gain * ( (pitch_error - pitch_last_d_error) / delta_t);
 8002e26:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <pid_calculate_pitch+0xc4>)
 8002e28:	ed93 6a00 	vldr	s12, [r3]
 8002e2c:	ee30 6ac6 	vsub.f32	s12, s1, s12
 8002e30:	ee86 7a25 	vdiv.f32	s14, s12, s11
 8002e34:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <pid_calculate_pitch+0xc8>)
 8002e36:	ed92 6a00 	vldr	s12, [r2]
 8002e3a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002e3e:	4a1e      	ldr	r2, [pc, #120]	; (8002eb8 <pid_calculate_pitch+0xcc>)
 8002e40:	ed82 7a00 	vstr	s14, [r2]
	pitch_last_d_error = pitch_error;
 8002e44:	edc3 0a00 	vstr	s1, [r3]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 8002e48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e50:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <pid_calculate_pitch+0xd0>)
 8002e52:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (pitch_output < -pitch_pid_clip) {
 8002e56:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <pid_calculate_pitch+0xd4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	425a      	negs	r2, r3
 8002e5c:	ee07 2a10 	vmov	s14, r2
 8002e60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6c:	d40c      	bmi.n	8002e88 <pid_calculate_pitch+0x9c>
		pitch_output = -pitch_pid_clip;
	} else if (pitch_output > pitch_pid_clip) {
 8002e6e:	ee07 3a10 	vmov	s14, r3
 8002e72:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002e76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7e:	dd06      	ble.n	8002e8e <pid_calculate_pitch+0xa2>
		pitch_output = pitch_pid_clip;
 8002e80:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <pid_calculate_pitch+0xd0>)
 8002e82:	ed83 7a00 	vstr	s14, [r3]
 8002e86:	e002      	b.n	8002e8e <pid_calculate_pitch+0xa2>
		pitch_output = -pitch_pid_clip;
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <pid_calculate_pitch+0xd0>)
 8002e8a:	ed83 7a00 	vstr	s14, [r3]
	}

	return pitch_output;
}
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <pid_calculate_pitch+0xd0>)
 8002e90:	ed93 0a00 	vldr	s0, [r3]
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20000348 	.word	0x20000348
 8002e9c:	20000058 	.word	0x20000058
 8002ea0:	20004428 	.word	0x20004428
 8002ea4:	20000054 	.word	0x20000054
 8002ea8:	3b012912 	.word	0x3b012912
 8002eac:	2000442c 	.word	0x2000442c
 8002eb0:	2000034c 	.word	0x2000034c
 8002eb4:	20000050 	.word	0x20000050
 8002eb8:	20004420 	.word	0x20004420
 8002ebc:	20000350 	.word	0x20000350
 8002ec0:	2000005c 	.word	0x2000005c

08002ec4 <reset_pid_pitch>:

void reset_pid_pitch(){

	pitch_p = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <reset_pid_pitch+0x14>)
 8002ec8:	6013      	str	r3, [r2, #0]
	pitch_i = 0;
 8002eca:	4a04      	ldr	r2, [pc, #16]	; (8002edc <reset_pid_pitch+0x18>)
 8002ecc:	6013      	str	r3, [r2, #0]
	pitch_d = 0;
 8002ece:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <reset_pid_pitch+0x1c>)
 8002ed0:	6013      	str	r3, [r2, #0]
	pitch_output = 0;
 8002ed2:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <reset_pid_pitch+0x20>)
 8002ed4:	6013      	str	r3, [r2, #0]

}
 8002ed6:	4770      	bx	lr
 8002ed8:	20004428 	.word	0x20004428
 8002edc:	2000442c 	.word	0x2000442c
 8002ee0:	20004420 	.word	0x20004420
 8002ee4:	20000350 	.word	0x20000350

08002ee8 <reset_pid_yaw>:
	return yaw_output;
}

void reset_pid_yaw(){

	yaw_p = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	4a04      	ldr	r2, [pc, #16]	; (8002efc <reset_pid_yaw+0x14>)
 8002eec:	6013      	str	r3, [r2, #0]
	yaw_i = 0;
 8002eee:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <reset_pid_yaw+0x18>)
 8002ef0:	6013      	str	r3, [r2, #0]
	yaw_d = 0;
 8002ef2:	4a04      	ldr	r2, [pc, #16]	; (8002f04 <reset_pid_yaw+0x1c>)
 8002ef4:	6013      	str	r3, [r2, #0]
	yaw_output = 0;
 8002ef6:	4a04      	ldr	r2, [pc, #16]	; (8002f08 <reset_pid_yaw+0x20>)
 8002ef8:	6013      	str	r3, [r2, #0]

}
 8002efa:	4770      	bx	lr
 8002efc:	20004438 	.word	0x20004438
 8002f00:	20004434 	.word	0x20004434
 8002f04:	20004424 	.word	0x20004424
 8002f08:	20000360 	.word	0x20000360

08002f0c <DWT_Init>:
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002f0c:	4a06      	ldr	r2, [pc, #24]	; (8002f28 <DWT_Init+0x1c>)
 8002f0e:	68d3      	ldr	r3, [r2, #12]
 8002f10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f14:	60d3      	str	r3, [r2, #12]
        //DWT->LAR = 0xC5ACCE55;
        DWT->CYCCNT = 0;
 8002f16:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <DWT_Init+0x20>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	e000edf0 	.word	0xe000edf0
 8002f2c:	e0001000 	.word	0xe0001000

08002f30 <DWT_Delay>:
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
    uint32_t startTick = DWT->CYCCNT, delayTicks = us * (SystemCoreClock/1000000);
 8002f30:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <DWT_Delay+0x20>)
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <DWT_Delay+0x24>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4907      	ldr	r1, [pc, #28]	; (8002f58 <DWT_Delay+0x28>)
 8002f3a:	fba1 1303 	umull	r1, r3, r1, r3
 8002f3e:	0c9b      	lsrs	r3, r3, #18
 8002f40:	fb00 f003 	mul.w	r0, r0, r3

    while (DWT->CYCCNT - startTick < delayTicks);
 8002f44:	4b02      	ldr	r3, [pc, #8]	; (8002f50 <DWT_Delay+0x20>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	4283      	cmp	r3, r0
 8002f4c:	d3fa      	bcc.n	8002f44 <DWT_Delay+0x14>
}
 8002f4e:	4770      	bx	lr
 8002f50:	e0001000 	.word	0xe0001000
 8002f54:	20000080 	.word	0x20000080
 8002f58:	431bde83 	.word	0x431bde83

08002f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f5c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f5e:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_Init+0x30>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f66:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f6e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f76:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f78:	2003      	movs	r0, #3
 8002f7a:	f000 f82f 	bl	8002fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f005 f882 	bl	8008088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f84:	f005 f84e 	bl	8008024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002f88:	2000      	movs	r0, #0
 8002f8a:	bd08      	pop	{r3, pc}
 8002f8c:	40023c00 	.word	0x40023c00

08002f90 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002f90:	4a03      	ldr	r2, [pc, #12]	; (8002fa0 <HAL_IncTick+0x10>)
 8002f92:	6811      	ldr	r1, [r2, #0]
 8002f94:	4b03      	ldr	r3, [pc, #12]	; (8002fa4 <HAL_IncTick+0x14>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	440b      	add	r3, r1
 8002f9a:	6013      	str	r3, [r2, #0]
}
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20004440 	.word	0x20004440
 8002fa4:	20000070 	.word	0x20000070

08002fa8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002fa8:	4b01      	ldr	r3, [pc, #4]	; (8002fb0 <HAL_GetTick+0x8>)
 8002faa:	6818      	ldr	r0, [r3, #0]
}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20004440 	.word	0x20004440

08002fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb4:	b538      	push	{r3, r4, r5, lr}
 8002fb6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002fb8:	f7ff fff6 	bl	8002fa8 <HAL_GetTick>
 8002fbc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fbe:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002fc2:	d002      	beq.n	8002fca <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <HAL_Delay+0x24>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fca:	f7ff ffed 	bl	8002fa8 <HAL_GetTick>
 8002fce:	1b40      	subs	r0, r0, r5
 8002fd0:	42a0      	cmp	r0, r4
 8002fd2:	d3fa      	bcc.n	8002fca <HAL_Delay+0x16>
  {
  }
}
 8002fd4:	bd38      	pop	{r3, r4, r5, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000070 	.word	0x20000070

08002fdc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fdc:	4a07      	ldr	r2, [pc, #28]	; (8002ffc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002fde:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fe0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002fe4:	041b      	lsls	r3, r3, #16
 8002fe6:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fe8:	0200      	lsls	r0, r0, #8
 8002fea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fee:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8002ff0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8002ff4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002ff8:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002ffa:	4770      	bx	lr
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003000:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003002:	4b17      	ldr	r3, [pc, #92]	; (8003060 <HAL_NVIC_SetPriority+0x60>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800300a:	f1c3 0407 	rsb	r4, r3, #7
 800300e:	2c04      	cmp	r4, #4
 8003010:	bf28      	it	cs
 8003012:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003014:	1d1d      	adds	r5, r3, #4
 8003016:	2d06      	cmp	r5, #6
 8003018:	d918      	bls.n	800304c <HAL_NVIC_SetPriority+0x4c>
 800301a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800301c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003020:	fa05 f404 	lsl.w	r4, r5, r4
 8003024:	ea21 0104 	bic.w	r1, r1, r4
 8003028:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800302a:	fa05 f303 	lsl.w	r3, r5, r3
 800302e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003032:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003034:	2800      	cmp	r0, #0
 8003036:	db0b      	blt.n	8003050 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003038:	0109      	lsls	r1, r1, #4
 800303a:	b2c9      	uxtb	r1, r1
 800303c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003040:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003044:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003048:	bc30      	pop	{r4, r5}
 800304a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800304c:	2300      	movs	r3, #0
 800304e:	e7e5      	b.n	800301c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003050:	f000 000f 	and.w	r0, r0, #15
 8003054:	0109      	lsls	r1, r1, #4
 8003056:	b2c9      	uxtb	r1, r1
 8003058:	4b02      	ldr	r3, [pc, #8]	; (8003064 <HAL_NVIC_SetPriority+0x64>)
 800305a:	5419      	strb	r1, [r3, r0]
 800305c:	e7f4      	b.n	8003048 <HAL_NVIC_SetPriority+0x48>
 800305e:	bf00      	nop
 8003060:	e000ed00 	.word	0xe000ed00
 8003064:	e000ed14 	.word	0xe000ed14

08003068 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003068:	2800      	cmp	r0, #0
 800306a:	db07      	blt.n	800307c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800306c:	f000 021f 	and.w	r2, r0, #31
 8003070:	0940      	lsrs	r0, r0, #5
 8003072:	2301      	movs	r3, #1
 8003074:	4093      	lsls	r3, r2
 8003076:	4a02      	ldr	r2, [pc, #8]	; (8003080 <HAL_NVIC_EnableIRQ+0x18>)
 8003078:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	e000e100 	.word	0xe000e100

08003084 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003084:	b168      	cbz	r0, 80030a2 <HAL_CRC_Init+0x1e>
{
 8003086:	b510      	push	{r4, lr}
 8003088:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800308a:	7943      	ldrb	r3, [r0, #5]
 800308c:	b12b      	cbz	r3, 800309a <HAL_CRC_Init+0x16>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800308e:	2302      	movs	r3, #2
 8003090:	7163      	strb	r3, [r4, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003092:	2301      	movs	r3, #1
 8003094:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8003096:	2000      	movs	r0, #0
}
 8003098:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800309a:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 800309c:	f004 fce0 	bl	8007a60 <HAL_CRC_MspInit>
 80030a0:	e7f5      	b.n	800308e <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 80030a2:	2001      	movs	r0, #1
}
 80030a4:	4770      	bx	lr
	...

080030a8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030a8:	6802      	ldr	r2, [r0, #0]
 80030aa:	b2d3      	uxtb	r3, r2
 80030ac:	3b10      	subs	r3, #16
 80030ae:	490b      	ldr	r1, [pc, #44]	; (80030dc <DMA_CalcBaseAndBitshift+0x34>)
 80030b0:	fba1 1303 	umull	r1, r3, r1, r3
 80030b4:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030b6:	490a      	ldr	r1, [pc, #40]	; (80030e0 <DMA_CalcBaseAndBitshift+0x38>)
 80030b8:	5cc9      	ldrb	r1, [r1, r3]
 80030ba:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d806      	bhi.n	80030ce <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030c0:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80030c4:	f022 0203 	bic.w	r2, r2, #3
 80030c8:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80030ca:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80030cc:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030ce:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 80030d2:	f022 0203 	bic.w	r2, r2, #3
 80030d6:	3204      	adds	r2, #4
 80030d8:	6582      	str	r2, [r0, #88]	; 0x58
 80030da:	e7f6      	b.n	80030ca <DMA_CalcBaseAndBitshift+0x22>
 80030dc:	aaaaaaab 	.word	0xaaaaaaab
 80030e0:	0800eaac 	.word	0x0800eaac

080030e4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030e6:	6982      	ldr	r2, [r0, #24]
 80030e8:	b992      	cbnz	r2, 8003110 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d00a      	beq.n	8003104 <DMA_CheckFifoParam+0x20>
 80030ee:	b11b      	cbz	r3, 80030f8 <DMA_CheckFifoParam+0x14>
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d001      	beq.n	80030f8 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 80030f4:	2000      	movs	r0, #0
 80030f6:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80030fa:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80030fe:	d12c      	bne.n	800315a <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8003100:	2000      	movs	r0, #0
 8003102:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003104:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003106:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800310a:	d028      	beq.n	800315e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 800310c:	2000      	movs	r0, #0
 800310e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003110:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003114:	d005      	beq.n	8003122 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003116:	2b02      	cmp	r3, #2
 8003118:	d929      	bls.n	800316e <DMA_CheckFifoParam+0x8a>
 800311a:	2b03      	cmp	r3, #3
 800311c:	d015      	beq.n	800314a <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 800311e:	2000      	movs	r0, #0
 8003120:	4770      	bx	lr
    switch (tmp)
 8003122:	2b03      	cmp	r3, #3
 8003124:	d803      	bhi.n	800312e <DMA_CheckFifoParam+0x4a>
 8003126:	e8df f003 	tbb	[pc, r3]
 800312a:	041c      	.short	0x041c
 800312c:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 800312e:	2000      	movs	r0, #0
 8003130:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003132:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003134:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003138:	d115      	bne.n	8003166 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 800313a:	2000      	movs	r0, #0
 800313c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800313e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003140:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003144:	d011      	beq.n	800316a <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8003146:	2000      	movs	r0, #0
 8003148:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800314a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800314c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003150:	d001      	beq.n	8003156 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8003152:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8003154:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8003156:	2000      	movs	r0, #0
 8003158:	4770      	bx	lr
        status = HAL_ERROR;
 800315a:	2001      	movs	r0, #1
 800315c:	4770      	bx	lr
        status = HAL_ERROR;
 800315e:	2001      	movs	r0, #1
 8003160:	4770      	bx	lr
      status = HAL_ERROR;
 8003162:	2001      	movs	r0, #1
 8003164:	4770      	bx	lr
        status = HAL_ERROR;
 8003166:	2001      	movs	r0, #1
 8003168:	4770      	bx	lr
        status = HAL_ERROR;
 800316a:	2001      	movs	r0, #1
 800316c:	4770      	bx	lr
      status = HAL_ERROR;
 800316e:	2001      	movs	r0, #1
 8003170:	4770      	bx	lr
	...

08003174 <HAL_DMA_Init>:
{
 8003174:	b570      	push	{r4, r5, r6, lr}
 8003176:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003178:	f7ff ff16 	bl	8002fa8 <HAL_GetTick>
  if(hdma == NULL)
 800317c:	2c00      	cmp	r4, #0
 800317e:	d05b      	beq.n	8003238 <HAL_DMA_Init+0xc4>
 8003180:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8003182:	2300      	movs	r3, #0
 8003184:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8003188:	2302      	movs	r3, #2
 800318a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800318e:	6822      	ldr	r2, [r4, #0]
 8003190:	6813      	ldr	r3, [r2, #0]
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	f012 0f01 	tst.w	r2, #1
 80031a0:	d00a      	beq.n	80031b8 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031a2:	f7ff ff01 	bl	8002fa8 <HAL_GetTick>
 80031a6:	1b40      	subs	r0, r0, r5
 80031a8:	2805      	cmp	r0, #5
 80031aa:	d9f5      	bls.n	8003198 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031ac:	2320      	movs	r3, #32
 80031ae:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031b0:	2003      	movs	r0, #3
 80031b2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80031b6:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 80031b8:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031ba:	4820      	ldr	r0, [pc, #128]	; (800323c <HAL_DMA_Init+0xc8>)
 80031bc:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031be:	6861      	ldr	r1, [r4, #4]
 80031c0:	68a2      	ldr	r2, [r4, #8]
 80031c2:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c4:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031c6:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c8:	6921      	ldr	r1, [r4, #16]
 80031ca:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031cc:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ce:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d0:	69a1      	ldr	r1, [r4, #24]
 80031d2:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80031d4:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d6:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80031d8:	6a21      	ldr	r1, [r4, #32]
 80031da:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031dc:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80031e0:	2904      	cmp	r1, #4
 80031e2:	d01e      	beq.n	8003222 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80031e4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80031e6:	6826      	ldr	r6, [r4, #0]
 80031e8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031ea:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80031ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031f0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d107      	bne.n	8003206 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80031f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031f8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80031fc:	b11b      	cbz	r3, 8003206 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031fe:	4620      	mov	r0, r4
 8003200:	f7ff ff70 	bl	80030e4 <DMA_CheckFifoParam>
 8003204:	b990      	cbnz	r0, 800322c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8003206:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003208:	4620      	mov	r0, r4
 800320a:	f7ff ff4d 	bl	80030a8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800320e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003210:	233f      	movs	r3, #63	; 0x3f
 8003212:	4093      	lsls	r3, r2
 8003214:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003216:	2000      	movs	r0, #0
 8003218:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800321a:	2301      	movs	r3, #1
 800321c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003220:	e7c9      	b.n	80031b6 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003222:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003224:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003226:	4301      	orrs	r1, r0
 8003228:	430a      	orrs	r2, r1
 800322a:	e7db      	b.n	80031e4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800322c:	2340      	movs	r3, #64	; 0x40
 800322e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003230:	2001      	movs	r0, #1
 8003232:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8003236:	e7be      	b.n	80031b6 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8003238:	2001      	movs	r0, #1
 800323a:	e7bc      	b.n	80031b6 <HAL_DMA_Init+0x42>
 800323c:	f010803f 	.word	0xf010803f

08003240 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003240:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d003      	beq.n	8003252 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800324a:	2380      	movs	r3, #128	; 0x80
 800324c:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800324e:	2001      	movs	r0, #1
 8003250:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8003252:	2305      	movs	r3, #5
 8003254:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8003258:	6802      	ldr	r2, [r0, #0]
 800325a:	6813      	ldr	r3, [r2, #0]
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003262:	2000      	movs	r0, #0
}
 8003264:	4770      	bx	lr
	...

08003268 <HAL_DMA_IRQHandler>:
{
 8003268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800326a:	b083      	sub	sp, #12
 800326c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003272:	4b72      	ldr	r3, [pc, #456]	; (800343c <HAL_DMA_IRQHandler+0x1d4>)
 8003274:	681d      	ldr	r5, [r3, #0]
 8003276:	4b72      	ldr	r3, [pc, #456]	; (8003440 <HAL_DMA_IRQHandler+0x1d8>)
 8003278:	fba3 3505 	umull	r3, r5, r3, r5
 800327c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800327e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8003280:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003282:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003284:	2308      	movs	r3, #8
 8003286:	4093      	lsls	r3, r2
 8003288:	4233      	tst	r3, r6
 800328a:	d010      	beq.n	80032ae <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800328c:	6803      	ldr	r3, [r0, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	f012 0f04 	tst.w	r2, #4
 8003294:	d00b      	beq.n	80032ae <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	f022 0204 	bic.w	r2, r2, #4
 800329c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800329e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80032a0:	2308      	movs	r3, #8
 80032a2:	4093      	lsls	r3, r2
 80032a4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032a6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80032b0:	2301      	movs	r3, #1
 80032b2:	4093      	lsls	r3, r2
 80032b4:	4233      	tst	r3, r6
 80032b6:	d009      	beq.n	80032cc <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032b8:	6822      	ldr	r2, [r4, #0]
 80032ba:	6952      	ldr	r2, [r2, #20]
 80032bc:	f012 0f80 	tst.w	r2, #128	; 0x80
 80032c0:	d004      	beq.n	80032cc <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032c2:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032c6:	f043 0302 	orr.w	r3, r3, #2
 80032ca:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032cc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80032ce:	2304      	movs	r3, #4
 80032d0:	4093      	lsls	r3, r2
 80032d2:	4233      	tst	r3, r6
 80032d4:	d009      	beq.n	80032ea <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032d6:	6822      	ldr	r2, [r4, #0]
 80032d8:	6812      	ldr	r2, [r2, #0]
 80032da:	f012 0f02 	tst.w	r2, #2
 80032de:	d004      	beq.n	80032ea <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032e0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032e4:	f043 0304 	orr.w	r3, r3, #4
 80032e8:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80032ec:	2310      	movs	r3, #16
 80032ee:	4093      	lsls	r3, r2
 80032f0:	4233      	tst	r3, r6
 80032f2:	d024      	beq.n	800333e <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032f4:	6822      	ldr	r2, [r4, #0]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	f012 0f08 	tst.w	r2, #8
 80032fc:	d01f      	beq.n	800333e <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032fe:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003308:	d00d      	beq.n	8003326 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003310:	d104      	bne.n	800331c <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8003312:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003314:	b19b      	cbz	r3, 800333e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8003316:	4620      	mov	r0, r4
 8003318:	4798      	blx	r3
 800331a:	e010      	b.n	800333e <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800331c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800331e:	b173      	cbz	r3, 800333e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8003320:	4620      	mov	r0, r4
 8003322:	4798      	blx	r3
 8003324:	e00b      	b.n	800333e <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	f412 7f80 	tst.w	r2, #256	; 0x100
 800332c:	d103      	bne.n	8003336 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	f022 0208 	bic.w	r2, r2, #8
 8003334:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8003336:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003338:	b10b      	cbz	r3, 800333e <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800333a:	4620      	mov	r0, r4
 800333c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800333e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003340:	2320      	movs	r3, #32
 8003342:	4093      	lsls	r3, r2
 8003344:	4233      	tst	r3, r6
 8003346:	d055      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003348:	6822      	ldr	r2, [r4, #0]
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	f012 0f10 	tst.w	r2, #16
 8003350:	d050      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003352:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003354:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b05      	cmp	r3, #5
 800335c:	d00e      	beq.n	800337c <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003366:	d033      	beq.n	80033d0 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800336e:	d12a      	bne.n	80033c6 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8003370:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003372:	2b00      	cmp	r3, #0
 8003374:	d03e      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8003376:	4620      	mov	r0, r4
 8003378:	4798      	blx	r3
 800337a:	e03b      	b.n	80033f4 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800337c:	6822      	ldr	r2, [r4, #0]
 800337e:	6813      	ldr	r3, [r2, #0]
 8003380:	f023 0316 	bic.w	r3, r3, #22
 8003384:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003386:	6822      	ldr	r2, [r4, #0]
 8003388:	6953      	ldr	r3, [r2, #20]
 800338a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800338e:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003390:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003392:	b1a3      	cbz	r3, 80033be <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003394:	6822      	ldr	r2, [r4, #0]
 8003396:	6813      	ldr	r3, [r2, #0]
 8003398:	f023 0308 	bic.w	r3, r3, #8
 800339c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800339e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80033a0:	233f      	movs	r3, #63	; 0x3f
 80033a2:	4093      	lsls	r3, r2
 80033a4:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80033a6:	2300      	movs	r3, #0
 80033a8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80033b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d03f      	beq.n	8003438 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 80033b8:	4620      	mov	r0, r4
 80033ba:	4798      	blx	r3
 80033bc:	e03c      	b.n	8003438 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1e7      	bne.n	8003394 <HAL_DMA_IRQHandler+0x12c>
 80033c4:	e7eb      	b.n	800339e <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 80033c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033c8:	b1a3      	cbz	r3, 80033f4 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 80033ca:	4620      	mov	r0, r4
 80033cc:	4798      	blx	r3
 80033ce:	e011      	b.n	80033f4 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	f412 7f80 	tst.w	r2, #256	; 0x100
 80033d6:	d109      	bne.n	80033ec <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	f022 0210 	bic.w	r2, r2, #16
 80033de:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 80033e0:	2300      	movs	r3, #0
 80033e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80033ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033ee:	b10b      	cbz	r3, 80033f4 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80033f0:	4620      	mov	r0, r4
 80033f2:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033f6:	b1fb      	cbz	r3, 8003438 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033fa:	f013 0f01 	tst.w	r3, #1
 80033fe:	d017      	beq.n	8003430 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8003400:	2305      	movs	r3, #5
 8003402:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8003406:	6822      	ldr	r2, [r4, #0]
 8003408:	6813      	ldr	r3, [r2, #0]
 800340a:	f023 0301 	bic.w	r3, r3, #1
 800340e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8003410:	9b01      	ldr	r3, [sp, #4]
 8003412:	3301      	adds	r3, #1
 8003414:	9301      	str	r3, [sp, #4]
 8003416:	42ab      	cmp	r3, r5
 8003418:	d804      	bhi.n	8003424 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f013 0f01 	tst.w	r3, #1
 8003422:	d1f5      	bne.n	8003410 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8003424:	2300      	movs	r3, #0
 8003426:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800342a:	2301      	movs	r3, #1
 800342c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8003430:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003432:	b10b      	cbz	r3, 8003438 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8003434:	4620      	mov	r0, r4
 8003436:	4798      	blx	r3
}
 8003438:	b003      	add	sp, #12
 800343a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800343c:	20000080 	.word	0x20000080
 8003440:	1b4e81b5 	.word	0x1b4e81b5

08003444 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003444:	4b27      	ldr	r3, [pc, #156]	; (80034e4 <FLASH_SetErrorCode+0xa0>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f013 0f10 	tst.w	r3, #16
 800344c:	d007      	beq.n	800345e <FLASH_SetErrorCode+0x1a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800344e:	4a26      	ldr	r2, [pc, #152]	; (80034e8 <FLASH_SetErrorCode+0xa4>)
 8003450:	69d3      	ldr	r3, [r2, #28]
 8003452:	f043 0310 	orr.w	r3, r3, #16
 8003456:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003458:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <FLASH_SetErrorCode+0xa0>)
 800345a:	2210      	movs	r2, #16
 800345c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800345e:	4b21      	ldr	r3, [pc, #132]	; (80034e4 <FLASH_SetErrorCode+0xa0>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f013 0f20 	tst.w	r3, #32
 8003466:	d007      	beq.n	8003478 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003468:	4a1f      	ldr	r2, [pc, #124]	; (80034e8 <FLASH_SetErrorCode+0xa4>)
 800346a:	69d3      	ldr	r3, [r2, #28]
 800346c:	f043 0308 	orr.w	r3, r3, #8
 8003470:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003472:	4b1c      	ldr	r3, [pc, #112]	; (80034e4 <FLASH_SetErrorCode+0xa0>)
 8003474:	2220      	movs	r2, #32
 8003476:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003478:	4b1a      	ldr	r3, [pc, #104]	; (80034e4 <FLASH_SetErrorCode+0xa0>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003480:	d007      	beq.n	8003492 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003482:	4a19      	ldr	r2, [pc, #100]	; (80034e8 <FLASH_SetErrorCode+0xa4>)
 8003484:	69d3      	ldr	r3, [r2, #28]
 8003486:	f043 0304 	orr.w	r3, r3, #4
 800348a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800348c:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <FLASH_SetErrorCode+0xa0>)
 800348e:	2240      	movs	r2, #64	; 0x40
 8003490:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003492:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <FLASH_SetErrorCode+0xa0>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f013 0f80 	tst.w	r3, #128	; 0x80
 800349a:	d007      	beq.n	80034ac <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800349c:	4a12      	ldr	r2, [pc, #72]	; (80034e8 <FLASH_SetErrorCode+0xa4>)
 800349e:	69d3      	ldr	r3, [r2, #28]
 80034a0:	f043 0302 	orr.w	r3, r3, #2
 80034a4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80034a6:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <FLASH_SetErrorCode+0xa0>)
 80034a8:	2280      	movs	r2, #128	; 0x80
 80034aa:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80034ac:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <FLASH_SetErrorCode+0xa0>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80034b4:	d008      	beq.n	80034c8 <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80034b6:	4a0c      	ldr	r2, [pc, #48]	; (80034e8 <FLASH_SetErrorCode+0xa4>)
 80034b8:	69d3      	ldr	r3, [r2, #28]
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80034c0:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <FLASH_SetErrorCode+0xa0>)
 80034c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034c6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80034c8:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <FLASH_SetErrorCode+0xa0>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f013 0f02 	tst.w	r3, #2
 80034d0:	d007      	beq.n	80034e2 <FLASH_SetErrorCode+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80034d2:	4a05      	ldr	r2, [pc, #20]	; (80034e8 <FLASH_SetErrorCode+0xa4>)
 80034d4:	69d3      	ldr	r3, [r2, #28]
 80034d6:	f043 0320 	orr.w	r3, r3, #32
 80034da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80034dc:	4b01      	ldr	r3, [pc, #4]	; (80034e4 <FLASH_SetErrorCode+0xa0>)
 80034de:	2202      	movs	r2, #2
 80034e0:	60da      	str	r2, [r3, #12]
  }
}
 80034e2:	4770      	bx	lr
 80034e4:	40023c00 	.word	0x40023c00
 80034e8:	20004444 	.word	0x20004444

080034ec <HAL_FLASH_EndOfOperationCallback>:
}
 80034ec:	4770      	bx	lr

080034ee <HAL_FLASH_OperationErrorCallback>:
}
 80034ee:	4770      	bx	lr

080034f0 <HAL_FLASH_IRQHandler>:
{
 80034f0:	b510      	push	{r4, lr}
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80034f2:	4b3a      	ldr	r3, [pc, #232]	; (80035dc <HAL_FLASH_IRQHandler+0xec>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f413 7ff9 	tst.w	r3, #498	; 0x1f2
 80034fa:	d013      	beq.n	8003524 <HAL_FLASH_IRQHandler+0x34>
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80034fc:	4b38      	ldr	r3, [pc, #224]	; (80035e0 <HAL_FLASH_IRQHandler+0xf0>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d03b      	beq.n	800357e <HAL_FLASH_IRQHandler+0x8e>
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8003506:	4b36      	ldr	r3, [pc, #216]	; (80035e0 <HAL_FLASH_IRQHandler+0xf0>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d03c      	beq.n	800358a <HAL_FLASH_IRQHandler+0x9a>
      addresstmp = pFlash.Address;
 8003510:	4b33      	ldr	r3, [pc, #204]	; (80035e0 <HAL_FLASH_IRQHandler+0xf0>)
 8003512:	695c      	ldr	r4, [r3, #20]
    FLASH_SetErrorCode();
 8003514:	f7ff ff96 	bl	8003444 <FLASH_SetErrorCode>
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8003518:	4620      	mov	r0, r4
 800351a:	f7ff ffe8 	bl	80034ee <HAL_FLASH_OperationErrorCallback>
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800351e:	4b30      	ldr	r3, [pc, #192]	; (80035e0 <HAL_FLASH_IRQHandler+0xf0>)
 8003520:	2200      	movs	r2, #0
 8003522:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003524:	4b2d      	ldr	r3, [pc, #180]	; (80035dc <HAL_FLASH_IRQHandler+0xec>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f013 0f01 	tst.w	r3, #1
 800352c:	d013      	beq.n	8003556 <HAL_FLASH_IRQHandler+0x66>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800352e:	4b2b      	ldr	r3, [pc, #172]	; (80035dc <HAL_FLASH_IRQHandler+0xec>)
 8003530:	2201      	movs	r2, #1
 8003532:	60da      	str	r2, [r3, #12]
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8003534:	4b2a      	ldr	r3, [pc, #168]	; (80035e0 <HAL_FLASH_IRQHandler+0xf0>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	4293      	cmp	r3, r2
 800353c:	d028      	beq.n	8003590 <HAL_FLASH_IRQHandler+0xa0>
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800353e:	4b28      	ldr	r3, [pc, #160]	; (80035e0 <HAL_FLASH_IRQHandler+0xf0>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d041      	beq.n	80035cc <HAL_FLASH_IRQHandler+0xdc>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003548:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <HAL_FLASH_IRQHandler+0xf0>)
 800354a:	6958      	ldr	r0, [r3, #20]
 800354c:	f7ff ffce 	bl	80034ec <HAL_FLASH_EndOfOperationCallback>
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003550:	4b23      	ldr	r3, [pc, #140]	; (80035e0 <HAL_FLASH_IRQHandler+0xf0>)
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8003556:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <HAL_FLASH_IRQHandler+0xf0>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	b97b      	cbnz	r3, 800357c <HAL_FLASH_IRQHandler+0x8c>
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800355c:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <HAL_FLASH_IRQHandler+0xec>)
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003564:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800356c:	611a      	str	r2, [r3, #16]
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003574:	611a      	str	r2, [r3, #16]
    __HAL_UNLOCK(&pFlash);
 8003576:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <HAL_FLASH_IRQHandler+0xf0>)
 8003578:	2200      	movs	r2, #0
 800357a:	761a      	strb	r2, [r3, #24]
}
 800357c:	bd10      	pop	{r4, pc}
      addresstmp = pFlash.Sector;
 800357e:	4b18      	ldr	r3, [pc, #96]	; (80035e0 <HAL_FLASH_IRQHandler+0xf0>)
 8003580:	68dc      	ldr	r4, [r3, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 8003582:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003586:	60da      	str	r2, [r3, #12]
 8003588:	e7c4      	b.n	8003514 <HAL_FLASH_IRQHandler+0x24>
      addresstmp = pFlash.Bank;
 800358a:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <HAL_FLASH_IRQHandler+0xf0>)
 800358c:	691c      	ldr	r4, [r3, #16]
 800358e:	e7c1      	b.n	8003514 <HAL_FLASH_IRQHandler+0x24>
      pFlash.NbSectorsToErase--;
 8003590:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <HAL_FLASH_IRQHandler+0xf0>)
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	3a01      	subs	r2, #1
 8003596:	605a      	str	r2, [r3, #4]
      if(pFlash.NbSectorsToErase != 0U)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	b15b      	cbz	r3, 80035b4 <HAL_FLASH_IRQHandler+0xc4>
        addresstmp = pFlash.Sector;
 800359c:	4c10      	ldr	r4, [pc, #64]	; (80035e0 <HAL_FLASH_IRQHandler+0xf0>)
 800359e:	68e0      	ldr	r0, [r4, #12]
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80035a0:	f7ff ffa4 	bl	80034ec <HAL_FLASH_EndOfOperationCallback>
        pFlash.Sector++;
 80035a4:	68e3      	ldr	r3, [r4, #12]
 80035a6:	3301      	adds	r3, #1
 80035a8:	60e3      	str	r3, [r4, #12]
        addresstmp = pFlash.Sector;
 80035aa:	68e0      	ldr	r0, [r4, #12]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 80035ac:	7a21      	ldrb	r1, [r4, #8]
 80035ae:	f000 f819 	bl	80035e4 <FLASH_Erase_Sector>
 80035b2:	e7d0      	b.n	8003556 <HAL_FLASH_IRQHandler+0x66>
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 80035b4:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <HAL_FLASH_IRQHandler+0xf0>)
 80035b6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80035ba:	60dc      	str	r4, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80035bc:	2200      	movs	r2, #0
 80035be:	701a      	strb	r2, [r3, #0]
        FLASH_FlushCaches() ;
 80035c0:	f000 f83c 	bl	800363c <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80035c4:	4620      	mov	r0, r4
 80035c6:	f7ff ff91 	bl	80034ec <HAL_FLASH_EndOfOperationCallback>
 80035ca:	e7c4      	b.n	8003556 <HAL_FLASH_IRQHandler+0x66>
        FLASH_FlushCaches() ;
 80035cc:	f000 f836 	bl	800363c <FLASH_FlushCaches>
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80035d0:	4b03      	ldr	r3, [pc, #12]	; (80035e0 <HAL_FLASH_IRQHandler+0xf0>)
 80035d2:	6918      	ldr	r0, [r3, #16]
 80035d4:	f7ff ff8a 	bl	80034ec <HAL_FLASH_EndOfOperationCallback>
 80035d8:	e7ba      	b.n	8003550 <HAL_FLASH_IRQHandler+0x60>
 80035da:	bf00      	nop
 80035dc:	40023c00 	.word	0x40023c00
 80035e0:	20004444 	.word	0x20004444

080035e4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80035e4:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80035e6:	b149      	cbz	r1, 80035fc <FLASH_Erase_Sector+0x18>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80035e8:	2901      	cmp	r1, #1
 80035ea:	d021      	beq.n	8003630 <FLASH_Erase_Sector+0x4c>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80035ec:	2902      	cmp	r1, #2
 80035ee:	d002      	beq.n	80035f6 <FLASH_Erase_Sector+0x12>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80035f0:	f44f 7440 	mov.w	r4, #768	; 0x300
 80035f4:	e003      	b.n	80035fe <FLASH_Erase_Sector+0x1a>
    tmp_psize = FLASH_PSIZE_WORD;
 80035f6:	f44f 7400 	mov.w	r4, #512	; 0x200
 80035fa:	e000      	b.n	80035fe <FLASH_Erase_Sector+0x1a>
     tmp_psize = FLASH_PSIZE_BYTE;
 80035fc:	2400      	movs	r4, #0
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80035fe:	4b0e      	ldr	r3, [pc, #56]	; (8003638 <FLASH_Erase_Sector+0x54>)
 8003600:	6919      	ldr	r1, [r3, #16]
 8003602:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8003606:	6119      	str	r1, [r3, #16]
  FLASH->CR |= tmp_psize;
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	4322      	orrs	r2, r4
 800360c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003614:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 800361c:	f040 0002 	orr.w	r0, r0, #2
 8003620:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003628:	611a      	str	r2, [r3, #16]
}
 800362a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800362e:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003630:	f44f 7480 	mov.w	r4, #256	; 0x100
 8003634:	e7e3      	b.n	80035fe <FLASH_Erase_Sector+0x1a>
 8003636:	bf00      	nop
 8003638:	40023c00 	.word	0x40023c00

0800363c <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800363c:	4b16      	ldr	r3, [pc, #88]	; (8003698 <FLASH_FlushCaches+0x5c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003644:	d010      	beq.n	8003668 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003646:	4b14      	ldr	r3, [pc, #80]	; (8003698 <FLASH_FlushCaches+0x5c>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800364e:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800365e:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003666:	601a      	str	r2, [r3, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <FLASH_FlushCaches+0x5c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003670:	d010      	beq.n	8003694 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003672:	4b09      	ldr	r3, [pc, #36]	; (8003698 <FLASH_FlushCaches+0x5c>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800367a:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800368a:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003692:	601a      	str	r2, [r3, #0]
  }
}
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40023c00 	.word	0x40023c00

0800369c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800369c:	2300      	movs	r3, #0
 800369e:	2b0f      	cmp	r3, #15
 80036a0:	f200 80c5 	bhi.w	800382e <HAL_GPIO_Init+0x192>
{
 80036a4:	b4f0      	push	{r4, r5, r6, r7}
 80036a6:	b082      	sub	sp, #8
 80036a8:	e039      	b.n	800371e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036aa:	2204      	movs	r2, #4
 80036ac:	e000      	b.n	80036b0 <HAL_GPIO_Init+0x14>
 80036ae:	2200      	movs	r2, #0
 80036b0:	40b2      	lsls	r2, r6
 80036b2:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036b4:	3402      	adds	r4, #2
 80036b6:	4e5e      	ldr	r6, [pc, #376]	; (8003830 <HAL_GPIO_Init+0x194>)
 80036b8:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036bc:	4a5d      	ldr	r2, [pc, #372]	; (8003834 <HAL_GPIO_Init+0x198>)
 80036be:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80036c0:	43ea      	mvns	r2, r5
 80036c2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036c6:	684f      	ldr	r7, [r1, #4]
 80036c8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80036cc:	d001      	beq.n	80036d2 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80036ce:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80036d2:	4c58      	ldr	r4, [pc, #352]	; (8003834 <HAL_GPIO_Init+0x198>)
 80036d4:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80036d6:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80036d8:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036dc:	684f      	ldr	r7, [r1, #4]
 80036de:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80036e2:	d001      	beq.n	80036e8 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80036e4:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80036e8:	4c52      	ldr	r4, [pc, #328]	; (8003834 <HAL_GPIO_Init+0x198>)
 80036ea:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ec:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80036ee:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036f2:	684f      	ldr	r7, [r1, #4]
 80036f4:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80036f8:	d001      	beq.n	80036fe <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80036fa:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80036fe:	4c4d      	ldr	r4, [pc, #308]	; (8003834 <HAL_GPIO_Init+0x198>)
 8003700:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8003702:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8003704:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003706:	684e      	ldr	r6, [r1, #4]
 8003708:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800370c:	d001      	beq.n	8003712 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800370e:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8003712:	4c48      	ldr	r4, [pc, #288]	; (8003834 <HAL_GPIO_Init+0x198>)
 8003714:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003716:	3301      	adds	r3, #1
 8003718:	2b0f      	cmp	r3, #15
 800371a:	f200 8085 	bhi.w	8003828 <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 800371e:	2201      	movs	r2, #1
 8003720:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003722:	680c      	ldr	r4, [r1, #0]
 8003724:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8003728:	42aa      	cmp	r2, r5
 800372a:	d1f4      	bne.n	8003716 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800372c:	684c      	ldr	r4, [r1, #4]
 800372e:	2c02      	cmp	r4, #2
 8003730:	d001      	beq.n	8003736 <HAL_GPIO_Init+0x9a>
 8003732:	2c12      	cmp	r4, #18
 8003734:	d110      	bne.n	8003758 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8003736:	08de      	lsrs	r6, r3, #3
 8003738:	3608      	adds	r6, #8
 800373a:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800373e:	f003 0407 	and.w	r4, r3, #7
 8003742:	00a7      	lsls	r7, r4, #2
 8003744:	240f      	movs	r4, #15
 8003746:	40bc      	lsls	r4, r7
 8003748:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800374c:	690c      	ldr	r4, [r1, #16]
 800374e:	40bc      	lsls	r4, r7
 8003750:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8003754:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8003758:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800375a:	005f      	lsls	r7, r3, #1
 800375c:	2603      	movs	r6, #3
 800375e:	40be      	lsls	r6, r7
 8003760:	43f6      	mvns	r6, r6
 8003762:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003766:	684c      	ldr	r4, [r1, #4]
 8003768:	f004 0403 	and.w	r4, r4, #3
 800376c:	40bc      	lsls	r4, r7
 800376e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003772:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003774:	684c      	ldr	r4, [r1, #4]
 8003776:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800377a:	f1bc 0f01 	cmp.w	ip, #1
 800377e:	d903      	bls.n	8003788 <HAL_GPIO_Init+0xec>
 8003780:	2c11      	cmp	r4, #17
 8003782:	d001      	beq.n	8003788 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003784:	2c12      	cmp	r4, #18
 8003786:	d110      	bne.n	80037aa <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8003788:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800378a:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800378e:	68cc      	ldr	r4, [r1, #12]
 8003790:	40bc      	lsls	r4, r7
 8003792:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8003796:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003798:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800379a:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800379e:	684c      	ldr	r4, [r1, #4]
 80037a0:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80037a4:	409c      	lsls	r4, r3
 80037a6:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 80037a8:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80037aa:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037ac:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ae:	688a      	ldr	r2, [r1, #8]
 80037b0:	40ba      	lsls	r2, r7
 80037b2:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 80037b4:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037b6:	684a      	ldr	r2, [r1, #4]
 80037b8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80037bc:	d0ab      	beq.n	8003716 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037be:	2200      	movs	r2, #0
 80037c0:	9201      	str	r2, [sp, #4]
 80037c2:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <HAL_GPIO_Init+0x19c>)
 80037c4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80037c6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80037ca:	6454      	str	r4, [r2, #68]	; 0x44
 80037cc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037ce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80037d2:	9201      	str	r2, [sp, #4]
 80037d4:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80037d6:	089c      	lsrs	r4, r3, #2
 80037d8:	1ca6      	adds	r6, r4, #2
 80037da:	4a15      	ldr	r2, [pc, #84]	; (8003830 <HAL_GPIO_Init+0x194>)
 80037dc:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037e0:	f003 0203 	and.w	r2, r3, #3
 80037e4:	0096      	lsls	r6, r2, #2
 80037e6:	220f      	movs	r2, #15
 80037e8:	40b2      	lsls	r2, r6
 80037ea:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ee:	4a13      	ldr	r2, [pc, #76]	; (800383c <HAL_GPIO_Init+0x1a0>)
 80037f0:	4290      	cmp	r0, r2
 80037f2:	f43f af5c 	beq.w	80036ae <HAL_GPIO_Init+0x12>
 80037f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80037fa:	4290      	cmp	r0, r2
 80037fc:	d00e      	beq.n	800381c <HAL_GPIO_Init+0x180>
 80037fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003802:	4290      	cmp	r0, r2
 8003804:	d00c      	beq.n	8003820 <HAL_GPIO_Init+0x184>
 8003806:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800380a:	4290      	cmp	r0, r2
 800380c:	d00a      	beq.n	8003824 <HAL_GPIO_Init+0x188>
 800380e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003812:	4290      	cmp	r0, r2
 8003814:	f43f af49 	beq.w	80036aa <HAL_GPIO_Init+0xe>
 8003818:	2207      	movs	r2, #7
 800381a:	e749      	b.n	80036b0 <HAL_GPIO_Init+0x14>
 800381c:	2201      	movs	r2, #1
 800381e:	e747      	b.n	80036b0 <HAL_GPIO_Init+0x14>
 8003820:	2202      	movs	r2, #2
 8003822:	e745      	b.n	80036b0 <HAL_GPIO_Init+0x14>
 8003824:	2203      	movs	r2, #3
 8003826:	e743      	b.n	80036b0 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8003828:	b002      	add	sp, #8
 800382a:	bcf0      	pop	{r4, r5, r6, r7}
 800382c:	4770      	bx	lr
 800382e:	4770      	bx	lr
 8003830:	40013800 	.word	0x40013800
 8003834:	40013c00 	.word	0x40013c00
 8003838:	40023800 	.word	0x40023800
 800383c:	40020000 	.word	0x40020000

08003840 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003840:	b912      	cbnz	r2, 8003848 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003842:	0409      	lsls	r1, r1, #16
 8003844:	6181      	str	r1, [r0, #24]
  }
}
 8003846:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8003848:	6181      	str	r1, [r0, #24]
 800384a:	4770      	bx	lr

0800384c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800384c:	6943      	ldr	r3, [r0, #20]
 800384e:	ea31 0303 	bics.w	r3, r1, r3
 8003852:	d001      	beq.n	8003858 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8003854:	6181      	str	r1, [r0, #24]
  }
}
 8003856:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003858:	0409      	lsls	r1, r1, #16
 800385a:	6181      	str	r1, [r0, #24]
 800385c:	4770      	bx	lr

0800385e <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800385e:	4770      	bx	lr

08003860 <HAL_GPIO_EXTI_IRQHandler>:
{
 8003860:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	4203      	tst	r3, r0
 8003868:	d100      	bne.n	800386c <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 800386a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800386c:	4b02      	ldr	r3, [pc, #8]	; (8003878 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800386e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003870:	f7ff fff5 	bl	800385e <HAL_GPIO_EXTI_Callback>
}
 8003874:	e7f9      	b.n	800386a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003876:	bf00      	nop
 8003878:	40013c00 	.word	0x40013c00

0800387c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800387c:	6803      	ldr	r3, [r0, #0]
 800387e:	695a      	ldr	r2, [r3, #20]
 8003880:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003884:	d011      	beq.n	80038aa <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003886:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800388a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800388c:	2300      	movs	r3, #0
 800388e:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003890:	2220      	movs	r2, #32
 8003892:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003896:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800389a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800389c:	f042 0204 	orr.w	r2, r2, #4
 80038a0:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 80038a6:	2001      	movs	r0, #1
 80038a8:	4770      	bx	lr
  }
  return HAL_OK;
 80038aa:	2000      	movs	r0, #0
}
 80038ac:	4770      	bx	lr

080038ae <I2C_WaitOnFlagUntilTimeout>:
{
 80038ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b0:	4606      	mov	r6, r0
 80038b2:	460c      	mov	r4, r1
 80038b4:	4617      	mov	r7, r2
 80038b6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038b8:	e022      	b.n	8003900 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ba:	f7ff fb75 	bl	8002fa8 <HAL_GetTick>
 80038be:	9b06      	ldr	r3, [sp, #24]
 80038c0:	1ac0      	subs	r0, r0, r3
 80038c2:	42a8      	cmp	r0, r5
 80038c4:	d800      	bhi.n	80038c8 <I2C_WaitOnFlagUntilTimeout+0x1a>
 80038c6:	b9dd      	cbnz	r5, 8003900 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038c8:	2300      	movs	r3, #0
 80038ca:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038cc:	2220      	movs	r2, #32
 80038ce:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038d2:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038d6:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80038d8:	f042 0220 	orr.w	r2, r2, #32
 80038dc:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80038de:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 80038e2:	2001      	movs	r0, #1
 80038e4:	e01a      	b.n	800391c <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038e6:	6833      	ldr	r3, [r6, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	ea24 0303 	bic.w	r3, r4, r3
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	fab3 f383 	clz	r3, r3
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	429f      	cmp	r7, r3
 80038f8:	d10f      	bne.n	800391a <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 80038fa:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80038fe:	d1dc      	bne.n	80038ba <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003900:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8003904:	2b01      	cmp	r3, #1
 8003906:	d0ee      	beq.n	80038e6 <I2C_WaitOnFlagUntilTimeout+0x38>
 8003908:	6833      	ldr	r3, [r6, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	ea24 0303 	bic.w	r3, r4, r3
 8003910:	b29b      	uxth	r3, r3
 8003912:	fab3 f383 	clz	r3, r3
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	e7ed      	b.n	80038f6 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 800391a:	2000      	movs	r0, #0
}
 800391c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800391e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800391e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003920:	4604      	mov	r4, r0
 8003922:	460d      	mov	r5, r1
 8003924:	4616      	mov	r6, r2
 8003926:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003928:	e03c      	b.n	80039a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003930:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003938:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800393a:	2300      	movs	r3, #0
 800393c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800393e:	2220      	movs	r2, #32
 8003940:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003944:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003948:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800394a:	f042 0204 	orr.w	r2, r2, #4
 800394e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003950:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8003954:	2001      	movs	r0, #1
 8003956:	e033      	b.n	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003958:	f7ff fb26 	bl	8002fa8 <HAL_GetTick>
 800395c:	1bc0      	subs	r0, r0, r7
 800395e:	42b0      	cmp	r0, r6
 8003960:	d800      	bhi.n	8003964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8003962:	b9fe      	cbnz	r6, 80039a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003964:	2300      	movs	r3, #0
 8003966:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003968:	2220      	movs	r2, #32
 800396a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003972:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003974:	f042 0220 	orr.w	r2, r2, #32
 8003978:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800397a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800397e:	2001      	movs	r0, #1
 8003980:	e01e      	b.n	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	ea25 0303 	bic.w	r3, r5, r3
 800398a:	b29b      	uxth	r3, r3
 800398c:	3300      	adds	r3, #0
 800398e:	bf18      	it	ne
 8003990:	2301      	movne	r3, #1
 8003992:	b1a3      	cbz	r3, 80039be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800399c:	d1c5      	bne.n	800392a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 800399e:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80039a2:	d1d9      	bne.n	8003958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039a4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d0ea      	beq.n	8003982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	ea25 0303 	bic.w	r3, r5, r3
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3300      	adds	r3, #0
 80039b8:	bf18      	it	ne
 80039ba:	2301      	movne	r3, #1
 80039bc:	e7e9      	b.n	8003992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 80039be:	2000      	movs	r0, #0
}
 80039c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039c4 <I2C_MasterRequestWrite>:
{
 80039c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039c6:	b083      	sub	sp, #12
 80039c8:	4604      	mov	r4, r0
 80039ca:	460f      	mov	r7, r1
 80039cc:	4615      	mov	r5, r2
 80039ce:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039d0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d00d      	beq.n	80039f2 <I2C_MasterRequestWrite+0x2e>
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d00b      	beq.n	80039f2 <I2C_MasterRequestWrite+0x2e>
 80039da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039de:	d008      	beq.n	80039f2 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80039e2:	2b12      	cmp	r3, #18
 80039e4:	d10a      	bne.n	80039fc <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039e6:	6802      	ldr	r2, [r0, #0]
 80039e8:	6813      	ldr	r3, [r2, #0]
 80039ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	e004      	b.n	80039fc <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039f2:	6822      	ldr	r2, [r4, #0]
 80039f4:	6813      	ldr	r3, [r2, #0]
 80039f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039fa:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039fc:	9600      	str	r6, [sp, #0]
 80039fe:	462b      	mov	r3, r5
 8003a00:	2200      	movs	r2, #0
 8003a02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a06:	4620      	mov	r0, r4
 8003a08:	f7ff ff51 	bl	80038ae <I2C_WaitOnFlagUntilTimeout>
 8003a0c:	bb18      	cbnz	r0, 8003a56 <I2C_MasterRequestWrite+0x92>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a0e:	6923      	ldr	r3, [r4, #16]
 8003a10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a14:	d10d      	bne.n	8003a32 <I2C_MasterRequestWrite+0x6e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8003a1c:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a1e:	4633      	mov	r3, r6
 8003a20:	462a      	mov	r2, r5
 8003a22:	4910      	ldr	r1, [pc, #64]	; (8003a64 <I2C_MasterRequestWrite+0xa0>)
 8003a24:	4620      	mov	r0, r4
 8003a26:	f7ff ff7a 	bl	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	b1a0      	cbz	r0, 8003a58 <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e012      	b.n	8003a58 <I2C_MasterRequestWrite+0x94>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a32:	11fb      	asrs	r3, r7, #7
 8003a34:	6822      	ldr	r2, [r4, #0]
 8003a36:	f003 0306 	and.w	r3, r3, #6
 8003a3a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003a3e:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a40:	4633      	mov	r3, r6
 8003a42:	462a      	mov	r2, r5
 8003a44:	4908      	ldr	r1, [pc, #32]	; (8003a68 <I2C_MasterRequestWrite+0xa4>)
 8003a46:	4620      	mov	r0, r4
 8003a48:	f7ff ff69 	bl	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a4c:	b938      	cbnz	r0, 8003a5e <I2C_MasterRequestWrite+0x9a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	b2ff      	uxtb	r7, r7
 8003a52:	611f      	str	r7, [r3, #16]
 8003a54:	e7e3      	b.n	8003a1e <I2C_MasterRequestWrite+0x5a>
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	b003      	add	sp, #12
 8003a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e7fa      	b.n	8003a58 <I2C_MasterRequestWrite+0x94>
 8003a62:	bf00      	nop
 8003a64:	00010002 	.word	0x00010002
 8003a68:	00010008 	.word	0x00010008

08003a6c <I2C_MasterRequestRead>:
{
 8003a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	4604      	mov	r4, r0
 8003a74:	460d      	mov	r5, r1
 8003a76:	4616      	mov	r6, r2
 8003a78:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a7a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a7c:	6801      	ldr	r1, [r0, #0]
 8003a7e:	680b      	ldr	r3, [r1, #0]
 8003a80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a84:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a86:	2a08      	cmp	r2, #8
 8003a88:	d00d      	beq.n	8003aa6 <I2C_MasterRequestRead+0x3a>
 8003a8a:	2a01      	cmp	r2, #1
 8003a8c:	d00b      	beq.n	8003aa6 <I2C_MasterRequestRead+0x3a>
 8003a8e:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003a92:	d008      	beq.n	8003aa6 <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003a94:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003a96:	2b11      	cmp	r3, #17
 8003a98:	d10a      	bne.n	8003ab0 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a9a:	6802      	ldr	r2, [r0, #0]
 8003a9c:	6813      	ldr	r3, [r2, #0]
 8003a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	e004      	b.n	8003ab0 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aa6:	6822      	ldr	r2, [r4, #0]
 8003aa8:	6813      	ldr	r3, [r2, #0]
 8003aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aae:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab0:	9700      	str	r7, [sp, #0]
 8003ab2:	4633      	mov	r3, r6
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aba:	4620      	mov	r0, r4
 8003abc:	f7ff fef7 	bl	80038ae <I2C_WaitOnFlagUntilTimeout>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	d149      	bne.n	8003b58 <I2C_MasterRequestRead+0xec>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ac4:	6923      	ldr	r3, [r4, #16]
 8003ac6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aca:	d10f      	bne.n	8003aec <I2C_MasterRequestRead+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	f045 0501 	orr.w	r5, r5, #1
 8003ad2:	b2ed      	uxtb	r5, r5
 8003ad4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ad6:	463b      	mov	r3, r7
 8003ad8:	4632      	mov	r2, r6
 8003ada:	4923      	ldr	r1, [pc, #140]	; (8003b68 <I2C_MasterRequestRead+0xfc>)
 8003adc:	4620      	mov	r0, r4
 8003ade:	f7ff ff1e 	bl	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	d038      	beq.n	8003b5a <I2C_MasterRequestRead+0xee>
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e036      	b.n	8003b5a <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003aec:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8003af0:	f008 0806 	and.w	r8, r8, #6
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8003afa:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003afc:	463b      	mov	r3, r7
 8003afe:	4632      	mov	r2, r6
 8003b00:	491a      	ldr	r1, [pc, #104]	; (8003b6c <I2C_MasterRequestRead+0x100>)
 8003b02:	4620      	mov	r0, r4
 8003b04:	f7ff ff0b 	bl	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b08:	b108      	cbz	r0, 8003b0e <I2C_MasterRequestRead+0xa2>
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e025      	b.n	8003b5a <I2C_MasterRequestRead+0xee>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	b2ed      	uxtb	r5, r5
 8003b12:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b14:	463b      	mov	r3, r7
 8003b16:	4632      	mov	r2, r6
 8003b18:	4913      	ldr	r1, [pc, #76]	; (8003b68 <I2C_MasterRequestRead+0xfc>)
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	f7ff feff 	bl	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b20:	b108      	cbz	r0, 8003b26 <I2C_MasterRequestRead+0xba>
      return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e019      	b.n	8003b5a <I2C_MasterRequestRead+0xee>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b26:	2200      	movs	r2, #0
 8003b28:	9203      	str	r2, [sp, #12]
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	6959      	ldr	r1, [r3, #20]
 8003b2e:	9103      	str	r1, [sp, #12]
 8003b30:	6999      	ldr	r1, [r3, #24]
 8003b32:	9103      	str	r1, [sp, #12]
 8003b34:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b36:	6819      	ldr	r1, [r3, #0]
 8003b38:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003b3c:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b3e:	9700      	str	r7, [sp, #0]
 8003b40:	4633      	mov	r3, r6
 8003b42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b46:	4620      	mov	r0, r4
 8003b48:	f7ff feb1 	bl	80038ae <I2C_WaitOnFlagUntilTimeout>
 8003b4c:	b948      	cbnz	r0, 8003b62 <I2C_MasterRequestRead+0xf6>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003b4e:	6822      	ldr	r2, [r4, #0]
 8003b50:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8003b54:	6113      	str	r3, [r2, #16]
 8003b56:	e7be      	b.n	8003ad6 <I2C_MasterRequestRead+0x6a>
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	b004      	add	sp, #16
 8003b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e7f9      	b.n	8003b5a <I2C_MasterRequestRead+0xee>
 8003b66:	bf00      	nop
 8003b68:	00010002 	.word	0x00010002
 8003b6c:	00010008 	.word	0x00010008

08003b70 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003b70:	b570      	push	{r4, r5, r6, lr}
 8003b72:	4604      	mov	r4, r0
 8003b74:	460d      	mov	r5, r1
 8003b76:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003b80:	d11c      	bne.n	8003bbc <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b82:	4620      	mov	r0, r4
 8003b84:	f7ff fe7a 	bl	800387c <I2C_IsAcknowledgeFailed>
 8003b88:	b9d0      	cbnz	r0, 8003bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003b8a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003b8e:	d0f3      	beq.n	8003b78 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b90:	f7ff fa0a 	bl	8002fa8 <HAL_GetTick>
 8003b94:	1b80      	subs	r0, r0, r6
 8003b96:	42a8      	cmp	r0, r5
 8003b98:	d801      	bhi.n	8003b9e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003b9a:	2d00      	cmp	r5, #0
 8003b9c:	d1ec      	bne.n	8003b78 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003bae:	f042 0220 	orr.w	r2, r2, #32
 8003bb2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003bb4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003bb8:	2001      	movs	r0, #1
 8003bba:	e000      	b.n	8003bbe <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8003bbc:	2000      	movs	r0, #0
}
 8003bbe:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	e7fc      	b.n	8003bbe <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08003bc4 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003bc4:	b570      	push	{r4, r5, r6, lr}
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	460d      	mov	r5, r1
 8003bca:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bcc:	6823      	ldr	r3, [r4, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	f013 0f04 	tst.w	r3, #4
 8003bd4:	d11c      	bne.n	8003c10 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f7ff fe50 	bl	800387c <I2C_IsAcknowledgeFailed>
 8003bdc:	b9d0      	cbnz	r0, 8003c14 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003bde:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003be2:	d0f3      	beq.n	8003bcc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003be4:	f7ff f9e0 	bl	8002fa8 <HAL_GetTick>
 8003be8:	1b80      	subs	r0, r0, r6
 8003bea:	42a8      	cmp	r0, r5
 8003bec:	d801      	bhi.n	8003bf2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003bee:	2d00      	cmp	r5, #0
 8003bf0:	d1ec      	bne.n	8003bcc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c00:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003c02:	f042 0220 	orr.w	r2, r2, #32
 8003c06:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003c08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	e000      	b.n	8003c12 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8003c10:	2000      	movs	r0, #0
}
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003c14:	2001      	movs	r0, #1
 8003c16:	e7fc      	b.n	8003c12 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08003c18 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003c18:	b570      	push	{r4, r5, r6, lr}
 8003c1a:	4605      	mov	r5, r0
 8003c1c:	460c      	mov	r4, r1
 8003c1e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c20:	682b      	ldr	r3, [r5, #0]
 8003c22:	695a      	ldr	r2, [r3, #20]
 8003c24:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003c28:	d129      	bne.n	8003c7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c2a:	695a      	ldr	r2, [r3, #20]
 8003c2c:	f012 0f10 	tst.w	r2, #16
 8003c30:	d115      	bne.n	8003c5e <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c32:	f7ff f9b9 	bl	8002fa8 <HAL_GetTick>
 8003c36:	1b80      	subs	r0, r0, r6
 8003c38:	42a0      	cmp	r0, r4
 8003c3a:	d801      	bhi.n	8003c40 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8003c3c:	2c00      	cmp	r4, #0
 8003c3e:	d1ef      	bne.n	8003c20 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c40:	2300      	movs	r3, #0
 8003c42:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c44:	2220      	movs	r2, #32
 8003c46:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c4a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c4e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003c50:	f042 0220 	orr.w	r2, r2, #32
 8003c54:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003c56:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003c5a:	2001      	movs	r0, #1
}
 8003c5c:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c5e:	f06f 0210 	mvn.w	r2, #16
 8003c62:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c64:	2300      	movs	r3, #0
 8003c66:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c6e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c72:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003c74:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003c76:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003c7a:	2001      	movs	r0, #1
 8003c7c:	e7ee      	b.n	8003c5c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8003c7e:	2000      	movs	r0, #0
 8003c80:	e7ec      	b.n	8003c5c <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08003c84 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003c84:	2800      	cmp	r0, #0
 8003c86:	f000 80be 	beq.w	8003e06 <HAL_I2C_Init+0x182>
{
 8003c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c8e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d06b      	beq.n	8003d6e <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c96:	2324      	movs	r3, #36	; 0x24
 8003c98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003c9c:	6822      	ldr	r2, [r4, #0]
 8003c9e:	6813      	ldr	r3, [r2, #0]
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ca6:	f000 fe8b 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003caa:	6862      	ldr	r2, [r4, #4]
 8003cac:	4b58      	ldr	r3, [pc, #352]	; (8003e10 <HAL_I2C_Init+0x18c>)
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d862      	bhi.n	8003d78 <HAL_I2C_Init+0xf4>
 8003cb2:	4b58      	ldr	r3, [pc, #352]	; (8003e14 <HAL_I2C_Init+0x190>)
 8003cb4:	4298      	cmp	r0, r3
 8003cb6:	bf8c      	ite	hi
 8003cb8:	2300      	movhi	r3, #0
 8003cba:	2301      	movls	r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f040 80a4 	bne.w	8003e0a <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 8003cc2:	4b55      	ldr	r3, [pc, #340]	; (8003e18 <HAL_I2C_Init+0x194>)
 8003cc4:	fba3 2300 	umull	r2, r3, r3, r0
 8003cc8:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cca:	6821      	ldr	r1, [r4, #0]
 8003ccc:	684a      	ldr	r2, [r1, #4]
 8003cce:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cd6:	6825      	ldr	r5, [r4, #0]
 8003cd8:	6a2a      	ldr	r2, [r5, #32]
 8003cda:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003cde:	6866      	ldr	r6, [r4, #4]
 8003ce0:	494b      	ldr	r1, [pc, #300]	; (8003e10 <HAL_I2C_Init+0x18c>)
 8003ce2:	428e      	cmp	r6, r1
 8003ce4:	d84e      	bhi.n	8003d84 <HAL_I2C_Init+0x100>
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cec:	6825      	ldr	r5, [r4, #0]
 8003cee:	69e9      	ldr	r1, [r5, #28]
 8003cf0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003cf4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003cf8:	6863      	ldr	r3, [r4, #4]
 8003cfa:	4a45      	ldr	r2, [pc, #276]	; (8003e10 <HAL_I2C_Init+0x18c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d84b      	bhi.n	8003d98 <HAL_I2C_Init+0x114>
 8003d00:	3801      	subs	r0, #1
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d08:	3301      	adds	r3, #1
 8003d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	bf38      	it	cc
 8003d12:	2304      	movcc	r3, #4
 8003d14:	430b      	orrs	r3, r1
 8003d16:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d18:	6821      	ldr	r1, [r4, #0]
 8003d1a:	680b      	ldr	r3, [r1, #0]
 8003d1c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d20:	69e2      	ldr	r2, [r4, #28]
 8003d22:	6a20      	ldr	r0, [r4, #32]
 8003d24:	4302      	orrs	r2, r0
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d2a:	6821      	ldr	r1, [r4, #0]
 8003d2c:	688b      	ldr	r3, [r1, #8]
 8003d2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d36:	6922      	ldr	r2, [r4, #16]
 8003d38:	68e0      	ldr	r0, [r4, #12]
 8003d3a:	4302      	orrs	r2, r0
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d40:	6821      	ldr	r1, [r4, #0]
 8003d42:	68cb      	ldr	r3, [r1, #12]
 8003d44:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d48:	6962      	ldr	r2, [r4, #20]
 8003d4a:	69a0      	ldr	r0, [r4, #24]
 8003d4c:	4302      	orrs	r2, r0
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003d52:	6822      	ldr	r2, [r4, #0]
 8003d54:	6813      	ldr	r3, [r2, #0]
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d60:	2320      	movs	r3, #32
 8003d62:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d66:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d68:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8003d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003d6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003d72:	f004 f821 	bl	8007db8 <HAL_I2C_MspInit>
 8003d76:	e78e      	b.n	8003c96 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d78:	4b28      	ldr	r3, [pc, #160]	; (8003e1c <HAL_I2C_Init+0x198>)
 8003d7a:	4298      	cmp	r0, r3
 8003d7c:	bf8c      	ite	hi
 8003d7e:	2300      	movhi	r3, #0
 8003d80:	2301      	movls	r3, #1
 8003d82:	e79b      	b.n	8003cbc <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d84:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	4924      	ldr	r1, [pc, #144]	; (8003e20 <HAL_I2C_Init+0x19c>)
 8003d8e:	fba1 1303 	umull	r1, r3, r1, r3
 8003d92:	099b      	lsrs	r3, r3, #6
 8003d94:	3301      	adds	r3, #1
 8003d96:	e7a7      	b.n	8003ce8 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d98:	68a2      	ldr	r2, [r4, #8]
 8003d9a:	b9ba      	cbnz	r2, 8003dcc <HAL_I2C_Init+0x148>
 8003d9c:	1e46      	subs	r6, r0, #1
 8003d9e:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8003da2:	fbb6 f6f7 	udiv	r6, r6, r7
 8003da6:	3601      	adds	r6, #1
 8003da8:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003dac:	fab6 f686 	clz	r6, r6
 8003db0:	0976      	lsrs	r6, r6, #5
 8003db2:	bb36      	cbnz	r6, 8003e02 <HAL_I2C_Init+0x17e>
 8003db4:	b9c2      	cbnz	r2, 8003de8 <HAL_I2C_Init+0x164>
 8003db6:	3801      	subs	r0, #1
 8003db8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003dbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8003dc6:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8003dca:	e7a3      	b.n	8003d14 <HAL_I2C_Init+0x90>
 8003dcc:	1e46      	subs	r6, r0, #1
 8003dce:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8003dd2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8003dd6:	fbb6 f6f7 	udiv	r6, r6, r7
 8003dda:	3601      	adds	r6, #1
 8003ddc:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003de0:	fab6 f686 	clz	r6, r6
 8003de4:	0976      	lsrs	r6, r6, #5
 8003de6:	e7e4      	b.n	8003db2 <HAL_I2C_Init+0x12e>
 8003de8:	3801      	subs	r0, #1
 8003dea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003dee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003df2:	fbb0 f2f3 	udiv	r2, r0, r3
 8003df6:	3201      	adds	r2, #1
 8003df8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003dfc:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8003e00:	e788      	b.n	8003d14 <HAL_I2C_Init+0x90>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e786      	b.n	8003d14 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8003e06:	2001      	movs	r0, #1
}
 8003e08:	4770      	bx	lr
    return HAL_ERROR;
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	e7ae      	b.n	8003d6c <HAL_I2C_Init+0xe8>
 8003e0e:	bf00      	nop
 8003e10:	000186a0 	.word	0x000186a0
 8003e14:	001e847f 	.word	0x001e847f
 8003e18:	431bde83 	.word	0x431bde83
 8003e1c:	003d08ff 	.word	0x003d08ff
 8003e20:	10624dd3 	.word	0x10624dd3

08003e24 <HAL_I2C_Master_Transmit>:
{
 8003e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	460e      	mov	r6, r1
 8003e2e:	4690      	mov	r8, r2
 8003e30:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8003e32:	f7ff f8b9 	bl	8002fa8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e36:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d004      	beq.n	8003e4a <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8003e40:	2602      	movs	r6, #2
}
 8003e42:	4630      	mov	r0, r6
 8003e44:	b004      	add	sp, #16
 8003e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e4a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e4c:	9000      	str	r0, [sp, #0]
 8003e4e:	2319      	movs	r3, #25
 8003e50:	2201      	movs	r2, #1
 8003e52:	494f      	ldr	r1, [pc, #316]	; (8003f90 <HAL_I2C_Master_Transmit+0x16c>)
 8003e54:	4620      	mov	r0, r4
 8003e56:	f7ff fd2a 	bl	80038ae <I2C_WaitOnFlagUntilTimeout>
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	f040 8091 	bne.w	8003f82 <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 8003e60:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	f000 808e 	beq.w	8003f86 <HAL_I2C_Master_Transmit+0x162>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	f012 0f01 	tst.w	r2, #1
 8003e78:	d103      	bne.n	8003e82 <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	f042 0201 	orr.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e82:	6822      	ldr	r2, [r4, #0]
 8003e84:	6813      	ldr	r3, [r2, #0]
 8003e86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e8a:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e8c:	2321      	movs	r3, #33	; 0x21
 8003e8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e92:	2310      	movs	r3, #16
 8003e94:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003e9c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ea0:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ea2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ea4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ea6:	4b3b      	ldr	r3, [pc, #236]	; (8003f94 <HAL_I2C_Master_Transmit+0x170>)
 8003ea8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003eaa:	462b      	mov	r3, r5
 8003eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003eae:	4631      	mov	r1, r6
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	f7ff fd87 	bl	80039c4 <I2C_MasterRequestWrite>
 8003eb6:	4606      	mov	r6, r0
 8003eb8:	2800      	cmp	r0, #0
 8003eba:	d166      	bne.n	8003f8a <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	9303      	str	r3, [sp, #12]
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	695a      	ldr	r2, [r3, #20]
 8003ec4:	9203      	str	r2, [sp, #12]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	9303      	str	r3, [sp, #12]
 8003eca:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8003ecc:	e012      	b.n	8003ef4 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ece:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d001      	beq.n	8003ed8 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 8003ed4:	2601      	movs	r6, #1
 8003ed6:	e7b4      	b.n	8003e42 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed8:	6822      	ldr	r2, [r4, #0]
 8003eda:	6813      	ldr	r3, [r2, #0]
 8003edc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ee0:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003ee2:	2601      	movs	r6, #1
 8003ee4:	e7ad      	b.n	8003e42 <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee6:	462a      	mov	r2, r5
 8003ee8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003eea:	4620      	mov	r0, r4
 8003eec:	f7ff fe6a 	bl	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	d12c      	bne.n	8003f4e <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 8003ef4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d035      	beq.n	8003f66 <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003efa:	462a      	mov	r2, r5
 8003efc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003efe:	4620      	mov	r0, r4
 8003f00:	f7ff fe36 	bl	8003b70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f04:	2800      	cmp	r0, #0
 8003f06:	d1e2      	bne.n	8003ece <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f08:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	7812      	ldrb	r2, [r2, #0]
 8003f0e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003f10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003f12:	1c4b      	adds	r3, r1, #1
 8003f14:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003f16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003f1e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f26:	6822      	ldr	r2, [r4, #0]
 8003f28:	6950      	ldr	r0, [r2, #20]
 8003f2a:	f010 0f04 	tst.w	r0, #4
 8003f2e:	d0da      	beq.n	8003ee6 <HAL_I2C_Master_Transmit+0xc2>
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0d8      	beq.n	8003ee6 <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f34:	784b      	ldrb	r3, [r1, #1]
 8003f36:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8003f38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003f3e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003f46:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	8523      	strh	r3, [r4, #40]	; 0x28
 8003f4c:	e7cb      	b.n	8003ee6 <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d001      	beq.n	8003f58 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 8003f54:	2601      	movs	r6, #1
 8003f56:	e774      	b.n	8003e42 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f58:	6822      	ldr	r2, [r4, #0]
 8003f5a:	6813      	ldr	r3, [r2, #0]
 8003f5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f60:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003f62:	2601      	movs	r6, #1
 8003f64:	e76d      	b.n	8003e42 <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f66:	6822      	ldr	r2, [r4, #0]
 8003f68:	6813      	ldr	r3, [r2, #0]
 8003f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f6e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f70:	2320      	movs	r3, #32
 8003f72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003f7c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003f80:	e75f      	b.n	8003e42 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 8003f82:	2602      	movs	r6, #2
 8003f84:	e75d      	b.n	8003e42 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8003f86:	2602      	movs	r6, #2
 8003f88:	e75b      	b.n	8003e42 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8003f8a:	2601      	movs	r6, #1
 8003f8c:	e759      	b.n	8003e42 <HAL_I2C_Master_Transmit+0x1e>
 8003f8e:	bf00      	nop
 8003f90:	00100002 	.word	0x00100002
 8003f94:	ffff0000 	.word	0xffff0000

08003f98 <HAL_I2C_Master_Receive>:
{
 8003f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f9c:	b086      	sub	sp, #24
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	460e      	mov	r6, r1
 8003fa2:	4690      	mov	r8, r2
 8003fa4:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8003fa6:	f7fe ffff 	bl	8002fa8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003faa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d004      	beq.n	8003fbe <HAL_I2C_Master_Receive+0x26>
    return HAL_BUSY;
 8003fb4:	2602      	movs	r6, #2
}
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	b006      	add	sp, #24
 8003fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fbe:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fc0:	9000      	str	r0, [sp, #0]
 8003fc2:	2319      	movs	r3, #25
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	499e      	ldr	r1, [pc, #632]	; (8004240 <HAL_I2C_Master_Receive+0x2a8>)
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f7ff fc70 	bl	80038ae <I2C_WaitOnFlagUntilTimeout>
 8003fce:	2800      	cmp	r0, #0
 8003fd0:	f040 8134 	bne.w	800423c <HAL_I2C_Master_Receive+0x2a4>
    __HAL_LOCK(hi2c);
 8003fd4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	f000 8137 	beq.w	800424c <HAL_I2C_Master_Receive+0x2b4>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	f012 0f01 	tst.w	r2, #1
 8003fec:	d103      	bne.n	8003ff6 <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	f042 0201 	orr.w	r2, r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ff6:	6822      	ldr	r2, [r4, #0]
 8003ff8:	6813      	ldr	r3, [r2, #0]
 8003ffa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ffe:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004000:	2322      	movs	r3, #34	; 0x22
 8004002:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004006:	2310      	movs	r3, #16
 8004008:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800400c:	2300      	movs	r3, #0
 800400e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8004010:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004014:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004016:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004018:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800401a:	4b8a      	ldr	r3, [pc, #552]	; (8004244 <HAL_I2C_Master_Receive+0x2ac>)
 800401c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800401e:	462b      	mov	r3, r5
 8004020:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004022:	4631      	mov	r1, r6
 8004024:	4620      	mov	r0, r4
 8004026:	f7ff fd21 	bl	8003a6c <I2C_MasterRequestRead>
 800402a:	4606      	mov	r6, r0
 800402c:	2800      	cmp	r0, #0
 800402e:	f040 810f 	bne.w	8004250 <HAL_I2C_Master_Receive+0x2b8>
    if (hi2c->XferSize == 0U)
 8004032:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004034:	b95b      	cbnz	r3, 800404e <HAL_I2C_Master_Receive+0xb6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004036:	9302      	str	r3, [sp, #8]
 8004038:	6823      	ldr	r3, [r4, #0]
 800403a:	695a      	ldr	r2, [r3, #20]
 800403c:	9202      	str	r2, [sp, #8]
 800403e:	699a      	ldr	r2, [r3, #24]
 8004040:	9202      	str	r2, [sp, #8]
 8004042:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	e077      	b.n	800413e <HAL_I2C_Master_Receive+0x1a6>
    else if (hi2c->XferSize == 1U)
 800404e:	2b01      	cmp	r3, #1
 8004050:	d00f      	beq.n	8004072 <HAL_I2C_Master_Receive+0xda>
    else if (hi2c->XferSize == 2U)
 8004052:	2b02      	cmp	r3, #2
 8004054:	d01f      	beq.n	8004096 <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004056:	6822      	ldr	r2, [r4, #0]
 8004058:	6813      	ldr	r3, [r2, #0]
 800405a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800405e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004060:	2300      	movs	r3, #0
 8004062:	9305      	str	r3, [sp, #20]
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	695a      	ldr	r2, [r3, #20]
 8004068:	9205      	str	r2, [sp, #20]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	9305      	str	r3, [sp, #20]
 800406e:	9b05      	ldr	r3, [sp, #20]
 8004070:	e065      	b.n	800413e <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004072:	6822      	ldr	r2, [r4, #0]
 8004074:	6813      	ldr	r3, [r2, #0]
 8004076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800407a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407c:	2300      	movs	r3, #0
 800407e:	9303      	str	r3, [sp, #12]
 8004080:	6823      	ldr	r3, [r4, #0]
 8004082:	695a      	ldr	r2, [r3, #20]
 8004084:	9203      	str	r2, [sp, #12]
 8004086:	699a      	ldr	r2, [r3, #24]
 8004088:	9203      	str	r2, [sp, #12]
 800408a:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	e053      	b.n	800413e <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004096:	6822      	ldr	r2, [r4, #0]
 8004098:	6813      	ldr	r3, [r2, #0]
 800409a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800409e:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040a0:	6822      	ldr	r2, [r4, #0]
 80040a2:	6813      	ldr	r3, [r2, #0]
 80040a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040a8:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040aa:	2300      	movs	r3, #0
 80040ac:	9304      	str	r3, [sp, #16]
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	695a      	ldr	r2, [r3, #20]
 80040b2:	9204      	str	r2, [sp, #16]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	9304      	str	r3, [sp, #16]
 80040b8:	9b04      	ldr	r3, [sp, #16]
 80040ba:	e040      	b.n	800413e <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040bc:	462a      	mov	r2, r5
 80040be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80040c0:	4620      	mov	r0, r4
 80040c2:	f7ff fda9 	bl	8003c18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040c6:	2800      	cmp	r0, #0
 80040c8:	f040 80c4 	bne.w	8004254 <HAL_I2C_Master_Receive+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040d2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80040d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040d6:	3301      	adds	r3, #1
 80040d8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80040da:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80040dc:	3b01      	subs	r3, #1
 80040de:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80040e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	8563      	strh	r3, [r4, #42]	; 0x2a
 80040e8:	e029      	b.n	800413e <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040ea:	9500      	str	r5, [sp, #0]
 80040ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040ee:	2200      	movs	r2, #0
 80040f0:	4955      	ldr	r1, [pc, #340]	; (8004248 <HAL_I2C_Master_Receive+0x2b0>)
 80040f2:	4620      	mov	r0, r4
 80040f4:	f7ff fbdb 	bl	80038ae <I2C_WaitOnFlagUntilTimeout>
 80040f8:	2800      	cmp	r0, #0
 80040fa:	f040 80ad 	bne.w	8004258 <HAL_I2C_Master_Receive+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fe:	6822      	ldr	r2, [r4, #0]
 8004100:	6813      	ldr	r3, [r2, #0]
 8004102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004106:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800410e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004110:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004112:	1c53      	adds	r3, r2, #1
 8004114:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004116:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004118:	3b01      	subs	r3, #1
 800411a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800411c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800411e:	3b01      	subs	r3, #1
 8004120:	b29b      	uxth	r3, r3
 8004122:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800412a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800412c:	3301      	adds	r3, #1
 800412e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004130:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004132:	3b01      	subs	r3, #1
 8004134:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004136:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004138:	3b01      	subs	r3, #1
 800413a:	b29b      	uxth	r3, r3
 800413c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800413e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004140:	2b00      	cmp	r3, #0
 8004142:	d072      	beq.n	800422a <HAL_I2C_Master_Receive+0x292>
      if (hi2c->XferSize <= 3U)
 8004144:	2b03      	cmp	r3, #3
 8004146:	d849      	bhi.n	80041dc <HAL_I2C_Master_Receive+0x244>
        if (hi2c->XferSize == 1U)
 8004148:	2b01      	cmp	r3, #1
 800414a:	d0b7      	beq.n	80040bc <HAL_I2C_Master_Receive+0x124>
        else if (hi2c->XferSize == 2U)
 800414c:	2b02      	cmp	r3, #2
 800414e:	d0cc      	beq.n	80040ea <HAL_I2C_Master_Receive+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004150:	9500      	str	r5, [sp, #0]
 8004152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004154:	2200      	movs	r2, #0
 8004156:	493c      	ldr	r1, [pc, #240]	; (8004248 <HAL_I2C_Master_Receive+0x2b0>)
 8004158:	4620      	mov	r0, r4
 800415a:	f7ff fba8 	bl	80038ae <I2C_WaitOnFlagUntilTimeout>
 800415e:	2800      	cmp	r0, #0
 8004160:	d17c      	bne.n	800425c <HAL_I2C_Master_Receive+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004162:	6822      	ldr	r2, [r4, #0]
 8004164:	6813      	ldr	r3, [r2, #0]
 8004166:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800416a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004172:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004174:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004176:	3301      	adds	r3, #1
 8004178:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800417a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800417c:	3b01      	subs	r3, #1
 800417e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004180:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004182:	3b01      	subs	r3, #1
 8004184:	b29b      	uxth	r3, r3
 8004186:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004188:	9500      	str	r5, [sp, #0]
 800418a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800418c:	2200      	movs	r2, #0
 800418e:	492e      	ldr	r1, [pc, #184]	; (8004248 <HAL_I2C_Master_Receive+0x2b0>)
 8004190:	4620      	mov	r0, r4
 8004192:	f7ff fb8c 	bl	80038ae <I2C_WaitOnFlagUntilTimeout>
 8004196:	2800      	cmp	r0, #0
 8004198:	d162      	bne.n	8004260 <HAL_I2C_Master_Receive+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419a:	6822      	ldr	r2, [r4, #0]
 800419c:	6813      	ldr	r3, [r2, #0]
 800419e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041a2:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041aa:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80041ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80041ae:	1c53      	adds	r3, r2, #1
 80041b0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80041b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80041b4:	3b01      	subs	r3, #1
 80041b6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80041b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29b      	uxth	r3, r3
 80041be:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80041c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041c8:	3301      	adds	r3, #1
 80041ca:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80041cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80041ce:	3b01      	subs	r3, #1
 80041d0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80041d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80041da:	e7b0      	b.n	800413e <HAL_I2C_Master_Receive+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041dc:	462a      	mov	r2, r5
 80041de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80041e0:	4620      	mov	r0, r4
 80041e2:	f7ff fd19 	bl	8003c18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041e6:	2800      	cmp	r0, #0
 80041e8:	d13c      	bne.n	8004264 <HAL_I2C_Master_Receive+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041f0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80041f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80041f4:	1c53      	adds	r3, r2, #1
 80041f6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80041f8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80041fa:	3b01      	subs	r3, #1
 80041fc:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80041fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004200:	3b01      	subs	r3, #1
 8004202:	b29b      	uxth	r3, r3
 8004204:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004206:	6823      	ldr	r3, [r4, #0]
 8004208:	6959      	ldr	r1, [r3, #20]
 800420a:	f011 0f04 	tst.w	r1, #4
 800420e:	d096      	beq.n	800413e <HAL_I2C_Master_Receive+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8004214:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004216:	3301      	adds	r3, #1
 8004218:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800421a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800421c:	3b01      	subs	r3, #1
 800421e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004220:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004222:	3b01      	subs	r3, #1
 8004224:	b29b      	uxth	r3, r3
 8004226:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004228:	e789      	b.n	800413e <HAL_I2C_Master_Receive+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800422a:	2320      	movs	r3, #32
 800422c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004230:	2300      	movs	r3, #0
 8004232:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004236:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800423a:	e6bc      	b.n	8003fb6 <HAL_I2C_Master_Receive+0x1e>
      return HAL_BUSY;
 800423c:	2602      	movs	r6, #2
 800423e:	e6ba      	b.n	8003fb6 <HAL_I2C_Master_Receive+0x1e>
 8004240:	00100002 	.word	0x00100002
 8004244:	ffff0000 	.word	0xffff0000
 8004248:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 800424c:	2602      	movs	r6, #2
 800424e:	e6b2      	b.n	8003fb6 <HAL_I2C_Master_Receive+0x1e>
      return HAL_ERROR;
 8004250:	2601      	movs	r6, #1
 8004252:	e6b0      	b.n	8003fb6 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8004254:	2601      	movs	r6, #1
 8004256:	e6ae      	b.n	8003fb6 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8004258:	2601      	movs	r6, #1
 800425a:	e6ac      	b.n	8003fb6 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 800425c:	2601      	movs	r6, #1
 800425e:	e6aa      	b.n	8003fb6 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8004260:	2601      	movs	r6, #1
 8004262:	e6a8      	b.n	8003fb6 <HAL_I2C_Master_Receive+0x1e>
          return HAL_ERROR;
 8004264:	2601      	movs	r6, #1
 8004266:	e6a6      	b.n	8003fb6 <HAL_I2C_Master_Receive+0x1e>

08004268 <HAL_I2C_IsDeviceReady>:
{
 8004268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800426c:	b085      	sub	sp, #20
 800426e:	4604      	mov	r4, r0
 8004270:	4688      	mov	r8, r1
 8004272:	4691      	mov	r9, r2
 8004274:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8004276:	f7fe fe97 	bl	8002fa8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800427a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b20      	cmp	r3, #32
 8004282:	d004      	beq.n	800428e <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 8004284:	2302      	movs	r3, #2
}
 8004286:	4618      	mov	r0, r3
 8004288:	b005      	add	sp, #20
 800428a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800428e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004290:	9000      	str	r0, [sp, #0]
 8004292:	2319      	movs	r3, #25
 8004294:	2201      	movs	r2, #1
 8004296:	4954      	ldr	r1, [pc, #336]	; (80043e8 <HAL_I2C_IsDeviceReady+0x180>)
 8004298:	4620      	mov	r0, r4
 800429a:	f7ff fb08 	bl	80038ae <I2C_WaitOnFlagUntilTimeout>
 800429e:	2800      	cmp	r0, #0
 80042a0:	f040 8097 	bne.w	80043d2 <HAL_I2C_IsDeviceReady+0x16a>
    __HAL_LOCK(hi2c);
 80042a4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	f000 8094 	beq.w	80043d6 <HAL_I2C_IsDeviceReady+0x16e>
 80042ae:	2301      	movs	r3, #1
 80042b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	f012 0f01 	tst.w	r2, #1
 80042bc:	d103      	bne.n	80042c6 <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	f042 0201 	orr.w	r2, r2, #1
 80042c4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c6:	6822      	ldr	r2, [r4, #0]
 80042c8:	6813      	ldr	r3, [r2, #0]
 80042ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ce:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80042d0:	2324      	movs	r3, #36	; 0x24
 80042d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d6:	2300      	movs	r3, #0
 80042d8:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042da:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80042de:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 80042e0:	2701      	movs	r7, #1
 80042e2:	e034      	b.n	800434e <HAL_I2C_IsDeviceReady+0xe6>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80042e4:	23a0      	movs	r3, #160	; 0xa0
 80042e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	695a      	ldr	r2, [r3, #20]
 80042ee:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042f2:	6959      	ldr	r1, [r3, #20]
 80042f4:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80042f8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2ba0      	cmp	r3, #160	; 0xa0
 8004300:	d009      	beq.n	8004316 <HAL_I2C_IsDeviceReady+0xae>
 8004302:	b942      	cbnz	r2, 8004316 <HAL_I2C_IsDeviceReady+0xae>
 8004304:	b939      	cbnz	r1, 8004316 <HAL_I2C_IsDeviceReady+0xae>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004306:	f7fe fe4f 	bl	8002fa8 <HAL_GetTick>
 800430a:	1b80      	subs	r0, r0, r6
 800430c:	42a8      	cmp	r0, r5
 800430e:	d8e9      	bhi.n	80042e4 <HAL_I2C_IsDeviceReady+0x7c>
 8004310:	2d00      	cmp	r5, #0
 8004312:	d1ea      	bne.n	80042ea <HAL_I2C_IsDeviceReady+0x82>
 8004314:	e7e6      	b.n	80042e4 <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->State = HAL_I2C_STATE_READY;
 8004316:	2320      	movs	r3, #32
 8004318:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	695a      	ldr	r2, [r3, #20]
 8004320:	f012 0f02 	tst.w	r2, #2
 8004324:	d131      	bne.n	800438a <HAL_I2C_IsDeviceReady+0x122>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800432c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004334:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004336:	9600      	str	r6, [sp, #0]
 8004338:	2319      	movs	r3, #25
 800433a:	2201      	movs	r2, #1
 800433c:	492a      	ldr	r1, [pc, #168]	; (80043e8 <HAL_I2C_IsDeviceReady+0x180>)
 800433e:	4620      	mov	r0, r4
 8004340:	f7ff fab5 	bl	80038ae <I2C_WaitOnFlagUntilTimeout>
 8004344:	2800      	cmp	r0, #0
 8004346:	d14c      	bne.n	80043e2 <HAL_I2C_IsDeviceReady+0x17a>
      I2C_Trials++;
 8004348:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 800434a:	454f      	cmp	r7, r9
 800434c:	d239      	bcs.n	80043c2 <HAL_I2C_IsDeviceReady+0x15a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800434e:	6822      	ldr	r2, [r4, #0]
 8004350:	6813      	ldr	r3, [r2, #0]
 8004352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004356:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004358:	9600      	str	r6, [sp, #0]
 800435a:	462b      	mov	r3, r5
 800435c:	2200      	movs	r2, #0
 800435e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004362:	4620      	mov	r0, r4
 8004364:	f7ff faa3 	bl	80038ae <I2C_WaitOnFlagUntilTimeout>
 8004368:	2800      	cmp	r0, #0
 800436a:	d136      	bne.n	80043da <HAL_I2C_IsDeviceReady+0x172>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800436c:	6823      	ldr	r3, [r4, #0]
 800436e:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8004372:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8004374:	f7fe fe18 	bl	8002fa8 <HAL_GetTick>
 8004378:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	695a      	ldr	r2, [r3, #20]
 800437e:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004382:	6959      	ldr	r1, [r3, #20]
 8004384:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004388:	e7b6      	b.n	80042f8 <HAL_I2C_IsDeviceReady+0x90>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004390:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004392:	2300      	movs	r3, #0
 8004394:	9303      	str	r3, [sp, #12]
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	695a      	ldr	r2, [r3, #20]
 800439a:	9203      	str	r2, [sp, #12]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	9303      	str	r3, [sp, #12]
 80043a0:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043a2:	9600      	str	r6, [sp, #0]
 80043a4:	2319      	movs	r3, #25
 80043a6:	2201      	movs	r2, #1
 80043a8:	490f      	ldr	r1, [pc, #60]	; (80043e8 <HAL_I2C_IsDeviceReady+0x180>)
 80043aa:	4620      	mov	r0, r4
 80043ac:	f7ff fa7f 	bl	80038ae <I2C_WaitOnFlagUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	b9a0      	cbnz	r0, 80043de <HAL_I2C_IsDeviceReady+0x176>
        hi2c->State = HAL_I2C_STATE_READY;
 80043b4:	2220      	movs	r2, #32
 80043b6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80043ba:	2200      	movs	r2, #0
 80043bc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 80043c0:	e761      	b.n	8004286 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 80043c2:	2320      	movs	r3, #32
 80043c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80043c8:	2300      	movs	r3, #0
 80043ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e759      	b.n	8004286 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 80043d2:	2302      	movs	r3, #2
 80043d4:	e757      	b.n	8004286 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 80043d6:	2302      	movs	r3, #2
 80043d8:	e755      	b.n	8004286 <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e753      	b.n	8004286 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e751      	b.n	8004286 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e74f      	b.n	8004286 <HAL_I2C_IsDeviceReady+0x1e>
 80043e6:	bf00      	nop
 80043e8:	00100002 	.word	0x00100002

080043ec <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043ec:	2800      	cmp	r0, #0
 80043ee:	f000 81bb 	beq.w	8004768 <HAL_RCC_OscConfig+0x37c>
{
 80043f2:	b570      	push	{r4, r5, r6, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043f8:	6803      	ldr	r3, [r0, #0]
 80043fa:	f013 0f01 	tst.w	r3, #1
 80043fe:	d03b      	beq.n	8004478 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004400:	4ba7      	ldr	r3, [pc, #668]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 030c 	and.w	r3, r3, #12
 8004408:	2b04      	cmp	r3, #4
 800440a:	d02c      	beq.n	8004466 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800440c:	4ba4      	ldr	r3, [pc, #656]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004414:	2b08      	cmp	r3, #8
 8004416:	d021      	beq.n	800445c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004418:	6863      	ldr	r3, [r4, #4]
 800441a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441e:	d04f      	beq.n	80044c0 <HAL_RCC_OscConfig+0xd4>
 8004420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004424:	d052      	beq.n	80044cc <HAL_RCC_OscConfig+0xe0>
 8004426:	4b9e      	ldr	r3, [pc, #632]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004436:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004438:	6863      	ldr	r3, [r4, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d050      	beq.n	80044e0 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443e:	f7fe fdb3 	bl	8002fa8 <HAL_GetTick>
 8004442:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004444:	4b96      	ldr	r3, [pc, #600]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800444c:	d114      	bne.n	8004478 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800444e:	f7fe fdab 	bl	8002fa8 <HAL_GetTick>
 8004452:	1b40      	subs	r0, r0, r5
 8004454:	2864      	cmp	r0, #100	; 0x64
 8004456:	d9f5      	bls.n	8004444 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8004458:	2003      	movs	r0, #3
 800445a:	e18a      	b.n	8004772 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800445c:	4b90      	ldr	r3, [pc, #576]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004464:	d0d8      	beq.n	8004418 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004466:	4b8e      	ldr	r3, [pc, #568]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800446e:	d003      	beq.n	8004478 <HAL_RCC_OscConfig+0x8c>
 8004470:	6863      	ldr	r3, [r4, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 817a 	beq.w	800476c <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	f013 0f02 	tst.w	r3, #2
 800447e:	d055      	beq.n	800452c <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004480:	4b87      	ldr	r3, [pc, #540]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f013 0f0c 	tst.w	r3, #12
 8004488:	d03e      	beq.n	8004508 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800448a:	4b85      	ldr	r3, [pc, #532]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004492:	2b08      	cmp	r3, #8
 8004494:	d033      	beq.n	80044fe <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004496:	68e3      	ldr	r3, [r4, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d068      	beq.n	800456e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800449c:	4b81      	ldr	r3, [pc, #516]	; (80046a4 <HAL_RCC_OscConfig+0x2b8>)
 800449e:	2201      	movs	r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a2:	f7fe fd81 	bl	8002fa8 <HAL_GetTick>
 80044a6:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a8:	4b7d      	ldr	r3, [pc, #500]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f013 0f02 	tst.w	r3, #2
 80044b0:	d154      	bne.n	800455c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044b2:	f7fe fd79 	bl	8002fa8 <HAL_GetTick>
 80044b6:	1b40      	subs	r0, r0, r5
 80044b8:	2802      	cmp	r0, #2
 80044ba:	d9f5      	bls.n	80044a8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80044bc:	2003      	movs	r0, #3
 80044be:	e158      	b.n	8004772 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c0:	4a77      	ldr	r2, [pc, #476]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 80044c2:	6813      	ldr	r3, [r2, #0]
 80044c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	e7b5      	b.n	8004438 <HAL_RCC_OscConfig+0x4c>
 80044cc:	4b74      	ldr	r3, [pc, #464]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	e7ab      	b.n	8004438 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80044e0:	f7fe fd62 	bl	8002fa8 <HAL_GetTick>
 80044e4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e6:	4b6e      	ldr	r3, [pc, #440]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80044ee:	d0c3      	beq.n	8004478 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044f0:	f7fe fd5a 	bl	8002fa8 <HAL_GetTick>
 80044f4:	1b40      	subs	r0, r0, r5
 80044f6:	2864      	cmp	r0, #100	; 0x64
 80044f8:	d9f5      	bls.n	80044e6 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80044fa:	2003      	movs	r0, #3
 80044fc:	e139      	b.n	8004772 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044fe:	4b68      	ldr	r3, [pc, #416]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004506:	d1c6      	bne.n	8004496 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004508:	4b65      	ldr	r3, [pc, #404]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f013 0f02 	tst.w	r3, #2
 8004510:	d004      	beq.n	800451c <HAL_RCC_OscConfig+0x130>
 8004512:	68e3      	ldr	r3, [r4, #12]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d001      	beq.n	800451c <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8004518:	2001      	movs	r0, #1
 800451a:	e12a      	b.n	8004772 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451c:	4a60      	ldr	r2, [pc, #384]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 800451e:	6813      	ldr	r3, [r2, #0]
 8004520:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004524:	6921      	ldr	r1, [r4, #16]
 8004526:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800452a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	f013 0f08 	tst.w	r3, #8
 8004532:	d040      	beq.n	80045b6 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004534:	6963      	ldr	r3, [r4, #20]
 8004536:	b363      	cbz	r3, 8004592 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004538:	4b5b      	ldr	r3, [pc, #364]	; (80046a8 <HAL_RCC_OscConfig+0x2bc>)
 800453a:	2201      	movs	r2, #1
 800453c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453e:	f7fe fd33 	bl	8002fa8 <HAL_GetTick>
 8004542:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004544:	4b56      	ldr	r3, [pc, #344]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 8004546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004548:	f013 0f02 	tst.w	r3, #2
 800454c:	d133      	bne.n	80045b6 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800454e:	f7fe fd2b 	bl	8002fa8 <HAL_GetTick>
 8004552:	1b40      	subs	r0, r0, r5
 8004554:	2802      	cmp	r0, #2
 8004556:	d9f5      	bls.n	8004544 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8004558:	2003      	movs	r0, #3
 800455a:	e10a      	b.n	8004772 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455c:	4a50      	ldr	r2, [pc, #320]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 800455e:	6813      	ldr	r3, [r2, #0]
 8004560:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004564:	6921      	ldr	r1, [r4, #16]
 8004566:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	e7de      	b.n	800452c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800456e:	4b4d      	ldr	r3, [pc, #308]	; (80046a4 <HAL_RCC_OscConfig+0x2b8>)
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004574:	f7fe fd18 	bl	8002fa8 <HAL_GetTick>
 8004578:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457a:	4b49      	ldr	r3, [pc, #292]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f013 0f02 	tst.w	r3, #2
 8004582:	d0d3      	beq.n	800452c <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004584:	f7fe fd10 	bl	8002fa8 <HAL_GetTick>
 8004588:	1b40      	subs	r0, r0, r5
 800458a:	2802      	cmp	r0, #2
 800458c:	d9f5      	bls.n	800457a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800458e:	2003      	movs	r0, #3
 8004590:	e0ef      	b.n	8004772 <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004592:	4b45      	ldr	r3, [pc, #276]	; (80046a8 <HAL_RCC_OscConfig+0x2bc>)
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004598:	f7fe fd06 	bl	8002fa8 <HAL_GetTick>
 800459c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800459e:	4b40      	ldr	r3, [pc, #256]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 80045a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045a2:	f013 0f02 	tst.w	r3, #2
 80045a6:	d006      	beq.n	80045b6 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a8:	f7fe fcfe 	bl	8002fa8 <HAL_GetTick>
 80045ac:	1b40      	subs	r0, r0, r5
 80045ae:	2802      	cmp	r0, #2
 80045b0:	d9f5      	bls.n	800459e <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 80045b2:	2003      	movs	r0, #3
 80045b4:	e0dd      	b.n	8004772 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	f013 0f04 	tst.w	r3, #4
 80045bc:	d079      	beq.n	80046b2 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045be:	4b38      	ldr	r3, [pc, #224]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80045c6:	d133      	bne.n	8004630 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c8:	2300      	movs	r3, #0
 80045ca:	9301      	str	r3, [sp, #4]
 80045cc:	4b34      	ldr	r3, [pc, #208]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 80045ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80045d4:	641a      	str	r2, [r3, #64]	; 0x40
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80045e0:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e2:	4b32      	ldr	r3, [pc, #200]	; (80046ac <HAL_RCC_OscConfig+0x2c0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80045ea:	d023      	beq.n	8004634 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ec:	68a3      	ldr	r3, [r4, #8]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d034      	beq.n	800465c <HAL_RCC_OscConfig+0x270>
 80045f2:	2b05      	cmp	r3, #5
 80045f4:	d038      	beq.n	8004668 <HAL_RCC_OscConfig+0x27c>
 80045f6:	4b2a      	ldr	r3, [pc, #168]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 80045f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	671a      	str	r2, [r3, #112]	; 0x70
 8004600:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004602:	f022 0204 	bic.w	r2, r2, #4
 8004606:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004608:	68a3      	ldr	r3, [r4, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d036      	beq.n	800467c <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460e:	f7fe fccb 	bl	8002fa8 <HAL_GetTick>
 8004612:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004614:	4b22      	ldr	r3, [pc, #136]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004618:	f013 0f02 	tst.w	r3, #2
 800461c:	d148      	bne.n	80046b0 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800461e:	f7fe fcc3 	bl	8002fa8 <HAL_GetTick>
 8004622:	1b80      	subs	r0, r0, r6
 8004624:	f241 3388 	movw	r3, #5000	; 0x1388
 8004628:	4298      	cmp	r0, r3
 800462a:	d9f3      	bls.n	8004614 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 800462c:	2003      	movs	r0, #3
 800462e:	e0a0      	b.n	8004772 <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8004630:	2500      	movs	r5, #0
 8004632:	e7d6      	b.n	80045e2 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004634:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <HAL_RCC_OscConfig+0x2c0>)
 8004636:	6813      	ldr	r3, [r2, #0]
 8004638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800463c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800463e:	f7fe fcb3 	bl	8002fa8 <HAL_GetTick>
 8004642:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004644:	4b19      	ldr	r3, [pc, #100]	; (80046ac <HAL_RCC_OscConfig+0x2c0>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f413 7f80 	tst.w	r3, #256	; 0x100
 800464c:	d1ce      	bne.n	80045ec <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464e:	f7fe fcab 	bl	8002fa8 <HAL_GetTick>
 8004652:	1b80      	subs	r0, r0, r6
 8004654:	2802      	cmp	r0, #2
 8004656:	d9f5      	bls.n	8004644 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8004658:	2003      	movs	r0, #3
 800465a:	e08a      	b.n	8004772 <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800465c:	4a10      	ldr	r2, [pc, #64]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 800465e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004660:	f043 0301 	orr.w	r3, r3, #1
 8004664:	6713      	str	r3, [r2, #112]	; 0x70
 8004666:	e7cf      	b.n	8004608 <HAL_RCC_OscConfig+0x21c>
 8004668:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 800466a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800466c:	f042 0204 	orr.w	r2, r2, #4
 8004670:	671a      	str	r2, [r3, #112]	; 0x70
 8004672:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004674:	f042 0201 	orr.w	r2, r2, #1
 8004678:	671a      	str	r2, [r3, #112]	; 0x70
 800467a:	e7c5      	b.n	8004608 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800467c:	f7fe fc94 	bl	8002fa8 <HAL_GetTick>
 8004680:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004682:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <HAL_RCC_OscConfig+0x2b4>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004686:	f013 0f02 	tst.w	r3, #2
 800468a:	d011      	beq.n	80046b0 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800468c:	f7fe fc8c 	bl	8002fa8 <HAL_GetTick>
 8004690:	1b80      	subs	r0, r0, r6
 8004692:	f241 3388 	movw	r3, #5000	; 0x1388
 8004696:	4298      	cmp	r0, r3
 8004698:	d9f3      	bls.n	8004682 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 800469a:	2003      	movs	r0, #3
 800469c:	e069      	b.n	8004772 <HAL_RCC_OscConfig+0x386>
 800469e:	bf00      	nop
 80046a0:	40023800 	.word	0x40023800
 80046a4:	42470000 	.word	0x42470000
 80046a8:	42470e80 	.word	0x42470e80
 80046ac:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046b0:	b9e5      	cbnz	r5, 80046ec <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046b2:	69a3      	ldr	r3, [r4, #24]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d05b      	beq.n	8004770 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046b8:	4a30      	ldr	r2, [pc, #192]	; (800477c <HAL_RCC_OscConfig+0x390>)
 80046ba:	6892      	ldr	r2, [r2, #8]
 80046bc:	f002 020c 	and.w	r2, r2, #12
 80046c0:	2a08      	cmp	r2, #8
 80046c2:	d058      	beq.n	8004776 <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d017      	beq.n	80046f8 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c8:	4b2d      	ldr	r3, [pc, #180]	; (8004780 <HAL_RCC_OscConfig+0x394>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ce:	f7fe fc6b 	bl	8002fa8 <HAL_GetTick>
 80046d2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d4:	4b29      	ldr	r3, [pc, #164]	; (800477c <HAL_RCC_OscConfig+0x390>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80046dc:	d042      	beq.n	8004764 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046de:	f7fe fc63 	bl	8002fa8 <HAL_GetTick>
 80046e2:	1b00      	subs	r0, r0, r4
 80046e4:	2802      	cmp	r0, #2
 80046e6:	d9f5      	bls.n	80046d4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80046e8:	2003      	movs	r0, #3
 80046ea:	e042      	b.n	8004772 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ec:	4a23      	ldr	r2, [pc, #140]	; (800477c <HAL_RCC_OscConfig+0x390>)
 80046ee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80046f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046f4:	6413      	str	r3, [r2, #64]	; 0x40
 80046f6:	e7dc      	b.n	80046b2 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 80046f8:	4b21      	ldr	r3, [pc, #132]	; (8004780 <HAL_RCC_OscConfig+0x394>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80046fe:	f7fe fc53 	bl	8002fa8 <HAL_GetTick>
 8004702:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004704:	4b1d      	ldr	r3, [pc, #116]	; (800477c <HAL_RCC_OscConfig+0x390>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800470c:	d006      	beq.n	800471c <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800470e:	f7fe fc4b 	bl	8002fa8 <HAL_GetTick>
 8004712:	1b40      	subs	r0, r0, r5
 8004714:	2802      	cmp	r0, #2
 8004716:	d9f5      	bls.n	8004704 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8004718:	2003      	movs	r0, #3
 800471a:	e02a      	b.n	8004772 <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800471c:	69e3      	ldr	r3, [r4, #28]
 800471e:	6a22      	ldr	r2, [r4, #32]
 8004720:	4313      	orrs	r3, r2
 8004722:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004724:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004728:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800472a:	0852      	lsrs	r2, r2, #1
 800472c:	3a01      	subs	r2, #1
 800472e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004732:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004734:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004738:	4a10      	ldr	r2, [pc, #64]	; (800477c <HAL_RCC_OscConfig+0x390>)
 800473a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800473c:	4b10      	ldr	r3, [pc, #64]	; (8004780 <HAL_RCC_OscConfig+0x394>)
 800473e:	2201      	movs	r2, #1
 8004740:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004742:	f7fe fc31 	bl	8002fa8 <HAL_GetTick>
 8004746:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004748:	4b0c      	ldr	r3, [pc, #48]	; (800477c <HAL_RCC_OscConfig+0x390>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004750:	d106      	bne.n	8004760 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004752:	f7fe fc29 	bl	8002fa8 <HAL_GetTick>
 8004756:	1b00      	subs	r0, r0, r4
 8004758:	2802      	cmp	r0, #2
 800475a:	d9f5      	bls.n	8004748 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 800475c:	2003      	movs	r0, #3
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004760:	2000      	movs	r0, #0
 8004762:	e006      	b.n	8004772 <HAL_RCC_OscConfig+0x386>
 8004764:	2000      	movs	r0, #0
 8004766:	e004      	b.n	8004772 <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8004768:	2001      	movs	r0, #1
}
 800476a:	4770      	bx	lr
        return HAL_ERROR;
 800476c:	2001      	movs	r0, #1
 800476e:	e000      	b.n	8004772 <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8004770:	2000      	movs	r0, #0
}
 8004772:	b002      	add	sp, #8
 8004774:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004776:	2001      	movs	r0, #1
 8004778:	e7fb      	b.n	8004772 <HAL_RCC_OscConfig+0x386>
 800477a:	bf00      	nop
 800477c:	40023800 	.word	0x40023800
 8004780:	42470060 	.word	0x42470060

08004784 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004784:	4b32      	ldr	r3, [pc, #200]	; (8004850 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 030c 	and.w	r3, r3, #12
 800478c:	2b04      	cmp	r3, #4
 800478e:	d05c      	beq.n	800484a <HAL_RCC_GetSysClockFreq+0xc6>
 8004790:	2b08      	cmp	r3, #8
 8004792:	d001      	beq.n	8004798 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004794:	482f      	ldr	r0, [pc, #188]	; (8004854 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004796:	4770      	bx	lr
{
 8004798:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800479c:	4b2c      	ldr	r3, [pc, #176]	; (8004850 <HAL_RCC_GetSysClockFreq+0xcc>)
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80047aa:	d02b      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ac:	4b28      	ldr	r3, [pc, #160]	; (8004850 <HAL_RCC_GetSysClockFreq+0xcc>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80047b4:	461e      	mov	r6, r3
 80047b6:	2700      	movs	r7, #0
 80047b8:	015c      	lsls	r4, r3, #5
 80047ba:	2500      	movs	r5, #0
 80047bc:	1ae4      	subs	r4, r4, r3
 80047be:	eb65 0507 	sbc.w	r5, r5, r7
 80047c2:	01a9      	lsls	r1, r5, #6
 80047c4:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80047c8:	01a0      	lsls	r0, r4, #6
 80047ca:	1b00      	subs	r0, r0, r4
 80047cc:	eb61 0105 	sbc.w	r1, r1, r5
 80047d0:	00cb      	lsls	r3, r1, #3
 80047d2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80047d6:	00c4      	lsls	r4, r0, #3
 80047d8:	19a0      	adds	r0, r4, r6
 80047da:	eb43 0107 	adc.w	r1, r3, r7
 80047de:	024b      	lsls	r3, r1, #9
 80047e0:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80047e4:	0244      	lsls	r4, r0, #9
 80047e6:	4620      	mov	r0, r4
 80047e8:	4619      	mov	r1, r3
 80047ea:	2300      	movs	r3, #0
 80047ec:	f7fc fa54 	bl	8000c98 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047f0:	4b17      	ldr	r3, [pc, #92]	; (8004850 <HAL_RCC_GetSysClockFreq+0xcc>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80047f8:	3301      	adds	r3, #1
 80047fa:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80047fc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004800:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004804:	4b12      	ldr	r3, [pc, #72]	; (8004850 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800480c:	461e      	mov	r6, r3
 800480e:	2700      	movs	r7, #0
 8004810:	015c      	lsls	r4, r3, #5
 8004812:	2500      	movs	r5, #0
 8004814:	1ae4      	subs	r4, r4, r3
 8004816:	eb65 0507 	sbc.w	r5, r5, r7
 800481a:	01a9      	lsls	r1, r5, #6
 800481c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004820:	01a0      	lsls	r0, r4, #6
 8004822:	1b00      	subs	r0, r0, r4
 8004824:	eb61 0105 	sbc.w	r1, r1, r5
 8004828:	00cb      	lsls	r3, r1, #3
 800482a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800482e:	00c4      	lsls	r4, r0, #3
 8004830:	19a0      	adds	r0, r4, r6
 8004832:	eb43 0107 	adc.w	r1, r3, r7
 8004836:	028b      	lsls	r3, r1, #10
 8004838:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800483c:	0284      	lsls	r4, r0, #10
 800483e:	4620      	mov	r0, r4
 8004840:	4619      	mov	r1, r3
 8004842:	2300      	movs	r3, #0
 8004844:	f7fc fa28 	bl	8000c98 <__aeabi_uldivmod>
 8004848:	e7d2      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 800484a:	4803      	ldr	r0, [pc, #12]	; (8004858 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40023800 	.word	0x40023800
 8004854:	00f42400 	.word	0x00f42400
 8004858:	007a1200 	.word	0x007a1200

0800485c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800485c:	2800      	cmp	r0, #0
 800485e:	f000 809d 	beq.w	800499c <HAL_RCC_ClockConfig+0x140>
{
 8004862:	b570      	push	{r4, r5, r6, lr}
 8004864:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004866:	4b4f      	ldr	r3, [pc, #316]	; (80049a4 <HAL_RCC_ClockConfig+0x148>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	428b      	cmp	r3, r1
 8004870:	d209      	bcs.n	8004886 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004872:	b2cb      	uxtb	r3, r1
 8004874:	4a4b      	ldr	r2, [pc, #300]	; (80049a4 <HAL_RCC_ClockConfig+0x148>)
 8004876:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004878:	6813      	ldr	r3, [r2, #0]
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	428b      	cmp	r3, r1
 8004880:	d001      	beq.n	8004886 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8004882:	2001      	movs	r0, #1
}
 8004884:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	f013 0f02 	tst.w	r3, #2
 800488c:	d017      	beq.n	80048be <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800488e:	f013 0f04 	tst.w	r3, #4
 8004892:	d004      	beq.n	800489e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004894:	4a44      	ldr	r2, [pc, #272]	; (80049a8 <HAL_RCC_ClockConfig+0x14c>)
 8004896:	6893      	ldr	r3, [r2, #8]
 8004898:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800489c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	f013 0f08 	tst.w	r3, #8
 80048a4:	d004      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048a6:	4a40      	ldr	r2, [pc, #256]	; (80049a8 <HAL_RCC_ClockConfig+0x14c>)
 80048a8:	6893      	ldr	r3, [r2, #8]
 80048aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048ae:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048b0:	4a3d      	ldr	r2, [pc, #244]	; (80049a8 <HAL_RCC_ClockConfig+0x14c>)
 80048b2:	6893      	ldr	r3, [r2, #8]
 80048b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048b8:	68a0      	ldr	r0, [r4, #8]
 80048ba:	4303      	orrs	r3, r0
 80048bc:	6093      	str	r3, [r2, #8]
 80048be:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	f013 0f01 	tst.w	r3, #1
 80048c6:	d032      	beq.n	800492e <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c8:	6863      	ldr	r3, [r4, #4]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d021      	beq.n	8004912 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ce:	1e9a      	subs	r2, r3, #2
 80048d0:	2a01      	cmp	r2, #1
 80048d2:	d925      	bls.n	8004920 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d4:	4a34      	ldr	r2, [pc, #208]	; (80049a8 <HAL_RCC_ClockConfig+0x14c>)
 80048d6:	6812      	ldr	r2, [r2, #0]
 80048d8:	f012 0f02 	tst.w	r2, #2
 80048dc:	d060      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048de:	4932      	ldr	r1, [pc, #200]	; (80049a8 <HAL_RCC_ClockConfig+0x14c>)
 80048e0:	688a      	ldr	r2, [r1, #8]
 80048e2:	f022 0203 	bic.w	r2, r2, #3
 80048e6:	4313      	orrs	r3, r2
 80048e8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80048ea:	f7fe fb5d 	bl	8002fa8 <HAL_GetTick>
 80048ee:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f0:	4b2d      	ldr	r3, [pc, #180]	; (80049a8 <HAL_RCC_ClockConfig+0x14c>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 030c 	and.w	r3, r3, #12
 80048f8:	6862      	ldr	r2, [r4, #4]
 80048fa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80048fe:	d016      	beq.n	800492e <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004900:	f7fe fb52 	bl	8002fa8 <HAL_GetTick>
 8004904:	1b80      	subs	r0, r0, r6
 8004906:	f241 3388 	movw	r3, #5000	; 0x1388
 800490a:	4298      	cmp	r0, r3
 800490c:	d9f0      	bls.n	80048f0 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 800490e:	2003      	movs	r0, #3
 8004910:	e7b8      	b.n	8004884 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004912:	4a25      	ldr	r2, [pc, #148]	; (80049a8 <HAL_RCC_ClockConfig+0x14c>)
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800491a:	d1e0      	bne.n	80048de <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800491c:	2001      	movs	r0, #1
 800491e:	e7b1      	b.n	8004884 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004920:	4a21      	ldr	r2, [pc, #132]	; (80049a8 <HAL_RCC_ClockConfig+0x14c>)
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004928:	d1d9      	bne.n	80048de <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800492a:	2001      	movs	r0, #1
 800492c:	e7aa      	b.n	8004884 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800492e:	4b1d      	ldr	r3, [pc, #116]	; (80049a4 <HAL_RCC_ClockConfig+0x148>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	42ab      	cmp	r3, r5
 8004938:	d909      	bls.n	800494e <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493a:	b2ea      	uxtb	r2, r5
 800493c:	4b19      	ldr	r3, [pc, #100]	; (80049a4 <HAL_RCC_ClockConfig+0x148>)
 800493e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	42ab      	cmp	r3, r5
 8004948:	d001      	beq.n	800494e <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 800494a:	2001      	movs	r0, #1
 800494c:	e79a      	b.n	8004884 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	f013 0f04 	tst.w	r3, #4
 8004954:	d006      	beq.n	8004964 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004956:	4a14      	ldr	r2, [pc, #80]	; (80049a8 <HAL_RCC_ClockConfig+0x14c>)
 8004958:	6893      	ldr	r3, [r2, #8]
 800495a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800495e:	68e1      	ldr	r1, [r4, #12]
 8004960:	430b      	orrs	r3, r1
 8004962:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	f013 0f08 	tst.w	r3, #8
 800496a:	d007      	beq.n	800497c <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800496c:	4a0e      	ldr	r2, [pc, #56]	; (80049a8 <HAL_RCC_ClockConfig+0x14c>)
 800496e:	6893      	ldr	r3, [r2, #8]
 8004970:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004974:	6921      	ldr	r1, [r4, #16]
 8004976:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800497a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800497c:	f7ff ff02 	bl	8004784 <HAL_RCC_GetSysClockFreq>
 8004980:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <HAL_RCC_ClockConfig+0x14c>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004988:	4a08      	ldr	r2, [pc, #32]	; (80049ac <HAL_RCC_ClockConfig+0x150>)
 800498a:	5cd3      	ldrb	r3, [r2, r3]
 800498c:	40d8      	lsrs	r0, r3
 800498e:	4b08      	ldr	r3, [pc, #32]	; (80049b0 <HAL_RCC_ClockConfig+0x154>)
 8004990:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004992:	2000      	movs	r0, #0
 8004994:	f003 fb78 	bl	8008088 <HAL_InitTick>
  return HAL_OK;
 8004998:	2000      	movs	r0, #0
 800499a:	e773      	b.n	8004884 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800499c:	2001      	movs	r0, #1
}
 800499e:	4770      	bx	lr
        return HAL_ERROR;
 80049a0:	2001      	movs	r0, #1
 80049a2:	e76f      	b.n	8004884 <HAL_RCC_ClockConfig+0x28>
 80049a4:	40023c00 	.word	0x40023c00
 80049a8:	40023800 	.word	0x40023800
 80049ac:	0800ead4 	.word	0x0800ead4
 80049b0:	20000080 	.word	0x20000080

080049b4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80049b4:	4b01      	ldr	r3, [pc, #4]	; (80049bc <HAL_RCC_GetHCLKFreq+0x8>)
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	20000080 	.word	0x20000080

080049c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049c2:	f7ff fff7 	bl	80049b4 <HAL_RCC_GetHCLKFreq>
 80049c6:	4b04      	ldr	r3, [pc, #16]	; (80049d8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80049ce:	4a03      	ldr	r2, [pc, #12]	; (80049dc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80049d0:	5cd3      	ldrb	r3, [r2, r3]
}
 80049d2:	40d8      	lsrs	r0, r3
 80049d4:	bd08      	pop	{r3, pc}
 80049d6:	bf00      	nop
 80049d8:	40023800 	.word	0x40023800
 80049dc:	0800eae4 	.word	0x0800eae4

080049e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049e0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049e2:	f7ff ffe7 	bl	80049b4 <HAL_RCC_GetHCLKFreq>
 80049e6:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80049ee:	4a03      	ldr	r2, [pc, #12]	; (80049fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80049f0:	5cd3      	ldrb	r3, [r2, r3]
}
 80049f2:	40d8      	lsrs	r0, r3
 80049f4:	bd08      	pop	{r3, pc}
 80049f6:	bf00      	nop
 80049f8:	40023800 	.word	0x40023800
 80049fc:	0800eae4 	.word	0x0800eae4

08004a00 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a00:	230f      	movs	r3, #15
 8004a02:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a04:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <HAL_RCC_GetClockConfig+0x34>)
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	f002 0203 	and.w	r2, r2, #3
 8004a0c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004a14:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8004a1c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	08db      	lsrs	r3, r3, #3
 8004a22:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004a26:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a28:	4b03      	ldr	r3, [pc, #12]	; (8004a38 <HAL_RCC_GetClockConfig+0x38>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 030f 	and.w	r3, r3, #15
 8004a30:	600b      	str	r3, [r1, #0]
}
 8004a32:	4770      	bx	lr
 8004a34:	40023800 	.word	0x40023800
 8004a38:	40023c00 	.word	0x40023c00

08004a3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3e:	4605      	mov	r5, r0
 8004a40:	460f      	mov	r7, r1
 8004a42:	4616      	mov	r6, r2
 8004a44:	461c      	mov	r4, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a46:	682b      	ldr	r3, [r5, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	ea37 0303 	bics.w	r3, r7, r3
 8004a4e:	bf0c      	ite	eq
 8004a50:	2301      	moveq	r3, #1
 8004a52:	2300      	movne	r3, #0
 8004a54:	42b3      	cmp	r3, r6
 8004a56:	d037      	beq.n	8004ac8 <SPI_WaitFlagStateUntilTimeout+0x8c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a58:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8004a5c:	d0f3      	beq.n	8004a46 <SPI_WaitFlagStateUntilTimeout+0xa>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004a5e:	f7fe faa3 	bl	8002fa8 <HAL_GetTick>
 8004a62:	9b06      	ldr	r3, [sp, #24]
 8004a64:	1ac0      	subs	r0, r0, r3
 8004a66:	42a0      	cmp	r0, r4
 8004a68:	d201      	bcs.n	8004a6e <SPI_WaitFlagStateUntilTimeout+0x32>
 8004a6a:	2c00      	cmp	r4, #0
 8004a6c:	d1eb      	bne.n	8004a46 <SPI_WaitFlagStateUntilTimeout+0xa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a6e:	682a      	ldr	r2, [r5, #0]
 8004a70:	6853      	ldr	r3, [r2, #4]
 8004a72:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004a76:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a78:	686b      	ldr	r3, [r5, #4]
 8004a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a7e:	d00b      	beq.n	8004a98 <SPI_WaitFlagStateUntilTimeout+0x5c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a80:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a86:	d014      	beq.n	8004ab2 <SPI_WaitFlagStateUntilTimeout+0x76>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a94:	2003      	movs	r0, #3
 8004a96:	e018      	b.n	8004aca <SPI_WaitFlagStateUntilTimeout+0x8e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a98:	68ab      	ldr	r3, [r5, #8]
 8004a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a9e:	d002      	beq.n	8004aa6 <SPI_WaitFlagStateUntilTimeout+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa4:	d1ec      	bne.n	8004a80 <SPI_WaitFlagStateUntilTimeout+0x44>
          __HAL_SPI_DISABLE(hspi);
 8004aa6:	682a      	ldr	r2, [r5, #0]
 8004aa8:	6813      	ldr	r3, [r2, #0]
 8004aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	e7e6      	b.n	8004a80 <SPI_WaitFlagStateUntilTimeout+0x44>
          SPI_RESET_CRC(hspi);
 8004ab2:	682a      	ldr	r2, [r5, #0]
 8004ab4:	6813      	ldr	r3, [r2, #0]
 8004ab6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	682a      	ldr	r2, [r5, #0]
 8004abe:	6813      	ldr	r3, [r2, #0]
 8004ac0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	e7df      	b.n	8004a88 <SPI_WaitFlagStateUntilTimeout+0x4c>
      }
    }
  }

  return HAL_OK;
 8004ac8:	2000      	movs	r0, #0
}
 8004aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004acc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004acc:	b530      	push	{r4, r5, lr}
 8004ace:	b085      	sub	sp, #20
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ad0:	4c16      	ldr	r4, [pc, #88]	; (8004b2c <SPI_EndRxTxTransaction+0x60>)
 8004ad2:	6824      	ldr	r4, [r4, #0]
 8004ad4:	4d16      	ldr	r5, [pc, #88]	; (8004b30 <SPI_EndRxTxTransaction+0x64>)
 8004ad6:	fba5 3404 	umull	r3, r4, r5, r4
 8004ada:	0d64      	lsrs	r4, r4, #21
 8004adc:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8004ae0:	fb05 f404 	mul.w	r4, r5, r4
 8004ae4:	9403      	str	r4, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ae6:	6844      	ldr	r4, [r0, #4]
 8004ae8:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8004aec:	d00b      	beq.n	8004b06 <SPI_EndRxTxTransaction+0x3a>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004aee:	9b03      	ldr	r3, [sp, #12]
 8004af0:	b1c3      	cbz	r3, 8004b24 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8004af2:	9b03      	ldr	r3, [sp, #12]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004af8:	6803      	ldr	r3, [r0, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b00:	d1f5      	bne.n	8004aee <SPI_EndRxTxTransaction+0x22>
  }

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	e00f      	b.n	8004b26 <SPI_EndRxTxTransaction+0x5a>
 8004b06:	460b      	mov	r3, r1
 8004b08:	4604      	mov	r4, r0
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b0a:	9200      	str	r2, [sp, #0]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2180      	movs	r1, #128	; 0x80
 8004b10:	f7ff ff94 	bl	8004a3c <SPI_WaitFlagStateUntilTimeout>
 8004b14:	4603      	mov	r3, r0
 8004b16:	b130      	cbz	r0, 8004b26 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b1a:	f043 0320 	orr.w	r3, r3, #32
 8004b1e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e000      	b.n	8004b26 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	b005      	add	sp, #20
 8004b2a:	bd30      	pop	{r4, r5, pc}
 8004b2c:	20000080 	.word	0x20000080
 8004b30:	165e9f81 	.word	0x165e9f81

08004b34 <SPI_EndRxTransaction>:
{
 8004b34:	b510      	push	{r4, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b3a:	6840      	ldr	r0, [r0, #4]
 8004b3c:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8004b40:	d016      	beq.n	8004b70 <SPI_EndRxTransaction+0x3c>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b42:	6860      	ldr	r0, [r4, #4]
 8004b44:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8004b48:	d12e      	bne.n	8004ba8 <SPI_EndRxTransaction+0x74>
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004b4a:	68a3      	ldr	r3, [r4, #8]
 8004b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b50:	d01b      	beq.n	8004b8a <SPI_EndRxTransaction+0x56>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b52:	9200      	str	r2, [sp, #0]
 8004b54:	460b      	mov	r3, r1
 8004b56:	2200      	movs	r2, #0
 8004b58:	2180      	movs	r1, #128	; 0x80
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f7ff ff6e 	bl	8004a3c <SPI_WaitFlagStateUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	b350      	cbz	r0, 8004bba <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b66:	f043 0320 	orr.w	r3, r3, #32
 8004b6a:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e024      	b.n	8004bba <SPI_EndRxTransaction+0x86>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b70:	68a3      	ldr	r3, [r4, #8]
 8004b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b76:	d002      	beq.n	8004b7e <SPI_EndRxTransaction+0x4a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b7c:	d1e1      	bne.n	8004b42 <SPI_EndRxTransaction+0xe>
    __HAL_SPI_DISABLE(hspi);
 8004b7e:	6820      	ldr	r0, [r4, #0]
 8004b80:	6803      	ldr	r3, [r0, #0]
 8004b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b86:	6003      	str	r3, [r0, #0]
 8004b88:	e7db      	b.n	8004b42 <SPI_EndRxTransaction+0xe>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004b8a:	9200      	str	r2, [sp, #0]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	2200      	movs	r2, #0
 8004b90:	2101      	movs	r1, #1
 8004b92:	4620      	mov	r0, r4
 8004b94:	f7ff ff52 	bl	8004a3c <SPI_WaitFlagStateUntilTimeout>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	b170      	cbz	r0, 8004bba <SPI_EndRxTransaction+0x86>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b9e:	f043 0320 	orr.w	r3, r3, #32
 8004ba2:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e008      	b.n	8004bba <SPI_EndRxTransaction+0x86>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ba8:	9200      	str	r2, [sp, #0]
 8004baa:	460b      	mov	r3, r1
 8004bac:	2200      	movs	r2, #0
 8004bae:	2101      	movs	r1, #1
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	f7ff ff43 	bl	8004a3c <SPI_WaitFlagStateUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	b910      	cbnz	r0, 8004bc0 <SPI_EndRxTransaction+0x8c>
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	b002      	add	sp, #8
 8004bbe:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bc0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004bc2:	f043 0320 	orr.w	r3, r3, #32
 8004bc6:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e7f6      	b.n	8004bba <SPI_EndRxTransaction+0x86>

08004bcc <HAL_SPI_Init>:
  if (hspi == NULL)
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d03b      	beq.n	8004c48 <HAL_SPI_Init+0x7c>
{
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bd8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d02e      	beq.n	8004c3e <HAL_SPI_Init+0x72>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004be0:	2302      	movs	r3, #2
 8004be2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004be6:	6822      	ldr	r2, [r4, #0]
 8004be8:	6813      	ldr	r3, [r2, #0]
 8004bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bee:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004bf0:	6863      	ldr	r3, [r4, #4]
 8004bf2:	68a2      	ldr	r2, [r4, #8]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	68e2      	ldr	r2, [r4, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	6922      	ldr	r2, [r4, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	6962      	ldr	r2, [r4, #20]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	69a2      	ldr	r2, [r4, #24]
 8004c04:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	69e2      	ldr	r2, [r4, #28]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	6a22      	ldr	r2, [r4, #32]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004c14:	6822      	ldr	r2, [r4, #0]
 8004c16:	430b      	orrs	r3, r1
 8004c18:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004c1a:	8b63      	ldrh	r3, [r4, #26]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004c22:	6822      	ldr	r2, [r4, #0]
 8004c24:	430b      	orrs	r3, r1
 8004c26:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c28:	6822      	ldr	r2, [r4, #0]
 8004c2a:	69d3      	ldr	r3, [r2, #28]
 8004c2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c30:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c32:	2000      	movs	r0, #0
 8004c34:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c36:	2301      	movs	r3, #1
 8004c38:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004c3c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8004c3e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004c42:	f003 f999 	bl	8007f78 <HAL_SPI_MspInit>
 8004c46:	e7cb      	b.n	8004be0 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8004c48:	2001      	movs	r0, #1
}
 8004c4a:	4770      	bx	lr

08004c4c <HAL_SPI_Transmit>:
{
 8004c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c50:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8004c52:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8004c56:	2c01      	cmp	r4, #1
 8004c58:	f000 80c3 	beq.w	8004de2 <HAL_SPI_Transmit+0x196>
 8004c5c:	461d      	mov	r5, r3
 8004c5e:	4617      	mov	r7, r2
 8004c60:	4688      	mov	r8, r1
 8004c62:	4604      	mov	r4, r0
 8004c64:	2301      	movs	r3, #1
 8004c66:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004c6a:	f7fe f99d 	bl	8002fa8 <HAL_GetTick>
 8004c6e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004c70:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d009      	beq.n	8004c8e <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 8004c7a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c82:	2300      	movs	r3, #0
 8004c84:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004c88:	b002      	add	sp, #8
 8004c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8004c8e:	f1b8 0f00 	cmp.w	r8, #0
 8004c92:	f000 8098 	beq.w	8004dc6 <HAL_SPI_Transmit+0x17a>
 8004c96:	2f00      	cmp	r7, #0
 8004c98:	f000 8097 	beq.w	8004dca <HAL_SPI_Transmit+0x17e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ca6:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004caa:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004cac:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cae:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004cb0:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004cb2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004cb4:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004cb6:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb8:	68a3      	ldr	r3, [r4, #8]
 8004cba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cbe:	d01c      	beq.n	8004cfa <HAL_SPI_Transmit+0xae>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004cc8:	d103      	bne.n	8004cd2 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd0:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cd2:	68e3      	ldr	r3, [r4, #12]
 8004cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cd8:	d015      	beq.n	8004d06 <HAL_SPI_Transmit+0xba>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cda:	6863      	ldr	r3, [r4, #4]
 8004cdc:	b10b      	cbz	r3, 8004ce2 <HAL_SPI_Transmit+0x96>
 8004cde:	2f01      	cmp	r7, #1
 8004ce0:	d149      	bne.n	8004d76 <HAL_SPI_Transmit+0x12a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ce2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	7812      	ldrb	r2, [r2, #0]
 8004ce8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004cec:	3301      	adds	r3, #1
 8004cee:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004cf0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004cf8:	e03d      	b.n	8004d76 <HAL_SPI_Transmit+0x12a>
    SPI_1LINE_TX(hspi);
 8004cfa:	6822      	ldr	r2, [r4, #0]
 8004cfc:	6813      	ldr	r3, [r2, #0]
 8004cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	e7dc      	b.n	8004cc0 <HAL_SPI_Transmit+0x74>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d06:	6863      	ldr	r3, [r4, #4]
 8004d08:	b10b      	cbz	r3, 8004d0e <HAL_SPI_Transmit+0xc2>
 8004d0a:	2f01      	cmp	r7, #1
 8004d0c:	d115      	bne.n	8004d3a <HAL_SPI_Transmit+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d0e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	8812      	ldrh	r2, [r2, #0]
 8004d14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d18:	3302      	adds	r3, #2
 8004d1a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004d1c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004d24:	e009      	b.n	8004d3a <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d26:	f7fe f93f 	bl	8002fa8 <HAL_GetTick>
 8004d2a:	1b80      	subs	r0, r0, r6
 8004d2c:	42a8      	cmp	r0, r5
 8004d2e:	d302      	bcc.n	8004d36 <HAL_SPI_Transmit+0xea>
 8004d30:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004d34:	d14b      	bne.n	8004dce <HAL_SPI_Transmit+0x182>
 8004d36:	2d00      	cmp	r5, #0
 8004d38:	d04b      	beq.n	8004dd2 <HAL_SPI_Transmit+0x186>
    while (hspi->TxXferCount > 0U)
 8004d3a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d02c      	beq.n	8004d9c <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	f012 0f02 	tst.w	r2, #2
 8004d4a:	d0ec      	beq.n	8004d26 <HAL_SPI_Transmit+0xda>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d4c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004d4e:	8812      	ldrh	r2, [r2, #0]
 8004d50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d54:	3302      	adds	r3, #2
 8004d56:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004d58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004d60:	e7eb      	b.n	8004d3a <HAL_SPI_Transmit+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d62:	f7fe f921 	bl	8002fa8 <HAL_GetTick>
 8004d66:	1b80      	subs	r0, r0, r6
 8004d68:	42a8      	cmp	r0, r5
 8004d6a:	d302      	bcc.n	8004d72 <HAL_SPI_Transmit+0x126>
 8004d6c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004d70:	d131      	bne.n	8004dd6 <HAL_SPI_Transmit+0x18a>
 8004d72:	2d00      	cmp	r5, #0
 8004d74:	d031      	beq.n	8004dda <HAL_SPI_Transmit+0x18e>
    while (hspi->TxXferCount > 0U)
 8004d76:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	b17b      	cbz	r3, 8004d9c <HAL_SPI_Transmit+0x150>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	f012 0f02 	tst.w	r2, #2
 8004d84:	d0ed      	beq.n	8004d62 <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d86:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004d88:	7812      	ldrb	r2, [r2, #0]
 8004d8a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d8e:	3301      	adds	r3, #1
 8004d90:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004d92:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004d94:	3b01      	subs	r3, #1
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004d9a:	e7ec      	b.n	8004d76 <HAL_SPI_Transmit+0x12a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d9c:	4632      	mov	r2, r6
 8004d9e:	4629      	mov	r1, r5
 8004da0:	4620      	mov	r0, r4
 8004da2:	f7ff fe93 	bl	8004acc <SPI_EndRxTxTransaction>
 8004da6:	b108      	cbz	r0, 8004dac <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004da8:	2320      	movs	r3, #32
 8004daa:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dac:	68a3      	ldr	r3, [r4, #8]
 8004dae:	b933      	cbnz	r3, 8004dbe <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004db0:	9301      	str	r3, [sp, #4]
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	9201      	str	r2, [sp, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dbe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004dc0:	b96b      	cbnz	r3, 8004dde <HAL_SPI_Transmit+0x192>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	e75a      	b.n	8004c7c <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8004dc6:	2001      	movs	r0, #1
 8004dc8:	e758      	b.n	8004c7c <HAL_SPI_Transmit+0x30>
 8004dca:	2001      	movs	r0, #1
 8004dcc:	e756      	b.n	8004c7c <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8004dce:	2003      	movs	r0, #3
 8004dd0:	e754      	b.n	8004c7c <HAL_SPI_Transmit+0x30>
 8004dd2:	2003      	movs	r0, #3
 8004dd4:	e752      	b.n	8004c7c <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8004dd6:	2003      	movs	r0, #3
 8004dd8:	e750      	b.n	8004c7c <HAL_SPI_Transmit+0x30>
 8004dda:	2003      	movs	r0, #3
 8004ddc:	e74e      	b.n	8004c7c <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8004dde:	2001      	movs	r0, #1
 8004de0:	e74c      	b.n	8004c7c <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8004de2:	2002      	movs	r0, #2
 8004de4:	e750      	b.n	8004c88 <HAL_SPI_Transmit+0x3c>

08004de6 <HAL_SPI_TransmitReceive>:
{
 8004de6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004dea:	b083      	sub	sp, #12
 8004dec:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8004df0:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8004df4:	2c01      	cmp	r4, #1
 8004df6:	f000 810b 	beq.w	8005010 <HAL_SPI_TransmitReceive+0x22a>
 8004dfa:	461d      	mov	r5, r3
 8004dfc:	4617      	mov	r7, r2
 8004dfe:	460e      	mov	r6, r1
 8004e00:	4604      	mov	r4, r0
 8004e02:	2301      	movs	r3, #1
 8004e04:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004e08:	f7fe f8ce 	bl	8002fa8 <HAL_GetTick>
 8004e0c:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8004e0e:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8004e12:	b2c0      	uxtb	r0, r0
  tmp_mode            = hspi->Init.Mode;
 8004e14:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e16:	2801      	cmp	r0, #1
 8004e18:	d015      	beq.n	8004e46 <HAL_SPI_TransmitReceive+0x60>
 8004e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e1e:	d00a      	beq.n	8004e36 <HAL_SPI_TransmitReceive+0x50>
    errorcode = HAL_BUSY;
 8004e20:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004e22:	2201      	movs	r2, #1
 8004e24:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	b003      	add	sp, #12
 8004e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e36:	68a3      	ldr	r3, [r4, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f040 80db 	bne.w	8004ff4 <HAL_SPI_TransmitReceive+0x20e>
 8004e3e:	2804      	cmp	r0, #4
 8004e40:	d001      	beq.n	8004e46 <HAL_SPI_TransmitReceive+0x60>
    errorcode = HAL_BUSY;
 8004e42:	2302      	movs	r3, #2
 8004e44:	e7ed      	b.n	8004e22 <HAL_SPI_TransmitReceive+0x3c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e46:	2e00      	cmp	r6, #0
 8004e48:	f000 80d6 	beq.w	8004ff8 <HAL_SPI_TransmitReceive+0x212>
 8004e4c:	2f00      	cmp	r7, #0
 8004e4e:	f000 80d5 	beq.w	8004ffc <HAL_SPI_TransmitReceive+0x216>
 8004e52:	2d00      	cmp	r5, #0
 8004e54:	f000 80d4 	beq.w	8005000 <HAL_SPI_TransmitReceive+0x21a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e58:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d002      	beq.n	8004e68 <HAL_SPI_TransmitReceive+0x82>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e62:	2305      	movs	r3, #5
 8004e64:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e6c:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e6e:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e70:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e72:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e74:	86e5      	strh	r5, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e76:	86a5      	strh	r5, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8004e78:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e7a:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004e84:	d103      	bne.n	8004e8e <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e8c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e8e:	68e3      	ldr	r3, [r4, #12]
 8004e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e94:	d010      	beq.n	8004eb8 <HAL_SPI_TransmitReceive+0xd2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e96:	6863      	ldr	r3, [r4, #4]
 8004e98:	b10b      	cbz	r3, 8004e9e <HAL_SPI_TransmitReceive+0xb8>
 8004e9a:	2d01      	cmp	r5, #1
 8004e9c:	d10a      	bne.n	8004eb4 <HAL_SPI_TransmitReceive+0xce>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e9e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	7812      	ldrb	r2, [r2, #0]
 8004ea4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ea6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004eac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004eb4:	2501      	movs	r5, #1
 8004eb6:	e069      	b.n	8004f8c <HAL_SPI_TransmitReceive+0x1a6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eb8:	6863      	ldr	r3, [r4, #4]
 8004eba:	b10b      	cbz	r3, 8004ec0 <HAL_SPI_TransmitReceive+0xda>
 8004ebc:	2d01      	cmp	r5, #1
 8004ebe:	d10a      	bne.n	8004ed6 <HAL_SPI_TransmitReceive+0xf0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ec0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	8812      	ldrh	r2, [r2, #0]
 8004ec6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ec8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004eca:	3302      	adds	r3, #2
 8004ecc:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004ece:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004ed6:	2501      	movs	r5, #1
 8004ed8:	e01b      	b.n	8004f12 <HAL_SPI_TransmitReceive+0x12c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	f012 0f01 	tst.w	r2, #1
 8004ee2:	d00d      	beq.n	8004f00 <HAL_SPI_TransmitReceive+0x11a>
 8004ee4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004ee6:	b292      	uxth	r2, r2
 8004ee8:	b152      	cbz	r2, 8004f00 <HAL_SPI_TransmitReceive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004eee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ef0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ef2:	3302      	adds	r3, #2
 8004ef4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004ef6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004efe:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f00:	f7fe f852 	bl	8002fa8 <HAL_GetTick>
 8004f04:	eba0 0009 	sub.w	r0, r0, r9
 8004f08:	4540      	cmp	r0, r8
 8004f0a:	d302      	bcc.n	8004f12 <HAL_SPI_TransmitReceive+0x12c>
 8004f0c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004f10:	d178      	bne.n	8005004 <HAL_SPI_TransmitReceive+0x21e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f12:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	b91b      	cbnz	r3, 8004f20 <HAL_SPI_TransmitReceive+0x13a>
 8004f18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d052      	beq.n	8004fc6 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f20:	6823      	ldr	r3, [r4, #0]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	f012 0f02 	tst.w	r2, #2
 8004f28:	d0d7      	beq.n	8004eda <HAL_SPI_TransmitReceive+0xf4>
 8004f2a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004f2c:	b292      	uxth	r2, r2
 8004f2e:	2a00      	cmp	r2, #0
 8004f30:	d0d3      	beq.n	8004eda <HAL_SPI_TransmitReceive+0xf4>
 8004f32:	2d00      	cmp	r5, #0
 8004f34:	d0d1      	beq.n	8004eda <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f36:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004f38:	8812      	ldrh	r2, [r2, #0]
 8004f3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f3e:	3302      	adds	r3, #2
 8004f40:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004f42:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004f4a:	2500      	movs	r5, #0
 8004f4c:	e7c5      	b.n	8004eda <HAL_SPI_TransmitReceive+0xf4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	f012 0f01 	tst.w	r2, #1
 8004f56:	d00d      	beq.n	8004f74 <HAL_SPI_TransmitReceive+0x18e>
 8004f58:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004f5a:	b292      	uxth	r2, r2
 8004f5c:	b152      	cbz	r2, 8004f74 <HAL_SPI_TransmitReceive+0x18e>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f66:	3301      	adds	r3, #1
 8004f68:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004f6a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004f72:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f74:	f7fe f818 	bl	8002fa8 <HAL_GetTick>
 8004f78:	eba0 0009 	sub.w	r0, r0, r9
 8004f7c:	4540      	cmp	r0, r8
 8004f7e:	d302      	bcc.n	8004f86 <HAL_SPI_TransmitReceive+0x1a0>
 8004f80:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004f84:	d140      	bne.n	8005008 <HAL_SPI_TransmitReceive+0x222>
 8004f86:	f1b8 0f00 	cmp.w	r8, #0
 8004f8a:	d03f      	beq.n	800500c <HAL_SPI_TransmitReceive+0x226>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f8c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	b913      	cbnz	r3, 8004f98 <HAL_SPI_TransmitReceive+0x1b2>
 8004f92:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	b1b3      	cbz	r3, 8004fc6 <HAL_SPI_TransmitReceive+0x1e0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	f012 0f02 	tst.w	r2, #2
 8004fa0:	d0d5      	beq.n	8004f4e <HAL_SPI_TransmitReceive+0x168>
 8004fa2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004fa4:	b292      	uxth	r2, r2
 8004fa6:	2a00      	cmp	r2, #0
 8004fa8:	d0d1      	beq.n	8004f4e <HAL_SPI_TransmitReceive+0x168>
 8004faa:	2d00      	cmp	r5, #0
 8004fac:	d0cf      	beq.n	8004f4e <HAL_SPI_TransmitReceive+0x168>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004fb0:	7812      	ldrb	r2, [r2, #0]
 8004fb2:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8004fb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004fba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004fc2:	2500      	movs	r5, #0
 8004fc4:	e7c3      	b.n	8004f4e <HAL_SPI_TransmitReceive+0x168>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fc6:	464a      	mov	r2, r9
 8004fc8:	4641      	mov	r1, r8
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f7ff fd7e 	bl	8004acc <SPI_EndRxTxTransaction>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	b118      	cbz	r0, 8004fdc <HAL_SPI_TransmitReceive+0x1f6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fd4:	2320      	movs	r3, #32
 8004fd6:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
    goto error;
 8004fda:	e722      	b.n	8004e22 <HAL_SPI_TransmitReceive+0x3c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fdc:	68a2      	ldr	r2, [r4, #8]
 8004fde:	2a00      	cmp	r2, #0
 8004fe0:	f47f af1f 	bne.w	8004e22 <HAL_SPI_TransmitReceive+0x3c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fe4:	9201      	str	r2, [sp, #4]
 8004fe6:	6822      	ldr	r2, [r4, #0]
 8004fe8:	68d1      	ldr	r1, [r2, #12]
 8004fea:	9101      	str	r1, [sp, #4]
 8004fec:	6892      	ldr	r2, [r2, #8]
 8004fee:	9201      	str	r2, [sp, #4]
 8004ff0:	9a01      	ldr	r2, [sp, #4]
 8004ff2:	e716      	b.n	8004e22 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_BUSY;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	e714      	b.n	8004e22 <HAL_SPI_TransmitReceive+0x3c>
    errorcode = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e712      	b.n	8004e22 <HAL_SPI_TransmitReceive+0x3c>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e710      	b.n	8004e22 <HAL_SPI_TransmitReceive+0x3c>
 8005000:	2301      	movs	r3, #1
 8005002:	e70e      	b.n	8004e22 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e70c      	b.n	8004e22 <HAL_SPI_TransmitReceive+0x3c>
        errorcode = HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e70a      	b.n	8004e22 <HAL_SPI_TransmitReceive+0x3c>
 800500c:	2303      	movs	r3, #3
 800500e:	e708      	b.n	8004e22 <HAL_SPI_TransmitReceive+0x3c>
  __HAL_LOCK(hspi);
 8005010:	2302      	movs	r3, #2
 8005012:	e70c      	b.n	8004e2e <HAL_SPI_TransmitReceive+0x48>

08005014 <HAL_SPI_Receive>:
{
 8005014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	4604      	mov	r4, r0
 800501c:	460f      	mov	r7, r1
 800501e:	4690      	mov	r8, r2
 8005020:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005022:	6843      	ldr	r3, [r0, #4]
 8005024:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005028:	d019      	beq.n	800505e <HAL_SPI_Receive+0x4a>
  __HAL_LOCK(hspi);
 800502a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800502e:	2b01      	cmp	r3, #1
 8005030:	f000 809f 	beq.w	8005172 <HAL_SPI_Receive+0x15e>
 8005034:	2301      	movs	r3, #1
 8005036:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800503a:	f7fd ffb5 	bl	8002fa8 <HAL_GetTick>
 800503e:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005040:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b01      	cmp	r3, #1
 8005048:	d015      	beq.n	8005076 <HAL_SPI_Receive+0x62>
    errorcode = HAL_BUSY;
 800504a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800504c:	2301      	movs	r3, #1
 800504e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005052:	2300      	movs	r3, #0
 8005054:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005058:	b002      	add	sp, #8
 800505a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800505e:	6883      	ldr	r3, [r0, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1e2      	bne.n	800502a <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005064:	2304      	movs	r3, #4
 8005066:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800506a:	9500      	str	r5, [sp, #0]
 800506c:	4613      	mov	r3, r2
 800506e:	460a      	mov	r2, r1
 8005070:	f7ff feb9 	bl	8004de6 <HAL_SPI_TransmitReceive>
 8005074:	e7f0      	b.n	8005058 <HAL_SPI_Receive+0x44>
  if ((pData == NULL) || (Size == 0U))
 8005076:	2f00      	cmp	r7, #0
 8005078:	d06d      	beq.n	8005156 <HAL_SPI_Receive+0x142>
 800507a:	f1b8 0f00 	cmp.w	r8, #0
 800507e:	d06c      	beq.n	800515a <HAL_SPI_Receive+0x146>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005080:	2304      	movs	r3, #4
 8005082:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005086:	2300      	movs	r3, #0
 8005088:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800508a:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800508c:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005090:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005094:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005096:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005098:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 800509a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800509c:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800509e:	68a3      	ldr	r3, [r4, #8]
 80050a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a4:	d00b      	beq.n	80050be <HAL_SPI_Receive+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	f012 0f40 	tst.w	r2, #64	; 0x40
 80050ae:	d103      	bne.n	80050b8 <HAL_SPI_Receive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050b6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80050b8:	68e3      	ldr	r3, [r4, #12]
 80050ba:	b183      	cbz	r3, 80050de <HAL_SPI_Receive+0xca>
 80050bc:	e02c      	b.n	8005118 <HAL_SPI_Receive+0x104>
    SPI_1LINE_RX(hspi);
 80050be:	6822      	ldr	r2, [r4, #0]
 80050c0:	6813      	ldr	r3, [r2, #0]
 80050c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	e7ed      	b.n	80050a6 <HAL_SPI_Receive+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050ca:	f7fd ff6d 	bl	8002fa8 <HAL_GetTick>
 80050ce:	1b80      	subs	r0, r0, r6
 80050d0:	42a8      	cmp	r0, r5
 80050d2:	d302      	bcc.n	80050da <HAL_SPI_Receive+0xc6>
 80050d4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80050d8:	d141      	bne.n	800515e <HAL_SPI_Receive+0x14a>
 80050da:	2d00      	cmp	r5, #0
 80050dc:	d041      	beq.n	8005162 <HAL_SPI_Receive+0x14e>
    while (hspi->RxXferCount > 0U)
 80050de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d02b      	beq.n	800513e <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	f012 0f01 	tst.w	r2, #1
 80050ee:	d0ec      	beq.n	80050ca <HAL_SPI_Receive+0xb6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80050f2:	7b1b      	ldrb	r3, [r3, #12]
 80050f4:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80050f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050f8:	3301      	adds	r3, #1
 80050fa:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80050fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050fe:	3b01      	subs	r3, #1
 8005100:	b29b      	uxth	r3, r3
 8005102:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005104:	e7eb      	b.n	80050de <HAL_SPI_Receive+0xca>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005106:	f7fd ff4f 	bl	8002fa8 <HAL_GetTick>
 800510a:	1b80      	subs	r0, r0, r6
 800510c:	42a8      	cmp	r0, r5
 800510e:	d302      	bcc.n	8005116 <HAL_SPI_Receive+0x102>
 8005110:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005114:	d127      	bne.n	8005166 <HAL_SPI_Receive+0x152>
 8005116:	b345      	cbz	r5, 800516a <HAL_SPI_Receive+0x156>
    while (hspi->RxXferCount > 0U)
 8005118:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800511a:	b29b      	uxth	r3, r3
 800511c:	b17b      	cbz	r3, 800513e <HAL_SPI_Receive+0x12a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	f012 0f01 	tst.w	r2, #1
 8005126:	d0ee      	beq.n	8005106 <HAL_SPI_Receive+0xf2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005128:	68da      	ldr	r2, [r3, #12]
 800512a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800512c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800512e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005130:	3302      	adds	r3, #2
 8005132:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005134:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005136:	3b01      	subs	r3, #1
 8005138:	b29b      	uxth	r3, r3
 800513a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800513c:	e7ec      	b.n	8005118 <HAL_SPI_Receive+0x104>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800513e:	4632      	mov	r2, r6
 8005140:	4629      	mov	r1, r5
 8005142:	4620      	mov	r0, r4
 8005144:	f7ff fcf6 	bl	8004b34 <SPI_EndRxTransaction>
 8005148:	b108      	cbz	r0, 800514e <HAL_SPI_Receive+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800514a:	2320      	movs	r3, #32
 800514c:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800514e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005150:	b96b      	cbnz	r3, 800516e <HAL_SPI_Receive+0x15a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005152:	2000      	movs	r0, #0
 8005154:	e77a      	b.n	800504c <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 8005156:	2001      	movs	r0, #1
 8005158:	e778      	b.n	800504c <HAL_SPI_Receive+0x38>
 800515a:	2001      	movs	r0, #1
 800515c:	e776      	b.n	800504c <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 800515e:	2003      	movs	r0, #3
 8005160:	e774      	b.n	800504c <HAL_SPI_Receive+0x38>
 8005162:	2003      	movs	r0, #3
 8005164:	e772      	b.n	800504c <HAL_SPI_Receive+0x38>
          errorcode = HAL_TIMEOUT;
 8005166:	2003      	movs	r0, #3
 8005168:	e770      	b.n	800504c <HAL_SPI_Receive+0x38>
 800516a:	2003      	movs	r0, #3
 800516c:	e76e      	b.n	800504c <HAL_SPI_Receive+0x38>
    errorcode = HAL_ERROR;
 800516e:	2001      	movs	r0, #1
 8005170:	e76c      	b.n	800504c <HAL_SPI_Receive+0x38>
  __HAL_LOCK(hspi);
 8005172:	2002      	movs	r0, #2
 8005174:	e770      	b.n	8005058 <HAL_SPI_Receive+0x44>

08005176 <HAL_SPI_ErrorCallback>:
}
 8005176:	4770      	bx	lr

08005178 <HAL_SPI_IRQHandler>:
{
 8005178:	b530      	push	{r4, r5, lr}
 800517a:	b085      	sub	sp, #20
 800517c:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800517e:	6802      	ldr	r2, [r0, #0]
 8005180:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8005182:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005184:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8005188:	b949      	cbnz	r1, 800519e <HAL_SPI_IRQHandler+0x26>
 800518a:	f013 0f01 	tst.w	r3, #1
 800518e:	d006      	beq.n	800519e <HAL_SPI_IRQHandler+0x26>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005190:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005194:	d003      	beq.n	800519e <HAL_SPI_IRQHandler+0x26>
    hspi->RxISR(hspi);
 8005196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005198:	4620      	mov	r0, r4
 800519a:	4798      	blx	r3
    return;
 800519c:	e008      	b.n	80051b0 <HAL_SPI_IRQHandler+0x38>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800519e:	f013 0f02 	tst.w	r3, #2
 80051a2:	d007      	beq.n	80051b4 <HAL_SPI_IRQHandler+0x3c>
 80051a4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80051a8:	d004      	beq.n	80051b4 <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 80051aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80051ac:	4620      	mov	r0, r4
 80051ae:	4798      	blx	r3
}
 80051b0:	b005      	add	sp, #20
 80051b2:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80051b4:	f3c3 1540 	ubfx	r5, r3, #5, #1
 80051b8:	b91d      	cbnz	r5, 80051c2 <HAL_SPI_IRQHandler+0x4a>
 80051ba:	b911      	cbnz	r1, 80051c2 <HAL_SPI_IRQHandler+0x4a>
 80051bc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80051c0:	d0f6      	beq.n	80051b0 <HAL_SPI_IRQHandler+0x38>
 80051c2:	f010 0f20 	tst.w	r0, #32
 80051c6:	d0f3      	beq.n	80051b0 <HAL_SPI_IRQHandler+0x38>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80051c8:	b179      	cbz	r1, 80051ea <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80051ca:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 80051ce:	b2c9      	uxtb	r1, r1
 80051d0:	2903      	cmp	r1, #3
 80051d2:	d053      	beq.n	800527c <HAL_SPI_IRQHandler+0x104>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80051d4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80051d6:	f041 0104 	orr.w	r1, r1, #4
 80051da:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051dc:	2100      	movs	r1, #0
 80051de:	9100      	str	r1, [sp, #0]
 80051e0:	68d1      	ldr	r1, [r2, #12]
 80051e2:	9100      	str	r1, [sp, #0]
 80051e4:	6891      	ldr	r1, [r2, #8]
 80051e6:	9100      	str	r1, [sp, #0]
 80051e8:	9900      	ldr	r1, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80051ea:	b165      	cbz	r5, 8005206 <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80051ec:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80051ee:	f041 0101 	orr.w	r1, r1, #1
 80051f2:	6561      	str	r1, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80051f4:	2100      	movs	r1, #0
 80051f6:	9102      	str	r1, [sp, #8]
 80051f8:	6891      	ldr	r1, [r2, #8]
 80051fa:	9102      	str	r1, [sp, #8]
 80051fc:	6811      	ldr	r1, [r2, #0]
 80051fe:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8005202:	6011      	str	r1, [r2, #0]
 8005204:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005206:	f413 7f80 	tst.w	r3, #256	; 0x100
 800520a:	d009      	beq.n	8005220 <HAL_SPI_IRQHandler+0xa8>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800520c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800520e:	f043 0308 	orr.w	r3, r3, #8
 8005212:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005214:	2300      	movs	r3, #0
 8005216:	9303      	str	r3, [sp, #12]
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	9303      	str	r3, [sp, #12]
 800521e:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005220:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0c4      	beq.n	80051b0 <HAL_SPI_IRQHandler+0x38>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005226:	6822      	ldr	r2, [r4, #0]
 8005228:	6853      	ldr	r3, [r2, #4]
 800522a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800522e:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8005230:	2301      	movs	r3, #1
 8005232:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005236:	f010 0f03 	tst.w	r0, #3
 800523a:	d027      	beq.n	800528c <HAL_SPI_IRQHandler+0x114>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800523c:	6822      	ldr	r2, [r4, #0]
 800523e:	6853      	ldr	r3, [r2, #4]
 8005240:	f023 0303 	bic.w	r3, r3, #3
 8005244:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8005246:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005248:	b14b      	cbz	r3, 800525e <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800524a:	4a12      	ldr	r2, [pc, #72]	; (8005294 <HAL_SPI_IRQHandler+0x11c>)
 800524c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800524e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005250:	f7fd fff6 	bl	8003240 <HAL_DMA_Abort_IT>
 8005254:	b118      	cbz	r0, 800525e <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005256:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800525c:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800525e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0a5      	beq.n	80051b0 <HAL_SPI_IRQHandler+0x38>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005264:	4a0b      	ldr	r2, [pc, #44]	; (8005294 <HAL_SPI_IRQHandler+0x11c>)
 8005266:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005268:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800526a:	f7fd ffe9 	bl	8003240 <HAL_DMA_Abort_IT>
 800526e:	2800      	cmp	r0, #0
 8005270:	d09e      	beq.n	80051b0 <HAL_SPI_IRQHandler+0x38>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005272:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005278:	6563      	str	r3, [r4, #84]	; 0x54
 800527a:	e799      	b.n	80051b0 <HAL_SPI_IRQHandler+0x38>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800527c:	2300      	movs	r3, #0
 800527e:	9301      	str	r3, [sp, #4]
 8005280:	68d3      	ldr	r3, [r2, #12]
 8005282:	9301      	str	r3, [sp, #4]
 8005284:	6893      	ldr	r3, [r2, #8]
 8005286:	9301      	str	r3, [sp, #4]
 8005288:	9b01      	ldr	r3, [sp, #4]
        return;
 800528a:	e791      	b.n	80051b0 <HAL_SPI_IRQHandler+0x38>
        HAL_SPI_ErrorCallback(hspi);
 800528c:	4620      	mov	r0, r4
 800528e:	f7ff ff72 	bl	8005176 <HAL_SPI_ErrorCallback>
 8005292:	e78d      	b.n	80051b0 <HAL_SPI_IRQHandler+0x38>
 8005294:	08005299 	.word	0x08005299

08005298 <SPI_DMAAbortOnError>:
{
 8005298:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800529a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80052a0:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 80052a2:	f7ff ff68 	bl	8005176 <HAL_SPI_ErrorCallback>
}
 80052a6:	bd08      	pop	{r3, pc}

080052a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052aa:	6a03      	ldr	r3, [r0, #32]
 80052ac:	f023 0301 	bic.w	r3, r3, #1
 80052b0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b4:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052b6:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052b8:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052bc:	680d      	ldr	r5, [r1, #0]
 80052be:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052c2:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052c6:	688b      	ldr	r3, [r1, #8]
 80052c8:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052ca:	4d0d      	ldr	r5, [pc, #52]	; (8005300 <TIM_OC1_SetConfig+0x58>)
 80052cc:	42a8      	cmp	r0, r5
 80052ce:	d009      	beq.n	80052e4 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d0:	4d0b      	ldr	r5, [pc, #44]	; (8005300 <TIM_OC1_SetConfig+0x58>)
 80052d2:	42a8      	cmp	r0, r5
 80052d4:	d00d      	beq.n	80052f2 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052d8:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052da:	684a      	ldr	r2, [r1, #4]
 80052dc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052de:	6203      	str	r3, [r0, #32]
}
 80052e0:	bc70      	pop	{r4, r5, r6}
 80052e2:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80052e4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80052e8:	68cc      	ldr	r4, [r1, #12]
 80052ea:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 80052ec:	f023 0304 	bic.w	r3, r3, #4
 80052f0:	e7ee      	b.n	80052d0 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80052f6:	694c      	ldr	r4, [r1, #20]
 80052f8:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 80052fa:	698a      	ldr	r2, [r1, #24]
 80052fc:	4322      	orrs	r2, r4
 80052fe:	e7ea      	b.n	80052d6 <TIM_OC1_SetConfig+0x2e>
 8005300:	40010000 	.word	0x40010000

08005304 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005304:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005306:	6a03      	ldr	r3, [r0, #32]
 8005308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800530c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005310:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005312:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005314:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005318:	680d      	ldr	r5, [r1, #0]
 800531a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800531c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005320:	688d      	ldr	r5, [r1, #8]
 8005322:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005326:	4d0f      	ldr	r5, [pc, #60]	; (8005364 <TIM_OC3_SetConfig+0x60>)
 8005328:	42a8      	cmp	r0, r5
 800532a:	d009      	beq.n	8005340 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532c:	4d0d      	ldr	r5, [pc, #52]	; (8005364 <TIM_OC3_SetConfig+0x60>)
 800532e:	42a8      	cmp	r0, r5
 8005330:	d00e      	beq.n	8005350 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005332:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005334:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005336:	684a      	ldr	r2, [r1, #4]
 8005338:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533a:	6203      	str	r3, [r0, #32]
}
 800533c:	bc30      	pop	{r4, r5}
 800533e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8005340:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005344:	68cd      	ldr	r5, [r1, #12]
 8005346:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800534a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800534e:	e7ed      	b.n	800532c <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005350:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005354:	694d      	ldr	r5, [r1, #20]
 8005356:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800535a:	698d      	ldr	r5, [r1, #24]
 800535c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8005360:	e7e7      	b.n	8005332 <TIM_OC3_SetConfig+0x2e>
 8005362:	bf00      	nop
 8005364:	40010000 	.word	0x40010000

08005368 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005368:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800536a:	6a03      	ldr	r3, [r0, #32]
 800536c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005370:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005372:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005374:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005376:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005378:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800537c:	680d      	ldr	r5, [r1, #0]
 800537e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005382:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005386:	688d      	ldr	r5, [r1, #8]
 8005388:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800538c:	4d07      	ldr	r5, [pc, #28]	; (80053ac <TIM_OC4_SetConfig+0x44>)
 800538e:	42a8      	cmp	r0, r5
 8005390:	d006      	beq.n	80053a0 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005392:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005394:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005396:	684a      	ldr	r2, [r1, #4]
 8005398:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800539a:	6203      	str	r3, [r0, #32]
}
 800539c:	bc30      	pop	{r4, r5}
 800539e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053a0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053a4:	694d      	ldr	r5, [r1, #20]
 80053a6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80053aa:	e7f2      	b.n	8005392 <TIM_OC4_SetConfig+0x2a>
 80053ac:	40010000 	.word	0x40010000

080053b0 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 80053b0:	2302      	movs	r3, #2
 80053b2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053b6:	6802      	ldr	r2, [r0, #0]
 80053b8:	6893      	ldr	r3, [r2, #8]
 80053ba:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053be:	2b06      	cmp	r3, #6
 80053c0:	d003      	beq.n	80053ca <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 80053c2:	6813      	ldr	r3, [r2, #0]
 80053c4:	f043 0301 	orr.w	r3, r3, #1
 80053c8:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 80053ca:	2301      	movs	r3, #1
 80053cc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80053d0:	2000      	movs	r0, #0
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053d4:	6802      	ldr	r2, [r0, #0]
 80053d6:	68d3      	ldr	r3, [r2, #12]
 80053d8:	f043 0301 	orr.w	r3, r3, #1
 80053dc:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053de:	6802      	ldr	r2, [r0, #0]
 80053e0:	6893      	ldr	r3, [r2, #8]
 80053e2:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e6:	2b06      	cmp	r3, #6
 80053e8:	d003      	beq.n	80053f2 <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 80053ea:	6813      	ldr	r3, [r2, #0]
 80053ec:	f043 0301 	orr.w	r3, r3, #1
 80053f0:	6013      	str	r3, [r2, #0]
}
 80053f2:	2000      	movs	r0, #0
 80053f4:	4770      	bx	lr

080053f6 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIM_IC_CaptureCallback>:
}
 80053f8:	4770      	bx	lr

080053fa <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80053fa:	4770      	bx	lr

080053fc <HAL_TIM_TriggerCallback>:
}
 80053fc:	4770      	bx	lr

080053fe <HAL_TIM_IRQHandler>:
{
 80053fe:	b510      	push	{r4, lr}
 8005400:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005402:	6803      	ldr	r3, [r0, #0]
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	f012 0f02 	tst.w	r2, #2
 800540a:	d011      	beq.n	8005430 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	f012 0f02 	tst.w	r2, #2
 8005412:	d00d      	beq.n	8005430 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005414:	f06f 0202 	mvn.w	r2, #2
 8005418:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800541a:	2301      	movs	r3, #1
 800541c:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800541e:	6803      	ldr	r3, [r0, #0]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	f013 0f03 	tst.w	r3, #3
 8005426:	d070      	beq.n	800550a <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8005428:	f7ff ffe6 	bl	80053f8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542c:	2300      	movs	r3, #0
 800542e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005430:	6823      	ldr	r3, [r4, #0]
 8005432:	691a      	ldr	r2, [r3, #16]
 8005434:	f012 0f04 	tst.w	r2, #4
 8005438:	d012      	beq.n	8005460 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	f012 0f04 	tst.w	r2, #4
 8005440:	d00e      	beq.n	8005460 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005442:	f06f 0204 	mvn.w	r2, #4
 8005446:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005448:	2302      	movs	r3, #2
 800544a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005454:	d05f      	beq.n	8005516 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8005456:	4620      	mov	r0, r4
 8005458:	f7ff ffce 	bl	80053f8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545c:	2300      	movs	r3, #0
 800545e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	f012 0f08 	tst.w	r2, #8
 8005468:	d012      	beq.n	8005490 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	f012 0f08 	tst.w	r2, #8
 8005470:	d00e      	beq.n	8005490 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005472:	f06f 0208 	mvn.w	r2, #8
 8005476:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005478:	2304      	movs	r3, #4
 800547a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	f013 0f03 	tst.w	r3, #3
 8005484:	d04e      	beq.n	8005524 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8005486:	4620      	mov	r0, r4
 8005488:	f7ff ffb6 	bl	80053f8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548c:	2300      	movs	r3, #0
 800548e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	691a      	ldr	r2, [r3, #16]
 8005494:	f012 0f10 	tst.w	r2, #16
 8005498:	d012      	beq.n	80054c0 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	f012 0f10 	tst.w	r2, #16
 80054a0:	d00e      	beq.n	80054c0 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054a2:	f06f 0210 	mvn.w	r2, #16
 80054a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054a8:	2308      	movs	r3, #8
 80054aa:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80054b4:	d03d      	beq.n	8005532 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80054b6:	4620      	mov	r0, r4
 80054b8:	f7ff ff9e 	bl	80053f8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054bc:	2300      	movs	r3, #0
 80054be:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	f012 0f01 	tst.w	r2, #1
 80054c8:	d003      	beq.n	80054d2 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	f012 0f01 	tst.w	r2, #1
 80054d0:	d136      	bne.n	8005540 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	691a      	ldr	r2, [r3, #16]
 80054d6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80054da:	d003      	beq.n	80054e4 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	f012 0f80 	tst.w	r2, #128	; 0x80
 80054e2:	d134      	bne.n	800554e <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80054ec:	d003      	beq.n	80054f6 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80054f4:	d132      	bne.n	800555c <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054f6:	6823      	ldr	r3, [r4, #0]
 80054f8:	691a      	ldr	r2, [r3, #16]
 80054fa:	f012 0f20 	tst.w	r2, #32
 80054fe:	d003      	beq.n	8005508 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	f012 0f20 	tst.w	r2, #32
 8005506:	d130      	bne.n	800556a <HAL_TIM_IRQHandler+0x16c>
}
 8005508:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800550a:	f7ff ff74 	bl	80053f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800550e:	4620      	mov	r0, r4
 8005510:	f7ff ff73 	bl	80053fa <HAL_TIM_PWM_PulseFinishedCallback>
 8005514:	e78a      	b.n	800542c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005516:	4620      	mov	r0, r4
 8005518:	f7ff ff6d 	bl	80053f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	4620      	mov	r0, r4
 800551e:	f7ff ff6c 	bl	80053fa <HAL_TIM_PWM_PulseFinishedCallback>
 8005522:	e79b      	b.n	800545c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005524:	4620      	mov	r0, r4
 8005526:	f7ff ff66 	bl	80053f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800552a:	4620      	mov	r0, r4
 800552c:	f7ff ff65 	bl	80053fa <HAL_TIM_PWM_PulseFinishedCallback>
 8005530:	e7ac      	b.n	800548c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005532:	4620      	mov	r0, r4
 8005534:	f7ff ff5f 	bl	80053f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005538:	4620      	mov	r0, r4
 800553a:	f7ff ff5e 	bl	80053fa <HAL_TIM_PWM_PulseFinishedCallback>
 800553e:	e7bd      	b.n	80054bc <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005540:	f06f 0201 	mvn.w	r2, #1
 8005544:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005546:	4620      	mov	r0, r4
 8005548:	f002 fce6 	bl	8007f18 <HAL_TIM_PeriodElapsedCallback>
 800554c:	e7c1      	b.n	80054d2 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800554e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005552:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005554:	4620      	mov	r0, r4
 8005556:	f000 f983 	bl	8005860 <HAL_TIMEx_BreakCallback>
 800555a:	e7c3      	b.n	80054e4 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800555c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005560:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005562:	4620      	mov	r0, r4
 8005564:	f7ff ff4a 	bl	80053fc <HAL_TIM_TriggerCallback>
 8005568:	e7c5      	b.n	80054f6 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800556a:	f06f 0220 	mvn.w	r2, #32
 800556e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005570:	4620      	mov	r0, r4
 8005572:	f000 f974 	bl	800585e <HAL_TIMEx_CommutCallback>
}
 8005576:	e7c7      	b.n	8005508 <HAL_TIM_IRQHandler+0x10a>

08005578 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005578:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800557a:	4a25      	ldr	r2, [pc, #148]	; (8005610 <TIM_Base_SetConfig+0x98>)
 800557c:	4290      	cmp	r0, r2
 800557e:	d00e      	beq.n	800559e <TIM_Base_SetConfig+0x26>
 8005580:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005584:	d00b      	beq.n	800559e <TIM_Base_SetConfig+0x26>
 8005586:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800558a:	4290      	cmp	r0, r2
 800558c:	d007      	beq.n	800559e <TIM_Base_SetConfig+0x26>
 800558e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005592:	4290      	cmp	r0, r2
 8005594:	d003      	beq.n	800559e <TIM_Base_SetConfig+0x26>
 8005596:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800559a:	4290      	cmp	r0, r2
 800559c:	d103      	bne.n	80055a6 <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800559e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80055a2:	684a      	ldr	r2, [r1, #4]
 80055a4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055a6:	4a1a      	ldr	r2, [pc, #104]	; (8005610 <TIM_Base_SetConfig+0x98>)
 80055a8:	4290      	cmp	r0, r2
 80055aa:	d01a      	beq.n	80055e2 <TIM_Base_SetConfig+0x6a>
 80055ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80055b0:	d017      	beq.n	80055e2 <TIM_Base_SetConfig+0x6a>
 80055b2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80055b6:	4290      	cmp	r0, r2
 80055b8:	d013      	beq.n	80055e2 <TIM_Base_SetConfig+0x6a>
 80055ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055be:	4290      	cmp	r0, r2
 80055c0:	d00f      	beq.n	80055e2 <TIM_Base_SetConfig+0x6a>
 80055c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055c6:	4290      	cmp	r0, r2
 80055c8:	d00b      	beq.n	80055e2 <TIM_Base_SetConfig+0x6a>
 80055ca:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80055ce:	4290      	cmp	r0, r2
 80055d0:	d007      	beq.n	80055e2 <TIM_Base_SetConfig+0x6a>
 80055d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055d6:	4290      	cmp	r0, r2
 80055d8:	d003      	beq.n	80055e2 <TIM_Base_SetConfig+0x6a>
 80055da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055de:	4290      	cmp	r0, r2
 80055e0:	d103      	bne.n	80055ea <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 80055e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055e6:	68ca      	ldr	r2, [r1, #12]
 80055e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ee:	694a      	ldr	r2, [r1, #20]
 80055f0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80055f2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f4:	688b      	ldr	r3, [r1, #8]
 80055f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80055f8:	680b      	ldr	r3, [r1, #0]
 80055fa:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055fc:	4b04      	ldr	r3, [pc, #16]	; (8005610 <TIM_Base_SetConfig+0x98>)
 80055fe:	4298      	cmp	r0, r3
 8005600:	d002      	beq.n	8005608 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8005602:	2301      	movs	r3, #1
 8005604:	6143      	str	r3, [r0, #20]
}
 8005606:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8005608:	690b      	ldr	r3, [r1, #16]
 800560a:	6303      	str	r3, [r0, #48]	; 0x30
 800560c:	e7f9      	b.n	8005602 <TIM_Base_SetConfig+0x8a>
 800560e:	bf00      	nop
 8005610:	40010000 	.word	0x40010000

08005614 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8005614:	b1a8      	cbz	r0, 8005642 <HAL_TIM_Base_Init+0x2e>
{
 8005616:	b510      	push	{r4, lr}
 8005618:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800561a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800561e:	b15b      	cbz	r3, 8005638 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	2302      	movs	r3, #2
 8005622:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005626:	1d21      	adds	r1, r4, #4
 8005628:	6820      	ldr	r0, [r4, #0]
 800562a:	f7ff ffa5 	bl	8005578 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800562e:	2301      	movs	r3, #1
 8005630:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005634:	2000      	movs	r0, #0
}
 8005636:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005638:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800563c:	f002 fe2e 	bl	800829c <HAL_TIM_Base_MspInit>
 8005640:	e7ee      	b.n	8005620 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8005642:	2001      	movs	r0, #1
}
 8005644:	4770      	bx	lr

08005646 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005646:	b1a8      	cbz	r0, 8005674 <HAL_TIM_PWM_Init+0x2e>
{
 8005648:	b510      	push	{r4, lr}
 800564a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800564c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005650:	b15b      	cbz	r3, 800566a <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8005652:	2302      	movs	r3, #2
 8005654:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005658:	1d21      	adds	r1, r4, #4
 800565a:	6820      	ldr	r0, [r4, #0]
 800565c:	f7ff ff8c 	bl	8005578 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005660:	2301      	movs	r3, #1
 8005662:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005666:	2000      	movs	r0, #0
}
 8005668:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800566a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800566e:	f002 fdfd 	bl	800826c <HAL_TIM_PWM_MspInit>
 8005672:	e7ee      	b.n	8005652 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8005674:	2001      	movs	r0, #1
}
 8005676:	4770      	bx	lr

08005678 <TIM_OC2_SetConfig>:
{
 8005678:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800567a:	6a03      	ldr	r3, [r0, #32]
 800567c:	f023 0310 	bic.w	r3, r3, #16
 8005680:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005682:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005684:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005686:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005688:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800568c:	680d      	ldr	r5, [r1, #0]
 800568e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8005692:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005696:	688d      	ldr	r5, [r1, #8]
 8005698:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800569c:	4d0e      	ldr	r5, [pc, #56]	; (80056d8 <TIM_OC2_SetConfig+0x60>)
 800569e:	42a8      	cmp	r0, r5
 80056a0:	d009      	beq.n	80056b6 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a2:	4d0d      	ldr	r5, [pc, #52]	; (80056d8 <TIM_OC2_SetConfig+0x60>)
 80056a4:	42a8      	cmp	r0, r5
 80056a6:	d00e      	beq.n	80056c6 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 80056a8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80056aa:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80056ac:	684a      	ldr	r2, [r1, #4]
 80056ae:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80056b0:	6203      	str	r3, [r0, #32]
}
 80056b2:	bc30      	pop	{r4, r5}
 80056b4:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80056b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056ba:	68cd      	ldr	r5, [r1, #12]
 80056bc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80056c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056c4:	e7ed      	b.n	80056a2 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056c6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056ca:	694d      	ldr	r5, [r1, #20]
 80056cc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056d0:	698d      	ldr	r5, [r1, #24]
 80056d2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80056d6:	e7e7      	b.n	80056a8 <TIM_OC2_SetConfig+0x30>
 80056d8:	40010000 	.word	0x40010000

080056dc <HAL_TIM_PWM_ConfigChannel>:
{
 80056dc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80056de:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d066      	beq.n	80057b4 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80056e6:	460d      	mov	r5, r1
 80056e8:	4604      	mov	r4, r0
 80056ea:	2301      	movs	r3, #1
 80056ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	2302      	movs	r3, #2
 80056f2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80056f6:	2a0c      	cmp	r2, #12
 80056f8:	d81a      	bhi.n	8005730 <HAL_TIM_PWM_ConfigChannel+0x54>
 80056fa:	e8df f002 	tbb	[pc, r2]
 80056fe:	1907      	.short	0x1907
 8005700:	19201919 	.word	0x19201919
 8005704:	19341919 	.word	0x19341919
 8005708:	1919      	.short	0x1919
 800570a:	47          	.byte	0x47
 800570b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800570c:	6800      	ldr	r0, [r0, #0]
 800570e:	f7ff fdcb 	bl	80052a8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005712:	6822      	ldr	r2, [r4, #0]
 8005714:	6993      	ldr	r3, [r2, #24]
 8005716:	f043 0308 	orr.w	r3, r3, #8
 800571a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800571c:	6822      	ldr	r2, [r4, #0]
 800571e:	6993      	ldr	r3, [r2, #24]
 8005720:	f023 0304 	bic.w	r3, r3, #4
 8005724:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005726:	6822      	ldr	r2, [r4, #0]
 8005728:	6993      	ldr	r3, [r2, #24]
 800572a:	6929      	ldr	r1, [r5, #16]
 800572c:	430b      	orrs	r3, r1
 800572e:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8005730:	2301      	movs	r3, #1
 8005732:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005736:	2000      	movs	r0, #0
 8005738:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800573c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800573e:	6800      	ldr	r0, [r0, #0]
 8005740:	f7ff ff9a 	bl	8005678 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005744:	6822      	ldr	r2, [r4, #0]
 8005746:	6993      	ldr	r3, [r2, #24]
 8005748:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800574c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800574e:	6822      	ldr	r2, [r4, #0]
 8005750:	6993      	ldr	r3, [r2, #24]
 8005752:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005756:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005758:	6822      	ldr	r2, [r4, #0]
 800575a:	6993      	ldr	r3, [r2, #24]
 800575c:	6929      	ldr	r1, [r5, #16]
 800575e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005762:	6193      	str	r3, [r2, #24]
      break;
 8005764:	e7e4      	b.n	8005730 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005766:	6800      	ldr	r0, [r0, #0]
 8005768:	f7ff fdcc 	bl	8005304 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800576c:	6822      	ldr	r2, [r4, #0]
 800576e:	69d3      	ldr	r3, [r2, #28]
 8005770:	f043 0308 	orr.w	r3, r3, #8
 8005774:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005776:	6822      	ldr	r2, [r4, #0]
 8005778:	69d3      	ldr	r3, [r2, #28]
 800577a:	f023 0304 	bic.w	r3, r3, #4
 800577e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005780:	6822      	ldr	r2, [r4, #0]
 8005782:	69d3      	ldr	r3, [r2, #28]
 8005784:	6929      	ldr	r1, [r5, #16]
 8005786:	430b      	orrs	r3, r1
 8005788:	61d3      	str	r3, [r2, #28]
      break;
 800578a:	e7d1      	b.n	8005730 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800578c:	6800      	ldr	r0, [r0, #0]
 800578e:	f7ff fdeb 	bl	8005368 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005792:	6822      	ldr	r2, [r4, #0]
 8005794:	69d3      	ldr	r3, [r2, #28]
 8005796:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800579a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800579c:	6822      	ldr	r2, [r4, #0]
 800579e:	69d3      	ldr	r3, [r2, #28]
 80057a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057a4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057a6:	6822      	ldr	r2, [r4, #0]
 80057a8:	69d3      	ldr	r3, [r2, #28]
 80057aa:	6929      	ldr	r1, [r5, #16]
 80057ac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80057b0:	61d3      	str	r3, [r2, #28]
      break;
 80057b2:	e7bd      	b.n	8005730 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 80057b4:	2002      	movs	r0, #2
 80057b6:	e7c1      	b.n	800573c <HAL_TIM_PWM_ConfigChannel+0x60>

080057b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057b8:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057ba:	f001 011f 	and.w	r1, r1, #31
 80057be:	2301      	movs	r3, #1
 80057c0:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057c4:	6a03      	ldr	r3, [r0, #32]
 80057c6:	ea23 0304 	bic.w	r3, r3, r4
 80057ca:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057cc:	6a03      	ldr	r3, [r0, #32]
 80057ce:	408a      	lsls	r2, r1
 80057d0:	4313      	orrs	r3, r2
 80057d2:	6203      	str	r3, [r0, #32]
}
 80057d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <HAL_TIM_PWM_Start>:
{
 80057dc:	b510      	push	{r4, lr}
 80057de:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057e0:	2201      	movs	r2, #1
 80057e2:	6800      	ldr	r0, [r0, #0]
 80057e4:	f7ff ffe8 	bl	80057b8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	4a0a      	ldr	r2, [pc, #40]	; (8005814 <HAL_TIM_PWM_Start+0x38>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00b      	beq.n	8005808 <HAL_TIM_PWM_Start+0x2c>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057f0:	6822      	ldr	r2, [r4, #0]
 80057f2:	6893      	ldr	r3, [r2, #8]
 80057f4:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f8:	2b06      	cmp	r3, #6
 80057fa:	d003      	beq.n	8005804 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_ENABLE(htim);
 80057fc:	6813      	ldr	r3, [r2, #0]
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	6013      	str	r3, [r2, #0]
}
 8005804:	2000      	movs	r0, #0
 8005806:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8005808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800580a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800580e:	645a      	str	r2, [r3, #68]	; 0x44
 8005810:	e7ee      	b.n	80057f0 <HAL_TIM_PWM_Start+0x14>
 8005812:	bf00      	nop
 8005814:	40010000 	.word	0x40010000

08005818 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005818:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800581c:	2b01      	cmp	r3, #1
 800581e:	d01c      	beq.n	800585a <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8005820:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8005822:	2601      	movs	r6, #1
 8005824:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005828:	2302      	movs	r3, #2
 800582a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800582e:	6802      	ldr	r2, [r0, #0]
 8005830:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005832:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005834:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005838:	680c      	ldr	r4, [r1, #0]
 800583a:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800583c:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005840:	684b      	ldr	r3, [r1, #4]
 8005842:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005844:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005846:	6802      	ldr	r2, [r0, #0]
 8005848:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800584a:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800584e:	2300      	movs	r3, #0
 8005850:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005854:	4618      	mov	r0, r3
}
 8005856:	bc70      	pop	{r4, r5, r6}
 8005858:	4770      	bx	lr
  __HAL_LOCK(htim);
 800585a:	2002      	movs	r0, #2
}
 800585c:	4770      	bx	lr

0800585e <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800585e:	4770      	bx	lr

08005860 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005860:	4770      	bx	lr

08005862 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005862:	6802      	ldr	r2, [r0, #0]
 8005864:	68d3      	ldr	r3, [r2, #12]
 8005866:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800586a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586c:	6802      	ldr	r2, [r0, #0]
 800586e:	6953      	ldr	r3, [r2, #20]
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005876:	2320      	movs	r3, #32
 8005878:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 800587c:	4770      	bx	lr

0800587e <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800587e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b21      	cmp	r3, #33	; 0x21
 8005886:	d12a      	bne.n	80058de <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005888:	6883      	ldr	r3, [r0, #8]
 800588a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588e:	d016      	beq.n	80058be <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005890:	6a03      	ldr	r3, [r0, #32]
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	6202      	str	r2, [r0, #32]
 8005896:	781a      	ldrb	r2, [r3, #0]
 8005898:	6803      	ldr	r3, [r0, #0]
 800589a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800589c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800589e:	3b01      	subs	r3, #1
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	84c3      	strh	r3, [r0, #38]	; 0x26
 80058a4:	b9eb      	cbnz	r3, 80058e2 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058a6:	6802      	ldr	r2, [r0, #0]
 80058a8:	68d3      	ldr	r3, [r2, #12]
 80058aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058ae:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058b0:	6802      	ldr	r2, [r0, #0]
 80058b2:	68d3      	ldr	r3, [r2, #12]
 80058b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b8:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 80058ba:	2000      	movs	r0, #0
 80058bc:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80058be:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058c0:	881b      	ldrh	r3, [r3, #0]
 80058c2:	6802      	ldr	r2, [r0, #0]
 80058c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c8:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80058ca:	6903      	ldr	r3, [r0, #16]
 80058cc:	b91b      	cbnz	r3, 80058d6 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 80058ce:	6a03      	ldr	r3, [r0, #32]
 80058d0:	3302      	adds	r3, #2
 80058d2:	6203      	str	r3, [r0, #32]
 80058d4:	e7e2      	b.n	800589c <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 80058d6:	6a03      	ldr	r3, [r0, #32]
 80058d8:	3301      	adds	r3, #1
 80058da:	6203      	str	r3, [r0, #32]
 80058dc:	e7de      	b.n	800589c <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 80058de:	2002      	movs	r0, #2
 80058e0:	4770      	bx	lr
    return HAL_OK;
 80058e2:	2000      	movs	r0, #0
  }
}
 80058e4:	4770      	bx	lr
	...

080058e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058ec:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058ee:	6802      	ldr	r2, [r0, #0]
 80058f0:	6913      	ldr	r3, [r2, #16]
 80058f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80058f6:	68c1      	ldr	r1, [r0, #12]
 80058f8:	430b      	orrs	r3, r1
 80058fa:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058fc:	6883      	ldr	r3, [r0, #8]
 80058fe:	6902      	ldr	r2, [r0, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	6942      	ldr	r2, [r0, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	69c2      	ldr	r2, [r0, #28]
 8005908:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800590a:	6801      	ldr	r1, [r0, #0]
 800590c:	68cb      	ldr	r3, [r1, #12]
 800590e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005912:	f023 030c 	bic.w	r3, r3, #12
 8005916:	4313      	orrs	r3, r2
 8005918:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800591a:	6802      	ldr	r2, [r0, #0]
 800591c:	6953      	ldr	r3, [r2, #20]
 800591e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005922:	6981      	ldr	r1, [r0, #24]
 8005924:	430b      	orrs	r3, r1
 8005926:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005928:	69c3      	ldr	r3, [r0, #28]
 800592a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800592e:	d060      	beq.n	80059f2 <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005930:	6803      	ldr	r3, [r0, #0]
 8005932:	4ab8      	ldr	r2, [pc, #736]	; (8005c14 <UART_SetConfig+0x32c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	f000 8114 	beq.w	8005b62 <UART_SetConfig+0x27a>
 800593a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800593e:	4293      	cmp	r3, r2
 8005940:	f000 810f 	beq.w	8005b62 <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005944:	f7ff f83c 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
 8005948:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800594c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005950:	6865      	ldr	r5, [r4, #4]
 8005952:	00ad      	lsls	r5, r5, #2
 8005954:	fbb0 f5f5 	udiv	r5, r0, r5
 8005958:	4faf      	ldr	r7, [pc, #700]	; (8005c18 <UART_SetConfig+0x330>)
 800595a:	fba7 3505 	umull	r3, r5, r7, r5
 800595e:	096d      	lsrs	r5, r5, #5
 8005960:	012e      	lsls	r6, r5, #4
 8005962:	f7ff f82d 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
 8005966:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800596a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800596e:	6865      	ldr	r5, [r4, #4]
 8005970:	00ad      	lsls	r5, r5, #2
 8005972:	fbb0 f9f5 	udiv	r9, r0, r5
 8005976:	f7ff f823 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
 800597a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800597e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005982:	6865      	ldr	r5, [r4, #4]
 8005984:	00ad      	lsls	r5, r5, #2
 8005986:	fbb0 f5f5 	udiv	r5, r0, r5
 800598a:	fba7 3505 	umull	r3, r5, r7, r5
 800598e:	096d      	lsrs	r5, r5, #5
 8005990:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005994:	fb08 9515 	mls	r5, r8, r5, r9
 8005998:	012d      	lsls	r5, r5, #4
 800599a:	3532      	adds	r5, #50	; 0x32
 800599c:	fba7 3505 	umull	r3, r5, r7, r5
 80059a0:	096d      	lsrs	r5, r5, #5
 80059a2:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80059a6:	4435      	add	r5, r6
 80059a8:	f7ff f80a 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
 80059ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80059b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80059b4:	6866      	ldr	r6, [r4, #4]
 80059b6:	00b6      	lsls	r6, r6, #2
 80059b8:	fbb0 f6f6 	udiv	r6, r0, r6
 80059bc:	f7ff f800 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
 80059c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80059c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80059c8:	6863      	ldr	r3, [r4, #4]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80059d0:	fba7 3000 	umull	r3, r0, r7, r0
 80059d4:	0940      	lsrs	r0, r0, #5
 80059d6:	fb08 6810 	mls	r8, r8, r0, r6
 80059da:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80059de:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80059e2:	fba7 3708 	umull	r3, r7, r7, r8
 80059e6:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	442f      	add	r7, r5
 80059ee:	609f      	str	r7, [r3, #8]
    }
  }
}
 80059f0:	e10d      	b.n	8005c0e <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059f2:	6803      	ldr	r3, [r0, #0]
 80059f4:	4a87      	ldr	r2, [pc, #540]	; (8005c14 <UART_SetConfig+0x32c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d05b      	beq.n	8005ab2 <UART_SetConfig+0x1ca>
 80059fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d057      	beq.n	8005ab2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005a02:	f7fe ffdd 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
 8005a06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a0e:	6865      	ldr	r5, [r4, #4]
 8005a10:	006d      	lsls	r5, r5, #1
 8005a12:	fbb0 f5f5 	udiv	r5, r0, r5
 8005a16:	4f80      	ldr	r7, [pc, #512]	; (8005c18 <UART_SetConfig+0x330>)
 8005a18:	fba7 3505 	umull	r3, r5, r7, r5
 8005a1c:	096d      	lsrs	r5, r5, #5
 8005a1e:	012e      	lsls	r6, r5, #4
 8005a20:	f7fe ffce 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
 8005a24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a2c:	6865      	ldr	r5, [r4, #4]
 8005a2e:	006d      	lsls	r5, r5, #1
 8005a30:	fbb0 f9f5 	udiv	r9, r0, r5
 8005a34:	f7fe ffc4 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
 8005a38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a40:	6865      	ldr	r5, [r4, #4]
 8005a42:	006d      	lsls	r5, r5, #1
 8005a44:	fbb0 f5f5 	udiv	r5, r0, r5
 8005a48:	fba7 3505 	umull	r3, r5, r7, r5
 8005a4c:	096d      	lsrs	r5, r5, #5
 8005a4e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005a52:	fb08 9515 	mls	r5, r8, r5, r9
 8005a56:	00ed      	lsls	r5, r5, #3
 8005a58:	3532      	adds	r5, #50	; 0x32
 8005a5a:	fba7 3505 	umull	r3, r5, r7, r5
 8005a5e:	096d      	lsrs	r5, r5, #5
 8005a60:	006d      	lsls	r5, r5, #1
 8005a62:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8005a66:	4435      	add	r5, r6
 8005a68:	f7fe ffaa 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
 8005a6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a74:	6866      	ldr	r6, [r4, #4]
 8005a76:	0076      	lsls	r6, r6, #1
 8005a78:	fbb0 f6f6 	udiv	r6, r0, r6
 8005a7c:	f7fe ffa0 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
 8005a80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a88:	6863      	ldr	r3, [r4, #4]
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a90:	fba7 2303 	umull	r2, r3, r7, r3
 8005a94:	095b      	lsrs	r3, r3, #5
 8005a96:	fb08 6813 	mls	r8, r8, r3, r6
 8005a9a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8005a9e:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005aa2:	fba7 3708 	umull	r3, r7, r7, r8
 8005aa6:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	442f      	add	r7, r5
 8005aae:	609f      	str	r7, [r3, #8]
 8005ab0:	e0ad      	b.n	8005c0e <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005ab2:	f7fe ff95 	bl	80049e0 <HAL_RCC_GetPCLK2Freq>
 8005ab6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005aba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005abe:	6865      	ldr	r5, [r4, #4]
 8005ac0:	006d      	lsls	r5, r5, #1
 8005ac2:	fbb0 f5f5 	udiv	r5, r0, r5
 8005ac6:	4f54      	ldr	r7, [pc, #336]	; (8005c18 <UART_SetConfig+0x330>)
 8005ac8:	fba7 3505 	umull	r3, r5, r7, r5
 8005acc:	096d      	lsrs	r5, r5, #5
 8005ace:	012e      	lsls	r6, r5, #4
 8005ad0:	f7fe ff86 	bl	80049e0 <HAL_RCC_GetPCLK2Freq>
 8005ad4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ad8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005adc:	6865      	ldr	r5, [r4, #4]
 8005ade:	006d      	lsls	r5, r5, #1
 8005ae0:	fbb0 f9f5 	udiv	r9, r0, r5
 8005ae4:	f7fe ff7c 	bl	80049e0 <HAL_RCC_GetPCLK2Freq>
 8005ae8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005aec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005af0:	6865      	ldr	r5, [r4, #4]
 8005af2:	006d      	lsls	r5, r5, #1
 8005af4:	fbb0 f5f5 	udiv	r5, r0, r5
 8005af8:	fba7 3505 	umull	r3, r5, r7, r5
 8005afc:	096d      	lsrs	r5, r5, #5
 8005afe:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005b02:	fb08 9515 	mls	r5, r8, r5, r9
 8005b06:	00ed      	lsls	r5, r5, #3
 8005b08:	3532      	adds	r5, #50	; 0x32
 8005b0a:	fba7 3505 	umull	r3, r5, r7, r5
 8005b0e:	096d      	lsrs	r5, r5, #5
 8005b10:	006d      	lsls	r5, r5, #1
 8005b12:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8005b16:	4435      	add	r5, r6
 8005b18:	f7fe ff62 	bl	80049e0 <HAL_RCC_GetPCLK2Freq>
 8005b1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b24:	6866      	ldr	r6, [r4, #4]
 8005b26:	0076      	lsls	r6, r6, #1
 8005b28:	fbb0 f6f6 	udiv	r6, r0, r6
 8005b2c:	f7fe ff58 	bl	80049e0 <HAL_RCC_GetPCLK2Freq>
 8005b30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b38:	6863      	ldr	r3, [r4, #4]
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b40:	fba7 2303 	umull	r2, r3, r7, r3
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	fb08 6813 	mls	r8, r8, r3, r6
 8005b4a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8005b4e:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005b52:	fba7 3708 	umull	r3, r7, r7, r8
 8005b56:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	442f      	add	r7, r5
 8005b5e:	609f      	str	r7, [r3, #8]
 8005b60:	e055      	b.n	8005c0e <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005b62:	f7fe ff3d 	bl	80049e0 <HAL_RCC_GetPCLK2Freq>
 8005b66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b6e:	6865      	ldr	r5, [r4, #4]
 8005b70:	00ad      	lsls	r5, r5, #2
 8005b72:	fbb0 f5f5 	udiv	r5, r0, r5
 8005b76:	4f28      	ldr	r7, [pc, #160]	; (8005c18 <UART_SetConfig+0x330>)
 8005b78:	fba7 3505 	umull	r3, r5, r7, r5
 8005b7c:	096d      	lsrs	r5, r5, #5
 8005b7e:	012e      	lsls	r6, r5, #4
 8005b80:	f7fe ff2e 	bl	80049e0 <HAL_RCC_GetPCLK2Freq>
 8005b84:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b8c:	6865      	ldr	r5, [r4, #4]
 8005b8e:	00ad      	lsls	r5, r5, #2
 8005b90:	fbb0 f9f5 	udiv	r9, r0, r5
 8005b94:	f7fe ff24 	bl	80049e0 <HAL_RCC_GetPCLK2Freq>
 8005b98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ba0:	6865      	ldr	r5, [r4, #4]
 8005ba2:	00ad      	lsls	r5, r5, #2
 8005ba4:	fbb0 f5f5 	udiv	r5, r0, r5
 8005ba8:	fba7 3505 	umull	r3, r5, r7, r5
 8005bac:	096d      	lsrs	r5, r5, #5
 8005bae:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005bb2:	fb08 9515 	mls	r5, r8, r5, r9
 8005bb6:	012d      	lsls	r5, r5, #4
 8005bb8:	3532      	adds	r5, #50	; 0x32
 8005bba:	fba7 3505 	umull	r3, r5, r7, r5
 8005bbe:	096d      	lsrs	r5, r5, #5
 8005bc0:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8005bc4:	4435      	add	r5, r6
 8005bc6:	f7fe ff0b 	bl	80049e0 <HAL_RCC_GetPCLK2Freq>
 8005bca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bd2:	6866      	ldr	r6, [r4, #4]
 8005bd4:	00b6      	lsls	r6, r6, #2
 8005bd6:	fbb0 f6f6 	udiv	r6, r0, r6
 8005bda:	f7fe ff01 	bl	80049e0 <HAL_RCC_GetPCLK2Freq>
 8005bde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005be2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005be6:	6863      	ldr	r3, [r4, #4]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	fbb0 f0f3 	udiv	r0, r0, r3
 8005bee:	fba7 3000 	umull	r3, r0, r7, r0
 8005bf2:	0940      	lsrs	r0, r0, #5
 8005bf4:	fb08 6810 	mls	r8, r8, r0, r6
 8005bf8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8005bfc:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005c00:	fba7 3708 	umull	r3, r7, r7, r8
 8005c04:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	442f      	add	r7, r5
 8005c0c:	609f      	str	r7, [r3, #8]
}
 8005c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c12:	bf00      	nop
 8005c14:	40011000 	.word	0x40011000
 8005c18:	51eb851f 	.word	0x51eb851f

08005c1c <UART_WaitOnFlagUntilTimeout>:
{
 8005c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c20:	4605      	mov	r5, r0
 8005c22:	460f      	mov	r7, r1
 8005c24:	4616      	mov	r6, r2
 8005c26:	4698      	mov	r8, r3
 8005c28:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c2a:	682b      	ldr	r3, [r5, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	ea37 0303 	bics.w	r3, r7, r3
 8005c32:	bf0c      	ite	eq
 8005c34:	2301      	moveq	r3, #1
 8005c36:	2300      	movne	r3, #0
 8005c38:	42b3      	cmp	r3, r6
 8005c3a:	d11d      	bne.n	8005c78 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8005c3c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8005c40:	d0f3      	beq.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c42:	b12c      	cbz	r4, 8005c50 <UART_WaitOnFlagUntilTimeout+0x34>
 8005c44:	f7fd f9b0 	bl	8002fa8 <HAL_GetTick>
 8005c48:	eba0 0008 	sub.w	r0, r0, r8
 8005c4c:	42a0      	cmp	r0, r4
 8005c4e:	d9ec      	bls.n	8005c2a <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c50:	682a      	ldr	r2, [r5, #0]
 8005c52:	68d3      	ldr	r3, [r2, #12]
 8005c54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c58:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5a:	682a      	ldr	r2, [r5, #0]
 8005c5c:	6953      	ldr	r3, [r2, #20]
 8005c5e:	f023 0301 	bic.w	r3, r3, #1
 8005c62:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8005c64:	2320      	movs	r3, #32
 8005c66:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005c6a:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8005c74:	2003      	movs	r0, #3
 8005c76:	e000      	b.n	8005c7a <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8005c78:	2000      	movs	r0, #0
}
 8005c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005c7e <HAL_UART_Init>:
  if (huart == NULL)
 8005c7e:	b358      	cbz	r0, 8005cd8 <HAL_UART_Init+0x5a>
{
 8005c80:	b510      	push	{r4, lr}
 8005c82:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005c84:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005c88:	b30b      	cbz	r3, 8005cce <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005c8a:	2324      	movs	r3, #36	; 0x24
 8005c8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005c90:	6822      	ldr	r2, [r4, #0]
 8005c92:	68d3      	ldr	r3, [r2, #12]
 8005c94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c98:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f7ff fe24 	bl	80058e8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ca0:	6822      	ldr	r2, [r4, #0]
 8005ca2:	6913      	ldr	r3, [r2, #16]
 8005ca4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005ca8:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005caa:	6822      	ldr	r2, [r4, #0]
 8005cac:	6953      	ldr	r3, [r2, #20]
 8005cae:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005cb2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8005cb4:	6822      	ldr	r2, [r4, #0]
 8005cb6:	68d3      	ldr	r3, [r2, #12]
 8005cb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005cbc:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005cc2:	2320      	movs	r3, #32
 8005cc4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005cc8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8005ccc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005cce:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8005cd2:	f002 fb9f 	bl	8008414 <HAL_UART_MspInit>
 8005cd6:	e7d8      	b.n	8005c8a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8005cd8:	2001      	movs	r0, #1
}
 8005cda:	4770      	bx	lr

08005cdc <HAL_UART_Transmit>:
{
 8005cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce0:	b082      	sub	sp, #8
 8005ce2:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005ce4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b20      	cmp	r3, #32
 8005cec:	d155      	bne.n	8005d9a <HAL_UART_Transmit+0xbe>
 8005cee:	4604      	mov	r4, r0
 8005cf0:	460d      	mov	r5, r1
 8005cf2:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8005cf4:	2900      	cmp	r1, #0
 8005cf6:	d055      	beq.n	8005da4 <HAL_UART_Transmit+0xc8>
 8005cf8:	2a00      	cmp	r2, #0
 8005cfa:	d055      	beq.n	8005da8 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8005cfc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d053      	beq.n	8005dac <HAL_UART_Transmit+0xd0>
 8005d04:	2301      	movs	r3, #1
 8005d06:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d0e:	2321      	movs	r3, #33	; 0x21
 8005d10:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8005d14:	f7fd f948 	bl	8002fa8 <HAL_GetTick>
 8005d18:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8005d1a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d1e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d22:	e010      	b.n	8005d46 <HAL_UART_Transmit+0x6a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d24:	9600      	str	r6, [sp, #0]
 8005d26:	463b      	mov	r3, r7
 8005d28:	2200      	movs	r2, #0
 8005d2a:	2180      	movs	r1, #128	; 0x80
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f7ff ff75 	bl	8005c1c <UART_WaitOnFlagUntilTimeout>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	d13c      	bne.n	8005db0 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005d36:	882b      	ldrh	r3, [r5, #0]
 8005d38:	6822      	ldr	r2, [r4, #0]
 8005d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d3e:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005d40:	6923      	ldr	r3, [r4, #16]
 8005d42:	b9c3      	cbnz	r3, 8005d76 <HAL_UART_Transmit+0x9a>
          pData += 2U;
 8005d44:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8005d46:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	b1b3      	cbz	r3, 8005d7a <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 8005d4c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005d54:	68a3      	ldr	r3, [r4, #8]
 8005d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5a:	d0e3      	beq.n	8005d24 <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d5c:	9600      	str	r6, [sp, #0]
 8005d5e:	463b      	mov	r3, r7
 8005d60:	2200      	movs	r2, #0
 8005d62:	2180      	movs	r1, #128	; 0x80
 8005d64:	4620      	mov	r0, r4
 8005d66:	f7ff ff59 	bl	8005c1c <UART_WaitOnFlagUntilTimeout>
 8005d6a:	bb18      	cbnz	r0, 8005db4 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005d6c:	782a      	ldrb	r2, [r5, #0]
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	605a      	str	r2, [r3, #4]
 8005d72:	3501      	adds	r5, #1
 8005d74:	e7e7      	b.n	8005d46 <HAL_UART_Transmit+0x6a>
          pData += 1U;
 8005d76:	3501      	adds	r5, #1
 8005d78:	e7e5      	b.n	8005d46 <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d7a:	9600      	str	r6, [sp, #0]
 8005d7c:	463b      	mov	r3, r7
 8005d7e:	2200      	movs	r2, #0
 8005d80:	2140      	movs	r1, #64	; 0x40
 8005d82:	4620      	mov	r0, r4
 8005d84:	f7ff ff4a 	bl	8005c1c <UART_WaitOnFlagUntilTimeout>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	b9a8      	cbnz	r0, 8005db8 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8005d92:	2200      	movs	r2, #0
 8005d94:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8005d98:	e000      	b.n	8005d9c <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8005d9a:	2302      	movs	r3, #2
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	b002      	add	sp, #8
 8005da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e7f9      	b.n	8005d9c <HAL_UART_Transmit+0xc0>
 8005da8:	2301      	movs	r3, #1
 8005daa:	e7f7      	b.n	8005d9c <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8005dac:	2302      	movs	r3, #2
 8005dae:	e7f5      	b.n	8005d9c <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e7f3      	b.n	8005d9c <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e7f1      	b.n	8005d9c <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e7ef      	b.n	8005d9c <HAL_UART_Transmit+0xc0>

08005dbc <HAL_UART_TxCpltCallback>:
}
 8005dbc:	4770      	bx	lr

08005dbe <UART_EndTransmit_IT>:
{
 8005dbe:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dc0:	6801      	ldr	r1, [r0, #0]
 8005dc2:	68cb      	ldr	r3, [r1, #12]
 8005dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dc8:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005dca:	2320      	movs	r3, #32
 8005dcc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8005dd0:	f7ff fff4 	bl	8005dbc <HAL_UART_TxCpltCallback>
}
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	bd08      	pop	{r3, pc}

08005dd8 <HAL_UART_RxCpltCallback>:
}
 8005dd8:	4770      	bx	lr

08005dda <UART_Receive_IT>:
{
 8005dda:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ddc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b22      	cmp	r3, #34	; 0x22
 8005de4:	d145      	bne.n	8005e72 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005de6:	6883      	ldr	r3, [r0, #8]
 8005de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dec:	d00e      	beq.n	8005e0c <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005dee:	6903      	ldr	r3, [r0, #16]
 8005df0:	bb03      	cbnz	r3, 8005e34 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005df2:	6803      	ldr	r3, [r0, #0]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005df8:	1c59      	adds	r1, r3, #1
 8005dfa:	6281      	str	r1, [r0, #40]	; 0x28
 8005dfc:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8005dfe:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8005e00:	3b01      	subs	r3, #1
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8005e06:	b1f3      	cbz	r3, 8005e46 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8005e08:	2000      	movs	r0, #0
 8005e0a:	e033      	b.n	8005e74 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005e0c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005e0e:	6903      	ldr	r3, [r0, #16]
 8005e10:	b943      	cbnz	r3, 8005e24 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e12:	6803      	ldr	r3, [r0, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e1a:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8005e1c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e1e:	3302      	adds	r3, #2
 8005e20:	6283      	str	r3, [r0, #40]	; 0x28
 8005e22:	e7ec      	b.n	8005dfe <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005e24:	6803      	ldr	r3, [r0, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8005e2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e2e:	3301      	adds	r3, #1
 8005e30:	6283      	str	r3, [r0, #40]	; 0x28
 8005e32:	e7e4      	b.n	8005dfe <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e34:	6803      	ldr	r3, [r0, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8005e3a:	1c51      	adds	r1, r2, #1
 8005e3c:	6281      	str	r1, [r0, #40]	; 0x28
 8005e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e42:	7013      	strb	r3, [r2, #0]
 8005e44:	e7db      	b.n	8005dfe <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e46:	6802      	ldr	r2, [r0, #0]
 8005e48:	68d3      	ldr	r3, [r2, #12]
 8005e4a:	f023 0320 	bic.w	r3, r3, #32
 8005e4e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e50:	6802      	ldr	r2, [r0, #0]
 8005e52:	68d3      	ldr	r3, [r2, #12]
 8005e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e58:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e5a:	6802      	ldr	r2, [r0, #0]
 8005e5c:	6953      	ldr	r3, [r2, #20]
 8005e5e:	f023 0301 	bic.w	r3, r3, #1
 8005e62:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005e64:	2320      	movs	r3, #32
 8005e66:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8005e6a:	f7ff ffb5 	bl	8005dd8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8005e6e:	2000      	movs	r0, #0
 8005e70:	e000      	b.n	8005e74 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8005e72:	2002      	movs	r0, #2
}
 8005e74:	bd08      	pop	{r3, pc}

08005e76 <HAL_UART_ErrorCallback>:
}
 8005e76:	4770      	bx	lr

08005e78 <HAL_UART_IRQHandler>:
{
 8005e78:	b510      	push	{r4, lr}
 8005e7a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e7c:	6802      	ldr	r2, [r0, #0]
 8005e7e:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e80:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e82:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8005e84:	f013 000f 	ands.w	r0, r3, #15
 8005e88:	d105      	bne.n	8005e96 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e8a:	f013 0f20 	tst.w	r3, #32
 8005e8e:	d002      	beq.n	8005e96 <HAL_UART_IRQHandler+0x1e>
 8005e90:	f011 0f20 	tst.w	r1, #32
 8005e94:	d153      	bne.n	8005f3e <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e96:	2800      	cmp	r0, #0
 8005e98:	d067      	beq.n	8005f6a <HAL_UART_IRQHandler+0xf2>
 8005e9a:	f012 0201 	ands.w	r2, r2, #1
 8005e9e:	d102      	bne.n	8005ea6 <HAL_UART_IRQHandler+0x2e>
 8005ea0:	f411 7f90 	tst.w	r1, #288	; 0x120
 8005ea4:	d061      	beq.n	8005f6a <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ea6:	f013 0f01 	tst.w	r3, #1
 8005eaa:	d006      	beq.n	8005eba <HAL_UART_IRQHandler+0x42>
 8005eac:	f411 7f80 	tst.w	r1, #256	; 0x100
 8005eb0:	d003      	beq.n	8005eba <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eb2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005eb4:	f040 0001 	orr.w	r0, r0, #1
 8005eb8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eba:	f013 0f04 	tst.w	r3, #4
 8005ebe:	d004      	beq.n	8005eca <HAL_UART_IRQHandler+0x52>
 8005ec0:	b11a      	cbz	r2, 8005eca <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ec2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005ec4:	f040 0002 	orr.w	r0, r0, #2
 8005ec8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eca:	f013 0f02 	tst.w	r3, #2
 8005ece:	d004      	beq.n	8005eda <HAL_UART_IRQHandler+0x62>
 8005ed0:	b11a      	cbz	r2, 8005eda <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ed2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005ed4:	f040 0004 	orr.w	r0, r0, #4
 8005ed8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eda:	f013 0f08 	tst.w	r3, #8
 8005ede:	d004      	beq.n	8005eea <HAL_UART_IRQHandler+0x72>
 8005ee0:	b11a      	cbz	r2, 8005eea <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ee2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005ee4:	f042 0208 	orr.w	r2, r2, #8
 8005ee8:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005eec:	2a00      	cmp	r2, #0
 8005eee:	d048      	beq.n	8005f82 <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ef0:	f013 0f20 	tst.w	r3, #32
 8005ef4:	d002      	beq.n	8005efc <HAL_UART_IRQHandler+0x84>
 8005ef6:	f011 0f20 	tst.w	r1, #32
 8005efa:	d124      	bne.n	8005f46 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f04:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005f06:	f012 0f08 	tst.w	r2, #8
 8005f0a:	d100      	bne.n	8005f0e <HAL_UART_IRQHandler+0x96>
 8005f0c:	b33b      	cbz	r3, 8005f5e <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f7ff fca7 	bl	8005862 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	695a      	ldr	r2, [r3, #20]
 8005f18:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005f1c:	d01b      	beq.n	8005f56 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f1e:	695a      	ldr	r2, [r3, #20]
 8005f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f24:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8005f26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f28:	b18b      	cbz	r3, 8005f4e <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f2a:	4a1a      	ldr	r2, [pc, #104]	; (8005f94 <HAL_UART_IRQHandler+0x11c>)
 8005f2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f2e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005f30:	f7fd f986 	bl	8003240 <HAL_DMA_Abort_IT>
 8005f34:	b328      	cbz	r0, 8005f82 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f36:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005f38:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005f3a:	4798      	blx	r3
 8005f3c:	e021      	b.n	8005f82 <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f7ff ff4b 	bl	8005dda <UART_Receive_IT>
      return;
 8005f44:	e01d      	b.n	8005f82 <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 8005f46:	4620      	mov	r0, r4
 8005f48:	f7ff ff47 	bl	8005dda <UART_Receive_IT>
 8005f4c:	e7d6      	b.n	8005efc <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f7ff ff91 	bl	8005e76 <HAL_UART_ErrorCallback>
 8005f54:	e015      	b.n	8005f82 <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 8005f56:	4620      	mov	r0, r4
 8005f58:	f7ff ff8d 	bl	8005e76 <HAL_UART_ErrorCallback>
 8005f5c:	e011      	b.n	8005f82 <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f7ff ff89 	bl	8005e76 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f64:	2300      	movs	r3, #0
 8005f66:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005f68:	e00b      	b.n	8005f82 <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f6a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005f6e:	d002      	beq.n	8005f76 <HAL_UART_IRQHandler+0xfe>
 8005f70:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005f74:	d106      	bne.n	8005f84 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f76:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f7a:	d002      	beq.n	8005f82 <HAL_UART_IRQHandler+0x10a>
 8005f7c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005f80:	d104      	bne.n	8005f8c <HAL_UART_IRQHandler+0x114>
}
 8005f82:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8005f84:	4620      	mov	r0, r4
 8005f86:	f7ff fc7a 	bl	800587e <UART_Transmit_IT>
    return;
 8005f8a:	e7fa      	b.n	8005f82 <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f7ff ff16 	bl	8005dbe <UART_EndTransmit_IT>
    return;
 8005f92:	e7f6      	b.n	8005f82 <HAL_UART_IRQHandler+0x10a>
 8005f94:	08005f99 	.word	0x08005f99

08005f98 <UART_DMAAbortOnError>:
{
 8005f98:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f9a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fa0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8005fa2:	f7ff ff68 	bl	8005e76 <HAL_UART_ErrorCallback>
}
 8005fa6:	bd08      	pop	{r3, pc}

08005fa8 <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8005fa8:	2884      	cmp	r0, #132	; 0x84
 8005faa:	d001      	beq.n	8005fb0 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8005fac:	3003      	adds	r0, #3
 8005fae:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005fb0:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8005fb2:	4770      	bx	lr

08005fb4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005fb4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8005fb6:	f000 fca5 	bl	8006904 <vTaskStartScheduler>
  
  return osOK;
}
 8005fba:	2000      	movs	r0, #0
 8005fbc:	bd08      	pop	{r3, pc}

08005fbe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005fbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005fc8:	6945      	ldr	r5, [r0, #20]
 8005fca:	b1a5      	cbz	r5, 8005ff6 <osThreadCreate+0x38>
 8005fcc:	6986      	ldr	r6, [r0, #24]
 8005fce:	b196      	cbz	r6, 8005ff6 <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fd0:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8005fd4:	f8d0 9000 	ldr.w	r9, [r0]
 8005fd8:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8005fdc:	f7ff ffe4 	bl	8005fa8 <makeFreeRtosPriority>
 8005fe0:	6922      	ldr	r2, [r4, #16]
 8005fe2:	9602      	str	r6, [sp, #8]
 8005fe4:	9501      	str	r5, [sp, #4]
 8005fe6:	9000      	str	r0, [sp, #0]
 8005fe8:	463b      	mov	r3, r7
 8005fea:	4649      	mov	r1, r9
 8005fec:	4640      	mov	r0, r8
 8005fee:	f000 fc1d 	bl	800682c <xTaskCreateStatic>
 8005ff2:	9005      	str	r0, [sp, #20]
 8005ff4:	e013      	b.n	800601e <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ff6:	6865      	ldr	r5, [r4, #4]
 8005ff8:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ffa:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ffe:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 8006002:	f7ff ffd1 	bl	8005fa8 <makeFreeRtosPriority>
 8006006:	ab05      	add	r3, sp, #20
 8006008:	9301      	str	r3, [sp, #4]
 800600a:	9000      	str	r0, [sp, #0]
 800600c:	463b      	mov	r3, r7
 800600e:	fa1f f288 	uxth.w	r2, r8
 8006012:	4631      	mov	r1, r6
 8006014:	4628      	mov	r0, r5
 8006016:	f000 fc42 	bl	800689e <xTaskCreate>
 800601a:	2801      	cmp	r0, #1
 800601c:	d103      	bne.n	8006026 <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800601e:	9805      	ldr	r0, [sp, #20]
}
 8006020:	b007      	add	sp, #28
 8006022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 8006026:	2000      	movs	r0, #0
 8006028:	e7fa      	b.n	8006020 <osThreadCreate+0x62>

0800602a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800602a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800602c:	4603      	mov	r3, r0
 800602e:	b900      	cbnz	r0, 8006032 <osDelay+0x8>
 8006030:	2301      	movs	r3, #1
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fdaa 	bl	8006b8c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006038:	2000      	movs	r0, #0
 800603a:	bd08      	pop	{r3, pc}

0800603c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800603c:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800603e:	6841      	ldr	r1, [r0, #4]
 8006040:	b119      	cbz	r1, 800604a <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006042:	2001      	movs	r0, #1
 8006044:	f000 fa63 	bl	800650e <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006048:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 800604a:	2001      	movs	r0, #1
 800604c:	f000 fa54 	bl	80064f8 <xQueueCreateMutex>
 8006050:	e7fa      	b.n	8006048 <osMutexCreate+0xc>

08006052 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006052:	f100 0308 	add.w	r3, r0, #8
 8006056:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800605c:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800605e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006060:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006066:	4770      	bx	lr

08006068 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006068:	2300      	movs	r3, #0
 800606a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800606c:	4770      	bx	lr

0800606e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800606e:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006070:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800607a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800607c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800607e:	6803      	ldr	r3, [r0, #0]
 8006080:	3301      	adds	r3, #1
 8006082:	6003      	str	r3, [r0, #0]
}
 8006084:	4770      	bx	lr

08006086 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006086:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006088:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800608a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800608e:	d002      	beq.n	8006096 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006090:	f100 0208 	add.w	r2, r0, #8
 8006094:	e002      	b.n	800609c <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8006096:	6902      	ldr	r2, [r0, #16]
 8006098:	e004      	b.n	80060a4 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800609a:	461a      	mov	r2, r3
 800609c:	6853      	ldr	r3, [r2, #4]
 800609e:	681c      	ldr	r4, [r3, #0]
 80060a0:	42ac      	cmp	r4, r5
 80060a2:	d9fa      	bls.n	800609a <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060a4:	6853      	ldr	r3, [r2, #4]
 80060a6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060a8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060aa:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80060ac:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80060ae:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80060b0:	6803      	ldr	r3, [r0, #0]
 80060b2:	3301      	adds	r3, #1
 80060b4:	6003      	str	r3, [r0, #0]
}
 80060b6:	bc30      	pop	{r4, r5}
 80060b8:	4770      	bx	lr

080060ba <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80060ba:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060bc:	6842      	ldr	r2, [r0, #4]
 80060be:	6881      	ldr	r1, [r0, #8]
 80060c0:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060c2:	6882      	ldr	r2, [r0, #8]
 80060c4:	6841      	ldr	r1, [r0, #4]
 80060c6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	4282      	cmp	r2, r0
 80060cc:	d006      	beq.n	80060dc <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80060ce:	2200      	movs	r2, #0
 80060d0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	3a01      	subs	r2, #1
 80060d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060d8:	6818      	ldr	r0, [r3, #0]
}
 80060da:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060dc:	6882      	ldr	r2, [r0, #8]
 80060de:	605a      	str	r2, [r3, #4]
 80060e0:	e7f5      	b.n	80060ce <uxListRemove+0x14>

080060e2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060e2:	b510      	push	{r4, lr}
 80060e4:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060e6:	f000 ff45 	bl	8006f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80060ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d004      	beq.n	80060fc <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 80060f2:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 80060f4:	f000 ff60 	bl	8006fb8 <vPortExitCritical>

	return xReturn;
}
 80060f8:	4620      	mov	r0, r4
 80060fa:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 80060fc:	2401      	movs	r4, #1
 80060fe:	e7f9      	b.n	80060f4 <prvIsQueueFull+0x12>

08006100 <prvCopyDataToQueue>:
{
 8006100:	b570      	push	{r4, r5, r6, lr}
 8006102:	4604      	mov	r4, r0
 8006104:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006106:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006108:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800610a:	b95a      	cbnz	r2, 8006124 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800610c:	6803      	ldr	r3, [r0, #0]
 800610e:	b11b      	cbz	r3, 8006118 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8006110:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006112:	3501      	adds	r5, #1
 8006114:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8006116:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006118:	6840      	ldr	r0, [r0, #4]
 800611a:	f000 fe69 	bl	8006df0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800611e:	2300      	movs	r3, #0
 8006120:	6063      	str	r3, [r4, #4]
 8006122:	e7f6      	b.n	8006112 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8006124:	b96e      	cbnz	r6, 8006142 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006126:	6880      	ldr	r0, [r0, #8]
 8006128:	f004 f827 	bl	800a17a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800612c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800612e:	68a3      	ldr	r3, [r4, #8]
 8006130:	4413      	add	r3, r2
 8006132:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006134:	6862      	ldr	r2, [r4, #4]
 8006136:	4293      	cmp	r3, r2
 8006138:	d319      	bcc.n	800616e <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800613e:	2000      	movs	r0, #0
 8006140:	e7e7      	b.n	8006112 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006142:	68c0      	ldr	r0, [r0, #12]
 8006144:	f004 f819 	bl	800a17a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006148:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800614a:	4252      	negs	r2, r2
 800614c:	68e3      	ldr	r3, [r4, #12]
 800614e:	4413      	add	r3, r2
 8006150:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006152:	6821      	ldr	r1, [r4, #0]
 8006154:	428b      	cmp	r3, r1
 8006156:	d202      	bcs.n	800615e <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006158:	6863      	ldr	r3, [r4, #4]
 800615a:	441a      	add	r2, r3
 800615c:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800615e:	2e02      	cmp	r6, #2
 8006160:	d001      	beq.n	8006166 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8006162:	2000      	movs	r0, #0
 8006164:	e7d5      	b.n	8006112 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006166:	b125      	cbz	r5, 8006172 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8006168:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 800616a:	2000      	movs	r0, #0
 800616c:	e7d1      	b.n	8006112 <prvCopyDataToQueue+0x12>
 800616e:	2000      	movs	r0, #0
 8006170:	e7cf      	b.n	8006112 <prvCopyDataToQueue+0x12>
 8006172:	2000      	movs	r0, #0
 8006174:	e7cd      	b.n	8006112 <prvCopyDataToQueue+0x12>

08006176 <prvUnlockQueue>:
{
 8006176:	b538      	push	{r3, r4, r5, lr}
 8006178:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800617a:	f000 fefb 	bl	8006f74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800617e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8006182:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006184:	e003      	b.n	800618e <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8006186:	f000 fe1d 	bl	8006dc4 <vTaskMissedYield>
			--cTxLock;
 800618a:	3c01      	subs	r4, #1
 800618c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800618e:	2c00      	cmp	r4, #0
 8006190:	dd08      	ble.n	80061a4 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006192:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006194:	b133      	cbz	r3, 80061a4 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006196:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800619a:	f000 fd81 	bl	8006ca0 <xTaskRemoveFromEventList>
 800619e:	2800      	cmp	r0, #0
 80061a0:	d0f3      	beq.n	800618a <prvUnlockQueue+0x14>
 80061a2:	e7f0      	b.n	8006186 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 80061a4:	23ff      	movs	r3, #255	; 0xff
 80061a6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80061aa:	f000 ff05 	bl	8006fb8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80061ae:	f000 fee1 	bl	8006f74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80061b2:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80061b6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061b8:	e003      	b.n	80061c2 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 80061ba:	f000 fe03 	bl	8006dc4 <vTaskMissedYield>
				--cRxLock;
 80061be:	3c01      	subs	r4, #1
 80061c0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061c2:	2c00      	cmp	r4, #0
 80061c4:	dd08      	ble.n	80061d8 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061c6:	692b      	ldr	r3, [r5, #16]
 80061c8:	b133      	cbz	r3, 80061d8 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061ca:	f105 0010 	add.w	r0, r5, #16
 80061ce:	f000 fd67 	bl	8006ca0 <xTaskRemoveFromEventList>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	d0f3      	beq.n	80061be <prvUnlockQueue+0x48>
 80061d6:	e7f0      	b.n	80061ba <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80061d8:	23ff      	movs	r3, #255	; 0xff
 80061da:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80061de:	f000 feeb 	bl	8006fb8 <vPortExitCritical>
}
 80061e2:	bd38      	pop	{r3, r4, r5, pc}

080061e4 <xQueueGenericReset>:
{
 80061e4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80061e6:	b940      	cbnz	r0, 80061fa <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	e7fe      	b.n	80061f8 <xQueueGenericReset+0x14>
 80061fa:	4604      	mov	r4, r0
 80061fc:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80061fe:	f000 feb9 	bl	8006f74 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006202:	6821      	ldr	r1, [r4, #0]
 8006204:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006206:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006208:	fb03 1002 	mla	r0, r3, r2, r1
 800620c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800620e:	2000      	movs	r0, #0
 8006210:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006212:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006214:	3a01      	subs	r2, #1
 8006216:	fb02 1303 	mla	r3, r2, r3, r1
 800621a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800621c:	23ff      	movs	r3, #255	; 0xff
 800621e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006222:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8006226:	b9a5      	cbnz	r5, 8006252 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006228:	6923      	ldr	r3, [r4, #16]
 800622a:	b91b      	cbnz	r3, 8006234 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800622c:	f000 fec4 	bl	8006fb8 <vPortExitCritical>
}
 8006230:	2001      	movs	r0, #1
 8006232:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006234:	f104 0010 	add.w	r0, r4, #16
 8006238:	f000 fd32 	bl	8006ca0 <xTaskRemoveFromEventList>
 800623c:	2800      	cmp	r0, #0
 800623e:	d0f5      	beq.n	800622c <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8006240:	4b08      	ldr	r3, [pc, #32]	; (8006264 <xQueueGenericReset+0x80>)
 8006242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	e7ec      	b.n	800622c <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006252:	f104 0010 	add.w	r0, r4, #16
 8006256:	f7ff fefc 	bl	8006052 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800625a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800625e:	f7ff fef8 	bl	8006052 <vListInitialise>
 8006262:	e7e3      	b.n	800622c <xQueueGenericReset+0x48>
 8006264:	e000ed04 	.word	0xe000ed04

08006268 <prvInitialiseNewQueue>:
{
 8006268:	b510      	push	{r4, lr}
 800626a:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800626c:	460c      	mov	r4, r1
 800626e:	b139      	cbz	r1, 8006280 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006270:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8006272:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006274:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006276:	2101      	movs	r1, #1
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff ffb3 	bl	80061e4 <xQueueGenericReset>
}
 800627e:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006280:	601b      	str	r3, [r3, #0]
 8006282:	e7f6      	b.n	8006272 <prvInitialiseNewQueue+0xa>

08006284 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006284:	b940      	cbnz	r0, 8006298 <xQueueGenericCreateStatic+0x14>
 8006286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	e7fe      	b.n	8006296 <xQueueGenericCreateStatic+0x12>
	{
 8006298:	b510      	push	{r4, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 800629e:	b153      	cbz	r3, 80062b6 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062a0:	b192      	cbz	r2, 80062c8 <xQueueGenericCreateStatic+0x44>
 80062a2:	b989      	cbnz	r1, 80062c8 <xQueueGenericCreateStatic+0x44>
 80062a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	e7fe      	b.n	80062b4 <xQueueGenericCreateStatic+0x30>
 80062b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	e7fe      	b.n	80062c6 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062c8:	b94a      	cbnz	r2, 80062de <xQueueGenericCreateStatic+0x5a>
 80062ca:	b141      	cbz	r1, 80062de <xQueueGenericCreateStatic+0x5a>
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	e7fe      	b.n	80062dc <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062de:	2048      	movs	r0, #72	; 0x48
 80062e0:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062e2:	9803      	ldr	r0, [sp, #12]
 80062e4:	2848      	cmp	r0, #72	; 0x48
 80062e6:	d008      	beq.n	80062fa <xQueueGenericCreateStatic+0x76>
 80062e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ec:	f383 8811 	msr	BASEPRI, r3
 80062f0:	f3bf 8f6f 	isb	sy
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	e7fe      	b.n	80062f8 <xQueueGenericCreateStatic+0x74>
 80062fa:	4620      	mov	r0, r4
 80062fc:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80062fe:	2301      	movs	r3, #1
 8006300:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006304:	9400      	str	r4, [sp, #0]
 8006306:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800630a:	f7ff ffad 	bl	8006268 <prvInitialiseNewQueue>
	}
 800630e:	4620      	mov	r0, r4
 8006310:	b004      	add	sp, #16
 8006312:	bd10      	pop	{r4, pc}

08006314 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006314:	b940      	cbnz	r0, 8006328 <xQueueGenericCreate+0x14>
 8006316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	e7fe      	b.n	8006326 <xQueueGenericCreate+0x12>
	{
 8006328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800632a:	b083      	sub	sp, #12
 800632c:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 800632e:	b111      	cbz	r1, 8006336 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006330:	fb01 f000 	mul.w	r0, r1, r0
 8006334:	e000      	b.n	8006338 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8006336:	2000      	movs	r0, #0
 8006338:	4617      	mov	r7, r2
 800633a:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800633c:	3048      	adds	r0, #72	; 0x48
 800633e:	f000 ffa1 	bl	8007284 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006342:	4605      	mov	r5, r0
 8006344:	b150      	cbz	r0, 800635c <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006346:	2300      	movs	r3, #0
 8006348:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800634c:	9000      	str	r0, [sp, #0]
 800634e:	463b      	mov	r3, r7
 8006350:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8006354:	4621      	mov	r1, r4
 8006356:	4630      	mov	r0, r6
 8006358:	f7ff ff86 	bl	8006268 <prvInitialiseNewQueue>
	}
 800635c:	4628      	mov	r0, r5
 800635e:	b003      	add	sp, #12
 8006360:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006364 <xQueueGenericSend>:
{
 8006364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006366:	b085      	sub	sp, #20
 8006368:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800636a:	b160      	cbz	r0, 8006386 <xQueueGenericSend+0x22>
 800636c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800636e:	b999      	cbnz	r1, 8006398 <xQueueGenericSend+0x34>
 8006370:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006372:	b18a      	cbz	r2, 8006398 <xQueueGenericSend+0x34>
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	e7fe      	b.n	8006384 <xQueueGenericSend+0x20>
 8006386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	e7fe      	b.n	8006396 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006398:	2b02      	cmp	r3, #2
 800639a:	d10b      	bne.n	80063b4 <xQueueGenericSend+0x50>
 800639c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800639e:	2a01      	cmp	r2, #1
 80063a0:	d008      	beq.n	80063b4 <xQueueGenericSend+0x50>
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	e7fe      	b.n	80063b2 <xQueueGenericSend+0x4e>
 80063b4:	461e      	mov	r6, r3
 80063b6:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063b8:	f000 fd0a 	bl	8006dd0 <xTaskGetSchedulerState>
 80063bc:	b950      	cbnz	r0, 80063d4 <xQueueGenericSend+0x70>
 80063be:	9b01      	ldr	r3, [sp, #4]
 80063c0:	b153      	cbz	r3, 80063d8 <xQueueGenericSend+0x74>
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	e7fe      	b.n	80063d2 <xQueueGenericSend+0x6e>
 80063d4:	2500      	movs	r5, #0
 80063d6:	e03a      	b.n	800644e <xQueueGenericSend+0xea>
 80063d8:	2500      	movs	r5, #0
 80063da:	e038      	b.n	800644e <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063dc:	4632      	mov	r2, r6
 80063de:	4639      	mov	r1, r7
 80063e0:	4620      	mov	r0, r4
 80063e2:	f7ff fe8d 	bl	8006100 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063e8:	b94b      	cbnz	r3, 80063fe <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 80063ea:	b1a8      	cbz	r0, 8006418 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 80063ec:	4b3b      	ldr	r3, [pc, #236]	; (80064dc <xQueueGenericSend+0x178>)
 80063ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	e00c      	b.n	8006418 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006402:	f000 fc4d 	bl	8006ca0 <xTaskRemoveFromEventList>
 8006406:	b138      	cbz	r0, 8006418 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 8006408:	4b34      	ldr	r3, [pc, #208]	; (80064dc <xQueueGenericSend+0x178>)
 800640a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006418:	f000 fdce 	bl	8006fb8 <vPortExitCritical>
				return pdPASS;
 800641c:	2001      	movs	r0, #1
}
 800641e:	b005      	add	sp, #20
 8006420:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8006422:	f000 fdc9 	bl	8006fb8 <vPortExitCritical>
					return errQUEUE_FULL;
 8006426:	2000      	movs	r0, #0
 8006428:	e7f9      	b.n	800641e <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800642a:	a802      	add	r0, sp, #8
 800642c:	f000 fc7e 	bl	8006d2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006430:	2501      	movs	r5, #1
 8006432:	e019      	b.n	8006468 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 8006434:	2300      	movs	r3, #0
 8006436:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800643a:	e021      	b.n	8006480 <xQueueGenericSend+0x11c>
 800643c:	2300      	movs	r3, #0
 800643e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006442:	e023      	b.n	800648c <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 8006444:	4620      	mov	r0, r4
 8006446:	f7ff fe96 	bl	8006176 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800644a:	f000 fb25 	bl	8006a98 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800644e:	f000 fd91 	bl	8006f74 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006452:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006454:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006456:	429a      	cmp	r2, r3
 8006458:	d3c0      	bcc.n	80063dc <xQueueGenericSend+0x78>
 800645a:	2e02      	cmp	r6, #2
 800645c:	d0be      	beq.n	80063dc <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 800645e:	9b01      	ldr	r3, [sp, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0de      	beq.n	8006422 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 8006464:	2d00      	cmp	r5, #0
 8006466:	d0e0      	beq.n	800642a <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 8006468:	f000 fda6 	bl	8006fb8 <vPortExitCritical>
		vTaskSuspendAll();
 800646c:	f000 fa80 	bl	8006970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006470:	f000 fd80 	bl	8006f74 <vPortEnterCritical>
 8006474:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006478:	b25b      	sxtb	r3, r3
 800647a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800647e:	d0d9      	beq.n	8006434 <xQueueGenericSend+0xd0>
 8006480:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006484:	b25b      	sxtb	r3, r3
 8006486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800648a:	d0d7      	beq.n	800643c <xQueueGenericSend+0xd8>
 800648c:	f000 fd94 	bl	8006fb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006490:	a901      	add	r1, sp, #4
 8006492:	a802      	add	r0, sp, #8
 8006494:	f000 fc56 	bl	8006d44 <xTaskCheckForTimeOut>
 8006498:	b9c8      	cbnz	r0, 80064ce <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800649a:	4620      	mov	r0, r4
 800649c:	f7ff fe21 	bl	80060e2 <prvIsQueueFull>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	d0cf      	beq.n	8006444 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064a4:	9901      	ldr	r1, [sp, #4]
 80064a6:	f104 0010 	add.w	r0, r4, #16
 80064aa:	f000 fbe1 	bl	8006c70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064ae:	4620      	mov	r0, r4
 80064b0:	f7ff fe61 	bl	8006176 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064b4:	f000 faf0 	bl	8006a98 <xTaskResumeAll>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d1c8      	bne.n	800644e <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 80064bc:	4b07      	ldr	r3, [pc, #28]	; (80064dc <xQueueGenericSend+0x178>)
 80064be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c2:	601a      	str	r2, [r3, #0]
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	e7bf      	b.n	800644e <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 80064ce:	4620      	mov	r0, r4
 80064d0:	f7ff fe51 	bl	8006176 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064d4:	f000 fae0 	bl	8006a98 <xTaskResumeAll>
			return errQUEUE_FULL;
 80064d8:	2000      	movs	r0, #0
 80064da:	e7a0      	b.n	800641e <xQueueGenericSend+0xba>
 80064dc:	e000ed04 	.word	0xe000ed04

080064e0 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80064e0:	b148      	cbz	r0, 80064f6 <prvInitialiseMutex+0x16>
	{
 80064e2:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 80064e4:	2100      	movs	r1, #0
 80064e6:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80064e8:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80064ea:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80064ec:	460b      	mov	r3, r1
 80064ee:	460a      	mov	r2, r1
 80064f0:	f7ff ff38 	bl	8006364 <xQueueGenericSend>
	}
 80064f4:	bd08      	pop	{r3, pc}
 80064f6:	4770      	bx	lr

080064f8 <xQueueCreateMutex>:
	{
 80064f8:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80064fa:	4602      	mov	r2, r0
 80064fc:	2100      	movs	r1, #0
 80064fe:	2001      	movs	r0, #1
 8006500:	f7ff ff08 	bl	8006314 <xQueueGenericCreate>
 8006504:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8006506:	f7ff ffeb 	bl	80064e0 <prvInitialiseMutex>
	}
 800650a:	4620      	mov	r0, r4
 800650c:	bd10      	pop	{r4, pc}

0800650e <xQueueCreateMutexStatic>:
	{
 800650e:	b510      	push	{r4, lr}
 8006510:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006512:	9000      	str	r0, [sp, #0]
 8006514:	460b      	mov	r3, r1
 8006516:	2200      	movs	r2, #0
 8006518:	4611      	mov	r1, r2
 800651a:	2001      	movs	r0, #1
 800651c:	f7ff feb2 	bl	8006284 <xQueueGenericCreateStatic>
 8006520:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8006522:	f7ff ffdd 	bl	80064e0 <prvInitialiseMutex>
	}
 8006526:	4620      	mov	r0, r4
 8006528:	b002      	add	sp, #8
 800652a:	bd10      	pop	{r4, pc}

0800652c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800652c:	4b08      	ldr	r3, [pc, #32]	; (8006550 <prvResetNextTaskUnblockTime+0x24>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	b13b      	cbz	r3, 8006544 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006534:	4b06      	ldr	r3, [pc, #24]	; (8006550 <prvResetNextTaskUnblockTime+0x24>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	4b05      	ldr	r3, [pc, #20]	; (8006554 <prvResetNextTaskUnblockTime+0x28>)
 8006540:	601a      	str	r2, [r3, #0]
	}
}
 8006542:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8006544:	4b03      	ldr	r3, [pc, #12]	; (8006554 <prvResetNextTaskUnblockTime+0x28>)
 8006546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	20000368 	.word	0x20000368
 8006554:	2000043c 	.word	0x2000043c

08006558 <prvInitialiseNewTask>:
{
 8006558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800655c:	4680      	mov	r8, r0
 800655e:	4699      	mov	r9, r3
 8006560:	9d08      	ldr	r5, [sp, #32]
 8006562:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006564:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006566:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8006568:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800656c:	3a01      	subs	r2, #1
 800656e:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006572:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006576:	2300      	movs	r3, #0
 8006578:	2b0f      	cmp	r3, #15
 800657a:	d807      	bhi.n	800658c <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800657c:	5cc8      	ldrb	r0, [r1, r3]
 800657e:	18e2      	adds	r2, r4, r3
 8006580:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8006584:	5cca      	ldrb	r2, [r1, r3]
 8006586:	b10a      	cbz	r2, 800658c <prvInitialiseNewTask+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006588:	3301      	adds	r3, #1
 800658a:	e7f5      	b.n	8006578 <prvInitialiseNewTask+0x20>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800658c:	2300      	movs	r3, #0
 800658e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006592:	2d06      	cmp	r5, #6
 8006594:	d900      	bls.n	8006598 <prvInitialiseNewTask+0x40>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006596:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8006598:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800659a:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800659c:	f04f 0a00 	mov.w	sl, #0
 80065a0:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065a4:	1d20      	adds	r0, r4, #4
 80065a6:	f7ff fd5f 	bl	8006068 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065aa:	f104 0018 	add.w	r0, r4, #24
 80065ae:	f7ff fd5b 	bl	8006068 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065b2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065b4:	f1c5 0507 	rsb	r5, r5, #7
 80065b8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80065ba:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80065bc:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80065c0:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065c4:	464a      	mov	r2, r9
 80065c6:	4641      	mov	r1, r8
 80065c8:	4630      	mov	r0, r6
 80065ca:	f000 fca7 	bl	8006f1c <pxPortInitialiseStack>
 80065ce:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80065d0:	b107      	cbz	r7, 80065d4 <prvInitialiseNewTask+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065d2:	603c      	str	r4, [r7, #0]
}
 80065d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080065d8 <prvInitialiseTaskLists>:
{
 80065d8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065da:	2400      	movs	r4, #0
 80065dc:	e007      	b.n	80065ee <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065de:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80065e2:	0093      	lsls	r3, r2, #2
 80065e4:	480e      	ldr	r0, [pc, #56]	; (8006620 <prvInitialiseTaskLists+0x48>)
 80065e6:	4418      	add	r0, r3
 80065e8:	f7ff fd33 	bl	8006052 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065ec:	3401      	adds	r4, #1
 80065ee:	2c06      	cmp	r4, #6
 80065f0:	d9f5      	bls.n	80065de <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 80065f2:	4d0c      	ldr	r5, [pc, #48]	; (8006624 <prvInitialiseTaskLists+0x4c>)
 80065f4:	4628      	mov	r0, r5
 80065f6:	f7ff fd2c 	bl	8006052 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065fa:	4c0b      	ldr	r4, [pc, #44]	; (8006628 <prvInitialiseTaskLists+0x50>)
 80065fc:	4620      	mov	r0, r4
 80065fe:	f7ff fd28 	bl	8006052 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006602:	480a      	ldr	r0, [pc, #40]	; (800662c <prvInitialiseTaskLists+0x54>)
 8006604:	f7ff fd25 	bl	8006052 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8006608:	4809      	ldr	r0, [pc, #36]	; (8006630 <prvInitialiseTaskLists+0x58>)
 800660a:	f7ff fd22 	bl	8006052 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800660e:	4809      	ldr	r0, [pc, #36]	; (8006634 <prvInitialiseTaskLists+0x5c>)
 8006610:	f7ff fd1f 	bl	8006052 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8006614:	4b08      	ldr	r3, [pc, #32]	; (8006638 <prvInitialiseTaskLists+0x60>)
 8006616:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006618:	4b08      	ldr	r3, [pc, #32]	; (800663c <prvInitialiseTaskLists+0x64>)
 800661a:	601c      	str	r4, [r3, #0]
}
 800661c:	bd38      	pop	{r3, r4, r5, pc}
 800661e:	bf00      	nop
 8006620:	20000370 	.word	0x20000370
 8006624:	20000414 	.word	0x20000414
 8006628:	20000428 	.word	0x20000428
 800662c:	20000444 	.word	0x20000444
 8006630:	20000470 	.word	0x20000470
 8006634:	2000045c 	.word	0x2000045c
 8006638:	20000368 	.word	0x20000368
 800663c:	2000036c 	.word	0x2000036c

08006640 <prvAddNewTaskToReadyList>:
{
 8006640:	b510      	push	{r4, lr}
 8006642:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006644:	f000 fc96 	bl	8006f74 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006648:	4a20      	ldr	r2, [pc, #128]	; (80066cc <prvAddNewTaskToReadyList+0x8c>)
 800664a:	6813      	ldr	r3, [r2, #0]
 800664c:	3301      	adds	r3, #1
 800664e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006650:	4b1f      	ldr	r3, [pc, #124]	; (80066d0 <prvAddNewTaskToReadyList+0x90>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	b15b      	cbz	r3, 800666e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8006656:	4b1f      	ldr	r3, [pc, #124]	; (80066d4 <prvAddNewTaskToReadyList+0x94>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	b96b      	cbnz	r3, 8006678 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800665c:	4b1c      	ldr	r3, [pc, #112]	; (80066d0 <prvAddNewTaskToReadyList+0x90>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006662:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006664:	429a      	cmp	r2, r3
 8006666:	d807      	bhi.n	8006678 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8006668:	4b19      	ldr	r3, [pc, #100]	; (80066d0 <prvAddNewTaskToReadyList+0x90>)
 800666a:	601c      	str	r4, [r3, #0]
 800666c:	e004      	b.n	8006678 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800666e:	4b18      	ldr	r3, [pc, #96]	; (80066d0 <prvAddNewTaskToReadyList+0x90>)
 8006670:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006672:	6813      	ldr	r3, [r2, #0]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d026      	beq.n	80066c6 <prvAddNewTaskToReadyList+0x86>
		uxTaskNumber++;
 8006678:	4a17      	ldr	r2, [pc, #92]	; (80066d8 <prvAddNewTaskToReadyList+0x98>)
 800667a:	6813      	ldr	r3, [r2, #0]
 800667c:	3301      	adds	r3, #1
 800667e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8006680:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006682:	2201      	movs	r2, #1
 8006684:	409a      	lsls	r2, r3
 8006686:	4915      	ldr	r1, [pc, #84]	; (80066dc <prvAddNewTaskToReadyList+0x9c>)
 8006688:	6808      	ldr	r0, [r1, #0]
 800668a:	4302      	orrs	r2, r0
 800668c:	600a      	str	r2, [r1, #0]
 800668e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006692:	009a      	lsls	r2, r3, #2
 8006694:	1d21      	adds	r1, r4, #4
 8006696:	4812      	ldr	r0, [pc, #72]	; (80066e0 <prvAddNewTaskToReadyList+0xa0>)
 8006698:	4410      	add	r0, r2
 800669a:	f7ff fce8 	bl	800606e <vListInsertEnd>
	taskEXIT_CRITICAL();
 800669e:	f000 fc8b 	bl	8006fb8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80066a2:	4b0c      	ldr	r3, [pc, #48]	; (80066d4 <prvAddNewTaskToReadyList+0x94>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	b16b      	cbz	r3, 80066c4 <prvAddNewTaskToReadyList+0x84>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066a8:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <prvAddNewTaskToReadyList+0x90>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d207      	bcs.n	80066c4 <prvAddNewTaskToReadyList+0x84>
			taskYIELD_IF_USING_PREEMPTION();
 80066b4:	4b0b      	ldr	r3, [pc, #44]	; (80066e4 <prvAddNewTaskToReadyList+0xa4>)
 80066b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	f3bf 8f6f 	isb	sy
}
 80066c4:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 80066c6:	f7ff ff87 	bl	80065d8 <prvInitialiseTaskLists>
 80066ca:	e7d5      	b.n	8006678 <prvAddNewTaskToReadyList+0x38>
 80066cc:	200003fc 	.word	0x200003fc
 80066d0:	20000364 	.word	0x20000364
 80066d4:	20000458 	.word	0x20000458
 80066d8:	2000040c 	.word	0x2000040c
 80066dc:	20000410 	.word	0x20000410
 80066e0:	20000370 	.word	0x20000370
 80066e4:	e000ed04 	.word	0xe000ed04

080066e8 <prvDeleteTCB>:
	{
 80066e8:	b510      	push	{r4, lr}
 80066ea:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80066ec:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80066f0:	b933      	cbnz	r3, 8006700 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 80066f2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80066f4:	f000 fe4a 	bl	800738c <vPortFree>
				vPortFree( pxTCB );
 80066f8:	4620      	mov	r0, r4
 80066fa:	f000 fe47 	bl	800738c <vPortFree>
	}
 80066fe:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006700:	2b01      	cmp	r3, #1
 8006702:	d00a      	beq.n	800671a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006704:	2b02      	cmp	r3, #2
 8006706:	d0fa      	beq.n	80066fe <prvDeleteTCB+0x16>
 8006708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	e7fe      	b.n	8006718 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 800671a:	f000 fe37 	bl	800738c <vPortFree>
 800671e:	e7ee      	b.n	80066fe <prvDeleteTCB+0x16>

08006720 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006720:	4b0f      	ldr	r3, [pc, #60]	; (8006760 <prvCheckTasksWaitingTermination+0x40>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	b1d3      	cbz	r3, 800675c <prvCheckTasksWaitingTermination+0x3c>
{
 8006726:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8006728:	f000 fc24 	bl	8006f74 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800672c:	4b0d      	ldr	r3, [pc, #52]	; (8006764 <prvCheckTasksWaitingTermination+0x44>)
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006732:	1d20      	adds	r0, r4, #4
 8006734:	f7ff fcc1 	bl	80060ba <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006738:	4a0b      	ldr	r2, [pc, #44]	; (8006768 <prvCheckTasksWaitingTermination+0x48>)
 800673a:	6813      	ldr	r3, [r2, #0]
 800673c:	3b01      	subs	r3, #1
 800673e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006740:	4a07      	ldr	r2, [pc, #28]	; (8006760 <prvCheckTasksWaitingTermination+0x40>)
 8006742:	6813      	ldr	r3, [r2, #0]
 8006744:	3b01      	subs	r3, #1
 8006746:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8006748:	f000 fc36 	bl	8006fb8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800674c:	4620      	mov	r0, r4
 800674e:	f7ff ffcb 	bl	80066e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006752:	4b03      	ldr	r3, [pc, #12]	; (8006760 <prvCheckTasksWaitingTermination+0x40>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1e6      	bne.n	8006728 <prvCheckTasksWaitingTermination+0x8>
}
 800675a:	bd10      	pop	{r4, pc}
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	20000400 	.word	0x20000400
 8006764:	20000470 	.word	0x20000470
 8006768:	200003fc 	.word	0x200003fc

0800676c <prvIdleTask>:
{
 800676c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800676e:	f7ff ffd7 	bl	8006720 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006772:	4b06      	ldr	r3, [pc, #24]	; (800678c <prvIdleTask+0x20>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d9f9      	bls.n	800676e <prvIdleTask+0x2>
				taskYIELD();
 800677a:	4b05      	ldr	r3, [pc, #20]	; (8006790 <prvIdleTask+0x24>)
 800677c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	e7f0      	b.n	800676e <prvIdleTask+0x2>
 800678c:	20000370 	.word	0x20000370
 8006790:	e000ed04 	.word	0xe000ed04

08006794 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006794:	b570      	push	{r4, r5, r6, lr}
 8006796:	4604      	mov	r4, r0
 8006798:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800679a:	4b1d      	ldr	r3, [pc, #116]	; (8006810 <prvAddCurrentTaskToDelayedList+0x7c>)
 800679c:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800679e:	4b1d      	ldr	r3, [pc, #116]	; (8006814 <prvAddCurrentTaskToDelayedList+0x80>)
 80067a0:	6818      	ldr	r0, [r3, #0]
 80067a2:	3004      	adds	r0, #4
 80067a4:	f7ff fc89 	bl	80060ba <uxListRemove>
 80067a8:	b950      	cbnz	r0, 80067c0 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80067aa:	4b1a      	ldr	r3, [pc, #104]	; (8006814 <prvAddCurrentTaskToDelayedList+0x80>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b0:	2301      	movs	r3, #1
 80067b2:	fa03 f202 	lsl.w	r2, r3, r2
 80067b6:	4918      	ldr	r1, [pc, #96]	; (8006818 <prvAddCurrentTaskToDelayedList+0x84>)
 80067b8:	680b      	ldr	r3, [r1, #0]
 80067ba:	ea23 0302 	bic.w	r3, r3, r2
 80067be:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067c0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80067c4:	d013      	beq.n	80067ee <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067c6:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067c8:	4b12      	ldr	r3, [pc, #72]	; (8006814 <prvAddCurrentTaskToDelayedList+0x80>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80067ce:	42a5      	cmp	r5, r4
 80067d0:	d816      	bhi.n	8006800 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067d2:	4b12      	ldr	r3, [pc, #72]	; (800681c <prvAddCurrentTaskToDelayedList+0x88>)
 80067d4:	6818      	ldr	r0, [r3, #0]
 80067d6:	4b0f      	ldr	r3, [pc, #60]	; (8006814 <prvAddCurrentTaskToDelayedList+0x80>)
 80067d8:	6819      	ldr	r1, [r3, #0]
 80067da:	3104      	adds	r1, #4
 80067dc:	f7ff fc53 	bl	8006086 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80067e0:	4b0f      	ldr	r3, [pc, #60]	; (8006820 <prvAddCurrentTaskToDelayedList+0x8c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	42a3      	cmp	r3, r4
 80067e6:	d912      	bls.n	800680e <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
 80067e8:	4b0d      	ldr	r3, [pc, #52]	; (8006820 <prvAddCurrentTaskToDelayedList+0x8c>)
 80067ea:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067ec:	e00f      	b.n	800680e <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067ee:	2e00      	cmp	r6, #0
 80067f0:	d0e9      	beq.n	80067c6 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067f2:	4b08      	ldr	r3, [pc, #32]	; (8006814 <prvAddCurrentTaskToDelayedList+0x80>)
 80067f4:	6819      	ldr	r1, [r3, #0]
 80067f6:	3104      	adds	r1, #4
 80067f8:	480a      	ldr	r0, [pc, #40]	; (8006824 <prvAddCurrentTaskToDelayedList+0x90>)
 80067fa:	f7ff fc38 	bl	800606e <vListInsertEnd>
 80067fe:	e006      	b.n	800680e <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006800:	4b09      	ldr	r3, [pc, #36]	; (8006828 <prvAddCurrentTaskToDelayedList+0x94>)
 8006802:	6818      	ldr	r0, [r3, #0]
 8006804:	4b03      	ldr	r3, [pc, #12]	; (8006814 <prvAddCurrentTaskToDelayedList+0x80>)
 8006806:	6819      	ldr	r1, [r3, #0]
 8006808:	3104      	adds	r1, #4
 800680a:	f7ff fc3c 	bl	8006086 <vListInsert>
}
 800680e:	bd70      	pop	{r4, r5, r6, pc}
 8006810:	20000484 	.word	0x20000484
 8006814:	20000364 	.word	0x20000364
 8006818:	20000410 	.word	0x20000410
 800681c:	20000368 	.word	0x20000368
 8006820:	2000043c 	.word	0x2000043c
 8006824:	2000045c 	.word	0x2000045c
 8006828:	2000036c 	.word	0x2000036c

0800682c <xTaskCreateStatic>:
	{
 800682c:	b570      	push	{r4, r5, r6, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006832:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8006834:	b945      	cbnz	r5, 8006848 <xTaskCreateStatic+0x1c>
 8006836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	e7fe      	b.n	8006846 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8006848:	b944      	cbnz	r4, 800685c <xTaskCreateStatic+0x30>
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	e7fe      	b.n	800685a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800685c:	2654      	movs	r6, #84	; 0x54
 800685e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006860:	9e04      	ldr	r6, [sp, #16]
 8006862:	2e54      	cmp	r6, #84	; 0x54
 8006864:	d008      	beq.n	8006878 <xTaskCreateStatic+0x4c>
 8006866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	e7fe      	b.n	8006876 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006878:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800687a:	2502      	movs	r5, #2
 800687c:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006880:	2500      	movs	r5, #0
 8006882:	9503      	str	r5, [sp, #12]
 8006884:	9402      	str	r4, [sp, #8]
 8006886:	ad05      	add	r5, sp, #20
 8006888:	9501      	str	r5, [sp, #4]
 800688a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800688c:	9500      	str	r5, [sp, #0]
 800688e:	f7ff fe63 	bl	8006558 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006892:	4620      	mov	r0, r4
 8006894:	f7ff fed4 	bl	8006640 <prvAddNewTaskToReadyList>
	}
 8006898:	9805      	ldr	r0, [sp, #20]
 800689a:	b006      	add	sp, #24
 800689c:	bd70      	pop	{r4, r5, r6, pc}

0800689e <xTaskCreate>:
	{
 800689e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068a2:	b085      	sub	sp, #20
 80068a4:	4607      	mov	r7, r0
 80068a6:	4688      	mov	r8, r1
 80068a8:	4615      	mov	r5, r2
 80068aa:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ac:	0090      	lsls	r0, r2, #2
 80068ae:	f000 fce9 	bl	8007284 <pvPortMalloc>
			if( pxStack != NULL )
 80068b2:	b308      	cbz	r0, 80068f8 <xTaskCreate+0x5a>
 80068b4:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80068b6:	2054      	movs	r0, #84	; 0x54
 80068b8:	f000 fce4 	bl	8007284 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80068bc:	4604      	mov	r4, r0
 80068be:	b1b8      	cbz	r0, 80068f0 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 80068c0:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80068c2:	b1e4      	cbz	r4, 80068fe <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068c4:	2300      	movs	r3, #0
 80068c6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068ca:	9303      	str	r3, [sp, #12]
 80068cc:	9402      	str	r4, [sp, #8]
 80068ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068d0:	9301      	str	r3, [sp, #4]
 80068d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	464b      	mov	r3, r9
 80068d8:	462a      	mov	r2, r5
 80068da:	4641      	mov	r1, r8
 80068dc:	4638      	mov	r0, r7
 80068de:	f7ff fe3b 	bl	8006558 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068e2:	4620      	mov	r0, r4
 80068e4:	f7ff feac 	bl	8006640 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068e8:	2001      	movs	r0, #1
	}
 80068ea:	b005      	add	sp, #20
 80068ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80068f0:	4630      	mov	r0, r6
 80068f2:	f000 fd4b 	bl	800738c <vPortFree>
 80068f6:	e7e4      	b.n	80068c2 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068fc:	e7f5      	b.n	80068ea <xTaskCreate+0x4c>
 80068fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8006902:	e7f2      	b.n	80068ea <xTaskCreate+0x4c>

08006904 <vTaskStartScheduler>:
{
 8006904:	b510      	push	{r4, lr}
 8006906:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006908:	2400      	movs	r4, #0
 800690a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800690c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800690e:	aa07      	add	r2, sp, #28
 8006910:	a906      	add	r1, sp, #24
 8006912:	a805      	add	r0, sp, #20
 8006914:	f001 f934 	bl	8007b80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006918:	9b05      	ldr	r3, [sp, #20]
 800691a:	9302      	str	r3, [sp, #8]
 800691c:	9b06      	ldr	r3, [sp, #24]
 800691e:	9301      	str	r3, [sp, #4]
 8006920:	9400      	str	r4, [sp, #0]
 8006922:	4623      	mov	r3, r4
 8006924:	9a07      	ldr	r2, [sp, #28]
 8006926:	490d      	ldr	r1, [pc, #52]	; (800695c <vTaskStartScheduler+0x58>)
 8006928:	480d      	ldr	r0, [pc, #52]	; (8006960 <vTaskStartScheduler+0x5c>)
 800692a:	f7ff ff7f 	bl	800682c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800692e:	b908      	cbnz	r0, 8006934 <vTaskStartScheduler+0x30>
}
 8006930:	b008      	add	sp, #32
 8006932:	bd10      	pop	{r4, pc}
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8006944:	4b07      	ldr	r3, [pc, #28]	; (8006964 <vTaskStartScheduler+0x60>)
 8006946:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800694a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800694c:	4b06      	ldr	r3, [pc, #24]	; (8006968 <vTaskStartScheduler+0x64>)
 800694e:	2201      	movs	r2, #1
 8006950:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006952:	4b06      	ldr	r3, [pc, #24]	; (800696c <vTaskStartScheduler+0x68>)
 8006954:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8006956:	f000 fbaf 	bl	80070b8 <xPortStartScheduler>
 800695a:	e7e9      	b.n	8006930 <vTaskStartScheduler+0x2c>
 800695c:	0800eab4 	.word	0x0800eab4
 8006960:	0800676d 	.word	0x0800676d
 8006964:	2000043c 	.word	0x2000043c
 8006968:	20000458 	.word	0x20000458
 800696c:	20000484 	.word	0x20000484

08006970 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006970:	4a02      	ldr	r2, [pc, #8]	; (800697c <vTaskSuspendAll+0xc>)
 8006972:	6813      	ldr	r3, [r2, #0]
 8006974:	3301      	adds	r3, #1
 8006976:	6013      	str	r3, [r2, #0]
}
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	20000408 	.word	0x20000408

08006980 <xTaskIncrementTick>:
{
 8006980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006982:	4b3a      	ldr	r3, [pc, #232]	; (8006a6c <xTaskIncrementTick+0xec>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d164      	bne.n	8006a54 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800698a:	4b39      	ldr	r3, [pc, #228]	; (8006a70 <xTaskIncrementTick+0xf0>)
 800698c:	681d      	ldr	r5, [r3, #0]
 800698e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8006990:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006992:	b9c5      	cbnz	r5, 80069c6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8006994:	4b37      	ldr	r3, [pc, #220]	; (8006a74 <xTaskIncrementTick+0xf4>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	b143      	cbz	r3, 80069ae <xTaskIncrementTick+0x2e>
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	e7fe      	b.n	80069ac <xTaskIncrementTick+0x2c>
 80069ae:	4a31      	ldr	r2, [pc, #196]	; (8006a74 <xTaskIncrementTick+0xf4>)
 80069b0:	6811      	ldr	r1, [r2, #0]
 80069b2:	4b31      	ldr	r3, [pc, #196]	; (8006a78 <xTaskIncrementTick+0xf8>)
 80069b4:	6818      	ldr	r0, [r3, #0]
 80069b6:	6010      	str	r0, [r2, #0]
 80069b8:	6019      	str	r1, [r3, #0]
 80069ba:	4a30      	ldr	r2, [pc, #192]	; (8006a7c <xTaskIncrementTick+0xfc>)
 80069bc:	6813      	ldr	r3, [r2, #0]
 80069be:	3301      	adds	r3, #1
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	f7ff fdb3 	bl	800652c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069c6:	4b2e      	ldr	r3, [pc, #184]	; (8006a80 <xTaskIncrementTick+0x100>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	42ab      	cmp	r3, r5
 80069cc:	d938      	bls.n	8006a40 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 80069ce:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80069d0:	4b2c      	ldr	r3, [pc, #176]	; (8006a84 <xTaskIncrementTick+0x104>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80069da:	009a      	lsls	r2, r3, #2
 80069dc:	4b2a      	ldr	r3, [pc, #168]	; (8006a88 <xTaskIncrementTick+0x108>)
 80069de:	589b      	ldr	r3, [r3, r2]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d93c      	bls.n	8006a5e <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 80069e4:	2401      	movs	r4, #1
 80069e6:	e03a      	b.n	8006a5e <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 80069e8:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069ea:	4b22      	ldr	r3, [pc, #136]	; (8006a74 <xTaskIncrementTick+0xf4>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	b343      	cbz	r3, 8006a44 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80069f2:	4b20      	ldr	r3, [pc, #128]	; (8006a74 <xTaskIncrementTick+0xf4>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069fa:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80069fc:	429d      	cmp	r5, r3
 80069fe:	d326      	bcc.n	8006a4e <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a00:	1d37      	adds	r7, r6, #4
 8006a02:	4638      	mov	r0, r7
 8006a04:	f7ff fb59 	bl	80060ba <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a08:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006a0a:	b11b      	cbz	r3, 8006a14 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a0c:	f106 0018 	add.w	r0, r6, #24
 8006a10:	f7ff fb53 	bl	80060ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a14:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8006a16:	2201      	movs	r2, #1
 8006a18:	409a      	lsls	r2, r3
 8006a1a:	491c      	ldr	r1, [pc, #112]	; (8006a8c <xTaskIncrementTick+0x10c>)
 8006a1c:	6808      	ldr	r0, [r1, #0]
 8006a1e:	4302      	orrs	r2, r0
 8006a20:	600a      	str	r2, [r1, #0]
 8006a22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006a26:	009a      	lsls	r2, r3, #2
 8006a28:	4639      	mov	r1, r7
 8006a2a:	4817      	ldr	r0, [pc, #92]	; (8006a88 <xTaskIncrementTick+0x108>)
 8006a2c:	4410      	add	r0, r2
 8006a2e:	f7ff fb1e 	bl	800606e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a32:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8006a34:	4b13      	ldr	r3, [pc, #76]	; (8006a84 <xTaskIncrementTick+0x104>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d2d4      	bcs.n	80069e8 <xTaskIncrementTick+0x68>
 8006a3e:	e7d4      	b.n	80069ea <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8006a40:	2400      	movs	r4, #0
 8006a42:	e7d2      	b.n	80069ea <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a44:	4b0e      	ldr	r3, [pc, #56]	; (8006a80 <xTaskIncrementTick+0x100>)
 8006a46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a4a:	601a      	str	r2, [r3, #0]
					break;
 8006a4c:	e7c0      	b.n	80069d0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8006a4e:	4a0c      	ldr	r2, [pc, #48]	; (8006a80 <xTaskIncrementTick+0x100>)
 8006a50:	6013      	str	r3, [r2, #0]
						break;
 8006a52:	e7bd      	b.n	80069d0 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8006a54:	4a0e      	ldr	r2, [pc, #56]	; (8006a90 <xTaskIncrementTick+0x110>)
 8006a56:	6813      	ldr	r3, [r2, #0]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8006a5c:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8006a5e:	4b0d      	ldr	r3, [pc, #52]	; (8006a94 <xTaskIncrementTick+0x114>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	b103      	cbz	r3, 8006a66 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8006a64:	2401      	movs	r4, #1
}
 8006a66:	4620      	mov	r0, r4
 8006a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000408 	.word	0x20000408
 8006a70:	20000484 	.word	0x20000484
 8006a74:	20000368 	.word	0x20000368
 8006a78:	2000036c 	.word	0x2000036c
 8006a7c:	20000440 	.word	0x20000440
 8006a80:	2000043c 	.word	0x2000043c
 8006a84:	20000364 	.word	0x20000364
 8006a88:	20000370 	.word	0x20000370
 8006a8c:	20000410 	.word	0x20000410
 8006a90:	20000404 	.word	0x20000404
 8006a94:	20000488 	.word	0x20000488

08006a98 <xTaskResumeAll>:
{
 8006a98:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8006a9a:	4b33      	ldr	r3, [pc, #204]	; (8006b68 <xTaskResumeAll+0xd0>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	b943      	cbnz	r3, 8006ab2 <xTaskResumeAll+0x1a>
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	e7fe      	b.n	8006ab0 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8006ab2:	f000 fa5f 	bl	8006f74 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8006ab6:	4b2c      	ldr	r3, [pc, #176]	; (8006b68 <xTaskResumeAll+0xd0>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	3a01      	subs	r2, #1
 8006abc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d14d      	bne.n	8006b60 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ac4:	4b29      	ldr	r3, [pc, #164]	; (8006b6c <xTaskResumeAll+0xd4>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	b923      	cbnz	r3, 8006ad4 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 8006aca:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006acc:	f000 fa74 	bl	8006fb8 <vPortExitCritical>
}
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 8006ad4:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ad6:	4b26      	ldr	r3, [pc, #152]	; (8006b70 <xTaskResumeAll+0xd8>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	b31b      	cbz	r3, 8006b24 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006adc:	4b24      	ldr	r3, [pc, #144]	; (8006b70 <xTaskResumeAll+0xd8>)
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ae2:	f104 0018 	add.w	r0, r4, #24
 8006ae6:	f7ff fae8 	bl	80060ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aea:	1d25      	adds	r5, r4, #4
 8006aec:	4628      	mov	r0, r5
 8006aee:	f7ff fae4 	bl	80060ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006af2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006af4:	2201      	movs	r2, #1
 8006af6:	409a      	lsls	r2, r3
 8006af8:	491e      	ldr	r1, [pc, #120]	; (8006b74 <xTaskResumeAll+0xdc>)
 8006afa:	6808      	ldr	r0, [r1, #0]
 8006afc:	4302      	orrs	r2, r0
 8006afe:	600a      	str	r2, [r1, #0]
 8006b00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006b04:	009a      	lsls	r2, r3, #2
 8006b06:	4629      	mov	r1, r5
 8006b08:	481b      	ldr	r0, [pc, #108]	; (8006b78 <xTaskResumeAll+0xe0>)
 8006b0a:	4410      	add	r0, r2
 8006b0c:	f7ff faaf 	bl	800606e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006b12:	4b1a      	ldr	r3, [pc, #104]	; (8006b7c <xTaskResumeAll+0xe4>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d3dc      	bcc.n	8006ad6 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 8006b1c:	4b18      	ldr	r3, [pc, #96]	; (8006b80 <xTaskResumeAll+0xe8>)
 8006b1e:	2201      	movs	r2, #1
 8006b20:	601a      	str	r2, [r3, #0]
 8006b22:	e7d8      	b.n	8006ad6 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 8006b24:	b10c      	cbz	r4, 8006b2a <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8006b26:	f7ff fd01 	bl	800652c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006b2a:	4b16      	ldr	r3, [pc, #88]	; (8006b84 <xTaskResumeAll+0xec>)
 8006b2c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006b2e:	b154      	cbz	r4, 8006b46 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 8006b30:	f7ff ff26 	bl	8006980 <xTaskIncrementTick>
 8006b34:	b110      	cbz	r0, 8006b3c <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8006b36:	4b12      	ldr	r3, [pc, #72]	; (8006b80 <xTaskResumeAll+0xe8>)
 8006b38:	2201      	movs	r2, #1
 8006b3a:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006b3c:	3c01      	subs	r4, #1
 8006b3e:	d1f7      	bne.n	8006b30 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 8006b40:	4b10      	ldr	r3, [pc, #64]	; (8006b84 <xTaskResumeAll+0xec>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8006b46:	4b0e      	ldr	r3, [pc, #56]	; (8006b80 <xTaskResumeAll+0xe8>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	b15b      	cbz	r3, 8006b64 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8006b4c:	4b0e      	ldr	r3, [pc, #56]	; (8006b88 <xTaskResumeAll+0xf0>)
 8006b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8006b5c:	2401      	movs	r4, #1
 8006b5e:	e7b5      	b.n	8006acc <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8006b60:	2400      	movs	r4, #0
 8006b62:	e7b3      	b.n	8006acc <xTaskResumeAll+0x34>
 8006b64:	2400      	movs	r4, #0
 8006b66:	e7b1      	b.n	8006acc <xTaskResumeAll+0x34>
 8006b68:	20000408 	.word	0x20000408
 8006b6c:	200003fc 	.word	0x200003fc
 8006b70:	20000444 	.word	0x20000444
 8006b74:	20000410 	.word	0x20000410
 8006b78:	20000370 	.word	0x20000370
 8006b7c:	20000364 	.word	0x20000364
 8006b80:	20000488 	.word	0x20000488
 8006b84:	20000404 	.word	0x20000404
 8006b88:	e000ed04 	.word	0xe000ed04

08006b8c <vTaskDelay>:
	{
 8006b8c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b8e:	b1a8      	cbz	r0, 8006bbc <vTaskDelay+0x30>
 8006b90:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8006b92:	4b0f      	ldr	r3, [pc, #60]	; (8006bd0 <vTaskDelay+0x44>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	b143      	cbz	r3, 8006baa <vTaskDelay+0x1e>
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	e7fe      	b.n	8006ba8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006baa:	f7ff fee1 	bl	8006970 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006bae:	2100      	movs	r1, #0
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f7ff fdef 	bl	8006794 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8006bb6:	f7ff ff6f 	bl	8006a98 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006bba:	b938      	cbnz	r0, 8006bcc <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8006bbc:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <vTaskDelay+0x48>)
 8006bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	f3bf 8f6f 	isb	sy
	}
 8006bcc:	bd10      	pop	{r4, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000408 	.word	0x20000408
 8006bd4:	e000ed04 	.word	0xe000ed04

08006bd8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006bd8:	4b20      	ldr	r3, [pc, #128]	; (8006c5c <vTaskSwitchContext+0x84>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	b11b      	cbz	r3, 8006be6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006bde:	4b20      	ldr	r3, [pc, #128]	; (8006c60 <vTaskSwitchContext+0x88>)
 8006be0:	2201      	movs	r2, #1
 8006be2:	601a      	str	r2, [r3, #0]
 8006be4:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8006be6:	4b1e      	ldr	r3, [pc, #120]	; (8006c60 <vTaskSwitchContext+0x88>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006bec:	4b1d      	ldr	r3, [pc, #116]	; (8006c64 <vTaskSwitchContext+0x8c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006bf0:	fab3 f383 	clz	r3, r3
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	f1c3 031f 	rsb	r3, r3, #31
 8006bfa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006bfe:	008a      	lsls	r2, r1, #2
 8006c00:	4919      	ldr	r1, [pc, #100]	; (8006c68 <vTaskSwitchContext+0x90>)
 8006c02:	588a      	ldr	r2, [r1, r2]
 8006c04:	b942      	cbnz	r2, 8006c18 <vTaskSwitchContext+0x40>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	e7fe      	b.n	8006c16 <vTaskSwitchContext+0x3e>
{
 8006c18:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006c1a:	4813      	ldr	r0, [pc, #76]	; (8006c68 <vTaskSwitchContext+0x90>)
 8006c1c:	009a      	lsls	r2, r3, #2
 8006c1e:	18d4      	adds	r4, r2, r3
 8006c20:	00a1      	lsls	r1, r4, #2
 8006c22:	4401      	add	r1, r0
 8006c24:	684c      	ldr	r4, [r1, #4]
 8006c26:	6864      	ldr	r4, [r4, #4]
 8006c28:	604c      	str	r4, [r1, #4]
 8006c2a:	441a      	add	r2, r3
 8006c2c:	0091      	lsls	r1, r2, #2
 8006c2e:	3108      	adds	r1, #8
 8006c30:	4408      	add	r0, r1
 8006c32:	4284      	cmp	r4, r0
 8006c34:	d00b      	beq.n	8006c4e <vTaskSwitchContext+0x76>
 8006c36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006c3a:	009a      	lsls	r2, r3, #2
 8006c3c:	4b0a      	ldr	r3, [pc, #40]	; (8006c68 <vTaskSwitchContext+0x90>)
 8006c3e:	4413      	add	r3, r2
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	68da      	ldr	r2, [r3, #12]
 8006c44:	4b09      	ldr	r3, [pc, #36]	; (8006c6c <vTaskSwitchContext+0x94>)
 8006c46:	601a      	str	r2, [r3, #0]
}
 8006c48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c4c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006c4e:	6861      	ldr	r1, [r4, #4]
 8006c50:	4805      	ldr	r0, [pc, #20]	; (8006c68 <vTaskSwitchContext+0x90>)
 8006c52:	2214      	movs	r2, #20
 8006c54:	fb02 0203 	mla	r2, r2, r3, r0
 8006c58:	6051      	str	r1, [r2, #4]
 8006c5a:	e7ec      	b.n	8006c36 <vTaskSwitchContext+0x5e>
 8006c5c:	20000408 	.word	0x20000408
 8006c60:	20000488 	.word	0x20000488
 8006c64:	20000410 	.word	0x20000410
 8006c68:	20000370 	.word	0x20000370
 8006c6c:	20000364 	.word	0x20000364

08006c70 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006c70:	b940      	cbnz	r0, 8006c84 <vTaskPlaceOnEventList+0x14>
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	e7fe      	b.n	8006c82 <vTaskPlaceOnEventList+0x12>
{
 8006c84:	b510      	push	{r4, lr}
 8006c86:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c88:	4b04      	ldr	r3, [pc, #16]	; (8006c9c <vTaskPlaceOnEventList+0x2c>)
 8006c8a:	6819      	ldr	r1, [r3, #0]
 8006c8c:	3118      	adds	r1, #24
 8006c8e:	f7ff f9fa 	bl	8006086 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c92:	2101      	movs	r1, #1
 8006c94:	4620      	mov	r0, r4
 8006c96:	f7ff fd7d 	bl	8006794 <prvAddCurrentTaskToDelayedList>
}
 8006c9a:	bd10      	pop	{r4, pc}
 8006c9c:	20000364 	.word	0x20000364

08006ca0 <xTaskRemoveFromEventList>:
{
 8006ca0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006ca2:	68c3      	ldr	r3, [r0, #12]
 8006ca4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006ca6:	b944      	cbnz	r4, 8006cba <xTaskRemoveFromEventList+0x1a>
 8006ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	e7fe      	b.n	8006cb8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006cba:	f104 0518 	add.w	r5, r4, #24
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f7ff f9fb 	bl	80060ba <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cc4:	4b13      	ldr	r3, [pc, #76]	; (8006d14 <xTaskRemoveFromEventList+0x74>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	b9e3      	cbnz	r3, 8006d04 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006cca:	1d25      	adds	r5, r4, #4
 8006ccc:	4628      	mov	r0, r5
 8006cce:	f7ff f9f4 	bl	80060ba <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006cd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	409a      	lsls	r2, r3
 8006cd8:	490f      	ldr	r1, [pc, #60]	; (8006d18 <xTaskRemoveFromEventList+0x78>)
 8006cda:	6808      	ldr	r0, [r1, #0]
 8006cdc:	4302      	orrs	r2, r0
 8006cde:	600a      	str	r2, [r1, #0]
 8006ce0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006ce4:	009a      	lsls	r2, r3, #2
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	480c      	ldr	r0, [pc, #48]	; (8006d1c <xTaskRemoveFromEventList+0x7c>)
 8006cea:	4410      	add	r0, r2
 8006cec:	f7ff f9bf 	bl	800606e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cf0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006cf2:	4b0b      	ldr	r3, [pc, #44]	; (8006d20 <xTaskRemoveFromEventList+0x80>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d908      	bls.n	8006d0e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8006cfc:	2001      	movs	r0, #1
 8006cfe:	4b09      	ldr	r3, [pc, #36]	; (8006d24 <xTaskRemoveFromEventList+0x84>)
 8006d00:	6018      	str	r0, [r3, #0]
}
 8006d02:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d04:	4629      	mov	r1, r5
 8006d06:	4808      	ldr	r0, [pc, #32]	; (8006d28 <xTaskRemoveFromEventList+0x88>)
 8006d08:	f7ff f9b1 	bl	800606e <vListInsertEnd>
 8006d0c:	e7f0      	b.n	8006cf0 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 8006d0e:	2000      	movs	r0, #0
	return xReturn;
 8006d10:	e7f7      	b.n	8006d02 <xTaskRemoveFromEventList+0x62>
 8006d12:	bf00      	nop
 8006d14:	20000408 	.word	0x20000408
 8006d18:	20000410 	.word	0x20000410
 8006d1c:	20000370 	.word	0x20000370
 8006d20:	20000364 	.word	0x20000364
 8006d24:	20000488 	.word	0x20000488
 8006d28:	20000444 	.word	0x20000444

08006d2c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d2c:	4b03      	ldr	r3, [pc, #12]	; (8006d3c <vTaskInternalSetTimeOutState+0x10>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d32:	4b03      	ldr	r3, [pc, #12]	; (8006d40 <vTaskInternalSetTimeOutState+0x14>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6043      	str	r3, [r0, #4]
}
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	20000440 	.word	0x20000440
 8006d40:	20000484 	.word	0x20000484

08006d44 <xTaskCheckForTimeOut>:
{
 8006d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8006d46:	b150      	cbz	r0, 8006d5e <xTaskCheckForTimeOut+0x1a>
 8006d48:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8006d4a:	b989      	cbnz	r1, 8006d70 <xTaskCheckForTimeOut+0x2c>
 8006d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	e7fe      	b.n	8006d5c <xTaskCheckForTimeOut+0x18>
 8006d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	e7fe      	b.n	8006d6e <xTaskCheckForTimeOut+0x2a>
 8006d70:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8006d72:	f000 f8ff 	bl	8006f74 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006d76:	4b11      	ldr	r3, [pc, #68]	; (8006dbc <xTaskCheckForTimeOut+0x78>)
 8006d78:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d7a:	6868      	ldr	r0, [r5, #4]
 8006d7c:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d84:	d016      	beq.n	8006db4 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d86:	682f      	ldr	r7, [r5, #0]
 8006d88:	4e0d      	ldr	r6, [pc, #52]	; (8006dc0 <xTaskCheckForTimeOut+0x7c>)
 8006d8a:	6836      	ldr	r6, [r6, #0]
 8006d8c:	42b7      	cmp	r7, r6
 8006d8e:	d001      	beq.n	8006d94 <xTaskCheckForTimeOut+0x50>
 8006d90:	4288      	cmp	r0, r1
 8006d92:	d911      	bls.n	8006db8 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d803      	bhi.n	8006da0 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006d9c:	2401      	movs	r4, #1
 8006d9e:	e005      	b.n	8006dac <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8006da0:	1a9b      	subs	r3, r3, r2
 8006da2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006da4:	4628      	mov	r0, r5
 8006da6:	f7ff ffc1 	bl	8006d2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006daa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006dac:	f000 f904 	bl	8006fb8 <vPortExitCritical>
}
 8006db0:	4620      	mov	r0, r4
 8006db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8006db4:	2400      	movs	r4, #0
 8006db6:	e7f9      	b.n	8006dac <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8006db8:	2401      	movs	r4, #1
 8006dba:	e7f7      	b.n	8006dac <xTaskCheckForTimeOut+0x68>
 8006dbc:	20000484 	.word	0x20000484
 8006dc0:	20000440 	.word	0x20000440

08006dc4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006dc4:	4b01      	ldr	r3, [pc, #4]	; (8006dcc <vTaskMissedYield+0x8>)
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	601a      	str	r2, [r3, #0]
}
 8006dca:	4770      	bx	lr
 8006dcc:	20000488 	.word	0x20000488

08006dd0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006dd0:	4b05      	ldr	r3, [pc, #20]	; (8006de8 <xTaskGetSchedulerState+0x18>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	b133      	cbz	r3, 8006de4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dd6:	4b05      	ldr	r3, [pc, #20]	; (8006dec <xTaskGetSchedulerState+0x1c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	b10b      	cbz	r3, 8006de0 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ddc:	2000      	movs	r0, #0
	}
 8006dde:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8006de0:	2002      	movs	r0, #2
 8006de2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006de4:	2001      	movs	r0, #1
 8006de6:	4770      	bx	lr
 8006de8:	20000458 	.word	0x20000458
 8006dec:	20000408 	.word	0x20000408

08006df0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8006df0:	2800      	cmp	r0, #0
 8006df2:	d049      	beq.n	8006e88 <xTaskPriorityDisinherit+0x98>
	{
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8006df8:	4a26      	ldr	r2, [pc, #152]	; (8006e94 <xTaskPriorityDisinherit+0xa4>)
 8006dfa:	6812      	ldr	r2, [r2, #0]
 8006dfc:	4282      	cmp	r2, r0
 8006dfe:	d008      	beq.n	8006e12 <xTaskPriorityDisinherit+0x22>
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	e7fe      	b.n	8006e10 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e12:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8006e14:	b942      	cbnz	r2, 8006e28 <xTaskPriorityDisinherit+0x38>
 8006e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	e7fe      	b.n	8006e26 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8006e28:	3a01      	subs	r2, #1
 8006e2a:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e2c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8006e2e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006e30:	4288      	cmp	r0, r1
 8006e32:	d02b      	beq.n	8006e8c <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e34:	bb62      	cbnz	r2, 8006e90 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e36:	1d25      	adds	r5, r4, #4
 8006e38:	4628      	mov	r0, r5
 8006e3a:	f7ff f93e 	bl	80060ba <uxListRemove>
 8006e3e:	b970      	cbnz	r0, 8006e5e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006e40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006e42:	2314      	movs	r3, #20
 8006e44:	fb03 f302 	mul.w	r3, r3, r2
 8006e48:	4913      	ldr	r1, [pc, #76]	; (8006e98 <xTaskPriorityDisinherit+0xa8>)
 8006e4a:	58cb      	ldr	r3, [r1, r3]
 8006e4c:	b93b      	cbnz	r3, 8006e5e <xTaskPriorityDisinherit+0x6e>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	fa03 f202 	lsl.w	r2, r3, r2
 8006e54:	4911      	ldr	r1, [pc, #68]	; (8006e9c <xTaskPriorityDisinherit+0xac>)
 8006e56:	680b      	ldr	r3, [r1, #0]
 8006e58:	ea23 0302 	bic.w	r3, r3, r2
 8006e5c:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006e60:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e62:	f1c3 0207 	rsb	r2, r3, #7
 8006e66:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e68:	2401      	movs	r4, #1
 8006e6a:	fa04 f203 	lsl.w	r2, r4, r3
 8006e6e:	490b      	ldr	r1, [pc, #44]	; (8006e9c <xTaskPriorityDisinherit+0xac>)
 8006e70:	6808      	ldr	r0, [r1, #0]
 8006e72:	4302      	orrs	r2, r0
 8006e74:	600a      	str	r2, [r1, #0]
 8006e76:	4629      	mov	r1, r5
 8006e78:	4a07      	ldr	r2, [pc, #28]	; (8006e98 <xTaskPriorityDisinherit+0xa8>)
 8006e7a:	2014      	movs	r0, #20
 8006e7c:	fb00 2003 	mla	r0, r0, r3, r2
 8006e80:	f7ff f8f5 	bl	800606e <vListInsertEnd>
					xReturn = pdTRUE;
 8006e84:	4620      	mov	r0, r4
	}
 8006e86:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8006e88:	2000      	movs	r0, #0
	}
 8006e8a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	e7fa      	b.n	8006e86 <xTaskPriorityDisinherit+0x96>
 8006e90:	2000      	movs	r0, #0
		return xReturn;
 8006e92:	e7f8      	b.n	8006e86 <xTaskPriorityDisinherit+0x96>
 8006e94:	20000364 	.word	0x20000364
 8006e98:	20000370 	.word	0x20000370
 8006e9c:	20000410 	.word	0x20000410

08006ea0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ea0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ea6:	4b0d      	ldr	r3, [pc, #52]	; (8006edc <prvTaskExitError+0x3c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eae:	d008      	beq.n	8006ec2 <prvTaskExitError+0x22>
 8006eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	e7fe      	b.n	8006ec0 <prvTaskExitError+0x20>
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ed2:	9b01      	ldr	r3, [sp, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d0fc      	beq.n	8006ed2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ed8:	b002      	add	sp, #8
 8006eda:	4770      	bx	lr
 8006edc:	20000074 	.word	0x20000074

08006ee0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ee0:	4808      	ldr	r0, [pc, #32]	; (8006f04 <prvPortStartFirstTask+0x24>)
 8006ee2:	6800      	ldr	r0, [r0, #0]
 8006ee4:	6800      	ldr	r0, [r0, #0]
 8006ee6:	f380 8808 	msr	MSP, r0
 8006eea:	f04f 0000 	mov.w	r0, #0
 8006eee:	f380 8814 	msr	CONTROL, r0
 8006ef2:	b662      	cpsie	i
 8006ef4:	b661      	cpsie	f
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	df00      	svc	0
 8006f00:	bf00      	nop
 8006f02:	0000      	.short	0x0000
 8006f04:	e000ed08 	.word	0xe000ed08

08006f08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f08:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f18 <vPortEnableVFP+0x10>
 8006f0c:	6801      	ldr	r1, [r0, #0]
 8006f0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f12:	6001      	str	r1, [r0, #0]
 8006f14:	4770      	bx	lr
 8006f16:	0000      	.short	0x0000
 8006f18:	e000ed88 	.word	0xe000ed88

08006f1c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f20:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f24:	f021 0101 	bic.w	r1, r1, #1
 8006f28:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f2c:	4b05      	ldr	r3, [pc, #20]	; (8006f44 <pxPortInitialiseStack+0x28>)
 8006f2e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f32:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f36:	f06f 0302 	mvn.w	r3, #2
 8006f3a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8006f3e:	3844      	subs	r0, #68	; 0x44
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	08006ea1 	.word	0x08006ea1
	...

08006f50 <SVC_Handler>:
	__asm volatile (
 8006f50:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <pxCurrentTCBConst2>)
 8006f52:	6819      	ldr	r1, [r3, #0]
 8006f54:	6808      	ldr	r0, [r1, #0]
 8006f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5a:	f380 8809 	msr	PSP, r0
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f04f 0000 	mov.w	r0, #0
 8006f66:	f380 8811 	msr	BASEPRI, r0
 8006f6a:	4770      	bx	lr
 8006f6c:	f3af 8000 	nop.w

08006f70 <pxCurrentTCBConst2>:
 8006f70:	20000364 	.word	0x20000364

08006f74 <vPortEnterCritical>:
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006f84:	4a0a      	ldr	r2, [pc, #40]	; (8006fb0 <vPortEnterCritical+0x3c>)
 8006f86:	6813      	ldr	r3, [r2, #0]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d000      	beq.n	8006f92 <vPortEnterCritical+0x1e>
}
 8006f90:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f92:	4b08      	ldr	r3, [pc, #32]	; (8006fb4 <vPortEnterCritical+0x40>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f9a:	d0f9      	beq.n	8006f90 <vPortEnterCritical+0x1c>
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	e7fe      	b.n	8006fac <vPortEnterCritical+0x38>
 8006fae:	bf00      	nop
 8006fb0:	20000074 	.word	0x20000074
 8006fb4:	e000ed04 	.word	0xe000ed04

08006fb8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006fb8:	4b09      	ldr	r3, [pc, #36]	; (8006fe0 <vPortExitCritical+0x28>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	b943      	cbnz	r3, 8006fd0 <vPortExitCritical+0x18>
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	e7fe      	b.n	8006fce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	4a03      	ldr	r2, [pc, #12]	; (8006fe0 <vPortExitCritical+0x28>)
 8006fd4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006fd6:	b90b      	cbnz	r3, 8006fdc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fd8:	f383 8811 	msr	BASEPRI, r3
}
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	20000074 	.word	0x20000074
	...

08006ff0 <PendSV_Handler>:
	__asm volatile
 8006ff0:	f3ef 8009 	mrs	r0, PSP
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	4b15      	ldr	r3, [pc, #84]	; (8007050 <pxCurrentTCBConst>)
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	f01e 0f10 	tst.w	lr, #16
 8007000:	bf08      	it	eq
 8007002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700a:	6010      	str	r0, [r2, #0]
 800700c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007010:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007014:	f380 8811 	msr	BASEPRI, r0
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f7ff fdda 	bl	8006bd8 <vTaskSwitchContext>
 8007024:	f04f 0000 	mov.w	r0, #0
 8007028:	f380 8811 	msr	BASEPRI, r0
 800702c:	bc09      	pop	{r0, r3}
 800702e:	6819      	ldr	r1, [r3, #0]
 8007030:	6808      	ldr	r0, [r1, #0]
 8007032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007036:	f01e 0f10 	tst.w	lr, #16
 800703a:	bf08      	it	eq
 800703c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007040:	f380 8809 	msr	PSP, r0
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	f3af 8000 	nop.w

08007050 <pxCurrentTCBConst>:
 8007050:	20000364 	.word	0x20000364

08007054 <SysTick_Handler>:
{
 8007054:	b508      	push	{r3, lr}
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007066:	f7ff fc8b 	bl	8006980 <xTaskIncrementTick>
 800706a:	b118      	cbz	r0, 8007074 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800706c:	4b03      	ldr	r3, [pc, #12]	; (800707c <SysTick_Handler+0x28>)
 800706e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007072:	601a      	str	r2, [r3, #0]
	__asm volatile
 8007074:	2300      	movs	r3, #0
 8007076:	f383 8811 	msr	BASEPRI, r3
}
 800707a:	bd08      	pop	{r3, pc}
 800707c:	e000ed04 	.word	0xe000ed04

08007080 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007080:	4a08      	ldr	r2, [pc, #32]	; (80070a4 <vPortSetupTimerInterrupt+0x24>)
 8007082:	2300      	movs	r3, #0
 8007084:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007086:	4908      	ldr	r1, [pc, #32]	; (80070a8 <vPortSetupTimerInterrupt+0x28>)
 8007088:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800708a:	4b08      	ldr	r3, [pc, #32]	; (80070ac <vPortSetupTimerInterrupt+0x2c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4908      	ldr	r1, [pc, #32]	; (80070b0 <vPortSetupTimerInterrupt+0x30>)
 8007090:	fba1 1303 	umull	r1, r3, r1, r3
 8007094:	099b      	lsrs	r3, r3, #6
 8007096:	3b01      	subs	r3, #1
 8007098:	4906      	ldr	r1, [pc, #24]	; (80070b4 <vPortSetupTimerInterrupt+0x34>)
 800709a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800709c:	2307      	movs	r3, #7
 800709e:	6013      	str	r3, [r2, #0]
}
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	e000e010 	.word	0xe000e010
 80070a8:	e000e018 	.word	0xe000e018
 80070ac:	20000080 	.word	0x20000080
 80070b0:	10624dd3 	.word	0x10624dd3
 80070b4:	e000e014 	.word	0xe000e014

080070b8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070b8:	4b3a      	ldr	r3, [pc, #232]	; (80071a4 <xPortStartScheduler+0xec>)
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	4b3a      	ldr	r3, [pc, #232]	; (80071a8 <xPortStartScheduler+0xf0>)
 80070be:	429a      	cmp	r2, r3
 80070c0:	d00d      	beq.n	80070de <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070c2:	4b38      	ldr	r3, [pc, #224]	; (80071a4 <xPortStartScheduler+0xec>)
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	4b39      	ldr	r3, [pc, #228]	; (80071ac <xPortStartScheduler+0xf4>)
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d111      	bne.n	80070f0 <xPortStartScheduler+0x38>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	e7fe      	b.n	80070dc <xPortStartScheduler+0x24>
 80070de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	e7fe      	b.n	80070ee <xPortStartScheduler+0x36>
{
 80070f0:	b510      	push	{r4, lr}
 80070f2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070f4:	4b2e      	ldr	r3, [pc, #184]	; (80071b0 <xPortStartScheduler+0xf8>)
 80070f6:	781a      	ldrb	r2, [r3, #0]
 80070f8:	b2d2      	uxtb	r2, r2
 80070fa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070fc:	22ff      	movs	r2, #255	; 0xff
 80070fe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007108:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800710c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007110:	4a28      	ldr	r2, [pc, #160]	; (80071b4 <xPortStartScheduler+0xfc>)
 8007112:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007114:	4b28      	ldr	r3, [pc, #160]	; (80071b8 <xPortStartScheduler+0x100>)
 8007116:	2207      	movs	r2, #7
 8007118:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800711a:	e009      	b.n	8007130 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 800711c:	4a26      	ldr	r2, [pc, #152]	; (80071b8 <xPortStartScheduler+0x100>)
 800711e:	6813      	ldr	r3, [r2, #0]
 8007120:	3b01      	subs	r3, #1
 8007122:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007124:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	b2db      	uxtb	r3, r3
 800712c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007130:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007134:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007138:	d1f0      	bne.n	800711c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800713a:	4b1f      	ldr	r3, [pc, #124]	; (80071b8 <xPortStartScheduler+0x100>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b03      	cmp	r3, #3
 8007140:	d008      	beq.n	8007154 <xPortStartScheduler+0x9c>
 8007142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	e7fe      	b.n	8007152 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007154:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800715a:	4a17      	ldr	r2, [pc, #92]	; (80071b8 <xPortStartScheduler+0x100>)
 800715c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800715e:	9b01      	ldr	r3, [sp, #4]
 8007160:	b2db      	uxtb	r3, r3
 8007162:	4a13      	ldr	r2, [pc, #76]	; (80071b0 <xPortStartScheduler+0xf8>)
 8007164:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007166:	4b15      	ldr	r3, [pc, #84]	; (80071bc <xPortStartScheduler+0x104>)
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800716e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8007176:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8007178:	f7ff ff82 	bl	8007080 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800717c:	2400      	movs	r4, #0
 800717e:	4b10      	ldr	r3, [pc, #64]	; (80071c0 <xPortStartScheduler+0x108>)
 8007180:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8007182:	f7ff fec1 	bl	8006f08 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007186:	4a0f      	ldr	r2, [pc, #60]	; (80071c4 <xPortStartScheduler+0x10c>)
 8007188:	6813      	ldr	r3, [r2, #0]
 800718a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800718e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8007190:	f7ff fea6 	bl	8006ee0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007194:	f7ff fd20 	bl	8006bd8 <vTaskSwitchContext>
	prvTaskExitError();
 8007198:	f7ff fe82 	bl	8006ea0 <prvTaskExitError>
}
 800719c:	4620      	mov	r0, r4
 800719e:	b002      	add	sp, #8
 80071a0:	bd10      	pop	{r4, pc}
 80071a2:	bf00      	nop
 80071a4:	e000ed00 	.word	0xe000ed00
 80071a8:	410fc271 	.word	0x410fc271
 80071ac:	410fc270 	.word	0x410fc270
 80071b0:	e000e400 	.word	0xe000e400
 80071b4:	2000048c 	.word	0x2000048c
 80071b8:	20000490 	.word	0x20000490
 80071bc:	e000ed20 	.word	0xe000ed20
 80071c0:	20000074 	.word	0x20000074
 80071c4:	e000ef34 	.word	0xe000ef34

080071c8 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071c8:	4a12      	ldr	r2, [pc, #72]	; (8007214 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071ca:	f012 0f07 	tst.w	r2, #7
 80071ce:	d01e      	beq.n	800720e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071d0:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071d2:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80071d6:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 80071da:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071dc:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071de:	480e      	ldr	r0, [pc, #56]	; (8007218 <prvHeapInit+0x50>)
 80071e0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80071e2:	2100      	movs	r1, #0
 80071e4:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80071e6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80071e8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071ea:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80071ee:	480b      	ldr	r0, [pc, #44]	; (800721c <prvHeapInit+0x54>)
 80071f0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80071f2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80071f4:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80071f6:	1a99      	subs	r1, r3, r2
 80071f8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071fa:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071fc:	4b08      	ldr	r3, [pc, #32]	; (8007220 <prvHeapInit+0x58>)
 80071fe:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007200:	4b08      	ldr	r3, [pc, #32]	; (8007224 <prvHeapInit+0x5c>)
 8007202:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007204:	4b08      	ldr	r3, [pc, #32]	; (8007228 <prvHeapInit+0x60>)
 8007206:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800720a:	601a      	str	r2, [r3, #0]
}
 800720c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800720e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007212:	e7e4      	b.n	80071de <prvHeapInit+0x16>
 8007214:	20000498 	.word	0x20000498
 8007218:	200040a4 	.word	0x200040a4
 800721c:	20000494 	.word	0x20000494
 8007220:	200040a0 	.word	0x200040a0
 8007224:	2000409c 	.word	0x2000409c
 8007228:	20004098 	.word	0x20004098

0800722c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800722c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800722e:	4b13      	ldr	r3, [pc, #76]	; (800727c <prvInsertBlockIntoFreeList+0x50>)
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4282      	cmp	r2, r0
 8007234:	d31b      	bcc.n	800726e <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007236:	6859      	ldr	r1, [r3, #4]
 8007238:	185c      	adds	r4, r3, r1
 800723a:	4284      	cmp	r4, r0
 800723c:	d103      	bne.n	8007246 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800723e:	6840      	ldr	r0, [r0, #4]
 8007240:	4401      	add	r1, r0
 8007242:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007244:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007246:	6841      	ldr	r1, [r0, #4]
 8007248:	1844      	adds	r4, r0, r1
 800724a:	42a2      	cmp	r2, r4
 800724c:	d113      	bne.n	8007276 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800724e:	4c0c      	ldr	r4, [pc, #48]	; (8007280 <prvInsertBlockIntoFreeList+0x54>)
 8007250:	6824      	ldr	r4, [r4, #0]
 8007252:	42a2      	cmp	r2, r4
 8007254:	d00d      	beq.n	8007272 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007256:	6852      	ldr	r2, [r2, #4]
 8007258:	4411      	add	r1, r2
 800725a:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	6812      	ldr	r2, [r2, #0]
 8007260:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007262:	4298      	cmp	r0, r3
 8007264:	d000      	beq.n	8007268 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007266:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007268:	f85d 4b04 	ldr.w	r4, [sp], #4
 800726c:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800726e:	4613      	mov	r3, r2
 8007270:	e7de      	b.n	8007230 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007272:	6004      	str	r4, [r0, #0]
 8007274:	e7f5      	b.n	8007262 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007276:	6002      	str	r2, [r0, #0]
 8007278:	e7f3      	b.n	8007262 <prvInsertBlockIntoFreeList+0x36>
 800727a:	bf00      	nop
 800727c:	200040a4 	.word	0x200040a4
 8007280:	20000494 	.word	0x20000494

08007284 <pvPortMalloc>:
{
 8007284:	b570      	push	{r4, r5, r6, lr}
 8007286:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007288:	f7ff fb72 	bl	8006970 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800728c:	4b3a      	ldr	r3, [pc, #232]	; (8007378 <pvPortMalloc+0xf4>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	b1bb      	cbz	r3, 80072c2 <pvPortMalloc+0x3e>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007292:	4b3a      	ldr	r3, [pc, #232]	; (800737c <pvPortMalloc+0xf8>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	421c      	tst	r4, r3
 8007298:	d163      	bne.n	8007362 <pvPortMalloc+0xde>
			if( xWantedSize > 0 )
 800729a:	b1ac      	cbz	r4, 80072c8 <pvPortMalloc+0x44>
				xWantedSize += xHeapStructSize;
 800729c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800729e:	f014 0f07 	tst.w	r4, #7
 80072a2:	d011      	beq.n	80072c8 <pvPortMalloc+0x44>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072a4:	f024 0407 	bic.w	r4, r4, #7
 80072a8:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072aa:	f004 0307 	and.w	r3, r4, #7
 80072ae:	b15b      	cbz	r3, 80072c8 <pvPortMalloc+0x44>
 80072b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b4:	f383 8811 	msr	BASEPRI, r3
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	e7fe      	b.n	80072c0 <pvPortMalloc+0x3c>
			prvHeapInit();
 80072c2:	f7ff ff81 	bl	80071c8 <prvHeapInit>
 80072c6:	e7e4      	b.n	8007292 <pvPortMalloc+0xe>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80072c8:	2c00      	cmp	r4, #0
 80072ca:	d04c      	beq.n	8007366 <pvPortMalloc+0xe2>
 80072cc:	4b2c      	ldr	r3, [pc, #176]	; (8007380 <pvPortMalloc+0xfc>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	42a3      	cmp	r3, r4
 80072d2:	d34a      	bcc.n	800736a <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 80072d4:	4b2b      	ldr	r3, [pc, #172]	; (8007384 <pvPortMalloc+0x100>)
 80072d6:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072d8:	e001      	b.n	80072de <pvPortMalloc+0x5a>
					pxPreviousBlock = pxBlock;
 80072da:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 80072dc:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072de:	686a      	ldr	r2, [r5, #4]
 80072e0:	42a2      	cmp	r2, r4
 80072e2:	d202      	bcs.n	80072ea <pvPortMalloc+0x66>
 80072e4:	682a      	ldr	r2, [r5, #0]
 80072e6:	2a00      	cmp	r2, #0
 80072e8:	d1f7      	bne.n	80072da <pvPortMalloc+0x56>
				if( pxBlock != pxEnd )
 80072ea:	4a23      	ldr	r2, [pc, #140]	; (8007378 <pvPortMalloc+0xf4>)
 80072ec:	6812      	ldr	r2, [r2, #0]
 80072ee:	42aa      	cmp	r2, r5
 80072f0:	d03d      	beq.n	800736e <pvPortMalloc+0xea>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80072f2:	681e      	ldr	r6, [r3, #0]
 80072f4:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80072f6:	682a      	ldr	r2, [r5, #0]
 80072f8:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80072fa:	686b      	ldr	r3, [r5, #4]
 80072fc:	1b1b      	subs	r3, r3, r4
 80072fe:	2b10      	cmp	r3, #16
 8007300:	d910      	bls.n	8007324 <pvPortMalloc+0xa0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007302:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007304:	f010 0f07 	tst.w	r0, #7
 8007308:	d008      	beq.n	800731c <pvPortMalloc+0x98>
 800730a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730e:	f383 8811 	msr	BASEPRI, r3
 8007312:	f3bf 8f6f 	isb	sy
 8007316:	f3bf 8f4f 	dsb	sy
 800731a:	e7fe      	b.n	800731a <pvPortMalloc+0x96>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800731c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800731e:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007320:	f7ff ff84 	bl	800722c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007324:	686a      	ldr	r2, [r5, #4]
 8007326:	4916      	ldr	r1, [pc, #88]	; (8007380 <pvPortMalloc+0xfc>)
 8007328:	680b      	ldr	r3, [r1, #0]
 800732a:	1a9b      	subs	r3, r3, r2
 800732c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800732e:	4916      	ldr	r1, [pc, #88]	; (8007388 <pvPortMalloc+0x104>)
 8007330:	6809      	ldr	r1, [r1, #0]
 8007332:	428b      	cmp	r3, r1
 8007334:	d201      	bcs.n	800733a <pvPortMalloc+0xb6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007336:	4914      	ldr	r1, [pc, #80]	; (8007388 <pvPortMalloc+0x104>)
 8007338:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800733a:	4b10      	ldr	r3, [pc, #64]	; (800737c <pvPortMalloc+0xf8>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4313      	orrs	r3, r2
 8007340:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007342:	2300      	movs	r3, #0
 8007344:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8007346:	f7ff fba7 	bl	8006a98 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800734a:	f016 0f07 	tst.w	r6, #7
 800734e:	d010      	beq.n	8007372 <pvPortMalloc+0xee>
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	e7fe      	b.n	8007360 <pvPortMalloc+0xdc>
void *pvReturn = NULL;
 8007362:	2600      	movs	r6, #0
 8007364:	e7ef      	b.n	8007346 <pvPortMalloc+0xc2>
 8007366:	2600      	movs	r6, #0
 8007368:	e7ed      	b.n	8007346 <pvPortMalloc+0xc2>
 800736a:	2600      	movs	r6, #0
 800736c:	e7eb      	b.n	8007346 <pvPortMalloc+0xc2>
 800736e:	2600      	movs	r6, #0
 8007370:	e7e9      	b.n	8007346 <pvPortMalloc+0xc2>
}
 8007372:	4630      	mov	r0, r6
 8007374:	bd70      	pop	{r4, r5, r6, pc}
 8007376:	bf00      	nop
 8007378:	20000494 	.word	0x20000494
 800737c:	20004098 	.word	0x20004098
 8007380:	2000409c 	.word	0x2000409c
 8007384:	200040a4 	.word	0x200040a4
 8007388:	200040a0 	.word	0x200040a0

0800738c <vPortFree>:
	if( pv != NULL )
 800738c:	b380      	cbz	r0, 80073f0 <vPortFree+0x64>
{
 800738e:	b538      	push	{r3, r4, r5, lr}
 8007390:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8007392:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007396:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800739a:	4916      	ldr	r1, [pc, #88]	; (80073f4 <vPortFree+0x68>)
 800739c:	6809      	ldr	r1, [r1, #0]
 800739e:	420a      	tst	r2, r1
 80073a0:	d108      	bne.n	80073b4 <vPortFree+0x28>
 80073a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	e7fe      	b.n	80073b2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073b4:	f850 0c08 	ldr.w	r0, [r0, #-8]
 80073b8:	b140      	cbz	r0, 80073cc <vPortFree+0x40>
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	e7fe      	b.n	80073ca <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073cc:	ea22 0201 	bic.w	r2, r2, r1
 80073d0:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 80073d4:	f7ff facc 	bl	8006970 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073d8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80073dc:	4a06      	ldr	r2, [pc, #24]	; (80073f8 <vPortFree+0x6c>)
 80073de:	6813      	ldr	r3, [r2, #0]
 80073e0:	440b      	add	r3, r1
 80073e2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073e4:	4628      	mov	r0, r5
 80073e6:	f7ff ff21 	bl	800722c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80073ea:	f7ff fb55 	bl	8006a98 <xTaskResumeAll>
}
 80073ee:	bd38      	pop	{r3, r4, r5, pc}
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	20004098 	.word	0x20004098
 80073f8:	2000409c 	.word	0x2000409c

080073fc <RF_init>:
//////////////////////////////////// IMU variables /////////////////////////

/////////////////////////////////////////////////////////////////
////////////////////// Init NRF24L01 Module /////////////////////
/////////////////////////////////////////////////////////////////
void RF_init() {
 80073fc:	b510      	push	{r4, lr}
 80073fe:	b096      	sub	sp, #88	; 0x58

#if NRF24
	DWT_Init(); //Enable some of the MCUs special registers so we can get microsecond (us) delays
 8007400:	f7fb fd84 	bl	8002f0c <DWT_Init>
	NRF24_begin(GPIOB, nrf_CSN_PIN, nrf_CE_PIN, hspi2);
 8007404:	4c0f      	ldr	r4, [pc, #60]	; (8007444 <RF_init+0x48>)
 8007406:	2254      	movs	r2, #84	; 0x54
 8007408:	1d21      	adds	r1, r4, #4
 800740a:	4668      	mov	r0, sp
 800740c:	f002 feb5 	bl	800a17a <memcpy>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007416:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800741a:	480b      	ldr	r0, [pc, #44]	; (8007448 <RF_init+0x4c>)
 800741c:	f7fb f8a2 	bl	8002564 <NRF24_begin>
	//nrf24_DebugUART_Init(huart6);
	NRF24_enableAckPayload();
 8007420:	f7fb f87c 	bl	800251c <NRF24_enableAckPayload>
	NRF24_setAutoAck(true);
 8007424:	2001      	movs	r0, #1
 8007426:	f7fa ffb9 	bl	800239c <NRF24_setAutoAck>
	NRF24_openReadingPipe(1, TxpipeAddrs);
 800742a:	4b08      	ldr	r3, [pc, #32]	; (800744c <RF_init+0x50>)
 800742c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007430:	2001      	movs	r0, #1
 8007432:	f7fa ff19 	bl	8002268 <NRF24_openReadingPipe>
	NRF24_startListening();
 8007436:	f7fa fef5 	bl	8002224 <NRF24_startListening>

	printRadioSettings();
 800743a:	f7fb f969 	bl	8002710 <printRadioSettings>
#endif

}
 800743e:	b016      	add	sp, #88	; 0x58
 8007440:	bd10      	pop	{r4, pc}
 8007442:	bf00      	nop
 8007444:	2000493c 	.word	0x2000493c
 8007448:	40020400 	.word	0x40020400
 800744c:	20000078 	.word	0x20000078

08007450 <unpackRxData>:
#endif
}
// Unpack received 32 byte payload from transmitter, see documentation for specification details
void unpackRxData() {

	Rx_Data.L_Joystick_XPos = (RxData[0] & 0xFF) | (RxData[1] << 8);
 8007450:	4b0e      	ldr	r3, [pc, #56]	; (800748c <unpackRxData+0x3c>)
 8007452:	7819      	ldrb	r1, [r3, #0]
 8007454:	785a      	ldrb	r2, [r3, #1]
 8007456:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800745a:	4a0d      	ldr	r2, [pc, #52]	; (8007490 <unpackRxData+0x40>)
 800745c:	8011      	strh	r1, [r2, #0]
	Rx_Data.L_Joystick_YPos = (RxData[2] & 0xFF) | (RxData[3] << 8);
 800745e:	7899      	ldrb	r1, [r3, #2]
 8007460:	78d8      	ldrb	r0, [r3, #3]
 8007462:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8007466:	8051      	strh	r1, [r2, #2]
	Rx_Data.R_Joystick_XPos = (RxData[4] & 0xFF) | (RxData[5] << 8);
 8007468:	7919      	ldrb	r1, [r3, #4]
 800746a:	7958      	ldrb	r0, [r3, #5]
 800746c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8007470:	8091      	strh	r1, [r2, #4]
	Rx_Data.R_Joystick_YPos = (RxData[6] & 0xFF) | (RxData[7] << 8);
 8007472:	7999      	ldrb	r1, [r3, #6]
 8007474:	79d8      	ldrb	r0, [r3, #7]
 8007476:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800747a:	80d1      	strh	r1, [r2, #6]

	Rx_Data.airmode = (RxData[8] >> 0) & 1;
 800747c:	7a1b      	ldrb	r3, [r3, #8]
 800747e:	f003 0101 	and.w	r1, r3, #1
 8007482:	7211      	strb	r1, [r2, #8]

	Rx_Data.kill_rx = (RxData[8] >> 1) & 1;
 8007484:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007488:	7253      	strb	r3, [r2, #9]
	//	//Remap
	//	pitch_p_gain = (float) roll_p_rx / 100;
	//	pitch_i_gain = (float) roll_i_rx / 100;
	//	pitch_d_gain = (float) roll_d_rx / 100;

}
 800748a:	4770      	bx	lr
 800748c:	200044b0 	.word	0x200044b0
 8007490:	200044a4 	.word	0x200044a4

08007494 <packAckPayData_0>:

//	Pack acknowledge payload data 0 - sent every control loop, which will be sent back to controller once drone has successfully
//	received a payload from it
void packAckPayData_0(float roll, float pitch, float yaw) {
 8007494:	b510      	push	{r4, lr}
 8007496:	ed2d 8b04 	vpush	{d8-d9}
 800749a:	eeb0 9a60 	vmov.f32	s18, s1
 800749e:	eef0 8a41 	vmov.f32	s17, s2

	//ID for packet 0
	AckPayload_0[0] = 0x03;
 80074a2:	4c21      	ldr	r4, [pc, #132]	; (8007528 <packAckPayData_0+0x94>)
 80074a4:	2303      	movs	r3, #3
 80074a6:	7023      	strb	r3, [r4, #0]

	//Next 2 bytes = Battery level
	AckPayload_0[1] = batteryLevel;
 80074a8:	4b20      	ldr	r3, [pc, #128]	; (800752c <packAckPayData_0+0x98>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	7063      	strb	r3, [r4, #1]
	AckPayload_0[2] = batteryLevel >> 8;
 80074ae:	0a1b      	lsrs	r3, r3, #8
 80074b0:	70a3      	strb	r3, [r4, #2]

	//Next 4 bytes = IMU Roll
	int16_t roll_tx = round(roll * 100);
 80074b2:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8007530 <packAckPayData_0+0x9c>
 80074b6:	ee60 7a08 	vmul.f32	s15, s0, s16
 80074ba:	ee17 0a90 	vmov	r0, s15
 80074be:	f7f9 f84b 	bl	8000558 <__aeabi_f2d>
 80074c2:	ec41 0b10 	vmov	d0, r0, r1
 80074c6:	f001 f835 	bl	8008534 <round>
 80074ca:	ec51 0b10 	vmov	r0, r1, d0
 80074ce:	f7f9 fb4b 	bl	8000b68 <__aeabi_d2iz>
 80074d2:	b200      	sxth	r0, r0
	AckPayload_0[3] = roll_tx;
 80074d4:	70e0      	strb	r0, [r4, #3]
	AckPayload_0[4] = roll_tx >> 8;
 80074d6:	1200      	asrs	r0, r0, #8
 80074d8:	7120      	strb	r0, [r4, #4]

	//Next  4 bytes = IMU Pitch
	int16_t pitch_tx = round(pitch * 100);
 80074da:	ee69 7a08 	vmul.f32	s15, s18, s16
 80074de:	ee17 0a90 	vmov	r0, s15
 80074e2:	f7f9 f839 	bl	8000558 <__aeabi_f2d>
 80074e6:	ec41 0b10 	vmov	d0, r0, r1
 80074ea:	f001 f823 	bl	8008534 <round>
 80074ee:	ec51 0b10 	vmov	r0, r1, d0
 80074f2:	f7f9 fb39 	bl	8000b68 <__aeabi_d2iz>
 80074f6:	b200      	sxth	r0, r0
	AckPayload_0[5] = pitch_tx;
 80074f8:	7160      	strb	r0, [r4, #5]
	AckPayload_0[6] = pitch_tx >> 8;
 80074fa:	1200      	asrs	r0, r0, #8
 80074fc:	71a0      	strb	r0, [r4, #6]

	//Next  4 bytes = IMU Yaw
	int16_t yaw_tx = round(yaw * 100);
 80074fe:	ee68 7a88 	vmul.f32	s15, s17, s16
 8007502:	ee17 0a90 	vmov	r0, s15
 8007506:	f7f9 f827 	bl	8000558 <__aeabi_f2d>
 800750a:	ec41 0b10 	vmov	d0, r0, r1
 800750e:	f001 f811 	bl	8008534 <round>
 8007512:	ec51 0b10 	vmov	r0, r1, d0
 8007516:	f7f9 fb27 	bl	8000b68 <__aeabi_d2iz>
 800751a:	b200      	sxth	r0, r0
	AckPayload_0[7] = yaw_tx;
 800751c:	71e0      	strb	r0, [r4, #7]
	AckPayload_0[8] = yaw_tx >> 8;
 800751e:	1200      	asrs	r0, r0, #8
 8007520:	7220      	strb	r0, [r4, #8]

}
 8007522:	ecbd 8b04 	vpop	{d8-d9}
 8007526:	bd10      	pop	{r4, pc}
 8007528:	20004484 	.word	0x20004484
 800752c:	200040ac 	.word	0x200040ac
 8007530:	42c80000 	.word	0x42c80000

08007534 <packAckPayData_1>:

//	Pack acknowledge payload data 1 - sent every second, contains GPS data
void packAckPayData_1() {
 8007534:	b508      	push	{r3, lr}

	//ID for packet 1
	AckPayload_1[0] = 0xFF;
 8007536:	4803      	ldr	r0, [pc, #12]	; (8007544 <packAckPayData_1+0x10>)
 8007538:	23ff      	movs	r3, #255	; 0xff
 800753a:	7003      	strb	r3, [r0, #0]

	getGPSData(AckPayload_1);
 800753c:	f000 fad0 	bl	8007ae0 <getGPSData>

}
 8007540:	bd08      	pop	{r3, pc}
 8007542:	bf00      	nop
 8007544:	20004464 	.word	0x20004464

08007548 <map>:


float map(float x, float in_min, float in_max, float out_min, float out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8007548:	ee30 0a60 	vsub.f32	s0, s0, s1
 800754c:	ee32 2a61 	vsub.f32	s4, s4, s3
 8007550:	ee20 2a02 	vmul.f32	s4, s0, s4
 8007554:	ee31 1a60 	vsub.f32	s2, s2, s1
 8007558:	ee82 0a01 	vdiv.f32	s0, s4, s2
}
 800755c:	ee30 0a21 	vadd.f32	s0, s0, s3
 8007560:	4770      	bx	lr
 8007562:	0000      	movs	r0, r0
 8007564:	0000      	movs	r0, r0
	...

08007568 <RF_TxRx>:
void RF_TxRx(uint16_t *throttle, float *p_setpoint, float *r_setpoint, float *y_setpoint, float roll, float pitch, float yaw) {
 8007568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756a:	4607      	mov	r7, r0
 800756c:	460d      	mov	r5, r1
 800756e:	4616      	mov	r6, r2
 8007570:	461c      	mov	r4, r3
	packAckPayData_0(roll, pitch, yaw);
 8007572:	f7ff ff8f 	bl	8007494 <packAckPayData_0>
	if (loop_counter == CRTL_LOOP_FREQ - 1) {
 8007576:	4b96      	ldr	r3, [pc, #600]	; (80077d0 <RF_TxRx+0x268>)
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800757e:	4293      	cmp	r3, r2
 8007580:	d00a      	beq.n	8007598 <RF_TxRx+0x30>
		loop_counter++;
 8007582:	3301      	adds	r3, #1
 8007584:	4a92      	ldr	r2, [pc, #584]	; (80077d0 <RF_TxRx+0x268>)
 8007586:	8013      	strh	r3, [r2, #0]
	if (NRF24_available()) {
 8007588:	f7fa ff8c 	bl	80024a4 <NRF24_available>
 800758c:	b950      	cbnz	r0, 80075a4 <RF_TxRx+0x3c>
		packetsLostCtr++;
 800758e:	4a91      	ldr	r2, [pc, #580]	; (80077d4 <RF_TxRx+0x26c>)
 8007590:	6813      	ldr	r3, [r2, #0]
 8007592:	3301      	adds	r3, #1
 8007594:	6013      	str	r3, [r2, #0]
}
 8007596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		packAckPayData_1();
 8007598:	f7ff ffcc 	bl	8007534 <packAckPayData_1>
		loop_counter = 0;
 800759c:	4b8c      	ldr	r3, [pc, #560]	; (80077d0 <RF_TxRx+0x268>)
 800759e:	2200      	movs	r2, #0
 80075a0:	801a      	strh	r2, [r3, #0]
 80075a2:	e7f1      	b.n	8007588 <RF_TxRx+0x20>
		NRF24_read(RxData, 32);
 80075a4:	2120      	movs	r1, #32
 80075a6:	488c      	ldr	r0, [pc, #560]	; (80077d8 <RF_TxRx+0x270>)
 80075a8:	f7fa fede 	bl	8002368 <NRF24_read>
		packetsLostCtr = 0;
 80075ac:	4b89      	ldr	r3, [pc, #548]	; (80077d4 <RF_TxRx+0x26c>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	601a      	str	r2, [r3, #0]
		if (loop_counter == CRTL_LOOP_FREQ - 1) {
 80075b2:	4b87      	ldr	r3, [pc, #540]	; (80077d0 <RF_TxRx+0x268>)
 80075b4:	881a      	ldrh	r2, [r3, #0]
 80075b6:	f240 13f3 	movw	r3, #499	; 0x1f3
 80075ba:	429a      	cmp	r2, r3
 80075bc:	f000 80f8 	beq.w	80077b0 <RF_TxRx+0x248>
			NRF24_writeAckPayload(1, AckPayload_0, 32);
 80075c0:	2220      	movs	r2, #32
 80075c2:	4986      	ldr	r1, [pc, #536]	; (80077dc <RF_TxRx+0x274>)
 80075c4:	2001      	movs	r0, #1
 80075c6:	f7fa ff72 	bl	80024ae <NRF24_writeAckPayload>
		unpackRxData();
 80075ca:	f7ff ff41 	bl	8007450 <unpackRxData>
		Rx_Data.R_Joystick_YPos = 	4096 - Rx_Data.R_Joystick_YPos;
 80075ce:	4b84      	ldr	r3, [pc, #528]	; (80077e0 <RF_TxRx+0x278>)
 80075d0:	88da      	ldrh	r2, [r3, #6]
 80075d2:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 80075d6:	80da      	strh	r2, [r3, #6]
		Rx_Data.R_Joystick_XPos = 	4096 - Rx_Data.R_Joystick_XPos;
 80075d8:	889a      	ldrh	r2, [r3, #4]
 80075da:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
 80075de:	809a      	strh	r2, [r3, #4]
		*throttle = map(Rx_Data.L_Joystick_YPos, 850, 3300, ESC_MIN, ESC_MAX);
 80075e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80075e4:	ee00 3a10 	vmov	s0, r3
 80075e8:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 80077e4 <RF_TxRx+0x27c>
 80075ec:	eddf 1a7e 	vldr	s3, [pc, #504]	; 80077e8 <RF_TxRx+0x280>
 80075f0:	ed9f 1a7e 	vldr	s2, [pc, #504]	; 80077ec <RF_TxRx+0x284>
 80075f4:	eddf 0a7e 	vldr	s1, [pc, #504]	; 80077f0 <RF_TxRx+0x288>
 80075f8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80075fc:	f7ff ffa4 	bl	8007548 <map>
 8007600:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8007604:	ee10 3a10 	vmov	r3, s0
 8007608:	b29b      	uxth	r3, r3
 800760a:	803b      	strh	r3, [r7, #0]
		if (*throttle < ESC_MIN + 200) {
 800760c:	f240 52a9 	movw	r2, #1449	; 0x5a9
 8007610:	4293      	cmp	r3, r2
 8007612:	d802      	bhi.n	800761a <RF_TxRx+0xb2>
			*throttle = ESC_MIN;
 8007614:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8007618:	803b      	strh	r3, [r7, #0]
		if (*throttle > ESC_MAX - 200) {
 800761a:	883a      	ldrh	r2, [r7, #0]
 800761c:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8007620:	429a      	cmp	r2, r3
 8007622:	d902      	bls.n	800762a <RF_TxRx+0xc2>
			*throttle = ESC_MAX;
 8007624:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8007628:	803b      	strh	r3, [r7, #0]
		*r_setpoint = map(Rx_Data.R_Joystick_XPos, 350, 3940, -MAX_ANGLE, MAX_ANGLE);
 800762a:	4b6d      	ldr	r3, [pc, #436]	; (80077e0 <RF_TxRx+0x278>)
 800762c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007630:	ee00 3a10 	vmov	s0, r3
 8007634:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 8007638:	eefb 1a04 	vmov.f32	s3, #180	; 0xc1a00000 -20.0
 800763c:	ed9f 1a6d 	vldr	s2, [pc, #436]	; 80077f4 <RF_TxRx+0x28c>
 8007640:	eddf 0a6d 	vldr	s1, [pc, #436]	; 80077f8 <RF_TxRx+0x290>
 8007644:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8007648:	f7ff ff7e 	bl	8007548 <map>
		*r_setpoint += 1;
 800764c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007650:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007654:	ed86 0a00 	vstr	s0, [r6]
		if(*r_setpoint > MAX_ANGLE) *r_setpoint = (float) MAX_ANGLE;
 8007658:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800765c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007664:	dd01      	ble.n	800766a <RF_TxRx+0x102>
 8007666:	edc6 7a00 	vstr	s15, [r6]
		if(*r_setpoint < -MAX_ANGLE) *r_setpoint = (float) -MAX_ANGLE;
 800766a:	ed96 7a00 	vldr	s14, [r6]
 800766e:	eefb 7a04 	vmov.f32	s15, #180	; 0xc1a00000 -20.0
 8007672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800767a:	d501      	bpl.n	8007680 <RF_TxRx+0x118>
 800767c:	edc6 7a00 	vstr	s15, [r6]
		*p_setpoint = map(Rx_Data.R_Joystick_YPos, 370, 3980, -MAX_ANGLE, MAX_ANGLE);
 8007680:	4b57      	ldr	r3, [pc, #348]	; (80077e0 <RF_TxRx+0x278>)
 8007682:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007686:	ee00 3a10 	vmov	s0, r3
 800768a:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 800768e:	eefb 1a04 	vmov.f32	s3, #180	; 0xc1a00000 -20.0
 8007692:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 80077fc <RF_TxRx+0x294>
 8007696:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8007800 <RF_TxRx+0x298>
 800769a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800769e:	f7ff ff53 	bl	8007548 <map>
		*p_setpoint += 1;
 80076a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80076a6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80076aa:	ed85 0a00 	vstr	s0, [r5]
		if(*p_setpoint > MAX_ANGLE) *p_setpoint = (float) MAX_ANGLE;
 80076ae:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80076b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80076b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ba:	dd01      	ble.n	80076c0 <RF_TxRx+0x158>
 80076bc:	edc5 7a00 	vstr	s15, [r5]
		if(*p_setpoint < -MAX_ANGLE) *p_setpoint = (float) -MAX_ANGLE;
 80076c0:	ed95 7a00 	vldr	s14, [r5]
 80076c4:	eefb 7a04 	vmov.f32	s15, #180	; 0xc1a00000 -20.0
 80076c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076d0:	d501      	bpl.n	80076d6 <RF_TxRx+0x16e>
 80076d2:	edc5 7a00 	vstr	s15, [r5]
		yaw_rx = map(Rx_Data.L_Joystick_XPos, 260, 3900, -YAW_TURN_RATE, YAW_TURN_RATE);
 80076d6:	4b42      	ldr	r3, [pc, #264]	; (80077e0 <RF_TxRx+0x278>)
 80076d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80076dc:	ee00 3a10 	vmov	s0, r3
 80076e0:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 80076e4:	eefe 1a00 	vmov.f32	s3, #224	; 0xbf000000 -0.5
 80076e8:	ed9f 1a46 	vldr	s2, [pc, #280]	; 8007804 <RF_TxRx+0x29c>
 80076ec:	eddf 0a46 	vldr	s1, [pc, #280]	; 8007808 <RF_TxRx+0x2a0>
 80076f0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80076f4:	f7ff ff28 	bl	8007548 <map>
 80076f8:	4b44      	ldr	r3, [pc, #272]	; (800780c <RF_TxRx+0x2a4>)
 80076fa:	ed83 0a00 	vstr	s0, [r3]
		if(yaw_rx>YAW_TURN_RATE) {yaw_rx = YAW_TURN_RATE;}
 80076fe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007702:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8007706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770a:	dd01      	ble.n	8007710 <RF_TxRx+0x1a8>
 800770c:	edc3 7a00 	vstr	s15, [r3]
		if(yaw_rx<-YAW_TURN_RATE) {yaw_rx = -YAW_TURN_RATE;}
 8007710:	4b3e      	ldr	r3, [pc, #248]	; (800780c <RF_TxRx+0x2a4>)
 8007712:	ed93 7a00 	vldr	s14, [r3]
 8007716:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800771a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800771e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007722:	d501      	bpl.n	8007728 <RF_TxRx+0x1c0>
 8007724:	edc3 7a00 	vstr	s15, [r3]
		if(yaw_rx > -0.3 && yaw_rx < 0.3){ yaw_rx = 0.0000000f;}
 8007728:	4b38      	ldr	r3, [pc, #224]	; (800780c <RF_TxRx+0x2a4>)
 800772a:	6818      	ldr	r0, [r3, #0]
 800772c:	f7f8 ff14 	bl	8000558 <__aeabi_f2d>
 8007730:	4606      	mov	r6, r0
 8007732:	460f      	mov	r7, r1
 8007734:	a322      	add	r3, pc, #136	; (adr r3, 80077c0 <RF_TxRx+0x258>)
 8007736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773a:	f7f9 f9f5 	bl	8000b28 <__aeabi_dcmpgt>
 800773e:	b150      	cbz	r0, 8007756 <RF_TxRx+0x1ee>
 8007740:	a321      	add	r3, pc, #132	; (adr r3, 80077c8 <RF_TxRx+0x260>)
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	4630      	mov	r0, r6
 8007748:	4639      	mov	r1, r7
 800774a:	f7f9 f9cf 	bl	8000aec <__aeabi_dcmplt>
 800774e:	b110      	cbz	r0, 8007756 <RF_TxRx+0x1ee>
 8007750:	4b2e      	ldr	r3, [pc, #184]	; (800780c <RF_TxRx+0x2a4>)
 8007752:	2200      	movs	r2, #0
 8007754:	601a      	str	r2, [r3, #0]
		if(yaw_rx > -YAW_TURN_RATE && yaw_rx < YAW_TURN_RATE){
 8007756:	4b2d      	ldr	r3, [pc, #180]	; (800780c <RF_TxRx+0x2a4>)
 8007758:	edd3 7a00 	vldr	s15, [r3]
 800775c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8007760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007768:	dd0c      	ble.n	8007784 <RF_TxRx+0x21c>
 800776a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800776e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007776:	d505      	bpl.n	8007784 <RF_TxRx+0x21c>
			(*y_setpoint) += yaw_rx;
 8007778:	ed94 7a00 	vldr	s14, [r4]
 800777c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007780:	edc4 7a00 	vstr	s15, [r4]
		if(*y_setpoint > 360) *y_setpoint = (float) 0;
 8007784:	ed94 7a00 	vldr	s14, [r4]
 8007788:	eddf 7a21 	vldr	s15, [pc, #132]	; 8007810 <RF_TxRx+0x2a8>
 800778c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007794:	dd01      	ble.n	800779a <RF_TxRx+0x232>
 8007796:	2300      	movs	r3, #0
 8007798:	6023      	str	r3, [r4, #0]
		if(*y_setpoint < 0) *y_setpoint = (float) 360;
 800779a:	edd4 7a00 	vldr	s15, [r4]
 800779e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a6:	f57f aef6 	bpl.w	8007596 <RF_TxRx+0x2e>
 80077aa:	4b1a      	ldr	r3, [pc, #104]	; (8007814 <RF_TxRx+0x2ac>)
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	e6f2      	b.n	8007596 <RF_TxRx+0x2e>
			NRF24_writeAckPayload(1, AckPayload_1, 32);
 80077b0:	2220      	movs	r2, #32
 80077b2:	4919      	ldr	r1, [pc, #100]	; (8007818 <RF_TxRx+0x2b0>)
 80077b4:	2001      	movs	r0, #1
 80077b6:	f7fa fe7a 	bl	80024ae <NRF24_writeAckPayload>
 80077ba:	e706      	b.n	80075ca <RF_TxRx+0x62>
 80077bc:	f3af 8000 	nop.w
 80077c0:	33333333 	.word	0x33333333
 80077c4:	bfd33333 	.word	0xbfd33333
 80077c8:	33333333 	.word	0x33333333
 80077cc:	3fd33333 	.word	0x3fd33333
 80077d0:	200040b0 	.word	0x200040b0
 80077d4:	200040b4 	.word	0x200040b4
 80077d8:	200044b0 	.word	0x200044b0
 80077dc:	20004484 	.word	0x20004484
 80077e0:	200044a4 	.word	0x200044a4
 80077e4:	451c4000 	.word	0x451c4000
 80077e8:	449c4000 	.word	0x449c4000
 80077ec:	454e4000 	.word	0x454e4000
 80077f0:	44548000 	.word	0x44548000
 80077f4:	45764000 	.word	0x45764000
 80077f8:	43af0000 	.word	0x43af0000
 80077fc:	4578c000 	.word	0x4578c000
 8007800:	43b90000 	.word	0x43b90000
 8007804:	4573c000 	.word	0x4573c000
 8007808:	43820000 	.word	0x43820000
 800780c:	200040b8 	.word	0x200040b8
 8007810:	43b40000 	.word	0x43b40000
 8007814:	43b40000 	.word	0x43b40000
 8007818:	20004464 	.word	0x20004464

0800781c <CL_main>:
 *		   |
 *		/     \
 * (1 CW)     (3 CCW)
 *
 */
void CL_main() {
 800781c:	b570      	push	{r4, r5, r6, lr}


#if NRF24
	RF_TxRx(&throttle, &pitch_setpoint, &roll_setpoint, &yaw_setpoint, imu_roll, imu_pitch, imu_yaw);
 800781e:	4e51      	ldr	r6, [pc, #324]	; (8007964 <CL_main+0x148>)
 8007820:	4d51      	ldr	r5, [pc, #324]	; (8007968 <CL_main+0x14c>)
 8007822:	4c52      	ldr	r4, [pc, #328]	; (800796c <CL_main+0x150>)
 8007824:	ed96 1a00 	vldr	s2, [r6]
 8007828:	edd5 0a00 	vldr	s1, [r5]
 800782c:	ed94 0a00 	vldr	s0, [r4]
 8007830:	4b4f      	ldr	r3, [pc, #316]	; (8007970 <CL_main+0x154>)
 8007832:	4a50      	ldr	r2, [pc, #320]	; (8007974 <CL_main+0x158>)
 8007834:	4950      	ldr	r1, [pc, #320]	; (8007978 <CL_main+0x15c>)
 8007836:	4851      	ldr	r0, [pc, #324]	; (800797c <CL_main+0x160>)
 8007838:	f7ff fe96 	bl	8007568 <RF_TxRx>
#endif


#if IMU

		calc_RollPitchYaw(&imu_roll, &imu_pitch, &imu_yaw);
 800783c:	4632      	mov	r2, r6
 800783e:	4629      	mov	r1, r5
 8007840:	4620      	mov	r0, r4
 8007842:	f7fa f9d5 	bl	8001bf0 <calc_RollPitchYaw>


#endif
		if (Rx_Data.airmode) {
 8007846:	4b4e      	ldr	r3, [pc, #312]	; (8007980 <CL_main+0x164>)
 8007848:	7a1b      	ldrb	r3, [r3, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d07b      	beq.n	8007946 <CL_main+0x12a>
			/*******    Pitch PID calculation  ********/
			pid_output_pitch = pid_calculate_pitch(imu_pitch, 0, 0);
 800784e:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8007984 <CL_main+0x168>
 8007852:	2000      	movs	r0, #0
 8007854:	ed95 0a00 	vldr	s0, [r5]
 8007858:	f7fb fac8 	bl	8002dec <pid_calculate_pitch>
 800785c:	4b4a      	ldr	r3, [pc, #296]	; (8007988 <CL_main+0x16c>)
 800785e:	ed83 0a00 	vstr	s0, [r3]

			/*******    Roll PID calculation  ********/

			pid_output_roll = pid_calculate_roll(imu_roll, 0, roll_setpoint);
 8007862:	4b44      	ldr	r3, [pc, #272]	; (8007974 <CL_main+0x158>)
 8007864:	edd3 0a00 	vldr	s1, [r3]
 8007868:	2000      	movs	r0, #0
 800786a:	ed94 0a00 	vldr	s0, [r4]
 800786e:	f7fb fa3f 	bl	8002cf0 <pid_calculate_roll>
 8007872:	4b46      	ldr	r3, [pc, #280]	; (800798c <CL_main+0x170>)
 8007874:	ed83 0a00 	vstr	s0, [r3]
			printToPC();
		}
#endif

		//Calculate new pulse width values
		esc1_total = throttle - (int) pid_output_roll - (int) pid_output_pitch;
 8007878:	4b40      	ldr	r3, [pc, #256]	; (800797c <CL_main+0x160>)
 800787a:	8818      	ldrh	r0, [r3, #0]
 800787c:	4b43      	ldr	r3, [pc, #268]	; (800798c <CL_main+0x170>)
 800787e:	edd3 7a00 	vldr	s15, [r3]
 8007882:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007886:	ee17 1a90 	vmov	r1, s15
 800788a:	1a42      	subs	r2, r0, r1
 800788c:	4b3e      	ldr	r3, [pc, #248]	; (8007988 <CL_main+0x16c>)
 800788e:	edd3 7a00 	vldr	s15, [r3]
 8007892:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007896:	ee17 3a90 	vmov	r3, s15
 800789a:	1ad4      	subs	r4, r2, r3
 800789c:	4d3c      	ldr	r5, [pc, #240]	; (8007990 <CL_main+0x174>)
 800789e:	602c      	str	r4, [r5, #0]
		esc2_total = throttle - (int) pid_output_roll + (int) pid_output_pitch;
 80078a0:	441a      	add	r2, r3
 80078a2:	4d3c      	ldr	r5, [pc, #240]	; (8007994 <CL_main+0x178>)
 80078a4:	602a      	str	r2, [r5, #0]
		esc3_total = (throttle) + (int) pid_output_roll
 80078a6:	4401      	add	r1, r0
				- (int) pid_output_pitch;
 80078a8:	1ac8      	subs	r0, r1, r3
		esc3_total = (throttle) + (int) pid_output_roll
 80078aa:	4d3b      	ldr	r5, [pc, #236]	; (8007998 <CL_main+0x17c>)
 80078ac:	6028      	str	r0, [r5, #0]
		esc4_total = (throttle) + (int) pid_output_roll
				+ (int) pid_output_pitch;
 80078ae:	440b      	add	r3, r1
		esc4_total = (throttle) + (int) pid_output_roll
 80078b0:	493a      	ldr	r1, [pc, #232]	; (800799c <CL_main+0x180>)
 80078b2:	600b      	str	r3, [r1, #0]

		//Clip PWM values to make sure they don't go outside of range
		if (esc1_total < ESC_MIN) {
 80078b4:	f240 41e1 	movw	r1, #1249	; 0x4e1
 80078b8:	428c      	cmp	r4, r1
 80078ba:	dc03      	bgt.n	80078c4 <CL_main+0xa8>
			esc1_total = ESC_MIN;
 80078bc:	4934      	ldr	r1, [pc, #208]	; (8007990 <CL_main+0x174>)
 80078be:	f240 44e2 	movw	r4, #1250	; 0x4e2
 80078c2:	600c      	str	r4, [r1, #0]
		}
		if (esc1_total > ESC_MAX) {
 80078c4:	4932      	ldr	r1, [pc, #200]	; (8007990 <CL_main+0x174>)
 80078c6:	680c      	ldr	r4, [r1, #0]
 80078c8:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80078cc:	428c      	cmp	r4, r1
 80078ce:	dd03      	ble.n	80078d8 <CL_main+0xbc>
			esc1_total = ESC_MAX;
 80078d0:	492f      	ldr	r1, [pc, #188]	; (8007990 <CL_main+0x174>)
 80078d2:	f640 14c4 	movw	r4, #2500	; 0x9c4
 80078d6:	600c      	str	r4, [r1, #0]
		}
		if (esc2_total < ESC_MIN) {
 80078d8:	f240 41e1 	movw	r1, #1249	; 0x4e1
 80078dc:	428a      	cmp	r2, r1
 80078de:	dc03      	bgt.n	80078e8 <CL_main+0xcc>
			esc2_total = ESC_MIN;
 80078e0:	4a2c      	ldr	r2, [pc, #176]	; (8007994 <CL_main+0x178>)
 80078e2:	f240 41e2 	movw	r1, #1250	; 0x4e2
 80078e6:	6011      	str	r1, [r2, #0]
		}
		if (esc2_total > ESC_MAX) {
 80078e8:	4a2a      	ldr	r2, [pc, #168]	; (8007994 <CL_main+0x178>)
 80078ea:	6811      	ldr	r1, [r2, #0]
 80078ec:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80078f0:	4291      	cmp	r1, r2
 80078f2:	dd03      	ble.n	80078fc <CL_main+0xe0>
			esc2_total = ESC_MAX;
 80078f4:	4a27      	ldr	r2, [pc, #156]	; (8007994 <CL_main+0x178>)
 80078f6:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80078fa:	6011      	str	r1, [r2, #0]
		}
		if (esc3_total < ESC_MIN) {
 80078fc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8007900:	4290      	cmp	r0, r2
 8007902:	dc03      	bgt.n	800790c <CL_main+0xf0>
			esc3_total = ESC_MIN;
 8007904:	4a24      	ldr	r2, [pc, #144]	; (8007998 <CL_main+0x17c>)
 8007906:	f240 41e2 	movw	r1, #1250	; 0x4e2
 800790a:	6011      	str	r1, [r2, #0]
		}
		if (esc3_total > ESC_MAX) {
 800790c:	4a22      	ldr	r2, [pc, #136]	; (8007998 <CL_main+0x17c>)
 800790e:	6811      	ldr	r1, [r2, #0]
 8007910:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007914:	4291      	cmp	r1, r2
 8007916:	dd03      	ble.n	8007920 <CL_main+0x104>
			esc3_total = ESC_MAX;
 8007918:	4a1f      	ldr	r2, [pc, #124]	; (8007998 <CL_main+0x17c>)
 800791a:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800791e:	6011      	str	r1, [r2, #0]
		}
		if (esc4_total < ESC_MIN) {
 8007920:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8007924:	4293      	cmp	r3, r2
 8007926:	dc03      	bgt.n	8007930 <CL_main+0x114>
			esc4_total = ESC_MIN;
 8007928:	4b1c      	ldr	r3, [pc, #112]	; (800799c <CL_main+0x180>)
 800792a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800792e:	601a      	str	r2, [r3, #0]
		}
		if (esc4_total > ESC_MAX) {
 8007930:	4b1a      	ldr	r3, [pc, #104]	; (800799c <CL_main+0x180>)
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8007938:	429a      	cmp	r2, r3
 800793a:	dd03      	ble.n	8007944 <CL_main+0x128>
			esc4_total = ESC_MAX;
 800793c:	4b17      	ldr	r3, [pc, #92]	; (800799c <CL_main+0x180>)
 800793e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8007942:	601a      	str	r2, [r3, #0]

#endif



}
 8007944:	bd70      	pop	{r4, r5, r6, pc}
			pid_output_roll = 0;
 8007946:	2300      	movs	r3, #0
 8007948:	4a10      	ldr	r2, [pc, #64]	; (800798c <CL_main+0x170>)
 800794a:	6013      	str	r3, [r2, #0]
			pid_output_pitch = 0;
 800794c:	4a0e      	ldr	r2, [pc, #56]	; (8007988 <CL_main+0x16c>)
 800794e:	6013      	str	r3, [r2, #0]
			pid_output_yaw = 0;
 8007950:	4a13      	ldr	r2, [pc, #76]	; (80079a0 <CL_main+0x184>)
 8007952:	6013      	str	r3, [r2, #0]
			reset_pid_roll();
 8007954:	f7fb fa38 	bl	8002dc8 <reset_pid_roll>
			reset_pid_pitch();
 8007958:	f7fb fab4 	bl	8002ec4 <reset_pid_pitch>
			reset_pid_yaw();
 800795c:	f7fb fac4 	bl	8002ee8 <reset_pid_yaw>
 8007960:	e78a      	b.n	8007878 <CL_main+0x5c>
 8007962:	bf00      	nop
 8007964:	200040d4 	.word	0x200040d4
 8007968:	200040cc 	.word	0x200040cc
 800796c:	200040d0 	.word	0x200040d0
 8007970:	200040f0 	.word	0x200040f0
 8007974:	200040e8 	.word	0x200040e8
 8007978:	200040e4 	.word	0x200040e4
 800797c:	200040ec 	.word	0x200040ec
 8007980:	200044a4 	.word	0x200044a4
 8007984:	00000000 	.word	0x00000000
 8007988:	200040d8 	.word	0x200040d8
 800798c:	200040dc 	.word	0x200040dc
 8007990:	200040bc 	.word	0x200040bc
 8007994:	200040c0 	.word	0x200040c0
 8007998:	200040c4 	.word	0x200040c4
 800799c:	200040c8 	.word	0x200040c8
 80079a0:	200040e0 	.word	0x200040e0

080079a4 <PWM1_Set>:
}


//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 80079a4:	4b01      	ldr	r3, [pc, #4]	; (80079ac <PWM1_Set+0x8>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	6358      	str	r0, [r3, #52]	; 0x34
}
 80079aa:	4770      	bx	lr
 80079ac:	200049d4 	.word	0x200049d4

080079b0 <PWM2_Set>:

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 80079b0:	4b01      	ldr	r3, [pc, #4]	; (80079b8 <PWM2_Set+0x8>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6398      	str	r0, [r3, #56]	; 0x38

}
 80079b6:	4770      	bx	lr
 80079b8:	200049d4 	.word	0x200049d4

080079bc <PWM3_Set>:

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 80079bc:	4b01      	ldr	r3, [pc, #4]	; (80079c4 <PWM3_Set+0x8>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 80079c2:	4770      	bx	lr
 80079c4:	200049d4 	.word	0x200049d4

080079c8 <PWM4_Set>:

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 80079c8:	4b01      	ldr	r3, [pc, #4]	; (80079d0 <PWM4_Set+0x8>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6418      	str	r0, [r3, #64]	; 0x40
}
 80079ce:	4770      	bx	lr
 80079d0:	200049d4 	.word	0x200049d4

080079d4 <CL_init>:
void CL_init() {
 80079d4:	b510      	push	{r4, lr}
	RF_init();
 80079d6:	f7ff fd11 	bl	80073fc <RF_init>
		HAL_TIM_Base_Start(&htim11);
 80079da:	4816      	ldr	r0, [pc, #88]	; (8007a34 <CL_init+0x60>)
 80079dc:	f7fd fce8 	bl	80053b0 <HAL_TIM_Base_Start>
		if (imu_init(&hi2c2) == IMU_SUCCESS) {
 80079e0:	4815      	ldr	r0, [pc, #84]	; (8007a38 <CL_init+0x64>)
 80079e2:	f7f9 fb09 	bl	8000ff8 <imu_init>
 80079e6:	b308      	cbz	r0, 8007a2c <CL_init+0x58>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80079e8:	4c14      	ldr	r4, [pc, #80]	; (8007a3c <CL_init+0x68>)
 80079ea:	2100      	movs	r1, #0
 80079ec:	4620      	mov	r0, r4
 80079ee:	f7fd fef5 	bl	80057dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80079f2:	2104      	movs	r1, #4
 80079f4:	4620      	mov	r0, r4
 80079f6:	f7fd fef1 	bl	80057dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80079fa:	2108      	movs	r1, #8
 80079fc:	4620      	mov	r0, r4
 80079fe:	f7fd feed 	bl	80057dc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8007a02:	210c      	movs	r1, #12
 8007a04:	4620      	mov	r0, r4
 8007a06:	f7fd fee9 	bl	80057dc <HAL_TIM_PWM_Start>
	PWM1_Set(2500);
 8007a0a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8007a0e:	f7ff ffc9 	bl	80079a4 <PWM1_Set>
	PWM2_Set(2500);
 8007a12:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8007a16:	f7ff ffcb 	bl	80079b0 <PWM2_Set>
	PWM3_Set(2500);
 8007a1a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8007a1e:	f7ff ffcd 	bl	80079bc <PWM3_Set>
	PWM4_Set(2500);
 8007a22:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8007a26:	f7ff ffcf 	bl	80079c8 <PWM4_Set>
}
 8007a2a:	bd10      	pop	{r4, pc}
			imu_calibrate();
 8007a2c:	f7f9 ff3c 	bl	80018a8 <imu_calibrate>
 8007a30:	e7da      	b.n	80079e8 <CL_init+0x14>
 8007a32:	bf00      	nop
 8007a34:	20004a14 	.word	0x20004a14
 8007a38:	20004374 	.word	0x20004374
 8007a3c:	200049d4 	.word	0x200049d4

08007a40 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8007a40:	b508      	push	{r3, lr}

  hcrc.Instance = CRC;
 8007a42:	4805      	ldr	r0, [pc, #20]	; (8007a58 <MX_CRC_Init+0x18>)
 8007a44:	4b05      	ldr	r3, [pc, #20]	; (8007a5c <MX_CRC_Init+0x1c>)
 8007a46:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007a48:	f7fb fb1c 	bl	8003084 <HAL_CRC_Init>
 8007a4c:	b900      	cbnz	r0, 8007a50 <MX_CRC_Init+0x10>
  {
    Error_Handler();
  }

}
 8007a4e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007a50:	f000 fa6e 	bl	8007f30 <Error_Handler>
}
 8007a54:	e7fb      	b.n	8007a4e <MX_CRC_Init+0xe>
 8007a56:	bf00      	nop
 8007a58:	200044d4 	.word	0x200044d4
 8007a5c:	40023000 	.word	0x40023000

08007a60 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8007a60:	6802      	ldr	r2, [r0, #0]
 8007a62:	4b09      	ldr	r3, [pc, #36]	; (8007a88 <HAL_CRC_MspInit+0x28>)
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d000      	beq.n	8007a6a <HAL_CRC_MspInit+0xa>
 8007a68:	4770      	bx	lr
{
 8007a6a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	9301      	str	r3, [sp, #4]
 8007a70:	4b06      	ldr	r3, [pc, #24]	; (8007a8c <HAL_CRC_MspInit+0x2c>)
 8007a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a78:	631a      	str	r2, [r3, #48]	; 0x30
 8007a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a80:	9301      	str	r3, [sp, #4]
 8007a82:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8007a84:	b002      	add	sp, #8
 8007a86:	4770      	bx	lr
 8007a88:	40023000 	.word	0x40023000
 8007a8c:	40023800 	.word	0x40023800

08007a90 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007a90:	b500      	push	{lr}
 8007a92:	b083      	sub	sp, #12
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007a94:	2200      	movs	r2, #0
 8007a96:	9201      	str	r2, [sp, #4]
 8007a98:	4b09      	ldr	r3, [pc, #36]	; (8007ac0 <MX_DMA_Init+0x30>)
 8007a9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a9c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8007aa0:	6319      	str	r1, [r3, #48]	; 0x30
 8007aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007aa8:	9301      	str	r3, [sp, #4]
 8007aaa:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 8007aac:	2106      	movs	r1, #6
 8007aae:	2039      	movs	r0, #57	; 0x39
 8007ab0:	f7fb faa6 	bl	8003000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8007ab4:	2039      	movs	r0, #57	; 0x39
 8007ab6:	f7fb fad7 	bl	8003068 <HAL_NVIC_EnableIRQ>

}
 8007aba:	b003      	add	sp, #12
 8007abc:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ac0:	40023800 	.word	0x40023800

08007ac4 <StartControlLoop>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControlLoop */
void StartControlLoop(void const * argument)
{
 8007ac4:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartControlLoop */

	CL_init();
 8007ac6:	f7ff ff85 	bl	80079d4 <CL_init>

	/* Infinite loop */
	for (;;) {

		CL_main();
 8007aca:	f7ff fea7 	bl	800781c <CL_main>
		osDelay(2);
 8007ace:	2002      	movs	r0, #2
 8007ad0:	f7fe faab 	bl	800602a <osDelay>
 8007ad4:	e7f9      	b.n	8007aca <StartControlLoop+0x6>

08007ad6 <StartGPSUpdate>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGPSUpdate */
void StartGPSUpdate(void const * argument)
{
 8007ad6:	b508      	push	{r3, lr}



	/* Infinite loop */
	for (;;) {
		osDelay(10);
 8007ad8:	200a      	movs	r0, #10
 8007ada:	f7fe faa6 	bl	800602a <osDelay>
 8007ade:	e7fb      	b.n	8007ad8 <StartGPSUpdate+0x2>

08007ae0 <getGPSData>:
	}
	//}

}

void getGPSData(uint8_t *ack_payload_1) {
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4604      	mov	r4, r0

	//Goto element [1]
	ack_payload_1++;

	//[1] = no of sattelites tracked
	*ack_payload_1 = GPS.sattelite_no;
 8007ae4:	4d24      	ldr	r5, [pc, #144]	; (8007b78 <getGPSData+0x98>)
 8007ae6:	7e2b      	ldrb	r3, [r5, #24]
 8007ae8:	7043      	strb	r3, [r0, #1]
	ack_payload_1++;
	//[2] = Fix quality
	*ack_payload_1 = GPS.fix_quality;
 8007aea:	7e6b      	ldrb	r3, [r5, #25]
 8007aec:	7083      	strb	r3, [r0, #2]
	ack_payload_1++;
	//[3] = Day
	*ack_payload_1 = GPS.Day;
 8007aee:	782b      	ldrb	r3, [r5, #0]
 8007af0:	70c3      	strb	r3, [r0, #3]
	ack_payload_1++;
	//[4] = Month
	*ack_payload_1 = GPS.Month;
 8007af2:	786b      	ldrb	r3, [r5, #1]
 8007af4:	7103      	strb	r3, [r0, #4]
	ack_payload_1++;
	//[5] = Year
	*ack_payload_1 = GPS.Year;
 8007af6:	78ab      	ldrb	r3, [r5, #2]
 8007af8:	7143      	strb	r3, [r0, #5]
	ack_payload_1++;
	//[6] = Hour
	*ack_payload_1 = GPS.Hours;
 8007afa:	78eb      	ldrb	r3, [r5, #3]
 8007afc:	7183      	strb	r3, [r0, #6]
	ack_payload_1++;
	//[7] = Minutes
	*ack_payload_1 = GPS.Minutes;
 8007afe:	792b      	ldrb	r3, [r5, #4]
 8007b00:	71c3      	strb	r3, [r0, #7]
	ack_payload_1++;
	//[8] = Seconds
	*ack_payload_1 = GPS.Seconds;
 8007b02:	796b      	ldrb	r3, [r5, #5]
 8007b04:	7203      	strb	r3, [r0, #8]
	ack_payload_1++;

	//[9] - [10] = GPS speed in KM/H
	int16_t GPS_speed_tx = round(GPS.Speed * 100);
 8007b06:	ed95 7a04 	vldr	s14, [r5, #16]
 8007b0a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007b7c <getGPSData+0x9c>
 8007b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b12:	ee17 0a90 	vmov	r0, s15
 8007b16:	f7f8 fd1f 	bl	8000558 <__aeabi_f2d>
 8007b1a:	ec41 0b10 	vmov	d0, r0, r1
 8007b1e:	f000 fd09 	bl	8008534 <round>
 8007b22:	ec51 0b10 	vmov	r0, r1, d0
 8007b26:	f7f9 f81f 	bl	8000b68 <__aeabi_d2iz>
 8007b2a:	b200      	sxth	r0, r0
	*ack_payload_1 = GPS_speed_tx;
 8007b2c:	7260      	strb	r0, [r4, #9]
	ack_payload_1++;
	*ack_payload_1 = GPS_speed_tx >> 8;
 8007b2e:	1200      	asrs	r0, r0, #8
 8007b30:	72a0      	strb	r0, [r4, #10]
	ack_payload_1++;

	//[11] - [14] = Longitude
	unsigned char temp[sizeof(float)];
	memcpy(temp, &GPS.Longitude, sizeof(float));
 8007b32:	68ab      	ldr	r3, [r5, #8]

	*ack_payload_1 = temp[0];
 8007b34:	72e3      	strb	r3, [r4, #11]
	ack_payload_1++;
	*ack_payload_1 = temp[1];
 8007b36:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007b3a:	7322      	strb	r2, [r4, #12]
	ack_payload_1++;
	*ack_payload_1 = temp[2];
 8007b3c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007b40:	7362      	strb	r2, [r4, #13]
	ack_payload_1++;
	*ack_payload_1 = temp[3];
 8007b42:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8007b46:	73a3      	strb	r3, [r4, #14]
	ack_payload_1++;

	//[15] - [18] = Longitude
	memcpy(temp, &GPS.Latitude, sizeof(GPS.Latitude));
 8007b48:	68eb      	ldr	r3, [r5, #12]

	*ack_payload_1 = temp[0];
 8007b4a:	73e3      	strb	r3, [r4, #15]
	ack_payload_1++;
	*ack_payload_1 = temp[1];
 8007b4c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007b50:	7422      	strb	r2, [r4, #16]
	ack_payload_1++;
	*ack_payload_1 = temp[2];
 8007b52:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007b56:	7462      	strb	r2, [r4, #17]
	ack_payload_1++;
	*ack_payload_1 = temp[3];
 8007b58:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8007b5c:	74a3      	strb	r3, [r4, #18]
	ack_payload_1++;

	//[19] - [22] = Longitude
	memcpy(temp, &GPS.Altitude, sizeof(GPS.Altitude));
 8007b5e:	696b      	ldr	r3, [r5, #20]

	*ack_payload_1 = temp[0];
 8007b60:	74e3      	strb	r3, [r4, #19]
	ack_payload_1++;
	*ack_payload_1 = temp[1];
 8007b62:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007b66:	7522      	strb	r2, [r4, #20]
	ack_payload_1++;
	*ack_payload_1 = temp[2];
 8007b68:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8007b6c:	7562      	strb	r2, [r4, #21]
	ack_payload_1++;
	*ack_payload_1 = temp[3];
 8007b6e:	f3c3 6307 	ubfx	r3, r3, #24, #8
 8007b72:	75a3      	strb	r3, [r4, #22]
	ack_payload_1++;

}
 8007b74:	bd38      	pop	{r3, r4, r5, pc}
 8007b76:	bf00      	nop
 8007b78:	2000491c 	.word	0x2000491c
 8007b7c:	42c80000 	.word	0x42c80000

08007b80 <vApplicationGetIdleTaskMemory>:
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8007b80:	4b03      	ldr	r3, [pc, #12]	; (8007b90 <vApplicationGetIdleTaskMemory+0x10>)
 8007b82:	6003      	str	r3, [r0, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8007b84:	4b03      	ldr	r3, [pc, #12]	; (8007b94 <vApplicationGetIdleTaskMemory+0x14>)
 8007b86:	600b      	str	r3, [r1, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8007b88:	2380      	movs	r3, #128	; 0x80
 8007b8a:	6013      	str	r3, [r2, #0]
}
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	200042f4 	.word	0x200042f4
 8007b94:	200040f4 	.word	0x200040f4

08007b98 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8007b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b9a:	b091      	sub	sp, #68	; 0x44
  osMutexDef(GPSDataMutex);
 8007b9c:	2700      	movs	r7, #0
 8007b9e:	970e      	str	r7, [sp, #56]	; 0x38
 8007ba0:	970f      	str	r7, [sp, #60]	; 0x3c
  GPSDataMutexHandle = osMutexCreate(osMutex(GPSDataMutex));
 8007ba2:	a80e      	add	r0, sp, #56	; 0x38
 8007ba4:	f7fe fa4a 	bl	800603c <osMutexCreate>
 8007ba8:	4b10      	ldr	r3, [pc, #64]	; (8007bec <MX_FREERTOS_Init+0x54>)
 8007baa:	6018      	str	r0, [r3, #0]
  osThreadDef(ControlLoop, StartControlLoop, osPriorityRealtime, 0, 1024);
 8007bac:	4c10      	ldr	r4, [pc, #64]	; (8007bf0 <MX_FREERTOS_Init+0x58>)
 8007bae:	ad07      	add	r5, sp, #28
 8007bb0:	4626      	mov	r6, r4
 8007bb2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007bb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007bb6:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8007bba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  ControlLoopHandle = osThreadCreate(osThread(ControlLoop), NULL);
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	a807      	add	r0, sp, #28
 8007bc2:	f7fe f9fc 	bl	8005fbe <osThreadCreate>
 8007bc6:	4b0b      	ldr	r3, [pc, #44]	; (8007bf4 <MX_FREERTOS_Init+0x5c>)
 8007bc8:	6018      	str	r0, [r3, #0]
  osThreadDef(GPSUpdate, StartGPSUpdate, osPriorityIdle, 0, 128);
 8007bca:	466d      	mov	r5, sp
 8007bcc:	341c      	adds	r4, #28
 8007bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007bd2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8007bd6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  GPSUpdateHandle = osThreadCreate(osThread(GPSUpdate), NULL);
 8007bda:	4639      	mov	r1, r7
 8007bdc:	4668      	mov	r0, sp
 8007bde:	f7fe f9ee 	bl	8005fbe <osThreadCreate>
 8007be2:	4b05      	ldr	r3, [pc, #20]	; (8007bf8 <MX_FREERTOS_Init+0x60>)
 8007be4:	6018      	str	r0, [r3, #0]
}
 8007be6:	b011      	add	sp, #68	; 0x44
 8007be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bea:	bf00      	nop
 8007bec:	20004938 	.word	0x20004938
 8007bf0:	0800e5f0 	.word	0x0800e5f0
 8007bf4:	200044dc 	.word	0x200044dc
 8007bf8:	200044e0 	.word	0x200044e0

08007bfc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8007bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c00:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c02:	2400      	movs	r4, #0
 8007c04:	9405      	str	r4, [sp, #20]
 8007c06:	9406      	str	r4, [sp, #24]
 8007c08:	9407      	str	r4, [sp, #28]
 8007c0a:	9408      	str	r4, [sp, #32]
 8007c0c:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c0e:	9400      	str	r4, [sp, #0]
 8007c10:	4b53      	ldr	r3, [pc, #332]	; (8007d60 <MX_GPIO_Init+0x164>)
 8007c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c14:	f042 0204 	orr.w	r2, r2, #4
 8007c18:	631a      	str	r2, [r3, #48]	; 0x30
 8007c1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c1c:	f002 0204 	and.w	r2, r2, #4
 8007c20:	9200      	str	r2, [sp, #0]
 8007c22:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007c24:	9401      	str	r4, [sp, #4]
 8007c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c2c:	631a      	str	r2, [r3, #48]	; 0x30
 8007c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c30:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8007c34:	9201      	str	r2, [sp, #4]
 8007c36:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c38:	9402      	str	r4, [sp, #8]
 8007c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c3c:	f042 0201 	orr.w	r2, r2, #1
 8007c40:	631a      	str	r2, [r3, #48]	; 0x30
 8007c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c44:	f002 0201 	and.w	r2, r2, #1
 8007c48:	9202      	str	r2, [sp, #8]
 8007c4a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c4c:	9403      	str	r4, [sp, #12]
 8007c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c50:	f042 0202 	orr.w	r2, r2, #2
 8007c54:	631a      	str	r2, [r3, #48]	; 0x30
 8007c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c58:	f002 0202 	and.w	r2, r2, #2
 8007c5c:	9203      	str	r2, [sp, #12]
 8007c5e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c60:	9404      	str	r4, [sp, #16]
 8007c62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c64:	f042 0208 	orr.w	r2, r2, #8
 8007c68:	631a      	str	r2, [r3, #48]	; 0x30
 8007c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6c:	f003 0308 	and.w	r3, r3, #8
 8007c70:	9304      	str	r3, [sp, #16]
 8007c72:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8007c74:	4e3b      	ldr	r6, [pc, #236]	; (8007d64 <MX_GPIO_Init+0x168>)
 8007c76:	4622      	mov	r2, r4
 8007c78:	2120      	movs	r1, #32
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	f7fb fde0 	bl	8003840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8007c80:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8007d78 <MX_GPIO_Init+0x17c>
 8007c84:	4622      	mov	r2, r4
 8007c86:	2120      	movs	r1, #32
 8007c88:	4648      	mov	r0, r9
 8007c8a:	f7fb fdd9 	bl	8003840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8007c8e:	4f36      	ldr	r7, [pc, #216]	; (8007d68 <MX_GPIO_Init+0x16c>)
 8007c90:	4622      	mov	r2, r4
 8007c92:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8007c96:	4638      	mov	r0, r7
 8007c98:	f7fb fdd2 	bl	8003840 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC3 PC4 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8007c9c:	f64f 731b 	movw	r3, #65307	; 0xff1b
 8007ca0:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007ca2:	2503      	movs	r5, #3
 8007ca4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ca6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007ca8:	a905      	add	r1, sp, #20
 8007caa:	4648      	mov	r0, r9
 8007cac:	f7fb fcf6 	bl	800369c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007cb0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007cb2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cb4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007cb6:	a905      	add	r1, sp, #20
 8007cb8:	482c      	ldr	r0, [pc, #176]	; (8007d6c <MX_GPIO_Init+0x170>)
 8007cba:	f7fb fcef 	bl	800369c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA6 PA7 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8007cbe:	f649 63df 	movw	r3, #40671	; 0x9edf
 8007cc2:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007cc4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cc6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cc8:	a905      	add	r1, sp, #20
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f7fb fce6 	bl	800369c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007cd0:	f04f 0a20 	mov.w	sl, #32
 8007cd4:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007cd8:	f04f 0801 	mov.w	r8, #1
 8007cdc:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ce0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ce2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ce4:	a905      	add	r1, sp, #20
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	f7fb fcd8 	bl	800369c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8007cec:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007cf0:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cf4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cf6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007cf8:	a905      	add	r1, sp, #20
 8007cfa:	4648      	mov	r0, r9
 8007cfc:	f7fb fcce 	bl	800369c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4 
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 8007d00:	2337      	movs	r3, #55	; 0x37
 8007d02:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d04:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d06:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d08:	a905      	add	r1, sp, #20
 8007d0a:	4638      	mov	r0, r7
 8007d0c:	f7fb fcc6 	bl	800369c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8007d10:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8007d14:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d16:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d1a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d1c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d1e:	a905      	add	r1, sp, #20
 8007d20:	4638      	mov	r0, r7
 8007d22:	f7fb fcbb 	bl	800369c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_INT_Pin;
 8007d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d2a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007d2c:	4b10      	ldr	r3, [pc, #64]	; (8007d70 <MX_GPIO_Init+0x174>)
 8007d2e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d30:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PWM_INT_GPIO_Port, &GPIO_InitStruct);
 8007d32:	a905      	add	r1, sp, #20
 8007d34:	4630      	mov	r0, r6
 8007d36:	f7fb fcb1 	bl	800369c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007d3a:	2304      	movs	r3, #4
 8007d3c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d3e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d40:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007d42:	a905      	add	r1, sp, #20
 8007d44:	480b      	ldr	r0, [pc, #44]	; (8007d74 <MX_GPIO_Init+0x178>)
 8007d46:	f7fb fca9 	bl	800369c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 8007d4a:	4622      	mov	r2, r4
 8007d4c:	2107      	movs	r1, #7
 8007d4e:	2017      	movs	r0, #23
 8007d50:	f7fb f956 	bl	8003000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007d54:	2017      	movs	r0, #23
 8007d56:	f7fb f987 	bl	8003068 <HAL_NVIC_EnableIRQ>

}
 8007d5a:	b00a      	add	sp, #40	; 0x28
 8007d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d60:	40023800 	.word	0x40023800
 8007d64:	40020000 	.word	0x40020000
 8007d68:	40020400 	.word	0x40020400
 8007d6c:	40021c00 	.word	0x40021c00
 8007d70:	10110000 	.word	0x10110000
 8007d74:	40020c00 	.word	0x40020c00
 8007d78:	40020800 	.word	0x40020800

08007d7c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8007d7c:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 8007d7e:	480b      	ldr	r0, [pc, #44]	; (8007dac <MX_I2C2_Init+0x30>)
 8007d80:	4b0b      	ldr	r3, [pc, #44]	; (8007db0 <MX_I2C2_Init+0x34>)
 8007d82:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8007d84:	4b0b      	ldr	r3, [pc, #44]	; (8007db4 <MX_I2C2_Init+0x38>)
 8007d86:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8007d8c:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007d8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007d92:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007d94:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8007d96:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007d98:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007d9a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007d9c:	f7fb ff72 	bl	8003c84 <HAL_I2C_Init>
 8007da0:	b900      	cbnz	r0, 8007da4 <MX_I2C2_Init+0x28>
  {
    Error_Handler();
  }

}
 8007da2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007da4:	f000 f8c4 	bl	8007f30 <Error_Handler>
}
 8007da8:	e7fb      	b.n	8007da2 <MX_I2C2_Init+0x26>
 8007daa:	bf00      	nop
 8007dac:	20004374 	.word	0x20004374
 8007db0:	40005800 	.word	0x40005800
 8007db4:	00061a80 	.word	0x00061a80

08007db8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007dbc:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	9303      	str	r3, [sp, #12]
 8007dc2:	9304      	str	r3, [sp, #16]
 8007dc4:	9305      	str	r3, [sp, #20]
 8007dc6:	9306      	str	r3, [sp, #24]
 8007dc8:	9307      	str	r3, [sp, #28]
  if(i2cHandle->Instance==I2C2)
 8007dca:	6802      	ldr	r2, [r0, #0]
 8007dcc:	4b1e      	ldr	r3, [pc, #120]	; (8007e48 <HAL_I2C_MspInit+0x90>)
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d002      	beq.n	8007dd8 <HAL_I2C_MspInit+0x20>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8007dd2:	b009      	add	sp, #36	; 0x24
 8007dd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007dd8:	2500      	movs	r5, #0
 8007dda:	9501      	str	r5, [sp, #4]
 8007ddc:	4c1b      	ldr	r4, [pc, #108]	; (8007e4c <HAL_I2C_MspInit+0x94>)
 8007dde:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007de0:	f043 0302 	orr.w	r3, r3, #2
 8007de4:	6323      	str	r3, [r4, #48]	; 0x30
 8007de6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	9301      	str	r3, [sp, #4]
 8007dee:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007df4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007df6:	f04f 0912 	mov.w	r9, #18
 8007dfa:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007dfe:	f04f 0801 	mov.w	r8, #1
 8007e02:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e06:	2703      	movs	r7, #3
 8007e08:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007e0a:	2304      	movs	r3, #4
 8007e0c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e0e:	4e10      	ldr	r6, [pc, #64]	; (8007e50 <HAL_I2C_MspInit+0x98>)
 8007e10:	a903      	add	r1, sp, #12
 8007e12:	4630      	mov	r0, r6
 8007e14:	f7fb fc42 	bl	800369c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007e18:	2308      	movs	r3, #8
 8007e1a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007e1c:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e20:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e24:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8007e26:	2309      	movs	r3, #9
 8007e28:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e2a:	a903      	add	r1, sp, #12
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	f7fb fc35 	bl	800369c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007e32:	9502      	str	r5, [sp, #8]
 8007e34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007e3a:	6423      	str	r3, [r4, #64]	; 0x40
 8007e3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e42:	9302      	str	r3, [sp, #8]
 8007e44:	9b02      	ldr	r3, [sp, #8]
}
 8007e46:	e7c4      	b.n	8007dd2 <HAL_I2C_MspInit+0x1a>
 8007e48:	40005800 	.word	0x40005800
 8007e4c:	40023800 	.word	0x40023800
 8007e50:	40020400 	.word	0x40020400

08007e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007e54:	b530      	push	{r4, r5, lr}
 8007e56:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007e58:	2230      	movs	r2, #48	; 0x30
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	a808      	add	r0, sp, #32
 8007e5e:	f002 f997 	bl	800a190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007e62:	2400      	movs	r4, #0
 8007e64:	9403      	str	r4, [sp, #12]
 8007e66:	9404      	str	r4, [sp, #16]
 8007e68:	9405      	str	r4, [sp, #20]
 8007e6a:	9406      	str	r4, [sp, #24]
 8007e6c:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007e6e:	9401      	str	r4, [sp, #4]
 8007e70:	4b1a      	ldr	r3, [pc, #104]	; (8007edc <SystemClock_Config+0x88>)
 8007e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007e78:	641a      	str	r2, [r3, #64]	; 0x40
 8007e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e80:	9301      	str	r3, [sp, #4]
 8007e82:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e84:	9402      	str	r4, [sp, #8]
 8007e86:	4b16      	ldr	r3, [pc, #88]	; (8007ee0 <SystemClock_Config+0x8c>)
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e96:	9302      	str	r3, [sp, #8]
 8007e98:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007e9a:	2502      	movs	r5, #2
 8007e9c:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007ea2:	2310      	movs	r3, #16
 8007ea4:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007ea6:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007ea8:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007eaa:	2308      	movs	r3, #8
 8007eac:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8007eae:	2364      	movs	r3, #100	; 0x64
 8007eb0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007eb2:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007eb4:	2304      	movs	r3, #4
 8007eb6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007eb8:	a808      	add	r0, sp, #32
 8007eba:	f7fc fa97 	bl	80043ec <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007ebe:	230f      	movs	r3, #15
 8007ec0:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007ec2:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007ec4:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007eca:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007ecc:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8007ece:	2103      	movs	r1, #3
 8007ed0:	a803      	add	r0, sp, #12
 8007ed2:	f7fc fcc3 	bl	800485c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8007ed6:	b015      	add	sp, #84	; 0x54
 8007ed8:	bd30      	pop	{r4, r5, pc}
 8007eda:	bf00      	nop
 8007edc:	40023800 	.word	0x40023800
 8007ee0:	40007000 	.word	0x40007000

08007ee4 <main>:
 {
 8007ee4:	b508      	push	{r3, lr}
  HAL_Init();
 8007ee6:	f7fb f839 	bl	8002f5c <HAL_Init>
  SystemClock_Config();
 8007eea:	f7ff ffb3 	bl	8007e54 <SystemClock_Config>
  MX_GPIO_Init();
 8007eee:	f7ff fe85 	bl	8007bfc <MX_GPIO_Init>
  MX_DMA_Init();
 8007ef2:	f7ff fdcd 	bl	8007a90 <MX_DMA_Init>
  MX_I2C2_Init();
 8007ef6:	f7ff ff41 	bl	8007d7c <MX_I2C2_Init>
  MX_TIM4_Init();
 8007efa:	f000 fa13 	bl	8008324 <MX_TIM4_Init>
  MX_SPI2_Init();
 8007efe:	f000 f819 	bl	8007f34 <MX_SPI2_Init>
  MX_CRC_Init();
 8007f02:	f7ff fd9d 	bl	8007a40 <MX_CRC_Init>
  MX_TIM11_Init();
 8007f06:	f000 f999 	bl	800823c <MX_TIM11_Init>
  MX_USART6_UART_Init();
 8007f0a:	f000 fa69 	bl	80083e0 <MX_USART6_UART_Init>
  MX_FREERTOS_Init();
 8007f0e:	f7ff fe43 	bl	8007b98 <MX_FREERTOS_Init>
  osKernelStart();
 8007f12:	f7fe f84f 	bl	8005fb4 <osKernelStart>
 8007f16:	e7fe      	b.n	8007f16 <main+0x32>

08007f18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8007f1a:	6802      	ldr	r2, [r0, #0]
 8007f1c:	4b03      	ldr	r3, [pc, #12]	; (8007f2c <HAL_TIM_PeriodElapsedCallback+0x14>)
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d000      	beq.n	8007f24 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007f22:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8007f24:	f7fb f834 	bl	8002f90 <HAL_IncTick>
}
 8007f28:	e7fb      	b.n	8007f22 <HAL_TIM_PeriodElapsedCallback+0xa>
 8007f2a:	bf00      	nop
 8007f2c:	40010000 	.word	0x40010000

08007f30 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007f30:	4770      	bx	lr
	...

08007f34 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007f34:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8007f36:	480e      	ldr	r0, [pc, #56]	; (8007f70 <MX_SPI2_Init+0x3c>)
 8007f38:	4b0e      	ldr	r3, [pc, #56]	; (8007f74 <MX_SPI2_Init+0x40>)
 8007f3a:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007f3c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007f40:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007f42:	2300      	movs	r3, #0
 8007f44:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007f46:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f48:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007f4a:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f50:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8007f52:	2220      	movs	r2, #32
 8007f54:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007f56:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007f58:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f5a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007f5c:	230a      	movs	r3, #10
 8007f5e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007f60:	f7fc fe34 	bl	8004bcc <HAL_SPI_Init>
 8007f64:	b900      	cbnz	r0, 8007f68 <MX_SPI2_Init+0x34>
  {
    Error_Handler();
  }

}
 8007f66:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007f68:	f7ff ffe2 	bl	8007f30 <Error_Handler>
}
 8007f6c:	e7fb      	b.n	8007f66 <MX_SPI2_Init+0x32>
 8007f6e:	bf00      	nop
 8007f70:	2000493c 	.word	0x2000493c
 8007f74:	40003800 	.word	0x40003800

08007f78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f7a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	9303      	str	r3, [sp, #12]
 8007f80:	9304      	str	r3, [sp, #16]
 8007f82:	9305      	str	r3, [sp, #20]
 8007f84:	9306      	str	r3, [sp, #24]
 8007f86:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8007f88:	6802      	ldr	r2, [r0, #0]
 8007f8a:	4b23      	ldr	r3, [pc, #140]	; (8008018 <HAL_SPI_MspInit+0xa0>)
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d001      	beq.n	8007f94 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007f90:	b009      	add	sp, #36	; 0x24
 8007f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007f94:	2400      	movs	r4, #0
 8007f96:	9400      	str	r4, [sp, #0]
 8007f98:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8007f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fa2:	641a      	str	r2, [r3, #64]	; 0x40
 8007fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fa6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007faa:	9200      	str	r2, [sp, #0]
 8007fac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007fae:	9401      	str	r4, [sp, #4]
 8007fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fb2:	f042 0204 	orr.w	r2, r2, #4
 8007fb6:	631a      	str	r2, [r3, #48]	; 0x30
 8007fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fba:	f002 0204 	and.w	r2, r2, #4
 8007fbe:	9201      	str	r2, [sp, #4]
 8007fc0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007fc2:	9402      	str	r4, [sp, #8]
 8007fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fc6:	f042 0202 	orr.w	r2, r2, #2
 8007fca:	631a      	str	r2, [r3, #48]	; 0x30
 8007fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fce:	f003 0302 	and.w	r3, r3, #2
 8007fd2:	9302      	str	r3, [sp, #8]
 8007fd4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007fd6:	2304      	movs	r3, #4
 8007fd8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fda:	2702      	movs	r7, #2
 8007fdc:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fde:	2603      	movs	r6, #3
 8007fe0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007fe2:	2505      	movs	r5, #5
 8007fe4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007fe6:	a903      	add	r1, sp, #12
 8007fe8:	480c      	ldr	r0, [pc, #48]	; (800801c <HAL_SPI_MspInit+0xa4>)
 8007fea:	f7fb fb57 	bl	800369c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8007fee:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8007ff2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ff4:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ff6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ff8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007ffa:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ffc:	a903      	add	r1, sp, #12
 8007ffe:	4808      	ldr	r0, [pc, #32]	; (8008020 <HAL_SPI_MspInit+0xa8>)
 8008000:	f7fb fb4c 	bl	800369c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8008004:	4622      	mov	r2, r4
 8008006:	4629      	mov	r1, r5
 8008008:	2024      	movs	r0, #36	; 0x24
 800800a:	f7fa fff9 	bl	8003000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800800e:	2024      	movs	r0, #36	; 0x24
 8008010:	f7fb f82a 	bl	8003068 <HAL_NVIC_EnableIRQ>
}
 8008014:	e7bc      	b.n	8007f90 <HAL_SPI_MspInit+0x18>
 8008016:	bf00      	nop
 8008018:	40003800 	.word	0x40003800
 800801c:	40020800 	.word	0x40020800
 8008020:	40020400 	.word	0x40020400

08008024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008024:	b510      	push	{r4, lr}
 8008026:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008028:	2400      	movs	r4, #0
 800802a:	9400      	str	r4, [sp, #0]
 800802c:	4b15      	ldr	r3, [pc, #84]	; (8008084 <HAL_MspInit+0x60>)
 800802e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008030:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008034:	645a      	str	r2, [r3, #68]	; 0x44
 8008036:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008038:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800803c:	9200      	str	r2, [sp, #0]
 800803e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008040:	9401      	str	r4, [sp, #4]
 8008042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008044:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008048:	641a      	str	r2, [r3, #64]	; 0x40
 800804a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008050:	9301      	str	r3, [sp, #4]
 8008052:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008054:	4622      	mov	r2, r4
 8008056:	210f      	movs	r1, #15
 8008058:	f06f 0001 	mvn.w	r0, #1
 800805c:	f7fa ffd0 	bl	8003000 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 11, 0);
 8008060:	4622      	mov	r2, r4
 8008062:	210b      	movs	r1, #11
 8008064:	2004      	movs	r0, #4
 8008066:	f7fa ffcb 	bl	8003000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800806a:	2004      	movs	r0, #4
 800806c:	f7fa fffc 	bl	8003068 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 10, 0);
 8008070:	4622      	mov	r2, r4
 8008072:	210a      	movs	r1, #10
 8008074:	2005      	movs	r0, #5
 8008076:	f7fa ffc3 	bl	8003000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800807a:	2005      	movs	r0, #5
 800807c:	f7fa fff4 	bl	8003068 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008080:	b002      	add	sp, #8
 8008082:	bd10      	pop	{r4, pc}
 8008084:	40023800 	.word	0x40023800

08008088 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008088:	b510      	push	{r4, lr}
 800808a:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800808c:	2200      	movs	r2, #0
 800808e:	4601      	mov	r1, r0
 8008090:	2019      	movs	r0, #25
 8008092:	f7fa ffb5 	bl	8003000 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8008096:	2019      	movs	r0, #25
 8008098:	f7fa ffe6 	bl	8003068 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800809c:	2400      	movs	r4, #0
 800809e:	9401      	str	r4, [sp, #4]
 80080a0:	4b13      	ldr	r3, [pc, #76]	; (80080f0 <HAL_InitTick+0x68>)
 80080a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080a4:	f042 0201 	orr.w	r2, r2, #1
 80080a8:	645a      	str	r2, [r3, #68]	; 0x44
 80080aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80080b4:	a902      	add	r1, sp, #8
 80080b6:	a803      	add	r0, sp, #12
 80080b8:	f7fc fca2 	bl	8004a00 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80080bc:	f7fc fc90 	bl	80049e0 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80080c0:	4b0c      	ldr	r3, [pc, #48]	; (80080f4 <HAL_InitTick+0x6c>)
 80080c2:	fba3 2300 	umull	r2, r3, r3, r0
 80080c6:	0c9b      	lsrs	r3, r3, #18
 80080c8:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80080ca:	480b      	ldr	r0, [pc, #44]	; (80080f8 <HAL_InitTick+0x70>)
 80080cc:	4a0b      	ldr	r2, [pc, #44]	; (80080fc <HAL_InitTick+0x74>)
 80080ce:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80080d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80080d4:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80080d6:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 80080d8:	6104      	str	r4, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080da:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80080dc:	f7fd fa9a 	bl	8005614 <HAL_TIM_Base_Init>
 80080e0:	b110      	cbz	r0, 80080e8 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 80080e2:	2001      	movs	r0, #1
}
 80080e4:	b008      	add	sp, #32
 80080e6:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 80080e8:	4803      	ldr	r0, [pc, #12]	; (80080f8 <HAL_InitTick+0x70>)
 80080ea:	f7fd f973 	bl	80053d4 <HAL_TIM_Base_Start_IT>
 80080ee:	e7f9      	b.n	80080e4 <HAL_InitTick+0x5c>
 80080f0:	40023800 	.word	0x40023800
 80080f4:	431bde83 	.word	0x431bde83
 80080f8:	20004994 	.word	0x20004994
 80080fc:	40010000 	.word	0x40010000

08008100 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008100:	4770      	bx	lr

08008102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008102:	e7fe      	b.n	8008102 <HardFault_Handler>

08008104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008104:	e7fe      	b.n	8008104 <MemManage_Handler>

08008106 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008106:	e7fe      	b.n	8008106 <BusFault_Handler>

08008108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008108:	e7fe      	b.n	8008108 <UsageFault_Handler>

0800810a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800810a:	4770      	bx	lr

0800810c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800810c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800810e:	f7fb f9ef 	bl	80034f0 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8008112:	bd08      	pop	{r3, pc}

08008114 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8008114:	4770      	bx	lr

08008116 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008116:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8008118:	f44f 7080 	mov.w	r0, #256	; 0x100
 800811c:	f7fb fba0 	bl	8003860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008120:	bd08      	pop	{r3, pc}
	...

08008124 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8008124:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008126:	4802      	ldr	r0, [pc, #8]	; (8008130 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8008128:	f7fd f969 	bl	80053fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800812c:	bd08      	pop	{r3, pc}
 800812e:	bf00      	nop
 8008130:	20004994 	.word	0x20004994

08008134 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008134:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008136:	4802      	ldr	r0, [pc, #8]	; (8008140 <SPI2_IRQHandler+0xc>)
 8008138:	f7fd f81e 	bl	8005178 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800813c:	bd08      	pop	{r3, pc}
 800813e:	bf00      	nop
 8008140:	2000493c 	.word	0x2000493c

08008144 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8008144:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8008146:	4802      	ldr	r0, [pc, #8]	; (8008150 <DMA2_Stream1_IRQHandler+0xc>)
 8008148:	f7fb f88e 	bl	8003268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800814c:	bd08      	pop	{r3, pc}
 800814e:	bf00      	nop
 8008150:	20004a54 	.word	0x20004a54

08008154 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8008154:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8008156:	4802      	ldr	r0, [pc, #8]	; (8008160 <USART6_IRQHandler+0xc>)
 8008158:	f7fd fe8e 	bl	8005e78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
	//UART_timeout();
  /* USER CODE END USART6_IRQn 1 */
}
 800815c:	bd08      	pop	{r3, pc}
 800815e:	bf00      	nop
 8008160:	20004ab4 	.word	0x20004ab4

08008164 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008164:	b570      	push	{r4, r5, r6, lr}
 8008166:	460d      	mov	r5, r1
 8008168:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800816a:	2400      	movs	r4, #0
 800816c:	e004      	b.n	8008178 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 800816e:	f3af 8000 	nop.w
 8008172:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008174:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8008176:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008178:	42b4      	cmp	r4, r6
 800817a:	dbf8      	blt.n	800816e <_read+0xa>
	}

return len;
}
 800817c:	4630      	mov	r0, r6
 800817e:	bd70      	pop	{r4, r5, r6, pc}

08008180 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008180:	b570      	push	{r4, r5, r6, lr}
 8008182:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008184:	2400      	movs	r4, #0
 8008186:	e005      	b.n	8008194 <_write+0x14>
	{
		__io_putchar(*ptr++);
 8008188:	1c4d      	adds	r5, r1, #1
 800818a:	7808      	ldrb	r0, [r1, #0]
 800818c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008190:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8008192:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008194:	42b4      	cmp	r4, r6
 8008196:	dbf7      	blt.n	8008188 <_write+0x8>
	}
	return len;
}
 8008198:	4630      	mov	r0, r6
 800819a:	bd70      	pop	{r4, r5, r6, pc}

0800819c <_close>:

int _close(int file)
{
	return -1;
}
 800819c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081a0:	4770      	bx	lr

080081a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80081a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80081a6:	604b      	str	r3, [r1, #4]
	return 0;
}
 80081a8:	2000      	movs	r0, #0
 80081aa:	4770      	bx	lr

080081ac <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80081ac:	2001      	movs	r0, #1
 80081ae:	4770      	bx	lr

080081b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80081b0:	2000      	movs	r0, #0
 80081b2:	4770      	bx	lr

080081b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80081b4:	b508      	push	{r3, lr}
 80081b6:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80081b8:	4a0b      	ldr	r2, [pc, #44]	; (80081e8 <_sbrk+0x34>)
 80081ba:	6812      	ldr	r2, [r2, #0]
 80081bc:	b142      	cbz	r2, 80081d0 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80081be:	4a0a      	ldr	r2, [pc, #40]	; (80081e8 <_sbrk+0x34>)
 80081c0:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80081c2:	4403      	add	r3, r0
 80081c4:	466a      	mov	r2, sp
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d806      	bhi.n	80081d8 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80081ca:	4a07      	ldr	r2, [pc, #28]	; (80081e8 <_sbrk+0x34>)
 80081cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80081ce:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80081d0:	4a05      	ldr	r2, [pc, #20]	; (80081e8 <_sbrk+0x34>)
 80081d2:	4906      	ldr	r1, [pc, #24]	; (80081ec <_sbrk+0x38>)
 80081d4:	6011      	str	r1, [r2, #0]
 80081d6:	e7f2      	b.n	80081be <_sbrk+0xa>
		errno = ENOMEM;
 80081d8:	f001 ff90 	bl	800a0fc <__errno>
 80081dc:	230c      	movs	r3, #12
 80081de:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80081e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081e4:	e7f3      	b.n	80081ce <_sbrk+0x1a>
 80081e6:	bf00      	nop
 80081e8:	20004348 	.word	0x20004348
 80081ec:	20004af8 	.word	0x20004af8

080081f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80081f0:	490f      	ldr	r1, [pc, #60]	; (8008230 <SystemInit+0x40>)
 80081f2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80081f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80081fe:	4b0d      	ldr	r3, [pc, #52]	; (8008234 <SystemInit+0x44>)
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008208:	2000      	movs	r0, #0
 800820a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8008212:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008216:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008218:	4a07      	ldr	r2, [pc, #28]	; (8008238 <SystemInit+0x48>)
 800821a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008222:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008224:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008226:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800822a:	608b      	str	r3, [r1, #8]
#endif
}
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	e000ed00 	.word	0xe000ed00
 8008234:	40023800 	.word	0x40023800
 8008238:	24003010 	.word	0x24003010

0800823c <MX_TIM11_Init>:
  HAL_TIM_MspPostInit(&htim4);

}
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800823c:	b508      	push	{r3, lr}

  htim11.Instance = TIM11;
 800823e:	4809      	ldr	r0, [pc, #36]	; (8008264 <MX_TIM11_Init+0x28>)
 8008240:	4b09      	ldr	r3, [pc, #36]	; (8008268 <MX_TIM11_Init+0x2c>)
 8008242:	6003      	str	r3, [r0, #0]
  htim11.Init.Prescaler = 100;
 8008244:	2364      	movs	r3, #100	; 0x64
 8008246:	6043      	str	r3, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008248:	2300      	movs	r3, #0
 800824a:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 65535;
 800824c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008250:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008252:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008254:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8008256:	f7fd f9dd 	bl	8005614 <HAL_TIM_Base_Init>
 800825a:	b900      	cbnz	r0, 800825e <MX_TIM11_Init+0x22>
  {
    Error_Handler();
  }

}
 800825c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800825e:	f7ff fe67 	bl	8007f30 <Error_Handler>
}
 8008262:	e7fb      	b.n	800825c <MX_TIM11_Init+0x20>
 8008264:	20004a14 	.word	0x20004a14
 8008268:	40014800 	.word	0x40014800

0800826c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM4)
 800826c:	6802      	ldr	r2, [r0, #0]
 800826e:	4b09      	ldr	r3, [pc, #36]	; (8008294 <HAL_TIM_PWM_MspInit+0x28>)
 8008270:	429a      	cmp	r2, r3
 8008272:	d000      	beq.n	8008276 <HAL_TIM_PWM_MspInit+0xa>
 8008274:	4770      	bx	lr
{
 8008276:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008278:	2300      	movs	r3, #0
 800827a:	9301      	str	r3, [sp, #4]
 800827c:	4b06      	ldr	r3, [pc, #24]	; (8008298 <HAL_TIM_PWM_MspInit+0x2c>)
 800827e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008280:	f042 0204 	orr.w	r2, r2, #4
 8008284:	641a      	str	r2, [r3, #64]	; 0x40
 8008286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008288:	f003 0304 	and.w	r3, r3, #4
 800828c:	9301      	str	r3, [sp, #4]
 800828e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8008290:	b002      	add	sp, #8
 8008292:	4770      	bx	lr
 8008294:	40000800 	.word	0x40000800
 8008298:	40023800 	.word	0x40023800

0800829c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM11)
 800829c:	6802      	ldr	r2, [r0, #0]
 800829e:	4b09      	ldr	r3, [pc, #36]	; (80082c4 <HAL_TIM_Base_MspInit+0x28>)
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d000      	beq.n	80082a6 <HAL_TIM_Base_MspInit+0xa>
 80082a4:	4770      	bx	lr
{
 80082a6:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80082a8:	2300      	movs	r3, #0
 80082aa:	9301      	str	r3, [sp, #4]
 80082ac:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <HAL_TIM_Base_MspInit+0x2c>)
 80082ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082b0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80082b4:	645a      	str	r2, [r3, #68]	; 0x44
 80082b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082bc:	9301      	str	r3, [sp, #4]
 80082be:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 80082c0:	b002      	add	sp, #8
 80082c2:	4770      	bx	lr
 80082c4:	40014800 	.word	0x40014800
 80082c8:	40023800 	.word	0x40023800

080082cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80082cc:	b500      	push	{lr}
 80082ce:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082d0:	2300      	movs	r3, #0
 80082d2:	9301      	str	r3, [sp, #4]
 80082d4:	9302      	str	r3, [sp, #8]
 80082d6:	9303      	str	r3, [sp, #12]
 80082d8:	9304      	str	r3, [sp, #16]
 80082da:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM4)
 80082dc:	6802      	ldr	r2, [r0, #0]
 80082de:	4b0e      	ldr	r3, [pc, #56]	; (8008318 <HAL_TIM_MspPostInit+0x4c>)
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d002      	beq.n	80082ea <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80082e4:	b007      	add	sp, #28
 80082e6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082ea:	2300      	movs	r3, #0
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	4b0b      	ldr	r3, [pc, #44]	; (800831c <HAL_TIM_MspPostInit+0x50>)
 80082f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082f2:	f042 0202 	orr.w	r2, r2, #2
 80082f6:	631a      	str	r2, [r3, #48]	; 0x30
 80082f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8008302:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008306:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008308:	2302      	movs	r3, #2
 800830a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800830c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800830e:	a901      	add	r1, sp, #4
 8008310:	4803      	ldr	r0, [pc, #12]	; (8008320 <HAL_TIM_MspPostInit+0x54>)
 8008312:	f7fb f9c3 	bl	800369c <HAL_GPIO_Init>
}
 8008316:	e7e5      	b.n	80082e4 <HAL_TIM_MspPostInit+0x18>
 8008318:	40000800 	.word	0x40000800
 800831c:	40023800 	.word	0x40023800
 8008320:	40020400 	.word	0x40020400

08008324 <MX_TIM4_Init>:
{
 8008324:	b500      	push	{lr}
 8008326:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008328:	2300      	movs	r3, #0
 800832a:	9308      	str	r3, [sp, #32]
 800832c:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800832e:	9301      	str	r3, [sp, #4]
 8008330:	9302      	str	r3, [sp, #8]
 8008332:	9303      	str	r3, [sp, #12]
 8008334:	9304      	str	r3, [sp, #16]
 8008336:	9305      	str	r3, [sp, #20]
 8008338:	9306      	str	r3, [sp, #24]
 800833a:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 800833c:	4826      	ldr	r0, [pc, #152]	; (80083d8 <MX_TIM4_Init+0xb4>)
 800833e:	4a27      	ldr	r2, [pc, #156]	; (80083dc <MX_TIM4_Init+0xb8>)
 8008340:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 9;
 8008342:	2209      	movs	r2, #9
 8008344:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008346:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 20000;
 8008348:	f644 6220 	movw	r2, #20000	; 0x4e20
 800834c:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800834e:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008350:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8008352:	f7fd f978 	bl	8005646 <HAL_TIM_PWM_Init>
 8008356:	bb68      	cbnz	r0, 80083b4 <MX_TIM4_Init+0x90>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008358:	2300      	movs	r3, #0
 800835a:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800835c:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800835e:	a908      	add	r1, sp, #32
 8008360:	481d      	ldr	r0, [pc, #116]	; (80083d8 <MX_TIM4_Init+0xb4>)
 8008362:	f7fd fa59 	bl	8005818 <HAL_TIMEx_MasterConfigSynchronization>
 8008366:	bb40      	cbnz	r0, 80083ba <MX_TIM4_Init+0x96>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008368:	2360      	movs	r3, #96	; 0x60
 800836a:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 800836c:	2200      	movs	r2, #0
 800836e:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008370:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8008372:	2304      	movs	r3, #4
 8008374:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008376:	eb0d 0103 	add.w	r1, sp, r3
 800837a:	4817      	ldr	r0, [pc, #92]	; (80083d8 <MX_TIM4_Init+0xb4>)
 800837c:	f7fd f9ae 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 8008380:	b9f0      	cbnz	r0, 80083c0 <MX_TIM4_Init+0x9c>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008382:	2204      	movs	r2, #4
 8008384:	eb0d 0102 	add.w	r1, sp, r2
 8008388:	4813      	ldr	r0, [pc, #76]	; (80083d8 <MX_TIM4_Init+0xb4>)
 800838a:	f7fd f9a7 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 800838e:	b9d0      	cbnz	r0, 80083c6 <MX_TIM4_Init+0xa2>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008390:	2208      	movs	r2, #8
 8008392:	a901      	add	r1, sp, #4
 8008394:	4810      	ldr	r0, [pc, #64]	; (80083d8 <MX_TIM4_Init+0xb4>)
 8008396:	f7fd f9a1 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 800839a:	b9b8      	cbnz	r0, 80083cc <MX_TIM4_Init+0xa8>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800839c:	220c      	movs	r2, #12
 800839e:	a901      	add	r1, sp, #4
 80083a0:	480d      	ldr	r0, [pc, #52]	; (80083d8 <MX_TIM4_Init+0xb4>)
 80083a2:	f7fd f99b 	bl	80056dc <HAL_TIM_PWM_ConfigChannel>
 80083a6:	b9a0      	cbnz	r0, 80083d2 <MX_TIM4_Init+0xae>
  HAL_TIM_MspPostInit(&htim4);
 80083a8:	480b      	ldr	r0, [pc, #44]	; (80083d8 <MX_TIM4_Init+0xb4>)
 80083aa:	f7ff ff8f 	bl	80082cc <HAL_TIM_MspPostInit>
}
 80083ae:	b00b      	add	sp, #44	; 0x2c
 80083b0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80083b4:	f7ff fdbc 	bl	8007f30 <Error_Handler>
 80083b8:	e7ce      	b.n	8008358 <MX_TIM4_Init+0x34>
    Error_Handler();
 80083ba:	f7ff fdb9 	bl	8007f30 <Error_Handler>
 80083be:	e7d3      	b.n	8008368 <MX_TIM4_Init+0x44>
    Error_Handler();
 80083c0:	f7ff fdb6 	bl	8007f30 <Error_Handler>
 80083c4:	e7dd      	b.n	8008382 <MX_TIM4_Init+0x5e>
    Error_Handler();
 80083c6:	f7ff fdb3 	bl	8007f30 <Error_Handler>
 80083ca:	e7e1      	b.n	8008390 <MX_TIM4_Init+0x6c>
    Error_Handler();
 80083cc:	f7ff fdb0 	bl	8007f30 <Error_Handler>
 80083d0:	e7e4      	b.n	800839c <MX_TIM4_Init+0x78>
    Error_Handler();
 80083d2:	f7ff fdad 	bl	8007f30 <Error_Handler>
 80083d6:	e7e7      	b.n	80083a8 <MX_TIM4_Init+0x84>
 80083d8:	200049d4 	.word	0x200049d4
 80083dc:	40000800 	.word	0x40000800

080083e0 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80083e0:	b508      	push	{r3, lr}

  huart6.Instance = USART6;
 80083e2:	480a      	ldr	r0, [pc, #40]	; (800840c <MX_USART6_UART_Init+0x2c>)
 80083e4:	4b0a      	ldr	r3, [pc, #40]	; (8008410 <MX_USART6_UART_Init+0x30>)
 80083e6:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 9600;
 80083e8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80083ec:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80083ee:	2300      	movs	r3, #0
 80083f0:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80083f2:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80083f4:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80083f6:	220c      	movs	r2, #12
 80083f8:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80083fa:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80083fc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80083fe:	f7fd fc3e 	bl	8005c7e <HAL_UART_Init>
 8008402:	b900      	cbnz	r0, 8008406 <MX_USART6_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8008404:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008406:	f7ff fd93 	bl	8007f30 <Error_Handler>
}
 800840a:	e7fb      	b.n	8008404 <MX_USART6_UART_Init+0x24>
 800840c:	20004ab4 	.word	0x20004ab4
 8008410:	40011400 	.word	0x40011400

08008414 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008418:	2300      	movs	r3, #0
 800841a:	9303      	str	r3, [sp, #12]
 800841c:	9304      	str	r3, [sp, #16]
 800841e:	9305      	str	r3, [sp, #20]
 8008420:	9306      	str	r3, [sp, #24]
 8008422:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART6)
 8008424:	6802      	ldr	r2, [r0, #0]
 8008426:	4b2a      	ldr	r3, [pc, #168]	; (80084d0 <HAL_UART_MspInit+0xbc>)
 8008428:	429a      	cmp	r2, r3
 800842a:	d001      	beq.n	8008430 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART6_MspInit 1 */
    // Enable RX idle interrupt, which we use to handle variable-length messages
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_IDLE);
  /* USER CODE END USART6_MspInit 1 */
  }
}
 800842c:	b009      	add	sp, #36	; 0x24
 800842e:	bd30      	pop	{r4, r5, pc}
 8008430:	4604      	mov	r4, r0
    __HAL_RCC_USART6_CLK_ENABLE();
 8008432:	2500      	movs	r5, #0
 8008434:	9501      	str	r5, [sp, #4]
 8008436:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 800843a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800843c:	f042 0220 	orr.w	r2, r2, #32
 8008440:	645a      	str	r2, [r3, #68]	; 0x44
 8008442:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008444:	f002 0220 	and.w	r2, r2, #32
 8008448:	9201      	str	r2, [sp, #4]
 800844a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800844c:	9502      	str	r5, [sp, #8]
 800844e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008450:	f042 0204 	orr.w	r2, r2, #4
 8008454:	631a      	str	r2, [r3, #48]	; 0x30
 8008456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008458:	f003 0304 	and.w	r3, r3, #4
 800845c:	9302      	str	r3, [sp, #8]
 800845e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008460:	23c0      	movs	r3, #192	; 0xc0
 8008462:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008464:	2302      	movs	r3, #2
 8008466:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008468:	2301      	movs	r3, #1
 800846a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800846c:	2303      	movs	r3, #3
 800846e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8008470:	2308      	movs	r3, #8
 8008472:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008474:	a903      	add	r1, sp, #12
 8008476:	4817      	ldr	r0, [pc, #92]	; (80084d4 <HAL_UART_MspInit+0xc0>)
 8008478:	f7fb f910 	bl	800369c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800847c:	4816      	ldr	r0, [pc, #88]	; (80084d8 <HAL_UART_MspInit+0xc4>)
 800847e:	4b17      	ldr	r3, [pc, #92]	; (80084dc <HAL_UART_MspInit+0xc8>)
 8008480:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8008482:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8008486:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008488:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800848a:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800848c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008490:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008492:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008494:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8008496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800849a:	61c3      	str	r3, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800849c:	6205      	str	r5, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800849e:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80084a0:	f7fa fe68 	bl	8003174 <HAL_DMA_Init>
 80084a4:	b980      	cbnz	r0, 80084c8 <HAL_UART_MspInit+0xb4>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80084a6:	4b0c      	ldr	r3, [pc, #48]	; (80084d8 <HAL_UART_MspInit+0xc4>)
 80084a8:	6363      	str	r3, [r4, #52]	; 0x34
 80084aa:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 80084ac:	2200      	movs	r2, #0
 80084ae:	2106      	movs	r1, #6
 80084b0:	2047      	movs	r0, #71	; 0x47
 80084b2:	f7fa fda5 	bl	8003000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80084b6:	2047      	movs	r0, #71	; 0x47
 80084b8:	f7fa fdd6 	bl	8003068 <HAL_NVIC_EnableIRQ>
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_IDLE);
 80084bc:	6822      	ldr	r2, [r4, #0]
 80084be:	68d3      	ldr	r3, [r2, #12]
 80084c0:	f043 0310 	orr.w	r3, r3, #16
 80084c4:	60d3      	str	r3, [r2, #12]
}
 80084c6:	e7b1      	b.n	800842c <HAL_UART_MspInit+0x18>
      Error_Handler();
 80084c8:	f7ff fd32 	bl	8007f30 <Error_Handler>
 80084cc:	e7eb      	b.n	80084a6 <HAL_UART_MspInit+0x92>
 80084ce:	bf00      	nop
 80084d0:	40011400 	.word	0x40011400
 80084d4:	40020800 	.word	0x40020800
 80084d8:	20004a54 	.word	0x20004a54
 80084dc:	40026428 	.word	0x40026428

080084e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80084e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008518 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80084e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80084e6:	e003      	b.n	80084f0 <LoopCopyDataInit>

080084e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80084e8:	4b0c      	ldr	r3, [pc, #48]	; (800851c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80084ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80084ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80084ee:	3104      	adds	r1, #4

080084f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80084f0:	480b      	ldr	r0, [pc, #44]	; (8008520 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80084f2:	4b0c      	ldr	r3, [pc, #48]	; (8008524 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80084f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80084f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80084f8:	d3f6      	bcc.n	80084e8 <CopyDataInit>
  ldr  r2, =_sbss
 80084fa:	4a0b      	ldr	r2, [pc, #44]	; (8008528 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80084fc:	e002      	b.n	8008504 <LoopFillZerobss>

080084fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80084fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008500:	f842 3b04 	str.w	r3, [r2], #4

08008504 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008504:	4b09      	ldr	r3, [pc, #36]	; (800852c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008506:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008508:	d3f9      	bcc.n	80084fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800850a:	f7ff fe71 	bl	80081f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800850e:	f001 fdfb 	bl	800a108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008512:	f7ff fce7 	bl	8007ee4 <main>
  bx  lr    
 8008516:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8008518:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800851c:	0800eea8 	.word	0x0800eea8
  ldr  r0, =_sdata
 8008520:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008524:	20000258 	.word	0x20000258
  ldr  r2, =_sbss
 8008528:	20000258 	.word	0x20000258
  ldr  r3, = _ebss
 800852c:	20004af8 	.word	0x20004af8

08008530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008530:	e7fe      	b.n	8008530 <ADC_IRQHandler>
	...

08008534 <round>:
 8008534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008536:	ec57 6b10 	vmov	r6, r7, d0
 800853a:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800853e:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8008542:	2c13      	cmp	r4, #19
 8008544:	463b      	mov	r3, r7
 8008546:	463d      	mov	r5, r7
 8008548:	dc17      	bgt.n	800857a <round+0x46>
 800854a:	2c00      	cmp	r4, #0
 800854c:	da09      	bge.n	8008562 <round+0x2e>
 800854e:	3401      	adds	r4, #1
 8008550:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8008554:	d103      	bne.n	800855e <round+0x2a>
 8008556:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800855a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800855e:	2100      	movs	r1, #0
 8008560:	e02c      	b.n	80085bc <round+0x88>
 8008562:	4a18      	ldr	r2, [pc, #96]	; (80085c4 <round+0x90>)
 8008564:	4122      	asrs	r2, r4
 8008566:	4217      	tst	r7, r2
 8008568:	d100      	bne.n	800856c <round+0x38>
 800856a:	b19e      	cbz	r6, 8008594 <round+0x60>
 800856c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008570:	4123      	asrs	r3, r4
 8008572:	442b      	add	r3, r5
 8008574:	ea23 0302 	bic.w	r3, r3, r2
 8008578:	e7f1      	b.n	800855e <round+0x2a>
 800857a:	2c33      	cmp	r4, #51	; 0x33
 800857c:	dd0d      	ble.n	800859a <round+0x66>
 800857e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8008582:	d107      	bne.n	8008594 <round+0x60>
 8008584:	4630      	mov	r0, r6
 8008586:	4639      	mov	r1, r7
 8008588:	ee10 2a10 	vmov	r2, s0
 800858c:	f7f7 fe86 	bl	800029c <__adddf3>
 8008590:	4606      	mov	r6, r0
 8008592:	460f      	mov	r7, r1
 8008594:	ec47 6b10 	vmov	d0, r6, r7
 8008598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800859a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800859e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085a2:	40d0      	lsrs	r0, r2
 80085a4:	4206      	tst	r6, r0
 80085a6:	d0f5      	beq.n	8008594 <round+0x60>
 80085a8:	2201      	movs	r2, #1
 80085aa:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80085ae:	fa02 f404 	lsl.w	r4, r2, r4
 80085b2:	1931      	adds	r1, r6, r4
 80085b4:	bf28      	it	cs
 80085b6:	189b      	addcs	r3, r3, r2
 80085b8:	ea21 0100 	bic.w	r1, r1, r0
 80085bc:	461f      	mov	r7, r3
 80085be:	460e      	mov	r6, r1
 80085c0:	e7e8      	b.n	8008594 <round+0x60>
 80085c2:	bf00      	nop
 80085c4:	000fffff 	.word	0x000fffff

080085c8 <asin>:
 80085c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ca:	ed2d 8b02 	vpush	{d8}
 80085ce:	4e26      	ldr	r6, [pc, #152]	; (8008668 <asin+0xa0>)
 80085d0:	b08b      	sub	sp, #44	; 0x2c
 80085d2:	ec55 4b10 	vmov	r4, r5, d0
 80085d6:	f000 fa1b 	bl	8008a10 <__ieee754_asin>
 80085da:	f996 3000 	ldrsb.w	r3, [r6]
 80085de:	eeb0 8a40 	vmov.f32	s16, s0
 80085e2:	eef0 8a60 	vmov.f32	s17, s1
 80085e6:	3301      	adds	r3, #1
 80085e8:	d036      	beq.n	8008658 <asin+0x90>
 80085ea:	4622      	mov	r2, r4
 80085ec:	462b      	mov	r3, r5
 80085ee:	4620      	mov	r0, r4
 80085f0:	4629      	mov	r1, r5
 80085f2:	f7f8 faa3 	bl	8000b3c <__aeabi_dcmpun>
 80085f6:	4607      	mov	r7, r0
 80085f8:	bb70      	cbnz	r0, 8008658 <asin+0x90>
 80085fa:	ec45 4b10 	vmov	d0, r4, r5
 80085fe:	f001 fc57 	bl	8009eb0 <fabs>
 8008602:	2200      	movs	r2, #0
 8008604:	4b19      	ldr	r3, [pc, #100]	; (800866c <asin+0xa4>)
 8008606:	ec51 0b10 	vmov	r0, r1, d0
 800860a:	f7f8 fa8d 	bl	8000b28 <__aeabi_dcmpgt>
 800860e:	b318      	cbz	r0, 8008658 <asin+0x90>
 8008610:	2301      	movs	r3, #1
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	4816      	ldr	r0, [pc, #88]	; (8008670 <asin+0xa8>)
 8008616:	4b17      	ldr	r3, [pc, #92]	; (8008674 <asin+0xac>)
 8008618:	9301      	str	r3, [sp, #4]
 800861a:	9708      	str	r7, [sp, #32]
 800861c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008620:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008624:	f001 fc58 	bl	8009ed8 <nan>
 8008628:	f996 3000 	ldrsb.w	r3, [r6]
 800862c:	2b02      	cmp	r3, #2
 800862e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8008632:	d104      	bne.n	800863e <asin+0x76>
 8008634:	f001 fd62 	bl	800a0fc <__errno>
 8008638:	2321      	movs	r3, #33	; 0x21
 800863a:	6003      	str	r3, [r0, #0]
 800863c:	e004      	b.n	8008648 <asin+0x80>
 800863e:	4668      	mov	r0, sp
 8008640:	f001 fc47 	bl	8009ed2 <matherr>
 8008644:	2800      	cmp	r0, #0
 8008646:	d0f5      	beq.n	8008634 <asin+0x6c>
 8008648:	9b08      	ldr	r3, [sp, #32]
 800864a:	b11b      	cbz	r3, 8008654 <asin+0x8c>
 800864c:	f001 fd56 	bl	800a0fc <__errno>
 8008650:	9b08      	ldr	r3, [sp, #32]
 8008652:	6003      	str	r3, [r0, #0]
 8008654:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008658:	eeb0 0a48 	vmov.f32	s0, s16
 800865c:	eef0 0a68 	vmov.f32	s1, s17
 8008660:	b00b      	add	sp, #44	; 0x2c
 8008662:	ecbd 8b02 	vpop	{d8}
 8008666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008668:	20000084 	.word	0x20000084
 800866c:	3ff00000 	.word	0x3ff00000
 8008670:	0800ee89 	.word	0x0800ee89
 8008674:	0800eaec 	.word	0x0800eaec

08008678 <atan2>:
 8008678:	f000 bbda 	b.w	8008e30 <__ieee754_atan2>

0800867c <pow>:
 800867c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008680:	ed2d 8b04 	vpush	{d8-d9}
 8008684:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8008958 <pow+0x2dc>
 8008688:	b08d      	sub	sp, #52	; 0x34
 800868a:	ec57 6b10 	vmov	r6, r7, d0
 800868e:	ec55 4b11 	vmov	r4, r5, d1
 8008692:	f000 fcad 	bl	8008ff0 <__ieee754_pow>
 8008696:	f999 3000 	ldrsb.w	r3, [r9]
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	3301      	adds	r3, #1
 800869e:	eeb0 8a40 	vmov.f32	s16, s0
 80086a2:	eef0 8a60 	vmov.f32	s17, s1
 80086a6:	46c8      	mov	r8, r9
 80086a8:	d05f      	beq.n	800876a <pow+0xee>
 80086aa:	4622      	mov	r2, r4
 80086ac:	462b      	mov	r3, r5
 80086ae:	4620      	mov	r0, r4
 80086b0:	4629      	mov	r1, r5
 80086b2:	f7f8 fa43 	bl	8000b3c <__aeabi_dcmpun>
 80086b6:	4683      	mov	fp, r0
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d156      	bne.n	800876a <pow+0xee>
 80086bc:	4632      	mov	r2, r6
 80086be:	463b      	mov	r3, r7
 80086c0:	4630      	mov	r0, r6
 80086c2:	4639      	mov	r1, r7
 80086c4:	f7f8 fa3a 	bl	8000b3c <__aeabi_dcmpun>
 80086c8:	9001      	str	r0, [sp, #4]
 80086ca:	b1e8      	cbz	r0, 8008708 <pow+0x8c>
 80086cc:	2200      	movs	r2, #0
 80086ce:	2300      	movs	r3, #0
 80086d0:	4620      	mov	r0, r4
 80086d2:	4629      	mov	r1, r5
 80086d4:	f7f8 fa00 	bl	8000ad8 <__aeabi_dcmpeq>
 80086d8:	2800      	cmp	r0, #0
 80086da:	d046      	beq.n	800876a <pow+0xee>
 80086dc:	2301      	movs	r3, #1
 80086de:	9302      	str	r3, [sp, #8]
 80086e0:	4b96      	ldr	r3, [pc, #600]	; (800893c <pow+0x2c0>)
 80086e2:	9303      	str	r3, [sp, #12]
 80086e4:	4b96      	ldr	r3, [pc, #600]	; (8008940 <pow+0x2c4>)
 80086e6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80086ea:	2200      	movs	r2, #0
 80086ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80086f0:	9b00      	ldr	r3, [sp, #0]
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80086f8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80086fc:	d033      	beq.n	8008766 <pow+0xea>
 80086fe:	a802      	add	r0, sp, #8
 8008700:	f001 fbe7 	bl	8009ed2 <matherr>
 8008704:	bb48      	cbnz	r0, 800875a <pow+0xde>
 8008706:	e05d      	b.n	80087c4 <pow+0x148>
 8008708:	f04f 0a00 	mov.w	sl, #0
 800870c:	f04f 0b00 	mov.w	fp, #0
 8008710:	4652      	mov	r2, sl
 8008712:	465b      	mov	r3, fp
 8008714:	4630      	mov	r0, r6
 8008716:	4639      	mov	r1, r7
 8008718:	f7f8 f9de 	bl	8000ad8 <__aeabi_dcmpeq>
 800871c:	ec4b ab19 	vmov	d9, sl, fp
 8008720:	2800      	cmp	r0, #0
 8008722:	d054      	beq.n	80087ce <pow+0x152>
 8008724:	4652      	mov	r2, sl
 8008726:	465b      	mov	r3, fp
 8008728:	4620      	mov	r0, r4
 800872a:	4629      	mov	r1, r5
 800872c:	f7f8 f9d4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008730:	4680      	mov	r8, r0
 8008732:	b318      	cbz	r0, 800877c <pow+0x100>
 8008734:	2301      	movs	r3, #1
 8008736:	9302      	str	r3, [sp, #8]
 8008738:	4b80      	ldr	r3, [pc, #512]	; (800893c <pow+0x2c0>)
 800873a:	9303      	str	r3, [sp, #12]
 800873c:	9b01      	ldr	r3, [sp, #4]
 800873e:	930a      	str	r3, [sp, #40]	; 0x28
 8008740:	9b00      	ldr	r3, [sp, #0]
 8008742:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008746:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800874a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d0d5      	beq.n	80086fe <pow+0x82>
 8008752:	4b7b      	ldr	r3, [pc, #492]	; (8008940 <pow+0x2c4>)
 8008754:	2200      	movs	r2, #0
 8008756:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800875a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800875c:	b11b      	cbz	r3, 8008766 <pow+0xea>
 800875e:	f001 fccd 	bl	800a0fc <__errno>
 8008762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008764:	6003      	str	r3, [r0, #0]
 8008766:	ed9d 8b08 	vldr	d8, [sp, #32]
 800876a:	eeb0 0a48 	vmov.f32	s0, s16
 800876e:	eef0 0a68 	vmov.f32	s1, s17
 8008772:	b00d      	add	sp, #52	; 0x34
 8008774:	ecbd 8b04 	vpop	{d8-d9}
 8008778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800877c:	ec45 4b10 	vmov	d0, r4, r5
 8008780:	f001 fb9f 	bl	8009ec2 <finite>
 8008784:	2800      	cmp	r0, #0
 8008786:	d0f0      	beq.n	800876a <pow+0xee>
 8008788:	4652      	mov	r2, sl
 800878a:	465b      	mov	r3, fp
 800878c:	4620      	mov	r0, r4
 800878e:	4629      	mov	r1, r5
 8008790:	f7f8 f9ac 	bl	8000aec <__aeabi_dcmplt>
 8008794:	2800      	cmp	r0, #0
 8008796:	d0e8      	beq.n	800876a <pow+0xee>
 8008798:	2301      	movs	r3, #1
 800879a:	9302      	str	r3, [sp, #8]
 800879c:	4b67      	ldr	r3, [pc, #412]	; (800893c <pow+0x2c0>)
 800879e:	9303      	str	r3, [sp, #12]
 80087a0:	f999 3000 	ldrsb.w	r3, [r9]
 80087a4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80087a8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80087ac:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80087b0:	b913      	cbnz	r3, 80087b8 <pow+0x13c>
 80087b2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80087b6:	e7a2      	b.n	80086fe <pow+0x82>
 80087b8:	4962      	ldr	r1, [pc, #392]	; (8008944 <pow+0x2c8>)
 80087ba:	2000      	movs	r0, #0
 80087bc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d19c      	bne.n	80086fe <pow+0x82>
 80087c4:	f001 fc9a 	bl	800a0fc <__errno>
 80087c8:	2321      	movs	r3, #33	; 0x21
 80087ca:	6003      	str	r3, [r0, #0]
 80087cc:	e7c5      	b.n	800875a <pow+0xde>
 80087ce:	eeb0 0a48 	vmov.f32	s0, s16
 80087d2:	eef0 0a68 	vmov.f32	s1, s17
 80087d6:	f001 fb74 	bl	8009ec2 <finite>
 80087da:	9000      	str	r0, [sp, #0]
 80087dc:	2800      	cmp	r0, #0
 80087de:	f040 8081 	bne.w	80088e4 <pow+0x268>
 80087e2:	ec47 6b10 	vmov	d0, r6, r7
 80087e6:	f001 fb6c 	bl	8009ec2 <finite>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d07a      	beq.n	80088e4 <pow+0x268>
 80087ee:	ec45 4b10 	vmov	d0, r4, r5
 80087f2:	f001 fb66 	bl	8009ec2 <finite>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d074      	beq.n	80088e4 <pow+0x268>
 80087fa:	ec53 2b18 	vmov	r2, r3, d8
 80087fe:	ee18 0a10 	vmov	r0, s16
 8008802:	4619      	mov	r1, r3
 8008804:	f7f8 f99a 	bl	8000b3c <__aeabi_dcmpun>
 8008808:	f999 9000 	ldrsb.w	r9, [r9]
 800880c:	4b4b      	ldr	r3, [pc, #300]	; (800893c <pow+0x2c0>)
 800880e:	b1b0      	cbz	r0, 800883e <pow+0x1c2>
 8008810:	2201      	movs	r2, #1
 8008812:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008816:	9b00      	ldr	r3, [sp, #0]
 8008818:	930a      	str	r3, [sp, #40]	; 0x28
 800881a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800881e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008822:	f1b9 0f00 	cmp.w	r9, #0
 8008826:	d0c4      	beq.n	80087b2 <pow+0x136>
 8008828:	4652      	mov	r2, sl
 800882a:	465b      	mov	r3, fp
 800882c:	4650      	mov	r0, sl
 800882e:	4659      	mov	r1, fp
 8008830:	f7f8 f814 	bl	800085c <__aeabi_ddiv>
 8008834:	f1b9 0f02 	cmp.w	r9, #2
 8008838:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800883c:	e7c1      	b.n	80087c2 <pow+0x146>
 800883e:	2203      	movs	r2, #3
 8008840:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008844:	900a      	str	r0, [sp, #40]	; 0x28
 8008846:	4629      	mov	r1, r5
 8008848:	4620      	mov	r0, r4
 800884a:	2200      	movs	r2, #0
 800884c:	4b3e      	ldr	r3, [pc, #248]	; (8008948 <pow+0x2cc>)
 800884e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008852:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008856:	f7f7 fed7 	bl	8000608 <__aeabi_dmul>
 800885a:	4604      	mov	r4, r0
 800885c:	460d      	mov	r5, r1
 800885e:	f1b9 0f00 	cmp.w	r9, #0
 8008862:	d124      	bne.n	80088ae <pow+0x232>
 8008864:	4b39      	ldr	r3, [pc, #228]	; (800894c <pow+0x2d0>)
 8008866:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800886a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800886e:	4630      	mov	r0, r6
 8008870:	4652      	mov	r2, sl
 8008872:	465b      	mov	r3, fp
 8008874:	4639      	mov	r1, r7
 8008876:	f7f8 f939 	bl	8000aec <__aeabi_dcmplt>
 800887a:	2800      	cmp	r0, #0
 800887c:	d056      	beq.n	800892c <pow+0x2b0>
 800887e:	ec45 4b10 	vmov	d0, r4, r5
 8008882:	f001 fb31 	bl	8009ee8 <rint>
 8008886:	4622      	mov	r2, r4
 8008888:	462b      	mov	r3, r5
 800888a:	ec51 0b10 	vmov	r0, r1, d0
 800888e:	f7f8 f923 	bl	8000ad8 <__aeabi_dcmpeq>
 8008892:	b920      	cbnz	r0, 800889e <pow+0x222>
 8008894:	4b2e      	ldr	r3, [pc, #184]	; (8008950 <pow+0x2d4>)
 8008896:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800889a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800889e:	f998 3000 	ldrsb.w	r3, [r8]
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d142      	bne.n	800892c <pow+0x2b0>
 80088a6:	f001 fc29 	bl	800a0fc <__errno>
 80088aa:	2322      	movs	r3, #34	; 0x22
 80088ac:	e78d      	b.n	80087ca <pow+0x14e>
 80088ae:	4b29      	ldr	r3, [pc, #164]	; (8008954 <pow+0x2d8>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80088b6:	4630      	mov	r0, r6
 80088b8:	4652      	mov	r2, sl
 80088ba:	465b      	mov	r3, fp
 80088bc:	4639      	mov	r1, r7
 80088be:	f7f8 f915 	bl	8000aec <__aeabi_dcmplt>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	d0eb      	beq.n	800889e <pow+0x222>
 80088c6:	ec45 4b10 	vmov	d0, r4, r5
 80088ca:	f001 fb0d 	bl	8009ee8 <rint>
 80088ce:	4622      	mov	r2, r4
 80088d0:	462b      	mov	r3, r5
 80088d2:	ec51 0b10 	vmov	r0, r1, d0
 80088d6:	f7f8 f8ff 	bl	8000ad8 <__aeabi_dcmpeq>
 80088da:	2800      	cmp	r0, #0
 80088dc:	d1df      	bne.n	800889e <pow+0x222>
 80088de:	2200      	movs	r2, #0
 80088e0:	4b18      	ldr	r3, [pc, #96]	; (8008944 <pow+0x2c8>)
 80088e2:	e7da      	b.n	800889a <pow+0x21e>
 80088e4:	2200      	movs	r2, #0
 80088e6:	2300      	movs	r3, #0
 80088e8:	ec51 0b18 	vmov	r0, r1, d8
 80088ec:	f7f8 f8f4 	bl	8000ad8 <__aeabi_dcmpeq>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	f43f af3a 	beq.w	800876a <pow+0xee>
 80088f6:	ec47 6b10 	vmov	d0, r6, r7
 80088fa:	f001 fae2 	bl	8009ec2 <finite>
 80088fe:	2800      	cmp	r0, #0
 8008900:	f43f af33 	beq.w	800876a <pow+0xee>
 8008904:	ec45 4b10 	vmov	d0, r4, r5
 8008908:	f001 fadb 	bl	8009ec2 <finite>
 800890c:	2800      	cmp	r0, #0
 800890e:	f43f af2c 	beq.w	800876a <pow+0xee>
 8008912:	2304      	movs	r3, #4
 8008914:	9302      	str	r3, [sp, #8]
 8008916:	4b09      	ldr	r3, [pc, #36]	; (800893c <pow+0x2c0>)
 8008918:	9303      	str	r3, [sp, #12]
 800891a:	2300      	movs	r3, #0
 800891c:	930a      	str	r3, [sp, #40]	; 0x28
 800891e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008922:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008926:	ed8d 9b08 	vstr	d9, [sp, #32]
 800892a:	e7b8      	b.n	800889e <pow+0x222>
 800892c:	a802      	add	r0, sp, #8
 800892e:	f001 fad0 	bl	8009ed2 <matherr>
 8008932:	2800      	cmp	r0, #0
 8008934:	f47f af11 	bne.w	800875a <pow+0xde>
 8008938:	e7b5      	b.n	80088a6 <pow+0x22a>
 800893a:	bf00      	nop
 800893c:	0800eaf1 	.word	0x0800eaf1
 8008940:	3ff00000 	.word	0x3ff00000
 8008944:	fff00000 	.word	0xfff00000
 8008948:	3fe00000 	.word	0x3fe00000
 800894c:	47efffff 	.word	0x47efffff
 8008950:	c7efffff 	.word	0xc7efffff
 8008954:	7ff00000 	.word	0x7ff00000
 8008958:	20000084 	.word	0x20000084

0800895c <sqrt>:
 800895c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008960:	ed2d 8b02 	vpush	{d8}
 8008964:	b08b      	sub	sp, #44	; 0x2c
 8008966:	ec55 4b10 	vmov	r4, r5, d0
 800896a:	f001 f84f 	bl	8009a0c <__ieee754_sqrt>
 800896e:	4b26      	ldr	r3, [pc, #152]	; (8008a08 <sqrt+0xac>)
 8008970:	eeb0 8a40 	vmov.f32	s16, s0
 8008974:	eef0 8a60 	vmov.f32	s17, s1
 8008978:	f993 6000 	ldrsb.w	r6, [r3]
 800897c:	1c73      	adds	r3, r6, #1
 800897e:	d02a      	beq.n	80089d6 <sqrt+0x7a>
 8008980:	4622      	mov	r2, r4
 8008982:	462b      	mov	r3, r5
 8008984:	4620      	mov	r0, r4
 8008986:	4629      	mov	r1, r5
 8008988:	f7f8 f8d8 	bl	8000b3c <__aeabi_dcmpun>
 800898c:	4607      	mov	r7, r0
 800898e:	bb10      	cbnz	r0, 80089d6 <sqrt+0x7a>
 8008990:	f04f 0800 	mov.w	r8, #0
 8008994:	f04f 0900 	mov.w	r9, #0
 8008998:	4642      	mov	r2, r8
 800899a:	464b      	mov	r3, r9
 800899c:	4620      	mov	r0, r4
 800899e:	4629      	mov	r1, r5
 80089a0:	f7f8 f8a4 	bl	8000aec <__aeabi_dcmplt>
 80089a4:	b1b8      	cbz	r0, 80089d6 <sqrt+0x7a>
 80089a6:	2301      	movs	r3, #1
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	4b18      	ldr	r3, [pc, #96]	; (8008a0c <sqrt+0xb0>)
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	9708      	str	r7, [sp, #32]
 80089b0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80089b4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80089b8:	b9b6      	cbnz	r6, 80089e8 <sqrt+0x8c>
 80089ba:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80089be:	4668      	mov	r0, sp
 80089c0:	f001 fa87 	bl	8009ed2 <matherr>
 80089c4:	b1d0      	cbz	r0, 80089fc <sqrt+0xa0>
 80089c6:	9b08      	ldr	r3, [sp, #32]
 80089c8:	b11b      	cbz	r3, 80089d2 <sqrt+0x76>
 80089ca:	f001 fb97 	bl	800a0fc <__errno>
 80089ce:	9b08      	ldr	r3, [sp, #32]
 80089d0:	6003      	str	r3, [r0, #0]
 80089d2:	ed9d 8b06 	vldr	d8, [sp, #24]
 80089d6:	eeb0 0a48 	vmov.f32	s0, s16
 80089da:	eef0 0a68 	vmov.f32	s1, s17
 80089de:	b00b      	add	sp, #44	; 0x2c
 80089e0:	ecbd 8b02 	vpop	{d8}
 80089e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089e8:	4642      	mov	r2, r8
 80089ea:	464b      	mov	r3, r9
 80089ec:	4640      	mov	r0, r8
 80089ee:	4649      	mov	r1, r9
 80089f0:	f7f7 ff34 	bl	800085c <__aeabi_ddiv>
 80089f4:	2e02      	cmp	r6, #2
 80089f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80089fa:	d1e0      	bne.n	80089be <sqrt+0x62>
 80089fc:	f001 fb7e 	bl	800a0fc <__errno>
 8008a00:	2321      	movs	r3, #33	; 0x21
 8008a02:	6003      	str	r3, [r0, #0]
 8008a04:	e7df      	b.n	80089c6 <sqrt+0x6a>
 8008a06:	bf00      	nop
 8008a08:	20000084 	.word	0x20000084
 8008a0c:	0800eaf5 	.word	0x0800eaf5

08008a10 <__ieee754_asin>:
 8008a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a14:	ec55 4b10 	vmov	r4, r5, d0
 8008a18:	4bcb      	ldr	r3, [pc, #812]	; (8008d48 <__ieee754_asin+0x338>)
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8008a20:	429f      	cmp	r7, r3
 8008a22:	9501      	str	r5, [sp, #4]
 8008a24:	dd31      	ble.n	8008a8a <__ieee754_asin+0x7a>
 8008a26:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8008a2a:	ee10 3a10 	vmov	r3, s0
 8008a2e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8008a32:	433b      	orrs	r3, r7
 8008a34:	d117      	bne.n	8008a66 <__ieee754_asin+0x56>
 8008a36:	a3aa      	add	r3, pc, #680	; (adr r3, 8008ce0 <__ieee754_asin+0x2d0>)
 8008a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3c:	ee10 0a10 	vmov	r0, s0
 8008a40:	4629      	mov	r1, r5
 8008a42:	f7f7 fde1 	bl	8000608 <__aeabi_dmul>
 8008a46:	a3a8      	add	r3, pc, #672	; (adr r3, 8008ce8 <__ieee754_asin+0x2d8>)
 8008a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4c:	4606      	mov	r6, r0
 8008a4e:	460f      	mov	r7, r1
 8008a50:	4620      	mov	r0, r4
 8008a52:	4629      	mov	r1, r5
 8008a54:	f7f7 fdd8 	bl	8000608 <__aeabi_dmul>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	4639      	mov	r1, r7
 8008a60:	f7f7 fc1c 	bl	800029c <__adddf3>
 8008a64:	e00a      	b.n	8008a7c <__ieee754_asin+0x6c>
 8008a66:	ee10 2a10 	vmov	r2, s0
 8008a6a:	462b      	mov	r3, r5
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	4629      	mov	r1, r5
 8008a70:	f7f7 fc12 	bl	8000298 <__aeabi_dsub>
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	f7f7 fef0 	bl	800085c <__aeabi_ddiv>
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	460d      	mov	r5, r1
 8008a80:	ec45 4b10 	vmov	d0, r4, r5
 8008a84:	b007      	add	sp, #28
 8008a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8a:	4bb0      	ldr	r3, [pc, #704]	; (8008d4c <__ieee754_asin+0x33c>)
 8008a8c:	429f      	cmp	r7, r3
 8008a8e:	dc11      	bgt.n	8008ab4 <__ieee754_asin+0xa4>
 8008a90:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8008a94:	f280 80ae 	bge.w	8008bf4 <__ieee754_asin+0x1e4>
 8008a98:	a395      	add	r3, pc, #596	; (adr r3, 8008cf0 <__ieee754_asin+0x2e0>)
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	ee10 0a10 	vmov	r0, s0
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	f7f7 fbfa 	bl	800029c <__adddf3>
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	4ba9      	ldr	r3, [pc, #676]	; (8008d50 <__ieee754_asin+0x340>)
 8008aac:	f7f8 f83c 	bl	8000b28 <__aeabi_dcmpgt>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	d1e5      	bne.n	8008a80 <__ieee754_asin+0x70>
 8008ab4:	ec45 4b10 	vmov	d0, r4, r5
 8008ab8:	f001 f9fa 	bl	8009eb0 <fabs>
 8008abc:	2000      	movs	r0, #0
 8008abe:	ec53 2b10 	vmov	r2, r3, d0
 8008ac2:	49a3      	ldr	r1, [pc, #652]	; (8008d50 <__ieee754_asin+0x340>)
 8008ac4:	f7f7 fbe8 	bl	8000298 <__aeabi_dsub>
 8008ac8:	2200      	movs	r2, #0
 8008aca:	4ba2      	ldr	r3, [pc, #648]	; (8008d54 <__ieee754_asin+0x344>)
 8008acc:	f7f7 fd9c 	bl	8000608 <__aeabi_dmul>
 8008ad0:	a389      	add	r3, pc, #548	; (adr r3, 8008cf8 <__ieee754_asin+0x2e8>)
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	460d      	mov	r5, r1
 8008ada:	f7f7 fd95 	bl	8000608 <__aeabi_dmul>
 8008ade:	a388      	add	r3, pc, #544	; (adr r3, 8008d00 <__ieee754_asin+0x2f0>)
 8008ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae4:	f7f7 fbda 	bl	800029c <__adddf3>
 8008ae8:	4622      	mov	r2, r4
 8008aea:	462b      	mov	r3, r5
 8008aec:	f7f7 fd8c 	bl	8000608 <__aeabi_dmul>
 8008af0:	a385      	add	r3, pc, #532	; (adr r3, 8008d08 <__ieee754_asin+0x2f8>)
 8008af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af6:	f7f7 fbcf 	bl	8000298 <__aeabi_dsub>
 8008afa:	4622      	mov	r2, r4
 8008afc:	462b      	mov	r3, r5
 8008afe:	f7f7 fd83 	bl	8000608 <__aeabi_dmul>
 8008b02:	a383      	add	r3, pc, #524	; (adr r3, 8008d10 <__ieee754_asin+0x300>)
 8008b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b08:	f7f7 fbc8 	bl	800029c <__adddf3>
 8008b0c:	4622      	mov	r2, r4
 8008b0e:	462b      	mov	r3, r5
 8008b10:	f7f7 fd7a 	bl	8000608 <__aeabi_dmul>
 8008b14:	a380      	add	r3, pc, #512	; (adr r3, 8008d18 <__ieee754_asin+0x308>)
 8008b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1a:	f7f7 fbbd 	bl	8000298 <__aeabi_dsub>
 8008b1e:	4622      	mov	r2, r4
 8008b20:	462b      	mov	r3, r5
 8008b22:	f7f7 fd71 	bl	8000608 <__aeabi_dmul>
 8008b26:	a37e      	add	r3, pc, #504	; (adr r3, 8008d20 <__ieee754_asin+0x310>)
 8008b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2c:	f7f7 fbb6 	bl	800029c <__adddf3>
 8008b30:	4622      	mov	r2, r4
 8008b32:	462b      	mov	r3, r5
 8008b34:	f7f7 fd68 	bl	8000608 <__aeabi_dmul>
 8008b38:	a37b      	add	r3, pc, #492	; (adr r3, 8008d28 <__ieee754_asin+0x318>)
 8008b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3e:	4680      	mov	r8, r0
 8008b40:	4689      	mov	r9, r1
 8008b42:	4620      	mov	r0, r4
 8008b44:	4629      	mov	r1, r5
 8008b46:	f7f7 fd5f 	bl	8000608 <__aeabi_dmul>
 8008b4a:	a379      	add	r3, pc, #484	; (adr r3, 8008d30 <__ieee754_asin+0x320>)
 8008b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b50:	f7f7 fba2 	bl	8000298 <__aeabi_dsub>
 8008b54:	4622      	mov	r2, r4
 8008b56:	462b      	mov	r3, r5
 8008b58:	f7f7 fd56 	bl	8000608 <__aeabi_dmul>
 8008b5c:	a376      	add	r3, pc, #472	; (adr r3, 8008d38 <__ieee754_asin+0x328>)
 8008b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b62:	f7f7 fb9b 	bl	800029c <__adddf3>
 8008b66:	4622      	mov	r2, r4
 8008b68:	462b      	mov	r3, r5
 8008b6a:	f7f7 fd4d 	bl	8000608 <__aeabi_dmul>
 8008b6e:	a374      	add	r3, pc, #464	; (adr r3, 8008d40 <__ieee754_asin+0x330>)
 8008b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b74:	f7f7 fb90 	bl	8000298 <__aeabi_dsub>
 8008b78:	4622      	mov	r2, r4
 8008b7a:	462b      	mov	r3, r5
 8008b7c:	f7f7 fd44 	bl	8000608 <__aeabi_dmul>
 8008b80:	4b73      	ldr	r3, [pc, #460]	; (8008d50 <__ieee754_asin+0x340>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	f7f7 fb8a 	bl	800029c <__adddf3>
 8008b88:	ec45 4b10 	vmov	d0, r4, r5
 8008b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b90:	f000 ff3c 	bl	8009a0c <__ieee754_sqrt>
 8008b94:	4b70      	ldr	r3, [pc, #448]	; (8008d58 <__ieee754_asin+0x348>)
 8008b96:	429f      	cmp	r7, r3
 8008b98:	ec5b ab10 	vmov	sl, fp, d0
 8008b9c:	f340 80de 	ble.w	8008d5c <__ieee754_asin+0x34c>
 8008ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ba4:	4640      	mov	r0, r8
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	f7f7 fe58 	bl	800085c <__aeabi_ddiv>
 8008bac:	4652      	mov	r2, sl
 8008bae:	465b      	mov	r3, fp
 8008bb0:	f7f7 fd2a 	bl	8000608 <__aeabi_dmul>
 8008bb4:	4652      	mov	r2, sl
 8008bb6:	465b      	mov	r3, fp
 8008bb8:	f7f7 fb70 	bl	800029c <__adddf3>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	f7f7 fb6c 	bl	800029c <__adddf3>
 8008bc4:	a348      	add	r3, pc, #288	; (adr r3, 8008ce8 <__ieee754_asin+0x2d8>)
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	f7f7 fb65 	bl	8000298 <__aeabi_dsub>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	a143      	add	r1, pc, #268	; (adr r1, 8008ce0 <__ieee754_asin+0x2d0>)
 8008bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bd8:	f7f7 fb5e 	bl	8000298 <__aeabi_dsub>
 8008bdc:	9b01      	ldr	r3, [sp, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	bfdc      	itt	le
 8008be2:	4602      	movle	r2, r0
 8008be4:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8008be8:	4604      	mov	r4, r0
 8008bea:	460d      	mov	r5, r1
 8008bec:	bfdc      	itt	le
 8008bee:	4614      	movle	r4, r2
 8008bf0:	461d      	movle	r5, r3
 8008bf2:	e745      	b.n	8008a80 <__ieee754_asin+0x70>
 8008bf4:	ee10 2a10 	vmov	r2, s0
 8008bf8:	ee10 0a10 	vmov	r0, s0
 8008bfc:	462b      	mov	r3, r5
 8008bfe:	4629      	mov	r1, r5
 8008c00:	f7f7 fd02 	bl	8000608 <__aeabi_dmul>
 8008c04:	a33c      	add	r3, pc, #240	; (adr r3, 8008cf8 <__ieee754_asin+0x2e8>)
 8008c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0a:	4606      	mov	r6, r0
 8008c0c:	460f      	mov	r7, r1
 8008c0e:	f7f7 fcfb 	bl	8000608 <__aeabi_dmul>
 8008c12:	a33b      	add	r3, pc, #236	; (adr r3, 8008d00 <__ieee754_asin+0x2f0>)
 8008c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c18:	f7f7 fb40 	bl	800029c <__adddf3>
 8008c1c:	4632      	mov	r2, r6
 8008c1e:	463b      	mov	r3, r7
 8008c20:	f7f7 fcf2 	bl	8000608 <__aeabi_dmul>
 8008c24:	a338      	add	r3, pc, #224	; (adr r3, 8008d08 <__ieee754_asin+0x2f8>)
 8008c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2a:	f7f7 fb35 	bl	8000298 <__aeabi_dsub>
 8008c2e:	4632      	mov	r2, r6
 8008c30:	463b      	mov	r3, r7
 8008c32:	f7f7 fce9 	bl	8000608 <__aeabi_dmul>
 8008c36:	a336      	add	r3, pc, #216	; (adr r3, 8008d10 <__ieee754_asin+0x300>)
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	f7f7 fb2e 	bl	800029c <__adddf3>
 8008c40:	4632      	mov	r2, r6
 8008c42:	463b      	mov	r3, r7
 8008c44:	f7f7 fce0 	bl	8000608 <__aeabi_dmul>
 8008c48:	a333      	add	r3, pc, #204	; (adr r3, 8008d18 <__ieee754_asin+0x308>)
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f7f7 fb23 	bl	8000298 <__aeabi_dsub>
 8008c52:	4632      	mov	r2, r6
 8008c54:	463b      	mov	r3, r7
 8008c56:	f7f7 fcd7 	bl	8000608 <__aeabi_dmul>
 8008c5a:	a331      	add	r3, pc, #196	; (adr r3, 8008d20 <__ieee754_asin+0x310>)
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	f7f7 fb1c 	bl	800029c <__adddf3>
 8008c64:	4632      	mov	r2, r6
 8008c66:	463b      	mov	r3, r7
 8008c68:	f7f7 fcce 	bl	8000608 <__aeabi_dmul>
 8008c6c:	a32e      	add	r3, pc, #184	; (adr r3, 8008d28 <__ieee754_asin+0x318>)
 8008c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c72:	4680      	mov	r8, r0
 8008c74:	4689      	mov	r9, r1
 8008c76:	4630      	mov	r0, r6
 8008c78:	4639      	mov	r1, r7
 8008c7a:	f7f7 fcc5 	bl	8000608 <__aeabi_dmul>
 8008c7e:	a32c      	add	r3, pc, #176	; (adr r3, 8008d30 <__ieee754_asin+0x320>)
 8008c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c84:	f7f7 fb08 	bl	8000298 <__aeabi_dsub>
 8008c88:	4632      	mov	r2, r6
 8008c8a:	463b      	mov	r3, r7
 8008c8c:	f7f7 fcbc 	bl	8000608 <__aeabi_dmul>
 8008c90:	a329      	add	r3, pc, #164	; (adr r3, 8008d38 <__ieee754_asin+0x328>)
 8008c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c96:	f7f7 fb01 	bl	800029c <__adddf3>
 8008c9a:	4632      	mov	r2, r6
 8008c9c:	463b      	mov	r3, r7
 8008c9e:	f7f7 fcb3 	bl	8000608 <__aeabi_dmul>
 8008ca2:	a327      	add	r3, pc, #156	; (adr r3, 8008d40 <__ieee754_asin+0x330>)
 8008ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca8:	f7f7 faf6 	bl	8000298 <__aeabi_dsub>
 8008cac:	4632      	mov	r2, r6
 8008cae:	463b      	mov	r3, r7
 8008cb0:	f7f7 fcaa 	bl	8000608 <__aeabi_dmul>
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	4b26      	ldr	r3, [pc, #152]	; (8008d50 <__ieee754_asin+0x340>)
 8008cb8:	f7f7 faf0 	bl	800029c <__adddf3>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	4640      	mov	r0, r8
 8008cc2:	4649      	mov	r1, r9
 8008cc4:	f7f7 fdca 	bl	800085c <__aeabi_ddiv>
 8008cc8:	4622      	mov	r2, r4
 8008cca:	462b      	mov	r3, r5
 8008ccc:	f7f7 fc9c 	bl	8000608 <__aeabi_dmul>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	4629      	mov	r1, r5
 8008cd8:	e6c2      	b.n	8008a60 <__ieee754_asin+0x50>
 8008cda:	bf00      	nop
 8008cdc:	f3af 8000 	nop.w
 8008ce0:	54442d18 	.word	0x54442d18
 8008ce4:	3ff921fb 	.word	0x3ff921fb
 8008ce8:	33145c07 	.word	0x33145c07
 8008cec:	3c91a626 	.word	0x3c91a626
 8008cf0:	8800759c 	.word	0x8800759c
 8008cf4:	7e37e43c 	.word	0x7e37e43c
 8008cf8:	0dfdf709 	.word	0x0dfdf709
 8008cfc:	3f023de1 	.word	0x3f023de1
 8008d00:	7501b288 	.word	0x7501b288
 8008d04:	3f49efe0 	.word	0x3f49efe0
 8008d08:	b5688f3b 	.word	0xb5688f3b
 8008d0c:	3fa48228 	.word	0x3fa48228
 8008d10:	0e884455 	.word	0x0e884455
 8008d14:	3fc9c155 	.word	0x3fc9c155
 8008d18:	03eb6f7d 	.word	0x03eb6f7d
 8008d1c:	3fd4d612 	.word	0x3fd4d612
 8008d20:	55555555 	.word	0x55555555
 8008d24:	3fc55555 	.word	0x3fc55555
 8008d28:	b12e9282 	.word	0xb12e9282
 8008d2c:	3fb3b8c5 	.word	0x3fb3b8c5
 8008d30:	1b8d0159 	.word	0x1b8d0159
 8008d34:	3fe6066c 	.word	0x3fe6066c
 8008d38:	9c598ac8 	.word	0x9c598ac8
 8008d3c:	40002ae5 	.word	0x40002ae5
 8008d40:	1c8a2d4b 	.word	0x1c8a2d4b
 8008d44:	40033a27 	.word	0x40033a27
 8008d48:	3fefffff 	.word	0x3fefffff
 8008d4c:	3fdfffff 	.word	0x3fdfffff
 8008d50:	3ff00000 	.word	0x3ff00000
 8008d54:	3fe00000 	.word	0x3fe00000
 8008d58:	3fef3332 	.word	0x3fef3332
 8008d5c:	ee10 2a10 	vmov	r2, s0
 8008d60:	ee10 0a10 	vmov	r0, s0
 8008d64:	465b      	mov	r3, fp
 8008d66:	4659      	mov	r1, fp
 8008d68:	f7f7 fa98 	bl	800029c <__adddf3>
 8008d6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d74:	4640      	mov	r0, r8
 8008d76:	4649      	mov	r1, r9
 8008d78:	f7f7 fd70 	bl	800085c <__aeabi_ddiv>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d84:	f7f7 fc40 	bl	8000608 <__aeabi_dmul>
 8008d88:	2600      	movs	r6, #0
 8008d8a:	4680      	mov	r8, r0
 8008d8c:	4689      	mov	r9, r1
 8008d8e:	4632      	mov	r2, r6
 8008d90:	465b      	mov	r3, fp
 8008d92:	4630      	mov	r0, r6
 8008d94:	4659      	mov	r1, fp
 8008d96:	f7f7 fc37 	bl	8000608 <__aeabi_dmul>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	4620      	mov	r0, r4
 8008da0:	4629      	mov	r1, r5
 8008da2:	f7f7 fa79 	bl	8000298 <__aeabi_dsub>
 8008da6:	4632      	mov	r2, r6
 8008da8:	4604      	mov	r4, r0
 8008daa:	460d      	mov	r5, r1
 8008dac:	465b      	mov	r3, fp
 8008dae:	4650      	mov	r0, sl
 8008db0:	4659      	mov	r1, fp
 8008db2:	f7f7 fa73 	bl	800029c <__adddf3>
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	4620      	mov	r0, r4
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	f7f7 fd4d 	bl	800085c <__aeabi_ddiv>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	f7f7 fa69 	bl	800029c <__adddf3>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	a114      	add	r1, pc, #80	; (adr r1, 8008e20 <__ieee754_asin+0x410>)
 8008dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dd4:	f7f7 fa60 	bl	8000298 <__aeabi_dsub>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4640      	mov	r0, r8
 8008dde:	4649      	mov	r1, r9
 8008de0:	f7f7 fa5a 	bl	8000298 <__aeabi_dsub>
 8008de4:	465f      	mov	r7, fp
 8008de6:	4604      	mov	r4, r0
 8008de8:	460d      	mov	r5, r1
 8008dea:	4632      	mov	r2, r6
 8008dec:	465b      	mov	r3, fp
 8008dee:	4630      	mov	r0, r6
 8008df0:	4639      	mov	r1, r7
 8008df2:	f7f7 fa53 	bl	800029c <__adddf3>
 8008df6:	4602      	mov	r2, r0
 8008df8:	460b      	mov	r3, r1
 8008dfa:	a10b      	add	r1, pc, #44	; (adr r1, 8008e28 <__ieee754_asin+0x418>)
 8008dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e00:	f7f7 fa4a 	bl	8000298 <__aeabi_dsub>
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	4620      	mov	r0, r4
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	f7f7 fa44 	bl	8000298 <__aeabi_dsub>
 8008e10:	4602      	mov	r2, r0
 8008e12:	460b      	mov	r3, r1
 8008e14:	a104      	add	r1, pc, #16	; (adr r1, 8008e28 <__ieee754_asin+0x418>)
 8008e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e1a:	e6dd      	b.n	8008bd8 <__ieee754_asin+0x1c8>
 8008e1c:	f3af 8000 	nop.w
 8008e20:	33145c07 	.word	0x33145c07
 8008e24:	3c91a626 	.word	0x3c91a626
 8008e28:	54442d18 	.word	0x54442d18
 8008e2c:	3fe921fb 	.word	0x3fe921fb

08008e30 <__ieee754_atan2>:
 8008e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e34:	ec57 6b11 	vmov	r6, r7, d1
 8008e38:	4273      	negs	r3, r6
 8008e3a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008e3e:	4333      	orrs	r3, r6
 8008e40:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8008fe8 <__ieee754_atan2+0x1b8>
 8008e44:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008e48:	4573      	cmp	r3, lr
 8008e4a:	ec51 0b10 	vmov	r0, r1, d0
 8008e4e:	ee11 8a10 	vmov	r8, s2
 8008e52:	d80a      	bhi.n	8008e6a <__ieee754_atan2+0x3a>
 8008e54:	4244      	negs	r4, r0
 8008e56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e5a:	4304      	orrs	r4, r0
 8008e5c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008e60:	4574      	cmp	r4, lr
 8008e62:	468c      	mov	ip, r1
 8008e64:	ee10 9a10 	vmov	r9, s0
 8008e68:	d907      	bls.n	8008e7a <__ieee754_atan2+0x4a>
 8008e6a:	4632      	mov	r2, r6
 8008e6c:	463b      	mov	r3, r7
 8008e6e:	f7f7 fa15 	bl	800029c <__adddf3>
 8008e72:	ec41 0b10 	vmov	d0, r0, r1
 8008e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e7a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008e7e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008e82:	4334      	orrs	r4, r6
 8008e84:	d103      	bne.n	8008e8e <__ieee754_atan2+0x5e>
 8008e86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e8a:	f000 be71 	b.w	8009b70 <atan>
 8008e8e:	17bc      	asrs	r4, r7, #30
 8008e90:	f004 0402 	and.w	r4, r4, #2
 8008e94:	ea53 0909 	orrs.w	r9, r3, r9
 8008e98:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008e9c:	d107      	bne.n	8008eae <__ieee754_atan2+0x7e>
 8008e9e:	2c02      	cmp	r4, #2
 8008ea0:	d073      	beq.n	8008f8a <__ieee754_atan2+0x15a>
 8008ea2:	2c03      	cmp	r4, #3
 8008ea4:	d1e5      	bne.n	8008e72 <__ieee754_atan2+0x42>
 8008ea6:	a13e      	add	r1, pc, #248	; (adr r1, 8008fa0 <__ieee754_atan2+0x170>)
 8008ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eac:	e7e1      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008eae:	ea52 0808 	orrs.w	r8, r2, r8
 8008eb2:	d106      	bne.n	8008ec2 <__ieee754_atan2+0x92>
 8008eb4:	f1bc 0f00 	cmp.w	ip, #0
 8008eb8:	da6b      	bge.n	8008f92 <__ieee754_atan2+0x162>
 8008eba:	a13b      	add	r1, pc, #236	; (adr r1, 8008fa8 <__ieee754_atan2+0x178>)
 8008ebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ec0:	e7d7      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008ec2:	4572      	cmp	r2, lr
 8008ec4:	d120      	bne.n	8008f08 <__ieee754_atan2+0xd8>
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d111      	bne.n	8008eee <__ieee754_atan2+0xbe>
 8008eca:	2c02      	cmp	r4, #2
 8008ecc:	d007      	beq.n	8008ede <__ieee754_atan2+0xae>
 8008ece:	2c03      	cmp	r4, #3
 8008ed0:	d009      	beq.n	8008ee6 <__ieee754_atan2+0xb6>
 8008ed2:	2c01      	cmp	r4, #1
 8008ed4:	d155      	bne.n	8008f82 <__ieee754_atan2+0x152>
 8008ed6:	a136      	add	r1, pc, #216	; (adr r1, 8008fb0 <__ieee754_atan2+0x180>)
 8008ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008edc:	e7c9      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008ede:	a136      	add	r1, pc, #216	; (adr r1, 8008fb8 <__ieee754_atan2+0x188>)
 8008ee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ee4:	e7c5      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008ee6:	a136      	add	r1, pc, #216	; (adr r1, 8008fc0 <__ieee754_atan2+0x190>)
 8008ee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eec:	e7c1      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008eee:	2c02      	cmp	r4, #2
 8008ef0:	d04b      	beq.n	8008f8a <__ieee754_atan2+0x15a>
 8008ef2:	2c03      	cmp	r4, #3
 8008ef4:	d0d7      	beq.n	8008ea6 <__ieee754_atan2+0x76>
 8008ef6:	2c01      	cmp	r4, #1
 8008ef8:	f04f 0000 	mov.w	r0, #0
 8008efc:	d102      	bne.n	8008f04 <__ieee754_atan2+0xd4>
 8008efe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008f02:	e7b6      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008f04:	2100      	movs	r1, #0
 8008f06:	e7b4      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008f08:	4573      	cmp	r3, lr
 8008f0a:	d0d3      	beq.n	8008eb4 <__ieee754_atan2+0x84>
 8008f0c:	1a9b      	subs	r3, r3, r2
 8008f0e:	151b      	asrs	r3, r3, #20
 8008f10:	2b3c      	cmp	r3, #60	; 0x3c
 8008f12:	dc1e      	bgt.n	8008f52 <__ieee754_atan2+0x122>
 8008f14:	2f00      	cmp	r7, #0
 8008f16:	da01      	bge.n	8008f1c <__ieee754_atan2+0xec>
 8008f18:	333c      	adds	r3, #60	; 0x3c
 8008f1a:	db1e      	blt.n	8008f5a <__ieee754_atan2+0x12a>
 8008f1c:	4632      	mov	r2, r6
 8008f1e:	463b      	mov	r3, r7
 8008f20:	f7f7 fc9c 	bl	800085c <__aeabi_ddiv>
 8008f24:	ec41 0b10 	vmov	d0, r0, r1
 8008f28:	f000 ffc2 	bl	8009eb0 <fabs>
 8008f2c:	f000 fe20 	bl	8009b70 <atan>
 8008f30:	ec51 0b10 	vmov	r0, r1, d0
 8008f34:	2c01      	cmp	r4, #1
 8008f36:	d013      	beq.n	8008f60 <__ieee754_atan2+0x130>
 8008f38:	2c02      	cmp	r4, #2
 8008f3a:	d015      	beq.n	8008f68 <__ieee754_atan2+0x138>
 8008f3c:	2c00      	cmp	r4, #0
 8008f3e:	d098      	beq.n	8008e72 <__ieee754_atan2+0x42>
 8008f40:	a321      	add	r3, pc, #132	; (adr r3, 8008fc8 <__ieee754_atan2+0x198>)
 8008f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f46:	f7f7 f9a7 	bl	8000298 <__aeabi_dsub>
 8008f4a:	a321      	add	r3, pc, #132	; (adr r3, 8008fd0 <__ieee754_atan2+0x1a0>)
 8008f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f50:	e014      	b.n	8008f7c <__ieee754_atan2+0x14c>
 8008f52:	a121      	add	r1, pc, #132	; (adr r1, 8008fd8 <__ieee754_atan2+0x1a8>)
 8008f54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f58:	e7ec      	b.n	8008f34 <__ieee754_atan2+0x104>
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	e7e9      	b.n	8008f34 <__ieee754_atan2+0x104>
 8008f60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f64:	4619      	mov	r1, r3
 8008f66:	e784      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008f68:	a317      	add	r3, pc, #92	; (adr r3, 8008fc8 <__ieee754_atan2+0x198>)
 8008f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6e:	f7f7 f993 	bl	8000298 <__aeabi_dsub>
 8008f72:	4602      	mov	r2, r0
 8008f74:	460b      	mov	r3, r1
 8008f76:	a116      	add	r1, pc, #88	; (adr r1, 8008fd0 <__ieee754_atan2+0x1a0>)
 8008f78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f7c:	f7f7 f98c 	bl	8000298 <__aeabi_dsub>
 8008f80:	e777      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008f82:	a117      	add	r1, pc, #92	; (adr r1, 8008fe0 <__ieee754_atan2+0x1b0>)
 8008f84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f88:	e773      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008f8a:	a111      	add	r1, pc, #68	; (adr r1, 8008fd0 <__ieee754_atan2+0x1a0>)
 8008f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f90:	e76f      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008f92:	a111      	add	r1, pc, #68	; (adr r1, 8008fd8 <__ieee754_atan2+0x1a8>)
 8008f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f98:	e76b      	b.n	8008e72 <__ieee754_atan2+0x42>
 8008f9a:	bf00      	nop
 8008f9c:	f3af 8000 	nop.w
 8008fa0:	54442d18 	.word	0x54442d18
 8008fa4:	c00921fb 	.word	0xc00921fb
 8008fa8:	54442d18 	.word	0x54442d18
 8008fac:	bff921fb 	.word	0xbff921fb
 8008fb0:	54442d18 	.word	0x54442d18
 8008fb4:	bfe921fb 	.word	0xbfe921fb
 8008fb8:	7f3321d2 	.word	0x7f3321d2
 8008fbc:	4002d97c 	.word	0x4002d97c
 8008fc0:	7f3321d2 	.word	0x7f3321d2
 8008fc4:	c002d97c 	.word	0xc002d97c
 8008fc8:	33145c07 	.word	0x33145c07
 8008fcc:	3ca1a626 	.word	0x3ca1a626
 8008fd0:	54442d18 	.word	0x54442d18
 8008fd4:	400921fb 	.word	0x400921fb
 8008fd8:	54442d18 	.word	0x54442d18
 8008fdc:	3ff921fb 	.word	0x3ff921fb
 8008fe0:	54442d18 	.word	0x54442d18
 8008fe4:	3fe921fb 	.word	0x3fe921fb
 8008fe8:	7ff00000 	.word	0x7ff00000
 8008fec:	00000000 	.word	0x00000000

08008ff0 <__ieee754_pow>:
 8008ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff4:	b091      	sub	sp, #68	; 0x44
 8008ff6:	ed8d 1b00 	vstr	d1, [sp]
 8008ffa:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008ffe:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009002:	ea58 0302 	orrs.w	r3, r8, r2
 8009006:	ec57 6b10 	vmov	r6, r7, d0
 800900a:	f000 84be 	beq.w	800998a <__ieee754_pow+0x99a>
 800900e:	4b7a      	ldr	r3, [pc, #488]	; (80091f8 <__ieee754_pow+0x208>)
 8009010:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009014:	429c      	cmp	r4, r3
 8009016:	463d      	mov	r5, r7
 8009018:	ee10 aa10 	vmov	sl, s0
 800901c:	dc09      	bgt.n	8009032 <__ieee754_pow+0x42>
 800901e:	d103      	bne.n	8009028 <__ieee754_pow+0x38>
 8009020:	b93e      	cbnz	r6, 8009032 <__ieee754_pow+0x42>
 8009022:	45a0      	cmp	r8, r4
 8009024:	dc0d      	bgt.n	8009042 <__ieee754_pow+0x52>
 8009026:	e001      	b.n	800902c <__ieee754_pow+0x3c>
 8009028:	4598      	cmp	r8, r3
 800902a:	dc02      	bgt.n	8009032 <__ieee754_pow+0x42>
 800902c:	4598      	cmp	r8, r3
 800902e:	d10e      	bne.n	800904e <__ieee754_pow+0x5e>
 8009030:	b16a      	cbz	r2, 800904e <__ieee754_pow+0x5e>
 8009032:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009036:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800903a:	ea54 030a 	orrs.w	r3, r4, sl
 800903e:	f000 84a4 	beq.w	800998a <__ieee754_pow+0x99a>
 8009042:	486e      	ldr	r0, [pc, #440]	; (80091fc <__ieee754_pow+0x20c>)
 8009044:	b011      	add	sp, #68	; 0x44
 8009046:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904a:	f000 bf45 	b.w	8009ed8 <nan>
 800904e:	2d00      	cmp	r5, #0
 8009050:	da53      	bge.n	80090fa <__ieee754_pow+0x10a>
 8009052:	4b6b      	ldr	r3, [pc, #428]	; (8009200 <__ieee754_pow+0x210>)
 8009054:	4598      	cmp	r8, r3
 8009056:	dc4d      	bgt.n	80090f4 <__ieee754_pow+0x104>
 8009058:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800905c:	4598      	cmp	r8, r3
 800905e:	dd4c      	ble.n	80090fa <__ieee754_pow+0x10a>
 8009060:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009064:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009068:	2b14      	cmp	r3, #20
 800906a:	dd26      	ble.n	80090ba <__ieee754_pow+0xca>
 800906c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009070:	fa22 f103 	lsr.w	r1, r2, r3
 8009074:	fa01 f303 	lsl.w	r3, r1, r3
 8009078:	4293      	cmp	r3, r2
 800907a:	d13e      	bne.n	80090fa <__ieee754_pow+0x10a>
 800907c:	f001 0101 	and.w	r1, r1, #1
 8009080:	f1c1 0b02 	rsb	fp, r1, #2
 8009084:	2a00      	cmp	r2, #0
 8009086:	d15b      	bne.n	8009140 <__ieee754_pow+0x150>
 8009088:	4b5b      	ldr	r3, [pc, #364]	; (80091f8 <__ieee754_pow+0x208>)
 800908a:	4598      	cmp	r8, r3
 800908c:	d124      	bne.n	80090d8 <__ieee754_pow+0xe8>
 800908e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009092:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009096:	ea53 030a 	orrs.w	r3, r3, sl
 800909a:	f000 8476 	beq.w	800998a <__ieee754_pow+0x99a>
 800909e:	4b59      	ldr	r3, [pc, #356]	; (8009204 <__ieee754_pow+0x214>)
 80090a0:	429c      	cmp	r4, r3
 80090a2:	dd2d      	ble.n	8009100 <__ieee754_pow+0x110>
 80090a4:	f1b9 0f00 	cmp.w	r9, #0
 80090a8:	f280 8473 	bge.w	8009992 <__ieee754_pow+0x9a2>
 80090ac:	2000      	movs	r0, #0
 80090ae:	2100      	movs	r1, #0
 80090b0:	ec41 0b10 	vmov	d0, r0, r1
 80090b4:	b011      	add	sp, #68	; 0x44
 80090b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ba:	2a00      	cmp	r2, #0
 80090bc:	d13e      	bne.n	800913c <__ieee754_pow+0x14c>
 80090be:	f1c3 0314 	rsb	r3, r3, #20
 80090c2:	fa48 f103 	asr.w	r1, r8, r3
 80090c6:	fa01 f303 	lsl.w	r3, r1, r3
 80090ca:	4543      	cmp	r3, r8
 80090cc:	f040 8469 	bne.w	80099a2 <__ieee754_pow+0x9b2>
 80090d0:	f001 0101 	and.w	r1, r1, #1
 80090d4:	f1c1 0b02 	rsb	fp, r1, #2
 80090d8:	4b4b      	ldr	r3, [pc, #300]	; (8009208 <__ieee754_pow+0x218>)
 80090da:	4598      	cmp	r8, r3
 80090dc:	d118      	bne.n	8009110 <__ieee754_pow+0x120>
 80090de:	f1b9 0f00 	cmp.w	r9, #0
 80090e2:	f280 845a 	bge.w	800999a <__ieee754_pow+0x9aa>
 80090e6:	4948      	ldr	r1, [pc, #288]	; (8009208 <__ieee754_pow+0x218>)
 80090e8:	4632      	mov	r2, r6
 80090ea:	463b      	mov	r3, r7
 80090ec:	2000      	movs	r0, #0
 80090ee:	f7f7 fbb5 	bl	800085c <__aeabi_ddiv>
 80090f2:	e7dd      	b.n	80090b0 <__ieee754_pow+0xc0>
 80090f4:	f04f 0b02 	mov.w	fp, #2
 80090f8:	e7c4      	b.n	8009084 <__ieee754_pow+0x94>
 80090fa:	f04f 0b00 	mov.w	fp, #0
 80090fe:	e7c1      	b.n	8009084 <__ieee754_pow+0x94>
 8009100:	f1b9 0f00 	cmp.w	r9, #0
 8009104:	dad2      	bge.n	80090ac <__ieee754_pow+0xbc>
 8009106:	e9dd 0300 	ldrd	r0, r3, [sp]
 800910a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800910e:	e7cf      	b.n	80090b0 <__ieee754_pow+0xc0>
 8009110:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009114:	d106      	bne.n	8009124 <__ieee754_pow+0x134>
 8009116:	4632      	mov	r2, r6
 8009118:	463b      	mov	r3, r7
 800911a:	4610      	mov	r0, r2
 800911c:	4619      	mov	r1, r3
 800911e:	f7f7 fa73 	bl	8000608 <__aeabi_dmul>
 8009122:	e7c5      	b.n	80090b0 <__ieee754_pow+0xc0>
 8009124:	4b39      	ldr	r3, [pc, #228]	; (800920c <__ieee754_pow+0x21c>)
 8009126:	4599      	cmp	r9, r3
 8009128:	d10a      	bne.n	8009140 <__ieee754_pow+0x150>
 800912a:	2d00      	cmp	r5, #0
 800912c:	db08      	blt.n	8009140 <__ieee754_pow+0x150>
 800912e:	ec47 6b10 	vmov	d0, r6, r7
 8009132:	b011      	add	sp, #68	; 0x44
 8009134:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009138:	f000 bc68 	b.w	8009a0c <__ieee754_sqrt>
 800913c:	f04f 0b00 	mov.w	fp, #0
 8009140:	ec47 6b10 	vmov	d0, r6, r7
 8009144:	f000 feb4 	bl	8009eb0 <fabs>
 8009148:	ec51 0b10 	vmov	r0, r1, d0
 800914c:	f1ba 0f00 	cmp.w	sl, #0
 8009150:	d127      	bne.n	80091a2 <__ieee754_pow+0x1b2>
 8009152:	b124      	cbz	r4, 800915e <__ieee754_pow+0x16e>
 8009154:	4b2c      	ldr	r3, [pc, #176]	; (8009208 <__ieee754_pow+0x218>)
 8009156:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800915a:	429a      	cmp	r2, r3
 800915c:	d121      	bne.n	80091a2 <__ieee754_pow+0x1b2>
 800915e:	f1b9 0f00 	cmp.w	r9, #0
 8009162:	da05      	bge.n	8009170 <__ieee754_pow+0x180>
 8009164:	4602      	mov	r2, r0
 8009166:	460b      	mov	r3, r1
 8009168:	2000      	movs	r0, #0
 800916a:	4927      	ldr	r1, [pc, #156]	; (8009208 <__ieee754_pow+0x218>)
 800916c:	f7f7 fb76 	bl	800085c <__aeabi_ddiv>
 8009170:	2d00      	cmp	r5, #0
 8009172:	da9d      	bge.n	80090b0 <__ieee754_pow+0xc0>
 8009174:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009178:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800917c:	ea54 030b 	orrs.w	r3, r4, fp
 8009180:	d108      	bne.n	8009194 <__ieee754_pow+0x1a4>
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	4610      	mov	r0, r2
 8009188:	4619      	mov	r1, r3
 800918a:	f7f7 f885 	bl	8000298 <__aeabi_dsub>
 800918e:	4602      	mov	r2, r0
 8009190:	460b      	mov	r3, r1
 8009192:	e7ac      	b.n	80090ee <__ieee754_pow+0xfe>
 8009194:	f1bb 0f01 	cmp.w	fp, #1
 8009198:	d18a      	bne.n	80090b0 <__ieee754_pow+0xc0>
 800919a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800919e:	4619      	mov	r1, r3
 80091a0:	e786      	b.n	80090b0 <__ieee754_pow+0xc0>
 80091a2:	0fed      	lsrs	r5, r5, #31
 80091a4:	1e6b      	subs	r3, r5, #1
 80091a6:	930d      	str	r3, [sp, #52]	; 0x34
 80091a8:	ea5b 0303 	orrs.w	r3, fp, r3
 80091ac:	d102      	bne.n	80091b4 <__ieee754_pow+0x1c4>
 80091ae:	4632      	mov	r2, r6
 80091b0:	463b      	mov	r3, r7
 80091b2:	e7e8      	b.n	8009186 <__ieee754_pow+0x196>
 80091b4:	4b16      	ldr	r3, [pc, #88]	; (8009210 <__ieee754_pow+0x220>)
 80091b6:	4598      	cmp	r8, r3
 80091b8:	f340 80fe 	ble.w	80093b8 <__ieee754_pow+0x3c8>
 80091bc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80091c0:	4598      	cmp	r8, r3
 80091c2:	dd0a      	ble.n	80091da <__ieee754_pow+0x1ea>
 80091c4:	4b0f      	ldr	r3, [pc, #60]	; (8009204 <__ieee754_pow+0x214>)
 80091c6:	429c      	cmp	r4, r3
 80091c8:	dc0d      	bgt.n	80091e6 <__ieee754_pow+0x1f6>
 80091ca:	f1b9 0f00 	cmp.w	r9, #0
 80091ce:	f6bf af6d 	bge.w	80090ac <__ieee754_pow+0xbc>
 80091d2:	a307      	add	r3, pc, #28	; (adr r3, 80091f0 <__ieee754_pow+0x200>)
 80091d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d8:	e79f      	b.n	800911a <__ieee754_pow+0x12a>
 80091da:	4b0e      	ldr	r3, [pc, #56]	; (8009214 <__ieee754_pow+0x224>)
 80091dc:	429c      	cmp	r4, r3
 80091de:	ddf4      	ble.n	80091ca <__ieee754_pow+0x1da>
 80091e0:	4b09      	ldr	r3, [pc, #36]	; (8009208 <__ieee754_pow+0x218>)
 80091e2:	429c      	cmp	r4, r3
 80091e4:	dd18      	ble.n	8009218 <__ieee754_pow+0x228>
 80091e6:	f1b9 0f00 	cmp.w	r9, #0
 80091ea:	dcf2      	bgt.n	80091d2 <__ieee754_pow+0x1e2>
 80091ec:	e75e      	b.n	80090ac <__ieee754_pow+0xbc>
 80091ee:	bf00      	nop
 80091f0:	8800759c 	.word	0x8800759c
 80091f4:	7e37e43c 	.word	0x7e37e43c
 80091f8:	7ff00000 	.word	0x7ff00000
 80091fc:	0800ee89 	.word	0x0800ee89
 8009200:	433fffff 	.word	0x433fffff
 8009204:	3fefffff 	.word	0x3fefffff
 8009208:	3ff00000 	.word	0x3ff00000
 800920c:	3fe00000 	.word	0x3fe00000
 8009210:	41e00000 	.word	0x41e00000
 8009214:	3feffffe 	.word	0x3feffffe
 8009218:	2200      	movs	r2, #0
 800921a:	4b63      	ldr	r3, [pc, #396]	; (80093a8 <__ieee754_pow+0x3b8>)
 800921c:	f7f7 f83c 	bl	8000298 <__aeabi_dsub>
 8009220:	a355      	add	r3, pc, #340	; (adr r3, 8009378 <__ieee754_pow+0x388>)
 8009222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009226:	4604      	mov	r4, r0
 8009228:	460d      	mov	r5, r1
 800922a:	f7f7 f9ed 	bl	8000608 <__aeabi_dmul>
 800922e:	a354      	add	r3, pc, #336	; (adr r3, 8009380 <__ieee754_pow+0x390>)
 8009230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009234:	4606      	mov	r6, r0
 8009236:	460f      	mov	r7, r1
 8009238:	4620      	mov	r0, r4
 800923a:	4629      	mov	r1, r5
 800923c:	f7f7 f9e4 	bl	8000608 <__aeabi_dmul>
 8009240:	2200      	movs	r2, #0
 8009242:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009246:	4b59      	ldr	r3, [pc, #356]	; (80093ac <__ieee754_pow+0x3bc>)
 8009248:	4620      	mov	r0, r4
 800924a:	4629      	mov	r1, r5
 800924c:	f7f7 f9dc 	bl	8000608 <__aeabi_dmul>
 8009250:	4602      	mov	r2, r0
 8009252:	460b      	mov	r3, r1
 8009254:	a14c      	add	r1, pc, #304	; (adr r1, 8009388 <__ieee754_pow+0x398>)
 8009256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800925a:	f7f7 f81d 	bl	8000298 <__aeabi_dsub>
 800925e:	4622      	mov	r2, r4
 8009260:	462b      	mov	r3, r5
 8009262:	f7f7 f9d1 	bl	8000608 <__aeabi_dmul>
 8009266:	4602      	mov	r2, r0
 8009268:	460b      	mov	r3, r1
 800926a:	2000      	movs	r0, #0
 800926c:	4950      	ldr	r1, [pc, #320]	; (80093b0 <__ieee754_pow+0x3c0>)
 800926e:	f7f7 f813 	bl	8000298 <__aeabi_dsub>
 8009272:	4622      	mov	r2, r4
 8009274:	462b      	mov	r3, r5
 8009276:	4680      	mov	r8, r0
 8009278:	4689      	mov	r9, r1
 800927a:	4620      	mov	r0, r4
 800927c:	4629      	mov	r1, r5
 800927e:	f7f7 f9c3 	bl	8000608 <__aeabi_dmul>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	4640      	mov	r0, r8
 8009288:	4649      	mov	r1, r9
 800928a:	f7f7 f9bd 	bl	8000608 <__aeabi_dmul>
 800928e:	a340      	add	r3, pc, #256	; (adr r3, 8009390 <__ieee754_pow+0x3a0>)
 8009290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009294:	f7f7 f9b8 	bl	8000608 <__aeabi_dmul>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092a0:	f7f6 fffa 	bl	8000298 <__aeabi_dsub>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	4604      	mov	r4, r0
 80092aa:	460d      	mov	r5, r1
 80092ac:	4630      	mov	r0, r6
 80092ae:	4639      	mov	r1, r7
 80092b0:	f7f6 fff4 	bl	800029c <__adddf3>
 80092b4:	2000      	movs	r0, #0
 80092b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092ba:	4632      	mov	r2, r6
 80092bc:	463b      	mov	r3, r7
 80092be:	f7f6 ffeb 	bl	8000298 <__aeabi_dsub>
 80092c2:	4602      	mov	r2, r0
 80092c4:	460b      	mov	r3, r1
 80092c6:	4620      	mov	r0, r4
 80092c8:	4629      	mov	r1, r5
 80092ca:	f7f6 ffe5 	bl	8000298 <__aeabi_dsub>
 80092ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80092d0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80092d4:	4313      	orrs	r3, r2
 80092d6:	4606      	mov	r6, r0
 80092d8:	460f      	mov	r7, r1
 80092da:	f040 81eb 	bne.w	80096b4 <__ieee754_pow+0x6c4>
 80092de:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009398 <__ieee754_pow+0x3a8>
 80092e2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80092e6:	2400      	movs	r4, #0
 80092e8:	4622      	mov	r2, r4
 80092ea:	462b      	mov	r3, r5
 80092ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80092f4:	f7f6 ffd0 	bl	8000298 <__aeabi_dsub>
 80092f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092fc:	f7f7 f984 	bl	8000608 <__aeabi_dmul>
 8009300:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009304:	4680      	mov	r8, r0
 8009306:	4689      	mov	r9, r1
 8009308:	4630      	mov	r0, r6
 800930a:	4639      	mov	r1, r7
 800930c:	f7f7 f97c 	bl	8000608 <__aeabi_dmul>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4640      	mov	r0, r8
 8009316:	4649      	mov	r1, r9
 8009318:	f7f6 ffc0 	bl	800029c <__adddf3>
 800931c:	4622      	mov	r2, r4
 800931e:	462b      	mov	r3, r5
 8009320:	4680      	mov	r8, r0
 8009322:	4689      	mov	r9, r1
 8009324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009328:	f7f7 f96e 	bl	8000608 <__aeabi_dmul>
 800932c:	460b      	mov	r3, r1
 800932e:	4604      	mov	r4, r0
 8009330:	460d      	mov	r5, r1
 8009332:	4602      	mov	r2, r0
 8009334:	4649      	mov	r1, r9
 8009336:	4640      	mov	r0, r8
 8009338:	e9cd 4500 	strd	r4, r5, [sp]
 800933c:	f7f6 ffae 	bl	800029c <__adddf3>
 8009340:	4b1c      	ldr	r3, [pc, #112]	; (80093b4 <__ieee754_pow+0x3c4>)
 8009342:	4299      	cmp	r1, r3
 8009344:	4606      	mov	r6, r0
 8009346:	460f      	mov	r7, r1
 8009348:	468b      	mov	fp, r1
 800934a:	f340 82f7 	ble.w	800993c <__ieee754_pow+0x94c>
 800934e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009352:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009356:	4303      	orrs	r3, r0
 8009358:	f000 81ea 	beq.w	8009730 <__ieee754_pow+0x740>
 800935c:	a310      	add	r3, pc, #64	; (adr r3, 80093a0 <__ieee754_pow+0x3b0>)
 800935e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009362:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009366:	f7f7 f94f 	bl	8000608 <__aeabi_dmul>
 800936a:	a30d      	add	r3, pc, #52	; (adr r3, 80093a0 <__ieee754_pow+0x3b0>)
 800936c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009370:	e6d5      	b.n	800911e <__ieee754_pow+0x12e>
 8009372:	bf00      	nop
 8009374:	f3af 8000 	nop.w
 8009378:	60000000 	.word	0x60000000
 800937c:	3ff71547 	.word	0x3ff71547
 8009380:	f85ddf44 	.word	0xf85ddf44
 8009384:	3e54ae0b 	.word	0x3e54ae0b
 8009388:	55555555 	.word	0x55555555
 800938c:	3fd55555 	.word	0x3fd55555
 8009390:	652b82fe 	.word	0x652b82fe
 8009394:	3ff71547 	.word	0x3ff71547
 8009398:	00000000 	.word	0x00000000
 800939c:	bff00000 	.word	0xbff00000
 80093a0:	8800759c 	.word	0x8800759c
 80093a4:	7e37e43c 	.word	0x7e37e43c
 80093a8:	3ff00000 	.word	0x3ff00000
 80093ac:	3fd00000 	.word	0x3fd00000
 80093b0:	3fe00000 	.word	0x3fe00000
 80093b4:	408fffff 	.word	0x408fffff
 80093b8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80093bc:	f04f 0200 	mov.w	r2, #0
 80093c0:	da05      	bge.n	80093ce <__ieee754_pow+0x3de>
 80093c2:	4bd3      	ldr	r3, [pc, #844]	; (8009710 <__ieee754_pow+0x720>)
 80093c4:	f7f7 f920 	bl	8000608 <__aeabi_dmul>
 80093c8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80093cc:	460c      	mov	r4, r1
 80093ce:	1523      	asrs	r3, r4, #20
 80093d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80093d4:	4413      	add	r3, r2
 80093d6:	9309      	str	r3, [sp, #36]	; 0x24
 80093d8:	4bce      	ldr	r3, [pc, #824]	; (8009714 <__ieee754_pow+0x724>)
 80093da:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80093de:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80093e2:	429c      	cmp	r4, r3
 80093e4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80093e8:	dd08      	ble.n	80093fc <__ieee754_pow+0x40c>
 80093ea:	4bcb      	ldr	r3, [pc, #812]	; (8009718 <__ieee754_pow+0x728>)
 80093ec:	429c      	cmp	r4, r3
 80093ee:	f340 815e 	ble.w	80096ae <__ieee754_pow+0x6be>
 80093f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093f4:	3301      	adds	r3, #1
 80093f6:	9309      	str	r3, [sp, #36]	; 0x24
 80093f8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80093fc:	f04f 0a00 	mov.w	sl, #0
 8009400:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009404:	930c      	str	r3, [sp, #48]	; 0x30
 8009406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009408:	4bc4      	ldr	r3, [pc, #784]	; (800971c <__ieee754_pow+0x72c>)
 800940a:	4413      	add	r3, r2
 800940c:	ed93 7b00 	vldr	d7, [r3]
 8009410:	4629      	mov	r1, r5
 8009412:	ec53 2b17 	vmov	r2, r3, d7
 8009416:	ed8d 7b06 	vstr	d7, [sp, #24]
 800941a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800941e:	f7f6 ff3b 	bl	8000298 <__aeabi_dsub>
 8009422:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009426:	4606      	mov	r6, r0
 8009428:	460f      	mov	r7, r1
 800942a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800942e:	f7f6 ff35 	bl	800029c <__adddf3>
 8009432:	4602      	mov	r2, r0
 8009434:	460b      	mov	r3, r1
 8009436:	2000      	movs	r0, #0
 8009438:	49b9      	ldr	r1, [pc, #740]	; (8009720 <__ieee754_pow+0x730>)
 800943a:	f7f7 fa0f 	bl	800085c <__aeabi_ddiv>
 800943e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009442:	4602      	mov	r2, r0
 8009444:	460b      	mov	r3, r1
 8009446:	4630      	mov	r0, r6
 8009448:	4639      	mov	r1, r7
 800944a:	f7f7 f8dd 	bl	8000608 <__aeabi_dmul>
 800944e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009452:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009456:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800945a:	2300      	movs	r3, #0
 800945c:	9302      	str	r3, [sp, #8]
 800945e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009462:	106d      	asrs	r5, r5, #1
 8009464:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009468:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800946c:	2200      	movs	r2, #0
 800946e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009472:	4640      	mov	r0, r8
 8009474:	4649      	mov	r1, r9
 8009476:	4614      	mov	r4, r2
 8009478:	461d      	mov	r5, r3
 800947a:	f7f7 f8c5 	bl	8000608 <__aeabi_dmul>
 800947e:	4602      	mov	r2, r0
 8009480:	460b      	mov	r3, r1
 8009482:	4630      	mov	r0, r6
 8009484:	4639      	mov	r1, r7
 8009486:	f7f6 ff07 	bl	8000298 <__aeabi_dsub>
 800948a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800948e:	4606      	mov	r6, r0
 8009490:	460f      	mov	r7, r1
 8009492:	4620      	mov	r0, r4
 8009494:	4629      	mov	r1, r5
 8009496:	f7f6 feff 	bl	8000298 <__aeabi_dsub>
 800949a:	4602      	mov	r2, r0
 800949c:	460b      	mov	r3, r1
 800949e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80094a2:	f7f6 fef9 	bl	8000298 <__aeabi_dsub>
 80094a6:	4642      	mov	r2, r8
 80094a8:	464b      	mov	r3, r9
 80094aa:	f7f7 f8ad 	bl	8000608 <__aeabi_dmul>
 80094ae:	4602      	mov	r2, r0
 80094b0:	460b      	mov	r3, r1
 80094b2:	4630      	mov	r0, r6
 80094b4:	4639      	mov	r1, r7
 80094b6:	f7f6 feef 	bl	8000298 <__aeabi_dsub>
 80094ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80094be:	f7f7 f8a3 	bl	8000608 <__aeabi_dmul>
 80094c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80094ca:	4610      	mov	r0, r2
 80094cc:	4619      	mov	r1, r3
 80094ce:	f7f7 f89b 	bl	8000608 <__aeabi_dmul>
 80094d2:	a37b      	add	r3, pc, #492	; (adr r3, 80096c0 <__ieee754_pow+0x6d0>)
 80094d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d8:	4604      	mov	r4, r0
 80094da:	460d      	mov	r5, r1
 80094dc:	f7f7 f894 	bl	8000608 <__aeabi_dmul>
 80094e0:	a379      	add	r3, pc, #484	; (adr r3, 80096c8 <__ieee754_pow+0x6d8>)
 80094e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e6:	f7f6 fed9 	bl	800029c <__adddf3>
 80094ea:	4622      	mov	r2, r4
 80094ec:	462b      	mov	r3, r5
 80094ee:	f7f7 f88b 	bl	8000608 <__aeabi_dmul>
 80094f2:	a377      	add	r3, pc, #476	; (adr r3, 80096d0 <__ieee754_pow+0x6e0>)
 80094f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f8:	f7f6 fed0 	bl	800029c <__adddf3>
 80094fc:	4622      	mov	r2, r4
 80094fe:	462b      	mov	r3, r5
 8009500:	f7f7 f882 	bl	8000608 <__aeabi_dmul>
 8009504:	a374      	add	r3, pc, #464	; (adr r3, 80096d8 <__ieee754_pow+0x6e8>)
 8009506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950a:	f7f6 fec7 	bl	800029c <__adddf3>
 800950e:	4622      	mov	r2, r4
 8009510:	462b      	mov	r3, r5
 8009512:	f7f7 f879 	bl	8000608 <__aeabi_dmul>
 8009516:	a372      	add	r3, pc, #456	; (adr r3, 80096e0 <__ieee754_pow+0x6f0>)
 8009518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951c:	f7f6 febe 	bl	800029c <__adddf3>
 8009520:	4622      	mov	r2, r4
 8009522:	462b      	mov	r3, r5
 8009524:	f7f7 f870 	bl	8000608 <__aeabi_dmul>
 8009528:	a36f      	add	r3, pc, #444	; (adr r3, 80096e8 <__ieee754_pow+0x6f8>)
 800952a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952e:	f7f6 feb5 	bl	800029c <__adddf3>
 8009532:	4622      	mov	r2, r4
 8009534:	4606      	mov	r6, r0
 8009536:	460f      	mov	r7, r1
 8009538:	462b      	mov	r3, r5
 800953a:	4620      	mov	r0, r4
 800953c:	4629      	mov	r1, r5
 800953e:	f7f7 f863 	bl	8000608 <__aeabi_dmul>
 8009542:	4602      	mov	r2, r0
 8009544:	460b      	mov	r3, r1
 8009546:	4630      	mov	r0, r6
 8009548:	4639      	mov	r1, r7
 800954a:	f7f7 f85d 	bl	8000608 <__aeabi_dmul>
 800954e:	4642      	mov	r2, r8
 8009550:	4604      	mov	r4, r0
 8009552:	460d      	mov	r5, r1
 8009554:	464b      	mov	r3, r9
 8009556:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800955a:	f7f6 fe9f 	bl	800029c <__adddf3>
 800955e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009562:	f7f7 f851 	bl	8000608 <__aeabi_dmul>
 8009566:	4622      	mov	r2, r4
 8009568:	462b      	mov	r3, r5
 800956a:	f7f6 fe97 	bl	800029c <__adddf3>
 800956e:	4642      	mov	r2, r8
 8009570:	4606      	mov	r6, r0
 8009572:	460f      	mov	r7, r1
 8009574:	464b      	mov	r3, r9
 8009576:	4640      	mov	r0, r8
 8009578:	4649      	mov	r1, r9
 800957a:	f7f7 f845 	bl	8000608 <__aeabi_dmul>
 800957e:	2200      	movs	r2, #0
 8009580:	4b68      	ldr	r3, [pc, #416]	; (8009724 <__ieee754_pow+0x734>)
 8009582:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009586:	f7f6 fe89 	bl	800029c <__adddf3>
 800958a:	4632      	mov	r2, r6
 800958c:	463b      	mov	r3, r7
 800958e:	f7f6 fe85 	bl	800029c <__adddf3>
 8009592:	9802      	ldr	r0, [sp, #8]
 8009594:	460d      	mov	r5, r1
 8009596:	4604      	mov	r4, r0
 8009598:	4602      	mov	r2, r0
 800959a:	460b      	mov	r3, r1
 800959c:	4640      	mov	r0, r8
 800959e:	4649      	mov	r1, r9
 80095a0:	f7f7 f832 	bl	8000608 <__aeabi_dmul>
 80095a4:	2200      	movs	r2, #0
 80095a6:	4680      	mov	r8, r0
 80095a8:	4689      	mov	r9, r1
 80095aa:	4b5e      	ldr	r3, [pc, #376]	; (8009724 <__ieee754_pow+0x734>)
 80095ac:	4620      	mov	r0, r4
 80095ae:	4629      	mov	r1, r5
 80095b0:	f7f6 fe72 	bl	8000298 <__aeabi_dsub>
 80095b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80095b8:	f7f6 fe6e 	bl	8000298 <__aeabi_dsub>
 80095bc:	4602      	mov	r2, r0
 80095be:	460b      	mov	r3, r1
 80095c0:	4630      	mov	r0, r6
 80095c2:	4639      	mov	r1, r7
 80095c4:	f7f6 fe68 	bl	8000298 <__aeabi_dsub>
 80095c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095cc:	f7f7 f81c 	bl	8000608 <__aeabi_dmul>
 80095d0:	4622      	mov	r2, r4
 80095d2:	4606      	mov	r6, r0
 80095d4:	460f      	mov	r7, r1
 80095d6:	462b      	mov	r3, r5
 80095d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095dc:	f7f7 f814 	bl	8000608 <__aeabi_dmul>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4630      	mov	r0, r6
 80095e6:	4639      	mov	r1, r7
 80095e8:	f7f6 fe58 	bl	800029c <__adddf3>
 80095ec:	4606      	mov	r6, r0
 80095ee:	460f      	mov	r7, r1
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	4640      	mov	r0, r8
 80095f6:	4649      	mov	r1, r9
 80095f8:	f7f6 fe50 	bl	800029c <__adddf3>
 80095fc:	9802      	ldr	r0, [sp, #8]
 80095fe:	a33c      	add	r3, pc, #240	; (adr r3, 80096f0 <__ieee754_pow+0x700>)
 8009600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009604:	4604      	mov	r4, r0
 8009606:	460d      	mov	r5, r1
 8009608:	f7f6 fffe 	bl	8000608 <__aeabi_dmul>
 800960c:	4642      	mov	r2, r8
 800960e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009612:	464b      	mov	r3, r9
 8009614:	4620      	mov	r0, r4
 8009616:	4629      	mov	r1, r5
 8009618:	f7f6 fe3e 	bl	8000298 <__aeabi_dsub>
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	4630      	mov	r0, r6
 8009622:	4639      	mov	r1, r7
 8009624:	f7f6 fe38 	bl	8000298 <__aeabi_dsub>
 8009628:	a333      	add	r3, pc, #204	; (adr r3, 80096f8 <__ieee754_pow+0x708>)
 800962a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962e:	f7f6 ffeb 	bl	8000608 <__aeabi_dmul>
 8009632:	a333      	add	r3, pc, #204	; (adr r3, 8009700 <__ieee754_pow+0x710>)
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	4606      	mov	r6, r0
 800963a:	460f      	mov	r7, r1
 800963c:	4620      	mov	r0, r4
 800963e:	4629      	mov	r1, r5
 8009640:	f7f6 ffe2 	bl	8000608 <__aeabi_dmul>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	4630      	mov	r0, r6
 800964a:	4639      	mov	r1, r7
 800964c:	f7f6 fe26 	bl	800029c <__adddf3>
 8009650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009652:	4b35      	ldr	r3, [pc, #212]	; (8009728 <__ieee754_pow+0x738>)
 8009654:	4413      	add	r3, r2
 8009656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965a:	f7f6 fe1f 	bl	800029c <__adddf3>
 800965e:	4604      	mov	r4, r0
 8009660:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009662:	460d      	mov	r5, r1
 8009664:	f7f6 ff66 	bl	8000534 <__aeabi_i2d>
 8009668:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800966a:	4b30      	ldr	r3, [pc, #192]	; (800972c <__ieee754_pow+0x73c>)
 800966c:	4413      	add	r3, r2
 800966e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009672:	4606      	mov	r6, r0
 8009674:	460f      	mov	r7, r1
 8009676:	4622      	mov	r2, r4
 8009678:	462b      	mov	r3, r5
 800967a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800967e:	f7f6 fe0d 	bl	800029c <__adddf3>
 8009682:	4642      	mov	r2, r8
 8009684:	464b      	mov	r3, r9
 8009686:	f7f6 fe09 	bl	800029c <__adddf3>
 800968a:	4632      	mov	r2, r6
 800968c:	463b      	mov	r3, r7
 800968e:	f7f6 fe05 	bl	800029c <__adddf3>
 8009692:	9802      	ldr	r0, [sp, #8]
 8009694:	4632      	mov	r2, r6
 8009696:	463b      	mov	r3, r7
 8009698:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800969c:	f7f6 fdfc 	bl	8000298 <__aeabi_dsub>
 80096a0:	4642      	mov	r2, r8
 80096a2:	464b      	mov	r3, r9
 80096a4:	f7f6 fdf8 	bl	8000298 <__aeabi_dsub>
 80096a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096ac:	e607      	b.n	80092be <__ieee754_pow+0x2ce>
 80096ae:	f04f 0a01 	mov.w	sl, #1
 80096b2:	e6a5      	b.n	8009400 <__ieee754_pow+0x410>
 80096b4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009708 <__ieee754_pow+0x718>
 80096b8:	e613      	b.n	80092e2 <__ieee754_pow+0x2f2>
 80096ba:	bf00      	nop
 80096bc:	f3af 8000 	nop.w
 80096c0:	4a454eef 	.word	0x4a454eef
 80096c4:	3fca7e28 	.word	0x3fca7e28
 80096c8:	93c9db65 	.word	0x93c9db65
 80096cc:	3fcd864a 	.word	0x3fcd864a
 80096d0:	a91d4101 	.word	0xa91d4101
 80096d4:	3fd17460 	.word	0x3fd17460
 80096d8:	518f264d 	.word	0x518f264d
 80096dc:	3fd55555 	.word	0x3fd55555
 80096e0:	db6fabff 	.word	0xdb6fabff
 80096e4:	3fdb6db6 	.word	0x3fdb6db6
 80096e8:	33333303 	.word	0x33333303
 80096ec:	3fe33333 	.word	0x3fe33333
 80096f0:	e0000000 	.word	0xe0000000
 80096f4:	3feec709 	.word	0x3feec709
 80096f8:	dc3a03fd 	.word	0xdc3a03fd
 80096fc:	3feec709 	.word	0x3feec709
 8009700:	145b01f5 	.word	0x145b01f5
 8009704:	be3e2fe0 	.word	0xbe3e2fe0
 8009708:	00000000 	.word	0x00000000
 800970c:	3ff00000 	.word	0x3ff00000
 8009710:	43400000 	.word	0x43400000
 8009714:	0003988e 	.word	0x0003988e
 8009718:	000bb679 	.word	0x000bb679
 800971c:	0800eb00 	.word	0x0800eb00
 8009720:	3ff00000 	.word	0x3ff00000
 8009724:	40080000 	.word	0x40080000
 8009728:	0800eb20 	.word	0x0800eb20
 800972c:	0800eb10 	.word	0x0800eb10
 8009730:	a3b4      	add	r3, pc, #720	; (adr r3, 8009a04 <__ieee754_pow+0xa14>)
 8009732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009736:	4640      	mov	r0, r8
 8009738:	4649      	mov	r1, r9
 800973a:	f7f6 fdaf 	bl	800029c <__adddf3>
 800973e:	4622      	mov	r2, r4
 8009740:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009744:	462b      	mov	r3, r5
 8009746:	4630      	mov	r0, r6
 8009748:	4639      	mov	r1, r7
 800974a:	f7f6 fda5 	bl	8000298 <__aeabi_dsub>
 800974e:	4602      	mov	r2, r0
 8009750:	460b      	mov	r3, r1
 8009752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009756:	f7f7 f9e7 	bl	8000b28 <__aeabi_dcmpgt>
 800975a:	2800      	cmp	r0, #0
 800975c:	f47f adfe 	bne.w	800935c <__ieee754_pow+0x36c>
 8009760:	4aa3      	ldr	r2, [pc, #652]	; (80099f0 <__ieee754_pow+0xa00>)
 8009762:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009766:	4293      	cmp	r3, r2
 8009768:	f340 810a 	ble.w	8009980 <__ieee754_pow+0x990>
 800976c:	151b      	asrs	r3, r3, #20
 800976e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009772:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009776:	fa4a f303 	asr.w	r3, sl, r3
 800977a:	445b      	add	r3, fp
 800977c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009780:	4e9c      	ldr	r6, [pc, #624]	; (80099f4 <__ieee754_pow+0xa04>)
 8009782:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009786:	4116      	asrs	r6, r2
 8009788:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800978c:	2000      	movs	r0, #0
 800978e:	ea23 0106 	bic.w	r1, r3, r6
 8009792:	f1c2 0214 	rsb	r2, r2, #20
 8009796:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800979a:	fa4a fa02 	asr.w	sl, sl, r2
 800979e:	f1bb 0f00 	cmp.w	fp, #0
 80097a2:	4602      	mov	r2, r0
 80097a4:	460b      	mov	r3, r1
 80097a6:	4620      	mov	r0, r4
 80097a8:	4629      	mov	r1, r5
 80097aa:	bfb8      	it	lt
 80097ac:	f1ca 0a00 	rsblt	sl, sl, #0
 80097b0:	f7f6 fd72 	bl	8000298 <__aeabi_dsub>
 80097b4:	e9cd 0100 	strd	r0, r1, [sp]
 80097b8:	4642      	mov	r2, r8
 80097ba:	464b      	mov	r3, r9
 80097bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097c0:	f7f6 fd6c 	bl	800029c <__adddf3>
 80097c4:	2000      	movs	r0, #0
 80097c6:	a378      	add	r3, pc, #480	; (adr r3, 80099a8 <__ieee754_pow+0x9b8>)
 80097c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097cc:	4604      	mov	r4, r0
 80097ce:	460d      	mov	r5, r1
 80097d0:	f7f6 ff1a 	bl	8000608 <__aeabi_dmul>
 80097d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097d8:	4606      	mov	r6, r0
 80097da:	460f      	mov	r7, r1
 80097dc:	4620      	mov	r0, r4
 80097de:	4629      	mov	r1, r5
 80097e0:	f7f6 fd5a 	bl	8000298 <__aeabi_dsub>
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	4640      	mov	r0, r8
 80097ea:	4649      	mov	r1, r9
 80097ec:	f7f6 fd54 	bl	8000298 <__aeabi_dsub>
 80097f0:	a36f      	add	r3, pc, #444	; (adr r3, 80099b0 <__ieee754_pow+0x9c0>)
 80097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f6:	f7f6 ff07 	bl	8000608 <__aeabi_dmul>
 80097fa:	a36f      	add	r3, pc, #444	; (adr r3, 80099b8 <__ieee754_pow+0x9c8>)
 80097fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009800:	4680      	mov	r8, r0
 8009802:	4689      	mov	r9, r1
 8009804:	4620      	mov	r0, r4
 8009806:	4629      	mov	r1, r5
 8009808:	f7f6 fefe 	bl	8000608 <__aeabi_dmul>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4640      	mov	r0, r8
 8009812:	4649      	mov	r1, r9
 8009814:	f7f6 fd42 	bl	800029c <__adddf3>
 8009818:	4604      	mov	r4, r0
 800981a:	460d      	mov	r5, r1
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	4630      	mov	r0, r6
 8009822:	4639      	mov	r1, r7
 8009824:	f7f6 fd3a 	bl	800029c <__adddf3>
 8009828:	4632      	mov	r2, r6
 800982a:	463b      	mov	r3, r7
 800982c:	4680      	mov	r8, r0
 800982e:	4689      	mov	r9, r1
 8009830:	f7f6 fd32 	bl	8000298 <__aeabi_dsub>
 8009834:	4602      	mov	r2, r0
 8009836:	460b      	mov	r3, r1
 8009838:	4620      	mov	r0, r4
 800983a:	4629      	mov	r1, r5
 800983c:	f7f6 fd2c 	bl	8000298 <__aeabi_dsub>
 8009840:	4642      	mov	r2, r8
 8009842:	4606      	mov	r6, r0
 8009844:	460f      	mov	r7, r1
 8009846:	464b      	mov	r3, r9
 8009848:	4640      	mov	r0, r8
 800984a:	4649      	mov	r1, r9
 800984c:	f7f6 fedc 	bl	8000608 <__aeabi_dmul>
 8009850:	a35b      	add	r3, pc, #364	; (adr r3, 80099c0 <__ieee754_pow+0x9d0>)
 8009852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009856:	4604      	mov	r4, r0
 8009858:	460d      	mov	r5, r1
 800985a:	f7f6 fed5 	bl	8000608 <__aeabi_dmul>
 800985e:	a35a      	add	r3, pc, #360	; (adr r3, 80099c8 <__ieee754_pow+0x9d8>)
 8009860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009864:	f7f6 fd18 	bl	8000298 <__aeabi_dsub>
 8009868:	4622      	mov	r2, r4
 800986a:	462b      	mov	r3, r5
 800986c:	f7f6 fecc 	bl	8000608 <__aeabi_dmul>
 8009870:	a357      	add	r3, pc, #348	; (adr r3, 80099d0 <__ieee754_pow+0x9e0>)
 8009872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009876:	f7f6 fd11 	bl	800029c <__adddf3>
 800987a:	4622      	mov	r2, r4
 800987c:	462b      	mov	r3, r5
 800987e:	f7f6 fec3 	bl	8000608 <__aeabi_dmul>
 8009882:	a355      	add	r3, pc, #340	; (adr r3, 80099d8 <__ieee754_pow+0x9e8>)
 8009884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009888:	f7f6 fd06 	bl	8000298 <__aeabi_dsub>
 800988c:	4622      	mov	r2, r4
 800988e:	462b      	mov	r3, r5
 8009890:	f7f6 feba 	bl	8000608 <__aeabi_dmul>
 8009894:	a352      	add	r3, pc, #328	; (adr r3, 80099e0 <__ieee754_pow+0x9f0>)
 8009896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989a:	f7f6 fcff 	bl	800029c <__adddf3>
 800989e:	4622      	mov	r2, r4
 80098a0:	462b      	mov	r3, r5
 80098a2:	f7f6 feb1 	bl	8000608 <__aeabi_dmul>
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	4640      	mov	r0, r8
 80098ac:	4649      	mov	r1, r9
 80098ae:	f7f6 fcf3 	bl	8000298 <__aeabi_dsub>
 80098b2:	4604      	mov	r4, r0
 80098b4:	460d      	mov	r5, r1
 80098b6:	4602      	mov	r2, r0
 80098b8:	460b      	mov	r3, r1
 80098ba:	4640      	mov	r0, r8
 80098bc:	4649      	mov	r1, r9
 80098be:	f7f6 fea3 	bl	8000608 <__aeabi_dmul>
 80098c2:	2200      	movs	r2, #0
 80098c4:	e9cd 0100 	strd	r0, r1, [sp]
 80098c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80098cc:	4620      	mov	r0, r4
 80098ce:	4629      	mov	r1, r5
 80098d0:	f7f6 fce2 	bl	8000298 <__aeabi_dsub>
 80098d4:	4602      	mov	r2, r0
 80098d6:	460b      	mov	r3, r1
 80098d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098dc:	f7f6 ffbe 	bl	800085c <__aeabi_ddiv>
 80098e0:	4632      	mov	r2, r6
 80098e2:	4604      	mov	r4, r0
 80098e4:	460d      	mov	r5, r1
 80098e6:	463b      	mov	r3, r7
 80098e8:	4640      	mov	r0, r8
 80098ea:	4649      	mov	r1, r9
 80098ec:	f7f6 fe8c 	bl	8000608 <__aeabi_dmul>
 80098f0:	4632      	mov	r2, r6
 80098f2:	463b      	mov	r3, r7
 80098f4:	f7f6 fcd2 	bl	800029c <__adddf3>
 80098f8:	4602      	mov	r2, r0
 80098fa:	460b      	mov	r3, r1
 80098fc:	4620      	mov	r0, r4
 80098fe:	4629      	mov	r1, r5
 8009900:	f7f6 fcca 	bl	8000298 <__aeabi_dsub>
 8009904:	4642      	mov	r2, r8
 8009906:	464b      	mov	r3, r9
 8009908:	f7f6 fcc6 	bl	8000298 <__aeabi_dsub>
 800990c:	4602      	mov	r2, r0
 800990e:	460b      	mov	r3, r1
 8009910:	2000      	movs	r0, #0
 8009912:	4939      	ldr	r1, [pc, #228]	; (80099f8 <__ieee754_pow+0xa08>)
 8009914:	f7f6 fcc0 	bl	8000298 <__aeabi_dsub>
 8009918:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800991c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	da2f      	bge.n	8009986 <__ieee754_pow+0x996>
 8009926:	4650      	mov	r0, sl
 8009928:	ec43 2b10 	vmov	d0, r2, r3
 800992c:	f000 fb60 	bl	8009ff0 <scalbn>
 8009930:	ec51 0b10 	vmov	r0, r1, d0
 8009934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009938:	f7ff bbf1 	b.w	800911e <__ieee754_pow+0x12e>
 800993c:	4b2f      	ldr	r3, [pc, #188]	; (80099fc <__ieee754_pow+0xa0c>)
 800993e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009942:	429e      	cmp	r6, r3
 8009944:	f77f af0c 	ble.w	8009760 <__ieee754_pow+0x770>
 8009948:	4b2d      	ldr	r3, [pc, #180]	; (8009a00 <__ieee754_pow+0xa10>)
 800994a:	440b      	add	r3, r1
 800994c:	4303      	orrs	r3, r0
 800994e:	d00b      	beq.n	8009968 <__ieee754_pow+0x978>
 8009950:	a325      	add	r3, pc, #148	; (adr r3, 80099e8 <__ieee754_pow+0x9f8>)
 8009952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800995a:	f7f6 fe55 	bl	8000608 <__aeabi_dmul>
 800995e:	a322      	add	r3, pc, #136	; (adr r3, 80099e8 <__ieee754_pow+0x9f8>)
 8009960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009964:	f7ff bbdb 	b.w	800911e <__ieee754_pow+0x12e>
 8009968:	4622      	mov	r2, r4
 800996a:	462b      	mov	r3, r5
 800996c:	f7f6 fc94 	bl	8000298 <__aeabi_dsub>
 8009970:	4642      	mov	r2, r8
 8009972:	464b      	mov	r3, r9
 8009974:	f7f7 f8ce 	bl	8000b14 <__aeabi_dcmpge>
 8009978:	2800      	cmp	r0, #0
 800997a:	f43f aef1 	beq.w	8009760 <__ieee754_pow+0x770>
 800997e:	e7e7      	b.n	8009950 <__ieee754_pow+0x960>
 8009980:	f04f 0a00 	mov.w	sl, #0
 8009984:	e718      	b.n	80097b8 <__ieee754_pow+0x7c8>
 8009986:	4621      	mov	r1, r4
 8009988:	e7d4      	b.n	8009934 <__ieee754_pow+0x944>
 800998a:	2000      	movs	r0, #0
 800998c:	491a      	ldr	r1, [pc, #104]	; (80099f8 <__ieee754_pow+0xa08>)
 800998e:	f7ff bb8f 	b.w	80090b0 <__ieee754_pow+0xc0>
 8009992:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009996:	f7ff bb8b 	b.w	80090b0 <__ieee754_pow+0xc0>
 800999a:	4630      	mov	r0, r6
 800999c:	4639      	mov	r1, r7
 800999e:	f7ff bb87 	b.w	80090b0 <__ieee754_pow+0xc0>
 80099a2:	4693      	mov	fp, r2
 80099a4:	f7ff bb98 	b.w	80090d8 <__ieee754_pow+0xe8>
 80099a8:	00000000 	.word	0x00000000
 80099ac:	3fe62e43 	.word	0x3fe62e43
 80099b0:	fefa39ef 	.word	0xfefa39ef
 80099b4:	3fe62e42 	.word	0x3fe62e42
 80099b8:	0ca86c39 	.word	0x0ca86c39
 80099bc:	be205c61 	.word	0xbe205c61
 80099c0:	72bea4d0 	.word	0x72bea4d0
 80099c4:	3e663769 	.word	0x3e663769
 80099c8:	c5d26bf1 	.word	0xc5d26bf1
 80099cc:	3ebbbd41 	.word	0x3ebbbd41
 80099d0:	af25de2c 	.word	0xaf25de2c
 80099d4:	3f11566a 	.word	0x3f11566a
 80099d8:	16bebd93 	.word	0x16bebd93
 80099dc:	3f66c16c 	.word	0x3f66c16c
 80099e0:	5555553e 	.word	0x5555553e
 80099e4:	3fc55555 	.word	0x3fc55555
 80099e8:	c2f8f359 	.word	0xc2f8f359
 80099ec:	01a56e1f 	.word	0x01a56e1f
 80099f0:	3fe00000 	.word	0x3fe00000
 80099f4:	000fffff 	.word	0x000fffff
 80099f8:	3ff00000 	.word	0x3ff00000
 80099fc:	4090cbff 	.word	0x4090cbff
 8009a00:	3f6f3400 	.word	0x3f6f3400
 8009a04:	652b82fe 	.word	0x652b82fe
 8009a08:	3c971547 	.word	0x3c971547

08009a0c <__ieee754_sqrt>:
 8009a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a10:	4955      	ldr	r1, [pc, #340]	; (8009b68 <__ieee754_sqrt+0x15c>)
 8009a12:	ec55 4b10 	vmov	r4, r5, d0
 8009a16:	43a9      	bics	r1, r5
 8009a18:	462b      	mov	r3, r5
 8009a1a:	462a      	mov	r2, r5
 8009a1c:	d112      	bne.n	8009a44 <__ieee754_sqrt+0x38>
 8009a1e:	ee10 2a10 	vmov	r2, s0
 8009a22:	ee10 0a10 	vmov	r0, s0
 8009a26:	4629      	mov	r1, r5
 8009a28:	f7f6 fdee 	bl	8000608 <__aeabi_dmul>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	4620      	mov	r0, r4
 8009a32:	4629      	mov	r1, r5
 8009a34:	f7f6 fc32 	bl	800029c <__adddf3>
 8009a38:	4604      	mov	r4, r0
 8009a3a:	460d      	mov	r5, r1
 8009a3c:	ec45 4b10 	vmov	d0, r4, r5
 8009a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a44:	2d00      	cmp	r5, #0
 8009a46:	ee10 0a10 	vmov	r0, s0
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	dc0f      	bgt.n	8009a6e <__ieee754_sqrt+0x62>
 8009a4e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009a52:	4330      	orrs	r0, r6
 8009a54:	d0f2      	beq.n	8009a3c <__ieee754_sqrt+0x30>
 8009a56:	b155      	cbz	r5, 8009a6e <__ieee754_sqrt+0x62>
 8009a58:	ee10 2a10 	vmov	r2, s0
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	f7f6 fc1a 	bl	8000298 <__aeabi_dsub>
 8009a64:	4602      	mov	r2, r0
 8009a66:	460b      	mov	r3, r1
 8009a68:	f7f6 fef8 	bl	800085c <__aeabi_ddiv>
 8009a6c:	e7e4      	b.n	8009a38 <__ieee754_sqrt+0x2c>
 8009a6e:	151b      	asrs	r3, r3, #20
 8009a70:	d073      	beq.n	8009b5a <__ieee754_sqrt+0x14e>
 8009a72:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009a76:	07dd      	lsls	r5, r3, #31
 8009a78:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009a7c:	bf48      	it	mi
 8009a7e:	0fc8      	lsrmi	r0, r1, #31
 8009a80:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009a84:	bf44      	itt	mi
 8009a86:	0049      	lslmi	r1, r1, #1
 8009a88:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8009a8c:	2500      	movs	r5, #0
 8009a8e:	1058      	asrs	r0, r3, #1
 8009a90:	0fcb      	lsrs	r3, r1, #31
 8009a92:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009a96:	0049      	lsls	r1, r1, #1
 8009a98:	2316      	movs	r3, #22
 8009a9a:	462c      	mov	r4, r5
 8009a9c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8009aa0:	19a7      	adds	r7, r4, r6
 8009aa2:	4297      	cmp	r7, r2
 8009aa4:	bfde      	ittt	le
 8009aa6:	19bc      	addle	r4, r7, r6
 8009aa8:	1bd2      	suble	r2, r2, r7
 8009aaa:	19ad      	addle	r5, r5, r6
 8009aac:	0fcf      	lsrs	r7, r1, #31
 8009aae:	3b01      	subs	r3, #1
 8009ab0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8009ab4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009ab8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009abc:	d1f0      	bne.n	8009aa0 <__ieee754_sqrt+0x94>
 8009abe:	f04f 0c20 	mov.w	ip, #32
 8009ac2:	469e      	mov	lr, r3
 8009ac4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009ac8:	42a2      	cmp	r2, r4
 8009aca:	eb06 070e 	add.w	r7, r6, lr
 8009ace:	dc02      	bgt.n	8009ad6 <__ieee754_sqrt+0xca>
 8009ad0:	d112      	bne.n	8009af8 <__ieee754_sqrt+0xec>
 8009ad2:	428f      	cmp	r7, r1
 8009ad4:	d810      	bhi.n	8009af8 <__ieee754_sqrt+0xec>
 8009ad6:	2f00      	cmp	r7, #0
 8009ad8:	eb07 0e06 	add.w	lr, r7, r6
 8009adc:	da42      	bge.n	8009b64 <__ieee754_sqrt+0x158>
 8009ade:	f1be 0f00 	cmp.w	lr, #0
 8009ae2:	db3f      	blt.n	8009b64 <__ieee754_sqrt+0x158>
 8009ae4:	f104 0801 	add.w	r8, r4, #1
 8009ae8:	1b12      	subs	r2, r2, r4
 8009aea:	428f      	cmp	r7, r1
 8009aec:	bf88      	it	hi
 8009aee:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8009af2:	1bc9      	subs	r1, r1, r7
 8009af4:	4433      	add	r3, r6
 8009af6:	4644      	mov	r4, r8
 8009af8:	0052      	lsls	r2, r2, #1
 8009afa:	f1bc 0c01 	subs.w	ip, ip, #1
 8009afe:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009b02:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009b06:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009b0a:	d1dd      	bne.n	8009ac8 <__ieee754_sqrt+0xbc>
 8009b0c:	430a      	orrs	r2, r1
 8009b0e:	d006      	beq.n	8009b1e <__ieee754_sqrt+0x112>
 8009b10:	1c5c      	adds	r4, r3, #1
 8009b12:	bf13      	iteet	ne
 8009b14:	3301      	addne	r3, #1
 8009b16:	3501      	addeq	r5, #1
 8009b18:	4663      	moveq	r3, ip
 8009b1a:	f023 0301 	bicne.w	r3, r3, #1
 8009b1e:	106a      	asrs	r2, r5, #1
 8009b20:	085b      	lsrs	r3, r3, #1
 8009b22:	07e9      	lsls	r1, r5, #31
 8009b24:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009b28:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009b2c:	bf48      	it	mi
 8009b2e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009b32:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009b36:	461c      	mov	r4, r3
 8009b38:	e780      	b.n	8009a3c <__ieee754_sqrt+0x30>
 8009b3a:	0aca      	lsrs	r2, r1, #11
 8009b3c:	3815      	subs	r0, #21
 8009b3e:	0549      	lsls	r1, r1, #21
 8009b40:	2a00      	cmp	r2, #0
 8009b42:	d0fa      	beq.n	8009b3a <__ieee754_sqrt+0x12e>
 8009b44:	02d6      	lsls	r6, r2, #11
 8009b46:	d50a      	bpl.n	8009b5e <__ieee754_sqrt+0x152>
 8009b48:	f1c3 0420 	rsb	r4, r3, #32
 8009b4c:	fa21 f404 	lsr.w	r4, r1, r4
 8009b50:	1e5d      	subs	r5, r3, #1
 8009b52:	4099      	lsls	r1, r3
 8009b54:	4322      	orrs	r2, r4
 8009b56:	1b43      	subs	r3, r0, r5
 8009b58:	e78b      	b.n	8009a72 <__ieee754_sqrt+0x66>
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	e7f0      	b.n	8009b40 <__ieee754_sqrt+0x134>
 8009b5e:	0052      	lsls	r2, r2, #1
 8009b60:	3301      	adds	r3, #1
 8009b62:	e7ef      	b.n	8009b44 <__ieee754_sqrt+0x138>
 8009b64:	46a0      	mov	r8, r4
 8009b66:	e7bf      	b.n	8009ae8 <__ieee754_sqrt+0xdc>
 8009b68:	7ff00000 	.word	0x7ff00000
 8009b6c:	00000000 	.word	0x00000000

08009b70 <atan>:
 8009b70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b74:	ec55 4b10 	vmov	r4, r5, d0
 8009b78:	4bc3      	ldr	r3, [pc, #780]	; (8009e88 <atan+0x318>)
 8009b7a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009b7e:	429e      	cmp	r6, r3
 8009b80:	46ab      	mov	fp, r5
 8009b82:	dd18      	ble.n	8009bb6 <atan+0x46>
 8009b84:	4bc1      	ldr	r3, [pc, #772]	; (8009e8c <atan+0x31c>)
 8009b86:	429e      	cmp	r6, r3
 8009b88:	dc01      	bgt.n	8009b8e <atan+0x1e>
 8009b8a:	d109      	bne.n	8009ba0 <atan+0x30>
 8009b8c:	b144      	cbz	r4, 8009ba0 <atan+0x30>
 8009b8e:	4622      	mov	r2, r4
 8009b90:	462b      	mov	r3, r5
 8009b92:	4620      	mov	r0, r4
 8009b94:	4629      	mov	r1, r5
 8009b96:	f7f6 fb81 	bl	800029c <__adddf3>
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	460d      	mov	r5, r1
 8009b9e:	e006      	b.n	8009bae <atan+0x3e>
 8009ba0:	f1bb 0f00 	cmp.w	fp, #0
 8009ba4:	f340 8131 	ble.w	8009e0a <atan+0x29a>
 8009ba8:	a59b      	add	r5, pc, #620	; (adr r5, 8009e18 <atan+0x2a8>)
 8009baa:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009bae:	ec45 4b10 	vmov	d0, r4, r5
 8009bb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb6:	4bb6      	ldr	r3, [pc, #728]	; (8009e90 <atan+0x320>)
 8009bb8:	429e      	cmp	r6, r3
 8009bba:	dc14      	bgt.n	8009be6 <atan+0x76>
 8009bbc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009bc0:	429e      	cmp	r6, r3
 8009bc2:	dc0d      	bgt.n	8009be0 <atan+0x70>
 8009bc4:	a396      	add	r3, pc, #600	; (adr r3, 8009e20 <atan+0x2b0>)
 8009bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bca:	ee10 0a10 	vmov	r0, s0
 8009bce:	4629      	mov	r1, r5
 8009bd0:	f7f6 fb64 	bl	800029c <__adddf3>
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	4baf      	ldr	r3, [pc, #700]	; (8009e94 <atan+0x324>)
 8009bd8:	f7f6 ffa6 	bl	8000b28 <__aeabi_dcmpgt>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d1e6      	bne.n	8009bae <atan+0x3e>
 8009be0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009be4:	e02b      	b.n	8009c3e <atan+0xce>
 8009be6:	f000 f963 	bl	8009eb0 <fabs>
 8009bea:	4bab      	ldr	r3, [pc, #684]	; (8009e98 <atan+0x328>)
 8009bec:	429e      	cmp	r6, r3
 8009bee:	ec55 4b10 	vmov	r4, r5, d0
 8009bf2:	f300 80bf 	bgt.w	8009d74 <atan+0x204>
 8009bf6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009bfa:	429e      	cmp	r6, r3
 8009bfc:	f300 80a0 	bgt.w	8009d40 <atan+0x1d0>
 8009c00:	ee10 2a10 	vmov	r2, s0
 8009c04:	ee10 0a10 	vmov	r0, s0
 8009c08:	462b      	mov	r3, r5
 8009c0a:	4629      	mov	r1, r5
 8009c0c:	f7f6 fb46 	bl	800029c <__adddf3>
 8009c10:	2200      	movs	r2, #0
 8009c12:	4ba0      	ldr	r3, [pc, #640]	; (8009e94 <atan+0x324>)
 8009c14:	f7f6 fb40 	bl	8000298 <__aeabi_dsub>
 8009c18:	2200      	movs	r2, #0
 8009c1a:	4606      	mov	r6, r0
 8009c1c:	460f      	mov	r7, r1
 8009c1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c22:	4620      	mov	r0, r4
 8009c24:	4629      	mov	r1, r5
 8009c26:	f7f6 fb39 	bl	800029c <__adddf3>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	4630      	mov	r0, r6
 8009c30:	4639      	mov	r1, r7
 8009c32:	f7f6 fe13 	bl	800085c <__aeabi_ddiv>
 8009c36:	f04f 0a00 	mov.w	sl, #0
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	460d      	mov	r5, r1
 8009c3e:	4622      	mov	r2, r4
 8009c40:	462b      	mov	r3, r5
 8009c42:	4620      	mov	r0, r4
 8009c44:	4629      	mov	r1, r5
 8009c46:	f7f6 fcdf 	bl	8000608 <__aeabi_dmul>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	4680      	mov	r8, r0
 8009c50:	4689      	mov	r9, r1
 8009c52:	f7f6 fcd9 	bl	8000608 <__aeabi_dmul>
 8009c56:	a374      	add	r3, pc, #464	; (adr r3, 8009e28 <atan+0x2b8>)
 8009c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5c:	4606      	mov	r6, r0
 8009c5e:	460f      	mov	r7, r1
 8009c60:	f7f6 fcd2 	bl	8000608 <__aeabi_dmul>
 8009c64:	a372      	add	r3, pc, #456	; (adr r3, 8009e30 <atan+0x2c0>)
 8009c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6a:	f7f6 fb17 	bl	800029c <__adddf3>
 8009c6e:	4632      	mov	r2, r6
 8009c70:	463b      	mov	r3, r7
 8009c72:	f7f6 fcc9 	bl	8000608 <__aeabi_dmul>
 8009c76:	a370      	add	r3, pc, #448	; (adr r3, 8009e38 <atan+0x2c8>)
 8009c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7c:	f7f6 fb0e 	bl	800029c <__adddf3>
 8009c80:	4632      	mov	r2, r6
 8009c82:	463b      	mov	r3, r7
 8009c84:	f7f6 fcc0 	bl	8000608 <__aeabi_dmul>
 8009c88:	a36d      	add	r3, pc, #436	; (adr r3, 8009e40 <atan+0x2d0>)
 8009c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8e:	f7f6 fb05 	bl	800029c <__adddf3>
 8009c92:	4632      	mov	r2, r6
 8009c94:	463b      	mov	r3, r7
 8009c96:	f7f6 fcb7 	bl	8000608 <__aeabi_dmul>
 8009c9a:	a36b      	add	r3, pc, #428	; (adr r3, 8009e48 <atan+0x2d8>)
 8009c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca0:	f7f6 fafc 	bl	800029c <__adddf3>
 8009ca4:	4632      	mov	r2, r6
 8009ca6:	463b      	mov	r3, r7
 8009ca8:	f7f6 fcae 	bl	8000608 <__aeabi_dmul>
 8009cac:	a368      	add	r3, pc, #416	; (adr r3, 8009e50 <atan+0x2e0>)
 8009cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb2:	f7f6 faf3 	bl	800029c <__adddf3>
 8009cb6:	4642      	mov	r2, r8
 8009cb8:	464b      	mov	r3, r9
 8009cba:	f7f6 fca5 	bl	8000608 <__aeabi_dmul>
 8009cbe:	a366      	add	r3, pc, #408	; (adr r3, 8009e58 <atan+0x2e8>)
 8009cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc4:	4680      	mov	r8, r0
 8009cc6:	4689      	mov	r9, r1
 8009cc8:	4630      	mov	r0, r6
 8009cca:	4639      	mov	r1, r7
 8009ccc:	f7f6 fc9c 	bl	8000608 <__aeabi_dmul>
 8009cd0:	a363      	add	r3, pc, #396	; (adr r3, 8009e60 <atan+0x2f0>)
 8009cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd6:	f7f6 fadf 	bl	8000298 <__aeabi_dsub>
 8009cda:	4632      	mov	r2, r6
 8009cdc:	463b      	mov	r3, r7
 8009cde:	f7f6 fc93 	bl	8000608 <__aeabi_dmul>
 8009ce2:	a361      	add	r3, pc, #388	; (adr r3, 8009e68 <atan+0x2f8>)
 8009ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce8:	f7f6 fad6 	bl	8000298 <__aeabi_dsub>
 8009cec:	4632      	mov	r2, r6
 8009cee:	463b      	mov	r3, r7
 8009cf0:	f7f6 fc8a 	bl	8000608 <__aeabi_dmul>
 8009cf4:	a35e      	add	r3, pc, #376	; (adr r3, 8009e70 <atan+0x300>)
 8009cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfa:	f7f6 facd 	bl	8000298 <__aeabi_dsub>
 8009cfe:	4632      	mov	r2, r6
 8009d00:	463b      	mov	r3, r7
 8009d02:	f7f6 fc81 	bl	8000608 <__aeabi_dmul>
 8009d06:	a35c      	add	r3, pc, #368	; (adr r3, 8009e78 <atan+0x308>)
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	f7f6 fac4 	bl	8000298 <__aeabi_dsub>
 8009d10:	4632      	mov	r2, r6
 8009d12:	463b      	mov	r3, r7
 8009d14:	f7f6 fc78 	bl	8000608 <__aeabi_dmul>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	4640      	mov	r0, r8
 8009d1e:	4649      	mov	r1, r9
 8009d20:	f7f6 fabc 	bl	800029c <__adddf3>
 8009d24:	4622      	mov	r2, r4
 8009d26:	462b      	mov	r3, r5
 8009d28:	f7f6 fc6e 	bl	8000608 <__aeabi_dmul>
 8009d2c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	d14b      	bne.n	8009dce <atan+0x25e>
 8009d36:	4620      	mov	r0, r4
 8009d38:	4629      	mov	r1, r5
 8009d3a:	f7f6 faad 	bl	8000298 <__aeabi_dsub>
 8009d3e:	e72c      	b.n	8009b9a <atan+0x2a>
 8009d40:	ee10 0a10 	vmov	r0, s0
 8009d44:	2200      	movs	r2, #0
 8009d46:	4b53      	ldr	r3, [pc, #332]	; (8009e94 <atan+0x324>)
 8009d48:	4629      	mov	r1, r5
 8009d4a:	f7f6 faa5 	bl	8000298 <__aeabi_dsub>
 8009d4e:	2200      	movs	r2, #0
 8009d50:	4606      	mov	r6, r0
 8009d52:	460f      	mov	r7, r1
 8009d54:	4b4f      	ldr	r3, [pc, #316]	; (8009e94 <atan+0x324>)
 8009d56:	4620      	mov	r0, r4
 8009d58:	4629      	mov	r1, r5
 8009d5a:	f7f6 fa9f 	bl	800029c <__adddf3>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	460b      	mov	r3, r1
 8009d62:	4630      	mov	r0, r6
 8009d64:	4639      	mov	r1, r7
 8009d66:	f7f6 fd79 	bl	800085c <__aeabi_ddiv>
 8009d6a:	f04f 0a01 	mov.w	sl, #1
 8009d6e:	4604      	mov	r4, r0
 8009d70:	460d      	mov	r5, r1
 8009d72:	e764      	b.n	8009c3e <atan+0xce>
 8009d74:	4b49      	ldr	r3, [pc, #292]	; (8009e9c <atan+0x32c>)
 8009d76:	429e      	cmp	r6, r3
 8009d78:	dc1d      	bgt.n	8009db6 <atan+0x246>
 8009d7a:	ee10 0a10 	vmov	r0, s0
 8009d7e:	2200      	movs	r2, #0
 8009d80:	4b47      	ldr	r3, [pc, #284]	; (8009ea0 <atan+0x330>)
 8009d82:	4629      	mov	r1, r5
 8009d84:	f7f6 fa88 	bl	8000298 <__aeabi_dsub>
 8009d88:	2200      	movs	r2, #0
 8009d8a:	4606      	mov	r6, r0
 8009d8c:	460f      	mov	r7, r1
 8009d8e:	4b44      	ldr	r3, [pc, #272]	; (8009ea0 <atan+0x330>)
 8009d90:	4620      	mov	r0, r4
 8009d92:	4629      	mov	r1, r5
 8009d94:	f7f6 fc38 	bl	8000608 <__aeabi_dmul>
 8009d98:	2200      	movs	r2, #0
 8009d9a:	4b3e      	ldr	r3, [pc, #248]	; (8009e94 <atan+0x324>)
 8009d9c:	f7f6 fa7e 	bl	800029c <__adddf3>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	4630      	mov	r0, r6
 8009da6:	4639      	mov	r1, r7
 8009da8:	f7f6 fd58 	bl	800085c <__aeabi_ddiv>
 8009dac:	f04f 0a02 	mov.w	sl, #2
 8009db0:	4604      	mov	r4, r0
 8009db2:	460d      	mov	r5, r1
 8009db4:	e743      	b.n	8009c3e <atan+0xce>
 8009db6:	462b      	mov	r3, r5
 8009db8:	ee10 2a10 	vmov	r2, s0
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	4939      	ldr	r1, [pc, #228]	; (8009ea4 <atan+0x334>)
 8009dc0:	f7f6 fd4c 	bl	800085c <__aeabi_ddiv>
 8009dc4:	f04f 0a03 	mov.w	sl, #3
 8009dc8:	4604      	mov	r4, r0
 8009dca:	460d      	mov	r5, r1
 8009dcc:	e737      	b.n	8009c3e <atan+0xce>
 8009dce:	4b36      	ldr	r3, [pc, #216]	; (8009ea8 <atan+0x338>)
 8009dd0:	4e36      	ldr	r6, [pc, #216]	; (8009eac <atan+0x33c>)
 8009dd2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8009dd6:	4456      	add	r6, sl
 8009dd8:	449a      	add	sl, r3
 8009dda:	e9da 2300 	ldrd	r2, r3, [sl]
 8009dde:	f7f6 fa5b 	bl	8000298 <__aeabi_dsub>
 8009de2:	4622      	mov	r2, r4
 8009de4:	462b      	mov	r3, r5
 8009de6:	f7f6 fa57 	bl	8000298 <__aeabi_dsub>
 8009dea:	4602      	mov	r2, r0
 8009dec:	460b      	mov	r3, r1
 8009dee:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009df2:	f7f6 fa51 	bl	8000298 <__aeabi_dsub>
 8009df6:	f1bb 0f00 	cmp.w	fp, #0
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	460d      	mov	r5, r1
 8009dfe:	f6bf aed6 	bge.w	8009bae <atan+0x3e>
 8009e02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e06:	461d      	mov	r5, r3
 8009e08:	e6d1      	b.n	8009bae <atan+0x3e>
 8009e0a:	a51d      	add	r5, pc, #116	; (adr r5, 8009e80 <atan+0x310>)
 8009e0c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009e10:	e6cd      	b.n	8009bae <atan+0x3e>
 8009e12:	bf00      	nop
 8009e14:	f3af 8000 	nop.w
 8009e18:	54442d18 	.word	0x54442d18
 8009e1c:	3ff921fb 	.word	0x3ff921fb
 8009e20:	8800759c 	.word	0x8800759c
 8009e24:	7e37e43c 	.word	0x7e37e43c
 8009e28:	e322da11 	.word	0xe322da11
 8009e2c:	3f90ad3a 	.word	0x3f90ad3a
 8009e30:	24760deb 	.word	0x24760deb
 8009e34:	3fa97b4b 	.word	0x3fa97b4b
 8009e38:	a0d03d51 	.word	0xa0d03d51
 8009e3c:	3fb10d66 	.word	0x3fb10d66
 8009e40:	c54c206e 	.word	0xc54c206e
 8009e44:	3fb745cd 	.word	0x3fb745cd
 8009e48:	920083ff 	.word	0x920083ff
 8009e4c:	3fc24924 	.word	0x3fc24924
 8009e50:	5555550d 	.word	0x5555550d
 8009e54:	3fd55555 	.word	0x3fd55555
 8009e58:	2c6a6c2f 	.word	0x2c6a6c2f
 8009e5c:	bfa2b444 	.word	0xbfa2b444
 8009e60:	52defd9a 	.word	0x52defd9a
 8009e64:	3fadde2d 	.word	0x3fadde2d
 8009e68:	af749a6d 	.word	0xaf749a6d
 8009e6c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009e70:	fe231671 	.word	0xfe231671
 8009e74:	3fbc71c6 	.word	0x3fbc71c6
 8009e78:	9998ebc4 	.word	0x9998ebc4
 8009e7c:	3fc99999 	.word	0x3fc99999
 8009e80:	54442d18 	.word	0x54442d18
 8009e84:	bff921fb 	.word	0xbff921fb
 8009e88:	440fffff 	.word	0x440fffff
 8009e8c:	7ff00000 	.word	0x7ff00000
 8009e90:	3fdbffff 	.word	0x3fdbffff
 8009e94:	3ff00000 	.word	0x3ff00000
 8009e98:	3ff2ffff 	.word	0x3ff2ffff
 8009e9c:	40037fff 	.word	0x40037fff
 8009ea0:	3ff80000 	.word	0x3ff80000
 8009ea4:	bff00000 	.word	0xbff00000
 8009ea8:	0800eb50 	.word	0x0800eb50
 8009eac:	0800eb30 	.word	0x0800eb30

08009eb0 <fabs>:
 8009eb0:	ec51 0b10 	vmov	r0, r1, d0
 8009eb4:	ee10 2a10 	vmov	r2, s0
 8009eb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ebc:	ec43 2b10 	vmov	d0, r2, r3
 8009ec0:	4770      	bx	lr

08009ec2 <finite>:
 8009ec2:	ee10 3a90 	vmov	r3, s1
 8009ec6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8009eca:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009ece:	0fc0      	lsrs	r0, r0, #31
 8009ed0:	4770      	bx	lr

08009ed2 <matherr>:
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	4770      	bx	lr
	...

08009ed8 <nan>:
 8009ed8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009ee0 <nan+0x8>
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	00000000 	.word	0x00000000
 8009ee4:	7ff80000 	.word	0x7ff80000

08009ee8 <rint>:
 8009ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009eea:	ec51 0b10 	vmov	r0, r1, d0
 8009eee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009ef2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009ef6:	2e13      	cmp	r6, #19
 8009ef8:	460b      	mov	r3, r1
 8009efa:	ee10 4a10 	vmov	r4, s0
 8009efe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009f02:	dc56      	bgt.n	8009fb2 <rint+0xca>
 8009f04:	2e00      	cmp	r6, #0
 8009f06:	da2b      	bge.n	8009f60 <rint+0x78>
 8009f08:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009f0c:	4302      	orrs	r2, r0
 8009f0e:	d023      	beq.n	8009f58 <rint+0x70>
 8009f10:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009f14:	4302      	orrs	r2, r0
 8009f16:	4254      	negs	r4, r2
 8009f18:	4314      	orrs	r4, r2
 8009f1a:	0c4b      	lsrs	r3, r1, #17
 8009f1c:	0b24      	lsrs	r4, r4, #12
 8009f1e:	045b      	lsls	r3, r3, #17
 8009f20:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009f24:	ea44 0103 	orr.w	r1, r4, r3
 8009f28:	460b      	mov	r3, r1
 8009f2a:	492f      	ldr	r1, [pc, #188]	; (8009fe8 <rint+0x100>)
 8009f2c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009f30:	e9d1 6700 	ldrd	r6, r7, [r1]
 8009f34:	4602      	mov	r2, r0
 8009f36:	4639      	mov	r1, r7
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f7f6 f9af 	bl	800029c <__adddf3>
 8009f3e:	e9cd 0100 	strd	r0, r1, [sp]
 8009f42:	463b      	mov	r3, r7
 8009f44:	4632      	mov	r2, r6
 8009f46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f4a:	f7f6 f9a5 	bl	8000298 <__aeabi_dsub>
 8009f4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f52:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009f56:	4639      	mov	r1, r7
 8009f58:	ec41 0b10 	vmov	d0, r0, r1
 8009f5c:	b003      	add	sp, #12
 8009f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f60:	4a22      	ldr	r2, [pc, #136]	; (8009fec <rint+0x104>)
 8009f62:	4132      	asrs	r2, r6
 8009f64:	ea01 0702 	and.w	r7, r1, r2
 8009f68:	4307      	orrs	r7, r0
 8009f6a:	d0f5      	beq.n	8009f58 <rint+0x70>
 8009f6c:	0852      	lsrs	r2, r2, #1
 8009f6e:	4011      	ands	r1, r2
 8009f70:	430c      	orrs	r4, r1
 8009f72:	d00b      	beq.n	8009f8c <rint+0xa4>
 8009f74:	ea23 0202 	bic.w	r2, r3, r2
 8009f78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009f7c:	2e13      	cmp	r6, #19
 8009f7e:	fa43 f306 	asr.w	r3, r3, r6
 8009f82:	bf0c      	ite	eq
 8009f84:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009f88:	2400      	movne	r4, #0
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	4916      	ldr	r1, [pc, #88]	; (8009fe8 <rint+0x100>)
 8009f8e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009f92:	4622      	mov	r2, r4
 8009f94:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f98:	4620      	mov	r0, r4
 8009f9a:	4629      	mov	r1, r5
 8009f9c:	f7f6 f97e 	bl	800029c <__adddf3>
 8009fa0:	e9cd 0100 	strd	r0, r1, [sp]
 8009fa4:	4622      	mov	r2, r4
 8009fa6:	462b      	mov	r3, r5
 8009fa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009fac:	f7f6 f974 	bl	8000298 <__aeabi_dsub>
 8009fb0:	e7d2      	b.n	8009f58 <rint+0x70>
 8009fb2:	2e33      	cmp	r6, #51	; 0x33
 8009fb4:	dd07      	ble.n	8009fc6 <rint+0xde>
 8009fb6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009fba:	d1cd      	bne.n	8009f58 <rint+0x70>
 8009fbc:	ee10 2a10 	vmov	r2, s0
 8009fc0:	f7f6 f96c 	bl	800029c <__adddf3>
 8009fc4:	e7c8      	b.n	8009f58 <rint+0x70>
 8009fc6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8009fca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fce:	40f2      	lsrs	r2, r6
 8009fd0:	4210      	tst	r0, r2
 8009fd2:	d0c1      	beq.n	8009f58 <rint+0x70>
 8009fd4:	0852      	lsrs	r2, r2, #1
 8009fd6:	4210      	tst	r0, r2
 8009fd8:	bf1f      	itttt	ne
 8009fda:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009fde:	ea20 0202 	bicne.w	r2, r0, r2
 8009fe2:	4134      	asrne	r4, r6
 8009fe4:	4314      	orrne	r4, r2
 8009fe6:	e7d1      	b.n	8009f8c <rint+0xa4>
 8009fe8:	0800eb70 	.word	0x0800eb70
 8009fec:	000fffff 	.word	0x000fffff

08009ff0 <scalbn>:
 8009ff0:	b570      	push	{r4, r5, r6, lr}
 8009ff2:	ec55 4b10 	vmov	r4, r5, d0
 8009ff6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009ffa:	4606      	mov	r6, r0
 8009ffc:	462b      	mov	r3, r5
 8009ffe:	b9aa      	cbnz	r2, 800a02c <scalbn+0x3c>
 800a000:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a004:	4323      	orrs	r3, r4
 800a006:	d03b      	beq.n	800a080 <scalbn+0x90>
 800a008:	4b31      	ldr	r3, [pc, #196]	; (800a0d0 <scalbn+0xe0>)
 800a00a:	4629      	mov	r1, r5
 800a00c:	2200      	movs	r2, #0
 800a00e:	ee10 0a10 	vmov	r0, s0
 800a012:	f7f6 faf9 	bl	8000608 <__aeabi_dmul>
 800a016:	4b2f      	ldr	r3, [pc, #188]	; (800a0d4 <scalbn+0xe4>)
 800a018:	429e      	cmp	r6, r3
 800a01a:	4604      	mov	r4, r0
 800a01c:	460d      	mov	r5, r1
 800a01e:	da12      	bge.n	800a046 <scalbn+0x56>
 800a020:	a327      	add	r3, pc, #156	; (adr r3, 800a0c0 <scalbn+0xd0>)
 800a022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a026:	f7f6 faef 	bl	8000608 <__aeabi_dmul>
 800a02a:	e009      	b.n	800a040 <scalbn+0x50>
 800a02c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a030:	428a      	cmp	r2, r1
 800a032:	d10c      	bne.n	800a04e <scalbn+0x5e>
 800a034:	ee10 2a10 	vmov	r2, s0
 800a038:	4620      	mov	r0, r4
 800a03a:	4629      	mov	r1, r5
 800a03c:	f7f6 f92e 	bl	800029c <__adddf3>
 800a040:	4604      	mov	r4, r0
 800a042:	460d      	mov	r5, r1
 800a044:	e01c      	b.n	800a080 <scalbn+0x90>
 800a046:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a04a:	460b      	mov	r3, r1
 800a04c:	3a36      	subs	r2, #54	; 0x36
 800a04e:	4432      	add	r2, r6
 800a050:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a054:	428a      	cmp	r2, r1
 800a056:	dd0b      	ble.n	800a070 <scalbn+0x80>
 800a058:	ec45 4b11 	vmov	d1, r4, r5
 800a05c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a0c8 <scalbn+0xd8>
 800a060:	f000 f83c 	bl	800a0dc <copysign>
 800a064:	a318      	add	r3, pc, #96	; (adr r3, 800a0c8 <scalbn+0xd8>)
 800a066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06a:	ec51 0b10 	vmov	r0, r1, d0
 800a06e:	e7da      	b.n	800a026 <scalbn+0x36>
 800a070:	2a00      	cmp	r2, #0
 800a072:	dd08      	ble.n	800a086 <scalbn+0x96>
 800a074:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a078:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a07c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a080:	ec45 4b10 	vmov	d0, r4, r5
 800a084:	bd70      	pop	{r4, r5, r6, pc}
 800a086:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a08a:	da0d      	bge.n	800a0a8 <scalbn+0xb8>
 800a08c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a090:	429e      	cmp	r6, r3
 800a092:	ec45 4b11 	vmov	d1, r4, r5
 800a096:	dce1      	bgt.n	800a05c <scalbn+0x6c>
 800a098:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a0c0 <scalbn+0xd0>
 800a09c:	f000 f81e 	bl	800a0dc <copysign>
 800a0a0:	a307      	add	r3, pc, #28	; (adr r3, 800a0c0 <scalbn+0xd0>)
 800a0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a6:	e7e0      	b.n	800a06a <scalbn+0x7a>
 800a0a8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a0ac:	3236      	adds	r2, #54	; 0x36
 800a0ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a0b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	4b06      	ldr	r3, [pc, #24]	; (800a0d8 <scalbn+0xe8>)
 800a0be:	e7b2      	b.n	800a026 <scalbn+0x36>
 800a0c0:	c2f8f359 	.word	0xc2f8f359
 800a0c4:	01a56e1f 	.word	0x01a56e1f
 800a0c8:	8800759c 	.word	0x8800759c
 800a0cc:	7e37e43c 	.word	0x7e37e43c
 800a0d0:	43500000 	.word	0x43500000
 800a0d4:	ffff3cb0 	.word	0xffff3cb0
 800a0d8:	3c900000 	.word	0x3c900000

0800a0dc <copysign>:
 800a0dc:	ec51 0b10 	vmov	r0, r1, d0
 800a0e0:	ee11 0a90 	vmov	r0, s3
 800a0e4:	ee10 2a10 	vmov	r2, s0
 800a0e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a0ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a0f0:	ea41 0300 	orr.w	r3, r1, r0
 800a0f4:	ec43 2b10 	vmov	d0, r2, r3
 800a0f8:	4770      	bx	lr
	...

0800a0fc <__errno>:
 800a0fc:	4b01      	ldr	r3, [pc, #4]	; (800a104 <__errno+0x8>)
 800a0fe:	6818      	ldr	r0, [r3, #0]
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	20000088 	.word	0x20000088

0800a108 <__libc_init_array>:
 800a108:	b570      	push	{r4, r5, r6, lr}
 800a10a:	4e0d      	ldr	r6, [pc, #52]	; (800a140 <__libc_init_array+0x38>)
 800a10c:	4c0d      	ldr	r4, [pc, #52]	; (800a144 <__libc_init_array+0x3c>)
 800a10e:	1ba4      	subs	r4, r4, r6
 800a110:	10a4      	asrs	r4, r4, #2
 800a112:	2500      	movs	r5, #0
 800a114:	42a5      	cmp	r5, r4
 800a116:	d109      	bne.n	800a12c <__libc_init_array+0x24>
 800a118:	4e0b      	ldr	r6, [pc, #44]	; (800a148 <__libc_init_array+0x40>)
 800a11a:	4c0c      	ldr	r4, [pc, #48]	; (800a14c <__libc_init_array+0x44>)
 800a11c:	f004 fa5c 	bl	800e5d8 <_init>
 800a120:	1ba4      	subs	r4, r4, r6
 800a122:	10a4      	asrs	r4, r4, #2
 800a124:	2500      	movs	r5, #0
 800a126:	42a5      	cmp	r5, r4
 800a128:	d105      	bne.n	800a136 <__libc_init_array+0x2e>
 800a12a:	bd70      	pop	{r4, r5, r6, pc}
 800a12c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a130:	4798      	blx	r3
 800a132:	3501      	adds	r5, #1
 800a134:	e7ee      	b.n	800a114 <__libc_init_array+0xc>
 800a136:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a13a:	4798      	blx	r3
 800a13c:	3501      	adds	r5, #1
 800a13e:	e7f2      	b.n	800a126 <__libc_init_array+0x1e>
 800a140:	0800eea0 	.word	0x0800eea0
 800a144:	0800eea0 	.word	0x0800eea0
 800a148:	0800eea0 	.word	0x0800eea0
 800a14c:	0800eea4 	.word	0x0800eea4

0800a150 <__locale_ctype_ptr_l>:
 800a150:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a154:	4770      	bx	lr

0800a156 <__ascii_mbtowc>:
 800a156:	b082      	sub	sp, #8
 800a158:	b901      	cbnz	r1, 800a15c <__ascii_mbtowc+0x6>
 800a15a:	a901      	add	r1, sp, #4
 800a15c:	b142      	cbz	r2, 800a170 <__ascii_mbtowc+0x1a>
 800a15e:	b14b      	cbz	r3, 800a174 <__ascii_mbtowc+0x1e>
 800a160:	7813      	ldrb	r3, [r2, #0]
 800a162:	600b      	str	r3, [r1, #0]
 800a164:	7812      	ldrb	r2, [r2, #0]
 800a166:	1c10      	adds	r0, r2, #0
 800a168:	bf18      	it	ne
 800a16a:	2001      	movne	r0, #1
 800a16c:	b002      	add	sp, #8
 800a16e:	4770      	bx	lr
 800a170:	4610      	mov	r0, r2
 800a172:	e7fb      	b.n	800a16c <__ascii_mbtowc+0x16>
 800a174:	f06f 0001 	mvn.w	r0, #1
 800a178:	e7f8      	b.n	800a16c <__ascii_mbtowc+0x16>

0800a17a <memcpy>:
 800a17a:	b510      	push	{r4, lr}
 800a17c:	1e43      	subs	r3, r0, #1
 800a17e:	440a      	add	r2, r1
 800a180:	4291      	cmp	r1, r2
 800a182:	d100      	bne.n	800a186 <memcpy+0xc>
 800a184:	bd10      	pop	{r4, pc}
 800a186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a18a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a18e:	e7f7      	b.n	800a180 <memcpy+0x6>

0800a190 <memset>:
 800a190:	4402      	add	r2, r0
 800a192:	4603      	mov	r3, r0
 800a194:	4293      	cmp	r3, r2
 800a196:	d100      	bne.n	800a19a <memset+0xa>
 800a198:	4770      	bx	lr
 800a19a:	f803 1b01 	strb.w	r1, [r3], #1
 800a19e:	e7f9      	b.n	800a194 <memset+0x4>

0800a1a0 <__cvt>:
 800a1a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a4:	ec55 4b10 	vmov	r4, r5, d0
 800a1a8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a1aa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a1ae:	2d00      	cmp	r5, #0
 800a1b0:	460e      	mov	r6, r1
 800a1b2:	4691      	mov	r9, r2
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	bfb8      	it	lt
 800a1b8:	4622      	movlt	r2, r4
 800a1ba:	462b      	mov	r3, r5
 800a1bc:	f027 0720 	bic.w	r7, r7, #32
 800a1c0:	bfbb      	ittet	lt
 800a1c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a1c6:	461d      	movlt	r5, r3
 800a1c8:	2300      	movge	r3, #0
 800a1ca:	232d      	movlt	r3, #45	; 0x2d
 800a1cc:	bfb8      	it	lt
 800a1ce:	4614      	movlt	r4, r2
 800a1d0:	2f46      	cmp	r7, #70	; 0x46
 800a1d2:	700b      	strb	r3, [r1, #0]
 800a1d4:	d004      	beq.n	800a1e0 <__cvt+0x40>
 800a1d6:	2f45      	cmp	r7, #69	; 0x45
 800a1d8:	d100      	bne.n	800a1dc <__cvt+0x3c>
 800a1da:	3601      	adds	r6, #1
 800a1dc:	2102      	movs	r1, #2
 800a1de:	e000      	b.n	800a1e2 <__cvt+0x42>
 800a1e0:	2103      	movs	r1, #3
 800a1e2:	ab03      	add	r3, sp, #12
 800a1e4:	9301      	str	r3, [sp, #4]
 800a1e6:	ab02      	add	r3, sp, #8
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	4632      	mov	r2, r6
 800a1ec:	4653      	mov	r3, sl
 800a1ee:	ec45 4b10 	vmov	d0, r4, r5
 800a1f2:	f001 febd 	bl	800bf70 <_dtoa_r>
 800a1f6:	2f47      	cmp	r7, #71	; 0x47
 800a1f8:	4680      	mov	r8, r0
 800a1fa:	d102      	bne.n	800a202 <__cvt+0x62>
 800a1fc:	f019 0f01 	tst.w	r9, #1
 800a200:	d026      	beq.n	800a250 <__cvt+0xb0>
 800a202:	2f46      	cmp	r7, #70	; 0x46
 800a204:	eb08 0906 	add.w	r9, r8, r6
 800a208:	d111      	bne.n	800a22e <__cvt+0x8e>
 800a20a:	f898 3000 	ldrb.w	r3, [r8]
 800a20e:	2b30      	cmp	r3, #48	; 0x30
 800a210:	d10a      	bne.n	800a228 <__cvt+0x88>
 800a212:	2200      	movs	r2, #0
 800a214:	2300      	movs	r3, #0
 800a216:	4620      	mov	r0, r4
 800a218:	4629      	mov	r1, r5
 800a21a:	f7f6 fc5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a21e:	b918      	cbnz	r0, 800a228 <__cvt+0x88>
 800a220:	f1c6 0601 	rsb	r6, r6, #1
 800a224:	f8ca 6000 	str.w	r6, [sl]
 800a228:	f8da 3000 	ldr.w	r3, [sl]
 800a22c:	4499      	add	r9, r3
 800a22e:	2200      	movs	r2, #0
 800a230:	2300      	movs	r3, #0
 800a232:	4620      	mov	r0, r4
 800a234:	4629      	mov	r1, r5
 800a236:	f7f6 fc4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a23a:	b938      	cbnz	r0, 800a24c <__cvt+0xac>
 800a23c:	2230      	movs	r2, #48	; 0x30
 800a23e:	9b03      	ldr	r3, [sp, #12]
 800a240:	454b      	cmp	r3, r9
 800a242:	d205      	bcs.n	800a250 <__cvt+0xb0>
 800a244:	1c59      	adds	r1, r3, #1
 800a246:	9103      	str	r1, [sp, #12]
 800a248:	701a      	strb	r2, [r3, #0]
 800a24a:	e7f8      	b.n	800a23e <__cvt+0x9e>
 800a24c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a250:	9b03      	ldr	r3, [sp, #12]
 800a252:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a254:	eba3 0308 	sub.w	r3, r3, r8
 800a258:	4640      	mov	r0, r8
 800a25a:	6013      	str	r3, [r2, #0]
 800a25c:	b004      	add	sp, #16
 800a25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a262 <__exponent>:
 800a262:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a264:	2900      	cmp	r1, #0
 800a266:	4604      	mov	r4, r0
 800a268:	bfba      	itte	lt
 800a26a:	4249      	neglt	r1, r1
 800a26c:	232d      	movlt	r3, #45	; 0x2d
 800a26e:	232b      	movge	r3, #43	; 0x2b
 800a270:	2909      	cmp	r1, #9
 800a272:	f804 2b02 	strb.w	r2, [r4], #2
 800a276:	7043      	strb	r3, [r0, #1]
 800a278:	dd20      	ble.n	800a2bc <__exponent+0x5a>
 800a27a:	f10d 0307 	add.w	r3, sp, #7
 800a27e:	461f      	mov	r7, r3
 800a280:	260a      	movs	r6, #10
 800a282:	fb91 f5f6 	sdiv	r5, r1, r6
 800a286:	fb06 1115 	mls	r1, r6, r5, r1
 800a28a:	3130      	adds	r1, #48	; 0x30
 800a28c:	2d09      	cmp	r5, #9
 800a28e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a292:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800a296:	4629      	mov	r1, r5
 800a298:	dc09      	bgt.n	800a2ae <__exponent+0x4c>
 800a29a:	3130      	adds	r1, #48	; 0x30
 800a29c:	3b02      	subs	r3, #2
 800a29e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a2a2:	42bb      	cmp	r3, r7
 800a2a4:	4622      	mov	r2, r4
 800a2a6:	d304      	bcc.n	800a2b2 <__exponent+0x50>
 800a2a8:	1a10      	subs	r0, r2, r0
 800a2aa:	b003      	add	sp, #12
 800a2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	e7e7      	b.n	800a282 <__exponent+0x20>
 800a2b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2b6:	f804 2b01 	strb.w	r2, [r4], #1
 800a2ba:	e7f2      	b.n	800a2a2 <__exponent+0x40>
 800a2bc:	2330      	movs	r3, #48	; 0x30
 800a2be:	4419      	add	r1, r3
 800a2c0:	7083      	strb	r3, [r0, #2]
 800a2c2:	1d02      	adds	r2, r0, #4
 800a2c4:	70c1      	strb	r1, [r0, #3]
 800a2c6:	e7ef      	b.n	800a2a8 <__exponent+0x46>

0800a2c8 <_printf_float>:
 800a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2cc:	b08d      	sub	sp, #52	; 0x34
 800a2ce:	460c      	mov	r4, r1
 800a2d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a2d4:	4616      	mov	r6, r2
 800a2d6:	461f      	mov	r7, r3
 800a2d8:	4605      	mov	r5, r0
 800a2da:	f003 f8a3 	bl	800d424 <_localeconv_r>
 800a2de:	6803      	ldr	r3, [r0, #0]
 800a2e0:	9304      	str	r3, [sp, #16]
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7f5 ff7c 	bl	80001e0 <strlen>
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a2ec:	f8d8 3000 	ldr.w	r3, [r8]
 800a2f0:	9005      	str	r0, [sp, #20]
 800a2f2:	3307      	adds	r3, #7
 800a2f4:	f023 0307 	bic.w	r3, r3, #7
 800a2f8:	f103 0208 	add.w	r2, r3, #8
 800a2fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a300:	f8d4 b000 	ldr.w	fp, [r4]
 800a304:	f8c8 2000 	str.w	r2, [r8]
 800a308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a310:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a314:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a318:	9307      	str	r3, [sp, #28]
 800a31a:	f8cd 8018 	str.w	r8, [sp, #24]
 800a31e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a322:	4ba7      	ldr	r3, [pc, #668]	; (800a5c0 <_printf_float+0x2f8>)
 800a324:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a328:	f7f6 fc08 	bl	8000b3c <__aeabi_dcmpun>
 800a32c:	bb70      	cbnz	r0, 800a38c <_printf_float+0xc4>
 800a32e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a332:	4ba3      	ldr	r3, [pc, #652]	; (800a5c0 <_printf_float+0x2f8>)
 800a334:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a338:	f7f6 fbe2 	bl	8000b00 <__aeabi_dcmple>
 800a33c:	bb30      	cbnz	r0, 800a38c <_printf_float+0xc4>
 800a33e:	2200      	movs	r2, #0
 800a340:	2300      	movs	r3, #0
 800a342:	4640      	mov	r0, r8
 800a344:	4649      	mov	r1, r9
 800a346:	f7f6 fbd1 	bl	8000aec <__aeabi_dcmplt>
 800a34a:	b110      	cbz	r0, 800a352 <_printf_float+0x8a>
 800a34c:	232d      	movs	r3, #45	; 0x2d
 800a34e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a352:	4a9c      	ldr	r2, [pc, #624]	; (800a5c4 <_printf_float+0x2fc>)
 800a354:	4b9c      	ldr	r3, [pc, #624]	; (800a5c8 <_printf_float+0x300>)
 800a356:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a35a:	bf8c      	ite	hi
 800a35c:	4690      	movhi	r8, r2
 800a35e:	4698      	movls	r8, r3
 800a360:	2303      	movs	r3, #3
 800a362:	f02b 0204 	bic.w	r2, fp, #4
 800a366:	6123      	str	r3, [r4, #16]
 800a368:	6022      	str	r2, [r4, #0]
 800a36a:	f04f 0900 	mov.w	r9, #0
 800a36e:	9700      	str	r7, [sp, #0]
 800a370:	4633      	mov	r3, r6
 800a372:	aa0b      	add	r2, sp, #44	; 0x2c
 800a374:	4621      	mov	r1, r4
 800a376:	4628      	mov	r0, r5
 800a378:	f000 f9e6 	bl	800a748 <_printf_common>
 800a37c:	3001      	adds	r0, #1
 800a37e:	f040 808d 	bne.w	800a49c <_printf_float+0x1d4>
 800a382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a386:	b00d      	add	sp, #52	; 0x34
 800a388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a38c:	4642      	mov	r2, r8
 800a38e:	464b      	mov	r3, r9
 800a390:	4640      	mov	r0, r8
 800a392:	4649      	mov	r1, r9
 800a394:	f7f6 fbd2 	bl	8000b3c <__aeabi_dcmpun>
 800a398:	b110      	cbz	r0, 800a3a0 <_printf_float+0xd8>
 800a39a:	4a8c      	ldr	r2, [pc, #560]	; (800a5cc <_printf_float+0x304>)
 800a39c:	4b8c      	ldr	r3, [pc, #560]	; (800a5d0 <_printf_float+0x308>)
 800a39e:	e7da      	b.n	800a356 <_printf_float+0x8e>
 800a3a0:	6861      	ldr	r1, [r4, #4]
 800a3a2:	1c4b      	adds	r3, r1, #1
 800a3a4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a3a8:	a80a      	add	r0, sp, #40	; 0x28
 800a3aa:	d13e      	bne.n	800a42a <_printf_float+0x162>
 800a3ac:	2306      	movs	r3, #6
 800a3ae:	6063      	str	r3, [r4, #4]
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a3b6:	ab09      	add	r3, sp, #36	; 0x24
 800a3b8:	9300      	str	r3, [sp, #0]
 800a3ba:	ec49 8b10 	vmov	d0, r8, r9
 800a3be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a3c2:	6022      	str	r2, [r4, #0]
 800a3c4:	f8cd a004 	str.w	sl, [sp, #4]
 800a3c8:	6861      	ldr	r1, [r4, #4]
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f7ff fee8 	bl	800a1a0 <__cvt>
 800a3d0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a3d4:	2b47      	cmp	r3, #71	; 0x47
 800a3d6:	4680      	mov	r8, r0
 800a3d8:	d109      	bne.n	800a3ee <_printf_float+0x126>
 800a3da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3dc:	1cd8      	adds	r0, r3, #3
 800a3de:	db02      	blt.n	800a3e6 <_printf_float+0x11e>
 800a3e0:	6862      	ldr	r2, [r4, #4]
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	dd47      	ble.n	800a476 <_printf_float+0x1ae>
 800a3e6:	f1aa 0a02 	sub.w	sl, sl, #2
 800a3ea:	fa5f fa8a 	uxtb.w	sl, sl
 800a3ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a3f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3f4:	d824      	bhi.n	800a440 <_printf_float+0x178>
 800a3f6:	3901      	subs	r1, #1
 800a3f8:	4652      	mov	r2, sl
 800a3fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a3fe:	9109      	str	r1, [sp, #36]	; 0x24
 800a400:	f7ff ff2f 	bl	800a262 <__exponent>
 800a404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a406:	1813      	adds	r3, r2, r0
 800a408:	2a01      	cmp	r2, #1
 800a40a:	4681      	mov	r9, r0
 800a40c:	6123      	str	r3, [r4, #16]
 800a40e:	dc02      	bgt.n	800a416 <_printf_float+0x14e>
 800a410:	6822      	ldr	r2, [r4, #0]
 800a412:	07d1      	lsls	r1, r2, #31
 800a414:	d501      	bpl.n	800a41a <_printf_float+0x152>
 800a416:	3301      	adds	r3, #1
 800a418:	6123      	str	r3, [r4, #16]
 800a41a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d0a5      	beq.n	800a36e <_printf_float+0xa6>
 800a422:	232d      	movs	r3, #45	; 0x2d
 800a424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a428:	e7a1      	b.n	800a36e <_printf_float+0xa6>
 800a42a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a42e:	f000 8177 	beq.w	800a720 <_printf_float+0x458>
 800a432:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a436:	d1bb      	bne.n	800a3b0 <_printf_float+0xe8>
 800a438:	2900      	cmp	r1, #0
 800a43a:	d1b9      	bne.n	800a3b0 <_printf_float+0xe8>
 800a43c:	2301      	movs	r3, #1
 800a43e:	e7b6      	b.n	800a3ae <_printf_float+0xe6>
 800a440:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a444:	d119      	bne.n	800a47a <_printf_float+0x1b2>
 800a446:	2900      	cmp	r1, #0
 800a448:	6863      	ldr	r3, [r4, #4]
 800a44a:	dd0c      	ble.n	800a466 <_printf_float+0x19e>
 800a44c:	6121      	str	r1, [r4, #16]
 800a44e:	b913      	cbnz	r3, 800a456 <_printf_float+0x18e>
 800a450:	6822      	ldr	r2, [r4, #0]
 800a452:	07d2      	lsls	r2, r2, #31
 800a454:	d502      	bpl.n	800a45c <_printf_float+0x194>
 800a456:	3301      	adds	r3, #1
 800a458:	440b      	add	r3, r1
 800a45a:	6123      	str	r3, [r4, #16]
 800a45c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a45e:	65a3      	str	r3, [r4, #88]	; 0x58
 800a460:	f04f 0900 	mov.w	r9, #0
 800a464:	e7d9      	b.n	800a41a <_printf_float+0x152>
 800a466:	b913      	cbnz	r3, 800a46e <_printf_float+0x1a6>
 800a468:	6822      	ldr	r2, [r4, #0]
 800a46a:	07d0      	lsls	r0, r2, #31
 800a46c:	d501      	bpl.n	800a472 <_printf_float+0x1aa>
 800a46e:	3302      	adds	r3, #2
 800a470:	e7f3      	b.n	800a45a <_printf_float+0x192>
 800a472:	2301      	movs	r3, #1
 800a474:	e7f1      	b.n	800a45a <_printf_float+0x192>
 800a476:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a47a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a47e:	4293      	cmp	r3, r2
 800a480:	db05      	blt.n	800a48e <_printf_float+0x1c6>
 800a482:	6822      	ldr	r2, [r4, #0]
 800a484:	6123      	str	r3, [r4, #16]
 800a486:	07d1      	lsls	r1, r2, #31
 800a488:	d5e8      	bpl.n	800a45c <_printf_float+0x194>
 800a48a:	3301      	adds	r3, #1
 800a48c:	e7e5      	b.n	800a45a <_printf_float+0x192>
 800a48e:	2b00      	cmp	r3, #0
 800a490:	bfd4      	ite	le
 800a492:	f1c3 0302 	rsble	r3, r3, #2
 800a496:	2301      	movgt	r3, #1
 800a498:	4413      	add	r3, r2
 800a49a:	e7de      	b.n	800a45a <_printf_float+0x192>
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	055a      	lsls	r2, r3, #21
 800a4a0:	d407      	bmi.n	800a4b2 <_printf_float+0x1ea>
 800a4a2:	6923      	ldr	r3, [r4, #16]
 800a4a4:	4642      	mov	r2, r8
 800a4a6:	4631      	mov	r1, r6
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	47b8      	blx	r7
 800a4ac:	3001      	adds	r0, #1
 800a4ae:	d12b      	bne.n	800a508 <_printf_float+0x240>
 800a4b0:	e767      	b.n	800a382 <_printf_float+0xba>
 800a4b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a4b6:	f240 80dc 	bls.w	800a672 <_printf_float+0x3aa>
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	2300      	movs	r3, #0
 800a4be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a4c2:	f7f6 fb09 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d033      	beq.n	800a532 <_printf_float+0x26a>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	4a41      	ldr	r2, [pc, #260]	; (800a5d4 <_printf_float+0x30c>)
 800a4ce:	4631      	mov	r1, r6
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	47b8      	blx	r7
 800a4d4:	3001      	adds	r0, #1
 800a4d6:	f43f af54 	beq.w	800a382 <_printf_float+0xba>
 800a4da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	db02      	blt.n	800a4e8 <_printf_float+0x220>
 800a4e2:	6823      	ldr	r3, [r4, #0]
 800a4e4:	07d8      	lsls	r0, r3, #31
 800a4e6:	d50f      	bpl.n	800a508 <_printf_float+0x240>
 800a4e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4ec:	4631      	mov	r1, r6
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	47b8      	blx	r7
 800a4f2:	3001      	adds	r0, #1
 800a4f4:	f43f af45 	beq.w	800a382 <_printf_float+0xba>
 800a4f8:	f04f 0800 	mov.w	r8, #0
 800a4fc:	f104 091a 	add.w	r9, r4, #26
 800a500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a502:	3b01      	subs	r3, #1
 800a504:	4543      	cmp	r3, r8
 800a506:	dc09      	bgt.n	800a51c <_printf_float+0x254>
 800a508:	6823      	ldr	r3, [r4, #0]
 800a50a:	079b      	lsls	r3, r3, #30
 800a50c:	f100 8103 	bmi.w	800a716 <_printf_float+0x44e>
 800a510:	68e0      	ldr	r0, [r4, #12]
 800a512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a514:	4298      	cmp	r0, r3
 800a516:	bfb8      	it	lt
 800a518:	4618      	movlt	r0, r3
 800a51a:	e734      	b.n	800a386 <_printf_float+0xbe>
 800a51c:	2301      	movs	r3, #1
 800a51e:	464a      	mov	r2, r9
 800a520:	4631      	mov	r1, r6
 800a522:	4628      	mov	r0, r5
 800a524:	47b8      	blx	r7
 800a526:	3001      	adds	r0, #1
 800a528:	f43f af2b 	beq.w	800a382 <_printf_float+0xba>
 800a52c:	f108 0801 	add.w	r8, r8, #1
 800a530:	e7e6      	b.n	800a500 <_printf_float+0x238>
 800a532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a534:	2b00      	cmp	r3, #0
 800a536:	dc2b      	bgt.n	800a590 <_printf_float+0x2c8>
 800a538:	2301      	movs	r3, #1
 800a53a:	4a26      	ldr	r2, [pc, #152]	; (800a5d4 <_printf_float+0x30c>)
 800a53c:	4631      	mov	r1, r6
 800a53e:	4628      	mov	r0, r5
 800a540:	47b8      	blx	r7
 800a542:	3001      	adds	r0, #1
 800a544:	f43f af1d 	beq.w	800a382 <_printf_float+0xba>
 800a548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a54a:	b923      	cbnz	r3, 800a556 <_printf_float+0x28e>
 800a54c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a54e:	b913      	cbnz	r3, 800a556 <_printf_float+0x28e>
 800a550:	6823      	ldr	r3, [r4, #0]
 800a552:	07d9      	lsls	r1, r3, #31
 800a554:	d5d8      	bpl.n	800a508 <_printf_float+0x240>
 800a556:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a55a:	4631      	mov	r1, r6
 800a55c:	4628      	mov	r0, r5
 800a55e:	47b8      	blx	r7
 800a560:	3001      	adds	r0, #1
 800a562:	f43f af0e 	beq.w	800a382 <_printf_float+0xba>
 800a566:	f04f 0900 	mov.w	r9, #0
 800a56a:	f104 0a1a 	add.w	sl, r4, #26
 800a56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a570:	425b      	negs	r3, r3
 800a572:	454b      	cmp	r3, r9
 800a574:	dc01      	bgt.n	800a57a <_printf_float+0x2b2>
 800a576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a578:	e794      	b.n	800a4a4 <_printf_float+0x1dc>
 800a57a:	2301      	movs	r3, #1
 800a57c:	4652      	mov	r2, sl
 800a57e:	4631      	mov	r1, r6
 800a580:	4628      	mov	r0, r5
 800a582:	47b8      	blx	r7
 800a584:	3001      	adds	r0, #1
 800a586:	f43f aefc 	beq.w	800a382 <_printf_float+0xba>
 800a58a:	f109 0901 	add.w	r9, r9, #1
 800a58e:	e7ee      	b.n	800a56e <_printf_float+0x2a6>
 800a590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a592:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a594:	429a      	cmp	r2, r3
 800a596:	bfa8      	it	ge
 800a598:	461a      	movge	r2, r3
 800a59a:	2a00      	cmp	r2, #0
 800a59c:	4691      	mov	r9, r2
 800a59e:	dd07      	ble.n	800a5b0 <_printf_float+0x2e8>
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	4631      	mov	r1, r6
 800a5a4:	4642      	mov	r2, r8
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	47b8      	blx	r7
 800a5aa:	3001      	adds	r0, #1
 800a5ac:	f43f aee9 	beq.w	800a382 <_printf_float+0xba>
 800a5b0:	f104 031a 	add.w	r3, r4, #26
 800a5b4:	f04f 0b00 	mov.w	fp, #0
 800a5b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5bc:	9306      	str	r3, [sp, #24]
 800a5be:	e015      	b.n	800a5ec <_printf_float+0x324>
 800a5c0:	7fefffff 	.word	0x7fefffff
 800a5c4:	0800eb92 	.word	0x0800eb92
 800a5c8:	0800eb8e 	.word	0x0800eb8e
 800a5cc:	0800eb9a 	.word	0x0800eb9a
 800a5d0:	0800eb96 	.word	0x0800eb96
 800a5d4:	0800eb9e 	.word	0x0800eb9e
 800a5d8:	2301      	movs	r3, #1
 800a5da:	9a06      	ldr	r2, [sp, #24]
 800a5dc:	4631      	mov	r1, r6
 800a5de:	4628      	mov	r0, r5
 800a5e0:	47b8      	blx	r7
 800a5e2:	3001      	adds	r0, #1
 800a5e4:	f43f aecd 	beq.w	800a382 <_printf_float+0xba>
 800a5e8:	f10b 0b01 	add.w	fp, fp, #1
 800a5ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a5f0:	ebaa 0309 	sub.w	r3, sl, r9
 800a5f4:	455b      	cmp	r3, fp
 800a5f6:	dcef      	bgt.n	800a5d8 <_printf_float+0x310>
 800a5f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	44d0      	add	r8, sl
 800a600:	db15      	blt.n	800a62e <_printf_float+0x366>
 800a602:	6823      	ldr	r3, [r4, #0]
 800a604:	07da      	lsls	r2, r3, #31
 800a606:	d412      	bmi.n	800a62e <_printf_float+0x366>
 800a608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a60a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a60c:	eba3 020a 	sub.w	r2, r3, sl
 800a610:	eba3 0a01 	sub.w	sl, r3, r1
 800a614:	4592      	cmp	sl, r2
 800a616:	bfa8      	it	ge
 800a618:	4692      	movge	sl, r2
 800a61a:	f1ba 0f00 	cmp.w	sl, #0
 800a61e:	dc0e      	bgt.n	800a63e <_printf_float+0x376>
 800a620:	f04f 0800 	mov.w	r8, #0
 800a624:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a628:	f104 091a 	add.w	r9, r4, #26
 800a62c:	e019      	b.n	800a662 <_printf_float+0x39a>
 800a62e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a632:	4631      	mov	r1, r6
 800a634:	4628      	mov	r0, r5
 800a636:	47b8      	blx	r7
 800a638:	3001      	adds	r0, #1
 800a63a:	d1e5      	bne.n	800a608 <_printf_float+0x340>
 800a63c:	e6a1      	b.n	800a382 <_printf_float+0xba>
 800a63e:	4653      	mov	r3, sl
 800a640:	4642      	mov	r2, r8
 800a642:	4631      	mov	r1, r6
 800a644:	4628      	mov	r0, r5
 800a646:	47b8      	blx	r7
 800a648:	3001      	adds	r0, #1
 800a64a:	d1e9      	bne.n	800a620 <_printf_float+0x358>
 800a64c:	e699      	b.n	800a382 <_printf_float+0xba>
 800a64e:	2301      	movs	r3, #1
 800a650:	464a      	mov	r2, r9
 800a652:	4631      	mov	r1, r6
 800a654:	4628      	mov	r0, r5
 800a656:	47b8      	blx	r7
 800a658:	3001      	adds	r0, #1
 800a65a:	f43f ae92 	beq.w	800a382 <_printf_float+0xba>
 800a65e:	f108 0801 	add.w	r8, r8, #1
 800a662:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a666:	1a9b      	subs	r3, r3, r2
 800a668:	eba3 030a 	sub.w	r3, r3, sl
 800a66c:	4543      	cmp	r3, r8
 800a66e:	dcee      	bgt.n	800a64e <_printf_float+0x386>
 800a670:	e74a      	b.n	800a508 <_printf_float+0x240>
 800a672:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a674:	2a01      	cmp	r2, #1
 800a676:	dc01      	bgt.n	800a67c <_printf_float+0x3b4>
 800a678:	07db      	lsls	r3, r3, #31
 800a67a:	d53a      	bpl.n	800a6f2 <_printf_float+0x42a>
 800a67c:	2301      	movs	r3, #1
 800a67e:	4642      	mov	r2, r8
 800a680:	4631      	mov	r1, r6
 800a682:	4628      	mov	r0, r5
 800a684:	47b8      	blx	r7
 800a686:	3001      	adds	r0, #1
 800a688:	f43f ae7b 	beq.w	800a382 <_printf_float+0xba>
 800a68c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a690:	4631      	mov	r1, r6
 800a692:	4628      	mov	r0, r5
 800a694:	47b8      	blx	r7
 800a696:	3001      	adds	r0, #1
 800a698:	f108 0801 	add.w	r8, r8, #1
 800a69c:	f43f ae71 	beq.w	800a382 <_printf_float+0xba>
 800a6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800a6a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f7f6 fa13 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6b2:	b9c8      	cbnz	r0, 800a6e8 <_printf_float+0x420>
 800a6b4:	4653      	mov	r3, sl
 800a6b6:	4642      	mov	r2, r8
 800a6b8:	4631      	mov	r1, r6
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	47b8      	blx	r7
 800a6be:	3001      	adds	r0, #1
 800a6c0:	d10e      	bne.n	800a6e0 <_printf_float+0x418>
 800a6c2:	e65e      	b.n	800a382 <_printf_float+0xba>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	4652      	mov	r2, sl
 800a6c8:	4631      	mov	r1, r6
 800a6ca:	4628      	mov	r0, r5
 800a6cc:	47b8      	blx	r7
 800a6ce:	3001      	adds	r0, #1
 800a6d0:	f43f ae57 	beq.w	800a382 <_printf_float+0xba>
 800a6d4:	f108 0801 	add.w	r8, r8, #1
 800a6d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	4543      	cmp	r3, r8
 800a6de:	dcf1      	bgt.n	800a6c4 <_printf_float+0x3fc>
 800a6e0:	464b      	mov	r3, r9
 800a6e2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a6e6:	e6de      	b.n	800a4a6 <_printf_float+0x1de>
 800a6e8:	f04f 0800 	mov.w	r8, #0
 800a6ec:	f104 0a1a 	add.w	sl, r4, #26
 800a6f0:	e7f2      	b.n	800a6d8 <_printf_float+0x410>
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e7df      	b.n	800a6b6 <_printf_float+0x3ee>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	464a      	mov	r2, r9
 800a6fa:	4631      	mov	r1, r6
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	47b8      	blx	r7
 800a700:	3001      	adds	r0, #1
 800a702:	f43f ae3e 	beq.w	800a382 <_printf_float+0xba>
 800a706:	f108 0801 	add.w	r8, r8, #1
 800a70a:	68e3      	ldr	r3, [r4, #12]
 800a70c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a70e:	1a9b      	subs	r3, r3, r2
 800a710:	4543      	cmp	r3, r8
 800a712:	dcf0      	bgt.n	800a6f6 <_printf_float+0x42e>
 800a714:	e6fc      	b.n	800a510 <_printf_float+0x248>
 800a716:	f04f 0800 	mov.w	r8, #0
 800a71a:	f104 0919 	add.w	r9, r4, #25
 800a71e:	e7f4      	b.n	800a70a <_printf_float+0x442>
 800a720:	2900      	cmp	r1, #0
 800a722:	f43f ae8b 	beq.w	800a43c <_printf_float+0x174>
 800a726:	2300      	movs	r3, #0
 800a728:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a72c:	ab09      	add	r3, sp, #36	; 0x24
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	ec49 8b10 	vmov	d0, r8, r9
 800a734:	6022      	str	r2, [r4, #0]
 800a736:	f8cd a004 	str.w	sl, [sp, #4]
 800a73a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a73e:	4628      	mov	r0, r5
 800a740:	f7ff fd2e 	bl	800a1a0 <__cvt>
 800a744:	4680      	mov	r8, r0
 800a746:	e648      	b.n	800a3da <_printf_float+0x112>

0800a748 <_printf_common>:
 800a748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a74c:	4691      	mov	r9, r2
 800a74e:	461f      	mov	r7, r3
 800a750:	688a      	ldr	r2, [r1, #8]
 800a752:	690b      	ldr	r3, [r1, #16]
 800a754:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a758:	4293      	cmp	r3, r2
 800a75a:	bfb8      	it	lt
 800a75c:	4613      	movlt	r3, r2
 800a75e:	f8c9 3000 	str.w	r3, [r9]
 800a762:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a766:	4606      	mov	r6, r0
 800a768:	460c      	mov	r4, r1
 800a76a:	b112      	cbz	r2, 800a772 <_printf_common+0x2a>
 800a76c:	3301      	adds	r3, #1
 800a76e:	f8c9 3000 	str.w	r3, [r9]
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	0699      	lsls	r1, r3, #26
 800a776:	bf42      	ittt	mi
 800a778:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a77c:	3302      	addmi	r3, #2
 800a77e:	f8c9 3000 	strmi.w	r3, [r9]
 800a782:	6825      	ldr	r5, [r4, #0]
 800a784:	f015 0506 	ands.w	r5, r5, #6
 800a788:	d107      	bne.n	800a79a <_printf_common+0x52>
 800a78a:	f104 0a19 	add.w	sl, r4, #25
 800a78e:	68e3      	ldr	r3, [r4, #12]
 800a790:	f8d9 2000 	ldr.w	r2, [r9]
 800a794:	1a9b      	subs	r3, r3, r2
 800a796:	42ab      	cmp	r3, r5
 800a798:	dc28      	bgt.n	800a7ec <_printf_common+0xa4>
 800a79a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a79e:	6822      	ldr	r2, [r4, #0]
 800a7a0:	3300      	adds	r3, #0
 800a7a2:	bf18      	it	ne
 800a7a4:	2301      	movne	r3, #1
 800a7a6:	0692      	lsls	r2, r2, #26
 800a7a8:	d42d      	bmi.n	800a806 <_printf_common+0xbe>
 800a7aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7ae:	4639      	mov	r1, r7
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	47c0      	blx	r8
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	d020      	beq.n	800a7fa <_printf_common+0xb2>
 800a7b8:	6823      	ldr	r3, [r4, #0]
 800a7ba:	68e5      	ldr	r5, [r4, #12]
 800a7bc:	f8d9 2000 	ldr.w	r2, [r9]
 800a7c0:	f003 0306 	and.w	r3, r3, #6
 800a7c4:	2b04      	cmp	r3, #4
 800a7c6:	bf08      	it	eq
 800a7c8:	1aad      	subeq	r5, r5, r2
 800a7ca:	68a3      	ldr	r3, [r4, #8]
 800a7cc:	6922      	ldr	r2, [r4, #16]
 800a7ce:	bf0c      	ite	eq
 800a7d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7d4:	2500      	movne	r5, #0
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	bfc4      	itt	gt
 800a7da:	1a9b      	subgt	r3, r3, r2
 800a7dc:	18ed      	addgt	r5, r5, r3
 800a7de:	f04f 0900 	mov.w	r9, #0
 800a7e2:	341a      	adds	r4, #26
 800a7e4:	454d      	cmp	r5, r9
 800a7e6:	d11a      	bne.n	800a81e <_printf_common+0xd6>
 800a7e8:	2000      	movs	r0, #0
 800a7ea:	e008      	b.n	800a7fe <_printf_common+0xb6>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	4652      	mov	r2, sl
 800a7f0:	4639      	mov	r1, r7
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	47c0      	blx	r8
 800a7f6:	3001      	adds	r0, #1
 800a7f8:	d103      	bne.n	800a802 <_printf_common+0xba>
 800a7fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a802:	3501      	adds	r5, #1
 800a804:	e7c3      	b.n	800a78e <_printf_common+0x46>
 800a806:	18e1      	adds	r1, r4, r3
 800a808:	1c5a      	adds	r2, r3, #1
 800a80a:	2030      	movs	r0, #48	; 0x30
 800a80c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a810:	4422      	add	r2, r4
 800a812:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a816:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a81a:	3302      	adds	r3, #2
 800a81c:	e7c5      	b.n	800a7aa <_printf_common+0x62>
 800a81e:	2301      	movs	r3, #1
 800a820:	4622      	mov	r2, r4
 800a822:	4639      	mov	r1, r7
 800a824:	4630      	mov	r0, r6
 800a826:	47c0      	blx	r8
 800a828:	3001      	adds	r0, #1
 800a82a:	d0e6      	beq.n	800a7fa <_printf_common+0xb2>
 800a82c:	f109 0901 	add.w	r9, r9, #1
 800a830:	e7d8      	b.n	800a7e4 <_printf_common+0x9c>
	...

0800a834 <_printf_i>:
 800a834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a838:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a83c:	460c      	mov	r4, r1
 800a83e:	7e09      	ldrb	r1, [r1, #24]
 800a840:	b085      	sub	sp, #20
 800a842:	296e      	cmp	r1, #110	; 0x6e
 800a844:	4617      	mov	r7, r2
 800a846:	4606      	mov	r6, r0
 800a848:	4698      	mov	r8, r3
 800a84a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a84c:	f000 80b3 	beq.w	800a9b6 <_printf_i+0x182>
 800a850:	d822      	bhi.n	800a898 <_printf_i+0x64>
 800a852:	2963      	cmp	r1, #99	; 0x63
 800a854:	d036      	beq.n	800a8c4 <_printf_i+0x90>
 800a856:	d80a      	bhi.n	800a86e <_printf_i+0x3a>
 800a858:	2900      	cmp	r1, #0
 800a85a:	f000 80b9 	beq.w	800a9d0 <_printf_i+0x19c>
 800a85e:	2958      	cmp	r1, #88	; 0x58
 800a860:	f000 8083 	beq.w	800a96a <_printf_i+0x136>
 800a864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a868:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a86c:	e032      	b.n	800a8d4 <_printf_i+0xa0>
 800a86e:	2964      	cmp	r1, #100	; 0x64
 800a870:	d001      	beq.n	800a876 <_printf_i+0x42>
 800a872:	2969      	cmp	r1, #105	; 0x69
 800a874:	d1f6      	bne.n	800a864 <_printf_i+0x30>
 800a876:	6820      	ldr	r0, [r4, #0]
 800a878:	6813      	ldr	r3, [r2, #0]
 800a87a:	0605      	lsls	r5, r0, #24
 800a87c:	f103 0104 	add.w	r1, r3, #4
 800a880:	d52a      	bpl.n	800a8d8 <_printf_i+0xa4>
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	6011      	str	r1, [r2, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	da03      	bge.n	800a892 <_printf_i+0x5e>
 800a88a:	222d      	movs	r2, #45	; 0x2d
 800a88c:	425b      	negs	r3, r3
 800a88e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a892:	486f      	ldr	r0, [pc, #444]	; (800aa50 <_printf_i+0x21c>)
 800a894:	220a      	movs	r2, #10
 800a896:	e039      	b.n	800a90c <_printf_i+0xd8>
 800a898:	2973      	cmp	r1, #115	; 0x73
 800a89a:	f000 809d 	beq.w	800a9d8 <_printf_i+0x1a4>
 800a89e:	d808      	bhi.n	800a8b2 <_printf_i+0x7e>
 800a8a0:	296f      	cmp	r1, #111	; 0x6f
 800a8a2:	d020      	beq.n	800a8e6 <_printf_i+0xb2>
 800a8a4:	2970      	cmp	r1, #112	; 0x70
 800a8a6:	d1dd      	bne.n	800a864 <_printf_i+0x30>
 800a8a8:	6823      	ldr	r3, [r4, #0]
 800a8aa:	f043 0320 	orr.w	r3, r3, #32
 800a8ae:	6023      	str	r3, [r4, #0]
 800a8b0:	e003      	b.n	800a8ba <_printf_i+0x86>
 800a8b2:	2975      	cmp	r1, #117	; 0x75
 800a8b4:	d017      	beq.n	800a8e6 <_printf_i+0xb2>
 800a8b6:	2978      	cmp	r1, #120	; 0x78
 800a8b8:	d1d4      	bne.n	800a864 <_printf_i+0x30>
 800a8ba:	2378      	movs	r3, #120	; 0x78
 800a8bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8c0:	4864      	ldr	r0, [pc, #400]	; (800aa54 <_printf_i+0x220>)
 800a8c2:	e055      	b.n	800a970 <_printf_i+0x13c>
 800a8c4:	6813      	ldr	r3, [r2, #0]
 800a8c6:	1d19      	adds	r1, r3, #4
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	6011      	str	r1, [r2, #0]
 800a8cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e08c      	b.n	800a9f2 <_printf_i+0x1be>
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	6011      	str	r1, [r2, #0]
 800a8dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a8e0:	bf18      	it	ne
 800a8e2:	b21b      	sxthne	r3, r3
 800a8e4:	e7cf      	b.n	800a886 <_printf_i+0x52>
 800a8e6:	6813      	ldr	r3, [r2, #0]
 800a8e8:	6825      	ldr	r5, [r4, #0]
 800a8ea:	1d18      	adds	r0, r3, #4
 800a8ec:	6010      	str	r0, [r2, #0]
 800a8ee:	0628      	lsls	r0, r5, #24
 800a8f0:	d501      	bpl.n	800a8f6 <_printf_i+0xc2>
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	e002      	b.n	800a8fc <_printf_i+0xc8>
 800a8f6:	0668      	lsls	r0, r5, #25
 800a8f8:	d5fb      	bpl.n	800a8f2 <_printf_i+0xbe>
 800a8fa:	881b      	ldrh	r3, [r3, #0]
 800a8fc:	4854      	ldr	r0, [pc, #336]	; (800aa50 <_printf_i+0x21c>)
 800a8fe:	296f      	cmp	r1, #111	; 0x6f
 800a900:	bf14      	ite	ne
 800a902:	220a      	movne	r2, #10
 800a904:	2208      	moveq	r2, #8
 800a906:	2100      	movs	r1, #0
 800a908:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a90c:	6865      	ldr	r5, [r4, #4]
 800a90e:	60a5      	str	r5, [r4, #8]
 800a910:	2d00      	cmp	r5, #0
 800a912:	f2c0 8095 	blt.w	800aa40 <_printf_i+0x20c>
 800a916:	6821      	ldr	r1, [r4, #0]
 800a918:	f021 0104 	bic.w	r1, r1, #4
 800a91c:	6021      	str	r1, [r4, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d13d      	bne.n	800a99e <_printf_i+0x16a>
 800a922:	2d00      	cmp	r5, #0
 800a924:	f040 808e 	bne.w	800aa44 <_printf_i+0x210>
 800a928:	4665      	mov	r5, ip
 800a92a:	2a08      	cmp	r2, #8
 800a92c:	d10b      	bne.n	800a946 <_printf_i+0x112>
 800a92e:	6823      	ldr	r3, [r4, #0]
 800a930:	07db      	lsls	r3, r3, #31
 800a932:	d508      	bpl.n	800a946 <_printf_i+0x112>
 800a934:	6923      	ldr	r3, [r4, #16]
 800a936:	6862      	ldr	r2, [r4, #4]
 800a938:	429a      	cmp	r2, r3
 800a93a:	bfde      	ittt	le
 800a93c:	2330      	movle	r3, #48	; 0x30
 800a93e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a942:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a946:	ebac 0305 	sub.w	r3, ip, r5
 800a94a:	6123      	str	r3, [r4, #16]
 800a94c:	f8cd 8000 	str.w	r8, [sp]
 800a950:	463b      	mov	r3, r7
 800a952:	aa03      	add	r2, sp, #12
 800a954:	4621      	mov	r1, r4
 800a956:	4630      	mov	r0, r6
 800a958:	f7ff fef6 	bl	800a748 <_printf_common>
 800a95c:	3001      	adds	r0, #1
 800a95e:	d14d      	bne.n	800a9fc <_printf_i+0x1c8>
 800a960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a964:	b005      	add	sp, #20
 800a966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a96a:	4839      	ldr	r0, [pc, #228]	; (800aa50 <_printf_i+0x21c>)
 800a96c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a970:	6813      	ldr	r3, [r2, #0]
 800a972:	6821      	ldr	r1, [r4, #0]
 800a974:	1d1d      	adds	r5, r3, #4
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	6015      	str	r5, [r2, #0]
 800a97a:	060a      	lsls	r2, r1, #24
 800a97c:	d50b      	bpl.n	800a996 <_printf_i+0x162>
 800a97e:	07ca      	lsls	r2, r1, #31
 800a980:	bf44      	itt	mi
 800a982:	f041 0120 	orrmi.w	r1, r1, #32
 800a986:	6021      	strmi	r1, [r4, #0]
 800a988:	b91b      	cbnz	r3, 800a992 <_printf_i+0x15e>
 800a98a:	6822      	ldr	r2, [r4, #0]
 800a98c:	f022 0220 	bic.w	r2, r2, #32
 800a990:	6022      	str	r2, [r4, #0]
 800a992:	2210      	movs	r2, #16
 800a994:	e7b7      	b.n	800a906 <_printf_i+0xd2>
 800a996:	064d      	lsls	r5, r1, #25
 800a998:	bf48      	it	mi
 800a99a:	b29b      	uxthmi	r3, r3
 800a99c:	e7ef      	b.n	800a97e <_printf_i+0x14a>
 800a99e:	4665      	mov	r5, ip
 800a9a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9a4:	fb02 3311 	mls	r3, r2, r1, r3
 800a9a8:	5cc3      	ldrb	r3, [r0, r3]
 800a9aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	2900      	cmp	r1, #0
 800a9b2:	d1f5      	bne.n	800a9a0 <_printf_i+0x16c>
 800a9b4:	e7b9      	b.n	800a92a <_printf_i+0xf6>
 800a9b6:	6813      	ldr	r3, [r2, #0]
 800a9b8:	6825      	ldr	r5, [r4, #0]
 800a9ba:	6961      	ldr	r1, [r4, #20]
 800a9bc:	1d18      	adds	r0, r3, #4
 800a9be:	6010      	str	r0, [r2, #0]
 800a9c0:	0628      	lsls	r0, r5, #24
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	d501      	bpl.n	800a9ca <_printf_i+0x196>
 800a9c6:	6019      	str	r1, [r3, #0]
 800a9c8:	e002      	b.n	800a9d0 <_printf_i+0x19c>
 800a9ca:	066a      	lsls	r2, r5, #25
 800a9cc:	d5fb      	bpl.n	800a9c6 <_printf_i+0x192>
 800a9ce:	8019      	strh	r1, [r3, #0]
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	6123      	str	r3, [r4, #16]
 800a9d4:	4665      	mov	r5, ip
 800a9d6:	e7b9      	b.n	800a94c <_printf_i+0x118>
 800a9d8:	6813      	ldr	r3, [r2, #0]
 800a9da:	1d19      	adds	r1, r3, #4
 800a9dc:	6011      	str	r1, [r2, #0]
 800a9de:	681d      	ldr	r5, [r3, #0]
 800a9e0:	6862      	ldr	r2, [r4, #4]
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	4628      	mov	r0, r5
 800a9e6:	f7f5 fc03 	bl	80001f0 <memchr>
 800a9ea:	b108      	cbz	r0, 800a9f0 <_printf_i+0x1bc>
 800a9ec:	1b40      	subs	r0, r0, r5
 800a9ee:	6060      	str	r0, [r4, #4]
 800a9f0:	6863      	ldr	r3, [r4, #4]
 800a9f2:	6123      	str	r3, [r4, #16]
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9fa:	e7a7      	b.n	800a94c <_printf_i+0x118>
 800a9fc:	6923      	ldr	r3, [r4, #16]
 800a9fe:	462a      	mov	r2, r5
 800aa00:	4639      	mov	r1, r7
 800aa02:	4630      	mov	r0, r6
 800aa04:	47c0      	blx	r8
 800aa06:	3001      	adds	r0, #1
 800aa08:	d0aa      	beq.n	800a960 <_printf_i+0x12c>
 800aa0a:	6823      	ldr	r3, [r4, #0]
 800aa0c:	079b      	lsls	r3, r3, #30
 800aa0e:	d413      	bmi.n	800aa38 <_printf_i+0x204>
 800aa10:	68e0      	ldr	r0, [r4, #12]
 800aa12:	9b03      	ldr	r3, [sp, #12]
 800aa14:	4298      	cmp	r0, r3
 800aa16:	bfb8      	it	lt
 800aa18:	4618      	movlt	r0, r3
 800aa1a:	e7a3      	b.n	800a964 <_printf_i+0x130>
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	464a      	mov	r2, r9
 800aa20:	4639      	mov	r1, r7
 800aa22:	4630      	mov	r0, r6
 800aa24:	47c0      	blx	r8
 800aa26:	3001      	adds	r0, #1
 800aa28:	d09a      	beq.n	800a960 <_printf_i+0x12c>
 800aa2a:	3501      	adds	r5, #1
 800aa2c:	68e3      	ldr	r3, [r4, #12]
 800aa2e:	9a03      	ldr	r2, [sp, #12]
 800aa30:	1a9b      	subs	r3, r3, r2
 800aa32:	42ab      	cmp	r3, r5
 800aa34:	dcf2      	bgt.n	800aa1c <_printf_i+0x1e8>
 800aa36:	e7eb      	b.n	800aa10 <_printf_i+0x1dc>
 800aa38:	2500      	movs	r5, #0
 800aa3a:	f104 0919 	add.w	r9, r4, #25
 800aa3e:	e7f5      	b.n	800aa2c <_printf_i+0x1f8>
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1ac      	bne.n	800a99e <_printf_i+0x16a>
 800aa44:	7803      	ldrb	r3, [r0, #0]
 800aa46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa4e:	e76c      	b.n	800a92a <_printf_i+0xf6>
 800aa50:	0800eba0 	.word	0x0800eba0
 800aa54:	0800ebb1 	.word	0x0800ebb1

0800aa58 <_scanf_float>:
 800aa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa5c:	469a      	mov	sl, r3
 800aa5e:	688b      	ldr	r3, [r1, #8]
 800aa60:	4616      	mov	r6, r2
 800aa62:	1e5a      	subs	r2, r3, #1
 800aa64:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aa68:	b087      	sub	sp, #28
 800aa6a:	bf83      	ittte	hi
 800aa6c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800aa70:	189b      	addhi	r3, r3, r2
 800aa72:	9301      	strhi	r3, [sp, #4]
 800aa74:	2300      	movls	r3, #0
 800aa76:	bf86      	itte	hi
 800aa78:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aa7c:	608b      	strhi	r3, [r1, #8]
 800aa7e:	9301      	strls	r3, [sp, #4]
 800aa80:	680b      	ldr	r3, [r1, #0]
 800aa82:	4688      	mov	r8, r1
 800aa84:	f04f 0b00 	mov.w	fp, #0
 800aa88:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800aa8c:	f848 3b1c 	str.w	r3, [r8], #28
 800aa90:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800aa94:	4607      	mov	r7, r0
 800aa96:	460c      	mov	r4, r1
 800aa98:	4645      	mov	r5, r8
 800aa9a:	465a      	mov	r2, fp
 800aa9c:	46d9      	mov	r9, fp
 800aa9e:	f8cd b008 	str.w	fp, [sp, #8]
 800aaa2:	68a1      	ldr	r1, [r4, #8]
 800aaa4:	b181      	cbz	r1, 800aac8 <_scanf_float+0x70>
 800aaa6:	6833      	ldr	r3, [r6, #0]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	2b49      	cmp	r3, #73	; 0x49
 800aaac:	d071      	beq.n	800ab92 <_scanf_float+0x13a>
 800aaae:	d84d      	bhi.n	800ab4c <_scanf_float+0xf4>
 800aab0:	2b39      	cmp	r3, #57	; 0x39
 800aab2:	d840      	bhi.n	800ab36 <_scanf_float+0xde>
 800aab4:	2b31      	cmp	r3, #49	; 0x31
 800aab6:	f080 8088 	bcs.w	800abca <_scanf_float+0x172>
 800aaba:	2b2d      	cmp	r3, #45	; 0x2d
 800aabc:	f000 8090 	beq.w	800abe0 <_scanf_float+0x188>
 800aac0:	d815      	bhi.n	800aaee <_scanf_float+0x96>
 800aac2:	2b2b      	cmp	r3, #43	; 0x2b
 800aac4:	f000 808c 	beq.w	800abe0 <_scanf_float+0x188>
 800aac8:	f1b9 0f00 	cmp.w	r9, #0
 800aacc:	d003      	beq.n	800aad6 <_scanf_float+0x7e>
 800aace:	6823      	ldr	r3, [r4, #0]
 800aad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aad4:	6023      	str	r3, [r4, #0]
 800aad6:	3a01      	subs	r2, #1
 800aad8:	2a01      	cmp	r2, #1
 800aada:	f200 80ea 	bhi.w	800acb2 <_scanf_float+0x25a>
 800aade:	4545      	cmp	r5, r8
 800aae0:	f200 80dc 	bhi.w	800ac9c <_scanf_float+0x244>
 800aae4:	2601      	movs	r6, #1
 800aae6:	4630      	mov	r0, r6
 800aae8:	b007      	add	sp, #28
 800aaea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaee:	2b2e      	cmp	r3, #46	; 0x2e
 800aaf0:	f000 809f 	beq.w	800ac32 <_scanf_float+0x1da>
 800aaf4:	2b30      	cmp	r3, #48	; 0x30
 800aaf6:	d1e7      	bne.n	800aac8 <_scanf_float+0x70>
 800aaf8:	6820      	ldr	r0, [r4, #0]
 800aafa:	f410 7f80 	tst.w	r0, #256	; 0x100
 800aafe:	d064      	beq.n	800abca <_scanf_float+0x172>
 800ab00:	9b01      	ldr	r3, [sp, #4]
 800ab02:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800ab06:	6020      	str	r0, [r4, #0]
 800ab08:	f109 0901 	add.w	r9, r9, #1
 800ab0c:	b11b      	cbz	r3, 800ab16 <_scanf_float+0xbe>
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	3101      	adds	r1, #1
 800ab12:	9301      	str	r3, [sp, #4]
 800ab14:	60a1      	str	r1, [r4, #8]
 800ab16:	68a3      	ldr	r3, [r4, #8]
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	60a3      	str	r3, [r4, #8]
 800ab1c:	6923      	ldr	r3, [r4, #16]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	6123      	str	r3, [r4, #16]
 800ab22:	6873      	ldr	r3, [r6, #4]
 800ab24:	3b01      	subs	r3, #1
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	6073      	str	r3, [r6, #4]
 800ab2a:	f340 80ac 	ble.w	800ac86 <_scanf_float+0x22e>
 800ab2e:	6833      	ldr	r3, [r6, #0]
 800ab30:	3301      	adds	r3, #1
 800ab32:	6033      	str	r3, [r6, #0]
 800ab34:	e7b5      	b.n	800aaa2 <_scanf_float+0x4a>
 800ab36:	2b45      	cmp	r3, #69	; 0x45
 800ab38:	f000 8085 	beq.w	800ac46 <_scanf_float+0x1ee>
 800ab3c:	2b46      	cmp	r3, #70	; 0x46
 800ab3e:	d06a      	beq.n	800ac16 <_scanf_float+0x1be>
 800ab40:	2b41      	cmp	r3, #65	; 0x41
 800ab42:	d1c1      	bne.n	800aac8 <_scanf_float+0x70>
 800ab44:	2a01      	cmp	r2, #1
 800ab46:	d1bf      	bne.n	800aac8 <_scanf_float+0x70>
 800ab48:	2202      	movs	r2, #2
 800ab4a:	e046      	b.n	800abda <_scanf_float+0x182>
 800ab4c:	2b65      	cmp	r3, #101	; 0x65
 800ab4e:	d07a      	beq.n	800ac46 <_scanf_float+0x1ee>
 800ab50:	d818      	bhi.n	800ab84 <_scanf_float+0x12c>
 800ab52:	2b54      	cmp	r3, #84	; 0x54
 800ab54:	d066      	beq.n	800ac24 <_scanf_float+0x1cc>
 800ab56:	d811      	bhi.n	800ab7c <_scanf_float+0x124>
 800ab58:	2b4e      	cmp	r3, #78	; 0x4e
 800ab5a:	d1b5      	bne.n	800aac8 <_scanf_float+0x70>
 800ab5c:	2a00      	cmp	r2, #0
 800ab5e:	d146      	bne.n	800abee <_scanf_float+0x196>
 800ab60:	f1b9 0f00 	cmp.w	r9, #0
 800ab64:	d145      	bne.n	800abf2 <_scanf_float+0x19a>
 800ab66:	6821      	ldr	r1, [r4, #0]
 800ab68:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ab6c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ab70:	d13f      	bne.n	800abf2 <_scanf_float+0x19a>
 800ab72:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ab76:	6021      	str	r1, [r4, #0]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	e02e      	b.n	800abda <_scanf_float+0x182>
 800ab7c:	2b59      	cmp	r3, #89	; 0x59
 800ab7e:	d01e      	beq.n	800abbe <_scanf_float+0x166>
 800ab80:	2b61      	cmp	r3, #97	; 0x61
 800ab82:	e7de      	b.n	800ab42 <_scanf_float+0xea>
 800ab84:	2b6e      	cmp	r3, #110	; 0x6e
 800ab86:	d0e9      	beq.n	800ab5c <_scanf_float+0x104>
 800ab88:	d815      	bhi.n	800abb6 <_scanf_float+0x15e>
 800ab8a:	2b66      	cmp	r3, #102	; 0x66
 800ab8c:	d043      	beq.n	800ac16 <_scanf_float+0x1be>
 800ab8e:	2b69      	cmp	r3, #105	; 0x69
 800ab90:	d19a      	bne.n	800aac8 <_scanf_float+0x70>
 800ab92:	f1bb 0f00 	cmp.w	fp, #0
 800ab96:	d138      	bne.n	800ac0a <_scanf_float+0x1b2>
 800ab98:	f1b9 0f00 	cmp.w	r9, #0
 800ab9c:	d197      	bne.n	800aace <_scanf_float+0x76>
 800ab9e:	6821      	ldr	r1, [r4, #0]
 800aba0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800aba4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800aba8:	d195      	bne.n	800aad6 <_scanf_float+0x7e>
 800abaa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800abae:	6021      	str	r1, [r4, #0]
 800abb0:	f04f 0b01 	mov.w	fp, #1
 800abb4:	e011      	b.n	800abda <_scanf_float+0x182>
 800abb6:	2b74      	cmp	r3, #116	; 0x74
 800abb8:	d034      	beq.n	800ac24 <_scanf_float+0x1cc>
 800abba:	2b79      	cmp	r3, #121	; 0x79
 800abbc:	d184      	bne.n	800aac8 <_scanf_float+0x70>
 800abbe:	f1bb 0f07 	cmp.w	fp, #7
 800abc2:	d181      	bne.n	800aac8 <_scanf_float+0x70>
 800abc4:	f04f 0b08 	mov.w	fp, #8
 800abc8:	e007      	b.n	800abda <_scanf_float+0x182>
 800abca:	eb12 0f0b 	cmn.w	r2, fp
 800abce:	f47f af7b 	bne.w	800aac8 <_scanf_float+0x70>
 800abd2:	6821      	ldr	r1, [r4, #0]
 800abd4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800abd8:	6021      	str	r1, [r4, #0]
 800abda:	702b      	strb	r3, [r5, #0]
 800abdc:	3501      	adds	r5, #1
 800abde:	e79a      	b.n	800ab16 <_scanf_float+0xbe>
 800abe0:	6821      	ldr	r1, [r4, #0]
 800abe2:	0608      	lsls	r0, r1, #24
 800abe4:	f57f af70 	bpl.w	800aac8 <_scanf_float+0x70>
 800abe8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800abec:	e7f4      	b.n	800abd8 <_scanf_float+0x180>
 800abee:	2a02      	cmp	r2, #2
 800abf0:	d047      	beq.n	800ac82 <_scanf_float+0x22a>
 800abf2:	f1bb 0f01 	cmp.w	fp, #1
 800abf6:	d003      	beq.n	800ac00 <_scanf_float+0x1a8>
 800abf8:	f1bb 0f04 	cmp.w	fp, #4
 800abfc:	f47f af64 	bne.w	800aac8 <_scanf_float+0x70>
 800ac00:	f10b 0b01 	add.w	fp, fp, #1
 800ac04:	fa5f fb8b 	uxtb.w	fp, fp
 800ac08:	e7e7      	b.n	800abda <_scanf_float+0x182>
 800ac0a:	f1bb 0f03 	cmp.w	fp, #3
 800ac0e:	d0f7      	beq.n	800ac00 <_scanf_float+0x1a8>
 800ac10:	f1bb 0f05 	cmp.w	fp, #5
 800ac14:	e7f2      	b.n	800abfc <_scanf_float+0x1a4>
 800ac16:	f1bb 0f02 	cmp.w	fp, #2
 800ac1a:	f47f af55 	bne.w	800aac8 <_scanf_float+0x70>
 800ac1e:	f04f 0b03 	mov.w	fp, #3
 800ac22:	e7da      	b.n	800abda <_scanf_float+0x182>
 800ac24:	f1bb 0f06 	cmp.w	fp, #6
 800ac28:	f47f af4e 	bne.w	800aac8 <_scanf_float+0x70>
 800ac2c:	f04f 0b07 	mov.w	fp, #7
 800ac30:	e7d3      	b.n	800abda <_scanf_float+0x182>
 800ac32:	6821      	ldr	r1, [r4, #0]
 800ac34:	0588      	lsls	r0, r1, #22
 800ac36:	f57f af47 	bpl.w	800aac8 <_scanf_float+0x70>
 800ac3a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800ac3e:	6021      	str	r1, [r4, #0]
 800ac40:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac44:	e7c9      	b.n	800abda <_scanf_float+0x182>
 800ac46:	6821      	ldr	r1, [r4, #0]
 800ac48:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800ac4c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ac50:	d006      	beq.n	800ac60 <_scanf_float+0x208>
 800ac52:	0548      	lsls	r0, r1, #21
 800ac54:	f57f af38 	bpl.w	800aac8 <_scanf_float+0x70>
 800ac58:	f1b9 0f00 	cmp.w	r9, #0
 800ac5c:	f43f af3b 	beq.w	800aad6 <_scanf_float+0x7e>
 800ac60:	0588      	lsls	r0, r1, #22
 800ac62:	bf58      	it	pl
 800ac64:	9802      	ldrpl	r0, [sp, #8]
 800ac66:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ac6a:	bf58      	it	pl
 800ac6c:	eba9 0000 	subpl.w	r0, r9, r0
 800ac70:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800ac74:	bf58      	it	pl
 800ac76:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800ac7a:	6021      	str	r1, [r4, #0]
 800ac7c:	f04f 0900 	mov.w	r9, #0
 800ac80:	e7ab      	b.n	800abda <_scanf_float+0x182>
 800ac82:	2203      	movs	r2, #3
 800ac84:	e7a9      	b.n	800abda <_scanf_float+0x182>
 800ac86:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ac8a:	9205      	str	r2, [sp, #20]
 800ac8c:	4631      	mov	r1, r6
 800ac8e:	4638      	mov	r0, r7
 800ac90:	4798      	blx	r3
 800ac92:	9a05      	ldr	r2, [sp, #20]
 800ac94:	2800      	cmp	r0, #0
 800ac96:	f43f af04 	beq.w	800aaa2 <_scanf_float+0x4a>
 800ac9a:	e715      	b.n	800aac8 <_scanf_float+0x70>
 800ac9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aca0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800aca4:	4632      	mov	r2, r6
 800aca6:	4638      	mov	r0, r7
 800aca8:	4798      	blx	r3
 800acaa:	6923      	ldr	r3, [r4, #16]
 800acac:	3b01      	subs	r3, #1
 800acae:	6123      	str	r3, [r4, #16]
 800acb0:	e715      	b.n	800aade <_scanf_float+0x86>
 800acb2:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800acb6:	2b06      	cmp	r3, #6
 800acb8:	d80a      	bhi.n	800acd0 <_scanf_float+0x278>
 800acba:	f1bb 0f02 	cmp.w	fp, #2
 800acbe:	d968      	bls.n	800ad92 <_scanf_float+0x33a>
 800acc0:	f1ab 0b03 	sub.w	fp, fp, #3
 800acc4:	fa5f fb8b 	uxtb.w	fp, fp
 800acc8:	eba5 0b0b 	sub.w	fp, r5, fp
 800accc:	455d      	cmp	r5, fp
 800acce:	d14b      	bne.n	800ad68 <_scanf_float+0x310>
 800acd0:	6823      	ldr	r3, [r4, #0]
 800acd2:	05da      	lsls	r2, r3, #23
 800acd4:	d51f      	bpl.n	800ad16 <_scanf_float+0x2be>
 800acd6:	055b      	lsls	r3, r3, #21
 800acd8:	d468      	bmi.n	800adac <_scanf_float+0x354>
 800acda:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800acde:	6923      	ldr	r3, [r4, #16]
 800ace0:	2965      	cmp	r1, #101	; 0x65
 800ace2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ace6:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800acea:	6123      	str	r3, [r4, #16]
 800acec:	d00d      	beq.n	800ad0a <_scanf_float+0x2b2>
 800acee:	2945      	cmp	r1, #69	; 0x45
 800acf0:	d00b      	beq.n	800ad0a <_scanf_float+0x2b2>
 800acf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acf6:	4632      	mov	r2, r6
 800acf8:	4638      	mov	r0, r7
 800acfa:	4798      	blx	r3
 800acfc:	6923      	ldr	r3, [r4, #16]
 800acfe:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800ad02:	3b01      	subs	r3, #1
 800ad04:	f1a5 0b02 	sub.w	fp, r5, #2
 800ad08:	6123      	str	r3, [r4, #16]
 800ad0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad0e:	4632      	mov	r2, r6
 800ad10:	4638      	mov	r0, r7
 800ad12:	4798      	blx	r3
 800ad14:	465d      	mov	r5, fp
 800ad16:	6826      	ldr	r6, [r4, #0]
 800ad18:	f016 0610 	ands.w	r6, r6, #16
 800ad1c:	d17a      	bne.n	800ae14 <_scanf_float+0x3bc>
 800ad1e:	702e      	strb	r6, [r5, #0]
 800ad20:	6823      	ldr	r3, [r4, #0]
 800ad22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ad26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad2a:	d142      	bne.n	800adb2 <_scanf_float+0x35a>
 800ad2c:	9b02      	ldr	r3, [sp, #8]
 800ad2e:	eba9 0303 	sub.w	r3, r9, r3
 800ad32:	425a      	negs	r2, r3
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d149      	bne.n	800adcc <_scanf_float+0x374>
 800ad38:	2200      	movs	r2, #0
 800ad3a:	4641      	mov	r1, r8
 800ad3c:	4638      	mov	r0, r7
 800ad3e:	f000 ff1f 	bl	800bb80 <_strtod_r>
 800ad42:	6825      	ldr	r5, [r4, #0]
 800ad44:	f8da 3000 	ldr.w	r3, [sl]
 800ad48:	f015 0f02 	tst.w	r5, #2
 800ad4c:	f103 0204 	add.w	r2, r3, #4
 800ad50:	ec59 8b10 	vmov	r8, r9, d0
 800ad54:	f8ca 2000 	str.w	r2, [sl]
 800ad58:	d043      	beq.n	800ade2 <_scanf_float+0x38a>
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	e9c3 8900 	strd	r8, r9, [r3]
 800ad60:	68e3      	ldr	r3, [r4, #12]
 800ad62:	3301      	adds	r3, #1
 800ad64:	60e3      	str	r3, [r4, #12]
 800ad66:	e6be      	b.n	800aae6 <_scanf_float+0x8e>
 800ad68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad6c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ad70:	4632      	mov	r2, r6
 800ad72:	4638      	mov	r0, r7
 800ad74:	4798      	blx	r3
 800ad76:	6923      	ldr	r3, [r4, #16]
 800ad78:	3b01      	subs	r3, #1
 800ad7a:	6123      	str	r3, [r4, #16]
 800ad7c:	e7a6      	b.n	800accc <_scanf_float+0x274>
 800ad7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad82:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ad86:	4632      	mov	r2, r6
 800ad88:	4638      	mov	r0, r7
 800ad8a:	4798      	blx	r3
 800ad8c:	6923      	ldr	r3, [r4, #16]
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	6123      	str	r3, [r4, #16]
 800ad92:	4545      	cmp	r5, r8
 800ad94:	d8f3      	bhi.n	800ad7e <_scanf_float+0x326>
 800ad96:	e6a5      	b.n	800aae4 <_scanf_float+0x8c>
 800ad98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad9c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ada0:	4632      	mov	r2, r6
 800ada2:	4638      	mov	r0, r7
 800ada4:	4798      	blx	r3
 800ada6:	6923      	ldr	r3, [r4, #16]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	6123      	str	r3, [r4, #16]
 800adac:	4545      	cmp	r5, r8
 800adae:	d8f3      	bhi.n	800ad98 <_scanf_float+0x340>
 800adb0:	e698      	b.n	800aae4 <_scanf_float+0x8c>
 800adb2:	9b03      	ldr	r3, [sp, #12]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d0bf      	beq.n	800ad38 <_scanf_float+0x2e0>
 800adb8:	9904      	ldr	r1, [sp, #16]
 800adba:	230a      	movs	r3, #10
 800adbc:	4632      	mov	r2, r6
 800adbe:	3101      	adds	r1, #1
 800adc0:	4638      	mov	r0, r7
 800adc2:	f000 ff69 	bl	800bc98 <_strtol_r>
 800adc6:	9b03      	ldr	r3, [sp, #12]
 800adc8:	9d04      	ldr	r5, [sp, #16]
 800adca:	1ac2      	subs	r2, r0, r3
 800adcc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800add0:	429d      	cmp	r5, r3
 800add2:	bf28      	it	cs
 800add4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800add8:	490f      	ldr	r1, [pc, #60]	; (800ae18 <_scanf_float+0x3c0>)
 800adda:	4628      	mov	r0, r5
 800addc:	f000 f8a0 	bl	800af20 <siprintf>
 800ade0:	e7aa      	b.n	800ad38 <_scanf_float+0x2e0>
 800ade2:	f015 0504 	ands.w	r5, r5, #4
 800ade6:	d1b8      	bne.n	800ad5a <_scanf_float+0x302>
 800ade8:	681f      	ldr	r7, [r3, #0]
 800adea:	ee10 2a10 	vmov	r2, s0
 800adee:	464b      	mov	r3, r9
 800adf0:	ee10 0a10 	vmov	r0, s0
 800adf4:	4649      	mov	r1, r9
 800adf6:	f7f5 fea1 	bl	8000b3c <__aeabi_dcmpun>
 800adfa:	b128      	cbz	r0, 800ae08 <_scanf_float+0x3b0>
 800adfc:	4628      	mov	r0, r5
 800adfe:	f000 f889 	bl	800af14 <nanf>
 800ae02:	ed87 0a00 	vstr	s0, [r7]
 800ae06:	e7ab      	b.n	800ad60 <_scanf_float+0x308>
 800ae08:	4640      	mov	r0, r8
 800ae0a:	4649      	mov	r1, r9
 800ae0c:	f7f5 fef4 	bl	8000bf8 <__aeabi_d2f>
 800ae10:	6038      	str	r0, [r7, #0]
 800ae12:	e7a5      	b.n	800ad60 <_scanf_float+0x308>
 800ae14:	2600      	movs	r6, #0
 800ae16:	e666      	b.n	800aae6 <_scanf_float+0x8e>
 800ae18:	0800ebc2 	.word	0x0800ebc2

0800ae1c <iprintf>:
 800ae1c:	b40f      	push	{r0, r1, r2, r3}
 800ae1e:	4b0a      	ldr	r3, [pc, #40]	; (800ae48 <iprintf+0x2c>)
 800ae20:	b513      	push	{r0, r1, r4, lr}
 800ae22:	681c      	ldr	r4, [r3, #0]
 800ae24:	b124      	cbz	r4, 800ae30 <iprintf+0x14>
 800ae26:	69a3      	ldr	r3, [r4, #24]
 800ae28:	b913      	cbnz	r3, 800ae30 <iprintf+0x14>
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f001 ff48 	bl	800ccc0 <__sinit>
 800ae30:	ab05      	add	r3, sp, #20
 800ae32:	9a04      	ldr	r2, [sp, #16]
 800ae34:	68a1      	ldr	r1, [r4, #8]
 800ae36:	9301      	str	r3, [sp, #4]
 800ae38:	4620      	mov	r0, r4
 800ae3a:	f003 f99f 	bl	800e17c <_vfiprintf_r>
 800ae3e:	b002      	add	sp, #8
 800ae40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae44:	b004      	add	sp, #16
 800ae46:	4770      	bx	lr
 800ae48:	20000088 	.word	0x20000088

0800ae4c <_puts_r>:
 800ae4c:	b570      	push	{r4, r5, r6, lr}
 800ae4e:	460e      	mov	r6, r1
 800ae50:	4605      	mov	r5, r0
 800ae52:	b118      	cbz	r0, 800ae5c <_puts_r+0x10>
 800ae54:	6983      	ldr	r3, [r0, #24]
 800ae56:	b90b      	cbnz	r3, 800ae5c <_puts_r+0x10>
 800ae58:	f001 ff32 	bl	800ccc0 <__sinit>
 800ae5c:	69ab      	ldr	r3, [r5, #24]
 800ae5e:	68ac      	ldr	r4, [r5, #8]
 800ae60:	b913      	cbnz	r3, 800ae68 <_puts_r+0x1c>
 800ae62:	4628      	mov	r0, r5
 800ae64:	f001 ff2c 	bl	800ccc0 <__sinit>
 800ae68:	4b23      	ldr	r3, [pc, #140]	; (800aef8 <_puts_r+0xac>)
 800ae6a:	429c      	cmp	r4, r3
 800ae6c:	d117      	bne.n	800ae9e <_puts_r+0x52>
 800ae6e:	686c      	ldr	r4, [r5, #4]
 800ae70:	89a3      	ldrh	r3, [r4, #12]
 800ae72:	071b      	lsls	r3, r3, #28
 800ae74:	d51d      	bpl.n	800aeb2 <_puts_r+0x66>
 800ae76:	6923      	ldr	r3, [r4, #16]
 800ae78:	b1db      	cbz	r3, 800aeb2 <_puts_r+0x66>
 800ae7a:	3e01      	subs	r6, #1
 800ae7c:	68a3      	ldr	r3, [r4, #8]
 800ae7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ae82:	3b01      	subs	r3, #1
 800ae84:	60a3      	str	r3, [r4, #8]
 800ae86:	b9e9      	cbnz	r1, 800aec4 <_puts_r+0x78>
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	da2e      	bge.n	800aeea <_puts_r+0x9e>
 800ae8c:	4622      	mov	r2, r4
 800ae8e:	210a      	movs	r1, #10
 800ae90:	4628      	mov	r0, r5
 800ae92:	f000 ff13 	bl	800bcbc <__swbuf_r>
 800ae96:	3001      	adds	r0, #1
 800ae98:	d011      	beq.n	800aebe <_puts_r+0x72>
 800ae9a:	200a      	movs	r0, #10
 800ae9c:	e011      	b.n	800aec2 <_puts_r+0x76>
 800ae9e:	4b17      	ldr	r3, [pc, #92]	; (800aefc <_puts_r+0xb0>)
 800aea0:	429c      	cmp	r4, r3
 800aea2:	d101      	bne.n	800aea8 <_puts_r+0x5c>
 800aea4:	68ac      	ldr	r4, [r5, #8]
 800aea6:	e7e3      	b.n	800ae70 <_puts_r+0x24>
 800aea8:	4b15      	ldr	r3, [pc, #84]	; (800af00 <_puts_r+0xb4>)
 800aeaa:	429c      	cmp	r4, r3
 800aeac:	bf08      	it	eq
 800aeae:	68ec      	ldreq	r4, [r5, #12]
 800aeb0:	e7de      	b.n	800ae70 <_puts_r+0x24>
 800aeb2:	4621      	mov	r1, r4
 800aeb4:	4628      	mov	r0, r5
 800aeb6:	f000 ff61 	bl	800bd7c <__swsetup_r>
 800aeba:	2800      	cmp	r0, #0
 800aebc:	d0dd      	beq.n	800ae7a <_puts_r+0x2e>
 800aebe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aec2:	bd70      	pop	{r4, r5, r6, pc}
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	da04      	bge.n	800aed2 <_puts_r+0x86>
 800aec8:	69a2      	ldr	r2, [r4, #24]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	dc06      	bgt.n	800aedc <_puts_r+0x90>
 800aece:	290a      	cmp	r1, #10
 800aed0:	d004      	beq.n	800aedc <_puts_r+0x90>
 800aed2:	6823      	ldr	r3, [r4, #0]
 800aed4:	1c5a      	adds	r2, r3, #1
 800aed6:	6022      	str	r2, [r4, #0]
 800aed8:	7019      	strb	r1, [r3, #0]
 800aeda:	e7cf      	b.n	800ae7c <_puts_r+0x30>
 800aedc:	4622      	mov	r2, r4
 800aede:	4628      	mov	r0, r5
 800aee0:	f000 feec 	bl	800bcbc <__swbuf_r>
 800aee4:	3001      	adds	r0, #1
 800aee6:	d1c9      	bne.n	800ae7c <_puts_r+0x30>
 800aee8:	e7e9      	b.n	800aebe <_puts_r+0x72>
 800aeea:	6823      	ldr	r3, [r4, #0]
 800aeec:	200a      	movs	r0, #10
 800aeee:	1c5a      	adds	r2, r3, #1
 800aef0:	6022      	str	r2, [r4, #0]
 800aef2:	7018      	strb	r0, [r3, #0]
 800aef4:	e7e5      	b.n	800aec2 <_puts_r+0x76>
 800aef6:	bf00      	nop
 800aef8:	0800ed48 	.word	0x0800ed48
 800aefc:	0800ed68 	.word	0x0800ed68
 800af00:	0800ed28 	.word	0x0800ed28

0800af04 <puts>:
 800af04:	4b02      	ldr	r3, [pc, #8]	; (800af10 <puts+0xc>)
 800af06:	4601      	mov	r1, r0
 800af08:	6818      	ldr	r0, [r3, #0]
 800af0a:	f7ff bf9f 	b.w	800ae4c <_puts_r>
 800af0e:	bf00      	nop
 800af10:	20000088 	.word	0x20000088

0800af14 <nanf>:
 800af14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800af1c <nanf+0x8>
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	7fc00000 	.word	0x7fc00000

0800af20 <siprintf>:
 800af20:	b40e      	push	{r1, r2, r3}
 800af22:	b500      	push	{lr}
 800af24:	b09c      	sub	sp, #112	; 0x70
 800af26:	ab1d      	add	r3, sp, #116	; 0x74
 800af28:	9002      	str	r0, [sp, #8]
 800af2a:	9006      	str	r0, [sp, #24]
 800af2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af30:	4809      	ldr	r0, [pc, #36]	; (800af58 <siprintf+0x38>)
 800af32:	9107      	str	r1, [sp, #28]
 800af34:	9104      	str	r1, [sp, #16]
 800af36:	4909      	ldr	r1, [pc, #36]	; (800af5c <siprintf+0x3c>)
 800af38:	f853 2b04 	ldr.w	r2, [r3], #4
 800af3c:	9105      	str	r1, [sp, #20]
 800af3e:	6800      	ldr	r0, [r0, #0]
 800af40:	9301      	str	r3, [sp, #4]
 800af42:	a902      	add	r1, sp, #8
 800af44:	f002 fff8 	bl	800df38 <_svfiprintf_r>
 800af48:	9b02      	ldr	r3, [sp, #8]
 800af4a:	2200      	movs	r2, #0
 800af4c:	701a      	strb	r2, [r3, #0]
 800af4e:	b01c      	add	sp, #112	; 0x70
 800af50:	f85d eb04 	ldr.w	lr, [sp], #4
 800af54:	b003      	add	sp, #12
 800af56:	4770      	bx	lr
 800af58:	20000088 	.word	0x20000088
 800af5c:	ffff0208 	.word	0xffff0208

0800af60 <sulp>:
 800af60:	b570      	push	{r4, r5, r6, lr}
 800af62:	4604      	mov	r4, r0
 800af64:	460d      	mov	r5, r1
 800af66:	ec45 4b10 	vmov	d0, r4, r5
 800af6a:	4616      	mov	r6, r2
 800af6c:	f002 fda0 	bl	800dab0 <__ulp>
 800af70:	ec51 0b10 	vmov	r0, r1, d0
 800af74:	b17e      	cbz	r6, 800af96 <sulp+0x36>
 800af76:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800af7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800af7e:	2b00      	cmp	r3, #0
 800af80:	dd09      	ble.n	800af96 <sulp+0x36>
 800af82:	051b      	lsls	r3, r3, #20
 800af84:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800af88:	2400      	movs	r4, #0
 800af8a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800af8e:	4622      	mov	r2, r4
 800af90:	462b      	mov	r3, r5
 800af92:	f7f5 fb39 	bl	8000608 <__aeabi_dmul>
 800af96:	bd70      	pop	{r4, r5, r6, pc}

0800af98 <_strtod_l>:
 800af98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af9c:	461f      	mov	r7, r3
 800af9e:	b0a1      	sub	sp, #132	; 0x84
 800afa0:	2300      	movs	r3, #0
 800afa2:	4681      	mov	r9, r0
 800afa4:	4638      	mov	r0, r7
 800afa6:	460e      	mov	r6, r1
 800afa8:	9217      	str	r2, [sp, #92]	; 0x5c
 800afaa:	931c      	str	r3, [sp, #112]	; 0x70
 800afac:	f002 fa38 	bl	800d420 <__localeconv_l>
 800afb0:	4680      	mov	r8, r0
 800afb2:	6800      	ldr	r0, [r0, #0]
 800afb4:	f7f5 f914 	bl	80001e0 <strlen>
 800afb8:	f04f 0a00 	mov.w	sl, #0
 800afbc:	4604      	mov	r4, r0
 800afbe:	f04f 0b00 	mov.w	fp, #0
 800afc2:	961b      	str	r6, [sp, #108]	; 0x6c
 800afc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afc6:	781a      	ldrb	r2, [r3, #0]
 800afc8:	2a0d      	cmp	r2, #13
 800afca:	d832      	bhi.n	800b032 <_strtod_l+0x9a>
 800afcc:	2a09      	cmp	r2, #9
 800afce:	d236      	bcs.n	800b03e <_strtod_l+0xa6>
 800afd0:	2a00      	cmp	r2, #0
 800afd2:	d03e      	beq.n	800b052 <_strtod_l+0xba>
 800afd4:	2300      	movs	r3, #0
 800afd6:	930d      	str	r3, [sp, #52]	; 0x34
 800afd8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800afda:	782b      	ldrb	r3, [r5, #0]
 800afdc:	2b30      	cmp	r3, #48	; 0x30
 800afde:	f040 80ac 	bne.w	800b13a <_strtod_l+0x1a2>
 800afe2:	786b      	ldrb	r3, [r5, #1]
 800afe4:	2b58      	cmp	r3, #88	; 0x58
 800afe6:	d001      	beq.n	800afec <_strtod_l+0x54>
 800afe8:	2b78      	cmp	r3, #120	; 0x78
 800afea:	d167      	bne.n	800b0bc <_strtod_l+0x124>
 800afec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afee:	9301      	str	r3, [sp, #4]
 800aff0:	ab1c      	add	r3, sp, #112	; 0x70
 800aff2:	9300      	str	r3, [sp, #0]
 800aff4:	9702      	str	r7, [sp, #8]
 800aff6:	ab1d      	add	r3, sp, #116	; 0x74
 800aff8:	4a88      	ldr	r2, [pc, #544]	; (800b21c <_strtod_l+0x284>)
 800affa:	a91b      	add	r1, sp, #108	; 0x6c
 800affc:	4648      	mov	r0, r9
 800affe:	f001 ff38 	bl	800ce72 <__gethex>
 800b002:	f010 0407 	ands.w	r4, r0, #7
 800b006:	4606      	mov	r6, r0
 800b008:	d005      	beq.n	800b016 <_strtod_l+0x7e>
 800b00a:	2c06      	cmp	r4, #6
 800b00c:	d12b      	bne.n	800b066 <_strtod_l+0xce>
 800b00e:	3501      	adds	r5, #1
 800b010:	2300      	movs	r3, #0
 800b012:	951b      	str	r5, [sp, #108]	; 0x6c
 800b014:	930d      	str	r3, [sp, #52]	; 0x34
 800b016:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f040 859a 	bne.w	800bb52 <_strtod_l+0xbba>
 800b01e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b020:	b1e3      	cbz	r3, 800b05c <_strtod_l+0xc4>
 800b022:	4652      	mov	r2, sl
 800b024:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b028:	ec43 2b10 	vmov	d0, r2, r3
 800b02c:	b021      	add	sp, #132	; 0x84
 800b02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b032:	2a2b      	cmp	r2, #43	; 0x2b
 800b034:	d015      	beq.n	800b062 <_strtod_l+0xca>
 800b036:	2a2d      	cmp	r2, #45	; 0x2d
 800b038:	d004      	beq.n	800b044 <_strtod_l+0xac>
 800b03a:	2a20      	cmp	r2, #32
 800b03c:	d1ca      	bne.n	800afd4 <_strtod_l+0x3c>
 800b03e:	3301      	adds	r3, #1
 800b040:	931b      	str	r3, [sp, #108]	; 0x6c
 800b042:	e7bf      	b.n	800afc4 <_strtod_l+0x2c>
 800b044:	2201      	movs	r2, #1
 800b046:	920d      	str	r2, [sp, #52]	; 0x34
 800b048:	1c5a      	adds	r2, r3, #1
 800b04a:	921b      	str	r2, [sp, #108]	; 0x6c
 800b04c:	785b      	ldrb	r3, [r3, #1]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1c2      	bne.n	800afd8 <_strtod_l+0x40>
 800b052:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b054:	961b      	str	r6, [sp, #108]	; 0x6c
 800b056:	2b00      	cmp	r3, #0
 800b058:	f040 8579 	bne.w	800bb4e <_strtod_l+0xbb6>
 800b05c:	4652      	mov	r2, sl
 800b05e:	465b      	mov	r3, fp
 800b060:	e7e2      	b.n	800b028 <_strtod_l+0x90>
 800b062:	2200      	movs	r2, #0
 800b064:	e7ef      	b.n	800b046 <_strtod_l+0xae>
 800b066:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b068:	b13a      	cbz	r2, 800b07a <_strtod_l+0xe2>
 800b06a:	2135      	movs	r1, #53	; 0x35
 800b06c:	a81e      	add	r0, sp, #120	; 0x78
 800b06e:	f002 fe17 	bl	800dca0 <__copybits>
 800b072:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b074:	4648      	mov	r0, r9
 800b076:	f002 fa83 	bl	800d580 <_Bfree>
 800b07a:	3c01      	subs	r4, #1
 800b07c:	2c04      	cmp	r4, #4
 800b07e:	d806      	bhi.n	800b08e <_strtod_l+0xf6>
 800b080:	e8df f004 	tbb	[pc, r4]
 800b084:	1714030a 	.word	0x1714030a
 800b088:	0a          	.byte	0x0a
 800b089:	00          	.byte	0x00
 800b08a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800b08e:	0730      	lsls	r0, r6, #28
 800b090:	d5c1      	bpl.n	800b016 <_strtod_l+0x7e>
 800b092:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b096:	e7be      	b.n	800b016 <_strtod_l+0x7e>
 800b098:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800b09c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b09e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b0a2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b0a6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b0aa:	e7f0      	b.n	800b08e <_strtod_l+0xf6>
 800b0ac:	f8df b170 	ldr.w	fp, [pc, #368]	; 800b220 <_strtod_l+0x288>
 800b0b0:	e7ed      	b.n	800b08e <_strtod_l+0xf6>
 800b0b2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b0b6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b0ba:	e7e8      	b.n	800b08e <_strtod_l+0xf6>
 800b0bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0be:	1c5a      	adds	r2, r3, #1
 800b0c0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b0c2:	785b      	ldrb	r3, [r3, #1]
 800b0c4:	2b30      	cmp	r3, #48	; 0x30
 800b0c6:	d0f9      	beq.n	800b0bc <_strtod_l+0x124>
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d0a4      	beq.n	800b016 <_strtod_l+0x7e>
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	2500      	movs	r5, #0
 800b0d0:	9306      	str	r3, [sp, #24]
 800b0d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0d4:	9308      	str	r3, [sp, #32]
 800b0d6:	9507      	str	r5, [sp, #28]
 800b0d8:	9505      	str	r5, [sp, #20]
 800b0da:	220a      	movs	r2, #10
 800b0dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b0de:	7807      	ldrb	r7, [r0, #0]
 800b0e0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b0e4:	b2d9      	uxtb	r1, r3
 800b0e6:	2909      	cmp	r1, #9
 800b0e8:	d929      	bls.n	800b13e <_strtod_l+0x1a6>
 800b0ea:	4622      	mov	r2, r4
 800b0ec:	f8d8 1000 	ldr.w	r1, [r8]
 800b0f0:	f003 f9ad 	bl	800e44e <strncmp>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d031      	beq.n	800b15c <_strtod_l+0x1c4>
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	9c05      	ldr	r4, [sp, #20]
 800b0fc:	9004      	str	r0, [sp, #16]
 800b0fe:	463b      	mov	r3, r7
 800b100:	4602      	mov	r2, r0
 800b102:	2b65      	cmp	r3, #101	; 0x65
 800b104:	d001      	beq.n	800b10a <_strtod_l+0x172>
 800b106:	2b45      	cmp	r3, #69	; 0x45
 800b108:	d114      	bne.n	800b134 <_strtod_l+0x19c>
 800b10a:	b924      	cbnz	r4, 800b116 <_strtod_l+0x17e>
 800b10c:	b910      	cbnz	r0, 800b114 <_strtod_l+0x17c>
 800b10e:	9b06      	ldr	r3, [sp, #24]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d09e      	beq.n	800b052 <_strtod_l+0xba>
 800b114:	2400      	movs	r4, #0
 800b116:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b118:	1c73      	adds	r3, r6, #1
 800b11a:	931b      	str	r3, [sp, #108]	; 0x6c
 800b11c:	7873      	ldrb	r3, [r6, #1]
 800b11e:	2b2b      	cmp	r3, #43	; 0x2b
 800b120:	d078      	beq.n	800b214 <_strtod_l+0x27c>
 800b122:	2b2d      	cmp	r3, #45	; 0x2d
 800b124:	d070      	beq.n	800b208 <_strtod_l+0x270>
 800b126:	f04f 0c00 	mov.w	ip, #0
 800b12a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800b12e:	2f09      	cmp	r7, #9
 800b130:	d97c      	bls.n	800b22c <_strtod_l+0x294>
 800b132:	961b      	str	r6, [sp, #108]	; 0x6c
 800b134:	f04f 0e00 	mov.w	lr, #0
 800b138:	e09a      	b.n	800b270 <_strtod_l+0x2d8>
 800b13a:	2300      	movs	r3, #0
 800b13c:	e7c7      	b.n	800b0ce <_strtod_l+0x136>
 800b13e:	9905      	ldr	r1, [sp, #20]
 800b140:	2908      	cmp	r1, #8
 800b142:	bfdd      	ittte	le
 800b144:	9907      	ldrle	r1, [sp, #28]
 800b146:	fb02 3301 	mlale	r3, r2, r1, r3
 800b14a:	9307      	strle	r3, [sp, #28]
 800b14c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800b150:	9b05      	ldr	r3, [sp, #20]
 800b152:	3001      	adds	r0, #1
 800b154:	3301      	adds	r3, #1
 800b156:	9305      	str	r3, [sp, #20]
 800b158:	901b      	str	r0, [sp, #108]	; 0x6c
 800b15a:	e7bf      	b.n	800b0dc <_strtod_l+0x144>
 800b15c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b15e:	191a      	adds	r2, r3, r4
 800b160:	921b      	str	r2, [sp, #108]	; 0x6c
 800b162:	9a05      	ldr	r2, [sp, #20]
 800b164:	5d1b      	ldrb	r3, [r3, r4]
 800b166:	2a00      	cmp	r2, #0
 800b168:	d037      	beq.n	800b1da <_strtod_l+0x242>
 800b16a:	9c05      	ldr	r4, [sp, #20]
 800b16c:	4602      	mov	r2, r0
 800b16e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b172:	2909      	cmp	r1, #9
 800b174:	d913      	bls.n	800b19e <_strtod_l+0x206>
 800b176:	2101      	movs	r1, #1
 800b178:	9104      	str	r1, [sp, #16]
 800b17a:	e7c2      	b.n	800b102 <_strtod_l+0x16a>
 800b17c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b17e:	1c5a      	adds	r2, r3, #1
 800b180:	921b      	str	r2, [sp, #108]	; 0x6c
 800b182:	785b      	ldrb	r3, [r3, #1]
 800b184:	3001      	adds	r0, #1
 800b186:	2b30      	cmp	r3, #48	; 0x30
 800b188:	d0f8      	beq.n	800b17c <_strtod_l+0x1e4>
 800b18a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b18e:	2a08      	cmp	r2, #8
 800b190:	f200 84e4 	bhi.w	800bb5c <_strtod_l+0xbc4>
 800b194:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b196:	9208      	str	r2, [sp, #32]
 800b198:	4602      	mov	r2, r0
 800b19a:	2000      	movs	r0, #0
 800b19c:	4604      	mov	r4, r0
 800b19e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800b1a2:	f100 0101 	add.w	r1, r0, #1
 800b1a6:	d012      	beq.n	800b1ce <_strtod_l+0x236>
 800b1a8:	440a      	add	r2, r1
 800b1aa:	eb00 0c04 	add.w	ip, r0, r4
 800b1ae:	4621      	mov	r1, r4
 800b1b0:	270a      	movs	r7, #10
 800b1b2:	458c      	cmp	ip, r1
 800b1b4:	d113      	bne.n	800b1de <_strtod_l+0x246>
 800b1b6:	1821      	adds	r1, r4, r0
 800b1b8:	2908      	cmp	r1, #8
 800b1ba:	f104 0401 	add.w	r4, r4, #1
 800b1be:	4404      	add	r4, r0
 800b1c0:	dc19      	bgt.n	800b1f6 <_strtod_l+0x25e>
 800b1c2:	9b07      	ldr	r3, [sp, #28]
 800b1c4:	210a      	movs	r1, #10
 800b1c6:	fb01 e303 	mla	r3, r1, r3, lr
 800b1ca:	9307      	str	r3, [sp, #28]
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1d0:	1c58      	adds	r0, r3, #1
 800b1d2:	901b      	str	r0, [sp, #108]	; 0x6c
 800b1d4:	785b      	ldrb	r3, [r3, #1]
 800b1d6:	4608      	mov	r0, r1
 800b1d8:	e7c9      	b.n	800b16e <_strtod_l+0x1d6>
 800b1da:	9805      	ldr	r0, [sp, #20]
 800b1dc:	e7d3      	b.n	800b186 <_strtod_l+0x1ee>
 800b1de:	2908      	cmp	r1, #8
 800b1e0:	f101 0101 	add.w	r1, r1, #1
 800b1e4:	dc03      	bgt.n	800b1ee <_strtod_l+0x256>
 800b1e6:	9b07      	ldr	r3, [sp, #28]
 800b1e8:	437b      	muls	r3, r7
 800b1ea:	9307      	str	r3, [sp, #28]
 800b1ec:	e7e1      	b.n	800b1b2 <_strtod_l+0x21a>
 800b1ee:	2910      	cmp	r1, #16
 800b1f0:	bfd8      	it	le
 800b1f2:	437d      	mulle	r5, r7
 800b1f4:	e7dd      	b.n	800b1b2 <_strtod_l+0x21a>
 800b1f6:	2c10      	cmp	r4, #16
 800b1f8:	bfdc      	itt	le
 800b1fa:	210a      	movle	r1, #10
 800b1fc:	fb01 e505 	mlale	r5, r1, r5, lr
 800b200:	e7e4      	b.n	800b1cc <_strtod_l+0x234>
 800b202:	2301      	movs	r3, #1
 800b204:	9304      	str	r3, [sp, #16]
 800b206:	e781      	b.n	800b10c <_strtod_l+0x174>
 800b208:	f04f 0c01 	mov.w	ip, #1
 800b20c:	1cb3      	adds	r3, r6, #2
 800b20e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b210:	78b3      	ldrb	r3, [r6, #2]
 800b212:	e78a      	b.n	800b12a <_strtod_l+0x192>
 800b214:	f04f 0c00 	mov.w	ip, #0
 800b218:	e7f8      	b.n	800b20c <_strtod_l+0x274>
 800b21a:	bf00      	nop
 800b21c:	0800ebc8 	.word	0x0800ebc8
 800b220:	7ff00000 	.word	0x7ff00000
 800b224:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b226:	1c5f      	adds	r7, r3, #1
 800b228:	971b      	str	r7, [sp, #108]	; 0x6c
 800b22a:	785b      	ldrb	r3, [r3, #1]
 800b22c:	2b30      	cmp	r3, #48	; 0x30
 800b22e:	d0f9      	beq.n	800b224 <_strtod_l+0x28c>
 800b230:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800b234:	2f08      	cmp	r7, #8
 800b236:	f63f af7d 	bhi.w	800b134 <_strtod_l+0x19c>
 800b23a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b23e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b240:	930a      	str	r3, [sp, #40]	; 0x28
 800b242:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b244:	1c5f      	adds	r7, r3, #1
 800b246:	971b      	str	r7, [sp, #108]	; 0x6c
 800b248:	785b      	ldrb	r3, [r3, #1]
 800b24a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800b24e:	f1b8 0f09 	cmp.w	r8, #9
 800b252:	d937      	bls.n	800b2c4 <_strtod_l+0x32c>
 800b254:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b256:	1a7f      	subs	r7, r7, r1
 800b258:	2f08      	cmp	r7, #8
 800b25a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b25e:	dc37      	bgt.n	800b2d0 <_strtod_l+0x338>
 800b260:	45be      	cmp	lr, r7
 800b262:	bfa8      	it	ge
 800b264:	46be      	movge	lr, r7
 800b266:	f1bc 0f00 	cmp.w	ip, #0
 800b26a:	d001      	beq.n	800b270 <_strtod_l+0x2d8>
 800b26c:	f1ce 0e00 	rsb	lr, lr, #0
 800b270:	2c00      	cmp	r4, #0
 800b272:	d151      	bne.n	800b318 <_strtod_l+0x380>
 800b274:	2800      	cmp	r0, #0
 800b276:	f47f aece 	bne.w	800b016 <_strtod_l+0x7e>
 800b27a:	9a06      	ldr	r2, [sp, #24]
 800b27c:	2a00      	cmp	r2, #0
 800b27e:	f47f aeca 	bne.w	800b016 <_strtod_l+0x7e>
 800b282:	9a04      	ldr	r2, [sp, #16]
 800b284:	2a00      	cmp	r2, #0
 800b286:	f47f aee4 	bne.w	800b052 <_strtod_l+0xba>
 800b28a:	2b4e      	cmp	r3, #78	; 0x4e
 800b28c:	d027      	beq.n	800b2de <_strtod_l+0x346>
 800b28e:	dc21      	bgt.n	800b2d4 <_strtod_l+0x33c>
 800b290:	2b49      	cmp	r3, #73	; 0x49
 800b292:	f47f aede 	bne.w	800b052 <_strtod_l+0xba>
 800b296:	49a0      	ldr	r1, [pc, #640]	; (800b518 <_strtod_l+0x580>)
 800b298:	a81b      	add	r0, sp, #108	; 0x6c
 800b29a:	f002 f81d 	bl	800d2d8 <__match>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	f43f aed7 	beq.w	800b052 <_strtod_l+0xba>
 800b2a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2a6:	499d      	ldr	r1, [pc, #628]	; (800b51c <_strtod_l+0x584>)
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	a81b      	add	r0, sp, #108	; 0x6c
 800b2ac:	931b      	str	r3, [sp, #108]	; 0x6c
 800b2ae:	f002 f813 	bl	800d2d8 <__match>
 800b2b2:	b910      	cbnz	r0, 800b2ba <_strtod_l+0x322>
 800b2b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	931b      	str	r3, [sp, #108]	; 0x6c
 800b2ba:	f8df b274 	ldr.w	fp, [pc, #628]	; 800b530 <_strtod_l+0x598>
 800b2be:	f04f 0a00 	mov.w	sl, #0
 800b2c2:	e6a8      	b.n	800b016 <_strtod_l+0x7e>
 800b2c4:	210a      	movs	r1, #10
 800b2c6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b2ca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b2ce:	e7b8      	b.n	800b242 <_strtod_l+0x2aa>
 800b2d0:	46be      	mov	lr, r7
 800b2d2:	e7c8      	b.n	800b266 <_strtod_l+0x2ce>
 800b2d4:	2b69      	cmp	r3, #105	; 0x69
 800b2d6:	d0de      	beq.n	800b296 <_strtod_l+0x2fe>
 800b2d8:	2b6e      	cmp	r3, #110	; 0x6e
 800b2da:	f47f aeba 	bne.w	800b052 <_strtod_l+0xba>
 800b2de:	4990      	ldr	r1, [pc, #576]	; (800b520 <_strtod_l+0x588>)
 800b2e0:	a81b      	add	r0, sp, #108	; 0x6c
 800b2e2:	f001 fff9 	bl	800d2d8 <__match>
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	f43f aeb3 	beq.w	800b052 <_strtod_l+0xba>
 800b2ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	2b28      	cmp	r3, #40	; 0x28
 800b2f2:	d10e      	bne.n	800b312 <_strtod_l+0x37a>
 800b2f4:	aa1e      	add	r2, sp, #120	; 0x78
 800b2f6:	498b      	ldr	r1, [pc, #556]	; (800b524 <_strtod_l+0x58c>)
 800b2f8:	a81b      	add	r0, sp, #108	; 0x6c
 800b2fa:	f002 f801 	bl	800d300 <__hexnan>
 800b2fe:	2805      	cmp	r0, #5
 800b300:	d107      	bne.n	800b312 <_strtod_l+0x37a>
 800b302:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b304:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800b308:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b30c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b310:	e681      	b.n	800b016 <_strtod_l+0x7e>
 800b312:	f8df b224 	ldr.w	fp, [pc, #548]	; 800b538 <_strtod_l+0x5a0>
 800b316:	e7d2      	b.n	800b2be <_strtod_l+0x326>
 800b318:	ebae 0302 	sub.w	r3, lr, r2
 800b31c:	9306      	str	r3, [sp, #24]
 800b31e:	9b05      	ldr	r3, [sp, #20]
 800b320:	9807      	ldr	r0, [sp, #28]
 800b322:	2b00      	cmp	r3, #0
 800b324:	bf08      	it	eq
 800b326:	4623      	moveq	r3, r4
 800b328:	2c10      	cmp	r4, #16
 800b32a:	9305      	str	r3, [sp, #20]
 800b32c:	46a0      	mov	r8, r4
 800b32e:	bfa8      	it	ge
 800b330:	f04f 0810 	movge.w	r8, #16
 800b334:	f7f5 f8ee 	bl	8000514 <__aeabi_ui2d>
 800b338:	2c09      	cmp	r4, #9
 800b33a:	4682      	mov	sl, r0
 800b33c:	468b      	mov	fp, r1
 800b33e:	dc13      	bgt.n	800b368 <_strtod_l+0x3d0>
 800b340:	9b06      	ldr	r3, [sp, #24]
 800b342:	2b00      	cmp	r3, #0
 800b344:	f43f ae67 	beq.w	800b016 <_strtod_l+0x7e>
 800b348:	9b06      	ldr	r3, [sp, #24]
 800b34a:	dd7a      	ble.n	800b442 <_strtod_l+0x4aa>
 800b34c:	2b16      	cmp	r3, #22
 800b34e:	dc61      	bgt.n	800b414 <_strtod_l+0x47c>
 800b350:	4a75      	ldr	r2, [pc, #468]	; (800b528 <_strtod_l+0x590>)
 800b352:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800b356:	e9de 0100 	ldrd	r0, r1, [lr]
 800b35a:	4652      	mov	r2, sl
 800b35c:	465b      	mov	r3, fp
 800b35e:	f7f5 f953 	bl	8000608 <__aeabi_dmul>
 800b362:	4682      	mov	sl, r0
 800b364:	468b      	mov	fp, r1
 800b366:	e656      	b.n	800b016 <_strtod_l+0x7e>
 800b368:	4b6f      	ldr	r3, [pc, #444]	; (800b528 <_strtod_l+0x590>)
 800b36a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b36e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b372:	f7f5 f949 	bl	8000608 <__aeabi_dmul>
 800b376:	4606      	mov	r6, r0
 800b378:	4628      	mov	r0, r5
 800b37a:	460f      	mov	r7, r1
 800b37c:	f7f5 f8ca 	bl	8000514 <__aeabi_ui2d>
 800b380:	4602      	mov	r2, r0
 800b382:	460b      	mov	r3, r1
 800b384:	4630      	mov	r0, r6
 800b386:	4639      	mov	r1, r7
 800b388:	f7f4 ff88 	bl	800029c <__adddf3>
 800b38c:	2c0f      	cmp	r4, #15
 800b38e:	4682      	mov	sl, r0
 800b390:	468b      	mov	fp, r1
 800b392:	ddd5      	ble.n	800b340 <_strtod_l+0x3a8>
 800b394:	9b06      	ldr	r3, [sp, #24]
 800b396:	eba4 0808 	sub.w	r8, r4, r8
 800b39a:	4498      	add	r8, r3
 800b39c:	f1b8 0f00 	cmp.w	r8, #0
 800b3a0:	f340 8096 	ble.w	800b4d0 <_strtod_l+0x538>
 800b3a4:	f018 030f 	ands.w	r3, r8, #15
 800b3a8:	d00a      	beq.n	800b3c0 <_strtod_l+0x428>
 800b3aa:	495f      	ldr	r1, [pc, #380]	; (800b528 <_strtod_l+0x590>)
 800b3ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b3b0:	4652      	mov	r2, sl
 800b3b2:	465b      	mov	r3, fp
 800b3b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3b8:	f7f5 f926 	bl	8000608 <__aeabi_dmul>
 800b3bc:	4682      	mov	sl, r0
 800b3be:	468b      	mov	fp, r1
 800b3c0:	f038 080f 	bics.w	r8, r8, #15
 800b3c4:	d073      	beq.n	800b4ae <_strtod_l+0x516>
 800b3c6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b3ca:	dd47      	ble.n	800b45c <_strtod_l+0x4c4>
 800b3cc:	2400      	movs	r4, #0
 800b3ce:	46a0      	mov	r8, r4
 800b3d0:	9407      	str	r4, [sp, #28]
 800b3d2:	9405      	str	r4, [sp, #20]
 800b3d4:	2322      	movs	r3, #34	; 0x22
 800b3d6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800b530 <_strtod_l+0x598>
 800b3da:	f8c9 3000 	str.w	r3, [r9]
 800b3de:	f04f 0a00 	mov.w	sl, #0
 800b3e2:	9b07      	ldr	r3, [sp, #28]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	f43f ae16 	beq.w	800b016 <_strtod_l+0x7e>
 800b3ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b3ec:	4648      	mov	r0, r9
 800b3ee:	f002 f8c7 	bl	800d580 <_Bfree>
 800b3f2:	9905      	ldr	r1, [sp, #20]
 800b3f4:	4648      	mov	r0, r9
 800b3f6:	f002 f8c3 	bl	800d580 <_Bfree>
 800b3fa:	4641      	mov	r1, r8
 800b3fc:	4648      	mov	r0, r9
 800b3fe:	f002 f8bf 	bl	800d580 <_Bfree>
 800b402:	9907      	ldr	r1, [sp, #28]
 800b404:	4648      	mov	r0, r9
 800b406:	f002 f8bb 	bl	800d580 <_Bfree>
 800b40a:	4621      	mov	r1, r4
 800b40c:	4648      	mov	r0, r9
 800b40e:	f002 f8b7 	bl	800d580 <_Bfree>
 800b412:	e600      	b.n	800b016 <_strtod_l+0x7e>
 800b414:	9a06      	ldr	r2, [sp, #24]
 800b416:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b41a:	4293      	cmp	r3, r2
 800b41c:	dbba      	blt.n	800b394 <_strtod_l+0x3fc>
 800b41e:	4d42      	ldr	r5, [pc, #264]	; (800b528 <_strtod_l+0x590>)
 800b420:	f1c4 040f 	rsb	r4, r4, #15
 800b424:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b428:	4652      	mov	r2, sl
 800b42a:	465b      	mov	r3, fp
 800b42c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b430:	f7f5 f8ea 	bl	8000608 <__aeabi_dmul>
 800b434:	9b06      	ldr	r3, [sp, #24]
 800b436:	1b1c      	subs	r4, r3, r4
 800b438:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b43c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b440:	e78d      	b.n	800b35e <_strtod_l+0x3c6>
 800b442:	f113 0f16 	cmn.w	r3, #22
 800b446:	dba5      	blt.n	800b394 <_strtod_l+0x3fc>
 800b448:	4a37      	ldr	r2, [pc, #220]	; (800b528 <_strtod_l+0x590>)
 800b44a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800b44e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b452:	4650      	mov	r0, sl
 800b454:	4659      	mov	r1, fp
 800b456:	f7f5 fa01 	bl	800085c <__aeabi_ddiv>
 800b45a:	e782      	b.n	800b362 <_strtod_l+0x3ca>
 800b45c:	2300      	movs	r3, #0
 800b45e:	4e33      	ldr	r6, [pc, #204]	; (800b52c <_strtod_l+0x594>)
 800b460:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b464:	4650      	mov	r0, sl
 800b466:	4659      	mov	r1, fp
 800b468:	461d      	mov	r5, r3
 800b46a:	f1b8 0f01 	cmp.w	r8, #1
 800b46e:	dc21      	bgt.n	800b4b4 <_strtod_l+0x51c>
 800b470:	b10b      	cbz	r3, 800b476 <_strtod_l+0x4de>
 800b472:	4682      	mov	sl, r0
 800b474:	468b      	mov	fp, r1
 800b476:	4b2d      	ldr	r3, [pc, #180]	; (800b52c <_strtod_l+0x594>)
 800b478:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b47c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b480:	4652      	mov	r2, sl
 800b482:	465b      	mov	r3, fp
 800b484:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b488:	f7f5 f8be 	bl	8000608 <__aeabi_dmul>
 800b48c:	4b28      	ldr	r3, [pc, #160]	; (800b530 <_strtod_l+0x598>)
 800b48e:	460a      	mov	r2, r1
 800b490:	400b      	ands	r3, r1
 800b492:	4928      	ldr	r1, [pc, #160]	; (800b534 <_strtod_l+0x59c>)
 800b494:	428b      	cmp	r3, r1
 800b496:	4682      	mov	sl, r0
 800b498:	d898      	bhi.n	800b3cc <_strtod_l+0x434>
 800b49a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b49e:	428b      	cmp	r3, r1
 800b4a0:	bf86      	itte	hi
 800b4a2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b53c <_strtod_l+0x5a4>
 800b4a6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800b4aa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	9304      	str	r3, [sp, #16]
 800b4b2:	e077      	b.n	800b5a4 <_strtod_l+0x60c>
 800b4b4:	f018 0f01 	tst.w	r8, #1
 800b4b8:	d006      	beq.n	800b4c8 <_strtod_l+0x530>
 800b4ba:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800b4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c2:	f7f5 f8a1 	bl	8000608 <__aeabi_dmul>
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	3501      	adds	r5, #1
 800b4ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b4ce:	e7cc      	b.n	800b46a <_strtod_l+0x4d2>
 800b4d0:	d0ed      	beq.n	800b4ae <_strtod_l+0x516>
 800b4d2:	f1c8 0800 	rsb	r8, r8, #0
 800b4d6:	f018 020f 	ands.w	r2, r8, #15
 800b4da:	d00a      	beq.n	800b4f2 <_strtod_l+0x55a>
 800b4dc:	4b12      	ldr	r3, [pc, #72]	; (800b528 <_strtod_l+0x590>)
 800b4de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4e2:	4650      	mov	r0, sl
 800b4e4:	4659      	mov	r1, fp
 800b4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ea:	f7f5 f9b7 	bl	800085c <__aeabi_ddiv>
 800b4ee:	4682      	mov	sl, r0
 800b4f0:	468b      	mov	fp, r1
 800b4f2:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b4f6:	d0da      	beq.n	800b4ae <_strtod_l+0x516>
 800b4f8:	f1b8 0f1f 	cmp.w	r8, #31
 800b4fc:	dd20      	ble.n	800b540 <_strtod_l+0x5a8>
 800b4fe:	2400      	movs	r4, #0
 800b500:	46a0      	mov	r8, r4
 800b502:	9407      	str	r4, [sp, #28]
 800b504:	9405      	str	r4, [sp, #20]
 800b506:	2322      	movs	r3, #34	; 0x22
 800b508:	f04f 0a00 	mov.w	sl, #0
 800b50c:	f04f 0b00 	mov.w	fp, #0
 800b510:	f8c9 3000 	str.w	r3, [r9]
 800b514:	e765      	b.n	800b3e2 <_strtod_l+0x44a>
 800b516:	bf00      	nop
 800b518:	0800eb93 	.word	0x0800eb93
 800b51c:	0800ed1c 	.word	0x0800ed1c
 800b520:	0800eb9b 	.word	0x0800eb9b
 800b524:	0800ebdc 	.word	0x0800ebdc
 800b528:	0800edb0 	.word	0x0800edb0
 800b52c:	0800ed88 	.word	0x0800ed88
 800b530:	7ff00000 	.word	0x7ff00000
 800b534:	7ca00000 	.word	0x7ca00000
 800b538:	fff80000 	.word	0xfff80000
 800b53c:	7fefffff 	.word	0x7fefffff
 800b540:	f018 0310 	ands.w	r3, r8, #16
 800b544:	bf18      	it	ne
 800b546:	236a      	movne	r3, #106	; 0x6a
 800b548:	4da0      	ldr	r5, [pc, #640]	; (800b7cc <_strtod_l+0x834>)
 800b54a:	9304      	str	r3, [sp, #16]
 800b54c:	4650      	mov	r0, sl
 800b54e:	4659      	mov	r1, fp
 800b550:	2300      	movs	r3, #0
 800b552:	f1b8 0f00 	cmp.w	r8, #0
 800b556:	f300 810a 	bgt.w	800b76e <_strtod_l+0x7d6>
 800b55a:	b10b      	cbz	r3, 800b560 <_strtod_l+0x5c8>
 800b55c:	4682      	mov	sl, r0
 800b55e:	468b      	mov	fp, r1
 800b560:	9b04      	ldr	r3, [sp, #16]
 800b562:	b1bb      	cbz	r3, 800b594 <_strtod_l+0x5fc>
 800b564:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b568:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	4659      	mov	r1, fp
 800b570:	dd10      	ble.n	800b594 <_strtod_l+0x5fc>
 800b572:	2b1f      	cmp	r3, #31
 800b574:	f340 8107 	ble.w	800b786 <_strtod_l+0x7ee>
 800b578:	2b34      	cmp	r3, #52	; 0x34
 800b57a:	bfde      	ittt	le
 800b57c:	3b20      	suble	r3, #32
 800b57e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800b582:	fa02 f303 	lslle.w	r3, r2, r3
 800b586:	f04f 0a00 	mov.w	sl, #0
 800b58a:	bfcc      	ite	gt
 800b58c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b590:	ea03 0b01 	andle.w	fp, r3, r1
 800b594:	2200      	movs	r2, #0
 800b596:	2300      	movs	r3, #0
 800b598:	4650      	mov	r0, sl
 800b59a:	4659      	mov	r1, fp
 800b59c:	f7f5 fa9c 	bl	8000ad8 <__aeabi_dcmpeq>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d1ac      	bne.n	800b4fe <_strtod_l+0x566>
 800b5a4:	9b07      	ldr	r3, [sp, #28]
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	9a05      	ldr	r2, [sp, #20]
 800b5aa:	9908      	ldr	r1, [sp, #32]
 800b5ac:	4623      	mov	r3, r4
 800b5ae:	4648      	mov	r0, r9
 800b5b0:	f002 f838 	bl	800d624 <__s2b>
 800b5b4:	9007      	str	r0, [sp, #28]
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	f43f af08 	beq.w	800b3cc <_strtod_l+0x434>
 800b5bc:	9a06      	ldr	r2, [sp, #24]
 800b5be:	9b06      	ldr	r3, [sp, #24]
 800b5c0:	2a00      	cmp	r2, #0
 800b5c2:	f1c3 0300 	rsb	r3, r3, #0
 800b5c6:	bfa8      	it	ge
 800b5c8:	2300      	movge	r3, #0
 800b5ca:	930e      	str	r3, [sp, #56]	; 0x38
 800b5cc:	2400      	movs	r4, #0
 800b5ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b5d2:	9316      	str	r3, [sp, #88]	; 0x58
 800b5d4:	46a0      	mov	r8, r4
 800b5d6:	9b07      	ldr	r3, [sp, #28]
 800b5d8:	4648      	mov	r0, r9
 800b5da:	6859      	ldr	r1, [r3, #4]
 800b5dc:	f001 ff9c 	bl	800d518 <_Balloc>
 800b5e0:	9005      	str	r0, [sp, #20]
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	f43f aef6 	beq.w	800b3d4 <_strtod_l+0x43c>
 800b5e8:	9b07      	ldr	r3, [sp, #28]
 800b5ea:	691a      	ldr	r2, [r3, #16]
 800b5ec:	3202      	adds	r2, #2
 800b5ee:	f103 010c 	add.w	r1, r3, #12
 800b5f2:	0092      	lsls	r2, r2, #2
 800b5f4:	300c      	adds	r0, #12
 800b5f6:	f7fe fdc0 	bl	800a17a <memcpy>
 800b5fa:	aa1e      	add	r2, sp, #120	; 0x78
 800b5fc:	a91d      	add	r1, sp, #116	; 0x74
 800b5fe:	ec4b ab10 	vmov	d0, sl, fp
 800b602:	4648      	mov	r0, r9
 800b604:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b608:	f002 fac8 	bl	800db9c <__d2b>
 800b60c:	901c      	str	r0, [sp, #112]	; 0x70
 800b60e:	2800      	cmp	r0, #0
 800b610:	f43f aee0 	beq.w	800b3d4 <_strtod_l+0x43c>
 800b614:	2101      	movs	r1, #1
 800b616:	4648      	mov	r0, r9
 800b618:	f002 f890 	bl	800d73c <__i2b>
 800b61c:	4680      	mov	r8, r0
 800b61e:	2800      	cmp	r0, #0
 800b620:	f43f aed8 	beq.w	800b3d4 <_strtod_l+0x43c>
 800b624:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b626:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b628:	2e00      	cmp	r6, #0
 800b62a:	bfab      	itete	ge
 800b62c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b62e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b630:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b632:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800b634:	bfac      	ite	ge
 800b636:	18f7      	addge	r7, r6, r3
 800b638:	1b9d      	sublt	r5, r3, r6
 800b63a:	9b04      	ldr	r3, [sp, #16]
 800b63c:	1af6      	subs	r6, r6, r3
 800b63e:	4416      	add	r6, r2
 800b640:	4b63      	ldr	r3, [pc, #396]	; (800b7d0 <_strtod_l+0x838>)
 800b642:	3e01      	subs	r6, #1
 800b644:	429e      	cmp	r6, r3
 800b646:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b64a:	f280 80af 	bge.w	800b7ac <_strtod_l+0x814>
 800b64e:	1b9b      	subs	r3, r3, r6
 800b650:	2b1f      	cmp	r3, #31
 800b652:	eba2 0203 	sub.w	r2, r2, r3
 800b656:	f04f 0101 	mov.w	r1, #1
 800b65a:	f300 809b 	bgt.w	800b794 <_strtod_l+0x7fc>
 800b65e:	fa01 f303 	lsl.w	r3, r1, r3
 800b662:	930f      	str	r3, [sp, #60]	; 0x3c
 800b664:	2300      	movs	r3, #0
 800b666:	930a      	str	r3, [sp, #40]	; 0x28
 800b668:	18be      	adds	r6, r7, r2
 800b66a:	9b04      	ldr	r3, [sp, #16]
 800b66c:	42b7      	cmp	r7, r6
 800b66e:	4415      	add	r5, r2
 800b670:	441d      	add	r5, r3
 800b672:	463b      	mov	r3, r7
 800b674:	bfa8      	it	ge
 800b676:	4633      	movge	r3, r6
 800b678:	42ab      	cmp	r3, r5
 800b67a:	bfa8      	it	ge
 800b67c:	462b      	movge	r3, r5
 800b67e:	2b00      	cmp	r3, #0
 800b680:	bfc2      	ittt	gt
 800b682:	1af6      	subgt	r6, r6, r3
 800b684:	1aed      	subgt	r5, r5, r3
 800b686:	1aff      	subgt	r7, r7, r3
 800b688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b68a:	b1bb      	cbz	r3, 800b6bc <_strtod_l+0x724>
 800b68c:	4641      	mov	r1, r8
 800b68e:	461a      	mov	r2, r3
 800b690:	4648      	mov	r0, r9
 800b692:	f002 f8f3 	bl	800d87c <__pow5mult>
 800b696:	4680      	mov	r8, r0
 800b698:	2800      	cmp	r0, #0
 800b69a:	f43f ae9b 	beq.w	800b3d4 <_strtod_l+0x43c>
 800b69e:	4601      	mov	r1, r0
 800b6a0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b6a2:	4648      	mov	r0, r9
 800b6a4:	f002 f853 	bl	800d74e <__multiply>
 800b6a8:	900c      	str	r0, [sp, #48]	; 0x30
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	f43f ae92 	beq.w	800b3d4 <_strtod_l+0x43c>
 800b6b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b6b2:	4648      	mov	r0, r9
 800b6b4:	f001 ff64 	bl	800d580 <_Bfree>
 800b6b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6ba:	931c      	str	r3, [sp, #112]	; 0x70
 800b6bc:	2e00      	cmp	r6, #0
 800b6be:	dc7a      	bgt.n	800b7b6 <_strtod_l+0x81e>
 800b6c0:	9b06      	ldr	r3, [sp, #24]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	dd08      	ble.n	800b6d8 <_strtod_l+0x740>
 800b6c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b6c8:	9905      	ldr	r1, [sp, #20]
 800b6ca:	4648      	mov	r0, r9
 800b6cc:	f002 f8d6 	bl	800d87c <__pow5mult>
 800b6d0:	9005      	str	r0, [sp, #20]
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	f43f ae7e 	beq.w	800b3d4 <_strtod_l+0x43c>
 800b6d8:	2d00      	cmp	r5, #0
 800b6da:	dd08      	ble.n	800b6ee <_strtod_l+0x756>
 800b6dc:	462a      	mov	r2, r5
 800b6de:	9905      	ldr	r1, [sp, #20]
 800b6e0:	4648      	mov	r0, r9
 800b6e2:	f002 f919 	bl	800d918 <__lshift>
 800b6e6:	9005      	str	r0, [sp, #20]
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	f43f ae73 	beq.w	800b3d4 <_strtod_l+0x43c>
 800b6ee:	2f00      	cmp	r7, #0
 800b6f0:	dd08      	ble.n	800b704 <_strtod_l+0x76c>
 800b6f2:	4641      	mov	r1, r8
 800b6f4:	463a      	mov	r2, r7
 800b6f6:	4648      	mov	r0, r9
 800b6f8:	f002 f90e 	bl	800d918 <__lshift>
 800b6fc:	4680      	mov	r8, r0
 800b6fe:	2800      	cmp	r0, #0
 800b700:	f43f ae68 	beq.w	800b3d4 <_strtod_l+0x43c>
 800b704:	9a05      	ldr	r2, [sp, #20]
 800b706:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b708:	4648      	mov	r0, r9
 800b70a:	f002 f973 	bl	800d9f4 <__mdiff>
 800b70e:	4604      	mov	r4, r0
 800b710:	2800      	cmp	r0, #0
 800b712:	f43f ae5f 	beq.w	800b3d4 <_strtod_l+0x43c>
 800b716:	68c3      	ldr	r3, [r0, #12]
 800b718:	930c      	str	r3, [sp, #48]	; 0x30
 800b71a:	2300      	movs	r3, #0
 800b71c:	60c3      	str	r3, [r0, #12]
 800b71e:	4641      	mov	r1, r8
 800b720:	f002 f94e 	bl	800d9c0 <__mcmp>
 800b724:	2800      	cmp	r0, #0
 800b726:	da55      	bge.n	800b7d4 <_strtod_l+0x83c>
 800b728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b72a:	b9e3      	cbnz	r3, 800b766 <_strtod_l+0x7ce>
 800b72c:	f1ba 0f00 	cmp.w	sl, #0
 800b730:	d119      	bne.n	800b766 <_strtod_l+0x7ce>
 800b732:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b736:	b9b3      	cbnz	r3, 800b766 <_strtod_l+0x7ce>
 800b738:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b73c:	0d1b      	lsrs	r3, r3, #20
 800b73e:	051b      	lsls	r3, r3, #20
 800b740:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b744:	d90f      	bls.n	800b766 <_strtod_l+0x7ce>
 800b746:	6963      	ldr	r3, [r4, #20]
 800b748:	b913      	cbnz	r3, 800b750 <_strtod_l+0x7b8>
 800b74a:	6923      	ldr	r3, [r4, #16]
 800b74c:	2b01      	cmp	r3, #1
 800b74e:	dd0a      	ble.n	800b766 <_strtod_l+0x7ce>
 800b750:	4621      	mov	r1, r4
 800b752:	2201      	movs	r2, #1
 800b754:	4648      	mov	r0, r9
 800b756:	f002 f8df 	bl	800d918 <__lshift>
 800b75a:	4641      	mov	r1, r8
 800b75c:	4604      	mov	r4, r0
 800b75e:	f002 f92f 	bl	800d9c0 <__mcmp>
 800b762:	2800      	cmp	r0, #0
 800b764:	dc67      	bgt.n	800b836 <_strtod_l+0x89e>
 800b766:	9b04      	ldr	r3, [sp, #16]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d171      	bne.n	800b850 <_strtod_l+0x8b8>
 800b76c:	e63d      	b.n	800b3ea <_strtod_l+0x452>
 800b76e:	f018 0f01 	tst.w	r8, #1
 800b772:	d004      	beq.n	800b77e <_strtod_l+0x7e6>
 800b774:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b778:	f7f4 ff46 	bl	8000608 <__aeabi_dmul>
 800b77c:	2301      	movs	r3, #1
 800b77e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b782:	3508      	adds	r5, #8
 800b784:	e6e5      	b.n	800b552 <_strtod_l+0x5ba>
 800b786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b78a:	fa02 f303 	lsl.w	r3, r2, r3
 800b78e:	ea03 0a0a 	and.w	sl, r3, sl
 800b792:	e6ff      	b.n	800b594 <_strtod_l+0x5fc>
 800b794:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b798:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b79c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b7a0:	36e2      	adds	r6, #226	; 0xe2
 800b7a2:	fa01 f306 	lsl.w	r3, r1, r6
 800b7a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b7a8:	910f      	str	r1, [sp, #60]	; 0x3c
 800b7aa:	e75d      	b.n	800b668 <_strtod_l+0x6d0>
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	930a      	str	r3, [sp, #40]	; 0x28
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7b4:	e758      	b.n	800b668 <_strtod_l+0x6d0>
 800b7b6:	4632      	mov	r2, r6
 800b7b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b7ba:	4648      	mov	r0, r9
 800b7bc:	f002 f8ac 	bl	800d918 <__lshift>
 800b7c0:	901c      	str	r0, [sp, #112]	; 0x70
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	f47f af7c 	bne.w	800b6c0 <_strtod_l+0x728>
 800b7c8:	e604      	b.n	800b3d4 <_strtod_l+0x43c>
 800b7ca:	bf00      	nop
 800b7cc:	0800ebf0 	.word	0x0800ebf0
 800b7d0:	fffffc02 	.word	0xfffffc02
 800b7d4:	465d      	mov	r5, fp
 800b7d6:	f040 8086 	bne.w	800b8e6 <_strtod_l+0x94e>
 800b7da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7e0:	b32a      	cbz	r2, 800b82e <_strtod_l+0x896>
 800b7e2:	4aaf      	ldr	r2, [pc, #700]	; (800baa0 <_strtod_l+0xb08>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d153      	bne.n	800b890 <_strtod_l+0x8f8>
 800b7e8:	9b04      	ldr	r3, [sp, #16]
 800b7ea:	4650      	mov	r0, sl
 800b7ec:	b1d3      	cbz	r3, 800b824 <_strtod_l+0x88c>
 800b7ee:	4aad      	ldr	r2, [pc, #692]	; (800baa4 <_strtod_l+0xb0c>)
 800b7f0:	402a      	ands	r2, r5
 800b7f2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b7f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b7fa:	d816      	bhi.n	800b82a <_strtod_l+0x892>
 800b7fc:	0d12      	lsrs	r2, r2, #20
 800b7fe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b802:	fa01 f303 	lsl.w	r3, r1, r3
 800b806:	4298      	cmp	r0, r3
 800b808:	d142      	bne.n	800b890 <_strtod_l+0x8f8>
 800b80a:	4ba7      	ldr	r3, [pc, #668]	; (800baa8 <_strtod_l+0xb10>)
 800b80c:	429d      	cmp	r5, r3
 800b80e:	d102      	bne.n	800b816 <_strtod_l+0x87e>
 800b810:	3001      	adds	r0, #1
 800b812:	f43f addf 	beq.w	800b3d4 <_strtod_l+0x43c>
 800b816:	4ba3      	ldr	r3, [pc, #652]	; (800baa4 <_strtod_l+0xb0c>)
 800b818:	402b      	ands	r3, r5
 800b81a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b81e:	f04f 0a00 	mov.w	sl, #0
 800b822:	e7a0      	b.n	800b766 <_strtod_l+0x7ce>
 800b824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b828:	e7ed      	b.n	800b806 <_strtod_l+0x86e>
 800b82a:	460b      	mov	r3, r1
 800b82c:	e7eb      	b.n	800b806 <_strtod_l+0x86e>
 800b82e:	bb7b      	cbnz	r3, 800b890 <_strtod_l+0x8f8>
 800b830:	f1ba 0f00 	cmp.w	sl, #0
 800b834:	d12c      	bne.n	800b890 <_strtod_l+0x8f8>
 800b836:	9904      	ldr	r1, [sp, #16]
 800b838:	4a9a      	ldr	r2, [pc, #616]	; (800baa4 <_strtod_l+0xb0c>)
 800b83a:	465b      	mov	r3, fp
 800b83c:	b1f1      	cbz	r1, 800b87c <_strtod_l+0x8e4>
 800b83e:	ea02 010b 	and.w	r1, r2, fp
 800b842:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b846:	dc19      	bgt.n	800b87c <_strtod_l+0x8e4>
 800b848:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b84c:	f77f ae5b 	ble.w	800b506 <_strtod_l+0x56e>
 800b850:	4a96      	ldr	r2, [pc, #600]	; (800baac <_strtod_l+0xb14>)
 800b852:	2300      	movs	r3, #0
 800b854:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b858:	4650      	mov	r0, sl
 800b85a:	4659      	mov	r1, fp
 800b85c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b860:	f7f4 fed2 	bl	8000608 <__aeabi_dmul>
 800b864:	4682      	mov	sl, r0
 800b866:	468b      	mov	fp, r1
 800b868:	2900      	cmp	r1, #0
 800b86a:	f47f adbe 	bne.w	800b3ea <_strtod_l+0x452>
 800b86e:	2800      	cmp	r0, #0
 800b870:	f47f adbb 	bne.w	800b3ea <_strtod_l+0x452>
 800b874:	2322      	movs	r3, #34	; 0x22
 800b876:	f8c9 3000 	str.w	r3, [r9]
 800b87a:	e5b6      	b.n	800b3ea <_strtod_l+0x452>
 800b87c:	4013      	ands	r3, r2
 800b87e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b882:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b886:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b88a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b88e:	e76a      	b.n	800b766 <_strtod_l+0x7ce>
 800b890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b892:	b193      	cbz	r3, 800b8ba <_strtod_l+0x922>
 800b894:	422b      	tst	r3, r5
 800b896:	f43f af66 	beq.w	800b766 <_strtod_l+0x7ce>
 800b89a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b89c:	9a04      	ldr	r2, [sp, #16]
 800b89e:	4650      	mov	r0, sl
 800b8a0:	4659      	mov	r1, fp
 800b8a2:	b173      	cbz	r3, 800b8c2 <_strtod_l+0x92a>
 800b8a4:	f7ff fb5c 	bl	800af60 <sulp>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b8b0:	f7f4 fcf4 	bl	800029c <__adddf3>
 800b8b4:	4682      	mov	sl, r0
 800b8b6:	468b      	mov	fp, r1
 800b8b8:	e755      	b.n	800b766 <_strtod_l+0x7ce>
 800b8ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8bc:	ea13 0f0a 	tst.w	r3, sl
 800b8c0:	e7e9      	b.n	800b896 <_strtod_l+0x8fe>
 800b8c2:	f7ff fb4d 	bl	800af60 <sulp>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b8ce:	f7f4 fce3 	bl	8000298 <__aeabi_dsub>
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	4682      	mov	sl, r0
 800b8d8:	468b      	mov	fp, r1
 800b8da:	f7f5 f8fd 	bl	8000ad8 <__aeabi_dcmpeq>
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	f47f ae11 	bne.w	800b506 <_strtod_l+0x56e>
 800b8e4:	e73f      	b.n	800b766 <_strtod_l+0x7ce>
 800b8e6:	4641      	mov	r1, r8
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f002 f9a6 	bl	800dc3a <__ratio>
 800b8ee:	ec57 6b10 	vmov	r6, r7, d0
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b8f8:	ee10 0a10 	vmov	r0, s0
 800b8fc:	4639      	mov	r1, r7
 800b8fe:	f7f5 f8ff 	bl	8000b00 <__aeabi_dcmple>
 800b902:	2800      	cmp	r0, #0
 800b904:	d077      	beq.n	800b9f6 <_strtod_l+0xa5e>
 800b906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d04a      	beq.n	800b9a2 <_strtod_l+0xa0a>
 800b90c:	4b68      	ldr	r3, [pc, #416]	; (800bab0 <_strtod_l+0xb18>)
 800b90e:	2200      	movs	r2, #0
 800b910:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b914:	4f66      	ldr	r7, [pc, #408]	; (800bab0 <_strtod_l+0xb18>)
 800b916:	2600      	movs	r6, #0
 800b918:	4b62      	ldr	r3, [pc, #392]	; (800baa4 <_strtod_l+0xb0c>)
 800b91a:	402b      	ands	r3, r5
 800b91c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b91e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b920:	4b64      	ldr	r3, [pc, #400]	; (800bab4 <_strtod_l+0xb1c>)
 800b922:	429a      	cmp	r2, r3
 800b924:	f040 80ce 	bne.w	800bac4 <_strtod_l+0xb2c>
 800b928:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b92c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b930:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800b934:	ec4b ab10 	vmov	d0, sl, fp
 800b938:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b93c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b940:	f002 f8b6 	bl	800dab0 <__ulp>
 800b944:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b948:	ec53 2b10 	vmov	r2, r3, d0
 800b94c:	f7f4 fe5c 	bl	8000608 <__aeabi_dmul>
 800b950:	4652      	mov	r2, sl
 800b952:	465b      	mov	r3, fp
 800b954:	f7f4 fca2 	bl	800029c <__adddf3>
 800b958:	460b      	mov	r3, r1
 800b95a:	4952      	ldr	r1, [pc, #328]	; (800baa4 <_strtod_l+0xb0c>)
 800b95c:	4a56      	ldr	r2, [pc, #344]	; (800bab8 <_strtod_l+0xb20>)
 800b95e:	4019      	ands	r1, r3
 800b960:	4291      	cmp	r1, r2
 800b962:	4682      	mov	sl, r0
 800b964:	d95b      	bls.n	800ba1e <_strtod_l+0xa86>
 800b966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b968:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d103      	bne.n	800b978 <_strtod_l+0x9e0>
 800b970:	9b08      	ldr	r3, [sp, #32]
 800b972:	3301      	adds	r3, #1
 800b974:	f43f ad2e 	beq.w	800b3d4 <_strtod_l+0x43c>
 800b978:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800baa8 <_strtod_l+0xb10>
 800b97c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b980:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b982:	4648      	mov	r0, r9
 800b984:	f001 fdfc 	bl	800d580 <_Bfree>
 800b988:	9905      	ldr	r1, [sp, #20]
 800b98a:	4648      	mov	r0, r9
 800b98c:	f001 fdf8 	bl	800d580 <_Bfree>
 800b990:	4641      	mov	r1, r8
 800b992:	4648      	mov	r0, r9
 800b994:	f001 fdf4 	bl	800d580 <_Bfree>
 800b998:	4621      	mov	r1, r4
 800b99a:	4648      	mov	r0, r9
 800b99c:	f001 fdf0 	bl	800d580 <_Bfree>
 800b9a0:	e619      	b.n	800b5d6 <_strtod_l+0x63e>
 800b9a2:	f1ba 0f00 	cmp.w	sl, #0
 800b9a6:	d11a      	bne.n	800b9de <_strtod_l+0xa46>
 800b9a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9ac:	b9eb      	cbnz	r3, 800b9ea <_strtod_l+0xa52>
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	4b3f      	ldr	r3, [pc, #252]	; (800bab0 <_strtod_l+0xb18>)
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	4639      	mov	r1, r7
 800b9b6:	f7f5 f899 	bl	8000aec <__aeabi_dcmplt>
 800b9ba:	b9c8      	cbnz	r0, 800b9f0 <_strtod_l+0xa58>
 800b9bc:	4630      	mov	r0, r6
 800b9be:	4639      	mov	r1, r7
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	4b3e      	ldr	r3, [pc, #248]	; (800babc <_strtod_l+0xb24>)
 800b9c4:	f7f4 fe20 	bl	8000608 <__aeabi_dmul>
 800b9c8:	4606      	mov	r6, r0
 800b9ca:	460f      	mov	r7, r1
 800b9cc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b9d0:	9618      	str	r6, [sp, #96]	; 0x60
 800b9d2:	9319      	str	r3, [sp, #100]	; 0x64
 800b9d4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b9d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b9dc:	e79c      	b.n	800b918 <_strtod_l+0x980>
 800b9de:	f1ba 0f01 	cmp.w	sl, #1
 800b9e2:	d102      	bne.n	800b9ea <_strtod_l+0xa52>
 800b9e4:	2d00      	cmp	r5, #0
 800b9e6:	f43f ad8e 	beq.w	800b506 <_strtod_l+0x56e>
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	4b34      	ldr	r3, [pc, #208]	; (800bac0 <_strtod_l+0xb28>)
 800b9ee:	e78f      	b.n	800b910 <_strtod_l+0x978>
 800b9f0:	2600      	movs	r6, #0
 800b9f2:	4f32      	ldr	r7, [pc, #200]	; (800babc <_strtod_l+0xb24>)
 800b9f4:	e7ea      	b.n	800b9cc <_strtod_l+0xa34>
 800b9f6:	4b31      	ldr	r3, [pc, #196]	; (800babc <_strtod_l+0xb24>)
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	4639      	mov	r1, r7
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	f7f4 fe03 	bl	8000608 <__aeabi_dmul>
 800ba02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba04:	4606      	mov	r6, r0
 800ba06:	460f      	mov	r7, r1
 800ba08:	b933      	cbnz	r3, 800ba18 <_strtod_l+0xa80>
 800ba0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba0e:	9010      	str	r0, [sp, #64]	; 0x40
 800ba10:	9311      	str	r3, [sp, #68]	; 0x44
 800ba12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ba16:	e7df      	b.n	800b9d8 <_strtod_l+0xa40>
 800ba18:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ba1c:	e7f9      	b.n	800ba12 <_strtod_l+0xa7a>
 800ba1e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ba22:	9b04      	ldr	r3, [sp, #16]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1ab      	bne.n	800b980 <_strtod_l+0x9e8>
 800ba28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ba2c:	0d1b      	lsrs	r3, r3, #20
 800ba2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba30:	051b      	lsls	r3, r3, #20
 800ba32:	429a      	cmp	r2, r3
 800ba34:	465d      	mov	r5, fp
 800ba36:	d1a3      	bne.n	800b980 <_strtod_l+0x9e8>
 800ba38:	4639      	mov	r1, r7
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f7f5 f894 	bl	8000b68 <__aeabi_d2iz>
 800ba40:	f7f4 fd78 	bl	8000534 <__aeabi_i2d>
 800ba44:	460b      	mov	r3, r1
 800ba46:	4602      	mov	r2, r0
 800ba48:	4639      	mov	r1, r7
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f7f4 fc24 	bl	8000298 <__aeabi_dsub>
 800ba50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba52:	4606      	mov	r6, r0
 800ba54:	460f      	mov	r7, r1
 800ba56:	b933      	cbnz	r3, 800ba66 <_strtod_l+0xace>
 800ba58:	f1ba 0f00 	cmp.w	sl, #0
 800ba5c:	d103      	bne.n	800ba66 <_strtod_l+0xace>
 800ba5e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800ba62:	2d00      	cmp	r5, #0
 800ba64:	d06d      	beq.n	800bb42 <_strtod_l+0xbaa>
 800ba66:	a30a      	add	r3, pc, #40	; (adr r3, 800ba90 <_strtod_l+0xaf8>)
 800ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	4639      	mov	r1, r7
 800ba70:	f7f5 f83c 	bl	8000aec <__aeabi_dcmplt>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	f47f acb8 	bne.w	800b3ea <_strtod_l+0x452>
 800ba7a:	a307      	add	r3, pc, #28	; (adr r3, 800ba98 <_strtod_l+0xb00>)
 800ba7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba80:	4630      	mov	r0, r6
 800ba82:	4639      	mov	r1, r7
 800ba84:	f7f5 f850 	bl	8000b28 <__aeabi_dcmpgt>
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	f43f af79 	beq.w	800b980 <_strtod_l+0x9e8>
 800ba8e:	e4ac      	b.n	800b3ea <_strtod_l+0x452>
 800ba90:	94a03595 	.word	0x94a03595
 800ba94:	3fdfffff 	.word	0x3fdfffff
 800ba98:	35afe535 	.word	0x35afe535
 800ba9c:	3fe00000 	.word	0x3fe00000
 800baa0:	000fffff 	.word	0x000fffff
 800baa4:	7ff00000 	.word	0x7ff00000
 800baa8:	7fefffff 	.word	0x7fefffff
 800baac:	39500000 	.word	0x39500000
 800bab0:	3ff00000 	.word	0x3ff00000
 800bab4:	7fe00000 	.word	0x7fe00000
 800bab8:	7c9fffff 	.word	0x7c9fffff
 800babc:	3fe00000 	.word	0x3fe00000
 800bac0:	bff00000 	.word	0xbff00000
 800bac4:	9b04      	ldr	r3, [sp, #16]
 800bac6:	b333      	cbz	r3, 800bb16 <_strtod_l+0xb7e>
 800bac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800baca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bace:	d822      	bhi.n	800bb16 <_strtod_l+0xb7e>
 800bad0:	a327      	add	r3, pc, #156	; (adr r3, 800bb70 <_strtod_l+0xbd8>)
 800bad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad6:	4630      	mov	r0, r6
 800bad8:	4639      	mov	r1, r7
 800bada:	f7f5 f811 	bl	8000b00 <__aeabi_dcmple>
 800bade:	b1a0      	cbz	r0, 800bb0a <_strtod_l+0xb72>
 800bae0:	4639      	mov	r1, r7
 800bae2:	4630      	mov	r0, r6
 800bae4:	f7f5 f868 	bl	8000bb8 <__aeabi_d2uiz>
 800bae8:	2800      	cmp	r0, #0
 800baea:	bf08      	it	eq
 800baec:	2001      	moveq	r0, #1
 800baee:	f7f4 fd11 	bl	8000514 <__aeabi_ui2d>
 800baf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baf4:	4606      	mov	r6, r0
 800baf6:	460f      	mov	r7, r1
 800baf8:	bb03      	cbnz	r3, 800bb3c <_strtod_l+0xba4>
 800bafa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bafe:	9012      	str	r0, [sp, #72]	; 0x48
 800bb00:	9313      	str	r3, [sp, #76]	; 0x4c
 800bb02:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800bb06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bb0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bb0e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bb12:	1a9b      	subs	r3, r3, r2
 800bb14:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb16:	ed9d 0b08 	vldr	d0, [sp, #32]
 800bb1a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800bb1e:	f001 ffc7 	bl	800dab0 <__ulp>
 800bb22:	4650      	mov	r0, sl
 800bb24:	ec53 2b10 	vmov	r2, r3, d0
 800bb28:	4659      	mov	r1, fp
 800bb2a:	f7f4 fd6d 	bl	8000608 <__aeabi_dmul>
 800bb2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bb32:	f7f4 fbb3 	bl	800029c <__adddf3>
 800bb36:	4682      	mov	sl, r0
 800bb38:	468b      	mov	fp, r1
 800bb3a:	e772      	b.n	800ba22 <_strtod_l+0xa8a>
 800bb3c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800bb40:	e7df      	b.n	800bb02 <_strtod_l+0xb6a>
 800bb42:	a30d      	add	r3, pc, #52	; (adr r3, 800bb78 <_strtod_l+0xbe0>)
 800bb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb48:	f7f4 ffd0 	bl	8000aec <__aeabi_dcmplt>
 800bb4c:	e79c      	b.n	800ba88 <_strtod_l+0xaf0>
 800bb4e:	2300      	movs	r3, #0
 800bb50:	930d      	str	r3, [sp, #52]	; 0x34
 800bb52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bb54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb56:	6013      	str	r3, [r2, #0]
 800bb58:	f7ff ba61 	b.w	800b01e <_strtod_l+0x86>
 800bb5c:	2b65      	cmp	r3, #101	; 0x65
 800bb5e:	f04f 0200 	mov.w	r2, #0
 800bb62:	f43f ab4e 	beq.w	800b202 <_strtod_l+0x26a>
 800bb66:	2101      	movs	r1, #1
 800bb68:	4614      	mov	r4, r2
 800bb6a:	9104      	str	r1, [sp, #16]
 800bb6c:	f7ff bacb 	b.w	800b106 <_strtod_l+0x16e>
 800bb70:	ffc00000 	.word	0xffc00000
 800bb74:	41dfffff 	.word	0x41dfffff
 800bb78:	94a03595 	.word	0x94a03595
 800bb7c:	3fcfffff 	.word	0x3fcfffff

0800bb80 <_strtod_r>:
 800bb80:	4b05      	ldr	r3, [pc, #20]	; (800bb98 <_strtod_r+0x18>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	b410      	push	{r4}
 800bb86:	6a1b      	ldr	r3, [r3, #32]
 800bb88:	4c04      	ldr	r4, [pc, #16]	; (800bb9c <_strtod_r+0x1c>)
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	bf08      	it	eq
 800bb8e:	4623      	moveq	r3, r4
 800bb90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb94:	f7ff ba00 	b.w	800af98 <_strtod_l>
 800bb98:	20000088 	.word	0x20000088
 800bb9c:	200000ec 	.word	0x200000ec

0800bba0 <_strtol_l.isra.0>:
 800bba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bba4:	4680      	mov	r8, r0
 800bba6:	4689      	mov	r9, r1
 800bba8:	4692      	mov	sl, r2
 800bbaa:	461e      	mov	r6, r3
 800bbac:	460f      	mov	r7, r1
 800bbae:	463d      	mov	r5, r7
 800bbb0:	9808      	ldr	r0, [sp, #32]
 800bbb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbb6:	f7fe facb 	bl	800a150 <__locale_ctype_ptr_l>
 800bbba:	4420      	add	r0, r4
 800bbbc:	7843      	ldrb	r3, [r0, #1]
 800bbbe:	f013 0308 	ands.w	r3, r3, #8
 800bbc2:	d132      	bne.n	800bc2a <_strtol_l.isra.0+0x8a>
 800bbc4:	2c2d      	cmp	r4, #45	; 0x2d
 800bbc6:	d132      	bne.n	800bc2e <_strtol_l.isra.0+0x8e>
 800bbc8:	787c      	ldrb	r4, [r7, #1]
 800bbca:	1cbd      	adds	r5, r7, #2
 800bbcc:	2201      	movs	r2, #1
 800bbce:	2e00      	cmp	r6, #0
 800bbd0:	d05d      	beq.n	800bc8e <_strtol_l.isra.0+0xee>
 800bbd2:	2e10      	cmp	r6, #16
 800bbd4:	d109      	bne.n	800bbea <_strtol_l.isra.0+0x4a>
 800bbd6:	2c30      	cmp	r4, #48	; 0x30
 800bbd8:	d107      	bne.n	800bbea <_strtol_l.isra.0+0x4a>
 800bbda:	782b      	ldrb	r3, [r5, #0]
 800bbdc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bbe0:	2b58      	cmp	r3, #88	; 0x58
 800bbe2:	d14f      	bne.n	800bc84 <_strtol_l.isra.0+0xe4>
 800bbe4:	786c      	ldrb	r4, [r5, #1]
 800bbe6:	2610      	movs	r6, #16
 800bbe8:	3502      	adds	r5, #2
 800bbea:	2a00      	cmp	r2, #0
 800bbec:	bf14      	ite	ne
 800bbee:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800bbf2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800bbf6:	2700      	movs	r7, #0
 800bbf8:	fbb1 fcf6 	udiv	ip, r1, r6
 800bbfc:	4638      	mov	r0, r7
 800bbfe:	fb06 1e1c 	mls	lr, r6, ip, r1
 800bc02:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800bc06:	2b09      	cmp	r3, #9
 800bc08:	d817      	bhi.n	800bc3a <_strtol_l.isra.0+0x9a>
 800bc0a:	461c      	mov	r4, r3
 800bc0c:	42a6      	cmp	r6, r4
 800bc0e:	dd23      	ble.n	800bc58 <_strtol_l.isra.0+0xb8>
 800bc10:	1c7b      	adds	r3, r7, #1
 800bc12:	d007      	beq.n	800bc24 <_strtol_l.isra.0+0x84>
 800bc14:	4584      	cmp	ip, r0
 800bc16:	d31c      	bcc.n	800bc52 <_strtol_l.isra.0+0xb2>
 800bc18:	d101      	bne.n	800bc1e <_strtol_l.isra.0+0x7e>
 800bc1a:	45a6      	cmp	lr, r4
 800bc1c:	db19      	blt.n	800bc52 <_strtol_l.isra.0+0xb2>
 800bc1e:	fb00 4006 	mla	r0, r0, r6, r4
 800bc22:	2701      	movs	r7, #1
 800bc24:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc28:	e7eb      	b.n	800bc02 <_strtol_l.isra.0+0x62>
 800bc2a:	462f      	mov	r7, r5
 800bc2c:	e7bf      	b.n	800bbae <_strtol_l.isra.0+0xe>
 800bc2e:	2c2b      	cmp	r4, #43	; 0x2b
 800bc30:	bf04      	itt	eq
 800bc32:	1cbd      	addeq	r5, r7, #2
 800bc34:	787c      	ldrbeq	r4, [r7, #1]
 800bc36:	461a      	mov	r2, r3
 800bc38:	e7c9      	b.n	800bbce <_strtol_l.isra.0+0x2e>
 800bc3a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800bc3e:	2b19      	cmp	r3, #25
 800bc40:	d801      	bhi.n	800bc46 <_strtol_l.isra.0+0xa6>
 800bc42:	3c37      	subs	r4, #55	; 0x37
 800bc44:	e7e2      	b.n	800bc0c <_strtol_l.isra.0+0x6c>
 800bc46:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800bc4a:	2b19      	cmp	r3, #25
 800bc4c:	d804      	bhi.n	800bc58 <_strtol_l.isra.0+0xb8>
 800bc4e:	3c57      	subs	r4, #87	; 0x57
 800bc50:	e7dc      	b.n	800bc0c <_strtol_l.isra.0+0x6c>
 800bc52:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bc56:	e7e5      	b.n	800bc24 <_strtol_l.isra.0+0x84>
 800bc58:	1c7b      	adds	r3, r7, #1
 800bc5a:	d108      	bne.n	800bc6e <_strtol_l.isra.0+0xce>
 800bc5c:	2322      	movs	r3, #34	; 0x22
 800bc5e:	f8c8 3000 	str.w	r3, [r8]
 800bc62:	4608      	mov	r0, r1
 800bc64:	f1ba 0f00 	cmp.w	sl, #0
 800bc68:	d107      	bne.n	800bc7a <_strtol_l.isra.0+0xda>
 800bc6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc6e:	b102      	cbz	r2, 800bc72 <_strtol_l.isra.0+0xd2>
 800bc70:	4240      	negs	r0, r0
 800bc72:	f1ba 0f00 	cmp.w	sl, #0
 800bc76:	d0f8      	beq.n	800bc6a <_strtol_l.isra.0+0xca>
 800bc78:	b10f      	cbz	r7, 800bc7e <_strtol_l.isra.0+0xde>
 800bc7a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800bc7e:	f8ca 9000 	str.w	r9, [sl]
 800bc82:	e7f2      	b.n	800bc6a <_strtol_l.isra.0+0xca>
 800bc84:	2430      	movs	r4, #48	; 0x30
 800bc86:	2e00      	cmp	r6, #0
 800bc88:	d1af      	bne.n	800bbea <_strtol_l.isra.0+0x4a>
 800bc8a:	2608      	movs	r6, #8
 800bc8c:	e7ad      	b.n	800bbea <_strtol_l.isra.0+0x4a>
 800bc8e:	2c30      	cmp	r4, #48	; 0x30
 800bc90:	d0a3      	beq.n	800bbda <_strtol_l.isra.0+0x3a>
 800bc92:	260a      	movs	r6, #10
 800bc94:	e7a9      	b.n	800bbea <_strtol_l.isra.0+0x4a>
	...

0800bc98 <_strtol_r>:
 800bc98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc9a:	4c06      	ldr	r4, [pc, #24]	; (800bcb4 <_strtol_r+0x1c>)
 800bc9c:	4d06      	ldr	r5, [pc, #24]	; (800bcb8 <_strtol_r+0x20>)
 800bc9e:	6824      	ldr	r4, [r4, #0]
 800bca0:	6a24      	ldr	r4, [r4, #32]
 800bca2:	2c00      	cmp	r4, #0
 800bca4:	bf08      	it	eq
 800bca6:	462c      	moveq	r4, r5
 800bca8:	9400      	str	r4, [sp, #0]
 800bcaa:	f7ff ff79 	bl	800bba0 <_strtol_l.isra.0>
 800bcae:	b003      	add	sp, #12
 800bcb0:	bd30      	pop	{r4, r5, pc}
 800bcb2:	bf00      	nop
 800bcb4:	20000088 	.word	0x20000088
 800bcb8:	200000ec 	.word	0x200000ec

0800bcbc <__swbuf_r>:
 800bcbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcbe:	460e      	mov	r6, r1
 800bcc0:	4614      	mov	r4, r2
 800bcc2:	4605      	mov	r5, r0
 800bcc4:	b118      	cbz	r0, 800bcce <__swbuf_r+0x12>
 800bcc6:	6983      	ldr	r3, [r0, #24]
 800bcc8:	b90b      	cbnz	r3, 800bcce <__swbuf_r+0x12>
 800bcca:	f000 fff9 	bl	800ccc0 <__sinit>
 800bcce:	4b21      	ldr	r3, [pc, #132]	; (800bd54 <__swbuf_r+0x98>)
 800bcd0:	429c      	cmp	r4, r3
 800bcd2:	d12a      	bne.n	800bd2a <__swbuf_r+0x6e>
 800bcd4:	686c      	ldr	r4, [r5, #4]
 800bcd6:	69a3      	ldr	r3, [r4, #24]
 800bcd8:	60a3      	str	r3, [r4, #8]
 800bcda:	89a3      	ldrh	r3, [r4, #12]
 800bcdc:	071a      	lsls	r2, r3, #28
 800bcde:	d52e      	bpl.n	800bd3e <__swbuf_r+0x82>
 800bce0:	6923      	ldr	r3, [r4, #16]
 800bce2:	b363      	cbz	r3, 800bd3e <__swbuf_r+0x82>
 800bce4:	6923      	ldr	r3, [r4, #16]
 800bce6:	6820      	ldr	r0, [r4, #0]
 800bce8:	1ac0      	subs	r0, r0, r3
 800bcea:	6963      	ldr	r3, [r4, #20]
 800bcec:	b2f6      	uxtb	r6, r6
 800bcee:	4283      	cmp	r3, r0
 800bcf0:	4637      	mov	r7, r6
 800bcf2:	dc04      	bgt.n	800bcfe <__swbuf_r+0x42>
 800bcf4:	4621      	mov	r1, r4
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	f000 ff78 	bl	800cbec <_fflush_r>
 800bcfc:	bb28      	cbnz	r0, 800bd4a <__swbuf_r+0x8e>
 800bcfe:	68a3      	ldr	r3, [r4, #8]
 800bd00:	3b01      	subs	r3, #1
 800bd02:	60a3      	str	r3, [r4, #8]
 800bd04:	6823      	ldr	r3, [r4, #0]
 800bd06:	1c5a      	adds	r2, r3, #1
 800bd08:	6022      	str	r2, [r4, #0]
 800bd0a:	701e      	strb	r6, [r3, #0]
 800bd0c:	6963      	ldr	r3, [r4, #20]
 800bd0e:	3001      	adds	r0, #1
 800bd10:	4283      	cmp	r3, r0
 800bd12:	d004      	beq.n	800bd1e <__swbuf_r+0x62>
 800bd14:	89a3      	ldrh	r3, [r4, #12]
 800bd16:	07db      	lsls	r3, r3, #31
 800bd18:	d519      	bpl.n	800bd4e <__swbuf_r+0x92>
 800bd1a:	2e0a      	cmp	r6, #10
 800bd1c:	d117      	bne.n	800bd4e <__swbuf_r+0x92>
 800bd1e:	4621      	mov	r1, r4
 800bd20:	4628      	mov	r0, r5
 800bd22:	f000 ff63 	bl	800cbec <_fflush_r>
 800bd26:	b190      	cbz	r0, 800bd4e <__swbuf_r+0x92>
 800bd28:	e00f      	b.n	800bd4a <__swbuf_r+0x8e>
 800bd2a:	4b0b      	ldr	r3, [pc, #44]	; (800bd58 <__swbuf_r+0x9c>)
 800bd2c:	429c      	cmp	r4, r3
 800bd2e:	d101      	bne.n	800bd34 <__swbuf_r+0x78>
 800bd30:	68ac      	ldr	r4, [r5, #8]
 800bd32:	e7d0      	b.n	800bcd6 <__swbuf_r+0x1a>
 800bd34:	4b09      	ldr	r3, [pc, #36]	; (800bd5c <__swbuf_r+0xa0>)
 800bd36:	429c      	cmp	r4, r3
 800bd38:	bf08      	it	eq
 800bd3a:	68ec      	ldreq	r4, [r5, #12]
 800bd3c:	e7cb      	b.n	800bcd6 <__swbuf_r+0x1a>
 800bd3e:	4621      	mov	r1, r4
 800bd40:	4628      	mov	r0, r5
 800bd42:	f000 f81b 	bl	800bd7c <__swsetup_r>
 800bd46:	2800      	cmp	r0, #0
 800bd48:	d0cc      	beq.n	800bce4 <__swbuf_r+0x28>
 800bd4a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bd4e:	4638      	mov	r0, r7
 800bd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd52:	bf00      	nop
 800bd54:	0800ed48 	.word	0x0800ed48
 800bd58:	0800ed68 	.word	0x0800ed68
 800bd5c:	0800ed28 	.word	0x0800ed28

0800bd60 <__ascii_wctomb>:
 800bd60:	b149      	cbz	r1, 800bd76 <__ascii_wctomb+0x16>
 800bd62:	2aff      	cmp	r2, #255	; 0xff
 800bd64:	bf85      	ittet	hi
 800bd66:	238a      	movhi	r3, #138	; 0x8a
 800bd68:	6003      	strhi	r3, [r0, #0]
 800bd6a:	700a      	strbls	r2, [r1, #0]
 800bd6c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bd70:	bf98      	it	ls
 800bd72:	2001      	movls	r0, #1
 800bd74:	4770      	bx	lr
 800bd76:	4608      	mov	r0, r1
 800bd78:	4770      	bx	lr
	...

0800bd7c <__swsetup_r>:
 800bd7c:	4b32      	ldr	r3, [pc, #200]	; (800be48 <__swsetup_r+0xcc>)
 800bd7e:	b570      	push	{r4, r5, r6, lr}
 800bd80:	681d      	ldr	r5, [r3, #0]
 800bd82:	4606      	mov	r6, r0
 800bd84:	460c      	mov	r4, r1
 800bd86:	b125      	cbz	r5, 800bd92 <__swsetup_r+0x16>
 800bd88:	69ab      	ldr	r3, [r5, #24]
 800bd8a:	b913      	cbnz	r3, 800bd92 <__swsetup_r+0x16>
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	f000 ff97 	bl	800ccc0 <__sinit>
 800bd92:	4b2e      	ldr	r3, [pc, #184]	; (800be4c <__swsetup_r+0xd0>)
 800bd94:	429c      	cmp	r4, r3
 800bd96:	d10f      	bne.n	800bdb8 <__swsetup_r+0x3c>
 800bd98:	686c      	ldr	r4, [r5, #4]
 800bd9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd9e:	b29a      	uxth	r2, r3
 800bda0:	0715      	lsls	r5, r2, #28
 800bda2:	d42c      	bmi.n	800bdfe <__swsetup_r+0x82>
 800bda4:	06d0      	lsls	r0, r2, #27
 800bda6:	d411      	bmi.n	800bdcc <__swsetup_r+0x50>
 800bda8:	2209      	movs	r2, #9
 800bdaa:	6032      	str	r2, [r6, #0]
 800bdac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdb0:	81a3      	strh	r3, [r4, #12]
 800bdb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdb6:	e03e      	b.n	800be36 <__swsetup_r+0xba>
 800bdb8:	4b25      	ldr	r3, [pc, #148]	; (800be50 <__swsetup_r+0xd4>)
 800bdba:	429c      	cmp	r4, r3
 800bdbc:	d101      	bne.n	800bdc2 <__swsetup_r+0x46>
 800bdbe:	68ac      	ldr	r4, [r5, #8]
 800bdc0:	e7eb      	b.n	800bd9a <__swsetup_r+0x1e>
 800bdc2:	4b24      	ldr	r3, [pc, #144]	; (800be54 <__swsetup_r+0xd8>)
 800bdc4:	429c      	cmp	r4, r3
 800bdc6:	bf08      	it	eq
 800bdc8:	68ec      	ldreq	r4, [r5, #12]
 800bdca:	e7e6      	b.n	800bd9a <__swsetup_r+0x1e>
 800bdcc:	0751      	lsls	r1, r2, #29
 800bdce:	d512      	bpl.n	800bdf6 <__swsetup_r+0x7a>
 800bdd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdd2:	b141      	cbz	r1, 800bde6 <__swsetup_r+0x6a>
 800bdd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdd8:	4299      	cmp	r1, r3
 800bdda:	d002      	beq.n	800bde2 <__swsetup_r+0x66>
 800bddc:	4630      	mov	r0, r6
 800bdde:	f001 ffa9 	bl	800dd34 <_free_r>
 800bde2:	2300      	movs	r3, #0
 800bde4:	6363      	str	r3, [r4, #52]	; 0x34
 800bde6:	89a3      	ldrh	r3, [r4, #12]
 800bde8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bdec:	81a3      	strh	r3, [r4, #12]
 800bdee:	2300      	movs	r3, #0
 800bdf0:	6063      	str	r3, [r4, #4]
 800bdf2:	6923      	ldr	r3, [r4, #16]
 800bdf4:	6023      	str	r3, [r4, #0]
 800bdf6:	89a3      	ldrh	r3, [r4, #12]
 800bdf8:	f043 0308 	orr.w	r3, r3, #8
 800bdfc:	81a3      	strh	r3, [r4, #12]
 800bdfe:	6923      	ldr	r3, [r4, #16]
 800be00:	b94b      	cbnz	r3, 800be16 <__swsetup_r+0x9a>
 800be02:	89a3      	ldrh	r3, [r4, #12]
 800be04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be0c:	d003      	beq.n	800be16 <__swsetup_r+0x9a>
 800be0e:	4621      	mov	r1, r4
 800be10:	4630      	mov	r0, r6
 800be12:	f001 fb39 	bl	800d488 <__smakebuf_r>
 800be16:	89a2      	ldrh	r2, [r4, #12]
 800be18:	f012 0301 	ands.w	r3, r2, #1
 800be1c:	d00c      	beq.n	800be38 <__swsetup_r+0xbc>
 800be1e:	2300      	movs	r3, #0
 800be20:	60a3      	str	r3, [r4, #8]
 800be22:	6963      	ldr	r3, [r4, #20]
 800be24:	425b      	negs	r3, r3
 800be26:	61a3      	str	r3, [r4, #24]
 800be28:	6923      	ldr	r3, [r4, #16]
 800be2a:	b953      	cbnz	r3, 800be42 <__swsetup_r+0xc6>
 800be2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be30:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800be34:	d1ba      	bne.n	800bdac <__swsetup_r+0x30>
 800be36:	bd70      	pop	{r4, r5, r6, pc}
 800be38:	0792      	lsls	r2, r2, #30
 800be3a:	bf58      	it	pl
 800be3c:	6963      	ldrpl	r3, [r4, #20]
 800be3e:	60a3      	str	r3, [r4, #8]
 800be40:	e7f2      	b.n	800be28 <__swsetup_r+0xac>
 800be42:	2000      	movs	r0, #0
 800be44:	e7f7      	b.n	800be36 <__swsetup_r+0xba>
 800be46:	bf00      	nop
 800be48:	20000088 	.word	0x20000088
 800be4c:	0800ed48 	.word	0x0800ed48
 800be50:	0800ed68 	.word	0x0800ed68
 800be54:	0800ed28 	.word	0x0800ed28

0800be58 <quorem>:
 800be58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5c:	6903      	ldr	r3, [r0, #16]
 800be5e:	690c      	ldr	r4, [r1, #16]
 800be60:	42a3      	cmp	r3, r4
 800be62:	4680      	mov	r8, r0
 800be64:	f2c0 8082 	blt.w	800bf6c <quorem+0x114>
 800be68:	3c01      	subs	r4, #1
 800be6a:	f101 0714 	add.w	r7, r1, #20
 800be6e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800be72:	f100 0614 	add.w	r6, r0, #20
 800be76:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800be7a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800be7e:	eb06 030c 	add.w	r3, r6, ip
 800be82:	3501      	adds	r5, #1
 800be84:	eb07 090c 	add.w	r9, r7, ip
 800be88:	9301      	str	r3, [sp, #4]
 800be8a:	fbb0 f5f5 	udiv	r5, r0, r5
 800be8e:	b395      	cbz	r5, 800bef6 <quorem+0x9e>
 800be90:	f04f 0a00 	mov.w	sl, #0
 800be94:	4638      	mov	r0, r7
 800be96:	46b6      	mov	lr, r6
 800be98:	46d3      	mov	fp, sl
 800be9a:	f850 2b04 	ldr.w	r2, [r0], #4
 800be9e:	b293      	uxth	r3, r2
 800bea0:	fb05 a303 	mla	r3, r5, r3, sl
 800bea4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	ebab 0303 	sub.w	r3, fp, r3
 800beae:	0c12      	lsrs	r2, r2, #16
 800beb0:	f8de b000 	ldr.w	fp, [lr]
 800beb4:	fb05 a202 	mla	r2, r5, r2, sl
 800beb8:	fa13 f38b 	uxtah	r3, r3, fp
 800bebc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bec0:	fa1f fb82 	uxth.w	fp, r2
 800bec4:	f8de 2000 	ldr.w	r2, [lr]
 800bec8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800becc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bed6:	4581      	cmp	r9, r0
 800bed8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bedc:	f84e 3b04 	str.w	r3, [lr], #4
 800bee0:	d2db      	bcs.n	800be9a <quorem+0x42>
 800bee2:	f856 300c 	ldr.w	r3, [r6, ip]
 800bee6:	b933      	cbnz	r3, 800bef6 <quorem+0x9e>
 800bee8:	9b01      	ldr	r3, [sp, #4]
 800beea:	3b04      	subs	r3, #4
 800beec:	429e      	cmp	r6, r3
 800beee:	461a      	mov	r2, r3
 800bef0:	d330      	bcc.n	800bf54 <quorem+0xfc>
 800bef2:	f8c8 4010 	str.w	r4, [r8, #16]
 800bef6:	4640      	mov	r0, r8
 800bef8:	f001 fd62 	bl	800d9c0 <__mcmp>
 800befc:	2800      	cmp	r0, #0
 800befe:	db25      	blt.n	800bf4c <quorem+0xf4>
 800bf00:	3501      	adds	r5, #1
 800bf02:	4630      	mov	r0, r6
 800bf04:	f04f 0c00 	mov.w	ip, #0
 800bf08:	f857 2b04 	ldr.w	r2, [r7], #4
 800bf0c:	f8d0 e000 	ldr.w	lr, [r0]
 800bf10:	b293      	uxth	r3, r2
 800bf12:	ebac 0303 	sub.w	r3, ip, r3
 800bf16:	0c12      	lsrs	r2, r2, #16
 800bf18:	fa13 f38e 	uxtah	r3, r3, lr
 800bf1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bf20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf2a:	45b9      	cmp	r9, r7
 800bf2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bf30:	f840 3b04 	str.w	r3, [r0], #4
 800bf34:	d2e8      	bcs.n	800bf08 <quorem+0xb0>
 800bf36:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bf3a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bf3e:	b92a      	cbnz	r2, 800bf4c <quorem+0xf4>
 800bf40:	3b04      	subs	r3, #4
 800bf42:	429e      	cmp	r6, r3
 800bf44:	461a      	mov	r2, r3
 800bf46:	d30b      	bcc.n	800bf60 <quorem+0x108>
 800bf48:	f8c8 4010 	str.w	r4, [r8, #16]
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	b003      	add	sp, #12
 800bf50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf54:	6812      	ldr	r2, [r2, #0]
 800bf56:	3b04      	subs	r3, #4
 800bf58:	2a00      	cmp	r2, #0
 800bf5a:	d1ca      	bne.n	800bef2 <quorem+0x9a>
 800bf5c:	3c01      	subs	r4, #1
 800bf5e:	e7c5      	b.n	800beec <quorem+0x94>
 800bf60:	6812      	ldr	r2, [r2, #0]
 800bf62:	3b04      	subs	r3, #4
 800bf64:	2a00      	cmp	r2, #0
 800bf66:	d1ef      	bne.n	800bf48 <quorem+0xf0>
 800bf68:	3c01      	subs	r4, #1
 800bf6a:	e7ea      	b.n	800bf42 <quorem+0xea>
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	e7ee      	b.n	800bf4e <quorem+0xf6>

0800bf70 <_dtoa_r>:
 800bf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf74:	ec57 6b10 	vmov	r6, r7, d0
 800bf78:	b097      	sub	sp, #92	; 0x5c
 800bf7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bf7c:	9106      	str	r1, [sp, #24]
 800bf7e:	4604      	mov	r4, r0
 800bf80:	920b      	str	r2, [sp, #44]	; 0x2c
 800bf82:	9312      	str	r3, [sp, #72]	; 0x48
 800bf84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bf88:	e9cd 6700 	strd	r6, r7, [sp]
 800bf8c:	b93d      	cbnz	r5, 800bf9e <_dtoa_r+0x2e>
 800bf8e:	2010      	movs	r0, #16
 800bf90:	f001 faba 	bl	800d508 <malloc>
 800bf94:	6260      	str	r0, [r4, #36]	; 0x24
 800bf96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bf9a:	6005      	str	r5, [r0, #0]
 800bf9c:	60c5      	str	r5, [r0, #12]
 800bf9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfa0:	6819      	ldr	r1, [r3, #0]
 800bfa2:	b151      	cbz	r1, 800bfba <_dtoa_r+0x4a>
 800bfa4:	685a      	ldr	r2, [r3, #4]
 800bfa6:	604a      	str	r2, [r1, #4]
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	4093      	lsls	r3, r2
 800bfac:	608b      	str	r3, [r1, #8]
 800bfae:	4620      	mov	r0, r4
 800bfb0:	f001 fae6 	bl	800d580 <_Bfree>
 800bfb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	601a      	str	r2, [r3, #0]
 800bfba:	1e3b      	subs	r3, r7, #0
 800bfbc:	bfbb      	ittet	lt
 800bfbe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bfc2:	9301      	strlt	r3, [sp, #4]
 800bfc4:	2300      	movge	r3, #0
 800bfc6:	2201      	movlt	r2, #1
 800bfc8:	bfac      	ite	ge
 800bfca:	f8c8 3000 	strge.w	r3, [r8]
 800bfce:	f8c8 2000 	strlt.w	r2, [r8]
 800bfd2:	4baf      	ldr	r3, [pc, #700]	; (800c290 <_dtoa_r+0x320>)
 800bfd4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bfd8:	ea33 0308 	bics.w	r3, r3, r8
 800bfdc:	d114      	bne.n	800c008 <_dtoa_r+0x98>
 800bfde:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bfe0:	f242 730f 	movw	r3, #9999	; 0x270f
 800bfe4:	6013      	str	r3, [r2, #0]
 800bfe6:	9b00      	ldr	r3, [sp, #0]
 800bfe8:	b923      	cbnz	r3, 800bff4 <_dtoa_r+0x84>
 800bfea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800bfee:	2800      	cmp	r0, #0
 800bff0:	f000 8542 	beq.w	800ca78 <_dtoa_r+0xb08>
 800bff4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bff6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c2a4 <_dtoa_r+0x334>
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f000 8544 	beq.w	800ca88 <_dtoa_r+0xb18>
 800c000:	f10b 0303 	add.w	r3, fp, #3
 800c004:	f000 bd3e 	b.w	800ca84 <_dtoa_r+0xb14>
 800c008:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c00c:	2200      	movs	r2, #0
 800c00e:	2300      	movs	r3, #0
 800c010:	4630      	mov	r0, r6
 800c012:	4639      	mov	r1, r7
 800c014:	f7f4 fd60 	bl	8000ad8 <__aeabi_dcmpeq>
 800c018:	4681      	mov	r9, r0
 800c01a:	b168      	cbz	r0, 800c038 <_dtoa_r+0xc8>
 800c01c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c01e:	2301      	movs	r3, #1
 800c020:	6013      	str	r3, [r2, #0]
 800c022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c024:	2b00      	cmp	r3, #0
 800c026:	f000 8524 	beq.w	800ca72 <_dtoa_r+0xb02>
 800c02a:	4b9a      	ldr	r3, [pc, #616]	; (800c294 <_dtoa_r+0x324>)
 800c02c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c02e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800c032:	6013      	str	r3, [r2, #0]
 800c034:	f000 bd28 	b.w	800ca88 <_dtoa_r+0xb18>
 800c038:	aa14      	add	r2, sp, #80	; 0x50
 800c03a:	a915      	add	r1, sp, #84	; 0x54
 800c03c:	ec47 6b10 	vmov	d0, r6, r7
 800c040:	4620      	mov	r0, r4
 800c042:	f001 fdab 	bl	800db9c <__d2b>
 800c046:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c04a:	9004      	str	r0, [sp, #16]
 800c04c:	2d00      	cmp	r5, #0
 800c04e:	d07c      	beq.n	800c14a <_dtoa_r+0x1da>
 800c050:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c054:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c058:	46b2      	mov	sl, r6
 800c05a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c05e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c062:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c066:	2200      	movs	r2, #0
 800c068:	4b8b      	ldr	r3, [pc, #556]	; (800c298 <_dtoa_r+0x328>)
 800c06a:	4650      	mov	r0, sl
 800c06c:	4659      	mov	r1, fp
 800c06e:	f7f4 f913 	bl	8000298 <__aeabi_dsub>
 800c072:	a381      	add	r3, pc, #516	; (adr r3, 800c278 <_dtoa_r+0x308>)
 800c074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c078:	f7f4 fac6 	bl	8000608 <__aeabi_dmul>
 800c07c:	a380      	add	r3, pc, #512	; (adr r3, 800c280 <_dtoa_r+0x310>)
 800c07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c082:	f7f4 f90b 	bl	800029c <__adddf3>
 800c086:	4606      	mov	r6, r0
 800c088:	4628      	mov	r0, r5
 800c08a:	460f      	mov	r7, r1
 800c08c:	f7f4 fa52 	bl	8000534 <__aeabi_i2d>
 800c090:	a37d      	add	r3, pc, #500	; (adr r3, 800c288 <_dtoa_r+0x318>)
 800c092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c096:	f7f4 fab7 	bl	8000608 <__aeabi_dmul>
 800c09a:	4602      	mov	r2, r0
 800c09c:	460b      	mov	r3, r1
 800c09e:	4630      	mov	r0, r6
 800c0a0:	4639      	mov	r1, r7
 800c0a2:	f7f4 f8fb 	bl	800029c <__adddf3>
 800c0a6:	4606      	mov	r6, r0
 800c0a8:	460f      	mov	r7, r1
 800c0aa:	f7f4 fd5d 	bl	8000b68 <__aeabi_d2iz>
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	4682      	mov	sl, r0
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	4630      	mov	r0, r6
 800c0b6:	4639      	mov	r1, r7
 800c0b8:	f7f4 fd18 	bl	8000aec <__aeabi_dcmplt>
 800c0bc:	b148      	cbz	r0, 800c0d2 <_dtoa_r+0x162>
 800c0be:	4650      	mov	r0, sl
 800c0c0:	f7f4 fa38 	bl	8000534 <__aeabi_i2d>
 800c0c4:	4632      	mov	r2, r6
 800c0c6:	463b      	mov	r3, r7
 800c0c8:	f7f4 fd06 	bl	8000ad8 <__aeabi_dcmpeq>
 800c0cc:	b908      	cbnz	r0, 800c0d2 <_dtoa_r+0x162>
 800c0ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c0d2:	f1ba 0f16 	cmp.w	sl, #22
 800c0d6:	d859      	bhi.n	800c18c <_dtoa_r+0x21c>
 800c0d8:	4970      	ldr	r1, [pc, #448]	; (800c29c <_dtoa_r+0x32c>)
 800c0da:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c0de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0e6:	f7f4 fd1f 	bl	8000b28 <__aeabi_dcmpgt>
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	d050      	beq.n	800c190 <_dtoa_r+0x220>
 800c0ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0f8:	1b5d      	subs	r5, r3, r5
 800c0fa:	f1b5 0801 	subs.w	r8, r5, #1
 800c0fe:	bf49      	itett	mi
 800c100:	f1c5 0301 	rsbmi	r3, r5, #1
 800c104:	2300      	movpl	r3, #0
 800c106:	9305      	strmi	r3, [sp, #20]
 800c108:	f04f 0800 	movmi.w	r8, #0
 800c10c:	bf58      	it	pl
 800c10e:	9305      	strpl	r3, [sp, #20]
 800c110:	f1ba 0f00 	cmp.w	sl, #0
 800c114:	db3e      	blt.n	800c194 <_dtoa_r+0x224>
 800c116:	2300      	movs	r3, #0
 800c118:	44d0      	add	r8, sl
 800c11a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c11e:	9307      	str	r3, [sp, #28]
 800c120:	9b06      	ldr	r3, [sp, #24]
 800c122:	2b09      	cmp	r3, #9
 800c124:	f200 8090 	bhi.w	800c248 <_dtoa_r+0x2d8>
 800c128:	2b05      	cmp	r3, #5
 800c12a:	bfc4      	itt	gt
 800c12c:	3b04      	subgt	r3, #4
 800c12e:	9306      	strgt	r3, [sp, #24]
 800c130:	9b06      	ldr	r3, [sp, #24]
 800c132:	f1a3 0302 	sub.w	r3, r3, #2
 800c136:	bfcc      	ite	gt
 800c138:	2500      	movgt	r5, #0
 800c13a:	2501      	movle	r5, #1
 800c13c:	2b03      	cmp	r3, #3
 800c13e:	f200 808f 	bhi.w	800c260 <_dtoa_r+0x2f0>
 800c142:	e8df f003 	tbb	[pc, r3]
 800c146:	7f7d      	.short	0x7f7d
 800c148:	7131      	.short	0x7131
 800c14a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c14e:	441d      	add	r5, r3
 800c150:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c154:	2820      	cmp	r0, #32
 800c156:	dd13      	ble.n	800c180 <_dtoa_r+0x210>
 800c158:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c15c:	9b00      	ldr	r3, [sp, #0]
 800c15e:	fa08 f800 	lsl.w	r8, r8, r0
 800c162:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c166:	fa23 f000 	lsr.w	r0, r3, r0
 800c16a:	ea48 0000 	orr.w	r0, r8, r0
 800c16e:	f7f4 f9d1 	bl	8000514 <__aeabi_ui2d>
 800c172:	2301      	movs	r3, #1
 800c174:	4682      	mov	sl, r0
 800c176:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c17a:	3d01      	subs	r5, #1
 800c17c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c17e:	e772      	b.n	800c066 <_dtoa_r+0xf6>
 800c180:	9b00      	ldr	r3, [sp, #0]
 800c182:	f1c0 0020 	rsb	r0, r0, #32
 800c186:	fa03 f000 	lsl.w	r0, r3, r0
 800c18a:	e7f0      	b.n	800c16e <_dtoa_r+0x1fe>
 800c18c:	2301      	movs	r3, #1
 800c18e:	e7b1      	b.n	800c0f4 <_dtoa_r+0x184>
 800c190:	900f      	str	r0, [sp, #60]	; 0x3c
 800c192:	e7b0      	b.n	800c0f6 <_dtoa_r+0x186>
 800c194:	9b05      	ldr	r3, [sp, #20]
 800c196:	eba3 030a 	sub.w	r3, r3, sl
 800c19a:	9305      	str	r3, [sp, #20]
 800c19c:	f1ca 0300 	rsb	r3, sl, #0
 800c1a0:	9307      	str	r3, [sp, #28]
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	930e      	str	r3, [sp, #56]	; 0x38
 800c1a6:	e7bb      	b.n	800c120 <_dtoa_r+0x1b0>
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	930a      	str	r3, [sp, #40]	; 0x28
 800c1ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	dd59      	ble.n	800c266 <_dtoa_r+0x2f6>
 800c1b2:	9302      	str	r3, [sp, #8]
 800c1b4:	4699      	mov	r9, r3
 800c1b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	6072      	str	r2, [r6, #4]
 800c1bc:	2204      	movs	r2, #4
 800c1be:	f102 0014 	add.w	r0, r2, #20
 800c1c2:	4298      	cmp	r0, r3
 800c1c4:	6871      	ldr	r1, [r6, #4]
 800c1c6:	d953      	bls.n	800c270 <_dtoa_r+0x300>
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	f001 f9a5 	bl	800d518 <_Balloc>
 800c1ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1d0:	6030      	str	r0, [r6, #0]
 800c1d2:	f1b9 0f0e 	cmp.w	r9, #14
 800c1d6:	f8d3 b000 	ldr.w	fp, [r3]
 800c1da:	f200 80e6 	bhi.w	800c3aa <_dtoa_r+0x43a>
 800c1de:	2d00      	cmp	r5, #0
 800c1e0:	f000 80e3 	beq.w	800c3aa <_dtoa_r+0x43a>
 800c1e4:	ed9d 7b00 	vldr	d7, [sp]
 800c1e8:	f1ba 0f00 	cmp.w	sl, #0
 800c1ec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c1f0:	dd74      	ble.n	800c2dc <_dtoa_r+0x36c>
 800c1f2:	4a2a      	ldr	r2, [pc, #168]	; (800c29c <_dtoa_r+0x32c>)
 800c1f4:	f00a 030f 	and.w	r3, sl, #15
 800c1f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c1fc:	ed93 7b00 	vldr	d7, [r3]
 800c200:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c204:	06f0      	lsls	r0, r6, #27
 800c206:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c20a:	d565      	bpl.n	800c2d8 <_dtoa_r+0x368>
 800c20c:	4b24      	ldr	r3, [pc, #144]	; (800c2a0 <_dtoa_r+0x330>)
 800c20e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c212:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c216:	f7f4 fb21 	bl	800085c <__aeabi_ddiv>
 800c21a:	e9cd 0100 	strd	r0, r1, [sp]
 800c21e:	f006 060f 	and.w	r6, r6, #15
 800c222:	2503      	movs	r5, #3
 800c224:	4f1e      	ldr	r7, [pc, #120]	; (800c2a0 <_dtoa_r+0x330>)
 800c226:	e04c      	b.n	800c2c2 <_dtoa_r+0x352>
 800c228:	2301      	movs	r3, #1
 800c22a:	930a      	str	r3, [sp, #40]	; 0x28
 800c22c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c22e:	4453      	add	r3, sl
 800c230:	f103 0901 	add.w	r9, r3, #1
 800c234:	9302      	str	r3, [sp, #8]
 800c236:	464b      	mov	r3, r9
 800c238:	2b01      	cmp	r3, #1
 800c23a:	bfb8      	it	lt
 800c23c:	2301      	movlt	r3, #1
 800c23e:	e7ba      	b.n	800c1b6 <_dtoa_r+0x246>
 800c240:	2300      	movs	r3, #0
 800c242:	e7b2      	b.n	800c1aa <_dtoa_r+0x23a>
 800c244:	2300      	movs	r3, #0
 800c246:	e7f0      	b.n	800c22a <_dtoa_r+0x2ba>
 800c248:	2501      	movs	r5, #1
 800c24a:	2300      	movs	r3, #0
 800c24c:	9306      	str	r3, [sp, #24]
 800c24e:	950a      	str	r5, [sp, #40]	; 0x28
 800c250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c254:	9302      	str	r3, [sp, #8]
 800c256:	4699      	mov	r9, r3
 800c258:	2200      	movs	r2, #0
 800c25a:	2312      	movs	r3, #18
 800c25c:	920b      	str	r2, [sp, #44]	; 0x2c
 800c25e:	e7aa      	b.n	800c1b6 <_dtoa_r+0x246>
 800c260:	2301      	movs	r3, #1
 800c262:	930a      	str	r3, [sp, #40]	; 0x28
 800c264:	e7f4      	b.n	800c250 <_dtoa_r+0x2e0>
 800c266:	2301      	movs	r3, #1
 800c268:	9302      	str	r3, [sp, #8]
 800c26a:	4699      	mov	r9, r3
 800c26c:	461a      	mov	r2, r3
 800c26e:	e7f5      	b.n	800c25c <_dtoa_r+0x2ec>
 800c270:	3101      	adds	r1, #1
 800c272:	6071      	str	r1, [r6, #4]
 800c274:	0052      	lsls	r2, r2, #1
 800c276:	e7a2      	b.n	800c1be <_dtoa_r+0x24e>
 800c278:	636f4361 	.word	0x636f4361
 800c27c:	3fd287a7 	.word	0x3fd287a7
 800c280:	8b60c8b3 	.word	0x8b60c8b3
 800c284:	3fc68a28 	.word	0x3fc68a28
 800c288:	509f79fb 	.word	0x509f79fb
 800c28c:	3fd34413 	.word	0x3fd34413
 800c290:	7ff00000 	.word	0x7ff00000
 800c294:	0800eb9f 	.word	0x0800eb9f
 800c298:	3ff80000 	.word	0x3ff80000
 800c29c:	0800edb0 	.word	0x0800edb0
 800c2a0:	0800ed88 	.word	0x0800ed88
 800c2a4:	0800ed22 	.word	0x0800ed22
 800c2a8:	07f1      	lsls	r1, r6, #31
 800c2aa:	d508      	bpl.n	800c2be <_dtoa_r+0x34e>
 800c2ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c2b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2b4:	f7f4 f9a8 	bl	8000608 <__aeabi_dmul>
 800c2b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c2bc:	3501      	adds	r5, #1
 800c2be:	1076      	asrs	r6, r6, #1
 800c2c0:	3708      	adds	r7, #8
 800c2c2:	2e00      	cmp	r6, #0
 800c2c4:	d1f0      	bne.n	800c2a8 <_dtoa_r+0x338>
 800c2c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c2ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2ce:	f7f4 fac5 	bl	800085c <__aeabi_ddiv>
 800c2d2:	e9cd 0100 	strd	r0, r1, [sp]
 800c2d6:	e01a      	b.n	800c30e <_dtoa_r+0x39e>
 800c2d8:	2502      	movs	r5, #2
 800c2da:	e7a3      	b.n	800c224 <_dtoa_r+0x2b4>
 800c2dc:	f000 80a0 	beq.w	800c420 <_dtoa_r+0x4b0>
 800c2e0:	f1ca 0600 	rsb	r6, sl, #0
 800c2e4:	4b9f      	ldr	r3, [pc, #636]	; (800c564 <_dtoa_r+0x5f4>)
 800c2e6:	4fa0      	ldr	r7, [pc, #640]	; (800c568 <_dtoa_r+0x5f8>)
 800c2e8:	f006 020f 	and.w	r2, r6, #15
 800c2ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c2f8:	f7f4 f986 	bl	8000608 <__aeabi_dmul>
 800c2fc:	e9cd 0100 	strd	r0, r1, [sp]
 800c300:	1136      	asrs	r6, r6, #4
 800c302:	2300      	movs	r3, #0
 800c304:	2502      	movs	r5, #2
 800c306:	2e00      	cmp	r6, #0
 800c308:	d17f      	bne.n	800c40a <_dtoa_r+0x49a>
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1e1      	bne.n	800c2d2 <_dtoa_r+0x362>
 800c30e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c310:	2b00      	cmp	r3, #0
 800c312:	f000 8087 	beq.w	800c424 <_dtoa_r+0x4b4>
 800c316:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c31a:	2200      	movs	r2, #0
 800c31c:	4b93      	ldr	r3, [pc, #588]	; (800c56c <_dtoa_r+0x5fc>)
 800c31e:	4630      	mov	r0, r6
 800c320:	4639      	mov	r1, r7
 800c322:	f7f4 fbe3 	bl	8000aec <__aeabi_dcmplt>
 800c326:	2800      	cmp	r0, #0
 800c328:	d07c      	beq.n	800c424 <_dtoa_r+0x4b4>
 800c32a:	f1b9 0f00 	cmp.w	r9, #0
 800c32e:	d079      	beq.n	800c424 <_dtoa_r+0x4b4>
 800c330:	9b02      	ldr	r3, [sp, #8]
 800c332:	2b00      	cmp	r3, #0
 800c334:	dd35      	ble.n	800c3a2 <_dtoa_r+0x432>
 800c336:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800c33a:	9308      	str	r3, [sp, #32]
 800c33c:	4639      	mov	r1, r7
 800c33e:	2200      	movs	r2, #0
 800c340:	4b8b      	ldr	r3, [pc, #556]	; (800c570 <_dtoa_r+0x600>)
 800c342:	4630      	mov	r0, r6
 800c344:	f7f4 f960 	bl	8000608 <__aeabi_dmul>
 800c348:	e9cd 0100 	strd	r0, r1, [sp]
 800c34c:	9f02      	ldr	r7, [sp, #8]
 800c34e:	3501      	adds	r5, #1
 800c350:	4628      	mov	r0, r5
 800c352:	f7f4 f8ef 	bl	8000534 <__aeabi_i2d>
 800c356:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c35a:	f7f4 f955 	bl	8000608 <__aeabi_dmul>
 800c35e:	2200      	movs	r2, #0
 800c360:	4b84      	ldr	r3, [pc, #528]	; (800c574 <_dtoa_r+0x604>)
 800c362:	f7f3 ff9b 	bl	800029c <__adddf3>
 800c366:	4605      	mov	r5, r0
 800c368:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c36c:	2f00      	cmp	r7, #0
 800c36e:	d15d      	bne.n	800c42c <_dtoa_r+0x4bc>
 800c370:	2200      	movs	r2, #0
 800c372:	4b81      	ldr	r3, [pc, #516]	; (800c578 <_dtoa_r+0x608>)
 800c374:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c378:	f7f3 ff8e 	bl	8000298 <__aeabi_dsub>
 800c37c:	462a      	mov	r2, r5
 800c37e:	4633      	mov	r3, r6
 800c380:	e9cd 0100 	strd	r0, r1, [sp]
 800c384:	f7f4 fbd0 	bl	8000b28 <__aeabi_dcmpgt>
 800c388:	2800      	cmp	r0, #0
 800c38a:	f040 8288 	bne.w	800c89e <_dtoa_r+0x92e>
 800c38e:	462a      	mov	r2, r5
 800c390:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c394:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c398:	f7f4 fba8 	bl	8000aec <__aeabi_dcmplt>
 800c39c:	2800      	cmp	r0, #0
 800c39e:	f040 827c 	bne.w	800c89a <_dtoa_r+0x92a>
 800c3a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c3a6:	e9cd 2300 	strd	r2, r3, [sp]
 800c3aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f2c0 8150 	blt.w	800c652 <_dtoa_r+0x6e2>
 800c3b2:	f1ba 0f0e 	cmp.w	sl, #14
 800c3b6:	f300 814c 	bgt.w	800c652 <_dtoa_r+0x6e2>
 800c3ba:	4b6a      	ldr	r3, [pc, #424]	; (800c564 <_dtoa_r+0x5f4>)
 800c3bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c3c0:	ed93 7b00 	vldr	d7, [r3]
 800c3c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c3cc:	f280 80d8 	bge.w	800c580 <_dtoa_r+0x610>
 800c3d0:	f1b9 0f00 	cmp.w	r9, #0
 800c3d4:	f300 80d4 	bgt.w	800c580 <_dtoa_r+0x610>
 800c3d8:	f040 825e 	bne.w	800c898 <_dtoa_r+0x928>
 800c3dc:	2200      	movs	r2, #0
 800c3de:	4b66      	ldr	r3, [pc, #408]	; (800c578 <_dtoa_r+0x608>)
 800c3e0:	ec51 0b17 	vmov	r0, r1, d7
 800c3e4:	f7f4 f910 	bl	8000608 <__aeabi_dmul>
 800c3e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3ec:	f7f4 fb92 	bl	8000b14 <__aeabi_dcmpge>
 800c3f0:	464f      	mov	r7, r9
 800c3f2:	464e      	mov	r6, r9
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	f040 8234 	bne.w	800c862 <_dtoa_r+0x8f2>
 800c3fa:	2331      	movs	r3, #49	; 0x31
 800c3fc:	f10b 0501 	add.w	r5, fp, #1
 800c400:	f88b 3000 	strb.w	r3, [fp]
 800c404:	f10a 0a01 	add.w	sl, sl, #1
 800c408:	e22f      	b.n	800c86a <_dtoa_r+0x8fa>
 800c40a:	07f2      	lsls	r2, r6, #31
 800c40c:	d505      	bpl.n	800c41a <_dtoa_r+0x4aa>
 800c40e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c412:	f7f4 f8f9 	bl	8000608 <__aeabi_dmul>
 800c416:	3501      	adds	r5, #1
 800c418:	2301      	movs	r3, #1
 800c41a:	1076      	asrs	r6, r6, #1
 800c41c:	3708      	adds	r7, #8
 800c41e:	e772      	b.n	800c306 <_dtoa_r+0x396>
 800c420:	2502      	movs	r5, #2
 800c422:	e774      	b.n	800c30e <_dtoa_r+0x39e>
 800c424:	f8cd a020 	str.w	sl, [sp, #32]
 800c428:	464f      	mov	r7, r9
 800c42a:	e791      	b.n	800c350 <_dtoa_r+0x3e0>
 800c42c:	4b4d      	ldr	r3, [pc, #308]	; (800c564 <_dtoa_r+0x5f4>)
 800c42e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c432:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d047      	beq.n	800c4cc <_dtoa_r+0x55c>
 800c43c:	4602      	mov	r2, r0
 800c43e:	460b      	mov	r3, r1
 800c440:	2000      	movs	r0, #0
 800c442:	494e      	ldr	r1, [pc, #312]	; (800c57c <_dtoa_r+0x60c>)
 800c444:	f7f4 fa0a 	bl	800085c <__aeabi_ddiv>
 800c448:	462a      	mov	r2, r5
 800c44a:	4633      	mov	r3, r6
 800c44c:	f7f3 ff24 	bl	8000298 <__aeabi_dsub>
 800c450:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c454:	465d      	mov	r5, fp
 800c456:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c45a:	f7f4 fb85 	bl	8000b68 <__aeabi_d2iz>
 800c45e:	4606      	mov	r6, r0
 800c460:	f7f4 f868 	bl	8000534 <__aeabi_i2d>
 800c464:	4602      	mov	r2, r0
 800c466:	460b      	mov	r3, r1
 800c468:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c46c:	f7f3 ff14 	bl	8000298 <__aeabi_dsub>
 800c470:	3630      	adds	r6, #48	; 0x30
 800c472:	f805 6b01 	strb.w	r6, [r5], #1
 800c476:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c47a:	e9cd 0100 	strd	r0, r1, [sp]
 800c47e:	f7f4 fb35 	bl	8000aec <__aeabi_dcmplt>
 800c482:	2800      	cmp	r0, #0
 800c484:	d163      	bne.n	800c54e <_dtoa_r+0x5de>
 800c486:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c48a:	2000      	movs	r0, #0
 800c48c:	4937      	ldr	r1, [pc, #220]	; (800c56c <_dtoa_r+0x5fc>)
 800c48e:	f7f3 ff03 	bl	8000298 <__aeabi_dsub>
 800c492:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c496:	f7f4 fb29 	bl	8000aec <__aeabi_dcmplt>
 800c49a:	2800      	cmp	r0, #0
 800c49c:	f040 80b7 	bne.w	800c60e <_dtoa_r+0x69e>
 800c4a0:	eba5 030b 	sub.w	r3, r5, fp
 800c4a4:	429f      	cmp	r7, r3
 800c4a6:	f77f af7c 	ble.w	800c3a2 <_dtoa_r+0x432>
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	4b30      	ldr	r3, [pc, #192]	; (800c570 <_dtoa_r+0x600>)
 800c4ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c4b2:	f7f4 f8a9 	bl	8000608 <__aeabi_dmul>
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c4bc:	4b2c      	ldr	r3, [pc, #176]	; (800c570 <_dtoa_r+0x600>)
 800c4be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4c2:	f7f4 f8a1 	bl	8000608 <__aeabi_dmul>
 800c4c6:	e9cd 0100 	strd	r0, r1, [sp]
 800c4ca:	e7c4      	b.n	800c456 <_dtoa_r+0x4e6>
 800c4cc:	462a      	mov	r2, r5
 800c4ce:	4633      	mov	r3, r6
 800c4d0:	f7f4 f89a 	bl	8000608 <__aeabi_dmul>
 800c4d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c4d8:	eb0b 0507 	add.w	r5, fp, r7
 800c4dc:	465e      	mov	r6, fp
 800c4de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4e2:	f7f4 fb41 	bl	8000b68 <__aeabi_d2iz>
 800c4e6:	4607      	mov	r7, r0
 800c4e8:	f7f4 f824 	bl	8000534 <__aeabi_i2d>
 800c4ec:	3730      	adds	r7, #48	; 0x30
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	460b      	mov	r3, r1
 800c4f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4f6:	f7f3 fecf 	bl	8000298 <__aeabi_dsub>
 800c4fa:	f806 7b01 	strb.w	r7, [r6], #1
 800c4fe:	42ae      	cmp	r6, r5
 800c500:	e9cd 0100 	strd	r0, r1, [sp]
 800c504:	f04f 0200 	mov.w	r2, #0
 800c508:	d126      	bne.n	800c558 <_dtoa_r+0x5e8>
 800c50a:	4b1c      	ldr	r3, [pc, #112]	; (800c57c <_dtoa_r+0x60c>)
 800c50c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c510:	f7f3 fec4 	bl	800029c <__adddf3>
 800c514:	4602      	mov	r2, r0
 800c516:	460b      	mov	r3, r1
 800c518:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c51c:	f7f4 fb04 	bl	8000b28 <__aeabi_dcmpgt>
 800c520:	2800      	cmp	r0, #0
 800c522:	d174      	bne.n	800c60e <_dtoa_r+0x69e>
 800c524:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c528:	2000      	movs	r0, #0
 800c52a:	4914      	ldr	r1, [pc, #80]	; (800c57c <_dtoa_r+0x60c>)
 800c52c:	f7f3 feb4 	bl	8000298 <__aeabi_dsub>
 800c530:	4602      	mov	r2, r0
 800c532:	460b      	mov	r3, r1
 800c534:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c538:	f7f4 fad8 	bl	8000aec <__aeabi_dcmplt>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	f43f af30 	beq.w	800c3a2 <_dtoa_r+0x432>
 800c542:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c546:	2b30      	cmp	r3, #48	; 0x30
 800c548:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c54c:	d002      	beq.n	800c554 <_dtoa_r+0x5e4>
 800c54e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c552:	e04a      	b.n	800c5ea <_dtoa_r+0x67a>
 800c554:	4615      	mov	r5, r2
 800c556:	e7f4      	b.n	800c542 <_dtoa_r+0x5d2>
 800c558:	4b05      	ldr	r3, [pc, #20]	; (800c570 <_dtoa_r+0x600>)
 800c55a:	f7f4 f855 	bl	8000608 <__aeabi_dmul>
 800c55e:	e9cd 0100 	strd	r0, r1, [sp]
 800c562:	e7bc      	b.n	800c4de <_dtoa_r+0x56e>
 800c564:	0800edb0 	.word	0x0800edb0
 800c568:	0800ed88 	.word	0x0800ed88
 800c56c:	3ff00000 	.word	0x3ff00000
 800c570:	40240000 	.word	0x40240000
 800c574:	401c0000 	.word	0x401c0000
 800c578:	40140000 	.word	0x40140000
 800c57c:	3fe00000 	.word	0x3fe00000
 800c580:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c584:	465d      	mov	r5, fp
 800c586:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c58a:	4630      	mov	r0, r6
 800c58c:	4639      	mov	r1, r7
 800c58e:	f7f4 f965 	bl	800085c <__aeabi_ddiv>
 800c592:	f7f4 fae9 	bl	8000b68 <__aeabi_d2iz>
 800c596:	4680      	mov	r8, r0
 800c598:	f7f3 ffcc 	bl	8000534 <__aeabi_i2d>
 800c59c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5a0:	f7f4 f832 	bl	8000608 <__aeabi_dmul>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	4639      	mov	r1, r7
 800c5ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c5b0:	f7f3 fe72 	bl	8000298 <__aeabi_dsub>
 800c5b4:	f805 6b01 	strb.w	r6, [r5], #1
 800c5b8:	eba5 060b 	sub.w	r6, r5, fp
 800c5bc:	45b1      	cmp	r9, r6
 800c5be:	4602      	mov	r2, r0
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	d139      	bne.n	800c638 <_dtoa_r+0x6c8>
 800c5c4:	f7f3 fe6a 	bl	800029c <__adddf3>
 800c5c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5cc:	4606      	mov	r6, r0
 800c5ce:	460f      	mov	r7, r1
 800c5d0:	f7f4 faaa 	bl	8000b28 <__aeabi_dcmpgt>
 800c5d4:	b9c8      	cbnz	r0, 800c60a <_dtoa_r+0x69a>
 800c5d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5da:	4630      	mov	r0, r6
 800c5dc:	4639      	mov	r1, r7
 800c5de:	f7f4 fa7b 	bl	8000ad8 <__aeabi_dcmpeq>
 800c5e2:	b110      	cbz	r0, 800c5ea <_dtoa_r+0x67a>
 800c5e4:	f018 0f01 	tst.w	r8, #1
 800c5e8:	d10f      	bne.n	800c60a <_dtoa_r+0x69a>
 800c5ea:	9904      	ldr	r1, [sp, #16]
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	f000 ffc7 	bl	800d580 <_Bfree>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c5f6:	702b      	strb	r3, [r5, #0]
 800c5f8:	f10a 0301 	add.w	r3, sl, #1
 800c5fc:	6013      	str	r3, [r2, #0]
 800c5fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c600:	2b00      	cmp	r3, #0
 800c602:	f000 8241 	beq.w	800ca88 <_dtoa_r+0xb18>
 800c606:	601d      	str	r5, [r3, #0]
 800c608:	e23e      	b.n	800ca88 <_dtoa_r+0xb18>
 800c60a:	f8cd a020 	str.w	sl, [sp, #32]
 800c60e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c612:	2a39      	cmp	r2, #57	; 0x39
 800c614:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800c618:	d108      	bne.n	800c62c <_dtoa_r+0x6bc>
 800c61a:	459b      	cmp	fp, r3
 800c61c:	d10a      	bne.n	800c634 <_dtoa_r+0x6c4>
 800c61e:	9b08      	ldr	r3, [sp, #32]
 800c620:	3301      	adds	r3, #1
 800c622:	9308      	str	r3, [sp, #32]
 800c624:	2330      	movs	r3, #48	; 0x30
 800c626:	f88b 3000 	strb.w	r3, [fp]
 800c62a:	465b      	mov	r3, fp
 800c62c:	781a      	ldrb	r2, [r3, #0]
 800c62e:	3201      	adds	r2, #1
 800c630:	701a      	strb	r2, [r3, #0]
 800c632:	e78c      	b.n	800c54e <_dtoa_r+0x5de>
 800c634:	461d      	mov	r5, r3
 800c636:	e7ea      	b.n	800c60e <_dtoa_r+0x69e>
 800c638:	2200      	movs	r2, #0
 800c63a:	4b9b      	ldr	r3, [pc, #620]	; (800c8a8 <_dtoa_r+0x938>)
 800c63c:	f7f3 ffe4 	bl	8000608 <__aeabi_dmul>
 800c640:	2200      	movs	r2, #0
 800c642:	2300      	movs	r3, #0
 800c644:	4606      	mov	r6, r0
 800c646:	460f      	mov	r7, r1
 800c648:	f7f4 fa46 	bl	8000ad8 <__aeabi_dcmpeq>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	d09a      	beq.n	800c586 <_dtoa_r+0x616>
 800c650:	e7cb      	b.n	800c5ea <_dtoa_r+0x67a>
 800c652:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c654:	2a00      	cmp	r2, #0
 800c656:	f000 808b 	beq.w	800c770 <_dtoa_r+0x800>
 800c65a:	9a06      	ldr	r2, [sp, #24]
 800c65c:	2a01      	cmp	r2, #1
 800c65e:	dc6e      	bgt.n	800c73e <_dtoa_r+0x7ce>
 800c660:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c662:	2a00      	cmp	r2, #0
 800c664:	d067      	beq.n	800c736 <_dtoa_r+0x7c6>
 800c666:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c66a:	9f07      	ldr	r7, [sp, #28]
 800c66c:	9d05      	ldr	r5, [sp, #20]
 800c66e:	9a05      	ldr	r2, [sp, #20]
 800c670:	2101      	movs	r1, #1
 800c672:	441a      	add	r2, r3
 800c674:	4620      	mov	r0, r4
 800c676:	9205      	str	r2, [sp, #20]
 800c678:	4498      	add	r8, r3
 800c67a:	f001 f85f 	bl	800d73c <__i2b>
 800c67e:	4606      	mov	r6, r0
 800c680:	2d00      	cmp	r5, #0
 800c682:	dd0c      	ble.n	800c69e <_dtoa_r+0x72e>
 800c684:	f1b8 0f00 	cmp.w	r8, #0
 800c688:	dd09      	ble.n	800c69e <_dtoa_r+0x72e>
 800c68a:	4545      	cmp	r5, r8
 800c68c:	9a05      	ldr	r2, [sp, #20]
 800c68e:	462b      	mov	r3, r5
 800c690:	bfa8      	it	ge
 800c692:	4643      	movge	r3, r8
 800c694:	1ad2      	subs	r2, r2, r3
 800c696:	9205      	str	r2, [sp, #20]
 800c698:	1aed      	subs	r5, r5, r3
 800c69a:	eba8 0803 	sub.w	r8, r8, r3
 800c69e:	9b07      	ldr	r3, [sp, #28]
 800c6a0:	b1eb      	cbz	r3, 800c6de <_dtoa_r+0x76e>
 800c6a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d067      	beq.n	800c778 <_dtoa_r+0x808>
 800c6a8:	b18f      	cbz	r7, 800c6ce <_dtoa_r+0x75e>
 800c6aa:	4631      	mov	r1, r6
 800c6ac:	463a      	mov	r2, r7
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	f001 f8e4 	bl	800d87c <__pow5mult>
 800c6b4:	9a04      	ldr	r2, [sp, #16]
 800c6b6:	4601      	mov	r1, r0
 800c6b8:	4606      	mov	r6, r0
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	f001 f847 	bl	800d74e <__multiply>
 800c6c0:	9904      	ldr	r1, [sp, #16]
 800c6c2:	9008      	str	r0, [sp, #32]
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	f000 ff5b 	bl	800d580 <_Bfree>
 800c6ca:	9b08      	ldr	r3, [sp, #32]
 800c6cc:	9304      	str	r3, [sp, #16]
 800c6ce:	9b07      	ldr	r3, [sp, #28]
 800c6d0:	1bda      	subs	r2, r3, r7
 800c6d2:	d004      	beq.n	800c6de <_dtoa_r+0x76e>
 800c6d4:	9904      	ldr	r1, [sp, #16]
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	f001 f8d0 	bl	800d87c <__pow5mult>
 800c6dc:	9004      	str	r0, [sp, #16]
 800c6de:	2101      	movs	r1, #1
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f001 f82b 	bl	800d73c <__i2b>
 800c6e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6e8:	4607      	mov	r7, r0
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	f000 81d0 	beq.w	800ca90 <_dtoa_r+0xb20>
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	4601      	mov	r1, r0
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	f001 f8c1 	bl	800d87c <__pow5mult>
 800c6fa:	9b06      	ldr	r3, [sp, #24]
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	4607      	mov	r7, r0
 800c700:	dc40      	bgt.n	800c784 <_dtoa_r+0x814>
 800c702:	9b00      	ldr	r3, [sp, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d139      	bne.n	800c77c <_dtoa_r+0x80c>
 800c708:	9b01      	ldr	r3, [sp, #4]
 800c70a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d136      	bne.n	800c780 <_dtoa_r+0x810>
 800c712:	9b01      	ldr	r3, [sp, #4]
 800c714:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c718:	0d1b      	lsrs	r3, r3, #20
 800c71a:	051b      	lsls	r3, r3, #20
 800c71c:	b12b      	cbz	r3, 800c72a <_dtoa_r+0x7ba>
 800c71e:	9b05      	ldr	r3, [sp, #20]
 800c720:	3301      	adds	r3, #1
 800c722:	9305      	str	r3, [sp, #20]
 800c724:	f108 0801 	add.w	r8, r8, #1
 800c728:	2301      	movs	r3, #1
 800c72a:	9307      	str	r3, [sp, #28]
 800c72c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d12a      	bne.n	800c788 <_dtoa_r+0x818>
 800c732:	2001      	movs	r0, #1
 800c734:	e030      	b.n	800c798 <_dtoa_r+0x828>
 800c736:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c738:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c73c:	e795      	b.n	800c66a <_dtoa_r+0x6fa>
 800c73e:	9b07      	ldr	r3, [sp, #28]
 800c740:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800c744:	42bb      	cmp	r3, r7
 800c746:	bfbf      	itttt	lt
 800c748:	9b07      	ldrlt	r3, [sp, #28]
 800c74a:	9707      	strlt	r7, [sp, #28]
 800c74c:	1afa      	sublt	r2, r7, r3
 800c74e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c750:	bfbb      	ittet	lt
 800c752:	189b      	addlt	r3, r3, r2
 800c754:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c756:	1bdf      	subge	r7, r3, r7
 800c758:	2700      	movlt	r7, #0
 800c75a:	f1b9 0f00 	cmp.w	r9, #0
 800c75e:	bfb5      	itete	lt
 800c760:	9b05      	ldrlt	r3, [sp, #20]
 800c762:	9d05      	ldrge	r5, [sp, #20]
 800c764:	eba3 0509 	sublt.w	r5, r3, r9
 800c768:	464b      	movge	r3, r9
 800c76a:	bfb8      	it	lt
 800c76c:	2300      	movlt	r3, #0
 800c76e:	e77e      	b.n	800c66e <_dtoa_r+0x6fe>
 800c770:	9f07      	ldr	r7, [sp, #28]
 800c772:	9d05      	ldr	r5, [sp, #20]
 800c774:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c776:	e783      	b.n	800c680 <_dtoa_r+0x710>
 800c778:	9a07      	ldr	r2, [sp, #28]
 800c77a:	e7ab      	b.n	800c6d4 <_dtoa_r+0x764>
 800c77c:	2300      	movs	r3, #0
 800c77e:	e7d4      	b.n	800c72a <_dtoa_r+0x7ba>
 800c780:	9b00      	ldr	r3, [sp, #0]
 800c782:	e7d2      	b.n	800c72a <_dtoa_r+0x7ba>
 800c784:	2300      	movs	r3, #0
 800c786:	9307      	str	r3, [sp, #28]
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c78e:	6918      	ldr	r0, [r3, #16]
 800c790:	f000 ff86 	bl	800d6a0 <__hi0bits>
 800c794:	f1c0 0020 	rsb	r0, r0, #32
 800c798:	4440      	add	r0, r8
 800c79a:	f010 001f 	ands.w	r0, r0, #31
 800c79e:	d047      	beq.n	800c830 <_dtoa_r+0x8c0>
 800c7a0:	f1c0 0320 	rsb	r3, r0, #32
 800c7a4:	2b04      	cmp	r3, #4
 800c7a6:	dd3b      	ble.n	800c820 <_dtoa_r+0x8b0>
 800c7a8:	9b05      	ldr	r3, [sp, #20]
 800c7aa:	f1c0 001c 	rsb	r0, r0, #28
 800c7ae:	4403      	add	r3, r0
 800c7b0:	9305      	str	r3, [sp, #20]
 800c7b2:	4405      	add	r5, r0
 800c7b4:	4480      	add	r8, r0
 800c7b6:	9b05      	ldr	r3, [sp, #20]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	dd05      	ble.n	800c7c8 <_dtoa_r+0x858>
 800c7bc:	461a      	mov	r2, r3
 800c7be:	9904      	ldr	r1, [sp, #16]
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	f001 f8a9 	bl	800d918 <__lshift>
 800c7c6:	9004      	str	r0, [sp, #16]
 800c7c8:	f1b8 0f00 	cmp.w	r8, #0
 800c7cc:	dd05      	ble.n	800c7da <_dtoa_r+0x86a>
 800c7ce:	4639      	mov	r1, r7
 800c7d0:	4642      	mov	r2, r8
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f001 f8a0 	bl	800d918 <__lshift>
 800c7d8:	4607      	mov	r7, r0
 800c7da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7dc:	b353      	cbz	r3, 800c834 <_dtoa_r+0x8c4>
 800c7de:	4639      	mov	r1, r7
 800c7e0:	9804      	ldr	r0, [sp, #16]
 800c7e2:	f001 f8ed 	bl	800d9c0 <__mcmp>
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	da24      	bge.n	800c834 <_dtoa_r+0x8c4>
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	220a      	movs	r2, #10
 800c7ee:	9904      	ldr	r1, [sp, #16]
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f000 fedc 	bl	800d5ae <__multadd>
 800c7f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7f8:	9004      	str	r0, [sp, #16]
 800c7fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	f000 814d 	beq.w	800ca9e <_dtoa_r+0xb2e>
 800c804:	2300      	movs	r3, #0
 800c806:	4631      	mov	r1, r6
 800c808:	220a      	movs	r2, #10
 800c80a:	4620      	mov	r0, r4
 800c80c:	f000 fecf 	bl	800d5ae <__multadd>
 800c810:	9b02      	ldr	r3, [sp, #8]
 800c812:	2b00      	cmp	r3, #0
 800c814:	4606      	mov	r6, r0
 800c816:	dc4f      	bgt.n	800c8b8 <_dtoa_r+0x948>
 800c818:	9b06      	ldr	r3, [sp, #24]
 800c81a:	2b02      	cmp	r3, #2
 800c81c:	dd4c      	ble.n	800c8b8 <_dtoa_r+0x948>
 800c81e:	e011      	b.n	800c844 <_dtoa_r+0x8d4>
 800c820:	d0c9      	beq.n	800c7b6 <_dtoa_r+0x846>
 800c822:	9a05      	ldr	r2, [sp, #20]
 800c824:	331c      	adds	r3, #28
 800c826:	441a      	add	r2, r3
 800c828:	9205      	str	r2, [sp, #20]
 800c82a:	441d      	add	r5, r3
 800c82c:	4498      	add	r8, r3
 800c82e:	e7c2      	b.n	800c7b6 <_dtoa_r+0x846>
 800c830:	4603      	mov	r3, r0
 800c832:	e7f6      	b.n	800c822 <_dtoa_r+0x8b2>
 800c834:	f1b9 0f00 	cmp.w	r9, #0
 800c838:	dc38      	bgt.n	800c8ac <_dtoa_r+0x93c>
 800c83a:	9b06      	ldr	r3, [sp, #24]
 800c83c:	2b02      	cmp	r3, #2
 800c83e:	dd35      	ble.n	800c8ac <_dtoa_r+0x93c>
 800c840:	f8cd 9008 	str.w	r9, [sp, #8]
 800c844:	9b02      	ldr	r3, [sp, #8]
 800c846:	b963      	cbnz	r3, 800c862 <_dtoa_r+0x8f2>
 800c848:	4639      	mov	r1, r7
 800c84a:	2205      	movs	r2, #5
 800c84c:	4620      	mov	r0, r4
 800c84e:	f000 feae 	bl	800d5ae <__multadd>
 800c852:	4601      	mov	r1, r0
 800c854:	4607      	mov	r7, r0
 800c856:	9804      	ldr	r0, [sp, #16]
 800c858:	f001 f8b2 	bl	800d9c0 <__mcmp>
 800c85c:	2800      	cmp	r0, #0
 800c85e:	f73f adcc 	bgt.w	800c3fa <_dtoa_r+0x48a>
 800c862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c864:	465d      	mov	r5, fp
 800c866:	ea6f 0a03 	mvn.w	sl, r3
 800c86a:	f04f 0900 	mov.w	r9, #0
 800c86e:	4639      	mov	r1, r7
 800c870:	4620      	mov	r0, r4
 800c872:	f000 fe85 	bl	800d580 <_Bfree>
 800c876:	2e00      	cmp	r6, #0
 800c878:	f43f aeb7 	beq.w	800c5ea <_dtoa_r+0x67a>
 800c87c:	f1b9 0f00 	cmp.w	r9, #0
 800c880:	d005      	beq.n	800c88e <_dtoa_r+0x91e>
 800c882:	45b1      	cmp	r9, r6
 800c884:	d003      	beq.n	800c88e <_dtoa_r+0x91e>
 800c886:	4649      	mov	r1, r9
 800c888:	4620      	mov	r0, r4
 800c88a:	f000 fe79 	bl	800d580 <_Bfree>
 800c88e:	4631      	mov	r1, r6
 800c890:	4620      	mov	r0, r4
 800c892:	f000 fe75 	bl	800d580 <_Bfree>
 800c896:	e6a8      	b.n	800c5ea <_dtoa_r+0x67a>
 800c898:	2700      	movs	r7, #0
 800c89a:	463e      	mov	r6, r7
 800c89c:	e7e1      	b.n	800c862 <_dtoa_r+0x8f2>
 800c89e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c8a2:	463e      	mov	r6, r7
 800c8a4:	e5a9      	b.n	800c3fa <_dtoa_r+0x48a>
 800c8a6:	bf00      	nop
 800c8a8:	40240000 	.word	0x40240000
 800c8ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8ae:	f8cd 9008 	str.w	r9, [sp, #8]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	f000 80fa 	beq.w	800caac <_dtoa_r+0xb3c>
 800c8b8:	2d00      	cmp	r5, #0
 800c8ba:	dd05      	ble.n	800c8c8 <_dtoa_r+0x958>
 800c8bc:	4631      	mov	r1, r6
 800c8be:	462a      	mov	r2, r5
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	f001 f829 	bl	800d918 <__lshift>
 800c8c6:	4606      	mov	r6, r0
 800c8c8:	9b07      	ldr	r3, [sp, #28]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d04c      	beq.n	800c968 <_dtoa_r+0x9f8>
 800c8ce:	6871      	ldr	r1, [r6, #4]
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	f000 fe21 	bl	800d518 <_Balloc>
 800c8d6:	6932      	ldr	r2, [r6, #16]
 800c8d8:	3202      	adds	r2, #2
 800c8da:	4605      	mov	r5, r0
 800c8dc:	0092      	lsls	r2, r2, #2
 800c8de:	f106 010c 	add.w	r1, r6, #12
 800c8e2:	300c      	adds	r0, #12
 800c8e4:	f7fd fc49 	bl	800a17a <memcpy>
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f001 f813 	bl	800d918 <__lshift>
 800c8f2:	9b00      	ldr	r3, [sp, #0]
 800c8f4:	f8cd b014 	str.w	fp, [sp, #20]
 800c8f8:	f003 0301 	and.w	r3, r3, #1
 800c8fc:	46b1      	mov	r9, r6
 800c8fe:	9307      	str	r3, [sp, #28]
 800c900:	4606      	mov	r6, r0
 800c902:	4639      	mov	r1, r7
 800c904:	9804      	ldr	r0, [sp, #16]
 800c906:	f7ff faa7 	bl	800be58 <quorem>
 800c90a:	4649      	mov	r1, r9
 800c90c:	4605      	mov	r5, r0
 800c90e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c912:	9804      	ldr	r0, [sp, #16]
 800c914:	f001 f854 	bl	800d9c0 <__mcmp>
 800c918:	4632      	mov	r2, r6
 800c91a:	9000      	str	r0, [sp, #0]
 800c91c:	4639      	mov	r1, r7
 800c91e:	4620      	mov	r0, r4
 800c920:	f001 f868 	bl	800d9f4 <__mdiff>
 800c924:	68c3      	ldr	r3, [r0, #12]
 800c926:	4602      	mov	r2, r0
 800c928:	bb03      	cbnz	r3, 800c96c <_dtoa_r+0x9fc>
 800c92a:	4601      	mov	r1, r0
 800c92c:	9008      	str	r0, [sp, #32]
 800c92e:	9804      	ldr	r0, [sp, #16]
 800c930:	f001 f846 	bl	800d9c0 <__mcmp>
 800c934:	9a08      	ldr	r2, [sp, #32]
 800c936:	4603      	mov	r3, r0
 800c938:	4611      	mov	r1, r2
 800c93a:	4620      	mov	r0, r4
 800c93c:	9308      	str	r3, [sp, #32]
 800c93e:	f000 fe1f 	bl	800d580 <_Bfree>
 800c942:	9b08      	ldr	r3, [sp, #32]
 800c944:	b9a3      	cbnz	r3, 800c970 <_dtoa_r+0xa00>
 800c946:	9a06      	ldr	r2, [sp, #24]
 800c948:	b992      	cbnz	r2, 800c970 <_dtoa_r+0xa00>
 800c94a:	9a07      	ldr	r2, [sp, #28]
 800c94c:	b982      	cbnz	r2, 800c970 <_dtoa_r+0xa00>
 800c94e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c952:	d029      	beq.n	800c9a8 <_dtoa_r+0xa38>
 800c954:	9b00      	ldr	r3, [sp, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	dd01      	ble.n	800c95e <_dtoa_r+0x9ee>
 800c95a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c95e:	9b05      	ldr	r3, [sp, #20]
 800c960:	1c5d      	adds	r5, r3, #1
 800c962:	f883 8000 	strb.w	r8, [r3]
 800c966:	e782      	b.n	800c86e <_dtoa_r+0x8fe>
 800c968:	4630      	mov	r0, r6
 800c96a:	e7c2      	b.n	800c8f2 <_dtoa_r+0x982>
 800c96c:	2301      	movs	r3, #1
 800c96e:	e7e3      	b.n	800c938 <_dtoa_r+0x9c8>
 800c970:	9a00      	ldr	r2, [sp, #0]
 800c972:	2a00      	cmp	r2, #0
 800c974:	db04      	blt.n	800c980 <_dtoa_r+0xa10>
 800c976:	d125      	bne.n	800c9c4 <_dtoa_r+0xa54>
 800c978:	9a06      	ldr	r2, [sp, #24]
 800c97a:	bb1a      	cbnz	r2, 800c9c4 <_dtoa_r+0xa54>
 800c97c:	9a07      	ldr	r2, [sp, #28]
 800c97e:	bb0a      	cbnz	r2, 800c9c4 <_dtoa_r+0xa54>
 800c980:	2b00      	cmp	r3, #0
 800c982:	ddec      	ble.n	800c95e <_dtoa_r+0x9ee>
 800c984:	2201      	movs	r2, #1
 800c986:	9904      	ldr	r1, [sp, #16]
 800c988:	4620      	mov	r0, r4
 800c98a:	f000 ffc5 	bl	800d918 <__lshift>
 800c98e:	4639      	mov	r1, r7
 800c990:	9004      	str	r0, [sp, #16]
 800c992:	f001 f815 	bl	800d9c0 <__mcmp>
 800c996:	2800      	cmp	r0, #0
 800c998:	dc03      	bgt.n	800c9a2 <_dtoa_r+0xa32>
 800c99a:	d1e0      	bne.n	800c95e <_dtoa_r+0x9ee>
 800c99c:	f018 0f01 	tst.w	r8, #1
 800c9a0:	d0dd      	beq.n	800c95e <_dtoa_r+0x9ee>
 800c9a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c9a6:	d1d8      	bne.n	800c95a <_dtoa_r+0x9ea>
 800c9a8:	9b05      	ldr	r3, [sp, #20]
 800c9aa:	9a05      	ldr	r2, [sp, #20]
 800c9ac:	1c5d      	adds	r5, r3, #1
 800c9ae:	2339      	movs	r3, #57	; 0x39
 800c9b0:	7013      	strb	r3, [r2, #0]
 800c9b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c9b6:	2b39      	cmp	r3, #57	; 0x39
 800c9b8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c9bc:	d04f      	beq.n	800ca5e <_dtoa_r+0xaee>
 800c9be:	3301      	adds	r3, #1
 800c9c0:	7013      	strb	r3, [r2, #0]
 800c9c2:	e754      	b.n	800c86e <_dtoa_r+0x8fe>
 800c9c4:	9a05      	ldr	r2, [sp, #20]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	f102 0501 	add.w	r5, r2, #1
 800c9cc:	dd06      	ble.n	800c9dc <_dtoa_r+0xa6c>
 800c9ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c9d2:	d0e9      	beq.n	800c9a8 <_dtoa_r+0xa38>
 800c9d4:	f108 0801 	add.w	r8, r8, #1
 800c9d8:	9b05      	ldr	r3, [sp, #20]
 800c9da:	e7c2      	b.n	800c962 <_dtoa_r+0x9f2>
 800c9dc:	9a02      	ldr	r2, [sp, #8]
 800c9de:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c9e2:	eba5 030b 	sub.w	r3, r5, fp
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d021      	beq.n	800ca2e <_dtoa_r+0xabe>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	220a      	movs	r2, #10
 800c9ee:	9904      	ldr	r1, [sp, #16]
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	f000 fddc 	bl	800d5ae <__multadd>
 800c9f6:	45b1      	cmp	r9, r6
 800c9f8:	9004      	str	r0, [sp, #16]
 800c9fa:	f04f 0300 	mov.w	r3, #0
 800c9fe:	f04f 020a 	mov.w	r2, #10
 800ca02:	4649      	mov	r1, r9
 800ca04:	4620      	mov	r0, r4
 800ca06:	d105      	bne.n	800ca14 <_dtoa_r+0xaa4>
 800ca08:	f000 fdd1 	bl	800d5ae <__multadd>
 800ca0c:	4681      	mov	r9, r0
 800ca0e:	4606      	mov	r6, r0
 800ca10:	9505      	str	r5, [sp, #20]
 800ca12:	e776      	b.n	800c902 <_dtoa_r+0x992>
 800ca14:	f000 fdcb 	bl	800d5ae <__multadd>
 800ca18:	4631      	mov	r1, r6
 800ca1a:	4681      	mov	r9, r0
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	220a      	movs	r2, #10
 800ca20:	4620      	mov	r0, r4
 800ca22:	f000 fdc4 	bl	800d5ae <__multadd>
 800ca26:	4606      	mov	r6, r0
 800ca28:	e7f2      	b.n	800ca10 <_dtoa_r+0xaa0>
 800ca2a:	f04f 0900 	mov.w	r9, #0
 800ca2e:	2201      	movs	r2, #1
 800ca30:	9904      	ldr	r1, [sp, #16]
 800ca32:	4620      	mov	r0, r4
 800ca34:	f000 ff70 	bl	800d918 <__lshift>
 800ca38:	4639      	mov	r1, r7
 800ca3a:	9004      	str	r0, [sp, #16]
 800ca3c:	f000 ffc0 	bl	800d9c0 <__mcmp>
 800ca40:	2800      	cmp	r0, #0
 800ca42:	dcb6      	bgt.n	800c9b2 <_dtoa_r+0xa42>
 800ca44:	d102      	bne.n	800ca4c <_dtoa_r+0xadc>
 800ca46:	f018 0f01 	tst.w	r8, #1
 800ca4a:	d1b2      	bne.n	800c9b2 <_dtoa_r+0xa42>
 800ca4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ca50:	2b30      	cmp	r3, #48	; 0x30
 800ca52:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800ca56:	f47f af0a 	bne.w	800c86e <_dtoa_r+0x8fe>
 800ca5a:	4615      	mov	r5, r2
 800ca5c:	e7f6      	b.n	800ca4c <_dtoa_r+0xadc>
 800ca5e:	4593      	cmp	fp, r2
 800ca60:	d105      	bne.n	800ca6e <_dtoa_r+0xafe>
 800ca62:	2331      	movs	r3, #49	; 0x31
 800ca64:	f10a 0a01 	add.w	sl, sl, #1
 800ca68:	f88b 3000 	strb.w	r3, [fp]
 800ca6c:	e6ff      	b.n	800c86e <_dtoa_r+0x8fe>
 800ca6e:	4615      	mov	r5, r2
 800ca70:	e79f      	b.n	800c9b2 <_dtoa_r+0xa42>
 800ca72:	f8df b064 	ldr.w	fp, [pc, #100]	; 800cad8 <_dtoa_r+0xb68>
 800ca76:	e007      	b.n	800ca88 <_dtoa_r+0xb18>
 800ca78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca7a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800cadc <_dtoa_r+0xb6c>
 800ca7e:	b11b      	cbz	r3, 800ca88 <_dtoa_r+0xb18>
 800ca80:	f10b 0308 	add.w	r3, fp, #8
 800ca84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ca86:	6013      	str	r3, [r2, #0]
 800ca88:	4658      	mov	r0, fp
 800ca8a:	b017      	add	sp, #92	; 0x5c
 800ca8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca90:	9b06      	ldr	r3, [sp, #24]
 800ca92:	2b01      	cmp	r3, #1
 800ca94:	f77f ae35 	ble.w	800c702 <_dtoa_r+0x792>
 800ca98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca9a:	9307      	str	r3, [sp, #28]
 800ca9c:	e649      	b.n	800c732 <_dtoa_r+0x7c2>
 800ca9e:	9b02      	ldr	r3, [sp, #8]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	dc03      	bgt.n	800caac <_dtoa_r+0xb3c>
 800caa4:	9b06      	ldr	r3, [sp, #24]
 800caa6:	2b02      	cmp	r3, #2
 800caa8:	f73f aecc 	bgt.w	800c844 <_dtoa_r+0x8d4>
 800caac:	465d      	mov	r5, fp
 800caae:	4639      	mov	r1, r7
 800cab0:	9804      	ldr	r0, [sp, #16]
 800cab2:	f7ff f9d1 	bl	800be58 <quorem>
 800cab6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800caba:	f805 8b01 	strb.w	r8, [r5], #1
 800cabe:	9a02      	ldr	r2, [sp, #8]
 800cac0:	eba5 030b 	sub.w	r3, r5, fp
 800cac4:	429a      	cmp	r2, r3
 800cac6:	ddb0      	ble.n	800ca2a <_dtoa_r+0xaba>
 800cac8:	2300      	movs	r3, #0
 800caca:	220a      	movs	r2, #10
 800cacc:	9904      	ldr	r1, [sp, #16]
 800cace:	4620      	mov	r0, r4
 800cad0:	f000 fd6d 	bl	800d5ae <__multadd>
 800cad4:	9004      	str	r0, [sp, #16]
 800cad6:	e7ea      	b.n	800caae <_dtoa_r+0xb3e>
 800cad8:	0800eb9e 	.word	0x0800eb9e
 800cadc:	0800ed19 	.word	0x0800ed19

0800cae0 <__sflush_r>:
 800cae0:	898a      	ldrh	r2, [r1, #12]
 800cae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cae6:	4605      	mov	r5, r0
 800cae8:	0710      	lsls	r0, r2, #28
 800caea:	460c      	mov	r4, r1
 800caec:	d458      	bmi.n	800cba0 <__sflush_r+0xc0>
 800caee:	684b      	ldr	r3, [r1, #4]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	dc05      	bgt.n	800cb00 <__sflush_r+0x20>
 800caf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	dc02      	bgt.n	800cb00 <__sflush_r+0x20>
 800cafa:	2000      	movs	r0, #0
 800cafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb02:	2e00      	cmp	r6, #0
 800cb04:	d0f9      	beq.n	800cafa <__sflush_r+0x1a>
 800cb06:	2300      	movs	r3, #0
 800cb08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb0c:	682f      	ldr	r7, [r5, #0]
 800cb0e:	6a21      	ldr	r1, [r4, #32]
 800cb10:	602b      	str	r3, [r5, #0]
 800cb12:	d032      	beq.n	800cb7a <__sflush_r+0x9a>
 800cb14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb16:	89a3      	ldrh	r3, [r4, #12]
 800cb18:	075a      	lsls	r2, r3, #29
 800cb1a:	d505      	bpl.n	800cb28 <__sflush_r+0x48>
 800cb1c:	6863      	ldr	r3, [r4, #4]
 800cb1e:	1ac0      	subs	r0, r0, r3
 800cb20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb22:	b10b      	cbz	r3, 800cb28 <__sflush_r+0x48>
 800cb24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb26:	1ac0      	subs	r0, r0, r3
 800cb28:	2300      	movs	r3, #0
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb2e:	6a21      	ldr	r1, [r4, #32]
 800cb30:	4628      	mov	r0, r5
 800cb32:	47b0      	blx	r6
 800cb34:	1c43      	adds	r3, r0, #1
 800cb36:	89a3      	ldrh	r3, [r4, #12]
 800cb38:	d106      	bne.n	800cb48 <__sflush_r+0x68>
 800cb3a:	6829      	ldr	r1, [r5, #0]
 800cb3c:	291d      	cmp	r1, #29
 800cb3e:	d848      	bhi.n	800cbd2 <__sflush_r+0xf2>
 800cb40:	4a29      	ldr	r2, [pc, #164]	; (800cbe8 <__sflush_r+0x108>)
 800cb42:	40ca      	lsrs	r2, r1
 800cb44:	07d6      	lsls	r6, r2, #31
 800cb46:	d544      	bpl.n	800cbd2 <__sflush_r+0xf2>
 800cb48:	2200      	movs	r2, #0
 800cb4a:	6062      	str	r2, [r4, #4]
 800cb4c:	04d9      	lsls	r1, r3, #19
 800cb4e:	6922      	ldr	r2, [r4, #16]
 800cb50:	6022      	str	r2, [r4, #0]
 800cb52:	d504      	bpl.n	800cb5e <__sflush_r+0x7e>
 800cb54:	1c42      	adds	r2, r0, #1
 800cb56:	d101      	bne.n	800cb5c <__sflush_r+0x7c>
 800cb58:	682b      	ldr	r3, [r5, #0]
 800cb5a:	b903      	cbnz	r3, 800cb5e <__sflush_r+0x7e>
 800cb5c:	6560      	str	r0, [r4, #84]	; 0x54
 800cb5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb60:	602f      	str	r7, [r5, #0]
 800cb62:	2900      	cmp	r1, #0
 800cb64:	d0c9      	beq.n	800cafa <__sflush_r+0x1a>
 800cb66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb6a:	4299      	cmp	r1, r3
 800cb6c:	d002      	beq.n	800cb74 <__sflush_r+0x94>
 800cb6e:	4628      	mov	r0, r5
 800cb70:	f001 f8e0 	bl	800dd34 <_free_r>
 800cb74:	2000      	movs	r0, #0
 800cb76:	6360      	str	r0, [r4, #52]	; 0x34
 800cb78:	e7c0      	b.n	800cafc <__sflush_r+0x1c>
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	47b0      	blx	r6
 800cb80:	1c41      	adds	r1, r0, #1
 800cb82:	d1c8      	bne.n	800cb16 <__sflush_r+0x36>
 800cb84:	682b      	ldr	r3, [r5, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d0c5      	beq.n	800cb16 <__sflush_r+0x36>
 800cb8a:	2b1d      	cmp	r3, #29
 800cb8c:	d001      	beq.n	800cb92 <__sflush_r+0xb2>
 800cb8e:	2b16      	cmp	r3, #22
 800cb90:	d101      	bne.n	800cb96 <__sflush_r+0xb6>
 800cb92:	602f      	str	r7, [r5, #0]
 800cb94:	e7b1      	b.n	800cafa <__sflush_r+0x1a>
 800cb96:	89a3      	ldrh	r3, [r4, #12]
 800cb98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb9c:	81a3      	strh	r3, [r4, #12]
 800cb9e:	e7ad      	b.n	800cafc <__sflush_r+0x1c>
 800cba0:	690f      	ldr	r7, [r1, #16]
 800cba2:	2f00      	cmp	r7, #0
 800cba4:	d0a9      	beq.n	800cafa <__sflush_r+0x1a>
 800cba6:	0793      	lsls	r3, r2, #30
 800cba8:	680e      	ldr	r6, [r1, #0]
 800cbaa:	bf08      	it	eq
 800cbac:	694b      	ldreq	r3, [r1, #20]
 800cbae:	600f      	str	r7, [r1, #0]
 800cbb0:	bf18      	it	ne
 800cbb2:	2300      	movne	r3, #0
 800cbb4:	eba6 0807 	sub.w	r8, r6, r7
 800cbb8:	608b      	str	r3, [r1, #8]
 800cbba:	f1b8 0f00 	cmp.w	r8, #0
 800cbbe:	dd9c      	ble.n	800cafa <__sflush_r+0x1a>
 800cbc0:	4643      	mov	r3, r8
 800cbc2:	463a      	mov	r2, r7
 800cbc4:	6a21      	ldr	r1, [r4, #32]
 800cbc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbc8:	4628      	mov	r0, r5
 800cbca:	47b0      	blx	r6
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	dc06      	bgt.n	800cbde <__sflush_r+0xfe>
 800cbd0:	89a3      	ldrh	r3, [r4, #12]
 800cbd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbd6:	81a3      	strh	r3, [r4, #12]
 800cbd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbdc:	e78e      	b.n	800cafc <__sflush_r+0x1c>
 800cbde:	4407      	add	r7, r0
 800cbe0:	eba8 0800 	sub.w	r8, r8, r0
 800cbe4:	e7e9      	b.n	800cbba <__sflush_r+0xda>
 800cbe6:	bf00      	nop
 800cbe8:	20400001 	.word	0x20400001

0800cbec <_fflush_r>:
 800cbec:	b538      	push	{r3, r4, r5, lr}
 800cbee:	690b      	ldr	r3, [r1, #16]
 800cbf0:	4605      	mov	r5, r0
 800cbf2:	460c      	mov	r4, r1
 800cbf4:	b1db      	cbz	r3, 800cc2e <_fflush_r+0x42>
 800cbf6:	b118      	cbz	r0, 800cc00 <_fflush_r+0x14>
 800cbf8:	6983      	ldr	r3, [r0, #24]
 800cbfa:	b90b      	cbnz	r3, 800cc00 <_fflush_r+0x14>
 800cbfc:	f000 f860 	bl	800ccc0 <__sinit>
 800cc00:	4b0c      	ldr	r3, [pc, #48]	; (800cc34 <_fflush_r+0x48>)
 800cc02:	429c      	cmp	r4, r3
 800cc04:	d109      	bne.n	800cc1a <_fflush_r+0x2e>
 800cc06:	686c      	ldr	r4, [r5, #4]
 800cc08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc0c:	b17b      	cbz	r3, 800cc2e <_fflush_r+0x42>
 800cc0e:	4621      	mov	r1, r4
 800cc10:	4628      	mov	r0, r5
 800cc12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc16:	f7ff bf63 	b.w	800cae0 <__sflush_r>
 800cc1a:	4b07      	ldr	r3, [pc, #28]	; (800cc38 <_fflush_r+0x4c>)
 800cc1c:	429c      	cmp	r4, r3
 800cc1e:	d101      	bne.n	800cc24 <_fflush_r+0x38>
 800cc20:	68ac      	ldr	r4, [r5, #8]
 800cc22:	e7f1      	b.n	800cc08 <_fflush_r+0x1c>
 800cc24:	4b05      	ldr	r3, [pc, #20]	; (800cc3c <_fflush_r+0x50>)
 800cc26:	429c      	cmp	r4, r3
 800cc28:	bf08      	it	eq
 800cc2a:	68ec      	ldreq	r4, [r5, #12]
 800cc2c:	e7ec      	b.n	800cc08 <_fflush_r+0x1c>
 800cc2e:	2000      	movs	r0, #0
 800cc30:	bd38      	pop	{r3, r4, r5, pc}
 800cc32:	bf00      	nop
 800cc34:	0800ed48 	.word	0x0800ed48
 800cc38:	0800ed68 	.word	0x0800ed68
 800cc3c:	0800ed28 	.word	0x0800ed28

0800cc40 <std>:
 800cc40:	2300      	movs	r3, #0
 800cc42:	b510      	push	{r4, lr}
 800cc44:	4604      	mov	r4, r0
 800cc46:	e9c0 3300 	strd	r3, r3, [r0]
 800cc4a:	6083      	str	r3, [r0, #8]
 800cc4c:	8181      	strh	r1, [r0, #12]
 800cc4e:	6643      	str	r3, [r0, #100]	; 0x64
 800cc50:	81c2      	strh	r2, [r0, #14]
 800cc52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc56:	6183      	str	r3, [r0, #24]
 800cc58:	4619      	mov	r1, r3
 800cc5a:	2208      	movs	r2, #8
 800cc5c:	305c      	adds	r0, #92	; 0x5c
 800cc5e:	f7fd fa97 	bl	800a190 <memset>
 800cc62:	4b05      	ldr	r3, [pc, #20]	; (800cc78 <std+0x38>)
 800cc64:	6263      	str	r3, [r4, #36]	; 0x24
 800cc66:	4b05      	ldr	r3, [pc, #20]	; (800cc7c <std+0x3c>)
 800cc68:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc6a:	4b05      	ldr	r3, [pc, #20]	; (800cc80 <std+0x40>)
 800cc6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc6e:	4b05      	ldr	r3, [pc, #20]	; (800cc84 <std+0x44>)
 800cc70:	6224      	str	r4, [r4, #32]
 800cc72:	6323      	str	r3, [r4, #48]	; 0x30
 800cc74:	bd10      	pop	{r4, pc}
 800cc76:	bf00      	nop
 800cc78:	0800e3c9 	.word	0x0800e3c9
 800cc7c:	0800e3eb 	.word	0x0800e3eb
 800cc80:	0800e423 	.word	0x0800e423
 800cc84:	0800e447 	.word	0x0800e447

0800cc88 <_cleanup_r>:
 800cc88:	4901      	ldr	r1, [pc, #4]	; (800cc90 <_cleanup_r+0x8>)
 800cc8a:	f000 b885 	b.w	800cd98 <_fwalk_reent>
 800cc8e:	bf00      	nop
 800cc90:	0800cbed 	.word	0x0800cbed

0800cc94 <__sfmoreglue>:
 800cc94:	b570      	push	{r4, r5, r6, lr}
 800cc96:	1e4a      	subs	r2, r1, #1
 800cc98:	2568      	movs	r5, #104	; 0x68
 800cc9a:	4355      	muls	r5, r2
 800cc9c:	460e      	mov	r6, r1
 800cc9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cca2:	f001 f895 	bl	800ddd0 <_malloc_r>
 800cca6:	4604      	mov	r4, r0
 800cca8:	b140      	cbz	r0, 800ccbc <__sfmoreglue+0x28>
 800ccaa:	2100      	movs	r1, #0
 800ccac:	e9c0 1600 	strd	r1, r6, [r0]
 800ccb0:	300c      	adds	r0, #12
 800ccb2:	60a0      	str	r0, [r4, #8]
 800ccb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ccb8:	f7fd fa6a 	bl	800a190 <memset>
 800ccbc:	4620      	mov	r0, r4
 800ccbe:	bd70      	pop	{r4, r5, r6, pc}

0800ccc0 <__sinit>:
 800ccc0:	6983      	ldr	r3, [r0, #24]
 800ccc2:	b510      	push	{r4, lr}
 800ccc4:	4604      	mov	r4, r0
 800ccc6:	bb33      	cbnz	r3, 800cd16 <__sinit+0x56>
 800ccc8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cccc:	6503      	str	r3, [r0, #80]	; 0x50
 800ccce:	4b12      	ldr	r3, [pc, #72]	; (800cd18 <__sinit+0x58>)
 800ccd0:	4a12      	ldr	r2, [pc, #72]	; (800cd1c <__sinit+0x5c>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	6282      	str	r2, [r0, #40]	; 0x28
 800ccd6:	4298      	cmp	r0, r3
 800ccd8:	bf04      	itt	eq
 800ccda:	2301      	moveq	r3, #1
 800ccdc:	6183      	streq	r3, [r0, #24]
 800ccde:	f000 f81f 	bl	800cd20 <__sfp>
 800cce2:	6060      	str	r0, [r4, #4]
 800cce4:	4620      	mov	r0, r4
 800cce6:	f000 f81b 	bl	800cd20 <__sfp>
 800ccea:	60a0      	str	r0, [r4, #8]
 800ccec:	4620      	mov	r0, r4
 800ccee:	f000 f817 	bl	800cd20 <__sfp>
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	60e0      	str	r0, [r4, #12]
 800ccf6:	2104      	movs	r1, #4
 800ccf8:	6860      	ldr	r0, [r4, #4]
 800ccfa:	f7ff ffa1 	bl	800cc40 <std>
 800ccfe:	2201      	movs	r2, #1
 800cd00:	2109      	movs	r1, #9
 800cd02:	68a0      	ldr	r0, [r4, #8]
 800cd04:	f7ff ff9c 	bl	800cc40 <std>
 800cd08:	2202      	movs	r2, #2
 800cd0a:	2112      	movs	r1, #18
 800cd0c:	68e0      	ldr	r0, [r4, #12]
 800cd0e:	f7ff ff97 	bl	800cc40 <std>
 800cd12:	2301      	movs	r3, #1
 800cd14:	61a3      	str	r3, [r4, #24]
 800cd16:	bd10      	pop	{r4, pc}
 800cd18:	0800eb80 	.word	0x0800eb80
 800cd1c:	0800cc89 	.word	0x0800cc89

0800cd20 <__sfp>:
 800cd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd22:	4b1b      	ldr	r3, [pc, #108]	; (800cd90 <__sfp+0x70>)
 800cd24:	681e      	ldr	r6, [r3, #0]
 800cd26:	69b3      	ldr	r3, [r6, #24]
 800cd28:	4607      	mov	r7, r0
 800cd2a:	b913      	cbnz	r3, 800cd32 <__sfp+0x12>
 800cd2c:	4630      	mov	r0, r6
 800cd2e:	f7ff ffc7 	bl	800ccc0 <__sinit>
 800cd32:	3648      	adds	r6, #72	; 0x48
 800cd34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	d503      	bpl.n	800cd44 <__sfp+0x24>
 800cd3c:	6833      	ldr	r3, [r6, #0]
 800cd3e:	b133      	cbz	r3, 800cd4e <__sfp+0x2e>
 800cd40:	6836      	ldr	r6, [r6, #0]
 800cd42:	e7f7      	b.n	800cd34 <__sfp+0x14>
 800cd44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd48:	b16d      	cbz	r5, 800cd66 <__sfp+0x46>
 800cd4a:	3468      	adds	r4, #104	; 0x68
 800cd4c:	e7f4      	b.n	800cd38 <__sfp+0x18>
 800cd4e:	2104      	movs	r1, #4
 800cd50:	4638      	mov	r0, r7
 800cd52:	f7ff ff9f 	bl	800cc94 <__sfmoreglue>
 800cd56:	6030      	str	r0, [r6, #0]
 800cd58:	2800      	cmp	r0, #0
 800cd5a:	d1f1      	bne.n	800cd40 <__sfp+0x20>
 800cd5c:	230c      	movs	r3, #12
 800cd5e:	603b      	str	r3, [r7, #0]
 800cd60:	4604      	mov	r4, r0
 800cd62:	4620      	mov	r0, r4
 800cd64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd66:	4b0b      	ldr	r3, [pc, #44]	; (800cd94 <__sfp+0x74>)
 800cd68:	6665      	str	r5, [r4, #100]	; 0x64
 800cd6a:	e9c4 5500 	strd	r5, r5, [r4]
 800cd6e:	60a5      	str	r5, [r4, #8]
 800cd70:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cd74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cd78:	2208      	movs	r2, #8
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cd80:	f7fd fa06 	bl	800a190 <memset>
 800cd84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cd88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cd8c:	e7e9      	b.n	800cd62 <__sfp+0x42>
 800cd8e:	bf00      	nop
 800cd90:	0800eb80 	.word	0x0800eb80
 800cd94:	ffff0001 	.word	0xffff0001

0800cd98 <_fwalk_reent>:
 800cd98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd9c:	4680      	mov	r8, r0
 800cd9e:	4689      	mov	r9, r1
 800cda0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cda4:	2600      	movs	r6, #0
 800cda6:	b914      	cbnz	r4, 800cdae <_fwalk_reent+0x16>
 800cda8:	4630      	mov	r0, r6
 800cdaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800cdb2:	3f01      	subs	r7, #1
 800cdb4:	d501      	bpl.n	800cdba <_fwalk_reent+0x22>
 800cdb6:	6824      	ldr	r4, [r4, #0]
 800cdb8:	e7f5      	b.n	800cda6 <_fwalk_reent+0xe>
 800cdba:	89ab      	ldrh	r3, [r5, #12]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d907      	bls.n	800cdd0 <_fwalk_reent+0x38>
 800cdc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	d003      	beq.n	800cdd0 <_fwalk_reent+0x38>
 800cdc8:	4629      	mov	r1, r5
 800cdca:	4640      	mov	r0, r8
 800cdcc:	47c8      	blx	r9
 800cdce:	4306      	orrs	r6, r0
 800cdd0:	3568      	adds	r5, #104	; 0x68
 800cdd2:	e7ee      	b.n	800cdb2 <_fwalk_reent+0x1a>

0800cdd4 <rshift>:
 800cdd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdd6:	6906      	ldr	r6, [r0, #16]
 800cdd8:	114b      	asrs	r3, r1, #5
 800cdda:	429e      	cmp	r6, r3
 800cddc:	f100 0414 	add.w	r4, r0, #20
 800cde0:	dd30      	ble.n	800ce44 <rshift+0x70>
 800cde2:	f011 011f 	ands.w	r1, r1, #31
 800cde6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800cdea:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800cdee:	d108      	bne.n	800ce02 <rshift+0x2e>
 800cdf0:	4621      	mov	r1, r4
 800cdf2:	42b2      	cmp	r2, r6
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	d211      	bcs.n	800ce1c <rshift+0x48>
 800cdf8:	f852 3b04 	ldr.w	r3, [r2], #4
 800cdfc:	f841 3b04 	str.w	r3, [r1], #4
 800ce00:	e7f7      	b.n	800cdf2 <rshift+0x1e>
 800ce02:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ce06:	f1c1 0c20 	rsb	ip, r1, #32
 800ce0a:	40cd      	lsrs	r5, r1
 800ce0c:	3204      	adds	r2, #4
 800ce0e:	4623      	mov	r3, r4
 800ce10:	42b2      	cmp	r2, r6
 800ce12:	4617      	mov	r7, r2
 800ce14:	d30c      	bcc.n	800ce30 <rshift+0x5c>
 800ce16:	601d      	str	r5, [r3, #0]
 800ce18:	b105      	cbz	r5, 800ce1c <rshift+0x48>
 800ce1a:	3304      	adds	r3, #4
 800ce1c:	1b1a      	subs	r2, r3, r4
 800ce1e:	42a3      	cmp	r3, r4
 800ce20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ce24:	bf08      	it	eq
 800ce26:	2300      	moveq	r3, #0
 800ce28:	6102      	str	r2, [r0, #16]
 800ce2a:	bf08      	it	eq
 800ce2c:	6143      	streq	r3, [r0, #20]
 800ce2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce30:	683f      	ldr	r7, [r7, #0]
 800ce32:	fa07 f70c 	lsl.w	r7, r7, ip
 800ce36:	433d      	orrs	r5, r7
 800ce38:	f843 5b04 	str.w	r5, [r3], #4
 800ce3c:	f852 5b04 	ldr.w	r5, [r2], #4
 800ce40:	40cd      	lsrs	r5, r1
 800ce42:	e7e5      	b.n	800ce10 <rshift+0x3c>
 800ce44:	4623      	mov	r3, r4
 800ce46:	e7e9      	b.n	800ce1c <rshift+0x48>

0800ce48 <__hexdig_fun>:
 800ce48:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ce4c:	2b09      	cmp	r3, #9
 800ce4e:	d802      	bhi.n	800ce56 <__hexdig_fun+0xe>
 800ce50:	3820      	subs	r0, #32
 800ce52:	b2c0      	uxtb	r0, r0
 800ce54:	4770      	bx	lr
 800ce56:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ce5a:	2b05      	cmp	r3, #5
 800ce5c:	d801      	bhi.n	800ce62 <__hexdig_fun+0x1a>
 800ce5e:	3847      	subs	r0, #71	; 0x47
 800ce60:	e7f7      	b.n	800ce52 <__hexdig_fun+0xa>
 800ce62:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ce66:	2b05      	cmp	r3, #5
 800ce68:	d801      	bhi.n	800ce6e <__hexdig_fun+0x26>
 800ce6a:	3827      	subs	r0, #39	; 0x27
 800ce6c:	e7f1      	b.n	800ce52 <__hexdig_fun+0xa>
 800ce6e:	2000      	movs	r0, #0
 800ce70:	4770      	bx	lr

0800ce72 <__gethex>:
 800ce72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce76:	b08b      	sub	sp, #44	; 0x2c
 800ce78:	468a      	mov	sl, r1
 800ce7a:	9002      	str	r0, [sp, #8]
 800ce7c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ce7e:	9306      	str	r3, [sp, #24]
 800ce80:	4690      	mov	r8, r2
 800ce82:	f000 facd 	bl	800d420 <__localeconv_l>
 800ce86:	6803      	ldr	r3, [r0, #0]
 800ce88:	9303      	str	r3, [sp, #12]
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7f3 f9a8 	bl	80001e0 <strlen>
 800ce90:	9b03      	ldr	r3, [sp, #12]
 800ce92:	9001      	str	r0, [sp, #4]
 800ce94:	4403      	add	r3, r0
 800ce96:	f04f 0b00 	mov.w	fp, #0
 800ce9a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ce9e:	9307      	str	r3, [sp, #28]
 800cea0:	f8da 3000 	ldr.w	r3, [sl]
 800cea4:	3302      	adds	r3, #2
 800cea6:	461f      	mov	r7, r3
 800cea8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ceac:	2830      	cmp	r0, #48	; 0x30
 800ceae:	d06c      	beq.n	800cf8a <__gethex+0x118>
 800ceb0:	f7ff ffca 	bl	800ce48 <__hexdig_fun>
 800ceb4:	4604      	mov	r4, r0
 800ceb6:	2800      	cmp	r0, #0
 800ceb8:	d16a      	bne.n	800cf90 <__gethex+0x11e>
 800ceba:	9a01      	ldr	r2, [sp, #4]
 800cebc:	9903      	ldr	r1, [sp, #12]
 800cebe:	4638      	mov	r0, r7
 800cec0:	f001 fac5 	bl	800e44e <strncmp>
 800cec4:	2800      	cmp	r0, #0
 800cec6:	d166      	bne.n	800cf96 <__gethex+0x124>
 800cec8:	9b01      	ldr	r3, [sp, #4]
 800ceca:	5cf8      	ldrb	r0, [r7, r3]
 800cecc:	18fe      	adds	r6, r7, r3
 800cece:	f7ff ffbb 	bl	800ce48 <__hexdig_fun>
 800ced2:	2800      	cmp	r0, #0
 800ced4:	d062      	beq.n	800cf9c <__gethex+0x12a>
 800ced6:	4633      	mov	r3, r6
 800ced8:	7818      	ldrb	r0, [r3, #0]
 800ceda:	2830      	cmp	r0, #48	; 0x30
 800cedc:	461f      	mov	r7, r3
 800cede:	f103 0301 	add.w	r3, r3, #1
 800cee2:	d0f9      	beq.n	800ced8 <__gethex+0x66>
 800cee4:	f7ff ffb0 	bl	800ce48 <__hexdig_fun>
 800cee8:	fab0 f580 	clz	r5, r0
 800ceec:	096d      	lsrs	r5, r5, #5
 800ceee:	4634      	mov	r4, r6
 800cef0:	f04f 0b01 	mov.w	fp, #1
 800cef4:	463a      	mov	r2, r7
 800cef6:	4616      	mov	r6, r2
 800cef8:	3201      	adds	r2, #1
 800cefa:	7830      	ldrb	r0, [r6, #0]
 800cefc:	f7ff ffa4 	bl	800ce48 <__hexdig_fun>
 800cf00:	2800      	cmp	r0, #0
 800cf02:	d1f8      	bne.n	800cef6 <__gethex+0x84>
 800cf04:	9a01      	ldr	r2, [sp, #4]
 800cf06:	9903      	ldr	r1, [sp, #12]
 800cf08:	4630      	mov	r0, r6
 800cf0a:	f001 faa0 	bl	800e44e <strncmp>
 800cf0e:	b950      	cbnz	r0, 800cf26 <__gethex+0xb4>
 800cf10:	b954      	cbnz	r4, 800cf28 <__gethex+0xb6>
 800cf12:	9b01      	ldr	r3, [sp, #4]
 800cf14:	18f4      	adds	r4, r6, r3
 800cf16:	4622      	mov	r2, r4
 800cf18:	4616      	mov	r6, r2
 800cf1a:	3201      	adds	r2, #1
 800cf1c:	7830      	ldrb	r0, [r6, #0]
 800cf1e:	f7ff ff93 	bl	800ce48 <__hexdig_fun>
 800cf22:	2800      	cmp	r0, #0
 800cf24:	d1f8      	bne.n	800cf18 <__gethex+0xa6>
 800cf26:	b10c      	cbz	r4, 800cf2c <__gethex+0xba>
 800cf28:	1ba4      	subs	r4, r4, r6
 800cf2a:	00a4      	lsls	r4, r4, #2
 800cf2c:	7833      	ldrb	r3, [r6, #0]
 800cf2e:	2b50      	cmp	r3, #80	; 0x50
 800cf30:	d001      	beq.n	800cf36 <__gethex+0xc4>
 800cf32:	2b70      	cmp	r3, #112	; 0x70
 800cf34:	d140      	bne.n	800cfb8 <__gethex+0x146>
 800cf36:	7873      	ldrb	r3, [r6, #1]
 800cf38:	2b2b      	cmp	r3, #43	; 0x2b
 800cf3a:	d031      	beq.n	800cfa0 <__gethex+0x12e>
 800cf3c:	2b2d      	cmp	r3, #45	; 0x2d
 800cf3e:	d033      	beq.n	800cfa8 <__gethex+0x136>
 800cf40:	1c71      	adds	r1, r6, #1
 800cf42:	f04f 0900 	mov.w	r9, #0
 800cf46:	7808      	ldrb	r0, [r1, #0]
 800cf48:	f7ff ff7e 	bl	800ce48 <__hexdig_fun>
 800cf4c:	1e43      	subs	r3, r0, #1
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	2b18      	cmp	r3, #24
 800cf52:	d831      	bhi.n	800cfb8 <__gethex+0x146>
 800cf54:	f1a0 0210 	sub.w	r2, r0, #16
 800cf58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cf5c:	f7ff ff74 	bl	800ce48 <__hexdig_fun>
 800cf60:	1e43      	subs	r3, r0, #1
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	2b18      	cmp	r3, #24
 800cf66:	d922      	bls.n	800cfae <__gethex+0x13c>
 800cf68:	f1b9 0f00 	cmp.w	r9, #0
 800cf6c:	d000      	beq.n	800cf70 <__gethex+0xfe>
 800cf6e:	4252      	negs	r2, r2
 800cf70:	4414      	add	r4, r2
 800cf72:	f8ca 1000 	str.w	r1, [sl]
 800cf76:	b30d      	cbz	r5, 800cfbc <__gethex+0x14a>
 800cf78:	f1bb 0f00 	cmp.w	fp, #0
 800cf7c:	bf0c      	ite	eq
 800cf7e:	2706      	moveq	r7, #6
 800cf80:	2700      	movne	r7, #0
 800cf82:	4638      	mov	r0, r7
 800cf84:	b00b      	add	sp, #44	; 0x2c
 800cf86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf8a:	f10b 0b01 	add.w	fp, fp, #1
 800cf8e:	e78a      	b.n	800cea6 <__gethex+0x34>
 800cf90:	2500      	movs	r5, #0
 800cf92:	462c      	mov	r4, r5
 800cf94:	e7ae      	b.n	800cef4 <__gethex+0x82>
 800cf96:	463e      	mov	r6, r7
 800cf98:	2501      	movs	r5, #1
 800cf9a:	e7c7      	b.n	800cf2c <__gethex+0xba>
 800cf9c:	4604      	mov	r4, r0
 800cf9e:	e7fb      	b.n	800cf98 <__gethex+0x126>
 800cfa0:	f04f 0900 	mov.w	r9, #0
 800cfa4:	1cb1      	adds	r1, r6, #2
 800cfa6:	e7ce      	b.n	800cf46 <__gethex+0xd4>
 800cfa8:	f04f 0901 	mov.w	r9, #1
 800cfac:	e7fa      	b.n	800cfa4 <__gethex+0x132>
 800cfae:	230a      	movs	r3, #10
 800cfb0:	fb03 0202 	mla	r2, r3, r2, r0
 800cfb4:	3a10      	subs	r2, #16
 800cfb6:	e7cf      	b.n	800cf58 <__gethex+0xe6>
 800cfb8:	4631      	mov	r1, r6
 800cfba:	e7da      	b.n	800cf72 <__gethex+0x100>
 800cfbc:	1bf3      	subs	r3, r6, r7
 800cfbe:	3b01      	subs	r3, #1
 800cfc0:	4629      	mov	r1, r5
 800cfc2:	2b07      	cmp	r3, #7
 800cfc4:	dc49      	bgt.n	800d05a <__gethex+0x1e8>
 800cfc6:	9802      	ldr	r0, [sp, #8]
 800cfc8:	f000 faa6 	bl	800d518 <_Balloc>
 800cfcc:	9b01      	ldr	r3, [sp, #4]
 800cfce:	f100 0914 	add.w	r9, r0, #20
 800cfd2:	f04f 0b00 	mov.w	fp, #0
 800cfd6:	f1c3 0301 	rsb	r3, r3, #1
 800cfda:	4605      	mov	r5, r0
 800cfdc:	f8cd 9010 	str.w	r9, [sp, #16]
 800cfe0:	46da      	mov	sl, fp
 800cfe2:	9308      	str	r3, [sp, #32]
 800cfe4:	42b7      	cmp	r7, r6
 800cfe6:	d33b      	bcc.n	800d060 <__gethex+0x1ee>
 800cfe8:	9804      	ldr	r0, [sp, #16]
 800cfea:	f840 ab04 	str.w	sl, [r0], #4
 800cfee:	eba0 0009 	sub.w	r0, r0, r9
 800cff2:	1080      	asrs	r0, r0, #2
 800cff4:	6128      	str	r0, [r5, #16]
 800cff6:	0147      	lsls	r7, r0, #5
 800cff8:	4650      	mov	r0, sl
 800cffa:	f000 fb51 	bl	800d6a0 <__hi0bits>
 800cffe:	f8d8 6000 	ldr.w	r6, [r8]
 800d002:	1a3f      	subs	r7, r7, r0
 800d004:	42b7      	cmp	r7, r6
 800d006:	dd64      	ble.n	800d0d2 <__gethex+0x260>
 800d008:	1bbf      	subs	r7, r7, r6
 800d00a:	4639      	mov	r1, r7
 800d00c:	4628      	mov	r0, r5
 800d00e:	f000 fe61 	bl	800dcd4 <__any_on>
 800d012:	4682      	mov	sl, r0
 800d014:	b178      	cbz	r0, 800d036 <__gethex+0x1c4>
 800d016:	1e7b      	subs	r3, r7, #1
 800d018:	1159      	asrs	r1, r3, #5
 800d01a:	f003 021f 	and.w	r2, r3, #31
 800d01e:	f04f 0a01 	mov.w	sl, #1
 800d022:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d026:	fa0a f202 	lsl.w	r2, sl, r2
 800d02a:	420a      	tst	r2, r1
 800d02c:	d003      	beq.n	800d036 <__gethex+0x1c4>
 800d02e:	4553      	cmp	r3, sl
 800d030:	dc46      	bgt.n	800d0c0 <__gethex+0x24e>
 800d032:	f04f 0a02 	mov.w	sl, #2
 800d036:	4639      	mov	r1, r7
 800d038:	4628      	mov	r0, r5
 800d03a:	f7ff fecb 	bl	800cdd4 <rshift>
 800d03e:	443c      	add	r4, r7
 800d040:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d044:	42a3      	cmp	r3, r4
 800d046:	da52      	bge.n	800d0ee <__gethex+0x27c>
 800d048:	4629      	mov	r1, r5
 800d04a:	9802      	ldr	r0, [sp, #8]
 800d04c:	f000 fa98 	bl	800d580 <_Bfree>
 800d050:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d052:	2300      	movs	r3, #0
 800d054:	6013      	str	r3, [r2, #0]
 800d056:	27a3      	movs	r7, #163	; 0xa3
 800d058:	e793      	b.n	800cf82 <__gethex+0x110>
 800d05a:	3101      	adds	r1, #1
 800d05c:	105b      	asrs	r3, r3, #1
 800d05e:	e7b0      	b.n	800cfc2 <__gethex+0x150>
 800d060:	1e73      	subs	r3, r6, #1
 800d062:	9305      	str	r3, [sp, #20]
 800d064:	9a07      	ldr	r2, [sp, #28]
 800d066:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d018      	beq.n	800d0a0 <__gethex+0x22e>
 800d06e:	f1bb 0f20 	cmp.w	fp, #32
 800d072:	d107      	bne.n	800d084 <__gethex+0x212>
 800d074:	9b04      	ldr	r3, [sp, #16]
 800d076:	f8c3 a000 	str.w	sl, [r3]
 800d07a:	3304      	adds	r3, #4
 800d07c:	f04f 0a00 	mov.w	sl, #0
 800d080:	9304      	str	r3, [sp, #16]
 800d082:	46d3      	mov	fp, sl
 800d084:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d088:	f7ff fede 	bl	800ce48 <__hexdig_fun>
 800d08c:	f000 000f 	and.w	r0, r0, #15
 800d090:	fa00 f00b 	lsl.w	r0, r0, fp
 800d094:	ea4a 0a00 	orr.w	sl, sl, r0
 800d098:	f10b 0b04 	add.w	fp, fp, #4
 800d09c:	9b05      	ldr	r3, [sp, #20]
 800d09e:	e00d      	b.n	800d0bc <__gethex+0x24a>
 800d0a0:	9b05      	ldr	r3, [sp, #20]
 800d0a2:	9a08      	ldr	r2, [sp, #32]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	42bb      	cmp	r3, r7
 800d0a8:	d3e1      	bcc.n	800d06e <__gethex+0x1fc>
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	9a01      	ldr	r2, [sp, #4]
 800d0ae:	9903      	ldr	r1, [sp, #12]
 800d0b0:	9309      	str	r3, [sp, #36]	; 0x24
 800d0b2:	f001 f9cc 	bl	800e44e <strncmp>
 800d0b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	d1d8      	bne.n	800d06e <__gethex+0x1fc>
 800d0bc:	461e      	mov	r6, r3
 800d0be:	e791      	b.n	800cfe4 <__gethex+0x172>
 800d0c0:	1eb9      	subs	r1, r7, #2
 800d0c2:	4628      	mov	r0, r5
 800d0c4:	f000 fe06 	bl	800dcd4 <__any_on>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	d0b2      	beq.n	800d032 <__gethex+0x1c0>
 800d0cc:	f04f 0a03 	mov.w	sl, #3
 800d0d0:	e7b1      	b.n	800d036 <__gethex+0x1c4>
 800d0d2:	da09      	bge.n	800d0e8 <__gethex+0x276>
 800d0d4:	1bf7      	subs	r7, r6, r7
 800d0d6:	4629      	mov	r1, r5
 800d0d8:	463a      	mov	r2, r7
 800d0da:	9802      	ldr	r0, [sp, #8]
 800d0dc:	f000 fc1c 	bl	800d918 <__lshift>
 800d0e0:	1be4      	subs	r4, r4, r7
 800d0e2:	4605      	mov	r5, r0
 800d0e4:	f100 0914 	add.w	r9, r0, #20
 800d0e8:	f04f 0a00 	mov.w	sl, #0
 800d0ec:	e7a8      	b.n	800d040 <__gethex+0x1ce>
 800d0ee:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d0f2:	42a0      	cmp	r0, r4
 800d0f4:	dd6a      	ble.n	800d1cc <__gethex+0x35a>
 800d0f6:	1b04      	subs	r4, r0, r4
 800d0f8:	42a6      	cmp	r6, r4
 800d0fa:	dc2e      	bgt.n	800d15a <__gethex+0x2e8>
 800d0fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d100:	2b02      	cmp	r3, #2
 800d102:	d022      	beq.n	800d14a <__gethex+0x2d8>
 800d104:	2b03      	cmp	r3, #3
 800d106:	d024      	beq.n	800d152 <__gethex+0x2e0>
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d115      	bne.n	800d138 <__gethex+0x2c6>
 800d10c:	42a6      	cmp	r6, r4
 800d10e:	d113      	bne.n	800d138 <__gethex+0x2c6>
 800d110:	2e01      	cmp	r6, #1
 800d112:	dc0b      	bgt.n	800d12c <__gethex+0x2ba>
 800d114:	9a06      	ldr	r2, [sp, #24]
 800d116:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d11a:	6013      	str	r3, [r2, #0]
 800d11c:	2301      	movs	r3, #1
 800d11e:	612b      	str	r3, [r5, #16]
 800d120:	f8c9 3000 	str.w	r3, [r9]
 800d124:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d126:	2762      	movs	r7, #98	; 0x62
 800d128:	601d      	str	r5, [r3, #0]
 800d12a:	e72a      	b.n	800cf82 <__gethex+0x110>
 800d12c:	1e71      	subs	r1, r6, #1
 800d12e:	4628      	mov	r0, r5
 800d130:	f000 fdd0 	bl	800dcd4 <__any_on>
 800d134:	2800      	cmp	r0, #0
 800d136:	d1ed      	bne.n	800d114 <__gethex+0x2a2>
 800d138:	4629      	mov	r1, r5
 800d13a:	9802      	ldr	r0, [sp, #8]
 800d13c:	f000 fa20 	bl	800d580 <_Bfree>
 800d140:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d142:	2300      	movs	r3, #0
 800d144:	6013      	str	r3, [r2, #0]
 800d146:	2750      	movs	r7, #80	; 0x50
 800d148:	e71b      	b.n	800cf82 <__gethex+0x110>
 800d14a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d0e1      	beq.n	800d114 <__gethex+0x2a2>
 800d150:	e7f2      	b.n	800d138 <__gethex+0x2c6>
 800d152:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d154:	2b00      	cmp	r3, #0
 800d156:	d1dd      	bne.n	800d114 <__gethex+0x2a2>
 800d158:	e7ee      	b.n	800d138 <__gethex+0x2c6>
 800d15a:	1e67      	subs	r7, r4, #1
 800d15c:	f1ba 0f00 	cmp.w	sl, #0
 800d160:	d131      	bne.n	800d1c6 <__gethex+0x354>
 800d162:	b127      	cbz	r7, 800d16e <__gethex+0x2fc>
 800d164:	4639      	mov	r1, r7
 800d166:	4628      	mov	r0, r5
 800d168:	f000 fdb4 	bl	800dcd4 <__any_on>
 800d16c:	4682      	mov	sl, r0
 800d16e:	117a      	asrs	r2, r7, #5
 800d170:	2301      	movs	r3, #1
 800d172:	f007 071f 	and.w	r7, r7, #31
 800d176:	fa03 f707 	lsl.w	r7, r3, r7
 800d17a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800d17e:	4621      	mov	r1, r4
 800d180:	421f      	tst	r7, r3
 800d182:	4628      	mov	r0, r5
 800d184:	bf18      	it	ne
 800d186:	f04a 0a02 	orrne.w	sl, sl, #2
 800d18a:	1b36      	subs	r6, r6, r4
 800d18c:	f7ff fe22 	bl	800cdd4 <rshift>
 800d190:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800d194:	2702      	movs	r7, #2
 800d196:	f1ba 0f00 	cmp.w	sl, #0
 800d19a:	d048      	beq.n	800d22e <__gethex+0x3bc>
 800d19c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d1a0:	2b02      	cmp	r3, #2
 800d1a2:	d015      	beq.n	800d1d0 <__gethex+0x35e>
 800d1a4:	2b03      	cmp	r3, #3
 800d1a6:	d017      	beq.n	800d1d8 <__gethex+0x366>
 800d1a8:	2b01      	cmp	r3, #1
 800d1aa:	d109      	bne.n	800d1c0 <__gethex+0x34e>
 800d1ac:	f01a 0f02 	tst.w	sl, #2
 800d1b0:	d006      	beq.n	800d1c0 <__gethex+0x34e>
 800d1b2:	f8d9 3000 	ldr.w	r3, [r9]
 800d1b6:	ea4a 0a03 	orr.w	sl, sl, r3
 800d1ba:	f01a 0f01 	tst.w	sl, #1
 800d1be:	d10e      	bne.n	800d1de <__gethex+0x36c>
 800d1c0:	f047 0710 	orr.w	r7, r7, #16
 800d1c4:	e033      	b.n	800d22e <__gethex+0x3bc>
 800d1c6:	f04f 0a01 	mov.w	sl, #1
 800d1ca:	e7d0      	b.n	800d16e <__gethex+0x2fc>
 800d1cc:	2701      	movs	r7, #1
 800d1ce:	e7e2      	b.n	800d196 <__gethex+0x324>
 800d1d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1d2:	f1c3 0301 	rsb	r3, r3, #1
 800d1d6:	9315      	str	r3, [sp, #84]	; 0x54
 800d1d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d0f0      	beq.n	800d1c0 <__gethex+0x34e>
 800d1de:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800d1e2:	f105 0314 	add.w	r3, r5, #20
 800d1e6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800d1ea:	eb03 010a 	add.w	r1, r3, sl
 800d1ee:	f04f 0c00 	mov.w	ip, #0
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1f8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800d1fc:	d01c      	beq.n	800d238 <__gethex+0x3c6>
 800d1fe:	3201      	adds	r2, #1
 800d200:	6002      	str	r2, [r0, #0]
 800d202:	2f02      	cmp	r7, #2
 800d204:	f105 0314 	add.w	r3, r5, #20
 800d208:	d138      	bne.n	800d27c <__gethex+0x40a>
 800d20a:	f8d8 2000 	ldr.w	r2, [r8]
 800d20e:	3a01      	subs	r2, #1
 800d210:	42b2      	cmp	r2, r6
 800d212:	d10a      	bne.n	800d22a <__gethex+0x3b8>
 800d214:	1171      	asrs	r1, r6, #5
 800d216:	2201      	movs	r2, #1
 800d218:	f006 061f 	and.w	r6, r6, #31
 800d21c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d220:	fa02 f606 	lsl.w	r6, r2, r6
 800d224:	421e      	tst	r6, r3
 800d226:	bf18      	it	ne
 800d228:	4617      	movne	r7, r2
 800d22a:	f047 0720 	orr.w	r7, r7, #32
 800d22e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d230:	601d      	str	r5, [r3, #0]
 800d232:	9b06      	ldr	r3, [sp, #24]
 800d234:	601c      	str	r4, [r3, #0]
 800d236:	e6a4      	b.n	800cf82 <__gethex+0x110>
 800d238:	4299      	cmp	r1, r3
 800d23a:	f843 cc04 	str.w	ip, [r3, #-4]
 800d23e:	d8d8      	bhi.n	800d1f2 <__gethex+0x380>
 800d240:	68ab      	ldr	r3, [r5, #8]
 800d242:	4599      	cmp	r9, r3
 800d244:	db12      	blt.n	800d26c <__gethex+0x3fa>
 800d246:	6869      	ldr	r1, [r5, #4]
 800d248:	9802      	ldr	r0, [sp, #8]
 800d24a:	3101      	adds	r1, #1
 800d24c:	f000 f964 	bl	800d518 <_Balloc>
 800d250:	692a      	ldr	r2, [r5, #16]
 800d252:	3202      	adds	r2, #2
 800d254:	f105 010c 	add.w	r1, r5, #12
 800d258:	4683      	mov	fp, r0
 800d25a:	0092      	lsls	r2, r2, #2
 800d25c:	300c      	adds	r0, #12
 800d25e:	f7fc ff8c 	bl	800a17a <memcpy>
 800d262:	4629      	mov	r1, r5
 800d264:	9802      	ldr	r0, [sp, #8]
 800d266:	f000 f98b 	bl	800d580 <_Bfree>
 800d26a:	465d      	mov	r5, fp
 800d26c:	692b      	ldr	r3, [r5, #16]
 800d26e:	1c5a      	adds	r2, r3, #1
 800d270:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d274:	612a      	str	r2, [r5, #16]
 800d276:	2201      	movs	r2, #1
 800d278:	615a      	str	r2, [r3, #20]
 800d27a:	e7c2      	b.n	800d202 <__gethex+0x390>
 800d27c:	692a      	ldr	r2, [r5, #16]
 800d27e:	454a      	cmp	r2, r9
 800d280:	dd0b      	ble.n	800d29a <__gethex+0x428>
 800d282:	2101      	movs	r1, #1
 800d284:	4628      	mov	r0, r5
 800d286:	f7ff fda5 	bl	800cdd4 <rshift>
 800d28a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d28e:	3401      	adds	r4, #1
 800d290:	42a3      	cmp	r3, r4
 800d292:	f6ff aed9 	blt.w	800d048 <__gethex+0x1d6>
 800d296:	2701      	movs	r7, #1
 800d298:	e7c7      	b.n	800d22a <__gethex+0x3b8>
 800d29a:	f016 061f 	ands.w	r6, r6, #31
 800d29e:	d0fa      	beq.n	800d296 <__gethex+0x424>
 800d2a0:	449a      	add	sl, r3
 800d2a2:	f1c6 0620 	rsb	r6, r6, #32
 800d2a6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d2aa:	f000 f9f9 	bl	800d6a0 <__hi0bits>
 800d2ae:	42b0      	cmp	r0, r6
 800d2b0:	dbe7      	blt.n	800d282 <__gethex+0x410>
 800d2b2:	e7f0      	b.n	800d296 <__gethex+0x424>

0800d2b4 <L_shift>:
 800d2b4:	f1c2 0208 	rsb	r2, r2, #8
 800d2b8:	0092      	lsls	r2, r2, #2
 800d2ba:	b570      	push	{r4, r5, r6, lr}
 800d2bc:	f1c2 0620 	rsb	r6, r2, #32
 800d2c0:	6843      	ldr	r3, [r0, #4]
 800d2c2:	6804      	ldr	r4, [r0, #0]
 800d2c4:	fa03 f506 	lsl.w	r5, r3, r6
 800d2c8:	432c      	orrs	r4, r5
 800d2ca:	40d3      	lsrs	r3, r2
 800d2cc:	6004      	str	r4, [r0, #0]
 800d2ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800d2d2:	4288      	cmp	r0, r1
 800d2d4:	d3f4      	bcc.n	800d2c0 <L_shift+0xc>
 800d2d6:	bd70      	pop	{r4, r5, r6, pc}

0800d2d8 <__match>:
 800d2d8:	b530      	push	{r4, r5, lr}
 800d2da:	6803      	ldr	r3, [r0, #0]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2e2:	b914      	cbnz	r4, 800d2ea <__match+0x12>
 800d2e4:	6003      	str	r3, [r0, #0]
 800d2e6:	2001      	movs	r0, #1
 800d2e8:	bd30      	pop	{r4, r5, pc}
 800d2ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d2f2:	2d19      	cmp	r5, #25
 800d2f4:	bf98      	it	ls
 800d2f6:	3220      	addls	r2, #32
 800d2f8:	42a2      	cmp	r2, r4
 800d2fa:	d0f0      	beq.n	800d2de <__match+0x6>
 800d2fc:	2000      	movs	r0, #0
 800d2fe:	e7f3      	b.n	800d2e8 <__match+0x10>

0800d300 <__hexnan>:
 800d300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d304:	680b      	ldr	r3, [r1, #0]
 800d306:	6801      	ldr	r1, [r0, #0]
 800d308:	115f      	asrs	r7, r3, #5
 800d30a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800d30e:	f013 031f 	ands.w	r3, r3, #31
 800d312:	b087      	sub	sp, #28
 800d314:	bf18      	it	ne
 800d316:	3704      	addne	r7, #4
 800d318:	2500      	movs	r5, #0
 800d31a:	1f3e      	subs	r6, r7, #4
 800d31c:	4682      	mov	sl, r0
 800d31e:	4690      	mov	r8, r2
 800d320:	9301      	str	r3, [sp, #4]
 800d322:	f847 5c04 	str.w	r5, [r7, #-4]
 800d326:	46b1      	mov	r9, r6
 800d328:	4634      	mov	r4, r6
 800d32a:	9502      	str	r5, [sp, #8]
 800d32c:	46ab      	mov	fp, r5
 800d32e:	784a      	ldrb	r2, [r1, #1]
 800d330:	1c4b      	adds	r3, r1, #1
 800d332:	9303      	str	r3, [sp, #12]
 800d334:	b342      	cbz	r2, 800d388 <__hexnan+0x88>
 800d336:	4610      	mov	r0, r2
 800d338:	9105      	str	r1, [sp, #20]
 800d33a:	9204      	str	r2, [sp, #16]
 800d33c:	f7ff fd84 	bl	800ce48 <__hexdig_fun>
 800d340:	2800      	cmp	r0, #0
 800d342:	d143      	bne.n	800d3cc <__hexnan+0xcc>
 800d344:	9a04      	ldr	r2, [sp, #16]
 800d346:	9905      	ldr	r1, [sp, #20]
 800d348:	2a20      	cmp	r2, #32
 800d34a:	d818      	bhi.n	800d37e <__hexnan+0x7e>
 800d34c:	9b02      	ldr	r3, [sp, #8]
 800d34e:	459b      	cmp	fp, r3
 800d350:	dd13      	ble.n	800d37a <__hexnan+0x7a>
 800d352:	454c      	cmp	r4, r9
 800d354:	d206      	bcs.n	800d364 <__hexnan+0x64>
 800d356:	2d07      	cmp	r5, #7
 800d358:	dc04      	bgt.n	800d364 <__hexnan+0x64>
 800d35a:	462a      	mov	r2, r5
 800d35c:	4649      	mov	r1, r9
 800d35e:	4620      	mov	r0, r4
 800d360:	f7ff ffa8 	bl	800d2b4 <L_shift>
 800d364:	4544      	cmp	r4, r8
 800d366:	d944      	bls.n	800d3f2 <__hexnan+0xf2>
 800d368:	2300      	movs	r3, #0
 800d36a:	f1a4 0904 	sub.w	r9, r4, #4
 800d36e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d372:	f8cd b008 	str.w	fp, [sp, #8]
 800d376:	464c      	mov	r4, r9
 800d378:	461d      	mov	r5, r3
 800d37a:	9903      	ldr	r1, [sp, #12]
 800d37c:	e7d7      	b.n	800d32e <__hexnan+0x2e>
 800d37e:	2a29      	cmp	r2, #41	; 0x29
 800d380:	d14a      	bne.n	800d418 <__hexnan+0x118>
 800d382:	3102      	adds	r1, #2
 800d384:	f8ca 1000 	str.w	r1, [sl]
 800d388:	f1bb 0f00 	cmp.w	fp, #0
 800d38c:	d044      	beq.n	800d418 <__hexnan+0x118>
 800d38e:	454c      	cmp	r4, r9
 800d390:	d206      	bcs.n	800d3a0 <__hexnan+0xa0>
 800d392:	2d07      	cmp	r5, #7
 800d394:	dc04      	bgt.n	800d3a0 <__hexnan+0xa0>
 800d396:	462a      	mov	r2, r5
 800d398:	4649      	mov	r1, r9
 800d39a:	4620      	mov	r0, r4
 800d39c:	f7ff ff8a 	bl	800d2b4 <L_shift>
 800d3a0:	4544      	cmp	r4, r8
 800d3a2:	d928      	bls.n	800d3f6 <__hexnan+0xf6>
 800d3a4:	4643      	mov	r3, r8
 800d3a6:	f854 2b04 	ldr.w	r2, [r4], #4
 800d3aa:	f843 2b04 	str.w	r2, [r3], #4
 800d3ae:	42a6      	cmp	r6, r4
 800d3b0:	d2f9      	bcs.n	800d3a6 <__hexnan+0xa6>
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	f843 2b04 	str.w	r2, [r3], #4
 800d3b8:	429e      	cmp	r6, r3
 800d3ba:	d2fb      	bcs.n	800d3b4 <__hexnan+0xb4>
 800d3bc:	6833      	ldr	r3, [r6, #0]
 800d3be:	b91b      	cbnz	r3, 800d3c8 <__hexnan+0xc8>
 800d3c0:	4546      	cmp	r6, r8
 800d3c2:	d127      	bne.n	800d414 <__hexnan+0x114>
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	6033      	str	r3, [r6, #0]
 800d3c8:	2005      	movs	r0, #5
 800d3ca:	e026      	b.n	800d41a <__hexnan+0x11a>
 800d3cc:	3501      	adds	r5, #1
 800d3ce:	2d08      	cmp	r5, #8
 800d3d0:	f10b 0b01 	add.w	fp, fp, #1
 800d3d4:	dd06      	ble.n	800d3e4 <__hexnan+0xe4>
 800d3d6:	4544      	cmp	r4, r8
 800d3d8:	d9cf      	bls.n	800d37a <__hexnan+0x7a>
 800d3da:	2300      	movs	r3, #0
 800d3dc:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3e0:	2501      	movs	r5, #1
 800d3e2:	3c04      	subs	r4, #4
 800d3e4:	6822      	ldr	r2, [r4, #0]
 800d3e6:	f000 000f 	and.w	r0, r0, #15
 800d3ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d3ee:	6020      	str	r0, [r4, #0]
 800d3f0:	e7c3      	b.n	800d37a <__hexnan+0x7a>
 800d3f2:	2508      	movs	r5, #8
 800d3f4:	e7c1      	b.n	800d37a <__hexnan+0x7a>
 800d3f6:	9b01      	ldr	r3, [sp, #4]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d0df      	beq.n	800d3bc <__hexnan+0xbc>
 800d3fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d400:	f1c3 0320 	rsb	r3, r3, #32
 800d404:	fa22 f303 	lsr.w	r3, r2, r3
 800d408:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800d40c:	401a      	ands	r2, r3
 800d40e:	f847 2c04 	str.w	r2, [r7, #-4]
 800d412:	e7d3      	b.n	800d3bc <__hexnan+0xbc>
 800d414:	3e04      	subs	r6, #4
 800d416:	e7d1      	b.n	800d3bc <__hexnan+0xbc>
 800d418:	2004      	movs	r0, #4
 800d41a:	b007      	add	sp, #28
 800d41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d420 <__localeconv_l>:
 800d420:	30f0      	adds	r0, #240	; 0xf0
 800d422:	4770      	bx	lr

0800d424 <_localeconv_r>:
 800d424:	4b04      	ldr	r3, [pc, #16]	; (800d438 <_localeconv_r+0x14>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	6a18      	ldr	r0, [r3, #32]
 800d42a:	4b04      	ldr	r3, [pc, #16]	; (800d43c <_localeconv_r+0x18>)
 800d42c:	2800      	cmp	r0, #0
 800d42e:	bf08      	it	eq
 800d430:	4618      	moveq	r0, r3
 800d432:	30f0      	adds	r0, #240	; 0xf0
 800d434:	4770      	bx	lr
 800d436:	bf00      	nop
 800d438:	20000088 	.word	0x20000088
 800d43c:	200000ec 	.word	0x200000ec

0800d440 <__swhatbuf_r>:
 800d440:	b570      	push	{r4, r5, r6, lr}
 800d442:	460e      	mov	r6, r1
 800d444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d448:	2900      	cmp	r1, #0
 800d44a:	b096      	sub	sp, #88	; 0x58
 800d44c:	4614      	mov	r4, r2
 800d44e:	461d      	mov	r5, r3
 800d450:	da07      	bge.n	800d462 <__swhatbuf_r+0x22>
 800d452:	2300      	movs	r3, #0
 800d454:	602b      	str	r3, [r5, #0]
 800d456:	89b3      	ldrh	r3, [r6, #12]
 800d458:	061a      	lsls	r2, r3, #24
 800d45a:	d410      	bmi.n	800d47e <__swhatbuf_r+0x3e>
 800d45c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d460:	e00e      	b.n	800d480 <__swhatbuf_r+0x40>
 800d462:	466a      	mov	r2, sp
 800d464:	f001 f828 	bl	800e4b8 <_fstat_r>
 800d468:	2800      	cmp	r0, #0
 800d46a:	dbf2      	blt.n	800d452 <__swhatbuf_r+0x12>
 800d46c:	9a01      	ldr	r2, [sp, #4]
 800d46e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d472:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d476:	425a      	negs	r2, r3
 800d478:	415a      	adcs	r2, r3
 800d47a:	602a      	str	r2, [r5, #0]
 800d47c:	e7ee      	b.n	800d45c <__swhatbuf_r+0x1c>
 800d47e:	2340      	movs	r3, #64	; 0x40
 800d480:	2000      	movs	r0, #0
 800d482:	6023      	str	r3, [r4, #0]
 800d484:	b016      	add	sp, #88	; 0x58
 800d486:	bd70      	pop	{r4, r5, r6, pc}

0800d488 <__smakebuf_r>:
 800d488:	898b      	ldrh	r3, [r1, #12]
 800d48a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d48c:	079d      	lsls	r5, r3, #30
 800d48e:	4606      	mov	r6, r0
 800d490:	460c      	mov	r4, r1
 800d492:	d507      	bpl.n	800d4a4 <__smakebuf_r+0x1c>
 800d494:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d498:	6023      	str	r3, [r4, #0]
 800d49a:	6123      	str	r3, [r4, #16]
 800d49c:	2301      	movs	r3, #1
 800d49e:	6163      	str	r3, [r4, #20]
 800d4a0:	b002      	add	sp, #8
 800d4a2:	bd70      	pop	{r4, r5, r6, pc}
 800d4a4:	ab01      	add	r3, sp, #4
 800d4a6:	466a      	mov	r2, sp
 800d4a8:	f7ff ffca 	bl	800d440 <__swhatbuf_r>
 800d4ac:	9900      	ldr	r1, [sp, #0]
 800d4ae:	4605      	mov	r5, r0
 800d4b0:	4630      	mov	r0, r6
 800d4b2:	f000 fc8d 	bl	800ddd0 <_malloc_r>
 800d4b6:	b948      	cbnz	r0, 800d4cc <__smakebuf_r+0x44>
 800d4b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4bc:	059a      	lsls	r2, r3, #22
 800d4be:	d4ef      	bmi.n	800d4a0 <__smakebuf_r+0x18>
 800d4c0:	f023 0303 	bic.w	r3, r3, #3
 800d4c4:	f043 0302 	orr.w	r3, r3, #2
 800d4c8:	81a3      	strh	r3, [r4, #12]
 800d4ca:	e7e3      	b.n	800d494 <__smakebuf_r+0xc>
 800d4cc:	4b0d      	ldr	r3, [pc, #52]	; (800d504 <__smakebuf_r+0x7c>)
 800d4ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800d4d0:	89a3      	ldrh	r3, [r4, #12]
 800d4d2:	6020      	str	r0, [r4, #0]
 800d4d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4d8:	81a3      	strh	r3, [r4, #12]
 800d4da:	9b00      	ldr	r3, [sp, #0]
 800d4dc:	6163      	str	r3, [r4, #20]
 800d4de:	9b01      	ldr	r3, [sp, #4]
 800d4e0:	6120      	str	r0, [r4, #16]
 800d4e2:	b15b      	cbz	r3, 800d4fc <__smakebuf_r+0x74>
 800d4e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4e8:	4630      	mov	r0, r6
 800d4ea:	f000 fff7 	bl	800e4dc <_isatty_r>
 800d4ee:	b128      	cbz	r0, 800d4fc <__smakebuf_r+0x74>
 800d4f0:	89a3      	ldrh	r3, [r4, #12]
 800d4f2:	f023 0303 	bic.w	r3, r3, #3
 800d4f6:	f043 0301 	orr.w	r3, r3, #1
 800d4fa:	81a3      	strh	r3, [r4, #12]
 800d4fc:	89a3      	ldrh	r3, [r4, #12]
 800d4fe:	431d      	orrs	r5, r3
 800d500:	81a5      	strh	r5, [r4, #12]
 800d502:	e7cd      	b.n	800d4a0 <__smakebuf_r+0x18>
 800d504:	0800cc89 	.word	0x0800cc89

0800d508 <malloc>:
 800d508:	4b02      	ldr	r3, [pc, #8]	; (800d514 <malloc+0xc>)
 800d50a:	4601      	mov	r1, r0
 800d50c:	6818      	ldr	r0, [r3, #0]
 800d50e:	f000 bc5f 	b.w	800ddd0 <_malloc_r>
 800d512:	bf00      	nop
 800d514:	20000088 	.word	0x20000088

0800d518 <_Balloc>:
 800d518:	b570      	push	{r4, r5, r6, lr}
 800d51a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d51c:	4604      	mov	r4, r0
 800d51e:	460e      	mov	r6, r1
 800d520:	b93d      	cbnz	r5, 800d532 <_Balloc+0x1a>
 800d522:	2010      	movs	r0, #16
 800d524:	f7ff fff0 	bl	800d508 <malloc>
 800d528:	6260      	str	r0, [r4, #36]	; 0x24
 800d52a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d52e:	6005      	str	r5, [r0, #0]
 800d530:	60c5      	str	r5, [r0, #12]
 800d532:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d534:	68eb      	ldr	r3, [r5, #12]
 800d536:	b183      	cbz	r3, 800d55a <_Balloc+0x42>
 800d538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d53a:	68db      	ldr	r3, [r3, #12]
 800d53c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d540:	b9b8      	cbnz	r0, 800d572 <_Balloc+0x5a>
 800d542:	2101      	movs	r1, #1
 800d544:	fa01 f506 	lsl.w	r5, r1, r6
 800d548:	1d6a      	adds	r2, r5, #5
 800d54a:	0092      	lsls	r2, r2, #2
 800d54c:	4620      	mov	r0, r4
 800d54e:	f000 fbe2 	bl	800dd16 <_calloc_r>
 800d552:	b160      	cbz	r0, 800d56e <_Balloc+0x56>
 800d554:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d558:	e00e      	b.n	800d578 <_Balloc+0x60>
 800d55a:	2221      	movs	r2, #33	; 0x21
 800d55c:	2104      	movs	r1, #4
 800d55e:	4620      	mov	r0, r4
 800d560:	f000 fbd9 	bl	800dd16 <_calloc_r>
 800d564:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d566:	60e8      	str	r0, [r5, #12]
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d1e4      	bne.n	800d538 <_Balloc+0x20>
 800d56e:	2000      	movs	r0, #0
 800d570:	bd70      	pop	{r4, r5, r6, pc}
 800d572:	6802      	ldr	r2, [r0, #0]
 800d574:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d578:	2300      	movs	r3, #0
 800d57a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d57e:	e7f7      	b.n	800d570 <_Balloc+0x58>

0800d580 <_Bfree>:
 800d580:	b570      	push	{r4, r5, r6, lr}
 800d582:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d584:	4606      	mov	r6, r0
 800d586:	460d      	mov	r5, r1
 800d588:	b93c      	cbnz	r4, 800d59a <_Bfree+0x1a>
 800d58a:	2010      	movs	r0, #16
 800d58c:	f7ff ffbc 	bl	800d508 <malloc>
 800d590:	6270      	str	r0, [r6, #36]	; 0x24
 800d592:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d596:	6004      	str	r4, [r0, #0]
 800d598:	60c4      	str	r4, [r0, #12]
 800d59a:	b13d      	cbz	r5, 800d5ac <_Bfree+0x2c>
 800d59c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d59e:	686a      	ldr	r2, [r5, #4]
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d5a6:	6029      	str	r1, [r5, #0]
 800d5a8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d5ac:	bd70      	pop	{r4, r5, r6, pc}

0800d5ae <__multadd>:
 800d5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b2:	690d      	ldr	r5, [r1, #16]
 800d5b4:	461f      	mov	r7, r3
 800d5b6:	4606      	mov	r6, r0
 800d5b8:	460c      	mov	r4, r1
 800d5ba:	f101 0c14 	add.w	ip, r1, #20
 800d5be:	2300      	movs	r3, #0
 800d5c0:	f8dc 0000 	ldr.w	r0, [ip]
 800d5c4:	b281      	uxth	r1, r0
 800d5c6:	fb02 7101 	mla	r1, r2, r1, r7
 800d5ca:	0c0f      	lsrs	r7, r1, #16
 800d5cc:	0c00      	lsrs	r0, r0, #16
 800d5ce:	fb02 7000 	mla	r0, r2, r0, r7
 800d5d2:	b289      	uxth	r1, r1
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d5da:	429d      	cmp	r5, r3
 800d5dc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d5e0:	f84c 1b04 	str.w	r1, [ip], #4
 800d5e4:	dcec      	bgt.n	800d5c0 <__multadd+0x12>
 800d5e6:	b1d7      	cbz	r7, 800d61e <__multadd+0x70>
 800d5e8:	68a3      	ldr	r3, [r4, #8]
 800d5ea:	42ab      	cmp	r3, r5
 800d5ec:	dc12      	bgt.n	800d614 <__multadd+0x66>
 800d5ee:	6861      	ldr	r1, [r4, #4]
 800d5f0:	4630      	mov	r0, r6
 800d5f2:	3101      	adds	r1, #1
 800d5f4:	f7ff ff90 	bl	800d518 <_Balloc>
 800d5f8:	6922      	ldr	r2, [r4, #16]
 800d5fa:	3202      	adds	r2, #2
 800d5fc:	f104 010c 	add.w	r1, r4, #12
 800d600:	4680      	mov	r8, r0
 800d602:	0092      	lsls	r2, r2, #2
 800d604:	300c      	adds	r0, #12
 800d606:	f7fc fdb8 	bl	800a17a <memcpy>
 800d60a:	4621      	mov	r1, r4
 800d60c:	4630      	mov	r0, r6
 800d60e:	f7ff ffb7 	bl	800d580 <_Bfree>
 800d612:	4644      	mov	r4, r8
 800d614:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d618:	3501      	adds	r5, #1
 800d61a:	615f      	str	r7, [r3, #20]
 800d61c:	6125      	str	r5, [r4, #16]
 800d61e:	4620      	mov	r0, r4
 800d620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d624 <__s2b>:
 800d624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d628:	460c      	mov	r4, r1
 800d62a:	4615      	mov	r5, r2
 800d62c:	461f      	mov	r7, r3
 800d62e:	2209      	movs	r2, #9
 800d630:	3308      	adds	r3, #8
 800d632:	4606      	mov	r6, r0
 800d634:	fb93 f3f2 	sdiv	r3, r3, r2
 800d638:	2100      	movs	r1, #0
 800d63a:	2201      	movs	r2, #1
 800d63c:	429a      	cmp	r2, r3
 800d63e:	db20      	blt.n	800d682 <__s2b+0x5e>
 800d640:	4630      	mov	r0, r6
 800d642:	f7ff ff69 	bl	800d518 <_Balloc>
 800d646:	9b08      	ldr	r3, [sp, #32]
 800d648:	6143      	str	r3, [r0, #20]
 800d64a:	2d09      	cmp	r5, #9
 800d64c:	f04f 0301 	mov.w	r3, #1
 800d650:	6103      	str	r3, [r0, #16]
 800d652:	dd19      	ble.n	800d688 <__s2b+0x64>
 800d654:	f104 0809 	add.w	r8, r4, #9
 800d658:	46c1      	mov	r9, r8
 800d65a:	442c      	add	r4, r5
 800d65c:	f819 3b01 	ldrb.w	r3, [r9], #1
 800d660:	4601      	mov	r1, r0
 800d662:	3b30      	subs	r3, #48	; 0x30
 800d664:	220a      	movs	r2, #10
 800d666:	4630      	mov	r0, r6
 800d668:	f7ff ffa1 	bl	800d5ae <__multadd>
 800d66c:	45a1      	cmp	r9, r4
 800d66e:	d1f5      	bne.n	800d65c <__s2b+0x38>
 800d670:	eb08 0405 	add.w	r4, r8, r5
 800d674:	3c08      	subs	r4, #8
 800d676:	1b2d      	subs	r5, r5, r4
 800d678:	1963      	adds	r3, r4, r5
 800d67a:	42bb      	cmp	r3, r7
 800d67c:	db07      	blt.n	800d68e <__s2b+0x6a>
 800d67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d682:	0052      	lsls	r2, r2, #1
 800d684:	3101      	adds	r1, #1
 800d686:	e7d9      	b.n	800d63c <__s2b+0x18>
 800d688:	340a      	adds	r4, #10
 800d68a:	2509      	movs	r5, #9
 800d68c:	e7f3      	b.n	800d676 <__s2b+0x52>
 800d68e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d692:	4601      	mov	r1, r0
 800d694:	3b30      	subs	r3, #48	; 0x30
 800d696:	220a      	movs	r2, #10
 800d698:	4630      	mov	r0, r6
 800d69a:	f7ff ff88 	bl	800d5ae <__multadd>
 800d69e:	e7eb      	b.n	800d678 <__s2b+0x54>

0800d6a0 <__hi0bits>:
 800d6a0:	0c02      	lsrs	r2, r0, #16
 800d6a2:	0412      	lsls	r2, r2, #16
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	b9b2      	cbnz	r2, 800d6d6 <__hi0bits+0x36>
 800d6a8:	0403      	lsls	r3, r0, #16
 800d6aa:	2010      	movs	r0, #16
 800d6ac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d6b0:	bf04      	itt	eq
 800d6b2:	021b      	lsleq	r3, r3, #8
 800d6b4:	3008      	addeq	r0, #8
 800d6b6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d6ba:	bf04      	itt	eq
 800d6bc:	011b      	lsleq	r3, r3, #4
 800d6be:	3004      	addeq	r0, #4
 800d6c0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d6c4:	bf04      	itt	eq
 800d6c6:	009b      	lsleq	r3, r3, #2
 800d6c8:	3002      	addeq	r0, #2
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	db06      	blt.n	800d6dc <__hi0bits+0x3c>
 800d6ce:	005b      	lsls	r3, r3, #1
 800d6d0:	d503      	bpl.n	800d6da <__hi0bits+0x3a>
 800d6d2:	3001      	adds	r0, #1
 800d6d4:	4770      	bx	lr
 800d6d6:	2000      	movs	r0, #0
 800d6d8:	e7e8      	b.n	800d6ac <__hi0bits+0xc>
 800d6da:	2020      	movs	r0, #32
 800d6dc:	4770      	bx	lr

0800d6de <__lo0bits>:
 800d6de:	6803      	ldr	r3, [r0, #0]
 800d6e0:	f013 0207 	ands.w	r2, r3, #7
 800d6e4:	4601      	mov	r1, r0
 800d6e6:	d00b      	beq.n	800d700 <__lo0bits+0x22>
 800d6e8:	07da      	lsls	r2, r3, #31
 800d6ea:	d423      	bmi.n	800d734 <__lo0bits+0x56>
 800d6ec:	0798      	lsls	r0, r3, #30
 800d6ee:	bf49      	itett	mi
 800d6f0:	085b      	lsrmi	r3, r3, #1
 800d6f2:	089b      	lsrpl	r3, r3, #2
 800d6f4:	2001      	movmi	r0, #1
 800d6f6:	600b      	strmi	r3, [r1, #0]
 800d6f8:	bf5c      	itt	pl
 800d6fa:	600b      	strpl	r3, [r1, #0]
 800d6fc:	2002      	movpl	r0, #2
 800d6fe:	4770      	bx	lr
 800d700:	b298      	uxth	r0, r3
 800d702:	b9a8      	cbnz	r0, 800d730 <__lo0bits+0x52>
 800d704:	0c1b      	lsrs	r3, r3, #16
 800d706:	2010      	movs	r0, #16
 800d708:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d70c:	bf04      	itt	eq
 800d70e:	0a1b      	lsreq	r3, r3, #8
 800d710:	3008      	addeq	r0, #8
 800d712:	071a      	lsls	r2, r3, #28
 800d714:	bf04      	itt	eq
 800d716:	091b      	lsreq	r3, r3, #4
 800d718:	3004      	addeq	r0, #4
 800d71a:	079a      	lsls	r2, r3, #30
 800d71c:	bf04      	itt	eq
 800d71e:	089b      	lsreq	r3, r3, #2
 800d720:	3002      	addeq	r0, #2
 800d722:	07da      	lsls	r2, r3, #31
 800d724:	d402      	bmi.n	800d72c <__lo0bits+0x4e>
 800d726:	085b      	lsrs	r3, r3, #1
 800d728:	d006      	beq.n	800d738 <__lo0bits+0x5a>
 800d72a:	3001      	adds	r0, #1
 800d72c:	600b      	str	r3, [r1, #0]
 800d72e:	4770      	bx	lr
 800d730:	4610      	mov	r0, r2
 800d732:	e7e9      	b.n	800d708 <__lo0bits+0x2a>
 800d734:	2000      	movs	r0, #0
 800d736:	4770      	bx	lr
 800d738:	2020      	movs	r0, #32
 800d73a:	4770      	bx	lr

0800d73c <__i2b>:
 800d73c:	b510      	push	{r4, lr}
 800d73e:	460c      	mov	r4, r1
 800d740:	2101      	movs	r1, #1
 800d742:	f7ff fee9 	bl	800d518 <_Balloc>
 800d746:	2201      	movs	r2, #1
 800d748:	6144      	str	r4, [r0, #20]
 800d74a:	6102      	str	r2, [r0, #16]
 800d74c:	bd10      	pop	{r4, pc}

0800d74e <__multiply>:
 800d74e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d752:	4614      	mov	r4, r2
 800d754:	690a      	ldr	r2, [r1, #16]
 800d756:	6923      	ldr	r3, [r4, #16]
 800d758:	429a      	cmp	r2, r3
 800d75a:	bfb8      	it	lt
 800d75c:	460b      	movlt	r3, r1
 800d75e:	4688      	mov	r8, r1
 800d760:	bfbc      	itt	lt
 800d762:	46a0      	movlt	r8, r4
 800d764:	461c      	movlt	r4, r3
 800d766:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d76a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d76e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d772:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d776:	eb07 0609 	add.w	r6, r7, r9
 800d77a:	42b3      	cmp	r3, r6
 800d77c:	bfb8      	it	lt
 800d77e:	3101      	addlt	r1, #1
 800d780:	f7ff feca 	bl	800d518 <_Balloc>
 800d784:	f100 0514 	add.w	r5, r0, #20
 800d788:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d78c:	462b      	mov	r3, r5
 800d78e:	2200      	movs	r2, #0
 800d790:	4573      	cmp	r3, lr
 800d792:	d316      	bcc.n	800d7c2 <__multiply+0x74>
 800d794:	f104 0214 	add.w	r2, r4, #20
 800d798:	f108 0114 	add.w	r1, r8, #20
 800d79c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d7a0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d7a4:	9300      	str	r3, [sp, #0]
 800d7a6:	9b00      	ldr	r3, [sp, #0]
 800d7a8:	9201      	str	r2, [sp, #4]
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d80c      	bhi.n	800d7c8 <__multiply+0x7a>
 800d7ae:	2e00      	cmp	r6, #0
 800d7b0:	dd03      	ble.n	800d7ba <__multiply+0x6c>
 800d7b2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d05d      	beq.n	800d876 <__multiply+0x128>
 800d7ba:	6106      	str	r6, [r0, #16]
 800d7bc:	b003      	add	sp, #12
 800d7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7c2:	f843 2b04 	str.w	r2, [r3], #4
 800d7c6:	e7e3      	b.n	800d790 <__multiply+0x42>
 800d7c8:	f8b2 b000 	ldrh.w	fp, [r2]
 800d7cc:	f1bb 0f00 	cmp.w	fp, #0
 800d7d0:	d023      	beq.n	800d81a <__multiply+0xcc>
 800d7d2:	4689      	mov	r9, r1
 800d7d4:	46ac      	mov	ip, r5
 800d7d6:	f04f 0800 	mov.w	r8, #0
 800d7da:	f859 4b04 	ldr.w	r4, [r9], #4
 800d7de:	f8dc a000 	ldr.w	sl, [ip]
 800d7e2:	b2a3      	uxth	r3, r4
 800d7e4:	fa1f fa8a 	uxth.w	sl, sl
 800d7e8:	fb0b a303 	mla	r3, fp, r3, sl
 800d7ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d7f0:	f8dc 4000 	ldr.w	r4, [ip]
 800d7f4:	4443      	add	r3, r8
 800d7f6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d7fa:	fb0b 840a 	mla	r4, fp, sl, r8
 800d7fe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d802:	46e2      	mov	sl, ip
 800d804:	b29b      	uxth	r3, r3
 800d806:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d80a:	454f      	cmp	r7, r9
 800d80c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d810:	f84a 3b04 	str.w	r3, [sl], #4
 800d814:	d82b      	bhi.n	800d86e <__multiply+0x120>
 800d816:	f8cc 8004 	str.w	r8, [ip, #4]
 800d81a:	9b01      	ldr	r3, [sp, #4]
 800d81c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d820:	3204      	adds	r2, #4
 800d822:	f1ba 0f00 	cmp.w	sl, #0
 800d826:	d020      	beq.n	800d86a <__multiply+0x11c>
 800d828:	682b      	ldr	r3, [r5, #0]
 800d82a:	4689      	mov	r9, r1
 800d82c:	46a8      	mov	r8, r5
 800d82e:	f04f 0b00 	mov.w	fp, #0
 800d832:	f8b9 c000 	ldrh.w	ip, [r9]
 800d836:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d83a:	fb0a 440c 	mla	r4, sl, ip, r4
 800d83e:	445c      	add	r4, fp
 800d840:	46c4      	mov	ip, r8
 800d842:	b29b      	uxth	r3, r3
 800d844:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d848:	f84c 3b04 	str.w	r3, [ip], #4
 800d84c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d850:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d854:	0c1b      	lsrs	r3, r3, #16
 800d856:	fb0a b303 	mla	r3, sl, r3, fp
 800d85a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d85e:	454f      	cmp	r7, r9
 800d860:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d864:	d805      	bhi.n	800d872 <__multiply+0x124>
 800d866:	f8c8 3004 	str.w	r3, [r8, #4]
 800d86a:	3504      	adds	r5, #4
 800d86c:	e79b      	b.n	800d7a6 <__multiply+0x58>
 800d86e:	46d4      	mov	ip, sl
 800d870:	e7b3      	b.n	800d7da <__multiply+0x8c>
 800d872:	46e0      	mov	r8, ip
 800d874:	e7dd      	b.n	800d832 <__multiply+0xe4>
 800d876:	3e01      	subs	r6, #1
 800d878:	e799      	b.n	800d7ae <__multiply+0x60>
	...

0800d87c <__pow5mult>:
 800d87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d880:	4615      	mov	r5, r2
 800d882:	f012 0203 	ands.w	r2, r2, #3
 800d886:	4606      	mov	r6, r0
 800d888:	460f      	mov	r7, r1
 800d88a:	d007      	beq.n	800d89c <__pow5mult+0x20>
 800d88c:	3a01      	subs	r2, #1
 800d88e:	4c21      	ldr	r4, [pc, #132]	; (800d914 <__pow5mult+0x98>)
 800d890:	2300      	movs	r3, #0
 800d892:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d896:	f7ff fe8a 	bl	800d5ae <__multadd>
 800d89a:	4607      	mov	r7, r0
 800d89c:	10ad      	asrs	r5, r5, #2
 800d89e:	d035      	beq.n	800d90c <__pow5mult+0x90>
 800d8a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d8a2:	b93c      	cbnz	r4, 800d8b4 <__pow5mult+0x38>
 800d8a4:	2010      	movs	r0, #16
 800d8a6:	f7ff fe2f 	bl	800d508 <malloc>
 800d8aa:	6270      	str	r0, [r6, #36]	; 0x24
 800d8ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d8b0:	6004      	str	r4, [r0, #0]
 800d8b2:	60c4      	str	r4, [r0, #12]
 800d8b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d8b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d8bc:	b94c      	cbnz	r4, 800d8d2 <__pow5mult+0x56>
 800d8be:	f240 2171 	movw	r1, #625	; 0x271
 800d8c2:	4630      	mov	r0, r6
 800d8c4:	f7ff ff3a 	bl	800d73c <__i2b>
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	6003      	str	r3, [r0, #0]
 800d8d2:	f04f 0800 	mov.w	r8, #0
 800d8d6:	07eb      	lsls	r3, r5, #31
 800d8d8:	d50a      	bpl.n	800d8f0 <__pow5mult+0x74>
 800d8da:	4639      	mov	r1, r7
 800d8dc:	4622      	mov	r2, r4
 800d8de:	4630      	mov	r0, r6
 800d8e0:	f7ff ff35 	bl	800d74e <__multiply>
 800d8e4:	4639      	mov	r1, r7
 800d8e6:	4681      	mov	r9, r0
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	f7ff fe49 	bl	800d580 <_Bfree>
 800d8ee:	464f      	mov	r7, r9
 800d8f0:	106d      	asrs	r5, r5, #1
 800d8f2:	d00b      	beq.n	800d90c <__pow5mult+0x90>
 800d8f4:	6820      	ldr	r0, [r4, #0]
 800d8f6:	b938      	cbnz	r0, 800d908 <__pow5mult+0x8c>
 800d8f8:	4622      	mov	r2, r4
 800d8fa:	4621      	mov	r1, r4
 800d8fc:	4630      	mov	r0, r6
 800d8fe:	f7ff ff26 	bl	800d74e <__multiply>
 800d902:	6020      	str	r0, [r4, #0]
 800d904:	f8c0 8000 	str.w	r8, [r0]
 800d908:	4604      	mov	r4, r0
 800d90a:	e7e4      	b.n	800d8d6 <__pow5mult+0x5a>
 800d90c:	4638      	mov	r0, r7
 800d90e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d912:	bf00      	nop
 800d914:	0800ee78 	.word	0x0800ee78

0800d918 <__lshift>:
 800d918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d91c:	460c      	mov	r4, r1
 800d91e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d922:	6923      	ldr	r3, [r4, #16]
 800d924:	6849      	ldr	r1, [r1, #4]
 800d926:	eb0a 0903 	add.w	r9, sl, r3
 800d92a:	68a3      	ldr	r3, [r4, #8]
 800d92c:	4607      	mov	r7, r0
 800d92e:	4616      	mov	r6, r2
 800d930:	f109 0501 	add.w	r5, r9, #1
 800d934:	42ab      	cmp	r3, r5
 800d936:	db32      	blt.n	800d99e <__lshift+0x86>
 800d938:	4638      	mov	r0, r7
 800d93a:	f7ff fded 	bl	800d518 <_Balloc>
 800d93e:	2300      	movs	r3, #0
 800d940:	4680      	mov	r8, r0
 800d942:	f100 0114 	add.w	r1, r0, #20
 800d946:	461a      	mov	r2, r3
 800d948:	4553      	cmp	r3, sl
 800d94a:	db2b      	blt.n	800d9a4 <__lshift+0x8c>
 800d94c:	6920      	ldr	r0, [r4, #16]
 800d94e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d952:	f104 0314 	add.w	r3, r4, #20
 800d956:	f016 021f 	ands.w	r2, r6, #31
 800d95a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d95e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d962:	d025      	beq.n	800d9b0 <__lshift+0x98>
 800d964:	f1c2 0e20 	rsb	lr, r2, #32
 800d968:	2000      	movs	r0, #0
 800d96a:	681e      	ldr	r6, [r3, #0]
 800d96c:	468a      	mov	sl, r1
 800d96e:	4096      	lsls	r6, r2
 800d970:	4330      	orrs	r0, r6
 800d972:	f84a 0b04 	str.w	r0, [sl], #4
 800d976:	f853 0b04 	ldr.w	r0, [r3], #4
 800d97a:	459c      	cmp	ip, r3
 800d97c:	fa20 f00e 	lsr.w	r0, r0, lr
 800d980:	d814      	bhi.n	800d9ac <__lshift+0x94>
 800d982:	6048      	str	r0, [r1, #4]
 800d984:	b108      	cbz	r0, 800d98a <__lshift+0x72>
 800d986:	f109 0502 	add.w	r5, r9, #2
 800d98a:	3d01      	subs	r5, #1
 800d98c:	4638      	mov	r0, r7
 800d98e:	f8c8 5010 	str.w	r5, [r8, #16]
 800d992:	4621      	mov	r1, r4
 800d994:	f7ff fdf4 	bl	800d580 <_Bfree>
 800d998:	4640      	mov	r0, r8
 800d99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d99e:	3101      	adds	r1, #1
 800d9a0:	005b      	lsls	r3, r3, #1
 800d9a2:	e7c7      	b.n	800d934 <__lshift+0x1c>
 800d9a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d9a8:	3301      	adds	r3, #1
 800d9aa:	e7cd      	b.n	800d948 <__lshift+0x30>
 800d9ac:	4651      	mov	r1, sl
 800d9ae:	e7dc      	b.n	800d96a <__lshift+0x52>
 800d9b0:	3904      	subs	r1, #4
 800d9b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9b6:	f841 2f04 	str.w	r2, [r1, #4]!
 800d9ba:	459c      	cmp	ip, r3
 800d9bc:	d8f9      	bhi.n	800d9b2 <__lshift+0x9a>
 800d9be:	e7e4      	b.n	800d98a <__lshift+0x72>

0800d9c0 <__mcmp>:
 800d9c0:	6903      	ldr	r3, [r0, #16]
 800d9c2:	690a      	ldr	r2, [r1, #16]
 800d9c4:	1a9b      	subs	r3, r3, r2
 800d9c6:	b530      	push	{r4, r5, lr}
 800d9c8:	d10c      	bne.n	800d9e4 <__mcmp+0x24>
 800d9ca:	0092      	lsls	r2, r2, #2
 800d9cc:	3014      	adds	r0, #20
 800d9ce:	3114      	adds	r1, #20
 800d9d0:	1884      	adds	r4, r0, r2
 800d9d2:	4411      	add	r1, r2
 800d9d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d9d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d9dc:	4295      	cmp	r5, r2
 800d9de:	d003      	beq.n	800d9e8 <__mcmp+0x28>
 800d9e0:	d305      	bcc.n	800d9ee <__mcmp+0x2e>
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	bd30      	pop	{r4, r5, pc}
 800d9e8:	42a0      	cmp	r0, r4
 800d9ea:	d3f3      	bcc.n	800d9d4 <__mcmp+0x14>
 800d9ec:	e7fa      	b.n	800d9e4 <__mcmp+0x24>
 800d9ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9f2:	e7f7      	b.n	800d9e4 <__mcmp+0x24>

0800d9f4 <__mdiff>:
 800d9f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9f8:	460d      	mov	r5, r1
 800d9fa:	4607      	mov	r7, r0
 800d9fc:	4611      	mov	r1, r2
 800d9fe:	4628      	mov	r0, r5
 800da00:	4614      	mov	r4, r2
 800da02:	f7ff ffdd 	bl	800d9c0 <__mcmp>
 800da06:	1e06      	subs	r6, r0, #0
 800da08:	d108      	bne.n	800da1c <__mdiff+0x28>
 800da0a:	4631      	mov	r1, r6
 800da0c:	4638      	mov	r0, r7
 800da0e:	f7ff fd83 	bl	800d518 <_Balloc>
 800da12:	2301      	movs	r3, #1
 800da14:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800da18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da1c:	bfa4      	itt	ge
 800da1e:	4623      	movge	r3, r4
 800da20:	462c      	movge	r4, r5
 800da22:	4638      	mov	r0, r7
 800da24:	6861      	ldr	r1, [r4, #4]
 800da26:	bfa6      	itte	ge
 800da28:	461d      	movge	r5, r3
 800da2a:	2600      	movge	r6, #0
 800da2c:	2601      	movlt	r6, #1
 800da2e:	f7ff fd73 	bl	800d518 <_Balloc>
 800da32:	692b      	ldr	r3, [r5, #16]
 800da34:	60c6      	str	r6, [r0, #12]
 800da36:	6926      	ldr	r6, [r4, #16]
 800da38:	f105 0914 	add.w	r9, r5, #20
 800da3c:	f104 0214 	add.w	r2, r4, #20
 800da40:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800da44:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800da48:	f100 0514 	add.w	r5, r0, #20
 800da4c:	f04f 0e00 	mov.w	lr, #0
 800da50:	f852 ab04 	ldr.w	sl, [r2], #4
 800da54:	f859 4b04 	ldr.w	r4, [r9], #4
 800da58:	fa1e f18a 	uxtah	r1, lr, sl
 800da5c:	b2a3      	uxth	r3, r4
 800da5e:	1ac9      	subs	r1, r1, r3
 800da60:	0c23      	lsrs	r3, r4, #16
 800da62:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800da66:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800da6a:	b289      	uxth	r1, r1
 800da6c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800da70:	45c8      	cmp	r8, r9
 800da72:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800da76:	4694      	mov	ip, r2
 800da78:	f845 3b04 	str.w	r3, [r5], #4
 800da7c:	d8e8      	bhi.n	800da50 <__mdiff+0x5c>
 800da7e:	45bc      	cmp	ip, r7
 800da80:	d304      	bcc.n	800da8c <__mdiff+0x98>
 800da82:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800da86:	b183      	cbz	r3, 800daaa <__mdiff+0xb6>
 800da88:	6106      	str	r6, [r0, #16]
 800da8a:	e7c5      	b.n	800da18 <__mdiff+0x24>
 800da8c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800da90:	fa1e f381 	uxtah	r3, lr, r1
 800da94:	141a      	asrs	r2, r3, #16
 800da96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800daa0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800daa4:	f845 3b04 	str.w	r3, [r5], #4
 800daa8:	e7e9      	b.n	800da7e <__mdiff+0x8a>
 800daaa:	3e01      	subs	r6, #1
 800daac:	e7e9      	b.n	800da82 <__mdiff+0x8e>
	...

0800dab0 <__ulp>:
 800dab0:	4b12      	ldr	r3, [pc, #72]	; (800dafc <__ulp+0x4c>)
 800dab2:	ee10 2a90 	vmov	r2, s1
 800dab6:	401a      	ands	r2, r3
 800dab8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	dd04      	ble.n	800daca <__ulp+0x1a>
 800dac0:	2000      	movs	r0, #0
 800dac2:	4619      	mov	r1, r3
 800dac4:	ec41 0b10 	vmov	d0, r0, r1
 800dac8:	4770      	bx	lr
 800daca:	425b      	negs	r3, r3
 800dacc:	151b      	asrs	r3, r3, #20
 800dace:	2b13      	cmp	r3, #19
 800dad0:	f04f 0000 	mov.w	r0, #0
 800dad4:	f04f 0100 	mov.w	r1, #0
 800dad8:	dc04      	bgt.n	800dae4 <__ulp+0x34>
 800dada:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800dade:	fa42 f103 	asr.w	r1, r2, r3
 800dae2:	e7ef      	b.n	800dac4 <__ulp+0x14>
 800dae4:	3b14      	subs	r3, #20
 800dae6:	2b1e      	cmp	r3, #30
 800dae8:	f04f 0201 	mov.w	r2, #1
 800daec:	bfda      	itte	le
 800daee:	f1c3 031f 	rsble	r3, r3, #31
 800daf2:	fa02 f303 	lslle.w	r3, r2, r3
 800daf6:	4613      	movgt	r3, r2
 800daf8:	4618      	mov	r0, r3
 800dafa:	e7e3      	b.n	800dac4 <__ulp+0x14>
 800dafc:	7ff00000 	.word	0x7ff00000

0800db00 <__b2d>:
 800db00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db02:	6905      	ldr	r5, [r0, #16]
 800db04:	f100 0714 	add.w	r7, r0, #20
 800db08:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800db0c:	1f2e      	subs	r6, r5, #4
 800db0e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800db12:	4620      	mov	r0, r4
 800db14:	f7ff fdc4 	bl	800d6a0 <__hi0bits>
 800db18:	f1c0 0320 	rsb	r3, r0, #32
 800db1c:	280a      	cmp	r0, #10
 800db1e:	600b      	str	r3, [r1, #0]
 800db20:	f8df c074 	ldr.w	ip, [pc, #116]	; 800db98 <__b2d+0x98>
 800db24:	dc14      	bgt.n	800db50 <__b2d+0x50>
 800db26:	f1c0 0e0b 	rsb	lr, r0, #11
 800db2a:	fa24 f10e 	lsr.w	r1, r4, lr
 800db2e:	42b7      	cmp	r7, r6
 800db30:	ea41 030c 	orr.w	r3, r1, ip
 800db34:	bf34      	ite	cc
 800db36:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800db3a:	2100      	movcs	r1, #0
 800db3c:	3015      	adds	r0, #21
 800db3e:	fa04 f000 	lsl.w	r0, r4, r0
 800db42:	fa21 f10e 	lsr.w	r1, r1, lr
 800db46:	ea40 0201 	orr.w	r2, r0, r1
 800db4a:	ec43 2b10 	vmov	d0, r2, r3
 800db4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db50:	42b7      	cmp	r7, r6
 800db52:	bf3a      	itte	cc
 800db54:	f1a5 0608 	subcc.w	r6, r5, #8
 800db58:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800db5c:	2100      	movcs	r1, #0
 800db5e:	380b      	subs	r0, #11
 800db60:	d015      	beq.n	800db8e <__b2d+0x8e>
 800db62:	4084      	lsls	r4, r0
 800db64:	f1c0 0520 	rsb	r5, r0, #32
 800db68:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800db6c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800db70:	42be      	cmp	r6, r7
 800db72:	fa21 fc05 	lsr.w	ip, r1, r5
 800db76:	ea44 030c 	orr.w	r3, r4, ip
 800db7a:	bf8c      	ite	hi
 800db7c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800db80:	2400      	movls	r4, #0
 800db82:	fa01 f000 	lsl.w	r0, r1, r0
 800db86:	40ec      	lsrs	r4, r5
 800db88:	ea40 0204 	orr.w	r2, r0, r4
 800db8c:	e7dd      	b.n	800db4a <__b2d+0x4a>
 800db8e:	ea44 030c 	orr.w	r3, r4, ip
 800db92:	460a      	mov	r2, r1
 800db94:	e7d9      	b.n	800db4a <__b2d+0x4a>
 800db96:	bf00      	nop
 800db98:	3ff00000 	.word	0x3ff00000

0800db9c <__d2b>:
 800db9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dba0:	460e      	mov	r6, r1
 800dba2:	2101      	movs	r1, #1
 800dba4:	ec59 8b10 	vmov	r8, r9, d0
 800dba8:	4615      	mov	r5, r2
 800dbaa:	f7ff fcb5 	bl	800d518 <_Balloc>
 800dbae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800dbb2:	4607      	mov	r7, r0
 800dbb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dbb8:	bb34      	cbnz	r4, 800dc08 <__d2b+0x6c>
 800dbba:	9301      	str	r3, [sp, #4]
 800dbbc:	f1b8 0300 	subs.w	r3, r8, #0
 800dbc0:	d027      	beq.n	800dc12 <__d2b+0x76>
 800dbc2:	a802      	add	r0, sp, #8
 800dbc4:	f840 3d08 	str.w	r3, [r0, #-8]!
 800dbc8:	f7ff fd89 	bl	800d6de <__lo0bits>
 800dbcc:	9900      	ldr	r1, [sp, #0]
 800dbce:	b1f0      	cbz	r0, 800dc0e <__d2b+0x72>
 800dbd0:	9a01      	ldr	r2, [sp, #4]
 800dbd2:	f1c0 0320 	rsb	r3, r0, #32
 800dbd6:	fa02 f303 	lsl.w	r3, r2, r3
 800dbda:	430b      	orrs	r3, r1
 800dbdc:	40c2      	lsrs	r2, r0
 800dbde:	617b      	str	r3, [r7, #20]
 800dbe0:	9201      	str	r2, [sp, #4]
 800dbe2:	9b01      	ldr	r3, [sp, #4]
 800dbe4:	61bb      	str	r3, [r7, #24]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	bf14      	ite	ne
 800dbea:	2102      	movne	r1, #2
 800dbec:	2101      	moveq	r1, #1
 800dbee:	6139      	str	r1, [r7, #16]
 800dbf0:	b1c4      	cbz	r4, 800dc24 <__d2b+0x88>
 800dbf2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800dbf6:	4404      	add	r4, r0
 800dbf8:	6034      	str	r4, [r6, #0]
 800dbfa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dbfe:	6028      	str	r0, [r5, #0]
 800dc00:	4638      	mov	r0, r7
 800dc02:	b003      	add	sp, #12
 800dc04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc0c:	e7d5      	b.n	800dbba <__d2b+0x1e>
 800dc0e:	6179      	str	r1, [r7, #20]
 800dc10:	e7e7      	b.n	800dbe2 <__d2b+0x46>
 800dc12:	a801      	add	r0, sp, #4
 800dc14:	f7ff fd63 	bl	800d6de <__lo0bits>
 800dc18:	9b01      	ldr	r3, [sp, #4]
 800dc1a:	617b      	str	r3, [r7, #20]
 800dc1c:	2101      	movs	r1, #1
 800dc1e:	6139      	str	r1, [r7, #16]
 800dc20:	3020      	adds	r0, #32
 800dc22:	e7e5      	b.n	800dbf0 <__d2b+0x54>
 800dc24:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800dc28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dc2c:	6030      	str	r0, [r6, #0]
 800dc2e:	6918      	ldr	r0, [r3, #16]
 800dc30:	f7ff fd36 	bl	800d6a0 <__hi0bits>
 800dc34:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800dc38:	e7e1      	b.n	800dbfe <__d2b+0x62>

0800dc3a <__ratio>:
 800dc3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc3e:	4688      	mov	r8, r1
 800dc40:	4669      	mov	r1, sp
 800dc42:	4681      	mov	r9, r0
 800dc44:	f7ff ff5c 	bl	800db00 <__b2d>
 800dc48:	a901      	add	r1, sp, #4
 800dc4a:	4640      	mov	r0, r8
 800dc4c:	ec57 6b10 	vmov	r6, r7, d0
 800dc50:	f7ff ff56 	bl	800db00 <__b2d>
 800dc54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc58:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dc5c:	eba3 0c02 	sub.w	ip, r3, r2
 800dc60:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dc64:	1a9b      	subs	r3, r3, r2
 800dc66:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dc6a:	ec5b ab10 	vmov	sl, fp, d0
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	bfce      	itee	gt
 800dc72:	463a      	movgt	r2, r7
 800dc74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dc78:	465a      	movle	r2, fp
 800dc7a:	4659      	mov	r1, fp
 800dc7c:	463d      	mov	r5, r7
 800dc7e:	bfd4      	ite	le
 800dc80:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800dc84:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800dc88:	4630      	mov	r0, r6
 800dc8a:	ee10 2a10 	vmov	r2, s0
 800dc8e:	460b      	mov	r3, r1
 800dc90:	4629      	mov	r1, r5
 800dc92:	f7f2 fde3 	bl	800085c <__aeabi_ddiv>
 800dc96:	ec41 0b10 	vmov	d0, r0, r1
 800dc9a:	b003      	add	sp, #12
 800dc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dca0 <__copybits>:
 800dca0:	3901      	subs	r1, #1
 800dca2:	b510      	push	{r4, lr}
 800dca4:	1149      	asrs	r1, r1, #5
 800dca6:	6914      	ldr	r4, [r2, #16]
 800dca8:	3101      	adds	r1, #1
 800dcaa:	f102 0314 	add.w	r3, r2, #20
 800dcae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dcb2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dcb6:	42a3      	cmp	r3, r4
 800dcb8:	4602      	mov	r2, r0
 800dcba:	d303      	bcc.n	800dcc4 <__copybits+0x24>
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	428a      	cmp	r2, r1
 800dcc0:	d305      	bcc.n	800dcce <__copybits+0x2e>
 800dcc2:	bd10      	pop	{r4, pc}
 800dcc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcc8:	f840 2b04 	str.w	r2, [r0], #4
 800dccc:	e7f3      	b.n	800dcb6 <__copybits+0x16>
 800dcce:	f842 3b04 	str.w	r3, [r2], #4
 800dcd2:	e7f4      	b.n	800dcbe <__copybits+0x1e>

0800dcd4 <__any_on>:
 800dcd4:	f100 0214 	add.w	r2, r0, #20
 800dcd8:	6900      	ldr	r0, [r0, #16]
 800dcda:	114b      	asrs	r3, r1, #5
 800dcdc:	4298      	cmp	r0, r3
 800dcde:	b510      	push	{r4, lr}
 800dce0:	db11      	blt.n	800dd06 <__any_on+0x32>
 800dce2:	dd0a      	ble.n	800dcfa <__any_on+0x26>
 800dce4:	f011 011f 	ands.w	r1, r1, #31
 800dce8:	d007      	beq.n	800dcfa <__any_on+0x26>
 800dcea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dcee:	fa24 f001 	lsr.w	r0, r4, r1
 800dcf2:	fa00 f101 	lsl.w	r1, r0, r1
 800dcf6:	428c      	cmp	r4, r1
 800dcf8:	d10b      	bne.n	800dd12 <__any_on+0x3e>
 800dcfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d803      	bhi.n	800dd0a <__any_on+0x36>
 800dd02:	2000      	movs	r0, #0
 800dd04:	bd10      	pop	{r4, pc}
 800dd06:	4603      	mov	r3, r0
 800dd08:	e7f7      	b.n	800dcfa <__any_on+0x26>
 800dd0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dd0e:	2900      	cmp	r1, #0
 800dd10:	d0f5      	beq.n	800dcfe <__any_on+0x2a>
 800dd12:	2001      	movs	r0, #1
 800dd14:	e7f6      	b.n	800dd04 <__any_on+0x30>

0800dd16 <_calloc_r>:
 800dd16:	b538      	push	{r3, r4, r5, lr}
 800dd18:	fb02 f401 	mul.w	r4, r2, r1
 800dd1c:	4621      	mov	r1, r4
 800dd1e:	f000 f857 	bl	800ddd0 <_malloc_r>
 800dd22:	4605      	mov	r5, r0
 800dd24:	b118      	cbz	r0, 800dd2e <_calloc_r+0x18>
 800dd26:	4622      	mov	r2, r4
 800dd28:	2100      	movs	r1, #0
 800dd2a:	f7fc fa31 	bl	800a190 <memset>
 800dd2e:	4628      	mov	r0, r5
 800dd30:	bd38      	pop	{r3, r4, r5, pc}
	...

0800dd34 <_free_r>:
 800dd34:	b538      	push	{r3, r4, r5, lr}
 800dd36:	4605      	mov	r5, r0
 800dd38:	2900      	cmp	r1, #0
 800dd3a:	d045      	beq.n	800ddc8 <_free_r+0x94>
 800dd3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd40:	1f0c      	subs	r4, r1, #4
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	bfb8      	it	lt
 800dd46:	18e4      	addlt	r4, r4, r3
 800dd48:	f000 fc03 	bl	800e552 <__malloc_lock>
 800dd4c:	4a1f      	ldr	r2, [pc, #124]	; (800ddcc <_free_r+0x98>)
 800dd4e:	6813      	ldr	r3, [r2, #0]
 800dd50:	4610      	mov	r0, r2
 800dd52:	b933      	cbnz	r3, 800dd62 <_free_r+0x2e>
 800dd54:	6063      	str	r3, [r4, #4]
 800dd56:	6014      	str	r4, [r2, #0]
 800dd58:	4628      	mov	r0, r5
 800dd5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd5e:	f000 bbf9 	b.w	800e554 <__malloc_unlock>
 800dd62:	42a3      	cmp	r3, r4
 800dd64:	d90c      	bls.n	800dd80 <_free_r+0x4c>
 800dd66:	6821      	ldr	r1, [r4, #0]
 800dd68:	1862      	adds	r2, r4, r1
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	bf04      	itt	eq
 800dd6e:	681a      	ldreq	r2, [r3, #0]
 800dd70:	685b      	ldreq	r3, [r3, #4]
 800dd72:	6063      	str	r3, [r4, #4]
 800dd74:	bf04      	itt	eq
 800dd76:	1852      	addeq	r2, r2, r1
 800dd78:	6022      	streq	r2, [r4, #0]
 800dd7a:	6004      	str	r4, [r0, #0]
 800dd7c:	e7ec      	b.n	800dd58 <_free_r+0x24>
 800dd7e:	4613      	mov	r3, r2
 800dd80:	685a      	ldr	r2, [r3, #4]
 800dd82:	b10a      	cbz	r2, 800dd88 <_free_r+0x54>
 800dd84:	42a2      	cmp	r2, r4
 800dd86:	d9fa      	bls.n	800dd7e <_free_r+0x4a>
 800dd88:	6819      	ldr	r1, [r3, #0]
 800dd8a:	1858      	adds	r0, r3, r1
 800dd8c:	42a0      	cmp	r0, r4
 800dd8e:	d10b      	bne.n	800dda8 <_free_r+0x74>
 800dd90:	6820      	ldr	r0, [r4, #0]
 800dd92:	4401      	add	r1, r0
 800dd94:	1858      	adds	r0, r3, r1
 800dd96:	4282      	cmp	r2, r0
 800dd98:	6019      	str	r1, [r3, #0]
 800dd9a:	d1dd      	bne.n	800dd58 <_free_r+0x24>
 800dd9c:	6810      	ldr	r0, [r2, #0]
 800dd9e:	6852      	ldr	r2, [r2, #4]
 800dda0:	605a      	str	r2, [r3, #4]
 800dda2:	4401      	add	r1, r0
 800dda4:	6019      	str	r1, [r3, #0]
 800dda6:	e7d7      	b.n	800dd58 <_free_r+0x24>
 800dda8:	d902      	bls.n	800ddb0 <_free_r+0x7c>
 800ddaa:	230c      	movs	r3, #12
 800ddac:	602b      	str	r3, [r5, #0]
 800ddae:	e7d3      	b.n	800dd58 <_free_r+0x24>
 800ddb0:	6820      	ldr	r0, [r4, #0]
 800ddb2:	1821      	adds	r1, r4, r0
 800ddb4:	428a      	cmp	r2, r1
 800ddb6:	bf04      	itt	eq
 800ddb8:	6811      	ldreq	r1, [r2, #0]
 800ddba:	6852      	ldreq	r2, [r2, #4]
 800ddbc:	6062      	str	r2, [r4, #4]
 800ddbe:	bf04      	itt	eq
 800ddc0:	1809      	addeq	r1, r1, r0
 800ddc2:	6021      	streq	r1, [r4, #0]
 800ddc4:	605c      	str	r4, [r3, #4]
 800ddc6:	e7c7      	b.n	800dd58 <_free_r+0x24>
 800ddc8:	bd38      	pop	{r3, r4, r5, pc}
 800ddca:	bf00      	nop
 800ddcc:	2000434c 	.word	0x2000434c

0800ddd0 <_malloc_r>:
 800ddd0:	b570      	push	{r4, r5, r6, lr}
 800ddd2:	1ccd      	adds	r5, r1, #3
 800ddd4:	f025 0503 	bic.w	r5, r5, #3
 800ddd8:	3508      	adds	r5, #8
 800ddda:	2d0c      	cmp	r5, #12
 800dddc:	bf38      	it	cc
 800ddde:	250c      	movcc	r5, #12
 800dde0:	2d00      	cmp	r5, #0
 800dde2:	4606      	mov	r6, r0
 800dde4:	db01      	blt.n	800ddea <_malloc_r+0x1a>
 800dde6:	42a9      	cmp	r1, r5
 800dde8:	d903      	bls.n	800ddf2 <_malloc_r+0x22>
 800ddea:	230c      	movs	r3, #12
 800ddec:	6033      	str	r3, [r6, #0]
 800ddee:	2000      	movs	r0, #0
 800ddf0:	bd70      	pop	{r4, r5, r6, pc}
 800ddf2:	f000 fbae 	bl	800e552 <__malloc_lock>
 800ddf6:	4a21      	ldr	r2, [pc, #132]	; (800de7c <_malloc_r+0xac>)
 800ddf8:	6814      	ldr	r4, [r2, #0]
 800ddfa:	4621      	mov	r1, r4
 800ddfc:	b991      	cbnz	r1, 800de24 <_malloc_r+0x54>
 800ddfe:	4c20      	ldr	r4, [pc, #128]	; (800de80 <_malloc_r+0xb0>)
 800de00:	6823      	ldr	r3, [r4, #0]
 800de02:	b91b      	cbnz	r3, 800de0c <_malloc_r+0x3c>
 800de04:	4630      	mov	r0, r6
 800de06:	f000 facf 	bl	800e3a8 <_sbrk_r>
 800de0a:	6020      	str	r0, [r4, #0]
 800de0c:	4629      	mov	r1, r5
 800de0e:	4630      	mov	r0, r6
 800de10:	f000 faca 	bl	800e3a8 <_sbrk_r>
 800de14:	1c43      	adds	r3, r0, #1
 800de16:	d124      	bne.n	800de62 <_malloc_r+0x92>
 800de18:	230c      	movs	r3, #12
 800de1a:	6033      	str	r3, [r6, #0]
 800de1c:	4630      	mov	r0, r6
 800de1e:	f000 fb99 	bl	800e554 <__malloc_unlock>
 800de22:	e7e4      	b.n	800ddee <_malloc_r+0x1e>
 800de24:	680b      	ldr	r3, [r1, #0]
 800de26:	1b5b      	subs	r3, r3, r5
 800de28:	d418      	bmi.n	800de5c <_malloc_r+0x8c>
 800de2a:	2b0b      	cmp	r3, #11
 800de2c:	d90f      	bls.n	800de4e <_malloc_r+0x7e>
 800de2e:	600b      	str	r3, [r1, #0]
 800de30:	50cd      	str	r5, [r1, r3]
 800de32:	18cc      	adds	r4, r1, r3
 800de34:	4630      	mov	r0, r6
 800de36:	f000 fb8d 	bl	800e554 <__malloc_unlock>
 800de3a:	f104 000b 	add.w	r0, r4, #11
 800de3e:	1d23      	adds	r3, r4, #4
 800de40:	f020 0007 	bic.w	r0, r0, #7
 800de44:	1ac3      	subs	r3, r0, r3
 800de46:	d0d3      	beq.n	800ddf0 <_malloc_r+0x20>
 800de48:	425a      	negs	r2, r3
 800de4a:	50e2      	str	r2, [r4, r3]
 800de4c:	e7d0      	b.n	800ddf0 <_malloc_r+0x20>
 800de4e:	428c      	cmp	r4, r1
 800de50:	684b      	ldr	r3, [r1, #4]
 800de52:	bf16      	itet	ne
 800de54:	6063      	strne	r3, [r4, #4]
 800de56:	6013      	streq	r3, [r2, #0]
 800de58:	460c      	movne	r4, r1
 800de5a:	e7eb      	b.n	800de34 <_malloc_r+0x64>
 800de5c:	460c      	mov	r4, r1
 800de5e:	6849      	ldr	r1, [r1, #4]
 800de60:	e7cc      	b.n	800ddfc <_malloc_r+0x2c>
 800de62:	1cc4      	adds	r4, r0, #3
 800de64:	f024 0403 	bic.w	r4, r4, #3
 800de68:	42a0      	cmp	r0, r4
 800de6a:	d005      	beq.n	800de78 <_malloc_r+0xa8>
 800de6c:	1a21      	subs	r1, r4, r0
 800de6e:	4630      	mov	r0, r6
 800de70:	f000 fa9a 	bl	800e3a8 <_sbrk_r>
 800de74:	3001      	adds	r0, #1
 800de76:	d0cf      	beq.n	800de18 <_malloc_r+0x48>
 800de78:	6025      	str	r5, [r4, #0]
 800de7a:	e7db      	b.n	800de34 <_malloc_r+0x64>
 800de7c:	2000434c 	.word	0x2000434c
 800de80:	20004350 	.word	0x20004350

0800de84 <__ssputs_r>:
 800de84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de88:	688e      	ldr	r6, [r1, #8]
 800de8a:	429e      	cmp	r6, r3
 800de8c:	4682      	mov	sl, r0
 800de8e:	460c      	mov	r4, r1
 800de90:	4690      	mov	r8, r2
 800de92:	4699      	mov	r9, r3
 800de94:	d837      	bhi.n	800df06 <__ssputs_r+0x82>
 800de96:	898a      	ldrh	r2, [r1, #12]
 800de98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800de9c:	d031      	beq.n	800df02 <__ssputs_r+0x7e>
 800de9e:	6825      	ldr	r5, [r4, #0]
 800dea0:	6909      	ldr	r1, [r1, #16]
 800dea2:	1a6f      	subs	r7, r5, r1
 800dea4:	6965      	ldr	r5, [r4, #20]
 800dea6:	2302      	movs	r3, #2
 800dea8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800deac:	fb95 f5f3 	sdiv	r5, r5, r3
 800deb0:	f109 0301 	add.w	r3, r9, #1
 800deb4:	443b      	add	r3, r7
 800deb6:	429d      	cmp	r5, r3
 800deb8:	bf38      	it	cc
 800deba:	461d      	movcc	r5, r3
 800debc:	0553      	lsls	r3, r2, #21
 800debe:	d530      	bpl.n	800df22 <__ssputs_r+0x9e>
 800dec0:	4629      	mov	r1, r5
 800dec2:	f7ff ff85 	bl	800ddd0 <_malloc_r>
 800dec6:	4606      	mov	r6, r0
 800dec8:	b950      	cbnz	r0, 800dee0 <__ssputs_r+0x5c>
 800deca:	230c      	movs	r3, #12
 800decc:	f8ca 3000 	str.w	r3, [sl]
 800ded0:	89a3      	ldrh	r3, [r4, #12]
 800ded2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ded6:	81a3      	strh	r3, [r4, #12]
 800ded8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dee0:	463a      	mov	r2, r7
 800dee2:	6921      	ldr	r1, [r4, #16]
 800dee4:	f7fc f949 	bl	800a17a <memcpy>
 800dee8:	89a3      	ldrh	r3, [r4, #12]
 800deea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800deee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800def2:	81a3      	strh	r3, [r4, #12]
 800def4:	6126      	str	r6, [r4, #16]
 800def6:	6165      	str	r5, [r4, #20]
 800def8:	443e      	add	r6, r7
 800defa:	1bed      	subs	r5, r5, r7
 800defc:	6026      	str	r6, [r4, #0]
 800defe:	60a5      	str	r5, [r4, #8]
 800df00:	464e      	mov	r6, r9
 800df02:	454e      	cmp	r6, r9
 800df04:	d900      	bls.n	800df08 <__ssputs_r+0x84>
 800df06:	464e      	mov	r6, r9
 800df08:	4632      	mov	r2, r6
 800df0a:	4641      	mov	r1, r8
 800df0c:	6820      	ldr	r0, [r4, #0]
 800df0e:	f000 fb07 	bl	800e520 <memmove>
 800df12:	68a3      	ldr	r3, [r4, #8]
 800df14:	1b9b      	subs	r3, r3, r6
 800df16:	60a3      	str	r3, [r4, #8]
 800df18:	6823      	ldr	r3, [r4, #0]
 800df1a:	441e      	add	r6, r3
 800df1c:	6026      	str	r6, [r4, #0]
 800df1e:	2000      	movs	r0, #0
 800df20:	e7dc      	b.n	800dedc <__ssputs_r+0x58>
 800df22:	462a      	mov	r2, r5
 800df24:	f000 fb17 	bl	800e556 <_realloc_r>
 800df28:	4606      	mov	r6, r0
 800df2a:	2800      	cmp	r0, #0
 800df2c:	d1e2      	bne.n	800def4 <__ssputs_r+0x70>
 800df2e:	6921      	ldr	r1, [r4, #16]
 800df30:	4650      	mov	r0, sl
 800df32:	f7ff feff 	bl	800dd34 <_free_r>
 800df36:	e7c8      	b.n	800deca <__ssputs_r+0x46>

0800df38 <_svfiprintf_r>:
 800df38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df3c:	461d      	mov	r5, r3
 800df3e:	898b      	ldrh	r3, [r1, #12]
 800df40:	061f      	lsls	r7, r3, #24
 800df42:	b09d      	sub	sp, #116	; 0x74
 800df44:	4680      	mov	r8, r0
 800df46:	460c      	mov	r4, r1
 800df48:	4616      	mov	r6, r2
 800df4a:	d50f      	bpl.n	800df6c <_svfiprintf_r+0x34>
 800df4c:	690b      	ldr	r3, [r1, #16]
 800df4e:	b96b      	cbnz	r3, 800df6c <_svfiprintf_r+0x34>
 800df50:	2140      	movs	r1, #64	; 0x40
 800df52:	f7ff ff3d 	bl	800ddd0 <_malloc_r>
 800df56:	6020      	str	r0, [r4, #0]
 800df58:	6120      	str	r0, [r4, #16]
 800df5a:	b928      	cbnz	r0, 800df68 <_svfiprintf_r+0x30>
 800df5c:	230c      	movs	r3, #12
 800df5e:	f8c8 3000 	str.w	r3, [r8]
 800df62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df66:	e0c8      	b.n	800e0fa <_svfiprintf_r+0x1c2>
 800df68:	2340      	movs	r3, #64	; 0x40
 800df6a:	6163      	str	r3, [r4, #20]
 800df6c:	2300      	movs	r3, #0
 800df6e:	9309      	str	r3, [sp, #36]	; 0x24
 800df70:	2320      	movs	r3, #32
 800df72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df76:	2330      	movs	r3, #48	; 0x30
 800df78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df7c:	9503      	str	r5, [sp, #12]
 800df7e:	f04f 0b01 	mov.w	fp, #1
 800df82:	4637      	mov	r7, r6
 800df84:	463d      	mov	r5, r7
 800df86:	f815 3b01 	ldrb.w	r3, [r5], #1
 800df8a:	b10b      	cbz	r3, 800df90 <_svfiprintf_r+0x58>
 800df8c:	2b25      	cmp	r3, #37	; 0x25
 800df8e:	d13e      	bne.n	800e00e <_svfiprintf_r+0xd6>
 800df90:	ebb7 0a06 	subs.w	sl, r7, r6
 800df94:	d00b      	beq.n	800dfae <_svfiprintf_r+0x76>
 800df96:	4653      	mov	r3, sl
 800df98:	4632      	mov	r2, r6
 800df9a:	4621      	mov	r1, r4
 800df9c:	4640      	mov	r0, r8
 800df9e:	f7ff ff71 	bl	800de84 <__ssputs_r>
 800dfa2:	3001      	adds	r0, #1
 800dfa4:	f000 80a4 	beq.w	800e0f0 <_svfiprintf_r+0x1b8>
 800dfa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfaa:	4453      	add	r3, sl
 800dfac:	9309      	str	r3, [sp, #36]	; 0x24
 800dfae:	783b      	ldrb	r3, [r7, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	f000 809d 	beq.w	800e0f0 <_svfiprintf_r+0x1b8>
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfc0:	9304      	str	r3, [sp, #16]
 800dfc2:	9307      	str	r3, [sp, #28]
 800dfc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dfc8:	931a      	str	r3, [sp, #104]	; 0x68
 800dfca:	462f      	mov	r7, r5
 800dfcc:	2205      	movs	r2, #5
 800dfce:	f817 1b01 	ldrb.w	r1, [r7], #1
 800dfd2:	4850      	ldr	r0, [pc, #320]	; (800e114 <_svfiprintf_r+0x1dc>)
 800dfd4:	f7f2 f90c 	bl	80001f0 <memchr>
 800dfd8:	9b04      	ldr	r3, [sp, #16]
 800dfda:	b9d0      	cbnz	r0, 800e012 <_svfiprintf_r+0xda>
 800dfdc:	06d9      	lsls	r1, r3, #27
 800dfde:	bf44      	itt	mi
 800dfe0:	2220      	movmi	r2, #32
 800dfe2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dfe6:	071a      	lsls	r2, r3, #28
 800dfe8:	bf44      	itt	mi
 800dfea:	222b      	movmi	r2, #43	; 0x2b
 800dfec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dff0:	782a      	ldrb	r2, [r5, #0]
 800dff2:	2a2a      	cmp	r2, #42	; 0x2a
 800dff4:	d015      	beq.n	800e022 <_svfiprintf_r+0xea>
 800dff6:	9a07      	ldr	r2, [sp, #28]
 800dff8:	462f      	mov	r7, r5
 800dffa:	2000      	movs	r0, #0
 800dffc:	250a      	movs	r5, #10
 800dffe:	4639      	mov	r1, r7
 800e000:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e004:	3b30      	subs	r3, #48	; 0x30
 800e006:	2b09      	cmp	r3, #9
 800e008:	d94d      	bls.n	800e0a6 <_svfiprintf_r+0x16e>
 800e00a:	b1b8      	cbz	r0, 800e03c <_svfiprintf_r+0x104>
 800e00c:	e00f      	b.n	800e02e <_svfiprintf_r+0xf6>
 800e00e:	462f      	mov	r7, r5
 800e010:	e7b8      	b.n	800df84 <_svfiprintf_r+0x4c>
 800e012:	4a40      	ldr	r2, [pc, #256]	; (800e114 <_svfiprintf_r+0x1dc>)
 800e014:	1a80      	subs	r0, r0, r2
 800e016:	fa0b f000 	lsl.w	r0, fp, r0
 800e01a:	4318      	orrs	r0, r3
 800e01c:	9004      	str	r0, [sp, #16]
 800e01e:	463d      	mov	r5, r7
 800e020:	e7d3      	b.n	800dfca <_svfiprintf_r+0x92>
 800e022:	9a03      	ldr	r2, [sp, #12]
 800e024:	1d11      	adds	r1, r2, #4
 800e026:	6812      	ldr	r2, [r2, #0]
 800e028:	9103      	str	r1, [sp, #12]
 800e02a:	2a00      	cmp	r2, #0
 800e02c:	db01      	blt.n	800e032 <_svfiprintf_r+0xfa>
 800e02e:	9207      	str	r2, [sp, #28]
 800e030:	e004      	b.n	800e03c <_svfiprintf_r+0x104>
 800e032:	4252      	negs	r2, r2
 800e034:	f043 0302 	orr.w	r3, r3, #2
 800e038:	9207      	str	r2, [sp, #28]
 800e03a:	9304      	str	r3, [sp, #16]
 800e03c:	783b      	ldrb	r3, [r7, #0]
 800e03e:	2b2e      	cmp	r3, #46	; 0x2e
 800e040:	d10c      	bne.n	800e05c <_svfiprintf_r+0x124>
 800e042:	787b      	ldrb	r3, [r7, #1]
 800e044:	2b2a      	cmp	r3, #42	; 0x2a
 800e046:	d133      	bne.n	800e0b0 <_svfiprintf_r+0x178>
 800e048:	9b03      	ldr	r3, [sp, #12]
 800e04a:	1d1a      	adds	r2, r3, #4
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	9203      	str	r2, [sp, #12]
 800e050:	2b00      	cmp	r3, #0
 800e052:	bfb8      	it	lt
 800e054:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e058:	3702      	adds	r7, #2
 800e05a:	9305      	str	r3, [sp, #20]
 800e05c:	4d2e      	ldr	r5, [pc, #184]	; (800e118 <_svfiprintf_r+0x1e0>)
 800e05e:	7839      	ldrb	r1, [r7, #0]
 800e060:	2203      	movs	r2, #3
 800e062:	4628      	mov	r0, r5
 800e064:	f7f2 f8c4 	bl	80001f0 <memchr>
 800e068:	b138      	cbz	r0, 800e07a <_svfiprintf_r+0x142>
 800e06a:	2340      	movs	r3, #64	; 0x40
 800e06c:	1b40      	subs	r0, r0, r5
 800e06e:	fa03 f000 	lsl.w	r0, r3, r0
 800e072:	9b04      	ldr	r3, [sp, #16]
 800e074:	4303      	orrs	r3, r0
 800e076:	3701      	adds	r7, #1
 800e078:	9304      	str	r3, [sp, #16]
 800e07a:	7839      	ldrb	r1, [r7, #0]
 800e07c:	4827      	ldr	r0, [pc, #156]	; (800e11c <_svfiprintf_r+0x1e4>)
 800e07e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e082:	2206      	movs	r2, #6
 800e084:	1c7e      	adds	r6, r7, #1
 800e086:	f7f2 f8b3 	bl	80001f0 <memchr>
 800e08a:	2800      	cmp	r0, #0
 800e08c:	d038      	beq.n	800e100 <_svfiprintf_r+0x1c8>
 800e08e:	4b24      	ldr	r3, [pc, #144]	; (800e120 <_svfiprintf_r+0x1e8>)
 800e090:	bb13      	cbnz	r3, 800e0d8 <_svfiprintf_r+0x1a0>
 800e092:	9b03      	ldr	r3, [sp, #12]
 800e094:	3307      	adds	r3, #7
 800e096:	f023 0307 	bic.w	r3, r3, #7
 800e09a:	3308      	adds	r3, #8
 800e09c:	9303      	str	r3, [sp, #12]
 800e09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0a0:	444b      	add	r3, r9
 800e0a2:	9309      	str	r3, [sp, #36]	; 0x24
 800e0a4:	e76d      	b.n	800df82 <_svfiprintf_r+0x4a>
 800e0a6:	fb05 3202 	mla	r2, r5, r2, r3
 800e0aa:	2001      	movs	r0, #1
 800e0ac:	460f      	mov	r7, r1
 800e0ae:	e7a6      	b.n	800dffe <_svfiprintf_r+0xc6>
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	3701      	adds	r7, #1
 800e0b4:	9305      	str	r3, [sp, #20]
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	250a      	movs	r5, #10
 800e0ba:	4638      	mov	r0, r7
 800e0bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0c0:	3a30      	subs	r2, #48	; 0x30
 800e0c2:	2a09      	cmp	r2, #9
 800e0c4:	d903      	bls.n	800e0ce <_svfiprintf_r+0x196>
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d0c8      	beq.n	800e05c <_svfiprintf_r+0x124>
 800e0ca:	9105      	str	r1, [sp, #20]
 800e0cc:	e7c6      	b.n	800e05c <_svfiprintf_r+0x124>
 800e0ce:	fb05 2101 	mla	r1, r5, r1, r2
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	4607      	mov	r7, r0
 800e0d6:	e7f0      	b.n	800e0ba <_svfiprintf_r+0x182>
 800e0d8:	ab03      	add	r3, sp, #12
 800e0da:	9300      	str	r3, [sp, #0]
 800e0dc:	4622      	mov	r2, r4
 800e0de:	4b11      	ldr	r3, [pc, #68]	; (800e124 <_svfiprintf_r+0x1ec>)
 800e0e0:	a904      	add	r1, sp, #16
 800e0e2:	4640      	mov	r0, r8
 800e0e4:	f7fc f8f0 	bl	800a2c8 <_printf_float>
 800e0e8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e0ec:	4681      	mov	r9, r0
 800e0ee:	d1d6      	bne.n	800e09e <_svfiprintf_r+0x166>
 800e0f0:	89a3      	ldrh	r3, [r4, #12]
 800e0f2:	065b      	lsls	r3, r3, #25
 800e0f4:	f53f af35 	bmi.w	800df62 <_svfiprintf_r+0x2a>
 800e0f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0fa:	b01d      	add	sp, #116	; 0x74
 800e0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e100:	ab03      	add	r3, sp, #12
 800e102:	9300      	str	r3, [sp, #0]
 800e104:	4622      	mov	r2, r4
 800e106:	4b07      	ldr	r3, [pc, #28]	; (800e124 <_svfiprintf_r+0x1ec>)
 800e108:	a904      	add	r1, sp, #16
 800e10a:	4640      	mov	r0, r8
 800e10c:	f7fc fb92 	bl	800a834 <_printf_i>
 800e110:	e7ea      	b.n	800e0e8 <_svfiprintf_r+0x1b0>
 800e112:	bf00      	nop
 800e114:	0800ee84 	.word	0x0800ee84
 800e118:	0800ee8a 	.word	0x0800ee8a
 800e11c:	0800ee8e 	.word	0x0800ee8e
 800e120:	0800a2c9 	.word	0x0800a2c9
 800e124:	0800de85 	.word	0x0800de85

0800e128 <__sfputc_r>:
 800e128:	6893      	ldr	r3, [r2, #8]
 800e12a:	3b01      	subs	r3, #1
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	b410      	push	{r4}
 800e130:	6093      	str	r3, [r2, #8]
 800e132:	da08      	bge.n	800e146 <__sfputc_r+0x1e>
 800e134:	6994      	ldr	r4, [r2, #24]
 800e136:	42a3      	cmp	r3, r4
 800e138:	db01      	blt.n	800e13e <__sfputc_r+0x16>
 800e13a:	290a      	cmp	r1, #10
 800e13c:	d103      	bne.n	800e146 <__sfputc_r+0x1e>
 800e13e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e142:	f7fd bdbb 	b.w	800bcbc <__swbuf_r>
 800e146:	6813      	ldr	r3, [r2, #0]
 800e148:	1c58      	adds	r0, r3, #1
 800e14a:	6010      	str	r0, [r2, #0]
 800e14c:	7019      	strb	r1, [r3, #0]
 800e14e:	4608      	mov	r0, r1
 800e150:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e154:	4770      	bx	lr

0800e156 <__sfputs_r>:
 800e156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e158:	4606      	mov	r6, r0
 800e15a:	460f      	mov	r7, r1
 800e15c:	4614      	mov	r4, r2
 800e15e:	18d5      	adds	r5, r2, r3
 800e160:	42ac      	cmp	r4, r5
 800e162:	d101      	bne.n	800e168 <__sfputs_r+0x12>
 800e164:	2000      	movs	r0, #0
 800e166:	e007      	b.n	800e178 <__sfputs_r+0x22>
 800e168:	463a      	mov	r2, r7
 800e16a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e16e:	4630      	mov	r0, r6
 800e170:	f7ff ffda 	bl	800e128 <__sfputc_r>
 800e174:	1c43      	adds	r3, r0, #1
 800e176:	d1f3      	bne.n	800e160 <__sfputs_r+0xa>
 800e178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e17c <_vfiprintf_r>:
 800e17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e180:	460c      	mov	r4, r1
 800e182:	b09d      	sub	sp, #116	; 0x74
 800e184:	4617      	mov	r7, r2
 800e186:	461d      	mov	r5, r3
 800e188:	4606      	mov	r6, r0
 800e18a:	b118      	cbz	r0, 800e194 <_vfiprintf_r+0x18>
 800e18c:	6983      	ldr	r3, [r0, #24]
 800e18e:	b90b      	cbnz	r3, 800e194 <_vfiprintf_r+0x18>
 800e190:	f7fe fd96 	bl	800ccc0 <__sinit>
 800e194:	4b7c      	ldr	r3, [pc, #496]	; (800e388 <_vfiprintf_r+0x20c>)
 800e196:	429c      	cmp	r4, r3
 800e198:	d158      	bne.n	800e24c <_vfiprintf_r+0xd0>
 800e19a:	6874      	ldr	r4, [r6, #4]
 800e19c:	89a3      	ldrh	r3, [r4, #12]
 800e19e:	0718      	lsls	r0, r3, #28
 800e1a0:	d55e      	bpl.n	800e260 <_vfiprintf_r+0xe4>
 800e1a2:	6923      	ldr	r3, [r4, #16]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d05b      	beq.n	800e260 <_vfiprintf_r+0xe4>
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	9309      	str	r3, [sp, #36]	; 0x24
 800e1ac:	2320      	movs	r3, #32
 800e1ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1b2:	2330      	movs	r3, #48	; 0x30
 800e1b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1b8:	9503      	str	r5, [sp, #12]
 800e1ba:	f04f 0b01 	mov.w	fp, #1
 800e1be:	46b8      	mov	r8, r7
 800e1c0:	4645      	mov	r5, r8
 800e1c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e1c6:	b10b      	cbz	r3, 800e1cc <_vfiprintf_r+0x50>
 800e1c8:	2b25      	cmp	r3, #37	; 0x25
 800e1ca:	d154      	bne.n	800e276 <_vfiprintf_r+0xfa>
 800e1cc:	ebb8 0a07 	subs.w	sl, r8, r7
 800e1d0:	d00b      	beq.n	800e1ea <_vfiprintf_r+0x6e>
 800e1d2:	4653      	mov	r3, sl
 800e1d4:	463a      	mov	r2, r7
 800e1d6:	4621      	mov	r1, r4
 800e1d8:	4630      	mov	r0, r6
 800e1da:	f7ff ffbc 	bl	800e156 <__sfputs_r>
 800e1de:	3001      	adds	r0, #1
 800e1e0:	f000 80c2 	beq.w	800e368 <_vfiprintf_r+0x1ec>
 800e1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1e6:	4453      	add	r3, sl
 800e1e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e1ea:	f898 3000 	ldrb.w	r3, [r8]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	f000 80ba 	beq.w	800e368 <_vfiprintf_r+0x1ec>
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1fe:	9304      	str	r3, [sp, #16]
 800e200:	9307      	str	r3, [sp, #28]
 800e202:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e206:	931a      	str	r3, [sp, #104]	; 0x68
 800e208:	46a8      	mov	r8, r5
 800e20a:	2205      	movs	r2, #5
 800e20c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e210:	485e      	ldr	r0, [pc, #376]	; (800e38c <_vfiprintf_r+0x210>)
 800e212:	f7f1 ffed 	bl	80001f0 <memchr>
 800e216:	9b04      	ldr	r3, [sp, #16]
 800e218:	bb78      	cbnz	r0, 800e27a <_vfiprintf_r+0xfe>
 800e21a:	06d9      	lsls	r1, r3, #27
 800e21c:	bf44      	itt	mi
 800e21e:	2220      	movmi	r2, #32
 800e220:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e224:	071a      	lsls	r2, r3, #28
 800e226:	bf44      	itt	mi
 800e228:	222b      	movmi	r2, #43	; 0x2b
 800e22a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e22e:	782a      	ldrb	r2, [r5, #0]
 800e230:	2a2a      	cmp	r2, #42	; 0x2a
 800e232:	d02a      	beq.n	800e28a <_vfiprintf_r+0x10e>
 800e234:	9a07      	ldr	r2, [sp, #28]
 800e236:	46a8      	mov	r8, r5
 800e238:	2000      	movs	r0, #0
 800e23a:	250a      	movs	r5, #10
 800e23c:	4641      	mov	r1, r8
 800e23e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e242:	3b30      	subs	r3, #48	; 0x30
 800e244:	2b09      	cmp	r3, #9
 800e246:	d969      	bls.n	800e31c <_vfiprintf_r+0x1a0>
 800e248:	b360      	cbz	r0, 800e2a4 <_vfiprintf_r+0x128>
 800e24a:	e024      	b.n	800e296 <_vfiprintf_r+0x11a>
 800e24c:	4b50      	ldr	r3, [pc, #320]	; (800e390 <_vfiprintf_r+0x214>)
 800e24e:	429c      	cmp	r4, r3
 800e250:	d101      	bne.n	800e256 <_vfiprintf_r+0xda>
 800e252:	68b4      	ldr	r4, [r6, #8]
 800e254:	e7a2      	b.n	800e19c <_vfiprintf_r+0x20>
 800e256:	4b4f      	ldr	r3, [pc, #316]	; (800e394 <_vfiprintf_r+0x218>)
 800e258:	429c      	cmp	r4, r3
 800e25a:	bf08      	it	eq
 800e25c:	68f4      	ldreq	r4, [r6, #12]
 800e25e:	e79d      	b.n	800e19c <_vfiprintf_r+0x20>
 800e260:	4621      	mov	r1, r4
 800e262:	4630      	mov	r0, r6
 800e264:	f7fd fd8a 	bl	800bd7c <__swsetup_r>
 800e268:	2800      	cmp	r0, #0
 800e26a:	d09d      	beq.n	800e1a8 <_vfiprintf_r+0x2c>
 800e26c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e270:	b01d      	add	sp, #116	; 0x74
 800e272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e276:	46a8      	mov	r8, r5
 800e278:	e7a2      	b.n	800e1c0 <_vfiprintf_r+0x44>
 800e27a:	4a44      	ldr	r2, [pc, #272]	; (800e38c <_vfiprintf_r+0x210>)
 800e27c:	1a80      	subs	r0, r0, r2
 800e27e:	fa0b f000 	lsl.w	r0, fp, r0
 800e282:	4318      	orrs	r0, r3
 800e284:	9004      	str	r0, [sp, #16]
 800e286:	4645      	mov	r5, r8
 800e288:	e7be      	b.n	800e208 <_vfiprintf_r+0x8c>
 800e28a:	9a03      	ldr	r2, [sp, #12]
 800e28c:	1d11      	adds	r1, r2, #4
 800e28e:	6812      	ldr	r2, [r2, #0]
 800e290:	9103      	str	r1, [sp, #12]
 800e292:	2a00      	cmp	r2, #0
 800e294:	db01      	blt.n	800e29a <_vfiprintf_r+0x11e>
 800e296:	9207      	str	r2, [sp, #28]
 800e298:	e004      	b.n	800e2a4 <_vfiprintf_r+0x128>
 800e29a:	4252      	negs	r2, r2
 800e29c:	f043 0302 	orr.w	r3, r3, #2
 800e2a0:	9207      	str	r2, [sp, #28]
 800e2a2:	9304      	str	r3, [sp, #16]
 800e2a4:	f898 3000 	ldrb.w	r3, [r8]
 800e2a8:	2b2e      	cmp	r3, #46	; 0x2e
 800e2aa:	d10e      	bne.n	800e2ca <_vfiprintf_r+0x14e>
 800e2ac:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e2b0:	2b2a      	cmp	r3, #42	; 0x2a
 800e2b2:	d138      	bne.n	800e326 <_vfiprintf_r+0x1aa>
 800e2b4:	9b03      	ldr	r3, [sp, #12]
 800e2b6:	1d1a      	adds	r2, r3, #4
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	9203      	str	r2, [sp, #12]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	bfb8      	it	lt
 800e2c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e2c4:	f108 0802 	add.w	r8, r8, #2
 800e2c8:	9305      	str	r3, [sp, #20]
 800e2ca:	4d33      	ldr	r5, [pc, #204]	; (800e398 <_vfiprintf_r+0x21c>)
 800e2cc:	f898 1000 	ldrb.w	r1, [r8]
 800e2d0:	2203      	movs	r2, #3
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	f7f1 ff8c 	bl	80001f0 <memchr>
 800e2d8:	b140      	cbz	r0, 800e2ec <_vfiprintf_r+0x170>
 800e2da:	2340      	movs	r3, #64	; 0x40
 800e2dc:	1b40      	subs	r0, r0, r5
 800e2de:	fa03 f000 	lsl.w	r0, r3, r0
 800e2e2:	9b04      	ldr	r3, [sp, #16]
 800e2e4:	4303      	orrs	r3, r0
 800e2e6:	f108 0801 	add.w	r8, r8, #1
 800e2ea:	9304      	str	r3, [sp, #16]
 800e2ec:	f898 1000 	ldrb.w	r1, [r8]
 800e2f0:	482a      	ldr	r0, [pc, #168]	; (800e39c <_vfiprintf_r+0x220>)
 800e2f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2f6:	2206      	movs	r2, #6
 800e2f8:	f108 0701 	add.w	r7, r8, #1
 800e2fc:	f7f1 ff78 	bl	80001f0 <memchr>
 800e300:	2800      	cmp	r0, #0
 800e302:	d037      	beq.n	800e374 <_vfiprintf_r+0x1f8>
 800e304:	4b26      	ldr	r3, [pc, #152]	; (800e3a0 <_vfiprintf_r+0x224>)
 800e306:	bb1b      	cbnz	r3, 800e350 <_vfiprintf_r+0x1d4>
 800e308:	9b03      	ldr	r3, [sp, #12]
 800e30a:	3307      	adds	r3, #7
 800e30c:	f023 0307 	bic.w	r3, r3, #7
 800e310:	3308      	adds	r3, #8
 800e312:	9303      	str	r3, [sp, #12]
 800e314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e316:	444b      	add	r3, r9
 800e318:	9309      	str	r3, [sp, #36]	; 0x24
 800e31a:	e750      	b.n	800e1be <_vfiprintf_r+0x42>
 800e31c:	fb05 3202 	mla	r2, r5, r2, r3
 800e320:	2001      	movs	r0, #1
 800e322:	4688      	mov	r8, r1
 800e324:	e78a      	b.n	800e23c <_vfiprintf_r+0xc0>
 800e326:	2300      	movs	r3, #0
 800e328:	f108 0801 	add.w	r8, r8, #1
 800e32c:	9305      	str	r3, [sp, #20]
 800e32e:	4619      	mov	r1, r3
 800e330:	250a      	movs	r5, #10
 800e332:	4640      	mov	r0, r8
 800e334:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e338:	3a30      	subs	r2, #48	; 0x30
 800e33a:	2a09      	cmp	r2, #9
 800e33c:	d903      	bls.n	800e346 <_vfiprintf_r+0x1ca>
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d0c3      	beq.n	800e2ca <_vfiprintf_r+0x14e>
 800e342:	9105      	str	r1, [sp, #20]
 800e344:	e7c1      	b.n	800e2ca <_vfiprintf_r+0x14e>
 800e346:	fb05 2101 	mla	r1, r5, r1, r2
 800e34a:	2301      	movs	r3, #1
 800e34c:	4680      	mov	r8, r0
 800e34e:	e7f0      	b.n	800e332 <_vfiprintf_r+0x1b6>
 800e350:	ab03      	add	r3, sp, #12
 800e352:	9300      	str	r3, [sp, #0]
 800e354:	4622      	mov	r2, r4
 800e356:	4b13      	ldr	r3, [pc, #76]	; (800e3a4 <_vfiprintf_r+0x228>)
 800e358:	a904      	add	r1, sp, #16
 800e35a:	4630      	mov	r0, r6
 800e35c:	f7fb ffb4 	bl	800a2c8 <_printf_float>
 800e360:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e364:	4681      	mov	r9, r0
 800e366:	d1d5      	bne.n	800e314 <_vfiprintf_r+0x198>
 800e368:	89a3      	ldrh	r3, [r4, #12]
 800e36a:	065b      	lsls	r3, r3, #25
 800e36c:	f53f af7e 	bmi.w	800e26c <_vfiprintf_r+0xf0>
 800e370:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e372:	e77d      	b.n	800e270 <_vfiprintf_r+0xf4>
 800e374:	ab03      	add	r3, sp, #12
 800e376:	9300      	str	r3, [sp, #0]
 800e378:	4622      	mov	r2, r4
 800e37a:	4b0a      	ldr	r3, [pc, #40]	; (800e3a4 <_vfiprintf_r+0x228>)
 800e37c:	a904      	add	r1, sp, #16
 800e37e:	4630      	mov	r0, r6
 800e380:	f7fc fa58 	bl	800a834 <_printf_i>
 800e384:	e7ec      	b.n	800e360 <_vfiprintf_r+0x1e4>
 800e386:	bf00      	nop
 800e388:	0800ed48 	.word	0x0800ed48
 800e38c:	0800ee84 	.word	0x0800ee84
 800e390:	0800ed68 	.word	0x0800ed68
 800e394:	0800ed28 	.word	0x0800ed28
 800e398:	0800ee8a 	.word	0x0800ee8a
 800e39c:	0800ee8e 	.word	0x0800ee8e
 800e3a0:	0800a2c9 	.word	0x0800a2c9
 800e3a4:	0800e157 	.word	0x0800e157

0800e3a8 <_sbrk_r>:
 800e3a8:	b538      	push	{r3, r4, r5, lr}
 800e3aa:	4c06      	ldr	r4, [pc, #24]	; (800e3c4 <_sbrk_r+0x1c>)
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	4605      	mov	r5, r0
 800e3b0:	4608      	mov	r0, r1
 800e3b2:	6023      	str	r3, [r4, #0]
 800e3b4:	f7f9 fefe 	bl	80081b4 <_sbrk>
 800e3b8:	1c43      	adds	r3, r0, #1
 800e3ba:	d102      	bne.n	800e3c2 <_sbrk_r+0x1a>
 800e3bc:	6823      	ldr	r3, [r4, #0]
 800e3be:	b103      	cbz	r3, 800e3c2 <_sbrk_r+0x1a>
 800e3c0:	602b      	str	r3, [r5, #0]
 800e3c2:	bd38      	pop	{r3, r4, r5, pc}
 800e3c4:	20004af4 	.word	0x20004af4

0800e3c8 <__sread>:
 800e3c8:	b510      	push	{r4, lr}
 800e3ca:	460c      	mov	r4, r1
 800e3cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3d0:	f000 f8e8 	bl	800e5a4 <_read_r>
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	bfab      	itete	ge
 800e3d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e3da:	89a3      	ldrhlt	r3, [r4, #12]
 800e3dc:	181b      	addge	r3, r3, r0
 800e3de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e3e2:	bfac      	ite	ge
 800e3e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e3e6:	81a3      	strhlt	r3, [r4, #12]
 800e3e8:	bd10      	pop	{r4, pc}

0800e3ea <__swrite>:
 800e3ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ee:	461f      	mov	r7, r3
 800e3f0:	898b      	ldrh	r3, [r1, #12]
 800e3f2:	05db      	lsls	r3, r3, #23
 800e3f4:	4605      	mov	r5, r0
 800e3f6:	460c      	mov	r4, r1
 800e3f8:	4616      	mov	r6, r2
 800e3fa:	d505      	bpl.n	800e408 <__swrite+0x1e>
 800e3fc:	2302      	movs	r3, #2
 800e3fe:	2200      	movs	r2, #0
 800e400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e404:	f000 f87a 	bl	800e4fc <_lseek_r>
 800e408:	89a3      	ldrh	r3, [r4, #12]
 800e40a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e40e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e412:	81a3      	strh	r3, [r4, #12]
 800e414:	4632      	mov	r2, r6
 800e416:	463b      	mov	r3, r7
 800e418:	4628      	mov	r0, r5
 800e41a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e41e:	f000 b829 	b.w	800e474 <_write_r>

0800e422 <__sseek>:
 800e422:	b510      	push	{r4, lr}
 800e424:	460c      	mov	r4, r1
 800e426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e42a:	f000 f867 	bl	800e4fc <_lseek_r>
 800e42e:	1c43      	adds	r3, r0, #1
 800e430:	89a3      	ldrh	r3, [r4, #12]
 800e432:	bf15      	itete	ne
 800e434:	6560      	strne	r0, [r4, #84]	; 0x54
 800e436:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e43a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e43e:	81a3      	strheq	r3, [r4, #12]
 800e440:	bf18      	it	ne
 800e442:	81a3      	strhne	r3, [r4, #12]
 800e444:	bd10      	pop	{r4, pc}

0800e446 <__sclose>:
 800e446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e44a:	f000 b825 	b.w	800e498 <_close_r>

0800e44e <strncmp>:
 800e44e:	b510      	push	{r4, lr}
 800e450:	b16a      	cbz	r2, 800e46e <strncmp+0x20>
 800e452:	3901      	subs	r1, #1
 800e454:	1884      	adds	r4, r0, r2
 800e456:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e45a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e45e:	4293      	cmp	r3, r2
 800e460:	d103      	bne.n	800e46a <strncmp+0x1c>
 800e462:	42a0      	cmp	r0, r4
 800e464:	d001      	beq.n	800e46a <strncmp+0x1c>
 800e466:	2b00      	cmp	r3, #0
 800e468:	d1f5      	bne.n	800e456 <strncmp+0x8>
 800e46a:	1a98      	subs	r0, r3, r2
 800e46c:	bd10      	pop	{r4, pc}
 800e46e:	4610      	mov	r0, r2
 800e470:	e7fc      	b.n	800e46c <strncmp+0x1e>
	...

0800e474 <_write_r>:
 800e474:	b538      	push	{r3, r4, r5, lr}
 800e476:	4c07      	ldr	r4, [pc, #28]	; (800e494 <_write_r+0x20>)
 800e478:	4605      	mov	r5, r0
 800e47a:	4608      	mov	r0, r1
 800e47c:	4611      	mov	r1, r2
 800e47e:	2200      	movs	r2, #0
 800e480:	6022      	str	r2, [r4, #0]
 800e482:	461a      	mov	r2, r3
 800e484:	f7f9 fe7c 	bl	8008180 <_write>
 800e488:	1c43      	adds	r3, r0, #1
 800e48a:	d102      	bne.n	800e492 <_write_r+0x1e>
 800e48c:	6823      	ldr	r3, [r4, #0]
 800e48e:	b103      	cbz	r3, 800e492 <_write_r+0x1e>
 800e490:	602b      	str	r3, [r5, #0]
 800e492:	bd38      	pop	{r3, r4, r5, pc}
 800e494:	20004af4 	.word	0x20004af4

0800e498 <_close_r>:
 800e498:	b538      	push	{r3, r4, r5, lr}
 800e49a:	4c06      	ldr	r4, [pc, #24]	; (800e4b4 <_close_r+0x1c>)
 800e49c:	2300      	movs	r3, #0
 800e49e:	4605      	mov	r5, r0
 800e4a0:	4608      	mov	r0, r1
 800e4a2:	6023      	str	r3, [r4, #0]
 800e4a4:	f7f9 fe7a 	bl	800819c <_close>
 800e4a8:	1c43      	adds	r3, r0, #1
 800e4aa:	d102      	bne.n	800e4b2 <_close_r+0x1a>
 800e4ac:	6823      	ldr	r3, [r4, #0]
 800e4ae:	b103      	cbz	r3, 800e4b2 <_close_r+0x1a>
 800e4b0:	602b      	str	r3, [r5, #0]
 800e4b2:	bd38      	pop	{r3, r4, r5, pc}
 800e4b4:	20004af4 	.word	0x20004af4

0800e4b8 <_fstat_r>:
 800e4b8:	b538      	push	{r3, r4, r5, lr}
 800e4ba:	4c07      	ldr	r4, [pc, #28]	; (800e4d8 <_fstat_r+0x20>)
 800e4bc:	2300      	movs	r3, #0
 800e4be:	4605      	mov	r5, r0
 800e4c0:	4608      	mov	r0, r1
 800e4c2:	4611      	mov	r1, r2
 800e4c4:	6023      	str	r3, [r4, #0]
 800e4c6:	f7f9 fe6c 	bl	80081a2 <_fstat>
 800e4ca:	1c43      	adds	r3, r0, #1
 800e4cc:	d102      	bne.n	800e4d4 <_fstat_r+0x1c>
 800e4ce:	6823      	ldr	r3, [r4, #0]
 800e4d0:	b103      	cbz	r3, 800e4d4 <_fstat_r+0x1c>
 800e4d2:	602b      	str	r3, [r5, #0]
 800e4d4:	bd38      	pop	{r3, r4, r5, pc}
 800e4d6:	bf00      	nop
 800e4d8:	20004af4 	.word	0x20004af4

0800e4dc <_isatty_r>:
 800e4dc:	b538      	push	{r3, r4, r5, lr}
 800e4de:	4c06      	ldr	r4, [pc, #24]	; (800e4f8 <_isatty_r+0x1c>)
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	4605      	mov	r5, r0
 800e4e4:	4608      	mov	r0, r1
 800e4e6:	6023      	str	r3, [r4, #0]
 800e4e8:	f7f9 fe60 	bl	80081ac <_isatty>
 800e4ec:	1c43      	adds	r3, r0, #1
 800e4ee:	d102      	bne.n	800e4f6 <_isatty_r+0x1a>
 800e4f0:	6823      	ldr	r3, [r4, #0]
 800e4f2:	b103      	cbz	r3, 800e4f6 <_isatty_r+0x1a>
 800e4f4:	602b      	str	r3, [r5, #0]
 800e4f6:	bd38      	pop	{r3, r4, r5, pc}
 800e4f8:	20004af4 	.word	0x20004af4

0800e4fc <_lseek_r>:
 800e4fc:	b538      	push	{r3, r4, r5, lr}
 800e4fe:	4c07      	ldr	r4, [pc, #28]	; (800e51c <_lseek_r+0x20>)
 800e500:	4605      	mov	r5, r0
 800e502:	4608      	mov	r0, r1
 800e504:	4611      	mov	r1, r2
 800e506:	2200      	movs	r2, #0
 800e508:	6022      	str	r2, [r4, #0]
 800e50a:	461a      	mov	r2, r3
 800e50c:	f7f9 fe50 	bl	80081b0 <_lseek>
 800e510:	1c43      	adds	r3, r0, #1
 800e512:	d102      	bne.n	800e51a <_lseek_r+0x1e>
 800e514:	6823      	ldr	r3, [r4, #0]
 800e516:	b103      	cbz	r3, 800e51a <_lseek_r+0x1e>
 800e518:	602b      	str	r3, [r5, #0]
 800e51a:	bd38      	pop	{r3, r4, r5, pc}
 800e51c:	20004af4 	.word	0x20004af4

0800e520 <memmove>:
 800e520:	4288      	cmp	r0, r1
 800e522:	b510      	push	{r4, lr}
 800e524:	eb01 0302 	add.w	r3, r1, r2
 800e528:	d807      	bhi.n	800e53a <memmove+0x1a>
 800e52a:	1e42      	subs	r2, r0, #1
 800e52c:	4299      	cmp	r1, r3
 800e52e:	d00a      	beq.n	800e546 <memmove+0x26>
 800e530:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e534:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e538:	e7f8      	b.n	800e52c <memmove+0xc>
 800e53a:	4283      	cmp	r3, r0
 800e53c:	d9f5      	bls.n	800e52a <memmove+0xa>
 800e53e:	1881      	adds	r1, r0, r2
 800e540:	1ad2      	subs	r2, r2, r3
 800e542:	42d3      	cmn	r3, r2
 800e544:	d100      	bne.n	800e548 <memmove+0x28>
 800e546:	bd10      	pop	{r4, pc}
 800e548:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e54c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e550:	e7f7      	b.n	800e542 <memmove+0x22>

0800e552 <__malloc_lock>:
 800e552:	4770      	bx	lr

0800e554 <__malloc_unlock>:
 800e554:	4770      	bx	lr

0800e556 <_realloc_r>:
 800e556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e558:	4607      	mov	r7, r0
 800e55a:	4614      	mov	r4, r2
 800e55c:	460e      	mov	r6, r1
 800e55e:	b921      	cbnz	r1, 800e56a <_realloc_r+0x14>
 800e560:	4611      	mov	r1, r2
 800e562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e566:	f7ff bc33 	b.w	800ddd0 <_malloc_r>
 800e56a:	b922      	cbnz	r2, 800e576 <_realloc_r+0x20>
 800e56c:	f7ff fbe2 	bl	800dd34 <_free_r>
 800e570:	4625      	mov	r5, r4
 800e572:	4628      	mov	r0, r5
 800e574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e576:	f000 f827 	bl	800e5c8 <_malloc_usable_size_r>
 800e57a:	42a0      	cmp	r0, r4
 800e57c:	d20f      	bcs.n	800e59e <_realloc_r+0x48>
 800e57e:	4621      	mov	r1, r4
 800e580:	4638      	mov	r0, r7
 800e582:	f7ff fc25 	bl	800ddd0 <_malloc_r>
 800e586:	4605      	mov	r5, r0
 800e588:	2800      	cmp	r0, #0
 800e58a:	d0f2      	beq.n	800e572 <_realloc_r+0x1c>
 800e58c:	4631      	mov	r1, r6
 800e58e:	4622      	mov	r2, r4
 800e590:	f7fb fdf3 	bl	800a17a <memcpy>
 800e594:	4631      	mov	r1, r6
 800e596:	4638      	mov	r0, r7
 800e598:	f7ff fbcc 	bl	800dd34 <_free_r>
 800e59c:	e7e9      	b.n	800e572 <_realloc_r+0x1c>
 800e59e:	4635      	mov	r5, r6
 800e5a0:	e7e7      	b.n	800e572 <_realloc_r+0x1c>
	...

0800e5a4 <_read_r>:
 800e5a4:	b538      	push	{r3, r4, r5, lr}
 800e5a6:	4c07      	ldr	r4, [pc, #28]	; (800e5c4 <_read_r+0x20>)
 800e5a8:	4605      	mov	r5, r0
 800e5aa:	4608      	mov	r0, r1
 800e5ac:	4611      	mov	r1, r2
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	6022      	str	r2, [r4, #0]
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	f7f9 fdd6 	bl	8008164 <_read>
 800e5b8:	1c43      	adds	r3, r0, #1
 800e5ba:	d102      	bne.n	800e5c2 <_read_r+0x1e>
 800e5bc:	6823      	ldr	r3, [r4, #0]
 800e5be:	b103      	cbz	r3, 800e5c2 <_read_r+0x1e>
 800e5c0:	602b      	str	r3, [r5, #0]
 800e5c2:	bd38      	pop	{r3, r4, r5, pc}
 800e5c4:	20004af4 	.word	0x20004af4

0800e5c8 <_malloc_usable_size_r>:
 800e5c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5cc:	1f18      	subs	r0, r3, #4
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	bfbc      	itt	lt
 800e5d2:	580b      	ldrlt	r3, [r1, r0]
 800e5d4:	18c0      	addlt	r0, r0, r3
 800e5d6:	4770      	bx	lr

0800e5d8 <_init>:
 800e5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5da:	bf00      	nop
 800e5dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5de:	bc08      	pop	{r3}
 800e5e0:	469e      	mov	lr, r3
 800e5e2:	4770      	bx	lr

0800e5e4 <_fini>:
 800e5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5e6:	bf00      	nop
 800e5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5ea:	bc08      	pop	{r3}
 800e5ec:	469e      	mov	lr, r3
 800e5ee:	4770      	bx	lr
