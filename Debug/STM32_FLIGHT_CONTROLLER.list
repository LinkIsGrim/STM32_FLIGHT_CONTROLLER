
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eef4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  0800f098  0800f098  0001f098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7d8  0800f7d8  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7d8  0800f7d8  0001f7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7e0  0800f7e0  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7e0  0800f7e0  0001f7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f7e4  0800f7e4  0001f7e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0800f7e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048c4  200000d8  0800f8bc  000200d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000499c  0800f8bc  0002499c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024c91  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000052d9  00000000  00000000  00044d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d88  00000000  00000000  0004a070  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b38  00000000  00000000  0004bdf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d068  00000000  00000000  0004d930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019d17  00000000  00000000  0006a998  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009e1f3  00000000  00000000  000846af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001228a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000879c  00000000  00000000  00122920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d8 	.word	0x200000d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f07c 	.word	0x0800f07c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000dc 	.word	0x200000dc
 80001dc:	0800f07c 	.word	0x0800f07c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <imu_init>:



/***************************** METHODS  **********************************/

IMU_StatusTypeDef imu_init(I2C_HandleTypeDef* handle) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

	//printf("STM32 Online..\r\n");

	//Check if MPU9250 responds
	if (HAL_I2C_IsDeviceReady(handle, 0xD0, 2, 100) == HAL_OK) {
 8000f60:	2364      	movs	r3, #100	; 0x64
 8000f62:	2202      	movs	r2, #2
 8000f64:	21d0      	movs	r1, #208	; 0xd0
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f004 faea 	bl	8005540 <HAL_I2C_IsDeviceReady>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10e      	bne.n	8000f90 <imu_init+0x38>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle LED on if so
 8000f72:	2120      	movs	r1, #32
 8000f74:	480d      	ldr	r0, [pc, #52]	; (8000fac <imu_init+0x54>)
 8000f76:	f003 fe58 	bl	8004c2a <HAL_GPIO_TogglePin>
	}
	else{
		while(1);
	}

	uint8_t whoami = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8000f7a:	2275      	movs	r2, #117	; 0x75
 8000f7c:	21d1      	movs	r1, #209	; 0xd1
 8000f7e:	20d0      	movs	r0, #208	; 0xd0
 8000f80:	f000 fb9a 	bl	80016b8 <readByte>
 8000f84:	4603      	mov	r3, r0
 8000f86:	73fb      	strb	r3, [r7, #15]
	WHO_AM_I_MPU9250);  // Read WHO_AM_I register for MPU9250

	if (whoami == 0x71) {
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	2b71      	cmp	r3, #113	; 0x71
 8000f8c:	d109      	bne.n	8000fa2 <imu_init+0x4a>
 8000f8e:	e000      	b.n	8000f92 <imu_init+0x3a>
		while(1);
 8000f90:	e7fe      	b.n	8000f90 <imu_init+0x38>
		printf("MPU9250 online..\r\n");
 8000f92:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <imu_init+0x58>)
 8000f94:	f00b fa00 	bl	800c398 <puts>
		printf("whoami reg = %d ..\r\n", whoami);
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <imu_init+0x5c>)
 8000f9e:	f00b f987 	bl	800c2b0 <iprintf>
		//uint8_t UART_TX_DATA[13] = "MPU9250 online..\r\n";
		//HA L_UART_Transmit(&huart2, UART_TX_DATA, 13, 10);
	}


	return IMU_SUCCESS;
 8000fa2:	2300      	movs	r3, #0

}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	0800f654 	.word	0x0800f654
 8000fb4:	0800f668 	.word	0x0800f668

08000fb8 <imu_calibrate>:

IMU_StatusTypeDef imu_calibrate() {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0

	//************** Calibration sequence for MPU9250 **************
	//This is mostly taken from the library example https://os.mbed.com/users/onehorse/code/MPU9250AHRS/file/4e59a37182df/main.cpp/
	//but adapted slightly for this platform

	resetMPU9250();
 8000fbc:	f000 fcff 	bl	80019be <resetMPU9250>
	MPU9250SelfTest(SelfTest); // Start by performing self test and reporting values
 8000fc0:	480e      	ldr	r0, [pc, #56]	; (8000ffc <imu_calibrate+0x44>)
 8000fc2:	f000 fe15 	bl	8001bf0 <MPU9250SelfTest>

	HAL_Delay(500);
 8000fc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fca:	f002 febd 	bl	8003d48 <HAL_Delay>



	//calibrateMPU9250(gyroBias, accelBias); // Calibrate gyro and accelerometers, load biases in bias registers

	HAL_Delay(500);
 8000fce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fd2:	f002 feb9 	bl	8003d48 <HAL_Delay>

	initMPU9250();
 8000fd6:	f000 fd75 	bl	8001ac4 <initMPU9250>
	initAK8963(magCalibration);
 8000fda:	4809      	ldr	r0, [pc, #36]	; (8001000 <imu_calibrate+0x48>)
 8000fdc:	f000 fcfc 	bl	80019d8 <initAK8963>


	HAL_Delay(500);
 8000fe0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fe4:	f002 feb0 	bl	8003d48 <HAL_Delay>

	getAres(); // Get accelerometer sensitivity
 8000fe8:	f000 fc1e 	bl	8001828 <getAres>
	getGres(); // Get gyro sensitivity
 8000fec:	f000 fbe8 	bl	80017c0 <getGres>
	getMres(); // Get magnetometer sensitivity
 8000ff0:	f000 fbc8 	bl	8001784 <getMres>

//	magbias[0] = +470.; // User environmental x-axis correction in milliGauss, should be automatically calculated
//	magbias[1] = +120.; // User environmental x-axis correction in milliGauss
//	magbias[2] = +125.; // User environmental x-axis correction in milliGauss

	return IMU_SUCCESS;
 8000ff4:	2300      	movs	r3, #0

}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200041dc 	.word	0x200041dc
 8001000:	20000004 	.word	0x20000004
 8001004:	00000000 	.word	0x00000000

08001008 <calc_RollPitchYaw>:

void calc_RollPitchYaw(float *roll, float *pitch, float *yaw) {
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	ed2d 8b02 	vpush	{d8}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]

	//******* Get roll pitch & yaw values from registers (also from library example but adapted slightly) ********

	// If intPin goes high, all data registers have new data
	if (readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, INT_STATUS) & 0x01) { // On interrupt, check if data ready interrupt
 8001018:	223a      	movs	r2, #58	; 0x3a
 800101a:	21d1      	movs	r1, #209	; 0xd1
 800101c:	20d0      	movs	r0, #208	; 0xd0
 800101e:	f000 fb4b 	bl	80016b8 <readByte>
 8001022:	4603      	mov	r3, r0
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 80ed 	beq.w	8001208 <calc_RollPitchYaw+0x200>

		readAccelData(accelCount);  // Read the x/y/z adc values
 800102e:	488c      	ldr	r0, [pc, #560]	; (8001260 <calc_RollPitchYaw+0x258>)
 8001030:	f000 fc2a 	bl	8001888 <readAccelData>
		// Now we'll calculate the accleration value into actual g's
		ax = (float) accelCount[0] * aRes - accelBias[0]; // get actual g value, this depends on scale being set
 8001034:	4b8a      	ldr	r3, [pc, #552]	; (8001260 <calc_RollPitchYaw+0x258>)
 8001036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103a:	ee07 3a90 	vmov	s15, r3
 800103e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001042:	4b88      	ldr	r3, [pc, #544]	; (8001264 <calc_RollPitchYaw+0x25c>)
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104c:	4b86      	ldr	r3, [pc, #536]	; (8001268 <calc_RollPitchYaw+0x260>)
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001056:	4b85      	ldr	r3, [pc, #532]	; (800126c <calc_RollPitchYaw+0x264>)
 8001058:	edc3 7a00 	vstr	s15, [r3]
		ay = (float) accelCount[1] * aRes - accelBias[1];
 800105c:	4b80      	ldr	r3, [pc, #512]	; (8001260 <calc_RollPitchYaw+0x258>)
 800105e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800106a:	4b7e      	ldr	r3, [pc, #504]	; (8001264 <calc_RollPitchYaw+0x25c>)
 800106c:	edd3 7a00 	vldr	s15, [r3]
 8001070:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001074:	4b7c      	ldr	r3, [pc, #496]	; (8001268 <calc_RollPitchYaw+0x260>)
 8001076:	edd3 7a01 	vldr	s15, [r3, #4]
 800107a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800107e:	4b7c      	ldr	r3, [pc, #496]	; (8001270 <calc_RollPitchYaw+0x268>)
 8001080:	edc3 7a00 	vstr	s15, [r3]
		az = (float) accelCount[2] * aRes - accelBias[2];
 8001084:	4b76      	ldr	r3, [pc, #472]	; (8001260 <calc_RollPitchYaw+0x258>)
 8001086:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001092:	4b74      	ldr	r3, [pc, #464]	; (8001264 <calc_RollPitchYaw+0x25c>)
 8001094:	edd3 7a00 	vldr	s15, [r3]
 8001098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800109c:	4b72      	ldr	r3, [pc, #456]	; (8001268 <calc_RollPitchYaw+0x260>)
 800109e:	edd3 7a02 	vldr	s15, [r3, #8]
 80010a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a6:	4b73      	ldr	r3, [pc, #460]	; (8001274 <calc_RollPitchYaw+0x26c>)
 80010a8:	edc3 7a00 	vstr	s15, [r3]

		readGyroData(gyroCount);  // Read the x/y/z adc values
 80010ac:	4872      	ldr	r0, [pc, #456]	; (8001278 <calc_RollPitchYaw+0x270>)
 80010ae:	f000 fc19 	bl	80018e4 <readGyroData>
		// Calculate the gyro value into actual degrees per second
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 80010b2:	4b71      	ldr	r3, [pc, #452]	; (8001278 <calc_RollPitchYaw+0x270>)
 80010b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b8:	ee07 3a90 	vmov	s15, r3
 80010bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c0:	4b6e      	ldr	r3, [pc, #440]	; (800127c <calc_RollPitchYaw+0x274>)
 80010c2:	edd3 7a00 	vldr	s15, [r3]
 80010c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ca:	4b6d      	ldr	r3, [pc, #436]	; (8001280 <calc_RollPitchYaw+0x278>)
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d4:	4b6b      	ldr	r3, [pc, #428]	; (8001284 <calc_RollPitchYaw+0x27c>)
 80010d6:	edc3 7a00 	vstr	s15, [r3]
		gy = (float) gyroCount[1] * gRes - gyroBias[1];
 80010da:	4b67      	ldr	r3, [pc, #412]	; (8001278 <calc_RollPitchYaw+0x270>)
 80010dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010e0:	ee07 3a90 	vmov	s15, r3
 80010e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010e8:	4b64      	ldr	r3, [pc, #400]	; (800127c <calc_RollPitchYaw+0x274>)
 80010ea:	edd3 7a00 	vldr	s15, [r3]
 80010ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f2:	4b63      	ldr	r3, [pc, #396]	; (8001280 <calc_RollPitchYaw+0x278>)
 80010f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80010f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fc:	4b62      	ldr	r3, [pc, #392]	; (8001288 <calc_RollPitchYaw+0x280>)
 80010fe:	edc3 7a00 	vstr	s15, [r3]
		gz = (float) gyroCount[2] * gRes - gyroBias[2];
 8001102:	4b5d      	ldr	r3, [pc, #372]	; (8001278 <calc_RollPitchYaw+0x270>)
 8001104:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001108:	ee07 3a90 	vmov	s15, r3
 800110c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001110:	4b5a      	ldr	r3, [pc, #360]	; (800127c <calc_RollPitchYaw+0x274>)
 8001112:	edd3 7a00 	vldr	s15, [r3]
 8001116:	ee27 7a27 	vmul.f32	s14, s14, s15
 800111a:	4b59      	ldr	r3, [pc, #356]	; (8001280 <calc_RollPitchYaw+0x278>)
 800111c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001124:	4b59      	ldr	r3, [pc, #356]	; (800128c <calc_RollPitchYaw+0x284>)
 8001126:	edc3 7a00 	vstr	s15, [r3]

		readMagData(magCount);  // Read the x/y/z adc values
 800112a:	4859      	ldr	r0, [pc, #356]	; (8001290 <calc_RollPitchYaw+0x288>)
 800112c:	f000 fc08 	bl	8001940 <readMagData>
		// Calculate the magnetometer values in milliGauss
		// Include factory calibration per data sheet and user environmental corrections
		mx = (float) magCount[0] * mRes * magCalibration[0] - magbias[0]; // get actual magnetometer value, this depends on scale being set
 8001130:	4b57      	ldr	r3, [pc, #348]	; (8001290 <calc_RollPitchYaw+0x288>)
 8001132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800113e:	4b55      	ldr	r3, [pc, #340]	; (8001294 <calc_RollPitchYaw+0x28c>)
 8001140:	edd3 7a00 	vldr	s15, [r3]
 8001144:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001148:	4b53      	ldr	r3, [pc, #332]	; (8001298 <calc_RollPitchYaw+0x290>)
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001152:	4b52      	ldr	r3, [pc, #328]	; (800129c <calc_RollPitchYaw+0x294>)
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115c:	4b50      	ldr	r3, [pc, #320]	; (80012a0 <calc_RollPitchYaw+0x298>)
 800115e:	edc3 7a00 	vstr	s15, [r3]
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 8001162:	4b4b      	ldr	r3, [pc, #300]	; (8001290 <calc_RollPitchYaw+0x288>)
 8001164:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001168:	ee07 3a90 	vmov	s15, r3
 800116c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001170:	4b48      	ldr	r3, [pc, #288]	; (8001294 <calc_RollPitchYaw+0x28c>)
 8001172:	edd3 7a00 	vldr	s15, [r3]
 8001176:	ee27 7a27 	vmul.f32	s14, s14, s15
 800117a:	4b47      	ldr	r3, [pc, #284]	; (8001298 <calc_RollPitchYaw+0x290>)
 800117c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001180:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001184:	4b45      	ldr	r3, [pc, #276]	; (800129c <calc_RollPitchYaw+0x294>)
 8001186:	edd3 7a01 	vldr	s15, [r3, #4]
 800118a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118e:	4b45      	ldr	r3, [pc, #276]	; (80012a4 <calc_RollPitchYaw+0x29c>)
 8001190:	edc3 7a00 	vstr	s15, [r3]
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 8001194:	4b3e      	ldr	r3, [pc, #248]	; (8001290 <calc_RollPitchYaw+0x288>)
 8001196:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a2:	4b3c      	ldr	r3, [pc, #240]	; (8001294 <calc_RollPitchYaw+0x28c>)
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ac:	4b3a      	ldr	r3, [pc, #232]	; (8001298 <calc_RollPitchYaw+0x290>)
 80011ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80011b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011b6:	4b39      	ldr	r3, [pc, #228]	; (800129c <calc_RollPitchYaw+0x294>)
 80011b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80011bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011c0:	4b39      	ldr	r3, [pc, #228]	; (80012a8 <calc_RollPitchYaw+0x2a0>)
 80011c2:	edc3 7a00 	vstr	s15, [r3]

		mx *= magscale[0];
 80011c6:	4b39      	ldr	r3, [pc, #228]	; (80012ac <calc_RollPitchYaw+0x2a4>)
 80011c8:	ed93 7a00 	vldr	s14, [r3]
 80011cc:	4b34      	ldr	r3, [pc, #208]	; (80012a0 <calc_RollPitchYaw+0x298>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d6:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <calc_RollPitchYaw+0x298>)
 80011d8:	edc3 7a00 	vstr	s15, [r3]
		my *= magscale[1];
 80011dc:	4b33      	ldr	r3, [pc, #204]	; (80012ac <calc_RollPitchYaw+0x2a4>)
 80011de:	ed93 7a01 	vldr	s14, [r3, #4]
 80011e2:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <calc_RollPitchYaw+0x29c>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ec:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <calc_RollPitchYaw+0x29c>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]
		mz *= magscale[2];
 80011f2:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <calc_RollPitchYaw+0x2a4>)
 80011f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80011f8:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <calc_RollPitchYaw+0x2a0>)
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001202:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <calc_RollPitchYaw+0x2a0>)
 8001204:	edc3 7a00 	vstr	s15, [r3]
	}

	Now = htim11.Instance->CNT;
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <calc_RollPitchYaw+0x2a8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001216:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <calc_RollPitchYaw+0x2ac>)
 8001218:	edc3 7a00 	vstr	s15, [r3]

	//This will happen when the timer takes a reading, then the next reading is after
	//the timer has reset, ie gone back to 0 and started counting up again
	if(Now - lastUpdate < 0){
 800121c:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <calc_RollPitchYaw+0x2ac>)
 800121e:	ed93 7a00 	vldr	s14, [r3]
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <calc_RollPitchYaw+0x2b0>)
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001234:	d548      	bpl.n	80012c8 <calc_RollPitchYaw+0x2c0>
		//Take time difference taking into account reset of timer
		//Formula for getting timer count into seconds = COUNT * (1/TIMER_CLK)*PRESCALER
		deltat = (float) (((65535-lastUpdate)+Now) * (1 / (TIMER_CLK_FREQ / 100.0f)));
 8001236:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <calc_RollPitchYaw+0x2b0>)
 8001238:	edd3 7a00 	vldr	s15, [r3]
 800123c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80012bc <calc_RollPitchYaw+0x2b4>
 8001240:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <calc_RollPitchYaw+0x2ac>)
 8001246:	edd3 7a00 	vldr	s15, [r3]
 800124a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800124e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80012c0 <calc_RollPitchYaw+0x2b8>
 8001252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001256:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <calc_RollPitchYaw+0x2bc>)
 8001258:	edc3 7a00 	vstr	s15, [r3]
 800125c:	e043      	b.n	80012e6 <calc_RollPitchYaw+0x2de>
 800125e:	bf00      	nop
 8001260:	200041d4 	.word	0x200041d4
 8001264:	20004264 	.word	0x20004264
 8001268:	20000034 	.word	0x20000034
 800126c:	20004260 	.word	0x20004260
 8001270:	20004294 	.word	0x20004294
 8001274:	2000424c 	.word	0x2000424c
 8001278:	20004254 	.word	0x20004254
 800127c:	20004270 	.word	0x20004270
 8001280:	20000028 	.word	0x20000028
 8001284:	20004290 	.word	0x20004290
 8001288:	20004248 	.word	0x20004248
 800128c:	2000426c 	.word	0x2000426c
 8001290:	2000427c 	.word	0x2000427c
 8001294:	2000428c 	.word	0x2000428c
 8001298:	20000004 	.word	0x20000004
 800129c:	20000010 	.word	0x20000010
 80012a0:	20004298 	.word	0x20004298
 80012a4:	2000425c 	.word	0x2000425c
 80012a8:	20004274 	.word	0x20004274
 80012ac:	2000001c 	.word	0x2000001c
 80012b0:	200048b8 	.word	0x200048b8
 80012b4:	20000108 	.word	0x20000108
 80012b8:	20000104 	.word	0x20000104
 80012bc:	477fff00 	.word	0x477fff00
 80012c0:	358637bd 	.word	0x358637bd
 80012c4:	20000100 	.word	0x20000100

	}
	else{
	//Otherwise normally the count difference will be positive
	deltat = (float) ((Now - lastUpdate) * (1 / (TIMER_CLK_FREQ / 100.0f))); // set integration time by time elapsed since last filter update
 80012c8:	4bd1      	ldr	r3, [pc, #836]	; (8001610 <calc_RollPitchYaw+0x608>)
 80012ca:	ed93 7a00 	vldr	s14, [r3]
 80012ce:	4bd1      	ldr	r3, [pc, #836]	; (8001614 <calc_RollPitchYaw+0x60c>)
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d8:	ed9f 7acf 	vldr	s14, [pc, #828]	; 8001618 <calc_RollPitchYaw+0x610>
 80012dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e0:	4bce      	ldr	r3, [pc, #824]	; (800161c <calc_RollPitchYaw+0x614>)
 80012e2:	edc3 7a00 	vstr	s15, [r3]

	}

	lastUpdate = Now;
 80012e6:	4bca      	ldr	r3, [pc, #808]	; (8001610 <calc_RollPitchYaw+0x608>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4aca      	ldr	r2, [pc, #808]	; (8001614 <calc_RollPitchYaw+0x60c>)
 80012ec:	6013      	str	r3, [r2, #0]


	sum += deltat;
 80012ee:	4bcc      	ldr	r3, [pc, #816]	; (8001620 <calc_RollPitchYaw+0x618>)
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	4bc9      	ldr	r3, [pc, #804]	; (800161c <calc_RollPitchYaw+0x614>)
 80012f6:	edd3 7a00 	vldr	s15, [r3]
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	4bc8      	ldr	r3, [pc, #800]	; (8001620 <calc_RollPitchYaw+0x618>)
 8001300:	edc3 7a00 	vstr	s15, [r3]
	sumCount++;
 8001304:	4bc7      	ldr	r3, [pc, #796]	; (8001624 <calc_RollPitchYaw+0x61c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	3301      	adds	r3, #1
 800130a:	4ac6      	ldr	r2, [pc, #792]	; (8001624 <calc_RollPitchYaw+0x61c>)
 800130c:	6013      	str	r3, [r2, #0]

	// Pass gyro rate as rad/s
	MahonyQuaternionUpdate(ax, ay, az, gx * PI / 180.0, gy * PI / 180.0, gz * PI / 180.0, my, mx, mz);
 800130e:	4bc6      	ldr	r3, [pc, #792]	; (8001628 <calc_RollPitchYaw+0x620>)
 8001310:	edd3 6a00 	vldr	s13, [r3]
 8001314:	4bc5      	ldr	r3, [pc, #788]	; (800162c <calc_RollPitchYaw+0x624>)
 8001316:	ed93 6a00 	vldr	s12, [r3]
 800131a:	4bc5      	ldr	r3, [pc, #788]	; (8001630 <calc_RollPitchYaw+0x628>)
 800131c:	edd3 5a00 	vldr	s11, [r3]
 8001320:	4bc4      	ldr	r3, [pc, #784]	; (8001634 <calc_RollPitchYaw+0x62c>)
 8001322:	edd3 7a00 	vldr	s15, [r3]
 8001326:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8001638 <calc_RollPitchYaw+0x630>
 800132a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800132e:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 800163c <calc_RollPitchYaw+0x634>
 8001332:	ee87 5a87 	vdiv.f32	s10, s15, s14
 8001336:	4bc2      	ldr	r3, [pc, #776]	; (8001640 <calc_RollPitchYaw+0x638>)
 8001338:	edd3 7a00 	vldr	s15, [r3]
 800133c:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8001638 <calc_RollPitchYaw+0x630>
 8001340:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001344:	ed9f 7abd 	vldr	s14, [pc, #756]	; 800163c <calc_RollPitchYaw+0x634>
 8001348:	eec7 4a87 	vdiv.f32	s9, s15, s14
 800134c:	4bbd      	ldr	r3, [pc, #756]	; (8001644 <calc_RollPitchYaw+0x63c>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8001638 <calc_RollPitchYaw+0x630>
 8001356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135a:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 800163c <calc_RollPitchYaw+0x634>
 800135e:	eec7 2a87 	vdiv.f32	s5, s15, s14
 8001362:	4bb9      	ldr	r3, [pc, #740]	; (8001648 <calc_RollPitchYaw+0x640>)
 8001364:	edd3 7a00 	vldr	s15, [r3]
 8001368:	4bb8      	ldr	r3, [pc, #736]	; (800164c <calc_RollPitchYaw+0x644>)
 800136a:	ed93 7a00 	vldr	s14, [r3]
 800136e:	4bb8      	ldr	r3, [pc, #736]	; (8001650 <calc_RollPitchYaw+0x648>)
 8001370:	ed93 4a00 	vldr	s8, [r3]
 8001374:	eef0 3a47 	vmov.f32	s7, s14
 8001378:	eeb0 3a67 	vmov.f32	s6, s15
 800137c:	eeb0 2a64 	vmov.f32	s4, s9
 8001380:	eef0 1a45 	vmov.f32	s3, s10
 8001384:	eeb0 1a65 	vmov.f32	s2, s11
 8001388:	eef0 0a46 	vmov.f32	s1, s12
 800138c:	eeb0 0a66 	vmov.f32	s0, s13
 8001390:	f001 f800 	bl	8002394 <MahonyQuaternionUpdate>
	// Roll is angle between sensor y-axis and Earth ground plane, y-axis up is positive roll.
	// These arise from the definition of the homogeneous rotation matrix constructed from quaternions.
	// Tait-Bryan angles as well as Euler angles are non-commutative; that is, the get the correct orientation the rotations must be
	// applied in the correct order which for this configuration is yaw, pitch, and then roll.
	// For more see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles which has additional links.
	*yaw = atan2(2.0 * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 8001394:	4baf      	ldr	r3, [pc, #700]	; (8001654 <calc_RollPitchYaw+0x64c>)
 8001396:	ed93 7a01 	vldr	s14, [r3, #4]
 800139a:	4bae      	ldr	r3, [pc, #696]	; (8001654 <calc_RollPitchYaw+0x64c>)
 800139c:	edd3 7a02 	vldr	s15, [r3, #8]
 80013a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a4:	4bab      	ldr	r3, [pc, #684]	; (8001654 <calc_RollPitchYaw+0x64c>)
 80013a6:	edd3 6a00 	vldr	s13, [r3]
 80013aa:	4baa      	ldr	r3, [pc, #680]	; (8001654 <calc_RollPitchYaw+0x64c>)
 80013ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80013b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	ee17 0a90 	vmov	r0, s15
 80013bc:	f7ff f8cc 	bl	8000558 <__aeabi_f2d>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	f7fe ff6a 	bl	800029c <__adddf3>
 80013c8:	4603      	mov	r3, r0
 80013ca:	460c      	mov	r4, r1
 80013cc:	ec44 3b18 	vmov	d8, r3, r4
 80013d0:	4ba0      	ldr	r3, [pc, #640]	; (8001654 <calc_RollPitchYaw+0x64c>)
 80013d2:	ed93 7a00 	vldr	s14, [r3]
 80013d6:	4b9f      	ldr	r3, [pc, #636]	; (8001654 <calc_RollPitchYaw+0x64c>)
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013e0:	4b9c      	ldr	r3, [pc, #624]	; (8001654 <calc_RollPitchYaw+0x64c>)
 80013e2:	edd3 6a01 	vldr	s13, [r3, #4]
 80013e6:	4b9b      	ldr	r3, [pc, #620]	; (8001654 <calc_RollPitchYaw+0x64c>)
 80013e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80013ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013f4:	4b97      	ldr	r3, [pc, #604]	; (8001654 <calc_RollPitchYaw+0x64c>)
 80013f6:	edd3 6a02 	vldr	s13, [r3, #8]
 80013fa:	4b96      	ldr	r3, [pc, #600]	; (8001654 <calc_RollPitchYaw+0x64c>)
 80013fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001400:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001404:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001408:	4b92      	ldr	r3, [pc, #584]	; (8001654 <calc_RollPitchYaw+0x64c>)
 800140a:	edd3 6a03 	vldr	s13, [r3, #12]
 800140e:	4b91      	ldr	r3, [pc, #580]	; (8001654 <calc_RollPitchYaw+0x64c>)
 8001410:	edd3 7a03 	vldr	s15, [r3, #12]
 8001414:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800141c:	ee17 0a90 	vmov	r0, s15
 8001420:	f7ff f89a 	bl	8000558 <__aeabi_f2d>
 8001424:	4603      	mov	r3, r0
 8001426:	460c      	mov	r4, r1
 8001428:	ec44 3b11 	vmov	d1, r3, r4
 800142c:	eeb0 0a48 	vmov.f32	s0, s16
 8001430:	eef0 0a68 	vmov.f32	s1, s17
 8001434:	f00c f8e0 	bl	800d5f8 <atan2>
 8001438:	ec54 3b10 	vmov	r3, r4, d0
 800143c:	4618      	mov	r0, r3
 800143e:	4621      	mov	r1, r4
 8001440:	f7ff fbba 	bl	8000bb8 <__aeabi_d2f>
 8001444:	4602      	mov	r2, r0
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	601a      	str	r2, [r3, #0]
	*pitch = -asin(2.0 * (q[1] * q[3] - q[0] * q[2]));
 800144a:	4b82      	ldr	r3, [pc, #520]	; (8001654 <calc_RollPitchYaw+0x64c>)
 800144c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001450:	4b80      	ldr	r3, [pc, #512]	; (8001654 <calc_RollPitchYaw+0x64c>)
 8001452:	edd3 7a03 	vldr	s15, [r3, #12]
 8001456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800145a:	4b7e      	ldr	r3, [pc, #504]	; (8001654 <calc_RollPitchYaw+0x64c>)
 800145c:	edd3 6a00 	vldr	s13, [r3]
 8001460:	4b7c      	ldr	r3, [pc, #496]	; (8001654 <calc_RollPitchYaw+0x64c>)
 8001462:	edd3 7a02 	vldr	s15, [r3, #8]
 8001466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800146e:	ee17 0a90 	vmov	r0, s15
 8001472:	f7ff f871 	bl	8000558 <__aeabi_f2d>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	f7fe ff0f 	bl	800029c <__adddf3>
 800147e:	4603      	mov	r3, r0
 8001480:	460c      	mov	r4, r1
 8001482:	ec44 3b17 	vmov	d7, r3, r4
 8001486:	eeb0 0a47 	vmov.f32	s0, s14
 800148a:	eef0 0a67 	vmov.f32	s1, s15
 800148e:	f00c f85b 	bl	800d548 <asin>
 8001492:	ec54 3b10 	vmov	r3, r4, d0
 8001496:	4618      	mov	r0, r3
 8001498:	4621      	mov	r1, r4
 800149a:	f7ff fb8d 	bl	8000bb8 <__aeabi_d2f>
 800149e:	4603      	mov	r3, r0
 80014a0:	ee07 3a90 	vmov	s15, r3
 80014a4:	eef1 7a67 	vneg.f32	s15, s15
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	edc3 7a00 	vstr	s15, [r3]
	*roll = atan2(2.0 * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 80014ae:	4b69      	ldr	r3, [pc, #420]	; (8001654 <calc_RollPitchYaw+0x64c>)
 80014b0:	ed93 7a00 	vldr	s14, [r3]
 80014b4:	4b67      	ldr	r3, [pc, #412]	; (8001654 <calc_RollPitchYaw+0x64c>)
 80014b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80014ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014be:	4b65      	ldr	r3, [pc, #404]	; (8001654 <calc_RollPitchYaw+0x64c>)
 80014c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80014c4:	4b63      	ldr	r3, [pc, #396]	; (8001654 <calc_RollPitchYaw+0x64c>)
 80014c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80014ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d2:	ee17 0a90 	vmov	r0, s15
 80014d6:	f7ff f83f 	bl	8000558 <__aeabi_f2d>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	f7fe fedd 	bl	800029c <__adddf3>
 80014e2:	4603      	mov	r3, r0
 80014e4:	460c      	mov	r4, r1
 80014e6:	ec44 3b18 	vmov	d8, r3, r4
 80014ea:	4b5a      	ldr	r3, [pc, #360]	; (8001654 <calc_RollPitchYaw+0x64c>)
 80014ec:	ed93 7a00 	vldr	s14, [r3]
 80014f0:	4b58      	ldr	r3, [pc, #352]	; (8001654 <calc_RollPitchYaw+0x64c>)
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014fa:	4b56      	ldr	r3, [pc, #344]	; (8001654 <calc_RollPitchYaw+0x64c>)
 80014fc:	edd3 6a01 	vldr	s13, [r3, #4]
 8001500:	4b54      	ldr	r3, [pc, #336]	; (8001654 <calc_RollPitchYaw+0x64c>)
 8001502:	edd3 7a01 	vldr	s15, [r3, #4]
 8001506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800150a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800150e:	4b51      	ldr	r3, [pc, #324]	; (8001654 <calc_RollPitchYaw+0x64c>)
 8001510:	edd3 6a02 	vldr	s13, [r3, #8]
 8001514:	4b4f      	ldr	r3, [pc, #316]	; (8001654 <calc_RollPitchYaw+0x64c>)
 8001516:	edd3 7a02 	vldr	s15, [r3, #8]
 800151a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800151e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001522:	4b4c      	ldr	r3, [pc, #304]	; (8001654 <calc_RollPitchYaw+0x64c>)
 8001524:	edd3 6a03 	vldr	s13, [r3, #12]
 8001528:	4b4a      	ldr	r3, [pc, #296]	; (8001654 <calc_RollPitchYaw+0x64c>)
 800152a:	edd3 7a03 	vldr	s15, [r3, #12]
 800152e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001536:	ee17 0a90 	vmov	r0, s15
 800153a:	f7ff f80d 	bl	8000558 <__aeabi_f2d>
 800153e:	4603      	mov	r3, r0
 8001540:	460c      	mov	r4, r1
 8001542:	ec44 3b11 	vmov	d1, r3, r4
 8001546:	eeb0 0a48 	vmov.f32	s0, s16
 800154a:	eef0 0a68 	vmov.f32	s1, s17
 800154e:	f00c f853 	bl	800d5f8 <atan2>
 8001552:	ec54 3b10 	vmov	r3, r4, d0
 8001556:	4618      	mov	r0, r3
 8001558:	4621      	mov	r1, r4
 800155a:	f7ff fb2d 	bl	8000bb8 <__aeabi_d2f>
 800155e:	4602      	mov	r2, r0
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	601a      	str	r2, [r3, #0]
	*pitch *= 180.0 / PI;
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe fff5 	bl	8000558 <__aeabi_f2d>
 800156e:	a324      	add	r3, pc, #144	; (adr r3, 8001600 <calc_RollPitchYaw+0x5f8>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff f848 	bl	8000608 <__aeabi_dmul>
 8001578:	4603      	mov	r3, r0
 800157a:	460c      	mov	r4, r1
 800157c:	4618      	mov	r0, r3
 800157e:	4621      	mov	r1, r4
 8001580:	f7ff fb1a 	bl	8000bb8 <__aeabi_d2f>
 8001584:	4602      	mov	r2, r0
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	601a      	str	r2, [r3, #0]
	*yaw *= 180.0 / PI;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ffe2 	bl	8000558 <__aeabi_f2d>
 8001594:	a31a      	add	r3, pc, #104	; (adr r3, 8001600 <calc_RollPitchYaw+0x5f8>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7ff f835 	bl	8000608 <__aeabi_dmul>
 800159e:	4603      	mov	r3, r0
 80015a0:	460c      	mov	r4, r1
 80015a2:	4618      	mov	r0, r3
 80015a4:	4621      	mov	r1, r4
 80015a6:	f7ff fb07 	bl	8000bb8 <__aeabi_d2f>
 80015aa:	4602      	mov	r2, r0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	601a      	str	r2, [r3, #0]
	*yaw -=  -1.1; // CHANGE-> (In Leeds, UK declination = -1.1) ... Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04 (+13.8)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ffcf 	bl	8000558 <__aeabi_f2d>
 80015ba:	a313      	add	r3, pc, #76	; (adr r3, 8001608 <calc_RollPitchYaw+0x600>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7fe fe6c 	bl	800029c <__adddf3>
 80015c4:	4603      	mov	r3, r0
 80015c6:	460c      	mov	r4, r1
 80015c8:	4618      	mov	r0, r3
 80015ca:	4621      	mov	r1, r4
 80015cc:	f7ff faf4 	bl	8000bb8 <__aeabi_d2f>
 80015d0:	4602      	mov	r2, r0
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	601a      	str	r2, [r3, #0]
	*roll *= 180.0 / PI;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ffbc 	bl	8000558 <__aeabi_f2d>
 80015e0:	a307      	add	r3, pc, #28	; (adr r3, 8001600 <calc_RollPitchYaw+0x5f8>)
 80015e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e6:	f7ff f80f 	bl	8000608 <__aeabi_dmul>
 80015ea:	4603      	mov	r3, r0
 80015ec:	460c      	mov	r4, r1
 80015ee:	4618      	mov	r0, r3
 80015f0:	4621      	mov	r1, r4
 80015f2:	f7ff fae1 	bl	8000bb8 <__aeabi_d2f>
 80015f6:	4602      	mov	r2, r0
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e02c      	b.n	8001658 <calc_RollPitchYaw+0x650>
 80015fe:	bf00      	nop
 8001600:	0d03cf26 	.word	0x0d03cf26
 8001604:	404ca5dc 	.word	0x404ca5dc
 8001608:	9999999a 	.word	0x9999999a
 800160c:	3ff19999 	.word	0x3ff19999
 8001610:	20000108 	.word	0x20000108
 8001614:	20000104 	.word	0x20000104
 8001618:	358637bd 	.word	0x358637bd
 800161c:	20000100 	.word	0x20000100
 8001620:	200000f4 	.word	0x200000f4
 8001624:	200000f8 	.word	0x200000f8
 8001628:	20004260 	.word	0x20004260
 800162c:	20004294 	.word	0x20004294
 8001630:	2000424c 	.word	0x2000424c
 8001634:	20004290 	.word	0x20004290
 8001638:	40490fdb 	.word	0x40490fdb
 800163c:	43340000 	.word	0x43340000
 8001640:	20004248 	.word	0x20004248
 8001644:	2000426c 	.word	0x2000426c
 8001648:	2000425c 	.word	0x2000425c
 800164c:	20004298 	.word	0x20004298
 8001650:	20004274 	.word	0x20004274
 8001654:	20000040 	.word	0x20000040

	sum = 0;
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <calc_RollPitchYaw+0x66c>)
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
	sumCount = 0;
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <calc_RollPitchYaw+0x670>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]

}
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	ecbd 8b02 	vpop	{d8}
 8001670:	bd90      	pop	{r4, r7, pc}
 8001672:	bf00      	nop
 8001674:	200000f4 	.word	0x200000f4
 8001678:	200000f8 	.word	0x200000f8

0800167c <writeByte>:

//===================================================================================================================
//====== Set of useful function to access acceleration, gyroscope, and temperature data
//===================================================================================================================

void writeByte(uint8_t address_tx, uint8_t subAddress, uint8_t data) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af02      	add	r7, sp, #8
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
 8001686:	460b      	mov	r3, r1
 8001688:	71bb      	strb	r3, [r7, #6]
 800168a:	4613      	mov	r3, r2
 800168c:	717b      	strb	r3, [r7, #5]
	uint8_t data_write[2];
	data_write[0] = subAddress;
 800168e:	79bb      	ldrb	r3, [r7, #6]
 8001690:	733b      	strb	r3, [r7, #12]
	data_write[1] = data;
 8001692:	797b      	ldrb	r3, [r7, #5]
 8001694:	737b      	strb	r3, [r7, #13]
	//i2c.write(address, data_write, 2, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	b299      	uxth	r1, r3
 800169a:	f107 020c 	add.w	r2, r7, #12
 800169e:	230a      	movs	r3, #10
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2302      	movs	r3, #2
 80016a4:	4803      	ldr	r0, [pc, #12]	; (80016b4 <writeByte+0x38>)
 80016a6:	f003 fc27 	bl	8004ef8 <HAL_I2C_Master_Transmit>
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200041f4 	.word	0x200041f4

080016b8 <readByte>:

//NICK - I've changed these to accept a tx address & a rx address as STM32 boards include the R/W bit at the end of 7 bit adress
//so HAL function takes in 8 bit address including R/W bit
char readByte(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af02      	add	r7, sp, #8
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
 80016c2:	460b      	mov	r3, r1
 80016c4:	71bb      	strb	r3, [r7, #6]
 80016c6:	4613      	mov	r3, r2
 80016c8:	717b      	strb	r3, [r7, #5]
	uint8_t data[1]; // `data` will store the register data
	uint8_t data_write[1];
	data_write[0] = subAddress;
 80016ca:	797b      	ldrb	r3, [r7, #5]
 80016cc:	723b      	strb	r3, [r7, #8]
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, 1, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10); //Send adress of register ONLY
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	b299      	uxth	r1, r3
 80016d2:	f107 0208 	add.w	r2, r7, #8
 80016d6:	230a      	movs	r3, #10
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2301      	movs	r3, #1
 80016dc:	4808      	ldr	r0, [pc, #32]	; (8001700 <readByte+0x48>)
 80016de:	f003 fc0b 	bl	8004ef8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_tx, data, 1, 10);
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	b299      	uxth	r1, r3
 80016e6:	f107 020c 	add.w	r2, r7, #12
 80016ea:	230a      	movs	r3, #10
 80016ec:	9300      	str	r3, [sp, #0]
 80016ee:	2301      	movs	r3, #1
 80016f0:	4803      	ldr	r0, [pc, #12]	; (8001700 <readByte+0x48>)
 80016f2:	f003 fcff 	bl	80050f4 <HAL_I2C_Master_Receive>

	return data[0];
 80016f6:	7b3b      	ldrb	r3, [r7, #12]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200041f4 	.word	0x200041f4

08001704 <readBytes>:

void readBytes(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress,
	uint8_t count, uint8_t * dest) {
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b08b      	sub	sp, #44	; 0x2c
 8001708:	af02      	add	r7, sp, #8
 800170a:	4604      	mov	r4, r0
 800170c:	4608      	mov	r0, r1
 800170e:	4611      	mov	r1, r2
 8001710:	461a      	mov	r2, r3
 8001712:	4623      	mov	r3, r4
 8001714:	71fb      	strb	r3, [r7, #7]
 8001716:	4603      	mov	r3, r0
 8001718:	71bb      	strb	r3, [r7, #6]
 800171a:	460b      	mov	r3, r1
 800171c:	717b      	strb	r3, [r7, #5]
 800171e:	4613      	mov	r3, r2
 8001720:	713b      	strb	r3, [r7, #4]
	uint8_t data[14];
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8001722:	797b      	ldrb	r3, [r7, #5]
 8001724:	723b      	strb	r3, [r7, #8]
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, count, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 1, 10);
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	b299      	uxth	r1, r3
 800172a:	f107 0208 	add.w	r2, r7, #8
 800172e:	230a      	movs	r3, #10
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2301      	movs	r3, #1
 8001734:	4812      	ldr	r0, [pc, #72]	; (8001780 <readBytes+0x7c>)
 8001736:	f003 fbdf 	bl	8004ef8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, address_rx, data, count, 10);
 800173a:	79bb      	ldrb	r3, [r7, #6]
 800173c:	b299      	uxth	r1, r3
 800173e:	793b      	ldrb	r3, [r7, #4]
 8001740:	b298      	uxth	r0, r3
 8001742:	f107 020c 	add.w	r2, r7, #12
 8001746:	230a      	movs	r3, #10
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	4603      	mov	r3, r0
 800174c:	480c      	ldr	r0, [pc, #48]	; (8001780 <readBytes+0x7c>)
 800174e:	f003 fcd1 	bl	80050f4 <HAL_I2C_Master_Receive>

	for (int ii = 0; ii < count; ii++) {
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
 8001756:	e00b      	b.n	8001770 <readBytes+0x6c>
		dest[ii] = data[ii];
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800175c:	4413      	add	r3, r2
 800175e:	f107 010c 	add.w	r1, r7, #12
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	440a      	add	r2, r1
 8001766:	7812      	ldrb	r2, [r2, #0]
 8001768:	701a      	strb	r2, [r3, #0]
	for (int ii = 0; ii < count; ii++) {
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3301      	adds	r3, #1
 800176e:	61fb      	str	r3, [r7, #28]
 8001770:	793b      	ldrb	r3, [r7, #4]
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	429a      	cmp	r2, r3
 8001776:	dbef      	blt.n	8001758 <readBytes+0x54>
	}
}
 8001778:	bf00      	nop
 800177a:	3724      	adds	r7, #36	; 0x24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd90      	pop	{r4, r7, pc}
 8001780:	200041f4 	.word	0x200041f4

08001784 <getMres>:

void getMres() {
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

	switch (Mscale) {
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <getMres+0x2c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <getMres+0x12>
 8001790:	2b01      	cmp	r3, #1
 8001792:	d004      	beq.n	800179e <getMres+0x1a>
		break;
	case MFS_16BITS:
		mRes = 10.0 * 4219.0 / 32760.0; // Proper scale to return milliGauss
		break;
	}
}
 8001794:	e007      	b.n	80017a6 <getMres+0x22>
		mRes = 10.0 * 4219.0 / 8190.0; // Proper scale to return milliGauss
 8001796:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <getMres+0x30>)
 8001798:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <getMres+0x34>)
 800179a:	601a      	str	r2, [r3, #0]
		break;
 800179c:	e003      	b.n	80017a6 <getMres+0x22>
		mRes = 10.0 * 4219.0 / 32760.0; // Proper scale to return milliGauss
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <getMres+0x30>)
 80017a0:	4a06      	ldr	r2, [pc, #24]	; (80017bc <getMres+0x38>)
 80017a2:	601a      	str	r2, [r3, #0]
		break;
 80017a4:	bf00      	nop
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	20000000 	.word	0x20000000
 80017b4:	2000428c 	.word	0x2000428c
 80017b8:	40a4d84e 	.word	0x40a4d84e
 80017bc:	3fa4d84e 	.word	0x3fa4d84e

080017c0 <getGres>:

void getGres() {
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
	switch (Gscale) {
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <getGres+0x50>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d81b      	bhi.n	8001804 <getGres+0x44>
 80017cc:	a201      	add	r2, pc, #4	; (adr r2, 80017d4 <getGres+0x14>)
 80017ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d2:	bf00      	nop
 80017d4:	080017e5 	.word	0x080017e5
 80017d8:	080017ed 	.word	0x080017ed
 80017dc:	080017f5 	.word	0x080017f5
 80017e0:	080017fd 	.word	0x080017fd
	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case GFS_250DPS:
		gRes = 250.0 / 32768.0;
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <getGres+0x54>)
 80017e6:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <getGres+0x58>)
 80017e8:	601a      	str	r2, [r3, #0]
		break;
 80017ea:	e00b      	b.n	8001804 <getGres+0x44>
	case GFS_500DPS:
		gRes = 500.0 / 32768.0;
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <getGres+0x54>)
 80017ee:	4a0b      	ldr	r2, [pc, #44]	; (800181c <getGres+0x5c>)
 80017f0:	601a      	str	r2, [r3, #0]
		break;
 80017f2:	e007      	b.n	8001804 <getGres+0x44>
	case GFS_1000DPS:
		gRes = 1000.0 / 32768.0;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <getGres+0x54>)
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <getGres+0x60>)
 80017f8:	601a      	str	r2, [r3, #0]
		break;
 80017fa:	e003      	b.n	8001804 <getGres+0x44>
	case GFS_2000DPS:
		gRes = 2000.0 / 32768.0;
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <getGres+0x54>)
 80017fe:	4a09      	ldr	r2, [pc, #36]	; (8001824 <getGres+0x64>)
 8001800:	601a      	str	r2, [r3, #0]
		break;
 8001802:	bf00      	nop
	}
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	200000fd 	.word	0x200000fd
 8001814:	20004270 	.word	0x20004270
 8001818:	3bfa0000 	.word	0x3bfa0000
 800181c:	3c7a0000 	.word	0x3c7a0000
 8001820:	3cfa0000 	.word	0x3cfa0000
 8001824:	3d7a0000 	.word	0x3d7a0000

08001828 <getAres>:

void getAres() {
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
	switch (Ascale) {
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <getAres+0x58>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d81f      	bhi.n	8001874 <getAres+0x4c>
 8001834:	a201      	add	r2, pc, #4	; (adr r2, 800183c <getAres+0x14>)
 8001836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183a:	bf00      	nop
 800183c:	0800184d 	.word	0x0800184d
 8001840:	08001857 	.word	0x08001857
 8001844:	08001861 	.word	0x08001861
 8001848:	0800186b 	.word	0x0800186b
	// Possible accelerometer scales (and their register bit settings) are:
	// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case AFS_2G:
		aRes = 2.0 / 32768.0;
 800184c:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <getAres+0x5c>)
 800184e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001852:	601a      	str	r2, [r3, #0]
		break;
 8001854:	e00e      	b.n	8001874 <getAres+0x4c>
	case AFS_4G:
		aRes = 4.0 / 32768.0;
 8001856:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <getAres+0x5c>)
 8001858:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800185c:	601a      	str	r2, [r3, #0]
		break;
 800185e:	e009      	b.n	8001874 <getAres+0x4c>
	case AFS_8G:
		aRes = 8.0 / 32768.0;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <getAres+0x5c>)
 8001862:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001866:	601a      	str	r2, [r3, #0]
		break;
 8001868:	e004      	b.n	8001874 <getAres+0x4c>
	case AFS_16G:
		aRes = 16.0 / 32768.0;
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <getAres+0x5c>)
 800186c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001870:	601a      	str	r2, [r3, #0]
		break;
 8001872:	bf00      	nop
	}
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	200000fc 	.word	0x200000fc
 8001884:	20004264 	.word	0x20004264

08001888 <readAccelData>:

void readAccelData(int16_t * destination) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af02      	add	r7, sp, #8
 800188e:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];  // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 8001890:	f107 0308 	add.w	r3, r7, #8
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2306      	movs	r3, #6
 8001898:	223b      	movs	r2, #59	; 0x3b
 800189a:	21d1      	movs	r1, #209	; 0xd1
 800189c:	20d0      	movs	r0, #208	; 0xd0
 800189e:	f7ff ff31 	bl	8001704 <readBytes>
			&rawData[0]); // Read the six raw data registers into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80018a2:	7a3b      	ldrb	r3, [r7, #8]
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	b21a      	sxth	r2, r3
 80018a8:	7a7b      	ldrb	r3, [r7, #9]
 80018aa:	b21b      	sxth	r3, r3
 80018ac:	4313      	orrs	r3, r2
 80018ae:	b21a      	sxth	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	801a      	strh	r2, [r3, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80018b4:	7abb      	ldrb	r3, [r7, #10]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	b219      	sxth	r1, r3
 80018ba:	7afb      	ldrb	r3, [r7, #11]
 80018bc:	b21a      	sxth	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3302      	adds	r3, #2
 80018c2:	430a      	orrs	r2, r1
 80018c4:	b212      	sxth	r2, r2
 80018c6:	801a      	strh	r2, [r3, #0]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80018c8:	7b3b      	ldrb	r3, [r7, #12]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	b219      	sxth	r1, r3
 80018ce:	7b7b      	ldrb	r3, [r7, #13]
 80018d0:	b21a      	sxth	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3304      	adds	r3, #4
 80018d6:	430a      	orrs	r2, r1
 80018d8:	b212      	sxth	r2, r2
 80018da:	801a      	strh	r2, [r3, #0]
}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <readGyroData>:

void readGyroData(int16_t * destination) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 80018ec:	f107 0308 	add.w	r3, r7, #8
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	2306      	movs	r3, #6
 80018f4:	2243      	movs	r2, #67	; 0x43
 80018f6:	21d1      	movs	r1, #209	; 0xd1
 80018f8:	20d0      	movs	r0, #208	; 0xd0
 80018fa:	f7ff ff03 	bl	8001704 <readBytes>
			&rawData[0]); // Read the six raw data registers sequentially into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80018fe:	7a3b      	ldrb	r3, [r7, #8]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	b21a      	sxth	r2, r3
 8001904:	7a7b      	ldrb	r3, [r7, #9]
 8001906:	b21b      	sxth	r3, r3
 8001908:	4313      	orrs	r3, r2
 800190a:	b21a      	sxth	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	801a      	strh	r2, [r3, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001910:	7abb      	ldrb	r3, [r7, #10]
 8001912:	021b      	lsls	r3, r3, #8
 8001914:	b219      	sxth	r1, r3
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	b21a      	sxth	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3302      	adds	r3, #2
 800191e:	430a      	orrs	r2, r1
 8001920:	b212      	sxth	r2, r2
 8001922:	801a      	strh	r2, [r3, #0]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001924:	7b3b      	ldrb	r3, [r7, #12]
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	b219      	sxth	r1, r3
 800192a:	7b7b      	ldrb	r3, [r7, #13]
 800192c:	b21a      	sxth	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3304      	adds	r3, #4
 8001932:	430a      	orrs	r2, r1
 8001934:	b212      	sxth	r2, r2
 8001936:	801a      	strh	r2, [r3, #0]
}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <readMagData>:

void readMagData(int16_t * destination) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af02      	add	r7, sp, #8
 8001946:	6078      	str	r0, [r7, #4]
	uint8_t rawData[7]; // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if (readByte(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
 8001948:	2202      	movs	r2, #2
 800194a:	2119      	movs	r1, #25
 800194c:	2018      	movs	r0, #24
 800194e:	f7ff feb3 	bl	80016b8 <readByte>
 8001952:	4603      	mov	r3, r0
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d02c      	beq.n	80019b6 <readMagData+0x76>

		readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_XOUT_L, 7, &rawData[0]); // Read the six raw data and ST2 registers sequentially into data array
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2307      	movs	r3, #7
 8001964:	2203      	movs	r2, #3
 8001966:	2119      	movs	r1, #25
 8001968:	2018      	movs	r0, #24
 800196a:	f7ff fecb 	bl	8001704 <readBytes>
		uint8_t c = rawData[6]; // End data read by reading ST2 register
 800196e:	7bbb      	ldrb	r3, [r7, #14]
 8001970:	73fb      	strb	r3, [r7, #15]
		if (!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d11c      	bne.n	80019b6 <readMagData+0x76>
			destination[0] =
					(int16_t) (((int16_t) rawData[1] << 8) | rawData[0]); // Turn the MSB and LSB into a signed 16-bit value
 800197c:	7a7b      	ldrb	r3, [r7, #9]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	b21a      	sxth	r2, r3
 8001982:	7a3b      	ldrb	r3, [r7, #8]
 8001984:	b21b      	sxth	r3, r3
 8001986:	4313      	orrs	r3, r2
 8001988:	b21a      	sxth	r2, r3
			destination[0] =
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	801a      	strh	r2, [r3, #0]
			destination[1] =
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
 800198e:	7afb      	ldrb	r3, [r7, #11]
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	b219      	sxth	r1, r3
 8001994:	7abb      	ldrb	r3, [r7, #10]
 8001996:	b21a      	sxth	r2, r3
			destination[1] =
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3302      	adds	r3, #2
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
 800199c:	430a      	orrs	r2, r1
 800199e:	b212      	sxth	r2, r2
			destination[1] =
 80019a0:	801a      	strh	r2, [r3, #0]
			destination[2] =
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
 80019a2:	7b7b      	ldrb	r3, [r7, #13]
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	b219      	sxth	r1, r3
 80019a8:	7b3b      	ldrb	r3, [r7, #12]
 80019aa:	b21a      	sxth	r2, r3
			destination[2] =
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3304      	adds	r3, #4
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
 80019b0:	430a      	orrs	r2, r1
 80019b2:	b212      	sxth	r2, r2
			destination[2] =
 80019b4:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <resetMPU9250>:
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, TEMP_OUT_H, 2,
			&rawData[0]); // Read the two raw data registers sequentially into data array
	return (int16_t) (((int16_t) rawData[0]) << 8 | rawData[1]); // Turn the MSB and LSB into a 16-bit value
}

void resetMPU9250() {
 80019be:	b580      	push	{r7, lr}
 80019c0:	af00      	add	r7, sp, #0
	// reset device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80019c2:	2280      	movs	r2, #128	; 0x80
 80019c4:	216b      	movs	r1, #107	; 0x6b
 80019c6:	20d0      	movs	r0, #208	; 0xd0
 80019c8:	f7ff fe58 	bl	800167c <writeByte>
	HAL_Delay(100);
 80019cc:	2064      	movs	r0, #100	; 0x64
 80019ce:	f002 f9bb 	bl	8003d48 <HAL_Delay>
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <initAK8963>:

void initAK8963(float * destination) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af02      	add	r7, sp, #8
 80019de:	6078      	str	r0, [r7, #4]
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 80019e0:	2200      	movs	r2, #0
 80019e2:	210a      	movs	r1, #10
 80019e4:	2018      	movs	r0, #24
 80019e6:	f7ff fe49 	bl	800167c <writeByte>
	HAL_Delay(10);
 80019ea:	200a      	movs	r0, #10
 80019ec:	f002 f9ac 	bl	8003d48 <HAL_Delay>
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 80019f0:	220f      	movs	r2, #15
 80019f2:	210a      	movs	r1, #10
 80019f4:	2018      	movs	r0, #24
 80019f6:	f7ff fe41 	bl	800167c <writeByte>
	HAL_Delay(10);
 80019fa:	200a      	movs	r0, #10
 80019fc:	f002 f9a4 	bl	8003d48 <HAL_Delay>
	readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ASAX, 3,
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	2303      	movs	r3, #3
 8001a08:	2210      	movs	r2, #16
 8001a0a:	2119      	movs	r1, #25
 8001a0c:	2018      	movs	r0, #24
 8001a0e:	f7ff fe79 	bl	8001704 <readBytes>
			&rawData[0]);  // Read the x-, y-, and z-axis calibration values
	destination[0] = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 8001a12:	7b3b      	ldrb	r3, [r7, #12]
 8001a14:	3b80      	subs	r3, #128	; 0x80
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a1e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001ab8 <initAK8963+0xe0>
 8001a22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	edc3 7a00 	vstr	s15, [r3]
	destination[1] = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8001a34:	7b7b      	ldrb	r3, [r7, #13]
 8001a36:	3b80      	subs	r3, #128	; 0x80
 8001a38:	ee07 3a90 	vmov	s15, r3
 8001a3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a40:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001ab8 <initAK8963+0xe0>
 8001a44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a54:	edc3 7a00 	vstr	s15, [r3]
	destination[2] = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 8001a58:	7bbb      	ldrb	r3, [r7, #14]
 8001a5a:	3b80      	subs	r3, #128	; 0x80
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a64:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001ab8 <initAK8963+0xe0>
 8001a68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3308      	adds	r3, #8
 8001a70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a78:	edc3 7a00 	vstr	s15, [r3]
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	210a      	movs	r1, #10
 8001a80:	2018      	movs	r0, #24
 8001a82:	f7ff fdfb 	bl	800167c <writeByte>
	HAL_Delay(10);
 8001a86:	200a      	movs	r0, #10
 8001a88:	f002 f95e 	bl	8003d48 <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <initAK8963+0xe4>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	b25a      	sxtb	r2, r3
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <initAK8963+0xe8>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b25b      	sxtb	r3, r3
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b25b      	sxtb	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	210a      	movs	r1, #10
 8001aa4:	2018      	movs	r0, #24
 8001aa6:	f7ff fde9 	bl	800167c <writeByte>
	HAL_Delay(10);
 8001aaa:	200a      	movs	r0, #10
 8001aac:	f002 f94c 	bl	8003d48 <HAL_Delay>
}
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	43800000 	.word	0x43800000
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	20000001 	.word	0x20000001

08001ac4 <initMPU9250>:
	    dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
	    dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];

}

void initMPU9250() {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
	// Initialize MPU9250 device
	// wake up device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 8001aca:	2200      	movs	r2, #0
 8001acc:	216b      	movs	r1, #107	; 0x6b
 8001ace:	20d0      	movs	r0, #208	; 0xd0
 8001ad0:	f7ff fdd4 	bl	800167c <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8001ad4:	2064      	movs	r0, #100	; 0x64
 8001ad6:	f002 f937 	bl	8003d48 <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01); // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8001ada:	2201      	movs	r2, #1
 8001adc:	216b      	movs	r1, #107	; 0x6b
 8001ade:	20d0      	movs	r0, #208	; 0xd0
 8001ae0:	f7ff fdcc 	bl	800167c <writeByte>

	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	// DLPF_CFG = bits 2:0 = 010 = 0x03; this sets the sample rate at 1 kHz for both
	// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x00);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	211a      	movs	r1, #26
 8001ae8:	20d0      	movs	r0, #208	; 0xd0
 8001aea:	f7ff fdc7 	bl	800167c <writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Use a 200 Hz rate; the same rate set in CONFIG above
 8001aee:	2200      	movs	r2, #0
 8001af0:	2119      	movs	r1, #25
 8001af2:	20d0      	movs	r0, #208	; 0xd0
 8001af4:	f7ff fdc2 	bl	800167c <writeByte>

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX,
 8001af8:	221b      	movs	r2, #27
 8001afa:	21d1      	movs	r1, #209	; 0xd1
 8001afc:	20d1      	movs	r0, #209	; 0xd1
 8001afe:	f7ff fddb 	bl	80016b8 <readByte>
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
	GYRO_CONFIG);
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	211b      	movs	r1, #27
 8001b12:	20d0      	movs	r0, #208	; 0xd0
 8001b14:	f7ff fdb2 	bl	800167c <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	f023 0318 	bic.w	r3, r3, #24
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	211b      	movs	r1, #27
 8001b24:	20d0      	movs	r0, #208	; 0xd0
 8001b26:	f7ff fda9 	bl	800167c <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro
 8001b2a:	4b2e      	ldr	r3, [pc, #184]	; (8001be4 <initMPU9250+0x120>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	b25a      	sxtb	r2, r3
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	211b      	movs	r1, #27
 8001b40:	20d0      	movs	r0, #208	; 0xd0
 8001b42:	f7ff fd9b 	bl	800167c <writeByte>

	// Set accelerometer configuration
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG);
 8001b46:	221c      	movs	r2, #28
 8001b48:	21d1      	movs	r1, #209	; 0xd1
 8001b4a:	20d1      	movs	r0, #209	; 0xd1
 8001b4c:	f7ff fdb4 	bl	80016b8 <readByte>
 8001b50:	4603      	mov	r3, r0
 8001b52:	71fb      	strb	r3, [r7, #7]
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	211c      	movs	r1, #28
 8001b60:	20d0      	movs	r0, #208	; 0xd0
 8001b62:	f7ff fd8b 	bl	800167c <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	f023 0318 	bic.w	r3, r3, #24
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	211c      	movs	r1, #28
 8001b72:	20d0      	movs	r0, #208	; 0xd0
 8001b74:	f7ff fd82 	bl	800167c <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <initMPU9250+0x124>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	b25a      	sxtb	r2, r3
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	b25b      	sxtb	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	211c      	movs	r1, #28
 8001b8e:	20d0      	movs	r0, #208	; 0xd0
 8001b90:	f7ff fd74 	bl	800167c <writeByte>

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG2);
 8001b94:	221d      	movs	r2, #29
 8001b96:	21d1      	movs	r1, #209	; 0xd1
 8001b98:	20d1      	movs	r0, #209	; 0xd1
 8001b9a:	f7ff fd8d 	bl	80016b8 <readByte>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	f023 030f 	bic.w	r3, r3, #15
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	211d      	movs	r1, #29
 8001bae:	20d0      	movs	r0, #208	; 0xd0
 8001bb0:	f7ff fd64 	bl	800167c <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c | 0x03); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f043 0303 	orr.w	r3, r3, #3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	211d      	movs	r1, #29
 8001bc0:	20d0      	movs	r0, #208	; 0xd0
 8001bc2:	f7ff fd5b 	bl	800167c <writeByte>
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	writeByte(MPU9250_ADDRESS_TX, INT_PIN_CFG, 0x22);
 8001bc6:	2222      	movs	r2, #34	; 0x22
 8001bc8:	2137      	movs	r1, #55	; 0x37
 8001bca:	20d0      	movs	r0, #208	; 0xd0
 8001bcc:	f7ff fd56 	bl	800167c <writeByte>
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2138      	movs	r1, #56	; 0x38
 8001bd4:	20d0      	movs	r0, #208	; 0xd0
 8001bd6:	f7ff fd51 	bl	800167c <writeByte>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200000fd 	.word	0x200000fd
 8001be8:	200000fc 	.word	0x200000fc
 8001bec:	00000000 	.word	0x00000000

08001bf0 <MPU9250SelfTest>:
	dest2[2] = (float) accel_bias[2] / (float) accelsensitivity;
}

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
		{
 8001bf0:	b5b0      	push	{r4, r5, r7, lr}
 8001bf2:	b09c      	sub	sp, #112	; 0x70
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6] = { 0, 0, 0, 0, 0, 0 };
 8001bf8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	809a      	strh	r2, [r3, #4]
	uint8_t selfTest[6];
	int16_t gAvg[3], aAvg[3], aSTAvg[3], gSTAvg[3];
	float factoryTrim[6];
	uint8_t FS = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2119      	movs	r1, #25
 8001c0c:	20d0      	movs	r0, #208	; 0xd0
 8001c0e:	f7ff fd35 	bl	800167c <writeByte>
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8001c12:	2202      	movs	r2, #2
 8001c14:	211a      	movs	r1, #26
 8001c16:	20d0      	movs	r0, #208	; 0xd0
 8001c18:	f7ff fd30 	bl	800167c <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 1 << FS); // Set full scale range for the gyro to 250 dps
 8001c1c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001c20:	2201      	movs	r2, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	461a      	mov	r2, r3
 8001c2a:	211b      	movs	r1, #27
 8001c2c:	20d0      	movs	r0, #208	; 0xd0
 8001c2e:	f7ff fd25 	bl	800167c <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 8001c32:	2202      	movs	r2, #2
 8001c34:	211d      	movs	r1, #29
 8001c36:	20d0      	movs	r0, #208	; 0xd0
 8001c38:	f7ff fd20 	bl	800167c <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 1 << FS); // Set full scale range for the accelerometer to 2 g
 8001c3c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001c40:	2201      	movs	r2, #1
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	461a      	mov	r2, r3
 8001c4a:	211c      	movs	r1, #28
 8001c4c:	20d0      	movs	r0, #208	; 0xd0
 8001c4e:	f7ff fd15 	bl	800167c <writeByte>

	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 8001c52:	2300      	movs	r3, #0
 8001c54:	667b      	str	r3, [r7, #100]	; 0x64
 8001c56:	e07b      	b.n	8001d50 <MPU9250SelfTest+0x160>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 8001c58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2306      	movs	r3, #6
 8001c60:	223b      	movs	r2, #59	; 0x3b
 8001c62:	21d1      	movs	r1, #209	; 0xd1
 8001c64:	20d0      	movs	r0, #208	; 0xd0
 8001c66:	f7ff fd4d 	bl	8001704 <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001c6a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	b219      	sxth	r1, r3
 8001c78:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	430b      	orrs	r3, r1
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	b21b      	sxth	r3, r3
 8001c8a:	86bb      	strh	r3, [r7, #52]	; 0x34
		aAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001c8c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	b219      	sxth	r1, r3
 8001c9a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	86fb      	strh	r3, [r7, #54]	; 0x36
		aAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001cae:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	b219      	sxth	r1, r3
 8001cbc:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001cc0:	b21b      	sxth	r3, r3
 8001cc2:	430b      	orrs	r3, r1
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	873b      	strh	r3, [r7, #56]	; 0x38

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 8001cd0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2306      	movs	r3, #6
 8001cd8:	2243      	movs	r2, #67	; 0x43
 8001cda:	21d1      	movs	r1, #209	; 0xd1
 8001cdc:	20d0      	movs	r0, #208	; 0xd0
 8001cde:	f7ff fd11 	bl	8001704 <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001ce2:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	b219      	sxth	r1, r3
 8001cf0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cf4:	b21b      	sxth	r3, r3
 8001cf6:	430b      	orrs	r3, r1
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	87bb      	strh	r3, [r7, #60]	; 0x3c
		gAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001d04:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	b219      	sxth	r1, r3
 8001d12:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	430b      	orrs	r3, r1
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	4413      	add	r3, r2
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	b21b      	sxth	r3, r3
 8001d24:	87fb      	strh	r3, [r7, #62]	; 0x3e
		gAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001d26:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	b219      	sxth	r1, r3
 8001d34:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	430b      	orrs	r3, r1
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 8001d4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	667b      	str	r3, [r7, #100]	; 0x64
 8001d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d52:	2bc7      	cmp	r3, #199	; 0xc7
 8001d54:	dd80      	ble.n	8001c58 <MPU9250SelfTest+0x68>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8001d56:	2300      	movs	r3, #0
 8001d58:	663b      	str	r3, [r7, #96]	; 0x60
 8001d5a:	e02c      	b.n	8001db6 <MPU9250SelfTest+0x1c6>
		aAvg[ii] /= 200;
 8001d5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001d64:	4413      	add	r3, r2
 8001d66:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8001d6a:	4a5d      	ldr	r2, [pc, #372]	; (8001ee0 <MPU9250SelfTest+0x2f0>)
 8001d6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d70:	1192      	asrs	r2, r2, #6
 8001d72:	17db      	asrs	r3, r3, #31
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	b21a      	sxth	r2, r3
 8001d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001d80:	440b      	add	r3, r1
 8001d82:	f823 2c34 	strh.w	r2, [r3, #-52]
		gAvg[ii] /= 200;
 8001d86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001d8e:	4413      	add	r3, r2
 8001d90:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8001d94:	4a52      	ldr	r2, [pc, #328]	; (8001ee0 <MPU9250SelfTest+0x2f0>)
 8001d96:	fb82 1203 	smull	r1, r2, r2, r3
 8001d9a:	1192      	asrs	r2, r2, #6
 8001d9c:	17db      	asrs	r3, r3, #31
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	b21a      	sxth	r2, r3
 8001da2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001daa:	440b      	add	r3, r1
 8001dac:	f823 2c2c 	strh.w	r2, [r3, #-44]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8001db0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001db2:	3301      	adds	r3, #1
 8001db4:	663b      	str	r3, [r7, #96]	; 0x60
 8001db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	ddcf      	ble.n	8001d5c <MPU9250SelfTest+0x16c>
	}

	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 8001dbc:	22e0      	movs	r2, #224	; 0xe0
 8001dbe:	211c      	movs	r1, #28
 8001dc0:	20d0      	movs	r0, #208	; 0xd0
 8001dc2:	f7ff fc5b 	bl	800167c <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 8001dc6:	22e0      	movs	r2, #224	; 0xe0
 8001dc8:	211b      	movs	r1, #27
 8001dca:	20d0      	movs	r0, #208	; 0xd0
 8001dcc:	f7ff fc56 	bl	800167c <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 8001dd0:	2019      	movs	r0, #25
 8001dd2:	f001 ffb9 	bl	8003d48 <HAL_Delay>

	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dda:	e07a      	b.n	8001ed2 <MPU9250SelfTest+0x2e2>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 8001ddc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2306      	movs	r3, #6
 8001de4:	223b      	movs	r2, #59	; 0x3b
 8001de6:	21d1      	movs	r1, #209	; 0xd1
 8001de8:	20d0      	movs	r0, #208	; 0xd0
 8001dea:	f7ff fc8b 	bl	8001704 <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001dee:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	b219      	sxth	r1, r3
 8001dfc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e00:	b21b      	sxth	r3, r3
 8001e02:	430b      	orrs	r3, r1
 8001e04:	b21b      	sxth	r3, r3
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	4413      	add	r3, r2
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	b21b      	sxth	r3, r3
 8001e0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
		aSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001e10:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	b219      	sxth	r1, r3
 8001e1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e22:	b21b      	sxth	r3, r3
 8001e24:	430b      	orrs	r3, r1
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	b21b      	sxth	r3, r3
 8001e30:	85fb      	strh	r3, [r7, #46]	; 0x2e
		aSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001e32:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001e3c:	021b      	lsls	r3, r3, #8
 8001e3e:	b219      	sxth	r1, r3
 8001e40:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001e44:	b21b      	sxth	r3, r3
 8001e46:	430b      	orrs	r3, r1
 8001e48:	b21b      	sxth	r3, r3
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	b21b      	sxth	r3, r3
 8001e52:	863b      	strh	r3, [r7, #48]	; 0x30

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 8001e54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	2306      	movs	r3, #6
 8001e5c:	2243      	movs	r2, #67	; 0x43
 8001e5e:	21d1      	movs	r1, #209	; 0xd1
 8001e60:	20d0      	movs	r0, #208	; 0xd0
 8001e62:	f7ff fc4f 	bl	8001704 <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001e66:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	b219      	sxth	r1, r3
 8001e74:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	430b      	orrs	r3, r1
 8001e7c:	b21b      	sxth	r3, r3
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	4413      	add	r3, r2
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	b21b      	sxth	r3, r3
 8001e86:	84bb      	strh	r3, [r7, #36]	; 0x24
		gSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001e88:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001e92:	021b      	lsls	r3, r3, #8
 8001e94:	b219      	sxth	r1, r3
 8001e96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001e9a:	b21b      	sxth	r3, r3
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	b21b      	sxth	r3, r3
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	b21b      	sxth	r3, r3
 8001ea8:	84fb      	strh	r3, [r7, #38]	; 0x26
		gSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001eaa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	b219      	sxth	r1, r3
 8001eb8:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	430b      	orrs	r3, r1
 8001ec0:	b21b      	sxth	r3, r3
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	b21b      	sxth	r3, r3
 8001eca:	853b      	strh	r3, [r7, #40]	; 0x28
	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8001ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ece:	3301      	adds	r3, #1
 8001ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ed4:	2bc7      	cmp	r3, #199	; 0xc7
 8001ed6:	dd81      	ble.n	8001ddc <MPU9250SelfTest+0x1ec>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8001ed8:	2300      	movs	r3, #0
 8001eda:	65bb      	str	r3, [r7, #88]	; 0x58
 8001edc:	e02f      	b.n	8001f3e <MPU9250SelfTest+0x34e>
 8001ede:	bf00      	nop
 8001ee0:	51eb851f 	.word	0x51eb851f
		aSTAvg[ii] /= 200;
 8001ee4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001eec:	4413      	add	r3, r2
 8001eee:	f933 3c3c 	ldrsh.w	r3, [r3, #-60]
 8001ef2:	4ae1      	ldr	r2, [pc, #900]	; (8002278 <MPU9250SelfTest+0x688>)
 8001ef4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ef8:	1192      	asrs	r2, r2, #6
 8001efa:	17db      	asrs	r3, r3, #31
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	b21a      	sxth	r2, r3
 8001f00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001f08:	440b      	add	r3, r1
 8001f0a:	f823 2c3c 	strh.w	r2, [r3, #-60]
		gSTAvg[ii] /= 200;
 8001f0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001f16:	4413      	add	r3, r2
 8001f18:	f933 3c44 	ldrsh.w	r3, [r3, #-68]
 8001f1c:	4ad6      	ldr	r2, [pc, #856]	; (8002278 <MPU9250SelfTest+0x688>)
 8001f1e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f22:	1192      	asrs	r2, r2, #6
 8001f24:	17db      	asrs	r3, r3, #31
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	b21a      	sxth	r2, r3
 8001f2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001f32:	440b      	add	r3, r1
 8001f34:	f823 2c44 	strh.w	r2, [r3, #-68]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 8001f38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	ddcf      	ble.n	8001ee4 <MPU9250SelfTest+0x2f4>
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00);
 8001f44:	2200      	movs	r2, #0
 8001f46:	211c      	movs	r1, #28
 8001f48:	20d0      	movs	r0, #208	; 0xd0
 8001f4a:	f7ff fb97 	bl	800167c <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	211b      	movs	r1, #27
 8001f52:	20d0      	movs	r0, #208	; 0xd0
 8001f54:	f7ff fb92 	bl	800167c <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 8001f58:	2019      	movs	r0, #25
 8001f5a:	f001 fef5 	bl	8003d48 <HAL_Delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001f5e:	220d      	movs	r2, #13
 8001f60:	21d1      	movs	r1, #209	; 0xd1
 8001f62:	20d0      	movs	r0, #208	; 0xd0
 8001f64:	f7ff fba8 	bl	80016b8 <readByte>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	SELF_TEST_X_ACCEL); // X-axis accel self-test results
	selfTest[1] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001f6e:	220e      	movs	r2, #14
 8001f70:	21d1      	movs	r1, #209	; 0xd1
 8001f72:	20d0      	movs	r0, #208	; 0xd0
 8001f74:	f7ff fba0 	bl	80016b8 <readByte>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
	selfTest[2] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001f7e:	220f      	movs	r2, #15
 8001f80:	21d1      	movs	r1, #209	; 0xd1
 8001f82:	20d0      	movs	r0, #208	; 0xd0
 8001f84:	f7ff fb98 	bl	80016b8 <readByte>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
	selfTest[3] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001f8e:	2200      	movs	r2, #0
 8001f90:	21d1      	movs	r1, #209	; 0xd1
 8001f92:	20d0      	movs	r0, #208	; 0xd0
 8001f94:	f7ff fb90 	bl	80016b8 <readByte>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	SELF_TEST_X_GYRO); // X-axis gyro self-test results
	selfTest[4] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	21d1      	movs	r1, #209	; 0xd1
 8001fa2:	20d0      	movs	r0, #208	; 0xd0
 8001fa4:	f7ff fb88 	bl	80016b8 <readByte>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
	selfTest[5] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8001fae:	2202      	movs	r2, #2
 8001fb0:	21d1      	movs	r1, #209	; 0xd1
 8001fb2:	20d0      	movs	r0, #208	; 0xd0
 8001fb4:	f7ff fb80 	bl	80016b8 <readByte>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	SELF_TEST_Z_GYRO); // Z-axis gyro self-test results

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float) (2620 / 1 << FS)
 8001fbe:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001fc2:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	ee07 3a90 	vmov	s15, r3
 8001fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd2:	ee17 0a90 	vmov	r0, s15
 8001fd6:	f7fe fabf 	bl	8000558 <__aeabi_f2d>
 8001fda:	4604      	mov	r4, r0
 8001fdc:	460d      	mov	r5, r1
			* (pow(1.01, ((float) selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 8001fde:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001fe2:	ee07 3a90 	vmov	s15, r3
 8001fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fea:	ee17 0a90 	vmov	r0, s15
 8001fee:	f7fe fab3 	bl	8000558 <__aeabi_f2d>
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	4ba1      	ldr	r3, [pc, #644]	; (800227c <MPU9250SelfTest+0x68c>)
 8001ff8:	f7fe f94e 	bl	8000298 <__aeabi_dsub>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	ec43 2b17 	vmov	d7, r2, r3
 8002004:	eeb0 1a47 	vmov.f32	s2, s14
 8002008:	eef0 1a67 	vmov.f32	s3, s15
 800200c:	ed9f 0b98 	vldr	d0, [pc, #608]	; 8002270 <MPU9250SelfTest+0x680>
 8002010:	f00b faf4 	bl	800d5fc <pow>
 8002014:	ec53 2b10 	vmov	r2, r3, d0
 8002018:	4620      	mov	r0, r4
 800201a:	4629      	mov	r1, r5
 800201c:	f7fe faf4 	bl	8000608 <__aeabi_dmul>
 8002020:	4603      	mov	r3, r0
 8002022:	460c      	mov	r4, r1
 8002024:	4618      	mov	r0, r3
 8002026:	4621      	mov	r1, r4
 8002028:	f7fe fdc6 	bl	8000bb8 <__aeabi_d2f>
 800202c:	4603      	mov	r3, r0
	factoryTrim[0] = (float) (2620 / 1 << FS)
 800202e:	60fb      	str	r3, [r7, #12]
	factoryTrim[1] = (float) (2620 / 1 << FS)
 8002030:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002034:	f640 223c 	movw	r2, #2620	; 0xa3c
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	ee07 3a90 	vmov	s15, r3
 8002040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002044:	ee17 0a90 	vmov	r0, s15
 8002048:	f7fe fa86 	bl	8000558 <__aeabi_f2d>
 800204c:	4604      	mov	r4, r0
 800204e:	460d      	mov	r5, r1
			* (pow(1.01, ((float) selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 8002050:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002054:	ee07 3a90 	vmov	s15, r3
 8002058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800205c:	ee17 0a90 	vmov	r0, s15
 8002060:	f7fe fa7a 	bl	8000558 <__aeabi_f2d>
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	4b84      	ldr	r3, [pc, #528]	; (800227c <MPU9250SelfTest+0x68c>)
 800206a:	f7fe f915 	bl	8000298 <__aeabi_dsub>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	ec43 2b17 	vmov	d7, r2, r3
 8002076:	eeb0 1a47 	vmov.f32	s2, s14
 800207a:	eef0 1a67 	vmov.f32	s3, s15
 800207e:	ed9f 0b7c 	vldr	d0, [pc, #496]	; 8002270 <MPU9250SelfTest+0x680>
 8002082:	f00b fabb 	bl	800d5fc <pow>
 8002086:	ec53 2b10 	vmov	r2, r3, d0
 800208a:	4620      	mov	r0, r4
 800208c:	4629      	mov	r1, r5
 800208e:	f7fe fabb 	bl	8000608 <__aeabi_dmul>
 8002092:	4603      	mov	r3, r0
 8002094:	460c      	mov	r4, r1
 8002096:	4618      	mov	r0, r3
 8002098:	4621      	mov	r1, r4
 800209a:	f7fe fd8d 	bl	8000bb8 <__aeabi_d2f>
 800209e:	4603      	mov	r3, r0
	factoryTrim[1] = (float) (2620 / 1 << FS)
 80020a0:	613b      	str	r3, [r7, #16]
	factoryTrim[2] = (float) (2620 / 1 << FS)
 80020a2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80020a6:	f640 223c 	movw	r2, #2620	; 0xa3c
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	ee07 3a90 	vmov	s15, r3
 80020b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b6:	ee17 0a90 	vmov	r0, s15
 80020ba:	f7fe fa4d 	bl	8000558 <__aeabi_f2d>
 80020be:	4604      	mov	r4, r0
 80020c0:	460d      	mov	r5, r1
			* (pow(1.01, ((float) selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 80020c2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80020c6:	ee07 3a90 	vmov	s15, r3
 80020ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ce:	ee17 0a90 	vmov	r0, s15
 80020d2:	f7fe fa41 	bl	8000558 <__aeabi_f2d>
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	4b68      	ldr	r3, [pc, #416]	; (800227c <MPU9250SelfTest+0x68c>)
 80020dc:	f7fe f8dc 	bl	8000298 <__aeabi_dsub>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	ec43 2b17 	vmov	d7, r2, r3
 80020e8:	eeb0 1a47 	vmov.f32	s2, s14
 80020ec:	eef0 1a67 	vmov.f32	s3, s15
 80020f0:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8002270 <MPU9250SelfTest+0x680>
 80020f4:	f00b fa82 	bl	800d5fc <pow>
 80020f8:	ec53 2b10 	vmov	r2, r3, d0
 80020fc:	4620      	mov	r0, r4
 80020fe:	4629      	mov	r1, r5
 8002100:	f7fe fa82 	bl	8000608 <__aeabi_dmul>
 8002104:	4603      	mov	r3, r0
 8002106:	460c      	mov	r4, r1
 8002108:	4618      	mov	r0, r3
 800210a:	4621      	mov	r1, r4
 800210c:	f7fe fd54 	bl	8000bb8 <__aeabi_d2f>
 8002110:	4603      	mov	r3, r0
	factoryTrim[2] = (float) (2620 / 1 << FS)
 8002112:	617b      	str	r3, [r7, #20]
	factoryTrim[3] = (float) (2620 / 1 << FS)
 8002114:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002118:	f640 223c 	movw	r2, #2620	; 0xa3c
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	ee07 3a90 	vmov	s15, r3
 8002124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002128:	ee17 0a90 	vmov	r0, s15
 800212c:	f7fe fa14 	bl	8000558 <__aeabi_f2d>
 8002130:	4604      	mov	r4, r0
 8002132:	460d      	mov	r5, r1
			* (pow(1.01, ((float) selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 8002134:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002138:	ee07 3a90 	vmov	s15, r3
 800213c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002140:	ee17 0a90 	vmov	r0, s15
 8002144:	f7fe fa08 	bl	8000558 <__aeabi_f2d>
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	4b4b      	ldr	r3, [pc, #300]	; (800227c <MPU9250SelfTest+0x68c>)
 800214e:	f7fe f8a3 	bl	8000298 <__aeabi_dsub>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	ec43 2b17 	vmov	d7, r2, r3
 800215a:	eeb0 1a47 	vmov.f32	s2, s14
 800215e:	eef0 1a67 	vmov.f32	s3, s15
 8002162:	ed9f 0b43 	vldr	d0, [pc, #268]	; 8002270 <MPU9250SelfTest+0x680>
 8002166:	f00b fa49 	bl	800d5fc <pow>
 800216a:	ec53 2b10 	vmov	r2, r3, d0
 800216e:	4620      	mov	r0, r4
 8002170:	4629      	mov	r1, r5
 8002172:	f7fe fa49 	bl	8000608 <__aeabi_dmul>
 8002176:	4603      	mov	r3, r0
 8002178:	460c      	mov	r4, r1
 800217a:	4618      	mov	r0, r3
 800217c:	4621      	mov	r1, r4
 800217e:	f7fe fd1b 	bl	8000bb8 <__aeabi_d2f>
 8002182:	4603      	mov	r3, r0
	factoryTrim[3] = (float) (2620 / 1 << FS)
 8002184:	61bb      	str	r3, [r7, #24]
	factoryTrim[4] = (float) (2620 / 1 << FS)
 8002186:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800218a:	f640 223c 	movw	r2, #2620	; 0xa3c
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800219a:	ee17 0a90 	vmov	r0, s15
 800219e:	f7fe f9db 	bl	8000558 <__aeabi_f2d>
 80021a2:	4604      	mov	r4, r0
 80021a4:	460d      	mov	r5, r1
			* (pow(1.01, ((float) selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 80021a6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80021aa:	ee07 3a90 	vmov	s15, r3
 80021ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021b2:	ee17 0a90 	vmov	r0, s15
 80021b6:	f7fe f9cf 	bl	8000558 <__aeabi_f2d>
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	4b2f      	ldr	r3, [pc, #188]	; (800227c <MPU9250SelfTest+0x68c>)
 80021c0:	f7fe f86a 	bl	8000298 <__aeabi_dsub>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	ec43 2b17 	vmov	d7, r2, r3
 80021cc:	eeb0 1a47 	vmov.f32	s2, s14
 80021d0:	eef0 1a67 	vmov.f32	s3, s15
 80021d4:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8002270 <MPU9250SelfTest+0x680>
 80021d8:	f00b fa10 	bl	800d5fc <pow>
 80021dc:	ec53 2b10 	vmov	r2, r3, d0
 80021e0:	4620      	mov	r0, r4
 80021e2:	4629      	mov	r1, r5
 80021e4:	f7fe fa10 	bl	8000608 <__aeabi_dmul>
 80021e8:	4603      	mov	r3, r0
 80021ea:	460c      	mov	r4, r1
 80021ec:	4618      	mov	r0, r3
 80021ee:	4621      	mov	r1, r4
 80021f0:	f7fe fce2 	bl	8000bb8 <__aeabi_d2f>
 80021f4:	4603      	mov	r3, r0
	factoryTrim[4] = (float) (2620 / 1 << FS)
 80021f6:	61fb      	str	r3, [r7, #28]
	factoryTrim[5] = (float) (2620 / 1 << FS)
 80021f8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80021fc:	f640 223c 	movw	r2, #2620	; 0xa3c
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	ee07 3a90 	vmov	s15, r3
 8002208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800220c:	ee17 0a90 	vmov	r0, s15
 8002210:	f7fe f9a2 	bl	8000558 <__aeabi_f2d>
 8002214:	4604      	mov	r4, r0
 8002216:	460d      	mov	r5, r1
			* (pow(1.01, ((float) selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 8002218:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800221c:	ee07 3a90 	vmov	s15, r3
 8002220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002224:	ee17 0a90 	vmov	r0, s15
 8002228:	f7fe f996 	bl	8000558 <__aeabi_f2d>
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	4b12      	ldr	r3, [pc, #72]	; (800227c <MPU9250SelfTest+0x68c>)
 8002232:	f7fe f831 	bl	8000298 <__aeabi_dsub>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	ec43 2b17 	vmov	d7, r2, r3
 800223e:	eeb0 1a47 	vmov.f32	s2, s14
 8002242:	eef0 1a67 	vmov.f32	s3, s15
 8002246:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8002270 <MPU9250SelfTest+0x680>
 800224a:	f00b f9d7 	bl	800d5fc <pow>
 800224e:	ec53 2b10 	vmov	r2, r3, d0
 8002252:	4620      	mov	r0, r4
 8002254:	4629      	mov	r1, r5
 8002256:	f7fe f9d7 	bl	8000608 <__aeabi_dmul>
 800225a:	4603      	mov	r3, r0
 800225c:	460c      	mov	r4, r1
 800225e:	4618      	mov	r0, r3
 8002260:	4621      	mov	r1, r4
 8002262:	f7fe fca9 	bl	8000bb8 <__aeabi_d2f>
 8002266:	4603      	mov	r3, r0
	factoryTrim[5] = (float) (2620 / 1 << FS)
 8002268:	623b      	str	r3, [r7, #32]

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 800226a:	2300      	movs	r3, #0
 800226c:	657b      	str	r3, [r7, #84]	; 0x54
 800226e:	e086      	b.n	800237e <MPU9250SelfTest+0x78e>
 8002270:	c28f5c29 	.word	0xc28f5c29
 8002274:	3ff028f5 	.word	0x3ff028f5
 8002278:	51eb851f 	.word	0x51eb851f
 800227c:	3ff00000 	.word	0x3ff00000
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8002280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002288:	4413      	add	r3, r2
 800228a:	f933 3c3c 	ldrsh.w	r3, [r3, #-60]
 800228e:	461a      	mov	r2, r3
 8002290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002298:	440b      	add	r3, r1
 800229a:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	ee07 3a90 	vmov	s15, r3
 80022a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022a8:	ee17 0a90 	vmov	r0, s15
 80022ac:	f7fe f954 	bl	8000558 <__aeabi_f2d>
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	4b36      	ldr	r3, [pc, #216]	; (8002390 <MPU9250SelfTest+0x7a0>)
 80022b6:	f7fe f9a7 	bl	8000608 <__aeabi_dmul>
 80022ba:	4603      	mov	r3, r0
 80022bc:	460c      	mov	r4, r1
 80022be:	4625      	mov	r5, r4
 80022c0:	461c      	mov	r4, r3
				/ factoryTrim[i]; // Report percent differences
 80022c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80022ca:	4413      	add	r3, r2
 80022cc:	3b5c      	subs	r3, #92	; 0x5c
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe f941 	bl	8000558 <__aeabi_f2d>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4620      	mov	r0, r4
 80022dc:	4629      	mov	r1, r5
 80022de:	f7fe fabd 	bl	800085c <__aeabi_ddiv>
 80022e2:	4603      	mov	r3, r0
 80022e4:	460c      	mov	r4, r1
 80022e6:	4618      	mov	r0, r3
 80022e8:	4621      	mov	r1, r4
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 80022ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	18d4      	adds	r4, r2, r3
				/ factoryTrim[i]; // Report percent differences
 80022f2:	f7fe fc61 	bl	8000bb8 <__aeabi_d2f>
 80022f6:	4603      	mov	r3, r0
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 80022f8:	6023      	str	r3, [r4, #0]
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 80022fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002302:	4413      	add	r3, r2
 8002304:	f933 3c44 	ldrsh.w	r3, [r3, #-68]
 8002308:	461a      	mov	r2, r3
 800230a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002312:	440b      	add	r3, r1
 8002314:	f933 3c2c 	ldrsh.w	r3, [r3, #-44]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	ee07 3a90 	vmov	s15, r3
 800231e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002322:	ee17 0a90 	vmov	r0, s15
 8002326:	f7fe f917 	bl	8000558 <__aeabi_f2d>
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <MPU9250SelfTest+0x7a0>)
 8002330:	f7fe f96a 	bl	8000608 <__aeabi_dmul>
 8002334:	4603      	mov	r3, r0
 8002336:	460c      	mov	r4, r1
 8002338:	4625      	mov	r5, r4
 800233a:	461c      	mov	r4, r3
				/ factoryTrim[i + 3]; // Report percent differences
 800233c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800233e:	3303      	adds	r3, #3
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002346:	4413      	add	r3, r2
 8002348:	3b5c      	subs	r3, #92	; 0x5c
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe f903 	bl	8000558 <__aeabi_f2d>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4620      	mov	r0, r4
 8002358:	4629      	mov	r1, r5
 800235a:	f7fe fa7f 	bl	800085c <__aeabi_ddiv>
 800235e:	4603      	mov	r3, r0
 8002360:	460c      	mov	r4, r1
 8002362:	4618      	mov	r0, r3
 8002364:	4621      	mov	r1, r4
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8002366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002368:	3303      	adds	r3, #3
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	18d4      	adds	r4, r2, r3
				/ factoryTrim[i + 3]; // Report percent differences
 8002370:	f7fe fc22 	bl	8000bb8 <__aeabi_d2f>
 8002374:	4603      	mov	r3, r0
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8002376:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3; i++) {
 8002378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237a:	3301      	adds	r3, #1
 800237c:	657b      	str	r3, [r7, #84]	; 0x54
 800237e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002380:	2b02      	cmp	r3, #2
 8002382:	f77f af7d 	ble.w	8002280 <MPU9250SelfTest+0x690>
	}

}
 8002386:	bf00      	nop
 8002388:	3768      	adds	r7, #104	; 0x68
 800238a:	46bd      	mov	sp, r7
 800238c:	bdb0      	pop	{r4, r5, r7, pc}
 800238e:	bf00      	nop
 8002390:	40590000 	.word	0x40590000

08002394 <MahonyQuaternionUpdate>:
	float q3q3 = q3 * q3;
	float q3q4 = q3 * q4;
	float q4q4 = q4 * q4;

	// Normalise accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 8002394:	ee61 7a01 	vmul.f32	s15, s2, s2
		float gz, float mx, float my, float mz) {
 8002398:	b530      	push	{r4, r5, lr}
	norm = sqrt(ax * ax + ay * ay + az * az);
 800239a:	eee0 7aa0 	vfma.f32	s15, s1, s1
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 800239e:	4cb9      	ldr	r4, [pc, #740]	; (8002684 <MahonyQuaternionUpdate+0x2f0>)
		float gz, float mx, float my, float mz) {
 80023a0:	ed2d 8b10 	vpush	{d8-d15}
	norm = sqrt(ax * ax + ay * ay + az * az);
 80023a4:	eee0 7a00 	vfma.f32	s15, s0, s0
		float gz, float mx, float my, float mz) {
 80023a8:	b089      	sub	sp, #36	; 0x24
 80023aa:	eeb0 aa41 	vmov.f32	s20, s2
	norm = sqrt(ax * ax + ay * ay + az * az);
 80023ae:	ee17 0a90 	vmov	r0, s15
		float gz, float mx, float my, float mz) {
 80023b2:	eeb0 ca61 	vmov.f32	s24, s3
 80023b6:	eeb0 ea42 	vmov.f32	s28, s4
 80023ba:	eef0 da62 	vmov.f32	s27, s5
 80023be:	eef0 ba43 	vmov.f32	s23, s6
 80023c2:	eeb0 ba63 	vmov.f32	s22, s7
 80023c6:	eef0 ca44 	vmov.f32	s25, s8
 80023ca:	eef0 8a60 	vmov.f32	s17, s1
 80023ce:	eeb0 8a40 	vmov.f32	s16, s0
	norm = sqrt(ax * ax + ay * ay + az * az);
 80023d2:	f7fe f8c1 	bl	8000558 <__aeabi_f2d>
 80023d6:	ec41 0b10 	vmov	d0, r0, r1
	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 80023da:	ed94 9a00 	vldr	s18, [r4]
 80023de:	ed94 da01 	vldr	s26, [r4, #4]
 80023e2:	edd4 aa02 	vldr	s21, [r4, #8]
 80023e6:	edd4 9a03 	vldr	s19, [r4, #12]
	norm = sqrt(ax * ax + ay * ay + az * az);
 80023ea:	f00b fa77 	bl	800d8dc <sqrt>
 80023ee:	ec51 0b10 	vmov	r0, r1, d0
 80023f2:	f7fe fbe1 	bl	8000bb8 <__aeabi_d2f>
 80023f6:	ee0e 0a90 	vmov	s29, r0
	if (norm == 0.0f)
 80023fa:	eef5 ea40 	vcmp.f32	s29, #0.0
 80023fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002402:	d103      	bne.n	800240c <MahonyQuaternionUpdate+0x78>
	q[0] = q1 * norm;
	q[1] = q2 * norm;
	q[2] = q3 * norm;
	q[3] = q4 * norm;

}
 8002404:	b009      	add	sp, #36	; 0x24
 8002406:	ecbd 8b10 	vpop	{d8-d15}
 800240a:	bd30      	pop	{r4, r5, pc}
	norm = sqrt(mx * mx + my * my + mz * mz);
 800240c:	ee6c 7aac 	vmul.f32	s15, s25, s25
 8002410:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8002414:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8002418:	ee17 0a90 	vmov	r0, s15
 800241c:	f7fe f89c 	bl	8000558 <__aeabi_f2d>
 8002420:	ec41 0b10 	vmov	d0, r0, r1
 8002424:	f00b fa5a 	bl	800d8dc <sqrt>
 8002428:	ec51 0b10 	vmov	r0, r1, d0
 800242c:	f7fe fbc4 	bl	8000bb8 <__aeabi_d2f>
 8002430:	ee07 0a90 	vmov	s15, r0
	if (norm == 0.0f)
 8002434:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243c:	d0e2      	beq.n	8002404 <MahonyQuaternionUpdate+0x70>
	norm = 1.0f / norm;        // use reciprocal for division
 800243e:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
	norm = 1.0f / norm;        // use reciprocal for division
 8002442:	ee8f 4a27 	vdiv.f32	s8, s30, s15
 8002446:	2500      	movs	r5, #0
	float q4q4 = q4 * q4;
 8002448:	ee29 6aa9 	vmul.f32	s12, s19, s19
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 800244c:	ee2d 7a4d 	vnmul.f32	s14, s26, s26
	float q2q3 = q2 * q3;
 8002450:	ee6d 6a2a 	vmul.f32	s13, s26, s21
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8002454:	ee77 7a46 	vsub.f32	s15, s14, s12
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8002458:	eef1 5a49 	vneg.f32	s11, s18
 800245c:	eef0 4a46 	vmov.f32	s9, s12
 8002460:	eef6 fa00 	vmov.f32	s31, #96	; 0x3f000000  0.5
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8002464:	eef0 3a66 	vmov.f32	s7, s13
	my *= norm;
 8002468:	ee2b ba04 	vmul.f32	s22, s22, s8
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 800246c:	eee5 6aa9 	vfma.f32	s13, s11, s19
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8002470:	eee9 3a29 	vfma.f32	s7, s18, s19
 8002474:	ee77 7aaf 	vadd.f32	s15, s15, s31
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8002478:	eeea 4aaa 	vfma.f32	s9, s21, s21
	float q3q4 = q3 * q4;
 800247c:	ee2a 5aa9 	vmul.f32	s10, s21, s19
	mx *= norm;
 8002480:	ee6b ba84 	vmul.f32	s23, s23, s8
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8002484:	ee67 7a8b 	vmul.f32	s15, s15, s22
	norm = 1.0f / norm;        // use reciprocal for division
 8002488:	ee8f 1a2e 	vdiv.f32	s2, s30, s29
			+ 2.0f * mz * (q3q4 - q1q2);
 800248c:	eeb0 3a45 	vmov.f32	s6, s10
	mz *= norm;
 8002490:	ee6c ea84 	vmul.f32	s29, s25, s8
	float q2q4 = q2 * q4;
 8002494:	ee6d ca29 	vmul.f32	s25, s26, s19
			+ 2.0f * mz * (q3q4 - q1q2);
 8002498:	eea5 3a8d 	vfma.f32	s6, s11, s26
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 800249c:	ee7f 4ae4 	vsub.f32	s9, s31, s9
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80024a0:	eee3 7aab 	vfma.f32	s15, s7, s23
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80024a4:	ee66 3a8b 	vmul.f32	s7, s13, s22
			+ 2.0f * mz * (q2q4 + q1q3);
 80024a8:	eeb0 4a6c 	vmov.f32	s8, s25
 80024ac:	eea9 4a2a 	vfma.f32	s8, s18, s21
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80024b0:	eee4 3aab 	vfma.f32	s7, s9, s23
			+ 2.0f * mz * (q3q4 - q1q2);
 80024b4:	eee3 7a2e 	vfma.f32	s15, s6, s29
			+ 2.0f * mz * (q2q4 + q1q3);
 80024b8:	eee4 3a2e 	vfma.f32	s7, s8, s29
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80024bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80024c0:	ee73 3aa3 	vadd.f32	s7, s7, s7
	bx = sqrt((hx * hx) + (hy * hy));
 80024c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
	ax *= norm;
 80024c8:	ee28 8a01 	vmul.f32	s16, s16, s2
	bx = sqrt((hx * hx) + (hy * hy));
 80024cc:	eee3 7aa3 	vfma.f32	s15, s7, s7
	ay *= norm;
 80024d0:	ee68 8a81 	vmul.f32	s17, s17, s2
	bx = sqrt((hx * hx) + (hy * hy));
 80024d4:	ee17 0a90 	vmov	r0, s15
	az *= norm;
 80024d8:	ee2a aa01 	vmul.f32	s20, s20, s2
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 80024dc:	ed8d 7a07 	vstr	s14, [sp, #28]
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80024e0:	ed8d 6a06 	vstr	s12, [sp, #24]
			+ 2.0f * mz * (q3q4 - q1q2);
 80024e4:	ed8d 5a05 	vstr	s10, [sp, #20]
 80024e8:	edcd 5a04 	vstr	s11, [sp, #16]
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 80024ec:	edcd 6a03 	vstr	s13, [sp, #12]
 80024f0:	edcd 4a02 	vstr	s9, [sp, #8]
			+ 2.0f * mz * (q2q4 + q1q3);
 80024f4:	ed8d 4a01 	vstr	s8, [sp, #4]
	bx = sqrt((hx * hx) + (hy * hy));
 80024f8:	f7fe f82e 	bl	8000558 <__aeabi_f2d>
 80024fc:	ec41 0b10 	vmov	d0, r0, r1
 8002500:	f00b f9ec 	bl	800d8dc <sqrt>
 8002504:	ec51 0b10 	vmov	r0, r1, d0
 8002508:	f7fe fb56 	bl	8000bb8 <__aeabi_d2f>
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 800250c:	ed9d 5a05 	vldr	s10, [sp, #20]
 8002510:	eddd 5a04 	vldr	s11, [sp, #16]
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8002514:	ed9d 7a07 	vldr	s14, [sp, #28]
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8002518:	ed9d 6a06 	vldr	s12, [sp, #24]
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 800251c:	eddd 4a02 	vldr	s9, [sp, #8]
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8002520:	ed9d 4a01 	vldr	s8, [sp, #4]
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8002524:	eddd 6a03 	vldr	s13, [sp, #12]
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8002528:	4a57      	ldr	r2, [pc, #348]	; (8002688 <MahonyQuaternionUpdate+0x2f4>)
		eInt[0] = 0.0f;     // prevent integral wind up
 800252a:	4b58      	ldr	r3, [pc, #352]	; (800268c <MahonyQuaternionUpdate+0x2f8>)
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 800252c:	eea9 5a0d 	vfma.f32	s10, s18, s26
		eInt[0] = 0.0f;     // prevent integral wind up
 8002530:	601d      	str	r5, [r3, #0]
		eInt[1] = 0.0f;
 8002532:	605d      	str	r5, [r3, #4]
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8002534:	eee5 caaa 	vfma.f32	s25, s11, s21
		eInt[2] = 0.0f;
 8002538:	609d      	str	r5, [r3, #8]
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 800253a:	eeb1 3a6a 	vneg.f32	s6, s21
 800253e:	eef0 5a47 	vmov.f32	s11, s14
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8002542:	ee65 7a0b 	vmul.f32	s15, s10, s22
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8002546:	eee3 5a2a 	vfma.f32	s11, s6, s21
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 800254a:	eeec 7aab 	vfma.f32	s15, s25, s23
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 800254e:	ee75 5aaf 	vadd.f32	s11, s11, s31
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8002552:	eea9 7a09 	vfma.f32	s14, s18, s18
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8002556:	eee5 7aae 	vfma.f32	s15, s11, s29
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 800255a:	eea3 7a2a 	vfma.f32	s14, s6, s21
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 800255e:	ee77 7aa7 	vadd.f32	s15, s15, s15
	bx = sqrt((hx * hx) + (hy * hy));
 8002562:	ee03 0a90 	vmov	s7, r0
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8002566:	ee37 6a06 	vadd.f32	s12, s14, s12
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 800256a:	ee2c 3aa7 	vmul.f32	s6, s25, s15
	vx = 2.0f * (q2q4 - q1q3);
 800256e:	ee7c caac 	vadd.f32	s25, s25, s25
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8002572:	eea4 3aa3 	vfma.f32	s6, s9, s7
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8002576:	ee66 4a48 	vnmul.f32	s9, s12, s16
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 800257a:	ee25 7aa7 	vmul.f32	s14, s11, s15
	vy = 2.0f * (q1q2 + q3q4);
 800257e:	ee75 5a05 	vadd.f32	s11, s10, s10
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8002582:	eeea 4a2c 	vfma.f32	s9, s20, s25
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8002586:	eea4 7a23 	vfma.f32	s14, s8, s7
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 800258a:	ee25 1aca 	vnmul.f32	s2, s11, s20
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 800258e:	ee65 7a27 	vmul.f32	s15, s10, s15
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8002592:	eea8 1a86 	vfma.f32	s2, s17, s12
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8002596:	ee33 5a03 	vadd.f32	s10, s6, s6
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 800259a:	eee6 7aa3 	vfma.f32	s15, s13, s7
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 800259e:	eef0 6a64 	vmov.f32	s13, s9
 80025a2:	eeee 6a85 	vfma.f32	s13, s29, s10
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 80025a6:	ee37 7a07 	vadd.f32	s14, s14, s14
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 80025aa:	ee6c cae8 	vnmul.f32	s25, s25, s17
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 80025ae:	eeab 1a07 	vfma.f32	s2, s22, s14
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 80025b2:	eee8 ca25 	vfma.f32	s25, s16, s11
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 80025b6:	eeeb 6ac7 	vfms.f32	s13, s23, s14
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 80025ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 80025be:	eeb0 8a6a 	vmov.f32	s16, s21
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 80025c2:	eeae 1ae7 	vfms.f32	s2, s29, s15
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 80025c6:	eeeb caa7 	vfma.f32	s25, s23, s15
	gx = gx + Kp * ex + Ki * eInt[0];
 80025ca:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	gy = gy + Kp * ey + Ki * eInt[1];
 80025ce:	eea6 eaa7 	vfma.f32	s28, s13, s15
	gx = gx + Kp * ex + Ki * eInt[0];
 80025d2:	eea1 ca27 	vfma.f32	s24, s2, s15
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 80025d6:	eeeb ca45 	vfms.f32	s25, s22, s10
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 80025da:	ee6a 6a8e 	vmul.f32	s13, s21, s28
	gz = gz + Kp * ez + Ki * eInt[2];
 80025de:	eeec daa7 	vfma.f32	s27, s25, s15
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 80025e2:	eeed 6a0c 	vfma.f32	s13, s26, s24
 80025e6:	edd2 7a00 	vldr	s15, [r2]
 80025ea:	eee9 6aad 	vfma.f32	s13, s19, s27
 80025ee:	ee67 faaf 	vmul.f32	s31, s15, s31
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 80025f2:	ee29 7a8c 	vmul.f32	s14, s19, s24
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 80025f6:	eea6 9aef 	vfms.f32	s18, s13, s31
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 80025fa:	ee6e 7a69 	vnmul.f32	s15, s28, s19
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 80025fe:	eead 7a6d 	vfms.f32	s14, s26, s27
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8002602:	eeea 7aad 	vfma.f32	s15, s21, s27
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 8002606:	eeae 7a09 	vfma.f32	s14, s28, s18
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 800260a:	eeec 7a09 	vfma.f32	s15, s24, s18
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 800260e:	eea7 8a2f 	vfma.f32	s16, s14, s31
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8002612:	ee2c ca6a 	vnmul.f32	s24, s24, s21
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8002616:	eef0 8a4d 	vmov.f32	s17, s26
 800261a:	eee7 8aaf 	vfma.f32	s17, s15, s31
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 800261e:	eead ca0e 	vfma.f32	s24, s26, s28
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8002622:	ee68 7a08 	vmul.f32	s15, s16, s16
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8002626:	eead ca89 	vfma.f32	s24, s27, s18
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 800262a:	eee8 7aa8 	vfma.f32	s15, s17, s17
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 800262e:	eeec 9a2f 	vfma.f32	s19, s24, s31
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8002632:	eee9 7a09 	vfma.f32	s15, s18, s18
 8002636:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800263a:	ee17 0a90 	vmov	r0, s15
 800263e:	f7fd ff8b 	bl	8000558 <__aeabi_f2d>
 8002642:	ec41 0b10 	vmov	d0, r0, r1
 8002646:	f00b f949 	bl	800d8dc <sqrt>
 800264a:	ec51 0b10 	vmov	r0, r1, d0
 800264e:	f7fe fab3 	bl	8000bb8 <__aeabi_d2f>
	norm = 1.0f / norm;
 8002652:	ee07 0a90 	vmov	s15, r0
 8002656:	eecf 7a27 	vdiv.f32	s15, s30, s15
	q[1] = q2 * norm;
 800265a:	ee68 8aa7 	vmul.f32	s17, s17, s15
	q[2] = q3 * norm;
 800265e:	ee28 8a27 	vmul.f32	s16, s16, s15
	q[3] = q4 * norm;
 8002662:	ee69 9aa7 	vmul.f32	s19, s19, s15
	q[0] = q1 * norm;
 8002666:	ee29 9a27 	vmul.f32	s18, s18, s15
	q[1] = q2 * norm;
 800266a:	edc4 8a01 	vstr	s17, [r4, #4]
	q[2] = q3 * norm;
 800266e:	ed84 8a02 	vstr	s16, [r4, #8]
	q[3] = q4 * norm;
 8002672:	edc4 9a03 	vstr	s19, [r4, #12]
	q[0] = q1 * norm;
 8002676:	ed84 9a00 	vstr	s18, [r4]
}
 800267a:	b009      	add	sp, #36	; 0x24
 800267c:	ecbd 8b10 	vpop	{d8-d15}
 8002680:	bd30      	pop	{r4, r5, pc}
 8002682:	bf00      	nop
 8002684:	20000040 	.word	0x20000040
 8002688:	20000100 	.word	0x20000100
 800268c:	2000010c 	.word	0x2000010c

08002690 <NRF24_DelayMicroSeconds>:
bool SPI_RxCplt = 1;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	//	uint32_t uSecVar = uSec;
	//	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
	//	while(uSecVar--);
	DWT_Delay(uSec);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f001 faed 	bl	8003c78 <DWT_Delay>

}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d008      	beq.n	80026c8 <NRF24_csn+0x20>
 80026b6:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <NRF24_csn+0x38>)
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <NRF24_csn+0x3c>)
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	2201      	movs	r2, #1
 80026c0:	4619      	mov	r1, r3
 80026c2:	f002 fa99 	bl	8004bf8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80026c6:	e007      	b.n	80026d8 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <NRF24_csn+0x38>)
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <NRF24_csn+0x3c>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	2200      	movs	r2, #0
 80026d2:	4619      	mov	r1, r3
 80026d4:	f002 fa90 	bl	8004bf8 <HAL_GPIO_WritePin>
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000124 	.word	0x20000124
 80026e4:	20000128 	.word	0x20000128

080026e8 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d008      	beq.n	8002708 <NRF24_ce+0x20>
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <NRF24_ce+0x38>)
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <NRF24_ce+0x3c>)
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	2201      	movs	r2, #1
 8002700:	4619      	mov	r1, r3
 8002702:	f002 fa79 	bl	8004bf8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8002706:	e007      	b.n	8002718 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <NRF24_ce+0x38>)
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <NRF24_ce+0x3c>)
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	2200      	movs	r2, #0
 8002712:	4619      	mov	r1, r3
 8002714:	f002 fa70 	bl	8004bf8 <HAL_GPIO_WritePin>
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20000124 	.word	0x20000124
 8002724:	2000012a 	.word	0x2000012a

08002728 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8002732:	2000      	movs	r0, #0
 8002734:	f7ff ffb8 	bl	80026a8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	b2db      	uxtb	r3, r3
 8002740:	733b      	strb	r3, [r7, #12]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 8002742:	f107 010c 	add.w	r1, r7, #12
 8002746:	2302      	movs	r3, #2
 8002748:	2201      	movs	r2, #1
 800274a:	480a      	ldr	r0, [pc, #40]	; (8002774 <NRF24_read_register+0x4c>)
 800274c:	f003 ffea 	bl	8006724 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Receive data
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1,2);
 8002750:	f107 030c 	add.w	r3, r7, #12
 8002754:	1c59      	adds	r1, r3, #1
 8002756:	2302      	movs	r3, #2
 8002758:	2201      	movs	r2, #1
 800275a:	4806      	ldr	r0, [pc, #24]	; (8002774 <NRF24_read_register+0x4c>)
 800275c:	f004 f916 	bl	800698c <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	retData = spiBuf[1];
 8002760:	7b7b      	ldrb	r3, [r7, #13]
 8002762:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8002764:	2001      	movs	r0, #1
 8002766:	f7ff ff9f 	bl	80026a8 <NRF24_csn>
	return retData;
 800276a:	7bfb      	ldrb	r3, [r7, #15]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	2000012c 	.word	0x2000012c

08002778 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	6039      	str	r1, [r7, #0]
 8002782:	71fb      	strb	r3, [r7, #7]
 8002784:	4613      	mov	r3, r2
 8002786:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8002788:	2000      	movs	r0, #0
 800278a:	f7ff ff8d 	bl	80026a8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	f003 031f 	and.w	r3, r3, #31
 8002794:	b2db      	uxtb	r3, r3
 8002796:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 8002798:	f107 010c 	add.w	r1, r7, #12
 800279c:	2302      	movs	r3, #2
 800279e:	2201      	movs	r2, #1
 80027a0:	4808      	ldr	r0, [pc, #32]	; (80027c4 <NRF24_read_registerN+0x4c>)
 80027a2:	f003 ffbf 	bl	8006724 <HAL_SPI_Transmit>
	//while(!SPI_TxCplt){
//	}
	//Receive data
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, buf, len,2);
 80027a6:	79bb      	ldrb	r3, [r7, #6]
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	2302      	movs	r3, #2
 80027ac:	6839      	ldr	r1, [r7, #0]
 80027ae:	4805      	ldr	r0, [pc, #20]	; (80027c4 <NRF24_read_registerN+0x4c>)
 80027b0:	f004 f8ec 	bl	800698c <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 80027b4:	2001      	movs	r0, #1
 80027b6:	f7ff ff77 	bl	80026a8 <NRF24_csn>
}
 80027ba:	bf00      	nop
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	2000012c 	.word	0x2000012c

080027c8 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	460a      	mov	r2, r1
 80027d2:	71fb      	strb	r3, [r7, #7]
 80027d4:	4613      	mov	r3, r2
 80027d6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80027d8:	2000      	movs	r0, #0
 80027da:	f7ff ff65 	bl	80026a8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	f043 0320 	orr.w	r3, r3, #32
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80027e8:	79bb      	ldrb	r3, [r7, #6]
 80027ea:	737b      	strb	r3, [r7, #13]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2,10);
 80027ec:	f107 010c 	add.w	r1, r7, #12
 80027f0:	230a      	movs	r3, #10
 80027f2:	2202      	movs	r2, #2
 80027f4:	4804      	ldr	r0, [pc, #16]	; (8002808 <NRF24_write_register+0x40>)
 80027f6:	f003 ff95 	bl	8006724 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 80027fa:	2001      	movs	r0, #1
 80027fc:	f7ff ff54 	bl	80026a8 <NRF24_csn>
}
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	2000012c 	.word	0x2000012c

0800280c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	6039      	str	r1, [r7, #0]
 8002816:	71fb      	strb	r3, [r7, #7]
 8002818:	4613      	mov	r3, r2
 800281a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800281c:	2000      	movs	r0, #0
 800281e:	f7ff ff43 	bl	80026a8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	f043 0320 	orr.w	r3, r3, #32
 8002828:	b2db      	uxtb	r3, r3
 800282a:	733b      	strb	r3, [r7, #12]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1,2);
 800282c:	f107 010c 	add.w	r1, r7, #12
 8002830:	2302      	movs	r3, #2
 8002832:	2201      	movs	r2, #1
 8002834:	4808      	ldr	r0, [pc, #32]	; (8002858 <NRF24_write_registerN+0x4c>)
 8002836:	f003 ff75 	bl	8006724 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len,2);
 800283a:	79bb      	ldrb	r3, [r7, #6]
 800283c:	b29a      	uxth	r2, r3
 800283e:	2302      	movs	r3, #2
 8002840:	6839      	ldr	r1, [r7, #0]
 8002842:	4805      	ldr	r0, [pc, #20]	; (8002858 <NRF24_write_registerN+0x4c>)
 8002844:	f003 ff6e 	bl	8006724 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//Bring CSN high
	NRF24_csn(1);
 8002848:	2001      	movs	r0, #1
 800284a:	f7ff ff2d 	bl	80026a8 <NRF24_csn>
}
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	2000012c 	.word	0x2000012c

0800285c <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8002868:	f000 fa0c 	bl	8002c84 <NRF24_getPayloadSize>
 800286c:	4603      	mov	r3, r0
 800286e:	461a      	mov	r2, r3
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	4293      	cmp	r3, r2
 8002874:	d303      	bcc.n	800287e <NRF24_read_payload+0x22>
 8002876:	f000 fa05 	bl	8002c84 <NRF24_getPayloadSize>
 800287a:	4603      	mov	r3, r0
 800287c:	e000      	b.n	8002880 <NRF24_read_payload+0x24>
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8002882:	2000      	movs	r0, #0
 8002884:	f7ff ff10 	bl	80026a8 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8002888:	2361      	movs	r3, #97	; 0x61
 800288a:	73bb      	strb	r3, [r7, #14]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1,10);
 800288c:	f107 010e 	add.w	r1, r7, #14
 8002890:	230a      	movs	r3, #10
 8002892:	2201      	movs	r2, #1
 8002894:	4808      	ldr	r0, [pc, #32]	; (80028b8 <NRF24_read_payload+0x5c>)
 8002896:	f003 ff45 	bl	8006724 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}
	//SPI_RxCplt = 0;
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len,10);
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	b29a      	uxth	r2, r3
 800289e:	230a      	movs	r3, #10
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4805      	ldr	r0, [pc, #20]	; (80028b8 <NRF24_read_payload+0x5c>)
 80028a4:	f004 f872 	bl	800698c <HAL_SPI_Receive>
//	while(!SPI_RxCplt){
//	}
	NRF24_csn(1);
 80028a8:	2001      	movs	r0, #1
 80028aa:	f7ff fefd 	bl	80026a8 <NRF24_csn>
}
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	2000012c 	.word	0x2000012c

080028bc <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80028c0:	21ff      	movs	r1, #255	; 0xff
 80028c2:	20e1      	movs	r0, #225	; 0xe1
 80028c4:	f7ff ff80 	bl	80027c8 <NRF24_write_register>
}
 80028c8:	bf00      	nop
 80028ca:	bd80      	pop	{r7, pc}

080028cc <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80028d0:	21ff      	movs	r1, #255	; 0xff
 80028d2:	20e2      	movs	r0, #226	; 0xe2
 80028d4:	f7ff ff78 	bl	80027c8 <NRF24_write_register>
}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}

080028dc <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80028e2:	2007      	movs	r0, #7
 80028e4:	f7ff ff20 	bl	8002728 <NRF24_read_register>
 80028e8:	4603      	mov	r3, r0
 80028ea:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80028ec:	79fb      	ldrb	r3, [r7, #7]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80028f8:	b082      	sub	sp, #8
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	61fb      	str	r3, [r7, #28]
 8002904:	460b      	mov	r3, r1
 8002906:	807b      	strh	r3, [r7, #2]
 8002908:	4613      	mov	r3, r2
 800290a:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &hspi2, sizeof(hspi2));
 800290c:	4a67      	ldr	r2, [pc, #412]	; (8002aac <NRF24_begin+0x1b4>)
 800290e:	4b68      	ldr	r3, [pc, #416]	; (8002ab0 <NRF24_begin+0x1b8>)
 8002910:	4610      	mov	r0, r2
 8002912:	4619      	mov	r1, r3
 8002914:	2358      	movs	r3, #88	; 0x58
 8002916:	461a      	mov	r2, r3
 8002918:	f009 fcb6 	bl	800c288 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800291c:	4a65      	ldr	r2, [pc, #404]	; (8002ab4 <NRF24_begin+0x1bc>)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8002922:	4a65      	ldr	r2, [pc, #404]	; (8002ab8 <NRF24_begin+0x1c0>)
 8002924:	887b      	ldrh	r3, [r7, #2]
 8002926:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8002928:	4a64      	ldr	r2, [pc, #400]	; (8002abc <NRF24_begin+0x1c4>)
 800292a:	883b      	ldrh	r3, [r7, #0]
 800292c:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 800292e:	2001      	movs	r0, #1
 8002930:	f7ff feba 	bl	80026a8 <NRF24_csn>
	NRF24_ce(0);
 8002934:	2000      	movs	r0, #0
 8002936:	f7ff fed7 	bl	80026e8 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800293a:	2005      	movs	r0, #5
 800293c:	f001 fa04 	bl	8003d48 <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8002940:	2108      	movs	r1, #8
 8002942:	2000      	movs	r0, #0
 8002944:	f7ff ff40 	bl	80027c8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8002948:	213f      	movs	r1, #63	; 0x3f
 800294a:	2001      	movs	r0, #1
 800294c:	f7ff ff3c 	bl	80027c8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8002950:	2103      	movs	r1, #3
 8002952:	2002      	movs	r0, #2
 8002954:	f7ff ff38 	bl	80027c8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8002958:	2103      	movs	r1, #3
 800295a:	2003      	movs	r0, #3
 800295c:	f7ff ff34 	bl	80027c8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8002960:	2103      	movs	r1, #3
 8002962:	2004      	movs	r0, #4
 8002964:	f7ff ff30 	bl	80027c8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8002968:	2102      	movs	r1, #2
 800296a:	2005      	movs	r0, #5
 800296c:	f7ff ff2c 	bl	80027c8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8002970:	210f      	movs	r1, #15
 8002972:	2006      	movs	r0, #6
 8002974:	f7ff ff28 	bl	80027c8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8002978:	210e      	movs	r1, #14
 800297a:	2007      	movs	r0, #7
 800297c:	f7ff ff24 	bl	80027c8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8002980:	2100      	movs	r1, #0
 8002982:	2008      	movs	r0, #8
 8002984:	f7ff ff20 	bl	80027c8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8002988:	2100      	movs	r1, #0
 800298a:	2009      	movs	r0, #9
 800298c:	f7ff ff1c 	bl	80027c8 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 8002990:	23e7      	movs	r3, #231	; 0xe7
 8002992:	733b      	strb	r3, [r7, #12]
 8002994:	23e7      	movs	r3, #231	; 0xe7
 8002996:	72fb      	strb	r3, [r7, #11]
 8002998:	23e7      	movs	r3, #231	; 0xe7
 800299a:	72bb      	strb	r3, [r7, #10]
 800299c:	23e7      	movs	r3, #231	; 0xe7
 800299e:	727b      	strb	r3, [r7, #9]
 80029a0:	23e7      	movs	r3, #231	; 0xe7
 80029a2:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80029a4:	f107 0308 	add.w	r3, r7, #8
 80029a8:	2205      	movs	r2, #5
 80029aa:	4619      	mov	r1, r3
 80029ac:	200a      	movs	r0, #10
 80029ae:	f7ff ff2d 	bl	800280c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 80029b2:	23c2      	movs	r3, #194	; 0xc2
 80029b4:	733b      	strb	r3, [r7, #12]
 80029b6:	23c2      	movs	r3, #194	; 0xc2
 80029b8:	72fb      	strb	r3, [r7, #11]
 80029ba:	23c2      	movs	r3, #194	; 0xc2
 80029bc:	72bb      	strb	r3, [r7, #10]
 80029be:	23c2      	movs	r3, #194	; 0xc2
 80029c0:	727b      	strb	r3, [r7, #9]
 80029c2:	23c2      	movs	r3, #194	; 0xc2
 80029c4:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80029c6:	f107 0308 	add.w	r3, r7, #8
 80029ca:	2205      	movs	r2, #5
 80029cc:	4619      	mov	r1, r3
 80029ce:	200b      	movs	r0, #11
 80029d0:	f7ff ff1c 	bl	800280c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80029d4:	21c3      	movs	r1, #195	; 0xc3
 80029d6:	200c      	movs	r0, #12
 80029d8:	f7ff fef6 	bl	80027c8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80029dc:	21c4      	movs	r1, #196	; 0xc4
 80029de:	200d      	movs	r0, #13
 80029e0:	f7ff fef2 	bl	80027c8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80029e4:	21c5      	movs	r1, #197	; 0xc5
 80029e6:	200e      	movs	r0, #14
 80029e8:	f7ff feee 	bl	80027c8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80029ec:	21c6      	movs	r1, #198	; 0xc6
 80029ee:	200f      	movs	r0, #15
 80029f0:	f7ff feea 	bl	80027c8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80029f4:	23e7      	movs	r3, #231	; 0xe7
 80029f6:	733b      	strb	r3, [r7, #12]
 80029f8:	23e7      	movs	r3, #231	; 0xe7
 80029fa:	72fb      	strb	r3, [r7, #11]
 80029fc:	23e7      	movs	r3, #231	; 0xe7
 80029fe:	72bb      	strb	r3, [r7, #10]
 8002a00:	23e7      	movs	r3, #231	; 0xe7
 8002a02:	727b      	strb	r3, [r7, #9]
 8002a04:	23e7      	movs	r3, #231	; 0xe7
 8002a06:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8002a08:	f107 0308 	add.w	r3, r7, #8
 8002a0c:	2205      	movs	r2, #5
 8002a0e:	4619      	mov	r1, r3
 8002a10:	2010      	movs	r0, #16
 8002a12:	f7ff fefb 	bl	800280c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8002a16:	2100      	movs	r1, #0
 8002a18:	2011      	movs	r0, #17
 8002a1a:	f7ff fed5 	bl	80027c8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8002a1e:	2100      	movs	r1, #0
 8002a20:	2012      	movs	r0, #18
 8002a22:	f7ff fed1 	bl	80027c8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8002a26:	2100      	movs	r1, #0
 8002a28:	2013      	movs	r0, #19
 8002a2a:	f7ff fecd 	bl	80027c8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8002a2e:	2100      	movs	r1, #0
 8002a30:	2014      	movs	r0, #20
 8002a32:	f7ff fec9 	bl	80027c8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8002a36:	2100      	movs	r1, #0
 8002a38:	2015      	movs	r0, #21
 8002a3a:	f7ff fec5 	bl	80027c8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8002a3e:	2100      	movs	r1, #0
 8002a40:	2016      	movs	r0, #22
 8002a42:	f7ff fec1 	bl	80027c8 <NRF24_write_register>

	NRF24_ACTIVATE_cmd();
 8002a46:	f000 fa9d 	bl	8002f84 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	201c      	movs	r0, #28
 8002a4e:	f7ff febb 	bl	80027c8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8002a52:	2100      	movs	r1, #0
 8002a54:	201d      	movs	r0, #29
 8002a56:	f7ff feb7 	bl	80027c8 <NRF24_write_register>
	//printRadioSettings();
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8002a5a:	210f      	movs	r1, #15
 8002a5c:	200f      	movs	r0, #15
 8002a5e:	f000 f8c9 	bl	8002bf4 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_m6dB);
 8002a62:	2002      	movs	r0, #2
 8002a64:	f000 f975 	bl	8002d52 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_1MBPS);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f000 f9ab 	bl	8002dc4 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8002a6e:	2002      	movs	r0, #2
 8002a70:	f000 f9ee 	bl	8002e50 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8002a74:	f000 f940 	bl	8002cf8 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8002a78:	2020      	movs	r0, #32
 8002a7a:	f000 f8eb 	bl	8002c54 <NRF24_setPayloadSize>

	// NICK - Set auto acknowledge and ack payload
	NRF24_setAutoAck(true);
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f000 f952 	bl	8002d28 <NRF24_setAutoAck>
	NRF24_enableAckPayload();
 8002a84:	f000 f90a 	bl	8002c9c <NRF24_enableAckPayload>


	//Reset status register
	NRF24_resetStatus();
 8002a88:	f000 fa73 	bl	8002f72 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8002a8c:	204c      	movs	r0, #76	; 0x4c
 8002a8e:	f000 f8cc 	bl	8002c2a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8002a92:	f7ff ff13 	bl	80028bc <NRF24_flush_tx>
	NRF24_flush_rx();
 8002a96:	f7ff ff19 	bl	80028cc <NRF24_flush_rx>

	NRF24_powerDown();
 8002a9a:	f000 fa01 	bl	8002ea0 <NRF24_powerDown>

}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002aa8:	b002      	add	sp, #8
 8002aaa:	4770      	bx	lr
 8002aac:	2000012c 	.word	0x2000012c
 8002ab0:	200047e0 	.word	0x200047e0
 8002ab4:	20000124 	.word	0x20000124
 8002ab8:	20000128 	.word	0x20000128
 8002abc:	2000012a 	.word	0x2000012a

08002ac0 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8002ac0:	b598      	push	{r3, r4, r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f7ff fe2f 	bl	8002728 <NRF24_read_register>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f043 0303 	orr.w	r3, r3, #3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7ff fe77 	bl	80027c8 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8002ada:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <NRF24_startListening+0x48>)
 8002adc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ae0:	4323      	orrs	r3, r4
 8002ae2:	d004      	beq.n	8002aee <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8002ae4:	2205      	movs	r2, #5
 8002ae6:	4908      	ldr	r1, [pc, #32]	; (8002b08 <NRF24_startListening+0x48>)
 8002ae8:	200a      	movs	r0, #10
 8002aea:	f7ff fe8f 	bl	800280c <NRF24_write_registerN>

	//Flush buffers
	NRF24_flush_tx();
 8002aee:	f7ff fee5 	bl	80028bc <NRF24_flush_tx>
	NRF24_flush_rx();
 8002af2:	f7ff feeb 	bl	80028cc <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8002af6:	2001      	movs	r0, #1
 8002af8:	f7ff fdf6 	bl	80026e8 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8002afc:	2096      	movs	r0, #150	; 0x96
 8002afe:	f7ff fdc7 	bl	8002690 <NRF24_DelayMicroSeconds>
}
 8002b02:	bf00      	nop
 8002b04:	bd98      	pop	{r3, r4, r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000118 	.word	0x20000118

08002b0c <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f000 f9d4 	bl	8002ebe <NRF24_availablePipe>
 8002b16:	4603      	mov	r3, r0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff fe95 	bl	800285c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8002b32:	2017      	movs	r0, #23
 8002b34:	f7ff fdf8 	bl	8002728 <NRF24_read_register>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8002b40:	f7ff fec4 	bl	80028cc <NRF24_flush_rx>
	//NRF24_getDynamicPayloadSize();
	return rxStatus;
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	bf14      	ite	ne
 8002b4a:	2301      	movne	r3, #1
 8002b4c:	2300      	moveq	r3, #0
 8002b4e:	b2db      	uxtb	r3, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
	NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8002b58:	b590      	push	{r4, r7, lr}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4601      	mov	r1, r0
 8002b60:	e9c7 2300 	strd	r2, r3, [r7]
 8002b64:	460b      	mov	r3, r1
 8002b66:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d104      	bne.n	8002b78 <NRF24_openReadingPipe+0x20>
		pipe0_reading_address = address;
 8002b6e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002b72:	4a1c      	ldr	r2, [pc, #112]	; (8002be4 <NRF24_openReadingPipe+0x8c>)
 8002b74:	e9c2 3400 	strd	r3, r4, [r2]

	if(number <= 6)
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	2b06      	cmp	r3, #6
 8002b7c:	d82d      	bhi.n	8002bda <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d808      	bhi.n	8002b96 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	4a18      	ldr	r2, [pc, #96]	; (8002be8 <NRF24_openReadingPipe+0x90>)
 8002b88:	5cd3      	ldrb	r3, [r2, r3]
 8002b8a:	4639      	mov	r1, r7
 8002b8c:	2205      	movs	r2, #5
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fe3c 	bl	800280c <NRF24_write_registerN>
 8002b94:	e007      	b.n	8002ba6 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <NRF24_openReadingPipe+0x90>)
 8002b9a:	5cd3      	ldrb	r3, [r2, r3]
 8002b9c:	4639      	mov	r1, r7
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fe33 	bl	800280c <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	4a10      	ldr	r2, [pc, #64]	; (8002bec <NRF24_openReadingPipe+0x94>)
 8002baa:	5cd2      	ldrb	r2, [r2, r3]
 8002bac:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <NRF24_openReadingPipe+0x98>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f7ff fe08 	bl	80027c8 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8002bb8:	2002      	movs	r0, #2
 8002bba:	f7ff fdb5 	bl	8002728 <NRF24_read_register>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	b25a      	sxtb	r2, r3
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	b25b      	sxtb	r3, r3
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	b25b      	sxtb	r3, r3
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	2002      	movs	r0, #2
 8002bd6:	f7ff fdf7 	bl	80027c8 <NRF24_write_register>
	}

}
 8002bda:	bf00      	nop
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd90      	pop	{r4, r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000118 	.word	0x20000118
 8002be8:	0800f680 	.word	0x0800f680
 8002bec:	0800f688 	.word	0x0800f688
 8002bf0:	20000120 	.word	0x20000120

08002bf4 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	460a      	mov	r2, r1
 8002bfe:	71fb      	strb	r3, [r7, #7]
 8002c00:	4613      	mov	r3, r2
 8002c02:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	b25a      	sxtb	r2, r3
 8002c0a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	b25b      	sxtb	r3, r3
 8002c14:	4313      	orrs	r3, r2
 8002c16:	b25b      	sxtb	r3, r3
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	2004      	movs	r0, #4
 8002c1e:	f7ff fdd3 	bl	80027c8 <NRF24_write_register>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	4603      	mov	r3, r0
 8002c32:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8002c34:	237f      	movs	r3, #127	; 0x7f
 8002c36:	73fb      	strb	r3, [r7, #15]
	NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	bf28      	it	cs
 8002c40:	4613      	movcs	r3, r2
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	4619      	mov	r1, r3
 8002c46:	2005      	movs	r0, #5
 8002c48:	f7ff fdbe 	bl	80027c8 <NRF24_write_register>
}
 8002c4c:	bf00      	nop
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8002c5e:	2320      	movs	r3, #32
 8002c60:	73fb      	strb	r3, [r7, #15]
	payload_size = MIN(size,max_payload_size);
 8002c62:	7bfa      	ldrb	r2, [r7, #15]
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	4293      	cmp	r3, r2
 8002c68:	bf28      	it	cs
 8002c6a:	4613      	movcs	r3, r2
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <NRF24_setPayloadSize+0x2c>)
 8002c70:	701a      	strb	r2, [r3, #0]
}
 8002c72:	bf00      	nop
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20000120 	.word	0x20000120

08002c84 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
	return payload_size;
 8002c88:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <NRF24_getPayloadSize+0x14>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	20000120 	.word	0x20000120

08002c9c <NRF24_enableAckPayload>:
{
	return NRF24_read_register(CMD_R_RX_PL_WID);
}
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8002ca0:	201d      	movs	r0, #29
 8002ca2:	f7ff fd41 	bl	8002728 <NRF24_read_register>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f043 0306 	orr.w	r3, r3, #6
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	4619      	mov	r1, r3
 8002cb0:	201d      	movs	r0, #29
 8002cb2:	f7ff fd89 	bl	80027c8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8002cb6:	201d      	movs	r0, #29
 8002cb8:	f7ff fd36 	bl	8002728 <NRF24_read_register>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10c      	bne.n	8002cdc <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8002cc2:	f000 f95f 	bl	8002f84 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8002cc6:	201d      	movs	r0, #29
 8002cc8:	f7ff fd2e 	bl	8002728 <NRF24_read_register>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f043 0306 	orr.w	r3, r3, #6
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	201d      	movs	r0, #29
 8002cd8:	f7ff fd76 	bl	80027c8 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8002cdc:	201c      	movs	r0, #28
 8002cde:	f7ff fd23 	bl	8002728 <NRF24_read_register>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f043 0303 	orr.w	r3, r3, #3
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	4619      	mov	r1, r3
 8002cec:	201c      	movs	r0, #28
 8002cee:	f7ff fd6b 	bl	80027c8 <NRF24_write_register>
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
	dynamic_payloads_enabled = true;

}
void NRF24_disableDynamicPayloads(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8002cfc:	201d      	movs	r0, #29
 8002cfe:	f7ff fd13 	bl	8002728 <NRF24_read_register>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f023 0304 	bic.w	r3, r3, #4
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	201d      	movs	r0, #29
 8002d0e:	f7ff fd5b 	bl	80027c8 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 8002d12:	2100      	movs	r1, #0
 8002d14:	201c      	movs	r0, #28
 8002d16:	f7ff fd57 	bl	80027c8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8002d1a:	4b02      	ldr	r3, [pc, #8]	; (8002d24 <NRF24_disableDynamicPayloads+0x2c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20000121 	.word	0x20000121

08002d28 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d004      	beq.n	8002d42 <NRF24_setAutoAck+0x1a>
		NRF24_write_register(REG_EN_AA, 0x3F);
 8002d38:	213f      	movs	r1, #63	; 0x3f
 8002d3a:	2001      	movs	r0, #1
 8002d3c:	f7ff fd44 	bl	80027c8 <NRF24_write_register>
	else
		NRF24_write_register(REG_EN_AA, 0x00);
}
 8002d40:	e003      	b.n	8002d4a <NRF24_setAutoAck+0x22>
		NRF24_write_register(REG_EN_AA, 0x00);
 8002d42:	2100      	movs	r1, #0
 8002d44:	2001      	movs	r0, #1
 8002d46:	f7ff fd3f 	bl	80027c8 <NRF24_write_register>
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <NRF24_setPALevel>:
		NRF24_write_register( REG_EN_AA, en_aa ) ;
	}
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	4603      	mov	r3, r0
 8002d5a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8002d5c:	2006      	movs	r0, #6
 8002d5e:	f7ff fce3 	bl	8002728 <NRF24_read_register>
 8002d62:	4603      	mov	r3, r0
 8002d64:	73fb      	strb	r3, [r7, #15]
	setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	f023 0306 	bic.w	r3, r3, #6
 8002d6c:	73fb      	strb	r3, [r7, #15]

	// switch uses RAM (evil!)
	if ( level == RF24_PA_0dB)
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d104      	bne.n	8002d7e <NRF24_setPALevel+0x2c>
	{
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	f043 0306 	orr.w	r3, r3, #6
 8002d7a:	73fb      	strb	r3, [r7, #15]
 8002d7c:	e019      	b.n	8002db2 <NRF24_setPALevel+0x60>
	}
	else if ( level == RF24_PA_m6dB )
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d104      	bne.n	8002d8e <NRF24_setPALevel+0x3c>
	{
		setup |= _BV(RF_PWR_HIGH) ;
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	f043 0304 	orr.w	r3, r3, #4
 8002d8a:	73fb      	strb	r3, [r7, #15]
 8002d8c:	e011      	b.n	8002db2 <NRF24_setPALevel+0x60>
	}
	else if ( level == RF24_PA_m12dB )
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d104      	bne.n	8002d9e <NRF24_setPALevel+0x4c>
	{
		setup |= _BV(RF_PWR_LOW);
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	f043 0302 	orr.w	r3, r3, #2
 8002d9a:	73fb      	strb	r3, [r7, #15]
 8002d9c:	e009      	b.n	8002db2 <NRF24_setPALevel+0x60>
	}
	else if ( level == RF24_PA_m18dB )
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d006      	beq.n	8002db2 <NRF24_setPALevel+0x60>
	{
		// nothing
	}
	else if ( level == RF24_PA_ERROR )
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d103      	bne.n	8002db2 <NRF24_setPALevel+0x60>
	{
		// On error, go to maximum PA
		setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	f043 0306 	orr.w	r3, r3, #6
 8002db0:	73fb      	strb	r3, [r7, #15]
	}

	NRF24_write_register( REG_RF_SETUP, setup ) ;
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	4619      	mov	r1, r3
 8002db6:	2006      	movs	r0, #6
 8002db8:	f7ff fd06 	bl	80027c8 <NRF24_write_register>
}
 8002dbc:	bf00      	nop
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <NRF24_setDataRate>:

	return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8002dd2:	2006      	movs	r0, #6
 8002dd4:	f7ff fca8 	bl	8002728 <NRF24_read_register>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	73bb      	strb	r3, [r7, #14]

	// HIGH and LOW '00' is 1Mbs - our default
	wide_band = false ;
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	; (8002e4c <NRF24_setDataRate+0x88>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8002de2:	7bbb      	ldrb	r3, [r7, #14]
 8002de4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002de8:	73bb      	strb	r3, [r7, #14]
	if( speed == RF24_250KBPS )
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d107      	bne.n	8002e00 <NRF24_setDataRate+0x3c>
	{
		// Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
		// Making it '10'.
		wide_band = false ;
 8002df0:	4b16      	ldr	r3, [pc, #88]	; (8002e4c <NRF24_setDataRate+0x88>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
		setup |= _BV( RF_DR_LOW ) ;
 8002df6:	7bbb      	ldrb	r3, [r7, #14]
 8002df8:	f043 0320 	orr.w	r3, r3, #32
 8002dfc:	73bb      	strb	r3, [r7, #14]
 8002dfe:	e00d      	b.n	8002e1c <NRF24_setDataRate+0x58>
	}
	else
	{
		// Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
		// Making it '01'
		if ( speed == RF24_2MBPS )
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d107      	bne.n	8002e16 <NRF24_setDataRate+0x52>
		{
			wide_band = true ;
 8002e06:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <NRF24_setDataRate+0x88>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	701a      	strb	r2, [r3, #0]
			setup |= _BV(RF_DR_HIGH);
 8002e0c:	7bbb      	ldrb	r3, [r7, #14]
 8002e0e:	f043 0308 	orr.w	r3, r3, #8
 8002e12:	73bb      	strb	r3, [r7, #14]
 8002e14:	e002      	b.n	8002e1c <NRF24_setDataRate+0x58>
		}
		else
		{
			// 1Mbs
			wide_band = false ;
 8002e16:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <NRF24_setDataRate+0x88>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
		}
	}
	NRF24_write_register(REG_RF_SETUP,setup);
 8002e1c:	7bbb      	ldrb	r3, [r7, #14]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	2006      	movs	r0, #6
 8002e22:	f7ff fcd1 	bl	80027c8 <NRF24_write_register>

	// Verify our result
	if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8002e26:	2006      	movs	r0, #6
 8002e28:	f7ff fc7e 	bl	8002728 <NRF24_read_register>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461a      	mov	r2, r3
 8002e30:	7bbb      	ldrb	r3, [r7, #14]
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d102      	bne.n	8002e3c <NRF24_setDataRate+0x78>
	{
		result = true;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
 8002e3a:	e002      	b.n	8002e42 <NRF24_setDataRate+0x7e>
	}
	else
	{
		wide_band = false;
 8002e3c:	4b03      	ldr	r3, [pc, #12]	; (8002e4c <NRF24_setDataRate+0x88>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	701a      	strb	r2, [r3, #0]
	}

	return result;
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20000122 	.word	0x20000122

08002e50 <NRF24_setCRCLength>:
	}
	return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7ff fc64 	bl	8002728 <NRF24_read_register>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f023 030c 	bic.w	r3, r3, #12
 8002e66:	73fb      	strb	r3, [r7, #15]

	// switch uses RAM
	if ( length == RF24_CRC_DISABLED )
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00f      	beq.n	8002e8e <NRF24_setCRCLength+0x3e>
	{
		// Do nothing, we turned it off above.
	}
	else if ( length == RF24_CRC_8 )
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d104      	bne.n	8002e7e <NRF24_setCRCLength+0x2e>
	{
		config |= _BV(BIT_EN_CRC);
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	f043 0308 	orr.w	r3, r3, #8
 8002e7a:	73fb      	strb	r3, [r7, #15]
 8002e7c:	e007      	b.n	8002e8e <NRF24_setCRCLength+0x3e>
	}
	else
	{
		config |= _BV(BIT_EN_CRC);
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	f043 0308 	orr.w	r3, r3, #8
 8002e84:	73fb      	strb	r3, [r7, #15]
		config |= _BV( BIT_CRCO );
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	73fb      	strb	r3, [r7, #15]
	}
	NRF24_write_register( REG_CONFIG, config );
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	4619      	mov	r1, r3
 8002e92:	2000      	movs	r0, #0
 8002e94:	f7ff fc98 	bl	80027c8 <NRF24_write_register>
}
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f7ff fc3f 	bl	8002728 <NRF24_read_register>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f023 0302 	bic.w	r3, r3, #2
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f7ff fc87 	bl	80027c8 <NRF24_write_register>
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8002ec6:	f7ff fd09 	bl	80028dc <NRF24_get_status>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	73fb      	strb	r3, [r7, #15]

	bool result = ( status & _BV(BIT_RX_DR) );
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf14      	ite	ne
 8002ed8:	2301      	movne	r3, #1
 8002eda:	2300      	moveq	r3, #0
 8002edc:	73bb      	strb	r3, [r7, #14]

	if (result)
 8002ede:	7bbb      	ldrb	r3, [r7, #14]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d017      	beq.n	8002f14 <NRF24_availablePipe+0x56>
	{
		// If the caller wants the pipe number, include that
		if ( pipe_num )
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <NRF24_availablePipe+0x3c>
			*pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	701a      	strb	r2, [r3, #0]

		// Clear the status bit
		NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8002efa:	2140      	movs	r1, #64	; 0x40
 8002efc:	2007      	movs	r0, #7
 8002efe:	f7ff fc63 	bl	80027c8 <NRF24_write_register>

		// Handle ack payload receipt
		if ( status & _BV(BIT_TX_DS) )
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <NRF24_availablePipe+0x56>
		{
			NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8002f0c:	2120      	movs	r1, #32
 8002f0e:	2007      	movs	r0, #7
 8002f10:	f7ff fc5a 	bl	80027c8 <NRF24_write_register>
		}
	}
	return result;
 8002f14:	7bbb      	ldrb	r3, [r7, #14]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <NRF24_writeAckPayload>:
	NRF24_DelayMicroSeconds(15);
	NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	4603      	mov	r3, r0
 8002f26:	6039      	str	r1, [r7, #0]
 8002f28:	71fb      	strb	r3, [r7, #7]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 8002f32:	2320      	movs	r3, #32
 8002f34:	72fb      	strb	r3, [r7, #11]
	uint8_t data_len = MIN(len,max_payload_size);
 8002f36:	7afa      	ldrb	r2, [r7, #11]
 8002f38:	79bb      	ldrb	r3, [r7, #6]
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	bf28      	it	cs
 8002f3e:	4613      	movcs	r3, r2
 8002f40:	72bb      	strb	r3, [r7, #10]

	NRF24_csn(0);
 8002f42:	2000      	movs	r0, #0
 8002f44:	f7ff fbb0 	bl	80026a8 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8002f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	b25b      	sxtb	r3, r3
 8002f52:	f063 0357 	orn	r3, r3, #87	; 0x57
 8002f56:	b25b      	sxtb	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	7aba      	ldrb	r2, [r7, #10]
 8002f5c:	68f9      	ldr	r1, [r7, #12]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff fc54 	bl	800280c <NRF24_write_registerN>
	NRF24_csn(1);
 8002f64:	2001      	movs	r0, #1
 8002f66:	f7ff fb9f 	bl	80026a8 <NRF24_csn>
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8002f76:	2170      	movs	r1, #112	; 0x70
 8002f78:	2007      	movs	r0, #7
 8002f7a:	f7ff fc25 	bl	80027c8 <NRF24_write_register>
}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f7ff fb8c 	bl	80026a8 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8002f90:	2350      	movs	r3, #80	; 0x50
 8002f92:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8002f94:	2373      	movs	r3, #115	; 0x73
 8002f96:	717b      	strb	r3, [r7, #5]
	//SPI_TxCplt = 0;
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2,2);
 8002f98:	1d39      	adds	r1, r7, #4
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	4805      	ldr	r0, [pc, #20]	; (8002fb4 <NRF24_ACTIVATE_cmd+0x30>)
 8002fa0:	f003 fbc0 	bl	8006724 <HAL_SPI_Transmit>
//	while(!SPI_TxCplt){
//	}

	NRF24_csn(1);
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	f7ff fb7f 	bl	80026a8 <NRF24_csn>
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	2000012c 	.word	0x2000012c

08002fb8 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8002fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fba:	b0a1      	sub	sp, #132	; 0x84
 8002fbc:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002fbe:	f107 0308 	add.w	r3, r7, #8
 8002fc2:	4ab6      	ldr	r2, [pc, #728]	; (800329c <printRadioSettings+0x2e4>)
 8002fc4:	461c      	mov	r4, r3
 8002fc6:	4615      	mov	r5, r2
 8002fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fd4:	682b      	ldr	r3, [r5, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	8022      	strh	r2, [r4, #0]
 8002fda:	3402      	adds	r4, #2
 8002fdc:	0c1b      	lsrs	r3, r3, #16
 8002fde:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002fe0:	f107 0308 	add.w	r3, r7, #8
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fd f8fb 	bl	80001e0 <strlen>
 8002fea:	4603      	mov	r3, r0
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	f107 0108 	add.w	r1, r7, #8
 8002ff2:	230a      	movs	r3, #10
 8002ff4:	48aa      	ldr	r0, [pc, #680]	; (80032a0 <printRadioSettings+0x2e8>)
 8002ff6:	f004 ff42 	bl	8007e7e <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	f7ff fb94 	bl	8002728 <NRF24_read_register>
 8003000:	4603      	mov	r3, r0
 8003002:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8003006:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d020      	beq.n	8003054 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8003012:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <printRadioSettings+0x7e>
 800301e:	f107 0308 	add.w	r3, r7, #8
 8003022:	4aa0      	ldr	r2, [pc, #640]	; (80032a4 <printRadioSettings+0x2ec>)
 8003024:	461c      	mov	r4, r3
 8003026:	4615      	mov	r5, r2
 8003028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800302a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800302c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003030:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003034:	e017      	b.n	8003066 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 8003036:	f107 0308 	add.w	r3, r7, #8
 800303a:	4a9b      	ldr	r2, [pc, #620]	; (80032a8 <printRadioSettings+0x2f0>)
 800303c:	461c      	mov	r4, r3
 800303e:	4615      	mov	r5, r2
 8003040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003044:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003048:	c403      	stmia	r4!, {r0, r1}
 800304a:	8022      	strh	r2, [r4, #0]
 800304c:	3402      	adds	r4, #2
 800304e:	0c13      	lsrs	r3, r2, #16
 8003050:	7023      	strb	r3, [r4, #0]
 8003052:	e008      	b.n	8003066 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8003054:	f107 0308 	add.w	r3, r7, #8
 8003058:	4a94      	ldr	r2, [pc, #592]	; (80032ac <printRadioSettings+0x2f4>)
 800305a:	461c      	mov	r4, r3
 800305c:	4615      	mov	r5, r2
 800305e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003062:	682b      	ldr	r3, [r5, #0]
 8003064:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003066:	f107 0308 	add.w	r3, r7, #8
 800306a:	4618      	mov	r0, r3
 800306c:	f7fd f8b8 	bl	80001e0 <strlen>
 8003070:	4603      	mov	r3, r0
 8003072:	b29a      	uxth	r2, r3
 8003074:	f107 0108 	add.w	r1, r7, #8
 8003078:	230a      	movs	r3, #10
 800307a:	4889      	ldr	r0, [pc, #548]	; (80032a0 <printRadioSettings+0x2e8>)
 800307c:	f004 feff 	bl	8007e7e <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8003080:	2001      	movs	r0, #1
 8003082:	f7ff fb51 	bl	8002728 <NRF24_read_register>
 8003086:	4603      	mov	r3, r0
 8003088:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800308c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003090:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003094:	2b00      	cmp	r3, #0
 8003096:	bfcc      	ite	gt
 8003098:	2301      	movgt	r3, #1
 800309a:	2300      	movle	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	461d      	mov	r5, r3
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80030a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80030a4:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bfcc      	ite	gt
 80030ac:	2301      	movgt	r3, #1
 80030ae:	2300      	movle	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	461e      	mov	r6, r3
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80030b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80030b8:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bfcc      	ite	gt
 80030c0:	2301      	movgt	r3, #1
 80030c2:	2300      	movle	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80030c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80030cc:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bfcc      	ite	gt
 80030d4:	2301      	movgt	r3, #1
 80030d6:	2300      	movle	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	4619      	mov	r1, r3
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80030dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80030e0:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bfcc      	ite	gt
 80030e8:	2301      	movgt	r3, #1
 80030ea:	2300      	movle	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	461c      	mov	r4, r3
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80030f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80030f4:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bfcc      	ite	gt
 80030fc:	2301      	movgt	r3, #1
 80030fe:	2300      	movle	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	f107 0008 	add.w	r0, r7, #8
 8003106:	9303      	str	r3, [sp, #12]
 8003108:	9402      	str	r4, [sp, #8]
 800310a:	9101      	str	r1, [sp, #4]
 800310c:	9200      	str	r2, [sp, #0]
 800310e:	4633      	mov	r3, r6
 8003110:	462a      	mov	r2, r5
 8003112:	4967      	ldr	r1, [pc, #412]	; (80032b0 <printRadioSettings+0x2f8>)
 8003114:	f009 f948 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003118:	f107 0308 	add.w	r3, r7, #8
 800311c:	4618      	mov	r0, r3
 800311e:	f7fd f85f 	bl	80001e0 <strlen>
 8003122:	4603      	mov	r3, r0
 8003124:	b29a      	uxth	r2, r3
 8003126:	f107 0108 	add.w	r1, r7, #8
 800312a:	230a      	movs	r3, #10
 800312c:	485c      	ldr	r0, [pc, #368]	; (80032a0 <printRadioSettings+0x2e8>)
 800312e:	f004 fea6 	bl	8007e7e <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8003132:	2002      	movs	r0, #2
 8003134:	f7ff faf8 	bl	8002728 <NRF24_read_register>
 8003138:	4603      	mov	r3, r0
 800313a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800313e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003142:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003146:	2b00      	cmp	r3, #0
 8003148:	bfcc      	ite	gt
 800314a:	2301      	movgt	r3, #1
 800314c:	2300      	movle	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	461d      	mov	r5, r3
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003152:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003156:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800315a:	2b00      	cmp	r3, #0
 800315c:	bfcc      	ite	gt
 800315e:	2301      	movgt	r3, #1
 8003160:	2300      	movle	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	461e      	mov	r6, r3
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003166:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800316a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800316e:	2b00      	cmp	r3, #0
 8003170:	bfcc      	ite	gt
 8003172:	2301      	movgt	r3, #1
 8003174:	2300      	movle	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	461a      	mov	r2, r3
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800317a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800317e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003182:	2b00      	cmp	r3, #0
 8003184:	bfcc      	ite	gt
 8003186:	2301      	movgt	r3, #1
 8003188:	2300      	movle	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	4619      	mov	r1, r3
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800318e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003192:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003196:	2b00      	cmp	r3, #0
 8003198:	bfcc      	ite	gt
 800319a:	2301      	movgt	r3, #1
 800319c:	2300      	movle	r3, #0
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	461c      	mov	r4, r3
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80031a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80031a6:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	bfcc      	ite	gt
 80031ae:	2301      	movgt	r3, #1
 80031b0:	2300      	movle	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	f107 0008 	add.w	r0, r7, #8
 80031b8:	9303      	str	r3, [sp, #12]
 80031ba:	9402      	str	r4, [sp, #8]
 80031bc:	9101      	str	r1, [sp, #4]
 80031be:	9200      	str	r2, [sp, #0]
 80031c0:	4633      	mov	r3, r6
 80031c2:	462a      	mov	r2, r5
 80031c4:	493b      	ldr	r1, [pc, #236]	; (80032b4 <printRadioSettings+0x2fc>)
 80031c6:	f009 f8ef 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80031ca:	f107 0308 	add.w	r3, r7, #8
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd f806 	bl	80001e0 <strlen>
 80031d4:	4603      	mov	r3, r0
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	f107 0108 	add.w	r1, r7, #8
 80031dc:	230a      	movs	r3, #10
 80031de:	4830      	ldr	r0, [pc, #192]	; (80032a0 <printRadioSettings+0x2e8>)
 80031e0:	f004 fe4d 	bl	8007e7e <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80031e4:	2003      	movs	r0, #3
 80031e6:	f7ff fa9f 	bl	8002728 <NRF24_read_register>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80031f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80031f8:	3302      	adds	r3, #2
 80031fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80031fe:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8003202:	f107 0308 	add.w	r3, r7, #8
 8003206:	492c      	ldr	r1, [pc, #176]	; (80032b8 <printRadioSettings+0x300>)
 8003208:	4618      	mov	r0, r3
 800320a:	f009 f8cd 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800320e:	f107 0308 	add.w	r3, r7, #8
 8003212:	4618      	mov	r0, r3
 8003214:	f7fc ffe4 	bl	80001e0 <strlen>
 8003218:	4603      	mov	r3, r0
 800321a:	b29a      	uxth	r2, r3
 800321c:	f107 0108 	add.w	r1, r7, #8
 8003220:	230a      	movs	r3, #10
 8003222:	481f      	ldr	r0, [pc, #124]	; (80032a0 <printRadioSettings+0x2e8>)
 8003224:	f004 fe2b 	bl	8007e7e <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8003228:	2005      	movs	r0, #5
 800322a:	f7ff fa7d 	bl	8002728 <NRF24_read_register>
 800322e:	4603      	mov	r3, r0
 8003230:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8003234:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003238:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800323c:	f107 0308 	add.w	r3, r7, #8
 8003240:	491e      	ldr	r1, [pc, #120]	; (80032bc <printRadioSettings+0x304>)
 8003242:	4618      	mov	r0, r3
 8003244:	f009 f8b0 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003248:	f107 0308 	add.w	r3, r7, #8
 800324c:	4618      	mov	r0, r3
 800324e:	f7fc ffc7 	bl	80001e0 <strlen>
 8003252:	4603      	mov	r3, r0
 8003254:	b29a      	uxth	r2, r3
 8003256:	f107 0108 	add.w	r1, r7, #8
 800325a:	230a      	movs	r3, #10
 800325c:	4810      	ldr	r0, [pc, #64]	; (80032a0 <printRadioSettings+0x2e8>)
 800325e:	f004 fe0e 	bl	8007e7e <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8003262:	2006      	movs	r0, #6
 8003264:	f7ff fa60 	bl	8002728 <NRF24_read_register>
 8003268:	4603      	mov	r3, r0
 800326a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800326e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d024      	beq.n	80032c4 <printRadioSettings+0x30c>
 800327a:	f107 0308 	add.w	r3, r7, #8
 800327e:	4a10      	ldr	r2, [pc, #64]	; (80032c0 <printRadioSettings+0x308>)
 8003280:	461c      	mov	r4, r3
 8003282:	4615      	mov	r5, r2
 8003284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003288:	e895 0003 	ldmia.w	r5, {r0, r1}
 800328c:	6020      	str	r0, [r4, #0]
 800328e:	3404      	adds	r4, #4
 8003290:	8021      	strh	r1, [r4, #0]
 8003292:	3402      	adds	r4, #2
 8003294:	0c0b      	lsrs	r3, r1, #16
 8003296:	7023      	strb	r3, [r4, #0]
 8003298:	e023      	b.n	80032e2 <printRadioSettings+0x32a>
 800329a:	bf00      	nop
 800329c:	0800f098 	.word	0x0800f098
 80032a0:	20000184 	.word	0x20000184
 80032a4:	0800f0cc 	.word	0x0800f0cc
 80032a8:	0800f0e8 	.word	0x0800f0e8
 80032ac:	0800f104 	.word	0x0800f104
 80032b0:	0800f118 	.word	0x0800f118
 80032b4:	0800f15c 	.word	0x0800f15c
 80032b8:	0800f1a8 	.word	0x0800f1a8
 80032bc:	0800f1c4 	.word	0x0800f1c4
 80032c0:	0800f1d8 	.word	0x0800f1d8
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80032c4:	f107 0308 	add.w	r3, r7, #8
 80032c8:	4a29      	ldr	r2, [pc, #164]	; (8003370 <printRadioSettings+0x3b8>)
 80032ca:	461c      	mov	r4, r3
 80032cc:	4615      	mov	r5, r2
 80032ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80032d6:	6020      	str	r0, [r4, #0]
 80032d8:	3404      	adds	r4, #4
 80032da:	8021      	strh	r1, [r4, #0]
 80032dc:	3402      	adds	r4, #2
 80032de:	0c0b      	lsrs	r3, r1, #16
 80032e0:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80032e2:	f107 0308 	add.w	r3, r7, #8
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fc ff7a 	bl	80001e0 <strlen>
 80032ec:	4603      	mov	r3, r0
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	f107 0108 	add.w	r1, r7, #8
 80032f4:	230a      	movs	r3, #10
 80032f6:	481f      	ldr	r0, [pc, #124]	; (8003374 <printRadioSettings+0x3bc>)
 80032f8:	f004 fdc1 	bl	8007e7e <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80032fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003300:	f003 0306 	and.w	r3, r3, #6
 8003304:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8003308:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800330c:	085b      	lsrs	r3, r3, #1
 800330e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8003312:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <printRadioSettings+0x376>
 800331a:	f107 0308 	add.w	r3, r7, #8
 800331e:	4a16      	ldr	r2, [pc, #88]	; (8003378 <printRadioSettings+0x3c0>)
 8003320:	461c      	mov	r4, r3
 8003322:	4615      	mov	r5, r2
 8003324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003328:	682b      	ldr	r3, [r5, #0]
 800332a:	6023      	str	r3, [r4, #0]
 800332c:	e037      	b.n	800339e <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800332e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003332:	2b01      	cmp	r3, #1
 8003334:	d109      	bne.n	800334a <printRadioSettings+0x392>
 8003336:	f107 0308 	add.w	r3, r7, #8
 800333a:	4a10      	ldr	r2, [pc, #64]	; (800337c <printRadioSettings+0x3c4>)
 800333c:	461c      	mov	r4, r3
 800333e:	4615      	mov	r5, r2
 8003340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003344:	682b      	ldr	r3, [r5, #0]
 8003346:	6023      	str	r3, [r4, #0]
 8003348:	e029      	b.n	800339e <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800334a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800334e:	2b02      	cmp	r3, #2
 8003350:	d118      	bne.n	8003384 <printRadioSettings+0x3cc>
 8003352:	f107 0308 	add.w	r3, r7, #8
 8003356:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <printRadioSettings+0x3c8>)
 8003358:	461c      	mov	r4, r3
 800335a:	4615      	mov	r5, r2
 800335c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800335e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003360:	682b      	ldr	r3, [r5, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	8022      	strh	r2, [r4, #0]
 8003366:	3402      	adds	r4, #2
 8003368:	0c1b      	lsrs	r3, r3, #16
 800336a:	7023      	strb	r3, [r4, #0]
 800336c:	e017      	b.n	800339e <printRadioSettings+0x3e6>
 800336e:	bf00      	nop
 8003370:	0800f1f0 	.word	0x0800f1f0
 8003374:	20000184 	.word	0x20000184
 8003378:	0800f208 	.word	0x0800f208
 800337c:	0800f21c 	.word	0x0800f21c
 8003380:	0800f230 	.word	0x0800f230
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8003384:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003388:	2b03      	cmp	r3, #3
 800338a:	d108      	bne.n	800339e <printRadioSettings+0x3e6>
 800338c:	f107 0308 	add.w	r3, r7, #8
 8003390:	4ad7      	ldr	r2, [pc, #860]	; (80036f0 <printRadioSettings+0x738>)
 8003392:	461c      	mov	r4, r3
 8003394:	4615      	mov	r5, r2
 8003396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800339a:	682b      	ldr	r3, [r5, #0]
 800339c:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800339e:	f107 0308 	add.w	r3, r7, #8
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fc ff1c 	bl	80001e0 <strlen>
 80033a8:	4603      	mov	r3, r0
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	f107 0108 	add.w	r1, r7, #8
 80033b0:	230a      	movs	r3, #10
 80033b2:	48d0      	ldr	r0, [pc, #832]	; (80036f4 <printRadioSettings+0x73c>)
 80033b4:	f004 fd63 	bl	8007e7e <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 80033b8:	463b      	mov	r3, r7
 80033ba:	2205      	movs	r2, #5
 80033bc:	4619      	mov	r1, r3
 80033be:	200a      	movs	r0, #10
 80033c0:	f7ff f9da 	bl	8002778 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80033c4:	793b      	ldrb	r3, [r7, #4]
 80033c6:	461c      	mov	r4, r3
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	461d      	mov	r5, r3
 80033cc:	78bb      	ldrb	r3, [r7, #2]
 80033ce:	787a      	ldrb	r2, [r7, #1]
 80033d0:	7839      	ldrb	r1, [r7, #0]
 80033d2:	f107 0008 	add.w	r0, r7, #8
 80033d6:	9102      	str	r1, [sp, #8]
 80033d8:	9201      	str	r2, [sp, #4]
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	462b      	mov	r3, r5
 80033de:	4622      	mov	r2, r4
 80033e0:	49c5      	ldr	r1, [pc, #788]	; (80036f8 <printRadioSettings+0x740>)
 80033e2:	f008 ffe1 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80033e6:	f107 0308 	add.w	r3, r7, #8
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fc fef8 	bl	80001e0 <strlen>
 80033f0:	4603      	mov	r3, r0
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	f107 0108 	add.w	r1, r7, #8
 80033f8:	230a      	movs	r3, #10
 80033fa:	48be      	ldr	r0, [pc, #760]	; (80036f4 <printRadioSettings+0x73c>)
 80033fc:	f004 fd3f 	bl	8007e7e <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8003400:	463b      	mov	r3, r7
 8003402:	2205      	movs	r2, #5
 8003404:	4619      	mov	r1, r3
 8003406:	200b      	movs	r0, #11
 8003408:	f7ff f9b6 	bl	8002778 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800340c:	793b      	ldrb	r3, [r7, #4]
 800340e:	461c      	mov	r4, r3
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	461d      	mov	r5, r3
 8003414:	78bb      	ldrb	r3, [r7, #2]
 8003416:	787a      	ldrb	r2, [r7, #1]
 8003418:	7839      	ldrb	r1, [r7, #0]
 800341a:	f107 0008 	add.w	r0, r7, #8
 800341e:	9102      	str	r1, [sp, #8]
 8003420:	9201      	str	r2, [sp, #4]
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	462b      	mov	r3, r5
 8003426:	4622      	mov	r2, r4
 8003428:	49b4      	ldr	r1, [pc, #720]	; (80036fc <printRadioSettings+0x744>)
 800342a:	f008 ffbd 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800342e:	f107 0308 	add.w	r3, r7, #8
 8003432:	4618      	mov	r0, r3
 8003434:	f7fc fed4 	bl	80001e0 <strlen>
 8003438:	4603      	mov	r3, r0
 800343a:	b29a      	uxth	r2, r3
 800343c:	f107 0108 	add.w	r1, r7, #8
 8003440:	230a      	movs	r3, #10
 8003442:	48ac      	ldr	r0, [pc, #688]	; (80036f4 <printRadioSettings+0x73c>)
 8003444:	f004 fd1b 	bl	8007e7e <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8003448:	463b      	mov	r3, r7
 800344a:	2201      	movs	r2, #1
 800344c:	4619      	mov	r1, r3
 800344e:	200c      	movs	r0, #12
 8003450:	f7ff f992 	bl	8002778 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8003454:	783b      	ldrb	r3, [r7, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	f107 0308 	add.w	r3, r7, #8
 800345c:	49a8      	ldr	r1, [pc, #672]	; (8003700 <printRadioSettings+0x748>)
 800345e:	4618      	mov	r0, r3
 8003460:	f008 ffa2 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003464:	f107 0308 	add.w	r3, r7, #8
 8003468:	4618      	mov	r0, r3
 800346a:	f7fc feb9 	bl	80001e0 <strlen>
 800346e:	4603      	mov	r3, r0
 8003470:	b29a      	uxth	r2, r3
 8003472:	f107 0108 	add.w	r1, r7, #8
 8003476:	230a      	movs	r3, #10
 8003478:	489e      	ldr	r0, [pc, #632]	; (80036f4 <printRadioSettings+0x73c>)
 800347a:	f004 fd00 	bl	8007e7e <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800347e:	463b      	mov	r3, r7
 8003480:	2201      	movs	r2, #1
 8003482:	4619      	mov	r1, r3
 8003484:	200d      	movs	r0, #13
 8003486:	f7ff f977 	bl	8002778 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800348a:	783b      	ldrb	r3, [r7, #0]
 800348c:	461a      	mov	r2, r3
 800348e:	f107 0308 	add.w	r3, r7, #8
 8003492:	499c      	ldr	r1, [pc, #624]	; (8003704 <printRadioSettings+0x74c>)
 8003494:	4618      	mov	r0, r3
 8003496:	f008 ff87 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800349a:	f107 0308 	add.w	r3, r7, #8
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fc fe9e 	bl	80001e0 <strlen>
 80034a4:	4603      	mov	r3, r0
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	f107 0108 	add.w	r1, r7, #8
 80034ac:	230a      	movs	r3, #10
 80034ae:	4891      	ldr	r0, [pc, #580]	; (80036f4 <printRadioSettings+0x73c>)
 80034b0:	f004 fce5 	bl	8007e7e <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80034b4:	463b      	mov	r3, r7
 80034b6:	2201      	movs	r2, #1
 80034b8:	4619      	mov	r1, r3
 80034ba:	200e      	movs	r0, #14
 80034bc:	f7ff f95c 	bl	8002778 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80034c0:	783b      	ldrb	r3, [r7, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	f107 0308 	add.w	r3, r7, #8
 80034c8:	498f      	ldr	r1, [pc, #572]	; (8003708 <printRadioSettings+0x750>)
 80034ca:	4618      	mov	r0, r3
 80034cc:	f008 ff6c 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80034d0:	f107 0308 	add.w	r3, r7, #8
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fc fe83 	bl	80001e0 <strlen>
 80034da:	4603      	mov	r3, r0
 80034dc:	b29a      	uxth	r2, r3
 80034de:	f107 0108 	add.w	r1, r7, #8
 80034e2:	230a      	movs	r3, #10
 80034e4:	4883      	ldr	r0, [pc, #524]	; (80036f4 <printRadioSettings+0x73c>)
 80034e6:	f004 fcca 	bl	8007e7e <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80034ea:	463b      	mov	r3, r7
 80034ec:	2201      	movs	r2, #1
 80034ee:	4619      	mov	r1, r3
 80034f0:	200f      	movs	r0, #15
 80034f2:	f7ff f941 	bl	8002778 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80034f6:	783b      	ldrb	r3, [r7, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	f107 0308 	add.w	r3, r7, #8
 80034fe:	4983      	ldr	r1, [pc, #524]	; (800370c <printRadioSettings+0x754>)
 8003500:	4618      	mov	r0, r3
 8003502:	f008 ff51 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003506:	f107 0308 	add.w	r3, r7, #8
 800350a:	4618      	mov	r0, r3
 800350c:	f7fc fe68 	bl	80001e0 <strlen>
 8003510:	4603      	mov	r3, r0
 8003512:	b29a      	uxth	r2, r3
 8003514:	f107 0108 	add.w	r1, r7, #8
 8003518:	230a      	movs	r3, #10
 800351a:	4876      	ldr	r0, [pc, #472]	; (80036f4 <printRadioSettings+0x73c>)
 800351c:	f004 fcaf 	bl	8007e7e <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8003520:	463b      	mov	r3, r7
 8003522:	2205      	movs	r2, #5
 8003524:	4619      	mov	r1, r3
 8003526:	2010      	movs	r0, #16
 8003528:	f7ff f926 	bl	8002778 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800352c:	793b      	ldrb	r3, [r7, #4]
 800352e:	461c      	mov	r4, r3
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	461d      	mov	r5, r3
 8003534:	78bb      	ldrb	r3, [r7, #2]
 8003536:	787a      	ldrb	r2, [r7, #1]
 8003538:	7839      	ldrb	r1, [r7, #0]
 800353a:	f107 0008 	add.w	r0, r7, #8
 800353e:	9102      	str	r1, [sp, #8]
 8003540:	9201      	str	r2, [sp, #4]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	462b      	mov	r3, r5
 8003546:	4622      	mov	r2, r4
 8003548:	4971      	ldr	r1, [pc, #452]	; (8003710 <printRadioSettings+0x758>)
 800354a:	f008 ff2d 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800354e:	f107 0308 	add.w	r3, r7, #8
 8003552:	4618      	mov	r0, r3
 8003554:	f7fc fe44 	bl	80001e0 <strlen>
 8003558:	4603      	mov	r3, r0
 800355a:	b29a      	uxth	r2, r3
 800355c:	f107 0108 	add.w	r1, r7, #8
 8003560:	230a      	movs	r3, #10
 8003562:	4864      	ldr	r0, [pc, #400]	; (80036f4 <printRadioSettings+0x73c>)
 8003564:	f004 fc8b 	bl	8007e7e <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8003568:	2011      	movs	r0, #17
 800356a:	f7ff f8dd 	bl	8002728 <NRF24_read_register>
 800356e:	4603      	mov	r3, r0
 8003570:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8003574:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003578:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800357c:	f107 0308 	add.w	r3, r7, #8
 8003580:	4964      	ldr	r1, [pc, #400]	; (8003714 <printRadioSettings+0x75c>)
 8003582:	4618      	mov	r0, r3
 8003584:	f008 ff10 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003588:	f107 0308 	add.w	r3, r7, #8
 800358c:	4618      	mov	r0, r3
 800358e:	f7fc fe27 	bl	80001e0 <strlen>
 8003592:	4603      	mov	r3, r0
 8003594:	b29a      	uxth	r2, r3
 8003596:	f107 0108 	add.w	r1, r7, #8
 800359a:	230a      	movs	r3, #10
 800359c:	4855      	ldr	r0, [pc, #340]	; (80036f4 <printRadioSettings+0x73c>)
 800359e:	f004 fc6e 	bl	8007e7e <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 80035a2:	2012      	movs	r0, #18
 80035a4:	f7ff f8c0 	bl	8002728 <NRF24_read_register>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80035ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80035b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035b6:	f107 0308 	add.w	r3, r7, #8
 80035ba:	4957      	ldr	r1, [pc, #348]	; (8003718 <printRadioSettings+0x760>)
 80035bc:	4618      	mov	r0, r3
 80035be:	f008 fef3 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80035c2:	f107 0308 	add.w	r3, r7, #8
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fc fe0a 	bl	80001e0 <strlen>
 80035cc:	4603      	mov	r3, r0
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	f107 0108 	add.w	r1, r7, #8
 80035d4:	230a      	movs	r3, #10
 80035d6:	4847      	ldr	r0, [pc, #284]	; (80036f4 <printRadioSettings+0x73c>)
 80035d8:	f004 fc51 	bl	8007e7e <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 80035dc:	2013      	movs	r0, #19
 80035de:	f7ff f8a3 	bl	8002728 <NRF24_read_register>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80035e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80035ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035f0:	f107 0308 	add.w	r3, r7, #8
 80035f4:	4949      	ldr	r1, [pc, #292]	; (800371c <printRadioSettings+0x764>)
 80035f6:	4618      	mov	r0, r3
 80035f8:	f008 fed6 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80035fc:	f107 0308 	add.w	r3, r7, #8
 8003600:	4618      	mov	r0, r3
 8003602:	f7fc fded 	bl	80001e0 <strlen>
 8003606:	4603      	mov	r3, r0
 8003608:	b29a      	uxth	r2, r3
 800360a:	f107 0108 	add.w	r1, r7, #8
 800360e:	230a      	movs	r3, #10
 8003610:	4838      	ldr	r0, [pc, #224]	; (80036f4 <printRadioSettings+0x73c>)
 8003612:	f004 fc34 	bl	8007e7e <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 8003616:	2014      	movs	r0, #20
 8003618:	f7ff f886 	bl	8002728 <NRF24_read_register>
 800361c:	4603      	mov	r3, r0
 800361e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8003622:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003626:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800362a:	f107 0308 	add.w	r3, r7, #8
 800362e:	493c      	ldr	r1, [pc, #240]	; (8003720 <printRadioSettings+0x768>)
 8003630:	4618      	mov	r0, r3
 8003632:	f008 feb9 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003636:	f107 0308 	add.w	r3, r7, #8
 800363a:	4618      	mov	r0, r3
 800363c:	f7fc fdd0 	bl	80001e0 <strlen>
 8003640:	4603      	mov	r3, r0
 8003642:	b29a      	uxth	r2, r3
 8003644:	f107 0108 	add.w	r1, r7, #8
 8003648:	230a      	movs	r3, #10
 800364a:	482a      	ldr	r0, [pc, #168]	; (80036f4 <printRadioSettings+0x73c>)
 800364c:	f004 fc17 	bl	8007e7e <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8003650:	2015      	movs	r0, #21
 8003652:	f7ff f869 	bl	8002728 <NRF24_read_register>
 8003656:	4603      	mov	r3, r0
 8003658:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800365c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003660:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003664:	f107 0308 	add.w	r3, r7, #8
 8003668:	492e      	ldr	r1, [pc, #184]	; (8003724 <printRadioSettings+0x76c>)
 800366a:	4618      	mov	r0, r3
 800366c:	f008 fe9c 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003670:	f107 0308 	add.w	r3, r7, #8
 8003674:	4618      	mov	r0, r3
 8003676:	f7fc fdb3 	bl	80001e0 <strlen>
 800367a:	4603      	mov	r3, r0
 800367c:	b29a      	uxth	r2, r3
 800367e:	f107 0108 	add.w	r1, r7, #8
 8003682:	230a      	movs	r3, #10
 8003684:	481b      	ldr	r0, [pc, #108]	; (80036f4 <printRadioSettings+0x73c>)
 8003686:	f004 fbfa 	bl	8007e7e <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 800368a:	2016      	movs	r0, #22
 800368c:	f7ff f84c 	bl	8002728 <NRF24_read_register>
 8003690:	4603      	mov	r3, r0
 8003692:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8003696:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800369a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800369e:	f107 0308 	add.w	r3, r7, #8
 80036a2:	4921      	ldr	r1, [pc, #132]	; (8003728 <printRadioSettings+0x770>)
 80036a4:	4618      	mov	r0, r3
 80036a6:	f008 fe7f 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80036aa:	f107 0308 	add.w	r3, r7, #8
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fc fd96 	bl	80001e0 <strlen>
 80036b4:	4603      	mov	r3, r0
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	f107 0108 	add.w	r1, r7, #8
 80036bc:	230a      	movs	r3, #10
 80036be:	480d      	ldr	r0, [pc, #52]	; (80036f4 <printRadioSettings+0x73c>)
 80036c0:	f004 fbdd 	bl	8007e7e <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80036c4:	201c      	movs	r0, #28
 80036c6:	f7ff f82f 	bl	8002728 <NRF24_read_register>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80036d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80036d4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80036d8:	2b00      	cmp	r3, #0
 80036da:	bfcc      	ite	gt
 80036dc:	2301      	movgt	r3, #1
 80036de:	2300      	movle	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	461d      	mov	r5, r3
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80036e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	e01e      	b.n	800372c <printRadioSettings+0x774>
 80036ee:	bf00      	nop
 80036f0:	0800f244 	.word	0x0800f244
 80036f4:	20000184 	.word	0x20000184
 80036f8:	0800f258 	.word	0x0800f258
 80036fc:	0800f288 	.word	0x0800f288
 8003700:	0800f2b8 	.word	0x0800f2b8
 8003704:	0800f2e0 	.word	0x0800f2e0
 8003708:	0800f308 	.word	0x0800f308
 800370c:	0800f330 	.word	0x0800f330
 8003710:	0800f358 	.word	0x0800f358
 8003714:	0800f384 	.word	0x0800f384
 8003718:	0800f3a0 	.word	0x0800f3a0
 800371c:	0800f3bc 	.word	0x0800f3bc
 8003720:	0800f3d8 	.word	0x0800f3d8
 8003724:	0800f3f4 	.word	0x0800f3f4
 8003728:	0800f410 	.word	0x0800f410
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800372c:	2b00      	cmp	r3, #0
 800372e:	bfcc      	ite	gt
 8003730:	2301      	movgt	r3, #1
 8003732:	2300      	movle	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	461e      	mov	r6, r3
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003738:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800373c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003740:	2b00      	cmp	r3, #0
 8003742:	bfcc      	ite	gt
 8003744:	2301      	movgt	r3, #1
 8003746:	2300      	movle	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	461a      	mov	r2, r3
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800374c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003750:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003754:	2b00      	cmp	r3, #0
 8003756:	bfcc      	ite	gt
 8003758:	2301      	movgt	r3, #1
 800375a:	2300      	movle	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	4619      	mov	r1, r3
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003760:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003764:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8003768:	2b00      	cmp	r3, #0
 800376a:	bfcc      	ite	gt
 800376c:	2301      	movgt	r3, #1
 800376e:	2300      	movle	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	461c      	mov	r4, r3
			_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8003774:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003778:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800377c:	2b00      	cmp	r3, #0
 800377e:	bfcc      	ite	gt
 8003780:	2301      	movgt	r3, #1
 8003782:	2300      	movle	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	f107 0008 	add.w	r0, r7, #8
 800378a:	9303      	str	r3, [sp, #12]
 800378c:	9402      	str	r4, [sp, #8]
 800378e:	9101      	str	r1, [sp, #4]
 8003790:	9200      	str	r2, [sp, #0]
 8003792:	4633      	mov	r3, r6
 8003794:	462a      	mov	r2, r5
 8003796:	494a      	ldr	r1, [pc, #296]	; (80038c0 <printRadioSettings+0x908>)
 8003798:	f008 fe06 	bl	800c3a8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800379c:	f107 0308 	add.w	r3, r7, #8
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fc fd1d 	bl	80001e0 <strlen>
 80037a6:	4603      	mov	r3, r0
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	f107 0108 	add.w	r1, r7, #8
 80037ae:	230a      	movs	r3, #10
 80037b0:	4844      	ldr	r0, [pc, #272]	; (80038c4 <printRadioSettings+0x90c>)
 80037b2:	f004 fb64 	bl	8007e7e <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80037b6:	201d      	movs	r0, #29
 80037b8:	f7fe ffb6 	bl	8002728 <NRF24_read_register>
 80037bc:	4603      	mov	r3, r0
 80037be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80037c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00c      	beq.n	80037e8 <printRadioSettings+0x830>
 80037ce:	f107 0308 	add.w	r3, r7, #8
 80037d2:	4a3d      	ldr	r2, [pc, #244]	; (80038c8 <printRadioSettings+0x910>)
 80037d4:	461c      	mov	r4, r3
 80037d6:	4615      	mov	r5, r2
 80037d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80037e0:	6020      	str	r0, [r4, #0]
 80037e2:	3404      	adds	r4, #4
 80037e4:	8021      	strh	r1, [r4, #0]
 80037e6:	e00e      	b.n	8003806 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80037e8:	f107 0308 	add.w	r3, r7, #8
 80037ec:	4a37      	ldr	r2, [pc, #220]	; (80038cc <printRadioSettings+0x914>)
 80037ee:	461c      	mov	r4, r3
 80037f0:	4615      	mov	r5, r2
 80037f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80037fa:	6020      	str	r0, [r4, #0]
 80037fc:	3404      	adds	r4, #4
 80037fe:	8021      	strh	r1, [r4, #0]
 8003800:	3402      	adds	r4, #2
 8003802:	0c0b      	lsrs	r3, r1, #16
 8003804:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003806:	f107 0308 	add.w	r3, r7, #8
 800380a:	4618      	mov	r0, r3
 800380c:	f7fc fce8 	bl	80001e0 <strlen>
 8003810:	4603      	mov	r3, r0
 8003812:	b29a      	uxth	r2, r3
 8003814:	f107 0108 	add.w	r1, r7, #8
 8003818:	230a      	movs	r3, #10
 800381a:	482a      	ldr	r0, [pc, #168]	; (80038c4 <printRadioSettings+0x90c>)
 800381c:	f004 fb2f 	bl	8007e7e <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8003820:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00b      	beq.n	8003844 <printRadioSettings+0x88c>
 800382c:	f107 0308 	add.w	r3, r7, #8
 8003830:	4a27      	ldr	r2, [pc, #156]	; (80038d0 <printRadioSettings+0x918>)
 8003832:	461c      	mov	r4, r3
 8003834:	4615      	mov	r5, r2
 8003836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800383a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800383e:	c403      	stmia	r4!, {r0, r1}
 8003840:	8022      	strh	r2, [r4, #0]
 8003842:	e00d      	b.n	8003860 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8003844:	f107 0308 	add.w	r3, r7, #8
 8003848:	4a22      	ldr	r2, [pc, #136]	; (80038d4 <printRadioSettings+0x91c>)
 800384a:	461c      	mov	r4, r3
 800384c:	4615      	mov	r5, r2
 800384e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003852:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003856:	c403      	stmia	r4!, {r0, r1}
 8003858:	8022      	strh	r2, [r4, #0]
 800385a:	3402      	adds	r4, #2
 800385c:	0c13      	lsrs	r3, r2, #16
 800385e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8003860:	f107 0308 	add.w	r3, r7, #8
 8003864:	4618      	mov	r0, r3
 8003866:	f7fc fcbb 	bl	80001e0 <strlen>
 800386a:	4603      	mov	r3, r0
 800386c:	b29a      	uxth	r2, r3
 800386e:	f107 0108 	add.w	r1, r7, #8
 8003872:	230a      	movs	r3, #10
 8003874:	4813      	ldr	r0, [pc, #76]	; (80038c4 <printRadioSettings+0x90c>)
 8003876:	f004 fb02 	bl	8007e7e <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800387a:	f107 0308 	add.w	r3, r7, #8
 800387e:	4a16      	ldr	r2, [pc, #88]	; (80038d8 <printRadioSettings+0x920>)
 8003880:	461c      	mov	r4, r3
 8003882:	4615      	mov	r5, r2
 8003884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800388a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800388c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800388e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	8022      	strh	r2, [r4, #0]
 8003896:	3402      	adds	r4, #2
 8003898:	0c1b      	lsrs	r3, r3, #16
 800389a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800389c:	f107 0308 	add.w	r3, r7, #8
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fc fc9d 	bl	80001e0 <strlen>
 80038a6:	4603      	mov	r3, r0
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	f107 0108 	add.w	r1, r7, #8
 80038ae:	230a      	movs	r3, #10
 80038b0:	4804      	ldr	r0, [pc, #16]	; (80038c4 <printRadioSettings+0x90c>)
 80038b2:	f004 fae4 	bl	8007e7e <HAL_UART_Transmit>
}
 80038b6:	bf00      	nop
 80038b8:	3774      	adds	r7, #116	; 0x74
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038be:	bf00      	nop
 80038c0:	0800f42c 	.word	0x0800f42c
 80038c4:	20000184 	.word	0x20000184
 80038c8:	0800f478 	.word	0x0800f478
 80038cc:	0800f490 	.word	0x0800f490
 80038d0:	0800f4a8 	.word	0x0800f4a8
 80038d4:	0800f4c4 	.word	0x0800f4c4
 80038d8:	0800f098 	.word	0x0800f098

080038dc <pid_calculate_roll>:
float roll_elapsed_time = 0;

int roll_pid_clip = 1250;

/** roll PID Calculation **/
float pid_calculate_roll(float IMU_roll_value, int timer_value, float roll_setpoint) {
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80038e6:	60b8      	str	r0, [r7, #8]
 80038e8:	edc7 0a01 	vstr	s1, [r7, #4]

	//Calculate error
	roll_error = IMU_roll_value - roll_setpoint;
 80038ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80038f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80038f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038f8:	4b42      	ldr	r3, [pc, #264]	; (8003a04 <pid_calculate_roll+0x128>)
 80038fa:	edc3 7a00 	vstr	s15, [r3]

	//Proportional component
	roll_p = roll_p_gain * roll_error;
 80038fe:	4b42      	ldr	r3, [pc, #264]	; (8003a08 <pid_calculate_roll+0x12c>)
 8003900:	ed93 7a00 	vldr	s14, [r3]
 8003904:	4b3f      	ldr	r3, [pc, #252]	; (8003a04 <pid_calculate_roll+0x128>)
 8003906:	edd3 7a00 	vldr	s15, [r3]
 800390a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800390e:	4b3f      	ldr	r3, [pc, #252]	; (8003a0c <pid_calculate_roll+0x130>)
 8003910:	edc3 7a00 	vstr	s15, [r3]

	//Integral
	roll_i += (roll_i_gain * roll_error * delta_t);
 8003914:	4b3e      	ldr	r3, [pc, #248]	; (8003a10 <pid_calculate_roll+0x134>)
 8003916:	ed93 7a00 	vldr	s14, [r3]
 800391a:	4b3a      	ldr	r3, [pc, #232]	; (8003a04 <pid_calculate_roll+0x128>)
 800391c:	edd3 7a00 	vldr	s15, [r3]
 8003920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003924:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003a14 <pid_calculate_roll+0x138>
 8003928:	ee27 7a87 	vmul.f32	s14, s15, s14
 800392c:	4b3a      	ldr	r3, [pc, #232]	; (8003a18 <pid_calculate_roll+0x13c>)
 800392e:	edd3 7a00 	vldr	s15, [r3]
 8003932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003936:	4b38      	ldr	r3, [pc, #224]	; (8003a18 <pid_calculate_roll+0x13c>)
 8003938:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / delta_t);
 800393c:	4b31      	ldr	r3, [pc, #196]	; (8003a04 <pid_calculate_roll+0x128>)
 800393e:	ed93 7a00 	vldr	s14, [r3]
 8003942:	4b36      	ldr	r3, [pc, #216]	; (8003a1c <pid_calculate_roll+0x140>)
 8003944:	edd3 7a00 	vldr	s15, [r3]
 8003948:	ee77 7a67 	vsub.f32	s15, s14, s15
 800394c:	eddf 6a31 	vldr	s13, [pc, #196]	; 8003a14 <pid_calculate_roll+0x138>
 8003950:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003954:	4b32      	ldr	r3, [pc, #200]	; (8003a20 <pid_calculate_roll+0x144>)
 8003956:	edd3 7a00 	vldr	s15, [r3]
 800395a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395e:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <pid_calculate_roll+0x148>)
 8003960:	edc3 7a00 	vstr	s15, [r3]
	roll_last_d_error = roll_error;
 8003964:	4b27      	ldr	r3, [pc, #156]	; (8003a04 <pid_calculate_roll+0x128>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a2c      	ldr	r2, [pc, #176]	; (8003a1c <pid_calculate_roll+0x140>)
 800396a:	6013      	str	r3, [r2, #0]

	//PID together
	roll_output = roll_p + roll_i + roll_d;
 800396c:	4b27      	ldr	r3, [pc, #156]	; (8003a0c <pid_calculate_roll+0x130>)
 800396e:	ed93 7a00 	vldr	s14, [r3]
 8003972:	4b29      	ldr	r3, [pc, #164]	; (8003a18 <pid_calculate_roll+0x13c>)
 8003974:	edd3 7a00 	vldr	s15, [r3]
 8003978:	ee37 7a27 	vadd.f32	s14, s14, s15
 800397c:	4b29      	ldr	r3, [pc, #164]	; (8003a24 <pid_calculate_roll+0x148>)
 800397e:	edd3 7a00 	vldr	s15, [r3]
 8003982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003986:	4b28      	ldr	r3, [pc, #160]	; (8003a28 <pid_calculate_roll+0x14c>)
 8003988:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (roll_output < -roll_pid_clip) {
 800398c:	4b27      	ldr	r3, [pc, #156]	; (8003a2c <pid_calculate_roll+0x150>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	425b      	negs	r3, r3
 8003992:	ee07 3a90 	vmov	s15, r3
 8003996:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800399a:	4b23      	ldr	r3, [pc, #140]	; (8003a28 <pid_calculate_roll+0x14c>)
 800399c:	edd3 7a00 	vldr	s15, [r3]
 80039a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a8:	dd0a      	ble.n	80039c0 <pid_calculate_roll+0xe4>
		roll_output = -roll_pid_clip;
 80039aa:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <pid_calculate_roll+0x150>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	425b      	negs	r3, r3
 80039b0:	ee07 3a90 	vmov	s15, r3
 80039b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039b8:	4b1b      	ldr	r3, [pc, #108]	; (8003a28 <pid_calculate_roll+0x14c>)
 80039ba:	edc3 7a00 	vstr	s15, [r3]
 80039be:	e016      	b.n	80039ee <pid_calculate_roll+0x112>
	} else if (roll_output > roll_pid_clip) {
 80039c0:	4b1a      	ldr	r3, [pc, #104]	; (8003a2c <pid_calculate_roll+0x150>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	ee07 3a90 	vmov	s15, r3
 80039c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039cc:	4b16      	ldr	r3, [pc, #88]	; (8003a28 <pid_calculate_roll+0x14c>)
 80039ce:	edd3 7a00 	vldr	s15, [r3]
 80039d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039da:	d508      	bpl.n	80039ee <pid_calculate_roll+0x112>
		roll_output = roll_pid_clip;
 80039dc:	4b13      	ldr	r3, [pc, #76]	; (8003a2c <pid_calculate_roll+0x150>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	ee07 3a90 	vmov	s15, r3
 80039e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039e8:	4b0f      	ldr	r3, [pc, #60]	; (8003a28 <pid_calculate_roll+0x14c>)
 80039ea:	edc3 7a00 	vstr	s15, [r3]
	}

	return roll_output;
 80039ee:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <pid_calculate_roll+0x14c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	ee07 3a90 	vmov	s15, r3
}
 80039f6:	eeb0 0a67 	vmov.f32	s0, s15
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	200001c4 	.word	0x200001c4
 8003a08:	20004370 	.word	0x20004370
 8003a0c:	200042b0 	.word	0x200042b0
 8003a10:	20004334 	.word	0x20004334
 8003a14:	3b012912 	.word	0x3b012912
 8003a18:	200042bc 	.word	0x200042bc
 8003a1c:	200001cc 	.word	0x200001cc
 8003a20:	20004344 	.word	0x20004344
 8003a24:	2000429c 	.word	0x2000429c
 8003a28:	200001c8 	.word	0x200001c8
 8003a2c:	20000050 	.word	0x20000050

08003a30 <reset_pid_roll>:

void reset_pid_roll(){
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0

	roll_p = 0;
 8003a34:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <reset_pid_roll+0x30>)
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
	roll_i = 0;
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <reset_pid_roll+0x34>)
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]
	roll_d = 0;
 8003a44:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <reset_pid_roll+0x38>)
 8003a46:	f04f 0200 	mov.w	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
	roll_output = 0;
 8003a4c:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <reset_pid_roll+0x3c>)
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]

}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	200042b0 	.word	0x200042b0
 8003a64:	200042bc 	.word	0x200042bc
 8003a68:	2000429c 	.word	0x2000429c
 8003a6c:	200001c8 	.word	0x200001c8

08003a70 <pid_calculate_pitch>:
float pitch_elapsed_time = 0;

int pitch_pid_clip = 1250;

/** Pitch PID Calculation **/
float pid_calculate_pitch(float IMU_pitch_value, int timer_value, float pitch_setpoint) {
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	ed87 0a03 	vstr	s0, [r7, #12]
 8003a7a:	60b8      	str	r0, [r7, #8]
 8003a7c:	edc7 0a01 	vstr	s1, [r7, #4]

	//Calculate error
	pitch_error = IMU_pitch_value - pitch_setpoint;
 8003a80:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a84:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a8c:	4b42      	ldr	r3, [pc, #264]	; (8003b98 <pid_calculate_pitch+0x128>)
 8003a8e:	edc3 7a00 	vstr	s15, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 8003a92:	4b42      	ldr	r3, [pc, #264]	; (8003b9c <pid_calculate_pitch+0x12c>)
 8003a94:	ed93 7a00 	vldr	s14, [r3]
 8003a98:	4b3f      	ldr	r3, [pc, #252]	; (8003b98 <pid_calculate_pitch+0x128>)
 8003a9a:	edd3 7a00 	vldr	s15, [r3]
 8003a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa2:	4b3f      	ldr	r3, [pc, #252]	; (8003ba0 <pid_calculate_pitch+0x130>)
 8003aa4:	edc3 7a00 	vstr	s15, [r3]

	//Integral
	pitch_i += (pitch_i_gain * pitch_error * delta_t);
 8003aa8:	4b3e      	ldr	r3, [pc, #248]	; (8003ba4 <pid_calculate_pitch+0x134>)
 8003aaa:	ed93 7a00 	vldr	s14, [r3]
 8003aae:	4b3a      	ldr	r3, [pc, #232]	; (8003b98 <pid_calculate_pitch+0x128>)
 8003ab0:	edd3 7a00 	vldr	s15, [r3]
 8003ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003ba8 <pid_calculate_pitch+0x138>
 8003abc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ac0:	4b3a      	ldr	r3, [pc, #232]	; (8003bac <pid_calculate_pitch+0x13c>)
 8003ac2:	edd3 7a00 	vldr	s15, [r3]
 8003ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aca:	4b38      	ldr	r3, [pc, #224]	; (8003bac <pid_calculate_pitch+0x13c>)
 8003acc:	edc3 7a00 	vstr	s15, [r3]

	//Derivative component
	pitch_d = pitch_d_gain * ( (pitch_error - pitch_last_d_error) / delta_t);
 8003ad0:	4b31      	ldr	r3, [pc, #196]	; (8003b98 <pid_calculate_pitch+0x128>)
 8003ad2:	ed93 7a00 	vldr	s14, [r3]
 8003ad6:	4b36      	ldr	r3, [pc, #216]	; (8003bb0 <pid_calculate_pitch+0x140>)
 8003ad8:	edd3 7a00 	vldr	s15, [r3]
 8003adc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ae0:	eddf 6a31 	vldr	s13, [pc, #196]	; 8003ba8 <pid_calculate_pitch+0x138>
 8003ae4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003ae8:	4b32      	ldr	r3, [pc, #200]	; (8003bb4 <pid_calculate_pitch+0x144>)
 8003aea:	edd3 7a00 	vldr	s15, [r3]
 8003aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af2:	4b31      	ldr	r3, [pc, #196]	; (8003bb8 <pid_calculate_pitch+0x148>)
 8003af4:	edc3 7a00 	vstr	s15, [r3]
	pitch_last_d_error = pitch_error;
 8003af8:	4b27      	ldr	r3, [pc, #156]	; (8003b98 <pid_calculate_pitch+0x128>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a2c      	ldr	r2, [pc, #176]	; (8003bb0 <pid_calculate_pitch+0x140>)
 8003afe:	6013      	str	r3, [r2, #0]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 8003b00:	4b27      	ldr	r3, [pc, #156]	; (8003ba0 <pid_calculate_pitch+0x130>)
 8003b02:	ed93 7a00 	vldr	s14, [r3]
 8003b06:	4b29      	ldr	r3, [pc, #164]	; (8003bac <pid_calculate_pitch+0x13c>)
 8003b08:	edd3 7a00 	vldr	s15, [r3]
 8003b0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b10:	4b29      	ldr	r3, [pc, #164]	; (8003bb8 <pid_calculate_pitch+0x148>)
 8003b12:	edd3 7a00 	vldr	s15, [r3]
 8003b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b1a:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <pid_calculate_pitch+0x14c>)
 8003b1c:	edc3 7a00 	vstr	s15, [r3]

	//Clip PID output in event of extreme swings
	if (pitch_output < -pitch_pid_clip) {
 8003b20:	4b27      	ldr	r3, [pc, #156]	; (8003bc0 <pid_calculate_pitch+0x150>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	425b      	negs	r3, r3
 8003b26:	ee07 3a90 	vmov	s15, r3
 8003b2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b2e:	4b23      	ldr	r3, [pc, #140]	; (8003bbc <pid_calculate_pitch+0x14c>)
 8003b30:	edd3 7a00 	vldr	s15, [r3]
 8003b34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b3c:	dd0a      	ble.n	8003b54 <pid_calculate_pitch+0xe4>
		pitch_output = -pitch_pid_clip;
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <pid_calculate_pitch+0x150>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	425b      	negs	r3, r3
 8003b44:	ee07 3a90 	vmov	s15, r3
 8003b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b4c:	4b1b      	ldr	r3, [pc, #108]	; (8003bbc <pid_calculate_pitch+0x14c>)
 8003b4e:	edc3 7a00 	vstr	s15, [r3]
 8003b52:	e016      	b.n	8003b82 <pid_calculate_pitch+0x112>
	} else if (pitch_output > pitch_pid_clip) {
 8003b54:	4b1a      	ldr	r3, [pc, #104]	; (8003bc0 <pid_calculate_pitch+0x150>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	ee07 3a90 	vmov	s15, r3
 8003b5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b60:	4b16      	ldr	r3, [pc, #88]	; (8003bbc <pid_calculate_pitch+0x14c>)
 8003b62:	edd3 7a00 	vldr	s15, [r3]
 8003b66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b6e:	d508      	bpl.n	8003b82 <pid_calculate_pitch+0x112>
		pitch_output = pitch_pid_clip;
 8003b70:	4b13      	ldr	r3, [pc, #76]	; (8003bc0 <pid_calculate_pitch+0x150>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	ee07 3a90 	vmov	s15, r3
 8003b78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b7c:	4b0f      	ldr	r3, [pc, #60]	; (8003bbc <pid_calculate_pitch+0x14c>)
 8003b7e:	edc3 7a00 	vstr	s15, [r3]
	}

	return pitch_output;
 8003b82:	4b0e      	ldr	r3, [pc, #56]	; (8003bbc <pid_calculate_pitch+0x14c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	ee07 3a90 	vmov	s15, r3
}
 8003b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	200001d0 	.word	0x200001d0
 8003b9c:	2000436c 	.word	0x2000436c
 8003ba0:	200042a8 	.word	0x200042a8
 8003ba4:	2000432c 	.word	0x2000432c
 8003ba8:	3b012912 	.word	0x3b012912
 8003bac:	200042ac 	.word	0x200042ac
 8003bb0:	200001d8 	.word	0x200001d8
 8003bb4:	20004374 	.word	0x20004374
 8003bb8:	200042a0 	.word	0x200042a0
 8003bbc:	200001d4 	.word	0x200001d4
 8003bc0:	20000054 	.word	0x20000054

08003bc4 <reset_pid_pitch>:

void reset_pid_pitch(){
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0

	pitch_p = 0;
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <reset_pid_pitch+0x30>)
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
	pitch_i = 0;
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <reset_pid_pitch+0x34>)
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
	pitch_d = 0;
 8003bd8:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <reset_pid_pitch+0x38>)
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
	pitch_output = 0;
 8003be0:	4b07      	ldr	r3, [pc, #28]	; (8003c00 <reset_pid_pitch+0x3c>)
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]

}
 8003be8:	bf00      	nop
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	200042a8 	.word	0x200042a8
 8003bf8:	200042ac 	.word	0x200042ac
 8003bfc:	200042a0 	.word	0x200042a0
 8003c00:	200001d4 	.word	0x200001d4

08003c04 <reset_pid_yaw>:
	}

	return yaw_output;
}

void reset_pid_yaw(){
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0

	yaw_p = 0;
 8003c08:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <reset_pid_yaw+0x30>)
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
	yaw_i = 0;
 8003c10:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <reset_pid_yaw+0x34>)
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
	yaw_d = 0;
 8003c18:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <reset_pid_yaw+0x38>)
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
	yaw_output = 0;
 8003c20:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <reset_pid_yaw+0x3c>)
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]

}
 8003c28:	bf00      	nop
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	200042b8 	.word	0x200042b8
 8003c38:	200042b4 	.word	0x200042b4
 8003c3c:	200042a4 	.word	0x200042a4
 8003c40:	200001dc 	.word	0x200001dc

08003c44 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003c48:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <DWT_Init+0x2c>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4a08      	ldr	r2, [pc, #32]	; (8003c70 <DWT_Init+0x2c>)
 8003c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c52:	60d3      	str	r3, [r2, #12]
        //DWT->LAR = 0xC5ACCE55;
        DWT->CYCCNT = 0;
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <DWT_Init+0x30>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003c5a:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <DWT_Init+0x30>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a05      	ldr	r2, [pc, #20]	; (8003c74 <DWT_Init+0x30>)
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	6013      	str	r3, [r2, #0]

}
 8003c66:	bf00      	nop
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	e000edf0 	.word	0xe000edf0
 8003c74:	e0001000 	.word	0xe0001000

08003c78 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT, delayTicks = us * (SystemCoreClock/1000000);
 8003c80:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <DWT_Delay+0x40>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	4b0d      	ldr	r3, [pc, #52]	; (8003cbc <DWT_Delay+0x44>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a0d      	ldr	r2, [pc, #52]	; (8003cc0 <DWT_Delay+0x48>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	0c9a      	lsrs	r2, r3, #18
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	fb02 f303 	mul.w	r3, r2, r3
 8003c98:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8003c9a:	bf00      	nop
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <DWT_Delay+0x40>)
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d8f8      	bhi.n	8003c9c <DWT_Delay+0x24>
}
 8003caa:	bf00      	nop
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	e0001000 	.word	0xe0001000
 8003cbc:	20000068 	.word	0x20000068
 8003cc0:	431bde83 	.word	0x431bde83

08003cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cc8:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <HAL_Init+0x40>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a0d      	ldr	r2, [pc, #52]	; (8003d04 <HAL_Init+0x40>)
 8003cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <HAL_Init+0x40>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a0a      	ldr	r2, [pc, #40]	; (8003d04 <HAL_Init+0x40>)
 8003cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ce0:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <HAL_Init+0x40>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a07      	ldr	r2, [pc, #28]	; (8003d04 <HAL_Init+0x40>)
 8003ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cec:	2003      	movs	r0, #3
 8003cee:	f000 f8fa 	bl	8003ee6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	f007 ff24 	bl	800bb40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cf8:	f007 fee6 	bl	800bac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40023c00 	.word	0x40023c00

08003d08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_IncTick+0x20>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_IncTick+0x24>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4413      	add	r3, r2
 8003d18:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <HAL_IncTick+0x24>)
 8003d1a:	6013      	str	r3, [r2, #0]
}
 8003d1c:	bf00      	nop
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	20000058 	.word	0x20000058
 8003d2c:	200042c0 	.word	0x200042c0

08003d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return uwTick;
 8003d34:	4b03      	ldr	r3, [pc, #12]	; (8003d44 <HAL_GetTick+0x14>)
 8003d36:	681b      	ldr	r3, [r3, #0]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	200042c0 	.word	0x200042c0

08003d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d50:	f7ff ffee 	bl	8003d30 <HAL_GetTick>
 8003d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d005      	beq.n	8003d6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <HAL_Delay+0x40>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d6e:	bf00      	nop
 8003d70:	f7ff ffde 	bl	8003d30 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d8f7      	bhi.n	8003d70 <HAL_Delay+0x28>
  {
  }
}
 8003d80:	bf00      	nop
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	20000058 	.word	0x20000058

08003d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f003 0307 	and.w	r3, r3, #7
 8003d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	; (8003dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003da8:	4013      	ands	r3, r2
 8003daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dbe:	4a04      	ldr	r2, [pc, #16]	; (8003dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	60d3      	str	r3, [r2, #12]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	e000ed00 	.word	0xe000ed00

08003dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd8:	4b04      	ldr	r3, [pc, #16]	; (8003dec <__NVIC_GetPriorityGrouping+0x18>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	0a1b      	lsrs	r3, r3, #8
 8003dde:	f003 0307 	and.w	r3, r3, #7
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	e000ed00 	.word	0xe000ed00

08003df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	db0b      	blt.n	8003e1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	f003 021f 	and.w	r2, r3, #31
 8003e08:	4907      	ldr	r1, [pc, #28]	; (8003e28 <__NVIC_EnableIRQ+0x38>)
 8003e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	2001      	movs	r0, #1
 8003e12:	fa00 f202 	lsl.w	r2, r0, r2
 8003e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	e000e100 	.word	0xe000e100

08003e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	6039      	str	r1, [r7, #0]
 8003e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	db0a      	blt.n	8003e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	490c      	ldr	r1, [pc, #48]	; (8003e78 <__NVIC_SetPriority+0x4c>)
 8003e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4a:	0112      	lsls	r2, r2, #4
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	440b      	add	r3, r1
 8003e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e54:	e00a      	b.n	8003e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	4908      	ldr	r1, [pc, #32]	; (8003e7c <__NVIC_SetPriority+0x50>)
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	3b04      	subs	r3, #4
 8003e64:	0112      	lsls	r2, r2, #4
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	440b      	add	r3, r1
 8003e6a:	761a      	strb	r2, [r3, #24]
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	e000e100 	.word	0xe000e100
 8003e7c:	e000ed00 	.word	0xe000ed00

08003e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b089      	sub	sp, #36	; 0x24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f1c3 0307 	rsb	r3, r3, #7
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	bf28      	it	cs
 8003e9e:	2304      	movcs	r3, #4
 8003ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	2b06      	cmp	r3, #6
 8003ea8:	d902      	bls.n	8003eb0 <NVIC_EncodePriority+0x30>
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	3b03      	subs	r3, #3
 8003eae:	e000      	b.n	8003eb2 <NVIC_EncodePriority+0x32>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43da      	mvns	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed2:	43d9      	mvns	r1, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed8:	4313      	orrs	r3, r2
         );
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3724      	adds	r7, #36	; 0x24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff ff4c 	bl	8003d8c <__NVIC_SetPriorityGrouping>
}
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f0e:	f7ff ff61 	bl	8003dd4 <__NVIC_GetPriorityGrouping>
 8003f12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	6978      	ldr	r0, [r7, #20]
 8003f1a:	f7ff ffb1 	bl	8003e80 <NVIC_EncodePriority>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f24:	4611      	mov	r1, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff ff80 	bl	8003e2c <__NVIC_SetPriority>
}
 8003f2c:	bf00      	nop
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff ff54 	bl	8003df0 <__NVIC_EnableIRQ>
}
 8003f48:	bf00      	nop
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e011      	b.n	8003f86 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	795b      	ldrb	r3, [r3, #5]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d105      	bne.n	8003f78 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f007 f978 	bl	800b268 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f9c:	f7ff fec8 	bl	8003d30 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e099      	b.n	80040e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0201 	bic.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fcc:	e00f      	b.n	8003fee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fce:	f7ff feaf 	bl	8003d30 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b05      	cmp	r3, #5
 8003fda:	d908      	bls.n	8003fee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e078      	b.n	80040e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e8      	bne.n	8003fce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	4b38      	ldr	r3, [pc, #224]	; (80040e8 <HAL_DMA_Init+0x158>)
 8004008:	4013      	ands	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800401a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004026:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004032:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	2b04      	cmp	r3, #4
 8004046:	d107      	bne.n	8004058 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	4313      	orrs	r3, r2
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f023 0307 	bic.w	r3, r3, #7
 800406e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	2b04      	cmp	r3, #4
 8004080:	d117      	bne.n	80040b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00e      	beq.n	80040b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fa0b 	bl	80044b0 <DMA_CheckFifoParam>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2240      	movs	r2, #64	; 0x40
 80040a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040ae:	2301      	movs	r3, #1
 80040b0:	e016      	b.n	80040e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f9c2 	bl	8004444 <DMA_CalcBaseAndBitshift>
 80040c0:	4603      	mov	r3, r0
 80040c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c8:	223f      	movs	r2, #63	; 0x3f
 80040ca:	409a      	lsls	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	f010803f 	.word	0xf010803f

080040ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d004      	beq.n	800410a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2280      	movs	r2, #128	; 0x80
 8004104:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e00c      	b.n	8004124 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2205      	movs	r2, #5
 800410e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0201 	bic.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800413c:	4b92      	ldr	r3, [pc, #584]	; (8004388 <HAL_DMA_IRQHandler+0x258>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a92      	ldr	r2, [pc, #584]	; (800438c <HAL_DMA_IRQHandler+0x25c>)
 8004142:	fba2 2303 	umull	r2, r3, r2, r3
 8004146:	0a9b      	lsrs	r3, r3, #10
 8004148:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415a:	2208      	movs	r2, #8
 800415c:	409a      	lsls	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4013      	ands	r3, r2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01a      	beq.n	800419c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d013      	beq.n	800419c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0204 	bic.w	r2, r2, #4
 8004182:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	2208      	movs	r2, #8
 800418a:	409a      	lsls	r2, r3
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004194:	f043 0201 	orr.w	r2, r3, #1
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a0:	2201      	movs	r2, #1
 80041a2:	409a      	lsls	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d012      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00b      	beq.n	80041d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041be:	2201      	movs	r2, #1
 80041c0:	409a      	lsls	r2, r3
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ca:	f043 0202 	orr.w	r2, r3, #2
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d6:	2204      	movs	r2, #4
 80041d8:	409a      	lsls	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4013      	ands	r3, r2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d012      	beq.n	8004208 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00b      	beq.n	8004208 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f4:	2204      	movs	r2, #4
 80041f6:	409a      	lsls	r2, r3
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004200:	f043 0204 	orr.w	r2, r3, #4
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420c:	2210      	movs	r2, #16
 800420e:	409a      	lsls	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d043      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b00      	cmp	r3, #0
 8004224:	d03c      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422a:	2210      	movs	r2, #16
 800422c:	409a      	lsls	r2, r3
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d018      	beq.n	8004272 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d108      	bne.n	8004260 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d024      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	4798      	blx	r3
 800425e:	e01f      	b.n	80042a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01b      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4798      	blx	r3
 8004270:	e016      	b.n	80042a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d107      	bne.n	8004290 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0208 	bic.w	r2, r2, #8
 800428e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a4:	2220      	movs	r2, #32
 80042a6:	409a      	lsls	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4013      	ands	r3, r2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 808e 	beq.w	80043ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0310 	and.w	r3, r3, #16
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 8086 	beq.w	80043ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c6:	2220      	movs	r2, #32
 80042c8:	409a      	lsls	r2, r3
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b05      	cmp	r3, #5
 80042d8:	d136      	bne.n	8004348 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0216 	bic.w	r2, r2, #22
 80042e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d103      	bne.n	800430a <HAL_DMA_IRQHandler+0x1da>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0208 	bic.w	r2, r2, #8
 8004318:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800431e:	223f      	movs	r2, #63	; 0x3f
 8004320:	409a      	lsls	r2, r3
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800433a:	2b00      	cmp	r3, #0
 800433c:	d07d      	beq.n	800443a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	4798      	blx	r3
        }
        return;
 8004346:	e078      	b.n	800443a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d01c      	beq.n	8004390 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d108      	bne.n	8004376 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004368:	2b00      	cmp	r3, #0
 800436a:	d030      	beq.n	80043ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	4798      	blx	r3
 8004374:	e02b      	b.n	80043ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d027      	beq.n	80043ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	4798      	blx	r3
 8004386:	e022      	b.n	80043ce <HAL_DMA_IRQHandler+0x29e>
 8004388:	20000068 	.word	0x20000068
 800438c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10f      	bne.n	80043be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0210 	bic.w	r2, r2, #16
 80043ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d032      	beq.n	800443c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d022      	beq.n	8004428 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2205      	movs	r2, #5
 80043e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0201 	bic.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	3301      	adds	r3, #1
 80043fe:	60bb      	str	r3, [r7, #8]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	429a      	cmp	r2, r3
 8004404:	d307      	bcc.n	8004416 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1f2      	bne.n	80043fa <HAL_DMA_IRQHandler+0x2ca>
 8004414:	e000      	b.n	8004418 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004416:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	4798      	blx	r3
 8004438:	e000      	b.n	800443c <HAL_DMA_IRQHandler+0x30c>
        return;
 800443a:	bf00      	nop
    }
  }
}
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop

08004444 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	3b10      	subs	r3, #16
 8004454:	4a14      	ldr	r2, [pc, #80]	; (80044a8 <DMA_CalcBaseAndBitshift+0x64>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800445e:	4a13      	ldr	r2, [pc, #76]	; (80044ac <DMA_CalcBaseAndBitshift+0x68>)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b03      	cmp	r3, #3
 8004470:	d909      	bls.n	8004486 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800447a:	f023 0303 	bic.w	r3, r3, #3
 800447e:	1d1a      	adds	r2, r3, #4
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	659a      	str	r2, [r3, #88]	; 0x58
 8004484:	e007      	b.n	8004496 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800448e:	f023 0303 	bic.w	r3, r3, #3
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800449a:	4618      	mov	r0, r3
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	aaaaaaab 	.word	0xaaaaaaab
 80044ac:	0800f690 	.word	0x0800f690

080044b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d11f      	bne.n	800450a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d855      	bhi.n	800457c <DMA_CheckFifoParam+0xcc>
 80044d0:	a201      	add	r2, pc, #4	; (adr r2, 80044d8 <DMA_CheckFifoParam+0x28>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	080044e9 	.word	0x080044e9
 80044dc:	080044fb 	.word	0x080044fb
 80044e0:	080044e9 	.word	0x080044e9
 80044e4:	0800457d 	.word	0x0800457d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d045      	beq.n	8004580 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044f8:	e042      	b.n	8004580 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004502:	d13f      	bne.n	8004584 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004508:	e03c      	b.n	8004584 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004512:	d121      	bne.n	8004558 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b03      	cmp	r3, #3
 8004518:	d836      	bhi.n	8004588 <DMA_CheckFifoParam+0xd8>
 800451a:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <DMA_CheckFifoParam+0x70>)
 800451c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004520:	08004531 	.word	0x08004531
 8004524:	08004537 	.word	0x08004537
 8004528:	08004531 	.word	0x08004531
 800452c:	08004549 	.word	0x08004549
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
      break;
 8004534:	e02f      	b.n	8004596 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d024      	beq.n	800458c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004546:	e021      	b.n	800458c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004550:	d11e      	bne.n	8004590 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004556:	e01b      	b.n	8004590 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d902      	bls.n	8004564 <DMA_CheckFifoParam+0xb4>
 800455e:	2b03      	cmp	r3, #3
 8004560:	d003      	beq.n	800456a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004562:	e018      	b.n	8004596 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
      break;
 8004568:	e015      	b.n	8004596 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00e      	beq.n	8004594 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
      break;
 800457a:	e00b      	b.n	8004594 <DMA_CheckFifoParam+0xe4>
      break;
 800457c:	bf00      	nop
 800457e:	e00a      	b.n	8004596 <DMA_CheckFifoParam+0xe6>
      break;
 8004580:	bf00      	nop
 8004582:	e008      	b.n	8004596 <DMA_CheckFifoParam+0xe6>
      break;
 8004584:	bf00      	nop
 8004586:	e006      	b.n	8004596 <DMA_CheckFifoParam+0xe6>
      break;
 8004588:	bf00      	nop
 800458a:	e004      	b.n	8004596 <DMA_CheckFifoParam+0xe6>
      break;
 800458c:	bf00      	nop
 800458e:	e002      	b.n	8004596 <DMA_CheckFifoParam+0xe6>
      break;   
 8004590:	bf00      	nop
 8004592:	e000      	b.n	8004596 <DMA_CheckFifoParam+0xe6>
      break;
 8004594:	bf00      	nop
    }
  } 
  
  return status; 
 8004596:	7bfb      	ldrb	r3, [r7, #15]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80045ae:	4b4b      	ldr	r3, [pc, #300]	; (80046dc <HAL_FLASH_IRQHandler+0x138>)
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d020      	beq.n	80045fc <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80045ba:	4b49      	ldr	r3, [pc, #292]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d107      	bne.n	80045d4 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 80045c4:	4b46      	ldr	r3, [pc, #280]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 80045ca:	4b45      	ldr	r3, [pc, #276]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 80045cc:	f04f 32ff 	mov.w	r2, #4294967295
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	e00b      	b.n	80045ec <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80045d4:	4b42      	ldr	r3, [pc, #264]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d103      	bne.n	80045e6 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 80045de:	4b40      	ldr	r3, [pc, #256]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	607b      	str	r3, [r7, #4]
 80045e4:	e002      	b.n	80045ec <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 80045e6:	4b3e      	ldr	r3, [pc, #248]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 80045ec:	f000 f88e 	bl	800470c <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f881 	bl	80046f8 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80045f6:	4b3a      	ldr	r3, [pc, #232]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80045fc:	4b37      	ldr	r3, [pc, #220]	; (80046dc <HAL_FLASH_IRQHandler+0x138>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d04a      	beq.n	800469e <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004608:	4b34      	ldr	r3, [pc, #208]	; (80046dc <HAL_FLASH_IRQHandler+0x138>)
 800460a:	2201      	movs	r2, #1
 800460c:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800460e:	4b34      	ldr	r3, [pc, #208]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b01      	cmp	r3, #1
 8004616:	d12d      	bne.n	8004674 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8004618:	4b31      	ldr	r3, [pc, #196]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	3b01      	subs	r3, #1
 800461e:	4a30      	ldr	r2, [pc, #192]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 8004620:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8004622:	4b2f      	ldr	r3, [pc, #188]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d015      	beq.n	8004656 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800462a:	4b2d      	ldr	r3, [pc, #180]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f857 	bl	80046e4 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8004636:	4b2a      	ldr	r3, [pc, #168]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	3301      	adds	r3, #1
 800463c:	4a28      	ldr	r2, [pc, #160]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 800463e:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8004640:	4b27      	ldr	r3, [pc, #156]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8004646:	4b26      	ldr	r3, [pc, #152]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 8004648:	7a1b      	ldrb	r3, [r3, #8]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	4619      	mov	r1, r3
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f8c2 	bl	80047d8 <FLASH_Erase_Sector>
 8004654:	e023      	b.n	800469e <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8004656:	f04f 33ff 	mov.w	r3, #4294967295
 800465a:	607b      	str	r3, [r7, #4]
 800465c:	4a20      	ldr	r2, [pc, #128]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004662:	4b1f      	ldr	r3, [pc, #124]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8004668:	f000 f8fe 	bl	8004868 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f839 	bl	80046e4 <HAL_FLASH_EndOfOperationCallback>
 8004672:	e014      	b.n	800469e <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8004674:	4b1a      	ldr	r3, [pc, #104]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d107      	bne.n	800468e <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800467e:	f000 f8f3 	bl	8004868 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8004682:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	4618      	mov	r0, r3
 8004688:	f000 f82c 	bl	80046e4 <HAL_FLASH_EndOfOperationCallback>
 800468c:	e004      	b.n	8004698 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800468e:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	4618      	mov	r0, r3
 8004694:	f000 f826 	bl	80046e4 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004698:	4b11      	ldr	r3, [pc, #68]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 800469a:	2200      	movs	r2, #0
 800469c:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800469e:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d114      	bne.n	80046d2 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 80046a8:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <HAL_FLASH_IRQHandler+0x138>)
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	4a0b      	ldr	r2, [pc, #44]	; (80046dc <HAL_FLASH_IRQHandler+0x138>)
 80046ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046b2:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80046b4:	4b09      	ldr	r3, [pc, #36]	; (80046dc <HAL_FLASH_IRQHandler+0x138>)
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	4a08      	ldr	r2, [pc, #32]	; (80046dc <HAL_FLASH_IRQHandler+0x138>)
 80046ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046be:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <HAL_FLASH_IRQHandler+0x138>)
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	4a05      	ldr	r2, [pc, #20]	; (80046dc <HAL_FLASH_IRQHandler+0x138>)
 80046c6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80046ca:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80046cc:	4b04      	ldr	r3, [pc, #16]	; (80046e0 <HAL_FLASH_IRQHandler+0x13c>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	761a      	strb	r2, [r3, #24]
  }
}
 80046d2:	bf00      	nop
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40023c00 	.word	0x40023c00
 80046e0:	200042c4 	.word	0x200042c4

080046e4 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004710:	4b2f      	ldr	r3, [pc, #188]	; (80047d0 <FLASH_SetErrorCode+0xc4>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800471c:	4b2d      	ldr	r3, [pc, #180]	; (80047d4 <FLASH_SetErrorCode+0xc8>)
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f043 0310 	orr.w	r3, r3, #16
 8004724:	4a2b      	ldr	r2, [pc, #172]	; (80047d4 <FLASH_SetErrorCode+0xc8>)
 8004726:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004728:	4b29      	ldr	r3, [pc, #164]	; (80047d0 <FLASH_SetErrorCode+0xc4>)
 800472a:	2210      	movs	r2, #16
 800472c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800472e:	4b28      	ldr	r3, [pc, #160]	; (80047d0 <FLASH_SetErrorCode+0xc4>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b00      	cmp	r3, #0
 8004738:	d008      	beq.n	800474c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800473a:	4b26      	ldr	r3, [pc, #152]	; (80047d4 <FLASH_SetErrorCode+0xc8>)
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f043 0308 	orr.w	r3, r3, #8
 8004742:	4a24      	ldr	r2, [pc, #144]	; (80047d4 <FLASH_SetErrorCode+0xc8>)
 8004744:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004746:	4b22      	ldr	r3, [pc, #136]	; (80047d0 <FLASH_SetErrorCode+0xc4>)
 8004748:	2220      	movs	r2, #32
 800474a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800474c:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <FLASH_SetErrorCode+0xc4>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004754:	2b00      	cmp	r3, #0
 8004756:	d008      	beq.n	800476a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004758:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <FLASH_SetErrorCode+0xc8>)
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	f043 0304 	orr.w	r3, r3, #4
 8004760:	4a1c      	ldr	r2, [pc, #112]	; (80047d4 <FLASH_SetErrorCode+0xc8>)
 8004762:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004764:	4b1a      	ldr	r3, [pc, #104]	; (80047d0 <FLASH_SetErrorCode+0xc4>)
 8004766:	2240      	movs	r2, #64	; 0x40
 8004768:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800476a:	4b19      	ldr	r3, [pc, #100]	; (80047d0 <FLASH_SetErrorCode+0xc4>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004772:	2b00      	cmp	r3, #0
 8004774:	d008      	beq.n	8004788 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004776:	4b17      	ldr	r3, [pc, #92]	; (80047d4 <FLASH_SetErrorCode+0xc8>)
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f043 0302 	orr.w	r3, r3, #2
 800477e:	4a15      	ldr	r2, [pc, #84]	; (80047d4 <FLASH_SetErrorCode+0xc8>)
 8004780:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004782:	4b13      	ldr	r3, [pc, #76]	; (80047d0 <FLASH_SetErrorCode+0xc4>)
 8004784:	2280      	movs	r2, #128	; 0x80
 8004786:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004788:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <FLASH_SetErrorCode+0xc4>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d009      	beq.n	80047a8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004794:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <FLASH_SetErrorCode+0xc8>)
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	4a0d      	ldr	r2, [pc, #52]	; (80047d4 <FLASH_SetErrorCode+0xc8>)
 800479e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80047a0:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <FLASH_SetErrorCode+0xc4>)
 80047a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047a6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80047a8:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <FLASH_SetErrorCode+0xc4>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d008      	beq.n	80047c6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80047b4:	4b07      	ldr	r3, [pc, #28]	; (80047d4 <FLASH_SetErrorCode+0xc8>)
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	f043 0320 	orr.w	r3, r3, #32
 80047bc:	4a05      	ldr	r2, [pc, #20]	; (80047d4 <FLASH_SetErrorCode+0xc8>)
 80047be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80047c0:	4b03      	ldr	r3, [pc, #12]	; (80047d0 <FLASH_SetErrorCode+0xc4>)
 80047c2:	2202      	movs	r2, #2
 80047c4:	60da      	str	r2, [r3, #12]
  }
}
 80047c6:	bf00      	nop
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	40023c00 	.word	0x40023c00
 80047d4:	200042c4 	.word	0x200042c4

080047d8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	460b      	mov	r3, r1
 80047e2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d102      	bne.n	80047f4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	e010      	b.n	8004816 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80047f4:	78fb      	ldrb	r3, [r7, #3]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d103      	bne.n	8004802 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80047fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	e009      	b.n	8004816 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004802:	78fb      	ldrb	r3, [r7, #3]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d103      	bne.n	8004810 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	e002      	b.n	8004816 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004810:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004814:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004816:	4b13      	ldr	r3, [pc, #76]	; (8004864 <FLASH_Erase_Sector+0x8c>)
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	4a12      	ldr	r2, [pc, #72]	; (8004864 <FLASH_Erase_Sector+0x8c>)
 800481c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004820:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004822:	4b10      	ldr	r3, [pc, #64]	; (8004864 <FLASH_Erase_Sector+0x8c>)
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	490f      	ldr	r1, [pc, #60]	; (8004864 <FLASH_Erase_Sector+0x8c>)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800482e:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <FLASH_Erase_Sector+0x8c>)
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	4a0c      	ldr	r2, [pc, #48]	; (8004864 <FLASH_Erase_Sector+0x8c>)
 8004834:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004838:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800483a:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <FLASH_Erase_Sector+0x8c>)
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4313      	orrs	r3, r2
 8004844:	4a07      	ldr	r2, [pc, #28]	; (8004864 <FLASH_Erase_Sector+0x8c>)
 8004846:	f043 0302 	orr.w	r3, r3, #2
 800484a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800484c:	4b05      	ldr	r3, [pc, #20]	; (8004864 <FLASH_Erase_Sector+0x8c>)
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	4a04      	ldr	r2, [pc, #16]	; (8004864 <FLASH_Erase_Sector+0x8c>)
 8004852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004856:	6113      	str	r3, [r2, #16]
}
 8004858:	bf00      	nop
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	40023c00 	.word	0x40023c00

08004868 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800486c:	4b20      	ldr	r3, [pc, #128]	; (80048f0 <FLASH_FlushCaches+0x88>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004874:	2b00      	cmp	r3, #0
 8004876:	d017      	beq.n	80048a8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004878:	4b1d      	ldr	r3, [pc, #116]	; (80048f0 <FLASH_FlushCaches+0x88>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a1c      	ldr	r2, [pc, #112]	; (80048f0 <FLASH_FlushCaches+0x88>)
 800487e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004882:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004884:	4b1a      	ldr	r3, [pc, #104]	; (80048f0 <FLASH_FlushCaches+0x88>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a19      	ldr	r2, [pc, #100]	; (80048f0 <FLASH_FlushCaches+0x88>)
 800488a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800488e:	6013      	str	r3, [r2, #0]
 8004890:	4b17      	ldr	r3, [pc, #92]	; (80048f0 <FLASH_FlushCaches+0x88>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a16      	ldr	r2, [pc, #88]	; (80048f0 <FLASH_FlushCaches+0x88>)
 8004896:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800489a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800489c:	4b14      	ldr	r3, [pc, #80]	; (80048f0 <FLASH_FlushCaches+0x88>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <FLASH_FlushCaches+0x88>)
 80048a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048a6:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80048a8:	4b11      	ldr	r3, [pc, #68]	; (80048f0 <FLASH_FlushCaches+0x88>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d017      	beq.n	80048e4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80048b4:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <FLASH_FlushCaches+0x88>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a0d      	ldr	r2, [pc, #52]	; (80048f0 <FLASH_FlushCaches+0x88>)
 80048ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048be:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <FLASH_FlushCaches+0x88>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a0a      	ldr	r2, [pc, #40]	; (80048f0 <FLASH_FlushCaches+0x88>)
 80048c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	4b08      	ldr	r3, [pc, #32]	; (80048f0 <FLASH_FlushCaches+0x88>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a07      	ldr	r2, [pc, #28]	; (80048f0 <FLASH_FlushCaches+0x88>)
 80048d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048d6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80048d8:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <FLASH_FlushCaches+0x88>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a04      	ldr	r2, [pc, #16]	; (80048f0 <FLASH_FlushCaches+0x88>)
 80048de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048e2:	6013      	str	r3, [r2, #0]
  }
}
 80048e4:	bf00      	nop
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40023c00 	.word	0x40023c00

080048f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b089      	sub	sp, #36	; 0x24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004902:	2300      	movs	r3, #0
 8004904:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004906:	2300      	movs	r3, #0
 8004908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800490a:	2300      	movs	r3, #0
 800490c:	61fb      	str	r3, [r7, #28]
 800490e:	e159      	b.n	8004bc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004910:	2201      	movs	r2, #1
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	4013      	ands	r3, r2
 8004922:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	429a      	cmp	r2, r3
 800492a:	f040 8148 	bne.w	8004bbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d003      	beq.n	800493e <HAL_GPIO_Init+0x4a>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b12      	cmp	r3, #18
 800493c:	d123      	bne.n	8004986 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	08da      	lsrs	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3208      	adds	r2, #8
 8004946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800494a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	220f      	movs	r2, #15
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	43db      	mvns	r3, r3
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	4013      	ands	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	691a      	ldr	r2, [r3, #16]
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4313      	orrs	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	08da      	lsrs	r2, r3, #3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	3208      	adds	r2, #8
 8004980:	69b9      	ldr	r1, [r7, #24]
 8004982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	2203      	movs	r2, #3
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	43db      	mvns	r3, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4013      	ands	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f003 0203 	and.w	r2, r3, #3
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d00b      	beq.n	80049da <HAL_GPIO_Init+0xe6>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d007      	beq.n	80049da <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049ce:	2b11      	cmp	r3, #17
 80049d0:	d003      	beq.n	80049da <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b12      	cmp	r3, #18
 80049d8:	d130      	bne.n	8004a3c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	2203      	movs	r2, #3
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	43db      	mvns	r3, r3
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	4013      	ands	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a10:	2201      	movs	r2, #1
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	f003 0201 	and.w	r2, r3, #1
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	2203      	movs	r2, #3
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4013      	ands	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 80a2 	beq.w	8004bbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	4b56      	ldr	r3, [pc, #344]	; (8004bd8 <HAL_GPIO_Init+0x2e4>)
 8004a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a82:	4a55      	ldr	r2, [pc, #340]	; (8004bd8 <HAL_GPIO_Init+0x2e4>)
 8004a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a88:	6453      	str	r3, [r2, #68]	; 0x44
 8004a8a:	4b53      	ldr	r3, [pc, #332]	; (8004bd8 <HAL_GPIO_Init+0x2e4>)
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a96:	4a51      	ldr	r2, [pc, #324]	; (8004bdc <HAL_GPIO_Init+0x2e8>)
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	089b      	lsrs	r3, r3, #2
 8004a9c:	3302      	adds	r3, #2
 8004a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	220f      	movs	r2, #15
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a48      	ldr	r2, [pc, #288]	; (8004be0 <HAL_GPIO_Init+0x2ec>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d019      	beq.n	8004af6 <HAL_GPIO_Init+0x202>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a47      	ldr	r2, [pc, #284]	; (8004be4 <HAL_GPIO_Init+0x2f0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d013      	beq.n	8004af2 <HAL_GPIO_Init+0x1fe>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a46      	ldr	r2, [pc, #280]	; (8004be8 <HAL_GPIO_Init+0x2f4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00d      	beq.n	8004aee <HAL_GPIO_Init+0x1fa>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a45      	ldr	r2, [pc, #276]	; (8004bec <HAL_GPIO_Init+0x2f8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d007      	beq.n	8004aea <HAL_GPIO_Init+0x1f6>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a44      	ldr	r2, [pc, #272]	; (8004bf0 <HAL_GPIO_Init+0x2fc>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d101      	bne.n	8004ae6 <HAL_GPIO_Init+0x1f2>
 8004ae2:	2304      	movs	r3, #4
 8004ae4:	e008      	b.n	8004af8 <HAL_GPIO_Init+0x204>
 8004ae6:	2307      	movs	r3, #7
 8004ae8:	e006      	b.n	8004af8 <HAL_GPIO_Init+0x204>
 8004aea:	2303      	movs	r3, #3
 8004aec:	e004      	b.n	8004af8 <HAL_GPIO_Init+0x204>
 8004aee:	2302      	movs	r3, #2
 8004af0:	e002      	b.n	8004af8 <HAL_GPIO_Init+0x204>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <HAL_GPIO_Init+0x204>
 8004af6:	2300      	movs	r3, #0
 8004af8:	69fa      	ldr	r2, [r7, #28]
 8004afa:	f002 0203 	and.w	r2, r2, #3
 8004afe:	0092      	lsls	r2, r2, #2
 8004b00:	4093      	lsls	r3, r2
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b08:	4934      	ldr	r1, [pc, #208]	; (8004bdc <HAL_GPIO_Init+0x2e8>)
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	089b      	lsrs	r3, r3, #2
 8004b0e:	3302      	adds	r3, #2
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b16:	4b37      	ldr	r3, [pc, #220]	; (8004bf4 <HAL_GPIO_Init+0x300>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	4013      	ands	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b3a:	4a2e      	ldr	r2, [pc, #184]	; (8004bf4 <HAL_GPIO_Init+0x300>)
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004b40:	4b2c      	ldr	r3, [pc, #176]	; (8004bf4 <HAL_GPIO_Init+0x300>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b64:	4a23      	ldr	r2, [pc, #140]	; (8004bf4 <HAL_GPIO_Init+0x300>)
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b6a:	4b22      	ldr	r3, [pc, #136]	; (8004bf4 <HAL_GPIO_Init+0x300>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	43db      	mvns	r3, r3
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	4013      	ands	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b8e:	4a19      	ldr	r2, [pc, #100]	; (8004bf4 <HAL_GPIO_Init+0x300>)
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b94:	4b17      	ldr	r3, [pc, #92]	; (8004bf4 <HAL_GPIO_Init+0x300>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bb8:	4a0e      	ldr	r2, [pc, #56]	; (8004bf4 <HAL_GPIO_Init+0x300>)
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	61fb      	str	r3, [r7, #28]
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	2b0f      	cmp	r3, #15
 8004bc8:	f67f aea2 	bls.w	8004910 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004bcc:	bf00      	nop
 8004bce:	3724      	adds	r7, #36	; 0x24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	40013800 	.word	0x40013800
 8004be0:	40020000 	.word	0x40020000
 8004be4:	40020400 	.word	0x40020400
 8004be8:	40020800 	.word	0x40020800
 8004bec:	40020c00 	.word	0x40020c00
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	40013c00 	.word	0x40013c00

08004bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	807b      	strh	r3, [r7, #2]
 8004c04:	4613      	mov	r3, r2
 8004c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c08:	787b      	ldrb	r3, [r7, #1]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c0e:	887a      	ldrh	r2, [r7, #2]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c14:	e003      	b.n	8004c1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c16:	887b      	ldrh	r3, [r7, #2]
 8004c18:	041a      	lsls	r2, r3, #16
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	619a      	str	r2, [r3, #24]
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	460b      	mov	r3, r1
 8004c34:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695a      	ldr	r2, [r3, #20]
 8004c3a:	887b      	ldrh	r3, [r7, #2]
 8004c3c:	401a      	ands	r2, r3
 8004c3e:	887b      	ldrh	r3, [r7, #2]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d104      	bne.n	8004c4e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c44:	887b      	ldrh	r3, [r7, #2]
 8004c46:	041a      	lsls	r2, r3, #16
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004c4c:	e002      	b.n	8004c54 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004c4e:	887a      	ldrh	r2, [r7, #2]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	619a      	str	r2, [r3, #24]
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	4603      	mov	r3, r0
 8004c68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c6a:	4b08      	ldr	r3, [pc, #32]	; (8004c8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c6c:	695a      	ldr	r2, [r3, #20]
 8004c6e:	88fb      	ldrh	r3, [r7, #6]
 8004c70:	4013      	ands	r3, r2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d006      	beq.n	8004c84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c76:	4a05      	ldr	r2, [pc, #20]	; (8004c8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c78:	88fb      	ldrh	r3, [r7, #6]
 8004c7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c7c:	88fb      	ldrh	r3, [r7, #6]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 f806 	bl	8004c90 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c84:	bf00      	nop
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40013c00 	.word	0x40013c00

08004c90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	4603      	mov	r3, r0
 8004c98:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
	...

08004ca8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e10f      	b.n	8004eda <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f006 fd5e 	bl	800b790 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2224      	movs	r2, #36	; 0x24
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0201 	bic.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004cec:	f001 fc5c 	bl	80065a8 <HAL_RCC_GetPCLK1Freq>
 8004cf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	4a7b      	ldr	r2, [pc, #492]	; (8004ee4 <HAL_I2C_Init+0x23c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d807      	bhi.n	8004d0c <HAL_I2C_Init+0x64>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4a7a      	ldr	r2, [pc, #488]	; (8004ee8 <HAL_I2C_Init+0x240>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	bf94      	ite	ls
 8004d04:	2301      	movls	r3, #1
 8004d06:	2300      	movhi	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	e006      	b.n	8004d1a <HAL_I2C_Init+0x72>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4a77      	ldr	r2, [pc, #476]	; (8004eec <HAL_I2C_Init+0x244>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	bf94      	ite	ls
 8004d14:	2301      	movls	r3, #1
 8004d16:	2300      	movhi	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e0db      	b.n	8004eda <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4a72      	ldr	r2, [pc, #456]	; (8004ef0 <HAL_I2C_Init+0x248>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	0c9b      	lsrs	r3, r3, #18
 8004d2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	4a64      	ldr	r2, [pc, #400]	; (8004ee4 <HAL_I2C_Init+0x23c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d802      	bhi.n	8004d5c <HAL_I2C_Init+0xb4>
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	e009      	b.n	8004d70 <HAL_I2C_Init+0xc8>
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d62:	fb02 f303 	mul.w	r3, r2, r3
 8004d66:	4a63      	ldr	r2, [pc, #396]	; (8004ef4 <HAL_I2C_Init+0x24c>)
 8004d68:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6c:	099b      	lsrs	r3, r3, #6
 8004d6e:	3301      	adds	r3, #1
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6812      	ldr	r2, [r2, #0]
 8004d74:	430b      	orrs	r3, r1
 8004d76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	4956      	ldr	r1, [pc, #344]	; (8004ee4 <HAL_I2C_Init+0x23c>)
 8004d8c:	428b      	cmp	r3, r1
 8004d8e:	d80d      	bhi.n	8004dac <HAL_I2C_Init+0x104>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	1e59      	subs	r1, r3, #1
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d9e:	3301      	adds	r3, #1
 8004da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	bf38      	it	cc
 8004da8:	2304      	movcc	r3, #4
 8004daa:	e04f      	b.n	8004e4c <HAL_I2C_Init+0x1a4>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d111      	bne.n	8004dd8 <HAL_I2C_Init+0x130>
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	1e58      	subs	r0, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6859      	ldr	r1, [r3, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	440b      	add	r3, r1
 8004dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	bf0c      	ite	eq
 8004dd0:	2301      	moveq	r3, #1
 8004dd2:	2300      	movne	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	e012      	b.n	8004dfe <HAL_I2C_Init+0x156>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	1e58      	subs	r0, r3, #1
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6859      	ldr	r1, [r3, #4]
 8004de0:	460b      	mov	r3, r1
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	440b      	add	r3, r1
 8004de6:	0099      	lsls	r1, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dee:	3301      	adds	r3, #1
 8004df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	bf0c      	ite	eq
 8004df8:	2301      	moveq	r3, #1
 8004dfa:	2300      	movne	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <HAL_I2C_Init+0x15e>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e022      	b.n	8004e4c <HAL_I2C_Init+0x1a4>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10e      	bne.n	8004e2c <HAL_I2C_Init+0x184>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1e58      	subs	r0, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6859      	ldr	r1, [r3, #4]
 8004e16:	460b      	mov	r3, r1
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	440b      	add	r3, r1
 8004e1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e20:	3301      	adds	r3, #1
 8004e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e2a:	e00f      	b.n	8004e4c <HAL_I2C_Init+0x1a4>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	1e58      	subs	r0, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6859      	ldr	r1, [r3, #4]
 8004e34:	460b      	mov	r3, r1
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	440b      	add	r3, r1
 8004e3a:	0099      	lsls	r1, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e42:	3301      	adds	r3, #1
 8004e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	6809      	ldr	r1, [r1, #0]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69da      	ldr	r2, [r3, #28]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6911      	ldr	r1, [r2, #16]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	68d2      	ldr	r2, [r2, #12]
 8004e86:	4311      	orrs	r1, r2
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6812      	ldr	r2, [r2, #0]
 8004e8c:	430b      	orrs	r3, r1
 8004e8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	695a      	ldr	r2, [r3, #20]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	000186a0 	.word	0x000186a0
 8004ee8:	001e847f 	.word	0x001e847f
 8004eec:	003d08ff 	.word	0x003d08ff
 8004ef0:	431bde83 	.word	0x431bde83
 8004ef4:	10624dd3 	.word	0x10624dd3

08004ef8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af02      	add	r7, sp, #8
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	607a      	str	r2, [r7, #4]
 8004f02:	461a      	mov	r2, r3
 8004f04:	460b      	mov	r3, r1
 8004f06:	817b      	strh	r3, [r7, #10]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f0c:	f7fe ff10 	bl	8003d30 <HAL_GetTick>
 8004f10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b20      	cmp	r3, #32
 8004f1c:	f040 80e0 	bne.w	80050e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	2319      	movs	r3, #25
 8004f26:	2201      	movs	r2, #1
 8004f28:	4970      	ldr	r1, [pc, #448]	; (80050ec <HAL_I2C_Master_Transmit+0x1f4>)
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 fd56 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004f36:	2302      	movs	r3, #2
 8004f38:	e0d3      	b.n	80050e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_I2C_Master_Transmit+0x50>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e0cc      	b.n	80050e2 <HAL_I2C_Master_Transmit+0x1ea>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d007      	beq.n	8004f6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f042 0201 	orr.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2221      	movs	r2, #33	; 0x21
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2210      	movs	r2, #16
 8004f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	893a      	ldrh	r2, [r7, #8]
 8004f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4a50      	ldr	r2, [pc, #320]	; (80050f0 <HAL_I2C_Master_Transmit+0x1f8>)
 8004fae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004fb0:	8979      	ldrh	r1, [r7, #10]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	6a3a      	ldr	r2, [r7, #32]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 fbe4 	bl	8005784 <I2C_MasterRequestWrite>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e08d      	b.n	80050e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004fdc:	e066      	b.n	80050ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	6a39      	ldr	r1, [r7, #32]
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f000 fdd0 	bl	8005b88 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00d      	beq.n	800500a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d107      	bne.n	8005006 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005004:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e06b      	b.n	80050e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	781a      	ldrb	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b04      	cmp	r3, #4
 8005046:	d11b      	bne.n	8005080 <HAL_I2C_Master_Transmit+0x188>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504c:	2b00      	cmp	r3, #0
 800504e:	d017      	beq.n	8005080 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	781a      	ldrb	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	6a39      	ldr	r1, [r7, #32]
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 fdc0 	bl	8005c0a <I2C_WaitOnBTFFlagUntilTimeout>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00d      	beq.n	80050ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005094:	2b04      	cmp	r3, #4
 8005096:	d107      	bne.n	80050a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e01a      	b.n	80050e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d194      	bne.n	8004fde <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	e000      	b.n	80050e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80050e0:	2302      	movs	r3, #2
  }
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	00100002 	.word	0x00100002
 80050f0:	ffff0000 	.word	0xffff0000

080050f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08c      	sub	sp, #48	; 0x30
 80050f8:	af02      	add	r7, sp, #8
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	607a      	str	r2, [r7, #4]
 80050fe:	461a      	mov	r2, r3
 8005100:	460b      	mov	r3, r1
 8005102:	817b      	strh	r3, [r7, #10]
 8005104:	4613      	mov	r3, r2
 8005106:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005108:	f7fe fe12 	bl	8003d30 <HAL_GetTick>
 800510c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b20      	cmp	r3, #32
 8005118:	f040 820b 	bne.w	8005532 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	2319      	movs	r3, #25
 8005122:	2201      	movs	r2, #1
 8005124:	497c      	ldr	r1, [pc, #496]	; (8005318 <HAL_I2C_Master_Receive+0x224>)
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 fc58 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005132:	2302      	movs	r3, #2
 8005134:	e1fe      	b.n	8005534 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_I2C_Master_Receive+0x50>
 8005140:	2302      	movs	r3, #2
 8005142:	e1f7      	b.n	8005534 <HAL_I2C_Master_Receive+0x440>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b01      	cmp	r3, #1
 8005158:	d007      	beq.n	800516a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0201 	orr.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005178:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2222      	movs	r2, #34	; 0x22
 800517e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2210      	movs	r2, #16
 8005186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	893a      	ldrh	r2, [r7, #8]
 800519a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4a5c      	ldr	r2, [pc, #368]	; (800531c <HAL_I2C_Master_Receive+0x228>)
 80051aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80051ac:	8979      	ldrh	r1, [r7, #10]
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 fb5c 	bl	8005870 <I2C_MasterRequestRead>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e1b8      	b.n	8005534 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d113      	bne.n	80051f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ca:	2300      	movs	r3, #0
 80051cc:	623b      	str	r3, [r7, #32]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	623b      	str	r3, [r7, #32]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	623b      	str	r3, [r7, #32]
 80051de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	e18c      	b.n	800550c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d11b      	bne.n	8005232 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005208:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800520a:	2300      	movs	r3, #0
 800520c:	61fb      	str	r3, [r7, #28]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	61fb      	str	r3, [r7, #28]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	61fb      	str	r3, [r7, #28]
 800521e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	e16c      	b.n	800550c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005236:	2b02      	cmp	r3, #2
 8005238:	d11b      	bne.n	8005272 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005248:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005258:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800525a:	2300      	movs	r3, #0
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	61bb      	str	r3, [r7, #24]
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	e14c      	b.n	800550c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005280:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005282:	2300      	movs	r3, #0
 8005284:	617b      	str	r3, [r7, #20]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005298:	e138      	b.n	800550c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529e:	2b03      	cmp	r3, #3
 80052a0:	f200 80f1 	bhi.w	8005486 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d123      	bne.n	80052f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fceb 	bl	8005c8c <I2C_WaitOnRXNEFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e139      	b.n	8005534 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691a      	ldr	r2, [r3, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052f2:	e10b      	b.n	800550c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d14e      	bne.n	800539a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	9300      	str	r3, [sp, #0]
 8005300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005302:	2200      	movs	r2, #0
 8005304:	4906      	ldr	r1, [pc, #24]	; (8005320 <HAL_I2C_Master_Receive+0x22c>)
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 fb68 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d008      	beq.n	8005324 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e10e      	b.n	8005534 <HAL_I2C_Master_Receive+0x440>
 8005316:	bf00      	nop
 8005318:	00100002 	.word	0x00100002
 800531c:	ffff0000 	.word	0xffff0000
 8005320:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005332:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691a      	ldr	r2, [r3, #16]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535c:	b29b      	uxth	r3, r3
 800535e:	3b01      	subs	r3, #1
 8005360:	b29a      	uxth	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005382:	3b01      	subs	r3, #1
 8005384:	b29a      	uxth	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005398:	e0b8      	b.n	800550c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	2200      	movs	r2, #0
 80053a2:	4966      	ldr	r1, [pc, #408]	; (800553c <HAL_I2C_Master_Receive+0x448>)
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 fb19 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e0bf      	b.n	8005534 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	2200      	movs	r2, #0
 80053fe:	494f      	ldr	r1, [pc, #316]	; (800553c <HAL_I2C_Master_Receive+0x448>)
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 faeb 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e091      	b.n	8005534 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800541e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691a      	ldr	r2, [r3, #16]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005448:	b29b      	uxth	r3, r3
 800544a:	3b01      	subs	r3, #1
 800544c:	b29a      	uxth	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546e:	3b01      	subs	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b01      	subs	r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005484:	e042      	b.n	800550c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005488:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 fbfe 	bl	8005c8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e04c      	b.n	8005534 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	691a      	ldr	r2, [r3, #16]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	b2d2      	uxtb	r2, r2
 80054a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	1c5a      	adds	r2, r3, #1
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b6:	3b01      	subs	r3, #1
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	f003 0304 	and.w	r3, r3, #4
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d118      	bne.n	800550c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	691a      	ldr	r2, [r3, #16]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	1c5a      	adds	r2, r3, #1
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f6:	3b01      	subs	r3, #1
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005510:	2b00      	cmp	r3, #0
 8005512:	f47f aec2 	bne.w	800529a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	e000      	b.n	8005534 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005532:	2302      	movs	r3, #2
  }
}
 8005534:	4618      	mov	r0, r3
 8005536:	3728      	adds	r7, #40	; 0x28
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	00010004 	.word	0x00010004

08005540 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08a      	sub	sp, #40	; 0x28
 8005544:	af02      	add	r7, sp, #8
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	607a      	str	r2, [r7, #4]
 800554a:	603b      	str	r3, [r7, #0]
 800554c:	460b      	mov	r3, r1
 800554e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005550:	f7fe fbee 	bl	8003d30 <HAL_GetTick>
 8005554:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005556:	2301      	movs	r3, #1
 8005558:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b20      	cmp	r3, #32
 8005564:	f040 8105 	bne.w	8005772 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	2319      	movs	r3, #25
 800556e:	2201      	movs	r2, #1
 8005570:	4982      	ldr	r1, [pc, #520]	; (800577c <HAL_I2C_IsDeviceReady+0x23c>)
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 fa32 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800557e:	2302      	movs	r3, #2
 8005580:	e0f8      	b.n	8005774 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <HAL_I2C_IsDeviceReady+0x50>
 800558c:	2302      	movs	r3, #2
 800558e:	e0f1      	b.n	8005774 <HAL_I2C_IsDeviceReady+0x234>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d007      	beq.n	80055b6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f042 0201 	orr.w	r2, r2, #1
 80055b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2224      	movs	r2, #36	; 0x24
 80055ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4a6a      	ldr	r2, [pc, #424]	; (8005780 <HAL_I2C_IsDeviceReady+0x240>)
 80055d8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055e8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 f9f0 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e0b6      	b.n	8005774 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005606:	897b      	ldrh	r3, [r7, #10]
 8005608:	b2db      	uxtb	r3, r3
 800560a:	461a      	mov	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005614:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005616:	f7fe fb8b 	bl	8003d30 <HAL_GetTick>
 800561a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b02      	cmp	r3, #2
 8005628:	bf0c      	ite	eq
 800562a:	2301      	moveq	r3, #1
 800562c:	2300      	movne	r3, #0
 800562e:	b2db      	uxtb	r3, r3
 8005630:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800563c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005640:	bf0c      	ite	eq
 8005642:	2301      	moveq	r3, #1
 8005644:	2300      	movne	r3, #0
 8005646:	b2db      	uxtb	r3, r3
 8005648:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800564a:	e025      	b.n	8005698 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800564c:	f7fe fb70 	bl	8003d30 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d302      	bcc.n	8005662 <HAL_I2C_IsDeviceReady+0x122>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d103      	bne.n	800566a <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	22a0      	movs	r2, #160	; 0xa0
 8005666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b02      	cmp	r3, #2
 8005676:	bf0c      	ite	eq
 8005678:	2301      	moveq	r3, #1
 800567a:	2300      	movne	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800568a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800568e:	bf0c      	ite	eq
 8005690:	2301      	moveq	r3, #1
 8005692:	2300      	movne	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2ba0      	cmp	r3, #160	; 0xa0
 80056a2:	d005      	beq.n	80056b0 <HAL_I2C_IsDeviceReady+0x170>
 80056a4:	7dfb      	ldrb	r3, [r7, #23]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d102      	bne.n	80056b0 <HAL_I2C_IsDeviceReady+0x170>
 80056aa:	7dbb      	ldrb	r3, [r7, #22]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0cd      	beq.n	800564c <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d129      	bne.n	800571a <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056d6:	2300      	movs	r3, #0
 80056d8:	613b      	str	r3, [r7, #16]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	613b      	str	r3, [r7, #16]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	613b      	str	r3, [r7, #16]
 80056ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	2319      	movs	r3, #25
 80056f2:	2201      	movs	r2, #1
 80056f4:	4921      	ldr	r1, [pc, #132]	; (800577c <HAL_I2C_IsDeviceReady+0x23c>)
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 f970 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e036      	b.n	8005774 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	e02c      	b.n	8005774 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005728:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005732:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	2319      	movs	r3, #25
 800573a:	2201      	movs	r2, #1
 800573c:	490f      	ldr	r1, [pc, #60]	; (800577c <HAL_I2C_IsDeviceReady+0x23c>)
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 f94c 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e012      	b.n	8005774 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	3301      	adds	r3, #1
 8005752:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	429a      	cmp	r2, r3
 800575a:	f4ff af3e 	bcc.w	80055da <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e000      	b.n	8005774 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8005772:	2302      	movs	r3, #2
  }
}
 8005774:	4618      	mov	r0, r3
 8005776:	3720      	adds	r7, #32
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	00100002 	.word	0x00100002
 8005780:	ffff0000 	.word	0xffff0000

08005784 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af02      	add	r7, sp, #8
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	607a      	str	r2, [r7, #4]
 800578e:	603b      	str	r3, [r7, #0]
 8005790:	460b      	mov	r3, r1
 8005792:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005798:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b08      	cmp	r3, #8
 800579e:	d006      	beq.n	80057ae <I2C_MasterRequestWrite+0x2a>
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d003      	beq.n	80057ae <I2C_MasterRequestWrite+0x2a>
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057ac:	d108      	bne.n	80057c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	e00b      	b.n	80057d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c4:	2b12      	cmp	r3, #18
 80057c6:	d107      	bne.n	80057d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f8f9 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e035      	b.n	8005860 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057fc:	d108      	bne.n	8005810 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057fe:	897b      	ldrh	r3, [r7, #10]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	461a      	mov	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800580c:	611a      	str	r2, [r3, #16]
 800580e:	e01b      	b.n	8005848 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005810:	897b      	ldrh	r3, [r7, #10]
 8005812:	11db      	asrs	r3, r3, #7
 8005814:	b2db      	uxtb	r3, r3
 8005816:	f003 0306 	and.w	r3, r3, #6
 800581a:	b2db      	uxtb	r3, r3
 800581c:	f063 030f 	orn	r3, r3, #15
 8005820:	b2da      	uxtb	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	490e      	ldr	r1, [pc, #56]	; (8005868 <I2C_MasterRequestWrite+0xe4>)
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f000 f92b 	bl	8005a8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e010      	b.n	8005860 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800583e:	897b      	ldrh	r3, [r7, #10]
 8005840:	b2da      	uxtb	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	4907      	ldr	r1, [pc, #28]	; (800586c <I2C_MasterRequestWrite+0xe8>)
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 f91b 	bl	8005a8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	00010008 	.word	0x00010008
 800586c:	00010002 	.word	0x00010002

08005870 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af02      	add	r7, sp, #8
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	607a      	str	r2, [r7, #4]
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	460b      	mov	r3, r1
 800587e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005884:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005894:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2b08      	cmp	r3, #8
 800589a:	d006      	beq.n	80058aa <I2C_MasterRequestRead+0x3a>
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d003      	beq.n	80058aa <I2C_MasterRequestRead+0x3a>
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058a8:	d108      	bne.n	80058bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	e00b      	b.n	80058d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c0:	2b11      	cmp	r3, #17
 80058c2:	d107      	bne.n	80058d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 f87b 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e06d      	b.n	80059cc <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058f8:	d108      	bne.n	800590c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058fa:	897b      	ldrh	r3, [r7, #10]
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	f043 0301 	orr.w	r3, r3, #1
 8005902:	b2da      	uxtb	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	611a      	str	r2, [r3, #16]
 800590a:	e053      	b.n	80059b4 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800590c:	897b      	ldrh	r3, [r7, #10]
 800590e:	11db      	asrs	r3, r3, #7
 8005910:	b2db      	uxtb	r3, r3
 8005912:	f003 0306 	and.w	r3, r3, #6
 8005916:	b2db      	uxtb	r3, r3
 8005918:	f063 030f 	orn	r3, r3, #15
 800591c:	b2da      	uxtb	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	492a      	ldr	r1, [pc, #168]	; (80059d4 <I2C_MasterRequestRead+0x164>)
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 f8ad 	bl	8005a8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e048      	b.n	80059cc <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800593a:	897b      	ldrh	r3, [r7, #10]
 800593c:	b2da      	uxtb	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	4923      	ldr	r1, [pc, #140]	; (80059d8 <I2C_MasterRequestRead+0x168>)
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 f89d 	bl	8005a8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e038      	b.n	80059cc <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800595a:	2300      	movs	r3, #0
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	613b      	str	r3, [r7, #16]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	613b      	str	r3, [r7, #16]
 800596e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800597e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 f825 	bl	80059dc <I2C_WaitOnFlagUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e017      	b.n	80059cc <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800599c:	897b      	ldrh	r3, [r7, #10]
 800599e:	11db      	asrs	r3, r3, #7
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	f003 0306 	and.w	r3, r3, #6
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	f063 030e 	orn	r3, r3, #14
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	4907      	ldr	r1, [pc, #28]	; (80059d8 <I2C_MasterRequestRead+0x168>)
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 f865 	bl	8005a8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e000      	b.n	80059cc <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3718      	adds	r7, #24
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	00010008 	.word	0x00010008
 80059d8:	00010002 	.word	0x00010002

080059dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	4613      	mov	r3, r2
 80059ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059ec:	e025      	b.n	8005a3a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f4:	d021      	beq.n	8005a3a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f6:	f7fe f99b 	bl	8003d30 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d302      	bcc.n	8005a0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d116      	bne.n	8005a3a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	f043 0220 	orr.w	r2, r3, #32
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e023      	b.n	8005a82 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	0c1b      	lsrs	r3, r3, #16
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d10d      	bne.n	8005a60 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	43da      	mvns	r2, r3
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	bf0c      	ite	eq
 8005a56:	2301      	moveq	r3, #1
 8005a58:	2300      	movne	r3, #0
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	e00c      	b.n	8005a7a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	43da      	mvns	r2, r3
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	bf0c      	ite	eq
 8005a72:	2301      	moveq	r3, #1
 8005a74:	2300      	movne	r3, #0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	461a      	mov	r2, r3
 8005a7a:	79fb      	ldrb	r3, [r7, #7]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d0b6      	beq.n	80059ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	607a      	str	r2, [r7, #4]
 8005a96:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a98:	e051      	b.n	8005b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aa8:	d123      	bne.n	8005af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ab8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ac2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2220      	movs	r2, #32
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	f043 0204 	orr.w	r2, r3, #4
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e046      	b.n	8005b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af8:	d021      	beq.n	8005b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afa:	f7fe f919 	bl	8003d30 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d302      	bcc.n	8005b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d116      	bne.n	8005b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	f043 0220 	orr.w	r2, r3, #32
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e020      	b.n	8005b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	0c1b      	lsrs	r3, r3, #16
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d10c      	bne.n	8005b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	43da      	mvns	r2, r3
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	4013      	ands	r3, r2
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	bf14      	ite	ne
 8005b5a:	2301      	movne	r3, #1
 8005b5c:	2300      	moveq	r3, #0
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	e00b      	b.n	8005b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	43da      	mvns	r2, r3
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	bf14      	ite	ne
 8005b74:	2301      	movne	r3, #1
 8005b76:	2300      	moveq	r3, #0
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d18d      	bne.n	8005a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b94:	e02d      	b.n	8005bf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f8ce 	bl	8005d38 <I2C_IsAcknowledgeFailed>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e02d      	b.n	8005c02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bac:	d021      	beq.n	8005bf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bae:	f7fe f8bf 	bl	8003d30 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d302      	bcc.n	8005bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d116      	bne.n	8005bf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	f043 0220 	orr.w	r2, r3, #32
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e007      	b.n	8005c02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfc:	2b80      	cmp	r3, #128	; 0x80
 8005bfe:	d1ca      	bne.n	8005b96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	60f8      	str	r0, [r7, #12]
 8005c12:	60b9      	str	r1, [r7, #8]
 8005c14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c16:	e02d      	b.n	8005c74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f88d 	bl	8005d38 <I2C_IsAcknowledgeFailed>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e02d      	b.n	8005c84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2e:	d021      	beq.n	8005c74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c30:	f7fe f87e 	bl	8003d30 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d302      	bcc.n	8005c46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d116      	bne.n	8005c74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	f043 0220 	orr.w	r2, r3, #32
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e007      	b.n	8005c84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	f003 0304 	and.w	r3, r3, #4
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d1ca      	bne.n	8005c18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c98:	e042      	b.n	8005d20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	f003 0310 	and.w	r3, r3, #16
 8005ca4:	2b10      	cmp	r3, #16
 8005ca6:	d119      	bne.n	8005cdc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f06f 0210 	mvn.w	r2, #16
 8005cb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e029      	b.n	8005d30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cdc:	f7fe f828 	bl	8003d30 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d302      	bcc.n	8005cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d116      	bne.n	8005d20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	f043 0220 	orr.w	r2, r3, #32
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e007      	b.n	8005d30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2a:	2b40      	cmp	r3, #64	; 0x40
 8005d2c:	d1b5      	bne.n	8005c9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d4e:	d11b      	bne.n	8005d88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2220      	movs	r2, #32
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d74:	f043 0204 	orr.w	r2, r3, #4
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e000      	b.n	8005d8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
	...

08005d98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e22d      	b.n	8006206 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d075      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005db6:	4ba3      	ldr	r3, [pc, #652]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 030c 	and.w	r3, r3, #12
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d00c      	beq.n	8005ddc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dc2:	4ba0      	ldr	r3, [pc, #640]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dca:	2b08      	cmp	r3, #8
 8005dcc:	d112      	bne.n	8005df4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dce:	4b9d      	ldr	r3, [pc, #628]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dda:	d10b      	bne.n	8005df4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ddc:	4b99      	ldr	r3, [pc, #612]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d05b      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x108>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d157      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e208      	b.n	8006206 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dfc:	d106      	bne.n	8005e0c <HAL_RCC_OscConfig+0x74>
 8005dfe:	4b91      	ldr	r3, [pc, #580]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a90      	ldr	r2, [pc, #576]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	e01d      	b.n	8005e48 <HAL_RCC_OscConfig+0xb0>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e14:	d10c      	bne.n	8005e30 <HAL_RCC_OscConfig+0x98>
 8005e16:	4b8b      	ldr	r3, [pc, #556]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a8a      	ldr	r2, [pc, #552]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	4b88      	ldr	r3, [pc, #544]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a87      	ldr	r2, [pc, #540]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	e00b      	b.n	8005e48 <HAL_RCC_OscConfig+0xb0>
 8005e30:	4b84      	ldr	r3, [pc, #528]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a83      	ldr	r2, [pc, #524]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	4b81      	ldr	r3, [pc, #516]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a80      	ldr	r2, [pc, #512]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d013      	beq.n	8005e78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e50:	f7fd ff6e 	bl	8003d30 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e58:	f7fd ff6a 	bl	8003d30 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b64      	cmp	r3, #100	; 0x64
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e1cd      	b.n	8006206 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e6a:	4b76      	ldr	r3, [pc, #472]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0f0      	beq.n	8005e58 <HAL_RCC_OscConfig+0xc0>
 8005e76:	e014      	b.n	8005ea2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e78:	f7fd ff5a 	bl	8003d30 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e80:	f7fd ff56 	bl	8003d30 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b64      	cmp	r3, #100	; 0x64
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e1b9      	b.n	8006206 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e92:	4b6c      	ldr	r3, [pc, #432]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f0      	bne.n	8005e80 <HAL_RCC_OscConfig+0xe8>
 8005e9e:	e000      	b.n	8005ea2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d063      	beq.n	8005f76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eae:	4b65      	ldr	r3, [pc, #404]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f003 030c 	and.w	r3, r3, #12
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00b      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eba:	4b62      	ldr	r3, [pc, #392]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d11c      	bne.n	8005f00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ec6:	4b5f      	ldr	r3, [pc, #380]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d116      	bne.n	8005f00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ed2:	4b5c      	ldr	r3, [pc, #368]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d005      	beq.n	8005eea <HAL_RCC_OscConfig+0x152>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d001      	beq.n	8005eea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e18d      	b.n	8006206 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eea:	4b56      	ldr	r3, [pc, #344]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	4952      	ldr	r1, [pc, #328]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005efe:	e03a      	b.n	8005f76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d020      	beq.n	8005f4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f08:	4b4f      	ldr	r3, [pc, #316]	; (8006048 <HAL_RCC_OscConfig+0x2b0>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0e:	f7fd ff0f 	bl	8003d30 <HAL_GetTick>
 8005f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f14:	e008      	b.n	8005f28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f16:	f7fd ff0b 	bl	8003d30 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d901      	bls.n	8005f28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e16e      	b.n	8006206 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f28:	4b46      	ldr	r3, [pc, #280]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0f0      	beq.n	8005f16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f34:	4b43      	ldr	r3, [pc, #268]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	4940      	ldr	r1, [pc, #256]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	600b      	str	r3, [r1, #0]
 8005f48:	e015      	b.n	8005f76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f4a:	4b3f      	ldr	r3, [pc, #252]	; (8006048 <HAL_RCC_OscConfig+0x2b0>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f50:	f7fd feee 	bl	8003d30 <HAL_GetTick>
 8005f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f56:	e008      	b.n	8005f6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f58:	f7fd feea 	bl	8003d30 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e14d      	b.n	8006206 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f6a:	4b36      	ldr	r3, [pc, #216]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1f0      	bne.n	8005f58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d030      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d016      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f8a:	4b30      	ldr	r3, [pc, #192]	; (800604c <HAL_RCC_OscConfig+0x2b4>)
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f90:	f7fd fece 	bl	8003d30 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f98:	f7fd feca 	bl	8003d30 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e12d      	b.n	8006206 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005faa:	4b26      	ldr	r3, [pc, #152]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d0f0      	beq.n	8005f98 <HAL_RCC_OscConfig+0x200>
 8005fb6:	e015      	b.n	8005fe4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fb8:	4b24      	ldr	r3, [pc, #144]	; (800604c <HAL_RCC_OscConfig+0x2b4>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fbe:	f7fd feb7 	bl	8003d30 <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fc6:	f7fd feb3 	bl	8003d30 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e116      	b.n	8006206 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fd8:	4b1a      	ldr	r3, [pc, #104]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1f0      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0304 	and.w	r3, r3, #4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 80a0 	beq.w	8006132 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ff6:	4b13      	ldr	r3, [pc, #76]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10f      	bne.n	8006022 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006002:	2300      	movs	r3, #0
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	4b0f      	ldr	r3, [pc, #60]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	4a0e      	ldr	r2, [pc, #56]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 800600c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006010:	6413      	str	r3, [r2, #64]	; 0x40
 8006012:	4b0c      	ldr	r3, [pc, #48]	; (8006044 <HAL_RCC_OscConfig+0x2ac>)
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800601e:	2301      	movs	r3, #1
 8006020:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006022:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <HAL_RCC_OscConfig+0x2b8>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602a:	2b00      	cmp	r3, #0
 800602c:	d121      	bne.n	8006072 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800602e:	4b08      	ldr	r3, [pc, #32]	; (8006050 <HAL_RCC_OscConfig+0x2b8>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a07      	ldr	r2, [pc, #28]	; (8006050 <HAL_RCC_OscConfig+0x2b8>)
 8006034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800603a:	f7fd fe79 	bl	8003d30 <HAL_GetTick>
 800603e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006040:	e011      	b.n	8006066 <HAL_RCC_OscConfig+0x2ce>
 8006042:	bf00      	nop
 8006044:	40023800 	.word	0x40023800
 8006048:	42470000 	.word	0x42470000
 800604c:	42470e80 	.word	0x42470e80
 8006050:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006054:	f7fd fe6c 	bl	8003d30 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e0cf      	b.n	8006206 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006066:	4b6a      	ldr	r3, [pc, #424]	; (8006210 <HAL_RCC_OscConfig+0x478>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0f0      	beq.n	8006054 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d106      	bne.n	8006088 <HAL_RCC_OscConfig+0x2f0>
 800607a:	4b66      	ldr	r3, [pc, #408]	; (8006214 <HAL_RCC_OscConfig+0x47c>)
 800607c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607e:	4a65      	ldr	r2, [pc, #404]	; (8006214 <HAL_RCC_OscConfig+0x47c>)
 8006080:	f043 0301 	orr.w	r3, r3, #1
 8006084:	6713      	str	r3, [r2, #112]	; 0x70
 8006086:	e01c      	b.n	80060c2 <HAL_RCC_OscConfig+0x32a>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	2b05      	cmp	r3, #5
 800608e:	d10c      	bne.n	80060aa <HAL_RCC_OscConfig+0x312>
 8006090:	4b60      	ldr	r3, [pc, #384]	; (8006214 <HAL_RCC_OscConfig+0x47c>)
 8006092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006094:	4a5f      	ldr	r2, [pc, #380]	; (8006214 <HAL_RCC_OscConfig+0x47c>)
 8006096:	f043 0304 	orr.w	r3, r3, #4
 800609a:	6713      	str	r3, [r2, #112]	; 0x70
 800609c:	4b5d      	ldr	r3, [pc, #372]	; (8006214 <HAL_RCC_OscConfig+0x47c>)
 800609e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a0:	4a5c      	ldr	r2, [pc, #368]	; (8006214 <HAL_RCC_OscConfig+0x47c>)
 80060a2:	f043 0301 	orr.w	r3, r3, #1
 80060a6:	6713      	str	r3, [r2, #112]	; 0x70
 80060a8:	e00b      	b.n	80060c2 <HAL_RCC_OscConfig+0x32a>
 80060aa:	4b5a      	ldr	r3, [pc, #360]	; (8006214 <HAL_RCC_OscConfig+0x47c>)
 80060ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ae:	4a59      	ldr	r2, [pc, #356]	; (8006214 <HAL_RCC_OscConfig+0x47c>)
 80060b0:	f023 0301 	bic.w	r3, r3, #1
 80060b4:	6713      	str	r3, [r2, #112]	; 0x70
 80060b6:	4b57      	ldr	r3, [pc, #348]	; (8006214 <HAL_RCC_OscConfig+0x47c>)
 80060b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ba:	4a56      	ldr	r2, [pc, #344]	; (8006214 <HAL_RCC_OscConfig+0x47c>)
 80060bc:	f023 0304 	bic.w	r3, r3, #4
 80060c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d015      	beq.n	80060f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ca:	f7fd fe31 	bl	8003d30 <HAL_GetTick>
 80060ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060d0:	e00a      	b.n	80060e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060d2:	f7fd fe2d 	bl	8003d30 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d901      	bls.n	80060e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e08e      	b.n	8006206 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060e8:	4b4a      	ldr	r3, [pc, #296]	; (8006214 <HAL_RCC_OscConfig+0x47c>)
 80060ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0ee      	beq.n	80060d2 <HAL_RCC_OscConfig+0x33a>
 80060f4:	e014      	b.n	8006120 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060f6:	f7fd fe1b 	bl	8003d30 <HAL_GetTick>
 80060fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060fc:	e00a      	b.n	8006114 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060fe:	f7fd fe17 	bl	8003d30 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	f241 3288 	movw	r2, #5000	; 0x1388
 800610c:	4293      	cmp	r3, r2
 800610e:	d901      	bls.n	8006114 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e078      	b.n	8006206 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006114:	4b3f      	ldr	r3, [pc, #252]	; (8006214 <HAL_RCC_OscConfig+0x47c>)
 8006116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006118:	f003 0302 	and.w	r3, r3, #2
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1ee      	bne.n	80060fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006120:	7dfb      	ldrb	r3, [r7, #23]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d105      	bne.n	8006132 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006126:	4b3b      	ldr	r3, [pc, #236]	; (8006214 <HAL_RCC_OscConfig+0x47c>)
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	4a3a      	ldr	r2, [pc, #232]	; (8006214 <HAL_RCC_OscConfig+0x47c>)
 800612c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006130:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d064      	beq.n	8006204 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800613a:	4b36      	ldr	r3, [pc, #216]	; (8006214 <HAL_RCC_OscConfig+0x47c>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 030c 	and.w	r3, r3, #12
 8006142:	2b08      	cmp	r3, #8
 8006144:	d05c      	beq.n	8006200 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	2b02      	cmp	r3, #2
 800614c:	d141      	bne.n	80061d2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800614e:	4b32      	ldr	r3, [pc, #200]	; (8006218 <HAL_RCC_OscConfig+0x480>)
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006154:	f7fd fdec 	bl	8003d30 <HAL_GetTick>
 8006158:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800615a:	e008      	b.n	800616e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800615c:	f7fd fde8 	bl	8003d30 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e04b      	b.n	8006206 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800616e:	4b29      	ldr	r3, [pc, #164]	; (8006214 <HAL_RCC_OscConfig+0x47c>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1f0      	bne.n	800615c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	69da      	ldr	r2, [r3, #28]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	019b      	lsls	r3, r3, #6
 800618a:	431a      	orrs	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006190:	085b      	lsrs	r3, r3, #1
 8006192:	3b01      	subs	r3, #1
 8006194:	041b      	lsls	r3, r3, #16
 8006196:	431a      	orrs	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619c:	061b      	lsls	r3, r3, #24
 800619e:	491d      	ldr	r1, [pc, #116]	; (8006214 <HAL_RCC_OscConfig+0x47c>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061a4:	4b1c      	ldr	r3, [pc, #112]	; (8006218 <HAL_RCC_OscConfig+0x480>)
 80061a6:	2201      	movs	r2, #1
 80061a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061aa:	f7fd fdc1 	bl	8003d30 <HAL_GetTick>
 80061ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061b0:	e008      	b.n	80061c4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061b2:	f7fd fdbd 	bl	8003d30 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e020      	b.n	8006206 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061c4:	4b13      	ldr	r3, [pc, #76]	; (8006214 <HAL_RCC_OscConfig+0x47c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0f0      	beq.n	80061b2 <HAL_RCC_OscConfig+0x41a>
 80061d0:	e018      	b.n	8006204 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061d2:	4b11      	ldr	r3, [pc, #68]	; (8006218 <HAL_RCC_OscConfig+0x480>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d8:	f7fd fdaa 	bl	8003d30 <HAL_GetTick>
 80061dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061de:	e008      	b.n	80061f2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061e0:	f7fd fda6 	bl	8003d30 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e009      	b.n	8006206 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061f2:	4b08      	ldr	r3, [pc, #32]	; (8006214 <HAL_RCC_OscConfig+0x47c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1f0      	bne.n	80061e0 <HAL_RCC_OscConfig+0x448>
 80061fe:	e001      	b.n	8006204 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e000      	b.n	8006206 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	40007000 	.word	0x40007000
 8006214:	40023800 	.word	0x40023800
 8006218:	42470060 	.word	0x42470060

0800621c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0ca      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006230:	4b67      	ldr	r3, [pc, #412]	; (80063d0 <HAL_RCC_ClockConfig+0x1b4>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d90c      	bls.n	8006258 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800623e:	4b64      	ldr	r3, [pc, #400]	; (80063d0 <HAL_RCC_ClockConfig+0x1b4>)
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	b2d2      	uxtb	r2, r2
 8006244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006246:	4b62      	ldr	r3, [pc, #392]	; (80063d0 <HAL_RCC_ClockConfig+0x1b4>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d001      	beq.n	8006258 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e0b6      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d020      	beq.n	80062a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0304 	and.w	r3, r3, #4
 800626c:	2b00      	cmp	r3, #0
 800626e:	d005      	beq.n	800627c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006270:	4b58      	ldr	r3, [pc, #352]	; (80063d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	4a57      	ldr	r2, [pc, #348]	; (80063d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006276:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800627a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0308 	and.w	r3, r3, #8
 8006284:	2b00      	cmp	r3, #0
 8006286:	d005      	beq.n	8006294 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006288:	4b52      	ldr	r3, [pc, #328]	; (80063d4 <HAL_RCC_ClockConfig+0x1b8>)
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	4a51      	ldr	r2, [pc, #324]	; (80063d4 <HAL_RCC_ClockConfig+0x1b8>)
 800628e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006292:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006294:	4b4f      	ldr	r3, [pc, #316]	; (80063d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	494c      	ldr	r1, [pc, #304]	; (80063d4 <HAL_RCC_ClockConfig+0x1b8>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d044      	beq.n	800633c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d107      	bne.n	80062ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ba:	4b46      	ldr	r3, [pc, #280]	; (80063d4 <HAL_RCC_ClockConfig+0x1b8>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d119      	bne.n	80062fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e07d      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d003      	beq.n	80062da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d107      	bne.n	80062ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062da:	4b3e      	ldr	r3, [pc, #248]	; (80063d4 <HAL_RCC_ClockConfig+0x1b8>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d109      	bne.n	80062fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e06d      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ea:	4b3a      	ldr	r3, [pc, #232]	; (80063d4 <HAL_RCC_ClockConfig+0x1b8>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e065      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062fa:	4b36      	ldr	r3, [pc, #216]	; (80063d4 <HAL_RCC_ClockConfig+0x1b8>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f023 0203 	bic.w	r2, r3, #3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	4933      	ldr	r1, [pc, #204]	; (80063d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006308:	4313      	orrs	r3, r2
 800630a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800630c:	f7fd fd10 	bl	8003d30 <HAL_GetTick>
 8006310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006312:	e00a      	b.n	800632a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006314:	f7fd fd0c 	bl	8003d30 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006322:	4293      	cmp	r3, r2
 8006324:	d901      	bls.n	800632a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e04d      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800632a:	4b2a      	ldr	r3, [pc, #168]	; (80063d4 <HAL_RCC_ClockConfig+0x1b8>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f003 020c 	and.w	r2, r3, #12
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	429a      	cmp	r2, r3
 800633a:	d1eb      	bne.n	8006314 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800633c:	4b24      	ldr	r3, [pc, #144]	; (80063d0 <HAL_RCC_ClockConfig+0x1b4>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 030f 	and.w	r3, r3, #15
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d20c      	bcs.n	8006364 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800634a:	4b21      	ldr	r3, [pc, #132]	; (80063d0 <HAL_RCC_ClockConfig+0x1b4>)
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006352:	4b1f      	ldr	r3, [pc, #124]	; (80063d0 <HAL_RCC_ClockConfig+0x1b4>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 030f 	and.w	r3, r3, #15
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	429a      	cmp	r2, r3
 800635e:	d001      	beq.n	8006364 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e030      	b.n	80063c6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0304 	and.w	r3, r3, #4
 800636c:	2b00      	cmp	r3, #0
 800636e:	d008      	beq.n	8006382 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006370:	4b18      	ldr	r3, [pc, #96]	; (80063d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	4915      	ldr	r1, [pc, #84]	; (80063d4 <HAL_RCC_ClockConfig+0x1b8>)
 800637e:	4313      	orrs	r3, r2
 8006380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0308 	and.w	r3, r3, #8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d009      	beq.n	80063a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800638e:	4b11      	ldr	r3, [pc, #68]	; (80063d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	490d      	ldr	r1, [pc, #52]	; (80063d4 <HAL_RCC_ClockConfig+0x1b8>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063a2:	f000 f81d 	bl	80063e0 <HAL_RCC_GetSysClockFreq>
 80063a6:	4601      	mov	r1, r0
 80063a8:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <HAL_RCC_ClockConfig+0x1b8>)
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	091b      	lsrs	r3, r3, #4
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	4a09      	ldr	r2, [pc, #36]	; (80063d8 <HAL_RCC_ClockConfig+0x1bc>)
 80063b4:	5cd3      	ldrb	r3, [r2, r3]
 80063b6:	fa21 f303 	lsr.w	r3, r1, r3
 80063ba:	4a08      	ldr	r2, [pc, #32]	; (80063dc <HAL_RCC_ClockConfig+0x1c0>)
 80063bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80063be:	2000      	movs	r0, #0
 80063c0:	f005 fbbe 	bl	800bb40 <HAL_InitTick>

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	40023c00 	.word	0x40023c00
 80063d4:	40023800 	.word	0x40023800
 80063d8:	0800f698 	.word	0x0800f698
 80063dc:	20000068 	.word	0x20000068

080063e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	607b      	str	r3, [r7, #4]
 80063ea:	2300      	movs	r3, #0
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	2300      	movs	r3, #0
 80063f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063f6:	4b63      	ldr	r3, [pc, #396]	; (8006584 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 030c 	and.w	r3, r3, #12
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d007      	beq.n	8006412 <HAL_RCC_GetSysClockFreq+0x32>
 8006402:	2b08      	cmp	r3, #8
 8006404:	d008      	beq.n	8006418 <HAL_RCC_GetSysClockFreq+0x38>
 8006406:	2b00      	cmp	r3, #0
 8006408:	f040 80b4 	bne.w	8006574 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800640c:	4b5e      	ldr	r3, [pc, #376]	; (8006588 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800640e:	60bb      	str	r3, [r7, #8]
       break;
 8006410:	e0b3      	b.n	800657a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006412:	4b5e      	ldr	r3, [pc, #376]	; (800658c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006414:	60bb      	str	r3, [r7, #8]
      break;
 8006416:	e0b0      	b.n	800657a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006418:	4b5a      	ldr	r3, [pc, #360]	; (8006584 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006420:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006422:	4b58      	ldr	r3, [pc, #352]	; (8006584 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d04a      	beq.n	80064c4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800642e:	4b55      	ldr	r3, [pc, #340]	; (8006584 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	099b      	lsrs	r3, r3, #6
 8006434:	f04f 0400 	mov.w	r4, #0
 8006438:	f240 11ff 	movw	r1, #511	; 0x1ff
 800643c:	f04f 0200 	mov.w	r2, #0
 8006440:	ea03 0501 	and.w	r5, r3, r1
 8006444:	ea04 0602 	and.w	r6, r4, r2
 8006448:	4629      	mov	r1, r5
 800644a:	4632      	mov	r2, r6
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	f04f 0400 	mov.w	r4, #0
 8006454:	0154      	lsls	r4, r2, #5
 8006456:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800645a:	014b      	lsls	r3, r1, #5
 800645c:	4619      	mov	r1, r3
 800645e:	4622      	mov	r2, r4
 8006460:	1b49      	subs	r1, r1, r5
 8006462:	eb62 0206 	sbc.w	r2, r2, r6
 8006466:	f04f 0300 	mov.w	r3, #0
 800646a:	f04f 0400 	mov.w	r4, #0
 800646e:	0194      	lsls	r4, r2, #6
 8006470:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006474:	018b      	lsls	r3, r1, #6
 8006476:	1a5b      	subs	r3, r3, r1
 8006478:	eb64 0402 	sbc.w	r4, r4, r2
 800647c:	f04f 0100 	mov.w	r1, #0
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	00e2      	lsls	r2, r4, #3
 8006486:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800648a:	00d9      	lsls	r1, r3, #3
 800648c:	460b      	mov	r3, r1
 800648e:	4614      	mov	r4, r2
 8006490:	195b      	adds	r3, r3, r5
 8006492:	eb44 0406 	adc.w	r4, r4, r6
 8006496:	f04f 0100 	mov.w	r1, #0
 800649a:	f04f 0200 	mov.w	r2, #0
 800649e:	0262      	lsls	r2, r4, #9
 80064a0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80064a4:	0259      	lsls	r1, r3, #9
 80064a6:	460b      	mov	r3, r1
 80064a8:	4614      	mov	r4, r2
 80064aa:	4618      	mov	r0, r3
 80064ac:	4621      	mov	r1, r4
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f04f 0400 	mov.w	r4, #0
 80064b4:	461a      	mov	r2, r3
 80064b6:	4623      	mov	r3, r4
 80064b8:	f7fa fbce 	bl	8000c58 <__aeabi_uldivmod>
 80064bc:	4603      	mov	r3, r0
 80064be:	460c      	mov	r4, r1
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	e049      	b.n	8006558 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064c4:	4b2f      	ldr	r3, [pc, #188]	; (8006584 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	099b      	lsrs	r3, r3, #6
 80064ca:	f04f 0400 	mov.w	r4, #0
 80064ce:	f240 11ff 	movw	r1, #511	; 0x1ff
 80064d2:	f04f 0200 	mov.w	r2, #0
 80064d6:	ea03 0501 	and.w	r5, r3, r1
 80064da:	ea04 0602 	and.w	r6, r4, r2
 80064de:	4629      	mov	r1, r5
 80064e0:	4632      	mov	r2, r6
 80064e2:	f04f 0300 	mov.w	r3, #0
 80064e6:	f04f 0400 	mov.w	r4, #0
 80064ea:	0154      	lsls	r4, r2, #5
 80064ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80064f0:	014b      	lsls	r3, r1, #5
 80064f2:	4619      	mov	r1, r3
 80064f4:	4622      	mov	r2, r4
 80064f6:	1b49      	subs	r1, r1, r5
 80064f8:	eb62 0206 	sbc.w	r2, r2, r6
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	f04f 0400 	mov.w	r4, #0
 8006504:	0194      	lsls	r4, r2, #6
 8006506:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800650a:	018b      	lsls	r3, r1, #6
 800650c:	1a5b      	subs	r3, r3, r1
 800650e:	eb64 0402 	sbc.w	r4, r4, r2
 8006512:	f04f 0100 	mov.w	r1, #0
 8006516:	f04f 0200 	mov.w	r2, #0
 800651a:	00e2      	lsls	r2, r4, #3
 800651c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006520:	00d9      	lsls	r1, r3, #3
 8006522:	460b      	mov	r3, r1
 8006524:	4614      	mov	r4, r2
 8006526:	195b      	adds	r3, r3, r5
 8006528:	eb44 0406 	adc.w	r4, r4, r6
 800652c:	f04f 0100 	mov.w	r1, #0
 8006530:	f04f 0200 	mov.w	r2, #0
 8006534:	02a2      	lsls	r2, r4, #10
 8006536:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800653a:	0299      	lsls	r1, r3, #10
 800653c:	460b      	mov	r3, r1
 800653e:	4614      	mov	r4, r2
 8006540:	4618      	mov	r0, r3
 8006542:	4621      	mov	r1, r4
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f04f 0400 	mov.w	r4, #0
 800654a:	461a      	mov	r2, r3
 800654c:	4623      	mov	r3, r4
 800654e:	f7fa fb83 	bl	8000c58 <__aeabi_uldivmod>
 8006552:	4603      	mov	r3, r0
 8006554:	460c      	mov	r4, r1
 8006556:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006558:	4b0a      	ldr	r3, [pc, #40]	; (8006584 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	0c1b      	lsrs	r3, r3, #16
 800655e:	f003 0303 	and.w	r3, r3, #3
 8006562:	3301      	adds	r3, #1
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006570:	60bb      	str	r3, [r7, #8]
      break;
 8006572:	e002      	b.n	800657a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006574:	4b04      	ldr	r3, [pc, #16]	; (8006588 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006576:	60bb      	str	r3, [r7, #8]
      break;
 8006578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800657a:	68bb      	ldr	r3, [r7, #8]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006584:	40023800 	.word	0x40023800
 8006588:	00f42400 	.word	0x00f42400
 800658c:	007a1200 	.word	0x007a1200

08006590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006594:	4b03      	ldr	r3, [pc, #12]	; (80065a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006596:	681b      	ldr	r3, [r3, #0]
}
 8006598:	4618      	mov	r0, r3
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	20000068 	.word	0x20000068

080065a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065ac:	f7ff fff0 	bl	8006590 <HAL_RCC_GetHCLKFreq>
 80065b0:	4601      	mov	r1, r0
 80065b2:	4b05      	ldr	r3, [pc, #20]	; (80065c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	0a9b      	lsrs	r3, r3, #10
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	4a03      	ldr	r2, [pc, #12]	; (80065cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80065be:	5cd3      	ldrb	r3, [r2, r3]
 80065c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	40023800 	.word	0x40023800
 80065cc:	0800f6a8 	.word	0x0800f6a8

080065d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065d4:	f7ff ffdc 	bl	8006590 <HAL_RCC_GetHCLKFreq>
 80065d8:	4601      	mov	r1, r0
 80065da:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	0b5b      	lsrs	r3, r3, #13
 80065e0:	f003 0307 	and.w	r3, r3, #7
 80065e4:	4a03      	ldr	r2, [pc, #12]	; (80065f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065e6:	5cd3      	ldrb	r3, [r2, r3]
 80065e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	40023800 	.word	0x40023800
 80065f4:	0800f6a8 	.word	0x0800f6a8

080065f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	220f      	movs	r2, #15
 8006606:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006608:	4b12      	ldr	r3, [pc, #72]	; (8006654 <HAL_RCC_GetClockConfig+0x5c>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f003 0203 	and.w	r2, r3, #3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006614:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <HAL_RCC_GetClockConfig+0x5c>)
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006620:	4b0c      	ldr	r3, [pc, #48]	; (8006654 <HAL_RCC_GetClockConfig+0x5c>)
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800662c:	4b09      	ldr	r3, [pc, #36]	; (8006654 <HAL_RCC_GetClockConfig+0x5c>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	08db      	lsrs	r3, r3, #3
 8006632:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800663a:	4b07      	ldr	r3, [pc, #28]	; (8006658 <HAL_RCC_GetClockConfig+0x60>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 020f 	and.w	r2, r3, #15
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	601a      	str	r2, [r3, #0]
}
 8006646:	bf00      	nop
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	40023800 	.word	0x40023800
 8006658:	40023c00 	.word	0x40023c00

0800665c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e056      	b.n	800671c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d106      	bne.n	800668e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f005 f9ad 	bl	800b9e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2202      	movs	r2, #2
 8006692:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066a4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	431a      	orrs	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	431a      	orrs	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	431a      	orrs	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	431a      	orrs	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	ea42 0103 	orr.w	r1, r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	0c1b      	lsrs	r3, r3, #16
 80066ec:	f003 0104 	and.w	r1, r3, #4
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69da      	ldr	r2, [r3, #28]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800670a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	4613      	mov	r3, r2
 8006732:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <HAL_SPI_Transmit+0x22>
 8006742:	2302      	movs	r3, #2
 8006744:	e11e      	b.n	8006984 <HAL_SPI_Transmit+0x260>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800674e:	f7fd faef 	bl	8003d30 <HAL_GetTick>
 8006752:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006754:	88fb      	ldrh	r3, [r7, #6]
 8006756:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b01      	cmp	r3, #1
 8006762:	d002      	beq.n	800676a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006764:	2302      	movs	r3, #2
 8006766:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006768:	e103      	b.n	8006972 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <HAL_SPI_Transmit+0x52>
 8006770:	88fb      	ldrh	r3, [r7, #6]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d102      	bne.n	800677c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	77fb      	strb	r3, [r7, #31]
    goto error;
 800677a:	e0fa      	b.n	8006972 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2203      	movs	r2, #3
 8006780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	88fa      	ldrh	r2, [r7, #6]
 8006794:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	88fa      	ldrh	r2, [r7, #6]
 800679a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067c2:	d107      	bne.n	80067d4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067d2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067de:	2b40      	cmp	r3, #64	; 0x40
 80067e0:	d007      	beq.n	80067f2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067fa:	d14b      	bne.n	8006894 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <HAL_SPI_Transmit+0xe6>
 8006804:	8afb      	ldrh	r3, [r7, #22]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d13e      	bne.n	8006888 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	881a      	ldrh	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681a:	1c9a      	adds	r2, r3, #2
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006824:	b29b      	uxth	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	b29a      	uxth	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800682e:	e02b      	b.n	8006888 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b02      	cmp	r3, #2
 800683c:	d112      	bne.n	8006864 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006842:	881a      	ldrh	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684e:	1c9a      	adds	r2, r3, #2
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006858:	b29b      	uxth	r3, r3
 800685a:	3b01      	subs	r3, #1
 800685c:	b29a      	uxth	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	86da      	strh	r2, [r3, #54]	; 0x36
 8006862:	e011      	b.n	8006888 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006864:	f7fd fa64 	bl	8003d30 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	429a      	cmp	r2, r3
 8006872:	d803      	bhi.n	800687c <HAL_SPI_Transmit+0x158>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687a:	d102      	bne.n	8006882 <HAL_SPI_Transmit+0x15e>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d102      	bne.n	8006888 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006886:	e074      	b.n	8006972 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800688c:	b29b      	uxth	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1ce      	bne.n	8006830 <HAL_SPI_Transmit+0x10c>
 8006892:	e04c      	b.n	800692e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <HAL_SPI_Transmit+0x17e>
 800689c:	8afb      	ldrh	r3, [r7, #22]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d140      	bne.n	8006924 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	330c      	adds	r3, #12
 80068ac:	7812      	ldrb	r2, [r2, #0]
 80068ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068be:	b29b      	uxth	r3, r3
 80068c0:	3b01      	subs	r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80068c8:	e02c      	b.n	8006924 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d113      	bne.n	8006900 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	330c      	adds	r3, #12
 80068e2:	7812      	ldrb	r2, [r2, #0]
 80068e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	3b01      	subs	r3, #1
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80068fe:	e011      	b.n	8006924 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006900:	f7fd fa16 	bl	8003d30 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	429a      	cmp	r2, r3
 800690e:	d803      	bhi.n	8006918 <HAL_SPI_Transmit+0x1f4>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006916:	d102      	bne.n	800691e <HAL_SPI_Transmit+0x1fa>
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d102      	bne.n	8006924 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006922:	e026      	b.n	8006972 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006928:	b29b      	uxth	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1cd      	bne.n	80068ca <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	6839      	ldr	r1, [r7, #0]
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 fcc4 	bl	80072c0 <SPI_EndRxTxTransaction>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d002      	beq.n	8006944 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10a      	bne.n	8006962 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800694c:	2300      	movs	r3, #0
 800694e:	613b      	str	r3, [r7, #16]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	613b      	str	r3, [r7, #16]
 8006960:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	77fb      	strb	r3, [r7, #31]
 800696e:	e000      	b.n	8006972 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006970:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006982:	7ffb      	ldrb	r3, [r7, #31]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3720      	adds	r7, #32
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b088      	sub	sp, #32
 8006990:	af02      	add	r7, sp, #8
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	603b      	str	r3, [r7, #0]
 8006998:	4613      	mov	r3, r2
 800699a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069a8:	d112      	bne.n	80069d0 <HAL_SPI_Receive+0x44>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10e      	bne.n	80069d0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2204      	movs	r2, #4
 80069b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80069ba:	88fa      	ldrh	r2, [r7, #6]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	4613      	mov	r3, r2
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	68b9      	ldr	r1, [r7, #8]
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f8e9 	bl	8006b9e <HAL_SPI_TransmitReceive>
 80069cc:	4603      	mov	r3, r0
 80069ce:	e0e2      	b.n	8006b96 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d101      	bne.n	80069de <HAL_SPI_Receive+0x52>
 80069da:	2302      	movs	r3, #2
 80069dc:	e0db      	b.n	8006b96 <HAL_SPI_Receive+0x20a>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069e6:	f7fd f9a3 	bl	8003d30 <HAL_GetTick>
 80069ea:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d002      	beq.n	80069fe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80069f8:	2302      	movs	r3, #2
 80069fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069fc:	e0c2      	b.n	8006b84 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <HAL_SPI_Receive+0x7e>
 8006a04:	88fb      	ldrh	r3, [r7, #6]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d102      	bne.n	8006a10 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a0e:	e0b9      	b.n	8006b84 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2204      	movs	r2, #4
 8006a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	88fa      	ldrh	r2, [r7, #6]
 8006a28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	88fa      	ldrh	r2, [r7, #6]
 8006a2e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a56:	d107      	bne.n	8006a68 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a66:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a72:	2b40      	cmp	r3, #64	; 0x40
 8006a74:	d007      	beq.n	8006a86 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a84:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d162      	bne.n	8006b54 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006a8e:	e02e      	b.n	8006aee <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d115      	bne.n	8006aca <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f103 020c 	add.w	r2, r3, #12
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aaa:	7812      	ldrb	r2, [r2, #0]
 8006aac:	b2d2      	uxtb	r2, r2
 8006aae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ac8:	e011      	b.n	8006aee <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aca:	f7fd f931 	bl	8003d30 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d803      	bhi.n	8006ae2 <HAL_SPI_Receive+0x156>
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae0:	d102      	bne.n	8006ae8 <HAL_SPI_Receive+0x15c>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d102      	bne.n	8006aee <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006aec:	e04a      	b.n	8006b84 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1cb      	bne.n	8006a90 <HAL_SPI_Receive+0x104>
 8006af8:	e031      	b.n	8006b5e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d113      	bne.n	8006b30 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b12:	b292      	uxth	r2, r2
 8006b14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1a:	1c9a      	adds	r2, r3, #2
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b2e:	e011      	b.n	8006b54 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b30:	f7fd f8fe 	bl	8003d30 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d803      	bhi.n	8006b48 <HAL_SPI_Receive+0x1bc>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b46:	d102      	bne.n	8006b4e <HAL_SPI_Receive+0x1c2>
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d102      	bne.n	8006b54 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b52:	e017      	b.n	8006b84 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1cd      	bne.n	8006afa <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 fb46 	bl	80071f4 <SPI_EndRxTransaction>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2220      	movs	r2, #32
 8006b72:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d002      	beq.n	8006b82 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	75fb      	strb	r3, [r7, #23]
 8006b80:	e000      	b.n	8006b84 <HAL_SPI_Receive+0x1f8>
  }

error :
 8006b82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b08c      	sub	sp, #48	; 0x30
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	607a      	str	r2, [r7, #4]
 8006baa:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006bac:	2301      	movs	r3, #1
 8006bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d101      	bne.n	8006bc4 <HAL_SPI_TransmitReceive+0x26>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e18a      	b.n	8006eda <HAL_SPI_TransmitReceive+0x33c>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bcc:	f7fd f8b0 	bl	8003d30 <HAL_GetTick>
 8006bd0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006be2:	887b      	ldrh	r3, [r7, #2]
 8006be4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006be6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d00f      	beq.n	8006c0e <HAL_SPI_TransmitReceive+0x70>
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bf4:	d107      	bne.n	8006c06 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d103      	bne.n	8006c06 <HAL_SPI_TransmitReceive+0x68>
 8006bfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d003      	beq.n	8006c0e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006c06:	2302      	movs	r3, #2
 8006c08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c0c:	e15b      	b.n	8006ec6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d005      	beq.n	8006c20 <HAL_SPI_TransmitReceive+0x82>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <HAL_SPI_TransmitReceive+0x82>
 8006c1a:	887b      	ldrh	r3, [r7, #2]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d103      	bne.n	8006c28 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c26:	e14e      	b.n	8006ec6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b04      	cmp	r3, #4
 8006c32:	d003      	beq.n	8006c3c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2205      	movs	r2, #5
 8006c38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	887a      	ldrh	r2, [r7, #2]
 8006c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	887a      	ldrh	r2, [r7, #2]
 8006c52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	887a      	ldrh	r2, [r7, #2]
 8006c5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	887a      	ldrh	r2, [r7, #2]
 8006c64:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7c:	2b40      	cmp	r3, #64	; 0x40
 8006c7e:	d007      	beq.n	8006c90 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c98:	d178      	bne.n	8006d8c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d002      	beq.n	8006ca8 <HAL_SPI_TransmitReceive+0x10a>
 8006ca2:	8b7b      	ldrh	r3, [r7, #26]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d166      	bne.n	8006d76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cac:	881a      	ldrh	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb8:	1c9a      	adds	r2, r3, #2
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ccc:	e053      	b.n	8006d76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d11b      	bne.n	8006d14 <HAL_SPI_TransmitReceive+0x176>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d016      	beq.n	8006d14 <HAL_SPI_TransmitReceive+0x176>
 8006ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d113      	bne.n	8006d14 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf0:	881a      	ldrh	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfc:	1c9a      	adds	r2, r3, #2
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d10:	2300      	movs	r3, #0
 8006d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d119      	bne.n	8006d56 <HAL_SPI_TransmitReceive+0x1b8>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d014      	beq.n	8006d56 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68da      	ldr	r2, [r3, #12]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d36:	b292      	uxth	r2, r2
 8006d38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3e:	1c9a      	adds	r2, r3, #2
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d52:	2301      	movs	r3, #1
 8006d54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d56:	f7fc ffeb 	bl	8003d30 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d807      	bhi.n	8006d76 <HAL_SPI_TransmitReceive+0x1d8>
 8006d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6c:	d003      	beq.n	8006d76 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006d74:	e0a7      	b.n	8006ec6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1a6      	bne.n	8006cce <HAL_SPI_TransmitReceive+0x130>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1a1      	bne.n	8006cce <HAL_SPI_TransmitReceive+0x130>
 8006d8a:	e07c      	b.n	8006e86 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <HAL_SPI_TransmitReceive+0x1fc>
 8006d94:	8b7b      	ldrh	r3, [r7, #26]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d16b      	bne.n	8006e72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	330c      	adds	r3, #12
 8006da4:	7812      	ldrb	r2, [r2, #0]
 8006da6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	3b01      	subs	r3, #1
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dc0:	e057      	b.n	8006e72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d11c      	bne.n	8006e0a <HAL_SPI_TransmitReceive+0x26c>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d017      	beq.n	8006e0a <HAL_SPI_TransmitReceive+0x26c>
 8006dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d114      	bne.n	8006e0a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	330c      	adds	r3, #12
 8006dea:	7812      	ldrb	r2, [r2, #0]
 8006dec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df2:	1c5a      	adds	r2, r3, #1
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d119      	bne.n	8006e4c <HAL_SPI_TransmitReceive+0x2ae>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d014      	beq.n	8006e4c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68da      	ldr	r2, [r3, #12]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2c:	b2d2      	uxtb	r2, r2
 8006e2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	3b01      	subs	r3, #1
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e4c:	f7fc ff70 	bl	8003d30 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d803      	bhi.n	8006e64 <HAL_SPI_TransmitReceive+0x2c6>
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e62:	d102      	bne.n	8006e6a <HAL_SPI_TransmitReceive+0x2cc>
 8006e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d103      	bne.n	8006e72 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006e70:	e029      	b.n	8006ec6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1a2      	bne.n	8006dc2 <HAL_SPI_TransmitReceive+0x224>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d19d      	bne.n	8006dc2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 fa18 	bl	80072c0 <SPI_EndRxTxTransaction>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d006      	beq.n	8006ea4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006ea2:	e010      	b.n	8006ec6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10b      	bne.n	8006ec4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006eac:	2300      	movs	r3, #0
 8006eae:	617b      	str	r3, [r7, #20]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	617b      	str	r3, [r7, #20]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	617b      	str	r3, [r7, #20]
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	e000      	b.n	8006ec6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006ec4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ed6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3730      	adds	r7, #48	; 0x30
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
	...

08006ee4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b088      	sub	sp, #32
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	099b      	lsrs	r3, r3, #6
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10f      	bne.n	8006f28 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00a      	beq.n	8006f28 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	099b      	lsrs	r3, r3, #6
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d004      	beq.n	8006f28 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	4798      	blx	r3
    return;
 8006f26:	e0d8      	b.n	80070da <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	085b      	lsrs	r3, r3, #1
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00a      	beq.n	8006f4a <HAL_SPI_IRQHandler+0x66>
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	09db      	lsrs	r3, r3, #7
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d004      	beq.n	8006f4a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	4798      	blx	r3
    return;
 8006f48:	e0c7      	b.n	80070da <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	095b      	lsrs	r3, r3, #5
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10c      	bne.n	8006f70 <HAL_SPI_IRQHandler+0x8c>
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	099b      	lsrs	r3, r3, #6
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d106      	bne.n	8006f70 <HAL_SPI_IRQHandler+0x8c>
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	0a1b      	lsrs	r3, r3, #8
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 80b5 	beq.w	80070da <HAL_SPI_IRQHandler+0x1f6>
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	095b      	lsrs	r3, r3, #5
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 80ae 	beq.w	80070da <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	099b      	lsrs	r3, r3, #6
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d023      	beq.n	8006fd2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d011      	beq.n	8006fba <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9a:	f043 0204 	orr.w	r2, r3, #4
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	617b      	str	r3, [r7, #20]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	617b      	str	r3, [r7, #20]
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	e00b      	b.n	8006fd2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fba:	2300      	movs	r3, #0
 8006fbc:	613b      	str	r3, [r7, #16]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	613b      	str	r3, [r7, #16]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	613b      	str	r3, [r7, #16]
 8006fce:	693b      	ldr	r3, [r7, #16]
        return;
 8006fd0:	e083      	b.n	80070da <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	095b      	lsrs	r3, r3, #5
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d014      	beq.n	8007008 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe2:	f043 0201 	orr.w	r2, r3, #1
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007004:	601a      	str	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	0a1b      	lsrs	r3, r3, #8
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00c      	beq.n	800702e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007018:	f043 0208 	orr.w	r2, r3, #8
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007020:	2300      	movs	r3, #0
 8007022:	60bb      	str	r3, [r7, #8]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	60bb      	str	r3, [r7, #8]
 800702c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007032:	2b00      	cmp	r3, #0
 8007034:	d050      	beq.n	80070d8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	685a      	ldr	r2, [r3, #4]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007044:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d104      	bne.n	8007062 <HAL_SPI_IRQHandler+0x17e>
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d034      	beq.n	80070cc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0203 	bic.w	r2, r2, #3
 8007070:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007076:	2b00      	cmp	r3, #0
 8007078:	d011      	beq.n	800709e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707e:	4a18      	ldr	r2, [pc, #96]	; (80070e0 <HAL_SPI_IRQHandler+0x1fc>)
 8007080:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007086:	4618      	mov	r0, r3
 8007088:	f7fd f830 	bl	80040ec <HAL_DMA_Abort_IT>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007096:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d016      	beq.n	80070d4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070aa:	4a0d      	ldr	r2, [pc, #52]	; (80070e0 <HAL_SPI_IRQHandler+0x1fc>)
 80070ac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fd f81a 	bl	80040ec <HAL_DMA_Abort_IT>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80070ca:	e003      	b.n	80070d4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f809 	bl	80070e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80070d2:	e000      	b.n	80070d6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80070d4:	bf00      	nop
    return;
 80070d6:	bf00      	nop
 80070d8:	bf00      	nop
  }
}
 80070da:	3720      	adds	r7, #32
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	080070f9 	.word	0x080070f9

080070e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007104:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f7ff ffe6 	bl	80070e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007118:	bf00      	nop
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	603b      	str	r3, [r7, #0]
 800712c:	4613      	mov	r3, r2
 800712e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007130:	e04c      	b.n	80071cc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007138:	d048      	beq.n	80071cc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800713a:	f7fc fdf9 	bl	8003d30 <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	429a      	cmp	r2, r3
 8007148:	d902      	bls.n	8007150 <SPI_WaitFlagStateUntilTimeout+0x30>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d13d      	bne.n	80071cc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800715e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007168:	d111      	bne.n	800718e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007172:	d004      	beq.n	800717e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800717c:	d107      	bne.n	800718e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800718c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007196:	d10f      	bne.n	80071b8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e00f      	b.n	80071ec <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689a      	ldr	r2, [r3, #8]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	4013      	ands	r3, r2
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	429a      	cmp	r2, r3
 80071da:	bf0c      	ite	eq
 80071dc:	2301      	moveq	r3, #1
 80071de:	2300      	movne	r3, #0
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	461a      	mov	r2, r3
 80071e4:	79fb      	ldrb	r3, [r7, #7]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d1a3      	bne.n	8007132 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af02      	add	r7, sp, #8
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007208:	d111      	bne.n	800722e <SPI_EndRxTransaction+0x3a>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007212:	d004      	beq.n	800721e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800721c:	d107      	bne.n	800722e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800722c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007236:	d12a      	bne.n	800728e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007240:	d012      	beq.n	8007268 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2200      	movs	r2, #0
 800724a:	2180      	movs	r1, #128	; 0x80
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f7ff ff67 	bl	8007120 <SPI_WaitFlagStateUntilTimeout>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d02d      	beq.n	80072b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800725c:	f043 0220 	orr.w	r2, r3, #32
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e026      	b.n	80072b6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2200      	movs	r2, #0
 8007270:	2101      	movs	r1, #1
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f7ff ff54 	bl	8007120 <SPI_WaitFlagStateUntilTimeout>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d01a      	beq.n	80072b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007282:	f043 0220 	orr.w	r2, r3, #32
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e013      	b.n	80072b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2200      	movs	r2, #0
 8007296:	2101      	movs	r1, #1
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f7ff ff41 	bl	8007120 <SPI_WaitFlagStateUntilTimeout>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d007      	beq.n	80072b4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a8:	f043 0220 	orr.w	r2, r3, #32
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e000      	b.n	80072b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
	...

080072c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b088      	sub	sp, #32
 80072c4:	af02      	add	r7, sp, #8
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80072cc:	4b1b      	ldr	r3, [pc, #108]	; (800733c <SPI_EndRxTxTransaction+0x7c>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a1b      	ldr	r2, [pc, #108]	; (8007340 <SPI_EndRxTxTransaction+0x80>)
 80072d2:	fba2 2303 	umull	r2, r3, r2, r3
 80072d6:	0d5b      	lsrs	r3, r3, #21
 80072d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80072dc:	fb02 f303 	mul.w	r3, r2, r3
 80072e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072ea:	d112      	bne.n	8007312 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2200      	movs	r2, #0
 80072f4:	2180      	movs	r1, #128	; 0x80
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f7ff ff12 	bl	8007120 <SPI_WaitFlagStateUntilTimeout>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d016      	beq.n	8007330 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007306:	f043 0220 	orr.w	r2, r3, #32
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e00f      	b.n	8007332 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00a      	beq.n	800732e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	3b01      	subs	r3, #1
 800731c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007328:	2b80      	cmp	r3, #128	; 0x80
 800732a:	d0f2      	beq.n	8007312 <SPI_EndRxTxTransaction+0x52>
 800732c:	e000      	b.n	8007330 <SPI_EndRxTxTransaction+0x70>
        break;
 800732e:	bf00      	nop
  }

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3718      	adds	r7, #24
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	20000068 	.word	0x20000068
 8007340:	165e9f81 	.word	0x165e9f81

08007344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e01d      	b.n	8007392 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d106      	bne.n	8007370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f004 fe28 	bl	800bfc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2202      	movs	r2, #2
 8007374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3304      	adds	r3, #4
 8007380:	4619      	mov	r1, r3
 8007382:	4610      	mov	r0, r2
 8007384:	f000 faa4 	bl	80078d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800739a:	b480      	push	{r7}
 800739c:	b085      	sub	sp, #20
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2202      	movs	r2, #2
 80073a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2b06      	cmp	r3, #6
 80073ba:	d007      	beq.n	80073cc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f042 0201 	orr.w	r2, r2, #1
 80073ca:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b085      	sub	sp, #20
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f042 0201 	orr.w	r2, r2, #1
 80073f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f003 0307 	and.w	r3, r3, #7
 8007404:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2b06      	cmp	r3, #6
 800740a:	d007      	beq.n	800741c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0201 	orr.w	r2, r2, #1
 800741a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b082      	sub	sp, #8
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e01d      	b.n	8007478 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b00      	cmp	r3, #0
 8007446:	d106      	bne.n	8007456 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f004 fd93 	bl	800bf7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2202      	movs	r2, #2
 800745a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	3304      	adds	r3, #4
 8007466:	4619      	mov	r1, r3
 8007468:	4610      	mov	r0, r2
 800746a:	f000 fa31 	bl	80078d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2201      	movs	r2, #1
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	4618      	mov	r0, r3
 8007494:	f000 fc28 	bl	8007ce8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a10      	ldr	r2, [pc, #64]	; (80074e0 <HAL_TIM_PWM_Start+0x60>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d107      	bne.n	80074b2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f003 0307 	and.w	r3, r3, #7
 80074bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b06      	cmp	r3, #6
 80074c2:	d007      	beq.n	80074d4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f042 0201 	orr.w	r2, r2, #1
 80074d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	40010000 	.word	0x40010000

080074e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d122      	bne.n	8007540 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b02      	cmp	r3, #2
 8007506:	d11b      	bne.n	8007540 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f06f 0202 	mvn.w	r2, #2
 8007510:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	f003 0303 	and.w	r3, r3, #3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f9b4 	bl	8007894 <HAL_TIM_IC_CaptureCallback>
 800752c:	e005      	b.n	800753a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f9a6 	bl	8007880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f9b7 	bl	80078a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	f003 0304 	and.w	r3, r3, #4
 800754a:	2b04      	cmp	r3, #4
 800754c:	d122      	bne.n	8007594 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f003 0304 	and.w	r3, r3, #4
 8007558:	2b04      	cmp	r3, #4
 800755a:	d11b      	bne.n	8007594 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f06f 0204 	mvn.w	r2, #4
 8007564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2202      	movs	r2, #2
 800756a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f98a 	bl	8007894 <HAL_TIM_IC_CaptureCallback>
 8007580:	e005      	b.n	800758e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f97c 	bl	8007880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f98d 	bl	80078a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f003 0308 	and.w	r3, r3, #8
 800759e:	2b08      	cmp	r3, #8
 80075a0:	d122      	bne.n	80075e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f003 0308 	and.w	r3, r3, #8
 80075ac:	2b08      	cmp	r3, #8
 80075ae:	d11b      	bne.n	80075e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f06f 0208 	mvn.w	r2, #8
 80075b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2204      	movs	r2, #4
 80075be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	69db      	ldr	r3, [r3, #28]
 80075c6:	f003 0303 	and.w	r3, r3, #3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f960 	bl	8007894 <HAL_TIM_IC_CaptureCallback>
 80075d4:	e005      	b.n	80075e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f952 	bl	8007880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f963 	bl	80078a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	f003 0310 	and.w	r3, r3, #16
 80075f2:	2b10      	cmp	r3, #16
 80075f4:	d122      	bne.n	800763c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f003 0310 	and.w	r3, r3, #16
 8007600:	2b10      	cmp	r3, #16
 8007602:	d11b      	bne.n	800763c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f06f 0210 	mvn.w	r2, #16
 800760c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2208      	movs	r2, #8
 8007612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	69db      	ldr	r3, [r3, #28]
 800761a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800761e:	2b00      	cmp	r3, #0
 8007620:	d003      	beq.n	800762a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f936 	bl	8007894 <HAL_TIM_IC_CaptureCallback>
 8007628:	e005      	b.n	8007636 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f928 	bl	8007880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f939 	bl	80078a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b01      	cmp	r3, #1
 8007648:	d10e      	bne.n	8007668 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b01      	cmp	r3, #1
 8007656:	d107      	bne.n	8007668 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f06f 0201 	mvn.w	r2, #1
 8007660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f004 f970 	bl	800b948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007672:	2b80      	cmp	r3, #128	; 0x80
 8007674:	d10e      	bne.n	8007694 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007680:	2b80      	cmp	r3, #128	; 0x80
 8007682:	d107      	bne.n	8007694 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800768c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fb9e 	bl	8007dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769e:	2b40      	cmp	r3, #64	; 0x40
 80076a0:	d10e      	bne.n	80076c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ac:	2b40      	cmp	r3, #64	; 0x40
 80076ae:	d107      	bne.n	80076c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f8fe 	bl	80078bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	f003 0320 	and.w	r3, r3, #32
 80076ca:	2b20      	cmp	r3, #32
 80076cc:	d10e      	bne.n	80076ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	f003 0320 	and.w	r3, r3, #32
 80076d8:	2b20      	cmp	r3, #32
 80076da:	d107      	bne.n	80076ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f06f 0220 	mvn.w	r2, #32
 80076e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fb68 	bl	8007dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076ec:	bf00      	nop
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007706:	2b01      	cmp	r3, #1
 8007708:	d101      	bne.n	800770e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800770a:	2302      	movs	r3, #2
 800770c:	e0b4      	b.n	8007878 <HAL_TIM_PWM_ConfigChannel+0x184>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2202      	movs	r2, #2
 800771a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2b0c      	cmp	r3, #12
 8007722:	f200 809f 	bhi.w	8007864 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007726:	a201      	add	r2, pc, #4	; (adr r2, 800772c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772c:	08007761 	.word	0x08007761
 8007730:	08007865 	.word	0x08007865
 8007734:	08007865 	.word	0x08007865
 8007738:	08007865 	.word	0x08007865
 800773c:	080077a1 	.word	0x080077a1
 8007740:	08007865 	.word	0x08007865
 8007744:	08007865 	.word	0x08007865
 8007748:	08007865 	.word	0x08007865
 800774c:	080077e3 	.word	0x080077e3
 8007750:	08007865 	.word	0x08007865
 8007754:	08007865 	.word	0x08007865
 8007758:	08007865 	.word	0x08007865
 800775c:	08007823 	.word	0x08007823
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68b9      	ldr	r1, [r7, #8]
 8007766:	4618      	mov	r0, r3
 8007768:	f000 f932 	bl	80079d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699a      	ldr	r2, [r3, #24]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f042 0208 	orr.w	r2, r2, #8
 800777a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699a      	ldr	r2, [r3, #24]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f022 0204 	bic.w	r2, r2, #4
 800778a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6999      	ldr	r1, [r3, #24]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	691a      	ldr	r2, [r3, #16]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	430a      	orrs	r2, r1
 800779c:	619a      	str	r2, [r3, #24]
      break;
 800779e:	e062      	b.n	8007866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68b9      	ldr	r1, [r7, #8]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 f978 	bl	8007a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699a      	ldr	r2, [r3, #24]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	699a      	ldr	r2, [r3, #24]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6999      	ldr	r1, [r3, #24]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	021a      	lsls	r2, r3, #8
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	430a      	orrs	r2, r1
 80077de:	619a      	str	r2, [r3, #24]
      break;
 80077e0:	e041      	b.n	8007866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68b9      	ldr	r1, [r7, #8]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f000 f9c3 	bl	8007b74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	69da      	ldr	r2, [r3, #28]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f042 0208 	orr.w	r2, r2, #8
 80077fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	69da      	ldr	r2, [r3, #28]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f022 0204 	bic.w	r2, r2, #4
 800780c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	69d9      	ldr	r1, [r3, #28]
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	691a      	ldr	r2, [r3, #16]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	61da      	str	r2, [r3, #28]
      break;
 8007820:	e021      	b.n	8007866 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68b9      	ldr	r1, [r7, #8]
 8007828:	4618      	mov	r0, r3
 800782a:	f000 fa0d 	bl	8007c48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	69da      	ldr	r2, [r3, #28]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800783c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	69da      	ldr	r2, [r3, #28]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800784c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	69d9      	ldr	r1, [r3, #28]
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	021a      	lsls	r2, r3, #8
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	430a      	orrs	r2, r1
 8007860:	61da      	str	r2, [r3, #28]
      break;
 8007862:	e000      	b.n	8007866 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007864:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a34      	ldr	r2, [pc, #208]	; (80079b4 <TIM_Base_SetConfig+0xe4>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d00f      	beq.n	8007908 <TIM_Base_SetConfig+0x38>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ee:	d00b      	beq.n	8007908 <TIM_Base_SetConfig+0x38>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a31      	ldr	r2, [pc, #196]	; (80079b8 <TIM_Base_SetConfig+0xe8>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d007      	beq.n	8007908 <TIM_Base_SetConfig+0x38>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a30      	ldr	r2, [pc, #192]	; (80079bc <TIM_Base_SetConfig+0xec>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d003      	beq.n	8007908 <TIM_Base_SetConfig+0x38>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a2f      	ldr	r2, [pc, #188]	; (80079c0 <TIM_Base_SetConfig+0xf0>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d108      	bne.n	800791a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a25      	ldr	r2, [pc, #148]	; (80079b4 <TIM_Base_SetConfig+0xe4>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d01b      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007928:	d017      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a22      	ldr	r2, [pc, #136]	; (80079b8 <TIM_Base_SetConfig+0xe8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d013      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a21      	ldr	r2, [pc, #132]	; (80079bc <TIM_Base_SetConfig+0xec>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d00f      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a20      	ldr	r2, [pc, #128]	; (80079c0 <TIM_Base_SetConfig+0xf0>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d00b      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a1f      	ldr	r2, [pc, #124]	; (80079c4 <TIM_Base_SetConfig+0xf4>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d007      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a1e      	ldr	r2, [pc, #120]	; (80079c8 <TIM_Base_SetConfig+0xf8>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d003      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a1d      	ldr	r2, [pc, #116]	; (80079cc <TIM_Base_SetConfig+0xfc>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d108      	bne.n	800796c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	4313      	orrs	r3, r2
 800796a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	4313      	orrs	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	689a      	ldr	r2, [r3, #8]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a08      	ldr	r2, [pc, #32]	; (80079b4 <TIM_Base_SetConfig+0xe4>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d103      	bne.n	80079a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	691a      	ldr	r2, [r3, #16]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	615a      	str	r2, [r3, #20]
}
 80079a6:	bf00      	nop
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	40010000 	.word	0x40010000
 80079b8:	40000400 	.word	0x40000400
 80079bc:	40000800 	.word	0x40000800
 80079c0:	40000c00 	.word	0x40000c00
 80079c4:	40014000 	.word	0x40014000
 80079c8:	40014400 	.word	0x40014400
 80079cc:	40014800 	.word	0x40014800

080079d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b087      	sub	sp, #28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	f023 0201 	bic.w	r2, r3, #1
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 0303 	bic.w	r3, r3, #3
 8007a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f023 0302 	bic.w	r3, r3, #2
 8007a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a1c      	ldr	r2, [pc, #112]	; (8007a98 <TIM_OC1_SetConfig+0xc8>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d10c      	bne.n	8007a46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	f023 0308 	bic.w	r3, r3, #8
 8007a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	f023 0304 	bic.w	r3, r3, #4
 8007a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a13      	ldr	r2, [pc, #76]	; (8007a98 <TIM_OC1_SetConfig+0xc8>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d111      	bne.n	8007a72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	621a      	str	r2, [r3, #32]
}
 8007a8c:	bf00      	nop
 8007a8e:	371c      	adds	r7, #28
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	40010000 	.word	0x40010000

08007a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	f023 0210 	bic.w	r2, r3, #16
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	021b      	lsls	r3, r3, #8
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f023 0320 	bic.w	r3, r3, #32
 8007ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	011b      	lsls	r3, r3, #4
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a1e      	ldr	r2, [pc, #120]	; (8007b70 <TIM_OC2_SetConfig+0xd4>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d10d      	bne.n	8007b18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a15      	ldr	r2, [pc, #84]	; (8007b70 <TIM_OC2_SetConfig+0xd4>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d113      	bne.n	8007b48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	621a      	str	r2, [r3, #32]
}
 8007b62:	bf00      	nop
 8007b64:	371c      	adds	r7, #28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	40010000 	.word	0x40010000

08007b74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0303 	bic.w	r3, r3, #3
 8007baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	021b      	lsls	r3, r3, #8
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a1d      	ldr	r2, [pc, #116]	; (8007c44 <TIM_OC3_SetConfig+0xd0>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d10d      	bne.n	8007bee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	021b      	lsls	r3, r3, #8
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a14      	ldr	r2, [pc, #80]	; (8007c44 <TIM_OC3_SetConfig+0xd0>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d113      	bne.n	8007c1e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	011b      	lsls	r3, r3, #4
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	011b      	lsls	r3, r3, #4
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	621a      	str	r2, [r3, #32]
}
 8007c38:	bf00      	nop
 8007c3a:	371c      	adds	r7, #28
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	40010000 	.word	0x40010000

08007c48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b087      	sub	sp, #28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a1b      	ldr	r3, [r3, #32]
 8007c56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	021b      	lsls	r3, r3, #8
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	031b      	lsls	r3, r3, #12
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a10      	ldr	r2, [pc, #64]	; (8007ce4 <TIM_OC4_SetConfig+0x9c>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d109      	bne.n	8007cbc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	019b      	lsls	r3, r3, #6
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685a      	ldr	r2, [r3, #4]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	621a      	str	r2, [r3, #32]
}
 8007cd6:	bf00      	nop
 8007cd8:	371c      	adds	r7, #28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	40010000 	.word	0x40010000

08007ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	f003 031f 	and.w	r3, r3, #31
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6a1a      	ldr	r2, [r3, #32]
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	43db      	mvns	r3, r3
 8007d0a:	401a      	ands	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6a1a      	ldr	r2, [r3, #32]
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	f003 031f 	and.w	r3, r3, #31
 8007d1a:	6879      	ldr	r1, [r7, #4]
 8007d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d20:	431a      	orrs	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	621a      	str	r2, [r3, #32]
}
 8007d26:	bf00      	nop
 8007d28:	371c      	adds	r7, #28
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d32:	b480      	push	{r7}
 8007d34:	b085      	sub	sp, #20
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d101      	bne.n	8007d4a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d46:	2302      	movs	r3, #2
 8007d48:	e032      	b.n	8007db0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2202      	movs	r2, #2
 8007d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d82:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e03f      	b.n	8007e76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d106      	bne.n	8007e10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f004 f95e 	bl	800c0cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2224      	movs	r2, #36	; 0x24
 8007e14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68da      	ldr	r2, [r3, #12]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fb47 	bl	80084bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	691a      	ldr	r2, [r3, #16]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	695a      	ldr	r2, [r3, #20]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68da      	ldr	r2, [r3, #12]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2220      	movs	r2, #32
 8007e68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b088      	sub	sp, #32
 8007e82:	af02      	add	r7, sp, #8
 8007e84:	60f8      	str	r0, [r7, #12]
 8007e86:	60b9      	str	r1, [r7, #8]
 8007e88:	603b      	str	r3, [r7, #0]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b20      	cmp	r3, #32
 8007e9c:	f040 8083 	bne.w	8007fa6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d002      	beq.n	8007eac <HAL_UART_Transmit+0x2e>
 8007ea6:	88fb      	ldrh	r3, [r7, #6]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e07b      	b.n	8007fa8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d101      	bne.n	8007ebe <HAL_UART_Transmit+0x40>
 8007eba:	2302      	movs	r3, #2
 8007ebc:	e074      	b.n	8007fa8 <HAL_UART_Transmit+0x12a>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2221      	movs	r2, #33	; 0x21
 8007ed0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007ed4:	f7fb ff2c 	bl	8003d30 <HAL_GetTick>
 8007ed8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	88fa      	ldrh	r2, [r7, #6]
 8007ede:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	88fa      	ldrh	r2, [r7, #6]
 8007ee4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007ee6:	e042      	b.n	8007f6e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007efe:	d122      	bne.n	8007f46 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	2200      	movs	r2, #0
 8007f08:	2180      	movs	r1, #128	; 0x80
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 f96a 	bl	80081e4 <UART_WaitOnFlagUntilTimeout>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e046      	b.n	8007fa8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	461a      	mov	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f2c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d103      	bne.n	8007f3e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	3302      	adds	r3, #2
 8007f3a:	60bb      	str	r3, [r7, #8]
 8007f3c:	e017      	b.n	8007f6e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	3301      	adds	r3, #1
 8007f42:	60bb      	str	r3, [r7, #8]
 8007f44:	e013      	b.n	8007f6e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2180      	movs	r1, #128	; 0x80
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 f947 	bl	80081e4 <UART_WaitOnFlagUntilTimeout>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e023      	b.n	8007fa8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	1c5a      	adds	r2, r3, #1
 8007f64:	60ba      	str	r2, [r7, #8]
 8007f66:	781a      	ldrb	r2, [r3, #0]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1b7      	bne.n	8007ee8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	2140      	movs	r1, #64	; 0x40
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 f92e 	bl	80081e4 <UART_WaitOnFlagUntilTimeout>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e00a      	b.n	8007fa8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2220      	movs	r2, #32
 8007f96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	e000      	b.n	8007fa8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007fa6:	2302      	movs	r3, #2
  }
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3718      	adds	r7, #24
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b088      	sub	sp, #32
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	f003 030f 	and.w	r3, r3, #15
 8007fde:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10d      	bne.n	8008002 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	f003 0320 	and.w	r3, r3, #32
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d008      	beq.n	8008002 <HAL_UART_IRQHandler+0x52>
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	f003 0320 	and.w	r3, r3, #32
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f9dc 	bl	80083b8 <UART_Receive_IT>
      return;
 8008000:	e0cc      	b.n	800819c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 80ab 	beq.w	8008160 <HAL_UART_IRQHandler+0x1b0>
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d105      	bne.n	8008020 <HAL_UART_IRQHandler+0x70>
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 80a0 	beq.w	8008160 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00a      	beq.n	8008040 <HAL_UART_IRQHandler+0x90>
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008038:	f043 0201 	orr.w	r2, r3, #1
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	f003 0304 	and.w	r3, r3, #4
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00a      	beq.n	8008060 <HAL_UART_IRQHandler+0xb0>
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f003 0301 	and.w	r3, r3, #1
 8008050:	2b00      	cmp	r3, #0
 8008052:	d005      	beq.n	8008060 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008058:	f043 0202 	orr.w	r2, r3, #2
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	f003 0302 	and.w	r3, r3, #2
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00a      	beq.n	8008080 <HAL_UART_IRQHandler+0xd0>
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f003 0301 	and.w	r3, r3, #1
 8008070:	2b00      	cmp	r3, #0
 8008072:	d005      	beq.n	8008080 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008078:	f043 0204 	orr.w	r2, r3, #4
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	f003 0308 	and.w	r3, r3, #8
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <HAL_UART_IRQHandler+0xf0>
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	2b00      	cmp	r3, #0
 8008092:	d005      	beq.n	80080a0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008098:	f043 0208 	orr.w	r2, r3, #8
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d078      	beq.n	800819a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d007      	beq.n	80080c2 <HAL_UART_IRQHandler+0x112>
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	f003 0320 	and.w	r3, r3, #32
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f97b 	bl	80083b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	695b      	ldr	r3, [r3, #20]
 80080c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080cc:	2b40      	cmp	r3, #64	; 0x40
 80080ce:	bf0c      	ite	eq
 80080d0:	2301      	moveq	r3, #1
 80080d2:	2300      	movne	r3, #0
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080dc:	f003 0308 	and.w	r3, r3, #8
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d102      	bne.n	80080ea <HAL_UART_IRQHandler+0x13a>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d031      	beq.n	800814e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f8c4 	bl	8008278 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080fa:	2b40      	cmp	r3, #64	; 0x40
 80080fc:	d123      	bne.n	8008146 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	695a      	ldr	r2, [r3, #20]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800810c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008112:	2b00      	cmp	r3, #0
 8008114:	d013      	beq.n	800813e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800811a:	4a22      	ldr	r2, [pc, #136]	; (80081a4 <HAL_UART_IRQHandler+0x1f4>)
 800811c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008122:	4618      	mov	r0, r3
 8008124:	f7fb ffe2 	bl	80040ec <HAL_DMA_Abort_IT>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d016      	beq.n	800815c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008138:	4610      	mov	r0, r2
 800813a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800813c:	e00e      	b.n	800815c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f846 	bl	80081d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008144:	e00a      	b.n	800815c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f842 	bl	80081d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800814c:	e006      	b.n	800815c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f83e 	bl	80081d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800815a:	e01e      	b.n	800819a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800815c:	bf00      	nop
    return;
 800815e:	e01c      	b.n	800819a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008166:	2b00      	cmp	r3, #0
 8008168:	d008      	beq.n	800817c <HAL_UART_IRQHandler+0x1cc>
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f8b1 	bl	80082dc <UART_Transmit_IT>
    return;
 800817a:	e00f      	b.n	800819c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00a      	beq.n	800819c <HAL_UART_IRQHandler+0x1ec>
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800818c:	2b00      	cmp	r3, #0
 800818e:	d005      	beq.n	800819c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f8f9 	bl	8008388 <UART_EndTransmit_IT>
    return;
 8008196:	bf00      	nop
 8008198:	e000      	b.n	800819c <HAL_UART_IRQHandler+0x1ec>
    return;
 800819a:	bf00      	nop
  }
}
 800819c:	3720      	adds	r7, #32
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	080082b5 	.word	0x080082b5

080081a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	603b      	str	r3, [r7, #0]
 80081f0:	4613      	mov	r3, r2
 80081f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081f4:	e02c      	b.n	8008250 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fc:	d028      	beq.n	8008250 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d007      	beq.n	8008214 <UART_WaitOnFlagUntilTimeout+0x30>
 8008204:	f7fb fd94 	bl	8003d30 <HAL_GetTick>
 8008208:	4602      	mov	r2, r0
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	429a      	cmp	r2, r3
 8008212:	d21d      	bcs.n	8008250 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68da      	ldr	r2, [r3, #12]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008222:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	695a      	ldr	r2, [r3, #20]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f022 0201 	bic.w	r2, r2, #1
 8008232:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2220      	movs	r2, #32
 8008238:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2220      	movs	r2, #32
 8008240:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e00f      	b.n	8008270 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	4013      	ands	r3, r2
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	429a      	cmp	r2, r3
 800825e:	bf0c      	ite	eq
 8008260:	2301      	moveq	r3, #1
 8008262:	2300      	movne	r3, #0
 8008264:	b2db      	uxtb	r3, r3
 8008266:	461a      	mov	r2, r3
 8008268:	79fb      	ldrb	r3, [r7, #7]
 800826a:	429a      	cmp	r2, r3
 800826c:	d0c3      	beq.n	80081f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68da      	ldr	r2, [r3, #12]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800828e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	695a      	ldr	r2, [r3, #20]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f022 0201 	bic.w	r2, r2, #1
 800829e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2220      	movs	r2, #32
 80082a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f7ff ff7e 	bl	80081d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082d4:	bf00      	nop
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b21      	cmp	r3, #33	; 0x21
 80082ee:	d144      	bne.n	800837a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f8:	d11a      	bne.n	8008330 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	461a      	mov	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800830e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d105      	bne.n	8008324 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a1b      	ldr	r3, [r3, #32]
 800831c:	1c9a      	adds	r2, r3, #2
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	621a      	str	r2, [r3, #32]
 8008322:	e00e      	b.n	8008342 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	1c5a      	adds	r2, r3, #1
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	621a      	str	r2, [r3, #32]
 800832e:	e008      	b.n	8008342 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a1b      	ldr	r3, [r3, #32]
 8008334:	1c59      	adds	r1, r3, #1
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	6211      	str	r1, [r2, #32]
 800833a:	781a      	ldrb	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008346:	b29b      	uxth	r3, r3
 8008348:	3b01      	subs	r3, #1
 800834a:	b29b      	uxth	r3, r3
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	4619      	mov	r1, r3
 8008350:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10f      	bne.n	8008376 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68da      	ldr	r2, [r3, #12]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008364:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68da      	ldr	r2, [r3, #12]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008374:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	e000      	b.n	800837c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800837a:	2302      	movs	r3, #2
  }
}
 800837c:	4618      	mov	r0, r3
 800837e:	3714      	adds	r7, #20
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68da      	ldr	r2, [r3, #12]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800839e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2220      	movs	r2, #32
 80083a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7ff fefd 	bl	80081a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b22      	cmp	r3, #34	; 0x22
 80083ca:	d171      	bne.n	80084b0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083d4:	d123      	bne.n	800841e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083da:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10e      	bne.n	8008402 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fa:	1c9a      	adds	r2, r3, #2
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	629a      	str	r2, [r3, #40]	; 0x28
 8008400:	e029      	b.n	8008456 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	b29b      	uxth	r3, r3
 800840a:	b2db      	uxtb	r3, r3
 800840c:	b29a      	uxth	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008416:	1c5a      	adds	r2, r3, #1
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	629a      	str	r2, [r3, #40]	; 0x28
 800841c:	e01b      	b.n	8008456 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10a      	bne.n	800843c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6858      	ldr	r0, [r3, #4]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008430:	1c59      	adds	r1, r3, #1
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	6291      	str	r1, [r2, #40]	; 0x28
 8008436:	b2c2      	uxtb	r2, r0
 8008438:	701a      	strb	r2, [r3, #0]
 800843a:	e00c      	b.n	8008456 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	b2da      	uxtb	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008448:	1c58      	adds	r0, r3, #1
 800844a:	6879      	ldr	r1, [r7, #4]
 800844c:	6288      	str	r0, [r1, #40]	; 0x28
 800844e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008452:	b2d2      	uxtb	r2, r2
 8008454:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800845a:	b29b      	uxth	r3, r3
 800845c:	3b01      	subs	r3, #1
 800845e:	b29b      	uxth	r3, r3
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	4619      	mov	r1, r3
 8008464:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008466:	2b00      	cmp	r3, #0
 8008468:	d120      	bne.n	80084ac <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68da      	ldr	r2, [r3, #12]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f022 0220 	bic.w	r2, r2, #32
 8008478:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68da      	ldr	r2, [r3, #12]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008488:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	695a      	ldr	r2, [r3, #20]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0201 	bic.w	r2, r2, #1
 8008498:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2220      	movs	r2, #32
 800849e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7ff fe8a 	bl	80081bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	e002      	b.n	80084b2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	e000      	b.n	80084b2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80084b0:	2302      	movs	r3, #2
  }
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
	...

080084bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084bc:	b5b0      	push	{r4, r5, r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68da      	ldr	r2, [r3, #12]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	430a      	orrs	r2, r1
 80084d8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	689a      	ldr	r2, [r3, #8]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	431a      	orrs	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	431a      	orrs	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80084fc:	f023 030c 	bic.w	r3, r3, #12
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	6812      	ldr	r2, [r2, #0]
 8008504:	68f9      	ldr	r1, [r7, #12]
 8008506:	430b      	orrs	r3, r1
 8008508:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	699a      	ldr	r2, [r3, #24]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	430a      	orrs	r2, r1
 800851e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	69db      	ldr	r3, [r3, #28]
 8008524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008528:	f040 80e4 	bne.w	80086f4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4aab      	ldr	r2, [pc, #684]	; (80087e0 <UART_SetConfig+0x324>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d004      	beq.n	8008540 <UART_SetConfig+0x84>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4aaa      	ldr	r2, [pc, #680]	; (80087e4 <UART_SetConfig+0x328>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d16c      	bne.n	800861a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8008540:	f7fe f846 	bl	80065d0 <HAL_RCC_GetPCLK2Freq>
 8008544:	4602      	mov	r2, r0
 8008546:	4613      	mov	r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	009a      	lsls	r2, r3, #2
 800854e:	441a      	add	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	005b      	lsls	r3, r3, #1
 8008556:	fbb2 f3f3 	udiv	r3, r2, r3
 800855a:	4aa3      	ldr	r2, [pc, #652]	; (80087e8 <UART_SetConfig+0x32c>)
 800855c:	fba2 2303 	umull	r2, r3, r2, r3
 8008560:	095b      	lsrs	r3, r3, #5
 8008562:	011c      	lsls	r4, r3, #4
 8008564:	f7fe f834 	bl	80065d0 <HAL_RCC_GetPCLK2Freq>
 8008568:	4602      	mov	r2, r0
 800856a:	4613      	mov	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	009a      	lsls	r2, r3, #2
 8008572:	441a      	add	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	005b      	lsls	r3, r3, #1
 800857a:	fbb2 f5f3 	udiv	r5, r2, r3
 800857e:	f7fe f827 	bl	80065d0 <HAL_RCC_GetPCLK2Freq>
 8008582:	4602      	mov	r2, r0
 8008584:	4613      	mov	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	009a      	lsls	r2, r3, #2
 800858c:	441a      	add	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	fbb2 f3f3 	udiv	r3, r2, r3
 8008598:	4a93      	ldr	r2, [pc, #588]	; (80087e8 <UART_SetConfig+0x32c>)
 800859a:	fba2 2303 	umull	r2, r3, r2, r3
 800859e:	095b      	lsrs	r3, r3, #5
 80085a0:	2264      	movs	r2, #100	; 0x64
 80085a2:	fb02 f303 	mul.w	r3, r2, r3
 80085a6:	1aeb      	subs	r3, r5, r3
 80085a8:	00db      	lsls	r3, r3, #3
 80085aa:	3332      	adds	r3, #50	; 0x32
 80085ac:	4a8e      	ldr	r2, [pc, #568]	; (80087e8 <UART_SetConfig+0x32c>)
 80085ae:	fba2 2303 	umull	r2, r3, r2, r3
 80085b2:	095b      	lsrs	r3, r3, #5
 80085b4:	005b      	lsls	r3, r3, #1
 80085b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80085ba:	441c      	add	r4, r3
 80085bc:	f7fe f808 	bl	80065d0 <HAL_RCC_GetPCLK2Freq>
 80085c0:	4602      	mov	r2, r0
 80085c2:	4613      	mov	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	009a      	lsls	r2, r3, #2
 80085ca:	441a      	add	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	005b      	lsls	r3, r3, #1
 80085d2:	fbb2 f5f3 	udiv	r5, r2, r3
 80085d6:	f7fd fffb 	bl	80065d0 <HAL_RCC_GetPCLK2Freq>
 80085da:	4602      	mov	r2, r0
 80085dc:	4613      	mov	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	4413      	add	r3, r2
 80085e2:	009a      	lsls	r2, r3, #2
 80085e4:	441a      	add	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	005b      	lsls	r3, r3, #1
 80085ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f0:	4a7d      	ldr	r2, [pc, #500]	; (80087e8 <UART_SetConfig+0x32c>)
 80085f2:	fba2 2303 	umull	r2, r3, r2, r3
 80085f6:	095b      	lsrs	r3, r3, #5
 80085f8:	2264      	movs	r2, #100	; 0x64
 80085fa:	fb02 f303 	mul.w	r3, r2, r3
 80085fe:	1aeb      	subs	r3, r5, r3
 8008600:	00db      	lsls	r3, r3, #3
 8008602:	3332      	adds	r3, #50	; 0x32
 8008604:	4a78      	ldr	r2, [pc, #480]	; (80087e8 <UART_SetConfig+0x32c>)
 8008606:	fba2 2303 	umull	r2, r3, r2, r3
 800860a:	095b      	lsrs	r3, r3, #5
 800860c:	f003 0207 	and.w	r2, r3, #7
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4422      	add	r2, r4
 8008616:	609a      	str	r2, [r3, #8]
 8008618:	e154      	b.n	80088c4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800861a:	f7fd ffc5 	bl	80065a8 <HAL_RCC_GetPCLK1Freq>
 800861e:	4602      	mov	r2, r0
 8008620:	4613      	mov	r3, r2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	009a      	lsls	r2, r3, #2
 8008628:	441a      	add	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	005b      	lsls	r3, r3, #1
 8008630:	fbb2 f3f3 	udiv	r3, r2, r3
 8008634:	4a6c      	ldr	r2, [pc, #432]	; (80087e8 <UART_SetConfig+0x32c>)
 8008636:	fba2 2303 	umull	r2, r3, r2, r3
 800863a:	095b      	lsrs	r3, r3, #5
 800863c:	011c      	lsls	r4, r3, #4
 800863e:	f7fd ffb3 	bl	80065a8 <HAL_RCC_GetPCLK1Freq>
 8008642:	4602      	mov	r2, r0
 8008644:	4613      	mov	r3, r2
 8008646:	009b      	lsls	r3, r3, #2
 8008648:	4413      	add	r3, r2
 800864a:	009a      	lsls	r2, r3, #2
 800864c:	441a      	add	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	005b      	lsls	r3, r3, #1
 8008654:	fbb2 f5f3 	udiv	r5, r2, r3
 8008658:	f7fd ffa6 	bl	80065a8 <HAL_RCC_GetPCLK1Freq>
 800865c:	4602      	mov	r2, r0
 800865e:	4613      	mov	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	009a      	lsls	r2, r3, #2
 8008666:	441a      	add	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	005b      	lsls	r3, r3, #1
 800866e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008672:	4a5d      	ldr	r2, [pc, #372]	; (80087e8 <UART_SetConfig+0x32c>)
 8008674:	fba2 2303 	umull	r2, r3, r2, r3
 8008678:	095b      	lsrs	r3, r3, #5
 800867a:	2264      	movs	r2, #100	; 0x64
 800867c:	fb02 f303 	mul.w	r3, r2, r3
 8008680:	1aeb      	subs	r3, r5, r3
 8008682:	00db      	lsls	r3, r3, #3
 8008684:	3332      	adds	r3, #50	; 0x32
 8008686:	4a58      	ldr	r2, [pc, #352]	; (80087e8 <UART_SetConfig+0x32c>)
 8008688:	fba2 2303 	umull	r2, r3, r2, r3
 800868c:	095b      	lsrs	r3, r3, #5
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008694:	441c      	add	r4, r3
 8008696:	f7fd ff87 	bl	80065a8 <HAL_RCC_GetPCLK1Freq>
 800869a:	4602      	mov	r2, r0
 800869c:	4613      	mov	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4413      	add	r3, r2
 80086a2:	009a      	lsls	r2, r3, #2
 80086a4:	441a      	add	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	005b      	lsls	r3, r3, #1
 80086ac:	fbb2 f5f3 	udiv	r5, r2, r3
 80086b0:	f7fd ff7a 	bl	80065a8 <HAL_RCC_GetPCLK1Freq>
 80086b4:	4602      	mov	r2, r0
 80086b6:	4613      	mov	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	009a      	lsls	r2, r3, #2
 80086be:	441a      	add	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	005b      	lsls	r3, r3, #1
 80086c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ca:	4a47      	ldr	r2, [pc, #284]	; (80087e8 <UART_SetConfig+0x32c>)
 80086cc:	fba2 2303 	umull	r2, r3, r2, r3
 80086d0:	095b      	lsrs	r3, r3, #5
 80086d2:	2264      	movs	r2, #100	; 0x64
 80086d4:	fb02 f303 	mul.w	r3, r2, r3
 80086d8:	1aeb      	subs	r3, r5, r3
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	3332      	adds	r3, #50	; 0x32
 80086de:	4a42      	ldr	r2, [pc, #264]	; (80087e8 <UART_SetConfig+0x32c>)
 80086e0:	fba2 2303 	umull	r2, r3, r2, r3
 80086e4:	095b      	lsrs	r3, r3, #5
 80086e6:	f003 0207 	and.w	r2, r3, #7
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4422      	add	r2, r4
 80086f0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80086f2:	e0e7      	b.n	80088c4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a39      	ldr	r2, [pc, #228]	; (80087e0 <UART_SetConfig+0x324>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d004      	beq.n	8008708 <UART_SetConfig+0x24c>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a38      	ldr	r2, [pc, #224]	; (80087e4 <UART_SetConfig+0x328>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d171      	bne.n	80087ec <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8008708:	f7fd ff62 	bl	80065d0 <HAL_RCC_GetPCLK2Freq>
 800870c:	4602      	mov	r2, r0
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	009a      	lsls	r2, r3, #2
 8008716:	441a      	add	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008722:	4a31      	ldr	r2, [pc, #196]	; (80087e8 <UART_SetConfig+0x32c>)
 8008724:	fba2 2303 	umull	r2, r3, r2, r3
 8008728:	095b      	lsrs	r3, r3, #5
 800872a:	011c      	lsls	r4, r3, #4
 800872c:	f7fd ff50 	bl	80065d0 <HAL_RCC_GetPCLK2Freq>
 8008730:	4602      	mov	r2, r0
 8008732:	4613      	mov	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4413      	add	r3, r2
 8008738:	009a      	lsls	r2, r3, #2
 800873a:	441a      	add	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	fbb2 f5f3 	udiv	r5, r2, r3
 8008746:	f7fd ff43 	bl	80065d0 <HAL_RCC_GetPCLK2Freq>
 800874a:	4602      	mov	r2, r0
 800874c:	4613      	mov	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4413      	add	r3, r2
 8008752:	009a      	lsls	r2, r3, #2
 8008754:	441a      	add	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008760:	4a21      	ldr	r2, [pc, #132]	; (80087e8 <UART_SetConfig+0x32c>)
 8008762:	fba2 2303 	umull	r2, r3, r2, r3
 8008766:	095b      	lsrs	r3, r3, #5
 8008768:	2264      	movs	r2, #100	; 0x64
 800876a:	fb02 f303 	mul.w	r3, r2, r3
 800876e:	1aeb      	subs	r3, r5, r3
 8008770:	011b      	lsls	r3, r3, #4
 8008772:	3332      	adds	r3, #50	; 0x32
 8008774:	4a1c      	ldr	r2, [pc, #112]	; (80087e8 <UART_SetConfig+0x32c>)
 8008776:	fba2 2303 	umull	r2, r3, r2, r3
 800877a:	095b      	lsrs	r3, r3, #5
 800877c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008780:	441c      	add	r4, r3
 8008782:	f7fd ff25 	bl	80065d0 <HAL_RCC_GetPCLK2Freq>
 8008786:	4602      	mov	r2, r0
 8008788:	4613      	mov	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4413      	add	r3, r2
 800878e:	009a      	lsls	r2, r3, #2
 8008790:	441a      	add	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	fbb2 f5f3 	udiv	r5, r2, r3
 800879c:	f7fd ff18 	bl	80065d0 <HAL_RCC_GetPCLK2Freq>
 80087a0:	4602      	mov	r2, r0
 80087a2:	4613      	mov	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	009a      	lsls	r2, r3, #2
 80087aa:	441a      	add	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b6:	4a0c      	ldr	r2, [pc, #48]	; (80087e8 <UART_SetConfig+0x32c>)
 80087b8:	fba2 2303 	umull	r2, r3, r2, r3
 80087bc:	095b      	lsrs	r3, r3, #5
 80087be:	2264      	movs	r2, #100	; 0x64
 80087c0:	fb02 f303 	mul.w	r3, r2, r3
 80087c4:	1aeb      	subs	r3, r5, r3
 80087c6:	011b      	lsls	r3, r3, #4
 80087c8:	3332      	adds	r3, #50	; 0x32
 80087ca:	4a07      	ldr	r2, [pc, #28]	; (80087e8 <UART_SetConfig+0x32c>)
 80087cc:	fba2 2303 	umull	r2, r3, r2, r3
 80087d0:	095b      	lsrs	r3, r3, #5
 80087d2:	f003 020f 	and.w	r2, r3, #15
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4422      	add	r2, r4
 80087dc:	609a      	str	r2, [r3, #8]
 80087de:	e071      	b.n	80088c4 <UART_SetConfig+0x408>
 80087e0:	40011000 	.word	0x40011000
 80087e4:	40011400 	.word	0x40011400
 80087e8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80087ec:	f7fd fedc 	bl	80065a8 <HAL_RCC_GetPCLK1Freq>
 80087f0:	4602      	mov	r2, r0
 80087f2:	4613      	mov	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	009a      	lsls	r2, r3, #2
 80087fa:	441a      	add	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	fbb2 f3f3 	udiv	r3, r2, r3
 8008806:	4a31      	ldr	r2, [pc, #196]	; (80088cc <UART_SetConfig+0x410>)
 8008808:	fba2 2303 	umull	r2, r3, r2, r3
 800880c:	095b      	lsrs	r3, r3, #5
 800880e:	011c      	lsls	r4, r3, #4
 8008810:	f7fd feca 	bl	80065a8 <HAL_RCC_GetPCLK1Freq>
 8008814:	4602      	mov	r2, r0
 8008816:	4613      	mov	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	009a      	lsls	r2, r3, #2
 800881e:	441a      	add	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	fbb2 f5f3 	udiv	r5, r2, r3
 800882a:	f7fd febd 	bl	80065a8 <HAL_RCC_GetPCLK1Freq>
 800882e:	4602      	mov	r2, r0
 8008830:	4613      	mov	r3, r2
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4413      	add	r3, r2
 8008836:	009a      	lsls	r2, r3, #2
 8008838:	441a      	add	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	fbb2 f3f3 	udiv	r3, r2, r3
 8008844:	4a21      	ldr	r2, [pc, #132]	; (80088cc <UART_SetConfig+0x410>)
 8008846:	fba2 2303 	umull	r2, r3, r2, r3
 800884a:	095b      	lsrs	r3, r3, #5
 800884c:	2264      	movs	r2, #100	; 0x64
 800884e:	fb02 f303 	mul.w	r3, r2, r3
 8008852:	1aeb      	subs	r3, r5, r3
 8008854:	011b      	lsls	r3, r3, #4
 8008856:	3332      	adds	r3, #50	; 0x32
 8008858:	4a1c      	ldr	r2, [pc, #112]	; (80088cc <UART_SetConfig+0x410>)
 800885a:	fba2 2303 	umull	r2, r3, r2, r3
 800885e:	095b      	lsrs	r3, r3, #5
 8008860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008864:	441c      	add	r4, r3
 8008866:	f7fd fe9f 	bl	80065a8 <HAL_RCC_GetPCLK1Freq>
 800886a:	4602      	mov	r2, r0
 800886c:	4613      	mov	r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	009a      	lsls	r2, r3, #2
 8008874:	441a      	add	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	fbb2 f5f3 	udiv	r5, r2, r3
 8008880:	f7fd fe92 	bl	80065a8 <HAL_RCC_GetPCLK1Freq>
 8008884:	4602      	mov	r2, r0
 8008886:	4613      	mov	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	009a      	lsls	r2, r3, #2
 800888e:	441a      	add	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	fbb2 f3f3 	udiv	r3, r2, r3
 800889a:	4a0c      	ldr	r2, [pc, #48]	; (80088cc <UART_SetConfig+0x410>)
 800889c:	fba2 2303 	umull	r2, r3, r2, r3
 80088a0:	095b      	lsrs	r3, r3, #5
 80088a2:	2264      	movs	r2, #100	; 0x64
 80088a4:	fb02 f303 	mul.w	r3, r2, r3
 80088a8:	1aeb      	subs	r3, r5, r3
 80088aa:	011b      	lsls	r3, r3, #4
 80088ac:	3332      	adds	r3, #50	; 0x32
 80088ae:	4a07      	ldr	r2, [pc, #28]	; (80088cc <UART_SetConfig+0x410>)
 80088b0:	fba2 2303 	umull	r2, r3, r2, r3
 80088b4:	095b      	lsrs	r3, r3, #5
 80088b6:	f003 020f 	and.w	r2, r3, #15
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4422      	add	r2, r4
 80088c0:	609a      	str	r2, [r3, #8]
}
 80088c2:	e7ff      	b.n	80088c4 <UART_SetConfig+0x408>
 80088c4:	bf00      	nop
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bdb0      	pop	{r4, r5, r7, pc}
 80088cc:	51eb851f 	.word	0x51eb851f

080088d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	4603      	mov	r3, r0
 80088d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80088da:	2300      	movs	r3, #0
 80088dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80088de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088e2:	2b84      	cmp	r3, #132	; 0x84
 80088e4:	d005      	beq.n	80088f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80088e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	4413      	add	r3, r2
 80088ee:	3303      	adds	r3, #3
 80088f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80088f2:	68fb      	ldr	r3, [r7, #12]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008904:	f000 fe3c 	bl	8009580 <vTaskStartScheduler>
  
  return osOK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	bd80      	pop	{r7, pc}

0800890e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800890e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008910:	b089      	sub	sp, #36	; 0x24
 8008912:	af04      	add	r7, sp, #16
 8008914:	6078      	str	r0, [r7, #4]
 8008916:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d020      	beq.n	8008962 <osThreadCreate+0x54>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d01c      	beq.n	8008962 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685c      	ldr	r4, [r3, #4]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681d      	ldr	r5, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	691e      	ldr	r6, [r3, #16]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff ffc8 	bl	80088d0 <makeFreeRtosPriority>
 8008940:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800894a:	9202      	str	r2, [sp, #8]
 800894c:	9301      	str	r3, [sp, #4]
 800894e:	9100      	str	r1, [sp, #0]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	4632      	mov	r2, r6
 8008954:	4629      	mov	r1, r5
 8008956:	4620      	mov	r0, r4
 8008958:	f000 fc58 	bl	800920c <xTaskCreateStatic>
 800895c:	4603      	mov	r3, r0
 800895e:	60fb      	str	r3, [r7, #12]
 8008960:	e01c      	b.n	800899c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685c      	ldr	r4, [r3, #4]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800896e:	b29e      	uxth	r6, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008976:	4618      	mov	r0, r3
 8008978:	f7ff ffaa 	bl	80088d0 <makeFreeRtosPriority>
 800897c:	4602      	mov	r2, r0
 800897e:	f107 030c 	add.w	r3, r7, #12
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	9200      	str	r2, [sp, #0]
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	4632      	mov	r2, r6
 800898a:	4629      	mov	r1, r5
 800898c:	4620      	mov	r0, r4
 800898e:	f000 fc96 	bl	80092be <xTaskCreate>
 8008992:	4603      	mov	r3, r0
 8008994:	2b01      	cmp	r3, #1
 8008996:	d001      	beq.n	800899c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008998:	2300      	movs	r3, #0
 800899a:	e000      	b.n	800899e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800899c:	68fb      	ldr	r3, [r7, #12]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3714      	adds	r7, #20
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <osDelay+0x16>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	e000      	b.n	80089be <osDelay+0x18>
 80089bc:	2301      	movs	r3, #1
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 fdaa 	bl	8009518 <vTaskDelay>
  
  return osOK;
 80089c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b082      	sub	sp, #8
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d007      	beq.n	80089ee <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	4619      	mov	r1, r3
 80089e4:	2001      	movs	r0, #1
 80089e6:	f000 fa27 	bl	8008e38 <xQueueCreateMutexStatic>
 80089ea:	4603      	mov	r3, r0
 80089ec:	e003      	b.n	80089f6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80089ee:	2001      	movs	r0, #1
 80089f0:	f000 fa0a 	bl	8008e08 <xQueueCreateMutex>
 80089f4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f103 0208 	add.w	r2, r3, #8
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f04f 32ff 	mov.w	r2, #4294967295
 8008a16:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f103 0208 	add.w	r2, r3, #8
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f103 0208 	add.w	r2, r3, #8
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a32:	bf00      	nop
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b083      	sub	sp, #12
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	689a      	ldr	r2, [r3, #8]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	683a      	ldr	r2, [r7, #0]
 8008a82:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	601a      	str	r2, [r3, #0]
}
 8008a94:	bf00      	nop
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab6:	d103      	bne.n	8008ac0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	60fb      	str	r3, [r7, #12]
 8008abe:	e00c      	b.n	8008ada <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	3308      	adds	r3, #8
 8008ac4:	60fb      	str	r3, [r7, #12]
 8008ac6:	e002      	b.n	8008ace <vListInsert+0x2e>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	60fb      	str	r3, [r7, #12]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d2f6      	bcs.n	8008ac8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	1c5a      	adds	r2, r3, #1
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	601a      	str	r2, [r3, #0]
}
 8008b06:	bf00      	nop
 8008b08:	3714      	adds	r7, #20
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008b12:	b480      	push	{r7}
 8008b14:	b085      	sub	sp, #20
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	6892      	ldr	r2, [r2, #8]
 8008b28:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	6852      	ldr	r2, [r2, #4]
 8008b32:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d103      	bne.n	8008b46 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	689a      	ldr	r2, [r3, #8]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	1e5a      	subs	r2, r3, #1
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
	...

08008b68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d109      	bne.n	8008b90 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b80:	f383 8811 	msr	BASEPRI, r3
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	60bb      	str	r3, [r7, #8]
 8008b8e:	e7fe      	b.n	8008b8e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008b90:	f001 fb24 	bl	800a1dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b9c:	68f9      	ldr	r1, [r7, #12]
 8008b9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ba0:	fb01 f303 	mul.w	r3, r1, r3
 8008ba4:	441a      	add	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	68f9      	ldr	r1, [r7, #12]
 8008bc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008bc6:	fb01 f303 	mul.w	r3, r1, r3
 8008bca:	441a      	add	r2, r3
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	22ff      	movs	r2, #255	; 0xff
 8008bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	22ff      	movs	r2, #255	; 0xff
 8008bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d114      	bne.n	8008c10 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d01a      	beq.n	8008c24 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3310      	adds	r3, #16
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 ff06 	bl	8009a04 <xTaskRemoveFromEventList>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d012      	beq.n	8008c24 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008bfe:	4b0d      	ldr	r3, [pc, #52]	; (8008c34 <xQueueGenericReset+0xcc>)
 8008c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c04:	601a      	str	r2, [r3, #0]
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	e009      	b.n	8008c24 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	3310      	adds	r3, #16
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7ff fef2 	bl	80089fe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3324      	adds	r3, #36	; 0x24
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7ff feed 	bl	80089fe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008c24:	f001 fb08 	bl	800a238 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008c28:	2301      	movs	r3, #1
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	e000ed04 	.word	0xe000ed04

08008c38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08e      	sub	sp, #56	; 0x38
 8008c3c:	af02      	add	r7, sp, #8
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
 8008c44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d109      	bne.n	8008c60 <xQueueGenericCreateStatic+0x28>
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c5e:	e7fe      	b.n	8008c5e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d109      	bne.n	8008c7a <xQueueGenericCreateStatic+0x42>
 8008c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6a:	f383 8811 	msr	BASEPRI, r3
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	627b      	str	r3, [r7, #36]	; 0x24
 8008c78:	e7fe      	b.n	8008c78 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d002      	beq.n	8008c86 <xQueueGenericCreateStatic+0x4e>
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <xQueueGenericCreateStatic+0x52>
 8008c86:	2301      	movs	r3, #1
 8008c88:	e000      	b.n	8008c8c <xQueueGenericCreateStatic+0x54>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d109      	bne.n	8008ca4 <xQueueGenericCreateStatic+0x6c>
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	623b      	str	r3, [r7, #32]
 8008ca2:	e7fe      	b.n	8008ca2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d102      	bne.n	8008cb0 <xQueueGenericCreateStatic+0x78>
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d101      	bne.n	8008cb4 <xQueueGenericCreateStatic+0x7c>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e000      	b.n	8008cb6 <xQueueGenericCreateStatic+0x7e>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d109      	bne.n	8008cce <xQueueGenericCreateStatic+0x96>
 8008cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbe:	f383 8811 	msr	BASEPRI, r3
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	61fb      	str	r3, [r7, #28]
 8008ccc:	e7fe      	b.n	8008ccc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008cce:	2348      	movs	r3, #72	; 0x48
 8008cd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	2b48      	cmp	r3, #72	; 0x48
 8008cd6:	d009      	beq.n	8008cec <xQueueGenericCreateStatic+0xb4>
 8008cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cdc:	f383 8811 	msr	BASEPRI, r3
 8008ce0:	f3bf 8f6f 	isb	sy
 8008ce4:	f3bf 8f4f 	dsb	sy
 8008ce8:	61bb      	str	r3, [r7, #24]
 8008cea:	e7fe      	b.n	8008cea <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00d      	beq.n	8008d12 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008cfe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	4613      	mov	r3, r2
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	68b9      	ldr	r1, [r7, #8]
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f000 f842 	bl	8008d96 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3730      	adds	r7, #48	; 0x30
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08a      	sub	sp, #40	; 0x28
 8008d20:	af02      	add	r7, sp, #8
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	4613      	mov	r3, r2
 8008d28:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d109      	bne.n	8008d44 <xQueueGenericCreate+0x28>
 8008d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	613b      	str	r3, [r7, #16]
 8008d42:	e7fe      	b.n	8008d42 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d102      	bne.n	8008d50 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	61fb      	str	r3, [r7, #28]
 8008d4e:	e004      	b.n	8008d5a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	fb02 f303 	mul.w	r3, r2, r3
 8008d58:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	3348      	adds	r3, #72	; 0x48
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f001 fb18 	bl	800a394 <pvPortMalloc>
 8008d64:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00f      	beq.n	8008d8c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	3348      	adds	r3, #72	; 0x48
 8008d70:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d7a:	79fa      	ldrb	r2, [r7, #7]
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	4613      	mov	r3, r2
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	68b9      	ldr	r1, [r7, #8]
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 f805 	bl	8008d96 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008d8c:	69bb      	ldr	r3, [r7, #24]
	}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3720      	adds	r7, #32
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b084      	sub	sp, #16
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	60f8      	str	r0, [r7, #12]
 8008d9e:	60b9      	str	r1, [r7, #8]
 8008da0:	607a      	str	r2, [r7, #4]
 8008da2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d103      	bne.n	8008db2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	69ba      	ldr	r2, [r7, #24]
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	e002      	b.n	8008db8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008dc4:	2101      	movs	r1, #1
 8008dc6:	69b8      	ldr	r0, [r7, #24]
 8008dc8:	f7ff fece 	bl	8008b68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008dcc:	bf00      	nop
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00e      	beq.n	8008e00 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008df4:	2300      	movs	r3, #0
 8008df6:	2200      	movs	r2, #0
 8008df8:	2100      	movs	r1, #0
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f838 	bl	8008e70 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008e12:	2301      	movs	r3, #1
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	2300      	movs	r3, #0
 8008e18:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008e1a:	79fb      	ldrb	r3, [r7, #7]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	6939      	ldr	r1, [r7, #16]
 8008e20:	6978      	ldr	r0, [r7, #20]
 8008e22:	f7ff ff7b 	bl	8008d1c <xQueueGenericCreate>
 8008e26:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f7ff ffd3 	bl	8008dd4 <prvInitialiseMutex>

		return pxNewQueue;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
	}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3718      	adds	r7, #24
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b088      	sub	sp, #32
 8008e3c:	af02      	add	r7, sp, #8
 8008e3e:	4603      	mov	r3, r0
 8008e40:	6039      	str	r1, [r7, #0]
 8008e42:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008e44:	2301      	movs	r3, #1
 8008e46:	617b      	str	r3, [r7, #20]
 8008e48:	2300      	movs	r3, #0
 8008e4a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008e4c:	79fb      	ldrb	r3, [r7, #7]
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2200      	movs	r2, #0
 8008e54:	6939      	ldr	r1, [r7, #16]
 8008e56:	6978      	ldr	r0, [r7, #20]
 8008e58:	f7ff feee 	bl	8008c38 <xQueueGenericCreateStatic>
 8008e5c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f7ff ffb8 	bl	8008dd4 <prvInitialiseMutex>

		return pxNewQueue;
 8008e64:	68fb      	ldr	r3, [r7, #12]
	}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3718      	adds	r7, #24
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
	...

08008e70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b08e      	sub	sp, #56	; 0x38
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d109      	bne.n	8008ea0 <xQueueGenericSend+0x30>
 8008e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e90:	f383 8811 	msr	BASEPRI, r3
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e9e:	e7fe      	b.n	8008e9e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d103      	bne.n	8008eae <xQueueGenericSend+0x3e>
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d101      	bne.n	8008eb2 <xQueueGenericSend+0x42>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e000      	b.n	8008eb4 <xQueueGenericSend+0x44>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d109      	bne.n	8008ecc <xQueueGenericSend+0x5c>
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8008eca:	e7fe      	b.n	8008eca <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d103      	bne.n	8008eda <xQueueGenericSend+0x6a>
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d101      	bne.n	8008ede <xQueueGenericSend+0x6e>
 8008eda:	2301      	movs	r3, #1
 8008edc:	e000      	b.n	8008ee0 <xQueueGenericSend+0x70>
 8008ede:	2300      	movs	r3, #0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d109      	bne.n	8008ef8 <xQueueGenericSend+0x88>
 8008ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	623b      	str	r3, [r7, #32]
 8008ef6:	e7fe      	b.n	8008ef6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ef8:	f000 ff40 	bl	8009d7c <xTaskGetSchedulerState>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d102      	bne.n	8008f08 <xQueueGenericSend+0x98>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d101      	bne.n	8008f0c <xQueueGenericSend+0x9c>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e000      	b.n	8008f0e <xQueueGenericSend+0x9e>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d109      	bne.n	8008f26 <xQueueGenericSend+0xb6>
 8008f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f16:	f383 8811 	msr	BASEPRI, r3
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	61fb      	str	r3, [r7, #28]
 8008f24:	e7fe      	b.n	8008f24 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f26:	f001 f959 	bl	800a1dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d302      	bcc.n	8008f3c <xQueueGenericSend+0xcc>
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d129      	bne.n	8008f90 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f3c:	683a      	ldr	r2, [r7, #0]
 8008f3e:	68b9      	ldr	r1, [r7, #8]
 8008f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f42:	f000 f88f 	bl	8009064 <prvCopyDataToQueue>
 8008f46:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d010      	beq.n	8008f72 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f52:	3324      	adds	r3, #36	; 0x24
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 fd55 	bl	8009a04 <xTaskRemoveFromEventList>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d013      	beq.n	8008f88 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f60:	4b3f      	ldr	r3, [pc, #252]	; (8009060 <xQueueGenericSend+0x1f0>)
 8008f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f66:	601a      	str	r2, [r3, #0]
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	f3bf 8f6f 	isb	sy
 8008f70:	e00a      	b.n	8008f88 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d007      	beq.n	8008f88 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008f78:	4b39      	ldr	r3, [pc, #228]	; (8009060 <xQueueGenericSend+0x1f0>)
 8008f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f7e:	601a      	str	r2, [r3, #0]
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008f88:	f001 f956 	bl	800a238 <vPortExitCritical>
				return pdPASS;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e063      	b.n	8009058 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d103      	bne.n	8008f9e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f96:	f001 f94f 	bl	800a238 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e05c      	b.n	8009058 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d106      	bne.n	8008fb2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fa4:	f107 0314 	add.w	r3, r7, #20
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f000 fd8d 	bl	8009ac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fb2:	f001 f941 	bl	800a238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fb6:	f000 fb41 	bl	800963c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fba:	f001 f90f 	bl	800a1dc <vPortEnterCritical>
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fc4:	b25b      	sxtb	r3, r3
 8008fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fca:	d103      	bne.n	8008fd4 <xQueueGenericSend+0x164>
 8008fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fda:	b25b      	sxtb	r3, r3
 8008fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe0:	d103      	bne.n	8008fea <xQueueGenericSend+0x17a>
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fea:	f001 f925 	bl	800a238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fee:	1d3a      	adds	r2, r7, #4
 8008ff0:	f107 0314 	add.w	r3, r7, #20
 8008ff4:	4611      	mov	r1, r2
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 fd7c 	bl	8009af4 <xTaskCheckForTimeOut>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d124      	bne.n	800904c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009002:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009004:	f000 f8ea 	bl	80091dc <prvIsQueueFull>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d018      	beq.n	8009040 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800900e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009010:	3310      	adds	r3, #16
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	4611      	mov	r1, r2
 8009016:	4618      	mov	r0, r3
 8009018:	f000 fcd0 	bl	80099bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800901c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800901e:	f000 f88b 	bl	8009138 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009022:	f000 fb19 	bl	8009658 <xTaskResumeAll>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	f47f af7c 	bne.w	8008f26 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800902e:	4b0c      	ldr	r3, [pc, #48]	; (8009060 <xQueueGenericSend+0x1f0>)
 8009030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009034:	601a      	str	r2, [r3, #0]
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	e772      	b.n	8008f26 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009042:	f000 f879 	bl	8009138 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009046:	f000 fb07 	bl	8009658 <xTaskResumeAll>
 800904a:	e76c      	b.n	8008f26 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800904c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800904e:	f000 f873 	bl	8009138 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009052:	f000 fb01 	bl	8009658 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009056:	2300      	movs	r3, #0
		}
	}
}
 8009058:	4618      	mov	r0, r3
 800905a:	3738      	adds	r7, #56	; 0x38
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	e000ed04 	.word	0xe000ed04

08009064 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009070:	2300      	movs	r3, #0
 8009072:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009078:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10d      	bne.n	800909e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d14d      	bne.n	8009126 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	4618      	mov	r0, r3
 8009090:	f000 fe92 	bl	8009db8 <xTaskPriorityDisinherit>
 8009094:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	605a      	str	r2, [r3, #4]
 800909c:	e043      	b.n	8009126 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d119      	bne.n	80090d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6898      	ldr	r0, [r3, #8]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ac:	461a      	mov	r2, r3
 80090ae:	68b9      	ldr	r1, [r7, #8]
 80090b0:	f003 f8ea 	bl	800c288 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	689a      	ldr	r2, [r3, #8]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090bc:	441a      	add	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	689a      	ldr	r2, [r3, #8]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d32b      	bcc.n	8009126 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	609a      	str	r2, [r3, #8]
 80090d6:	e026      	b.n	8009126 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	68d8      	ldr	r0, [r3, #12]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e0:	461a      	mov	r2, r3
 80090e2:	68b9      	ldr	r1, [r7, #8]
 80090e4:	f003 f8d0 	bl	800c288 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	68da      	ldr	r2, [r3, #12]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f0:	425b      	negs	r3, r3
 80090f2:	441a      	add	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	68da      	ldr	r2, [r3, #12]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	429a      	cmp	r2, r3
 8009102:	d207      	bcs.n	8009114 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910c:	425b      	negs	r3, r3
 800910e:	441a      	add	r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b02      	cmp	r3, #2
 8009118:	d105      	bne.n	8009126 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	3b01      	subs	r3, #1
 8009124:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	1c5a      	adds	r2, r3, #1
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800912e:	697b      	ldr	r3, [r7, #20]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009140:	f001 f84c 	bl	800a1dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800914a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800914c:	e011      	b.n	8009172 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009152:	2b00      	cmp	r3, #0
 8009154:	d012      	beq.n	800917c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	3324      	adds	r3, #36	; 0x24
 800915a:	4618      	mov	r0, r3
 800915c:	f000 fc52 	bl	8009a04 <xTaskRemoveFromEventList>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009166:	f000 fd25 	bl	8009bb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800916a:	7bfb      	ldrb	r3, [r7, #15]
 800916c:	3b01      	subs	r3, #1
 800916e:	b2db      	uxtb	r3, r3
 8009170:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009176:	2b00      	cmp	r3, #0
 8009178:	dce9      	bgt.n	800914e <prvUnlockQueue+0x16>
 800917a:	e000      	b.n	800917e <prvUnlockQueue+0x46>
					break;
 800917c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	22ff      	movs	r2, #255	; 0xff
 8009182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009186:	f001 f857 	bl	800a238 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800918a:	f001 f827 	bl	800a1dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009194:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009196:	e011      	b.n	80091bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d012      	beq.n	80091c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	3310      	adds	r3, #16
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 fc2d 	bl	8009a04 <xTaskRemoveFromEventList>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d001      	beq.n	80091b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80091b0:	f000 fd00 	bl	8009bb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80091b4:	7bbb      	ldrb	r3, [r7, #14]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	dce9      	bgt.n	8009198 <prvUnlockQueue+0x60>
 80091c4:	e000      	b.n	80091c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80091c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	22ff      	movs	r2, #255	; 0xff
 80091cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80091d0:	f001 f832 	bl	800a238 <vPortExitCritical>
}
 80091d4:	bf00      	nop
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091e4:	f000 fffa 	bl	800a1dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d102      	bne.n	80091fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80091f4:	2301      	movs	r3, #1
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	e001      	b.n	80091fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80091fa:	2300      	movs	r3, #0
 80091fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091fe:	f001 f81b 	bl	800a238 <vPortExitCritical>

	return xReturn;
 8009202:	68fb      	ldr	r3, [r7, #12]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800920c:	b580      	push	{r7, lr}
 800920e:	b08e      	sub	sp, #56	; 0x38
 8009210:	af04      	add	r7, sp, #16
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
 8009218:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800921a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921c:	2b00      	cmp	r3, #0
 800921e:	d109      	bne.n	8009234 <xTaskCreateStatic+0x28>
 8009220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	623b      	str	r3, [r7, #32]
 8009232:	e7fe      	b.n	8009232 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009236:	2b00      	cmp	r3, #0
 8009238:	d109      	bne.n	800924e <xTaskCreateStatic+0x42>
 800923a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923e:	f383 8811 	msr	BASEPRI, r3
 8009242:	f3bf 8f6f 	isb	sy
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	61fb      	str	r3, [r7, #28]
 800924c:	e7fe      	b.n	800924c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800924e:	2354      	movs	r3, #84	; 0x54
 8009250:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	2b54      	cmp	r3, #84	; 0x54
 8009256:	d009      	beq.n	800926c <xTaskCreateStatic+0x60>
 8009258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	61bb      	str	r3, [r7, #24]
 800926a:	e7fe      	b.n	800926a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800926c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926e:	2b00      	cmp	r3, #0
 8009270:	d01e      	beq.n	80092b0 <xTaskCreateStatic+0xa4>
 8009272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009274:	2b00      	cmp	r3, #0
 8009276:	d01b      	beq.n	80092b0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800927c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009280:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009284:	2202      	movs	r2, #2
 8009286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800928a:	2300      	movs	r3, #0
 800928c:	9303      	str	r3, [sp, #12]
 800928e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009290:	9302      	str	r3, [sp, #8]
 8009292:	f107 0314 	add.w	r3, r7, #20
 8009296:	9301      	str	r3, [sp, #4]
 8009298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	68b9      	ldr	r1, [r7, #8]
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f000 f850 	bl	8009348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092aa:	f000 f8cb 	bl	8009444 <prvAddNewTaskToReadyList>
 80092ae:	e001      	b.n	80092b4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80092b0:	2300      	movs	r3, #0
 80092b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80092b4:	697b      	ldr	r3, [r7, #20]
	}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3728      	adds	r7, #40	; 0x28
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b08c      	sub	sp, #48	; 0x30
 80092c2:	af04      	add	r7, sp, #16
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	60b9      	str	r1, [r7, #8]
 80092c8:	603b      	str	r3, [r7, #0]
 80092ca:	4613      	mov	r3, r2
 80092cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ce:	88fb      	ldrh	r3, [r7, #6]
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4618      	mov	r0, r3
 80092d4:	f001 f85e 	bl	800a394 <pvPortMalloc>
 80092d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00e      	beq.n	80092fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80092e0:	2054      	movs	r0, #84	; 0x54
 80092e2:	f001 f857 	bl	800a394 <pvPortMalloc>
 80092e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	631a      	str	r2, [r3, #48]	; 0x30
 80092f4:	e005      	b.n	8009302 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80092f6:	6978      	ldr	r0, [r7, #20]
 80092f8:	f001 f90e 	bl	800a518 <vPortFree>
 80092fc:	e001      	b.n	8009302 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80092fe:	2300      	movs	r3, #0
 8009300:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d017      	beq.n	8009338 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009310:	88fa      	ldrh	r2, [r7, #6]
 8009312:	2300      	movs	r3, #0
 8009314:	9303      	str	r3, [sp, #12]
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	9302      	str	r3, [sp, #8]
 800931a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931c:	9301      	str	r3, [sp, #4]
 800931e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	68b9      	ldr	r1, [r7, #8]
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f000 f80e 	bl	8009348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800932c:	69f8      	ldr	r0, [r7, #28]
 800932e:	f000 f889 	bl	8009444 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009332:	2301      	movs	r3, #1
 8009334:	61bb      	str	r3, [r7, #24]
 8009336:	e002      	b.n	800933e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009338:	f04f 33ff 	mov.w	r3, #4294967295
 800933c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800933e:	69bb      	ldr	r3, [r7, #24]
	}
 8009340:	4618      	mov	r0, r3
 8009342:	3720      	adds	r7, #32
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b088      	sub	sp, #32
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
 8009354:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009360:	3b01      	subs	r3, #1
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4413      	add	r3, r2
 8009366:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	f023 0307 	bic.w	r3, r3, #7
 800936e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	f003 0307 	and.w	r3, r3, #7
 8009376:	2b00      	cmp	r3, #0
 8009378:	d009      	beq.n	800938e <prvInitialiseNewTask+0x46>
 800937a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937e:	f383 8811 	msr	BASEPRI, r3
 8009382:	f3bf 8f6f 	isb	sy
 8009386:	f3bf 8f4f 	dsb	sy
 800938a:	617b      	str	r3, [r7, #20]
 800938c:	e7fe      	b.n	800938c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800938e:	2300      	movs	r3, #0
 8009390:	61fb      	str	r3, [r7, #28]
 8009392:	e012      	b.n	80093ba <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	4413      	add	r3, r2
 800939a:	7819      	ldrb	r1, [r3, #0]
 800939c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	4413      	add	r3, r2
 80093a2:	3334      	adds	r3, #52	; 0x34
 80093a4:	460a      	mov	r2, r1
 80093a6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	4413      	add	r3, r2
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d006      	beq.n	80093c2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	3301      	adds	r3, #1
 80093b8:	61fb      	str	r3, [r7, #28]
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	2b0f      	cmp	r3, #15
 80093be:	d9e9      	bls.n	8009394 <prvInitialiseNewTask+0x4c>
 80093c0:	e000      	b.n	80093c4 <prvInitialiseNewTask+0x7c>
		{
			break;
 80093c2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80093c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80093cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ce:	2b06      	cmp	r3, #6
 80093d0:	d901      	bls.n	80093d6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80093d2:	2306      	movs	r3, #6
 80093d4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80093d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093da:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80093dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093e0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80093e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e4:	2200      	movs	r2, #0
 80093e6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80093e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ea:	3304      	adds	r3, #4
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7ff fb26 	bl	8008a3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f4:	3318      	adds	r3, #24
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7ff fb21 	bl	8008a3e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009400:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009404:	f1c3 0207 	rsb	r2, r3, #7
 8009408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800940c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009410:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009414:	2200      	movs	r2, #0
 8009416:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941a:	2200      	movs	r2, #0
 800941c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009420:	683a      	ldr	r2, [r7, #0]
 8009422:	68f9      	ldr	r1, [r7, #12]
 8009424:	69b8      	ldr	r0, [r7, #24]
 8009426:	f000 fdb1 	bl	8009f8c <pxPortInitialiseStack>
 800942a:	4602      	mov	r2, r0
 800942c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009432:	2b00      	cmp	r3, #0
 8009434:	d002      	beq.n	800943c <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800943a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800943c:	bf00      	nop
 800943e:	3720      	adds	r7, #32
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800944c:	f000 fec6 	bl	800a1dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009450:	4b2a      	ldr	r3, [pc, #168]	; (80094fc <prvAddNewTaskToReadyList+0xb8>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3301      	adds	r3, #1
 8009456:	4a29      	ldr	r2, [pc, #164]	; (80094fc <prvAddNewTaskToReadyList+0xb8>)
 8009458:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800945a:	4b29      	ldr	r3, [pc, #164]	; (8009500 <prvAddNewTaskToReadyList+0xbc>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d109      	bne.n	8009476 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009462:	4a27      	ldr	r2, [pc, #156]	; (8009500 <prvAddNewTaskToReadyList+0xbc>)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009468:	4b24      	ldr	r3, [pc, #144]	; (80094fc <prvAddNewTaskToReadyList+0xb8>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d110      	bne.n	8009492 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009470:	f000 fbc4 	bl	8009bfc <prvInitialiseTaskLists>
 8009474:	e00d      	b.n	8009492 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009476:	4b23      	ldr	r3, [pc, #140]	; (8009504 <prvAddNewTaskToReadyList+0xc0>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d109      	bne.n	8009492 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800947e:	4b20      	ldr	r3, [pc, #128]	; (8009500 <prvAddNewTaskToReadyList+0xbc>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009488:	429a      	cmp	r2, r3
 800948a:	d802      	bhi.n	8009492 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800948c:	4a1c      	ldr	r2, [pc, #112]	; (8009500 <prvAddNewTaskToReadyList+0xbc>)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009492:	4b1d      	ldr	r3, [pc, #116]	; (8009508 <prvAddNewTaskToReadyList+0xc4>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	3301      	adds	r3, #1
 8009498:	4a1b      	ldr	r2, [pc, #108]	; (8009508 <prvAddNewTaskToReadyList+0xc4>)
 800949a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a0:	2201      	movs	r2, #1
 80094a2:	409a      	lsls	r2, r3
 80094a4:	4b19      	ldr	r3, [pc, #100]	; (800950c <prvAddNewTaskToReadyList+0xc8>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	4a18      	ldr	r2, [pc, #96]	; (800950c <prvAddNewTaskToReadyList+0xc8>)
 80094ac:	6013      	str	r3, [r2, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b2:	4613      	mov	r3, r2
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4a15      	ldr	r2, [pc, #84]	; (8009510 <prvAddNewTaskToReadyList+0xcc>)
 80094bc:	441a      	add	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	3304      	adds	r3, #4
 80094c2:	4619      	mov	r1, r3
 80094c4:	4610      	mov	r0, r2
 80094c6:	f7ff fac7 	bl	8008a58 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80094ca:	f000 feb5 	bl	800a238 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80094ce:	4b0d      	ldr	r3, [pc, #52]	; (8009504 <prvAddNewTaskToReadyList+0xc0>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00e      	beq.n	80094f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80094d6:	4b0a      	ldr	r3, [pc, #40]	; (8009500 <prvAddNewTaskToReadyList+0xbc>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d207      	bcs.n	80094f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80094e4:	4b0b      	ldr	r3, [pc, #44]	; (8009514 <prvAddNewTaskToReadyList+0xd0>)
 80094e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ea:	601a      	str	r2, [r3, #0]
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094f4:	bf00      	nop
 80094f6:	3708      	adds	r7, #8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	200002e0 	.word	0x200002e0
 8009500:	200001e0 	.word	0x200001e0
 8009504:	200002ec 	.word	0x200002ec
 8009508:	200002fc 	.word	0x200002fc
 800950c:	200002e8 	.word	0x200002e8
 8009510:	200001e4 	.word	0x200001e4
 8009514:	e000ed04 	.word	0xe000ed04

08009518 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009518:	b580      	push	{r7, lr}
 800951a:	b084      	sub	sp, #16
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009520:	2300      	movs	r3, #0
 8009522:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d016      	beq.n	8009558 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800952a:	4b13      	ldr	r3, [pc, #76]	; (8009578 <vTaskDelay+0x60>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d009      	beq.n	8009546 <vTaskDelay+0x2e>
 8009532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009536:	f383 8811 	msr	BASEPRI, r3
 800953a:	f3bf 8f6f 	isb	sy
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	60bb      	str	r3, [r7, #8]
 8009544:	e7fe      	b.n	8009544 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009546:	f000 f879 	bl	800963c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800954a:	2100      	movs	r1, #0
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 fcb7 	bl	8009ec0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009552:	f000 f881 	bl	8009658 <xTaskResumeAll>
 8009556:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d107      	bne.n	800956e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800955e:	4b07      	ldr	r3, [pc, #28]	; (800957c <vTaskDelay+0x64>)
 8009560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009564:	601a      	str	r2, [r3, #0]
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800956e:	bf00      	nop
 8009570:	3710      	adds	r7, #16
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	20000308 	.word	0x20000308
 800957c:	e000ed04 	.word	0xe000ed04

08009580 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b08a      	sub	sp, #40	; 0x28
 8009584:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009586:	2300      	movs	r3, #0
 8009588:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800958a:	2300      	movs	r3, #0
 800958c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800958e:	463a      	mov	r2, r7
 8009590:	1d39      	adds	r1, r7, #4
 8009592:	f107 0308 	add.w	r3, r7, #8
 8009596:	4618      	mov	r0, r3
 8009598:	f001 ff6a 	bl	800b470 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	9202      	str	r2, [sp, #8]
 80095a4:	9301      	str	r3, [sp, #4]
 80095a6:	2300      	movs	r3, #0
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	2300      	movs	r3, #0
 80095ac:	460a      	mov	r2, r1
 80095ae:	491d      	ldr	r1, [pc, #116]	; (8009624 <vTaskStartScheduler+0xa4>)
 80095b0:	481d      	ldr	r0, [pc, #116]	; (8009628 <vTaskStartScheduler+0xa8>)
 80095b2:	f7ff fe2b 	bl	800920c <xTaskCreateStatic>
 80095b6:	4602      	mov	r2, r0
 80095b8:	4b1c      	ldr	r3, [pc, #112]	; (800962c <vTaskStartScheduler+0xac>)
 80095ba:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80095bc:	4b1b      	ldr	r3, [pc, #108]	; (800962c <vTaskStartScheduler+0xac>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d002      	beq.n	80095ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80095c4:	2301      	movs	r3, #1
 80095c6:	617b      	str	r3, [r7, #20]
 80095c8:	e001      	b.n	80095ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80095ca:	2300      	movs	r3, #0
 80095cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d115      	bne.n	8009600 <vTaskStartScheduler+0x80>
 80095d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d8:	f383 8811 	msr	BASEPRI, r3
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095e6:	4b12      	ldr	r3, [pc, #72]	; (8009630 <vTaskStartScheduler+0xb0>)
 80095e8:	f04f 32ff 	mov.w	r2, #4294967295
 80095ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095ee:	4b11      	ldr	r3, [pc, #68]	; (8009634 <vTaskStartScheduler+0xb4>)
 80095f0:	2201      	movs	r2, #1
 80095f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80095f4:	4b10      	ldr	r3, [pc, #64]	; (8009638 <vTaskStartScheduler+0xb8>)
 80095f6:	2200      	movs	r2, #0
 80095f8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095fa:	f000 fd51 	bl	800a0a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095fe:	e00d      	b.n	800961c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009606:	d109      	bne.n	800961c <vTaskStartScheduler+0x9c>
 8009608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960c:	f383 8811 	msr	BASEPRI, r3
 8009610:	f3bf 8f6f 	isb	sy
 8009614:	f3bf 8f4f 	dsb	sy
 8009618:	60fb      	str	r3, [r7, #12]
 800961a:	e7fe      	b.n	800961a <vTaskStartScheduler+0x9a>
}
 800961c:	bf00      	nop
 800961e:	3718      	adds	r7, #24
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	0800f5dc 	.word	0x0800f5dc
 8009628:	08009bcd 	.word	0x08009bcd
 800962c:	20000304 	.word	0x20000304
 8009630:	20000300 	.word	0x20000300
 8009634:	200002ec 	.word	0x200002ec
 8009638:	200002e4 	.word	0x200002e4

0800963c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800963c:	b480      	push	{r7}
 800963e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009640:	4b04      	ldr	r3, [pc, #16]	; (8009654 <vTaskSuspendAll+0x18>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3301      	adds	r3, #1
 8009646:	4a03      	ldr	r2, [pc, #12]	; (8009654 <vTaskSuspendAll+0x18>)
 8009648:	6013      	str	r3, [r2, #0]
}
 800964a:	bf00      	nop
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	20000308 	.word	0x20000308

08009658 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800965e:	2300      	movs	r3, #0
 8009660:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009662:	2300      	movs	r3, #0
 8009664:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009666:	4b41      	ldr	r3, [pc, #260]	; (800976c <xTaskResumeAll+0x114>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d109      	bne.n	8009682 <xTaskResumeAll+0x2a>
 800966e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	603b      	str	r3, [r7, #0]
 8009680:	e7fe      	b.n	8009680 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009682:	f000 fdab 	bl	800a1dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009686:	4b39      	ldr	r3, [pc, #228]	; (800976c <xTaskResumeAll+0x114>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3b01      	subs	r3, #1
 800968c:	4a37      	ldr	r2, [pc, #220]	; (800976c <xTaskResumeAll+0x114>)
 800968e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009690:	4b36      	ldr	r3, [pc, #216]	; (800976c <xTaskResumeAll+0x114>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d161      	bne.n	800975c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009698:	4b35      	ldr	r3, [pc, #212]	; (8009770 <xTaskResumeAll+0x118>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d05d      	beq.n	800975c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096a0:	e02e      	b.n	8009700 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80096a2:	4b34      	ldr	r3, [pc, #208]	; (8009774 <xTaskResumeAll+0x11c>)
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3318      	adds	r3, #24
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7ff fa2f 	bl	8008b12 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	3304      	adds	r3, #4
 80096b8:	4618      	mov	r0, r3
 80096ba:	f7ff fa2a 	bl	8008b12 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c2:	2201      	movs	r2, #1
 80096c4:	409a      	lsls	r2, r3
 80096c6:	4b2c      	ldr	r3, [pc, #176]	; (8009778 <xTaskResumeAll+0x120>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	4a2a      	ldr	r2, [pc, #168]	; (8009778 <xTaskResumeAll+0x120>)
 80096ce:	6013      	str	r3, [r2, #0]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d4:	4613      	mov	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	4413      	add	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	4a27      	ldr	r2, [pc, #156]	; (800977c <xTaskResumeAll+0x124>)
 80096de:	441a      	add	r2, r3
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	3304      	adds	r3, #4
 80096e4:	4619      	mov	r1, r3
 80096e6:	4610      	mov	r0, r2
 80096e8:	f7ff f9b6 	bl	8008a58 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096f0:	4b23      	ldr	r3, [pc, #140]	; (8009780 <xTaskResumeAll+0x128>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d302      	bcc.n	8009700 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80096fa:	4b22      	ldr	r3, [pc, #136]	; (8009784 <xTaskResumeAll+0x12c>)
 80096fc:	2201      	movs	r2, #1
 80096fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009700:	4b1c      	ldr	r3, [pc, #112]	; (8009774 <xTaskResumeAll+0x11c>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1cc      	bne.n	80096a2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800970e:	f000 fb0f 	bl	8009d30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009712:	4b1d      	ldr	r3, [pc, #116]	; (8009788 <xTaskResumeAll+0x130>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d010      	beq.n	8009740 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800971e:	f000 f837 	bl	8009790 <xTaskIncrementTick>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d002      	beq.n	800972e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8009728:	4b16      	ldr	r3, [pc, #88]	; (8009784 <xTaskResumeAll+0x12c>)
 800972a:	2201      	movs	r2, #1
 800972c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	3b01      	subs	r3, #1
 8009732:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1f1      	bne.n	800971e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800973a:	4b13      	ldr	r3, [pc, #76]	; (8009788 <xTaskResumeAll+0x130>)
 800973c:	2200      	movs	r2, #0
 800973e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009740:	4b10      	ldr	r3, [pc, #64]	; (8009784 <xTaskResumeAll+0x12c>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d009      	beq.n	800975c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009748:	2301      	movs	r3, #1
 800974a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800974c:	4b0f      	ldr	r3, [pc, #60]	; (800978c <xTaskResumeAll+0x134>)
 800974e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800975c:	f000 fd6c 	bl	800a238 <vPortExitCritical>

	return xAlreadyYielded;
 8009760:	68bb      	ldr	r3, [r7, #8]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20000308 	.word	0x20000308
 8009770:	200002e0 	.word	0x200002e0
 8009774:	200002a0 	.word	0x200002a0
 8009778:	200002e8 	.word	0x200002e8
 800977c:	200001e4 	.word	0x200001e4
 8009780:	200001e0 	.word	0x200001e0
 8009784:	200002f4 	.word	0x200002f4
 8009788:	200002f0 	.word	0x200002f0
 800978c:	e000ed04 	.word	0xe000ed04

08009790 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009796:	2300      	movs	r3, #0
 8009798:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800979a:	4b50      	ldr	r3, [pc, #320]	; (80098dc <xTaskIncrementTick+0x14c>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f040 808c 	bne.w	80098bc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80097a4:	4b4e      	ldr	r3, [pc, #312]	; (80098e0 <xTaskIncrementTick+0x150>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3301      	adds	r3, #1
 80097aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097ac:	4a4c      	ldr	r2, [pc, #304]	; (80098e0 <xTaskIncrementTick+0x150>)
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d11f      	bne.n	80097f8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80097b8:	4b4a      	ldr	r3, [pc, #296]	; (80098e4 <xTaskIncrementTick+0x154>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d009      	beq.n	80097d6 <xTaskIncrementTick+0x46>
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	603b      	str	r3, [r7, #0]
 80097d4:	e7fe      	b.n	80097d4 <xTaskIncrementTick+0x44>
 80097d6:	4b43      	ldr	r3, [pc, #268]	; (80098e4 <xTaskIncrementTick+0x154>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	60fb      	str	r3, [r7, #12]
 80097dc:	4b42      	ldr	r3, [pc, #264]	; (80098e8 <xTaskIncrementTick+0x158>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a40      	ldr	r2, [pc, #256]	; (80098e4 <xTaskIncrementTick+0x154>)
 80097e2:	6013      	str	r3, [r2, #0]
 80097e4:	4a40      	ldr	r2, [pc, #256]	; (80098e8 <xTaskIncrementTick+0x158>)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6013      	str	r3, [r2, #0]
 80097ea:	4b40      	ldr	r3, [pc, #256]	; (80098ec <xTaskIncrementTick+0x15c>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	3301      	adds	r3, #1
 80097f0:	4a3e      	ldr	r2, [pc, #248]	; (80098ec <xTaskIncrementTick+0x15c>)
 80097f2:	6013      	str	r3, [r2, #0]
 80097f4:	f000 fa9c 	bl	8009d30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097f8:	4b3d      	ldr	r3, [pc, #244]	; (80098f0 <xTaskIncrementTick+0x160>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d34d      	bcc.n	800989e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009802:	4b38      	ldr	r3, [pc, #224]	; (80098e4 <xTaskIncrementTick+0x154>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d101      	bne.n	8009810 <xTaskIncrementTick+0x80>
 800980c:	2301      	movs	r3, #1
 800980e:	e000      	b.n	8009812 <xTaskIncrementTick+0x82>
 8009810:	2300      	movs	r3, #0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d004      	beq.n	8009820 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009816:	4b36      	ldr	r3, [pc, #216]	; (80098f0 <xTaskIncrementTick+0x160>)
 8009818:	f04f 32ff 	mov.w	r2, #4294967295
 800981c:	601a      	str	r2, [r3, #0]
					break;
 800981e:	e03e      	b.n	800989e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009820:	4b30      	ldr	r3, [pc, #192]	; (80098e4 <xTaskIncrementTick+0x154>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	429a      	cmp	r2, r3
 8009836:	d203      	bcs.n	8009840 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009838:	4a2d      	ldr	r2, [pc, #180]	; (80098f0 <xTaskIncrementTick+0x160>)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6013      	str	r3, [r2, #0]
						break;
 800983e:	e02e      	b.n	800989e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	3304      	adds	r3, #4
 8009844:	4618      	mov	r0, r3
 8009846:	f7ff f964 	bl	8008b12 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800984e:	2b00      	cmp	r3, #0
 8009850:	d004      	beq.n	800985c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	3318      	adds	r3, #24
 8009856:	4618      	mov	r0, r3
 8009858:	f7ff f95b 	bl	8008b12 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009860:	2201      	movs	r2, #1
 8009862:	409a      	lsls	r2, r3
 8009864:	4b23      	ldr	r3, [pc, #140]	; (80098f4 <xTaskIncrementTick+0x164>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4313      	orrs	r3, r2
 800986a:	4a22      	ldr	r2, [pc, #136]	; (80098f4 <xTaskIncrementTick+0x164>)
 800986c:	6013      	str	r3, [r2, #0]
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009872:	4613      	mov	r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	4413      	add	r3, r2
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4a1f      	ldr	r2, [pc, #124]	; (80098f8 <xTaskIncrementTick+0x168>)
 800987c:	441a      	add	r2, r3
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	3304      	adds	r3, #4
 8009882:	4619      	mov	r1, r3
 8009884:	4610      	mov	r0, r2
 8009886:	f7ff f8e7 	bl	8008a58 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800988e:	4b1b      	ldr	r3, [pc, #108]	; (80098fc <xTaskIncrementTick+0x16c>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009894:	429a      	cmp	r2, r3
 8009896:	d3b4      	bcc.n	8009802 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009898:	2301      	movs	r3, #1
 800989a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800989c:	e7b1      	b.n	8009802 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800989e:	4b17      	ldr	r3, [pc, #92]	; (80098fc <xTaskIncrementTick+0x16c>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a4:	4914      	ldr	r1, [pc, #80]	; (80098f8 <xTaskIncrementTick+0x168>)
 80098a6:	4613      	mov	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	440b      	add	r3, r1
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d907      	bls.n	80098c6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80098b6:	2301      	movs	r3, #1
 80098b8:	617b      	str	r3, [r7, #20]
 80098ba:	e004      	b.n	80098c6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80098bc:	4b10      	ldr	r3, [pc, #64]	; (8009900 <xTaskIncrementTick+0x170>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3301      	adds	r3, #1
 80098c2:	4a0f      	ldr	r2, [pc, #60]	; (8009900 <xTaskIncrementTick+0x170>)
 80098c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80098c6:	4b0f      	ldr	r3, [pc, #60]	; (8009904 <xTaskIncrementTick+0x174>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d001      	beq.n	80098d2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80098ce:	2301      	movs	r3, #1
 80098d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80098d2:	697b      	ldr	r3, [r7, #20]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3718      	adds	r7, #24
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	20000308 	.word	0x20000308
 80098e0:	200002e4 	.word	0x200002e4
 80098e4:	20000298 	.word	0x20000298
 80098e8:	2000029c 	.word	0x2000029c
 80098ec:	200002f8 	.word	0x200002f8
 80098f0:	20000300 	.word	0x20000300
 80098f4:	200002e8 	.word	0x200002e8
 80098f8:	200001e4 	.word	0x200001e4
 80098fc:	200001e0 	.word	0x200001e0
 8009900:	200002f0 	.word	0x200002f0
 8009904:	200002f4 	.word	0x200002f4

08009908 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009908:	b480      	push	{r7}
 800990a:	b087      	sub	sp, #28
 800990c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800990e:	4b26      	ldr	r3, [pc, #152]	; (80099a8 <vTaskSwitchContext+0xa0>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d003      	beq.n	800991e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009916:	4b25      	ldr	r3, [pc, #148]	; (80099ac <vTaskSwitchContext+0xa4>)
 8009918:	2201      	movs	r2, #1
 800991a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800991c:	e03e      	b.n	800999c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800991e:	4b23      	ldr	r3, [pc, #140]	; (80099ac <vTaskSwitchContext+0xa4>)
 8009920:	2200      	movs	r2, #0
 8009922:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009924:	4b22      	ldr	r3, [pc, #136]	; (80099b0 <vTaskSwitchContext+0xa8>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	fab3 f383 	clz	r3, r3
 8009930:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009932:	7afb      	ldrb	r3, [r7, #11]
 8009934:	f1c3 031f 	rsb	r3, r3, #31
 8009938:	617b      	str	r3, [r7, #20]
 800993a:	491e      	ldr	r1, [pc, #120]	; (80099b4 <vTaskSwitchContext+0xac>)
 800993c:	697a      	ldr	r2, [r7, #20]
 800993e:	4613      	mov	r3, r2
 8009940:	009b      	lsls	r3, r3, #2
 8009942:	4413      	add	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	440b      	add	r3, r1
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d109      	bne.n	8009962 <vTaskSwitchContext+0x5a>
	__asm volatile
 800994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	607b      	str	r3, [r7, #4]
 8009960:	e7fe      	b.n	8009960 <vTaskSwitchContext+0x58>
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	4613      	mov	r3, r2
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	4413      	add	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4a11      	ldr	r2, [pc, #68]	; (80099b4 <vTaskSwitchContext+0xac>)
 800996e:	4413      	add	r3, r2
 8009970:	613b      	str	r3, [r7, #16]
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	685a      	ldr	r2, [r3, #4]
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	605a      	str	r2, [r3, #4]
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	685a      	ldr	r2, [r3, #4]
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	3308      	adds	r3, #8
 8009984:	429a      	cmp	r2, r3
 8009986:	d104      	bne.n	8009992 <vTaskSwitchContext+0x8a>
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	685a      	ldr	r2, [r3, #4]
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	605a      	str	r2, [r3, #4]
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	4a07      	ldr	r2, [pc, #28]	; (80099b8 <vTaskSwitchContext+0xb0>)
 800999a:	6013      	str	r3, [r2, #0]
}
 800999c:	bf00      	nop
 800999e:	371c      	adds	r7, #28
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr
 80099a8:	20000308 	.word	0x20000308
 80099ac:	200002f4 	.word	0x200002f4
 80099b0:	200002e8 	.word	0x200002e8
 80099b4:	200001e4 	.word	0x200001e4
 80099b8:	200001e0 	.word	0x200001e0

080099bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d109      	bne.n	80099e0 <vTaskPlaceOnEventList+0x24>
 80099cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d0:	f383 8811 	msr	BASEPRI, r3
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	60fb      	str	r3, [r7, #12]
 80099de:	e7fe      	b.n	80099de <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099e0:	4b07      	ldr	r3, [pc, #28]	; (8009a00 <vTaskPlaceOnEventList+0x44>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	3318      	adds	r3, #24
 80099e6:	4619      	mov	r1, r3
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f7ff f859 	bl	8008aa0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099ee:	2101      	movs	r1, #1
 80099f0:	6838      	ldr	r0, [r7, #0]
 80099f2:	f000 fa65 	bl	8009ec0 <prvAddCurrentTaskToDelayedList>
}
 80099f6:	bf00      	nop
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	200001e0 	.word	0x200001e0

08009a04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d109      	bne.n	8009a2e <xTaskRemoveFromEventList+0x2a>
 8009a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1e:	f383 8811 	msr	BASEPRI, r3
 8009a22:	f3bf 8f6f 	isb	sy
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	60fb      	str	r3, [r7, #12]
 8009a2c:	e7fe      	b.n	8009a2c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	3318      	adds	r3, #24
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7ff f86d 	bl	8008b12 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a38:	4b1d      	ldr	r3, [pc, #116]	; (8009ab0 <xTaskRemoveFromEventList+0xac>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d11c      	bne.n	8009a7a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	3304      	adds	r3, #4
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7ff f864 	bl	8008b12 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4e:	2201      	movs	r2, #1
 8009a50:	409a      	lsls	r2, r3
 8009a52:	4b18      	ldr	r3, [pc, #96]	; (8009ab4 <xTaskRemoveFromEventList+0xb0>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	4a16      	ldr	r2, [pc, #88]	; (8009ab4 <xTaskRemoveFromEventList+0xb0>)
 8009a5a:	6013      	str	r3, [r2, #0]
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a60:	4613      	mov	r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4413      	add	r3, r2
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4a13      	ldr	r2, [pc, #76]	; (8009ab8 <xTaskRemoveFromEventList+0xb4>)
 8009a6a:	441a      	add	r2, r3
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	3304      	adds	r3, #4
 8009a70:	4619      	mov	r1, r3
 8009a72:	4610      	mov	r0, r2
 8009a74:	f7fe fff0 	bl	8008a58 <vListInsertEnd>
 8009a78:	e005      	b.n	8009a86 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	3318      	adds	r3, #24
 8009a7e:	4619      	mov	r1, r3
 8009a80:	480e      	ldr	r0, [pc, #56]	; (8009abc <xTaskRemoveFromEventList+0xb8>)
 8009a82:	f7fe ffe9 	bl	8008a58 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a8a:	4b0d      	ldr	r3, [pc, #52]	; (8009ac0 <xTaskRemoveFromEventList+0xbc>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d905      	bls.n	8009aa0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009a94:	2301      	movs	r3, #1
 8009a96:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009a98:	4b0a      	ldr	r3, [pc, #40]	; (8009ac4 <xTaskRemoveFromEventList+0xc0>)
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	e001      	b.n	8009aa4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009aa4:	697b      	ldr	r3, [r7, #20]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3718      	adds	r7, #24
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	20000308 	.word	0x20000308
 8009ab4:	200002e8 	.word	0x200002e8
 8009ab8:	200001e4 	.word	0x200001e4
 8009abc:	200002a0 	.word	0x200002a0
 8009ac0:	200001e0 	.word	0x200001e0
 8009ac4:	200002f4 	.word	0x200002f4

08009ac8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ad0:	4b06      	ldr	r3, [pc, #24]	; (8009aec <vTaskInternalSetTimeOutState+0x24>)
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ad8:	4b05      	ldr	r3, [pc, #20]	; (8009af0 <vTaskInternalSetTimeOutState+0x28>)
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	605a      	str	r2, [r3, #4]
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr
 8009aec:	200002f8 	.word	0x200002f8
 8009af0:	200002e4 	.word	0x200002e4

08009af4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b088      	sub	sp, #32
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d109      	bne.n	8009b18 <xTaskCheckForTimeOut+0x24>
 8009b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	613b      	str	r3, [r7, #16]
 8009b16:	e7fe      	b.n	8009b16 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d109      	bne.n	8009b32 <xTaskCheckForTimeOut+0x3e>
 8009b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	60fb      	str	r3, [r7, #12]
 8009b30:	e7fe      	b.n	8009b30 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009b32:	f000 fb53 	bl	800a1dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b36:	4b1d      	ldr	r3, [pc, #116]	; (8009bac <xTaskCheckForTimeOut+0xb8>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	69ba      	ldr	r2, [r7, #24]
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4e:	d102      	bne.n	8009b56 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b50:	2300      	movs	r3, #0
 8009b52:	61fb      	str	r3, [r7, #28]
 8009b54:	e023      	b.n	8009b9e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	4b15      	ldr	r3, [pc, #84]	; (8009bb0 <xTaskCheckForTimeOut+0xbc>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d007      	beq.n	8009b72 <xTaskCheckForTimeOut+0x7e>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	69ba      	ldr	r2, [r7, #24]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d302      	bcc.n	8009b72 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	61fb      	str	r3, [r7, #28]
 8009b70:	e015      	b.n	8009b9e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d20b      	bcs.n	8009b94 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	1ad2      	subs	r2, r2, r3
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f7ff ff9d 	bl	8009ac8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	61fb      	str	r3, [r7, #28]
 8009b92:	e004      	b.n	8009b9e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	2200      	movs	r2, #0
 8009b98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009b9e:	f000 fb4b 	bl	800a238 <vPortExitCritical>

	return xReturn;
 8009ba2:	69fb      	ldr	r3, [r7, #28]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3720      	adds	r7, #32
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	200002e4 	.word	0x200002e4
 8009bb0:	200002f8 	.word	0x200002f8

08009bb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009bb8:	4b03      	ldr	r3, [pc, #12]	; (8009bc8 <vTaskMissedYield+0x14>)
 8009bba:	2201      	movs	r2, #1
 8009bbc:	601a      	str	r2, [r3, #0]
}
 8009bbe:	bf00      	nop
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr
 8009bc8:	200002f4 	.word	0x200002f4

08009bcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009bd4:	f000 f852 	bl	8009c7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009bd8:	4b06      	ldr	r3, [pc, #24]	; (8009bf4 <prvIdleTask+0x28>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d9f9      	bls.n	8009bd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009be0:	4b05      	ldr	r3, [pc, #20]	; (8009bf8 <prvIdleTask+0x2c>)
 8009be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009be6:	601a      	str	r2, [r3, #0]
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009bf0:	e7f0      	b.n	8009bd4 <prvIdleTask+0x8>
 8009bf2:	bf00      	nop
 8009bf4:	200001e4 	.word	0x200001e4
 8009bf8:	e000ed04 	.word	0xe000ed04

08009bfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c02:	2300      	movs	r3, #0
 8009c04:	607b      	str	r3, [r7, #4]
 8009c06:	e00c      	b.n	8009c22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4a12      	ldr	r2, [pc, #72]	; (8009c5c <prvInitialiseTaskLists+0x60>)
 8009c14:	4413      	add	r3, r2
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7fe fef1 	bl	80089fe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	607b      	str	r3, [r7, #4]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2b06      	cmp	r3, #6
 8009c26:	d9ef      	bls.n	8009c08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c28:	480d      	ldr	r0, [pc, #52]	; (8009c60 <prvInitialiseTaskLists+0x64>)
 8009c2a:	f7fe fee8 	bl	80089fe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c2e:	480d      	ldr	r0, [pc, #52]	; (8009c64 <prvInitialiseTaskLists+0x68>)
 8009c30:	f7fe fee5 	bl	80089fe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c34:	480c      	ldr	r0, [pc, #48]	; (8009c68 <prvInitialiseTaskLists+0x6c>)
 8009c36:	f7fe fee2 	bl	80089fe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c3a:	480c      	ldr	r0, [pc, #48]	; (8009c6c <prvInitialiseTaskLists+0x70>)
 8009c3c:	f7fe fedf 	bl	80089fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c40:	480b      	ldr	r0, [pc, #44]	; (8009c70 <prvInitialiseTaskLists+0x74>)
 8009c42:	f7fe fedc 	bl	80089fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c46:	4b0b      	ldr	r3, [pc, #44]	; (8009c74 <prvInitialiseTaskLists+0x78>)
 8009c48:	4a05      	ldr	r2, [pc, #20]	; (8009c60 <prvInitialiseTaskLists+0x64>)
 8009c4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c4c:	4b0a      	ldr	r3, [pc, #40]	; (8009c78 <prvInitialiseTaskLists+0x7c>)
 8009c4e:	4a05      	ldr	r2, [pc, #20]	; (8009c64 <prvInitialiseTaskLists+0x68>)
 8009c50:	601a      	str	r2, [r3, #0]
}
 8009c52:	bf00      	nop
 8009c54:	3708      	adds	r7, #8
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	200001e4 	.word	0x200001e4
 8009c60:	20000270 	.word	0x20000270
 8009c64:	20000284 	.word	0x20000284
 8009c68:	200002a0 	.word	0x200002a0
 8009c6c:	200002b4 	.word	0x200002b4
 8009c70:	200002cc 	.word	0x200002cc
 8009c74:	20000298 	.word	0x20000298
 8009c78:	2000029c 	.word	0x2000029c

08009c7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c82:	e019      	b.n	8009cb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c84:	f000 faaa 	bl	800a1dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009c88:	4b0f      	ldr	r3, [pc, #60]	; (8009cc8 <prvCheckTasksWaitingTermination+0x4c>)
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	3304      	adds	r3, #4
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7fe ff3c 	bl	8008b12 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c9a:	4b0c      	ldr	r3, [pc, #48]	; (8009ccc <prvCheckTasksWaitingTermination+0x50>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	4a0a      	ldr	r2, [pc, #40]	; (8009ccc <prvCheckTasksWaitingTermination+0x50>)
 8009ca2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ca4:	4b0a      	ldr	r3, [pc, #40]	; (8009cd0 <prvCheckTasksWaitingTermination+0x54>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	4a09      	ldr	r2, [pc, #36]	; (8009cd0 <prvCheckTasksWaitingTermination+0x54>)
 8009cac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009cae:	f000 fac3 	bl	800a238 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f80e 	bl	8009cd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cb8:	4b05      	ldr	r3, [pc, #20]	; (8009cd0 <prvCheckTasksWaitingTermination+0x54>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1e1      	bne.n	8009c84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	200002b4 	.word	0x200002b4
 8009ccc:	200002e0 	.word	0x200002e0
 8009cd0:	200002c8 	.word	0x200002c8

08009cd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d108      	bne.n	8009cf8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cea:	4618      	mov	r0, r3
 8009cec:	f000 fc14 	bl	800a518 <vPortFree>
				vPortFree( pxTCB );
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fc11 	bl	800a518 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009cf6:	e017      	b.n	8009d28 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d103      	bne.n	8009d0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fc08 	bl	800a518 <vPortFree>
	}
 8009d08:	e00e      	b.n	8009d28 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d009      	beq.n	8009d28 <prvDeleteTCB+0x54>
 8009d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	60fb      	str	r3, [r7, #12]
 8009d26:	e7fe      	b.n	8009d26 <prvDeleteTCB+0x52>
	}
 8009d28:	bf00      	nop
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d36:	4b0f      	ldr	r3, [pc, #60]	; (8009d74 <prvResetNextTaskUnblockTime+0x44>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d101      	bne.n	8009d44 <prvResetNextTaskUnblockTime+0x14>
 8009d40:	2301      	movs	r3, #1
 8009d42:	e000      	b.n	8009d46 <prvResetNextTaskUnblockTime+0x16>
 8009d44:	2300      	movs	r3, #0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d004      	beq.n	8009d54 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d4a:	4b0b      	ldr	r3, [pc, #44]	; (8009d78 <prvResetNextTaskUnblockTime+0x48>)
 8009d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d50:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d52:	e008      	b.n	8009d66 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009d54:	4b07      	ldr	r3, [pc, #28]	; (8009d74 <prvResetNextTaskUnblockTime+0x44>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	4a05      	ldr	r2, [pc, #20]	; (8009d78 <prvResetNextTaskUnblockTime+0x48>)
 8009d64:	6013      	str	r3, [r2, #0]
}
 8009d66:	bf00      	nop
 8009d68:	370c      	adds	r7, #12
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	20000298 	.word	0x20000298
 8009d78:	20000300 	.word	0x20000300

08009d7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d82:	4b0b      	ldr	r3, [pc, #44]	; (8009db0 <xTaskGetSchedulerState+0x34>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d102      	bne.n	8009d90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	607b      	str	r3, [r7, #4]
 8009d8e:	e008      	b.n	8009da2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d90:	4b08      	ldr	r3, [pc, #32]	; (8009db4 <xTaskGetSchedulerState+0x38>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d102      	bne.n	8009d9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d98:	2302      	movs	r3, #2
 8009d9a:	607b      	str	r3, [r7, #4]
 8009d9c:	e001      	b.n	8009da2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009da2:	687b      	ldr	r3, [r7, #4]
	}
 8009da4:	4618      	mov	r0, r3
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	200002ec 	.word	0x200002ec
 8009db4:	20000308 	.word	0x20000308

08009db8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d06c      	beq.n	8009ea8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009dce:	4b39      	ldr	r3, [pc, #228]	; (8009eb4 <xTaskPriorityDisinherit+0xfc>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	693a      	ldr	r2, [r7, #16]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d009      	beq.n	8009dec <xTaskPriorityDisinherit+0x34>
 8009dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	60fb      	str	r3, [r7, #12]
 8009dea:	e7fe      	b.n	8009dea <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d109      	bne.n	8009e08 <xTaskPriorityDisinherit+0x50>
 8009df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df8:	f383 8811 	msr	BASEPRI, r3
 8009dfc:	f3bf 8f6f 	isb	sy
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	60bb      	str	r3, [r7, #8]
 8009e06:	e7fe      	b.n	8009e06 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e0c:	1e5a      	subs	r2, r3, #1
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d044      	beq.n	8009ea8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d140      	bne.n	8009ea8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	3304      	adds	r3, #4
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fe fe71 	bl	8008b12 <uxListRemove>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d115      	bne.n	8009e62 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e3a:	491f      	ldr	r1, [pc, #124]	; (8009eb8 <xTaskPriorityDisinherit+0x100>)
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	4413      	add	r3, r2
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	440b      	add	r3, r1
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d10a      	bne.n	8009e62 <xTaskPriorityDisinherit+0xaa>
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e50:	2201      	movs	r2, #1
 8009e52:	fa02 f303 	lsl.w	r3, r2, r3
 8009e56:	43da      	mvns	r2, r3
 8009e58:	4b18      	ldr	r3, [pc, #96]	; (8009ebc <xTaskPriorityDisinherit+0x104>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	4a17      	ldr	r2, [pc, #92]	; (8009ebc <xTaskPriorityDisinherit+0x104>)
 8009e60:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e6e:	f1c3 0207 	rsb	r2, r3, #7
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	409a      	lsls	r2, r3
 8009e7e:	4b0f      	ldr	r3, [pc, #60]	; (8009ebc <xTaskPriorityDisinherit+0x104>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	4a0d      	ldr	r2, [pc, #52]	; (8009ebc <xTaskPriorityDisinherit+0x104>)
 8009e86:	6013      	str	r3, [r2, #0]
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	4a08      	ldr	r2, [pc, #32]	; (8009eb8 <xTaskPriorityDisinherit+0x100>)
 8009e96:	441a      	add	r2, r3
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	3304      	adds	r3, #4
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	4610      	mov	r0, r2
 8009ea0:	f7fe fdda 	bl	8008a58 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ea8:	697b      	ldr	r3, [r7, #20]
	}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3718      	adds	r7, #24
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	200001e0 	.word	0x200001e0
 8009eb8:	200001e4 	.word	0x200001e4
 8009ebc:	200002e8 	.word	0x200002e8

08009ec0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009eca:	4b29      	ldr	r3, [pc, #164]	; (8009f70 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ed0:	4b28      	ldr	r3, [pc, #160]	; (8009f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fe fe1b 	bl	8008b12 <uxListRemove>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10b      	bne.n	8009efa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009ee2:	4b24      	ldr	r3, [pc, #144]	; (8009f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee8:	2201      	movs	r2, #1
 8009eea:	fa02 f303 	lsl.w	r3, r2, r3
 8009eee:	43da      	mvns	r2, r3
 8009ef0:	4b21      	ldr	r3, [pc, #132]	; (8009f78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	4a20      	ldr	r2, [pc, #128]	; (8009f78 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ef8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f00:	d10a      	bne.n	8009f18 <prvAddCurrentTaskToDelayedList+0x58>
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d007      	beq.n	8009f18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f08:	4b1a      	ldr	r3, [pc, #104]	; (8009f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	3304      	adds	r3, #4
 8009f0e:	4619      	mov	r1, r3
 8009f10:	481a      	ldr	r0, [pc, #104]	; (8009f7c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009f12:	f7fe fda1 	bl	8008a58 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f16:	e026      	b.n	8009f66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f20:	4b14      	ldr	r3, [pc, #80]	; (8009f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68ba      	ldr	r2, [r7, #8]
 8009f26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d209      	bcs.n	8009f44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f30:	4b13      	ldr	r3, [pc, #76]	; (8009f80 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	4b0f      	ldr	r3, [pc, #60]	; (8009f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	3304      	adds	r3, #4
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	f7fe fdaf 	bl	8008aa0 <vListInsert>
}
 8009f42:	e010      	b.n	8009f66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f44:	4b0f      	ldr	r3, [pc, #60]	; (8009f84 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	4b0a      	ldr	r3, [pc, #40]	; (8009f74 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	3304      	adds	r3, #4
 8009f4e:	4619      	mov	r1, r3
 8009f50:	4610      	mov	r0, r2
 8009f52:	f7fe fda5 	bl	8008aa0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f56:	4b0c      	ldr	r3, [pc, #48]	; (8009f88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d202      	bcs.n	8009f66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009f60:	4a09      	ldr	r2, [pc, #36]	; (8009f88 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	6013      	str	r3, [r2, #0]
}
 8009f66:	bf00      	nop
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	200002e4 	.word	0x200002e4
 8009f74:	200001e0 	.word	0x200001e0
 8009f78:	200002e8 	.word	0x200002e8
 8009f7c:	200002cc 	.word	0x200002cc
 8009f80:	2000029c 	.word	0x2000029c
 8009f84:	20000298 	.word	0x20000298
 8009f88:	20000300 	.word	0x20000300

08009f8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	3b04      	subs	r3, #4
 8009f9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009fa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	3b04      	subs	r3, #4
 8009faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	f023 0201 	bic.w	r2, r3, #1
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	3b04      	subs	r3, #4
 8009fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009fbc:	4a0c      	ldr	r2, [pc, #48]	; (8009ff0 <pxPortInitialiseStack+0x64>)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	3b14      	subs	r3, #20
 8009fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	3b04      	subs	r3, #4
 8009fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f06f 0202 	mvn.w	r2, #2
 8009fda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	3b20      	subs	r3, #32
 8009fe0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3714      	adds	r7, #20
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr
 8009ff0:	08009ff5 	.word	0x08009ff5

08009ff4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ffe:	4b11      	ldr	r3, [pc, #68]	; (800a044 <prvTaskExitError+0x50>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a006:	d009      	beq.n	800a01c <prvTaskExitError+0x28>
 800a008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00c:	f383 8811 	msr	BASEPRI, r3
 800a010:	f3bf 8f6f 	isb	sy
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	60fb      	str	r3, [r7, #12]
 800a01a:	e7fe      	b.n	800a01a <prvTaskExitError+0x26>
 800a01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a02e:	bf00      	nop
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d0fc      	beq.n	800a030 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a036:	bf00      	nop
 800a038:	3714      	adds	r7, #20
 800a03a:	46bd      	mov	sp, r7
 800a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	2000005c 	.word	0x2000005c
	...

0800a050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a050:	4b07      	ldr	r3, [pc, #28]	; (800a070 <pxCurrentTCBConst2>)
 800a052:	6819      	ldr	r1, [r3, #0]
 800a054:	6808      	ldr	r0, [r1, #0]
 800a056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05a:	f380 8809 	msr	PSP, r0
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f04f 0000 	mov.w	r0, #0
 800a066:	f380 8811 	msr	BASEPRI, r0
 800a06a:	4770      	bx	lr
 800a06c:	f3af 8000 	nop.w

0800a070 <pxCurrentTCBConst2>:
 800a070:	200001e0 	.word	0x200001e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a074:	bf00      	nop
 800a076:	bf00      	nop

0800a078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a078:	4808      	ldr	r0, [pc, #32]	; (800a09c <prvPortStartFirstTask+0x24>)
 800a07a:	6800      	ldr	r0, [r0, #0]
 800a07c:	6800      	ldr	r0, [r0, #0]
 800a07e:	f380 8808 	msr	MSP, r0
 800a082:	f04f 0000 	mov.w	r0, #0
 800a086:	f380 8814 	msr	CONTROL, r0
 800a08a:	b662      	cpsie	i
 800a08c:	b661      	cpsie	f
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	df00      	svc	0
 800a098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a09a:	bf00      	nop
 800a09c:	e000ed08 	.word	0xe000ed08

0800a0a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a0a6:	4b44      	ldr	r3, [pc, #272]	; (800a1b8 <xPortStartScheduler+0x118>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a44      	ldr	r2, [pc, #272]	; (800a1bc <xPortStartScheduler+0x11c>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d109      	bne.n	800a0c4 <xPortStartScheduler+0x24>
 800a0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b4:	f383 8811 	msr	BASEPRI, r3
 800a0b8:	f3bf 8f6f 	isb	sy
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	613b      	str	r3, [r7, #16]
 800a0c2:	e7fe      	b.n	800a0c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a0c4:	4b3c      	ldr	r3, [pc, #240]	; (800a1b8 <xPortStartScheduler+0x118>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a3d      	ldr	r2, [pc, #244]	; (800a1c0 <xPortStartScheduler+0x120>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d109      	bne.n	800a0e2 <xPortStartScheduler+0x42>
 800a0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d2:	f383 8811 	msr	BASEPRI, r3
 800a0d6:	f3bf 8f6f 	isb	sy
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	60fb      	str	r3, [r7, #12]
 800a0e0:	e7fe      	b.n	800a0e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a0e2:	4b38      	ldr	r3, [pc, #224]	; (800a1c4 <xPortStartScheduler+0x124>)
 800a0e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	22ff      	movs	r2, #255	; 0xff
 800a0f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a0fc:	78fb      	ldrb	r3, [r7, #3]
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a104:	b2da      	uxtb	r2, r3
 800a106:	4b30      	ldr	r3, [pc, #192]	; (800a1c8 <xPortStartScheduler+0x128>)
 800a108:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a10a:	4b30      	ldr	r3, [pc, #192]	; (800a1cc <xPortStartScheduler+0x12c>)
 800a10c:	2207      	movs	r2, #7
 800a10e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a110:	e009      	b.n	800a126 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a112:	4b2e      	ldr	r3, [pc, #184]	; (800a1cc <xPortStartScheduler+0x12c>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3b01      	subs	r3, #1
 800a118:	4a2c      	ldr	r2, [pc, #176]	; (800a1cc <xPortStartScheduler+0x12c>)
 800a11a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a11c:	78fb      	ldrb	r3, [r7, #3]
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	005b      	lsls	r3, r3, #1
 800a122:	b2db      	uxtb	r3, r3
 800a124:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a126:	78fb      	ldrb	r3, [r7, #3]
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a12e:	2b80      	cmp	r3, #128	; 0x80
 800a130:	d0ef      	beq.n	800a112 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a132:	4b26      	ldr	r3, [pc, #152]	; (800a1cc <xPortStartScheduler+0x12c>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f1c3 0307 	rsb	r3, r3, #7
 800a13a:	2b04      	cmp	r3, #4
 800a13c:	d009      	beq.n	800a152 <xPortStartScheduler+0xb2>
 800a13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	60bb      	str	r3, [r7, #8]
 800a150:	e7fe      	b.n	800a150 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a152:	4b1e      	ldr	r3, [pc, #120]	; (800a1cc <xPortStartScheduler+0x12c>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	021b      	lsls	r3, r3, #8
 800a158:	4a1c      	ldr	r2, [pc, #112]	; (800a1cc <xPortStartScheduler+0x12c>)
 800a15a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a15c:	4b1b      	ldr	r3, [pc, #108]	; (800a1cc <xPortStartScheduler+0x12c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a164:	4a19      	ldr	r2, [pc, #100]	; (800a1cc <xPortStartScheduler+0x12c>)
 800a166:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	b2da      	uxtb	r2, r3
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a170:	4b17      	ldr	r3, [pc, #92]	; (800a1d0 <xPortStartScheduler+0x130>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a16      	ldr	r2, [pc, #88]	; (800a1d0 <xPortStartScheduler+0x130>)
 800a176:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a17a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a17c:	4b14      	ldr	r3, [pc, #80]	; (800a1d0 <xPortStartScheduler+0x130>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a13      	ldr	r2, [pc, #76]	; (800a1d0 <xPortStartScheduler+0x130>)
 800a182:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a186:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a188:	f000 f8d6 	bl	800a338 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a18c:	4b11      	ldr	r3, [pc, #68]	; (800a1d4 <xPortStartScheduler+0x134>)
 800a18e:	2200      	movs	r2, #0
 800a190:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a192:	f000 f8f5 	bl	800a380 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a196:	4b10      	ldr	r3, [pc, #64]	; (800a1d8 <xPortStartScheduler+0x138>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a0f      	ldr	r2, [pc, #60]	; (800a1d8 <xPortStartScheduler+0x138>)
 800a19c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a1a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a1a2:	f7ff ff69 	bl	800a078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a1a6:	f7ff fbaf 	bl	8009908 <vTaskSwitchContext>
	prvTaskExitError();
 800a1aa:	f7ff ff23 	bl	8009ff4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3718      	adds	r7, #24
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	e000ed00 	.word	0xe000ed00
 800a1bc:	410fc271 	.word	0x410fc271
 800a1c0:	410fc270 	.word	0x410fc270
 800a1c4:	e000e400 	.word	0xe000e400
 800a1c8:	2000030c 	.word	0x2000030c
 800a1cc:	20000310 	.word	0x20000310
 800a1d0:	e000ed20 	.word	0xe000ed20
 800a1d4:	2000005c 	.word	0x2000005c
 800a1d8:	e000ef34 	.word	0xe000ef34

0800a1dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a1f4:	4b0e      	ldr	r3, [pc, #56]	; (800a230 <vPortEnterCritical+0x54>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	4a0d      	ldr	r2, [pc, #52]	; (800a230 <vPortEnterCritical+0x54>)
 800a1fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a1fe:	4b0c      	ldr	r3, [pc, #48]	; (800a230 <vPortEnterCritical+0x54>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d10e      	bne.n	800a224 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a206:	4b0b      	ldr	r3, [pc, #44]	; (800a234 <vPortEnterCritical+0x58>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d009      	beq.n	800a224 <vPortEnterCritical+0x48>
 800a210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a214:	f383 8811 	msr	BASEPRI, r3
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	603b      	str	r3, [r7, #0]
 800a222:	e7fe      	b.n	800a222 <vPortEnterCritical+0x46>
	}
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	2000005c 	.word	0x2000005c
 800a234:	e000ed04 	.word	0xe000ed04

0800a238 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a23e:	4b11      	ldr	r3, [pc, #68]	; (800a284 <vPortExitCritical+0x4c>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d109      	bne.n	800a25a <vPortExitCritical+0x22>
 800a246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	607b      	str	r3, [r7, #4]
 800a258:	e7fe      	b.n	800a258 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a25a:	4b0a      	ldr	r3, [pc, #40]	; (800a284 <vPortExitCritical+0x4c>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3b01      	subs	r3, #1
 800a260:	4a08      	ldr	r2, [pc, #32]	; (800a284 <vPortExitCritical+0x4c>)
 800a262:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a264:	4b07      	ldr	r3, [pc, #28]	; (800a284 <vPortExitCritical+0x4c>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d104      	bne.n	800a276 <vPortExitCritical+0x3e>
 800a26c:	2300      	movs	r3, #0
 800a26e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a276:	bf00      	nop
 800a278:	370c      	adds	r7, #12
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop
 800a284:	2000005c 	.word	0x2000005c
	...

0800a290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a290:	f3ef 8009 	mrs	r0, PSP
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	4b15      	ldr	r3, [pc, #84]	; (800a2f0 <pxCurrentTCBConst>)
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	f01e 0f10 	tst.w	lr, #16
 800a2a0:	bf08      	it	eq
 800a2a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a2a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2aa:	6010      	str	r0, [r2, #0]
 800a2ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a2b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a2b4:	f380 8811 	msr	BASEPRI, r0
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f7ff fb22 	bl	8009908 <vTaskSwitchContext>
 800a2c4:	f04f 0000 	mov.w	r0, #0
 800a2c8:	f380 8811 	msr	BASEPRI, r0
 800a2cc:	bc09      	pop	{r0, r3}
 800a2ce:	6819      	ldr	r1, [r3, #0]
 800a2d0:	6808      	ldr	r0, [r1, #0]
 800a2d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d6:	f01e 0f10 	tst.w	lr, #16
 800a2da:	bf08      	it	eq
 800a2dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a2e0:	f380 8809 	msr	PSP, r0
 800a2e4:	f3bf 8f6f 	isb	sy
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	f3af 8000 	nop.w

0800a2f0 <pxCurrentTCBConst>:
 800a2f0:	200001e0 	.word	0x200001e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2f4:	bf00      	nop
 800a2f6:	bf00      	nop

0800a2f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a310:	f7ff fa3e 	bl	8009790 <xTaskIncrementTick>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d003      	beq.n	800a322 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a31a:	4b06      	ldr	r3, [pc, #24]	; (800a334 <SysTick_Handler+0x3c>)
 800a31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a320:	601a      	str	r2, [r3, #0]
 800a322:	2300      	movs	r3, #0
 800a324:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a32c:	bf00      	nop
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	e000ed04 	.word	0xe000ed04

0800a338 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a338:	b480      	push	{r7}
 800a33a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a33c:	4b0b      	ldr	r3, [pc, #44]	; (800a36c <vPortSetupTimerInterrupt+0x34>)
 800a33e:	2200      	movs	r2, #0
 800a340:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a342:	4b0b      	ldr	r3, [pc, #44]	; (800a370 <vPortSetupTimerInterrupt+0x38>)
 800a344:	2200      	movs	r2, #0
 800a346:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a348:	4b0a      	ldr	r3, [pc, #40]	; (800a374 <vPortSetupTimerInterrupt+0x3c>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a0a      	ldr	r2, [pc, #40]	; (800a378 <vPortSetupTimerInterrupt+0x40>)
 800a34e:	fba2 2303 	umull	r2, r3, r2, r3
 800a352:	099b      	lsrs	r3, r3, #6
 800a354:	4a09      	ldr	r2, [pc, #36]	; (800a37c <vPortSetupTimerInterrupt+0x44>)
 800a356:	3b01      	subs	r3, #1
 800a358:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a35a:	4b04      	ldr	r3, [pc, #16]	; (800a36c <vPortSetupTimerInterrupt+0x34>)
 800a35c:	2207      	movs	r2, #7
 800a35e:	601a      	str	r2, [r3, #0]
}
 800a360:	bf00      	nop
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	e000e010 	.word	0xe000e010
 800a370:	e000e018 	.word	0xe000e018
 800a374:	20000068 	.word	0x20000068
 800a378:	10624dd3 	.word	0x10624dd3
 800a37c:	e000e014 	.word	0xe000e014

0800a380 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a380:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a390 <vPortEnableVFP+0x10>
 800a384:	6801      	ldr	r1, [r0, #0]
 800a386:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a38a:	6001      	str	r1, [r0, #0]
 800a38c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a38e:	bf00      	nop
 800a390:	e000ed88 	.word	0xe000ed88

0800a394 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b08a      	sub	sp, #40	; 0x28
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a39c:	2300      	movs	r3, #0
 800a39e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3a0:	f7ff f94c 	bl	800963c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3a4:	4b57      	ldr	r3, [pc, #348]	; (800a504 <pvPortMalloc+0x170>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d101      	bne.n	800a3b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3ac:	f000 f90c 	bl	800a5c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3b0:	4b55      	ldr	r3, [pc, #340]	; (800a508 <pvPortMalloc+0x174>)
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	f040 808c 	bne.w	800a4d6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d01c      	beq.n	800a3fe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a3c4:	2208      	movs	r2, #8
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f003 0307 	and.w	r3, r3, #7
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d013      	beq.n	800a3fe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f023 0307 	bic.w	r3, r3, #7
 800a3dc:	3308      	adds	r3, #8
 800a3de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f003 0307 	and.w	r3, r3, #7
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d009      	beq.n	800a3fe <pvPortMalloc+0x6a>
	__asm volatile
 800a3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ee:	f383 8811 	msr	BASEPRI, r3
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	617b      	str	r3, [r7, #20]
 800a3fc:	e7fe      	b.n	800a3fc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d068      	beq.n	800a4d6 <pvPortMalloc+0x142>
 800a404:	4b41      	ldr	r3, [pc, #260]	; (800a50c <pvPortMalloc+0x178>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d863      	bhi.n	800a4d6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a40e:	4b40      	ldr	r3, [pc, #256]	; (800a510 <pvPortMalloc+0x17c>)
 800a410:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a412:	4b3f      	ldr	r3, [pc, #252]	; (800a510 <pvPortMalloc+0x17c>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a418:	e004      	b.n	800a424 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d903      	bls.n	800a436 <pvPortMalloc+0xa2>
 800a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1f1      	bne.n	800a41a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a436:	4b33      	ldr	r3, [pc, #204]	; (800a504 <pvPortMalloc+0x170>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d04a      	beq.n	800a4d6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a440:	6a3b      	ldr	r3, [r7, #32]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2208      	movs	r2, #8
 800a446:	4413      	add	r3, r2
 800a448:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	6a3b      	ldr	r3, [r7, #32]
 800a450:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a454:	685a      	ldr	r2, [r3, #4]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	1ad2      	subs	r2, r2, r3
 800a45a:	2308      	movs	r3, #8
 800a45c:	005b      	lsls	r3, r3, #1
 800a45e:	429a      	cmp	r2, r3
 800a460:	d91e      	bls.n	800a4a0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4413      	add	r3, r2
 800a468:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	f003 0307 	and.w	r3, r3, #7
 800a470:	2b00      	cmp	r3, #0
 800a472:	d009      	beq.n	800a488 <pvPortMalloc+0xf4>
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	613b      	str	r3, [r7, #16]
 800a486:	e7fe      	b.n	800a486 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	1ad2      	subs	r2, r2, r3
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a49a:	69b8      	ldr	r0, [r7, #24]
 800a49c:	f000 f8f6 	bl	800a68c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4a0:	4b1a      	ldr	r3, [pc, #104]	; (800a50c <pvPortMalloc+0x178>)
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	1ad3      	subs	r3, r2, r3
 800a4aa:	4a18      	ldr	r2, [pc, #96]	; (800a50c <pvPortMalloc+0x178>)
 800a4ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4ae:	4b17      	ldr	r3, [pc, #92]	; (800a50c <pvPortMalloc+0x178>)
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	4b18      	ldr	r3, [pc, #96]	; (800a514 <pvPortMalloc+0x180>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d203      	bcs.n	800a4c2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4ba:	4b14      	ldr	r3, [pc, #80]	; (800a50c <pvPortMalloc+0x178>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a15      	ldr	r2, [pc, #84]	; (800a514 <pvPortMalloc+0x180>)
 800a4c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c4:	685a      	ldr	r2, [r3, #4]
 800a4c6:	4b10      	ldr	r3, [pc, #64]	; (800a508 <pvPortMalloc+0x174>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	431a      	orrs	r2, r3
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a4d6:	f7ff f8bf 	bl	8009658 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	f003 0307 	and.w	r3, r3, #7
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d009      	beq.n	800a4f8 <pvPortMalloc+0x164>
 800a4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e8:	f383 8811 	msr	BASEPRI, r3
 800a4ec:	f3bf 8f6f 	isb	sy
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	60fb      	str	r3, [r7, #12]
 800a4f6:	e7fe      	b.n	800a4f6 <pvPortMalloc+0x162>
	return pvReturn;
 800a4f8:	69fb      	ldr	r3, [r7, #28]
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3728      	adds	r7, #40	; 0x28
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	20003f1c 	.word	0x20003f1c
 800a508:	20003f28 	.word	0x20003f28
 800a50c:	20003f20 	.word	0x20003f20
 800a510:	20003f14 	.word	0x20003f14
 800a514:	20003f24 	.word	0x20003f24

0800a518 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d046      	beq.n	800a5b8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a52a:	2308      	movs	r3, #8
 800a52c:	425b      	negs	r3, r3
 800a52e:	697a      	ldr	r2, [r7, #20]
 800a530:	4413      	add	r3, r2
 800a532:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	685a      	ldr	r2, [r3, #4]
 800a53c:	4b20      	ldr	r3, [pc, #128]	; (800a5c0 <vPortFree+0xa8>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4013      	ands	r3, r2
 800a542:	2b00      	cmp	r3, #0
 800a544:	d109      	bne.n	800a55a <vPortFree+0x42>
 800a546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	60fb      	str	r3, [r7, #12]
 800a558:	e7fe      	b.n	800a558 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d009      	beq.n	800a576 <vPortFree+0x5e>
 800a562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a566:	f383 8811 	msr	BASEPRI, r3
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	60bb      	str	r3, [r7, #8]
 800a574:	e7fe      	b.n	800a574 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	685a      	ldr	r2, [r3, #4]
 800a57a:	4b11      	ldr	r3, [pc, #68]	; (800a5c0 <vPortFree+0xa8>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4013      	ands	r3, r2
 800a580:	2b00      	cmp	r3, #0
 800a582:	d019      	beq.n	800a5b8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d115      	bne.n	800a5b8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	685a      	ldr	r2, [r3, #4]
 800a590:	4b0b      	ldr	r3, [pc, #44]	; (800a5c0 <vPortFree+0xa8>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	43db      	mvns	r3, r3
 800a596:	401a      	ands	r2, r3
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a59c:	f7ff f84e 	bl	800963c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	4b07      	ldr	r3, [pc, #28]	; (800a5c4 <vPortFree+0xac>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	4a06      	ldr	r2, [pc, #24]	; (800a5c4 <vPortFree+0xac>)
 800a5ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5ae:	6938      	ldr	r0, [r7, #16]
 800a5b0:	f000 f86c 	bl	800a68c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a5b4:	f7ff f850 	bl	8009658 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a5b8:	bf00      	nop
 800a5ba:	3718      	adds	r7, #24
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	20003f28 	.word	0x20003f28
 800a5c4:	20003f20 	.word	0x20003f20

0800a5c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a5ce:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a5d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a5d4:	4b27      	ldr	r3, [pc, #156]	; (800a674 <prvHeapInit+0xac>)
 800a5d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f003 0307 	and.w	r3, r3, #7
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00c      	beq.n	800a5fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	3307      	adds	r3, #7
 800a5e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f023 0307 	bic.w	r3, r3, #7
 800a5ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a5f0:	68ba      	ldr	r2, [r7, #8]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	1ad3      	subs	r3, r2, r3
 800a5f6:	4a1f      	ldr	r2, [pc, #124]	; (800a674 <prvHeapInit+0xac>)
 800a5f8:	4413      	add	r3, r2
 800a5fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a600:	4a1d      	ldr	r2, [pc, #116]	; (800a678 <prvHeapInit+0xb0>)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a606:	4b1c      	ldr	r3, [pc, #112]	; (800a678 <prvHeapInit+0xb0>)
 800a608:	2200      	movs	r2, #0
 800a60a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	68ba      	ldr	r2, [r7, #8]
 800a610:	4413      	add	r3, r2
 800a612:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a614:	2208      	movs	r2, #8
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	1a9b      	subs	r3, r3, r2
 800a61a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f023 0307 	bic.w	r3, r3, #7
 800a622:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	4a15      	ldr	r2, [pc, #84]	; (800a67c <prvHeapInit+0xb4>)
 800a628:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a62a:	4b14      	ldr	r3, [pc, #80]	; (800a67c <prvHeapInit+0xb4>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2200      	movs	r2, #0
 800a630:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a632:	4b12      	ldr	r3, [pc, #72]	; (800a67c <prvHeapInit+0xb4>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2200      	movs	r2, #0
 800a638:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	1ad2      	subs	r2, r2, r3
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a648:	4b0c      	ldr	r3, [pc, #48]	; (800a67c <prvHeapInit+0xb4>)
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	4a0a      	ldr	r2, [pc, #40]	; (800a680 <prvHeapInit+0xb8>)
 800a656:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	4a09      	ldr	r2, [pc, #36]	; (800a684 <prvHeapInit+0xbc>)
 800a65e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a660:	4b09      	ldr	r3, [pc, #36]	; (800a688 <prvHeapInit+0xc0>)
 800a662:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a666:	601a      	str	r2, [r3, #0]
}
 800a668:	bf00      	nop
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr
 800a674:	20000314 	.word	0x20000314
 800a678:	20003f14 	.word	0x20003f14
 800a67c:	20003f1c 	.word	0x20003f1c
 800a680:	20003f24 	.word	0x20003f24
 800a684:	20003f20 	.word	0x20003f20
 800a688:	20003f28 	.word	0x20003f28

0800a68c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a68c:	b480      	push	{r7}
 800a68e:	b085      	sub	sp, #20
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a694:	4b28      	ldr	r3, [pc, #160]	; (800a738 <prvInsertBlockIntoFreeList+0xac>)
 800a696:	60fb      	str	r3, [r7, #12]
 800a698:	e002      	b.n	800a6a0 <prvInsertBlockIntoFreeList+0x14>
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	60fb      	str	r3, [r7, #12]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d8f7      	bhi.n	800a69a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	68ba      	ldr	r2, [r7, #8]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d108      	bne.n	800a6ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	685a      	ldr	r2, [r3, #4]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	441a      	add	r2, r3
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	68ba      	ldr	r2, [r7, #8]
 800a6d8:	441a      	add	r2, r3
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d118      	bne.n	800a714 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	4b15      	ldr	r3, [pc, #84]	; (800a73c <prvInsertBlockIntoFreeList+0xb0>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d00d      	beq.n	800a70a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685a      	ldr	r2, [r3, #4]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	441a      	add	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	601a      	str	r2, [r3, #0]
 800a708:	e008      	b.n	800a71c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a70a:	4b0c      	ldr	r3, [pc, #48]	; (800a73c <prvInsertBlockIntoFreeList+0xb0>)
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	601a      	str	r2, [r3, #0]
 800a712:	e003      	b.n	800a71c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	429a      	cmp	r2, r3
 800a722:	d002      	beq.n	800a72a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	687a      	ldr	r2, [r7, #4]
 800a728:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a72a:	bf00      	nop
 800a72c:	3714      	adds	r7, #20
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr
 800a736:	bf00      	nop
 800a738:	20003f14 	.word	0x20003f14
 800a73c:	20003f1c 	.word	0x20003f1c

0800a740 <RF_init>:


/////////////////////////////////////////////////////////////////
////////////////////// Init NRF24L01 Module /////////////////////
/////////////////////////////////////////////////////////////////
void RF_init() {
 800a740:	b590      	push	{r4, r7, lr}
 800a742:	b097      	sub	sp, #92	; 0x5c
 800a744:	af16      	add	r7, sp, #88	; 0x58

#if NRF24
	DWT_Init(); //Enable some of the MCUs special registers so we can get microsecond (us) delays
 800a746:	f7f9 fa7d 	bl	8003c44 <DWT_Init>
	NRF24_begin(GPIOB, nrf_CSN_PIN, nrf_CE_PIN, hspi2);
 800a74a:	4c12      	ldr	r4, [pc, #72]	; (800a794 <RF_init+0x54>)
 800a74c:	4668      	mov	r0, sp
 800a74e:	1d23      	adds	r3, r4, #4
 800a750:	2254      	movs	r2, #84	; 0x54
 800a752:	4619      	mov	r1, r3
 800a754:	f001 fd98 	bl	800c288 <memcpy>
 800a758:	6823      	ldr	r3, [r4, #0]
 800a75a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a75e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a762:	480d      	ldr	r0, [pc, #52]	; (800a798 <RF_init+0x58>)
 800a764:	f7f8 f8c8 	bl	80028f8 <NRF24_begin>
	//nrf24_DebugUART_Init(huart6);
	NRF24_enableAckPayload();
 800a768:	f7f8 fa98 	bl	8002c9c <NRF24_enableAckPayload>
	NRF24_setAutoAck(true);
 800a76c:	2001      	movs	r0, #1
 800a76e:	f7f8 fadb 	bl	8002d28 <NRF24_setAutoAck>
	NRF24_openReadingPipe(1, TxpipeAddrs);
 800a772:	4b0a      	ldr	r3, [pc, #40]	; (800a79c <RF_init+0x5c>)
 800a774:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a778:	461a      	mov	r2, r3
 800a77a:	4623      	mov	r3, r4
 800a77c:	2001      	movs	r0, #1
 800a77e:	f7f8 f9eb 	bl	8002b58 <NRF24_openReadingPipe>
	NRF24_startListening();
 800a782:	f7f8 f99d 	bl	8002ac0 <NRF24_startListening>

	printRadioSettings();
 800a786:	f7f8 fc17 	bl	8002fb8 <printRadioSettings>
#endif

}
 800a78a:	bf00      	nop
 800a78c:	3704      	adds	r7, #4
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd90      	pop	{r4, r7, pc}
 800a792:	bf00      	nop
 800a794:	200047e0 	.word	0x200047e0
 800a798:	40020400 	.word	0x40020400
 800a79c:	20000060 	.word	0x20000060

0800a7a0 <RF_TxRx>:

void RF_TxRx(uint16_t *throttle, float *p_setpoint, float *r_setpoint, float *y_setpoint, float roll, float pitch, float yaw) {
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b088      	sub	sp, #32
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	61f8      	str	r0, [r7, #28]
 800a7a8:	61b9      	str	r1, [r7, #24]
 800a7aa:	617a      	str	r2, [r7, #20]
 800a7ac:	613b      	str	r3, [r7, #16]
 800a7ae:	ed87 0a03 	vstr	s0, [r7, #12]
 800a7b2:	edc7 0a02 	vstr	s1, [r7, #8]
 800a7b6:	ed87 1a01 	vstr	s2, [r7, #4]

#if NRF24
	//Pack acknowledge data 0 - sent every control loop
	packAckPayData_0(roll, pitch, yaw);
 800a7ba:	ed97 1a01 	vldr	s2, [r7, #4]
 800a7be:	edd7 0a02 	vldr	s1, [r7, #8]
 800a7c2:	ed97 0a03 	vldr	s0, [r7, #12]
 800a7c6:	f000 fadd 	bl	800ad84 <packAckPayData_0>

	//Pack acknowledge data 1 - sent every second
	if (loop_counter == CRTL_LOOP_FREQ - 1) {
 800a7ca:	4bc1      	ldr	r3, [pc, #772]	; (800aad0 <RF_TxRx+0x330>)
 800a7cc:	881b      	ldrh	r3, [r3, #0]
 800a7ce:	f240 12f3 	movw	r2, #499	; 0x1f3
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d105      	bne.n	800a7e2 <RF_TxRx+0x42>
		packAckPayData_1();
 800a7d6:	f000 fb5f 	bl	800ae98 <packAckPayData_1>
		loop_counter = 0;
 800a7da:	4bbd      	ldr	r3, [pc, #756]	; (800aad0 <RF_TxRx+0x330>)
 800a7dc:	2200      	movs	r2, #0
 800a7de:	801a      	strh	r2, [r3, #0]
 800a7e0:	e005      	b.n	800a7ee <RF_TxRx+0x4e>
	} else {
		loop_counter++;
 800a7e2:	4bbb      	ldr	r3, [pc, #748]	; (800aad0 <RF_TxRx+0x330>)
 800a7e4:	881b      	ldrh	r3, [r3, #0]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	b29a      	uxth	r2, r3
 800a7ea:	4bb9      	ldr	r3, [pc, #740]	; (800aad0 <RF_TxRx+0x330>)
 800a7ec:	801a      	strh	r2, [r3, #0]
	}

	//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);

	/* Get data from receiver */
	if (NRF24_available()) {
 800a7ee:	f7f8 f98d 	bl	8002b0c <NRF24_available>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f000 8195 	beq.w	800ab24 <RF_TxRx+0x384>
		NRF24_read(RxData, 32);
 800a7fa:	2120      	movs	r1, #32
 800a7fc:	48b5      	ldr	r0, [pc, #724]	; (800aad4 <RF_TxRx+0x334>)
 800a7fe:	f7f8 f98d 	bl	8002b1c <NRF24_read>

		packetsLostCtr = 0;
 800a802:	4bb5      	ldr	r3, [pc, #724]	; (800aad8 <RF_TxRx+0x338>)
 800a804:	2200      	movs	r2, #0
 800a806:	601a      	str	r2, [r3, #0]

		//Write the acknowledge payload back to the transmitter/controller
		if (loop_counter == CRTL_LOOP_FREQ - 1) {
 800a808:	4bb1      	ldr	r3, [pc, #708]	; (800aad0 <RF_TxRx+0x330>)
 800a80a:	881b      	ldrh	r3, [r3, #0]
 800a80c:	f240 12f3 	movw	r2, #499	; 0x1f3
 800a810:	4293      	cmp	r3, r2
 800a812:	d105      	bne.n	800a820 <RF_TxRx+0x80>
			NRF24_writeAckPayload(1, AckPayload_1, 32);
 800a814:	2220      	movs	r2, #32
 800a816:	49b1      	ldr	r1, [pc, #708]	; (800aadc <RF_TxRx+0x33c>)
 800a818:	2001      	movs	r0, #1
 800a81a:	f7f8 fb80 	bl	8002f1e <NRF24_writeAckPayload>
 800a81e:	e004      	b.n	800a82a <RF_TxRx+0x8a>

		} else {
			NRF24_writeAckPayload(1, AckPayload_0, 32);
 800a820:	2220      	movs	r2, #32
 800a822:	49af      	ldr	r1, [pc, #700]	; (800aae0 <RF_TxRx+0x340>)
 800a824:	2001      	movs	r0, #1
 800a826:	f7f8 fb7a 	bl	8002f1e <NRF24_writeAckPayload>

		}
		//Unpack the 32 byte payload from controller
		unpackRxData();
 800a82a:	f000 f987 	bl	800ab3c <unpackRxData>

		//Reverse R joystick positions
		Rx_Data.R_Joystick_YPos = 	4096 - Rx_Data.R_Joystick_YPos;
 800a82e:	4bad      	ldr	r3, [pc, #692]	; (800aae4 <RF_TxRx+0x344>)
 800a830:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a834:	b29b      	uxth	r3, r3
 800a836:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	b21a      	sxth	r2, r3
 800a83e:	4ba9      	ldr	r3, [pc, #676]	; (800aae4 <RF_TxRx+0x344>)
 800a840:	80da      	strh	r2, [r3, #6]
		Rx_Data.R_Joystick_XPos = 	4096 - Rx_Data.R_Joystick_XPos;
 800a842:	4ba8      	ldr	r3, [pc, #672]	; (800aae4 <RF_TxRx+0x344>)
 800a844:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a848:	b29b      	uxth	r3, r3
 800a84a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800a84e:	b29b      	uxth	r3, r3
 800a850:	b21a      	sxth	r2, r3
 800a852:	4ba4      	ldr	r3, [pc, #656]	; (800aae4 <RF_TxRx+0x344>)
 800a854:	809a      	strh	r2, [r3, #4]


		//Map throttle joystick reading to ESC range
		*throttle = map(Rx_Data.L_Joystick_YPos, 850, 3300, ESC_MIN, ESC_MAX);
 800a856:	4ba3      	ldr	r3, [pc, #652]	; (800aae4 <RF_TxRx+0x344>)
 800a858:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a85c:	ee07 3a90 	vmov	s15, r3
 800a860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a864:	ed9f 2aa0 	vldr	s4, [pc, #640]	; 800aae8 <RF_TxRx+0x348>
 800a868:	eddf 1aa0 	vldr	s3, [pc, #640]	; 800aaec <RF_TxRx+0x34c>
 800a86c:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 800aaf0 <RF_TxRx+0x350>
 800a870:	eddf 0aa0 	vldr	s1, [pc, #640]	; 800aaf4 <RF_TxRx+0x354>
 800a874:	eeb0 0a67 	vmov.f32	s0, s15
 800a878:	f000 fb1a 	bl	800aeb0 <map>
 800a87c:	eef0 7a40 	vmov.f32	s15, s0
 800a880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a884:	ee17 3a90 	vmov	r3, s15
 800a888:	b29a      	uxth	r2, r3
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	801a      	strh	r2, [r3, #0]

		//Implement a deadzone for the bottom end of values
		if (*throttle < ESC_MIN + 200) {
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	881b      	ldrh	r3, [r3, #0]
 800a892:	f240 52a9 	movw	r2, #1449	; 0x5a9
 800a896:	4293      	cmp	r3, r2
 800a898:	d803      	bhi.n	800a8a2 <RF_TxRx+0x102>
			*throttle = ESC_MIN;
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800a8a0:	801a      	strh	r2, [r3, #0]
		}

		//Implement a deadzone for the top end of values
		if (*throttle > ESC_MAX - 200) {
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	881b      	ldrh	r3, [r3, #0]
 800a8a6:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d903      	bls.n	800a8b6 <RF_TxRx+0x116>
			*throttle = ESC_MAX;
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a8b4:	801a      	strh	r2, [r3, #0]
		}

		//Map right joystick X axis to roll set point
		*r_setpoint = map(Rx_Data.R_Joystick_XPos, 350, 3940, -MAX_ANGLE, MAX_ANGLE);
 800a8b6:	4b8b      	ldr	r3, [pc, #556]	; (800aae4 <RF_TxRx+0x344>)
 800a8b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a8bc:	ee07 3a90 	vmov	s15, r3
 800a8c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8c4:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 800a8c8:	eefb 1a04 	vmov.f32	s3, #180	; 0xc1a00000 -20.0
 800a8cc:	ed9f 1a8a 	vldr	s2, [pc, #552]	; 800aaf8 <RF_TxRx+0x358>
 800a8d0:	eddf 0a8a 	vldr	s1, [pc, #552]	; 800aafc <RF_TxRx+0x35c>
 800a8d4:	eeb0 0a67 	vmov.f32	s0, s15
 800a8d8:	f000 faea 	bl	800aeb0 <map>
 800a8dc:	eef0 7a40 	vmov.f32	s15, s0
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	edc3 7a00 	vstr	s15, [r3]
		*r_setpoint += 1;
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	edd3 7a00 	vldr	s15, [r3]
 800a8ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	edc3 7a00 	vstr	s15, [r3]
		//Clip just in case
		if(*r_setpoint > MAX_ANGLE) *r_setpoint = (float) MAX_ANGLE;
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	edd3 7a00 	vldr	s15, [r3]
 800a900:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a904:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a90c:	dd02      	ble.n	800a914 <RF_TxRx+0x174>
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	4a7b      	ldr	r2, [pc, #492]	; (800ab00 <RF_TxRx+0x360>)
 800a912:	601a      	str	r2, [r3, #0]
		if(*r_setpoint < -MAX_ANGLE) *r_setpoint = (float) -MAX_ANGLE;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	edd3 7a00 	vldr	s15, [r3]
 800a91a:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a91e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a926:	d502      	bpl.n	800a92e <RF_TxRx+0x18e>
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	4a76      	ldr	r2, [pc, #472]	; (800ab04 <RF_TxRx+0x364>)
 800a92c:	601a      	str	r2, [r3, #0]

		//Map right joystick Y axis to roll set point
		*p_setpoint = map(Rx_Data.R_Joystick_YPos, 370, 3980, -MAX_ANGLE, MAX_ANGLE);
 800a92e:	4b6d      	ldr	r3, [pc, #436]	; (800aae4 <RF_TxRx+0x344>)
 800a930:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a934:	ee07 3a90 	vmov	s15, r3
 800a938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a93c:	eeb3 2a04 	vmov.f32	s4, #52	; 0x41a00000  20.0
 800a940:	eefb 1a04 	vmov.f32	s3, #180	; 0xc1a00000 -20.0
 800a944:	ed9f 1a70 	vldr	s2, [pc, #448]	; 800ab08 <RF_TxRx+0x368>
 800a948:	eddf 0a70 	vldr	s1, [pc, #448]	; 800ab0c <RF_TxRx+0x36c>
 800a94c:	eeb0 0a67 	vmov.f32	s0, s15
 800a950:	f000 faae 	bl	800aeb0 <map>
 800a954:	eef0 7a40 	vmov.f32	s15, s0
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	edc3 7a00 	vstr	s15, [r3]
		*p_setpoint += 1;
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	edd3 7a00 	vldr	s15, [r3]
 800a964:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a968:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	edc3 7a00 	vstr	s15, [r3]
		//Clip just in case
		if(*p_setpoint > MAX_ANGLE) *p_setpoint = (float) MAX_ANGLE;
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	edd3 7a00 	vldr	s15, [r3]
 800a978:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800a97c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a984:	dd02      	ble.n	800a98c <RF_TxRx+0x1ec>
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	4a5d      	ldr	r2, [pc, #372]	; (800ab00 <RF_TxRx+0x360>)
 800a98a:	601a      	str	r2, [r3, #0]
		if(*p_setpoint < -MAX_ANGLE) *p_setpoint = (float) -MAX_ANGLE;
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	edd3 7a00 	vldr	s15, [r3]
 800a992:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800a996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a99e:	d502      	bpl.n	800a9a6 <RF_TxRx+0x206>
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	4a58      	ldr	r2, [pc, #352]	; (800ab04 <RF_TxRx+0x364>)
 800a9a4:	601a      	str	r2, [r3, #0]


		//Map left joystick X axis to yaw set point
		#define	YAW_TURN_RATE 0.5

		yaw_rx = map(Rx_Data.L_Joystick_XPos, 260, 3900, -YAW_TURN_RATE, YAW_TURN_RATE);
 800a9a6:	4b4f      	ldr	r3, [pc, #316]	; (800aae4 <RF_TxRx+0x344>)
 800a9a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9ac:	ee07 3a90 	vmov	s15, r3
 800a9b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9b4:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 800a9b8:	eefe 1a00 	vmov.f32	s3, #224	; 0xbf000000 -0.5
 800a9bc:	ed9f 1a54 	vldr	s2, [pc, #336]	; 800ab10 <RF_TxRx+0x370>
 800a9c0:	eddf 0a54 	vldr	s1, [pc, #336]	; 800ab14 <RF_TxRx+0x374>
 800a9c4:	eeb0 0a67 	vmov.f32	s0, s15
 800a9c8:	f000 fa72 	bl	800aeb0 <map>
 800a9cc:	eef0 7a40 	vmov.f32	s15, s0
 800a9d0:	4b51      	ldr	r3, [pc, #324]	; (800ab18 <RF_TxRx+0x378>)
 800a9d2:	edc3 7a00 	vstr	s15, [r3]

		if(yaw_rx>YAW_TURN_RATE) {yaw_rx = YAW_TURN_RATE;}
 800a9d6:	4b50      	ldr	r3, [pc, #320]	; (800ab18 <RF_TxRx+0x378>)
 800a9d8:	edd3 7a00 	vldr	s15, [r3]
 800a9dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a9e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9e8:	dd03      	ble.n	800a9f2 <RF_TxRx+0x252>
 800a9ea:	4b4b      	ldr	r3, [pc, #300]	; (800ab18 <RF_TxRx+0x378>)
 800a9ec:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800a9f0:	601a      	str	r2, [r3, #0]
		if(yaw_rx<-YAW_TURN_RATE) {yaw_rx = -YAW_TURN_RATE;}
 800a9f2:	4b49      	ldr	r3, [pc, #292]	; (800ab18 <RF_TxRx+0x378>)
 800a9f4:	edd3 7a00 	vldr	s15, [r3]
 800a9f8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800a9fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa04:	d503      	bpl.n	800aa0e <RF_TxRx+0x26e>
 800aa06:	4b44      	ldr	r3, [pc, #272]	; (800ab18 <RF_TxRx+0x378>)
 800aa08:	f04f 423f 	mov.w	r2, #3204448256	; 0xbf000000
 800aa0c:	601a      	str	r2, [r3, #0]

		//make small deadzone
		if(yaw_rx > -0.3 && yaw_rx < 0.3){ yaw_rx = 0.0000000f;}
 800aa0e:	4b42      	ldr	r3, [pc, #264]	; (800ab18 <RF_TxRx+0x378>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7f5 fda0 	bl	8000558 <__aeabi_f2d>
 800aa18:	a329      	add	r3, pc, #164	; (adr r3, 800aac0 <RF_TxRx+0x320>)
 800aa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1e:	f7f6 f883 	bl	8000b28 <__aeabi_dcmpgt>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d010      	beq.n	800aa4a <RF_TxRx+0x2aa>
 800aa28:	4b3b      	ldr	r3, [pc, #236]	; (800ab18 <RF_TxRx+0x378>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7f5 fd93 	bl	8000558 <__aeabi_f2d>
 800aa32:	a325      	add	r3, pc, #148	; (adr r3, 800aac8 <RF_TxRx+0x328>)
 800aa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa38:	f7f6 f858 	bl	8000aec <__aeabi_dcmplt>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d003      	beq.n	800aa4a <RF_TxRx+0x2aa>
 800aa42:	4b35      	ldr	r3, [pc, #212]	; (800ab18 <RF_TxRx+0x378>)
 800aa44:	f04f 0200 	mov.w	r2, #0
 800aa48:	601a      	str	r2, [r3, #0]

		if(yaw_rx > -YAW_TURN_RATE && yaw_rx < YAW_TURN_RATE){
 800aa4a:	4b33      	ldr	r3, [pc, #204]	; (800ab18 <RF_TxRx+0x378>)
 800aa4c:	edd3 7a00 	vldr	s15, [r3]
 800aa50:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800aa54:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa5c:	dd14      	ble.n	800aa88 <RF_TxRx+0x2e8>
 800aa5e:	4b2e      	ldr	r3, [pc, #184]	; (800ab18 <RF_TxRx+0x378>)
 800aa60:	edd3 7a00 	vldr	s15, [r3]
 800aa64:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800aa68:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa70:	d50a      	bpl.n	800aa88 <RF_TxRx+0x2e8>
			(*y_setpoint) += yaw_rx;
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	ed93 7a00 	vldr	s14, [r3]
 800aa78:	4b27      	ldr	r3, [pc, #156]	; (800ab18 <RF_TxRx+0x378>)
 800aa7a:	edd3 7a00 	vldr	s15, [r3]
 800aa7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	edc3 7a00 	vstr	s15, [r3]
		}

		//Clip yaw around 360 degree circle
		if(*y_setpoint > 360) *y_setpoint = (float) 0;
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	edd3 7a00 	vldr	s15, [r3]
 800aa8e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800ab1c <RF_TxRx+0x37c>
 800aa92:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aa96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa9a:	dd03      	ble.n	800aaa4 <RF_TxRx+0x304>
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	f04f 0200 	mov.w	r2, #0
 800aaa2:	601a      	str	r2, [r3, #0]
		if(*y_setpoint < 0) *y_setpoint = (float) 360;
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	edd3 7a00 	vldr	s15, [r3]
 800aaaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aaae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aab2:	d53c      	bpl.n	800ab2e <RF_TxRx+0x38e>
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	4a1a      	ldr	r2, [pc, #104]	; (800ab20 <RF_TxRx+0x380>)
 800aab8:	601a      	str	r2, [r3, #0]
 800aaba:	e038      	b.n	800ab2e <RF_TxRx+0x38e>
 800aabc:	f3af 8000 	nop.w
 800aac0:	33333333 	.word	0x33333333
 800aac4:	bfd33333 	.word	0xbfd33333
 800aac8:	33333333 	.word	0x33333333
 800aacc:	3fd33333 	.word	0x3fd33333
 800aad0:	20003f34 	.word	0x20003f34
 800aad4:	20004348 	.word	0x20004348
 800aad8:	20003f2c 	.word	0x20003f2c
 800aadc:	200042e8 	.word	0x200042e8
 800aae0:	2000430c 	.word	0x2000430c
 800aae4:	20004338 	.word	0x20004338
 800aae8:	451c4000 	.word	0x451c4000
 800aaec:	449c4000 	.word	0x449c4000
 800aaf0:	454e4000 	.word	0x454e4000
 800aaf4:	44548000 	.word	0x44548000
 800aaf8:	45764000 	.word	0x45764000
 800aafc:	43af0000 	.word	0x43af0000
 800ab00:	41a00000 	.word	0x41a00000
 800ab04:	c1a00000 	.word	0xc1a00000
 800ab08:	4578c000 	.word	0x4578c000
 800ab0c:	43b90000 	.word	0x43b90000
 800ab10:	4573c000 	.word	0x4573c000
 800ab14:	43820000 	.word	0x43820000
 800ab18:	20003f38 	.word	0x20003f38
 800ab1c:	43b40000 	.word	0x43b40000
 800ab20:	43b40000 	.word	0x43b40000

	} else {
		packetsLostCtr++;
 800ab24:	4b04      	ldr	r3, [pc, #16]	; (800ab38 <RF_TxRx+0x398>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	4a03      	ldr	r2, [pc, #12]	; (800ab38 <RF_TxRx+0x398>)
 800ab2c:	6013      	str	r3, [r2, #0]
	if (packetsLostCtr > 10) {
		//lostConnection();
	}

#endif
}
 800ab2e:	bf00      	nop
 800ab30:	3720      	adds	r7, #32
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	20003f2c 	.word	0x20003f2c

0800ab3c <unpackRxData>:
// Unpack received 32 byte payload from transmitter, see documentation for specification details
void unpackRxData() {
 800ab3c:	b480      	push	{r7}
 800ab3e:	b087      	sub	sp, #28
 800ab40:	af00      	add	r7, sp, #0

	Rx_Data.L_Joystick_XPos = (RxData[0] & 0xFF) | (RxData[1] << 8);
 800ab42:	4b84      	ldr	r3, [pc, #528]	; (800ad54 <unpackRxData+0x218>)
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	b21a      	sxth	r2, r3
 800ab48:	4b82      	ldr	r3, [pc, #520]	; (800ad54 <unpackRxData+0x218>)
 800ab4a:	785b      	ldrb	r3, [r3, #1]
 800ab4c:	021b      	lsls	r3, r3, #8
 800ab4e:	b21b      	sxth	r3, r3
 800ab50:	4313      	orrs	r3, r2
 800ab52:	b21a      	sxth	r2, r3
 800ab54:	4b80      	ldr	r3, [pc, #512]	; (800ad58 <unpackRxData+0x21c>)
 800ab56:	801a      	strh	r2, [r3, #0]
	Rx_Data.L_Joystick_YPos = (RxData[2] & 0xFF) | (RxData[3] << 8);
 800ab58:	4b7e      	ldr	r3, [pc, #504]	; (800ad54 <unpackRxData+0x218>)
 800ab5a:	789b      	ldrb	r3, [r3, #2]
 800ab5c:	b21a      	sxth	r2, r3
 800ab5e:	4b7d      	ldr	r3, [pc, #500]	; (800ad54 <unpackRxData+0x218>)
 800ab60:	78db      	ldrb	r3, [r3, #3]
 800ab62:	021b      	lsls	r3, r3, #8
 800ab64:	b21b      	sxth	r3, r3
 800ab66:	4313      	orrs	r3, r2
 800ab68:	b21a      	sxth	r2, r3
 800ab6a:	4b7b      	ldr	r3, [pc, #492]	; (800ad58 <unpackRxData+0x21c>)
 800ab6c:	805a      	strh	r2, [r3, #2]
	Rx_Data.R_Joystick_XPos = (RxData[4] & 0xFF) | (RxData[5] << 8);
 800ab6e:	4b79      	ldr	r3, [pc, #484]	; (800ad54 <unpackRxData+0x218>)
 800ab70:	791b      	ldrb	r3, [r3, #4]
 800ab72:	b21a      	sxth	r2, r3
 800ab74:	4b77      	ldr	r3, [pc, #476]	; (800ad54 <unpackRxData+0x218>)
 800ab76:	795b      	ldrb	r3, [r3, #5]
 800ab78:	021b      	lsls	r3, r3, #8
 800ab7a:	b21b      	sxth	r3, r3
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	b21a      	sxth	r2, r3
 800ab80:	4b75      	ldr	r3, [pc, #468]	; (800ad58 <unpackRxData+0x21c>)
 800ab82:	809a      	strh	r2, [r3, #4]
	Rx_Data.R_Joystick_YPos = (RxData[6] & 0xFF) | (RxData[7] << 8);
 800ab84:	4b73      	ldr	r3, [pc, #460]	; (800ad54 <unpackRxData+0x218>)
 800ab86:	799b      	ldrb	r3, [r3, #6]
 800ab88:	b21a      	sxth	r2, r3
 800ab8a:	4b72      	ldr	r3, [pc, #456]	; (800ad54 <unpackRxData+0x218>)
 800ab8c:	79db      	ldrb	r3, [r3, #7]
 800ab8e:	021b      	lsls	r3, r3, #8
 800ab90:	b21b      	sxth	r3, r3
 800ab92:	4313      	orrs	r3, r2
 800ab94:	b21a      	sxth	r2, r3
 800ab96:	4b70      	ldr	r3, [pc, #448]	; (800ad58 <unpackRxData+0x21c>)
 800ab98:	80da      	strh	r2, [r3, #6]

	Rx_Data.airmode = (RxData[8] >> 0) & 1;
 800ab9a:	4b6e      	ldr	r3, [pc, #440]	; (800ad54 <unpackRxData+0x218>)
 800ab9c:	7a1b      	ldrb	r3, [r3, #8]
 800ab9e:	f003 0301 	and.w	r3, r3, #1
 800aba2:	b2da      	uxtb	r2, r3
 800aba4:	4b6c      	ldr	r3, [pc, #432]	; (800ad58 <unpackRxData+0x21c>)
 800aba6:	721a      	strb	r2, [r3, #8]

	Rx_Data.kill_rx = (RxData[8] >> 1) & 1;
 800aba8:	4b6a      	ldr	r3, [pc, #424]	; (800ad54 <unpackRxData+0x218>)
 800abaa:	7a1b      	ldrb	r3, [r3, #8]
 800abac:	085b      	lsrs	r3, r3, #1
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	f003 0301 	and.w	r3, r3, #1
 800abb4:	b2da      	uxtb	r2, r3
 800abb6:	4b68      	ldr	r3, [pc, #416]	; (800ad58 <unpackRxData+0x21c>)
 800abb8:	725a      	strb	r2, [r3, #9]
	if (Rx_Data.kill_rx) {
		//kill();
	}

		//Unpack PID data
		uint16_t roll_p_rx = (RxData[9] & 0xFF) | (RxData[10] << 8);
 800abba:	4b66      	ldr	r3, [pc, #408]	; (800ad54 <unpackRxData+0x218>)
 800abbc:	7a5b      	ldrb	r3, [r3, #9]
 800abbe:	b21a      	sxth	r2, r3
 800abc0:	4b64      	ldr	r3, [pc, #400]	; (800ad54 <unpackRxData+0x218>)
 800abc2:	7a9b      	ldrb	r3, [r3, #10]
 800abc4:	021b      	lsls	r3, r3, #8
 800abc6:	b21b      	sxth	r3, r3
 800abc8:	4313      	orrs	r3, r2
 800abca:	b21b      	sxth	r3, r3
 800abcc:	82fb      	strh	r3, [r7, #22]
		uint16_t roll_i_rx = (RxData[11] & 0xFF) | (RxData[12] << 8);
 800abce:	4b61      	ldr	r3, [pc, #388]	; (800ad54 <unpackRxData+0x218>)
 800abd0:	7adb      	ldrb	r3, [r3, #11]
 800abd2:	b21a      	sxth	r2, r3
 800abd4:	4b5f      	ldr	r3, [pc, #380]	; (800ad54 <unpackRxData+0x218>)
 800abd6:	7b1b      	ldrb	r3, [r3, #12]
 800abd8:	021b      	lsls	r3, r3, #8
 800abda:	b21b      	sxth	r3, r3
 800abdc:	4313      	orrs	r3, r2
 800abde:	b21b      	sxth	r3, r3
 800abe0:	82bb      	strh	r3, [r7, #20]
		uint16_t roll_d_rx = (RxData[13] & 0xFF) | (RxData[14] << 8);
 800abe2:	4b5c      	ldr	r3, [pc, #368]	; (800ad54 <unpackRxData+0x218>)
 800abe4:	7b5b      	ldrb	r3, [r3, #13]
 800abe6:	b21a      	sxth	r2, r3
 800abe8:	4b5a      	ldr	r3, [pc, #360]	; (800ad54 <unpackRxData+0x218>)
 800abea:	7b9b      	ldrb	r3, [r3, #14]
 800abec:	021b      	lsls	r3, r3, #8
 800abee:	b21b      	sxth	r3, r3
 800abf0:	4313      	orrs	r3, r2
 800abf2:	b21b      	sxth	r3, r3
 800abf4:	827b      	strh	r3, [r7, #18]

		//Remap
		roll_p_gain = (float) roll_p_rx / 1000;
 800abf6:	8afb      	ldrh	r3, [r7, #22]
 800abf8:	ee07 3a90 	vmov	s15, r3
 800abfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac00:	eddf 6a56 	vldr	s13, [pc, #344]	; 800ad5c <unpackRxData+0x220>
 800ac04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ac08:	4b55      	ldr	r3, [pc, #340]	; (800ad60 <unpackRxData+0x224>)
 800ac0a:	edc3 7a00 	vstr	s15, [r3]
		roll_i_gain = (float) roll_i_rx / 1000;
 800ac0e:	8abb      	ldrh	r3, [r7, #20]
 800ac10:	ee07 3a90 	vmov	s15, r3
 800ac14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac18:	eddf 6a50 	vldr	s13, [pc, #320]	; 800ad5c <unpackRxData+0x220>
 800ac1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ac20:	4b50      	ldr	r3, [pc, #320]	; (800ad64 <unpackRxData+0x228>)
 800ac22:	edc3 7a00 	vstr	s15, [r3]
		roll_d_gain = (float) roll_d_rx / 1000;
 800ac26:	8a7b      	ldrh	r3, [r7, #18]
 800ac28:	ee07 3a90 	vmov	s15, r3
 800ac2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac30:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800ad5c <unpackRxData+0x220>
 800ac34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ac38:	4b4b      	ldr	r3, [pc, #300]	; (800ad68 <unpackRxData+0x22c>)
 800ac3a:	edc3 7a00 	vstr	s15, [r3]


		uint16_t pitch_p_rx = (RxData[15] & 0xFF) | (RxData[16] << 8);
 800ac3e:	4b45      	ldr	r3, [pc, #276]	; (800ad54 <unpackRxData+0x218>)
 800ac40:	7bdb      	ldrb	r3, [r3, #15]
 800ac42:	b21a      	sxth	r2, r3
 800ac44:	4b43      	ldr	r3, [pc, #268]	; (800ad54 <unpackRxData+0x218>)
 800ac46:	7c1b      	ldrb	r3, [r3, #16]
 800ac48:	021b      	lsls	r3, r3, #8
 800ac4a:	b21b      	sxth	r3, r3
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	b21b      	sxth	r3, r3
 800ac50:	823b      	strh	r3, [r7, #16]
		uint16_t pitch_i_rx = (RxData[17] & 0xFF) | (RxData[18] << 8);
 800ac52:	4b40      	ldr	r3, [pc, #256]	; (800ad54 <unpackRxData+0x218>)
 800ac54:	7c5b      	ldrb	r3, [r3, #17]
 800ac56:	b21a      	sxth	r2, r3
 800ac58:	4b3e      	ldr	r3, [pc, #248]	; (800ad54 <unpackRxData+0x218>)
 800ac5a:	7c9b      	ldrb	r3, [r3, #18]
 800ac5c:	021b      	lsls	r3, r3, #8
 800ac5e:	b21b      	sxth	r3, r3
 800ac60:	4313      	orrs	r3, r2
 800ac62:	b21b      	sxth	r3, r3
 800ac64:	81fb      	strh	r3, [r7, #14]
		uint16_t pitch_d_rx = (RxData[19] & 0xFF) | (RxData[20] << 8);
 800ac66:	4b3b      	ldr	r3, [pc, #236]	; (800ad54 <unpackRxData+0x218>)
 800ac68:	7cdb      	ldrb	r3, [r3, #19]
 800ac6a:	b21a      	sxth	r2, r3
 800ac6c:	4b39      	ldr	r3, [pc, #228]	; (800ad54 <unpackRxData+0x218>)
 800ac6e:	7d1b      	ldrb	r3, [r3, #20]
 800ac70:	021b      	lsls	r3, r3, #8
 800ac72:	b21b      	sxth	r3, r3
 800ac74:	4313      	orrs	r3, r2
 800ac76:	b21b      	sxth	r3, r3
 800ac78:	81bb      	strh	r3, [r7, #12]

		//Remap
		pitch_p_gain = (float) pitch_p_rx / 1000;
 800ac7a:	8a3b      	ldrh	r3, [r7, #16]
 800ac7c:	ee07 3a90 	vmov	s15, r3
 800ac80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac84:	eddf 6a35 	vldr	s13, [pc, #212]	; 800ad5c <unpackRxData+0x220>
 800ac88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ac8c:	4b37      	ldr	r3, [pc, #220]	; (800ad6c <unpackRxData+0x230>)
 800ac8e:	edc3 7a00 	vstr	s15, [r3]
		pitch_i_gain = (float) pitch_i_rx / 1000;
 800ac92:	89fb      	ldrh	r3, [r7, #14]
 800ac94:	ee07 3a90 	vmov	s15, r3
 800ac98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ac9c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800ad5c <unpackRxData+0x220>
 800aca0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aca4:	4b32      	ldr	r3, [pc, #200]	; (800ad70 <unpackRxData+0x234>)
 800aca6:	edc3 7a00 	vstr	s15, [r3]
		pitch_d_gain = (float) pitch_d_rx / 1000;
 800acaa:	89bb      	ldrh	r3, [r7, #12]
 800acac:	ee07 3a90 	vmov	s15, r3
 800acb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800acb4:	eddf 6a29 	vldr	s13, [pc, #164]	; 800ad5c <unpackRxData+0x220>
 800acb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800acbc:	4b2d      	ldr	r3, [pc, #180]	; (800ad74 <unpackRxData+0x238>)
 800acbe:	edc3 7a00 	vstr	s15, [r3]


		uint16_t yaw_p_rx = (RxData[21] & 0xFF) | (RxData[22] << 8);
 800acc2:	4b24      	ldr	r3, [pc, #144]	; (800ad54 <unpackRxData+0x218>)
 800acc4:	7d5b      	ldrb	r3, [r3, #21]
 800acc6:	b21a      	sxth	r2, r3
 800acc8:	4b22      	ldr	r3, [pc, #136]	; (800ad54 <unpackRxData+0x218>)
 800acca:	7d9b      	ldrb	r3, [r3, #22]
 800accc:	021b      	lsls	r3, r3, #8
 800acce:	b21b      	sxth	r3, r3
 800acd0:	4313      	orrs	r3, r2
 800acd2:	b21b      	sxth	r3, r3
 800acd4:	817b      	strh	r3, [r7, #10]
		uint16_t yaw_i_rx = (RxData[23] & 0xFF) | (RxData[24] << 8);
 800acd6:	4b1f      	ldr	r3, [pc, #124]	; (800ad54 <unpackRxData+0x218>)
 800acd8:	7ddb      	ldrb	r3, [r3, #23]
 800acda:	b21a      	sxth	r2, r3
 800acdc:	4b1d      	ldr	r3, [pc, #116]	; (800ad54 <unpackRxData+0x218>)
 800acde:	7e1b      	ldrb	r3, [r3, #24]
 800ace0:	021b      	lsls	r3, r3, #8
 800ace2:	b21b      	sxth	r3, r3
 800ace4:	4313      	orrs	r3, r2
 800ace6:	b21b      	sxth	r3, r3
 800ace8:	813b      	strh	r3, [r7, #8]
		uint16_t yaw_d_rx = (RxData[25] & 0xFF) | (RxData[26] << 8);
 800acea:	4b1a      	ldr	r3, [pc, #104]	; (800ad54 <unpackRxData+0x218>)
 800acec:	7e5b      	ldrb	r3, [r3, #25]
 800acee:	b21a      	sxth	r2, r3
 800acf0:	4b18      	ldr	r3, [pc, #96]	; (800ad54 <unpackRxData+0x218>)
 800acf2:	7e9b      	ldrb	r3, [r3, #26]
 800acf4:	021b      	lsls	r3, r3, #8
 800acf6:	b21b      	sxth	r3, r3
 800acf8:	4313      	orrs	r3, r2
 800acfa:	b21b      	sxth	r3, r3
 800acfc:	80fb      	strh	r3, [r7, #6]

		//Remap
		yaw_p_gain = (float) yaw_p_rx / 1000;
 800acfe:	897b      	ldrh	r3, [r7, #10]
 800ad00:	ee07 3a90 	vmov	s15, r3
 800ad04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ad08:	eddf 6a14 	vldr	s13, [pc, #80]	; 800ad5c <unpackRxData+0x220>
 800ad0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ad10:	4b19      	ldr	r3, [pc, #100]	; (800ad78 <unpackRxData+0x23c>)
 800ad12:	edc3 7a00 	vstr	s15, [r3]
		yaw_i_gain = (float) yaw_i_rx / 1000;
 800ad16:	893b      	ldrh	r3, [r7, #8]
 800ad18:	ee07 3a90 	vmov	s15, r3
 800ad1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ad20:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800ad5c <unpackRxData+0x220>
 800ad24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ad28:	4b14      	ldr	r3, [pc, #80]	; (800ad7c <unpackRxData+0x240>)
 800ad2a:	edc3 7a00 	vstr	s15, [r3]
		yaw_d_gain = (float) yaw_d_rx / 1000;
 800ad2e:	88fb      	ldrh	r3, [r7, #6]
 800ad30:	ee07 3a90 	vmov	s15, r3
 800ad34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ad38:	eddf 6a08 	vldr	s13, [pc, #32]	; 800ad5c <unpackRxData+0x220>
 800ad3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ad40:	4b0f      	ldr	r3, [pc, #60]	; (800ad80 <unpackRxData+0x244>)
 800ad42:	edc3 7a00 	vstr	s15, [r3]

}
 800ad46:	bf00      	nop
 800ad48:	371c      	adds	r7, #28
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	20004348 	.word	0x20004348
 800ad58:	20004338 	.word	0x20004338
 800ad5c:	447a0000 	.word	0x447a0000
 800ad60:	20004370 	.word	0x20004370
 800ad64:	20004334 	.word	0x20004334
 800ad68:	20004344 	.word	0x20004344
 800ad6c:	2000436c 	.word	0x2000436c
 800ad70:	2000432c 	.word	0x2000432c
 800ad74:	20004374 	.word	0x20004374
 800ad78:	20004330 	.word	0x20004330
 800ad7c:	20004308 	.word	0x20004308
 800ad80:	200042e4 	.word	0x200042e4

0800ad84 <packAckPayData_0>:

//	Pack acknowledge payload data 0 - sent every control loop, which will be sent back to controller once drone has successfully
//	received a payload from it
void packAckPayData_0(float roll, float pitch, float yaw) {
 800ad84:	b590      	push	{r4, r7, lr}
 800ad86:	b087      	sub	sp, #28
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	ed87 0a03 	vstr	s0, [r7, #12]
 800ad8e:	edc7 0a02 	vstr	s1, [r7, #8]
 800ad92:	ed87 1a01 	vstr	s2, [r7, #4]

	//ID for packet 0
	AckPayload_0[0] = 0x03;
 800ad96:	4b3d      	ldr	r3, [pc, #244]	; (800ae8c <packAckPayData_0+0x108>)
 800ad98:	2203      	movs	r2, #3
 800ad9a:	701a      	strb	r2, [r3, #0]

	//Next 2 bytes = Battery level
	AckPayload_0[1] = batteryLevel;
 800ad9c:	4b3c      	ldr	r3, [pc, #240]	; (800ae90 <packAckPayData_0+0x10c>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	4b3a      	ldr	r3, [pc, #232]	; (800ae8c <packAckPayData_0+0x108>)
 800ada4:	705a      	strb	r2, [r3, #1]
	AckPayload_0[2] = batteryLevel >> 8;
 800ada6:	4b3a      	ldr	r3, [pc, #232]	; (800ae90 <packAckPayData_0+0x10c>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	0a1b      	lsrs	r3, r3, #8
 800adac:	b2da      	uxtb	r2, r3
 800adae:	4b37      	ldr	r3, [pc, #220]	; (800ae8c <packAckPayData_0+0x108>)
 800adb0:	709a      	strb	r2, [r3, #2]

	//Next 4 bytes = IMU Roll
	int16_t roll_tx = round(roll * 100);
 800adb2:	edd7 7a03 	vldr	s15, [r7, #12]
 800adb6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800ae94 <packAckPayData_0+0x110>
 800adba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800adbe:	ee17 0a90 	vmov	r0, s15
 800adc2:	f7f5 fbc9 	bl	8000558 <__aeabi_f2d>
 800adc6:	4603      	mov	r3, r0
 800adc8:	460c      	mov	r4, r1
 800adca:	ec44 3b10 	vmov	d0, r3, r4
 800adce:	f002 fb71 	bl	800d4b4 <round>
 800add2:	ec54 3b10 	vmov	r3, r4, d0
 800add6:	4618      	mov	r0, r3
 800add8:	4621      	mov	r1, r4
 800adda:	f7f5 fec5 	bl	8000b68 <__aeabi_d2iz>
 800adde:	4603      	mov	r3, r0
 800ade0:	82fb      	strh	r3, [r7, #22]
	AckPayload_0[3] = roll_tx;
 800ade2:	8afb      	ldrh	r3, [r7, #22]
 800ade4:	b2da      	uxtb	r2, r3
 800ade6:	4b29      	ldr	r3, [pc, #164]	; (800ae8c <packAckPayData_0+0x108>)
 800ade8:	70da      	strb	r2, [r3, #3]
	AckPayload_0[4] = roll_tx >> 8;
 800adea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800adee:	121b      	asrs	r3, r3, #8
 800adf0:	b21b      	sxth	r3, r3
 800adf2:	b2da      	uxtb	r2, r3
 800adf4:	4b25      	ldr	r3, [pc, #148]	; (800ae8c <packAckPayData_0+0x108>)
 800adf6:	711a      	strb	r2, [r3, #4]

	//Next  4 bytes = IMU Pitch
	int16_t pitch_tx = round(pitch * 100);
 800adf8:	edd7 7a02 	vldr	s15, [r7, #8]
 800adfc:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800ae94 <packAckPayData_0+0x110>
 800ae00:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae04:	ee17 0a90 	vmov	r0, s15
 800ae08:	f7f5 fba6 	bl	8000558 <__aeabi_f2d>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	460c      	mov	r4, r1
 800ae10:	ec44 3b10 	vmov	d0, r3, r4
 800ae14:	f002 fb4e 	bl	800d4b4 <round>
 800ae18:	ec54 3b10 	vmov	r3, r4, d0
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	4621      	mov	r1, r4
 800ae20:	f7f5 fea2 	bl	8000b68 <__aeabi_d2iz>
 800ae24:	4603      	mov	r3, r0
 800ae26:	82bb      	strh	r3, [r7, #20]
	AckPayload_0[5] = pitch_tx;
 800ae28:	8abb      	ldrh	r3, [r7, #20]
 800ae2a:	b2da      	uxtb	r2, r3
 800ae2c:	4b17      	ldr	r3, [pc, #92]	; (800ae8c <packAckPayData_0+0x108>)
 800ae2e:	715a      	strb	r2, [r3, #5]
	AckPayload_0[6] = pitch_tx >> 8;
 800ae30:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ae34:	121b      	asrs	r3, r3, #8
 800ae36:	b21b      	sxth	r3, r3
 800ae38:	b2da      	uxtb	r2, r3
 800ae3a:	4b14      	ldr	r3, [pc, #80]	; (800ae8c <packAckPayData_0+0x108>)
 800ae3c:	719a      	strb	r2, [r3, #6]

	//Next  4 bytes = IMU Yaw
	int16_t yaw_tx = round(yaw * 100);
 800ae3e:	edd7 7a01 	vldr	s15, [r7, #4]
 800ae42:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800ae94 <packAckPayData_0+0x110>
 800ae46:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae4a:	ee17 0a90 	vmov	r0, s15
 800ae4e:	f7f5 fb83 	bl	8000558 <__aeabi_f2d>
 800ae52:	4603      	mov	r3, r0
 800ae54:	460c      	mov	r4, r1
 800ae56:	ec44 3b10 	vmov	d0, r3, r4
 800ae5a:	f002 fb2b 	bl	800d4b4 <round>
 800ae5e:	ec54 3b10 	vmov	r3, r4, d0
 800ae62:	4618      	mov	r0, r3
 800ae64:	4621      	mov	r1, r4
 800ae66:	f7f5 fe7f 	bl	8000b68 <__aeabi_d2iz>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	827b      	strh	r3, [r7, #18]
	AckPayload_0[7] = yaw_tx;
 800ae6e:	8a7b      	ldrh	r3, [r7, #18]
 800ae70:	b2da      	uxtb	r2, r3
 800ae72:	4b06      	ldr	r3, [pc, #24]	; (800ae8c <packAckPayData_0+0x108>)
 800ae74:	71da      	strb	r2, [r3, #7]
	AckPayload_0[8] = yaw_tx >> 8;
 800ae76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ae7a:	121b      	asrs	r3, r3, #8
 800ae7c:	b21b      	sxth	r3, r3
 800ae7e:	b2da      	uxtb	r2, r3
 800ae80:	4b02      	ldr	r3, [pc, #8]	; (800ae8c <packAckPayData_0+0x108>)
 800ae82:	721a      	strb	r2, [r3, #8]

}
 800ae84:	bf00      	nop
 800ae86:	371c      	adds	r7, #28
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd90      	pop	{r4, r7, pc}
 800ae8c:	2000430c 	.word	0x2000430c
 800ae90:	20003f30 	.word	0x20003f30
 800ae94:	42c80000 	.word	0x42c80000

0800ae98 <packAckPayData_1>:

//	Pack acknowledge payload data 1 - sent every second, contains GPS data
void packAckPayData_1() {
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	af00      	add	r7, sp, #0

	//ID for packet 1
	AckPayload_1[0] = 0xFF;
 800ae9c:	4b03      	ldr	r3, [pc, #12]	; (800aeac <packAckPayData_1+0x14>)
 800ae9e:	22ff      	movs	r2, #255	; 0xff
 800aea0:	701a      	strb	r2, [r3, #0]

	getGPSData(AckPayload_1);
 800aea2:	4802      	ldr	r0, [pc, #8]	; (800aeac <packAckPayData_1+0x14>)
 800aea4:	f000 fa22 	bl	800b2ec <getGPSData>

}
 800aea8:	bf00      	nop
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	200042e8 	.word	0x200042e8

0800aeb0 <map>:


float map(float x, float in_min, float in_max, float out_min, float out_max) {
 800aeb0:	b480      	push	{r7}
 800aeb2:	b087      	sub	sp, #28
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	ed87 0a05 	vstr	s0, [r7, #20]
 800aeba:	edc7 0a04 	vstr	s1, [r7, #16]
 800aebe:	ed87 1a03 	vstr	s2, [r7, #12]
 800aec2:	edc7 1a02 	vstr	s3, [r7, #8]
 800aec6:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800aeca:	ed97 7a05 	vldr	s14, [r7, #20]
 800aece:	edd7 7a04 	vldr	s15, [r7, #16]
 800aed2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aed6:	edd7 6a01 	vldr	s13, [r7, #4]
 800aeda:	edd7 7a02 	vldr	s15, [r7, #8]
 800aede:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800aee2:	ee67 6a27 	vmul.f32	s13, s14, s15
 800aee6:	ed97 7a03 	vldr	s14, [r7, #12]
 800aeea:	edd7 7a04 	vldr	s15, [r7, #16]
 800aeee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aef6:	edd7 7a02 	vldr	s15, [r7, #8]
 800aefa:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800aefe:	eeb0 0a67 	vmov.f32	s0, s15
 800af02:	371c      	adds	r7, #28
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <CL_init>:
float ax,ay,az;
float gx,gy,gz;
float mx,my,mz;
float temp;

void CL_init() {
 800af0c:	b580      	push	{r7, lr}
 800af0e:	af00      	add	r7, sp, #0


#if NRF24

	RF_init();
 800af10:	f7ff fc16 	bl	800a740 <RF_init>
#endif

#if IMU

		//Start timer 11, used for integral calculations
		HAL_TIM_Base_Start(&htim11);
 800af14:	4816      	ldr	r0, [pc, #88]	; (800af70 <CL_init+0x64>)
 800af16:	f7fc fa40 	bl	800739a <HAL_TIM_Base_Start>

		if (imu_init(&hi2c2) == IMU_SUCCESS) {
 800af1a:	4816      	ldr	r0, [pc, #88]	; (800af74 <CL_init+0x68>)
 800af1c:	f7f6 f81c 	bl	8000f58 <imu_init>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d101      	bne.n	800af2a <CL_init+0x1e>
			imu_calibrate();
 800af26:	f7f6 f847 	bl	8000fb8 <imu_calibrate>
	/////////////////////////////////////////////////////////////////
	////////////////////////// Init timers for PWM //////////////////
	/////////////////////////////////////////////////////////////////

	//Start up PWMs
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800af2a:	2100      	movs	r1, #0
 800af2c:	4812      	ldr	r0, [pc, #72]	; (800af78 <CL_init+0x6c>)
 800af2e:	f7fc faa7 	bl	8007480 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800af32:	2104      	movs	r1, #4
 800af34:	4810      	ldr	r0, [pc, #64]	; (800af78 <CL_init+0x6c>)
 800af36:	f7fc faa3 	bl	8007480 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800af3a:	2108      	movs	r1, #8
 800af3c:	480e      	ldr	r0, [pc, #56]	; (800af78 <CL_init+0x6c>)
 800af3e:	f7fc fa9f 	bl	8007480 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800af42:	210c      	movs	r1, #12
 800af44:	480c      	ldr	r0, [pc, #48]	; (800af78 <CL_init+0x6c>)
 800af46:	f7fc fa9b 	bl	8007480 <HAL_TIM_PWM_Start>

	//ARM_ESCs(); //Force arming sequence

	PWM1_Set(2500);
 800af4a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800af4e:	f000 f92f 	bl	800b1b0 <PWM1_Set>
	PWM2_Set(2500);
 800af52:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800af56:	f000 f93d 	bl	800b1d4 <PWM2_Set>
	PWM3_Set(2500);
 800af5a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800af5e:	f000 f94b 	bl	800b1f8 <PWM3_Set>
	PWM4_Set(2500);
 800af62:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800af66:	f000 f959 	bl	800b21c <PWM4_Set>

}
 800af6a:	bf00      	nop
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	200048b8 	.word	0x200048b8
 800af74:	200041f4 	.word	0x200041f4
 800af78:	20004878 	.word	0x20004878

0800af7c <CL_main>:
 *		   |
 *		/     \
 * (1 CW)     (3 CCW)
 *
 */
void CL_main() {
 800af7c:	b580      	push	{r7, lr}
 800af7e:	af00      	add	r7, sp, #0


#if NRF24
	RF_TxRx(&throttle, &pitch_setpoint, &roll_setpoint, &yaw_setpoint, imu_roll, imu_pitch, imu_yaw);
 800af80:	4b7b      	ldr	r3, [pc, #492]	; (800b170 <CL_main+0x1f4>)
 800af82:	edd3 7a00 	vldr	s15, [r3]
 800af86:	4b7b      	ldr	r3, [pc, #492]	; (800b174 <CL_main+0x1f8>)
 800af88:	ed93 7a00 	vldr	s14, [r3]
 800af8c:	4b7a      	ldr	r3, [pc, #488]	; (800b178 <CL_main+0x1fc>)
 800af8e:	edd3 6a00 	vldr	s13, [r3]
 800af92:	eeb0 1a66 	vmov.f32	s2, s13
 800af96:	eef0 0a47 	vmov.f32	s1, s14
 800af9a:	eeb0 0a67 	vmov.f32	s0, s15
 800af9e:	4b77      	ldr	r3, [pc, #476]	; (800b17c <CL_main+0x200>)
 800afa0:	4a77      	ldr	r2, [pc, #476]	; (800b180 <CL_main+0x204>)
 800afa2:	4978      	ldr	r1, [pc, #480]	; (800b184 <CL_main+0x208>)
 800afa4:	4878      	ldr	r0, [pc, #480]	; (800b188 <CL_main+0x20c>)
 800afa6:	f7ff fbfb 	bl	800a7a0 <RF_TxRx>
#endif


#if IMU

		calc_RollPitchYaw(&imu_roll, &imu_pitch, &imu_yaw);
 800afaa:	4a73      	ldr	r2, [pc, #460]	; (800b178 <CL_main+0x1fc>)
 800afac:	4971      	ldr	r1, [pc, #452]	; (800b174 <CL_main+0x1f8>)
 800afae:	4870      	ldr	r0, [pc, #448]	; (800b170 <CL_main+0x1f4>)
 800afb0:	f7f6 f82a 	bl	8001008 <calc_RollPitchYaw>


#endif
		if (Rx_Data.airmode) {
 800afb4:	4b75      	ldr	r3, [pc, #468]	; (800b18c <CL_main+0x210>)
 800afb6:	7a1b      	ldrb	r3, [r3, #8]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d021      	beq.n	800b000 <CL_main+0x84>
			/*******    Pitch PID calculation  ********/
			pid_output_pitch = pid_calculate_pitch(imu_pitch, 0, 0);
 800afbc:	4b6d      	ldr	r3, [pc, #436]	; (800b174 <CL_main+0x1f8>)
 800afbe:	edd3 7a00 	vldr	s15, [r3]
 800afc2:	eddf 0a73 	vldr	s1, [pc, #460]	; 800b190 <CL_main+0x214>
 800afc6:	2000      	movs	r0, #0
 800afc8:	eeb0 0a67 	vmov.f32	s0, s15
 800afcc:	f7f8 fd50 	bl	8003a70 <pid_calculate_pitch>
 800afd0:	eef0 7a40 	vmov.f32	s15, s0
 800afd4:	4b6f      	ldr	r3, [pc, #444]	; (800b194 <CL_main+0x218>)
 800afd6:	edc3 7a00 	vstr	s15, [r3]

			/*******    Roll PID calculation  ********/

			pid_output_roll = pid_calculate_roll(imu_roll, 0, roll_setpoint);
 800afda:	4b65      	ldr	r3, [pc, #404]	; (800b170 <CL_main+0x1f4>)
 800afdc:	edd3 7a00 	vldr	s15, [r3]
 800afe0:	4b67      	ldr	r3, [pc, #412]	; (800b180 <CL_main+0x204>)
 800afe2:	ed93 7a00 	vldr	s14, [r3]
 800afe6:	eef0 0a47 	vmov.f32	s1, s14
 800afea:	2000      	movs	r0, #0
 800afec:	eeb0 0a67 	vmov.f32	s0, s15
 800aff0:	f7f8 fc74 	bl	80038dc <pid_calculate_roll>
 800aff4:	eef0 7a40 	vmov.f32	s15, s0
 800aff8:	4b67      	ldr	r3, [pc, #412]	; (800b198 <CL_main+0x21c>)
 800affa:	edc3 7a00 	vstr	s15, [r3]
 800affe:	e011      	b.n	800b024 <CL_main+0xa8>

			/*******    Yaw PID calculation  ********/

			//pid_output_yaw = pid_calculate_yaw(imu_yaw, 0, yaw_setpoint);
		} else {
			pid_output_roll = 0;
 800b000:	4b65      	ldr	r3, [pc, #404]	; (800b198 <CL_main+0x21c>)
 800b002:	f04f 0200 	mov.w	r2, #0
 800b006:	601a      	str	r2, [r3, #0]
			pid_output_pitch = 0;
 800b008:	4b62      	ldr	r3, [pc, #392]	; (800b194 <CL_main+0x218>)
 800b00a:	f04f 0200 	mov.w	r2, #0
 800b00e:	601a      	str	r2, [r3, #0]
			pid_output_yaw = 0;
 800b010:	4b62      	ldr	r3, [pc, #392]	; (800b19c <CL_main+0x220>)
 800b012:	f04f 0200 	mov.w	r2, #0
 800b016:	601a      	str	r2, [r3, #0]
			reset_pid_roll();
 800b018:	f7f8 fd0a 	bl	8003a30 <reset_pid_roll>
			reset_pid_pitch();
 800b01c:	f7f8 fdd2 	bl	8003bc4 <reset_pid_pitch>
			reset_pid_yaw();
 800b020:	f7f8 fdf0 	bl	8003c04 <reset_pid_yaw>
			printToPC();
		}
#endif

		//Calculate new pulse width values
		esc1_total = throttle - (int) pid_output_roll - (int) pid_output_pitch;
 800b024:	4b58      	ldr	r3, [pc, #352]	; (800b188 <CL_main+0x20c>)
 800b026:	881b      	ldrh	r3, [r3, #0]
 800b028:	461a      	mov	r2, r3
 800b02a:	4b5b      	ldr	r3, [pc, #364]	; (800b198 <CL_main+0x21c>)
 800b02c:	edd3 7a00 	vldr	s15, [r3]
 800b030:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b034:	ee17 3a90 	vmov	r3, s15
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	4a56      	ldr	r2, [pc, #344]	; (800b194 <CL_main+0x218>)
 800b03c:	edd2 7a00 	vldr	s15, [r2]
 800b040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b044:	ee17 2a90 	vmov	r2, s15
 800b048:	1a9b      	subs	r3, r3, r2
 800b04a:	4a55      	ldr	r2, [pc, #340]	; (800b1a0 <CL_main+0x224>)
 800b04c:	6013      	str	r3, [r2, #0]
		esc2_total = throttle - (int) pid_output_roll + (int) pid_output_pitch;
 800b04e:	4b4e      	ldr	r3, [pc, #312]	; (800b188 <CL_main+0x20c>)
 800b050:	881b      	ldrh	r3, [r3, #0]
 800b052:	461a      	mov	r2, r3
 800b054:	4b50      	ldr	r3, [pc, #320]	; (800b198 <CL_main+0x21c>)
 800b056:	edd3 7a00 	vldr	s15, [r3]
 800b05a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b05e:	ee17 3a90 	vmov	r3, s15
 800b062:	1ad3      	subs	r3, r2, r3
 800b064:	4a4b      	ldr	r2, [pc, #300]	; (800b194 <CL_main+0x218>)
 800b066:	edd2 7a00 	vldr	s15, [r2]
 800b06a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b06e:	ee17 2a90 	vmov	r2, s15
 800b072:	4413      	add	r3, r2
 800b074:	4a4b      	ldr	r2, [pc, #300]	; (800b1a4 <CL_main+0x228>)
 800b076:	6013      	str	r3, [r2, #0]
		esc3_total = (throttle) + (int) pid_output_roll
 800b078:	4b43      	ldr	r3, [pc, #268]	; (800b188 <CL_main+0x20c>)
 800b07a:	881b      	ldrh	r3, [r3, #0]
 800b07c:	461a      	mov	r2, r3
 800b07e:	4b46      	ldr	r3, [pc, #280]	; (800b198 <CL_main+0x21c>)
 800b080:	edd3 7a00 	vldr	s15, [r3]
 800b084:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b088:	ee17 3a90 	vmov	r3, s15
 800b08c:	4413      	add	r3, r2
				- (int) pid_output_pitch;
 800b08e:	4a41      	ldr	r2, [pc, #260]	; (800b194 <CL_main+0x218>)
 800b090:	edd2 7a00 	vldr	s15, [r2]
 800b094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b098:	ee17 2a90 	vmov	r2, s15
 800b09c:	1a9b      	subs	r3, r3, r2
		esc3_total = (throttle) + (int) pid_output_roll
 800b09e:	4a42      	ldr	r2, [pc, #264]	; (800b1a8 <CL_main+0x22c>)
 800b0a0:	6013      	str	r3, [r2, #0]
		esc4_total = (throttle) + (int) pid_output_roll
 800b0a2:	4b39      	ldr	r3, [pc, #228]	; (800b188 <CL_main+0x20c>)
 800b0a4:	881b      	ldrh	r3, [r3, #0]
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	4b3b      	ldr	r3, [pc, #236]	; (800b198 <CL_main+0x21c>)
 800b0aa:	edd3 7a00 	vldr	s15, [r3]
 800b0ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b0b2:	ee17 3a90 	vmov	r3, s15
 800b0b6:	4413      	add	r3, r2
				+ (int) pid_output_pitch;
 800b0b8:	4a36      	ldr	r2, [pc, #216]	; (800b194 <CL_main+0x218>)
 800b0ba:	edd2 7a00 	vldr	s15, [r2]
 800b0be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b0c2:	ee17 2a90 	vmov	r2, s15
 800b0c6:	4413      	add	r3, r2
		esc4_total = (throttle) + (int) pid_output_roll
 800b0c8:	4a38      	ldr	r2, [pc, #224]	; (800b1ac <CL_main+0x230>)
 800b0ca:	6013      	str	r3, [r2, #0]

		//Clip PWM values to make sure they don't go outside of range
		if (esc1_total < ESC_MIN) {
 800b0cc:	4b34      	ldr	r3, [pc, #208]	; (800b1a0 <CL_main+0x224>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	dc03      	bgt.n	800b0e0 <CL_main+0x164>
			esc1_total = ESC_MIN;
 800b0d8:	4b31      	ldr	r3, [pc, #196]	; (800b1a0 <CL_main+0x224>)
 800b0da:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800b0de:	601a      	str	r2, [r3, #0]
		}
		if (esc1_total > ESC_MAX) {
 800b0e0:	4b2f      	ldr	r3, [pc, #188]	; (800b1a0 <CL_main+0x224>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	dd03      	ble.n	800b0f4 <CL_main+0x178>
			esc1_total = ESC_MAX;
 800b0ec:	4b2c      	ldr	r3, [pc, #176]	; (800b1a0 <CL_main+0x224>)
 800b0ee:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b0f2:	601a      	str	r2, [r3, #0]
		}
		if (esc2_total < ESC_MIN) {
 800b0f4:	4b2b      	ldr	r3, [pc, #172]	; (800b1a4 <CL_main+0x228>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	dc03      	bgt.n	800b108 <CL_main+0x18c>
			esc2_total = ESC_MIN;
 800b100:	4b28      	ldr	r3, [pc, #160]	; (800b1a4 <CL_main+0x228>)
 800b102:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800b106:	601a      	str	r2, [r3, #0]
		}
		if (esc2_total > ESC_MAX) {
 800b108:	4b26      	ldr	r3, [pc, #152]	; (800b1a4 <CL_main+0x228>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b110:	4293      	cmp	r3, r2
 800b112:	dd03      	ble.n	800b11c <CL_main+0x1a0>
			esc2_total = ESC_MAX;
 800b114:	4b23      	ldr	r3, [pc, #140]	; (800b1a4 <CL_main+0x228>)
 800b116:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b11a:	601a      	str	r2, [r3, #0]
		}
		if (esc3_total < ESC_MIN) {
 800b11c:	4b22      	ldr	r3, [pc, #136]	; (800b1a8 <CL_main+0x22c>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b124:	4293      	cmp	r3, r2
 800b126:	dc03      	bgt.n	800b130 <CL_main+0x1b4>
			esc3_total = ESC_MIN;
 800b128:	4b1f      	ldr	r3, [pc, #124]	; (800b1a8 <CL_main+0x22c>)
 800b12a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800b12e:	601a      	str	r2, [r3, #0]
		}
		if (esc3_total > ESC_MAX) {
 800b130:	4b1d      	ldr	r3, [pc, #116]	; (800b1a8 <CL_main+0x22c>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b138:	4293      	cmp	r3, r2
 800b13a:	dd03      	ble.n	800b144 <CL_main+0x1c8>
			esc3_total = ESC_MAX;
 800b13c:	4b1a      	ldr	r3, [pc, #104]	; (800b1a8 <CL_main+0x22c>)
 800b13e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b142:	601a      	str	r2, [r3, #0]
		}
		if (esc4_total < ESC_MIN) {
 800b144:	4b19      	ldr	r3, [pc, #100]	; (800b1ac <CL_main+0x230>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b14c:	4293      	cmp	r3, r2
 800b14e:	dc03      	bgt.n	800b158 <CL_main+0x1dc>
			esc4_total = ESC_MIN;
 800b150:	4b16      	ldr	r3, [pc, #88]	; (800b1ac <CL_main+0x230>)
 800b152:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800b156:	601a      	str	r2, [r3, #0]
		}
		if (esc4_total > ESC_MAX) {
 800b158:	4b14      	ldr	r3, [pc, #80]	; (800b1ac <CL_main+0x230>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b160:	4293      	cmp	r3, r2
 800b162:	dd03      	ble.n	800b16c <CL_main+0x1f0>
			esc4_total = ESC_MAX;
 800b164:	4b11      	ldr	r3, [pc, #68]	; (800b1ac <CL_main+0x230>)
 800b166:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b16a:	601a      	str	r2, [r3, #0]

#endif



}
 800b16c:	bf00      	nop
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	20003f3c 	.word	0x20003f3c
 800b174:	20003f40 	.word	0x20003f40
 800b178:	20003f44 	.word	0x20003f44
 800b17c:	20003f50 	.word	0x20003f50
 800b180:	20003f48 	.word	0x20003f48
 800b184:	20003f4c 	.word	0x20003f4c
 800b188:	20003f60 	.word	0x20003f60
 800b18c:	20004338 	.word	0x20004338
 800b190:	00000000 	.word	0x00000000
 800b194:	20003f58 	.word	0x20003f58
 800b198:	20003f54 	.word	0x20003f54
 800b19c:	20003f5c 	.word	0x20003f5c
 800b1a0:	20003f64 	.word	0x20003f64
 800b1a4:	20003f68 	.word	0x20003f68
 800b1a8:	20003f6c 	.word	0x20003f6c
 800b1ac:	20003f70 	.word	0x20003f70

0800b1b0 <PWM1_Set>:

}


//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	80fb      	strh	r3, [r7, #6]
	htim4.Instance->CCR1 = value;
 800b1ba:	4b05      	ldr	r3, [pc, #20]	; (800b1d0 <PWM1_Set+0x20>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	88fa      	ldrh	r2, [r7, #6]
 800b1c0:	635a      	str	r2, [r3, #52]	; 0x34
}
 800b1c2:	bf00      	nop
 800b1c4:	370c      	adds	r7, #12
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	20004878 	.word	0x20004878

0800b1d4 <PWM2_Set>:

void PWM2_Set(uint16_t value) {
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	4603      	mov	r3, r0
 800b1dc:	80fb      	strh	r3, [r7, #6]
	htim4.Instance->CCR2 = value;
 800b1de:	4b05      	ldr	r3, [pc, #20]	; (800b1f4 <PWM2_Set+0x20>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	88fa      	ldrh	r2, [r7, #6]
 800b1e4:	639a      	str	r2, [r3, #56]	; 0x38

}
 800b1e6:	bf00      	nop
 800b1e8:	370c      	adds	r7, #12
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	20004878 	.word	0x20004878

0800b1f8 <PWM3_Set>:

void PWM3_Set(uint16_t value) {
 800b1f8:	b480      	push	{r7}
 800b1fa:	b083      	sub	sp, #12
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	4603      	mov	r3, r0
 800b200:	80fb      	strh	r3, [r7, #6]
	htim4.Instance->CCR3 = value;
 800b202:	4b05      	ldr	r3, [pc, #20]	; (800b218 <PWM3_Set+0x20>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	88fa      	ldrh	r2, [r7, #6]
 800b208:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b20a:	bf00      	nop
 800b20c:	370c      	adds	r7, #12
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	20004878 	.word	0x20004878

0800b21c <PWM4_Set>:

void PWM4_Set(uint16_t value) {
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	4603      	mov	r3, r0
 800b224:	80fb      	strh	r3, [r7, #6]
	htim4.Instance->CCR4 = value;
 800b226:	4b05      	ldr	r3, [pc, #20]	; (800b23c <PWM4_Set+0x20>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	88fa      	ldrh	r2, [r7, #6]
 800b22c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800b22e:	bf00      	nop
 800b230:	370c      	adds	r7, #12
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	20004878 	.word	0x20004878

0800b240 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800b244:	4b06      	ldr	r3, [pc, #24]	; (800b260 <MX_CRC_Init+0x20>)
 800b246:	4a07      	ldr	r2, [pc, #28]	; (800b264 <MX_CRC_Init+0x24>)
 800b248:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800b24a:	4805      	ldr	r0, [pc, #20]	; (800b260 <MX_CRC_Init+0x20>)
 800b24c:	f7f8 fe80 	bl	8003f50 <HAL_CRC_Init>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d001      	beq.n	800b25a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800b256:	f000 fb89 	bl	800b96c <Error_Handler>
  }

}
 800b25a:	bf00      	nop
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	20004378 	.word	0x20004378
 800b264:	40023000 	.word	0x40023000

0800b268 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a0b      	ldr	r2, [pc, #44]	; (800b2a4 <HAL_CRC_MspInit+0x3c>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d10d      	bne.n	800b296 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800b27a:	2300      	movs	r3, #0
 800b27c:	60fb      	str	r3, [r7, #12]
 800b27e:	4b0a      	ldr	r3, [pc, #40]	; (800b2a8 <HAL_CRC_MspInit+0x40>)
 800b280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b282:	4a09      	ldr	r2, [pc, #36]	; (800b2a8 <HAL_CRC_MspInit+0x40>)
 800b284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b288:	6313      	str	r3, [r2, #48]	; 0x30
 800b28a:	4b07      	ldr	r3, [pc, #28]	; (800b2a8 <HAL_CRC_MspInit+0x40>)
 800b28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b28e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b292:	60fb      	str	r3, [r7, #12]
 800b294:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800b296:	bf00      	nop
 800b298:	3714      	adds	r7, #20
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop
 800b2a4:	40023000 	.word	0x40023000
 800b2a8:	40023800 	.word	0x40023800

0800b2ac <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	607b      	str	r3, [r7, #4]
 800b2b6:	4b0c      	ldr	r3, [pc, #48]	; (800b2e8 <MX_DMA_Init+0x3c>)
 800b2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ba:	4a0b      	ldr	r2, [pc, #44]	; (800b2e8 <MX_DMA_Init+0x3c>)
 800b2bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b2c0:	6313      	str	r3, [r2, #48]	; 0x30
 800b2c2:	4b09      	ldr	r3, [pc, #36]	; (800b2e8 <MX_DMA_Init+0x3c>)
 800b2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2ca:	607b      	str	r3, [r7, #4]
 800b2cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	2106      	movs	r1, #6
 800b2d2:	2039      	movs	r0, #57	; 0x39
 800b2d4:	f7f8 fe12 	bl	8003efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800b2d8:	2039      	movs	r0, #57	; 0x39
 800b2da:	f7f8 fe2b 	bl	8003f34 <HAL_NVIC_EnableIRQ>

}
 800b2de:	bf00      	nop
 800b2e0:	3708      	adds	r7, #8
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	40023800 	.word	0x40023800

0800b2ec <getGPSData>:
	}
	//}

}

void getGPSData(uint8_t *ack_payload_1) {
 800b2ec:	b590      	push	{r4, r7, lr}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]

	//Goto element [1]
	ack_payload_1++;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	607b      	str	r3, [r7, #4]

	//[1] = no of sattelites tracked
	*ack_payload_1 = GPS.sattelite_no;
 800b2fa:	4b5b      	ldr	r3, [pc, #364]	; (800b468 <getGPSData+0x17c>)
 800b2fc:	7e1a      	ldrb	r2, [r3, #24]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	3301      	adds	r3, #1
 800b306:	607b      	str	r3, [r7, #4]
	//[2] = Fix quality
	*ack_payload_1 = GPS.fix_quality;
 800b308:	4b57      	ldr	r3, [pc, #348]	; (800b468 <getGPSData+0x17c>)
 800b30a:	7e5a      	ldrb	r2, [r3, #25]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	3301      	adds	r3, #1
 800b314:	607b      	str	r3, [r7, #4]
	//[3] = Day
	*ack_payload_1 = GPS.Day;
 800b316:	4b54      	ldr	r3, [pc, #336]	; (800b468 <getGPSData+0x17c>)
 800b318:	781a      	ldrb	r2, [r3, #0]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	3301      	adds	r3, #1
 800b322:	607b      	str	r3, [r7, #4]
	//[4] = Month
	*ack_payload_1 = GPS.Month;
 800b324:	4b50      	ldr	r3, [pc, #320]	; (800b468 <getGPSData+0x17c>)
 800b326:	785a      	ldrb	r2, [r3, #1]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	3301      	adds	r3, #1
 800b330:	607b      	str	r3, [r7, #4]
	//[5] = Year
	*ack_payload_1 = GPS.Year;
 800b332:	4b4d      	ldr	r3, [pc, #308]	; (800b468 <getGPSData+0x17c>)
 800b334:	789a      	ldrb	r2, [r3, #2]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	3301      	adds	r3, #1
 800b33e:	607b      	str	r3, [r7, #4]
	//[6] = Hour
	*ack_payload_1 = GPS.Hours;
 800b340:	4b49      	ldr	r3, [pc, #292]	; (800b468 <getGPSData+0x17c>)
 800b342:	78da      	ldrb	r2, [r3, #3]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	3301      	adds	r3, #1
 800b34c:	607b      	str	r3, [r7, #4]
	//[7] = Minutes
	*ack_payload_1 = GPS.Minutes;
 800b34e:	4b46      	ldr	r3, [pc, #280]	; (800b468 <getGPSData+0x17c>)
 800b350:	791a      	ldrb	r2, [r3, #4]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	3301      	adds	r3, #1
 800b35a:	607b      	str	r3, [r7, #4]
	//[8] = Seconds
	*ack_payload_1 = GPS.Seconds;
 800b35c:	4b42      	ldr	r3, [pc, #264]	; (800b468 <getGPSData+0x17c>)
 800b35e:	795a      	ldrb	r2, [r3, #5]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	3301      	adds	r3, #1
 800b368:	607b      	str	r3, [r7, #4]

	//[9] - [10] = GPS speed in KM/H
	int16_t GPS_speed_tx = round(GPS.Speed * 100);
 800b36a:	4b3f      	ldr	r3, [pc, #252]	; (800b468 <getGPSData+0x17c>)
 800b36c:	edd3 7a04 	vldr	s15, [r3, #16]
 800b370:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800b46c <getGPSData+0x180>
 800b374:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b378:	ee17 0a90 	vmov	r0, s15
 800b37c:	f7f5 f8ec 	bl	8000558 <__aeabi_f2d>
 800b380:	4603      	mov	r3, r0
 800b382:	460c      	mov	r4, r1
 800b384:	ec44 3b10 	vmov	d0, r3, r4
 800b388:	f002 f894 	bl	800d4b4 <round>
 800b38c:	ec54 3b10 	vmov	r3, r4, d0
 800b390:	4618      	mov	r0, r3
 800b392:	4621      	mov	r1, r4
 800b394:	f7f5 fbe8 	bl	8000b68 <__aeabi_d2iz>
 800b398:	4603      	mov	r3, r0
 800b39a:	81fb      	strh	r3, [r7, #14]
	*ack_payload_1 = GPS_speed_tx;
 800b39c:	89fb      	ldrh	r3, [r7, #14]
 800b39e:	b2da      	uxtb	r2, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	607b      	str	r3, [r7, #4]
	*ack_payload_1 = GPS_speed_tx >> 8;
 800b3aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b3ae:	121b      	asrs	r3, r3, #8
 800b3b0:	b21b      	sxth	r3, r3
 800b3b2:	b2da      	uxtb	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	607b      	str	r3, [r7, #4]

	//[11] - [14] = Longitude
	unsigned char temp[sizeof(float)];
	memcpy(temp, &GPS.Longitude, sizeof(float));
 800b3be:	4b2a      	ldr	r3, [pc, #168]	; (800b468 <getGPSData+0x17c>)
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	60bb      	str	r3, [r7, #8]

	*ack_payload_1 = temp[0];
 800b3c4:	7a3a      	ldrb	r2, [r7, #8]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	607b      	str	r3, [r7, #4]
	*ack_payload_1 = temp[1];
 800b3d0:	7a7a      	ldrb	r2, [r7, #9]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	607b      	str	r3, [r7, #4]
	*ack_payload_1 = temp[2];
 800b3dc:	7aba      	ldrb	r2, [r7, #10]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	607b      	str	r3, [r7, #4]
	*ack_payload_1 = temp[3];
 800b3e8:	7afa      	ldrb	r2, [r7, #11]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	607b      	str	r3, [r7, #4]

	//[15] - [18] = Longitude
	memcpy(temp, &GPS.Latitude, sizeof(GPS.Latitude));
 800b3f4:	4b1c      	ldr	r3, [pc, #112]	; (800b468 <getGPSData+0x17c>)
 800b3f6:	68db      	ldr	r3, [r3, #12]
 800b3f8:	60bb      	str	r3, [r7, #8]

	*ack_payload_1 = temp[0];
 800b3fa:	7a3a      	ldrb	r2, [r7, #8]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	3301      	adds	r3, #1
 800b404:	607b      	str	r3, [r7, #4]
	*ack_payload_1 = temp[1];
 800b406:	7a7a      	ldrb	r2, [r7, #9]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	3301      	adds	r3, #1
 800b410:	607b      	str	r3, [r7, #4]
	*ack_payload_1 = temp[2];
 800b412:	7aba      	ldrb	r2, [r7, #10]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	3301      	adds	r3, #1
 800b41c:	607b      	str	r3, [r7, #4]
	*ack_payload_1 = temp[3];
 800b41e:	7afa      	ldrb	r2, [r7, #11]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	3301      	adds	r3, #1
 800b428:	607b      	str	r3, [r7, #4]

	//[19] - [22] = Longitude
	memcpy(temp, &GPS.Altitude, sizeof(GPS.Altitude));
 800b42a:	4b0f      	ldr	r3, [pc, #60]	; (800b468 <getGPSData+0x17c>)
 800b42c:	695b      	ldr	r3, [r3, #20]
 800b42e:	60bb      	str	r3, [r7, #8]

	*ack_payload_1 = temp[0];
 800b430:	7a3a      	ldrb	r2, [r7, #8]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	3301      	adds	r3, #1
 800b43a:	607b      	str	r3, [r7, #4]
	*ack_payload_1 = temp[1];
 800b43c:	7a7a      	ldrb	r2, [r7, #9]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	3301      	adds	r3, #1
 800b446:	607b      	str	r3, [r7, #4]
	*ack_payload_1 = temp[2];
 800b448:	7aba      	ldrb	r2, [r7, #10]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	3301      	adds	r3, #1
 800b452:	607b      	str	r3, [r7, #4]
	*ack_payload_1 = temp[3];
 800b454:	7afa      	ldrb	r2, [r7, #11]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	701a      	strb	r2, [r3, #0]
	ack_payload_1++;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	3301      	adds	r3, #1
 800b45e:	607b      	str	r3, [r7, #4]

}
 800b460:	bf00      	nop
 800b462:	3714      	adds	r7, #20
 800b464:	46bd      	mov	sp, r7
 800b466:	bd90      	pop	{r4, r7, pc}
 800b468:	200047c0 	.word	0x200047c0
 800b46c:	42c80000 	.word	0x42c80000

0800b470 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	4a07      	ldr	r2, [pc, #28]	; (800b49c <vApplicationGetIdleTaskMemory+0x2c>)
 800b480:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	4a06      	ldr	r2, [pc, #24]	; (800b4a0 <vApplicationGetIdleTaskMemory+0x30>)
 800b486:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2280      	movs	r2, #128	; 0x80
 800b48c:	601a      	str	r2, [r3, #0]
	/* place for user code */
}
 800b48e:	bf00      	nop
 800b490:	3714      	adds	r7, #20
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop
 800b49c:	20003f74 	.word	0x20003f74
 800b4a0:	20003fc8 	.word	0x20003fc8

0800b4a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800b4a4:	b5b0      	push	{r4, r5, r7, lr}
 800b4a6:	b090      	sub	sp, #64	; 0x40
 800b4a8:	af00      	add	r7, sp, #0

  /* USER CODE END Init */

  /* Create the mutex(es) */
  /* definition and creation of GPSDataMutex */
  osMutexDef(GPSDataMutex);
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPSDataMutexHandle = osMutexCreate(osMutex(GPSDataMutex));
 800b4b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7fd fa89 	bl	80089ce <osMutexCreate>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	4b15      	ldr	r3, [pc, #84]	; (800b514 <MX_FREERTOS_Init+0x70>)
 800b4c0:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ControlLoop */
  osThreadDef(ControlLoop, StartControlLoop, osPriorityRealtime, 0, 1024);
 800b4c2:	4b15      	ldr	r3, [pc, #84]	; (800b518 <MX_FREERTOS_Init+0x74>)
 800b4c4:	f107 041c 	add.w	r4, r7, #28
 800b4c8:	461d      	mov	r5, r3
 800b4ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b4d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlLoopHandle = osThreadCreate(osThread(ControlLoop), NULL);
 800b4d6:	f107 031c 	add.w	r3, r7, #28
 800b4da:	2100      	movs	r1, #0
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7fd fa16 	bl	800890e <osThreadCreate>
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	4b0d      	ldr	r3, [pc, #52]	; (800b51c <MX_FREERTOS_Init+0x78>)
 800b4e6:	601a      	str	r2, [r3, #0]

  /* definition and creation of GPSUpdate */
  osThreadDef(GPSUpdate, StartGPSUpdate, osPriorityIdle, 0, 128);
 800b4e8:	4b0d      	ldr	r3, [pc, #52]	; (800b520 <MX_FREERTOS_Init+0x7c>)
 800b4ea:	463c      	mov	r4, r7
 800b4ec:	461d      	mov	r5, r3
 800b4ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b4f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b4f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GPSUpdateHandle = osThreadCreate(osThread(GPSUpdate), NULL);
 800b4fa:	463b      	mov	r3, r7
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	4618      	mov	r0, r3
 800b500:	f7fd fa05 	bl	800890e <osThreadCreate>
 800b504:	4602      	mov	r2, r0
 800b506:	4b07      	ldr	r3, [pc, #28]	; (800b524 <MX_FREERTOS_Init+0x80>)
 800b508:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800b50a:	bf00      	nop
 800b50c:	3740      	adds	r7, #64	; 0x40
 800b50e:	46bd      	mov	sp, r7
 800b510:	bdb0      	pop	{r4, r5, r7, pc}
 800b512:	bf00      	nop
 800b514:	200047dc 	.word	0x200047dc
 800b518:	0800f610 	.word	0x0800f610
 800b51c:	20004380 	.word	0x20004380
 800b520:	0800f638 	.word	0x0800f638
 800b524:	20004384 	.word	0x20004384

0800b528 <StartControlLoop>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControlLoop */
void StartControlLoop(void const * argument)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
    
    

  /* USER CODE BEGIN StartControlLoop */

	CL_init();
 800b530:	f7ff fcec 	bl	800af0c <CL_init>

	/* Infinite loop */
	for (;;) {

		CL_main();
 800b534:	f7ff fd22 	bl	800af7c <CL_main>
		osDelay(2);
 800b538:	2002      	movs	r0, #2
 800b53a:	f7fd fa34 	bl	80089a6 <osDelay>
		CL_main();
 800b53e:	e7f9      	b.n	800b534 <StartControlLoop+0xc>

0800b540 <StartGPSUpdate>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGPSUpdate */
void StartGPSUpdate(void const * argument)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]



	/* Infinite loop */
	for (;;) {
		osDelay(10);
 800b548:	200a      	movs	r0, #10
 800b54a:	f7fd fa2c 	bl	80089a6 <osDelay>
 800b54e:	e7fb      	b.n	800b548 <StartGPSUpdate+0x8>

0800b550 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b08a      	sub	sp, #40	; 0x28
 800b554:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b556:	f107 0314 	add.w	r3, r7, #20
 800b55a:	2200      	movs	r2, #0
 800b55c:	601a      	str	r2, [r3, #0]
 800b55e:	605a      	str	r2, [r3, #4]
 800b560:	609a      	str	r2, [r3, #8]
 800b562:	60da      	str	r2, [r3, #12]
 800b564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b566:	2300      	movs	r3, #0
 800b568:	613b      	str	r3, [r7, #16]
 800b56a:	4b6b      	ldr	r3, [pc, #428]	; (800b718 <MX_GPIO_Init+0x1c8>)
 800b56c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b56e:	4a6a      	ldr	r2, [pc, #424]	; (800b718 <MX_GPIO_Init+0x1c8>)
 800b570:	f043 0304 	orr.w	r3, r3, #4
 800b574:	6313      	str	r3, [r2, #48]	; 0x30
 800b576:	4b68      	ldr	r3, [pc, #416]	; (800b718 <MX_GPIO_Init+0x1c8>)
 800b578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b57a:	f003 0304 	and.w	r3, r3, #4
 800b57e:	613b      	str	r3, [r7, #16]
 800b580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b582:	2300      	movs	r3, #0
 800b584:	60fb      	str	r3, [r7, #12]
 800b586:	4b64      	ldr	r3, [pc, #400]	; (800b718 <MX_GPIO_Init+0x1c8>)
 800b588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b58a:	4a63      	ldr	r2, [pc, #396]	; (800b718 <MX_GPIO_Init+0x1c8>)
 800b58c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b590:	6313      	str	r3, [r2, #48]	; 0x30
 800b592:	4b61      	ldr	r3, [pc, #388]	; (800b718 <MX_GPIO_Init+0x1c8>)
 800b594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b59a:	60fb      	str	r3, [r7, #12]
 800b59c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b59e:	2300      	movs	r3, #0
 800b5a0:	60bb      	str	r3, [r7, #8]
 800b5a2:	4b5d      	ldr	r3, [pc, #372]	; (800b718 <MX_GPIO_Init+0x1c8>)
 800b5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a6:	4a5c      	ldr	r2, [pc, #368]	; (800b718 <MX_GPIO_Init+0x1c8>)
 800b5a8:	f043 0301 	orr.w	r3, r3, #1
 800b5ac:	6313      	str	r3, [r2, #48]	; 0x30
 800b5ae:	4b5a      	ldr	r3, [pc, #360]	; (800b718 <MX_GPIO_Init+0x1c8>)
 800b5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5b2:	f003 0301 	and.w	r3, r3, #1
 800b5b6:	60bb      	str	r3, [r7, #8]
 800b5b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	607b      	str	r3, [r7, #4]
 800b5be:	4b56      	ldr	r3, [pc, #344]	; (800b718 <MX_GPIO_Init+0x1c8>)
 800b5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5c2:	4a55      	ldr	r2, [pc, #340]	; (800b718 <MX_GPIO_Init+0x1c8>)
 800b5c4:	f043 0302 	orr.w	r3, r3, #2
 800b5c8:	6313      	str	r3, [r2, #48]	; 0x30
 800b5ca:	4b53      	ldr	r3, [pc, #332]	; (800b718 <MX_GPIO_Init+0x1c8>)
 800b5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ce:	f003 0302 	and.w	r3, r3, #2
 800b5d2:	607b      	str	r3, [r7, #4]
 800b5d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	603b      	str	r3, [r7, #0]
 800b5da:	4b4f      	ldr	r3, [pc, #316]	; (800b718 <MX_GPIO_Init+0x1c8>)
 800b5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5de:	4a4e      	ldr	r2, [pc, #312]	; (800b718 <MX_GPIO_Init+0x1c8>)
 800b5e0:	f043 0308 	orr.w	r3, r3, #8
 800b5e4:	6313      	str	r3, [r2, #48]	; 0x30
 800b5e6:	4b4c      	ldr	r3, [pc, #304]	; (800b718 <MX_GPIO_Init+0x1c8>)
 800b5e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ea:	f003 0308 	and.w	r3, r3, #8
 800b5ee:	603b      	str	r3, [r7, #0]
 800b5f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	2120      	movs	r1, #32
 800b5f6:	4849      	ldr	r0, [pc, #292]	; (800b71c <MX_GPIO_Init+0x1cc>)
 800b5f8:	f7f9 fafe 	bl	8004bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	2120      	movs	r1, #32
 800b600:	4847      	ldr	r0, [pc, #284]	; (800b720 <MX_GPIO_Init+0x1d0>)
 800b602:	f7f9 faf9 	bl	8004bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 800b606:	2200      	movs	r2, #0
 800b608:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800b60c:	4845      	ldr	r0, [pc, #276]	; (800b724 <MX_GPIO_Init+0x1d4>)
 800b60e:	f7f9 faf3 	bl	8004bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0 
                           PC1 PC3 PC4 PC8 
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 800b612:	f64f 731b 	movw	r3, #65307	; 0xff1b
 800b616:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b618:	2303      	movs	r3, #3
 800b61a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b61c:	2300      	movs	r3, #0
 800b61e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b620:	f107 0314 	add.w	r3, r7, #20
 800b624:	4619      	mov	r1, r3
 800b626:	483e      	ldr	r0, [pc, #248]	; (800b720 <MX_GPIO_Init+0x1d0>)
 800b628:	f7f9 f964 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b62c:	2303      	movs	r3, #3
 800b62e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b630:	2303      	movs	r3, #3
 800b632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b634:	2300      	movs	r3, #0
 800b636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b638:	f107 0314 	add.w	r3, r7, #20
 800b63c:	4619      	mov	r1, r3
 800b63e:	483a      	ldr	r0, [pc, #232]	; (800b728 <MX_GPIO_Init+0x1d8>)
 800b640:	f7f9 f958 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA6 PA7 PA9 
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800b644:	f649 63df 	movw	r3, #40671	; 0x9edf
 800b648:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b64a:	2303      	movs	r3, #3
 800b64c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b64e:	2300      	movs	r3, #0
 800b650:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b652:	f107 0314 	add.w	r3, r7, #20
 800b656:	4619      	mov	r1, r3
 800b658:	4830      	ldr	r0, [pc, #192]	; (800b71c <MX_GPIO_Init+0x1cc>)
 800b65a:	f7f9 f94b 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800b65e:	2320      	movs	r3, #32
 800b660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b662:	2301      	movs	r3, #1
 800b664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b666:	2300      	movs	r3, #0
 800b668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b66a:	2300      	movs	r3, #0
 800b66c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b66e:	f107 0314 	add.w	r3, r7, #20
 800b672:	4619      	mov	r1, r3
 800b674:	4829      	ldr	r0, [pc, #164]	; (800b71c <MX_GPIO_Init+0x1cc>)
 800b676:	f7f9 f93d 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800b67a:	2320      	movs	r3, #32
 800b67c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b67e:	2301      	movs	r3, #1
 800b680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b682:	2300      	movs	r3, #0
 800b684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b686:	2300      	movs	r3, #0
 800b688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b68a:	f107 0314 	add.w	r3, r7, #20
 800b68e:	4619      	mov	r1, r3
 800b690:	4823      	ldr	r0, [pc, #140]	; (800b720 <MX_GPIO_Init+0x1d0>)
 800b692:	f7f9 f92f 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4 
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 800b696:	2337      	movs	r3, #55	; 0x37
 800b698:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b69a:	2303      	movs	r3, #3
 800b69c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b6a2:	f107 0314 	add.w	r3, r7, #20
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	481e      	ldr	r0, [pc, #120]	; (800b724 <MX_GPIO_Init+0x1d4>)
 800b6aa:	f7f9 f923 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800b6ae:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800b6b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b6c0:	f107 0314 	add.w	r3, r7, #20
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	4817      	ldr	r0, [pc, #92]	; (800b724 <MX_GPIO_Init+0x1d4>)
 800b6c8:	f7f9 f914 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWM_INT_Pin;
 800b6cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b6d2:	4b16      	ldr	r3, [pc, #88]	; (800b72c <MX_GPIO_Init+0x1dc>)
 800b6d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWM_INT_GPIO_Port, &GPIO_InitStruct);
 800b6da:	f107 0314 	add.w	r3, r7, #20
 800b6de:	4619      	mov	r1, r3
 800b6e0:	480e      	ldr	r0, [pc, #56]	; (800b71c <MX_GPIO_Init+0x1cc>)
 800b6e2:	f7f9 f907 	bl	80048f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800b6e6:	2304      	movs	r3, #4
 800b6e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800b6ea:	2303      	movs	r3, #3
 800b6ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b6f2:	f107 0314 	add.w	r3, r7, #20
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	480d      	ldr	r0, [pc, #52]	; (800b730 <MX_GPIO_Init+0x1e0>)
 800b6fa:	f7f9 f8fb 	bl	80048f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 800b6fe:	2200      	movs	r2, #0
 800b700:	2107      	movs	r1, #7
 800b702:	2017      	movs	r0, #23
 800b704:	f7f8 fbfa 	bl	8003efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800b708:	2017      	movs	r0, #23
 800b70a:	f7f8 fc13 	bl	8003f34 <HAL_NVIC_EnableIRQ>

}
 800b70e:	bf00      	nop
 800b710:	3728      	adds	r7, #40	; 0x28
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	40023800 	.word	0x40023800
 800b71c:	40020000 	.word	0x40020000
 800b720:	40020800 	.word	0x40020800
 800b724:	40020400 	.word	0x40020400
 800b728:	40021c00 	.word	0x40021c00
 800b72c:	10110000 	.word	0x10110000
 800b730:	40020c00 	.word	0x40020c00

0800b734 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800b738:	4b12      	ldr	r3, [pc, #72]	; (800b784 <MX_I2C2_Init+0x50>)
 800b73a:	4a13      	ldr	r2, [pc, #76]	; (800b788 <MX_I2C2_Init+0x54>)
 800b73c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800b73e:	4b11      	ldr	r3, [pc, #68]	; (800b784 <MX_I2C2_Init+0x50>)
 800b740:	4a12      	ldr	r2, [pc, #72]	; (800b78c <MX_I2C2_Init+0x58>)
 800b742:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b744:	4b0f      	ldr	r3, [pc, #60]	; (800b784 <MX_I2C2_Init+0x50>)
 800b746:	2200      	movs	r2, #0
 800b748:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800b74a:	4b0e      	ldr	r3, [pc, #56]	; (800b784 <MX_I2C2_Init+0x50>)
 800b74c:	2200      	movs	r2, #0
 800b74e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b750:	4b0c      	ldr	r3, [pc, #48]	; (800b784 <MX_I2C2_Init+0x50>)
 800b752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b756:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b758:	4b0a      	ldr	r3, [pc, #40]	; (800b784 <MX_I2C2_Init+0x50>)
 800b75a:	2200      	movs	r2, #0
 800b75c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800b75e:	4b09      	ldr	r3, [pc, #36]	; (800b784 <MX_I2C2_Init+0x50>)
 800b760:	2200      	movs	r2, #0
 800b762:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b764:	4b07      	ldr	r3, [pc, #28]	; (800b784 <MX_I2C2_Init+0x50>)
 800b766:	2200      	movs	r2, #0
 800b768:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b76a:	4b06      	ldr	r3, [pc, #24]	; (800b784 <MX_I2C2_Init+0x50>)
 800b76c:	2200      	movs	r2, #0
 800b76e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800b770:	4804      	ldr	r0, [pc, #16]	; (800b784 <MX_I2C2_Init+0x50>)
 800b772:	f7f9 fa99 	bl	8004ca8 <HAL_I2C_Init>
 800b776:	4603      	mov	r3, r0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d001      	beq.n	800b780 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800b77c:	f000 f8f6 	bl	800b96c <Error_Handler>
  }

}
 800b780:	bf00      	nop
 800b782:	bd80      	pop	{r7, pc}
 800b784:	200041f4 	.word	0x200041f4
 800b788:	40005800 	.word	0x40005800
 800b78c:	00061a80 	.word	0x00061a80

0800b790 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b08a      	sub	sp, #40	; 0x28
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b798:	f107 0314 	add.w	r3, r7, #20
 800b79c:	2200      	movs	r2, #0
 800b79e:	601a      	str	r2, [r3, #0]
 800b7a0:	605a      	str	r2, [r3, #4]
 800b7a2:	609a      	str	r2, [r3, #8]
 800b7a4:	60da      	str	r2, [r3, #12]
 800b7a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4a21      	ldr	r2, [pc, #132]	; (800b834 <HAL_I2C_MspInit+0xa4>)
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d13c      	bne.n	800b82c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	613b      	str	r3, [r7, #16]
 800b7b6:	4b20      	ldr	r3, [pc, #128]	; (800b838 <HAL_I2C_MspInit+0xa8>)
 800b7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ba:	4a1f      	ldr	r2, [pc, #124]	; (800b838 <HAL_I2C_MspInit+0xa8>)
 800b7bc:	f043 0302 	orr.w	r3, r3, #2
 800b7c0:	6313      	str	r3, [r2, #48]	; 0x30
 800b7c2:	4b1d      	ldr	r3, [pc, #116]	; (800b838 <HAL_I2C_MspInit+0xa8>)
 800b7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7c6:	f003 0302 	and.w	r3, r3, #2
 800b7ca:	613b      	str	r3, [r7, #16]
 800b7cc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800b7ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b7d4:	2312      	movs	r3, #18
 800b7d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b7e0:	2304      	movs	r3, #4
 800b7e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b7e4:	f107 0314 	add.w	r3, r7, #20
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	4814      	ldr	r0, [pc, #80]	; (800b83c <HAL_I2C_MspInit+0xac>)
 800b7ec:	f7f9 f882 	bl	80048f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800b7f0:	2308      	movs	r3, #8
 800b7f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b7f4:	2312      	movs	r3, #18
 800b7f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7fc:	2303      	movs	r3, #3
 800b7fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800b800:	2309      	movs	r3, #9
 800b802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b804:	f107 0314 	add.w	r3, r7, #20
 800b808:	4619      	mov	r1, r3
 800b80a:	480c      	ldr	r0, [pc, #48]	; (800b83c <HAL_I2C_MspInit+0xac>)
 800b80c:	f7f9 f872 	bl	80048f4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b810:	2300      	movs	r3, #0
 800b812:	60fb      	str	r3, [r7, #12]
 800b814:	4b08      	ldr	r3, [pc, #32]	; (800b838 <HAL_I2C_MspInit+0xa8>)
 800b816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b818:	4a07      	ldr	r2, [pc, #28]	; (800b838 <HAL_I2C_MspInit+0xa8>)
 800b81a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b81e:	6413      	str	r3, [r2, #64]	; 0x40
 800b820:	4b05      	ldr	r3, [pc, #20]	; (800b838 <HAL_I2C_MspInit+0xa8>)
 800b822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b828:	60fb      	str	r3, [r7, #12]
 800b82a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800b82c:	bf00      	nop
 800b82e:	3728      	adds	r7, #40	; 0x28
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	40005800 	.word	0x40005800
 800b838:	40023800 	.word	0x40023800
 800b83c:	40020400 	.word	0x40020400

0800b840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b844:	f7f8 fa3e 	bl	8003cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b848:	f000 f816 	bl	800b878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b84c:	f7ff fe80 	bl	800b550 <MX_GPIO_Init>
  MX_DMA_Init();
 800b850:	f7ff fd2c 	bl	800b2ac <MX_DMA_Init>
  MX_I2C2_Init();
 800b854:	f7ff ff6e 	bl	800b734 <MX_I2C2_Init>
  MX_TIM4_Init();
 800b858:	f000 faf2 	bl	800be40 <MX_TIM4_Init>
  MX_SPI2_Init();
 800b85c:	f000 f88e 	bl	800b97c <MX_SPI2_Init>
  MX_CRC_Init();
 800b860:	f7ff fcee 	bl	800b240 <MX_CRC_Init>
  MX_TIM11_Init();
 800b864:	f000 fb66 	bl	800bf34 <MX_TIM11_Init>
  MX_USART6_UART_Init();
 800b868:	f000 fc06 	bl	800c078 <MX_USART6_UART_Init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 800b86c:	f7ff fe1a 	bl	800b4a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800b870:	f7fd f846 	bl	8008900 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800b874:	e7fe      	b.n	800b874 <main+0x34>
	...

0800b878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b094      	sub	sp, #80	; 0x50
 800b87c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800b87e:	f107 0320 	add.w	r3, r7, #32
 800b882:	2230      	movs	r2, #48	; 0x30
 800b884:	2100      	movs	r1, #0
 800b886:	4618      	mov	r0, r3
 800b888:	f000 fd09 	bl	800c29e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800b88c:	f107 030c 	add.w	r3, r7, #12
 800b890:	2200      	movs	r2, #0
 800b892:	601a      	str	r2, [r3, #0]
 800b894:	605a      	str	r2, [r3, #4]
 800b896:	609a      	str	r2, [r3, #8]
 800b898:	60da      	str	r2, [r3, #12]
 800b89a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800b89c:	2300      	movs	r3, #0
 800b89e:	60bb      	str	r3, [r7, #8]
 800b8a0:	4b27      	ldr	r3, [pc, #156]	; (800b940 <SystemClock_Config+0xc8>)
 800b8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a4:	4a26      	ldr	r2, [pc, #152]	; (800b940 <SystemClock_Config+0xc8>)
 800b8a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8aa:	6413      	str	r3, [r2, #64]	; 0x40
 800b8ac:	4b24      	ldr	r3, [pc, #144]	; (800b940 <SystemClock_Config+0xc8>)
 800b8ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8b4:	60bb      	str	r3, [r7, #8]
 800b8b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	607b      	str	r3, [r7, #4]
 800b8bc:	4b21      	ldr	r3, [pc, #132]	; (800b944 <SystemClock_Config+0xcc>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a20      	ldr	r2, [pc, #128]	; (800b944 <SystemClock_Config+0xcc>)
 800b8c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b8c6:	6013      	str	r3, [r2, #0]
 800b8c8:	4b1e      	ldr	r3, [pc, #120]	; (800b944 <SystemClock_Config+0xcc>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b8d0:	607b      	str	r3, [r7, #4]
 800b8d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800b8d4:	2302      	movs	r3, #2
 800b8d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800b8dc:	2310      	movs	r3, #16
 800b8de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b8e0:	2302      	movs	r3, #2
 800b8e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800b8e8:	2308      	movs	r3, #8
 800b8ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800b8ec:	2364      	movs	r3, #100	; 0x64
 800b8ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800b8f0:	2302      	movs	r3, #2
 800b8f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800b8f4:	2304      	movs	r3, #4
 800b8f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b8f8:	f107 0320 	add.w	r3, r7, #32
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7fa fa4b 	bl	8005d98 <HAL_RCC_OscConfig>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d001      	beq.n	800b90c <SystemClock_Config+0x94>
  {
    Error_Handler();
 800b908:	f000 f830 	bl	800b96c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b90c:	230f      	movs	r3, #15
 800b90e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b910:	2302      	movs	r3, #2
 800b912:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b914:	2300      	movs	r3, #0
 800b916:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800b918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b91c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b91e:	2300      	movs	r3, #0
 800b920:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800b922:	f107 030c 	add.w	r3, r7, #12
 800b926:	2103      	movs	r1, #3
 800b928:	4618      	mov	r0, r3
 800b92a:	f7fa fc77 	bl	800621c <HAL_RCC_ClockConfig>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d001      	beq.n	800b938 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800b934:	f000 f81a 	bl	800b96c <Error_Handler>
  }
}
 800b938:	bf00      	nop
 800b93a:	3750      	adds	r7, #80	; 0x50
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	40023800 	.word	0x40023800
 800b944:	40007000 	.word	0x40007000

0800b948 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a04      	ldr	r2, [pc, #16]	; (800b968 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d101      	bne.n	800b95e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800b95a:	f7f8 f9d5 	bl	8003d08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800b95e:	bf00      	nop
 800b960:	3708      	adds	r7, #8
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	40010000 	.word	0x40010000

0800b96c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b96c:	b480      	push	{r7}
 800b96e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800b970:	bf00      	nop
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
	...

0800b97c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800b980:	4b17      	ldr	r3, [pc, #92]	; (800b9e0 <MX_SPI2_Init+0x64>)
 800b982:	4a18      	ldr	r2, [pc, #96]	; (800b9e4 <MX_SPI2_Init+0x68>)
 800b984:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800b986:	4b16      	ldr	r3, [pc, #88]	; (800b9e0 <MX_SPI2_Init+0x64>)
 800b988:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b98c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800b98e:	4b14      	ldr	r3, [pc, #80]	; (800b9e0 <MX_SPI2_Init+0x64>)
 800b990:	2200      	movs	r2, #0
 800b992:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800b994:	4b12      	ldr	r3, [pc, #72]	; (800b9e0 <MX_SPI2_Init+0x64>)
 800b996:	2200      	movs	r2, #0
 800b998:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b99a:	4b11      	ldr	r3, [pc, #68]	; (800b9e0 <MX_SPI2_Init+0x64>)
 800b99c:	2200      	movs	r2, #0
 800b99e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b9a0:	4b0f      	ldr	r3, [pc, #60]	; (800b9e0 <MX_SPI2_Init+0x64>)
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800b9a6:	4b0e      	ldr	r3, [pc, #56]	; (800b9e0 <MX_SPI2_Init+0x64>)
 800b9a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800b9ae:	4b0c      	ldr	r3, [pc, #48]	; (800b9e0 <MX_SPI2_Init+0x64>)
 800b9b0:	2220      	movs	r2, #32
 800b9b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b9b4:	4b0a      	ldr	r3, [pc, #40]	; (800b9e0 <MX_SPI2_Init+0x64>)
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800b9ba:	4b09      	ldr	r3, [pc, #36]	; (800b9e0 <MX_SPI2_Init+0x64>)
 800b9bc:	2200      	movs	r2, #0
 800b9be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b9c0:	4b07      	ldr	r3, [pc, #28]	; (800b9e0 <MX_SPI2_Init+0x64>)
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800b9c6:	4b06      	ldr	r3, [pc, #24]	; (800b9e0 <MX_SPI2_Init+0x64>)
 800b9c8:	220a      	movs	r2, #10
 800b9ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800b9cc:	4804      	ldr	r0, [pc, #16]	; (800b9e0 <MX_SPI2_Init+0x64>)
 800b9ce:	f7fa fe45 	bl	800665c <HAL_SPI_Init>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d001      	beq.n	800b9dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800b9d8:	f7ff ffc8 	bl	800b96c <Error_Handler>
  }

}
 800b9dc:	bf00      	nop
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	200047e0 	.word	0x200047e0
 800b9e4:	40003800 	.word	0x40003800

0800b9e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b08a      	sub	sp, #40	; 0x28
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9f0:	f107 0314 	add.w	r3, r7, #20
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	601a      	str	r2, [r3, #0]
 800b9f8:	605a      	str	r2, [r3, #4]
 800b9fa:	609a      	str	r2, [r3, #8]
 800b9fc:	60da      	str	r2, [r3, #12]
 800b9fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a2c      	ldr	r2, [pc, #176]	; (800bab8 <HAL_SPI_MspInit+0xd0>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d152      	bne.n	800bab0 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	613b      	str	r3, [r7, #16]
 800ba0e:	4b2b      	ldr	r3, [pc, #172]	; (800babc <HAL_SPI_MspInit+0xd4>)
 800ba10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba12:	4a2a      	ldr	r2, [pc, #168]	; (800babc <HAL_SPI_MspInit+0xd4>)
 800ba14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba18:	6413      	str	r3, [r2, #64]	; 0x40
 800ba1a:	4b28      	ldr	r3, [pc, #160]	; (800babc <HAL_SPI_MspInit+0xd4>)
 800ba1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba22:	613b      	str	r3, [r7, #16]
 800ba24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ba26:	2300      	movs	r3, #0
 800ba28:	60fb      	str	r3, [r7, #12]
 800ba2a:	4b24      	ldr	r3, [pc, #144]	; (800babc <HAL_SPI_MspInit+0xd4>)
 800ba2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba2e:	4a23      	ldr	r2, [pc, #140]	; (800babc <HAL_SPI_MspInit+0xd4>)
 800ba30:	f043 0304 	orr.w	r3, r3, #4
 800ba34:	6313      	str	r3, [r2, #48]	; 0x30
 800ba36:	4b21      	ldr	r3, [pc, #132]	; (800babc <HAL_SPI_MspInit+0xd4>)
 800ba38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba3a:	f003 0304 	and.w	r3, r3, #4
 800ba3e:	60fb      	str	r3, [r7, #12]
 800ba40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ba42:	2300      	movs	r3, #0
 800ba44:	60bb      	str	r3, [r7, #8]
 800ba46:	4b1d      	ldr	r3, [pc, #116]	; (800babc <HAL_SPI_MspInit+0xd4>)
 800ba48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba4a:	4a1c      	ldr	r2, [pc, #112]	; (800babc <HAL_SPI_MspInit+0xd4>)
 800ba4c:	f043 0302 	orr.w	r3, r3, #2
 800ba50:	6313      	str	r3, [r2, #48]	; 0x30
 800ba52:	4b1a      	ldr	r3, [pc, #104]	; (800babc <HAL_SPI_MspInit+0xd4>)
 800ba54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba56:	f003 0302 	and.w	r3, r3, #2
 800ba5a:	60bb      	str	r3, [r7, #8]
 800ba5c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ba5e:	2304      	movs	r3, #4
 800ba60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba62:	2302      	movs	r3, #2
 800ba64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba66:	2300      	movs	r3, #0
 800ba68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba6a:	2303      	movs	r3, #3
 800ba6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ba6e:	2305      	movs	r3, #5
 800ba70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ba72:	f107 0314 	add.w	r3, r7, #20
 800ba76:	4619      	mov	r1, r3
 800ba78:	4811      	ldr	r0, [pc, #68]	; (800bac0 <HAL_SPI_MspInit+0xd8>)
 800ba7a:	f7f8 ff3b 	bl	80048f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800ba7e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800ba82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba84:	2302      	movs	r3, #2
 800ba86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba8c:	2303      	movs	r3, #3
 800ba8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ba90:	2305      	movs	r3, #5
 800ba92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ba94:	f107 0314 	add.w	r3, r7, #20
 800ba98:	4619      	mov	r1, r3
 800ba9a:	480a      	ldr	r0, [pc, #40]	; (800bac4 <HAL_SPI_MspInit+0xdc>)
 800ba9c:	f7f8 ff2a 	bl	80048f4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800baa0:	2200      	movs	r2, #0
 800baa2:	2105      	movs	r1, #5
 800baa4:	2024      	movs	r0, #36	; 0x24
 800baa6:	f7f8 fa29 	bl	8003efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800baaa:	2024      	movs	r0, #36	; 0x24
 800baac:	f7f8 fa42 	bl	8003f34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800bab0:	bf00      	nop
 800bab2:	3728      	adds	r7, #40	; 0x28
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	40003800 	.word	0x40003800
 800babc:	40023800 	.word	0x40023800
 800bac0:	40020800 	.word	0x40020800
 800bac4:	40020400 	.word	0x40020400

0800bac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bace:	2300      	movs	r3, #0
 800bad0:	607b      	str	r3, [r7, #4]
 800bad2:	4b1a      	ldr	r3, [pc, #104]	; (800bb3c <HAL_MspInit+0x74>)
 800bad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bad6:	4a19      	ldr	r2, [pc, #100]	; (800bb3c <HAL_MspInit+0x74>)
 800bad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800badc:	6453      	str	r3, [r2, #68]	; 0x44
 800bade:	4b17      	ldr	r3, [pc, #92]	; (800bb3c <HAL_MspInit+0x74>)
 800bae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bae6:	607b      	str	r3, [r7, #4]
 800bae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800baea:	2300      	movs	r3, #0
 800baec:	603b      	str	r3, [r7, #0]
 800baee:	4b13      	ldr	r3, [pc, #76]	; (800bb3c <HAL_MspInit+0x74>)
 800baf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baf2:	4a12      	ldr	r2, [pc, #72]	; (800bb3c <HAL_MspInit+0x74>)
 800baf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800baf8:	6413      	str	r3, [r2, #64]	; 0x40
 800bafa:	4b10      	ldr	r3, [pc, #64]	; (800bb3c <HAL_MspInit+0x74>)
 800bafc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bafe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb02:	603b      	str	r3, [r7, #0]
 800bb04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800bb06:	2200      	movs	r2, #0
 800bb08:	210f      	movs	r1, #15
 800bb0a:	f06f 0001 	mvn.w	r0, #1
 800bb0e:	f7f8 f9f5 	bl	8003efc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 11, 0);
 800bb12:	2200      	movs	r2, #0
 800bb14:	210b      	movs	r1, #11
 800bb16:	2004      	movs	r0, #4
 800bb18:	f7f8 f9f0 	bl	8003efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800bb1c:	2004      	movs	r0, #4
 800bb1e:	f7f8 fa09 	bl	8003f34 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 10, 0);
 800bb22:	2200      	movs	r2, #0
 800bb24:	210a      	movs	r1, #10
 800bb26:	2005      	movs	r0, #5
 800bb28:	f7f8 f9e8 	bl	8003efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800bb2c:	2005      	movs	r0, #5
 800bb2e:	f7f8 fa01 	bl	8003f34 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bb32:	bf00      	nop
 800bb34:	3708      	adds	r7, #8
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	40023800 	.word	0x40023800

0800bb40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b08c      	sub	sp, #48	; 0x30
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800bb50:	2200      	movs	r2, #0
 800bb52:	6879      	ldr	r1, [r7, #4]
 800bb54:	2019      	movs	r0, #25
 800bb56:	f7f8 f9d1 	bl	8003efc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800bb5a:	2019      	movs	r0, #25
 800bb5c:	f7f8 f9ea 	bl	8003f34 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800bb60:	2300      	movs	r3, #0
 800bb62:	60fb      	str	r3, [r7, #12]
 800bb64:	4b1e      	ldr	r3, [pc, #120]	; (800bbe0 <HAL_InitTick+0xa0>)
 800bb66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb68:	4a1d      	ldr	r2, [pc, #116]	; (800bbe0 <HAL_InitTick+0xa0>)
 800bb6a:	f043 0301 	orr.w	r3, r3, #1
 800bb6e:	6453      	str	r3, [r2, #68]	; 0x44
 800bb70:	4b1b      	ldr	r3, [pc, #108]	; (800bbe0 <HAL_InitTick+0xa0>)
 800bb72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb74:	f003 0301 	and.w	r3, r3, #1
 800bb78:	60fb      	str	r3, [r7, #12]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800bb7c:	f107 0210 	add.w	r2, r7, #16
 800bb80:	f107 0314 	add.w	r3, r7, #20
 800bb84:	4611      	mov	r1, r2
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7fa fd36 	bl	80065f8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800bb8c:	f7fa fd20 	bl	80065d0 <HAL_RCC_GetPCLK2Freq>
 800bb90:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800bb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb94:	4a13      	ldr	r2, [pc, #76]	; (800bbe4 <HAL_InitTick+0xa4>)
 800bb96:	fba2 2303 	umull	r2, r3, r2, r3
 800bb9a:	0c9b      	lsrs	r3, r3, #18
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800bba0:	4b11      	ldr	r3, [pc, #68]	; (800bbe8 <HAL_InitTick+0xa8>)
 800bba2:	4a12      	ldr	r2, [pc, #72]	; (800bbec <HAL_InitTick+0xac>)
 800bba4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800bba6:	4b10      	ldr	r3, [pc, #64]	; (800bbe8 <HAL_InitTick+0xa8>)
 800bba8:	f240 32e7 	movw	r2, #999	; 0x3e7
 800bbac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800bbae:	4a0e      	ldr	r2, [pc, #56]	; (800bbe8 <HAL_InitTick+0xa8>)
 800bbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800bbb4:	4b0c      	ldr	r3, [pc, #48]	; (800bbe8 <HAL_InitTick+0xa8>)
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bbba:	4b0b      	ldr	r3, [pc, #44]	; (800bbe8 <HAL_InitTick+0xa8>)
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800bbc0:	4809      	ldr	r0, [pc, #36]	; (800bbe8 <HAL_InitTick+0xa8>)
 800bbc2:	f7fb fbbf 	bl	8007344 <HAL_TIM_Base_Init>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d104      	bne.n	800bbd6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800bbcc:	4806      	ldr	r0, [pc, #24]	; (800bbe8 <HAL_InitTick+0xa8>)
 800bbce:	f7fb fc08 	bl	80073e2 <HAL_TIM_Base_Start_IT>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	e000      	b.n	800bbd8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800bbd6:	2301      	movs	r3, #1
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3730      	adds	r7, #48	; 0x30
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	40023800 	.word	0x40023800
 800bbe4:	431bde83 	.word	0x431bde83
 800bbe8:	20004838 	.word	0x20004838
 800bbec:	40010000 	.word	0x40010000

0800bbf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800bbf4:	bf00      	nop
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800bbfe:	b480      	push	{r7}
 800bc00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800bc02:	e7fe      	b.n	800bc02 <HardFault_Handler+0x4>

0800bc04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800bc04:	b480      	push	{r7}
 800bc06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800bc08:	e7fe      	b.n	800bc08 <MemManage_Handler+0x4>

0800bc0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800bc0a:	b480      	push	{r7}
 800bc0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800bc0e:	e7fe      	b.n	800bc0e <BusFault_Handler+0x4>

0800bc10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800bc10:	b480      	push	{r7}
 800bc12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800bc14:	e7fe      	b.n	800bc14 <UsageFault_Handler+0x4>

0800bc16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800bc16:	b480      	push	{r7}
 800bc18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800bc1a:	bf00      	nop
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800bc28:	f7f8 fcbc 	bl	80045a4 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800bc2c:	bf00      	nop
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800bc30:	b480      	push	{r7}
 800bc32:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800bc34:	bf00      	nop
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800bc42:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bc46:	f7f9 f80b 	bl	8004c60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800bc4a:	bf00      	nop
 800bc4c:	bd80      	pop	{r7, pc}
	...

0800bc50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800bc54:	4802      	ldr	r0, [pc, #8]	; (800bc60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800bc56:	f7fb fc45 	bl	80074e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800bc5a:	bf00      	nop
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	20004838 	.word	0x20004838

0800bc64 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800bc68:	4802      	ldr	r0, [pc, #8]	; (800bc74 <SPI2_IRQHandler+0x10>)
 800bc6a:	f7fb f93b 	bl	8006ee4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800bc6e:	bf00      	nop
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	200047e0 	.word	0x200047e0

0800bc78 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800bc7c:	4802      	ldr	r0, [pc, #8]	; (800bc88 <DMA2_Stream1_IRQHandler+0x10>)
 800bc7e:	f7f8 fa57 	bl	8004130 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800bc82:	bf00      	nop
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	200048f8 	.word	0x200048f8

0800bc8c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800bc90:	4802      	ldr	r0, [pc, #8]	; (800bc9c <USART6_IRQHandler+0x10>)
 800bc92:	f7fc f98d 	bl	8007fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
	//UART_timeout();
  /* USER CODE END USART6_IRQn 1 */
}
 800bc96:	bf00      	nop
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	20004958 	.word	0x20004958

0800bca0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b086      	sub	sp, #24
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bcac:	2300      	movs	r3, #0
 800bcae:	617b      	str	r3, [r7, #20]
 800bcb0:	e00a      	b.n	800bcc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800bcb2:	f3af 8000 	nop.w
 800bcb6:	4601      	mov	r1, r0
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	1c5a      	adds	r2, r3, #1
 800bcbc:	60ba      	str	r2, [r7, #8]
 800bcbe:	b2ca      	uxtb	r2, r1
 800bcc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	617b      	str	r3, [r7, #20]
 800bcc8:	697a      	ldr	r2, [r7, #20]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	dbf0      	blt.n	800bcb2 <_read+0x12>
	}

return len;
 800bcd0:	687b      	ldr	r3, [r7, #4]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3718      	adds	r7, #24
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b086      	sub	sp, #24
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	60f8      	str	r0, [r7, #12]
 800bce2:	60b9      	str	r1, [r7, #8]
 800bce4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bce6:	2300      	movs	r3, #0
 800bce8:	617b      	str	r3, [r7, #20]
 800bcea:	e009      	b.n	800bd00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	1c5a      	adds	r2, r3, #1
 800bcf0:	60ba      	str	r2, [r7, #8]
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	617b      	str	r3, [r7, #20]
 800bd00:	697a      	ldr	r2, [r7, #20]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	dbf1      	blt.n	800bcec <_write+0x12>
	}
	return len;
 800bd08:	687b      	ldr	r3, [r7, #4]
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3718      	adds	r7, #24
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}

0800bd12 <_close>:

int _close(int file)
{
 800bd12:	b480      	push	{r7}
 800bd14:	b083      	sub	sp, #12
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
	return -1;
 800bd1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	370c      	adds	r7, #12
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr

0800bd2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bd2a:	b480      	push	{r7}
 800bd2c:	b083      	sub	sp, #12
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
 800bd32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bd3a:	605a      	str	r2, [r3, #4]
	return 0;
 800bd3c:	2300      	movs	r3, #0
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	370c      	adds	r7, #12
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr

0800bd4a <_isatty>:

int _isatty(int file)
{
 800bd4a:	b480      	push	{r7}
 800bd4c:	b083      	sub	sp, #12
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
	return 1;
 800bd52:	2301      	movs	r3, #1
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	60b9      	str	r1, [r7, #8]
 800bd6a:	607a      	str	r2, [r7, #4]
	return 0;
 800bd6c:	2300      	movs	r3, #0
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3714      	adds	r7, #20
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr
	...

0800bd7c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800bd84:	4b11      	ldr	r3, [pc, #68]	; (800bdcc <_sbrk+0x50>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d102      	bne.n	800bd92 <_sbrk+0x16>
		heap_end = &end;
 800bd8c:	4b0f      	ldr	r3, [pc, #60]	; (800bdcc <_sbrk+0x50>)
 800bd8e:	4a10      	ldr	r2, [pc, #64]	; (800bdd0 <_sbrk+0x54>)
 800bd90:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800bd92:	4b0e      	ldr	r3, [pc, #56]	; (800bdcc <_sbrk+0x50>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800bd98:	4b0c      	ldr	r3, [pc, #48]	; (800bdcc <_sbrk+0x50>)
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	4413      	add	r3, r2
 800bda0:	466a      	mov	r2, sp
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d907      	bls.n	800bdb6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800bda6:	f000 fa45 	bl	800c234 <__errno>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	230c      	movs	r3, #12
 800bdae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800bdb0:	f04f 33ff 	mov.w	r3, #4294967295
 800bdb4:	e006      	b.n	800bdc4 <_sbrk+0x48>
	}

	heap_end += incr;
 800bdb6:	4b05      	ldr	r3, [pc, #20]	; (800bdcc <_sbrk+0x50>)
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	4a03      	ldr	r2, [pc, #12]	; (800bdcc <_sbrk+0x50>)
 800bdc0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3710      	adds	r7, #16
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	200041c8 	.word	0x200041c8
 800bdd0:	200049a0 	.word	0x200049a0

0800bdd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bdd8:	4b16      	ldr	r3, [pc, #88]	; (800be34 <SystemInit+0x60>)
 800bdda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdde:	4a15      	ldr	r2, [pc, #84]	; (800be34 <SystemInit+0x60>)
 800bde0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bde4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800bde8:	4b13      	ldr	r3, [pc, #76]	; (800be38 <SystemInit+0x64>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4a12      	ldr	r2, [pc, #72]	; (800be38 <SystemInit+0x64>)
 800bdee:	f043 0301 	orr.w	r3, r3, #1
 800bdf2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800bdf4:	4b10      	ldr	r3, [pc, #64]	; (800be38 <SystemInit+0x64>)
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800bdfa:	4b0f      	ldr	r3, [pc, #60]	; (800be38 <SystemInit+0x64>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4a0e      	ldr	r2, [pc, #56]	; (800be38 <SystemInit+0x64>)
 800be00:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800be04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800be0a:	4b0b      	ldr	r3, [pc, #44]	; (800be38 <SystemInit+0x64>)
 800be0c:	4a0b      	ldr	r2, [pc, #44]	; (800be3c <SystemInit+0x68>)
 800be0e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800be10:	4b09      	ldr	r3, [pc, #36]	; (800be38 <SystemInit+0x64>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a08      	ldr	r2, [pc, #32]	; (800be38 <SystemInit+0x64>)
 800be16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800be1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800be1c:	4b06      	ldr	r3, [pc, #24]	; (800be38 <SystemInit+0x64>)
 800be1e:	2200      	movs	r2, #0
 800be20:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800be22:	4b04      	ldr	r3, [pc, #16]	; (800be34 <SystemInit+0x60>)
 800be24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800be28:	609a      	str	r2, [r3, #8]
#endif
}
 800be2a:	bf00      	nop
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr
 800be34:	e000ed00 	.word	0xe000ed00
 800be38:	40023800 	.word	0x40023800
 800be3c:	24003010 	.word	0x24003010

0800be40 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim11;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b08a      	sub	sp, #40	; 0x28
 800be44:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800be46:	f107 0320 	add.w	r3, r7, #32
 800be4a:	2200      	movs	r2, #0
 800be4c:	601a      	str	r2, [r3, #0]
 800be4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800be50:	1d3b      	adds	r3, r7, #4
 800be52:	2200      	movs	r2, #0
 800be54:	601a      	str	r2, [r3, #0]
 800be56:	605a      	str	r2, [r3, #4]
 800be58:	609a      	str	r2, [r3, #8]
 800be5a:	60da      	str	r2, [r3, #12]
 800be5c:	611a      	str	r2, [r3, #16]
 800be5e:	615a      	str	r2, [r3, #20]
 800be60:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800be62:	4b32      	ldr	r3, [pc, #200]	; (800bf2c <MX_TIM4_Init+0xec>)
 800be64:	4a32      	ldr	r2, [pc, #200]	; (800bf30 <MX_TIM4_Init+0xf0>)
 800be66:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 800be68:	4b30      	ldr	r3, [pc, #192]	; (800bf2c <MX_TIM4_Init+0xec>)
 800be6a:	2209      	movs	r2, #9
 800be6c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800be6e:	4b2f      	ldr	r3, [pc, #188]	; (800bf2c <MX_TIM4_Init+0xec>)
 800be70:	2200      	movs	r2, #0
 800be72:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 800be74:	4b2d      	ldr	r3, [pc, #180]	; (800bf2c <MX_TIM4_Init+0xec>)
 800be76:	f644 6220 	movw	r2, #20000	; 0x4e20
 800be7a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800be7c:	4b2b      	ldr	r3, [pc, #172]	; (800bf2c <MX_TIM4_Init+0xec>)
 800be7e:	2200      	movs	r2, #0
 800be80:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800be82:	4b2a      	ldr	r3, [pc, #168]	; (800bf2c <MX_TIM4_Init+0xec>)
 800be84:	2200      	movs	r2, #0
 800be86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800be88:	4828      	ldr	r0, [pc, #160]	; (800bf2c <MX_TIM4_Init+0xec>)
 800be8a:	f7fb face 	bl	800742a <HAL_TIM_PWM_Init>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d001      	beq.n	800be98 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800be94:	f7ff fd6a 	bl	800b96c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800be98:	2300      	movs	r3, #0
 800be9a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800be9c:	2300      	movs	r3, #0
 800be9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800bea0:	f107 0320 	add.w	r3, r7, #32
 800bea4:	4619      	mov	r1, r3
 800bea6:	4821      	ldr	r0, [pc, #132]	; (800bf2c <MX_TIM4_Init+0xec>)
 800bea8:	f7fb ff43 	bl	8007d32 <HAL_TIMEx_MasterConfigSynchronization>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d001      	beq.n	800beb6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800beb2:	f7ff fd5b 	bl	800b96c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800beb6:	2360      	movs	r3, #96	; 0x60
 800beb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800beba:	2300      	movs	r3, #0
 800bebc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800bebe:	2300      	movs	r3, #0
 800bec0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800bec2:	2304      	movs	r3, #4
 800bec4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800bec6:	1d3b      	adds	r3, r7, #4
 800bec8:	2200      	movs	r2, #0
 800beca:	4619      	mov	r1, r3
 800becc:	4817      	ldr	r0, [pc, #92]	; (800bf2c <MX_TIM4_Init+0xec>)
 800bece:	f7fb fc11 	bl	80076f4 <HAL_TIM_PWM_ConfigChannel>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d001      	beq.n	800bedc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800bed8:	f7ff fd48 	bl	800b96c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800bedc:	1d3b      	adds	r3, r7, #4
 800bede:	2204      	movs	r2, #4
 800bee0:	4619      	mov	r1, r3
 800bee2:	4812      	ldr	r0, [pc, #72]	; (800bf2c <MX_TIM4_Init+0xec>)
 800bee4:	f7fb fc06 	bl	80076f4 <HAL_TIM_PWM_ConfigChannel>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d001      	beq.n	800bef2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800beee:	f7ff fd3d 	bl	800b96c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800bef2:	1d3b      	adds	r3, r7, #4
 800bef4:	2208      	movs	r2, #8
 800bef6:	4619      	mov	r1, r3
 800bef8:	480c      	ldr	r0, [pc, #48]	; (800bf2c <MX_TIM4_Init+0xec>)
 800befa:	f7fb fbfb 	bl	80076f4 <HAL_TIM_PWM_ConfigChannel>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d001      	beq.n	800bf08 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 800bf04:	f7ff fd32 	bl	800b96c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800bf08:	1d3b      	adds	r3, r7, #4
 800bf0a:	220c      	movs	r2, #12
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	4807      	ldr	r0, [pc, #28]	; (800bf2c <MX_TIM4_Init+0xec>)
 800bf10:	f7fb fbf0 	bl	80076f4 <HAL_TIM_PWM_ConfigChannel>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d001      	beq.n	800bf1e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800bf1a:	f7ff fd27 	bl	800b96c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800bf1e:	4803      	ldr	r0, [pc, #12]	; (800bf2c <MX_TIM4_Init+0xec>)
 800bf20:	f000 f870 	bl	800c004 <HAL_TIM_MspPostInit>

}
 800bf24:	bf00      	nop
 800bf26:	3728      	adds	r7, #40	; 0x28
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	20004878 	.word	0x20004878
 800bf30:	40000800 	.word	0x40000800

0800bf34 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 800bf38:	4b0e      	ldr	r3, [pc, #56]	; (800bf74 <MX_TIM11_Init+0x40>)
 800bf3a:	4a0f      	ldr	r2, [pc, #60]	; (800bf78 <MX_TIM11_Init+0x44>)
 800bf3c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100;
 800bf3e:	4b0d      	ldr	r3, [pc, #52]	; (800bf74 <MX_TIM11_Init+0x40>)
 800bf40:	2264      	movs	r2, #100	; 0x64
 800bf42:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bf44:	4b0b      	ldr	r3, [pc, #44]	; (800bf74 <MX_TIM11_Init+0x40>)
 800bf46:	2200      	movs	r2, #0
 800bf48:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800bf4a:	4b0a      	ldr	r3, [pc, #40]	; (800bf74 <MX_TIM11_Init+0x40>)
 800bf4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf50:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bf52:	4b08      	ldr	r3, [pc, #32]	; (800bf74 <MX_TIM11_Init+0x40>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bf58:	4b06      	ldr	r3, [pc, #24]	; (800bf74 <MX_TIM11_Init+0x40>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800bf5e:	4805      	ldr	r0, [pc, #20]	; (800bf74 <MX_TIM11_Init+0x40>)
 800bf60:	f7fb f9f0 	bl	8007344 <HAL_TIM_Base_Init>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d001      	beq.n	800bf6e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800bf6a:	f7ff fcff 	bl	800b96c <Error_Handler>
  }

}
 800bf6e:	bf00      	nop
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	200048b8 	.word	0x200048b8
 800bf78:	40014800 	.word	0x40014800

0800bf7c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b085      	sub	sp, #20
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4a0b      	ldr	r2, [pc, #44]	; (800bfb8 <HAL_TIM_PWM_MspInit+0x3c>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d10d      	bne.n	800bfaa <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800bf8e:	2300      	movs	r3, #0
 800bf90:	60fb      	str	r3, [r7, #12]
 800bf92:	4b0a      	ldr	r3, [pc, #40]	; (800bfbc <HAL_TIM_PWM_MspInit+0x40>)
 800bf94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf96:	4a09      	ldr	r2, [pc, #36]	; (800bfbc <HAL_TIM_PWM_MspInit+0x40>)
 800bf98:	f043 0304 	orr.w	r3, r3, #4
 800bf9c:	6413      	str	r3, [r2, #64]	; 0x40
 800bf9e:	4b07      	ldr	r3, [pc, #28]	; (800bfbc <HAL_TIM_PWM_MspInit+0x40>)
 800bfa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa2:	f003 0304 	and.w	r3, r3, #4
 800bfa6:	60fb      	str	r3, [r7, #12]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800bfaa:	bf00      	nop
 800bfac:	3714      	adds	r7, #20
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	40000800 	.word	0x40000800
 800bfbc:	40023800 	.word	0x40023800

0800bfc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b085      	sub	sp, #20
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4a0b      	ldr	r2, [pc, #44]	; (800bffc <HAL_TIM_Base_MspInit+0x3c>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d10d      	bne.n	800bfee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	60fb      	str	r3, [r7, #12]
 800bfd6:	4b0a      	ldr	r3, [pc, #40]	; (800c000 <HAL_TIM_Base_MspInit+0x40>)
 800bfd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfda:	4a09      	ldr	r2, [pc, #36]	; (800c000 <HAL_TIM_Base_MspInit+0x40>)
 800bfdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bfe0:	6453      	str	r3, [r2, #68]	; 0x44
 800bfe2:	4b07      	ldr	r3, [pc, #28]	; (800c000 <HAL_TIM_Base_MspInit+0x40>)
 800bfe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bfea:	60fb      	str	r3, [r7, #12]
 800bfec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800bfee:	bf00      	nop
 800bff0:	3714      	adds	r7, #20
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
 800bffa:	bf00      	nop
 800bffc:	40014800 	.word	0x40014800
 800c000:	40023800 	.word	0x40023800

0800c004 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b088      	sub	sp, #32
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c00c:	f107 030c 	add.w	r3, r7, #12
 800c010:	2200      	movs	r2, #0
 800c012:	601a      	str	r2, [r3, #0]
 800c014:	605a      	str	r2, [r3, #4]
 800c016:	609a      	str	r2, [r3, #8]
 800c018:	60da      	str	r2, [r3, #12]
 800c01a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4a12      	ldr	r2, [pc, #72]	; (800c06c <HAL_TIM_MspPostInit+0x68>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d11e      	bne.n	800c064 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c026:	2300      	movs	r3, #0
 800c028:	60bb      	str	r3, [r7, #8]
 800c02a:	4b11      	ldr	r3, [pc, #68]	; (800c070 <HAL_TIM_MspPostInit+0x6c>)
 800c02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c02e:	4a10      	ldr	r2, [pc, #64]	; (800c070 <HAL_TIM_MspPostInit+0x6c>)
 800c030:	f043 0302 	orr.w	r3, r3, #2
 800c034:	6313      	str	r3, [r2, #48]	; 0x30
 800c036:	4b0e      	ldr	r3, [pc, #56]	; (800c070 <HAL_TIM_MspPostInit+0x6c>)
 800c038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c03a:	f003 0302 	and.w	r3, r3, #2
 800c03e:	60bb      	str	r3, [r7, #8]
 800c040:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800c042:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800c046:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c048:	2302      	movs	r3, #2
 800c04a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c04c:	2300      	movs	r3, #0
 800c04e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c050:	2300      	movs	r3, #0
 800c052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800c054:	2302      	movs	r3, #2
 800c056:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c058:	f107 030c 	add.w	r3, r7, #12
 800c05c:	4619      	mov	r1, r3
 800c05e:	4805      	ldr	r0, [pc, #20]	; (800c074 <HAL_TIM_MspPostInit+0x70>)
 800c060:	f7f8 fc48 	bl	80048f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800c064:	bf00      	nop
 800c066:	3720      	adds	r7, #32
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	40000800 	.word	0x40000800
 800c070:	40023800 	.word	0x40023800
 800c074:	40020400 	.word	0x40020400

0800c078 <MX_USART6_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 800c07c:	4b11      	ldr	r3, [pc, #68]	; (800c0c4 <MX_USART6_UART_Init+0x4c>)
 800c07e:	4a12      	ldr	r2, [pc, #72]	; (800c0c8 <MX_USART6_UART_Init+0x50>)
 800c080:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800c082:	4b10      	ldr	r3, [pc, #64]	; (800c0c4 <MX_USART6_UART_Init+0x4c>)
 800c084:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800c088:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800c08a:	4b0e      	ldr	r3, [pc, #56]	; (800c0c4 <MX_USART6_UART_Init+0x4c>)
 800c08c:	2200      	movs	r2, #0
 800c08e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800c090:	4b0c      	ldr	r3, [pc, #48]	; (800c0c4 <MX_USART6_UART_Init+0x4c>)
 800c092:	2200      	movs	r2, #0
 800c094:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800c096:	4b0b      	ldr	r3, [pc, #44]	; (800c0c4 <MX_USART6_UART_Init+0x4c>)
 800c098:	2200      	movs	r2, #0
 800c09a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800c09c:	4b09      	ldr	r3, [pc, #36]	; (800c0c4 <MX_USART6_UART_Init+0x4c>)
 800c09e:	220c      	movs	r2, #12
 800c0a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c0a2:	4b08      	ldr	r3, [pc, #32]	; (800c0c4 <MX_USART6_UART_Init+0x4c>)
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800c0a8:	4b06      	ldr	r3, [pc, #24]	; (800c0c4 <MX_USART6_UART_Init+0x4c>)
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800c0ae:	4805      	ldr	r0, [pc, #20]	; (800c0c4 <MX_USART6_UART_Init+0x4c>)
 800c0b0:	f7fb fe98 	bl	8007de4 <HAL_UART_Init>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d001      	beq.n	800c0be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800c0ba:	f7ff fc57 	bl	800b96c <Error_Handler>
  }

}
 800c0be:	bf00      	nop
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	20004958 	.word	0x20004958
 800c0c8:	40011400 	.word	0x40011400

0800c0cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b08a      	sub	sp, #40	; 0x28
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c0d4:	f107 0314 	add.w	r3, r7, #20
 800c0d8:	2200      	movs	r2, #0
 800c0da:	601a      	str	r2, [r3, #0]
 800c0dc:	605a      	str	r2, [r3, #4]
 800c0de:	609a      	str	r2, [r3, #8]
 800c0e0:	60da      	str	r2, [r3, #12]
 800c0e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4a38      	ldr	r2, [pc, #224]	; (800c1cc <HAL_UART_MspInit+0x100>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d16a      	bne.n	800c1c4 <HAL_UART_MspInit+0xf8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	613b      	str	r3, [r7, #16]
 800c0f2:	4b37      	ldr	r3, [pc, #220]	; (800c1d0 <HAL_UART_MspInit+0x104>)
 800c0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0f6:	4a36      	ldr	r2, [pc, #216]	; (800c1d0 <HAL_UART_MspInit+0x104>)
 800c0f8:	f043 0320 	orr.w	r3, r3, #32
 800c0fc:	6453      	str	r3, [r2, #68]	; 0x44
 800c0fe:	4b34      	ldr	r3, [pc, #208]	; (800c1d0 <HAL_UART_MspInit+0x104>)
 800c100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c102:	f003 0320 	and.w	r3, r3, #32
 800c106:	613b      	str	r3, [r7, #16]
 800c108:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c10a:	2300      	movs	r3, #0
 800c10c:	60fb      	str	r3, [r7, #12]
 800c10e:	4b30      	ldr	r3, [pc, #192]	; (800c1d0 <HAL_UART_MspInit+0x104>)
 800c110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c112:	4a2f      	ldr	r2, [pc, #188]	; (800c1d0 <HAL_UART_MspInit+0x104>)
 800c114:	f043 0304 	orr.w	r3, r3, #4
 800c118:	6313      	str	r3, [r2, #48]	; 0x30
 800c11a:	4b2d      	ldr	r3, [pc, #180]	; (800c1d0 <HAL_UART_MspInit+0x104>)
 800c11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c11e:	f003 0304 	and.w	r3, r3, #4
 800c122:	60fb      	str	r3, [r7, #12]
 800c124:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c126:	23c0      	movs	r3, #192	; 0xc0
 800c128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c12a:	2302      	movs	r3, #2
 800c12c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c12e:	2301      	movs	r3, #1
 800c130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c132:	2303      	movs	r3, #3
 800c134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800c136:	2308      	movs	r3, #8
 800c138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c13a:	f107 0314 	add.w	r3, r7, #20
 800c13e:	4619      	mov	r1, r3
 800c140:	4824      	ldr	r0, [pc, #144]	; (800c1d4 <HAL_UART_MspInit+0x108>)
 800c142:	f7f8 fbd7 	bl	80048f4 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800c146:	4b24      	ldr	r3, [pc, #144]	; (800c1d8 <HAL_UART_MspInit+0x10c>)
 800c148:	4a24      	ldr	r2, [pc, #144]	; (800c1dc <HAL_UART_MspInit+0x110>)
 800c14a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800c14c:	4b22      	ldr	r3, [pc, #136]	; (800c1d8 <HAL_UART_MspInit+0x10c>)
 800c14e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800c152:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c154:	4b20      	ldr	r3, [pc, #128]	; (800c1d8 <HAL_UART_MspInit+0x10c>)
 800c156:	2200      	movs	r2, #0
 800c158:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800c15a:	4b1f      	ldr	r3, [pc, #124]	; (800c1d8 <HAL_UART_MspInit+0x10c>)
 800c15c:	2200      	movs	r2, #0
 800c15e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800c160:	4b1d      	ldr	r3, [pc, #116]	; (800c1d8 <HAL_UART_MspInit+0x10c>)
 800c162:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c166:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c168:	4b1b      	ldr	r3, [pc, #108]	; (800c1d8 <HAL_UART_MspInit+0x10c>)
 800c16a:	2200      	movs	r2, #0
 800c16c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c16e:	4b1a      	ldr	r3, [pc, #104]	; (800c1d8 <HAL_UART_MspInit+0x10c>)
 800c170:	2200      	movs	r2, #0
 800c172:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800c174:	4b18      	ldr	r3, [pc, #96]	; (800c1d8 <HAL_UART_MspInit+0x10c>)
 800c176:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c17a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800c17c:	4b16      	ldr	r3, [pc, #88]	; (800c1d8 <HAL_UART_MspInit+0x10c>)
 800c17e:	2200      	movs	r2, #0
 800c180:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c182:	4b15      	ldr	r3, [pc, #84]	; (800c1d8 <HAL_UART_MspInit+0x10c>)
 800c184:	2200      	movs	r2, #0
 800c186:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800c188:	4813      	ldr	r0, [pc, #76]	; (800c1d8 <HAL_UART_MspInit+0x10c>)
 800c18a:	f7f7 ff01 	bl	8003f90 <HAL_DMA_Init>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d001      	beq.n	800c198 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800c194:	f7ff fbea 	bl	800b96c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4a0f      	ldr	r2, [pc, #60]	; (800c1d8 <HAL_UART_MspInit+0x10c>)
 800c19c:	635a      	str	r2, [r3, #52]	; 0x34
 800c19e:	4a0e      	ldr	r2, [pc, #56]	; (800c1d8 <HAL_UART_MspInit+0x10c>)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	2106      	movs	r1, #6
 800c1a8:	2047      	movs	r0, #71	; 0x47
 800c1aa:	f7f7 fea7 	bl	8003efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800c1ae:	2047      	movs	r0, #71	; 0x47
 800c1b0:	f7f7 fec0 	bl	8003f34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */
    // Enable RX idle interrupt, which we use to handle variable-length messages
    __HAL_UART_ENABLE_IT(uartHandle, UART_IT_IDLE);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	68da      	ldr	r2, [r3, #12]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f042 0210 	orr.w	r2, r2, #16
 800c1c2:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART6_MspInit 1 */
  }
}
 800c1c4:	bf00      	nop
 800c1c6:	3728      	adds	r7, #40	; 0x28
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	40011400 	.word	0x40011400
 800c1d0:	40023800 	.word	0x40023800
 800c1d4:	40020800 	.word	0x40020800
 800c1d8:	200048f8 	.word	0x200048f8
 800c1dc:	40026428 	.word	0x40026428

0800c1e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800c1e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c218 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c1e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c1e6:	e003      	b.n	800c1f0 <LoopCopyDataInit>

0800c1e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c1e8:	4b0c      	ldr	r3, [pc, #48]	; (800c21c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c1ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c1ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c1ee:	3104      	adds	r1, #4

0800c1f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c1f0:	480b      	ldr	r0, [pc, #44]	; (800c220 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c1f2:	4b0c      	ldr	r3, [pc, #48]	; (800c224 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c1f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c1f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c1f8:	d3f6      	bcc.n	800c1e8 <CopyDataInit>
  ldr  r2, =_sbss
 800c1fa:	4a0b      	ldr	r2, [pc, #44]	; (800c228 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c1fc:	e002      	b.n	800c204 <LoopFillZerobss>

0800c1fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c1fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c200:	f842 3b04 	str.w	r3, [r2], #4

0800c204 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c204:	4b09      	ldr	r3, [pc, #36]	; (800c22c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c206:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c208:	d3f9      	bcc.n	800c1fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c20a:	f7ff fde3 	bl	800bdd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c20e:	f000 f817 	bl	800c240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c212:	f7ff fb15 	bl	800b840 <main>
  bx  lr    
 800c216:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800c218:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800c21c:	0800f7e8 	.word	0x0800f7e8
  ldr  r0, =_sdata
 800c220:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c224:	200000d4 	.word	0x200000d4
  ldr  r2, =_sbss
 800c228:	200000d8 	.word	0x200000d8
  ldr  r3, = _ebss
 800c22c:	2000499c 	.word	0x2000499c

0800c230 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c230:	e7fe      	b.n	800c230 <ADC_IRQHandler>
	...

0800c234 <__errno>:
 800c234:	4b01      	ldr	r3, [pc, #4]	; (800c23c <__errno+0x8>)
 800c236:	6818      	ldr	r0, [r3, #0]
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	2000006c 	.word	0x2000006c

0800c240 <__libc_init_array>:
 800c240:	b570      	push	{r4, r5, r6, lr}
 800c242:	4e0d      	ldr	r6, [pc, #52]	; (800c278 <__libc_init_array+0x38>)
 800c244:	4c0d      	ldr	r4, [pc, #52]	; (800c27c <__libc_init_array+0x3c>)
 800c246:	1ba4      	subs	r4, r4, r6
 800c248:	10a4      	asrs	r4, r4, #2
 800c24a:	2500      	movs	r5, #0
 800c24c:	42a5      	cmp	r5, r4
 800c24e:	d109      	bne.n	800c264 <__libc_init_array+0x24>
 800c250:	4e0b      	ldr	r6, [pc, #44]	; (800c280 <__libc_init_array+0x40>)
 800c252:	4c0c      	ldr	r4, [pc, #48]	; (800c284 <__libc_init_array+0x44>)
 800c254:	f002 ff12 	bl	800f07c <_init>
 800c258:	1ba4      	subs	r4, r4, r6
 800c25a:	10a4      	asrs	r4, r4, #2
 800c25c:	2500      	movs	r5, #0
 800c25e:	42a5      	cmp	r5, r4
 800c260:	d105      	bne.n	800c26e <__libc_init_array+0x2e>
 800c262:	bd70      	pop	{r4, r5, r6, pc}
 800c264:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c268:	4798      	blx	r3
 800c26a:	3501      	adds	r5, #1
 800c26c:	e7ee      	b.n	800c24c <__libc_init_array+0xc>
 800c26e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c272:	4798      	blx	r3
 800c274:	3501      	adds	r5, #1
 800c276:	e7f2      	b.n	800c25e <__libc_init_array+0x1e>
 800c278:	0800f7e0 	.word	0x0800f7e0
 800c27c:	0800f7e0 	.word	0x0800f7e0
 800c280:	0800f7e0 	.word	0x0800f7e0
 800c284:	0800f7e4 	.word	0x0800f7e4

0800c288 <memcpy>:
 800c288:	b510      	push	{r4, lr}
 800c28a:	1e43      	subs	r3, r0, #1
 800c28c:	440a      	add	r2, r1
 800c28e:	4291      	cmp	r1, r2
 800c290:	d100      	bne.n	800c294 <memcpy+0xc>
 800c292:	bd10      	pop	{r4, pc}
 800c294:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c298:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c29c:	e7f7      	b.n	800c28e <memcpy+0x6>

0800c29e <memset>:
 800c29e:	4402      	add	r2, r0
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d100      	bne.n	800c2a8 <memset+0xa>
 800c2a6:	4770      	bx	lr
 800c2a8:	f803 1b01 	strb.w	r1, [r3], #1
 800c2ac:	e7f9      	b.n	800c2a2 <memset+0x4>
	...

0800c2b0 <iprintf>:
 800c2b0:	b40f      	push	{r0, r1, r2, r3}
 800c2b2:	4b0a      	ldr	r3, [pc, #40]	; (800c2dc <iprintf+0x2c>)
 800c2b4:	b513      	push	{r0, r1, r4, lr}
 800c2b6:	681c      	ldr	r4, [r3, #0]
 800c2b8:	b124      	cbz	r4, 800c2c4 <iprintf+0x14>
 800c2ba:	69a3      	ldr	r3, [r4, #24]
 800c2bc:	b913      	cbnz	r3, 800c2c4 <iprintf+0x14>
 800c2be:	4620      	mov	r0, r4
 800c2c0:	f000 fa42 	bl	800c748 <__sinit>
 800c2c4:	ab05      	add	r3, sp, #20
 800c2c6:	9a04      	ldr	r2, [sp, #16]
 800c2c8:	68a1      	ldr	r1, [r4, #8]
 800c2ca:	9301      	str	r3, [sp, #4]
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	f000 fd4d 	bl	800cd6c <_vfiprintf_r>
 800c2d2:	b002      	add	sp, #8
 800c2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2d8:	b004      	add	sp, #16
 800c2da:	4770      	bx	lr
 800c2dc:	2000006c 	.word	0x2000006c

0800c2e0 <_puts_r>:
 800c2e0:	b570      	push	{r4, r5, r6, lr}
 800c2e2:	460e      	mov	r6, r1
 800c2e4:	4605      	mov	r5, r0
 800c2e6:	b118      	cbz	r0, 800c2f0 <_puts_r+0x10>
 800c2e8:	6983      	ldr	r3, [r0, #24]
 800c2ea:	b90b      	cbnz	r3, 800c2f0 <_puts_r+0x10>
 800c2ec:	f000 fa2c 	bl	800c748 <__sinit>
 800c2f0:	69ab      	ldr	r3, [r5, #24]
 800c2f2:	68ac      	ldr	r4, [r5, #8]
 800c2f4:	b913      	cbnz	r3, 800c2fc <_puts_r+0x1c>
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	f000 fa26 	bl	800c748 <__sinit>
 800c2fc:	4b23      	ldr	r3, [pc, #140]	; (800c38c <_puts_r+0xac>)
 800c2fe:	429c      	cmp	r4, r3
 800c300:	d117      	bne.n	800c332 <_puts_r+0x52>
 800c302:	686c      	ldr	r4, [r5, #4]
 800c304:	89a3      	ldrh	r3, [r4, #12]
 800c306:	071b      	lsls	r3, r3, #28
 800c308:	d51d      	bpl.n	800c346 <_puts_r+0x66>
 800c30a:	6923      	ldr	r3, [r4, #16]
 800c30c:	b1db      	cbz	r3, 800c346 <_puts_r+0x66>
 800c30e:	3e01      	subs	r6, #1
 800c310:	68a3      	ldr	r3, [r4, #8]
 800c312:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c316:	3b01      	subs	r3, #1
 800c318:	60a3      	str	r3, [r4, #8]
 800c31a:	b9e9      	cbnz	r1, 800c358 <_puts_r+0x78>
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	da2e      	bge.n	800c37e <_puts_r+0x9e>
 800c320:	4622      	mov	r2, r4
 800c322:	210a      	movs	r1, #10
 800c324:	4628      	mov	r0, r5
 800c326:	f000 f85f 	bl	800c3e8 <__swbuf_r>
 800c32a:	3001      	adds	r0, #1
 800c32c:	d011      	beq.n	800c352 <_puts_r+0x72>
 800c32e:	200a      	movs	r0, #10
 800c330:	e011      	b.n	800c356 <_puts_r+0x76>
 800c332:	4b17      	ldr	r3, [pc, #92]	; (800c390 <_puts_r+0xb0>)
 800c334:	429c      	cmp	r4, r3
 800c336:	d101      	bne.n	800c33c <_puts_r+0x5c>
 800c338:	68ac      	ldr	r4, [r5, #8]
 800c33a:	e7e3      	b.n	800c304 <_puts_r+0x24>
 800c33c:	4b15      	ldr	r3, [pc, #84]	; (800c394 <_puts_r+0xb4>)
 800c33e:	429c      	cmp	r4, r3
 800c340:	bf08      	it	eq
 800c342:	68ec      	ldreq	r4, [r5, #12]
 800c344:	e7de      	b.n	800c304 <_puts_r+0x24>
 800c346:	4621      	mov	r1, r4
 800c348:	4628      	mov	r0, r5
 800c34a:	f000 f89f 	bl	800c48c <__swsetup_r>
 800c34e:	2800      	cmp	r0, #0
 800c350:	d0dd      	beq.n	800c30e <_puts_r+0x2e>
 800c352:	f04f 30ff 	mov.w	r0, #4294967295
 800c356:	bd70      	pop	{r4, r5, r6, pc}
 800c358:	2b00      	cmp	r3, #0
 800c35a:	da04      	bge.n	800c366 <_puts_r+0x86>
 800c35c:	69a2      	ldr	r2, [r4, #24]
 800c35e:	429a      	cmp	r2, r3
 800c360:	dc06      	bgt.n	800c370 <_puts_r+0x90>
 800c362:	290a      	cmp	r1, #10
 800c364:	d004      	beq.n	800c370 <_puts_r+0x90>
 800c366:	6823      	ldr	r3, [r4, #0]
 800c368:	1c5a      	adds	r2, r3, #1
 800c36a:	6022      	str	r2, [r4, #0]
 800c36c:	7019      	strb	r1, [r3, #0]
 800c36e:	e7cf      	b.n	800c310 <_puts_r+0x30>
 800c370:	4622      	mov	r2, r4
 800c372:	4628      	mov	r0, r5
 800c374:	f000 f838 	bl	800c3e8 <__swbuf_r>
 800c378:	3001      	adds	r0, #1
 800c37a:	d1c9      	bne.n	800c310 <_puts_r+0x30>
 800c37c:	e7e9      	b.n	800c352 <_puts_r+0x72>
 800c37e:	6823      	ldr	r3, [r4, #0]
 800c380:	200a      	movs	r0, #10
 800c382:	1c5a      	adds	r2, r3, #1
 800c384:	6022      	str	r2, [r4, #0]
 800c386:	7018      	strb	r0, [r3, #0]
 800c388:	e7e5      	b.n	800c356 <_puts_r+0x76>
 800c38a:	bf00      	nop
 800c38c:	0800f6d4 	.word	0x0800f6d4
 800c390:	0800f6f4 	.word	0x0800f6f4
 800c394:	0800f6b4 	.word	0x0800f6b4

0800c398 <puts>:
 800c398:	4b02      	ldr	r3, [pc, #8]	; (800c3a4 <puts+0xc>)
 800c39a:	4601      	mov	r1, r0
 800c39c:	6818      	ldr	r0, [r3, #0]
 800c39e:	f7ff bf9f 	b.w	800c2e0 <_puts_r>
 800c3a2:	bf00      	nop
 800c3a4:	2000006c 	.word	0x2000006c

0800c3a8 <siprintf>:
 800c3a8:	b40e      	push	{r1, r2, r3}
 800c3aa:	b500      	push	{lr}
 800c3ac:	b09c      	sub	sp, #112	; 0x70
 800c3ae:	ab1d      	add	r3, sp, #116	; 0x74
 800c3b0:	9002      	str	r0, [sp, #8]
 800c3b2:	9006      	str	r0, [sp, #24]
 800c3b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c3b8:	4809      	ldr	r0, [pc, #36]	; (800c3e0 <siprintf+0x38>)
 800c3ba:	9107      	str	r1, [sp, #28]
 800c3bc:	9104      	str	r1, [sp, #16]
 800c3be:	4909      	ldr	r1, [pc, #36]	; (800c3e4 <siprintf+0x3c>)
 800c3c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3c4:	9105      	str	r1, [sp, #20]
 800c3c6:	6800      	ldr	r0, [r0, #0]
 800c3c8:	9301      	str	r3, [sp, #4]
 800c3ca:	a902      	add	r1, sp, #8
 800c3cc:	f000 fbac 	bl	800cb28 <_svfiprintf_r>
 800c3d0:	9b02      	ldr	r3, [sp, #8]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	701a      	strb	r2, [r3, #0]
 800c3d6:	b01c      	add	sp, #112	; 0x70
 800c3d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3dc:	b003      	add	sp, #12
 800c3de:	4770      	bx	lr
 800c3e0:	2000006c 	.word	0x2000006c
 800c3e4:	ffff0208 	.word	0xffff0208

0800c3e8 <__swbuf_r>:
 800c3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ea:	460e      	mov	r6, r1
 800c3ec:	4614      	mov	r4, r2
 800c3ee:	4605      	mov	r5, r0
 800c3f0:	b118      	cbz	r0, 800c3fa <__swbuf_r+0x12>
 800c3f2:	6983      	ldr	r3, [r0, #24]
 800c3f4:	b90b      	cbnz	r3, 800c3fa <__swbuf_r+0x12>
 800c3f6:	f000 f9a7 	bl	800c748 <__sinit>
 800c3fa:	4b21      	ldr	r3, [pc, #132]	; (800c480 <__swbuf_r+0x98>)
 800c3fc:	429c      	cmp	r4, r3
 800c3fe:	d12a      	bne.n	800c456 <__swbuf_r+0x6e>
 800c400:	686c      	ldr	r4, [r5, #4]
 800c402:	69a3      	ldr	r3, [r4, #24]
 800c404:	60a3      	str	r3, [r4, #8]
 800c406:	89a3      	ldrh	r3, [r4, #12]
 800c408:	071a      	lsls	r2, r3, #28
 800c40a:	d52e      	bpl.n	800c46a <__swbuf_r+0x82>
 800c40c:	6923      	ldr	r3, [r4, #16]
 800c40e:	b363      	cbz	r3, 800c46a <__swbuf_r+0x82>
 800c410:	6923      	ldr	r3, [r4, #16]
 800c412:	6820      	ldr	r0, [r4, #0]
 800c414:	1ac0      	subs	r0, r0, r3
 800c416:	6963      	ldr	r3, [r4, #20]
 800c418:	b2f6      	uxtb	r6, r6
 800c41a:	4283      	cmp	r3, r0
 800c41c:	4637      	mov	r7, r6
 800c41e:	dc04      	bgt.n	800c42a <__swbuf_r+0x42>
 800c420:	4621      	mov	r1, r4
 800c422:	4628      	mov	r0, r5
 800c424:	f000 f926 	bl	800c674 <_fflush_r>
 800c428:	bb28      	cbnz	r0, 800c476 <__swbuf_r+0x8e>
 800c42a:	68a3      	ldr	r3, [r4, #8]
 800c42c:	3b01      	subs	r3, #1
 800c42e:	60a3      	str	r3, [r4, #8]
 800c430:	6823      	ldr	r3, [r4, #0]
 800c432:	1c5a      	adds	r2, r3, #1
 800c434:	6022      	str	r2, [r4, #0]
 800c436:	701e      	strb	r6, [r3, #0]
 800c438:	6963      	ldr	r3, [r4, #20]
 800c43a:	3001      	adds	r0, #1
 800c43c:	4283      	cmp	r3, r0
 800c43e:	d004      	beq.n	800c44a <__swbuf_r+0x62>
 800c440:	89a3      	ldrh	r3, [r4, #12]
 800c442:	07db      	lsls	r3, r3, #31
 800c444:	d519      	bpl.n	800c47a <__swbuf_r+0x92>
 800c446:	2e0a      	cmp	r6, #10
 800c448:	d117      	bne.n	800c47a <__swbuf_r+0x92>
 800c44a:	4621      	mov	r1, r4
 800c44c:	4628      	mov	r0, r5
 800c44e:	f000 f911 	bl	800c674 <_fflush_r>
 800c452:	b190      	cbz	r0, 800c47a <__swbuf_r+0x92>
 800c454:	e00f      	b.n	800c476 <__swbuf_r+0x8e>
 800c456:	4b0b      	ldr	r3, [pc, #44]	; (800c484 <__swbuf_r+0x9c>)
 800c458:	429c      	cmp	r4, r3
 800c45a:	d101      	bne.n	800c460 <__swbuf_r+0x78>
 800c45c:	68ac      	ldr	r4, [r5, #8]
 800c45e:	e7d0      	b.n	800c402 <__swbuf_r+0x1a>
 800c460:	4b09      	ldr	r3, [pc, #36]	; (800c488 <__swbuf_r+0xa0>)
 800c462:	429c      	cmp	r4, r3
 800c464:	bf08      	it	eq
 800c466:	68ec      	ldreq	r4, [r5, #12]
 800c468:	e7cb      	b.n	800c402 <__swbuf_r+0x1a>
 800c46a:	4621      	mov	r1, r4
 800c46c:	4628      	mov	r0, r5
 800c46e:	f000 f80d 	bl	800c48c <__swsetup_r>
 800c472:	2800      	cmp	r0, #0
 800c474:	d0cc      	beq.n	800c410 <__swbuf_r+0x28>
 800c476:	f04f 37ff 	mov.w	r7, #4294967295
 800c47a:	4638      	mov	r0, r7
 800c47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c47e:	bf00      	nop
 800c480:	0800f6d4 	.word	0x0800f6d4
 800c484:	0800f6f4 	.word	0x0800f6f4
 800c488:	0800f6b4 	.word	0x0800f6b4

0800c48c <__swsetup_r>:
 800c48c:	4b32      	ldr	r3, [pc, #200]	; (800c558 <__swsetup_r+0xcc>)
 800c48e:	b570      	push	{r4, r5, r6, lr}
 800c490:	681d      	ldr	r5, [r3, #0]
 800c492:	4606      	mov	r6, r0
 800c494:	460c      	mov	r4, r1
 800c496:	b125      	cbz	r5, 800c4a2 <__swsetup_r+0x16>
 800c498:	69ab      	ldr	r3, [r5, #24]
 800c49a:	b913      	cbnz	r3, 800c4a2 <__swsetup_r+0x16>
 800c49c:	4628      	mov	r0, r5
 800c49e:	f000 f953 	bl	800c748 <__sinit>
 800c4a2:	4b2e      	ldr	r3, [pc, #184]	; (800c55c <__swsetup_r+0xd0>)
 800c4a4:	429c      	cmp	r4, r3
 800c4a6:	d10f      	bne.n	800c4c8 <__swsetup_r+0x3c>
 800c4a8:	686c      	ldr	r4, [r5, #4]
 800c4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4ae:	b29a      	uxth	r2, r3
 800c4b0:	0715      	lsls	r5, r2, #28
 800c4b2:	d42c      	bmi.n	800c50e <__swsetup_r+0x82>
 800c4b4:	06d0      	lsls	r0, r2, #27
 800c4b6:	d411      	bmi.n	800c4dc <__swsetup_r+0x50>
 800c4b8:	2209      	movs	r2, #9
 800c4ba:	6032      	str	r2, [r6, #0]
 800c4bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4c0:	81a3      	strh	r3, [r4, #12]
 800c4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c6:	e03e      	b.n	800c546 <__swsetup_r+0xba>
 800c4c8:	4b25      	ldr	r3, [pc, #148]	; (800c560 <__swsetup_r+0xd4>)
 800c4ca:	429c      	cmp	r4, r3
 800c4cc:	d101      	bne.n	800c4d2 <__swsetup_r+0x46>
 800c4ce:	68ac      	ldr	r4, [r5, #8]
 800c4d0:	e7eb      	b.n	800c4aa <__swsetup_r+0x1e>
 800c4d2:	4b24      	ldr	r3, [pc, #144]	; (800c564 <__swsetup_r+0xd8>)
 800c4d4:	429c      	cmp	r4, r3
 800c4d6:	bf08      	it	eq
 800c4d8:	68ec      	ldreq	r4, [r5, #12]
 800c4da:	e7e6      	b.n	800c4aa <__swsetup_r+0x1e>
 800c4dc:	0751      	lsls	r1, r2, #29
 800c4de:	d512      	bpl.n	800c506 <__swsetup_r+0x7a>
 800c4e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4e2:	b141      	cbz	r1, 800c4f6 <__swsetup_r+0x6a>
 800c4e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4e8:	4299      	cmp	r1, r3
 800c4ea:	d002      	beq.n	800c4f2 <__swsetup_r+0x66>
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	f000 fa19 	bl	800c924 <_free_r>
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	6363      	str	r3, [r4, #52]	; 0x34
 800c4f6:	89a3      	ldrh	r3, [r4, #12]
 800c4f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c4fc:	81a3      	strh	r3, [r4, #12]
 800c4fe:	2300      	movs	r3, #0
 800c500:	6063      	str	r3, [r4, #4]
 800c502:	6923      	ldr	r3, [r4, #16]
 800c504:	6023      	str	r3, [r4, #0]
 800c506:	89a3      	ldrh	r3, [r4, #12]
 800c508:	f043 0308 	orr.w	r3, r3, #8
 800c50c:	81a3      	strh	r3, [r4, #12]
 800c50e:	6923      	ldr	r3, [r4, #16]
 800c510:	b94b      	cbnz	r3, 800c526 <__swsetup_r+0x9a>
 800c512:	89a3      	ldrh	r3, [r4, #12]
 800c514:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c51c:	d003      	beq.n	800c526 <__swsetup_r+0x9a>
 800c51e:	4621      	mov	r1, r4
 800c520:	4630      	mov	r0, r6
 800c522:	f000 f9bf 	bl	800c8a4 <__smakebuf_r>
 800c526:	89a2      	ldrh	r2, [r4, #12]
 800c528:	f012 0301 	ands.w	r3, r2, #1
 800c52c:	d00c      	beq.n	800c548 <__swsetup_r+0xbc>
 800c52e:	2300      	movs	r3, #0
 800c530:	60a3      	str	r3, [r4, #8]
 800c532:	6963      	ldr	r3, [r4, #20]
 800c534:	425b      	negs	r3, r3
 800c536:	61a3      	str	r3, [r4, #24]
 800c538:	6923      	ldr	r3, [r4, #16]
 800c53a:	b953      	cbnz	r3, 800c552 <__swsetup_r+0xc6>
 800c53c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c540:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c544:	d1ba      	bne.n	800c4bc <__swsetup_r+0x30>
 800c546:	bd70      	pop	{r4, r5, r6, pc}
 800c548:	0792      	lsls	r2, r2, #30
 800c54a:	bf58      	it	pl
 800c54c:	6963      	ldrpl	r3, [r4, #20]
 800c54e:	60a3      	str	r3, [r4, #8]
 800c550:	e7f2      	b.n	800c538 <__swsetup_r+0xac>
 800c552:	2000      	movs	r0, #0
 800c554:	e7f7      	b.n	800c546 <__swsetup_r+0xba>
 800c556:	bf00      	nop
 800c558:	2000006c 	.word	0x2000006c
 800c55c:	0800f6d4 	.word	0x0800f6d4
 800c560:	0800f6f4 	.word	0x0800f6f4
 800c564:	0800f6b4 	.word	0x0800f6b4

0800c568 <__sflush_r>:
 800c568:	898a      	ldrh	r2, [r1, #12]
 800c56a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c56e:	4605      	mov	r5, r0
 800c570:	0710      	lsls	r0, r2, #28
 800c572:	460c      	mov	r4, r1
 800c574:	d458      	bmi.n	800c628 <__sflush_r+0xc0>
 800c576:	684b      	ldr	r3, [r1, #4]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	dc05      	bgt.n	800c588 <__sflush_r+0x20>
 800c57c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c57e:	2b00      	cmp	r3, #0
 800c580:	dc02      	bgt.n	800c588 <__sflush_r+0x20>
 800c582:	2000      	movs	r0, #0
 800c584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c58a:	2e00      	cmp	r6, #0
 800c58c:	d0f9      	beq.n	800c582 <__sflush_r+0x1a>
 800c58e:	2300      	movs	r3, #0
 800c590:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c594:	682f      	ldr	r7, [r5, #0]
 800c596:	6a21      	ldr	r1, [r4, #32]
 800c598:	602b      	str	r3, [r5, #0]
 800c59a:	d032      	beq.n	800c602 <__sflush_r+0x9a>
 800c59c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c59e:	89a3      	ldrh	r3, [r4, #12]
 800c5a0:	075a      	lsls	r2, r3, #29
 800c5a2:	d505      	bpl.n	800c5b0 <__sflush_r+0x48>
 800c5a4:	6863      	ldr	r3, [r4, #4]
 800c5a6:	1ac0      	subs	r0, r0, r3
 800c5a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c5aa:	b10b      	cbz	r3, 800c5b0 <__sflush_r+0x48>
 800c5ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c5ae:	1ac0      	subs	r0, r0, r3
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5b6:	6a21      	ldr	r1, [r4, #32]
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	47b0      	blx	r6
 800c5bc:	1c43      	adds	r3, r0, #1
 800c5be:	89a3      	ldrh	r3, [r4, #12]
 800c5c0:	d106      	bne.n	800c5d0 <__sflush_r+0x68>
 800c5c2:	6829      	ldr	r1, [r5, #0]
 800c5c4:	291d      	cmp	r1, #29
 800c5c6:	d848      	bhi.n	800c65a <__sflush_r+0xf2>
 800c5c8:	4a29      	ldr	r2, [pc, #164]	; (800c670 <__sflush_r+0x108>)
 800c5ca:	40ca      	lsrs	r2, r1
 800c5cc:	07d6      	lsls	r6, r2, #31
 800c5ce:	d544      	bpl.n	800c65a <__sflush_r+0xf2>
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	6062      	str	r2, [r4, #4]
 800c5d4:	04d9      	lsls	r1, r3, #19
 800c5d6:	6922      	ldr	r2, [r4, #16]
 800c5d8:	6022      	str	r2, [r4, #0]
 800c5da:	d504      	bpl.n	800c5e6 <__sflush_r+0x7e>
 800c5dc:	1c42      	adds	r2, r0, #1
 800c5de:	d101      	bne.n	800c5e4 <__sflush_r+0x7c>
 800c5e0:	682b      	ldr	r3, [r5, #0]
 800c5e2:	b903      	cbnz	r3, 800c5e6 <__sflush_r+0x7e>
 800c5e4:	6560      	str	r0, [r4, #84]	; 0x54
 800c5e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5e8:	602f      	str	r7, [r5, #0]
 800c5ea:	2900      	cmp	r1, #0
 800c5ec:	d0c9      	beq.n	800c582 <__sflush_r+0x1a>
 800c5ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5f2:	4299      	cmp	r1, r3
 800c5f4:	d002      	beq.n	800c5fc <__sflush_r+0x94>
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	f000 f994 	bl	800c924 <_free_r>
 800c5fc:	2000      	movs	r0, #0
 800c5fe:	6360      	str	r0, [r4, #52]	; 0x34
 800c600:	e7c0      	b.n	800c584 <__sflush_r+0x1c>
 800c602:	2301      	movs	r3, #1
 800c604:	4628      	mov	r0, r5
 800c606:	47b0      	blx	r6
 800c608:	1c41      	adds	r1, r0, #1
 800c60a:	d1c8      	bne.n	800c59e <__sflush_r+0x36>
 800c60c:	682b      	ldr	r3, [r5, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d0c5      	beq.n	800c59e <__sflush_r+0x36>
 800c612:	2b1d      	cmp	r3, #29
 800c614:	d001      	beq.n	800c61a <__sflush_r+0xb2>
 800c616:	2b16      	cmp	r3, #22
 800c618:	d101      	bne.n	800c61e <__sflush_r+0xb6>
 800c61a:	602f      	str	r7, [r5, #0]
 800c61c:	e7b1      	b.n	800c582 <__sflush_r+0x1a>
 800c61e:	89a3      	ldrh	r3, [r4, #12]
 800c620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c624:	81a3      	strh	r3, [r4, #12]
 800c626:	e7ad      	b.n	800c584 <__sflush_r+0x1c>
 800c628:	690f      	ldr	r7, [r1, #16]
 800c62a:	2f00      	cmp	r7, #0
 800c62c:	d0a9      	beq.n	800c582 <__sflush_r+0x1a>
 800c62e:	0793      	lsls	r3, r2, #30
 800c630:	680e      	ldr	r6, [r1, #0]
 800c632:	bf08      	it	eq
 800c634:	694b      	ldreq	r3, [r1, #20]
 800c636:	600f      	str	r7, [r1, #0]
 800c638:	bf18      	it	ne
 800c63a:	2300      	movne	r3, #0
 800c63c:	eba6 0807 	sub.w	r8, r6, r7
 800c640:	608b      	str	r3, [r1, #8]
 800c642:	f1b8 0f00 	cmp.w	r8, #0
 800c646:	dd9c      	ble.n	800c582 <__sflush_r+0x1a>
 800c648:	4643      	mov	r3, r8
 800c64a:	463a      	mov	r2, r7
 800c64c:	6a21      	ldr	r1, [r4, #32]
 800c64e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c650:	4628      	mov	r0, r5
 800c652:	47b0      	blx	r6
 800c654:	2800      	cmp	r0, #0
 800c656:	dc06      	bgt.n	800c666 <__sflush_r+0xfe>
 800c658:	89a3      	ldrh	r3, [r4, #12]
 800c65a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c65e:	81a3      	strh	r3, [r4, #12]
 800c660:	f04f 30ff 	mov.w	r0, #4294967295
 800c664:	e78e      	b.n	800c584 <__sflush_r+0x1c>
 800c666:	4407      	add	r7, r0
 800c668:	eba8 0800 	sub.w	r8, r8, r0
 800c66c:	e7e9      	b.n	800c642 <__sflush_r+0xda>
 800c66e:	bf00      	nop
 800c670:	20400001 	.word	0x20400001

0800c674 <_fflush_r>:
 800c674:	b538      	push	{r3, r4, r5, lr}
 800c676:	690b      	ldr	r3, [r1, #16]
 800c678:	4605      	mov	r5, r0
 800c67a:	460c      	mov	r4, r1
 800c67c:	b1db      	cbz	r3, 800c6b6 <_fflush_r+0x42>
 800c67e:	b118      	cbz	r0, 800c688 <_fflush_r+0x14>
 800c680:	6983      	ldr	r3, [r0, #24]
 800c682:	b90b      	cbnz	r3, 800c688 <_fflush_r+0x14>
 800c684:	f000 f860 	bl	800c748 <__sinit>
 800c688:	4b0c      	ldr	r3, [pc, #48]	; (800c6bc <_fflush_r+0x48>)
 800c68a:	429c      	cmp	r4, r3
 800c68c:	d109      	bne.n	800c6a2 <_fflush_r+0x2e>
 800c68e:	686c      	ldr	r4, [r5, #4]
 800c690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c694:	b17b      	cbz	r3, 800c6b6 <_fflush_r+0x42>
 800c696:	4621      	mov	r1, r4
 800c698:	4628      	mov	r0, r5
 800c69a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c69e:	f7ff bf63 	b.w	800c568 <__sflush_r>
 800c6a2:	4b07      	ldr	r3, [pc, #28]	; (800c6c0 <_fflush_r+0x4c>)
 800c6a4:	429c      	cmp	r4, r3
 800c6a6:	d101      	bne.n	800c6ac <_fflush_r+0x38>
 800c6a8:	68ac      	ldr	r4, [r5, #8]
 800c6aa:	e7f1      	b.n	800c690 <_fflush_r+0x1c>
 800c6ac:	4b05      	ldr	r3, [pc, #20]	; (800c6c4 <_fflush_r+0x50>)
 800c6ae:	429c      	cmp	r4, r3
 800c6b0:	bf08      	it	eq
 800c6b2:	68ec      	ldreq	r4, [r5, #12]
 800c6b4:	e7ec      	b.n	800c690 <_fflush_r+0x1c>
 800c6b6:	2000      	movs	r0, #0
 800c6b8:	bd38      	pop	{r3, r4, r5, pc}
 800c6ba:	bf00      	nop
 800c6bc:	0800f6d4 	.word	0x0800f6d4
 800c6c0:	0800f6f4 	.word	0x0800f6f4
 800c6c4:	0800f6b4 	.word	0x0800f6b4

0800c6c8 <std>:
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	b510      	push	{r4, lr}
 800c6cc:	4604      	mov	r4, r0
 800c6ce:	e9c0 3300 	strd	r3, r3, [r0]
 800c6d2:	6083      	str	r3, [r0, #8]
 800c6d4:	8181      	strh	r1, [r0, #12]
 800c6d6:	6643      	str	r3, [r0, #100]	; 0x64
 800c6d8:	81c2      	strh	r2, [r0, #14]
 800c6da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c6de:	6183      	str	r3, [r0, #24]
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	2208      	movs	r2, #8
 800c6e4:	305c      	adds	r0, #92	; 0x5c
 800c6e6:	f7ff fdda 	bl	800c29e <memset>
 800c6ea:	4b05      	ldr	r3, [pc, #20]	; (800c700 <std+0x38>)
 800c6ec:	6263      	str	r3, [r4, #36]	; 0x24
 800c6ee:	4b05      	ldr	r3, [pc, #20]	; (800c704 <std+0x3c>)
 800c6f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c6f2:	4b05      	ldr	r3, [pc, #20]	; (800c708 <std+0x40>)
 800c6f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c6f6:	4b05      	ldr	r3, [pc, #20]	; (800c70c <std+0x44>)
 800c6f8:	6224      	str	r4, [r4, #32]
 800c6fa:	6323      	str	r3, [r4, #48]	; 0x30
 800c6fc:	bd10      	pop	{r4, pc}
 800c6fe:	bf00      	nop
 800c700:	0800d2c9 	.word	0x0800d2c9
 800c704:	0800d2eb 	.word	0x0800d2eb
 800c708:	0800d323 	.word	0x0800d323
 800c70c:	0800d347 	.word	0x0800d347

0800c710 <_cleanup_r>:
 800c710:	4901      	ldr	r1, [pc, #4]	; (800c718 <_cleanup_r+0x8>)
 800c712:	f000 b885 	b.w	800c820 <_fwalk_reent>
 800c716:	bf00      	nop
 800c718:	0800c675 	.word	0x0800c675

0800c71c <__sfmoreglue>:
 800c71c:	b570      	push	{r4, r5, r6, lr}
 800c71e:	1e4a      	subs	r2, r1, #1
 800c720:	2568      	movs	r5, #104	; 0x68
 800c722:	4355      	muls	r5, r2
 800c724:	460e      	mov	r6, r1
 800c726:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c72a:	f000 f949 	bl	800c9c0 <_malloc_r>
 800c72e:	4604      	mov	r4, r0
 800c730:	b140      	cbz	r0, 800c744 <__sfmoreglue+0x28>
 800c732:	2100      	movs	r1, #0
 800c734:	e9c0 1600 	strd	r1, r6, [r0]
 800c738:	300c      	adds	r0, #12
 800c73a:	60a0      	str	r0, [r4, #8]
 800c73c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c740:	f7ff fdad 	bl	800c29e <memset>
 800c744:	4620      	mov	r0, r4
 800c746:	bd70      	pop	{r4, r5, r6, pc}

0800c748 <__sinit>:
 800c748:	6983      	ldr	r3, [r0, #24]
 800c74a:	b510      	push	{r4, lr}
 800c74c:	4604      	mov	r4, r0
 800c74e:	bb33      	cbnz	r3, 800c79e <__sinit+0x56>
 800c750:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c754:	6503      	str	r3, [r0, #80]	; 0x50
 800c756:	4b12      	ldr	r3, [pc, #72]	; (800c7a0 <__sinit+0x58>)
 800c758:	4a12      	ldr	r2, [pc, #72]	; (800c7a4 <__sinit+0x5c>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	6282      	str	r2, [r0, #40]	; 0x28
 800c75e:	4298      	cmp	r0, r3
 800c760:	bf04      	itt	eq
 800c762:	2301      	moveq	r3, #1
 800c764:	6183      	streq	r3, [r0, #24]
 800c766:	f000 f81f 	bl	800c7a8 <__sfp>
 800c76a:	6060      	str	r0, [r4, #4]
 800c76c:	4620      	mov	r0, r4
 800c76e:	f000 f81b 	bl	800c7a8 <__sfp>
 800c772:	60a0      	str	r0, [r4, #8]
 800c774:	4620      	mov	r0, r4
 800c776:	f000 f817 	bl	800c7a8 <__sfp>
 800c77a:	2200      	movs	r2, #0
 800c77c:	60e0      	str	r0, [r4, #12]
 800c77e:	2104      	movs	r1, #4
 800c780:	6860      	ldr	r0, [r4, #4]
 800c782:	f7ff ffa1 	bl	800c6c8 <std>
 800c786:	2201      	movs	r2, #1
 800c788:	2109      	movs	r1, #9
 800c78a:	68a0      	ldr	r0, [r4, #8]
 800c78c:	f7ff ff9c 	bl	800c6c8 <std>
 800c790:	2202      	movs	r2, #2
 800c792:	2112      	movs	r1, #18
 800c794:	68e0      	ldr	r0, [r4, #12]
 800c796:	f7ff ff97 	bl	800c6c8 <std>
 800c79a:	2301      	movs	r3, #1
 800c79c:	61a3      	str	r3, [r4, #24]
 800c79e:	bd10      	pop	{r4, pc}
 800c7a0:	0800f6b0 	.word	0x0800f6b0
 800c7a4:	0800c711 	.word	0x0800c711

0800c7a8 <__sfp>:
 800c7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7aa:	4b1b      	ldr	r3, [pc, #108]	; (800c818 <__sfp+0x70>)
 800c7ac:	681e      	ldr	r6, [r3, #0]
 800c7ae:	69b3      	ldr	r3, [r6, #24]
 800c7b0:	4607      	mov	r7, r0
 800c7b2:	b913      	cbnz	r3, 800c7ba <__sfp+0x12>
 800c7b4:	4630      	mov	r0, r6
 800c7b6:	f7ff ffc7 	bl	800c748 <__sinit>
 800c7ba:	3648      	adds	r6, #72	; 0x48
 800c7bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c7c0:	3b01      	subs	r3, #1
 800c7c2:	d503      	bpl.n	800c7cc <__sfp+0x24>
 800c7c4:	6833      	ldr	r3, [r6, #0]
 800c7c6:	b133      	cbz	r3, 800c7d6 <__sfp+0x2e>
 800c7c8:	6836      	ldr	r6, [r6, #0]
 800c7ca:	e7f7      	b.n	800c7bc <__sfp+0x14>
 800c7cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c7d0:	b16d      	cbz	r5, 800c7ee <__sfp+0x46>
 800c7d2:	3468      	adds	r4, #104	; 0x68
 800c7d4:	e7f4      	b.n	800c7c0 <__sfp+0x18>
 800c7d6:	2104      	movs	r1, #4
 800c7d8:	4638      	mov	r0, r7
 800c7da:	f7ff ff9f 	bl	800c71c <__sfmoreglue>
 800c7de:	6030      	str	r0, [r6, #0]
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	d1f1      	bne.n	800c7c8 <__sfp+0x20>
 800c7e4:	230c      	movs	r3, #12
 800c7e6:	603b      	str	r3, [r7, #0]
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7ee:	4b0b      	ldr	r3, [pc, #44]	; (800c81c <__sfp+0x74>)
 800c7f0:	6665      	str	r5, [r4, #100]	; 0x64
 800c7f2:	e9c4 5500 	strd	r5, r5, [r4]
 800c7f6:	60a5      	str	r5, [r4, #8]
 800c7f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c7fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c800:	2208      	movs	r2, #8
 800c802:	4629      	mov	r1, r5
 800c804:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c808:	f7ff fd49 	bl	800c29e <memset>
 800c80c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c810:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c814:	e7e9      	b.n	800c7ea <__sfp+0x42>
 800c816:	bf00      	nop
 800c818:	0800f6b0 	.word	0x0800f6b0
 800c81c:	ffff0001 	.word	0xffff0001

0800c820 <_fwalk_reent>:
 800c820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c824:	4680      	mov	r8, r0
 800c826:	4689      	mov	r9, r1
 800c828:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c82c:	2600      	movs	r6, #0
 800c82e:	b914      	cbnz	r4, 800c836 <_fwalk_reent+0x16>
 800c830:	4630      	mov	r0, r6
 800c832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c836:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c83a:	3f01      	subs	r7, #1
 800c83c:	d501      	bpl.n	800c842 <_fwalk_reent+0x22>
 800c83e:	6824      	ldr	r4, [r4, #0]
 800c840:	e7f5      	b.n	800c82e <_fwalk_reent+0xe>
 800c842:	89ab      	ldrh	r3, [r5, #12]
 800c844:	2b01      	cmp	r3, #1
 800c846:	d907      	bls.n	800c858 <_fwalk_reent+0x38>
 800c848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c84c:	3301      	adds	r3, #1
 800c84e:	d003      	beq.n	800c858 <_fwalk_reent+0x38>
 800c850:	4629      	mov	r1, r5
 800c852:	4640      	mov	r0, r8
 800c854:	47c8      	blx	r9
 800c856:	4306      	orrs	r6, r0
 800c858:	3568      	adds	r5, #104	; 0x68
 800c85a:	e7ee      	b.n	800c83a <_fwalk_reent+0x1a>

0800c85c <__swhatbuf_r>:
 800c85c:	b570      	push	{r4, r5, r6, lr}
 800c85e:	460e      	mov	r6, r1
 800c860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c864:	2900      	cmp	r1, #0
 800c866:	b096      	sub	sp, #88	; 0x58
 800c868:	4614      	mov	r4, r2
 800c86a:	461d      	mov	r5, r3
 800c86c:	da07      	bge.n	800c87e <__swhatbuf_r+0x22>
 800c86e:	2300      	movs	r3, #0
 800c870:	602b      	str	r3, [r5, #0]
 800c872:	89b3      	ldrh	r3, [r6, #12]
 800c874:	061a      	lsls	r2, r3, #24
 800c876:	d410      	bmi.n	800c89a <__swhatbuf_r+0x3e>
 800c878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c87c:	e00e      	b.n	800c89c <__swhatbuf_r+0x40>
 800c87e:	466a      	mov	r2, sp
 800c880:	f000 fd88 	bl	800d394 <_fstat_r>
 800c884:	2800      	cmp	r0, #0
 800c886:	dbf2      	blt.n	800c86e <__swhatbuf_r+0x12>
 800c888:	9a01      	ldr	r2, [sp, #4]
 800c88a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c88e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c892:	425a      	negs	r2, r3
 800c894:	415a      	adcs	r2, r3
 800c896:	602a      	str	r2, [r5, #0]
 800c898:	e7ee      	b.n	800c878 <__swhatbuf_r+0x1c>
 800c89a:	2340      	movs	r3, #64	; 0x40
 800c89c:	2000      	movs	r0, #0
 800c89e:	6023      	str	r3, [r4, #0]
 800c8a0:	b016      	add	sp, #88	; 0x58
 800c8a2:	bd70      	pop	{r4, r5, r6, pc}

0800c8a4 <__smakebuf_r>:
 800c8a4:	898b      	ldrh	r3, [r1, #12]
 800c8a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c8a8:	079d      	lsls	r5, r3, #30
 800c8aa:	4606      	mov	r6, r0
 800c8ac:	460c      	mov	r4, r1
 800c8ae:	d507      	bpl.n	800c8c0 <__smakebuf_r+0x1c>
 800c8b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c8b4:	6023      	str	r3, [r4, #0]
 800c8b6:	6123      	str	r3, [r4, #16]
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	6163      	str	r3, [r4, #20]
 800c8bc:	b002      	add	sp, #8
 800c8be:	bd70      	pop	{r4, r5, r6, pc}
 800c8c0:	ab01      	add	r3, sp, #4
 800c8c2:	466a      	mov	r2, sp
 800c8c4:	f7ff ffca 	bl	800c85c <__swhatbuf_r>
 800c8c8:	9900      	ldr	r1, [sp, #0]
 800c8ca:	4605      	mov	r5, r0
 800c8cc:	4630      	mov	r0, r6
 800c8ce:	f000 f877 	bl	800c9c0 <_malloc_r>
 800c8d2:	b948      	cbnz	r0, 800c8e8 <__smakebuf_r+0x44>
 800c8d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8d8:	059a      	lsls	r2, r3, #22
 800c8da:	d4ef      	bmi.n	800c8bc <__smakebuf_r+0x18>
 800c8dc:	f023 0303 	bic.w	r3, r3, #3
 800c8e0:	f043 0302 	orr.w	r3, r3, #2
 800c8e4:	81a3      	strh	r3, [r4, #12]
 800c8e6:	e7e3      	b.n	800c8b0 <__smakebuf_r+0xc>
 800c8e8:	4b0d      	ldr	r3, [pc, #52]	; (800c920 <__smakebuf_r+0x7c>)
 800c8ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800c8ec:	89a3      	ldrh	r3, [r4, #12]
 800c8ee:	6020      	str	r0, [r4, #0]
 800c8f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8f4:	81a3      	strh	r3, [r4, #12]
 800c8f6:	9b00      	ldr	r3, [sp, #0]
 800c8f8:	6163      	str	r3, [r4, #20]
 800c8fa:	9b01      	ldr	r3, [sp, #4]
 800c8fc:	6120      	str	r0, [r4, #16]
 800c8fe:	b15b      	cbz	r3, 800c918 <__smakebuf_r+0x74>
 800c900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c904:	4630      	mov	r0, r6
 800c906:	f000 fd57 	bl	800d3b8 <_isatty_r>
 800c90a:	b128      	cbz	r0, 800c918 <__smakebuf_r+0x74>
 800c90c:	89a3      	ldrh	r3, [r4, #12]
 800c90e:	f023 0303 	bic.w	r3, r3, #3
 800c912:	f043 0301 	orr.w	r3, r3, #1
 800c916:	81a3      	strh	r3, [r4, #12]
 800c918:	89a3      	ldrh	r3, [r4, #12]
 800c91a:	431d      	orrs	r5, r3
 800c91c:	81a5      	strh	r5, [r4, #12]
 800c91e:	e7cd      	b.n	800c8bc <__smakebuf_r+0x18>
 800c920:	0800c711 	.word	0x0800c711

0800c924 <_free_r>:
 800c924:	b538      	push	{r3, r4, r5, lr}
 800c926:	4605      	mov	r5, r0
 800c928:	2900      	cmp	r1, #0
 800c92a:	d045      	beq.n	800c9b8 <_free_r+0x94>
 800c92c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c930:	1f0c      	subs	r4, r1, #4
 800c932:	2b00      	cmp	r3, #0
 800c934:	bfb8      	it	lt
 800c936:	18e4      	addlt	r4, r4, r3
 800c938:	f000 fd79 	bl	800d42e <__malloc_lock>
 800c93c:	4a1f      	ldr	r2, [pc, #124]	; (800c9bc <_free_r+0x98>)
 800c93e:	6813      	ldr	r3, [r2, #0]
 800c940:	4610      	mov	r0, r2
 800c942:	b933      	cbnz	r3, 800c952 <_free_r+0x2e>
 800c944:	6063      	str	r3, [r4, #4]
 800c946:	6014      	str	r4, [r2, #0]
 800c948:	4628      	mov	r0, r5
 800c94a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c94e:	f000 bd6f 	b.w	800d430 <__malloc_unlock>
 800c952:	42a3      	cmp	r3, r4
 800c954:	d90c      	bls.n	800c970 <_free_r+0x4c>
 800c956:	6821      	ldr	r1, [r4, #0]
 800c958:	1862      	adds	r2, r4, r1
 800c95a:	4293      	cmp	r3, r2
 800c95c:	bf04      	itt	eq
 800c95e:	681a      	ldreq	r2, [r3, #0]
 800c960:	685b      	ldreq	r3, [r3, #4]
 800c962:	6063      	str	r3, [r4, #4]
 800c964:	bf04      	itt	eq
 800c966:	1852      	addeq	r2, r2, r1
 800c968:	6022      	streq	r2, [r4, #0]
 800c96a:	6004      	str	r4, [r0, #0]
 800c96c:	e7ec      	b.n	800c948 <_free_r+0x24>
 800c96e:	4613      	mov	r3, r2
 800c970:	685a      	ldr	r2, [r3, #4]
 800c972:	b10a      	cbz	r2, 800c978 <_free_r+0x54>
 800c974:	42a2      	cmp	r2, r4
 800c976:	d9fa      	bls.n	800c96e <_free_r+0x4a>
 800c978:	6819      	ldr	r1, [r3, #0]
 800c97a:	1858      	adds	r0, r3, r1
 800c97c:	42a0      	cmp	r0, r4
 800c97e:	d10b      	bne.n	800c998 <_free_r+0x74>
 800c980:	6820      	ldr	r0, [r4, #0]
 800c982:	4401      	add	r1, r0
 800c984:	1858      	adds	r0, r3, r1
 800c986:	4282      	cmp	r2, r0
 800c988:	6019      	str	r1, [r3, #0]
 800c98a:	d1dd      	bne.n	800c948 <_free_r+0x24>
 800c98c:	6810      	ldr	r0, [r2, #0]
 800c98e:	6852      	ldr	r2, [r2, #4]
 800c990:	605a      	str	r2, [r3, #4]
 800c992:	4401      	add	r1, r0
 800c994:	6019      	str	r1, [r3, #0]
 800c996:	e7d7      	b.n	800c948 <_free_r+0x24>
 800c998:	d902      	bls.n	800c9a0 <_free_r+0x7c>
 800c99a:	230c      	movs	r3, #12
 800c99c:	602b      	str	r3, [r5, #0]
 800c99e:	e7d3      	b.n	800c948 <_free_r+0x24>
 800c9a0:	6820      	ldr	r0, [r4, #0]
 800c9a2:	1821      	adds	r1, r4, r0
 800c9a4:	428a      	cmp	r2, r1
 800c9a6:	bf04      	itt	eq
 800c9a8:	6811      	ldreq	r1, [r2, #0]
 800c9aa:	6852      	ldreq	r2, [r2, #4]
 800c9ac:	6062      	str	r2, [r4, #4]
 800c9ae:	bf04      	itt	eq
 800c9b0:	1809      	addeq	r1, r1, r0
 800c9b2:	6021      	streq	r1, [r4, #0]
 800c9b4:	605c      	str	r4, [r3, #4]
 800c9b6:	e7c7      	b.n	800c948 <_free_r+0x24>
 800c9b8:	bd38      	pop	{r3, r4, r5, pc}
 800c9ba:	bf00      	nop
 800c9bc:	200041cc 	.word	0x200041cc

0800c9c0 <_malloc_r>:
 800c9c0:	b570      	push	{r4, r5, r6, lr}
 800c9c2:	1ccd      	adds	r5, r1, #3
 800c9c4:	f025 0503 	bic.w	r5, r5, #3
 800c9c8:	3508      	adds	r5, #8
 800c9ca:	2d0c      	cmp	r5, #12
 800c9cc:	bf38      	it	cc
 800c9ce:	250c      	movcc	r5, #12
 800c9d0:	2d00      	cmp	r5, #0
 800c9d2:	4606      	mov	r6, r0
 800c9d4:	db01      	blt.n	800c9da <_malloc_r+0x1a>
 800c9d6:	42a9      	cmp	r1, r5
 800c9d8:	d903      	bls.n	800c9e2 <_malloc_r+0x22>
 800c9da:	230c      	movs	r3, #12
 800c9dc:	6033      	str	r3, [r6, #0]
 800c9de:	2000      	movs	r0, #0
 800c9e0:	bd70      	pop	{r4, r5, r6, pc}
 800c9e2:	f000 fd24 	bl	800d42e <__malloc_lock>
 800c9e6:	4a21      	ldr	r2, [pc, #132]	; (800ca6c <_malloc_r+0xac>)
 800c9e8:	6814      	ldr	r4, [r2, #0]
 800c9ea:	4621      	mov	r1, r4
 800c9ec:	b991      	cbnz	r1, 800ca14 <_malloc_r+0x54>
 800c9ee:	4c20      	ldr	r4, [pc, #128]	; (800ca70 <_malloc_r+0xb0>)
 800c9f0:	6823      	ldr	r3, [r4, #0]
 800c9f2:	b91b      	cbnz	r3, 800c9fc <_malloc_r+0x3c>
 800c9f4:	4630      	mov	r0, r6
 800c9f6:	f000 fc57 	bl	800d2a8 <_sbrk_r>
 800c9fa:	6020      	str	r0, [r4, #0]
 800c9fc:	4629      	mov	r1, r5
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f000 fc52 	bl	800d2a8 <_sbrk_r>
 800ca04:	1c43      	adds	r3, r0, #1
 800ca06:	d124      	bne.n	800ca52 <_malloc_r+0x92>
 800ca08:	230c      	movs	r3, #12
 800ca0a:	6033      	str	r3, [r6, #0]
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	f000 fd0f 	bl	800d430 <__malloc_unlock>
 800ca12:	e7e4      	b.n	800c9de <_malloc_r+0x1e>
 800ca14:	680b      	ldr	r3, [r1, #0]
 800ca16:	1b5b      	subs	r3, r3, r5
 800ca18:	d418      	bmi.n	800ca4c <_malloc_r+0x8c>
 800ca1a:	2b0b      	cmp	r3, #11
 800ca1c:	d90f      	bls.n	800ca3e <_malloc_r+0x7e>
 800ca1e:	600b      	str	r3, [r1, #0]
 800ca20:	50cd      	str	r5, [r1, r3]
 800ca22:	18cc      	adds	r4, r1, r3
 800ca24:	4630      	mov	r0, r6
 800ca26:	f000 fd03 	bl	800d430 <__malloc_unlock>
 800ca2a:	f104 000b 	add.w	r0, r4, #11
 800ca2e:	1d23      	adds	r3, r4, #4
 800ca30:	f020 0007 	bic.w	r0, r0, #7
 800ca34:	1ac3      	subs	r3, r0, r3
 800ca36:	d0d3      	beq.n	800c9e0 <_malloc_r+0x20>
 800ca38:	425a      	negs	r2, r3
 800ca3a:	50e2      	str	r2, [r4, r3]
 800ca3c:	e7d0      	b.n	800c9e0 <_malloc_r+0x20>
 800ca3e:	428c      	cmp	r4, r1
 800ca40:	684b      	ldr	r3, [r1, #4]
 800ca42:	bf16      	itet	ne
 800ca44:	6063      	strne	r3, [r4, #4]
 800ca46:	6013      	streq	r3, [r2, #0]
 800ca48:	460c      	movne	r4, r1
 800ca4a:	e7eb      	b.n	800ca24 <_malloc_r+0x64>
 800ca4c:	460c      	mov	r4, r1
 800ca4e:	6849      	ldr	r1, [r1, #4]
 800ca50:	e7cc      	b.n	800c9ec <_malloc_r+0x2c>
 800ca52:	1cc4      	adds	r4, r0, #3
 800ca54:	f024 0403 	bic.w	r4, r4, #3
 800ca58:	42a0      	cmp	r0, r4
 800ca5a:	d005      	beq.n	800ca68 <_malloc_r+0xa8>
 800ca5c:	1a21      	subs	r1, r4, r0
 800ca5e:	4630      	mov	r0, r6
 800ca60:	f000 fc22 	bl	800d2a8 <_sbrk_r>
 800ca64:	3001      	adds	r0, #1
 800ca66:	d0cf      	beq.n	800ca08 <_malloc_r+0x48>
 800ca68:	6025      	str	r5, [r4, #0]
 800ca6a:	e7db      	b.n	800ca24 <_malloc_r+0x64>
 800ca6c:	200041cc 	.word	0x200041cc
 800ca70:	200041d0 	.word	0x200041d0

0800ca74 <__ssputs_r>:
 800ca74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca78:	688e      	ldr	r6, [r1, #8]
 800ca7a:	429e      	cmp	r6, r3
 800ca7c:	4682      	mov	sl, r0
 800ca7e:	460c      	mov	r4, r1
 800ca80:	4690      	mov	r8, r2
 800ca82:	4699      	mov	r9, r3
 800ca84:	d837      	bhi.n	800caf6 <__ssputs_r+0x82>
 800ca86:	898a      	ldrh	r2, [r1, #12]
 800ca88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca8c:	d031      	beq.n	800caf2 <__ssputs_r+0x7e>
 800ca8e:	6825      	ldr	r5, [r4, #0]
 800ca90:	6909      	ldr	r1, [r1, #16]
 800ca92:	1a6f      	subs	r7, r5, r1
 800ca94:	6965      	ldr	r5, [r4, #20]
 800ca96:	2302      	movs	r3, #2
 800ca98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca9c:	fb95 f5f3 	sdiv	r5, r5, r3
 800caa0:	f109 0301 	add.w	r3, r9, #1
 800caa4:	443b      	add	r3, r7
 800caa6:	429d      	cmp	r5, r3
 800caa8:	bf38      	it	cc
 800caaa:	461d      	movcc	r5, r3
 800caac:	0553      	lsls	r3, r2, #21
 800caae:	d530      	bpl.n	800cb12 <__ssputs_r+0x9e>
 800cab0:	4629      	mov	r1, r5
 800cab2:	f7ff ff85 	bl	800c9c0 <_malloc_r>
 800cab6:	4606      	mov	r6, r0
 800cab8:	b950      	cbnz	r0, 800cad0 <__ssputs_r+0x5c>
 800caba:	230c      	movs	r3, #12
 800cabc:	f8ca 3000 	str.w	r3, [sl]
 800cac0:	89a3      	ldrh	r3, [r4, #12]
 800cac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cac6:	81a3      	strh	r3, [r4, #12]
 800cac8:	f04f 30ff 	mov.w	r0, #4294967295
 800cacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cad0:	463a      	mov	r2, r7
 800cad2:	6921      	ldr	r1, [r4, #16]
 800cad4:	f7ff fbd8 	bl	800c288 <memcpy>
 800cad8:	89a3      	ldrh	r3, [r4, #12]
 800cada:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cae2:	81a3      	strh	r3, [r4, #12]
 800cae4:	6126      	str	r6, [r4, #16]
 800cae6:	6165      	str	r5, [r4, #20]
 800cae8:	443e      	add	r6, r7
 800caea:	1bed      	subs	r5, r5, r7
 800caec:	6026      	str	r6, [r4, #0]
 800caee:	60a5      	str	r5, [r4, #8]
 800caf0:	464e      	mov	r6, r9
 800caf2:	454e      	cmp	r6, r9
 800caf4:	d900      	bls.n	800caf8 <__ssputs_r+0x84>
 800caf6:	464e      	mov	r6, r9
 800caf8:	4632      	mov	r2, r6
 800cafa:	4641      	mov	r1, r8
 800cafc:	6820      	ldr	r0, [r4, #0]
 800cafe:	f000 fc7d 	bl	800d3fc <memmove>
 800cb02:	68a3      	ldr	r3, [r4, #8]
 800cb04:	1b9b      	subs	r3, r3, r6
 800cb06:	60a3      	str	r3, [r4, #8]
 800cb08:	6823      	ldr	r3, [r4, #0]
 800cb0a:	441e      	add	r6, r3
 800cb0c:	6026      	str	r6, [r4, #0]
 800cb0e:	2000      	movs	r0, #0
 800cb10:	e7dc      	b.n	800cacc <__ssputs_r+0x58>
 800cb12:	462a      	mov	r2, r5
 800cb14:	f000 fc8d 	bl	800d432 <_realloc_r>
 800cb18:	4606      	mov	r6, r0
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	d1e2      	bne.n	800cae4 <__ssputs_r+0x70>
 800cb1e:	6921      	ldr	r1, [r4, #16]
 800cb20:	4650      	mov	r0, sl
 800cb22:	f7ff feff 	bl	800c924 <_free_r>
 800cb26:	e7c8      	b.n	800caba <__ssputs_r+0x46>

0800cb28 <_svfiprintf_r>:
 800cb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb2c:	461d      	mov	r5, r3
 800cb2e:	898b      	ldrh	r3, [r1, #12]
 800cb30:	061f      	lsls	r7, r3, #24
 800cb32:	b09d      	sub	sp, #116	; 0x74
 800cb34:	4680      	mov	r8, r0
 800cb36:	460c      	mov	r4, r1
 800cb38:	4616      	mov	r6, r2
 800cb3a:	d50f      	bpl.n	800cb5c <_svfiprintf_r+0x34>
 800cb3c:	690b      	ldr	r3, [r1, #16]
 800cb3e:	b96b      	cbnz	r3, 800cb5c <_svfiprintf_r+0x34>
 800cb40:	2140      	movs	r1, #64	; 0x40
 800cb42:	f7ff ff3d 	bl	800c9c0 <_malloc_r>
 800cb46:	6020      	str	r0, [r4, #0]
 800cb48:	6120      	str	r0, [r4, #16]
 800cb4a:	b928      	cbnz	r0, 800cb58 <_svfiprintf_r+0x30>
 800cb4c:	230c      	movs	r3, #12
 800cb4e:	f8c8 3000 	str.w	r3, [r8]
 800cb52:	f04f 30ff 	mov.w	r0, #4294967295
 800cb56:	e0c8      	b.n	800ccea <_svfiprintf_r+0x1c2>
 800cb58:	2340      	movs	r3, #64	; 0x40
 800cb5a:	6163      	str	r3, [r4, #20]
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	9309      	str	r3, [sp, #36]	; 0x24
 800cb60:	2320      	movs	r3, #32
 800cb62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb66:	2330      	movs	r3, #48	; 0x30
 800cb68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb6c:	9503      	str	r5, [sp, #12]
 800cb6e:	f04f 0b01 	mov.w	fp, #1
 800cb72:	4637      	mov	r7, r6
 800cb74:	463d      	mov	r5, r7
 800cb76:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cb7a:	b10b      	cbz	r3, 800cb80 <_svfiprintf_r+0x58>
 800cb7c:	2b25      	cmp	r3, #37	; 0x25
 800cb7e:	d13e      	bne.n	800cbfe <_svfiprintf_r+0xd6>
 800cb80:	ebb7 0a06 	subs.w	sl, r7, r6
 800cb84:	d00b      	beq.n	800cb9e <_svfiprintf_r+0x76>
 800cb86:	4653      	mov	r3, sl
 800cb88:	4632      	mov	r2, r6
 800cb8a:	4621      	mov	r1, r4
 800cb8c:	4640      	mov	r0, r8
 800cb8e:	f7ff ff71 	bl	800ca74 <__ssputs_r>
 800cb92:	3001      	adds	r0, #1
 800cb94:	f000 80a4 	beq.w	800cce0 <_svfiprintf_r+0x1b8>
 800cb98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb9a:	4453      	add	r3, sl
 800cb9c:	9309      	str	r3, [sp, #36]	; 0x24
 800cb9e:	783b      	ldrb	r3, [r7, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	f000 809d 	beq.w	800cce0 <_svfiprintf_r+0x1b8>
 800cba6:	2300      	movs	r3, #0
 800cba8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbb0:	9304      	str	r3, [sp, #16]
 800cbb2:	9307      	str	r3, [sp, #28]
 800cbb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbb8:	931a      	str	r3, [sp, #104]	; 0x68
 800cbba:	462f      	mov	r7, r5
 800cbbc:	2205      	movs	r2, #5
 800cbbe:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cbc2:	4850      	ldr	r0, [pc, #320]	; (800cd04 <_svfiprintf_r+0x1dc>)
 800cbc4:	f7f3 fb14 	bl	80001f0 <memchr>
 800cbc8:	9b04      	ldr	r3, [sp, #16]
 800cbca:	b9d0      	cbnz	r0, 800cc02 <_svfiprintf_r+0xda>
 800cbcc:	06d9      	lsls	r1, r3, #27
 800cbce:	bf44      	itt	mi
 800cbd0:	2220      	movmi	r2, #32
 800cbd2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cbd6:	071a      	lsls	r2, r3, #28
 800cbd8:	bf44      	itt	mi
 800cbda:	222b      	movmi	r2, #43	; 0x2b
 800cbdc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cbe0:	782a      	ldrb	r2, [r5, #0]
 800cbe2:	2a2a      	cmp	r2, #42	; 0x2a
 800cbe4:	d015      	beq.n	800cc12 <_svfiprintf_r+0xea>
 800cbe6:	9a07      	ldr	r2, [sp, #28]
 800cbe8:	462f      	mov	r7, r5
 800cbea:	2000      	movs	r0, #0
 800cbec:	250a      	movs	r5, #10
 800cbee:	4639      	mov	r1, r7
 800cbf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbf4:	3b30      	subs	r3, #48	; 0x30
 800cbf6:	2b09      	cmp	r3, #9
 800cbf8:	d94d      	bls.n	800cc96 <_svfiprintf_r+0x16e>
 800cbfa:	b1b8      	cbz	r0, 800cc2c <_svfiprintf_r+0x104>
 800cbfc:	e00f      	b.n	800cc1e <_svfiprintf_r+0xf6>
 800cbfe:	462f      	mov	r7, r5
 800cc00:	e7b8      	b.n	800cb74 <_svfiprintf_r+0x4c>
 800cc02:	4a40      	ldr	r2, [pc, #256]	; (800cd04 <_svfiprintf_r+0x1dc>)
 800cc04:	1a80      	subs	r0, r0, r2
 800cc06:	fa0b f000 	lsl.w	r0, fp, r0
 800cc0a:	4318      	orrs	r0, r3
 800cc0c:	9004      	str	r0, [sp, #16]
 800cc0e:	463d      	mov	r5, r7
 800cc10:	e7d3      	b.n	800cbba <_svfiprintf_r+0x92>
 800cc12:	9a03      	ldr	r2, [sp, #12]
 800cc14:	1d11      	adds	r1, r2, #4
 800cc16:	6812      	ldr	r2, [r2, #0]
 800cc18:	9103      	str	r1, [sp, #12]
 800cc1a:	2a00      	cmp	r2, #0
 800cc1c:	db01      	blt.n	800cc22 <_svfiprintf_r+0xfa>
 800cc1e:	9207      	str	r2, [sp, #28]
 800cc20:	e004      	b.n	800cc2c <_svfiprintf_r+0x104>
 800cc22:	4252      	negs	r2, r2
 800cc24:	f043 0302 	orr.w	r3, r3, #2
 800cc28:	9207      	str	r2, [sp, #28]
 800cc2a:	9304      	str	r3, [sp, #16]
 800cc2c:	783b      	ldrb	r3, [r7, #0]
 800cc2e:	2b2e      	cmp	r3, #46	; 0x2e
 800cc30:	d10c      	bne.n	800cc4c <_svfiprintf_r+0x124>
 800cc32:	787b      	ldrb	r3, [r7, #1]
 800cc34:	2b2a      	cmp	r3, #42	; 0x2a
 800cc36:	d133      	bne.n	800cca0 <_svfiprintf_r+0x178>
 800cc38:	9b03      	ldr	r3, [sp, #12]
 800cc3a:	1d1a      	adds	r2, r3, #4
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	9203      	str	r2, [sp, #12]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	bfb8      	it	lt
 800cc44:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc48:	3702      	adds	r7, #2
 800cc4a:	9305      	str	r3, [sp, #20]
 800cc4c:	4d2e      	ldr	r5, [pc, #184]	; (800cd08 <_svfiprintf_r+0x1e0>)
 800cc4e:	7839      	ldrb	r1, [r7, #0]
 800cc50:	2203      	movs	r2, #3
 800cc52:	4628      	mov	r0, r5
 800cc54:	f7f3 facc 	bl	80001f0 <memchr>
 800cc58:	b138      	cbz	r0, 800cc6a <_svfiprintf_r+0x142>
 800cc5a:	2340      	movs	r3, #64	; 0x40
 800cc5c:	1b40      	subs	r0, r0, r5
 800cc5e:	fa03 f000 	lsl.w	r0, r3, r0
 800cc62:	9b04      	ldr	r3, [sp, #16]
 800cc64:	4303      	orrs	r3, r0
 800cc66:	3701      	adds	r7, #1
 800cc68:	9304      	str	r3, [sp, #16]
 800cc6a:	7839      	ldrb	r1, [r7, #0]
 800cc6c:	4827      	ldr	r0, [pc, #156]	; (800cd0c <_svfiprintf_r+0x1e4>)
 800cc6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc72:	2206      	movs	r2, #6
 800cc74:	1c7e      	adds	r6, r7, #1
 800cc76:	f7f3 fabb 	bl	80001f0 <memchr>
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	d038      	beq.n	800ccf0 <_svfiprintf_r+0x1c8>
 800cc7e:	4b24      	ldr	r3, [pc, #144]	; (800cd10 <_svfiprintf_r+0x1e8>)
 800cc80:	bb13      	cbnz	r3, 800ccc8 <_svfiprintf_r+0x1a0>
 800cc82:	9b03      	ldr	r3, [sp, #12]
 800cc84:	3307      	adds	r3, #7
 800cc86:	f023 0307 	bic.w	r3, r3, #7
 800cc8a:	3308      	adds	r3, #8
 800cc8c:	9303      	str	r3, [sp, #12]
 800cc8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc90:	444b      	add	r3, r9
 800cc92:	9309      	str	r3, [sp, #36]	; 0x24
 800cc94:	e76d      	b.n	800cb72 <_svfiprintf_r+0x4a>
 800cc96:	fb05 3202 	mla	r2, r5, r2, r3
 800cc9a:	2001      	movs	r0, #1
 800cc9c:	460f      	mov	r7, r1
 800cc9e:	e7a6      	b.n	800cbee <_svfiprintf_r+0xc6>
 800cca0:	2300      	movs	r3, #0
 800cca2:	3701      	adds	r7, #1
 800cca4:	9305      	str	r3, [sp, #20]
 800cca6:	4619      	mov	r1, r3
 800cca8:	250a      	movs	r5, #10
 800ccaa:	4638      	mov	r0, r7
 800ccac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccb0:	3a30      	subs	r2, #48	; 0x30
 800ccb2:	2a09      	cmp	r2, #9
 800ccb4:	d903      	bls.n	800ccbe <_svfiprintf_r+0x196>
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d0c8      	beq.n	800cc4c <_svfiprintf_r+0x124>
 800ccba:	9105      	str	r1, [sp, #20]
 800ccbc:	e7c6      	b.n	800cc4c <_svfiprintf_r+0x124>
 800ccbe:	fb05 2101 	mla	r1, r5, r1, r2
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	4607      	mov	r7, r0
 800ccc6:	e7f0      	b.n	800ccaa <_svfiprintf_r+0x182>
 800ccc8:	ab03      	add	r3, sp, #12
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	4622      	mov	r2, r4
 800ccce:	4b11      	ldr	r3, [pc, #68]	; (800cd14 <_svfiprintf_r+0x1ec>)
 800ccd0:	a904      	add	r1, sp, #16
 800ccd2:	4640      	mov	r0, r8
 800ccd4:	f3af 8000 	nop.w
 800ccd8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ccdc:	4681      	mov	r9, r0
 800ccde:	d1d6      	bne.n	800cc8e <_svfiprintf_r+0x166>
 800cce0:	89a3      	ldrh	r3, [r4, #12]
 800cce2:	065b      	lsls	r3, r3, #25
 800cce4:	f53f af35 	bmi.w	800cb52 <_svfiprintf_r+0x2a>
 800cce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccea:	b01d      	add	sp, #116	; 0x74
 800ccec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf0:	ab03      	add	r3, sp, #12
 800ccf2:	9300      	str	r3, [sp, #0]
 800ccf4:	4622      	mov	r2, r4
 800ccf6:	4b07      	ldr	r3, [pc, #28]	; (800cd14 <_svfiprintf_r+0x1ec>)
 800ccf8:	a904      	add	r1, sp, #16
 800ccfa:	4640      	mov	r0, r8
 800ccfc:	f000 f9c2 	bl	800d084 <_printf_i>
 800cd00:	e7ea      	b.n	800ccd8 <_svfiprintf_r+0x1b0>
 800cd02:	bf00      	nop
 800cd04:	0800f714 	.word	0x0800f714
 800cd08:	0800f71a 	.word	0x0800f71a
 800cd0c:	0800f71e 	.word	0x0800f71e
 800cd10:	00000000 	.word	0x00000000
 800cd14:	0800ca75 	.word	0x0800ca75

0800cd18 <__sfputc_r>:
 800cd18:	6893      	ldr	r3, [r2, #8]
 800cd1a:	3b01      	subs	r3, #1
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	b410      	push	{r4}
 800cd20:	6093      	str	r3, [r2, #8]
 800cd22:	da08      	bge.n	800cd36 <__sfputc_r+0x1e>
 800cd24:	6994      	ldr	r4, [r2, #24]
 800cd26:	42a3      	cmp	r3, r4
 800cd28:	db01      	blt.n	800cd2e <__sfputc_r+0x16>
 800cd2a:	290a      	cmp	r1, #10
 800cd2c:	d103      	bne.n	800cd36 <__sfputc_r+0x1e>
 800cd2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd32:	f7ff bb59 	b.w	800c3e8 <__swbuf_r>
 800cd36:	6813      	ldr	r3, [r2, #0]
 800cd38:	1c58      	adds	r0, r3, #1
 800cd3a:	6010      	str	r0, [r2, #0]
 800cd3c:	7019      	strb	r1, [r3, #0]
 800cd3e:	4608      	mov	r0, r1
 800cd40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd44:	4770      	bx	lr

0800cd46 <__sfputs_r>:
 800cd46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd48:	4606      	mov	r6, r0
 800cd4a:	460f      	mov	r7, r1
 800cd4c:	4614      	mov	r4, r2
 800cd4e:	18d5      	adds	r5, r2, r3
 800cd50:	42ac      	cmp	r4, r5
 800cd52:	d101      	bne.n	800cd58 <__sfputs_r+0x12>
 800cd54:	2000      	movs	r0, #0
 800cd56:	e007      	b.n	800cd68 <__sfputs_r+0x22>
 800cd58:	463a      	mov	r2, r7
 800cd5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd5e:	4630      	mov	r0, r6
 800cd60:	f7ff ffda 	bl	800cd18 <__sfputc_r>
 800cd64:	1c43      	adds	r3, r0, #1
 800cd66:	d1f3      	bne.n	800cd50 <__sfputs_r+0xa>
 800cd68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cd6c <_vfiprintf_r>:
 800cd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd70:	460c      	mov	r4, r1
 800cd72:	b09d      	sub	sp, #116	; 0x74
 800cd74:	4617      	mov	r7, r2
 800cd76:	461d      	mov	r5, r3
 800cd78:	4606      	mov	r6, r0
 800cd7a:	b118      	cbz	r0, 800cd84 <_vfiprintf_r+0x18>
 800cd7c:	6983      	ldr	r3, [r0, #24]
 800cd7e:	b90b      	cbnz	r3, 800cd84 <_vfiprintf_r+0x18>
 800cd80:	f7ff fce2 	bl	800c748 <__sinit>
 800cd84:	4b7c      	ldr	r3, [pc, #496]	; (800cf78 <_vfiprintf_r+0x20c>)
 800cd86:	429c      	cmp	r4, r3
 800cd88:	d158      	bne.n	800ce3c <_vfiprintf_r+0xd0>
 800cd8a:	6874      	ldr	r4, [r6, #4]
 800cd8c:	89a3      	ldrh	r3, [r4, #12]
 800cd8e:	0718      	lsls	r0, r3, #28
 800cd90:	d55e      	bpl.n	800ce50 <_vfiprintf_r+0xe4>
 800cd92:	6923      	ldr	r3, [r4, #16]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d05b      	beq.n	800ce50 <_vfiprintf_r+0xe4>
 800cd98:	2300      	movs	r3, #0
 800cd9a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd9c:	2320      	movs	r3, #32
 800cd9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cda2:	2330      	movs	r3, #48	; 0x30
 800cda4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cda8:	9503      	str	r5, [sp, #12]
 800cdaa:	f04f 0b01 	mov.w	fp, #1
 800cdae:	46b8      	mov	r8, r7
 800cdb0:	4645      	mov	r5, r8
 800cdb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cdb6:	b10b      	cbz	r3, 800cdbc <_vfiprintf_r+0x50>
 800cdb8:	2b25      	cmp	r3, #37	; 0x25
 800cdba:	d154      	bne.n	800ce66 <_vfiprintf_r+0xfa>
 800cdbc:	ebb8 0a07 	subs.w	sl, r8, r7
 800cdc0:	d00b      	beq.n	800cdda <_vfiprintf_r+0x6e>
 800cdc2:	4653      	mov	r3, sl
 800cdc4:	463a      	mov	r2, r7
 800cdc6:	4621      	mov	r1, r4
 800cdc8:	4630      	mov	r0, r6
 800cdca:	f7ff ffbc 	bl	800cd46 <__sfputs_r>
 800cdce:	3001      	adds	r0, #1
 800cdd0:	f000 80c2 	beq.w	800cf58 <_vfiprintf_r+0x1ec>
 800cdd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdd6:	4453      	add	r3, sl
 800cdd8:	9309      	str	r3, [sp, #36]	; 0x24
 800cdda:	f898 3000 	ldrb.w	r3, [r8]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	f000 80ba 	beq.w	800cf58 <_vfiprintf_r+0x1ec>
 800cde4:	2300      	movs	r3, #0
 800cde6:	f04f 32ff 	mov.w	r2, #4294967295
 800cdea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdee:	9304      	str	r3, [sp, #16]
 800cdf0:	9307      	str	r3, [sp, #28]
 800cdf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdf6:	931a      	str	r3, [sp, #104]	; 0x68
 800cdf8:	46a8      	mov	r8, r5
 800cdfa:	2205      	movs	r2, #5
 800cdfc:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ce00:	485e      	ldr	r0, [pc, #376]	; (800cf7c <_vfiprintf_r+0x210>)
 800ce02:	f7f3 f9f5 	bl	80001f0 <memchr>
 800ce06:	9b04      	ldr	r3, [sp, #16]
 800ce08:	bb78      	cbnz	r0, 800ce6a <_vfiprintf_r+0xfe>
 800ce0a:	06d9      	lsls	r1, r3, #27
 800ce0c:	bf44      	itt	mi
 800ce0e:	2220      	movmi	r2, #32
 800ce10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ce14:	071a      	lsls	r2, r3, #28
 800ce16:	bf44      	itt	mi
 800ce18:	222b      	movmi	r2, #43	; 0x2b
 800ce1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ce1e:	782a      	ldrb	r2, [r5, #0]
 800ce20:	2a2a      	cmp	r2, #42	; 0x2a
 800ce22:	d02a      	beq.n	800ce7a <_vfiprintf_r+0x10e>
 800ce24:	9a07      	ldr	r2, [sp, #28]
 800ce26:	46a8      	mov	r8, r5
 800ce28:	2000      	movs	r0, #0
 800ce2a:	250a      	movs	r5, #10
 800ce2c:	4641      	mov	r1, r8
 800ce2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce32:	3b30      	subs	r3, #48	; 0x30
 800ce34:	2b09      	cmp	r3, #9
 800ce36:	d969      	bls.n	800cf0c <_vfiprintf_r+0x1a0>
 800ce38:	b360      	cbz	r0, 800ce94 <_vfiprintf_r+0x128>
 800ce3a:	e024      	b.n	800ce86 <_vfiprintf_r+0x11a>
 800ce3c:	4b50      	ldr	r3, [pc, #320]	; (800cf80 <_vfiprintf_r+0x214>)
 800ce3e:	429c      	cmp	r4, r3
 800ce40:	d101      	bne.n	800ce46 <_vfiprintf_r+0xda>
 800ce42:	68b4      	ldr	r4, [r6, #8]
 800ce44:	e7a2      	b.n	800cd8c <_vfiprintf_r+0x20>
 800ce46:	4b4f      	ldr	r3, [pc, #316]	; (800cf84 <_vfiprintf_r+0x218>)
 800ce48:	429c      	cmp	r4, r3
 800ce4a:	bf08      	it	eq
 800ce4c:	68f4      	ldreq	r4, [r6, #12]
 800ce4e:	e79d      	b.n	800cd8c <_vfiprintf_r+0x20>
 800ce50:	4621      	mov	r1, r4
 800ce52:	4630      	mov	r0, r6
 800ce54:	f7ff fb1a 	bl	800c48c <__swsetup_r>
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	d09d      	beq.n	800cd98 <_vfiprintf_r+0x2c>
 800ce5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce60:	b01d      	add	sp, #116	; 0x74
 800ce62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce66:	46a8      	mov	r8, r5
 800ce68:	e7a2      	b.n	800cdb0 <_vfiprintf_r+0x44>
 800ce6a:	4a44      	ldr	r2, [pc, #272]	; (800cf7c <_vfiprintf_r+0x210>)
 800ce6c:	1a80      	subs	r0, r0, r2
 800ce6e:	fa0b f000 	lsl.w	r0, fp, r0
 800ce72:	4318      	orrs	r0, r3
 800ce74:	9004      	str	r0, [sp, #16]
 800ce76:	4645      	mov	r5, r8
 800ce78:	e7be      	b.n	800cdf8 <_vfiprintf_r+0x8c>
 800ce7a:	9a03      	ldr	r2, [sp, #12]
 800ce7c:	1d11      	adds	r1, r2, #4
 800ce7e:	6812      	ldr	r2, [r2, #0]
 800ce80:	9103      	str	r1, [sp, #12]
 800ce82:	2a00      	cmp	r2, #0
 800ce84:	db01      	blt.n	800ce8a <_vfiprintf_r+0x11e>
 800ce86:	9207      	str	r2, [sp, #28]
 800ce88:	e004      	b.n	800ce94 <_vfiprintf_r+0x128>
 800ce8a:	4252      	negs	r2, r2
 800ce8c:	f043 0302 	orr.w	r3, r3, #2
 800ce90:	9207      	str	r2, [sp, #28]
 800ce92:	9304      	str	r3, [sp, #16]
 800ce94:	f898 3000 	ldrb.w	r3, [r8]
 800ce98:	2b2e      	cmp	r3, #46	; 0x2e
 800ce9a:	d10e      	bne.n	800ceba <_vfiprintf_r+0x14e>
 800ce9c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cea0:	2b2a      	cmp	r3, #42	; 0x2a
 800cea2:	d138      	bne.n	800cf16 <_vfiprintf_r+0x1aa>
 800cea4:	9b03      	ldr	r3, [sp, #12]
 800cea6:	1d1a      	adds	r2, r3, #4
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	9203      	str	r2, [sp, #12]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	bfb8      	it	lt
 800ceb0:	f04f 33ff 	movlt.w	r3, #4294967295
 800ceb4:	f108 0802 	add.w	r8, r8, #2
 800ceb8:	9305      	str	r3, [sp, #20]
 800ceba:	4d33      	ldr	r5, [pc, #204]	; (800cf88 <_vfiprintf_r+0x21c>)
 800cebc:	f898 1000 	ldrb.w	r1, [r8]
 800cec0:	2203      	movs	r2, #3
 800cec2:	4628      	mov	r0, r5
 800cec4:	f7f3 f994 	bl	80001f0 <memchr>
 800cec8:	b140      	cbz	r0, 800cedc <_vfiprintf_r+0x170>
 800ceca:	2340      	movs	r3, #64	; 0x40
 800cecc:	1b40      	subs	r0, r0, r5
 800cece:	fa03 f000 	lsl.w	r0, r3, r0
 800ced2:	9b04      	ldr	r3, [sp, #16]
 800ced4:	4303      	orrs	r3, r0
 800ced6:	f108 0801 	add.w	r8, r8, #1
 800ceda:	9304      	str	r3, [sp, #16]
 800cedc:	f898 1000 	ldrb.w	r1, [r8]
 800cee0:	482a      	ldr	r0, [pc, #168]	; (800cf8c <_vfiprintf_r+0x220>)
 800cee2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cee6:	2206      	movs	r2, #6
 800cee8:	f108 0701 	add.w	r7, r8, #1
 800ceec:	f7f3 f980 	bl	80001f0 <memchr>
 800cef0:	2800      	cmp	r0, #0
 800cef2:	d037      	beq.n	800cf64 <_vfiprintf_r+0x1f8>
 800cef4:	4b26      	ldr	r3, [pc, #152]	; (800cf90 <_vfiprintf_r+0x224>)
 800cef6:	bb1b      	cbnz	r3, 800cf40 <_vfiprintf_r+0x1d4>
 800cef8:	9b03      	ldr	r3, [sp, #12]
 800cefa:	3307      	adds	r3, #7
 800cefc:	f023 0307 	bic.w	r3, r3, #7
 800cf00:	3308      	adds	r3, #8
 800cf02:	9303      	str	r3, [sp, #12]
 800cf04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf06:	444b      	add	r3, r9
 800cf08:	9309      	str	r3, [sp, #36]	; 0x24
 800cf0a:	e750      	b.n	800cdae <_vfiprintf_r+0x42>
 800cf0c:	fb05 3202 	mla	r2, r5, r2, r3
 800cf10:	2001      	movs	r0, #1
 800cf12:	4688      	mov	r8, r1
 800cf14:	e78a      	b.n	800ce2c <_vfiprintf_r+0xc0>
 800cf16:	2300      	movs	r3, #0
 800cf18:	f108 0801 	add.w	r8, r8, #1
 800cf1c:	9305      	str	r3, [sp, #20]
 800cf1e:	4619      	mov	r1, r3
 800cf20:	250a      	movs	r5, #10
 800cf22:	4640      	mov	r0, r8
 800cf24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf28:	3a30      	subs	r2, #48	; 0x30
 800cf2a:	2a09      	cmp	r2, #9
 800cf2c:	d903      	bls.n	800cf36 <_vfiprintf_r+0x1ca>
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d0c3      	beq.n	800ceba <_vfiprintf_r+0x14e>
 800cf32:	9105      	str	r1, [sp, #20]
 800cf34:	e7c1      	b.n	800ceba <_vfiprintf_r+0x14e>
 800cf36:	fb05 2101 	mla	r1, r5, r1, r2
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	4680      	mov	r8, r0
 800cf3e:	e7f0      	b.n	800cf22 <_vfiprintf_r+0x1b6>
 800cf40:	ab03      	add	r3, sp, #12
 800cf42:	9300      	str	r3, [sp, #0]
 800cf44:	4622      	mov	r2, r4
 800cf46:	4b13      	ldr	r3, [pc, #76]	; (800cf94 <_vfiprintf_r+0x228>)
 800cf48:	a904      	add	r1, sp, #16
 800cf4a:	4630      	mov	r0, r6
 800cf4c:	f3af 8000 	nop.w
 800cf50:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cf54:	4681      	mov	r9, r0
 800cf56:	d1d5      	bne.n	800cf04 <_vfiprintf_r+0x198>
 800cf58:	89a3      	ldrh	r3, [r4, #12]
 800cf5a:	065b      	lsls	r3, r3, #25
 800cf5c:	f53f af7e 	bmi.w	800ce5c <_vfiprintf_r+0xf0>
 800cf60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf62:	e77d      	b.n	800ce60 <_vfiprintf_r+0xf4>
 800cf64:	ab03      	add	r3, sp, #12
 800cf66:	9300      	str	r3, [sp, #0]
 800cf68:	4622      	mov	r2, r4
 800cf6a:	4b0a      	ldr	r3, [pc, #40]	; (800cf94 <_vfiprintf_r+0x228>)
 800cf6c:	a904      	add	r1, sp, #16
 800cf6e:	4630      	mov	r0, r6
 800cf70:	f000 f888 	bl	800d084 <_printf_i>
 800cf74:	e7ec      	b.n	800cf50 <_vfiprintf_r+0x1e4>
 800cf76:	bf00      	nop
 800cf78:	0800f6d4 	.word	0x0800f6d4
 800cf7c:	0800f714 	.word	0x0800f714
 800cf80:	0800f6f4 	.word	0x0800f6f4
 800cf84:	0800f6b4 	.word	0x0800f6b4
 800cf88:	0800f71a 	.word	0x0800f71a
 800cf8c:	0800f71e 	.word	0x0800f71e
 800cf90:	00000000 	.word	0x00000000
 800cf94:	0800cd47 	.word	0x0800cd47

0800cf98 <_printf_common>:
 800cf98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf9c:	4691      	mov	r9, r2
 800cf9e:	461f      	mov	r7, r3
 800cfa0:	688a      	ldr	r2, [r1, #8]
 800cfa2:	690b      	ldr	r3, [r1, #16]
 800cfa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	bfb8      	it	lt
 800cfac:	4613      	movlt	r3, r2
 800cfae:	f8c9 3000 	str.w	r3, [r9]
 800cfb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cfb6:	4606      	mov	r6, r0
 800cfb8:	460c      	mov	r4, r1
 800cfba:	b112      	cbz	r2, 800cfc2 <_printf_common+0x2a>
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	f8c9 3000 	str.w	r3, [r9]
 800cfc2:	6823      	ldr	r3, [r4, #0]
 800cfc4:	0699      	lsls	r1, r3, #26
 800cfc6:	bf42      	ittt	mi
 800cfc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cfcc:	3302      	addmi	r3, #2
 800cfce:	f8c9 3000 	strmi.w	r3, [r9]
 800cfd2:	6825      	ldr	r5, [r4, #0]
 800cfd4:	f015 0506 	ands.w	r5, r5, #6
 800cfd8:	d107      	bne.n	800cfea <_printf_common+0x52>
 800cfda:	f104 0a19 	add.w	sl, r4, #25
 800cfde:	68e3      	ldr	r3, [r4, #12]
 800cfe0:	f8d9 2000 	ldr.w	r2, [r9]
 800cfe4:	1a9b      	subs	r3, r3, r2
 800cfe6:	42ab      	cmp	r3, r5
 800cfe8:	dc28      	bgt.n	800d03c <_printf_common+0xa4>
 800cfea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cfee:	6822      	ldr	r2, [r4, #0]
 800cff0:	3300      	adds	r3, #0
 800cff2:	bf18      	it	ne
 800cff4:	2301      	movne	r3, #1
 800cff6:	0692      	lsls	r2, r2, #26
 800cff8:	d42d      	bmi.n	800d056 <_printf_common+0xbe>
 800cffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cffe:	4639      	mov	r1, r7
 800d000:	4630      	mov	r0, r6
 800d002:	47c0      	blx	r8
 800d004:	3001      	adds	r0, #1
 800d006:	d020      	beq.n	800d04a <_printf_common+0xb2>
 800d008:	6823      	ldr	r3, [r4, #0]
 800d00a:	68e5      	ldr	r5, [r4, #12]
 800d00c:	f8d9 2000 	ldr.w	r2, [r9]
 800d010:	f003 0306 	and.w	r3, r3, #6
 800d014:	2b04      	cmp	r3, #4
 800d016:	bf08      	it	eq
 800d018:	1aad      	subeq	r5, r5, r2
 800d01a:	68a3      	ldr	r3, [r4, #8]
 800d01c:	6922      	ldr	r2, [r4, #16]
 800d01e:	bf0c      	ite	eq
 800d020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d024:	2500      	movne	r5, #0
 800d026:	4293      	cmp	r3, r2
 800d028:	bfc4      	itt	gt
 800d02a:	1a9b      	subgt	r3, r3, r2
 800d02c:	18ed      	addgt	r5, r5, r3
 800d02e:	f04f 0900 	mov.w	r9, #0
 800d032:	341a      	adds	r4, #26
 800d034:	454d      	cmp	r5, r9
 800d036:	d11a      	bne.n	800d06e <_printf_common+0xd6>
 800d038:	2000      	movs	r0, #0
 800d03a:	e008      	b.n	800d04e <_printf_common+0xb6>
 800d03c:	2301      	movs	r3, #1
 800d03e:	4652      	mov	r2, sl
 800d040:	4639      	mov	r1, r7
 800d042:	4630      	mov	r0, r6
 800d044:	47c0      	blx	r8
 800d046:	3001      	adds	r0, #1
 800d048:	d103      	bne.n	800d052 <_printf_common+0xba>
 800d04a:	f04f 30ff 	mov.w	r0, #4294967295
 800d04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d052:	3501      	adds	r5, #1
 800d054:	e7c3      	b.n	800cfde <_printf_common+0x46>
 800d056:	18e1      	adds	r1, r4, r3
 800d058:	1c5a      	adds	r2, r3, #1
 800d05a:	2030      	movs	r0, #48	; 0x30
 800d05c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d060:	4422      	add	r2, r4
 800d062:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d066:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d06a:	3302      	adds	r3, #2
 800d06c:	e7c5      	b.n	800cffa <_printf_common+0x62>
 800d06e:	2301      	movs	r3, #1
 800d070:	4622      	mov	r2, r4
 800d072:	4639      	mov	r1, r7
 800d074:	4630      	mov	r0, r6
 800d076:	47c0      	blx	r8
 800d078:	3001      	adds	r0, #1
 800d07a:	d0e6      	beq.n	800d04a <_printf_common+0xb2>
 800d07c:	f109 0901 	add.w	r9, r9, #1
 800d080:	e7d8      	b.n	800d034 <_printf_common+0x9c>
	...

0800d084 <_printf_i>:
 800d084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d088:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d08c:	460c      	mov	r4, r1
 800d08e:	7e09      	ldrb	r1, [r1, #24]
 800d090:	b085      	sub	sp, #20
 800d092:	296e      	cmp	r1, #110	; 0x6e
 800d094:	4617      	mov	r7, r2
 800d096:	4606      	mov	r6, r0
 800d098:	4698      	mov	r8, r3
 800d09a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d09c:	f000 80b3 	beq.w	800d206 <_printf_i+0x182>
 800d0a0:	d822      	bhi.n	800d0e8 <_printf_i+0x64>
 800d0a2:	2963      	cmp	r1, #99	; 0x63
 800d0a4:	d036      	beq.n	800d114 <_printf_i+0x90>
 800d0a6:	d80a      	bhi.n	800d0be <_printf_i+0x3a>
 800d0a8:	2900      	cmp	r1, #0
 800d0aa:	f000 80b9 	beq.w	800d220 <_printf_i+0x19c>
 800d0ae:	2958      	cmp	r1, #88	; 0x58
 800d0b0:	f000 8083 	beq.w	800d1ba <_printf_i+0x136>
 800d0b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d0bc:	e032      	b.n	800d124 <_printf_i+0xa0>
 800d0be:	2964      	cmp	r1, #100	; 0x64
 800d0c0:	d001      	beq.n	800d0c6 <_printf_i+0x42>
 800d0c2:	2969      	cmp	r1, #105	; 0x69
 800d0c4:	d1f6      	bne.n	800d0b4 <_printf_i+0x30>
 800d0c6:	6820      	ldr	r0, [r4, #0]
 800d0c8:	6813      	ldr	r3, [r2, #0]
 800d0ca:	0605      	lsls	r5, r0, #24
 800d0cc:	f103 0104 	add.w	r1, r3, #4
 800d0d0:	d52a      	bpl.n	800d128 <_printf_i+0xa4>
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	6011      	str	r1, [r2, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	da03      	bge.n	800d0e2 <_printf_i+0x5e>
 800d0da:	222d      	movs	r2, #45	; 0x2d
 800d0dc:	425b      	negs	r3, r3
 800d0de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d0e2:	486f      	ldr	r0, [pc, #444]	; (800d2a0 <_printf_i+0x21c>)
 800d0e4:	220a      	movs	r2, #10
 800d0e6:	e039      	b.n	800d15c <_printf_i+0xd8>
 800d0e8:	2973      	cmp	r1, #115	; 0x73
 800d0ea:	f000 809d 	beq.w	800d228 <_printf_i+0x1a4>
 800d0ee:	d808      	bhi.n	800d102 <_printf_i+0x7e>
 800d0f0:	296f      	cmp	r1, #111	; 0x6f
 800d0f2:	d020      	beq.n	800d136 <_printf_i+0xb2>
 800d0f4:	2970      	cmp	r1, #112	; 0x70
 800d0f6:	d1dd      	bne.n	800d0b4 <_printf_i+0x30>
 800d0f8:	6823      	ldr	r3, [r4, #0]
 800d0fa:	f043 0320 	orr.w	r3, r3, #32
 800d0fe:	6023      	str	r3, [r4, #0]
 800d100:	e003      	b.n	800d10a <_printf_i+0x86>
 800d102:	2975      	cmp	r1, #117	; 0x75
 800d104:	d017      	beq.n	800d136 <_printf_i+0xb2>
 800d106:	2978      	cmp	r1, #120	; 0x78
 800d108:	d1d4      	bne.n	800d0b4 <_printf_i+0x30>
 800d10a:	2378      	movs	r3, #120	; 0x78
 800d10c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d110:	4864      	ldr	r0, [pc, #400]	; (800d2a4 <_printf_i+0x220>)
 800d112:	e055      	b.n	800d1c0 <_printf_i+0x13c>
 800d114:	6813      	ldr	r3, [r2, #0]
 800d116:	1d19      	adds	r1, r3, #4
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	6011      	str	r1, [r2, #0]
 800d11c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d124:	2301      	movs	r3, #1
 800d126:	e08c      	b.n	800d242 <_printf_i+0x1be>
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	6011      	str	r1, [r2, #0]
 800d12c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d130:	bf18      	it	ne
 800d132:	b21b      	sxthne	r3, r3
 800d134:	e7cf      	b.n	800d0d6 <_printf_i+0x52>
 800d136:	6813      	ldr	r3, [r2, #0]
 800d138:	6825      	ldr	r5, [r4, #0]
 800d13a:	1d18      	adds	r0, r3, #4
 800d13c:	6010      	str	r0, [r2, #0]
 800d13e:	0628      	lsls	r0, r5, #24
 800d140:	d501      	bpl.n	800d146 <_printf_i+0xc2>
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	e002      	b.n	800d14c <_printf_i+0xc8>
 800d146:	0668      	lsls	r0, r5, #25
 800d148:	d5fb      	bpl.n	800d142 <_printf_i+0xbe>
 800d14a:	881b      	ldrh	r3, [r3, #0]
 800d14c:	4854      	ldr	r0, [pc, #336]	; (800d2a0 <_printf_i+0x21c>)
 800d14e:	296f      	cmp	r1, #111	; 0x6f
 800d150:	bf14      	ite	ne
 800d152:	220a      	movne	r2, #10
 800d154:	2208      	moveq	r2, #8
 800d156:	2100      	movs	r1, #0
 800d158:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d15c:	6865      	ldr	r5, [r4, #4]
 800d15e:	60a5      	str	r5, [r4, #8]
 800d160:	2d00      	cmp	r5, #0
 800d162:	f2c0 8095 	blt.w	800d290 <_printf_i+0x20c>
 800d166:	6821      	ldr	r1, [r4, #0]
 800d168:	f021 0104 	bic.w	r1, r1, #4
 800d16c:	6021      	str	r1, [r4, #0]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d13d      	bne.n	800d1ee <_printf_i+0x16a>
 800d172:	2d00      	cmp	r5, #0
 800d174:	f040 808e 	bne.w	800d294 <_printf_i+0x210>
 800d178:	4665      	mov	r5, ip
 800d17a:	2a08      	cmp	r2, #8
 800d17c:	d10b      	bne.n	800d196 <_printf_i+0x112>
 800d17e:	6823      	ldr	r3, [r4, #0]
 800d180:	07db      	lsls	r3, r3, #31
 800d182:	d508      	bpl.n	800d196 <_printf_i+0x112>
 800d184:	6923      	ldr	r3, [r4, #16]
 800d186:	6862      	ldr	r2, [r4, #4]
 800d188:	429a      	cmp	r2, r3
 800d18a:	bfde      	ittt	le
 800d18c:	2330      	movle	r3, #48	; 0x30
 800d18e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d192:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d196:	ebac 0305 	sub.w	r3, ip, r5
 800d19a:	6123      	str	r3, [r4, #16]
 800d19c:	f8cd 8000 	str.w	r8, [sp]
 800d1a0:	463b      	mov	r3, r7
 800d1a2:	aa03      	add	r2, sp, #12
 800d1a4:	4621      	mov	r1, r4
 800d1a6:	4630      	mov	r0, r6
 800d1a8:	f7ff fef6 	bl	800cf98 <_printf_common>
 800d1ac:	3001      	adds	r0, #1
 800d1ae:	d14d      	bne.n	800d24c <_printf_i+0x1c8>
 800d1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b4:	b005      	add	sp, #20
 800d1b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1ba:	4839      	ldr	r0, [pc, #228]	; (800d2a0 <_printf_i+0x21c>)
 800d1bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d1c0:	6813      	ldr	r3, [r2, #0]
 800d1c2:	6821      	ldr	r1, [r4, #0]
 800d1c4:	1d1d      	adds	r5, r3, #4
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	6015      	str	r5, [r2, #0]
 800d1ca:	060a      	lsls	r2, r1, #24
 800d1cc:	d50b      	bpl.n	800d1e6 <_printf_i+0x162>
 800d1ce:	07ca      	lsls	r2, r1, #31
 800d1d0:	bf44      	itt	mi
 800d1d2:	f041 0120 	orrmi.w	r1, r1, #32
 800d1d6:	6021      	strmi	r1, [r4, #0]
 800d1d8:	b91b      	cbnz	r3, 800d1e2 <_printf_i+0x15e>
 800d1da:	6822      	ldr	r2, [r4, #0]
 800d1dc:	f022 0220 	bic.w	r2, r2, #32
 800d1e0:	6022      	str	r2, [r4, #0]
 800d1e2:	2210      	movs	r2, #16
 800d1e4:	e7b7      	b.n	800d156 <_printf_i+0xd2>
 800d1e6:	064d      	lsls	r5, r1, #25
 800d1e8:	bf48      	it	mi
 800d1ea:	b29b      	uxthmi	r3, r3
 800d1ec:	e7ef      	b.n	800d1ce <_printf_i+0x14a>
 800d1ee:	4665      	mov	r5, ip
 800d1f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d1f4:	fb02 3311 	mls	r3, r2, r1, r3
 800d1f8:	5cc3      	ldrb	r3, [r0, r3]
 800d1fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d1fe:	460b      	mov	r3, r1
 800d200:	2900      	cmp	r1, #0
 800d202:	d1f5      	bne.n	800d1f0 <_printf_i+0x16c>
 800d204:	e7b9      	b.n	800d17a <_printf_i+0xf6>
 800d206:	6813      	ldr	r3, [r2, #0]
 800d208:	6825      	ldr	r5, [r4, #0]
 800d20a:	6961      	ldr	r1, [r4, #20]
 800d20c:	1d18      	adds	r0, r3, #4
 800d20e:	6010      	str	r0, [r2, #0]
 800d210:	0628      	lsls	r0, r5, #24
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	d501      	bpl.n	800d21a <_printf_i+0x196>
 800d216:	6019      	str	r1, [r3, #0]
 800d218:	e002      	b.n	800d220 <_printf_i+0x19c>
 800d21a:	066a      	lsls	r2, r5, #25
 800d21c:	d5fb      	bpl.n	800d216 <_printf_i+0x192>
 800d21e:	8019      	strh	r1, [r3, #0]
 800d220:	2300      	movs	r3, #0
 800d222:	6123      	str	r3, [r4, #16]
 800d224:	4665      	mov	r5, ip
 800d226:	e7b9      	b.n	800d19c <_printf_i+0x118>
 800d228:	6813      	ldr	r3, [r2, #0]
 800d22a:	1d19      	adds	r1, r3, #4
 800d22c:	6011      	str	r1, [r2, #0]
 800d22e:	681d      	ldr	r5, [r3, #0]
 800d230:	6862      	ldr	r2, [r4, #4]
 800d232:	2100      	movs	r1, #0
 800d234:	4628      	mov	r0, r5
 800d236:	f7f2 ffdb 	bl	80001f0 <memchr>
 800d23a:	b108      	cbz	r0, 800d240 <_printf_i+0x1bc>
 800d23c:	1b40      	subs	r0, r0, r5
 800d23e:	6060      	str	r0, [r4, #4]
 800d240:	6863      	ldr	r3, [r4, #4]
 800d242:	6123      	str	r3, [r4, #16]
 800d244:	2300      	movs	r3, #0
 800d246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d24a:	e7a7      	b.n	800d19c <_printf_i+0x118>
 800d24c:	6923      	ldr	r3, [r4, #16]
 800d24e:	462a      	mov	r2, r5
 800d250:	4639      	mov	r1, r7
 800d252:	4630      	mov	r0, r6
 800d254:	47c0      	blx	r8
 800d256:	3001      	adds	r0, #1
 800d258:	d0aa      	beq.n	800d1b0 <_printf_i+0x12c>
 800d25a:	6823      	ldr	r3, [r4, #0]
 800d25c:	079b      	lsls	r3, r3, #30
 800d25e:	d413      	bmi.n	800d288 <_printf_i+0x204>
 800d260:	68e0      	ldr	r0, [r4, #12]
 800d262:	9b03      	ldr	r3, [sp, #12]
 800d264:	4298      	cmp	r0, r3
 800d266:	bfb8      	it	lt
 800d268:	4618      	movlt	r0, r3
 800d26a:	e7a3      	b.n	800d1b4 <_printf_i+0x130>
 800d26c:	2301      	movs	r3, #1
 800d26e:	464a      	mov	r2, r9
 800d270:	4639      	mov	r1, r7
 800d272:	4630      	mov	r0, r6
 800d274:	47c0      	blx	r8
 800d276:	3001      	adds	r0, #1
 800d278:	d09a      	beq.n	800d1b0 <_printf_i+0x12c>
 800d27a:	3501      	adds	r5, #1
 800d27c:	68e3      	ldr	r3, [r4, #12]
 800d27e:	9a03      	ldr	r2, [sp, #12]
 800d280:	1a9b      	subs	r3, r3, r2
 800d282:	42ab      	cmp	r3, r5
 800d284:	dcf2      	bgt.n	800d26c <_printf_i+0x1e8>
 800d286:	e7eb      	b.n	800d260 <_printf_i+0x1dc>
 800d288:	2500      	movs	r5, #0
 800d28a:	f104 0919 	add.w	r9, r4, #25
 800d28e:	e7f5      	b.n	800d27c <_printf_i+0x1f8>
 800d290:	2b00      	cmp	r3, #0
 800d292:	d1ac      	bne.n	800d1ee <_printf_i+0x16a>
 800d294:	7803      	ldrb	r3, [r0, #0]
 800d296:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d29a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d29e:	e76c      	b.n	800d17a <_printf_i+0xf6>
 800d2a0:	0800f725 	.word	0x0800f725
 800d2a4:	0800f736 	.word	0x0800f736

0800d2a8 <_sbrk_r>:
 800d2a8:	b538      	push	{r3, r4, r5, lr}
 800d2aa:	4c06      	ldr	r4, [pc, #24]	; (800d2c4 <_sbrk_r+0x1c>)
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	4605      	mov	r5, r0
 800d2b0:	4608      	mov	r0, r1
 800d2b2:	6023      	str	r3, [r4, #0]
 800d2b4:	f7fe fd62 	bl	800bd7c <_sbrk>
 800d2b8:	1c43      	adds	r3, r0, #1
 800d2ba:	d102      	bne.n	800d2c2 <_sbrk_r+0x1a>
 800d2bc:	6823      	ldr	r3, [r4, #0]
 800d2be:	b103      	cbz	r3, 800d2c2 <_sbrk_r+0x1a>
 800d2c0:	602b      	str	r3, [r5, #0]
 800d2c2:	bd38      	pop	{r3, r4, r5, pc}
 800d2c4:	20004998 	.word	0x20004998

0800d2c8 <__sread>:
 800d2c8:	b510      	push	{r4, lr}
 800d2ca:	460c      	mov	r4, r1
 800d2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2d0:	f000 f8d6 	bl	800d480 <_read_r>
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	bfab      	itete	ge
 800d2d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d2da:	89a3      	ldrhlt	r3, [r4, #12]
 800d2dc:	181b      	addge	r3, r3, r0
 800d2de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d2e2:	bfac      	ite	ge
 800d2e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d2e6:	81a3      	strhlt	r3, [r4, #12]
 800d2e8:	bd10      	pop	{r4, pc}

0800d2ea <__swrite>:
 800d2ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2ee:	461f      	mov	r7, r3
 800d2f0:	898b      	ldrh	r3, [r1, #12]
 800d2f2:	05db      	lsls	r3, r3, #23
 800d2f4:	4605      	mov	r5, r0
 800d2f6:	460c      	mov	r4, r1
 800d2f8:	4616      	mov	r6, r2
 800d2fa:	d505      	bpl.n	800d308 <__swrite+0x1e>
 800d2fc:	2302      	movs	r3, #2
 800d2fe:	2200      	movs	r2, #0
 800d300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d304:	f000 f868 	bl	800d3d8 <_lseek_r>
 800d308:	89a3      	ldrh	r3, [r4, #12]
 800d30a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d30e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d312:	81a3      	strh	r3, [r4, #12]
 800d314:	4632      	mov	r2, r6
 800d316:	463b      	mov	r3, r7
 800d318:	4628      	mov	r0, r5
 800d31a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d31e:	f000 b817 	b.w	800d350 <_write_r>

0800d322 <__sseek>:
 800d322:	b510      	push	{r4, lr}
 800d324:	460c      	mov	r4, r1
 800d326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d32a:	f000 f855 	bl	800d3d8 <_lseek_r>
 800d32e:	1c43      	adds	r3, r0, #1
 800d330:	89a3      	ldrh	r3, [r4, #12]
 800d332:	bf15      	itete	ne
 800d334:	6560      	strne	r0, [r4, #84]	; 0x54
 800d336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d33a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d33e:	81a3      	strheq	r3, [r4, #12]
 800d340:	bf18      	it	ne
 800d342:	81a3      	strhne	r3, [r4, #12]
 800d344:	bd10      	pop	{r4, pc}

0800d346 <__sclose>:
 800d346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d34a:	f000 b813 	b.w	800d374 <_close_r>
	...

0800d350 <_write_r>:
 800d350:	b538      	push	{r3, r4, r5, lr}
 800d352:	4c07      	ldr	r4, [pc, #28]	; (800d370 <_write_r+0x20>)
 800d354:	4605      	mov	r5, r0
 800d356:	4608      	mov	r0, r1
 800d358:	4611      	mov	r1, r2
 800d35a:	2200      	movs	r2, #0
 800d35c:	6022      	str	r2, [r4, #0]
 800d35e:	461a      	mov	r2, r3
 800d360:	f7fe fcbb 	bl	800bcda <_write>
 800d364:	1c43      	adds	r3, r0, #1
 800d366:	d102      	bne.n	800d36e <_write_r+0x1e>
 800d368:	6823      	ldr	r3, [r4, #0]
 800d36a:	b103      	cbz	r3, 800d36e <_write_r+0x1e>
 800d36c:	602b      	str	r3, [r5, #0]
 800d36e:	bd38      	pop	{r3, r4, r5, pc}
 800d370:	20004998 	.word	0x20004998

0800d374 <_close_r>:
 800d374:	b538      	push	{r3, r4, r5, lr}
 800d376:	4c06      	ldr	r4, [pc, #24]	; (800d390 <_close_r+0x1c>)
 800d378:	2300      	movs	r3, #0
 800d37a:	4605      	mov	r5, r0
 800d37c:	4608      	mov	r0, r1
 800d37e:	6023      	str	r3, [r4, #0]
 800d380:	f7fe fcc7 	bl	800bd12 <_close>
 800d384:	1c43      	adds	r3, r0, #1
 800d386:	d102      	bne.n	800d38e <_close_r+0x1a>
 800d388:	6823      	ldr	r3, [r4, #0]
 800d38a:	b103      	cbz	r3, 800d38e <_close_r+0x1a>
 800d38c:	602b      	str	r3, [r5, #0]
 800d38e:	bd38      	pop	{r3, r4, r5, pc}
 800d390:	20004998 	.word	0x20004998

0800d394 <_fstat_r>:
 800d394:	b538      	push	{r3, r4, r5, lr}
 800d396:	4c07      	ldr	r4, [pc, #28]	; (800d3b4 <_fstat_r+0x20>)
 800d398:	2300      	movs	r3, #0
 800d39a:	4605      	mov	r5, r0
 800d39c:	4608      	mov	r0, r1
 800d39e:	4611      	mov	r1, r2
 800d3a0:	6023      	str	r3, [r4, #0]
 800d3a2:	f7fe fcc2 	bl	800bd2a <_fstat>
 800d3a6:	1c43      	adds	r3, r0, #1
 800d3a8:	d102      	bne.n	800d3b0 <_fstat_r+0x1c>
 800d3aa:	6823      	ldr	r3, [r4, #0]
 800d3ac:	b103      	cbz	r3, 800d3b0 <_fstat_r+0x1c>
 800d3ae:	602b      	str	r3, [r5, #0]
 800d3b0:	bd38      	pop	{r3, r4, r5, pc}
 800d3b2:	bf00      	nop
 800d3b4:	20004998 	.word	0x20004998

0800d3b8 <_isatty_r>:
 800d3b8:	b538      	push	{r3, r4, r5, lr}
 800d3ba:	4c06      	ldr	r4, [pc, #24]	; (800d3d4 <_isatty_r+0x1c>)
 800d3bc:	2300      	movs	r3, #0
 800d3be:	4605      	mov	r5, r0
 800d3c0:	4608      	mov	r0, r1
 800d3c2:	6023      	str	r3, [r4, #0]
 800d3c4:	f7fe fcc1 	bl	800bd4a <_isatty>
 800d3c8:	1c43      	adds	r3, r0, #1
 800d3ca:	d102      	bne.n	800d3d2 <_isatty_r+0x1a>
 800d3cc:	6823      	ldr	r3, [r4, #0]
 800d3ce:	b103      	cbz	r3, 800d3d2 <_isatty_r+0x1a>
 800d3d0:	602b      	str	r3, [r5, #0]
 800d3d2:	bd38      	pop	{r3, r4, r5, pc}
 800d3d4:	20004998 	.word	0x20004998

0800d3d8 <_lseek_r>:
 800d3d8:	b538      	push	{r3, r4, r5, lr}
 800d3da:	4c07      	ldr	r4, [pc, #28]	; (800d3f8 <_lseek_r+0x20>)
 800d3dc:	4605      	mov	r5, r0
 800d3de:	4608      	mov	r0, r1
 800d3e0:	4611      	mov	r1, r2
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	6022      	str	r2, [r4, #0]
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	f7fe fcba 	bl	800bd60 <_lseek>
 800d3ec:	1c43      	adds	r3, r0, #1
 800d3ee:	d102      	bne.n	800d3f6 <_lseek_r+0x1e>
 800d3f0:	6823      	ldr	r3, [r4, #0]
 800d3f2:	b103      	cbz	r3, 800d3f6 <_lseek_r+0x1e>
 800d3f4:	602b      	str	r3, [r5, #0]
 800d3f6:	bd38      	pop	{r3, r4, r5, pc}
 800d3f8:	20004998 	.word	0x20004998

0800d3fc <memmove>:
 800d3fc:	4288      	cmp	r0, r1
 800d3fe:	b510      	push	{r4, lr}
 800d400:	eb01 0302 	add.w	r3, r1, r2
 800d404:	d807      	bhi.n	800d416 <memmove+0x1a>
 800d406:	1e42      	subs	r2, r0, #1
 800d408:	4299      	cmp	r1, r3
 800d40a:	d00a      	beq.n	800d422 <memmove+0x26>
 800d40c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d410:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d414:	e7f8      	b.n	800d408 <memmove+0xc>
 800d416:	4283      	cmp	r3, r0
 800d418:	d9f5      	bls.n	800d406 <memmove+0xa>
 800d41a:	1881      	adds	r1, r0, r2
 800d41c:	1ad2      	subs	r2, r2, r3
 800d41e:	42d3      	cmn	r3, r2
 800d420:	d100      	bne.n	800d424 <memmove+0x28>
 800d422:	bd10      	pop	{r4, pc}
 800d424:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d428:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d42c:	e7f7      	b.n	800d41e <memmove+0x22>

0800d42e <__malloc_lock>:
 800d42e:	4770      	bx	lr

0800d430 <__malloc_unlock>:
 800d430:	4770      	bx	lr

0800d432 <_realloc_r>:
 800d432:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d434:	4607      	mov	r7, r0
 800d436:	4614      	mov	r4, r2
 800d438:	460e      	mov	r6, r1
 800d43a:	b921      	cbnz	r1, 800d446 <_realloc_r+0x14>
 800d43c:	4611      	mov	r1, r2
 800d43e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d442:	f7ff babd 	b.w	800c9c0 <_malloc_r>
 800d446:	b922      	cbnz	r2, 800d452 <_realloc_r+0x20>
 800d448:	f7ff fa6c 	bl	800c924 <_free_r>
 800d44c:	4625      	mov	r5, r4
 800d44e:	4628      	mov	r0, r5
 800d450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d452:	f000 f827 	bl	800d4a4 <_malloc_usable_size_r>
 800d456:	42a0      	cmp	r0, r4
 800d458:	d20f      	bcs.n	800d47a <_realloc_r+0x48>
 800d45a:	4621      	mov	r1, r4
 800d45c:	4638      	mov	r0, r7
 800d45e:	f7ff faaf 	bl	800c9c0 <_malloc_r>
 800d462:	4605      	mov	r5, r0
 800d464:	2800      	cmp	r0, #0
 800d466:	d0f2      	beq.n	800d44e <_realloc_r+0x1c>
 800d468:	4631      	mov	r1, r6
 800d46a:	4622      	mov	r2, r4
 800d46c:	f7fe ff0c 	bl	800c288 <memcpy>
 800d470:	4631      	mov	r1, r6
 800d472:	4638      	mov	r0, r7
 800d474:	f7ff fa56 	bl	800c924 <_free_r>
 800d478:	e7e9      	b.n	800d44e <_realloc_r+0x1c>
 800d47a:	4635      	mov	r5, r6
 800d47c:	e7e7      	b.n	800d44e <_realloc_r+0x1c>
	...

0800d480 <_read_r>:
 800d480:	b538      	push	{r3, r4, r5, lr}
 800d482:	4c07      	ldr	r4, [pc, #28]	; (800d4a0 <_read_r+0x20>)
 800d484:	4605      	mov	r5, r0
 800d486:	4608      	mov	r0, r1
 800d488:	4611      	mov	r1, r2
 800d48a:	2200      	movs	r2, #0
 800d48c:	6022      	str	r2, [r4, #0]
 800d48e:	461a      	mov	r2, r3
 800d490:	f7fe fc06 	bl	800bca0 <_read>
 800d494:	1c43      	adds	r3, r0, #1
 800d496:	d102      	bne.n	800d49e <_read_r+0x1e>
 800d498:	6823      	ldr	r3, [r4, #0]
 800d49a:	b103      	cbz	r3, 800d49e <_read_r+0x1e>
 800d49c:	602b      	str	r3, [r5, #0]
 800d49e:	bd38      	pop	{r3, r4, r5, pc}
 800d4a0:	20004998 	.word	0x20004998

0800d4a4 <_malloc_usable_size_r>:
 800d4a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4a8:	1f18      	subs	r0, r3, #4
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	bfbc      	itt	lt
 800d4ae:	580b      	ldrlt	r3, [r1, r0]
 800d4b0:	18c0      	addlt	r0, r0, r3
 800d4b2:	4770      	bx	lr

0800d4b4 <round>:
 800d4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4b6:	ec57 6b10 	vmov	r6, r7, d0
 800d4ba:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800d4be:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800d4c2:	2c13      	cmp	r4, #19
 800d4c4:	463b      	mov	r3, r7
 800d4c6:	463d      	mov	r5, r7
 800d4c8:	dc17      	bgt.n	800d4fa <round+0x46>
 800d4ca:	2c00      	cmp	r4, #0
 800d4cc:	da09      	bge.n	800d4e2 <round+0x2e>
 800d4ce:	3401      	adds	r4, #1
 800d4d0:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 800d4d4:	d103      	bne.n	800d4de <round+0x2a>
 800d4d6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d4da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d4de:	2100      	movs	r1, #0
 800d4e0:	e02c      	b.n	800d53c <round+0x88>
 800d4e2:	4a18      	ldr	r2, [pc, #96]	; (800d544 <round+0x90>)
 800d4e4:	4122      	asrs	r2, r4
 800d4e6:	4217      	tst	r7, r2
 800d4e8:	d100      	bne.n	800d4ec <round+0x38>
 800d4ea:	b19e      	cbz	r6, 800d514 <round+0x60>
 800d4ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d4f0:	4123      	asrs	r3, r4
 800d4f2:	442b      	add	r3, r5
 800d4f4:	ea23 0302 	bic.w	r3, r3, r2
 800d4f8:	e7f1      	b.n	800d4de <round+0x2a>
 800d4fa:	2c33      	cmp	r4, #51	; 0x33
 800d4fc:	dd0d      	ble.n	800d51a <round+0x66>
 800d4fe:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800d502:	d107      	bne.n	800d514 <round+0x60>
 800d504:	4630      	mov	r0, r6
 800d506:	4639      	mov	r1, r7
 800d508:	ee10 2a10 	vmov	r2, s0
 800d50c:	f7f2 fec6 	bl	800029c <__adddf3>
 800d510:	4606      	mov	r6, r0
 800d512:	460f      	mov	r7, r1
 800d514:	ec47 6b10 	vmov	d0, r6, r7
 800d518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d51a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800d51e:	f04f 30ff 	mov.w	r0, #4294967295
 800d522:	40d0      	lsrs	r0, r2
 800d524:	4206      	tst	r6, r0
 800d526:	d0f5      	beq.n	800d514 <round+0x60>
 800d528:	2201      	movs	r2, #1
 800d52a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800d52e:	fa02 f404 	lsl.w	r4, r2, r4
 800d532:	1931      	adds	r1, r6, r4
 800d534:	bf28      	it	cs
 800d536:	189b      	addcs	r3, r3, r2
 800d538:	ea21 0100 	bic.w	r1, r1, r0
 800d53c:	461f      	mov	r7, r3
 800d53e:	460e      	mov	r6, r1
 800d540:	e7e8      	b.n	800d514 <round+0x60>
 800d542:	bf00      	nop
 800d544:	000fffff 	.word	0x000fffff

0800d548 <asin>:
 800d548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d54a:	ed2d 8b02 	vpush	{d8}
 800d54e:	4e26      	ldr	r6, [pc, #152]	; (800d5e8 <asin+0xa0>)
 800d550:	b08b      	sub	sp, #44	; 0x2c
 800d552:	ec55 4b10 	vmov	r4, r5, d0
 800d556:	f000 fa1b 	bl	800d990 <__ieee754_asin>
 800d55a:	f996 3000 	ldrsb.w	r3, [r6]
 800d55e:	eeb0 8a40 	vmov.f32	s16, s0
 800d562:	eef0 8a60 	vmov.f32	s17, s1
 800d566:	3301      	adds	r3, #1
 800d568:	d036      	beq.n	800d5d8 <asin+0x90>
 800d56a:	4622      	mov	r2, r4
 800d56c:	462b      	mov	r3, r5
 800d56e:	4620      	mov	r0, r4
 800d570:	4629      	mov	r1, r5
 800d572:	f7f3 fae3 	bl	8000b3c <__aeabi_dcmpun>
 800d576:	4607      	mov	r7, r0
 800d578:	bb70      	cbnz	r0, 800d5d8 <asin+0x90>
 800d57a:	ec45 4b10 	vmov	d0, r4, r5
 800d57e:	f001 fc57 	bl	800ee30 <fabs>
 800d582:	2200      	movs	r2, #0
 800d584:	4b19      	ldr	r3, [pc, #100]	; (800d5ec <asin+0xa4>)
 800d586:	ec51 0b10 	vmov	r0, r1, d0
 800d58a:	f7f3 facd 	bl	8000b28 <__aeabi_dcmpgt>
 800d58e:	b318      	cbz	r0, 800d5d8 <asin+0x90>
 800d590:	2301      	movs	r3, #1
 800d592:	9300      	str	r3, [sp, #0]
 800d594:	4816      	ldr	r0, [pc, #88]	; (800d5f0 <asin+0xa8>)
 800d596:	4b17      	ldr	r3, [pc, #92]	; (800d5f4 <asin+0xac>)
 800d598:	9301      	str	r3, [sp, #4]
 800d59a:	9708      	str	r7, [sp, #32]
 800d59c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800d5a0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d5a4:	f001 fc58 	bl	800ee58 <nan>
 800d5a8:	f996 3000 	ldrsb.w	r3, [r6]
 800d5ac:	2b02      	cmp	r3, #2
 800d5ae:	ed8d 0b06 	vstr	d0, [sp, #24]
 800d5b2:	d104      	bne.n	800d5be <asin+0x76>
 800d5b4:	f7fe fe3e 	bl	800c234 <__errno>
 800d5b8:	2321      	movs	r3, #33	; 0x21
 800d5ba:	6003      	str	r3, [r0, #0]
 800d5bc:	e004      	b.n	800d5c8 <asin+0x80>
 800d5be:	4668      	mov	r0, sp
 800d5c0:	f001 fc47 	bl	800ee52 <matherr>
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	d0f5      	beq.n	800d5b4 <asin+0x6c>
 800d5c8:	9b08      	ldr	r3, [sp, #32]
 800d5ca:	b11b      	cbz	r3, 800d5d4 <asin+0x8c>
 800d5cc:	f7fe fe32 	bl	800c234 <__errno>
 800d5d0:	9b08      	ldr	r3, [sp, #32]
 800d5d2:	6003      	str	r3, [r0, #0]
 800d5d4:	ed9d 8b06 	vldr	d8, [sp, #24]
 800d5d8:	eeb0 0a48 	vmov.f32	s0, s16
 800d5dc:	eef0 0a68 	vmov.f32	s1, s17
 800d5e0:	b00b      	add	sp, #44	; 0x2c
 800d5e2:	ecbd 8b02 	vpop	{d8}
 800d5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5e8:	200000d0 	.word	0x200000d0
 800d5ec:	3ff00000 	.word	0x3ff00000
 800d5f0:	0800f719 	.word	0x0800f719
 800d5f4:	0800f747 	.word	0x0800f747

0800d5f8 <atan2>:
 800d5f8:	f000 bbda 	b.w	800ddb0 <__ieee754_atan2>

0800d5fc <pow>:
 800d5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d600:	ed2d 8b04 	vpush	{d8-d9}
 800d604:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800d8d8 <pow+0x2dc>
 800d608:	b08d      	sub	sp, #52	; 0x34
 800d60a:	ec57 6b10 	vmov	r6, r7, d0
 800d60e:	ec55 4b11 	vmov	r4, r5, d1
 800d612:	f000 fcad 	bl	800df70 <__ieee754_pow>
 800d616:	f999 3000 	ldrsb.w	r3, [r9]
 800d61a:	9300      	str	r3, [sp, #0]
 800d61c:	3301      	adds	r3, #1
 800d61e:	eeb0 8a40 	vmov.f32	s16, s0
 800d622:	eef0 8a60 	vmov.f32	s17, s1
 800d626:	46c8      	mov	r8, r9
 800d628:	d05f      	beq.n	800d6ea <pow+0xee>
 800d62a:	4622      	mov	r2, r4
 800d62c:	462b      	mov	r3, r5
 800d62e:	4620      	mov	r0, r4
 800d630:	4629      	mov	r1, r5
 800d632:	f7f3 fa83 	bl	8000b3c <__aeabi_dcmpun>
 800d636:	4683      	mov	fp, r0
 800d638:	2800      	cmp	r0, #0
 800d63a:	d156      	bne.n	800d6ea <pow+0xee>
 800d63c:	4632      	mov	r2, r6
 800d63e:	463b      	mov	r3, r7
 800d640:	4630      	mov	r0, r6
 800d642:	4639      	mov	r1, r7
 800d644:	f7f3 fa7a 	bl	8000b3c <__aeabi_dcmpun>
 800d648:	9001      	str	r0, [sp, #4]
 800d64a:	b1e8      	cbz	r0, 800d688 <pow+0x8c>
 800d64c:	2200      	movs	r2, #0
 800d64e:	2300      	movs	r3, #0
 800d650:	4620      	mov	r0, r4
 800d652:	4629      	mov	r1, r5
 800d654:	f7f3 fa40 	bl	8000ad8 <__aeabi_dcmpeq>
 800d658:	2800      	cmp	r0, #0
 800d65a:	d046      	beq.n	800d6ea <pow+0xee>
 800d65c:	2301      	movs	r3, #1
 800d65e:	9302      	str	r3, [sp, #8]
 800d660:	4b96      	ldr	r3, [pc, #600]	; (800d8bc <pow+0x2c0>)
 800d662:	9303      	str	r3, [sp, #12]
 800d664:	4b96      	ldr	r3, [pc, #600]	; (800d8c0 <pow+0x2c4>)
 800d666:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d66a:	2200      	movs	r2, #0
 800d66c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d670:	9b00      	ldr	r3, [sp, #0]
 800d672:	2b02      	cmp	r3, #2
 800d674:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d678:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d67c:	d033      	beq.n	800d6e6 <pow+0xea>
 800d67e:	a802      	add	r0, sp, #8
 800d680:	f001 fbe7 	bl	800ee52 <matherr>
 800d684:	bb48      	cbnz	r0, 800d6da <pow+0xde>
 800d686:	e05d      	b.n	800d744 <pow+0x148>
 800d688:	f04f 0a00 	mov.w	sl, #0
 800d68c:	f04f 0b00 	mov.w	fp, #0
 800d690:	4652      	mov	r2, sl
 800d692:	465b      	mov	r3, fp
 800d694:	4630      	mov	r0, r6
 800d696:	4639      	mov	r1, r7
 800d698:	f7f3 fa1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800d69c:	ec4b ab19 	vmov	d9, sl, fp
 800d6a0:	2800      	cmp	r0, #0
 800d6a2:	d054      	beq.n	800d74e <pow+0x152>
 800d6a4:	4652      	mov	r2, sl
 800d6a6:	465b      	mov	r3, fp
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	4629      	mov	r1, r5
 800d6ac:	f7f3 fa14 	bl	8000ad8 <__aeabi_dcmpeq>
 800d6b0:	4680      	mov	r8, r0
 800d6b2:	b318      	cbz	r0, 800d6fc <pow+0x100>
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	9302      	str	r3, [sp, #8]
 800d6b8:	4b80      	ldr	r3, [pc, #512]	; (800d8bc <pow+0x2c0>)
 800d6ba:	9303      	str	r3, [sp, #12]
 800d6bc:	9b01      	ldr	r3, [sp, #4]
 800d6be:	930a      	str	r3, [sp, #40]	; 0x28
 800d6c0:	9b00      	ldr	r3, [sp, #0]
 800d6c2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d6c6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d6ca:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d0d5      	beq.n	800d67e <pow+0x82>
 800d6d2:	4b7b      	ldr	r3, [pc, #492]	; (800d8c0 <pow+0x2c4>)
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6dc:	b11b      	cbz	r3, 800d6e6 <pow+0xea>
 800d6de:	f7fe fda9 	bl	800c234 <__errno>
 800d6e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6e4:	6003      	str	r3, [r0, #0]
 800d6e6:	ed9d 8b08 	vldr	d8, [sp, #32]
 800d6ea:	eeb0 0a48 	vmov.f32	s0, s16
 800d6ee:	eef0 0a68 	vmov.f32	s1, s17
 800d6f2:	b00d      	add	sp, #52	; 0x34
 800d6f4:	ecbd 8b04 	vpop	{d8-d9}
 800d6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6fc:	ec45 4b10 	vmov	d0, r4, r5
 800d700:	f001 fb9f 	bl	800ee42 <finite>
 800d704:	2800      	cmp	r0, #0
 800d706:	d0f0      	beq.n	800d6ea <pow+0xee>
 800d708:	4652      	mov	r2, sl
 800d70a:	465b      	mov	r3, fp
 800d70c:	4620      	mov	r0, r4
 800d70e:	4629      	mov	r1, r5
 800d710:	f7f3 f9ec 	bl	8000aec <__aeabi_dcmplt>
 800d714:	2800      	cmp	r0, #0
 800d716:	d0e8      	beq.n	800d6ea <pow+0xee>
 800d718:	2301      	movs	r3, #1
 800d71a:	9302      	str	r3, [sp, #8]
 800d71c:	4b67      	ldr	r3, [pc, #412]	; (800d8bc <pow+0x2c0>)
 800d71e:	9303      	str	r3, [sp, #12]
 800d720:	f999 3000 	ldrsb.w	r3, [r9]
 800d724:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800d728:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d72c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d730:	b913      	cbnz	r3, 800d738 <pow+0x13c>
 800d732:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d736:	e7a2      	b.n	800d67e <pow+0x82>
 800d738:	4962      	ldr	r1, [pc, #392]	; (800d8c4 <pow+0x2c8>)
 800d73a:	2000      	movs	r0, #0
 800d73c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d740:	2b02      	cmp	r3, #2
 800d742:	d19c      	bne.n	800d67e <pow+0x82>
 800d744:	f7fe fd76 	bl	800c234 <__errno>
 800d748:	2321      	movs	r3, #33	; 0x21
 800d74a:	6003      	str	r3, [r0, #0]
 800d74c:	e7c5      	b.n	800d6da <pow+0xde>
 800d74e:	eeb0 0a48 	vmov.f32	s0, s16
 800d752:	eef0 0a68 	vmov.f32	s1, s17
 800d756:	f001 fb74 	bl	800ee42 <finite>
 800d75a:	9000      	str	r0, [sp, #0]
 800d75c:	2800      	cmp	r0, #0
 800d75e:	f040 8081 	bne.w	800d864 <pow+0x268>
 800d762:	ec47 6b10 	vmov	d0, r6, r7
 800d766:	f001 fb6c 	bl	800ee42 <finite>
 800d76a:	2800      	cmp	r0, #0
 800d76c:	d07a      	beq.n	800d864 <pow+0x268>
 800d76e:	ec45 4b10 	vmov	d0, r4, r5
 800d772:	f001 fb66 	bl	800ee42 <finite>
 800d776:	2800      	cmp	r0, #0
 800d778:	d074      	beq.n	800d864 <pow+0x268>
 800d77a:	ec53 2b18 	vmov	r2, r3, d8
 800d77e:	ee18 0a10 	vmov	r0, s16
 800d782:	4619      	mov	r1, r3
 800d784:	f7f3 f9da 	bl	8000b3c <__aeabi_dcmpun>
 800d788:	f999 9000 	ldrsb.w	r9, [r9]
 800d78c:	4b4b      	ldr	r3, [pc, #300]	; (800d8bc <pow+0x2c0>)
 800d78e:	b1b0      	cbz	r0, 800d7be <pow+0x1c2>
 800d790:	2201      	movs	r2, #1
 800d792:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d796:	9b00      	ldr	r3, [sp, #0]
 800d798:	930a      	str	r3, [sp, #40]	; 0x28
 800d79a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d79e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d7a2:	f1b9 0f00 	cmp.w	r9, #0
 800d7a6:	d0c4      	beq.n	800d732 <pow+0x136>
 800d7a8:	4652      	mov	r2, sl
 800d7aa:	465b      	mov	r3, fp
 800d7ac:	4650      	mov	r0, sl
 800d7ae:	4659      	mov	r1, fp
 800d7b0:	f7f3 f854 	bl	800085c <__aeabi_ddiv>
 800d7b4:	f1b9 0f02 	cmp.w	r9, #2
 800d7b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d7bc:	e7c1      	b.n	800d742 <pow+0x146>
 800d7be:	2203      	movs	r2, #3
 800d7c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d7c4:	900a      	str	r0, [sp, #40]	; 0x28
 800d7c6:	4629      	mov	r1, r5
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	4b3e      	ldr	r3, [pc, #248]	; (800d8c8 <pow+0x2cc>)
 800d7ce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d7d2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d7d6:	f7f2 ff17 	bl	8000608 <__aeabi_dmul>
 800d7da:	4604      	mov	r4, r0
 800d7dc:	460d      	mov	r5, r1
 800d7de:	f1b9 0f00 	cmp.w	r9, #0
 800d7e2:	d124      	bne.n	800d82e <pow+0x232>
 800d7e4:	4b39      	ldr	r3, [pc, #228]	; (800d8cc <pow+0x2d0>)
 800d7e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d7ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d7ee:	4630      	mov	r0, r6
 800d7f0:	4652      	mov	r2, sl
 800d7f2:	465b      	mov	r3, fp
 800d7f4:	4639      	mov	r1, r7
 800d7f6:	f7f3 f979 	bl	8000aec <__aeabi_dcmplt>
 800d7fa:	2800      	cmp	r0, #0
 800d7fc:	d056      	beq.n	800d8ac <pow+0x2b0>
 800d7fe:	ec45 4b10 	vmov	d0, r4, r5
 800d802:	f001 fb31 	bl	800ee68 <rint>
 800d806:	4622      	mov	r2, r4
 800d808:	462b      	mov	r3, r5
 800d80a:	ec51 0b10 	vmov	r0, r1, d0
 800d80e:	f7f3 f963 	bl	8000ad8 <__aeabi_dcmpeq>
 800d812:	b920      	cbnz	r0, 800d81e <pow+0x222>
 800d814:	4b2e      	ldr	r3, [pc, #184]	; (800d8d0 <pow+0x2d4>)
 800d816:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d81a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d81e:	f998 3000 	ldrsb.w	r3, [r8]
 800d822:	2b02      	cmp	r3, #2
 800d824:	d142      	bne.n	800d8ac <pow+0x2b0>
 800d826:	f7fe fd05 	bl	800c234 <__errno>
 800d82a:	2322      	movs	r3, #34	; 0x22
 800d82c:	e78d      	b.n	800d74a <pow+0x14e>
 800d82e:	4b29      	ldr	r3, [pc, #164]	; (800d8d4 <pow+0x2d8>)
 800d830:	2200      	movs	r2, #0
 800d832:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d836:	4630      	mov	r0, r6
 800d838:	4652      	mov	r2, sl
 800d83a:	465b      	mov	r3, fp
 800d83c:	4639      	mov	r1, r7
 800d83e:	f7f3 f955 	bl	8000aec <__aeabi_dcmplt>
 800d842:	2800      	cmp	r0, #0
 800d844:	d0eb      	beq.n	800d81e <pow+0x222>
 800d846:	ec45 4b10 	vmov	d0, r4, r5
 800d84a:	f001 fb0d 	bl	800ee68 <rint>
 800d84e:	4622      	mov	r2, r4
 800d850:	462b      	mov	r3, r5
 800d852:	ec51 0b10 	vmov	r0, r1, d0
 800d856:	f7f3 f93f 	bl	8000ad8 <__aeabi_dcmpeq>
 800d85a:	2800      	cmp	r0, #0
 800d85c:	d1df      	bne.n	800d81e <pow+0x222>
 800d85e:	2200      	movs	r2, #0
 800d860:	4b18      	ldr	r3, [pc, #96]	; (800d8c4 <pow+0x2c8>)
 800d862:	e7da      	b.n	800d81a <pow+0x21e>
 800d864:	2200      	movs	r2, #0
 800d866:	2300      	movs	r3, #0
 800d868:	ec51 0b18 	vmov	r0, r1, d8
 800d86c:	f7f3 f934 	bl	8000ad8 <__aeabi_dcmpeq>
 800d870:	2800      	cmp	r0, #0
 800d872:	f43f af3a 	beq.w	800d6ea <pow+0xee>
 800d876:	ec47 6b10 	vmov	d0, r6, r7
 800d87a:	f001 fae2 	bl	800ee42 <finite>
 800d87e:	2800      	cmp	r0, #0
 800d880:	f43f af33 	beq.w	800d6ea <pow+0xee>
 800d884:	ec45 4b10 	vmov	d0, r4, r5
 800d888:	f001 fadb 	bl	800ee42 <finite>
 800d88c:	2800      	cmp	r0, #0
 800d88e:	f43f af2c 	beq.w	800d6ea <pow+0xee>
 800d892:	2304      	movs	r3, #4
 800d894:	9302      	str	r3, [sp, #8]
 800d896:	4b09      	ldr	r3, [pc, #36]	; (800d8bc <pow+0x2c0>)
 800d898:	9303      	str	r3, [sp, #12]
 800d89a:	2300      	movs	r3, #0
 800d89c:	930a      	str	r3, [sp, #40]	; 0x28
 800d89e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d8a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800d8a6:	ed8d 9b08 	vstr	d9, [sp, #32]
 800d8aa:	e7b8      	b.n	800d81e <pow+0x222>
 800d8ac:	a802      	add	r0, sp, #8
 800d8ae:	f001 fad0 	bl	800ee52 <matherr>
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	f47f af11 	bne.w	800d6da <pow+0xde>
 800d8b8:	e7b5      	b.n	800d826 <pow+0x22a>
 800d8ba:	bf00      	nop
 800d8bc:	0800f74c 	.word	0x0800f74c
 800d8c0:	3ff00000 	.word	0x3ff00000
 800d8c4:	fff00000 	.word	0xfff00000
 800d8c8:	3fe00000 	.word	0x3fe00000
 800d8cc:	47efffff 	.word	0x47efffff
 800d8d0:	c7efffff 	.word	0xc7efffff
 800d8d4:	7ff00000 	.word	0x7ff00000
 800d8d8:	200000d0 	.word	0x200000d0

0800d8dc <sqrt>:
 800d8dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d8e0:	ed2d 8b02 	vpush	{d8}
 800d8e4:	b08b      	sub	sp, #44	; 0x2c
 800d8e6:	ec55 4b10 	vmov	r4, r5, d0
 800d8ea:	f001 f84f 	bl	800e98c <__ieee754_sqrt>
 800d8ee:	4b26      	ldr	r3, [pc, #152]	; (800d988 <sqrt+0xac>)
 800d8f0:	eeb0 8a40 	vmov.f32	s16, s0
 800d8f4:	eef0 8a60 	vmov.f32	s17, s1
 800d8f8:	f993 6000 	ldrsb.w	r6, [r3]
 800d8fc:	1c73      	adds	r3, r6, #1
 800d8fe:	d02a      	beq.n	800d956 <sqrt+0x7a>
 800d900:	4622      	mov	r2, r4
 800d902:	462b      	mov	r3, r5
 800d904:	4620      	mov	r0, r4
 800d906:	4629      	mov	r1, r5
 800d908:	f7f3 f918 	bl	8000b3c <__aeabi_dcmpun>
 800d90c:	4607      	mov	r7, r0
 800d90e:	bb10      	cbnz	r0, 800d956 <sqrt+0x7a>
 800d910:	f04f 0800 	mov.w	r8, #0
 800d914:	f04f 0900 	mov.w	r9, #0
 800d918:	4642      	mov	r2, r8
 800d91a:	464b      	mov	r3, r9
 800d91c:	4620      	mov	r0, r4
 800d91e:	4629      	mov	r1, r5
 800d920:	f7f3 f8e4 	bl	8000aec <__aeabi_dcmplt>
 800d924:	b1b8      	cbz	r0, 800d956 <sqrt+0x7a>
 800d926:	2301      	movs	r3, #1
 800d928:	9300      	str	r3, [sp, #0]
 800d92a:	4b18      	ldr	r3, [pc, #96]	; (800d98c <sqrt+0xb0>)
 800d92c:	9301      	str	r3, [sp, #4]
 800d92e:	9708      	str	r7, [sp, #32]
 800d930:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800d934:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d938:	b9b6      	cbnz	r6, 800d968 <sqrt+0x8c>
 800d93a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800d93e:	4668      	mov	r0, sp
 800d940:	f001 fa87 	bl	800ee52 <matherr>
 800d944:	b1d0      	cbz	r0, 800d97c <sqrt+0xa0>
 800d946:	9b08      	ldr	r3, [sp, #32]
 800d948:	b11b      	cbz	r3, 800d952 <sqrt+0x76>
 800d94a:	f7fe fc73 	bl	800c234 <__errno>
 800d94e:	9b08      	ldr	r3, [sp, #32]
 800d950:	6003      	str	r3, [r0, #0]
 800d952:	ed9d 8b06 	vldr	d8, [sp, #24]
 800d956:	eeb0 0a48 	vmov.f32	s0, s16
 800d95a:	eef0 0a68 	vmov.f32	s1, s17
 800d95e:	b00b      	add	sp, #44	; 0x2c
 800d960:	ecbd 8b02 	vpop	{d8}
 800d964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d968:	4642      	mov	r2, r8
 800d96a:	464b      	mov	r3, r9
 800d96c:	4640      	mov	r0, r8
 800d96e:	4649      	mov	r1, r9
 800d970:	f7f2 ff74 	bl	800085c <__aeabi_ddiv>
 800d974:	2e02      	cmp	r6, #2
 800d976:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d97a:	d1e0      	bne.n	800d93e <sqrt+0x62>
 800d97c:	f7fe fc5a 	bl	800c234 <__errno>
 800d980:	2321      	movs	r3, #33	; 0x21
 800d982:	6003      	str	r3, [r0, #0]
 800d984:	e7df      	b.n	800d946 <sqrt+0x6a>
 800d986:	bf00      	nop
 800d988:	200000d0 	.word	0x200000d0
 800d98c:	0800f750 	.word	0x0800f750

0800d990 <__ieee754_asin>:
 800d990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d994:	ec55 4b10 	vmov	r4, r5, d0
 800d998:	4bcb      	ldr	r3, [pc, #812]	; (800dcc8 <__ieee754_asin+0x338>)
 800d99a:	b087      	sub	sp, #28
 800d99c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800d9a0:	429f      	cmp	r7, r3
 800d9a2:	9501      	str	r5, [sp, #4]
 800d9a4:	dd31      	ble.n	800da0a <__ieee754_asin+0x7a>
 800d9a6:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 800d9aa:	ee10 3a10 	vmov	r3, s0
 800d9ae:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800d9b2:	433b      	orrs	r3, r7
 800d9b4:	d117      	bne.n	800d9e6 <__ieee754_asin+0x56>
 800d9b6:	a3aa      	add	r3, pc, #680	; (adr r3, 800dc60 <__ieee754_asin+0x2d0>)
 800d9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9bc:	ee10 0a10 	vmov	r0, s0
 800d9c0:	4629      	mov	r1, r5
 800d9c2:	f7f2 fe21 	bl	8000608 <__aeabi_dmul>
 800d9c6:	a3a8      	add	r3, pc, #672	; (adr r3, 800dc68 <__ieee754_asin+0x2d8>)
 800d9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9cc:	4606      	mov	r6, r0
 800d9ce:	460f      	mov	r7, r1
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	4629      	mov	r1, r5
 800d9d4:	f7f2 fe18 	bl	8000608 <__aeabi_dmul>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	460b      	mov	r3, r1
 800d9dc:	4630      	mov	r0, r6
 800d9de:	4639      	mov	r1, r7
 800d9e0:	f7f2 fc5c 	bl	800029c <__adddf3>
 800d9e4:	e00a      	b.n	800d9fc <__ieee754_asin+0x6c>
 800d9e6:	ee10 2a10 	vmov	r2, s0
 800d9ea:	462b      	mov	r3, r5
 800d9ec:	4620      	mov	r0, r4
 800d9ee:	4629      	mov	r1, r5
 800d9f0:	f7f2 fc52 	bl	8000298 <__aeabi_dsub>
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	f7f2 ff30 	bl	800085c <__aeabi_ddiv>
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	460d      	mov	r5, r1
 800da00:	ec45 4b10 	vmov	d0, r4, r5
 800da04:	b007      	add	sp, #28
 800da06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da0a:	4bb0      	ldr	r3, [pc, #704]	; (800dccc <__ieee754_asin+0x33c>)
 800da0c:	429f      	cmp	r7, r3
 800da0e:	dc11      	bgt.n	800da34 <__ieee754_asin+0xa4>
 800da10:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800da14:	f280 80ae 	bge.w	800db74 <__ieee754_asin+0x1e4>
 800da18:	a395      	add	r3, pc, #596	; (adr r3, 800dc70 <__ieee754_asin+0x2e0>)
 800da1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1e:	ee10 0a10 	vmov	r0, s0
 800da22:	4629      	mov	r1, r5
 800da24:	f7f2 fc3a 	bl	800029c <__adddf3>
 800da28:	2200      	movs	r2, #0
 800da2a:	4ba9      	ldr	r3, [pc, #676]	; (800dcd0 <__ieee754_asin+0x340>)
 800da2c:	f7f3 f87c 	bl	8000b28 <__aeabi_dcmpgt>
 800da30:	2800      	cmp	r0, #0
 800da32:	d1e5      	bne.n	800da00 <__ieee754_asin+0x70>
 800da34:	ec45 4b10 	vmov	d0, r4, r5
 800da38:	f001 f9fa 	bl	800ee30 <fabs>
 800da3c:	2000      	movs	r0, #0
 800da3e:	ec53 2b10 	vmov	r2, r3, d0
 800da42:	49a3      	ldr	r1, [pc, #652]	; (800dcd0 <__ieee754_asin+0x340>)
 800da44:	f7f2 fc28 	bl	8000298 <__aeabi_dsub>
 800da48:	2200      	movs	r2, #0
 800da4a:	4ba2      	ldr	r3, [pc, #648]	; (800dcd4 <__ieee754_asin+0x344>)
 800da4c:	f7f2 fddc 	bl	8000608 <__aeabi_dmul>
 800da50:	a389      	add	r3, pc, #548	; (adr r3, 800dc78 <__ieee754_asin+0x2e8>)
 800da52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da56:	4604      	mov	r4, r0
 800da58:	460d      	mov	r5, r1
 800da5a:	f7f2 fdd5 	bl	8000608 <__aeabi_dmul>
 800da5e:	a388      	add	r3, pc, #544	; (adr r3, 800dc80 <__ieee754_asin+0x2f0>)
 800da60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da64:	f7f2 fc1a 	bl	800029c <__adddf3>
 800da68:	4622      	mov	r2, r4
 800da6a:	462b      	mov	r3, r5
 800da6c:	f7f2 fdcc 	bl	8000608 <__aeabi_dmul>
 800da70:	a385      	add	r3, pc, #532	; (adr r3, 800dc88 <__ieee754_asin+0x2f8>)
 800da72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da76:	f7f2 fc0f 	bl	8000298 <__aeabi_dsub>
 800da7a:	4622      	mov	r2, r4
 800da7c:	462b      	mov	r3, r5
 800da7e:	f7f2 fdc3 	bl	8000608 <__aeabi_dmul>
 800da82:	a383      	add	r3, pc, #524	; (adr r3, 800dc90 <__ieee754_asin+0x300>)
 800da84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da88:	f7f2 fc08 	bl	800029c <__adddf3>
 800da8c:	4622      	mov	r2, r4
 800da8e:	462b      	mov	r3, r5
 800da90:	f7f2 fdba 	bl	8000608 <__aeabi_dmul>
 800da94:	a380      	add	r3, pc, #512	; (adr r3, 800dc98 <__ieee754_asin+0x308>)
 800da96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9a:	f7f2 fbfd 	bl	8000298 <__aeabi_dsub>
 800da9e:	4622      	mov	r2, r4
 800daa0:	462b      	mov	r3, r5
 800daa2:	f7f2 fdb1 	bl	8000608 <__aeabi_dmul>
 800daa6:	a37e      	add	r3, pc, #504	; (adr r3, 800dca0 <__ieee754_asin+0x310>)
 800daa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daac:	f7f2 fbf6 	bl	800029c <__adddf3>
 800dab0:	4622      	mov	r2, r4
 800dab2:	462b      	mov	r3, r5
 800dab4:	f7f2 fda8 	bl	8000608 <__aeabi_dmul>
 800dab8:	a37b      	add	r3, pc, #492	; (adr r3, 800dca8 <__ieee754_asin+0x318>)
 800daba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dabe:	4680      	mov	r8, r0
 800dac0:	4689      	mov	r9, r1
 800dac2:	4620      	mov	r0, r4
 800dac4:	4629      	mov	r1, r5
 800dac6:	f7f2 fd9f 	bl	8000608 <__aeabi_dmul>
 800daca:	a379      	add	r3, pc, #484	; (adr r3, 800dcb0 <__ieee754_asin+0x320>)
 800dacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dad0:	f7f2 fbe2 	bl	8000298 <__aeabi_dsub>
 800dad4:	4622      	mov	r2, r4
 800dad6:	462b      	mov	r3, r5
 800dad8:	f7f2 fd96 	bl	8000608 <__aeabi_dmul>
 800dadc:	a376      	add	r3, pc, #472	; (adr r3, 800dcb8 <__ieee754_asin+0x328>)
 800dade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae2:	f7f2 fbdb 	bl	800029c <__adddf3>
 800dae6:	4622      	mov	r2, r4
 800dae8:	462b      	mov	r3, r5
 800daea:	f7f2 fd8d 	bl	8000608 <__aeabi_dmul>
 800daee:	a374      	add	r3, pc, #464	; (adr r3, 800dcc0 <__ieee754_asin+0x330>)
 800daf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf4:	f7f2 fbd0 	bl	8000298 <__aeabi_dsub>
 800daf8:	4622      	mov	r2, r4
 800dafa:	462b      	mov	r3, r5
 800dafc:	f7f2 fd84 	bl	8000608 <__aeabi_dmul>
 800db00:	4b73      	ldr	r3, [pc, #460]	; (800dcd0 <__ieee754_asin+0x340>)
 800db02:	2200      	movs	r2, #0
 800db04:	f7f2 fbca 	bl	800029c <__adddf3>
 800db08:	ec45 4b10 	vmov	d0, r4, r5
 800db0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db10:	f000 ff3c 	bl	800e98c <__ieee754_sqrt>
 800db14:	4b70      	ldr	r3, [pc, #448]	; (800dcd8 <__ieee754_asin+0x348>)
 800db16:	429f      	cmp	r7, r3
 800db18:	ec5b ab10 	vmov	sl, fp, d0
 800db1c:	f340 80de 	ble.w	800dcdc <__ieee754_asin+0x34c>
 800db20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db24:	4640      	mov	r0, r8
 800db26:	4649      	mov	r1, r9
 800db28:	f7f2 fe98 	bl	800085c <__aeabi_ddiv>
 800db2c:	4652      	mov	r2, sl
 800db2e:	465b      	mov	r3, fp
 800db30:	f7f2 fd6a 	bl	8000608 <__aeabi_dmul>
 800db34:	4652      	mov	r2, sl
 800db36:	465b      	mov	r3, fp
 800db38:	f7f2 fbb0 	bl	800029c <__adddf3>
 800db3c:	4602      	mov	r2, r0
 800db3e:	460b      	mov	r3, r1
 800db40:	f7f2 fbac 	bl	800029c <__adddf3>
 800db44:	a348      	add	r3, pc, #288	; (adr r3, 800dc68 <__ieee754_asin+0x2d8>)
 800db46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4a:	f7f2 fba5 	bl	8000298 <__aeabi_dsub>
 800db4e:	4602      	mov	r2, r0
 800db50:	460b      	mov	r3, r1
 800db52:	a143      	add	r1, pc, #268	; (adr r1, 800dc60 <__ieee754_asin+0x2d0>)
 800db54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db58:	f7f2 fb9e 	bl	8000298 <__aeabi_dsub>
 800db5c:	9b01      	ldr	r3, [sp, #4]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	bfdc      	itt	le
 800db62:	4602      	movle	r2, r0
 800db64:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800db68:	4604      	mov	r4, r0
 800db6a:	460d      	mov	r5, r1
 800db6c:	bfdc      	itt	le
 800db6e:	4614      	movle	r4, r2
 800db70:	461d      	movle	r5, r3
 800db72:	e745      	b.n	800da00 <__ieee754_asin+0x70>
 800db74:	ee10 2a10 	vmov	r2, s0
 800db78:	ee10 0a10 	vmov	r0, s0
 800db7c:	462b      	mov	r3, r5
 800db7e:	4629      	mov	r1, r5
 800db80:	f7f2 fd42 	bl	8000608 <__aeabi_dmul>
 800db84:	a33c      	add	r3, pc, #240	; (adr r3, 800dc78 <__ieee754_asin+0x2e8>)
 800db86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8a:	4606      	mov	r6, r0
 800db8c:	460f      	mov	r7, r1
 800db8e:	f7f2 fd3b 	bl	8000608 <__aeabi_dmul>
 800db92:	a33b      	add	r3, pc, #236	; (adr r3, 800dc80 <__ieee754_asin+0x2f0>)
 800db94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db98:	f7f2 fb80 	bl	800029c <__adddf3>
 800db9c:	4632      	mov	r2, r6
 800db9e:	463b      	mov	r3, r7
 800dba0:	f7f2 fd32 	bl	8000608 <__aeabi_dmul>
 800dba4:	a338      	add	r3, pc, #224	; (adr r3, 800dc88 <__ieee754_asin+0x2f8>)
 800dba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbaa:	f7f2 fb75 	bl	8000298 <__aeabi_dsub>
 800dbae:	4632      	mov	r2, r6
 800dbb0:	463b      	mov	r3, r7
 800dbb2:	f7f2 fd29 	bl	8000608 <__aeabi_dmul>
 800dbb6:	a336      	add	r3, pc, #216	; (adr r3, 800dc90 <__ieee754_asin+0x300>)
 800dbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbbc:	f7f2 fb6e 	bl	800029c <__adddf3>
 800dbc0:	4632      	mov	r2, r6
 800dbc2:	463b      	mov	r3, r7
 800dbc4:	f7f2 fd20 	bl	8000608 <__aeabi_dmul>
 800dbc8:	a333      	add	r3, pc, #204	; (adr r3, 800dc98 <__ieee754_asin+0x308>)
 800dbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbce:	f7f2 fb63 	bl	8000298 <__aeabi_dsub>
 800dbd2:	4632      	mov	r2, r6
 800dbd4:	463b      	mov	r3, r7
 800dbd6:	f7f2 fd17 	bl	8000608 <__aeabi_dmul>
 800dbda:	a331      	add	r3, pc, #196	; (adr r3, 800dca0 <__ieee754_asin+0x310>)
 800dbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe0:	f7f2 fb5c 	bl	800029c <__adddf3>
 800dbe4:	4632      	mov	r2, r6
 800dbe6:	463b      	mov	r3, r7
 800dbe8:	f7f2 fd0e 	bl	8000608 <__aeabi_dmul>
 800dbec:	a32e      	add	r3, pc, #184	; (adr r3, 800dca8 <__ieee754_asin+0x318>)
 800dbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf2:	4680      	mov	r8, r0
 800dbf4:	4689      	mov	r9, r1
 800dbf6:	4630      	mov	r0, r6
 800dbf8:	4639      	mov	r1, r7
 800dbfa:	f7f2 fd05 	bl	8000608 <__aeabi_dmul>
 800dbfe:	a32c      	add	r3, pc, #176	; (adr r3, 800dcb0 <__ieee754_asin+0x320>)
 800dc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc04:	f7f2 fb48 	bl	8000298 <__aeabi_dsub>
 800dc08:	4632      	mov	r2, r6
 800dc0a:	463b      	mov	r3, r7
 800dc0c:	f7f2 fcfc 	bl	8000608 <__aeabi_dmul>
 800dc10:	a329      	add	r3, pc, #164	; (adr r3, 800dcb8 <__ieee754_asin+0x328>)
 800dc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc16:	f7f2 fb41 	bl	800029c <__adddf3>
 800dc1a:	4632      	mov	r2, r6
 800dc1c:	463b      	mov	r3, r7
 800dc1e:	f7f2 fcf3 	bl	8000608 <__aeabi_dmul>
 800dc22:	a327      	add	r3, pc, #156	; (adr r3, 800dcc0 <__ieee754_asin+0x330>)
 800dc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc28:	f7f2 fb36 	bl	8000298 <__aeabi_dsub>
 800dc2c:	4632      	mov	r2, r6
 800dc2e:	463b      	mov	r3, r7
 800dc30:	f7f2 fcea 	bl	8000608 <__aeabi_dmul>
 800dc34:	2200      	movs	r2, #0
 800dc36:	4b26      	ldr	r3, [pc, #152]	; (800dcd0 <__ieee754_asin+0x340>)
 800dc38:	f7f2 fb30 	bl	800029c <__adddf3>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	460b      	mov	r3, r1
 800dc40:	4640      	mov	r0, r8
 800dc42:	4649      	mov	r1, r9
 800dc44:	f7f2 fe0a 	bl	800085c <__aeabi_ddiv>
 800dc48:	4622      	mov	r2, r4
 800dc4a:	462b      	mov	r3, r5
 800dc4c:	f7f2 fcdc 	bl	8000608 <__aeabi_dmul>
 800dc50:	4602      	mov	r2, r0
 800dc52:	460b      	mov	r3, r1
 800dc54:	4620      	mov	r0, r4
 800dc56:	4629      	mov	r1, r5
 800dc58:	e6c2      	b.n	800d9e0 <__ieee754_asin+0x50>
 800dc5a:	bf00      	nop
 800dc5c:	f3af 8000 	nop.w
 800dc60:	54442d18 	.word	0x54442d18
 800dc64:	3ff921fb 	.word	0x3ff921fb
 800dc68:	33145c07 	.word	0x33145c07
 800dc6c:	3c91a626 	.word	0x3c91a626
 800dc70:	8800759c 	.word	0x8800759c
 800dc74:	7e37e43c 	.word	0x7e37e43c
 800dc78:	0dfdf709 	.word	0x0dfdf709
 800dc7c:	3f023de1 	.word	0x3f023de1
 800dc80:	7501b288 	.word	0x7501b288
 800dc84:	3f49efe0 	.word	0x3f49efe0
 800dc88:	b5688f3b 	.word	0xb5688f3b
 800dc8c:	3fa48228 	.word	0x3fa48228
 800dc90:	0e884455 	.word	0x0e884455
 800dc94:	3fc9c155 	.word	0x3fc9c155
 800dc98:	03eb6f7d 	.word	0x03eb6f7d
 800dc9c:	3fd4d612 	.word	0x3fd4d612
 800dca0:	55555555 	.word	0x55555555
 800dca4:	3fc55555 	.word	0x3fc55555
 800dca8:	b12e9282 	.word	0xb12e9282
 800dcac:	3fb3b8c5 	.word	0x3fb3b8c5
 800dcb0:	1b8d0159 	.word	0x1b8d0159
 800dcb4:	3fe6066c 	.word	0x3fe6066c
 800dcb8:	9c598ac8 	.word	0x9c598ac8
 800dcbc:	40002ae5 	.word	0x40002ae5
 800dcc0:	1c8a2d4b 	.word	0x1c8a2d4b
 800dcc4:	40033a27 	.word	0x40033a27
 800dcc8:	3fefffff 	.word	0x3fefffff
 800dccc:	3fdfffff 	.word	0x3fdfffff
 800dcd0:	3ff00000 	.word	0x3ff00000
 800dcd4:	3fe00000 	.word	0x3fe00000
 800dcd8:	3fef3332 	.word	0x3fef3332
 800dcdc:	ee10 2a10 	vmov	r2, s0
 800dce0:	ee10 0a10 	vmov	r0, s0
 800dce4:	465b      	mov	r3, fp
 800dce6:	4659      	mov	r1, fp
 800dce8:	f7f2 fad8 	bl	800029c <__adddf3>
 800dcec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dcf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dcf4:	4640      	mov	r0, r8
 800dcf6:	4649      	mov	r1, r9
 800dcf8:	f7f2 fdb0 	bl	800085c <__aeabi_ddiv>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	460b      	mov	r3, r1
 800dd00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd04:	f7f2 fc80 	bl	8000608 <__aeabi_dmul>
 800dd08:	2600      	movs	r6, #0
 800dd0a:	4680      	mov	r8, r0
 800dd0c:	4689      	mov	r9, r1
 800dd0e:	4632      	mov	r2, r6
 800dd10:	465b      	mov	r3, fp
 800dd12:	4630      	mov	r0, r6
 800dd14:	4659      	mov	r1, fp
 800dd16:	f7f2 fc77 	bl	8000608 <__aeabi_dmul>
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	4620      	mov	r0, r4
 800dd20:	4629      	mov	r1, r5
 800dd22:	f7f2 fab9 	bl	8000298 <__aeabi_dsub>
 800dd26:	4632      	mov	r2, r6
 800dd28:	4604      	mov	r4, r0
 800dd2a:	460d      	mov	r5, r1
 800dd2c:	465b      	mov	r3, fp
 800dd2e:	4650      	mov	r0, sl
 800dd30:	4659      	mov	r1, fp
 800dd32:	f7f2 fab3 	bl	800029c <__adddf3>
 800dd36:	4602      	mov	r2, r0
 800dd38:	460b      	mov	r3, r1
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	4629      	mov	r1, r5
 800dd3e:	f7f2 fd8d 	bl	800085c <__aeabi_ddiv>
 800dd42:	4602      	mov	r2, r0
 800dd44:	460b      	mov	r3, r1
 800dd46:	f7f2 faa9 	bl	800029c <__adddf3>
 800dd4a:	4602      	mov	r2, r0
 800dd4c:	460b      	mov	r3, r1
 800dd4e:	a114      	add	r1, pc, #80	; (adr r1, 800dda0 <__ieee754_asin+0x410>)
 800dd50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd54:	f7f2 faa0 	bl	8000298 <__aeabi_dsub>
 800dd58:	4602      	mov	r2, r0
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	4640      	mov	r0, r8
 800dd5e:	4649      	mov	r1, r9
 800dd60:	f7f2 fa9a 	bl	8000298 <__aeabi_dsub>
 800dd64:	465f      	mov	r7, fp
 800dd66:	4604      	mov	r4, r0
 800dd68:	460d      	mov	r5, r1
 800dd6a:	4632      	mov	r2, r6
 800dd6c:	465b      	mov	r3, fp
 800dd6e:	4630      	mov	r0, r6
 800dd70:	4639      	mov	r1, r7
 800dd72:	f7f2 fa93 	bl	800029c <__adddf3>
 800dd76:	4602      	mov	r2, r0
 800dd78:	460b      	mov	r3, r1
 800dd7a:	a10b      	add	r1, pc, #44	; (adr r1, 800dda8 <__ieee754_asin+0x418>)
 800dd7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd80:	f7f2 fa8a 	bl	8000298 <__aeabi_dsub>
 800dd84:	4602      	mov	r2, r0
 800dd86:	460b      	mov	r3, r1
 800dd88:	4620      	mov	r0, r4
 800dd8a:	4629      	mov	r1, r5
 800dd8c:	f7f2 fa84 	bl	8000298 <__aeabi_dsub>
 800dd90:	4602      	mov	r2, r0
 800dd92:	460b      	mov	r3, r1
 800dd94:	a104      	add	r1, pc, #16	; (adr r1, 800dda8 <__ieee754_asin+0x418>)
 800dd96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dd9a:	e6dd      	b.n	800db58 <__ieee754_asin+0x1c8>
 800dd9c:	f3af 8000 	nop.w
 800dda0:	33145c07 	.word	0x33145c07
 800dda4:	3c91a626 	.word	0x3c91a626
 800dda8:	54442d18 	.word	0x54442d18
 800ddac:	3fe921fb 	.word	0x3fe921fb

0800ddb0 <__ieee754_atan2>:
 800ddb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddb4:	ec57 6b11 	vmov	r6, r7, d1
 800ddb8:	4273      	negs	r3, r6
 800ddba:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ddbe:	4333      	orrs	r3, r6
 800ddc0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800df68 <__ieee754_atan2+0x1b8>
 800ddc4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ddc8:	4573      	cmp	r3, lr
 800ddca:	ec51 0b10 	vmov	r0, r1, d0
 800ddce:	ee11 8a10 	vmov	r8, s2
 800ddd2:	d80a      	bhi.n	800ddea <__ieee754_atan2+0x3a>
 800ddd4:	4244      	negs	r4, r0
 800ddd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ddda:	4304      	orrs	r4, r0
 800dddc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800dde0:	4574      	cmp	r4, lr
 800dde2:	468c      	mov	ip, r1
 800dde4:	ee10 9a10 	vmov	r9, s0
 800dde8:	d907      	bls.n	800ddfa <__ieee754_atan2+0x4a>
 800ddea:	4632      	mov	r2, r6
 800ddec:	463b      	mov	r3, r7
 800ddee:	f7f2 fa55 	bl	800029c <__adddf3>
 800ddf2:	ec41 0b10 	vmov	d0, r0, r1
 800ddf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddfa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ddfe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800de02:	4334      	orrs	r4, r6
 800de04:	d103      	bne.n	800de0e <__ieee754_atan2+0x5e>
 800de06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de0a:	f000 be71 	b.w	800eaf0 <atan>
 800de0e:	17bc      	asrs	r4, r7, #30
 800de10:	f004 0402 	and.w	r4, r4, #2
 800de14:	ea53 0909 	orrs.w	r9, r3, r9
 800de18:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800de1c:	d107      	bne.n	800de2e <__ieee754_atan2+0x7e>
 800de1e:	2c02      	cmp	r4, #2
 800de20:	d073      	beq.n	800df0a <__ieee754_atan2+0x15a>
 800de22:	2c03      	cmp	r4, #3
 800de24:	d1e5      	bne.n	800ddf2 <__ieee754_atan2+0x42>
 800de26:	a13e      	add	r1, pc, #248	; (adr r1, 800df20 <__ieee754_atan2+0x170>)
 800de28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de2c:	e7e1      	b.n	800ddf2 <__ieee754_atan2+0x42>
 800de2e:	ea52 0808 	orrs.w	r8, r2, r8
 800de32:	d106      	bne.n	800de42 <__ieee754_atan2+0x92>
 800de34:	f1bc 0f00 	cmp.w	ip, #0
 800de38:	da6b      	bge.n	800df12 <__ieee754_atan2+0x162>
 800de3a:	a13b      	add	r1, pc, #236	; (adr r1, 800df28 <__ieee754_atan2+0x178>)
 800de3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de40:	e7d7      	b.n	800ddf2 <__ieee754_atan2+0x42>
 800de42:	4572      	cmp	r2, lr
 800de44:	d120      	bne.n	800de88 <__ieee754_atan2+0xd8>
 800de46:	4293      	cmp	r3, r2
 800de48:	d111      	bne.n	800de6e <__ieee754_atan2+0xbe>
 800de4a:	2c02      	cmp	r4, #2
 800de4c:	d007      	beq.n	800de5e <__ieee754_atan2+0xae>
 800de4e:	2c03      	cmp	r4, #3
 800de50:	d009      	beq.n	800de66 <__ieee754_atan2+0xb6>
 800de52:	2c01      	cmp	r4, #1
 800de54:	d155      	bne.n	800df02 <__ieee754_atan2+0x152>
 800de56:	a136      	add	r1, pc, #216	; (adr r1, 800df30 <__ieee754_atan2+0x180>)
 800de58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de5c:	e7c9      	b.n	800ddf2 <__ieee754_atan2+0x42>
 800de5e:	a136      	add	r1, pc, #216	; (adr r1, 800df38 <__ieee754_atan2+0x188>)
 800de60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de64:	e7c5      	b.n	800ddf2 <__ieee754_atan2+0x42>
 800de66:	a136      	add	r1, pc, #216	; (adr r1, 800df40 <__ieee754_atan2+0x190>)
 800de68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de6c:	e7c1      	b.n	800ddf2 <__ieee754_atan2+0x42>
 800de6e:	2c02      	cmp	r4, #2
 800de70:	d04b      	beq.n	800df0a <__ieee754_atan2+0x15a>
 800de72:	2c03      	cmp	r4, #3
 800de74:	d0d7      	beq.n	800de26 <__ieee754_atan2+0x76>
 800de76:	2c01      	cmp	r4, #1
 800de78:	f04f 0000 	mov.w	r0, #0
 800de7c:	d102      	bne.n	800de84 <__ieee754_atan2+0xd4>
 800de7e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800de82:	e7b6      	b.n	800ddf2 <__ieee754_atan2+0x42>
 800de84:	2100      	movs	r1, #0
 800de86:	e7b4      	b.n	800ddf2 <__ieee754_atan2+0x42>
 800de88:	4573      	cmp	r3, lr
 800de8a:	d0d3      	beq.n	800de34 <__ieee754_atan2+0x84>
 800de8c:	1a9b      	subs	r3, r3, r2
 800de8e:	151b      	asrs	r3, r3, #20
 800de90:	2b3c      	cmp	r3, #60	; 0x3c
 800de92:	dc1e      	bgt.n	800ded2 <__ieee754_atan2+0x122>
 800de94:	2f00      	cmp	r7, #0
 800de96:	da01      	bge.n	800de9c <__ieee754_atan2+0xec>
 800de98:	333c      	adds	r3, #60	; 0x3c
 800de9a:	db1e      	blt.n	800deda <__ieee754_atan2+0x12a>
 800de9c:	4632      	mov	r2, r6
 800de9e:	463b      	mov	r3, r7
 800dea0:	f7f2 fcdc 	bl	800085c <__aeabi_ddiv>
 800dea4:	ec41 0b10 	vmov	d0, r0, r1
 800dea8:	f000 ffc2 	bl	800ee30 <fabs>
 800deac:	f000 fe20 	bl	800eaf0 <atan>
 800deb0:	ec51 0b10 	vmov	r0, r1, d0
 800deb4:	2c01      	cmp	r4, #1
 800deb6:	d013      	beq.n	800dee0 <__ieee754_atan2+0x130>
 800deb8:	2c02      	cmp	r4, #2
 800deba:	d015      	beq.n	800dee8 <__ieee754_atan2+0x138>
 800debc:	2c00      	cmp	r4, #0
 800debe:	d098      	beq.n	800ddf2 <__ieee754_atan2+0x42>
 800dec0:	a321      	add	r3, pc, #132	; (adr r3, 800df48 <__ieee754_atan2+0x198>)
 800dec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec6:	f7f2 f9e7 	bl	8000298 <__aeabi_dsub>
 800deca:	a321      	add	r3, pc, #132	; (adr r3, 800df50 <__ieee754_atan2+0x1a0>)
 800decc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded0:	e014      	b.n	800defc <__ieee754_atan2+0x14c>
 800ded2:	a121      	add	r1, pc, #132	; (adr r1, 800df58 <__ieee754_atan2+0x1a8>)
 800ded4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ded8:	e7ec      	b.n	800deb4 <__ieee754_atan2+0x104>
 800deda:	2000      	movs	r0, #0
 800dedc:	2100      	movs	r1, #0
 800dede:	e7e9      	b.n	800deb4 <__ieee754_atan2+0x104>
 800dee0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dee4:	4619      	mov	r1, r3
 800dee6:	e784      	b.n	800ddf2 <__ieee754_atan2+0x42>
 800dee8:	a317      	add	r3, pc, #92	; (adr r3, 800df48 <__ieee754_atan2+0x198>)
 800deea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deee:	f7f2 f9d3 	bl	8000298 <__aeabi_dsub>
 800def2:	4602      	mov	r2, r0
 800def4:	460b      	mov	r3, r1
 800def6:	a116      	add	r1, pc, #88	; (adr r1, 800df50 <__ieee754_atan2+0x1a0>)
 800def8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800defc:	f7f2 f9cc 	bl	8000298 <__aeabi_dsub>
 800df00:	e777      	b.n	800ddf2 <__ieee754_atan2+0x42>
 800df02:	a117      	add	r1, pc, #92	; (adr r1, 800df60 <__ieee754_atan2+0x1b0>)
 800df04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df08:	e773      	b.n	800ddf2 <__ieee754_atan2+0x42>
 800df0a:	a111      	add	r1, pc, #68	; (adr r1, 800df50 <__ieee754_atan2+0x1a0>)
 800df0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df10:	e76f      	b.n	800ddf2 <__ieee754_atan2+0x42>
 800df12:	a111      	add	r1, pc, #68	; (adr r1, 800df58 <__ieee754_atan2+0x1a8>)
 800df14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df18:	e76b      	b.n	800ddf2 <__ieee754_atan2+0x42>
 800df1a:	bf00      	nop
 800df1c:	f3af 8000 	nop.w
 800df20:	54442d18 	.word	0x54442d18
 800df24:	c00921fb 	.word	0xc00921fb
 800df28:	54442d18 	.word	0x54442d18
 800df2c:	bff921fb 	.word	0xbff921fb
 800df30:	54442d18 	.word	0x54442d18
 800df34:	bfe921fb 	.word	0xbfe921fb
 800df38:	7f3321d2 	.word	0x7f3321d2
 800df3c:	4002d97c 	.word	0x4002d97c
 800df40:	7f3321d2 	.word	0x7f3321d2
 800df44:	c002d97c 	.word	0xc002d97c
 800df48:	33145c07 	.word	0x33145c07
 800df4c:	3ca1a626 	.word	0x3ca1a626
 800df50:	54442d18 	.word	0x54442d18
 800df54:	400921fb 	.word	0x400921fb
 800df58:	54442d18 	.word	0x54442d18
 800df5c:	3ff921fb 	.word	0x3ff921fb
 800df60:	54442d18 	.word	0x54442d18
 800df64:	3fe921fb 	.word	0x3fe921fb
 800df68:	7ff00000 	.word	0x7ff00000
 800df6c:	00000000 	.word	0x00000000

0800df70 <__ieee754_pow>:
 800df70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df74:	b091      	sub	sp, #68	; 0x44
 800df76:	ed8d 1b00 	vstr	d1, [sp]
 800df7a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800df7e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800df82:	ea58 0302 	orrs.w	r3, r8, r2
 800df86:	ec57 6b10 	vmov	r6, r7, d0
 800df8a:	f000 84be 	beq.w	800e90a <__ieee754_pow+0x99a>
 800df8e:	4b7a      	ldr	r3, [pc, #488]	; (800e178 <__ieee754_pow+0x208>)
 800df90:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800df94:	429c      	cmp	r4, r3
 800df96:	463d      	mov	r5, r7
 800df98:	ee10 aa10 	vmov	sl, s0
 800df9c:	dc09      	bgt.n	800dfb2 <__ieee754_pow+0x42>
 800df9e:	d103      	bne.n	800dfa8 <__ieee754_pow+0x38>
 800dfa0:	b93e      	cbnz	r6, 800dfb2 <__ieee754_pow+0x42>
 800dfa2:	45a0      	cmp	r8, r4
 800dfa4:	dc0d      	bgt.n	800dfc2 <__ieee754_pow+0x52>
 800dfa6:	e001      	b.n	800dfac <__ieee754_pow+0x3c>
 800dfa8:	4598      	cmp	r8, r3
 800dfaa:	dc02      	bgt.n	800dfb2 <__ieee754_pow+0x42>
 800dfac:	4598      	cmp	r8, r3
 800dfae:	d10e      	bne.n	800dfce <__ieee754_pow+0x5e>
 800dfb0:	b16a      	cbz	r2, 800dfce <__ieee754_pow+0x5e>
 800dfb2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800dfb6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800dfba:	ea54 030a 	orrs.w	r3, r4, sl
 800dfbe:	f000 84a4 	beq.w	800e90a <__ieee754_pow+0x99a>
 800dfc2:	486e      	ldr	r0, [pc, #440]	; (800e17c <__ieee754_pow+0x20c>)
 800dfc4:	b011      	add	sp, #68	; 0x44
 800dfc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfca:	f000 bf45 	b.w	800ee58 <nan>
 800dfce:	2d00      	cmp	r5, #0
 800dfd0:	da53      	bge.n	800e07a <__ieee754_pow+0x10a>
 800dfd2:	4b6b      	ldr	r3, [pc, #428]	; (800e180 <__ieee754_pow+0x210>)
 800dfd4:	4598      	cmp	r8, r3
 800dfd6:	dc4d      	bgt.n	800e074 <__ieee754_pow+0x104>
 800dfd8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800dfdc:	4598      	cmp	r8, r3
 800dfde:	dd4c      	ble.n	800e07a <__ieee754_pow+0x10a>
 800dfe0:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dfe4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dfe8:	2b14      	cmp	r3, #20
 800dfea:	dd26      	ble.n	800e03a <__ieee754_pow+0xca>
 800dfec:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800dff0:	fa22 f103 	lsr.w	r1, r2, r3
 800dff4:	fa01 f303 	lsl.w	r3, r1, r3
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d13e      	bne.n	800e07a <__ieee754_pow+0x10a>
 800dffc:	f001 0101 	and.w	r1, r1, #1
 800e000:	f1c1 0b02 	rsb	fp, r1, #2
 800e004:	2a00      	cmp	r2, #0
 800e006:	d15b      	bne.n	800e0c0 <__ieee754_pow+0x150>
 800e008:	4b5b      	ldr	r3, [pc, #364]	; (800e178 <__ieee754_pow+0x208>)
 800e00a:	4598      	cmp	r8, r3
 800e00c:	d124      	bne.n	800e058 <__ieee754_pow+0xe8>
 800e00e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e012:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e016:	ea53 030a 	orrs.w	r3, r3, sl
 800e01a:	f000 8476 	beq.w	800e90a <__ieee754_pow+0x99a>
 800e01e:	4b59      	ldr	r3, [pc, #356]	; (800e184 <__ieee754_pow+0x214>)
 800e020:	429c      	cmp	r4, r3
 800e022:	dd2d      	ble.n	800e080 <__ieee754_pow+0x110>
 800e024:	f1b9 0f00 	cmp.w	r9, #0
 800e028:	f280 8473 	bge.w	800e912 <__ieee754_pow+0x9a2>
 800e02c:	2000      	movs	r0, #0
 800e02e:	2100      	movs	r1, #0
 800e030:	ec41 0b10 	vmov	d0, r0, r1
 800e034:	b011      	add	sp, #68	; 0x44
 800e036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e03a:	2a00      	cmp	r2, #0
 800e03c:	d13e      	bne.n	800e0bc <__ieee754_pow+0x14c>
 800e03e:	f1c3 0314 	rsb	r3, r3, #20
 800e042:	fa48 f103 	asr.w	r1, r8, r3
 800e046:	fa01 f303 	lsl.w	r3, r1, r3
 800e04a:	4543      	cmp	r3, r8
 800e04c:	f040 8469 	bne.w	800e922 <__ieee754_pow+0x9b2>
 800e050:	f001 0101 	and.w	r1, r1, #1
 800e054:	f1c1 0b02 	rsb	fp, r1, #2
 800e058:	4b4b      	ldr	r3, [pc, #300]	; (800e188 <__ieee754_pow+0x218>)
 800e05a:	4598      	cmp	r8, r3
 800e05c:	d118      	bne.n	800e090 <__ieee754_pow+0x120>
 800e05e:	f1b9 0f00 	cmp.w	r9, #0
 800e062:	f280 845a 	bge.w	800e91a <__ieee754_pow+0x9aa>
 800e066:	4948      	ldr	r1, [pc, #288]	; (800e188 <__ieee754_pow+0x218>)
 800e068:	4632      	mov	r2, r6
 800e06a:	463b      	mov	r3, r7
 800e06c:	2000      	movs	r0, #0
 800e06e:	f7f2 fbf5 	bl	800085c <__aeabi_ddiv>
 800e072:	e7dd      	b.n	800e030 <__ieee754_pow+0xc0>
 800e074:	f04f 0b02 	mov.w	fp, #2
 800e078:	e7c4      	b.n	800e004 <__ieee754_pow+0x94>
 800e07a:	f04f 0b00 	mov.w	fp, #0
 800e07e:	e7c1      	b.n	800e004 <__ieee754_pow+0x94>
 800e080:	f1b9 0f00 	cmp.w	r9, #0
 800e084:	dad2      	bge.n	800e02c <__ieee754_pow+0xbc>
 800e086:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e08a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e08e:	e7cf      	b.n	800e030 <__ieee754_pow+0xc0>
 800e090:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e094:	d106      	bne.n	800e0a4 <__ieee754_pow+0x134>
 800e096:	4632      	mov	r2, r6
 800e098:	463b      	mov	r3, r7
 800e09a:	4610      	mov	r0, r2
 800e09c:	4619      	mov	r1, r3
 800e09e:	f7f2 fab3 	bl	8000608 <__aeabi_dmul>
 800e0a2:	e7c5      	b.n	800e030 <__ieee754_pow+0xc0>
 800e0a4:	4b39      	ldr	r3, [pc, #228]	; (800e18c <__ieee754_pow+0x21c>)
 800e0a6:	4599      	cmp	r9, r3
 800e0a8:	d10a      	bne.n	800e0c0 <__ieee754_pow+0x150>
 800e0aa:	2d00      	cmp	r5, #0
 800e0ac:	db08      	blt.n	800e0c0 <__ieee754_pow+0x150>
 800e0ae:	ec47 6b10 	vmov	d0, r6, r7
 800e0b2:	b011      	add	sp, #68	; 0x44
 800e0b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b8:	f000 bc68 	b.w	800e98c <__ieee754_sqrt>
 800e0bc:	f04f 0b00 	mov.w	fp, #0
 800e0c0:	ec47 6b10 	vmov	d0, r6, r7
 800e0c4:	f000 feb4 	bl	800ee30 <fabs>
 800e0c8:	ec51 0b10 	vmov	r0, r1, d0
 800e0cc:	f1ba 0f00 	cmp.w	sl, #0
 800e0d0:	d127      	bne.n	800e122 <__ieee754_pow+0x1b2>
 800e0d2:	b124      	cbz	r4, 800e0de <__ieee754_pow+0x16e>
 800e0d4:	4b2c      	ldr	r3, [pc, #176]	; (800e188 <__ieee754_pow+0x218>)
 800e0d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d121      	bne.n	800e122 <__ieee754_pow+0x1b2>
 800e0de:	f1b9 0f00 	cmp.w	r9, #0
 800e0e2:	da05      	bge.n	800e0f0 <__ieee754_pow+0x180>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	460b      	mov	r3, r1
 800e0e8:	2000      	movs	r0, #0
 800e0ea:	4927      	ldr	r1, [pc, #156]	; (800e188 <__ieee754_pow+0x218>)
 800e0ec:	f7f2 fbb6 	bl	800085c <__aeabi_ddiv>
 800e0f0:	2d00      	cmp	r5, #0
 800e0f2:	da9d      	bge.n	800e030 <__ieee754_pow+0xc0>
 800e0f4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e0f8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e0fc:	ea54 030b 	orrs.w	r3, r4, fp
 800e100:	d108      	bne.n	800e114 <__ieee754_pow+0x1a4>
 800e102:	4602      	mov	r2, r0
 800e104:	460b      	mov	r3, r1
 800e106:	4610      	mov	r0, r2
 800e108:	4619      	mov	r1, r3
 800e10a:	f7f2 f8c5 	bl	8000298 <__aeabi_dsub>
 800e10e:	4602      	mov	r2, r0
 800e110:	460b      	mov	r3, r1
 800e112:	e7ac      	b.n	800e06e <__ieee754_pow+0xfe>
 800e114:	f1bb 0f01 	cmp.w	fp, #1
 800e118:	d18a      	bne.n	800e030 <__ieee754_pow+0xc0>
 800e11a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e11e:	4619      	mov	r1, r3
 800e120:	e786      	b.n	800e030 <__ieee754_pow+0xc0>
 800e122:	0fed      	lsrs	r5, r5, #31
 800e124:	1e6b      	subs	r3, r5, #1
 800e126:	930d      	str	r3, [sp, #52]	; 0x34
 800e128:	ea5b 0303 	orrs.w	r3, fp, r3
 800e12c:	d102      	bne.n	800e134 <__ieee754_pow+0x1c4>
 800e12e:	4632      	mov	r2, r6
 800e130:	463b      	mov	r3, r7
 800e132:	e7e8      	b.n	800e106 <__ieee754_pow+0x196>
 800e134:	4b16      	ldr	r3, [pc, #88]	; (800e190 <__ieee754_pow+0x220>)
 800e136:	4598      	cmp	r8, r3
 800e138:	f340 80fe 	ble.w	800e338 <__ieee754_pow+0x3c8>
 800e13c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e140:	4598      	cmp	r8, r3
 800e142:	dd0a      	ble.n	800e15a <__ieee754_pow+0x1ea>
 800e144:	4b0f      	ldr	r3, [pc, #60]	; (800e184 <__ieee754_pow+0x214>)
 800e146:	429c      	cmp	r4, r3
 800e148:	dc0d      	bgt.n	800e166 <__ieee754_pow+0x1f6>
 800e14a:	f1b9 0f00 	cmp.w	r9, #0
 800e14e:	f6bf af6d 	bge.w	800e02c <__ieee754_pow+0xbc>
 800e152:	a307      	add	r3, pc, #28	; (adr r3, 800e170 <__ieee754_pow+0x200>)
 800e154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e158:	e79f      	b.n	800e09a <__ieee754_pow+0x12a>
 800e15a:	4b0e      	ldr	r3, [pc, #56]	; (800e194 <__ieee754_pow+0x224>)
 800e15c:	429c      	cmp	r4, r3
 800e15e:	ddf4      	ble.n	800e14a <__ieee754_pow+0x1da>
 800e160:	4b09      	ldr	r3, [pc, #36]	; (800e188 <__ieee754_pow+0x218>)
 800e162:	429c      	cmp	r4, r3
 800e164:	dd18      	ble.n	800e198 <__ieee754_pow+0x228>
 800e166:	f1b9 0f00 	cmp.w	r9, #0
 800e16a:	dcf2      	bgt.n	800e152 <__ieee754_pow+0x1e2>
 800e16c:	e75e      	b.n	800e02c <__ieee754_pow+0xbc>
 800e16e:	bf00      	nop
 800e170:	8800759c 	.word	0x8800759c
 800e174:	7e37e43c 	.word	0x7e37e43c
 800e178:	7ff00000 	.word	0x7ff00000
 800e17c:	0800f719 	.word	0x0800f719
 800e180:	433fffff 	.word	0x433fffff
 800e184:	3fefffff 	.word	0x3fefffff
 800e188:	3ff00000 	.word	0x3ff00000
 800e18c:	3fe00000 	.word	0x3fe00000
 800e190:	41e00000 	.word	0x41e00000
 800e194:	3feffffe 	.word	0x3feffffe
 800e198:	2200      	movs	r2, #0
 800e19a:	4b63      	ldr	r3, [pc, #396]	; (800e328 <__ieee754_pow+0x3b8>)
 800e19c:	f7f2 f87c 	bl	8000298 <__aeabi_dsub>
 800e1a0:	a355      	add	r3, pc, #340	; (adr r3, 800e2f8 <__ieee754_pow+0x388>)
 800e1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a6:	4604      	mov	r4, r0
 800e1a8:	460d      	mov	r5, r1
 800e1aa:	f7f2 fa2d 	bl	8000608 <__aeabi_dmul>
 800e1ae:	a354      	add	r3, pc, #336	; (adr r3, 800e300 <__ieee754_pow+0x390>)
 800e1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b4:	4606      	mov	r6, r0
 800e1b6:	460f      	mov	r7, r1
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	4629      	mov	r1, r5
 800e1bc:	f7f2 fa24 	bl	8000608 <__aeabi_dmul>
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1c6:	4b59      	ldr	r3, [pc, #356]	; (800e32c <__ieee754_pow+0x3bc>)
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	4629      	mov	r1, r5
 800e1cc:	f7f2 fa1c 	bl	8000608 <__aeabi_dmul>
 800e1d0:	4602      	mov	r2, r0
 800e1d2:	460b      	mov	r3, r1
 800e1d4:	a14c      	add	r1, pc, #304	; (adr r1, 800e308 <__ieee754_pow+0x398>)
 800e1d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1da:	f7f2 f85d 	bl	8000298 <__aeabi_dsub>
 800e1de:	4622      	mov	r2, r4
 800e1e0:	462b      	mov	r3, r5
 800e1e2:	f7f2 fa11 	bl	8000608 <__aeabi_dmul>
 800e1e6:	4602      	mov	r2, r0
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	2000      	movs	r0, #0
 800e1ec:	4950      	ldr	r1, [pc, #320]	; (800e330 <__ieee754_pow+0x3c0>)
 800e1ee:	f7f2 f853 	bl	8000298 <__aeabi_dsub>
 800e1f2:	4622      	mov	r2, r4
 800e1f4:	462b      	mov	r3, r5
 800e1f6:	4680      	mov	r8, r0
 800e1f8:	4689      	mov	r9, r1
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	4629      	mov	r1, r5
 800e1fe:	f7f2 fa03 	bl	8000608 <__aeabi_dmul>
 800e202:	4602      	mov	r2, r0
 800e204:	460b      	mov	r3, r1
 800e206:	4640      	mov	r0, r8
 800e208:	4649      	mov	r1, r9
 800e20a:	f7f2 f9fd 	bl	8000608 <__aeabi_dmul>
 800e20e:	a340      	add	r3, pc, #256	; (adr r3, 800e310 <__ieee754_pow+0x3a0>)
 800e210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e214:	f7f2 f9f8 	bl	8000608 <__aeabi_dmul>
 800e218:	4602      	mov	r2, r0
 800e21a:	460b      	mov	r3, r1
 800e21c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e220:	f7f2 f83a 	bl	8000298 <__aeabi_dsub>
 800e224:	4602      	mov	r2, r0
 800e226:	460b      	mov	r3, r1
 800e228:	4604      	mov	r4, r0
 800e22a:	460d      	mov	r5, r1
 800e22c:	4630      	mov	r0, r6
 800e22e:	4639      	mov	r1, r7
 800e230:	f7f2 f834 	bl	800029c <__adddf3>
 800e234:	2000      	movs	r0, #0
 800e236:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e23a:	4632      	mov	r2, r6
 800e23c:	463b      	mov	r3, r7
 800e23e:	f7f2 f82b 	bl	8000298 <__aeabi_dsub>
 800e242:	4602      	mov	r2, r0
 800e244:	460b      	mov	r3, r1
 800e246:	4620      	mov	r0, r4
 800e248:	4629      	mov	r1, r5
 800e24a:	f7f2 f825 	bl	8000298 <__aeabi_dsub>
 800e24e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e250:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e254:	4313      	orrs	r3, r2
 800e256:	4606      	mov	r6, r0
 800e258:	460f      	mov	r7, r1
 800e25a:	f040 81eb 	bne.w	800e634 <__ieee754_pow+0x6c4>
 800e25e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e318 <__ieee754_pow+0x3a8>
 800e262:	e9dd 4500 	ldrd	r4, r5, [sp]
 800e266:	2400      	movs	r4, #0
 800e268:	4622      	mov	r2, r4
 800e26a:	462b      	mov	r3, r5
 800e26c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e270:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e274:	f7f2 f810 	bl	8000298 <__aeabi_dsub>
 800e278:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e27c:	f7f2 f9c4 	bl	8000608 <__aeabi_dmul>
 800e280:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e284:	4680      	mov	r8, r0
 800e286:	4689      	mov	r9, r1
 800e288:	4630      	mov	r0, r6
 800e28a:	4639      	mov	r1, r7
 800e28c:	f7f2 f9bc 	bl	8000608 <__aeabi_dmul>
 800e290:	4602      	mov	r2, r0
 800e292:	460b      	mov	r3, r1
 800e294:	4640      	mov	r0, r8
 800e296:	4649      	mov	r1, r9
 800e298:	f7f2 f800 	bl	800029c <__adddf3>
 800e29c:	4622      	mov	r2, r4
 800e29e:	462b      	mov	r3, r5
 800e2a0:	4680      	mov	r8, r0
 800e2a2:	4689      	mov	r9, r1
 800e2a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e2a8:	f7f2 f9ae 	bl	8000608 <__aeabi_dmul>
 800e2ac:	460b      	mov	r3, r1
 800e2ae:	4604      	mov	r4, r0
 800e2b0:	460d      	mov	r5, r1
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	4649      	mov	r1, r9
 800e2b6:	4640      	mov	r0, r8
 800e2b8:	e9cd 4500 	strd	r4, r5, [sp]
 800e2bc:	f7f1 ffee 	bl	800029c <__adddf3>
 800e2c0:	4b1c      	ldr	r3, [pc, #112]	; (800e334 <__ieee754_pow+0x3c4>)
 800e2c2:	4299      	cmp	r1, r3
 800e2c4:	4606      	mov	r6, r0
 800e2c6:	460f      	mov	r7, r1
 800e2c8:	468b      	mov	fp, r1
 800e2ca:	f340 82f7 	ble.w	800e8bc <__ieee754_pow+0x94c>
 800e2ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e2d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e2d6:	4303      	orrs	r3, r0
 800e2d8:	f000 81ea 	beq.w	800e6b0 <__ieee754_pow+0x740>
 800e2dc:	a310      	add	r3, pc, #64	; (adr r3, 800e320 <__ieee754_pow+0x3b0>)
 800e2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2e6:	f7f2 f98f 	bl	8000608 <__aeabi_dmul>
 800e2ea:	a30d      	add	r3, pc, #52	; (adr r3, 800e320 <__ieee754_pow+0x3b0>)
 800e2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f0:	e6d5      	b.n	800e09e <__ieee754_pow+0x12e>
 800e2f2:	bf00      	nop
 800e2f4:	f3af 8000 	nop.w
 800e2f8:	60000000 	.word	0x60000000
 800e2fc:	3ff71547 	.word	0x3ff71547
 800e300:	f85ddf44 	.word	0xf85ddf44
 800e304:	3e54ae0b 	.word	0x3e54ae0b
 800e308:	55555555 	.word	0x55555555
 800e30c:	3fd55555 	.word	0x3fd55555
 800e310:	652b82fe 	.word	0x652b82fe
 800e314:	3ff71547 	.word	0x3ff71547
 800e318:	00000000 	.word	0x00000000
 800e31c:	bff00000 	.word	0xbff00000
 800e320:	8800759c 	.word	0x8800759c
 800e324:	7e37e43c 	.word	0x7e37e43c
 800e328:	3ff00000 	.word	0x3ff00000
 800e32c:	3fd00000 	.word	0x3fd00000
 800e330:	3fe00000 	.word	0x3fe00000
 800e334:	408fffff 	.word	0x408fffff
 800e338:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e33c:	f04f 0200 	mov.w	r2, #0
 800e340:	da05      	bge.n	800e34e <__ieee754_pow+0x3de>
 800e342:	4bd3      	ldr	r3, [pc, #844]	; (800e690 <__ieee754_pow+0x720>)
 800e344:	f7f2 f960 	bl	8000608 <__aeabi_dmul>
 800e348:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e34c:	460c      	mov	r4, r1
 800e34e:	1523      	asrs	r3, r4, #20
 800e350:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e354:	4413      	add	r3, r2
 800e356:	9309      	str	r3, [sp, #36]	; 0x24
 800e358:	4bce      	ldr	r3, [pc, #824]	; (800e694 <__ieee754_pow+0x724>)
 800e35a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e35e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e362:	429c      	cmp	r4, r3
 800e364:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e368:	dd08      	ble.n	800e37c <__ieee754_pow+0x40c>
 800e36a:	4bcb      	ldr	r3, [pc, #812]	; (800e698 <__ieee754_pow+0x728>)
 800e36c:	429c      	cmp	r4, r3
 800e36e:	f340 815e 	ble.w	800e62e <__ieee754_pow+0x6be>
 800e372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e374:	3301      	adds	r3, #1
 800e376:	9309      	str	r3, [sp, #36]	; 0x24
 800e378:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e37c:	f04f 0a00 	mov.w	sl, #0
 800e380:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e384:	930c      	str	r3, [sp, #48]	; 0x30
 800e386:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e388:	4bc4      	ldr	r3, [pc, #784]	; (800e69c <__ieee754_pow+0x72c>)
 800e38a:	4413      	add	r3, r2
 800e38c:	ed93 7b00 	vldr	d7, [r3]
 800e390:	4629      	mov	r1, r5
 800e392:	ec53 2b17 	vmov	r2, r3, d7
 800e396:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e39a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e39e:	f7f1 ff7b 	bl	8000298 <__aeabi_dsub>
 800e3a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e3a6:	4606      	mov	r6, r0
 800e3a8:	460f      	mov	r7, r1
 800e3aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3ae:	f7f1 ff75 	bl	800029c <__adddf3>
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	2000      	movs	r0, #0
 800e3b8:	49b9      	ldr	r1, [pc, #740]	; (800e6a0 <__ieee754_pow+0x730>)
 800e3ba:	f7f2 fa4f 	bl	800085c <__aeabi_ddiv>
 800e3be:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e3c2:	4602      	mov	r2, r0
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	4630      	mov	r0, r6
 800e3c8:	4639      	mov	r1, r7
 800e3ca:	f7f2 f91d 	bl	8000608 <__aeabi_dmul>
 800e3ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e3d2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e3d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e3da:	2300      	movs	r3, #0
 800e3dc:	9302      	str	r3, [sp, #8]
 800e3de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e3e2:	106d      	asrs	r5, r5, #1
 800e3e4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e3e8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e3f2:	4640      	mov	r0, r8
 800e3f4:	4649      	mov	r1, r9
 800e3f6:	4614      	mov	r4, r2
 800e3f8:	461d      	mov	r5, r3
 800e3fa:	f7f2 f905 	bl	8000608 <__aeabi_dmul>
 800e3fe:	4602      	mov	r2, r0
 800e400:	460b      	mov	r3, r1
 800e402:	4630      	mov	r0, r6
 800e404:	4639      	mov	r1, r7
 800e406:	f7f1 ff47 	bl	8000298 <__aeabi_dsub>
 800e40a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e40e:	4606      	mov	r6, r0
 800e410:	460f      	mov	r7, r1
 800e412:	4620      	mov	r0, r4
 800e414:	4629      	mov	r1, r5
 800e416:	f7f1 ff3f 	bl	8000298 <__aeabi_dsub>
 800e41a:	4602      	mov	r2, r0
 800e41c:	460b      	mov	r3, r1
 800e41e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e422:	f7f1 ff39 	bl	8000298 <__aeabi_dsub>
 800e426:	4642      	mov	r2, r8
 800e428:	464b      	mov	r3, r9
 800e42a:	f7f2 f8ed 	bl	8000608 <__aeabi_dmul>
 800e42e:	4602      	mov	r2, r0
 800e430:	460b      	mov	r3, r1
 800e432:	4630      	mov	r0, r6
 800e434:	4639      	mov	r1, r7
 800e436:	f7f1 ff2f 	bl	8000298 <__aeabi_dsub>
 800e43a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e43e:	f7f2 f8e3 	bl	8000608 <__aeabi_dmul>
 800e442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e446:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e44a:	4610      	mov	r0, r2
 800e44c:	4619      	mov	r1, r3
 800e44e:	f7f2 f8db 	bl	8000608 <__aeabi_dmul>
 800e452:	a37b      	add	r3, pc, #492	; (adr r3, 800e640 <__ieee754_pow+0x6d0>)
 800e454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e458:	4604      	mov	r4, r0
 800e45a:	460d      	mov	r5, r1
 800e45c:	f7f2 f8d4 	bl	8000608 <__aeabi_dmul>
 800e460:	a379      	add	r3, pc, #484	; (adr r3, 800e648 <__ieee754_pow+0x6d8>)
 800e462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e466:	f7f1 ff19 	bl	800029c <__adddf3>
 800e46a:	4622      	mov	r2, r4
 800e46c:	462b      	mov	r3, r5
 800e46e:	f7f2 f8cb 	bl	8000608 <__aeabi_dmul>
 800e472:	a377      	add	r3, pc, #476	; (adr r3, 800e650 <__ieee754_pow+0x6e0>)
 800e474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e478:	f7f1 ff10 	bl	800029c <__adddf3>
 800e47c:	4622      	mov	r2, r4
 800e47e:	462b      	mov	r3, r5
 800e480:	f7f2 f8c2 	bl	8000608 <__aeabi_dmul>
 800e484:	a374      	add	r3, pc, #464	; (adr r3, 800e658 <__ieee754_pow+0x6e8>)
 800e486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48a:	f7f1 ff07 	bl	800029c <__adddf3>
 800e48e:	4622      	mov	r2, r4
 800e490:	462b      	mov	r3, r5
 800e492:	f7f2 f8b9 	bl	8000608 <__aeabi_dmul>
 800e496:	a372      	add	r3, pc, #456	; (adr r3, 800e660 <__ieee754_pow+0x6f0>)
 800e498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49c:	f7f1 fefe 	bl	800029c <__adddf3>
 800e4a0:	4622      	mov	r2, r4
 800e4a2:	462b      	mov	r3, r5
 800e4a4:	f7f2 f8b0 	bl	8000608 <__aeabi_dmul>
 800e4a8:	a36f      	add	r3, pc, #444	; (adr r3, 800e668 <__ieee754_pow+0x6f8>)
 800e4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ae:	f7f1 fef5 	bl	800029c <__adddf3>
 800e4b2:	4622      	mov	r2, r4
 800e4b4:	4606      	mov	r6, r0
 800e4b6:	460f      	mov	r7, r1
 800e4b8:	462b      	mov	r3, r5
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	4629      	mov	r1, r5
 800e4be:	f7f2 f8a3 	bl	8000608 <__aeabi_dmul>
 800e4c2:	4602      	mov	r2, r0
 800e4c4:	460b      	mov	r3, r1
 800e4c6:	4630      	mov	r0, r6
 800e4c8:	4639      	mov	r1, r7
 800e4ca:	f7f2 f89d 	bl	8000608 <__aeabi_dmul>
 800e4ce:	4642      	mov	r2, r8
 800e4d0:	4604      	mov	r4, r0
 800e4d2:	460d      	mov	r5, r1
 800e4d4:	464b      	mov	r3, r9
 800e4d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4da:	f7f1 fedf 	bl	800029c <__adddf3>
 800e4de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e4e2:	f7f2 f891 	bl	8000608 <__aeabi_dmul>
 800e4e6:	4622      	mov	r2, r4
 800e4e8:	462b      	mov	r3, r5
 800e4ea:	f7f1 fed7 	bl	800029c <__adddf3>
 800e4ee:	4642      	mov	r2, r8
 800e4f0:	4606      	mov	r6, r0
 800e4f2:	460f      	mov	r7, r1
 800e4f4:	464b      	mov	r3, r9
 800e4f6:	4640      	mov	r0, r8
 800e4f8:	4649      	mov	r1, r9
 800e4fa:	f7f2 f885 	bl	8000608 <__aeabi_dmul>
 800e4fe:	2200      	movs	r2, #0
 800e500:	4b68      	ldr	r3, [pc, #416]	; (800e6a4 <__ieee754_pow+0x734>)
 800e502:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e506:	f7f1 fec9 	bl	800029c <__adddf3>
 800e50a:	4632      	mov	r2, r6
 800e50c:	463b      	mov	r3, r7
 800e50e:	f7f1 fec5 	bl	800029c <__adddf3>
 800e512:	9802      	ldr	r0, [sp, #8]
 800e514:	460d      	mov	r5, r1
 800e516:	4604      	mov	r4, r0
 800e518:	4602      	mov	r2, r0
 800e51a:	460b      	mov	r3, r1
 800e51c:	4640      	mov	r0, r8
 800e51e:	4649      	mov	r1, r9
 800e520:	f7f2 f872 	bl	8000608 <__aeabi_dmul>
 800e524:	2200      	movs	r2, #0
 800e526:	4680      	mov	r8, r0
 800e528:	4689      	mov	r9, r1
 800e52a:	4b5e      	ldr	r3, [pc, #376]	; (800e6a4 <__ieee754_pow+0x734>)
 800e52c:	4620      	mov	r0, r4
 800e52e:	4629      	mov	r1, r5
 800e530:	f7f1 feb2 	bl	8000298 <__aeabi_dsub>
 800e534:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e538:	f7f1 feae 	bl	8000298 <__aeabi_dsub>
 800e53c:	4602      	mov	r2, r0
 800e53e:	460b      	mov	r3, r1
 800e540:	4630      	mov	r0, r6
 800e542:	4639      	mov	r1, r7
 800e544:	f7f1 fea8 	bl	8000298 <__aeabi_dsub>
 800e548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e54c:	f7f2 f85c 	bl	8000608 <__aeabi_dmul>
 800e550:	4622      	mov	r2, r4
 800e552:	4606      	mov	r6, r0
 800e554:	460f      	mov	r7, r1
 800e556:	462b      	mov	r3, r5
 800e558:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e55c:	f7f2 f854 	bl	8000608 <__aeabi_dmul>
 800e560:	4602      	mov	r2, r0
 800e562:	460b      	mov	r3, r1
 800e564:	4630      	mov	r0, r6
 800e566:	4639      	mov	r1, r7
 800e568:	f7f1 fe98 	bl	800029c <__adddf3>
 800e56c:	4606      	mov	r6, r0
 800e56e:	460f      	mov	r7, r1
 800e570:	4602      	mov	r2, r0
 800e572:	460b      	mov	r3, r1
 800e574:	4640      	mov	r0, r8
 800e576:	4649      	mov	r1, r9
 800e578:	f7f1 fe90 	bl	800029c <__adddf3>
 800e57c:	9802      	ldr	r0, [sp, #8]
 800e57e:	a33c      	add	r3, pc, #240	; (adr r3, 800e670 <__ieee754_pow+0x700>)
 800e580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e584:	4604      	mov	r4, r0
 800e586:	460d      	mov	r5, r1
 800e588:	f7f2 f83e 	bl	8000608 <__aeabi_dmul>
 800e58c:	4642      	mov	r2, r8
 800e58e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e592:	464b      	mov	r3, r9
 800e594:	4620      	mov	r0, r4
 800e596:	4629      	mov	r1, r5
 800e598:	f7f1 fe7e 	bl	8000298 <__aeabi_dsub>
 800e59c:	4602      	mov	r2, r0
 800e59e:	460b      	mov	r3, r1
 800e5a0:	4630      	mov	r0, r6
 800e5a2:	4639      	mov	r1, r7
 800e5a4:	f7f1 fe78 	bl	8000298 <__aeabi_dsub>
 800e5a8:	a333      	add	r3, pc, #204	; (adr r3, 800e678 <__ieee754_pow+0x708>)
 800e5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ae:	f7f2 f82b 	bl	8000608 <__aeabi_dmul>
 800e5b2:	a333      	add	r3, pc, #204	; (adr r3, 800e680 <__ieee754_pow+0x710>)
 800e5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b8:	4606      	mov	r6, r0
 800e5ba:	460f      	mov	r7, r1
 800e5bc:	4620      	mov	r0, r4
 800e5be:	4629      	mov	r1, r5
 800e5c0:	f7f2 f822 	bl	8000608 <__aeabi_dmul>
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	4630      	mov	r0, r6
 800e5ca:	4639      	mov	r1, r7
 800e5cc:	f7f1 fe66 	bl	800029c <__adddf3>
 800e5d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e5d2:	4b35      	ldr	r3, [pc, #212]	; (800e6a8 <__ieee754_pow+0x738>)
 800e5d4:	4413      	add	r3, r2
 800e5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5da:	f7f1 fe5f 	bl	800029c <__adddf3>
 800e5de:	4604      	mov	r4, r0
 800e5e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5e2:	460d      	mov	r5, r1
 800e5e4:	f7f1 ffa6 	bl	8000534 <__aeabi_i2d>
 800e5e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e5ea:	4b30      	ldr	r3, [pc, #192]	; (800e6ac <__ieee754_pow+0x73c>)
 800e5ec:	4413      	add	r3, r2
 800e5ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e5f2:	4606      	mov	r6, r0
 800e5f4:	460f      	mov	r7, r1
 800e5f6:	4622      	mov	r2, r4
 800e5f8:	462b      	mov	r3, r5
 800e5fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5fe:	f7f1 fe4d 	bl	800029c <__adddf3>
 800e602:	4642      	mov	r2, r8
 800e604:	464b      	mov	r3, r9
 800e606:	f7f1 fe49 	bl	800029c <__adddf3>
 800e60a:	4632      	mov	r2, r6
 800e60c:	463b      	mov	r3, r7
 800e60e:	f7f1 fe45 	bl	800029c <__adddf3>
 800e612:	9802      	ldr	r0, [sp, #8]
 800e614:	4632      	mov	r2, r6
 800e616:	463b      	mov	r3, r7
 800e618:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e61c:	f7f1 fe3c 	bl	8000298 <__aeabi_dsub>
 800e620:	4642      	mov	r2, r8
 800e622:	464b      	mov	r3, r9
 800e624:	f7f1 fe38 	bl	8000298 <__aeabi_dsub>
 800e628:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e62c:	e607      	b.n	800e23e <__ieee754_pow+0x2ce>
 800e62e:	f04f 0a01 	mov.w	sl, #1
 800e632:	e6a5      	b.n	800e380 <__ieee754_pow+0x410>
 800e634:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800e688 <__ieee754_pow+0x718>
 800e638:	e613      	b.n	800e262 <__ieee754_pow+0x2f2>
 800e63a:	bf00      	nop
 800e63c:	f3af 8000 	nop.w
 800e640:	4a454eef 	.word	0x4a454eef
 800e644:	3fca7e28 	.word	0x3fca7e28
 800e648:	93c9db65 	.word	0x93c9db65
 800e64c:	3fcd864a 	.word	0x3fcd864a
 800e650:	a91d4101 	.word	0xa91d4101
 800e654:	3fd17460 	.word	0x3fd17460
 800e658:	518f264d 	.word	0x518f264d
 800e65c:	3fd55555 	.word	0x3fd55555
 800e660:	db6fabff 	.word	0xdb6fabff
 800e664:	3fdb6db6 	.word	0x3fdb6db6
 800e668:	33333303 	.word	0x33333303
 800e66c:	3fe33333 	.word	0x3fe33333
 800e670:	e0000000 	.word	0xe0000000
 800e674:	3feec709 	.word	0x3feec709
 800e678:	dc3a03fd 	.word	0xdc3a03fd
 800e67c:	3feec709 	.word	0x3feec709
 800e680:	145b01f5 	.word	0x145b01f5
 800e684:	be3e2fe0 	.word	0xbe3e2fe0
 800e688:	00000000 	.word	0x00000000
 800e68c:	3ff00000 	.word	0x3ff00000
 800e690:	43400000 	.word	0x43400000
 800e694:	0003988e 	.word	0x0003988e
 800e698:	000bb679 	.word	0x000bb679
 800e69c:	0800f758 	.word	0x0800f758
 800e6a0:	3ff00000 	.word	0x3ff00000
 800e6a4:	40080000 	.word	0x40080000
 800e6a8:	0800f778 	.word	0x0800f778
 800e6ac:	0800f768 	.word	0x0800f768
 800e6b0:	a3b4      	add	r3, pc, #720	; (adr r3, 800e984 <__ieee754_pow+0xa14>)
 800e6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b6:	4640      	mov	r0, r8
 800e6b8:	4649      	mov	r1, r9
 800e6ba:	f7f1 fdef 	bl	800029c <__adddf3>
 800e6be:	4622      	mov	r2, r4
 800e6c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e6c4:	462b      	mov	r3, r5
 800e6c6:	4630      	mov	r0, r6
 800e6c8:	4639      	mov	r1, r7
 800e6ca:	f7f1 fde5 	bl	8000298 <__aeabi_dsub>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e6d6:	f7f2 fa27 	bl	8000b28 <__aeabi_dcmpgt>
 800e6da:	2800      	cmp	r0, #0
 800e6dc:	f47f adfe 	bne.w	800e2dc <__ieee754_pow+0x36c>
 800e6e0:	4aa3      	ldr	r2, [pc, #652]	; (800e970 <__ieee754_pow+0xa00>)
 800e6e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	f340 810a 	ble.w	800e900 <__ieee754_pow+0x990>
 800e6ec:	151b      	asrs	r3, r3, #20
 800e6ee:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800e6f2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800e6f6:	fa4a f303 	asr.w	r3, sl, r3
 800e6fa:	445b      	add	r3, fp
 800e6fc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e700:	4e9c      	ldr	r6, [pc, #624]	; (800e974 <__ieee754_pow+0xa04>)
 800e702:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e706:	4116      	asrs	r6, r2
 800e708:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800e70c:	2000      	movs	r0, #0
 800e70e:	ea23 0106 	bic.w	r1, r3, r6
 800e712:	f1c2 0214 	rsb	r2, r2, #20
 800e716:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800e71a:	fa4a fa02 	asr.w	sl, sl, r2
 800e71e:	f1bb 0f00 	cmp.w	fp, #0
 800e722:	4602      	mov	r2, r0
 800e724:	460b      	mov	r3, r1
 800e726:	4620      	mov	r0, r4
 800e728:	4629      	mov	r1, r5
 800e72a:	bfb8      	it	lt
 800e72c:	f1ca 0a00 	rsblt	sl, sl, #0
 800e730:	f7f1 fdb2 	bl	8000298 <__aeabi_dsub>
 800e734:	e9cd 0100 	strd	r0, r1, [sp]
 800e738:	4642      	mov	r2, r8
 800e73a:	464b      	mov	r3, r9
 800e73c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e740:	f7f1 fdac 	bl	800029c <__adddf3>
 800e744:	2000      	movs	r0, #0
 800e746:	a378      	add	r3, pc, #480	; (adr r3, 800e928 <__ieee754_pow+0x9b8>)
 800e748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74c:	4604      	mov	r4, r0
 800e74e:	460d      	mov	r5, r1
 800e750:	f7f1 ff5a 	bl	8000608 <__aeabi_dmul>
 800e754:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e758:	4606      	mov	r6, r0
 800e75a:	460f      	mov	r7, r1
 800e75c:	4620      	mov	r0, r4
 800e75e:	4629      	mov	r1, r5
 800e760:	f7f1 fd9a 	bl	8000298 <__aeabi_dsub>
 800e764:	4602      	mov	r2, r0
 800e766:	460b      	mov	r3, r1
 800e768:	4640      	mov	r0, r8
 800e76a:	4649      	mov	r1, r9
 800e76c:	f7f1 fd94 	bl	8000298 <__aeabi_dsub>
 800e770:	a36f      	add	r3, pc, #444	; (adr r3, 800e930 <__ieee754_pow+0x9c0>)
 800e772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e776:	f7f1 ff47 	bl	8000608 <__aeabi_dmul>
 800e77a:	a36f      	add	r3, pc, #444	; (adr r3, 800e938 <__ieee754_pow+0x9c8>)
 800e77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e780:	4680      	mov	r8, r0
 800e782:	4689      	mov	r9, r1
 800e784:	4620      	mov	r0, r4
 800e786:	4629      	mov	r1, r5
 800e788:	f7f1 ff3e 	bl	8000608 <__aeabi_dmul>
 800e78c:	4602      	mov	r2, r0
 800e78e:	460b      	mov	r3, r1
 800e790:	4640      	mov	r0, r8
 800e792:	4649      	mov	r1, r9
 800e794:	f7f1 fd82 	bl	800029c <__adddf3>
 800e798:	4604      	mov	r4, r0
 800e79a:	460d      	mov	r5, r1
 800e79c:	4602      	mov	r2, r0
 800e79e:	460b      	mov	r3, r1
 800e7a0:	4630      	mov	r0, r6
 800e7a2:	4639      	mov	r1, r7
 800e7a4:	f7f1 fd7a 	bl	800029c <__adddf3>
 800e7a8:	4632      	mov	r2, r6
 800e7aa:	463b      	mov	r3, r7
 800e7ac:	4680      	mov	r8, r0
 800e7ae:	4689      	mov	r9, r1
 800e7b0:	f7f1 fd72 	bl	8000298 <__aeabi_dsub>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	4620      	mov	r0, r4
 800e7ba:	4629      	mov	r1, r5
 800e7bc:	f7f1 fd6c 	bl	8000298 <__aeabi_dsub>
 800e7c0:	4642      	mov	r2, r8
 800e7c2:	4606      	mov	r6, r0
 800e7c4:	460f      	mov	r7, r1
 800e7c6:	464b      	mov	r3, r9
 800e7c8:	4640      	mov	r0, r8
 800e7ca:	4649      	mov	r1, r9
 800e7cc:	f7f1 ff1c 	bl	8000608 <__aeabi_dmul>
 800e7d0:	a35b      	add	r3, pc, #364	; (adr r3, 800e940 <__ieee754_pow+0x9d0>)
 800e7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d6:	4604      	mov	r4, r0
 800e7d8:	460d      	mov	r5, r1
 800e7da:	f7f1 ff15 	bl	8000608 <__aeabi_dmul>
 800e7de:	a35a      	add	r3, pc, #360	; (adr r3, 800e948 <__ieee754_pow+0x9d8>)
 800e7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e4:	f7f1 fd58 	bl	8000298 <__aeabi_dsub>
 800e7e8:	4622      	mov	r2, r4
 800e7ea:	462b      	mov	r3, r5
 800e7ec:	f7f1 ff0c 	bl	8000608 <__aeabi_dmul>
 800e7f0:	a357      	add	r3, pc, #348	; (adr r3, 800e950 <__ieee754_pow+0x9e0>)
 800e7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f6:	f7f1 fd51 	bl	800029c <__adddf3>
 800e7fa:	4622      	mov	r2, r4
 800e7fc:	462b      	mov	r3, r5
 800e7fe:	f7f1 ff03 	bl	8000608 <__aeabi_dmul>
 800e802:	a355      	add	r3, pc, #340	; (adr r3, 800e958 <__ieee754_pow+0x9e8>)
 800e804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e808:	f7f1 fd46 	bl	8000298 <__aeabi_dsub>
 800e80c:	4622      	mov	r2, r4
 800e80e:	462b      	mov	r3, r5
 800e810:	f7f1 fefa 	bl	8000608 <__aeabi_dmul>
 800e814:	a352      	add	r3, pc, #328	; (adr r3, 800e960 <__ieee754_pow+0x9f0>)
 800e816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e81a:	f7f1 fd3f 	bl	800029c <__adddf3>
 800e81e:	4622      	mov	r2, r4
 800e820:	462b      	mov	r3, r5
 800e822:	f7f1 fef1 	bl	8000608 <__aeabi_dmul>
 800e826:	4602      	mov	r2, r0
 800e828:	460b      	mov	r3, r1
 800e82a:	4640      	mov	r0, r8
 800e82c:	4649      	mov	r1, r9
 800e82e:	f7f1 fd33 	bl	8000298 <__aeabi_dsub>
 800e832:	4604      	mov	r4, r0
 800e834:	460d      	mov	r5, r1
 800e836:	4602      	mov	r2, r0
 800e838:	460b      	mov	r3, r1
 800e83a:	4640      	mov	r0, r8
 800e83c:	4649      	mov	r1, r9
 800e83e:	f7f1 fee3 	bl	8000608 <__aeabi_dmul>
 800e842:	2200      	movs	r2, #0
 800e844:	e9cd 0100 	strd	r0, r1, [sp]
 800e848:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e84c:	4620      	mov	r0, r4
 800e84e:	4629      	mov	r1, r5
 800e850:	f7f1 fd22 	bl	8000298 <__aeabi_dsub>
 800e854:	4602      	mov	r2, r0
 800e856:	460b      	mov	r3, r1
 800e858:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e85c:	f7f1 fffe 	bl	800085c <__aeabi_ddiv>
 800e860:	4632      	mov	r2, r6
 800e862:	4604      	mov	r4, r0
 800e864:	460d      	mov	r5, r1
 800e866:	463b      	mov	r3, r7
 800e868:	4640      	mov	r0, r8
 800e86a:	4649      	mov	r1, r9
 800e86c:	f7f1 fecc 	bl	8000608 <__aeabi_dmul>
 800e870:	4632      	mov	r2, r6
 800e872:	463b      	mov	r3, r7
 800e874:	f7f1 fd12 	bl	800029c <__adddf3>
 800e878:	4602      	mov	r2, r0
 800e87a:	460b      	mov	r3, r1
 800e87c:	4620      	mov	r0, r4
 800e87e:	4629      	mov	r1, r5
 800e880:	f7f1 fd0a 	bl	8000298 <__aeabi_dsub>
 800e884:	4642      	mov	r2, r8
 800e886:	464b      	mov	r3, r9
 800e888:	f7f1 fd06 	bl	8000298 <__aeabi_dsub>
 800e88c:	4602      	mov	r2, r0
 800e88e:	460b      	mov	r3, r1
 800e890:	2000      	movs	r0, #0
 800e892:	4939      	ldr	r1, [pc, #228]	; (800e978 <__ieee754_pow+0xa08>)
 800e894:	f7f1 fd00 	bl	8000298 <__aeabi_dsub>
 800e898:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800e89c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	460b      	mov	r3, r1
 800e8a4:	da2f      	bge.n	800e906 <__ieee754_pow+0x996>
 800e8a6:	4650      	mov	r0, sl
 800e8a8:	ec43 2b10 	vmov	d0, r2, r3
 800e8ac:	f000 fb60 	bl	800ef70 <scalbn>
 800e8b0:	ec51 0b10 	vmov	r0, r1, d0
 800e8b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e8b8:	f7ff bbf1 	b.w	800e09e <__ieee754_pow+0x12e>
 800e8bc:	4b2f      	ldr	r3, [pc, #188]	; (800e97c <__ieee754_pow+0xa0c>)
 800e8be:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e8c2:	429e      	cmp	r6, r3
 800e8c4:	f77f af0c 	ble.w	800e6e0 <__ieee754_pow+0x770>
 800e8c8:	4b2d      	ldr	r3, [pc, #180]	; (800e980 <__ieee754_pow+0xa10>)
 800e8ca:	440b      	add	r3, r1
 800e8cc:	4303      	orrs	r3, r0
 800e8ce:	d00b      	beq.n	800e8e8 <__ieee754_pow+0x978>
 800e8d0:	a325      	add	r3, pc, #148	; (adr r3, 800e968 <__ieee754_pow+0x9f8>)
 800e8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8da:	f7f1 fe95 	bl	8000608 <__aeabi_dmul>
 800e8de:	a322      	add	r3, pc, #136	; (adr r3, 800e968 <__ieee754_pow+0x9f8>)
 800e8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e4:	f7ff bbdb 	b.w	800e09e <__ieee754_pow+0x12e>
 800e8e8:	4622      	mov	r2, r4
 800e8ea:	462b      	mov	r3, r5
 800e8ec:	f7f1 fcd4 	bl	8000298 <__aeabi_dsub>
 800e8f0:	4642      	mov	r2, r8
 800e8f2:	464b      	mov	r3, r9
 800e8f4:	f7f2 f90e 	bl	8000b14 <__aeabi_dcmpge>
 800e8f8:	2800      	cmp	r0, #0
 800e8fa:	f43f aef1 	beq.w	800e6e0 <__ieee754_pow+0x770>
 800e8fe:	e7e7      	b.n	800e8d0 <__ieee754_pow+0x960>
 800e900:	f04f 0a00 	mov.w	sl, #0
 800e904:	e718      	b.n	800e738 <__ieee754_pow+0x7c8>
 800e906:	4621      	mov	r1, r4
 800e908:	e7d4      	b.n	800e8b4 <__ieee754_pow+0x944>
 800e90a:	2000      	movs	r0, #0
 800e90c:	491a      	ldr	r1, [pc, #104]	; (800e978 <__ieee754_pow+0xa08>)
 800e90e:	f7ff bb8f 	b.w	800e030 <__ieee754_pow+0xc0>
 800e912:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e916:	f7ff bb8b 	b.w	800e030 <__ieee754_pow+0xc0>
 800e91a:	4630      	mov	r0, r6
 800e91c:	4639      	mov	r1, r7
 800e91e:	f7ff bb87 	b.w	800e030 <__ieee754_pow+0xc0>
 800e922:	4693      	mov	fp, r2
 800e924:	f7ff bb98 	b.w	800e058 <__ieee754_pow+0xe8>
 800e928:	00000000 	.word	0x00000000
 800e92c:	3fe62e43 	.word	0x3fe62e43
 800e930:	fefa39ef 	.word	0xfefa39ef
 800e934:	3fe62e42 	.word	0x3fe62e42
 800e938:	0ca86c39 	.word	0x0ca86c39
 800e93c:	be205c61 	.word	0xbe205c61
 800e940:	72bea4d0 	.word	0x72bea4d0
 800e944:	3e663769 	.word	0x3e663769
 800e948:	c5d26bf1 	.word	0xc5d26bf1
 800e94c:	3ebbbd41 	.word	0x3ebbbd41
 800e950:	af25de2c 	.word	0xaf25de2c
 800e954:	3f11566a 	.word	0x3f11566a
 800e958:	16bebd93 	.word	0x16bebd93
 800e95c:	3f66c16c 	.word	0x3f66c16c
 800e960:	5555553e 	.word	0x5555553e
 800e964:	3fc55555 	.word	0x3fc55555
 800e968:	c2f8f359 	.word	0xc2f8f359
 800e96c:	01a56e1f 	.word	0x01a56e1f
 800e970:	3fe00000 	.word	0x3fe00000
 800e974:	000fffff 	.word	0x000fffff
 800e978:	3ff00000 	.word	0x3ff00000
 800e97c:	4090cbff 	.word	0x4090cbff
 800e980:	3f6f3400 	.word	0x3f6f3400
 800e984:	652b82fe 	.word	0x652b82fe
 800e988:	3c971547 	.word	0x3c971547

0800e98c <__ieee754_sqrt>:
 800e98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e990:	4955      	ldr	r1, [pc, #340]	; (800eae8 <__ieee754_sqrt+0x15c>)
 800e992:	ec55 4b10 	vmov	r4, r5, d0
 800e996:	43a9      	bics	r1, r5
 800e998:	462b      	mov	r3, r5
 800e99a:	462a      	mov	r2, r5
 800e99c:	d112      	bne.n	800e9c4 <__ieee754_sqrt+0x38>
 800e99e:	ee10 2a10 	vmov	r2, s0
 800e9a2:	ee10 0a10 	vmov	r0, s0
 800e9a6:	4629      	mov	r1, r5
 800e9a8:	f7f1 fe2e 	bl	8000608 <__aeabi_dmul>
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	460b      	mov	r3, r1
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	4629      	mov	r1, r5
 800e9b4:	f7f1 fc72 	bl	800029c <__adddf3>
 800e9b8:	4604      	mov	r4, r0
 800e9ba:	460d      	mov	r5, r1
 800e9bc:	ec45 4b10 	vmov	d0, r4, r5
 800e9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9c4:	2d00      	cmp	r5, #0
 800e9c6:	ee10 0a10 	vmov	r0, s0
 800e9ca:	4621      	mov	r1, r4
 800e9cc:	dc0f      	bgt.n	800e9ee <__ieee754_sqrt+0x62>
 800e9ce:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e9d2:	4330      	orrs	r0, r6
 800e9d4:	d0f2      	beq.n	800e9bc <__ieee754_sqrt+0x30>
 800e9d6:	b155      	cbz	r5, 800e9ee <__ieee754_sqrt+0x62>
 800e9d8:	ee10 2a10 	vmov	r2, s0
 800e9dc:	4620      	mov	r0, r4
 800e9de:	4629      	mov	r1, r5
 800e9e0:	f7f1 fc5a 	bl	8000298 <__aeabi_dsub>
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	f7f1 ff38 	bl	800085c <__aeabi_ddiv>
 800e9ec:	e7e4      	b.n	800e9b8 <__ieee754_sqrt+0x2c>
 800e9ee:	151b      	asrs	r3, r3, #20
 800e9f0:	d073      	beq.n	800eada <__ieee754_sqrt+0x14e>
 800e9f2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e9f6:	07dd      	lsls	r5, r3, #31
 800e9f8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e9fc:	bf48      	it	mi
 800e9fe:	0fc8      	lsrmi	r0, r1, #31
 800ea00:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ea04:	bf44      	itt	mi
 800ea06:	0049      	lslmi	r1, r1, #1
 800ea08:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800ea0c:	2500      	movs	r5, #0
 800ea0e:	1058      	asrs	r0, r3, #1
 800ea10:	0fcb      	lsrs	r3, r1, #31
 800ea12:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800ea16:	0049      	lsls	r1, r1, #1
 800ea18:	2316      	movs	r3, #22
 800ea1a:	462c      	mov	r4, r5
 800ea1c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800ea20:	19a7      	adds	r7, r4, r6
 800ea22:	4297      	cmp	r7, r2
 800ea24:	bfde      	ittt	le
 800ea26:	19bc      	addle	r4, r7, r6
 800ea28:	1bd2      	suble	r2, r2, r7
 800ea2a:	19ad      	addle	r5, r5, r6
 800ea2c:	0fcf      	lsrs	r7, r1, #31
 800ea2e:	3b01      	subs	r3, #1
 800ea30:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800ea34:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ea38:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ea3c:	d1f0      	bne.n	800ea20 <__ieee754_sqrt+0x94>
 800ea3e:	f04f 0c20 	mov.w	ip, #32
 800ea42:	469e      	mov	lr, r3
 800ea44:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ea48:	42a2      	cmp	r2, r4
 800ea4a:	eb06 070e 	add.w	r7, r6, lr
 800ea4e:	dc02      	bgt.n	800ea56 <__ieee754_sqrt+0xca>
 800ea50:	d112      	bne.n	800ea78 <__ieee754_sqrt+0xec>
 800ea52:	428f      	cmp	r7, r1
 800ea54:	d810      	bhi.n	800ea78 <__ieee754_sqrt+0xec>
 800ea56:	2f00      	cmp	r7, #0
 800ea58:	eb07 0e06 	add.w	lr, r7, r6
 800ea5c:	da42      	bge.n	800eae4 <__ieee754_sqrt+0x158>
 800ea5e:	f1be 0f00 	cmp.w	lr, #0
 800ea62:	db3f      	blt.n	800eae4 <__ieee754_sqrt+0x158>
 800ea64:	f104 0801 	add.w	r8, r4, #1
 800ea68:	1b12      	subs	r2, r2, r4
 800ea6a:	428f      	cmp	r7, r1
 800ea6c:	bf88      	it	hi
 800ea6e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ea72:	1bc9      	subs	r1, r1, r7
 800ea74:	4433      	add	r3, r6
 800ea76:	4644      	mov	r4, r8
 800ea78:	0052      	lsls	r2, r2, #1
 800ea7a:	f1bc 0c01 	subs.w	ip, ip, #1
 800ea7e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800ea82:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ea86:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ea8a:	d1dd      	bne.n	800ea48 <__ieee754_sqrt+0xbc>
 800ea8c:	430a      	orrs	r2, r1
 800ea8e:	d006      	beq.n	800ea9e <__ieee754_sqrt+0x112>
 800ea90:	1c5c      	adds	r4, r3, #1
 800ea92:	bf13      	iteet	ne
 800ea94:	3301      	addne	r3, #1
 800ea96:	3501      	addeq	r5, #1
 800ea98:	4663      	moveq	r3, ip
 800ea9a:	f023 0301 	bicne.w	r3, r3, #1
 800ea9e:	106a      	asrs	r2, r5, #1
 800eaa0:	085b      	lsrs	r3, r3, #1
 800eaa2:	07e9      	lsls	r1, r5, #31
 800eaa4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800eaa8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800eaac:	bf48      	it	mi
 800eaae:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800eab2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800eab6:	461c      	mov	r4, r3
 800eab8:	e780      	b.n	800e9bc <__ieee754_sqrt+0x30>
 800eaba:	0aca      	lsrs	r2, r1, #11
 800eabc:	3815      	subs	r0, #21
 800eabe:	0549      	lsls	r1, r1, #21
 800eac0:	2a00      	cmp	r2, #0
 800eac2:	d0fa      	beq.n	800eaba <__ieee754_sqrt+0x12e>
 800eac4:	02d6      	lsls	r6, r2, #11
 800eac6:	d50a      	bpl.n	800eade <__ieee754_sqrt+0x152>
 800eac8:	f1c3 0420 	rsb	r4, r3, #32
 800eacc:	fa21 f404 	lsr.w	r4, r1, r4
 800ead0:	1e5d      	subs	r5, r3, #1
 800ead2:	4099      	lsls	r1, r3
 800ead4:	4322      	orrs	r2, r4
 800ead6:	1b43      	subs	r3, r0, r5
 800ead8:	e78b      	b.n	800e9f2 <__ieee754_sqrt+0x66>
 800eada:	4618      	mov	r0, r3
 800eadc:	e7f0      	b.n	800eac0 <__ieee754_sqrt+0x134>
 800eade:	0052      	lsls	r2, r2, #1
 800eae0:	3301      	adds	r3, #1
 800eae2:	e7ef      	b.n	800eac4 <__ieee754_sqrt+0x138>
 800eae4:	46a0      	mov	r8, r4
 800eae6:	e7bf      	b.n	800ea68 <__ieee754_sqrt+0xdc>
 800eae8:	7ff00000 	.word	0x7ff00000
 800eaec:	00000000 	.word	0x00000000

0800eaf0 <atan>:
 800eaf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaf4:	ec55 4b10 	vmov	r4, r5, d0
 800eaf8:	4bc3      	ldr	r3, [pc, #780]	; (800ee08 <atan+0x318>)
 800eafa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800eafe:	429e      	cmp	r6, r3
 800eb00:	46ab      	mov	fp, r5
 800eb02:	dd18      	ble.n	800eb36 <atan+0x46>
 800eb04:	4bc1      	ldr	r3, [pc, #772]	; (800ee0c <atan+0x31c>)
 800eb06:	429e      	cmp	r6, r3
 800eb08:	dc01      	bgt.n	800eb0e <atan+0x1e>
 800eb0a:	d109      	bne.n	800eb20 <atan+0x30>
 800eb0c:	b144      	cbz	r4, 800eb20 <atan+0x30>
 800eb0e:	4622      	mov	r2, r4
 800eb10:	462b      	mov	r3, r5
 800eb12:	4620      	mov	r0, r4
 800eb14:	4629      	mov	r1, r5
 800eb16:	f7f1 fbc1 	bl	800029c <__adddf3>
 800eb1a:	4604      	mov	r4, r0
 800eb1c:	460d      	mov	r5, r1
 800eb1e:	e006      	b.n	800eb2e <atan+0x3e>
 800eb20:	f1bb 0f00 	cmp.w	fp, #0
 800eb24:	f340 8131 	ble.w	800ed8a <atan+0x29a>
 800eb28:	a59b      	add	r5, pc, #620	; (adr r5, 800ed98 <atan+0x2a8>)
 800eb2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800eb2e:	ec45 4b10 	vmov	d0, r4, r5
 800eb32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb36:	4bb6      	ldr	r3, [pc, #728]	; (800ee10 <atan+0x320>)
 800eb38:	429e      	cmp	r6, r3
 800eb3a:	dc14      	bgt.n	800eb66 <atan+0x76>
 800eb3c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800eb40:	429e      	cmp	r6, r3
 800eb42:	dc0d      	bgt.n	800eb60 <atan+0x70>
 800eb44:	a396      	add	r3, pc, #600	; (adr r3, 800eda0 <atan+0x2b0>)
 800eb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4a:	ee10 0a10 	vmov	r0, s0
 800eb4e:	4629      	mov	r1, r5
 800eb50:	f7f1 fba4 	bl	800029c <__adddf3>
 800eb54:	2200      	movs	r2, #0
 800eb56:	4baf      	ldr	r3, [pc, #700]	; (800ee14 <atan+0x324>)
 800eb58:	f7f1 ffe6 	bl	8000b28 <__aeabi_dcmpgt>
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	d1e6      	bne.n	800eb2e <atan+0x3e>
 800eb60:	f04f 3aff 	mov.w	sl, #4294967295
 800eb64:	e02b      	b.n	800ebbe <atan+0xce>
 800eb66:	f000 f963 	bl	800ee30 <fabs>
 800eb6a:	4bab      	ldr	r3, [pc, #684]	; (800ee18 <atan+0x328>)
 800eb6c:	429e      	cmp	r6, r3
 800eb6e:	ec55 4b10 	vmov	r4, r5, d0
 800eb72:	f300 80bf 	bgt.w	800ecf4 <atan+0x204>
 800eb76:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800eb7a:	429e      	cmp	r6, r3
 800eb7c:	f300 80a0 	bgt.w	800ecc0 <atan+0x1d0>
 800eb80:	ee10 2a10 	vmov	r2, s0
 800eb84:	ee10 0a10 	vmov	r0, s0
 800eb88:	462b      	mov	r3, r5
 800eb8a:	4629      	mov	r1, r5
 800eb8c:	f7f1 fb86 	bl	800029c <__adddf3>
 800eb90:	2200      	movs	r2, #0
 800eb92:	4ba0      	ldr	r3, [pc, #640]	; (800ee14 <atan+0x324>)
 800eb94:	f7f1 fb80 	bl	8000298 <__aeabi_dsub>
 800eb98:	2200      	movs	r2, #0
 800eb9a:	4606      	mov	r6, r0
 800eb9c:	460f      	mov	r7, r1
 800eb9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eba2:	4620      	mov	r0, r4
 800eba4:	4629      	mov	r1, r5
 800eba6:	f7f1 fb79 	bl	800029c <__adddf3>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	460b      	mov	r3, r1
 800ebae:	4630      	mov	r0, r6
 800ebb0:	4639      	mov	r1, r7
 800ebb2:	f7f1 fe53 	bl	800085c <__aeabi_ddiv>
 800ebb6:	f04f 0a00 	mov.w	sl, #0
 800ebba:	4604      	mov	r4, r0
 800ebbc:	460d      	mov	r5, r1
 800ebbe:	4622      	mov	r2, r4
 800ebc0:	462b      	mov	r3, r5
 800ebc2:	4620      	mov	r0, r4
 800ebc4:	4629      	mov	r1, r5
 800ebc6:	f7f1 fd1f 	bl	8000608 <__aeabi_dmul>
 800ebca:	4602      	mov	r2, r0
 800ebcc:	460b      	mov	r3, r1
 800ebce:	4680      	mov	r8, r0
 800ebd0:	4689      	mov	r9, r1
 800ebd2:	f7f1 fd19 	bl	8000608 <__aeabi_dmul>
 800ebd6:	a374      	add	r3, pc, #464	; (adr r3, 800eda8 <atan+0x2b8>)
 800ebd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebdc:	4606      	mov	r6, r0
 800ebde:	460f      	mov	r7, r1
 800ebe0:	f7f1 fd12 	bl	8000608 <__aeabi_dmul>
 800ebe4:	a372      	add	r3, pc, #456	; (adr r3, 800edb0 <atan+0x2c0>)
 800ebe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebea:	f7f1 fb57 	bl	800029c <__adddf3>
 800ebee:	4632      	mov	r2, r6
 800ebf0:	463b      	mov	r3, r7
 800ebf2:	f7f1 fd09 	bl	8000608 <__aeabi_dmul>
 800ebf6:	a370      	add	r3, pc, #448	; (adr r3, 800edb8 <atan+0x2c8>)
 800ebf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfc:	f7f1 fb4e 	bl	800029c <__adddf3>
 800ec00:	4632      	mov	r2, r6
 800ec02:	463b      	mov	r3, r7
 800ec04:	f7f1 fd00 	bl	8000608 <__aeabi_dmul>
 800ec08:	a36d      	add	r3, pc, #436	; (adr r3, 800edc0 <atan+0x2d0>)
 800ec0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0e:	f7f1 fb45 	bl	800029c <__adddf3>
 800ec12:	4632      	mov	r2, r6
 800ec14:	463b      	mov	r3, r7
 800ec16:	f7f1 fcf7 	bl	8000608 <__aeabi_dmul>
 800ec1a:	a36b      	add	r3, pc, #428	; (adr r3, 800edc8 <atan+0x2d8>)
 800ec1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec20:	f7f1 fb3c 	bl	800029c <__adddf3>
 800ec24:	4632      	mov	r2, r6
 800ec26:	463b      	mov	r3, r7
 800ec28:	f7f1 fcee 	bl	8000608 <__aeabi_dmul>
 800ec2c:	a368      	add	r3, pc, #416	; (adr r3, 800edd0 <atan+0x2e0>)
 800ec2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec32:	f7f1 fb33 	bl	800029c <__adddf3>
 800ec36:	4642      	mov	r2, r8
 800ec38:	464b      	mov	r3, r9
 800ec3a:	f7f1 fce5 	bl	8000608 <__aeabi_dmul>
 800ec3e:	a366      	add	r3, pc, #408	; (adr r3, 800edd8 <atan+0x2e8>)
 800ec40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec44:	4680      	mov	r8, r0
 800ec46:	4689      	mov	r9, r1
 800ec48:	4630      	mov	r0, r6
 800ec4a:	4639      	mov	r1, r7
 800ec4c:	f7f1 fcdc 	bl	8000608 <__aeabi_dmul>
 800ec50:	a363      	add	r3, pc, #396	; (adr r3, 800ede0 <atan+0x2f0>)
 800ec52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec56:	f7f1 fb1f 	bl	8000298 <__aeabi_dsub>
 800ec5a:	4632      	mov	r2, r6
 800ec5c:	463b      	mov	r3, r7
 800ec5e:	f7f1 fcd3 	bl	8000608 <__aeabi_dmul>
 800ec62:	a361      	add	r3, pc, #388	; (adr r3, 800ede8 <atan+0x2f8>)
 800ec64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec68:	f7f1 fb16 	bl	8000298 <__aeabi_dsub>
 800ec6c:	4632      	mov	r2, r6
 800ec6e:	463b      	mov	r3, r7
 800ec70:	f7f1 fcca 	bl	8000608 <__aeabi_dmul>
 800ec74:	a35e      	add	r3, pc, #376	; (adr r3, 800edf0 <atan+0x300>)
 800ec76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7a:	f7f1 fb0d 	bl	8000298 <__aeabi_dsub>
 800ec7e:	4632      	mov	r2, r6
 800ec80:	463b      	mov	r3, r7
 800ec82:	f7f1 fcc1 	bl	8000608 <__aeabi_dmul>
 800ec86:	a35c      	add	r3, pc, #368	; (adr r3, 800edf8 <atan+0x308>)
 800ec88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8c:	f7f1 fb04 	bl	8000298 <__aeabi_dsub>
 800ec90:	4632      	mov	r2, r6
 800ec92:	463b      	mov	r3, r7
 800ec94:	f7f1 fcb8 	bl	8000608 <__aeabi_dmul>
 800ec98:	4602      	mov	r2, r0
 800ec9a:	460b      	mov	r3, r1
 800ec9c:	4640      	mov	r0, r8
 800ec9e:	4649      	mov	r1, r9
 800eca0:	f7f1 fafc 	bl	800029c <__adddf3>
 800eca4:	4622      	mov	r2, r4
 800eca6:	462b      	mov	r3, r5
 800eca8:	f7f1 fcae 	bl	8000608 <__aeabi_dmul>
 800ecac:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ecb0:	4602      	mov	r2, r0
 800ecb2:	460b      	mov	r3, r1
 800ecb4:	d14b      	bne.n	800ed4e <atan+0x25e>
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	4629      	mov	r1, r5
 800ecba:	f7f1 faed 	bl	8000298 <__aeabi_dsub>
 800ecbe:	e72c      	b.n	800eb1a <atan+0x2a>
 800ecc0:	ee10 0a10 	vmov	r0, s0
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	4b53      	ldr	r3, [pc, #332]	; (800ee14 <atan+0x324>)
 800ecc8:	4629      	mov	r1, r5
 800ecca:	f7f1 fae5 	bl	8000298 <__aeabi_dsub>
 800ecce:	2200      	movs	r2, #0
 800ecd0:	4606      	mov	r6, r0
 800ecd2:	460f      	mov	r7, r1
 800ecd4:	4b4f      	ldr	r3, [pc, #316]	; (800ee14 <atan+0x324>)
 800ecd6:	4620      	mov	r0, r4
 800ecd8:	4629      	mov	r1, r5
 800ecda:	f7f1 fadf 	bl	800029c <__adddf3>
 800ecde:	4602      	mov	r2, r0
 800ece0:	460b      	mov	r3, r1
 800ece2:	4630      	mov	r0, r6
 800ece4:	4639      	mov	r1, r7
 800ece6:	f7f1 fdb9 	bl	800085c <__aeabi_ddiv>
 800ecea:	f04f 0a01 	mov.w	sl, #1
 800ecee:	4604      	mov	r4, r0
 800ecf0:	460d      	mov	r5, r1
 800ecf2:	e764      	b.n	800ebbe <atan+0xce>
 800ecf4:	4b49      	ldr	r3, [pc, #292]	; (800ee1c <atan+0x32c>)
 800ecf6:	429e      	cmp	r6, r3
 800ecf8:	dc1d      	bgt.n	800ed36 <atan+0x246>
 800ecfa:	ee10 0a10 	vmov	r0, s0
 800ecfe:	2200      	movs	r2, #0
 800ed00:	4b47      	ldr	r3, [pc, #284]	; (800ee20 <atan+0x330>)
 800ed02:	4629      	mov	r1, r5
 800ed04:	f7f1 fac8 	bl	8000298 <__aeabi_dsub>
 800ed08:	2200      	movs	r2, #0
 800ed0a:	4606      	mov	r6, r0
 800ed0c:	460f      	mov	r7, r1
 800ed0e:	4b44      	ldr	r3, [pc, #272]	; (800ee20 <atan+0x330>)
 800ed10:	4620      	mov	r0, r4
 800ed12:	4629      	mov	r1, r5
 800ed14:	f7f1 fc78 	bl	8000608 <__aeabi_dmul>
 800ed18:	2200      	movs	r2, #0
 800ed1a:	4b3e      	ldr	r3, [pc, #248]	; (800ee14 <atan+0x324>)
 800ed1c:	f7f1 fabe 	bl	800029c <__adddf3>
 800ed20:	4602      	mov	r2, r0
 800ed22:	460b      	mov	r3, r1
 800ed24:	4630      	mov	r0, r6
 800ed26:	4639      	mov	r1, r7
 800ed28:	f7f1 fd98 	bl	800085c <__aeabi_ddiv>
 800ed2c:	f04f 0a02 	mov.w	sl, #2
 800ed30:	4604      	mov	r4, r0
 800ed32:	460d      	mov	r5, r1
 800ed34:	e743      	b.n	800ebbe <atan+0xce>
 800ed36:	462b      	mov	r3, r5
 800ed38:	ee10 2a10 	vmov	r2, s0
 800ed3c:	2000      	movs	r0, #0
 800ed3e:	4939      	ldr	r1, [pc, #228]	; (800ee24 <atan+0x334>)
 800ed40:	f7f1 fd8c 	bl	800085c <__aeabi_ddiv>
 800ed44:	f04f 0a03 	mov.w	sl, #3
 800ed48:	4604      	mov	r4, r0
 800ed4a:	460d      	mov	r5, r1
 800ed4c:	e737      	b.n	800ebbe <atan+0xce>
 800ed4e:	4b36      	ldr	r3, [pc, #216]	; (800ee28 <atan+0x338>)
 800ed50:	4e36      	ldr	r6, [pc, #216]	; (800ee2c <atan+0x33c>)
 800ed52:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800ed56:	4456      	add	r6, sl
 800ed58:	449a      	add	sl, r3
 800ed5a:	e9da 2300 	ldrd	r2, r3, [sl]
 800ed5e:	f7f1 fa9b 	bl	8000298 <__aeabi_dsub>
 800ed62:	4622      	mov	r2, r4
 800ed64:	462b      	mov	r3, r5
 800ed66:	f7f1 fa97 	bl	8000298 <__aeabi_dsub>
 800ed6a:	4602      	mov	r2, r0
 800ed6c:	460b      	mov	r3, r1
 800ed6e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ed72:	f7f1 fa91 	bl	8000298 <__aeabi_dsub>
 800ed76:	f1bb 0f00 	cmp.w	fp, #0
 800ed7a:	4604      	mov	r4, r0
 800ed7c:	460d      	mov	r5, r1
 800ed7e:	f6bf aed6 	bge.w	800eb2e <atan+0x3e>
 800ed82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed86:	461d      	mov	r5, r3
 800ed88:	e6d1      	b.n	800eb2e <atan+0x3e>
 800ed8a:	a51d      	add	r5, pc, #116	; (adr r5, 800ee00 <atan+0x310>)
 800ed8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ed90:	e6cd      	b.n	800eb2e <atan+0x3e>
 800ed92:	bf00      	nop
 800ed94:	f3af 8000 	nop.w
 800ed98:	54442d18 	.word	0x54442d18
 800ed9c:	3ff921fb 	.word	0x3ff921fb
 800eda0:	8800759c 	.word	0x8800759c
 800eda4:	7e37e43c 	.word	0x7e37e43c
 800eda8:	e322da11 	.word	0xe322da11
 800edac:	3f90ad3a 	.word	0x3f90ad3a
 800edb0:	24760deb 	.word	0x24760deb
 800edb4:	3fa97b4b 	.word	0x3fa97b4b
 800edb8:	a0d03d51 	.word	0xa0d03d51
 800edbc:	3fb10d66 	.word	0x3fb10d66
 800edc0:	c54c206e 	.word	0xc54c206e
 800edc4:	3fb745cd 	.word	0x3fb745cd
 800edc8:	920083ff 	.word	0x920083ff
 800edcc:	3fc24924 	.word	0x3fc24924
 800edd0:	5555550d 	.word	0x5555550d
 800edd4:	3fd55555 	.word	0x3fd55555
 800edd8:	2c6a6c2f 	.word	0x2c6a6c2f
 800eddc:	bfa2b444 	.word	0xbfa2b444
 800ede0:	52defd9a 	.word	0x52defd9a
 800ede4:	3fadde2d 	.word	0x3fadde2d
 800ede8:	af749a6d 	.word	0xaf749a6d
 800edec:	3fb3b0f2 	.word	0x3fb3b0f2
 800edf0:	fe231671 	.word	0xfe231671
 800edf4:	3fbc71c6 	.word	0x3fbc71c6
 800edf8:	9998ebc4 	.word	0x9998ebc4
 800edfc:	3fc99999 	.word	0x3fc99999
 800ee00:	54442d18 	.word	0x54442d18
 800ee04:	bff921fb 	.word	0xbff921fb
 800ee08:	440fffff 	.word	0x440fffff
 800ee0c:	7ff00000 	.word	0x7ff00000
 800ee10:	3fdbffff 	.word	0x3fdbffff
 800ee14:	3ff00000 	.word	0x3ff00000
 800ee18:	3ff2ffff 	.word	0x3ff2ffff
 800ee1c:	40037fff 	.word	0x40037fff
 800ee20:	3ff80000 	.word	0x3ff80000
 800ee24:	bff00000 	.word	0xbff00000
 800ee28:	0800f7a8 	.word	0x0800f7a8
 800ee2c:	0800f788 	.word	0x0800f788

0800ee30 <fabs>:
 800ee30:	ec51 0b10 	vmov	r0, r1, d0
 800ee34:	ee10 2a10 	vmov	r2, s0
 800ee38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ee3c:	ec43 2b10 	vmov	d0, r2, r3
 800ee40:	4770      	bx	lr

0800ee42 <finite>:
 800ee42:	ee10 3a90 	vmov	r3, s1
 800ee46:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800ee4a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ee4e:	0fc0      	lsrs	r0, r0, #31
 800ee50:	4770      	bx	lr

0800ee52 <matherr>:
 800ee52:	2000      	movs	r0, #0
 800ee54:	4770      	bx	lr
	...

0800ee58 <nan>:
 800ee58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ee60 <nan+0x8>
 800ee5c:	4770      	bx	lr
 800ee5e:	bf00      	nop
 800ee60:	00000000 	.word	0x00000000
 800ee64:	7ff80000 	.word	0x7ff80000

0800ee68 <rint>:
 800ee68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee6a:	ec51 0b10 	vmov	r0, r1, d0
 800ee6e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ee72:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ee76:	2e13      	cmp	r6, #19
 800ee78:	460b      	mov	r3, r1
 800ee7a:	ee10 4a10 	vmov	r4, s0
 800ee7e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800ee82:	dc56      	bgt.n	800ef32 <rint+0xca>
 800ee84:	2e00      	cmp	r6, #0
 800ee86:	da2b      	bge.n	800eee0 <rint+0x78>
 800ee88:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ee8c:	4302      	orrs	r2, r0
 800ee8e:	d023      	beq.n	800eed8 <rint+0x70>
 800ee90:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800ee94:	4302      	orrs	r2, r0
 800ee96:	4254      	negs	r4, r2
 800ee98:	4314      	orrs	r4, r2
 800ee9a:	0c4b      	lsrs	r3, r1, #17
 800ee9c:	0b24      	lsrs	r4, r4, #12
 800ee9e:	045b      	lsls	r3, r3, #17
 800eea0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800eea4:	ea44 0103 	orr.w	r1, r4, r3
 800eea8:	460b      	mov	r3, r1
 800eeaa:	492f      	ldr	r1, [pc, #188]	; (800ef68 <rint+0x100>)
 800eeac:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800eeb0:	e9d1 6700 	ldrd	r6, r7, [r1]
 800eeb4:	4602      	mov	r2, r0
 800eeb6:	4639      	mov	r1, r7
 800eeb8:	4630      	mov	r0, r6
 800eeba:	f7f1 f9ef 	bl	800029c <__adddf3>
 800eebe:	e9cd 0100 	strd	r0, r1, [sp]
 800eec2:	463b      	mov	r3, r7
 800eec4:	4632      	mov	r2, r6
 800eec6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eeca:	f7f1 f9e5 	bl	8000298 <__aeabi_dsub>
 800eece:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eed2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800eed6:	4639      	mov	r1, r7
 800eed8:	ec41 0b10 	vmov	d0, r0, r1
 800eedc:	b003      	add	sp, #12
 800eede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eee0:	4a22      	ldr	r2, [pc, #136]	; (800ef6c <rint+0x104>)
 800eee2:	4132      	asrs	r2, r6
 800eee4:	ea01 0702 	and.w	r7, r1, r2
 800eee8:	4307      	orrs	r7, r0
 800eeea:	d0f5      	beq.n	800eed8 <rint+0x70>
 800eeec:	0852      	lsrs	r2, r2, #1
 800eeee:	4011      	ands	r1, r2
 800eef0:	430c      	orrs	r4, r1
 800eef2:	d00b      	beq.n	800ef0c <rint+0xa4>
 800eef4:	ea23 0202 	bic.w	r2, r3, r2
 800eef8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800eefc:	2e13      	cmp	r6, #19
 800eefe:	fa43 f306 	asr.w	r3, r3, r6
 800ef02:	bf0c      	ite	eq
 800ef04:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800ef08:	2400      	movne	r4, #0
 800ef0a:	4313      	orrs	r3, r2
 800ef0c:	4916      	ldr	r1, [pc, #88]	; (800ef68 <rint+0x100>)
 800ef0e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ef12:	4622      	mov	r2, r4
 800ef14:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ef18:	4620      	mov	r0, r4
 800ef1a:	4629      	mov	r1, r5
 800ef1c:	f7f1 f9be 	bl	800029c <__adddf3>
 800ef20:	e9cd 0100 	strd	r0, r1, [sp]
 800ef24:	4622      	mov	r2, r4
 800ef26:	462b      	mov	r3, r5
 800ef28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef2c:	f7f1 f9b4 	bl	8000298 <__aeabi_dsub>
 800ef30:	e7d2      	b.n	800eed8 <rint+0x70>
 800ef32:	2e33      	cmp	r6, #51	; 0x33
 800ef34:	dd07      	ble.n	800ef46 <rint+0xde>
 800ef36:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ef3a:	d1cd      	bne.n	800eed8 <rint+0x70>
 800ef3c:	ee10 2a10 	vmov	r2, s0
 800ef40:	f7f1 f9ac 	bl	800029c <__adddf3>
 800ef44:	e7c8      	b.n	800eed8 <rint+0x70>
 800ef46:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800ef4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef4e:	40f2      	lsrs	r2, r6
 800ef50:	4210      	tst	r0, r2
 800ef52:	d0c1      	beq.n	800eed8 <rint+0x70>
 800ef54:	0852      	lsrs	r2, r2, #1
 800ef56:	4210      	tst	r0, r2
 800ef58:	bf1f      	itttt	ne
 800ef5a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800ef5e:	ea20 0202 	bicne.w	r2, r0, r2
 800ef62:	4134      	asrne	r4, r6
 800ef64:	4314      	orrne	r4, r2
 800ef66:	e7d1      	b.n	800ef0c <rint+0xa4>
 800ef68:	0800f7c8 	.word	0x0800f7c8
 800ef6c:	000fffff 	.word	0x000fffff

0800ef70 <scalbn>:
 800ef70:	b570      	push	{r4, r5, r6, lr}
 800ef72:	ec55 4b10 	vmov	r4, r5, d0
 800ef76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ef7a:	4606      	mov	r6, r0
 800ef7c:	462b      	mov	r3, r5
 800ef7e:	b9aa      	cbnz	r2, 800efac <scalbn+0x3c>
 800ef80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ef84:	4323      	orrs	r3, r4
 800ef86:	d03b      	beq.n	800f000 <scalbn+0x90>
 800ef88:	4b31      	ldr	r3, [pc, #196]	; (800f050 <scalbn+0xe0>)
 800ef8a:	4629      	mov	r1, r5
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	ee10 0a10 	vmov	r0, s0
 800ef92:	f7f1 fb39 	bl	8000608 <__aeabi_dmul>
 800ef96:	4b2f      	ldr	r3, [pc, #188]	; (800f054 <scalbn+0xe4>)
 800ef98:	429e      	cmp	r6, r3
 800ef9a:	4604      	mov	r4, r0
 800ef9c:	460d      	mov	r5, r1
 800ef9e:	da12      	bge.n	800efc6 <scalbn+0x56>
 800efa0:	a327      	add	r3, pc, #156	; (adr r3, 800f040 <scalbn+0xd0>)
 800efa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa6:	f7f1 fb2f 	bl	8000608 <__aeabi_dmul>
 800efaa:	e009      	b.n	800efc0 <scalbn+0x50>
 800efac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800efb0:	428a      	cmp	r2, r1
 800efb2:	d10c      	bne.n	800efce <scalbn+0x5e>
 800efb4:	ee10 2a10 	vmov	r2, s0
 800efb8:	4620      	mov	r0, r4
 800efba:	4629      	mov	r1, r5
 800efbc:	f7f1 f96e 	bl	800029c <__adddf3>
 800efc0:	4604      	mov	r4, r0
 800efc2:	460d      	mov	r5, r1
 800efc4:	e01c      	b.n	800f000 <scalbn+0x90>
 800efc6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800efca:	460b      	mov	r3, r1
 800efcc:	3a36      	subs	r2, #54	; 0x36
 800efce:	4432      	add	r2, r6
 800efd0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800efd4:	428a      	cmp	r2, r1
 800efd6:	dd0b      	ble.n	800eff0 <scalbn+0x80>
 800efd8:	ec45 4b11 	vmov	d1, r4, r5
 800efdc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800f048 <scalbn+0xd8>
 800efe0:	f000 f83c 	bl	800f05c <copysign>
 800efe4:	a318      	add	r3, pc, #96	; (adr r3, 800f048 <scalbn+0xd8>)
 800efe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efea:	ec51 0b10 	vmov	r0, r1, d0
 800efee:	e7da      	b.n	800efa6 <scalbn+0x36>
 800eff0:	2a00      	cmp	r2, #0
 800eff2:	dd08      	ble.n	800f006 <scalbn+0x96>
 800eff4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eff8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800effc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f000:	ec45 4b10 	vmov	d0, r4, r5
 800f004:	bd70      	pop	{r4, r5, r6, pc}
 800f006:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f00a:	da0d      	bge.n	800f028 <scalbn+0xb8>
 800f00c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f010:	429e      	cmp	r6, r3
 800f012:	ec45 4b11 	vmov	d1, r4, r5
 800f016:	dce1      	bgt.n	800efdc <scalbn+0x6c>
 800f018:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800f040 <scalbn+0xd0>
 800f01c:	f000 f81e 	bl	800f05c <copysign>
 800f020:	a307      	add	r3, pc, #28	; (adr r3, 800f040 <scalbn+0xd0>)
 800f022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f026:	e7e0      	b.n	800efea <scalbn+0x7a>
 800f028:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f02c:	3236      	adds	r2, #54	; 0x36
 800f02e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f032:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f036:	4620      	mov	r0, r4
 800f038:	4629      	mov	r1, r5
 800f03a:	2200      	movs	r2, #0
 800f03c:	4b06      	ldr	r3, [pc, #24]	; (800f058 <scalbn+0xe8>)
 800f03e:	e7b2      	b.n	800efa6 <scalbn+0x36>
 800f040:	c2f8f359 	.word	0xc2f8f359
 800f044:	01a56e1f 	.word	0x01a56e1f
 800f048:	8800759c 	.word	0x8800759c
 800f04c:	7e37e43c 	.word	0x7e37e43c
 800f050:	43500000 	.word	0x43500000
 800f054:	ffff3cb0 	.word	0xffff3cb0
 800f058:	3c900000 	.word	0x3c900000

0800f05c <copysign>:
 800f05c:	ec51 0b10 	vmov	r0, r1, d0
 800f060:	ee11 0a90 	vmov	r0, s3
 800f064:	ee10 2a10 	vmov	r2, s0
 800f068:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f06c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800f070:	ea41 0300 	orr.w	r3, r1, r0
 800f074:	ec43 2b10 	vmov	d0, r2, r3
 800f078:	4770      	bx	lr
	...

0800f07c <_init>:
 800f07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f07e:	bf00      	nop
 800f080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f082:	bc08      	pop	{r3}
 800f084:	469e      	mov	lr, r3
 800f086:	4770      	bx	lr

0800f088 <_fini>:
 800f088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f08a:	bf00      	nop
 800f08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f08e:	bc08      	pop	{r3}
 800f090:	469e      	mov	lr, r3
 800f092:	4770      	bx	lr
