
STM32_FLIGHT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b104  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  0800b2a8  0800b2a8  0001b2a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8b0  0800b8b0  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8b0  0800b8b0  0001b8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8b8  0800b8b8  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8b8  0800b8b8  0001b8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8bc  0800b8bc  0001b8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  0800b8c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  2000023c  0800bafc  0002023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008dc  0800bafc  000208dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b226  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000307f  00000000  00000000  0003b492  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000fdc4  00000000  00000000  0003e511  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000013d0  00000000  00000000  0004e2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000012f8  00000000  00000000  0004f6a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001871a  00000000  00000000  000509a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000f4dd  00000000  00000000  000690ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00098b64  00000000  00000000  00078597  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001110fb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004710  00000000  00000000  00111178  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000023c 	.word	0x2000023c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b28c 	.word	0x0800b28c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000240 	.word	0x20000240
 80001dc:	0800b28c 	.word	0x0800b28c

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2f>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000984:	bf24      	itt	cs
 8000986:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800098a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800098e:	d90d      	bls.n	80009ac <__aeabi_d2f+0x30>
 8000990:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000994:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000998:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800099c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009a4:	bf08      	it	eq
 80009a6:	f020 0001 	biceq.w	r0, r0, #1
 80009aa:	4770      	bx	lr
 80009ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009b0:	d121      	bne.n	80009f6 <__aeabi_d2f+0x7a>
 80009b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009b6:	bfbc      	itt	lt
 80009b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	4770      	bxlt	lr
 80009be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009c6:	f1c2 0218 	rsb	r2, r2, #24
 80009ca:	f1c2 0c20 	rsb	ip, r2, #32
 80009ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80009d2:	fa20 f002 	lsr.w	r0, r0, r2
 80009d6:	bf18      	it	ne
 80009d8:	f040 0001 	orrne.w	r0, r0, #1
 80009dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e8:	ea40 000c 	orr.w	r0, r0, ip
 80009ec:	fa23 f302 	lsr.w	r3, r3, r2
 80009f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009f4:	e7cc      	b.n	8000990 <__aeabi_d2f+0x14>
 80009f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009fa:	d107      	bne.n	8000a0c <__aeabi_d2f+0x90>
 80009fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a00:	bf1e      	ittt	ne
 8000a02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a0a:	4770      	bxne	lr
 8000a0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_uldivmod>:
 8000a1c:	b953      	cbnz	r3, 8000a34 <__aeabi_uldivmod+0x18>
 8000a1e:	b94a      	cbnz	r2, 8000a34 <__aeabi_uldivmod+0x18>
 8000a20:	2900      	cmp	r1, #0
 8000a22:	bf08      	it	eq
 8000a24:	2800      	cmpeq	r0, #0
 8000a26:	bf1c      	itt	ne
 8000a28:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a2c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a30:	f000 b972 	b.w	8000d18 <__aeabi_idiv0>
 8000a34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a3c:	f000 f806 	bl	8000a4c <__udivmoddi4>
 8000a40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a48:	b004      	add	sp, #16
 8000a4a:	4770      	bx	lr

08000a4c <__udivmoddi4>:
 8000a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a50:	9e08      	ldr	r6, [sp, #32]
 8000a52:	4604      	mov	r4, r0
 8000a54:	4688      	mov	r8, r1
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d14b      	bne.n	8000af2 <__udivmoddi4+0xa6>
 8000a5a:	428a      	cmp	r2, r1
 8000a5c:	4615      	mov	r5, r2
 8000a5e:	d967      	bls.n	8000b30 <__udivmoddi4+0xe4>
 8000a60:	fab2 f282 	clz	r2, r2
 8000a64:	b14a      	cbz	r2, 8000a7a <__udivmoddi4+0x2e>
 8000a66:	f1c2 0720 	rsb	r7, r2, #32
 8000a6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a6e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a72:	4095      	lsls	r5, r2
 8000a74:	ea47 0803 	orr.w	r8, r7, r3
 8000a78:	4094      	lsls	r4, r2
 8000a7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a7e:	0c23      	lsrs	r3, r4, #16
 8000a80:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a84:	fa1f fc85 	uxth.w	ip, r5
 8000a88:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a90:	fb07 f10c 	mul.w	r1, r7, ip
 8000a94:	4299      	cmp	r1, r3
 8000a96:	d909      	bls.n	8000aac <__udivmoddi4+0x60>
 8000a98:	18eb      	adds	r3, r5, r3
 8000a9a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000a9e:	f080 811b 	bcs.w	8000cd8 <__udivmoddi4+0x28c>
 8000aa2:	4299      	cmp	r1, r3
 8000aa4:	f240 8118 	bls.w	8000cd8 <__udivmoddi4+0x28c>
 8000aa8:	3f02      	subs	r7, #2
 8000aaa:	442b      	add	r3, r5
 8000aac:	1a5b      	subs	r3, r3, r1
 8000aae:	b2a4      	uxth	r4, r4
 8000ab0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ab4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ab8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000abc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ac0:	45a4      	cmp	ip, r4
 8000ac2:	d909      	bls.n	8000ad8 <__udivmoddi4+0x8c>
 8000ac4:	192c      	adds	r4, r5, r4
 8000ac6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000aca:	f080 8107 	bcs.w	8000cdc <__udivmoddi4+0x290>
 8000ace:	45a4      	cmp	ip, r4
 8000ad0:	f240 8104 	bls.w	8000cdc <__udivmoddi4+0x290>
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	442c      	add	r4, r5
 8000ad8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000adc:	eba4 040c 	sub.w	r4, r4, ip
 8000ae0:	2700      	movs	r7, #0
 8000ae2:	b11e      	cbz	r6, 8000aec <__udivmoddi4+0xa0>
 8000ae4:	40d4      	lsrs	r4, r2
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e9c6 4300 	strd	r4, r3, [r6]
 8000aec:	4639      	mov	r1, r7
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	428b      	cmp	r3, r1
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0xbe>
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	f000 80eb 	beq.w	8000cd2 <__udivmoddi4+0x286>
 8000afc:	2700      	movs	r7, #0
 8000afe:	e9c6 0100 	strd	r0, r1, [r6]
 8000b02:	4638      	mov	r0, r7
 8000b04:	4639      	mov	r1, r7
 8000b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0a:	fab3 f783 	clz	r7, r3
 8000b0e:	2f00      	cmp	r7, #0
 8000b10:	d147      	bne.n	8000ba2 <__udivmoddi4+0x156>
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d302      	bcc.n	8000b1c <__udivmoddi4+0xd0>
 8000b16:	4282      	cmp	r2, r0
 8000b18:	f200 80fa 	bhi.w	8000d10 <__udivmoddi4+0x2c4>
 8000b1c:	1a84      	subs	r4, r0, r2
 8000b1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b22:	2001      	movs	r0, #1
 8000b24:	4698      	mov	r8, r3
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	d0e0      	beq.n	8000aec <__udivmoddi4+0xa0>
 8000b2a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b2e:	e7dd      	b.n	8000aec <__udivmoddi4+0xa0>
 8000b30:	b902      	cbnz	r2, 8000b34 <__udivmoddi4+0xe8>
 8000b32:	deff      	udf	#255	; 0xff
 8000b34:	fab2 f282 	clz	r2, r2
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	f040 808f 	bne.w	8000c5c <__udivmoddi4+0x210>
 8000b3e:	1b49      	subs	r1, r1, r5
 8000b40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b44:	fa1f f885 	uxth.w	r8, r5
 8000b48:	2701      	movs	r7, #1
 8000b4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b58:	fb08 f10c 	mul.w	r1, r8, ip
 8000b5c:	4299      	cmp	r1, r3
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0x124>
 8000b60:	18eb      	adds	r3, r5, r3
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x122>
 8000b68:	4299      	cmp	r1, r3
 8000b6a:	f200 80cd 	bhi.w	8000d08 <__udivmoddi4+0x2bc>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1a59      	subs	r1, r3, r1
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x14c>
 8000b88:	192c      	adds	r4, r5, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x14a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80b6 	bhi.w	8000d02 <__udivmoddi4+0x2b6>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e79f      	b.n	8000ae2 <__udivmoddi4+0x96>
 8000ba2:	f1c7 0c20 	rsb	ip, r7, #32
 8000ba6:	40bb      	lsls	r3, r7
 8000ba8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bac:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bb0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bb4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bb8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bbc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bc0:	4325      	orrs	r5, r4
 8000bc2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bc6:	0c2c      	lsrs	r4, r5, #16
 8000bc8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bcc:	fa1f fa8e 	uxth.w	sl, lr
 8000bd0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000bd4:	fb09 f40a 	mul.w	r4, r9, sl
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	fa02 f207 	lsl.w	r2, r2, r7
 8000bde:	fa00 f107 	lsl.w	r1, r0, r7
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b0>
 8000be4:	eb1e 0303 	adds.w	r3, lr, r3
 8000be8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bec:	f080 8087 	bcs.w	8000cfe <__udivmoddi4+0x2b2>
 8000bf0:	429c      	cmp	r4, r3
 8000bf2:	f240 8084 	bls.w	8000cfe <__udivmoddi4+0x2b2>
 8000bf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bfa:	4473      	add	r3, lr
 8000bfc:	1b1b      	subs	r3, r3, r4
 8000bfe:	b2ad      	uxth	r5, r5
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c0c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c10:	45a2      	cmp	sl, r4
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1da>
 8000c14:	eb1e 0404 	adds.w	r4, lr, r4
 8000c18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c1c:	d26b      	bcs.n	8000cf6 <__udivmoddi4+0x2aa>
 8000c1e:	45a2      	cmp	sl, r4
 8000c20:	d969      	bls.n	8000cf6 <__udivmoddi4+0x2aa>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4474      	add	r4, lr
 8000c26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c2e:	eba4 040a 	sub.w	r4, r4, sl
 8000c32:	454c      	cmp	r4, r9
 8000c34:	46c2      	mov	sl, r8
 8000c36:	464b      	mov	r3, r9
 8000c38:	d354      	bcc.n	8000ce4 <__udivmoddi4+0x298>
 8000c3a:	d051      	beq.n	8000ce0 <__udivmoddi4+0x294>
 8000c3c:	2e00      	cmp	r6, #0
 8000c3e:	d069      	beq.n	8000d14 <__udivmoddi4+0x2c8>
 8000c40:	ebb1 050a 	subs.w	r5, r1, sl
 8000c44:	eb64 0403 	sbc.w	r4, r4, r3
 8000c48:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c4c:	40fd      	lsrs	r5, r7
 8000c4e:	40fc      	lsrs	r4, r7
 8000c50:	ea4c 0505 	orr.w	r5, ip, r5
 8000c54:	e9c6 5400 	strd	r5, r4, [r6]
 8000c58:	2700      	movs	r7, #0
 8000c5a:	e747      	b.n	8000aec <__udivmoddi4+0xa0>
 8000c5c:	f1c2 0320 	rsb	r3, r2, #32
 8000c60:	fa20 f703 	lsr.w	r7, r0, r3
 8000c64:	4095      	lsls	r5, r2
 8000c66:	fa01 f002 	lsl.w	r0, r1, r2
 8000c6a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c72:	4338      	orrs	r0, r7
 8000c74:	0c01      	lsrs	r1, r0, #16
 8000c76:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c7a:	fa1f f885 	uxth.w	r8, r5
 8000c7e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c86:	fb07 f308 	mul.w	r3, r7, r8
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d907      	bls.n	8000ca2 <__udivmoddi4+0x256>
 8000c92:	1869      	adds	r1, r5, r1
 8000c94:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000c98:	d22f      	bcs.n	8000cfa <__udivmoddi4+0x2ae>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d92d      	bls.n	8000cfa <__udivmoddi4+0x2ae>
 8000c9e:	3f02      	subs	r7, #2
 8000ca0:	4429      	add	r1, r5
 8000ca2:	1acb      	subs	r3, r1, r3
 8000ca4:	b281      	uxth	r1, r0
 8000ca6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000caa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb2:	fb00 f308 	mul.w	r3, r0, r8
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d907      	bls.n	8000cca <__udivmoddi4+0x27e>
 8000cba:	1869      	adds	r1, r5, r1
 8000cbc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000cc0:	d217      	bcs.n	8000cf2 <__udivmoddi4+0x2a6>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d915      	bls.n	8000cf2 <__udivmoddi4+0x2a6>
 8000cc6:	3802      	subs	r0, #2
 8000cc8:	4429      	add	r1, r5
 8000cca:	1ac9      	subs	r1, r1, r3
 8000ccc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cd0:	e73b      	b.n	8000b4a <__udivmoddi4+0xfe>
 8000cd2:	4637      	mov	r7, r6
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	e709      	b.n	8000aec <__udivmoddi4+0xa0>
 8000cd8:	4607      	mov	r7, r0
 8000cda:	e6e7      	b.n	8000aac <__udivmoddi4+0x60>
 8000cdc:	4618      	mov	r0, r3
 8000cde:	e6fb      	b.n	8000ad8 <__udivmoddi4+0x8c>
 8000ce0:	4541      	cmp	r1, r8
 8000ce2:	d2ab      	bcs.n	8000c3c <__udivmoddi4+0x1f0>
 8000ce4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ce8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cec:	3801      	subs	r0, #1
 8000cee:	4613      	mov	r3, r2
 8000cf0:	e7a4      	b.n	8000c3c <__udivmoddi4+0x1f0>
 8000cf2:	4660      	mov	r0, ip
 8000cf4:	e7e9      	b.n	8000cca <__udivmoddi4+0x27e>
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	e795      	b.n	8000c26 <__udivmoddi4+0x1da>
 8000cfa:	4667      	mov	r7, ip
 8000cfc:	e7d1      	b.n	8000ca2 <__udivmoddi4+0x256>
 8000cfe:	4681      	mov	r9, r0
 8000d00:	e77c      	b.n	8000bfc <__udivmoddi4+0x1b0>
 8000d02:	3802      	subs	r0, #2
 8000d04:	442c      	add	r4, r5
 8000d06:	e747      	b.n	8000b98 <__udivmoddi4+0x14c>
 8000d08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d0c:	442b      	add	r3, r5
 8000d0e:	e72f      	b.n	8000b70 <__udivmoddi4+0x124>
 8000d10:	4638      	mov	r0, r7
 8000d12:	e708      	b.n	8000b26 <__udivmoddi4+0xda>
 8000d14:	4637      	mov	r7, r6
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0xa0>

08000d18 <__aeabi_idiv0>:
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <strlen>:
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d22:	2a00      	cmp	r2, #0
 8000d24:	d1fb      	bne.n	8000d1e <strlen+0x2>
 8000d26:	1a18      	subs	r0, r3, r0
 8000d28:	3801      	subs	r0, #1
 8000d2a:	4770      	bx	lr
 8000d2c:	0000      	movs	r0, r0
	...

08000d30 <memchr>:
 8000d30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000d34:	2a10      	cmp	r2, #16
 8000d36:	db2b      	blt.n	8000d90 <memchr+0x60>
 8000d38:	f010 0f07 	tst.w	r0, #7
 8000d3c:	d008      	beq.n	8000d50 <memchr+0x20>
 8000d3e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000d42:	3a01      	subs	r2, #1
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d02d      	beq.n	8000da4 <memchr+0x74>
 8000d48:	f010 0f07 	tst.w	r0, #7
 8000d4c:	b342      	cbz	r2, 8000da0 <memchr+0x70>
 8000d4e:	d1f6      	bne.n	8000d3e <memchr+0xe>
 8000d50:	b4f0      	push	{r4, r5, r6, r7}
 8000d52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000d56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000d5a:	f022 0407 	bic.w	r4, r2, #7
 8000d5e:	f07f 0700 	mvns.w	r7, #0
 8000d62:	2300      	movs	r3, #0
 8000d64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000d68:	3c08      	subs	r4, #8
 8000d6a:	ea85 0501 	eor.w	r5, r5, r1
 8000d6e:	ea86 0601 	eor.w	r6, r6, r1
 8000d72:	fa85 f547 	uadd8	r5, r5, r7
 8000d76:	faa3 f587 	sel	r5, r3, r7
 8000d7a:	fa86 f647 	uadd8	r6, r6, r7
 8000d7e:	faa5 f687 	sel	r6, r5, r7
 8000d82:	b98e      	cbnz	r6, 8000da8 <memchr+0x78>
 8000d84:	d1ee      	bne.n	8000d64 <memchr+0x34>
 8000d86:	bcf0      	pop	{r4, r5, r6, r7}
 8000d88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000d8c:	f002 0207 	and.w	r2, r2, #7
 8000d90:	b132      	cbz	r2, 8000da0 <memchr+0x70>
 8000d92:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000d96:	3a01      	subs	r2, #1
 8000d98:	ea83 0301 	eor.w	r3, r3, r1
 8000d9c:	b113      	cbz	r3, 8000da4 <memchr+0x74>
 8000d9e:	d1f8      	bne.n	8000d92 <memchr+0x62>
 8000da0:	2000      	movs	r0, #0
 8000da2:	4770      	bx	lr
 8000da4:	3801      	subs	r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	bf06      	itte	eq
 8000dac:	4635      	moveq	r5, r6
 8000dae:	3803      	subeq	r0, #3
 8000db0:	3807      	subne	r0, #7
 8000db2:	f015 0f01 	tst.w	r5, #1
 8000db6:	d107      	bne.n	8000dc8 <memchr+0x98>
 8000db8:	3001      	adds	r0, #1
 8000dba:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000dbe:	bf02      	ittt	eq
 8000dc0:	3001      	addeq	r0, #1
 8000dc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000dc6:	3001      	addeq	r0, #1
 8000dc8:	bcf0      	pop	{r4, r5, r6, r7}
 8000dca:	3801      	subs	r0, #1
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <__gedf2>:
 8000dd0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000dd4:	e006      	b.n	8000de4 <__cmpdf2+0x4>
 8000dd6:	bf00      	nop

08000dd8 <__ledf2>:
 8000dd8:	f04f 0c01 	mov.w	ip, #1
 8000ddc:	e002      	b.n	8000de4 <__cmpdf2+0x4>
 8000dde:	bf00      	nop

08000de0 <__cmpdf2>:
 8000de0:	f04f 0c01 	mov.w	ip, #1
 8000de4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000de8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000dec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000df0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000df4:	bf18      	it	ne
 8000df6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000dfa:	d01b      	beq.n	8000e34 <__cmpdf2+0x54>
 8000dfc:	b001      	add	sp, #4
 8000dfe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000e02:	bf0c      	ite	eq
 8000e04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000e08:	ea91 0f03 	teqne	r1, r3
 8000e0c:	bf02      	ittt	eq
 8000e0e:	ea90 0f02 	teqeq	r0, r2
 8000e12:	2000      	moveq	r0, #0
 8000e14:	4770      	bxeq	lr
 8000e16:	f110 0f00 	cmn.w	r0, #0
 8000e1a:	ea91 0f03 	teq	r1, r3
 8000e1e:	bf58      	it	pl
 8000e20:	4299      	cmppl	r1, r3
 8000e22:	bf08      	it	eq
 8000e24:	4290      	cmpeq	r0, r2
 8000e26:	bf2c      	ite	cs
 8000e28:	17d8      	asrcs	r0, r3, #31
 8000e2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000e2e:	f040 0001 	orr.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e3c:	d102      	bne.n	8000e44 <__cmpdf2+0x64>
 8000e3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e42:	d107      	bne.n	8000e54 <__cmpdf2+0x74>
 8000e44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e4c:	d1d6      	bne.n	8000dfc <__cmpdf2+0x1c>
 8000e4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000e52:	d0d3      	beq.n	8000dfc <__cmpdf2+0x1c>
 8000e54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <__aeabi_cdrcmple>:
 8000e5c:	4684      	mov	ip, r0
 8000e5e:	4610      	mov	r0, r2
 8000e60:	4662      	mov	r2, ip
 8000e62:	468c      	mov	ip, r1
 8000e64:	4619      	mov	r1, r3
 8000e66:	4663      	mov	r3, ip
 8000e68:	e000      	b.n	8000e6c <__aeabi_cdcmpeq>
 8000e6a:	bf00      	nop

08000e6c <__aeabi_cdcmpeq>:
 8000e6c:	b501      	push	{r0, lr}
 8000e6e:	f7ff ffb7 	bl	8000de0 <__cmpdf2>
 8000e72:	2800      	cmp	r0, #0
 8000e74:	bf48      	it	mi
 8000e76:	f110 0f00 	cmnmi.w	r0, #0
 8000e7a:	bd01      	pop	{r0, pc}

08000e7c <__aeabi_dcmpeq>:
 8000e7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e80:	f7ff fff4 	bl	8000e6c <__aeabi_cdcmpeq>
 8000e84:	bf0c      	ite	eq
 8000e86:	2001      	moveq	r0, #1
 8000e88:	2000      	movne	r0, #0
 8000e8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e8e:	bf00      	nop

08000e90 <__aeabi_dcmplt>:
 8000e90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e94:	f7ff ffea 	bl	8000e6c <__aeabi_cdcmpeq>
 8000e98:	bf34      	ite	cc
 8000e9a:	2001      	movcc	r0, #1
 8000e9c:	2000      	movcs	r0, #0
 8000e9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_dcmple>:
 8000ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea8:	f7ff ffe0 	bl	8000e6c <__aeabi_cdcmpeq>
 8000eac:	bf94      	ite	ls
 8000eae:	2001      	movls	r0, #1
 8000eb0:	2000      	movhi	r0, #0
 8000eb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_dcmpge>:
 8000eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ebc:	f7ff ffce 	bl	8000e5c <__aeabi_cdrcmple>
 8000ec0:	bf94      	ite	ls
 8000ec2:	2001      	movls	r0, #1
 8000ec4:	2000      	movhi	r0, #0
 8000ec6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eca:	bf00      	nop

08000ecc <__aeabi_dcmpgt>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff ffc4 	bl	8000e5c <__aeabi_cdrcmple>
 8000ed4:	bf34      	ite	cc
 8000ed6:	2001      	movcc	r0, #1
 8000ed8:	2000      	movcs	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_dcmpun>:
 8000ee0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ee4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ee8:	d102      	bne.n	8000ef0 <__aeabi_dcmpun+0x10>
 8000eea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000eee:	d10a      	bne.n	8000f06 <__aeabi_dcmpun+0x26>
 8000ef0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ef4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ef8:	d102      	bne.n	8000f00 <__aeabi_dcmpun+0x20>
 8000efa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000efe:	d102      	bne.n	8000f06 <__aeabi_dcmpun+0x26>
 8000f00:	f04f 0000 	mov.w	r0, #0
 8000f04:	4770      	bx	lr
 8000f06:	f04f 0001 	mov.w	r0, #1
 8000f0a:	4770      	bx	lr

08000f0c <__aeabi_d2iz>:
 8000f0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000f10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f14:	d215      	bcs.n	8000f42 <__aeabi_d2iz+0x36>
 8000f16:	d511      	bpl.n	8000f3c <__aeabi_d2iz+0x30>
 8000f18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f20:	d912      	bls.n	8000f48 <__aeabi_d2iz+0x3c>
 8000f22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000f32:	fa23 f002 	lsr.w	r0, r3, r2
 8000f36:	bf18      	it	ne
 8000f38:	4240      	negne	r0, r0
 8000f3a:	4770      	bx	lr
 8000f3c:	f04f 0000 	mov.w	r0, #0
 8000f40:	4770      	bx	lr
 8000f42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f46:	d105      	bne.n	8000f54 <__aeabi_d2iz+0x48>
 8000f48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000f4c:	bf08      	it	eq
 8000f4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f52:	4770      	bx	lr
 8000f54:	f04f 0000 	mov.w	r0, #0
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <get_roll>:
}

float get_roll(){

	return roll;
}
 8000f5c:	4b01      	ldr	r3, [pc, #4]	; (8000f64 <get_roll+0x8>)
 8000f5e:	ed93 0a00 	vldr	s0, [r3]
 8000f62:	4770      	bx	lr
 8000f64:	200003ac 	.word	0x200003ac

08000f68 <get_pitch>:

float get_pitch(){

	return pitch;
}
 8000f68:	4b01      	ldr	r3, [pc, #4]	; (8000f70 <get_pitch+0x8>)
 8000f6a:	ed93 0a00 	vldr	s0, [r3]
 8000f6e:	4770      	bx	lr
 8000f70:	200003a8 	.word	0x200003a8

08000f74 <get_yaw>:

float get_yaw(){

	return yaw;
}
 8000f74:	4b01      	ldr	r3, [pc, #4]	; (8000f7c <get_yaw+0x8>)
 8000f76:	ed93 0a00 	vldr	s0, [r3]
 8000f7a:	4770      	bx	lr
 8000f7c:	2000039c 	.word	0x2000039c

08000f80 <writeByte>:

//===================================================================================================================
//====== Set of useful function to access acceleration, gyroscope, and temperature data
//===================================================================================================================

void writeByte(uint8_t address_tx, uint8_t subAddress, uint8_t data) {
 8000f80:	b500      	push	{lr}
 8000f82:	b085      	sub	sp, #20
	uint8_t data_write[2];
	data_write[0] = subAddress;
 8000f84:	f88d 100c 	strb.w	r1, [sp, #12]
	data_write[1] = data;
 8000f88:	f88d 200d 	strb.w	r2, [sp, #13]
	//i2c.write(address, data_write, 2, 0);


	HAL_I2C_Master_Transmit(&hi2c2, address_tx, data_write, 2, 10);
 8000f8c:	230a      	movs	r3, #10
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2302      	movs	r3, #2
 8000f92:	aa03      	add	r2, sp, #12
 8000f94:	4601      	mov	r1, r0
 8000f96:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <writeByte+0x24>)
 8000f98:	f002 fdaa 	bl	8003af0 <HAL_I2C_Master_Transmit>
}
 8000f9c:	b005      	add	sp, #20
 8000f9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fa2:	bf00      	nop
 8000fa4:	20000318 	.word	0x20000318

08000fa8 <readByte>:

//NICK - I've changed these to accept a tx address & a rx address as STM32 boards include the R/W bit at the end of 7 bit adress
//so HAL function takes in 8 bit address including R/W bit
char readByte(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress) {
 8000fa8:	b530      	push	{r4, r5, lr}
 8000faa:	b083      	sub	sp, #12
	uint8_t data[1]; // `data` will store the register data
	uint8_t data_write[1];
	data_write[0] = subAddress;
 8000fac:	a902      	add	r1, sp, #8
 8000fae:	f801 2d08 	strb.w	r2, [r1, #-8]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, 1, 0);


	HAL_I2C_Master_Transmit_IT(&hi2c2, address_tx, data_write, 1); //Send adress of register ONLY
 8000fb2:	4605      	mov	r5, r0
 8000fb4:	4c08      	ldr	r4, [pc, #32]	; (8000fd8 <readByte+0x30>)
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	460a      	mov	r2, r1
 8000fba:	4601      	mov	r1, r0
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	f002 fe51 	bl	8003c64 <HAL_I2C_Master_Transmit_IT>
	HAL_I2C_Master_Receive_IT(&hi2c2, address_tx, data, 1);
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	aa01      	add	r2, sp, #4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	4620      	mov	r0, r4
 8000fca:	f002 feb7 	bl	8003d3c <HAL_I2C_Master_Receive_IT>

	return data[0];
}
 8000fce:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000fd2:	b003      	add	sp, #12
 8000fd4:	bd30      	pop	{r4, r5, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000318 	.word	0x20000318

08000fdc <imu_init>:
IMU_StatusTypeDef imu_init(I2C_HandleTypeDef* handle) {
 8000fdc:	b510      	push	{r4, lr}
 8000fde:	4604      	mov	r4, r0
	printf("STM32 Online..\r\n");
 8000fe0:	480f      	ldr	r0, [pc, #60]	; (8001020 <imu_init+0x44>)
 8000fe2:	f006 fd07 	bl	80079f4 <puts>
	if (HAL_I2C_IsDeviceReady(handle, 0xD0, 2, 100) == HAL_OK) {
 8000fe6:	2364      	movs	r3, #100	; 0x64
 8000fe8:	2202      	movs	r2, #2
 8000fea:	21d0      	movs	r1, #208	; 0xd0
 8000fec:	4620      	mov	r0, r4
 8000fee:	f002 ff17 	bl	8003e20 <HAL_I2C_IsDeviceReady>
 8000ff2:	b100      	cbz	r0, 8000ff6 <imu_init+0x1a>
 8000ff4:	e7fe      	b.n	8000ff4 <imu_init+0x18>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Toggle LED on if so
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	480a      	ldr	r0, [pc, #40]	; (8001024 <imu_init+0x48>)
 8000ffa:	f002 f9a7 	bl	800334c <HAL_GPIO_TogglePin>
	uint8_t whoami = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 8000ffe:	2275      	movs	r2, #117	; 0x75
 8001000:	21d1      	movs	r1, #209	; 0xd1
 8001002:	20d0      	movs	r0, #208	; 0xd0
 8001004:	f7ff ffd0 	bl	8000fa8 <readByte>
 8001008:	4604      	mov	r4, r0
	if (whoami == 0x71) {
 800100a:	2871      	cmp	r0, #113	; 0x71
 800100c:	d106      	bne.n	800101c <imu_init+0x40>
		printf("MPU9250 online..\r\n");
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <imu_init+0x4c>)
 8001010:	f006 fcf0 	bl	80079f4 <puts>
		printf("whoami reg = %d ..\r\n", whoami);
 8001014:	4621      	mov	r1, r4
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <imu_init+0x50>)
 8001018:	f006 fc78 	bl	800790c <iprintf>
}
 800101c:	2000      	movs	r0, #0
 800101e:	bd10      	pop	{r4, pc}
 8001020:	0800b504 	.word	0x0800b504
 8001024:	40020000 	.word	0x40020000
 8001028:	0800b514 	.word	0x0800b514
 800102c:	0800b528 	.word	0x0800b528

08001030 <readBytes>:

void readBytes(uint8_t address_tx, uint8_t address_rx, uint8_t subAddress,
	uint8_t count, uint8_t * dest) {
 8001030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001032:	b087      	sub	sp, #28
 8001034:	460f      	mov	r7, r1
 8001036:	461c      	mov	r4, r3
 8001038:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	uint8_t data[14];
	uint8_t data_write[1];
	data_write[0] = subAddress;
 800103a:	a906      	add	r1, sp, #24
 800103c:	f801 2d14 	strb.w	r2, [r1, #-20]!
	//i2c.write(address, data_write, 1, 1); // no stop
	//i2c.read(address, data, count, 0);


	HAL_I2C_Master_Transmit_IT(&hi2c2, address_tx, data_write, 1);
 8001040:	4e0c      	ldr	r6, [pc, #48]	; (8001074 <readBytes+0x44>)
 8001042:	2301      	movs	r3, #1
 8001044:	460a      	mov	r2, r1
 8001046:	4601      	mov	r1, r0
 8001048:	4630      	mov	r0, r6
 800104a:	f002 fe0b 	bl	8003c64 <HAL_I2C_Master_Transmit_IT>
	HAL_I2C_Master_Transmit_IT(&hi2c2, address_rx, data, count);
 800104e:	4623      	mov	r3, r4
 8001050:	aa02      	add	r2, sp, #8
 8001052:	4639      	mov	r1, r7
 8001054:	4630      	mov	r0, r6
 8001056:	f002 fe05 	bl	8003c64 <HAL_I2C_Master_Transmit_IT>

	for (int ii = 0; ii < count; ii++) {
 800105a:	2300      	movs	r3, #0
 800105c:	e005      	b.n	800106a <readBytes+0x3a>
		dest[ii] = data[ii];
 800105e:	aa06      	add	r2, sp, #24
 8001060:	441a      	add	r2, r3
 8001062:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001066:	54ea      	strb	r2, [r5, r3]
	for (int ii = 0; ii < count; ii++) {
 8001068:	3301      	adds	r3, #1
 800106a:	429c      	cmp	r4, r3
 800106c:	dcf7      	bgt.n	800105e <readBytes+0x2e>
	}
}
 800106e:	b007      	add	sp, #28
 8001070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001072:	bf00      	nop
 8001074:	20000318 	.word	0x20000318

08001078 <getMres>:

void getMres() {

	switch (Mscale) {
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <getMres+0x1c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b113      	cbz	r3, 8001084 <getMres+0xc>
 800107e:	2b01      	cmp	r3, #1
 8001080:	d004      	beq.n	800108c <getMres+0x14>
 8001082:	4770      	bx	lr
	// Possible magnetometer scales (and their register bit settings) are:
	// 14 bit resolution (0) and 16 bit resolution (1)
	case MFS_14BITS:
		mRes = 10.0 * 4219.0 / 8190.0; // Proper scale to return milliGauss
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <getMres+0x20>)
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <getMres+0x24>)
 8001088:	601a      	str	r2, [r3, #0]
		break;
 800108a:	4770      	bx	lr
	case MFS_16BITS:
		mRes = 10.0 * 4219.0 / 32760.0; // Proper scale to return milliGauss
 800108c:	4b02      	ldr	r3, [pc, #8]	; (8001098 <getMres+0x20>)
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <getMres+0x28>)
 8001090:	601a      	str	r2, [r3, #0]
		break;
	}
}
 8001092:	4770      	bx	lr
 8001094:	20000001 	.word	0x20000001
 8001098:	200003b0 	.word	0x200003b0
 800109c:	40a4d84e 	.word	0x40a4d84e
 80010a0:	3fa4d84e 	.word	0x3fa4d84e

080010a4 <getGres>:

void getGres() {
	switch (Gscale) {
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <getGres+0x30>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d812      	bhi.n	80010d2 <getGres+0x2e>
 80010ac:	e8df f003 	tbb	[pc, r3]
 80010b0:	0e0a0602 	.word	0x0e0a0602
	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case GFS_250DPS:
		gRes = 250.0 / 32768.0;
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <getGres+0x34>)
 80010b6:	4a09      	ldr	r2, [pc, #36]	; (80010dc <getGres+0x38>)
 80010b8:	601a      	str	r2, [r3, #0]
		break;
 80010ba:	4770      	bx	lr
	case GFS_500DPS:
		gRes = 500.0 / 32768.0;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <getGres+0x34>)
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <getGres+0x3c>)
 80010c0:	601a      	str	r2, [r3, #0]
		break;
 80010c2:	4770      	bx	lr
	case GFS_1000DPS:
		gRes = 1000.0 / 32768.0;
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <getGres+0x34>)
 80010c6:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <getGres+0x40>)
 80010c8:	601a      	str	r2, [r3, #0]
		break;
 80010ca:	4770      	bx	lr
	case GFS_2000DPS:
		gRes = 2000.0 / 32768.0;
 80010cc:	4b02      	ldr	r3, [pc, #8]	; (80010d8 <getGres+0x34>)
 80010ce:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <getGres+0x44>)
 80010d0:	601a      	str	r2, [r3, #0]
		break;
	}
}
 80010d2:	4770      	bx	lr
 80010d4:	20000259 	.word	0x20000259
 80010d8:	20000394 	.word	0x20000394
 80010dc:	3bfa0000 	.word	0x3bfa0000
 80010e0:	3c7a0000 	.word	0x3c7a0000
 80010e4:	3cfa0000 	.word	0x3cfa0000
 80010e8:	3d7a0000 	.word	0x3d7a0000

080010ec <getAres>:

void getAres() {
	switch (Ascale) {
 80010ec:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <getAres+0x38>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d816      	bhi.n	8001122 <getAres+0x36>
 80010f4:	e8df f003 	tbb	[pc, r3]
 80010f8:	110c0702 	.word	0x110c0702
	// Possible accelerometer scales (and their register bit settings) are:
	// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	case AFS_2G:
		aRes = 2.0 / 32768.0;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <getAres+0x3c>)
 80010fe:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001102:	601a      	str	r2, [r3, #0]
		break;
 8001104:	4770      	bx	lr
	case AFS_4G:
		aRes = 4.0 / 32768.0;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <getAres+0x3c>)
 8001108:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800110c:	601a      	str	r2, [r3, #0]
		break;
 800110e:	4770      	bx	lr
	case AFS_8G:
		aRes = 8.0 / 32768.0;
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <getAres+0x3c>)
 8001112:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8001116:	601a      	str	r2, [r3, #0]
		break;
 8001118:	4770      	bx	lr
	case AFS_16G:
		aRes = 16.0 / 32768.0;
 800111a:	4b03      	ldr	r3, [pc, #12]	; (8001128 <getAres+0x3c>)
 800111c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001120:	601a      	str	r2, [r3, #0]
		break;
	}
}
 8001122:	4770      	bx	lr
 8001124:	20000258 	.word	0x20000258
 8001128:	20000388 	.word	0x20000388

0800112c <readAccelData>:

void readAccelData(int16_t * destination) {
 800112c:	b510      	push	{r4, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 8001132:	ab02      	add	r3, sp, #8
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2306      	movs	r3, #6
 8001138:	223b      	movs	r2, #59	; 0x3b
 800113a:	21d1      	movs	r1, #209	; 0xd1
 800113c:	20d0      	movs	r0, #208	; 0xd0
 800113e:	f7ff ff77 	bl	8001030 <readBytes>
			&rawData[0]); // Read the six raw data registers into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001142:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001146:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800114a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800114e:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001150:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8001154:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001158:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800115c:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 800115e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8001162:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001166:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800116a:	80a3      	strh	r3, [r4, #4]
}
 800116c:	b004      	add	sp, #16
 800116e:	bd10      	pop	{r4, pc}

08001170 <readGyroData>:

void readGyroData(int16_t * destination) {
 8001170:	b510      	push	{r4, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	4604      	mov	r4, r0
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 8001176:	ab02      	add	r3, sp, #8
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2306      	movs	r3, #6
 800117c:	2243      	movs	r2, #67	; 0x43
 800117e:	21d1      	movs	r1, #209	; 0xd1
 8001180:	20d0      	movs	r0, #208	; 0xd0
 8001182:	f7ff ff55 	bl	8001030 <readBytes>
			&rawData[0]); // Read the six raw data registers sequentially into data array
	destination[0] = (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001186:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800118a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800118e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001192:	8023      	strh	r3, [r4, #0]
	destination[1] = (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 8001194:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8001198:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800119c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011a0:	8063      	strh	r3, [r4, #2]
	destination[2] = (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80011a2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80011a6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80011aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80011ae:	80a3      	strh	r3, [r4, #4]
}
 80011b0:	b004      	add	sp, #16
 80011b2:	bd10      	pop	{r4, pc}

080011b4 <readMagData>:

void readMagData(int16_t * destination) {
 80011b4:	b510      	push	{r4, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	4604      	mov	r4, r0
	uint8_t rawData[7]; // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	//if (readByte(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set

		readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_XOUT_L, 7, &rawData[0]); // Read the six raw data and ST2 registers sequentially into data array
 80011ba:	ab02      	add	r3, sp, #8
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2307      	movs	r3, #7
 80011c0:	2203      	movs	r2, #3
 80011c2:	2119      	movs	r1, #25
 80011c4:	2018      	movs	r0, #24
 80011c6:	f7ff ff33 	bl	8001030 <readBytes>
		uint8_t c = rawData[6]; // End data read by reading ST2 register
 80011ca:	f89d 300e 	ldrb.w	r3, [sp, #14]
		if (!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
 80011ce:	f013 0f08 	tst.w	r3, #8
 80011d2:	d114      	bne.n	80011fe <readMagData+0x4a>
			destination[0] =
					(int16_t) (((int16_t) rawData[1] << 8) | rawData[0]); // Turn the MSB and LSB into a signed 16-bit value
 80011d4:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80011d8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80011dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[0] =
 80011e0:	8023      	strh	r3, [r4, #0]
			destination[1] =
					(int16_t) (((int16_t) rawData[3] << 8) | rawData[2]); // Data stored as little Endian
 80011e2:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80011e6:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80011ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[1] =
 80011ee:	8063      	strh	r3, [r4, #2]
			destination[2] =
					(int16_t) (((int16_t) rawData[5] << 8) | rawData[4]);
 80011f0:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80011f4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80011f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			destination[2] =
 80011fc:	80a3      	strh	r3, [r4, #4]
		}
	//}
}
 80011fe:	b004      	add	sp, #16
 8001200:	bd10      	pop	{r4, pc}

08001202 <resetMPU9250>:
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, TEMP_OUT_H, 2,
			&rawData[0]); // Read the two raw data registers sequentially into data array
	return (int16_t) (((int16_t) rawData[0]) << 8 | rawData[1]); // Turn the MSB and LSB into a 16-bit value
}

void resetMPU9250() {
 8001202:	b508      	push	{r3, lr}
	// reset device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	216b      	movs	r1, #107	; 0x6b
 8001208:	20d0      	movs	r0, #208	; 0xd0
 800120a:	f7ff feb9 	bl	8000f80 <writeByte>
	HAL_Delay(100);
 800120e:	2064      	movs	r0, #100	; 0x64
 8001210:	f001 fbdc 	bl	80029cc <HAL_Delay>
}
 8001214:	bd08      	pop	{r3, pc}
	...

08001218 <initAK8963>:

void initAK8963(float * destination) {
 8001218:	b510      	push	{r4, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	4604      	mov	r4, r0
	// First extract the factory calibration for each magnetometer axis
	uint8_t rawData[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 800121e:	2200      	movs	r2, #0
 8001220:	210a      	movs	r1, #10
 8001222:	2018      	movs	r0, #24
 8001224:	f7ff feac 	bl	8000f80 <writeByte>
	HAL_Delay(10);
 8001228:	200a      	movs	r0, #10
 800122a:	f001 fbcf 	bl	80029cc <HAL_Delay>
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 800122e:	220f      	movs	r2, #15
 8001230:	210a      	movs	r1, #10
 8001232:	2018      	movs	r0, #24
 8001234:	f7ff fea4 	bl	8000f80 <writeByte>
	HAL_Delay(10);
 8001238:	200a      	movs	r0, #10
 800123a:	f001 fbc7 	bl	80029cc <HAL_Delay>
	readBytes(AK8963_ADDRESS_TX, AK8963_ADDRESS_RX, AK8963_ASAX, 3,
 800123e:	ab03      	add	r3, sp, #12
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2303      	movs	r3, #3
 8001244:	2210      	movs	r2, #16
 8001246:	2119      	movs	r1, #25
 8001248:	2018      	movs	r0, #24
 800124a:	f7ff fef1 	bl	8001030 <readBytes>
			&rawData[0]);  // Read the x-, y-, and z-axis calibration values
	destination[0] = (float) (rawData[0] - 128) / 256.0f + 1.0f; // Return x-axis sensitivity adjustment values, etc.
 800124e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001252:	3b80      	subs	r3, #128	; 0x80
 8001254:	ee07 3a10 	vmov	s14, r3
 8001258:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800125c:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80012d4 <initAK8963+0xbc>
 8001260:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001264:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001268:	ee37 7a26 	vadd.f32	s14, s14, s13
 800126c:	ed84 7a00 	vstr	s14, [r4]
	destination[1] = (float) (rawData[1] - 128) / 256.0f + 1.0f;
 8001270:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001274:	3b80      	subs	r3, #128	; 0x80
 8001276:	ee07 3a10 	vmov	s14, r3
 800127a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800127e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8001282:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001286:	ed84 7a01 	vstr	s14, [r4, #4]
	destination[2] = (float) (rawData[2] - 128) / 256.0f + 1.0f;
 800128a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800128e:	3b80      	subs	r3, #128	; 0x80
 8001290:	ee07 3a90 	vmov	s15, r3
 8001294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001298:	ee67 7a86 	vmul.f32	s15, s15, s12
 800129c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80012a0:	edc4 7a02 	vstr	s15, [r4, #8]
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, 0x00); // Power down magnetometer
 80012a4:	2200      	movs	r2, #0
 80012a6:	210a      	movs	r1, #10
 80012a8:	2018      	movs	r0, #24
 80012aa:	f7ff fe69 	bl	8000f80 <writeByte>
	HAL_Delay(10);
 80012ae:	200a      	movs	r0, #10
 80012b0:	f001 fb8c 	bl	80029cc <HAL_Delay>
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS_TX, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <initAK8963+0xc0>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4a08      	ldr	r2, [pc, #32]	; (80012dc <initAK8963+0xc4>)
 80012ba:	7812      	ldrb	r2, [r2, #0]
 80012bc:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	210a      	movs	r1, #10
 80012c4:	2018      	movs	r0, #24
 80012c6:	f7ff fe5b 	bl	8000f80 <writeByte>
	HAL_Delay(10);
 80012ca:	200a      	movs	r0, #10
 80012cc:	f001 fb7e 	bl	80029cc <HAL_Delay>
}
 80012d0:	b004      	add	sp, #16
 80012d2:	bd10      	pop	{r4, pc}
 80012d4:	3b800000 	.word	0x3b800000
 80012d8:	20000001 	.word	0x20000001
 80012dc:	20000000 	.word	0x20000000

080012e0 <initMPU9250>:

void initMPU9250() {
 80012e0:	b510      	push	{r4, lr}
	// Initialize MPU9250 device
	// wake up device
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
 80012e2:	2200      	movs	r2, #0
 80012e4:	216b      	movs	r1, #107	; 0x6b
 80012e6:	20d0      	movs	r0, #208	; 0xd0
 80012e8:	f7ff fe4a 	bl	8000f80 <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 80012ec:	2064      	movs	r0, #100	; 0x64
 80012ee:	f001 fb6d 	bl	80029cc <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01); // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 80012f2:	2201      	movs	r2, #1
 80012f4:	216b      	movs	r1, #107	; 0x6b
 80012f6:	20d0      	movs	r0, #208	; 0xd0
 80012f8:	f7ff fe42 	bl	8000f80 <writeByte>

	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	// DLPF_CFG = bits 2:0 = 010 = 0x03; this sets the sample rate at 1 kHz for both
	// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x00);
 80012fc:	2200      	movs	r2, #0
 80012fe:	211a      	movs	r1, #26
 8001300:	20d0      	movs	r0, #208	; 0xd0
 8001302:	f7ff fe3d 	bl	8000f80 <writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Use a 200 Hz rate; the same rate set in CONFIG above
 8001306:	2200      	movs	r2, #0
 8001308:	2119      	movs	r1, #25
 800130a:	20d0      	movs	r0, #208	; 0xd0
 800130c:	f7ff fe38 	bl	8000f80 <writeByte>

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX,
 8001310:	221b      	movs	r2, #27
 8001312:	21d1      	movs	r1, #209	; 0xd1
 8001314:	4608      	mov	r0, r1
 8001316:	f7ff fe47 	bl	8000fa8 <readByte>
 800131a:	4604      	mov	r4, r0
	GYRO_CONFIG);
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 800131c:	f000 021f 	and.w	r2, r0, #31
 8001320:	211b      	movs	r1, #27
 8001322:	20d0      	movs	r0, #208	; 0xd0
 8001324:	f7ff fe2c 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 8001328:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 800132c:	211b      	movs	r1, #27
 800132e:	20d0      	movs	r0, #208	; 0xd0
 8001330:	f7ff fe26 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, c | Gscale << 3); // Set full scale range for the gyro
 8001334:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <initMPU9250+0xd8>)
 8001336:	781a      	ldrb	r2, [r3, #0]
 8001338:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	211b      	movs	r1, #27
 8001340:	20d0      	movs	r0, #208	; 0xd0
 8001342:	f7ff fe1d 	bl	8000f80 <writeByte>

	// Set accelerometer configuration
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG);
 8001346:	221c      	movs	r2, #28
 8001348:	21d1      	movs	r1, #209	; 0xd1
 800134a:	4608      	mov	r0, r1
 800134c:	f7ff fe2c 	bl	8000fa8 <readByte>
 8001350:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0xE0); // Clear self-test bits [7:5]
 8001352:	f000 021f 	and.w	r2, r0, #31
 8001356:	211c      	movs	r1, #28
 8001358:	20d0      	movs	r0, #208	; 0xd0
 800135a:	f7ff fe11 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c & ~0x18); // Clear AFS bits [4:3]
 800135e:	f004 02e7 	and.w	r2, r4, #231	; 0xe7
 8001362:	211c      	movs	r1, #28
 8001364:	20d0      	movs	r0, #208	; 0xd0
 8001366:	f7ff fe0b 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, c | Ascale << 3); // Set full scale range for the accelerometer
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <initMPU9250+0xdc>)
 800136c:	781a      	ldrb	r2, [r3, #0]
 800136e:	ea44 02c2 	orr.w	r2, r4, r2, lsl #3
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	211c      	movs	r1, #28
 8001376:	20d0      	movs	r0, #208	; 0xd0
 8001378:	f7ff fe02 	bl	8000f80 <writeByte>

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS_RX, MPU9250_ADDRESS_RX, ACCEL_CONFIG2);
 800137c:	221d      	movs	r2, #29
 800137e:	21d1      	movs	r1, #209	; 0xd1
 8001380:	4608      	mov	r0, r1
 8001382:	f7ff fe11 	bl	8000fa8 <readByte>
 8001386:	4604      	mov	r4, r0
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c & ~0x0F); // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 8001388:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800138c:	211d      	movs	r1, #29
 800138e:	20d0      	movs	r0, #208	; 0xd0
 8001390:	f7ff fdf6 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, c | 0x03); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001394:	f044 0203 	orr.w	r2, r4, #3
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	211d      	movs	r1, #29
 800139c:	20d0      	movs	r0, #208	; 0xd0
 800139e:	f7ff fdef 	bl	8000f80 <writeByte>
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	writeByte(MPU9250_ADDRESS_TX, INT_PIN_CFG, 0x22);
 80013a2:	2222      	movs	r2, #34	; 0x22
 80013a4:	2137      	movs	r1, #55	; 0x37
 80013a6:	20d0      	movs	r0, #208	; 0xd0
 80013a8:	f7ff fdea 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 80013ac:	2201      	movs	r2, #1
 80013ae:	2138      	movs	r1, #56	; 0x38
 80013b0:	20d0      	movs	r0, #208	; 0xd0
 80013b2:	f7ff fde5 	bl	8000f80 <writeByte>
}
 80013b6:	bd10      	pop	{r4, pc}
 80013b8:	20000259 	.word	0x20000259
 80013bc:	20000258 	.word	0x20000258

080013c0 <calibrateMPU9250>:

// Function which accumulates gyro and accelerometer data after device initialization. It calculates the average
// of the at-rest readings and then loads the resulting offsets into accelerometer and gyro bias registers.
void calibrateMPU9250(float * dest1, float * dest2) {
 80013c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c4:	b08c      	sub	sp, #48	; 0x30
 80013c6:	4607      	mov	r7, r0
 80013c8:	460e      	mov	r6, r1
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3] = { 0, 0, 0 }, accel_bias[3] = { 0, 0, 0 };
 80013ca:	2400      	movs	r4, #0
 80013cc:	9406      	str	r4, [sp, #24]
 80013ce:	9407      	str	r4, [sp, #28]
 80013d0:	9408      	str	r4, [sp, #32]
 80013d2:	9403      	str	r4, [sp, #12]
 80013d4:	9404      	str	r4, [sp, #16]
 80013d6:	9405      	str	r4, [sp, #20]

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 80013d8:	2280      	movs	r2, #128	; 0x80
 80013da:	216b      	movs	r1, #107	; 0x6b
 80013dc:	20d0      	movs	r0, #208	; 0xd0
 80013de:	f7ff fdcf 	bl	8000f80 <writeByte>
	HAL_Delay(100);
 80013e2:	2064      	movs	r0, #100	; 0x64
 80013e4:	f001 faf2 	bl	80029cc <HAL_Delay>

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x01);
 80013e8:	2201      	movs	r2, #1
 80013ea:	216b      	movs	r1, #107	; 0x6b
 80013ec:	20d0      	movs	r0, #208	; 0xd0
 80013ee:	f7ff fdc7 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_2, 0x00);
 80013f2:	4622      	mov	r2, r4
 80013f4:	216c      	movs	r1, #108	; 0x6c
 80013f6:	20d0      	movs	r0, #208	; 0xd0
 80013f8:	f7ff fdc2 	bl	8000f80 <writeByte>
	HAL_Delay(200);
 80013fc:	20c8      	movs	r0, #200	; 0xc8
 80013fe:	f001 fae5 	bl	80029cc <HAL_Delay>

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS_TX, INT_ENABLE, 0x00); // Disable all interrupts
 8001402:	4622      	mov	r2, r4
 8001404:	2138      	movs	r1, #56	; 0x38
 8001406:	20d0      	movs	r0, #208	; 0xd0
 8001408:	f7ff fdba 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x00);      // Disable FIFO
 800140c:	4622      	mov	r2, r4
 800140e:	2123      	movs	r1, #35	; 0x23
 8001410:	20d0      	movs	r0, #208	; 0xd0
 8001412:	f7ff fdb5 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, PWR_MGMT_1, 0x00); // Turn on internal clock source
 8001416:	4622      	mov	r2, r4
 8001418:	216b      	movs	r1, #107	; 0x6b
 800141a:	20d0      	movs	r0, #208	; 0xd0
 800141c:	f7ff fdb0 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, I2C_MST_CTRL, 0x00); // Disable I2C master
 8001420:	4622      	mov	r2, r4
 8001422:	2124      	movs	r1, #36	; 0x24
 8001424:	20d0      	movs	r0, #208	; 0xd0
 8001426:	f7ff fdab 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x00); // Disable FIFO and I2C master modes
 800142a:	4622      	mov	r2, r4
 800142c:	216a      	movs	r1, #106	; 0x6a
 800142e:	20d0      	movs	r0, #208	; 0xd0
 8001430:	f7ff fda6 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8001434:	220c      	movs	r2, #12
 8001436:	216a      	movs	r1, #106	; 0x6a
 8001438:	20d0      	movs	r0, #208	; 0xd0
 800143a:	f7ff fda1 	bl	8000f80 <writeByte>
	HAL_Delay(15);
 800143e:	200f      	movs	r0, #15
 8001440:	f001 fac4 	bl	80029cc <HAL_Delay>

	// Configure MPU9250 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x01); // Set low-pass filter to 188 Hz
 8001444:	2201      	movs	r2, #1
 8001446:	211a      	movs	r1, #26
 8001448:	20d0      	movs	r0, #208	; 0xd0
 800144a:	f7ff fd99 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Set sample rate to 1 kHz
 800144e:	4622      	mov	r2, r4
 8001450:	2119      	movs	r1, #25
 8001452:	20d0      	movs	r0, #208	; 0xd0
 8001454:	f7ff fd94 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00); // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001458:	4622      	mov	r2, r4
 800145a:	211b      	movs	r1, #27
 800145c:	20d0      	movs	r0, #208	; 0xd0
 800145e:	f7ff fd8f 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001462:	4622      	mov	r2, r4
 8001464:	211c      	movs	r1, #28
 8001466:	20d0      	movs	r0, #208	; 0xd0
 8001468:	f7ff fd8a 	bl	8000f80 <writeByte>

	uint16_t gyrosensitivity = 131;   // = 131 LSB/degrees/sec
	uint16_t accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS_TX, USER_CTRL, 0x40);   // Enable FIFO
 800146c:	2240      	movs	r2, #64	; 0x40
 800146e:	216a      	movs	r1, #106	; 0x6a
 8001470:	20d0      	movs	r0, #208	; 0xd0
 8001472:	f7ff fd85 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x78); // Enable gyro and accelerometer sensors for FIFO (max size 512 bytes in MPU-9250)
 8001476:	2278      	movs	r2, #120	; 0x78
 8001478:	2123      	movs	r1, #35	; 0x23
 800147a:	20d0      	movs	r0, #208	; 0xd0
 800147c:	f7ff fd80 	bl	8000f80 <writeByte>
	HAL_Delay(40); // accumulate 40 samples in 80 milliseconds = 480 bytes
 8001480:	2028      	movs	r0, #40	; 0x28
 8001482:	f001 faa3 	bl	80029cc <HAL_Delay>

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS_TX, FIFO_EN, 0x00); // Disable gyro and accelerometer sensors for FIFO
 8001486:	4622      	mov	r2, r4
 8001488:	2123      	movs	r1, #35	; 0x23
 800148a:	20d0      	movs	r0, #208	; 0xd0
 800148c:	f7ff fd78 	bl	8000f80 <writeByte>
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8001490:	ab09      	add	r3, sp, #36	; 0x24
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2302      	movs	r3, #2
 8001496:	2272      	movs	r2, #114	; 0x72
 8001498:	21d1      	movs	r1, #209	; 0xd1
 800149a:	20d0      	movs	r0, #208	; 0xd0
 800149c:	f7ff fdc8 	bl	8001030 <readBytes>
	fifo_count = ((uint16_t) data[0] << 8) | data[1];
 80014a0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80014a4:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 80014a8:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	packet_count = fifo_count / 12; // How many sets of full gyro and accelerometer data for averaging
 80014ac:	4b6d      	ldr	r3, [pc, #436]	; (8001664 <calibrateMPU9250+0x2a4>)
 80014ae:	fba3 3505 	umull	r3, r5, r3, r5
 80014b2:	08ed      	lsrs	r5, r5, #3

	for (ii = 0; ii < packet_count; ii++) {
 80014b4:	e045      	b.n	8001542 <calibrateMPU9250+0x182>
		int16_t accel_temp[3] = { 0, 0, 0 }, gyro_temp[3] = { 0, 0, 0 };
		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, FIFO_R_W, 12,
 80014b6:	ab09      	add	r3, sp, #36	; 0x24
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	230c      	movs	r3, #12
 80014bc:	2274      	movs	r2, #116	; 0x74
 80014be:	21d1      	movs	r1, #209	; 0xd1
 80014c0:	20d0      	movs	r0, #208	; 0xd0
 80014c2:	f7ff fdb5 	bl	8001030 <readBytes>
				&data[0]); // read data for averaging
		accel_temp[0] = (int16_t) (((int16_t) data[0] << 8) | data[1]); // Form signed 16-bit integer for each sample in FIFO
 80014c6:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 80014ca:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
 80014ce:	ea40 2808 	orr.w	r8, r0, r8, lsl #8
		accel_temp[1] = (int16_t) (((int16_t) data[2] << 8) | data[3]);
 80014d2:	f89d e026 	ldrb.w	lr, [sp, #38]	; 0x26
 80014d6:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 80014da:	ea40 2e0e 	orr.w	lr, r0, lr, lsl #8
		accel_temp[2] = (int16_t) (((int16_t) data[4] << 8) | data[5]);
 80014de:	f89d c028 	ldrb.w	ip, [sp, #40]	; 0x28
 80014e2:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 80014e6:	ea40 2c0c 	orr.w	ip, r0, ip, lsl #8
		gyro_temp[0] = (int16_t) (((int16_t) data[6] << 8) | data[7]);
 80014ea:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 80014ee:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
 80014f2:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
		gyro_temp[1] = (int16_t) (((int16_t) data[8] << 8) | data[9]);
 80014f6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80014fa:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 80014fe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		gyro_temp[2] = (int16_t) (((int16_t) data[10] << 8) | data[11]);
 8001502:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
 8001506:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800150a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 800150e:	9803      	ldr	r0, [sp, #12]
 8001510:	fa00 f088 	sxtah	r0, r0, r8
 8001514:	9003      	str	r0, [sp, #12]
		accel_bias[1] += (int32_t) accel_temp[1];
 8001516:	9804      	ldr	r0, [sp, #16]
 8001518:	fa00 f08e 	sxtah	r0, r0, lr
 800151c:	9004      	str	r0, [sp, #16]
		accel_bias[2] += (int32_t) accel_temp[2];
 800151e:	9805      	ldr	r0, [sp, #20]
 8001520:	fa00 f08c 	sxtah	r0, r0, ip
 8001524:	9005      	str	r0, [sp, #20]
		gyro_bias[0] += (int32_t) gyro_temp[0];
 8001526:	9806      	ldr	r0, [sp, #24]
 8001528:	fa00 f181 	sxtah	r1, r0, r1
 800152c:	9106      	str	r1, [sp, #24]
		gyro_bias[1] += (int32_t) gyro_temp[1];
 800152e:	9907      	ldr	r1, [sp, #28]
 8001530:	fa01 f282 	sxtah	r2, r1, r2
 8001534:	9207      	str	r2, [sp, #28]
		gyro_bias[2] += (int32_t) gyro_temp[2];
 8001536:	9a08      	ldr	r2, [sp, #32]
 8001538:	fa02 f383 	sxtah	r3, r2, r3
 800153c:	9308      	str	r3, [sp, #32]
	for (ii = 0; ii < packet_count; ii++) {
 800153e:	3401      	adds	r4, #1
 8001540:	b2a4      	uxth	r4, r4
 8001542:	42ac      	cmp	r4, r5
 8001544:	d3b7      	bcc.n	80014b6 <calibrateMPU9250+0xf6>

	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8001546:	9b03      	ldr	r3, [sp, #12]
 8001548:	fb93 f8f5 	sdiv	r8, r3, r5
	accel_bias[1] /= (int32_t) packet_count;
 800154c:	9b04      	ldr	r3, [sp, #16]
 800154e:	fb93 f4f5 	sdiv	r4, r3, r5
	accel_bias[2] /= (int32_t) packet_count;
 8001552:	9805      	ldr	r0, [sp, #20]
 8001554:	fb90 f0f5 	sdiv	r0, r0, r5
	gyro_bias[0] /= (int32_t) packet_count;
 8001558:	9906      	ldr	r1, [sp, #24]
 800155a:	fb91 f1f5 	sdiv	r1, r1, r5
	gyro_bias[1] /= (int32_t) packet_count;
 800155e:	9a07      	ldr	r2, [sp, #28]
 8001560:	fb92 f2f5 	sdiv	r2, r2, r5
	gyro_bias[2] /= (int32_t) packet_count;
 8001564:	9b08      	ldr	r3, [sp, #32]
 8001566:	fb93 f5f5 	sdiv	r5, r3, r5

	if (accel_bias[2] > 0L) {
 800156a:	2800      	cmp	r0, #0
 800156c:	dd4f      	ble.n	800160e <calibrateMPU9250+0x24e>
		accel_bias[2] -= (int32_t) accelsensitivity;
 800156e:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 8001572:	9005      	str	r0, [sp, #20]
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
	}

	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001574:	424b      	negs	r3, r1
 8001576:	2b00      	cmp	r3, #0
 8001578:	db4d      	blt.n	8001616 <calibrateMPU9250+0x256>
 800157a:	1098      	asrs	r0, r3, #2
 800157c:	129b      	asrs	r3, r3, #10
 800157e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data[1] = (-gyro_bias[0] / 4) & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8001582:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
	data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 8001586:	4253      	negs	r3, r2
 8001588:	2b00      	cmp	r3, #0
 800158a:	db46      	blt.n	800161a <calibrateMPU9250+0x25a>
 800158c:	1098      	asrs	r0, r3, #2
 800158e:	129b      	asrs	r3, r3, #10
 8001590:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	data[3] = (-gyro_bias[1] / 4) & 0xFF;
 8001594:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
	data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 8001598:	426b      	negs	r3, r5
 800159a:	2b00      	cmp	r3, #0
 800159c:	db3f      	blt.n	800161e <calibrateMPU9250+0x25e>
 800159e:	1098      	asrs	r0, r3, #2
 80015a0:	129b      	asrs	r3, r3, #10
 80015a2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	data[5] = (-gyro_bias[2] / 4) & 0xFF;
 80015a6:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
	 writeByte(MPU9250_ADDRESS_TX, YG_OFFSET_H, data[2]);
	 writeByte(MPU9250_ADDRESS_TX, YG_OFFSET_L, data[3]);
	 writeByte(MPU9250_ADDRESS_TX, ZG_OFFSET_H, data[4]);
	 writeByte(MPU9250_ADDRESS_TX, ZG_OFFSET_L, data[5]);
	 */
	dest1[0] = (float) gyro_bias[0] / (float) gyrosensitivity; // construct gyro bias in deg/s for later manual subtraction
 80015aa:	ee07 1a90 	vmov	s15, r1
 80015ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001668 <calibrateMPU9250+0x2a8>
 80015b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015ba:	edc7 6a00 	vstr	s13, [r7]
	dest1[1] = (float) gyro_bias[1] / (float) gyrosensitivity;
 80015be:	ee07 2a90 	vmov	s15, r2
 80015c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015ca:	edc7 6a01 	vstr	s13, [r7, #4]
	dest1[2] = (float) gyro_bias[2] / (float) gyrosensitivity;
 80015ce:	ee07 5a90 	vmov	s15, r5
 80015d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015da:	edc7 6a02 	vstr	s13, [r7, #8]
	// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = { 0, 0, 0 }; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 80015de:	ad09      	add	r5, sp, #36	; 0x24
 80015e0:	9500      	str	r5, [sp, #0]
 80015e2:	2302      	movs	r3, #2
 80015e4:	2277      	movs	r2, #119	; 0x77
 80015e6:	21d1      	movs	r1, #209	; 0xd1
 80015e8:	20d0      	movs	r0, #208	; 0xd0
 80015ea:	f7ff fd21 	bl	8001030 <readBytes>
	accel_bias_reg[0] = (int16_t) ((int16_t) data[0] << 8) | data[1];
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, YA_OFFSET_H, 2, &data[0]);
 80015ee:	9500      	str	r5, [sp, #0]
 80015f0:	2302      	movs	r3, #2
 80015f2:	227a      	movs	r2, #122	; 0x7a
 80015f4:	21d1      	movs	r1, #209	; 0xd1
 80015f6:	20d0      	movs	r0, #208	; 0xd0
 80015f8:	f7ff fd1a 	bl	8001030 <readBytes>
	accel_bias_reg[1] = (int16_t) ((int16_t) data[0] << 8) | data[1];
	readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ZA_OFFSET_H, 2, &data[0]);
 80015fc:	9500      	str	r5, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	227d      	movs	r2, #125	; 0x7d
 8001602:	21d1      	movs	r1, #209	; 0xd1
 8001604:	20d0      	movs	r0, #208	; 0xd0
 8001606:	f7ff fd13 	bl	8001030 <readBytes>
	accel_bias_reg[2] = (int16_t) ((int16_t) data[0] << 8) | data[1];

	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = { 0, 0, 0 }; // Define array to hold mask bit for each accelerometer bias axis

	for (ii = 0; ii < 3; ii++) {
 800160a:	2300      	movs	r3, #0
 800160c:	e00b      	b.n	8001626 <calibrateMPU9250+0x266>
		accel_bias[2] += (int32_t) accelsensitivity;
 800160e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 8001612:	9005      	str	r0, [sp, #20]
 8001614:	e7ae      	b.n	8001574 <calibrateMPU9250+0x1b4>
	data[0] = (-gyro_bias[0] / 4 >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001616:	3303      	adds	r3, #3
 8001618:	e7af      	b.n	800157a <calibrateMPU9250+0x1ba>
	data[2] = (-gyro_bias[1] / 4 >> 8) & 0xFF;
 800161a:	3303      	adds	r3, #3
 800161c:	e7b6      	b.n	800158c <calibrateMPU9250+0x1cc>
	data[4] = (-gyro_bias[2] / 4 >> 8) & 0xFF;
 800161e:	3303      	adds	r3, #3
 8001620:	e7bd      	b.n	800159e <calibrateMPU9250+0x1de>
	for (ii = 0; ii < 3; ii++) {
 8001622:	3301      	adds	r3, #1
 8001624:	b29b      	uxth	r3, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d9fb      	bls.n	8001622 <calibrateMPU9250+0x262>
	 writeByte(MPU9250_ADDRESS_TX, YA_OFFSET_L, data[3]);
	 writeByte(MPU9250_ADDRESS_TX, ZA_OFFSET_H, data[4]);
	 writeByte(MPU9250_ADDRESS_TX, ZA_OFFSET_L, data[5]);
	 */
	// Output scaled accelerometer biases for manual subtraction in the main program
	dest2[0] = (float) accel_bias[0] / (float) accelsensitivity;
 800162a:	ee07 8a90 	vmov	s15, r8
 800162e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001632:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800166c <calibrateMPU9250+0x2ac>
 8001636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800163a:	edc6 7a00 	vstr	s15, [r6]
	dest2[1] = (float) accel_bias[1] / (float) accelsensitivity;
 800163e:	ee07 4a90 	vmov	s15, r4
 8001642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001646:	ee67 7a87 	vmul.f32	s15, s15, s14
 800164a:	edc6 7a01 	vstr	s15, [r6, #4]
	dest2[2] = (float) accel_bias[2] / (float) accelsensitivity;
 800164e:	eddd 7a05 	vldr	s15, [sp, #20]
 8001652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001656:	ee67 7a87 	vmul.f32	s15, s15, s14
 800165a:	edc6 7a02 	vstr	s15, [r6, #8]
}
 800165e:	b00c      	add	sp, #48	; 0x30
 8001660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001664:	aaaaaaab 	.word	0xaaaaaaab
 8001668:	43030000 	.word	0x43030000
 800166c:	38800000 	.word	0x38800000

08001670 <MPU9250SelfTest>:

// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU9250SelfTest(float * destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
		{
 8001670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001674:	ed2d 8b08 	vpush	{d8-d11}
 8001678:	b093      	sub	sp, #76	; 0x4c
 800167a:	4605      	mov	r5, r0
	uint8_t rawData[6] = { 0, 0, 0, 0, 0, 0 };
 800167c:	2400      	movs	r4, #0
 800167e:	9410      	str	r4, [sp, #64]	; 0x40
 8001680:	f8ad 4044 	strh.w	r4, [sp, #68]	; 0x44
	uint8_t selfTest[6];
	int16_t gAvg[3], aAvg[3], aSTAvg[3], gSTAvg[3];
	float factoryTrim[6];
	uint8_t FS = 0;

	writeByte(MPU9250_ADDRESS_TX, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 8001684:	4622      	mov	r2, r4
 8001686:	2119      	movs	r1, #25
 8001688:	20d0      	movs	r0, #208	; 0xd0
 800168a:	f7ff fc79 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 800168e:	2202      	movs	r2, #2
 8001690:	211a      	movs	r1, #26
 8001692:	20d0      	movs	r0, #208	; 0xd0
 8001694:	f7ff fc74 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 1 << FS); // Set full scale range for the gyro to 250 dps
 8001698:	2201      	movs	r2, #1
 800169a:	211b      	movs	r1, #27
 800169c:	20d0      	movs	r0, #208	; 0xd0
 800169e:	f7ff fc6f 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 80016a2:	2202      	movs	r2, #2
 80016a4:	211d      	movs	r1, #29
 80016a6:	20d0      	movs	r0, #208	; 0xd0
 80016a8:	f7ff fc6a 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 1 << FS); // Set full scale range for the accelerometer to 2 g
 80016ac:	2201      	movs	r2, #1
 80016ae:	211c      	movs	r1, #28
 80016b0:	20d0      	movs	r0, #208	; 0xd0
 80016b2:	f7ff fc65 	bl	8000f80 <writeByte>

	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 80016b6:	e051      	b.n	800175c <MPU9250SelfTest+0xec>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 80016b8:	ae10      	add	r6, sp, #64	; 0x40
 80016ba:	9600      	str	r6, [sp, #0]
 80016bc:	2306      	movs	r3, #6
 80016be:	223b      	movs	r2, #59	; 0x3b
 80016c0:	21d1      	movs	r1, #209	; 0xd1
 80016c2:	20d0      	movs	r0, #208	; 0xd0
 80016c4:	f7ff fcb4 	bl	8001030 <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80016c8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80016cc:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80016d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016d4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80016d8:	4413      	add	r3, r2
 80016da:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		aAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80016de:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80016e2:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80016e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016ea:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80016ee:	4413      	add	r3, r2
 80016f0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		aAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80016f4:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80016f8:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 80016fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001700:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8001704:	4413      	add	r3, r2
 8001706:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 800170a:	9600      	str	r6, [sp, #0]
 800170c:	2306      	movs	r3, #6
 800170e:	2243      	movs	r2, #67	; 0x43
 8001710:	21d1      	movs	r1, #209	; 0xd1
 8001712:	20d0      	movs	r0, #208	; 0xd0
 8001714:	f7ff fc8c 	bl	8001030 <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001718:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 800171c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8001720:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001724:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8001728:	4413      	add	r3, r2
 800172a:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		gAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 800172e:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8001732:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 8001736:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800173a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 800173e:	4413      	add	r3, r2
 8001740:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		gAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001744:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001748:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 800174c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001750:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8001754:	4413      	add	r3, r2
 8001756:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	for (int ii = 0; ii < 200; ii++) { // get average current values of gyro and acclerometer
 800175a:	3401      	adds	r4, #1
 800175c:	2cc7      	cmp	r4, #199	; 0xc7
 800175e:	ddab      	ble.n	80016b8 <MPU9250SelfTest+0x48>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8001760:	2400      	movs	r4, #0
 8001762:	e016      	b.n	8001792 <MPU9250SelfTest+0x122>
		aAvg[ii] /= 200;
 8001764:	ab12      	add	r3, sp, #72	; 0x48
 8001766:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 800176a:	f931 2c18 	ldrsh.w	r2, [r1, #-24]
 800176e:	48c0      	ldr	r0, [pc, #768]	; (8001a70 <MPU9250SelfTest+0x400>)
 8001770:	fb80 6302 	smull	r6, r3, r0, r2
 8001774:	17d2      	asrs	r2, r2, #31
 8001776:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 800177a:	f821 2c18 	strh.w	r2, [r1, #-24]
		gAvg[ii] /= 200;
 800177e:	f931 3c10 	ldrsh.w	r3, [r1, #-16]
 8001782:	fb80 2003 	smull	r2, r0, r0, r3
 8001786:	17db      	asrs	r3, r3, #31
 8001788:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 800178c:	f821 3c10 	strh.w	r3, [r1, #-16]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average current readings
 8001790:	3401      	adds	r4, #1
 8001792:	2c02      	cmp	r4, #2
 8001794:	dde6      	ble.n	8001764 <MPU9250SelfTest+0xf4>
	}

	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 8001796:	22e0      	movs	r2, #224	; 0xe0
 8001798:	211c      	movs	r1, #28
 800179a:	20d0      	movs	r0, #208	; 0xd0
 800179c:	f7ff fbf0 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80017a0:	22e0      	movs	r2, #224	; 0xe0
 80017a2:	211b      	movs	r1, #27
 80017a4:	20d0      	movs	r0, #208	; 0xd0
 80017a6:	f7ff fbeb 	bl	8000f80 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 80017aa:	2019      	movs	r0, #25
 80017ac:	f001 f90e 	bl	80029cc <HAL_Delay>

	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 80017b0:	2400      	movs	r4, #0
 80017b2:	e051      	b.n	8001858 <MPU9250SelfTest+0x1e8>

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, ACCEL_XOUT_H, 6,
 80017b4:	ae10      	add	r6, sp, #64	; 0x40
 80017b6:	9600      	str	r6, [sp, #0]
 80017b8:	2306      	movs	r3, #6
 80017ba:	223b      	movs	r2, #59	; 0x3b
 80017bc:	21d1      	movs	r1, #209	; 0xd1
 80017be:	20d0      	movs	r0, #208	; 0xd0
 80017c0:	f7ff fc36 	bl	8001030 <readBytes>
				&rawData[0]); // Read the six raw data registers into data array
		aSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 80017c4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80017c8:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80017cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017d0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80017d4:	4413      	add	r3, r2
 80017d6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		aSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 80017da:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80017de:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80017e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017e6:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80017ea:	4413      	add	r3, r2
 80017ec:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		aSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 80017f0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 80017f4:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 80017f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017fc:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8001800:	4413      	add	r3, r2
 8001802:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

		readBytes(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, GYRO_XOUT_H, 6,
 8001806:	9600      	str	r6, [sp, #0]
 8001808:	2306      	movs	r3, #6
 800180a:	2243      	movs	r2, #67	; 0x43
 800180c:	21d1      	movs	r1, #209	; 0xd1
 800180e:	20d0      	movs	r0, #208	; 0xd0
 8001810:	f7ff fc0e 	bl	8001030 <readBytes>
				&rawData[0]); // Read the six raw data registers sequentially into data array
		gSTAvg[0] += (int16_t) (((int16_t) rawData[0] << 8) | rawData[1]); // Turn the MSB and LSB into a signed 16-bit value
 8001814:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8001818:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 800181c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001820:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8001824:	4413      	add	r3, r2
 8001826:	f8ad 3020 	strh.w	r3, [sp, #32]
		gSTAvg[1] += (int16_t) (((int16_t) rawData[2] << 8) | rawData[3]);
 800182a:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 800182e:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 8001832:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001836:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 800183a:	4413      	add	r3, r2
 800183c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		gSTAvg[2] += (int16_t) (((int16_t) rawData[4] << 8) | rawData[5]);
 8001840:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8001844:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
 8001848:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800184c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8001850:	4413      	add	r3, r2
 8001852:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	for (int ii = 0; ii < 200; ii++) { // get average self-test values of gyro and acclerometer
 8001856:	3401      	adds	r4, #1
 8001858:	2cc7      	cmp	r4, #199	; 0xc7
 800185a:	ddab      	ble.n	80017b4 <MPU9250SelfTest+0x144>
	}

	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 800185c:	2400      	movs	r4, #0
 800185e:	e016      	b.n	800188e <MPU9250SelfTest+0x21e>
		aSTAvg[ii] /= 200;
 8001860:	ab12      	add	r3, sp, #72	; 0x48
 8001862:	eb03 0144 	add.w	r1, r3, r4, lsl #1
 8001866:	f931 2c20 	ldrsh.w	r2, [r1, #-32]
 800186a:	4881      	ldr	r0, [pc, #516]	; (8001a70 <MPU9250SelfTest+0x400>)
 800186c:	fb80 6302 	smull	r6, r3, r0, r2
 8001870:	17d2      	asrs	r2, r2, #31
 8001872:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
 8001876:	f821 2c20 	strh.w	r2, [r1, #-32]
		gSTAvg[ii] /= 200;
 800187a:	f931 3c28 	ldrsh.w	r3, [r1, #-40]
 800187e:	fb80 2003 	smull	r2, r0, r0, r3
 8001882:	17db      	asrs	r3, r3, #31
 8001884:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 8001888:	f821 3c28 	strh.w	r3, [r1, #-40]
	for (int ii = 0; ii < 3; ii++) { // Get average of 200 values and store as average self-test readings
 800188c:	3401      	adds	r4, #1
 800188e:	2c02      	cmp	r4, #2
 8001890:	dde6      	ble.n	8001860 <MPU9250SelfTest+0x1f0>
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS_TX, ACCEL_CONFIG, 0x00);
 8001892:	2200      	movs	r2, #0
 8001894:	211c      	movs	r1, #28
 8001896:	20d0      	movs	r0, #208	; 0xd0
 8001898:	f7ff fb72 	bl	8000f80 <writeByte>
	writeByte(MPU9250_ADDRESS_TX, GYRO_CONFIG, 0x00);
 800189c:	2200      	movs	r2, #0
 800189e:	211b      	movs	r1, #27
 80018a0:	20d0      	movs	r0, #208	; 0xd0
 80018a2:	f7ff fb6d 	bl	8000f80 <writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 80018a6:	2019      	movs	r0, #25
 80018a8:	f001 f890 	bl	80029cc <HAL_Delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018ac:	220d      	movs	r2, #13
 80018ae:	21d1      	movs	r1, #209	; 0xd1
 80018b0:	20d0      	movs	r0, #208	; 0xd0
 80018b2:	f7ff fb79 	bl	8000fa8 <readByte>
 80018b6:	ee08 0a10 	vmov	s16, r0
	SELF_TEST_X_ACCEL); // X-axis accel self-test results
	selfTest[1] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018ba:	220e      	movs	r2, #14
 80018bc:	21d1      	movs	r1, #209	; 0xd1
 80018be:	20d0      	movs	r0, #208	; 0xd0
 80018c0:	f7ff fb72 	bl	8000fa8 <readByte>
 80018c4:	ee0b 0a10 	vmov	s22, r0
	SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
	selfTest[2] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018c8:	220f      	movs	r2, #15
 80018ca:	21d1      	movs	r1, #209	; 0xd1
 80018cc:	20d0      	movs	r0, #208	; 0xd0
 80018ce:	f7ff fb6b 	bl	8000fa8 <readByte>
 80018d2:	ee0a 0a90 	vmov	s21, r0
	SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
	selfTest[3] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018d6:	2200      	movs	r2, #0
 80018d8:	21d1      	movs	r1, #209	; 0xd1
 80018da:	20d0      	movs	r0, #208	; 0xd0
 80018dc:	f7ff fb64 	bl	8000fa8 <readByte>
 80018e0:	ee0a 0a10 	vmov	s20, r0
	SELF_TEST_X_GYRO); // X-axis gyro self-test results
	selfTest[4] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018e4:	2201      	movs	r2, #1
 80018e6:	21d1      	movs	r1, #209	; 0xd1
 80018e8:	20d0      	movs	r0, #208	; 0xd0
 80018ea:	f7ff fb5d 	bl	8000fa8 <readByte>
 80018ee:	ee09 0a90 	vmov	s19, r0
	SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
	selfTest[5] = readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX,
 80018f2:	2202      	movs	r2, #2
 80018f4:	21d1      	movs	r1, #209	; 0xd1
 80018f6:	20d0      	movs	r0, #208	; 0xd0
 80018f8:	f7ff fb56 	bl	8000fa8 <readByte>
 80018fc:	ee09 0a10 	vmov	s18, r0
	SELF_TEST_Z_GYRO); // Z-axis gyro self-test results

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[0] - 1.0))); // FT[Xa] factory trim calculation
 8001900:	eef8 7a48 	vcvt.f32.u32	s15, s16
 8001904:	ee17 0a90 	vmov	r0, s15
 8001908:	f7fe fdce 	bl	80004a8 <__aeabi_f2d>
 800190c:	2200      	movs	r2, #0
 800190e:	4b59      	ldr	r3, [pc, #356]	; (8001a74 <MPU9250SelfTest+0x404>)
 8001910:	f7fe fc6a 	bl	80001e8 <__aeabi_dsub>
 8001914:	ed9f 8b52 	vldr	d8, [pc, #328]	; 8001a60 <MPU9250SelfTest+0x3f0>
 8001918:	ec41 0b11 	vmov	d1, r0, r1
 800191c:	eeb0 0a48 	vmov.f32	s0, s16
 8001920:	eef0 0a68 	vmov.f32	s1, s17
 8001924:	f007 ff72 	bl	800980c <pow>
 8001928:	a34f      	add	r3, pc, #316	; (adr r3, 8001a68 <MPU9250SelfTest+0x3f8>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	ec51 0b10 	vmov	r0, r1, d0
 8001932:	f7fe fe11 	bl	8000558 <__aeabi_dmul>
 8001936:	f7ff f821 	bl	800097c <__aeabi_d2f>
	factoryTrim[0] = (float) (2620 / 1 << FS)
 800193a:	9002      	str	r0, [sp, #8]
	factoryTrim[1] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[1] - 1.0))); // FT[Ya] factory trim calculation
 800193c:	eef8 7a4b 	vcvt.f32.u32	s15, s22
 8001940:	ee17 0a90 	vmov	r0, s15
 8001944:	f7fe fdb0 	bl	80004a8 <__aeabi_f2d>
 8001948:	2200      	movs	r2, #0
 800194a:	4b4a      	ldr	r3, [pc, #296]	; (8001a74 <MPU9250SelfTest+0x404>)
 800194c:	f7fe fc4c 	bl	80001e8 <__aeabi_dsub>
 8001950:	ec41 0b11 	vmov	d1, r0, r1
 8001954:	eeb0 0a48 	vmov.f32	s0, s16
 8001958:	eef0 0a68 	vmov.f32	s1, s17
 800195c:	f007 ff56 	bl	800980c <pow>
 8001960:	a341      	add	r3, pc, #260	; (adr r3, 8001a68 <MPU9250SelfTest+0x3f8>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	ec51 0b10 	vmov	r0, r1, d0
 800196a:	f7fe fdf5 	bl	8000558 <__aeabi_dmul>
 800196e:	f7ff f805 	bl	800097c <__aeabi_d2f>
	factoryTrim[1] = (float) (2620 / 1 << FS)
 8001972:	9003      	str	r0, [sp, #12]
	factoryTrim[2] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[2] - 1.0))); // FT[Za] factory trim calculation
 8001974:	eef8 7a6a 	vcvt.f32.u32	s15, s21
 8001978:	ee17 0a90 	vmov	r0, s15
 800197c:	f7fe fd94 	bl	80004a8 <__aeabi_f2d>
 8001980:	2200      	movs	r2, #0
 8001982:	4b3c      	ldr	r3, [pc, #240]	; (8001a74 <MPU9250SelfTest+0x404>)
 8001984:	f7fe fc30 	bl	80001e8 <__aeabi_dsub>
 8001988:	ec41 0b11 	vmov	d1, r0, r1
 800198c:	eeb0 0a48 	vmov.f32	s0, s16
 8001990:	eef0 0a68 	vmov.f32	s1, s17
 8001994:	f007 ff3a 	bl	800980c <pow>
 8001998:	a333      	add	r3, pc, #204	; (adr r3, 8001a68 <MPU9250SelfTest+0x3f8>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	ec51 0b10 	vmov	r0, r1, d0
 80019a2:	f7fe fdd9 	bl	8000558 <__aeabi_dmul>
 80019a6:	f7fe ffe9 	bl	800097c <__aeabi_d2f>
	factoryTrim[2] = (float) (2620 / 1 << FS)
 80019aa:	9004      	str	r0, [sp, #16]
	factoryTrim[3] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[3] - 1.0))); // FT[Xg] factory trim calculation
 80019ac:	eef8 7a4a 	vcvt.f32.u32	s15, s20
 80019b0:	ee17 0a90 	vmov	r0, s15
 80019b4:	f7fe fd78 	bl	80004a8 <__aeabi_f2d>
 80019b8:	2200      	movs	r2, #0
 80019ba:	4b2e      	ldr	r3, [pc, #184]	; (8001a74 <MPU9250SelfTest+0x404>)
 80019bc:	f7fe fc14 	bl	80001e8 <__aeabi_dsub>
 80019c0:	ec41 0b11 	vmov	d1, r0, r1
 80019c4:	eeb0 0a48 	vmov.f32	s0, s16
 80019c8:	eef0 0a68 	vmov.f32	s1, s17
 80019cc:	f007 ff1e 	bl	800980c <pow>
 80019d0:	a325      	add	r3, pc, #148	; (adr r3, 8001a68 <MPU9250SelfTest+0x3f8>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	ec51 0b10 	vmov	r0, r1, d0
 80019da:	f7fe fdbd 	bl	8000558 <__aeabi_dmul>
 80019de:	f7fe ffcd 	bl	800097c <__aeabi_d2f>
	factoryTrim[3] = (float) (2620 / 1 << FS)
 80019e2:	9005      	str	r0, [sp, #20]
	factoryTrim[4] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[4] - 1.0))); // FT[Yg] factory trim calculation
 80019e4:	eef8 7a69 	vcvt.f32.u32	s15, s19
 80019e8:	ee17 0a90 	vmov	r0, s15
 80019ec:	f7fe fd5c 	bl	80004a8 <__aeabi_f2d>
 80019f0:	2200      	movs	r2, #0
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <MPU9250SelfTest+0x404>)
 80019f4:	f7fe fbf8 	bl	80001e8 <__aeabi_dsub>
 80019f8:	ec41 0b11 	vmov	d1, r0, r1
 80019fc:	eeb0 0a48 	vmov.f32	s0, s16
 8001a00:	eef0 0a68 	vmov.f32	s1, s17
 8001a04:	f007 ff02 	bl	800980c <pow>
 8001a08:	a317      	add	r3, pc, #92	; (adr r3, 8001a68 <MPU9250SelfTest+0x3f8>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	ec51 0b10 	vmov	r0, r1, d0
 8001a12:	f7fe fda1 	bl	8000558 <__aeabi_dmul>
 8001a16:	f7fe ffb1 	bl	800097c <__aeabi_d2f>
	factoryTrim[4] = (float) (2620 / 1 << FS)
 8001a1a:	9006      	str	r0, [sp, #24]
	factoryTrim[5] = (float) (2620 / 1 << FS)
			* (pow(1.01, ((float) selfTest[5] - 1.0))); // FT[Zg] factory trim calculation
 8001a1c:	eef8 7a49 	vcvt.f32.u32	s15, s18
 8001a20:	ee17 0a90 	vmov	r0, s15
 8001a24:	f7fe fd40 	bl	80004a8 <__aeabi_f2d>
 8001a28:	2200      	movs	r2, #0
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <MPU9250SelfTest+0x404>)
 8001a2c:	f7fe fbdc 	bl	80001e8 <__aeabi_dsub>
 8001a30:	ec41 0b11 	vmov	d1, r0, r1
 8001a34:	eeb0 0a48 	vmov.f32	s0, s16
 8001a38:	eef0 0a68 	vmov.f32	s1, s17
 8001a3c:	f007 fee6 	bl	800980c <pow>
 8001a40:	a309      	add	r3, pc, #36	; (adr r3, 8001a68 <MPU9250SelfTest+0x3f8>)
 8001a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a46:	ec51 0b10 	vmov	r0, r1, d0
 8001a4a:	f7fe fd85 	bl	8000558 <__aeabi_dmul>
 8001a4e:	f7fe ff95 	bl	800097c <__aeabi_d2f>
	factoryTrim[5] = (float) (2620 / 1 << FS)
 8001a52:	9007      	str	r0, [sp, #28]

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
 8001a54:	f04f 0800 	mov.w	r8, #0
 8001a58:	e05f      	b.n	8001b1a <MPU9250SelfTest+0x4aa>
 8001a5a:	bf00      	nop
 8001a5c:	f3af 8000 	nop.w
 8001a60:	c28f5c29 	.word	0xc28f5c29
 8001a64:	3ff028f5 	.word	0x3ff028f5
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	40a47800 	.word	0x40a47800
 8001a70:	51eb851f 	.word	0x51eb851f
 8001a74:	3ff00000 	.word	0x3ff00000
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001a78:	ab12      	add	r3, sp, #72	; 0x48
 8001a7a:	eb03 0448 	add.w	r4, r3, r8, lsl #1
 8001a7e:	f934 0c20 	ldrsh.w	r0, [r4, #-32]
 8001a82:	f934 3c18 	ldrsh.w	r3, [r4, #-24]
 8001a86:	1ac0      	subs	r0, r0, r3
 8001a88:	ee07 0a90 	vmov	s15, r0
 8001a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a90:	ee17 0a90 	vmov	r0, s15
 8001a94:	f7fe fd08 	bl	80004a8 <__aeabi_f2d>
 8001a98:	2200      	movs	r2, #0
 8001a9a:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <MPU9250SelfTest+0x4bc>)
 8001a9c:	f7fe fd5c 	bl	8000558 <__aeabi_dmul>
 8001aa0:	4606      	mov	r6, r0
 8001aa2:	460f      	mov	r7, r1
				/ factoryTrim[i]; // Report percent differences
 8001aa4:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8001aa8:	ab12      	add	r3, sp, #72	; 0x48
 8001aaa:	444b      	add	r3, r9
 8001aac:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001ab0:	f7fe fcfa 	bl	80004a8 <__aeabi_f2d>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001ab4:	44a9      	add	r9, r5
				/ factoryTrim[i]; // Report percent differences
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4630      	mov	r0, r6
 8001abc:	4639      	mov	r1, r7
 8001abe:	f7fe fe75 	bl	80007ac <__aeabi_ddiv>
 8001ac2:	f7fe ff5b 	bl	800097c <__aeabi_d2f>
		destination[i] = 100.0 * ((float) (aSTAvg[i] - aAvg[i]))
 8001ac6:	f8c9 0000 	str.w	r0, [r9]
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001aca:	f934 0c28 	ldrsh.w	r0, [r4, #-40]
 8001ace:	f934 3c10 	ldrsh.w	r3, [r4, #-16]
 8001ad2:	1ac0      	subs	r0, r0, r3
 8001ad4:	ee07 0a90 	vmov	s15, r0
 8001ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001adc:	ee17 0a90 	vmov	r0, s15
 8001ae0:	f7fe fce2 	bl	80004a8 <__aeabi_f2d>
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <MPU9250SelfTest+0x4bc>)
 8001ae8:	f7fe fd36 	bl	8000558 <__aeabi_dmul>
 8001aec:	4606      	mov	r6, r0
 8001aee:	460f      	mov	r7, r1
				/ factoryTrim[i + 3]; // Report percent differences
 8001af0:	f108 0403 	add.w	r4, r8, #3
 8001af4:	00a4      	lsls	r4, r4, #2
 8001af6:	ab12      	add	r3, sp, #72	; 0x48
 8001af8:	4423      	add	r3, r4
 8001afa:	f853 0c40 	ldr.w	r0, [r3, #-64]
 8001afe:	f7fe fcd3 	bl	80004a8 <__aeabi_f2d>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001b02:	442c      	add	r4, r5
				/ factoryTrim[i + 3]; // Report percent differences
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4630      	mov	r0, r6
 8001b0a:	4639      	mov	r1, r7
 8001b0c:	f7fe fe4e 	bl	80007ac <__aeabi_ddiv>
 8001b10:	f7fe ff34 	bl	800097c <__aeabi_d2f>
		destination[i + 3] = 100.0 * ((float) (gSTAvg[i] - gAvg[i]))
 8001b14:	6020      	str	r0, [r4, #0]
	for (int i = 0; i < 3; i++) {
 8001b16:	f108 0801 	add.w	r8, r8, #1
 8001b1a:	f1b8 0f02 	cmp.w	r8, #2
 8001b1e:	ddab      	ble.n	8001a78 <MPU9250SelfTest+0x408>
	}

}
 8001b20:	b013      	add	sp, #76	; 0x4c
 8001b22:	ecbd 8b08 	vpop	{d8-d11}
 8001b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40590000 	.word	0x40590000

08001b30 <imu_calibrate>:
IMU_StatusTypeDef imu_calibrate() {
 8001b30:	b538      	push	{r3, r4, r5, lr}
	resetMPU9250();
 8001b32:	f7ff fb66 	bl	8001202 <resetMPU9250>
	MPU9250SelfTest(SelfTest); // Start by performing self test and reporting values
 8001b36:	4c53      	ldr	r4, [pc, #332]	; (8001c84 <imu_calibrate+0x154>)
 8001b38:	4620      	mov	r0, r4
 8001b3a:	f7ff fd99 	bl	8001670 <MPU9250SelfTest>
	printf(	"x-axis self test: acceleration trim within : %f of factory value\n\r", SelfTest[0]);
 8001b3e:	6820      	ldr	r0, [r4, #0]
 8001b40:	f7fe fcb2 	bl	80004a8 <__aeabi_f2d>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	484f      	ldr	r0, [pc, #316]	; (8001c88 <imu_calibrate+0x158>)
 8001b4a:	f005 fedf 	bl	800790c <iprintf>
	printf(
 8001b4e:	6860      	ldr	r0, [r4, #4]
 8001b50:	f7fe fcaa 	bl	80004a8 <__aeabi_f2d>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	484c      	ldr	r0, [pc, #304]	; (8001c8c <imu_calibrate+0x15c>)
 8001b5a:	f005 fed7 	bl	800790c <iprintf>
	printf(
 8001b5e:	68a0      	ldr	r0, [r4, #8]
 8001b60:	f7fe fca2 	bl	80004a8 <__aeabi_f2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4849      	ldr	r0, [pc, #292]	; (8001c90 <imu_calibrate+0x160>)
 8001b6a:	f005 fecf 	bl	800790c <iprintf>
	printf("x-axis self test: gyration trim within : %f  of factory value\n\r",
 8001b6e:	68e0      	ldr	r0, [r4, #12]
 8001b70:	f7fe fc9a 	bl	80004a8 <__aeabi_f2d>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4846      	ldr	r0, [pc, #280]	; (8001c94 <imu_calibrate+0x164>)
 8001b7a:	f005 fec7 	bl	800790c <iprintf>
	printf("y-axis self test: gyration trim within : %f  of factory value\n\r",
 8001b7e:	6920      	ldr	r0, [r4, #16]
 8001b80:	f7fe fc92 	bl	80004a8 <__aeabi_f2d>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4843      	ldr	r0, [pc, #268]	; (8001c98 <imu_calibrate+0x168>)
 8001b8a:	f005 febf 	bl	800790c <iprintf>
	printf("z-axis self test: gyration trim within : %f  of factory value\n\r",
 8001b8e:	6960      	ldr	r0, [r4, #20]
 8001b90:	f7fe fc8a 	bl	80004a8 <__aeabi_f2d>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4840      	ldr	r0, [pc, #256]	; (8001c9c <imu_calibrate+0x16c>)
 8001b9a:	f005 feb7 	bl	800790c <iprintf>
	calibrateMPU9250(gyroBias, accelBias); // Calibrate gyro and accelerometers, load biases in bias registers
 8001b9e:	4c40      	ldr	r4, [pc, #256]	; (8001ca0 <imu_calibrate+0x170>)
 8001ba0:	4d40      	ldr	r5, [pc, #256]	; (8001ca4 <imu_calibrate+0x174>)
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	4628      	mov	r0, r5
 8001ba6:	f7ff fc0b 	bl	80013c0 <calibrateMPU9250>
	printf("x gyro bias = %f\n\r", gyroBias[0]);
 8001baa:	6828      	ldr	r0, [r5, #0]
 8001bac:	f7fe fc7c 	bl	80004a8 <__aeabi_f2d>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	483c      	ldr	r0, [pc, #240]	; (8001ca8 <imu_calibrate+0x178>)
 8001bb6:	f005 fea9 	bl	800790c <iprintf>
	printf("y gyro bias = %f\n\r", gyroBias[1]);
 8001bba:	6868      	ldr	r0, [r5, #4]
 8001bbc:	f7fe fc74 	bl	80004a8 <__aeabi_f2d>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4839      	ldr	r0, [pc, #228]	; (8001cac <imu_calibrate+0x17c>)
 8001bc6:	f005 fea1 	bl	800790c <iprintf>
	printf("z gyro bias = %f\n\r", gyroBias[2]);
 8001bca:	68a8      	ldr	r0, [r5, #8]
 8001bcc:	f7fe fc6c 	bl	80004a8 <__aeabi_f2d>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4836      	ldr	r0, [pc, #216]	; (8001cb0 <imu_calibrate+0x180>)
 8001bd6:	f005 fe99 	bl	800790c <iprintf>
	printf("x accel bias = %f\n\r", accelBias[0]);
 8001bda:	6820      	ldr	r0, [r4, #0]
 8001bdc:	f7fe fc64 	bl	80004a8 <__aeabi_f2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4833      	ldr	r0, [pc, #204]	; (8001cb4 <imu_calibrate+0x184>)
 8001be6:	f005 fe91 	bl	800790c <iprintf>
	printf("y accel bias = %f\n\r", accelBias[1]);
 8001bea:	6860      	ldr	r0, [r4, #4]
 8001bec:	f7fe fc5c 	bl	80004a8 <__aeabi_f2d>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4830      	ldr	r0, [pc, #192]	; (8001cb8 <imu_calibrate+0x188>)
 8001bf6:	f005 fe89 	bl	800790c <iprintf>
	printf("z accel bias = %f\n\r", accelBias[2]);
 8001bfa:	68a0      	ldr	r0, [r4, #8]
 8001bfc:	f7fe fc54 	bl	80004a8 <__aeabi_f2d>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	482d      	ldr	r0, [pc, #180]	; (8001cbc <imu_calibrate+0x18c>)
 8001c06:	f005 fe81 	bl	800790c <iprintf>
	initMPU9250();
 8001c0a:	f7ff fb69 	bl	80012e0 <initMPU9250>
	initAK8963(magCalibration);
 8001c0e:	482c      	ldr	r0, [pc, #176]	; (8001cc0 <imu_calibrate+0x190>)
 8001c10:	f7ff fb02 	bl	8001218 <initAK8963>
	printf("Accelerometer full-scale range = %f  g\n\r", 2.0f*(float)(1<<Ascale));
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <imu_calibrate+0x194>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2401      	movs	r4, #1
 8001c1a:	fa04 f303 	lsl.w	r3, r4, r3
 8001c1e:	ee07 3a90 	vmov	s15, r3
 8001c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c26:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c2a:	ee17 0a90 	vmov	r0, s15
 8001c2e:	f7fe fc3b 	bl	80004a8 <__aeabi_f2d>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4824      	ldr	r0, [pc, #144]	; (8001cc8 <imu_calibrate+0x198>)
 8001c38:	f005 fe68 	bl	800790c <iprintf>
	printf("Gyroscope full-scale range = %f  deg/s\n\r", 250.0f*(float)(1<<Gscale));
 8001c3c:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <imu_calibrate+0x19c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	409c      	lsls	r4, r3
 8001c42:	ee07 4a90 	vmov	s15, r4
 8001c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001cd0 <imu_calibrate+0x1a0>
 8001c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c52:	ee17 0a90 	vmov	r0, s15
 8001c56:	f7fe fc27 	bl	80004a8 <__aeabi_f2d>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	481d      	ldr	r0, [pc, #116]	; (8001cd4 <imu_calibrate+0x1a4>)
 8001c60:	f005 fe54 	bl	800790c <iprintf>
	getAres(); // Get accelerometer sensitivity
 8001c64:	f7ff fa42 	bl	80010ec <getAres>
	getGres(); // Get gyro sensitivity
 8001c68:	f7ff fa1c 	bl	80010a4 <getGres>
	getMres(); // Get magnetometer sensitivity
 8001c6c:	f7ff fa04 	bl	8001078 <getMres>
	magbias[0] = +470.; // User environmental x-axis correction in milliGauss, should be automatically calculated
 8001c70:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <imu_calibrate+0x1a8>)
 8001c72:	4a1a      	ldr	r2, [pc, #104]	; (8001cdc <imu_calibrate+0x1ac>)
 8001c74:	601a      	str	r2, [r3, #0]
	magbias[1] = +120.; // User environmental x-axis correction in milliGauss
 8001c76:	4a1a      	ldr	r2, [pc, #104]	; (8001ce0 <imu_calibrate+0x1b0>)
 8001c78:	605a      	str	r2, [r3, #4]
	magbias[2] = +125.; // User environmental x-axis correction in milliGauss
 8001c7a:	4a1a      	ldr	r2, [pc, #104]	; (8001ce4 <imu_calibrate+0x1b4>)
 8001c7c:	609a      	str	r2, [r3, #8]
}
 8001c7e:	2000      	movs	r0, #0
 8001c80:	bd38      	pop	{r3, r4, r5, pc}
 8001c82:	bf00      	nop
 8001c84:	20000300 	.word	0x20000300
 8001c88:	0800b2a8 	.word	0x0800b2a8
 8001c8c:	0800b2ec 	.word	0x0800b2ec
 8001c90:	0800b330 	.word	0x0800b330
 8001c94:	0800b374 	.word	0x0800b374
 8001c98:	0800b3b4 	.word	0x0800b3b4
 8001c9c:	0800b3f4 	.word	0x0800b3f4
 8001ca0:	20000004 	.word	0x20000004
 8001ca4:	20000010 	.word	0x20000010
 8001ca8:	0800b434 	.word	0x0800b434
 8001cac:	0800b448 	.word	0x0800b448
 8001cb0:	0800b45c 	.word	0x0800b45c
 8001cb4:	0800b470 	.word	0x0800b470
 8001cb8:	0800b484 	.word	0x0800b484
 8001cbc:	0800b498 	.word	0x0800b498
 8001cc0:	20000274 	.word	0x20000274
 8001cc4:	20000258 	.word	0x20000258
 8001cc8:	0800b4ac 	.word	0x0800b4ac
 8001ccc:	20000259 	.word	0x20000259
 8001cd0:	437a0000 	.word	0x437a0000
 8001cd4:	0800b4d8 	.word	0x0800b4d8
 8001cd8:	20000280 	.word	0x20000280
 8001cdc:	43eb0000 	.word	0x43eb0000
 8001ce0:	42f00000 	.word	0x42f00000
 8001ce4:	42fa0000 	.word	0x42fa0000

08001ce8 <MahonyQuaternionUpdate>:
}

// Similar to Madgwick scheme but uses proportional and integral filtering on the error between estimated reference vectors and
// measured ones.
void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy,
		float gz, float mx, float my, float mz) {
 8001ce8:	b500      	push	{lr}
 8001cea:	ed2d 8b10 	vpush	{d8-d15}
 8001cee:	b08d      	sub	sp, #52	; 0x34
 8001cf0:	eeb0 ba40 	vmov.f32	s22, s0
 8001cf4:	eef0 aa60 	vmov.f32	s21, s1
 8001cf8:	eeb0 aa41 	vmov.f32	s20, s2
 8001cfc:	edcd 1a04 	vstr	s3, [sp, #16]
 8001d00:	ed8d 2a05 	vstr	s4, [sp, #20]
 8001d04:	edcd 2a06 	vstr	s5, [sp, #24]
 8001d08:	eef0 da43 	vmov.f32	s27, s6
 8001d0c:	eeb0 da63 	vmov.f32	s26, s7
 8001d10:	eef0 ca44 	vmov.f32	s25, s8

	float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3]; // short name local variable for readability
 8001d14:	4be4      	ldr	r3, [pc, #912]	; (80020a8 <MahonyQuaternionUpdate+0x3c0>)
 8001d16:	edd3 9a00 	vldr	s19, [r3]
 8001d1a:	ed93 9a01 	vldr	s18, [r3, #4]
 8001d1e:	edd3 8a02 	vldr	s17, [r3, #8]
 8001d22:	ed93 8a03 	vldr	s16, [r3, #12]
	float vx, vy, vz, wx, wy, wz;
	float ex, ey, ez;
	float pa, pb, pc;

	// Auxiliary variables to avoid repeated arithmetic
	float q1q1 = q1 * q1;
 8001d26:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8001d2a:	edcd 7a03 	vstr	s15, [sp, #12]
	float q1q2 = q1 * q2;
 8001d2e:	ee69 7a89 	vmul.f32	s15, s19, s18
 8001d32:	edcd 7a00 	vstr	s15, [sp]
	float q1q3 = q1 * q3;
 8001d36:	ee29 faa8 	vmul.f32	s30, s19, s17
	float q1q4 = q1 * q4;
 8001d3a:	ee69 ba88 	vmul.f32	s23, s19, s16
	float q2q2 = q2 * q2;
 8001d3e:	ee69 7a09 	vmul.f32	s15, s18, s18
 8001d42:	edcd 7a01 	vstr	s15, [sp, #4]
	float q2q3 = q2 * q3;
 8001d46:	ee69 fa28 	vmul.f32	s31, s18, s17
	float q2q4 = q2 * q4;
 8001d4a:	ee29 ca08 	vmul.f32	s24, s18, s16
	float q3q3 = q3 * q3;
 8001d4e:	ee68 eaa8 	vmul.f32	s29, s17, s17
	float q3q4 = q3 * q4;
 8001d52:	ee68 7a88 	vmul.f32	s15, s17, s16
 8001d56:	edcd 7a02 	vstr	s15, [sp, #8]
	float q4q4 = q4 * q4;
 8001d5a:	ee28 ea08 	vmul.f32	s28, s16, s16

	// Normalise accelerometer measurement
	norm = sqrt(ax * ax + ay * ay + az * az);
 8001d5e:	ee60 7a00 	vmul.f32	s15, s0, s0
 8001d62:	ee20 7aa0 	vmul.f32	s14, s1, s1
 8001d66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d6a:	ee21 7a01 	vmul.f32	s14, s2, s2
 8001d6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d72:	ee17 0a90 	vmov	r0, s15
 8001d76:	f7fe fb97 	bl	80004a8 <__aeabi_f2d>
 8001d7a:	ec41 0b10 	vmov	d0, r0, r1
 8001d7e:	f007 feb5 	bl	8009aec <sqrt>
 8001d82:	ec51 0b10 	vmov	r0, r1, d0
 8001d86:	f7fe fdf9 	bl	800097c <__aeabi_d2f>
 8001d8a:	ee07 0a90 	vmov	s15, r0
	if (norm == 0.0f)
 8001d8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d96:	d104      	bne.n	8001da2 <MahonyQuaternionUpdate+0xba>
	q[0] = q1 * norm;
	q[1] = q2 * norm;
	q[2] = q3 * norm;
	q[3] = q4 * norm;

}
 8001d98:	b00d      	add	sp, #52	; 0x34
 8001d9a:	ecbd 8b10 	vpop	{d8-d15}
 8001d9e:	f85d fb04 	ldr.w	pc, [sp], #4
	norm = 1.0f / norm;        // use reciprocal for division
 8001da2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	ax *= norm;
 8001daa:	ee2b ba07 	vmul.f32	s22, s22, s14
	ay *= norm;
 8001dae:	ee6a aa87 	vmul.f32	s21, s21, s14
	az *= norm;
 8001db2:	ee2a aa07 	vmul.f32	s20, s20, s14
	norm = sqrt(mx * mx + my * my + mz * mz);
 8001db6:	ee6d 7aad 	vmul.f32	s15, s27, s27
 8001dba:	ee2d 7a0d 	vmul.f32	s14, s26, s26
 8001dbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dc2:	ee2c 7aac 	vmul.f32	s14, s25, s25
 8001dc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dca:	ee17 0a90 	vmov	r0, s15
 8001dce:	f7fe fb6b 	bl	80004a8 <__aeabi_f2d>
 8001dd2:	ec41 0b10 	vmov	d0, r0, r1
 8001dd6:	f007 fe89 	bl	8009aec <sqrt>
 8001dda:	ec51 0b10 	vmov	r0, r1, d0
 8001dde:	f7fe fdcd 	bl	800097c <__aeabi_d2f>
 8001de2:	ee07 0a90 	vmov	s15, r0
	if (norm == 0.0f)
 8001de6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dee:	d0d3      	beq.n	8001d98 <MahonyQuaternionUpdate+0xb0>
	norm = 1.0f / norm;        // use reciprocal for division
 8001df0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001df4:	ee87 7a27 	vdiv.f32	s14, s14, s15
	mx *= norm;
 8001df8:	ee6d da87 	vmul.f32	s27, s27, s14
	my *= norm;
 8001dfc:	ee2d da07 	vmul.f32	s26, s26, s14
	mz *= norm;
 8001e00:	ee6c ca87 	vmul.f32	s25, s25, s14
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e04:	ee7d 6aad 	vadd.f32	s13, s27, s27
 8001e08:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001e0c:	ee76 7a6e 	vsub.f32	s15, s12, s29
 8001e10:	ee77 7ace 	vsub.f32	s15, s15, s28
 8001e14:	edcd 7a08 	vstr	s15, [sp, #32]
 8001e18:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8001e1c:	ee7d 5a0d 	vadd.f32	s11, s26, s26
 8001e20:	ee3f 5aeb 	vsub.f32	s10, s31, s23
 8001e24:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 8001e28:	ee65 7a85 	vmul.f32	s15, s11, s10
 8001e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ 2.0f * mz * (q2q4 + q1q3);
 8001e30:	ee7c 4aac 	vadd.f32	s9, s25, s25
 8001e34:	ee3f 4a0c 	vadd.f32	s8, s30, s24
 8001e38:	ed8d 4a0b 	vstr	s8, [sp, #44]	; 0x2c
 8001e3c:	ee64 7a84 	vmul.f32	s15, s9, s8
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4)
 8001e40:	ee37 7a27 	vadd.f32	s14, s14, s15
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e44:	ee7b 7aaf 	vadd.f32	s15, s23, s31
 8001e48:	edcd 6a07 	vstr	s13, [sp, #28]
 8001e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e50:	eddd 3a01 	vldr	s7, [sp, #4]
 8001e54:	ee76 fa63 	vsub.f32	s31, s12, s7
 8001e58:	ee7f bace 	vsub.f32	s23, s31, s28
 8001e5c:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8001e60:	ee65 baab 	vmul.f32	s23, s11, s23
 8001e64:	ee77 7aab 	vadd.f32	s15, s15, s23
			+ 2.0f * mz * (q3q4 - q1q2);
 8001e68:	ed9d 3a02 	vldr	s6, [sp, #8]
 8001e6c:	eddd 2a00 	vldr	s5, [sp]
 8001e70:	ee73 6a62 	vsub.f32	s13, s6, s5
 8001e74:	eef0 ba64 	vmov.f32	s23, s9
 8001e78:	ee64 6aa6 	vmul.f32	s13, s9, s13
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4)
 8001e7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
	bx = sqrt((hx * hx) + (hy * hy));
 8001e80:	ee27 7a07 	vmul.f32	s14, s14, s14
 8001e84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e88:	ee37 2a27 	vadd.f32	s4, s14, s15
 8001e8c:	ee12 0a10 	vmov	r0, s4
 8001e90:	f7fe fb0a 	bl	80004a8 <__aeabi_f2d>
 8001e94:	ec41 0b10 	vmov	d0, r0, r1
 8001e98:	f007 fe28 	bl	8009aec <sqrt>
 8001e9c:	ec51 0b10 	vmov	r0, r1, d0
 8001ea0:	f7fe fd6c 	bl	800097c <__aeabi_d2f>
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001ea4:	ee3c ca4f 	vsub.f32	s24, s24, s30
 8001ea8:	eddd 6a07 	vldr	s13, [sp, #28]
 8001eac:	ee26 7a8c 	vmul.f32	s14, s13, s24
 8001eb0:	eddd 4a00 	vldr	s9, [sp]
 8001eb4:	ed9d 3a02 	vldr	s6, [sp, #8]
 8001eb8:	ee34 5a83 	vadd.f32	s10, s9, s6
 8001ebc:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 8001ec0:	ee65 7a85 	vmul.f32	s15, s11, s10
 8001ec4:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ 2.0f * mz * (0.5f - q2q2 - q3q3);
 8001ec8:	ee7f 4aee 	vsub.f32	s9, s31, s29
 8001ecc:	ee6b 7aa4 	vmul.f32	s15, s23, s9
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2)
 8001ed0:	ee37 7a27 	vadd.f32	s14, s14, s15
	vx = 2.0f * (q2q4 - q1q3);
 8001ed4:	ee7c 7a0c 	vadd.f32	s15, s24, s24
	vy = 2.0f * (q1q2 + q3q4);
 8001ed8:	ee35 6a05 	vadd.f32	s12, s10, s10
	vz = q1q1 - q2q2 - q3q3 + q4q4;
 8001edc:	eddd 5a03 	vldr	s11, [sp, #12]
 8001ee0:	eddd 3a01 	vldr	s7, [sp, #4]
 8001ee4:	ee75 6ae3 	vsub.f32	s13, s11, s7
 8001ee8:	ee76 eaee 	vsub.f32	s29, s13, s29
 8001eec:	ee3e ea8e 	vadd.f32	s28, s29, s28
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
 8001ef0:	ee05 0a90 	vmov	s11, r0
 8001ef4:	ee75 faa5 	vadd.f32	s31, s11, s11
 8001ef8:	eddd 6a08 	vldr	s13, [sp, #32]
 8001efc:	ee26 faaf 	vmul.f32	s30, s13, s31
 8001f00:	ee37 7a07 	vadd.f32	s14, s14, s14
 8001f04:	ee2c ca07 	vmul.f32	s24, s24, s14
 8001f08:	ee3f ca0c 	vadd.f32	s24, s30, s24
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
 8001f0c:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
 8001f10:	ee66 5aaf 	vmul.f32	s11, s13, s31
 8001f14:	ee25 5a07 	vmul.f32	s10, s10, s14
 8001f18:	ee75 5a85 	vadd.f32	s11, s11, s10
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
 8001f1c:	ed9d 4a0b 	vldr	s8, [sp, #44]	; 0x2c
 8001f20:	ee64 fa2f 	vmul.f32	s31, s8, s31
 8001f24:	ee24 7a87 	vmul.f32	s14, s9, s14
 8001f28:	ee7f fa87 	vadd.f32	s31, s31, s14
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001f2c:	ee6a 6a8e 	vmul.f32	s13, s21, s28
 8001f30:	ee2a 7a06 	vmul.f32	s14, s20, s12
 8001f34:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8001f38:	ee2d 7a2f 	vmul.f32	s14, s26, s31
 8001f3c:	ee2c 5aa5 	vmul.f32	s10, s25, s11
 8001f40:	ee37 7a45 	vsub.f32	s14, s14, s10
 8001f44:	ee76 6a87 	vadd.f32	s13, s13, s14
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001f48:	ee2a aa27 	vmul.f32	s20, s20, s15
 8001f4c:	ee2b 7a0e 	vmul.f32	s14, s22, s28
 8001f50:	ee3a 7a47 	vsub.f32	s14, s20, s14
 8001f54:	ee6c ca8c 	vmul.f32	s25, s25, s24
 8001f58:	ee6d faaf 	vmul.f32	s31, s27, s31
 8001f5c:	ee7c faef 	vsub.f32	s31, s25, s31
 8001f60:	ee37 7a2f 	vadd.f32	s14, s14, s31
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001f64:	ee2b ba06 	vmul.f32	s22, s22, s12
 8001f68:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8001f6c:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8001f70:	ee6d daa5 	vmul.f32	s27, s27, s11
 8001f74:	ee2d da0c 	vmul.f32	s26, s26, s24
 8001f78:	ee3d dacd 	vsub.f32	s26, s27, s26
 8001f7c:	ee77 7a8d 	vadd.f32	s15, s15, s26
		eInt[0] = 0.0f;     // prevent integral wind up
 8001f80:	4b4a      	ldr	r3, [pc, #296]	; (80020ac <MahonyQuaternionUpdate+0x3c4>)
 8001f82:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 80020b0 <MahonyQuaternionUpdate+0x3c8>
 8001f86:	ed83 6a00 	vstr	s12, [r3]
		eInt[1] = 0.0f;
 8001f8a:	ed83 6a01 	vstr	s12, [r3, #4]
		eInt[2] = 0.0f;
 8001f8e:	ed83 6a02 	vstr	s12, [r3, #8]
	gx = gx + Kp * ex + Ki * eInt[0];
 8001f92:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
 8001f96:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8001f9a:	eddd 4a04 	vldr	s9, [sp, #16]
 8001f9e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8001fa2:	ee76 6a86 	vadd.f32	s13, s13, s12
	gy = gy + Kp * ey + Ki * eInt[1];
 8001fa6:	ee27 7a25 	vmul.f32	s14, s14, s11
 8001faa:	eddd 4a05 	vldr	s9, [sp, #20]
 8001fae:	ee37 7a24 	vadd.f32	s14, s14, s9
 8001fb2:	ee37 7a06 	vadd.f32	s14, s14, s12
	gz = gz + Kp * ez + Ki * eInt[2];
 8001fb6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001fba:	eddd 5a06 	vldr	s11, [sp, #24]
 8001fbe:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001fc2:	ee77 7a86 	vadd.f32	s15, s15, s12
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
 8001fc6:	ee69 5a66 	vnmul.f32	s11, s18, s13
 8001fca:	ee28 6a87 	vmul.f32	s12, s17, s14
 8001fce:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8001fd2:	ee28 6a27 	vmul.f32	s12, s16, s15
 8001fd6:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8001fda:	4b36      	ldr	r3, [pc, #216]	; (80020b4 <MahonyQuaternionUpdate+0x3cc>)
 8001fdc:	ed93 6a00 	vldr	s12, [r3]
 8001fe0:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8001fe4:	ee26 6a05 	vmul.f32	s12, s12, s10
 8001fe8:	ee65 5a86 	vmul.f32	s11, s11, s12
 8001fec:	ee79 9aa5 	vadd.f32	s19, s19, s11
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
 8001ff0:	ee66 aaa9 	vmul.f32	s21, s13, s19
 8001ff4:	ee68 5aa7 	vmul.f32	s11, s17, s15
 8001ff8:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8001ffc:	ee68 5a07 	vmul.f32	s11, s16, s14
 8002000:	ee7a aae5 	vsub.f32	s21, s21, s11
 8002004:	ee66 aa2a 	vmul.f32	s21, s12, s21
 8002008:	ee79 aa2a 	vadd.f32	s21, s18, s21
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
 800200c:	ee27 aa29 	vmul.f32	s20, s14, s19
 8002010:	ee69 5a27 	vmul.f32	s11, s18, s15
 8002014:	ee3a aa65 	vsub.f32	s20, s20, s11
 8002018:	ee68 5a26 	vmul.f32	s11, s16, s13
 800201c:	ee3a aa25 	vadd.f32	s20, s20, s11
 8002020:	ee26 aa0a 	vmul.f32	s20, s12, s20
 8002024:	ee38 aa8a 	vadd.f32	s20, s17, s20
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
 8002028:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800202c:	ee29 9a07 	vmul.f32	s18, s18, s14
 8002030:	ee37 9a89 	vadd.f32	s18, s15, s18
 8002034:	ee68 8aa6 	vmul.f32	s17, s17, s13
 8002038:	ee79 8a68 	vsub.f32	s17, s18, s17
 800203c:	ee66 8a28 	vmul.f32	s17, s12, s17
 8002040:	ee38 8a28 	vadd.f32	s16, s16, s17
	norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
 8002044:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8002048:	ee2a 7aaa 	vmul.f32	s14, s21, s21
 800204c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002050:	ee2a 7a0a 	vmul.f32	s14, s20, s20
 8002054:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002058:	ee28 7a08 	vmul.f32	s14, s16, s16
 800205c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002060:	ee17 0a90 	vmov	r0, s15
 8002064:	f7fe fa20 	bl	80004a8 <__aeabi_f2d>
 8002068:	ec41 0b10 	vmov	d0, r0, r1
 800206c:	f007 fd3e 	bl	8009aec <sqrt>
 8002070:	ec51 0b10 	vmov	r0, r1, d0
 8002074:	f7fe fc82 	bl	800097c <__aeabi_d2f>
	norm = 1.0f / norm;
 8002078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800207c:	ee07 0a90 	vmov	s15, r0
 8002080:	eec7 7a27 	vdiv.f32	s15, s14, s15
	q[0] = q1 * norm;
 8002084:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8002088:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <MahonyQuaternionUpdate+0x3c0>)
 800208a:	edc3 9a00 	vstr	s19, [r3]
	q[1] = q2 * norm;
 800208e:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8002092:	edc3 aa01 	vstr	s21, [r3, #4]
	q[2] = q3 * norm;
 8002096:	ee2a aa27 	vmul.f32	s20, s20, s15
 800209a:	ed83 aa02 	vstr	s20, [r3, #8]
	q[3] = q4 * norm;
 800209e:	ee28 8a27 	vmul.f32	s16, s16, s15
 80020a2:	ed83 8a03 	vstr	s16, [r3, #12]
 80020a6:	e677      	b.n	8001d98 <MahonyQuaternionUpdate+0xb0>
 80020a8:	2000001c 	.word	0x2000001c
 80020ac:	20000264 	.word	0x20000264
 80020b0:	00000000 	.word	0x00000000
 80020b4:	20000260 	.word	0x20000260

080020b8 <calc_RollPitchYaw>:
void calc_RollPitchYaw(int counter_value) {
 80020b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020bc:	ed2d 8b04 	vpush	{d8-d9}
 80020c0:	b087      	sub	sp, #28
 80020c2:	ee08 0a10 	vmov	s16, r0
	if (readByte(MPU9250_ADDRESS_TX, MPU9250_ADDRESS_RX, INT_STATUS) & 0x01) { // On interrupt, check if data ready interrupt
 80020c6:	223a      	movs	r2, #58	; 0x3a
 80020c8:	21d1      	movs	r1, #209	; 0xd1
 80020ca:	20d0      	movs	r0, #208	; 0xd0
 80020cc:	f7fe ff6c 	bl	8000fa8 <readByte>
 80020d0:	f010 0f01 	tst.w	r0, #1
 80020d4:	f040 8170 	bne.w	80023b8 <calc_RollPitchYaw+0x300>
	Now = counter_value;
 80020d8:	eef8 7ac8 	vcvt.f32.s32	s15, s16
 80020dc:	4ba0      	ldr	r3, [pc, #640]	; (8002360 <calc_RollPitchYaw+0x2a8>)
 80020de:	edc3 7a00 	vstr	s15, [r3]
	if(Now - lastUpdate < 0){
 80020e2:	4ba0      	ldr	r3, [pc, #640]	; (8002364 <calc_RollPitchYaw+0x2ac>)
 80020e4:	ed93 7a00 	vldr	s14, [r3]
 80020e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f4:	f100 820d 	bmi.w	8002512 <calc_RollPitchYaw+0x45a>
		float32_t result1 = 0;
 80020f8:	2500      	movs	r5, #0
 80020fa:	ac06      	add	r4, sp, #24
 80020fc:	f844 5d0c 	str.w	r5, [r4, #-12]!
		arm_sub_f32(&Now, &lastUpdate, &result1, 1);
 8002100:	2301      	movs	r3, #1
 8002102:	4622      	mov	r2, r4
 8002104:	4997      	ldr	r1, [pc, #604]	; (8002364 <calc_RollPitchYaw+0x2ac>)
 8002106:	4896      	ldr	r0, [pc, #600]	; (8002360 <calc_RollPitchYaw+0x2a8>)
 8002108:	f004 f866 	bl	80061d8 <arm_sub_f32>
		float32_t result2 = 0;
 800210c:	9504      	str	r5, [sp, #16]
		float32_t prescaler = 2000;
 800210e:	4b96      	ldr	r3, [pc, #600]	; (8002368 <calc_RollPitchYaw+0x2b0>)
 8002110:	9305      	str	r3, [sp, #20]
		arm_mult_f32(&result1, &prescaler,&result2, 1);
 8002112:	2301      	movs	r3, #1
 8002114:	aa04      	add	r2, sp, #16
 8002116:	a905      	add	r1, sp, #20
 8002118:	4620      	mov	r0, r4
 800211a:	f004 f84d 	bl	80061b8 <arm_mult_f32>
		deltat = result2/TIMER_CLK_FREQ;
 800211e:	eddd 6a04 	vldr	s13, [sp, #16]
 8002122:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800236c <calc_RollPitchYaw+0x2b4>
 8002126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800212a:	4b91      	ldr	r3, [pc, #580]	; (8002370 <calc_RollPitchYaw+0x2b8>)
 800212c:	edc3 7a00 	vstr	s15, [r3]
	lastUpdate = Now;
 8002130:	4b8b      	ldr	r3, [pc, #556]	; (8002360 <calc_RollPitchYaw+0x2a8>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b8b      	ldr	r3, [pc, #556]	; (8002364 <calc_RollPitchYaw+0x2ac>)
 8002136:	601a      	str	r2, [r3, #0]
	sum += deltat;
 8002138:	4e8e      	ldr	r6, [pc, #568]	; (8002374 <calc_RollPitchYaw+0x2bc>)
 800213a:	edd6 7a00 	vldr	s15, [r6]
 800213e:	4b8c      	ldr	r3, [pc, #560]	; (8002370 <calc_RollPitchYaw+0x2b8>)
 8002140:	ed93 7a00 	vldr	s14, [r3]
 8002144:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002148:	edc6 7a00 	vstr	s15, [r6]
	sumCount++;
 800214c:	4d8a      	ldr	r5, [pc, #552]	; (8002378 <calc_RollPitchYaw+0x2c0>)
 800214e:	682b      	ldr	r3, [r5, #0]
 8002150:	3301      	adds	r3, #1
 8002152:	602b      	str	r3, [r5, #0]
	MahonyQuaternionUpdate(ax, ay, az, gx * PI / 180.0, gy * PI / 180.0, gz * PI / 180.0, my, mx, mz);
 8002154:	4b89      	ldr	r3, [pc, #548]	; (800237c <calc_RollPitchYaw+0x2c4>)
 8002156:	edd3 1a00 	vldr	s3, [r3]
 800215a:	eddf 7a89 	vldr	s15, [pc, #548]	; 8002380 <calc_RollPitchYaw+0x2c8>
 800215e:	ee61 1aa7 	vmul.f32	s3, s3, s15
 8002162:	4b88      	ldr	r3, [pc, #544]	; (8002384 <calc_RollPitchYaw+0x2cc>)
 8002164:	ed93 2a00 	vldr	s4, [r3]
 8002168:	ee22 2a27 	vmul.f32	s4, s4, s15
 800216c:	4b86      	ldr	r3, [pc, #536]	; (8002388 <calc_RollPitchYaw+0x2d0>)
 800216e:	edd3 2a00 	vldr	s5, [r3]
 8002172:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8002176:	eddf 7a85 	vldr	s15, [pc, #532]	; 800238c <calc_RollPitchYaw+0x2d4>
 800217a:	4b85      	ldr	r3, [pc, #532]	; (8002390 <calc_RollPitchYaw+0x2d8>)
 800217c:	ed93 4a00 	vldr	s8, [r3]
 8002180:	4b84      	ldr	r3, [pc, #528]	; (8002394 <calc_RollPitchYaw+0x2dc>)
 8002182:	edd3 3a00 	vldr	s7, [r3]
 8002186:	4b84      	ldr	r3, [pc, #528]	; (8002398 <calc_RollPitchYaw+0x2e0>)
 8002188:	ed93 3a00 	vldr	s6, [r3]
 800218c:	eec2 2aa7 	vdiv.f32	s5, s5, s15
 8002190:	ee82 2a27 	vdiv.f32	s4, s4, s15
 8002194:	eec1 1aa7 	vdiv.f32	s3, s3, s15
 8002198:	4b80      	ldr	r3, [pc, #512]	; (800239c <calc_RollPitchYaw+0x2e4>)
 800219a:	ed93 1a00 	vldr	s2, [r3]
 800219e:	4b80      	ldr	r3, [pc, #512]	; (80023a0 <calc_RollPitchYaw+0x2e8>)
 80021a0:	edd3 0a00 	vldr	s1, [r3]
 80021a4:	4b7f      	ldr	r3, [pc, #508]	; (80023a4 <calc_RollPitchYaw+0x2ec>)
 80021a6:	ed93 0a00 	vldr	s0, [r3]
 80021aa:	f7ff fd9d 	bl	8001ce8 <MahonyQuaternionUpdate>
	yaw = atan2(2.0 * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
 80021ae:	4c7e      	ldr	r4, [pc, #504]	; (80023a8 <calc_RollPitchYaw+0x2f0>)
 80021b0:	edd4 9a01 	vldr	s19, [r4, #4]
 80021b4:	ed94 9a02 	vldr	s18, [r4, #8]
 80021b8:	ee29 7a89 	vmul.f32	s14, s19, s18
 80021bc:	ed94 8a00 	vldr	s16, [r4]
 80021c0:	edd4 8a03 	vldr	s17, [r4, #12]
 80021c4:	ee68 7a28 	vmul.f32	s15, s16, s17
 80021c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021cc:	ee17 0a90 	vmov	r0, s15
 80021d0:	f7fe f96a 	bl	80004a8 <__aeabi_f2d>
 80021d4:	4680      	mov	r8, r0
 80021d6:	4689      	mov	r9, r1
 80021d8:	ee28 8a08 	vmul.f32	s16, s16, s16
 80021dc:	ee69 9aa9 	vmul.f32	s19, s19, s19
 80021e0:	ee38 8a29 	vadd.f32	s16, s16, s19
 80021e4:	ee29 9a09 	vmul.f32	s18, s18, s18
 80021e8:	ee38 8a49 	vsub.f32	s16, s16, s18
 80021ec:	ee68 8aa8 	vmul.f32	s17, s17, s17
 80021f0:	ee78 7a68 	vsub.f32	s15, s16, s17
 80021f4:	ee17 0a90 	vmov	r0, s15
 80021f8:	f7fe f956 	bl	80004a8 <__aeabi_f2d>
 80021fc:	4682      	mov	sl, r0
 80021fe:	468b      	mov	fp, r1
 8002200:	4642      	mov	r2, r8
 8002202:	464b      	mov	r3, r9
 8002204:	4640      	mov	r0, r8
 8002206:	4649      	mov	r1, r9
 8002208:	f7fd fff0 	bl	80001ec <__adddf3>
 800220c:	ec4b ab11 	vmov	d1, sl, fp
 8002210:	ec41 0b10 	vmov	d0, r0, r1
 8002214:	f007 faf8 	bl	8009808 <atan2>
 8002218:	ec51 0b10 	vmov	r0, r1, d0
 800221c:	f7fe fbae 	bl	800097c <__aeabi_d2f>
 8002220:	4f62      	ldr	r7, [pc, #392]	; (80023ac <calc_RollPitchYaw+0x2f4>)
 8002222:	6038      	str	r0, [r7, #0]
	pitch = -asin(2.0 * (q[1] * q[3] - q[0] * q[2]));
 8002224:	ed94 7a01 	vldr	s14, [r4, #4]
 8002228:	edd4 7a03 	vldr	s15, [r4, #12]
 800222c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002230:	edd4 7a00 	vldr	s15, [r4]
 8002234:	edd4 6a02 	vldr	s13, [r4, #8]
 8002238:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800223c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002240:	ee17 0a90 	vmov	r0, s15
 8002244:	f7fe f930 	bl	80004a8 <__aeabi_f2d>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	f7fd ffce 	bl	80001ec <__adddf3>
 8002250:	ec41 0b10 	vmov	d0, r0, r1
 8002254:	f007 fa80 	bl	8009758 <asin>
 8002258:	ec51 0b10 	vmov	r0, r1, d0
 800225c:	f7fe fb8e 	bl	800097c <__aeabi_d2f>
 8002260:	f8df a150 	ldr.w	sl, [pc, #336]	; 80023b4 <calc_RollPitchYaw+0x2fc>
 8002264:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8002268:	f8ca 0000 	str.w	r0, [sl]
	roll = atan2(2.0 * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
 800226c:	ed94 8a00 	vldr	s16, [r4]
 8002270:	edd4 9a01 	vldr	s19, [r4, #4]
 8002274:	ee28 7a29 	vmul.f32	s14, s16, s19
 8002278:	ed94 9a02 	vldr	s18, [r4, #8]
 800227c:	edd4 8a03 	vldr	s17, [r4, #12]
 8002280:	ee69 7a28 	vmul.f32	s15, s18, s17
 8002284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002288:	ee17 0a90 	vmov	r0, s15
 800228c:	f7fe f90c 	bl	80004a8 <__aeabi_f2d>
 8002290:	4680      	mov	r8, r0
 8002292:	4689      	mov	r9, r1
 8002294:	ee28 8a08 	vmul.f32	s16, s16, s16
 8002298:	ee69 9aa9 	vmul.f32	s19, s19, s19
 800229c:	ee38 8a69 	vsub.f32	s16, s16, s19
 80022a0:	ee29 9a09 	vmul.f32	s18, s18, s18
 80022a4:	ee38 8a49 	vsub.f32	s16, s16, s18
 80022a8:	ee68 8aa8 	vmul.f32	s17, s17, s17
 80022ac:	ee78 7a28 	vadd.f32	s15, s16, s17
 80022b0:	ee17 0a90 	vmov	r0, s15
 80022b4:	f7fe f8f8 	bl	80004a8 <__aeabi_f2d>
 80022b8:	ec41 0b18 	vmov	d8, r0, r1
 80022bc:	4642      	mov	r2, r8
 80022be:	464b      	mov	r3, r9
 80022c0:	4640      	mov	r0, r8
 80022c2:	4649      	mov	r1, r9
 80022c4:	f7fd ff92 	bl	80001ec <__adddf3>
 80022c8:	eeb0 1a48 	vmov.f32	s2, s16
 80022cc:	eef0 1a68 	vmov.f32	s3, s17
 80022d0:	ec41 0b10 	vmov	d0, r0, r1
 80022d4:	f007 fa98 	bl	8009808 <atan2>
 80022d8:	ec51 0b10 	vmov	r0, r1, d0
 80022dc:	f7fe fb4e 	bl	800097c <__aeabi_d2f>
 80022e0:	4604      	mov	r4, r0
	pitch *= 180.0 / PI;
 80022e2:	f8da 0000 	ldr.w	r0, [sl]
 80022e6:	f7fe f8df 	bl	80004a8 <__aeabi_f2d>
 80022ea:	a319      	add	r3, pc, #100	; (adr r3, 8002350 <calc_RollPitchYaw+0x298>)
 80022ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f0:	f7fe f932 	bl	8000558 <__aeabi_dmul>
 80022f4:	f7fe fb42 	bl	800097c <__aeabi_d2f>
 80022f8:	f8ca 0000 	str.w	r0, [sl]
	yaw *= 180.0 / PI;
 80022fc:	6838      	ldr	r0, [r7, #0]
 80022fe:	f7fe f8d3 	bl	80004a8 <__aeabi_f2d>
 8002302:	a313      	add	r3, pc, #76	; (adr r3, 8002350 <calc_RollPitchYaw+0x298>)
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	f7fe f926 	bl	8000558 <__aeabi_dmul>
 800230c:	f7fe fb36 	bl	800097c <__aeabi_d2f>
	yaw -=  -1.1; // CHANGE-> (In Leeds, UK declination = -1.1) ... Declination at Danville, California is 13 degrees 48 minutes and 47 seconds on 2014-04-04 (+13.8)
 8002310:	f7fe f8ca 	bl	80004a8 <__aeabi_f2d>
 8002314:	a310      	add	r3, pc, #64	; (adr r3, 8002358 <calc_RollPitchYaw+0x2a0>)
 8002316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231a:	f7fd ff67 	bl	80001ec <__adddf3>
 800231e:	f7fe fb2d 	bl	800097c <__aeabi_d2f>
 8002322:	6038      	str	r0, [r7, #0]
	roll *= 180.0 / PI;
 8002324:	4620      	mov	r0, r4
 8002326:	f7fe f8bf 	bl	80004a8 <__aeabi_f2d>
 800232a:	a309      	add	r3, pc, #36	; (adr r3, 8002350 <calc_RollPitchYaw+0x298>)
 800232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002330:	f7fe f912 	bl	8000558 <__aeabi_dmul>
 8002334:	f7fe fb22 	bl	800097c <__aeabi_d2f>
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <calc_RollPitchYaw+0x2f8>)
 800233a:	6018      	str	r0, [r3, #0]
	sum = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	6033      	str	r3, [r6, #0]
	sumCount = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	602b      	str	r3, [r5, #0]
}
 8002344:	b007      	add	sp, #28
 8002346:	ecbd 8b04 	vpop	{d8-d9}
 800234a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800234e:	bf00      	nop
 8002350:	0d03cf26 	.word	0x0d03cf26
 8002354:	404ca5dc 	.word	0x404ca5dc
 8002358:	9999999a 	.word	0x9999999a
 800235c:	3ff19999 	.word	0x3ff19999
 8002360:	2000025c 	.word	0x2000025c
 8002364:	20000270 	.word	0x20000270
 8002368:	44fa0000 	.word	0x44fa0000
 800236c:	4cbebc20 	.word	0x4cbebc20
 8002370:	20000260 	.word	0x20000260
 8002374:	2000028c 	.word	0x2000028c
 8002378:	20000290 	.word	0x20000290
 800237c:	200003b4 	.word	0x200003b4
 8002380:	40490fdb 	.word	0x40490fdb
 8002384:	2000036c 	.word	0x2000036c
 8002388:	20000390 	.word	0x20000390
 800238c:	43340000 	.word	0x43340000
 8002390:	20000398 	.word	0x20000398
 8002394:	200003bc 	.word	0x200003bc
 8002398:	20000380 	.word	0x20000380
 800239c:	20000370 	.word	0x20000370
 80023a0:	200003b8 	.word	0x200003b8
 80023a4:	20000384 	.word	0x20000384
 80023a8:	2000001c 	.word	0x2000001c
 80023ac:	2000039c 	.word	0x2000039c
 80023b0:	200003ac 	.word	0x200003ac
 80023b4:	200003a8 	.word	0x200003a8
		readAccelData(accelCount);  // Read the x/y/z adc values
 80023b8:	4c69      	ldr	r4, [pc, #420]	; (8002560 <calc_RollPitchYaw+0x4a8>)
 80023ba:	4620      	mov	r0, r4
 80023bc:	f7fe feb6 	bl	800112c <readAccelData>
		ax = (float) accelCount[0] * aRes - accelBias[0]; // get actual g value, this depends on scale being set
 80023c0:	f9b4 3000 	ldrsh.w	r3, [r4]
 80023c4:	ee07 3a10 	vmov	s14, r3
 80023c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80023cc:	4b65      	ldr	r3, [pc, #404]	; (8002564 <calc_RollPitchYaw+0x4ac>)
 80023ce:	edd3 7a00 	vldr	s15, [r3]
 80023d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023d6:	4b64      	ldr	r3, [pc, #400]	; (8002568 <calc_RollPitchYaw+0x4b0>)
 80023d8:	edd3 6a00 	vldr	s13, [r3]
 80023dc:	ee37 7a66 	vsub.f32	s14, s14, s13
 80023e0:	4a62      	ldr	r2, [pc, #392]	; (800256c <calc_RollPitchYaw+0x4b4>)
 80023e2:	ed82 7a00 	vstr	s14, [r2]
		ay = (float) accelCount[1] * aRes - accelBias[1];
 80023e6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80023ea:	ee07 2a10 	vmov	s14, r2
 80023ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80023f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023f6:	edd3 6a01 	vldr	s13, [r3, #4]
 80023fa:	ee37 7a66 	vsub.f32	s14, s14, s13
 80023fe:	4a5c      	ldr	r2, [pc, #368]	; (8002570 <calc_RollPitchYaw+0x4b8>)
 8002400:	ed82 7a00 	vstr	s14, [r2]
		az = (float) accelCount[2] * aRes - accelBias[2];
 8002404:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8002408:	ee07 2a10 	vmov	s14, r2
 800240c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002414:	ed93 7a02 	vldr	s14, [r3, #8]
 8002418:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800241c:	4b55      	ldr	r3, [pc, #340]	; (8002574 <calc_RollPitchYaw+0x4bc>)
 800241e:	edc3 7a00 	vstr	s15, [r3]
		readGyroData(gyroCount);  // Read the x/y/z adc values
 8002422:	4c55      	ldr	r4, [pc, #340]	; (8002578 <calc_RollPitchYaw+0x4c0>)
 8002424:	4620      	mov	r0, r4
 8002426:	f7fe fea3 	bl	8001170 <readGyroData>
		gx = (float) gyroCount[0] * gRes - gyroBias[0]; // get actual gyro value, this depends on scale being set
 800242a:	f9b4 3000 	ldrsh.w	r3, [r4]
 800242e:	ee07 3a10 	vmov	s14, r3
 8002432:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002436:	4b51      	ldr	r3, [pc, #324]	; (800257c <calc_RollPitchYaw+0x4c4>)
 8002438:	edd3 7a00 	vldr	s15, [r3]
 800243c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002440:	4b4f      	ldr	r3, [pc, #316]	; (8002580 <calc_RollPitchYaw+0x4c8>)
 8002442:	edd3 6a00 	vldr	s13, [r3]
 8002446:	ee37 7a66 	vsub.f32	s14, s14, s13
 800244a:	4a4e      	ldr	r2, [pc, #312]	; (8002584 <calc_RollPitchYaw+0x4cc>)
 800244c:	ed82 7a00 	vstr	s14, [r2]
		gy = (float) gyroCount[1] * gRes - gyroBias[1];
 8002450:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8002454:	ee07 2a10 	vmov	s14, r2
 8002458:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800245c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002460:	edd3 6a01 	vldr	s13, [r3, #4]
 8002464:	ee37 7a66 	vsub.f32	s14, s14, s13
 8002468:	4a47      	ldr	r2, [pc, #284]	; (8002588 <calc_RollPitchYaw+0x4d0>)
 800246a:	ed82 7a00 	vstr	s14, [r2]
		gz = (float) gyroCount[2] * gRes - gyroBias[2];
 800246e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8002472:	ee07 2a10 	vmov	s14, r2
 8002476:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800247a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800247e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002482:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002486:	4b41      	ldr	r3, [pc, #260]	; (800258c <calc_RollPitchYaw+0x4d4>)
 8002488:	edc3 7a00 	vstr	s15, [r3]
		readMagData(magCount);  // Read the x/y/z adc values
 800248c:	4c40      	ldr	r4, [pc, #256]	; (8002590 <calc_RollPitchYaw+0x4d8>)
 800248e:	4620      	mov	r0, r4
 8002490:	f7fe fe90 	bl	80011b4 <readMagData>
		mx = (float) magCount[0] * mRes * magCalibration[0] - magbias[0]; // get actual magnetometer value, this depends on scale being set
 8002494:	f9b4 3000 	ldrsh.w	r3, [r4]
 8002498:	ee07 3a10 	vmov	s14, r3
 800249c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024a0:	4b3c      	ldr	r3, [pc, #240]	; (8002594 <calc_RollPitchYaw+0x4dc>)
 80024a2:	edd3 7a00 	vldr	s15, [r3]
 80024a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024aa:	4a3b      	ldr	r2, [pc, #236]	; (8002598 <calc_RollPitchYaw+0x4e0>)
 80024ac:	edd2 6a00 	vldr	s13, [r2]
 80024b0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80024b4:	4b39      	ldr	r3, [pc, #228]	; (800259c <calc_RollPitchYaw+0x4e4>)
 80024b6:	edd3 6a00 	vldr	s13, [r3]
 80024ba:	ee37 7a66 	vsub.f32	s14, s14, s13
 80024be:	4938      	ldr	r1, [pc, #224]	; (80025a0 <calc_RollPitchYaw+0x4e8>)
 80024c0:	ed81 7a00 	vstr	s14, [r1]
		my = (float) magCount[1] * mRes * magCalibration[1] - magbias[1];
 80024c4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80024c8:	ee07 1a10 	vmov	s14, r1
 80024cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024d4:	edd2 6a01 	vldr	s13, [r2, #4]
 80024d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80024dc:	edd3 6a01 	vldr	s13, [r3, #4]
 80024e0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80024e4:	492f      	ldr	r1, [pc, #188]	; (80025a4 <calc_RollPitchYaw+0x4ec>)
 80024e6:	ed81 7a00 	vstr	s14, [r1]
		mz = (float) magCount[2] * mRes * magCalibration[2] - magbias[2];
 80024ea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80024ee:	ee07 1a10 	vmov	s14, r1
 80024f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80024f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024fa:	ed92 7a02 	vldr	s14, [r2, #8]
 80024fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002502:	ed93 7a02 	vldr	s14, [r3, #8]
 8002506:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800250a:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <calc_RollPitchYaw+0x4f0>)
 800250c:	edc3 7a00 	vstr	s15, [r3]
 8002510:	e5e2      	b.n	80020d8 <calc_RollPitchYaw+0x20>
		float32_t timer_load = 65535;
 8002512:	4b26      	ldr	r3, [pc, #152]	; (80025ac <calc_RollPitchYaw+0x4f4>)
 8002514:	9301      	str	r3, [sp, #4]
		float32_t time_difference = 0;
 8002516:	2600      	movs	r6, #0
 8002518:	ad06      	add	r5, sp, #24
 800251a:	f845 6d10 	str.w	r6, [r5, #-16]!
		arm_sub_f32(&timer_load, &lastUpdate, &time_difference, 1);
 800251e:	2301      	movs	r3, #1
 8002520:	462a      	mov	r2, r5
 8002522:	4923      	ldr	r1, [pc, #140]	; (80025b0 <calc_RollPitchYaw+0x4f8>)
 8002524:	a801      	add	r0, sp, #4
 8002526:	f003 fe57 	bl	80061d8 <arm_sub_f32>
		float32_t time_diff_plus_now = 0;
 800252a:	ac06      	add	r4, sp, #24
 800252c:	f844 6d0c 	str.w	r6, [r4, #-12]!
		arm_add_f32(&time_difference, &Now, &time_diff_plus_now, 1);
 8002530:	2301      	movs	r3, #1
 8002532:	4622      	mov	r2, r4
 8002534:	491f      	ldr	r1, [pc, #124]	; (80025b4 <calc_RollPitchYaw+0x4fc>)
 8002536:	4628      	mov	r0, r5
 8002538:	f003 fe2e 	bl	8006198 <arm_add_f32>
		float32_t prescaler = 2000;
 800253c:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <calc_RollPitchYaw+0x500>)
 800253e:	9305      	str	r3, [sp, #20]
		arm_mult_f32(&prescaler, &time_diff_plus_now, &top, 1);
 8002540:	2301      	movs	r3, #1
 8002542:	aa04      	add	r2, sp, #16
 8002544:	4621      	mov	r1, r4
 8002546:	a805      	add	r0, sp, #20
 8002548:	f003 fe36 	bl	80061b8 <arm_mult_f32>
		deltat = top/TIMER_CLK_FREQ;
 800254c:	eddd 6a04 	vldr	s13, [sp, #16]
 8002550:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80025bc <calc_RollPitchYaw+0x504>
 8002554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002558:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <calc_RollPitchYaw+0x508>)
 800255a:	edc3 7a00 	vstr	s15, [r3]
 800255e:	e5e7      	b.n	8002130 <calc_RollPitchYaw+0x78>
 8002560:	200002f8 	.word	0x200002f8
 8002564:	20000388 	.word	0x20000388
 8002568:	20000004 	.word	0x20000004
 800256c:	20000384 	.word	0x20000384
 8002570:	200003b8 	.word	0x200003b8
 8002574:	20000370 	.word	0x20000370
 8002578:	20000378 	.word	0x20000378
 800257c:	20000394 	.word	0x20000394
 8002580:	20000010 	.word	0x20000010
 8002584:	200003b4 	.word	0x200003b4
 8002588:	2000036c 	.word	0x2000036c
 800258c:	20000390 	.word	0x20000390
 8002590:	200003a0 	.word	0x200003a0
 8002594:	200003b0 	.word	0x200003b0
 8002598:	20000274 	.word	0x20000274
 800259c:	20000280 	.word	0x20000280
 80025a0:	200003bc 	.word	0x200003bc
 80025a4:	20000380 	.word	0x20000380
 80025a8:	20000398 	.word	0x20000398
 80025ac:	477fff00 	.word	0x477fff00
 80025b0:	20000270 	.word	0x20000270
 80025b4:	2000025c 	.word	0x2000025c
 80025b8:	44fa0000 	.word	0x44fa0000
 80025bc:	4cbebc20 	.word	0x4cbebc20
 80025c0:	20000260 	.word	0x20000260
 80025c4:	00000000 	.word	0x00000000

080025c8 <pid_calculate_roll>:
float roll_elapsed_time = 0;

int roll_pid_clip = 1250;

/** roll PID Calculation **/
float pid_calculate_roll(float IMU_roll_value, int timer_value, float roll_setpoint) {
 80025c8:	b5d0      	push	{r4, r6, r7, lr}
 80025ca:	ed2d 8b04 	vpush	{d8-d9}

	//Calculate error
	roll_error = IMU_roll_value - roll_setpoint;
 80025ce:	ee70 8a60 	vsub.f32	s17, s0, s1
 80025d2:	4b3b      	ldr	r3, [pc, #236]	; (80026c0 <pid_calculate_roll+0xf8>)
 80025d4:	edc3 8a00 	vstr	s17, [r3]

	//Proportional component
	roll_p = roll_p_gain * roll_error;
 80025d8:	4b3a      	ldr	r3, [pc, #232]	; (80026c4 <pid_calculate_roll+0xfc>)
 80025da:	ed93 8a00 	vldr	s16, [r3]
 80025de:	ee28 8a88 	vmul.f32	s16, s17, s16
 80025e2:	4b39      	ldr	r3, [pc, #228]	; (80026c8 <pid_calculate_roll+0x100>)
 80025e4:	ed83 8a00 	vstr	s16, [r3]

	//Integral
	roll_i += (roll_i_gain * roll_error * delta_t);
 80025e8:	4b38      	ldr	r3, [pc, #224]	; (80026cc <pid_calculate_roll+0x104>)
 80025ea:	edd3 7a00 	vldr	s15, [r3]
 80025ee:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80025f2:	ee17 0a90 	vmov	r0, s15
 80025f6:	f7fd ff57 	bl	80004a8 <__aeabi_f2d>
 80025fa:	a32f      	add	r3, pc, #188	; (adr r3, 80026b8 <pid_calculate_roll+0xf0>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	f7fd ffaa 	bl	8000558 <__aeabi_dmul>
 8002604:	4606      	mov	r6, r0
 8002606:	460f      	mov	r7, r1
 8002608:	4c31      	ldr	r4, [pc, #196]	; (80026d0 <pid_calculate_roll+0x108>)
 800260a:	6820      	ldr	r0, [r4, #0]
 800260c:	f7fd ff4c 	bl	80004a8 <__aeabi_f2d>
 8002610:	4632      	mov	r2, r6
 8002612:	463b      	mov	r3, r7
 8002614:	f7fd fdea 	bl	80001ec <__adddf3>
 8002618:	f7fe f9b0 	bl	800097c <__aeabi_d2f>
 800261c:	ee09 0a10 	vmov	s18, r0
 8002620:	6020      	str	r0, [r4, #0]

	//Derivative component
	roll_d = roll_d_gain * ( (roll_error - roll_last_d_error) / delta_t);
 8002622:	4c2c      	ldr	r4, [pc, #176]	; (80026d4 <pid_calculate_roll+0x10c>)
 8002624:	edd4 7a00 	vldr	s15, [r4]
 8002628:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800262c:	ee17 0a90 	vmov	r0, s15
 8002630:	f7fd ff3a 	bl	80004a8 <__aeabi_f2d>
 8002634:	a320      	add	r3, pc, #128	; (adr r3, 80026b8 <pid_calculate_roll+0xf0>)
 8002636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263a:	f7fe f8b7 	bl	80007ac <__aeabi_ddiv>
 800263e:	4606      	mov	r6, r0
 8002640:	460f      	mov	r7, r1
 8002642:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <pid_calculate_roll+0x110>)
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	f7fd ff2f 	bl	80004a8 <__aeabi_f2d>
 800264a:	4632      	mov	r2, r6
 800264c:	463b      	mov	r3, r7
 800264e:	f7fd ff83 	bl	8000558 <__aeabi_dmul>
 8002652:	f7fe f993 	bl	800097c <__aeabi_d2f>
 8002656:	ee07 0a90 	vmov	s15, r0
 800265a:	4b20      	ldr	r3, [pc, #128]	; (80026dc <pid_calculate_roll+0x114>)
 800265c:	6018      	str	r0, [r3, #0]
	roll_last_d_error = roll_error;
 800265e:	edc4 8a00 	vstr	s17, [r4]

	//PID together
	roll_output = roll_p + roll_i + roll_d;
 8002662:	ee38 8a09 	vadd.f32	s16, s16, s18
 8002666:	ee37 8a88 	vadd.f32	s16, s15, s16
 800266a:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <pid_calculate_roll+0x118>)
 800266c:	ed83 8a00 	vstr	s16, [r3]

	//Clip PID output in event of extreme swings
	if (roll_output < -roll_pid_clip) {
 8002670:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <pid_calculate_roll+0x11c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	425a      	negs	r2, r3
 8002676:	ee07 2a90 	vmov	s15, r2
 800267a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800267e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002686:	d40c      	bmi.n	80026a2 <pid_calculate_roll+0xda>
		roll_output = -roll_pid_clip;
	} else if (roll_output > roll_pid_clip) {
 8002688:	ee07 3a90 	vmov	s15, r3
 800268c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002690:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002698:	dd06      	ble.n	80026a8 <pid_calculate_roll+0xe0>
		roll_output = roll_pid_clip;
 800269a:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <pid_calculate_roll+0x118>)
 800269c:	edc3 7a00 	vstr	s15, [r3]
 80026a0:	e002      	b.n	80026a8 <pid_calculate_roll+0xe0>
		roll_output = -roll_pid_clip;
 80026a2:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <pid_calculate_roll+0x118>)
 80026a4:	edc3 7a00 	vstr	s15, [r3]
	}

	return roll_output;
}
 80026a8:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <pid_calculate_roll+0x118>)
 80026aa:	ed93 0a00 	vldr	s0, [r3]
 80026ae:	ecbd 8b04 	vpop	{d8-d9}
 80026b2:	bdd0      	pop	{r4, r6, r7, pc}
 80026b4:	f3af 8000 	nop.w
 80026b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80026bc:	3f60624d 	.word	0x3f60624d
 80026c0:	200002a0 	.word	0x200002a0
 80026c4:	20000044 	.word	0x20000044
 80026c8:	200003d4 	.word	0x200003d4
 80026cc:	20000040 	.word	0x20000040
 80026d0:	200003e0 	.word	0x200003e0
 80026d4:	200002a4 	.word	0x200002a4
 80026d8:	2000003c 	.word	0x2000003c
 80026dc:	200003c0 	.word	0x200003c0
 80026e0:	200002a8 	.word	0x200002a8
 80026e4:	20000048 	.word	0x20000048

080026e8 <pid_calculate_pitch>:
float pitch_elapsed_time = 0;

int pitch_pid_clip = 1250;

/** Pitch PID Calculation **/
float pid_calculate_pitch(float IMU_pitch_value, int timer_value, float pitch_setpoint) {
 80026e8:	b5d0      	push	{r4, r6, r7, lr}
 80026ea:	ed2d 8b04 	vpush	{d8-d9}

	//Calculate error
	pitch_error = IMU_pitch_value - pitch_setpoint;
 80026ee:	ee70 8a60 	vsub.f32	s17, s0, s1
 80026f2:	4b3b      	ldr	r3, [pc, #236]	; (80027e0 <pid_calculate_pitch+0xf8>)
 80026f4:	edc3 8a00 	vstr	s17, [r3]

	//Proportional component
	pitch_p = pitch_p_gain * pitch_error;
 80026f8:	4b3a      	ldr	r3, [pc, #232]	; (80027e4 <pid_calculate_pitch+0xfc>)
 80026fa:	ed93 8a00 	vldr	s16, [r3]
 80026fe:	ee28 8a88 	vmul.f32	s16, s17, s16
 8002702:	4b39      	ldr	r3, [pc, #228]	; (80027e8 <pid_calculate_pitch+0x100>)
 8002704:	ed83 8a00 	vstr	s16, [r3]

	//Integral
	pitch_i += (pitch_i_gain * pitch_error * delta_t);
 8002708:	4b38      	ldr	r3, [pc, #224]	; (80027ec <pid_calculate_pitch+0x104>)
 800270a:	edd3 7a00 	vldr	s15, [r3]
 800270e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002712:	ee17 0a90 	vmov	r0, s15
 8002716:	f7fd fec7 	bl	80004a8 <__aeabi_f2d>
 800271a:	a32f      	add	r3, pc, #188	; (adr r3, 80027d8 <pid_calculate_pitch+0xf0>)
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	f7fd ff1a 	bl	8000558 <__aeabi_dmul>
 8002724:	4606      	mov	r6, r0
 8002726:	460f      	mov	r7, r1
 8002728:	4c31      	ldr	r4, [pc, #196]	; (80027f0 <pid_calculate_pitch+0x108>)
 800272a:	6820      	ldr	r0, [r4, #0]
 800272c:	f7fd febc 	bl	80004a8 <__aeabi_f2d>
 8002730:	4632      	mov	r2, r6
 8002732:	463b      	mov	r3, r7
 8002734:	f7fd fd5a 	bl	80001ec <__adddf3>
 8002738:	f7fe f920 	bl	800097c <__aeabi_d2f>
 800273c:	ee09 0a10 	vmov	s18, r0
 8002740:	6020      	str	r0, [r4, #0]

	//Derivative component
	pitch_d = pitch_d_gain * ( (pitch_error - pitch_last_d_error) / delta_t);
 8002742:	4c2c      	ldr	r4, [pc, #176]	; (80027f4 <pid_calculate_pitch+0x10c>)
 8002744:	edd4 7a00 	vldr	s15, [r4]
 8002748:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800274c:	ee17 0a90 	vmov	r0, s15
 8002750:	f7fd feaa 	bl	80004a8 <__aeabi_f2d>
 8002754:	a320      	add	r3, pc, #128	; (adr r3, 80027d8 <pid_calculate_pitch+0xf0>)
 8002756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275a:	f7fe f827 	bl	80007ac <__aeabi_ddiv>
 800275e:	4606      	mov	r6, r0
 8002760:	460f      	mov	r7, r1
 8002762:	4b25      	ldr	r3, [pc, #148]	; (80027f8 <pid_calculate_pitch+0x110>)
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	f7fd fe9f 	bl	80004a8 <__aeabi_f2d>
 800276a:	4632      	mov	r2, r6
 800276c:	463b      	mov	r3, r7
 800276e:	f7fd fef3 	bl	8000558 <__aeabi_dmul>
 8002772:	f7fe f903 	bl	800097c <__aeabi_d2f>
 8002776:	ee07 0a90 	vmov	s15, r0
 800277a:	4b20      	ldr	r3, [pc, #128]	; (80027fc <pid_calculate_pitch+0x114>)
 800277c:	6018      	str	r0, [r3, #0]
	pitch_last_d_error = pitch_error;
 800277e:	edc4 8a00 	vstr	s17, [r4]

	//PID together
	pitch_output = pitch_p + pitch_i + pitch_d;
 8002782:	ee38 8a09 	vadd.f32	s16, s16, s18
 8002786:	ee37 8a88 	vadd.f32	s16, s15, s16
 800278a:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <pid_calculate_pitch+0x118>)
 800278c:	ed83 8a00 	vstr	s16, [r3]

	//Clip PID output in event of extreme swings
	if (pitch_output < -pitch_pid_clip) {
 8002790:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <pid_calculate_pitch+0x11c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	425a      	negs	r2, r3
 8002796:	ee07 2a90 	vmov	s15, r2
 800279a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800279e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80027a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a6:	d40c      	bmi.n	80027c2 <pid_calculate_pitch+0xda>
		pitch_output = -pitch_pid_clip;
	} else if (pitch_output > pitch_pid_clip) {
 80027a8:	ee07 3a90 	vmov	s15, r3
 80027ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027b0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80027b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b8:	dd06      	ble.n	80027c8 <pid_calculate_pitch+0xe0>
		pitch_output = pitch_pid_clip;
 80027ba:	4b11      	ldr	r3, [pc, #68]	; (8002800 <pid_calculate_pitch+0x118>)
 80027bc:	edc3 7a00 	vstr	s15, [r3]
 80027c0:	e002      	b.n	80027c8 <pid_calculate_pitch+0xe0>
		pitch_output = -pitch_pid_clip;
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <pid_calculate_pitch+0x118>)
 80027c4:	edc3 7a00 	vstr	s15, [r3]
	}

	return pitch_output;
}
 80027c8:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <pid_calculate_pitch+0x118>)
 80027ca:	ed93 0a00 	vldr	s0, [r3]
 80027ce:	ecbd 8b04 	vpop	{d8-d9}
 80027d2:	bdd0      	pop	{r4, r6, r7, pc}
 80027d4:	f3af 8000 	nop.w
 80027d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80027dc:	3f60624d 	.word	0x3f60624d
 80027e0:	20000294 	.word	0x20000294
 80027e4:	20000034 	.word	0x20000034
 80027e8:	200003cc 	.word	0x200003cc
 80027ec:	20000030 	.word	0x20000030
 80027f0:	200003d0 	.word	0x200003d0
 80027f4:	20000298 	.word	0x20000298
 80027f8:	2000002c 	.word	0x2000002c
 80027fc:	200003c4 	.word	0x200003c4
 8002800:	2000029c 	.word	0x2000029c
 8002804:	20000038 	.word	0x20000038

08002808 <pid_calculate_yaw>:
float yaw_elapsed_time = 0;

int yaw_pid_clip = 1250;

/** yaw PID Calculation **/
float pid_calculate_yaw(float IMU_yaw_value, int timer_value, float yaw_setpoint) {
 8002808:	b5d0      	push	{r4, r6, r7, lr}
 800280a:	ed2d 8b04 	vpush	{d8-d9}

	//Calculate error
	yaw_error = IMU_yaw_value - yaw_setpoint;
 800280e:	ee70 8a60 	vsub.f32	s17, s0, s1
 8002812:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <pid_calculate_yaw+0xf8>)
 8002814:	edc3 8a00 	vstr	s17, [r3]

	//Proportional component
	yaw_p = yaw_p_gain * yaw_error;
 8002818:	4b3a      	ldr	r3, [pc, #232]	; (8002904 <pid_calculate_yaw+0xfc>)
 800281a:	ed93 8a00 	vldr	s16, [r3]
 800281e:	ee28 8a88 	vmul.f32	s16, s17, s16
 8002822:	4b39      	ldr	r3, [pc, #228]	; (8002908 <pid_calculate_yaw+0x100>)
 8002824:	ed83 8a00 	vstr	s16, [r3]

	//Integral
	yaw_i += (yaw_i_gain * yaw_error * delta_t);
 8002828:	4b38      	ldr	r3, [pc, #224]	; (800290c <pid_calculate_yaw+0x104>)
 800282a:	edd3 7a00 	vldr	s15, [r3]
 800282e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002832:	ee17 0a90 	vmov	r0, s15
 8002836:	f7fd fe37 	bl	80004a8 <__aeabi_f2d>
 800283a:	a32f      	add	r3, pc, #188	; (adr r3, 80028f8 <pid_calculate_yaw+0xf0>)
 800283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002840:	f7fd fe8a 	bl	8000558 <__aeabi_dmul>
 8002844:	4606      	mov	r6, r0
 8002846:	460f      	mov	r7, r1
 8002848:	4c31      	ldr	r4, [pc, #196]	; (8002910 <pid_calculate_yaw+0x108>)
 800284a:	6820      	ldr	r0, [r4, #0]
 800284c:	f7fd fe2c 	bl	80004a8 <__aeabi_f2d>
 8002850:	4632      	mov	r2, r6
 8002852:	463b      	mov	r3, r7
 8002854:	f7fd fcca 	bl	80001ec <__adddf3>
 8002858:	f7fe f890 	bl	800097c <__aeabi_d2f>
 800285c:	ee09 0a10 	vmov	s18, r0
 8002860:	6020      	str	r0, [r4, #0]

	//Derivative component
	yaw_d = yaw_d_gain * ( (yaw_error - yaw_last_d_error) / delta_t);
 8002862:	4c2c      	ldr	r4, [pc, #176]	; (8002914 <pid_calculate_yaw+0x10c>)
 8002864:	edd4 7a00 	vldr	s15, [r4]
 8002868:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800286c:	ee17 0a90 	vmov	r0, s15
 8002870:	f7fd fe1a 	bl	80004a8 <__aeabi_f2d>
 8002874:	a320      	add	r3, pc, #128	; (adr r3, 80028f8 <pid_calculate_yaw+0xf0>)
 8002876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287a:	f7fd ff97 	bl	80007ac <__aeabi_ddiv>
 800287e:	4606      	mov	r6, r0
 8002880:	460f      	mov	r7, r1
 8002882:	4b25      	ldr	r3, [pc, #148]	; (8002918 <pid_calculate_yaw+0x110>)
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	f7fd fe0f 	bl	80004a8 <__aeabi_f2d>
 800288a:	4632      	mov	r2, r6
 800288c:	463b      	mov	r3, r7
 800288e:	f7fd fe63 	bl	8000558 <__aeabi_dmul>
 8002892:	f7fe f873 	bl	800097c <__aeabi_d2f>
 8002896:	ee07 0a90 	vmov	s15, r0
 800289a:	4b20      	ldr	r3, [pc, #128]	; (800291c <pid_calculate_yaw+0x114>)
 800289c:	6018      	str	r0, [r3, #0]
	yaw_last_d_error = yaw_error;
 800289e:	edc4 8a00 	vstr	s17, [r4]

	//PID together
	yaw_output = yaw_p + yaw_i + yaw_d;
 80028a2:	ee38 8a09 	vadd.f32	s16, s16, s18
 80028a6:	ee37 8a88 	vadd.f32	s16, s15, s16
 80028aa:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <pid_calculate_yaw+0x118>)
 80028ac:	ed83 8a00 	vstr	s16, [r3]

	//Clip PID output in event of extreme swings
	if (yaw_output < -yaw_pid_clip) {
 80028b0:	4b1c      	ldr	r3, [pc, #112]	; (8002924 <pid_calculate_yaw+0x11c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	425a      	negs	r2, r3
 80028b6:	ee07 2a90 	vmov	s15, r2
 80028ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028be:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80028c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c6:	d40c      	bmi.n	80028e2 <pid_calculate_yaw+0xda>
		yaw_output = -yaw_pid_clip;
	} else if (yaw_output > yaw_pid_clip) {
 80028c8:	ee07 3a90 	vmov	s15, r3
 80028cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	dd06      	ble.n	80028e8 <pid_calculate_yaw+0xe0>
		yaw_output = yaw_pid_clip;
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <pid_calculate_yaw+0x118>)
 80028dc:	edc3 7a00 	vstr	s15, [r3]
 80028e0:	e002      	b.n	80028e8 <pid_calculate_yaw+0xe0>
		yaw_output = -yaw_pid_clip;
 80028e2:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <pid_calculate_yaw+0x118>)
 80028e4:	edc3 7a00 	vstr	s15, [r3]
	}

	return yaw_output;
}
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <pid_calculate_yaw+0x118>)
 80028ea:	ed93 0a00 	vldr	s0, [r3]
 80028ee:	ecbd 8b04 	vpop	{d8-d9}
 80028f2:	bdd0      	pop	{r4, r6, r7, pc}
 80028f4:	f3af 8000 	nop.w
 80028f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80028fc:	3f60624d 	.word	0x3f60624d
 8002900:	200002ac 	.word	0x200002ac
 8002904:	20000054 	.word	0x20000054
 8002908:	200003dc 	.word	0x200003dc
 800290c:	20000050 	.word	0x20000050
 8002910:	200003d8 	.word	0x200003d8
 8002914:	200002b0 	.word	0x200002b0
 8002918:	2000004c 	.word	0x2000004c
 800291c:	200003c8 	.word	0x200003c8
 8002920:	200002b4 	.word	0x200002b4
 8002924:	20000058 	.word	0x20000058

08002928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002928:	b510      	push	{r4, lr}
 800292a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800292c:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <HAL_InitTick+0x40>)
 800292e:	7818      	ldrb	r0, [r3, #0]
 8002930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002934:	fbb3 f3f0 	udiv	r3, r3, r0
 8002938:	4a0c      	ldr	r2, [pc, #48]	; (800296c <HAL_InitTick+0x44>)
 800293a:	6810      	ldr	r0, [r2, #0]
 800293c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002940:	f000 fa44 	bl	8002dcc <HAL_SYSTICK_Config>
 8002944:	b968      	cbnz	r0, 8002962 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002946:	2c0f      	cmp	r4, #15
 8002948:	d901      	bls.n	800294e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800294a:	2001      	movs	r0, #1
 800294c:	e00a      	b.n	8002964 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800294e:	2200      	movs	r2, #0
 8002950:	4621      	mov	r1, r4
 8002952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002956:	f000 f9f7 	bl	8002d48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800295a:	4b05      	ldr	r3, [pc, #20]	; (8002970 <HAL_InitTick+0x48>)
 800295c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800295e:	2000      	movs	r0, #0
 8002960:	e000      	b.n	8002964 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002962:	2001      	movs	r0, #1
}
 8002964:	bd10      	pop	{r4, pc}
 8002966:	bf00      	nop
 8002968:	2000005c 	.word	0x2000005c
 800296c:	20000064 	.word	0x20000064
 8002970:	20000060 	.word	0x20000060

08002974 <HAL_Init>:
{
 8002974:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_Init+0x30>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002986:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800298e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002990:	2003      	movs	r0, #3
 8002992:	f000 f9c7 	bl	8002d24 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002996:	2000      	movs	r0, #0
 8002998:	f7ff ffc6 	bl	8002928 <HAL_InitTick>
  HAL_MspInit();
 800299c:	f004 f818 	bl	80069d0 <HAL_MspInit>
}
 80029a0:	2000      	movs	r0, #0
 80029a2:	bd08      	pop	{r3, pc}
 80029a4:	40023c00 	.word	0x40023c00

080029a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80029a8:	4a03      	ldr	r2, [pc, #12]	; (80029b8 <HAL_IncTick+0x10>)
 80029aa:	6811      	ldr	r1, [r2, #0]
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <HAL_IncTick+0x14>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	440b      	add	r3, r1
 80029b2:	6013      	str	r3, [r2, #0]
}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	200003e4 	.word	0x200003e4
 80029bc:	2000005c 	.word	0x2000005c

080029c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80029c0:	4b01      	ldr	r3, [pc, #4]	; (80029c8 <HAL_GetTick+0x8>)
 80029c2:	6818      	ldr	r0, [r3, #0]
}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	200003e4 	.word	0x200003e4

080029cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029cc:	b538      	push	{r3, r4, r5, lr}
 80029ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80029d0:	f7ff fff6 	bl	80029c0 <HAL_GetTick>
 80029d4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029d6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80029da:	d002      	beq.n	80029e2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <HAL_Delay+0x24>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029e2:	f7ff ffed 	bl	80029c0 <HAL_GetTick>
 80029e6:	1b40      	subs	r0, r0, r5
 80029e8:	42a0      	cmp	r0, r4
 80029ea:	d3fa      	bcc.n	80029e2 <HAL_Delay+0x16>
  {
  }
}
 80029ec:	bd38      	pop	{r3, r4, r5, pc}
 80029ee:	bf00      	nop
 80029f0:	2000005c 	.word	0x2000005c

080029f4 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029f4:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <ADC_Init+0x12c>)
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80029fc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	6841      	ldr	r1, [r0, #4]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a06:	6802      	ldr	r2, [r0, #0]
 8002a08:	6853      	ldr	r3, [r2, #4]
 8002a0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a0e:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a10:	6802      	ldr	r2, [r0, #0]
 8002a12:	6853      	ldr	r3, [r2, #4]
 8002a14:	6901      	ldr	r1, [r0, #16]
 8002a16:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a1a:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a1c:	6802      	ldr	r2, [r0, #0]
 8002a1e:	6853      	ldr	r3, [r2, #4]
 8002a20:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002a24:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a26:	6802      	ldr	r2, [r0, #0]
 8002a28:	6853      	ldr	r3, [r2, #4]
 8002a2a:	6881      	ldr	r1, [r0, #8]
 8002a2c:	430b      	orrs	r3, r1
 8002a2e:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a30:	6802      	ldr	r2, [r0, #0]
 8002a32:	6893      	ldr	r3, [r2, #8]
 8002a34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a38:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a3a:	6802      	ldr	r2, [r0, #0]
 8002a3c:	6893      	ldr	r3, [r2, #8]
 8002a3e:	68c1      	ldr	r1, [r0, #12]
 8002a40:	430b      	orrs	r3, r1
 8002a42:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a44:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002a46:	4b37      	ldr	r3, [pc, #220]	; (8002b24 <ADC_Init+0x130>)
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d04b      	beq.n	8002ae4 <ADC_Init+0xf0>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a4c:	6802      	ldr	r2, [r0, #0]
 8002a4e:	6893      	ldr	r3, [r2, #8]
 8002a50:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002a54:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a56:	6802      	ldr	r2, [r0, #0]
 8002a58:	6893      	ldr	r3, [r2, #8]
 8002a5a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a60:	6802      	ldr	r2, [r0, #0]
 8002a62:	6893      	ldr	r3, [r2, #8]
 8002a64:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002a68:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a6a:	6802      	ldr	r2, [r0, #0]
 8002a6c:	6893      	ldr	r3, [r2, #8]
 8002a6e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002a70:	430b      	orrs	r3, r1
 8002a72:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a74:	6802      	ldr	r2, [r0, #0]
 8002a76:	6893      	ldr	r3, [r2, #8]
 8002a78:	f023 0302 	bic.w	r3, r3, #2
 8002a7c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a7e:	6802      	ldr	r2, [r0, #0]
 8002a80:	6893      	ldr	r3, [r2, #8]
 8002a82:	7e01      	ldrb	r1, [r0, #24]
 8002a84:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8002a88:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a8a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d133      	bne.n	8002afa <ADC_Init+0x106>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a92:	6802      	ldr	r2, [r0, #0]
 8002a94:	6853      	ldr	r3, [r2, #4]
 8002a96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a9a:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a9c:	6802      	ldr	r2, [r0, #0]
 8002a9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002aa0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002aa4:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002aa6:	6801      	ldr	r1, [r0, #0]
 8002aa8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002aaa:	69c2      	ldr	r2, [r0, #28]
 8002aac:	3a01      	subs	r2, #1
 8002aae:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002ab2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ab4:	6802      	ldr	r2, [r0, #0]
 8002ab6:	6893      	ldr	r3, [r2, #8]
 8002ab8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002abc:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002abe:	6802      	ldr	r2, [r0, #0]
 8002ac0:	6893      	ldr	r3, [r2, #8]
 8002ac2:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8002ac6:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8002aca:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002acc:	6802      	ldr	r2, [r0, #0]
 8002ace:	6893      	ldr	r3, [r2, #8]
 8002ad0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ad4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ad6:	6802      	ldr	r2, [r0, #0]
 8002ad8:	6893      	ldr	r3, [r2, #8]
 8002ada:	6941      	ldr	r1, [r0, #20]
 8002adc:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002ae0:	6093      	str	r3, [r2, #8]
}
 8002ae2:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ae4:	6802      	ldr	r2, [r0, #0]
 8002ae6:	6893      	ldr	r3, [r2, #8]
 8002ae8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002aec:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aee:	6802      	ldr	r2, [r0, #0]
 8002af0:	6893      	ldr	r3, [r2, #8]
 8002af2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002af6:	6093      	str	r3, [r2, #8]
 8002af8:	e7bc      	b.n	8002a74 <ADC_Init+0x80>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002afa:	6802      	ldr	r2, [r0, #0]
 8002afc:	6853      	ldr	r3, [r2, #4]
 8002afe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b02:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b04:	6802      	ldr	r2, [r0, #0]
 8002b06:	6853      	ldr	r3, [r2, #4]
 8002b08:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b0c:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b0e:	6801      	ldr	r1, [r0, #0]
 8002b10:	684b      	ldr	r3, [r1, #4]
 8002b12:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002b14:	3a01      	subs	r2, #1
 8002b16:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002b1a:	604b      	str	r3, [r1, #4]
 8002b1c:	e7be      	b.n	8002a9c <ADC_Init+0xa8>
 8002b1e:	bf00      	nop
 8002b20:	40012300 	.word	0x40012300
 8002b24:	0f000001 	.word	0x0f000001

08002b28 <HAL_ADC_Init>:
  if(hadc == NULL)
 8002b28:	b338      	cbz	r0, 8002b7a <HAL_ADC_Init+0x52>
{
 8002b2a:	b510      	push	{r4, lr}
 8002b2c:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b2e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002b30:	b143      	cbz	r3, 8002b44 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b34:	f013 0f10 	tst.w	r3, #16
 8002b38:	d00b      	beq.n	8002b52 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8002b3a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002b42:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8002b44:	f003 ff64 	bl	8006a10 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002b48:	2300      	movs	r3, #0
 8002b4a:	6463      	str	r3, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8002b4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002b50:	e7ef      	b.n	8002b32 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8002b52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b58:	f023 0302 	bic.w	r3, r3, #2
 8002b5c:	f043 0302 	orr.w	r3, r3, #2
 8002b60:	6423      	str	r3, [r4, #64]	; 0x40
    ADC_Init(hadc);
 8002b62:	4620      	mov	r0, r4
 8002b64:	f7ff ff46 	bl	80029f4 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8002b68:	2000      	movs	r0, #0
 8002b6a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002b6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b6e:	f023 0303 	bic.w	r3, r3, #3
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	6423      	str	r3, [r4, #64]	; 0x40
 8002b78:	e7e0      	b.n	8002b3c <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8002b7a:	2001      	movs	r0, #1
}
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_ADC_ConfigChannel>:
{
 8002b80:	b430      	push	{r4, r5}
 8002b82:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002b88:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	f000 80bd 	beq.w	8002d0c <HAL_ADC_ConfigChannel+0x18c>
 8002b92:	2301      	movs	r3, #1
 8002b94:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b98:	680b      	ldr	r3, [r1, #0]
 8002b9a:	2b09      	cmp	r3, #9
 8002b9c:	d93e      	bls.n	8002c1c <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b9e:	6805      	ldr	r5, [r0, #0]
 8002ba0:	68ea      	ldr	r2, [r5, #12]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002ba8:	3b1e      	subs	r3, #30
 8002baa:	2407      	movs	r4, #7
 8002bac:	fa04 f303 	lsl.w	r3, r4, r3
 8002bb0:	ea22 0303 	bic.w	r3, r2, r3
 8002bb4:	60eb      	str	r3, [r5, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bb6:	6805      	ldr	r5, [r0, #0]
 8002bb8:	68ea      	ldr	r2, [r5, #12]
 8002bba:	688c      	ldr	r4, [r1, #8]
 8002bbc:	880b      	ldrh	r3, [r1, #0]
 8002bbe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002bc2:	3b1e      	subs	r3, #30
 8002bc4:	fa04 f303 	lsl.w	r3, r4, r3
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60eb      	str	r3, [r5, #12]
  if (sConfig->Rank < 7U)
 8002bcc:	684b      	ldr	r3, [r1, #4]
 8002bce:	2b06      	cmp	r3, #6
 8002bd0:	d83a      	bhi.n	8002c48 <HAL_ADC_ConfigChannel+0xc8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bd2:	6805      	ldr	r5, [r0, #0]
 8002bd4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002bd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002bda:	3b05      	subs	r3, #5
 8002bdc:	241f      	movs	r4, #31
 8002bde:	fa04 f303 	lsl.w	r3, r4, r3
 8002be2:	ea22 0303 	bic.w	r3, r2, r3
 8002be6:	636b      	str	r3, [r5, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002be8:	6805      	ldr	r5, [r0, #0]
 8002bea:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002bec:	684b      	ldr	r3, [r1, #4]
 8002bee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002bf2:	3b05      	subs	r3, #5
 8002bf4:	880c      	ldrh	r4, [r1, #0]
 8002bf6:	fa04 f303 	lsl.w	r3, r4, r3
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	636b      	str	r3, [r5, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bfe:	6802      	ldr	r2, [r0, #0]
 8002c00:	4b43      	ldr	r3, [pc, #268]	; (8002d10 <HAL_ADC_ConfigChannel+0x190>)
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d050      	beq.n	8002ca8 <HAL_ADC_ConfigChannel+0x128>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c06:	6802      	ldr	r2, [r0, #0]
 8002c08:	4b41      	ldr	r3, [pc, #260]	; (8002d10 <HAL_ADC_ConfigChannel+0x190>)
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d059      	beq.n	8002cc2 <HAL_ADC_ConfigChannel+0x142>
  __HAL_UNLOCK(hadc);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002c14:	4618      	mov	r0, r3
}
 8002c16:	b002      	add	sp, #8
 8002c18:	bc30      	pop	{r4, r5}
 8002c1a:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c1c:	6805      	ldr	r5, [r0, #0]
 8002c1e:	692a      	ldr	r2, [r5, #16]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002c26:	2407      	movs	r4, #7
 8002c28:	fa04 f303 	lsl.w	r3, r4, r3
 8002c2c:	ea22 0303 	bic.w	r3, r2, r3
 8002c30:	612b      	str	r3, [r5, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c32:	6805      	ldr	r5, [r0, #0]
 8002c34:	692a      	ldr	r2, [r5, #16]
 8002c36:	688c      	ldr	r4, [r1, #8]
 8002c38:	880b      	ldrh	r3, [r1, #0]
 8002c3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002c3e:	fa04 f303 	lsl.w	r3, r4, r3
 8002c42:	4313      	orrs	r3, r2
 8002c44:	612b      	str	r3, [r5, #16]
 8002c46:	e7c1      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8002c48:	2b0c      	cmp	r3, #12
 8002c4a:	d816      	bhi.n	8002c7a <HAL_ADC_ConfigChannel+0xfa>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c4c:	6805      	ldr	r5, [r0, #0]
 8002c4e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002c50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002c54:	3b23      	subs	r3, #35	; 0x23
 8002c56:	241f      	movs	r4, #31
 8002c58:	fa04 f303 	lsl.w	r3, r4, r3
 8002c5c:	ea22 0303 	bic.w	r3, r2, r3
 8002c60:	632b      	str	r3, [r5, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c62:	6805      	ldr	r5, [r0, #0]
 8002c64:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002c66:	684b      	ldr	r3, [r1, #4]
 8002c68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002c6c:	3b23      	subs	r3, #35	; 0x23
 8002c6e:	880c      	ldrh	r4, [r1, #0]
 8002c70:	fa04 f303 	lsl.w	r3, r4, r3
 8002c74:	4313      	orrs	r3, r2
 8002c76:	632b      	str	r3, [r5, #48]	; 0x30
 8002c78:	e7c1      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x7e>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c7a:	6805      	ldr	r5, [r0, #0]
 8002c7c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002c7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002c82:	3b41      	subs	r3, #65	; 0x41
 8002c84:	241f      	movs	r4, #31
 8002c86:	fa04 f303 	lsl.w	r3, r4, r3
 8002c8a:	ea22 0303 	bic.w	r3, r2, r3
 8002c8e:	62eb      	str	r3, [r5, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c90:	6805      	ldr	r5, [r0, #0]
 8002c92:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002c94:	684b      	ldr	r3, [r1, #4]
 8002c96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002c9a:	3b41      	subs	r3, #65	; 0x41
 8002c9c:	880c      	ldrh	r4, [r1, #0]
 8002c9e:	fa04 f303 	lsl.w	r3, r4, r3
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	62eb      	str	r3, [r5, #44]	; 0x2c
 8002ca6:	e7aa      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x7e>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ca8:	680b      	ldr	r3, [r1, #0]
 8002caa:	2b12      	cmp	r3, #18
 8002cac:	d1ab      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x86>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002cae:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <HAL_ADC_ConfigChannel+0x194>)
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002cb6:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002cbe:	605a      	str	r2, [r3, #4]
 8002cc0:	e7a1      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cc2:	680b      	ldr	r3, [r1, #0]
 8002cc4:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <HAL_ADC_ConfigChannel+0x198>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d001      	beq.n	8002cce <HAL_ADC_ConfigChannel+0x14e>
 8002cca:	2b11      	cmp	r3, #17
 8002ccc:	d19f      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002cce:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <HAL_ADC_ConfigChannel+0x194>)
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8002cd6:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002cde:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002ce0:	680a      	ldr	r2, [r1, #0]
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <HAL_ADC_ConfigChannel+0x198>)
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d192      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x8e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <HAL_ADC_ConfigChannel+0x19c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0c      	ldr	r2, [pc, #48]	; (8002d20 <HAL_ADC_ConfigChannel+0x1a0>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	0c9b      	lsrs	r3, r3, #18
 8002cf4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002cf8:	005a      	lsls	r2, r3, #1
 8002cfa:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8002cfc:	e002      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x184>
        counter--;
 8002cfe:	9b01      	ldr	r3, [sp, #4]
 8002d00:	3b01      	subs	r3, #1
 8002d02:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002d04:	9b01      	ldr	r3, [sp, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f9      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x17e>
 8002d0a:	e780      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8002d0c:	2002      	movs	r0, #2
 8002d0e:	e782      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x96>
 8002d10:	40012000 	.word	0x40012000
 8002d14:	40012300 	.word	0x40012300
 8002d18:	10000012 	.word	0x10000012
 8002d1c:	20000064 	.word	0x20000064
 8002d20:	431bde83 	.word	0x431bde83

08002d24 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d24:	4a07      	ldr	r2, [pc, #28]	; (8002d44 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002d26:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002d2c:	041b      	lsls	r3, r3, #16
 8002d2e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d30:	0200      	lsls	r0, r0, #8
 8002d32:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d36:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8002d38:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8002d3c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002d40:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002d42:	4770      	bx	lr
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d48:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d4a:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <HAL_NVIC_SetPriority+0x60>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d52:	f1c3 0407 	rsb	r4, r3, #7
 8002d56:	2c04      	cmp	r4, #4
 8002d58:	bf28      	it	cs
 8002d5a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d5c:	1d1d      	adds	r5, r3, #4
 8002d5e:	2d06      	cmp	r5, #6
 8002d60:	d918      	bls.n	8002d94 <HAL_NVIC_SetPriority+0x4c>
 8002d62:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002d68:	fa05 f404 	lsl.w	r4, r5, r4
 8002d6c:	ea21 0104 	bic.w	r1, r1, r4
 8002d70:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d72:	fa05 f303 	lsl.w	r3, r5, r3
 8002d76:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d7a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	db0b      	blt.n	8002d98 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d80:	0109      	lsls	r1, r1, #4
 8002d82:	b2c9      	uxtb	r1, r1
 8002d84:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002d88:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002d8c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002d90:	bc30      	pop	{r4, r5}
 8002d92:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d94:	2300      	movs	r3, #0
 8002d96:	e7e5      	b.n	8002d64 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d98:	f000 000f 	and.w	r0, r0, #15
 8002d9c:	0109      	lsls	r1, r1, #4
 8002d9e:	b2c9      	uxtb	r1, r1
 8002da0:	4b02      	ldr	r3, [pc, #8]	; (8002dac <HAL_NVIC_SetPriority+0x64>)
 8002da2:	5419      	strb	r1, [r3, r0]
 8002da4:	e7f4      	b.n	8002d90 <HAL_NVIC_SetPriority+0x48>
 8002da6:	bf00      	nop
 8002da8:	e000ed00 	.word	0xe000ed00
 8002dac:	e000ed14 	.word	0xe000ed14

08002db0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002db0:	2800      	cmp	r0, #0
 8002db2:	db07      	blt.n	8002dc4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002db4:	f000 021f 	and.w	r2, r0, #31
 8002db8:	0940      	lsrs	r0, r0, #5
 8002dba:	2301      	movs	r3, #1
 8002dbc:	4093      	lsls	r3, r2
 8002dbe:	4a02      	ldr	r2, [pc, #8]	; (8002dc8 <HAL_NVIC_EnableIRQ+0x18>)
 8002dc0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000e100 	.word	0xe000e100

08002dcc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dcc:	3801      	subs	r0, #1
 8002dce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002dd2:	d20a      	bcs.n	8002dea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dd4:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_SYSTICK_Config+0x24>)
 8002dd6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd8:	4a06      	ldr	r2, [pc, #24]	; (8002df4 <HAL_SYSTICK_Config+0x28>)
 8002dda:	21f0      	movs	r1, #240	; 0xf0
 8002ddc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de0:	2000      	movs	r0, #0
 8002de2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de4:	2207      	movs	r2, #7
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002dea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	e000e010 	.word	0xe000e010
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002df8:	6802      	ldr	r2, [r0, #0]
 8002dfa:	b2d3      	uxtb	r3, r2
 8002dfc:	3b10      	subs	r3, #16
 8002dfe:	490b      	ldr	r1, [pc, #44]	; (8002e2c <DMA_CalcBaseAndBitshift+0x34>)
 8002e00:	fba1 1303 	umull	r1, r3, r1, r3
 8002e04:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e06:	490a      	ldr	r1, [pc, #40]	; (8002e30 <DMA_CalcBaseAndBitshift+0x38>)
 8002e08:	5cc9      	ldrb	r1, [r1, r3]
 8002e0a:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	d806      	bhi.n	8002e1e <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e10:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8002e14:	f022 0203 	bic.w	r2, r2, #3
 8002e18:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8002e1a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002e1c:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e1e:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8002e22:	f022 0203 	bic.w	r2, r2, #3
 8002e26:	3204      	adds	r2, #4
 8002e28:	6582      	str	r2, [r0, #88]	; 0x58
 8002e2a:	e7f6      	b.n	8002e1a <DMA_CalcBaseAndBitshift+0x22>
 8002e2c:	aaaaaaab 	.word	0xaaaaaaab
 8002e30:	0800b540 	.word	0x0800b540

08002e34 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e34:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e36:	6982      	ldr	r2, [r0, #24]
 8002e38:	b992      	cbnz	r2, 8002e60 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d00a      	beq.n	8002e54 <DMA_CheckFifoParam+0x20>
 8002e3e:	b11b      	cbz	r3, 8002e48 <DMA_CheckFifoParam+0x14>
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d001      	beq.n	8002e48 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8002e44:	2000      	movs	r0, #0
 8002e46:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e48:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002e4a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002e4e:	d12c      	bne.n	8002eaa <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8002e50:	2000      	movs	r0, #0
 8002e52:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e54:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002e56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e5a:	d028      	beq.n	8002eae <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e60:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002e64:	d005      	beq.n	8002e72 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d929      	bls.n	8002ebe <DMA_CheckFifoParam+0x8a>
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d015      	beq.n	8002e9a <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8002e6e:	2000      	movs	r0, #0
 8002e70:	4770      	bx	lr
    switch (tmp)
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d803      	bhi.n	8002e7e <DMA_CheckFifoParam+0x4a>
 8002e76:	e8df f003 	tbb	[pc, r3]
 8002e7a:	041c      	.short	0x041c
 8002e7c:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8002e7e:	2000      	movs	r0, #0
 8002e80:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002e84:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002e88:	d115      	bne.n	8002eb6 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e8e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002e90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e94:	d011      	beq.n	8002eba <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8002e96:	2000      	movs	r0, #0
 8002e98:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e9a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002e9c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002ea0:	d001      	beq.n	8002ea6 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8002ea2:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002ea4:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	4770      	bx	lr
        status = HAL_ERROR;
 8002eaa:	2001      	movs	r0, #1
 8002eac:	4770      	bx	lr
        status = HAL_ERROR;
 8002eae:	2001      	movs	r0, #1
 8002eb0:	4770      	bx	lr
      status = HAL_ERROR;
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	4770      	bx	lr
        status = HAL_ERROR;
 8002eb6:	2001      	movs	r0, #1
 8002eb8:	4770      	bx	lr
        status = HAL_ERROR;
 8002eba:	2001      	movs	r0, #1
 8002ebc:	4770      	bx	lr
      status = HAL_ERROR;
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	4770      	bx	lr
	...

08002ec4 <HAL_DMA_Init>:
{
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002ec8:	f7ff fd7a 	bl	80029c0 <HAL_GetTick>
  if(hdma == NULL)
 8002ecc:	2c00      	cmp	r4, #0
 8002ece:	d05b      	beq.n	8002f88 <HAL_DMA_Init+0xc4>
 8002ed0:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002ede:	6822      	ldr	r2, [r4, #0]
 8002ee0:	6813      	ldr	r3, [r2, #0]
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	f012 0f01 	tst.w	r2, #1
 8002ef0:	d00a      	beq.n	8002f08 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ef2:	f7ff fd65 	bl	80029c0 <HAL_GetTick>
 8002ef6:	1b40      	subs	r0, r0, r5
 8002ef8:	2805      	cmp	r0, #5
 8002efa:	d9f5      	bls.n	8002ee8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002efc:	2320      	movs	r3, #32
 8002efe:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f00:	2003      	movs	r0, #3
 8002f02:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002f06:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8002f08:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f0a:	4820      	ldr	r0, [pc, #128]	; (8002f8c <HAL_DMA_Init+0xc8>)
 8002f0c:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f0e:	6861      	ldr	r1, [r4, #4]
 8002f10:	68a2      	ldr	r2, [r4, #8]
 8002f12:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f14:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f16:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f18:	6921      	ldr	r1, [r4, #16]
 8002f1a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f1c:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f1e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f20:	69a1      	ldr	r1, [r4, #24]
 8002f22:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f24:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f26:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f28:	6a21      	ldr	r1, [r4, #32]
 8002f2a:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f2c:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002f30:	2904      	cmp	r1, #4
 8002f32:	d01e      	beq.n	8002f72 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8002f34:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002f36:	6826      	ldr	r6, [r4, #0]
 8002f38:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f3a:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8002f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f40:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d107      	bne.n	8002f56 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8002f46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f48:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f4c:	b11b      	cbz	r3, 8002f56 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f7ff ff70 	bl	8002e34 <DMA_CheckFifoParam>
 8002f54:	b990      	cbnz	r0, 8002f7c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8002f56:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f58:	4620      	mov	r0, r4
 8002f5a:	f7ff ff4d 	bl	8002df8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f5e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002f60:	233f      	movs	r3, #63	; 0x3f
 8002f62:	4093      	lsls	r3, r2
 8002f64:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f66:	2000      	movs	r0, #0
 8002f68:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002f70:	e7c9      	b.n	8002f06 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f72:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002f74:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002f76:	4301      	orrs	r1, r0
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	e7db      	b.n	8002f34 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f7c:	2340      	movs	r3, #64	; 0x40
 8002f7e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002f80:	2001      	movs	r0, #1
 8002f82:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002f86:	e7be      	b.n	8002f06 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8002f88:	2001      	movs	r0, #1
 8002f8a:	e7bc      	b.n	8002f06 <HAL_DMA_Init+0x42>
 8002f8c:	f010803f 	.word	0xf010803f

08002f90 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f90:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d003      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fa2:	2305      	movs	r3, #5
 8002fa4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002fa8:	6802      	ldr	r2, [r0, #0]
 8002faa:	6813      	ldr	r3, [r2, #0]
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002fb2:	2000      	movs	r0, #0
}
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_DMA_IRQHandler>:
{
 8002fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fc2:	4b72      	ldr	r3, [pc, #456]	; (800318c <HAL_DMA_IRQHandler+0x1d4>)
 8002fc4:	681d      	ldr	r5, [r3, #0]
 8002fc6:	4b72      	ldr	r3, [pc, #456]	; (8003190 <HAL_DMA_IRQHandler+0x1d8>)
 8002fc8:	fba3 3505 	umull	r3, r5, r3, r5
 8002fcc:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fce:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8002fd0:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fd2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002fd4:	2308      	movs	r3, #8
 8002fd6:	4093      	lsls	r3, r2
 8002fd8:	4233      	tst	r3, r6
 8002fda:	d010      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fdc:	6803      	ldr	r3, [r0, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	f012 0f04 	tst.w	r2, #4
 8002fe4:	d00b      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	f022 0204 	bic.w	r2, r2, #4
 8002fec:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fee:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002ff0:	2308      	movs	r3, #8
 8002ff2:	4093      	lsls	r3, r2
 8002ff4:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ff6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ffe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003000:	2301      	movs	r3, #1
 8003002:	4093      	lsls	r3, r2
 8003004:	4233      	tst	r3, r6
 8003006:	d009      	beq.n	800301c <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003008:	6822      	ldr	r2, [r4, #0]
 800300a:	6952      	ldr	r2, [r2, #20]
 800300c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003010:	d004      	beq.n	800301c <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003012:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003014:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003016:	f043 0302 	orr.w	r3, r3, #2
 800301a:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800301c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800301e:	2304      	movs	r3, #4
 8003020:	4093      	lsls	r3, r2
 8003022:	4233      	tst	r3, r6
 8003024:	d009      	beq.n	800303a <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003026:	6822      	ldr	r2, [r4, #0]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	f012 0f02 	tst.w	r2, #2
 800302e:	d004      	beq.n	800303a <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003030:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003032:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003034:	f043 0304 	orr.w	r3, r3, #4
 8003038:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800303a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800303c:	2310      	movs	r3, #16
 800303e:	4093      	lsls	r3, r2
 8003040:	4233      	tst	r3, r6
 8003042:	d024      	beq.n	800308e <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003044:	6822      	ldr	r2, [r4, #0]
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	f012 0f08 	tst.w	r2, #8
 800304c:	d01f      	beq.n	800308e <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800304e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003050:	6823      	ldr	r3, [r4, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003058:	d00d      	beq.n	8003076 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003060:	d104      	bne.n	800306c <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8003062:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003064:	b19b      	cbz	r3, 800308e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8003066:	4620      	mov	r0, r4
 8003068:	4798      	blx	r3
 800306a:	e010      	b.n	800308e <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800306c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800306e:	b173      	cbz	r3, 800308e <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8003070:	4620      	mov	r0, r4
 8003072:	4798      	blx	r3
 8003074:	e00b      	b.n	800308e <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	f412 7f80 	tst.w	r2, #256	; 0x100
 800307c:	d103      	bne.n	8003086 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	f022 0208 	bic.w	r2, r2, #8
 8003084:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8003086:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003088:	b10b      	cbz	r3, 800308e <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 800308a:	4620      	mov	r0, r4
 800308c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800308e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003090:	2320      	movs	r3, #32
 8003092:	4093      	lsls	r3, r2
 8003094:	4233      	tst	r3, r6
 8003096:	d055      	beq.n	8003144 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003098:	6822      	ldr	r2, [r4, #0]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	f012 0f10 	tst.w	r2, #16
 80030a0:	d050      	beq.n	8003144 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030a2:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030a4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b05      	cmp	r3, #5
 80030ac:	d00e      	beq.n	80030cc <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030ae:	6823      	ldr	r3, [r4, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80030b6:	d033      	beq.n	8003120 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80030be:	d12a      	bne.n	8003116 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80030c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d03e      	beq.n	8003144 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80030c6:	4620      	mov	r0, r4
 80030c8:	4798      	blx	r3
 80030ca:	e03b      	b.n	8003144 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030cc:	6822      	ldr	r2, [r4, #0]
 80030ce:	6813      	ldr	r3, [r2, #0]
 80030d0:	f023 0316 	bic.w	r3, r3, #22
 80030d4:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030d6:	6822      	ldr	r2, [r4, #0]
 80030d8:	6953      	ldr	r3, [r2, #20]
 80030da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030de:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030e2:	b1a3      	cbz	r3, 800310e <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030e4:	6822      	ldr	r2, [r4, #0]
 80030e6:	6813      	ldr	r3, [r2, #0]
 80030e8:	f023 0308 	bic.w	r3, r3, #8
 80030ec:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80030f0:	233f      	movs	r3, #63	; 0x3f
 80030f2:	4093      	lsls	r3, r2
 80030f4:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80030f6:	2300      	movs	r3, #0
 80030f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80030fc:	2301      	movs	r3, #1
 80030fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8003102:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003104:	2b00      	cmp	r3, #0
 8003106:	d03f      	beq.n	8003188 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8003108:	4620      	mov	r0, r4
 800310a:	4798      	blx	r3
 800310c:	e03c      	b.n	8003188 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800310e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1e7      	bne.n	80030e4 <HAL_DMA_IRQHandler+0x12c>
 8003114:	e7eb      	b.n	80030ee <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8003116:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003118:	b1a3      	cbz	r3, 8003144 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 800311a:	4620      	mov	r0, r4
 800311c:	4798      	blx	r3
 800311e:	e011      	b.n	8003144 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003126:	d109      	bne.n	800313c <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	f022 0210 	bic.w	r2, r2, #16
 800312e:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8003130:	2300      	movs	r3, #0
 8003132:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8003136:	2301      	movs	r3, #1
 8003138:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800313c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800313e:	b10b      	cbz	r3, 8003144 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8003140:	4620      	mov	r0, r4
 8003142:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003144:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003146:	b1fb      	cbz	r3, 8003188 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003148:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800314a:	f013 0f01 	tst.w	r3, #1
 800314e:	d017      	beq.n	8003180 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8003150:	2305      	movs	r3, #5
 8003152:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8003156:	6822      	ldr	r2, [r4, #0]
 8003158:	6813      	ldr	r3, [r2, #0]
 800315a:	f023 0301 	bic.w	r3, r3, #1
 800315e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8003160:	9b01      	ldr	r3, [sp, #4]
 8003162:	3301      	adds	r3, #1
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	42ab      	cmp	r3, r5
 8003168:	d804      	bhi.n	8003174 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f013 0f01 	tst.w	r3, #1
 8003172:	d1f5      	bne.n	8003160 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8003174:	2300      	movs	r3, #0
 8003176:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800317a:	2301      	movs	r3, #1
 800317c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8003180:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003182:	b10b      	cbz	r3, 8003188 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8003184:	4620      	mov	r0, r4
 8003186:	4798      	blx	r3
}
 8003188:	b003      	add	sp, #12
 800318a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800318c:	20000064 	.word	0x20000064
 8003190:	1b4e81b5 	.word	0x1b4e81b5

08003194 <HAL_DMA_GetState>:
  return hdma->State;
 8003194:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8003198:	4770      	bx	lr
	...

0800319c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800319c:	2300      	movs	r3, #0
 800319e:	2b0f      	cmp	r3, #15
 80031a0:	f200 80c5 	bhi.w	800332e <HAL_GPIO_Init+0x192>
{
 80031a4:	b4f0      	push	{r4, r5, r6, r7}
 80031a6:	b082      	sub	sp, #8
 80031a8:	e039      	b.n	800321e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031aa:	2204      	movs	r2, #4
 80031ac:	e000      	b.n	80031b0 <HAL_GPIO_Init+0x14>
 80031ae:	2200      	movs	r2, #0
 80031b0:	40b2      	lsls	r2, r6
 80031b2:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031b4:	3402      	adds	r4, #2
 80031b6:	4e5e      	ldr	r6, [pc, #376]	; (8003330 <HAL_GPIO_Init+0x194>)
 80031b8:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031bc:	4a5d      	ldr	r2, [pc, #372]	; (8003334 <HAL_GPIO_Init+0x198>)
 80031be:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80031c0:	43ea      	mvns	r2, r5
 80031c2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031c6:	684f      	ldr	r7, [r1, #4]
 80031c8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80031cc:	d001      	beq.n	80031d2 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80031ce:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80031d2:	4c58      	ldr	r4, [pc, #352]	; (8003334 <HAL_GPIO_Init+0x198>)
 80031d4:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80031d6:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80031d8:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031dc:	684f      	ldr	r7, [r1, #4]
 80031de:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80031e2:	d001      	beq.n	80031e8 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80031e4:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80031e8:	4c52      	ldr	r4, [pc, #328]	; (8003334 <HAL_GPIO_Init+0x198>)
 80031ea:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ec:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80031ee:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031f2:	684f      	ldr	r7, [r1, #4]
 80031f4:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80031f8:	d001      	beq.n	80031fe <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80031fa:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80031fe:	4c4d      	ldr	r4, [pc, #308]	; (8003334 <HAL_GPIO_Init+0x198>)
 8003200:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8003202:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8003204:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003206:	684e      	ldr	r6, [r1, #4]
 8003208:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800320c:	d001      	beq.n	8003212 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800320e:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8003212:	4c48      	ldr	r4, [pc, #288]	; (8003334 <HAL_GPIO_Init+0x198>)
 8003214:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003216:	3301      	adds	r3, #1
 8003218:	2b0f      	cmp	r3, #15
 800321a:	f200 8085 	bhi.w	8003328 <HAL_GPIO_Init+0x18c>
    ioposition = 0x01U << position;
 800321e:	2201      	movs	r2, #1
 8003220:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003222:	680c      	ldr	r4, [r1, #0]
 8003224:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8003228:	42aa      	cmp	r2, r5
 800322a:	d1f4      	bne.n	8003216 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800322c:	684c      	ldr	r4, [r1, #4]
 800322e:	2c02      	cmp	r4, #2
 8003230:	d001      	beq.n	8003236 <HAL_GPIO_Init+0x9a>
 8003232:	2c12      	cmp	r4, #18
 8003234:	d110      	bne.n	8003258 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8003236:	08de      	lsrs	r6, r3, #3
 8003238:	3608      	adds	r6, #8
 800323a:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800323e:	f003 0407 	and.w	r4, r3, #7
 8003242:	00a7      	lsls	r7, r4, #2
 8003244:	240f      	movs	r4, #15
 8003246:	40bc      	lsls	r4, r7
 8003248:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800324c:	690c      	ldr	r4, [r1, #16]
 800324e:	40bc      	lsls	r4, r7
 8003250:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8003254:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8003258:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800325a:	005f      	lsls	r7, r3, #1
 800325c:	2603      	movs	r6, #3
 800325e:	40be      	lsls	r6, r7
 8003260:	43f6      	mvns	r6, r6
 8003262:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003266:	684c      	ldr	r4, [r1, #4]
 8003268:	f004 0403 	and.w	r4, r4, #3
 800326c:	40bc      	lsls	r4, r7
 800326e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003272:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003274:	684c      	ldr	r4, [r1, #4]
 8003276:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800327a:	f1bc 0f01 	cmp.w	ip, #1
 800327e:	d903      	bls.n	8003288 <HAL_GPIO_Init+0xec>
 8003280:	2c11      	cmp	r4, #17
 8003282:	d001      	beq.n	8003288 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003284:	2c12      	cmp	r4, #18
 8003286:	d110      	bne.n	80032aa <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8003288:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800328a:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800328e:	68cc      	ldr	r4, [r1, #12]
 8003290:	40bc      	lsls	r4, r7
 8003292:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8003296:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003298:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800329a:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800329e:	684c      	ldr	r4, [r1, #4]
 80032a0:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80032a4:	409c      	lsls	r4, r3
 80032a6:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 80032a8:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80032aa:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ac:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ae:	688a      	ldr	r2, [r1, #8]
 80032b0:	40ba      	lsls	r2, r7
 80032b2:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 80032b4:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032b6:	684a      	ldr	r2, [r1, #4]
 80032b8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80032bc:	d0ab      	beq.n	8003216 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032be:	2200      	movs	r2, #0
 80032c0:	9201      	str	r2, [sp, #4]
 80032c2:	4a1d      	ldr	r2, [pc, #116]	; (8003338 <HAL_GPIO_Init+0x19c>)
 80032c4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80032c6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80032ca:	6454      	str	r4, [r2, #68]	; 0x44
 80032cc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032ce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80032d2:	9201      	str	r2, [sp, #4]
 80032d4:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80032d6:	089c      	lsrs	r4, r3, #2
 80032d8:	1ca6      	adds	r6, r4, #2
 80032da:	4a15      	ldr	r2, [pc, #84]	; (8003330 <HAL_GPIO_Init+0x194>)
 80032dc:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032e0:	f003 0203 	and.w	r2, r3, #3
 80032e4:	0096      	lsls	r6, r2, #2
 80032e6:	220f      	movs	r2, #15
 80032e8:	40b2      	lsls	r2, r6
 80032ea:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ee:	4a13      	ldr	r2, [pc, #76]	; (800333c <HAL_GPIO_Init+0x1a0>)
 80032f0:	4290      	cmp	r0, r2
 80032f2:	f43f af5c 	beq.w	80031ae <HAL_GPIO_Init+0x12>
 80032f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032fa:	4290      	cmp	r0, r2
 80032fc:	d00e      	beq.n	800331c <HAL_GPIO_Init+0x180>
 80032fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003302:	4290      	cmp	r0, r2
 8003304:	d00c      	beq.n	8003320 <HAL_GPIO_Init+0x184>
 8003306:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800330a:	4290      	cmp	r0, r2
 800330c:	d00a      	beq.n	8003324 <HAL_GPIO_Init+0x188>
 800330e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003312:	4290      	cmp	r0, r2
 8003314:	f43f af49 	beq.w	80031aa <HAL_GPIO_Init+0xe>
 8003318:	2207      	movs	r2, #7
 800331a:	e749      	b.n	80031b0 <HAL_GPIO_Init+0x14>
 800331c:	2201      	movs	r2, #1
 800331e:	e747      	b.n	80031b0 <HAL_GPIO_Init+0x14>
 8003320:	2202      	movs	r2, #2
 8003322:	e745      	b.n	80031b0 <HAL_GPIO_Init+0x14>
 8003324:	2203      	movs	r2, #3
 8003326:	e743      	b.n	80031b0 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8003328:	b002      	add	sp, #8
 800332a:	bcf0      	pop	{r4, r5, r6, r7}
 800332c:	4770      	bx	lr
 800332e:	4770      	bx	lr
 8003330:	40013800 	.word	0x40013800
 8003334:	40013c00 	.word	0x40013c00
 8003338:	40023800 	.word	0x40023800
 800333c:	40020000 	.word	0x40020000

08003340 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003340:	b912      	cbnz	r2, 8003348 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003342:	0409      	lsls	r1, r1, #16
 8003344:	6181      	str	r1, [r0, #24]
  }
}
 8003346:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8003348:	6181      	str	r1, [r0, #24]
 800334a:	4770      	bx	lr

0800334c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800334c:	6943      	ldr	r3, [r0, #20]
 800334e:	ea31 0303 	bics.w	r3, r1, r3
 8003352:	d001      	beq.n	8003358 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8003354:	6181      	str	r1, [r0, #24]
  }
}
 8003356:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003358:	0409      	lsls	r1, r1, #16
 800335a:	6181      	str	r1, [r0, #24]
 800335c:	4770      	bx	lr
	...

08003360 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003360:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	4203      	tst	r3, r0
 8003368:	d100      	bne.n	800336c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800336a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800336c:	4b02      	ldr	r3, [pc, #8]	; (8003378 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800336e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003370:	f003 fb0c 	bl	800698c <HAL_GPIO_EXTI_Callback>
}
 8003374:	e7f9      	b.n	800336a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003376:	bf00      	nop
 8003378:	40013c00 	.word	0x40013c00

0800337c <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800337c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b40      	cmp	r3, #64	; 0x40
 8003384:	d00a      	beq.n	800339c <I2C_Master_SB+0x20>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003386:	6903      	ldr	r3, [r0, #16]
 8003388:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800338c:	d015      	beq.n	80033ba <I2C_Master_SB+0x3e>
        }
      }
    }
    else
    {
      if (hi2c->EventCount == 0U)
 800338e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003390:	2b00      	cmp	r3, #0
 8003392:	d036      	beq.n	8003402 <I2C_Master_SB+0x86>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
      }
      else if (hi2c->EventCount == 1U)
 8003394:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003396:	2b01      	cmp	r3, #1
 8003398:	d03d      	beq.n	8003416 <I2C_Master_SB+0x9a>
      {
        /* Do nothing */
      }
    }
  }
}
 800339a:	4770      	bx	lr
    if (hi2c->EventCount == 0U)
 800339c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800339e:	b92b      	cbnz	r3, 80033ac <I2C_Master_SB+0x30>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80033a0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80033a2:	6802      	ldr	r2, [r0, #0]
 80033a4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80033a8:	6113      	str	r3, [r2, #16]
 80033aa:	4770      	bx	lr
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80033ac:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80033ae:	6802      	ldr	r2, [r0, #0]
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	6113      	str	r3, [r2, #16]
 80033b8:	4770      	bx	lr
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80033ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b21      	cmp	r3, #33	; 0x21
 80033c2:	d00f      	beq.n	80033e4 <I2C_Master_SB+0x68>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80033c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80033c6:	6802      	ldr	r2, [r0, #0]
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	6113      	str	r3, [r2, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80033d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80033d2:	b16b      	cbz	r3, 80033f0 <I2C_Master_SB+0x74>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80033d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d6:	b17b      	cbz	r3, 80033f8 <I2C_Master_SB+0x7c>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033d8:	6802      	ldr	r2, [r0, #0]
 80033da:	6853      	ldr	r3, [r2, #4]
 80033dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033e0:	6053      	str	r3, [r2, #4]
 80033e2:	4770      	bx	lr
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80033e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80033e6:	6802      	ldr	r2, [r0, #0]
 80033e8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80033ec:	6113      	str	r3, [r2, #16]
 80033ee:	e7ef      	b.n	80033d0 <I2C_Master_SB+0x54>
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80033f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80033f2:	2a00      	cmp	r2, #0
 80033f4:	d1ee      	bne.n	80033d4 <I2C_Master_SB+0x58>
 80033f6:	e7d0      	b.n	800339a <I2C_Master_SB+0x1e>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80033f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80033fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1eb      	bne.n	80033d8 <I2C_Master_SB+0x5c>
 8003400:	e7cb      	b.n	800339a <I2C_Master_SB+0x1e>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003402:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003404:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8003408:	6802      	ldr	r2, [r0, #0]
 800340a:	f003 0306 	and.w	r3, r3, #6
 800340e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003412:	6113      	str	r3, [r2, #16]
 8003414:	4770      	bx	lr
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003416:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003418:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 800341c:	6802      	ldr	r2, [r0, #0]
 800341e:	f003 0306 	and.w	r3, r3, #6
 8003422:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 8003426:	6113      	str	r3, [r2, #16]
}
 8003428:	e7b7      	b.n	800339a <I2C_Master_SB+0x1e>

0800342a <I2C_Master_ADD10>:
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800342a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800342c:	6802      	ldr	r2, [r0, #0]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	6113      	str	r3, [r2, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003432:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003434:	b13b      	cbz	r3, 8003446 <I2C_Master_ADD10+0x1c>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003438:	b14b      	cbz	r3, 800344e <I2C_Master_ADD10+0x24>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800343a:	6802      	ldr	r2, [r0, #0]
 800343c:	6853      	ldr	r3, [r2, #4]
 800343e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003442:	6053      	str	r3, [r2, #4]
    }
  }
}
 8003444:	4770      	bx	lr
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003446:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003448:	2a00      	cmp	r2, #0
 800344a:	d1f4      	bne.n	8003436 <I2C_Master_ADD10+0xc>
 800344c:	e7fa      	b.n	8003444 <I2C_Master_ADD10+0x1a>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800344e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f1      	bne.n	800343a <I2C_Master_ADD10+0x10>
 8003456:	e7f5      	b.n	8003444 <I2C_Master_ADD10+0x1a>

08003458 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003458:	b410      	push	{r4}
 800345a:	b08b      	sub	sp, #44	; 0x2c
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800345c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003460:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003462:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003464:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003466:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b22      	cmp	r3, #34	; 0x22
 800346e:	d00b      	beq.n	8003488 <I2C_Master_ADDR+0x30>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003470:	2300      	movs	r3, #0
 8003472:	9309      	str	r3, [sp, #36]	; 0x24
 8003474:	6803      	ldr	r3, [r0, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	9209      	str	r2, [sp, #36]	; 0x24
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	9309      	str	r3, [sp, #36]	; 0x24
 800347e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }
}
 8003480:	b00b      	add	sp, #44	; 0x2c
 8003482:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003486:	4770      	bx	lr
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003488:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800348a:	b90b      	cbnz	r3, 8003490 <I2C_Master_ADDR+0x38>
 800348c:	2a40      	cmp	r2, #64	; 0x40
 800348e:	d017      	beq.n	80034c0 <I2C_Master_ADDR+0x68>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003490:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003492:	b91b      	cbnz	r3, 800349c <I2C_Master_ADDR+0x44>
 8003494:	6903      	ldr	r3, [r0, #16]
 8003496:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800349a:	d019      	beq.n	80034d0 <I2C_Master_ADDR+0x78>
      if (hi2c->XferCount == 0U)
 800349c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d125      	bne.n	80034f0 <I2C_Master_ADDR+0x98>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034a4:	9302      	str	r3, [sp, #8]
 80034a6:	6803      	ldr	r3, [r0, #0]
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	9202      	str	r2, [sp, #8]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	9202      	str	r2, [sp, #8]
 80034b0:	9a02      	ldr	r2, [sp, #8]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	6503      	str	r3, [r0, #80]	; 0x50
 80034be:	e7df      	b.n	8003480 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	6803      	ldr	r3, [r0, #0]
 80034c4:	695a      	ldr	r2, [r3, #20]
 80034c6:	9200      	str	r2, [sp, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	9b00      	ldr	r3, [sp, #0]
 80034ce:	e7d7      	b.n	8003480 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d0:	2300      	movs	r3, #0
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	6803      	ldr	r3, [r0, #0]
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	9201      	str	r2, [sp, #4]
 80034da:	699a      	ldr	r2, [r3, #24]
 80034dc:	9201      	str	r2, [sp, #4]
 80034de:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034e6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80034e8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80034ea:	3301      	adds	r3, #1
 80034ec:	6503      	str	r3, [r0, #80]	; 0x50
 80034ee:	e7c7      	b.n	8003480 <I2C_Master_ADDR+0x28>
      else if (hi2c->XferCount == 1U)
 80034f0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d025      	beq.n	8003544 <I2C_Master_ADDR+0xec>
      else if (hi2c->XferCount == 2U)
 80034f8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d07b      	beq.n	80035f8 <I2C_Master_ADDR+0x1a0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003500:	6802      	ldr	r2, [r0, #0]
 8003502:	6813      	ldr	r3, [r2, #0]
 8003504:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003508:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800350a:	6803      	ldr	r3, [r0, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003512:	d00e      	beq.n	8003532 <I2C_Master_ADDR+0xda>
 8003514:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003518:	d007      	beq.n	800352a <I2C_Master_ADDR+0xd2>
 800351a:	2901      	cmp	r1, #1
 800351c:	d005      	beq.n	800352a <I2C_Master_ADDR+0xd2>
 800351e:	2908      	cmp	r1, #8
 8003520:	d003      	beq.n	800352a <I2C_Master_ADDR+0xd2>
 8003522:	2910      	cmp	r1, #16
 8003524:	d001      	beq.n	800352a <I2C_Master_ADDR+0xd2>
 8003526:	2920      	cmp	r1, #32
 8003528:	d103      	bne.n	8003532 <I2C_Master_ADDR+0xda>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003530:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003532:	2300      	movs	r3, #0
 8003534:	9308      	str	r3, [sp, #32]
 8003536:	6803      	ldr	r3, [r0, #0]
 8003538:	695a      	ldr	r2, [r3, #20]
 800353a:	9208      	str	r2, [sp, #32]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	9308      	str	r3, [sp, #32]
 8003540:	9b08      	ldr	r3, [sp, #32]
 8003542:	e7ba      	b.n	80034ba <I2C_Master_ADDR+0x62>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003544:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003548:	d011      	beq.n	800356e <I2C_Master_ADDR+0x116>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800354a:	2908      	cmp	r1, #8
 800354c:	d034      	beq.n	80035b8 <I2C_Master_ADDR+0x160>
 800354e:	2920      	cmp	r1, #32
 8003550:	d032      	beq.n	80035b8 <I2C_Master_ADDR+0x160>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003552:	2c12      	cmp	r4, #18
 8003554:	d02e      	beq.n	80035b4 <I2C_Master_ADDR+0x15c>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003556:	2904      	cmp	r1, #4
 8003558:	d040      	beq.n	80035dc <I2C_Master_ADDR+0x184>
 800355a:	2902      	cmp	r1, #2
 800355c:	d03e      	beq.n	80035dc <I2C_Master_ADDR+0x184>
 800355e:	2910      	cmp	r1, #16
 8003560:	d03c      	beq.n	80035dc <I2C_Master_ADDR+0x184>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003562:	6802      	ldr	r2, [r0, #0]
 8003564:	6813      	ldr	r3, [r2, #0]
 8003566:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	e03b      	b.n	80035e6 <I2C_Master_ADDR+0x18e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356e:	6802      	ldr	r2, [r0, #0]
 8003570:	6813      	ldr	r3, [r2, #0]
 8003572:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003576:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003578:	6803      	ldr	r3, [r0, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003580:	d00c      	beq.n	800359c <I2C_Master_ADDR+0x144>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003588:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358a:	2300      	movs	r3, #0
 800358c:	9303      	str	r3, [sp, #12]
 800358e:	6803      	ldr	r3, [r0, #0]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	9203      	str	r2, [sp, #12]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	9303      	str	r3, [sp, #12]
 8003598:	9b03      	ldr	r3, [sp, #12]
 800359a:	e78e      	b.n	80034ba <I2C_Master_ADDR+0x62>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359c:	2200      	movs	r2, #0
 800359e:	9204      	str	r2, [sp, #16]
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	9204      	str	r2, [sp, #16]
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	9204      	str	r2, [sp, #16]
 80035a8:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	e782      	b.n	80034ba <I2C_Master_ADDR+0x62>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80035b4:	2901      	cmp	r1, #1
 80035b6:	d0ce      	beq.n	8003556 <I2C_Master_ADDR+0xfe>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b8:	6802      	ldr	r2, [r0, #0]
 80035ba:	6813      	ldr	r3, [r2, #0]
 80035bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035c0:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c2:	2300      	movs	r3, #0
 80035c4:	9306      	str	r3, [sp, #24]
 80035c6:	6803      	ldr	r3, [r0, #0]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	9206      	str	r2, [sp, #24]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	9206      	str	r2, [sp, #24]
 80035d0:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	e76e      	b.n	80034ba <I2C_Master_ADDR+0x62>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035dc:	6802      	ldr	r2, [r0, #0]
 80035de:	6813      	ldr	r3, [r2, #0]
 80035e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035e4:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e6:	2300      	movs	r3, #0
 80035e8:	9305      	str	r3, [sp, #20]
 80035ea:	6803      	ldr	r3, [r0, #0]
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	9205      	str	r2, [sp, #20]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	9305      	str	r3, [sp, #20]
 80035f4:	9b05      	ldr	r3, [sp, #20]
 80035f6:	e760      	b.n	80034ba <I2C_Master_ADDR+0x62>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80035f8:	2904      	cmp	r1, #4
 80035fa:	d00e      	beq.n	800361a <I2C_Master_ADDR+0x1c2>
 80035fc:	2902      	cmp	r1, #2
 80035fe:	d00c      	beq.n	800361a <I2C_Master_ADDR+0x1c2>
 8003600:	2910      	cmp	r1, #16
 8003602:	d00a      	beq.n	800361a <I2C_Master_ADDR+0x1c2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003604:	6802      	ldr	r2, [r0, #0]
 8003606:	6813      	ldr	r3, [r2, #0]
 8003608:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800360c:	6013      	str	r3, [r2, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800360e:	6802      	ldr	r2, [r0, #0]
 8003610:	6813      	ldr	r3, [r2, #0]
 8003612:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	e004      	b.n	8003624 <I2C_Master_ADDR+0x1cc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361a:	6802      	ldr	r2, [r0, #0]
 800361c:	6813      	ldr	r3, [r2, #0]
 800361e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003622:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003624:	6803      	ldr	r3, [r0, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800362c:	d00e      	beq.n	800364c <I2C_Master_ADDR+0x1f4>
 800362e:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003632:	d007      	beq.n	8003644 <I2C_Master_ADDR+0x1ec>
 8003634:	2901      	cmp	r1, #1
 8003636:	d005      	beq.n	8003644 <I2C_Master_ADDR+0x1ec>
 8003638:	2908      	cmp	r1, #8
 800363a:	d003      	beq.n	8003644 <I2C_Master_ADDR+0x1ec>
 800363c:	2910      	cmp	r1, #16
 800363e:	d001      	beq.n	8003644 <I2C_Master_ADDR+0x1ec>
 8003640:	2920      	cmp	r1, #32
 8003642:	d103      	bne.n	800364c <I2C_Master_ADDR+0x1f4>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800364a:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364c:	2300      	movs	r3, #0
 800364e:	9307      	str	r3, [sp, #28]
 8003650:	6803      	ldr	r3, [r0, #0]
 8003652:	695a      	ldr	r2, [r3, #20]
 8003654:	9207      	str	r2, [sp, #28]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	9307      	str	r3, [sp, #28]
 800365a:	9b07      	ldr	r3, [sp, #28]
 800365c:	e72d      	b.n	80034ba <I2C_Master_ADDR+0x62>

0800365e <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 800365e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003660:	b29b      	uxth	r3, r3
 8003662:	b153      	cbz	r3, 800367a <I2C_SlaveTransmit_BTF+0x1c>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003664:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003666:	6803      	ldr	r3, [r0, #0]
 8003668:	7812      	ldrb	r2, [r2, #0]
 800366a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800366c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800366e:	3301      	adds	r3, #1
 8003670:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003672:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003674:	3b01      	subs	r3, #1
 8003676:	b29b      	uxth	r3, r3
 8003678:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 800367a:	4770      	bx	lr

0800367c <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 800367c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800367e:	b29b      	uxth	r3, r3
 8003680:	b153      	cbz	r3, 8003698 <I2C_SlaveReceive_BTF+0x1c>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003682:	6803      	ldr	r3, [r0, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003688:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800368a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800368c:	3301      	adds	r3, #1
 800368e:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003690:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003692:	3b01      	subs	r3, #1
 8003694:	b29b      	uxth	r3, r3
 8003696:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 8003698:	4770      	bx	lr

0800369a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800369a:	6803      	ldr	r3, [r0, #0]
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80036a2:	d011      	beq.n	80036c8 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036ae:	2220      	movs	r2, #32
 80036b0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036b8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80036ba:	f042 0204 	orr.w	r2, r2, #4
 80036be:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 80036c4:	2001      	movs	r0, #1
 80036c6:	4770      	bx	lr
  }
  return HAL_OK;
 80036c8:	2000      	movs	r0, #0
}
 80036ca:	4770      	bx	lr

080036cc <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80036cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80036ce:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80036d2:	d004      	beq.n	80036de <I2C_ConvertOtherXferOptions+0x12>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80036d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80036d6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80036da:	d003      	beq.n	80036e4 <I2C_ConvertOtherXferOptions+0x18>
  }
  else
  {
    /* Nothing to do */
  }
}
 80036dc:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80036de:	2301      	movs	r3, #1
 80036e0:	62c3      	str	r3, [r0, #44]	; 0x2c
 80036e2:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80036e4:	2308      	movs	r3, #8
 80036e6:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80036e8:	e7f8      	b.n	80036dc <I2C_ConvertOtherXferOptions+0x10>

080036ea <I2C_WaitOnFlagUntilTimeout>:
{
 80036ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ec:	4606      	mov	r6, r0
 80036ee:	460c      	mov	r4, r1
 80036f0:	4617      	mov	r7, r2
 80036f2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f4:	e022      	b.n	800373c <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036f6:	f7ff f963 	bl	80029c0 <HAL_GetTick>
 80036fa:	9b06      	ldr	r3, [sp, #24]
 80036fc:	1ac0      	subs	r0, r0, r3
 80036fe:	42a8      	cmp	r0, r5
 8003700:	d800      	bhi.n	8003704 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8003702:	b9dd      	cbnz	r5, 800373c <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003704:	2300      	movs	r3, #0
 8003706:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003708:	2220      	movs	r2, #32
 800370a:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800370e:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003712:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8003714:	f042 0220 	orr.w	r2, r2, #32
 8003718:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800371a:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 800371e:	2001      	movs	r0, #1
 8003720:	e01a      	b.n	8003758 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003722:	6833      	ldr	r3, [r6, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	ea24 0303 	bic.w	r3, r4, r3
 800372a:	b29b      	uxth	r3, r3
 800372c:	fab3 f383 	clz	r3, r3
 8003730:	095b      	lsrs	r3, r3, #5
 8003732:	429f      	cmp	r7, r3
 8003734:	d10f      	bne.n	8003756 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8003736:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800373a:	d1dc      	bne.n	80036f6 <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800373c:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8003740:	2b01      	cmp	r3, #1
 8003742:	d0ee      	beq.n	8003722 <I2C_WaitOnFlagUntilTimeout+0x38>
 8003744:	6833      	ldr	r3, [r6, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	ea24 0303 	bic.w	r3, r4, r3
 800374c:	b29b      	uxth	r3, r3
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	e7ed      	b.n	8003732 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8003756:	2000      	movs	r0, #0
}
 8003758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800375a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800375a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375c:	4604      	mov	r4, r0
 800375e:	460d      	mov	r5, r1
 8003760:	4616      	mov	r6, r2
 8003762:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003764:	e03c      	b.n	80037e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003774:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003776:	2300      	movs	r3, #0
 8003778:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800377a:	2220      	movs	r2, #32
 800377c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003780:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003784:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003786:	f042 0204 	orr.w	r2, r2, #4
 800378a:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800378c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8003790:	2001      	movs	r0, #1
 8003792:	e033      	b.n	80037fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003794:	f7ff f914 	bl	80029c0 <HAL_GetTick>
 8003798:	1bc0      	subs	r0, r0, r7
 800379a:	42b0      	cmp	r0, r6
 800379c:	d800      	bhi.n	80037a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 800379e:	b9fe      	cbnz	r6, 80037e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037a0:	2300      	movs	r3, #0
 80037a2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037a4:	2220      	movs	r2, #32
 80037a6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80037b0:	f042 0220 	orr.w	r2, r2, #32
 80037b4:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80037b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80037ba:	2001      	movs	r0, #1
 80037bc:	e01e      	b.n	80037fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	ea25 0303 	bic.w	r3, r5, r3
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3300      	adds	r3, #0
 80037ca:	bf18      	it	ne
 80037cc:	2301      	movne	r3, #1
 80037ce:	b1a3      	cbz	r3, 80037fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80037d8:	d1c5      	bne.n	8003766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 80037da:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 80037de:	d1d9      	bne.n	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037e0:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d0ea      	beq.n	80037be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	ea25 0303 	bic.w	r3, r5, r3
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3300      	adds	r3, #0
 80037f4:	bf18      	it	ne
 80037f6:	2301      	movne	r3, #1
 80037f8:	e7e9      	b.n	80037ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 80037fa:	2000      	movs	r0, #0
}
 80037fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003800 <I2C_MasterRequestWrite>:
{
 8003800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003802:	b083      	sub	sp, #12
 8003804:	4604      	mov	r4, r0
 8003806:	460f      	mov	r7, r1
 8003808:	4615      	mov	r5, r2
 800380a:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800380c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800380e:	2b08      	cmp	r3, #8
 8003810:	d00d      	beq.n	800382e <I2C_MasterRequestWrite+0x2e>
 8003812:	2b01      	cmp	r3, #1
 8003814:	d00b      	beq.n	800382e <I2C_MasterRequestWrite+0x2e>
 8003816:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800381a:	d008      	beq.n	800382e <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800381c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800381e:	2b12      	cmp	r3, #18
 8003820:	d10a      	bne.n	8003838 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003822:	6802      	ldr	r2, [r0, #0]
 8003824:	6813      	ldr	r3, [r2, #0]
 8003826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	e004      	b.n	8003838 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800382e:	6822      	ldr	r2, [r4, #0]
 8003830:	6813      	ldr	r3, [r2, #0]
 8003832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003836:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003838:	9600      	str	r6, [sp, #0]
 800383a:	462b      	mov	r3, r5
 800383c:	2200      	movs	r2, #0
 800383e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003842:	4620      	mov	r0, r4
 8003844:	f7ff ff51 	bl	80036ea <I2C_WaitOnFlagUntilTimeout>
 8003848:	bb18      	cbnz	r0, 8003892 <I2C_MasterRequestWrite+0x92>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800384a:	6923      	ldr	r3, [r4, #16]
 800384c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003850:	d10d      	bne.n	800386e <I2C_MasterRequestWrite+0x6e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8003858:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800385a:	4633      	mov	r3, r6
 800385c:	462a      	mov	r2, r5
 800385e:	4910      	ldr	r1, [pc, #64]	; (80038a0 <I2C_MasterRequestWrite+0xa0>)
 8003860:	4620      	mov	r0, r4
 8003862:	f7ff ff7a 	bl	800375a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	b1a0      	cbz	r0, 8003894 <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e012      	b.n	8003894 <I2C_MasterRequestWrite+0x94>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800386e:	11fb      	asrs	r3, r7, #7
 8003870:	6822      	ldr	r2, [r4, #0]
 8003872:	f003 0306 	and.w	r3, r3, #6
 8003876:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800387a:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800387c:	4633      	mov	r3, r6
 800387e:	462a      	mov	r2, r5
 8003880:	4908      	ldr	r1, [pc, #32]	; (80038a4 <I2C_MasterRequestWrite+0xa4>)
 8003882:	4620      	mov	r0, r4
 8003884:	f7ff ff69 	bl	800375a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003888:	b938      	cbnz	r0, 800389a <I2C_MasterRequestWrite+0x9a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	b2ff      	uxtb	r7, r7
 800388e:	611f      	str	r7, [r3, #16]
 8003890:	e7e3      	b.n	800385a <I2C_MasterRequestWrite+0x5a>
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
}
 8003894:	4618      	mov	r0, r3
 8003896:	b003      	add	sp, #12
 8003898:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e7fa      	b.n	8003894 <I2C_MasterRequestWrite+0x94>
 800389e:	bf00      	nop
 80038a0:	00010002 	.word	0x00010002
 80038a4:	00010008 	.word	0x00010008

080038a8 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80038a8:	b570      	push	{r4, r5, r6, lr}
 80038aa:	4604      	mov	r4, r0
 80038ac:	460d      	mov	r5, r1
 80038ae:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038b0:	6823      	ldr	r3, [r4, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80038b8:	d11c      	bne.n	80038f4 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038ba:	4620      	mov	r0, r4
 80038bc:	f7ff feed 	bl	800369a <I2C_IsAcknowledgeFailed>
 80038c0:	b9d0      	cbnz	r0, 80038f8 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80038c2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80038c6:	d0f3      	beq.n	80038b0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c8:	f7ff f87a 	bl	80029c0 <HAL_GetTick>
 80038cc:	1b80      	subs	r0, r0, r6
 80038ce:	42a8      	cmp	r0, r5
 80038d0:	d801      	bhi.n	80038d6 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80038d2:	2d00      	cmp	r5, #0
 80038d4:	d1ec      	bne.n	80038b0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038d6:	2300      	movs	r3, #0
 80038d8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038da:	2220      	movs	r2, #32
 80038dc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80038e6:	f042 0220 	orr.w	r2, r2, #32
 80038ea:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80038ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80038f0:	2001      	movs	r0, #1
 80038f2:	e000      	b.n	80038f6 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 80038f4:	2000      	movs	r0, #0
}
 80038f6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80038f8:	2001      	movs	r0, #1
 80038fa:	e7fc      	b.n	80038f6 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

080038fc <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80038fc:	b570      	push	{r4, r5, r6, lr}
 80038fe:	4604      	mov	r4, r0
 8003900:	460d      	mov	r5, r1
 8003902:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f013 0f04 	tst.w	r3, #4
 800390c:	d11c      	bne.n	8003948 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800390e:	4620      	mov	r0, r4
 8003910:	f7ff fec3 	bl	800369a <I2C_IsAcknowledgeFailed>
 8003914:	b9d0      	cbnz	r0, 800394c <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003916:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800391a:	d0f3      	beq.n	8003904 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391c:	f7ff f850 	bl	80029c0 <HAL_GetTick>
 8003920:	1b80      	subs	r0, r0, r6
 8003922:	42a8      	cmp	r0, r5
 8003924:	d801      	bhi.n	800392a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003926:	2d00      	cmp	r5, #0
 8003928:	d1ec      	bne.n	8003904 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800392a:	2300      	movs	r3, #0
 800392c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800392e:	2220      	movs	r2, #32
 8003930:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003934:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003938:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800393a:	f042 0220 	orr.w	r2, r2, #32
 800393e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003940:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003944:	2001      	movs	r0, #1
 8003946:	e000      	b.n	800394a <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8003948:	2000      	movs	r0, #0
}
 800394a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800394c:	2001      	movs	r0, #1
 800394e:	e7fc      	b.n	800394a <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08003950 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003950:	2800      	cmp	r0, #0
 8003952:	f000 80be 	beq.w	8003ad2 <HAL_I2C_Init+0x182>
{
 8003956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003958:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800395a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800395e:	2b00      	cmp	r3, #0
 8003960:	d06b      	beq.n	8003a3a <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003962:	2324      	movs	r3, #36	; 0x24
 8003964:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003968:	6822      	ldr	r2, [r4, #0]
 800396a:	6813      	ldr	r3, [r2, #0]
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003972:	f001 fb81 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003976:	6862      	ldr	r2, [r4, #4]
 8003978:	4b58      	ldr	r3, [pc, #352]	; (8003adc <HAL_I2C_Init+0x18c>)
 800397a:	429a      	cmp	r2, r3
 800397c:	d862      	bhi.n	8003a44 <HAL_I2C_Init+0xf4>
 800397e:	4b58      	ldr	r3, [pc, #352]	; (8003ae0 <HAL_I2C_Init+0x190>)
 8003980:	4298      	cmp	r0, r3
 8003982:	bf8c      	ite	hi
 8003984:	2300      	movhi	r3, #0
 8003986:	2301      	movls	r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	f040 80a4 	bne.w	8003ad6 <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 800398e:	4b55      	ldr	r3, [pc, #340]	; (8003ae4 <HAL_I2C_Init+0x194>)
 8003990:	fba3 2300 	umull	r2, r3, r3, r0
 8003994:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003996:	6821      	ldr	r1, [r4, #0]
 8003998:	684a      	ldr	r2, [r1, #4]
 800399a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800399e:	431a      	orrs	r2, r3
 80039a0:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039a2:	6825      	ldr	r5, [r4, #0]
 80039a4:	6a2a      	ldr	r2, [r5, #32]
 80039a6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80039aa:	6866      	ldr	r6, [r4, #4]
 80039ac:	494b      	ldr	r1, [pc, #300]	; (8003adc <HAL_I2C_Init+0x18c>)
 80039ae:	428e      	cmp	r6, r1
 80039b0:	d84e      	bhi.n	8003a50 <HAL_I2C_Init+0x100>
 80039b2:	3301      	adds	r3, #1
 80039b4:	4313      	orrs	r3, r2
 80039b6:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039b8:	6825      	ldr	r5, [r4, #0]
 80039ba:	69e9      	ldr	r1, [r5, #28]
 80039bc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80039c0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80039c4:	6863      	ldr	r3, [r4, #4]
 80039c6:	4a45      	ldr	r2, [pc, #276]	; (8003adc <HAL_I2C_Init+0x18c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d84b      	bhi.n	8003a64 <HAL_I2C_Init+0x114>
 80039cc:	3801      	subs	r0, #1
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d4:	3301      	adds	r3, #1
 80039d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039da:	2b04      	cmp	r3, #4
 80039dc:	bf38      	it	cc
 80039de:	2304      	movcc	r3, #4
 80039e0:	430b      	orrs	r3, r1
 80039e2:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039e4:	6821      	ldr	r1, [r4, #0]
 80039e6:	680b      	ldr	r3, [r1, #0]
 80039e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039ec:	69e2      	ldr	r2, [r4, #28]
 80039ee:	6a20      	ldr	r0, [r4, #32]
 80039f0:	4302      	orrs	r2, r0
 80039f2:	4313      	orrs	r3, r2
 80039f4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039f6:	6821      	ldr	r1, [r4, #0]
 80039f8:	688b      	ldr	r3, [r1, #8]
 80039fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a02:	6922      	ldr	r2, [r4, #16]
 8003a04:	68e0      	ldr	r0, [r4, #12]
 8003a06:	4302      	orrs	r2, r0
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a0c:	6821      	ldr	r1, [r4, #0]
 8003a0e:	68cb      	ldr	r3, [r1, #12]
 8003a10:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a14:	6962      	ldr	r2, [r4, #20]
 8003a16:	69a0      	ldr	r0, [r4, #24]
 8003a18:	4302      	orrs	r2, r0
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003a1e:	6822      	ldr	r2, [r4, #0]
 8003a20:	6813      	ldr	r3, [r2, #0]
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a28:	2000      	movs	r0, #0
 8003a2a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a2c:	2320      	movs	r3, #32
 8003a2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a32:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a34:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8003a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003a3a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003a3e:	f003 f81b 	bl	8006a78 <HAL_I2C_MspInit>
 8003a42:	e78e      	b.n	8003962 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a44:	4b28      	ldr	r3, [pc, #160]	; (8003ae8 <HAL_I2C_Init+0x198>)
 8003a46:	4298      	cmp	r0, r3
 8003a48:	bf8c      	ite	hi
 8003a4a:	2300      	movhi	r3, #0
 8003a4c:	2301      	movls	r3, #1
 8003a4e:	e79b      	b.n	8003988 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a50:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003a54:	fb01 f303 	mul.w	r3, r1, r3
 8003a58:	4924      	ldr	r1, [pc, #144]	; (8003aec <HAL_I2C_Init+0x19c>)
 8003a5a:	fba1 1303 	umull	r1, r3, r1, r3
 8003a5e:	099b      	lsrs	r3, r3, #6
 8003a60:	3301      	adds	r3, #1
 8003a62:	e7a7      	b.n	80039b4 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a64:	68a2      	ldr	r2, [r4, #8]
 8003a66:	b9ba      	cbnz	r2, 8003a98 <HAL_I2C_Init+0x148>
 8003a68:	1e46      	subs	r6, r0, #1
 8003a6a:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8003a6e:	fbb6 f6f7 	udiv	r6, r6, r7
 8003a72:	3601      	adds	r6, #1
 8003a74:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003a78:	fab6 f686 	clz	r6, r6
 8003a7c:	0976      	lsrs	r6, r6, #5
 8003a7e:	bb36      	cbnz	r6, 8003ace <HAL_I2C_Init+0x17e>
 8003a80:	b9c2      	cbnz	r2, 8003ab4 <HAL_I2C_Init+0x164>
 8003a82:	3801      	subs	r0, #1
 8003a84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003a88:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8003a92:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8003a96:	e7a3      	b.n	80039e0 <HAL_I2C_Init+0x90>
 8003a98:	1e46      	subs	r6, r0, #1
 8003a9a:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8003a9e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8003aa2:	fbb6 f6f7 	udiv	r6, r6, r7
 8003aa6:	3601      	adds	r6, #1
 8003aa8:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003aac:	fab6 f686 	clz	r6, r6
 8003ab0:	0976      	lsrs	r6, r6, #5
 8003ab2:	e7e4      	b.n	8003a7e <HAL_I2C_Init+0x12e>
 8003ab4:	3801      	subs	r0, #1
 8003ab6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003aba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003abe:	fbb0 f2f3 	udiv	r2, r0, r3
 8003ac2:	3201      	adds	r2, #1
 8003ac4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003ac8:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8003acc:	e788      	b.n	80039e0 <HAL_I2C_Init+0x90>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e786      	b.n	80039e0 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8003ad2:	2001      	movs	r0, #1
}
 8003ad4:	4770      	bx	lr
    return HAL_ERROR;
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	e7ae      	b.n	8003a38 <HAL_I2C_Init+0xe8>
 8003ada:	bf00      	nop
 8003adc:	000186a0 	.word	0x000186a0
 8003ae0:	001e847f 	.word	0x001e847f
 8003ae4:	431bde83 	.word	0x431bde83
 8003ae8:	003d08ff 	.word	0x003d08ff
 8003aec:	10624dd3 	.word	0x10624dd3

08003af0 <HAL_I2C_Master_Transmit>:
{
 8003af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003af4:	b084      	sub	sp, #16
 8003af6:	4604      	mov	r4, r0
 8003af8:	460e      	mov	r6, r1
 8003afa:	4690      	mov	r8, r2
 8003afc:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8003afe:	f7fe ff5f 	bl	80029c0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b02:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d004      	beq.n	8003b16 <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8003b0c:	2602      	movs	r6, #2
}
 8003b0e:	4630      	mov	r0, r6
 8003b10:	b004      	add	sp, #16
 8003b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b16:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b18:	9000      	str	r0, [sp, #0]
 8003b1a:	2319      	movs	r3, #25
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	494f      	ldr	r1, [pc, #316]	; (8003c5c <HAL_I2C_Master_Transmit+0x16c>)
 8003b20:	4620      	mov	r0, r4
 8003b22:	f7ff fde2 	bl	80036ea <I2C_WaitOnFlagUntilTimeout>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	f040 8091 	bne.w	8003c4e <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 8003b2c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	f000 808e 	beq.w	8003c52 <HAL_I2C_Master_Transmit+0x162>
 8003b36:	2301      	movs	r3, #1
 8003b38:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	f012 0f01 	tst.w	r2, #1
 8003b44:	d103      	bne.n	8003b4e <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	f042 0201 	orr.w	r2, r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b4e:	6822      	ldr	r2, [r4, #0]
 8003b50:	6813      	ldr	r3, [r2, #0]
 8003b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b56:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b58:	2321      	movs	r3, #33	; 0x21
 8003b5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b5e:	2310      	movs	r3, #16
 8003b60:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003b68:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b6c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b70:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b72:	4b3b      	ldr	r3, [pc, #236]	; (8003c60 <HAL_I2C_Master_Transmit+0x170>)
 8003b74:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b76:	462b      	mov	r3, r5
 8003b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b7a:	4631      	mov	r1, r6
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f7ff fe3f 	bl	8003800 <I2C_MasterRequestWrite>
 8003b82:	4606      	mov	r6, r0
 8003b84:	2800      	cmp	r0, #0
 8003b86:	d166      	bne.n	8003c56 <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b88:	2300      	movs	r3, #0
 8003b8a:	9303      	str	r3, [sp, #12]
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	695a      	ldr	r2, [r3, #20]
 8003b90:	9203      	str	r2, [sp, #12]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	9303      	str	r3, [sp, #12]
 8003b96:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8003b98:	e012      	b.n	8003bc0 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d001      	beq.n	8003ba4 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 8003ba0:	2601      	movs	r6, #1
 8003ba2:	e7b4      	b.n	8003b0e <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba4:	6822      	ldr	r2, [r4, #0]
 8003ba6:	6813      	ldr	r3, [r2, #0]
 8003ba8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bac:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003bae:	2601      	movs	r6, #1
 8003bb0:	e7ad      	b.n	8003b0e <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb2:	462a      	mov	r2, r5
 8003bb4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	f7ff fea0 	bl	80038fc <I2C_WaitOnBTFFlagUntilTimeout>
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	d12c      	bne.n	8003c1a <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 8003bc0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d035      	beq.n	8003c32 <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bc6:	462a      	mov	r2, r5
 8003bc8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003bca:	4620      	mov	r0, r4
 8003bcc:	f7ff fe6c 	bl	80038a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	d1e2      	bne.n	8003b9a <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	7812      	ldrb	r2, [r2, #0]
 8003bda:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003bdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003bde:	1c4b      	adds	r3, r1, #1
 8003be0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003be2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003bea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bf2:	6822      	ldr	r2, [r4, #0]
 8003bf4:	6950      	ldr	r0, [r2, #20]
 8003bf6:	f010 0f04 	tst.w	r0, #4
 8003bfa:	d0da      	beq.n	8003bb2 <HAL_I2C_Master_Transmit+0xc2>
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0d8      	beq.n	8003bb2 <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c00:	784b      	ldrb	r3, [r1, #1]
 8003c02:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8003c04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c06:	3301      	adds	r3, #1
 8003c08:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003c0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003c12:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c14:	3b01      	subs	r3, #1
 8003c16:	8523      	strh	r3, [r4, #40]	; 0x28
 8003c18:	e7cb      	b.n	8003bb2 <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d001      	beq.n	8003c24 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 8003c20:	2601      	movs	r6, #1
 8003c22:	e774      	b.n	8003b0e <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c24:	6822      	ldr	r2, [r4, #0]
 8003c26:	6813      	ldr	r3, [r2, #0]
 8003c28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c2c:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8003c2e:	2601      	movs	r6, #1
 8003c30:	e76d      	b.n	8003b0e <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c32:	6822      	ldr	r2, [r4, #0]
 8003c34:	6813      	ldr	r3, [r2, #0]
 8003c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c3a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c3c:	2320      	movs	r3, #32
 8003c3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003c48:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003c4c:	e75f      	b.n	8003b0e <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 8003c4e:	2602      	movs	r6, #2
 8003c50:	e75d      	b.n	8003b0e <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8003c52:	2602      	movs	r6, #2
 8003c54:	e75b      	b.n	8003b0e <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8003c56:	2601      	movs	r6, #1
 8003c58:	e759      	b.n	8003b0e <HAL_I2C_Master_Transmit+0x1e>
 8003c5a:	bf00      	nop
 8003c5c:	00100002 	.word	0x00100002
 8003c60:	ffff0000 	.word	0xffff0000

08003c64 <HAL_I2C_Master_Transmit_IT>:
{
 8003c64:	b430      	push	{r4, r5}
 8003c66:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003c68:	2400      	movs	r4, #0
 8003c6a:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c6c:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8003c70:	b2e4      	uxtb	r4, r4
 8003c72:	2c20      	cmp	r4, #32
 8003c74:	d156      	bne.n	8003d24 <HAL_I2C_Master_Transmit_IT+0xc0>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c76:	4c2e      	ldr	r4, [pc, #184]	; (8003d30 <HAL_I2C_Master_Transmit_IT+0xcc>)
 8003c78:	6824      	ldr	r4, [r4, #0]
 8003c7a:	08e4      	lsrs	r4, r4, #3
 8003c7c:	4d2d      	ldr	r5, [pc, #180]	; (8003d34 <HAL_I2C_Master_Transmit_IT+0xd0>)
 8003c7e:	fba5 5404 	umull	r5, r4, r5, r4
 8003c82:	0a24      	lsrs	r4, r4, #8
 8003c84:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003c88:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003c8c:	9401      	str	r4, [sp, #4]
      count--;
 8003c8e:	9c01      	ldr	r4, [sp, #4]
 8003c90:	3c01      	subs	r4, #1
 8003c92:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 8003c94:	9c01      	ldr	r4, [sp, #4]
 8003c96:	2c00      	cmp	r4, #0
 8003c98:	d035      	beq.n	8003d06 <HAL_I2C_Master_Transmit_IT+0xa2>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003c9a:	6804      	ldr	r4, [r0, #0]
 8003c9c:	69a5      	ldr	r5, [r4, #24]
 8003c9e:	f015 0f02 	tst.w	r5, #2
 8003ca2:	d1f4      	bne.n	8003c8e <HAL_I2C_Master_Transmit_IT+0x2a>
    __HAL_LOCK(hi2c);
 8003ca4:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 8003ca8:	2d01      	cmp	r5, #1
 8003caa:	d03f      	beq.n	8003d2c <HAL_I2C_Master_Transmit_IT+0xc8>
 8003cac:	2501      	movs	r5, #1
 8003cae:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cb2:	6825      	ldr	r5, [r4, #0]
 8003cb4:	f015 0f01 	tst.w	r5, #1
 8003cb8:	d103      	bne.n	8003cc2 <HAL_I2C_Master_Transmit_IT+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003cba:	6825      	ldr	r5, [r4, #0]
 8003cbc:	f045 0501 	orr.w	r5, r5, #1
 8003cc0:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cc2:	6805      	ldr	r5, [r0, #0]
 8003cc4:	682c      	ldr	r4, [r5, #0]
 8003cc6:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8003cca:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ccc:	2421      	movs	r4, #33	; 0x21
 8003cce:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003cd2:	2410      	movs	r4, #16
 8003cd4:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd8:	2400      	movs	r4, #0
 8003cda:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003cdc:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cde:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ce0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003ce2:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ce4:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8003ce6:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003ce8:	6441      	str	r1, [r0, #68]	; 0x44
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cea:	6802      	ldr	r2, [r0, #0]
 8003cec:	6813      	ldr	r3, [r2, #0]
 8003cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf2:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003cf4:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cf8:	6802      	ldr	r2, [r0, #0]
 8003cfa:	6853      	ldr	r3, [r2, #4]
 8003cfc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d00:	6053      	str	r3, [r2, #4]
    return HAL_OK;
 8003d02:	4620      	mov	r0, r4
 8003d04:	e00f      	b.n	8003d26 <HAL_I2C_Master_Transmit_IT+0xc2>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d10:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d14:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003d16:	f042 0220 	orr.w	r2, r2, #32
 8003d1a:	6402      	str	r2, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003d1c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 8003d20:	2001      	movs	r0, #1
 8003d22:	e000      	b.n	8003d26 <HAL_I2C_Master_Transmit_IT+0xc2>
    return HAL_BUSY;
 8003d24:	2002      	movs	r0, #2
}
 8003d26:	b002      	add	sp, #8
 8003d28:	bc30      	pop	{r4, r5}
 8003d2a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003d2c:	2002      	movs	r0, #2
 8003d2e:	e7fa      	b.n	8003d26 <HAL_I2C_Master_Transmit_IT+0xc2>
 8003d30:	20000064 	.word	0x20000064
 8003d34:	14f8b589 	.word	0x14f8b589
 8003d38:	ffff0000 	.word	0xffff0000

08003d3c <HAL_I2C_Master_Receive_IT>:
{
 8003d3c:	b430      	push	{r4, r5}
 8003d3e:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003d40:	2400      	movs	r4, #0
 8003d42:	9401      	str	r4, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d44:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8003d48:	b2e4      	uxtb	r4, r4
 8003d4a:	2c20      	cmp	r4, #32
 8003d4c:	d15b      	bne.n	8003e06 <HAL_I2C_Master_Receive_IT+0xca>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d4e:	4c31      	ldr	r4, [pc, #196]	; (8003e14 <HAL_I2C_Master_Receive_IT+0xd8>)
 8003d50:	6824      	ldr	r4, [r4, #0]
 8003d52:	08e4      	lsrs	r4, r4, #3
 8003d54:	4d30      	ldr	r5, [pc, #192]	; (8003e18 <HAL_I2C_Master_Receive_IT+0xdc>)
 8003d56:	fba5 5404 	umull	r5, r4, r5, r4
 8003d5a:	0a24      	lsrs	r4, r4, #8
 8003d5c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003d60:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003d64:	9401      	str	r4, [sp, #4]
      count--;
 8003d66:	9c01      	ldr	r4, [sp, #4]
 8003d68:	3c01      	subs	r4, #1
 8003d6a:	9401      	str	r4, [sp, #4]
      if (count == 0U)
 8003d6c:	9c01      	ldr	r4, [sp, #4]
 8003d6e:	2c00      	cmp	r4, #0
 8003d70:	d03a      	beq.n	8003de8 <HAL_I2C_Master_Receive_IT+0xac>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003d72:	6804      	ldr	r4, [r0, #0]
 8003d74:	69a5      	ldr	r5, [r4, #24]
 8003d76:	f015 0f02 	tst.w	r5, #2
 8003d7a:	d1f4      	bne.n	8003d66 <HAL_I2C_Master_Receive_IT+0x2a>
    __HAL_LOCK(hi2c);
 8003d7c:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
 8003d80:	2d01      	cmp	r5, #1
 8003d82:	d044      	beq.n	8003e0e <HAL_I2C_Master_Receive_IT+0xd2>
 8003d84:	2501      	movs	r5, #1
 8003d86:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d8a:	6825      	ldr	r5, [r4, #0]
 8003d8c:	f015 0f01 	tst.w	r5, #1
 8003d90:	d103      	bne.n	8003d9a <HAL_I2C_Master_Receive_IT+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003d92:	6825      	ldr	r5, [r4, #0]
 8003d94:	f045 0501 	orr.w	r5, r5, #1
 8003d98:	6025      	str	r5, [r4, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d9a:	6805      	ldr	r5, [r0, #0]
 8003d9c:	682c      	ldr	r4, [r5, #0]
 8003d9e:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8003da2:	602c      	str	r4, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003da4:	2422      	movs	r4, #34	; 0x22
 8003da6:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003daa:	2410      	movs	r4, #16
 8003dac:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db0:	2400      	movs	r4, #0
 8003db2:	6404      	str	r4, [r0, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003db4:	6242      	str	r2, [r0, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003db6:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003db8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003dba:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dbc:	4b17      	ldr	r3, [pc, #92]	; (8003e1c <HAL_I2C_Master_Receive_IT+0xe0>)
 8003dbe:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003dc0:	6441      	str	r1, [r0, #68]	; 0x44
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc2:	6802      	ldr	r2, [r0, #0]
 8003dc4:	6813      	ldr	r3, [r2, #0]
 8003dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dca:	6013      	str	r3, [r2, #0]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dcc:	6802      	ldr	r2, [r0, #0]
 8003dce:	6813      	ldr	r3, [r2, #0]
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd4:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003dd6:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dda:	6802      	ldr	r2, [r0, #0]
 8003ddc:	6853      	ldr	r3, [r2, #4]
 8003dde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003de2:	6053      	str	r3, [r2, #4]
    return HAL_OK;
 8003de4:	4620      	mov	r0, r4
 8003de6:	e00f      	b.n	8003e08 <HAL_I2C_Master_Receive_IT+0xcc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003de8:	2300      	movs	r3, #0
 8003dea:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dec:	2220      	movs	r2, #32
 8003dee:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003df2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003df6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003df8:	f042 0220 	orr.w	r2, r2, #32
 8003dfc:	6402      	str	r2, [r0, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003dfe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        return HAL_ERROR;
 8003e02:	2001      	movs	r0, #1
 8003e04:	e000      	b.n	8003e08 <HAL_I2C_Master_Receive_IT+0xcc>
    return HAL_BUSY;
 8003e06:	2002      	movs	r0, #2
}
 8003e08:	b002      	add	sp, #8
 8003e0a:	bc30      	pop	{r4, r5}
 8003e0c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003e0e:	2002      	movs	r0, #2
 8003e10:	e7fa      	b.n	8003e08 <HAL_I2C_Master_Receive_IT+0xcc>
 8003e12:	bf00      	nop
 8003e14:	20000064 	.word	0x20000064
 8003e18:	14f8b589 	.word	0x14f8b589
 8003e1c:	ffff0000 	.word	0xffff0000

08003e20 <HAL_I2C_IsDeviceReady>:
{
 8003e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e24:	b085      	sub	sp, #20
 8003e26:	4604      	mov	r4, r0
 8003e28:	4688      	mov	r8, r1
 8003e2a:	4691      	mov	r9, r2
 8003e2c:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8003e2e:	f7fe fdc7 	bl	80029c0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e32:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d004      	beq.n	8003e46 <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 8003e3c:	2302      	movs	r3, #2
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	b005      	add	sp, #20
 8003e42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e46:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e48:	9000      	str	r0, [sp, #0]
 8003e4a:	2319      	movs	r3, #25
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	4954      	ldr	r1, [pc, #336]	; (8003fa0 <HAL_I2C_IsDeviceReady+0x180>)
 8003e50:	4620      	mov	r0, r4
 8003e52:	f7ff fc4a 	bl	80036ea <I2C_WaitOnFlagUntilTimeout>
 8003e56:	2800      	cmp	r0, #0
 8003e58:	f040 8097 	bne.w	8003f8a <HAL_I2C_IsDeviceReady+0x16a>
    __HAL_LOCK(hi2c);
 8003e5c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	f000 8094 	beq.w	8003f8e <HAL_I2C_IsDeviceReady+0x16e>
 8003e66:	2301      	movs	r3, #1
 8003e68:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	f012 0f01 	tst.w	r2, #1
 8003e74:	d103      	bne.n	8003e7e <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	f042 0201 	orr.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e7e:	6822      	ldr	r2, [r4, #0]
 8003e80:	6813      	ldr	r3, [r2, #0]
 8003e82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e86:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e88:	2324      	movs	r3, #36	; 0x24
 8003e8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e92:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003e96:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 8003e98:	2701      	movs	r7, #1
 8003e9a:	e034      	b.n	8003f06 <HAL_I2C_IsDeviceReady+0xe6>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003e9c:	23a0      	movs	r3, #160	; 0xa0
 8003e9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003eaa:	6959      	ldr	r1, [r3, #20]
 8003eac:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003eb0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2ba0      	cmp	r3, #160	; 0xa0
 8003eb8:	d009      	beq.n	8003ece <HAL_I2C_IsDeviceReady+0xae>
 8003eba:	b942      	cbnz	r2, 8003ece <HAL_I2C_IsDeviceReady+0xae>
 8003ebc:	b939      	cbnz	r1, 8003ece <HAL_I2C_IsDeviceReady+0xae>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ebe:	f7fe fd7f 	bl	80029c0 <HAL_GetTick>
 8003ec2:	1b80      	subs	r0, r0, r6
 8003ec4:	42a8      	cmp	r0, r5
 8003ec6:	d8e9      	bhi.n	8003e9c <HAL_I2C_IsDeviceReady+0x7c>
 8003ec8:	2d00      	cmp	r5, #0
 8003eca:	d1ea      	bne.n	8003ea2 <HAL_I2C_IsDeviceReady+0x82>
 8003ecc:	e7e6      	b.n	8003e9c <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->State = HAL_I2C_STATE_READY;
 8003ece:	2320      	movs	r3, #32
 8003ed0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003ed4:	6823      	ldr	r3, [r4, #0]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	f012 0f02 	tst.w	r2, #2
 8003edc:	d131      	bne.n	8003f42 <HAL_I2C_IsDeviceReady+0x122>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eec:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eee:	9600      	str	r6, [sp, #0]
 8003ef0:	2319      	movs	r3, #25
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	492a      	ldr	r1, [pc, #168]	; (8003fa0 <HAL_I2C_IsDeviceReady+0x180>)
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	f7ff fbf7 	bl	80036ea <I2C_WaitOnFlagUntilTimeout>
 8003efc:	2800      	cmp	r0, #0
 8003efe:	d14c      	bne.n	8003f9a <HAL_I2C_IsDeviceReady+0x17a>
      I2C_Trials++;
 8003f00:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8003f02:	454f      	cmp	r7, r9
 8003f04:	d239      	bcs.n	8003f7a <HAL_I2C_IsDeviceReady+0x15a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f06:	6822      	ldr	r2, [r4, #0]
 8003f08:	6813      	ldr	r3, [r2, #0]
 8003f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0e:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003f10:	9600      	str	r6, [sp, #0]
 8003f12:	462b      	mov	r3, r5
 8003f14:	2200      	movs	r2, #0
 8003f16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f7ff fbe5 	bl	80036ea <I2C_WaitOnFlagUntilTimeout>
 8003f20:	2800      	cmp	r0, #0
 8003f22:	d136      	bne.n	8003f92 <HAL_I2C_IsDeviceReady+0x172>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8003f2a:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8003f2c:	f7fe fd48 	bl	80029c0 <HAL_GetTick>
 8003f30:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	695a      	ldr	r2, [r3, #20]
 8003f36:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f3a:	6959      	ldr	r1, [r3, #20]
 8003f3c:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f40:	e7b6      	b.n	8003eb0 <HAL_I2C_IsDeviceReady+0x90>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f48:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9303      	str	r3, [sp, #12]
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	695a      	ldr	r2, [r3, #20]
 8003f52:	9203      	str	r2, [sp, #12]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	9303      	str	r3, [sp, #12]
 8003f58:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f5a:	9600      	str	r6, [sp, #0]
 8003f5c:	2319      	movs	r3, #25
 8003f5e:	2201      	movs	r2, #1
 8003f60:	490f      	ldr	r1, [pc, #60]	; (8003fa0 <HAL_I2C_IsDeviceReady+0x180>)
 8003f62:	4620      	mov	r0, r4
 8003f64:	f7ff fbc1 	bl	80036ea <I2C_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	b9a0      	cbnz	r0, 8003f96 <HAL_I2C_IsDeviceReady+0x176>
        hi2c->State = HAL_I2C_STATE_READY;
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8003f72:	2200      	movs	r2, #0
 8003f74:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 8003f78:	e761      	b.n	8003e3e <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f7a:	2320      	movs	r3, #32
 8003f7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003f80:	2300      	movs	r3, #0
 8003f82:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e759      	b.n	8003e3e <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e757      	b.n	8003e3e <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e755      	b.n	8003e3e <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e753      	b.n	8003e3e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e751      	b.n	8003e3e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e74f      	b.n	8003e3e <HAL_I2C_IsDeviceReady+0x1e>
 8003f9e:	bf00      	nop
 8003fa0:	00100002 	.word	0x00100002

08003fa4 <HAL_I2C_MasterTxCpltCallback>:
}
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_I2C_MasterRxCpltCallback>:
}
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_I2C_SlaveTxCpltCallback>:
}
 8003fa8:	4770      	bx	lr

08003faa <I2C_SlaveTransmit_TXE>:
{
 8003faa:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003fb0:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 8003fb2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	b17b      	cbz	r3, 8003fd8 <I2C_SlaveTransmit_TXE+0x2e>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fb8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8003fba:	6803      	ldr	r3, [r0, #0]
 8003fbc:	7809      	ldrb	r1, [r1, #0]
 8003fbe:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8003fc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003fc6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003fce:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	b90b      	cbnz	r3, 8003fd8 <I2C_SlaveTransmit_TXE+0x2e>
 8003fd4:	2a29      	cmp	r2, #41	; 0x29
 8003fd6:	d000      	beq.n	8003fda <I2C_SlaveTransmit_TXE+0x30>
}
 8003fd8:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fda:	6802      	ldr	r2, [r0, #0]
 8003fdc:	6853      	ldr	r3, [r2, #4]
 8003fde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fe2:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003fe4:	2321      	movs	r3, #33	; 0x21
 8003fe6:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fe8:	2328      	movs	r3, #40	; 0x28
 8003fea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003fee:	f7ff ffdb 	bl	8003fa8 <HAL_I2C_SlaveTxCpltCallback>
}
 8003ff2:	e7f1      	b.n	8003fd8 <I2C_SlaveTransmit_TXE+0x2e>

08003ff4 <HAL_I2C_SlaveRxCpltCallback>:
}
 8003ff4:	4770      	bx	lr

08003ff6 <I2C_SlaveReceive_RXNE>:
{
 8003ff6:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ff8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ffc:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 8003ffe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	b17b      	cbz	r3, 8004024 <I2C_SlaveReceive_RXNE+0x2e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004004:	6803      	ldr	r3, [r0, #0]
 8004006:	6919      	ldr	r1, [r3, #16]
 8004008:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800400a:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 800400c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800400e:	3301      	adds	r3, #1
 8004010:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8004012:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004014:	3b01      	subs	r3, #1
 8004016:	b29b      	uxth	r3, r3
 8004018:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800401a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	b90b      	cbnz	r3, 8004024 <I2C_SlaveReceive_RXNE+0x2e>
 8004020:	2a2a      	cmp	r2, #42	; 0x2a
 8004022:	d000      	beq.n	8004026 <I2C_SlaveReceive_RXNE+0x30>
}
 8004024:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004026:	6802      	ldr	r2, [r0, #0]
 8004028:	6853      	ldr	r3, [r2, #4]
 800402a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800402e:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004030:	2322      	movs	r3, #34	; 0x22
 8004032:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004034:	2328      	movs	r3, #40	; 0x28
 8004036:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800403a:	f7ff ffdb 	bl	8003ff4 <HAL_I2C_SlaveRxCpltCallback>
}
 800403e:	e7f1      	b.n	8004024 <I2C_SlaveReceive_RXNE+0x2e>

08004040 <HAL_I2C_AddrCallback>:
}
 8004040:	4770      	bx	lr

08004042 <I2C_Slave_ADDR>:
{
 8004042:	b508      	push	{r3, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004044:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004048:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800404c:	2b28      	cmp	r3, #40	; 0x28
 800404e:	d007      	beq.n	8004060 <I2C_Slave_ADDR+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004050:	6803      	ldr	r3, [r0, #0]
 8004052:	f06f 0202 	mvn.w	r2, #2
 8004056:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004058:	2300      	movs	r3, #0
 800405a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800405e:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004060:	6802      	ldr	r2, [r0, #0]
 8004062:	6853      	ldr	r3, [r2, #4]
 8004064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004068:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800406a:	f011 0f04 	tst.w	r1, #4
 800406e:	d00b      	beq.n	8004088 <I2C_Slave_ADDR+0x46>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004070:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004072:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004076:	d109      	bne.n	800408c <I2C_Slave_ADDR+0x4a>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004078:	8982      	ldrh	r2, [r0, #12]
    __HAL_UNLOCK(hi2c);
 800407a:	2100      	movs	r1, #0
 800407c:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004080:	4619      	mov	r1, r3
 8004082:	f7ff ffdd 	bl	8004040 <HAL_I2C_AddrCallback>
 8004086:	e7ea      	b.n	800405e <I2C_Slave_ADDR+0x1c>
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004088:	2301      	movs	r3, #1
 800408a:	e7f2      	b.n	8004072 <I2C_Slave_ADDR+0x30>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800408c:	8b02      	ldrh	r2, [r0, #24]
 800408e:	e7f4      	b.n	800407a <I2C_Slave_ADDR+0x38>

08004090 <HAL_I2C_ListenCpltCallback>:
}
 8004090:	4770      	bx	lr
	...

08004094 <I2C_Slave_AF>:
{
 8004094:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004096:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800409a:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800409c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800409e:	2a08      	cmp	r2, #8
 80040a0:	d001      	beq.n	80040a6 <I2C_Slave_AF+0x12>
 80040a2:	2a20      	cmp	r2, #32
 80040a4:	d101      	bne.n	80040aa <I2C_Slave_AF+0x16>
 80040a6:	2b28      	cmp	r3, #40	; 0x28
 80040a8:	d006      	beq.n	80040b8 <I2C_Slave_AF+0x24>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80040aa:	2b21      	cmp	r3, #33	; 0x21
 80040ac:	d01e      	beq.n	80040ec <I2C_Slave_AF+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ae:	6803      	ldr	r3, [r0, #0]
 80040b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040b4:	615a      	str	r2, [r3, #20]
}
 80040b6:	bd08      	pop	{r3, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040b8:	4b1a      	ldr	r3, [pc, #104]	; (8004124 <I2C_Slave_AF+0x90>)
 80040ba:	62c3      	str	r3, [r0, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040bc:	6802      	ldr	r2, [r0, #0]
 80040be:	6853      	ldr	r3, [r2, #4]
 80040c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80040c4:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c6:	6803      	ldr	r3, [r0, #0]
 80040c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040cc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ce:	6802      	ldr	r2, [r0, #0]
 80040d0:	6813      	ldr	r3, [r2, #0]
 80040d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040d6:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80040d8:	2300      	movs	r3, #0
 80040da:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80040dc:	2220      	movs	r2, #32
 80040de:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040e2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80040e6:	f7ff ffd3 	bl	8004090 <HAL_I2C_ListenCpltCallback>
 80040ea:	e7e4      	b.n	80040b6 <I2C_Slave_AF+0x22>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80040ec:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <I2C_Slave_AF+0x90>)
 80040ee:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040f0:	2321      	movs	r3, #33	; 0x21
 80040f2:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80040f4:	2320      	movs	r3, #32
 80040f6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004100:	6802      	ldr	r2, [r0, #0]
 8004102:	6853      	ldr	r3, [r2, #4]
 8004104:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004108:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800410a:	6803      	ldr	r3, [r0, #0]
 800410c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004110:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004112:	6802      	ldr	r2, [r0, #0]
 8004114:	6813      	ldr	r3, [r2, #0]
 8004116:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800411a:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800411c:	f7ff ff44 	bl	8003fa8 <HAL_I2C_SlaveTxCpltCallback>
 8004120:	e7c9      	b.n	80040b6 <I2C_Slave_AF+0x22>
 8004122:	bf00      	nop
 8004124:	ffff0000 	.word	0xffff0000

08004128 <HAL_I2C_MemTxCpltCallback>:
}
 8004128:	4770      	bx	lr

0800412a <I2C_MasterTransmit_TXE>:
{
 800412a:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800412c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004130:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004132:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8004136:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004138:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800413a:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800413c:	b909      	cbnz	r1, 8004142 <I2C_MasterTransmit_TXE+0x18>
 800413e:	2b21      	cmp	r3, #33	; 0x21
 8004140:	d004      	beq.n	800414c <I2C_MasterTransmit_TXE+0x22>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004142:	2b21      	cmp	r3, #33	; 0x21
 8004144:	d03b      	beq.n	80041be <I2C_MasterTransmit_TXE+0x94>
 8004146:	2a40      	cmp	r2, #64	; 0x40
 8004148:	d037      	beq.n	80041ba <I2C_MasterTransmit_TXE+0x90>
}
 800414a:	bd10      	pop	{r4, pc}
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800414c:	2c08      	cmp	r4, #8
 800414e:	d004      	beq.n	800415a <I2C_MasterTransmit_TXE+0x30>
 8004150:	2c20      	cmp	r4, #32
 8004152:	d002      	beq.n	800415a <I2C_MasterTransmit_TXE+0x30>
 8004154:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8004158:	d119      	bne.n	800418e <I2C_MasterTransmit_TXE+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800415a:	6802      	ldr	r2, [r0, #0]
 800415c:	6853      	ldr	r3, [r2, #4]
 800415e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004162:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004164:	6802      	ldr	r2, [r0, #0]
 8004166:	6813      	ldr	r3, [r2, #0]
 8004168:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800416c:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800416e:	2300      	movs	r3, #0
 8004170:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004172:	2320      	movs	r3, #32
 8004174:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004178:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b40      	cmp	r3, #64	; 0x40
 8004180:	d015      	beq.n	80041ae <I2C_MasterTransmit_TXE+0x84>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004182:	2300      	movs	r3, #0
 8004184:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004188:	f7ff ff0c 	bl	8003fa4 <HAL_I2C_MasterTxCpltCallback>
 800418c:	e7dd      	b.n	800414a <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800418e:	6802      	ldr	r2, [r0, #0]
 8004190:	6853      	ldr	r3, [r2, #4]
 8004192:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004196:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004198:	2311      	movs	r3, #17
 800419a:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800419c:	2300      	movs	r3, #0
 800419e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80041a2:	2320      	movs	r3, #32
 80041a4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80041a8:	f7ff fefc 	bl	8003fa4 <HAL_I2C_MasterTxCpltCallback>
 80041ac:	e7cd      	b.n	800414a <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 80041b4:	f7ff ffb8 	bl	8004128 <HAL_I2C_MemTxCpltCallback>
 80041b8:	e7c7      	b.n	800414a <I2C_MasterTransmit_TXE+0x20>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80041ba:	2b22      	cmp	r3, #34	; 0x22
 80041bc:	d1c5      	bne.n	800414a <I2C_MasterTransmit_TXE+0x20>
    if (hi2c->XferCount == 0U)
 80041be:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	b183      	cbz	r3, 80041e6 <I2C_MasterTransmit_TXE+0xbc>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041c4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b40      	cmp	r3, #64	; 0x40
 80041cc:	d011      	beq.n	80041f2 <I2C_MasterTransmit_TXE+0xc8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ce:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80041d0:	6803      	ldr	r3, [r0, #0]
 80041d2:	7812      	ldrb	r2, [r2, #0]
 80041d4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80041d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80041d8:	3301      	adds	r3, #1
 80041da:	6243      	str	r3, [r0, #36]	; 0x24
        hi2c->XferCount--;
 80041dc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80041e4:	e7b1      	b.n	800414a <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041e6:	6802      	ldr	r2, [r0, #0]
 80041e8:	6853      	ldr	r3, [r2, #4]
 80041ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ee:	6053      	str	r3, [r2, #4]
 80041f0:	e7ab      	b.n	800414a <I2C_MasterTransmit_TXE+0x20>
        if (hi2c->EventCount == 0U)
 80041f2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80041f4:	b99b      	cbnz	r3, 800421e <I2C_MasterTransmit_TXE+0xf4>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80041f6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d008      	beq.n	800420e <I2C_MasterTransmit_TXE+0xe4>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80041fc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80041fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004202:	6802      	ldr	r2, [r0, #0]
 8004204:	6113      	str	r3, [r2, #16]
            hi2c->EventCount++;
 8004206:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004208:	3301      	adds	r3, #1
 800420a:	6503      	str	r3, [r0, #80]	; 0x50
 800420c:	e79d      	b.n	800414a <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800420e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004210:	6802      	ldr	r2, [r0, #0]
 8004212:	b2db      	uxtb	r3, r3
 8004214:	6113      	str	r3, [r2, #16]
            hi2c->EventCount += 2U;
 8004216:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004218:	3302      	adds	r3, #2
 800421a:	6503      	str	r3, [r0, #80]	; 0x50
 800421c:	e795      	b.n	800414a <I2C_MasterTransmit_TXE+0x20>
        else if (hi2c->EventCount == 1U)
 800421e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004220:	2b01      	cmp	r3, #1
 8004222:	d018      	beq.n	8004256 <I2C_MasterTransmit_TXE+0x12c>
        else if (hi2c->EventCount == 2U)
 8004224:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004226:	2b02      	cmp	r3, #2
 8004228:	d18f      	bne.n	800414a <I2C_MasterTransmit_TXE+0x20>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800422a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b22      	cmp	r3, #34	; 0x22
 8004232:	d018      	beq.n	8004266 <I2C_MasterTransmit_TXE+0x13c>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004234:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b21      	cmp	r3, #33	; 0x21
 800423c:	d185      	bne.n	800414a <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 800423e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004240:	6803      	ldr	r3, [r0, #0]
 8004242:	7812      	ldrb	r2, [r2, #0]
 8004244:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8004246:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004248:	3301      	adds	r3, #1
 800424a:	6243      	str	r3, [r0, #36]	; 0x24
            hi2c->XferCount--;
 800424c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800424e:	3b01      	subs	r3, #1
 8004250:	b29b      	uxth	r3, r3
 8004252:	8543      	strh	r3, [r0, #42]	; 0x2a
 8004254:	e779      	b.n	800414a <I2C_MasterTransmit_TXE+0x20>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004256:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004258:	6802      	ldr	r2, [r0, #0]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	6113      	str	r3, [r2, #16]
          hi2c->EventCount++;
 800425e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004260:	3301      	adds	r3, #1
 8004262:	6503      	str	r3, [r0, #80]	; 0x50
 8004264:	e771      	b.n	800414a <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8004266:	6802      	ldr	r2, [r0, #0]
 8004268:	6813      	ldr	r3, [r2, #0]
 800426a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	e76b      	b.n	800414a <I2C_MasterTransmit_TXE+0x20>

08004272 <I2C_MasterTransmit_BTF>:
{
 8004272:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004274:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004276:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b21      	cmp	r3, #33	; 0x21
 800427e:	d000      	beq.n	8004282 <I2C_MasterTransmit_BTF+0x10>
}
 8004280:	bd08      	pop	{r3, pc}
    if (hi2c->XferCount != 0U)
 8004282:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004284:	b29b      	uxth	r3, r3
 8004286:	bb03      	cbnz	r3, 80042ca <I2C_MasterTransmit_BTF+0x58>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004288:	2a08      	cmp	r2, #8
 800428a:	d004      	beq.n	8004296 <I2C_MasterTransmit_BTF+0x24>
 800428c:	2a20      	cmp	r2, #32
 800428e:	d002      	beq.n	8004296 <I2C_MasterTransmit_BTF+0x24>
 8004290:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8004294:	d125      	bne.n	80042e2 <I2C_MasterTransmit_BTF+0x70>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004296:	6802      	ldr	r2, [r0, #0]
 8004298:	6853      	ldr	r3, [r2, #4]
 800429a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800429e:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a0:	6802      	ldr	r2, [r0, #0]
 80042a2:	6813      	ldr	r3, [r2, #0]
 80042a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042a8:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80042aa:	2300      	movs	r3, #0
 80042ac:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80042ae:	2320      	movs	r3, #32
 80042b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042b4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b40      	cmp	r3, #64	; 0x40
 80042bc:	d021      	beq.n	8004302 <I2C_MasterTransmit_BTF+0x90>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042be:	2300      	movs	r3, #0
 80042c0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80042c4:	f7ff fe6e 	bl	8003fa4 <HAL_I2C_MasterTxCpltCallback>
}
 80042c8:	e7da      	b.n	8004280 <I2C_MasterTransmit_BTF+0xe>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ca:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80042cc:	6803      	ldr	r3, [r0, #0]
 80042ce:	7812      	ldrb	r2, [r2, #0]
 80042d0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80042d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80042d4:	3301      	adds	r3, #1
 80042d6:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 80042d8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29b      	uxth	r3, r3
 80042de:	8543      	strh	r3, [r0, #42]	; 0x2a
 80042e0:	e7ce      	b.n	8004280 <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042e2:	6802      	ldr	r2, [r0, #0]
 80042e4:	6853      	ldr	r3, [r2, #4]
 80042e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80042ea:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80042ec:	2311      	movs	r3, #17
 80042ee:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f0:	2300      	movs	r3, #0
 80042f2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80042f6:	2320      	movs	r3, #32
 80042f8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80042fc:	f7ff fe52 	bl	8003fa4 <HAL_I2C_MasterTxCpltCallback>
 8004300:	e7be      	b.n	8004280 <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004302:	2300      	movs	r3, #0
 8004304:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004308:	f7ff ff0e 	bl	8004128 <HAL_I2C_MemTxCpltCallback>
 800430c:	e7b8      	b.n	8004280 <I2C_MasterTransmit_BTF+0xe>

0800430e <HAL_I2C_MemRxCpltCallback>:
}
 800430e:	4770      	bx	lr

08004310 <I2C_MasterReceive_RXNE>:
{
 8004310:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004312:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b22      	cmp	r3, #34	; 0x22
 800431a:	d000      	beq.n	800431e <I2C_MasterReceive_RXNE+0xe>
}
 800431c:	bd08      	pop	{r3, pc}
    tmp = hi2c->XferCount;
 800431e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004320:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 8004322:	2b03      	cmp	r3, #3
 8004324:	d914      	bls.n	8004350 <I2C_MasterReceive_RXNE+0x40>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004326:	6803      	ldr	r3, [r0, #0]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800432c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800432e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004330:	3301      	adds	r3, #1
 8004332:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8004334:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004336:	3b01      	subs	r3, #1
 8004338:	b29b      	uxth	r3, r3
 800433a:	8543      	strh	r3, [r0, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 800433c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b03      	cmp	r3, #3
 8004342:	d1eb      	bne.n	800431c <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004344:	6802      	ldr	r2, [r0, #0]
 8004346:	6853      	ldr	r3, [r2, #4]
 8004348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800434c:	6053      	str	r3, [r2, #4]
 800434e:	e7e5      	b.n	800431c <I2C_MasterReceive_RXNE+0xc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004350:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8004352:	2a02      	cmp	r2, #2
 8004354:	d0e2      	beq.n	800431c <I2C_MasterReceive_RXNE+0xc>
 8004356:	2b01      	cmp	r3, #1
 8004358:	d8e0      	bhi.n	800431c <I2C_MasterReceive_RXNE+0xc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800435a:	6802      	ldr	r2, [r0, #0]
 800435c:	6813      	ldr	r3, [r2, #0]
 800435e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004362:	6013      	str	r3, [r2, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004364:	6802      	ldr	r2, [r0, #0]
 8004366:	6853      	ldr	r3, [r2, #4]
 8004368:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800436c:	6053      	str	r3, [r2, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436e:	6803      	ldr	r3, [r0, #0]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004374:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004376:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004378:	3301      	adds	r3, #1
 800437a:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 800437c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800437e:	3b01      	subs	r3, #1
 8004380:	b29b      	uxth	r3, r3
 8004382:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004384:	2320      	movs	r3, #32
 8004386:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800438a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b40      	cmp	r3, #64	; 0x40
 8004392:	d007      	beq.n	80043a4 <I2C_MasterReceive_RXNE+0x94>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004394:	2300      	movs	r3, #0
 8004396:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800439a:	2312      	movs	r3, #18
 800439c:	6303      	str	r3, [r0, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800439e:	f7ff fe02 	bl	8003fa6 <HAL_I2C_MasterRxCpltCallback>
}
 80043a2:	e7bb      	b.n	800431c <I2C_MasterReceive_RXNE+0xc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a4:	2300      	movs	r3, #0
 80043a6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80043aa:	6303      	str	r3, [r0, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80043ac:	f7ff ffaf 	bl	800430e <HAL_I2C_MemRxCpltCallback>
 80043b0:	e7b4      	b.n	800431c <I2C_MasterReceive_RXNE+0xc>

080043b2 <I2C_MasterReceive_BTF>:
{
 80043b2:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043b4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80043b6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d013      	beq.n	80043e6 <I2C_MasterReceive_BTF+0x34>
  else if (hi2c->XferCount == 3U)
 80043be:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d020      	beq.n	8004408 <I2C_MasterReceive_BTF+0x56>
  else if (hi2c->XferCount == 2U)
 80043c6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d036      	beq.n	800443c <I2C_MasterReceive_BTF+0x8a>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ce:	6803      	ldr	r3, [r0, #0]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80043d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80043d8:	3301      	adds	r3, #1
 80043da:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80043dc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80043e4:	e00f      	b.n	8004406 <I2C_MasterReceive_BTF+0x54>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043e6:	6802      	ldr	r2, [r0, #0]
 80043e8:	6853      	ldr	r3, [r2, #4]
 80043ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043ee:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f0:	6803      	ldr	r3, [r0, #0]
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80043f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80043fa:	3301      	adds	r3, #1
 80043fc:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80043fe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004400:	3b01      	subs	r3, #1
 8004402:	b29b      	uxth	r3, r3
 8004404:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8004406:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004408:	6801      	ldr	r1, [r0, #0]
 800440a:	684b      	ldr	r3, [r1, #4]
 800440c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004410:	604b      	str	r3, [r1, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004412:	2a04      	cmp	r2, #4
 8004414:	d006      	beq.n	8004424 <I2C_MasterReceive_BTF+0x72>
 8004416:	2a02      	cmp	r2, #2
 8004418:	d004      	beq.n	8004424 <I2C_MasterReceive_BTF+0x72>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800441a:	6802      	ldr	r2, [r0, #0]
 800441c:	6813      	ldr	r3, [r2, #0]
 800441e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004422:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004424:	6803      	ldr	r3, [r0, #0]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800442a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800442c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800442e:	3301      	adds	r3, #1
 8004430:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8004432:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004434:	3b01      	subs	r3, #1
 8004436:	b29b      	uxth	r3, r3
 8004438:	8543      	strh	r3, [r0, #42]	; 0x2a
 800443a:	e7e4      	b.n	8004406 <I2C_MasterReceive_BTF+0x54>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800443c:	2a01      	cmp	r2, #1
 800443e:	d00b      	beq.n	8004458 <I2C_MasterReceive_BTF+0xa6>
 8004440:	2a10      	cmp	r2, #16
 8004442:	d009      	beq.n	8004458 <I2C_MasterReceive_BTF+0xa6>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004444:	2a04      	cmp	r2, #4
 8004446:	d036      	beq.n	80044b6 <I2C_MasterReceive_BTF+0x104>
 8004448:	2a02      	cmp	r2, #2
 800444a:	d034      	beq.n	80044b6 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444c:	6802      	ldr	r2, [r0, #0]
 800444e:	6813      	ldr	r3, [r2, #0]
 8004450:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	e004      	b.n	8004462 <I2C_MasterReceive_BTF+0xb0>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004458:	6802      	ldr	r2, [r0, #0]
 800445a:	6813      	ldr	r3, [r2, #0]
 800445c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004460:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004462:	6803      	ldr	r3, [r0, #0]
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004468:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800446a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800446c:	1c53      	adds	r3, r2, #1
 800446e:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8004470:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004472:	3b01      	subs	r3, #1
 8004474:	b29b      	uxth	r3, r3
 8004476:	8543      	strh	r3, [r0, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004478:	6803      	ldr	r3, [r0, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 800447e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004480:	3301      	adds	r3, #1
 8004482:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8004484:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004486:	3b01      	subs	r3, #1
 8004488:	b29b      	uxth	r3, r3
 800448a:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800448c:	6802      	ldr	r2, [r0, #0]
 800448e:	6853      	ldr	r3, [r2, #4]
 8004490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004494:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004496:	2320      	movs	r3, #32
 8004498:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800449c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b40      	cmp	r3, #64	; 0x40
 80044a4:	d00d      	beq.n	80044c2 <I2C_MasterReceive_BTF+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a6:	2300      	movs	r3, #0
 80044a8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044ac:	2312      	movs	r3, #18
 80044ae:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80044b0:	f7ff fd79 	bl	8003fa6 <HAL_I2C_MasterRxCpltCallback>
 80044b4:	e7a7      	b.n	8004406 <I2C_MasterReceive_BTF+0x54>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b6:	6802      	ldr	r2, [r0, #0]
 80044b8:	6813      	ldr	r3, [r2, #0]
 80044ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	e7cf      	b.n	8004462 <I2C_MasterReceive_BTF+0xb0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c2:	2300      	movs	r3, #0
 80044c4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80044c8:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80044ca:	f7ff ff20 	bl	800430e <HAL_I2C_MemRxCpltCallback>
 80044ce:	e79a      	b.n	8004406 <I2C_MasterReceive_BTF+0x54>

080044d0 <HAL_I2C_ErrorCallback>:
}
 80044d0:	4770      	bx	lr

080044d2 <HAL_I2C_AbortCpltCallback>:
}
 80044d2:	4770      	bx	lr

080044d4 <I2C_DMAAbort>:
{
 80044d4:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80044d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044d8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  hi2c->hdmatx->XferCpltCallback = NULL;
 80044dc:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80044de:	2300      	movs	r3, #0
 80044e0:	63cb      	str	r3, [r1, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 80044e2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80044e4:	63cb      	str	r3, [r1, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e6:	6804      	ldr	r4, [r0, #0]
 80044e8:	6821      	ldr	r1, [r4, #0]
 80044ea:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80044ee:	6021      	str	r1, [r4, #0]
  hi2c->XferCount = 0U;
 80044f0:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 80044f2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80044f4:	650b      	str	r3, [r1, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 80044f6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80044f8:	650b      	str	r3, [r1, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 80044fa:	6801      	ldr	r1, [r0, #0]
 80044fc:	680b      	ldr	r3, [r1, #0]
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004504:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b60      	cmp	r3, #96	; 0x60
 800450c:	d00d      	beq.n	800452a <I2C_DMAAbort+0x56>
 800450e:	b2d2      	uxtb	r2, r2
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004510:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8004514:	2a28      	cmp	r2, #40	; 0x28
 8004516:	d012      	beq.n	800453e <I2C_DMAAbort+0x6a>
      hi2c->State = HAL_I2C_STATE_READY;
 8004518:	2320      	movs	r3, #32
 800451a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800451e:	2300      	movs	r3, #0
 8004520:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004524:	f7ff ffd4 	bl	80044d0 <HAL_I2C_ErrorCallback>
}
 8004528:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 800452a:	2320      	movs	r3, #32
 800452c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004530:	2300      	movs	r3, #0
 8004532:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004536:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004538:	f7ff ffcb 	bl	80044d2 <HAL_I2C_AbortCpltCallback>
 800453c:	e7f4      	b.n	8004528 <I2C_DMAAbort+0x54>
      __HAL_I2C_ENABLE(hi2c);
 800453e:	6802      	ldr	r2, [r0, #0]
 8004540:	6813      	ldr	r3, [r2, #0]
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004548:	6802      	ldr	r2, [r0, #0]
 800454a:	6813      	ldr	r3, [r2, #0]
 800454c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004550:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004552:	2300      	movs	r3, #0
 8004554:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004556:	2328      	movs	r3, #40	; 0x28
 8004558:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 800455c:	e7e2      	b.n	8004524 <I2C_DMAAbort+0x50>
	...

08004560 <I2C_ITError>:
{
 8004560:	b510      	push	{r4, lr}
 8004562:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004564:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004568:	b2db      	uxtb	r3, r3
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800456a:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	2a10      	cmp	r2, #16
 8004572:	d033      	beq.n	80045dc <I2C_ITError+0x7c>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004574:	f003 0228 	and.w	r2, r3, #40	; 0x28
 8004578:	2a28      	cmp	r2, #40	; 0x28
 800457a:	d037      	beq.n	80045ec <I2C_ITError+0x8c>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800457c:	6822      	ldr	r2, [r4, #0]
 800457e:	6852      	ldr	r2, [r2, #4]
 8004580:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004584:	d104      	bne.n	8004590 <I2C_ITError+0x30>
 8004586:	2b60      	cmp	r3, #96	; 0x60
 8004588:	d002      	beq.n	8004590 <I2C_ITError+0x30>
      hi2c->State = HAL_I2C_STATE_READY;
 800458a:	2320      	movs	r3, #32
 800458c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8004590:	2300      	movs	r3, #0
 8004592:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004594:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80045a0:	d048      	beq.n	8004634 <I2C_ITError+0xd4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045a8:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80045aa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80045ac:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d020      	beq.n	80045f8 <I2C_ITError+0x98>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80045b6:	4b42      	ldr	r3, [pc, #264]	; (80046c0 <I2C_ITError+0x160>)
 80045b8:	6513      	str	r3, [r2, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80045ba:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80045bc:	f7fe fce8 	bl	8002f90 <HAL_DMA_Abort_IT>
 80045c0:	2800      	cmp	r0, #0
 80045c2:	d049      	beq.n	8004658 <I2C_ITError+0xf8>
        __HAL_I2C_DISABLE(hi2c);
 80045c4:	6822      	ldr	r2, [r4, #0]
 80045c6:	6813      	ldr	r3, [r2, #0]
 80045c8:	f023 0301 	bic.w	r3, r3, #1
 80045cc:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80045ce:	2320      	movs	r3, #32
 80045d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045d4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80045d6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80045d8:	4798      	blx	r3
 80045da:	e03d      	b.n	8004658 <I2C_ITError+0xf8>
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80045dc:	2b22      	cmp	r3, #34	; 0x22
 80045de:	d1c9      	bne.n	8004574 <I2C_ITError+0x14>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80045e0:	6801      	ldr	r1, [r0, #0]
 80045e2:	680a      	ldr	r2, [r1, #0]
 80045e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e8:	600a      	str	r2, [r1, #0]
 80045ea:	e7c3      	b.n	8004574 <I2C_ITError+0x14>
    hi2c->PreviousState = I2C_STATE_NONE;
 80045ec:	2300      	movs	r3, #0
 80045ee:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80045f0:	2328      	movs	r3, #40	; 0x28
 80045f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80045f6:	e7cf      	b.n	8004598 <I2C_ITError+0x38>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045fa:	4a31      	ldr	r2, [pc, #196]	; (80046c0 <I2C_ITError+0x160>)
 80045fc:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045fe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004600:	f7fe fcc6 	bl	8002f90 <HAL_DMA_Abort_IT>
 8004604:	b340      	cbz	r0, 8004658 <I2C_ITError+0xf8>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	695a      	ldr	r2, [r3, #20]
 800460a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800460e:	d005      	beq.n	800461c <I2C_ITError+0xbc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004614:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004618:	3301      	adds	r3, #1
 800461a:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 800461c:	6822      	ldr	r2, [r4, #0]
 800461e:	6813      	ldr	r3, [r2, #0]
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8004626:	2320      	movs	r3, #32
 8004628:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800462c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800462e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004630:	4798      	blx	r3
 8004632:	e011      	b.n	8004658 <I2C_ITError+0xf8>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004634:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	2a60      	cmp	r2, #96	; 0x60
 800463c:	d016      	beq.n	800466c <I2C_ITError+0x10c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004644:	d005      	beq.n	8004652 <I2C_ITError+0xf2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800464a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800464c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800464e:	3301      	adds	r3, #1
 8004650:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8004652:	4620      	mov	r0, r4
 8004654:	f7ff ff3c 	bl	80044d0 <HAL_I2C_ErrorCallback>
  CurrentState = hi2c->State;
 8004658:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800465c:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800465e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004660:	f012 0f04 	tst.w	r2, #4
 8004664:	d001      	beq.n	800466a <I2C_ITError+0x10a>
 8004666:	2b28      	cmp	r3, #40	; 0x28
 8004668:	d018      	beq.n	800469c <I2C_ITError+0x13c>
}
 800466a:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800466c:	2220      	movs	r2, #32
 800466e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004672:	2200      	movs	r2, #0
 8004674:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004676:	695a      	ldr	r2, [r3, #20]
 8004678:	f012 0f40 	tst.w	r2, #64	; 0x40
 800467c:	d005      	beq.n	800468a <I2C_ITError+0x12a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004682:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004686:	3301      	adds	r3, #1
 8004688:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 800468a:	6822      	ldr	r2, [r4, #0]
 800468c:	6813      	ldr	r3, [r2, #0]
 800468e:	f023 0301 	bic.w	r3, r3, #1
 8004692:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8004694:	4620      	mov	r0, r4
 8004696:	f7ff ff1c 	bl	80044d2 <HAL_I2C_AbortCpltCallback>
 800469a:	e7dd      	b.n	8004658 <I2C_ITError+0xf8>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800469c:	6822      	ldr	r2, [r4, #0]
 800469e:	6853      	ldr	r3, [r2, #4]
 80046a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046a4:	6053      	str	r3, [r2, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80046a6:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <I2C_ITError+0x164>)
 80046a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80046ae:	2220      	movs	r2, #32
 80046b0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80046b4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80046b8:	4620      	mov	r0, r4
 80046ba:	f7ff fce9 	bl	8004090 <HAL_I2C_ListenCpltCallback>
}
 80046be:	e7d4      	b.n	800466a <I2C_ITError+0x10a>
 80046c0:	080044d5 	.word	0x080044d5
 80046c4:	ffff0000 	.word	0xffff0000

080046c8 <I2C_Slave_STOPF>:
{
 80046c8:	b530      	push	{r4, r5, lr}
 80046ca:	b083      	sub	sp, #12
 80046cc:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046ce:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 80046d2:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046d4:	6802      	ldr	r2, [r0, #0]
 80046d6:	6853      	ldr	r3, [r2, #4]
 80046d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046dc:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80046de:	2300      	movs	r3, #0
 80046e0:	9301      	str	r3, [sp, #4]
 80046e2:	6803      	ldr	r3, [r0, #0]
 80046e4:	695a      	ldr	r2, [r3, #20]
 80046e6:	9201      	str	r2, [sp, #4]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f2:	6802      	ldr	r2, [r0, #0]
 80046f4:	6813      	ldr	r3, [r2, #0]
 80046f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046fa:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046fc:	6803      	ldr	r3, [r0, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004704:	d038      	beq.n	8004778 <I2C_Slave_STOPF+0xb0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004706:	2d22      	cmp	r5, #34	; 0x22
 8004708:	d021      	beq.n	800474e <I2C_Slave_STOPF+0x86>
 800470a:	2d2a      	cmp	r5, #42	; 0x2a
 800470c:	d01f      	beq.n	800474e <I2C_Slave_STOPF+0x86>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800470e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	6852      	ldr	r2, [r2, #4]
 8004714:	b292      	uxth	r2, r2
 8004716:	8542      	strh	r2, [r0, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8004718:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800471a:	b292      	uxth	r2, r2
 800471c:	b11a      	cbz	r2, 8004726 <I2C_Slave_STOPF+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800471e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004720:	f042 0204 	orr.w	r2, r2, #4
 8004724:	6402      	str	r2, [r0, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800472c:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800472e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004730:	f7fe fd30 	bl	8003194 <HAL_DMA_GetState>
 8004734:	2801      	cmp	r0, #1
 8004736:	d01f      	beq.n	8004778 <I2C_Slave_STOPF+0xb0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004738:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800473a:	4a43      	ldr	r2, [pc, #268]	; (8004848 <I2C_Slave_STOPF+0x180>)
 800473c:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800473e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004740:	f7fe fc26 	bl	8002f90 <HAL_DMA_Abort_IT>
 8004744:	b1c0      	cbz	r0, 8004778 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004746:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004748:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800474a:	4798      	blx	r3
 800474c:	e014      	b.n	8004778 <I2C_Slave_STOPF+0xb0>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800474e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004750:	6812      	ldr	r2, [r2, #0]
 8004752:	6852      	ldr	r2, [r2, #4]
 8004754:	b292      	uxth	r2, r2
 8004756:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8004758:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800475a:	b292      	uxth	r2, r2
 800475c:	b11a      	cbz	r2, 8004766 <I2C_Slave_STOPF+0x9e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800475e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004760:	f042 0204 	orr.w	r2, r2, #4
 8004764:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476c:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800476e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004770:	f7fe fd10 	bl	8003194 <HAL_DMA_GetState>
 8004774:	2801      	cmp	r0, #1
 8004776:	d140      	bne.n	80047fa <I2C_Slave_STOPF+0x132>
  if (hi2c->XferCount != 0U)
 8004778:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800477a:	b29b      	uxth	r3, r3
 800477c:	b323      	cbz	r3, 80047c8 <I2C_Slave_STOPF+0x100>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	695a      	ldr	r2, [r3, #20]
 8004782:	f012 0f04 	tst.w	r2, #4
 8004786:	d009      	beq.n	800479c <I2C_Slave_STOPF+0xd4>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800478c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800478e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004790:	3301      	adds	r3, #1
 8004792:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004794:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004796:	3b01      	subs	r3, #1
 8004798:	b29b      	uxth	r3, r3
 800479a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	695a      	ldr	r2, [r3, #20]
 80047a0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80047a4:	d009      	beq.n	80047ba <I2C_Slave_STOPF+0xf2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047aa:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80047ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047ae:	3301      	adds	r3, #1
 80047b0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80047b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80047ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80047bc:	b29b      	uxth	r3, r3
 80047be:	b11b      	cbz	r3, 80047c8 <I2C_Slave_STOPF+0x100>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047c2:	f043 0304 	orr.w	r3, r3, #4
 80047c6:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047ca:	bb13      	cbnz	r3, 8004812 <I2C_Slave_STOPF+0x14a>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80047cc:	2d2a      	cmp	r5, #42	; 0x2a
 80047ce:	d025      	beq.n	800481c <I2C_Slave_STOPF+0x154>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80047d0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b28      	cmp	r3, #40	; 0x28
 80047d8:	d029      	beq.n	800482e <I2C_Slave_STOPF+0x166>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80047dc:	2b22      	cmp	r3, #34	; 0x22
 80047de:	d001      	beq.n	80047e4 <I2C_Slave_STOPF+0x11c>
 80047e0:	2d22      	cmp	r5, #34	; 0x22
 80047e2:	d119      	bne.n	8004818 <I2C_Slave_STOPF+0x150>
        hi2c->PreviousState = I2C_STATE_NONE;
 80047e4:	2300      	movs	r3, #0
 80047e6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80047e8:	2220      	movs	r2, #32
 80047ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047f2:	4620      	mov	r0, r4
 80047f4:	f7ff fbfe 	bl	8003ff4 <HAL_I2C_SlaveRxCpltCallback>
}
 80047f8:	e00e      	b.n	8004818 <I2C_Slave_STOPF+0x150>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047fc:	4a12      	ldr	r2, [pc, #72]	; (8004848 <I2C_Slave_STOPF+0x180>)
 80047fe:	651a      	str	r2, [r3, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004800:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004802:	f7fe fbc5 	bl	8002f90 <HAL_DMA_Abort_IT>
 8004806:	2800      	cmp	r0, #0
 8004808:	d0b6      	beq.n	8004778 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800480a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800480c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800480e:	4798      	blx	r3
 8004810:	e7b2      	b.n	8004778 <I2C_Slave_STOPF+0xb0>
    I2C_ITError(hi2c);
 8004812:	4620      	mov	r0, r4
 8004814:	f7ff fea4 	bl	8004560 <I2C_ITError>
}
 8004818:	b003      	add	sp, #12
 800481a:	bd30      	pop	{r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_NONE;
 800481c:	2300      	movs	r3, #0
 800481e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004820:	2328      	movs	r3, #40	; 0x28
 8004822:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004826:	4620      	mov	r0, r4
 8004828:	f7ff fbe4 	bl	8003ff4 <HAL_I2C_SlaveRxCpltCallback>
 800482c:	e7d0      	b.n	80047d0 <I2C_Slave_STOPF+0x108>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800482e:	4b07      	ldr	r3, [pc, #28]	; (800484c <I2C_Slave_STOPF+0x184>)
 8004830:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004832:	2300      	movs	r3, #0
 8004834:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004836:	2220      	movs	r2, #32
 8004838:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800483c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004840:	4620      	mov	r0, r4
 8004842:	f7ff fc25 	bl	8004090 <HAL_I2C_ListenCpltCallback>
 8004846:	e7e7      	b.n	8004818 <I2C_Slave_STOPF+0x150>
 8004848:	080044d5 	.word	0x080044d5
 800484c:	ffff0000 	.word	0xffff0000

08004850 <HAL_I2C_EV_IRQHandler>:
{
 8004850:	b570      	push	{r4, r5, r6, lr}
 8004852:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004854:	6802      	ldr	r2, [r0, #0]
 8004856:	6855      	ldr	r5, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004858:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800485a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800485e:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004860:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004864:	2b10      	cmp	r3, #16
 8004866:	d014      	beq.n	8004892 <HAL_I2C_EV_IRQHandler+0x42>
 8004868:	b2c8      	uxtb	r0, r1
 800486a:	2b40      	cmp	r3, #64	; 0x40
 800486c:	d011      	beq.n	8004892 <HAL_I2C_EV_IRQHandler+0x42>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800486e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d071      	beq.n	8004958 <HAL_I2C_EV_IRQHandler+0x108>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004874:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 8004876:	2100      	movs	r1, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004878:	f013 0f02 	tst.w	r3, #2
 800487c:	d06f      	beq.n	800495e <HAL_I2C_EV_IRQHandler+0x10e>
 800487e:	f415 7f00 	tst.w	r5, #512	; 0x200
 8004882:	d06c      	beq.n	800495e <HAL_I2C_EV_IRQHandler+0x10e>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004884:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004886:	b103      	cbz	r3, 800488a <HAL_I2C_EV_IRQHandler+0x3a>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004888:	6991      	ldr	r1, [r2, #24]
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800488a:	4620      	mov	r0, r4
 800488c:	f7ff fbd9 	bl	8004042 <I2C_Slave_ADDR>
}
 8004890:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004892:	6990      	ldr	r0, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004894:	6953      	ldr	r3, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004896:	f013 0101 	ands.w	r1, r3, #1
 800489a:	d105      	bne.n	80048a8 <HAL_I2C_EV_IRQHandler+0x58>
 800489c:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 80048a0:	d0f6      	beq.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>
 80048a2:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 80048a6:	d0f3      	beq.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048a8:	b111      	cbz	r1, 80048b0 <HAL_I2C_EV_IRQHandler+0x60>
 80048aa:	f415 7f00 	tst.w	r5, #512	; 0x200
 80048ae:	d125      	bne.n	80048fc <HAL_I2C_EV_IRQHandler+0xac>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048b0:	f013 0f08 	tst.w	r3, #8
 80048b4:	d002      	beq.n	80048bc <HAL_I2C_EV_IRQHandler+0x6c>
 80048b6:	f415 7f00 	tst.w	r5, #512	; 0x200
 80048ba:	d126      	bne.n	800490a <HAL_I2C_EV_IRQHandler+0xba>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048bc:	f013 0f02 	tst.w	r3, #2
 80048c0:	d002      	beq.n	80048c8 <HAL_I2C_EV_IRQHandler+0x78>
 80048c2:	f415 7f00 	tst.w	r5, #512	; 0x200
 80048c6:	d124      	bne.n	8004912 <HAL_I2C_EV_IRQHandler+0xc2>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80048c8:	f010 0f04 	tst.w	r0, #4
 80048cc:	d029      	beq.n	8004922 <HAL_I2C_EV_IRQHandler+0xd2>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80048ce:	6852      	ldr	r2, [r2, #4]
 80048d0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80048d4:	d1dc      	bne.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80048da:	d005      	beq.n	80048e8 <HAL_I2C_EV_IRQHandler+0x98>
 80048dc:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80048e0:	d002      	beq.n	80048e8 <HAL_I2C_EV_IRQHandler+0x98>
 80048e2:	f013 0f04 	tst.w	r3, #4
 80048e6:	d018      	beq.n	800491a <HAL_I2C_EV_IRQHandler+0xca>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048e8:	f013 0f04 	tst.w	r3, #4
 80048ec:	d0d0      	beq.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>
 80048ee:	f415 7f00 	tst.w	r5, #512	; 0x200
 80048f2:	d0cd      	beq.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_BTF(hi2c);
 80048f4:	4620      	mov	r0, r4
 80048f6:	f7ff fcbc 	bl	8004272 <I2C_MasterTransmit_BTF>
 80048fa:	e7c9      	b.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_ConvertOtherXferOptions(hi2c);
 80048fc:	4620      	mov	r0, r4
 80048fe:	f7fe fee5 	bl	80036cc <I2C_ConvertOtherXferOptions>
      I2C_Master_SB(hi2c);
 8004902:	4620      	mov	r0, r4
 8004904:	f7fe fd3a 	bl	800337c <I2C_Master_SB>
 8004908:	e7c2      	b.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADD10(hi2c);
 800490a:	4620      	mov	r0, r4
 800490c:	f7fe fd8d 	bl	800342a <I2C_Master_ADD10>
 8004910:	e7be      	b.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADDR(hi2c);
 8004912:	4620      	mov	r0, r4
 8004914:	f7fe fda0 	bl	8003458 <I2C_Master_ADDR>
 8004918:	e7ba      	b.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_TXE(hi2c);
 800491a:	4620      	mov	r0, r4
 800491c:	f7ff fc05 	bl	800412a <I2C_MasterTransmit_TXE>
 8004920:	e7b6      	b.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004922:	6852      	ldr	r2, [r2, #4]
 8004924:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004928:	d1b2      	bne.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800492a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800492e:	d005      	beq.n	800493c <HAL_I2C_EV_IRQHandler+0xec>
 8004930:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8004934:	d002      	beq.n	800493c <HAL_I2C_EV_IRQHandler+0xec>
 8004936:	f013 0f04 	tst.w	r3, #4
 800493a:	d009      	beq.n	8004950 <HAL_I2C_EV_IRQHandler+0x100>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800493c:	f013 0f04 	tst.w	r3, #4
 8004940:	d0a6      	beq.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>
 8004942:	f415 7f00 	tst.w	r5, #512	; 0x200
 8004946:	d0a3      	beq.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_BTF(hi2c);
 8004948:	4620      	mov	r0, r4
 800494a:	f7ff fd32 	bl	80043b2 <I2C_MasterReceive_BTF>
 800494e:	e79f      	b.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_RXNE(hi2c);
 8004950:	4620      	mov	r0, r4
 8004952:	f7ff fcdd 	bl	8004310 <I2C_MasterReceive_RXNE>
 8004956:	e79b      	b.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004958:	6991      	ldr	r1, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800495a:	6953      	ldr	r3, [r2, #20]
 800495c:	e78c      	b.n	8004878 <HAL_I2C_EV_IRQHandler+0x28>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800495e:	f013 0f10 	tst.w	r3, #16
 8004962:	d002      	beq.n	800496a <HAL_I2C_EV_IRQHandler+0x11a>
 8004964:	f415 7f00 	tst.w	r5, #512	; 0x200
 8004968:	d117      	bne.n	800499a <HAL_I2C_EV_IRQHandler+0x14a>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800496a:	2821      	cmp	r0, #33	; 0x21
 800496c:	d019      	beq.n	80049a2 <HAL_I2C_EV_IRQHandler+0x152>
 800496e:	2829      	cmp	r0, #41	; 0x29
 8004970:	d017      	beq.n	80049a2 <HAL_I2C_EV_IRQHandler+0x152>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004972:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004976:	d005      	beq.n	8004984 <HAL_I2C_EV_IRQHandler+0x134>
 8004978:	f415 6f80 	tst.w	r5, #1024	; 0x400
 800497c:	d002      	beq.n	8004984 <HAL_I2C_EV_IRQHandler+0x134>
 800497e:	f013 0f04 	tst.w	r3, #4
 8004982:	d027      	beq.n	80049d4 <HAL_I2C_EV_IRQHandler+0x184>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004984:	f013 0f04 	tst.w	r3, #4
 8004988:	d082      	beq.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>
 800498a:	f415 7f00 	tst.w	r5, #512	; 0x200
 800498e:	f43f af7f 	beq.w	8004890 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_BTF(hi2c);
 8004992:	4620      	mov	r0, r4
 8004994:	f7fe fe72 	bl	800367c <I2C_SlaveReceive_BTF>
 8004998:	e77a      	b.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Slave_STOPF(hi2c);
 800499a:	4620      	mov	r0, r4
 800499c:	f7ff fe94 	bl	80046c8 <I2C_Slave_STOPF>
 80049a0:	e776      	b.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80049a6:	d005      	beq.n	80049b4 <HAL_I2C_EV_IRQHandler+0x164>
 80049a8:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80049ac:	d002      	beq.n	80049b4 <HAL_I2C_EV_IRQHandler+0x164>
 80049ae:	f013 0f04 	tst.w	r3, #4
 80049b2:	d00b      	beq.n	80049cc <HAL_I2C_EV_IRQHandler+0x17c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049b4:	f013 0f04 	tst.w	r3, #4
 80049b8:	f43f af6a 	beq.w	8004890 <HAL_I2C_EV_IRQHandler+0x40>
 80049bc:	f415 7f00 	tst.w	r5, #512	; 0x200
 80049c0:	f43f af66 	beq.w	8004890 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_BTF(hi2c);
 80049c4:	4620      	mov	r0, r4
 80049c6:	f7fe fe4a 	bl	800365e <I2C_SlaveTransmit_BTF>
 80049ca:	e761      	b.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_TXE(hi2c);
 80049cc:	4620      	mov	r0, r4
 80049ce:	f7ff faec 	bl	8003faa <I2C_SlaveTransmit_TXE>
 80049d2:	e75d      	b.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_RXNE(hi2c);
 80049d4:	4620      	mov	r0, r4
 80049d6:	f7ff fb0e 	bl	8003ff6 <I2C_SlaveReceive_RXNE>
 80049da:	e759      	b.n	8004890 <HAL_I2C_EV_IRQHandler+0x40>

080049dc <HAL_I2C_ER_IRQHandler>:
{
 80049dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049de:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80049e0:	6803      	ldr	r3, [r0, #0]
 80049e2:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80049e4:	685f      	ldr	r7, [r3, #4]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049e6:	f415 7f80 	tst.w	r5, #256	; 0x100
 80049ea:	d007      	beq.n	80049fc <HAL_I2C_ER_IRQHandler+0x20>
 80049ec:	f417 7f80 	tst.w	r7, #256	; 0x100
 80049f0:	d03b      	beq.n	8004a6a <HAL_I2C_ER_IRQHandler+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049f6:	615a      	str	r2, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 80049f8:	2601      	movs	r6, #1
 80049fa:	e000      	b.n	80049fe <HAL_I2C_ER_IRQHandler+0x22>
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80049fc:	2600      	movs	r6, #0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049fe:	f415 7f00 	tst.w	r5, #512	; 0x200
 8004a02:	d008      	beq.n	8004a16 <HAL_I2C_ER_IRQHandler+0x3a>
 8004a04:	f417 7f80 	tst.w	r7, #256	; 0x100
 8004a08:	d005      	beq.n	8004a16 <HAL_I2C_ER_IRQHandler+0x3a>
    error |= HAL_I2C_ERROR_ARLO;
 8004a0a:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004a14:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a16:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8004a1a:	d018      	beq.n	8004a4e <HAL_I2C_ER_IRQHandler+0x72>
 8004a1c:	f417 7f80 	tst.w	r7, #256	; 0x100
 8004a20:	d015      	beq.n	8004a4e <HAL_I2C_ER_IRQHandler+0x72>
    tmp1 = hi2c->Mode;
 8004a22:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004a26:	b2db      	uxtb	r3, r3
    tmp2 = hi2c->XferCount;
 8004a28:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004a2a:	b291      	uxth	r1, r2
    tmp3 = hi2c->State;
 8004a2c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004a30:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 8004a32:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004a34:	2b20      	cmp	r3, #32
 8004a36:	d01a      	beq.n	8004a6e <HAL_I2C_ER_IRQHandler+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a3e:	615a      	str	r2, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8004a40:	f046 0604 	orr.w	r6, r6, #4
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8004a44:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b10      	cmp	r3, #16
 8004a4c:	d01d      	beq.n	8004a8a <HAL_I2C_ER_IRQHandler+0xae>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a4e:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8004a52:	d008      	beq.n	8004a66 <HAL_I2C_ER_IRQHandler+0x8a>
 8004a54:	f417 7f80 	tst.w	r7, #256	; 0x100
 8004a58:	d005      	beq.n	8004a66 <HAL_I2C_ER_IRQHandler+0x8a>
    error |= HAL_I2C_ERROR_OVR;
 8004a5a:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004a64:	615a      	str	r2, [r3, #20]
  if (error != HAL_I2C_ERROR_NONE)
 8004a66:	b9b6      	cbnz	r6, 8004a96 <HAL_I2C_ER_IRQHandler+0xba>
}
 8004a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004a6a:	2600      	movs	r6, #0
 8004a6c:	e7c7      	b.n	80049fe <HAL_I2C_ER_IRQHandler+0x22>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004a6e:	2900      	cmp	r1, #0
 8004a70:	d1e2      	bne.n	8004a38 <HAL_I2C_ER_IRQHandler+0x5c>
 8004a72:	2a21      	cmp	r2, #33	; 0x21
 8004a74:	d005      	beq.n	8004a82 <HAL_I2C_ER_IRQHandler+0xa6>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004a76:	2a29      	cmp	r2, #41	; 0x29
 8004a78:	d003      	beq.n	8004a82 <HAL_I2C_ER_IRQHandler+0xa6>
 8004a7a:	2a28      	cmp	r2, #40	; 0x28
 8004a7c:	d1dc      	bne.n	8004a38 <HAL_I2C_ER_IRQHandler+0x5c>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004a7e:	2821      	cmp	r0, #33	; 0x21
 8004a80:	d1da      	bne.n	8004a38 <HAL_I2C_ER_IRQHandler+0x5c>
      I2C_Slave_AF(hi2c);
 8004a82:	4620      	mov	r0, r4
 8004a84:	f7ff fb06 	bl	8004094 <I2C_Slave_AF>
 8004a88:	e7e1      	b.n	8004a4e <HAL_I2C_ER_IRQHandler+0x72>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a8a:	6822      	ldr	r2, [r4, #0]
 8004a8c:	6813      	ldr	r3, [r2, #0]
 8004a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	e7db      	b.n	8004a4e <HAL_I2C_ER_IRQHandler+0x72>
    hi2c->ErrorCode |= error;
 8004a96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a98:	431e      	orrs	r6, r3
 8004a9a:	6426      	str	r6, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f7ff fd5f 	bl	8004560 <I2C_ITError>
}
 8004aa2:	e7e1      	b.n	8004a68 <HAL_I2C_ER_IRQHandler+0x8c>

08004aa4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	f000 81bb 	beq.w	8004e20 <HAL_RCC_OscConfig+0x37c>
{
 8004aaa:	b570      	push	{r4, r5, r6, lr}
 8004aac:	b082      	sub	sp, #8
 8004aae:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab0:	6803      	ldr	r3, [r0, #0]
 8004ab2:	f013 0f01 	tst.w	r3, #1
 8004ab6:	d03b      	beq.n	8004b30 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ab8:	4ba7      	ldr	r3, [pc, #668]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 030c 	and.w	r3, r3, #12
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d02c      	beq.n	8004b1e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ac4:	4ba4      	ldr	r3, [pc, #656]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d021      	beq.n	8004b14 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ad0:	6863      	ldr	r3, [r4, #4]
 8004ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad6:	d04f      	beq.n	8004b78 <HAL_RCC_OscConfig+0xd4>
 8004ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004adc:	d052      	beq.n	8004b84 <HAL_RCC_OscConfig+0xe0>
 8004ade:	4b9e      	ldr	r3, [pc, #632]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004aee:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004af0:	6863      	ldr	r3, [r4, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d050      	beq.n	8004b98 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af6:	f7fd ff63 	bl	80029c0 <HAL_GetTick>
 8004afa:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afc:	4b96      	ldr	r3, [pc, #600]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b04:	d114      	bne.n	8004b30 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b06:	f7fd ff5b 	bl	80029c0 <HAL_GetTick>
 8004b0a:	1b40      	subs	r0, r0, r5
 8004b0c:	2864      	cmp	r0, #100	; 0x64
 8004b0e:	d9f5      	bls.n	8004afc <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8004b10:	2003      	movs	r0, #3
 8004b12:	e18a      	b.n	8004e2a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b14:	4b90      	ldr	r3, [pc, #576]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004b1c:	d0d8      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b1e:	4b8e      	ldr	r3, [pc, #568]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004b26:	d003      	beq.n	8004b30 <HAL_RCC_OscConfig+0x8c>
 8004b28:	6863      	ldr	r3, [r4, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 817a 	beq.w	8004e24 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	f013 0f02 	tst.w	r3, #2
 8004b36:	d055      	beq.n	8004be4 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b38:	4b87      	ldr	r3, [pc, #540]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f013 0f0c 	tst.w	r3, #12
 8004b40:	d03e      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b42:	4b85      	ldr	r3, [pc, #532]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d033      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b4e:	68e3      	ldr	r3, [r4, #12]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d068      	beq.n	8004c26 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b54:	4b81      	ldr	r3, [pc, #516]	; (8004d5c <HAL_RCC_OscConfig+0x2b8>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5a:	f7fd ff31 	bl	80029c0 <HAL_GetTick>
 8004b5e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b60:	4b7d      	ldr	r3, [pc, #500]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f013 0f02 	tst.w	r3, #2
 8004b68:	d154      	bne.n	8004c14 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b6a:	f7fd ff29 	bl	80029c0 <HAL_GetTick>
 8004b6e:	1b40      	subs	r0, r0, r5
 8004b70:	2802      	cmp	r0, #2
 8004b72:	d9f5      	bls.n	8004b60 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8004b74:	2003      	movs	r0, #3
 8004b76:	e158      	b.n	8004e2a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b78:	4a77      	ldr	r2, [pc, #476]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004b7a:	6813      	ldr	r3, [r2, #0]
 8004b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b80:	6013      	str	r3, [r2, #0]
 8004b82:	e7b5      	b.n	8004af0 <HAL_RCC_OscConfig+0x4c>
 8004b84:	4b74      	ldr	r3, [pc, #464]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	e7ab      	b.n	8004af0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8004b98:	f7fd ff12 	bl	80029c0 <HAL_GetTick>
 8004b9c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b9e:	4b6e      	ldr	r3, [pc, #440]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004ba6:	d0c3      	beq.n	8004b30 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba8:	f7fd ff0a 	bl	80029c0 <HAL_GetTick>
 8004bac:	1b40      	subs	r0, r0, r5
 8004bae:	2864      	cmp	r0, #100	; 0x64
 8004bb0:	d9f5      	bls.n	8004b9e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8004bb2:	2003      	movs	r0, #3
 8004bb4:	e139      	b.n	8004e2a <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bb6:	4b68      	ldr	r3, [pc, #416]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004bbe:	d1c6      	bne.n	8004b4e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bc0:	4b65      	ldr	r3, [pc, #404]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f013 0f02 	tst.w	r3, #2
 8004bc8:	d004      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x130>
 8004bca:	68e3      	ldr	r3, [r4, #12]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d001      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 8004bd0:	2001      	movs	r0, #1
 8004bd2:	e12a      	b.n	8004e2a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd4:	4a60      	ldr	r2, [pc, #384]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004bd6:	6813      	ldr	r3, [r2, #0]
 8004bd8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004bdc:	6921      	ldr	r1, [r4, #16]
 8004bde:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004be2:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	f013 0f08 	tst.w	r3, #8
 8004bea:	d040      	beq.n	8004c6e <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bec:	6963      	ldr	r3, [r4, #20]
 8004bee:	b363      	cbz	r3, 8004c4a <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bf0:	4b5b      	ldr	r3, [pc, #364]	; (8004d60 <HAL_RCC_OscConfig+0x2bc>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf6:	f7fd fee3 	bl	80029c0 <HAL_GetTick>
 8004bfa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfc:	4b56      	ldr	r3, [pc, #344]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c00:	f013 0f02 	tst.w	r3, #2
 8004c04:	d133      	bne.n	8004c6e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c06:	f7fd fedb 	bl	80029c0 <HAL_GetTick>
 8004c0a:	1b40      	subs	r0, r0, r5
 8004c0c:	2802      	cmp	r0, #2
 8004c0e:	d9f5      	bls.n	8004bfc <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8004c10:	2003      	movs	r0, #3
 8004c12:	e10a      	b.n	8004e2a <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c14:	4a50      	ldr	r2, [pc, #320]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004c16:	6813      	ldr	r3, [r2, #0]
 8004c18:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004c1c:	6921      	ldr	r1, [r4, #16]
 8004c1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	e7de      	b.n	8004be4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8004c26:	4b4d      	ldr	r3, [pc, #308]	; (8004d5c <HAL_RCC_OscConfig+0x2b8>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004c2c:	f7fd fec8 	bl	80029c0 <HAL_GetTick>
 8004c30:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c32:	4b49      	ldr	r3, [pc, #292]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f013 0f02 	tst.w	r3, #2
 8004c3a:	d0d3      	beq.n	8004be4 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c3c:	f7fd fec0 	bl	80029c0 <HAL_GetTick>
 8004c40:	1b40      	subs	r0, r0, r5
 8004c42:	2802      	cmp	r0, #2
 8004c44:	d9f5      	bls.n	8004c32 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8004c46:	2003      	movs	r0, #3
 8004c48:	e0ef      	b.n	8004e2a <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c4a:	4b45      	ldr	r3, [pc, #276]	; (8004d60 <HAL_RCC_OscConfig+0x2bc>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c50:	f7fd feb6 	bl	80029c0 <HAL_GetTick>
 8004c54:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c56:	4b40      	ldr	r3, [pc, #256]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c5a:	f013 0f02 	tst.w	r3, #2
 8004c5e:	d006      	beq.n	8004c6e <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c60:	f7fd feae 	bl	80029c0 <HAL_GetTick>
 8004c64:	1b40      	subs	r0, r0, r5
 8004c66:	2802      	cmp	r0, #2
 8004c68:	d9f5      	bls.n	8004c56 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8004c6a:	2003      	movs	r0, #3
 8004c6c:	e0dd      	b.n	8004e2a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	f013 0f04 	tst.w	r3, #4
 8004c74:	d079      	beq.n	8004d6a <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c76:	4b38      	ldr	r3, [pc, #224]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004c7e:	d133      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c80:	2300      	movs	r3, #0
 8004c82:	9301      	str	r3, [sp, #4]
 8004c84:	4b34      	ldr	r3, [pc, #208]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c8c:	641a      	str	r2, [r3, #64]	; 0x40
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c94:	9301      	str	r3, [sp, #4]
 8004c96:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004c98:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9a:	4b32      	ldr	r3, [pc, #200]	; (8004d64 <HAL_RCC_OscConfig+0x2c0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004ca2:	d023      	beq.n	8004cec <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ca4:	68a3      	ldr	r3, [r4, #8]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d034      	beq.n	8004d14 <HAL_RCC_OscConfig+0x270>
 8004caa:	2b05      	cmp	r3, #5
 8004cac:	d038      	beq.n	8004d20 <HAL_RCC_OscConfig+0x27c>
 8004cae:	4b2a      	ldr	r3, [pc, #168]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004cb0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cb2:	f022 0201 	bic.w	r2, r2, #1
 8004cb6:	671a      	str	r2, [r3, #112]	; 0x70
 8004cb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cba:	f022 0204 	bic.w	r2, r2, #4
 8004cbe:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cc0:	68a3      	ldr	r3, [r4, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d036      	beq.n	8004d34 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc6:	f7fd fe7b 	bl	80029c0 <HAL_GetTick>
 8004cca:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ccc:	4b22      	ldr	r3, [pc, #136]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd0:	f013 0f02 	tst.w	r3, #2
 8004cd4:	d148      	bne.n	8004d68 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cd6:	f7fd fe73 	bl	80029c0 <HAL_GetTick>
 8004cda:	1b80      	subs	r0, r0, r6
 8004cdc:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ce0:	4298      	cmp	r0, r3
 8004ce2:	d9f3      	bls.n	8004ccc <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8004ce4:	2003      	movs	r0, #3
 8004ce6:	e0a0      	b.n	8004e2a <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8004ce8:	2500      	movs	r5, #0
 8004cea:	e7d6      	b.n	8004c9a <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cec:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <HAL_RCC_OscConfig+0x2c0>)
 8004cee:	6813      	ldr	r3, [r2, #0]
 8004cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004cf6:	f7fd fe63 	bl	80029c0 <HAL_GetTick>
 8004cfa:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfc:	4b19      	ldr	r3, [pc, #100]	; (8004d64 <HAL_RCC_OscConfig+0x2c0>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004d04:	d1ce      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d06:	f7fd fe5b 	bl	80029c0 <HAL_GetTick>
 8004d0a:	1b80      	subs	r0, r0, r6
 8004d0c:	2802      	cmp	r0, #2
 8004d0e:	d9f5      	bls.n	8004cfc <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8004d10:	2003      	movs	r0, #3
 8004d12:	e08a      	b.n	8004e2a <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d14:	4a10      	ldr	r2, [pc, #64]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004d16:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d1e:	e7cf      	b.n	8004cc0 <HAL_RCC_OscConfig+0x21c>
 8004d20:	4b0d      	ldr	r3, [pc, #52]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004d22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d24:	f042 0204 	orr.w	r2, r2, #4
 8004d28:	671a      	str	r2, [r3, #112]	; 0x70
 8004d2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d2c:	f042 0201 	orr.w	r2, r2, #1
 8004d30:	671a      	str	r2, [r3, #112]	; 0x70
 8004d32:	e7c5      	b.n	8004cc0 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d34:	f7fd fe44 	bl	80029c0 <HAL_GetTick>
 8004d38:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d3a:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <HAL_RCC_OscConfig+0x2b4>)
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3e:	f013 0f02 	tst.w	r3, #2
 8004d42:	d011      	beq.n	8004d68 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d44:	f7fd fe3c 	bl	80029c0 <HAL_GetTick>
 8004d48:	1b80      	subs	r0, r0, r6
 8004d4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d4e:	4298      	cmp	r0, r3
 8004d50:	d9f3      	bls.n	8004d3a <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8004d52:	2003      	movs	r0, #3
 8004d54:	e069      	b.n	8004e2a <HAL_RCC_OscConfig+0x386>
 8004d56:	bf00      	nop
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	42470000 	.word	0x42470000
 8004d60:	42470e80 	.word	0x42470e80
 8004d64:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d68:	b9e5      	cbnz	r5, 8004da4 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d6a:	69a3      	ldr	r3, [r4, #24]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d05b      	beq.n	8004e28 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d70:	4a30      	ldr	r2, [pc, #192]	; (8004e34 <HAL_RCC_OscConfig+0x390>)
 8004d72:	6892      	ldr	r2, [r2, #8]
 8004d74:	f002 020c 	and.w	r2, r2, #12
 8004d78:	2a08      	cmp	r2, #8
 8004d7a:	d058      	beq.n	8004e2e <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d017      	beq.n	8004db0 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d80:	4b2d      	ldr	r3, [pc, #180]	; (8004e38 <HAL_RCC_OscConfig+0x394>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d86:	f7fd fe1b 	bl	80029c0 <HAL_GetTick>
 8004d8a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d8c:	4b29      	ldr	r3, [pc, #164]	; (8004e34 <HAL_RCC_OscConfig+0x390>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004d94:	d042      	beq.n	8004e1c <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d96:	f7fd fe13 	bl	80029c0 <HAL_GetTick>
 8004d9a:	1b00      	subs	r0, r0, r4
 8004d9c:	2802      	cmp	r0, #2
 8004d9e:	d9f5      	bls.n	8004d8c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004da0:	2003      	movs	r0, #3
 8004da2:	e042      	b.n	8004e2a <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da4:	4a23      	ldr	r2, [pc, #140]	; (8004e34 <HAL_RCC_OscConfig+0x390>)
 8004da6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dac:	6413      	str	r3, [r2, #64]	; 0x40
 8004dae:	e7dc      	b.n	8004d6a <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8004db0:	4b21      	ldr	r3, [pc, #132]	; (8004e38 <HAL_RCC_OscConfig+0x394>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004db6:	f7fd fe03 	bl	80029c0 <HAL_GetTick>
 8004dba:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dbc:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <HAL_RCC_OscConfig+0x390>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004dc4:	d006      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dc6:	f7fd fdfb 	bl	80029c0 <HAL_GetTick>
 8004dca:	1b40      	subs	r0, r0, r5
 8004dcc:	2802      	cmp	r0, #2
 8004dce:	d9f5      	bls.n	8004dbc <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8004dd0:	2003      	movs	r0, #3
 8004dd2:	e02a      	b.n	8004e2a <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dd4:	69e3      	ldr	r3, [r4, #28]
 8004dd6:	6a22      	ldr	r2, [r4, #32]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004ddc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004de0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004de2:	0852      	lsrs	r2, r2, #1
 8004de4:	3a01      	subs	r2, #1
 8004de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004dec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004df0:	4a10      	ldr	r2, [pc, #64]	; (8004e34 <HAL_RCC_OscConfig+0x390>)
 8004df2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8004df4:	4b10      	ldr	r3, [pc, #64]	; (8004e38 <HAL_RCC_OscConfig+0x394>)
 8004df6:	2201      	movs	r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004dfa:	f7fd fde1 	bl	80029c0 <HAL_GetTick>
 8004dfe:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e00:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <HAL_RCC_OscConfig+0x390>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004e08:	d106      	bne.n	8004e18 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e0a:	f7fd fdd9 	bl	80029c0 <HAL_GetTick>
 8004e0e:	1b00      	subs	r0, r0, r4
 8004e10:	2802      	cmp	r0, #2
 8004e12:	d9f5      	bls.n	8004e00 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8004e14:	2003      	movs	r0, #3
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004e18:	2000      	movs	r0, #0
 8004e1a:	e006      	b.n	8004e2a <HAL_RCC_OscConfig+0x386>
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	e004      	b.n	8004e2a <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 8004e20:	2001      	movs	r0, #1
}
 8004e22:	4770      	bx	lr
        return HAL_ERROR;
 8004e24:	2001      	movs	r0, #1
 8004e26:	e000      	b.n	8004e2a <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8004e28:	2000      	movs	r0, #0
}
 8004e2a:	b002      	add	sp, #8
 8004e2c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004e2e:	2001      	movs	r0, #1
 8004e30:	e7fb      	b.n	8004e2a <HAL_RCC_OscConfig+0x386>
 8004e32:	bf00      	nop
 8004e34:	40023800 	.word	0x40023800
 8004e38:	42470060 	.word	0x42470060

08004e3c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e3c:	4b32      	ldr	r3, [pc, #200]	; (8004f08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 030c 	and.w	r3, r3, #12
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d05c      	beq.n	8004f02 <HAL_RCC_GetSysClockFreq+0xc6>
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d001      	beq.n	8004e50 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e4c:	482f      	ldr	r0, [pc, #188]	; (8004f0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e4e:	4770      	bx	lr
{
 8004e50:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e54:	4b2c      	ldr	r3, [pc, #176]	; (8004f08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004e62:	d02b      	beq.n	8004ebc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e64:	4b28      	ldr	r3, [pc, #160]	; (8004f08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004e6c:	461e      	mov	r6, r3
 8004e6e:	2700      	movs	r7, #0
 8004e70:	015c      	lsls	r4, r3, #5
 8004e72:	2500      	movs	r5, #0
 8004e74:	1ae4      	subs	r4, r4, r3
 8004e76:	eb65 0507 	sbc.w	r5, r5, r7
 8004e7a:	01a9      	lsls	r1, r5, #6
 8004e7c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004e80:	01a0      	lsls	r0, r4, #6
 8004e82:	1b00      	subs	r0, r0, r4
 8004e84:	eb61 0105 	sbc.w	r1, r1, r5
 8004e88:	00cb      	lsls	r3, r1, #3
 8004e8a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004e8e:	00c4      	lsls	r4, r0, #3
 8004e90:	19a0      	adds	r0, r4, r6
 8004e92:	eb43 0107 	adc.w	r1, r3, r7
 8004e96:	024b      	lsls	r3, r1, #9
 8004e98:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8004e9c:	0244      	lsls	r4, r0, #9
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f7fb fdba 	bl	8000a1c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ea8:	4b17      	ldr	r3, [pc, #92]	; (8004f08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004eb4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004eb8:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ebc:	4b12      	ldr	r3, [pc, #72]	; (8004f08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004ec4:	461e      	mov	r6, r3
 8004ec6:	2700      	movs	r7, #0
 8004ec8:	015c      	lsls	r4, r3, #5
 8004eca:	2500      	movs	r5, #0
 8004ecc:	1ae4      	subs	r4, r4, r3
 8004ece:	eb65 0507 	sbc.w	r5, r5, r7
 8004ed2:	01a9      	lsls	r1, r5, #6
 8004ed4:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004ed8:	01a0      	lsls	r0, r4, #6
 8004eda:	1b00      	subs	r0, r0, r4
 8004edc:	eb61 0105 	sbc.w	r1, r1, r5
 8004ee0:	00cb      	lsls	r3, r1, #3
 8004ee2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004ee6:	00c4      	lsls	r4, r0, #3
 8004ee8:	19a0      	adds	r0, r4, r6
 8004eea:	eb43 0107 	adc.w	r1, r3, r7
 8004eee:	028b      	lsls	r3, r1, #10
 8004ef0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8004ef4:	0284      	lsls	r4, r0, #10
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	4619      	mov	r1, r3
 8004efa:	2300      	movs	r3, #0
 8004efc:	f7fb fd8e 	bl	8000a1c <__aeabi_uldivmod>
 8004f00:	e7d2      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8004f02:	4803      	ldr	r0, [pc, #12]	; (8004f10 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40023800 	.word	0x40023800
 8004f0c:	00f42400 	.word	0x00f42400
 8004f10:	007a1200 	.word	0x007a1200

08004f14 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004f14:	2800      	cmp	r0, #0
 8004f16:	f000 809d 	beq.w	8005054 <HAL_RCC_ClockConfig+0x140>
{
 8004f1a:	b570      	push	{r4, r5, r6, lr}
 8004f1c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f1e:	4b4f      	ldr	r3, [pc, #316]	; (800505c <HAL_RCC_ClockConfig+0x148>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	428b      	cmp	r3, r1
 8004f28:	d209      	bcs.n	8004f3e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2a:	b2cb      	uxtb	r3, r1
 8004f2c:	4a4b      	ldr	r2, [pc, #300]	; (800505c <HAL_RCC_ClockConfig+0x148>)
 8004f2e:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f30:	6813      	ldr	r3, [r2, #0]
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	428b      	cmp	r3, r1
 8004f38:	d001      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8004f3a:	2001      	movs	r0, #1
}
 8004f3c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	f013 0f02 	tst.w	r3, #2
 8004f44:	d017      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f46:	f013 0f04 	tst.w	r3, #4
 8004f4a:	d004      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f4c:	4a44      	ldr	r2, [pc, #272]	; (8005060 <HAL_RCC_ClockConfig+0x14c>)
 8004f4e:	6893      	ldr	r3, [r2, #8]
 8004f50:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f54:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	f013 0f08 	tst.w	r3, #8
 8004f5c:	d004      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f5e:	4a40      	ldr	r2, [pc, #256]	; (8005060 <HAL_RCC_ClockConfig+0x14c>)
 8004f60:	6893      	ldr	r3, [r2, #8]
 8004f62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f66:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f68:	4a3d      	ldr	r2, [pc, #244]	; (8005060 <HAL_RCC_ClockConfig+0x14c>)
 8004f6a:	6893      	ldr	r3, [r2, #8]
 8004f6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f70:	68a0      	ldr	r0, [r4, #8]
 8004f72:	4303      	orrs	r3, r0
 8004f74:	6093      	str	r3, [r2, #8]
 8004f76:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	f013 0f01 	tst.w	r3, #1
 8004f7e:	d032      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f80:	6863      	ldr	r3, [r4, #4]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d021      	beq.n	8004fca <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f86:	1e9a      	subs	r2, r3, #2
 8004f88:	2a01      	cmp	r2, #1
 8004f8a:	d925      	bls.n	8004fd8 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8c:	4a34      	ldr	r2, [pc, #208]	; (8005060 <HAL_RCC_ClockConfig+0x14c>)
 8004f8e:	6812      	ldr	r2, [r2, #0]
 8004f90:	f012 0f02 	tst.w	r2, #2
 8004f94:	d060      	beq.n	8005058 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f96:	4932      	ldr	r1, [pc, #200]	; (8005060 <HAL_RCC_ClockConfig+0x14c>)
 8004f98:	688a      	ldr	r2, [r1, #8]
 8004f9a:	f022 0203 	bic.w	r2, r2, #3
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004fa2:	f7fd fd0d 	bl	80029c0 <HAL_GetTick>
 8004fa6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa8:	4b2d      	ldr	r3, [pc, #180]	; (8005060 <HAL_RCC_ClockConfig+0x14c>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 030c 	and.w	r3, r3, #12
 8004fb0:	6862      	ldr	r2, [r4, #4]
 8004fb2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004fb6:	d016      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb8:	f7fd fd02 	bl	80029c0 <HAL_GetTick>
 8004fbc:	1b80      	subs	r0, r0, r6
 8004fbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8004fc2:	4298      	cmp	r0, r3
 8004fc4:	d9f0      	bls.n	8004fa8 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8004fc6:	2003      	movs	r0, #3
 8004fc8:	e7b8      	b.n	8004f3c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fca:	4a25      	ldr	r2, [pc, #148]	; (8005060 <HAL_RCC_ClockConfig+0x14c>)
 8004fcc:	6812      	ldr	r2, [r2, #0]
 8004fce:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8004fd2:	d1e0      	bne.n	8004f96 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8004fd4:	2001      	movs	r0, #1
 8004fd6:	e7b1      	b.n	8004f3c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd8:	4a21      	ldr	r2, [pc, #132]	; (8005060 <HAL_RCC_ClockConfig+0x14c>)
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004fe0:	d1d9      	bne.n	8004f96 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8004fe2:	2001      	movs	r0, #1
 8004fe4:	e7aa      	b.n	8004f3c <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fe6:	4b1d      	ldr	r3, [pc, #116]	; (800505c <HAL_RCC_ClockConfig+0x148>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	42ab      	cmp	r3, r5
 8004ff0:	d909      	bls.n	8005006 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff2:	b2ea      	uxtb	r2, r5
 8004ff4:	4b19      	ldr	r3, [pc, #100]	; (800505c <HAL_RCC_ClockConfig+0x148>)
 8004ff6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	42ab      	cmp	r3, r5
 8005000:	d001      	beq.n	8005006 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8005002:	2001      	movs	r0, #1
 8005004:	e79a      	b.n	8004f3c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	f013 0f04 	tst.w	r3, #4
 800500c:	d006      	beq.n	800501c <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800500e:	4a14      	ldr	r2, [pc, #80]	; (8005060 <HAL_RCC_ClockConfig+0x14c>)
 8005010:	6893      	ldr	r3, [r2, #8]
 8005012:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005016:	68e1      	ldr	r1, [r4, #12]
 8005018:	430b      	orrs	r3, r1
 800501a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800501c:	6823      	ldr	r3, [r4, #0]
 800501e:	f013 0f08 	tst.w	r3, #8
 8005022:	d007      	beq.n	8005034 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005024:	4a0e      	ldr	r2, [pc, #56]	; (8005060 <HAL_RCC_ClockConfig+0x14c>)
 8005026:	6893      	ldr	r3, [r2, #8]
 8005028:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800502c:	6921      	ldr	r1, [r4, #16]
 800502e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005032:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005034:	f7ff ff02 	bl	8004e3c <HAL_RCC_GetSysClockFreq>
 8005038:	4b09      	ldr	r3, [pc, #36]	; (8005060 <HAL_RCC_ClockConfig+0x14c>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005040:	4a08      	ldr	r2, [pc, #32]	; (8005064 <HAL_RCC_ClockConfig+0x150>)
 8005042:	5cd3      	ldrb	r3, [r2, r3]
 8005044:	40d8      	lsrs	r0, r3
 8005046:	4b08      	ldr	r3, [pc, #32]	; (8005068 <HAL_RCC_ClockConfig+0x154>)
 8005048:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800504a:	2000      	movs	r0, #0
 800504c:	f7fd fc6c 	bl	8002928 <HAL_InitTick>
  return HAL_OK;
 8005050:	2000      	movs	r0, #0
 8005052:	e773      	b.n	8004f3c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8005054:	2001      	movs	r0, #1
}
 8005056:	4770      	bx	lr
        return HAL_ERROR;
 8005058:	2001      	movs	r0, #1
 800505a:	e76f      	b.n	8004f3c <HAL_RCC_ClockConfig+0x28>
 800505c:	40023c00 	.word	0x40023c00
 8005060:	40023800 	.word	0x40023800
 8005064:	0800b548 	.word	0x0800b548
 8005068:	20000064 	.word	0x20000064

0800506c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800506c:	4b01      	ldr	r3, [pc, #4]	; (8005074 <HAL_RCC_GetHCLKFreq+0x8>)
 800506e:	6818      	ldr	r0, [r3, #0]
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20000064 	.word	0x20000064

08005078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005078:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800507a:	f7ff fff7 	bl	800506c <HAL_RCC_GetHCLKFreq>
 800507e:	4b04      	ldr	r3, [pc, #16]	; (8005090 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005086:	4a03      	ldr	r2, [pc, #12]	; (8005094 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005088:	5cd3      	ldrb	r3, [r2, r3]
}
 800508a:	40d8      	lsrs	r0, r3
 800508c:	bd08      	pop	{r3, pc}
 800508e:	bf00      	nop
 8005090:	40023800 	.word	0x40023800
 8005094:	0800b558 	.word	0x0800b558

08005098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005098:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800509a:	f7ff ffe7 	bl	800506c <HAL_RCC_GetHCLKFreq>
 800509e:	4b04      	ldr	r3, [pc, #16]	; (80050b0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80050a6:	4a03      	ldr	r2, [pc, #12]	; (80050b4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80050a8:	5cd3      	ldrb	r3, [r2, r3]
}
 80050aa:	40d8      	lsrs	r0, r3
 80050ac:	bd08      	pop	{r3, pc}
 80050ae:	bf00      	nop
 80050b0:	40023800 	.word	0x40023800
 80050b4:	0800b558 	.word	0x0800b558

080050b8 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d03b      	beq.n	8005134 <HAL_SPI_Init+0x7c>
{
 80050bc:	b510      	push	{r4, lr}
 80050be:	4604      	mov	r4, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050c0:	2300      	movs	r3, #0
 80050c2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050c4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d02e      	beq.n	800512a <HAL_SPI_Init+0x72>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050cc:	2302      	movs	r3, #2
 80050ce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050d2:	6822      	ldr	r2, [r4, #0]
 80050d4:	6813      	ldr	r3, [r2, #0]
 80050d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050da:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80050dc:	6863      	ldr	r3, [r4, #4]
 80050de:	68a2      	ldr	r2, [r4, #8]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	68e2      	ldr	r2, [r4, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	6922      	ldr	r2, [r4, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	6962      	ldr	r2, [r4, #20]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	69a2      	ldr	r2, [r4, #24]
 80050f0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80050f4:	4313      	orrs	r3, r2
 80050f6:	69e2      	ldr	r2, [r4, #28]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	6a22      	ldr	r2, [r4, #32]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005100:	6822      	ldr	r2, [r4, #0]
 8005102:	430b      	orrs	r3, r1
 8005104:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005106:	8b63      	ldrh	r3, [r4, #26]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800510e:	6822      	ldr	r2, [r4, #0]
 8005110:	430b      	orrs	r3, r1
 8005112:	6053      	str	r3, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005114:	6822      	ldr	r2, [r4, #0]
 8005116:	69d3      	ldr	r3, [r2, #28]
 8005118:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800511c:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800511e:	2000      	movs	r0, #0
 8005120:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005122:	2301      	movs	r3, #1
 8005124:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8005128:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800512a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800512e:	f001 fd01 	bl	8006b34 <HAL_SPI_MspInit>
 8005132:	e7cb      	b.n	80050cc <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8005134:	2001      	movs	r0, #1
}
 8005136:	4770      	bx	lr

08005138 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005138:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800513a:	6a03      	ldr	r3, [r0, #32]
 800513c:	f023 0301 	bic.w	r3, r3, #1
 8005140:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005142:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005144:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005146:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005148:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800514c:	680d      	ldr	r5, [r1, #0]
 800514e:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005152:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005156:	688b      	ldr	r3, [r1, #8]
 8005158:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800515a:	4d0d      	ldr	r5, [pc, #52]	; (8005190 <TIM_OC1_SetConfig+0x58>)
 800515c:	42a8      	cmp	r0, r5
 800515e:	d009      	beq.n	8005174 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005160:	4d0b      	ldr	r5, [pc, #44]	; (8005190 <TIM_OC1_SetConfig+0x58>)
 8005162:	42a8      	cmp	r0, r5
 8005164:	d00d      	beq.n	8005182 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005166:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005168:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800516a:	684a      	ldr	r2, [r1, #4]
 800516c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516e:	6203      	str	r3, [r0, #32]
}
 8005170:	bc70      	pop	{r4, r5, r6}
 8005172:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8005174:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005178:	68cc      	ldr	r4, [r1, #12]
 800517a:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 800517c:	f023 0304 	bic.w	r3, r3, #4
 8005180:	e7ee      	b.n	8005160 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005182:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8005186:	694c      	ldr	r4, [r1, #20]
 8005188:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 800518a:	698a      	ldr	r2, [r1, #24]
 800518c:	4322      	orrs	r2, r4
 800518e:	e7ea      	b.n	8005166 <TIM_OC1_SetConfig+0x2e>
 8005190:	40010000 	.word	0x40010000

08005194 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005194:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005196:	6a03      	ldr	r3, [r0, #32]
 8005198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800519c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051a2:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051a4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051a8:	680d      	ldr	r5, [r1, #0]
 80051aa:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051b0:	688d      	ldr	r5, [r1, #8]
 80051b2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051b6:	4d0f      	ldr	r5, [pc, #60]	; (80051f4 <TIM_OC3_SetConfig+0x60>)
 80051b8:	42a8      	cmp	r0, r5
 80051ba:	d009      	beq.n	80051d0 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051bc:	4d0d      	ldr	r5, [pc, #52]	; (80051f4 <TIM_OC3_SetConfig+0x60>)
 80051be:	42a8      	cmp	r0, r5
 80051c0:	d00e      	beq.n	80051e0 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c2:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051c4:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051c6:	684a      	ldr	r2, [r1, #4]
 80051c8:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ca:	6203      	str	r3, [r0, #32]
}
 80051cc:	bc30      	pop	{r4, r5}
 80051ce:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80051d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051d4:	68cd      	ldr	r5, [r1, #12]
 80051d6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80051da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051de:	e7ed      	b.n	80051bc <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051e0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051e4:	694d      	ldr	r5, [r1, #20]
 80051e6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051ea:	698d      	ldr	r5, [r1, #24]
 80051ec:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 80051f0:	e7e7      	b.n	80051c2 <TIM_OC3_SetConfig+0x2e>
 80051f2:	bf00      	nop
 80051f4:	40010000 	.word	0x40010000

080051f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051f8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051fa:	6a03      	ldr	r3, [r0, #32]
 80051fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005200:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005204:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005206:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005208:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800520c:	680d      	ldr	r5, [r1, #0]
 800520e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005216:	688d      	ldr	r5, [r1, #8]
 8005218:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521c:	4d07      	ldr	r5, [pc, #28]	; (800523c <TIM_OC4_SetConfig+0x44>)
 800521e:	42a8      	cmp	r0, r5
 8005220:	d006      	beq.n	8005230 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005222:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005224:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005226:	684a      	ldr	r2, [r1, #4]
 8005228:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522a:	6203      	str	r3, [r0, #32]
}
 800522c:	bc30      	pop	{r4, r5}
 800522e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005230:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005234:	694d      	ldr	r5, [r1, #20]
 8005236:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800523a:	e7f2      	b.n	8005222 <TIM_OC4_SetConfig+0x2a>
 800523c:	40010000 	.word	0x40010000

08005240 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005240:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005242:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005244:	6a04      	ldr	r4, [r0, #32]
 8005246:	f024 0401 	bic.w	r4, r4, #1
 800524a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800524c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800524e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005252:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005256:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800525a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800525c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800525e:	6203      	str	r3, [r0, #32]
}
 8005260:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005264:	4770      	bx	lr

08005266 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005266:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005268:	6a03      	ldr	r3, [r0, #32]
 800526a:	f023 0310 	bic.w	r3, r3, #16
 800526e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005270:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8005272:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005274:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005278:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800527c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005280:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005284:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005286:	6203      	str	r3, [r0, #32]
}
 8005288:	f85d 4b04 	ldr.w	r4, [sp], #4
 800528c:	4770      	bx	lr

0800528e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800528e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005294:	4319      	orrs	r1, r3
 8005296:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800529a:	6081      	str	r1, [r0, #8]
}
 800529c:	4770      	bx	lr

0800529e <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800529e:	6802      	ldr	r2, [r0, #0]
 80052a0:	68d3      	ldr	r3, [r2, #12]
 80052a2:	f043 0301 	orr.w	r3, r3, #1
 80052a6:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a8:	6802      	ldr	r2, [r0, #0]
 80052aa:	6893      	ldr	r3, [r2, #8]
 80052ac:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b0:	2b06      	cmp	r3, #6
 80052b2:	d003      	beq.n	80052bc <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 80052b4:	6813      	ldr	r3, [r2, #0]
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	6013      	str	r3, [r2, #0]
}
 80052bc:	2000      	movs	r0, #0
 80052be:	4770      	bx	lr

080052c0 <HAL_TIM_OC_MspInit>:
}
 80052c0:	4770      	bx	lr

080052c2 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80052c2:	4770      	bx	lr

080052c4 <HAL_TIM_TriggerCallback>:
}
 80052c4:	4770      	bx	lr

080052c6 <HAL_TIM_IRQHandler>:
{
 80052c6:	b510      	push	{r4, lr}
 80052c8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052ca:	6803      	ldr	r3, [r0, #0]
 80052cc:	691a      	ldr	r2, [r3, #16]
 80052ce:	f012 0f02 	tst.w	r2, #2
 80052d2:	d011      	beq.n	80052f8 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	f012 0f02 	tst.w	r2, #2
 80052da:	d00d      	beq.n	80052f8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052dc:	f06f 0202 	mvn.w	r2, #2
 80052e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052e2:	2301      	movs	r3, #1
 80052e4:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052e6:	6803      	ldr	r3, [r0, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	f013 0f03 	tst.w	r3, #3
 80052ee:	d070      	beq.n	80053d2 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80052f0:	f001 fb5a 	bl	80069a8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f4:	2300      	movs	r3, #0
 80052f6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	f012 0f04 	tst.w	r2, #4
 8005300:	d012      	beq.n	8005328 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	f012 0f04 	tst.w	r2, #4
 8005308:	d00e      	beq.n	8005328 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800530a:	f06f 0204 	mvn.w	r2, #4
 800530e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005310:	2302      	movs	r3, #2
 8005312:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005314:	6823      	ldr	r3, [r4, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	f413 7f40 	tst.w	r3, #768	; 0x300
 800531c:	d05f      	beq.n	80053de <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800531e:	4620      	mov	r0, r4
 8005320:	f001 fb42 	bl	80069a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005324:	2300      	movs	r3, #0
 8005326:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	f012 0f08 	tst.w	r2, #8
 8005330:	d012      	beq.n	8005358 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	f012 0f08 	tst.w	r2, #8
 8005338:	d00e      	beq.n	8005358 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800533a:	f06f 0208 	mvn.w	r2, #8
 800533e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005340:	2304      	movs	r3, #4
 8005342:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	f013 0f03 	tst.w	r3, #3
 800534c:	d04e      	beq.n	80053ec <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800534e:	4620      	mov	r0, r4
 8005350:	f001 fb2a 	bl	80069a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005354:	2300      	movs	r3, #0
 8005356:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	f012 0f10 	tst.w	r2, #16
 8005360:	d012      	beq.n	8005388 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	f012 0f10 	tst.w	r2, #16
 8005368:	d00e      	beq.n	8005388 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800536a:	f06f 0210 	mvn.w	r2, #16
 800536e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005370:	2308      	movs	r3, #8
 8005372:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	f413 7f40 	tst.w	r3, #768	; 0x300
 800537c:	d03d      	beq.n	80053fa <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800537e:	4620      	mov	r0, r4
 8005380:	f001 fb12 	bl	80069a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005384:	2300      	movs	r3, #0
 8005386:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	691a      	ldr	r2, [r3, #16]
 800538c:	f012 0f01 	tst.w	r2, #1
 8005390:	d003      	beq.n	800539a <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	f012 0f01 	tst.w	r2, #1
 8005398:	d136      	bne.n	8005408 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	f012 0f80 	tst.w	r2, #128	; 0x80
 80053a2:	d003      	beq.n	80053ac <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80053aa:	d134      	bne.n	8005416 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80053b4:	d003      	beq.n	80053be <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80053bc:	d132      	bne.n	8005424 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	f012 0f20 	tst.w	r2, #32
 80053c6:	d003      	beq.n	80053d0 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	f012 0f20 	tst.w	r2, #32
 80053ce:	d130      	bne.n	8005432 <HAL_TIM_IRQHandler+0x16c>
}
 80053d0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d2:	f001 faeb 	bl	80069ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d6:	4620      	mov	r0, r4
 80053d8:	f7ff ff73 	bl	80052c2 <HAL_TIM_PWM_PulseFinishedCallback>
 80053dc:	e78a      	b.n	80052f4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053de:	4620      	mov	r0, r4
 80053e0:	f001 fae4 	bl	80069ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e4:	4620      	mov	r0, r4
 80053e6:	f7ff ff6c 	bl	80052c2 <HAL_TIM_PWM_PulseFinishedCallback>
 80053ea:	e79b      	b.n	8005324 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ec:	4620      	mov	r0, r4
 80053ee:	f001 fadd 	bl	80069ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f2:	4620      	mov	r0, r4
 80053f4:	f7ff ff65 	bl	80052c2 <HAL_TIM_PWM_PulseFinishedCallback>
 80053f8:	e7ac      	b.n	8005354 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fa:	4620      	mov	r0, r4
 80053fc:	f001 fad6 	bl	80069ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005400:	4620      	mov	r0, r4
 8005402:	f7ff ff5e 	bl	80052c2 <HAL_TIM_PWM_PulseFinishedCallback>
 8005406:	e7bd      	b.n	8005384 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005408:	f06f 0201 	mvn.w	r2, #1
 800540c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800540e:	4620      	mov	r0, r4
 8005410:	f001 facb 	bl	80069aa <HAL_TIM_PeriodElapsedCallback>
 8005414:	e7c1      	b.n	800539a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005416:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800541a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800541c:	4620      	mov	r0, r4
 800541e:	f000 fb17 	bl	8005a50 <HAL_TIMEx_BreakCallback>
 8005422:	e7c3      	b.n	80053ac <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005424:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005428:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800542a:	4620      	mov	r0, r4
 800542c:	f7ff ff4a 	bl	80052c4 <HAL_TIM_TriggerCallback>
 8005430:	e7c5      	b.n	80053be <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005432:	f06f 0220 	mvn.w	r2, #32
 8005436:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005438:	4620      	mov	r0, r4
 800543a:	f000 fb08 	bl	8005a4e <HAL_TIMEx_CommutCallback>
}
 800543e:	e7c7      	b.n	80053d0 <HAL_TIM_IRQHandler+0x10a>

08005440 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8005440:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005442:	4a25      	ldr	r2, [pc, #148]	; (80054d8 <TIM_Base_SetConfig+0x98>)
 8005444:	4290      	cmp	r0, r2
 8005446:	d00e      	beq.n	8005466 <TIM_Base_SetConfig+0x26>
 8005448:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800544c:	d00b      	beq.n	8005466 <TIM_Base_SetConfig+0x26>
 800544e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005452:	4290      	cmp	r0, r2
 8005454:	d007      	beq.n	8005466 <TIM_Base_SetConfig+0x26>
 8005456:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800545a:	4290      	cmp	r0, r2
 800545c:	d003      	beq.n	8005466 <TIM_Base_SetConfig+0x26>
 800545e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005462:	4290      	cmp	r0, r2
 8005464:	d103      	bne.n	800546e <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800546a:	684a      	ldr	r2, [r1, #4]
 800546c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800546e:	4a1a      	ldr	r2, [pc, #104]	; (80054d8 <TIM_Base_SetConfig+0x98>)
 8005470:	4290      	cmp	r0, r2
 8005472:	d01a      	beq.n	80054aa <TIM_Base_SetConfig+0x6a>
 8005474:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005478:	d017      	beq.n	80054aa <TIM_Base_SetConfig+0x6a>
 800547a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800547e:	4290      	cmp	r0, r2
 8005480:	d013      	beq.n	80054aa <TIM_Base_SetConfig+0x6a>
 8005482:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005486:	4290      	cmp	r0, r2
 8005488:	d00f      	beq.n	80054aa <TIM_Base_SetConfig+0x6a>
 800548a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800548e:	4290      	cmp	r0, r2
 8005490:	d00b      	beq.n	80054aa <TIM_Base_SetConfig+0x6a>
 8005492:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005496:	4290      	cmp	r0, r2
 8005498:	d007      	beq.n	80054aa <TIM_Base_SetConfig+0x6a>
 800549a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800549e:	4290      	cmp	r0, r2
 80054a0:	d003      	beq.n	80054aa <TIM_Base_SetConfig+0x6a>
 80054a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054a6:	4290      	cmp	r0, r2
 80054a8:	d103      	bne.n	80054b2 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 80054aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ae:	68ca      	ldr	r2, [r1, #12]
 80054b0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b6:	694a      	ldr	r2, [r1, #20]
 80054b8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80054ba:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054bc:	688b      	ldr	r3, [r1, #8]
 80054be:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80054c0:	680b      	ldr	r3, [r1, #0]
 80054c2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c4:	4b04      	ldr	r3, [pc, #16]	; (80054d8 <TIM_Base_SetConfig+0x98>)
 80054c6:	4298      	cmp	r0, r3
 80054c8:	d002      	beq.n	80054d0 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 80054ca:	2301      	movs	r3, #1
 80054cc:	6143      	str	r3, [r0, #20]
}
 80054ce:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80054d0:	690b      	ldr	r3, [r1, #16]
 80054d2:	6303      	str	r3, [r0, #48]	; 0x30
 80054d4:	e7f9      	b.n	80054ca <TIM_Base_SetConfig+0x8a>
 80054d6:	bf00      	nop
 80054d8:	40010000 	.word	0x40010000

080054dc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80054dc:	b1a8      	cbz	r0, 800550a <HAL_TIM_Base_Init+0x2e>
{
 80054de:	b510      	push	{r4, lr}
 80054e0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80054e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80054e6:	b15b      	cbz	r3, 8005500 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80054e8:	2302      	movs	r3, #2
 80054ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ee:	1d21      	adds	r1, r4, #4
 80054f0:	6820      	ldr	r0, [r4, #0]
 80054f2:	f7ff ffa5 	bl	8005440 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80054f6:	2301      	movs	r3, #1
 80054f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80054fc:	2000      	movs	r0, #0
}
 80054fe:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005500:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005504:	f001 fb64 	bl	8006bd0 <HAL_TIM_Base_MspInit>
 8005508:	e7ee      	b.n	80054e8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800550a:	2001      	movs	r0, #1
}
 800550c:	4770      	bx	lr

0800550e <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800550e:	b1a8      	cbz	r0, 800553c <HAL_TIM_OC_Init+0x2e>
{
 8005510:	b510      	push	{r4, lr}
 8005512:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005514:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005518:	b15b      	cbz	r3, 8005532 <HAL_TIM_OC_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800551a:	2302      	movs	r3, #2
 800551c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005520:	1d21      	adds	r1, r4, #4
 8005522:	6820      	ldr	r0, [r4, #0]
 8005524:	f7ff ff8c 	bl	8005440 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005528:	2301      	movs	r3, #1
 800552a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800552e:	2000      	movs	r0, #0
}
 8005530:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005532:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8005536:	f7ff fec3 	bl	80052c0 <HAL_TIM_OC_MspInit>
 800553a:	e7ee      	b.n	800551a <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 800553c:	2001      	movs	r0, #1
}
 800553e:	4770      	bx	lr

08005540 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005540:	b1a8      	cbz	r0, 800556e <HAL_TIM_PWM_Init+0x2e>
{
 8005542:	b510      	push	{r4, lr}
 8005544:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005546:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800554a:	b15b      	cbz	r3, 8005564 <HAL_TIM_PWM_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800554c:	2302      	movs	r3, #2
 800554e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005552:	1d21      	adds	r1, r4, #4
 8005554:	6820      	ldr	r0, [r4, #0]
 8005556:	f7ff ff73 	bl	8005440 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800555a:	2301      	movs	r3, #1
 800555c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005560:	2000      	movs	r0, #0
}
 8005562:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005564:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005568:	f001 fb6e 	bl	8006c48 <HAL_TIM_PWM_MspInit>
 800556c:	e7ee      	b.n	800554c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800556e:	2001      	movs	r0, #1
}
 8005570:	4770      	bx	lr
	...

08005574 <TIM_OC2_SetConfig>:
{
 8005574:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005576:	6a03      	ldr	r3, [r0, #32]
 8005578:	f023 0310 	bic.w	r3, r3, #16
 800557c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800557e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005580:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005582:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005584:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005588:	680d      	ldr	r5, [r1, #0]
 800558a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800558e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005592:	688d      	ldr	r5, [r1, #8]
 8005594:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005598:	4d0e      	ldr	r5, [pc, #56]	; (80055d4 <TIM_OC2_SetConfig+0x60>)
 800559a:	42a8      	cmp	r0, r5
 800559c:	d009      	beq.n	80055b2 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800559e:	4d0d      	ldr	r5, [pc, #52]	; (80055d4 <TIM_OC2_SetConfig+0x60>)
 80055a0:	42a8      	cmp	r0, r5
 80055a2:	d00e      	beq.n	80055c2 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 80055a4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80055a6:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80055a8:	684a      	ldr	r2, [r1, #4]
 80055aa:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80055ac:	6203      	str	r3, [r0, #32]
}
 80055ae:	bc30      	pop	{r4, r5}
 80055b0:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80055b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055b6:	68cd      	ldr	r5, [r1, #12]
 80055b8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80055bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c0:	e7ed      	b.n	800559e <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055c2:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055c6:	694d      	ldr	r5, [r1, #20]
 80055c8:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055cc:	698d      	ldr	r5, [r1, #24]
 80055ce:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80055d2:	e7e7      	b.n	80055a4 <TIM_OC2_SetConfig+0x30>
 80055d4:	40010000 	.word	0x40010000

080055d8 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80055d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d028      	beq.n	8005632 <HAL_TIM_OC_ConfigChannel+0x5a>
{
 80055e0:	b510      	push	{r4, lr}
 80055e2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80055e4:	2301      	movs	r3, #1
 80055e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80055ea:	2302      	movs	r3, #2
 80055ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80055f0:	2a0c      	cmp	r2, #12
 80055f2:	d80b      	bhi.n	800560c <HAL_TIM_OC_ConfigChannel+0x34>
 80055f4:	e8df f002 	tbb	[pc, r2]
 80055f8:	0a0a0a07 	.word	0x0a0a0a07
 80055fc:	0a0a0a11 	.word	0x0a0a0a11
 8005600:	0a0a0a15 	.word	0x0a0a0a15
 8005604:	19          	.byte	0x19
 8005605:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005606:	6800      	ldr	r0, [r0, #0]
 8005608:	f7ff fd96 	bl	8005138 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800560c:	2301      	movs	r3, #1
 800560e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005612:	2000      	movs	r0, #0
 8005614:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005618:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800561a:	6800      	ldr	r0, [r0, #0]
 800561c:	f7ff ffaa 	bl	8005574 <TIM_OC2_SetConfig>
      break;
 8005620:	e7f4      	b.n	800560c <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005622:	6800      	ldr	r0, [r0, #0]
 8005624:	f7ff fdb6 	bl	8005194 <TIM_OC3_SetConfig>
      break;
 8005628:	e7f0      	b.n	800560c <HAL_TIM_OC_ConfigChannel+0x34>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800562a:	6800      	ldr	r0, [r0, #0]
 800562c:	f7ff fde4 	bl	80051f8 <TIM_OC4_SetConfig>
      break;
 8005630:	e7ec      	b.n	800560c <HAL_TIM_OC_ConfigChannel+0x34>
  __HAL_LOCK(htim);
 8005632:	2002      	movs	r0, #2
}
 8005634:	4770      	bx	lr

08005636 <HAL_TIM_PWM_ConfigChannel>:
{
 8005636:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005638:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800563c:	2b01      	cmp	r3, #1
 800563e:	d066      	beq.n	800570e <HAL_TIM_PWM_ConfigChannel+0xd8>
 8005640:	460d      	mov	r5, r1
 8005642:	4604      	mov	r4, r0
 8005644:	2301      	movs	r3, #1
 8005646:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800564a:	2302      	movs	r3, #2
 800564c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8005650:	2a0c      	cmp	r2, #12
 8005652:	d81a      	bhi.n	800568a <HAL_TIM_PWM_ConfigChannel+0x54>
 8005654:	e8df f002 	tbb	[pc, r2]
 8005658:	19191907 	.word	0x19191907
 800565c:	19191920 	.word	0x19191920
 8005660:	19191934 	.word	0x19191934
 8005664:	47          	.byte	0x47
 8005665:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005666:	6800      	ldr	r0, [r0, #0]
 8005668:	f7ff fd66 	bl	8005138 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800566c:	6822      	ldr	r2, [r4, #0]
 800566e:	6993      	ldr	r3, [r2, #24]
 8005670:	f043 0308 	orr.w	r3, r3, #8
 8005674:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005676:	6822      	ldr	r2, [r4, #0]
 8005678:	6993      	ldr	r3, [r2, #24]
 800567a:	f023 0304 	bic.w	r3, r3, #4
 800567e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005680:	6822      	ldr	r2, [r4, #0]
 8005682:	6993      	ldr	r3, [r2, #24]
 8005684:	6929      	ldr	r1, [r5, #16]
 8005686:	430b      	orrs	r3, r1
 8005688:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 800568a:	2301      	movs	r3, #1
 800568c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005690:	2000      	movs	r0, #0
 8005692:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005696:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005698:	6800      	ldr	r0, [r0, #0]
 800569a:	f7ff ff6b 	bl	8005574 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800569e:	6822      	ldr	r2, [r4, #0]
 80056a0:	6993      	ldr	r3, [r2, #24]
 80056a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80056a6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056a8:	6822      	ldr	r2, [r4, #0]
 80056aa:	6993      	ldr	r3, [r2, #24]
 80056ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056b0:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056b2:	6822      	ldr	r2, [r4, #0]
 80056b4:	6993      	ldr	r3, [r2, #24]
 80056b6:	6929      	ldr	r1, [r5, #16]
 80056b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80056bc:	6193      	str	r3, [r2, #24]
      break;
 80056be:	e7e4      	b.n	800568a <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056c0:	6800      	ldr	r0, [r0, #0]
 80056c2:	f7ff fd67 	bl	8005194 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056c6:	6822      	ldr	r2, [r4, #0]
 80056c8:	69d3      	ldr	r3, [r2, #28]
 80056ca:	f043 0308 	orr.w	r3, r3, #8
 80056ce:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056d0:	6822      	ldr	r2, [r4, #0]
 80056d2:	69d3      	ldr	r3, [r2, #28]
 80056d4:	f023 0304 	bic.w	r3, r3, #4
 80056d8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056da:	6822      	ldr	r2, [r4, #0]
 80056dc:	69d3      	ldr	r3, [r2, #28]
 80056de:	6929      	ldr	r1, [r5, #16]
 80056e0:	430b      	orrs	r3, r1
 80056e2:	61d3      	str	r3, [r2, #28]
      break;
 80056e4:	e7d1      	b.n	800568a <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056e6:	6800      	ldr	r0, [r0, #0]
 80056e8:	f7ff fd86 	bl	80051f8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056ec:	6822      	ldr	r2, [r4, #0]
 80056ee:	69d3      	ldr	r3, [r2, #28]
 80056f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80056f4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056f6:	6822      	ldr	r2, [r4, #0]
 80056f8:	69d3      	ldr	r3, [r2, #28]
 80056fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056fe:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005700:	6822      	ldr	r2, [r4, #0]
 8005702:	69d3      	ldr	r3, [r2, #28]
 8005704:	6929      	ldr	r1, [r5, #16]
 8005706:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800570a:	61d3      	str	r3, [r2, #28]
      break;
 800570c:	e7bd      	b.n	800568a <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 800570e:	2002      	movs	r0, #2
 8005710:	e7c1      	b.n	8005696 <HAL_TIM_PWM_ConfigChannel+0x60>

08005712 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005712:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005714:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005716:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800571a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800571e:	430b      	orrs	r3, r1
 8005720:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005722:	6083      	str	r3, [r0, #8]
}
 8005724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005728:	4770      	bx	lr

0800572a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800572a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800572e:	2b01      	cmp	r3, #1
 8005730:	d066      	beq.n	8005800 <HAL_TIM_ConfigClockSource+0xd6>
{
 8005732:	b510      	push	{r4, lr}
 8005734:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005736:	2301      	movs	r3, #1
 8005738:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800573c:	2302      	movs	r3, #2
 800573e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005742:	6802      	ldr	r2, [r0, #0]
 8005744:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800574a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800574e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005750:	680b      	ldr	r3, [r1, #0]
 8005752:	2b40      	cmp	r3, #64	; 0x40
 8005754:	d04a      	beq.n	80057ec <HAL_TIM_ConfigClockSource+0xc2>
 8005756:	d913      	bls.n	8005780 <HAL_TIM_ConfigClockSource+0x56>
 8005758:	2b60      	cmp	r3, #96	; 0x60
 800575a:	d03d      	beq.n	80057d8 <HAL_TIM_ConfigClockSource+0xae>
 800575c:	d91e      	bls.n	800579c <HAL_TIM_ConfigClockSource+0x72>
 800575e:	2b70      	cmp	r3, #112	; 0x70
 8005760:	d028      	beq.n	80057b4 <HAL_TIM_ConfigClockSource+0x8a>
 8005762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005766:	d130      	bne.n	80057ca <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8005768:	68cb      	ldr	r3, [r1, #12]
 800576a:	684a      	ldr	r2, [r1, #4]
 800576c:	6889      	ldr	r1, [r1, #8]
 800576e:	6800      	ldr	r0, [r0, #0]
 8005770:	f7ff ffcf 	bl	8005712 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005774:	6822      	ldr	r2, [r4, #0]
 8005776:	6893      	ldr	r3, [r2, #8]
 8005778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800577c:	6093      	str	r3, [r2, #8]
      break;
 800577e:	e024      	b.n	80057ca <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8005780:	2b10      	cmp	r3, #16
 8005782:	d006      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x68>
 8005784:	d904      	bls.n	8005790 <HAL_TIM_ConfigClockSource+0x66>
 8005786:	2b20      	cmp	r3, #32
 8005788:	d003      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x68>
 800578a:	2b30      	cmp	r3, #48	; 0x30
 800578c:	d001      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x68>
 800578e:	e01c      	b.n	80057ca <HAL_TIM_ConfigClockSource+0xa0>
 8005790:	b9db      	cbnz	r3, 80057ca <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005792:	4619      	mov	r1, r3
 8005794:	6820      	ldr	r0, [r4, #0]
 8005796:	f7ff fd7a 	bl	800528e <TIM_ITRx_SetConfig>
      break;
 800579a:	e016      	b.n	80057ca <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 800579c:	2b50      	cmp	r3, #80	; 0x50
 800579e:	d114      	bne.n	80057ca <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057a0:	68ca      	ldr	r2, [r1, #12]
 80057a2:	6849      	ldr	r1, [r1, #4]
 80057a4:	6800      	ldr	r0, [r0, #0]
 80057a6:	f7ff fd4b 	bl	8005240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057aa:	2150      	movs	r1, #80	; 0x50
 80057ac:	6820      	ldr	r0, [r4, #0]
 80057ae:	f7ff fd6e 	bl	800528e <TIM_ITRx_SetConfig>
      break;
 80057b2:	e00a      	b.n	80057ca <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 80057b4:	68cb      	ldr	r3, [r1, #12]
 80057b6:	684a      	ldr	r2, [r1, #4]
 80057b8:	6889      	ldr	r1, [r1, #8]
 80057ba:	6800      	ldr	r0, [r0, #0]
 80057bc:	f7ff ffa9 	bl	8005712 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80057c0:	6822      	ldr	r2, [r4, #0]
 80057c2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80057c8:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80057ca:	2301      	movs	r3, #1
 80057cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80057d0:	2000      	movs	r0, #0
 80057d2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80057d6:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057d8:	68ca      	ldr	r2, [r1, #12]
 80057da:	6849      	ldr	r1, [r1, #4]
 80057dc:	6800      	ldr	r0, [r0, #0]
 80057de:	f7ff fd42 	bl	8005266 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057e2:	2160      	movs	r1, #96	; 0x60
 80057e4:	6820      	ldr	r0, [r4, #0]
 80057e6:	f7ff fd52 	bl	800528e <TIM_ITRx_SetConfig>
      break;
 80057ea:	e7ee      	b.n	80057ca <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ec:	68ca      	ldr	r2, [r1, #12]
 80057ee:	6849      	ldr	r1, [r1, #4]
 80057f0:	6800      	ldr	r0, [r0, #0]
 80057f2:	f7ff fd25 	bl	8005240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057f6:	2140      	movs	r1, #64	; 0x40
 80057f8:	6820      	ldr	r0, [r4, #0]
 80057fa:	f7ff fd48 	bl	800528e <TIM_ITRx_SetConfig>
      break;
 80057fe:	e7e4      	b.n	80057ca <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 8005800:	2002      	movs	r0, #2
}
 8005802:	4770      	bx	lr

08005804 <TIM_SlaveTimer_SetConfig>:
{
 8005804:	b510      	push	{r4, lr}
  tmpsmcr = htim->Instance->SMCR;
 8005806:	6804      	ldr	r4, [r0, #0]
 8005808:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800580a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800580e:	684b      	ldr	r3, [r1, #4]
 8005810:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005812:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005816:	680a      	ldr	r2, [r1, #0]
 8005818:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800581a:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 800581c:	684b      	ldr	r3, [r1, #4]
 800581e:	2b50      	cmp	r3, #80	; 0x50
 8005820:	d023      	beq.n	800586a <TIM_SlaveTimer_SetConfig+0x66>
 8005822:	d90b      	bls.n	800583c <TIM_SlaveTimer_SetConfig+0x38>
 8005824:	2b60      	cmp	r3, #96	; 0x60
 8005826:	d027      	beq.n	8005878 <TIM_SlaveTimer_SetConfig+0x74>
 8005828:	2b70      	cmp	r3, #112	; 0x70
 800582a:	d12c      	bne.n	8005886 <TIM_SlaveTimer_SetConfig+0x82>
      TIM_ETR_SetConfig(htim->Instance,
 800582c:	690b      	ldr	r3, [r1, #16]
 800582e:	688a      	ldr	r2, [r1, #8]
 8005830:	68c9      	ldr	r1, [r1, #12]
 8005832:	6800      	ldr	r0, [r0, #0]
 8005834:	f7ff ff6d 	bl	8005712 <TIM_ETR_SetConfig>
  return HAL_OK;
 8005838:	2000      	movs	r0, #0
}
 800583a:	bd10      	pop	{r4, pc}
  switch (sSlaveConfig->InputTrigger)
 800583c:	2b40      	cmp	r3, #64	; 0x40
 800583e:	d122      	bne.n	8005886 <TIM_SlaveTimer_SetConfig+0x82>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005840:	680b      	ldr	r3, [r1, #0]
 8005842:	2b05      	cmp	r3, #5
 8005844:	d021      	beq.n	800588a <TIM_SlaveTimer_SetConfig+0x86>
      tmpccer = htim->Instance->CCER;
 8005846:	6803      	ldr	r3, [r0, #0]
 8005848:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800584a:	6a1a      	ldr	r2, [r3, #32]
 800584c:	f022 0201 	bic.w	r2, r2, #1
 8005850:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005852:	6802      	ldr	r2, [r0, #0]
 8005854:	6993      	ldr	r3, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800585a:	6909      	ldr	r1, [r1, #16]
 800585c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8005860:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8005862:	6803      	ldr	r3, [r0, #0]
 8005864:	621c      	str	r4, [r3, #32]
  return HAL_OK;
 8005866:	2000      	movs	r0, #0
      break;
 8005868:	e7e7      	b.n	800583a <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800586a:	690a      	ldr	r2, [r1, #16]
 800586c:	6889      	ldr	r1, [r1, #8]
 800586e:	6800      	ldr	r0, [r0, #0]
 8005870:	f7ff fce6 	bl	8005240 <TIM_TI1_ConfigInputStage>
  return HAL_OK;
 8005874:	2000      	movs	r0, #0
      break;
 8005876:	e7e0      	b.n	800583a <TIM_SlaveTimer_SetConfig+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005878:	690a      	ldr	r2, [r1, #16]
 800587a:	6889      	ldr	r1, [r1, #8]
 800587c:	6800      	ldr	r0, [r0, #0]
 800587e:	f7ff fcf2 	bl	8005266 <TIM_TI2_ConfigInputStage>
  return HAL_OK;
 8005882:	2000      	movs	r0, #0
      break;
 8005884:	e7d9      	b.n	800583a <TIM_SlaveTimer_SetConfig+0x36>
  return HAL_OK;
 8005886:	2000      	movs	r0, #0
 8005888:	e7d7      	b.n	800583a <TIM_SlaveTimer_SetConfig+0x36>
        return HAL_ERROR;
 800588a:	2001      	movs	r0, #1
 800588c:	e7d5      	b.n	800583a <TIM_SlaveTimer_SetConfig+0x36>

0800588e <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 800588e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005892:	2b01      	cmp	r3, #1
 8005894:	d024      	beq.n	80058e0 <HAL_TIM_SlaveConfigSynchro+0x52>
{
 8005896:	b510      	push	{r4, lr}
 8005898:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800589a:	2301      	movs	r3, #1
 800589c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80058a0:	2302      	movs	r3, #2
 80058a2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80058a6:	f7ff ffad 	bl	8005804 <TIM_SlaveTimer_SetConfig>
 80058aa:	4603      	mov	r3, r0
 80058ac:	b988      	cbnz	r0, 80058d2 <HAL_TIM_SlaveConfigSynchro+0x44>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80058ae:	6821      	ldr	r1, [r4, #0]
 80058b0:	68ca      	ldr	r2, [r1, #12]
 80058b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b6:	60ca      	str	r2, [r1, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80058b8:	6821      	ldr	r1, [r4, #0]
 80058ba:	68ca      	ldr	r2, [r1, #12]
 80058bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058c0:	60ca      	str	r2, [r1, #12]
  htim->State = HAL_TIM_STATE_READY;
 80058c2:	2201      	movs	r2, #1
 80058c4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80058c8:	2200      	movs	r2, #0
 80058ca:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	bd10      	pop	{r4, pc}
      htim->State = HAL_TIM_STATE_READY;
 80058d2:	2301      	movs	r3, #1
 80058d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80058d8:	2200      	movs	r2, #0
 80058da:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80058de:	e7f6      	b.n	80058ce <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_LOCK(htim);
 80058e0:	2302      	movs	r3, #2
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	4770      	bx	lr

080058e6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058e6:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058e8:	f001 011f 	and.w	r1, r1, #31
 80058ec:	2301      	movs	r3, #1
 80058ee:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058f2:	6a03      	ldr	r3, [r0, #32]
 80058f4:	ea23 0304 	bic.w	r3, r3, r4
 80058f8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058fa:	6a03      	ldr	r3, [r0, #32]
 80058fc:	408a      	lsls	r2, r1
 80058fe:	4313      	orrs	r3, r2
 8005900:	6203      	str	r3, [r0, #32]
}
 8005902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_TIM_OC_Start_IT>:
{
 8005908:	b510      	push	{r4, lr}
 800590a:	4604      	mov	r4, r0
  switch (Channel)
 800590c:	290c      	cmp	r1, #12
 800590e:	d80d      	bhi.n	800592c <HAL_TIM_OC_Start_IT+0x24>
 8005910:	e8df f001 	tbb	[pc, r1]
 8005914:	0c0c0c07 	.word	0x0c0c0c07
 8005918:	0c0c0c20 	.word	0x0c0c0c20
 800591c:	0c0c0c26 	.word	0x0c0c0c26
 8005920:	2c          	.byte	0x2c
 8005921:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005922:	6802      	ldr	r2, [r0, #0]
 8005924:	68d3      	ldr	r3, [r2, #12]
 8005926:	f043 0302 	orr.w	r3, r3, #2
 800592a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800592c:	2201      	movs	r2, #1
 800592e:	6820      	ldr	r0, [r4, #0]
 8005930:	f7ff ffd9 	bl	80058e6 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	4a13      	ldr	r2, [pc, #76]	; (8005984 <HAL_TIM_OC_Start_IT+0x7c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d01d      	beq.n	8005978 <HAL_TIM_OC_Start_IT+0x70>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800593c:	6822      	ldr	r2, [r4, #0]
 800593e:	6893      	ldr	r3, [r2, #8]
 8005940:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005944:	2b06      	cmp	r3, #6
 8005946:	d003      	beq.n	8005950 <HAL_TIM_OC_Start_IT+0x48>
    __HAL_TIM_ENABLE(htim);
 8005948:	6813      	ldr	r3, [r2, #0]
 800594a:	f043 0301 	orr.w	r3, r3, #1
 800594e:	6013      	str	r3, [r2, #0]
}
 8005950:	2000      	movs	r0, #0
 8005952:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005954:	6802      	ldr	r2, [r0, #0]
 8005956:	68d3      	ldr	r3, [r2, #12]
 8005958:	f043 0304 	orr.w	r3, r3, #4
 800595c:	60d3      	str	r3, [r2, #12]
      break;
 800595e:	e7e5      	b.n	800592c <HAL_TIM_OC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005960:	6802      	ldr	r2, [r0, #0]
 8005962:	68d3      	ldr	r3, [r2, #12]
 8005964:	f043 0308 	orr.w	r3, r3, #8
 8005968:	60d3      	str	r3, [r2, #12]
      break;
 800596a:	e7df      	b.n	800592c <HAL_TIM_OC_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800596c:	6802      	ldr	r2, [r0, #0]
 800596e:	68d3      	ldr	r3, [r2, #12]
 8005970:	f043 0310 	orr.w	r3, r3, #16
 8005974:	60d3      	str	r3, [r2, #12]
      break;
 8005976:	e7d9      	b.n	800592c <HAL_TIM_OC_Start_IT+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8005978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800597a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800597e:	645a      	str	r2, [r3, #68]	; 0x44
 8005980:	e7dc      	b.n	800593c <HAL_TIM_OC_Start_IT+0x34>
 8005982:	bf00      	nop
 8005984:	40010000 	.word	0x40010000

08005988 <HAL_TIM_PWM_Start_IT>:
{
 8005988:	b510      	push	{r4, lr}
 800598a:	4604      	mov	r4, r0
  switch (Channel)
 800598c:	290c      	cmp	r1, #12
 800598e:	d80d      	bhi.n	80059ac <HAL_TIM_PWM_Start_IT+0x24>
 8005990:	e8df f001 	tbb	[pc, r1]
 8005994:	0c0c0c07 	.word	0x0c0c0c07
 8005998:	0c0c0c20 	.word	0x0c0c0c20
 800599c:	0c0c0c26 	.word	0x0c0c0c26
 80059a0:	2c          	.byte	0x2c
 80059a1:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80059a2:	6802      	ldr	r2, [r0, #0]
 80059a4:	68d3      	ldr	r3, [r2, #12]
 80059a6:	f043 0302 	orr.w	r3, r3, #2
 80059aa:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059ac:	2201      	movs	r2, #1
 80059ae:	6820      	ldr	r0, [r4, #0]
 80059b0:	f7ff ff99 	bl	80058e6 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	4a13      	ldr	r2, [pc, #76]	; (8005a04 <HAL_TIM_PWM_Start_IT+0x7c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d01d      	beq.n	80059f8 <HAL_TIM_PWM_Start_IT+0x70>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059bc:	6822      	ldr	r2, [r4, #0]
 80059be:	6893      	ldr	r3, [r2, #8]
 80059c0:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c4:	2b06      	cmp	r3, #6
 80059c6:	d003      	beq.n	80059d0 <HAL_TIM_PWM_Start_IT+0x48>
    __HAL_TIM_ENABLE(htim);
 80059c8:	6813      	ldr	r3, [r2, #0]
 80059ca:	f043 0301 	orr.w	r3, r3, #1
 80059ce:	6013      	str	r3, [r2, #0]
}
 80059d0:	2000      	movs	r0, #0
 80059d2:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80059d4:	6802      	ldr	r2, [r0, #0]
 80059d6:	68d3      	ldr	r3, [r2, #12]
 80059d8:	f043 0304 	orr.w	r3, r3, #4
 80059dc:	60d3      	str	r3, [r2, #12]
      break;
 80059de:	e7e5      	b.n	80059ac <HAL_TIM_PWM_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80059e0:	6802      	ldr	r2, [r0, #0]
 80059e2:	68d3      	ldr	r3, [r2, #12]
 80059e4:	f043 0308 	orr.w	r3, r3, #8
 80059e8:	60d3      	str	r3, [r2, #12]
      break;
 80059ea:	e7df      	b.n	80059ac <HAL_TIM_PWM_Start_IT+0x24>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80059ec:	6802      	ldr	r2, [r0, #0]
 80059ee:	68d3      	ldr	r3, [r2, #12]
 80059f0:	f043 0310 	orr.w	r3, r3, #16
 80059f4:	60d3      	str	r3, [r2, #12]
      break;
 80059f6:	e7d9      	b.n	80059ac <HAL_TIM_PWM_Start_IT+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80059f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059fe:	645a      	str	r2, [r3, #68]	; 0x44
 8005a00:	e7dc      	b.n	80059bc <HAL_TIM_PWM_Start_IT+0x34>
 8005a02:	bf00      	nop
 8005a04:	40010000 	.word	0x40010000

08005a08 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a08:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d01c      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8005a10:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8005a12:	2601      	movs	r6, #1
 8005a14:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a18:	2302      	movs	r3, #2
 8005a1a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a1e:	6802      	ldr	r2, [r0, #0]
 8005a20:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a22:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a24:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a28:	680c      	ldr	r4, [r1, #0]
 8005a2a:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005a2c:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a30:	684b      	ldr	r3, [r1, #4]
 8005a32:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a34:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a36:	6802      	ldr	r2, [r0, #0]
 8005a38:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a3a:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8005a44:	4618      	mov	r0, r3
}
 8005a46:	bc70      	pop	{r4, r5, r6}
 8005a48:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005a4a:	2002      	movs	r0, #2
}
 8005a4c:	4770      	bx	lr

08005a4e <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a4e:	4770      	bx	lr

08005a50 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a50:	4770      	bx	lr

08005a52 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a52:	6802      	ldr	r2, [r0, #0]
 8005a54:	68d3      	ldr	r3, [r2, #12]
 8005a56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a5a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5c:	6802      	ldr	r2, [r0, #0]
 8005a5e:	6953      	ldr	r3, [r2, #20]
 8005a60:	f023 0301 	bic.w	r3, r3, #1
 8005a64:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a66:	2320      	movs	r3, #32
 8005a68:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8005a6c:	4770      	bx	lr

08005a6e <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a6e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b21      	cmp	r3, #33	; 0x21
 8005a76:	d12a      	bne.n	8005ace <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a78:	6883      	ldr	r3, [r0, #8]
 8005a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7e:	d016      	beq.n	8005aae <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a80:	6a03      	ldr	r3, [r0, #32]
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	6202      	str	r2, [r0, #32]
 8005a86:	781a      	ldrb	r2, [r3, #0]
 8005a88:	6803      	ldr	r3, [r0, #0]
 8005a8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a8c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	84c3      	strh	r3, [r0, #38]	; 0x26
 8005a94:	b9eb      	cbnz	r3, 8005ad2 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a96:	6802      	ldr	r2, [r0, #0]
 8005a98:	68d3      	ldr	r3, [r2, #12]
 8005a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a9e:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005aa0:	6802      	ldr	r2, [r0, #0]
 8005aa2:	68d3      	ldr	r3, [r2, #12]
 8005aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aa8:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8005aaa:	2000      	movs	r0, #0
 8005aac:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005aae:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ab0:	881b      	ldrh	r3, [r3, #0]
 8005ab2:	6802      	ldr	r2, [r0, #0]
 8005ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab8:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005aba:	6903      	ldr	r3, [r0, #16]
 8005abc:	b91b      	cbnz	r3, 8005ac6 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8005abe:	6a03      	ldr	r3, [r0, #32]
 8005ac0:	3302      	adds	r3, #2
 8005ac2:	6203      	str	r3, [r0, #32]
 8005ac4:	e7e2      	b.n	8005a8c <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8005ac6:	6a03      	ldr	r3, [r0, #32]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	6203      	str	r3, [r0, #32]
 8005acc:	e7de      	b.n	8005a8c <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8005ace:	2002      	movs	r0, #2
 8005ad0:	4770      	bx	lr
    return HAL_OK;
 8005ad2:	2000      	movs	r0, #0
  }
}
 8005ad4:	4770      	bx	lr
	...

08005ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005adc:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ade:	6802      	ldr	r2, [r0, #0]
 8005ae0:	6913      	ldr	r3, [r2, #16]
 8005ae2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005ae6:	68c1      	ldr	r1, [r0, #12]
 8005ae8:	430b      	orrs	r3, r1
 8005aea:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aec:	6883      	ldr	r3, [r0, #8]
 8005aee:	6902      	ldr	r2, [r0, #16]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	6942      	ldr	r2, [r0, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	69c2      	ldr	r2, [r0, #28]
 8005af8:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8005afa:	6801      	ldr	r1, [r0, #0]
 8005afc:	68cb      	ldr	r3, [r1, #12]
 8005afe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005b02:	f023 030c 	bic.w	r3, r3, #12
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b0a:	6802      	ldr	r2, [r0, #0]
 8005b0c:	6953      	ldr	r3, [r2, #20]
 8005b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b12:	6981      	ldr	r1, [r0, #24]
 8005b14:	430b      	orrs	r3, r1
 8005b16:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b18:	69c3      	ldr	r3, [r0, #28]
 8005b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b1e:	d060      	beq.n	8005be2 <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b20:	6803      	ldr	r3, [r0, #0]
 8005b22:	4ab8      	ldr	r2, [pc, #736]	; (8005e04 <UART_SetConfig+0x32c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	f000 8114 	beq.w	8005d52 <UART_SetConfig+0x27a>
 8005b2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	f000 810f 	beq.w	8005d52 <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005b34:	f7ff faa0 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 8005b38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b40:	6865      	ldr	r5, [r4, #4]
 8005b42:	00ad      	lsls	r5, r5, #2
 8005b44:	fbb0 f5f5 	udiv	r5, r0, r5
 8005b48:	4faf      	ldr	r7, [pc, #700]	; (8005e08 <UART_SetConfig+0x330>)
 8005b4a:	fba7 3505 	umull	r3, r5, r7, r5
 8005b4e:	096d      	lsrs	r5, r5, #5
 8005b50:	012e      	lsls	r6, r5, #4
 8005b52:	f7ff fa91 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 8005b56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b5e:	6865      	ldr	r5, [r4, #4]
 8005b60:	00ad      	lsls	r5, r5, #2
 8005b62:	fbb0 f9f5 	udiv	r9, r0, r5
 8005b66:	f7ff fa87 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 8005b6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b72:	6865      	ldr	r5, [r4, #4]
 8005b74:	00ad      	lsls	r5, r5, #2
 8005b76:	fbb0 f5f5 	udiv	r5, r0, r5
 8005b7a:	fba7 3505 	umull	r3, r5, r7, r5
 8005b7e:	096d      	lsrs	r5, r5, #5
 8005b80:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005b84:	fb08 9515 	mls	r5, r8, r5, r9
 8005b88:	012d      	lsls	r5, r5, #4
 8005b8a:	3532      	adds	r5, #50	; 0x32
 8005b8c:	fba7 3505 	umull	r3, r5, r7, r5
 8005b90:	096d      	lsrs	r5, r5, #5
 8005b92:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8005b96:	4435      	add	r5, r6
 8005b98:	f7ff fa6e 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 8005b9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ba0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ba4:	6866      	ldr	r6, [r4, #4]
 8005ba6:	00b6      	lsls	r6, r6, #2
 8005ba8:	fbb0 f6f6 	udiv	r6, r0, r6
 8005bac:	f7ff fa64 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 8005bb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bb8:	6863      	ldr	r3, [r4, #4]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	fbb0 f0f3 	udiv	r0, r0, r3
 8005bc0:	fba7 3000 	umull	r3, r0, r7, r0
 8005bc4:	0940      	lsrs	r0, r0, #5
 8005bc6:	fb08 6810 	mls	r8, r8, r0, r6
 8005bca:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8005bce:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005bd2:	fba7 3708 	umull	r3, r7, r7, r8
 8005bd6:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	442f      	add	r7, r5
 8005bde:	609f      	str	r7, [r3, #8]
    }
  }
}
 8005be0:	e10d      	b.n	8005dfe <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005be2:	6803      	ldr	r3, [r0, #0]
 8005be4:	4a87      	ldr	r2, [pc, #540]	; (8005e04 <UART_SetConfig+0x32c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d05b      	beq.n	8005ca2 <UART_SetConfig+0x1ca>
 8005bea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d057      	beq.n	8005ca2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005bf2:	f7ff fa41 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 8005bf6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bfa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bfe:	6865      	ldr	r5, [r4, #4]
 8005c00:	006d      	lsls	r5, r5, #1
 8005c02:	fbb0 f5f5 	udiv	r5, r0, r5
 8005c06:	4f80      	ldr	r7, [pc, #512]	; (8005e08 <UART_SetConfig+0x330>)
 8005c08:	fba7 3505 	umull	r3, r5, r7, r5
 8005c0c:	096d      	lsrs	r5, r5, #5
 8005c0e:	012e      	lsls	r6, r5, #4
 8005c10:	f7ff fa32 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 8005c14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c1c:	6865      	ldr	r5, [r4, #4]
 8005c1e:	006d      	lsls	r5, r5, #1
 8005c20:	fbb0 f9f5 	udiv	r9, r0, r5
 8005c24:	f7ff fa28 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 8005c28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c30:	6865      	ldr	r5, [r4, #4]
 8005c32:	006d      	lsls	r5, r5, #1
 8005c34:	fbb0 f5f5 	udiv	r5, r0, r5
 8005c38:	fba7 3505 	umull	r3, r5, r7, r5
 8005c3c:	096d      	lsrs	r5, r5, #5
 8005c3e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005c42:	fb08 9515 	mls	r5, r8, r5, r9
 8005c46:	00ed      	lsls	r5, r5, #3
 8005c48:	3532      	adds	r5, #50	; 0x32
 8005c4a:	fba7 3505 	umull	r3, r5, r7, r5
 8005c4e:	096d      	lsrs	r5, r5, #5
 8005c50:	006d      	lsls	r5, r5, #1
 8005c52:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8005c56:	4435      	add	r5, r6
 8005c58:	f7ff fa0e 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 8005c5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c64:	6866      	ldr	r6, [r4, #4]
 8005c66:	0076      	lsls	r6, r6, #1
 8005c68:	fbb0 f6f6 	udiv	r6, r0, r6
 8005c6c:	f7ff fa04 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 8005c70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c78:	6863      	ldr	r3, [r4, #4]
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c80:	fba7 2303 	umull	r2, r3, r7, r3
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	fb08 6813 	mls	r8, r8, r3, r6
 8005c8a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8005c8e:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005c92:	fba7 3708 	umull	r3, r7, r7, r8
 8005c96:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	442f      	add	r7, r5
 8005c9e:	609f      	str	r7, [r3, #8]
 8005ca0:	e0ad      	b.n	8005dfe <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005ca2:	f7ff f9f9 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 8005ca6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005caa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005cae:	6865      	ldr	r5, [r4, #4]
 8005cb0:	006d      	lsls	r5, r5, #1
 8005cb2:	fbb0 f5f5 	udiv	r5, r0, r5
 8005cb6:	4f54      	ldr	r7, [pc, #336]	; (8005e08 <UART_SetConfig+0x330>)
 8005cb8:	fba7 3505 	umull	r3, r5, r7, r5
 8005cbc:	096d      	lsrs	r5, r5, #5
 8005cbe:	012e      	lsls	r6, r5, #4
 8005cc0:	f7ff f9ea 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 8005cc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005cc8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ccc:	6865      	ldr	r5, [r4, #4]
 8005cce:	006d      	lsls	r5, r5, #1
 8005cd0:	fbb0 f9f5 	udiv	r9, r0, r5
 8005cd4:	f7ff f9e0 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 8005cd8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005cdc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005ce0:	6865      	ldr	r5, [r4, #4]
 8005ce2:	006d      	lsls	r5, r5, #1
 8005ce4:	fbb0 f5f5 	udiv	r5, r0, r5
 8005ce8:	fba7 3505 	umull	r3, r5, r7, r5
 8005cec:	096d      	lsrs	r5, r5, #5
 8005cee:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005cf2:	fb08 9515 	mls	r5, r8, r5, r9
 8005cf6:	00ed      	lsls	r5, r5, #3
 8005cf8:	3532      	adds	r5, #50	; 0x32
 8005cfa:	fba7 3505 	umull	r3, r5, r7, r5
 8005cfe:	096d      	lsrs	r5, r5, #5
 8005d00:	006d      	lsls	r5, r5, #1
 8005d02:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8005d06:	4435      	add	r5, r6
 8005d08:	f7ff f9c6 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 8005d0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d14:	6866      	ldr	r6, [r4, #4]
 8005d16:	0076      	lsls	r6, r6, #1
 8005d18:	fbb0 f6f6 	udiv	r6, r0, r6
 8005d1c:	f7ff f9bc 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 8005d20:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d28:	6863      	ldr	r3, [r4, #4]
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d30:	fba7 2303 	umull	r2, r3, r7, r3
 8005d34:	095b      	lsrs	r3, r3, #5
 8005d36:	fb08 6813 	mls	r8, r8, r3, r6
 8005d3a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8005d3e:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005d42:	fba7 3708 	umull	r3, r7, r7, r8
 8005d46:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	442f      	add	r7, r5
 8005d4e:	609f      	str	r7, [r3, #8]
 8005d50:	e055      	b.n	8005dfe <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005d52:	f7ff f9a1 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 8005d56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d5e:	6865      	ldr	r5, [r4, #4]
 8005d60:	00ad      	lsls	r5, r5, #2
 8005d62:	fbb0 f5f5 	udiv	r5, r0, r5
 8005d66:	4f28      	ldr	r7, [pc, #160]	; (8005e08 <UART_SetConfig+0x330>)
 8005d68:	fba7 3505 	umull	r3, r5, r7, r5
 8005d6c:	096d      	lsrs	r5, r5, #5
 8005d6e:	012e      	lsls	r6, r5, #4
 8005d70:	f7ff f992 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 8005d74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d7c:	6865      	ldr	r5, [r4, #4]
 8005d7e:	00ad      	lsls	r5, r5, #2
 8005d80:	fbb0 f9f5 	udiv	r9, r0, r5
 8005d84:	f7ff f988 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 8005d88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d90:	6865      	ldr	r5, [r4, #4]
 8005d92:	00ad      	lsls	r5, r5, #2
 8005d94:	fbb0 f5f5 	udiv	r5, r0, r5
 8005d98:	fba7 3505 	umull	r3, r5, r7, r5
 8005d9c:	096d      	lsrs	r5, r5, #5
 8005d9e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8005da2:	fb08 9515 	mls	r5, r8, r5, r9
 8005da6:	012d      	lsls	r5, r5, #4
 8005da8:	3532      	adds	r5, #50	; 0x32
 8005daa:	fba7 3505 	umull	r3, r5, r7, r5
 8005dae:	096d      	lsrs	r5, r5, #5
 8005db0:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8005db4:	4435      	add	r5, r6
 8005db6:	f7ff f96f 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 8005dba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005dbe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005dc2:	6866      	ldr	r6, [r4, #4]
 8005dc4:	00b6      	lsls	r6, r6, #2
 8005dc6:	fbb0 f6f6 	udiv	r6, r0, r6
 8005dca:	f7ff f965 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 8005dce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005dd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005dd6:	6863      	ldr	r3, [r4, #4]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	fbb0 f0f3 	udiv	r0, r0, r3
 8005dde:	fba7 3000 	umull	r3, r0, r7, r0
 8005de2:	0940      	lsrs	r0, r0, #5
 8005de4:	fb08 6810 	mls	r8, r8, r0, r6
 8005de8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8005dec:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8005df0:	fba7 3708 	umull	r3, r7, r7, r8
 8005df4:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	442f      	add	r7, r5
 8005dfc:	609f      	str	r7, [r3, #8]
}
 8005dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e02:	bf00      	nop
 8005e04:	40011000 	.word	0x40011000
 8005e08:	51eb851f 	.word	0x51eb851f

08005e0c <UART_WaitOnFlagUntilTimeout>:
{
 8005e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e10:	4605      	mov	r5, r0
 8005e12:	460f      	mov	r7, r1
 8005e14:	4616      	mov	r6, r2
 8005e16:	4698      	mov	r8, r3
 8005e18:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e1a:	682b      	ldr	r3, [r5, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	ea37 0303 	bics.w	r3, r7, r3
 8005e22:	bf0c      	ite	eq
 8005e24:	2301      	moveq	r3, #1
 8005e26:	2300      	movne	r3, #0
 8005e28:	42b3      	cmp	r3, r6
 8005e2a:	d11d      	bne.n	8005e68 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8005e2c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8005e30:	d0f3      	beq.n	8005e1a <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e32:	b12c      	cbz	r4, 8005e40 <UART_WaitOnFlagUntilTimeout+0x34>
 8005e34:	f7fc fdc4 	bl	80029c0 <HAL_GetTick>
 8005e38:	eba0 0008 	sub.w	r0, r0, r8
 8005e3c:	42a0      	cmp	r0, r4
 8005e3e:	d9ec      	bls.n	8005e1a <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e40:	682a      	ldr	r2, [r5, #0]
 8005e42:	68d3      	ldr	r3, [r2, #12]
 8005e44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e48:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4a:	682a      	ldr	r2, [r5, #0]
 8005e4c:	6953      	ldr	r3, [r2, #20]
 8005e4e:	f023 0301 	bic.w	r3, r3, #1
 8005e52:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8005e54:	2320      	movs	r3, #32
 8005e56:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005e5a:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8005e5e:	2300      	movs	r3, #0
 8005e60:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8005e64:	2003      	movs	r0, #3
 8005e66:	e000      	b.n	8005e6a <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8005e68:	2000      	movs	r0, #0
}
 8005e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e6e <HAL_UART_Init>:
  if (huart == NULL)
 8005e6e:	b358      	cbz	r0, 8005ec8 <HAL_UART_Init+0x5a>
{
 8005e70:	b510      	push	{r4, lr}
 8005e72:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005e74:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005e78:	b30b      	cbz	r3, 8005ebe <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005e7a:	2324      	movs	r3, #36	; 0x24
 8005e7c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005e80:	6822      	ldr	r2, [r4, #0]
 8005e82:	68d3      	ldr	r3, [r2, #12]
 8005e84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e88:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f7ff fe24 	bl	8005ad8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e90:	6822      	ldr	r2, [r4, #0]
 8005e92:	6913      	ldr	r3, [r2, #16]
 8005e94:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8005e98:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e9a:	6822      	ldr	r2, [r4, #0]
 8005e9c:	6953      	ldr	r3, [r2, #20]
 8005e9e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005ea2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8005ea4:	6822      	ldr	r2, [r4, #0]
 8005ea6:	68d3      	ldr	r3, [r2, #12]
 8005ea8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005eac:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eae:	2000      	movs	r0, #0
 8005eb0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005eb2:	2320      	movs	r3, #32
 8005eb4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005eb8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8005ebc:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005ebe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8005ec2:	f000 ff0d 	bl	8006ce0 <HAL_UART_MspInit>
 8005ec6:	e7d8      	b.n	8005e7a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8005ec8:	2001      	movs	r0, #1
}
 8005eca:	4770      	bx	lr

08005ecc <HAL_UART_Transmit>:
{
 8005ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed0:	b082      	sub	sp, #8
 8005ed2:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005ed4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	d155      	bne.n	8005f8a <HAL_UART_Transmit+0xbe>
 8005ede:	4604      	mov	r4, r0
 8005ee0:	460d      	mov	r5, r1
 8005ee2:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8005ee4:	2900      	cmp	r1, #0
 8005ee6:	d055      	beq.n	8005f94 <HAL_UART_Transmit+0xc8>
 8005ee8:	2a00      	cmp	r2, #0
 8005eea:	d055      	beq.n	8005f98 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8005eec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d053      	beq.n	8005f9c <HAL_UART_Transmit+0xd0>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efa:	2300      	movs	r3, #0
 8005efc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005efe:	2321      	movs	r3, #33	; 0x21
 8005f00:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8005f04:	f7fc fd5c 	bl	80029c0 <HAL_GetTick>
 8005f08:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8005f0a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f0e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f12:	e010      	b.n	8005f36 <HAL_UART_Transmit+0x6a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f14:	9600      	str	r6, [sp, #0]
 8005f16:	463b      	mov	r3, r7
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2180      	movs	r1, #128	; 0x80
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f7ff ff75 	bl	8005e0c <UART_WaitOnFlagUntilTimeout>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	d13c      	bne.n	8005fa0 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005f26:	882b      	ldrh	r3, [r5, #0]
 8005f28:	6822      	ldr	r2, [r4, #0]
 8005f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2e:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005f30:	6923      	ldr	r3, [r4, #16]
 8005f32:	b9c3      	cbnz	r3, 8005f66 <HAL_UART_Transmit+0x9a>
          pData += 2U;
 8005f34:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8005f36:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	b1b3      	cbz	r3, 8005f6a <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 8005f3c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f44:	68a3      	ldr	r3, [r4, #8]
 8005f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f4a:	d0e3      	beq.n	8005f14 <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f4c:	9600      	str	r6, [sp, #0]
 8005f4e:	463b      	mov	r3, r7
 8005f50:	2200      	movs	r2, #0
 8005f52:	2180      	movs	r1, #128	; 0x80
 8005f54:	4620      	mov	r0, r4
 8005f56:	f7ff ff59 	bl	8005e0c <UART_WaitOnFlagUntilTimeout>
 8005f5a:	bb18      	cbnz	r0, 8005fa4 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005f5c:	782a      	ldrb	r2, [r5, #0]
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	605a      	str	r2, [r3, #4]
 8005f62:	3501      	adds	r5, #1
 8005f64:	e7e7      	b.n	8005f36 <HAL_UART_Transmit+0x6a>
          pData += 1U;
 8005f66:	3501      	adds	r5, #1
 8005f68:	e7e5      	b.n	8005f36 <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f6a:	9600      	str	r6, [sp, #0]
 8005f6c:	463b      	mov	r3, r7
 8005f6e:	2200      	movs	r2, #0
 8005f70:	2140      	movs	r1, #64	; 0x40
 8005f72:	4620      	mov	r0, r4
 8005f74:	f7ff ff4a 	bl	8005e0c <UART_WaitOnFlagUntilTimeout>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	b9a8      	cbnz	r0, 8005fa8 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8005f82:	2200      	movs	r2, #0
 8005f84:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8005f88:	e000      	b.n	8005f8c <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8005f8a:	2302      	movs	r3, #2
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	b002      	add	sp, #8
 8005f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e7f9      	b.n	8005f8c <HAL_UART_Transmit+0xc0>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e7f7      	b.n	8005f8c <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e7f5      	b.n	8005f8c <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e7f3      	b.n	8005f8c <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e7f1      	b.n	8005f8c <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e7ef      	b.n	8005f8c <HAL_UART_Transmit+0xc0>

08005fac <HAL_UART_TxCpltCallback>:
}
 8005fac:	4770      	bx	lr

08005fae <UART_EndTransmit_IT>:
{
 8005fae:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fb0:	6801      	ldr	r1, [r0, #0]
 8005fb2:	68cb      	ldr	r3, [r1, #12]
 8005fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb8:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005fba:	2320      	movs	r3, #32
 8005fbc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8005fc0:	f7ff fff4 	bl	8005fac <HAL_UART_TxCpltCallback>
}
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	bd08      	pop	{r3, pc}

08005fc8 <HAL_UART_RxCpltCallback>:
}
 8005fc8:	4770      	bx	lr

08005fca <UART_Receive_IT>:
{
 8005fca:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fcc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b22      	cmp	r3, #34	; 0x22
 8005fd4:	d145      	bne.n	8006062 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005fd6:	6883      	ldr	r3, [r0, #8]
 8005fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fdc:	d00e      	beq.n	8005ffc <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005fde:	6903      	ldr	r3, [r0, #16]
 8005fe0:	bb03      	cbnz	r3, 8006024 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fe2:	6803      	ldr	r3, [r0, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005fe8:	1c59      	adds	r1, r3, #1
 8005fea:	6281      	str	r1, [r0, #40]	; 0x28
 8005fec:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8005fee:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8005ff6:	b1f3      	cbz	r3, 8006036 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	e033      	b.n	8006064 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005ffc:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005ffe:	6903      	ldr	r3, [r0, #16]
 8006000:	b943      	cbnz	r3, 8006014 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006002:	6803      	ldr	r3, [r0, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600a:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 800600c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800600e:	3302      	adds	r3, #2
 8006010:	6283      	str	r3, [r0, #40]	; 0x28
 8006012:	e7ec      	b.n	8005fee <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006014:	6803      	ldr	r3, [r0, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	b2db      	uxtb	r3, r3
 800601a:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 800601c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800601e:	3301      	adds	r3, #1
 8006020:	6283      	str	r3, [r0, #40]	; 0x28
 8006022:	e7e4      	b.n	8005fee <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006024:	6803      	ldr	r3, [r0, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800602a:	1c51      	adds	r1, r2, #1
 800602c:	6281      	str	r1, [r0, #40]	; 0x28
 800602e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006032:	7013      	strb	r3, [r2, #0]
 8006034:	e7db      	b.n	8005fee <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006036:	6802      	ldr	r2, [r0, #0]
 8006038:	68d3      	ldr	r3, [r2, #12]
 800603a:	f023 0320 	bic.w	r3, r3, #32
 800603e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006040:	6802      	ldr	r2, [r0, #0]
 8006042:	68d3      	ldr	r3, [r2, #12]
 8006044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006048:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800604a:	6802      	ldr	r2, [r0, #0]
 800604c:	6953      	ldr	r3, [r2, #20]
 800604e:	f023 0301 	bic.w	r3, r3, #1
 8006052:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8006054:	2320      	movs	r3, #32
 8006056:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800605a:	f7ff ffb5 	bl	8005fc8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 800605e:	2000      	movs	r0, #0
 8006060:	e000      	b.n	8006064 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8006062:	2002      	movs	r0, #2
}
 8006064:	bd08      	pop	{r3, pc}

08006066 <HAL_UART_ErrorCallback>:
}
 8006066:	4770      	bx	lr

08006068 <HAL_UART_IRQHandler>:
{
 8006068:	b510      	push	{r4, lr}
 800606a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800606c:	6802      	ldr	r2, [r0, #0]
 800606e:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006070:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006072:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8006074:	f013 000f 	ands.w	r0, r3, #15
 8006078:	d105      	bne.n	8006086 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800607a:	f013 0f20 	tst.w	r3, #32
 800607e:	d002      	beq.n	8006086 <HAL_UART_IRQHandler+0x1e>
 8006080:	f011 0f20 	tst.w	r1, #32
 8006084:	d153      	bne.n	800612e <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006086:	2800      	cmp	r0, #0
 8006088:	d067      	beq.n	800615a <HAL_UART_IRQHandler+0xf2>
 800608a:	f012 0201 	ands.w	r2, r2, #1
 800608e:	d102      	bne.n	8006096 <HAL_UART_IRQHandler+0x2e>
 8006090:	f411 7f90 	tst.w	r1, #288	; 0x120
 8006094:	d061      	beq.n	800615a <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006096:	f013 0f01 	tst.w	r3, #1
 800609a:	d006      	beq.n	80060aa <HAL_UART_IRQHandler+0x42>
 800609c:	f411 7f80 	tst.w	r1, #256	; 0x100
 80060a0:	d003      	beq.n	80060aa <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060a2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80060a4:	f040 0001 	orr.w	r0, r0, #1
 80060a8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060aa:	f013 0f04 	tst.w	r3, #4
 80060ae:	d004      	beq.n	80060ba <HAL_UART_IRQHandler+0x52>
 80060b0:	b11a      	cbz	r2, 80060ba <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80060b4:	f040 0002 	orr.w	r0, r0, #2
 80060b8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060ba:	f013 0f02 	tst.w	r3, #2
 80060be:	d004      	beq.n	80060ca <HAL_UART_IRQHandler+0x62>
 80060c0:	b11a      	cbz	r2, 80060ca <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80060c4:	f040 0004 	orr.w	r0, r0, #4
 80060c8:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060ca:	f013 0f08 	tst.w	r3, #8
 80060ce:	d004      	beq.n	80060da <HAL_UART_IRQHandler+0x72>
 80060d0:	b11a      	cbz	r2, 80060da <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80060d4:	f042 0208 	orr.w	r2, r2, #8
 80060d8:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80060dc:	2a00      	cmp	r2, #0
 80060de:	d048      	beq.n	8006172 <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060e0:	f013 0f20 	tst.w	r3, #32
 80060e4:	d002      	beq.n	80060ec <HAL_UART_IRQHandler+0x84>
 80060e6:	f011 0f20 	tst.w	r1, #32
 80060ea:	d124      	bne.n	8006136 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060f4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80060f6:	f012 0f08 	tst.w	r2, #8
 80060fa:	d100      	bne.n	80060fe <HAL_UART_IRQHandler+0x96>
 80060fc:	b33b      	cbz	r3, 800614e <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 80060fe:	4620      	mov	r0, r4
 8006100:	f7ff fca7 	bl	8005a52 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	695a      	ldr	r2, [r3, #20]
 8006108:	f012 0f40 	tst.w	r2, #64	; 0x40
 800610c:	d01b      	beq.n	8006146 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800610e:	695a      	ldr	r2, [r3, #20]
 8006110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006114:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8006116:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006118:	b18b      	cbz	r3, 800613e <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800611a:	4a1a      	ldr	r2, [pc, #104]	; (8006184 <HAL_UART_IRQHandler+0x11c>)
 800611c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800611e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006120:	f7fc ff36 	bl	8002f90 <HAL_DMA_Abort_IT>
 8006124:	b328      	cbz	r0, 8006172 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006126:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006128:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800612a:	4798      	blx	r3
 800612c:	e021      	b.n	8006172 <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 800612e:	4620      	mov	r0, r4
 8006130:	f7ff ff4b 	bl	8005fca <UART_Receive_IT>
      return;
 8006134:	e01d      	b.n	8006172 <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 8006136:	4620      	mov	r0, r4
 8006138:	f7ff ff47 	bl	8005fca <UART_Receive_IT>
 800613c:	e7d6      	b.n	80060ec <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 800613e:	4620      	mov	r0, r4
 8006140:	f7ff ff91 	bl	8006066 <HAL_UART_ErrorCallback>
 8006144:	e015      	b.n	8006172 <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 8006146:	4620      	mov	r0, r4
 8006148:	f7ff ff8d 	bl	8006066 <HAL_UART_ErrorCallback>
 800614c:	e011      	b.n	8006172 <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 800614e:	4620      	mov	r0, r4
 8006150:	f7ff ff89 	bl	8006066 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006154:	2300      	movs	r3, #0
 8006156:	63e3      	str	r3, [r4, #60]	; 0x3c
 8006158:	e00b      	b.n	8006172 <HAL_UART_IRQHandler+0x10a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800615a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800615e:	d002      	beq.n	8006166 <HAL_UART_IRQHandler+0xfe>
 8006160:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006164:	d106      	bne.n	8006174 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006166:	f013 0f40 	tst.w	r3, #64	; 0x40
 800616a:	d002      	beq.n	8006172 <HAL_UART_IRQHandler+0x10a>
 800616c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006170:	d104      	bne.n	800617c <HAL_UART_IRQHandler+0x114>
}
 8006172:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8006174:	4620      	mov	r0, r4
 8006176:	f7ff fc7a 	bl	8005a6e <UART_Transmit_IT>
    return;
 800617a:	e7fa      	b.n	8006172 <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 800617c:	4620      	mov	r0, r4
 800617e:	f7ff ff16 	bl	8005fae <UART_EndTransmit_IT>
    return;
 8006182:	e7f6      	b.n	8006172 <HAL_UART_IRQHandler+0x10a>
 8006184:	08006189 	.word	0x08006189

08006188 <UART_DMAAbortOnError>:
{
 8006188:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800618a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800618c:	2300      	movs	r3, #0
 800618e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006190:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8006192:	f7ff ff68 	bl	8006066 <HAL_UART_ErrorCallback>
}
 8006196:	bd08      	pop	{r3, pc}

08006198 <arm_add_f32>:
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8006198:	e00b      	b.n	80061b2 <arm_add_f32+0x1a>
  {
    /* C = A + B */

    /* Add and store result in destination buffer. */
    *pDst++ = (*pSrcA++) + (*pSrcB++);
 800619a:	edd0 7a00 	vldr	s15, [r0]
 800619e:	ed91 7a00 	vldr	s14, [r1]
 80061a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061a6:	edc2 7a00 	vstr	s15, [r2]

    /* Decrement loop counter */
    blkCnt--;
 80061aa:	3b01      	subs	r3, #1
    *pDst++ = (*pSrcA++) + (*pSrcB++);
 80061ac:	3204      	adds	r2, #4
 80061ae:	3104      	adds	r1, #4
 80061b0:	3004      	adds	r0, #4
  while (blkCnt > 0U)
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1f1      	bne.n	800619a <arm_add_f32+0x2>
  }

}
 80061b6:	4770      	bx	lr

080061b8 <arm_mult_f32>:
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 80061b8:	e00b      	b.n	80061d2 <arm_mult_f32+0x1a>
  {
    /* C = A * B */

    /* Multiply input and store result in destination buffer. */
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 80061ba:	edd0 7a00 	vldr	s15, [r0]
 80061be:	ed91 7a00 	vldr	s14, [r1]
 80061c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061c6:	edc2 7a00 	vstr	s15, [r2]

    /* Decrement loop counter */
    blkCnt--;
 80061ca:	3b01      	subs	r3, #1
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 80061cc:	3204      	adds	r2, #4
 80061ce:	3104      	adds	r1, #4
 80061d0:	3004      	adds	r0, #4
  while (blkCnt > 0U)
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f1      	bne.n	80061ba <arm_mult_f32+0x2>
  }

}
 80061d6:	4770      	bx	lr

080061d8 <arm_sub_f32>:
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 80061d8:	e00b      	b.n	80061f2 <arm_sub_f32+0x1a>
  {
    /* C = A - B */

    /* Subtract and store result in destination buffer. */
    *pDst++ = (*pSrcA++) - (*pSrcB++);
 80061da:	edd0 7a00 	vldr	s15, [r0]
 80061de:	ed91 7a00 	vldr	s14, [r1]
 80061e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80061e6:	edc2 7a00 	vstr	s15, [r2]

    /* Decrement loop counter */
    blkCnt--;
 80061ea:	3b01      	subs	r3, #1
    *pDst++ = (*pSrcA++) - (*pSrcB++);
 80061ec:	3204      	adds	r2, #4
 80061ee:	3104      	adds	r1, #4
 80061f0:	3004      	adds	r0, #4
  while (blkCnt > 0U)
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1f1      	bne.n	80061da <arm_sub_f32+0x2>
  }

}
 80061f6:	4770      	bx	lr

080061f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80061f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061fc:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061fe:	2400      	movs	r4, #0
 8006200:	9405      	str	r4, [sp, #20]
 8006202:	9406      	str	r4, [sp, #24]
 8006204:	9407      	str	r4, [sp, #28]
 8006206:	9408      	str	r4, [sp, #32]
 8006208:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800620a:	9401      	str	r4, [sp, #4]
 800620c:	4b36      	ldr	r3, [pc, #216]	; (80062e8 <MX_GPIO_Init+0xf0>)
 800620e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006210:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006214:	631a      	str	r2, [r3, #48]	; 0x30
 8006216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006218:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800621c:	9201      	str	r2, [sp, #4]
 800621e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006220:	9402      	str	r4, [sp, #8]
 8006222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006224:	f042 0204 	orr.w	r2, r2, #4
 8006228:	631a      	str	r2, [r3, #48]	; 0x30
 800622a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800622c:	f002 0204 	and.w	r2, r2, #4
 8006230:	9202      	str	r2, [sp, #8]
 8006232:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006234:	9403      	str	r4, [sp, #12]
 8006236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006238:	f042 0201 	orr.w	r2, r2, #1
 800623c:	631a      	str	r2, [r3, #48]	; 0x30
 800623e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006240:	f002 0201 	and.w	r2, r2, #1
 8006244:	9203      	str	r2, [sp, #12]
 8006246:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006248:	9404      	str	r4, [sp, #16]
 800624a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800624c:	f042 0202 	orr.w	r2, r2, #2
 8006250:	631a      	str	r2, [r3, #48]	; 0x30
 8006252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	9304      	str	r3, [sp, #16]
 800625a:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800625c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80062f8 <MX_GPIO_Init+0x100>
 8006260:	4622      	mov	r2, r4
 8006262:	2108      	movs	r1, #8
 8006264:	4640      	mov	r0, r8
 8006266:	f7fd f86b 	bl	8003340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800626a:	4d20      	ldr	r5, [pc, #128]	; (80062ec <MX_GPIO_Init+0xf4>)
 800626c:	4622      	mov	r2, r4
 800626e:	2120      	movs	r1, #32
 8006270:	4628      	mov	r0, r5
 8006272:	f7fd f865 	bl	8003340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8006276:	4f1e      	ldr	r7, [pc, #120]	; (80062f0 <MX_GPIO_Init+0xf8>)
 8006278:	4622      	mov	r2, r4
 800627a:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800627e:	4638      	mov	r0, r7
 8006280:	f7fd f85e 	bl	8003340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006284:	2308      	movs	r3, #8
 8006286:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006288:	2601      	movs	r6, #1
 800628a:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800628c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800628e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006290:	a905      	add	r1, sp, #20
 8006292:	4640      	mov	r0, r8
 8006294:	f7fc ff82 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006298:	2320      	movs	r3, #32
 800629a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800629c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800629e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062a0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062a2:	a905      	add	r1, sp, #20
 80062a4:	4628      	mov	r0, r5
 80062a6:	f7fc ff79 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80062aa:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80062ae:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062b0:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062b4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062b6:	a905      	add	r1, sp, #20
 80062b8:	4638      	mov	r0, r7
 80062ba:	f7fc ff6f 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_RE_INT_Pin */
  GPIO_InitStruct.Pin = PWM_RE_INT_Pin;
 80062be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062c2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80062c4:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <MX_GPIO_Init+0xfc>)
 80062c6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062c8:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(PWM_RE_INT_GPIO_Port, &GPIO_InitStruct);
 80062ca:	a905      	add	r1, sp, #20
 80062cc:	4628      	mov	r0, r5
 80062ce:	f7fc ff65 	bl	800319c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80062d2:	4622      	mov	r2, r4
 80062d4:	4621      	mov	r1, r4
 80062d6:	2017      	movs	r0, #23
 80062d8:	f7fc fd36 	bl	8002d48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80062dc:	2017      	movs	r0, #23
 80062de:	f7fc fd67 	bl	8002db0 <HAL_NVIC_EnableIRQ>

}
 80062e2:	b00a      	add	sp, #40	; 0x28
 80062e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062e8:	40023800 	.word	0x40023800
 80062ec:	40020000 	.word	0x40020000
 80062f0:	40020400 	.word	0x40020400
 80062f4:	10110000 	.word	0x10110000
 80062f8:	40020800 	.word	0x40020800

080062fc <MX_DMA_Init>:
{
 80062fc:	b510      	push	{r4, lr}
 80062fe:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006300:	2400      	movs	r4, #0
 8006302:	9401      	str	r4, [sp, #4]
 8006304:	4b0d      	ldr	r3, [pc, #52]	; (800633c <MX_DMA_Init+0x40>)
 8006306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006308:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800630c:	631a      	str	r2, [r3, #48]	; 0x30
 800630e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006314:	9301      	str	r3, [sp, #4]
 8006316:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 2);
 8006318:	2202      	movs	r2, #2
 800631a:	4621      	mov	r1, r4
 800631c:	2039      	movs	r0, #57	; 0x39
 800631e:	f7fc fd13 	bl	8002d48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8006322:	2039      	movs	r0, #57	; 0x39
 8006324:	f7fc fd44 	bl	8002db0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 2);
 8006328:	2202      	movs	r2, #2
 800632a:	4621      	mov	r1, r4
 800632c:	2045      	movs	r0, #69	; 0x45
 800632e:	f7fc fd0b 	bl	8002d48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006332:	2045      	movs	r0, #69	; 0x45
 8006334:	f7fc fd3c 	bl	8002db0 <HAL_NVIC_EnableIRQ>
}
 8006338:	b002      	add	sp, #8
 800633a:	bd10      	pop	{r4, pc}
 800633c:	40023800 	.word	0x40023800

08006340 <MX_USART2_UART_Init>:
{
 8006340:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8006342:	4808      	ldr	r0, [pc, #32]	; (8006364 <MX_USART2_UART_Init+0x24>)
 8006344:	4b08      	ldr	r3, [pc, #32]	; (8006368 <MX_USART2_UART_Init+0x28>)
 8006346:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8006348:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800634c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800634e:	2300      	movs	r3, #0
 8006350:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006352:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006354:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006356:	220c      	movs	r2, #12
 8006358:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800635a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800635c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800635e:	f7ff fd86 	bl	8005e6e <HAL_UART_Init>
}
 8006362:	bd08      	pop	{r3, pc}
 8006364:	20000894 	.word	0x20000894
 8006368:	40004400 	.word	0x40004400

0800636c <MX_USART6_UART_Init>:
{
 800636c:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 800636e:	4808      	ldr	r0, [pc, #32]	; (8006390 <MX_USART6_UART_Init+0x24>)
 8006370:	4b08      	ldr	r3, [pc, #32]	; (8006394 <MX_USART6_UART_Init+0x28>)
 8006372:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 9600;
 8006374:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8006378:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800637a:	2300      	movs	r3, #0
 800637c:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800637e:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8006380:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8006382:	220c      	movs	r2, #12
 8006384:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006386:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8006388:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800638a:	f7ff fd70 	bl	8005e6e <HAL_UART_Init>
}
 800638e:	bd08      	pop	{r3, pc}
 8006390:	20000834 	.word	0x20000834
 8006394:	40011400 	.word	0x40011400

08006398 <MX_I2C2_Init>:
{
 8006398:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 800639a:	4809      	ldr	r0, [pc, #36]	; (80063c0 <MX_I2C2_Init+0x28>)
 800639c:	4b09      	ldr	r3, [pc, #36]	; (80063c4 <MX_I2C2_Init+0x2c>)
 800639e:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80063a0:	4b09      	ldr	r3, [pc, #36]	; (80063c8 <MX_I2C2_Init+0x30>)
 80063a2:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80063a4:	2300      	movs	r3, #0
 80063a6:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80063a8:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80063aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80063ae:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80063b0:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80063b2:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80063b4:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80063b6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80063b8:	f7fd faca 	bl	8003950 <HAL_I2C_Init>
}
 80063bc:	bd08      	pop	{r3, pc}
 80063be:	bf00      	nop
 80063c0:	20000318 	.word	0x20000318
 80063c4:	40005800 	.word	0x40005800
 80063c8:	00061a80 	.word	0x00061a80

080063cc <MX_TIM4_Init>:
{
 80063cc:	b570      	push	{r4, r5, r6, lr}
 80063ce:	b08a      	sub	sp, #40	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063d0:	2400      	movs	r4, #0
 80063d2:	9408      	str	r4, [sp, #32]
 80063d4:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063d6:	9401      	str	r4, [sp, #4]
 80063d8:	9402      	str	r4, [sp, #8]
 80063da:	9403      	str	r4, [sp, #12]
 80063dc:	9404      	str	r4, [sp, #16]
 80063de:	9405      	str	r4, [sp, #20]
 80063e0:	9406      	str	r4, [sp, #24]
 80063e2:	9407      	str	r4, [sp, #28]
  htim4.Instance = TIM4;
 80063e4:	4d1b      	ldr	r5, [pc, #108]	; (8006454 <MX_TIM4_Init+0x88>)
 80063e6:	4b1c      	ldr	r3, [pc, #112]	; (8006458 <MX_TIM4_Init+0x8c>)
 80063e8:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 9;
 80063ea:	2309      	movs	r3, #9
 80063ec:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063ee:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 20000;
 80063f0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80063f4:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063f6:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063f8:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80063fa:	4628      	mov	r0, r5
 80063fc:	f7ff f8a0 	bl	8005540 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006400:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006402:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006404:	a908      	add	r1, sp, #32
 8006406:	4628      	mov	r0, r5
 8006408:	f7ff fafe 	bl	8005a08 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800640c:	2360      	movs	r3, #96	; 0x60
 800640e:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8006410:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006412:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8006414:	2604      	movs	r6, #4
 8006416:	9605      	str	r6, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006418:	4622      	mov	r2, r4
 800641a:	eb0d 0106 	add.w	r1, sp, r6
 800641e:	4628      	mov	r0, r5
 8006420:	f7ff f909 	bl	8005636 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006424:	4632      	mov	r2, r6
 8006426:	eb0d 0106 	add.w	r1, sp, r6
 800642a:	4628      	mov	r0, r5
 800642c:	f7ff f903 	bl	8005636 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006430:	2208      	movs	r2, #8
 8006432:	eb0d 0106 	add.w	r1, sp, r6
 8006436:	4628      	mov	r0, r5
 8006438:	f7ff f8fd 	bl	8005636 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800643c:	220c      	movs	r2, #12
 800643e:	eb0d 0106 	add.w	r1, sp, r6
 8006442:	4628      	mov	r0, r5
 8006444:	f7ff f8f7 	bl	8005636 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8006448:	4628      	mov	r0, r5
 800644a:	f000 fc1d 	bl	8006c88 <HAL_TIM_MspPostInit>
}
 800644e:	b00a      	add	sp, #40	; 0x28
 8006450:	bd70      	pop	{r4, r5, r6, pc}
 8006452:	bf00      	nop
 8006454:	200004a8 	.word	0x200004a8
 8006458:	40000800 	.word	0x40000800

0800645c <MX_ADC1_Init>:
{
 800645c:	b570      	push	{r4, r5, r6, lr}
 800645e:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 8006460:	2500      	movs	r5, #0
 8006462:	9500      	str	r5, [sp, #0]
 8006464:	9501      	str	r5, [sp, #4]
 8006466:	9502      	str	r5, [sp, #8]
 8006468:	9503      	str	r5, [sp, #12]
  hadc1.Instance = ADC1;
 800646a:	4c10      	ldr	r4, [pc, #64]	; (80064ac <MX_ADC1_Init+0x50>)
 800646c:	4b10      	ldr	r3, [pc, #64]	; (80064b0 <MX_ADC1_Init+0x54>)
 800646e:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006474:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006476:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8006478:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800647a:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800647c:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006480:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006482:	4b0c      	ldr	r3, [pc, #48]	; (80064b4 <MX_ADC1_Init+0x58>)
 8006484:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006486:	60e5      	str	r5, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 8006488:	2601      	movs	r6, #1
 800648a:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800648c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006490:	6166      	str	r6, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006492:	4620      	mov	r0, r4
 8006494:	f7fc fb48 	bl	8002b28 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_8;
 8006498:	2308      	movs	r3, #8
 800649a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 800649c:	9601      	str	r6, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800649e:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80064a0:	4669      	mov	r1, sp
 80064a2:	4620      	mov	r0, r4
 80064a4:	f7fc fb6c 	bl	8002b80 <HAL_ADC_ConfigChannel>
}
 80064a8:	b004      	add	sp, #16
 80064aa:	bd70      	pop	{r4, r5, r6, pc}
 80064ac:	200007e0 	.word	0x200007e0
 80064b0:	40012000 	.word	0x40012000
 80064b4:	0f000001 	.word	0x0f000001

080064b8 <MX_SPI2_Init>:
{
 80064b8:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 80064ba:	480c      	ldr	r0, [pc, #48]	; (80064ec <MX_SPI2_Init+0x34>)
 80064bc:	4b0c      	ldr	r3, [pc, #48]	; (80064f0 <MX_SPI2_Init+0x38>)
 80064be:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80064c0:	f44f 7382 	mov.w	r3, #260	; 0x104
 80064c4:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80064c6:	2300      	movs	r3, #0
 80064c8:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80064ca:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80064cc:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80064ce:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80064d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064d4:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80064d6:	2228      	movs	r2, #40	; 0x28
 80064d8:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80064da:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80064dc:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064de:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80064e0:	230a      	movs	r3, #10
 80064e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80064e4:	f7fe fde8 	bl	80050b8 <HAL_SPI_Init>
}
 80064e8:	bd08      	pop	{r3, pc}
 80064ea:	bf00      	nop
 80064ec:	20000450 	.word	0x20000450
 80064f0:	40003800 	.word	0x40003800

080064f4 <MX_TIM3_Init>:
{
 80064f4:	b530      	push	{r4, r5, lr}
 80064f6:	b093      	sub	sp, #76	; 0x4c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80064f8:	2400      	movs	r4, #0
 80064fa:	940e      	str	r4, [sp, #56]	; 0x38
 80064fc:	940f      	str	r4, [sp, #60]	; 0x3c
 80064fe:	9410      	str	r4, [sp, #64]	; 0x40
 8006500:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8006502:	9409      	str	r4, [sp, #36]	; 0x24
 8006504:	940a      	str	r4, [sp, #40]	; 0x28
 8006506:	940b      	str	r4, [sp, #44]	; 0x2c
 8006508:	940c      	str	r4, [sp, #48]	; 0x30
 800650a:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800650c:	9407      	str	r4, [sp, #28]
 800650e:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006510:	9400      	str	r4, [sp, #0]
 8006512:	9401      	str	r4, [sp, #4]
 8006514:	9402      	str	r4, [sp, #8]
 8006516:	9403      	str	r4, [sp, #12]
 8006518:	9404      	str	r4, [sp, #16]
 800651a:	9405      	str	r4, [sp, #20]
 800651c:	9406      	str	r4, [sp, #24]
  htim3.Instance = TIM3;
 800651e:	4d1b      	ldr	r5, [pc, #108]	; (800658c <MX_TIM3_Init+0x98>)
 8006520:	4b1b      	ldr	r3, [pc, #108]	; (8006590 <MX_TIM3_Init+0x9c>)
 8006522:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 5000-1;
 8006524:	f241 3387 	movw	r3, #4999	; 0x1387
 8006528:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800652a:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 50000-1;
 800652c:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8006530:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006532:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006534:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006536:	4628      	mov	r0, r5
 8006538:	f7fe ffd0 	bl	80054dc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800653c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006540:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006542:	a90e      	add	r1, sp, #56	; 0x38
 8006544:	4628      	mov	r0, r5
 8006546:	f7ff f8f0 	bl	800572a <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800654a:	4628      	mov	r0, r5
 800654c:	f7fe ffdf 	bl	800550e <HAL_TIM_OC_Init>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8006550:	2304      	movs	r3, #4
 8006552:	9309      	str	r3, [sp, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8006554:	2360      	movs	r3, #96	; 0x60
 8006556:	930a      	str	r3, [sp, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_BOTHEDGE;
 8006558:	230a      	movs	r3, #10
 800655a:	930b      	str	r3, [sp, #44]	; 0x2c
  sSlaveConfig.TriggerFilter = 0;
 800655c:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800655e:	a909      	add	r1, sp, #36	; 0x24
 8006560:	4628      	mov	r0, r5
 8006562:	f7ff f994 	bl	800588e <HAL_TIM_SlaveConfigSynchro>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8006566:	2340      	movs	r3, #64	; 0x40
 8006568:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800656a:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800656c:	a907      	add	r1, sp, #28
 800656e:	4628      	mov	r0, r5
 8006570:	f7ff fa4a 	bl	8005a08 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8006574:	9400      	str	r4, [sp, #0]
  sConfigOC.Pulse = 20;
 8006576:	2314      	movs	r3, #20
 8006578:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800657a:	9402      	str	r4, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800657c:	9404      	str	r4, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800657e:	4622      	mov	r2, r4
 8006580:	4669      	mov	r1, sp
 8006582:	4628      	mov	r0, r5
 8006584:	f7ff f828 	bl	80055d8 <HAL_TIM_OC_ConfigChannel>
}
 8006588:	b013      	add	sp, #76	; 0x4c
 800658a:	bd30      	pop	{r4, r5, pc}
 800658c:	20000740 	.word	0x20000740
 8006590:	40000400 	.word	0x40000400

08006594 <SystemClock_Config>:
{
 8006594:	b530      	push	{r4, r5, lr}
 8006596:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006598:	2230      	movs	r2, #48	; 0x30
 800659a:	2100      	movs	r1, #0
 800659c:	a808      	add	r0, sp, #32
 800659e:	f000 fd50 	bl	8007042 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80065a2:	2400      	movs	r4, #0
 80065a4:	9403      	str	r4, [sp, #12]
 80065a6:	9404      	str	r4, [sp, #16]
 80065a8:	9405      	str	r4, [sp, #20]
 80065aa:	9406      	str	r4, [sp, #24]
 80065ac:	9407      	str	r4, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80065ae:	9401      	str	r4, [sp, #4]
 80065b0:	4b1a      	ldr	r3, [pc, #104]	; (800661c <SystemClock_Config+0x88>)
 80065b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80065b8:	641a      	str	r2, [r3, #64]	; 0x40
 80065ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065c0:	9301      	str	r3, [sp, #4]
 80065c2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80065c4:	9402      	str	r4, [sp, #8]
 80065c6:	4b16      	ldr	r3, [pc, #88]	; (8006620 <SystemClock_Config+0x8c>)
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80065d6:	9302      	str	r3, [sp, #8]
 80065d8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80065da:	2301      	movs	r3, #1
 80065dc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80065de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80065e2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80065e4:	2502      	movs	r5, #2
 80065e6:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80065e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80065ec:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80065ee:	2304      	movs	r3, #4
 80065f0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80065f2:	2264      	movs	r2, #100	; 0x64
 80065f4:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80065f6:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80065f8:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80065fa:	a808      	add	r0, sp, #32
 80065fc:	f7fe fa52 	bl	8004aa4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006600:	230f      	movs	r3, #15
 8006602:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006604:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006606:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800660c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800660e:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006610:	2103      	movs	r1, #3
 8006612:	a803      	add	r0, sp, #12
 8006614:	f7fe fc7e 	bl	8004f14 <HAL_RCC_ClockConfig>
}
 8006618:	b015      	add	sp, #84	; 0x54
 800661a:	bd30      	pop	{r4, r5, pc}
 800661c:	40023800 	.word	0x40023800
 8006620:	40007000 	.word	0x40007000

08006624 <main>:
{
 8006624:	b508      	push	{r3, lr}
  HAL_Init();
 8006626:	f7fc f9a5 	bl	8002974 <HAL_Init>
  SystemClock_Config();
 800662a:	f7ff ffb3 	bl	8006594 <SystemClock_Config>
  MX_GPIO_Init();
 800662e:	f7ff fde3 	bl	80061f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8006632:	f7ff fe63 	bl	80062fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8006636:	f7ff fe83 	bl	8006340 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800663a:	f7ff fead 	bl	8006398 <MX_I2C2_Init>
  MX_TIM4_Init();
 800663e:	f7ff fec5 	bl	80063cc <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8006642:	f7ff fe93 	bl	800636c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8006646:	f7ff ff09 	bl	800645c <MX_ADC1_Init>
  MX_SPI2_Init();
 800664a:	f7ff ff35 	bl	80064b8 <MX_SPI2_Init>
  MX_TIM3_Init();
 800664e:	f7ff ff51 	bl	80064f4 <MX_TIM3_Init>
	if (imu_init(&hi2c2) == IMU_SUCCESS) {
 8006652:	4815      	ldr	r0, [pc, #84]	; (80066a8 <main+0x84>)
 8006654:	f7fa fcc2 	bl	8000fdc <imu_init>
 8006658:	b318      	cbz	r0, 80066a2 <main+0x7e>
	HAL_TIM_Base_Start_IT(&htim3);
 800665a:	4c14      	ldr	r4, [pc, #80]	; (80066ac <main+0x88>)
 800665c:	4620      	mov	r0, r4
 800665e:	f7fe fe1e 	bl	800529e <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8006662:	2100      	movs	r1, #0
 8006664:	4620      	mov	r0, r4
 8006666:	f7ff f94f 	bl	8005908 <HAL_TIM_OC_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);
 800666a:	4c11      	ldr	r4, [pc, #68]	; (80066b0 <main+0x8c>)
 800666c:	2100      	movs	r1, #0
 800666e:	4620      	mov	r0, r4
 8006670:	f7ff f98a 	bl	8005988 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 8006674:	2104      	movs	r1, #4
 8006676:	4620      	mov	r0, r4
 8006678:	f7ff f986 	bl	8005988 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_3);
 800667c:	2108      	movs	r1, #8
 800667e:	4620      	mov	r0, r4
 8006680:	f7ff f982 	bl	8005988 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4);
 8006684:	210c      	movs	r1, #12
 8006686:	4620      	mov	r0, r4
 8006688:	f7ff f97e 	bl	8005988 <HAL_TIM_PWM_Start_IT>
	htim4.Instance->CCR1 = 1500;
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006692:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR2 = 1500;
 8006694:	639a      	str	r2, [r3, #56]	; 0x38
	htim4.Instance->CCR3 = 1500;
 8006696:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR4 = 1500;
 8006698:	641a      	str	r2, [r3, #64]	; 0x40
		main_loop = 1;
 800669a:	4b06      	ldr	r3, [pc, #24]	; (80066b4 <main+0x90>)
 800669c:	2201      	movs	r2, #1
 800669e:	701a      	strb	r2, [r3, #0]
 80066a0:	e7fb      	b.n	800669a <main+0x76>
		imu_calibrate();
 80066a2:	f7fb fa45 	bl	8001b30 <imu_calibrate>
 80066a6:	e7d8      	b.n	800665a <main+0x36>
 80066a8:	20000318 	.word	0x20000318
 80066ac:	20000740 	.word	0x20000740
 80066b0:	200004a8 	.word	0x200004a8
 80066b4:	200002c8 	.word	0x200002c8

080066b8 <PWM1_Set>:

}

//These 4 functions set the PWM duty cycles
void PWM1_Set(uint16_t value) {
	htim4.Instance->CCR1 = value;
 80066b8:	4b01      	ldr	r3, [pc, #4]	; (80066c0 <PWM1_Set+0x8>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6358      	str	r0, [r3, #52]	; 0x34
}
 80066be:	4770      	bx	lr
 80066c0:	200004a8 	.word	0x200004a8

080066c4 <PWM2_Set>:

void PWM2_Set(uint16_t value) {
	htim4.Instance->CCR2 = value;
 80066c4:	4b01      	ldr	r3, [pc, #4]	; (80066cc <PWM2_Set+0x8>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6398      	str	r0, [r3, #56]	; 0x38

}
 80066ca:	4770      	bx	lr
 80066cc:	200004a8 	.word	0x200004a8

080066d0 <PWM3_Set>:

void PWM3_Set(uint16_t value) {
	htim4.Instance->CCR3 = value;
 80066d0:	4b01      	ldr	r3, [pc, #4]	; (80066d8 <PWM3_Set+0x8>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 80066d6:	4770      	bx	lr
 80066d8:	200004a8 	.word	0x200004a8

080066dc <PWM4_Set>:

void PWM4_Set(uint16_t value) {
	htim4.Instance->CCR4 = value;
 80066dc:	4b01      	ldr	r3, [pc, #4]	; (80066e4 <PWM4_Set+0x8>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6418      	str	r0, [r3, #64]	; 0x40
}
 80066e2:	4770      	bx	lr
 80066e4:	200004a8 	.word	0x200004a8

080066e8 <map>:

	}

}

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 80066e8:	b410      	push	{r4}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80066ea:	1a40      	subs	r0, r0, r1
 80066ec:	9c01      	ldr	r4, [sp, #4]
 80066ee:	1ae4      	subs	r4, r4, r3
 80066f0:	fb04 f000 	mul.w	r0, r4, r0
 80066f4:	1a52      	subs	r2, r2, r1
 80066f6:	fb90 f0f2 	sdiv	r0, r0, r2
}
 80066fa:	4418      	add	r0, r3
 80066fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006700:	4770      	bx	lr
	...

08006704 <__io_putchar>:
/*
 *	Some functions to allow the program to use printf,
 *	from http://www.emcu.eu/how-to-implement-printf-for-send-message-via-usb-on-stm32-nucleo-boards-using-atollic/
 *
 */
int __io_putchar(int ch) {
 8006704:	b510      	push	{r4, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	4604      	mov	r4, r0
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 800670a:	a902      	add	r1, sp, #8
 800670c:	f801 0d04 	strb.w	r0, [r1, #-4]!

	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 8006710:	230a      	movs	r3, #10
 8006712:	2201      	movs	r2, #1
 8006714:	4802      	ldr	r0, [pc, #8]	; (8006720 <__io_putchar+0x1c>)
 8006716:	f7ff fbd9 	bl	8005ecc <HAL_UART_Transmit>
	return ch;
}
 800671a:	4620      	mov	r0, r4
 800671c:	b002      	add	sp, #8
 800671e:	bd10      	pop	{r4, pc}
 8006720:	20000894 	.word	0x20000894

08006724 <_write>:

int _write(int file, char *ptr, int len) {
 8006724:	b570      	push	{r4, r5, r6, lr}
 8006726:	4616      	mov	r6, r2
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8006728:	2400      	movs	r4, #0
 800672a:	e005      	b.n	8006738 <_write+0x14>
		__io_putchar(*ptr++);
 800672c:	1c4d      	adds	r5, r1, #1
 800672e:	7808      	ldrb	r0, [r1, #0]
 8006730:	f7ff ffe8 	bl	8006704 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8006734:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8006736:	4629      	mov	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8006738:	42b4      	cmp	r4, r6
 800673a:	dbf7      	blt.n	800672c <_write+0x8>
	}
	return len;
}
 800673c:	4630      	mov	r0, r6
 800673e:	bd70      	pop	{r4, r5, r6, pc}

08006740 <unpackRxData>:
}

// Unpack received 32 byte payload from transmitter, see documentation for specification details
void unpackRxData() {

	L_Joystick_XPos = (RxData[0] & 0xFF) | (RxData[1] << 8);
 8006740:	4b0c      	ldr	r3, [pc, #48]	; (8006774 <unpackRxData+0x34>)
 8006742:	781a      	ldrb	r2, [r3, #0]
 8006744:	7859      	ldrb	r1, [r3, #1]
 8006746:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800674a:	490b      	ldr	r1, [pc, #44]	; (8006778 <unpackRxData+0x38>)
 800674c:	800a      	strh	r2, [r1, #0]
	L_Joystick_YPos = (RxData[2] & 0xFF) | (RxData[3] << 8);
 800674e:	789a      	ldrb	r2, [r3, #2]
 8006750:	78d9      	ldrb	r1, [r3, #3]
 8006752:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006756:	4909      	ldr	r1, [pc, #36]	; (800677c <unpackRxData+0x3c>)
 8006758:	800a      	strh	r2, [r1, #0]
	R_Joystick_XPos = (RxData[4] & 0xFF) | (RxData[5] << 8);
 800675a:	791a      	ldrb	r2, [r3, #4]
 800675c:	7959      	ldrb	r1, [r3, #5]
 800675e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006762:	4907      	ldr	r1, [pc, #28]	; (8006780 <unpackRxData+0x40>)
 8006764:	800a      	strh	r2, [r1, #0]
	R_Joystick_YPos = (RxData[6] & 0xFF) | (RxData[7] << 8);
 8006766:	799a      	ldrb	r2, [r3, #6]
 8006768:	79db      	ldrb	r3, [r3, #7]
 800676a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800676e:	4a05      	ldr	r2, [pc, #20]	; (8006784 <unpackRxData+0x44>)
 8006770:	8013      	strh	r3, [r2, #0]

}
 8006772:	4770      	bx	lr
 8006774:	20000874 	.word	0x20000874
 8006778:	200008d6 	.word	0x200008d6
 800677c:	200003ec 	.word	0x200003ec
 8006780:	20000828 	.word	0x20000828
 8006784:	200008d4 	.word	0x200008d4

08006788 <pulse_posedge_handler>:
	if (main_loop) {
 8006788:	4b6d      	ldr	r3, [pc, #436]	; (8006940 <pulse_posedge_handler+0x1b8>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	b903      	cbnz	r3, 8006790 <pulse_posedge_handler+0x8>
 800678e:	4770      	bx	lr
void pulse_posedge_handler() {
 8006790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006794:	b082      	sub	sp, #8
		unpackRxData();
 8006796:	f7ff ffd3 	bl	8006740 <unpackRxData>
		throttle = map(L_Joystick_YPos, 900, 3000, ESC_MIN, ESC_MAX);
 800679a:	4b6a      	ldr	r3, [pc, #424]	; (8006944 <pulse_posedge_handler+0x1bc>)
 800679c:	f9b3 0000 	ldrsh.w	r0, [r3]
 80067a0:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	f240 43e2 	movw	r3, #1250	; 0x4e2
 80067aa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80067ae:	f44f 7161 	mov.w	r1, #900	; 0x384
 80067b2:	f7ff ff99 	bl	80066e8 <map>
 80067b6:	4e64      	ldr	r6, [pc, #400]	; (8006948 <pulse_posedge_handler+0x1c0>)
 80067b8:	6030      	str	r0, [r6, #0]
		roll_setpoint = map(R_Joystick_XPos, 0, 4095, -33, 33);
 80067ba:	4b64      	ldr	r3, [pc, #400]	; (800694c <pulse_posedge_handler+0x1c4>)
 80067bc:	f9b3 0000 	ldrsh.w	r0, [r3]
 80067c0:	2421      	movs	r4, #33	; 0x21
 80067c2:	9400      	str	r4, [sp, #0]
 80067c4:	f06f 0320 	mvn.w	r3, #32
 80067c8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80067cc:	2100      	movs	r1, #0
 80067ce:	f7ff ff8b 	bl	80066e8 <map>
 80067d2:	4f5f      	ldr	r7, [pc, #380]	; (8006950 <pulse_posedge_handler+0x1c8>)
 80067d4:	ee07 0a90 	vmov	s15, r0
 80067d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067dc:	edc7 7a00 	vstr	s15, [r7]
		pitch_setpoint = map(R_Joystick_YPos, 0, 4095, -33, 33);
 80067e0:	4b5c      	ldr	r3, [pc, #368]	; (8006954 <pulse_posedge_handler+0x1cc>)
 80067e2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80067e6:	9400      	str	r4, [sp, #0]
 80067e8:	f06f 0320 	mvn.w	r3, #32
 80067ec:	f640 72ff 	movw	r2, #4095	; 0xfff
 80067f0:	2100      	movs	r1, #0
 80067f2:	f7ff ff79 	bl	80066e8 <map>
 80067f6:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8006988 <pulse_posedge_handler+0x200>
 80067fa:	ee07 0a90 	vmov	s15, r0
 80067fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006802:	edc8 7a00 	vstr	s15, [r8]
		calc_RollPitchYaw(0);
 8006806:	2000      	movs	r0, #0
 8006808:	f7fb fc56 	bl	80020b8 <calc_RollPitchYaw>
		imu_pitch = get_pitch();
 800680c:	f7fa fbac 	bl	8000f68 <get_pitch>
 8006810:	4d51      	ldr	r5, [pc, #324]	; (8006958 <pulse_posedge_handler+0x1d0>)
 8006812:	ed85 0a00 	vstr	s0, [r5]
		pid_output_pitch = pid_calculate_pitch(imu_pitch, tim3_count,
 8006816:	4c51      	ldr	r4, [pc, #324]	; (800695c <pulse_posedge_handler+0x1d4>)
 8006818:	edd8 0a00 	vldr	s1, [r8]
 800681c:	6820      	ldr	r0, [r4, #0]
 800681e:	f7fb ff63 	bl	80026e8 <pid_calculate_pitch>
 8006822:	4b4f      	ldr	r3, [pc, #316]	; (8006960 <pulse_posedge_handler+0x1d8>)
 8006824:	ed83 0a00 	vstr	s0, [r3]
		imu_roll = get_roll();
 8006828:	f7fa fb98 	bl	8000f5c <get_roll>
 800682c:	4b4d      	ldr	r3, [pc, #308]	; (8006964 <pulse_posedge_handler+0x1dc>)
 800682e:	ed83 0a00 	vstr	s0, [r3]
		pid_output_roll = pid_calculate_roll(imu_pitch, tim3_count,
 8006832:	edd7 0a00 	vldr	s1, [r7]
 8006836:	6820      	ldr	r0, [r4, #0]
 8006838:	ed95 0a00 	vldr	s0, [r5]
 800683c:	f7fb fec4 	bl	80025c8 <pid_calculate_roll>
 8006840:	4d49      	ldr	r5, [pc, #292]	; (8006968 <pulse_posedge_handler+0x1e0>)
 8006842:	ed85 0a00 	vstr	s0, [r5]
		imu_yaw = get_yaw();
 8006846:	f7fa fb95 	bl	8000f74 <get_yaw>
 800684a:	4b48      	ldr	r3, [pc, #288]	; (800696c <pulse_posedge_handler+0x1e4>)
 800684c:	ed83 0a00 	vstr	s0, [r3]
		pid_output_yaw = pid_calculate_yaw(imu_yaw, tim3_count, yaw_setpoint);
 8006850:	4b47      	ldr	r3, [pc, #284]	; (8006970 <pulse_posedge_handler+0x1e8>)
 8006852:	edd3 0a00 	vldr	s1, [r3]
 8006856:	6820      	ldr	r0, [r4, #0]
 8006858:	f7fb ffd6 	bl	8002808 <pid_calculate_yaw>
 800685c:	4b45      	ldr	r3, [pc, #276]	; (8006974 <pulse_posedge_handler+0x1ec>)
 800685e:	ed83 0a00 	vstr	s0, [r3]
		esc1_total = ESC_MIN + throttle + (int) pid_output_roll;
 8006862:	6831      	ldr	r1, [r6, #0]
 8006864:	f201 41e2 	addw	r1, r1, #1250	; 0x4e2
 8006868:	edd5 7a00 	vldr	s15, [r5]
 800686c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006870:	ee17 3a90 	vmov	r3, s15
 8006874:	18ca      	adds	r2, r1, r3
 8006876:	4840      	ldr	r0, [pc, #256]	; (8006978 <pulse_posedge_handler+0x1f0>)
 8006878:	6002      	str	r2, [r0, #0]
		esc2_total = ESC_MIN + throttle + (int) pid_output_roll;
 800687a:	4840      	ldr	r0, [pc, #256]	; (800697c <pulse_posedge_handler+0x1f4>)
 800687c:	6002      	str	r2, [r0, #0]
		esc3_total = (ESC_MIN + throttle) - (int) pid_output_roll;
 800687e:	1acb      	subs	r3, r1, r3
 8006880:	493f      	ldr	r1, [pc, #252]	; (8006980 <pulse_posedge_handler+0x1f8>)
 8006882:	600b      	str	r3, [r1, #0]
		esc4_total = (ESC_MIN + throttle) - (int) pid_output_roll;
 8006884:	493f      	ldr	r1, [pc, #252]	; (8006984 <pulse_posedge_handler+0x1fc>)
 8006886:	600b      	str	r3, [r1, #0]
		if (esc1_total < ESC_MIN) {
 8006888:	f240 41e1 	movw	r1, #1249	; 0x4e1
 800688c:	428a      	cmp	r2, r1
 800688e:	dc03      	bgt.n	8006898 <pulse_posedge_handler+0x110>
			esc1_total = ESC_MIN;
 8006890:	4939      	ldr	r1, [pc, #228]	; (8006978 <pulse_posedge_handler+0x1f0>)
 8006892:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8006896:	6008      	str	r0, [r1, #0]
		if (esc1_total > ESC_MAX) {
 8006898:	4937      	ldr	r1, [pc, #220]	; (8006978 <pulse_posedge_handler+0x1f0>)
 800689a:	6808      	ldr	r0, [r1, #0]
 800689c:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80068a0:	4288      	cmp	r0, r1
 80068a2:	dd03      	ble.n	80068ac <pulse_posedge_handler+0x124>
			esc1_total = ESC_MAX;
 80068a4:	4934      	ldr	r1, [pc, #208]	; (8006978 <pulse_posedge_handler+0x1f0>)
 80068a6:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80068aa:	6008      	str	r0, [r1, #0]
		if (esc2_total < ESC_MIN) {
 80068ac:	f240 41e1 	movw	r1, #1249	; 0x4e1
 80068b0:	428a      	cmp	r2, r1
 80068b2:	dc03      	bgt.n	80068bc <pulse_posedge_handler+0x134>
			esc2_total = ESC_MIN;
 80068b4:	4a31      	ldr	r2, [pc, #196]	; (800697c <pulse_posedge_handler+0x1f4>)
 80068b6:	f240 41e2 	movw	r1, #1250	; 0x4e2
 80068ba:	6011      	str	r1, [r2, #0]
		if (esc2_total > ESC_MAX) {
 80068bc:	4a2f      	ldr	r2, [pc, #188]	; (800697c <pulse_posedge_handler+0x1f4>)
 80068be:	6811      	ldr	r1, [r2, #0]
 80068c0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80068c4:	4291      	cmp	r1, r2
 80068c6:	dd03      	ble.n	80068d0 <pulse_posedge_handler+0x148>
			esc2_total = ESC_MAX;
 80068c8:	4a2c      	ldr	r2, [pc, #176]	; (800697c <pulse_posedge_handler+0x1f4>)
 80068ca:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80068ce:	6011      	str	r1, [r2, #0]
		if (esc3_total < ESC_MIN) {
 80068d0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80068d4:	4293      	cmp	r3, r2
 80068d6:	dc03      	bgt.n	80068e0 <pulse_posedge_handler+0x158>
			esc3_total = ESC_MIN;
 80068d8:	4a29      	ldr	r2, [pc, #164]	; (8006980 <pulse_posedge_handler+0x1f8>)
 80068da:	f240 41e2 	movw	r1, #1250	; 0x4e2
 80068de:	6011      	str	r1, [r2, #0]
		if (esc3_total > ESC_MAX) {
 80068e0:	4a27      	ldr	r2, [pc, #156]	; (8006980 <pulse_posedge_handler+0x1f8>)
 80068e2:	6811      	ldr	r1, [r2, #0]
 80068e4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80068e8:	4291      	cmp	r1, r2
 80068ea:	dd03      	ble.n	80068f4 <pulse_posedge_handler+0x16c>
			esc3_total = ESC_MAX;
 80068ec:	4a24      	ldr	r2, [pc, #144]	; (8006980 <pulse_posedge_handler+0x1f8>)
 80068ee:	f640 11c4 	movw	r1, #2500	; 0x9c4
 80068f2:	6011      	str	r1, [r2, #0]
		if (esc4_total < ESC_MIN) {
 80068f4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80068f8:	4293      	cmp	r3, r2
 80068fa:	dc03      	bgt.n	8006904 <pulse_posedge_handler+0x17c>
			esc4_total = ESC_MIN;
 80068fc:	4b21      	ldr	r3, [pc, #132]	; (8006984 <pulse_posedge_handler+0x1fc>)
 80068fe:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8006902:	601a      	str	r2, [r3, #0]
		if (esc4_total > ESC_MAX) {
 8006904:	4b1f      	ldr	r3, [pc, #124]	; (8006984 <pulse_posedge_handler+0x1fc>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800690c:	429a      	cmp	r2, r3
 800690e:	dd03      	ble.n	8006918 <pulse_posedge_handler+0x190>
			esc4_total = ESC_MAX;
 8006910:	4b1c      	ldr	r3, [pc, #112]	; (8006984 <pulse_posedge_handler+0x1fc>)
 8006912:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006916:	601a      	str	r2, [r3, #0]
		PWM1_Set(esc1_total); //PWM1 = Back left, CW
 8006918:	4b17      	ldr	r3, [pc, #92]	; (8006978 <pulse_posedge_handler+0x1f0>)
 800691a:	8818      	ldrh	r0, [r3, #0]
 800691c:	f7ff fecc 	bl	80066b8 <PWM1_Set>
		PWM2_Set(esc2_total); //PWM2 = Front left, CCW
 8006920:	4b16      	ldr	r3, [pc, #88]	; (800697c <pulse_posedge_handler+0x1f4>)
 8006922:	8818      	ldrh	r0, [r3, #0]
 8006924:	f7ff fece 	bl	80066c4 <PWM2_Set>
		PWM3_Set(esc3_total); //PWM3 = Back right, CCW
 8006928:	4b15      	ldr	r3, [pc, #84]	; (8006980 <pulse_posedge_handler+0x1f8>)
 800692a:	8818      	ldrh	r0, [r3, #0]
 800692c:	f7ff fed0 	bl	80066d0 <PWM3_Set>
		PWM4_Set(esc4_total); //PWM4 = Front right, CW
 8006930:	4b14      	ldr	r3, [pc, #80]	; (8006984 <pulse_posedge_handler+0x1fc>)
 8006932:	8818      	ldrh	r0, [r3, #0]
 8006934:	f7ff fed2 	bl	80066dc <PWM4_Set>
}
 8006938:	b002      	add	sp, #8
 800693a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800693e:	bf00      	nop
 8006940:	200002c8 	.word	0x200002c8
 8006944:	200003ec 	.word	0x200003ec
 8006948:	200002e0 	.word	0x200002e0
 800694c:	20000828 	.word	0x20000828
 8006950:	200002dc 	.word	0x200002dc
 8006954:	200008d4 	.word	0x200008d4
 8006958:	20000830 	.word	0x20000830
 800695c:	200002e4 	.word	0x200002e4
 8006960:	200002cc 	.word	0x200002cc
 8006964:	2000082c 	.word	0x2000082c
 8006968:	200002d0 	.word	0x200002d0
 800696c:	200003e8 	.word	0x200003e8
 8006970:	200002e8 	.word	0x200002e8
 8006974:	200002d4 	.word	0x200002d4
 8006978:	200002b8 	.word	0x200002b8
 800697c:	200002bc 	.word	0x200002bc
 8006980:	200002c0 	.word	0x200002c0
 8006984:	200002c4 	.word	0x200002c4
 8006988:	200002d8 	.word	0x200002d8

0800698c <HAL_GPIO_EXTI_Callback>:
	if (GPIO_Pin == PWM_RE_INT_Pin && main_loop) {
 800698c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006990:	d000      	beq.n	8006994 <HAL_GPIO_EXTI_Callback+0x8>
 8006992:	4770      	bx	lr
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8006994:	b508      	push	{r3, lr}
	if (GPIO_Pin == PWM_RE_INT_Pin && main_loop) {
 8006996:	4b03      	ldr	r3, [pc, #12]	; (80069a4 <HAL_GPIO_EXTI_Callback+0x18>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	b903      	cbnz	r3, 800699e <HAL_GPIO_EXTI_Callback+0x12>
}
 800699c:	bd08      	pop	{r3, pc}
		pulse_posedge_handler();
 800699e:	f7ff fef3 	bl	8006788 <pulse_posedge_handler>
}
 80069a2:	e7fb      	b.n	800699c <HAL_GPIO_EXTI_Callback+0x10>
 80069a4:	200002c8 	.word	0x200002c8

080069a8 <HAL_TIM_IC_CaptureCallback>:

//	if(htim->Instance == TIM3){
//
//		__HAL_TIM_SetCounter(&htim3,0);
//	}
}
 80069a8:	4770      	bx	lr

080069aa <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){

	if(htim->Instance == TIM3){
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
		}
}
 80069aa:	4770      	bx	lr

080069ac <HAL_TIM_OC_DelayElapsedCallback>:


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 80069ac:	b508      	push	{r3, lr}

	if(htim->Instance == TIM3){
 80069ae:	6802      	ldr	r2, [r0, #0]
 80069b0:	4b04      	ldr	r3, [pc, #16]	; (80069c4 <HAL_TIM_OC_DelayElapsedCallback+0x18>)
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d000      	beq.n	80069b8 <HAL_TIM_OC_DelayElapsedCallback+0xc>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
			}

}
 80069b6:	bd08      	pop	{r3, pc}
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 80069b8:	2108      	movs	r1, #8
 80069ba:	4803      	ldr	r0, [pc, #12]	; (80069c8 <HAL_TIM_OC_DelayElapsedCallback+0x1c>)
 80069bc:	f7fc fcc6 	bl	800334c <HAL_GPIO_TogglePin>
}
 80069c0:	e7f9      	b.n	80069b6 <HAL_TIM_OC_DelayElapsedCallback+0xa>
 80069c2:	bf00      	nop
 80069c4:	40000400 	.word	0x40000400
 80069c8:	40020800 	.word	0x40020800

080069cc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80069cc:	4770      	bx	lr
	...

080069d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80069d0:	b500      	push	{lr}
 80069d2:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069d4:	2100      	movs	r1, #0
 80069d6:	9100      	str	r1, [sp, #0]
 80069d8:	4b0c      	ldr	r3, [pc, #48]	; (8006a0c <HAL_MspInit+0x3c>)
 80069da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069e0:	645a      	str	r2, [r3, #68]	; 0x44
 80069e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069e4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80069e8:	9200      	str	r2, [sp, #0]
 80069ea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80069ec:	9101      	str	r1, [sp, #4]
 80069ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80069f4:	641a      	str	r2, [r3, #64]	; 0x40
 80069f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069fc:	9301      	str	r3, [sp, #4]
 80069fe:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006a00:	2007      	movs	r0, #7
 8006a02:	f7fc f98f 	bl	8002d24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006a06:	b003      	add	sp, #12
 8006a08:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a0c:	40023800 	.word	0x40023800

08006a10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006a10:	b500      	push	{lr}
 8006a12:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a14:	2300      	movs	r3, #0
 8006a16:	9303      	str	r3, [sp, #12]
 8006a18:	9304      	str	r3, [sp, #16]
 8006a1a:	9305      	str	r3, [sp, #20]
 8006a1c:	9306      	str	r3, [sp, #24]
 8006a1e:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8006a20:	6802      	ldr	r2, [r0, #0]
 8006a22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a26:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d002      	beq.n	8006a34 <HAL_ADC_MspInit+0x24>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006a2e:	b009      	add	sp, #36	; 0x24
 8006a30:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006a34:	2100      	movs	r1, #0
 8006a36:	9101      	str	r1, [sp, #4]
 8006a38:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8006a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a42:	645a      	str	r2, [r3, #68]	; 0x44
 8006a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a46:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8006a4a:	9201      	str	r2, [sp, #4]
 8006a4c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a4e:	9102      	str	r1, [sp, #8]
 8006a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a52:	f042 0202 	orr.w	r2, r2, #2
 8006a56:	631a      	str	r2, [r3, #48]	; 0x30
 8006a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	9302      	str	r3, [sp, #8]
 8006a60:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006a62:	2301      	movs	r3, #1
 8006a64:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a66:	2303      	movs	r3, #3
 8006a68:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a6a:	a903      	add	r1, sp, #12
 8006a6c:	4801      	ldr	r0, [pc, #4]	; (8006a74 <HAL_ADC_MspInit+0x64>)
 8006a6e:	f7fc fb95 	bl	800319c <HAL_GPIO_Init>
}
 8006a72:	e7dc      	b.n	8006a2e <HAL_ADC_MspInit+0x1e>
 8006a74:	40020400 	.word	0x40020400

08006a78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006a78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a7c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a7e:	2300      	movs	r3, #0
 8006a80:	9303      	str	r3, [sp, #12]
 8006a82:	9304      	str	r3, [sp, #16]
 8006a84:	9305      	str	r3, [sp, #20]
 8006a86:	9306      	str	r3, [sp, #24]
 8006a88:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 8006a8a:	6802      	ldr	r2, [r0, #0]
 8006a8c:	4b26      	ldr	r3, [pc, #152]	; (8006b28 <HAL_I2C_MspInit+0xb0>)
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d002      	beq.n	8006a98 <HAL_I2C_MspInit+0x20>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006a92:	b009      	add	sp, #36	; 0x24
 8006a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a98:	2500      	movs	r5, #0
 8006a9a:	9501      	str	r5, [sp, #4]
 8006a9c:	4c23      	ldr	r4, [pc, #140]	; (8006b2c <HAL_I2C_MspInit+0xb4>)
 8006a9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006aa0:	f043 0302 	orr.w	r3, r3, #2
 8006aa4:	6323      	str	r3, [r4, #48]	; 0x30
 8006aa6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	9301      	str	r3, [sp, #4]
 8006aae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ab4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006ab6:	f04f 0912 	mov.w	r9, #18
 8006aba:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006abe:	2601      	movs	r6, #1
 8006ac0:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ac2:	f04f 0803 	mov.w	r8, #3
 8006ac6:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006aca:	2304      	movs	r3, #4
 8006acc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ace:	4f18      	ldr	r7, [pc, #96]	; (8006b30 <HAL_I2C_MspInit+0xb8>)
 8006ad0:	a903      	add	r1, sp, #12
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	f7fc fb62 	bl	800319c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006ad8:	2308      	movs	r3, #8
 8006ada:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006adc:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ae0:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ae2:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8006ae6:	2309      	movs	r3, #9
 8006ae8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006aea:	a903      	add	r1, sp, #12
 8006aec:	4638      	mov	r0, r7
 8006aee:	f7fc fb55 	bl	800319c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006af2:	9502      	str	r5, [sp, #8]
 8006af4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006af6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006afa:	6423      	str	r3, [r4, #64]	; 0x40
 8006afc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b02:	9302      	str	r3, [sp, #8]
 8006b04:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 1);
 8006b06:	4632      	mov	r2, r6
 8006b08:	4629      	mov	r1, r5
 8006b0a:	2021      	movs	r0, #33	; 0x21
 8006b0c:	f7fc f91c 	bl	8002d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8006b10:	2021      	movs	r0, #33	; 0x21
 8006b12:	f7fc f94d 	bl	8002db0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 1);
 8006b16:	4632      	mov	r2, r6
 8006b18:	4629      	mov	r1, r5
 8006b1a:	2022      	movs	r0, #34	; 0x22
 8006b1c:	f7fc f914 	bl	8002d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8006b20:	2022      	movs	r0, #34	; 0x22
 8006b22:	f7fc f945 	bl	8002db0 <HAL_NVIC_EnableIRQ>
}
 8006b26:	e7b4      	b.n	8006a92 <HAL_I2C_MspInit+0x1a>
 8006b28:	40005800 	.word	0x40005800
 8006b2c:	40023800 	.word	0x40023800
 8006b30:	40020400 	.word	0x40020400

08006b34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b36:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b38:	2300      	movs	r3, #0
 8006b3a:	9303      	str	r3, [sp, #12]
 8006b3c:	9304      	str	r3, [sp, #16]
 8006b3e:	9305      	str	r3, [sp, #20]
 8006b40:	9306      	str	r3, [sp, #24]
 8006b42:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 8006b44:	6802      	ldr	r2, [r0, #0]
 8006b46:	4b1f      	ldr	r3, [pc, #124]	; (8006bc4 <HAL_SPI_MspInit+0x90>)
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d001      	beq.n	8006b50 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006b4c:	b009      	add	sp, #36	; 0x24
 8006b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006b50:	2400      	movs	r4, #0
 8006b52:	9400      	str	r4, [sp, #0]
 8006b54:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8006b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b5e:	641a      	str	r2, [r3, #64]	; 0x40
 8006b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b62:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8006b66:	9200      	str	r2, [sp, #0]
 8006b68:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b6a:	9401      	str	r4, [sp, #4]
 8006b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b6e:	f042 0204 	orr.w	r2, r2, #4
 8006b72:	631a      	str	r2, [r3, #48]	; 0x30
 8006b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b76:	f002 0204 	and.w	r2, r2, #4
 8006b7a:	9201      	str	r2, [sp, #4]
 8006b7c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b7e:	9402      	str	r4, [sp, #8]
 8006b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b82:	f042 0202 	orr.w	r2, r2, #2
 8006b86:	631a      	str	r2, [r3, #48]	; 0x30
 8006b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	9302      	str	r3, [sp, #8]
 8006b90:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006b92:	2304      	movs	r3, #4
 8006b94:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b96:	2702      	movs	r7, #2
 8006b98:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b9a:	2603      	movs	r6, #3
 8006b9c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006b9e:	2505      	movs	r5, #5
 8006ba0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ba2:	a903      	add	r1, sp, #12
 8006ba4:	4808      	ldr	r0, [pc, #32]	; (8006bc8 <HAL_SPI_MspInit+0x94>)
 8006ba6:	f7fc faf9 	bl	800319c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8006baa:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8006bae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bb0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bb4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006bb6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bb8:	a903      	add	r1, sp, #12
 8006bba:	4804      	ldr	r0, [pc, #16]	; (8006bcc <HAL_SPI_MspInit+0x98>)
 8006bbc:	f7fc faee 	bl	800319c <HAL_GPIO_Init>
}
 8006bc0:	e7c4      	b.n	8006b4c <HAL_SPI_MspInit+0x18>
 8006bc2:	bf00      	nop
 8006bc4:	40003800 	.word	0x40003800
 8006bc8:	40020800 	.word	0x40020800
 8006bcc:	40020400 	.word	0x40020400

08006bd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006bd0:	b510      	push	{r4, lr}
 8006bd2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	9303      	str	r3, [sp, #12]
 8006bd8:	9304      	str	r3, [sp, #16]
 8006bda:	9305      	str	r3, [sp, #20]
 8006bdc:	9306      	str	r3, [sp, #24]
 8006bde:	9307      	str	r3, [sp, #28]
  if(htim_base->Instance==TIM3)
 8006be0:	6802      	ldr	r2, [r0, #0]
 8006be2:	4b17      	ldr	r3, [pc, #92]	; (8006c40 <HAL_TIM_Base_MspInit+0x70>)
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d001      	beq.n	8006bec <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006be8:	b008      	add	sp, #32
 8006bea:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006bec:	2400      	movs	r4, #0
 8006bee:	9401      	str	r4, [sp, #4]
 8006bf0:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 8006bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bf6:	f042 0202 	orr.w	r2, r2, #2
 8006bfa:	641a      	str	r2, [r3, #64]	; 0x40
 8006bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bfe:	f002 0202 	and.w	r2, r2, #2
 8006c02:	9201      	str	r2, [sp, #4]
 8006c04:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c06:	9402      	str	r4, [sp, #8]
 8006c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c0a:	f042 0201 	orr.w	r2, r2, #1
 8006c0e:	631a      	str	r2, [r3, #48]	; 0x30
 8006c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	9302      	str	r3, [sp, #8]
 8006c18:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006c1a:	2380      	movs	r3, #128	; 0x80
 8006c1c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c1e:	2302      	movs	r3, #2
 8006c20:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006c22:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c24:	a903      	add	r1, sp, #12
 8006c26:	4807      	ldr	r0, [pc, #28]	; (8006c44 <HAL_TIM_Base_MspInit+0x74>)
 8006c28:	f7fc fab8 	bl	800319c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006c2c:	4622      	mov	r2, r4
 8006c2e:	4621      	mov	r1, r4
 8006c30:	201d      	movs	r0, #29
 8006c32:	f7fc f889 	bl	8002d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006c36:	201d      	movs	r0, #29
 8006c38:	f7fc f8ba 	bl	8002db0 <HAL_NVIC_EnableIRQ>
}
 8006c3c:	e7d4      	b.n	8006be8 <HAL_TIM_Base_MspInit+0x18>
 8006c3e:	bf00      	nop
 8006c40:	40000400 	.word	0x40000400
 8006c44:	40020000 	.word	0x40020000

08006c48 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM4)
 8006c48:	6802      	ldr	r2, [r0, #0]
 8006c4a:	4b0e      	ldr	r3, [pc, #56]	; (8006c84 <HAL_TIM_PWM_MspInit+0x3c>)
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d000      	beq.n	8006c52 <HAL_TIM_PWM_MspInit+0xa>
 8006c50:	4770      	bx	lr
{
 8006c52:	b500      	push	{lr}
 8006c54:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006c56:	2100      	movs	r1, #0
 8006c58:	9101      	str	r1, [sp, #4]
 8006c5a:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8006c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c60:	f042 0204 	orr.w	r2, r2, #4
 8006c64:	641a      	str	r2, [r3, #64]	; 0x40
 8006c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	9301      	str	r3, [sp, #4]
 8006c6e:	9b01      	ldr	r3, [sp, #4]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8006c70:	460a      	mov	r2, r1
 8006c72:	201e      	movs	r0, #30
 8006c74:	f7fc f868 	bl	8002d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006c78:	201e      	movs	r0, #30
 8006c7a:	f7fc f899 	bl	8002db0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006c7e:	b003      	add	sp, #12
 8006c80:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c84:	40000800 	.word	0x40000800

08006c88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006c88:	b500      	push	{lr}
 8006c8a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	9301      	str	r3, [sp, #4]
 8006c90:	9302      	str	r3, [sp, #8]
 8006c92:	9303      	str	r3, [sp, #12]
 8006c94:	9304      	str	r3, [sp, #16]
 8006c96:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM4)
 8006c98:	6802      	ldr	r2, [r0, #0]
 8006c9a:	4b0e      	ldr	r3, [pc, #56]	; (8006cd4 <HAL_TIM_MspPostInit+0x4c>)
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d002      	beq.n	8006ca6 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8006ca0:	b007      	add	sp, #28
 8006ca2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	4b0b      	ldr	r3, [pc, #44]	; (8006cd8 <HAL_TIM_MspPostInit+0x50>)
 8006cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cae:	f042 0202 	orr.w	r2, r2, #2
 8006cb2:	631a      	str	r2, [r3, #48]	; 0x30
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8006cbe:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006cc2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006cc8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cca:	a901      	add	r1, sp, #4
 8006ccc:	4803      	ldr	r0, [pc, #12]	; (8006cdc <HAL_TIM_MspPostInit+0x54>)
 8006cce:	f7fc fa65 	bl	800319c <HAL_GPIO_Init>
}
 8006cd2:	e7e5      	b.n	8006ca0 <HAL_TIM_MspPostInit+0x18>
 8006cd4:	40000800 	.word	0x40000800
 8006cd8:	40023800 	.word	0x40023800
 8006cdc:	40020400 	.word	0x40020400

08006ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006ce0:	b530      	push	{r4, r5, lr}
 8006ce2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	9305      	str	r3, [sp, #20]
 8006ce8:	9306      	str	r3, [sp, #24]
 8006cea:	9307      	str	r3, [sp, #28]
 8006cec:	9308      	str	r3, [sp, #32]
 8006cee:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART2)
 8006cf0:	6803      	ldr	r3, [r0, #0]
 8006cf2:	4a47      	ldr	r2, [pc, #284]	; (8006e10 <HAL_UART_MspInit+0x130>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d005      	beq.n	8006d04 <HAL_UART_MspInit+0x24>
 8006cf8:	4604      	mov	r4, r0

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8006cfa:	4a46      	ldr	r2, [pc, #280]	; (8006e14 <HAL_UART_MspInit+0x134>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d026      	beq.n	8006d4e <HAL_UART_MspInit+0x6e>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006d00:	b00b      	add	sp, #44	; 0x2c
 8006d02:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8006d04:	2100      	movs	r1, #0
 8006d06:	9101      	str	r1, [sp, #4]
 8006d08:	4b43      	ldr	r3, [pc, #268]	; (8006e18 <HAL_UART_MspInit+0x138>)
 8006d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d0c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006d10:	641a      	str	r2, [r3, #64]	; 0x40
 8006d12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d14:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8006d18:	9201      	str	r2, [sp, #4]
 8006d1a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d1c:	9102      	str	r1, [sp, #8]
 8006d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d20:	f042 0201 	orr.w	r2, r2, #1
 8006d24:	631a      	str	r2, [r3, #48]	; 0x30
 8006d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	9302      	str	r3, [sp, #8]
 8006d2e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006d30:	230c      	movs	r3, #12
 8006d32:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d34:	2302      	movs	r3, #2
 8006d36:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006d40:	2307      	movs	r3, #7
 8006d42:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d44:	a905      	add	r1, sp, #20
 8006d46:	4835      	ldr	r0, [pc, #212]	; (8006e1c <HAL_UART_MspInit+0x13c>)
 8006d48:	f7fc fa28 	bl	800319c <HAL_GPIO_Init>
 8006d4c:	e7d8      	b.n	8006d00 <HAL_UART_MspInit+0x20>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006d4e:	2500      	movs	r5, #0
 8006d50:	9503      	str	r5, [sp, #12]
 8006d52:	4b31      	ldr	r3, [pc, #196]	; (8006e18 <HAL_UART_MspInit+0x138>)
 8006d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d56:	f042 0220 	orr.w	r2, r2, #32
 8006d5a:	645a      	str	r2, [r3, #68]	; 0x44
 8006d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d5e:	f002 0220 	and.w	r2, r2, #32
 8006d62:	9203      	str	r2, [sp, #12]
 8006d64:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d66:	9504      	str	r5, [sp, #16]
 8006d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d6a:	f042 0204 	orr.w	r2, r2, #4
 8006d6e:	631a      	str	r2, [r3, #48]	; 0x30
 8006d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d72:	f003 0304 	and.w	r3, r3, #4
 8006d76:	9304      	str	r3, [sp, #16]
 8006d78:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006d7a:	23c0      	movs	r3, #192	; 0xc0
 8006d7c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d7e:	2302      	movs	r3, #2
 8006d80:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d82:	2301      	movs	r3, #1
 8006d84:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d86:	2303      	movs	r3, #3
 8006d88:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006d8a:	2308      	movs	r3, #8
 8006d8c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d8e:	a905      	add	r1, sp, #20
 8006d90:	4823      	ldr	r0, [pc, #140]	; (8006e20 <HAL_UART_MspInit+0x140>)
 8006d92:	f7fc fa03 	bl	800319c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006d96:	4823      	ldr	r0, [pc, #140]	; (8006e24 <HAL_UART_MspInit+0x144>)
 8006d98:	4b23      	ldr	r3, [pc, #140]	; (8006e28 <HAL_UART_MspInit+0x148>)
 8006d9a:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8006d9c:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8006da0:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006da2:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006da4:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006daa:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006dac:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006dae:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8006db0:	61c5      	str	r5, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006db2:	6205      	str	r5, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006db4:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006db6:	f7fc f885 	bl	8002ec4 <HAL_DMA_Init>
 8006dba:	bb18      	cbnz	r0, 8006e04 <HAL_UART_MspInit+0x124>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006dbc:	4b19      	ldr	r3, [pc, #100]	; (8006e24 <HAL_UART_MspInit+0x144>)
 8006dbe:	6363      	str	r3, [r4, #52]	; 0x34
 8006dc0:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006dc2:	481a      	ldr	r0, [pc, #104]	; (8006e2c <HAL_UART_MspInit+0x14c>)
 8006dc4:	4b1a      	ldr	r3, [pc, #104]	; (8006e30 <HAL_UART_MspInit+0x150>)
 8006dc6:	6003      	str	r3, [r0, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8006dc8:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8006dcc:	6043      	str	r3, [r0, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006dce:	2340      	movs	r3, #64	; 0x40
 8006dd0:	6083      	str	r3, [r0, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60c3      	str	r3, [r0, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006dd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006dda:	6102      	str	r2, [r0, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006ddc:	6143      	str	r3, [r0, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006dde:	6183      	str	r3, [r0, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8006de0:	61c3      	str	r3, [r0, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006de2:	6203      	str	r3, [r0, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006de4:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006de6:	f7fc f86d 	bl	8002ec4 <HAL_DMA_Init>
 8006dea:	b970      	cbnz	r0, 8006e0a <HAL_UART_MspInit+0x12a>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8006dec:	4b0f      	ldr	r3, [pc, #60]	; (8006e2c <HAL_UART_MspInit+0x14c>)
 8006dee:	6323      	str	r3, [r4, #48]	; 0x30
 8006df0:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8006df2:	2200      	movs	r2, #0
 8006df4:	4611      	mov	r1, r2
 8006df6:	2047      	movs	r0, #71	; 0x47
 8006df8:	f7fb ffa6 	bl	8002d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006dfc:	2047      	movs	r0, #71	; 0x47
 8006dfe:	f7fb ffd7 	bl	8002db0 <HAL_NVIC_EnableIRQ>
}
 8006e02:	e77d      	b.n	8006d00 <HAL_UART_MspInit+0x20>
      Error_Handler();
 8006e04:	f7ff fde2 	bl	80069cc <Error_Handler>
 8006e08:	e7d8      	b.n	8006dbc <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8006e0a:	f7ff fddf 	bl	80069cc <Error_Handler>
 8006e0e:	e7ed      	b.n	8006dec <HAL_UART_MspInit+0x10c>
 8006e10:	40004400 	.word	0x40004400
 8006e14:	40011400 	.word	0x40011400
 8006e18:	40023800 	.word	0x40023800
 8006e1c:	40020000 	.word	0x40020000
 8006e20:	40020800 	.word	0x40020800
 8006e24:	200003f0 	.word	0x200003f0
 8006e28:	40026428 	.word	0x40026428
 8006e2c:	20000780 	.word	0x20000780
 8006e30:	400264a0 	.word	0x400264a0

08006e34 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006e34:	4770      	bx	lr

08006e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006e36:	e7fe      	b.n	8006e36 <HardFault_Handler>

08006e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006e38:	e7fe      	b.n	8006e38 <MemManage_Handler>

08006e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006e3a:	e7fe      	b.n	8006e3a <BusFault_Handler>

08006e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006e3c:	e7fe      	b.n	8006e3c <UsageFault_Handler>

08006e3e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006e3e:	4770      	bx	lr

08006e40 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006e40:	4770      	bx	lr

08006e42 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006e42:	4770      	bx	lr

08006e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006e44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006e46:	f7fb fdaf 	bl	80029a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006e4a:	bd08      	pop	{r3, pc}

08006e4c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006e4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8006e4e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006e52:	f7fc fa85 	bl	8003360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006e56:	bd08      	pop	{r3, pc}

08006e58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006e58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006e5a:	4802      	ldr	r0, [pc, #8]	; (8006e64 <TIM3_IRQHandler+0xc>)
 8006e5c:	f7fe fa33 	bl	80052c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
  /* USER CODE END TIM3_IRQn 1 */
}
 8006e60:	bd08      	pop	{r3, pc}
 8006e62:	bf00      	nop
 8006e64:	20000740 	.word	0x20000740

08006e68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006e68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006e6a:	4802      	ldr	r0, [pc, #8]	; (8006e74 <TIM4_IRQHandler+0xc>)
 8006e6c:	f7fe fa2b 	bl	80052c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006e70:	bd08      	pop	{r3, pc}
 8006e72:	bf00      	nop
 8006e74:	200004a8 	.word	0x200004a8

08006e78 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8006e78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8006e7a:	4802      	ldr	r0, [pc, #8]	; (8006e84 <I2C2_EV_IRQHandler+0xc>)
 8006e7c:	f7fd fce8 	bl	8004850 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8006e80:	bd08      	pop	{r3, pc}
 8006e82:	bf00      	nop
 8006e84:	20000318 	.word	0x20000318

08006e88 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8006e88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8006e8a:	4802      	ldr	r0, [pc, #8]	; (8006e94 <I2C2_ER_IRQHandler+0xc>)
 8006e8c:	f7fd fda6 	bl	80049dc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8006e90:	bd08      	pop	{r3, pc}
 8006e92:	bf00      	nop
 8006e94:	20000318 	.word	0x20000318

08006e98 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8006e98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8006e9a:	4802      	ldr	r0, [pc, #8]	; (8006ea4 <DMA2_Stream1_IRQHandler+0xc>)
 8006e9c:	f7fc f88c 	bl	8002fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8006ea0:	bd08      	pop	{r3, pc}
 8006ea2:	bf00      	nop
 8006ea4:	200003f0 	.word	0x200003f0

08006ea8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006ea8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8006eaa:	4802      	ldr	r0, [pc, #8]	; (8006eb4 <DMA2_Stream6_IRQHandler+0xc>)
 8006eac:	f7fc f884 	bl	8002fb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006eb0:	bd08      	pop	{r3, pc}
 8006eb2:	bf00      	nop
 8006eb4:	20000780 	.word	0x20000780

08006eb8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8006eb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8006eba:	4802      	ldr	r0, [pc, #8]	; (8006ec4 <USART6_IRQHandler+0xc>)
 8006ebc:	f7ff f8d4 	bl	8006068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8006ec0:	bd08      	pop	{r3, pc}
 8006ec2:	bf00      	nop
 8006ec4:	20000834 	.word	0x20000834

08006ec8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006ec8:	b570      	push	{r4, r5, r6, lr}
 8006eca:	460d      	mov	r5, r1
 8006ecc:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ece:	2400      	movs	r4, #0
 8006ed0:	e004      	b.n	8006edc <_read+0x14>
	{
		*ptr++ = __io_getchar();
 8006ed2:	f3af 8000 	nop.w
 8006ed6:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ed8:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 8006eda:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006edc:	42b4      	cmp	r4, r6
 8006ede:	dbf8      	blt.n	8006ed2 <_read+0xa>
	}

return len;
}
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	bd70      	pop	{r4, r5, r6, pc}

08006ee4 <_close>:
}

int _close(int file)
{
	return -1;
}
 8006ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ee8:	4770      	bx	lr

08006eea <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8006eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006eee:	604b      	str	r3, [r1, #4]
	return 0;
}
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	4770      	bx	lr

08006ef4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8006ef4:	2001      	movs	r0, #1
 8006ef6:	4770      	bx	lr

08006ef8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8006ef8:	2000      	movs	r0, #0
 8006efa:	4770      	bx	lr

08006efc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006efc:	b508      	push	{r3, lr}
 8006efe:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006f00:	4a0b      	ldr	r2, [pc, #44]	; (8006f30 <_sbrk+0x34>)
 8006f02:	6812      	ldr	r2, [r2, #0]
 8006f04:	b142      	cbz	r2, 8006f18 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8006f06:	4a0a      	ldr	r2, [pc, #40]	; (8006f30 <_sbrk+0x34>)
 8006f08:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8006f0a:	4403      	add	r3, r0
 8006f0c:	466a      	mov	r2, sp
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d806      	bhi.n	8006f20 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8006f12:	4a07      	ldr	r2, [pc, #28]	; (8006f30 <_sbrk+0x34>)
 8006f14:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8006f16:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8006f18:	4a05      	ldr	r2, [pc, #20]	; (8006f30 <_sbrk+0x34>)
 8006f1a:	4906      	ldr	r1, [pc, #24]	; (8006f34 <_sbrk+0x38>)
 8006f1c:	6011      	str	r1, [r2, #0]
 8006f1e:	e7f2      	b.n	8006f06 <_sbrk+0xa>
		errno = ENOMEM;
 8006f20:	f000 f85a 	bl	8006fd8 <__errno>
 8006f24:	230c      	movs	r3, #12
 8006f26:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8006f28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f2c:	e7f3      	b.n	8006f16 <_sbrk+0x1a>
 8006f2e:	bf00      	nop
 8006f30:	200002ec 	.word	0x200002ec
 8006f34:	200008e0 	.word	0x200008e0

08006f38 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006f38:	490f      	ldr	r1, [pc, #60]	; (8006f78 <SystemInit+0x40>)
 8006f3a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006f3e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006f46:	4b0d      	ldr	r3, [pc, #52]	; (8006f7c <SystemInit+0x44>)
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	f042 0201 	orr.w	r2, r2, #1
 8006f4e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006f50:	2000      	movs	r0, #0
 8006f52:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8006f5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f5e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006f60:	4a07      	ldr	r2, [pc, #28]	; (8006f80 <SystemInit+0x48>)
 8006f62:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f6a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006f6c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006f6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f72:	608b      	str	r3, [r1, #8]
#endif
}
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	e000ed00 	.word	0xe000ed00
 8006f7c:	40023800 	.word	0x40023800
 8006f80:	24003010 	.word	0x24003010

08006f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006fbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006f88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006f8a:	e003      	b.n	8006f94 <LoopCopyDataInit>

08006f8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006f8c:	4b0c      	ldr	r3, [pc, #48]	; (8006fc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006f8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006f90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006f92:	3104      	adds	r1, #4

08006f94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006f94:	480b      	ldr	r0, [pc, #44]	; (8006fc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006f96:	4b0c      	ldr	r3, [pc, #48]	; (8006fc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006f98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006f9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006f9c:	d3f6      	bcc.n	8006f8c <CopyDataInit>
  ldr  r2, =_sbss
 8006f9e:	4a0b      	ldr	r2, [pc, #44]	; (8006fcc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006fa0:	e002      	b.n	8006fa8 <LoopFillZerobss>

08006fa2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006fa2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006fa4:	f842 3b04 	str.w	r3, [r2], #4

08006fa8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006fa8:	4b09      	ldr	r3, [pc, #36]	; (8006fd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006faa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006fac:	d3f9      	bcc.n	8006fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006fae:	f7ff ffc3 	bl	8006f38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006fb2:	f000 f817 	bl	8006fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006fb6:	f7ff fb35 	bl	8006624 <main>
  bx  lr    
 8006fba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006fbc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006fc0:	0800b8c0 	.word	0x0800b8c0
  ldr  r0, =_sdata
 8006fc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006fc8:	2000023c 	.word	0x2000023c
  ldr  r2, =_sbss
 8006fcc:	2000023c 	.word	0x2000023c
  ldr  r3, = _ebss
 8006fd0:	200008dc 	.word	0x200008dc

08006fd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006fd4:	e7fe      	b.n	8006fd4 <ADC_IRQHandler>
	...

08006fd8 <__errno>:
 8006fd8:	4b01      	ldr	r3, [pc, #4]	; (8006fe0 <__errno+0x8>)
 8006fda:	6818      	ldr	r0, [r3, #0]
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	20000068 	.word	0x20000068

08006fe4 <__libc_init_array>:
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	4e0d      	ldr	r6, [pc, #52]	; (800701c <__libc_init_array+0x38>)
 8006fe8:	4c0d      	ldr	r4, [pc, #52]	; (8007020 <__libc_init_array+0x3c>)
 8006fea:	1ba4      	subs	r4, r4, r6
 8006fec:	10a4      	asrs	r4, r4, #2
 8006fee:	2500      	movs	r5, #0
 8006ff0:	42a5      	cmp	r5, r4
 8006ff2:	d109      	bne.n	8007008 <__libc_init_array+0x24>
 8006ff4:	4e0b      	ldr	r6, [pc, #44]	; (8007024 <__libc_init_array+0x40>)
 8006ff6:	4c0c      	ldr	r4, [pc, #48]	; (8007028 <__libc_init_array+0x44>)
 8006ff8:	f004 f948 	bl	800b28c <_init>
 8006ffc:	1ba4      	subs	r4, r4, r6
 8006ffe:	10a4      	asrs	r4, r4, #2
 8007000:	2500      	movs	r5, #0
 8007002:	42a5      	cmp	r5, r4
 8007004:	d105      	bne.n	8007012 <__libc_init_array+0x2e>
 8007006:	bd70      	pop	{r4, r5, r6, pc}
 8007008:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800700c:	4798      	blx	r3
 800700e:	3501      	adds	r5, #1
 8007010:	e7ee      	b.n	8006ff0 <__libc_init_array+0xc>
 8007012:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007016:	4798      	blx	r3
 8007018:	3501      	adds	r5, #1
 800701a:	e7f2      	b.n	8007002 <__libc_init_array+0x1e>
 800701c:	0800b8b8 	.word	0x0800b8b8
 8007020:	0800b8b8 	.word	0x0800b8b8
 8007024:	0800b8b8 	.word	0x0800b8b8
 8007028:	0800b8bc 	.word	0x0800b8bc

0800702c <memcpy>:
 800702c:	b510      	push	{r4, lr}
 800702e:	1e43      	subs	r3, r0, #1
 8007030:	440a      	add	r2, r1
 8007032:	4291      	cmp	r1, r2
 8007034:	d100      	bne.n	8007038 <memcpy+0xc>
 8007036:	bd10      	pop	{r4, pc}
 8007038:	f811 4b01 	ldrb.w	r4, [r1], #1
 800703c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007040:	e7f7      	b.n	8007032 <memcpy+0x6>

08007042 <memset>:
 8007042:	4402      	add	r2, r0
 8007044:	4603      	mov	r3, r0
 8007046:	4293      	cmp	r3, r2
 8007048:	d100      	bne.n	800704c <memset+0xa>
 800704a:	4770      	bx	lr
 800704c:	f803 1b01 	strb.w	r1, [r3], #1
 8007050:	e7f9      	b.n	8007046 <memset+0x4>

08007052 <__cvt>:
 8007052:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007056:	ec55 4b10 	vmov	r4, r5, d0
 800705a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800705c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007060:	2d00      	cmp	r5, #0
 8007062:	460e      	mov	r6, r1
 8007064:	4691      	mov	r9, r2
 8007066:	4619      	mov	r1, r3
 8007068:	bfb8      	it	lt
 800706a:	4622      	movlt	r2, r4
 800706c:	462b      	mov	r3, r5
 800706e:	f027 0720 	bic.w	r7, r7, #32
 8007072:	bfbb      	ittet	lt
 8007074:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007078:	461d      	movlt	r5, r3
 800707a:	2300      	movge	r3, #0
 800707c:	232d      	movlt	r3, #45	; 0x2d
 800707e:	bfb8      	it	lt
 8007080:	4614      	movlt	r4, r2
 8007082:	2f46      	cmp	r7, #70	; 0x46
 8007084:	700b      	strb	r3, [r1, #0]
 8007086:	d004      	beq.n	8007092 <__cvt+0x40>
 8007088:	2f45      	cmp	r7, #69	; 0x45
 800708a:	d100      	bne.n	800708e <__cvt+0x3c>
 800708c:	3601      	adds	r6, #1
 800708e:	2102      	movs	r1, #2
 8007090:	e000      	b.n	8007094 <__cvt+0x42>
 8007092:	2103      	movs	r1, #3
 8007094:	ab03      	add	r3, sp, #12
 8007096:	9301      	str	r3, [sp, #4]
 8007098:	ab02      	add	r3, sp, #8
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	4632      	mov	r2, r6
 800709e:	4653      	mov	r3, sl
 80070a0:	ec45 4b10 	vmov	d0, r4, r5
 80070a4:	f000 fdfc 	bl	8007ca0 <_dtoa_r>
 80070a8:	2f47      	cmp	r7, #71	; 0x47
 80070aa:	4680      	mov	r8, r0
 80070ac:	d102      	bne.n	80070b4 <__cvt+0x62>
 80070ae:	f019 0f01 	tst.w	r9, #1
 80070b2:	d026      	beq.n	8007102 <__cvt+0xb0>
 80070b4:	2f46      	cmp	r7, #70	; 0x46
 80070b6:	eb08 0906 	add.w	r9, r8, r6
 80070ba:	d111      	bne.n	80070e0 <__cvt+0x8e>
 80070bc:	f898 3000 	ldrb.w	r3, [r8]
 80070c0:	2b30      	cmp	r3, #48	; 0x30
 80070c2:	d10a      	bne.n	80070da <__cvt+0x88>
 80070c4:	2200      	movs	r2, #0
 80070c6:	2300      	movs	r3, #0
 80070c8:	4620      	mov	r0, r4
 80070ca:	4629      	mov	r1, r5
 80070cc:	f7f9 fed6 	bl	8000e7c <__aeabi_dcmpeq>
 80070d0:	b918      	cbnz	r0, 80070da <__cvt+0x88>
 80070d2:	f1c6 0601 	rsb	r6, r6, #1
 80070d6:	f8ca 6000 	str.w	r6, [sl]
 80070da:	f8da 3000 	ldr.w	r3, [sl]
 80070de:	4499      	add	r9, r3
 80070e0:	2200      	movs	r2, #0
 80070e2:	2300      	movs	r3, #0
 80070e4:	4620      	mov	r0, r4
 80070e6:	4629      	mov	r1, r5
 80070e8:	f7f9 fec8 	bl	8000e7c <__aeabi_dcmpeq>
 80070ec:	b938      	cbnz	r0, 80070fe <__cvt+0xac>
 80070ee:	2230      	movs	r2, #48	; 0x30
 80070f0:	9b03      	ldr	r3, [sp, #12]
 80070f2:	454b      	cmp	r3, r9
 80070f4:	d205      	bcs.n	8007102 <__cvt+0xb0>
 80070f6:	1c59      	adds	r1, r3, #1
 80070f8:	9103      	str	r1, [sp, #12]
 80070fa:	701a      	strb	r2, [r3, #0]
 80070fc:	e7f8      	b.n	80070f0 <__cvt+0x9e>
 80070fe:	f8cd 900c 	str.w	r9, [sp, #12]
 8007102:	9b03      	ldr	r3, [sp, #12]
 8007104:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007106:	eba3 0308 	sub.w	r3, r3, r8
 800710a:	4640      	mov	r0, r8
 800710c:	6013      	str	r3, [r2, #0]
 800710e:	b004      	add	sp, #16
 8007110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007114 <__exponent>:
 8007114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007116:	2900      	cmp	r1, #0
 8007118:	4604      	mov	r4, r0
 800711a:	bfba      	itte	lt
 800711c:	4249      	neglt	r1, r1
 800711e:	232d      	movlt	r3, #45	; 0x2d
 8007120:	232b      	movge	r3, #43	; 0x2b
 8007122:	2909      	cmp	r1, #9
 8007124:	f804 2b02 	strb.w	r2, [r4], #2
 8007128:	7043      	strb	r3, [r0, #1]
 800712a:	dd20      	ble.n	800716e <__exponent+0x5a>
 800712c:	f10d 0307 	add.w	r3, sp, #7
 8007130:	461f      	mov	r7, r3
 8007132:	260a      	movs	r6, #10
 8007134:	fb91 f5f6 	sdiv	r5, r1, r6
 8007138:	fb06 1115 	mls	r1, r6, r5, r1
 800713c:	3130      	adds	r1, #48	; 0x30
 800713e:	2d09      	cmp	r5, #9
 8007140:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007144:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007148:	4629      	mov	r1, r5
 800714a:	dc09      	bgt.n	8007160 <__exponent+0x4c>
 800714c:	3130      	adds	r1, #48	; 0x30
 800714e:	3b02      	subs	r3, #2
 8007150:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007154:	42bb      	cmp	r3, r7
 8007156:	4622      	mov	r2, r4
 8007158:	d304      	bcc.n	8007164 <__exponent+0x50>
 800715a:	1a10      	subs	r0, r2, r0
 800715c:	b003      	add	sp, #12
 800715e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007160:	4613      	mov	r3, r2
 8007162:	e7e7      	b.n	8007134 <__exponent+0x20>
 8007164:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007168:	f804 2b01 	strb.w	r2, [r4], #1
 800716c:	e7f2      	b.n	8007154 <__exponent+0x40>
 800716e:	2330      	movs	r3, #48	; 0x30
 8007170:	4419      	add	r1, r3
 8007172:	7083      	strb	r3, [r0, #2]
 8007174:	1d02      	adds	r2, r0, #4
 8007176:	70c1      	strb	r1, [r0, #3]
 8007178:	e7ef      	b.n	800715a <__exponent+0x46>
	...

0800717c <_printf_float>:
 800717c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007180:	b08d      	sub	sp, #52	; 0x34
 8007182:	460c      	mov	r4, r1
 8007184:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007188:	4616      	mov	r6, r2
 800718a:	461f      	mov	r7, r3
 800718c:	4605      	mov	r5, r0
 800718e:	f001 fcb9 	bl	8008b04 <_localeconv_r>
 8007192:	6803      	ldr	r3, [r0, #0]
 8007194:	9304      	str	r3, [sp, #16]
 8007196:	4618      	mov	r0, r3
 8007198:	f7f9 fdc0 	bl	8000d1c <strlen>
 800719c:	2300      	movs	r3, #0
 800719e:	930a      	str	r3, [sp, #40]	; 0x28
 80071a0:	f8d8 3000 	ldr.w	r3, [r8]
 80071a4:	9005      	str	r0, [sp, #20]
 80071a6:	3307      	adds	r3, #7
 80071a8:	f023 0307 	bic.w	r3, r3, #7
 80071ac:	f103 0208 	add.w	r2, r3, #8
 80071b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80071b4:	f8d4 b000 	ldr.w	fp, [r4]
 80071b8:	f8c8 2000 	str.w	r2, [r8]
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80071c4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80071c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071cc:	9307      	str	r3, [sp, #28]
 80071ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80071d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071d6:	4ba7      	ldr	r3, [pc, #668]	; (8007474 <_printf_float+0x2f8>)
 80071d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071dc:	f7f9 fe80 	bl	8000ee0 <__aeabi_dcmpun>
 80071e0:	bb70      	cbnz	r0, 8007240 <_printf_float+0xc4>
 80071e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071e6:	4ba3      	ldr	r3, [pc, #652]	; (8007474 <_printf_float+0x2f8>)
 80071e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071ec:	f7f9 fe5a 	bl	8000ea4 <__aeabi_dcmple>
 80071f0:	bb30      	cbnz	r0, 8007240 <_printf_float+0xc4>
 80071f2:	2200      	movs	r2, #0
 80071f4:	2300      	movs	r3, #0
 80071f6:	4640      	mov	r0, r8
 80071f8:	4649      	mov	r1, r9
 80071fa:	f7f9 fe49 	bl	8000e90 <__aeabi_dcmplt>
 80071fe:	b110      	cbz	r0, 8007206 <_printf_float+0x8a>
 8007200:	232d      	movs	r3, #45	; 0x2d
 8007202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007206:	4a9c      	ldr	r2, [pc, #624]	; (8007478 <_printf_float+0x2fc>)
 8007208:	4b9c      	ldr	r3, [pc, #624]	; (800747c <_printf_float+0x300>)
 800720a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800720e:	bf8c      	ite	hi
 8007210:	4690      	movhi	r8, r2
 8007212:	4698      	movls	r8, r3
 8007214:	2303      	movs	r3, #3
 8007216:	f02b 0204 	bic.w	r2, fp, #4
 800721a:	6123      	str	r3, [r4, #16]
 800721c:	6022      	str	r2, [r4, #0]
 800721e:	f04f 0900 	mov.w	r9, #0
 8007222:	9700      	str	r7, [sp, #0]
 8007224:	4633      	mov	r3, r6
 8007226:	aa0b      	add	r2, sp, #44	; 0x2c
 8007228:	4621      	mov	r1, r4
 800722a:	4628      	mov	r0, r5
 800722c:	f000 f9e6 	bl	80075fc <_printf_common>
 8007230:	3001      	adds	r0, #1
 8007232:	f040 808d 	bne.w	8007350 <_printf_float+0x1d4>
 8007236:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800723a:	b00d      	add	sp, #52	; 0x34
 800723c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007240:	4642      	mov	r2, r8
 8007242:	464b      	mov	r3, r9
 8007244:	4640      	mov	r0, r8
 8007246:	4649      	mov	r1, r9
 8007248:	f7f9 fe4a 	bl	8000ee0 <__aeabi_dcmpun>
 800724c:	b110      	cbz	r0, 8007254 <_printf_float+0xd8>
 800724e:	4a8c      	ldr	r2, [pc, #560]	; (8007480 <_printf_float+0x304>)
 8007250:	4b8c      	ldr	r3, [pc, #560]	; (8007484 <_printf_float+0x308>)
 8007252:	e7da      	b.n	800720a <_printf_float+0x8e>
 8007254:	6861      	ldr	r1, [r4, #4]
 8007256:	1c4b      	adds	r3, r1, #1
 8007258:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800725c:	a80a      	add	r0, sp, #40	; 0x28
 800725e:	d13e      	bne.n	80072de <_printf_float+0x162>
 8007260:	2306      	movs	r3, #6
 8007262:	6063      	str	r3, [r4, #4]
 8007264:	2300      	movs	r3, #0
 8007266:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800726a:	ab09      	add	r3, sp, #36	; 0x24
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	ec49 8b10 	vmov	d0, r8, r9
 8007272:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007276:	6022      	str	r2, [r4, #0]
 8007278:	f8cd a004 	str.w	sl, [sp, #4]
 800727c:	6861      	ldr	r1, [r4, #4]
 800727e:	4628      	mov	r0, r5
 8007280:	f7ff fee7 	bl	8007052 <__cvt>
 8007284:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007288:	2b47      	cmp	r3, #71	; 0x47
 800728a:	4680      	mov	r8, r0
 800728c:	d109      	bne.n	80072a2 <_printf_float+0x126>
 800728e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007290:	1cd8      	adds	r0, r3, #3
 8007292:	db02      	blt.n	800729a <_printf_float+0x11e>
 8007294:	6862      	ldr	r2, [r4, #4]
 8007296:	4293      	cmp	r3, r2
 8007298:	dd47      	ble.n	800732a <_printf_float+0x1ae>
 800729a:	f1aa 0a02 	sub.w	sl, sl, #2
 800729e:	fa5f fa8a 	uxtb.w	sl, sl
 80072a2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80072a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072a8:	d824      	bhi.n	80072f4 <_printf_float+0x178>
 80072aa:	3901      	subs	r1, #1
 80072ac:	4652      	mov	r2, sl
 80072ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80072b2:	9109      	str	r1, [sp, #36]	; 0x24
 80072b4:	f7ff ff2e 	bl	8007114 <__exponent>
 80072b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072ba:	1813      	adds	r3, r2, r0
 80072bc:	2a01      	cmp	r2, #1
 80072be:	4681      	mov	r9, r0
 80072c0:	6123      	str	r3, [r4, #16]
 80072c2:	dc02      	bgt.n	80072ca <_printf_float+0x14e>
 80072c4:	6822      	ldr	r2, [r4, #0]
 80072c6:	07d1      	lsls	r1, r2, #31
 80072c8:	d501      	bpl.n	80072ce <_printf_float+0x152>
 80072ca:	3301      	adds	r3, #1
 80072cc:	6123      	str	r3, [r4, #16]
 80072ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d0a5      	beq.n	8007222 <_printf_float+0xa6>
 80072d6:	232d      	movs	r3, #45	; 0x2d
 80072d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072dc:	e7a1      	b.n	8007222 <_printf_float+0xa6>
 80072de:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80072e2:	f000 8177 	beq.w	80075d4 <_printf_float+0x458>
 80072e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80072ea:	d1bb      	bne.n	8007264 <_printf_float+0xe8>
 80072ec:	2900      	cmp	r1, #0
 80072ee:	d1b9      	bne.n	8007264 <_printf_float+0xe8>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e7b6      	b.n	8007262 <_printf_float+0xe6>
 80072f4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80072f8:	d119      	bne.n	800732e <_printf_float+0x1b2>
 80072fa:	2900      	cmp	r1, #0
 80072fc:	6863      	ldr	r3, [r4, #4]
 80072fe:	dd0c      	ble.n	800731a <_printf_float+0x19e>
 8007300:	6121      	str	r1, [r4, #16]
 8007302:	b913      	cbnz	r3, 800730a <_printf_float+0x18e>
 8007304:	6822      	ldr	r2, [r4, #0]
 8007306:	07d2      	lsls	r2, r2, #31
 8007308:	d502      	bpl.n	8007310 <_printf_float+0x194>
 800730a:	3301      	adds	r3, #1
 800730c:	440b      	add	r3, r1
 800730e:	6123      	str	r3, [r4, #16]
 8007310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007312:	65a3      	str	r3, [r4, #88]	; 0x58
 8007314:	f04f 0900 	mov.w	r9, #0
 8007318:	e7d9      	b.n	80072ce <_printf_float+0x152>
 800731a:	b913      	cbnz	r3, 8007322 <_printf_float+0x1a6>
 800731c:	6822      	ldr	r2, [r4, #0]
 800731e:	07d0      	lsls	r0, r2, #31
 8007320:	d501      	bpl.n	8007326 <_printf_float+0x1aa>
 8007322:	3302      	adds	r3, #2
 8007324:	e7f3      	b.n	800730e <_printf_float+0x192>
 8007326:	2301      	movs	r3, #1
 8007328:	e7f1      	b.n	800730e <_printf_float+0x192>
 800732a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800732e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007332:	4293      	cmp	r3, r2
 8007334:	db05      	blt.n	8007342 <_printf_float+0x1c6>
 8007336:	6822      	ldr	r2, [r4, #0]
 8007338:	6123      	str	r3, [r4, #16]
 800733a:	07d1      	lsls	r1, r2, #31
 800733c:	d5e8      	bpl.n	8007310 <_printf_float+0x194>
 800733e:	3301      	adds	r3, #1
 8007340:	e7e5      	b.n	800730e <_printf_float+0x192>
 8007342:	2b00      	cmp	r3, #0
 8007344:	bfd4      	ite	le
 8007346:	f1c3 0302 	rsble	r3, r3, #2
 800734a:	2301      	movgt	r3, #1
 800734c:	4413      	add	r3, r2
 800734e:	e7de      	b.n	800730e <_printf_float+0x192>
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	055a      	lsls	r2, r3, #21
 8007354:	d407      	bmi.n	8007366 <_printf_float+0x1ea>
 8007356:	6923      	ldr	r3, [r4, #16]
 8007358:	4642      	mov	r2, r8
 800735a:	4631      	mov	r1, r6
 800735c:	4628      	mov	r0, r5
 800735e:	47b8      	blx	r7
 8007360:	3001      	adds	r0, #1
 8007362:	d12b      	bne.n	80073bc <_printf_float+0x240>
 8007364:	e767      	b.n	8007236 <_printf_float+0xba>
 8007366:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800736a:	f240 80dc 	bls.w	8007526 <_printf_float+0x3aa>
 800736e:	2200      	movs	r2, #0
 8007370:	2300      	movs	r3, #0
 8007372:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007376:	f7f9 fd81 	bl	8000e7c <__aeabi_dcmpeq>
 800737a:	2800      	cmp	r0, #0
 800737c:	d033      	beq.n	80073e6 <_printf_float+0x26a>
 800737e:	2301      	movs	r3, #1
 8007380:	4a41      	ldr	r2, [pc, #260]	; (8007488 <_printf_float+0x30c>)
 8007382:	4631      	mov	r1, r6
 8007384:	4628      	mov	r0, r5
 8007386:	47b8      	blx	r7
 8007388:	3001      	adds	r0, #1
 800738a:	f43f af54 	beq.w	8007236 <_printf_float+0xba>
 800738e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007392:	429a      	cmp	r2, r3
 8007394:	db02      	blt.n	800739c <_printf_float+0x220>
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	07d8      	lsls	r0, r3, #31
 800739a:	d50f      	bpl.n	80073bc <_printf_float+0x240>
 800739c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073a0:	4631      	mov	r1, r6
 80073a2:	4628      	mov	r0, r5
 80073a4:	47b8      	blx	r7
 80073a6:	3001      	adds	r0, #1
 80073a8:	f43f af45 	beq.w	8007236 <_printf_float+0xba>
 80073ac:	f04f 0800 	mov.w	r8, #0
 80073b0:	f104 091a 	add.w	r9, r4, #26
 80073b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b6:	3b01      	subs	r3, #1
 80073b8:	4543      	cmp	r3, r8
 80073ba:	dc09      	bgt.n	80073d0 <_printf_float+0x254>
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	079b      	lsls	r3, r3, #30
 80073c0:	f100 8103 	bmi.w	80075ca <_printf_float+0x44e>
 80073c4:	68e0      	ldr	r0, [r4, #12]
 80073c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073c8:	4298      	cmp	r0, r3
 80073ca:	bfb8      	it	lt
 80073cc:	4618      	movlt	r0, r3
 80073ce:	e734      	b.n	800723a <_printf_float+0xbe>
 80073d0:	2301      	movs	r3, #1
 80073d2:	464a      	mov	r2, r9
 80073d4:	4631      	mov	r1, r6
 80073d6:	4628      	mov	r0, r5
 80073d8:	47b8      	blx	r7
 80073da:	3001      	adds	r0, #1
 80073dc:	f43f af2b 	beq.w	8007236 <_printf_float+0xba>
 80073e0:	f108 0801 	add.w	r8, r8, #1
 80073e4:	e7e6      	b.n	80073b4 <_printf_float+0x238>
 80073e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	dc2b      	bgt.n	8007444 <_printf_float+0x2c8>
 80073ec:	2301      	movs	r3, #1
 80073ee:	4a26      	ldr	r2, [pc, #152]	; (8007488 <_printf_float+0x30c>)
 80073f0:	4631      	mov	r1, r6
 80073f2:	4628      	mov	r0, r5
 80073f4:	47b8      	blx	r7
 80073f6:	3001      	adds	r0, #1
 80073f8:	f43f af1d 	beq.w	8007236 <_printf_float+0xba>
 80073fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073fe:	b923      	cbnz	r3, 800740a <_printf_float+0x28e>
 8007400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007402:	b913      	cbnz	r3, 800740a <_printf_float+0x28e>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	07d9      	lsls	r1, r3, #31
 8007408:	d5d8      	bpl.n	80073bc <_printf_float+0x240>
 800740a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800740e:	4631      	mov	r1, r6
 8007410:	4628      	mov	r0, r5
 8007412:	47b8      	blx	r7
 8007414:	3001      	adds	r0, #1
 8007416:	f43f af0e 	beq.w	8007236 <_printf_float+0xba>
 800741a:	f04f 0900 	mov.w	r9, #0
 800741e:	f104 0a1a 	add.w	sl, r4, #26
 8007422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007424:	425b      	negs	r3, r3
 8007426:	454b      	cmp	r3, r9
 8007428:	dc01      	bgt.n	800742e <_printf_float+0x2b2>
 800742a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800742c:	e794      	b.n	8007358 <_printf_float+0x1dc>
 800742e:	2301      	movs	r3, #1
 8007430:	4652      	mov	r2, sl
 8007432:	4631      	mov	r1, r6
 8007434:	4628      	mov	r0, r5
 8007436:	47b8      	blx	r7
 8007438:	3001      	adds	r0, #1
 800743a:	f43f aefc 	beq.w	8007236 <_printf_float+0xba>
 800743e:	f109 0901 	add.w	r9, r9, #1
 8007442:	e7ee      	b.n	8007422 <_printf_float+0x2a6>
 8007444:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007446:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007448:	429a      	cmp	r2, r3
 800744a:	bfa8      	it	ge
 800744c:	461a      	movge	r2, r3
 800744e:	2a00      	cmp	r2, #0
 8007450:	4691      	mov	r9, r2
 8007452:	dd07      	ble.n	8007464 <_printf_float+0x2e8>
 8007454:	4613      	mov	r3, r2
 8007456:	4631      	mov	r1, r6
 8007458:	4642      	mov	r2, r8
 800745a:	4628      	mov	r0, r5
 800745c:	47b8      	blx	r7
 800745e:	3001      	adds	r0, #1
 8007460:	f43f aee9 	beq.w	8007236 <_printf_float+0xba>
 8007464:	f104 031a 	add.w	r3, r4, #26
 8007468:	f04f 0b00 	mov.w	fp, #0
 800746c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007470:	9306      	str	r3, [sp, #24]
 8007472:	e015      	b.n	80074a0 <_printf_float+0x324>
 8007474:	7fefffff 	.word	0x7fefffff
 8007478:	0800b568 	.word	0x0800b568
 800747c:	0800b564 	.word	0x0800b564
 8007480:	0800b570 	.word	0x0800b570
 8007484:	0800b56c 	.word	0x0800b56c
 8007488:	0800b574 	.word	0x0800b574
 800748c:	2301      	movs	r3, #1
 800748e:	9a06      	ldr	r2, [sp, #24]
 8007490:	4631      	mov	r1, r6
 8007492:	4628      	mov	r0, r5
 8007494:	47b8      	blx	r7
 8007496:	3001      	adds	r0, #1
 8007498:	f43f aecd 	beq.w	8007236 <_printf_float+0xba>
 800749c:	f10b 0b01 	add.w	fp, fp, #1
 80074a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80074a4:	ebaa 0309 	sub.w	r3, sl, r9
 80074a8:	455b      	cmp	r3, fp
 80074aa:	dcef      	bgt.n	800748c <_printf_float+0x310>
 80074ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074b0:	429a      	cmp	r2, r3
 80074b2:	44d0      	add	r8, sl
 80074b4:	db15      	blt.n	80074e2 <_printf_float+0x366>
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	07da      	lsls	r2, r3, #31
 80074ba:	d412      	bmi.n	80074e2 <_printf_float+0x366>
 80074bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074c0:	eba3 020a 	sub.w	r2, r3, sl
 80074c4:	eba3 0a01 	sub.w	sl, r3, r1
 80074c8:	4592      	cmp	sl, r2
 80074ca:	bfa8      	it	ge
 80074cc:	4692      	movge	sl, r2
 80074ce:	f1ba 0f00 	cmp.w	sl, #0
 80074d2:	dc0e      	bgt.n	80074f2 <_printf_float+0x376>
 80074d4:	f04f 0800 	mov.w	r8, #0
 80074d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074dc:	f104 091a 	add.w	r9, r4, #26
 80074e0:	e019      	b.n	8007516 <_printf_float+0x39a>
 80074e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074e6:	4631      	mov	r1, r6
 80074e8:	4628      	mov	r0, r5
 80074ea:	47b8      	blx	r7
 80074ec:	3001      	adds	r0, #1
 80074ee:	d1e5      	bne.n	80074bc <_printf_float+0x340>
 80074f0:	e6a1      	b.n	8007236 <_printf_float+0xba>
 80074f2:	4653      	mov	r3, sl
 80074f4:	4642      	mov	r2, r8
 80074f6:	4631      	mov	r1, r6
 80074f8:	4628      	mov	r0, r5
 80074fa:	47b8      	blx	r7
 80074fc:	3001      	adds	r0, #1
 80074fe:	d1e9      	bne.n	80074d4 <_printf_float+0x358>
 8007500:	e699      	b.n	8007236 <_printf_float+0xba>
 8007502:	2301      	movs	r3, #1
 8007504:	464a      	mov	r2, r9
 8007506:	4631      	mov	r1, r6
 8007508:	4628      	mov	r0, r5
 800750a:	47b8      	blx	r7
 800750c:	3001      	adds	r0, #1
 800750e:	f43f ae92 	beq.w	8007236 <_printf_float+0xba>
 8007512:	f108 0801 	add.w	r8, r8, #1
 8007516:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800751a:	1a9b      	subs	r3, r3, r2
 800751c:	eba3 030a 	sub.w	r3, r3, sl
 8007520:	4543      	cmp	r3, r8
 8007522:	dcee      	bgt.n	8007502 <_printf_float+0x386>
 8007524:	e74a      	b.n	80073bc <_printf_float+0x240>
 8007526:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007528:	2a01      	cmp	r2, #1
 800752a:	dc01      	bgt.n	8007530 <_printf_float+0x3b4>
 800752c:	07db      	lsls	r3, r3, #31
 800752e:	d53a      	bpl.n	80075a6 <_printf_float+0x42a>
 8007530:	2301      	movs	r3, #1
 8007532:	4642      	mov	r2, r8
 8007534:	4631      	mov	r1, r6
 8007536:	4628      	mov	r0, r5
 8007538:	47b8      	blx	r7
 800753a:	3001      	adds	r0, #1
 800753c:	f43f ae7b 	beq.w	8007236 <_printf_float+0xba>
 8007540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007544:	4631      	mov	r1, r6
 8007546:	4628      	mov	r0, r5
 8007548:	47b8      	blx	r7
 800754a:	3001      	adds	r0, #1
 800754c:	f108 0801 	add.w	r8, r8, #1
 8007550:	f43f ae71 	beq.w	8007236 <_printf_float+0xba>
 8007554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007556:	2200      	movs	r2, #0
 8007558:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800755c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007560:	2300      	movs	r3, #0
 8007562:	f7f9 fc8b 	bl	8000e7c <__aeabi_dcmpeq>
 8007566:	b9c8      	cbnz	r0, 800759c <_printf_float+0x420>
 8007568:	4653      	mov	r3, sl
 800756a:	4642      	mov	r2, r8
 800756c:	4631      	mov	r1, r6
 800756e:	4628      	mov	r0, r5
 8007570:	47b8      	blx	r7
 8007572:	3001      	adds	r0, #1
 8007574:	d10e      	bne.n	8007594 <_printf_float+0x418>
 8007576:	e65e      	b.n	8007236 <_printf_float+0xba>
 8007578:	2301      	movs	r3, #1
 800757a:	4652      	mov	r2, sl
 800757c:	4631      	mov	r1, r6
 800757e:	4628      	mov	r0, r5
 8007580:	47b8      	blx	r7
 8007582:	3001      	adds	r0, #1
 8007584:	f43f ae57 	beq.w	8007236 <_printf_float+0xba>
 8007588:	f108 0801 	add.w	r8, r8, #1
 800758c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800758e:	3b01      	subs	r3, #1
 8007590:	4543      	cmp	r3, r8
 8007592:	dcf1      	bgt.n	8007578 <_printf_float+0x3fc>
 8007594:	464b      	mov	r3, r9
 8007596:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800759a:	e6de      	b.n	800735a <_printf_float+0x1de>
 800759c:	f04f 0800 	mov.w	r8, #0
 80075a0:	f104 0a1a 	add.w	sl, r4, #26
 80075a4:	e7f2      	b.n	800758c <_printf_float+0x410>
 80075a6:	2301      	movs	r3, #1
 80075a8:	e7df      	b.n	800756a <_printf_float+0x3ee>
 80075aa:	2301      	movs	r3, #1
 80075ac:	464a      	mov	r2, r9
 80075ae:	4631      	mov	r1, r6
 80075b0:	4628      	mov	r0, r5
 80075b2:	47b8      	blx	r7
 80075b4:	3001      	adds	r0, #1
 80075b6:	f43f ae3e 	beq.w	8007236 <_printf_float+0xba>
 80075ba:	f108 0801 	add.w	r8, r8, #1
 80075be:	68e3      	ldr	r3, [r4, #12]
 80075c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075c2:	1a9b      	subs	r3, r3, r2
 80075c4:	4543      	cmp	r3, r8
 80075c6:	dcf0      	bgt.n	80075aa <_printf_float+0x42e>
 80075c8:	e6fc      	b.n	80073c4 <_printf_float+0x248>
 80075ca:	f04f 0800 	mov.w	r8, #0
 80075ce:	f104 0919 	add.w	r9, r4, #25
 80075d2:	e7f4      	b.n	80075be <_printf_float+0x442>
 80075d4:	2900      	cmp	r1, #0
 80075d6:	f43f ae8b 	beq.w	80072f0 <_printf_float+0x174>
 80075da:	2300      	movs	r3, #0
 80075dc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80075e0:	ab09      	add	r3, sp, #36	; 0x24
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	ec49 8b10 	vmov	d0, r8, r9
 80075e8:	6022      	str	r2, [r4, #0]
 80075ea:	f8cd a004 	str.w	sl, [sp, #4]
 80075ee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80075f2:	4628      	mov	r0, r5
 80075f4:	f7ff fd2d 	bl	8007052 <__cvt>
 80075f8:	4680      	mov	r8, r0
 80075fa:	e648      	b.n	800728e <_printf_float+0x112>

080075fc <_printf_common>:
 80075fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007600:	4691      	mov	r9, r2
 8007602:	461f      	mov	r7, r3
 8007604:	688a      	ldr	r2, [r1, #8]
 8007606:	690b      	ldr	r3, [r1, #16]
 8007608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800760c:	4293      	cmp	r3, r2
 800760e:	bfb8      	it	lt
 8007610:	4613      	movlt	r3, r2
 8007612:	f8c9 3000 	str.w	r3, [r9]
 8007616:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800761a:	4606      	mov	r6, r0
 800761c:	460c      	mov	r4, r1
 800761e:	b112      	cbz	r2, 8007626 <_printf_common+0x2a>
 8007620:	3301      	adds	r3, #1
 8007622:	f8c9 3000 	str.w	r3, [r9]
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	0699      	lsls	r1, r3, #26
 800762a:	bf42      	ittt	mi
 800762c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007630:	3302      	addmi	r3, #2
 8007632:	f8c9 3000 	strmi.w	r3, [r9]
 8007636:	6825      	ldr	r5, [r4, #0]
 8007638:	f015 0506 	ands.w	r5, r5, #6
 800763c:	d107      	bne.n	800764e <_printf_common+0x52>
 800763e:	f104 0a19 	add.w	sl, r4, #25
 8007642:	68e3      	ldr	r3, [r4, #12]
 8007644:	f8d9 2000 	ldr.w	r2, [r9]
 8007648:	1a9b      	subs	r3, r3, r2
 800764a:	42ab      	cmp	r3, r5
 800764c:	dc28      	bgt.n	80076a0 <_printf_common+0xa4>
 800764e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007652:	6822      	ldr	r2, [r4, #0]
 8007654:	3300      	adds	r3, #0
 8007656:	bf18      	it	ne
 8007658:	2301      	movne	r3, #1
 800765a:	0692      	lsls	r2, r2, #26
 800765c:	d42d      	bmi.n	80076ba <_printf_common+0xbe>
 800765e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007662:	4639      	mov	r1, r7
 8007664:	4630      	mov	r0, r6
 8007666:	47c0      	blx	r8
 8007668:	3001      	adds	r0, #1
 800766a:	d020      	beq.n	80076ae <_printf_common+0xb2>
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	68e5      	ldr	r5, [r4, #12]
 8007670:	f8d9 2000 	ldr.w	r2, [r9]
 8007674:	f003 0306 	and.w	r3, r3, #6
 8007678:	2b04      	cmp	r3, #4
 800767a:	bf08      	it	eq
 800767c:	1aad      	subeq	r5, r5, r2
 800767e:	68a3      	ldr	r3, [r4, #8]
 8007680:	6922      	ldr	r2, [r4, #16]
 8007682:	bf0c      	ite	eq
 8007684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007688:	2500      	movne	r5, #0
 800768a:	4293      	cmp	r3, r2
 800768c:	bfc4      	itt	gt
 800768e:	1a9b      	subgt	r3, r3, r2
 8007690:	18ed      	addgt	r5, r5, r3
 8007692:	f04f 0900 	mov.w	r9, #0
 8007696:	341a      	adds	r4, #26
 8007698:	454d      	cmp	r5, r9
 800769a:	d11a      	bne.n	80076d2 <_printf_common+0xd6>
 800769c:	2000      	movs	r0, #0
 800769e:	e008      	b.n	80076b2 <_printf_common+0xb6>
 80076a0:	2301      	movs	r3, #1
 80076a2:	4652      	mov	r2, sl
 80076a4:	4639      	mov	r1, r7
 80076a6:	4630      	mov	r0, r6
 80076a8:	47c0      	blx	r8
 80076aa:	3001      	adds	r0, #1
 80076ac:	d103      	bne.n	80076b6 <_printf_common+0xba>
 80076ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b6:	3501      	adds	r5, #1
 80076b8:	e7c3      	b.n	8007642 <_printf_common+0x46>
 80076ba:	18e1      	adds	r1, r4, r3
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	2030      	movs	r0, #48	; 0x30
 80076c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076c4:	4422      	add	r2, r4
 80076c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076ce:	3302      	adds	r3, #2
 80076d0:	e7c5      	b.n	800765e <_printf_common+0x62>
 80076d2:	2301      	movs	r3, #1
 80076d4:	4622      	mov	r2, r4
 80076d6:	4639      	mov	r1, r7
 80076d8:	4630      	mov	r0, r6
 80076da:	47c0      	blx	r8
 80076dc:	3001      	adds	r0, #1
 80076de:	d0e6      	beq.n	80076ae <_printf_common+0xb2>
 80076e0:	f109 0901 	add.w	r9, r9, #1
 80076e4:	e7d8      	b.n	8007698 <_printf_common+0x9c>
	...

080076e8 <_printf_i>:
 80076e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80076f0:	460c      	mov	r4, r1
 80076f2:	7e09      	ldrb	r1, [r1, #24]
 80076f4:	b085      	sub	sp, #20
 80076f6:	296e      	cmp	r1, #110	; 0x6e
 80076f8:	4617      	mov	r7, r2
 80076fa:	4606      	mov	r6, r0
 80076fc:	4698      	mov	r8, r3
 80076fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007700:	f000 80b3 	beq.w	800786a <_printf_i+0x182>
 8007704:	d822      	bhi.n	800774c <_printf_i+0x64>
 8007706:	2963      	cmp	r1, #99	; 0x63
 8007708:	d036      	beq.n	8007778 <_printf_i+0x90>
 800770a:	d80a      	bhi.n	8007722 <_printf_i+0x3a>
 800770c:	2900      	cmp	r1, #0
 800770e:	f000 80b9 	beq.w	8007884 <_printf_i+0x19c>
 8007712:	2958      	cmp	r1, #88	; 0x58
 8007714:	f000 8083 	beq.w	800781e <_printf_i+0x136>
 8007718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800771c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007720:	e032      	b.n	8007788 <_printf_i+0xa0>
 8007722:	2964      	cmp	r1, #100	; 0x64
 8007724:	d001      	beq.n	800772a <_printf_i+0x42>
 8007726:	2969      	cmp	r1, #105	; 0x69
 8007728:	d1f6      	bne.n	8007718 <_printf_i+0x30>
 800772a:	6820      	ldr	r0, [r4, #0]
 800772c:	6813      	ldr	r3, [r2, #0]
 800772e:	0605      	lsls	r5, r0, #24
 8007730:	f103 0104 	add.w	r1, r3, #4
 8007734:	d52a      	bpl.n	800778c <_printf_i+0xa4>
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6011      	str	r1, [r2, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	da03      	bge.n	8007746 <_printf_i+0x5e>
 800773e:	222d      	movs	r2, #45	; 0x2d
 8007740:	425b      	negs	r3, r3
 8007742:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007746:	486f      	ldr	r0, [pc, #444]	; (8007904 <_printf_i+0x21c>)
 8007748:	220a      	movs	r2, #10
 800774a:	e039      	b.n	80077c0 <_printf_i+0xd8>
 800774c:	2973      	cmp	r1, #115	; 0x73
 800774e:	f000 809d 	beq.w	800788c <_printf_i+0x1a4>
 8007752:	d808      	bhi.n	8007766 <_printf_i+0x7e>
 8007754:	296f      	cmp	r1, #111	; 0x6f
 8007756:	d020      	beq.n	800779a <_printf_i+0xb2>
 8007758:	2970      	cmp	r1, #112	; 0x70
 800775a:	d1dd      	bne.n	8007718 <_printf_i+0x30>
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	f043 0320 	orr.w	r3, r3, #32
 8007762:	6023      	str	r3, [r4, #0]
 8007764:	e003      	b.n	800776e <_printf_i+0x86>
 8007766:	2975      	cmp	r1, #117	; 0x75
 8007768:	d017      	beq.n	800779a <_printf_i+0xb2>
 800776a:	2978      	cmp	r1, #120	; 0x78
 800776c:	d1d4      	bne.n	8007718 <_printf_i+0x30>
 800776e:	2378      	movs	r3, #120	; 0x78
 8007770:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007774:	4864      	ldr	r0, [pc, #400]	; (8007908 <_printf_i+0x220>)
 8007776:	e055      	b.n	8007824 <_printf_i+0x13c>
 8007778:	6813      	ldr	r3, [r2, #0]
 800777a:	1d19      	adds	r1, r3, #4
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6011      	str	r1, [r2, #0]
 8007780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007788:	2301      	movs	r3, #1
 800778a:	e08c      	b.n	80078a6 <_printf_i+0x1be>
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6011      	str	r1, [r2, #0]
 8007790:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007794:	bf18      	it	ne
 8007796:	b21b      	sxthne	r3, r3
 8007798:	e7cf      	b.n	800773a <_printf_i+0x52>
 800779a:	6813      	ldr	r3, [r2, #0]
 800779c:	6825      	ldr	r5, [r4, #0]
 800779e:	1d18      	adds	r0, r3, #4
 80077a0:	6010      	str	r0, [r2, #0]
 80077a2:	0628      	lsls	r0, r5, #24
 80077a4:	d501      	bpl.n	80077aa <_printf_i+0xc2>
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	e002      	b.n	80077b0 <_printf_i+0xc8>
 80077aa:	0668      	lsls	r0, r5, #25
 80077ac:	d5fb      	bpl.n	80077a6 <_printf_i+0xbe>
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	4854      	ldr	r0, [pc, #336]	; (8007904 <_printf_i+0x21c>)
 80077b2:	296f      	cmp	r1, #111	; 0x6f
 80077b4:	bf14      	ite	ne
 80077b6:	220a      	movne	r2, #10
 80077b8:	2208      	moveq	r2, #8
 80077ba:	2100      	movs	r1, #0
 80077bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077c0:	6865      	ldr	r5, [r4, #4]
 80077c2:	60a5      	str	r5, [r4, #8]
 80077c4:	2d00      	cmp	r5, #0
 80077c6:	f2c0 8095 	blt.w	80078f4 <_printf_i+0x20c>
 80077ca:	6821      	ldr	r1, [r4, #0]
 80077cc:	f021 0104 	bic.w	r1, r1, #4
 80077d0:	6021      	str	r1, [r4, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d13d      	bne.n	8007852 <_printf_i+0x16a>
 80077d6:	2d00      	cmp	r5, #0
 80077d8:	f040 808e 	bne.w	80078f8 <_printf_i+0x210>
 80077dc:	4665      	mov	r5, ip
 80077de:	2a08      	cmp	r2, #8
 80077e0:	d10b      	bne.n	80077fa <_printf_i+0x112>
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	07db      	lsls	r3, r3, #31
 80077e6:	d508      	bpl.n	80077fa <_printf_i+0x112>
 80077e8:	6923      	ldr	r3, [r4, #16]
 80077ea:	6862      	ldr	r2, [r4, #4]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	bfde      	ittt	le
 80077f0:	2330      	movle	r3, #48	; 0x30
 80077f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077f6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80077fa:	ebac 0305 	sub.w	r3, ip, r5
 80077fe:	6123      	str	r3, [r4, #16]
 8007800:	f8cd 8000 	str.w	r8, [sp]
 8007804:	463b      	mov	r3, r7
 8007806:	aa03      	add	r2, sp, #12
 8007808:	4621      	mov	r1, r4
 800780a:	4630      	mov	r0, r6
 800780c:	f7ff fef6 	bl	80075fc <_printf_common>
 8007810:	3001      	adds	r0, #1
 8007812:	d14d      	bne.n	80078b0 <_printf_i+0x1c8>
 8007814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007818:	b005      	add	sp, #20
 800781a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800781e:	4839      	ldr	r0, [pc, #228]	; (8007904 <_printf_i+0x21c>)
 8007820:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007824:	6813      	ldr	r3, [r2, #0]
 8007826:	6821      	ldr	r1, [r4, #0]
 8007828:	1d1d      	adds	r5, r3, #4
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6015      	str	r5, [r2, #0]
 800782e:	060a      	lsls	r2, r1, #24
 8007830:	d50b      	bpl.n	800784a <_printf_i+0x162>
 8007832:	07ca      	lsls	r2, r1, #31
 8007834:	bf44      	itt	mi
 8007836:	f041 0120 	orrmi.w	r1, r1, #32
 800783a:	6021      	strmi	r1, [r4, #0]
 800783c:	b91b      	cbnz	r3, 8007846 <_printf_i+0x15e>
 800783e:	6822      	ldr	r2, [r4, #0]
 8007840:	f022 0220 	bic.w	r2, r2, #32
 8007844:	6022      	str	r2, [r4, #0]
 8007846:	2210      	movs	r2, #16
 8007848:	e7b7      	b.n	80077ba <_printf_i+0xd2>
 800784a:	064d      	lsls	r5, r1, #25
 800784c:	bf48      	it	mi
 800784e:	b29b      	uxthmi	r3, r3
 8007850:	e7ef      	b.n	8007832 <_printf_i+0x14a>
 8007852:	4665      	mov	r5, ip
 8007854:	fbb3 f1f2 	udiv	r1, r3, r2
 8007858:	fb02 3311 	mls	r3, r2, r1, r3
 800785c:	5cc3      	ldrb	r3, [r0, r3]
 800785e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007862:	460b      	mov	r3, r1
 8007864:	2900      	cmp	r1, #0
 8007866:	d1f5      	bne.n	8007854 <_printf_i+0x16c>
 8007868:	e7b9      	b.n	80077de <_printf_i+0xf6>
 800786a:	6813      	ldr	r3, [r2, #0]
 800786c:	6825      	ldr	r5, [r4, #0]
 800786e:	6961      	ldr	r1, [r4, #20]
 8007870:	1d18      	adds	r0, r3, #4
 8007872:	6010      	str	r0, [r2, #0]
 8007874:	0628      	lsls	r0, r5, #24
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	d501      	bpl.n	800787e <_printf_i+0x196>
 800787a:	6019      	str	r1, [r3, #0]
 800787c:	e002      	b.n	8007884 <_printf_i+0x19c>
 800787e:	066a      	lsls	r2, r5, #25
 8007880:	d5fb      	bpl.n	800787a <_printf_i+0x192>
 8007882:	8019      	strh	r1, [r3, #0]
 8007884:	2300      	movs	r3, #0
 8007886:	6123      	str	r3, [r4, #16]
 8007888:	4665      	mov	r5, ip
 800788a:	e7b9      	b.n	8007800 <_printf_i+0x118>
 800788c:	6813      	ldr	r3, [r2, #0]
 800788e:	1d19      	adds	r1, r3, #4
 8007890:	6011      	str	r1, [r2, #0]
 8007892:	681d      	ldr	r5, [r3, #0]
 8007894:	6862      	ldr	r2, [r4, #4]
 8007896:	2100      	movs	r1, #0
 8007898:	4628      	mov	r0, r5
 800789a:	f7f9 fa49 	bl	8000d30 <memchr>
 800789e:	b108      	cbz	r0, 80078a4 <_printf_i+0x1bc>
 80078a0:	1b40      	subs	r0, r0, r5
 80078a2:	6060      	str	r0, [r4, #4]
 80078a4:	6863      	ldr	r3, [r4, #4]
 80078a6:	6123      	str	r3, [r4, #16]
 80078a8:	2300      	movs	r3, #0
 80078aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078ae:	e7a7      	b.n	8007800 <_printf_i+0x118>
 80078b0:	6923      	ldr	r3, [r4, #16]
 80078b2:	462a      	mov	r2, r5
 80078b4:	4639      	mov	r1, r7
 80078b6:	4630      	mov	r0, r6
 80078b8:	47c0      	blx	r8
 80078ba:	3001      	adds	r0, #1
 80078bc:	d0aa      	beq.n	8007814 <_printf_i+0x12c>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	079b      	lsls	r3, r3, #30
 80078c2:	d413      	bmi.n	80078ec <_printf_i+0x204>
 80078c4:	68e0      	ldr	r0, [r4, #12]
 80078c6:	9b03      	ldr	r3, [sp, #12]
 80078c8:	4298      	cmp	r0, r3
 80078ca:	bfb8      	it	lt
 80078cc:	4618      	movlt	r0, r3
 80078ce:	e7a3      	b.n	8007818 <_printf_i+0x130>
 80078d0:	2301      	movs	r3, #1
 80078d2:	464a      	mov	r2, r9
 80078d4:	4639      	mov	r1, r7
 80078d6:	4630      	mov	r0, r6
 80078d8:	47c0      	blx	r8
 80078da:	3001      	adds	r0, #1
 80078dc:	d09a      	beq.n	8007814 <_printf_i+0x12c>
 80078de:	3501      	adds	r5, #1
 80078e0:	68e3      	ldr	r3, [r4, #12]
 80078e2:	9a03      	ldr	r2, [sp, #12]
 80078e4:	1a9b      	subs	r3, r3, r2
 80078e6:	42ab      	cmp	r3, r5
 80078e8:	dcf2      	bgt.n	80078d0 <_printf_i+0x1e8>
 80078ea:	e7eb      	b.n	80078c4 <_printf_i+0x1dc>
 80078ec:	2500      	movs	r5, #0
 80078ee:	f104 0919 	add.w	r9, r4, #25
 80078f2:	e7f5      	b.n	80078e0 <_printf_i+0x1f8>
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1ac      	bne.n	8007852 <_printf_i+0x16a>
 80078f8:	7803      	ldrb	r3, [r0, #0]
 80078fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007902:	e76c      	b.n	80077de <_printf_i+0xf6>
 8007904:	0800b576 	.word	0x0800b576
 8007908:	0800b587 	.word	0x0800b587

0800790c <iprintf>:
 800790c:	b40f      	push	{r0, r1, r2, r3}
 800790e:	4b0a      	ldr	r3, [pc, #40]	; (8007938 <iprintf+0x2c>)
 8007910:	b513      	push	{r0, r1, r4, lr}
 8007912:	681c      	ldr	r4, [r3, #0]
 8007914:	b124      	cbz	r4, 8007920 <iprintf+0x14>
 8007916:	69a3      	ldr	r3, [r4, #24]
 8007918:	b913      	cbnz	r3, 8007920 <iprintf+0x14>
 800791a:	4620      	mov	r0, r4
 800791c:	f001 f868 	bl	80089f0 <__sinit>
 8007920:	ab05      	add	r3, sp, #20
 8007922:	9a04      	ldr	r2, [sp, #16]
 8007924:	68a1      	ldr	r1, [r4, #8]
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	4620      	mov	r0, r4
 800792a:	f001 fd21 	bl	8009370 <_vfiprintf_r>
 800792e:	b002      	add	sp, #8
 8007930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007934:	b004      	add	sp, #16
 8007936:	4770      	bx	lr
 8007938:	20000068 	.word	0x20000068

0800793c <_puts_r>:
 800793c:	b570      	push	{r4, r5, r6, lr}
 800793e:	460e      	mov	r6, r1
 8007940:	4605      	mov	r5, r0
 8007942:	b118      	cbz	r0, 800794c <_puts_r+0x10>
 8007944:	6983      	ldr	r3, [r0, #24]
 8007946:	b90b      	cbnz	r3, 800794c <_puts_r+0x10>
 8007948:	f001 f852 	bl	80089f0 <__sinit>
 800794c:	69ab      	ldr	r3, [r5, #24]
 800794e:	68ac      	ldr	r4, [r5, #8]
 8007950:	b913      	cbnz	r3, 8007958 <_puts_r+0x1c>
 8007952:	4628      	mov	r0, r5
 8007954:	f001 f84c 	bl	80089f0 <__sinit>
 8007958:	4b23      	ldr	r3, [pc, #140]	; (80079e8 <_puts_r+0xac>)
 800795a:	429c      	cmp	r4, r3
 800795c:	d117      	bne.n	800798e <_puts_r+0x52>
 800795e:	686c      	ldr	r4, [r5, #4]
 8007960:	89a3      	ldrh	r3, [r4, #12]
 8007962:	071b      	lsls	r3, r3, #28
 8007964:	d51d      	bpl.n	80079a2 <_puts_r+0x66>
 8007966:	6923      	ldr	r3, [r4, #16]
 8007968:	b1db      	cbz	r3, 80079a2 <_puts_r+0x66>
 800796a:	3e01      	subs	r6, #1
 800796c:	68a3      	ldr	r3, [r4, #8]
 800796e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007972:	3b01      	subs	r3, #1
 8007974:	60a3      	str	r3, [r4, #8]
 8007976:	b9e9      	cbnz	r1, 80079b4 <_puts_r+0x78>
 8007978:	2b00      	cmp	r3, #0
 800797a:	da2e      	bge.n	80079da <_puts_r+0x9e>
 800797c:	4622      	mov	r2, r4
 800797e:	210a      	movs	r1, #10
 8007980:	4628      	mov	r0, r5
 8007982:	f000 f83f 	bl	8007a04 <__swbuf_r>
 8007986:	3001      	adds	r0, #1
 8007988:	d011      	beq.n	80079ae <_puts_r+0x72>
 800798a:	200a      	movs	r0, #10
 800798c:	e011      	b.n	80079b2 <_puts_r+0x76>
 800798e:	4b17      	ldr	r3, [pc, #92]	; (80079ec <_puts_r+0xb0>)
 8007990:	429c      	cmp	r4, r3
 8007992:	d101      	bne.n	8007998 <_puts_r+0x5c>
 8007994:	68ac      	ldr	r4, [r5, #8]
 8007996:	e7e3      	b.n	8007960 <_puts_r+0x24>
 8007998:	4b15      	ldr	r3, [pc, #84]	; (80079f0 <_puts_r+0xb4>)
 800799a:	429c      	cmp	r4, r3
 800799c:	bf08      	it	eq
 800799e:	68ec      	ldreq	r4, [r5, #12]
 80079a0:	e7de      	b.n	8007960 <_puts_r+0x24>
 80079a2:	4621      	mov	r1, r4
 80079a4:	4628      	mov	r0, r5
 80079a6:	f000 f87f 	bl	8007aa8 <__swsetup_r>
 80079aa:	2800      	cmp	r0, #0
 80079ac:	d0dd      	beq.n	800796a <_puts_r+0x2e>
 80079ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079b2:	bd70      	pop	{r4, r5, r6, pc}
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	da04      	bge.n	80079c2 <_puts_r+0x86>
 80079b8:	69a2      	ldr	r2, [r4, #24]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	dc06      	bgt.n	80079cc <_puts_r+0x90>
 80079be:	290a      	cmp	r1, #10
 80079c0:	d004      	beq.n	80079cc <_puts_r+0x90>
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	6022      	str	r2, [r4, #0]
 80079c8:	7019      	strb	r1, [r3, #0]
 80079ca:	e7cf      	b.n	800796c <_puts_r+0x30>
 80079cc:	4622      	mov	r2, r4
 80079ce:	4628      	mov	r0, r5
 80079d0:	f000 f818 	bl	8007a04 <__swbuf_r>
 80079d4:	3001      	adds	r0, #1
 80079d6:	d1c9      	bne.n	800796c <_puts_r+0x30>
 80079d8:	e7e9      	b.n	80079ae <_puts_r+0x72>
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	200a      	movs	r0, #10
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	6022      	str	r2, [r4, #0]
 80079e2:	7018      	strb	r0, [r3, #0]
 80079e4:	e7e5      	b.n	80079b2 <_puts_r+0x76>
 80079e6:	bf00      	nop
 80079e8:	0800b5c8 	.word	0x0800b5c8
 80079ec:	0800b5e8 	.word	0x0800b5e8
 80079f0:	0800b5a8 	.word	0x0800b5a8

080079f4 <puts>:
 80079f4:	4b02      	ldr	r3, [pc, #8]	; (8007a00 <puts+0xc>)
 80079f6:	4601      	mov	r1, r0
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	f7ff bf9f 	b.w	800793c <_puts_r>
 80079fe:	bf00      	nop
 8007a00:	20000068 	.word	0x20000068

08007a04 <__swbuf_r>:
 8007a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a06:	460e      	mov	r6, r1
 8007a08:	4614      	mov	r4, r2
 8007a0a:	4605      	mov	r5, r0
 8007a0c:	b118      	cbz	r0, 8007a16 <__swbuf_r+0x12>
 8007a0e:	6983      	ldr	r3, [r0, #24]
 8007a10:	b90b      	cbnz	r3, 8007a16 <__swbuf_r+0x12>
 8007a12:	f000 ffed 	bl	80089f0 <__sinit>
 8007a16:	4b21      	ldr	r3, [pc, #132]	; (8007a9c <__swbuf_r+0x98>)
 8007a18:	429c      	cmp	r4, r3
 8007a1a:	d12a      	bne.n	8007a72 <__swbuf_r+0x6e>
 8007a1c:	686c      	ldr	r4, [r5, #4]
 8007a1e:	69a3      	ldr	r3, [r4, #24]
 8007a20:	60a3      	str	r3, [r4, #8]
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	071a      	lsls	r2, r3, #28
 8007a26:	d52e      	bpl.n	8007a86 <__swbuf_r+0x82>
 8007a28:	6923      	ldr	r3, [r4, #16]
 8007a2a:	b363      	cbz	r3, 8007a86 <__swbuf_r+0x82>
 8007a2c:	6923      	ldr	r3, [r4, #16]
 8007a2e:	6820      	ldr	r0, [r4, #0]
 8007a30:	1ac0      	subs	r0, r0, r3
 8007a32:	6963      	ldr	r3, [r4, #20]
 8007a34:	b2f6      	uxtb	r6, r6
 8007a36:	4283      	cmp	r3, r0
 8007a38:	4637      	mov	r7, r6
 8007a3a:	dc04      	bgt.n	8007a46 <__swbuf_r+0x42>
 8007a3c:	4621      	mov	r1, r4
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f000 ff6c 	bl	800891c <_fflush_r>
 8007a44:	bb28      	cbnz	r0, 8007a92 <__swbuf_r+0x8e>
 8007a46:	68a3      	ldr	r3, [r4, #8]
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	60a3      	str	r3, [r4, #8]
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	1c5a      	adds	r2, r3, #1
 8007a50:	6022      	str	r2, [r4, #0]
 8007a52:	701e      	strb	r6, [r3, #0]
 8007a54:	6963      	ldr	r3, [r4, #20]
 8007a56:	3001      	adds	r0, #1
 8007a58:	4283      	cmp	r3, r0
 8007a5a:	d004      	beq.n	8007a66 <__swbuf_r+0x62>
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	07db      	lsls	r3, r3, #31
 8007a60:	d519      	bpl.n	8007a96 <__swbuf_r+0x92>
 8007a62:	2e0a      	cmp	r6, #10
 8007a64:	d117      	bne.n	8007a96 <__swbuf_r+0x92>
 8007a66:	4621      	mov	r1, r4
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f000 ff57 	bl	800891c <_fflush_r>
 8007a6e:	b190      	cbz	r0, 8007a96 <__swbuf_r+0x92>
 8007a70:	e00f      	b.n	8007a92 <__swbuf_r+0x8e>
 8007a72:	4b0b      	ldr	r3, [pc, #44]	; (8007aa0 <__swbuf_r+0x9c>)
 8007a74:	429c      	cmp	r4, r3
 8007a76:	d101      	bne.n	8007a7c <__swbuf_r+0x78>
 8007a78:	68ac      	ldr	r4, [r5, #8]
 8007a7a:	e7d0      	b.n	8007a1e <__swbuf_r+0x1a>
 8007a7c:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <__swbuf_r+0xa0>)
 8007a7e:	429c      	cmp	r4, r3
 8007a80:	bf08      	it	eq
 8007a82:	68ec      	ldreq	r4, [r5, #12]
 8007a84:	e7cb      	b.n	8007a1e <__swbuf_r+0x1a>
 8007a86:	4621      	mov	r1, r4
 8007a88:	4628      	mov	r0, r5
 8007a8a:	f000 f80d 	bl	8007aa8 <__swsetup_r>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d0cc      	beq.n	8007a2c <__swbuf_r+0x28>
 8007a92:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007a96:	4638      	mov	r0, r7
 8007a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	0800b5c8 	.word	0x0800b5c8
 8007aa0:	0800b5e8 	.word	0x0800b5e8
 8007aa4:	0800b5a8 	.word	0x0800b5a8

08007aa8 <__swsetup_r>:
 8007aa8:	4b32      	ldr	r3, [pc, #200]	; (8007b74 <__swsetup_r+0xcc>)
 8007aaa:	b570      	push	{r4, r5, r6, lr}
 8007aac:	681d      	ldr	r5, [r3, #0]
 8007aae:	4606      	mov	r6, r0
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	b125      	cbz	r5, 8007abe <__swsetup_r+0x16>
 8007ab4:	69ab      	ldr	r3, [r5, #24]
 8007ab6:	b913      	cbnz	r3, 8007abe <__swsetup_r+0x16>
 8007ab8:	4628      	mov	r0, r5
 8007aba:	f000 ff99 	bl	80089f0 <__sinit>
 8007abe:	4b2e      	ldr	r3, [pc, #184]	; (8007b78 <__swsetup_r+0xd0>)
 8007ac0:	429c      	cmp	r4, r3
 8007ac2:	d10f      	bne.n	8007ae4 <__swsetup_r+0x3c>
 8007ac4:	686c      	ldr	r4, [r5, #4]
 8007ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	0715      	lsls	r5, r2, #28
 8007ace:	d42c      	bmi.n	8007b2a <__swsetup_r+0x82>
 8007ad0:	06d0      	lsls	r0, r2, #27
 8007ad2:	d411      	bmi.n	8007af8 <__swsetup_r+0x50>
 8007ad4:	2209      	movs	r2, #9
 8007ad6:	6032      	str	r2, [r6, #0]
 8007ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007adc:	81a3      	strh	r3, [r4, #12]
 8007ade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ae2:	e03e      	b.n	8007b62 <__swsetup_r+0xba>
 8007ae4:	4b25      	ldr	r3, [pc, #148]	; (8007b7c <__swsetup_r+0xd4>)
 8007ae6:	429c      	cmp	r4, r3
 8007ae8:	d101      	bne.n	8007aee <__swsetup_r+0x46>
 8007aea:	68ac      	ldr	r4, [r5, #8]
 8007aec:	e7eb      	b.n	8007ac6 <__swsetup_r+0x1e>
 8007aee:	4b24      	ldr	r3, [pc, #144]	; (8007b80 <__swsetup_r+0xd8>)
 8007af0:	429c      	cmp	r4, r3
 8007af2:	bf08      	it	eq
 8007af4:	68ec      	ldreq	r4, [r5, #12]
 8007af6:	e7e6      	b.n	8007ac6 <__swsetup_r+0x1e>
 8007af8:	0751      	lsls	r1, r2, #29
 8007afa:	d512      	bpl.n	8007b22 <__swsetup_r+0x7a>
 8007afc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007afe:	b141      	cbz	r1, 8007b12 <__swsetup_r+0x6a>
 8007b00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b04:	4299      	cmp	r1, r3
 8007b06:	d002      	beq.n	8007b0e <__swsetup_r+0x66>
 8007b08:	4630      	mov	r0, r6
 8007b0a:	f001 fb5f 	bl	80091cc <_free_r>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	6363      	str	r3, [r4, #52]	; 0x34
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b18:	81a3      	strh	r3, [r4, #12]
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	6063      	str	r3, [r4, #4]
 8007b1e:	6923      	ldr	r3, [r4, #16]
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	89a3      	ldrh	r3, [r4, #12]
 8007b24:	f043 0308 	orr.w	r3, r3, #8
 8007b28:	81a3      	strh	r3, [r4, #12]
 8007b2a:	6923      	ldr	r3, [r4, #16]
 8007b2c:	b94b      	cbnz	r3, 8007b42 <__swsetup_r+0x9a>
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b38:	d003      	beq.n	8007b42 <__swsetup_r+0x9a>
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	f001 f813 	bl	8008b68 <__smakebuf_r>
 8007b42:	89a2      	ldrh	r2, [r4, #12]
 8007b44:	f012 0301 	ands.w	r3, r2, #1
 8007b48:	d00c      	beq.n	8007b64 <__swsetup_r+0xbc>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60a3      	str	r3, [r4, #8]
 8007b4e:	6963      	ldr	r3, [r4, #20]
 8007b50:	425b      	negs	r3, r3
 8007b52:	61a3      	str	r3, [r4, #24]
 8007b54:	6923      	ldr	r3, [r4, #16]
 8007b56:	b953      	cbnz	r3, 8007b6e <__swsetup_r+0xc6>
 8007b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b5c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007b60:	d1ba      	bne.n	8007ad8 <__swsetup_r+0x30>
 8007b62:	bd70      	pop	{r4, r5, r6, pc}
 8007b64:	0792      	lsls	r2, r2, #30
 8007b66:	bf58      	it	pl
 8007b68:	6963      	ldrpl	r3, [r4, #20]
 8007b6a:	60a3      	str	r3, [r4, #8]
 8007b6c:	e7f2      	b.n	8007b54 <__swsetup_r+0xac>
 8007b6e:	2000      	movs	r0, #0
 8007b70:	e7f7      	b.n	8007b62 <__swsetup_r+0xba>
 8007b72:	bf00      	nop
 8007b74:	20000068 	.word	0x20000068
 8007b78:	0800b5c8 	.word	0x0800b5c8
 8007b7c:	0800b5e8 	.word	0x0800b5e8
 8007b80:	0800b5a8 	.word	0x0800b5a8

08007b84 <quorem>:
 8007b84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b88:	6903      	ldr	r3, [r0, #16]
 8007b8a:	690c      	ldr	r4, [r1, #16]
 8007b8c:	42a3      	cmp	r3, r4
 8007b8e:	4680      	mov	r8, r0
 8007b90:	f2c0 8082 	blt.w	8007c98 <quorem+0x114>
 8007b94:	3c01      	subs	r4, #1
 8007b96:	f101 0714 	add.w	r7, r1, #20
 8007b9a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007b9e:	f100 0614 	add.w	r6, r0, #20
 8007ba2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007ba6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007baa:	eb06 030c 	add.w	r3, r6, ip
 8007bae:	3501      	adds	r5, #1
 8007bb0:	eb07 090c 	add.w	r9, r7, ip
 8007bb4:	9301      	str	r3, [sp, #4]
 8007bb6:	fbb0 f5f5 	udiv	r5, r0, r5
 8007bba:	b395      	cbz	r5, 8007c22 <quorem+0x9e>
 8007bbc:	f04f 0a00 	mov.w	sl, #0
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	46b6      	mov	lr, r6
 8007bc4:	46d3      	mov	fp, sl
 8007bc6:	f850 2b04 	ldr.w	r2, [r0], #4
 8007bca:	b293      	uxth	r3, r2
 8007bcc:	fb05 a303 	mla	r3, r5, r3, sl
 8007bd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	ebab 0303 	sub.w	r3, fp, r3
 8007bda:	0c12      	lsrs	r2, r2, #16
 8007bdc:	f8de b000 	ldr.w	fp, [lr]
 8007be0:	fb05 a202 	mla	r2, r5, r2, sl
 8007be4:	fa13 f38b 	uxtah	r3, r3, fp
 8007be8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007bec:	fa1f fb82 	uxth.w	fp, r2
 8007bf0:	f8de 2000 	ldr.w	r2, [lr]
 8007bf4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007bf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c02:	4581      	cmp	r9, r0
 8007c04:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007c08:	f84e 3b04 	str.w	r3, [lr], #4
 8007c0c:	d2db      	bcs.n	8007bc6 <quorem+0x42>
 8007c0e:	f856 300c 	ldr.w	r3, [r6, ip]
 8007c12:	b933      	cbnz	r3, 8007c22 <quorem+0x9e>
 8007c14:	9b01      	ldr	r3, [sp, #4]
 8007c16:	3b04      	subs	r3, #4
 8007c18:	429e      	cmp	r6, r3
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	d330      	bcc.n	8007c80 <quorem+0xfc>
 8007c1e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007c22:	4640      	mov	r0, r8
 8007c24:	f001 f9fe 	bl	8009024 <__mcmp>
 8007c28:	2800      	cmp	r0, #0
 8007c2a:	db25      	blt.n	8007c78 <quorem+0xf4>
 8007c2c:	3501      	adds	r5, #1
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f04f 0c00 	mov.w	ip, #0
 8007c34:	f857 2b04 	ldr.w	r2, [r7], #4
 8007c38:	f8d0 e000 	ldr.w	lr, [r0]
 8007c3c:	b293      	uxth	r3, r2
 8007c3e:	ebac 0303 	sub.w	r3, ip, r3
 8007c42:	0c12      	lsrs	r2, r2, #16
 8007c44:	fa13 f38e 	uxtah	r3, r3, lr
 8007c48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c56:	45b9      	cmp	r9, r7
 8007c58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c5c:	f840 3b04 	str.w	r3, [r0], #4
 8007c60:	d2e8      	bcs.n	8007c34 <quorem+0xb0>
 8007c62:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007c66:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007c6a:	b92a      	cbnz	r2, 8007c78 <quorem+0xf4>
 8007c6c:	3b04      	subs	r3, #4
 8007c6e:	429e      	cmp	r6, r3
 8007c70:	461a      	mov	r2, r3
 8007c72:	d30b      	bcc.n	8007c8c <quorem+0x108>
 8007c74:	f8c8 4010 	str.w	r4, [r8, #16]
 8007c78:	4628      	mov	r0, r5
 8007c7a:	b003      	add	sp, #12
 8007c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c80:	6812      	ldr	r2, [r2, #0]
 8007c82:	3b04      	subs	r3, #4
 8007c84:	2a00      	cmp	r2, #0
 8007c86:	d1ca      	bne.n	8007c1e <quorem+0x9a>
 8007c88:	3c01      	subs	r4, #1
 8007c8a:	e7c5      	b.n	8007c18 <quorem+0x94>
 8007c8c:	6812      	ldr	r2, [r2, #0]
 8007c8e:	3b04      	subs	r3, #4
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	d1ef      	bne.n	8007c74 <quorem+0xf0>
 8007c94:	3c01      	subs	r4, #1
 8007c96:	e7ea      	b.n	8007c6e <quorem+0xea>
 8007c98:	2000      	movs	r0, #0
 8007c9a:	e7ee      	b.n	8007c7a <quorem+0xf6>
 8007c9c:	0000      	movs	r0, r0
	...

08007ca0 <_dtoa_r>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	ec57 6b10 	vmov	r6, r7, d0
 8007ca8:	b097      	sub	sp, #92	; 0x5c
 8007caa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007cac:	9106      	str	r1, [sp, #24]
 8007cae:	4604      	mov	r4, r0
 8007cb0:	920b      	str	r2, [sp, #44]	; 0x2c
 8007cb2:	9312      	str	r3, [sp, #72]	; 0x48
 8007cb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007cb8:	e9cd 6700 	strd	r6, r7, [sp]
 8007cbc:	b93d      	cbnz	r5, 8007cce <_dtoa_r+0x2e>
 8007cbe:	2010      	movs	r0, #16
 8007cc0:	f000 ff92 	bl	8008be8 <malloc>
 8007cc4:	6260      	str	r0, [r4, #36]	; 0x24
 8007cc6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007cca:	6005      	str	r5, [r0, #0]
 8007ccc:	60c5      	str	r5, [r0, #12]
 8007cce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cd0:	6819      	ldr	r1, [r3, #0]
 8007cd2:	b151      	cbz	r1, 8007cea <_dtoa_r+0x4a>
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	604a      	str	r2, [r1, #4]
 8007cd8:	2301      	movs	r3, #1
 8007cda:	4093      	lsls	r3, r2
 8007cdc:	608b      	str	r3, [r1, #8]
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f000 ffbe 	bl	8008c60 <_Bfree>
 8007ce4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	1e3b      	subs	r3, r7, #0
 8007cec:	bfbb      	ittet	lt
 8007cee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007cf2:	9301      	strlt	r3, [sp, #4]
 8007cf4:	2300      	movge	r3, #0
 8007cf6:	2201      	movlt	r2, #1
 8007cf8:	bfac      	ite	ge
 8007cfa:	f8c8 3000 	strge.w	r3, [r8]
 8007cfe:	f8c8 2000 	strlt.w	r2, [r8]
 8007d02:	4baf      	ldr	r3, [pc, #700]	; (8007fc0 <_dtoa_r+0x320>)
 8007d04:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007d08:	ea33 0308 	bics.w	r3, r3, r8
 8007d0c:	d114      	bne.n	8007d38 <_dtoa_r+0x98>
 8007d0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d10:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d14:	6013      	str	r3, [r2, #0]
 8007d16:	9b00      	ldr	r3, [sp, #0]
 8007d18:	b923      	cbnz	r3, 8007d24 <_dtoa_r+0x84>
 8007d1a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	f000 8542 	beq.w	80087a8 <_dtoa_r+0xb08>
 8007d24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d26:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007fd4 <_dtoa_r+0x334>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 8544 	beq.w	80087b8 <_dtoa_r+0xb18>
 8007d30:	f10b 0303 	add.w	r3, fp, #3
 8007d34:	f000 bd3e 	b.w	80087b4 <_dtoa_r+0xb14>
 8007d38:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	2300      	movs	r3, #0
 8007d40:	4630      	mov	r0, r6
 8007d42:	4639      	mov	r1, r7
 8007d44:	f7f9 f89a 	bl	8000e7c <__aeabi_dcmpeq>
 8007d48:	4681      	mov	r9, r0
 8007d4a:	b168      	cbz	r0, 8007d68 <_dtoa_r+0xc8>
 8007d4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d4e:	2301      	movs	r3, #1
 8007d50:	6013      	str	r3, [r2, #0]
 8007d52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 8524 	beq.w	80087a2 <_dtoa_r+0xb02>
 8007d5a:	4b9a      	ldr	r3, [pc, #616]	; (8007fc4 <_dtoa_r+0x324>)
 8007d5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d5e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	f000 bd28 	b.w	80087b8 <_dtoa_r+0xb18>
 8007d68:	aa14      	add	r2, sp, #80	; 0x50
 8007d6a:	a915      	add	r1, sp, #84	; 0x54
 8007d6c:	ec47 6b10 	vmov	d0, r6, r7
 8007d70:	4620      	mov	r0, r4
 8007d72:	f001 f9ce 	bl	8009112 <__d2b>
 8007d76:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007d7a:	9004      	str	r0, [sp, #16]
 8007d7c:	2d00      	cmp	r5, #0
 8007d7e:	d07c      	beq.n	8007e7a <_dtoa_r+0x1da>
 8007d80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d84:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007d88:	46b2      	mov	sl, r6
 8007d8a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007d8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007d92:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007d96:	2200      	movs	r2, #0
 8007d98:	4b8b      	ldr	r3, [pc, #556]	; (8007fc8 <_dtoa_r+0x328>)
 8007d9a:	4650      	mov	r0, sl
 8007d9c:	4659      	mov	r1, fp
 8007d9e:	f7f8 fa23 	bl	80001e8 <__aeabi_dsub>
 8007da2:	a381      	add	r3, pc, #516	; (adr r3, 8007fa8 <_dtoa_r+0x308>)
 8007da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da8:	f7f8 fbd6 	bl	8000558 <__aeabi_dmul>
 8007dac:	a380      	add	r3, pc, #512	; (adr r3, 8007fb0 <_dtoa_r+0x310>)
 8007dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db2:	f7f8 fa1b 	bl	80001ec <__adddf3>
 8007db6:	4606      	mov	r6, r0
 8007db8:	4628      	mov	r0, r5
 8007dba:	460f      	mov	r7, r1
 8007dbc:	f7f8 fb62 	bl	8000484 <__aeabi_i2d>
 8007dc0:	a37d      	add	r3, pc, #500	; (adr r3, 8007fb8 <_dtoa_r+0x318>)
 8007dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc6:	f7f8 fbc7 	bl	8000558 <__aeabi_dmul>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	4630      	mov	r0, r6
 8007dd0:	4639      	mov	r1, r7
 8007dd2:	f7f8 fa0b 	bl	80001ec <__adddf3>
 8007dd6:	4606      	mov	r6, r0
 8007dd8:	460f      	mov	r7, r1
 8007dda:	f7f9 f897 	bl	8000f0c <__aeabi_d2iz>
 8007dde:	2200      	movs	r2, #0
 8007de0:	4682      	mov	sl, r0
 8007de2:	2300      	movs	r3, #0
 8007de4:	4630      	mov	r0, r6
 8007de6:	4639      	mov	r1, r7
 8007de8:	f7f9 f852 	bl	8000e90 <__aeabi_dcmplt>
 8007dec:	b148      	cbz	r0, 8007e02 <_dtoa_r+0x162>
 8007dee:	4650      	mov	r0, sl
 8007df0:	f7f8 fb48 	bl	8000484 <__aeabi_i2d>
 8007df4:	4632      	mov	r2, r6
 8007df6:	463b      	mov	r3, r7
 8007df8:	f7f9 f840 	bl	8000e7c <__aeabi_dcmpeq>
 8007dfc:	b908      	cbnz	r0, 8007e02 <_dtoa_r+0x162>
 8007dfe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007e02:	f1ba 0f16 	cmp.w	sl, #22
 8007e06:	d859      	bhi.n	8007ebc <_dtoa_r+0x21c>
 8007e08:	4970      	ldr	r1, [pc, #448]	; (8007fcc <_dtoa_r+0x32c>)
 8007e0a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007e0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e16:	f7f9 f859 	bl	8000ecc <__aeabi_dcmpgt>
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	d050      	beq.n	8007ec0 <_dtoa_r+0x220>
 8007e1e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007e22:	2300      	movs	r3, #0
 8007e24:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e28:	1b5d      	subs	r5, r3, r5
 8007e2a:	f1b5 0801 	subs.w	r8, r5, #1
 8007e2e:	bf49      	itett	mi
 8007e30:	f1c5 0301 	rsbmi	r3, r5, #1
 8007e34:	2300      	movpl	r3, #0
 8007e36:	9305      	strmi	r3, [sp, #20]
 8007e38:	f04f 0800 	movmi.w	r8, #0
 8007e3c:	bf58      	it	pl
 8007e3e:	9305      	strpl	r3, [sp, #20]
 8007e40:	f1ba 0f00 	cmp.w	sl, #0
 8007e44:	db3e      	blt.n	8007ec4 <_dtoa_r+0x224>
 8007e46:	2300      	movs	r3, #0
 8007e48:	44d0      	add	r8, sl
 8007e4a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007e4e:	9307      	str	r3, [sp, #28]
 8007e50:	9b06      	ldr	r3, [sp, #24]
 8007e52:	2b09      	cmp	r3, #9
 8007e54:	f200 8090 	bhi.w	8007f78 <_dtoa_r+0x2d8>
 8007e58:	2b05      	cmp	r3, #5
 8007e5a:	bfc4      	itt	gt
 8007e5c:	3b04      	subgt	r3, #4
 8007e5e:	9306      	strgt	r3, [sp, #24]
 8007e60:	9b06      	ldr	r3, [sp, #24]
 8007e62:	f1a3 0302 	sub.w	r3, r3, #2
 8007e66:	bfcc      	ite	gt
 8007e68:	2500      	movgt	r5, #0
 8007e6a:	2501      	movle	r5, #1
 8007e6c:	2b03      	cmp	r3, #3
 8007e6e:	f200 808f 	bhi.w	8007f90 <_dtoa_r+0x2f0>
 8007e72:	e8df f003 	tbb	[pc, r3]
 8007e76:	7f7d      	.short	0x7f7d
 8007e78:	7131      	.short	0x7131
 8007e7a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007e7e:	441d      	add	r5, r3
 8007e80:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007e84:	2820      	cmp	r0, #32
 8007e86:	dd13      	ble.n	8007eb0 <_dtoa_r+0x210>
 8007e88:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007e8c:	9b00      	ldr	r3, [sp, #0]
 8007e8e:	fa08 f800 	lsl.w	r8, r8, r0
 8007e92:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007e96:	fa23 f000 	lsr.w	r0, r3, r0
 8007e9a:	ea48 0000 	orr.w	r0, r8, r0
 8007e9e:	f7f8 fae1 	bl	8000464 <__aeabi_ui2d>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	4682      	mov	sl, r0
 8007ea6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007eaa:	3d01      	subs	r5, #1
 8007eac:	9313      	str	r3, [sp, #76]	; 0x4c
 8007eae:	e772      	b.n	8007d96 <_dtoa_r+0xf6>
 8007eb0:	9b00      	ldr	r3, [sp, #0]
 8007eb2:	f1c0 0020 	rsb	r0, r0, #32
 8007eb6:	fa03 f000 	lsl.w	r0, r3, r0
 8007eba:	e7f0      	b.n	8007e9e <_dtoa_r+0x1fe>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e7b1      	b.n	8007e24 <_dtoa_r+0x184>
 8007ec0:	900f      	str	r0, [sp, #60]	; 0x3c
 8007ec2:	e7b0      	b.n	8007e26 <_dtoa_r+0x186>
 8007ec4:	9b05      	ldr	r3, [sp, #20]
 8007ec6:	eba3 030a 	sub.w	r3, r3, sl
 8007eca:	9305      	str	r3, [sp, #20]
 8007ecc:	f1ca 0300 	rsb	r3, sl, #0
 8007ed0:	9307      	str	r3, [sp, #28]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	930e      	str	r3, [sp, #56]	; 0x38
 8007ed6:	e7bb      	b.n	8007e50 <_dtoa_r+0x1b0>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	930a      	str	r3, [sp, #40]	; 0x28
 8007edc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	dd59      	ble.n	8007f96 <_dtoa_r+0x2f6>
 8007ee2:	9302      	str	r3, [sp, #8]
 8007ee4:	4699      	mov	r9, r3
 8007ee6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ee8:	2200      	movs	r2, #0
 8007eea:	6072      	str	r2, [r6, #4]
 8007eec:	2204      	movs	r2, #4
 8007eee:	f102 0014 	add.w	r0, r2, #20
 8007ef2:	4298      	cmp	r0, r3
 8007ef4:	6871      	ldr	r1, [r6, #4]
 8007ef6:	d953      	bls.n	8007fa0 <_dtoa_r+0x300>
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f000 fe7d 	bl	8008bf8 <_Balloc>
 8007efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f00:	6030      	str	r0, [r6, #0]
 8007f02:	f1b9 0f0e 	cmp.w	r9, #14
 8007f06:	f8d3 b000 	ldr.w	fp, [r3]
 8007f0a:	f200 80e6 	bhi.w	80080da <_dtoa_r+0x43a>
 8007f0e:	2d00      	cmp	r5, #0
 8007f10:	f000 80e3 	beq.w	80080da <_dtoa_r+0x43a>
 8007f14:	ed9d 7b00 	vldr	d7, [sp]
 8007f18:	f1ba 0f00 	cmp.w	sl, #0
 8007f1c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007f20:	dd74      	ble.n	800800c <_dtoa_r+0x36c>
 8007f22:	4a2a      	ldr	r2, [pc, #168]	; (8007fcc <_dtoa_r+0x32c>)
 8007f24:	f00a 030f 	and.w	r3, sl, #15
 8007f28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f2c:	ed93 7b00 	vldr	d7, [r3]
 8007f30:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007f34:	06f0      	lsls	r0, r6, #27
 8007f36:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007f3a:	d565      	bpl.n	8008008 <_dtoa_r+0x368>
 8007f3c:	4b24      	ldr	r3, [pc, #144]	; (8007fd0 <_dtoa_r+0x330>)
 8007f3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007f42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f46:	f7f8 fc31 	bl	80007ac <__aeabi_ddiv>
 8007f4a:	e9cd 0100 	strd	r0, r1, [sp]
 8007f4e:	f006 060f 	and.w	r6, r6, #15
 8007f52:	2503      	movs	r5, #3
 8007f54:	4f1e      	ldr	r7, [pc, #120]	; (8007fd0 <_dtoa_r+0x330>)
 8007f56:	e04c      	b.n	8007ff2 <_dtoa_r+0x352>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	930a      	str	r3, [sp, #40]	; 0x28
 8007f5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f5e:	4453      	add	r3, sl
 8007f60:	f103 0901 	add.w	r9, r3, #1
 8007f64:	9302      	str	r3, [sp, #8]
 8007f66:	464b      	mov	r3, r9
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	bfb8      	it	lt
 8007f6c:	2301      	movlt	r3, #1
 8007f6e:	e7ba      	b.n	8007ee6 <_dtoa_r+0x246>
 8007f70:	2300      	movs	r3, #0
 8007f72:	e7b2      	b.n	8007eda <_dtoa_r+0x23a>
 8007f74:	2300      	movs	r3, #0
 8007f76:	e7f0      	b.n	8007f5a <_dtoa_r+0x2ba>
 8007f78:	2501      	movs	r5, #1
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	9306      	str	r3, [sp, #24]
 8007f7e:	950a      	str	r5, [sp, #40]	; 0x28
 8007f80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f84:	9302      	str	r3, [sp, #8]
 8007f86:	4699      	mov	r9, r3
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2312      	movs	r3, #18
 8007f8c:	920b      	str	r2, [sp, #44]	; 0x2c
 8007f8e:	e7aa      	b.n	8007ee6 <_dtoa_r+0x246>
 8007f90:	2301      	movs	r3, #1
 8007f92:	930a      	str	r3, [sp, #40]	; 0x28
 8007f94:	e7f4      	b.n	8007f80 <_dtoa_r+0x2e0>
 8007f96:	2301      	movs	r3, #1
 8007f98:	9302      	str	r3, [sp, #8]
 8007f9a:	4699      	mov	r9, r3
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	e7f5      	b.n	8007f8c <_dtoa_r+0x2ec>
 8007fa0:	3101      	adds	r1, #1
 8007fa2:	6071      	str	r1, [r6, #4]
 8007fa4:	0052      	lsls	r2, r2, #1
 8007fa6:	e7a2      	b.n	8007eee <_dtoa_r+0x24e>
 8007fa8:	636f4361 	.word	0x636f4361
 8007fac:	3fd287a7 	.word	0x3fd287a7
 8007fb0:	8b60c8b3 	.word	0x8b60c8b3
 8007fb4:	3fc68a28 	.word	0x3fc68a28
 8007fb8:	509f79fb 	.word	0x509f79fb
 8007fbc:	3fd34413 	.word	0x3fd34413
 8007fc0:	7ff00000 	.word	0x7ff00000
 8007fc4:	0800b575 	.word	0x0800b575
 8007fc8:	3ff80000 	.word	0x3ff80000
 8007fcc:	0800b630 	.word	0x0800b630
 8007fd0:	0800b608 	.word	0x0800b608
 8007fd4:	0800b5a1 	.word	0x0800b5a1
 8007fd8:	07f1      	lsls	r1, r6, #31
 8007fda:	d508      	bpl.n	8007fee <_dtoa_r+0x34e>
 8007fdc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fe4:	f7f8 fab8 	bl	8000558 <__aeabi_dmul>
 8007fe8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007fec:	3501      	adds	r5, #1
 8007fee:	1076      	asrs	r6, r6, #1
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	2e00      	cmp	r6, #0
 8007ff4:	d1f0      	bne.n	8007fd8 <_dtoa_r+0x338>
 8007ff6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007ffa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ffe:	f7f8 fbd5 	bl	80007ac <__aeabi_ddiv>
 8008002:	e9cd 0100 	strd	r0, r1, [sp]
 8008006:	e01a      	b.n	800803e <_dtoa_r+0x39e>
 8008008:	2502      	movs	r5, #2
 800800a:	e7a3      	b.n	8007f54 <_dtoa_r+0x2b4>
 800800c:	f000 80a0 	beq.w	8008150 <_dtoa_r+0x4b0>
 8008010:	f1ca 0600 	rsb	r6, sl, #0
 8008014:	4b9f      	ldr	r3, [pc, #636]	; (8008294 <_dtoa_r+0x5f4>)
 8008016:	4fa0      	ldr	r7, [pc, #640]	; (8008298 <_dtoa_r+0x5f8>)
 8008018:	f006 020f 	and.w	r2, r6, #15
 800801c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008024:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008028:	f7f8 fa96 	bl	8000558 <__aeabi_dmul>
 800802c:	e9cd 0100 	strd	r0, r1, [sp]
 8008030:	1136      	asrs	r6, r6, #4
 8008032:	2300      	movs	r3, #0
 8008034:	2502      	movs	r5, #2
 8008036:	2e00      	cmp	r6, #0
 8008038:	d17f      	bne.n	800813a <_dtoa_r+0x49a>
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e1      	bne.n	8008002 <_dtoa_r+0x362>
 800803e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 8087 	beq.w	8008154 <_dtoa_r+0x4b4>
 8008046:	e9dd 6700 	ldrd	r6, r7, [sp]
 800804a:	2200      	movs	r2, #0
 800804c:	4b93      	ldr	r3, [pc, #588]	; (800829c <_dtoa_r+0x5fc>)
 800804e:	4630      	mov	r0, r6
 8008050:	4639      	mov	r1, r7
 8008052:	f7f8 ff1d 	bl	8000e90 <__aeabi_dcmplt>
 8008056:	2800      	cmp	r0, #0
 8008058:	d07c      	beq.n	8008154 <_dtoa_r+0x4b4>
 800805a:	f1b9 0f00 	cmp.w	r9, #0
 800805e:	d079      	beq.n	8008154 <_dtoa_r+0x4b4>
 8008060:	9b02      	ldr	r3, [sp, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	dd35      	ble.n	80080d2 <_dtoa_r+0x432>
 8008066:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800806a:	9308      	str	r3, [sp, #32]
 800806c:	4639      	mov	r1, r7
 800806e:	2200      	movs	r2, #0
 8008070:	4b8b      	ldr	r3, [pc, #556]	; (80082a0 <_dtoa_r+0x600>)
 8008072:	4630      	mov	r0, r6
 8008074:	f7f8 fa70 	bl	8000558 <__aeabi_dmul>
 8008078:	e9cd 0100 	strd	r0, r1, [sp]
 800807c:	9f02      	ldr	r7, [sp, #8]
 800807e:	3501      	adds	r5, #1
 8008080:	4628      	mov	r0, r5
 8008082:	f7f8 f9ff 	bl	8000484 <__aeabi_i2d>
 8008086:	e9dd 2300 	ldrd	r2, r3, [sp]
 800808a:	f7f8 fa65 	bl	8000558 <__aeabi_dmul>
 800808e:	2200      	movs	r2, #0
 8008090:	4b84      	ldr	r3, [pc, #528]	; (80082a4 <_dtoa_r+0x604>)
 8008092:	f7f8 f8ab 	bl	80001ec <__adddf3>
 8008096:	4605      	mov	r5, r0
 8008098:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800809c:	2f00      	cmp	r7, #0
 800809e:	d15d      	bne.n	800815c <_dtoa_r+0x4bc>
 80080a0:	2200      	movs	r2, #0
 80080a2:	4b81      	ldr	r3, [pc, #516]	; (80082a8 <_dtoa_r+0x608>)
 80080a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080a8:	f7f8 f89e 	bl	80001e8 <__aeabi_dsub>
 80080ac:	462a      	mov	r2, r5
 80080ae:	4633      	mov	r3, r6
 80080b0:	e9cd 0100 	strd	r0, r1, [sp]
 80080b4:	f7f8 ff0a 	bl	8000ecc <__aeabi_dcmpgt>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	f040 8288 	bne.w	80085ce <_dtoa_r+0x92e>
 80080be:	462a      	mov	r2, r5
 80080c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80080c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080c8:	f7f8 fee2 	bl	8000e90 <__aeabi_dcmplt>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	f040 827c 	bne.w	80085ca <_dtoa_r+0x92a>
 80080d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80080d6:	e9cd 2300 	strd	r2, r3, [sp]
 80080da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f2c0 8150 	blt.w	8008382 <_dtoa_r+0x6e2>
 80080e2:	f1ba 0f0e 	cmp.w	sl, #14
 80080e6:	f300 814c 	bgt.w	8008382 <_dtoa_r+0x6e2>
 80080ea:	4b6a      	ldr	r3, [pc, #424]	; (8008294 <_dtoa_r+0x5f4>)
 80080ec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80080f0:	ed93 7b00 	vldr	d7, [r3]
 80080f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80080fc:	f280 80d8 	bge.w	80082b0 <_dtoa_r+0x610>
 8008100:	f1b9 0f00 	cmp.w	r9, #0
 8008104:	f300 80d4 	bgt.w	80082b0 <_dtoa_r+0x610>
 8008108:	f040 825e 	bne.w	80085c8 <_dtoa_r+0x928>
 800810c:	2200      	movs	r2, #0
 800810e:	4b66      	ldr	r3, [pc, #408]	; (80082a8 <_dtoa_r+0x608>)
 8008110:	ec51 0b17 	vmov	r0, r1, d7
 8008114:	f7f8 fa20 	bl	8000558 <__aeabi_dmul>
 8008118:	e9dd 2300 	ldrd	r2, r3, [sp]
 800811c:	f7f8 fecc 	bl	8000eb8 <__aeabi_dcmpge>
 8008120:	464f      	mov	r7, r9
 8008122:	464e      	mov	r6, r9
 8008124:	2800      	cmp	r0, #0
 8008126:	f040 8234 	bne.w	8008592 <_dtoa_r+0x8f2>
 800812a:	2331      	movs	r3, #49	; 0x31
 800812c:	f10b 0501 	add.w	r5, fp, #1
 8008130:	f88b 3000 	strb.w	r3, [fp]
 8008134:	f10a 0a01 	add.w	sl, sl, #1
 8008138:	e22f      	b.n	800859a <_dtoa_r+0x8fa>
 800813a:	07f2      	lsls	r2, r6, #31
 800813c:	d505      	bpl.n	800814a <_dtoa_r+0x4aa>
 800813e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008142:	f7f8 fa09 	bl	8000558 <__aeabi_dmul>
 8008146:	3501      	adds	r5, #1
 8008148:	2301      	movs	r3, #1
 800814a:	1076      	asrs	r6, r6, #1
 800814c:	3708      	adds	r7, #8
 800814e:	e772      	b.n	8008036 <_dtoa_r+0x396>
 8008150:	2502      	movs	r5, #2
 8008152:	e774      	b.n	800803e <_dtoa_r+0x39e>
 8008154:	f8cd a020 	str.w	sl, [sp, #32]
 8008158:	464f      	mov	r7, r9
 800815a:	e791      	b.n	8008080 <_dtoa_r+0x3e0>
 800815c:	4b4d      	ldr	r3, [pc, #308]	; (8008294 <_dtoa_r+0x5f4>)
 800815e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008162:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008168:	2b00      	cmp	r3, #0
 800816a:	d047      	beq.n	80081fc <_dtoa_r+0x55c>
 800816c:	4602      	mov	r2, r0
 800816e:	460b      	mov	r3, r1
 8008170:	2000      	movs	r0, #0
 8008172:	494e      	ldr	r1, [pc, #312]	; (80082ac <_dtoa_r+0x60c>)
 8008174:	f7f8 fb1a 	bl	80007ac <__aeabi_ddiv>
 8008178:	462a      	mov	r2, r5
 800817a:	4633      	mov	r3, r6
 800817c:	f7f8 f834 	bl	80001e8 <__aeabi_dsub>
 8008180:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008184:	465d      	mov	r5, fp
 8008186:	e9dd 0100 	ldrd	r0, r1, [sp]
 800818a:	f7f8 febf 	bl	8000f0c <__aeabi_d2iz>
 800818e:	4606      	mov	r6, r0
 8008190:	f7f8 f978 	bl	8000484 <__aeabi_i2d>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	e9dd 0100 	ldrd	r0, r1, [sp]
 800819c:	f7f8 f824 	bl	80001e8 <__aeabi_dsub>
 80081a0:	3630      	adds	r6, #48	; 0x30
 80081a2:	f805 6b01 	strb.w	r6, [r5], #1
 80081a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80081aa:	e9cd 0100 	strd	r0, r1, [sp]
 80081ae:	f7f8 fe6f 	bl	8000e90 <__aeabi_dcmplt>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	d163      	bne.n	800827e <_dtoa_r+0x5de>
 80081b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081ba:	2000      	movs	r0, #0
 80081bc:	4937      	ldr	r1, [pc, #220]	; (800829c <_dtoa_r+0x5fc>)
 80081be:	f7f8 f813 	bl	80001e8 <__aeabi_dsub>
 80081c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80081c6:	f7f8 fe63 	bl	8000e90 <__aeabi_dcmplt>
 80081ca:	2800      	cmp	r0, #0
 80081cc:	f040 80b7 	bne.w	800833e <_dtoa_r+0x69e>
 80081d0:	eba5 030b 	sub.w	r3, r5, fp
 80081d4:	429f      	cmp	r7, r3
 80081d6:	f77f af7c 	ble.w	80080d2 <_dtoa_r+0x432>
 80081da:	2200      	movs	r2, #0
 80081dc:	4b30      	ldr	r3, [pc, #192]	; (80082a0 <_dtoa_r+0x600>)
 80081de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081e2:	f7f8 f9b9 	bl	8000558 <__aeabi_dmul>
 80081e6:	2200      	movs	r2, #0
 80081e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80081ec:	4b2c      	ldr	r3, [pc, #176]	; (80082a0 <_dtoa_r+0x600>)
 80081ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081f2:	f7f8 f9b1 	bl	8000558 <__aeabi_dmul>
 80081f6:	e9cd 0100 	strd	r0, r1, [sp]
 80081fa:	e7c4      	b.n	8008186 <_dtoa_r+0x4e6>
 80081fc:	462a      	mov	r2, r5
 80081fe:	4633      	mov	r3, r6
 8008200:	f7f8 f9aa 	bl	8000558 <__aeabi_dmul>
 8008204:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008208:	eb0b 0507 	add.w	r5, fp, r7
 800820c:	465e      	mov	r6, fp
 800820e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008212:	f7f8 fe7b 	bl	8000f0c <__aeabi_d2iz>
 8008216:	4607      	mov	r7, r0
 8008218:	f7f8 f934 	bl	8000484 <__aeabi_i2d>
 800821c:	3730      	adds	r7, #48	; 0x30
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008226:	f7f7 ffdf 	bl	80001e8 <__aeabi_dsub>
 800822a:	f806 7b01 	strb.w	r7, [r6], #1
 800822e:	42ae      	cmp	r6, r5
 8008230:	e9cd 0100 	strd	r0, r1, [sp]
 8008234:	f04f 0200 	mov.w	r2, #0
 8008238:	d126      	bne.n	8008288 <_dtoa_r+0x5e8>
 800823a:	4b1c      	ldr	r3, [pc, #112]	; (80082ac <_dtoa_r+0x60c>)
 800823c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008240:	f7f7 ffd4 	bl	80001ec <__adddf3>
 8008244:	4602      	mov	r2, r0
 8008246:	460b      	mov	r3, r1
 8008248:	e9dd 0100 	ldrd	r0, r1, [sp]
 800824c:	f7f8 fe3e 	bl	8000ecc <__aeabi_dcmpgt>
 8008250:	2800      	cmp	r0, #0
 8008252:	d174      	bne.n	800833e <_dtoa_r+0x69e>
 8008254:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008258:	2000      	movs	r0, #0
 800825a:	4914      	ldr	r1, [pc, #80]	; (80082ac <_dtoa_r+0x60c>)
 800825c:	f7f7 ffc4 	bl	80001e8 <__aeabi_dsub>
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008268:	f7f8 fe12 	bl	8000e90 <__aeabi_dcmplt>
 800826c:	2800      	cmp	r0, #0
 800826e:	f43f af30 	beq.w	80080d2 <_dtoa_r+0x432>
 8008272:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008276:	2b30      	cmp	r3, #48	; 0x30
 8008278:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800827c:	d002      	beq.n	8008284 <_dtoa_r+0x5e4>
 800827e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008282:	e04a      	b.n	800831a <_dtoa_r+0x67a>
 8008284:	4615      	mov	r5, r2
 8008286:	e7f4      	b.n	8008272 <_dtoa_r+0x5d2>
 8008288:	4b05      	ldr	r3, [pc, #20]	; (80082a0 <_dtoa_r+0x600>)
 800828a:	f7f8 f965 	bl	8000558 <__aeabi_dmul>
 800828e:	e9cd 0100 	strd	r0, r1, [sp]
 8008292:	e7bc      	b.n	800820e <_dtoa_r+0x56e>
 8008294:	0800b630 	.word	0x0800b630
 8008298:	0800b608 	.word	0x0800b608
 800829c:	3ff00000 	.word	0x3ff00000
 80082a0:	40240000 	.word	0x40240000
 80082a4:	401c0000 	.word	0x401c0000
 80082a8:	40140000 	.word	0x40140000
 80082ac:	3fe00000 	.word	0x3fe00000
 80082b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80082b4:	465d      	mov	r5, fp
 80082b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082ba:	4630      	mov	r0, r6
 80082bc:	4639      	mov	r1, r7
 80082be:	f7f8 fa75 	bl	80007ac <__aeabi_ddiv>
 80082c2:	f7f8 fe23 	bl	8000f0c <__aeabi_d2iz>
 80082c6:	4680      	mov	r8, r0
 80082c8:	f7f8 f8dc 	bl	8000484 <__aeabi_i2d>
 80082cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082d0:	f7f8 f942 	bl	8000558 <__aeabi_dmul>
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	4630      	mov	r0, r6
 80082da:	4639      	mov	r1, r7
 80082dc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80082e0:	f7f7 ff82 	bl	80001e8 <__aeabi_dsub>
 80082e4:	f805 6b01 	strb.w	r6, [r5], #1
 80082e8:	eba5 060b 	sub.w	r6, r5, fp
 80082ec:	45b1      	cmp	r9, r6
 80082ee:	4602      	mov	r2, r0
 80082f0:	460b      	mov	r3, r1
 80082f2:	d139      	bne.n	8008368 <_dtoa_r+0x6c8>
 80082f4:	f7f7 ff7a 	bl	80001ec <__adddf3>
 80082f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082fc:	4606      	mov	r6, r0
 80082fe:	460f      	mov	r7, r1
 8008300:	f7f8 fde4 	bl	8000ecc <__aeabi_dcmpgt>
 8008304:	b9c8      	cbnz	r0, 800833a <_dtoa_r+0x69a>
 8008306:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800830a:	4630      	mov	r0, r6
 800830c:	4639      	mov	r1, r7
 800830e:	f7f8 fdb5 	bl	8000e7c <__aeabi_dcmpeq>
 8008312:	b110      	cbz	r0, 800831a <_dtoa_r+0x67a>
 8008314:	f018 0f01 	tst.w	r8, #1
 8008318:	d10f      	bne.n	800833a <_dtoa_r+0x69a>
 800831a:	9904      	ldr	r1, [sp, #16]
 800831c:	4620      	mov	r0, r4
 800831e:	f000 fc9f 	bl	8008c60 <_Bfree>
 8008322:	2300      	movs	r3, #0
 8008324:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008326:	702b      	strb	r3, [r5, #0]
 8008328:	f10a 0301 	add.w	r3, sl, #1
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 8241 	beq.w	80087b8 <_dtoa_r+0xb18>
 8008336:	601d      	str	r5, [r3, #0]
 8008338:	e23e      	b.n	80087b8 <_dtoa_r+0xb18>
 800833a:	f8cd a020 	str.w	sl, [sp, #32]
 800833e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008342:	2a39      	cmp	r2, #57	; 0x39
 8008344:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8008348:	d108      	bne.n	800835c <_dtoa_r+0x6bc>
 800834a:	459b      	cmp	fp, r3
 800834c:	d10a      	bne.n	8008364 <_dtoa_r+0x6c4>
 800834e:	9b08      	ldr	r3, [sp, #32]
 8008350:	3301      	adds	r3, #1
 8008352:	9308      	str	r3, [sp, #32]
 8008354:	2330      	movs	r3, #48	; 0x30
 8008356:	f88b 3000 	strb.w	r3, [fp]
 800835a:	465b      	mov	r3, fp
 800835c:	781a      	ldrb	r2, [r3, #0]
 800835e:	3201      	adds	r2, #1
 8008360:	701a      	strb	r2, [r3, #0]
 8008362:	e78c      	b.n	800827e <_dtoa_r+0x5de>
 8008364:	461d      	mov	r5, r3
 8008366:	e7ea      	b.n	800833e <_dtoa_r+0x69e>
 8008368:	2200      	movs	r2, #0
 800836a:	4b9b      	ldr	r3, [pc, #620]	; (80085d8 <_dtoa_r+0x938>)
 800836c:	f7f8 f8f4 	bl	8000558 <__aeabi_dmul>
 8008370:	2200      	movs	r2, #0
 8008372:	2300      	movs	r3, #0
 8008374:	4606      	mov	r6, r0
 8008376:	460f      	mov	r7, r1
 8008378:	f7f8 fd80 	bl	8000e7c <__aeabi_dcmpeq>
 800837c:	2800      	cmp	r0, #0
 800837e:	d09a      	beq.n	80082b6 <_dtoa_r+0x616>
 8008380:	e7cb      	b.n	800831a <_dtoa_r+0x67a>
 8008382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008384:	2a00      	cmp	r2, #0
 8008386:	f000 808b 	beq.w	80084a0 <_dtoa_r+0x800>
 800838a:	9a06      	ldr	r2, [sp, #24]
 800838c:	2a01      	cmp	r2, #1
 800838e:	dc6e      	bgt.n	800846e <_dtoa_r+0x7ce>
 8008390:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008392:	2a00      	cmp	r2, #0
 8008394:	d067      	beq.n	8008466 <_dtoa_r+0x7c6>
 8008396:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800839a:	9f07      	ldr	r7, [sp, #28]
 800839c:	9d05      	ldr	r5, [sp, #20]
 800839e:	9a05      	ldr	r2, [sp, #20]
 80083a0:	2101      	movs	r1, #1
 80083a2:	441a      	add	r2, r3
 80083a4:	4620      	mov	r0, r4
 80083a6:	9205      	str	r2, [sp, #20]
 80083a8:	4498      	add	r8, r3
 80083aa:	f000 fcf9 	bl	8008da0 <__i2b>
 80083ae:	4606      	mov	r6, r0
 80083b0:	2d00      	cmp	r5, #0
 80083b2:	dd0c      	ble.n	80083ce <_dtoa_r+0x72e>
 80083b4:	f1b8 0f00 	cmp.w	r8, #0
 80083b8:	dd09      	ble.n	80083ce <_dtoa_r+0x72e>
 80083ba:	4545      	cmp	r5, r8
 80083bc:	9a05      	ldr	r2, [sp, #20]
 80083be:	462b      	mov	r3, r5
 80083c0:	bfa8      	it	ge
 80083c2:	4643      	movge	r3, r8
 80083c4:	1ad2      	subs	r2, r2, r3
 80083c6:	9205      	str	r2, [sp, #20]
 80083c8:	1aed      	subs	r5, r5, r3
 80083ca:	eba8 0803 	sub.w	r8, r8, r3
 80083ce:	9b07      	ldr	r3, [sp, #28]
 80083d0:	b1eb      	cbz	r3, 800840e <_dtoa_r+0x76e>
 80083d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d067      	beq.n	80084a8 <_dtoa_r+0x808>
 80083d8:	b18f      	cbz	r7, 80083fe <_dtoa_r+0x75e>
 80083da:	4631      	mov	r1, r6
 80083dc:	463a      	mov	r2, r7
 80083de:	4620      	mov	r0, r4
 80083e0:	f000 fd7e 	bl	8008ee0 <__pow5mult>
 80083e4:	9a04      	ldr	r2, [sp, #16]
 80083e6:	4601      	mov	r1, r0
 80083e8:	4606      	mov	r6, r0
 80083ea:	4620      	mov	r0, r4
 80083ec:	f000 fce1 	bl	8008db2 <__multiply>
 80083f0:	9904      	ldr	r1, [sp, #16]
 80083f2:	9008      	str	r0, [sp, #32]
 80083f4:	4620      	mov	r0, r4
 80083f6:	f000 fc33 	bl	8008c60 <_Bfree>
 80083fa:	9b08      	ldr	r3, [sp, #32]
 80083fc:	9304      	str	r3, [sp, #16]
 80083fe:	9b07      	ldr	r3, [sp, #28]
 8008400:	1bda      	subs	r2, r3, r7
 8008402:	d004      	beq.n	800840e <_dtoa_r+0x76e>
 8008404:	9904      	ldr	r1, [sp, #16]
 8008406:	4620      	mov	r0, r4
 8008408:	f000 fd6a 	bl	8008ee0 <__pow5mult>
 800840c:	9004      	str	r0, [sp, #16]
 800840e:	2101      	movs	r1, #1
 8008410:	4620      	mov	r0, r4
 8008412:	f000 fcc5 	bl	8008da0 <__i2b>
 8008416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008418:	4607      	mov	r7, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 81d0 	beq.w	80087c0 <_dtoa_r+0xb20>
 8008420:	461a      	mov	r2, r3
 8008422:	4601      	mov	r1, r0
 8008424:	4620      	mov	r0, r4
 8008426:	f000 fd5b 	bl	8008ee0 <__pow5mult>
 800842a:	9b06      	ldr	r3, [sp, #24]
 800842c:	2b01      	cmp	r3, #1
 800842e:	4607      	mov	r7, r0
 8008430:	dc40      	bgt.n	80084b4 <_dtoa_r+0x814>
 8008432:	9b00      	ldr	r3, [sp, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d139      	bne.n	80084ac <_dtoa_r+0x80c>
 8008438:	9b01      	ldr	r3, [sp, #4]
 800843a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800843e:	2b00      	cmp	r3, #0
 8008440:	d136      	bne.n	80084b0 <_dtoa_r+0x810>
 8008442:	9b01      	ldr	r3, [sp, #4]
 8008444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008448:	0d1b      	lsrs	r3, r3, #20
 800844a:	051b      	lsls	r3, r3, #20
 800844c:	b12b      	cbz	r3, 800845a <_dtoa_r+0x7ba>
 800844e:	9b05      	ldr	r3, [sp, #20]
 8008450:	3301      	adds	r3, #1
 8008452:	9305      	str	r3, [sp, #20]
 8008454:	f108 0801 	add.w	r8, r8, #1
 8008458:	2301      	movs	r3, #1
 800845a:	9307      	str	r3, [sp, #28]
 800845c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800845e:	2b00      	cmp	r3, #0
 8008460:	d12a      	bne.n	80084b8 <_dtoa_r+0x818>
 8008462:	2001      	movs	r0, #1
 8008464:	e030      	b.n	80084c8 <_dtoa_r+0x828>
 8008466:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008468:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800846c:	e795      	b.n	800839a <_dtoa_r+0x6fa>
 800846e:	9b07      	ldr	r3, [sp, #28]
 8008470:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8008474:	42bb      	cmp	r3, r7
 8008476:	bfbf      	itttt	lt
 8008478:	9b07      	ldrlt	r3, [sp, #28]
 800847a:	9707      	strlt	r7, [sp, #28]
 800847c:	1afa      	sublt	r2, r7, r3
 800847e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008480:	bfbb      	ittet	lt
 8008482:	189b      	addlt	r3, r3, r2
 8008484:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008486:	1bdf      	subge	r7, r3, r7
 8008488:	2700      	movlt	r7, #0
 800848a:	f1b9 0f00 	cmp.w	r9, #0
 800848e:	bfb5      	itete	lt
 8008490:	9b05      	ldrlt	r3, [sp, #20]
 8008492:	9d05      	ldrge	r5, [sp, #20]
 8008494:	eba3 0509 	sublt.w	r5, r3, r9
 8008498:	464b      	movge	r3, r9
 800849a:	bfb8      	it	lt
 800849c:	2300      	movlt	r3, #0
 800849e:	e77e      	b.n	800839e <_dtoa_r+0x6fe>
 80084a0:	9f07      	ldr	r7, [sp, #28]
 80084a2:	9d05      	ldr	r5, [sp, #20]
 80084a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80084a6:	e783      	b.n	80083b0 <_dtoa_r+0x710>
 80084a8:	9a07      	ldr	r2, [sp, #28]
 80084aa:	e7ab      	b.n	8008404 <_dtoa_r+0x764>
 80084ac:	2300      	movs	r3, #0
 80084ae:	e7d4      	b.n	800845a <_dtoa_r+0x7ba>
 80084b0:	9b00      	ldr	r3, [sp, #0]
 80084b2:	e7d2      	b.n	800845a <_dtoa_r+0x7ba>
 80084b4:	2300      	movs	r3, #0
 80084b6:	9307      	str	r3, [sp, #28]
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80084be:	6918      	ldr	r0, [r3, #16]
 80084c0:	f000 fc20 	bl	8008d04 <__hi0bits>
 80084c4:	f1c0 0020 	rsb	r0, r0, #32
 80084c8:	4440      	add	r0, r8
 80084ca:	f010 001f 	ands.w	r0, r0, #31
 80084ce:	d047      	beq.n	8008560 <_dtoa_r+0x8c0>
 80084d0:	f1c0 0320 	rsb	r3, r0, #32
 80084d4:	2b04      	cmp	r3, #4
 80084d6:	dd3b      	ble.n	8008550 <_dtoa_r+0x8b0>
 80084d8:	9b05      	ldr	r3, [sp, #20]
 80084da:	f1c0 001c 	rsb	r0, r0, #28
 80084de:	4403      	add	r3, r0
 80084e0:	9305      	str	r3, [sp, #20]
 80084e2:	4405      	add	r5, r0
 80084e4:	4480      	add	r8, r0
 80084e6:	9b05      	ldr	r3, [sp, #20]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	dd05      	ble.n	80084f8 <_dtoa_r+0x858>
 80084ec:	461a      	mov	r2, r3
 80084ee:	9904      	ldr	r1, [sp, #16]
 80084f0:	4620      	mov	r0, r4
 80084f2:	f000 fd43 	bl	8008f7c <__lshift>
 80084f6:	9004      	str	r0, [sp, #16]
 80084f8:	f1b8 0f00 	cmp.w	r8, #0
 80084fc:	dd05      	ble.n	800850a <_dtoa_r+0x86a>
 80084fe:	4639      	mov	r1, r7
 8008500:	4642      	mov	r2, r8
 8008502:	4620      	mov	r0, r4
 8008504:	f000 fd3a 	bl	8008f7c <__lshift>
 8008508:	4607      	mov	r7, r0
 800850a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800850c:	b353      	cbz	r3, 8008564 <_dtoa_r+0x8c4>
 800850e:	4639      	mov	r1, r7
 8008510:	9804      	ldr	r0, [sp, #16]
 8008512:	f000 fd87 	bl	8009024 <__mcmp>
 8008516:	2800      	cmp	r0, #0
 8008518:	da24      	bge.n	8008564 <_dtoa_r+0x8c4>
 800851a:	2300      	movs	r3, #0
 800851c:	220a      	movs	r2, #10
 800851e:	9904      	ldr	r1, [sp, #16]
 8008520:	4620      	mov	r0, r4
 8008522:	f000 fbb4 	bl	8008c8e <__multadd>
 8008526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008528:	9004      	str	r0, [sp, #16]
 800852a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 814d 	beq.w	80087ce <_dtoa_r+0xb2e>
 8008534:	2300      	movs	r3, #0
 8008536:	4631      	mov	r1, r6
 8008538:	220a      	movs	r2, #10
 800853a:	4620      	mov	r0, r4
 800853c:	f000 fba7 	bl	8008c8e <__multadd>
 8008540:	9b02      	ldr	r3, [sp, #8]
 8008542:	2b00      	cmp	r3, #0
 8008544:	4606      	mov	r6, r0
 8008546:	dc4f      	bgt.n	80085e8 <_dtoa_r+0x948>
 8008548:	9b06      	ldr	r3, [sp, #24]
 800854a:	2b02      	cmp	r3, #2
 800854c:	dd4c      	ble.n	80085e8 <_dtoa_r+0x948>
 800854e:	e011      	b.n	8008574 <_dtoa_r+0x8d4>
 8008550:	d0c9      	beq.n	80084e6 <_dtoa_r+0x846>
 8008552:	9a05      	ldr	r2, [sp, #20]
 8008554:	331c      	adds	r3, #28
 8008556:	441a      	add	r2, r3
 8008558:	9205      	str	r2, [sp, #20]
 800855a:	441d      	add	r5, r3
 800855c:	4498      	add	r8, r3
 800855e:	e7c2      	b.n	80084e6 <_dtoa_r+0x846>
 8008560:	4603      	mov	r3, r0
 8008562:	e7f6      	b.n	8008552 <_dtoa_r+0x8b2>
 8008564:	f1b9 0f00 	cmp.w	r9, #0
 8008568:	dc38      	bgt.n	80085dc <_dtoa_r+0x93c>
 800856a:	9b06      	ldr	r3, [sp, #24]
 800856c:	2b02      	cmp	r3, #2
 800856e:	dd35      	ble.n	80085dc <_dtoa_r+0x93c>
 8008570:	f8cd 9008 	str.w	r9, [sp, #8]
 8008574:	9b02      	ldr	r3, [sp, #8]
 8008576:	b963      	cbnz	r3, 8008592 <_dtoa_r+0x8f2>
 8008578:	4639      	mov	r1, r7
 800857a:	2205      	movs	r2, #5
 800857c:	4620      	mov	r0, r4
 800857e:	f000 fb86 	bl	8008c8e <__multadd>
 8008582:	4601      	mov	r1, r0
 8008584:	4607      	mov	r7, r0
 8008586:	9804      	ldr	r0, [sp, #16]
 8008588:	f000 fd4c 	bl	8009024 <__mcmp>
 800858c:	2800      	cmp	r0, #0
 800858e:	f73f adcc 	bgt.w	800812a <_dtoa_r+0x48a>
 8008592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008594:	465d      	mov	r5, fp
 8008596:	ea6f 0a03 	mvn.w	sl, r3
 800859a:	f04f 0900 	mov.w	r9, #0
 800859e:	4639      	mov	r1, r7
 80085a0:	4620      	mov	r0, r4
 80085a2:	f000 fb5d 	bl	8008c60 <_Bfree>
 80085a6:	2e00      	cmp	r6, #0
 80085a8:	f43f aeb7 	beq.w	800831a <_dtoa_r+0x67a>
 80085ac:	f1b9 0f00 	cmp.w	r9, #0
 80085b0:	d005      	beq.n	80085be <_dtoa_r+0x91e>
 80085b2:	45b1      	cmp	r9, r6
 80085b4:	d003      	beq.n	80085be <_dtoa_r+0x91e>
 80085b6:	4649      	mov	r1, r9
 80085b8:	4620      	mov	r0, r4
 80085ba:	f000 fb51 	bl	8008c60 <_Bfree>
 80085be:	4631      	mov	r1, r6
 80085c0:	4620      	mov	r0, r4
 80085c2:	f000 fb4d 	bl	8008c60 <_Bfree>
 80085c6:	e6a8      	b.n	800831a <_dtoa_r+0x67a>
 80085c8:	2700      	movs	r7, #0
 80085ca:	463e      	mov	r6, r7
 80085cc:	e7e1      	b.n	8008592 <_dtoa_r+0x8f2>
 80085ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80085d2:	463e      	mov	r6, r7
 80085d4:	e5a9      	b.n	800812a <_dtoa_r+0x48a>
 80085d6:	bf00      	nop
 80085d8:	40240000 	.word	0x40240000
 80085dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085de:	f8cd 9008 	str.w	r9, [sp, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f000 80fa 	beq.w	80087dc <_dtoa_r+0xb3c>
 80085e8:	2d00      	cmp	r5, #0
 80085ea:	dd05      	ble.n	80085f8 <_dtoa_r+0x958>
 80085ec:	4631      	mov	r1, r6
 80085ee:	462a      	mov	r2, r5
 80085f0:	4620      	mov	r0, r4
 80085f2:	f000 fcc3 	bl	8008f7c <__lshift>
 80085f6:	4606      	mov	r6, r0
 80085f8:	9b07      	ldr	r3, [sp, #28]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d04c      	beq.n	8008698 <_dtoa_r+0x9f8>
 80085fe:	6871      	ldr	r1, [r6, #4]
 8008600:	4620      	mov	r0, r4
 8008602:	f000 faf9 	bl	8008bf8 <_Balloc>
 8008606:	6932      	ldr	r2, [r6, #16]
 8008608:	3202      	adds	r2, #2
 800860a:	4605      	mov	r5, r0
 800860c:	0092      	lsls	r2, r2, #2
 800860e:	f106 010c 	add.w	r1, r6, #12
 8008612:	300c      	adds	r0, #12
 8008614:	f7fe fd0a 	bl	800702c <memcpy>
 8008618:	2201      	movs	r2, #1
 800861a:	4629      	mov	r1, r5
 800861c:	4620      	mov	r0, r4
 800861e:	f000 fcad 	bl	8008f7c <__lshift>
 8008622:	9b00      	ldr	r3, [sp, #0]
 8008624:	f8cd b014 	str.w	fp, [sp, #20]
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	46b1      	mov	r9, r6
 800862e:	9307      	str	r3, [sp, #28]
 8008630:	4606      	mov	r6, r0
 8008632:	4639      	mov	r1, r7
 8008634:	9804      	ldr	r0, [sp, #16]
 8008636:	f7ff faa5 	bl	8007b84 <quorem>
 800863a:	4649      	mov	r1, r9
 800863c:	4605      	mov	r5, r0
 800863e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008642:	9804      	ldr	r0, [sp, #16]
 8008644:	f000 fcee 	bl	8009024 <__mcmp>
 8008648:	4632      	mov	r2, r6
 800864a:	9000      	str	r0, [sp, #0]
 800864c:	4639      	mov	r1, r7
 800864e:	4620      	mov	r0, r4
 8008650:	f000 fd02 	bl	8009058 <__mdiff>
 8008654:	68c3      	ldr	r3, [r0, #12]
 8008656:	4602      	mov	r2, r0
 8008658:	bb03      	cbnz	r3, 800869c <_dtoa_r+0x9fc>
 800865a:	4601      	mov	r1, r0
 800865c:	9008      	str	r0, [sp, #32]
 800865e:	9804      	ldr	r0, [sp, #16]
 8008660:	f000 fce0 	bl	8009024 <__mcmp>
 8008664:	9a08      	ldr	r2, [sp, #32]
 8008666:	4603      	mov	r3, r0
 8008668:	4611      	mov	r1, r2
 800866a:	4620      	mov	r0, r4
 800866c:	9308      	str	r3, [sp, #32]
 800866e:	f000 faf7 	bl	8008c60 <_Bfree>
 8008672:	9b08      	ldr	r3, [sp, #32]
 8008674:	b9a3      	cbnz	r3, 80086a0 <_dtoa_r+0xa00>
 8008676:	9a06      	ldr	r2, [sp, #24]
 8008678:	b992      	cbnz	r2, 80086a0 <_dtoa_r+0xa00>
 800867a:	9a07      	ldr	r2, [sp, #28]
 800867c:	b982      	cbnz	r2, 80086a0 <_dtoa_r+0xa00>
 800867e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008682:	d029      	beq.n	80086d8 <_dtoa_r+0xa38>
 8008684:	9b00      	ldr	r3, [sp, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	dd01      	ble.n	800868e <_dtoa_r+0x9ee>
 800868a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800868e:	9b05      	ldr	r3, [sp, #20]
 8008690:	1c5d      	adds	r5, r3, #1
 8008692:	f883 8000 	strb.w	r8, [r3]
 8008696:	e782      	b.n	800859e <_dtoa_r+0x8fe>
 8008698:	4630      	mov	r0, r6
 800869a:	e7c2      	b.n	8008622 <_dtoa_r+0x982>
 800869c:	2301      	movs	r3, #1
 800869e:	e7e3      	b.n	8008668 <_dtoa_r+0x9c8>
 80086a0:	9a00      	ldr	r2, [sp, #0]
 80086a2:	2a00      	cmp	r2, #0
 80086a4:	db04      	blt.n	80086b0 <_dtoa_r+0xa10>
 80086a6:	d125      	bne.n	80086f4 <_dtoa_r+0xa54>
 80086a8:	9a06      	ldr	r2, [sp, #24]
 80086aa:	bb1a      	cbnz	r2, 80086f4 <_dtoa_r+0xa54>
 80086ac:	9a07      	ldr	r2, [sp, #28]
 80086ae:	bb0a      	cbnz	r2, 80086f4 <_dtoa_r+0xa54>
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	ddec      	ble.n	800868e <_dtoa_r+0x9ee>
 80086b4:	2201      	movs	r2, #1
 80086b6:	9904      	ldr	r1, [sp, #16]
 80086b8:	4620      	mov	r0, r4
 80086ba:	f000 fc5f 	bl	8008f7c <__lshift>
 80086be:	4639      	mov	r1, r7
 80086c0:	9004      	str	r0, [sp, #16]
 80086c2:	f000 fcaf 	bl	8009024 <__mcmp>
 80086c6:	2800      	cmp	r0, #0
 80086c8:	dc03      	bgt.n	80086d2 <_dtoa_r+0xa32>
 80086ca:	d1e0      	bne.n	800868e <_dtoa_r+0x9ee>
 80086cc:	f018 0f01 	tst.w	r8, #1
 80086d0:	d0dd      	beq.n	800868e <_dtoa_r+0x9ee>
 80086d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80086d6:	d1d8      	bne.n	800868a <_dtoa_r+0x9ea>
 80086d8:	9b05      	ldr	r3, [sp, #20]
 80086da:	9a05      	ldr	r2, [sp, #20]
 80086dc:	1c5d      	adds	r5, r3, #1
 80086de:	2339      	movs	r3, #57	; 0x39
 80086e0:	7013      	strb	r3, [r2, #0]
 80086e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80086e6:	2b39      	cmp	r3, #57	; 0x39
 80086e8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80086ec:	d04f      	beq.n	800878e <_dtoa_r+0xaee>
 80086ee:	3301      	adds	r3, #1
 80086f0:	7013      	strb	r3, [r2, #0]
 80086f2:	e754      	b.n	800859e <_dtoa_r+0x8fe>
 80086f4:	9a05      	ldr	r2, [sp, #20]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f102 0501 	add.w	r5, r2, #1
 80086fc:	dd06      	ble.n	800870c <_dtoa_r+0xa6c>
 80086fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008702:	d0e9      	beq.n	80086d8 <_dtoa_r+0xa38>
 8008704:	f108 0801 	add.w	r8, r8, #1
 8008708:	9b05      	ldr	r3, [sp, #20]
 800870a:	e7c2      	b.n	8008692 <_dtoa_r+0x9f2>
 800870c:	9a02      	ldr	r2, [sp, #8]
 800870e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008712:	eba5 030b 	sub.w	r3, r5, fp
 8008716:	4293      	cmp	r3, r2
 8008718:	d021      	beq.n	800875e <_dtoa_r+0xabe>
 800871a:	2300      	movs	r3, #0
 800871c:	220a      	movs	r2, #10
 800871e:	9904      	ldr	r1, [sp, #16]
 8008720:	4620      	mov	r0, r4
 8008722:	f000 fab4 	bl	8008c8e <__multadd>
 8008726:	45b1      	cmp	r9, r6
 8008728:	9004      	str	r0, [sp, #16]
 800872a:	f04f 0300 	mov.w	r3, #0
 800872e:	f04f 020a 	mov.w	r2, #10
 8008732:	4649      	mov	r1, r9
 8008734:	4620      	mov	r0, r4
 8008736:	d105      	bne.n	8008744 <_dtoa_r+0xaa4>
 8008738:	f000 faa9 	bl	8008c8e <__multadd>
 800873c:	4681      	mov	r9, r0
 800873e:	4606      	mov	r6, r0
 8008740:	9505      	str	r5, [sp, #20]
 8008742:	e776      	b.n	8008632 <_dtoa_r+0x992>
 8008744:	f000 faa3 	bl	8008c8e <__multadd>
 8008748:	4631      	mov	r1, r6
 800874a:	4681      	mov	r9, r0
 800874c:	2300      	movs	r3, #0
 800874e:	220a      	movs	r2, #10
 8008750:	4620      	mov	r0, r4
 8008752:	f000 fa9c 	bl	8008c8e <__multadd>
 8008756:	4606      	mov	r6, r0
 8008758:	e7f2      	b.n	8008740 <_dtoa_r+0xaa0>
 800875a:	f04f 0900 	mov.w	r9, #0
 800875e:	2201      	movs	r2, #1
 8008760:	9904      	ldr	r1, [sp, #16]
 8008762:	4620      	mov	r0, r4
 8008764:	f000 fc0a 	bl	8008f7c <__lshift>
 8008768:	4639      	mov	r1, r7
 800876a:	9004      	str	r0, [sp, #16]
 800876c:	f000 fc5a 	bl	8009024 <__mcmp>
 8008770:	2800      	cmp	r0, #0
 8008772:	dcb6      	bgt.n	80086e2 <_dtoa_r+0xa42>
 8008774:	d102      	bne.n	800877c <_dtoa_r+0xadc>
 8008776:	f018 0f01 	tst.w	r8, #1
 800877a:	d1b2      	bne.n	80086e2 <_dtoa_r+0xa42>
 800877c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008780:	2b30      	cmp	r3, #48	; 0x30
 8008782:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008786:	f47f af0a 	bne.w	800859e <_dtoa_r+0x8fe>
 800878a:	4615      	mov	r5, r2
 800878c:	e7f6      	b.n	800877c <_dtoa_r+0xadc>
 800878e:	4593      	cmp	fp, r2
 8008790:	d105      	bne.n	800879e <_dtoa_r+0xafe>
 8008792:	2331      	movs	r3, #49	; 0x31
 8008794:	f10a 0a01 	add.w	sl, sl, #1
 8008798:	f88b 3000 	strb.w	r3, [fp]
 800879c:	e6ff      	b.n	800859e <_dtoa_r+0x8fe>
 800879e:	4615      	mov	r5, r2
 80087a0:	e79f      	b.n	80086e2 <_dtoa_r+0xa42>
 80087a2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008808 <_dtoa_r+0xb68>
 80087a6:	e007      	b.n	80087b8 <_dtoa_r+0xb18>
 80087a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087aa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800880c <_dtoa_r+0xb6c>
 80087ae:	b11b      	cbz	r3, 80087b8 <_dtoa_r+0xb18>
 80087b0:	f10b 0308 	add.w	r3, fp, #8
 80087b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80087b6:	6013      	str	r3, [r2, #0]
 80087b8:	4658      	mov	r0, fp
 80087ba:	b017      	add	sp, #92	; 0x5c
 80087bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c0:	9b06      	ldr	r3, [sp, #24]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	f77f ae35 	ble.w	8008432 <_dtoa_r+0x792>
 80087c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087ca:	9307      	str	r3, [sp, #28]
 80087cc:	e649      	b.n	8008462 <_dtoa_r+0x7c2>
 80087ce:	9b02      	ldr	r3, [sp, #8]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	dc03      	bgt.n	80087dc <_dtoa_r+0xb3c>
 80087d4:	9b06      	ldr	r3, [sp, #24]
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	f73f aecc 	bgt.w	8008574 <_dtoa_r+0x8d4>
 80087dc:	465d      	mov	r5, fp
 80087de:	4639      	mov	r1, r7
 80087e0:	9804      	ldr	r0, [sp, #16]
 80087e2:	f7ff f9cf 	bl	8007b84 <quorem>
 80087e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80087ea:	f805 8b01 	strb.w	r8, [r5], #1
 80087ee:	9a02      	ldr	r2, [sp, #8]
 80087f0:	eba5 030b 	sub.w	r3, r5, fp
 80087f4:	429a      	cmp	r2, r3
 80087f6:	ddb0      	ble.n	800875a <_dtoa_r+0xaba>
 80087f8:	2300      	movs	r3, #0
 80087fa:	220a      	movs	r2, #10
 80087fc:	9904      	ldr	r1, [sp, #16]
 80087fe:	4620      	mov	r0, r4
 8008800:	f000 fa45 	bl	8008c8e <__multadd>
 8008804:	9004      	str	r0, [sp, #16]
 8008806:	e7ea      	b.n	80087de <_dtoa_r+0xb3e>
 8008808:	0800b574 	.word	0x0800b574
 800880c:	0800b598 	.word	0x0800b598

08008810 <__sflush_r>:
 8008810:	898a      	ldrh	r2, [r1, #12]
 8008812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008816:	4605      	mov	r5, r0
 8008818:	0710      	lsls	r0, r2, #28
 800881a:	460c      	mov	r4, r1
 800881c:	d458      	bmi.n	80088d0 <__sflush_r+0xc0>
 800881e:	684b      	ldr	r3, [r1, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	dc05      	bgt.n	8008830 <__sflush_r+0x20>
 8008824:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008826:	2b00      	cmp	r3, #0
 8008828:	dc02      	bgt.n	8008830 <__sflush_r+0x20>
 800882a:	2000      	movs	r0, #0
 800882c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008832:	2e00      	cmp	r6, #0
 8008834:	d0f9      	beq.n	800882a <__sflush_r+0x1a>
 8008836:	2300      	movs	r3, #0
 8008838:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800883c:	682f      	ldr	r7, [r5, #0]
 800883e:	6a21      	ldr	r1, [r4, #32]
 8008840:	602b      	str	r3, [r5, #0]
 8008842:	d032      	beq.n	80088aa <__sflush_r+0x9a>
 8008844:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008846:	89a3      	ldrh	r3, [r4, #12]
 8008848:	075a      	lsls	r2, r3, #29
 800884a:	d505      	bpl.n	8008858 <__sflush_r+0x48>
 800884c:	6863      	ldr	r3, [r4, #4]
 800884e:	1ac0      	subs	r0, r0, r3
 8008850:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008852:	b10b      	cbz	r3, 8008858 <__sflush_r+0x48>
 8008854:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008856:	1ac0      	subs	r0, r0, r3
 8008858:	2300      	movs	r3, #0
 800885a:	4602      	mov	r2, r0
 800885c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800885e:	6a21      	ldr	r1, [r4, #32]
 8008860:	4628      	mov	r0, r5
 8008862:	47b0      	blx	r6
 8008864:	1c43      	adds	r3, r0, #1
 8008866:	89a3      	ldrh	r3, [r4, #12]
 8008868:	d106      	bne.n	8008878 <__sflush_r+0x68>
 800886a:	6829      	ldr	r1, [r5, #0]
 800886c:	291d      	cmp	r1, #29
 800886e:	d848      	bhi.n	8008902 <__sflush_r+0xf2>
 8008870:	4a29      	ldr	r2, [pc, #164]	; (8008918 <__sflush_r+0x108>)
 8008872:	40ca      	lsrs	r2, r1
 8008874:	07d6      	lsls	r6, r2, #31
 8008876:	d544      	bpl.n	8008902 <__sflush_r+0xf2>
 8008878:	2200      	movs	r2, #0
 800887a:	6062      	str	r2, [r4, #4]
 800887c:	04d9      	lsls	r1, r3, #19
 800887e:	6922      	ldr	r2, [r4, #16]
 8008880:	6022      	str	r2, [r4, #0]
 8008882:	d504      	bpl.n	800888e <__sflush_r+0x7e>
 8008884:	1c42      	adds	r2, r0, #1
 8008886:	d101      	bne.n	800888c <__sflush_r+0x7c>
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	b903      	cbnz	r3, 800888e <__sflush_r+0x7e>
 800888c:	6560      	str	r0, [r4, #84]	; 0x54
 800888e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008890:	602f      	str	r7, [r5, #0]
 8008892:	2900      	cmp	r1, #0
 8008894:	d0c9      	beq.n	800882a <__sflush_r+0x1a>
 8008896:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800889a:	4299      	cmp	r1, r3
 800889c:	d002      	beq.n	80088a4 <__sflush_r+0x94>
 800889e:	4628      	mov	r0, r5
 80088a0:	f000 fc94 	bl	80091cc <_free_r>
 80088a4:	2000      	movs	r0, #0
 80088a6:	6360      	str	r0, [r4, #52]	; 0x34
 80088a8:	e7c0      	b.n	800882c <__sflush_r+0x1c>
 80088aa:	2301      	movs	r3, #1
 80088ac:	4628      	mov	r0, r5
 80088ae:	47b0      	blx	r6
 80088b0:	1c41      	adds	r1, r0, #1
 80088b2:	d1c8      	bne.n	8008846 <__sflush_r+0x36>
 80088b4:	682b      	ldr	r3, [r5, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d0c5      	beq.n	8008846 <__sflush_r+0x36>
 80088ba:	2b1d      	cmp	r3, #29
 80088bc:	d001      	beq.n	80088c2 <__sflush_r+0xb2>
 80088be:	2b16      	cmp	r3, #22
 80088c0:	d101      	bne.n	80088c6 <__sflush_r+0xb6>
 80088c2:	602f      	str	r7, [r5, #0]
 80088c4:	e7b1      	b.n	800882a <__sflush_r+0x1a>
 80088c6:	89a3      	ldrh	r3, [r4, #12]
 80088c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088cc:	81a3      	strh	r3, [r4, #12]
 80088ce:	e7ad      	b.n	800882c <__sflush_r+0x1c>
 80088d0:	690f      	ldr	r7, [r1, #16]
 80088d2:	2f00      	cmp	r7, #0
 80088d4:	d0a9      	beq.n	800882a <__sflush_r+0x1a>
 80088d6:	0793      	lsls	r3, r2, #30
 80088d8:	680e      	ldr	r6, [r1, #0]
 80088da:	bf08      	it	eq
 80088dc:	694b      	ldreq	r3, [r1, #20]
 80088de:	600f      	str	r7, [r1, #0]
 80088e0:	bf18      	it	ne
 80088e2:	2300      	movne	r3, #0
 80088e4:	eba6 0807 	sub.w	r8, r6, r7
 80088e8:	608b      	str	r3, [r1, #8]
 80088ea:	f1b8 0f00 	cmp.w	r8, #0
 80088ee:	dd9c      	ble.n	800882a <__sflush_r+0x1a>
 80088f0:	4643      	mov	r3, r8
 80088f2:	463a      	mov	r2, r7
 80088f4:	6a21      	ldr	r1, [r4, #32]
 80088f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088f8:	4628      	mov	r0, r5
 80088fa:	47b0      	blx	r6
 80088fc:	2800      	cmp	r0, #0
 80088fe:	dc06      	bgt.n	800890e <__sflush_r+0xfe>
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008906:	81a3      	strh	r3, [r4, #12]
 8008908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800890c:	e78e      	b.n	800882c <__sflush_r+0x1c>
 800890e:	4407      	add	r7, r0
 8008910:	eba8 0800 	sub.w	r8, r8, r0
 8008914:	e7e9      	b.n	80088ea <__sflush_r+0xda>
 8008916:	bf00      	nop
 8008918:	20400001 	.word	0x20400001

0800891c <_fflush_r>:
 800891c:	b538      	push	{r3, r4, r5, lr}
 800891e:	690b      	ldr	r3, [r1, #16]
 8008920:	4605      	mov	r5, r0
 8008922:	460c      	mov	r4, r1
 8008924:	b1db      	cbz	r3, 800895e <_fflush_r+0x42>
 8008926:	b118      	cbz	r0, 8008930 <_fflush_r+0x14>
 8008928:	6983      	ldr	r3, [r0, #24]
 800892a:	b90b      	cbnz	r3, 8008930 <_fflush_r+0x14>
 800892c:	f000 f860 	bl	80089f0 <__sinit>
 8008930:	4b0c      	ldr	r3, [pc, #48]	; (8008964 <_fflush_r+0x48>)
 8008932:	429c      	cmp	r4, r3
 8008934:	d109      	bne.n	800894a <_fflush_r+0x2e>
 8008936:	686c      	ldr	r4, [r5, #4]
 8008938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800893c:	b17b      	cbz	r3, 800895e <_fflush_r+0x42>
 800893e:	4621      	mov	r1, r4
 8008940:	4628      	mov	r0, r5
 8008942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008946:	f7ff bf63 	b.w	8008810 <__sflush_r>
 800894a:	4b07      	ldr	r3, [pc, #28]	; (8008968 <_fflush_r+0x4c>)
 800894c:	429c      	cmp	r4, r3
 800894e:	d101      	bne.n	8008954 <_fflush_r+0x38>
 8008950:	68ac      	ldr	r4, [r5, #8]
 8008952:	e7f1      	b.n	8008938 <_fflush_r+0x1c>
 8008954:	4b05      	ldr	r3, [pc, #20]	; (800896c <_fflush_r+0x50>)
 8008956:	429c      	cmp	r4, r3
 8008958:	bf08      	it	eq
 800895a:	68ec      	ldreq	r4, [r5, #12]
 800895c:	e7ec      	b.n	8008938 <_fflush_r+0x1c>
 800895e:	2000      	movs	r0, #0
 8008960:	bd38      	pop	{r3, r4, r5, pc}
 8008962:	bf00      	nop
 8008964:	0800b5c8 	.word	0x0800b5c8
 8008968:	0800b5e8 	.word	0x0800b5e8
 800896c:	0800b5a8 	.word	0x0800b5a8

08008970 <std>:
 8008970:	2300      	movs	r3, #0
 8008972:	b510      	push	{r4, lr}
 8008974:	4604      	mov	r4, r0
 8008976:	e9c0 3300 	strd	r3, r3, [r0]
 800897a:	6083      	str	r3, [r0, #8]
 800897c:	8181      	strh	r1, [r0, #12]
 800897e:	6643      	str	r3, [r0, #100]	; 0x64
 8008980:	81c2      	strh	r2, [r0, #14]
 8008982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008986:	6183      	str	r3, [r0, #24]
 8008988:	4619      	mov	r1, r3
 800898a:	2208      	movs	r2, #8
 800898c:	305c      	adds	r0, #92	; 0x5c
 800898e:	f7fe fb58 	bl	8007042 <memset>
 8008992:	4b05      	ldr	r3, [pc, #20]	; (80089a8 <std+0x38>)
 8008994:	6263      	str	r3, [r4, #36]	; 0x24
 8008996:	4b05      	ldr	r3, [pc, #20]	; (80089ac <std+0x3c>)
 8008998:	62a3      	str	r3, [r4, #40]	; 0x28
 800899a:	4b05      	ldr	r3, [pc, #20]	; (80089b0 <std+0x40>)
 800899c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800899e:	4b05      	ldr	r3, [pc, #20]	; (80089b4 <std+0x44>)
 80089a0:	6224      	str	r4, [r4, #32]
 80089a2:	6323      	str	r3, [r4, #48]	; 0x30
 80089a4:	bd10      	pop	{r4, pc}
 80089a6:	bf00      	nop
 80089a8:	080095bd 	.word	0x080095bd
 80089ac:	080095df 	.word	0x080095df
 80089b0:	08009617 	.word	0x08009617
 80089b4:	0800963b 	.word	0x0800963b

080089b8 <_cleanup_r>:
 80089b8:	4901      	ldr	r1, [pc, #4]	; (80089c0 <_cleanup_r+0x8>)
 80089ba:	f000 b885 	b.w	8008ac8 <_fwalk_reent>
 80089be:	bf00      	nop
 80089c0:	0800891d 	.word	0x0800891d

080089c4 <__sfmoreglue>:
 80089c4:	b570      	push	{r4, r5, r6, lr}
 80089c6:	1e4a      	subs	r2, r1, #1
 80089c8:	2568      	movs	r5, #104	; 0x68
 80089ca:	4355      	muls	r5, r2
 80089cc:	460e      	mov	r6, r1
 80089ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80089d2:	f000 fc49 	bl	8009268 <_malloc_r>
 80089d6:	4604      	mov	r4, r0
 80089d8:	b140      	cbz	r0, 80089ec <__sfmoreglue+0x28>
 80089da:	2100      	movs	r1, #0
 80089dc:	e9c0 1600 	strd	r1, r6, [r0]
 80089e0:	300c      	adds	r0, #12
 80089e2:	60a0      	str	r0, [r4, #8]
 80089e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80089e8:	f7fe fb2b 	bl	8007042 <memset>
 80089ec:	4620      	mov	r0, r4
 80089ee:	bd70      	pop	{r4, r5, r6, pc}

080089f0 <__sinit>:
 80089f0:	6983      	ldr	r3, [r0, #24]
 80089f2:	b510      	push	{r4, lr}
 80089f4:	4604      	mov	r4, r0
 80089f6:	bb33      	cbnz	r3, 8008a46 <__sinit+0x56>
 80089f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80089fc:	6503      	str	r3, [r0, #80]	; 0x50
 80089fe:	4b12      	ldr	r3, [pc, #72]	; (8008a48 <__sinit+0x58>)
 8008a00:	4a12      	ldr	r2, [pc, #72]	; (8008a4c <__sinit+0x5c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6282      	str	r2, [r0, #40]	; 0x28
 8008a06:	4298      	cmp	r0, r3
 8008a08:	bf04      	itt	eq
 8008a0a:	2301      	moveq	r3, #1
 8008a0c:	6183      	streq	r3, [r0, #24]
 8008a0e:	f000 f81f 	bl	8008a50 <__sfp>
 8008a12:	6060      	str	r0, [r4, #4]
 8008a14:	4620      	mov	r0, r4
 8008a16:	f000 f81b 	bl	8008a50 <__sfp>
 8008a1a:	60a0      	str	r0, [r4, #8]
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f000 f817 	bl	8008a50 <__sfp>
 8008a22:	2200      	movs	r2, #0
 8008a24:	60e0      	str	r0, [r4, #12]
 8008a26:	2104      	movs	r1, #4
 8008a28:	6860      	ldr	r0, [r4, #4]
 8008a2a:	f7ff ffa1 	bl	8008970 <std>
 8008a2e:	2201      	movs	r2, #1
 8008a30:	2109      	movs	r1, #9
 8008a32:	68a0      	ldr	r0, [r4, #8]
 8008a34:	f7ff ff9c 	bl	8008970 <std>
 8008a38:	2202      	movs	r2, #2
 8008a3a:	2112      	movs	r1, #18
 8008a3c:	68e0      	ldr	r0, [r4, #12]
 8008a3e:	f7ff ff97 	bl	8008970 <std>
 8008a42:	2301      	movs	r3, #1
 8008a44:	61a3      	str	r3, [r4, #24]
 8008a46:	bd10      	pop	{r4, pc}
 8008a48:	0800b560 	.word	0x0800b560
 8008a4c:	080089b9 	.word	0x080089b9

08008a50 <__sfp>:
 8008a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a52:	4b1b      	ldr	r3, [pc, #108]	; (8008ac0 <__sfp+0x70>)
 8008a54:	681e      	ldr	r6, [r3, #0]
 8008a56:	69b3      	ldr	r3, [r6, #24]
 8008a58:	4607      	mov	r7, r0
 8008a5a:	b913      	cbnz	r3, 8008a62 <__sfp+0x12>
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	f7ff ffc7 	bl	80089f0 <__sinit>
 8008a62:	3648      	adds	r6, #72	; 0x48
 8008a64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	d503      	bpl.n	8008a74 <__sfp+0x24>
 8008a6c:	6833      	ldr	r3, [r6, #0]
 8008a6e:	b133      	cbz	r3, 8008a7e <__sfp+0x2e>
 8008a70:	6836      	ldr	r6, [r6, #0]
 8008a72:	e7f7      	b.n	8008a64 <__sfp+0x14>
 8008a74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a78:	b16d      	cbz	r5, 8008a96 <__sfp+0x46>
 8008a7a:	3468      	adds	r4, #104	; 0x68
 8008a7c:	e7f4      	b.n	8008a68 <__sfp+0x18>
 8008a7e:	2104      	movs	r1, #4
 8008a80:	4638      	mov	r0, r7
 8008a82:	f7ff ff9f 	bl	80089c4 <__sfmoreglue>
 8008a86:	6030      	str	r0, [r6, #0]
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d1f1      	bne.n	8008a70 <__sfp+0x20>
 8008a8c:	230c      	movs	r3, #12
 8008a8e:	603b      	str	r3, [r7, #0]
 8008a90:	4604      	mov	r4, r0
 8008a92:	4620      	mov	r0, r4
 8008a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a96:	4b0b      	ldr	r3, [pc, #44]	; (8008ac4 <__sfp+0x74>)
 8008a98:	6665      	str	r5, [r4, #100]	; 0x64
 8008a9a:	e9c4 5500 	strd	r5, r5, [r4]
 8008a9e:	60a5      	str	r5, [r4, #8]
 8008aa0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008aa4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008aa8:	2208      	movs	r2, #8
 8008aaa:	4629      	mov	r1, r5
 8008aac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ab0:	f7fe fac7 	bl	8007042 <memset>
 8008ab4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ab8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008abc:	e7e9      	b.n	8008a92 <__sfp+0x42>
 8008abe:	bf00      	nop
 8008ac0:	0800b560 	.word	0x0800b560
 8008ac4:	ffff0001 	.word	0xffff0001

08008ac8 <_fwalk_reent>:
 8008ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008acc:	4680      	mov	r8, r0
 8008ace:	4689      	mov	r9, r1
 8008ad0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008ad4:	2600      	movs	r6, #0
 8008ad6:	b914      	cbnz	r4, 8008ade <_fwalk_reent+0x16>
 8008ad8:	4630      	mov	r0, r6
 8008ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ade:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008ae2:	3f01      	subs	r7, #1
 8008ae4:	d501      	bpl.n	8008aea <_fwalk_reent+0x22>
 8008ae6:	6824      	ldr	r4, [r4, #0]
 8008ae8:	e7f5      	b.n	8008ad6 <_fwalk_reent+0xe>
 8008aea:	89ab      	ldrh	r3, [r5, #12]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d907      	bls.n	8008b00 <_fwalk_reent+0x38>
 8008af0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008af4:	3301      	adds	r3, #1
 8008af6:	d003      	beq.n	8008b00 <_fwalk_reent+0x38>
 8008af8:	4629      	mov	r1, r5
 8008afa:	4640      	mov	r0, r8
 8008afc:	47c8      	blx	r9
 8008afe:	4306      	orrs	r6, r0
 8008b00:	3568      	adds	r5, #104	; 0x68
 8008b02:	e7ee      	b.n	8008ae2 <_fwalk_reent+0x1a>

08008b04 <_localeconv_r>:
 8008b04:	4b04      	ldr	r3, [pc, #16]	; (8008b18 <_localeconv_r+0x14>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6a18      	ldr	r0, [r3, #32]
 8008b0a:	4b04      	ldr	r3, [pc, #16]	; (8008b1c <_localeconv_r+0x18>)
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	bf08      	it	eq
 8008b10:	4618      	moveq	r0, r3
 8008b12:	30f0      	adds	r0, #240	; 0xf0
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	20000068 	.word	0x20000068
 8008b1c:	200000cc 	.word	0x200000cc

08008b20 <__swhatbuf_r>:
 8008b20:	b570      	push	{r4, r5, r6, lr}
 8008b22:	460e      	mov	r6, r1
 8008b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b28:	2900      	cmp	r1, #0
 8008b2a:	b096      	sub	sp, #88	; 0x58
 8008b2c:	4614      	mov	r4, r2
 8008b2e:	461d      	mov	r5, r3
 8008b30:	da07      	bge.n	8008b42 <__swhatbuf_r+0x22>
 8008b32:	2300      	movs	r3, #0
 8008b34:	602b      	str	r3, [r5, #0]
 8008b36:	89b3      	ldrh	r3, [r6, #12]
 8008b38:	061a      	lsls	r2, r3, #24
 8008b3a:	d410      	bmi.n	8008b5e <__swhatbuf_r+0x3e>
 8008b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b40:	e00e      	b.n	8008b60 <__swhatbuf_r+0x40>
 8008b42:	466a      	mov	r2, sp
 8008b44:	f000 fda0 	bl	8009688 <_fstat_r>
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	dbf2      	blt.n	8008b32 <__swhatbuf_r+0x12>
 8008b4c:	9a01      	ldr	r2, [sp, #4]
 8008b4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b56:	425a      	negs	r2, r3
 8008b58:	415a      	adcs	r2, r3
 8008b5a:	602a      	str	r2, [r5, #0]
 8008b5c:	e7ee      	b.n	8008b3c <__swhatbuf_r+0x1c>
 8008b5e:	2340      	movs	r3, #64	; 0x40
 8008b60:	2000      	movs	r0, #0
 8008b62:	6023      	str	r3, [r4, #0]
 8008b64:	b016      	add	sp, #88	; 0x58
 8008b66:	bd70      	pop	{r4, r5, r6, pc}

08008b68 <__smakebuf_r>:
 8008b68:	898b      	ldrh	r3, [r1, #12]
 8008b6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b6c:	079d      	lsls	r5, r3, #30
 8008b6e:	4606      	mov	r6, r0
 8008b70:	460c      	mov	r4, r1
 8008b72:	d507      	bpl.n	8008b84 <__smakebuf_r+0x1c>
 8008b74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	6123      	str	r3, [r4, #16]
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	6163      	str	r3, [r4, #20]
 8008b80:	b002      	add	sp, #8
 8008b82:	bd70      	pop	{r4, r5, r6, pc}
 8008b84:	ab01      	add	r3, sp, #4
 8008b86:	466a      	mov	r2, sp
 8008b88:	f7ff ffca 	bl	8008b20 <__swhatbuf_r>
 8008b8c:	9900      	ldr	r1, [sp, #0]
 8008b8e:	4605      	mov	r5, r0
 8008b90:	4630      	mov	r0, r6
 8008b92:	f000 fb69 	bl	8009268 <_malloc_r>
 8008b96:	b948      	cbnz	r0, 8008bac <__smakebuf_r+0x44>
 8008b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b9c:	059a      	lsls	r2, r3, #22
 8008b9e:	d4ef      	bmi.n	8008b80 <__smakebuf_r+0x18>
 8008ba0:	f023 0303 	bic.w	r3, r3, #3
 8008ba4:	f043 0302 	orr.w	r3, r3, #2
 8008ba8:	81a3      	strh	r3, [r4, #12]
 8008baa:	e7e3      	b.n	8008b74 <__smakebuf_r+0xc>
 8008bac:	4b0d      	ldr	r3, [pc, #52]	; (8008be4 <__smakebuf_r+0x7c>)
 8008bae:	62b3      	str	r3, [r6, #40]	; 0x28
 8008bb0:	89a3      	ldrh	r3, [r4, #12]
 8008bb2:	6020      	str	r0, [r4, #0]
 8008bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb8:	81a3      	strh	r3, [r4, #12]
 8008bba:	9b00      	ldr	r3, [sp, #0]
 8008bbc:	6163      	str	r3, [r4, #20]
 8008bbe:	9b01      	ldr	r3, [sp, #4]
 8008bc0:	6120      	str	r0, [r4, #16]
 8008bc2:	b15b      	cbz	r3, 8008bdc <__smakebuf_r+0x74>
 8008bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f000 fd6f 	bl	80096ac <_isatty_r>
 8008bce:	b128      	cbz	r0, 8008bdc <__smakebuf_r+0x74>
 8008bd0:	89a3      	ldrh	r3, [r4, #12]
 8008bd2:	f023 0303 	bic.w	r3, r3, #3
 8008bd6:	f043 0301 	orr.w	r3, r3, #1
 8008bda:	81a3      	strh	r3, [r4, #12]
 8008bdc:	89a3      	ldrh	r3, [r4, #12]
 8008bde:	431d      	orrs	r5, r3
 8008be0:	81a5      	strh	r5, [r4, #12]
 8008be2:	e7cd      	b.n	8008b80 <__smakebuf_r+0x18>
 8008be4:	080089b9 	.word	0x080089b9

08008be8 <malloc>:
 8008be8:	4b02      	ldr	r3, [pc, #8]	; (8008bf4 <malloc+0xc>)
 8008bea:	4601      	mov	r1, r0
 8008bec:	6818      	ldr	r0, [r3, #0]
 8008bee:	f000 bb3b 	b.w	8009268 <_malloc_r>
 8008bf2:	bf00      	nop
 8008bf4:	20000068 	.word	0x20000068

08008bf8 <_Balloc>:
 8008bf8:	b570      	push	{r4, r5, r6, lr}
 8008bfa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	460e      	mov	r6, r1
 8008c00:	b93d      	cbnz	r5, 8008c12 <_Balloc+0x1a>
 8008c02:	2010      	movs	r0, #16
 8008c04:	f7ff fff0 	bl	8008be8 <malloc>
 8008c08:	6260      	str	r0, [r4, #36]	; 0x24
 8008c0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c0e:	6005      	str	r5, [r0, #0]
 8008c10:	60c5      	str	r5, [r0, #12]
 8008c12:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008c14:	68eb      	ldr	r3, [r5, #12]
 8008c16:	b183      	cbz	r3, 8008c3a <_Balloc+0x42>
 8008c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008c20:	b9b8      	cbnz	r0, 8008c52 <_Balloc+0x5a>
 8008c22:	2101      	movs	r1, #1
 8008c24:	fa01 f506 	lsl.w	r5, r1, r6
 8008c28:	1d6a      	adds	r2, r5, #5
 8008c2a:	0092      	lsls	r2, r2, #2
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f000 fabf 	bl	80091b0 <_calloc_r>
 8008c32:	b160      	cbz	r0, 8008c4e <_Balloc+0x56>
 8008c34:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008c38:	e00e      	b.n	8008c58 <_Balloc+0x60>
 8008c3a:	2221      	movs	r2, #33	; 0x21
 8008c3c:	2104      	movs	r1, #4
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f000 fab6 	bl	80091b0 <_calloc_r>
 8008c44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c46:	60e8      	str	r0, [r5, #12]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1e4      	bne.n	8008c18 <_Balloc+0x20>
 8008c4e:	2000      	movs	r0, #0
 8008c50:	bd70      	pop	{r4, r5, r6, pc}
 8008c52:	6802      	ldr	r2, [r0, #0]
 8008c54:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008c58:	2300      	movs	r3, #0
 8008c5a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c5e:	e7f7      	b.n	8008c50 <_Balloc+0x58>

08008c60 <_Bfree>:
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008c64:	4606      	mov	r6, r0
 8008c66:	460d      	mov	r5, r1
 8008c68:	b93c      	cbnz	r4, 8008c7a <_Bfree+0x1a>
 8008c6a:	2010      	movs	r0, #16
 8008c6c:	f7ff ffbc 	bl	8008be8 <malloc>
 8008c70:	6270      	str	r0, [r6, #36]	; 0x24
 8008c72:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c76:	6004      	str	r4, [r0, #0]
 8008c78:	60c4      	str	r4, [r0, #12]
 8008c7a:	b13d      	cbz	r5, 8008c8c <_Bfree+0x2c>
 8008c7c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008c7e:	686a      	ldr	r2, [r5, #4]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c86:	6029      	str	r1, [r5, #0]
 8008c88:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008c8c:	bd70      	pop	{r4, r5, r6, pc}

08008c8e <__multadd>:
 8008c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c92:	690d      	ldr	r5, [r1, #16]
 8008c94:	461f      	mov	r7, r3
 8008c96:	4606      	mov	r6, r0
 8008c98:	460c      	mov	r4, r1
 8008c9a:	f101 0c14 	add.w	ip, r1, #20
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	f8dc 0000 	ldr.w	r0, [ip]
 8008ca4:	b281      	uxth	r1, r0
 8008ca6:	fb02 7101 	mla	r1, r2, r1, r7
 8008caa:	0c0f      	lsrs	r7, r1, #16
 8008cac:	0c00      	lsrs	r0, r0, #16
 8008cae:	fb02 7000 	mla	r0, r2, r0, r7
 8008cb2:	b289      	uxth	r1, r1
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008cba:	429d      	cmp	r5, r3
 8008cbc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008cc0:	f84c 1b04 	str.w	r1, [ip], #4
 8008cc4:	dcec      	bgt.n	8008ca0 <__multadd+0x12>
 8008cc6:	b1d7      	cbz	r7, 8008cfe <__multadd+0x70>
 8008cc8:	68a3      	ldr	r3, [r4, #8]
 8008cca:	42ab      	cmp	r3, r5
 8008ccc:	dc12      	bgt.n	8008cf4 <__multadd+0x66>
 8008cce:	6861      	ldr	r1, [r4, #4]
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	3101      	adds	r1, #1
 8008cd4:	f7ff ff90 	bl	8008bf8 <_Balloc>
 8008cd8:	6922      	ldr	r2, [r4, #16]
 8008cda:	3202      	adds	r2, #2
 8008cdc:	f104 010c 	add.w	r1, r4, #12
 8008ce0:	4680      	mov	r8, r0
 8008ce2:	0092      	lsls	r2, r2, #2
 8008ce4:	300c      	adds	r0, #12
 8008ce6:	f7fe f9a1 	bl	800702c <memcpy>
 8008cea:	4621      	mov	r1, r4
 8008cec:	4630      	mov	r0, r6
 8008cee:	f7ff ffb7 	bl	8008c60 <_Bfree>
 8008cf2:	4644      	mov	r4, r8
 8008cf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008cf8:	3501      	adds	r5, #1
 8008cfa:	615f      	str	r7, [r3, #20]
 8008cfc:	6125      	str	r5, [r4, #16]
 8008cfe:	4620      	mov	r0, r4
 8008d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008d04 <__hi0bits>:
 8008d04:	0c02      	lsrs	r2, r0, #16
 8008d06:	0412      	lsls	r2, r2, #16
 8008d08:	4603      	mov	r3, r0
 8008d0a:	b9b2      	cbnz	r2, 8008d3a <__hi0bits+0x36>
 8008d0c:	0403      	lsls	r3, r0, #16
 8008d0e:	2010      	movs	r0, #16
 8008d10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008d14:	bf04      	itt	eq
 8008d16:	021b      	lsleq	r3, r3, #8
 8008d18:	3008      	addeq	r0, #8
 8008d1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008d1e:	bf04      	itt	eq
 8008d20:	011b      	lsleq	r3, r3, #4
 8008d22:	3004      	addeq	r0, #4
 8008d24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008d28:	bf04      	itt	eq
 8008d2a:	009b      	lsleq	r3, r3, #2
 8008d2c:	3002      	addeq	r0, #2
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	db06      	blt.n	8008d40 <__hi0bits+0x3c>
 8008d32:	005b      	lsls	r3, r3, #1
 8008d34:	d503      	bpl.n	8008d3e <__hi0bits+0x3a>
 8008d36:	3001      	adds	r0, #1
 8008d38:	4770      	bx	lr
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	e7e8      	b.n	8008d10 <__hi0bits+0xc>
 8008d3e:	2020      	movs	r0, #32
 8008d40:	4770      	bx	lr

08008d42 <__lo0bits>:
 8008d42:	6803      	ldr	r3, [r0, #0]
 8008d44:	f013 0207 	ands.w	r2, r3, #7
 8008d48:	4601      	mov	r1, r0
 8008d4a:	d00b      	beq.n	8008d64 <__lo0bits+0x22>
 8008d4c:	07da      	lsls	r2, r3, #31
 8008d4e:	d423      	bmi.n	8008d98 <__lo0bits+0x56>
 8008d50:	0798      	lsls	r0, r3, #30
 8008d52:	bf49      	itett	mi
 8008d54:	085b      	lsrmi	r3, r3, #1
 8008d56:	089b      	lsrpl	r3, r3, #2
 8008d58:	2001      	movmi	r0, #1
 8008d5a:	600b      	strmi	r3, [r1, #0]
 8008d5c:	bf5c      	itt	pl
 8008d5e:	600b      	strpl	r3, [r1, #0]
 8008d60:	2002      	movpl	r0, #2
 8008d62:	4770      	bx	lr
 8008d64:	b298      	uxth	r0, r3
 8008d66:	b9a8      	cbnz	r0, 8008d94 <__lo0bits+0x52>
 8008d68:	0c1b      	lsrs	r3, r3, #16
 8008d6a:	2010      	movs	r0, #16
 8008d6c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008d70:	bf04      	itt	eq
 8008d72:	0a1b      	lsreq	r3, r3, #8
 8008d74:	3008      	addeq	r0, #8
 8008d76:	071a      	lsls	r2, r3, #28
 8008d78:	bf04      	itt	eq
 8008d7a:	091b      	lsreq	r3, r3, #4
 8008d7c:	3004      	addeq	r0, #4
 8008d7e:	079a      	lsls	r2, r3, #30
 8008d80:	bf04      	itt	eq
 8008d82:	089b      	lsreq	r3, r3, #2
 8008d84:	3002      	addeq	r0, #2
 8008d86:	07da      	lsls	r2, r3, #31
 8008d88:	d402      	bmi.n	8008d90 <__lo0bits+0x4e>
 8008d8a:	085b      	lsrs	r3, r3, #1
 8008d8c:	d006      	beq.n	8008d9c <__lo0bits+0x5a>
 8008d8e:	3001      	adds	r0, #1
 8008d90:	600b      	str	r3, [r1, #0]
 8008d92:	4770      	bx	lr
 8008d94:	4610      	mov	r0, r2
 8008d96:	e7e9      	b.n	8008d6c <__lo0bits+0x2a>
 8008d98:	2000      	movs	r0, #0
 8008d9a:	4770      	bx	lr
 8008d9c:	2020      	movs	r0, #32
 8008d9e:	4770      	bx	lr

08008da0 <__i2b>:
 8008da0:	b510      	push	{r4, lr}
 8008da2:	460c      	mov	r4, r1
 8008da4:	2101      	movs	r1, #1
 8008da6:	f7ff ff27 	bl	8008bf8 <_Balloc>
 8008daa:	2201      	movs	r2, #1
 8008dac:	6144      	str	r4, [r0, #20]
 8008dae:	6102      	str	r2, [r0, #16]
 8008db0:	bd10      	pop	{r4, pc}

08008db2 <__multiply>:
 8008db2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db6:	4614      	mov	r4, r2
 8008db8:	690a      	ldr	r2, [r1, #16]
 8008dba:	6923      	ldr	r3, [r4, #16]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	bfb8      	it	lt
 8008dc0:	460b      	movlt	r3, r1
 8008dc2:	4688      	mov	r8, r1
 8008dc4:	bfbc      	itt	lt
 8008dc6:	46a0      	movlt	r8, r4
 8008dc8:	461c      	movlt	r4, r3
 8008dca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008dce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008dd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008dd6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008dda:	eb07 0609 	add.w	r6, r7, r9
 8008dde:	42b3      	cmp	r3, r6
 8008de0:	bfb8      	it	lt
 8008de2:	3101      	addlt	r1, #1
 8008de4:	f7ff ff08 	bl	8008bf8 <_Balloc>
 8008de8:	f100 0514 	add.w	r5, r0, #20
 8008dec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008df0:	462b      	mov	r3, r5
 8008df2:	2200      	movs	r2, #0
 8008df4:	4573      	cmp	r3, lr
 8008df6:	d316      	bcc.n	8008e26 <__multiply+0x74>
 8008df8:	f104 0214 	add.w	r2, r4, #20
 8008dfc:	f108 0114 	add.w	r1, r8, #20
 8008e00:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008e04:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	9b00      	ldr	r3, [sp, #0]
 8008e0c:	9201      	str	r2, [sp, #4]
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d80c      	bhi.n	8008e2c <__multiply+0x7a>
 8008e12:	2e00      	cmp	r6, #0
 8008e14:	dd03      	ble.n	8008e1e <__multiply+0x6c>
 8008e16:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d05d      	beq.n	8008eda <__multiply+0x128>
 8008e1e:	6106      	str	r6, [r0, #16]
 8008e20:	b003      	add	sp, #12
 8008e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e26:	f843 2b04 	str.w	r2, [r3], #4
 8008e2a:	e7e3      	b.n	8008df4 <__multiply+0x42>
 8008e2c:	f8b2 b000 	ldrh.w	fp, [r2]
 8008e30:	f1bb 0f00 	cmp.w	fp, #0
 8008e34:	d023      	beq.n	8008e7e <__multiply+0xcc>
 8008e36:	4689      	mov	r9, r1
 8008e38:	46ac      	mov	ip, r5
 8008e3a:	f04f 0800 	mov.w	r8, #0
 8008e3e:	f859 4b04 	ldr.w	r4, [r9], #4
 8008e42:	f8dc a000 	ldr.w	sl, [ip]
 8008e46:	b2a3      	uxth	r3, r4
 8008e48:	fa1f fa8a 	uxth.w	sl, sl
 8008e4c:	fb0b a303 	mla	r3, fp, r3, sl
 8008e50:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008e54:	f8dc 4000 	ldr.w	r4, [ip]
 8008e58:	4443      	add	r3, r8
 8008e5a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008e5e:	fb0b 840a 	mla	r4, fp, sl, r8
 8008e62:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008e66:	46e2      	mov	sl, ip
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008e6e:	454f      	cmp	r7, r9
 8008e70:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008e74:	f84a 3b04 	str.w	r3, [sl], #4
 8008e78:	d82b      	bhi.n	8008ed2 <__multiply+0x120>
 8008e7a:	f8cc 8004 	str.w	r8, [ip, #4]
 8008e7e:	9b01      	ldr	r3, [sp, #4]
 8008e80:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008e84:	3204      	adds	r2, #4
 8008e86:	f1ba 0f00 	cmp.w	sl, #0
 8008e8a:	d020      	beq.n	8008ece <__multiply+0x11c>
 8008e8c:	682b      	ldr	r3, [r5, #0]
 8008e8e:	4689      	mov	r9, r1
 8008e90:	46a8      	mov	r8, r5
 8008e92:	f04f 0b00 	mov.w	fp, #0
 8008e96:	f8b9 c000 	ldrh.w	ip, [r9]
 8008e9a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008e9e:	fb0a 440c 	mla	r4, sl, ip, r4
 8008ea2:	445c      	add	r4, fp
 8008ea4:	46c4      	mov	ip, r8
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008eac:	f84c 3b04 	str.w	r3, [ip], #4
 8008eb0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008eb4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008eb8:	0c1b      	lsrs	r3, r3, #16
 8008eba:	fb0a b303 	mla	r3, sl, r3, fp
 8008ebe:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008ec2:	454f      	cmp	r7, r9
 8008ec4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008ec8:	d805      	bhi.n	8008ed6 <__multiply+0x124>
 8008eca:	f8c8 3004 	str.w	r3, [r8, #4]
 8008ece:	3504      	adds	r5, #4
 8008ed0:	e79b      	b.n	8008e0a <__multiply+0x58>
 8008ed2:	46d4      	mov	ip, sl
 8008ed4:	e7b3      	b.n	8008e3e <__multiply+0x8c>
 8008ed6:	46e0      	mov	r8, ip
 8008ed8:	e7dd      	b.n	8008e96 <__multiply+0xe4>
 8008eda:	3e01      	subs	r6, #1
 8008edc:	e799      	b.n	8008e12 <__multiply+0x60>
	...

08008ee0 <__pow5mult>:
 8008ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ee4:	4615      	mov	r5, r2
 8008ee6:	f012 0203 	ands.w	r2, r2, #3
 8008eea:	4606      	mov	r6, r0
 8008eec:	460f      	mov	r7, r1
 8008eee:	d007      	beq.n	8008f00 <__pow5mult+0x20>
 8008ef0:	3a01      	subs	r2, #1
 8008ef2:	4c21      	ldr	r4, [pc, #132]	; (8008f78 <__pow5mult+0x98>)
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008efa:	f7ff fec8 	bl	8008c8e <__multadd>
 8008efe:	4607      	mov	r7, r0
 8008f00:	10ad      	asrs	r5, r5, #2
 8008f02:	d035      	beq.n	8008f70 <__pow5mult+0x90>
 8008f04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008f06:	b93c      	cbnz	r4, 8008f18 <__pow5mult+0x38>
 8008f08:	2010      	movs	r0, #16
 8008f0a:	f7ff fe6d 	bl	8008be8 <malloc>
 8008f0e:	6270      	str	r0, [r6, #36]	; 0x24
 8008f10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f14:	6004      	str	r4, [r0, #0]
 8008f16:	60c4      	str	r4, [r0, #12]
 8008f18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008f1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f20:	b94c      	cbnz	r4, 8008f36 <__pow5mult+0x56>
 8008f22:	f240 2171 	movw	r1, #625	; 0x271
 8008f26:	4630      	mov	r0, r6
 8008f28:	f7ff ff3a 	bl	8008da0 <__i2b>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f32:	4604      	mov	r4, r0
 8008f34:	6003      	str	r3, [r0, #0]
 8008f36:	f04f 0800 	mov.w	r8, #0
 8008f3a:	07eb      	lsls	r3, r5, #31
 8008f3c:	d50a      	bpl.n	8008f54 <__pow5mult+0x74>
 8008f3e:	4639      	mov	r1, r7
 8008f40:	4622      	mov	r2, r4
 8008f42:	4630      	mov	r0, r6
 8008f44:	f7ff ff35 	bl	8008db2 <__multiply>
 8008f48:	4639      	mov	r1, r7
 8008f4a:	4681      	mov	r9, r0
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f7ff fe87 	bl	8008c60 <_Bfree>
 8008f52:	464f      	mov	r7, r9
 8008f54:	106d      	asrs	r5, r5, #1
 8008f56:	d00b      	beq.n	8008f70 <__pow5mult+0x90>
 8008f58:	6820      	ldr	r0, [r4, #0]
 8008f5a:	b938      	cbnz	r0, 8008f6c <__pow5mult+0x8c>
 8008f5c:	4622      	mov	r2, r4
 8008f5e:	4621      	mov	r1, r4
 8008f60:	4630      	mov	r0, r6
 8008f62:	f7ff ff26 	bl	8008db2 <__multiply>
 8008f66:	6020      	str	r0, [r4, #0]
 8008f68:	f8c0 8000 	str.w	r8, [r0]
 8008f6c:	4604      	mov	r4, r0
 8008f6e:	e7e4      	b.n	8008f3a <__pow5mult+0x5a>
 8008f70:	4638      	mov	r0, r7
 8008f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f76:	bf00      	nop
 8008f78:	0800b6f8 	.word	0x0800b6f8

08008f7c <__lshift>:
 8008f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f80:	460c      	mov	r4, r1
 8008f82:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f86:	6923      	ldr	r3, [r4, #16]
 8008f88:	6849      	ldr	r1, [r1, #4]
 8008f8a:	eb0a 0903 	add.w	r9, sl, r3
 8008f8e:	68a3      	ldr	r3, [r4, #8]
 8008f90:	4607      	mov	r7, r0
 8008f92:	4616      	mov	r6, r2
 8008f94:	f109 0501 	add.w	r5, r9, #1
 8008f98:	42ab      	cmp	r3, r5
 8008f9a:	db32      	blt.n	8009002 <__lshift+0x86>
 8008f9c:	4638      	mov	r0, r7
 8008f9e:	f7ff fe2b 	bl	8008bf8 <_Balloc>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	4680      	mov	r8, r0
 8008fa6:	f100 0114 	add.w	r1, r0, #20
 8008faa:	461a      	mov	r2, r3
 8008fac:	4553      	cmp	r3, sl
 8008fae:	db2b      	blt.n	8009008 <__lshift+0x8c>
 8008fb0:	6920      	ldr	r0, [r4, #16]
 8008fb2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008fb6:	f104 0314 	add.w	r3, r4, #20
 8008fba:	f016 021f 	ands.w	r2, r6, #31
 8008fbe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008fc2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008fc6:	d025      	beq.n	8009014 <__lshift+0x98>
 8008fc8:	f1c2 0e20 	rsb	lr, r2, #32
 8008fcc:	2000      	movs	r0, #0
 8008fce:	681e      	ldr	r6, [r3, #0]
 8008fd0:	468a      	mov	sl, r1
 8008fd2:	4096      	lsls	r6, r2
 8008fd4:	4330      	orrs	r0, r6
 8008fd6:	f84a 0b04 	str.w	r0, [sl], #4
 8008fda:	f853 0b04 	ldr.w	r0, [r3], #4
 8008fde:	459c      	cmp	ip, r3
 8008fe0:	fa20 f00e 	lsr.w	r0, r0, lr
 8008fe4:	d814      	bhi.n	8009010 <__lshift+0x94>
 8008fe6:	6048      	str	r0, [r1, #4]
 8008fe8:	b108      	cbz	r0, 8008fee <__lshift+0x72>
 8008fea:	f109 0502 	add.w	r5, r9, #2
 8008fee:	3d01      	subs	r5, #1
 8008ff0:	4638      	mov	r0, r7
 8008ff2:	f8c8 5010 	str.w	r5, [r8, #16]
 8008ff6:	4621      	mov	r1, r4
 8008ff8:	f7ff fe32 	bl	8008c60 <_Bfree>
 8008ffc:	4640      	mov	r0, r8
 8008ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009002:	3101      	adds	r1, #1
 8009004:	005b      	lsls	r3, r3, #1
 8009006:	e7c7      	b.n	8008f98 <__lshift+0x1c>
 8009008:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800900c:	3301      	adds	r3, #1
 800900e:	e7cd      	b.n	8008fac <__lshift+0x30>
 8009010:	4651      	mov	r1, sl
 8009012:	e7dc      	b.n	8008fce <__lshift+0x52>
 8009014:	3904      	subs	r1, #4
 8009016:	f853 2b04 	ldr.w	r2, [r3], #4
 800901a:	f841 2f04 	str.w	r2, [r1, #4]!
 800901e:	459c      	cmp	ip, r3
 8009020:	d8f9      	bhi.n	8009016 <__lshift+0x9a>
 8009022:	e7e4      	b.n	8008fee <__lshift+0x72>

08009024 <__mcmp>:
 8009024:	6903      	ldr	r3, [r0, #16]
 8009026:	690a      	ldr	r2, [r1, #16]
 8009028:	1a9b      	subs	r3, r3, r2
 800902a:	b530      	push	{r4, r5, lr}
 800902c:	d10c      	bne.n	8009048 <__mcmp+0x24>
 800902e:	0092      	lsls	r2, r2, #2
 8009030:	3014      	adds	r0, #20
 8009032:	3114      	adds	r1, #20
 8009034:	1884      	adds	r4, r0, r2
 8009036:	4411      	add	r1, r2
 8009038:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800903c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009040:	4295      	cmp	r5, r2
 8009042:	d003      	beq.n	800904c <__mcmp+0x28>
 8009044:	d305      	bcc.n	8009052 <__mcmp+0x2e>
 8009046:	2301      	movs	r3, #1
 8009048:	4618      	mov	r0, r3
 800904a:	bd30      	pop	{r4, r5, pc}
 800904c:	42a0      	cmp	r0, r4
 800904e:	d3f3      	bcc.n	8009038 <__mcmp+0x14>
 8009050:	e7fa      	b.n	8009048 <__mcmp+0x24>
 8009052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009056:	e7f7      	b.n	8009048 <__mcmp+0x24>

08009058 <__mdiff>:
 8009058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800905c:	460d      	mov	r5, r1
 800905e:	4607      	mov	r7, r0
 8009060:	4611      	mov	r1, r2
 8009062:	4628      	mov	r0, r5
 8009064:	4614      	mov	r4, r2
 8009066:	f7ff ffdd 	bl	8009024 <__mcmp>
 800906a:	1e06      	subs	r6, r0, #0
 800906c:	d108      	bne.n	8009080 <__mdiff+0x28>
 800906e:	4631      	mov	r1, r6
 8009070:	4638      	mov	r0, r7
 8009072:	f7ff fdc1 	bl	8008bf8 <_Balloc>
 8009076:	2301      	movs	r3, #1
 8009078:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800907c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009080:	bfa4      	itt	ge
 8009082:	4623      	movge	r3, r4
 8009084:	462c      	movge	r4, r5
 8009086:	4638      	mov	r0, r7
 8009088:	6861      	ldr	r1, [r4, #4]
 800908a:	bfa6      	itte	ge
 800908c:	461d      	movge	r5, r3
 800908e:	2600      	movge	r6, #0
 8009090:	2601      	movlt	r6, #1
 8009092:	f7ff fdb1 	bl	8008bf8 <_Balloc>
 8009096:	692b      	ldr	r3, [r5, #16]
 8009098:	60c6      	str	r6, [r0, #12]
 800909a:	6926      	ldr	r6, [r4, #16]
 800909c:	f105 0914 	add.w	r9, r5, #20
 80090a0:	f104 0214 	add.w	r2, r4, #20
 80090a4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80090a8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80090ac:	f100 0514 	add.w	r5, r0, #20
 80090b0:	f04f 0e00 	mov.w	lr, #0
 80090b4:	f852 ab04 	ldr.w	sl, [r2], #4
 80090b8:	f859 4b04 	ldr.w	r4, [r9], #4
 80090bc:	fa1e f18a 	uxtah	r1, lr, sl
 80090c0:	b2a3      	uxth	r3, r4
 80090c2:	1ac9      	subs	r1, r1, r3
 80090c4:	0c23      	lsrs	r3, r4, #16
 80090c6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80090ca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80090ce:	b289      	uxth	r1, r1
 80090d0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80090d4:	45c8      	cmp	r8, r9
 80090d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80090da:	4694      	mov	ip, r2
 80090dc:	f845 3b04 	str.w	r3, [r5], #4
 80090e0:	d8e8      	bhi.n	80090b4 <__mdiff+0x5c>
 80090e2:	45bc      	cmp	ip, r7
 80090e4:	d304      	bcc.n	80090f0 <__mdiff+0x98>
 80090e6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80090ea:	b183      	cbz	r3, 800910e <__mdiff+0xb6>
 80090ec:	6106      	str	r6, [r0, #16]
 80090ee:	e7c5      	b.n	800907c <__mdiff+0x24>
 80090f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80090f4:	fa1e f381 	uxtah	r3, lr, r1
 80090f8:	141a      	asrs	r2, r3, #16
 80090fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80090fe:	b29b      	uxth	r3, r3
 8009100:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009104:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009108:	f845 3b04 	str.w	r3, [r5], #4
 800910c:	e7e9      	b.n	80090e2 <__mdiff+0x8a>
 800910e:	3e01      	subs	r6, #1
 8009110:	e7e9      	b.n	80090e6 <__mdiff+0x8e>

08009112 <__d2b>:
 8009112:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009116:	460e      	mov	r6, r1
 8009118:	2101      	movs	r1, #1
 800911a:	ec59 8b10 	vmov	r8, r9, d0
 800911e:	4615      	mov	r5, r2
 8009120:	f7ff fd6a 	bl	8008bf8 <_Balloc>
 8009124:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009128:	4607      	mov	r7, r0
 800912a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800912e:	bb34      	cbnz	r4, 800917e <__d2b+0x6c>
 8009130:	9301      	str	r3, [sp, #4]
 8009132:	f1b8 0300 	subs.w	r3, r8, #0
 8009136:	d027      	beq.n	8009188 <__d2b+0x76>
 8009138:	a802      	add	r0, sp, #8
 800913a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800913e:	f7ff fe00 	bl	8008d42 <__lo0bits>
 8009142:	9900      	ldr	r1, [sp, #0]
 8009144:	b1f0      	cbz	r0, 8009184 <__d2b+0x72>
 8009146:	9a01      	ldr	r2, [sp, #4]
 8009148:	f1c0 0320 	rsb	r3, r0, #32
 800914c:	fa02 f303 	lsl.w	r3, r2, r3
 8009150:	430b      	orrs	r3, r1
 8009152:	40c2      	lsrs	r2, r0
 8009154:	617b      	str	r3, [r7, #20]
 8009156:	9201      	str	r2, [sp, #4]
 8009158:	9b01      	ldr	r3, [sp, #4]
 800915a:	61bb      	str	r3, [r7, #24]
 800915c:	2b00      	cmp	r3, #0
 800915e:	bf14      	ite	ne
 8009160:	2102      	movne	r1, #2
 8009162:	2101      	moveq	r1, #1
 8009164:	6139      	str	r1, [r7, #16]
 8009166:	b1c4      	cbz	r4, 800919a <__d2b+0x88>
 8009168:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800916c:	4404      	add	r4, r0
 800916e:	6034      	str	r4, [r6, #0]
 8009170:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009174:	6028      	str	r0, [r5, #0]
 8009176:	4638      	mov	r0, r7
 8009178:	b003      	add	sp, #12
 800917a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800917e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009182:	e7d5      	b.n	8009130 <__d2b+0x1e>
 8009184:	6179      	str	r1, [r7, #20]
 8009186:	e7e7      	b.n	8009158 <__d2b+0x46>
 8009188:	a801      	add	r0, sp, #4
 800918a:	f7ff fdda 	bl	8008d42 <__lo0bits>
 800918e:	9b01      	ldr	r3, [sp, #4]
 8009190:	617b      	str	r3, [r7, #20]
 8009192:	2101      	movs	r1, #1
 8009194:	6139      	str	r1, [r7, #16]
 8009196:	3020      	adds	r0, #32
 8009198:	e7e5      	b.n	8009166 <__d2b+0x54>
 800919a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800919e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80091a2:	6030      	str	r0, [r6, #0]
 80091a4:	6918      	ldr	r0, [r3, #16]
 80091a6:	f7ff fdad 	bl	8008d04 <__hi0bits>
 80091aa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80091ae:	e7e1      	b.n	8009174 <__d2b+0x62>

080091b0 <_calloc_r>:
 80091b0:	b538      	push	{r3, r4, r5, lr}
 80091b2:	fb02 f401 	mul.w	r4, r2, r1
 80091b6:	4621      	mov	r1, r4
 80091b8:	f000 f856 	bl	8009268 <_malloc_r>
 80091bc:	4605      	mov	r5, r0
 80091be:	b118      	cbz	r0, 80091c8 <_calloc_r+0x18>
 80091c0:	4622      	mov	r2, r4
 80091c2:	2100      	movs	r1, #0
 80091c4:	f7fd ff3d 	bl	8007042 <memset>
 80091c8:	4628      	mov	r0, r5
 80091ca:	bd38      	pop	{r3, r4, r5, pc}

080091cc <_free_r>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	4605      	mov	r5, r0
 80091d0:	2900      	cmp	r1, #0
 80091d2:	d045      	beq.n	8009260 <_free_r+0x94>
 80091d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091d8:	1f0c      	subs	r4, r1, #4
 80091da:	2b00      	cmp	r3, #0
 80091dc:	bfb8      	it	lt
 80091de:	18e4      	addlt	r4, r4, r3
 80091e0:	f000 fa98 	bl	8009714 <__malloc_lock>
 80091e4:	4a1f      	ldr	r2, [pc, #124]	; (8009264 <_free_r+0x98>)
 80091e6:	6813      	ldr	r3, [r2, #0]
 80091e8:	4610      	mov	r0, r2
 80091ea:	b933      	cbnz	r3, 80091fa <_free_r+0x2e>
 80091ec:	6063      	str	r3, [r4, #4]
 80091ee:	6014      	str	r4, [r2, #0]
 80091f0:	4628      	mov	r0, r5
 80091f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091f6:	f000 ba8e 	b.w	8009716 <__malloc_unlock>
 80091fa:	42a3      	cmp	r3, r4
 80091fc:	d90c      	bls.n	8009218 <_free_r+0x4c>
 80091fe:	6821      	ldr	r1, [r4, #0]
 8009200:	1862      	adds	r2, r4, r1
 8009202:	4293      	cmp	r3, r2
 8009204:	bf04      	itt	eq
 8009206:	681a      	ldreq	r2, [r3, #0]
 8009208:	685b      	ldreq	r3, [r3, #4]
 800920a:	6063      	str	r3, [r4, #4]
 800920c:	bf04      	itt	eq
 800920e:	1852      	addeq	r2, r2, r1
 8009210:	6022      	streq	r2, [r4, #0]
 8009212:	6004      	str	r4, [r0, #0]
 8009214:	e7ec      	b.n	80091f0 <_free_r+0x24>
 8009216:	4613      	mov	r3, r2
 8009218:	685a      	ldr	r2, [r3, #4]
 800921a:	b10a      	cbz	r2, 8009220 <_free_r+0x54>
 800921c:	42a2      	cmp	r2, r4
 800921e:	d9fa      	bls.n	8009216 <_free_r+0x4a>
 8009220:	6819      	ldr	r1, [r3, #0]
 8009222:	1858      	adds	r0, r3, r1
 8009224:	42a0      	cmp	r0, r4
 8009226:	d10b      	bne.n	8009240 <_free_r+0x74>
 8009228:	6820      	ldr	r0, [r4, #0]
 800922a:	4401      	add	r1, r0
 800922c:	1858      	adds	r0, r3, r1
 800922e:	4282      	cmp	r2, r0
 8009230:	6019      	str	r1, [r3, #0]
 8009232:	d1dd      	bne.n	80091f0 <_free_r+0x24>
 8009234:	6810      	ldr	r0, [r2, #0]
 8009236:	6852      	ldr	r2, [r2, #4]
 8009238:	605a      	str	r2, [r3, #4]
 800923a:	4401      	add	r1, r0
 800923c:	6019      	str	r1, [r3, #0]
 800923e:	e7d7      	b.n	80091f0 <_free_r+0x24>
 8009240:	d902      	bls.n	8009248 <_free_r+0x7c>
 8009242:	230c      	movs	r3, #12
 8009244:	602b      	str	r3, [r5, #0]
 8009246:	e7d3      	b.n	80091f0 <_free_r+0x24>
 8009248:	6820      	ldr	r0, [r4, #0]
 800924a:	1821      	adds	r1, r4, r0
 800924c:	428a      	cmp	r2, r1
 800924e:	bf04      	itt	eq
 8009250:	6811      	ldreq	r1, [r2, #0]
 8009252:	6852      	ldreq	r2, [r2, #4]
 8009254:	6062      	str	r2, [r4, #4]
 8009256:	bf04      	itt	eq
 8009258:	1809      	addeq	r1, r1, r0
 800925a:	6021      	streq	r1, [r4, #0]
 800925c:	605c      	str	r4, [r3, #4]
 800925e:	e7c7      	b.n	80091f0 <_free_r+0x24>
 8009260:	bd38      	pop	{r3, r4, r5, pc}
 8009262:	bf00      	nop
 8009264:	200002f0 	.word	0x200002f0

08009268 <_malloc_r>:
 8009268:	b570      	push	{r4, r5, r6, lr}
 800926a:	1ccd      	adds	r5, r1, #3
 800926c:	f025 0503 	bic.w	r5, r5, #3
 8009270:	3508      	adds	r5, #8
 8009272:	2d0c      	cmp	r5, #12
 8009274:	bf38      	it	cc
 8009276:	250c      	movcc	r5, #12
 8009278:	2d00      	cmp	r5, #0
 800927a:	4606      	mov	r6, r0
 800927c:	db01      	blt.n	8009282 <_malloc_r+0x1a>
 800927e:	42a9      	cmp	r1, r5
 8009280:	d903      	bls.n	800928a <_malloc_r+0x22>
 8009282:	230c      	movs	r3, #12
 8009284:	6033      	str	r3, [r6, #0]
 8009286:	2000      	movs	r0, #0
 8009288:	bd70      	pop	{r4, r5, r6, pc}
 800928a:	f000 fa43 	bl	8009714 <__malloc_lock>
 800928e:	4a21      	ldr	r2, [pc, #132]	; (8009314 <_malloc_r+0xac>)
 8009290:	6814      	ldr	r4, [r2, #0]
 8009292:	4621      	mov	r1, r4
 8009294:	b991      	cbnz	r1, 80092bc <_malloc_r+0x54>
 8009296:	4c20      	ldr	r4, [pc, #128]	; (8009318 <_malloc_r+0xb0>)
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	b91b      	cbnz	r3, 80092a4 <_malloc_r+0x3c>
 800929c:	4630      	mov	r0, r6
 800929e:	f000 f97d 	bl	800959c <_sbrk_r>
 80092a2:	6020      	str	r0, [r4, #0]
 80092a4:	4629      	mov	r1, r5
 80092a6:	4630      	mov	r0, r6
 80092a8:	f000 f978 	bl	800959c <_sbrk_r>
 80092ac:	1c43      	adds	r3, r0, #1
 80092ae:	d124      	bne.n	80092fa <_malloc_r+0x92>
 80092b0:	230c      	movs	r3, #12
 80092b2:	6033      	str	r3, [r6, #0]
 80092b4:	4630      	mov	r0, r6
 80092b6:	f000 fa2e 	bl	8009716 <__malloc_unlock>
 80092ba:	e7e4      	b.n	8009286 <_malloc_r+0x1e>
 80092bc:	680b      	ldr	r3, [r1, #0]
 80092be:	1b5b      	subs	r3, r3, r5
 80092c0:	d418      	bmi.n	80092f4 <_malloc_r+0x8c>
 80092c2:	2b0b      	cmp	r3, #11
 80092c4:	d90f      	bls.n	80092e6 <_malloc_r+0x7e>
 80092c6:	600b      	str	r3, [r1, #0]
 80092c8:	50cd      	str	r5, [r1, r3]
 80092ca:	18cc      	adds	r4, r1, r3
 80092cc:	4630      	mov	r0, r6
 80092ce:	f000 fa22 	bl	8009716 <__malloc_unlock>
 80092d2:	f104 000b 	add.w	r0, r4, #11
 80092d6:	1d23      	adds	r3, r4, #4
 80092d8:	f020 0007 	bic.w	r0, r0, #7
 80092dc:	1ac3      	subs	r3, r0, r3
 80092de:	d0d3      	beq.n	8009288 <_malloc_r+0x20>
 80092e0:	425a      	negs	r2, r3
 80092e2:	50e2      	str	r2, [r4, r3]
 80092e4:	e7d0      	b.n	8009288 <_malloc_r+0x20>
 80092e6:	428c      	cmp	r4, r1
 80092e8:	684b      	ldr	r3, [r1, #4]
 80092ea:	bf16      	itet	ne
 80092ec:	6063      	strne	r3, [r4, #4]
 80092ee:	6013      	streq	r3, [r2, #0]
 80092f0:	460c      	movne	r4, r1
 80092f2:	e7eb      	b.n	80092cc <_malloc_r+0x64>
 80092f4:	460c      	mov	r4, r1
 80092f6:	6849      	ldr	r1, [r1, #4]
 80092f8:	e7cc      	b.n	8009294 <_malloc_r+0x2c>
 80092fa:	1cc4      	adds	r4, r0, #3
 80092fc:	f024 0403 	bic.w	r4, r4, #3
 8009300:	42a0      	cmp	r0, r4
 8009302:	d005      	beq.n	8009310 <_malloc_r+0xa8>
 8009304:	1a21      	subs	r1, r4, r0
 8009306:	4630      	mov	r0, r6
 8009308:	f000 f948 	bl	800959c <_sbrk_r>
 800930c:	3001      	adds	r0, #1
 800930e:	d0cf      	beq.n	80092b0 <_malloc_r+0x48>
 8009310:	6025      	str	r5, [r4, #0]
 8009312:	e7db      	b.n	80092cc <_malloc_r+0x64>
 8009314:	200002f0 	.word	0x200002f0
 8009318:	200002f4 	.word	0x200002f4

0800931c <__sfputc_r>:
 800931c:	6893      	ldr	r3, [r2, #8]
 800931e:	3b01      	subs	r3, #1
 8009320:	2b00      	cmp	r3, #0
 8009322:	b410      	push	{r4}
 8009324:	6093      	str	r3, [r2, #8]
 8009326:	da08      	bge.n	800933a <__sfputc_r+0x1e>
 8009328:	6994      	ldr	r4, [r2, #24]
 800932a:	42a3      	cmp	r3, r4
 800932c:	db01      	blt.n	8009332 <__sfputc_r+0x16>
 800932e:	290a      	cmp	r1, #10
 8009330:	d103      	bne.n	800933a <__sfputc_r+0x1e>
 8009332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009336:	f7fe bb65 	b.w	8007a04 <__swbuf_r>
 800933a:	6813      	ldr	r3, [r2, #0]
 800933c:	1c58      	adds	r0, r3, #1
 800933e:	6010      	str	r0, [r2, #0]
 8009340:	7019      	strb	r1, [r3, #0]
 8009342:	4608      	mov	r0, r1
 8009344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009348:	4770      	bx	lr

0800934a <__sfputs_r>:
 800934a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934c:	4606      	mov	r6, r0
 800934e:	460f      	mov	r7, r1
 8009350:	4614      	mov	r4, r2
 8009352:	18d5      	adds	r5, r2, r3
 8009354:	42ac      	cmp	r4, r5
 8009356:	d101      	bne.n	800935c <__sfputs_r+0x12>
 8009358:	2000      	movs	r0, #0
 800935a:	e007      	b.n	800936c <__sfputs_r+0x22>
 800935c:	463a      	mov	r2, r7
 800935e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009362:	4630      	mov	r0, r6
 8009364:	f7ff ffda 	bl	800931c <__sfputc_r>
 8009368:	1c43      	adds	r3, r0, #1
 800936a:	d1f3      	bne.n	8009354 <__sfputs_r+0xa>
 800936c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009370 <_vfiprintf_r>:
 8009370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009374:	460c      	mov	r4, r1
 8009376:	b09d      	sub	sp, #116	; 0x74
 8009378:	4617      	mov	r7, r2
 800937a:	461d      	mov	r5, r3
 800937c:	4606      	mov	r6, r0
 800937e:	b118      	cbz	r0, 8009388 <_vfiprintf_r+0x18>
 8009380:	6983      	ldr	r3, [r0, #24]
 8009382:	b90b      	cbnz	r3, 8009388 <_vfiprintf_r+0x18>
 8009384:	f7ff fb34 	bl	80089f0 <__sinit>
 8009388:	4b7c      	ldr	r3, [pc, #496]	; (800957c <_vfiprintf_r+0x20c>)
 800938a:	429c      	cmp	r4, r3
 800938c:	d158      	bne.n	8009440 <_vfiprintf_r+0xd0>
 800938e:	6874      	ldr	r4, [r6, #4]
 8009390:	89a3      	ldrh	r3, [r4, #12]
 8009392:	0718      	lsls	r0, r3, #28
 8009394:	d55e      	bpl.n	8009454 <_vfiprintf_r+0xe4>
 8009396:	6923      	ldr	r3, [r4, #16]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d05b      	beq.n	8009454 <_vfiprintf_r+0xe4>
 800939c:	2300      	movs	r3, #0
 800939e:	9309      	str	r3, [sp, #36]	; 0x24
 80093a0:	2320      	movs	r3, #32
 80093a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093a6:	2330      	movs	r3, #48	; 0x30
 80093a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093ac:	9503      	str	r5, [sp, #12]
 80093ae:	f04f 0b01 	mov.w	fp, #1
 80093b2:	46b8      	mov	r8, r7
 80093b4:	4645      	mov	r5, r8
 80093b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80093ba:	b10b      	cbz	r3, 80093c0 <_vfiprintf_r+0x50>
 80093bc:	2b25      	cmp	r3, #37	; 0x25
 80093be:	d154      	bne.n	800946a <_vfiprintf_r+0xfa>
 80093c0:	ebb8 0a07 	subs.w	sl, r8, r7
 80093c4:	d00b      	beq.n	80093de <_vfiprintf_r+0x6e>
 80093c6:	4653      	mov	r3, sl
 80093c8:	463a      	mov	r2, r7
 80093ca:	4621      	mov	r1, r4
 80093cc:	4630      	mov	r0, r6
 80093ce:	f7ff ffbc 	bl	800934a <__sfputs_r>
 80093d2:	3001      	adds	r0, #1
 80093d4:	f000 80c2 	beq.w	800955c <_vfiprintf_r+0x1ec>
 80093d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093da:	4453      	add	r3, sl
 80093dc:	9309      	str	r3, [sp, #36]	; 0x24
 80093de:	f898 3000 	ldrb.w	r3, [r8]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 80ba 	beq.w	800955c <_vfiprintf_r+0x1ec>
 80093e8:	2300      	movs	r3, #0
 80093ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093f2:	9304      	str	r3, [sp, #16]
 80093f4:	9307      	str	r3, [sp, #28]
 80093f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093fa:	931a      	str	r3, [sp, #104]	; 0x68
 80093fc:	46a8      	mov	r8, r5
 80093fe:	2205      	movs	r2, #5
 8009400:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009404:	485e      	ldr	r0, [pc, #376]	; (8009580 <_vfiprintf_r+0x210>)
 8009406:	f7f7 fc93 	bl	8000d30 <memchr>
 800940a:	9b04      	ldr	r3, [sp, #16]
 800940c:	bb78      	cbnz	r0, 800946e <_vfiprintf_r+0xfe>
 800940e:	06d9      	lsls	r1, r3, #27
 8009410:	bf44      	itt	mi
 8009412:	2220      	movmi	r2, #32
 8009414:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009418:	071a      	lsls	r2, r3, #28
 800941a:	bf44      	itt	mi
 800941c:	222b      	movmi	r2, #43	; 0x2b
 800941e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009422:	782a      	ldrb	r2, [r5, #0]
 8009424:	2a2a      	cmp	r2, #42	; 0x2a
 8009426:	d02a      	beq.n	800947e <_vfiprintf_r+0x10e>
 8009428:	9a07      	ldr	r2, [sp, #28]
 800942a:	46a8      	mov	r8, r5
 800942c:	2000      	movs	r0, #0
 800942e:	250a      	movs	r5, #10
 8009430:	4641      	mov	r1, r8
 8009432:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009436:	3b30      	subs	r3, #48	; 0x30
 8009438:	2b09      	cmp	r3, #9
 800943a:	d969      	bls.n	8009510 <_vfiprintf_r+0x1a0>
 800943c:	b360      	cbz	r0, 8009498 <_vfiprintf_r+0x128>
 800943e:	e024      	b.n	800948a <_vfiprintf_r+0x11a>
 8009440:	4b50      	ldr	r3, [pc, #320]	; (8009584 <_vfiprintf_r+0x214>)
 8009442:	429c      	cmp	r4, r3
 8009444:	d101      	bne.n	800944a <_vfiprintf_r+0xda>
 8009446:	68b4      	ldr	r4, [r6, #8]
 8009448:	e7a2      	b.n	8009390 <_vfiprintf_r+0x20>
 800944a:	4b4f      	ldr	r3, [pc, #316]	; (8009588 <_vfiprintf_r+0x218>)
 800944c:	429c      	cmp	r4, r3
 800944e:	bf08      	it	eq
 8009450:	68f4      	ldreq	r4, [r6, #12]
 8009452:	e79d      	b.n	8009390 <_vfiprintf_r+0x20>
 8009454:	4621      	mov	r1, r4
 8009456:	4630      	mov	r0, r6
 8009458:	f7fe fb26 	bl	8007aa8 <__swsetup_r>
 800945c:	2800      	cmp	r0, #0
 800945e:	d09d      	beq.n	800939c <_vfiprintf_r+0x2c>
 8009460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009464:	b01d      	add	sp, #116	; 0x74
 8009466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800946a:	46a8      	mov	r8, r5
 800946c:	e7a2      	b.n	80093b4 <_vfiprintf_r+0x44>
 800946e:	4a44      	ldr	r2, [pc, #272]	; (8009580 <_vfiprintf_r+0x210>)
 8009470:	1a80      	subs	r0, r0, r2
 8009472:	fa0b f000 	lsl.w	r0, fp, r0
 8009476:	4318      	orrs	r0, r3
 8009478:	9004      	str	r0, [sp, #16]
 800947a:	4645      	mov	r5, r8
 800947c:	e7be      	b.n	80093fc <_vfiprintf_r+0x8c>
 800947e:	9a03      	ldr	r2, [sp, #12]
 8009480:	1d11      	adds	r1, r2, #4
 8009482:	6812      	ldr	r2, [r2, #0]
 8009484:	9103      	str	r1, [sp, #12]
 8009486:	2a00      	cmp	r2, #0
 8009488:	db01      	blt.n	800948e <_vfiprintf_r+0x11e>
 800948a:	9207      	str	r2, [sp, #28]
 800948c:	e004      	b.n	8009498 <_vfiprintf_r+0x128>
 800948e:	4252      	negs	r2, r2
 8009490:	f043 0302 	orr.w	r3, r3, #2
 8009494:	9207      	str	r2, [sp, #28]
 8009496:	9304      	str	r3, [sp, #16]
 8009498:	f898 3000 	ldrb.w	r3, [r8]
 800949c:	2b2e      	cmp	r3, #46	; 0x2e
 800949e:	d10e      	bne.n	80094be <_vfiprintf_r+0x14e>
 80094a0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80094a4:	2b2a      	cmp	r3, #42	; 0x2a
 80094a6:	d138      	bne.n	800951a <_vfiprintf_r+0x1aa>
 80094a8:	9b03      	ldr	r3, [sp, #12]
 80094aa:	1d1a      	adds	r2, r3, #4
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	9203      	str	r2, [sp, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	bfb8      	it	lt
 80094b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80094b8:	f108 0802 	add.w	r8, r8, #2
 80094bc:	9305      	str	r3, [sp, #20]
 80094be:	4d33      	ldr	r5, [pc, #204]	; (800958c <_vfiprintf_r+0x21c>)
 80094c0:	f898 1000 	ldrb.w	r1, [r8]
 80094c4:	2203      	movs	r2, #3
 80094c6:	4628      	mov	r0, r5
 80094c8:	f7f7 fc32 	bl	8000d30 <memchr>
 80094cc:	b140      	cbz	r0, 80094e0 <_vfiprintf_r+0x170>
 80094ce:	2340      	movs	r3, #64	; 0x40
 80094d0:	1b40      	subs	r0, r0, r5
 80094d2:	fa03 f000 	lsl.w	r0, r3, r0
 80094d6:	9b04      	ldr	r3, [sp, #16]
 80094d8:	4303      	orrs	r3, r0
 80094da:	f108 0801 	add.w	r8, r8, #1
 80094de:	9304      	str	r3, [sp, #16]
 80094e0:	f898 1000 	ldrb.w	r1, [r8]
 80094e4:	482a      	ldr	r0, [pc, #168]	; (8009590 <_vfiprintf_r+0x220>)
 80094e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094ea:	2206      	movs	r2, #6
 80094ec:	f108 0701 	add.w	r7, r8, #1
 80094f0:	f7f7 fc1e 	bl	8000d30 <memchr>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	d037      	beq.n	8009568 <_vfiprintf_r+0x1f8>
 80094f8:	4b26      	ldr	r3, [pc, #152]	; (8009594 <_vfiprintf_r+0x224>)
 80094fa:	bb1b      	cbnz	r3, 8009544 <_vfiprintf_r+0x1d4>
 80094fc:	9b03      	ldr	r3, [sp, #12]
 80094fe:	3307      	adds	r3, #7
 8009500:	f023 0307 	bic.w	r3, r3, #7
 8009504:	3308      	adds	r3, #8
 8009506:	9303      	str	r3, [sp, #12]
 8009508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800950a:	444b      	add	r3, r9
 800950c:	9309      	str	r3, [sp, #36]	; 0x24
 800950e:	e750      	b.n	80093b2 <_vfiprintf_r+0x42>
 8009510:	fb05 3202 	mla	r2, r5, r2, r3
 8009514:	2001      	movs	r0, #1
 8009516:	4688      	mov	r8, r1
 8009518:	e78a      	b.n	8009430 <_vfiprintf_r+0xc0>
 800951a:	2300      	movs	r3, #0
 800951c:	f108 0801 	add.w	r8, r8, #1
 8009520:	9305      	str	r3, [sp, #20]
 8009522:	4619      	mov	r1, r3
 8009524:	250a      	movs	r5, #10
 8009526:	4640      	mov	r0, r8
 8009528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800952c:	3a30      	subs	r2, #48	; 0x30
 800952e:	2a09      	cmp	r2, #9
 8009530:	d903      	bls.n	800953a <_vfiprintf_r+0x1ca>
 8009532:	2b00      	cmp	r3, #0
 8009534:	d0c3      	beq.n	80094be <_vfiprintf_r+0x14e>
 8009536:	9105      	str	r1, [sp, #20]
 8009538:	e7c1      	b.n	80094be <_vfiprintf_r+0x14e>
 800953a:	fb05 2101 	mla	r1, r5, r1, r2
 800953e:	2301      	movs	r3, #1
 8009540:	4680      	mov	r8, r0
 8009542:	e7f0      	b.n	8009526 <_vfiprintf_r+0x1b6>
 8009544:	ab03      	add	r3, sp, #12
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	4622      	mov	r2, r4
 800954a:	4b13      	ldr	r3, [pc, #76]	; (8009598 <_vfiprintf_r+0x228>)
 800954c:	a904      	add	r1, sp, #16
 800954e:	4630      	mov	r0, r6
 8009550:	f7fd fe14 	bl	800717c <_printf_float>
 8009554:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009558:	4681      	mov	r9, r0
 800955a:	d1d5      	bne.n	8009508 <_vfiprintf_r+0x198>
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	065b      	lsls	r3, r3, #25
 8009560:	f53f af7e 	bmi.w	8009460 <_vfiprintf_r+0xf0>
 8009564:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009566:	e77d      	b.n	8009464 <_vfiprintf_r+0xf4>
 8009568:	ab03      	add	r3, sp, #12
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	4622      	mov	r2, r4
 800956e:	4b0a      	ldr	r3, [pc, #40]	; (8009598 <_vfiprintf_r+0x228>)
 8009570:	a904      	add	r1, sp, #16
 8009572:	4630      	mov	r0, r6
 8009574:	f7fe f8b8 	bl	80076e8 <_printf_i>
 8009578:	e7ec      	b.n	8009554 <_vfiprintf_r+0x1e4>
 800957a:	bf00      	nop
 800957c:	0800b5c8 	.word	0x0800b5c8
 8009580:	0800b704 	.word	0x0800b704
 8009584:	0800b5e8 	.word	0x0800b5e8
 8009588:	0800b5a8 	.word	0x0800b5a8
 800958c:	0800b70a 	.word	0x0800b70a
 8009590:	0800b70e 	.word	0x0800b70e
 8009594:	0800717d 	.word	0x0800717d
 8009598:	0800934b 	.word	0x0800934b

0800959c <_sbrk_r>:
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	4c06      	ldr	r4, [pc, #24]	; (80095b8 <_sbrk_r+0x1c>)
 80095a0:	2300      	movs	r3, #0
 80095a2:	4605      	mov	r5, r0
 80095a4:	4608      	mov	r0, r1
 80095a6:	6023      	str	r3, [r4, #0]
 80095a8:	f7fd fca8 	bl	8006efc <_sbrk>
 80095ac:	1c43      	adds	r3, r0, #1
 80095ae:	d102      	bne.n	80095b6 <_sbrk_r+0x1a>
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	b103      	cbz	r3, 80095b6 <_sbrk_r+0x1a>
 80095b4:	602b      	str	r3, [r5, #0]
 80095b6:	bd38      	pop	{r3, r4, r5, pc}
 80095b8:	200008d8 	.word	0x200008d8

080095bc <__sread>:
 80095bc:	b510      	push	{r4, lr}
 80095be:	460c      	mov	r4, r1
 80095c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095c4:	f000 f8a8 	bl	8009718 <_read_r>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	bfab      	itete	ge
 80095cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095ce:	89a3      	ldrhlt	r3, [r4, #12]
 80095d0:	181b      	addge	r3, r3, r0
 80095d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095d6:	bfac      	ite	ge
 80095d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80095da:	81a3      	strhlt	r3, [r4, #12]
 80095dc:	bd10      	pop	{r4, pc}

080095de <__swrite>:
 80095de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e2:	461f      	mov	r7, r3
 80095e4:	898b      	ldrh	r3, [r1, #12]
 80095e6:	05db      	lsls	r3, r3, #23
 80095e8:	4605      	mov	r5, r0
 80095ea:	460c      	mov	r4, r1
 80095ec:	4616      	mov	r6, r2
 80095ee:	d505      	bpl.n	80095fc <__swrite+0x1e>
 80095f0:	2302      	movs	r3, #2
 80095f2:	2200      	movs	r2, #0
 80095f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095f8:	f000 f868 	bl	80096cc <_lseek_r>
 80095fc:	89a3      	ldrh	r3, [r4, #12]
 80095fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009602:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009606:	81a3      	strh	r3, [r4, #12]
 8009608:	4632      	mov	r2, r6
 800960a:	463b      	mov	r3, r7
 800960c:	4628      	mov	r0, r5
 800960e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009612:	f000 b817 	b.w	8009644 <_write_r>

08009616 <__sseek>:
 8009616:	b510      	push	{r4, lr}
 8009618:	460c      	mov	r4, r1
 800961a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800961e:	f000 f855 	bl	80096cc <_lseek_r>
 8009622:	1c43      	adds	r3, r0, #1
 8009624:	89a3      	ldrh	r3, [r4, #12]
 8009626:	bf15      	itete	ne
 8009628:	6560      	strne	r0, [r4, #84]	; 0x54
 800962a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800962e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009632:	81a3      	strheq	r3, [r4, #12]
 8009634:	bf18      	it	ne
 8009636:	81a3      	strhne	r3, [r4, #12]
 8009638:	bd10      	pop	{r4, pc}

0800963a <__sclose>:
 800963a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800963e:	f000 b813 	b.w	8009668 <_close_r>
	...

08009644 <_write_r>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	4c07      	ldr	r4, [pc, #28]	; (8009664 <_write_r+0x20>)
 8009648:	4605      	mov	r5, r0
 800964a:	4608      	mov	r0, r1
 800964c:	4611      	mov	r1, r2
 800964e:	2200      	movs	r2, #0
 8009650:	6022      	str	r2, [r4, #0]
 8009652:	461a      	mov	r2, r3
 8009654:	f7fd f866 	bl	8006724 <_write>
 8009658:	1c43      	adds	r3, r0, #1
 800965a:	d102      	bne.n	8009662 <_write_r+0x1e>
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	b103      	cbz	r3, 8009662 <_write_r+0x1e>
 8009660:	602b      	str	r3, [r5, #0]
 8009662:	bd38      	pop	{r3, r4, r5, pc}
 8009664:	200008d8 	.word	0x200008d8

08009668 <_close_r>:
 8009668:	b538      	push	{r3, r4, r5, lr}
 800966a:	4c06      	ldr	r4, [pc, #24]	; (8009684 <_close_r+0x1c>)
 800966c:	2300      	movs	r3, #0
 800966e:	4605      	mov	r5, r0
 8009670:	4608      	mov	r0, r1
 8009672:	6023      	str	r3, [r4, #0]
 8009674:	f7fd fc36 	bl	8006ee4 <_close>
 8009678:	1c43      	adds	r3, r0, #1
 800967a:	d102      	bne.n	8009682 <_close_r+0x1a>
 800967c:	6823      	ldr	r3, [r4, #0]
 800967e:	b103      	cbz	r3, 8009682 <_close_r+0x1a>
 8009680:	602b      	str	r3, [r5, #0]
 8009682:	bd38      	pop	{r3, r4, r5, pc}
 8009684:	200008d8 	.word	0x200008d8

08009688 <_fstat_r>:
 8009688:	b538      	push	{r3, r4, r5, lr}
 800968a:	4c07      	ldr	r4, [pc, #28]	; (80096a8 <_fstat_r+0x20>)
 800968c:	2300      	movs	r3, #0
 800968e:	4605      	mov	r5, r0
 8009690:	4608      	mov	r0, r1
 8009692:	4611      	mov	r1, r2
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	f7fd fc28 	bl	8006eea <_fstat>
 800969a:	1c43      	adds	r3, r0, #1
 800969c:	d102      	bne.n	80096a4 <_fstat_r+0x1c>
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	b103      	cbz	r3, 80096a4 <_fstat_r+0x1c>
 80096a2:	602b      	str	r3, [r5, #0]
 80096a4:	bd38      	pop	{r3, r4, r5, pc}
 80096a6:	bf00      	nop
 80096a8:	200008d8 	.word	0x200008d8

080096ac <_isatty_r>:
 80096ac:	b538      	push	{r3, r4, r5, lr}
 80096ae:	4c06      	ldr	r4, [pc, #24]	; (80096c8 <_isatty_r+0x1c>)
 80096b0:	2300      	movs	r3, #0
 80096b2:	4605      	mov	r5, r0
 80096b4:	4608      	mov	r0, r1
 80096b6:	6023      	str	r3, [r4, #0]
 80096b8:	f7fd fc1c 	bl	8006ef4 <_isatty>
 80096bc:	1c43      	adds	r3, r0, #1
 80096be:	d102      	bne.n	80096c6 <_isatty_r+0x1a>
 80096c0:	6823      	ldr	r3, [r4, #0]
 80096c2:	b103      	cbz	r3, 80096c6 <_isatty_r+0x1a>
 80096c4:	602b      	str	r3, [r5, #0]
 80096c6:	bd38      	pop	{r3, r4, r5, pc}
 80096c8:	200008d8 	.word	0x200008d8

080096cc <_lseek_r>:
 80096cc:	b538      	push	{r3, r4, r5, lr}
 80096ce:	4c07      	ldr	r4, [pc, #28]	; (80096ec <_lseek_r+0x20>)
 80096d0:	4605      	mov	r5, r0
 80096d2:	4608      	mov	r0, r1
 80096d4:	4611      	mov	r1, r2
 80096d6:	2200      	movs	r2, #0
 80096d8:	6022      	str	r2, [r4, #0]
 80096da:	461a      	mov	r2, r3
 80096dc:	f7fd fc0c 	bl	8006ef8 <_lseek>
 80096e0:	1c43      	adds	r3, r0, #1
 80096e2:	d102      	bne.n	80096ea <_lseek_r+0x1e>
 80096e4:	6823      	ldr	r3, [r4, #0]
 80096e6:	b103      	cbz	r3, 80096ea <_lseek_r+0x1e>
 80096e8:	602b      	str	r3, [r5, #0]
 80096ea:	bd38      	pop	{r3, r4, r5, pc}
 80096ec:	200008d8 	.word	0x200008d8

080096f0 <__ascii_mbtowc>:
 80096f0:	b082      	sub	sp, #8
 80096f2:	b901      	cbnz	r1, 80096f6 <__ascii_mbtowc+0x6>
 80096f4:	a901      	add	r1, sp, #4
 80096f6:	b142      	cbz	r2, 800970a <__ascii_mbtowc+0x1a>
 80096f8:	b14b      	cbz	r3, 800970e <__ascii_mbtowc+0x1e>
 80096fa:	7813      	ldrb	r3, [r2, #0]
 80096fc:	600b      	str	r3, [r1, #0]
 80096fe:	7812      	ldrb	r2, [r2, #0]
 8009700:	1c10      	adds	r0, r2, #0
 8009702:	bf18      	it	ne
 8009704:	2001      	movne	r0, #1
 8009706:	b002      	add	sp, #8
 8009708:	4770      	bx	lr
 800970a:	4610      	mov	r0, r2
 800970c:	e7fb      	b.n	8009706 <__ascii_mbtowc+0x16>
 800970e:	f06f 0001 	mvn.w	r0, #1
 8009712:	e7f8      	b.n	8009706 <__ascii_mbtowc+0x16>

08009714 <__malloc_lock>:
 8009714:	4770      	bx	lr

08009716 <__malloc_unlock>:
 8009716:	4770      	bx	lr

08009718 <_read_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	4c07      	ldr	r4, [pc, #28]	; (8009738 <_read_r+0x20>)
 800971c:	4605      	mov	r5, r0
 800971e:	4608      	mov	r0, r1
 8009720:	4611      	mov	r1, r2
 8009722:	2200      	movs	r2, #0
 8009724:	6022      	str	r2, [r4, #0]
 8009726:	461a      	mov	r2, r3
 8009728:	f7fd fbce 	bl	8006ec8 <_read>
 800972c:	1c43      	adds	r3, r0, #1
 800972e:	d102      	bne.n	8009736 <_read_r+0x1e>
 8009730:	6823      	ldr	r3, [r4, #0]
 8009732:	b103      	cbz	r3, 8009736 <_read_r+0x1e>
 8009734:	602b      	str	r3, [r5, #0]
 8009736:	bd38      	pop	{r3, r4, r5, pc}
 8009738:	200008d8 	.word	0x200008d8

0800973c <__ascii_wctomb>:
 800973c:	b149      	cbz	r1, 8009752 <__ascii_wctomb+0x16>
 800973e:	2aff      	cmp	r2, #255	; 0xff
 8009740:	bf85      	ittet	hi
 8009742:	238a      	movhi	r3, #138	; 0x8a
 8009744:	6003      	strhi	r3, [r0, #0]
 8009746:	700a      	strbls	r2, [r1, #0]
 8009748:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800974c:	bf98      	it	ls
 800974e:	2001      	movls	r0, #1
 8009750:	4770      	bx	lr
 8009752:	4608      	mov	r0, r1
 8009754:	4770      	bx	lr
	...

08009758 <asin>:
 8009758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800975a:	ed2d 8b02 	vpush	{d8}
 800975e:	4e26      	ldr	r6, [pc, #152]	; (80097f8 <asin+0xa0>)
 8009760:	b08b      	sub	sp, #44	; 0x2c
 8009762:	ec55 4b10 	vmov	r4, r5, d0
 8009766:	f000 fa1b 	bl	8009ba0 <__ieee754_asin>
 800976a:	f996 3000 	ldrsb.w	r3, [r6]
 800976e:	eeb0 8a40 	vmov.f32	s16, s0
 8009772:	eef0 8a60 	vmov.f32	s17, s1
 8009776:	3301      	adds	r3, #1
 8009778:	d036      	beq.n	80097e8 <asin+0x90>
 800977a:	4622      	mov	r2, r4
 800977c:	462b      	mov	r3, r5
 800977e:	4620      	mov	r0, r4
 8009780:	4629      	mov	r1, r5
 8009782:	f7f7 fbad 	bl	8000ee0 <__aeabi_dcmpun>
 8009786:	4607      	mov	r7, r0
 8009788:	bb70      	cbnz	r0, 80097e8 <asin+0x90>
 800978a:	ec45 4b10 	vmov	d0, r4, r5
 800978e:	f001 fc57 	bl	800b040 <fabs>
 8009792:	2200      	movs	r2, #0
 8009794:	4b19      	ldr	r3, [pc, #100]	; (80097fc <asin+0xa4>)
 8009796:	ec51 0b10 	vmov	r0, r1, d0
 800979a:	f7f7 fb97 	bl	8000ecc <__aeabi_dcmpgt>
 800979e:	b318      	cbz	r0, 80097e8 <asin+0x90>
 80097a0:	2301      	movs	r3, #1
 80097a2:	9300      	str	r3, [sp, #0]
 80097a4:	4816      	ldr	r0, [pc, #88]	; (8009800 <asin+0xa8>)
 80097a6:	4b17      	ldr	r3, [pc, #92]	; (8009804 <asin+0xac>)
 80097a8:	9301      	str	r3, [sp, #4]
 80097aa:	9708      	str	r7, [sp, #32]
 80097ac:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80097b0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80097b4:	f001 fc58 	bl	800b068 <nan>
 80097b8:	f996 3000 	ldrsb.w	r3, [r6]
 80097bc:	2b02      	cmp	r3, #2
 80097be:	ed8d 0b06 	vstr	d0, [sp, #24]
 80097c2:	d104      	bne.n	80097ce <asin+0x76>
 80097c4:	f7fd fc08 	bl	8006fd8 <__errno>
 80097c8:	2321      	movs	r3, #33	; 0x21
 80097ca:	6003      	str	r3, [r0, #0]
 80097cc:	e004      	b.n	80097d8 <asin+0x80>
 80097ce:	4668      	mov	r0, sp
 80097d0:	f001 fc47 	bl	800b062 <matherr>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d0f5      	beq.n	80097c4 <asin+0x6c>
 80097d8:	9b08      	ldr	r3, [sp, #32]
 80097da:	b11b      	cbz	r3, 80097e4 <asin+0x8c>
 80097dc:	f7fd fbfc 	bl	8006fd8 <__errno>
 80097e0:	9b08      	ldr	r3, [sp, #32]
 80097e2:	6003      	str	r3, [r0, #0]
 80097e4:	ed9d 8b06 	vldr	d8, [sp, #24]
 80097e8:	eeb0 0a48 	vmov.f32	s0, s16
 80097ec:	eef0 0a68 	vmov.f32	s1, s17
 80097f0:	b00b      	add	sp, #44	; 0x2c
 80097f2:	ecbd 8b02 	vpop	{d8}
 80097f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097f8:	20000238 	.word	0x20000238
 80097fc:	3ff00000 	.word	0x3ff00000
 8009800:	0800b709 	.word	0x0800b709
 8009804:	0800b820 	.word	0x0800b820

08009808 <atan2>:
 8009808:	f000 bbda 	b.w	8009fc0 <__ieee754_atan2>

0800980c <pow>:
 800980c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009810:	ed2d 8b04 	vpush	{d8-d9}
 8009814:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8009ae8 <pow+0x2dc>
 8009818:	b08d      	sub	sp, #52	; 0x34
 800981a:	ec57 6b10 	vmov	r6, r7, d0
 800981e:	ec55 4b11 	vmov	r4, r5, d1
 8009822:	f000 fcad 	bl	800a180 <__ieee754_pow>
 8009826:	f999 3000 	ldrsb.w	r3, [r9]
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	3301      	adds	r3, #1
 800982e:	eeb0 8a40 	vmov.f32	s16, s0
 8009832:	eef0 8a60 	vmov.f32	s17, s1
 8009836:	46c8      	mov	r8, r9
 8009838:	d05f      	beq.n	80098fa <pow+0xee>
 800983a:	4622      	mov	r2, r4
 800983c:	462b      	mov	r3, r5
 800983e:	4620      	mov	r0, r4
 8009840:	4629      	mov	r1, r5
 8009842:	f7f7 fb4d 	bl	8000ee0 <__aeabi_dcmpun>
 8009846:	4683      	mov	fp, r0
 8009848:	2800      	cmp	r0, #0
 800984a:	d156      	bne.n	80098fa <pow+0xee>
 800984c:	4632      	mov	r2, r6
 800984e:	463b      	mov	r3, r7
 8009850:	4630      	mov	r0, r6
 8009852:	4639      	mov	r1, r7
 8009854:	f7f7 fb44 	bl	8000ee0 <__aeabi_dcmpun>
 8009858:	9001      	str	r0, [sp, #4]
 800985a:	b1e8      	cbz	r0, 8009898 <pow+0x8c>
 800985c:	2200      	movs	r2, #0
 800985e:	2300      	movs	r3, #0
 8009860:	4620      	mov	r0, r4
 8009862:	4629      	mov	r1, r5
 8009864:	f7f7 fb0a 	bl	8000e7c <__aeabi_dcmpeq>
 8009868:	2800      	cmp	r0, #0
 800986a:	d046      	beq.n	80098fa <pow+0xee>
 800986c:	2301      	movs	r3, #1
 800986e:	9302      	str	r3, [sp, #8]
 8009870:	4b96      	ldr	r3, [pc, #600]	; (8009acc <pow+0x2c0>)
 8009872:	9303      	str	r3, [sp, #12]
 8009874:	4b96      	ldr	r3, [pc, #600]	; (8009ad0 <pow+0x2c4>)
 8009876:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800987a:	2200      	movs	r2, #0
 800987c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009880:	9b00      	ldr	r3, [sp, #0]
 8009882:	2b02      	cmp	r3, #2
 8009884:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009888:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800988c:	d033      	beq.n	80098f6 <pow+0xea>
 800988e:	a802      	add	r0, sp, #8
 8009890:	f001 fbe7 	bl	800b062 <matherr>
 8009894:	bb48      	cbnz	r0, 80098ea <pow+0xde>
 8009896:	e05d      	b.n	8009954 <pow+0x148>
 8009898:	f04f 0a00 	mov.w	sl, #0
 800989c:	f04f 0b00 	mov.w	fp, #0
 80098a0:	4652      	mov	r2, sl
 80098a2:	465b      	mov	r3, fp
 80098a4:	4630      	mov	r0, r6
 80098a6:	4639      	mov	r1, r7
 80098a8:	f7f7 fae8 	bl	8000e7c <__aeabi_dcmpeq>
 80098ac:	ec4b ab19 	vmov	d9, sl, fp
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d054      	beq.n	800995e <pow+0x152>
 80098b4:	4652      	mov	r2, sl
 80098b6:	465b      	mov	r3, fp
 80098b8:	4620      	mov	r0, r4
 80098ba:	4629      	mov	r1, r5
 80098bc:	f7f7 fade 	bl	8000e7c <__aeabi_dcmpeq>
 80098c0:	4680      	mov	r8, r0
 80098c2:	b318      	cbz	r0, 800990c <pow+0x100>
 80098c4:	2301      	movs	r3, #1
 80098c6:	9302      	str	r3, [sp, #8]
 80098c8:	4b80      	ldr	r3, [pc, #512]	; (8009acc <pow+0x2c0>)
 80098ca:	9303      	str	r3, [sp, #12]
 80098cc:	9b01      	ldr	r3, [sp, #4]
 80098ce:	930a      	str	r3, [sp, #40]	; 0x28
 80098d0:	9b00      	ldr	r3, [sp, #0]
 80098d2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80098d6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80098da:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d0d5      	beq.n	800988e <pow+0x82>
 80098e2:	4b7b      	ldr	r3, [pc, #492]	; (8009ad0 <pow+0x2c4>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80098ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098ec:	b11b      	cbz	r3, 80098f6 <pow+0xea>
 80098ee:	f7fd fb73 	bl	8006fd8 <__errno>
 80098f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098f4:	6003      	str	r3, [r0, #0]
 80098f6:	ed9d 8b08 	vldr	d8, [sp, #32]
 80098fa:	eeb0 0a48 	vmov.f32	s0, s16
 80098fe:	eef0 0a68 	vmov.f32	s1, s17
 8009902:	b00d      	add	sp, #52	; 0x34
 8009904:	ecbd 8b04 	vpop	{d8-d9}
 8009908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990c:	ec45 4b10 	vmov	d0, r4, r5
 8009910:	f001 fb9f 	bl	800b052 <finite>
 8009914:	2800      	cmp	r0, #0
 8009916:	d0f0      	beq.n	80098fa <pow+0xee>
 8009918:	4652      	mov	r2, sl
 800991a:	465b      	mov	r3, fp
 800991c:	4620      	mov	r0, r4
 800991e:	4629      	mov	r1, r5
 8009920:	f7f7 fab6 	bl	8000e90 <__aeabi_dcmplt>
 8009924:	2800      	cmp	r0, #0
 8009926:	d0e8      	beq.n	80098fa <pow+0xee>
 8009928:	2301      	movs	r3, #1
 800992a:	9302      	str	r3, [sp, #8]
 800992c:	4b67      	ldr	r3, [pc, #412]	; (8009acc <pow+0x2c0>)
 800992e:	9303      	str	r3, [sp, #12]
 8009930:	f999 3000 	ldrsb.w	r3, [r9]
 8009934:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009938:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800993c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009940:	b913      	cbnz	r3, 8009948 <pow+0x13c>
 8009942:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009946:	e7a2      	b.n	800988e <pow+0x82>
 8009948:	4962      	ldr	r1, [pc, #392]	; (8009ad4 <pow+0x2c8>)
 800994a:	2000      	movs	r0, #0
 800994c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009950:	2b02      	cmp	r3, #2
 8009952:	d19c      	bne.n	800988e <pow+0x82>
 8009954:	f7fd fb40 	bl	8006fd8 <__errno>
 8009958:	2321      	movs	r3, #33	; 0x21
 800995a:	6003      	str	r3, [r0, #0]
 800995c:	e7c5      	b.n	80098ea <pow+0xde>
 800995e:	eeb0 0a48 	vmov.f32	s0, s16
 8009962:	eef0 0a68 	vmov.f32	s1, s17
 8009966:	f001 fb74 	bl	800b052 <finite>
 800996a:	9000      	str	r0, [sp, #0]
 800996c:	2800      	cmp	r0, #0
 800996e:	f040 8081 	bne.w	8009a74 <pow+0x268>
 8009972:	ec47 6b10 	vmov	d0, r6, r7
 8009976:	f001 fb6c 	bl	800b052 <finite>
 800997a:	2800      	cmp	r0, #0
 800997c:	d07a      	beq.n	8009a74 <pow+0x268>
 800997e:	ec45 4b10 	vmov	d0, r4, r5
 8009982:	f001 fb66 	bl	800b052 <finite>
 8009986:	2800      	cmp	r0, #0
 8009988:	d074      	beq.n	8009a74 <pow+0x268>
 800998a:	ec53 2b18 	vmov	r2, r3, d8
 800998e:	ee18 0a10 	vmov	r0, s16
 8009992:	4619      	mov	r1, r3
 8009994:	f7f7 faa4 	bl	8000ee0 <__aeabi_dcmpun>
 8009998:	f999 9000 	ldrsb.w	r9, [r9]
 800999c:	4b4b      	ldr	r3, [pc, #300]	; (8009acc <pow+0x2c0>)
 800999e:	b1b0      	cbz	r0, 80099ce <pow+0x1c2>
 80099a0:	2201      	movs	r2, #1
 80099a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80099a6:	9b00      	ldr	r3, [sp, #0]
 80099a8:	930a      	str	r3, [sp, #40]	; 0x28
 80099aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80099ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80099b2:	f1b9 0f00 	cmp.w	r9, #0
 80099b6:	d0c4      	beq.n	8009942 <pow+0x136>
 80099b8:	4652      	mov	r2, sl
 80099ba:	465b      	mov	r3, fp
 80099bc:	4650      	mov	r0, sl
 80099be:	4659      	mov	r1, fp
 80099c0:	f7f6 fef4 	bl	80007ac <__aeabi_ddiv>
 80099c4:	f1b9 0f02 	cmp.w	r9, #2
 80099c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80099cc:	e7c1      	b.n	8009952 <pow+0x146>
 80099ce:	2203      	movs	r2, #3
 80099d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80099d4:	900a      	str	r0, [sp, #40]	; 0x28
 80099d6:	4629      	mov	r1, r5
 80099d8:	4620      	mov	r0, r4
 80099da:	2200      	movs	r2, #0
 80099dc:	4b3e      	ldr	r3, [pc, #248]	; (8009ad8 <pow+0x2cc>)
 80099de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80099e2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80099e6:	f7f6 fdb7 	bl	8000558 <__aeabi_dmul>
 80099ea:	4604      	mov	r4, r0
 80099ec:	460d      	mov	r5, r1
 80099ee:	f1b9 0f00 	cmp.w	r9, #0
 80099f2:	d124      	bne.n	8009a3e <pow+0x232>
 80099f4:	4b39      	ldr	r3, [pc, #228]	; (8009adc <pow+0x2d0>)
 80099f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80099fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80099fe:	4630      	mov	r0, r6
 8009a00:	4652      	mov	r2, sl
 8009a02:	465b      	mov	r3, fp
 8009a04:	4639      	mov	r1, r7
 8009a06:	f7f7 fa43 	bl	8000e90 <__aeabi_dcmplt>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	d056      	beq.n	8009abc <pow+0x2b0>
 8009a0e:	ec45 4b10 	vmov	d0, r4, r5
 8009a12:	f001 fb31 	bl	800b078 <rint>
 8009a16:	4622      	mov	r2, r4
 8009a18:	462b      	mov	r3, r5
 8009a1a:	ec51 0b10 	vmov	r0, r1, d0
 8009a1e:	f7f7 fa2d 	bl	8000e7c <__aeabi_dcmpeq>
 8009a22:	b920      	cbnz	r0, 8009a2e <pow+0x222>
 8009a24:	4b2e      	ldr	r3, [pc, #184]	; (8009ae0 <pow+0x2d4>)
 8009a26:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009a2a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009a2e:	f998 3000 	ldrsb.w	r3, [r8]
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	d142      	bne.n	8009abc <pow+0x2b0>
 8009a36:	f7fd facf 	bl	8006fd8 <__errno>
 8009a3a:	2322      	movs	r3, #34	; 0x22
 8009a3c:	e78d      	b.n	800995a <pow+0x14e>
 8009a3e:	4b29      	ldr	r3, [pc, #164]	; (8009ae4 <pow+0x2d8>)
 8009a40:	2200      	movs	r2, #0
 8009a42:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009a46:	4630      	mov	r0, r6
 8009a48:	4652      	mov	r2, sl
 8009a4a:	465b      	mov	r3, fp
 8009a4c:	4639      	mov	r1, r7
 8009a4e:	f7f7 fa1f 	bl	8000e90 <__aeabi_dcmplt>
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d0eb      	beq.n	8009a2e <pow+0x222>
 8009a56:	ec45 4b10 	vmov	d0, r4, r5
 8009a5a:	f001 fb0d 	bl	800b078 <rint>
 8009a5e:	4622      	mov	r2, r4
 8009a60:	462b      	mov	r3, r5
 8009a62:	ec51 0b10 	vmov	r0, r1, d0
 8009a66:	f7f7 fa09 	bl	8000e7c <__aeabi_dcmpeq>
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	d1df      	bne.n	8009a2e <pow+0x222>
 8009a6e:	2200      	movs	r2, #0
 8009a70:	4b18      	ldr	r3, [pc, #96]	; (8009ad4 <pow+0x2c8>)
 8009a72:	e7da      	b.n	8009a2a <pow+0x21e>
 8009a74:	2200      	movs	r2, #0
 8009a76:	2300      	movs	r3, #0
 8009a78:	ec51 0b18 	vmov	r0, r1, d8
 8009a7c:	f7f7 f9fe 	bl	8000e7c <__aeabi_dcmpeq>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	f43f af3a 	beq.w	80098fa <pow+0xee>
 8009a86:	ec47 6b10 	vmov	d0, r6, r7
 8009a8a:	f001 fae2 	bl	800b052 <finite>
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	f43f af33 	beq.w	80098fa <pow+0xee>
 8009a94:	ec45 4b10 	vmov	d0, r4, r5
 8009a98:	f001 fadb 	bl	800b052 <finite>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	f43f af2c 	beq.w	80098fa <pow+0xee>
 8009aa2:	2304      	movs	r3, #4
 8009aa4:	9302      	str	r3, [sp, #8]
 8009aa6:	4b09      	ldr	r3, [pc, #36]	; (8009acc <pow+0x2c0>)
 8009aa8:	9303      	str	r3, [sp, #12]
 8009aaa:	2300      	movs	r3, #0
 8009aac:	930a      	str	r3, [sp, #40]	; 0x28
 8009aae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009ab2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009ab6:	ed8d 9b08 	vstr	d9, [sp, #32]
 8009aba:	e7b8      	b.n	8009a2e <pow+0x222>
 8009abc:	a802      	add	r0, sp, #8
 8009abe:	f001 fad0 	bl	800b062 <matherr>
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	f47f af11 	bne.w	80098ea <pow+0xde>
 8009ac8:	e7b5      	b.n	8009a36 <pow+0x22a>
 8009aca:	bf00      	nop
 8009acc:	0800b825 	.word	0x0800b825
 8009ad0:	3ff00000 	.word	0x3ff00000
 8009ad4:	fff00000 	.word	0xfff00000
 8009ad8:	3fe00000 	.word	0x3fe00000
 8009adc:	47efffff 	.word	0x47efffff
 8009ae0:	c7efffff 	.word	0xc7efffff
 8009ae4:	7ff00000 	.word	0x7ff00000
 8009ae8:	20000238 	.word	0x20000238

08009aec <sqrt>:
 8009aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009af0:	ed2d 8b02 	vpush	{d8}
 8009af4:	b08b      	sub	sp, #44	; 0x2c
 8009af6:	ec55 4b10 	vmov	r4, r5, d0
 8009afa:	f001 f84f 	bl	800ab9c <__ieee754_sqrt>
 8009afe:	4b26      	ldr	r3, [pc, #152]	; (8009b98 <sqrt+0xac>)
 8009b00:	eeb0 8a40 	vmov.f32	s16, s0
 8009b04:	eef0 8a60 	vmov.f32	s17, s1
 8009b08:	f993 6000 	ldrsb.w	r6, [r3]
 8009b0c:	1c73      	adds	r3, r6, #1
 8009b0e:	d02a      	beq.n	8009b66 <sqrt+0x7a>
 8009b10:	4622      	mov	r2, r4
 8009b12:	462b      	mov	r3, r5
 8009b14:	4620      	mov	r0, r4
 8009b16:	4629      	mov	r1, r5
 8009b18:	f7f7 f9e2 	bl	8000ee0 <__aeabi_dcmpun>
 8009b1c:	4607      	mov	r7, r0
 8009b1e:	bb10      	cbnz	r0, 8009b66 <sqrt+0x7a>
 8009b20:	f04f 0800 	mov.w	r8, #0
 8009b24:	f04f 0900 	mov.w	r9, #0
 8009b28:	4642      	mov	r2, r8
 8009b2a:	464b      	mov	r3, r9
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	4629      	mov	r1, r5
 8009b30:	f7f7 f9ae 	bl	8000e90 <__aeabi_dcmplt>
 8009b34:	b1b8      	cbz	r0, 8009b66 <sqrt+0x7a>
 8009b36:	2301      	movs	r3, #1
 8009b38:	9300      	str	r3, [sp, #0]
 8009b3a:	4b18      	ldr	r3, [pc, #96]	; (8009b9c <sqrt+0xb0>)
 8009b3c:	9301      	str	r3, [sp, #4]
 8009b3e:	9708      	str	r7, [sp, #32]
 8009b40:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009b44:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009b48:	b9b6      	cbnz	r6, 8009b78 <sqrt+0x8c>
 8009b4a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009b4e:	4668      	mov	r0, sp
 8009b50:	f001 fa87 	bl	800b062 <matherr>
 8009b54:	b1d0      	cbz	r0, 8009b8c <sqrt+0xa0>
 8009b56:	9b08      	ldr	r3, [sp, #32]
 8009b58:	b11b      	cbz	r3, 8009b62 <sqrt+0x76>
 8009b5a:	f7fd fa3d 	bl	8006fd8 <__errno>
 8009b5e:	9b08      	ldr	r3, [sp, #32]
 8009b60:	6003      	str	r3, [r0, #0]
 8009b62:	ed9d 8b06 	vldr	d8, [sp, #24]
 8009b66:	eeb0 0a48 	vmov.f32	s0, s16
 8009b6a:	eef0 0a68 	vmov.f32	s1, s17
 8009b6e:	b00b      	add	sp, #44	; 0x2c
 8009b70:	ecbd 8b02 	vpop	{d8}
 8009b74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b78:	4642      	mov	r2, r8
 8009b7a:	464b      	mov	r3, r9
 8009b7c:	4640      	mov	r0, r8
 8009b7e:	4649      	mov	r1, r9
 8009b80:	f7f6 fe14 	bl	80007ac <__aeabi_ddiv>
 8009b84:	2e02      	cmp	r6, #2
 8009b86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009b8a:	d1e0      	bne.n	8009b4e <sqrt+0x62>
 8009b8c:	f7fd fa24 	bl	8006fd8 <__errno>
 8009b90:	2321      	movs	r3, #33	; 0x21
 8009b92:	6003      	str	r3, [r0, #0]
 8009b94:	e7df      	b.n	8009b56 <sqrt+0x6a>
 8009b96:	bf00      	nop
 8009b98:	20000238 	.word	0x20000238
 8009b9c:	0800b829 	.word	0x0800b829

08009ba0 <__ieee754_asin>:
 8009ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba4:	ec55 4b10 	vmov	r4, r5, d0
 8009ba8:	4bcb      	ldr	r3, [pc, #812]	; (8009ed8 <__ieee754_asin+0x338>)
 8009baa:	b087      	sub	sp, #28
 8009bac:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8009bb0:	429f      	cmp	r7, r3
 8009bb2:	9501      	str	r5, [sp, #4]
 8009bb4:	dd31      	ble.n	8009c1a <__ieee754_asin+0x7a>
 8009bb6:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8009bba:	ee10 3a10 	vmov	r3, s0
 8009bbe:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8009bc2:	433b      	orrs	r3, r7
 8009bc4:	d117      	bne.n	8009bf6 <__ieee754_asin+0x56>
 8009bc6:	a3aa      	add	r3, pc, #680	; (adr r3, 8009e70 <__ieee754_asin+0x2d0>)
 8009bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bcc:	ee10 0a10 	vmov	r0, s0
 8009bd0:	4629      	mov	r1, r5
 8009bd2:	f7f6 fcc1 	bl	8000558 <__aeabi_dmul>
 8009bd6:	a3a8      	add	r3, pc, #672	; (adr r3, 8009e78 <__ieee754_asin+0x2d8>)
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	4606      	mov	r6, r0
 8009bde:	460f      	mov	r7, r1
 8009be0:	4620      	mov	r0, r4
 8009be2:	4629      	mov	r1, r5
 8009be4:	f7f6 fcb8 	bl	8000558 <__aeabi_dmul>
 8009be8:	4602      	mov	r2, r0
 8009bea:	460b      	mov	r3, r1
 8009bec:	4630      	mov	r0, r6
 8009bee:	4639      	mov	r1, r7
 8009bf0:	f7f6 fafc 	bl	80001ec <__adddf3>
 8009bf4:	e00a      	b.n	8009c0c <__ieee754_asin+0x6c>
 8009bf6:	ee10 2a10 	vmov	r2, s0
 8009bfa:	462b      	mov	r3, r5
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	4629      	mov	r1, r5
 8009c00:	f7f6 faf2 	bl	80001e8 <__aeabi_dsub>
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	f7f6 fdd0 	bl	80007ac <__aeabi_ddiv>
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	460d      	mov	r5, r1
 8009c10:	ec45 4b10 	vmov	d0, r4, r5
 8009c14:	b007      	add	sp, #28
 8009c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1a:	4bb0      	ldr	r3, [pc, #704]	; (8009edc <__ieee754_asin+0x33c>)
 8009c1c:	429f      	cmp	r7, r3
 8009c1e:	dc11      	bgt.n	8009c44 <__ieee754_asin+0xa4>
 8009c20:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8009c24:	f280 80ae 	bge.w	8009d84 <__ieee754_asin+0x1e4>
 8009c28:	a395      	add	r3, pc, #596	; (adr r3, 8009e80 <__ieee754_asin+0x2e0>)
 8009c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2e:	ee10 0a10 	vmov	r0, s0
 8009c32:	4629      	mov	r1, r5
 8009c34:	f7f6 fada 	bl	80001ec <__adddf3>
 8009c38:	2200      	movs	r2, #0
 8009c3a:	4ba9      	ldr	r3, [pc, #676]	; (8009ee0 <__ieee754_asin+0x340>)
 8009c3c:	f7f7 f946 	bl	8000ecc <__aeabi_dcmpgt>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d1e5      	bne.n	8009c10 <__ieee754_asin+0x70>
 8009c44:	ec45 4b10 	vmov	d0, r4, r5
 8009c48:	f001 f9fa 	bl	800b040 <fabs>
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	ec53 2b10 	vmov	r2, r3, d0
 8009c52:	49a3      	ldr	r1, [pc, #652]	; (8009ee0 <__ieee754_asin+0x340>)
 8009c54:	f7f6 fac8 	bl	80001e8 <__aeabi_dsub>
 8009c58:	2200      	movs	r2, #0
 8009c5a:	4ba2      	ldr	r3, [pc, #648]	; (8009ee4 <__ieee754_asin+0x344>)
 8009c5c:	f7f6 fc7c 	bl	8000558 <__aeabi_dmul>
 8009c60:	a389      	add	r3, pc, #548	; (adr r3, 8009e88 <__ieee754_asin+0x2e8>)
 8009c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c66:	4604      	mov	r4, r0
 8009c68:	460d      	mov	r5, r1
 8009c6a:	f7f6 fc75 	bl	8000558 <__aeabi_dmul>
 8009c6e:	a388      	add	r3, pc, #544	; (adr r3, 8009e90 <__ieee754_asin+0x2f0>)
 8009c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c74:	f7f6 faba 	bl	80001ec <__adddf3>
 8009c78:	4622      	mov	r2, r4
 8009c7a:	462b      	mov	r3, r5
 8009c7c:	f7f6 fc6c 	bl	8000558 <__aeabi_dmul>
 8009c80:	a385      	add	r3, pc, #532	; (adr r3, 8009e98 <__ieee754_asin+0x2f8>)
 8009c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c86:	f7f6 faaf 	bl	80001e8 <__aeabi_dsub>
 8009c8a:	4622      	mov	r2, r4
 8009c8c:	462b      	mov	r3, r5
 8009c8e:	f7f6 fc63 	bl	8000558 <__aeabi_dmul>
 8009c92:	a383      	add	r3, pc, #524	; (adr r3, 8009ea0 <__ieee754_asin+0x300>)
 8009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c98:	f7f6 faa8 	bl	80001ec <__adddf3>
 8009c9c:	4622      	mov	r2, r4
 8009c9e:	462b      	mov	r3, r5
 8009ca0:	f7f6 fc5a 	bl	8000558 <__aeabi_dmul>
 8009ca4:	a380      	add	r3, pc, #512	; (adr r3, 8009ea8 <__ieee754_asin+0x308>)
 8009ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009caa:	f7f6 fa9d 	bl	80001e8 <__aeabi_dsub>
 8009cae:	4622      	mov	r2, r4
 8009cb0:	462b      	mov	r3, r5
 8009cb2:	f7f6 fc51 	bl	8000558 <__aeabi_dmul>
 8009cb6:	a37e      	add	r3, pc, #504	; (adr r3, 8009eb0 <__ieee754_asin+0x310>)
 8009cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbc:	f7f6 fa96 	bl	80001ec <__adddf3>
 8009cc0:	4622      	mov	r2, r4
 8009cc2:	462b      	mov	r3, r5
 8009cc4:	f7f6 fc48 	bl	8000558 <__aeabi_dmul>
 8009cc8:	a37b      	add	r3, pc, #492	; (adr r3, 8009eb8 <__ieee754_asin+0x318>)
 8009cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cce:	4680      	mov	r8, r0
 8009cd0:	4689      	mov	r9, r1
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	4629      	mov	r1, r5
 8009cd6:	f7f6 fc3f 	bl	8000558 <__aeabi_dmul>
 8009cda:	a379      	add	r3, pc, #484	; (adr r3, 8009ec0 <__ieee754_asin+0x320>)
 8009cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce0:	f7f6 fa82 	bl	80001e8 <__aeabi_dsub>
 8009ce4:	4622      	mov	r2, r4
 8009ce6:	462b      	mov	r3, r5
 8009ce8:	f7f6 fc36 	bl	8000558 <__aeabi_dmul>
 8009cec:	a376      	add	r3, pc, #472	; (adr r3, 8009ec8 <__ieee754_asin+0x328>)
 8009cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf2:	f7f6 fa7b 	bl	80001ec <__adddf3>
 8009cf6:	4622      	mov	r2, r4
 8009cf8:	462b      	mov	r3, r5
 8009cfa:	f7f6 fc2d 	bl	8000558 <__aeabi_dmul>
 8009cfe:	a374      	add	r3, pc, #464	; (adr r3, 8009ed0 <__ieee754_asin+0x330>)
 8009d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d04:	f7f6 fa70 	bl	80001e8 <__aeabi_dsub>
 8009d08:	4622      	mov	r2, r4
 8009d0a:	462b      	mov	r3, r5
 8009d0c:	f7f6 fc24 	bl	8000558 <__aeabi_dmul>
 8009d10:	4b73      	ldr	r3, [pc, #460]	; (8009ee0 <__ieee754_asin+0x340>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	f7f6 fa6a 	bl	80001ec <__adddf3>
 8009d18:	ec45 4b10 	vmov	d0, r4, r5
 8009d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d20:	f000 ff3c 	bl	800ab9c <__ieee754_sqrt>
 8009d24:	4b70      	ldr	r3, [pc, #448]	; (8009ee8 <__ieee754_asin+0x348>)
 8009d26:	429f      	cmp	r7, r3
 8009d28:	ec5b ab10 	vmov	sl, fp, d0
 8009d2c:	f340 80de 	ble.w	8009eec <__ieee754_asin+0x34c>
 8009d30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d34:	4640      	mov	r0, r8
 8009d36:	4649      	mov	r1, r9
 8009d38:	f7f6 fd38 	bl	80007ac <__aeabi_ddiv>
 8009d3c:	4652      	mov	r2, sl
 8009d3e:	465b      	mov	r3, fp
 8009d40:	f7f6 fc0a 	bl	8000558 <__aeabi_dmul>
 8009d44:	4652      	mov	r2, sl
 8009d46:	465b      	mov	r3, fp
 8009d48:	f7f6 fa50 	bl	80001ec <__adddf3>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	460b      	mov	r3, r1
 8009d50:	f7f6 fa4c 	bl	80001ec <__adddf3>
 8009d54:	a348      	add	r3, pc, #288	; (adr r3, 8009e78 <__ieee754_asin+0x2d8>)
 8009d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5a:	f7f6 fa45 	bl	80001e8 <__aeabi_dsub>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	460b      	mov	r3, r1
 8009d62:	a143      	add	r1, pc, #268	; (adr r1, 8009e70 <__ieee754_asin+0x2d0>)
 8009d64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d68:	f7f6 fa3e 	bl	80001e8 <__aeabi_dsub>
 8009d6c:	9b01      	ldr	r3, [sp, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	bfdc      	itt	le
 8009d72:	4602      	movle	r2, r0
 8009d74:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8009d78:	4604      	mov	r4, r0
 8009d7a:	460d      	mov	r5, r1
 8009d7c:	bfdc      	itt	le
 8009d7e:	4614      	movle	r4, r2
 8009d80:	461d      	movle	r5, r3
 8009d82:	e745      	b.n	8009c10 <__ieee754_asin+0x70>
 8009d84:	ee10 2a10 	vmov	r2, s0
 8009d88:	ee10 0a10 	vmov	r0, s0
 8009d8c:	462b      	mov	r3, r5
 8009d8e:	4629      	mov	r1, r5
 8009d90:	f7f6 fbe2 	bl	8000558 <__aeabi_dmul>
 8009d94:	a33c      	add	r3, pc, #240	; (adr r3, 8009e88 <__ieee754_asin+0x2e8>)
 8009d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9a:	4606      	mov	r6, r0
 8009d9c:	460f      	mov	r7, r1
 8009d9e:	f7f6 fbdb 	bl	8000558 <__aeabi_dmul>
 8009da2:	a33b      	add	r3, pc, #236	; (adr r3, 8009e90 <__ieee754_asin+0x2f0>)
 8009da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da8:	f7f6 fa20 	bl	80001ec <__adddf3>
 8009dac:	4632      	mov	r2, r6
 8009dae:	463b      	mov	r3, r7
 8009db0:	f7f6 fbd2 	bl	8000558 <__aeabi_dmul>
 8009db4:	a338      	add	r3, pc, #224	; (adr r3, 8009e98 <__ieee754_asin+0x2f8>)
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	f7f6 fa15 	bl	80001e8 <__aeabi_dsub>
 8009dbe:	4632      	mov	r2, r6
 8009dc0:	463b      	mov	r3, r7
 8009dc2:	f7f6 fbc9 	bl	8000558 <__aeabi_dmul>
 8009dc6:	a336      	add	r3, pc, #216	; (adr r3, 8009ea0 <__ieee754_asin+0x300>)
 8009dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dcc:	f7f6 fa0e 	bl	80001ec <__adddf3>
 8009dd0:	4632      	mov	r2, r6
 8009dd2:	463b      	mov	r3, r7
 8009dd4:	f7f6 fbc0 	bl	8000558 <__aeabi_dmul>
 8009dd8:	a333      	add	r3, pc, #204	; (adr r3, 8009ea8 <__ieee754_asin+0x308>)
 8009dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dde:	f7f6 fa03 	bl	80001e8 <__aeabi_dsub>
 8009de2:	4632      	mov	r2, r6
 8009de4:	463b      	mov	r3, r7
 8009de6:	f7f6 fbb7 	bl	8000558 <__aeabi_dmul>
 8009dea:	a331      	add	r3, pc, #196	; (adr r3, 8009eb0 <__ieee754_asin+0x310>)
 8009dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df0:	f7f6 f9fc 	bl	80001ec <__adddf3>
 8009df4:	4632      	mov	r2, r6
 8009df6:	463b      	mov	r3, r7
 8009df8:	f7f6 fbae 	bl	8000558 <__aeabi_dmul>
 8009dfc:	a32e      	add	r3, pc, #184	; (adr r3, 8009eb8 <__ieee754_asin+0x318>)
 8009dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e02:	4680      	mov	r8, r0
 8009e04:	4689      	mov	r9, r1
 8009e06:	4630      	mov	r0, r6
 8009e08:	4639      	mov	r1, r7
 8009e0a:	f7f6 fba5 	bl	8000558 <__aeabi_dmul>
 8009e0e:	a32c      	add	r3, pc, #176	; (adr r3, 8009ec0 <__ieee754_asin+0x320>)
 8009e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e14:	f7f6 f9e8 	bl	80001e8 <__aeabi_dsub>
 8009e18:	4632      	mov	r2, r6
 8009e1a:	463b      	mov	r3, r7
 8009e1c:	f7f6 fb9c 	bl	8000558 <__aeabi_dmul>
 8009e20:	a329      	add	r3, pc, #164	; (adr r3, 8009ec8 <__ieee754_asin+0x328>)
 8009e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e26:	f7f6 f9e1 	bl	80001ec <__adddf3>
 8009e2a:	4632      	mov	r2, r6
 8009e2c:	463b      	mov	r3, r7
 8009e2e:	f7f6 fb93 	bl	8000558 <__aeabi_dmul>
 8009e32:	a327      	add	r3, pc, #156	; (adr r3, 8009ed0 <__ieee754_asin+0x330>)
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	f7f6 f9d6 	bl	80001e8 <__aeabi_dsub>
 8009e3c:	4632      	mov	r2, r6
 8009e3e:	463b      	mov	r3, r7
 8009e40:	f7f6 fb8a 	bl	8000558 <__aeabi_dmul>
 8009e44:	2200      	movs	r2, #0
 8009e46:	4b26      	ldr	r3, [pc, #152]	; (8009ee0 <__ieee754_asin+0x340>)
 8009e48:	f7f6 f9d0 	bl	80001ec <__adddf3>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	4640      	mov	r0, r8
 8009e52:	4649      	mov	r1, r9
 8009e54:	f7f6 fcaa 	bl	80007ac <__aeabi_ddiv>
 8009e58:	4622      	mov	r2, r4
 8009e5a:	462b      	mov	r3, r5
 8009e5c:	f7f6 fb7c 	bl	8000558 <__aeabi_dmul>
 8009e60:	4602      	mov	r2, r0
 8009e62:	460b      	mov	r3, r1
 8009e64:	4620      	mov	r0, r4
 8009e66:	4629      	mov	r1, r5
 8009e68:	e6c2      	b.n	8009bf0 <__ieee754_asin+0x50>
 8009e6a:	bf00      	nop
 8009e6c:	f3af 8000 	nop.w
 8009e70:	54442d18 	.word	0x54442d18
 8009e74:	3ff921fb 	.word	0x3ff921fb
 8009e78:	33145c07 	.word	0x33145c07
 8009e7c:	3c91a626 	.word	0x3c91a626
 8009e80:	8800759c 	.word	0x8800759c
 8009e84:	7e37e43c 	.word	0x7e37e43c
 8009e88:	0dfdf709 	.word	0x0dfdf709
 8009e8c:	3f023de1 	.word	0x3f023de1
 8009e90:	7501b288 	.word	0x7501b288
 8009e94:	3f49efe0 	.word	0x3f49efe0
 8009e98:	b5688f3b 	.word	0xb5688f3b
 8009e9c:	3fa48228 	.word	0x3fa48228
 8009ea0:	0e884455 	.word	0x0e884455
 8009ea4:	3fc9c155 	.word	0x3fc9c155
 8009ea8:	03eb6f7d 	.word	0x03eb6f7d
 8009eac:	3fd4d612 	.word	0x3fd4d612
 8009eb0:	55555555 	.word	0x55555555
 8009eb4:	3fc55555 	.word	0x3fc55555
 8009eb8:	b12e9282 	.word	0xb12e9282
 8009ebc:	3fb3b8c5 	.word	0x3fb3b8c5
 8009ec0:	1b8d0159 	.word	0x1b8d0159
 8009ec4:	3fe6066c 	.word	0x3fe6066c
 8009ec8:	9c598ac8 	.word	0x9c598ac8
 8009ecc:	40002ae5 	.word	0x40002ae5
 8009ed0:	1c8a2d4b 	.word	0x1c8a2d4b
 8009ed4:	40033a27 	.word	0x40033a27
 8009ed8:	3fefffff 	.word	0x3fefffff
 8009edc:	3fdfffff 	.word	0x3fdfffff
 8009ee0:	3ff00000 	.word	0x3ff00000
 8009ee4:	3fe00000 	.word	0x3fe00000
 8009ee8:	3fef3332 	.word	0x3fef3332
 8009eec:	ee10 2a10 	vmov	r2, s0
 8009ef0:	ee10 0a10 	vmov	r0, s0
 8009ef4:	465b      	mov	r3, fp
 8009ef6:	4659      	mov	r1, fp
 8009ef8:	f7f6 f978 	bl	80001ec <__adddf3>
 8009efc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f04:	4640      	mov	r0, r8
 8009f06:	4649      	mov	r1, r9
 8009f08:	f7f6 fc50 	bl	80007ac <__aeabi_ddiv>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	460b      	mov	r3, r1
 8009f10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f14:	f7f6 fb20 	bl	8000558 <__aeabi_dmul>
 8009f18:	2600      	movs	r6, #0
 8009f1a:	4680      	mov	r8, r0
 8009f1c:	4689      	mov	r9, r1
 8009f1e:	4632      	mov	r2, r6
 8009f20:	465b      	mov	r3, fp
 8009f22:	4630      	mov	r0, r6
 8009f24:	4659      	mov	r1, fp
 8009f26:	f7f6 fb17 	bl	8000558 <__aeabi_dmul>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	4620      	mov	r0, r4
 8009f30:	4629      	mov	r1, r5
 8009f32:	f7f6 f959 	bl	80001e8 <__aeabi_dsub>
 8009f36:	4632      	mov	r2, r6
 8009f38:	4604      	mov	r4, r0
 8009f3a:	460d      	mov	r5, r1
 8009f3c:	465b      	mov	r3, fp
 8009f3e:	4650      	mov	r0, sl
 8009f40:	4659      	mov	r1, fp
 8009f42:	f7f6 f953 	bl	80001ec <__adddf3>
 8009f46:	4602      	mov	r2, r0
 8009f48:	460b      	mov	r3, r1
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	f7f6 fc2d 	bl	80007ac <__aeabi_ddiv>
 8009f52:	4602      	mov	r2, r0
 8009f54:	460b      	mov	r3, r1
 8009f56:	f7f6 f949 	bl	80001ec <__adddf3>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	a114      	add	r1, pc, #80	; (adr r1, 8009fb0 <__ieee754_asin+0x410>)
 8009f60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f64:	f7f6 f940 	bl	80001e8 <__aeabi_dsub>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	4640      	mov	r0, r8
 8009f6e:	4649      	mov	r1, r9
 8009f70:	f7f6 f93a 	bl	80001e8 <__aeabi_dsub>
 8009f74:	465f      	mov	r7, fp
 8009f76:	4604      	mov	r4, r0
 8009f78:	460d      	mov	r5, r1
 8009f7a:	4632      	mov	r2, r6
 8009f7c:	465b      	mov	r3, fp
 8009f7e:	4630      	mov	r0, r6
 8009f80:	4639      	mov	r1, r7
 8009f82:	f7f6 f933 	bl	80001ec <__adddf3>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	a10b      	add	r1, pc, #44	; (adr r1, 8009fb8 <__ieee754_asin+0x418>)
 8009f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f90:	f7f6 f92a 	bl	80001e8 <__aeabi_dsub>
 8009f94:	4602      	mov	r2, r0
 8009f96:	460b      	mov	r3, r1
 8009f98:	4620      	mov	r0, r4
 8009f9a:	4629      	mov	r1, r5
 8009f9c:	f7f6 f924 	bl	80001e8 <__aeabi_dsub>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	a104      	add	r1, pc, #16	; (adr r1, 8009fb8 <__ieee754_asin+0x418>)
 8009fa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009faa:	e6dd      	b.n	8009d68 <__ieee754_asin+0x1c8>
 8009fac:	f3af 8000 	nop.w
 8009fb0:	33145c07 	.word	0x33145c07
 8009fb4:	3c91a626 	.word	0x3c91a626
 8009fb8:	54442d18 	.word	0x54442d18
 8009fbc:	3fe921fb 	.word	0x3fe921fb

08009fc0 <__ieee754_atan2>:
 8009fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fc4:	ec57 6b11 	vmov	r6, r7, d1
 8009fc8:	4273      	negs	r3, r6
 8009fca:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009fce:	4333      	orrs	r3, r6
 8009fd0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800a178 <__ieee754_atan2+0x1b8>
 8009fd4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009fd8:	4573      	cmp	r3, lr
 8009fda:	ec51 0b10 	vmov	r0, r1, d0
 8009fde:	ee11 8a10 	vmov	r8, s2
 8009fe2:	d80a      	bhi.n	8009ffa <__ieee754_atan2+0x3a>
 8009fe4:	4244      	negs	r4, r0
 8009fe6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009fea:	4304      	orrs	r4, r0
 8009fec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009ff0:	4574      	cmp	r4, lr
 8009ff2:	468c      	mov	ip, r1
 8009ff4:	ee10 9a10 	vmov	r9, s0
 8009ff8:	d907      	bls.n	800a00a <__ieee754_atan2+0x4a>
 8009ffa:	4632      	mov	r2, r6
 8009ffc:	463b      	mov	r3, r7
 8009ffe:	f7f6 f8f5 	bl	80001ec <__adddf3>
 800a002:	ec41 0b10 	vmov	d0, r0, r1
 800a006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a00a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a00e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a012:	4334      	orrs	r4, r6
 800a014:	d103      	bne.n	800a01e <__ieee754_atan2+0x5e>
 800a016:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a01a:	f000 be71 	b.w	800ad00 <atan>
 800a01e:	17bc      	asrs	r4, r7, #30
 800a020:	f004 0402 	and.w	r4, r4, #2
 800a024:	ea53 0909 	orrs.w	r9, r3, r9
 800a028:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a02c:	d107      	bne.n	800a03e <__ieee754_atan2+0x7e>
 800a02e:	2c02      	cmp	r4, #2
 800a030:	d073      	beq.n	800a11a <__ieee754_atan2+0x15a>
 800a032:	2c03      	cmp	r4, #3
 800a034:	d1e5      	bne.n	800a002 <__ieee754_atan2+0x42>
 800a036:	a13e      	add	r1, pc, #248	; (adr r1, 800a130 <__ieee754_atan2+0x170>)
 800a038:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a03c:	e7e1      	b.n	800a002 <__ieee754_atan2+0x42>
 800a03e:	ea52 0808 	orrs.w	r8, r2, r8
 800a042:	d106      	bne.n	800a052 <__ieee754_atan2+0x92>
 800a044:	f1bc 0f00 	cmp.w	ip, #0
 800a048:	da6b      	bge.n	800a122 <__ieee754_atan2+0x162>
 800a04a:	a13b      	add	r1, pc, #236	; (adr r1, 800a138 <__ieee754_atan2+0x178>)
 800a04c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a050:	e7d7      	b.n	800a002 <__ieee754_atan2+0x42>
 800a052:	4572      	cmp	r2, lr
 800a054:	d120      	bne.n	800a098 <__ieee754_atan2+0xd8>
 800a056:	4293      	cmp	r3, r2
 800a058:	d111      	bne.n	800a07e <__ieee754_atan2+0xbe>
 800a05a:	2c02      	cmp	r4, #2
 800a05c:	d007      	beq.n	800a06e <__ieee754_atan2+0xae>
 800a05e:	2c03      	cmp	r4, #3
 800a060:	d009      	beq.n	800a076 <__ieee754_atan2+0xb6>
 800a062:	2c01      	cmp	r4, #1
 800a064:	d155      	bne.n	800a112 <__ieee754_atan2+0x152>
 800a066:	a136      	add	r1, pc, #216	; (adr r1, 800a140 <__ieee754_atan2+0x180>)
 800a068:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a06c:	e7c9      	b.n	800a002 <__ieee754_atan2+0x42>
 800a06e:	a136      	add	r1, pc, #216	; (adr r1, 800a148 <__ieee754_atan2+0x188>)
 800a070:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a074:	e7c5      	b.n	800a002 <__ieee754_atan2+0x42>
 800a076:	a136      	add	r1, pc, #216	; (adr r1, 800a150 <__ieee754_atan2+0x190>)
 800a078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a07c:	e7c1      	b.n	800a002 <__ieee754_atan2+0x42>
 800a07e:	2c02      	cmp	r4, #2
 800a080:	d04b      	beq.n	800a11a <__ieee754_atan2+0x15a>
 800a082:	2c03      	cmp	r4, #3
 800a084:	d0d7      	beq.n	800a036 <__ieee754_atan2+0x76>
 800a086:	2c01      	cmp	r4, #1
 800a088:	f04f 0000 	mov.w	r0, #0
 800a08c:	d102      	bne.n	800a094 <__ieee754_atan2+0xd4>
 800a08e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a092:	e7b6      	b.n	800a002 <__ieee754_atan2+0x42>
 800a094:	2100      	movs	r1, #0
 800a096:	e7b4      	b.n	800a002 <__ieee754_atan2+0x42>
 800a098:	4573      	cmp	r3, lr
 800a09a:	d0d3      	beq.n	800a044 <__ieee754_atan2+0x84>
 800a09c:	1a9b      	subs	r3, r3, r2
 800a09e:	151b      	asrs	r3, r3, #20
 800a0a0:	2b3c      	cmp	r3, #60	; 0x3c
 800a0a2:	dc1e      	bgt.n	800a0e2 <__ieee754_atan2+0x122>
 800a0a4:	2f00      	cmp	r7, #0
 800a0a6:	da01      	bge.n	800a0ac <__ieee754_atan2+0xec>
 800a0a8:	333c      	adds	r3, #60	; 0x3c
 800a0aa:	db1e      	blt.n	800a0ea <__ieee754_atan2+0x12a>
 800a0ac:	4632      	mov	r2, r6
 800a0ae:	463b      	mov	r3, r7
 800a0b0:	f7f6 fb7c 	bl	80007ac <__aeabi_ddiv>
 800a0b4:	ec41 0b10 	vmov	d0, r0, r1
 800a0b8:	f000 ffc2 	bl	800b040 <fabs>
 800a0bc:	f000 fe20 	bl	800ad00 <atan>
 800a0c0:	ec51 0b10 	vmov	r0, r1, d0
 800a0c4:	2c01      	cmp	r4, #1
 800a0c6:	d013      	beq.n	800a0f0 <__ieee754_atan2+0x130>
 800a0c8:	2c02      	cmp	r4, #2
 800a0ca:	d015      	beq.n	800a0f8 <__ieee754_atan2+0x138>
 800a0cc:	2c00      	cmp	r4, #0
 800a0ce:	d098      	beq.n	800a002 <__ieee754_atan2+0x42>
 800a0d0:	a321      	add	r3, pc, #132	; (adr r3, 800a158 <__ieee754_atan2+0x198>)
 800a0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d6:	f7f6 f887 	bl	80001e8 <__aeabi_dsub>
 800a0da:	a321      	add	r3, pc, #132	; (adr r3, 800a160 <__ieee754_atan2+0x1a0>)
 800a0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e0:	e014      	b.n	800a10c <__ieee754_atan2+0x14c>
 800a0e2:	a121      	add	r1, pc, #132	; (adr r1, 800a168 <__ieee754_atan2+0x1a8>)
 800a0e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0e8:	e7ec      	b.n	800a0c4 <__ieee754_atan2+0x104>
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	e7e9      	b.n	800a0c4 <__ieee754_atan2+0x104>
 800a0f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	e784      	b.n	800a002 <__ieee754_atan2+0x42>
 800a0f8:	a317      	add	r3, pc, #92	; (adr r3, 800a158 <__ieee754_atan2+0x198>)
 800a0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fe:	f7f6 f873 	bl	80001e8 <__aeabi_dsub>
 800a102:	4602      	mov	r2, r0
 800a104:	460b      	mov	r3, r1
 800a106:	a116      	add	r1, pc, #88	; (adr r1, 800a160 <__ieee754_atan2+0x1a0>)
 800a108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a10c:	f7f6 f86c 	bl	80001e8 <__aeabi_dsub>
 800a110:	e777      	b.n	800a002 <__ieee754_atan2+0x42>
 800a112:	a117      	add	r1, pc, #92	; (adr r1, 800a170 <__ieee754_atan2+0x1b0>)
 800a114:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a118:	e773      	b.n	800a002 <__ieee754_atan2+0x42>
 800a11a:	a111      	add	r1, pc, #68	; (adr r1, 800a160 <__ieee754_atan2+0x1a0>)
 800a11c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a120:	e76f      	b.n	800a002 <__ieee754_atan2+0x42>
 800a122:	a111      	add	r1, pc, #68	; (adr r1, 800a168 <__ieee754_atan2+0x1a8>)
 800a124:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a128:	e76b      	b.n	800a002 <__ieee754_atan2+0x42>
 800a12a:	bf00      	nop
 800a12c:	f3af 8000 	nop.w
 800a130:	54442d18 	.word	0x54442d18
 800a134:	c00921fb 	.word	0xc00921fb
 800a138:	54442d18 	.word	0x54442d18
 800a13c:	bff921fb 	.word	0xbff921fb
 800a140:	54442d18 	.word	0x54442d18
 800a144:	bfe921fb 	.word	0xbfe921fb
 800a148:	7f3321d2 	.word	0x7f3321d2
 800a14c:	4002d97c 	.word	0x4002d97c
 800a150:	7f3321d2 	.word	0x7f3321d2
 800a154:	c002d97c 	.word	0xc002d97c
 800a158:	33145c07 	.word	0x33145c07
 800a15c:	3ca1a626 	.word	0x3ca1a626
 800a160:	54442d18 	.word	0x54442d18
 800a164:	400921fb 	.word	0x400921fb
 800a168:	54442d18 	.word	0x54442d18
 800a16c:	3ff921fb 	.word	0x3ff921fb
 800a170:	54442d18 	.word	0x54442d18
 800a174:	3fe921fb 	.word	0x3fe921fb
 800a178:	7ff00000 	.word	0x7ff00000
 800a17c:	00000000 	.word	0x00000000

0800a180 <__ieee754_pow>:
 800a180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a184:	b091      	sub	sp, #68	; 0x44
 800a186:	ed8d 1b00 	vstr	d1, [sp]
 800a18a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a18e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a192:	ea58 0302 	orrs.w	r3, r8, r2
 800a196:	ec57 6b10 	vmov	r6, r7, d0
 800a19a:	f000 84be 	beq.w	800ab1a <__ieee754_pow+0x99a>
 800a19e:	4b7a      	ldr	r3, [pc, #488]	; (800a388 <__ieee754_pow+0x208>)
 800a1a0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a1a4:	429c      	cmp	r4, r3
 800a1a6:	463d      	mov	r5, r7
 800a1a8:	ee10 aa10 	vmov	sl, s0
 800a1ac:	dc09      	bgt.n	800a1c2 <__ieee754_pow+0x42>
 800a1ae:	d103      	bne.n	800a1b8 <__ieee754_pow+0x38>
 800a1b0:	b93e      	cbnz	r6, 800a1c2 <__ieee754_pow+0x42>
 800a1b2:	45a0      	cmp	r8, r4
 800a1b4:	dc0d      	bgt.n	800a1d2 <__ieee754_pow+0x52>
 800a1b6:	e001      	b.n	800a1bc <__ieee754_pow+0x3c>
 800a1b8:	4598      	cmp	r8, r3
 800a1ba:	dc02      	bgt.n	800a1c2 <__ieee754_pow+0x42>
 800a1bc:	4598      	cmp	r8, r3
 800a1be:	d10e      	bne.n	800a1de <__ieee754_pow+0x5e>
 800a1c0:	b16a      	cbz	r2, 800a1de <__ieee754_pow+0x5e>
 800a1c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a1c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a1ca:	ea54 030a 	orrs.w	r3, r4, sl
 800a1ce:	f000 84a4 	beq.w	800ab1a <__ieee754_pow+0x99a>
 800a1d2:	486e      	ldr	r0, [pc, #440]	; (800a38c <__ieee754_pow+0x20c>)
 800a1d4:	b011      	add	sp, #68	; 0x44
 800a1d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1da:	f000 bf45 	b.w	800b068 <nan>
 800a1de:	2d00      	cmp	r5, #0
 800a1e0:	da53      	bge.n	800a28a <__ieee754_pow+0x10a>
 800a1e2:	4b6b      	ldr	r3, [pc, #428]	; (800a390 <__ieee754_pow+0x210>)
 800a1e4:	4598      	cmp	r8, r3
 800a1e6:	dc4d      	bgt.n	800a284 <__ieee754_pow+0x104>
 800a1e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a1ec:	4598      	cmp	r8, r3
 800a1ee:	dd4c      	ble.n	800a28a <__ieee754_pow+0x10a>
 800a1f0:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a1f4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a1f8:	2b14      	cmp	r3, #20
 800a1fa:	dd26      	ble.n	800a24a <__ieee754_pow+0xca>
 800a1fc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a200:	fa22 f103 	lsr.w	r1, r2, r3
 800a204:	fa01 f303 	lsl.w	r3, r1, r3
 800a208:	4293      	cmp	r3, r2
 800a20a:	d13e      	bne.n	800a28a <__ieee754_pow+0x10a>
 800a20c:	f001 0101 	and.w	r1, r1, #1
 800a210:	f1c1 0b02 	rsb	fp, r1, #2
 800a214:	2a00      	cmp	r2, #0
 800a216:	d15b      	bne.n	800a2d0 <__ieee754_pow+0x150>
 800a218:	4b5b      	ldr	r3, [pc, #364]	; (800a388 <__ieee754_pow+0x208>)
 800a21a:	4598      	cmp	r8, r3
 800a21c:	d124      	bne.n	800a268 <__ieee754_pow+0xe8>
 800a21e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a222:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a226:	ea53 030a 	orrs.w	r3, r3, sl
 800a22a:	f000 8476 	beq.w	800ab1a <__ieee754_pow+0x99a>
 800a22e:	4b59      	ldr	r3, [pc, #356]	; (800a394 <__ieee754_pow+0x214>)
 800a230:	429c      	cmp	r4, r3
 800a232:	dd2d      	ble.n	800a290 <__ieee754_pow+0x110>
 800a234:	f1b9 0f00 	cmp.w	r9, #0
 800a238:	f280 8473 	bge.w	800ab22 <__ieee754_pow+0x9a2>
 800a23c:	2000      	movs	r0, #0
 800a23e:	2100      	movs	r1, #0
 800a240:	ec41 0b10 	vmov	d0, r0, r1
 800a244:	b011      	add	sp, #68	; 0x44
 800a246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24a:	2a00      	cmp	r2, #0
 800a24c:	d13e      	bne.n	800a2cc <__ieee754_pow+0x14c>
 800a24e:	f1c3 0314 	rsb	r3, r3, #20
 800a252:	fa48 f103 	asr.w	r1, r8, r3
 800a256:	fa01 f303 	lsl.w	r3, r1, r3
 800a25a:	4543      	cmp	r3, r8
 800a25c:	f040 8469 	bne.w	800ab32 <__ieee754_pow+0x9b2>
 800a260:	f001 0101 	and.w	r1, r1, #1
 800a264:	f1c1 0b02 	rsb	fp, r1, #2
 800a268:	4b4b      	ldr	r3, [pc, #300]	; (800a398 <__ieee754_pow+0x218>)
 800a26a:	4598      	cmp	r8, r3
 800a26c:	d118      	bne.n	800a2a0 <__ieee754_pow+0x120>
 800a26e:	f1b9 0f00 	cmp.w	r9, #0
 800a272:	f280 845a 	bge.w	800ab2a <__ieee754_pow+0x9aa>
 800a276:	4948      	ldr	r1, [pc, #288]	; (800a398 <__ieee754_pow+0x218>)
 800a278:	4632      	mov	r2, r6
 800a27a:	463b      	mov	r3, r7
 800a27c:	2000      	movs	r0, #0
 800a27e:	f7f6 fa95 	bl	80007ac <__aeabi_ddiv>
 800a282:	e7dd      	b.n	800a240 <__ieee754_pow+0xc0>
 800a284:	f04f 0b02 	mov.w	fp, #2
 800a288:	e7c4      	b.n	800a214 <__ieee754_pow+0x94>
 800a28a:	f04f 0b00 	mov.w	fp, #0
 800a28e:	e7c1      	b.n	800a214 <__ieee754_pow+0x94>
 800a290:	f1b9 0f00 	cmp.w	r9, #0
 800a294:	dad2      	bge.n	800a23c <__ieee754_pow+0xbc>
 800a296:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a29a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a29e:	e7cf      	b.n	800a240 <__ieee754_pow+0xc0>
 800a2a0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a2a4:	d106      	bne.n	800a2b4 <__ieee754_pow+0x134>
 800a2a6:	4632      	mov	r2, r6
 800a2a8:	463b      	mov	r3, r7
 800a2aa:	4610      	mov	r0, r2
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	f7f6 f953 	bl	8000558 <__aeabi_dmul>
 800a2b2:	e7c5      	b.n	800a240 <__ieee754_pow+0xc0>
 800a2b4:	4b39      	ldr	r3, [pc, #228]	; (800a39c <__ieee754_pow+0x21c>)
 800a2b6:	4599      	cmp	r9, r3
 800a2b8:	d10a      	bne.n	800a2d0 <__ieee754_pow+0x150>
 800a2ba:	2d00      	cmp	r5, #0
 800a2bc:	db08      	blt.n	800a2d0 <__ieee754_pow+0x150>
 800a2be:	ec47 6b10 	vmov	d0, r6, r7
 800a2c2:	b011      	add	sp, #68	; 0x44
 800a2c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c8:	f000 bc68 	b.w	800ab9c <__ieee754_sqrt>
 800a2cc:	f04f 0b00 	mov.w	fp, #0
 800a2d0:	ec47 6b10 	vmov	d0, r6, r7
 800a2d4:	f000 feb4 	bl	800b040 <fabs>
 800a2d8:	ec51 0b10 	vmov	r0, r1, d0
 800a2dc:	f1ba 0f00 	cmp.w	sl, #0
 800a2e0:	d127      	bne.n	800a332 <__ieee754_pow+0x1b2>
 800a2e2:	b124      	cbz	r4, 800a2ee <__ieee754_pow+0x16e>
 800a2e4:	4b2c      	ldr	r3, [pc, #176]	; (800a398 <__ieee754_pow+0x218>)
 800a2e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d121      	bne.n	800a332 <__ieee754_pow+0x1b2>
 800a2ee:	f1b9 0f00 	cmp.w	r9, #0
 800a2f2:	da05      	bge.n	800a300 <__ieee754_pow+0x180>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	4927      	ldr	r1, [pc, #156]	; (800a398 <__ieee754_pow+0x218>)
 800a2fc:	f7f6 fa56 	bl	80007ac <__aeabi_ddiv>
 800a300:	2d00      	cmp	r5, #0
 800a302:	da9d      	bge.n	800a240 <__ieee754_pow+0xc0>
 800a304:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a308:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a30c:	ea54 030b 	orrs.w	r3, r4, fp
 800a310:	d108      	bne.n	800a324 <__ieee754_pow+0x1a4>
 800a312:	4602      	mov	r2, r0
 800a314:	460b      	mov	r3, r1
 800a316:	4610      	mov	r0, r2
 800a318:	4619      	mov	r1, r3
 800a31a:	f7f5 ff65 	bl	80001e8 <__aeabi_dsub>
 800a31e:	4602      	mov	r2, r0
 800a320:	460b      	mov	r3, r1
 800a322:	e7ac      	b.n	800a27e <__ieee754_pow+0xfe>
 800a324:	f1bb 0f01 	cmp.w	fp, #1
 800a328:	d18a      	bne.n	800a240 <__ieee754_pow+0xc0>
 800a32a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a32e:	4619      	mov	r1, r3
 800a330:	e786      	b.n	800a240 <__ieee754_pow+0xc0>
 800a332:	0fed      	lsrs	r5, r5, #31
 800a334:	1e6b      	subs	r3, r5, #1
 800a336:	930d      	str	r3, [sp, #52]	; 0x34
 800a338:	ea5b 0303 	orrs.w	r3, fp, r3
 800a33c:	d102      	bne.n	800a344 <__ieee754_pow+0x1c4>
 800a33e:	4632      	mov	r2, r6
 800a340:	463b      	mov	r3, r7
 800a342:	e7e8      	b.n	800a316 <__ieee754_pow+0x196>
 800a344:	4b16      	ldr	r3, [pc, #88]	; (800a3a0 <__ieee754_pow+0x220>)
 800a346:	4598      	cmp	r8, r3
 800a348:	f340 80fe 	ble.w	800a548 <__ieee754_pow+0x3c8>
 800a34c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a350:	4598      	cmp	r8, r3
 800a352:	dd0a      	ble.n	800a36a <__ieee754_pow+0x1ea>
 800a354:	4b0f      	ldr	r3, [pc, #60]	; (800a394 <__ieee754_pow+0x214>)
 800a356:	429c      	cmp	r4, r3
 800a358:	dc0d      	bgt.n	800a376 <__ieee754_pow+0x1f6>
 800a35a:	f1b9 0f00 	cmp.w	r9, #0
 800a35e:	f6bf af6d 	bge.w	800a23c <__ieee754_pow+0xbc>
 800a362:	a307      	add	r3, pc, #28	; (adr r3, 800a380 <__ieee754_pow+0x200>)
 800a364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a368:	e79f      	b.n	800a2aa <__ieee754_pow+0x12a>
 800a36a:	4b0e      	ldr	r3, [pc, #56]	; (800a3a4 <__ieee754_pow+0x224>)
 800a36c:	429c      	cmp	r4, r3
 800a36e:	ddf4      	ble.n	800a35a <__ieee754_pow+0x1da>
 800a370:	4b09      	ldr	r3, [pc, #36]	; (800a398 <__ieee754_pow+0x218>)
 800a372:	429c      	cmp	r4, r3
 800a374:	dd18      	ble.n	800a3a8 <__ieee754_pow+0x228>
 800a376:	f1b9 0f00 	cmp.w	r9, #0
 800a37a:	dcf2      	bgt.n	800a362 <__ieee754_pow+0x1e2>
 800a37c:	e75e      	b.n	800a23c <__ieee754_pow+0xbc>
 800a37e:	bf00      	nop
 800a380:	8800759c 	.word	0x8800759c
 800a384:	7e37e43c 	.word	0x7e37e43c
 800a388:	7ff00000 	.word	0x7ff00000
 800a38c:	0800b709 	.word	0x0800b709
 800a390:	433fffff 	.word	0x433fffff
 800a394:	3fefffff 	.word	0x3fefffff
 800a398:	3ff00000 	.word	0x3ff00000
 800a39c:	3fe00000 	.word	0x3fe00000
 800a3a0:	41e00000 	.word	0x41e00000
 800a3a4:	3feffffe 	.word	0x3feffffe
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	4b63      	ldr	r3, [pc, #396]	; (800a538 <__ieee754_pow+0x3b8>)
 800a3ac:	f7f5 ff1c 	bl	80001e8 <__aeabi_dsub>
 800a3b0:	a355      	add	r3, pc, #340	; (adr r3, 800a508 <__ieee754_pow+0x388>)
 800a3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	460d      	mov	r5, r1
 800a3ba:	f7f6 f8cd 	bl	8000558 <__aeabi_dmul>
 800a3be:	a354      	add	r3, pc, #336	; (adr r3, 800a510 <__ieee754_pow+0x390>)
 800a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c4:	4606      	mov	r6, r0
 800a3c6:	460f      	mov	r7, r1
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	f7f6 f8c4 	bl	8000558 <__aeabi_dmul>
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3d6:	4b59      	ldr	r3, [pc, #356]	; (800a53c <__ieee754_pow+0x3bc>)
 800a3d8:	4620      	mov	r0, r4
 800a3da:	4629      	mov	r1, r5
 800a3dc:	f7f6 f8bc 	bl	8000558 <__aeabi_dmul>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	a14c      	add	r1, pc, #304	; (adr r1, 800a518 <__ieee754_pow+0x398>)
 800a3e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3ea:	f7f5 fefd 	bl	80001e8 <__aeabi_dsub>
 800a3ee:	4622      	mov	r2, r4
 800a3f0:	462b      	mov	r3, r5
 800a3f2:	f7f6 f8b1 	bl	8000558 <__aeabi_dmul>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	4950      	ldr	r1, [pc, #320]	; (800a540 <__ieee754_pow+0x3c0>)
 800a3fe:	f7f5 fef3 	bl	80001e8 <__aeabi_dsub>
 800a402:	4622      	mov	r2, r4
 800a404:	462b      	mov	r3, r5
 800a406:	4680      	mov	r8, r0
 800a408:	4689      	mov	r9, r1
 800a40a:	4620      	mov	r0, r4
 800a40c:	4629      	mov	r1, r5
 800a40e:	f7f6 f8a3 	bl	8000558 <__aeabi_dmul>
 800a412:	4602      	mov	r2, r0
 800a414:	460b      	mov	r3, r1
 800a416:	4640      	mov	r0, r8
 800a418:	4649      	mov	r1, r9
 800a41a:	f7f6 f89d 	bl	8000558 <__aeabi_dmul>
 800a41e:	a340      	add	r3, pc, #256	; (adr r3, 800a520 <__ieee754_pow+0x3a0>)
 800a420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a424:	f7f6 f898 	bl	8000558 <__aeabi_dmul>
 800a428:	4602      	mov	r2, r0
 800a42a:	460b      	mov	r3, r1
 800a42c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a430:	f7f5 feda 	bl	80001e8 <__aeabi_dsub>
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	4604      	mov	r4, r0
 800a43a:	460d      	mov	r5, r1
 800a43c:	4630      	mov	r0, r6
 800a43e:	4639      	mov	r1, r7
 800a440:	f7f5 fed4 	bl	80001ec <__adddf3>
 800a444:	2000      	movs	r0, #0
 800a446:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a44a:	4632      	mov	r2, r6
 800a44c:	463b      	mov	r3, r7
 800a44e:	f7f5 fecb 	bl	80001e8 <__aeabi_dsub>
 800a452:	4602      	mov	r2, r0
 800a454:	460b      	mov	r3, r1
 800a456:	4620      	mov	r0, r4
 800a458:	4629      	mov	r1, r5
 800a45a:	f7f5 fec5 	bl	80001e8 <__aeabi_dsub>
 800a45e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a460:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800a464:	4313      	orrs	r3, r2
 800a466:	4606      	mov	r6, r0
 800a468:	460f      	mov	r7, r1
 800a46a:	f040 81eb 	bne.w	800a844 <__ieee754_pow+0x6c4>
 800a46e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a528 <__ieee754_pow+0x3a8>
 800a472:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a476:	2400      	movs	r4, #0
 800a478:	4622      	mov	r2, r4
 800a47a:	462b      	mov	r3, r5
 800a47c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a480:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a484:	f7f5 feb0 	bl	80001e8 <__aeabi_dsub>
 800a488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a48c:	f7f6 f864 	bl	8000558 <__aeabi_dmul>
 800a490:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a494:	4680      	mov	r8, r0
 800a496:	4689      	mov	r9, r1
 800a498:	4630      	mov	r0, r6
 800a49a:	4639      	mov	r1, r7
 800a49c:	f7f6 f85c 	bl	8000558 <__aeabi_dmul>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	4640      	mov	r0, r8
 800a4a6:	4649      	mov	r1, r9
 800a4a8:	f7f5 fea0 	bl	80001ec <__adddf3>
 800a4ac:	4622      	mov	r2, r4
 800a4ae:	462b      	mov	r3, r5
 800a4b0:	4680      	mov	r8, r0
 800a4b2:	4689      	mov	r9, r1
 800a4b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4b8:	f7f6 f84e 	bl	8000558 <__aeabi_dmul>
 800a4bc:	460b      	mov	r3, r1
 800a4be:	4604      	mov	r4, r0
 800a4c0:	460d      	mov	r5, r1
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	4649      	mov	r1, r9
 800a4c6:	4640      	mov	r0, r8
 800a4c8:	e9cd 4500 	strd	r4, r5, [sp]
 800a4cc:	f7f5 fe8e 	bl	80001ec <__adddf3>
 800a4d0:	4b1c      	ldr	r3, [pc, #112]	; (800a544 <__ieee754_pow+0x3c4>)
 800a4d2:	4299      	cmp	r1, r3
 800a4d4:	4606      	mov	r6, r0
 800a4d6:	460f      	mov	r7, r1
 800a4d8:	468b      	mov	fp, r1
 800a4da:	f340 82f7 	ble.w	800aacc <__ieee754_pow+0x94c>
 800a4de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a4e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a4e6:	4303      	orrs	r3, r0
 800a4e8:	f000 81ea 	beq.w	800a8c0 <__ieee754_pow+0x740>
 800a4ec:	a310      	add	r3, pc, #64	; (adr r3, 800a530 <__ieee754_pow+0x3b0>)
 800a4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4f6:	f7f6 f82f 	bl	8000558 <__aeabi_dmul>
 800a4fa:	a30d      	add	r3, pc, #52	; (adr r3, 800a530 <__ieee754_pow+0x3b0>)
 800a4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a500:	e6d5      	b.n	800a2ae <__ieee754_pow+0x12e>
 800a502:	bf00      	nop
 800a504:	f3af 8000 	nop.w
 800a508:	60000000 	.word	0x60000000
 800a50c:	3ff71547 	.word	0x3ff71547
 800a510:	f85ddf44 	.word	0xf85ddf44
 800a514:	3e54ae0b 	.word	0x3e54ae0b
 800a518:	55555555 	.word	0x55555555
 800a51c:	3fd55555 	.word	0x3fd55555
 800a520:	652b82fe 	.word	0x652b82fe
 800a524:	3ff71547 	.word	0x3ff71547
 800a528:	00000000 	.word	0x00000000
 800a52c:	bff00000 	.word	0xbff00000
 800a530:	8800759c 	.word	0x8800759c
 800a534:	7e37e43c 	.word	0x7e37e43c
 800a538:	3ff00000 	.word	0x3ff00000
 800a53c:	3fd00000 	.word	0x3fd00000
 800a540:	3fe00000 	.word	0x3fe00000
 800a544:	408fffff 	.word	0x408fffff
 800a548:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a54c:	f04f 0200 	mov.w	r2, #0
 800a550:	da05      	bge.n	800a55e <__ieee754_pow+0x3de>
 800a552:	4bd3      	ldr	r3, [pc, #844]	; (800a8a0 <__ieee754_pow+0x720>)
 800a554:	f7f6 f800 	bl	8000558 <__aeabi_dmul>
 800a558:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a55c:	460c      	mov	r4, r1
 800a55e:	1523      	asrs	r3, r4, #20
 800a560:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a564:	4413      	add	r3, r2
 800a566:	9309      	str	r3, [sp, #36]	; 0x24
 800a568:	4bce      	ldr	r3, [pc, #824]	; (800a8a4 <__ieee754_pow+0x724>)
 800a56a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a56e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a572:	429c      	cmp	r4, r3
 800a574:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a578:	dd08      	ble.n	800a58c <__ieee754_pow+0x40c>
 800a57a:	4bcb      	ldr	r3, [pc, #812]	; (800a8a8 <__ieee754_pow+0x728>)
 800a57c:	429c      	cmp	r4, r3
 800a57e:	f340 815e 	ble.w	800a83e <__ieee754_pow+0x6be>
 800a582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a584:	3301      	adds	r3, #1
 800a586:	9309      	str	r3, [sp, #36]	; 0x24
 800a588:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a58c:	f04f 0a00 	mov.w	sl, #0
 800a590:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a594:	930c      	str	r3, [sp, #48]	; 0x30
 800a596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a598:	4bc4      	ldr	r3, [pc, #784]	; (800a8ac <__ieee754_pow+0x72c>)
 800a59a:	4413      	add	r3, r2
 800a59c:	ed93 7b00 	vldr	d7, [r3]
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	ec53 2b17 	vmov	r2, r3, d7
 800a5a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a5aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a5ae:	f7f5 fe1b 	bl	80001e8 <__aeabi_dsub>
 800a5b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	460f      	mov	r7, r1
 800a5ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5be:	f7f5 fe15 	bl	80001ec <__adddf3>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	49b9      	ldr	r1, [pc, #740]	; (800a8b0 <__ieee754_pow+0x730>)
 800a5ca:	f7f6 f8ef 	bl	80007ac <__aeabi_ddiv>
 800a5ce:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	4630      	mov	r0, r6
 800a5d8:	4639      	mov	r1, r7
 800a5da:	f7f5 ffbd 	bl	8000558 <__aeabi_dmul>
 800a5de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5e2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a5e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	9302      	str	r3, [sp, #8]
 800a5ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a5f2:	106d      	asrs	r5, r5, #1
 800a5f4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a5f8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a602:	4640      	mov	r0, r8
 800a604:	4649      	mov	r1, r9
 800a606:	4614      	mov	r4, r2
 800a608:	461d      	mov	r5, r3
 800a60a:	f7f5 ffa5 	bl	8000558 <__aeabi_dmul>
 800a60e:	4602      	mov	r2, r0
 800a610:	460b      	mov	r3, r1
 800a612:	4630      	mov	r0, r6
 800a614:	4639      	mov	r1, r7
 800a616:	f7f5 fde7 	bl	80001e8 <__aeabi_dsub>
 800a61a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a61e:	4606      	mov	r6, r0
 800a620:	460f      	mov	r7, r1
 800a622:	4620      	mov	r0, r4
 800a624:	4629      	mov	r1, r5
 800a626:	f7f5 fddf 	bl	80001e8 <__aeabi_dsub>
 800a62a:	4602      	mov	r2, r0
 800a62c:	460b      	mov	r3, r1
 800a62e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a632:	f7f5 fdd9 	bl	80001e8 <__aeabi_dsub>
 800a636:	4642      	mov	r2, r8
 800a638:	464b      	mov	r3, r9
 800a63a:	f7f5 ff8d 	bl	8000558 <__aeabi_dmul>
 800a63e:	4602      	mov	r2, r0
 800a640:	460b      	mov	r3, r1
 800a642:	4630      	mov	r0, r6
 800a644:	4639      	mov	r1, r7
 800a646:	f7f5 fdcf 	bl	80001e8 <__aeabi_dsub>
 800a64a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a64e:	f7f5 ff83 	bl	8000558 <__aeabi_dmul>
 800a652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a656:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a65a:	4610      	mov	r0, r2
 800a65c:	4619      	mov	r1, r3
 800a65e:	f7f5 ff7b 	bl	8000558 <__aeabi_dmul>
 800a662:	a37b      	add	r3, pc, #492	; (adr r3, 800a850 <__ieee754_pow+0x6d0>)
 800a664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a668:	4604      	mov	r4, r0
 800a66a:	460d      	mov	r5, r1
 800a66c:	f7f5 ff74 	bl	8000558 <__aeabi_dmul>
 800a670:	a379      	add	r3, pc, #484	; (adr r3, 800a858 <__ieee754_pow+0x6d8>)
 800a672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a676:	f7f5 fdb9 	bl	80001ec <__adddf3>
 800a67a:	4622      	mov	r2, r4
 800a67c:	462b      	mov	r3, r5
 800a67e:	f7f5 ff6b 	bl	8000558 <__aeabi_dmul>
 800a682:	a377      	add	r3, pc, #476	; (adr r3, 800a860 <__ieee754_pow+0x6e0>)
 800a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a688:	f7f5 fdb0 	bl	80001ec <__adddf3>
 800a68c:	4622      	mov	r2, r4
 800a68e:	462b      	mov	r3, r5
 800a690:	f7f5 ff62 	bl	8000558 <__aeabi_dmul>
 800a694:	a374      	add	r3, pc, #464	; (adr r3, 800a868 <__ieee754_pow+0x6e8>)
 800a696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69a:	f7f5 fda7 	bl	80001ec <__adddf3>
 800a69e:	4622      	mov	r2, r4
 800a6a0:	462b      	mov	r3, r5
 800a6a2:	f7f5 ff59 	bl	8000558 <__aeabi_dmul>
 800a6a6:	a372      	add	r3, pc, #456	; (adr r3, 800a870 <__ieee754_pow+0x6f0>)
 800a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ac:	f7f5 fd9e 	bl	80001ec <__adddf3>
 800a6b0:	4622      	mov	r2, r4
 800a6b2:	462b      	mov	r3, r5
 800a6b4:	f7f5 ff50 	bl	8000558 <__aeabi_dmul>
 800a6b8:	a36f      	add	r3, pc, #444	; (adr r3, 800a878 <__ieee754_pow+0x6f8>)
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	f7f5 fd95 	bl	80001ec <__adddf3>
 800a6c2:	4622      	mov	r2, r4
 800a6c4:	4606      	mov	r6, r0
 800a6c6:	460f      	mov	r7, r1
 800a6c8:	462b      	mov	r3, r5
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	4629      	mov	r1, r5
 800a6ce:	f7f5 ff43 	bl	8000558 <__aeabi_dmul>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	4639      	mov	r1, r7
 800a6da:	f7f5 ff3d 	bl	8000558 <__aeabi_dmul>
 800a6de:	4642      	mov	r2, r8
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	460d      	mov	r5, r1
 800a6e4:	464b      	mov	r3, r9
 800a6e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6ea:	f7f5 fd7f 	bl	80001ec <__adddf3>
 800a6ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a6f2:	f7f5 ff31 	bl	8000558 <__aeabi_dmul>
 800a6f6:	4622      	mov	r2, r4
 800a6f8:	462b      	mov	r3, r5
 800a6fa:	f7f5 fd77 	bl	80001ec <__adddf3>
 800a6fe:	4642      	mov	r2, r8
 800a700:	4606      	mov	r6, r0
 800a702:	460f      	mov	r7, r1
 800a704:	464b      	mov	r3, r9
 800a706:	4640      	mov	r0, r8
 800a708:	4649      	mov	r1, r9
 800a70a:	f7f5 ff25 	bl	8000558 <__aeabi_dmul>
 800a70e:	2200      	movs	r2, #0
 800a710:	4b68      	ldr	r3, [pc, #416]	; (800a8b4 <__ieee754_pow+0x734>)
 800a712:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a716:	f7f5 fd69 	bl	80001ec <__adddf3>
 800a71a:	4632      	mov	r2, r6
 800a71c:	463b      	mov	r3, r7
 800a71e:	f7f5 fd65 	bl	80001ec <__adddf3>
 800a722:	9802      	ldr	r0, [sp, #8]
 800a724:	460d      	mov	r5, r1
 800a726:	4604      	mov	r4, r0
 800a728:	4602      	mov	r2, r0
 800a72a:	460b      	mov	r3, r1
 800a72c:	4640      	mov	r0, r8
 800a72e:	4649      	mov	r1, r9
 800a730:	f7f5 ff12 	bl	8000558 <__aeabi_dmul>
 800a734:	2200      	movs	r2, #0
 800a736:	4680      	mov	r8, r0
 800a738:	4689      	mov	r9, r1
 800a73a:	4b5e      	ldr	r3, [pc, #376]	; (800a8b4 <__ieee754_pow+0x734>)
 800a73c:	4620      	mov	r0, r4
 800a73e:	4629      	mov	r1, r5
 800a740:	f7f5 fd52 	bl	80001e8 <__aeabi_dsub>
 800a744:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a748:	f7f5 fd4e 	bl	80001e8 <__aeabi_dsub>
 800a74c:	4602      	mov	r2, r0
 800a74e:	460b      	mov	r3, r1
 800a750:	4630      	mov	r0, r6
 800a752:	4639      	mov	r1, r7
 800a754:	f7f5 fd48 	bl	80001e8 <__aeabi_dsub>
 800a758:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a75c:	f7f5 fefc 	bl	8000558 <__aeabi_dmul>
 800a760:	4622      	mov	r2, r4
 800a762:	4606      	mov	r6, r0
 800a764:	460f      	mov	r7, r1
 800a766:	462b      	mov	r3, r5
 800a768:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a76c:	f7f5 fef4 	bl	8000558 <__aeabi_dmul>
 800a770:	4602      	mov	r2, r0
 800a772:	460b      	mov	r3, r1
 800a774:	4630      	mov	r0, r6
 800a776:	4639      	mov	r1, r7
 800a778:	f7f5 fd38 	bl	80001ec <__adddf3>
 800a77c:	4606      	mov	r6, r0
 800a77e:	460f      	mov	r7, r1
 800a780:	4602      	mov	r2, r0
 800a782:	460b      	mov	r3, r1
 800a784:	4640      	mov	r0, r8
 800a786:	4649      	mov	r1, r9
 800a788:	f7f5 fd30 	bl	80001ec <__adddf3>
 800a78c:	9802      	ldr	r0, [sp, #8]
 800a78e:	a33c      	add	r3, pc, #240	; (adr r3, 800a880 <__ieee754_pow+0x700>)
 800a790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a794:	4604      	mov	r4, r0
 800a796:	460d      	mov	r5, r1
 800a798:	f7f5 fede 	bl	8000558 <__aeabi_dmul>
 800a79c:	4642      	mov	r2, r8
 800a79e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a7a2:	464b      	mov	r3, r9
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	f7f5 fd1e 	bl	80001e8 <__aeabi_dsub>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	4639      	mov	r1, r7
 800a7b4:	f7f5 fd18 	bl	80001e8 <__aeabi_dsub>
 800a7b8:	a333      	add	r3, pc, #204	; (adr r3, 800a888 <__ieee754_pow+0x708>)
 800a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7be:	f7f5 fecb 	bl	8000558 <__aeabi_dmul>
 800a7c2:	a333      	add	r3, pc, #204	; (adr r3, 800a890 <__ieee754_pow+0x710>)
 800a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c8:	4606      	mov	r6, r0
 800a7ca:	460f      	mov	r7, r1
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	4629      	mov	r1, r5
 800a7d0:	f7f5 fec2 	bl	8000558 <__aeabi_dmul>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4630      	mov	r0, r6
 800a7da:	4639      	mov	r1, r7
 800a7dc:	f7f5 fd06 	bl	80001ec <__adddf3>
 800a7e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7e2:	4b35      	ldr	r3, [pc, #212]	; (800a8b8 <__ieee754_pow+0x738>)
 800a7e4:	4413      	add	r3, r2
 800a7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ea:	f7f5 fcff 	bl	80001ec <__adddf3>
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7f2:	460d      	mov	r5, r1
 800a7f4:	f7f5 fe46 	bl	8000484 <__aeabi_i2d>
 800a7f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7fa:	4b30      	ldr	r3, [pc, #192]	; (800a8bc <__ieee754_pow+0x73c>)
 800a7fc:	4413      	add	r3, r2
 800a7fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a802:	4606      	mov	r6, r0
 800a804:	460f      	mov	r7, r1
 800a806:	4622      	mov	r2, r4
 800a808:	462b      	mov	r3, r5
 800a80a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a80e:	f7f5 fced 	bl	80001ec <__adddf3>
 800a812:	4642      	mov	r2, r8
 800a814:	464b      	mov	r3, r9
 800a816:	f7f5 fce9 	bl	80001ec <__adddf3>
 800a81a:	4632      	mov	r2, r6
 800a81c:	463b      	mov	r3, r7
 800a81e:	f7f5 fce5 	bl	80001ec <__adddf3>
 800a822:	9802      	ldr	r0, [sp, #8]
 800a824:	4632      	mov	r2, r6
 800a826:	463b      	mov	r3, r7
 800a828:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a82c:	f7f5 fcdc 	bl	80001e8 <__aeabi_dsub>
 800a830:	4642      	mov	r2, r8
 800a832:	464b      	mov	r3, r9
 800a834:	f7f5 fcd8 	bl	80001e8 <__aeabi_dsub>
 800a838:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a83c:	e607      	b.n	800a44e <__ieee754_pow+0x2ce>
 800a83e:	f04f 0a01 	mov.w	sl, #1
 800a842:	e6a5      	b.n	800a590 <__ieee754_pow+0x410>
 800a844:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a898 <__ieee754_pow+0x718>
 800a848:	e613      	b.n	800a472 <__ieee754_pow+0x2f2>
 800a84a:	bf00      	nop
 800a84c:	f3af 8000 	nop.w
 800a850:	4a454eef 	.word	0x4a454eef
 800a854:	3fca7e28 	.word	0x3fca7e28
 800a858:	93c9db65 	.word	0x93c9db65
 800a85c:	3fcd864a 	.word	0x3fcd864a
 800a860:	a91d4101 	.word	0xa91d4101
 800a864:	3fd17460 	.word	0x3fd17460
 800a868:	518f264d 	.word	0x518f264d
 800a86c:	3fd55555 	.word	0x3fd55555
 800a870:	db6fabff 	.word	0xdb6fabff
 800a874:	3fdb6db6 	.word	0x3fdb6db6
 800a878:	33333303 	.word	0x33333303
 800a87c:	3fe33333 	.word	0x3fe33333
 800a880:	e0000000 	.word	0xe0000000
 800a884:	3feec709 	.word	0x3feec709
 800a888:	dc3a03fd 	.word	0xdc3a03fd
 800a88c:	3feec709 	.word	0x3feec709
 800a890:	145b01f5 	.word	0x145b01f5
 800a894:	be3e2fe0 	.word	0xbe3e2fe0
 800a898:	00000000 	.word	0x00000000
 800a89c:	3ff00000 	.word	0x3ff00000
 800a8a0:	43400000 	.word	0x43400000
 800a8a4:	0003988e 	.word	0x0003988e
 800a8a8:	000bb679 	.word	0x000bb679
 800a8ac:	0800b830 	.word	0x0800b830
 800a8b0:	3ff00000 	.word	0x3ff00000
 800a8b4:	40080000 	.word	0x40080000
 800a8b8:	0800b850 	.word	0x0800b850
 800a8bc:	0800b840 	.word	0x0800b840
 800a8c0:	a3b4      	add	r3, pc, #720	; (adr r3, 800ab94 <__ieee754_pow+0xa14>)
 800a8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c6:	4640      	mov	r0, r8
 800a8c8:	4649      	mov	r1, r9
 800a8ca:	f7f5 fc8f 	bl	80001ec <__adddf3>
 800a8ce:	4622      	mov	r2, r4
 800a8d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8d4:	462b      	mov	r3, r5
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	4639      	mov	r1, r7
 800a8da:	f7f5 fc85 	bl	80001e8 <__aeabi_dsub>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8e6:	f7f6 faf1 	bl	8000ecc <__aeabi_dcmpgt>
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	f47f adfe 	bne.w	800a4ec <__ieee754_pow+0x36c>
 800a8f0:	4aa3      	ldr	r2, [pc, #652]	; (800ab80 <__ieee754_pow+0xa00>)
 800a8f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	f340 810a 	ble.w	800ab10 <__ieee754_pow+0x990>
 800a8fc:	151b      	asrs	r3, r3, #20
 800a8fe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a902:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a906:	fa4a f303 	asr.w	r3, sl, r3
 800a90a:	445b      	add	r3, fp
 800a90c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a910:	4e9c      	ldr	r6, [pc, #624]	; (800ab84 <__ieee754_pow+0xa04>)
 800a912:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a916:	4116      	asrs	r6, r2
 800a918:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a91c:	2000      	movs	r0, #0
 800a91e:	ea23 0106 	bic.w	r1, r3, r6
 800a922:	f1c2 0214 	rsb	r2, r2, #20
 800a926:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a92a:	fa4a fa02 	asr.w	sl, sl, r2
 800a92e:	f1bb 0f00 	cmp.w	fp, #0
 800a932:	4602      	mov	r2, r0
 800a934:	460b      	mov	r3, r1
 800a936:	4620      	mov	r0, r4
 800a938:	4629      	mov	r1, r5
 800a93a:	bfb8      	it	lt
 800a93c:	f1ca 0a00 	rsblt	sl, sl, #0
 800a940:	f7f5 fc52 	bl	80001e8 <__aeabi_dsub>
 800a944:	e9cd 0100 	strd	r0, r1, [sp]
 800a948:	4642      	mov	r2, r8
 800a94a:	464b      	mov	r3, r9
 800a94c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a950:	f7f5 fc4c 	bl	80001ec <__adddf3>
 800a954:	2000      	movs	r0, #0
 800a956:	a378      	add	r3, pc, #480	; (adr r3, 800ab38 <__ieee754_pow+0x9b8>)
 800a958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95c:	4604      	mov	r4, r0
 800a95e:	460d      	mov	r5, r1
 800a960:	f7f5 fdfa 	bl	8000558 <__aeabi_dmul>
 800a964:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a968:	4606      	mov	r6, r0
 800a96a:	460f      	mov	r7, r1
 800a96c:	4620      	mov	r0, r4
 800a96e:	4629      	mov	r1, r5
 800a970:	f7f5 fc3a 	bl	80001e8 <__aeabi_dsub>
 800a974:	4602      	mov	r2, r0
 800a976:	460b      	mov	r3, r1
 800a978:	4640      	mov	r0, r8
 800a97a:	4649      	mov	r1, r9
 800a97c:	f7f5 fc34 	bl	80001e8 <__aeabi_dsub>
 800a980:	a36f      	add	r3, pc, #444	; (adr r3, 800ab40 <__ieee754_pow+0x9c0>)
 800a982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a986:	f7f5 fde7 	bl	8000558 <__aeabi_dmul>
 800a98a:	a36f      	add	r3, pc, #444	; (adr r3, 800ab48 <__ieee754_pow+0x9c8>)
 800a98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a990:	4680      	mov	r8, r0
 800a992:	4689      	mov	r9, r1
 800a994:	4620      	mov	r0, r4
 800a996:	4629      	mov	r1, r5
 800a998:	f7f5 fdde 	bl	8000558 <__aeabi_dmul>
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	4640      	mov	r0, r8
 800a9a2:	4649      	mov	r1, r9
 800a9a4:	f7f5 fc22 	bl	80001ec <__adddf3>
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	460d      	mov	r5, r1
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	4639      	mov	r1, r7
 800a9b4:	f7f5 fc1a 	bl	80001ec <__adddf3>
 800a9b8:	4632      	mov	r2, r6
 800a9ba:	463b      	mov	r3, r7
 800a9bc:	4680      	mov	r8, r0
 800a9be:	4689      	mov	r9, r1
 800a9c0:	f7f5 fc12 	bl	80001e8 <__aeabi_dsub>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	f7f5 fc0c 	bl	80001e8 <__aeabi_dsub>
 800a9d0:	4642      	mov	r2, r8
 800a9d2:	4606      	mov	r6, r0
 800a9d4:	460f      	mov	r7, r1
 800a9d6:	464b      	mov	r3, r9
 800a9d8:	4640      	mov	r0, r8
 800a9da:	4649      	mov	r1, r9
 800a9dc:	f7f5 fdbc 	bl	8000558 <__aeabi_dmul>
 800a9e0:	a35b      	add	r3, pc, #364	; (adr r3, 800ab50 <__ieee754_pow+0x9d0>)
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	460d      	mov	r5, r1
 800a9ea:	f7f5 fdb5 	bl	8000558 <__aeabi_dmul>
 800a9ee:	a35a      	add	r3, pc, #360	; (adr r3, 800ab58 <__ieee754_pow+0x9d8>)
 800a9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f4:	f7f5 fbf8 	bl	80001e8 <__aeabi_dsub>
 800a9f8:	4622      	mov	r2, r4
 800a9fa:	462b      	mov	r3, r5
 800a9fc:	f7f5 fdac 	bl	8000558 <__aeabi_dmul>
 800aa00:	a357      	add	r3, pc, #348	; (adr r3, 800ab60 <__ieee754_pow+0x9e0>)
 800aa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa06:	f7f5 fbf1 	bl	80001ec <__adddf3>
 800aa0a:	4622      	mov	r2, r4
 800aa0c:	462b      	mov	r3, r5
 800aa0e:	f7f5 fda3 	bl	8000558 <__aeabi_dmul>
 800aa12:	a355      	add	r3, pc, #340	; (adr r3, 800ab68 <__ieee754_pow+0x9e8>)
 800aa14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa18:	f7f5 fbe6 	bl	80001e8 <__aeabi_dsub>
 800aa1c:	4622      	mov	r2, r4
 800aa1e:	462b      	mov	r3, r5
 800aa20:	f7f5 fd9a 	bl	8000558 <__aeabi_dmul>
 800aa24:	a352      	add	r3, pc, #328	; (adr r3, 800ab70 <__ieee754_pow+0x9f0>)
 800aa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2a:	f7f5 fbdf 	bl	80001ec <__adddf3>
 800aa2e:	4622      	mov	r2, r4
 800aa30:	462b      	mov	r3, r5
 800aa32:	f7f5 fd91 	bl	8000558 <__aeabi_dmul>
 800aa36:	4602      	mov	r2, r0
 800aa38:	460b      	mov	r3, r1
 800aa3a:	4640      	mov	r0, r8
 800aa3c:	4649      	mov	r1, r9
 800aa3e:	f7f5 fbd3 	bl	80001e8 <__aeabi_dsub>
 800aa42:	4604      	mov	r4, r0
 800aa44:	460d      	mov	r5, r1
 800aa46:	4602      	mov	r2, r0
 800aa48:	460b      	mov	r3, r1
 800aa4a:	4640      	mov	r0, r8
 800aa4c:	4649      	mov	r1, r9
 800aa4e:	f7f5 fd83 	bl	8000558 <__aeabi_dmul>
 800aa52:	2200      	movs	r2, #0
 800aa54:	e9cd 0100 	strd	r0, r1, [sp]
 800aa58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	4629      	mov	r1, r5
 800aa60:	f7f5 fbc2 	bl	80001e8 <__aeabi_dsub>
 800aa64:	4602      	mov	r2, r0
 800aa66:	460b      	mov	r3, r1
 800aa68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa6c:	f7f5 fe9e 	bl	80007ac <__aeabi_ddiv>
 800aa70:	4632      	mov	r2, r6
 800aa72:	4604      	mov	r4, r0
 800aa74:	460d      	mov	r5, r1
 800aa76:	463b      	mov	r3, r7
 800aa78:	4640      	mov	r0, r8
 800aa7a:	4649      	mov	r1, r9
 800aa7c:	f7f5 fd6c 	bl	8000558 <__aeabi_dmul>
 800aa80:	4632      	mov	r2, r6
 800aa82:	463b      	mov	r3, r7
 800aa84:	f7f5 fbb2 	bl	80001ec <__adddf3>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	4629      	mov	r1, r5
 800aa90:	f7f5 fbaa 	bl	80001e8 <__aeabi_dsub>
 800aa94:	4642      	mov	r2, r8
 800aa96:	464b      	mov	r3, r9
 800aa98:	f7f5 fba6 	bl	80001e8 <__aeabi_dsub>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	4939      	ldr	r1, [pc, #228]	; (800ab88 <__ieee754_pow+0xa08>)
 800aaa4:	f7f5 fba0 	bl	80001e8 <__aeabi_dsub>
 800aaa8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800aaac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800aab0:	4602      	mov	r2, r0
 800aab2:	460b      	mov	r3, r1
 800aab4:	da2f      	bge.n	800ab16 <__ieee754_pow+0x996>
 800aab6:	4650      	mov	r0, sl
 800aab8:	ec43 2b10 	vmov	d0, r2, r3
 800aabc:	f000 fb60 	bl	800b180 <scalbn>
 800aac0:	ec51 0b10 	vmov	r0, r1, d0
 800aac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aac8:	f7ff bbf1 	b.w	800a2ae <__ieee754_pow+0x12e>
 800aacc:	4b2f      	ldr	r3, [pc, #188]	; (800ab8c <__ieee754_pow+0xa0c>)
 800aace:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800aad2:	429e      	cmp	r6, r3
 800aad4:	f77f af0c 	ble.w	800a8f0 <__ieee754_pow+0x770>
 800aad8:	4b2d      	ldr	r3, [pc, #180]	; (800ab90 <__ieee754_pow+0xa10>)
 800aada:	440b      	add	r3, r1
 800aadc:	4303      	orrs	r3, r0
 800aade:	d00b      	beq.n	800aaf8 <__ieee754_pow+0x978>
 800aae0:	a325      	add	r3, pc, #148	; (adr r3, 800ab78 <__ieee754_pow+0x9f8>)
 800aae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaea:	f7f5 fd35 	bl	8000558 <__aeabi_dmul>
 800aaee:	a322      	add	r3, pc, #136	; (adr r3, 800ab78 <__ieee754_pow+0x9f8>)
 800aaf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf4:	f7ff bbdb 	b.w	800a2ae <__ieee754_pow+0x12e>
 800aaf8:	4622      	mov	r2, r4
 800aafa:	462b      	mov	r3, r5
 800aafc:	f7f5 fb74 	bl	80001e8 <__aeabi_dsub>
 800ab00:	4642      	mov	r2, r8
 800ab02:	464b      	mov	r3, r9
 800ab04:	f7f6 f9d8 	bl	8000eb8 <__aeabi_dcmpge>
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	f43f aef1 	beq.w	800a8f0 <__ieee754_pow+0x770>
 800ab0e:	e7e7      	b.n	800aae0 <__ieee754_pow+0x960>
 800ab10:	f04f 0a00 	mov.w	sl, #0
 800ab14:	e718      	b.n	800a948 <__ieee754_pow+0x7c8>
 800ab16:	4621      	mov	r1, r4
 800ab18:	e7d4      	b.n	800aac4 <__ieee754_pow+0x944>
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	491a      	ldr	r1, [pc, #104]	; (800ab88 <__ieee754_pow+0xa08>)
 800ab1e:	f7ff bb8f 	b.w	800a240 <__ieee754_pow+0xc0>
 800ab22:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab26:	f7ff bb8b 	b.w	800a240 <__ieee754_pow+0xc0>
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	4639      	mov	r1, r7
 800ab2e:	f7ff bb87 	b.w	800a240 <__ieee754_pow+0xc0>
 800ab32:	4693      	mov	fp, r2
 800ab34:	f7ff bb98 	b.w	800a268 <__ieee754_pow+0xe8>
 800ab38:	00000000 	.word	0x00000000
 800ab3c:	3fe62e43 	.word	0x3fe62e43
 800ab40:	fefa39ef 	.word	0xfefa39ef
 800ab44:	3fe62e42 	.word	0x3fe62e42
 800ab48:	0ca86c39 	.word	0x0ca86c39
 800ab4c:	be205c61 	.word	0xbe205c61
 800ab50:	72bea4d0 	.word	0x72bea4d0
 800ab54:	3e663769 	.word	0x3e663769
 800ab58:	c5d26bf1 	.word	0xc5d26bf1
 800ab5c:	3ebbbd41 	.word	0x3ebbbd41
 800ab60:	af25de2c 	.word	0xaf25de2c
 800ab64:	3f11566a 	.word	0x3f11566a
 800ab68:	16bebd93 	.word	0x16bebd93
 800ab6c:	3f66c16c 	.word	0x3f66c16c
 800ab70:	5555553e 	.word	0x5555553e
 800ab74:	3fc55555 	.word	0x3fc55555
 800ab78:	c2f8f359 	.word	0xc2f8f359
 800ab7c:	01a56e1f 	.word	0x01a56e1f
 800ab80:	3fe00000 	.word	0x3fe00000
 800ab84:	000fffff 	.word	0x000fffff
 800ab88:	3ff00000 	.word	0x3ff00000
 800ab8c:	4090cbff 	.word	0x4090cbff
 800ab90:	3f6f3400 	.word	0x3f6f3400
 800ab94:	652b82fe 	.word	0x652b82fe
 800ab98:	3c971547 	.word	0x3c971547

0800ab9c <__ieee754_sqrt>:
 800ab9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba0:	4955      	ldr	r1, [pc, #340]	; (800acf8 <__ieee754_sqrt+0x15c>)
 800aba2:	ec55 4b10 	vmov	r4, r5, d0
 800aba6:	43a9      	bics	r1, r5
 800aba8:	462b      	mov	r3, r5
 800abaa:	462a      	mov	r2, r5
 800abac:	d112      	bne.n	800abd4 <__ieee754_sqrt+0x38>
 800abae:	ee10 2a10 	vmov	r2, s0
 800abb2:	ee10 0a10 	vmov	r0, s0
 800abb6:	4629      	mov	r1, r5
 800abb8:	f7f5 fcce 	bl	8000558 <__aeabi_dmul>
 800abbc:	4602      	mov	r2, r0
 800abbe:	460b      	mov	r3, r1
 800abc0:	4620      	mov	r0, r4
 800abc2:	4629      	mov	r1, r5
 800abc4:	f7f5 fb12 	bl	80001ec <__adddf3>
 800abc8:	4604      	mov	r4, r0
 800abca:	460d      	mov	r5, r1
 800abcc:	ec45 4b10 	vmov	d0, r4, r5
 800abd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abd4:	2d00      	cmp	r5, #0
 800abd6:	ee10 0a10 	vmov	r0, s0
 800abda:	4621      	mov	r1, r4
 800abdc:	dc0f      	bgt.n	800abfe <__ieee754_sqrt+0x62>
 800abde:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800abe2:	4330      	orrs	r0, r6
 800abe4:	d0f2      	beq.n	800abcc <__ieee754_sqrt+0x30>
 800abe6:	b155      	cbz	r5, 800abfe <__ieee754_sqrt+0x62>
 800abe8:	ee10 2a10 	vmov	r2, s0
 800abec:	4620      	mov	r0, r4
 800abee:	4629      	mov	r1, r5
 800abf0:	f7f5 fafa 	bl	80001e8 <__aeabi_dsub>
 800abf4:	4602      	mov	r2, r0
 800abf6:	460b      	mov	r3, r1
 800abf8:	f7f5 fdd8 	bl	80007ac <__aeabi_ddiv>
 800abfc:	e7e4      	b.n	800abc8 <__ieee754_sqrt+0x2c>
 800abfe:	151b      	asrs	r3, r3, #20
 800ac00:	d073      	beq.n	800acea <__ieee754_sqrt+0x14e>
 800ac02:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ac06:	07dd      	lsls	r5, r3, #31
 800ac08:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ac0c:	bf48      	it	mi
 800ac0e:	0fc8      	lsrmi	r0, r1, #31
 800ac10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ac14:	bf44      	itt	mi
 800ac16:	0049      	lslmi	r1, r1, #1
 800ac18:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800ac1c:	2500      	movs	r5, #0
 800ac1e:	1058      	asrs	r0, r3, #1
 800ac20:	0fcb      	lsrs	r3, r1, #31
 800ac22:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800ac26:	0049      	lsls	r1, r1, #1
 800ac28:	2316      	movs	r3, #22
 800ac2a:	462c      	mov	r4, r5
 800ac2c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800ac30:	19a7      	adds	r7, r4, r6
 800ac32:	4297      	cmp	r7, r2
 800ac34:	bfde      	ittt	le
 800ac36:	19bc      	addle	r4, r7, r6
 800ac38:	1bd2      	suble	r2, r2, r7
 800ac3a:	19ad      	addle	r5, r5, r6
 800ac3c:	0fcf      	lsrs	r7, r1, #31
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800ac44:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ac48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ac4c:	d1f0      	bne.n	800ac30 <__ieee754_sqrt+0x94>
 800ac4e:	f04f 0c20 	mov.w	ip, #32
 800ac52:	469e      	mov	lr, r3
 800ac54:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ac58:	42a2      	cmp	r2, r4
 800ac5a:	eb06 070e 	add.w	r7, r6, lr
 800ac5e:	dc02      	bgt.n	800ac66 <__ieee754_sqrt+0xca>
 800ac60:	d112      	bne.n	800ac88 <__ieee754_sqrt+0xec>
 800ac62:	428f      	cmp	r7, r1
 800ac64:	d810      	bhi.n	800ac88 <__ieee754_sqrt+0xec>
 800ac66:	2f00      	cmp	r7, #0
 800ac68:	eb07 0e06 	add.w	lr, r7, r6
 800ac6c:	da42      	bge.n	800acf4 <__ieee754_sqrt+0x158>
 800ac6e:	f1be 0f00 	cmp.w	lr, #0
 800ac72:	db3f      	blt.n	800acf4 <__ieee754_sqrt+0x158>
 800ac74:	f104 0801 	add.w	r8, r4, #1
 800ac78:	1b12      	subs	r2, r2, r4
 800ac7a:	428f      	cmp	r7, r1
 800ac7c:	bf88      	it	hi
 800ac7e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800ac82:	1bc9      	subs	r1, r1, r7
 800ac84:	4433      	add	r3, r6
 800ac86:	4644      	mov	r4, r8
 800ac88:	0052      	lsls	r2, r2, #1
 800ac8a:	f1bc 0c01 	subs.w	ip, ip, #1
 800ac8e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800ac92:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ac96:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ac9a:	d1dd      	bne.n	800ac58 <__ieee754_sqrt+0xbc>
 800ac9c:	430a      	orrs	r2, r1
 800ac9e:	d006      	beq.n	800acae <__ieee754_sqrt+0x112>
 800aca0:	1c5c      	adds	r4, r3, #1
 800aca2:	bf13      	iteet	ne
 800aca4:	3301      	addne	r3, #1
 800aca6:	3501      	addeq	r5, #1
 800aca8:	4663      	moveq	r3, ip
 800acaa:	f023 0301 	bicne.w	r3, r3, #1
 800acae:	106a      	asrs	r2, r5, #1
 800acb0:	085b      	lsrs	r3, r3, #1
 800acb2:	07e9      	lsls	r1, r5, #31
 800acb4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800acb8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800acbc:	bf48      	it	mi
 800acbe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800acc2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800acc6:	461c      	mov	r4, r3
 800acc8:	e780      	b.n	800abcc <__ieee754_sqrt+0x30>
 800acca:	0aca      	lsrs	r2, r1, #11
 800accc:	3815      	subs	r0, #21
 800acce:	0549      	lsls	r1, r1, #21
 800acd0:	2a00      	cmp	r2, #0
 800acd2:	d0fa      	beq.n	800acca <__ieee754_sqrt+0x12e>
 800acd4:	02d6      	lsls	r6, r2, #11
 800acd6:	d50a      	bpl.n	800acee <__ieee754_sqrt+0x152>
 800acd8:	f1c3 0420 	rsb	r4, r3, #32
 800acdc:	fa21 f404 	lsr.w	r4, r1, r4
 800ace0:	1e5d      	subs	r5, r3, #1
 800ace2:	4099      	lsls	r1, r3
 800ace4:	4322      	orrs	r2, r4
 800ace6:	1b43      	subs	r3, r0, r5
 800ace8:	e78b      	b.n	800ac02 <__ieee754_sqrt+0x66>
 800acea:	4618      	mov	r0, r3
 800acec:	e7f0      	b.n	800acd0 <__ieee754_sqrt+0x134>
 800acee:	0052      	lsls	r2, r2, #1
 800acf0:	3301      	adds	r3, #1
 800acf2:	e7ef      	b.n	800acd4 <__ieee754_sqrt+0x138>
 800acf4:	46a0      	mov	r8, r4
 800acf6:	e7bf      	b.n	800ac78 <__ieee754_sqrt+0xdc>
 800acf8:	7ff00000 	.word	0x7ff00000
 800acfc:	00000000 	.word	0x00000000

0800ad00 <atan>:
 800ad00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad04:	ec55 4b10 	vmov	r4, r5, d0
 800ad08:	4bc3      	ldr	r3, [pc, #780]	; (800b018 <atan+0x318>)
 800ad0a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ad0e:	429e      	cmp	r6, r3
 800ad10:	46ab      	mov	fp, r5
 800ad12:	dd18      	ble.n	800ad46 <atan+0x46>
 800ad14:	4bc1      	ldr	r3, [pc, #772]	; (800b01c <atan+0x31c>)
 800ad16:	429e      	cmp	r6, r3
 800ad18:	dc01      	bgt.n	800ad1e <atan+0x1e>
 800ad1a:	d109      	bne.n	800ad30 <atan+0x30>
 800ad1c:	b144      	cbz	r4, 800ad30 <atan+0x30>
 800ad1e:	4622      	mov	r2, r4
 800ad20:	462b      	mov	r3, r5
 800ad22:	4620      	mov	r0, r4
 800ad24:	4629      	mov	r1, r5
 800ad26:	f7f5 fa61 	bl	80001ec <__adddf3>
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	460d      	mov	r5, r1
 800ad2e:	e006      	b.n	800ad3e <atan+0x3e>
 800ad30:	f1bb 0f00 	cmp.w	fp, #0
 800ad34:	f340 8131 	ble.w	800af9a <atan+0x29a>
 800ad38:	a59b      	add	r5, pc, #620	; (adr r5, 800afa8 <atan+0x2a8>)
 800ad3a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ad3e:	ec45 4b10 	vmov	d0, r4, r5
 800ad42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad46:	4bb6      	ldr	r3, [pc, #728]	; (800b020 <atan+0x320>)
 800ad48:	429e      	cmp	r6, r3
 800ad4a:	dc14      	bgt.n	800ad76 <atan+0x76>
 800ad4c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ad50:	429e      	cmp	r6, r3
 800ad52:	dc0d      	bgt.n	800ad70 <atan+0x70>
 800ad54:	a396      	add	r3, pc, #600	; (adr r3, 800afb0 <atan+0x2b0>)
 800ad56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad5a:	ee10 0a10 	vmov	r0, s0
 800ad5e:	4629      	mov	r1, r5
 800ad60:	f7f5 fa44 	bl	80001ec <__adddf3>
 800ad64:	2200      	movs	r2, #0
 800ad66:	4baf      	ldr	r3, [pc, #700]	; (800b024 <atan+0x324>)
 800ad68:	f7f6 f8b0 	bl	8000ecc <__aeabi_dcmpgt>
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	d1e6      	bne.n	800ad3e <atan+0x3e>
 800ad70:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ad74:	e02b      	b.n	800adce <atan+0xce>
 800ad76:	f000 f963 	bl	800b040 <fabs>
 800ad7a:	4bab      	ldr	r3, [pc, #684]	; (800b028 <atan+0x328>)
 800ad7c:	429e      	cmp	r6, r3
 800ad7e:	ec55 4b10 	vmov	r4, r5, d0
 800ad82:	f300 80bf 	bgt.w	800af04 <atan+0x204>
 800ad86:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ad8a:	429e      	cmp	r6, r3
 800ad8c:	f300 80a0 	bgt.w	800aed0 <atan+0x1d0>
 800ad90:	ee10 2a10 	vmov	r2, s0
 800ad94:	ee10 0a10 	vmov	r0, s0
 800ad98:	462b      	mov	r3, r5
 800ad9a:	4629      	mov	r1, r5
 800ad9c:	f7f5 fa26 	bl	80001ec <__adddf3>
 800ada0:	2200      	movs	r2, #0
 800ada2:	4ba0      	ldr	r3, [pc, #640]	; (800b024 <atan+0x324>)
 800ada4:	f7f5 fa20 	bl	80001e8 <__aeabi_dsub>
 800ada8:	2200      	movs	r2, #0
 800adaa:	4606      	mov	r6, r0
 800adac:	460f      	mov	r7, r1
 800adae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800adb2:	4620      	mov	r0, r4
 800adb4:	4629      	mov	r1, r5
 800adb6:	f7f5 fa19 	bl	80001ec <__adddf3>
 800adba:	4602      	mov	r2, r0
 800adbc:	460b      	mov	r3, r1
 800adbe:	4630      	mov	r0, r6
 800adc0:	4639      	mov	r1, r7
 800adc2:	f7f5 fcf3 	bl	80007ac <__aeabi_ddiv>
 800adc6:	f04f 0a00 	mov.w	sl, #0
 800adca:	4604      	mov	r4, r0
 800adcc:	460d      	mov	r5, r1
 800adce:	4622      	mov	r2, r4
 800add0:	462b      	mov	r3, r5
 800add2:	4620      	mov	r0, r4
 800add4:	4629      	mov	r1, r5
 800add6:	f7f5 fbbf 	bl	8000558 <__aeabi_dmul>
 800adda:	4602      	mov	r2, r0
 800addc:	460b      	mov	r3, r1
 800adde:	4680      	mov	r8, r0
 800ade0:	4689      	mov	r9, r1
 800ade2:	f7f5 fbb9 	bl	8000558 <__aeabi_dmul>
 800ade6:	a374      	add	r3, pc, #464	; (adr r3, 800afb8 <atan+0x2b8>)
 800ade8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adec:	4606      	mov	r6, r0
 800adee:	460f      	mov	r7, r1
 800adf0:	f7f5 fbb2 	bl	8000558 <__aeabi_dmul>
 800adf4:	a372      	add	r3, pc, #456	; (adr r3, 800afc0 <atan+0x2c0>)
 800adf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfa:	f7f5 f9f7 	bl	80001ec <__adddf3>
 800adfe:	4632      	mov	r2, r6
 800ae00:	463b      	mov	r3, r7
 800ae02:	f7f5 fba9 	bl	8000558 <__aeabi_dmul>
 800ae06:	a370      	add	r3, pc, #448	; (adr r3, 800afc8 <atan+0x2c8>)
 800ae08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0c:	f7f5 f9ee 	bl	80001ec <__adddf3>
 800ae10:	4632      	mov	r2, r6
 800ae12:	463b      	mov	r3, r7
 800ae14:	f7f5 fba0 	bl	8000558 <__aeabi_dmul>
 800ae18:	a36d      	add	r3, pc, #436	; (adr r3, 800afd0 <atan+0x2d0>)
 800ae1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1e:	f7f5 f9e5 	bl	80001ec <__adddf3>
 800ae22:	4632      	mov	r2, r6
 800ae24:	463b      	mov	r3, r7
 800ae26:	f7f5 fb97 	bl	8000558 <__aeabi_dmul>
 800ae2a:	a36b      	add	r3, pc, #428	; (adr r3, 800afd8 <atan+0x2d8>)
 800ae2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae30:	f7f5 f9dc 	bl	80001ec <__adddf3>
 800ae34:	4632      	mov	r2, r6
 800ae36:	463b      	mov	r3, r7
 800ae38:	f7f5 fb8e 	bl	8000558 <__aeabi_dmul>
 800ae3c:	a368      	add	r3, pc, #416	; (adr r3, 800afe0 <atan+0x2e0>)
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	f7f5 f9d3 	bl	80001ec <__adddf3>
 800ae46:	4642      	mov	r2, r8
 800ae48:	464b      	mov	r3, r9
 800ae4a:	f7f5 fb85 	bl	8000558 <__aeabi_dmul>
 800ae4e:	a366      	add	r3, pc, #408	; (adr r3, 800afe8 <atan+0x2e8>)
 800ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae54:	4680      	mov	r8, r0
 800ae56:	4689      	mov	r9, r1
 800ae58:	4630      	mov	r0, r6
 800ae5a:	4639      	mov	r1, r7
 800ae5c:	f7f5 fb7c 	bl	8000558 <__aeabi_dmul>
 800ae60:	a363      	add	r3, pc, #396	; (adr r3, 800aff0 <atan+0x2f0>)
 800ae62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae66:	f7f5 f9bf 	bl	80001e8 <__aeabi_dsub>
 800ae6a:	4632      	mov	r2, r6
 800ae6c:	463b      	mov	r3, r7
 800ae6e:	f7f5 fb73 	bl	8000558 <__aeabi_dmul>
 800ae72:	a361      	add	r3, pc, #388	; (adr r3, 800aff8 <atan+0x2f8>)
 800ae74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae78:	f7f5 f9b6 	bl	80001e8 <__aeabi_dsub>
 800ae7c:	4632      	mov	r2, r6
 800ae7e:	463b      	mov	r3, r7
 800ae80:	f7f5 fb6a 	bl	8000558 <__aeabi_dmul>
 800ae84:	a35e      	add	r3, pc, #376	; (adr r3, 800b000 <atan+0x300>)
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	f7f5 f9ad 	bl	80001e8 <__aeabi_dsub>
 800ae8e:	4632      	mov	r2, r6
 800ae90:	463b      	mov	r3, r7
 800ae92:	f7f5 fb61 	bl	8000558 <__aeabi_dmul>
 800ae96:	a35c      	add	r3, pc, #368	; (adr r3, 800b008 <atan+0x308>)
 800ae98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9c:	f7f5 f9a4 	bl	80001e8 <__aeabi_dsub>
 800aea0:	4632      	mov	r2, r6
 800aea2:	463b      	mov	r3, r7
 800aea4:	f7f5 fb58 	bl	8000558 <__aeabi_dmul>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	460b      	mov	r3, r1
 800aeac:	4640      	mov	r0, r8
 800aeae:	4649      	mov	r1, r9
 800aeb0:	f7f5 f99c 	bl	80001ec <__adddf3>
 800aeb4:	4622      	mov	r2, r4
 800aeb6:	462b      	mov	r3, r5
 800aeb8:	f7f5 fb4e 	bl	8000558 <__aeabi_dmul>
 800aebc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800aec0:	4602      	mov	r2, r0
 800aec2:	460b      	mov	r3, r1
 800aec4:	d14b      	bne.n	800af5e <atan+0x25e>
 800aec6:	4620      	mov	r0, r4
 800aec8:	4629      	mov	r1, r5
 800aeca:	f7f5 f98d 	bl	80001e8 <__aeabi_dsub>
 800aece:	e72c      	b.n	800ad2a <atan+0x2a>
 800aed0:	ee10 0a10 	vmov	r0, s0
 800aed4:	2200      	movs	r2, #0
 800aed6:	4b53      	ldr	r3, [pc, #332]	; (800b024 <atan+0x324>)
 800aed8:	4629      	mov	r1, r5
 800aeda:	f7f5 f985 	bl	80001e8 <__aeabi_dsub>
 800aede:	2200      	movs	r2, #0
 800aee0:	4606      	mov	r6, r0
 800aee2:	460f      	mov	r7, r1
 800aee4:	4b4f      	ldr	r3, [pc, #316]	; (800b024 <atan+0x324>)
 800aee6:	4620      	mov	r0, r4
 800aee8:	4629      	mov	r1, r5
 800aeea:	f7f5 f97f 	bl	80001ec <__adddf3>
 800aeee:	4602      	mov	r2, r0
 800aef0:	460b      	mov	r3, r1
 800aef2:	4630      	mov	r0, r6
 800aef4:	4639      	mov	r1, r7
 800aef6:	f7f5 fc59 	bl	80007ac <__aeabi_ddiv>
 800aefa:	f04f 0a01 	mov.w	sl, #1
 800aefe:	4604      	mov	r4, r0
 800af00:	460d      	mov	r5, r1
 800af02:	e764      	b.n	800adce <atan+0xce>
 800af04:	4b49      	ldr	r3, [pc, #292]	; (800b02c <atan+0x32c>)
 800af06:	429e      	cmp	r6, r3
 800af08:	dc1d      	bgt.n	800af46 <atan+0x246>
 800af0a:	ee10 0a10 	vmov	r0, s0
 800af0e:	2200      	movs	r2, #0
 800af10:	4b47      	ldr	r3, [pc, #284]	; (800b030 <atan+0x330>)
 800af12:	4629      	mov	r1, r5
 800af14:	f7f5 f968 	bl	80001e8 <__aeabi_dsub>
 800af18:	2200      	movs	r2, #0
 800af1a:	4606      	mov	r6, r0
 800af1c:	460f      	mov	r7, r1
 800af1e:	4b44      	ldr	r3, [pc, #272]	; (800b030 <atan+0x330>)
 800af20:	4620      	mov	r0, r4
 800af22:	4629      	mov	r1, r5
 800af24:	f7f5 fb18 	bl	8000558 <__aeabi_dmul>
 800af28:	2200      	movs	r2, #0
 800af2a:	4b3e      	ldr	r3, [pc, #248]	; (800b024 <atan+0x324>)
 800af2c:	f7f5 f95e 	bl	80001ec <__adddf3>
 800af30:	4602      	mov	r2, r0
 800af32:	460b      	mov	r3, r1
 800af34:	4630      	mov	r0, r6
 800af36:	4639      	mov	r1, r7
 800af38:	f7f5 fc38 	bl	80007ac <__aeabi_ddiv>
 800af3c:	f04f 0a02 	mov.w	sl, #2
 800af40:	4604      	mov	r4, r0
 800af42:	460d      	mov	r5, r1
 800af44:	e743      	b.n	800adce <atan+0xce>
 800af46:	462b      	mov	r3, r5
 800af48:	ee10 2a10 	vmov	r2, s0
 800af4c:	2000      	movs	r0, #0
 800af4e:	4939      	ldr	r1, [pc, #228]	; (800b034 <atan+0x334>)
 800af50:	f7f5 fc2c 	bl	80007ac <__aeabi_ddiv>
 800af54:	f04f 0a03 	mov.w	sl, #3
 800af58:	4604      	mov	r4, r0
 800af5a:	460d      	mov	r5, r1
 800af5c:	e737      	b.n	800adce <atan+0xce>
 800af5e:	4b36      	ldr	r3, [pc, #216]	; (800b038 <atan+0x338>)
 800af60:	4e36      	ldr	r6, [pc, #216]	; (800b03c <atan+0x33c>)
 800af62:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800af66:	4456      	add	r6, sl
 800af68:	449a      	add	sl, r3
 800af6a:	e9da 2300 	ldrd	r2, r3, [sl]
 800af6e:	f7f5 f93b 	bl	80001e8 <__aeabi_dsub>
 800af72:	4622      	mov	r2, r4
 800af74:	462b      	mov	r3, r5
 800af76:	f7f5 f937 	bl	80001e8 <__aeabi_dsub>
 800af7a:	4602      	mov	r2, r0
 800af7c:	460b      	mov	r3, r1
 800af7e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800af82:	f7f5 f931 	bl	80001e8 <__aeabi_dsub>
 800af86:	f1bb 0f00 	cmp.w	fp, #0
 800af8a:	4604      	mov	r4, r0
 800af8c:	460d      	mov	r5, r1
 800af8e:	f6bf aed6 	bge.w	800ad3e <atan+0x3e>
 800af92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af96:	461d      	mov	r5, r3
 800af98:	e6d1      	b.n	800ad3e <atan+0x3e>
 800af9a:	a51d      	add	r5, pc, #116	; (adr r5, 800b010 <atan+0x310>)
 800af9c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800afa0:	e6cd      	b.n	800ad3e <atan+0x3e>
 800afa2:	bf00      	nop
 800afa4:	f3af 8000 	nop.w
 800afa8:	54442d18 	.word	0x54442d18
 800afac:	3ff921fb 	.word	0x3ff921fb
 800afb0:	8800759c 	.word	0x8800759c
 800afb4:	7e37e43c 	.word	0x7e37e43c
 800afb8:	e322da11 	.word	0xe322da11
 800afbc:	3f90ad3a 	.word	0x3f90ad3a
 800afc0:	24760deb 	.word	0x24760deb
 800afc4:	3fa97b4b 	.word	0x3fa97b4b
 800afc8:	a0d03d51 	.word	0xa0d03d51
 800afcc:	3fb10d66 	.word	0x3fb10d66
 800afd0:	c54c206e 	.word	0xc54c206e
 800afd4:	3fb745cd 	.word	0x3fb745cd
 800afd8:	920083ff 	.word	0x920083ff
 800afdc:	3fc24924 	.word	0x3fc24924
 800afe0:	5555550d 	.word	0x5555550d
 800afe4:	3fd55555 	.word	0x3fd55555
 800afe8:	2c6a6c2f 	.word	0x2c6a6c2f
 800afec:	bfa2b444 	.word	0xbfa2b444
 800aff0:	52defd9a 	.word	0x52defd9a
 800aff4:	3fadde2d 	.word	0x3fadde2d
 800aff8:	af749a6d 	.word	0xaf749a6d
 800affc:	3fb3b0f2 	.word	0x3fb3b0f2
 800b000:	fe231671 	.word	0xfe231671
 800b004:	3fbc71c6 	.word	0x3fbc71c6
 800b008:	9998ebc4 	.word	0x9998ebc4
 800b00c:	3fc99999 	.word	0x3fc99999
 800b010:	54442d18 	.word	0x54442d18
 800b014:	bff921fb 	.word	0xbff921fb
 800b018:	440fffff 	.word	0x440fffff
 800b01c:	7ff00000 	.word	0x7ff00000
 800b020:	3fdbffff 	.word	0x3fdbffff
 800b024:	3ff00000 	.word	0x3ff00000
 800b028:	3ff2ffff 	.word	0x3ff2ffff
 800b02c:	40037fff 	.word	0x40037fff
 800b030:	3ff80000 	.word	0x3ff80000
 800b034:	bff00000 	.word	0xbff00000
 800b038:	0800b880 	.word	0x0800b880
 800b03c:	0800b860 	.word	0x0800b860

0800b040 <fabs>:
 800b040:	ec51 0b10 	vmov	r0, r1, d0
 800b044:	ee10 2a10 	vmov	r2, s0
 800b048:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b04c:	ec43 2b10 	vmov	d0, r2, r3
 800b050:	4770      	bx	lr

0800b052 <finite>:
 800b052:	ee10 3a90 	vmov	r3, s1
 800b056:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800b05a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b05e:	0fc0      	lsrs	r0, r0, #31
 800b060:	4770      	bx	lr

0800b062 <matherr>:
 800b062:	2000      	movs	r0, #0
 800b064:	4770      	bx	lr
	...

0800b068 <nan>:
 800b068:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b070 <nan+0x8>
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	00000000 	.word	0x00000000
 800b074:	7ff80000 	.word	0x7ff80000

0800b078 <rint>:
 800b078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b07a:	ec51 0b10 	vmov	r0, r1, d0
 800b07e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b082:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b086:	2e13      	cmp	r6, #19
 800b088:	460b      	mov	r3, r1
 800b08a:	ee10 4a10 	vmov	r4, s0
 800b08e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800b092:	dc56      	bgt.n	800b142 <rint+0xca>
 800b094:	2e00      	cmp	r6, #0
 800b096:	da2b      	bge.n	800b0f0 <rint+0x78>
 800b098:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b09c:	4302      	orrs	r2, r0
 800b09e:	d023      	beq.n	800b0e8 <rint+0x70>
 800b0a0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b0a4:	4302      	orrs	r2, r0
 800b0a6:	4254      	negs	r4, r2
 800b0a8:	4314      	orrs	r4, r2
 800b0aa:	0c4b      	lsrs	r3, r1, #17
 800b0ac:	0b24      	lsrs	r4, r4, #12
 800b0ae:	045b      	lsls	r3, r3, #17
 800b0b0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800b0b4:	ea44 0103 	orr.w	r1, r4, r3
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	492f      	ldr	r1, [pc, #188]	; (800b178 <rint+0x100>)
 800b0bc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800b0c0:	e9d1 6700 	ldrd	r6, r7, [r1]
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	4639      	mov	r1, r7
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	f7f5 f88f 	bl	80001ec <__adddf3>
 800b0ce:	e9cd 0100 	strd	r0, r1, [sp]
 800b0d2:	463b      	mov	r3, r7
 800b0d4:	4632      	mov	r2, r6
 800b0d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0da:	f7f5 f885 	bl	80001e8 <__aeabi_dsub>
 800b0de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b0e2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800b0e6:	4639      	mov	r1, r7
 800b0e8:	ec41 0b10 	vmov	d0, r0, r1
 800b0ec:	b003      	add	sp, #12
 800b0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0f0:	4a22      	ldr	r2, [pc, #136]	; (800b17c <rint+0x104>)
 800b0f2:	4132      	asrs	r2, r6
 800b0f4:	ea01 0702 	and.w	r7, r1, r2
 800b0f8:	4307      	orrs	r7, r0
 800b0fa:	d0f5      	beq.n	800b0e8 <rint+0x70>
 800b0fc:	0852      	lsrs	r2, r2, #1
 800b0fe:	4011      	ands	r1, r2
 800b100:	430c      	orrs	r4, r1
 800b102:	d00b      	beq.n	800b11c <rint+0xa4>
 800b104:	ea23 0202 	bic.w	r2, r3, r2
 800b108:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b10c:	2e13      	cmp	r6, #19
 800b10e:	fa43 f306 	asr.w	r3, r3, r6
 800b112:	bf0c      	ite	eq
 800b114:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800b118:	2400      	movne	r4, #0
 800b11a:	4313      	orrs	r3, r2
 800b11c:	4916      	ldr	r1, [pc, #88]	; (800b178 <rint+0x100>)
 800b11e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800b122:	4622      	mov	r2, r4
 800b124:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b128:	4620      	mov	r0, r4
 800b12a:	4629      	mov	r1, r5
 800b12c:	f7f5 f85e 	bl	80001ec <__adddf3>
 800b130:	e9cd 0100 	strd	r0, r1, [sp]
 800b134:	4622      	mov	r2, r4
 800b136:	462b      	mov	r3, r5
 800b138:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b13c:	f7f5 f854 	bl	80001e8 <__aeabi_dsub>
 800b140:	e7d2      	b.n	800b0e8 <rint+0x70>
 800b142:	2e33      	cmp	r6, #51	; 0x33
 800b144:	dd07      	ble.n	800b156 <rint+0xde>
 800b146:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b14a:	d1cd      	bne.n	800b0e8 <rint+0x70>
 800b14c:	ee10 2a10 	vmov	r2, s0
 800b150:	f7f5 f84c 	bl	80001ec <__adddf3>
 800b154:	e7c8      	b.n	800b0e8 <rint+0x70>
 800b156:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800b15a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b15e:	40f2      	lsrs	r2, r6
 800b160:	4210      	tst	r0, r2
 800b162:	d0c1      	beq.n	800b0e8 <rint+0x70>
 800b164:	0852      	lsrs	r2, r2, #1
 800b166:	4210      	tst	r0, r2
 800b168:	bf1f      	itttt	ne
 800b16a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800b16e:	ea20 0202 	bicne.w	r2, r0, r2
 800b172:	4134      	asrne	r4, r6
 800b174:	4314      	orrne	r4, r2
 800b176:	e7d1      	b.n	800b11c <rint+0xa4>
 800b178:	0800b8a0 	.word	0x0800b8a0
 800b17c:	000fffff 	.word	0x000fffff

0800b180 <scalbn>:
 800b180:	b570      	push	{r4, r5, r6, lr}
 800b182:	ec55 4b10 	vmov	r4, r5, d0
 800b186:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b18a:	4606      	mov	r6, r0
 800b18c:	462b      	mov	r3, r5
 800b18e:	b9aa      	cbnz	r2, 800b1bc <scalbn+0x3c>
 800b190:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b194:	4323      	orrs	r3, r4
 800b196:	d03b      	beq.n	800b210 <scalbn+0x90>
 800b198:	4b31      	ldr	r3, [pc, #196]	; (800b260 <scalbn+0xe0>)
 800b19a:	4629      	mov	r1, r5
 800b19c:	2200      	movs	r2, #0
 800b19e:	ee10 0a10 	vmov	r0, s0
 800b1a2:	f7f5 f9d9 	bl	8000558 <__aeabi_dmul>
 800b1a6:	4b2f      	ldr	r3, [pc, #188]	; (800b264 <scalbn+0xe4>)
 800b1a8:	429e      	cmp	r6, r3
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	460d      	mov	r5, r1
 800b1ae:	da12      	bge.n	800b1d6 <scalbn+0x56>
 800b1b0:	a327      	add	r3, pc, #156	; (adr r3, 800b250 <scalbn+0xd0>)
 800b1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b6:	f7f5 f9cf 	bl	8000558 <__aeabi_dmul>
 800b1ba:	e009      	b.n	800b1d0 <scalbn+0x50>
 800b1bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b1c0:	428a      	cmp	r2, r1
 800b1c2:	d10c      	bne.n	800b1de <scalbn+0x5e>
 800b1c4:	ee10 2a10 	vmov	r2, s0
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	4629      	mov	r1, r5
 800b1cc:	f7f5 f80e 	bl	80001ec <__adddf3>
 800b1d0:	4604      	mov	r4, r0
 800b1d2:	460d      	mov	r5, r1
 800b1d4:	e01c      	b.n	800b210 <scalbn+0x90>
 800b1d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b1da:	460b      	mov	r3, r1
 800b1dc:	3a36      	subs	r2, #54	; 0x36
 800b1de:	4432      	add	r2, r6
 800b1e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b1e4:	428a      	cmp	r2, r1
 800b1e6:	dd0b      	ble.n	800b200 <scalbn+0x80>
 800b1e8:	ec45 4b11 	vmov	d1, r4, r5
 800b1ec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800b258 <scalbn+0xd8>
 800b1f0:	f000 f83c 	bl	800b26c <copysign>
 800b1f4:	a318      	add	r3, pc, #96	; (adr r3, 800b258 <scalbn+0xd8>)
 800b1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fa:	ec51 0b10 	vmov	r0, r1, d0
 800b1fe:	e7da      	b.n	800b1b6 <scalbn+0x36>
 800b200:	2a00      	cmp	r2, #0
 800b202:	dd08      	ble.n	800b216 <scalbn+0x96>
 800b204:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b208:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b20c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b210:	ec45 4b10 	vmov	d0, r4, r5
 800b214:	bd70      	pop	{r4, r5, r6, pc}
 800b216:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b21a:	da0d      	bge.n	800b238 <scalbn+0xb8>
 800b21c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b220:	429e      	cmp	r6, r3
 800b222:	ec45 4b11 	vmov	d1, r4, r5
 800b226:	dce1      	bgt.n	800b1ec <scalbn+0x6c>
 800b228:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800b250 <scalbn+0xd0>
 800b22c:	f000 f81e 	bl	800b26c <copysign>
 800b230:	a307      	add	r3, pc, #28	; (adr r3, 800b250 <scalbn+0xd0>)
 800b232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b236:	e7e0      	b.n	800b1fa <scalbn+0x7a>
 800b238:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b23c:	3236      	adds	r2, #54	; 0x36
 800b23e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b242:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b246:	4620      	mov	r0, r4
 800b248:	4629      	mov	r1, r5
 800b24a:	2200      	movs	r2, #0
 800b24c:	4b06      	ldr	r3, [pc, #24]	; (800b268 <scalbn+0xe8>)
 800b24e:	e7b2      	b.n	800b1b6 <scalbn+0x36>
 800b250:	c2f8f359 	.word	0xc2f8f359
 800b254:	01a56e1f 	.word	0x01a56e1f
 800b258:	8800759c 	.word	0x8800759c
 800b25c:	7e37e43c 	.word	0x7e37e43c
 800b260:	43500000 	.word	0x43500000
 800b264:	ffff3cb0 	.word	0xffff3cb0
 800b268:	3c900000 	.word	0x3c900000

0800b26c <copysign>:
 800b26c:	ec51 0b10 	vmov	r0, r1, d0
 800b270:	ee11 0a90 	vmov	r0, s3
 800b274:	ee10 2a10 	vmov	r2, s0
 800b278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b27c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800b280:	ea41 0300 	orr.w	r3, r1, r0
 800b284:	ec43 2b10 	vmov	d0, r2, r3
 800b288:	4770      	bx	lr
	...

0800b28c <_init>:
 800b28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b28e:	bf00      	nop
 800b290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b292:	bc08      	pop	{r3}
 800b294:	469e      	mov	lr, r3
 800b296:	4770      	bx	lr

0800b298 <_fini>:
 800b298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29a:	bf00      	nop
 800b29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b29e:	bc08      	pop	{r3}
 800b2a0:	469e      	mov	lr, r3
 800b2a2:	4770      	bx	lr
